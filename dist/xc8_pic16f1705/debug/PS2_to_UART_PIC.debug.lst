

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Thu Feb 26 16:01:12 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F1705
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK4,global,class=CODE,delta=2
     7                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	inittext,global,class=CODE,delta=2
    19                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1
    20                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    21                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    22                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    23                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    24                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    25                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    26                           	psect	text1,local,class=CODE,merge=1,delta=2
    27                           	psect	text2,local,class=CODE,merge=1,delta=2
    28                           	psect	text3,local,class=CODE,merge=1,delta=2
    29                           	psect	text4,local,class=CODE,merge=1,delta=2
    30                           	psect	text5,local,class=CODE,merge=1,delta=2
    31                           	psect	text6,local,class=CODE,merge=1,delta=2
    32                           	psect	text7,local,class=CODE,merge=1,delta=2
    33                           	psect	text8,local,class=CODE,merge=1,delta=2
    34                           	psect	text9,local,class=CODE,merge=1,delta=2
    35                           	psect	text10,local,class=CODE,merge=1,delta=2
    36                           	psect	text11,local,class=CODE,merge=1,delta=2
    37                           	psect	text12,local,class=CODE,merge=1,delta=2
    38                           	psect	text13,local,class=CODE,merge=1,delta=2
    39                           	psect	text14,local,class=CODE,merge=1,delta=2
    40                           	psect	text15,local,class=CODE,merge=1,delta=2
    41                           	psect	text16,local,class=CODE,merge=1,delta=2
    42                           	psect	text17,local,class=CODE,merge=1,delta=2
    43                           	psect	text18,local,class=CODE,merge=1,delta=2
    44                           	psect	text19,local,class=CODE,merge=1,delta=2
    45                           	psect	text20,local,class=CODE,merge=1,delta=2
    46                           	psect	text21,local,class=CODE,merge=1,delta=2
    47                           	psect	text22,local,class=CODE,merge=1,delta=2
    48                           	psect	text23,local,class=CODE,merge=1,delta=2
    49                           	psect	text24,local,class=CODE,merge=1,delta=2
    50                           	psect	text25,local,class=CODE,merge=1,delta=2
    51                           	psect	text26,local,class=CODE,merge=1,delta=2
    52                           	psect	text27,local,class=CODE,merge=1,delta=2
    53                           	psect	text28,local,class=CODE,merge=1,delta=2
    54                           	psect	text29,local,class=CODE,merge=1,delta=2
    55                           	psect	text30,local,class=CODE,merge=1,delta=2
    56                           	psect	text31,local,class=CODE,merge=1,delta=2
    57                           	psect	text32,local,class=CODE,merge=1,delta=2
    58                           	psect	text33,local,class=CODE,merge=1,delta=2
    59                           	psect	text34,local,class=CODE,merge=1,delta=2
    60                           	psect	text35,local,class=CODE,merge=1,delta=2
    61                           	psect	text36,local,class=CODE,merge=1,delta=2
    62                           	psect	text37,local,class=CODE,merge=1,delta=2
    63                           	psect	text38,local,class=CODE,merge=1,delta=2
    64                           	psect	text39,local,class=CODE,merge=1,delta=2
    65                           	psect	text40,local,class=CODE,merge=1,delta=2
    66                           	psect	text41,local,class=CODE,merge=1,delta=2
    67                           	psect	text42,local,class=CODE,merge=1,delta=2
    68                           	psect	text43,local,class=CODE,merge=1,delta=2
    69                           	psect	text44,local,class=CODE,merge=1,delta=2
    70                           	psect	text45,local,class=CODE,merge=1,delta=2
    71                           	psect	text46,local,class=CODE,merge=1,delta=2
    72                           	psect	text47,local,class=CODE,merge=1,delta=2
    73                           	psect	text48,local,class=CODE,merge=1,delta=2
    74                           	psect	text49,local,class=CODE,merge=1,delta=2
    75                           	psect	text50,local,class=CODE,merge=1,delta=2
    76                           	psect	intentry,global,class=CODE,delta=2
    77                           	psect	text52,local,class=CODE,merge=1,delta=2
    78                           	psect	text53,local,class=CODE,merge=1,delta=2
    79                           	psect	text54,local,class=CODE,merge=1,delta=2
    80                           	psect	text55,local,class=CODE,merge=1,delta=2
    81                           	psect	text56,local,class=CODE,merge=1,delta=2
    82                           	psect	text57,local,class=CODE,merge=1,delta=2
    83                           	psect	text58,local,class=CODE,merge=1,delta=2
    84                           	dabs	1,0x7E,2
    85  0000                     	;# 
    86  0001                     	;# 
    87  0002                     	;# 
    88  0003                     	;# 
    89  0004                     	;# 
    90  0005                     	;# 
    91  0006                     	;# 
    92  0007                     	;# 
    93  0008                     	;# 
    94  0009                     	;# 
    95  000A                     	;# 
    96  000B                     	;# 
    97  000C                     	;# 
    98  000E                     	;# 
    99  0011                     	;# 
   100  0012                     	;# 
   101  0013                     	;# 
   102  0015                     	;# 
   103  0016                     	;# 
   104  0016                     	;# 
   105  0017                     	;# 
   106  0018                     	;# 
   107  0019                     	;# 
   108  001A                     	;# 
   109  001B                     	;# 
   110  001C                     	;# 
   111  008C                     	;# 
   112  008E                     	;# 
   113  0091                     	;# 
   114  0092                     	;# 
   115  0093                     	;# 
   116  0095                     	;# 
   117  0096                     	;# 
   118  0097                     	;# 
   119  0098                     	;# 
   120  0099                     	;# 
   121  009A                     	;# 
   122  009B                     	;# 
   123  009B                     	;# 
   124  009C                     	;# 
   125  009D                     	;# 
   126  009E                     	;# 
   127  009F                     	;# 
   128  010C                     	;# 
   129  010E                     	;# 
   130  0111                     	;# 
   131  0112                     	;# 
   132  0113                     	;# 
   133  0114                     	;# 
   134  0115                     	;# 
   135  0116                     	;# 
   136  0117                     	;# 
   137  0118                     	;# 
   138  0119                     	;# 
   139  011C                     	;# 
   140  018C                     	;# 
   141  018E                     	;# 
   142  0191                     	;# 
   143  0191                     	;# 
   144  0192                     	;# 
   145  0193                     	;# 
   146  0193                     	;# 
   147  0194                     	;# 
   148  0195                     	;# 
   149  0196                     	;# 
   150  0197                     	;# 
   151  0199                     	;# 
   152  0199                     	;# 
   153  0199                     	;# 
   154  019A                     	;# 
   155  019A                     	;# 
   156  019A                     	;# 
   157  019B                     	;# 
   158  019B                     	;# 
   159  019B                     	;# 
   160  019B                     	;# 
   161  019B                     	;# 
   162  019C                     	;# 
   163  019C                     	;# 
   164  019C                     	;# 
   165  019D                     	;# 
   166  019D                     	;# 
   167  019D                     	;# 
   168  019E                     	;# 
   169  019E                     	;# 
   170  019E                     	;# 
   171  019F                     	;# 
   172  019F                     	;# 
   173  019F                     	;# 
   174  019F                     	;# 
   175  019F                     	;# 
   176  020C                     	;# 
   177  020E                     	;# 
   178  0211                     	;# 
   179  0211                     	;# 
   180  0212                     	;# 
   181  0212                     	;# 
   182  0213                     	;# 
   183  0213                     	;# 
   184  0214                     	;# 
   185  0214                     	;# 
   186  0215                     	;# 
   187  0215                     	;# 
   188  0215                     	;# 
   189  0215                     	;# 
   190  0216                     	;# 
   191  0216                     	;# 
   192  0217                     	;# 
   193  0217                     	;# 
   194  028C                     	;# 
   195  028E                     	;# 
   196  0291                     	;# 
   197  0291                     	;# 
   198  0292                     	;# 
   199  0293                     	;# 
   200  0293                     	;# 
   201  0298                     	;# 
   202  0298                     	;# 
   203  0299                     	;# 
   204  029A                     	;# 
   205  029A                     	;# 
   206  029E                     	;# 
   207  030C                     	;# 
   208  030E                     	;# 
   209  038C                     	;# 
   210  038E                     	;# 
   211  0391                     	;# 
   212  0392                     	;# 
   213  0393                     	;# 
   214  0397                     	;# 
   215  0398                     	;# 
   216  0399                     	;# 
   217  0415                     	;# 
   218  0416                     	;# 
   219  0417                     	;# 
   220  041C                     	;# 
   221  041D                     	;# 
   222  041E                     	;# 
   223  0511                     	;# 
   224  0515                     	;# 
   225  0617                     	;# 
   226  0618                     	;# 
   227  0619                     	;# 
   228  0619                     	;# 
   229  061A                     	;# 
   230  061B                     	;# 
   231  061C                     	;# 
   232  061C                     	;# 
   233  0691                     	;# 
   234  0692                     	;# 
   235  0693                     	;# 
   236  0694                     	;# 
   237  0695                     	;# 
   238  0696                     	;# 
   239  0697                     	;# 
   240  0698                     	;# 
   241  0699                     	;# 
   242  069A                     	;# 
   243  069B                     	;# 
   244  069C                     	;# 
   245  069D                     	;# 
   246  069E                     	;# 
   247  069F                     	;# 
   248  0E0F                     	;# 
   249  0E10                     	;# 
   250  0E11                     	;# 
   251  0E12                     	;# 
   252  0E13                     	;# 
   253  0E14                     	;# 
   254  0E15                     	;# 
   255  0E17                     	;# 
   256  0E20                     	;# 
   257  0E21                     	;# 
   258  0E22                     	;# 
   259  0E24                     	;# 
   260  0E25                     	;# 
   261  0E28                     	;# 
   262  0E29                     	;# 
   263  0E2A                     	;# 
   264  0E2B                     	;# 
   265  0E90                     	;# 
   266  0E91                     	;# 
   267  0E92                     	;# 
   268  0E94                     	;# 
   269  0E95                     	;# 
   270  0EA0                     	;# 
   271  0EA1                     	;# 
   272  0EA2                     	;# 
   273  0EA3                     	;# 
   274  0EA4                     	;# 
   275  0EA5                     	;# 
   276  0F0F                     	;# 
   277  0F10                     	;# 
   278  0F11                     	;# 
   279  0F12                     	;# 
   280  0F13                     	;# 
   281  0F14                     	;# 
   282  0F15                     	;# 
   283  0F16                     	;# 
   284  0F17                     	;# 
   285  0F18                     	;# 
   286  0F19                     	;# 
   287  0F1A                     	;# 
   288  0F1B                     	;# 
   289  0F1C                     	;# 
   290  0F1D                     	;# 
   291  0F1E                     	;# 
   292  0F1F                     	;# 
   293  0F20                     	;# 
   294  0F21                     	;# 
   295  0F22                     	;# 
   296  0F23                     	;# 
   297  0F24                     	;# 
   298  0F25                     	;# 
   299  0F26                     	;# 
   300  0F27                     	;# 
   301  0F28                     	;# 
   302  0F29                     	;# 
   303  0F2A                     	;# 
   304  0F2B                     	;# 
   305  0F2C                     	;# 
   306  0F2D                     	;# 
   307  0F9E                     	;# 
   308  0FE4                     	;# 
   309  0FE5                     	;# 
   310  0FE6                     	;# 
   311  0FE7                     	;# 
   312  0FE8                     	;# 
   313  0FE9                     	;# 
   314  0FEA                     	;# 
   315  0FEB                     	;# 
   316  0FED                     	;# 
   317  0FEE                     	;# 
   318  0FEF                     	;# 
   319  0000                     	;# 
   320  0001                     	;# 
   321  0002                     	;# 
   322  0003                     	;# 
   323  0004                     	;# 
   324  0005                     	;# 
   325  0006                     	;# 
   326  0007                     	;# 
   327  0008                     	;# 
   328  0009                     	;# 
   329  000A                     	;# 
   330  000B                     	;# 
   331  000C                     	;# 
   332  000E                     	;# 
   333  0011                     	;# 
   334  0012                     	;# 
   335  0013                     	;# 
   336  0015                     	;# 
   337  0016                     	;# 
   338  0016                     	;# 
   339  0017                     	;# 
   340  0018                     	;# 
   341  0019                     	;# 
   342  001A                     	;# 
   343  001B                     	;# 
   344  001C                     	;# 
   345  008C                     	;# 
   346  008E                     	;# 
   347  0091                     	;# 
   348  0092                     	;# 
   349  0093                     	;# 
   350  0095                     	;# 
   351  0096                     	;# 
   352  0097                     	;# 
   353  0098                     	;# 
   354  0099                     	;# 
   355  009A                     	;# 
   356  009B                     	;# 
   357  009B                     	;# 
   358  009C                     	;# 
   359  009D                     	;# 
   360  009E                     	;# 
   361  009F                     	;# 
   362  010C                     	;# 
   363  010E                     	;# 
   364  0111                     	;# 
   365  0112                     	;# 
   366  0113                     	;# 
   367  0114                     	;# 
   368  0115                     	;# 
   369  0116                     	;# 
   370  0117                     	;# 
   371  0118                     	;# 
   372  0119                     	;# 
   373  011C                     	;# 
   374  018C                     	;# 
   375  018E                     	;# 
   376  0191                     	;# 
   377  0191                     	;# 
   378  0192                     	;# 
   379  0193                     	;# 
   380  0193                     	;# 
   381  0194                     	;# 
   382  0195                     	;# 
   383  0196                     	;# 
   384  0197                     	;# 
   385  0199                     	;# 
   386  0199                     	;# 
   387  0199                     	;# 
   388  019A                     	;# 
   389  019A                     	;# 
   390  019A                     	;# 
   391  019B                     	;# 
   392  019B                     	;# 
   393  019B                     	;# 
   394  019B                     	;# 
   395  019B                     	;# 
   396  019C                     	;# 
   397  019C                     	;# 
   398  019C                     	;# 
   399  019D                     	;# 
   400  019D                     	;# 
   401  019D                     	;# 
   402  019E                     	;# 
   403  019E                     	;# 
   404  019E                     	;# 
   405  019F                     	;# 
   406  019F                     	;# 
   407  019F                     	;# 
   408  019F                     	;# 
   409  019F                     	;# 
   410  020C                     	;# 
   411  020E                     	;# 
   412  0211                     	;# 
   413  0211                     	;# 
   414  0212                     	;# 
   415  0212                     	;# 
   416  0213                     	;# 
   417  0213                     	;# 
   418  0214                     	;# 
   419  0214                     	;# 
   420  0215                     	;# 
   421  0215                     	;# 
   422  0215                     	;# 
   423  0215                     	;# 
   424  0216                     	;# 
   425  0216                     	;# 
   426  0217                     	;# 
   427  0217                     	;# 
   428  028C                     	;# 
   429  028E                     	;# 
   430  0291                     	;# 
   431  0291                     	;# 
   432  0292                     	;# 
   433  0293                     	;# 
   434  0293                     	;# 
   435  0298                     	;# 
   436  0298                     	;# 
   437  0299                     	;# 
   438  029A                     	;# 
   439  029A                     	;# 
   440  029E                     	;# 
   441  030C                     	;# 
   442  030E                     	;# 
   443  038C                     	;# 
   444  038E                     	;# 
   445  0391                     	;# 
   446  0392                     	;# 
   447  0393                     	;# 
   448  0397                     	;# 
   449  0398                     	;# 
   450  0399                     	;# 
   451  0415                     	;# 
   452  0416                     	;# 
   453  0417                     	;# 
   454  041C                     	;# 
   455  041D                     	;# 
   456  041E                     	;# 
   457  0511                     	;# 
   458  0515                     	;# 
   459  0617                     	;# 
   460  0618                     	;# 
   461  0619                     	;# 
   462  0619                     	;# 
   463  061A                     	;# 
   464  061B                     	;# 
   465  061C                     	;# 
   466  061C                     	;# 
   467  0691                     	;# 
   468  0692                     	;# 
   469  0693                     	;# 
   470  0694                     	;# 
   471  0695                     	;# 
   472  0696                     	;# 
   473  0697                     	;# 
   474  0698                     	;# 
   475  0699                     	;# 
   476  069A                     	;# 
   477  069B                     	;# 
   478  069C                     	;# 
   479  069D                     	;# 
   480  069E                     	;# 
   481  069F                     	;# 
   482  0E0F                     	;# 
   483  0E10                     	;# 
   484  0E11                     	;# 
   485  0E12                     	;# 
   486  0E13                     	;# 
   487  0E14                     	;# 
   488  0E15                     	;# 
   489  0E17                     	;# 
   490  0E20                     	;# 
   491  0E21                     	;# 
   492  0E22                     	;# 
   493  0E24                     	;# 
   494  0E25                     	;# 
   495  0E28                     	;# 
   496  0E29                     	;# 
   497  0E2A                     	;# 
   498  0E2B                     	;# 
   499  0E90                     	;# 
   500  0E91                     	;# 
   501  0E92                     	;# 
   502  0E94                     	;# 
   503  0E95                     	;# 
   504  0EA0                     	;# 
   505  0EA1                     	;# 
   506  0EA2                     	;# 
   507  0EA3                     	;# 
   508  0EA4                     	;# 
   509  0EA5                     	;# 
   510  0F0F                     	;# 
   511  0F10                     	;# 
   512  0F11                     	;# 
   513  0F12                     	;# 
   514  0F13                     	;# 
   515  0F14                     	;# 
   516  0F15                     	;# 
   517  0F16                     	;# 
   518  0F17                     	;# 
   519  0F18                     	;# 
   520  0F19                     	;# 
   521  0F1A                     	;# 
   522  0F1B                     	;# 
   523  0F1C                     	;# 
   524  0F1D                     	;# 
   525  0F1E                     	;# 
   526  0F1F                     	;# 
   527  0F20                     	;# 
   528  0F21                     	;# 
   529  0F22                     	;# 
   530  0F23                     	;# 
   531  0F24                     	;# 
   532  0F25                     	;# 
   533  0F26                     	;# 
   534  0F27                     	;# 
   535  0F28                     	;# 
   536  0F29                     	;# 
   537  0F2A                     	;# 
   538  0F2B                     	;# 
   539  0F2C                     	;# 
   540  0F2D                     	;# 
   541  0F9E                     	;# 
   542  0FE4                     	;# 
   543  0FE5                     	;# 
   544  0FE6                     	;# 
   545  0FE7                     	;# 
   546  0FE8                     	;# 
   547  0FE9                     	;# 
   548  0FEA                     	;# 
   549  0FEB                     	;# 
   550  0FED                     	;# 
   551  0FEE                     	;# 
   552  0FEF                     	;# 
   553  0000                     	;# 
   554  0001                     	;# 
   555  0002                     	;# 
   556  0003                     	;# 
   557  0004                     	;# 
   558  0005                     	;# 
   559  0006                     	;# 
   560  0007                     	;# 
   561  0008                     	;# 
   562  0009                     	;# 
   563  000A                     	;# 
   564  000B                     	;# 
   565  000C                     	;# 
   566  000E                     	;# 
   567  0011                     	;# 
   568  0012                     	;# 
   569  0013                     	;# 
   570  0015                     	;# 
   571  0016                     	;# 
   572  0016                     	;# 
   573  0017                     	;# 
   574  0018                     	;# 
   575  0019                     	;# 
   576  001A                     	;# 
   577  001B                     	;# 
   578  001C                     	;# 
   579  008C                     	;# 
   580  008E                     	;# 
   581  0091                     	;# 
   582  0092                     	;# 
   583  0093                     	;# 
   584  0095                     	;# 
   585  0096                     	;# 
   586  0097                     	;# 
   587  0098                     	;# 
   588  0099                     	;# 
   589  009A                     	;# 
   590  009B                     	;# 
   591  009B                     	;# 
   592  009C                     	;# 
   593  009D                     	;# 
   594  009E                     	;# 
   595  009F                     	;# 
   596  010C                     	;# 
   597  010E                     	;# 
   598  0111                     	;# 
   599  0112                     	;# 
   600  0113                     	;# 
   601  0114                     	;# 
   602  0115                     	;# 
   603  0116                     	;# 
   604  0117                     	;# 
   605  0118                     	;# 
   606  0119                     	;# 
   607  011C                     	;# 
   608  018C                     	;# 
   609  018E                     	;# 
   610  0191                     	;# 
   611  0191                     	;# 
   612  0192                     	;# 
   613  0193                     	;# 
   614  0193                     	;# 
   615  0194                     	;# 
   616  0195                     	;# 
   617  0196                     	;# 
   618  0197                     	;# 
   619  0199                     	;# 
   620  0199                     	;# 
   621  0199                     	;# 
   622  019A                     	;# 
   623  019A                     	;# 
   624  019A                     	;# 
   625  019B                     	;# 
   626  019B                     	;# 
   627  019B                     	;# 
   628  019B                     	;# 
   629  019B                     	;# 
   630  019C                     	;# 
   631  019C                     	;# 
   632  019C                     	;# 
   633  019D                     	;# 
   634  019D                     	;# 
   635  019D                     	;# 
   636  019E                     	;# 
   637  019E                     	;# 
   638  019E                     	;# 
   639  019F                     	;# 
   640  019F                     	;# 
   641  019F                     	;# 
   642  019F                     	;# 
   643  019F                     	;# 
   644  020C                     	;# 
   645  020E                     	;# 
   646  0211                     	;# 
   647  0211                     	;# 
   648  0212                     	;# 
   649  0212                     	;# 
   650  0213                     	;# 
   651  0213                     	;# 
   652  0214                     	;# 
   653  0214                     	;# 
   654  0215                     	;# 
   655  0215                     	;# 
   656  0215                     	;# 
   657  0215                     	;# 
   658  0216                     	;# 
   659  0216                     	;# 
   660  0217                     	;# 
   661  0217                     	;# 
   662  028C                     	;# 
   663  028E                     	;# 
   664  0291                     	;# 
   665  0291                     	;# 
   666  0292                     	;# 
   667  0293                     	;# 
   668  0293                     	;# 
   669  0298                     	;# 
   670  0298                     	;# 
   671  0299                     	;# 
   672  029A                     	;# 
   673  029A                     	;# 
   674  029E                     	;# 
   675  030C                     	;# 
   676  030E                     	;# 
   677  038C                     	;# 
   678  038E                     	;# 
   679  0391                     	;# 
   680  0392                     	;# 
   681  0393                     	;# 
   682  0397                     	;# 
   683  0398                     	;# 
   684  0399                     	;# 
   685  0415                     	;# 
   686  0416                     	;# 
   687  0417                     	;# 
   688  041C                     	;# 
   689  041D                     	;# 
   690  041E                     	;# 
   691  0511                     	;# 
   692  0515                     	;# 
   693  0617                     	;# 
   694  0618                     	;# 
   695  0619                     	;# 
   696  0619                     	;# 
   697  061A                     	;# 
   698  061B                     	;# 
   699  061C                     	;# 
   700  061C                     	;# 
   701  0691                     	;# 
   702  0692                     	;# 
   703  0693                     	;# 
   704  0694                     	;# 
   705  0695                     	;# 
   706  0696                     	;# 
   707  0697                     	;# 
   708  0698                     	;# 
   709  0699                     	;# 
   710  069A                     	;# 
   711  069B                     	;# 
   712  069C                     	;# 
   713  069D                     	;# 
   714  069E                     	;# 
   715  069F                     	;# 
   716  0E0F                     	;# 
   717  0E10                     	;# 
   718  0E11                     	;# 
   719  0E12                     	;# 
   720  0E13                     	;# 
   721  0E14                     	;# 
   722  0E15                     	;# 
   723  0E17                     	;# 
   724  0E20                     	;# 
   725  0E21                     	;# 
   726  0E22                     	;# 
   727  0E24                     	;# 
   728  0E25                     	;# 
   729  0E28                     	;# 
   730  0E29                     	;# 
   731  0E2A                     	;# 
   732  0E2B                     	;# 
   733  0E90                     	;# 
   734  0E91                     	;# 
   735  0E92                     	;# 
   736  0E94                     	;# 
   737  0E95                     	;# 
   738  0EA0                     	;# 
   739  0EA1                     	;# 
   740  0EA2                     	;# 
   741  0EA3                     	;# 
   742  0EA4                     	;# 
   743  0EA5                     	;# 
   744  0F0F                     	;# 
   745  0F10                     	;# 
   746  0F11                     	;# 
   747  0F12                     	;# 
   748  0F13                     	;# 
   749  0F14                     	;# 
   750  0F15                     	;# 
   751  0F16                     	;# 
   752  0F17                     	;# 
   753  0F18                     	;# 
   754  0F19                     	;# 
   755  0F1A                     	;# 
   756  0F1B                     	;# 
   757  0F1C                     	;# 
   758  0F1D                     	;# 
   759  0F1E                     	;# 
   760  0F1F                     	;# 
   761  0F20                     	;# 
   762  0F21                     	;# 
   763  0F22                     	;# 
   764  0F23                     	;# 
   765  0F24                     	;# 
   766  0F25                     	;# 
   767  0F26                     	;# 
   768  0F27                     	;# 
   769  0F28                     	;# 
   770  0F29                     	;# 
   771  0F2A                     	;# 
   772  0F2B                     	;# 
   773  0F2C                     	;# 
   774  0F2D                     	;# 
   775  0F9E                     	;# 
   776  0FE4                     	;# 
   777  0FE5                     	;# 
   778  0FE6                     	;# 
   779  0FE7                     	;# 
   780  0FE8                     	;# 
   781  0FE9                     	;# 
   782  0FEA                     	;# 
   783  0FEB                     	;# 
   784  0FED                     	;# 
   785  0FEE                     	;# 
   786  0FEF                     	;# 
   787  0000                     	;# 
   788  0001                     	;# 
   789  0002                     	;# 
   790  0003                     	;# 
   791  0004                     	;# 
   792  0005                     	;# 
   793  0006                     	;# 
   794  0007                     	;# 
   795  0008                     	;# 
   796  0009                     	;# 
   797  000A                     	;# 
   798  000B                     	;# 
   799  000C                     	;# 
   800  000E                     	;# 
   801  0011                     	;# 
   802  0012                     	;# 
   803  0013                     	;# 
   804  0015                     	;# 
   805  0016                     	;# 
   806  0016                     	;# 
   807  0017                     	;# 
   808  0018                     	;# 
   809  0019                     	;# 
   810  001A                     	;# 
   811  001B                     	;# 
   812  001C                     	;# 
   813  008C                     	;# 
   814  008E                     	;# 
   815  0091                     	;# 
   816  0092                     	;# 
   817  0093                     	;# 
   818  0095                     	;# 
   819  0096                     	;# 
   820  0097                     	;# 
   821  0098                     	;# 
   822  0099                     	;# 
   823  009A                     	;# 
   824  009B                     	;# 
   825  009B                     	;# 
   826  009C                     	;# 
   827  009D                     	;# 
   828  009E                     	;# 
   829  009F                     	;# 
   830  010C                     	;# 
   831  010E                     	;# 
   832  0111                     	;# 
   833  0112                     	;# 
   834  0113                     	;# 
   835  0114                     	;# 
   836  0115                     	;# 
   837  0116                     	;# 
   838  0117                     	;# 
   839  0118                     	;# 
   840  0119                     	;# 
   841  011C                     	;# 
   842  018C                     	;# 
   843  018E                     	;# 
   844  0191                     	;# 
   845  0191                     	;# 
   846  0192                     	;# 
   847  0193                     	;# 
   848  0193                     	;# 
   849  0194                     	;# 
   850  0195                     	;# 
   851  0196                     	;# 
   852  0197                     	;# 
   853  0199                     	;# 
   854  0199                     	;# 
   855  0199                     	;# 
   856  019A                     	;# 
   857  019A                     	;# 
   858  019A                     	;# 
   859  019B                     	;# 
   860  019B                     	;# 
   861  019B                     	;# 
   862  019B                     	;# 
   863  019B                     	;# 
   864  019C                     	;# 
   865  019C                     	;# 
   866  019C                     	;# 
   867  019D                     	;# 
   868  019D                     	;# 
   869  019D                     	;# 
   870  019E                     	;# 
   871  019E                     	;# 
   872  019E                     	;# 
   873  019F                     	;# 
   874  019F                     	;# 
   875  019F                     	;# 
   876  019F                     	;# 
   877  019F                     	;# 
   878  020C                     	;# 
   879  020E                     	;# 
   880  0211                     	;# 
   881  0211                     	;# 
   882  0212                     	;# 
   883  0212                     	;# 
   884  0213                     	;# 
   885  0213                     	;# 
   886  0214                     	;# 
   887  0214                     	;# 
   888  0215                     	;# 
   889  0215                     	;# 
   890  0215                     	;# 
   891  0215                     	;# 
   892  0216                     	;# 
   893  0216                     	;# 
   894  0217                     	;# 
   895  0217                     	;# 
   896  028C                     	;# 
   897  028E                     	;# 
   898  0291                     	;# 
   899  0291                     	;# 
   900  0292                     	;# 
   901  0293                     	;# 
   902  0293                     	;# 
   903  0298                     	;# 
   904  0298                     	;# 
   905  0299                     	;# 
   906  029A                     	;# 
   907  029A                     	;# 
   908  029E                     	;# 
   909  030C                     	;# 
   910  030E                     	;# 
   911  038C                     	;# 
   912  038E                     	;# 
   913  0391                     	;# 
   914  0392                     	;# 
   915  0393                     	;# 
   916  0397                     	;# 
   917  0398                     	;# 
   918  0399                     	;# 
   919  0415                     	;# 
   920  0416                     	;# 
   921  0417                     	;# 
   922  041C                     	;# 
   923  041D                     	;# 
   924  041E                     	;# 
   925  0511                     	;# 
   926  0515                     	;# 
   927  0617                     	;# 
   928  0618                     	;# 
   929  0619                     	;# 
   930  0619                     	;# 
   931  061A                     	;# 
   932  061B                     	;# 
   933  061C                     	;# 
   934  061C                     	;# 
   935  0691                     	;# 
   936  0692                     	;# 
   937  0693                     	;# 
   938  0694                     	;# 
   939  0695                     	;# 
   940  0696                     	;# 
   941  0697                     	;# 
   942  0698                     	;# 
   943  0699                     	;# 
   944  069A                     	;# 
   945  069B                     	;# 
   946  069C                     	;# 
   947  069D                     	;# 
   948  069E                     	;# 
   949  069F                     	;# 
   950  0E0F                     	;# 
   951  0E10                     	;# 
   952  0E11                     	;# 
   953  0E12                     	;# 
   954  0E13                     	;# 
   955  0E14                     	;# 
   956  0E15                     	;# 
   957  0E17                     	;# 
   958  0E20                     	;# 
   959  0E21                     	;# 
   960  0E22                     	;# 
   961  0E24                     	;# 
   962  0E25                     	;# 
   963  0E28                     	;# 
   964  0E29                     	;# 
   965  0E2A                     	;# 
   966  0E2B                     	;# 
   967  0E90                     	;# 
   968  0E91                     	;# 
   969  0E92                     	;# 
   970  0E94                     	;# 
   971  0E95                     	;# 
   972  0EA0                     	;# 
   973  0EA1                     	;# 
   974  0EA2                     	;# 
   975  0EA3                     	;# 
   976  0EA4                     	;# 
   977  0EA5                     	;# 
   978  0F0F                     	;# 
   979  0F10                     	;# 
   980  0F11                     	;# 
   981  0F12                     	;# 
   982  0F13                     	;# 
   983  0F14                     	;# 
   984  0F15                     	;# 
   985  0F16                     	;# 
   986  0F17                     	;# 
   987  0F18                     	;# 
   988  0F19                     	;# 
   989  0F1A                     	;# 
   990  0F1B                     	;# 
   991  0F1C                     	;# 
   992  0F1D                     	;# 
   993  0F1E                     	;# 
   994  0F1F                     	;# 
   995  0F20                     	;# 
   996  0F21                     	;# 
   997  0F22                     	;# 
   998  0F23                     	;# 
   999  0F24                     	;# 
  1000  0F25                     	;# 
  1001  0F26                     	;# 
  1002  0F27                     	;# 
  1003  0F28                     	;# 
  1004  0F29                     	;# 
  1005  0F2A                     	;# 
  1006  0F2B                     	;# 
  1007  0F2C                     	;# 
  1008  0F2D                     	;# 
  1009  0F9E                     	;# 
  1010  0FE4                     	;# 
  1011  0FE5                     	;# 
  1012  0FE6                     	;# 
  1013  0FE7                     	;# 
  1014  0FE8                     	;# 
  1015  0FE9                     	;# 
  1016  0FEA                     	;# 
  1017  0FEB                     	;# 
  1018  0FED                     	;# 
  1019  0FEE                     	;# 
  1020  0FEF                     	;# 
  1021  0000                     	;# 
  1022  0001                     	;# 
  1023  0002                     	;# 
  1024  0003                     	;# 
  1025  0004                     	;# 
  1026  0005                     	;# 
  1027  0006                     	;# 
  1028  0007                     	;# 
  1029  0008                     	;# 
  1030  0009                     	;# 
  1031  000A                     	;# 
  1032  000B                     	;# 
  1033  000C                     	;# 
  1034  000E                     	;# 
  1035  0011                     	;# 
  1036  0012                     	;# 
  1037  0013                     	;# 
  1038  0015                     	;# 
  1039  0016                     	;# 
  1040  0016                     	;# 
  1041  0017                     	;# 
  1042  0018                     	;# 
  1043  0019                     	;# 
  1044  001A                     	;# 
  1045  001B                     	;# 
  1046  001C                     	;# 
  1047  008C                     	;# 
  1048  008E                     	;# 
  1049  0091                     	;# 
  1050  0092                     	;# 
  1051  0093                     	;# 
  1052  0095                     	;# 
  1053  0096                     	;# 
  1054  0097                     	;# 
  1055  0098                     	;# 
  1056  0099                     	;# 
  1057  009A                     	;# 
  1058  009B                     	;# 
  1059  009B                     	;# 
  1060  009C                     	;# 
  1061  009D                     	;# 
  1062  009E                     	;# 
  1063  009F                     	;# 
  1064  010C                     	;# 
  1065  010E                     	;# 
  1066  0111                     	;# 
  1067  0112                     	;# 
  1068  0113                     	;# 
  1069  0114                     	;# 
  1070  0115                     	;# 
  1071  0116                     	;# 
  1072  0117                     	;# 
  1073  0118                     	;# 
  1074  0119                     	;# 
  1075  011C                     	;# 
  1076  018C                     	;# 
  1077  018E                     	;# 
  1078  0191                     	;# 
  1079  0191                     	;# 
  1080  0192                     	;# 
  1081  0193                     	;# 
  1082  0193                     	;# 
  1083  0194                     	;# 
  1084  0195                     	;# 
  1085  0196                     	;# 
  1086  0197                     	;# 
  1087  0199                     	;# 
  1088  0199                     	;# 
  1089  0199                     	;# 
  1090  019A                     	;# 
  1091  019A                     	;# 
  1092  019A                     	;# 
  1093  019B                     	;# 
  1094  019B                     	;# 
  1095  019B                     	;# 
  1096  019B                     	;# 
  1097  019B                     	;# 
  1098  019C                     	;# 
  1099  019C                     	;# 
  1100  019C                     	;# 
  1101  019D                     	;# 
  1102  019D                     	;# 
  1103  019D                     	;# 
  1104  019E                     	;# 
  1105  019E                     	;# 
  1106  019E                     	;# 
  1107  019F                     	;# 
  1108  019F                     	;# 
  1109  019F                     	;# 
  1110  019F                     	;# 
  1111  019F                     	;# 
  1112  020C                     	;# 
  1113  020E                     	;# 
  1114  0211                     	;# 
  1115  0211                     	;# 
  1116  0212                     	;# 
  1117  0212                     	;# 
  1118  0213                     	;# 
  1119  0213                     	;# 
  1120  0214                     	;# 
  1121  0214                     	;# 
  1122  0215                     	;# 
  1123  0215                     	;# 
  1124  0215                     	;# 
  1125  0215                     	;# 
  1126  0216                     	;# 
  1127  0216                     	;# 
  1128  0217                     	;# 
  1129  0217                     	;# 
  1130  028C                     	;# 
  1131  028E                     	;# 
  1132  0291                     	;# 
  1133  0291                     	;# 
  1134  0292                     	;# 
  1135  0293                     	;# 
  1136  0293                     	;# 
  1137  0298                     	;# 
  1138  0298                     	;# 
  1139  0299                     	;# 
  1140  029A                     	;# 
  1141  029A                     	;# 
  1142  029E                     	;# 
  1143  030C                     	;# 
  1144  030E                     	;# 
  1145  038C                     	;# 
  1146  038E                     	;# 
  1147  0391                     	;# 
  1148  0392                     	;# 
  1149  0393                     	;# 
  1150  0397                     	;# 
  1151  0398                     	;# 
  1152  0399                     	;# 
  1153  0415                     	;# 
  1154  0416                     	;# 
  1155  0417                     	;# 
  1156  041C                     	;# 
  1157  041D                     	;# 
  1158  041E                     	;# 
  1159  0511                     	;# 
  1160  0515                     	;# 
  1161  0617                     	;# 
  1162  0618                     	;# 
  1163  0619                     	;# 
  1164  0619                     	;# 
  1165  061A                     	;# 
  1166  061B                     	;# 
  1167  061C                     	;# 
  1168  061C                     	;# 
  1169  0691                     	;# 
  1170  0692                     	;# 
  1171  0693                     	;# 
  1172  0694                     	;# 
  1173  0695                     	;# 
  1174  0696                     	;# 
  1175  0697                     	;# 
  1176  0698                     	;# 
  1177  0699                     	;# 
  1178  069A                     	;# 
  1179  069B                     	;# 
  1180  069C                     	;# 
  1181  069D                     	;# 
  1182  069E                     	;# 
  1183  069F                     	;# 
  1184  0E0F                     	;# 
  1185  0E10                     	;# 
  1186  0E11                     	;# 
  1187  0E12                     	;# 
  1188  0E13                     	;# 
  1189  0E14                     	;# 
  1190  0E15                     	;# 
  1191  0E17                     	;# 
  1192  0E20                     	;# 
  1193  0E21                     	;# 
  1194  0E22                     	;# 
  1195  0E24                     	;# 
  1196  0E25                     	;# 
  1197  0E28                     	;# 
  1198  0E29                     	;# 
  1199  0E2A                     	;# 
  1200  0E2B                     	;# 
  1201  0E90                     	;# 
  1202  0E91                     	;# 
  1203  0E92                     	;# 
  1204  0E94                     	;# 
  1205  0E95                     	;# 
  1206  0EA0                     	;# 
  1207  0EA1                     	;# 
  1208  0EA2                     	;# 
  1209  0EA3                     	;# 
  1210  0EA4                     	;# 
  1211  0EA5                     	;# 
  1212  0F0F                     	;# 
  1213  0F10                     	;# 
  1214  0F11                     	;# 
  1215  0F12                     	;# 
  1216  0F13                     	;# 
  1217  0F14                     	;# 
  1218  0F15                     	;# 
  1219  0F16                     	;# 
  1220  0F17                     	;# 
  1221  0F18                     	;# 
  1222  0F19                     	;# 
  1223  0F1A                     	;# 
  1224  0F1B                     	;# 
  1225  0F1C                     	;# 
  1226  0F1D                     	;# 
  1227  0F1E                     	;# 
  1228  0F1F                     	;# 
  1229  0F20                     	;# 
  1230  0F21                     	;# 
  1231  0F22                     	;# 
  1232  0F23                     	;# 
  1233  0F24                     	;# 
  1234  0F25                     	;# 
  1235  0F26                     	;# 
  1236  0F27                     	;# 
  1237  0F28                     	;# 
  1238  0F29                     	;# 
  1239  0F2A                     	;# 
  1240  0F2B                     	;# 
  1241  0F2C                     	;# 
  1242  0F2D                     	;# 
  1243  0F9E                     	;# 
  1244  0FE4                     	;# 
  1245  0FE5                     	;# 
  1246  0FE6                     	;# 
  1247  0FE7                     	;# 
  1248  0FE8                     	;# 
  1249  0FE9                     	;# 
  1250  0FEA                     	;# 
  1251  0FEB                     	;# 
  1252  0FED                     	;# 
  1253  0FEE                     	;# 
  1254  0FEF                     	;# 
  1255  0000                     	;# 
  1256  0001                     	;# 
  1257  0002                     	;# 
  1258  0003                     	;# 
  1259  0004                     	;# 
  1260  0005                     	;# 
  1261  0006                     	;# 
  1262  0007                     	;# 
  1263  0008                     	;# 
  1264  0009                     	;# 
  1265  000A                     	;# 
  1266  000B                     	;# 
  1267  000C                     	;# 
  1268  000E                     	;# 
  1269  0011                     	;# 
  1270  0012                     	;# 
  1271  0013                     	;# 
  1272  0015                     	;# 
  1273  0016                     	;# 
  1274  0016                     	;# 
  1275  0017                     	;# 
  1276  0018                     	;# 
  1277  0019                     	;# 
  1278  001A                     	;# 
  1279  001B                     	;# 
  1280  001C                     	;# 
  1281  008C                     	;# 
  1282  008E                     	;# 
  1283  0091                     	;# 
  1284  0092                     	;# 
  1285  0093                     	;# 
  1286  0095                     	;# 
  1287  0096                     	;# 
  1288  0097                     	;# 
  1289  0098                     	;# 
  1290  0099                     	;# 
  1291  009A                     	;# 
  1292  009B                     	;# 
  1293  009B                     	;# 
  1294  009C                     	;# 
  1295  009D                     	;# 
  1296  009E                     	;# 
  1297  009F                     	;# 
  1298  010C                     	;# 
  1299  010E                     	;# 
  1300  0111                     	;# 
  1301  0112                     	;# 
  1302  0113                     	;# 
  1303  0114                     	;# 
  1304  0115                     	;# 
  1305  0116                     	;# 
  1306  0117                     	;# 
  1307  0118                     	;# 
  1308  0119                     	;# 
  1309  011C                     	;# 
  1310  018C                     	;# 
  1311  018E                     	;# 
  1312  0191                     	;# 
  1313  0191                     	;# 
  1314  0192                     	;# 
  1315  0193                     	;# 
  1316  0193                     	;# 
  1317  0194                     	;# 
  1318  0195                     	;# 
  1319  0196                     	;# 
  1320  0197                     	;# 
  1321  0199                     	;# 
  1322  0199                     	;# 
  1323  0199                     	;# 
  1324  019A                     	;# 
  1325  019A                     	;# 
  1326  019A                     	;# 
  1327  019B                     	;# 
  1328  019B                     	;# 
  1329  019B                     	;# 
  1330  019B                     	;# 
  1331  019B                     	;# 
  1332  019C                     	;# 
  1333  019C                     	;# 
  1334  019C                     	;# 
  1335  019D                     	;# 
  1336  019D                     	;# 
  1337  019D                     	;# 
  1338  019E                     	;# 
  1339  019E                     	;# 
  1340  019E                     	;# 
  1341  019F                     	;# 
  1342  019F                     	;# 
  1343  019F                     	;# 
  1344  019F                     	;# 
  1345  019F                     	;# 
  1346  020C                     	;# 
  1347  020E                     	;# 
  1348  0211                     	;# 
  1349  0211                     	;# 
  1350  0212                     	;# 
  1351  0212                     	;# 
  1352  0213                     	;# 
  1353  0213                     	;# 
  1354  0214                     	;# 
  1355  0214                     	;# 
  1356  0215                     	;# 
  1357  0215                     	;# 
  1358  0215                     	;# 
  1359  0215                     	;# 
  1360  0216                     	;# 
  1361  0216                     	;# 
  1362  0217                     	;# 
  1363  0217                     	;# 
  1364  028C                     	;# 
  1365  028E                     	;# 
  1366  0291                     	;# 
  1367  0291                     	;# 
  1368  0292                     	;# 
  1369  0293                     	;# 
  1370  0293                     	;# 
  1371  0298                     	;# 
  1372  0298                     	;# 
  1373  0299                     	;# 
  1374  029A                     	;# 
  1375  029A                     	;# 
  1376  029E                     	;# 
  1377  030C                     	;# 
  1378  030E                     	;# 
  1379  038C                     	;# 
  1380  038E                     	;# 
  1381  0391                     	;# 
  1382  0392                     	;# 
  1383  0393                     	;# 
  1384  0397                     	;# 
  1385  0398                     	;# 
  1386  0399                     	;# 
  1387  0415                     	;# 
  1388  0416                     	;# 
  1389  0417                     	;# 
  1390  041C                     	;# 
  1391  041D                     	;# 
  1392  041E                     	;# 
  1393  0511                     	;# 
  1394  0515                     	;# 
  1395  0617                     	;# 
  1396  0618                     	;# 
  1397  0619                     	;# 
  1398  0619                     	;# 
  1399  061A                     	;# 
  1400  061B                     	;# 
  1401  061C                     	;# 
  1402  061C                     	;# 
  1403  0691                     	;# 
  1404  0692                     	;# 
  1405  0693                     	;# 
  1406  0694                     	;# 
  1407  0695                     	;# 
  1408  0696                     	;# 
  1409  0697                     	;# 
  1410  0698                     	;# 
  1411  0699                     	;# 
  1412  069A                     	;# 
  1413  069B                     	;# 
  1414  069C                     	;# 
  1415  069D                     	;# 
  1416  069E                     	;# 
  1417  069F                     	;# 
  1418  0E0F                     	;# 
  1419  0E10                     	;# 
  1420  0E11                     	;# 
  1421  0E12                     	;# 
  1422  0E13                     	;# 
  1423  0E14                     	;# 
  1424  0E15                     	;# 
  1425  0E17                     	;# 
  1426  0E20                     	;# 
  1427  0E21                     	;# 
  1428  0E22                     	;# 
  1429  0E24                     	;# 
  1430  0E25                     	;# 
  1431  0E28                     	;# 
  1432  0E29                     	;# 
  1433  0E2A                     	;# 
  1434  0E2B                     	;# 
  1435  0E90                     	;# 
  1436  0E91                     	;# 
  1437  0E92                     	;# 
  1438  0E94                     	;# 
  1439  0E95                     	;# 
  1440  0EA0                     	;# 
  1441  0EA1                     	;# 
  1442  0EA2                     	;# 
  1443  0EA3                     	;# 
  1444  0EA4                     	;# 
  1445  0EA5                     	;# 
  1446  0F0F                     	;# 
  1447  0F10                     	;# 
  1448  0F11                     	;# 
  1449  0F12                     	;# 
  1450  0F13                     	;# 
  1451  0F14                     	;# 
  1452  0F15                     	;# 
  1453  0F16                     	;# 
  1454  0F17                     	;# 
  1455  0F18                     	;# 
  1456  0F19                     	;# 
  1457  0F1A                     	;# 
  1458  0F1B                     	;# 
  1459  0F1C                     	;# 
  1460  0F1D                     	;# 
  1461  0F1E                     	;# 
  1462  0F1F                     	;# 
  1463  0F20                     	;# 
  1464  0F21                     	;# 
  1465  0F22                     	;# 
  1466  0F23                     	;# 
  1467  0F24                     	;# 
  1468  0F25                     	;# 
  1469  0F26                     	;# 
  1470  0F27                     	;# 
  1471  0F28                     	;# 
  1472  0F29                     	;# 
  1473  0F2A                     	;# 
  1474  0F2B                     	;# 
  1475  0F2C                     	;# 
  1476  0F2D                     	;# 
  1477  0F9E                     	;# 
  1478  0FE4                     	;# 
  1479  0FE5                     	;# 
  1480  0FE6                     	;# 
  1481  0FE7                     	;# 
  1482  0FE8                     	;# 
  1483  0FE9                     	;# 
  1484  0FEA                     	;# 
  1485  0FEB                     	;# 
  1486  0FED                     	;# 
  1487  0FEE                     	;# 
  1488  0FEF                     	;# 
  1489  0000                     	;# 
  1490  0001                     	;# 
  1491  0002                     	;# 
  1492  0003                     	;# 
  1493  0004                     	;# 
  1494  0005                     	;# 
  1495  0006                     	;# 
  1496  0007                     	;# 
  1497  0008                     	;# 
  1498  0009                     	;# 
  1499  000A                     	;# 
  1500  000B                     	;# 
  1501  000C                     	;# 
  1502  000E                     	;# 
  1503  0011                     	;# 
  1504  0012                     	;# 
  1505  0013                     	;# 
  1506  0015                     	;# 
  1507  0016                     	;# 
  1508  0016                     	;# 
  1509  0017                     	;# 
  1510  0018                     	;# 
  1511  0019                     	;# 
  1512  001A                     	;# 
  1513  001B                     	;# 
  1514  001C                     	;# 
  1515  008C                     	;# 
  1516  008E                     	;# 
  1517  0091                     	;# 
  1518  0092                     	;# 
  1519  0093                     	;# 
  1520  0095                     	;# 
  1521  0096                     	;# 
  1522  0097                     	;# 
  1523  0098                     	;# 
  1524  0099                     	;# 
  1525  009A                     	;# 
  1526  009B                     	;# 
  1527  009B                     	;# 
  1528  009C                     	;# 
  1529  009D                     	;# 
  1530  009E                     	;# 
  1531  009F                     	;# 
  1532  010C                     	;# 
  1533  010E                     	;# 
  1534  0111                     	;# 
  1535  0112                     	;# 
  1536  0113                     	;# 
  1537  0114                     	;# 
  1538  0115                     	;# 
  1539  0116                     	;# 
  1540  0117                     	;# 
  1541  0118                     	;# 
  1542  0119                     	;# 
  1543  011C                     	;# 
  1544  018C                     	;# 
  1545  018E                     	;# 
  1546  0191                     	;# 
  1547  0191                     	;# 
  1548  0192                     	;# 
  1549  0193                     	;# 
  1550  0193                     	;# 
  1551  0194                     	;# 
  1552  0195                     	;# 
  1553  0196                     	;# 
  1554  0197                     	;# 
  1555  0199                     	;# 
  1556  0199                     	;# 
  1557  0199                     	;# 
  1558  019A                     	;# 
  1559  019A                     	;# 
  1560  019A                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019B                     	;# 
  1566  019C                     	;# 
  1567  019C                     	;# 
  1568  019C                     	;# 
  1569  019D                     	;# 
  1570  019D                     	;# 
  1571  019D                     	;# 
  1572  019E                     	;# 
  1573  019E                     	;# 
  1574  019E                     	;# 
  1575  019F                     	;# 
  1576  019F                     	;# 
  1577  019F                     	;# 
  1578  019F                     	;# 
  1579  019F                     	;# 
  1580  020C                     	;# 
  1581  020E                     	;# 
  1582  0211                     	;# 
  1583  0211                     	;# 
  1584  0212                     	;# 
  1585  0212                     	;# 
  1586  0213                     	;# 
  1587  0213                     	;# 
  1588  0214                     	;# 
  1589  0214                     	;# 
  1590  0215                     	;# 
  1591  0215                     	;# 
  1592  0215                     	;# 
  1593  0215                     	;# 
  1594  0216                     	;# 
  1595  0216                     	;# 
  1596  0217                     	;# 
  1597  0217                     	;# 
  1598  028C                     	;# 
  1599  028E                     	;# 
  1600  0291                     	;# 
  1601  0291                     	;# 
  1602  0292                     	;# 
  1603  0293                     	;# 
  1604  0293                     	;# 
  1605  0298                     	;# 
  1606  0298                     	;# 
  1607  0299                     	;# 
  1608  029A                     	;# 
  1609  029A                     	;# 
  1610  029E                     	;# 
  1611  030C                     	;# 
  1612  030E                     	;# 
  1613  038C                     	;# 
  1614  038E                     	;# 
  1615  0391                     	;# 
  1616  0392                     	;# 
  1617  0393                     	;# 
  1618  0397                     	;# 
  1619  0398                     	;# 
  1620  0399                     	;# 
  1621  0415                     	;# 
  1622  0416                     	;# 
  1623  0417                     	;# 
  1624  041C                     	;# 
  1625  041D                     	;# 
  1626  041E                     	;# 
  1627  0511                     	;# 
  1628  0515                     	;# 
  1629  0617                     	;# 
  1630  0618                     	;# 
  1631  0619                     	;# 
  1632  0619                     	;# 
  1633  061A                     	;# 
  1634  061B                     	;# 
  1635  061C                     	;# 
  1636  061C                     	;# 
  1637  0691                     	;# 
  1638  0692                     	;# 
  1639  0693                     	;# 
  1640  0694                     	;# 
  1641  0695                     	;# 
  1642  0696                     	;# 
  1643  0697                     	;# 
  1644  0698                     	;# 
  1645  0699                     	;# 
  1646  069A                     	;# 
  1647  069B                     	;# 
  1648  069C                     	;# 
  1649  069D                     	;# 
  1650  069E                     	;# 
  1651  069F                     	;# 
  1652  0E0F                     	;# 
  1653  0E10                     	;# 
  1654  0E11                     	;# 
  1655  0E12                     	;# 
  1656  0E13                     	;# 
  1657  0E14                     	;# 
  1658  0E15                     	;# 
  1659  0E17                     	;# 
  1660  0E20                     	;# 
  1661  0E21                     	;# 
  1662  0E22                     	;# 
  1663  0E24                     	;# 
  1664  0E25                     	;# 
  1665  0E28                     	;# 
  1666  0E29                     	;# 
  1667  0E2A                     	;# 
  1668  0E2B                     	;# 
  1669  0E90                     	;# 
  1670  0E91                     	;# 
  1671  0E92                     	;# 
  1672  0E94                     	;# 
  1673  0E95                     	;# 
  1674  0EA0                     	;# 
  1675  0EA1                     	;# 
  1676  0EA2                     	;# 
  1677  0EA3                     	;# 
  1678  0EA4                     	;# 
  1679  0EA5                     	;# 
  1680  0F0F                     	;# 
  1681  0F10                     	;# 
  1682  0F11                     	;# 
  1683  0F12                     	;# 
  1684  0F13                     	;# 
  1685  0F14                     	;# 
  1686  0F15                     	;# 
  1687  0F16                     	;# 
  1688  0F17                     	;# 
  1689  0F18                     	;# 
  1690  0F19                     	;# 
  1691  0F1A                     	;# 
  1692  0F1B                     	;# 
  1693  0F1C                     	;# 
  1694  0F1D                     	;# 
  1695  0F1E                     	;# 
  1696  0F1F                     	;# 
  1697  0F20                     	;# 
  1698  0F21                     	;# 
  1699  0F22                     	;# 
  1700  0F23                     	;# 
  1701  0F24                     	;# 
  1702  0F25                     	;# 
  1703  0F26                     	;# 
  1704  0F27                     	;# 
  1705  0F28                     	;# 
  1706  0F29                     	;# 
  1707  0F2A                     	;# 
  1708  0F2B                     	;# 
  1709  0F2C                     	;# 
  1710  0F2D                     	;# 
  1711  0F9E                     	;# 
  1712  0FE4                     	;# 
  1713  0FE5                     	;# 
  1714  0FE6                     	;# 
  1715  0FE7                     	;# 
  1716  0FE8                     	;# 
  1717  0FE9                     	;# 
  1718  0FEA                     	;# 
  1719  0FEB                     	;# 
  1720  0FED                     	;# 
  1721  0FEE                     	;# 
  1722  0FEF                     	;# 
  1723  0000                     	;# 
  1724  0001                     	;# 
  1725  0002                     	;# 
  1726  0003                     	;# 
  1727  0004                     	;# 
  1728  0005                     	;# 
  1729  0006                     	;# 
  1730  0007                     	;# 
  1731  0008                     	;# 
  1732  0009                     	;# 
  1733  000A                     	;# 
  1734  000B                     	;# 
  1735  000C                     	;# 
  1736  000E                     	;# 
  1737  0011                     	;# 
  1738  0012                     	;# 
  1739  0013                     	;# 
  1740  0015                     	;# 
  1741  0016                     	;# 
  1742  0016                     	;# 
  1743  0017                     	;# 
  1744  0018                     	;# 
  1745  0019                     	;# 
  1746  001A                     	;# 
  1747  001B                     	;# 
  1748  001C                     	;# 
  1749  008C                     	;# 
  1750  008E                     	;# 
  1751  0091                     	;# 
  1752  0092                     	;# 
  1753  0093                     	;# 
  1754  0095                     	;# 
  1755  0096                     	;# 
  1756  0097                     	;# 
  1757  0098                     	;# 
  1758  0099                     	;# 
  1759  009A                     	;# 
  1760  009B                     	;# 
  1761  009B                     	;# 
  1762  009C                     	;# 
  1763  009D                     	;# 
  1764  009E                     	;# 
  1765  009F                     	;# 
  1766  010C                     	;# 
  1767  010E                     	;# 
  1768  0111                     	;# 
  1769  0112                     	;# 
  1770  0113                     	;# 
  1771  0114                     	;# 
  1772  0115                     	;# 
  1773  0116                     	;# 
  1774  0117                     	;# 
  1775  0118                     	;# 
  1776  0119                     	;# 
  1777  011C                     	;# 
  1778  018C                     	;# 
  1779  018E                     	;# 
  1780  0191                     	;# 
  1781  0191                     	;# 
  1782  0192                     	;# 
  1783  0193                     	;# 
  1784  0193                     	;# 
  1785  0194                     	;# 
  1786  0195                     	;# 
  1787  0196                     	;# 
  1788  0197                     	;# 
  1789  0199                     	;# 
  1790  0199                     	;# 
  1791  0199                     	;# 
  1792  019A                     	;# 
  1793  019A                     	;# 
  1794  019A                     	;# 
  1795  019B                     	;# 
  1796  019B                     	;# 
  1797  019B                     	;# 
  1798  019B                     	;# 
  1799  019B                     	;# 
  1800  019C                     	;# 
  1801  019C                     	;# 
  1802  019C                     	;# 
  1803  019D                     	;# 
  1804  019D                     	;# 
  1805  019D                     	;# 
  1806  019E                     	;# 
  1807  019E                     	;# 
  1808  019E                     	;# 
  1809  019F                     	;# 
  1810  019F                     	;# 
  1811  019F                     	;# 
  1812  019F                     	;# 
  1813  019F                     	;# 
  1814  020C                     	;# 
  1815  020E                     	;# 
  1816  0211                     	;# 
  1817  0211                     	;# 
  1818  0212                     	;# 
  1819  0212                     	;# 
  1820  0213                     	;# 
  1821  0213                     	;# 
  1822  0214                     	;# 
  1823  0214                     	;# 
  1824  0215                     	;# 
  1825  0215                     	;# 
  1826  0215                     	;# 
  1827  0215                     	;# 
  1828  0216                     	;# 
  1829  0216                     	;# 
  1830  0217                     	;# 
  1831  0217                     	;# 
  1832  028C                     	;# 
  1833  028E                     	;# 
  1834  0291                     	;# 
  1835  0291                     	;# 
  1836  0292                     	;# 
  1837  0293                     	;# 
  1838  0293                     	;# 
  1839  0298                     	;# 
  1840  0298                     	;# 
  1841  0299                     	;# 
  1842  029A                     	;# 
  1843  029A                     	;# 
  1844  029E                     	;# 
  1845  030C                     	;# 
  1846  030E                     	;# 
  1847  038C                     	;# 
  1848  038E                     	;# 
  1849  0391                     	;# 
  1850  0392                     	;# 
  1851  0393                     	;# 
  1852  0397                     	;# 
  1853  0398                     	;# 
  1854  0399                     	;# 
  1855  0415                     	;# 
  1856  0416                     	;# 
  1857  0417                     	;# 
  1858  041C                     	;# 
  1859  041D                     	;# 
  1860  041E                     	;# 
  1861  0511                     	;# 
  1862  0515                     	;# 
  1863  0617                     	;# 
  1864  0618                     	;# 
  1865  0619                     	;# 
  1866  0619                     	;# 
  1867  061A                     	;# 
  1868  061B                     	;# 
  1869  061C                     	;# 
  1870  061C                     	;# 
  1871  0691                     	;# 
  1872  0692                     	;# 
  1873  0693                     	;# 
  1874  0694                     	;# 
  1875  0695                     	;# 
  1876  0696                     	;# 
  1877  0697                     	;# 
  1878  0698                     	;# 
  1879  0699                     	;# 
  1880  069A                     	;# 
  1881  069B                     	;# 
  1882  069C                     	;# 
  1883  069D                     	;# 
  1884  069E                     	;# 
  1885  069F                     	;# 
  1886  0E0F                     	;# 
  1887  0E10                     	;# 
  1888  0E11                     	;# 
  1889  0E12                     	;# 
  1890  0E13                     	;# 
  1891  0E14                     	;# 
  1892  0E15                     	;# 
  1893  0E17                     	;# 
  1894  0E20                     	;# 
  1895  0E21                     	;# 
  1896  0E22                     	;# 
  1897  0E24                     	;# 
  1898  0E25                     	;# 
  1899  0E28                     	;# 
  1900  0E29                     	;# 
  1901  0E2A                     	;# 
  1902  0E2B                     	;# 
  1903  0E90                     	;# 
  1904  0E91                     	;# 
  1905  0E92                     	;# 
  1906  0E94                     	;# 
  1907  0E95                     	;# 
  1908  0EA0                     	;# 
  1909  0EA1                     	;# 
  1910  0EA2                     	;# 
  1911  0EA3                     	;# 
  1912  0EA4                     	;# 
  1913  0EA5                     	;# 
  1914  0F0F                     	;# 
  1915  0F10                     	;# 
  1916  0F11                     	;# 
  1917  0F12                     	;# 
  1918  0F13                     	;# 
  1919  0F14                     	;# 
  1920  0F15                     	;# 
  1921  0F16                     	;# 
  1922  0F17                     	;# 
  1923  0F18                     	;# 
  1924  0F19                     	;# 
  1925  0F1A                     	;# 
  1926  0F1B                     	;# 
  1927  0F1C                     	;# 
  1928  0F1D                     	;# 
  1929  0F1E                     	;# 
  1930  0F1F                     	;# 
  1931  0F20                     	;# 
  1932  0F21                     	;# 
  1933  0F22                     	;# 
  1934  0F23                     	;# 
  1935  0F24                     	;# 
  1936  0F25                     	;# 
  1937  0F26                     	;# 
  1938  0F27                     	;# 
  1939  0F28                     	;# 
  1940  0F29                     	;# 
  1941  0F2A                     	;# 
  1942  0F2B                     	;# 
  1943  0F2C                     	;# 
  1944  0F2D                     	;# 
  1945  0F9E                     	;# 
  1946  0FE4                     	;# 
  1947  0FE5                     	;# 
  1948  0FE6                     	;# 
  1949  0FE7                     	;# 
  1950  0FE8                     	;# 
  1951  0FE9                     	;# 
  1952  0FEA                     	;# 
  1953  0FEB                     	;# 
  1954  0FED                     	;# 
  1955  0FEE                     	;# 
  1956  0FEF                     	;# 
  1957  0000                     	;# 
  1958  0001                     	;# 
  1959  0002                     	;# 
  1960  0003                     	;# 
  1961  0004                     	;# 
  1962  0005                     	;# 
  1963  0006                     	;# 
  1964  0007                     	;# 
  1965  0008                     	;# 
  1966  0009                     	;# 
  1967  000A                     	;# 
  1968  000B                     	;# 
  1969  000C                     	;# 
  1970  000E                     	;# 
  1971  0011                     	;# 
  1972  0012                     	;# 
  1973  0013                     	;# 
  1974  0015                     	;# 
  1975  0016                     	;# 
  1976  0016                     	;# 
  1977  0017                     	;# 
  1978  0018                     	;# 
  1979  0019                     	;# 
  1980  001A                     	;# 
  1981  001B                     	;# 
  1982  001C                     	;# 
  1983  008C                     	;# 
  1984  008E                     	;# 
  1985  0091                     	;# 
  1986  0092                     	;# 
  1987  0093                     	;# 
  1988  0095                     	;# 
  1989  0096                     	;# 
  1990  0097                     	;# 
  1991  0098                     	;# 
  1992  0099                     	;# 
  1993  009A                     	;# 
  1994  009B                     	;# 
  1995  009B                     	;# 
  1996  009C                     	;# 
  1997  009D                     	;# 
  1998  009E                     	;# 
  1999  009F                     	;# 
  2000  010C                     	;# 
  2001  010E                     	;# 
  2002  0111                     	;# 
  2003  0112                     	;# 
  2004  0113                     	;# 
  2005  0114                     	;# 
  2006  0115                     	;# 
  2007  0116                     	;# 
  2008  0117                     	;# 
  2009  0118                     	;# 
  2010  0119                     	;# 
  2011  011C                     	;# 
  2012  018C                     	;# 
  2013  018E                     	;# 
  2014  0191                     	;# 
  2015  0191                     	;# 
  2016  0192                     	;# 
  2017  0193                     	;# 
  2018  0193                     	;# 
  2019  0194                     	;# 
  2020  0195                     	;# 
  2021  0196                     	;# 
  2022  0197                     	;# 
  2023  0199                     	;# 
  2024  0199                     	;# 
  2025  0199                     	;# 
  2026  019A                     	;# 
  2027  019A                     	;# 
  2028  019A                     	;# 
  2029  019B                     	;# 
  2030  019B                     	;# 
  2031  019B                     	;# 
  2032  019B                     	;# 
  2033  019B                     	;# 
  2034  019C                     	;# 
  2035  019C                     	;# 
  2036  019C                     	;# 
  2037  019D                     	;# 
  2038  019D                     	;# 
  2039  019D                     	;# 
  2040  019E                     	;# 
  2041  019E                     	;# 
  2042  019E                     	;# 
  2043  019F                     	;# 
  2044  019F                     	;# 
  2045  019F                     	;# 
  2046  019F                     	;# 
  2047  019F                     	;# 
  2048  020C                     	;# 
  2049  020E                     	;# 
  2050  0211                     	;# 
  2051  0211                     	;# 
  2052  0212                     	;# 
  2053  0212                     	;# 
  2054  0213                     	;# 
  2055  0213                     	;# 
  2056  0214                     	;# 
  2057  0214                     	;# 
  2058  0215                     	;# 
  2059  0215                     	;# 
  2060  0215                     	;# 
  2061  0215                     	;# 
  2062  0216                     	;# 
  2063  0216                     	;# 
  2064  0217                     	;# 
  2065  0217                     	;# 
  2066  028C                     	;# 
  2067  028E                     	;# 
  2068  0291                     	;# 
  2069  0291                     	;# 
  2070  0292                     	;# 
  2071  0293                     	;# 
  2072  0293                     	;# 
  2073  0298                     	;# 
  2074  0298                     	;# 
  2075  0299                     	;# 
  2076  029A                     	;# 
  2077  029A                     	;# 
  2078  029E                     	;# 
  2079  030C                     	;# 
  2080  030E                     	;# 
  2081  038C                     	;# 
  2082  038E                     	;# 
  2083  0391                     	;# 
  2084  0392                     	;# 
  2085  0393                     	;# 
  2086  0397                     	;# 
  2087  0398                     	;# 
  2088  0399                     	;# 
  2089  0415                     	;# 
  2090  0416                     	;# 
  2091  0417                     	;# 
  2092  041C                     	;# 
  2093  041D                     	;# 
  2094  041E                     	;# 
  2095  0511                     	;# 
  2096  0515                     	;# 
  2097  0617                     	;# 
  2098  0618                     	;# 
  2099  0619                     	;# 
  2100  0619                     	;# 
  2101  061A                     	;# 
  2102  061B                     	;# 
  2103  061C                     	;# 
  2104  061C                     	;# 
  2105  0691                     	;# 
  2106  0692                     	;# 
  2107  0693                     	;# 
  2108  0694                     	;# 
  2109  0695                     	;# 
  2110  0696                     	;# 
  2111  0697                     	;# 
  2112  0698                     	;# 
  2113  0699                     	;# 
  2114  069A                     	;# 
  2115  069B                     	;# 
  2116  069C                     	;# 
  2117  069D                     	;# 
  2118  069E                     	;# 
  2119  069F                     	;# 
  2120  0E0F                     	;# 
  2121  0E10                     	;# 
  2122  0E11                     	;# 
  2123  0E12                     	;# 
  2124  0E13                     	;# 
  2125  0E14                     	;# 
  2126  0E15                     	;# 
  2127  0E17                     	;# 
  2128  0E20                     	;# 
  2129  0E21                     	;# 
  2130  0E22                     	;# 
  2131  0E24                     	;# 
  2132  0E25                     	;# 
  2133  0E28                     	;# 
  2134  0E29                     	;# 
  2135  0E2A                     	;# 
  2136  0E2B                     	;# 
  2137  0E90                     	;# 
  2138  0E91                     	;# 
  2139  0E92                     	;# 
  2140  0E94                     	;# 
  2141  0E95                     	;# 
  2142  0EA0                     	;# 
  2143  0EA1                     	;# 
  2144  0EA2                     	;# 
  2145  0EA3                     	;# 
  2146  0EA4                     	;# 
  2147  0EA5                     	;# 
  2148  0F0F                     	;# 
  2149  0F10                     	;# 
  2150  0F11                     	;# 
  2151  0F12                     	;# 
  2152  0F13                     	;# 
  2153  0F14                     	;# 
  2154  0F15                     	;# 
  2155  0F16                     	;# 
  2156  0F17                     	;# 
  2157  0F18                     	;# 
  2158  0F19                     	;# 
  2159  0F1A                     	;# 
  2160  0F1B                     	;# 
  2161  0F1C                     	;# 
  2162  0F1D                     	;# 
  2163  0F1E                     	;# 
  2164  0F1F                     	;# 
  2165  0F20                     	;# 
  2166  0F21                     	;# 
  2167  0F22                     	;# 
  2168  0F23                     	;# 
  2169  0F24                     	;# 
  2170  0F25                     	;# 
  2171  0F26                     	;# 
  2172  0F27                     	;# 
  2173  0F28                     	;# 
  2174  0F29                     	;# 
  2175  0F2A                     	;# 
  2176  0F2B                     	;# 
  2177  0F2C                     	;# 
  2178  0F2D                     	;# 
  2179  0F9E                     	;# 
  2180  0FE4                     	;# 
  2181  0FE5                     	;# 
  2182  0FE6                     	;# 
  2183  0FE7                     	;# 
  2184  0FE8                     	;# 
  2185  0FE9                     	;# 
  2186  0FEA                     	;# 
  2187  0FEB                     	;# 
  2188  0FED                     	;# 
  2189  0FEE                     	;# 
  2190  0FEF                     	;# 
  2191  0000                     	;# 
  2192  0001                     	;# 
  2193  0002                     	;# 
  2194  0003                     	;# 
  2195  0004                     	;# 
  2196  0005                     	;# 
  2197  0006                     	;# 
  2198  0007                     	;# 
  2199  0008                     	;# 
  2200  0009                     	;# 
  2201  000A                     	;# 
  2202  000B                     	;# 
  2203  000C                     	;# 
  2204  000E                     	;# 
  2205  0011                     	;# 
  2206  0012                     	;# 
  2207  0013                     	;# 
  2208  0015                     	;# 
  2209  0016                     	;# 
  2210  0016                     	;# 
  2211  0017                     	;# 
  2212  0018                     	;# 
  2213  0019                     	;# 
  2214  001A                     	;# 
  2215  001B                     	;# 
  2216  001C                     	;# 
  2217  008C                     	;# 
  2218  008E                     	;# 
  2219  0091                     	;# 
  2220  0092                     	;# 
  2221  0093                     	;# 
  2222  0095                     	;# 
  2223  0096                     	;# 
  2224  0097                     	;# 
  2225  0098                     	;# 
  2226  0099                     	;# 
  2227  009A                     	;# 
  2228  009B                     	;# 
  2229  009B                     	;# 
  2230  009C                     	;# 
  2231  009D                     	;# 
  2232  009E                     	;# 
  2233  009F                     	;# 
  2234  010C                     	;# 
  2235  010E                     	;# 
  2236  0111                     	;# 
  2237  0112                     	;# 
  2238  0113                     	;# 
  2239  0114                     	;# 
  2240  0115                     	;# 
  2241  0116                     	;# 
  2242  0117                     	;# 
  2243  0118                     	;# 
  2244  0119                     	;# 
  2245  011C                     	;# 
  2246  018C                     	;# 
  2247  018E                     	;# 
  2248  0191                     	;# 
  2249  0191                     	;# 
  2250  0192                     	;# 
  2251  0193                     	;# 
  2252  0193                     	;# 
  2253  0194                     	;# 
  2254  0195                     	;# 
  2255  0196                     	;# 
  2256  0197                     	;# 
  2257  0199                     	;# 
  2258  0199                     	;# 
  2259  0199                     	;# 
  2260  019A                     	;# 
  2261  019A                     	;# 
  2262  019A                     	;# 
  2263  019B                     	;# 
  2264  019B                     	;# 
  2265  019B                     	;# 
  2266  019B                     	;# 
  2267  019B                     	;# 
  2268  019C                     	;# 
  2269  019C                     	;# 
  2270  019C                     	;# 
  2271  019D                     	;# 
  2272  019D                     	;# 
  2273  019D                     	;# 
  2274  019E                     	;# 
  2275  019E                     	;# 
  2276  019E                     	;# 
  2277  019F                     	;# 
  2278  019F                     	;# 
  2279  019F                     	;# 
  2280  019F                     	;# 
  2281  019F                     	;# 
  2282  020C                     	;# 
  2283  020E                     	;# 
  2284  0211                     	;# 
  2285  0211                     	;# 
  2286  0212                     	;# 
  2287  0212                     	;# 
  2288  0213                     	;# 
  2289  0213                     	;# 
  2290  0214                     	;# 
  2291  0214                     	;# 
  2292  0215                     	;# 
  2293  0215                     	;# 
  2294  0215                     	;# 
  2295  0215                     	;# 
  2296  0216                     	;# 
  2297  0216                     	;# 
  2298  0217                     	;# 
  2299  0217                     	;# 
  2300  028C                     	;# 
  2301  028E                     	;# 
  2302  0291                     	;# 
  2303  0291                     	;# 
  2304  0292                     	;# 
  2305  0293                     	;# 
  2306  0293                     	;# 
  2307  0298                     	;# 
  2308  0298                     	;# 
  2309  0299                     	;# 
  2310  029A                     	;# 
  2311  029A                     	;# 
  2312  029E                     	;# 
  2313  030C                     	;# 
  2314  030E                     	;# 
  2315  038C                     	;# 
  2316  038E                     	;# 
  2317  0391                     	;# 
  2318  0392                     	;# 
  2319  0393                     	;# 
  2320  0397                     	;# 
  2321  0398                     	;# 
  2322  0399                     	;# 
  2323  0415                     	;# 
  2324  0416                     	;# 
  2325  0417                     	;# 
  2326  041C                     	;# 
  2327  041D                     	;# 
  2328  041E                     	;# 
  2329  0511                     	;# 
  2330  0515                     	;# 
  2331  0617                     	;# 
  2332  0618                     	;# 
  2333  0619                     	;# 
  2334  0619                     	;# 
  2335  061A                     	;# 
  2336  061B                     	;# 
  2337  061C                     	;# 
  2338  061C                     	;# 
  2339  0691                     	;# 
  2340  0692                     	;# 
  2341  0693                     	;# 
  2342  0694                     	;# 
  2343  0695                     	;# 
  2344  0696                     	;# 
  2345  0697                     	;# 
  2346  0698                     	;# 
  2347  0699                     	;# 
  2348  069A                     	;# 
  2349  069B                     	;# 
  2350  069C                     	;# 
  2351  069D                     	;# 
  2352  069E                     	;# 
  2353  069F                     	;# 
  2354  0E0F                     	;# 
  2355  0E10                     	;# 
  2356  0E11                     	;# 
  2357  0E12                     	;# 
  2358  0E13                     	;# 
  2359  0E14                     	;# 
  2360  0E15                     	;# 
  2361  0E17                     	;# 
  2362  0E20                     	;# 
  2363  0E21                     	;# 
  2364  0E22                     	;# 
  2365  0E24                     	;# 
  2366  0E25                     	;# 
  2367  0E28                     	;# 
  2368  0E29                     	;# 
  2369  0E2A                     	;# 
  2370  0E2B                     	;# 
  2371  0E90                     	;# 
  2372  0E91                     	;# 
  2373  0E92                     	;# 
  2374  0E94                     	;# 
  2375  0E95                     	;# 
  2376  0EA0                     	;# 
  2377  0EA1                     	;# 
  2378  0EA2                     	;# 
  2379  0EA3                     	;# 
  2380  0EA4                     	;# 
  2381  0EA5                     	;# 
  2382  0F0F                     	;# 
  2383  0F10                     	;# 
  2384  0F11                     	;# 
  2385  0F12                     	;# 
  2386  0F13                     	;# 
  2387  0F14                     	;# 
  2388  0F15                     	;# 
  2389  0F16                     	;# 
  2390  0F17                     	;# 
  2391  0F18                     	;# 
  2392  0F19                     	;# 
  2393  0F1A                     	;# 
  2394  0F1B                     	;# 
  2395  0F1C                     	;# 
  2396  0F1D                     	;# 
  2397  0F1E                     	;# 
  2398  0F1F                     	;# 
  2399  0F20                     	;# 
  2400  0F21                     	;# 
  2401  0F22                     	;# 
  2402  0F23                     	;# 
  2403  0F24                     	;# 
  2404  0F25                     	;# 
  2405  0F26                     	;# 
  2406  0F27                     	;# 
  2407  0F28                     	;# 
  2408  0F29                     	;# 
  2409  0F2A                     	;# 
  2410  0F2B                     	;# 
  2411  0F2C                     	;# 
  2412  0F2D                     	;# 
  2413  0F9E                     	;# 
  2414  0FE4                     	;# 
  2415  0FE5                     	;# 
  2416  0FE6                     	;# 
  2417  0FE7                     	;# 
  2418  0FE8                     	;# 
  2419  0FE9                     	;# 
  2420  0FEA                     	;# 
  2421  0FEB                     	;# 
  2422  0FED                     	;# 
  2423  0FEE                     	;# 
  2424  0FEF                     	;# 
  2425  0000                     	;# 
  2426  0001                     	;# 
  2427  0002                     	;# 
  2428  0003                     	;# 
  2429  0004                     	;# 
  2430  0005                     	;# 
  2431  0006                     	;# 
  2432  0007                     	;# 
  2433  0008                     	;# 
  2434  0009                     	;# 
  2435  000A                     	;# 
  2436  000B                     	;# 
  2437  000C                     	;# 
  2438  000E                     	;# 
  2439  0011                     	;# 
  2440  0012                     	;# 
  2441  0013                     	;# 
  2442  0015                     	;# 
  2443  0016                     	;# 
  2444  0016                     	;# 
  2445  0017                     	;# 
  2446  0018                     	;# 
  2447  0019                     	;# 
  2448  001A                     	;# 
  2449  001B                     	;# 
  2450  001C                     	;# 
  2451  008C                     	;# 
  2452  008E                     	;# 
  2453  0091                     	;# 
  2454  0092                     	;# 
  2455  0093                     	;# 
  2456  0095                     	;# 
  2457  0096                     	;# 
  2458  0097                     	;# 
  2459  0098                     	;# 
  2460  0099                     	;# 
  2461  009A                     	;# 
  2462  009B                     	;# 
  2463  009B                     	;# 
  2464  009C                     	;# 
  2465  009D                     	;# 
  2466  009E                     	;# 
  2467  009F                     	;# 
  2468  010C                     	;# 
  2469  010E                     	;# 
  2470  0111                     	;# 
  2471  0112                     	;# 
  2472  0113                     	;# 
  2473  0114                     	;# 
  2474  0115                     	;# 
  2475  0116                     	;# 
  2476  0117                     	;# 
  2477  0118                     	;# 
  2478  0119                     	;# 
  2479  011C                     	;# 
  2480  018C                     	;# 
  2481  018E                     	;# 
  2482  0191                     	;# 
  2483  0191                     	;# 
  2484  0192                     	;# 
  2485  0193                     	;# 
  2486  0193                     	;# 
  2487  0194                     	;# 
  2488  0195                     	;# 
  2489  0196                     	;# 
  2490  0197                     	;# 
  2491  0199                     	;# 
  2492  0199                     	;# 
  2493  0199                     	;# 
  2494  019A                     	;# 
  2495  019A                     	;# 
  2496  019A                     	;# 
  2497  019B                     	;# 
  2498  019B                     	;# 
  2499  019B                     	;# 
  2500  019B                     	;# 
  2501  019B                     	;# 
  2502  019C                     	;# 
  2503  019C                     	;# 
  2504  019C                     	;# 
  2505  019D                     	;# 
  2506  019D                     	;# 
  2507  019D                     	;# 
  2508  019E                     	;# 
  2509  019E                     	;# 
  2510  019E                     	;# 
  2511  019F                     	;# 
  2512  019F                     	;# 
  2513  019F                     	;# 
  2514  019F                     	;# 
  2515  019F                     	;# 
  2516  020C                     	;# 
  2517  020E                     	;# 
  2518  0211                     	;# 
  2519  0211                     	;# 
  2520  0212                     	;# 
  2521  0212                     	;# 
  2522  0213                     	;# 
  2523  0213                     	;# 
  2524  0214                     	;# 
  2525  0214                     	;# 
  2526  0215                     	;# 
  2527  0215                     	;# 
  2528  0215                     	;# 
  2529  0215                     	;# 
  2530  0216                     	;# 
  2531  0216                     	;# 
  2532  0217                     	;# 
  2533  0217                     	;# 
  2534  028C                     	;# 
  2535  028E                     	;# 
  2536  0291                     	;# 
  2537  0291                     	;# 
  2538  0292                     	;# 
  2539  0293                     	;# 
  2540  0293                     	;# 
  2541  0298                     	;# 
  2542  0298                     	;# 
  2543  0299                     	;# 
  2544  029A                     	;# 
  2545  029A                     	;# 
  2546  029E                     	;# 
  2547  030C                     	;# 
  2548  030E                     	;# 
  2549  038C                     	;# 
  2550  038E                     	;# 
  2551  0391                     	;# 
  2552  0392                     	;# 
  2553  0393                     	;# 
  2554  0397                     	;# 
  2555  0398                     	;# 
  2556  0399                     	;# 
  2557  0415                     	;# 
  2558  0416                     	;# 
  2559  0417                     	;# 
  2560  041C                     	;# 
  2561  041D                     	;# 
  2562  041E                     	;# 
  2563  0511                     	;# 
  2564  0515                     	;# 
  2565  0617                     	;# 
  2566  0618                     	;# 
  2567  0619                     	;# 
  2568  0619                     	;# 
  2569  061A                     	;# 
  2570  061B                     	;# 
  2571  061C                     	;# 
  2572  061C                     	;# 
  2573  0691                     	;# 
  2574  0692                     	;# 
  2575  0693                     	;# 
  2576  0694                     	;# 
  2577  0695                     	;# 
  2578  0696                     	;# 
  2579  0697                     	;# 
  2580  0698                     	;# 
  2581  0699                     	;# 
  2582  069A                     	;# 
  2583  069B                     	;# 
  2584  069C                     	;# 
  2585  069D                     	;# 
  2586  069E                     	;# 
  2587  069F                     	;# 
  2588  0E0F                     	;# 
  2589  0E10                     	;# 
  2590  0E11                     	;# 
  2591  0E12                     	;# 
  2592  0E13                     	;# 
  2593  0E14                     	;# 
  2594  0E15                     	;# 
  2595  0E17                     	;# 
  2596  0E20                     	;# 
  2597  0E21                     	;# 
  2598  0E22                     	;# 
  2599  0E24                     	;# 
  2600  0E25                     	;# 
  2601  0E28                     	;# 
  2602  0E29                     	;# 
  2603  0E2A                     	;# 
  2604  0E2B                     	;# 
  2605  0E90                     	;# 
  2606  0E91                     	;# 
  2607  0E92                     	;# 
  2608  0E94                     	;# 
  2609  0E95                     	;# 
  2610  0EA0                     	;# 
  2611  0EA1                     	;# 
  2612  0EA2                     	;# 
  2613  0EA3                     	;# 
  2614  0EA4                     	;# 
  2615  0EA5                     	;# 
  2616  0F0F                     	;# 
  2617  0F10                     	;# 
  2618  0F11                     	;# 
  2619  0F12                     	;# 
  2620  0F13                     	;# 
  2621  0F14                     	;# 
  2622  0F15                     	;# 
  2623  0F16                     	;# 
  2624  0F17                     	;# 
  2625  0F18                     	;# 
  2626  0F19                     	;# 
  2627  0F1A                     	;# 
  2628  0F1B                     	;# 
  2629  0F1C                     	;# 
  2630  0F1D                     	;# 
  2631  0F1E                     	;# 
  2632  0F1F                     	;# 
  2633  0F20                     	;# 
  2634  0F21                     	;# 
  2635  0F22                     	;# 
  2636  0F23                     	;# 
  2637  0F24                     	;# 
  2638  0F25                     	;# 
  2639  0F26                     	;# 
  2640  0F27                     	;# 
  2641  0F28                     	;# 
  2642  0F29                     	;# 
  2643  0F2A                     	;# 
  2644  0F2B                     	;# 
  2645  0F2C                     	;# 
  2646  0F2D                     	;# 
  2647  0F9E                     	;# 
  2648  0FE4                     	;# 
  2649  0FE5                     	;# 
  2650  0FE6                     	;# 
  2651  0FE7                     	;# 
  2652  0FE8                     	;# 
  2653  0FE9                     	;# 
  2654  0FEA                     	;# 
  2655  0FEB                     	;# 
  2656  0FED                     	;# 
  2657  0FEE                     	;# 
  2658  0FEF                     	;# 
  2659                           
  2660                           	psect	idataBANK1
  2661  07FB                     __pidataBANK1:	
  2662                           
  2663                           ;initializer for _No_Keyboard
  2664  07FB  3401               	retlw	1
  2665                           
  2666                           	psect	idataBANK2
  2667  07FC                     __pidataBANK2:	
  2668                           
  2669                           ;initializer for _No_Keyboard_old
  2670  07FC  3401               	retlw	1
  2671                           
  2672                           	psect	idataBANK4
  2673  1917                     __pidataBANK4:	
  2674                           
  2675                           ;initializer for _BAUD
  2676  1917  3480               	retlw	128
  2677  1918  3425               	retlw	37
  2678  1919  3400               	retlw	0
  2679  191A  3400               	retlw	0
  2680                           
  2681                           ;initializer for _Read_Timer
  2682  191B  3414               	retlw	20
  2683  191C  3400               	retlw	0
  2684                           
  2685                           ;initializer for _MEM
  2686  191D  3400               	retlw	0
  2687  191E  3400               	retlw	0
  2688  191F  3480               	retlw	128
  2689  1920  3425               	retlw	37
  2690                           
  2691                           ;initializer for _Version
  2692  1921  3431               	retlw	49
  2693  1922  342E               	retlw	46
  2694  1923  3432               	retlw	50
  2695  1924  3400               	retlw	0
  2696                           
  2697                           	psect	stringtext
  2698  0800                     __pstringtext:	
  2699  0800                     _ScanCodeFunctionNoE0:	
  2700  0800  3400               	retlw	0
  2701  0801  3411               	retlw	17
  2702  0802  3400               	retlw	0
  2703  0803  340C               	retlw	12
  2704  0804  340A               	retlw	10
  2705  0805  3406               	retlw	6
  2706  0806  3407               	retlw	7
  2707  0807  3414               	retlw	20
  2708  0808  3400               	retlw	0
  2709  0809  3412               	retlw	18
  2710  080A  3410               	retlw	16
  2711  080B  340E               	retlw	14
  2712  080C  340B               	retlw	11
  2713  080D  3400               	retlw	0
  2714  080E  3400               	retlw	0
  2715  080F  3400               	retlw	0
  2716  0810  3400               	retlw	0
  2717  0811  341C               	retlw	28
  2718  0812  3400               	retlw	0
  2719  0813  3400               	retlw	0
  2720  0814  341A               	retlw	26
  2721  0815  3400               	retlw	0
  2722  0816  3400               	retlw	0
  2723  0817  3400               	retlw	0
  2724  0818  3400               	retlw	0
  2725  0819  3400               	retlw	0
  2726  081A  3400               	retlw	0
  2727  081B  3400               	retlw	0
  2728  081C  3400               	retlw	0
  2729  081D  3400               	retlw	0
  2730  081E  3400               	retlw	0
  2731  081F  3400               	retlw	0
  2732  0820  3400               	retlw	0
  2733  0821  3400               	retlw	0
  2734  0822  3400               	retlw	0
  2735  0823  3400               	retlw	0
  2736  0824  3400               	retlw	0
  2737  0825  3400               	retlw	0
  2738  0826  3400               	retlw	0
  2739  0827  3400               	retlw	0
  2740  0828  3400               	retlw	0
  2741  0829  3400               	retlw	0
  2742  082A  3400               	retlw	0
  2743  082B  3400               	retlw	0
  2744  082C  3400               	retlw	0
  2745  082D  3400               	retlw	0
  2746  082E  3400               	retlw	0
  2747  082F  3400               	retlw	0
  2748  0830  3400               	retlw	0
  2749  0831  3400               	retlw	0
  2750  0832  3400               	retlw	0
  2751  0833  3400               	retlw	0
  2752  0834  3400               	retlw	0
  2753  0835  3400               	retlw	0
  2754  0836  3400               	retlw	0
  2755  0837  3400               	retlw	0
  2756  0838  3400               	retlw	0
  2757  0839  3400               	retlw	0
  2758  083A  3400               	retlw	0
  2759  083B  3400               	retlw	0
  2760  083C  3400               	retlw	0
  2761  083D  3400               	retlw	0
  2762  083E  3400               	retlw	0
  2763  083F  3400               	retlw	0
  2764  0840  3400               	retlw	0
  2765  0841  3400               	retlw	0
  2766  0842  3400               	retlw	0
  2767  0843  3400               	retlw	0
  2768  0844  3400               	retlw	0
  2769  0845  3400               	retlw	0
  2770  0846  3400               	retlw	0
  2771  0847  3400               	retlw	0
  2772  0848  3400               	retlw	0
  2773  0849  3400               	retlw	0
  2774  084A  3400               	retlw	0
  2775  084B  3400               	retlw	0
  2776  084C  3400               	retlw	0
  2777  084D  3400               	retlw	0
  2778  084E  3400               	retlw	0
  2779  084F  3400               	retlw	0
  2780  0850  3400               	retlw	0
  2781  0851  3400               	retlw	0
  2782  0852  3400               	retlw	0
  2783  0853  3400               	retlw	0
  2784  0854  3400               	retlw	0
  2785  0855  3400               	retlw	0
  2786  0856  3400               	retlw	0
  2787  0857  3400               	retlw	0
  2788  0858  3400               	retlw	0
  2789  0859  3400               	retlw	0
  2790  085A  3400               	retlw	0
  2791  085B  3400               	retlw	0
  2792  085C  3400               	retlw	0
  2793  085D  3400               	retlw	0
  2794  085E  3400               	retlw	0
  2795  085F  3400               	retlw	0
  2796  0860  3400               	retlw	0
  2797  0861  3400               	retlw	0
  2798  0862  3400               	retlw	0
  2799  0863  3400               	retlw	0
  2800  0864  3400               	retlw	0
  2801  0865  3400               	retlw	0
  2802  0866  3400               	retlw	0
  2803  0867  3400               	retlw	0
  2804  0868  3400               	retlw	0
  2805  0869  3400               	retlw	0
  2806  086A  3400               	retlw	0
  2807  086B  3400               	retlw	0
  2808  086C  3400               	retlw	0
  2809  086D  3400               	retlw	0
  2810  086E  3400               	retlw	0
  2811  086F  3400               	retlw	0
  2812  0870  3400               	retlw	0
  2813  0871  3400               	retlw	0
  2814  0872  3400               	retlw	0
  2815  0873  3400               	retlw	0
  2816  0874  3400               	retlw	0
  2817  0875  3400               	retlw	0
  2818  0876  3400               	retlw	0
  2819  0877  3400               	retlw	0
  2820  0878  3413               	retlw	19
  2821  0879  3400               	retlw	0
  2822  087A  3400               	retlw	0
  2823  087B  3400               	retlw	0
  2824  087C  3400               	retlw	0
  2825  087D  3400               	retlw	0
  2826  087E  3400               	retlw	0
  2827  087F  3400               	retlw	0
  2828  0880  3400               	retlw	0
  2829  0881  3400               	retlw	0
  2830  0882  3400               	retlw	0
  2831  0883  340F               	retlw	15
  2832  0884                     __end_of_ScanCodeFunctionNoE0:	
  2833  0884                     _ScanCode:	
  2834  0884  3409               	retlw	9
  2835  0885  3460               	retlw	96
  2836  0886  3400               	retlw	0
  2837  0887  3400               	retlw	0
  2838  0888  3400               	retlw	0
  2839  0889  3400               	retlw	0
  2840  088A  3400               	retlw	0
  2841  088B  3400               	retlw	0
  2842  088C  3471               	retlw	113
  2843  088D  3431               	retlw	49
  2844  088E  3400               	retlw	0
  2845  088F  3400               	retlw	0
  2846  0890  3400               	retlw	0
  2847  0891  347A               	retlw	122
  2848  0892  3473               	retlw	115
  2849  0893  3461               	retlw	97
  2850  0894  3477               	retlw	119
  2851  0895  3432               	retlw	50
  2852  0896  3400               	retlw	0
  2853  0897  3400               	retlw	0
  2854  0898  3463               	retlw	99
  2855  0899  3478               	retlw	120
  2856  089A  3464               	retlw	100
  2857  089B  3465               	retlw	101
  2858  089C  3434               	retlw	52
  2859  089D  3433               	retlw	51
  2860  089E  3400               	retlw	0
  2861  089F  3400               	retlw	0
  2862  08A0  3420               	retlw	32
  2863  08A1  3476               	retlw	118
  2864  08A2  3466               	retlw	102
  2865  08A3  3474               	retlw	116
  2866  08A4  3472               	retlw	114
  2867  08A5  3435               	retlw	53
  2868  08A6  3400               	retlw	0
  2869  08A7  3400               	retlw	0
  2870  08A8  346E               	retlw	110
  2871  08A9  3462               	retlw	98
  2872  08AA  3468               	retlw	104
  2873  08AB  3467               	retlw	103
  2874  08AC  3479               	retlw	121
  2875  08AD  3436               	retlw	54
  2876  08AE  3400               	retlw	0
  2877  08AF  3400               	retlw	0
  2878  08B0  3400               	retlw	0
  2879  08B1  346D               	retlw	109
  2880  08B2  346A               	retlw	106
  2881  08B3  3475               	retlw	117
  2882  08B4  3437               	retlw	55
  2883  08B5  3438               	retlw	56
  2884  08B6  3400               	retlw	0
  2885  08B7  3400               	retlw	0
  2886  08B8  342C               	retlw	44
  2887  08B9  346B               	retlw	107
  2888  08BA  3469               	retlw	105
  2889  08BB  346F               	retlw	111
  2890  08BC  3430               	retlw	48
  2891  08BD  3439               	retlw	57
  2892  08BE  3400               	retlw	0
  2893  08BF  3400               	retlw	0
  2894  08C0  342E               	retlw	46
  2895  08C1  342F               	retlw	47
  2896  08C2  346C               	retlw	108
  2897  08C3  343B               	retlw	59
  2898  08C4  3470               	retlw	112
  2899  08C5  342D               	retlw	45
  2900  08C6  3400               	retlw	0
  2901  08C7  3400               	retlw	0
  2902  08C8  3400               	retlw	0
  2903  08C9  3427               	retlw	39
  2904  08CA  3400               	retlw	0
  2905  08CB  345B               	retlw	91
  2906  08CC  343D               	retlw	61
  2907  08CD  3400               	retlw	0
  2908  08CE  3400               	retlw	0
  2909  08CF  3400               	retlw	0
  2910  08D0  3400               	retlw	0
  2911  08D1  340D               	retlw	13
  2912  08D2  345D               	retlw	93
  2913  08D3  3400               	retlw	0
  2914  08D4  345C               	retlw	92
  2915  08D5  3400               	retlw	0
  2916  08D6  3400               	retlw	0
  2917  08D7  3400               	retlw	0
  2918  08D8  3400               	retlw	0
  2919  08D9  3400               	retlw	0
  2920  08DA  3400               	retlw	0
  2921  08DB  3400               	retlw	0
  2922  08DC  3400               	retlw	0
  2923  08DD  3408               	retlw	8
  2924  08DE  3400               	retlw	0
  2925  08DF  3400               	retlw	0
  2926  08E0  3431               	retlw	49
  2927  08E1  3400               	retlw	0
  2928  08E2  3434               	retlw	52
  2929  08E3  3437               	retlw	55
  2930  08E4  3400               	retlw	0
  2931  08E5  3400               	retlw	0
  2932  08E6  3400               	retlw	0
  2933  08E7  3430               	retlw	48
  2934  08E8  342E               	retlw	46
  2935  08E9  3432               	retlw	50
  2936  08EA  3435               	retlw	53
  2937  08EB  3436               	retlw	54
  2938  08EC  3438               	retlw	56
  2939  08ED  341B               	retlw	27
  2940  08EE  3400               	retlw	0
  2941  08EF  3400               	retlw	0
  2942  08F0  342B               	retlw	43
  2943  08F1  3433               	retlw	51
  2944  08F2  342D               	retlw	45
  2945  08F3  342A               	retlw	42
  2946  08F4  3439               	retlw	57
  2947  08F5                     __end_of_ScanCode:	
  2948  08F5                     _ScanCodeSHIFT:	
  2949  08F5  3409               	retlw	9
  2950  08F6  347E               	retlw	126
  2951  08F7  3400               	retlw	0
  2952  08F8  3400               	retlw	0
  2953  08F9  3400               	retlw	0
  2954  08FA  3400               	retlw	0
  2955  08FB  3400               	retlw	0
  2956  08FC  3400               	retlw	0
  2957  08FD  3451               	retlw	81
  2958  08FE  3421               	retlw	33
  2959  08FF  3400               	retlw	0
  2960  0900  3400               	retlw	0
  2961  0901  3400               	retlw	0
  2962  0902  345A               	retlw	90
  2963  0903  3453               	retlw	83
  2964  0904  3441               	retlw	65
  2965  0905  3457               	retlw	87
  2966  0906  3440               	retlw	64
  2967  0907  3400               	retlw	0
  2968  0908  3400               	retlw	0
  2969  0909  3443               	retlw	67
  2970  090A  3458               	retlw	88
  2971  090B  3444               	retlw	68
  2972  090C  3445               	retlw	69
  2973  090D  3424               	retlw	36
  2974  090E  3423               	retlw	35
  2975  090F  3400               	retlw	0
  2976  0910  3400               	retlw	0
  2977  0911  3420               	retlw	32
  2978  0912  3456               	retlw	86
  2979  0913  3446               	retlw	70
  2980  0914  3454               	retlw	84
  2981  0915  3452               	retlw	82
  2982  0916  3425               	retlw	37
  2983  0917  3400               	retlw	0
  2984  0918  3400               	retlw	0
  2985  0919  344E               	retlw	78
  2986  091A  3442               	retlw	66
  2987  091B  3448               	retlw	72
  2988  091C  3447               	retlw	71
  2989  091D  3459               	retlw	89
  2990  091E  345E               	retlw	94
  2991  091F  3400               	retlw	0
  2992  0920  3400               	retlw	0
  2993  0921  3400               	retlw	0
  2994  0922  344D               	retlw	77
  2995  0923  344A               	retlw	74
  2996  0924  3455               	retlw	85
  2997  0925  3426               	retlw	38
  2998  0926  342A               	retlw	42
  2999  0927  3400               	retlw	0
  3000  0928  3400               	retlw	0
  3001  0929  343C               	retlw	60
  3002  092A  344B               	retlw	75
  3003  092B  3449               	retlw	73
  3004  092C  344F               	retlw	79
  3005  092D  3429               	retlw	41
  3006  092E  3428               	retlw	40
  3007  092F  3400               	retlw	0
  3008  0930  3400               	retlw	0
  3009  0931  343E               	retlw	62
  3010  0932  343F               	retlw	63
  3011  0933  344C               	retlw	76
  3012  0934  343A               	retlw	58
  3013  0935  3450               	retlw	80
  3014  0936  345F               	retlw	95
  3015  0937  3400               	retlw	0
  3016  0938  3400               	retlw	0
  3017  0939  3400               	retlw	0
  3018  093A  3422               	retlw	34
  3019  093B  3400               	retlw	0
  3020  093C  347B               	retlw	123
  3021  093D  342B               	retlw	43
  3022  093E  3400               	retlw	0
  3023  093F  3400               	retlw	0
  3024  0940  3400               	retlw	0
  3025  0941  3400               	retlw	0
  3026  0942  340D               	retlw	13
  3027  0943  347D               	retlw	125
  3028  0944  3400               	retlw	0
  3029  0945  347C               	retlw	124
  3030  0946  3400               	retlw	0
  3031  0947  3400               	retlw	0
  3032  0948  3400               	retlw	0
  3033  0949  3400               	retlw	0
  3034  094A  3400               	retlw	0
  3035  094B  3400               	retlw	0
  3036  094C  3400               	retlw	0
  3037  094D  3400               	retlw	0
  3038  094E  3408               	retlw	8
  3039  094F  3400               	retlw	0
  3040  0950  3400               	retlw	0
  3041  0951  3431               	retlw	49
  3042  0952  3400               	retlw	0
  3043  0953  3434               	retlw	52
  3044  0954  3437               	retlw	55
  3045  0955  3400               	retlw	0
  3046  0956  3400               	retlw	0
  3047  0957  3400               	retlw	0
  3048  0958  3430               	retlw	48
  3049  0959  342E               	retlw	46
  3050  095A  3432               	retlw	50
  3051  095B  3435               	retlw	53
  3052  095C  3436               	retlw	54
  3053  095D  3438               	retlw	56
  3054  095E  341B               	retlw	27
  3055  095F  3400               	retlw	0
  3056  0960  3400               	retlw	0
  3057  0961  342B               	retlw	43
  3058  0962  3433               	retlw	51
  3059  0963  342D               	retlw	45
  3060  0964  342A               	retlw	42
  3061  0965  3439               	retlw	57
  3062  0966                     __end_of_ScanCodeSHIFT:	
  3063  0966                     _ScanCodeFunctionE0:	
  3064  0966  341E               	retlw	30
  3065  0967  3400               	retlw	0
  3066  0968  3400               	retlw	0
  3067  0969  341F               	retlw	31
  3068  096A  3400               	retlw	0
  3069  096B  3400               	retlw	0
  3070  096C  3400               	retlw	0
  3071  096D  3400               	retlw	0
  3072  096E  3400               	retlw	0
  3073  096F  3400               	retlw	0
  3074  0970  3400               	retlw	0
  3075  0971  3400               	retlw	0
  3076  0972  3400               	retlw	0
  3077  0973  3400               	retlw	0
  3078  0974  3419               	retlw	25
  3079  0975  3400               	retlw	0
  3080  0976  3400               	retlw	0
  3081  0977  3400               	retlw	0
  3082  0978  3400               	retlw	0
  3083  0979  3400               	retlw	0
  3084  097A  3400               	retlw	0
  3085  097B  3400               	retlw	0
  3086  097C  341D               	retlw	29
  3087  097D  3400               	retlw	0
  3088  097E  3400               	retlw	0
  3089  097F  3400               	retlw	0
  3090  0980  3400               	retlw	0
  3091  0981  3400               	retlw	0
  3092  0982  3400               	retlw	0
  3093  0983  3400               	retlw	0
  3094  0984  3400               	retlw	0
  3095  0985  3400               	retlw	0
  3096  0986  3400               	retlw	0
  3097  0987  3400               	retlw	0
  3098  0988  3400               	retlw	0
  3099  0989  3400               	retlw	0
  3100  098A  3400               	retlw	0
  3101  098B  3400               	retlw	0
  3102  098C  3400               	retlw	0
  3103  098D  3400               	retlw	0
  3104  098E  3400               	retlw	0
  3105  098F  3400               	retlw	0
  3106  0990  3400               	retlw	0
  3107  0991  3400               	retlw	0
  3108  0992  3400               	retlw	0
  3109  0993  3400               	retlw	0
  3110  0994  3400               	retlw	0
  3111  0995  3400               	retlw	0
  3112  0996  3400               	retlw	0
  3113  0997  3400               	retlw	0
  3114  0998  3400               	retlw	0
  3115  0999  3400               	retlw	0
  3116  099A  3400               	retlw	0
  3117  099B  3400               	retlw	0
  3118  099C  3400               	retlw	0
  3119  099D  3400               	retlw	0
  3120  099E  3400               	retlw	0
  3121  099F  342F               	retlw	47
  3122  09A0  3400               	retlw	0
  3123  09A1  3400               	retlw	0
  3124  09A2  3400               	retlw	0
  3125  09A3  3400               	retlw	0
  3126  09A4  3400               	retlw	0
  3127  09A5  3400               	retlw	0
  3128  09A6  3400               	retlw	0
  3129  09A7  3400               	retlw	0
  3130  09A8  3400               	retlw	0
  3131  09A9  3400               	retlw	0
  3132  09AA  3400               	retlw	0
  3133  09AB  3400               	retlw	0
  3134  09AC  3400               	retlw	0
  3135  09AD  3400               	retlw	0
  3136  09AE  3400               	retlw	0
  3137  09AF  340D               	retlw	13
  3138  09B0  3400               	retlw	0
  3139  09B1  3400               	retlw	0
  3140  09B2  3400               	retlw	0
  3141  09B3  3400               	retlw	0
  3142  09B4  3400               	retlw	0
  3143  09B5  3400               	retlw	0
  3144  09B6  3400               	retlw	0
  3145  09B7  3400               	retlw	0
  3146  09B8  3400               	retlw	0
  3147  09B9  3400               	retlw	0
  3148  09BA  3400               	retlw	0
  3149  09BB  3400               	retlw	0
  3150  09BC  3400               	retlw	0
  3151  09BD  3400               	retlw	0
  3152  09BE  3401               	retlw	1
  3153  09BF  3400               	retlw	0
  3154  09C0  3403               	retlw	3
  3155  09C1  3416               	retlw	22
  3156  09C2  3400               	retlw	0
  3157  09C3  3400               	retlw	0
  3158  09C4  3400               	retlw	0
  3159  09C5  3415               	retlw	21
  3160  09C6  347F               	retlw	127
  3161  09C7  3404               	retlw	4
  3162  09C8  3400               	retlw	0
  3163  09C9  3405               	retlw	5
  3164  09CA  3402               	retlw	2
  3165  09CB  3400               	retlw	0
  3166  09CC  3400               	retlw	0
  3167  09CD  3400               	retlw	0
  3168  09CE  3400               	retlw	0
  3169  09CF  3418               	retlw	24
  3170  09D0  3400               	retlw	0
  3171  09D1  3400               	retlw	0
  3172  09D2  3417               	retlw	23
  3173  09D3                     __end_of_ScanCodeFunctionE0:	
  3174  09D3                     _dpowers:	
  3175  09D3  3401               	retlw	1
  3176  09D4  3400               	retlw	0
  3177  09D5  3400               	retlw	0
  3178  09D6  3400               	retlw	0
  3179  09D7  340A               	retlw	10
  3180  09D8  3400               	retlw	0
  3181  09D9  3400               	retlw	0
  3182  09DA  3400               	retlw	0
  3183  09DB  3464               	retlw	100
  3184  09DC  3400               	retlw	0
  3185  09DD  3400               	retlw	0
  3186  09DE  3400               	retlw	0
  3187  09DF  34E8               	retlw	232
  3188  09E0  3403               	retlw	3
  3189  09E1  3400               	retlw	0
  3190  09E2  3400               	retlw	0
  3191  09E3  3410               	retlw	16
  3192  09E4  3427               	retlw	39
  3193  09E5  3400               	retlw	0
  3194  09E6  3400               	retlw	0
  3195  09E7  34A0               	retlw	160
  3196  09E8  3486               	retlw	134
  3197  09E9  3401               	retlw	1
  3198  09EA  3400               	retlw	0
  3199  09EB  3440               	retlw	64
  3200  09EC  3442               	retlw	66
  3201  09ED  340F               	retlw	15
  3202  09EE  3400               	retlw	0
  3203  09EF  3480               	retlw	128
  3204  09F0  3496               	retlw	150
  3205  09F1  3498               	retlw	152
  3206  09F2  3400               	retlw	0
  3207  09F3  3400               	retlw	0
  3208  09F4  34E1               	retlw	225
  3209  09F5  34F5               	retlw	245
  3210  09F6  3405               	retlw	5
  3211  09F7  3400               	retlw	0
  3212  09F8  34CA               	retlw	202
  3213  09F9  349A               	retlw	154
  3214  09FA  343B               	retlw	59
  3215  09FB                     __end_of_dpowers:	
  3216  000B                     _INTCON	set	11
  3217  000B                     _INTCONbits	set	11
  3218  0011                     _PIR1bits	set	17
  3219  000C                     _PORTA	set	12
  3220  000E                     _PORTC	set	14
  3221  001B                     _PR2	set	27
  3222  001C                     _T2CON	set	28
  3223  001C                     _T2CONbits	set	28
  3224  009D                     _ADCON0	set	157
  3225  009E                     _ADCON1	set	158
  3226  009F                     _ADCON2	set	159
  3227  009C                     _ADRESH	set	156
  3228  009B                     _ADRESL	set	155
  3229  0095                     _OPTION_REGbits	set	149
  3230  0099                     _OSCCON	set	153
  3231  009A                     _OSCSTAT	set	154
  3232  0091                     _PIE1	set	145
  3233  0091                     _PIE1bits	set	145
  3234  008C                     _TRISAbits	set	140
  3235  008E                     _TRISCbits	set	142
  3236  04D0                     _HFIOFS	set	1232
  3237  0117                     _FVRCON	set	279
  3238  010C                     _LATA	set	268
  3239  010E                     _LATC	set	270
  3240  018C                     _ANSELA	set	396
  3241  018E                     _ANSELC	set	398
  3242  019F                     _BAUD1CON	set	415
  3243  0192                     _PMADRH	set	402
  3244  0191                     _PMADRL	set	401
  3245  0195                     _PMCON1	set	405
  3246  0196                     _PMCON2	set	406
  3247  0194                     _PMDATH	set	404
  3248  0193                     _PMDATL	set	403
  3249  019D                     _RC1STA	set	413
  3250  019D                     _RC1STAbits	set	413
  3251  0199                     _RCREG	set	409
  3252  019D                     _RCSTA	set	413
  3253  019D                     _RCSTAbits	set	413
  3254  019B                     _SPBRG	set	411
  3255  019C                     _SPBRGH	set	412
  3256  019E                     _TX1STA	set	414
  3257  019E                     _TX1STAbits	set	414
  3258  019A                     _TXREG	set	410
  3259  019E                     _TXSTAbits	set	414
  3260  020C                     _WPUA	set	524
  3261  020E                     _WPUC	set	526
  3262  029A                     _CCP2CONbits	set	666
  3263  0393                     _IOCAF	set	915
  3264  0392                     _IOCAN	set	914
  3265  0391                     _IOCAP	set	913
  3266  0E25                     _CKPPS	set	3621
  3267  0E0F                     _PPSLOCK	set	3599
  3268  0E24                     _RXPPS	set	3620
  3269  0EA2                     _RC2PPS	set	3746
  3270  09FB                     __stringdata:	
  3271  09FB                     STR_32:	
  3272  09FB  344B               	retlw	75	;'K'
  3273  09FC  3465               	retlw	101	;'e'
  3274  09FD  3479               	retlw	121	;'y'
  3275  09FE  3442               	retlw	66	;'B'
  3276  09FF  346F               	retlw	111	;'o'
  3277  0A00  3461               	retlw	97	;'a'
  3278  0A01  3472               	retlw	114	;'r'
  3279  0A02  3464               	retlw	100	;'d'
  3280  0A03  3420               	retlw	32	;' '
  3281  0A04  3452               	retlw	82	;'R'
  3282  0A05  3465               	retlw	101	;'e'
  3283  0A06  3473               	retlw	115	;'s'
  3284  0A07  3465               	retlw	101	;'e'
  3285  0A08  3474               	retlw	116	;'t'
  3286  0A09  3420               	retlw	32	;' '
  3287  0A0A  3474               	retlw	116	;'t'
  3288  0A0B  346F               	retlw	111	;'o'
  3289  0A0C  3420               	retlw	32	;' '
  3290  0A0D  3439               	retlw	57	;'9'
  3291  0A0E  3436               	retlw	54	;'6'
  3292  0A0F  3430               	retlw	48	;'0'
  3293  0A10  3430               	retlw	48	;'0'
  3294  0A11  3420               	retlw	32	;' '
  3295  0A12  3477               	retlw	119	;'w'
  3296  0A13  3469               	retlw	105	;'i'
  3297  0A14  3474               	retlw	116	;'t'
  3298  0A15  3468               	retlw	104	;'h'
  3299  0A16  3420               	retlw	32	;' '
  3300  0A17  346E               	retlw	110	;'n'
  3301  0A18  346F               	retlw	111	;'o'
  3302  0A19  3420               	retlw	32	;' '
  3303  0A1A  3470               	retlw	112	;'p'
  3304  0A1B  3461               	retlw	97	;'a'
  3305  0A1C  3472               	retlw	114	;'r'
  3306  0A1D  3469               	retlw	105	;'i'
  3307  0A1E  3474               	retlw	116	;'t'
  3308  0A1F  3479               	retlw	121	;'y'
  3309  0A20  3420               	retlw	32	;' '
  3310  0A21  3462               	retlw	98	;'b'
  3311  0A22  3469               	retlw	105	;'i'
  3312  0A23  3474               	retlw	116	;'t'
  3313  0A24  340D               	retlw	13
  3314  0A25  340A               	retlw	10
  3315  0A26  3400               	retlw	0
  3316  0A27                     STR_5:	
  3317  0A27  3454               	retlw	84	;'T'
  3318  0A28  346F               	retlw	111	;'o'
  3319  0A29  3420               	retlw	32	;' '
  3320  0A2A  3443               	retlw	67	;'C'
  3321  0A2B  3468               	retlw	104	;'h'
  3322  0A2C  3461               	retlw	97	;'a'
  3323  0A2D  346E               	retlw	110	;'n'
  3324  0A2E  3467               	retlw	103	;'g'
  3325  0A2F  3465               	retlw	101	;'e'
  3326  0A30  3420               	retlw	32	;' '
  3327  0A31  3442               	retlw	66	;'B'
  3328  0A32  3441               	retlw	65	;'A'
  3329  0A33  3455               	retlw	85	;'U'
  3330  0A34  3444               	retlw	68	;'D'
  3331  0A35  3420               	retlw	32	;' '
  3332  0A36  3468               	retlw	104	;'h'
  3333  0A37  3469               	retlw	105	;'i'
  3334  0A38  3474               	retlw	116	;'t'
  3335  0A39  3420               	retlw	32	;' '
  3336  0A3A  3422               	retlw	34	;'"'
  3337  0A3B  3443               	retlw	67	;'C'
  3338  0A3C  344E               	retlw	78	;'N'
  3339  0A3D  3454               	retlw	84	;'T'
  3340  0A3E  3420               	retlw	32	;' '
  3341  0A3F  342B               	retlw	43	;'+'
  3342  0A40  3420               	retlw	32	;' '
  3343  0A41  3441               	retlw	65	;'A'
  3344  0A42  344C               	retlw	76	;'L'
  3345  0A43  3454               	retlw	84	;'T'
  3346  0A44  3420               	retlw	32	;' '
  3347  0A45  342B               	retlw	43	;'+'
  3348  0A46  3420               	retlw	32	;' '
  3349  0A47  3444               	retlw	68	;'D'
  3350  0A48  3445               	retlw	69	;'E'
  3351  0A49  344C               	retlw	76	;'L'
  3352  0A4A  3422               	retlw	34	;'"'
  3353  0A4B  340D               	retlw	13
  3354  0A4C  340A               	retlw	10
  3355  0A4D  3400               	retlw	0
  3356  0A4E                     STR_34:	
  3357  0A4E  344B               	retlw	75	;'K'
  3358  0A4F  3465               	retlw	101	;'e'
  3359  0A50  3479               	retlw	121	;'y'
  3360  0A51  3442               	retlw	66	;'B'
  3361  0A52  346F               	retlw	111	;'o'
  3362  0A53  3461               	retlw	97	;'a'
  3363  0A54  3472               	retlw	114	;'r'
  3364  0A55  3464               	retlw	100	;'d'
  3365  0A56  3420               	retlw	32	;' '
  3366  0A57  3442               	retlw	66	;'B'
  3367  0A58  3461               	retlw	97	;'a'
  3368  0A59  3475               	retlw	117	;'u'
  3369  0A5A  3464               	retlw	100	;'d'
  3370  0A5B  3420               	retlw	32	;' '
  3371  0A5C  3477               	retlw	119	;'w'
  3372  0A5D  3469               	retlw	105	;'i'
  3373  0A5E  346C               	retlw	108	;'l'
  3374  0A5F  346C               	retlw	108	;'l'
  3375  0A60  3420               	retlw	32	;' '
  3376  0A61  3462               	retlw	98	;'b'
  3377  0A62  3465               	retlw	101	;'e'
  3378  0A63  3420               	retlw	32	;' '
  3379  0A64  3473               	retlw	115	;'s'
  3380  0A65  3465               	retlw	101	;'e'
  3381  0A66  3474               	retlw	116	;'t'
  3382  0A67  3420               	retlw	32	;' '
  3383  0A68  3474               	retlw	116	;'t'
  3384  0A69  346F               	retlw	111	;'o'
  3385  0A6A  3420               	retlw	32	;' '
  3386  0A6B  3425               	retlw	37	;'%'
  3387  0A6C  346C               	retlw	108	;'l'
  3388  0A6D  3475               	retlw	117	;'u'
  3389  0A6E  3400               	retlw	0
  3390  0A6F                     STR_40:	
  3391  0A6F  344B               	retlw	75	;'K'
  3392  0A70  3465               	retlw	101	;'e'
  3393  0A71  3479               	retlw	121	;'y'
  3394  0A72  3442               	retlw	66	;'B'
  3395  0A73  346F               	retlw	111	;'o'
  3396  0A74  3461               	retlw	97	;'a'
  3397  0A75  3472               	retlw	114	;'r'
  3398  0A76  3464               	retlw	100	;'d'
  3399  0A77  3420               	retlw	32	;' '
  3400  0A78  3442               	retlw	66	;'B'
  3401  0A79  3461               	retlw	97	;'a'
  3402  0A7A  3475               	retlw	117	;'u'
  3403  0A7B  3464               	retlw	100	;'d'
  3404  0A7C  3420               	retlw	32	;' '
  3405  0A7D  344F               	retlw	79	;'O'
  3406  0A7E  3475               	retlw	117	;'u'
  3407  0A7F  3474               	retlw	116	;'t'
  3408  0A80  3420               	retlw	32	;' '
  3409  0A81  346F               	retlw	111	;'o'
  3410  0A82  3466               	retlw	102	;'f'
  3411  0A83  3420               	retlw	32	;' '
  3412  0A84  3452               	retlw	82	;'R'
  3413  0A85  3461               	retlw	97	;'a'
  3414  0A86  346E               	retlw	110	;'n'
  3415  0A87  3467               	retlw	103	;'g'
  3416  0A88  3465               	retlw	101	;'e'
  3417  0A89  340D               	retlw	13
  3418  0A8A  340A               	retlw	10
  3419  0A8B  3400               	retlw	0
  3420  0A8C                     STR_2:	
  3421  0A8C  3450               	retlw	80	;'P'
  3422  0A8D  3453               	retlw	83	;'S'
  3423  0A8E  342F               	retlw	47	;'/'
  3424  0A8F  3432               	retlw	50	;'2'
  3425  0A90  3420               	retlw	32	;' '
  3426  0A91  344B               	retlw	75	;'K'
  3427  0A92  3465               	retlw	101	;'e'
  3428  0A93  3479               	retlw	121	;'y'
  3429  0A94  3462               	retlw	98	;'b'
  3430  0A95  346F               	retlw	111	;'o'
  3431  0A96  3461               	retlw	97	;'a'
  3432  0A97  3472               	retlw	114	;'r'
  3433  0A98  3464               	retlw	100	;'d'
  3434  0A99  3420               	retlw	32	;' '
  3435  0A9A  3474               	retlw	116	;'t'
  3436  0A9B  346F               	retlw	111	;'o'
  3437  0A9C  3420               	retlw	32	;' '
  3438  0A9D  3452               	retlw	82	;'R'
  3439  0A9E  3453               	retlw	83	;'S'
  3440  0A9F  342D               	retlw	45	;'-'
  3441  0AA0  3432               	retlw	50	;'2'
  3442  0AA1  3433               	retlw	51	;'3'
  3443  0AA2  3432               	retlw	50	;'2'
  3444  0AA3  340D               	retlw	13
  3445  0AA4  340A               	retlw	10
  3446  0AA5  3400               	retlw	0
  3447  0AA6                     STR_23:	
  3448  0AA6  344B               	retlw	75	;'K'
  3449  0AA7  3465               	retlw	101	;'e'
  3450  0AA8  3479               	retlw	121	;'y'
  3451  0AA9  3442               	retlw	66	;'B'
  3452  0AAA  346F               	retlw	111	;'o'
  3453  0AAB  3461               	retlw	97	;'a'
  3454  0AAC  3472               	retlw	114	;'r'
  3455  0AAD  3464               	retlw	100	;'d'
  3456  0AAE  3420               	retlw	32	;' '
  3457  0AAF  3450               	retlw	80	;'P'
  3458  0AB0  3472               	retlw	114	;'r'
  3459  0AB1  346F               	retlw	111	;'o'
  3460  0AB2  3467               	retlw	103	;'g'
  3461  0AB3  3472               	retlw	114	;'r'
  3462  0AB4  3461               	retlw	97	;'a'
  3463  0AB5  346D               	retlw	109	;'m'
  3464  0AB6  3420               	retlw	32	;' '
  3465  0AB7  3446               	retlw	70	;'F'
  3466  0AB8  3461               	retlw	97	;'a'
  3467  0AB9  3469               	retlw	105	;'i'
  3468  0ABA  346C               	retlw	108	;'l'
  3469  0ABB  340D               	retlw	13
  3470  0ABC  340A               	retlw	10
  3471  0ABD  3400               	retlw	0
  3472  0ABE                     STR_18:	
  3473  0ABE  3420               	retlw	32	;' '
  3474  0ABF  3477               	retlw	119	;'w'
  3475  0AC0  3469               	retlw	105	;'i'
  3476  0AC1  3474               	retlw	116	;'t'
  3477  0AC2  3468               	retlw	104	;'h'
  3478  0AC3  3420               	retlw	32	;' '
  3479  0AC4  3445               	retlw	69	;'E'
  3480  0AC5  3476               	retlw	118	;'v'
  3481  0AC6  3465               	retlw	101	;'e'
  3482  0AC7  346E               	retlw	110	;'n'
  3483  0AC8  3420               	retlw	32	;' '
  3484  0AC9  3470               	retlw	112	;'p'
  3485  0ACA  3461               	retlw	97	;'a'
  3486  0ACB  3472               	retlw	114	;'r'
  3487  0ACC  3469               	retlw	105	;'i'
  3488  0ACD  3474               	retlw	116	;'t'
  3489  0ACE  3479               	retlw	121	;'y'
  3490  0ACF  3420               	retlw	32	;' '
  3491  0AD0  3462               	retlw	98	;'b'
  3492  0AD1  3469               	retlw	105	;'i'
  3493  0AD2  3474               	retlw	116	;'t'
  3494  0AD3  340D               	retlw	13
  3495  0AD4  340A               	retlw	10
  3496  0AD5  3400               	retlw	0
  3497  0AD6                     STR_6:	
  3498  0AD6  344E               	retlw	78	;'N'
  3499  0AD7  346F               	retlw	111	;'o'
  3500  0AD8  3420               	retlw	32	;' '
  3501  0AD9  344B               	retlw	75	;'K'
  3502  0ADA  3465               	retlw	101	;'e'
  3503  0ADB  3479               	retlw	121	;'y'
  3504  0ADC  3462               	retlw	98	;'b'
  3505  0ADD  346F               	retlw	111	;'o'
  3506  0ADE  3461               	retlw	97	;'a'
  3507  0ADF  3472               	retlw	114	;'r'
  3508  0AE0  3464               	retlw	100	;'d'
  3509  0AE1  3420               	retlw	32	;' '
  3510  0AE2  3463               	retlw	99	;'c'
  3511  0AE3  346F               	retlw	111	;'o'
  3512  0AE4  346E               	retlw	110	;'n'
  3513  0AE5  346E               	retlw	110	;'n'
  3514  0AE6  3465               	retlw	101	;'e'
  3515  0AE7  3463               	retlw	99	;'c'
  3516  0AE8  3474               	retlw	116	;'t'
  3517  0AE9  3465               	retlw	101	;'e'
  3518  0AEA  3464               	retlw	100	;'d'
  3519  0AEB  340D               	retlw	13
  3520  0AEC  340A               	retlw	10
  3521  0AED  3400               	retlw	0
  3522  0AEE                     STR_17:	
  3523  0AEE  3420               	retlw	32	;' '
  3524  0AEF  3477               	retlw	119	;'w'
  3525  0AF0  3469               	retlw	105	;'i'
  3526  0AF1  3474               	retlw	116	;'t'
  3527  0AF2  3468               	retlw	104	;'h'
  3528  0AF3  3420               	retlw	32	;' '
  3529  0AF4  344F               	retlw	79	;'O'
  3530  0AF5  3464               	retlw	100	;'d'
  3531  0AF6  3464               	retlw	100	;'d'
  3532  0AF7  3420               	retlw	32	;' '
  3533  0AF8  3470               	retlw	112	;'p'
  3534  0AF9  3461               	retlw	97	;'a'
  3535  0AFA  3472               	retlw	114	;'r'
  3536  0AFB  3469               	retlw	105	;'i'
  3537  0AFC  3474               	retlw	116	;'t'
  3538  0AFD  3479               	retlw	121	;'y'
  3539  0AFE  3420               	retlw	32	;' '
  3540  0AFF  3462               	retlw	98	;'b'
  3541  0B00  3469               	retlw	105	;'i'
  3542  0B01  3474               	retlw	116	;'t'
  3543  0B02  340D               	retlw	13
  3544  0B03  340A               	retlw	10
  3545  0B04  3400               	retlw	0
  3546  0B05                     STR_8:	
  3547  0B05  3449               	retlw	73	;'I'
  3548  0B06  346E               	retlw	110	;'n'
  3549  0B07  3469               	retlw	105	;'i'
  3550  0B08  3474               	retlw	116	;'t'
  3551  0B09  3469               	retlw	105	;'i'
  3552  0B0A  3461               	retlw	97	;'a'
  3553  0B0B  346C               	retlw	108	;'l'
  3554  0B0C  3469               	retlw	105	;'i'
  3555  0B0D  347A               	retlw	122	;'z'
  3556  0B0E  3461               	retlw	97	;'a'
  3557  0B0F  3474               	retlw	116	;'t'
  3558  0B10  3469               	retlw	105	;'i'
  3559  0B11  346F               	retlw	111	;'o'
  3560  0B12  346E               	retlw	110	;'n'
  3561  0B13  3420               	retlw	32	;' '
  3562  0B14  3446               	retlw	70	;'F'
  3563  0B15  3461               	retlw	97	;'a'
  3564  0B16  3469               	retlw	105	;'i'
  3565  0B17  346C               	retlw	108	;'l'
  3566  0B18  340D               	retlw	13
  3567  0B19  340A               	retlw	10
  3568  0B1A  3400               	retlw	0
  3569  0B1B                     STR_16:	
  3570  0B1B  344B               	retlw	75	;'K'
  3571  0B1C  3465               	retlw	101	;'e'
  3572  0B1D  3479               	retlw	121	;'y'
  3573  0B1E  3442               	retlw	66	;'B'
  3574  0B1F  346F               	retlw	111	;'o'
  3575  0B20  3461               	retlw	97	;'a'
  3576  0B21  3472               	retlw	114	;'r'
  3577  0B22  3464               	retlw	100	;'d'
  3578  0B23  3420               	retlw	32	;' '
  3579  0B24  3442               	retlw	66	;'B'
  3580  0B25  3461               	retlw	97	;'a'
  3581  0B26  3475               	retlw	117	;'u'
  3582  0B27  3464               	retlw	100	;'d'
  3583  0B28  3420               	retlw	32	;' '
  3584  0B29  3469               	retlw	105	;'i'
  3585  0B2A  3473               	retlw	115	;'s'
  3586  0B2B  3420               	retlw	32	;' '
  3587  0B2C  3425               	retlw	37	;'%'
  3588  0B2D  346C               	retlw	108	;'l'
  3589  0B2E  3475               	retlw	117	;'u'
  3590  0B2F  3400               	retlw	0
  3591  0B30                     STR_7:	
  3592  0B30  344B               	retlw	75	;'K'
  3593  0B31  3465               	retlw	101	;'e'
  3594  0B32  3479               	retlw	121	;'y'
  3595  0B33  3462               	retlw	98	;'b'
  3596  0B34  346F               	retlw	111	;'o'
  3597  0B35  3461               	retlw	97	;'a'
  3598  0B36  3472               	retlw	114	;'r'
  3599  0B37  3464               	retlw	100	;'d'
  3600  0B38  3420               	retlw	32	;' '
  3601  0B39  3443               	retlw	67	;'C'
  3602  0B3A  346F               	retlw	111	;'o'
  3603  0B3B  346E               	retlw	110	;'n'
  3604  0B3C  346E               	retlw	110	;'n'
  3605  0B3D  3465               	retlw	101	;'e'
  3606  0B3E  3463               	retlw	99	;'c'
  3607  0B3F  3474               	retlw	116	;'t'
  3608  0B40  3465               	retlw	101	;'e'
  3609  0B41  3464               	retlw	100	;'d'
  3610  0B42  340D               	retlw	13
  3611  0B43  340A               	retlw	10
  3612  0B44  3400               	retlw	0
  3613  0B45                     STR_11:	
  3614  0B45  3456               	retlw	86	;'V'
  3615  0B46  346F               	retlw	111	;'o'
  3616  0B47  346C               	retlw	108	;'l'
  3617  0B48  3474               	retlw	116	;'t'
  3618  0B49  3461               	retlw	97	;'a'
  3619  0B4A  3467               	retlw	103	;'g'
  3620  0B4B  3465               	retlw	101	;'e'
  3621  0B4C  3420               	retlw	32	;' '
  3622  0B4D  3474               	retlw	116	;'t'
  3623  0B4E  346F               	retlw	111	;'o'
  3624  0B4F  346F               	retlw	111	;'o'
  3625  0B50  3420               	retlw	32	;' '
  3626  0B51  3448               	retlw	72	;'H'
  3627  0B52  3469               	retlw	105	;'i'
  3628  0B53  3467               	retlw	103	;'g'
  3629  0B54  3468               	retlw	104	;'h'
  3630  0B55  3421               	retlw	33	;'!'
  3631  0B56  340D               	retlw	13
  3632  0B57  340A               	retlw	10
  3633  0B58  3400               	retlw	0
  3634  0B59                     STR_10:	
  3635  0B59  3456               	retlw	86	;'V'
  3636  0B5A  346F               	retlw	111	;'o'
  3637  0B5B  346C               	retlw	108	;'l'
  3638  0B5C  3474               	retlw	116	;'t'
  3639  0B5D  3461               	retlw	97	;'a'
  3640  0B5E  3467               	retlw	103	;'g'
  3641  0B5F  3465               	retlw	101	;'e'
  3642  0B60  3420               	retlw	32	;' '
  3643  0B61  3474               	retlw	116	;'t'
  3644  0B62  346F               	retlw	111	;'o'
  3645  0B63  346F               	retlw	111	;'o'
  3646  0B64  3420               	retlw	32	;' '
  3647  0B65  344C               	retlw	76	;'L'
  3648  0B66  346F               	retlw	111	;'o'
  3649  0B67  3477               	retlw	119	;'w'
  3650  0B68  3421               	retlw	33	;'!'
  3651  0B69  340D               	retlw	13
  3652  0B6A  340A               	retlw	10
  3653  0B6B  3400               	retlw	0
  3654  0B6C                     STR_3:	
  3655  0B6C  3446               	retlw	70	;'F'
  3656  0B6D  3469               	retlw	105	;'i'
  3657  0B6E  3472               	retlw	114	;'r'
  3658  0B6F  346D               	retlw	109	;'m'
  3659  0B70  3477               	retlw	119	;'w'
  3660  0B71  3461               	retlw	97	;'a'
  3661  0B72  3472               	retlw	114	;'r'
  3662  0B73  3465               	retlw	101	;'e'
  3663  0B74  3420               	retlw	32	;' '
  3664  0B75  3456               	retlw	86	;'V'
  3665  0B76  3465               	retlw	101	;'e'
  3666  0B77  3472               	retlw	114	;'r'
  3667  0B78  3473               	retlw	115	;'s'
  3668  0B79  3469               	retlw	105	;'i'
  3669  0B7A  346F               	retlw	111	;'o'
  3670  0B7B  346E               	retlw	110	;'n'
  3671  0B7C  343A               	retlw	58	;':'
  3672  0B7D  3420               	retlw	32	;' '
  3673  0B7E  3400               	retlw	0
  3674  0B7F                     STR_31:	
  3675  0B7F  3445               	retlw	69	;'E'
  3676  0B80  346E               	retlw	110	;'n'
  3677  0B81  3474               	retlw	116	;'t'
  3678  0B82  3465               	retlw	101	;'e'
  3679  0B83  3472               	retlw	114	;'r'
  3680  0B84  3420               	retlw	32	;' '
  3681  0B85  3442               	retlw	66	;'B'
  3682  0B86  3461               	retlw	97	;'a'
  3683  0B87  3475               	retlw	117	;'u'
  3684  0B88  3464               	retlw	100	;'d'
  3685  0B89  3420               	retlw	32	;' '
  3686  0B8A  3472               	retlw	114	;'r'
  3687  0B8B  3461               	retlw	97	;'a'
  3688  0B8C  3474               	retlw	116	;'t'
  3689  0B8D  3465               	retlw	101	;'e'
  3690  0B8E  340D               	retlw	13
  3691  0B8F  340A               	retlw	10
  3692  0B90  3400               	retlw	0
  3693  0B91                     STR_20:	
  3694  0B91  3420               	retlw	32	;' '
  3695  0B92  3477               	retlw	119	;'w'
  3696  0B93  3469               	retlw	105	;'i'
  3697  0B94  3474               	retlw	116	;'t'
  3698  0B95  3468               	retlw	104	;'h'
  3699  0B96  3420               	retlw	32	;' '
  3700  0B97  3453               	retlw	83	;'S'
  3701  0B98  3470               	retlw	112	;'p'
  3702  0B99  3461               	retlw	97	;'a'
  3703  0B9A  3463               	retlw	99	;'c'
  3704  0B9B  3465               	retlw	101	;'e'
  3705  0B9C  3420               	retlw	32	;' '
  3706  0B9D  3462               	retlw	98	;'b'
  3707  0B9E  3469               	retlw	105	;'i'
  3708  0B9F  3474               	retlw	116	;'t'
  3709  0BA0  340D               	retlw	13
  3710  0BA1  340A               	retlw	10
  3711  0BA2  3400               	retlw	0
  3712  0BA3                     STR_19:	
  3713  0BA3  3420               	retlw	32	;' '
  3714  0BA4  3477               	retlw	119	;'w'
  3715  0BA5  3469               	retlw	105	;'i'
  3716  0BA6  3474               	retlw	116	;'t'
  3717  0BA7  3468               	retlw	104	;'h'
  3718  0BA8  3420               	retlw	32	;' '
  3719  0BA9  344D               	retlw	77	;'M'
  3720  0BAA  3461               	retlw	97	;'a'
  3721  0BAB  3472               	retlw	114	;'r'
  3722  0BAC  346B               	retlw	107	;'k'
  3723  0BAD  3420               	retlw	32	;' '
  3724  0BAE  3462               	retlw	98	;'b'
  3725  0BAF  3469               	retlw	105	;'i'
  3726  0BB0  3474               	retlw	116	;'t'
  3727  0BB1  340D               	retlw	13
  3728  0BB2  340A               	retlw	10
  3729  0BB3  3400               	retlw	0
  3730  0BB4                     STR_9:	
  3731  0BB4  344B               	retlw	75	;'K'
  3732  0BB5  3465               	retlw	101	;'e'
  3733  0BB6  3479               	retlw	121	;'y'
  3734  0BB7  3462               	retlw	98	;'b'
  3735  0BB8  346F               	retlw	111	;'o'
  3736  0BB9  3461               	retlw	97	;'a'
  3737  0BBA  3472               	retlw	114	;'r'
  3738  0BBB  3464               	retlw	100	;'d'
  3739  0BBC  3420               	retlw	32	;' '
  3740  0BBD  3450               	retlw	80	;'P'
  3741  0BBE  3461               	retlw	97	;'a'
  3742  0BBF  3473               	retlw	115	;'s'
  3743  0BC0  3473               	retlw	115	;'s'
  3744  0BC1  3421               	retlw	33	;'!'
  3745  0BC2  340D               	retlw	13
  3746  0BC3  340A               	retlw	10
  3747  0BC4  3400               	retlw	0
  3748  0BC5                     __end_of__stringdata:	
  3749                           
  3750                           ; #config settings
  3751  0000                     
  3752                           	psect	cinit
  3753  00EA                     start_initialization:	
  3754  00EA                     __initialization:	
  3755                           
  3756                           ; Clear objects allocated to BANK0
  3757  00EA  01E6               	clrf	__pbssBANK0& (0+127)
  3758  00EB  01E7               	clrf	(__pbssBANK0+1)& (0+127)
  3759  00EC  01E8               	clrf	(__pbssBANK0+2)& (0+127)
  3760  00ED  01E9               	clrf	(__pbssBANK0+3)& (0+127)
  3761  00EE  01EA               	clrf	(__pbssBANK0+4)& (0+127)
  3762                           
  3763                           ; Clear objects allocated to BANK1
  3764  00EF  0021               	movlb	1	; select bank1
  3765  00F0  01E8               	clrf	__pbssBANK1& (0+127)
  3766  00F1  01E9               	clrf	(__pbssBANK1+1)& (0+127)
  3767  00F2  01EA               	clrf	(__pbssBANK1+2)& (0+127)
  3768                           
  3769                           ; Clear objects allocated to BANK2
  3770  00F3  305F               	movlw	low __pbssBANK2
  3771  00F4  0084               	movwf	4
  3772  00F5  3001               	movlw	high __pbssBANK2
  3773  00F6  0085               	movwf	5
  3774  00F7  300F               	movlw	15
  3775  00F8  3198  209E  3180   	fcall	clear_ram0
  3776                           
  3777                           ; Clear objects allocated to BANK3
  3778  00FB  30A0               	movlw	low __pbssBANK3
  3779  00FC  0084               	movwf	4
  3780  00FD  3001               	movlw	high __pbssBANK3
  3781  00FE  0085               	movwf	5
  3782  00FF  300F               	movlw	15
  3783  0100  3198  209E  3180   	fcall	clear_ram0
  3784                           
  3785                           ; Clear objects allocated to BANK4
  3786  0103  302E               	movlw	low __pbssBANK4
  3787  0104  0084               	movwf	4
  3788  0105  3002               	movlw	high __pbssBANK4
  3789  0106  0085               	movwf	5
  3790  0107  300C               	movlw	12
  3791  0108  3198  209E  3180   	fcall	clear_ram0
  3792                           
  3793                           ; Initialize objects allocated to BANK1
  3794  010B  3187  27FB  3180   	fcall	__pidataBANK1	;fetch initializer
  3795  010E  00EB               	movwf	__pdataBANK1& (0+127)
  3796                           
  3797                           ; Initialize objects allocated to BANK2
  3798  010F  0022               	movlb	2	; select bank2
  3799  0110  3187  27FC  3180   	fcall	__pidataBANK2	;fetch initializer
  3800  0113  00EE               	movwf	__pdataBANK2& (0+127)
  3801                           
  3802                           ; Initialize objects allocated to BANK4
  3803  0114  3017               	movlw	low __pidataBANK4
  3804  0115  0084               	movwf	4
  3805  0116  3099               	movlw	(high __pidataBANK4)| (0+128)
  3806  0117  0085               	movwf	5
  3807  0118  3020               	movlw	low __pdataBANK4
  3808  0119  0086               	movwf	6
  3809  011A  3002               	movlw	high __pdataBANK4
  3810  011B  0087               	movwf	7
  3811  011C  300E               	movlw	14
  3812  011D  3198  2098         	fcall	init_ram
  3813  011F                     end_of_initialization:	
  3814                           ;End of C runtime variable initialization code
  3815                           
  3816  011F                     __end_of__initialization:	
  3817  011F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  3818  0120  0020               	movlb	0
  3819  0121  318E  2E08         	ljmp	_main	;jump to C main() function
  3820                           
  3821                           	psect	bssBANK0
  3822  0066                     __pbssBANK0:	
  3823  0066                     _BaudTyped:	
  3824  0066                     	ds	4
  3825  006A                     _PS_2_bits:	
  3826  006A                     	ds	1
  3827                           
  3828                           	psect	bssBANK1
  3829  00E8                     __pbssBANK1:	
  3830  00E8                     _Alarm:	
  3831  00E8                     	ds	1
  3832  00E9                     _ECHO:	
  3833  00E9                     	ds	1
  3834  00EA                     _PARITY:	
  3835  00EA                     	ds	1
  3836                           
  3837                           	psect	dataBANK1
  3838  00EB                     __pdataBANK1:	
  3839  00EB                     _No_Keyboard:	
  3840  00EB                     	ds	1
  3841                           
  3842                           	psect	bssBANK2
  3843  015F                     __pbssBANK2:	
  3844  015F                     _BatteryVoltage:	
  3845  015F                     	ds	4
  3846  0163                     _BAUDMODE:	
  3847  0163                     	ds	1
  3848  0164                     _Caps_Lock_Key:	
  3849  0164                     	ds	1
  3850  0165                     _Caps_Lock_Key_old:	
  3851  0165                     	ds	1
  3852  0166                     _Delete:	
  3853  0166                     	ds	1
  3854  0167                     _LALT:	
  3855  0167                     	ds	1
  3856  0168                     _LControl:	
  3857  0168                     	ds	1
  3858  0169                     _Left_Shift_Key_old:	
  3859  0169                     	ds	1
  3860  016A                     _RControl:	
  3861  016A                     	ds	1
  3862  016B                     _Right_Shift_Key_old:	
  3863  016B                     	ds	1
  3864  016C                     _blinkdelay:	
  3865  016C                     	ds	1
  3866  016D                     _i:	
  3867  016D                     	ds	1
  3868                           
  3869                           	psect	dataBANK2
  3870  016E                     __pdataBANK2:	
  3871  016E                     _No_Keyboard_old:	
  3872  016E                     	ds	1
  3873                           
  3874                           	psect	bssBANK3
  3875  01A0                     __pbssBANK3:	
  3876  01A0                     _PS_2_Read_Data_First:	
  3877  01A0                     	ds	2
  3878  01A2                     _PS_2_Read_Data_Forth:	
  3879  01A2                     	ds	2
  3880  01A4                     _PS_2_Read_Data_Second:	
  3881  01A4                     	ds	2
  3882  01A6                     _PS_2_Read_Data_Third:	
  3883  01A6                     	ds	2
  3884  01A8                     _CapsCount:	
  3885  01A8                     	ds	1
  3886  01A9                     _Caps_Lock:	
  3887  01A9                     	ds	1
  3888  01AA                     _Left_Shift_Key:	
  3889  01AA                     	ds	1
  3890  01AB                     _ParityTyped:	
  3891  01AB                     	ds	1
  3892  01AC                     _RALT:	
  3893  01AC                     	ds	1
  3894  01AD                     _Right_Shift_Key:	
  3895  01AD                     	ds	1
  3896  01AE                     _Shift_Key:	
  3897  01AE                     	ds	1
  3898                           
  3899                           	psect	bssBANK4
  3900  022E                     __pbssBANK4:	
  3901  022E                     _PS_2_Read_Data_FirstTEMP:	
  3902  022E                     	ds	2
  3903  0230                     _PS_2_Read_Data_ForthTEMP:	
  3904  0230                     	ds	2
  3905  0232                     _PS_2_Read_Data_SecondTEMP:	
  3906  0232                     	ds	2
  3907  0234                     _PS_2_Read_Data_ThirdTEMP:	
  3908  0234                     	ds	2
  3909  0236                     _SinLEDtimer:	
  3910  0236                     	ds	2
  3911  0238                     _pwrLEDtoggle:	
  3912  0238                     	ds	2
  3913                           
  3914                           	psect	dataBANK4
  3915  0220                     __pdataBANK4:	
  3916  0220                     _BAUD:	
  3917  0220                     	ds	4
  3918  0224                     _Read_Timer:	
  3919  0224                     	ds	2
  3920  0226                     _MEM:	
  3921  0226                     	ds	4
  3922  022A                     _Version:	
  3923  022A                     	ds	4
  3924                           
  3925                           	psect	clrtext
  3926  189E                     clear_ram0:	
  3927                           ;	Called with FSR0 containing the base address, and
  3928                           ;	WREG with the size to clear
  3929                           
  3930  189E  0064               	clrwdt	;clear the watchdog before getting into this loop
  3931  189F                     clrloop0:	
  3932  189F  0180               	clrf	0	;clear RAM location pointed to by FSR
  3933  18A0  3101               	addfsr 0,1
  3934  18A1  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3935  18A2  289F               	goto	clrloop0	;have we reached the end yet?
  3936  18A3  3400               	retlw	0	;all done for this memory range, return
  3937                           
  3938                           	psect	inittext
  3939  1898                     init_ram:	
  3940  1898  00FE               	movwf	126
  3941  1899                     initloop:	
  3942  1899  0012               	moviw fsr0++
  3943  189A  001E               	movwi fsr1++
  3944  189B  0BFE               	decfsz	126,f
  3945  189C  2899               	goto	initloop
  3946  189D  3400               	retlw	0
  3947                           
  3948                           	psect	cstackBANK5
  3949  02A0                     __pcstackBANK5:	
  3950  02A0                     PS_2_Update@buf:	
  3951                           
  3952                           ; 60 bytes @ 0x0
  3953  02A0                     	ds	60
  3954  02DC                     _PS_2_Update$830:	
  3955                           
  3956                           ; 1 bytes @ 0x3C
  3957  02DC                     	ds	1
  3958  02DD                     _PS_2_Update$831:	
  3959                           
  3960                           ; 1 bytes @ 0x3D
  3961  02DD                     	ds	1
  3962  02DE                     _PS_2_Update$832:	
  3963                           
  3964                           ; 1 bytes @ 0x3E
  3965  02DE                     	ds	1
  3966  02DF                     _PS_2_Update$833:	
  3967                           
  3968                           ; 1 bytes @ 0x3F
  3969  02DF                     	ds	1
  3970  02E0                     PS_2_Update@temp:	
  3971                           
  3972                           ; 1 bytes @ 0x40
  3973  02E0                     	ds	1
  3974                           
  3975                           	psect	cstackBANK3
  3976  01AF                     __pcstackBANK3:	
  3977  01AF                     ??_PS_2_Update:	
  3978                           
  3979                           ; 0 bytes @ 0x0
  3980  01AF                     	ds	9
  3981                           
  3982                           	psect	cstackBANK2
  3983  0120                     __pcstackBANK2:	
  3984  0120                     SetBaud@buf:	
  3985                           
  3986                           ; 50 bytes @ 0x0
  3987  0120                     	ds	50
  3988  0152                     SetBaud@Baudtemp:	
  3989                           
  3990                           ; 4 bytes @ 0x32
  3991  0152                     	ds	4
  3992  0156                     SetBaud@Paritytemp:	
  3993                           
  3994                           ; 4 bytes @ 0x36
  3995  0156                     	ds	4
  3996  015A                     SetBaud@temp:	
  3997                           
  3998                           ; 4 bytes @ 0x3A
  3999  015A                     	ds	4
  4000  015E                     SetBaud@i:	
  4001                           
  4002                           ; 1 bytes @ 0x3E
  4003  015E                     	ds	1
  4004                           
  4005                           	psect	cstackBANK1
  4006  00A0                     __pcstackBANK1:	
  4007  00A0                     ReadVoltage@voltage:	
  4008  00A0                     WriteFlash_Sequential@TempBufH:	
  4009                           ; 4 bytes @ 0x0
  4010                           
  4011  00A0                     Init_System@buf:	
  4012                           ; 32 bytes @ 0x0
  4013                           
  4014                           
  4015                           ; 60 bytes @ 0x0
  4016  00A0                     	ds	4
  4017  00A4                     ReadVoltage@temp:	
  4018                           
  4019                           ; 2 bytes @ 0x4
  4020  00A4                     	ds	28
  4021  00C0                     WriteFlash_Sequential@TempBufL:	
  4022                           
  4023                           ; 32 bytes @ 0x20
  4024  00C0                     	ds	28
  4025  00DC                     Init_System@temp:	
  4026                           
  4027                           ; 4 bytes @ 0x3C
  4028  00DC                     	ds	4
  4029  00E0                     Init_System@Parity:	
  4030  00E0                     WriteFlash_Sequential@tempH:	
  4031                           ; 1 bytes @ 0x40
  4032                           
  4033                           
  4034                           ; 1 bytes @ 0x40
  4035  00E0                     	ds	1
  4036  00E1                     WriteFlash_Sequential@tempL:	
  4037  00E1                     Init_System@Baud:	
  4038                           ; 1 bytes @ 0x41
  4039                           
  4040                           
  4041                           ; 4 bytes @ 0x41
  4042  00E1                     	ds	1
  4043  00E2                     WriteFlash_Sequential@amountTemp:	
  4044                           
  4045                           ; 1 bytes @ 0x42
  4046  00E2                     	ds	1
  4047  00E3                     WriteFlash_Sequential@temp:	
  4048                           
  4049                           ; 2 bytes @ 0x43
  4050  00E3                     	ds	2
  4051  00E5                     WriteFlash_Sequential@spaces:	
  4052                           
  4053                           ; 1 bytes @ 0x45
  4054  00E5                     	ds	1
  4055  00E6                     WriteFlash_Sequential@i:	
  4056                           
  4057                           ; 1 bytes @ 0x46
  4058  00E6                     	ds	1
  4059  00E7                     main@i:	
  4060                           
  4061                           ; 1 bytes @ 0x47
  4062  00E7                     	ds	1
  4063                           
  4064                           	psect	cstackCOMMON
  4065  0070                     __pcstackCOMMON:	
  4066  0070                     ??_READ_CONFIG_PIN:	
  4067  0070                     ?_ConfigureOscillator:	
  4068                           ; 0 bytes @ 0x0
  4069                           
  4070  0070                     ?_InitApp:	
  4071                           ; 0 bytes @ 0x0
  4072                           
  4073  0070                     ?_Init_System:	
  4074                           ; 0 bytes @ 0x0
  4075                           
  4076  0070                     ?_PS_2_INIT:	
  4077                           ; 0 bytes @ 0x0
  4078                           
  4079  0070                     ?_PS_2_DISABLE_INTERRUPT:	
  4080                           ; 0 bytes @ 0x0
  4081                           
  4082  0070                     ?_PS_2_ENABLE_INTERRUPT:	
  4083                           ; 0 bytes @ 0x0
  4084                           
  4085  0070                     ?_PS_2_Update:	
  4086                           ; 0 bytes @ 0x0
  4087                           
  4088  0070                     ?_baudUSART:	
  4089                           ; 0 bytes @ 0x0
  4090                           
  4091  0070                     ?_Clock_TRIS:	
  4092                           ; 0 bytes @ 0x0
  4093                           
  4094  0070                     ?_Data_TRIS:	
  4095                           ; 0 bytes @ 0x0
  4096                           
  4097  0070                     ?_INIT_PS_2_INTERRUPT:	
  4098                           ; 0 bytes @ 0x0
  4099                           
  4100  0070                     ?_DisableInternalADC:	
  4101                           ; 0 bytes @ 0x0
  4102                           
  4103  0070                     ?_isr:	
  4104                           ; 0 bytes @ 0x0
  4105                           
  4106  0070                     ?_main:	
  4107                           ; 0 bytes @ 0x0
  4108                           
  4109  0070                     ?_CloseUSART:	
  4110                           ; 0 bytes @ 0x0
  4111                           
  4112  0070                     ?_UNLOCK:	
  4113                           ; 0 bytes @ 0x0
  4114                           
  4115  0070                     ?i1_delayUS:	
  4116                           ; 0 bytes @ 0x0
  4117                           
  4118  0070                     ??i1_ReadUSART:	
  4119                           ; 0 bytes @ 0x0
  4120                           
  4121  0070                     ??i1_READ_PS_2_PIN:	
  4122                           ; 0 bytes @ 0x0
  4123                           
  4124  0070                     ?_READ_PS_2_PIN:	
  4125                           ; 0 bytes @ 0x0
  4126                           
  4127  0070                     ?_ReadUSART:	
  4128                           ; 1 bytes @ 0x0
  4129                           
  4130  0070                     ?_READ_CONFIG_PIN:	
  4131                           ; 1 bytes @ 0x0
  4132                           
  4133  0070                     ?_Keyboard_Connected:	
  4134                           ; 1 bytes @ 0x0
  4135                           
  4136  0070                     ?_Init_PS_2_Send:	
  4137                           ; 1 bytes @ 0x0
  4138                           
  4139  0070                     ?_Decode_Scan_Code_Shift:	
  4140                           ; 1 bytes @ 0x0
  4141                           
  4142  0070                     ?_Send_PS2:	
  4143                           ; 1 bytes @ 0x0
  4144                           
  4145  0070                     ?_Decode_Scan_Code_FunctionE0:	
  4146                           ; 1 bytes @ 0x0
  4147                           
  4148  0070                     ?_Decode_Scan_Code:	
  4149                           ; 1 bytes @ 0x0
  4150                           
  4151  0070                     ?_Decode_Scan_Code_Function:	
  4152                           ; 1 bytes @ 0x0
  4153                           
  4154  0070                     ?_Reverse_Byte:	
  4155                           ; 1 bytes @ 0x0
  4156                           
  4157  0070                     ?_ISNUMBER:	
  4158                           ; 1 bytes @ 0x0
  4159                           
  4160  0070                     ?i1_CheckSum_byte:	
  4161                           ; 1 bytes @ 0x0
  4162                           
  4163  0070                     ?i1_ReadUSART:	
  4164                           ; 1 bytes @ 0x0
  4165                           
  4166  0070                     ?i1_READ_PS_2_PIN:	
  4167                           ; 1 bytes @ 0x0
  4168                           
  4169  0070                     i1READ_PS_2_PIN@DATA_CLK:	
  4170                           ; 1 bytes @ 0x0
  4171                           
  4172  0070                     i1CheckSum_byte@This:	
  4173                           ; 1 bytes @ 0x0
  4174                           
  4175  0070                     i1delayUS@US:	
  4176                           ; 2 bytes @ 0x0
  4177                           
  4178                           
  4179                           ; 4 bytes @ 0x0
  4180  0070                     	ds	1
  4181  0071                     i1ReadUSART@data:	
  4182                           
  4183                           ; 1 bytes @ 0x1
  4184  0071                     	ds	1
  4185  0072                     i1CheckSum_byte@Odd_Even:	
  4186                           
  4187                           ; 1 bytes @ 0x2
  4188  0072                     	ds	1
  4189  0073                     ??i1_CheckSum_byte:	
  4190                           
  4191                           ; 0 bytes @ 0x3
  4192  0073                     	ds	1
  4193  0074                     ??i1_delayUS:	
  4194  0074                     i1CheckSum_byte@ThisTemp:	
  4195                           ; 0 bytes @ 0x4
  4196                           
  4197                           
  4198                           ; 2 bytes @ 0x4
  4199  0074                     	ds	1
  4200  0075                     i1delayUS@i:	
  4201                           
  4202                           ; 4 bytes @ 0x5
  4203  0075                     	ds	1
  4204  0076                     i1CheckSum_byte@Parity:	
  4205                           
  4206                           ; 1 bytes @ 0x6
  4207  0076                     	ds	1
  4208  0077                     i1CheckSum_byte@i:	
  4209                           
  4210                           ; 1 bytes @ 0x7
  4211  0077                     	ds	1
  4212  0078                     ?i1_UARTchar:	
  4213  0078                     i1UARTchar@override:	
  4214                           ; 0 bytes @ 0x8
  4215                           
  4216                           
  4217                           ; 1 bytes @ 0x8
  4218  0078                     	ds	1
  4219  0079                     i1delayUS@j:	
  4220  0079                     i1UARTchar@NinethBit_override_data:	
  4221                           ; 1 bytes @ 0x9
  4222                           
  4223                           
  4224                           ; 1 bytes @ 0x9
  4225  0079                     	ds	1
  4226  007A                     ??i1_UARTchar:	
  4227  007A                     ?i1_UART_send_break_timed:	
  4228                           ; 0 bytes @ 0xA
  4229                           
  4230  007A                     i1UART_send_break_timed@US:	
  4231                           ; 0 bytes @ 0xA
  4232                           
  4233                           
  4234                           ; 2 bytes @ 0xA
  4235  007A                     	ds	2
  4236  007C                     ??i1_UART_send_break_timed:	
  4237                           
  4238                           ; 0 bytes @ 0xC
  4239  007C                     	ds	2
  4240                           
  4241                           	psect	cstackBANK0
  4242  0020                     __pcstackBANK0:	
  4243  0020                     i1UARTchar@data:	
  4244                           
  4245                           ; 1 bytes @ 0x0
  4246  0020                     	ds	1
  4247  0021                     ??_isr:	
  4248                           
  4249                           ; 0 bytes @ 0x1
  4250  0021                     	ds	2
  4251  0023                     isr@Rx_fault:	
  4252                           
  4253                           ; 1 bytes @ 0x3
  4254  0023                     	ds	1
  4255  0024                     isr@rx:	
  4256                           
  4257                           ; 1 bytes @ 0x4
  4258  0024                     	ds	1
  4259  0025                     ??_READ_PS_2_PIN:	
  4260  0025                     ??_ReadUSART:	
  4261                           ; 0 bytes @ 0x5
  4262                           
  4263  0025                     ??_ConfigureOscillator:	
  4264                           ; 0 bytes @ 0x5
  4265                           
  4266  0025                     ??_InitApp:	
  4267                           ; 0 bytes @ 0x5
  4268                           
  4269  0025                     ?_delayUS:	
  4270                           ; 0 bytes @ 0x5
  4271                           
  4272  0025                     ??_PS_2_DISABLE_INTERRUPT:	
  4273                           ; 0 bytes @ 0x5
  4274                           
  4275  0025                     ??_PS_2_ENABLE_INTERRUPT:	
  4276                           ; 0 bytes @ 0x5
  4277                           
  4278  0025                     ?_OpenUSART:	
  4279                           ; 0 bytes @ 0x5
  4280                           
  4281  0025                     ??_baudUSART:	
  4282                           ; 0 bytes @ 0x5
  4283                           
  4284  0025                     ??_Clock_TRIS:	
  4285                           ; 0 bytes @ 0x5
  4286                           
  4287  0025                     ??_Data_TRIS:	
  4288                           ; 0 bytes @ 0x5
  4289                           
  4290  0025                     ??_INIT_PS_2_INTERRUPT:	
  4291                           ; 0 bytes @ 0x5
  4292                           
  4293  0025                     ??_Decode_Scan_Code_Shift:	
  4294                           ; 0 bytes @ 0x5
  4295                           
  4296  0025                     ??_Decode_Scan_Code_FunctionE0:	
  4297                           ; 0 bytes @ 0x5
  4298                           
  4299  0025                     ??_Decode_Scan_Code:	
  4300                           ; 0 bytes @ 0x5
  4301                           
  4302  0025                     ??_Decode_Scan_Code_Function:	
  4303                           ; 0 bytes @ 0x5
  4304                           
  4305  0025                     ??_DisableInternalADC:	
  4306                           ; 0 bytes @ 0x5
  4307                           
  4308  0025                     ??_Reverse_Byte:	
  4309                           ; 0 bytes @ 0x5
  4310                           
  4311  0025                     ??_ISNUMBER:	
  4312                           ; 0 bytes @ 0x5
  4313                           
  4314  0025                     ??_CloseUSART:	
  4315                           ; 0 bytes @ 0x5
  4316                           
  4317  0025                     ??_UNLOCK:	
  4318                           ; 0 bytes @ 0x5
  4319                           
  4320  0025                     ?_BlockErase:	
  4321                           ; 0 bytes @ 0x5
  4322                           
  4323  0025                     ?___flge:	
  4324                           ; 0 bytes @ 0x5
  4325                           
  4326  0025                     ?_CheckSum_byte:	
  4327                           ; 1 bit 
  4328                           
  4329  0025                     ?_ReadFlash_2Byte:	
  4330                           ; 1 bytes @ 0x5
  4331                           
  4332  0025                     ?___flpack:	
  4333                           ; 2 bytes @ 0x5
  4334                           
  4335  0025                     ?___lmul:	
  4336                           ; 4 bytes @ 0x5
  4337                           
  4338  0025                     ?___lldiv:	
  4339                           ; 4 bytes @ 0x5
  4340                           
  4341  0025                     ISNUMBER@ascii:	
  4342                           ; 4 bytes @ 0x5
  4343                           
  4344  0025                     baudUSART@baudconfig:	
  4345                           ; 1 bytes @ 0x5
  4346                           
  4347  0025                     Clock_TRIS@direction:	
  4348                           ; 1 bytes @ 0x5
  4349                           
  4350  0025                     Data_TRIS@direction:	
  4351                           ; 1 bytes @ 0x5
  4352                           
  4353  0025                     INIT_PS_2_INTERRUPT@DATA_CLK:	
  4354                           ; 1 bytes @ 0x5
  4355                           
  4356  0025                     READ_PS_2_PIN@DATA_CLK:	
  4357                           ; 1 bytes @ 0x5
  4358                           
  4359  0025                     Decode_Scan_Code@Code:	
  4360                           ; 1 bytes @ 0x5
  4361                           
  4362  0025                     Decode_Scan_Code_Shift@Code:	
  4363                           ; 1 bytes @ 0x5
  4364                           
  4365  0025                     Decode_Scan_Code_FunctionE0@Code:	
  4366                           ; 1 bytes @ 0x5
  4367                           
  4368  0025                     Decode_Scan_Code_Function@Code:	
  4369                           ; 1 bytes @ 0x5
  4370                           
  4371  0025                     CheckSum_byte@This:	
  4372                           ; 1 bytes @ 0x5
  4373                           
  4374  0025                     OpenUSART@spbrg:	
  4375                           ; 2 bytes @ 0x5
  4376                           
  4377  0025                     ReadFlash_2Byte@row:	
  4378                           ; 2 bytes @ 0x5
  4379                           
  4380  0025                     BlockErase@row:	
  4381                           ; 2 bytes @ 0x5
  4382                           
  4383  0025                     delayUS@US:	
  4384                           ; 2 bytes @ 0x5
  4385                           
  4386  0025                     ___lmul@multiplier:	
  4387                           ; 4 bytes @ 0x5
  4388                           
  4389  0025                     ___flpack@arg:	
  4390                           ; 4 bytes @ 0x5
  4391                           
  4392  0025                     ___flge@ff1:	
  4393                           ; 4 bytes @ 0x5
  4394                           
  4395  0025                     ___lldiv@divisor:	
  4396                           ; 4 bytes @ 0x5
  4397                           
  4398                           
  4399                           ; 4 bytes @ 0x5
  4400  0025                     	ds	1
  4401  0026                     ??_PS_2_INIT:	
  4402  0026                     ReadUSART@data:	
  4403                           ; 0 bytes @ 0x6
  4404                           
  4405  0026                     PS_2_DISABLE_INTERRUPT@DATA_CLK:	
  4406                           ; 1 bytes @ 0x6
  4407                           
  4408  0026                     PS_2_ENABLE_INTERRUPT@DATA_CLK:	
  4409                           ; 1 bytes @ 0x6
  4410                           
  4411                           
  4412                           ; 1 bytes @ 0x6
  4413  0026                     	ds	1
  4414  0027                     ??_OpenUSART:	
  4415  0027                     ??_BlockErase:	
  4416                           ; 0 bytes @ 0x7
  4417                           
  4418  0027                     CheckSum_byte@Odd_Even:	
  4419                           ; 0 bytes @ 0x7
  4420                           
  4421  0027                     Reverse_Byte@temp:	
  4422                           ; 1 bytes @ 0x7
  4423                           
  4424  0027                     OpenUSART@config:	
  4425                           ; 1 bytes @ 0x7
  4426                           
  4427  0027                     ReadFlash_2Byte@column:	
  4428                           ; 1 bytes @ 0x7
  4429                           
  4430                           
  4431                           ; 1 bytes @ 0x7
  4432  0027                     	ds	1
  4433  0028                     ??_CheckSum_byte:	
  4434  0028                     ??_ReadFlash_2Byte:	
  4435                           ; 0 bytes @ 0x8
  4436                           
  4437  0028                     Reverse_Byte@This:	
  4438                           ; 0 bytes @ 0x8
  4439                           
  4440                           
  4441                           ; 1 bytes @ 0x8
  4442  0028                     	ds	1
  4443  0029                     ??_delayUS:	
  4444  0029                     ___flpack@exp:	
  4445                           ; 0 bytes @ 0x9
  4446                           
  4447  0029                     CheckSum_byte@ThisTemp:	
  4448                           ; 1 bytes @ 0x9
  4449                           
  4450  0029                     ___lmul@multiplicand:	
  4451                           ; 2 bytes @ 0x9
  4452                           
  4453  0029                     ___flge@ff2:	
  4454                           ; 4 bytes @ 0x9
  4455                           
  4456  0029                     ___lldiv@dividend:	
  4457                           ; 4 bytes @ 0x9
  4458                           
  4459                           
  4460                           ; 4 bytes @ 0x9
  4461  0029                     	ds	1
  4462  002A                     ?_ReadFlash_4Byte:	
  4463  002A                     ___flpack@sign:	
  4464                           ; 4 bytes @ 0xA
  4465                           
  4466  002A                     ReadFlash_4Byte@row:	
  4467                           ; 1 bytes @ 0xA
  4468                           
  4469  002A                     delayUS@i:	
  4470                           ; 2 bytes @ 0xA
  4471                           
  4472                           
  4473                           ; 4 bytes @ 0xA
  4474  002A                     	ds	1
  4475  002B                     ??___flpack:	
  4476  002B                     CheckSum_byte@Parity:	
  4477                           ; 0 bytes @ 0xB
  4478                           
  4479                           
  4480                           ; 1 bytes @ 0xB
  4481  002B                     	ds	1
  4482  002C                     CheckSum_byte@i:	
  4483  002C                     ReadFlash_4Byte@column:	
  4484                           ; 1 bytes @ 0xC
  4485                           
  4486                           
  4487                           ; 1 bytes @ 0xC
  4488  002C                     	ds	1
  4489  002D                     ?_UARTchar:	
  4490  002D                     ??___lmul:	
  4491                           ; 0 bytes @ 0xD
  4492                           
  4493  002D                     ??___flge:	
  4494                           ; 0 bytes @ 0xD
  4495                           
  4496  002D                     ??___lldiv:	
  4497                           ; 0 bytes @ 0xD
  4498                           
  4499  002D                     UARTchar@override:	
  4500                           ; 0 bytes @ 0xD
  4501                           
  4502  002D                     ___lmul@product:	
  4503                           ; 1 bytes @ 0xD
  4504                           
  4505                           
  4506                           ; 4 bytes @ 0xD
  4507  002D                     	ds	1
  4508  002E                     ??_ReadFlash_4Byte:	
  4509  002E                     delayUS@j:	
  4510                           ; 0 bytes @ 0xE
  4511                           
  4512  002E                     UARTchar@NinethBit_override_data:	
  4513                           ; 1 bytes @ 0xE
  4514                           
  4515  002E                     ___lldiv@quotient:	
  4516                           ; 1 bytes @ 0xE
  4517                           
  4518                           
  4519                           ; 4 bytes @ 0xE
  4520  002E                     	ds	1
  4521  002F                     ?_UART_send_break_timed:	
  4522  002F                     ??_UARTchar:	
  4523                           ; 0 bytes @ 0xF
  4524                           
  4525  002F                     ??_Send_PS2:	
  4526                           ; 0 bytes @ 0xF
  4527                           
  4528  002F                     ?_WriteFlash_Sequential:	
  4529                           ; 0 bytes @ 0xF
  4530                           
  4531  002F                     ?_InternalADC_Read:	
  4532                           ; 0 bytes @ 0xF
  4533                           
  4534  002F                     ?___lwtofl:	
  4535                           ; 2 bytes @ 0xF
  4536                           
  4537  002F                     UART_send_break_timed@US:	
  4538                           ; 4 bytes @ 0xF
  4539                           
  4540  002F                     WriteFlash_Sequential@row:	
  4541                           ; 2 bytes @ 0xF
  4542                           
  4543  002F                     ___lwtofl@c:	
  4544                           ; 2 bytes @ 0xF
  4545                           
  4546                           
  4547                           ; 2 bytes @ 0xF
  4548  002F                     	ds	2
  4549  0031                     ??_UART_send_break_timed:	
  4550  0031                     ??_InternalADC_Read:	
  4551                           ; 0 bytes @ 0x11
  4552                           
  4553  0031                     WriteFlash_Sequential@buffer:	
  4554                           ; 0 bytes @ 0x11
  4555                           
  4556                           
  4557                           ; 1 bytes @ 0x11
  4558  0031                     	ds	1
  4559  0032                     WriteFlash_Sequential@amount:	
  4560  0032                     ___lldiv@counter:	
  4561                           ; 1 bytes @ 0x12
  4562                           
  4563                           
  4564                           ; 1 bytes @ 0x12
  4565  0032                     	ds	1
  4566  0033                     ?_InitUART:	
  4567  0033                     ??_WriteFlash_Sequential:	
  4568                           ; 0 bytes @ 0x13
  4569                           
  4570  0033                     ??___lwtofl:	
  4571                           ; 0 bytes @ 0x13
  4572                           
  4573  0033                     ?___llmod:	
  4574                           ; 0 bytes @ 0x13
  4575                           
  4576  0033                     UARTchar@data:	
  4577                           ; 4 bytes @ 0x13
  4578                           
  4579  0033                     Send_PS2@oddparity:	
  4580                           ; 1 bytes @ 0x13
  4581                           
  4582  0033                     InternalADC_Read@channel:	
  4583                           ; 1 bytes @ 0x13
  4584                           
  4585  0033                     InitUART@Baud:	
  4586                           ; 1 bytes @ 0x13
  4587                           
  4588  0033                     ReadFlash_4Byte@temp:	
  4589                           ; 4 bytes @ 0x13
  4590                           
  4591  0033                     ___llmod@divisor:	
  4592                           ; 4 bytes @ 0x13
  4593                           
  4594                           
  4595                           ; 4 bytes @ 0x13
  4596  0033                     	ds	1
  4597  0034                     ?_UARTstringWAIT:	
  4598  0034                     ?___fldiv:	
  4599                           ; 0 bytes @ 0x14
  4600                           
  4601  0034                     Send_PS2@command:	
  4602                           ; 4 bytes @ 0x14
  4603                           
  4604  0034                     UARTstringWAIT@data:	
  4605                           ; 1 bytes @ 0x14
  4606                           
  4607  0034                     ___fldiv@f2:	
  4608                           ; 2 bytes @ 0x14
  4609                           
  4610                           
  4611                           ; 4 bytes @ 0x14
  4612  0034                     	ds	1
  4613  0035                     Send_PS2@i:	
  4614                           
  4615                           ; 1 bytes @ 0x15
  4616  0035                     	ds	1
  4617  0036                     ??_UARTstringWAIT:	
  4618  0036                     ?_WriteBaud:	
  4619                           ; 0 bytes @ 0x16
  4620                           
  4621  0036                     Send_PS2@timeout:	
  4622                           ; 0 bytes @ 0x16
  4623                           
  4624  0036                     WriteBaud@row:	
  4625                           ; 2 bytes @ 0x16
  4626                           
  4627                           
  4628                           ; 2 bytes @ 0x16
  4629  0036                     	ds	1
  4630  0037                     ?_ReadBaud:	
  4631  0037                     InitUART@parity:	
  4632                           ; 4 bytes @ 0x17
  4633                           
  4634  0037                     ReadBaud@row:	
  4635                           ; 1 bytes @ 0x17
  4636                           
  4637  0037                     ___llmod@dividend:	
  4638                           ; 2 bytes @ 0x17
  4639                           
  4640                           
  4641                           ; 4 bytes @ 0x17
  4642  0037                     	ds	1
  4643  0038                     ??_Init_PS_2_Send:	
  4644  0038                     ??_InitUART:	
  4645                           ; 0 bytes @ 0x18
  4646                           
  4647  0038                     WriteBaud@Baud:	
  4648                           ; 0 bytes @ 0x18
  4649                           
  4650  0038                     ___fldiv@f1:	
  4651                           ; 4 bytes @ 0x18
  4652                           
  4653                           
  4654                           ; 4 bytes @ 0x18
  4655  0038                     	ds	1
  4656  0039                     ReadBaud@column:	
  4657                           
  4658                           ; 1 bytes @ 0x19
  4659  0039                     	ds	2
  4660  003B                     ??_ReadBaud:	
  4661  003B                     ??___llmod:	
  4662                           ; 0 bytes @ 0x1B
  4663                           
  4664                           
  4665                           ; 0 bytes @ 0x1B
  4666  003B                     	ds	1
  4667  003C                     ??___fldiv:	
  4668  003C                     WriteBaud@Parity:	
  4669                           ; 0 bytes @ 0x1C
  4670                           
  4671  003C                     ___llmod@counter:	
  4672                           ; 1 bytes @ 0x1C
  4673                           
  4674                           
  4675                           ; 1 bytes @ 0x1C
  4676  003C                     	ds	1
  4677  003D                     ??_WriteBaud:	
  4678  003D                     ?_sprintf:	
  4679                           ; 0 bytes @ 0x1D
  4680                           
  4681  003D                     sprintf@sp:	
  4682                           ; 2 bytes @ 0x1D
  4683                           
  4684                           
  4685                           ; 2 bytes @ 0x1D
  4686  003D                     	ds	2
  4687  003F                     sprintf@f:	
  4688                           
  4689                           ; 2 bytes @ 0x1F
  4690  003F                     	ds	1
  4691  0040                     InitUART@spbrg:	
  4692                           
  4693                           ; 2 bytes @ 0x20
  4694  0040                     	ds	1
  4695  0041                     ___fldiv@f3:	
  4696                           
  4697                           ; 4 bytes @ 0x21
  4698  0041                     	ds	1
  4699  0042                     InitUART@baudconfig:	
  4700                           
  4701                           ; 1 bytes @ 0x22
  4702  0042                     	ds	1
  4703  0043                     InitUART@config:	
  4704  0043                     ReadBaud@temp:	
  4705                           ; 1 bytes @ 0x23
  4706                           
  4707                           
  4708                           ; 4 bytes @ 0x23
  4709  0043                     	ds	1
  4710  0044                     InitUART@temp:	
  4711                           
  4712                           ; 4 bytes @ 0x24
  4713  0044                     	ds	1
  4714  0045                     ??_sprintf:	
  4715  0045                     ___fldiv@cntr:	
  4716                           ; 0 bytes @ 0x25
  4717                           
  4718  0045                     WriteBaud@temp:	
  4719                           ; 1 bytes @ 0x25
  4720                           
  4721                           
  4722                           ; 4 bytes @ 0x25
  4723  0045                     	ds	1
  4724  0046                     ___fldiv@exp:	
  4725                           
  4726                           ; 1 bytes @ 0x26
  4727  0046                     	ds	1
  4728  0047                     ___fldiv@sign:	
  4729                           
  4730                           ; 1 bytes @ 0x27
  4731  0047                     	ds	1
  4732  0048                     ?___flmul:	
  4733  0048                     ___flmul@f1:	
  4734                           ; 4 bytes @ 0x28
  4735                           
  4736                           
  4737                           ; 4 bytes @ 0x28
  4738  0048                     	ds	3
  4739  004B                     sprintf@flag:	
  4740                           
  4741                           ; 1 bytes @ 0x2B
  4742  004B                     	ds	1
  4743  004C                     sprintf@prec:	
  4744  004C                     ___flmul@f2:	
  4745                           ; 2 bytes @ 0x2C
  4746                           
  4747                           
  4748                           ; 4 bytes @ 0x2C
  4749  004C                     	ds	2
  4750  004E                     sprintf@_val:	
  4751                           
  4752                           ; 4 bytes @ 0x2E
  4753  004E                     	ds	2
  4754  0050                     ??___flmul:	
  4755                           
  4756                           ; 0 bytes @ 0x30
  4757  0050                     	ds	2
  4758  0052                     sprintf@ap:	
  4759                           
  4760                           ; 1 bytes @ 0x32
  4761  0052                     	ds	1
  4762  0053                     sprintf@c:	
  4763                           
  4764                           ; 1 bytes @ 0x33
  4765  0053                     	ds	1
  4766  0054                     ??_Init_System:	
  4767  0054                     ?_SetBaud:	
  4768                           ; 0 bytes @ 0x34
  4769                           
  4770  0054                     SetBaud@Baud:	
  4771                           ; 0 bytes @ 0x34
  4772                           
  4773                           
  4774                           ; 4 bytes @ 0x34
  4775  0054                     	ds	1
  4776  0055                     ___flmul@exp:	
  4777                           
  4778                           ; 1 bytes @ 0x35
  4779  0055                     	ds	1
  4780  0056                     ___flmul@f3_as_product:	
  4781                           
  4782                           ; 4 bytes @ 0x36
  4783  0056                     	ds	2
  4784  0058                     SetBaud@Parity:	
  4785                           
  4786                           ; 1 bytes @ 0x38
  4787  0058                     	ds	1
  4788  0059                     ??_SetBaud:	
  4789                           
  4790                           ; 0 bytes @ 0x39
  4791  0059                     	ds	1
  4792  005A                     ___flmul@cntr:	
  4793                           
  4794                           ; 1 bytes @ 0x3A
  4795  005A                     	ds	1
  4796  005B                     ___flmul@sign:	
  4797                           
  4798                           ; 1 bytes @ 0x3B
  4799  005B                     	ds	1
  4800  005C                     ?_ReadVoltage:	
  4801                           
  4802                           ; 4 bytes @ 0x3C
  4803  005C                     	ds	4
  4804  0060                     ??_ReadVoltage:	
  4805                           
  4806                           ; 0 bytes @ 0x40
  4807  0060                     	ds	1
  4808  0061                     ??_Keyboard_Connected:	
  4809  0061                     Keyboard_Connected@i:	
  4810                           ; 0 bytes @ 0x41
  4811                           
  4812                           
  4813                           ; 4 bytes @ 0x41
  4814  0061                     	ds	4
  4815  0065                     ??_main:	
  4816                           
  4817                           ; 0 bytes @ 0x45
  4818  0065                     	ds	1
  4819                           
  4820                           	psect	maintext
  4821  0E08                     __pmaintext:	
  4822 ;;
  4823 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  4824 ;;
  4825 ;; *************** function _main *****************
  4826 ;; Defined at:
  4827 ;;		line 109 in file "main.c"
  4828 ;; Parameters:    Size  Location     Type
  4829 ;;		None
  4830 ;; Auto vars:     Size  Location     Type
  4831 ;;  i               1   71[BANK1 ] unsigned char 
  4832 ;; Return value:  Size  Location     Type
  4833 ;;		None               void
  4834 ;; Registers used:
  4835 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4836 ;; Tracked objects:
  4837 ;;		On entry : 17F/0
  4838 ;;		On exit  : 0/0
  4839 ;;		Unchanged: 0/0
  4840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4842 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4843 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4844 ;;      Totals:         0       1       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4845 ;;Total ram usage:        2 bytes
  4846 ;; Hardware stack levels required when called:   10
  4847 ;; This function calls:
  4848 ;;		_ConfigureOscillator
  4849 ;;		_InitApp
  4850 ;;		_Init_PS_2_Send
  4851 ;;		_Init_System
  4852 ;;		_Keyboard_Connected
  4853 ;;		_PS_2_DISABLE_INTERRUPT
  4854 ;;		_PS_2_ENABLE_INTERRUPT
  4855 ;;		_PS_2_INIT
  4856 ;;		_PS_2_Update
  4857 ;;		_ReadVoltage
  4858 ;;		_UARTstringWAIT
  4859 ;;		___flge
  4860 ;;		_delayUS
  4861 ;; This function is called by:
  4862 ;;		Startup code after reset
  4863 ;; This function uses a non-reentrant model
  4864 ;;
  4865                           
  4866                           
  4867                           ;psect for function _main
  4868  0E08                     _main:	
  4869                           
  4870                           ;main.c: 111: unsigned char i=0;
  4871                           
  4872                           ;incstack = 0
  4873                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4874  0E08  0021               	movlb	1	; select bank1
  4875  0E09  01E7               	clrf	main@i^(0+128)
  4876                           
  4877                           ;main.c: 113: ConfigureOscillator();
  4878  0E0A  3199  2146  318E   	fcall	_ConfigureOscillator
  4879                           
  4880                           ;main.c: 114: InitApp();
  4881  0E0D  3199  21CB  318E   	fcall	_InitApp
  4882                           
  4883                           ;main.c: 115: Init_System();
  4884  0E10  3195  2593  318E   	fcall	_Init_System
  4885                           
  4886                           ;main.c: 116: PS_2_INIT();
  4887  0E13  3198  20EF  318E   	fcall	_PS_2_INIT
  4888                           
  4889                           ;main.c: 119: for(i =0;i<10;i++)
  4890  0E16  0021               	movlb	1	; select bank1
  4891  0E17  01E7               	clrf	main@i^(0+128)
  4892  0E18  300A               	movlw	10
  4893  0E19  0267               	subwf	main@i^(0+128),w
  4894  0E1A  1803               	btfsc	3,0
  4895  0E1B  2E46               	goto	l7368
  4896  0E1C                     l167:	
  4897                           
  4898                           ;main.c: 120: {
  4899                           ;main.c: 121: LATC |= 0b00010000;
  4900  0E1C  0022               	movlb	2	; select bank2
  4901  0E1D  160E               	bsf	14,4	;volatile
  4902                           
  4903                           ;main.c: 122: delayUS(10000);
  4904  0E1E  3000               	movlw	0
  4905  0E1F  0020               	movlb	0	; select bank0
  4906  0E20  00A8               	movwf	delayUS@US+3
  4907  0E21  3000               	movlw	0
  4908  0E22  00A7               	movwf	delayUS@US+2
  4909  0E23  3027               	movlw	39
  4910  0E24  00A6               	movwf	delayUS@US+1
  4911  0E25  3010               	movlw	16
  4912  0E26  00A5               	movwf	delayUS@US
  4913  0E27  3190  2002  318E   	fcall	_delayUS
  4914                           
  4915                           ;main.c: 123: LATC &= ~0b00010000;
  4916  0E2A  30EF               	movlw	239
  4917  0E2B  0020               	movlb	0	; select bank0
  4918  0E2C  00E5               	movwf	??_main
  4919  0E2D  0865               	movf	??_main,w
  4920  0E2E  0022               	movlb	2	; select bank2
  4921  0E2F  058E               	andwf	14,f	;volatile
  4922                           
  4923                           ;main.c: 124: delayUS(10000);
  4924  0E30  3000               	movlw	0
  4925  0E31  0020               	movlb	0	; select bank0
  4926  0E32  00A8               	movwf	delayUS@US+3
  4927  0E33  3000               	movlw	0
  4928  0E34  00A7               	movwf	delayUS@US+2
  4929  0E35  3027               	movlw	39
  4930  0E36  00A6               	movwf	delayUS@US+1
  4931  0E37  3010               	movlw	16
  4932  0E38  00A5               	movwf	delayUS@US
  4933  0E39  3190  2002  318E   	fcall	_delayUS
  4934  0E3C  3001               	movlw	1
  4935  0E3D  0020               	movlb	0	; select bank0
  4936  0E3E  00E5               	movwf	??_main
  4937  0E3F  0865               	movf	??_main,w
  4938  0E40  0021               	movlb	1	; select bank1
  4939  0E41  07E7               	addwf	main@i^(0+128),f
  4940  0E42  300A               	movlw	10
  4941  0E43  0267               	subwf	main@i^(0+128),w
  4942  0E44  1C03               	skipc
  4943  0E45  2E1C               	goto	l167
  4944  0E46                     l7368:	
  4945                           
  4946                           ;main.c: 125: }
  4947                           ;main.c: 127: PS_2_DISABLE_INTERRUPT(0b00100000);
  4948  0E46  3020               	movlw	32
  4949  0E47  318B  23C5  318E   	fcall	_PS_2_DISABLE_INTERRUPT
  4950                           
  4951                           ;main.c: 129: UARTstringWAIT("\r\n");
  4952  0E4A  3056               	movlw	low ((STR_11+17)| (0+32768))
  4953  0E4B  0020               	movlb	0	; select bank0
  4954  0E4C  00B4               	movwf	UARTstringWAIT@data
  4955  0E4D  308B               	movlw	high ((STR_11+17)| (0+32768))
  4956  0E4E  00B5               	movwf	UARTstringWAIT@data+1
  4957  0E4F  319B  2362  318E   	fcall	_UARTstringWAIT
  4958                           
  4959                           ;main.c: 130: delayUS(10000);
  4960  0E52  3000               	movlw	0
  4961  0E53  0020               	movlb	0	; select bank0
  4962  0E54  00A8               	movwf	delayUS@US+3
  4963  0E55  3000               	movlw	0
  4964  0E56  00A7               	movwf	delayUS@US+2
  4965  0E57  3027               	movlw	39
  4966  0E58  00A6               	movwf	delayUS@US+1
  4967  0E59  3010               	movlw	16
  4968  0E5A  00A5               	movwf	delayUS@US
  4969  0E5B  3190  2002  318E   	fcall	_delayUS
  4970                           
  4971                           ;main.c: 131: UARTstringWAIT("PS/2 Keyboard to RS-232\r\n");
  4972  0E5E  308C               	movlw	low (STR_2| (0+32768))
  4973  0E5F  0020               	movlb	0	; select bank0
  4974  0E60  00B4               	movwf	UARTstringWAIT@data
  4975  0E61  308A               	movlw	high (STR_2| (0+32768))
  4976  0E62  00B5               	movwf	UARTstringWAIT@data+1
  4977  0E63  319B  2362  318E   	fcall	_UARTstringWAIT
  4978                           
  4979                           ;main.c: 132: delayUS(5000);
  4980  0E66  3000               	movlw	0
  4981  0E67  0020               	movlb	0	; select bank0
  4982  0E68  00A8               	movwf	delayUS@US+3
  4983  0E69  3000               	movlw	0
  4984  0E6A  00A7               	movwf	delayUS@US+2
  4985  0E6B  3013               	movlw	19
  4986  0E6C  00A6               	movwf	delayUS@US+1
  4987  0E6D  3088               	movlw	136
  4988  0E6E  00A5               	movwf	delayUS@US
  4989  0E6F  3190  2002  318E   	fcall	_delayUS
  4990                           
  4991                           ;main.c: 133: UARTstringWAIT("Firmware Version: ");
  4992  0E72  306C               	movlw	low (STR_3| (0+32768))
  4993  0E73  0020               	movlb	0	; select bank0
  4994  0E74  00B4               	movwf	UARTstringWAIT@data
  4995  0E75  308B               	movlw	high (STR_3| (0+32768))
  4996  0E76  00B5               	movwf	UARTstringWAIT@data+1
  4997  0E77  319B  2362  318E   	fcall	_UARTstringWAIT
  4998                           
  4999                           ;main.c: 134: UARTstringWAIT(Version);
  5000  0E7A  302A               	movlw	low _Version
  5001  0E7B  0020               	movlb	0	; select bank0
  5002  0E7C  00B4               	movwf	UARTstringWAIT@data
  5003  0E7D  3002               	movlw	high _Version
  5004  0E7E  00B5               	movwf	UARTstringWAIT@data+1
  5005  0E7F  319B  2362  318E   	fcall	_UARTstringWAIT
  5006                           
  5007                           ;main.c: 135: UARTstringWAIT("\r\n");
  5008  0E82  3056               	movlw	low ((STR_11+17)| (0+32768))
  5009  0E83  0020               	movlb	0	; select bank0
  5010  0E84  00B4               	movwf	UARTstringWAIT@data
  5011  0E85  308B               	movlw	high ((STR_11+17)| (0+32768))
  5012  0E86  00B5               	movwf	UARTstringWAIT@data+1
  5013  0E87  319B  2362  318E   	fcall	_UARTstringWAIT
  5014                           
  5015                           ;main.c: 136: delayUS(5000);
  5016  0E8A  3000               	movlw	0
  5017  0E8B  0020               	movlb	0	; select bank0
  5018  0E8C  00A8               	movwf	delayUS@US+3
  5019  0E8D  3000               	movlw	0
  5020  0E8E  00A7               	movwf	delayUS@US+2
  5021  0E8F  3013               	movlw	19
  5022  0E90  00A6               	movwf	delayUS@US+1
  5023  0E91  3088               	movlw	136
  5024  0E92  00A5               	movwf	delayUS@US
  5025  0E93  3190  2002  318E   	fcall	_delayUS
  5026                           
  5027                           ;main.c: 137: UARTstringWAIT("To Change BAUD hit \"CNT + ALT + DEL\"\r\n");
  5028  0E96  3027               	movlw	low (STR_5| (0+32768))
  5029  0E97  0020               	movlb	0	; select bank0
  5030  0E98  00B4               	movwf	UARTstringWAIT@data
  5031  0E99  308A               	movlw	high (STR_5| (0+32768))
  5032  0E9A  00B5               	movwf	UARTstringWAIT@data+1
  5033  0E9B  319B  2362  318E   	fcall	_UARTstringWAIT
  5034                           
  5035                           ;main.c: 138: delayUS(10000);
  5036  0E9E  3000               	movlw	0
  5037  0E9F  0020               	movlb	0	; select bank0
  5038  0EA0  00A8               	movwf	delayUS@US+3
  5039  0EA1  3000               	movlw	0
  5040  0EA2  00A7               	movwf	delayUS@US+2
  5041  0EA3  3027               	movlw	39
  5042  0EA4  00A6               	movwf	delayUS@US+1
  5043  0EA5  3010               	movlw	16
  5044  0EA6  00A5               	movwf	delayUS@US
  5045  0EA7  3190  2002  318E   	fcall	_delayUS
  5046                           
  5047                           ;main.c: 141: if(!Keyboard_Connected())
  5048  0EAA  319D  2554  318E   	fcall	_Keyboard_Connected
  5049  0EAD  3800               	iorlw	0
  5050  0EAE  1D03               	skipz
  5051  0EAF  2EBD               	goto	l7396
  5052                           
  5053                           ;main.c: 142: {
  5054                           ;main.c: 143: No_Keyboard =1;
  5055  0EB0  0021               	movlb	1	; select bank1
  5056  0EB1  01EB               	clrf	_No_Keyboard^(0+128)
  5057  0EB2  0AEB               	incf	_No_Keyboard^(0+128),f
  5058                           
  5059                           ;main.c: 144: if(!Keyboard_Connected())
  5060  0EB3  319D  2554  318E   	fcall	_Keyboard_Connected
  5061  0EB6  3800               	iorlw	0
  5062  0EB7  1D03               	skipz
  5063  0EB8  2EBD               	goto	l7396
  5064                           
  5065                           ;main.c: 145: {
  5066                           ;main.c: 146: No_Keyboard =1;
  5067  0EB9  0021               	movlb	1	; select bank1
  5068  0EBA  01EB               	clrf	_No_Keyboard^(0+128)
  5069  0EBB  0AEB               	incf	_No_Keyboard^(0+128),f
  5070                           
  5071                           ;main.c: 147: }
  5072  0EBC  2EBF               	goto	l7398
  5073  0EBD                     l7396:	
  5074                           ;main.c: 151: }
  5075                           ;main.c: 152: }
  5076                           
  5077                           ;main.c: 148: else
  5078                           ;main.c: 149: {
  5079                           ;main.c: 150: No_Keyboard = 0;
  5080                           
  5081                           
  5082                           ;main.c: 153: else
  5083                           ;main.c: 154: {
  5084                           ;main.c: 155: No_Keyboard =0;
  5085  0EBD  0021               	movlb	1	; select bank1
  5086  0EBE  01EB               	clrf	_No_Keyboard^(0+128)
  5087  0EBF                     l7398:	
  5088                           
  5089                           ;main.c: 156: }
  5090                           ;main.c: 158: if(No_Keyboard)
  5091  0EBF  086B               	movf	_No_Keyboard^(0+128),w
  5092  0EC0  1903               	btfsc	3,2
  5093  0EC1  2EC7               	goto	l7402
  5094                           
  5095                           ;main.c: 159: {
  5096                           ;main.c: 160: UARTstringWAIT("No Keyboard connected\r\n");
  5097  0EC2  30D6               	movlw	low (STR_6| (0+32768))
  5098  0EC3  0020               	movlb	0	; select bank0
  5099  0EC4  00B4               	movwf	UARTstringWAIT@data
  5100  0EC5  308A               	movlw	high (STR_6| (0+32768))
  5101  0EC6  2EEA               	goto	L2
  5102  0EC7                     l7402:	
  5103                           ;main.c: 161: }
  5104                           
  5105                           
  5106                           ;main.c: 162: else
  5107                           ;main.c: 163: {
  5108                           ;main.c: 164: UARTstringWAIT("Keyboard Connected\r\n");
  5109  0EC7  3030               	movlw	low (STR_7| (0+32768))
  5110  0EC8  0020               	movlb	0	; select bank0
  5111  0EC9  00B4               	movwf	UARTstringWAIT@data
  5112  0ECA  308B               	movlw	high (STR_7| (0+32768))
  5113  0ECB  00B5               	movwf	UARTstringWAIT@data+1
  5114  0ECC  319B  2362  318E   	fcall	_UARTstringWAIT
  5115                           
  5116                           ;main.c: 165: if(!Init_PS_2_Send())
  5117  0ECF  3193  23AC  318E   	fcall	_Init_PS_2_Send
  5118  0ED2  3800               	iorlw	0
  5119  0ED3  1D03               	skipz
  5120  0ED4  2EE6               	goto	l7410
  5121                           
  5122                           ;main.c: 166: {
  5123                           ;main.c: 167: delayUS(10000);
  5124  0ED5  3000               	movlw	0
  5125  0ED6  0020               	movlb	0	; select bank0
  5126  0ED7  00A8               	movwf	delayUS@US+3
  5127  0ED8  3000               	movlw	0
  5128  0ED9  00A7               	movwf	delayUS@US+2
  5129  0EDA  3027               	movlw	39
  5130  0EDB  00A6               	movwf	delayUS@US+1
  5131  0EDC  3010               	movlw	16
  5132  0EDD  00A5               	movwf	delayUS@US
  5133  0EDE  3190  2002  318E   	fcall	_delayUS
  5134                           
  5135                           ;main.c: 168: UARTstringWAIT("Initialization Fail\r\n");
  5136  0EE1  3005               	movlw	low (STR_8| (0+32768))
  5137  0EE2  0020               	movlb	0	; select bank0
  5138  0EE3  00B4               	movwf	UARTstringWAIT@data
  5139  0EE4  308B               	movlw	high (STR_8| (0+32768))
  5140  0EE5  2EEA               	goto	L2
  5141  0EE6                     l7410:	
  5142                           ;main.c: 169: }
  5143                           
  5144                           
  5145                           ;main.c: 170: else
  5146                           ;main.c: 171: {
  5147                           ;main.c: 172: UARTstringWAIT("Keyboard Pass!\r\n");
  5148  0EE6  30B4               	movlw	low (STR_9| (0+32768))
  5149  0EE7  0020               	movlb	0	; select bank0
  5150  0EE8  00B4               	movwf	UARTstringWAIT@data
  5151  0EE9  308B               	movlw	high (STR_9| (0+32768))
  5152  0EEA                     L2:	
  5153  0EEA  00B5               	movwf	UARTstringWAIT@data+1
  5154  0EEB  319B  2362  318E   	fcall	_UARTstringWAIT
  5155                           
  5156                           ;main.c: 173: }
  5157                           ;main.c: 174: }
  5158                           ;main.c: 175: BatteryVoltage = ReadVoltage();
  5159  0EEE  318B  23E4  318E   	fcall	_ReadVoltage
  5160  0EF1  0020               	movlb	0	; select bank0
  5161  0EF2  085F               	movf	?_ReadVoltage+3,w
  5162  0EF3  0022               	movlb	2	; select bank2
  5163  0EF4  00E2               	movwf	(_BatteryVoltage+3)^(0+256)
  5164  0EF5  0020               	movlb	0	; select bank0
  5165  0EF6  085E               	movf	?_ReadVoltage+2,w
  5166  0EF7  0022               	movlb	2	; select bank2
  5167  0EF8  00E1               	movwf	(_BatteryVoltage+2)^(0+256)
  5168  0EF9  0020               	movlb	0	; select bank0
  5169  0EFA  085D               	movf	?_ReadVoltage+1,w
  5170  0EFB  0022               	movlb	2	; select bank2
  5171  0EFC  00E0               	movwf	(_BatteryVoltage+1)^(0+256)
  5172  0EFD  0020               	movlb	0	; select bank0
  5173  0EFE  085C               	movf	?_ReadVoltage,w
  5174  0EFF  0022               	movlb	2	; select bank2
  5175  0F00  00DF               	movwf	_BatteryVoltage^(0+256)
  5176                           
  5177                           ;main.c: 176: if(BatteryVoltage < 5.85 )
  5178  0F01  0862               	movf	(_BatteryVoltage+3)^(0+256),w
  5179  0F02  0020               	movlb	0	; select bank0
  5180  0F03  00A8               	movwf	___flge@ff1+3
  5181  0F04  0022               	movlb	2	; select bank2
  5182  0F05  0861               	movf	(_BatteryVoltage+2)^(0+256),w
  5183  0F06  0020               	movlb	0	; select bank0
  5184  0F07  00A7               	movwf	___flge@ff1+2
  5185  0F08  0022               	movlb	2	; select bank2
  5186  0F09  0860               	movf	(_BatteryVoltage+1)^(0+256),w
  5187  0F0A  0020               	movlb	0	; select bank0
  5188  0F0B  00A6               	movwf	___flge@ff1+1
  5189  0F0C  0022               	movlb	2	; select bank2
  5190  0F0D  085F               	movf	_BatteryVoltage^(0+256),w
  5191  0F0E  0020               	movlb	0	; select bank0
  5192  0F0F  00A5               	movwf	___flge@ff1
  5193  0F10  3040               	movlw	64
  5194  0F11  00AC               	movwf	___flge@ff2+3
  5195  0F12  30BB               	movlw	187
  5196  0F13  00AB               	movwf	___flge@ff2+2
  5197  0F14  3033               	movlw	51
  5198  0F15  00AA               	movwf	___flge@ff2+1
  5199  0F16  3033               	movlw	51
  5200  0F17  00A9               	movwf	___flge@ff2
  5201  0F18  319F  272F  318E   	fcall	___flge
  5202  0F1B  1803               	btfsc	3,0
  5203  0F1C  2F22               	goto	l7418
  5204                           
  5205                           ;main.c: 177: {
  5206                           ;main.c: 178: UARTstringWAIT("Voltage too Low!\r\n");
  5207  0F1D  3059               	movlw	low (STR_10| (0+32768))
  5208  0F1E  0020               	movlb	0	; select bank0
  5209  0F1F  00B4               	movwf	UARTstringWAIT@data
  5210  0F20  308B               	movlw	high (STR_10| (0+32768))
  5211  0F21  2F44               	goto	L3
  5212  0F22                     l7418:	
  5213                           ;main.c: 179: }
  5214                           
  5215                           
  5216                           ;main.c: 180: else if (BatteryVoltage > 20.0)
  5217  0F22  3041               	movlw	65
  5218  0F23  0020               	movlb	0	; select bank0
  5219  0F24  00A8               	movwf	___flge@ff1+3
  5220  0F25  30A0               	movlw	160
  5221  0F26  00A7               	movwf	___flge@ff1+2
  5222  0F27  3000               	movlw	0
  5223  0F28  00A6               	movwf	___flge@ff1+1
  5224  0F29  3000               	movlw	0
  5225  0F2A  00A5               	movwf	___flge@ff1
  5226  0F2B  0022               	movlb	2	; select bank2
  5227  0F2C  0862               	movf	(_BatteryVoltage+3)^(0+256),w
  5228  0F2D  0020               	movlb	0	; select bank0
  5229  0F2E  00AC               	movwf	___flge@ff2+3
  5230  0F2F  0022               	movlb	2	; select bank2
  5231  0F30  0861               	movf	(_BatteryVoltage+2)^(0+256),w
  5232  0F31  0020               	movlb	0	; select bank0
  5233  0F32  00AB               	movwf	___flge@ff2+2
  5234  0F33  0022               	movlb	2	; select bank2
  5235  0F34  0860               	movf	(_BatteryVoltage+1)^(0+256),w
  5236  0F35  0020               	movlb	0	; select bank0
  5237  0F36  00AA               	movwf	___flge@ff2+1
  5238  0F37  0022               	movlb	2	; select bank2
  5239  0F38  085F               	movf	_BatteryVoltage^(0+256),w
  5240  0F39  0020               	movlb	0	; select bank0
  5241  0F3A  00A9               	movwf	___flge@ff2
  5242  0F3B  319F  272F  318E   	fcall	___flge
  5243  0F3E  1803               	btfsc	3,0
  5244  0F3F  2F48               	goto	l7422
  5245                           
  5246                           ;main.c: 181: {
  5247                           ;main.c: 182: UARTstringWAIT("Voltage too High!\r\n");
  5248  0F40  3045               	movlw	low (STR_11| (0+32768))
  5249  0F41  0020               	movlb	0	; select bank0
  5250  0F42  00B4               	movwf	UARTstringWAIT@data
  5251  0F43  308B               	movlw	high (STR_11| (0+32768))
  5252  0F44                     L3:	
  5253  0F44  00B5               	movwf	UARTstringWAIT@data+1
  5254  0F45  319B  2362  318E   	fcall	_UARTstringWAIT
  5255  0F48                     l7422:	
  5256                           
  5257                           ;main.c: 183: }
  5258                           ;main.c: 184: PS_2_ENABLE_INTERRUPT(0b00100000);
  5259  0F48  3020               	movlw	32
  5260  0F49  3199  21B6  318E   	fcall	_PS_2_ENABLE_INTERRUPT
  5261  0F4C                     L1:	
  5262                           
  5263                           ;main.c: 185: No_Keyboard_old = No_Keyboard;
  5264  0F4C  0021               	movlb	1	; select bank1
  5265  0F4D  086B               	movf	_No_Keyboard^(0+128),w
  5266  0F4E  0020               	movlb	0	; select bank0
  5267  0F4F  00E5               	movwf	??_main
  5268  0F50  0865               	movf	??_main,w
  5269  0F51  0022               	movlb	2	; select bank2
  5270  0F52  00EE               	movwf	_No_Keyboard_old^(0+256)
  5271                           
  5272                           ;main.c: 188: {
  5273                           ;main.c: 189: PS_2_Update();
  5274                           
  5275                           ;main.c: 187: while(1)
  5276  0F53  3181  2123  318E   	fcall	_PS_2_Update
  5277                           
  5278                           ;main.c: 190: if(No_Keyboard == 0 && No_Keyboard_old == 1)
  5279  0F56  0021               	movlb	1	; select bank1
  5280  0F57  08EB               	movf	_No_Keyboard^(0+128),f
  5281  0F58  1D03               	skipz
  5282  0F59  2F86               	goto	l7442
  5283  0F5A  0022               	movlb	2	; select bank2
  5284  0F5B  086E               	movf	_No_Keyboard_old^(0+256),w
  5285  0F5C  3A01               	xorlw	1
  5286  0F5D  1D03               	skipz
  5287  0F5E  2F86               	goto	l7442
  5288                           
  5289                           ;main.c: 191: {
  5290                           ;main.c: 192: UARTstringWAIT("Keyboard Connected\r\n");
  5291  0F5F  3030               	movlw	low (STR_7| (0+32768))
  5292  0F60  0020               	movlb	0	; select bank0
  5293  0F61  00B4               	movwf	UARTstringWAIT@data
  5294  0F62  308B               	movlw	high (STR_7| (0+32768))
  5295  0F63  00B5               	movwf	UARTstringWAIT@data+1
  5296  0F64  319B  2362  318E   	fcall	_UARTstringWAIT
  5297                           
  5298                           ;main.c: 193: if(!Init_PS_2_Send())
  5299  0F67  3193  23AC  318E   	fcall	_Init_PS_2_Send
  5300  0F6A  3800               	iorlw	0
  5301  0F6B  1D03               	skipz
  5302  0F6C  2F7E               	goto	l7440
  5303                           
  5304                           ;main.c: 194: {
  5305                           ;main.c: 195: delayUS(10000);
  5306  0F6D  3000               	movlw	0
  5307  0F6E  0020               	movlb	0	; select bank0
  5308  0F6F  00A8               	movwf	delayUS@US+3
  5309  0F70  3000               	movlw	0
  5310  0F71  00A7               	movwf	delayUS@US+2
  5311  0F72  3027               	movlw	39
  5312  0F73  00A6               	movwf	delayUS@US+1
  5313  0F74  3010               	movlw	16
  5314  0F75  00A5               	movwf	delayUS@US
  5315  0F76  3190  2002  318E   	fcall	_delayUS
  5316                           
  5317                           ;main.c: 196: UARTstringWAIT("Initialization Fail\r\n");
  5318  0F79  3005               	movlw	low (STR_8| (0+32768))
  5319  0F7A  0020               	movlb	0	; select bank0
  5320  0F7B  00B4               	movwf	UARTstringWAIT@data
  5321  0F7C  308B               	movlw	high (STR_8| (0+32768))
  5322  0F7D  2F82               	goto	L4
  5323  0F7E                     l7440:	
  5324                           ;main.c: 197: }
  5325                           
  5326                           
  5327                           ;main.c: 198: else
  5328                           ;main.c: 199: {
  5329                           ;main.c: 200: UARTstringWAIT("Keyboard Pass!\r\n");
  5330  0F7E  30B4               	movlw	low (STR_9| (0+32768))
  5331  0F7F  0020               	movlb	0	; select bank0
  5332  0F80  00B4               	movwf	UARTstringWAIT@data
  5333  0F81  308B               	movlw	high (STR_9| (0+32768))
  5334  0F82                     L4:	
  5335  0F82  00B5               	movwf	UARTstringWAIT@data+1
  5336  0F83  319B  2362  318E   	fcall	_UARTstringWAIT
  5337  0F86                     l7442:	
  5338                           
  5339                           ;main.c: 201: }
  5340                           ;main.c: 202: }
  5341                           ;main.c: 203: BatteryVoltage = ReadVoltage();
  5342  0F86  318B  23E4  318E   	fcall	_ReadVoltage
  5343  0F89  0020               	movlb	0	; select bank0
  5344  0F8A  085F               	movf	?_ReadVoltage+3,w
  5345  0F8B  0022               	movlb	2	; select bank2
  5346  0F8C  00E2               	movwf	(_BatteryVoltage+3)^(0+256)
  5347  0F8D  0020               	movlb	0	; select bank0
  5348  0F8E  085E               	movf	?_ReadVoltage+2,w
  5349  0F8F  0022               	movlb	2	; select bank2
  5350  0F90  00E1               	movwf	(_BatteryVoltage+2)^(0+256)
  5351  0F91  0020               	movlb	0	; select bank0
  5352  0F92  085D               	movf	?_ReadVoltage+1,w
  5353  0F93  0022               	movlb	2	; select bank2
  5354  0F94  00E0               	movwf	(_BatteryVoltage+1)^(0+256)
  5355  0F95  0020               	movlb	0	; select bank0
  5356  0F96  085C               	movf	?_ReadVoltage,w
  5357  0F97  0022               	movlb	2	; select bank2
  5358  0F98  00DF               	movwf	_BatteryVoltage^(0+256)
  5359                           
  5360                           ;main.c: 204: if(BatteryVoltage < 5.85 || BatteryVoltage > 20.0)
  5361  0F99  0862               	movf	(_BatteryVoltage+3)^(0+256),w
  5362  0F9A  0020               	movlb	0	; select bank0
  5363  0F9B  00A8               	movwf	___flge@ff1+3
  5364  0F9C  0022               	movlb	2	; select bank2
  5365  0F9D  0861               	movf	(_BatteryVoltage+2)^(0+256),w
  5366  0F9E  0020               	movlb	0	; select bank0
  5367  0F9F  00A7               	movwf	___flge@ff1+2
  5368  0FA0  0022               	movlb	2	; select bank2
  5369  0FA1  0860               	movf	(_BatteryVoltage+1)^(0+256),w
  5370  0FA2  0020               	movlb	0	; select bank0
  5371  0FA3  00A6               	movwf	___flge@ff1+1
  5372  0FA4  0022               	movlb	2	; select bank2
  5373  0FA5  085F               	movf	_BatteryVoltage^(0+256),w
  5374  0FA6  0020               	movlb	0	; select bank0
  5375  0FA7  00A5               	movwf	___flge@ff1
  5376  0FA8  3040               	movlw	64
  5377  0FA9  00AC               	movwf	___flge@ff2+3
  5378  0FAA  30BB               	movlw	187
  5379  0FAB  00AB               	movwf	___flge@ff2+2
  5380  0FAC  3033               	movlw	51
  5381  0FAD  00AA               	movwf	___flge@ff2+1
  5382  0FAE  3033               	movlw	51
  5383  0FAF  00A9               	movwf	___flge@ff2
  5384  0FB0  319F  272F  318E   	fcall	___flge
  5385  0FB3  1C03               	btfss	3,0
  5386  0FB4  2FD3               	goto	l7448
  5387  0FB5  3041               	movlw	65
  5388  0FB6  0020               	movlb	0	; select bank0
  5389  0FB7  00A8               	movwf	___flge@ff1+3
  5390  0FB8  30A0               	movlw	160
  5391  0FB9  00A7               	movwf	___flge@ff1+2
  5392  0FBA  3000               	movlw	0
  5393  0FBB  00A6               	movwf	___flge@ff1+1
  5394  0FBC  3000               	movlw	0
  5395  0FBD  00A5               	movwf	___flge@ff1
  5396  0FBE  0022               	movlb	2	; select bank2
  5397  0FBF  0862               	movf	(_BatteryVoltage+3)^(0+256),w
  5398  0FC0  0020               	movlb	0	; select bank0
  5399  0FC1  00AC               	movwf	___flge@ff2+3
  5400  0FC2  0022               	movlb	2	; select bank2
  5401  0FC3  0861               	movf	(_BatteryVoltage+2)^(0+256),w
  5402  0FC4  0020               	movlb	0	; select bank0
  5403  0FC5  00AB               	movwf	___flge@ff2+2
  5404  0FC6  0022               	movlb	2	; select bank2
  5405  0FC7  0860               	movf	(_BatteryVoltage+1)^(0+256),w
  5406  0FC8  0020               	movlb	0	; select bank0
  5407  0FC9  00AA               	movwf	___flge@ff2+1
  5408  0FCA  0022               	movlb	2	; select bank2
  5409  0FCB  085F               	movf	_BatteryVoltage^(0+256),w
  5410  0FCC  0020               	movlb	0	; select bank0
  5411  0FCD  00A9               	movwf	___flge@ff2
  5412  0FCE  319F  272F  318E   	fcall	___flge
  5413  0FD1  1803               	btfsc	3,0
  5414  0FD2  2FE9               	goto	l184
  5415  0FD3                     l7448:	
  5416                           
  5417                           ;main.c: 205: {
  5418                           ;main.c: 206: pwrLEDtoggle++;
  5419  0FD3  3001               	movlw	1
  5420  0FD4  0024               	movlb	4	; select bank4
  5421  0FD5  07B8               	addwf	_pwrLEDtoggle^(0+512),f
  5422  0FD6  3000               	movlw	0
  5423  0FD7  3DB9               	addwfc	(_pwrLEDtoggle+1)^(0+512),f
  5424                           
  5425                           ;main.c: 207: if(pwrLEDtoggle > 1000)
  5426  0FD8  3003               	movlw	3
  5427  0FD9  0239               	subwf	(_pwrLEDtoggle+1)^(0+512),w
  5428  0FDA  30E9               	movlw	233
  5429  0FDB  1903               	skipnz
  5430  0FDC  0238               	subwf	_pwrLEDtoggle^(0+512),w
  5431  0FDD  1C03               	skipc
  5432  0FDE  2FEB               	goto	l7454
  5433                           
  5434                           ;main.c: 208: {
  5435                           ;main.c: 209: LATC ^= 0b00000010;
  5436  0FDF  3002               	movlw	2
  5437  0FE0  0020               	movlb	0	; select bank0
  5438  0FE1  00E5               	movwf	??_main
  5439  0FE2  0865               	movf	??_main,w
  5440  0FE3  0022               	movlb	2	; select bank2
  5441  0FE4  068E               	xorwf	14,f	;volatile
  5442                           
  5443                           ;main.c: 210: pwrLEDtoggle = 0;
  5444  0FE5  0024               	movlb	4	; select bank4
  5445  0FE6  01B8               	clrf	_pwrLEDtoggle^(0+512)
  5446  0FE7  01B9               	clrf	(_pwrLEDtoggle+1)^(0+512)
  5447                           
  5448                           ;main.c: 211: }
  5449                           ;main.c: 212: }
  5450  0FE8  2FEB               	goto	l7454
  5451  0FE9                     l184:	
  5452                           
  5453                           ;main.c: 213: else
  5454                           ;main.c: 214: {
  5455                           ;main.c: 215: LATC |= 0b00000010;
  5456  0FE9  0022               	movlb	2	; select bank2
  5457  0FEA  148E               	bsf	14,1	;volatile
  5458  0FEB                     l7454:	
  5459                           
  5460                           ;main.c: 216: }
  5461                           ;main.c: 217: if(SinLEDtimer >= 100)
  5462  0FEB  3000               	movlw	0
  5463  0FEC  0024               	movlb	4	; select bank4
  5464  0FED  0237               	subwf	(_SinLEDtimer+1)^(0+512),w
  5465  0FEE  3064               	movlw	100
  5466  0FEF  1903               	skipnz
  5467  0FF0  0236               	subwf	_SinLEDtimer^(0+512),w
  5468  0FF1  1C03               	skipc
  5469  0FF2  2FFA               	goto	l7458
  5470                           
  5471                           ;main.c: 218: {
  5472                           ;main.c: 219: LATC &= ~0b00001000;
  5473  0FF3  30F7               	movlw	247
  5474  0FF4  0020               	movlb	0	; select bank0
  5475  0FF5  00E5               	movwf	??_main
  5476  0FF6  0865               	movf	??_main,w
  5477  0FF7  0022               	movlb	2	; select bank2
  5478  0FF8  058E               	andwf	14,f	;volatile
  5479                           
  5480                           ;main.c: 220: }
  5481  0FF9  2F4C               	goto	L1
  5482  0FFA                     l7458:	
  5483                           
  5484                           ;main.c: 221: else
  5485                           ;main.c: 222: {
  5486                           ;main.c: 223: SinLEDtimer++;
  5487  0FFA  3001               	movlw	1
  5488  0FFB  0024               	movlb	4	; select bank4
  5489  0FFC  07B6               	addwf	_SinLEDtimer^(0+512),f
  5490  0FFD  3000               	movlw	0
  5491  0FFE  3DB7               	addwfc	(_SinLEDtimer+1)^(0+512),f
  5492  0FFF  2F4C               	goto	L1
  5493  1000                     __end_of_main:	
  5494                           ;main.c: 224: }
  5495                           ;main.c: 225: No_Keyboard_old = No_Keyboard;
  5496                           
  5497                           
  5498                           	psect	text1
  5499  1F2F                     __ptext1:	
  5500 ;; *************** function ___flge *****************
  5501 ;; Defined at:
  5502 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\flge.c"
  5503 ;; Parameters:    Size  Location     Type
  5504 ;;  ff1             4    5[BANK0 ] unsigned char 
  5505 ;;  ff2             4    9[BANK0 ] unsigned char 
  5506 ;; Auto vars:     Size  Location     Type
  5507 ;;		None
  5508 ;; Return value:  Size  Location     Type
  5509 ;;		None               void
  5510 ;; Registers used:
  5511 ;;		wreg, status,2, status,0
  5512 ;; Tracked objects:
  5513 ;;		On entry : 0/0
  5514 ;;		On exit  : 0/0
  5515 ;;		Unchanged: 0/0
  5516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5517 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5519 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5520 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5521 ;;Total ram usage:       16 bytes
  5522 ;; Hardware stack levels used:    1
  5523 ;; Hardware stack levels required when called:    3
  5524 ;; This function calls:
  5525 ;;		Nothing
  5526 ;; This function is called by:
  5527 ;;		_main
  5528 ;; This function uses a non-reentrant model
  5529 ;;
  5530                           
  5531                           
  5532                           ;psect for function ___flge
  5533  1F2F                     ___flge:	
  5534                           
  5535                           ;incstack = 0
  5536                           ; Regs used in ___flge: [wreg+status,2+status,0]
  5537  1F2F  0020               	movlb	0	; select bank0
  5538  1F30  1FA8               	btfss	___flge@ff1+3,7
  5539  1F31  2F59               	goto	l5350
  5540  1F32  3000               	movlw	0
  5541  1F33  00AD               	movwf	??___flge
  5542  1F34  3000               	movlw	0
  5543  1F35  00AE               	movwf	??___flge+1
  5544  1F36  3000               	movlw	0
  5545  1F37  00AF               	movwf	??___flge+2
  5546  1F38  3080               	movlw	128
  5547  1F39  00B0               	movwf	??___flge+3
  5548  1F3A  0925               	comf	___flge@ff1,w
  5549  1F3B  00B1               	movwf	??___flge+4
  5550  1F3C  0926               	comf	___flge@ff1+1,w
  5551  1F3D  00B2               	movwf	??___flge+5
  5552  1F3E  0927               	comf	___flge@ff1+2,w
  5553  1F3F  00B3               	movwf	??___flge+6
  5554  1F40  0928               	comf	___flge@ff1+3,w
  5555  1F41  00B4               	movwf	??___flge+7
  5556  1F42  0AB1               	incf	??___flge+4,f
  5557  1F43  1903               	skipnz
  5558  1F44  0AB2               	incf	??___flge+5,f
  5559  1F45  1903               	skipnz
  5560  1F46  0AB3               	incf	??___flge+6,f
  5561  1F47  1903               	skipnz
  5562  1F48  0AB4               	incf	??___flge+7,f
  5563  1F49  0831               	movf	??___flge+4,w
  5564  1F4A  07AD               	addwf	??___flge,f
  5565  1F4B  0832               	movf	??___flge+5,w
  5566  1F4C  3DAE               	addwfc	??___flge+1,f
  5567  1F4D  0833               	movf	??___flge+6,w
  5568  1F4E  3DAF               	addwfc	??___flge+2,f
  5569  1F4F  0834               	movf	??___flge+7,w
  5570  1F50  3DB0               	addwfc	??___flge+3,f
  5571  1F51  0830               	movf	??___flge+3,w
  5572  1F52  00A8               	movwf	___flge@ff1+3
  5573  1F53  082F               	movf	??___flge+2,w
  5574  1F54  00A7               	movwf	___flge@ff1+2
  5575  1F55  082E               	movf	??___flge+1,w
  5576  1F56  00A6               	movwf	___flge@ff1+1
  5577  1F57  082D               	movf	??___flge,w
  5578  1F58  00A5               	movwf	___flge@ff1
  5579  1F59                     l5350:	
  5580  1F59  1FAC               	btfss	___flge@ff2+3,7
  5581  1F5A  2F82               	goto	l5354
  5582  1F5B  3000               	movlw	0
  5583  1F5C  00AD               	movwf	??___flge
  5584  1F5D  3000               	movlw	0
  5585  1F5E  00AE               	movwf	??___flge+1
  5586  1F5F  3000               	movlw	0
  5587  1F60  00AF               	movwf	??___flge+2
  5588  1F61  3080               	movlw	128
  5589  1F62  00B0               	movwf	??___flge+3
  5590  1F63  0929               	comf	___flge@ff2,w
  5591  1F64  00B1               	movwf	??___flge+4
  5592  1F65  092A               	comf	___flge@ff2+1,w
  5593  1F66  00B2               	movwf	??___flge+5
  5594  1F67  092B               	comf	___flge@ff2+2,w
  5595  1F68  00B3               	movwf	??___flge+6
  5596  1F69  092C               	comf	___flge@ff2+3,w
  5597  1F6A  00B4               	movwf	??___flge+7
  5598  1F6B  0AB1               	incf	??___flge+4,f
  5599  1F6C  1903               	skipnz
  5600  1F6D  0AB2               	incf	??___flge+5,f
  5601  1F6E  1903               	skipnz
  5602  1F6F  0AB3               	incf	??___flge+6,f
  5603  1F70  1903               	skipnz
  5604  1F71  0AB4               	incf	??___flge+7,f
  5605  1F72  0831               	movf	??___flge+4,w
  5606  1F73  07AD               	addwf	??___flge,f
  5607  1F74  0832               	movf	??___flge+5,w
  5608  1F75  3DAE               	addwfc	??___flge+1,f
  5609  1F76  0833               	movf	??___flge+6,w
  5610  1F77  3DAF               	addwfc	??___flge+2,f
  5611  1F78  0834               	movf	??___flge+7,w
  5612  1F79  3DB0               	addwfc	??___flge+3,f
  5613  1F7A  0830               	movf	??___flge+3,w
  5614  1F7B  00AC               	movwf	___flge@ff2+3
  5615  1F7C  082F               	movf	??___flge+2,w
  5616  1F7D  00AB               	movwf	___flge@ff2+2
  5617  1F7E  082E               	movf	??___flge+1,w
  5618  1F7F  00AA               	movwf	___flge@ff2+1
  5619  1F80  082D               	movf	??___flge,w
  5620  1F81  00A9               	movwf	___flge@ff2
  5621  1F82                     l5354:	
  5622  1F82  3080               	movlw	128
  5623  1F83  06A8               	xorwf	___flge@ff1+3,f
  5624  1F84  3080               	movlw	128
  5625  1F85  06AC               	xorwf	___flge@ff2+3,f
  5626  1F86  082C               	movf	___flge@ff2+3,w
  5627  1F87  0228               	subwf	___flge@ff1+3,w
  5628  1F88  1D03               	skipz
  5629  1F89  0008               	return
  5630  1F8A  082B               	movf	___flge@ff2+2,w
  5631  1F8B  0227               	subwf	___flge@ff1+2,w
  5632  1F8C  1D03               	skipz
  5633  1F8D  0008               	return
  5634  1F8E  082A               	movf	___flge@ff2+1,w
  5635  1F8F  0226               	subwf	___flge@ff1+1,w
  5636  1F90  1D03               	skipz
  5637  1F91  0008               	return
  5638  1F92  0829               	movf	___flge@ff2,w
  5639  1F93  0225               	subwf	___flge@ff1,w
  5640  1F94  0008               	return
  5641  1F95                     __end_of___flge:	
  5642                           
  5643                           	psect	text2
  5644  0BE4                     __ptext2:	
  5645 ;; *************** function _ReadVoltage *****************
  5646 ;; Defined at:
  5647 ;;		line 64 in file "ADC.c"
  5648 ;; Parameters:    Size  Location     Type
  5649 ;;		None
  5650 ;; Auto vars:     Size  Location     Type
  5651 ;;  voltage         4    0[BANK1 ] unsigned char 
  5652 ;;  temp            2    4[BANK1 ] unsigned int 
  5653 ;; Return value:  Size  Location     Type
  5654 ;;                  4   60[BANK0 ] unsigned int 
  5655 ;; Registers used:
  5656 ;;		wreg, status,2, status,0, pclath, cstack
  5657 ;; Tracked objects:
  5658 ;;		On entry : 0/0
  5659 ;;		On exit  : 0/0
  5660 ;;		Unchanged: 0/0
  5661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5662 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5663 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  5664 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5665 ;;      Totals:         0       5       6       0       0       0       0       0       0       0       0       0       
      +0       0
  5666 ;;Total ram usage:       11 bytes
  5667 ;; Hardware stack levels used:    1
  5668 ;; Hardware stack levels required when called:    5
  5669 ;; This function calls:
  5670 ;;		_DisableInternalADC
  5671 ;;		_InternalADC_Read
  5672 ;;		___fldiv
  5673 ;;		___flmul
  5674 ;;		___lwtofl
  5675 ;; This function is called by:
  5676 ;;		_main
  5677 ;; This function uses a non-reentrant model
  5678 ;;
  5679                           
  5680                           
  5681                           ;psect for function _ReadVoltage
  5682  0BE4                     _ReadVoltage:	
  5683                           
  5684                           ;ADC.c: 66: unsigned int temp;
  5685                           ;ADC.c: 67: double voltage;
  5686                           ;ADC.c: 72: temp = InternalADC_Read(2);
  5687                           
  5688                           ;incstack = 0
  5689                           ; Regs used in _ReadVoltage: [wreg+status,2+status,0+pclath+cstack]
  5690  0BE4  3002               	movlw	2
  5691  0BE5  319C  2417  318B   	fcall	_InternalADC_Read
  5692  0BE8  0020               	movlb	0	; select bank0
  5693  0BE9  0830               	movf	?_InternalADC_Read+1,w
  5694  0BEA  0021               	movlb	1	; select bank1
  5695  0BEB  01A5               	clrf	(ReadVoltage@temp+1)^(0+128)
  5696  0BEC  07A5               	addwf	(ReadVoltage@temp+1)^(0+128),f
  5697  0BED  0020               	movlb	0	; select bank0
  5698  0BEE  082F               	movf	?_InternalADC_Read,w
  5699  0BEF  0021               	movlb	1	; select bank1
  5700  0BF0  01A4               	clrf	ReadVoltage@temp^(0+128)
  5701  0BF1  07A4               	addwf	ReadVoltage@temp^(0+128),f
  5702                           
  5703                           ;ADC.c: 73: DisableInternalADC();
  5704  0BF2  3198  20AB  318B   	fcall	_DisableInternalADC
  5705                           
  5706                           ;ADC.c: 80: if((FVRCON & 0x03) == 0x03)
  5707  0BF5  3003               	movlw	3
  5708  0BF6  0022               	movlb	2	; select bank2
  5709  0BF7  0517               	andwf	23,w	;volatile
  5710  0BF8  0020               	movlb	0	; select bank0
  5711  0BF9  00E0               	movwf	??_ReadVoltage
  5712  0BFA  0860               	movf	??_ReadVoltage,w
  5713  0BFB  3A03               	xorlw	3
  5714  0BFC  1D03               	skipz
  5715  0BFD  2C05               	goto	l7334
  5716                           
  5717                           ;ADC.c: 81: {
  5718                           ;ADC.c: 83: temp <<= 2;
  5719  0BFE  3002               	movlw	2
  5720  0BFF  0021               	movlb	1	; select bank1
  5721  0C00                     u10305:	
  5722  0C00  35A4               	lslf	ReadVoltage@temp^(0+128),f
  5723  0C01  0DA5               	rlf	(ReadVoltage@temp+1)^(0+128),f
  5724  0C02  0B89               	decfsz	9,f
  5725  0C03  2C00               	goto	u10305
  5726                           
  5727                           ;ADC.c: 84: }
  5728  0C04  2C14               	goto	l7338
  5729  0C05                     l7334:	
  5730                           
  5731                           ;ADC.c: 85: else if((FVRCON & 0x03) == 0x02)
  5732  0C05  3003               	movlw	3
  5733  0C06  0022               	movlb	2	; select bank2
  5734  0C07  0517               	andwf	23,w	;volatile
  5735  0C08  0020               	movlb	0	; select bank0
  5736  0C09  00E0               	movwf	??_ReadVoltage
  5737  0C0A  0860               	movf	??_ReadVoltage,w
  5738  0C0B  3A02               	xorlw	2
  5739  0C0C  1D03               	skipz
  5740  0C0D  2C14               	goto	l7338
  5741                           
  5742                           ;ADC.c: 86: {
  5743                           ;ADC.c: 88: temp <<= 1;
  5744  0C0E  3001               	movlw	1
  5745  0C0F  0021               	movlb	1	; select bank1
  5746  0C10                     u10325:	
  5747  0C10  35A4               	lslf	ReadVoltage@temp^(0+128),f
  5748  0C11  0DA5               	rlf	(ReadVoltage@temp+1)^(0+128),f
  5749  0C12  0B89               	decfsz	9,f
  5750  0C13  2C10               	goto	u10325
  5751  0C14                     l7338:	
  5752                           
  5753                           ;ADC.c: 89: }
  5754                           ;ADC.c: 90: voltage = ((double)temp / 1000) * 5.7;
  5755  0C14  3040               	movlw	64
  5756  0C15  0020               	movlb	0	; select bank0
  5757  0C16  00CB               	movwf	___flmul@f1+3
  5758  0C17  30B6               	movlw	182
  5759  0C18  00CA               	movwf	___flmul@f1+2
  5760  0C19  3066               	movlw	102
  5761  0C1A  00C9               	movwf	___flmul@f1+1
  5762  0C1B  3066               	movlw	102
  5763  0C1C  00C8               	movwf	___flmul@f1
  5764  0C1D  3044               	movlw	68
  5765  0C1E  00B7               	movwf	___fldiv@f2+3
  5766  0C1F  307A               	movlw	122
  5767  0C20  00B6               	movwf	___fldiv@f2+2
  5768  0C21  3000               	movlw	0
  5769  0C22  00B5               	movwf	___fldiv@f2+1
  5770  0C23  3000               	movlw	0
  5771  0C24  00B4               	movwf	___fldiv@f2
  5772  0C25  0021               	movlb	1	; select bank1
  5773  0C26  0825               	movf	(ReadVoltage@temp+1)^(0+128),w
  5774  0C27  0020               	movlb	0	; select bank0
  5775  0C28  01B0               	clrf	___lwtofl@c+1
  5776  0C29  07B0               	addwf	___lwtofl@c+1,f
  5777  0C2A  0021               	movlb	1	; select bank1
  5778  0C2B  0824               	movf	ReadVoltage@temp^(0+128),w
  5779  0C2C  0020               	movlb	0	; select bank0
  5780  0C2D  01AF               	clrf	___lwtofl@c
  5781  0C2E  07AF               	addwf	___lwtofl@c,f
  5782  0C2F  3187  27E3  318B   	fcall	___lwtofl
  5783  0C32  0020               	movlb	0	; select bank0
  5784  0C33  0832               	movf	?___lwtofl+3,w
  5785  0C34  00BB               	movwf	___fldiv@f1+3
  5786  0C35  0831               	movf	?___lwtofl+2,w
  5787  0C36  00BA               	movwf	___fldiv@f1+2
  5788  0C37  0830               	movf	?___lwtofl+1,w
  5789  0C38  00B9               	movwf	___fldiv@f1+1
  5790  0C39  082F               	movf	?___lwtofl,w
  5791  0C3A  00B8               	movwf	___fldiv@f1
  5792  0C3B  3190  2037  318B   	fcall	___fldiv
  5793  0C3E  0020               	movlb	0	; select bank0
  5794  0C3F  0837               	movf	?___fldiv+3,w
  5795  0C40  00CF               	movwf	___flmul@f2+3
  5796  0C41  0836               	movf	?___fldiv+2,w
  5797  0C42  00CE               	movwf	___flmul@f2+2
  5798  0C43  0835               	movf	?___fldiv+1,w
  5799  0C44  00CD               	movwf	___flmul@f2+1
  5800  0C45  0834               	movf	?___fldiv,w
  5801  0C46  00CC               	movwf	___flmul@f2
  5802  0C47  3190  20F8         	fcall	___flmul
  5803  0C49  0020               	movlb	0	; select bank0
  5804  0C4A  084B               	movf	?___flmul+3,w
  5805  0C4B  0021               	movlb	1	; select bank1
  5806  0C4C  00A3               	movwf	(ReadVoltage@voltage+3)^(0+128)
  5807  0C4D  0020               	movlb	0	; select bank0
  5808  0C4E  084A               	movf	?___flmul+2,w
  5809  0C4F  0021               	movlb	1	; select bank1
  5810  0C50  00A2               	movwf	(ReadVoltage@voltage+2)^(0+128)
  5811  0C51  0020               	movlb	0	; select bank0
  5812  0C52  0849               	movf	?___flmul+1,w
  5813  0C53  0021               	movlb	1	; select bank1
  5814  0C54  00A1               	movwf	(ReadVoltage@voltage+1)^(0+128)
  5815  0C55  0020               	movlb	0	; select bank0
  5816  0C56  0848               	movf	?___flmul,w
  5817  0C57  0021               	movlb	1	; select bank1
  5818  0C58  00A0               	movwf	ReadVoltage@voltage^(0+128)
  5819                           
  5820                           ;ADC.c: 91: return voltage;
  5821  0C59  0823               	movf	(ReadVoltage@voltage+3)^(0+128),w
  5822  0C5A  0020               	movlb	0	; select bank0
  5823  0C5B  00DF               	movwf	?_ReadVoltage+3
  5824  0C5C  0021               	movlb	1	; select bank1
  5825  0C5D  0822               	movf	(ReadVoltage@voltage+2)^(0+128),w
  5826  0C5E  0020               	movlb	0	; select bank0
  5827  0C5F  00DE               	movwf	?_ReadVoltage+2
  5828  0C60  0021               	movlb	1	; select bank1
  5829  0C61  0821               	movf	(ReadVoltage@voltage+1)^(0+128),w
  5830  0C62  0020               	movlb	0	; select bank0
  5831  0C63  00DD               	movwf	?_ReadVoltage+1
  5832  0C64  0021               	movlb	1	; select bank1
  5833  0C65  0820               	movf	ReadVoltage@voltage^(0+128),w
  5834  0C66  0020               	movlb	0	; select bank0
  5835  0C67  00DC               	movwf	?_ReadVoltage
  5836  0C68  0008               	return
  5837  0C69                     __end_of_ReadVoltage:	
  5838                           
  5839                           	psect	text3
  5840  07E3                     __ptext3:	
  5841 ;; *************** function ___lwtofl *****************
  5842 ;; Defined at:
  5843 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwtofl.c"
  5844 ;; Parameters:    Size  Location     Type
  5845 ;;  c               2   15[BANK0 ] unsigned int 
  5846 ;; Auto vars:     Size  Location     Type
  5847 ;;		None
  5848 ;; Return value:  Size  Location     Type
  5849 ;;                  4   15[BANK0 ] unsigned int 
  5850 ;; Registers used:
  5851 ;;		wreg, status,2, status,0, pclath, cstack
  5852 ;; Tracked objects:
  5853 ;;		On entry : 0/0
  5854 ;;		On exit  : 0/0
  5855 ;;		Unchanged: 0/0
  5856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5857 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5859 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5860 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5861 ;;Total ram usage:        5 bytes
  5862 ;; Hardware stack levels used:    1
  5863 ;; Hardware stack levels required when called:    4
  5864 ;; This function calls:
  5865 ;;		___flpack
  5866 ;; This function is called by:
  5867 ;;		_ReadVoltage
  5868 ;; This function uses a non-reentrant model
  5869 ;;
  5870                           
  5871                           
  5872                           ;psect for function ___lwtofl
  5873  07E3                     ___lwtofl:	
  5874                           
  5875                           ;incstack = 0
  5876                           ; Regs used in ___lwtofl: [wreg+status,2+status,0+pclath+cstack]
  5877  07E3  0020               	movlb	0	; select bank0
  5878  07E4  082F               	movf	___lwtofl@c,w
  5879  07E5  00A5               	movwf	___flpack@arg
  5880  07E6  0830               	movf	___lwtofl@c+1,w
  5881  07E7  00A6               	movwf	___flpack@arg+1
  5882  07E8  01A7               	clrf	___flpack@arg+2
  5883  07E9  01A8               	clrf	___flpack@arg+3
  5884  07EA  3096               	movlw	150
  5885  07EB  00B3               	movwf	??___lwtofl
  5886  07EC  0833               	movf	??___lwtofl,w
  5887  07ED  00A9               	movwf	___flpack@exp
  5888  07EE  01AA               	clrf	___flpack@sign
  5889  07EF  319F  2795         	fcall	___flpack
  5890  07F1  0020               	movlb	0	; select bank0
  5891  07F2  0828               	movf	?___flpack+3,w
  5892  07F3  00B2               	movwf	?___lwtofl+3
  5893  07F4  0827               	movf	?___flpack+2,w
  5894  07F5  00B1               	movwf	?___lwtofl+2
  5895  07F6  0826               	movf	?___flpack+1,w
  5896  07F7  00B0               	movwf	?___lwtofl+1
  5897  07F8  0825               	movf	?___flpack,w
  5898  07F9  00AF               	movwf	?___lwtofl
  5899  07FA  0008               	return
  5900  07FB                     __end_of___lwtofl:	
  5901                           
  5902                           	psect	text4
  5903  10F8                     __ptext4:	
  5904 ;; *************** function ___flmul *****************
  5905 ;; Defined at:
  5906 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\flmul.c"
  5907 ;; Parameters:    Size  Location     Type
  5908 ;;  f1              4   40[BANK0 ] unsigned int 
  5909 ;;  f2              4   44[BANK0 ] unsigned int 
  5910 ;; Auto vars:     Size  Location     Type
  5911 ;;  f3_as_produc    4   54[BANK0 ] unsigned long 
  5912 ;;  sign            1   59[BANK0 ] unsigned char 
  5913 ;;  cntr            1   58[BANK0 ] unsigned char 
  5914 ;;  exp             1   53[BANK0 ] unsigned char 
  5915 ;; Return value:  Size  Location     Type
  5916 ;;                  4   40[BANK0 ] unsigned char 
  5917 ;; Registers used:
  5918 ;;		wreg, status,2, status,0, pclath, cstack
  5919 ;; Tracked objects:
  5920 ;;		On entry : 0/0
  5921 ;;		On exit  : 0/0
  5922 ;;		Unchanged: 0/0
  5923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5924 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5925 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5926 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5927 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5928 ;;Total ram usage:       20 bytes
  5929 ;; Hardware stack levels used:    1
  5930 ;; Hardware stack levels required when called:    4
  5931 ;; This function calls:
  5932 ;;		___flpack
  5933 ;; This function is called by:
  5934 ;;		_ReadVoltage
  5935 ;; This function uses a non-reentrant model
  5936 ;;
  5937                           
  5938                           
  5939                           ;psect for function ___flmul
  5940  10F8                     ___flmul:	
  5941                           
  5942                           ;incstack = 0
  5943                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
  5944  10F8  0020               	movlb	0	; select bank0
  5945  10F9  0848               	movf	___flmul@f1,w
  5946  10FA  00D0               	movwf	??___flmul
  5947  10FB  0849               	movf	___flmul@f1+1,w
  5948  10FC  00D1               	movwf	??___flmul+1
  5949  10FD  084A               	movf	___flmul@f1+2,w
  5950  10FE  00D2               	movwf	??___flmul+2
  5951  10FF  084B               	movf	___flmul@f1+3,w
  5952  1100  00D3               	movwf	??___flmul+3
  5953  1101  1003               	clrc
  5954  1102  0D52               	rlf	??___flmul+2,w
  5955  1103  0D53               	rlf	??___flmul+3,w
  5956  1104  00D4               	movwf	??___flmul+4
  5957  1105  0854               	movf	??___flmul+4,w
  5958  1106  00D5               	movwf	___flmul@exp
  5959  1107  08D5               	movf	___flmul@exp,f
  5960  1108  1D03               	skipz
  5961  1109  2913               	goto	l7098
  5962  110A  3000               	movlw	0
  5963  110B  00CB               	movwf	?___flmul+3
  5964  110C  3000               	movlw	0
  5965  110D  00CA               	movwf	?___flmul+2
  5966  110E  3000               	movlw	0
  5967  110F  00C9               	movwf	?___flmul+1
  5968  1110  3000               	movlw	0
  5969  1111  00C8               	movwf	?___flmul
  5970  1112  0008               	return
  5971  1113                     l7098:	
  5972  1113  084C               	movf	___flmul@f2,w
  5973  1114  00D0               	movwf	??___flmul
  5974  1115  084D               	movf	___flmul@f2+1,w
  5975  1116  00D1               	movwf	??___flmul+1
  5976  1117  084E               	movf	___flmul@f2+2,w
  5977  1118  00D2               	movwf	??___flmul+2
  5978  1119  084F               	movf	___flmul@f2+3,w
  5979  111A  00D3               	movwf	??___flmul+3
  5980  111B  1003               	clrc
  5981  111C  0D52               	rlf	??___flmul+2,w
  5982  111D  0D53               	rlf	??___flmul+3,w
  5983  111E  00D4               	movwf	??___flmul+4
  5984  111F  0854               	movf	??___flmul+4,w
  5985  1120  00DB               	movwf	___flmul@sign
  5986  1121  08DB               	movf	___flmul@sign,f
  5987  1122  1D03               	skipz
  5988  1123  292D               	goto	l7104
  5989  1124  3000               	movlw	0
  5990  1125  00CB               	movwf	?___flmul+3
  5991  1126  3000               	movlw	0
  5992  1127  00CA               	movwf	?___flmul+2
  5993  1128  3000               	movlw	0
  5994  1129  00C9               	movwf	?___flmul+1
  5995  112A  3000               	movlw	0
  5996  112B  00C8               	movwf	?___flmul
  5997  112C  0008               	return
  5998  112D                     l7104:	
  5999  112D  085B               	movf	___flmul@sign,w
  6000  112E  3E7B               	addlw	123
  6001  112F  00D0               	movwf	??___flmul
  6002  1130  0850               	movf	??___flmul,w
  6003  1131  07D5               	addwf	___flmul@exp,f
  6004  1132  0848               	movf	___flmul@f1,w
  6005  1133  00D0               	movwf	??___flmul
  6006  1134  0849               	movf	___flmul@f1+1,w
  6007  1135  00D1               	movwf	??___flmul+1
  6008  1136  084A               	movf	___flmul@f1+2,w
  6009  1137  00D2               	movwf	??___flmul+2
  6010  1138  084B               	movf	___flmul@f1+3,w
  6011  1139  00D3               	movwf	??___flmul+3
  6012  113A  3018               	movlw	24
  6013  113B                     u9975:	
  6014  113B  36D3               	lsrf	??___flmul+3,f
  6015  113C  0CD2               	rrf	??___flmul+2,f
  6016  113D  0CD1               	rrf	??___flmul+1,f
  6017  113E  0CD0               	rrf	??___flmul,f
  6018  113F  0B89               	decfsz	9,f
  6019  1140  293B               	goto	u9975
  6020  1141  0850               	movf	??___flmul,w
  6021  1142  00D4               	movwf	??___flmul+4
  6022  1143  0854               	movf	??___flmul+4,w
  6023  1144  00DB               	movwf	___flmul@sign
  6024  1145  084C               	movf	___flmul@f2,w
  6025  1146  00D0               	movwf	??___flmul
  6026  1147  084D               	movf	___flmul@f2+1,w
  6027  1148  00D1               	movwf	??___flmul+1
  6028  1149  084E               	movf	___flmul@f2+2,w
  6029  114A  00D2               	movwf	??___flmul+2
  6030  114B  084F               	movf	___flmul@f2+3,w
  6031  114C  00D3               	movwf	??___flmul+3
  6032  114D  3018               	movlw	24
  6033  114E                     u9985:	
  6034  114E  36D3               	lsrf	??___flmul+3,f
  6035  114F  0CD2               	rrf	??___flmul+2,f
  6036  1150  0CD1               	rrf	??___flmul+1,f
  6037  1151  0CD0               	rrf	??___flmul,f
  6038  1152  0B89               	decfsz	9,f
  6039  1153  294E               	goto	u9985
  6040  1154  0850               	movf	??___flmul,w
  6041  1155  00D4               	movwf	??___flmul+4
  6042  1156  0854               	movf	??___flmul+4,w
  6043  1157  06DB               	xorwf	___flmul@sign,f
  6044  1158  3080               	movlw	128
  6045  1159  00D0               	movwf	??___flmul
  6046  115A  0850               	movf	??___flmul,w
  6047  115B  05DB               	andwf	___flmul@sign,f
  6048  115C  17CA               	bsf	___flmul@f1+2,7
  6049  115D  17CE               	bsf	___flmul@f2+2,7
  6050  115E  30FF               	movlw	255
  6051  115F  05CC               	andwf	___flmul@f2,f
  6052  1160  30FF               	movlw	255
  6053  1161  05CD               	andwf	___flmul@f2+1,f
  6054  1162  30FF               	movlw	255
  6055  1163  05CE               	andwf	___flmul@f2+2,f
  6056  1164  3000               	movlw	0
  6057  1165  05CF               	andwf	___flmul@f2+3,f
  6058  1166  3000               	movlw	0
  6059  1167  00D9               	movwf	___flmul@f3_as_product+3
  6060  1168  3000               	movlw	0
  6061  1169  00D8               	movwf	___flmul@f3_as_product+2
  6062  116A  3000               	movlw	0
  6063  116B  00D7               	movwf	___flmul@f3_as_product+1
  6064  116C  3000               	movlw	0
  6065  116D  00D6               	movwf	___flmul@f3_as_product
  6066  116E  3007               	movlw	7
  6067  116F  00D0               	movwf	??___flmul
  6068  1170  0850               	movf	??___flmul,w
  6069  1171  00DA               	movwf	___flmul@cntr
  6070  1172                     l7116:	
  6071  1172  1C48               	btfss	___flmul@f1,0
  6072  1173  297C               	goto	l7120
  6073  1174  084C               	movf	___flmul@f2,w
  6074  1175  07D6               	addwf	___flmul@f3_as_product,f
  6075  1176  084D               	movf	___flmul@f2+1,w
  6076  1177  3DD7               	addwfc	___flmul@f3_as_product+1,f
  6077  1178  084E               	movf	___flmul@f2+2,w
  6078  1179  3DD8               	addwfc	___flmul@f3_as_product+2,f
  6079  117A  084F               	movf	___flmul@f2+3,w
  6080  117B  3DD9               	addwfc	___flmul@f3_as_product+3,f
  6081  117C                     l7120:	
  6082  117C  3001               	movlw	1
  6083  117D                     u10005:	
  6084  117D  36CB               	lsrf	___flmul@f1+3,f
  6085  117E  0CCA               	rrf	___flmul@f1+2,f
  6086  117F  0CC9               	rrf	___flmul@f1+1,f
  6087  1180  0CC8               	rrf	___flmul@f1,f
  6088  1181  0B89               	decfsz	9,f
  6089  1182  297D               	goto	u10005
  6090  1183  3001               	movlw	1
  6091  1184                     u10015:	
  6092  1184  35CC               	lslf	___flmul@f2,f
  6093  1185  0DCD               	rlf	___flmul@f2+1,f
  6094  1186  0DCE               	rlf	___flmul@f2+2,f
  6095  1187  0DCF               	rlf	___flmul@f2+3,f
  6096  1188  0B89               	decfsz	9,f
  6097  1189  2984               	goto	u10015
  6098  118A  3001               	movlw	1
  6099  118B  02DA               	subwf	___flmul@cntr,f
  6100  118C  1D03               	btfss	3,2
  6101  118D  2972               	goto	l7116
  6102  118E  3011               	movlw	17
  6103  118F  00D0               	movwf	??___flmul
  6104  1190  0850               	movf	??___flmul,w
  6105  1191  00DA               	movwf	___flmul@cntr
  6106  1192                     l7128:	
  6107  1192  1C48               	btfss	___flmul@f1,0
  6108  1193  299C               	goto	l7132
  6109  1194  084C               	movf	___flmul@f2,w
  6110  1195  07D6               	addwf	___flmul@f3_as_product,f
  6111  1196  084D               	movf	___flmul@f2+1,w
  6112  1197  3DD7               	addwfc	___flmul@f3_as_product+1,f
  6113  1198  084E               	movf	___flmul@f2+2,w
  6114  1199  3DD8               	addwfc	___flmul@f3_as_product+2,f
  6115  119A  084F               	movf	___flmul@f2+3,w
  6116  119B  3DD9               	addwfc	___flmul@f3_as_product+3,f
  6117  119C                     l7132:	
  6118  119C  3001               	movlw	1
  6119  119D                     u10045:	
  6120  119D  36CB               	lsrf	___flmul@f1+3,f
  6121  119E  0CCA               	rrf	___flmul@f1+2,f
  6122  119F  0CC9               	rrf	___flmul@f1+1,f
  6123  11A0  0CC8               	rrf	___flmul@f1,f
  6124  11A1  0B89               	decfsz	9,f
  6125  11A2  299D               	goto	u10045
  6126  11A3  3001               	movlw	1
  6127  11A4                     u10055:	
  6128  11A4  36D9               	lsrf	___flmul@f3_as_product+3,f
  6129  11A5  0CD8               	rrf	___flmul@f3_as_product+2,f
  6130  11A6  0CD7               	rrf	___flmul@f3_as_product+1,f
  6131  11A7  0CD6               	rrf	___flmul@f3_as_product,f
  6132  11A8  0B89               	decfsz	9,f
  6133  11A9  29A4               	goto	u10055
  6134  11AA  3001               	movlw	1
  6135  11AB  02DA               	subwf	___flmul@cntr,f
  6136  11AC  1D03               	btfss	3,2
  6137  11AD  2992               	goto	l7128
  6138  11AE  0859               	movf	___flmul@f3_as_product+3,w
  6139  11AF  00A8               	movwf	___flpack@arg+3
  6140  11B0  0858               	movf	___flmul@f3_as_product+2,w
  6141  11B1  00A7               	movwf	___flpack@arg+2
  6142  11B2  0857               	movf	___flmul@f3_as_product+1,w
  6143  11B3  00A6               	movwf	___flpack@arg+1
  6144  11B4  0856               	movf	___flmul@f3_as_product,w
  6145  11B5  00A5               	movwf	___flpack@arg
  6146  11B6  0855               	movf	___flmul@exp,w
  6147  11B7  00D0               	movwf	??___flmul
  6148  11B8  0850               	movf	??___flmul,w
  6149  11B9  00A9               	movwf	___flpack@exp
  6150  11BA  085B               	movf	___flmul@sign,w
  6151  11BB  00D1               	movwf	??___flmul+1
  6152  11BC  0851               	movf	??___flmul+1,w
  6153  11BD  00AA               	movwf	___flpack@sign
  6154  11BE  319F  2795         	fcall	___flpack
  6155  11C0  0020               	movlb	0	; select bank0
  6156  11C1  0828               	movf	?___flpack+3,w
  6157  11C2  00CB               	movwf	?___flmul+3
  6158  11C3  0827               	movf	?___flpack+2,w
  6159  11C4  00CA               	movwf	?___flmul+2
  6160  11C5  0826               	movf	?___flpack+1,w
  6161  11C6  00C9               	movwf	?___flmul+1
  6162  11C7  0825               	movf	?___flpack,w
  6163  11C8  00C8               	movwf	?___flmul
  6164  11C9  0008               	return
  6165  11CA                     __end_of___flmul:	
  6166                           
  6167                           	psect	text5
  6168  1037                     __ptext5:	
  6169 ;; *************** function ___fldiv *****************
  6170 ;; Defined at:
  6171 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic\fldiv.c"
  6172 ;; Parameters:    Size  Location     Type
  6173 ;;  f2              4   20[BANK0 ] unsigned char 
  6174 ;;  f1              4   24[BANK0 ] unsigned char 
  6175 ;; Auto vars:     Size  Location     Type
  6176 ;;  f3              4   33[BANK0 ] unsigned char 
  6177 ;;  sign            1   39[BANK0 ] unsigned char 
  6178 ;;  exp             1   38[BANK0 ] unsigned char 
  6179 ;;  cntr            1   37[BANK0 ] unsigned char 
  6180 ;; Return value:  Size  Location     Type
  6181 ;;                  4   20[BANK0 ] unsigned char 
  6182 ;; Registers used:
  6183 ;;		wreg, status,2, status,0, pclath, cstack
  6184 ;; Tracked objects:
  6185 ;;		On entry : 0/0
  6186 ;;		On exit  : 0/0
  6187 ;;		Unchanged: 0/0
  6188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6189 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6190 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6191 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6192 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6193 ;;Total ram usage:       20 bytes
  6194 ;; Hardware stack levels used:    1
  6195 ;; Hardware stack levels required when called:    4
  6196 ;; This function calls:
  6197 ;;		___flpack
  6198 ;; This function is called by:
  6199 ;;		_ReadVoltage
  6200 ;; This function uses a non-reentrant model
  6201 ;;
  6202                           
  6203                           
  6204                           ;psect for function ___fldiv
  6205  1037                     ___fldiv:	
  6206                           
  6207                           ;incstack = 0
  6208                           ; Regs used in ___fldiv: [wreg+status,2+status,0+pclath+cstack]
  6209  1037  0020               	movlb	0	; select bank0
  6210  1038  0838               	movf	___fldiv@f1,w
  6211  1039  00BC               	movwf	??___fldiv
  6212  103A  0839               	movf	___fldiv@f1+1,w
  6213  103B  00BD               	movwf	??___fldiv+1
  6214  103C  083A               	movf	___fldiv@f1+2,w
  6215  103D  00BE               	movwf	??___fldiv+2
  6216  103E  083B               	movf	___fldiv@f1+3,w
  6217  103F  00BF               	movwf	??___fldiv+3
  6218  1040  1003               	clrc
  6219  1041  0D3E               	rlf	??___fldiv+2,w
  6220  1042  0D3F               	rlf	??___fldiv+3,w
  6221  1043  00C0               	movwf	??___fldiv+4
  6222  1044  0840               	movf	??___fldiv+4,w
  6223  1045  00C6               	movwf	___fldiv@exp
  6224  1046  08C6               	movf	___fldiv@exp,f
  6225  1047  1D03               	skipz
  6226  1048  2852               	goto	l7060
  6227  1049  3000               	movlw	0
  6228  104A  00B7               	movwf	?___fldiv+3
  6229  104B  3000               	movlw	0
  6230  104C  00B6               	movwf	?___fldiv+2
  6231  104D  3000               	movlw	0
  6232  104E  00B5               	movwf	?___fldiv+1
  6233  104F  3000               	movlw	0
  6234  1050  00B4               	movwf	?___fldiv
  6235  1051  0008               	return
  6236  1052                     l7060:	
  6237  1052  0834               	movf	___fldiv@f2,w
  6238  1053  00BC               	movwf	??___fldiv
  6239  1054  0835               	movf	___fldiv@f2+1,w
  6240  1055  00BD               	movwf	??___fldiv+1
  6241  1056  0836               	movf	___fldiv@f2+2,w
  6242  1057  00BE               	movwf	??___fldiv+2
  6243  1058  0837               	movf	___fldiv@f2+3,w
  6244  1059  00BF               	movwf	??___fldiv+3
  6245  105A  1003               	clrc
  6246  105B  0D3E               	rlf	??___fldiv+2,w
  6247  105C  0D3F               	rlf	??___fldiv+3,w
  6248  105D  00C0               	movwf	??___fldiv+4
  6249  105E  0840               	movf	??___fldiv+4,w
  6250  105F  00C7               	movwf	___fldiv@sign
  6251  1060  08C7               	movf	___fldiv@sign,f
  6252  1061  1D03               	skipz
  6253  1062  286C               	goto	l7066
  6254  1063  3000               	movlw	0
  6255  1064  00B7               	movwf	?___fldiv+3
  6256  1065  3000               	movlw	0
  6257  1066  00B6               	movwf	?___fldiv+2
  6258  1067  3000               	movlw	0
  6259  1068  00B5               	movwf	?___fldiv+1
  6260  1069  3000               	movlw	0
  6261  106A  00B4               	movwf	?___fldiv
  6262  106B  0008               	return
  6263  106C                     l7066:	
  6264  106C  3089               	movlw	137
  6265  106D  0747               	addwf	___fldiv@sign,w
  6266  106E  00BC               	movwf	??___fldiv
  6267  106F  083C               	movf	??___fldiv,w
  6268  1070  02C6               	subwf	___fldiv@exp,f
  6269  1071  0838               	movf	___fldiv@f1,w
  6270  1072  00BC               	movwf	??___fldiv
  6271  1073  0839               	movf	___fldiv@f1+1,w
  6272  1074  00BD               	movwf	??___fldiv+1
  6273  1075  083A               	movf	___fldiv@f1+2,w
  6274  1076  00BE               	movwf	??___fldiv+2
  6275  1077  083B               	movf	___fldiv@f1+3,w
  6276  1078  00BF               	movwf	??___fldiv+3
  6277  1079  3018               	movlw	24
  6278  107A                     u9895:	
  6279  107A  36BF               	lsrf	??___fldiv+3,f
  6280  107B  0CBE               	rrf	??___fldiv+2,f
  6281  107C  0CBD               	rrf	??___fldiv+1,f
  6282  107D  0CBC               	rrf	??___fldiv,f
  6283  107E  0B89               	decfsz	9,f
  6284  107F  287A               	goto	u9895
  6285  1080  083C               	movf	??___fldiv,w
  6286  1081  00C0               	movwf	??___fldiv+4
  6287  1082  0840               	movf	??___fldiv+4,w
  6288  1083  00C7               	movwf	___fldiv@sign
  6289  1084  0834               	movf	___fldiv@f2,w
  6290  1085  00BC               	movwf	??___fldiv
  6291  1086  0835               	movf	___fldiv@f2+1,w
  6292  1087  00BD               	movwf	??___fldiv+1
  6293  1088  0836               	movf	___fldiv@f2+2,w
  6294  1089  00BE               	movwf	??___fldiv+2
  6295  108A  0837               	movf	___fldiv@f2+3,w
  6296  108B  00BF               	movwf	??___fldiv+3
  6297  108C  3018               	movlw	24
  6298  108D                     u9905:	
  6299  108D  36BF               	lsrf	??___fldiv+3,f
  6300  108E  0CBE               	rrf	??___fldiv+2,f
  6301  108F  0CBD               	rrf	??___fldiv+1,f
  6302  1090  0CBC               	rrf	??___fldiv,f
  6303  1091  0B89               	decfsz	9,f
  6304  1092  288D               	goto	u9905
  6305  1093  083C               	movf	??___fldiv,w
  6306  1094  00C0               	movwf	??___fldiv+4
  6307  1095  0840               	movf	??___fldiv+4,w
  6308  1096  06C7               	xorwf	___fldiv@sign,f
  6309  1097  3080               	movlw	128
  6310  1098  00BC               	movwf	??___fldiv
  6311  1099  083C               	movf	??___fldiv,w
  6312  109A  05C7               	andwf	___fldiv@sign,f
  6313  109B  17BA               	bsf	___fldiv@f1+2,7
  6314  109C  30FF               	movlw	255
  6315  109D  05B8               	andwf	___fldiv@f1,f
  6316  109E  30FF               	movlw	255
  6317  109F  05B9               	andwf	___fldiv@f1+1,f
  6318  10A0  30FF               	movlw	255
  6319  10A1  05BA               	andwf	___fldiv@f1+2,f
  6320  10A2  3000               	movlw	0
  6321  10A3  05BB               	andwf	___fldiv@f1+3,f
  6322  10A4  17B6               	bsf	___fldiv@f2+2,7
  6323  10A5  30FF               	movlw	255
  6324  10A6  05B4               	andwf	___fldiv@f2,f
  6325  10A7  30FF               	movlw	255
  6326  10A8  05B5               	andwf	___fldiv@f2+1,f
  6327  10A9  30FF               	movlw	255
  6328  10AA  05B6               	andwf	___fldiv@f2+2,f
  6329  10AB  3000               	movlw	0
  6330  10AC  05B7               	andwf	___fldiv@f2+3,f
  6331  10AD  3020               	movlw	32
  6332  10AE  00BC               	movwf	??___fldiv
  6333  10AF  083C               	movf	??___fldiv,w
  6334  10B0  00C5               	movwf	___fldiv@cntr
  6335  10B1                     l7078:	
  6336  10B1  3001               	movlw	1
  6337  10B2                     u9915:	
  6338  10B2  35C1               	lslf	___fldiv@f3,f
  6339  10B3  0DC2               	rlf	___fldiv@f3+1,f
  6340  10B4  0DC3               	rlf	___fldiv@f3+2,f
  6341  10B5  0DC4               	rlf	___fldiv@f3+3,f
  6342  10B6  0B89               	decfsz	9,f
  6343  10B7  28B2               	goto	u9915
  6344  10B8  0837               	movf	___fldiv@f2+3,w
  6345  10B9  023B               	subwf	___fldiv@f1+3,w
  6346  10BA  1D03               	skipz
  6347  10BB  28C6               	goto	u9925
  6348  10BC  0836               	movf	___fldiv@f2+2,w
  6349  10BD  023A               	subwf	___fldiv@f1+2,w
  6350  10BE  1D03               	skipz
  6351  10BF  28C6               	goto	u9925
  6352  10C0  0835               	movf	___fldiv@f2+1,w
  6353  10C1  0239               	subwf	___fldiv@f1+1,w
  6354  10C2  1D03               	skipz
  6355  10C3  28C6               	goto	u9925
  6356  10C4  0834               	movf	___fldiv@f2,w
  6357  10C5  0238               	subwf	___fldiv@f1,w
  6358  10C6                     u9925:	
  6359  10C6  1C03               	skipc
  6360  10C7  28D1               	goto	l7084
  6361  10C8  0834               	movf	___fldiv@f2,w
  6362  10C9  02B8               	subwf	___fldiv@f1,f
  6363  10CA  0835               	movf	___fldiv@f2+1,w
  6364  10CB  3BB9               	subwfb	___fldiv@f1+1,f
  6365  10CC  0836               	movf	___fldiv@f2+2,w
  6366  10CD  3BBA               	subwfb	___fldiv@f1+2,f
  6367  10CE  0837               	movf	___fldiv@f2+3,w
  6368  10CF  3BBB               	subwfb	___fldiv@f1+3,f
  6369  10D0  1441               	bsf	___fldiv@f3,0
  6370  10D1                     l7084:	
  6371  10D1  3001               	movlw	1
  6372  10D2                     u9935:	
  6373  10D2  35B8               	lslf	___fldiv@f1,f
  6374  10D3  0DB9               	rlf	___fldiv@f1+1,f
  6375  10D4  0DBA               	rlf	___fldiv@f1+2,f
  6376  10D5  0DBB               	rlf	___fldiv@f1+3,f
  6377  10D6  0B89               	decfsz	9,f
  6378  10D7  28D2               	goto	u9935
  6379  10D8  3001               	movlw	1
  6380  10D9  02C5               	subwf	___fldiv@cntr,f
  6381  10DA  1D03               	btfss	3,2
  6382  10DB  28B1               	goto	l7078
  6383  10DC  0844               	movf	___fldiv@f3+3,w
  6384  10DD  00A8               	movwf	___flpack@arg+3
  6385  10DE  0843               	movf	___fldiv@f3+2,w
  6386  10DF  00A7               	movwf	___flpack@arg+2
  6387  10E0  0842               	movf	___fldiv@f3+1,w
  6388  10E1  00A6               	movwf	___flpack@arg+1
  6389  10E2  0841               	movf	___fldiv@f3,w
  6390  10E3  00A5               	movwf	___flpack@arg
  6391  10E4  0846               	movf	___fldiv@exp,w
  6392  10E5  00BC               	movwf	??___fldiv
  6393  10E6  083C               	movf	??___fldiv,w
  6394  10E7  00A9               	movwf	___flpack@exp
  6395  10E8  0847               	movf	___fldiv@sign,w
  6396  10E9  00BD               	movwf	??___fldiv+1
  6397  10EA  083D               	movf	??___fldiv+1,w
  6398  10EB  00AA               	movwf	___flpack@sign
  6399  10EC  319F  2795         	fcall	___flpack
  6400  10EE  0020               	movlb	0	; select bank0
  6401  10EF  0828               	movf	?___flpack+3,w
  6402  10F0  00B7               	movwf	?___fldiv+3
  6403  10F1  0827               	movf	?___flpack+2,w
  6404  10F2  00B6               	movwf	?___fldiv+2
  6405  10F3  0826               	movf	?___flpack+1,w
  6406  10F4  00B5               	movwf	?___fldiv+1
  6407  10F5  0825               	movf	?___flpack,w
  6408  10F6  00B4               	movwf	?___fldiv
  6409  10F7  0008               	return
  6410  10F8                     __end_of___fldiv:	
  6411                           
  6412                           	psect	text6
  6413  1F95                     __ptext6:	
  6414 ;; *************** function ___flpack *****************
  6415 ;; Defined at:
  6416 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\double.c"
  6417 ;; Parameters:    Size  Location     Type
  6418 ;;  arg             4    5[BANK0 ] unsigned long 
  6419 ;;  exp             1    9[BANK0 ] unsigned char 
  6420 ;;  sign            1   10[BANK0 ] unsigned char 
  6421 ;; Auto vars:     Size  Location     Type
  6422 ;;		None
  6423 ;; Return value:  Size  Location     Type
  6424 ;;                  4    5[BANK0 ] unsigned char 
  6425 ;; Registers used:
  6426 ;;		wreg, status,2, status,0
  6427 ;; Tracked objects:
  6428 ;;		On entry : 0/0
  6429 ;;		On exit  : 0/0
  6430 ;;		Unchanged: 0/0
  6431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6432 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6434 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6435 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6436 ;;Total ram usage:       10 bytes
  6437 ;; Hardware stack levels used:    1
  6438 ;; Hardware stack levels required when called:    3
  6439 ;; This function calls:
  6440 ;;		Nothing
  6441 ;; This function is called by:
  6442 ;;		___fldiv
  6443 ;;		___flmul
  6444 ;;		___lwtofl
  6445 ;; This function uses a non-reentrant model
  6446 ;;
  6447                           
  6448                           
  6449                           ;psect for function ___flpack
  6450  1F95                     ___flpack:	
  6451                           
  6452                           ;incstack = 0
  6453                           ; Regs used in ___flpack: [wreg+status,2+status,0]
  6454  1F95  0020               	movlb	0	; select bank0
  6455  1F96  0829               	movf	___flpack@exp,w
  6456  1F97  1903               	btfsc	3,2
  6457  1F98  2F9F               	goto	l6458
  6458  1F99  0828               	movf	___flpack@arg+3,w
  6459  1F9A  0427               	iorwf	___flpack@arg+2,w
  6460  1F9B  0426               	iorwf	___flpack@arg+1,w
  6461  1F9C  0425               	iorwf	___flpack@arg,w
  6462  1F9D  1D03               	skipz
  6463  1F9E  2FB3               	goto	l6464
  6464  1F9F                     l6458:	
  6465  1F9F  3000               	movlw	0
  6466  1FA0  00A8               	movwf	?___flpack+3
  6467  1FA1  3000               	movlw	0
  6468  1FA2  00A7               	movwf	?___flpack+2
  6469  1FA3  3000               	movlw	0
  6470  1FA4  00A6               	movwf	?___flpack+1
  6471  1FA5  3000               	movlw	0
  6472  1FA6  00A5               	movwf	?___flpack
  6473  1FA7  0008               	return
  6474  1FA8                     l6462:	
  6475  1FA8  3001               	movlw	1
  6476  1FA9  00AB               	movwf	??___flpack
  6477  1FAA  082B               	movf	??___flpack,w
  6478  1FAB  07A9               	addwf	___flpack@exp,f
  6479  1FAC  3001               	movlw	1
  6480  1FAD                     u8495:	
  6481  1FAD  36A8               	lsrf	___flpack@arg+3,f
  6482  1FAE  0CA7               	rrf	___flpack@arg+2,f
  6483  1FAF  0CA6               	rrf	___flpack@arg+1,f
  6484  1FB0  0CA5               	rrf	___flpack@arg,f
  6485  1FB1  0B89               	decfsz	9,f
  6486  1FB2  2FAD               	goto	u8495
  6487  1FB3                     l6464:	
  6488  1FB3  30FE               	movlw	254
  6489  1FB4  0528               	andwf	___flpack@arg+3,w
  6490  1FB5  1903               	btfsc	3,2
  6491  1FB6  2FCB               	goto	l1199
  6492  1FB7  2FA8               	goto	l6462
  6493  1FB8                     l6466:	
  6494  1FB8  3001               	movlw	1
  6495  1FB9  00AB               	movwf	??___flpack
  6496  1FBA  082B               	movf	??___flpack,w
  6497  1FBB  07A9               	addwf	___flpack@exp,f
  6498  1FBC  3001               	movlw	1
  6499  1FBD  07A5               	addwf	___flpack@arg,f
  6500  1FBE  3000               	movlw	0
  6501  1FBF  3DA6               	addwfc	___flpack@arg+1,f
  6502  1FC0  3000               	movlw	0
  6503  1FC1  3DA7               	addwfc	___flpack@arg+2,f
  6504  1FC2  3000               	movlw	0
  6505  1FC3  3DA8               	addwfc	___flpack@arg+3,f
  6506  1FC4  3001               	movlw	1
  6507  1FC5                     u8515:	
  6508  1FC5  36A8               	lsrf	___flpack@arg+3,f
  6509  1FC6  0CA7               	rrf	___flpack@arg+2,f
  6510  1FC7  0CA6               	rrf	___flpack@arg+1,f
  6511  1FC8  0CA5               	rrf	___flpack@arg,f
  6512  1FC9  0B89               	decfsz	9,f
  6513  1FCA  2FC5               	goto	u8515
  6514  1FCB                     l1199:	
  6515  1FCB  30FF               	movlw	255
  6516  1FCC  0528               	andwf	___flpack@arg+3,w
  6517  1FCD  1903               	btfsc	3,2
  6518  1FCE  2FD9               	goto	l6474
  6519  1FCF  2FB8               	goto	l6466
  6520  1FD0                     l6472:	
  6521  1FD0  3001               	movlw	1
  6522  1FD1  02A9               	subwf	___flpack@exp,f
  6523  1FD2  3001               	movlw	1
  6524  1FD3                     u8535:	
  6525  1FD3  35A5               	lslf	___flpack@arg,f
  6526  1FD4  0DA6               	rlf	___flpack@arg+1,f
  6527  1FD5  0DA7               	rlf	___flpack@arg+2,f
  6528  1FD6  0DA8               	rlf	___flpack@arg+3,f
  6529  1FD7  0B89               	decfsz	9,f
  6530  1FD8  2FD3               	goto	u8535
  6531  1FD9                     l6474:	
  6532  1FD9  1FA7               	btfss	___flpack@arg+2,7
  6533  1FDA  2FD0               	goto	l6472
  6534  1FDB  1829               	btfsc	___flpack@exp,0
  6535  1FDC  2FE5               	goto	l1205
  6536  1FDD  30FF               	movlw	255
  6537  1FDE  05A5               	andwf	___flpack@arg,f
  6538  1FDF  30FF               	movlw	255
  6539  1FE0  05A6               	andwf	___flpack@arg+1,f
  6540  1FE1  307F               	movlw	127
  6541  1FE2  05A7               	andwf	___flpack@arg+2,f
  6542  1FE3  30FF               	movlw	255
  6543  1FE4  05A8               	andwf	___flpack@arg+3,f
  6544  1FE5                     l1205:	
  6545  1FE5  1003               	clrc
  6546  1FE6  0CA9               	rrf	___flpack@exp,f
  6547  1FE7  0829               	movf	___flpack@exp,w
  6548  1FE8  00AB               	movwf	??___flpack
  6549  1FE9  01AC               	clrf	??___flpack+1
  6550  1FEA  01AD               	clrf	??___flpack+2
  6551  1FEB  01AE               	clrf	??___flpack+3
  6552  1FEC  3018               	movlw	24
  6553  1FED                     u8565:	
  6554  1FED  35AB               	lslf	??___flpack,f
  6555  1FEE  0DAC               	rlf	??___flpack+1,f
  6556  1FEF  0DAD               	rlf	??___flpack+2,f
  6557  1FF0  0DAE               	rlf	??___flpack+3,f
  6558  1FF1  0B89               	decfsz	9,f
  6559  1FF2  2FED               	goto	u8565
  6560  1FF3  082B               	movf	??___flpack,w
  6561  1FF4  04A5               	iorwf	___flpack@arg,f
  6562  1FF5  082C               	movf	??___flpack+1,w
  6563  1FF6  04A6               	iorwf	___flpack@arg+1,f
  6564  1FF7  082D               	movf	??___flpack+2,w
  6565  1FF8  04A7               	iorwf	___flpack@arg+2,f
  6566  1FF9  082E               	movf	??___flpack+3,w
  6567  1FFA  04A8               	iorwf	___flpack@arg+3,f
  6568  1FFB  082A               	movf	___flpack@sign,w
  6569  1FFC  1903               	btfsc	3,2
  6570  1FFD  0008               	return
  6571  1FFE  17A8               	bsf	___flpack@arg+3,7
  6572  1FFF  0008               	return
  6573  2000                     __end_of___flpack:	
  6574                           
  6575                           	psect	text7
  6576  1C17                     __ptext7:	
  6577 ;; *************** function _InternalADC_Read *****************
  6578 ;; Defined at:
  6579 ;;		line 99 in file "ADC.c"
  6580 ;; Parameters:    Size  Location     Type
  6581 ;;  channel         1    wreg     unsigned char 
  6582 ;; Auto vars:     Size  Location     Type
  6583 ;;  channel         1   19[BANK0 ] unsigned char 
  6584 ;; Return value:  Size  Location     Type
  6585 ;;                  2   15[BANK0 ] unsigned int 
  6586 ;; Registers used:
  6587 ;;		wreg, status,2, status,0, pclath, cstack
  6588 ;; Tracked objects:
  6589 ;;		On entry : 0/0
  6590 ;;		On exit  : 0/0
  6591 ;;		Unchanged: 0/0
  6592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6593 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6594 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6595 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6596 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6597 ;;Total ram usage:        5 bytes
  6598 ;; Hardware stack levels used:    1
  6599 ;; Hardware stack levels required when called:    4
  6600 ;; This function calls:
  6601 ;;		_delayUS
  6602 ;; This function is called by:
  6603 ;;		_ReadVoltage
  6604 ;; This function uses a non-reentrant model
  6605 ;;
  6606                           
  6607                           
  6608                           ;psect for function _InternalADC_Read
  6609  1C17                     _InternalADC_Read:	
  6610                           
  6611                           ;incstack = 0
  6612                           ; Regs used in _InternalADC_Read: [wreg+status,2+status,0+pclath+cstack]
  6613                           ;InternalADC_Read@channel stored from wreg
  6614  1C17  0020               	movlb	0	; select bank0
  6615  1C18  00B3               	movwf	InternalADC_Read@channel
  6616                           
  6617                           ;ADC.c: 101: ADCON0 =0;
  6618  1C19  0021               	movlb	1	; select bank1
  6619  1C1A  019D               	clrf	29	;volatile
  6620                           
  6621                           ;ADC.c: 102: ADCON1 =0;
  6622  1C1B  019E               	clrf	30	;volatile
  6623                           
  6624                           ;ADC.c: 103: ADCON1 |= 0b01010000;
  6625  1C1C  3050               	movlw	80
  6626  1C1D  0020               	movlb	0	; select bank0
  6627  1C1E  00B1               	movwf	??_InternalADC_Read
  6628  1C1F  0831               	movf	??_InternalADC_Read,w
  6629  1C20  0021               	movlb	1	; select bank1
  6630  1C21  049E               	iorwf	30,f	;volatile
  6631                           
  6632                           ;ADC.c: 104: FVRCON |= 0b10000000;
  6633  1C22  0022               	movlb	2	; select bank2
  6634  1C23  1797               	bsf	23,7	;volatile
  6635                           
  6636                           ;ADC.c: 105: FVRCON |= 0b00000011;
  6637  1C24  3003               	movlw	3
  6638  1C25  0020               	movlb	0	; select bank0
  6639  1C26  00B1               	movwf	??_InternalADC_Read
  6640  1C27  0831               	movf	??_InternalADC_Read,w
  6641  1C28  0022               	movlb	2	; select bank2
  6642  1C29  0497               	iorwf	23,f	;volatile
  6643  1C2A                     l983:	
  6644                           ;ADC.c: 106: while(!(FVRCON & 0b01000000));
  6645                           
  6646  1C2A  1F17               	btfss	23,6	;volatile
  6647  1C2B  2C2A               	goto	l983
  6648                           
  6649                           ;ADC.c: 107: ADCON0 |= (channel << 2);
  6650  1C2C  0020               	movlb	0	; select bank0
  6651  1C2D  0833               	movf	InternalADC_Read@channel,w
  6652  1C2E  00B1               	movwf	??_InternalADC_Read
  6653  1C2F  3001               	movlw	1
  6654  1C30                     u9855:	
  6655  1C30  35B1               	lslf	??_InternalADC_Read,f
  6656  1C31  3EFF               	addlw	-1
  6657  1C32  1D03               	skipz
  6658  1C33  2C30               	goto	u9855
  6659  1C34  3531               	lslf	??_InternalADC_Read,w
  6660  1C35  00B2               	movwf	??_InternalADC_Read+1
  6661  1C36  0832               	movf	??_InternalADC_Read+1,w
  6662  1C37  0021               	movlb	1	; select bank1
  6663  1C38  049D               	iorwf	29,f	;volatile
  6664                           
  6665                           ;ADC.c: 108: ADCON1 |= 0b10000011;
  6666  1C39  3083               	movlw	131
  6667  1C3A  0020               	movlb	0	; select bank0
  6668  1C3B  00B1               	movwf	??_InternalADC_Read
  6669  1C3C  0831               	movf	??_InternalADC_Read,w
  6670  1C3D  0021               	movlb	1	; select bank1
  6671  1C3E  049E               	iorwf	30,f	;volatile
  6672                           
  6673                           ;ADC.c: 109: ADCON0 |= 0b00000001;
  6674  1C3F  141D               	bsf	29,0	;volatile
  6675                           
  6676                           ;ADC.c: 110: (PIE1bits.ADIE=0);
  6677  1C40  1311               	bcf	17,6	;volatile
  6678                           
  6679                           ;ADC.c: 111: delayUS(5);
  6680  1C41  3000               	movlw	0
  6681  1C42  0020               	movlb	0	; select bank0
  6682  1C43  00A8               	movwf	delayUS@US+3
  6683  1C44  3000               	movlw	0
  6684  1C45  00A7               	movwf	delayUS@US+2
  6685  1C46  3000               	movlw	0
  6686  1C47  00A6               	movwf	delayUS@US+1
  6687  1C48  3005               	movlw	5
  6688  1C49  00A5               	movwf	delayUS@US
  6689  1C4A  3190  2002  319C   	fcall	_delayUS
  6690                           
  6691                           ;ADC.c: 112: ADCON0 |= 0b00000010;
  6692  1C4D  0021               	movlb	1	; select bank1
  6693  1C4E  149D               	bsf	29,1	;volatile
  6694  1C4F                     l986:	
  6695                           ;ADC.c: 113: while(ADCON0 & 0b00000010);
  6696                           
  6697  1C4F  189D               	btfsc	29,1	;volatile
  6698  1C50  2C4F               	goto	l986
  6699                           
  6700                           ;ADC.c: 114: return ((ADRESH << 8) + ADRESL);
  6701  1C51  081C               	movf	28,w	;volatile
  6702  1C52  0020               	movlb	0	; select bank0
  6703  1C53  01B0               	clrf	?_InternalADC_Read+1
  6704  1C54  07B0               	addwf	?_InternalADC_Read+1,f
  6705  1C55  0021               	movlb	1	; select bank1
  6706  1C56  081B               	movf	27,w	;volatile
  6707  1C57  0020               	movlb	0	; select bank0
  6708  1C58  01AF               	clrf	?_InternalADC_Read
  6709  1C59  07AF               	addwf	?_InternalADC_Read,f
  6710  1C5A  0008               	return
  6711  1C5B                     __end_of_InternalADC_Read:	
  6712                           
  6713                           	psect	text8
  6714  18AB                     __ptext8:	
  6715 ;; *************** function _DisableInternalADC *****************
  6716 ;; Defined at:
  6717 ;;		line 122 in file "ADC.c"
  6718 ;; Parameters:    Size  Location     Type
  6719 ;;		None
  6720 ;; Auto vars:     Size  Location     Type
  6721 ;;		None
  6722 ;; Return value:  Size  Location     Type
  6723 ;;		None               void
  6724 ;; Registers used:
  6725 ;;		wreg, status,2, status,0
  6726 ;; Tracked objects:
  6727 ;;		On entry : 0/0
  6728 ;;		On exit  : 0/0
  6729 ;;		Unchanged: 0/0
  6730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6733 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6734 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6735 ;;Total ram usage:        1 bytes
  6736 ;; Hardware stack levels used:    1
  6737 ;; Hardware stack levels required when called:    3
  6738 ;; This function calls:
  6739 ;;		Nothing
  6740 ;; This function is called by:
  6741 ;;		_ReadVoltage
  6742 ;; This function uses a non-reentrant model
  6743 ;;
  6744                           
  6745                           
  6746                           ;psect for function _DisableInternalADC
  6747  18AB                     _DisableInternalADC:	
  6748                           
  6749                           ;ADC.c: 124: ADCON0 &= ~0b00000001;
  6750                           
  6751                           ;incstack = 0
  6752                           ; Regs used in _DisableInternalADC: [wreg+status,2+status,0]
  6753  18AB  30FE               	movlw	254
  6754  18AC  0020               	movlb	0	; select bank0
  6755  18AD  00A5               	movwf	??_DisableInternalADC
  6756  18AE  0825               	movf	??_DisableInternalADC,w
  6757  18AF  0021               	movlb	1	; select bank1
  6758  18B0  059D               	andwf	29,f	;volatile
  6759  18B1  0008               	return
  6760  18B2                     __end_of_DisableInternalADC:	
  6761                           
  6762                           	psect	text9
  6763  18EF                     __ptext9:	
  6764 ;; *************** function _PS_2_INIT *****************
  6765 ;; Defined at:
  6766 ;;		line 105 in file "PS_2.c"
  6767 ;; Parameters:    Size  Location     Type
  6768 ;;		None
  6769 ;; Auto vars:     Size  Location     Type
  6770 ;;		None
  6771 ;; Return value:  Size  Location     Type
  6772 ;;		None               void
  6773 ;; Registers used:
  6774 ;;		wreg, status,2, status,0, pclath, cstack
  6775 ;; Tracked objects:
  6776 ;;		On entry : 0/0
  6777 ;;		On exit  : 0/0
  6778 ;;		Unchanged: 0/0
  6779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6783 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6784 ;;Total ram usage:        0 bytes
  6785 ;; Hardware stack levels used:    1
  6786 ;; Hardware stack levels required when called:    4
  6787 ;; This function calls:
  6788 ;;		_Clock_TRIS
  6789 ;;		_Data_TRIS
  6790 ;;		_INIT_PS_2_INTERRUPT
  6791 ;; This function is called by:
  6792 ;;		_main
  6793 ;; This function uses a non-reentrant model
  6794 ;;
  6795                           
  6796                           
  6797                           ;psect for function _PS_2_INIT
  6798  18EF                     _PS_2_INIT:	
  6799                           
  6800                           ;PS_2.c: 108: Clock_TRIS(1);
  6801                           
  6802                           ;incstack = 0
  6803                           ; Regs used in _PS_2_INIT: [wreg+status,2+status,0+pclath+cstack]
  6804  18EF  3001               	movlw	1
  6805  18F0  3198  20CE  3198   	fcall	_Clock_TRIS
  6806                           
  6807                           ;PS_2.c: 109: Data_TRIS(1);
  6808  18F3  3001               	movlw	1
  6809  18F4  3198  20D9  3198   	fcall	_Data_TRIS
  6810                           
  6811                           ;PS_2.c: 110: INIT_PS_2_INTERRUPT(0b00100000);
  6812  18F7  3020               	movlw	32
  6813  18F8  3199  2125         	fcall	_INIT_PS_2_INTERRUPT
  6814  18FA  0008               	return
  6815  18FB                     __end_of_PS_2_INIT:	
  6816                           
  6817                           	psect	text10
  6818  1925                     __ptext10:	
  6819 ;; *************** function _INIT_PS_2_INTERRUPT *****************
  6820 ;; Defined at:
  6821 ;;		line 153 in file "PS_2.c"
  6822 ;; Parameters:    Size  Location     Type
  6823 ;;  DATA_CLK        1    wreg     unsigned char 
  6824 ;; Auto vars:     Size  Location     Type
  6825 ;;  DATA_CLK        1    5[BANK0 ] unsigned char 
  6826 ;; Return value:  Size  Location     Type
  6827 ;;		None               void
  6828 ;; Registers used:
  6829 ;;		wreg, status,2
  6830 ;; Tracked objects:
  6831 ;;		On entry : 0/0
  6832 ;;		On exit  : 0/0
  6833 ;;		Unchanged: 0/0
  6834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6836 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6838 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6839 ;;Total ram usage:        1 bytes
  6840 ;; Hardware stack levels used:    1
  6841 ;; Hardware stack levels required when called:    3
  6842 ;; This function calls:
  6843 ;;		Nothing
  6844 ;; This function is called by:
  6845 ;;		_PS_2_INIT
  6846 ;; This function uses a non-reentrant model
  6847 ;;
  6848                           
  6849                           
  6850                           ;psect for function _INIT_PS_2_INTERRUPT
  6851  1925                     _INIT_PS_2_INTERRUPT:	
  6852                           
  6853                           ;incstack = 0
  6854                           ; Regs used in _INIT_PS_2_INTERRUPT: [wreg+status,2]
  6855                           ;INIT_PS_2_INTERRUPT@DATA_CLK stored from wreg
  6856  1925  0020               	movlb	0	; select bank0
  6857  1926  00A5               	movwf	INIT_PS_2_INTERRUPT@DATA_CLK
  6858                           
  6859                           ;PS_2.c: 155: IOCAP =0;
  6860  1927  0027               	movlb	7	; select bank7
  6861  1928  0191               	clrf	17	;volatile
  6862                           
  6863                           ;PS_2.c: 156: IOCAN =0;
  6864  1929  0192               	clrf	18	;volatile
  6865                           
  6866                           ;PS_2.c: 157: if(DATA_CLK == 0b00100000)
  6867  192A  0020               	movlb	0	; select bank0
  6868  192B  0825               	movf	INIT_PS_2_INTERRUPT@DATA_CLK,w
  6869  192C  3A20               	xorlw	32
  6870  192D  1D03               	skipz
  6871  192E  2932               	goto	l603
  6872                           
  6873                           ;PS_2.c: 158: {
  6874                           ;PS_2.c: 161: IOCAN |= 0b00100000;
  6875  192F  0027               	movlb	7	; select bank7
  6876  1930  1692               	bsf	18,5	;volatile
  6877                           
  6878                           ;PS_2.c: 162: }
  6879  1931  0008               	return
  6880  1932                     l603:	
  6881                           
  6882                           ;PS_2.c: 163: else
  6883                           ;PS_2.c: 164: {
  6884                           ;PS_2.c: 167: IOCAN |= 0b00010000;
  6885  1932  0027               	movlb	7	; select bank7
  6886  1933  1612               	bsf	18,4	;volatile
  6887  1934  0008               	return
  6888  1935                     __end_of_INIT_PS_2_INTERRUPT:	
  6889                           
  6890                           	psect	text11
  6891  1D54                     __ptext11:	
  6892 ;; *************** function _Keyboard_Connected *****************
  6893 ;; Defined at:
  6894 ;;		line 1141 in file "PS_2.c"
  6895 ;; Parameters:    Size  Location     Type
  6896 ;;		None
  6897 ;; Auto vars:     Size  Location     Type
  6898 ;;  i               4   65[BANK0 ] unsigned long 
  6899 ;; Return value:  Size  Location     Type
  6900 ;;                  1    wreg      unsigned char 
  6901 ;; Registers used:
  6902 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6903 ;; Tracked objects:
  6904 ;;		On entry : 0/0
  6905 ;;		On exit  : 0/0
  6906 ;;		Unchanged: 0/0
  6907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6909 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6911 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6912 ;;Total ram usage:        4 bytes
  6913 ;; Hardware stack levels used:    1
  6914 ;; Hardware stack levels required when called:    9
  6915 ;; This function calls:
  6916 ;;		_PS_2_DISABLE_INTERRUPT
  6917 ;;		_PS_2_ENABLE_INTERRUPT
  6918 ;;		_PS_2_Update
  6919 ;;		_Send_PS2
  6920 ;;		_delayUS
  6921 ;; This function is called by:
  6922 ;;		_main
  6923 ;; This function uses a non-reentrant model
  6924 ;;
  6925                           
  6926                           
  6927                           ;psect for function _Keyboard_Connected
  6928  1D54                     _Keyboard_Connected:	
  6929                           
  6930                           ;PS_2.c: 1143: unsigned long i=0;
  6931                           
  6932                           ;incstack = 0
  6933                           ; Regs used in _Keyboard_Connected: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6934  1D54  3000               	movlw	0
  6935  1D55  0020               	movlb	0	; select bank0
  6936  1D56  00E4               	movwf	Keyboard_Connected@i+3
  6937  1D57  3000               	movlw	0
  6938  1D58  00E3               	movwf	Keyboard_Connected@i+2
  6939  1D59  3000               	movlw	0
  6940  1D5A  00E2               	movwf	Keyboard_Connected@i+1
  6941  1D5B  3000               	movlw	0
  6942  1D5C  00E1               	movwf	Keyboard_Connected@i
  6943                           
  6944                           ;PS_2.c: 1144: ECHO =0;
  6945  1D5D  0021               	movlb	1	; select bank1
  6946  1D5E  01E9               	clrf	_ECHO^(0+128)	;volatile
  6947                           
  6948                           ;PS_2.c: 1145: Send_PS2(0xEE);
  6949  1D5F  30EE               	movlw	238
  6950  1D60  318C  2469  319D   	fcall	_Send_PS2
  6951                           
  6952                           ;PS_2.c: 1146: PS_2_ENABLE_INTERRUPT(0b00100000);
  6953  1D63  3020               	movlw	32
  6954  1D64  3199  21B6  319D   	fcall	_PS_2_ENABLE_INTERRUPT
  6955                           
  6956                           ;PS_2.c: 1147: for(i=0;i<5000;i++)
  6957  1D67  3000               	movlw	0
  6958  1D68  0020               	movlb	0	; select bank0
  6959  1D69  00E4               	movwf	Keyboard_Connected@i+3
  6960  1D6A  3000               	movlw	0
  6961  1D6B  00E3               	movwf	Keyboard_Connected@i+2
  6962  1D6C  3000               	movlw	0
  6963  1D6D  00E2               	movwf	Keyboard_Connected@i+1
  6964  1D6E  3000               	movlw	0
  6965  1D6F  00E1               	movwf	Keyboard_Connected@i
  6966  1D70  2D7A               	goto	L6
  6967  1D71                     l7222:	
  6968                           ;PS_2.c: 1152: {
  6969                           ;PS_2.c: 1153: break;
  6970                           
  6971  1D71  3001               	movlw	1
  6972  1D72  0020               	movlb	0	; select bank0
  6973  1D73  07E1               	addwf	Keyboard_Connected@i,f
  6974  1D74  3000               	movlw	0
  6975  1D75  3DE2               	addwfc	Keyboard_Connected@i+1,f
  6976  1D76  3000               	movlw	0
  6977  1D77  3DE3               	addwfc	Keyboard_Connected@i+2,f
  6978  1D78  3000               	movlw	0
  6979  1D79  3DE4               	addwfc	Keyboard_Connected@i+3,f
  6980  1D7A                     L6:	
  6981  1D7A  3000               	movlw	0
  6982  1D7B  0264               	subwf	Keyboard_Connected@i+3,w
  6983  1D7C  1D03               	skipz
  6984  1D7D  2D88               	goto	u10135
  6985  1D7E  3000               	movlw	0
  6986  1D7F  0263               	subwf	Keyboard_Connected@i+2,w
  6987  1D80  1D03               	skipz
  6988  1D81  2D88               	goto	u10135
  6989  1D82  3013               	movlw	19
  6990  1D83  0262               	subwf	Keyboard_Connected@i+1,w
  6991  1D84  1D03               	skipz
  6992  1D85  2D88               	goto	u10135
  6993  1D86  3088               	movlw	136
  6994  1D87  0261               	subwf	Keyboard_Connected@i,w
  6995  1D88                     u10135:	
  6996  1D88  1803               	btfsc	3,0
  6997  1D89  2D9D               	goto	l7224
  6998                           
  6999                           ;PS_2.c: 1148: {
  7000                           ;PS_2.c: 1149: PS_2_Update();
  7001  1D8A  3181  2123  319D   	fcall	_PS_2_Update
  7002                           
  7003                           ;PS_2.c: 1150: delayUS(10);
  7004  1D8D  3000               	movlw	0
  7005  1D8E  0020               	movlb	0	; select bank0
  7006  1D8F  00A8               	movwf	delayUS@US+3
  7007  1D90  3000               	movlw	0
  7008  1D91  00A7               	movwf	delayUS@US+2
  7009  1D92  3000               	movlw	0
  7010  1D93  00A6               	movwf	delayUS@US+1
  7011  1D94  300A               	movlw	10
  7012  1D95  00A5               	movwf	delayUS@US
  7013  1D96  3190  2002  319D   	fcall	_delayUS
  7014                           
  7015                           ;PS_2.c: 1151: if(ECHO)
  7016  1D99  0021               	movlb	1	; select bank1
  7017  1D9A  0869               	movf	_ECHO^(0+128),w	;volatile
  7018  1D9B  1903               	btfsc	3,2
  7019  1D9C  2D71               	goto	l7222
  7020  1D9D                     l7224:	
  7021                           
  7022                           ;PS_2.c: 1154: }
  7023                           ;PS_2.c: 1155: }
  7024                           ;PS_2.c: 1156: PS_2_DISABLE_INTERRUPT(0b00100000);
  7025  1D9D  3020               	movlw	32
  7026  1D9E  318B  23C5  319D   	fcall	_PS_2_DISABLE_INTERRUPT
  7027                           
  7028                           ;PS_2.c: 1157: if(ECHO)
  7029  1DA1  0021               	movlb	1	; select bank1
  7030  1DA2  0869               	movf	_ECHO^(0+128),w	;volatile
  7031  1DA3  1903               	btfsc	3,2
  7032  1DA4  2DA7               	goto	l7234
  7033                           
  7034                           ;PS_2.c: 1158: {
  7035                           ;PS_2.c: 1159: return 1;
  7036  1DA5  3001               	movlw	1
  7037                           
  7038                           ;PS_2.c: 1160: }
  7039  1DA6  0008               	return
  7040  1DA7                     l7234:	
  7041                           
  7042                           ;PS_2.c: 1161: else
  7043                           ;PS_2.c: 1162: {
  7044                           ;PS_2.c: 1163: return 0;
  7045  1DA7  3000               	movlw	0
  7046  1DA8  0008               	return
  7047  1DA9                     __end_of_Keyboard_Connected:	
  7048                           
  7049                           	psect	text12
  7050  0123                     __ptext12:	
  7051 ;; *************** function _PS_2_Update *****************
  7052 ;; Defined at:
  7053 ;;		line 259 in file "PS_2.c"
  7054 ;; Parameters:    Size  Location     Type
  7055 ;;		None
  7056 ;; Auto vars:     Size  Location     Type
  7057 ;;  buf            60    0[BANK5 ] unsigned char [60]
  7058 ;;  temp            1   64[BANK5 ] unsigned char 
  7059 ;; Return value:  Size  Location     Type
  7060 ;;		None               void
  7061 ;; Registers used:
  7062 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7063 ;; Tracked objects:
  7064 ;;		On entry : 0/0
  7065 ;;		On exit  : 0/0
  7066 ;;		Unchanged: 0/0
  7067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7069 ;;      Locals:         0       0       0       0       0       0      65       0       0       0       0       0       
      +0       0
  7070 ;;      Temps:          0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0
  7071 ;;      Totals:         0       0       0       0       9       0      65       0       0       0       0       0       
      +0       0
  7072 ;;Total ram usage:       74 bytes
  7073 ;; Hardware stack levels used:    1
  7074 ;; Hardware stack levels required when called:    8
  7075 ;; This function calls:
  7076 ;;		_CheckSum_byte
  7077 ;;		_Decode_Scan_Code
  7078 ;;		_Decode_Scan_Code_Function
  7079 ;;		_Decode_Scan_Code_FunctionE0
  7080 ;;		_Decode_Scan_Code_Shift
  7081 ;;		_ISNUMBER
  7082 ;;		_PS_2_DISABLE_INTERRUPT
  7083 ;;		_PS_2_ENABLE_INTERRUPT
  7084 ;;		_Reverse_Byte
  7085 ;;		_Send_PS2
  7086 ;;		_SetBaud
  7087 ;;		_UART_send_break_timed
  7088 ;;		_UARTchar
  7089 ;;		_UARTstringWAIT
  7090 ;;		___lmul
  7091 ;;		_delayUS
  7092 ;;		_sprintf
  7093 ;; This function is called by:
  7094 ;;		_main
  7095 ;;		_Keyboard_Connected
  7096 ;; This function uses a non-reentrant model
  7097 ;;
  7098                           
  7099                           
  7100                           ;psect for function _PS_2_Update
  7101  0123                     _PS_2_Update:	
  7102                           
  7103                           ;PS_2.c: 261: unsigned char temp =0;
  7104                           
  7105                           ;incstack = 0
  7106                           ; Regs used in _PS_2_Update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7107  0123  0025               	movlb	5	; select bank5
  7108  0124  01E0               	clrf	PS_2_Update@temp^(0+640)
  7109                           
  7110                           ;PS_2.c: 262: unsigned char buf[60];
  7111                           ;PS_2.c: 264: if(Read_Timer < 20)
  7112  0125  3000               	movlw	0
  7113  0126  0024               	movlb	4	; select bank4
  7114  0127  0225               	subwf	(_Read_Timer+1)^(0+512),w
  7115  0128  3014               	movlw	20
  7116  0129  1903               	skipnz
  7117  012A  0224               	subwf	_Read_Timer^(0+512),w
  7118  012B  1803               	skipnc
  7119  012C  2932               	goto	l6490
  7120                           
  7121                           ;PS_2.c: 265: {
  7122                           ;PS_2.c: 266: Read_Timer++;
  7123  012D  3001               	movlw	1
  7124  012E  07A4               	addwf	_Read_Timer^(0+512),f
  7125  012F  3000               	movlw	0
  7126  0130  3DA5               	addwfc	(_Read_Timer+1)^(0+512),f
  7127                           
  7128                           ;PS_2.c: 267: }
  7129  0131  2934               	goto	l6492
  7130  0132                     l6490:	
  7131                           
  7132                           ;PS_2.c: 268: else
  7133                           ;PS_2.c: 269: {
  7134                           ;PS_2.c: 270: PS_2_bits = 0;
  7135  0132  0020               	movlb	0	; select bank0
  7136  0133  01EA               	clrf	_PS_2_bits
  7137  0134                     l6492:	
  7138                           
  7139                           ;PS_2.c: 271: }
  7140                           ;PS_2.c: 273: if(Read_Timer == 20 && PS_2_bits != 0)
  7141  0134  3014               	movlw	20
  7142  0135  0024               	movlb	4	; select bank4
  7143  0136  0624               	xorwf	_Read_Timer^(0+512),w
  7144  0137  0425               	iorwf	(_Read_Timer+1)^(0+512),w
  7145  0138  1D03               	skipz
  7146  0139  0008               	return
  7147  013A  0020               	movlb	0	; select bank0
  7148  013B  086A               	movf	_PS_2_bits,w
  7149  013C  1903               	btfsc	3,2
  7150  013D  0008               	return
  7151                           
  7152                           ;PS_2.c: 274: {
  7153                           ;PS_2.c: 276: PS_2_DISABLE_INTERRUPT(0b00100000);
  7154  013E  3020               	movlw	32
  7155  013F  318B  23C5  3181   	fcall	_PS_2_DISABLE_INTERRUPT
  7156                           
  7157                           ;PS_2.c: 277: PIE1bits.RCIE = 0;
  7158  0142  0021               	movlb	1	; select bank1
  7159  0143  1291               	bcf	17,5	;volatile
  7160                           
  7161                           ;PS_2.c: 279: if(PS_2_bits >= 11)
  7162  0144  300B               	movlw	11
  7163  0145  0020               	movlb	0	; select bank0
  7164  0146  026A               	subwf	_PS_2_bits,w
  7165  0147  1C03               	skipc
  7166  0148  29A3               	goto	l6514
  7167                           
  7168                           ;PS_2.c: 280: {
  7169                           ;PS_2.c: 283: PS_2_Read_Data_First = PS_2_Read_Data_FirstTEMP;
  7170  0149  0024               	movlb	4	; select bank4
  7171  014A  082F               	movf	(_PS_2_Read_Data_FirstTEMP+1)^(0+512),w
  7172  014B  0023               	movlb	3	; select bank3
  7173  014C  01A1               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7174  014D  07A1               	addwf	(_PS_2_Read_Data_First+1)^(0+384),f
  7175  014E  0024               	movlb	4	; select bank4
  7176  014F  082E               	movf	_PS_2_Read_Data_FirstTEMP^(0+512),w
  7177  0150  0023               	movlb	3	; select bank3
  7178  0151  01A0               	clrf	_PS_2_Read_Data_First^(0+384)
  7179  0152  07A0               	addwf	_PS_2_Read_Data_First^(0+384),f
  7180                           
  7181                           ;PS_2.c: 284: if(CheckSum_byte((PS_2_Read_Data_First >> 2) & 0xFF , 3) == ((PS_2_Read_Da
      +                          ta_First & 0x02)>> 1))
  7182  0153  0821               	movf	(_PS_2_Read_Data_First+1)^(0+384),w
  7183  0154  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7184  0155  0820               	movf	_PS_2_Read_Data_First^(0+384),w
  7185  0156  00AF               	movwf	??_PS_2_Update^(0+384)
  7186  0157  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7187  0158  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7188  0159  3001               	movlw	1
  7189  015A  052F               	andwf	??_PS_2_Update^(0+384),w
  7190  015B  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  7191  015C  3000               	movlw	0
  7192  015D  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7193  015E  00B2               	movwf	(??_PS_2_Update+3)^(0+384)
  7194  015F  0821               	movf	(_PS_2_Read_Data_First+1)^(0+384),w
  7195  0160  00B4               	movwf	((??_PS_2_Update+4)^(0+384)+1)
  7196  0161  0820               	movf	_PS_2_Read_Data_First^(0+384),w
  7197  0162  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  7198  0163  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7199  0164  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7200  0165  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7201  0166  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7202  0167  30FF               	movlw	255
  7203  0168  0533               	andwf	(??_PS_2_Update+4)^(0+384),w
  7204  0169  0020               	movlb	0	; select bank0
  7205  016A  00A5               	movwf	CheckSum_byte@This
  7206  016B  3000               	movlw	0
  7207  016C  0023               	movlb	3	; select bank3
  7208  016D  0534               	andwf	(??_PS_2_Update+5)^(0+384),w
  7209  016E  0020               	movlb	0	; select bank0
  7210  016F  00A6               	movwf	CheckSum_byte@This+1
  7211  0170  3003               	movlw	3
  7212  0171  0023               	movlb	3	; select bank3
  7213  0172  00B5               	movwf	(??_PS_2_Update+6)^(0+384)
  7214  0173  0835               	movf	(??_PS_2_Update+6)^(0+384),w
  7215  0174  0020               	movlb	0	; select bank0
  7216  0175  00A7               	movwf	CheckSum_byte@Odd_Even
  7217  0176  319A  229B  3181   	fcall	_CheckSum_byte
  7218  0179  0023               	movlb	3	; select bank3
  7219  017A  00B6               	movwf	(??_PS_2_Update+7)^(0+384)
  7220  017B  01B7               	clrf	((??_PS_2_Update+7)^(0+384)+1)
  7221  017C  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  7222  017D  0637               	xorwf	(??_PS_2_Update+8)^(0+384),w
  7223  017E  1D03               	skipz
  7224  017F  2982               	goto	u8625
  7225  0180  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  7226  0181  0636               	xorwf	(??_PS_2_Update+7)^(0+384),w
  7227  0182                     u8625:	
  7228  0182  1D03               	skipz
  7229  0183  29A0               	goto	l6512
  7230                           
  7231                           ;PS_2.c: 285: {
  7232                           ;PS_2.c: 287: PS_2_Read_Data_First = ((PS_2_Read_Data_First >> 2) & 0xFF);
  7233  0184  0821               	movf	(_PS_2_Read_Data_First+1)^(0+384),w
  7234  0185  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7235  0186  0820               	movf	_PS_2_Read_Data_First^(0+384),w
  7236  0187  00AF               	movwf	??_PS_2_Update^(0+384)
  7237  0188  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7238  0189  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7239  018A  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7240  018B  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7241  018C  30FF               	movlw	255
  7242  018D  052F               	andwf	??_PS_2_Update^(0+384),w
  7243  018E  00A0               	movwf	_PS_2_Read_Data_First^(0+384)
  7244  018F  3000               	movlw	0
  7245  0190  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7246  0191  00A1               	movwf	(_PS_2_Read_Data_First+1)^(0+384)
  7247                           
  7248                           ;PS_2.c: 288: PS_2_Read_Data_First = (unsigned int) Reverse_Byte((unsigned char) PS_2_Re
      +                          ad_Data_First);
  7249  0192  0820               	movf	_PS_2_Read_Data_First^(0+384),w
  7250  0193  319C  24FF  3181   	fcall	_Reverse_Byte
  7251  0196  0023               	movlb	3	; select bank3
  7252  0197  00AF               	movwf	??_PS_2_Update^(0+384)
  7253  0198  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  7254  0199  082F               	movf	??_PS_2_Update^(0+384),w
  7255  019A  00A0               	movwf	_PS_2_Read_Data_First^(0+384)
  7256  019B  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  7257  019C  00A1               	movwf	(_PS_2_Read_Data_First+1)^(0+384)
  7258                           
  7259                           ;PS_2.c: 289: No_Keyboard = 0;
  7260  019D  0021               	movlb	1	; select bank1
  7261  019E  01EB               	clrf	_No_Keyboard^(0+128)
  7262                           
  7263                           ;PS_2.c: 290: }
  7264  019F  29A3               	goto	l6514
  7265  01A0                     l6512:	
  7266                           
  7267                           ;PS_2.c: 291: else
  7268                           ;PS_2.c: 292: {
  7269                           ;PS_2.c: 294: PS_2_Read_Data_First =0;
  7270  01A0  0023               	movlb	3	; select bank3
  7271  01A1  01A0               	clrf	_PS_2_Read_Data_First^(0+384)
  7272  01A2  01A1               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7273  01A3                     l6514:	
  7274                           
  7275                           ;PS_2.c: 295: }
  7276                           ;PS_2.c: 296: }
  7277                           ;PS_2.c: 297: if(PS_2_bits >= (22))
  7278  01A3  3016               	movlw	22
  7279  01A4  0020               	movlb	0	; select bank0
  7280  01A5  026A               	subwf	_PS_2_bits,w
  7281  01A6  1C03               	skipc
  7282  01A7  2A04               	goto	l6528
  7283                           
  7284                           ;PS_2.c: 298: {
  7285                           ;PS_2.c: 301: PS_2_Read_Data_Second = PS_2_Read_Data_SecondTEMP;
  7286  01A8  0024               	movlb	4	; select bank4
  7287  01A9  0833               	movf	(_PS_2_Read_Data_SecondTEMP+1)^(0+512),w
  7288  01AA  0023               	movlb	3	; select bank3
  7289  01AB  01A5               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7290  01AC  07A5               	addwf	(_PS_2_Read_Data_Second+1)^(0+384),f
  7291  01AD  0024               	movlb	4	; select bank4
  7292  01AE  0832               	movf	_PS_2_Read_Data_SecondTEMP^(0+512),w
  7293  01AF  0023               	movlb	3	; select bank3
  7294  01B0  01A4               	clrf	_PS_2_Read_Data_Second^(0+384)
  7295  01B1  07A4               	addwf	_PS_2_Read_Data_Second^(0+384),f
  7296                           
  7297                           ;PS_2.c: 302: if(CheckSum_byte((PS_2_Read_Data_Second >> 2) & 0xFF , 3) == ((PS_2_Read_D
      +                          ata_Second & 0x02)>> 1))
  7298  01B2  0825               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7299  01B3  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7300  01B4  0824               	movf	_PS_2_Read_Data_Second^(0+384),w
  7301  01B5  00AF               	movwf	??_PS_2_Update^(0+384)
  7302  01B6  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7303  01B7  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7304  01B8  3001               	movlw	1
  7305  01B9  052F               	andwf	??_PS_2_Update^(0+384),w
  7306  01BA  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  7307  01BB  3000               	movlw	0
  7308  01BC  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7309  01BD  00B2               	movwf	(??_PS_2_Update+3)^(0+384)
  7310  01BE  0825               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7311  01BF  00B4               	movwf	((??_PS_2_Update+4)^(0+384)+1)
  7312  01C0  0824               	movf	_PS_2_Read_Data_Second^(0+384),w
  7313  01C1  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  7314  01C2  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7315  01C3  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7316  01C4  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7317  01C5  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7318  01C6  30FF               	movlw	255
  7319  01C7  0533               	andwf	(??_PS_2_Update+4)^(0+384),w
  7320  01C8  0020               	movlb	0	; select bank0
  7321  01C9  00A5               	movwf	CheckSum_byte@This
  7322  01CA  3000               	movlw	0
  7323  01CB  0023               	movlb	3	; select bank3
  7324  01CC  0534               	andwf	(??_PS_2_Update+5)^(0+384),w
  7325  01CD  0020               	movlb	0	; select bank0
  7326  01CE  00A6               	movwf	CheckSum_byte@This+1
  7327  01CF  3003               	movlw	3
  7328  01D0  0023               	movlb	3	; select bank3
  7329  01D1  00B5               	movwf	(??_PS_2_Update+6)^(0+384)
  7330  01D2  0835               	movf	(??_PS_2_Update+6)^(0+384),w
  7331  01D3  0020               	movlb	0	; select bank0
  7332  01D4  00A7               	movwf	CheckSum_byte@Odd_Even
  7333  01D5  319A  229B  3181   	fcall	_CheckSum_byte
  7334  01D8  0023               	movlb	3	; select bank3
  7335  01D9  00B6               	movwf	(??_PS_2_Update+7)^(0+384)
  7336  01DA  01B7               	clrf	((??_PS_2_Update+7)^(0+384)+1)
  7337  01DB  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  7338  01DC  0637               	xorwf	(??_PS_2_Update+8)^(0+384),w
  7339  01DD  1D03               	skipz
  7340  01DE  29E1               	goto	u8645
  7341  01DF  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  7342  01E0  0636               	xorwf	(??_PS_2_Update+7)^(0+384),w
  7343  01E1                     u8645:	
  7344  01E1  1D03               	skipz
  7345  01E2  29FF               	goto	l6526
  7346                           
  7347                           ;PS_2.c: 303: {
  7348                           ;PS_2.c: 305: PS_2_Read_Data_Second = ((PS_2_Read_Data_Second >> 2) & 0xFF);
  7349  01E3  0825               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7350  01E4  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7351  01E5  0824               	movf	_PS_2_Read_Data_Second^(0+384),w
  7352  01E6  00AF               	movwf	??_PS_2_Update^(0+384)
  7353  01E7  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7354  01E8  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7355  01E9  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7356  01EA  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7357  01EB  30FF               	movlw	255
  7358  01EC  052F               	andwf	??_PS_2_Update^(0+384),w
  7359  01ED  00A4               	movwf	_PS_2_Read_Data_Second^(0+384)
  7360  01EE  3000               	movlw	0
  7361  01EF  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7362  01F0  00A5               	movwf	(_PS_2_Read_Data_Second+1)^(0+384)
  7363                           
  7364                           ;PS_2.c: 306: PS_2_Read_Data_Second = (unsigned int) Reverse_Byte((unsigned char) PS_2_R
      +                          ead_Data_Second);
  7365  01F1  0824               	movf	_PS_2_Read_Data_Second^(0+384),w
  7366  01F2  319C  24FF  3181   	fcall	_Reverse_Byte
  7367  01F5  0023               	movlb	3	; select bank3
  7368  01F6  00AF               	movwf	??_PS_2_Update^(0+384)
  7369  01F7  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  7370  01F8  082F               	movf	??_PS_2_Update^(0+384),w
  7371  01F9  00A4               	movwf	_PS_2_Read_Data_Second^(0+384)
  7372  01FA  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  7373  01FB  00A5               	movwf	(_PS_2_Read_Data_Second+1)^(0+384)
  7374                           
  7375                           ;PS_2.c: 307: No_Keyboard = 0;
  7376  01FC  0021               	movlb	1	; select bank1
  7377  01FD  01EB               	clrf	_No_Keyboard^(0+128)
  7378                           
  7379                           ;PS_2.c: 308: }
  7380  01FE  2A04               	goto	l6528
  7381  01FF                     l6526:	
  7382                           
  7383                           ;PS_2.c: 309: else
  7384                           ;PS_2.c: 310: {
  7385                           ;PS_2.c: 312: PS_2_Read_Data_First =0;
  7386  01FF  0023               	movlb	3	; select bank3
  7387  0200  01A0               	clrf	_PS_2_Read_Data_First^(0+384)
  7388  0201  01A1               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7389                           
  7390                           ;PS_2.c: 313: PS_2_Read_Data_Second =0;
  7391  0202  01A4               	clrf	_PS_2_Read_Data_Second^(0+384)
  7392  0203  01A5               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7393  0204                     l6528:	
  7394                           
  7395                           ;PS_2.c: 314: }
  7396                           ;PS_2.c: 315: }
  7397                           ;PS_2.c: 316: if(PS_2_bits >= (33))
  7398  0204  3021               	movlw	33
  7399  0205  0020               	movlb	0	; select bank0
  7400  0206  026A               	subwf	_PS_2_bits,w
  7401  0207  1C03               	skipc
  7402  0208  2A67               	goto	l6542
  7403                           
  7404                           ;PS_2.c: 317: {
  7405                           ;PS_2.c: 320: PS_2_Read_Data_Third = PS_2_Read_Data_ThirdTEMP;
  7406  0209  0024               	movlb	4	; select bank4
  7407  020A  0835               	movf	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512),w
  7408  020B  0023               	movlb	3	; select bank3
  7409  020C  01A7               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  7410  020D  07A7               	addwf	(_PS_2_Read_Data_Third+1)^(0+384),f
  7411  020E  0024               	movlb	4	; select bank4
  7412  020F  0834               	movf	_PS_2_Read_Data_ThirdTEMP^(0+512),w
  7413  0210  0023               	movlb	3	; select bank3
  7414  0211  01A6               	clrf	_PS_2_Read_Data_Third^(0+384)
  7415  0212  07A6               	addwf	_PS_2_Read_Data_Third^(0+384),f
  7416                           
  7417                           ;PS_2.c: 321: if(CheckSum_byte((PS_2_Read_Data_Third >> 2) & 0xFF , 3) == ((PS_2_Read_Da
      +                          ta_Third & 0x02)>> 1))
  7418  0213  0827               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7419  0214  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7420  0215  0826               	movf	_PS_2_Read_Data_Third^(0+384),w
  7421  0216  00AF               	movwf	??_PS_2_Update^(0+384)
  7422  0217  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7423  0218  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7424  0219  3001               	movlw	1
  7425  021A  052F               	andwf	??_PS_2_Update^(0+384),w
  7426  021B  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  7427  021C  3000               	movlw	0
  7428  021D  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7429  021E  00B2               	movwf	(??_PS_2_Update+3)^(0+384)
  7430  021F  0827               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7431  0220  00B4               	movwf	((??_PS_2_Update+4)^(0+384)+1)
  7432  0221  0826               	movf	_PS_2_Read_Data_Third^(0+384),w
  7433  0222  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  7434  0223  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7435  0224  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7436  0225  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7437  0226  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7438  0227  30FF               	movlw	255
  7439  0228  0533               	andwf	(??_PS_2_Update+4)^(0+384),w
  7440  0229  0020               	movlb	0	; select bank0
  7441  022A  00A5               	movwf	CheckSum_byte@This
  7442  022B  3000               	movlw	0
  7443  022C  0023               	movlb	3	; select bank3
  7444  022D  0534               	andwf	(??_PS_2_Update+5)^(0+384),w
  7445  022E  0020               	movlb	0	; select bank0
  7446  022F  00A6               	movwf	CheckSum_byte@This+1
  7447  0230  3003               	movlw	3
  7448  0231  0023               	movlb	3	; select bank3
  7449  0232  00B5               	movwf	(??_PS_2_Update+6)^(0+384)
  7450  0233  0835               	movf	(??_PS_2_Update+6)^(0+384),w
  7451  0234  0020               	movlb	0	; select bank0
  7452  0235  00A7               	movwf	CheckSum_byte@Odd_Even
  7453  0236  319A  229B  3181   	fcall	_CheckSum_byte
  7454  0239  0023               	movlb	3	; select bank3
  7455  023A  00B6               	movwf	(??_PS_2_Update+7)^(0+384)
  7456  023B  01B7               	clrf	((??_PS_2_Update+7)^(0+384)+1)
  7457  023C  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  7458  023D  0637               	xorwf	(??_PS_2_Update+8)^(0+384),w
  7459  023E  1D03               	skipz
  7460  023F  2A42               	goto	u8665
  7461  0240  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  7462  0241  0636               	xorwf	(??_PS_2_Update+7)^(0+384),w
  7463  0242                     u8665:	
  7464  0242  1D03               	skipz
  7465  0243  2A60               	goto	l6540
  7466                           
  7467                           ;PS_2.c: 322: {
  7468                           ;PS_2.c: 324: PS_2_Read_Data_Third = ((PS_2_Read_Data_Third >> 2) & 0xFF);
  7469  0244  0827               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7470  0245  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7471  0246  0826               	movf	_PS_2_Read_Data_Third^(0+384),w
  7472  0247  00AF               	movwf	??_PS_2_Update^(0+384)
  7473  0248  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7474  0249  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7475  024A  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7476  024B  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7477  024C  30FF               	movlw	255
  7478  024D  052F               	andwf	??_PS_2_Update^(0+384),w
  7479  024E  00A6               	movwf	_PS_2_Read_Data_Third^(0+384)
  7480  024F  3000               	movlw	0
  7481  0250  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7482  0251  00A7               	movwf	(_PS_2_Read_Data_Third+1)^(0+384)
  7483                           
  7484                           ;PS_2.c: 325: PS_2_Read_Data_Third = (unsigned int) Reverse_Byte((unsigned char) PS_2_Re
      +                          ad_Data_Third);
  7485  0252  0826               	movf	_PS_2_Read_Data_Third^(0+384),w
  7486  0253  319C  24FF  3181   	fcall	_Reverse_Byte
  7487  0256  0023               	movlb	3	; select bank3
  7488  0257  00AF               	movwf	??_PS_2_Update^(0+384)
  7489  0258  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  7490  0259  082F               	movf	??_PS_2_Update^(0+384),w
  7491  025A  00A6               	movwf	_PS_2_Read_Data_Third^(0+384)
  7492  025B  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  7493  025C  00A7               	movwf	(_PS_2_Read_Data_Third+1)^(0+384)
  7494                           
  7495                           ;PS_2.c: 326: No_Keyboard = 0;
  7496  025D  0021               	movlb	1	; select bank1
  7497  025E  01EB               	clrf	_No_Keyboard^(0+128)
  7498                           
  7499                           ;PS_2.c: 327: }
  7500  025F  2A67               	goto	l6542
  7501  0260                     l6540:	
  7502                           
  7503                           ;PS_2.c: 328: else
  7504                           ;PS_2.c: 329: {
  7505                           ;PS_2.c: 331: PS_2_Read_Data_First =0;
  7506  0260  0023               	movlb	3	; select bank3
  7507  0261  01A0               	clrf	_PS_2_Read_Data_First^(0+384)
  7508  0262  01A1               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7509                           
  7510                           ;PS_2.c: 332: PS_2_Read_Data_Second =0;
  7511  0263  01A4               	clrf	_PS_2_Read_Data_Second^(0+384)
  7512  0264  01A5               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7513                           
  7514                           ;PS_2.c: 333: PS_2_Read_Data_Third =0;
  7515  0265  01A6               	clrf	_PS_2_Read_Data_Third^(0+384)
  7516  0266  01A7               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  7517  0267                     l6542:	
  7518                           
  7519                           ;PS_2.c: 334: }
  7520                           ;PS_2.c: 335: }
  7521                           ;PS_2.c: 336: if(PS_2_bits >= (44))
  7522  0267  302C               	movlw	44
  7523  0268  0020               	movlb	0	; select bank0
  7524  0269  026A               	subwf	_PS_2_bits,w
  7525  026A  1C03               	skipc
  7526  026B  2ACC               	goto	l6556
  7527                           
  7528                           ;PS_2.c: 337: {
  7529                           ;PS_2.c: 340: PS_2_Read_Data_Forth = PS_2_Read_Data_ForthTEMP;
  7530  026C  0024               	movlb	4	; select bank4
  7531  026D  0831               	movf	(_PS_2_Read_Data_ForthTEMP+1)^(0+512),w
  7532  026E  0023               	movlb	3	; select bank3
  7533  026F  01A3               	clrf	(_PS_2_Read_Data_Forth+1)^(0+384)
  7534  0270  07A3               	addwf	(_PS_2_Read_Data_Forth+1)^(0+384),f
  7535  0271  0024               	movlb	4	; select bank4
  7536  0272  0830               	movf	_PS_2_Read_Data_ForthTEMP^(0+512),w
  7537  0273  0023               	movlb	3	; select bank3
  7538  0274  01A2               	clrf	_PS_2_Read_Data_Forth^(0+384)
  7539  0275  07A2               	addwf	_PS_2_Read_Data_Forth^(0+384),f
  7540                           
  7541                           ;PS_2.c: 341: if(CheckSum_byte((PS_2_Read_Data_Forth >> 2) & 0xFF , 3) == ((PS_2_Read_Da
      +                          ta_Forth & 0x02)>> 1))
  7542  0276  0823               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7543  0277  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7544  0278  0822               	movf	_PS_2_Read_Data_Forth^(0+384),w
  7545  0279  00AF               	movwf	??_PS_2_Update^(0+384)
  7546  027A  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7547  027B  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7548  027C  3001               	movlw	1
  7549  027D  052F               	andwf	??_PS_2_Update^(0+384),w
  7550  027E  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  7551  027F  3000               	movlw	0
  7552  0280  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7553  0281  00B2               	movwf	(??_PS_2_Update+3)^(0+384)
  7554  0282  0823               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7555  0283  00B4               	movwf	((??_PS_2_Update+4)^(0+384)+1)
  7556  0284  0822               	movf	_PS_2_Read_Data_Forth^(0+384),w
  7557  0285  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  7558  0286  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7559  0287  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7560  0288  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7561  0289  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7562  028A  30FF               	movlw	255
  7563  028B  0533               	andwf	(??_PS_2_Update+4)^(0+384),w
  7564  028C  0020               	movlb	0	; select bank0
  7565  028D  00A5               	movwf	CheckSum_byte@This
  7566  028E  3000               	movlw	0
  7567  028F  0023               	movlb	3	; select bank3
  7568  0290  0534               	andwf	(??_PS_2_Update+5)^(0+384),w
  7569  0291  0020               	movlb	0	; select bank0
  7570  0292  00A6               	movwf	CheckSum_byte@This+1
  7571  0293  3003               	movlw	3
  7572  0294  0023               	movlb	3	; select bank3
  7573  0295  00B5               	movwf	(??_PS_2_Update+6)^(0+384)
  7574  0296  0835               	movf	(??_PS_2_Update+6)^(0+384),w
  7575  0297  0020               	movlb	0	; select bank0
  7576  0298  00A7               	movwf	CheckSum_byte@Odd_Even
  7577  0299  319A  229B  3181   	fcall	_CheckSum_byte
  7578  029C  0023               	movlb	3	; select bank3
  7579  029D  00B6               	movwf	(??_PS_2_Update+7)^(0+384)
  7580  029E  01B7               	clrf	((??_PS_2_Update+7)^(0+384)+1)
  7581  029F  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  7582  02A0  0637               	xorwf	(??_PS_2_Update+8)^(0+384),w
  7583  02A1  1D03               	skipz
  7584  02A2  2AA5               	goto	u8685
  7585  02A3  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  7586  02A4  0636               	xorwf	(??_PS_2_Update+7)^(0+384),w
  7587  02A5                     u8685:	
  7588  02A5  1D03               	skipz
  7589  02A6  2AC3               	goto	l6554
  7590                           
  7591                           ;PS_2.c: 342: {
  7592                           ;PS_2.c: 344: PS_2_Read_Data_Forth = ((PS_2_Read_Data_Forth >> 2) & 0xFF);
  7593  02A7  0823               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7594  02A8  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7595  02A9  0822               	movf	_PS_2_Read_Data_Forth^(0+384),w
  7596  02AA  00AF               	movwf	??_PS_2_Update^(0+384)
  7597  02AB  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7598  02AC  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7599  02AD  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7600  02AE  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7601  02AF  30FF               	movlw	255
  7602  02B0  052F               	andwf	??_PS_2_Update^(0+384),w
  7603  02B1  00A2               	movwf	_PS_2_Read_Data_Forth^(0+384)
  7604  02B2  3000               	movlw	0
  7605  02B3  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7606  02B4  00A3               	movwf	(_PS_2_Read_Data_Forth+1)^(0+384)
  7607                           
  7608                           ;PS_2.c: 345: PS_2_Read_Data_Forth = (unsigned int) Reverse_Byte((unsigned char) PS_2_Re
      +                          ad_Data_Forth);
  7609  02B5  0822               	movf	_PS_2_Read_Data_Forth^(0+384),w
  7610  02B6  319C  24FF  3181   	fcall	_Reverse_Byte
  7611  02B9  0023               	movlb	3	; select bank3
  7612  02BA  00AF               	movwf	??_PS_2_Update^(0+384)
  7613  02BB  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  7614  02BC  082F               	movf	??_PS_2_Update^(0+384),w
  7615  02BD  00A2               	movwf	_PS_2_Read_Data_Forth^(0+384)
  7616  02BE  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  7617  02BF  00A3               	movwf	(_PS_2_Read_Data_Forth+1)^(0+384)
  7618                           
  7619                           ;PS_2.c: 346: No_Keyboard = 0;
  7620  02C0  0021               	movlb	1	; select bank1
  7621  02C1  01EB               	clrf	_No_Keyboard^(0+128)
  7622                           
  7623                           ;PS_2.c: 347: }
  7624  02C2  2ACC               	goto	l6556
  7625  02C3                     l6554:	
  7626                           
  7627                           ;PS_2.c: 348: else
  7628                           ;PS_2.c: 349: {
  7629                           ;PS_2.c: 351: PS_2_Read_Data_First =0;
  7630  02C3  0023               	movlb	3	; select bank3
  7631  02C4  01A0               	clrf	_PS_2_Read_Data_First^(0+384)
  7632  02C5  01A1               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7633                           
  7634                           ;PS_2.c: 352: PS_2_Read_Data_Second =0;
  7635  02C6  01A4               	clrf	_PS_2_Read_Data_Second^(0+384)
  7636  02C7  01A5               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7637                           
  7638                           ;PS_2.c: 353: PS_2_Read_Data_Third =0;
  7639  02C8  01A6               	clrf	_PS_2_Read_Data_Third^(0+384)
  7640  02C9  01A7               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  7641                           
  7642                           ;PS_2.c: 354: PS_2_Read_Data_Forth =0;
  7643  02CA  01A2               	clrf	_PS_2_Read_Data_Forth^(0+384)
  7644  02CB  01A3               	clrf	(_PS_2_Read_Data_Forth+1)^(0+384)
  7645  02CC                     l6556:	
  7646                           
  7647                           ;PS_2.c: 355: }
  7648                           ;PS_2.c: 356: }
  7649                           ;PS_2.c: 358: if(PS_2_Read_Data_Forth)
  7650  02CC  0023               	movlb	3	; select bank3
  7651  02CD  0823               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7652  02CE  0422               	iorwf	_PS_2_Read_Data_Forth^(0+384),w
  7653  02CF  1903               	skipnz
  7654  02D0  2AE7               	goto	l6568
  7655                           
  7656                           ;PS_2.c: 359: {
  7657                           ;PS_2.c: 360: if(PS_2_Read_Data_First != 0xF0 && PS_2_Read_Data_Second != 0xF0 &&
  7658                           ;PS_2.c: 361: PS_2_Read_Data_Third != 0xF0 && PS_2_Read_Data_Forth != 0xF0)
  7659  02D1  30F0               	movlw	240
  7660  02D2  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7661  02D3  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7662  02D4  1903               	skipnz
  7663  02D5  2C1C               	goto	l6700
  7664  02D6  30F0               	movlw	240
  7665  02D7  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7666  02D8  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7667  02D9  1903               	skipnz
  7668  02DA  2C1C               	goto	l6700
  7669  02DB  30F0               	movlw	240
  7670  02DC  0626               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7671  02DD  0427               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7672  02DE  1903               	skipnz
  7673  02DF  2C1C               	goto	l6700
  7674  02E0  30F0               	movlw	240
  7675  02E1  0622               	xorwf	_PS_2_Read_Data_Forth^(0+384),w
  7676  02E2  0423               	iorwf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7677  02E3  1903               	skipnz
  7678  02E4  2C1C               	goto	l6700
  7679                           
  7680                           ;PS_2.c: 362: {
  7681                           ;PS_2.c: 364: __nop();
  7682  02E5  0000               	nop
  7683                           
  7684                           ;PS_2.c: 365: }
  7685                           ;PS_2.c: 366: }
  7686  02E6  2C1C               	goto	l6700
  7687  02E7                     l6568:	
  7688                           
  7689                           ;PS_2.c: 367: else if(PS_2_Read_Data_Third)
  7690  02E7  0023               	movlb	3	; select bank3
  7691  02E8  0827               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7692  02E9  0426               	iorwf	_PS_2_Read_Data_Third^(0+384),w
  7693  02EA  1903               	skipnz
  7694  02EB  2B3C               	goto	l6604
  7695                           
  7696                           ;PS_2.c: 368: {
  7697                           ;PS_2.c: 370: if(PS_2_Read_Data_First == 0xF0 && PS_2_Read_Data_Third != 0xF0 &&
  7698                           ;PS_2.c: 371: PS_2_Read_Data_First != 0xE0 &&
  7699                           ;PS_2.c: 372: PS_2_Read_Data_Second != 0xE0 &&
  7700                           ;PS_2.c: 373: PS_2_Read_Data_Third != 0xE0)
  7701  02EC  30F0               	movlw	240
  7702  02ED  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7703  02EE  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7704  02EF  1D03               	skipz
  7705  02F0  2B17               	goto	l6588
  7706  02F1  30F0               	movlw	240
  7707  02F2  0626               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7708  02F3  0427               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7709  02F4  1903               	skipnz
  7710  02F5  2B17               	goto	l6588
  7711  02F6  30E0               	movlw	224
  7712  02F7  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7713  02F8  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7714  02F9  1903               	skipnz
  7715  02FA  2B17               	goto	l6588
  7716  02FB  30E0               	movlw	224
  7717  02FC  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7718  02FD  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7719  02FE  1903               	skipnz
  7720  02FF  2B17               	goto	l6588
  7721  0300  30E0               	movlw	224
  7722  0301  0626               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7723  0302  0427               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7724  0303  1903               	skipnz
  7725  0304  2B17               	goto	l6588
  7726                           
  7727                           ;PS_2.c: 374: {
  7728                           ;PS_2.c: 376: if(Decode_Scan_Code_Shift(PS_2_Read_Data_Third))
  7729  0305  0826               	movf	_PS_2_Read_Data_Third^(0+384),w
  7730  0306  3199  21A3  3181   	fcall	_Decode_Scan_Code_Shift
  7731  0309  3A00               	xorlw	0
  7732  030A  1903               	skipnz
  7733  030B  2B17               	goto	l6588
  7734                           
  7735                           ;PS_2.c: 377: {
  7736                           ;PS_2.c: 379: PS_2_Read_Data_First = PS_2_Read_Data_Third;
  7737  030C  0023               	movlb	3	; select bank3
  7738  030D  0827               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7739  030E  01A1               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7740  030F  07A1               	addwf	(_PS_2_Read_Data_First+1)^(0+384),f
  7741  0310  0826               	movf	_PS_2_Read_Data_Third^(0+384),w
  7742  0311  01A0               	clrf	_PS_2_Read_Data_First^(0+384)
  7743  0312  07A0               	addwf	_PS_2_Read_Data_First^(0+384),f
  7744                           
  7745                           ;PS_2.c: 380: PS_2_Read_Data_Second = 0;
  7746  0313  01A4               	clrf	_PS_2_Read_Data_Second^(0+384)
  7747  0314  01A5               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7748                           
  7749                           ;PS_2.c: 381: PS_2_Read_Data_Third = 0;
  7750  0315  01A6               	clrf	_PS_2_Read_Data_Third^(0+384)
  7751  0316  01A7               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  7752  0317                     l6588:	
  7753                           
  7754                           ;PS_2.c: 382: }
  7755                           ;PS_2.c: 383: }
  7756                           ;PS_2.c: 384: if(PS_2_Read_Data_First == 0xE0)
  7757  0317  30E0               	movlw	224
  7758  0318  0023               	movlb	3	; select bank3
  7759  0319  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7760  031A  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7761  031B  1D03               	skipz
  7762  031C  2C1C               	goto	l6700
  7763                           
  7764                           ;PS_2.c: 385: {
  7765                           ;PS_2.c: 386: if(PS_2_Read_Data_Second == 0xF0)
  7766  031D  30F0               	movlw	240
  7767  031E  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7768  031F  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7769  0320  1D03               	skipz
  7770  0321  2C1C               	goto	l6700
  7771                           
  7772                           ;PS_2.c: 387: {
  7773                           ;PS_2.c: 388: if(PS_2_Read_Data_Third == 0x11 )
  7774  0322  3011               	movlw	17
  7775  0323  0626               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7776  0324  0427               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7777  0325  1D03               	skipz
  7778  0326  2B2A               	goto	l6596
  7779                           
  7780                           ;PS_2.c: 389: {
  7781                           ;PS_2.c: 390: LALT = 0;
  7782  0327  0022               	movlb	2	; select bank2
  7783  0328  01E7               	clrf	_LALT^(0+256)
  7784                           
  7785                           ;PS_2.c: 391: }
  7786  0329  2C1C               	goto	l6700
  7787  032A                     l6596:	
  7788                           
  7789                           ;PS_2.c: 392: else if(PS_2_Read_Data_Third == 0x14 )
  7790  032A  3014               	movlw	20
  7791  032B  0023               	movlb	3	; select bank3
  7792  032C  0626               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7793  032D  0427               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7794  032E  1D03               	skipz
  7795  032F  2B33               	goto	l6600
  7796                           
  7797                           ;PS_2.c: 393: {
  7798                           ;PS_2.c: 394: LControl = 0;
  7799  0330  0022               	movlb	2	; select bank2
  7800  0331  01E8               	clrf	_LControl^(0+256)
  7801                           
  7802                           ;PS_2.c: 395: }
  7803  0332  2C1C               	goto	l6700
  7804  0333                     l6600:	
  7805                           
  7806                           ;PS_2.c: 396: else if(PS_2_Read_Data_Third == 0x71 )
  7807  0333  3071               	movlw	113
  7808  0334  0023               	movlb	3	; select bank3
  7809  0335  0626               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7810  0336  0427               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7811  0337  1D03               	skipz
  7812  0338  2C1C               	goto	l6700
  7813                           
  7814                           ;PS_2.c: 397: {
  7815                           ;PS_2.c: 398: Delete = 0;
  7816  0339  0022               	movlb	2	; select bank2
  7817  033A  01E6               	clrf	_Delete^(0+256)
  7818                           
  7819                           ;PS_2.c: 399: }
  7820                           ;PS_2.c: 400: }
  7821                           ;PS_2.c: 401: }
  7822                           ;PS_2.c: 402: }
  7823  033B  2C1C               	goto	l6700
  7824  033C                     l6604:	
  7825                           
  7826                           ;PS_2.c: 403: else if(PS_2_Read_Data_Second)
  7827  033C  0023               	movlb	3	; select bank3
  7828  033D  0825               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7829  033E  0424               	iorwf	_PS_2_Read_Data_Second^(0+384),w
  7830  033F  1903               	skipnz
  7831  0340  2C1C               	goto	l6700
  7832                           
  7833                           ;PS_2.c: 404: {
  7834                           ;PS_2.c: 406: if(PS_2_Read_Data_First == 0xF0)
  7835  0341  30F0               	movlw	240
  7836  0342  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7837  0343  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7838  0344  1D03               	skipz
  7839  0345  2BC1               	goto	l6668
  7840                           
  7841                           ;PS_2.c: 407: {
  7842                           ;PS_2.c: 409: if(PS_2_Read_Data_Second == 0x12)
  7843  0346  3012               	movlw	18
  7844  0347  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7845  0348  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7846  0349  1D03               	skipz
  7847  034A  2B4D               	goto	l6612
  7848                           
  7849                           ;PS_2.c: 410: {
  7850                           ;PS_2.c: 411: Right_Shift_Key =0;
  7851  034B  01AD               	clrf	_Right_Shift_Key^(0+384)
  7852                           
  7853                           ;PS_2.c: 412: }
  7854  034C  2B62               	goto	l6624
  7855  034D                     l6612:	
  7856                           
  7857                           ;PS_2.c: 413: else if(PS_2_Read_Data_Second == 0x59)
  7858  034D  3059               	movlw	89
  7859  034E  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7860  034F  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7861  0350  1D03               	skipz
  7862  0351  2B54               	goto	l6616
  7863                           
  7864                           ;PS_2.c: 414: {
  7865                           ;PS_2.c: 415: Left_Shift_Key =0;
  7866  0352  01AA               	clrf	_Left_Shift_Key^(0+384)
  7867                           
  7868                           ;PS_2.c: 416: }
  7869  0353  2B62               	goto	l6624
  7870  0354                     l6616:	
  7871                           
  7872                           ;PS_2.c: 417: else if(PS_2_Read_Data_Second == 0x14)
  7873  0354  3014               	movlw	20
  7874  0355  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7875  0356  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7876  0357  1D03               	skipz
  7877  0358  2B5C               	goto	l6620
  7878                           
  7879                           ;PS_2.c: 418: {
  7880                           ;PS_2.c: 419: RControl =0;
  7881  0359  0022               	movlb	2	; select bank2
  7882  035A  01EA               	clrf	_RControl^(0+256)
  7883                           
  7884                           ;PS_2.c: 420: }
  7885  035B  2B62               	goto	l6624
  7886  035C                     l6620:	
  7887                           
  7888                           ;PS_2.c: 421: else if(PS_2_Read_Data_Second == 0x11 )
  7889  035C  3011               	movlw	17
  7890  035D  0023               	movlb	3	; select bank3
  7891  035E  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7892  035F  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7893  0360  1903               	btfsc	3,2
  7894                           
  7895                           ;PS_2.c: 422: {
  7896                           ;PS_2.c: 423: RALT =0;
  7897  0361  01AC               	clrf	_RALT^(0+384)
  7898  0362                     l6624:	
  7899                           
  7900                           ;PS_2.c: 424: }
  7901                           ;PS_2.c: 425: if(PS_2_Read_Data_Second == 0x59 || PS_2_Read_Data_Second == 0x12)
  7902  0362  3059               	movlw	89
  7903  0363  0023               	movlb	3	; select bank3
  7904  0364  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7905  0365  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7906  0366  1903               	skipnz
  7907  0367  2B6D               	goto	l6628
  7908  0368  3012               	movlw	18
  7909  0369  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7910  036A  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7911  036B  1D03               	skipz
  7912  036C  2BB9               	goto	l6664
  7913  036D                     l6628:	
  7914                           
  7915                           ;PS_2.c: 426: {
  7916                           ;PS_2.c: 427: if(Right_Shift_Key == 0 && Left_Shift_Key == 0)
  7917  036D  08AD               	movf	_Right_Shift_Key^(0+384),f
  7918  036E  1D03               	skipz
  7919  036F  2C1C               	goto	l6700
  7920  0370  08AA               	movf	_Left_Shift_Key^(0+384),f
  7921  0371  1D03               	skipz
  7922  0372  2C1C               	goto	l6700
  7923                           
  7924                           ;PS_2.c: 428: {
  7925                           ;PS_2.c: 429: if(!Send_PS2(0xED))
  7926  0373  30ED               	movlw	237
  7927  0374  318C  2469  3181   	fcall	_Send_PS2
  7928  0377  3800               	iorlw	0
  7929  0378  1D03               	skipz
  7930  0379  2B83               	goto	l6638
  7931                           
  7932                           ;PS_2.c: 430: {
  7933                           ;PS_2.c: 431: if(!Send_PS2(0x00))
  7934  037A  3000               	movlw	0
  7935  037B  318C  2469  3181   	fcall	_Send_PS2
  7936  037E  3800               	iorlw	0
  7937  037F  1D03               	skipz
  7938  0380  2B83               	goto	l6638
  7939                           
  7940                           ;PS_2.c: 432: {
  7941                           ;PS_2.c: 433: Shift_Key = 0;
  7942  0381  0023               	movlb	3	; select bank3
  7943  0382  01AE               	clrf	_Shift_Key^(0+384)
  7944  0383                     l6638:	
  7945                           
  7946                           ;PS_2.c: 434: }
  7947                           ;PS_2.c: 435: }
  7948                           ;PS_2.c: 436: if(Caps_Lock)
  7949  0383  0023               	movlb	3	; select bank3
  7950  0384  0829               	movf	_Caps_Lock^(0+384),w
  7951  0385  1903               	btfsc	3,2
  7952  0386  2BA0               	goto	l6652
  7953                           
  7954                           ;PS_2.c: 437: {
  7955                           ;PS_2.c: 438: CapsCount=0;
  7956  0387  01A8               	clrf	_CapsCount^(0+384)
  7957  0388                     l6650:	
  7958                           ;PS_2.c: 439: while(CapsCount<10)
  7959                           
  7960  0388  300A               	movlw	10
  7961  0389  0228               	subwf	_CapsCount^(0+384),w
  7962  038A  1803               	btfsc	3,0
  7963  038B  2C1C               	goto	l6700
  7964                           
  7965                           ;PS_2.c: 440: {
  7966                           ;PS_2.c: 441: if(!Send_PS2(0xED))
  7967  038C  30ED               	movlw	237
  7968  038D  318C  2469  3181   	fcall	_Send_PS2
  7969  0390  3800               	iorlw	0
  7970  0391  1D03               	skipz
  7971  0392  2B9A               	goto	l6648
  7972                           
  7973                           ;PS_2.c: 442: {
  7974                           ;PS_2.c: 443: if(!Send_PS2(0x04))
  7975  0393  3004               	movlw	4
  7976  0394  318C  2469  3181   	fcall	_Send_PS2
  7977  0397  3800               	iorlw	0
  7978  0398  1903               	btfsc	3,2
  7979  0399  2C1C               	goto	l6700
  7980  039A                     l6648:	
  7981                           ;PS_2.c: 444: {
  7982                           ;PS_2.c: 445: break;
  7983                           
  7984                           
  7985                           ;PS_2.c: 446: }
  7986                           ;PS_2.c: 447: }
  7987                           ;PS_2.c: 448: CapsCount++;
  7988  039A  3001               	movlw	1
  7989  039B  0023               	movlb	3	; select bank3
  7990  039C  00AF               	movwf	??_PS_2_Update^(0+384)
  7991  039D  082F               	movf	??_PS_2_Update^(0+384),w
  7992  039E  07A8               	addwf	_CapsCount^(0+384),f
  7993  039F  2B88               	goto	l6650
  7994  03A0                     l6652:	
  7995                           ;PS_2.c: 449: }
  7996                           ;PS_2.c: 450: }
  7997                           
  7998                           
  7999                           ;PS_2.c: 451: else
  8000                           ;PS_2.c: 452: {
  8001                           ;PS_2.c: 453: CapsCount=0;
  8002  03A0  01A8               	clrf	_CapsCount^(0+384)
  8003  03A1                     l6662:	
  8004                           ;PS_2.c: 454: while(CapsCount<10)
  8005                           
  8006  03A1  300A               	movlw	10
  8007  03A2  0228               	subwf	_CapsCount^(0+384),w
  8008  03A3  1803               	btfsc	3,0
  8009  03A4  2C1C               	goto	l6700
  8010                           
  8011                           ;PS_2.c: 455: {
  8012                           ;PS_2.c: 456: if(!Send_PS2(0xED))
  8013  03A5  30ED               	movlw	237
  8014  03A6  318C  2469  3181   	fcall	_Send_PS2
  8015  03A9  3800               	iorlw	0
  8016  03AA  1D03               	skipz
  8017  03AB  2BB3               	goto	l6660
  8018                           
  8019                           ;PS_2.c: 457: {
  8020                           ;PS_2.c: 458: if(!Send_PS2(0x00))
  8021  03AC  3000               	movlw	0
  8022  03AD  318C  2469  3181   	fcall	_Send_PS2
  8023  03B0  3800               	iorlw	0
  8024  03B1  1903               	btfsc	3,2
  8025  03B2  2C1C               	goto	l6700
  8026  03B3                     l6660:	
  8027                           ;PS_2.c: 459: {
  8028                           ;PS_2.c: 460: break;
  8029                           
  8030                           
  8031                           ;PS_2.c: 461: }
  8032                           ;PS_2.c: 462: }
  8033                           ;PS_2.c: 463: CapsCount++;
  8034  03B3  3001               	movlw	1
  8035  03B4  0023               	movlb	3	; select bank3
  8036  03B5  00AF               	movwf	??_PS_2_Update^(0+384)
  8037  03B6  082F               	movf	??_PS_2_Update^(0+384),w
  8038  03B7  07A8               	addwf	_CapsCount^(0+384),f
  8039  03B8  2BA1               	goto	l6662
  8040  03B9                     l6664:	
  8041                           ;PS_2.c: 464: }
  8042                           ;PS_2.c: 465: }
  8043                           ;PS_2.c: 466: }
  8044                           ;PS_2.c: 467: }
  8045                           
  8046                           
  8047                           ;PS_2.c: 468: else if(PS_2_Read_Data_Second == 0x58)
  8048  03B9  3058               	movlw	88
  8049  03BA  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  8050  03BB  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  8051  03BC  1D03               	skipz
  8052  03BD  2C1C               	goto	l6700
  8053                           
  8054                           ;PS_2.c: 469: {
  8055                           ;PS_2.c: 470: Caps_Lock_Key = 0;
  8056  03BE  0022               	movlb	2	; select bank2
  8057  03BF  01E4               	clrf	_Caps_Lock_Key^(0+256)
  8058                           
  8059                           ;PS_2.c: 471: }
  8060                           ;PS_2.c: 472: }
  8061  03C0  2C1C               	goto	l6700
  8062  03C1                     l6668:	
  8063                           
  8064                           ;PS_2.c: 473: else if(PS_2_Read_Data_First == 0xE0)
  8065  03C1  30E0               	movlw	224
  8066  03C2  0023               	movlb	3	; select bank3
  8067  03C3  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8068  03C4  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8069  03C5  1D03               	skipz
  8070  03C6  2C1C               	goto	l6700
  8071                           
  8072                           ;PS_2.c: 474: {
  8073                           ;PS_2.c: 476: if(PS_2_Read_Data_Second == 0x11 )
  8074  03C7  3011               	movlw	17
  8075  03C8  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  8076  03C9  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  8077  03CA  1D03               	skipz
  8078  03CB  2BD0               	goto	l6674
  8079                           
  8080                           ;PS_2.c: 477: {
  8081                           ;PS_2.c: 478: LALT = 1;
  8082  03CC  0022               	movlb	2	; select bank2
  8083  03CD  01E7               	clrf	_LALT^(0+256)
  8084  03CE  0AE7               	incf	_LALT^(0+256),f
  8085                           
  8086                           ;PS_2.c: 479: }
  8087  03CF  2BE3               	goto	l688
  8088  03D0                     l6674:	
  8089                           
  8090                           ;PS_2.c: 480: else if(PS_2_Read_Data_Second == 0x14 )
  8091  03D0  3014               	movlw	20
  8092  03D1  0023               	movlb	3	; select bank3
  8093  03D2  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  8094  03D3  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  8095  03D4  1D03               	skipz
  8096  03D5  2BDA               	goto	l6678
  8097                           
  8098                           ;PS_2.c: 481: {
  8099                           ;PS_2.c: 482: LControl = 1;
  8100  03D6  0022               	movlb	2	; select bank2
  8101  03D7  01E8               	clrf	_LControl^(0+256)
  8102  03D8  0AE8               	incf	_LControl^(0+256),f
  8103                           
  8104                           ;PS_2.c: 483: }
  8105  03D9  2BE3               	goto	l688
  8106  03DA                     l6678:	
  8107                           
  8108                           ;PS_2.c: 484: else if(PS_2_Read_Data_Second == 0x71 )
  8109  03DA  3071               	movlw	113
  8110  03DB  0023               	movlb	3	; select bank3
  8111  03DC  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  8112  03DD  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  8113  03DE  1D03               	skipz
  8114  03DF  2BE3               	goto	l688
  8115                           
  8116                           ;PS_2.c: 485: {
  8117                           ;PS_2.c: 486: Delete = 1;
  8118  03E0  0022               	movlb	2	; select bank2
  8119  03E1  01E6               	clrf	_Delete^(0+256)
  8120  03E2  0AE6               	incf	_Delete^(0+256),f
  8121  03E3                     l688:	
  8122                           
  8123                           ;PS_2.c: 487: }
  8124                           ;PS_2.c: 488: if(((RControl || LControl) + (LALT || RALT) + Delete) != 3)
  8125  03E3  0025               	movlb	5	; select bank5
  8126  03E4  01DC               	clrf	_PS_2_Update$830^(0+640)
  8127  03E5  0ADC               	incf	_PS_2_Update$830^(0+640),f
  8128  03E6  0022               	movlb	2	; select bank2
  8129  03E7  08E7               	movf	_LALT^(0+256),f
  8130  03E8  1D03               	skipz
  8131  03E9  2BF0               	goto	l6688
  8132  03EA  0023               	movlb	3	; select bank3
  8133  03EB  08AC               	movf	_RALT^(0+384),f
  8134  03EC  1D03               	skipz
  8135  03ED  2BF0               	goto	l6688
  8136  03EE  0025               	movlb	5	; select bank5
  8137  03EF  01DC               	clrf	_PS_2_Update$830^(0+640)
  8138  03F0                     l6688:	
  8139  03F0  0025               	movlb	5	; select bank5
  8140  03F1  01DD               	clrf	_PS_2_Update$831^(0+640)
  8141  03F2  0ADD               	incf	_PS_2_Update$831^(0+640),f
  8142  03F3  0022               	movlb	2	; select bank2
  8143  03F4  08EA               	movf	_RControl^(0+256),f
  8144  03F5  1D03               	skipz
  8145  03F6  2BFC               	goto	l6696
  8146  03F7  08E8               	movf	_LControl^(0+256),f
  8147  03F8  1D03               	skipz
  8148  03F9  2BFC               	goto	l6696
  8149  03FA  0025               	movlb	5	; select bank5
  8150  03FB  01DD               	clrf	_PS_2_Update$831^(0+640)
  8151  03FC                     l6696:	
  8152  03FC  0022               	movlb	2	; select bank2
  8153  03FD  0866               	movf	_Delete^(0+256),w
  8154  03FE  0023               	movlb	3	; select bank3
  8155  03FF  00AF               	movwf	??_PS_2_Update^(0+384)
  8156  0400  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  8157  0401  0025               	movlb	5	; select bank5
  8158  0402  085D               	movf	_PS_2_Update$831^(0+640),w
  8159  0403  075C               	addwf	_PS_2_Update$830^(0+640),w
  8160  0404  0023               	movlb	3	; select bank3
  8161  0405  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  8162  0406  01B2               	clrf	((??_PS_2_Update+2)^(0+384)+1)
  8163  0407  0DB2               	rlf	(??_PS_2_Update+3)^(0+384),f
  8164  0408  082F               	movf	??_PS_2_Update^(0+384),w
  8165  0409  0731               	addwf	(??_PS_2_Update+2)^(0+384),w
  8166  040A  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  8167  040B  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  8168  040C  3D32               	addwfc	(??_PS_2_Update+3)^(0+384),w
  8169  040D  00B4               	movwf	(??_PS_2_Update+5)^(0+384)
  8170  040E  3003               	movlw	3
  8171  040F  0633               	xorwf	(??_PS_2_Update+4)^(0+384),w
  8172  0410  0434               	iorwf	(??_PS_2_Update+5)^(0+384),w
  8173  0411  1903               	skipnz
  8174  0412  2C1C               	goto	l6700
  8175                           
  8176                           ;PS_2.c: 489: {
  8177                           ;PS_2.c: 491: temp = Decode_Scan_Code_FunctionE0(PS_2_Read_Data_Second);
  8178  0413  0824               	movf	_PS_2_Read_Data_Second^(0+384),w
  8179  0414  3199  2190  3181   	fcall	_Decode_Scan_Code_FunctionE0
  8180  0417  0023               	movlb	3	; select bank3
  8181  0418  00AF               	movwf	??_PS_2_Update^(0+384)
  8182  0419  082F               	movf	??_PS_2_Update^(0+384),w
  8183  041A  0025               	movlb	5	; select bank5
  8184  041B  00E0               	movwf	PS_2_Update@temp^(0+640)
  8185  041C                     l6700:	
  8186                           
  8187                           ;PS_2.c: 492: }
  8188                           ;PS_2.c: 493: }
  8189                           ;PS_2.c: 494: }
  8190                           ;PS_2.c: 495: if(PS_2_Read_Data_First && PS_2_Read_Data_Second == 0 &&
  8191                           ;PS_2.c: 496: PS_2_Read_Data_Third == 0 && PS_2_Read_Data_Forth == 0)
  8192  041C  0023               	movlb	3	; select bank3
  8193  041D  0821               	movf	(_PS_2_Read_Data_First+1)^(0+384),w
  8194  041E  0420               	iorwf	_PS_2_Read_Data_First^(0+384),w
  8195  041F  1903               	skipnz
  8196  0420  2D75               	goto	l6850
  8197  0421  0825               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  8198  0422  0424               	iorwf	_PS_2_Read_Data_Second^(0+384),w
  8199  0423  1D03               	skipz
  8200  0424  2D75               	goto	l6850
  8201  0425  0827               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  8202  0426  0426               	iorwf	_PS_2_Read_Data_Third^(0+384),w
  8203  0427  1D03               	skipz
  8204  0428  2D75               	goto	l6850
  8205  0429  0823               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  8206  042A  0422               	iorwf	_PS_2_Read_Data_Forth^(0+384),w
  8207  042B  1D03               	skipz
  8208  042C  2D75               	goto	l6850
  8209                           
  8210                           ;PS_2.c: 497: {
  8211                           ;PS_2.c: 499: if(PS_2_Read_Data_First == 0x12)
  8212  042D  3012               	movlw	18
  8213  042E  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8214  042F  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8215  0430  1D03               	skipz
  8216  0431  2C35               	goto	l6712
  8217                           
  8218                           ;PS_2.c: 500: {
  8219                           ;PS_2.c: 501: Right_Shift_Key = 1;
  8220  0432  01AD               	clrf	_Right_Shift_Key^(0+384)
  8221  0433  0AAD               	incf	_Right_Shift_Key^(0+384),f
  8222                           
  8223                           ;PS_2.c: 502: }
  8224  0434  2C3C               	goto	l6716
  8225  0435                     l6712:	
  8226                           
  8227                           ;PS_2.c: 503: else if(PS_2_Read_Data_First == 0x59)
  8228  0435  3059               	movlw	89
  8229  0436  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8230  0437  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8231  0438  1D03               	skipz
  8232  0439  2C3C               	goto	l6716
  8233                           
  8234                           ;PS_2.c: 504: {
  8235                           ;PS_2.c: 505: Left_Shift_Key = 1;
  8236  043A  01AA               	clrf	_Left_Shift_Key^(0+384)
  8237  043B  0AAA               	incf	_Left_Shift_Key^(0+384),f
  8238  043C                     l6716:	
  8239                           
  8240                           ;PS_2.c: 506: }
  8241                           ;PS_2.c: 507: if((Right_Shift_Key == 1 && Right_Shift_Key_old == 0) || (Left_Shift_Key =
      +                          = 1 && Left_Shift_Key_old == 0))
  8242  043C  082D               	movf	_Right_Shift_Key^(0+384),w
  8243  043D  3A01               	xorlw	1
  8244  043E  1D03               	skipz
  8245  043F  2C44               	goto	l6720
  8246  0440  0022               	movlb	2	; select bank2
  8247  0441  086B               	movf	_Right_Shift_Key_old^(0+256),w
  8248  0442  1903               	btfsc	3,2
  8249  0443  2C4D               	goto	l6724
  8250  0444                     l6720:	
  8251  0444  0023               	movlb	3	; select bank3
  8252  0445  082A               	movf	_Left_Shift_Key^(0+384),w
  8253  0446  3A01               	xorlw	1
  8254  0447  1D03               	skipz
  8255  0448  2C8D               	goto	l6752
  8256  0449  0022               	movlb	2	; select bank2
  8257  044A  08E9               	movf	_Left_Shift_Key_old^(0+256),f
  8258  044B  1D03               	skipz
  8259  044C  2C8D               	goto	l6752
  8260  044D                     l6724:	
  8261                           
  8262                           ;PS_2.c: 508: {
  8263                           ;PS_2.c: 510: if(!Send_PS2(0xED))
  8264  044D  30ED               	movlw	237
  8265  044E  318C  2469  3181   	fcall	_Send_PS2
  8266  0451  3800               	iorlw	0
  8267  0452  1D03               	skipz
  8268  0453  2C8D               	goto	l6752
  8269                           
  8270                           ;PS_2.c: 511: {
  8271                           ;PS_2.c: 512: if(Caps_Lock)
  8272  0454  0023               	movlb	3	; select bank3
  8273  0455  0829               	movf	_Caps_Lock^(0+384),w
  8274  0456  1903               	btfsc	3,2
  8275  0457  2C71               	goto	l6740
  8276                           
  8277                           ;PS_2.c: 513: {
  8278                           ;PS_2.c: 514: CapsCount=0;
  8279  0458  01A8               	clrf	_CapsCount^(0+384)
  8280  0459                     l6738:	
  8281                           ;PS_2.c: 515: while(CapsCount<10)
  8282                           
  8283  0459  300A               	movlw	10
  8284  045A  0228               	subwf	_CapsCount^(0+384),w
  8285  045B  1803               	btfsc	3,0
  8286  045C  2C8D               	goto	l6752
  8287                           
  8288                           ;PS_2.c: 516: {
  8289                           ;PS_2.c: 517: if(!Send_PS2(0xED))
  8290  045D  30ED               	movlw	237
  8291  045E  318C  2469  3181   	fcall	_Send_PS2
  8292  0461  3800               	iorlw	0
  8293  0462  1D03               	skipz
  8294  0463  2C6B               	goto	l6736
  8295                           
  8296                           ;PS_2.c: 518: {
  8297                           ;PS_2.c: 519: if(!Send_PS2(0x05))
  8298  0464  3005               	movlw	5
  8299  0465  318C  2469  3181   	fcall	_Send_PS2
  8300  0468  3800               	iorlw	0
  8301  0469  1903               	btfsc	3,2
  8302  046A  2C8A               	goto	l6746
  8303  046B                     l6736:	
  8304                           ;PS_2.c: 522: break;
  8305                           
  8306                           ;PS_2.c: 520: {
  8307                           ;PS_2.c: 521: Shift_Key = 1;
  8308                           
  8309                           
  8310                           ;PS_2.c: 523: }
  8311                           ;PS_2.c: 524: }
  8312                           ;PS_2.c: 525: CapsCount++;
  8313  046B  3001               	movlw	1
  8314  046C  0023               	movlb	3	; select bank3
  8315  046D  00AF               	movwf	??_PS_2_Update^(0+384)
  8316  046E  082F               	movf	??_PS_2_Update^(0+384),w
  8317  046F  07A8               	addwf	_CapsCount^(0+384),f
  8318  0470  2C59               	goto	l6738
  8319  0471                     l6740:	
  8320                           ;PS_2.c: 526: }
  8321                           ;PS_2.c: 527: }
  8322                           
  8323                           
  8324                           ;PS_2.c: 528: else
  8325                           ;PS_2.c: 529: {
  8326                           ;PS_2.c: 530: CapsCount=0;
  8327  0471  01A8               	clrf	_CapsCount^(0+384)
  8328                           
  8329                           ;PS_2.c: 531: while(CapsCount<10)
  8330  0472  2C78               	goto	l6750
  8331  0473                     l6748:	
  8332                           ;PS_2.c: 538: break;
  8333                           
  8334                           
  8335                           ;PS_2.c: 539: }
  8336                           ;PS_2.c: 540: }
  8337                           ;PS_2.c: 541: CapsCount++;
  8338  0473  3001               	movlw	1
  8339  0474  0023               	movlb	3	; select bank3
  8340  0475  00AF               	movwf	??_PS_2_Update^(0+384)
  8341  0476  082F               	movf	??_PS_2_Update^(0+384),w
  8342  0477  07A8               	addwf	_CapsCount^(0+384),f
  8343  0478                     l6750:	
  8344  0478  300A               	movlw	10
  8345  0479  0228               	subwf	_CapsCount^(0+384),w
  8346  047A  1803               	btfsc	3,0
  8347  047B  2C8D               	goto	l6752
  8348                           
  8349                           ;PS_2.c: 532: {
  8350                           ;PS_2.c: 533: if(!Send_PS2(0xED))
  8351  047C  30ED               	movlw	237
  8352  047D  318C  2469  3181   	fcall	_Send_PS2
  8353  0480  3800               	iorlw	0
  8354  0481  1D03               	skipz
  8355  0482  2C73               	goto	l6748
  8356                           
  8357                           ;PS_2.c: 534: {
  8358                           ;PS_2.c: 535: if(!Send_PS2(0x01))
  8359  0483  3001               	movlw	1
  8360  0484  318C  2469  3181   	fcall	_Send_PS2
  8361  0487  3800               	iorlw	0
  8362  0488  1D03               	skipz
  8363  0489  2C73               	goto	l6748
  8364  048A                     l6746:	
  8365                           
  8366                           ;PS_2.c: 536: {
  8367                           ;PS_2.c: 537: Shift_Key = 1;
  8368  048A  0023               	movlb	3	; select bank3
  8369  048B  01AE               	clrf	_Shift_Key^(0+384)
  8370  048C  0AAE               	incf	_Shift_Key^(0+384),f
  8371  048D                     l6752:	
  8372                           
  8373                           ;PS_2.c: 542: }
  8374                           ;PS_2.c: 543: }
  8375                           ;PS_2.c: 544: }
  8376                           ;PS_2.c: 545: }
  8377                           ;PS_2.c: 546: if(PS_2_Read_Data_First == 0x14 )
  8378  048D  3014               	movlw	20
  8379  048E  0023               	movlb	3	; select bank3
  8380  048F  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8381  0490  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8382  0491  1D03               	skipz
  8383  0492  2C97               	goto	l6756
  8384                           
  8385                           ;PS_2.c: 547: {
  8386                           ;PS_2.c: 548: RControl = 1;
  8387  0493  0022               	movlb	2	; select bank2
  8388  0494  01EA               	clrf	_RControl^(0+256)
  8389  0495  0AEA               	incf	_RControl^(0+256),f
  8390                           
  8391                           ;PS_2.c: 549: }
  8392  0496  2D75               	goto	l6850
  8393  0497                     l6756:	
  8394                           
  8395                           ;PS_2.c: 550: else if(PS_2_Read_Data_First == 0x11 )
  8396  0497  3011               	movlw	17
  8397  0498  0023               	movlb	3	; select bank3
  8398  0499  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8399  049A  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8400  049B  1D03               	skipz
  8401  049C  2CA0               	goto	l6760
  8402                           
  8403                           ;PS_2.c: 551: {
  8404                           ;PS_2.c: 552: RALT = 1;
  8405  049D  01AC               	clrf	_RALT^(0+384)
  8406  049E  0AAC               	incf	_RALT^(0+384),f
  8407                           
  8408                           ;PS_2.c: 553: }
  8409  049F  2D75               	goto	l6850
  8410  04A0                     l6760:	
  8411                           
  8412                           ;PS_2.c: 554: else if(PS_2_Read_Data_First == 0xEE )
  8413  04A0  30EE               	movlw	238
  8414  04A1  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8415  04A2  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8416  04A3  1D03               	skipz
  8417  04A4  2CAB               	goto	l6764
  8418                           
  8419                           ;PS_2.c: 555: {
  8420                           ;PS_2.c: 556: ECHO = 1;
  8421  04A5  3001               	movlw	1
  8422  04A6  00AF               	movwf	??_PS_2_Update^(0+384)
  8423  04A7  082F               	movf	??_PS_2_Update^(0+384),w
  8424  04A8  0021               	movlb	1	; select bank1
  8425  04A9  00E9               	movwf	_ECHO^(0+128)	;volatile
  8426                           
  8427                           ;PS_2.c: 557: }
  8428  04AA  2D75               	goto	l6850
  8429  04AB                     l6764:	
  8430                           
  8431                           ;PS_2.c: 558: else if(PS_2_Read_Data_First == 0x58)
  8432  04AB  3058               	movlw	88
  8433  04AC  0023               	movlb	3	; select bank3
  8434  04AD  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8435  04AE  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8436  04AF  1D03               	skipz
  8437  04B0  2D2C               	goto	l6824
  8438                           
  8439                           ;PS_2.c: 559: {
  8440                           ;PS_2.c: 560: Caps_Lock_Key = 1;
  8441  04B1  0022               	movlb	2	; select bank2
  8442  04B2  01E4               	clrf	_Caps_Lock_Key^(0+256)
  8443  04B3  0AE4               	incf	_Caps_Lock_Key^(0+256),f
  8444                           
  8445                           ;PS_2.c: 561: if(Caps_Lock_Key_old == 0)
  8446  04B4  08E5               	movf	_Caps_Lock_Key_old^(0+256),f
  8447  04B5  1D03               	skipz
  8448  04B6  2D75               	goto	l6850
  8449                           
  8450                           ;PS_2.c: 562: {
  8451                           ;PS_2.c: 563: if(Caps_Lock)
  8452  04B7  0023               	movlb	3	; select bank3
  8453  04B8  0829               	movf	_Caps_Lock^(0+384),w
  8454  04B9  1903               	btfsc	3,2
  8455  04BA  2CF3               	goto	l6798
  8456                           
  8457                           ;PS_2.c: 564: {
  8458                           ;PS_2.c: 565: if(Shift_Key)
  8459  04BB  082E               	movf	_Shift_Key^(0+384),w
  8460  04BC  1903               	btfsc	3,2
  8461  04BD  2CD7               	goto	l6786
  8462                           
  8463                           ;PS_2.c: 566: {
  8464                           ;PS_2.c: 567: CapsCount=0;
  8465  04BE  01A8               	clrf	_CapsCount^(0+384)
  8466  04BF                     l6784:	
  8467                           ;PS_2.c: 568: while(CapsCount<10)
  8468                           
  8469  04BF  300A               	movlw	10
  8470  04C0  0228               	subwf	_CapsCount^(0+384),w
  8471  04C1  1803               	btfsc	3,0
  8472  04C2  2D75               	goto	l6850
  8473                           
  8474                           ;PS_2.c: 569: {
  8475                           ;PS_2.c: 570: if(!Send_PS2(0xED))
  8476  04C3  30ED               	movlw	237
  8477  04C4  318C  2469  3181   	fcall	_Send_PS2
  8478  04C7  3800               	iorlw	0
  8479  04C8  1D03               	skipz
  8480  04C9  2CD1               	goto	l6782
  8481                           
  8482                           ;PS_2.c: 571: {
  8483                           ;PS_2.c: 572: if(!Send_PS2(0x01))
  8484  04CA  3001               	movlw	1
  8485  04CB  318C  2469  3181   	fcall	_Send_PS2
  8486  04CE  3800               	iorlw	0
  8487  04CF  1903               	btfsc	3,2
  8488  04D0  2CEA               	goto	l6792
  8489  04D1                     l6782:	
  8490                           ;PS_2.c: 575: break;
  8491                           
  8492                           ;PS_2.c: 573: {
  8493                           ;PS_2.c: 574: Caps_Lock =0;
  8494                           
  8495                           
  8496                           ;PS_2.c: 576: }
  8497                           ;PS_2.c: 577: }
  8498                           ;PS_2.c: 578: CapsCount++;
  8499  04D1  3001               	movlw	1
  8500  04D2  0023               	movlb	3	; select bank3
  8501  04D3  00AF               	movwf	??_PS_2_Update^(0+384)
  8502  04D4  082F               	movf	??_PS_2_Update^(0+384),w
  8503  04D5  07A8               	addwf	_CapsCount^(0+384),f
  8504  04D6  2CBF               	goto	l6784
  8505  04D7                     l6786:	
  8506                           ;PS_2.c: 579: }
  8507                           ;PS_2.c: 580: }
  8508                           
  8509                           
  8510                           ;PS_2.c: 581: else
  8511                           ;PS_2.c: 582: {
  8512                           ;PS_2.c: 583: CapsCount=0;
  8513  04D7  01A8               	clrf	_CapsCount^(0+384)
  8514  04D8                     l6796:	
  8515                           ;PS_2.c: 584: while(CapsCount<10)
  8516                           
  8517  04D8  300A               	movlw	10
  8518  04D9  0228               	subwf	_CapsCount^(0+384),w
  8519  04DA  1803               	btfsc	3,0
  8520  04DB  2D75               	goto	l6850
  8521                           
  8522                           ;PS_2.c: 585: {
  8523                           ;PS_2.c: 586: if(!Send_PS2(0xED))
  8524  04DC  30ED               	movlw	237
  8525  04DD  318C  2469  3181   	fcall	_Send_PS2
  8526  04E0  3800               	iorlw	0
  8527  04E1  1D03               	skipz
  8528  04E2  2CED               	goto	l6794
  8529                           
  8530                           ;PS_2.c: 587: {
  8531                           ;PS_2.c: 588: if(!Send_PS2(0x00))
  8532  04E3  3000               	movlw	0
  8533  04E4  318C  2469  3181   	fcall	_Send_PS2
  8534  04E7  3800               	iorlw	0
  8535  04E8  1D03               	skipz
  8536  04E9  2CED               	goto	l6794
  8537  04EA                     l6792:	
  8538                           
  8539                           ;PS_2.c: 589: {
  8540                           ;PS_2.c: 590: Caps_Lock =0;
  8541  04EA  0023               	movlb	3	; select bank3
  8542  04EB  01A9               	clrf	_Caps_Lock^(0+384)
  8543                           
  8544                           ;PS_2.c: 591: break;
  8545  04EC  2D75               	goto	l6850
  8546  04ED                     l6794:	
  8547                           
  8548                           ;PS_2.c: 592: }
  8549                           ;PS_2.c: 593: }
  8550                           ;PS_2.c: 594: CapsCount++;
  8551  04ED  3001               	movlw	1
  8552  04EE  0023               	movlb	3	; select bank3
  8553  04EF  00AF               	movwf	??_PS_2_Update^(0+384)
  8554  04F0  082F               	movf	??_PS_2_Update^(0+384),w
  8555  04F1  07A8               	addwf	_CapsCount^(0+384),f
  8556  04F2  2CD8               	goto	l6796
  8557  04F3                     l6798:	
  8558                           ;PS_2.c: 595: }
  8559                           ;PS_2.c: 596: }
  8560                           ;PS_2.c: 597: }
  8561                           
  8562                           
  8563                           ;PS_2.c: 598: else
  8564                           ;PS_2.c: 599: {
  8565                           ;PS_2.c: 600: if(Shift_Key)
  8566  04F3  082E               	movf	_Shift_Key^(0+384),w
  8567  04F4  1903               	btfsc	3,2
  8568  04F5  2D0F               	goto	l6812
  8569                           
  8570                           ;PS_2.c: 601: {
  8571                           ;PS_2.c: 602: CapsCount=0;
  8572  04F6  01A8               	clrf	_CapsCount^(0+384)
  8573  04F7                     l6810:	
  8574                           ;PS_2.c: 603: while(CapsCount<10)
  8575                           
  8576  04F7  300A               	movlw	10
  8577  04F8  0228               	subwf	_CapsCount^(0+384),w
  8578  04F9  1803               	btfsc	3,0
  8579  04FA  2D75               	goto	l6850
  8580                           
  8581                           ;PS_2.c: 604: {
  8582                           ;PS_2.c: 605: if(!Send_PS2(0xED))
  8583  04FB  30ED               	movlw	237
  8584  04FC  318C  2469  3181   	fcall	_Send_PS2
  8585  04FF  3800               	iorlw	0
  8586  0500  1D03               	skipz
  8587  0501  2D09               	goto	l6808
  8588                           
  8589                           ;PS_2.c: 606: {
  8590                           ;PS_2.c: 607: if(!Send_PS2(0x05))
  8591  0502  3005               	movlw	5
  8592  0503  318C  2469  3181   	fcall	_Send_PS2
  8593  0506  3800               	iorlw	0
  8594  0507  1903               	btfsc	3,2
  8595  0508  2D22               	goto	l6818
  8596  0509                     l6808:	
  8597                           ;PS_2.c: 610: break;
  8598                           
  8599                           ;PS_2.c: 608: {
  8600                           ;PS_2.c: 609: Caps_Lock =1;
  8601                           
  8602                           
  8603                           ;PS_2.c: 611: }
  8604                           ;PS_2.c: 612: }
  8605                           ;PS_2.c: 613: CapsCount++;
  8606  0509  3001               	movlw	1
  8607  050A  0023               	movlb	3	; select bank3
  8608  050B  00AF               	movwf	??_PS_2_Update^(0+384)
  8609  050C  082F               	movf	??_PS_2_Update^(0+384),w
  8610  050D  07A8               	addwf	_CapsCount^(0+384),f
  8611  050E  2CF7               	goto	l6810
  8612  050F                     l6812:	
  8613                           ;PS_2.c: 614: }
  8614                           ;PS_2.c: 615: }
  8615                           
  8616                           
  8617                           ;PS_2.c: 616: else
  8618                           ;PS_2.c: 617: {
  8619                           ;PS_2.c: 618: CapsCount=0;
  8620  050F  01A8               	clrf	_CapsCount^(0+384)
  8621  0510                     l6822:	
  8622                           ;PS_2.c: 619: while(CapsCount<10)
  8623                           
  8624  0510  300A               	movlw	10
  8625  0511  0228               	subwf	_CapsCount^(0+384),w
  8626  0512  1803               	btfsc	3,0
  8627  0513  2D75               	goto	l6850
  8628                           
  8629                           ;PS_2.c: 620: {
  8630                           ;PS_2.c: 621: if(!Send_PS2(0xED))
  8631  0514  30ED               	movlw	237
  8632  0515  318C  2469  3181   	fcall	_Send_PS2
  8633  0518  3800               	iorlw	0
  8634  0519  1D03               	skipz
  8635  051A  2D26               	goto	l6820
  8636                           
  8637                           ;PS_2.c: 622: {
  8638                           ;PS_2.c: 623: if(!Send_PS2(0x04))
  8639  051B  3004               	movlw	4
  8640  051C  318C  2469  3181   	fcall	_Send_PS2
  8641  051F  3800               	iorlw	0
  8642  0520  1D03               	skipz
  8643  0521  2D26               	goto	l6820
  8644  0522                     l6818:	
  8645                           
  8646                           ;PS_2.c: 624: {
  8647                           ;PS_2.c: 625: Caps_Lock =1;
  8648  0522  0023               	movlb	3	; select bank3
  8649  0523  01A9               	clrf	_Caps_Lock^(0+384)
  8650  0524  0AA9               	incf	_Caps_Lock^(0+384),f
  8651                           
  8652                           ;PS_2.c: 626: break;
  8653  0525  2D75               	goto	l6850
  8654  0526                     l6820:	
  8655                           
  8656                           ;PS_2.c: 627: }
  8657                           ;PS_2.c: 628: }
  8658                           ;PS_2.c: 629: CapsCount++;
  8659  0526  3001               	movlw	1
  8660  0527  0023               	movlb	3	; select bank3
  8661  0528  00AF               	movwf	??_PS_2_Update^(0+384)
  8662  0529  082F               	movf	??_PS_2_Update^(0+384),w
  8663  052A  07A8               	addwf	_CapsCount^(0+384),f
  8664  052B  2D10               	goto	l6822
  8665  052C                     l6824:	
  8666                           ;PS_2.c: 630: }
  8667                           ;PS_2.c: 631: }
  8668                           ;PS_2.c: 632: }
  8669                           ;PS_2.c: 633: }
  8670                           ;PS_2.c: 635: }
  8671                           
  8672                           
  8673                           ;PS_2.c: 636: else
  8674                           ;PS_2.c: 637: {
  8675                           ;PS_2.c: 638: if(Shift_Key ==1)
  8676  052C  082E               	movf	_Shift_Key^(0+384),w
  8677  052D  3A01               	xorlw	1
  8678  052E  1D03               	skipz
  8679  052F  2D4D               	goto	l6836
  8680                           
  8681                           ;PS_2.c: 639: {
  8682                           ;PS_2.c: 641: temp = Decode_Scan_Code_Shift(PS_2_Read_Data_First);
  8683  0530  0820               	movf	_PS_2_Read_Data_First^(0+384),w
  8684  0531  3199  21A3  3181   	fcall	_Decode_Scan_Code_Shift
  8685  0534  0023               	movlb	3	; select bank3
  8686  0535  00AF               	movwf	??_PS_2_Update^(0+384)
  8687  0536  082F               	movf	??_PS_2_Update^(0+384),w
  8688  0537  0025               	movlb	5	; select bank5
  8689  0538  00E0               	movwf	PS_2_Update@temp^(0+640)
  8690                           
  8691                           ;PS_2.c: 642: if(Caps_Lock)
  8692  0539  0023               	movlb	3	; select bank3
  8693  053A  0829               	movf	_Caps_Lock^(0+384),w
  8694  053B  1903               	btfsc	3,2
  8695  053C  2D67               	goto	l6846
  8696                           
  8697                           ;PS_2.c: 643: {
  8698                           ;PS_2.c: 645: if(temp >= 'A' && temp <= 'Z')
  8699  053D  3041               	movlw	65
  8700  053E  0025               	movlb	5	; select bank5
  8701  053F  0260               	subwf	PS_2_Update@temp^(0+640),w
  8702  0540  1C03               	skipc
  8703  0541  2D66               	goto	l758
  8704  0542  305B               	movlw	91
  8705  0543  0260               	subwf	PS_2_Update@temp^(0+640),w
  8706  0544  1803               	skipnc
  8707  0545  2D66               	goto	l758
  8708                           
  8709                           ;PS_2.c: 646: {
  8710                           ;PS_2.c: 647: temp += 32;
  8711  0546  3020               	movlw	32
  8712  0547  0023               	movlb	3	; select bank3
  8713  0548  00AF               	movwf	??_PS_2_Update^(0+384)
  8714  0549  082F               	movf	??_PS_2_Update^(0+384),w
  8715  054A  0025               	movlb	5	; select bank5
  8716  054B  07E0               	addwf	PS_2_Update@temp^(0+640),f
  8717  054C  2D66               	goto	l758
  8718  054D                     l6836:	
  8719                           ;PS_2.c: 648: }
  8720                           ;PS_2.c: 649: }
  8721                           ;PS_2.c: 650: }
  8722                           
  8723                           
  8724                           ;PS_2.c: 651: else
  8725                           ;PS_2.c: 652: {
  8726                           ;PS_2.c: 653: temp = Decode_Scan_Code(PS_2_Read_Data_First);
  8727  054D  0023               	movlb	3	; select bank3
  8728  054E  0820               	movf	_PS_2_Read_Data_First^(0+384),w
  8729  054F  3199  217D  3181   	fcall	_Decode_Scan_Code
  8730  0552  0023               	movlb	3	; select bank3
  8731  0553  00AF               	movwf	??_PS_2_Update^(0+384)
  8732  0554  082F               	movf	??_PS_2_Update^(0+384),w
  8733  0555  0025               	movlb	5	; select bank5
  8734  0556  00E0               	movwf	PS_2_Update@temp^(0+640)
  8735                           
  8736                           ;PS_2.c: 654: if(Caps_Lock)
  8737  0557  0023               	movlb	3	; select bank3
  8738  0558  0829               	movf	_Caps_Lock^(0+384),w
  8739  0559  1903               	btfsc	3,2
  8740  055A  2D67               	goto	l6846
  8741                           
  8742                           ;PS_2.c: 655: {
  8743                           ;PS_2.c: 657: if(temp >= 'a' && temp <= 'z')
  8744  055B  3061               	movlw	97
  8745  055C  0025               	movlb	5	; select bank5
  8746  055D  0260               	subwf	PS_2_Update@temp^(0+640),w
  8747  055E  1C03               	skipc
  8748  055F  2D66               	goto	l758
  8749  0560  307B               	movlw	123
  8750  0561  0260               	subwf	PS_2_Update@temp^(0+640),w
  8751  0562  1803               	skipnc
  8752  0563  2D66               	goto	l758
  8753                           
  8754                           ;PS_2.c: 658: {
  8755                           ;PS_2.c: 659: temp -= 32;
  8756  0564  3020               	movlw	32
  8757  0565  02E0               	subwf	PS_2_Update@temp^(0+640),f
  8758  0566                     l758:	
  8759  0566  0023               	movlb	3	; select bank3
  8760  0567                     l6846:	
  8761                           
  8762                           ;PS_2.c: 660: }
  8763                           ;PS_2.c: 661: }
  8764                           ;PS_2.c: 662: }
  8765                           ;PS_2.c: 663: if(!temp)
  8766  0567  0025               	movlb	5	; select bank5
  8767  0568  08E0               	movf	PS_2_Update@temp^(0+640),f
  8768  0569  1D03               	skipz
  8769  056A  2D75               	goto	l6850
  8770                           
  8771                           ;PS_2.c: 664: {
  8772                           ;PS_2.c: 666: temp = Decode_Scan_Code_Function(PS_2_Read_Data_First);
  8773  056B  0023               	movlb	3	; select bank3
  8774  056C  0820               	movf	_PS_2_Read_Data_First^(0+384),w
  8775  056D  3199  2135  3181   	fcall	_Decode_Scan_Code_Function
  8776  0570  0023               	movlb	3	; select bank3
  8777  0571  00AF               	movwf	??_PS_2_Update^(0+384)
  8778  0572  082F               	movf	??_PS_2_Update^(0+384),w
  8779  0573  0025               	movlb	5	; select bank5
  8780  0574  00E0               	movwf	PS_2_Update@temp^(0+640)
  8781  0575                     l6850:	
  8782                           
  8783                           ;PS_2.c: 667: }
  8784                           ;PS_2.c: 668: }
  8785                           ;PS_2.c: 669: }
  8786                           ;PS_2.c: 670: if(((RControl || LControl) + (LALT || RALT) + Delete) == 3)
  8787  0575  0025               	movlb	5	; select bank5
  8788  0576  01DE               	clrf	_PS_2_Update$832^(0+640)
  8789  0577  0ADE               	incf	_PS_2_Update$832^(0+640),f
  8790  0578  0022               	movlb	2	; select bank2
  8791  0579  08E7               	movf	_LALT^(0+256),f
  8792  057A  1D03               	skipz
  8793  057B  2D82               	goto	l6858
  8794  057C  0023               	movlb	3	; select bank3
  8795  057D  08AC               	movf	_RALT^(0+384),f
  8796  057E  1D03               	skipz
  8797  057F  2D82               	goto	l6858
  8798  0580  0025               	movlb	5	; select bank5
  8799  0581  01DE               	clrf	_PS_2_Update$832^(0+640)
  8800  0582                     l6858:	
  8801  0582  0025               	movlb	5	; select bank5
  8802  0583  01DF               	clrf	_PS_2_Update$833^(0+640)
  8803  0584  0ADF               	incf	_PS_2_Update$833^(0+640),f
  8804  0585  0022               	movlb	2	; select bank2
  8805  0586  08EA               	movf	_RControl^(0+256),f
  8806  0587  1D03               	skipz
  8807  0588  2D8E               	goto	l6866
  8808  0589  08E8               	movf	_LControl^(0+256),f
  8809  058A  1D03               	skipz
  8810  058B  2D8E               	goto	l6866
  8811  058C  0025               	movlb	5	; select bank5
  8812  058D  01DF               	clrf	_PS_2_Update$833^(0+640)
  8813  058E                     l6866:	
  8814  058E  0022               	movlb	2	; select bank2
  8815  058F  0866               	movf	_Delete^(0+256),w
  8816  0590  0023               	movlb	3	; select bank3
  8817  0591  00AF               	movwf	??_PS_2_Update^(0+384)
  8818  0592  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  8819  0593  0025               	movlb	5	; select bank5
  8820  0594  085F               	movf	_PS_2_Update$833^(0+640),w
  8821  0595  075E               	addwf	_PS_2_Update$832^(0+640),w
  8822  0596  0023               	movlb	3	; select bank3
  8823  0597  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  8824  0598  01B2               	clrf	((??_PS_2_Update+2)^(0+384)+1)
  8825  0599  0DB2               	rlf	(??_PS_2_Update+3)^(0+384),f
  8826  059A  082F               	movf	??_PS_2_Update^(0+384),w
  8827  059B  0731               	addwf	(??_PS_2_Update+2)^(0+384),w
  8828  059C  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  8829  059D  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  8830  059E  3D32               	addwfc	(??_PS_2_Update+3)^(0+384),w
  8831  059F  00B4               	movwf	(??_PS_2_Update+5)^(0+384)
  8832  05A0  3003               	movlw	3
  8833  05A1  0633               	xorwf	(??_PS_2_Update+4)^(0+384),w
  8834  05A2  0434               	iorwf	(??_PS_2_Update+5)^(0+384),w
  8835  05A3  1D03               	skipz
  8836  05A4  2E1A               	goto	l6906
  8837                           
  8838                           ;PS_2.c: 671: {
  8839                           ;PS_2.c: 673: UARTstringWAIT("\r\n");
  8840  05A5  3056               	movlw	low ((STR_11+17)| (0+32768))
  8841  05A6  0020               	movlb	0	; select bank0
  8842  05A7  00B4               	movwf	UARTstringWAIT@data
  8843  05A8  308B               	movlw	high ((STR_11+17)| (0+32768))
  8844  05A9  00B5               	movwf	UARTstringWAIT@data+1
  8845  05AA  319B  2362  3181   	fcall	_UARTstringWAIT
  8846                           
  8847                           ;PS_2.c: 674: delayUS(10000);
  8848  05AD  3000               	movlw	0
  8849  05AE  0020               	movlb	0	; select bank0
  8850  05AF  00A8               	movwf	delayUS@US+3
  8851  05B0  3000               	movlw	0
  8852  05B1  00A7               	movwf	delayUS@US+2
  8853  05B2  3027               	movlw	39
  8854  05B3  00A6               	movwf	delayUS@US+1
  8855  05B4  3010               	movlw	16
  8856  05B5  00A5               	movwf	delayUS@US
  8857  05B6  3190  2002  3181   	fcall	_delayUS
  8858                           
  8859                           ;PS_2.c: 675: if(!BAUDMODE)
  8860  05B9  0022               	movlb	2	; select bank2
  8861  05BA  08E3               	movf	_BAUDMODE^(0+256),f
  8862  05BB  1D03               	skipz
  8863  05BC  2DE7               	goto	l6886
  8864                           
  8865                           ;PS_2.c: 676: {
  8866                           ;PS_2.c: 677: BaudTyped =0;
  8867  05BD  3000               	movlw	0
  8868  05BE  0020               	movlb	0	; select bank0
  8869  05BF  00E9               	movwf	_BaudTyped+3
  8870  05C0  3000               	movlw	0
  8871  05C1  00E8               	movwf	_BaudTyped+2
  8872  05C2  3000               	movlw	0
  8873  05C3  00E7               	movwf	_BaudTyped+1
  8874  05C4  3000               	movlw	0
  8875  05C5  00E6               	movwf	_BaudTyped
  8876                           
  8877                           ;PS_2.c: 678: ParityTyped =0;
  8878  05C6  0023               	movlb	3	; select bank3
  8879  05C7  01AB               	clrf	_ParityTyped^(0+384)
  8880                           
  8881                           ;PS_2.c: 679: BAUDMODE = 1;
  8882  05C8  0022               	movlb	2	; select bank2
  8883  05C9  01E3               	clrf	_BAUDMODE^(0+256)
  8884  05CA  0AE3               	incf	_BAUDMODE^(0+256),f
  8885                           
  8886                           ;PS_2.c: 680: UARTstringWAIT("Enter Baud rate\r\n");
  8887  05CB  307F               	movlw	low (STR_31| (0+32768))
  8888  05CC  0020               	movlb	0	; select bank0
  8889  05CD  00B4               	movwf	UARTstringWAIT@data
  8890  05CE  308B               	movlw	high (STR_31| (0+32768))
  8891  05CF  00B5               	movwf	UARTstringWAIT@data+1
  8892  05D0  319B  2362  3181   	fcall	_UARTstringWAIT
  8893                           
  8894                           ;PS_2.c: 681: delayUS(10000);
  8895  05D3  3000               	movlw	0
  8896  05D4  0020               	movlb	0	; select bank0
  8897  05D5  00A8               	movwf	delayUS@US+3
  8898  05D6  3000               	movlw	0
  8899  05D7  00A7               	movwf	delayUS@US+2
  8900  05D8  3027               	movlw	39
  8901  05D9  00A6               	movwf	delayUS@US+1
  8902  05DA  3010               	movlw	16
  8903  05DB  00A5               	movwf	delayUS@US
  8904  05DC  3190  2002  3181   	fcall	_delayUS
  8905                           
  8906                           ;PS_2.c: 682: UARTchar('>' , 0, 0);
  8907  05DF  0020               	movlb	0	; select bank0
  8908  05E0  01AD               	clrf	UARTchar@override
  8909  05E1  01AE               	clrf	UARTchar@NinethBit_override_data
  8910  05E2  303E               	movlw	62
  8911  05E3  319E  26CA  3181   	fcall	_UARTchar
  8912                           
  8913                           ;PS_2.c: 684: }
  8914  05E6  2E12               	goto	l6896
  8915  05E7                     l6886:	
  8916                           
  8917                           ;PS_2.c: 685: else
  8918                           ;PS_2.c: 686: {
  8919                           ;PS_2.c: 687: BaudTyped = 9600;
  8920  05E7  3000               	movlw	0
  8921  05E8  0020               	movlb	0	; select bank0
  8922  05E9  00E9               	movwf	_BaudTyped+3
  8923  05EA  3000               	movlw	0
  8924  05EB  00E8               	movwf	_BaudTyped+2
  8925  05EC  3025               	movlw	37
  8926  05ED  00E7               	movwf	_BaudTyped+1
  8927  05EE  3080               	movlw	128
  8928  05EF  00E6               	movwf	_BaudTyped
  8929                           
  8930                           ;PS_2.c: 688: UARTstringWAIT("KeyBoard Reset to 9600 with no parity bit\r\n");
  8931  05F0  30FB               	movlw	low (STR_32| (0+32768))
  8932  05F1  00B4               	movwf	UARTstringWAIT@data
  8933  05F2  3089               	movlw	high (STR_32| (0+32768))
  8934  05F3  00B5               	movwf	UARTstringWAIT@data+1
  8935  05F4  319B  2362  3181   	fcall	_UARTstringWAIT
  8936                           
  8937                           ;PS_2.c: 689: delayUS(10000);
  8938  05F7  3000               	movlw	0
  8939  05F8  0020               	movlb	0	; select bank0
  8940  05F9  00A8               	movwf	delayUS@US+3
  8941  05FA  3000               	movlw	0
  8942  05FB  00A7               	movwf	delayUS@US+2
  8943  05FC  3027               	movlw	39
  8944  05FD  00A6               	movwf	delayUS@US+1
  8945  05FE  3010               	movlw	16
  8946  05FF  00A5               	movwf	delayUS@US
  8947  0600  3190  2002  3181   	fcall	_delayUS
  8948                           
  8949                           ;PS_2.c: 690: SetBaud(BaudTyped, 0);
  8950  0603  0020               	movlb	0	; select bank0
  8951  0604  0869               	movf	_BaudTyped+3,w
  8952  0605  00D7               	movwf	SetBaud@Baud+3
  8953  0606  0868               	movf	_BaudTyped+2,w
  8954  0607  00D6               	movwf	SetBaud@Baud+2
  8955  0608  0867               	movf	_BaudTyped+1,w
  8956  0609  00D5               	movwf	SetBaud@Baud+1
  8957  060A  0866               	movf	_BaudTyped,w
  8958  060B  00D4               	movwf	SetBaud@Baud
  8959  060C  01D8               	clrf	SetBaud@Parity
  8960  060D  3196  269B  3181   	fcall	_SetBaud
  8961                           
  8962                           ;PS_2.c: 691: BAUDMODE = 0;
  8963  0610  0022               	movlb	2	; select bank2
  8964  0611  01E3               	clrf	_BAUDMODE^(0+256)
  8965  0612                     l6896:	
  8966                           
  8967                           ;PS_2.c: 692: }
  8968                           ;PS_2.c: 693: RControl =0;
  8969  0612  0022               	movlb	2	; select bank2
  8970  0613  01EA               	clrf	_RControl^(0+256)
  8971                           
  8972                           ;PS_2.c: 694: LControl =0;
  8973  0614  01E8               	clrf	_LControl^(0+256)
  8974                           
  8975                           ;PS_2.c: 695: LALT =0;
  8976  0615  01E7               	clrf	_LALT^(0+256)
  8977                           
  8978                           ;PS_2.c: 696: RALT =0;
  8979  0616  0023               	movlb	3	; select bank3
  8980  0617  01AC               	clrf	_RALT^(0+384)
  8981                           
  8982                           ;PS_2.c: 697: Delete =0;
  8983  0618  0022               	movlb	2	; select bank2
  8984  0619  01E6               	clrf	_Delete^(0+256)
  8985  061A                     l6906:	
  8986                           
  8987                           ;PS_2.c: 698: }
  8988                           ;PS_2.c: 699: if(temp)
  8989  061A  0025               	movlb	5	; select bank5
  8990  061B  0860               	movf	PS_2_Update@temp^(0+640),w
  8991  061C  1903               	btfsc	3,2
  8992  061D  2FB1               	goto	l7002
  8993                           
  8994                           ;PS_2.c: 700: {
  8995                           ;PS_2.c: 702: if(temp == 0x01)
  8996  061E  0860               	movf	PS_2_Update@temp^(0+640),w
  8997  061F  3A01               	xorlw	1
  8998  0620  1D03               	skipz
  8999  0621  2E2B               	goto	l6912
  9000                           
  9001                           ;PS_2.c: 703: {
  9002                           ;PS_2.c: 706: UART_send_break_timed(100000);
  9003  0622  30A0               	movlw	160
  9004  0623  0020               	movlb	0	; select bank0
  9005  0624  00AF               	movwf	UART_send_break_timed@US
  9006  0625  3086               	movlw	134
  9007  0626  00B0               	movwf	UART_send_break_timed@US+1
  9008  0627  319A  2214  3181   	fcall	_UART_send_break_timed
  9009  062A  2FB0               	goto	l770
  9010  062B                     l6912:	
  9011                           ;PS_2.c: 707: }
  9012                           
  9013                           
  9014                           ;PS_2.c: 708: else
  9015                           ;PS_2.c: 709: {
  9016                           ;PS_2.c: 710: if(!BAUDMODE)
  9017  062B  0022               	movlb	2	; select bank2
  9018  062C  08E3               	movf	_BAUDMODE^(0+256),f
  9019  062D  1D03               	skipz
  9020  062E  2E5C               	goto	l6924
  9021                           
  9022                           ;PS_2.c: 711: {
  9023                           ;PS_2.c: 712: UARTchar(temp, 0, 0);
  9024  062F  0020               	movlb	0	; select bank0
  9025  0630  01AD               	clrf	UARTchar@override
  9026  0631  01AE               	clrf	UARTchar@NinethBit_override_data
  9027  0632  0025               	movlb	5	; select bank5
  9028  0633  0860               	movf	PS_2_Update@temp^(0+640),w
  9029  0634  319E  26CA  3181   	fcall	_UARTchar
  9030                           
  9031                           ;PS_2.c: 713: if(temp == '\r')
  9032  0637  0025               	movlb	5	; select bank5
  9033  0638  0860               	movf	PS_2_Update@temp^(0+640),w
  9034  0639  3A0D               	xorlw	13
  9035  063A  1D03               	skipz
  9036  063B  2FB1               	goto	l7002
  9037                           
  9038                           ;PS_2.c: 714: {
  9039                           ;PS_2.c: 715: delayUS(5000);
  9040  063C  3000               	movlw	0
  9041  063D  0020               	movlb	0	; select bank0
  9042  063E  00A8               	movwf	delayUS@US+3
  9043  063F  3000               	movlw	0
  9044  0640  00A7               	movwf	delayUS@US+2
  9045  0641  3013               	movlw	19
  9046  0642  00A6               	movwf	delayUS@US+1
  9047  0643  3088               	movlw	136
  9048  0644  00A5               	movwf	delayUS@US
  9049  0645  3190  2002  3181   	fcall	_delayUS
  9050                           
  9051                           ;PS_2.c: 716: UARTchar('\n', 0, 0);
  9052  0648  0020               	movlb	0	; select bank0
  9053  0649  01AD               	clrf	UARTchar@override
  9054  064A  01AE               	clrf	UARTchar@NinethBit_override_data
  9055  064B  300A               	movlw	10
  9056  064C  319E  26CA  3181   	fcall	_UARTchar
  9057                           
  9058                           ;PS_2.c: 717: delayUS(10000);
  9059  064F  3000               	movlw	0
  9060  0650  0020               	movlb	0	; select bank0
  9061  0651  00A8               	movwf	delayUS@US+3
  9062  0652  3000               	movlw	0
  9063  0653  00A7               	movwf	delayUS@US+2
  9064  0654  3027               	movlw	39
  9065  0655  00A6               	movwf	delayUS@US+1
  9066  0656  3010               	movlw	16
  9067  0657  00A5               	movwf	delayUS@US
  9068  0658  3190  2002  3181   	fcall	_delayUS
  9069  065B  2FB0               	goto	l770
  9070  065C                     l6924:	
  9071                           ;PS_2.c: 718: }
  9072                           ;PS_2.c: 719: }
  9073                           
  9074                           
  9075                           ;PS_2.c: 720: else
  9076                           ;PS_2.c: 721: {
  9077                           ;PS_2.c: 722: if(ISNUMBER(temp))
  9078  065C  0025               	movlb	5	; select bank5
  9079  065D  0860               	movf	PS_2_Update@temp^(0+640),w
  9080  065E  3199  2109  3181   	fcall	_ISNUMBER
  9081  0661  3A00               	xorlw	0
  9082  0662  1903               	skipnz
  9083  0663  2EAA               	goto	l6932
  9084                           
  9085                           ;PS_2.c: 723: {
  9086                           ;PS_2.c: 724: BaudTyped*=10;
  9087  0664  3000               	movlw	0
  9088  0665  0020               	movlb	0	; select bank0
  9089  0666  00A8               	movwf	___lmul@multiplier+3
  9090  0667  3000               	movlw	0
  9091  0668  00A7               	movwf	___lmul@multiplier+2
  9092  0669  3000               	movlw	0
  9093  066A  00A6               	movwf	___lmul@multiplier+1
  9094  066B  300A               	movlw	10
  9095  066C  00A5               	movwf	___lmul@multiplier
  9096  066D  0869               	movf	_BaudTyped+3,w
  9097  066E  00AC               	movwf	___lmul@multiplicand+3
  9098  066F  0868               	movf	_BaudTyped+2,w
  9099  0670  00AB               	movwf	___lmul@multiplicand+2
  9100  0671  0867               	movf	_BaudTyped+1,w
  9101  0672  00AA               	movwf	___lmul@multiplicand+1
  9102  0673  0866               	movf	_BaudTyped,w
  9103  0674  00A9               	movwf	___lmul@multiplicand
  9104  0675  319A  226B  3181   	fcall	___lmul
  9105  0678  0020               	movlb	0	; select bank0
  9106  0679  0828               	movf	?___lmul+3,w
  9107  067A  00E9               	movwf	_BaudTyped+3
  9108  067B  0827               	movf	?___lmul+2,w
  9109  067C  00E8               	movwf	_BaudTyped+2
  9110  067D  0826               	movf	?___lmul+1,w
  9111  067E  00E7               	movwf	_BaudTyped+1
  9112  067F  0825               	movf	?___lmul,w
  9113  0680  00E6               	movwf	_BaudTyped
  9114                           
  9115                           ;PS_2.c: 725: BaudTyped += temp - 48;
  9116  0681  0025               	movlb	5	; select bank5
  9117  0682  0860               	movf	PS_2_Update@temp^(0+640),w
  9118  0683  3ED0               	addlw	208
  9119  0684  0023               	movlb	3	; select bank3
  9120  0685  00AF               	movwf	??_PS_2_Update^(0+384)
  9121  0686  30FF               	movlw	255
  9122  0687  1803               	skipnc
  9123  0688  3000               	movlw	0
  9124  0689  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  9125  068A  082F               	movf	??_PS_2_Update^(0+384),w
  9126  068B  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  9127  068C  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  9128  068D  00B2               	movwf	((??_PS_2_Update+2)^(0+384)+1)
  9129  068E  3000               	movlw	0
  9130  068F  1BB2               	btfsc	((??_PS_2_Update+2)^(0+384)+1),7
  9131  0690  30FF               	movlw	255
  9132  0691  00B3               	movwf	((??_PS_2_Update+2)^(0+384)+2)
  9133  0692  00B4               	movwf	((??_PS_2_Update+2)^(0+384)+3)
  9134  0693  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  9135  0694  0020               	movlb	0	; select bank0
  9136  0695  07E6               	addwf	_BaudTyped,f
  9137  0696  0023               	movlb	3	; select bank3
  9138  0697  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  9139  0698  0020               	movlb	0	; select bank0
  9140  0699  3DE7               	addwfc	_BaudTyped+1,f
  9141  069A  0023               	movlb	3	; select bank3
  9142  069B  0833               	movf	(??_PS_2_Update+4)^(0+384),w
  9143  069C  0020               	movlb	0	; select bank0
  9144  069D  3DE8               	addwfc	_BaudTyped+2,f
  9145  069E  0023               	movlb	3	; select bank3
  9146  069F  0834               	movf	(??_PS_2_Update+5)^(0+384),w
  9147  06A0  0020               	movlb	0	; select bank0
  9148  06A1  3DE9               	addwfc	_BaudTyped+3,f
  9149                           
  9150                           ;PS_2.c: 726: UARTchar(temp, 0, 0);
  9151  06A2  01AD               	clrf	UARTchar@override
  9152  06A3  01AE               	clrf	UARTchar@NinethBit_override_data
  9153  06A4  0025               	movlb	5	; select bank5
  9154  06A5  0860               	movf	PS_2_Update@temp^(0+640),w
  9155  06A6  319E  26CA  3181   	fcall	_UARTchar
  9156  06A9  2FB0               	goto	l770
  9157  06AA                     l6932:	
  9158                           ;PS_2.c: 727: }
  9159                           
  9160                           
  9161                           ;PS_2.c: 728: else if(temp == 'o' || temp == 'O')
  9162  06AA  0025               	movlb	5	; select bank5
  9163  06AB  0860               	movf	PS_2_Update@temp^(0+640),w
  9164  06AC  3A6F               	xorlw	111
  9165  06AD  1903               	skipnz
  9166  06AE  2EB3               	goto	l778
  9167  06AF  0860               	movf	PS_2_Update@temp^(0+640),w
  9168  06B0  3A4F               	xorlw	79
  9169  06B1  1D03               	skipz
  9170  06B2  2EBF               	goto	l6938
  9171  06B3                     l778:	
  9172                           
  9173                           ;PS_2.c: 729: {
  9174                           ;PS_2.c: 730: ParityTyped = 1;
  9175  06B3  0023               	movlb	3	; select bank3
  9176  06B4  01AB               	clrf	_ParityTyped^(0+384)
  9177  06B5  0AAB               	incf	_ParityTyped^(0+384),f
  9178                           
  9179                           ;PS_2.c: 731: UARTchar(temp, 0, 0);
  9180  06B6  0020               	movlb	0	; select bank0
  9181  06B7  01AD               	clrf	UARTchar@override
  9182  06B8  01AE               	clrf	UARTchar@NinethBit_override_data
  9183  06B9  0025               	movlb	5	; select bank5
  9184  06BA  0860               	movf	PS_2_Update@temp^(0+640),w
  9185  06BB  319E  26CA  3181   	fcall	_UARTchar
  9186  06BE  2FB0               	goto	l770
  9187  06BF                     l6938:	
  9188                           ;PS_2.c: 732: }
  9189                           
  9190                           
  9191                           ;PS_2.c: 733: else if(temp == 'e' || temp == 'E')
  9192  06BF  0025               	movlb	5	; select bank5
  9193  06C0  0860               	movf	PS_2_Update@temp^(0+640),w
  9194  06C1  3A65               	xorlw	101
  9195  06C2  1903               	skipnz
  9196  06C3  2EC8               	goto	l6942
  9197  06C4  0860               	movf	PS_2_Update@temp^(0+640),w
  9198  06C5  3A45               	xorlw	69
  9199  06C6  1D03               	skipz
  9200  06C7  2ED6               	goto	l6946
  9201  06C8                     l6942:	
  9202                           
  9203                           ;PS_2.c: 734: {
  9204                           ;PS_2.c: 735: ParityTyped = 2;
  9205  06C8  3002               	movlw	2
  9206  06C9  0023               	movlb	3	; select bank3
  9207  06CA  00AF               	movwf	??_PS_2_Update^(0+384)
  9208  06CB  082F               	movf	??_PS_2_Update^(0+384),w
  9209  06CC  00AB               	movwf	_ParityTyped^(0+384)
  9210                           
  9211                           ;PS_2.c: 736: UARTchar(temp, 0, 0);
  9212  06CD  0020               	movlb	0	; select bank0
  9213  06CE  01AD               	clrf	UARTchar@override
  9214  06CF  01AE               	clrf	UARTchar@NinethBit_override_data
  9215  06D0  0025               	movlb	5	; select bank5
  9216  06D1  0860               	movf	PS_2_Update@temp^(0+640),w
  9217  06D2  319E  26CA  3181   	fcall	_UARTchar
  9218  06D5  2FB0               	goto	l770
  9219  06D6                     l6946:	
  9220                           ;PS_2.c: 737: }
  9221                           
  9222                           
  9223                           ;PS_2.c: 738: else if(temp == 'm' || temp == 'M')
  9224  06D6  0025               	movlb	5	; select bank5
  9225  06D7  0860               	movf	PS_2_Update@temp^(0+640),w
  9226  06D8  3A6D               	xorlw	109
  9227  06D9  1903               	skipnz
  9228  06DA  2EDF               	goto	l6950
  9229  06DB  0860               	movf	PS_2_Update@temp^(0+640),w
  9230  06DC  3A4D               	xorlw	77
  9231  06DD  1D03               	skipz
  9232  06DE  2EED               	goto	l6954
  9233  06DF                     l6950:	
  9234                           
  9235                           ;PS_2.c: 739: {
  9236                           ;PS_2.c: 740: ParityTyped = 3;
  9237  06DF  3003               	movlw	3
  9238  06E0  0023               	movlb	3	; select bank3
  9239  06E1  00AF               	movwf	??_PS_2_Update^(0+384)
  9240  06E2  082F               	movf	??_PS_2_Update^(0+384),w
  9241  06E3  00AB               	movwf	_ParityTyped^(0+384)
  9242                           
  9243                           ;PS_2.c: 741: UARTchar(temp, 0, 0);
  9244  06E4  0020               	movlb	0	; select bank0
  9245  06E5  01AD               	clrf	UARTchar@override
  9246  06E6  01AE               	clrf	UARTchar@NinethBit_override_data
  9247  06E7  0025               	movlb	5	; select bank5
  9248  06E8  0860               	movf	PS_2_Update@temp^(0+640),w
  9249  06E9  319E  26CA  3181   	fcall	_UARTchar
  9250  06EC  2FB0               	goto	l770
  9251  06ED                     l6954:	
  9252                           ;PS_2.c: 742: }
  9253                           
  9254                           
  9255                           ;PS_2.c: 743: else if(temp == 's' || temp == 'S')
  9256  06ED  0025               	movlb	5	; select bank5
  9257  06EE  0860               	movf	PS_2_Update@temp^(0+640),w
  9258  06EF  3A73               	xorlw	115
  9259  06F0  1903               	skipnz
  9260  06F1  2EF6               	goto	l6958
  9261  06F2  0860               	movf	PS_2_Update@temp^(0+640),w
  9262  06F3  3A53               	xorlw	83
  9263  06F4  1D03               	skipz
  9264  06F5  2F04               	goto	l6962
  9265  06F6                     l6958:	
  9266                           
  9267                           ;PS_2.c: 744: {
  9268                           ;PS_2.c: 745: ParityTyped = 4;
  9269  06F6  3004               	movlw	4
  9270  06F7  0023               	movlb	3	; select bank3
  9271  06F8  00AF               	movwf	??_PS_2_Update^(0+384)
  9272  06F9  082F               	movf	??_PS_2_Update^(0+384),w
  9273  06FA  00AB               	movwf	_ParityTyped^(0+384)
  9274                           
  9275                           ;PS_2.c: 746: UARTchar(temp, 0, 0);
  9276  06FB  0020               	movlb	0	; select bank0
  9277  06FC  01AD               	clrf	UARTchar@override
  9278  06FD  01AE               	clrf	UARTchar@NinethBit_override_data
  9279  06FE  0025               	movlb	5	; select bank5
  9280  06FF  0860               	movf	PS_2_Update@temp^(0+640),w
  9281  0700  319E  26CA  3181   	fcall	_UARTchar
  9282  0703  2FB0               	goto	l770
  9283  0704                     l6962:	
  9284                           ;PS_2.c: 747: }
  9285                           
  9286                           
  9287                           ;PS_2.c: 748: else if(temp == '\r')
  9288  0704  0025               	movlb	5	; select bank5
  9289  0705  0860               	movf	PS_2_Update@temp^(0+640),w
  9290  0706  3A0D               	xorlw	13
  9291  0707  1D03               	skipz
  9292  0708  2FB1               	goto	l7002
  9293                           
  9294                           ;PS_2.c: 749: {
  9295                           ;PS_2.c: 750: UARTstringWAIT("\r\n");
  9296  0709  3056               	movlw	low ((STR_11+17)| (0+32768))
  9297  070A  0020               	movlb	0	; select bank0
  9298  070B  00B4               	movwf	UARTstringWAIT@data
  9299  070C  308B               	movlw	high ((STR_11+17)| (0+32768))
  9300  070D  00B5               	movwf	UARTstringWAIT@data+1
  9301  070E  319B  2362  3181   	fcall	_UARTstringWAIT
  9302                           
  9303                           ;PS_2.c: 751: delayUS(10000);
  9304  0711  3000               	movlw	0
  9305  0712  0020               	movlb	0	; select bank0
  9306  0713  00A8               	movwf	delayUS@US+3
  9307  0714  3000               	movlw	0
  9308  0715  00A7               	movwf	delayUS@US+2
  9309  0716  3027               	movlw	39
  9310  0717  00A6               	movwf	delayUS@US+1
  9311  0718  3010               	movlw	16
  9312  0719  00A5               	movwf	delayUS@US
  9313  071A  3190  2002  3181   	fcall	_delayUS
  9314                           
  9315                           ;PS_2.c: 752: if(BaudTyped >=2400 && BaudTyped <= 115200)
  9316  071D  3000               	movlw	0
  9317  071E  0020               	movlb	0	; select bank0
  9318  071F  0269               	subwf	_BaudTyped+3,w
  9319  0720  1D03               	skipz
  9320  0721  2F2C               	goto	u9815
  9321  0722  3000               	movlw	0
  9322  0723  0268               	subwf	_BaudTyped+2,w
  9323  0724  1D03               	skipz
  9324  0725  2F2C               	goto	u9815
  9325  0726  3009               	movlw	9
  9326  0727  0267               	subwf	_BaudTyped+1,w
  9327  0728  1D03               	skipz
  9328  0729  2F2C               	goto	u9815
  9329  072A  3060               	movlw	96
  9330  072B  0266               	subwf	_BaudTyped,w
  9331  072C                     u9815:	
  9332  072C  1C03               	skipc
  9333  072D  2F9A               	goto	l6996
  9334  072E  3000               	movlw	0
  9335  072F  0269               	subwf	_BaudTyped+3,w
  9336  0730  1D03               	skipz
  9337  0731  2F3C               	goto	u9825
  9338  0732  3001               	movlw	1
  9339  0733  0268               	subwf	_BaudTyped+2,w
  9340  0734  1D03               	skipz
  9341  0735  2F3C               	goto	u9825
  9342  0736  30C2               	movlw	194
  9343  0737  0267               	subwf	_BaudTyped+1,w
  9344  0738  1D03               	skipz
  9345  0739  2F3C               	goto	u9825
  9346  073A  3001               	movlw	1
  9347  073B  0266               	subwf	_BaudTyped,w
  9348  073C                     u9825:	
  9349  073C  1803               	skipnc
  9350  073D  2F9A               	goto	l6996
  9351                           
  9352                           ;PS_2.c: 753: {
  9353                           ;PS_2.c: 754: sprintf(buf,"KeyBoard Baud will be set to %lu",BaudTyped);
  9354  073E  30A0               	movlw	low PS_2_Update@buf
  9355  073F  00BD               	movwf	sprintf@sp
  9356  0740  3002               	movlw	high PS_2_Update@buf
  9357  0741  00BE               	movwf	sprintf@sp+1
  9358  0742  304E               	movlw	low (STR_34| (0+32768))
  9359  0743  00BF               	movwf	sprintf@f
  9360  0744  308A               	movlw	high (STR_34| (0+32768))
  9361  0745  00C0               	movwf	sprintf@f+1
  9362  0746  0869               	movf	_BaudTyped+3,w
  9363  0747  00C4               	movwf	?_sprintf+7
  9364  0748  0868               	movf	_BaudTyped+2,w
  9365  0749  00C3               	movwf	?_sprintf+6
  9366  074A  0867               	movf	_BaudTyped+1,w
  9367  074B  00C2               	movwf	?_sprintf+5
  9368  074C  0866               	movf	_BaudTyped,w
  9369  074D  00C1               	movwf	?_sprintf+4
  9370  074E  3194  249F  3181   	fcall	_sprintf
  9371                           
  9372                           ;PS_2.c: 755: UARTstringWAIT(buf);
  9373  0751  30A0               	movlw	low PS_2_Update@buf
  9374  0752  0020               	movlb	0	; select bank0
  9375  0753  00B4               	movwf	UARTstringWAIT@data
  9376  0754  3002               	movlw	high PS_2_Update@buf
  9377  0755  00B5               	movwf	UARTstringWAIT@data+1
  9378  0756  319B  2362  3181   	fcall	_UARTstringWAIT
  9379                           
  9380                           ;PS_2.c: 756: if(ParityTyped)
  9381  0759  0023               	movlb	3	; select bank3
  9382  075A  082B               	movf	_ParityTyped^(0+384),w
  9383  075B  1903               	btfsc	3,2
  9384  075C  2F7F               	goto	l6992
  9385                           
  9386                           ;PS_2.c: 757: {
  9387                           ;PS_2.c: 758: switch (ParityTyped)
  9388  075D  2F72               	goto	l6990
  9389  075E                     l6980:	
  9390                           ;PS_2.c: 759: {
  9391                           ;PS_2.c: 760: case 1:
  9392                           
  9393                           
  9394                           ;PS_2.c: 761: UARTstringWAIT(" with Odd parity bit\r\n");
  9395  075E  30EE               	movlw	low (STR_17| (0+32768))
  9396  075F  0020               	movlb	0	; select bank0
  9397  0760  00B4               	movwf	UARTstringWAIT@data
  9398  0761  308A               	movlw	high (STR_17| (0+32768))
  9399  0762  2F83               	goto	L16
  9400  0763                     l6982:	
  9401                           ;PS_2.c: 763: case 2:
  9402                           
  9403                           ;PS_2.c: 762: break;
  9404                           
  9405                           
  9406                           ;PS_2.c: 764: UARTstringWAIT(" with Even parity bit\r\n");
  9407  0763  30BE               	movlw	low (STR_18| (0+32768))
  9408  0764  0020               	movlb	0	; select bank0
  9409  0765  00B4               	movwf	UARTstringWAIT@data
  9410  0766  308A               	movlw	high (STR_18| (0+32768))
  9411  0767  2F83               	goto	L16
  9412  0768                     l6984:	
  9413                           ;PS_2.c: 766: case 3:
  9414                           
  9415                           ;PS_2.c: 765: break;
  9416                           
  9417                           
  9418                           ;PS_2.c: 767: UARTstringWAIT(" with Mark bit\r\n");
  9419  0768  30A3               	movlw	low (STR_19| (0+32768))
  9420  0769  0020               	movlb	0	; select bank0
  9421  076A  00B4               	movwf	UARTstringWAIT@data
  9422  076B  308B               	movlw	high (STR_19| (0+32768))
  9423  076C  2F83               	goto	L16
  9424  076D                     l6986:	
  9425                           ;PS_2.c: 769: default:
  9426                           
  9427                           ;PS_2.c: 768: break;
  9428                           
  9429                           
  9430                           ;PS_2.c: 770: UARTstringWAIT(" with Space bit\r\n");
  9431  076D  3091               	movlw	low (STR_20| (0+32768))
  9432  076E  0020               	movlb	0	; select bank0
  9433  076F  00B4               	movwf	UARTstringWAIT@data
  9434  0770  308B               	movlw	high (STR_20| (0+32768))
  9435  0771  2F83               	goto	L16
  9436  0772                     l6990:	
  9437                           ;PS_2.c: 772: }
  9438                           
  9439                           ;PS_2.c: 771: break;
  9440                           
  9441  0772  0023               	movlb	3	; select bank3
  9442  0773  082B               	movf	_ParityTyped^(0+384),w
  9443                           
  9444                           ; Switch size 1, requested type "space"
  9445                           ; Number of cases is 3, Range of values is 1 to 3
  9446                           ; switch strategies available:
  9447                           ; Name         Instructions Cycles
  9448                           ; simple_byte           10     6 (average)
  9449                           ; direct_byte           15     9 (fixed)
  9450                           ; jumptable            263     9 (fixed)
  9451                           ;	Chosen strategy is simple_byte
  9452  0774  3A01               	xorlw	1	; case 1
  9453  0775  1903               	skipnz
  9454  0776  2F5E               	goto	l6980
  9455  0777  3A03               	xorlw	3	; case 2
  9456  0778  1903               	skipnz
  9457  0779  2F63               	goto	l6982
  9458  077A  3A01               	xorlw	1	; case 3
  9459  077B  1903               	skipnz
  9460  077C  2F68               	goto	l6984
  9461  077D  2F6D               	goto	l6986
  9462                           
  9463                           ;PS_2.c: 773: }
  9464  077E  2F87               	goto	l6994
  9465  077F                     l6992:	
  9466                           
  9467                           ;PS_2.c: 774: else
  9468                           ;PS_2.c: 775: {
  9469                           ;PS_2.c: 776: UARTstringWAIT(" with no parity bit\r\n");
  9470  077F  3011               	movlw	low ((STR_32+22)| (0+32768))
  9471  0780  0020               	movlb	0	; select bank0
  9472  0781  00B4               	movwf	UARTstringWAIT@data
  9473  0782  308A               	movlw	high ((STR_32+22)| (0+32768))
  9474  0783                     L16:	
  9475  0783  00B5               	movwf	UARTstringWAIT@data+1
  9476  0784  319B  2362  3181   	fcall	_UARTstringWAIT
  9477  0787                     l6994:	
  9478                           
  9479                           ;PS_2.c: 777: }
  9480                           ;PS_2.c: 778: SetBaud(BaudTyped, ParityTyped);
  9481  0787  0020               	movlb	0	; select bank0
  9482  0788  0869               	movf	_BaudTyped+3,w
  9483  0789  00D7               	movwf	SetBaud@Baud+3
  9484  078A  0868               	movf	_BaudTyped+2,w
  9485  078B  00D6               	movwf	SetBaud@Baud+2
  9486  078C  0867               	movf	_BaudTyped+1,w
  9487  078D  00D5               	movwf	SetBaud@Baud+1
  9488  078E  0866               	movf	_BaudTyped,w
  9489  078F  00D4               	movwf	SetBaud@Baud
  9490  0790  0023               	movlb	3	; select bank3
  9491  0791  082B               	movf	_ParityTyped^(0+384),w
  9492  0792  00AF               	movwf	??_PS_2_Update^(0+384)
  9493  0793  082F               	movf	??_PS_2_Update^(0+384),w
  9494  0794  0020               	movlb	0	; select bank0
  9495  0795  00D8               	movwf	SetBaud@Parity
  9496  0796  3196  269B  3181   	fcall	_SetBaud
  9497                           
  9498                           ;PS_2.c: 779: }
  9499  0799  2FAE               	goto	l7000
  9500  079A                     l6996:	
  9501                           
  9502                           ;PS_2.c: 780: else
  9503                           ;PS_2.c: 781: {
  9504                           ;PS_2.c: 782: UARTstringWAIT("KeyBoard Baud Out of Range\r\n");
  9505  079A  306F               	movlw	low (STR_40| (0+32768))
  9506  079B  0020               	movlb	0	; select bank0
  9507  079C  00B4               	movwf	UARTstringWAIT@data
  9508  079D  308A               	movlw	high (STR_40| (0+32768))
  9509  079E  00B5               	movwf	UARTstringWAIT@data+1
  9510  079F  319B  2362  3181   	fcall	_UARTstringWAIT
  9511                           
  9512                           ;PS_2.c: 783: delayUS(10000);
  9513  07A2  3000               	movlw	0
  9514  07A3  0020               	movlb	0	; select bank0
  9515  07A4  00A8               	movwf	delayUS@US+3
  9516  07A5  3000               	movlw	0
  9517  07A6  00A7               	movwf	delayUS@US+2
  9518  07A7  3027               	movlw	39
  9519  07A8  00A6               	movwf	delayUS@US+1
  9520  07A9  3010               	movlw	16
  9521  07AA  00A5               	movwf	delayUS@US
  9522  07AB  3190  2002  3181   	fcall	_delayUS
  9523  07AE                     l7000:	
  9524                           
  9525                           ;PS_2.c: 784: }
  9526                           ;PS_2.c: 785: BAUDMODE=0;
  9527  07AE  0022               	movlb	2	; select bank2
  9528  07AF  01E3               	clrf	_BAUDMODE^(0+256)
  9529  07B0                     l770:	
  9530  07B0  0025               	movlb	5	; select bank5
  9531  07B1                     l7002:	
  9532                           
  9533                           ;PS_2.c: 786: }
  9534                           ;PS_2.c: 787: }
  9535                           ;PS_2.c: 788: }
  9536                           ;PS_2.c: 789: }
  9537                           ;PS_2.c: 790: PS_2_Read_Data_First =0;
  9538  07B1  0023               	movlb	3	; select bank3
  9539  07B2  01A0               	clrf	_PS_2_Read_Data_First^(0+384)
  9540  07B3  01A1               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  9541                           
  9542                           ;PS_2.c: 791: PS_2_Read_Data_Second =0;
  9543  07B4  01A4               	clrf	_PS_2_Read_Data_Second^(0+384)
  9544  07B5  01A5               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  9545                           
  9546                           ;PS_2.c: 792: PS_2_Read_Data_Third =0;
  9547  07B6  01A6               	clrf	_PS_2_Read_Data_Third^(0+384)
  9548  07B7  01A7               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  9549                           
  9550                           ;PS_2.c: 793: PS_2_Read_Data_Forth =0;
  9551  07B8  01A2               	clrf	_PS_2_Read_Data_Forth^(0+384)
  9552  07B9  01A3               	clrf	(_PS_2_Read_Data_Forth+1)^(0+384)
  9553                           
  9554                           ;PS_2.c: 794: PS_2_Read_Data_FirstTEMP =0;
  9555  07BA  0024               	movlb	4	; select bank4
  9556  07BB  01AE               	clrf	_PS_2_Read_Data_FirstTEMP^(0+512)
  9557  07BC  01AF               	clrf	(_PS_2_Read_Data_FirstTEMP+1)^(0+512)
  9558                           
  9559                           ;PS_2.c: 795: PS_2_Read_Data_SecondTEMP =0;
  9560  07BD  01B2               	clrf	_PS_2_Read_Data_SecondTEMP^(0+512)
  9561  07BE  01B3               	clrf	(_PS_2_Read_Data_SecondTEMP+1)^(0+512)
  9562                           
  9563                           ;PS_2.c: 796: PS_2_Read_Data_ThirdTEMP =0;
  9564  07BF  01B4               	clrf	_PS_2_Read_Data_ThirdTEMP^(0+512)
  9565  07C0  01B5               	clrf	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512)
  9566                           
  9567                           ;PS_2.c: 797: PS_2_Read_Data_ForthTEMP =0;
  9568  07C1  01B0               	clrf	_PS_2_Read_Data_ForthTEMP^(0+512)
  9569  07C2  01B1               	clrf	(_PS_2_Read_Data_ForthTEMP+1)^(0+512)
  9570                           
  9571                           ;PS_2.c: 798: Caps_Lock_Key_old = Caps_Lock_Key;
  9572  07C3  0022               	movlb	2	; select bank2
  9573  07C4  0864               	movf	_Caps_Lock_Key^(0+256),w
  9574  07C5  0023               	movlb	3	; select bank3
  9575  07C6  00AF               	movwf	??_PS_2_Update^(0+384)
  9576  07C7  082F               	movf	??_PS_2_Update^(0+384),w
  9577  07C8  0022               	movlb	2	; select bank2
  9578  07C9  00E5               	movwf	_Caps_Lock_Key_old^(0+256)
  9579                           
  9580                           ;PS_2.c: 799: Right_Shift_Key_old = Right_Shift_Key;
  9581  07CA  0023               	movlb	3	; select bank3
  9582  07CB  082D               	movf	_Right_Shift_Key^(0+384),w
  9583  07CC  00AF               	movwf	??_PS_2_Update^(0+384)
  9584  07CD  082F               	movf	??_PS_2_Update^(0+384),w
  9585  07CE  0022               	movlb	2	; select bank2
  9586  07CF  00EB               	movwf	_Right_Shift_Key_old^(0+256)
  9587                           
  9588                           ;PS_2.c: 800: Left_Shift_Key_old = Left_Shift_Key;
  9589  07D0  0023               	movlb	3	; select bank3
  9590  07D1  082A               	movf	_Left_Shift_Key^(0+384),w
  9591  07D2  00AF               	movwf	??_PS_2_Update^(0+384)
  9592  07D3  082F               	movf	??_PS_2_Update^(0+384),w
  9593  07D4  0022               	movlb	2	; select bank2
  9594  07D5  00E9               	movwf	_Left_Shift_Key_old^(0+256)
  9595                           
  9596                           ;PS_2.c: 801: LATC &= ~0b00010000;
  9597  07D6  30EF               	movlw	239
  9598  07D7  0023               	movlb	3	; select bank3
  9599  07D8  00AF               	movwf	??_PS_2_Update^(0+384)
  9600  07D9  082F               	movf	??_PS_2_Update^(0+384),w
  9601  07DA  0022               	movlb	2	; select bank2
  9602  07DB  058E               	andwf	14,f	;volatile
  9603                           
  9604                           ;PS_2.c: 802: PIE1bits.RCIE = 1;
  9605  07DC  0021               	movlb	1	; select bank1
  9606  07DD  1691               	bsf	17,5	;volatile
  9607                           
  9608                           ;PS_2.c: 803: PS_2_ENABLE_INTERRUPT(0b00100000);
  9609  07DE  3020               	movlw	32
  9610  07DF  3199  21B6         	fcall	_PS_2_ENABLE_INTERRUPT
  9611  07E1  0020               	movlb	0	; select bank0
  9612  07E2  0008               	return
  9613  07E3                     __end_of_PS_2_Update:	
  9614                           
  9615                           	psect	text13
  9616  1A6B                     __ptext13:	
  9617 ;; *************** function ___lmul *****************
  9618 ;; Defined at:
  9619 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul32.c"
  9620 ;; Parameters:    Size  Location     Type
  9621 ;;  multiplier      4    5[BANK0 ] unsigned long 
  9622 ;;  multiplicand    4    9[BANK0 ] unsigned long 
  9623 ;; Auto vars:     Size  Location     Type
  9624 ;;  product         4   13[BANK0 ] unsigned long 
  9625 ;; Return value:  Size  Location     Type
  9626 ;;                  4    5[BANK0 ] unsigned long 
  9627 ;; Registers used:
  9628 ;;		wreg, status,2, status,0
  9629 ;; Tracked objects:
  9630 ;;		On entry : 0/0
  9631 ;;		On exit  : 0/0
  9632 ;;		Unchanged: 0/0
  9633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9634 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9635 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9637 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9638 ;;Total ram usage:       12 bytes
  9639 ;; Hardware stack levels used:    1
  9640 ;; Hardware stack levels required when called:    3
  9641 ;; This function calls:
  9642 ;;		Nothing
  9643 ;; This function is called by:
  9644 ;;		_PS_2_Update
  9645 ;; This function uses a non-reentrant model
  9646 ;;
  9647                           
  9648                           
  9649                           ;psect for function ___lmul
  9650  1A6B                     ___lmul:	
  9651                           
  9652                           ;incstack = 0
  9653                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  9654  1A6B  3000               	movlw	0
  9655  1A6C  0020               	movlb	0	; select bank0
  9656  1A6D  00B0               	movwf	___lmul@product+3
  9657  1A6E  3000               	movlw	0
  9658  1A6F  00AF               	movwf	___lmul@product+2
  9659  1A70  3000               	movlw	0
  9660  1A71  00AE               	movwf	___lmul@product+1
  9661  1A72  3000               	movlw	0
  9662  1A73  00AD               	movwf	___lmul@product
  9663  1A74                     l6442:	
  9664  1A74  1C25               	btfss	___lmul@multiplier,0
  9665  1A75  2A7E               	goto	l6446
  9666  1A76  0829               	movf	___lmul@multiplicand,w
  9667  1A77  07AD               	addwf	___lmul@product,f
  9668  1A78  082A               	movf	___lmul@multiplicand+1,w
  9669  1A79  3DAE               	addwfc	___lmul@product+1,f
  9670  1A7A  082B               	movf	___lmul@multiplicand+2,w
  9671  1A7B  3DAF               	addwfc	___lmul@product+2,f
  9672  1A7C  082C               	movf	___lmul@multiplicand+3,w
  9673  1A7D  3DB0               	addwfc	___lmul@product+3,f
  9674  1A7E                     l6446:	
  9675  1A7E  3001               	movlw	1
  9676  1A7F                     u8445:	
  9677  1A7F  35A9               	lslf	___lmul@multiplicand,f
  9678  1A80  0DAA               	rlf	___lmul@multiplicand+1,f
  9679  1A81  0DAB               	rlf	___lmul@multiplicand+2,f
  9680  1A82  0DAC               	rlf	___lmul@multiplicand+3,f
  9681  1A83  0B89               	decfsz	9,f
  9682  1A84  2A7F               	goto	u8445
  9683  1A85  3001               	movlw	1
  9684  1A86                     u8455:	
  9685  1A86  36A8               	lsrf	___lmul@multiplier+3,f
  9686  1A87  0CA7               	rrf	___lmul@multiplier+2,f
  9687  1A88  0CA6               	rrf	___lmul@multiplier+1,f
  9688  1A89  0CA5               	rrf	___lmul@multiplier,f
  9689  1A8A  0B89               	decfsz	9,f
  9690  1A8B  2A86               	goto	u8455
  9691  1A8C  0828               	movf	___lmul@multiplier+3,w
  9692  1A8D  0427               	iorwf	___lmul@multiplier+2,w
  9693  1A8E  0426               	iorwf	___lmul@multiplier+1,w
  9694  1A8F  0425               	iorwf	___lmul@multiplier,w
  9695  1A90  1D03               	skipz
  9696  1A91  2A74               	goto	l6442
  9697  1A92  0830               	movf	___lmul@product+3,w
  9698  1A93  00A8               	movwf	?___lmul+3
  9699  1A94  082F               	movf	___lmul@product+2,w
  9700  1A95  00A7               	movwf	?___lmul+2
  9701  1A96  082E               	movf	___lmul@product+1,w
  9702  1A97  00A6               	movwf	?___lmul+1
  9703  1A98  082D               	movf	___lmul@product,w
  9704  1A99  00A5               	movwf	?___lmul
  9705  1A9A  0008               	return
  9706  1A9B                     __end_of___lmul:	
  9707                           
  9708                           	psect	text14
  9709  1A14                     __ptext14:	
  9710 ;; *************** function _UART_send_break_timed *****************
  9711 ;; Defined at:
  9712 ;;		line 335 in file "UART.c"
  9713 ;; Parameters:    Size  Location     Type
  9714 ;;  US              2   15[BANK0 ] unsigned int 
  9715 ;; Auto vars:     Size  Location     Type
  9716 ;;		None
  9717 ;; Return value:  Size  Location     Type
  9718 ;;		None               void
  9719 ;; Registers used:
  9720 ;;		wreg, status,2, status,0, pclath, cstack
  9721 ;; Tracked objects:
  9722 ;;		On entry : 0/0
  9723 ;;		On exit  : 0/0
  9724 ;;		Unchanged: 0/0
  9725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9726 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9728 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9729 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9730 ;;Total ram usage:        3 bytes
  9731 ;; Hardware stack levels used:    1
  9732 ;; Hardware stack levels required when called:    4
  9733 ;; This function calls:
  9734 ;;		_delayUS
  9735 ;; This function is called by:
  9736 ;;		_PS_2_Update
  9737 ;; This function uses a non-reentrant model
  9738 ;;
  9739                           
  9740                           
  9741                           ;psect for function _UART_send_break_timed
  9742  1A14                     _UART_send_break_timed:	
  9743                           
  9744                           ;UART.c: 338: LATC |= 0b00000100;
  9745                           
  9746                           ;incstack = 0
  9747                           ; Regs used in _UART_send_break_timed: [wreg+status,2+status,0+pclath+cstack]
  9748  1A14  0022               	movlb	2	; select bank2
  9749  1A15  150E               	bsf	14,2	;volatile
  9750                           
  9751                           ;UART.c: 339: PPSLOCK =0;
  9752  1A16  003C               	movlb	28	; select bank28
  9753  1A17  018F               	clrf	15	;volatile
  9754                           
  9755                           ;UART.c: 340: RC2PPS = 0b00000000;
  9756  1A18  003D               	movlb	29	; select bank29
  9757  1A19  01A2               	clrf	34	;volatile
  9758                           
  9759                           ;UART.c: 341: PPSLOCK =1;
  9760  1A1A  3001               	movlw	1
  9761  1A1B  003C               	movlb	28	; select bank28
  9762  1A1C  008F               	movwf	15	;volatile
  9763                           
  9764                           ;UART.c: 343: LATC &= ~0b00000100;
  9765  1A1D  30FB               	movlw	251
  9766  1A1E  0020               	movlb	0	; select bank0
  9767  1A1F  00B1               	movwf	??_UART_send_break_timed
  9768  1A20  0831               	movf	??_UART_send_break_timed,w
  9769  1A21  0022               	movlb	2	; select bank2
  9770  1A22  058E               	andwf	14,f	;volatile
  9771                           
  9772                           ;UART.c: 344: delayUS(US);
  9773  1A23  0020               	movlb	0	; select bank0
  9774  1A24  082F               	movf	UART_send_break_timed@US,w
  9775  1A25  00A5               	movwf	delayUS@US
  9776  1A26  0830               	movf	UART_send_break_timed@US+1,w
  9777  1A27  00A6               	movwf	delayUS@US+1
  9778  1A28  01A7               	clrf	delayUS@US+2
  9779  1A29  01A8               	clrf	delayUS@US+3
  9780  1A2A  3190  2002         	fcall	_delayUS
  9781                           
  9782                           ;UART.c: 345: LATC |= 0b00000100;
  9783  1A2C  0022               	movlb	2	; select bank2
  9784  1A2D  150E               	bsf	14,2	;volatile
  9785                           
  9786                           ;UART.c: 347: PPSLOCK =0;
  9787  1A2E  003C               	movlb	28	; select bank28
  9788  1A2F  018F               	clrf	15	;volatile
  9789                           
  9790                           ;UART.c: 348: RC2PPS = 0b00010100;
  9791  1A30  3014               	movlw	20
  9792  1A31  003D               	movlb	29	; select bank29
  9793  1A32  00A2               	movwf	34	;volatile
  9794                           
  9795                           ;UART.c: 349: CKPPS = 0b00010010;
  9796  1A33  3012               	movlw	18
  9797  1A34  003C               	movlb	28	; select bank28
  9798  1A35  00A5               	movwf	37	;volatile
  9799                           
  9800                           ;UART.c: 351: RXPPS = 0b00010101;
  9801  1A36  3015               	movlw	21
  9802  1A37  00A4               	movwf	36	;volatile
  9803                           
  9804                           ;UART.c: 353: PPSLOCK =1;
  9805  1A38  3001               	movlw	1
  9806  1A39  008F               	movwf	15	;volatile
  9807  1A3A  0008               	return
  9808  1A3B                     __end_of_UART_send_break_timed:	
  9809                           
  9810                           	psect	text15
  9811  169B                     __ptext15:	
  9812 ;; *************** function _SetBaud *****************
  9813 ;; Defined at:
  9814 ;;		line 381 in file "UART.c"
  9815 ;; Parameters:    Size  Location     Type
  9816 ;;  Baud            4   52[BANK0 ] unsigned long 
  9817 ;;  Parity          1   56[BANK0 ] unsigned char 
  9818 ;; Auto vars:     Size  Location     Type
  9819 ;;  buf            50    0[BANK2 ] unsigned char [50]
  9820 ;;  temp            4   58[BANK2 ] unsigned long 
  9821 ;;  Paritytemp      4   54[BANK2 ] unsigned long 
  9822 ;;  Baudtemp        4   50[BANK2 ] unsigned long 
  9823 ;;  i               1   62[BANK2 ] unsigned char 
  9824 ;; Return value:  Size  Location     Type
  9825 ;;		None               void
  9826 ;; Registers used:
  9827 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9828 ;; Tracked objects:
  9829 ;;		On entry : 0/0
  9830 ;;		On exit  : 0/0
  9831 ;;		Unchanged: 0/0
  9832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9833 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9834 ;;      Locals:         0       0       0      63       0       0       0       0       0       0       0       0       
      +0       0
  9835 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9836 ;;      Totals:         0      13       0      63       0       0       0       0       0       0       0       0       
      +0       0
  9837 ;;Total ram usage:       76 bytes
  9838 ;; Hardware stack levels used:    1
  9839 ;; Hardware stack levels required when called:    7
  9840 ;; This function calls:
  9841 ;;		_InitUART
  9842 ;;		_ReadBaud
  9843 ;;		_UARTstringWAIT
  9844 ;;		_WriteBaud
  9845 ;;		_delayUS
  9846 ;;		_sprintf
  9847 ;; This function is called by:
  9848 ;;		_PS_2_Update
  9849 ;; This function uses a non-reentrant model
  9850 ;;
  9851                           
  9852                           
  9853                           ;psect for function _SetBaud
  9854  169B                     _SetBaud:	
  9855                           
  9856                           ;UART.c: 383: unsigned char buf[50];
  9857                           ;UART.c: 384: unsigned long Baudtemp=0;
  9858                           
  9859                           ;incstack = 0
  9860                           ; Regs used in _SetBaud: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9861  169B  3000               	movlw	0
  9862  169C  0022               	movlb	2	; select bank2
  9863  169D  00D5               	movwf	(SetBaud@Baudtemp+3)^(0+256)
  9864  169E  3000               	movlw	0
  9865  169F  00D4               	movwf	(SetBaud@Baudtemp+2)^(0+256)
  9866  16A0  3000               	movlw	0
  9867  16A1  00D3               	movwf	(SetBaud@Baudtemp+1)^(0+256)
  9868  16A2  3000               	movlw	0
  9869  16A3  00D2               	movwf	SetBaud@Baudtemp^(0+256)
  9870                           
  9871                           ;UART.c: 385: unsigned long Paritytemp=0;
  9872  16A4  3000               	movlw	0
  9873  16A5  00D9               	movwf	(SetBaud@Paritytemp+3)^(0+256)
  9874  16A6  3000               	movlw	0
  9875  16A7  00D8               	movwf	(SetBaud@Paritytemp+2)^(0+256)
  9876  16A8  3000               	movlw	0
  9877  16A9  00D7               	movwf	(SetBaud@Paritytemp+1)^(0+256)
  9878  16AA  3000               	movlw	0
  9879  16AB  00D6               	movwf	SetBaud@Paritytemp^(0+256)
  9880                           
  9881                           ;UART.c: 386: unsigned long temp;
  9882                           ;UART.c: 387: unsigned char i =0;
  9883  16AC  01DE               	clrf	SetBaud@i^(0+256)
  9884                           
  9885                           ;UART.c: 389: WriteBaud((0x1800 >> 5), Baud, Parity);
  9886  16AD  30C0               	movlw	192
  9887  16AE  0020               	movlb	0	; select bank0
  9888  16AF  00B6               	movwf	WriteBaud@row
  9889  16B0  3000               	movlw	0
  9890  16B1  00B7               	movwf	WriteBaud@row+1
  9891  16B2  0857               	movf	SetBaud@Baud+3,w
  9892  16B3  00BB               	movwf	WriteBaud@Baud+3
  9893  16B4  0856               	movf	SetBaud@Baud+2,w
  9894  16B5  00BA               	movwf	WriteBaud@Baud+2
  9895  16B6  0855               	movf	SetBaud@Baud+1,w
  9896  16B7  00B9               	movwf	WriteBaud@Baud+1
  9897  16B8  0854               	movf	SetBaud@Baud,w
  9898  16B9  00B8               	movwf	WriteBaud@Baud
  9899  16BA  0858               	movf	SetBaud@Parity,w
  9900  16BB  00D9               	movwf	??_SetBaud
  9901  16BC  0859               	movf	??_SetBaud,w
  9902  16BD  00BC               	movwf	WriteBaud@Parity
  9903  16BE  319D  25A9  3196   	fcall	_WriteBaud
  9904                           
  9905                           ;UART.c: 390: temp = ReadBaud((0x1800 >> 5), 0);
  9906  16C1  30C0               	movlw	192
  9907  16C2  0020               	movlb	0	; select bank0
  9908  16C3  00B7               	movwf	ReadBaud@row
  9909  16C4  3000               	movlw	0
  9910  16C5  00B8               	movwf	ReadBaud@row+1
  9911  16C6  01B9               	clrf	ReadBaud@column
  9912  16C7  319E  2666  3196   	fcall	_ReadBaud
  9913  16CA  0020               	movlb	0	; select bank0
  9914  16CB  083A               	movf	?_ReadBaud+3,w
  9915  16CC  0022               	movlb	2	; select bank2
  9916  16CD  00DD               	movwf	(SetBaud@temp+3)^(0+256)
  9917  16CE  0020               	movlb	0	; select bank0
  9918  16CF  0839               	movf	?_ReadBaud+2,w
  9919  16D0  0022               	movlb	2	; select bank2
  9920  16D1  00DC               	movwf	(SetBaud@temp+2)^(0+256)
  9921  16D2  0020               	movlb	0	; select bank0
  9922  16D3  0838               	movf	?_ReadBaud+1,w
  9923  16D4  0022               	movlb	2	; select bank2
  9924  16D5  00DB               	movwf	(SetBaud@temp+1)^(0+256)
  9925  16D6  0020               	movlb	0	; select bank0
  9926  16D7  0837               	movf	?_ReadBaud,w
  9927  16D8  0022               	movlb	2	; select bank2
  9928  16D9  00DA               	movwf	SetBaud@temp^(0+256)
  9929                           
  9930                           ;UART.c: 391: Baudtemp = temp & 0x000FFFFF;
  9931  16DA  30FF               	movlw	255
  9932  16DB  055A               	andwf	SetBaud@temp^(0+256),w
  9933  16DC  00D2               	movwf	SetBaud@Baudtemp^(0+256)
  9934  16DD  30FF               	movlw	255
  9935  16DE  055B               	andwf	(SetBaud@temp+1)^(0+256),w
  9936  16DF  00D3               	movwf	(SetBaud@Baudtemp+1)^(0+256)
  9937  16E0  300F               	movlw	15
  9938  16E1  055C               	andwf	(SetBaud@temp+2)^(0+256),w
  9939  16E2  00D4               	movwf	(SetBaud@Baudtemp+2)^(0+256)
  9940  16E3  3000               	movlw	0
  9941  16E4  055D               	andwf	(SetBaud@temp+3)^(0+256),w
  9942  16E5  00D5               	movwf	(SetBaud@Baudtemp+3)^(0+256)
  9943                           
  9944                           ;UART.c: 392: Paritytemp = (unsigned char)((temp & 0x00F00000) >> 20);
  9945  16E6  085A               	movf	SetBaud@temp^(0+256),w
  9946  16E7  0020               	movlb	0	; select bank0
  9947  16E8  00D9               	movwf	??_SetBaud
  9948  16E9  0022               	movlb	2	; select bank2
  9949  16EA  085B               	movf	(SetBaud@temp+1)^(0+256),w
  9950  16EB  0020               	movlb	0	; select bank0
  9951  16EC  00DA               	movwf	??_SetBaud+1
  9952  16ED  0022               	movlb	2	; select bank2
  9953  16EE  085C               	movf	(SetBaud@temp+2)^(0+256),w
  9954  16EF  0020               	movlb	0	; select bank0
  9955  16F0  00DB               	movwf	??_SetBaud+2
  9956  16F1  0022               	movlb	2	; select bank2
  9957  16F2  085D               	movf	(SetBaud@temp+3)^(0+256),w
  9958  16F3  0020               	movlb	0	; select bank0
  9959  16F4  00DC               	movwf	??_SetBaud+3
  9960  16F5  3014               	movlw	20
  9961  16F6                     u8115:	
  9962  16F6  36DC               	lsrf	??_SetBaud+3,f
  9963  16F7  0CDB               	rrf	??_SetBaud+2,f
  9964  16F8  0CDA               	rrf	??_SetBaud+1,f
  9965  16F9  0CD9               	rrf	??_SetBaud,f
  9966  16FA  0B89               	decfsz	9,f
  9967  16FB  2EF6               	goto	u8115
  9968  16FC  0859               	movf	??_SetBaud,w
  9969  16FD  390F               	andlw	15
  9970  16FE  00DD               	movwf	??_SetBaud+4
  9971  16FF  01DE               	clrf	??_SetBaud+5
  9972  1700  01DF               	clrf	??_SetBaud+6
  9973  1701  01E0               	clrf	??_SetBaud+7
  9974  1702  0860               	movf	??_SetBaud+7,w
  9975  1703  0022               	movlb	2	; select bank2
  9976  1704  00D9               	movwf	(SetBaud@Paritytemp+3)^(0+256)
  9977  1705  0020               	movlb	0	; select bank0
  9978  1706  085F               	movf	??_SetBaud+6,w
  9979  1707  0022               	movlb	2	; select bank2
  9980  1708  00D8               	movwf	(SetBaud@Paritytemp+2)^(0+256)
  9981  1709  0020               	movlb	0	; select bank0
  9982  170A  085E               	movf	??_SetBaud+5,w
  9983  170B  0022               	movlb	2	; select bank2
  9984  170C  00D7               	movwf	(SetBaud@Paritytemp+1)^(0+256)
  9985  170D  0020               	movlb	0	; select bank0
  9986  170E  085D               	movf	??_SetBaud+4,w
  9987  170F  0022               	movlb	2	; select bank2
  9988  1710  00D6               	movwf	SetBaud@Paritytemp^(0+256)
  9989                           
  9990                           ;UART.c: 394: InitUART(Baud, Parity);
  9991  1711  0020               	movlb	0	; select bank0
  9992  1712  0857               	movf	SetBaud@Baud+3,w
  9993  1713  00B6               	movwf	InitUART@Baud+3
  9994  1714  0856               	movf	SetBaud@Baud+2,w
  9995  1715  00B5               	movwf	InitUART@Baud+2
  9996  1716  0855               	movf	SetBaud@Baud+1,w
  9997  1717  00B4               	movwf	InitUART@Baud+1
  9998  1718  0854               	movf	SetBaud@Baud,w
  9999  1719  00B3               	movwf	InitUART@Baud
 10000  171A  0858               	movf	SetBaud@Parity,w
 10001  171B  00D9               	movwf	??_SetBaud
 10002  171C  0859               	movf	??_SetBaud,w
 10003  171D  00B7               	movwf	InitUART@parity
 10004  171E  3191  21CA  3196   	fcall	_InitUART
 10005                           
 10006                           ;UART.c: 395: UARTstringWAIT("\r\n");
 10007  1721  3056               	movlw	low ((STR_11+17)| (0+32768))
 10008  1722  0020               	movlb	0	; select bank0
 10009  1723  00B4               	movwf	UARTstringWAIT@data
 10010  1724  308B               	movlw	high ((STR_11+17)| (0+32768))
 10011  1725  00B5               	movwf	UARTstringWAIT@data+1
 10012  1726  319B  2362  3196   	fcall	_UARTstringWAIT
 10013                           
 10014                           ;UART.c: 396: delayUS(10000);
 10015  1729  3000               	movlw	0
 10016  172A  0020               	movlb	0	; select bank0
 10017  172B  00A8               	movwf	delayUS@US+3
 10018  172C  3000               	movlw	0
 10019  172D  00A7               	movwf	delayUS@US+2
 10020  172E  3027               	movlw	39
 10021  172F  00A6               	movwf	delayUS@US+1
 10022  1730  3010               	movlw	16
 10023  1731  00A5               	movwf	delayUS@US
 10024  1732  3190  2002  3196   	fcall	_delayUS
 10025                           
 10026                           ;UART.c: 397: if((Baud != Baudtemp) || (Parity != Paritytemp))
 10027  1735  0022               	movlb	2	; select bank2
 10028  1736  0855               	movf	(SetBaud@Baudtemp+3)^(0+256),w
 10029  1737  0020               	movlb	0	; select bank0
 10030  1738  0657               	xorwf	SetBaud@Baud+3,w
 10031  1739  1D03               	skipz
 10032  173A  2F4B               	goto	u8125
 10033  173B  0022               	movlb	2	; select bank2
 10034  173C  0854               	movf	(SetBaud@Baudtemp+2)^(0+256),w
 10035  173D  0020               	movlb	0	; select bank0
 10036  173E  0656               	xorwf	SetBaud@Baud+2,w
 10037  173F  1D03               	skipz
 10038  1740  2F4B               	goto	u8125
 10039  1741  0022               	movlb	2	; select bank2
 10040  1742  0853               	movf	(SetBaud@Baudtemp+1)^(0+256),w
 10041  1743  0020               	movlb	0	; select bank0
 10042  1744  0655               	xorwf	SetBaud@Baud+1,w
 10043  1745  1D03               	skipz
 10044  1746  2F4B               	goto	u8125
 10045  1747  0022               	movlb	2	; select bank2
 10046  1748  0852               	movf	SetBaud@Baudtemp^(0+256),w
 10047  1749  0020               	movlb	0	; select bank0
 10048  174A  0654               	xorwf	SetBaud@Baud,w
 10049  174B                     u8125:	
 10050  174B  1D03               	skipz
 10051  174C  2F6A               	goto	l6200
 10052  174D  0858               	movf	SetBaud@Parity,w
 10053  174E  00D9               	movwf	??_SetBaud
 10054  174F  01DA               	clrf	??_SetBaud+1
 10055  1750  01DB               	clrf	??_SetBaud+2
 10056  1751  01DC               	clrf	??_SetBaud+3
 10057  1752  0022               	movlb	2	; select bank2
 10058  1753  0859               	movf	(SetBaud@Paritytemp+3)^(0+256),w
 10059  1754  0020               	movlb	0	; select bank0
 10060  1755  065C               	xorwf	??_SetBaud+3,w
 10061  1756  1D03               	skipz
 10062  1757  2F68               	goto	u8135
 10063  1758  0022               	movlb	2	; select bank2
 10064  1759  0858               	movf	(SetBaud@Paritytemp+2)^(0+256),w
 10065  175A  0020               	movlb	0	; select bank0
 10066  175B  065B               	xorwf	??_SetBaud+2,w
 10067  175C  1D03               	skipz
 10068  175D  2F68               	goto	u8135
 10069  175E  0022               	movlb	2	; select bank2
 10070  175F  0857               	movf	(SetBaud@Paritytemp+1)^(0+256),w
 10071  1760  0020               	movlb	0	; select bank0
 10072  1761  065A               	xorwf	??_SetBaud+1,w
 10073  1762  1D03               	skipz
 10074  1763  2F68               	goto	u8135
 10075  1764  0022               	movlb	2	; select bank2
 10076  1765  0856               	movf	SetBaud@Paritytemp^(0+256),w
 10077  1766  0020               	movlb	0	; select bank0
 10078  1767  0659               	xorwf	??_SetBaud,w
 10079  1768                     u8135:	
 10080  1768  1903               	skipnz
 10081  1769  2F7D               	goto	l6204
 10082  176A                     l6200:	
 10083                           
 10084                           ;UART.c: 398: {
 10085                           ;UART.c: 399: UARTstringWAIT("KeyBoard Program Fail\r\n");
 10086  176A  30A6               	movlw	low (STR_23| (0+32768))
 10087  176B  00B4               	movwf	UARTstringWAIT@data
 10088  176C  308A               	movlw	high (STR_23| (0+32768))
 10089  176D  00B5               	movwf	UARTstringWAIT@data+1
 10090  176E  319B  2362  3196   	fcall	_UARTstringWAIT
 10091                           
 10092                           ;UART.c: 400: delayUS(10000);
 10093  1771  3000               	movlw	0
 10094  1772  0020               	movlb	0	; select bank0
 10095  1773  00A8               	movwf	delayUS@US+3
 10096  1774  3000               	movlw	0
 10097  1775  00A7               	movwf	delayUS@US+2
 10098  1776  3027               	movlw	39
 10099  1777  00A6               	movwf	delayUS@US+1
 10100  1778  3010               	movlw	16
 10101  1779  00A5               	movwf	delayUS@US
 10102  177A  3190  2002  3196   	fcall	_delayUS
 10103  177D                     l6204:	
 10104                           
 10105                           ;UART.c: 401: }
 10106                           ;UART.c: 404: for(i =0;i<10;i++)
 10107  177D  0022               	movlb	2	; select bank2
 10108  177E  01DE               	clrf	SetBaud@i^(0+256)
 10109  177F  300A               	movlw	10
 10110  1780  025E               	subwf	SetBaud@i^(0+256),w
 10111  1781  1803               	btfsc	3,0
 10112  1782  2FAC               	goto	l6218
 10113  1783                     l451:	
 10114                           
 10115                           ;UART.c: 405: {
 10116                           ;UART.c: 406: LATC |= 0b00010000;
 10117  1783  160E               	bsf	14,4	;volatile
 10118                           
 10119                           ;UART.c: 407: delayUS(10000);
 10120  1784  3000               	movlw	0
 10121  1785  0020               	movlb	0	; select bank0
 10122  1786  00A8               	movwf	delayUS@US+3
 10123  1787  3000               	movlw	0
 10124  1788  00A7               	movwf	delayUS@US+2
 10125  1789  3027               	movlw	39
 10126  178A  00A6               	movwf	delayUS@US+1
 10127  178B  3010               	movlw	16
 10128  178C  00A5               	movwf	delayUS@US
 10129  178D  3190  2002  3196   	fcall	_delayUS
 10130                           
 10131                           ;UART.c: 408: LATC &= ~0b00010000;
 10132  1790  30EF               	movlw	239
 10133  1791  0020               	movlb	0	; select bank0
 10134  1792  00D9               	movwf	??_SetBaud
 10135  1793  0859               	movf	??_SetBaud,w
 10136  1794  0022               	movlb	2	; select bank2
 10137  1795  058E               	andwf	14,f	;volatile
 10138                           
 10139                           ;UART.c: 409: delayUS(10000);
 10140  1796  3000               	movlw	0
 10141  1797  0020               	movlb	0	; select bank0
 10142  1798  00A8               	movwf	delayUS@US+3
 10143  1799  3000               	movlw	0
 10144  179A  00A7               	movwf	delayUS@US+2
 10145  179B  3027               	movlw	39
 10146  179C  00A6               	movwf	delayUS@US+1
 10147  179D  3010               	movlw	16
 10148  179E  00A5               	movwf	delayUS@US
 10149  179F  3190  2002  3196   	fcall	_delayUS
 10150  17A2  3001               	movlw	1
 10151  17A3  0020               	movlb	0	; select bank0
 10152  17A4  00D9               	movwf	??_SetBaud
 10153  17A5  0859               	movf	??_SetBaud,w
 10154  17A6  0022               	movlb	2	; select bank2
 10155  17A7  07DE               	addwf	SetBaud@i^(0+256),f
 10156  17A8  300A               	movlw	10
 10157  17A9  025E               	subwf	SetBaud@i^(0+256),w
 10158  17AA  1C03               	skipc
 10159  17AB  2F83               	goto	l451
 10160  17AC                     l6218:	
 10161                           
 10162                           ;UART.c: 410: }
 10163                           ;UART.c: 412: sprintf(buf,"KeyBoard Baud is %lu",Baud);
 10164  17AC  3020               	movlw	low SetBaud@buf
 10165  17AD  0020               	movlb	0	; select bank0
 10166  17AE  00BD               	movwf	sprintf@sp
 10167  17AF  3001               	movlw	high SetBaud@buf
 10168  17B0  00BE               	movwf	sprintf@sp+1
 10169  17B1  301B               	movlw	low (STR_16| (0+32768))
 10170  17B2  00BF               	movwf	sprintf@f
 10171  17B3  308B               	movlw	high (STR_16| (0+32768))
 10172  17B4  00C0               	movwf	sprintf@f+1
 10173  17B5  0857               	movf	SetBaud@Baud+3,w
 10174  17B6  00C4               	movwf	?_sprintf+7
 10175  17B7  0856               	movf	SetBaud@Baud+2,w
 10176  17B8  00C3               	movwf	?_sprintf+6
 10177  17B9  0855               	movf	SetBaud@Baud+1,w
 10178  17BA  00C2               	movwf	?_sprintf+5
 10179  17BB  0854               	movf	SetBaud@Baud,w
 10180  17BC  00C1               	movwf	?_sprintf+4
 10181  17BD  3194  249F  3196   	fcall	_sprintf
 10182                           
 10183                           ;UART.c: 413: UARTstringWAIT(buf);
 10184  17C0  3020               	movlw	low SetBaud@buf
 10185  17C1  0020               	movlb	0	; select bank0
 10186  17C2  00B4               	movwf	UARTstringWAIT@data
 10187  17C3  3001               	movlw	high SetBaud@buf
 10188  17C4  00B5               	movwf	UARTstringWAIT@data+1
 10189  17C5  319B  2362  3196   	fcall	_UARTstringWAIT
 10190                           
 10191                           ;UART.c: 414: if(Parity)
 10192  17C8  0020               	movlb	0	; select bank0
 10193  17C9  0858               	movf	SetBaud@Parity,w
 10194  17CA  1903               	btfsc	3,2
 10195  17CB  2FED               	goto	l6238
 10196                           
 10197                           ;UART.c: 415: {
 10198                           ;UART.c: 416: switch (Parity)
 10199  17CC  2FE0               	goto	l6236
 10200  17CD                     l6226:	
 10201                           ;UART.c: 417: {
 10202                           ;UART.c: 418: case 1:
 10203                           
 10204                           
 10205                           ;UART.c: 419: UARTstringWAIT(" with Odd parity bit\r\n");
 10206  17CD  30EE               	movlw	low (STR_17| (0+32768))
 10207  17CE  00B4               	movwf	UARTstringWAIT@data
 10208  17CF  308A               	movlw	high (STR_17| (0+32768))
 10209  17D0  2FF0               	goto	L17
 10210  17D1                     l6228:	
 10211                           ;UART.c: 421: case 2:
 10212                           
 10213                           ;UART.c: 420: break;
 10214                           
 10215                           
 10216                           ;UART.c: 422: UARTstringWAIT(" with Even parity bit\r\n");
 10217  17D1  30BE               	movlw	low (STR_18| (0+32768))
 10218  17D2  0020               	movlb	0	; select bank0
 10219  17D3  00B4               	movwf	UARTstringWAIT@data
 10220  17D4  308A               	movlw	high (STR_18| (0+32768))
 10221  17D5  2FF0               	goto	L17
 10222  17D6                     l6230:	
 10223                           ;UART.c: 424: case 3:
 10224                           
 10225                           ;UART.c: 423: break;
 10226                           
 10227                           
 10228                           ;UART.c: 425: UARTstringWAIT(" with Mark bit\r\n");
 10229  17D6  30A3               	movlw	low (STR_19| (0+32768))
 10230  17D7  0020               	movlb	0	; select bank0
 10231  17D8  00B4               	movwf	UARTstringWAIT@data
 10232  17D9  308B               	movlw	high (STR_19| (0+32768))
 10233  17DA  2FF0               	goto	L17
 10234  17DB                     l6232:	
 10235                           ;UART.c: 427: default:
 10236                           
 10237                           ;UART.c: 426: break;
 10238                           
 10239                           
 10240                           ;UART.c: 428: UARTstringWAIT(" with Space bit\r\n");
 10241  17DB  3091               	movlw	low (STR_20| (0+32768))
 10242  17DC  0020               	movlb	0	; select bank0
 10243  17DD  00B4               	movwf	UARTstringWAIT@data
 10244  17DE  308B               	movlw	high (STR_20| (0+32768))
 10245  17DF  2FF0               	goto	L17
 10246  17E0                     l6236:	
 10247                           ;UART.c: 430: }
 10248                           
 10249                           ;UART.c: 429: break;
 10250                           
 10251  17E0  0020               	movlb	0	; select bank0
 10252  17E1  0858               	movf	SetBaud@Parity,w
 10253                           
 10254                           ; Switch size 1, requested type "space"
 10255                           ; Number of cases is 3, Range of values is 1 to 3
 10256                           ; switch strategies available:
 10257                           ; Name         Instructions Cycles
 10258                           ; simple_byte           10     6 (average)
 10259                           ; direct_byte           15     9 (fixed)
 10260                           ; jumptable            263     9 (fixed)
 10261                           ;	Chosen strategy is simple_byte
 10262  17E2  3A01               	xorlw	1	; case 1
 10263  17E3  1903               	skipnz
 10264  17E4  2FCD               	goto	l6226
 10265  17E5  3A03               	xorlw	3	; case 2
 10266  17E6  1903               	skipnz
 10267  17E7  2FD1               	goto	l6228
 10268  17E8  3A01               	xorlw	1	; case 3
 10269  17E9  1903               	skipnz
 10270  17EA  2FD6               	goto	l6230
 10271  17EB  2FDB               	goto	l6232
 10272                           
 10273                           ;UART.c: 431: }
 10274  17EC  2FF4               	goto	l6240
 10275  17ED                     l6238:	
 10276                           
 10277                           ;UART.c: 432: else
 10278                           ;UART.c: 433: {
 10279                           ;UART.c: 434: UARTstringWAIT(" with no parity bit\r\n");
 10280  17ED  3011               	movlw	low ((STR_32+22)| (0+32768))
 10281  17EE  00B4               	movwf	UARTstringWAIT@data
 10282  17EF  308A               	movlw	high ((STR_32+22)| (0+32768))
 10283  17F0                     L17:	
 10284  17F0  00B5               	movwf	UARTstringWAIT@data+1
 10285  17F1  319B  2362  3196   	fcall	_UARTstringWAIT
 10286  17F4                     l6240:	
 10287                           
 10288                           ;UART.c: 435: }
 10289                           ;UART.c: 436: delayUS(10000);
 10290  17F4  3000               	movlw	0
 10291  17F5  0020               	movlb	0	; select bank0
 10292  17F6  00A8               	movwf	delayUS@US+3
 10293  17F7  3000               	movlw	0
 10294  17F8  00A7               	movwf	delayUS@US+2
 10295  17F9  3027               	movlw	39
 10296  17FA  00A6               	movwf	delayUS@US+1
 10297  17FB  3010               	movlw	16
 10298  17FC  00A5               	movwf	delayUS@US
 10299  17FD  3190  2002         	fcall	_delayUS
 10300  17FF  0008               	return
 10301  1800                     __end_of_SetBaud:	
 10302                           
 10303                           	psect	text16
 10304  1DA9                     __ptext16:	
 10305 ;; *************** function _WriteBaud *****************
 10306 ;; Defined at:
 10307 ;;		line 171 in file "FLASH.c"
 10308 ;; Parameters:    Size  Location     Type
 10309 ;;  row             2   22[BANK0 ] unsigned int 
 10310 ;;  Baud            4   24[BANK0 ] unsigned long 
 10311 ;;  Parity          1   28[BANK0 ] unsigned char 
 10312 ;; Auto vars:     Size  Location     Type
 10313 ;;  temp            4   37[BANK0 ] unsigned long 
 10314 ;; Return value:  Size  Location     Type
 10315 ;;		None               void
 10316 ;; Registers used:
 10317 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10318 ;; Tracked objects:
 10319 ;;		On entry : 0/0
 10320 ;;		On exit  : 0/0
 10321 ;;		Unchanged: 0/0
 10322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10323 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10324 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10325 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10326 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10327 ;;Total ram usage:       19 bytes
 10328 ;; Hardware stack levels used:    1
 10329 ;; Hardware stack levels required when called:    6
 10330 ;; This function calls:
 10331 ;;		_WriteFlash_Sequential
 10332 ;; This function is called by:
 10333 ;;		_SetBaud
 10334 ;; This function uses a non-reentrant model
 10335 ;;
 10336                           
 10337                           
 10338                           ;psect for function _WriteBaud
 10339  1DA9                     _WriteBaud:	
 10340                           
 10341                           ;FLASH.c: 173: unsigned long temp;
 10342                           ;FLASH.c: 174: temp = (Baud & 0x000FFFFF) + (((unsigned long) Parity & 0x7) << 20);
 10343                           
 10344                           ;incstack = 0
 10345                           ; Regs used in _WriteBaud: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10346  1DA9  0020               	movlb	0	; select bank0
 10347  1DAA  083C               	movf	WriteBaud@Parity,w
 10348  1DAB  3907               	andlw	7
 10349  1DAC  00BD               	movwf	??_WriteBaud
 10350  1DAD  01BE               	clrf	??_WriteBaud+1
 10351  1DAE  01BF               	clrf	??_WriteBaud+2
 10352  1DAF  01C0               	clrf	??_WriteBaud+3
 10353  1DB0  3014               	movlw	20
 10354  1DB1                     u7985:	
 10355  1DB1  35BD               	lslf	??_WriteBaud,f
 10356  1DB2  0DBE               	rlf	??_WriteBaud+1,f
 10357  1DB3  0DBF               	rlf	??_WriteBaud+2,f
 10358  1DB4  0DC0               	rlf	??_WriteBaud+3,f
 10359  1DB5  0B89               	decfsz	9,f
 10360  1DB6  2DB1               	goto	u7985
 10361  1DB7  30FF               	movlw	255
 10362  1DB8  0538               	andwf	WriteBaud@Baud,w
 10363  1DB9  00C1               	movwf	??_WriteBaud+4
 10364  1DBA  30FF               	movlw	255
 10365  1DBB  0539               	andwf	WriteBaud@Baud+1,w
 10366  1DBC  00C2               	movwf	??_WriteBaud+5
 10367  1DBD  300F               	movlw	15
 10368  1DBE  053A               	andwf	WriteBaud@Baud+2,w
 10369  1DBF  00C3               	movwf	??_WriteBaud+6
 10370  1DC0  3000               	movlw	0
 10371  1DC1  053B               	andwf	WriteBaud@Baud+3,w
 10372  1DC2  00C4               	movwf	??_WriteBaud+7
 10373  1DC3  0841               	movf	??_WriteBaud+4,w
 10374  1DC4  07BD               	addwf	??_WriteBaud,f
 10375  1DC5  0842               	movf	??_WriteBaud+5,w
 10376  1DC6  3DBE               	addwfc	??_WriteBaud+1,f
 10377  1DC7  0843               	movf	??_WriteBaud+6,w
 10378  1DC8  3DBF               	addwfc	??_WriteBaud+2,f
 10379  1DC9  0844               	movf	??_WriteBaud+7,w
 10380  1DCA  3DC0               	addwfc	??_WriteBaud+3,f
 10381  1DCB  0840               	movf	??_WriteBaud+3,w
 10382  1DCC  00C8               	movwf	WriteBaud@temp+3
 10383  1DCD  083F               	movf	??_WriteBaud+2,w
 10384  1DCE  00C7               	movwf	WriteBaud@temp+2
 10385  1DCF  083E               	movf	??_WriteBaud+1,w
 10386  1DD0  00C6               	movwf	WriteBaud@temp+1
 10387  1DD1  083D               	movf	??_WriteBaud,w
 10388  1DD2  00C5               	movwf	WriteBaud@temp
 10389                           
 10390                           ;FLASH.c: 175: MEM[1] = (unsigned int) (temp & 0x0003FFF);
 10391  1DD3  30FF               	movlw	255
 10392  1DD4  0545               	andwf	WriteBaud@temp,w
 10393  1DD5  0024               	movlb	4	; select bank4
 10394  1DD6  00A8               	movwf	(_MEM^(0+512)+2)
 10395  1DD7  303F               	movlw	63
 10396  1DD8  0020               	movlb	0	; select bank0
 10397  1DD9  0546               	andwf	WriteBaud@temp+1,w
 10398  1DDA  0024               	movlb	4	; select bank4
 10399  1DDB  00A9               	movwf	((_MEM+1)^(0+512)+2)
 10400                           
 10401                           ;FLASH.c: 176: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
 10402  1DDC  0020               	movlb	0	; select bank0
 10403  1DDD  0845               	movf	WriteBaud@temp,w
 10404  1DDE  00BD               	movwf	??_WriteBaud
 10405  1DDF  0846               	movf	WriteBaud@temp+1,w
 10406  1DE0  00BE               	movwf	??_WriteBaud+1
 10407  1DE1  0847               	movf	WriteBaud@temp+2,w
 10408  1DE2  00BF               	movwf	??_WriteBaud+2
 10409  1DE3  0848               	movf	WriteBaud@temp+3,w
 10410  1DE4  00C0               	movwf	??_WriteBaud+3
 10411  1DE5  300E               	movlw	14
 10412  1DE6                     u7995:	
 10413  1DE6  36C0               	lsrf	??_WriteBaud+3,f
 10414  1DE7  0CBF               	rrf	??_WriteBaud+2,f
 10415  1DE8  0CBE               	rrf	??_WriteBaud+1,f
 10416  1DE9  0CBD               	rrf	??_WriteBaud,f
 10417  1DEA  0B89               	decfsz	9,f
 10418  1DEB  2DE6               	goto	u7995
 10419  1DEC  30FF               	movlw	255
 10420  1DED  053D               	andwf	??_WriteBaud,w
 10421  1DEE  0024               	movlb	4	; select bank4
 10422  1DEF  00A6               	movwf	_MEM^(0+512)
 10423  1DF0  303F               	movlw	63
 10424  1DF1  0020               	movlb	0	; select bank0
 10425  1DF2  053E               	andwf	??_WriteBaud+1,w
 10426  1DF3  0024               	movlb	4	; select bank4
 10427  1DF4  00A7               	movwf	(_MEM+1)^(0+512)
 10428                           
 10429                           ;FLASH.c: 177: WriteFlash_Sequential(row, MEM, 2);
 10430  1DF5  0020               	movlb	0	; select bank0
 10431  1DF6  0837               	movf	WriteBaud@row+1,w
 10432  1DF7  01B0               	clrf	WriteFlash_Sequential@row+1
 10433  1DF8  07B0               	addwf	WriteFlash_Sequential@row+1,f
 10434  1DF9  0836               	movf	WriteBaud@row,w
 10435  1DFA  01AF               	clrf	WriteFlash_Sequential@row
 10436  1DFB  07AF               	addwf	WriteFlash_Sequential@row,f
 10437  1DFC  3026               	movlw	_MEM& (0+255)
 10438  1DFD  00BD               	movwf	??_WriteBaud
 10439  1DFE  083D               	movf	??_WriteBaud,w
 10440  1DFF  00B1               	movwf	WriteFlash_Sequential@buffer
 10441  1E00  3002               	movlw	2
 10442  1E01  00BE               	movwf	??_WriteBaud+1
 10443  1E02  083E               	movf	??_WriteBaud+1,w
 10444  1E03  00B2               	movwf	WriteFlash_Sequential@amount
 10445  1E04  3192  22BA         	fcall	_WriteFlash_Sequential
 10446  1E06  0008               	return
 10447  1E07                     __end_of_WriteBaud:	
 10448                           
 10449                           	psect	text17
 10450  12BA                     __ptext17:	
 10451 ;; *************** function _WriteFlash_Sequential *****************
 10452 ;; Defined at:
 10453 ;;		line 112 in file "FLASH.c"
 10454 ;; Parameters:    Size  Location     Type
 10455 ;;  row             2   15[BANK0 ] unsigned int 
 10456 ;;  buffer          1   17[BANK0 ] PTR unsigned int 
 10457 ;;		 -> MEM(4), 
 10458 ;;  amount          1   18[BANK0 ] unsigned char 
 10459 ;; Auto vars:     Size  Location     Type
 10460 ;;  TempBufL       32   32[BANK1 ] unsigned char [32]
 10461 ;;  TempBufH       32    0[BANK1 ] unsigned char [32]
 10462 ;;  temp            2   67[BANK1 ] unsigned int 
 10463 ;;  i               1   70[BANK1 ] unsigned char 
 10464 ;;  spaces          1   69[BANK1 ] unsigned char 
 10465 ;;  amountTemp      1   66[BANK1 ] unsigned char 
 10466 ;;  tempL           1   65[BANK1 ] unsigned char 
 10467 ;;  tempH           1   64[BANK1 ] unsigned char 
 10468 ;; Return value:  Size  Location     Type
 10469 ;;		None               void
 10470 ;; Registers used:
 10471 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10472 ;; Tracked objects:
 10473 ;;		On entry : 0/0
 10474 ;;		On exit  : 0/0
 10475 ;;		Unchanged: 0/0
 10476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10477 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10478 ;;      Locals:         0       0      71       0       0       0       0       0       0       0       0       0       
      +0       0
 10479 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10480 ;;      Totals:         0       7      71       0       0       0       0       0       0       0       0       0       
      +0       0
 10481 ;;Total ram usage:       78 bytes
 10482 ;; Hardware stack levels used:    1
 10483 ;; Hardware stack levels required when called:    5
 10484 ;; This function calls:
 10485 ;;		_BlockErase
 10486 ;;		_ReadFlash_2Byte
 10487 ;;		_UNLOCK
 10488 ;;		_delayUS
 10489 ;; This function is called by:
 10490 ;;		_WriteBaud
 10491 ;; This function uses a non-reentrant model
 10492 ;;
 10493                           
 10494                           
 10495                           ;psect for function _WriteFlash_Sequential
 10496  12BA                     _WriteFlash_Sequential:	
 10497                           
 10498                           ;FLASH.c: 114: unsigned char spaces = 32;
 10499                           
 10500                           ;incstack = 0
 10501                           ; Regs used in _WriteFlash_Sequential: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10502  12BA  3020               	movlw	32
 10503  12BB  0020               	movlb	0	; select bank0
 10504  12BC  00B3               	movwf	??_WriteFlash_Sequential
 10505  12BD  0833               	movf	??_WriteFlash_Sequential,w
 10506  12BE  0021               	movlb	1	; select bank1
 10507  12BF  00E5               	movwf	WriteFlash_Sequential@spaces^(0+128)
 10508                           
 10509                           ;FLASH.c: 115: unsigned char tempH;
 10510                           ;FLASH.c: 116: unsigned char tempL;
 10511                           ;FLASH.c: 117: unsigned char i;
 10512                           ;FLASH.c: 118: unsigned int temp;
 10513                           ;FLASH.c: 119: unsigned char amountTemp =0;
 10514  12C0  01E2               	clrf	WriteFlash_Sequential@amountTemp^(0+128)
 10515                           
 10516                           ;FLASH.c: 120: unsigned char TempBufH[32];
 10517                           ;FLASH.c: 121: unsigned char TempBufL[32];
 10518                           ;FLASH.c: 123: for(i=0;i<spaces;i++)
 10519  12C1  01E6               	clrf	WriteFlash_Sequential@i^(0+128)
 10520  12C2                     l5844:	
 10521  12C2  0865               	movf	WriteFlash_Sequential@spaces^(0+128),w
 10522  12C3  0266               	subwf	WriteFlash_Sequential@i^(0+128),w
 10523  12C4  1803               	btfsc	3,0
 10524  12C5  2B33               	goto	l5846
 10525                           
 10526                           ;FLASH.c: 124: {
 10527                           ;FLASH.c: 125: amountTemp++;
 10528  12C6  3001               	movlw	1
 10529  12C7  0020               	movlb	0	; select bank0
 10530  12C8  00B3               	movwf	??_WriteFlash_Sequential
 10531  12C9  0833               	movf	??_WriteFlash_Sequential,w
 10532  12CA  0021               	movlb	1	; select bank1
 10533  12CB  07E2               	addwf	WriteFlash_Sequential@amountTemp^(0+128),f
 10534                           
 10535                           ;FLASH.c: 126: if(amountTemp <= amount)
 10536  12CC  0862               	movf	WriteFlash_Sequential@amountTemp^(0+128),w
 10537  12CD  0020               	movlb	0	; select bank0
 10538  12CE  0232               	subwf	WriteFlash_Sequential@amount,w
 10539  12CF  1C03               	skipc
 10540  12D0  2AEF               	goto	l5832
 10541                           
 10542                           ;FLASH.c: 127: {
 10543                           ;FLASH.c: 128: tempH = (unsigned char)((*buffer & 0x3F00) >> 8);
 10544  12D1  0831               	movf	WriteFlash_Sequential@buffer,w
 10545  12D2  0086               	movwf	6
 10546  12D3  3002               	movlw	2	; select bank4/5
 10547  12D4  0087               	movwf	7
 10548  12D5  3F40               	moviw [0]fsr1
 10549  12D6  00B3               	movwf	??_WriteFlash_Sequential
 10550  12D7  3F41               	moviw [1]fsr1
 10551  12D8  00B4               	movwf	??_WriteFlash_Sequential+1
 10552  12D9  0834               	movf	??_WriteFlash_Sequential+1,w
 10553  12DA  393F               	andlw	63
 10554  12DB  00B5               	movwf	??_WriteFlash_Sequential+2
 10555  12DC  0835               	movf	??_WriteFlash_Sequential+2,w
 10556  12DD  0021               	movlb	1	; select bank1
 10557  12DE  00E0               	movwf	WriteFlash_Sequential@tempH^(0+128)
 10558                           
 10559                           ;FLASH.c: 129: tempL = (unsigned char)(*buffer & 0x00FF);
 10560  12DF  0020               	movlb	0	; select bank0
 10561  12E0  0831               	movf	WriteFlash_Sequential@buffer,w
 10562  12E1  0086               	movwf	6
 10563  12E2  3002               	movlw	2	; select bank4/5
 10564  12E3  0087               	movwf	7
 10565  12E4  0801               	movf	1,w
 10566  12E5  00B3               	movwf	??_WriteFlash_Sequential
 10567  12E6  0833               	movf	??_WriteFlash_Sequential,w
 10568  12E7  0021               	movlb	1	; select bank1
 10569  12E8  00E1               	movwf	WriteFlash_Sequential@tempL^(0+128)
 10570                           
 10571                           ;FLASH.c: 130: buffer++;
 10572  12E9  3002               	movlw	2
 10573  12EA  0020               	movlb	0	; select bank0
 10574  12EB  00B3               	movwf	??_WriteFlash_Sequential
 10575  12EC  0833               	movf	??_WriteFlash_Sequential,w
 10576  12ED  07B1               	addwf	WriteFlash_Sequential@buffer,f
 10577                           
 10578                           ;FLASH.c: 131: }
 10579  12EE  2B15               	goto	l5838
 10580  12EF                     l5832:	
 10581                           
 10582                           ;FLASH.c: 132: else
 10583                           ;FLASH.c: 133: {
 10584                           ;FLASH.c: 135: temp = ReadFlash_2Byte(row, i);
 10585  12EF  0830               	movf	WriteFlash_Sequential@row+1,w
 10586  12F0  01A6               	clrf	ReadFlash_2Byte@row+1
 10587  12F1  07A6               	addwf	ReadFlash_2Byte@row+1,f
 10588  12F2  082F               	movf	WriteFlash_Sequential@row,w
 10589  12F3  01A5               	clrf	ReadFlash_2Byte@row
 10590  12F4  07A5               	addwf	ReadFlash_2Byte@row,f
 10591  12F5  0021               	movlb	1	; select bank1
 10592  12F6  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10593  12F7  0020               	movlb	0	; select bank0
 10594  12F8  00B3               	movwf	??_WriteFlash_Sequential
 10595  12F9  0833               	movf	??_WriteFlash_Sequential,w
 10596  12FA  00A7               	movwf	ReadFlash_2Byte@column
 10597  12FB  319A  22FD  3192   	fcall	_ReadFlash_2Byte
 10598  12FE  0020               	movlb	0	; select bank0
 10599  12FF  0826               	movf	?_ReadFlash_2Byte+1,w
 10600  1300  0021               	movlb	1	; select bank1
 10601  1301  01E4               	clrf	(WriteFlash_Sequential@temp+1)^(0+128)
 10602  1302  07E4               	addwf	(WriteFlash_Sequential@temp+1)^(0+128),f
 10603  1303  0020               	movlb	0	; select bank0
 10604  1304  0825               	movf	?_ReadFlash_2Byte,w
 10605  1305  0021               	movlb	1	; select bank1
 10606  1306  01E3               	clrf	WriteFlash_Sequential@temp^(0+128)
 10607  1307  07E3               	addwf	WriteFlash_Sequential@temp^(0+128),f
 10608                           
 10609                           ;FLASH.c: 136: tempH = (unsigned char)((temp & 0x3F00) >>8);
 10610  1308  0864               	movf	(WriteFlash_Sequential@temp+1)^(0+128),w
 10611  1309  393F               	andlw	63
 10612  130A  0020               	movlb	0	; select bank0
 10613  130B  00B3               	movwf	??_WriteFlash_Sequential
 10614  130C  0833               	movf	??_WriteFlash_Sequential,w
 10615  130D  0021               	movlb	1	; select bank1
 10616  130E  00E0               	movwf	WriteFlash_Sequential@tempH^(0+128)
 10617                           
 10618                           ;FLASH.c: 137: tempL = (unsigned char)(temp & 0x00FF);
 10619  130F  0863               	movf	WriteFlash_Sequential@temp^(0+128),w
 10620  1310  0020               	movlb	0	; select bank0
 10621  1311  00B3               	movwf	??_WriteFlash_Sequential
 10622  1312  0833               	movf	??_WriteFlash_Sequential,w
 10623  1313  0021               	movlb	1	; select bank1
 10624  1314  00E1               	movwf	WriteFlash_Sequential@tempL^(0+128)
 10625  1315                     l5838:	
 10626                           
 10627                           ;FLASH.c: 138: }
 10628                           ;FLASH.c: 139: TempBufH[i] = tempH;
 10629  1315  0021               	movlb	1	; select bank1
 10630  1316  0860               	movf	WriteFlash_Sequential@tempH^(0+128),w
 10631  1317  0020               	movlb	0	; select bank0
 10632  1318  00B3               	movwf	??_WriteFlash_Sequential
 10633  1319  0021               	movlb	1	; select bank1
 10634  131A  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10635  131B  3EA0               	addlw	WriteFlash_Sequential@TempBufH& (0+255)
 10636  131C  0086               	movwf	6
 10637  131D  0187               	clrf	7
 10638  131E  0020               	movlb	0	; select bank0
 10639  131F  0833               	movf	??_WriteFlash_Sequential,w
 10640  1320  0081               	movwf	1
 10641                           
 10642                           ;FLASH.c: 140: TempBufL[i] = tempL;
 10643  1321  0021               	movlb	1	; select bank1
 10644  1322  0861               	movf	WriteFlash_Sequential@tempL^(0+128),w
 10645  1323  0020               	movlb	0	; select bank0
 10646  1324  00B3               	movwf	??_WriteFlash_Sequential
 10647  1325  0021               	movlb	1	; select bank1
 10648  1326  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10649  1327  3EC0               	addlw	WriteFlash_Sequential@TempBufL& (0+255)
 10650  1328  0086               	movwf	6
 10651  1329  0187               	clrf	7
 10652  132A  0020               	movlb	0	; select bank0
 10653  132B  0833               	movf	??_WriteFlash_Sequential,w
 10654  132C  0081               	movwf	1
 10655  132D  3001               	movlw	1
 10656  132E  00B3               	movwf	??_WriteFlash_Sequential
 10657  132F  0833               	movf	??_WriteFlash_Sequential,w
 10658  1330  0021               	movlb	1	; select bank1
 10659  1331  07E6               	addwf	WriteFlash_Sequential@i^(0+128),f
 10660  1332  2AC2               	goto	l5844
 10661  1333                     l5846:	
 10662                           
 10663                           ;FLASH.c: 141: }
 10664                           ;FLASH.c: 142: BlockErase(row);
 10665  1333  0020               	movlb	0	; select bank0
 10666  1334  0830               	movf	WriteFlash_Sequential@row+1,w
 10667  1335  01A6               	clrf	BlockErase@row+1
 10668  1336  07A6               	addwf	BlockErase@row+1,f
 10669  1337  082F               	movf	WriteFlash_Sequential@row,w
 10670  1338  01A5               	clrf	BlockErase@row
 10671  1339  07A5               	addwf	BlockErase@row,f
 10672  133A  319A  22CC  3192   	fcall	_BlockErase
 10673                           
 10674                           ;FLASH.c: 143: delayUS(1000);
 10675  133D  3000               	movlw	0
 10676  133E  0020               	movlb	0	; select bank0
 10677  133F  00A8               	movwf	delayUS@US+3
 10678  1340  3000               	movlw	0
 10679  1341  00A7               	movwf	delayUS@US+2
 10680  1342  3003               	movlw	3
 10681  1343  00A6               	movwf	delayUS@US+1
 10682  1344  30E8               	movlw	232
 10683  1345  00A5               	movwf	delayUS@US
 10684  1346  3190  2002  3192   	fcall	_delayUS
 10685                           
 10686                           ;FLASH.c: 144: INTCON &= ~0x80;
 10687  1349  307F               	movlw	127
 10688  134A  0020               	movlb	0	; select bank0
 10689  134B  00B3               	movwf	??_WriteFlash_Sequential
 10690  134C  0833               	movf	??_WriteFlash_Sequential,w
 10691  134D  058B               	andwf	11,f	;volatile
 10692                           
 10693                           ;FLASH.c: 145: PMCON1 |= 0b00000100;
 10694  134E  0023               	movlb	3	; select bank3
 10695  134F  1515               	bsf	21,2	;volatile
 10696                           
 10697                           ;FLASH.c: 146: PMCON1 &= ~0b01000000;
 10698  1350  30BF               	movlw	191
 10699  1351  0020               	movlb	0	; select bank0
 10700  1352  00B3               	movwf	??_WriteFlash_Sequential
 10701  1353  0833               	movf	??_WriteFlash_Sequential,w
 10702  1354  0023               	movlb	3	; select bank3
 10703  1355  0595               	andwf	21,f	;volatile
 10704                           
 10705                           ;FLASH.c: 147: PMCON1 &= ~0b00100000;
 10706  1356  30DF               	movlw	223
 10707  1357  0020               	movlb	0	; select bank0
 10708  1358  00B3               	movwf	??_WriteFlash_Sequential
 10709  1359  0833               	movf	??_WriteFlash_Sequential,w
 10710  135A  0023               	movlb	3	; select bank3
 10711  135B  0595               	andwf	21,f	;volatile
 10712                           
 10713                           ;FLASH.c: 148: PMCON1 &= ~0b00010000;
 10714  135C  30EF               	movlw	239
 10715  135D  0020               	movlb	0	; select bank0
 10716  135E  00B3               	movwf	??_WriteFlash_Sequential
 10717  135F  0833               	movf	??_WriteFlash_Sequential,w
 10718  1360  0023               	movlb	3	; select bank3
 10719  1361  0595               	andwf	21,f	;volatile
 10720                           
 10721                           ;FLASH.c: 149: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 10722  1362  0020               	movlb	0	; select bank0
 10723  1363  0830               	movf	WriteFlash_Sequential@row+1,w
 10724  1364  00B4               	movwf	??_WriteFlash_Sequential+1
 10725  1365  082F               	movf	WriteFlash_Sequential@row,w
 10726  1366  00B3               	movwf	??_WriteFlash_Sequential
 10727  1367  36B4               	lsrf	??_WriteFlash_Sequential+1,f
 10728  1368  0CB3               	rrf	??_WriteFlash_Sequential,f
 10729  1369  36B4               	lsrf	??_WriteFlash_Sequential+1,f
 10730  136A  0CB3               	rrf	??_WriteFlash_Sequential,f
 10731  136B  36B4               	lsrf	??_WriteFlash_Sequential+1,f
 10732  136C  0CB3               	rrf	??_WriteFlash_Sequential,f
 10733  136D  0833               	movf	??_WriteFlash_Sequential,w
 10734  136E  397F               	andlw	127
 10735  136F  0023               	movlb	3	; select bank3
 10736  1370  0092               	movwf	18	;volatile
 10737                           
 10738                           ;FLASH.c: 150: PMADRL = (unsigned char)((row & 0x007) << 5);
 10739  1371  0020               	movlb	0	; select bank0
 10740  1372  082F               	movf	WriteFlash_Sequential@row,w
 10741  1373  3907               	andlw	7
 10742  1374  00B3               	movwf	??_WriteFlash_Sequential
 10743  1375  3004               	movlw	4
 10744  1376                     u7655:	
 10745  1376  35B3               	lslf	??_WriteFlash_Sequential,f
 10746  1377  3EFF               	addlw	-1
 10747  1378  1D03               	skipz
 10748  1379  2B76               	goto	u7655
 10749  137A  3533               	lslf	??_WriteFlash_Sequential,w
 10750  137B  0023               	movlb	3	; select bank3
 10751  137C  0091               	movwf	17	;volatile
 10752                           
 10753                           ;FLASH.c: 152: for(i=0;i<spaces;i++)
 10754  137D  0021               	movlb	1	; select bank1
 10755  137E  01E6               	clrf	WriteFlash_Sequential@i^(0+128)
 10756  137F                     l5876:	
 10757  137F  0865               	movf	WriteFlash_Sequential@spaces^(0+128),w
 10758  1380  0266               	subwf	WriteFlash_Sequential@i^(0+128),w
 10759  1381  1803               	btfsc	3,0
 10760  1382  2BA4               	goto	l5878
 10761                           
 10762                           ;FLASH.c: 153: {
 10763                           ;FLASH.c: 154: PMDATH = TempBufH[i];
 10764  1383  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10765  1384  3EA0               	addlw	WriteFlash_Sequential@TempBufH& (0+255)
 10766  1385  0086               	movwf	6
 10767  1386  0187               	clrf	7
 10768  1387  0801               	movf	1,w
 10769  1388  0023               	movlb	3	; select bank3
 10770  1389  0094               	movwf	20	;volatile
 10771                           
 10772                           ;FLASH.c: 155: PMDATL = TempBufL[i];
 10773  138A  0021               	movlb	1	; select bank1
 10774  138B  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10775  138C  3EC0               	addlw	WriteFlash_Sequential@TempBufL& (0+255)
 10776  138D  0086               	movwf	6
 10777  138E  0187               	clrf	7
 10778  138F  0801               	movf	1,w
 10779  1390  0023               	movlb	3	; select bank3
 10780  1391  0093               	movwf	19	;volatile
 10781                           
 10782                           ;FLASH.c: 156: __nop();
 10783  1392  0000               	nop
 10784                           
 10785                           ;FLASH.c: 157: __nop();
 10786  1393  0000               	nop
 10787                           
 10788                           ;FLASH.c: 158: UNLOCK();
 10789  1394  3198  20E4  3192   	fcall	_UNLOCK
 10790                           
 10791                           ;FLASH.c: 159: PMADRL++;
 10792  1397  3001               	movlw	1
 10793  1398  0020               	movlb	0	; select bank0
 10794  1399  00B3               	movwf	??_WriteFlash_Sequential
 10795  139A  0833               	movf	??_WriteFlash_Sequential,w
 10796  139B  0023               	movlb	3	; select bank3
 10797  139C  0791               	addwf	17,f	;volatile
 10798  139D  3001               	movlw	1
 10799  139E  0020               	movlb	0	; select bank0
 10800  139F  00B3               	movwf	??_WriteFlash_Sequential
 10801  13A0  0833               	movf	??_WriteFlash_Sequential,w
 10802  13A1  0021               	movlb	1	; select bank1
 10803  13A2  07E6               	addwf	WriteFlash_Sequential@i^(0+128),f
 10804  13A3  2B7F               	goto	l5876
 10805  13A4                     l5878:	
 10806                           
 10807                           ;FLASH.c: 161: }
 10808                           ;FLASH.c: 162: PMCON1 &= ~0b00000100;
 10809  13A4  30FB               	movlw	251
 10810  13A5  0020               	movlb	0	; select bank0
 10811  13A6  00B3               	movwf	??_WriteFlash_Sequential
 10812  13A7  0833               	movf	??_WriteFlash_Sequential,w
 10813  13A8  0023               	movlb	3	; select bank3
 10814  13A9  0595               	andwf	21,f	;volatile
 10815                           
 10816                           ;FLASH.c: 163: INTCON |= 0x80;
 10817  13AA  178B               	bsf	11,7	;volatile
 10818  13AB  0008               	return
 10819  13AC                     __end_of_WriteFlash_Sequential:	
 10820                           
 10821                           	psect	text18
 10822  1ACC                     __ptext18:	
 10823 ;; *************** function _BlockErase *****************
 10824 ;; Defined at:
 10825 ;;		line 91 in file "FLASH.c"
 10826 ;; Parameters:    Size  Location     Type
 10827 ;;  row             2    5[BANK0 ] unsigned int 
 10828 ;; Auto vars:     Size  Location     Type
 10829 ;;		None
 10830 ;; Return value:  Size  Location     Type
 10831 ;;		None               void
 10832 ;; Registers used:
 10833 ;;		wreg, status,2, status,0, pclath, cstack
 10834 ;; Tracked objects:
 10835 ;;		On entry : 0/0
 10836 ;;		On exit  : 0/0
 10837 ;;		Unchanged: 0/0
 10838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10839 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10841 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10842 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10843 ;;Total ram usage:        4 bytes
 10844 ;; Hardware stack levels used:    1
 10845 ;; Hardware stack levels required when called:    4
 10846 ;; This function calls:
 10847 ;;		_UNLOCK
 10848 ;; This function is called by:
 10849 ;;		_WriteFlash_Sequential
 10850 ;; This function uses a non-reentrant model
 10851 ;;
 10852                           
 10853                           
 10854                           ;psect for function _BlockErase
 10855  1ACC                     _BlockErase:	
 10856                           
 10857                           ;FLASH.c: 93: INTCON &= ~0x80;
 10858                           
 10859                           ;incstack = 0
 10860                           ; Regs used in _BlockErase: [wreg+status,2+status,0+pclath+cstack]
 10861  1ACC  307F               	movlw	127
 10862  1ACD  0020               	movlb	0	; select bank0
 10863  1ACE  00A7               	movwf	??_BlockErase
 10864  1ACF  0827               	movf	??_BlockErase,w
 10865  1AD0  058B               	andwf	11,f	;volatile
 10866                           
 10867                           ;FLASH.c: 94: PMCON1 &= ~0b01000000;
 10868  1AD1  30BF               	movlw	191
 10869  1AD2  00A7               	movwf	??_BlockErase
 10870  1AD3  0827               	movf	??_BlockErase,w
 10871  1AD4  0023               	movlb	3	; select bank3
 10872  1AD5  0595               	andwf	21,f	;volatile
 10873                           
 10874                           ;FLASH.c: 95: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 10875  1AD6  0020               	movlb	0	; select bank0
 10876  1AD7  0826               	movf	BlockErase@row+1,w
 10877  1AD8  00A8               	movwf	??_BlockErase+1
 10878  1AD9  0825               	movf	BlockErase@row,w
 10879  1ADA  00A7               	movwf	??_BlockErase
 10880  1ADB  36A8               	lsrf	??_BlockErase+1,f
 10881  1ADC  0CA7               	rrf	??_BlockErase,f
 10882  1ADD  36A8               	lsrf	??_BlockErase+1,f
 10883  1ADE  0CA7               	rrf	??_BlockErase,f
 10884  1ADF  36A8               	lsrf	??_BlockErase+1,f
 10885  1AE0  0CA7               	rrf	??_BlockErase,f
 10886  1AE1  0827               	movf	??_BlockErase,w
 10887  1AE2  397F               	andlw	127
 10888  1AE3  0023               	movlb	3	; select bank3
 10889  1AE4  0092               	movwf	18	;volatile
 10890                           
 10891                           ;FLASH.c: 96: PMADRL = (unsigned char)((row & 0x007) << 5);
 10892  1AE5  0020               	movlb	0	; select bank0
 10893  1AE6  0825               	movf	BlockErase@row,w
 10894  1AE7  3907               	andlw	7
 10895  1AE8  00A7               	movwf	??_BlockErase
 10896  1AE9  3004               	movlw	4
 10897  1AEA                     u7475:	
 10898  1AEA  35A7               	lslf	??_BlockErase,f
 10899  1AEB  3EFF               	addlw	-1
 10900  1AEC  1D03               	skipz
 10901  1AED  2AEA               	goto	u7475
 10902  1AEE  3527               	lslf	??_BlockErase,w
 10903  1AEF  0023               	movlb	3	; select bank3
 10904  1AF0  0091               	movwf	17	;volatile
 10905                           
 10906                           ;FLASH.c: 97: PMCON1 |= 0b00010000;
 10907  1AF1  1615               	bsf	21,4	;volatile
 10908                           
 10909                           ;FLASH.c: 98: PMCON1 |= 0b00000100;
 10910  1AF2  1515               	bsf	21,2	;volatile
 10911                           
 10912                           ;FLASH.c: 99: UNLOCK();
 10913  1AF3  3198  20E4         	fcall	_UNLOCK
 10914                           
 10915                           ;FLASH.c: 100: PMCON1 &= ~0b00000100;
 10916  1AF5  30FB               	movlw	251
 10917  1AF6  0020               	movlb	0	; select bank0
 10918  1AF7  00A7               	movwf	??_BlockErase
 10919  1AF8  0827               	movf	??_BlockErase,w
 10920  1AF9  0023               	movlb	3	; select bank3
 10921  1AFA  0595               	andwf	21,f	;volatile
 10922                           
 10923                           ;FLASH.c: 101: INTCON |= 0x80;
 10924  1AFB  178B               	bsf	11,7	;volatile
 10925  1AFC  0008               	return
 10926  1AFD                     __end_of_BlockErase:	
 10927                           
 10928                           	psect	text19
 10929  18E4                     __ptext19:	
 10930 ;; *************** function _UNLOCK *****************
 10931 ;; Defined at:
 10932 ;;		line 76 in file "FLASH.c"
 10933 ;; Parameters:    Size  Location     Type
 10934 ;;		None
 10935 ;; Auto vars:     Size  Location     Type
 10936 ;;		None
 10937 ;; Return value:  Size  Location     Type
 10938 ;;		None               void
 10939 ;; Registers used:
 10940 ;;		wreg
 10941 ;; Tracked objects:
 10942 ;;		On entry : 0/0
 10943 ;;		On exit  : 0/0
 10944 ;;		Unchanged: 0/0
 10945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10949 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10950 ;;Total ram usage:        0 bytes
 10951 ;; Hardware stack levels used:    1
 10952 ;; Hardware stack levels required when called:    3
 10953 ;; This function calls:
 10954 ;;		Nothing
 10955 ;; This function is called by:
 10956 ;;		_BlockErase
 10957 ;;		_WriteFlash_Sequential
 10958 ;; This function uses a non-reentrant model
 10959 ;;
 10960                           
 10961                           
 10962                           ;psect for function _UNLOCK
 10963  18E4                     _UNLOCK:	
 10964                           
 10965                           ;FLASH.c: 78: PMCON2 = 0x55;
 10966                           
 10967                           ;incstack = 0
 10968                           ; Regs used in _UNLOCK: [wreg]
 10969  18E4  3055               	movlw	85
 10970  18E5  0023               	movlb	3	; select bank3
 10971  18E6  0096               	movwf	22	;volatile
 10972                           
 10973                           ;FLASH.c: 79: PMCON2 = 0xAA;
 10974  18E7  30AA               	movlw	170
 10975  18E8  0096               	movwf	22	;volatile
 10976                           
 10977                           ;FLASH.c: 80: PMCON1 |= 0b00000010;
 10978  18E9  1495               	bsf	21,1	;volatile
 10979  18EA                     l925:	
 10980                           ;FLASH.c: 81: while(PMCON1 & 0b00000010);
 10981                           
 10982  18EA  1895               	btfsc	21,1	;volatile
 10983  18EB  28EA               	goto	l925
 10984                           
 10985                           ;FLASH.c: 82: __nop();
 10986  18EC  0000               	nop
 10987                           
 10988                           ;FLASH.c: 83: __nop();
 10989  18ED  0000               	nop
 10990  18EE  0008               	return
 10991  18EF                     __end_of_UNLOCK:	
 10992                           
 10993                           	psect	text20
 10994  1CFF                     __ptext20:	
 10995 ;; *************** function _Reverse_Byte *****************
 10996 ;; Defined at:
 10997 ;;		line 106 in file "MISC.c"
 10998 ;; Parameters:    Size  Location     Type
 10999 ;;  This            1    wreg     unsigned char 
 11000 ;; Auto vars:     Size  Location     Type
 11001 ;;  This            1    8[BANK0 ] unsigned char 
 11002 ;;  temp            1    7[BANK0 ] unsigned char 
 11003 ;; Return value:  Size  Location     Type
 11004 ;;                  1    wreg      unsigned char 
 11005 ;; Registers used:
 11006 ;;		wreg, status,2, status,0
 11007 ;; Tracked objects:
 11008 ;;		On entry : 0/0
 11009 ;;		On exit  : 0/0
 11010 ;;		Unchanged: 0/0
 11011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11013 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11014 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11015 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11016 ;;Total ram usage:        4 bytes
 11017 ;; Hardware stack levels used:    1
 11018 ;; Hardware stack levels required when called:    3
 11019 ;; This function calls:
 11020 ;;		Nothing
 11021 ;; This function is called by:
 11022 ;;		_PS_2_Update
 11023 ;; This function uses a non-reentrant model
 11024 ;;
 11025                           
 11026                           
 11027                           ;psect for function _Reverse_Byte
 11028  1CFF                     _Reverse_Byte:	
 11029                           
 11030                           ;incstack = 0
 11031                           ; Regs used in _Reverse_Byte: [wreg+status,2+status,0]
 11032                           ;Reverse_Byte@This stored from wreg
 11033  1CFF  0020               	movlb	0	; select bank0
 11034  1D00  00A8               	movwf	Reverse_Byte@This
 11035                           
 11036                           ;MISC.c: 108: unsigned char temp=0;
 11037  1D01  01A7               	clrf	Reverse_Byte@temp
 11038                           
 11039                           ;MISC.c: 110: temp += (This & 0x01) << 7;
 11040  1D02  0828               	movf	Reverse_Byte@This,w
 11041  1D03  3901               	andlw	1
 11042  1D04  00A5               	movwf	??_Reverse_Byte
 11043  1D05  3006               	movlw	6
 11044  1D06                     u8035:	
 11045  1D06  35A5               	lslf	??_Reverse_Byte,f
 11046  1D07  3EFF               	addlw	-1
 11047  1D08  1D03               	skipz
 11048  1D09  2D06               	goto	u8035
 11049  1D0A  3525               	lslf	??_Reverse_Byte,w
 11050  1D0B  00A6               	movwf	??_Reverse_Byte+1
 11051  1D0C  0826               	movf	??_Reverse_Byte+1,w
 11052  1D0D  07A7               	addwf	Reverse_Byte@temp,f
 11053                           
 11054                           ;MISC.c: 111: temp += (This & 0x02) << 5;
 11055  1D0E  0828               	movf	Reverse_Byte@This,w
 11056  1D0F  3902               	andlw	2
 11057  1D10  00A5               	movwf	??_Reverse_Byte
 11058  1D11  3004               	movlw	4
 11059  1D12                     u8045:	
 11060  1D12  35A5               	lslf	??_Reverse_Byte,f
 11061  1D13  3EFF               	addlw	-1
 11062  1D14  1D03               	skipz
 11063  1D15  2D12               	goto	u8045
 11064  1D16  3525               	lslf	??_Reverse_Byte,w
 11065  1D17  00A6               	movwf	??_Reverse_Byte+1
 11066  1D18  0826               	movf	??_Reverse_Byte+1,w
 11067  1D19  07A7               	addwf	Reverse_Byte@temp,f
 11068                           
 11069                           ;MISC.c: 112: temp += (This & 0x04) << 3;
 11070  1D1A  0828               	movf	Reverse_Byte@This,w
 11071  1D1B  3904               	andlw	4
 11072  1D1C  00A5               	movwf	??_Reverse_Byte
 11073  1D1D  3002               	movlw	2
 11074  1D1E                     u8055:	
 11075  1D1E  35A5               	lslf	??_Reverse_Byte,f
 11076  1D1F  3EFF               	addlw	-1
 11077  1D20  1D03               	skipz
 11078  1D21  2D1E               	goto	u8055
 11079  1D22  3525               	lslf	??_Reverse_Byte,w
 11080  1D23  00A6               	movwf	??_Reverse_Byte+1
 11081  1D24  0826               	movf	??_Reverse_Byte+1,w
 11082  1D25  07A7               	addwf	Reverse_Byte@temp,f
 11083                           
 11084                           ;MISC.c: 113: temp += (This & 0x08) << 1;
 11085  1D26  0828               	movf	Reverse_Byte@This,w
 11086  1D27  3908               	andlw	8
 11087  1D28  0709               	addwf	9,w
 11088  1D29  00A5               	movwf	??_Reverse_Byte
 11089  1D2A  0825               	movf	??_Reverse_Byte,w
 11090  1D2B  07A7               	addwf	Reverse_Byte@temp,f
 11091                           
 11092                           ;MISC.c: 114: temp += (This & 0x10) >> 1;
 11093  1D2C  3628               	lsrf	Reverse_Byte@This,w
 11094  1D2D  3908               	andlw	8
 11095  1D2E  00A5               	movwf	??_Reverse_Byte
 11096  1D2F  0825               	movf	??_Reverse_Byte,w
 11097  1D30  07A7               	addwf	Reverse_Byte@temp,f
 11098                           
 11099                           ;MISC.c: 115: temp += (This & 0x20) >> 3;
 11100  1D31  0828               	movf	Reverse_Byte@This,w
 11101  1D32  00A5               	movwf	??_Reverse_Byte
 11102  1D33  3003               	movlw	3
 11103  1D34                     u8065:	
 11104  1D34  36A5               	lsrf	??_Reverse_Byte,f
 11105  1D35  0B89               	decfsz	9,f
 11106  1D36  2D34               	goto	u8065
 11107  1D37  0825               	movf	??_Reverse_Byte,w
 11108  1D38  3904               	andlw	4
 11109  1D39  00A6               	movwf	??_Reverse_Byte+1
 11110  1D3A  0826               	movf	??_Reverse_Byte+1,w
 11111  1D3B  07A7               	addwf	Reverse_Byte@temp,f
 11112                           
 11113                           ;MISC.c: 116: temp += (This & 0x40) >> 5;
 11114  1D3C  0828               	movf	Reverse_Byte@This,w
 11115  1D3D  00A5               	movwf	??_Reverse_Byte
 11116  1D3E  3005               	movlw	5
 11117  1D3F                     u8075:	
 11118  1D3F  36A5               	lsrf	??_Reverse_Byte,f
 11119  1D40  0B89               	decfsz	9,f
 11120  1D41  2D3F               	goto	u8075
 11121  1D42  0825               	movf	??_Reverse_Byte,w
 11122  1D43  3902               	andlw	2
 11123  1D44  00A6               	movwf	??_Reverse_Byte+1
 11124  1D45  0826               	movf	??_Reverse_Byte+1,w
 11125  1D46  07A7               	addwf	Reverse_Byte@temp,f
 11126                           
 11127                           ;MISC.c: 117: temp += (This & 0x80) >> 7;
 11128  1D47  0828               	movf	Reverse_Byte@This,w
 11129  1D48  00A5               	movwf	??_Reverse_Byte
 11130  1D49  3007               	movlw	7
 11131  1D4A                     u8085:	
 11132  1D4A  36A5               	lsrf	??_Reverse_Byte,f
 11133  1D4B  0B89               	decfsz	9,f
 11134  1D4C  2D4A               	goto	u8085
 11135  1D4D  0825               	movf	??_Reverse_Byte,w
 11136  1D4E  3901               	andlw	1
 11137  1D4F  00A6               	movwf	??_Reverse_Byte+1
 11138  1D50  0826               	movf	??_Reverse_Byte+1,w
 11139  1D51  07A7               	addwf	Reverse_Byte@temp,f
 11140                           
 11141                           ;MISC.c: 119: return temp;
 11142  1D52  0827               	movf	Reverse_Byte@temp,w
 11143  1D53  0008               	return
 11144  1D54                     __end_of_Reverse_Byte:	
 11145                           
 11146                           	psect	text21
 11147  1909                     __ptext21:	
 11148 ;; *************** function _ISNUMBER *****************
 11149 ;; Defined at:
 11150 ;;		line 127 in file "MISC.c"
 11151 ;; Parameters:    Size  Location     Type
 11152 ;;  ascii           1    wreg     unsigned char 
 11153 ;; Auto vars:     Size  Location     Type
 11154 ;;  ascii           1    5[BANK0 ] unsigned char 
 11155 ;; Return value:  Size  Location     Type
 11156 ;;                  1    wreg      unsigned char 
 11157 ;; Registers used:
 11158 ;;		wreg
 11159 ;; Tracked objects:
 11160 ;;		On entry : 0/0
 11161 ;;		On exit  : 0/0
 11162 ;;		Unchanged: 0/0
 11163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11165 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11167 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11168 ;;Total ram usage:        1 bytes
 11169 ;; Hardware stack levels used:    1
 11170 ;; Hardware stack levels required when called:    3
 11171 ;; This function calls:
 11172 ;;		Nothing
 11173 ;; This function is called by:
 11174 ;;		_PS_2_Update
 11175 ;; This function uses a non-reentrant model
 11176 ;;
 11177                           
 11178                           
 11179                           ;psect for function _ISNUMBER
 11180  1909                     _ISNUMBER:	
 11181                           
 11182                           ;incstack = 0
 11183                           ; Regs used in _ISNUMBER: [wreg]
 11184                           ;ISNUMBER@ascii stored from wreg
 11185  1909  0020               	movlb	0	; select bank0
 11186  190A  00A5               	movwf	ISNUMBER@ascii
 11187                           
 11188                           ;MISC.c: 129: if(ascii >= '0' && ascii <='9')
 11189  190B  3030               	movlw	48
 11190  190C  0225               	subwf	ISNUMBER@ascii,w
 11191  190D  1C03               	skipc
 11192  190E  2915               	goto	l6174
 11193  190F  303A               	movlw	58
 11194  1910  0225               	subwf	ISNUMBER@ascii,w
 11195  1911  1803               	skipnc
 11196  1912  2915               	goto	l6174
 11197                           
 11198                           ;MISC.c: 130: {
 11199                           ;MISC.c: 131: return 1;
 11200  1913  3001               	movlw	1
 11201                           
 11202                           ;MISC.c: 132: }
 11203  1914  0008               	return
 11204  1915                     l6174:	
 11205                           
 11206                           ;MISC.c: 133: else
 11207                           ;MISC.c: 134: {
 11208                           ;MISC.c: 135: return 0;
 11209  1915  3000               	movlw	0
 11210  1916  0008               	return
 11211  1917                     __end_of_ISNUMBER:	
 11212                           
 11213                           	psect	text22
 11214  19A3                     __ptext22:	
 11215 ;; *************** function _Decode_Scan_Code_Shift *****************
 11216 ;; Defined at:
 11217 ;;		line 831 in file "PS_2.c"
 11218 ;; Parameters:    Size  Location     Type
 11219 ;;  Code            1    wreg     unsigned char 
 11220 ;; Auto vars:     Size  Location     Type
 11221 ;;  Code            1    5[BANK0 ] unsigned char 
 11222 ;; Return value:  Size  Location     Type
 11223 ;;                  1    wreg      unsigned char 
 11224 ;; Registers used:
 11225 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11226 ;; Tracked objects:
 11227 ;;		On entry : 0/0
 11228 ;;		On exit  : 0/0
 11229 ;;		Unchanged: 0/0
 11230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11232 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11234 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11235 ;;Total ram usage:        1 bytes
 11236 ;; Hardware stack levels used:    1
 11237 ;; Hardware stack levels required when called:    3
 11238 ;; This function calls:
 11239 ;;		Nothing
 11240 ;; This function is called by:
 11241 ;;		_PS_2_Update
 11242 ;; This function uses a non-reentrant model
 11243 ;;
 11244                           
 11245                           
 11246                           ;psect for function _Decode_Scan_Code_Shift
 11247  19A3                     _Decode_Scan_Code_Shift:	
 11248                           
 11249                           ;incstack = 0
 11250                           ; Regs used in _Decode_Scan_Code_Shift: [wreg-fsr0h+status,2+status,0+pclath]
 11251                           ;Decode_Scan_Code_Shift@Code stored from wreg
 11252  19A3  0020               	movlb	0	; select bank0
 11253  19A4  00A5               	movwf	Decode_Scan_Code_Shift@Code
 11254                           
 11255                           ;PS_2.c: 833: Code -= 13;
 11256  19A5  300D               	movlw	13
 11257  19A6  02A5               	subwf	Decode_Scan_Code_Shift@Code,f
 11258                           
 11259                           ;PS_2.c: 834: if(Code <=112)
 11260  19A7  3071               	movlw	113
 11261  19A8  0225               	subwf	Decode_Scan_Code_Shift@Code,w
 11262  19A9  1803               	skipnc
 11263  19AA  29B4               	goto	l6250
 11264                           
 11265                           ;PS_2.c: 835: {
 11266                           ;PS_2.c: 836: return ScanCodeSHIFT[Code];
 11267  19AB  0825               	movf	Decode_Scan_Code_Shift@Code,w
 11268  19AC  3EF5               	addlw	low (_ScanCodeSHIFT| (0+32768))
 11269  19AD  0084               	movwf	4
 11270  19AE  3088               	movlw	high (_ScanCodeSHIFT| (0+32768))
 11271  19AF  1803               	skipnc
 11272  19B0  3E01               	addlw	1
 11273  19B1  0085               	movwf	5
 11274  19B2  0800               	movf	0,w	;code access
 11275                           
 11276                           ;PS_2.c: 837: }
 11277  19B3  0008               	return
 11278  19B4                     l6250:	
 11279                           
 11280                           ;PS_2.c: 838: else
 11281                           ;PS_2.c: 839: {
 11282                           ;PS_2.c: 840: return 0;
 11283  19B4  3000               	movlw	0
 11284  19B5  0008               	return
 11285  19B6                     __end_of_Decode_Scan_Code_Shift:	
 11286                           
 11287                           	psect	text23
 11288  1990                     __ptext23:	
 11289 ;; *************** function _Decode_Scan_Code_FunctionE0 *****************
 11290 ;; Defined at:
 11291 ;;		line 850 in file "PS_2.c"
 11292 ;; Parameters:    Size  Location     Type
 11293 ;;  Code            1    wreg     unsigned char 
 11294 ;; Auto vars:     Size  Location     Type
 11295 ;;  Code            1    5[BANK0 ] unsigned char 
 11296 ;; Return value:  Size  Location     Type
 11297 ;;                  1    wreg      unsigned char 
 11298 ;; Registers used:
 11299 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11300 ;; Tracked objects:
 11301 ;;		On entry : 0/0
 11302 ;;		On exit  : 0/0
 11303 ;;		Unchanged: 0/0
 11304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11306 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11308 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11309 ;;Total ram usage:        1 bytes
 11310 ;; Hardware stack levels used:    1
 11311 ;; Hardware stack levels required when called:    3
 11312 ;; This function calls:
 11313 ;;		Nothing
 11314 ;; This function is called by:
 11315 ;;		_PS_2_Update
 11316 ;; This function uses a non-reentrant model
 11317 ;;
 11318                           
 11319                           
 11320                           ;psect for function _Decode_Scan_Code_FunctionE0
 11321  1990                     _Decode_Scan_Code_FunctionE0:	
 11322                           
 11323                           ;incstack = 0
 11324                           ; Regs used in _Decode_Scan_Code_FunctionE0: [wreg-fsr0h+status,2+status,0+pclath]
 11325                           ;Decode_Scan_Code_FunctionE0@Code stored from wreg
 11326  1990  0020               	movlb	0	; select bank0
 11327  1991  00A5               	movwf	Decode_Scan_Code_FunctionE0@Code
 11328                           
 11329                           ;PS_2.c: 852: Code -= 17;
 11330  1992  3011               	movlw	17
 11331  1993  02A5               	subwf	Decode_Scan_Code_FunctionE0@Code,f
 11332                           
 11333                           ;PS_2.c: 853: if(Code <=108)
 11334  1994  306D               	movlw	109
 11335  1995  0225               	subwf	Decode_Scan_Code_FunctionE0@Code,w
 11336  1996  1803               	skipnc
 11337  1997  29A1               	goto	l6412
 11338                           
 11339                           ;PS_2.c: 854: {
 11340                           ;PS_2.c: 855: return ScanCodeFunctionE0[Code];
 11341  1998  0825               	movf	Decode_Scan_Code_FunctionE0@Code,w
 11342  1999  3E66               	addlw	low (_ScanCodeFunctionE0| (0+32768))
 11343  199A  0084               	movwf	4
 11344  199B  3089               	movlw	high (_ScanCodeFunctionE0| (0+32768))
 11345  199C  1803               	skipnc
 11346  199D  3E01               	addlw	1
 11347  199E  0085               	movwf	5
 11348  199F  0800               	movf	0,w	;code access
 11349                           
 11350                           ;PS_2.c: 856: }
 11351  19A0  0008               	return
 11352  19A1                     l6412:	
 11353                           
 11354                           ;PS_2.c: 857: else
 11355                           ;PS_2.c: 858: {
 11356                           ;PS_2.c: 859: return 0;
 11357  19A1  3000               	movlw	0
 11358  19A2  0008               	return
 11359  19A3                     __end_of_Decode_Scan_Code_FunctionE0:	
 11360                           
 11361                           	psect	text24
 11362  1935                     __ptext24:	
 11363 ;; *************** function _Decode_Scan_Code_Function *****************
 11364 ;; Defined at:
 11365 ;;		line 869 in file "PS_2.c"
 11366 ;; Parameters:    Size  Location     Type
 11367 ;;  Code            1    wreg     unsigned char 
 11368 ;; Auto vars:     Size  Location     Type
 11369 ;;  Code            1    5[BANK0 ] unsigned char 
 11370 ;; Return value:  Size  Location     Type
 11371 ;;                  1    wreg      unsigned char 
 11372 ;; Registers used:
 11373 ;;		wreg, fsr0l, fsr0h, pclath
 11374 ;; Tracked objects:
 11375 ;;		On entry : 0/0
 11376 ;;		On exit  : 0/0
 11377 ;;		Unchanged: 0/0
 11378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11380 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11382 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11383 ;;Total ram usage:        1 bytes
 11384 ;; Hardware stack levels used:    1
 11385 ;; Hardware stack levels required when called:    3
 11386 ;; This function calls:
 11387 ;;		Nothing
 11388 ;; This function is called by:
 11389 ;;		_PS_2_Update
 11390 ;; This function uses a non-reentrant model
 11391 ;;
 11392                           
 11393                           
 11394                           ;psect for function _Decode_Scan_Code_Function
 11395  1935                     _Decode_Scan_Code_Function:	
 11396                           
 11397                           ;incstack = 0
 11398                           ; Regs used in _Decode_Scan_Code_Function: [wreg-fsr0h+pclath]
 11399                           ;Decode_Scan_Code_Function@Code stored from wreg
 11400  1935  0020               	movlb	0	; select bank0
 11401  1936  00A5               	movwf	Decode_Scan_Code_Function@Code
 11402                           
 11403                           ;PS_2.c: 871: if(Code <=131)
 11404  1937  3084               	movlw	132
 11405  1938  0225               	subwf	Decode_Scan_Code_Function@Code,w
 11406  1939  1803               	skipnc
 11407  193A  2944               	goto	l6436
 11408                           
 11409                           ;PS_2.c: 872: {
 11410                           ;PS_2.c: 873: return ScanCodeFunctionNoE0[Code];
 11411  193B  0825               	movf	Decode_Scan_Code_Function@Code,w
 11412  193C  3E00               	addlw	low (_ScanCodeFunctionNoE0| (0+32768))
 11413  193D  0084               	movwf	4
 11414  193E  3088               	movlw	high (_ScanCodeFunctionNoE0| (0+32768))
 11415  193F  1803               	skipnc
 11416  1940  3E01               	addlw	1
 11417  1941  0085               	movwf	5
 11418  1942  0800               	movf	0,w	;code access
 11419                           
 11420                           ;PS_2.c: 874: }
 11421  1943  0008               	return
 11422  1944                     l6436:	
 11423                           
 11424                           ;PS_2.c: 875: else
 11425                           ;PS_2.c: 876: {
 11426                           ;PS_2.c: 877: return 0;
 11427  1944  3000               	movlw	0
 11428  1945  0008               	return
 11429  1946                     __end_of_Decode_Scan_Code_Function:	
 11430                           
 11431                           	psect	text25
 11432  197D                     __ptext25:	
 11433 ;; *************** function _Decode_Scan_Code *****************
 11434 ;; Defined at:
 11435 ;;		line 812 in file "PS_2.c"
 11436 ;; Parameters:    Size  Location     Type
 11437 ;;  Code            1    wreg     unsigned char 
 11438 ;; Auto vars:     Size  Location     Type
 11439 ;;  Code            1    5[BANK0 ] unsigned char 
 11440 ;; Return value:  Size  Location     Type
 11441 ;;                  1    wreg      unsigned char 
 11442 ;; Registers used:
 11443 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11444 ;; Tracked objects:
 11445 ;;		On entry : 0/0
 11446 ;;		On exit  : 0/0
 11447 ;;		Unchanged: 0/0
 11448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11450 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11452 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11453 ;;Total ram usage:        1 bytes
 11454 ;; Hardware stack levels used:    1
 11455 ;; Hardware stack levels required when called:    3
 11456 ;; This function calls:
 11457 ;;		Nothing
 11458 ;; This function is called by:
 11459 ;;		_PS_2_Update
 11460 ;; This function uses a non-reentrant model
 11461 ;;
 11462                           
 11463                           
 11464                           ;psect for function _Decode_Scan_Code
 11465  197D                     _Decode_Scan_Code:	
 11466                           
 11467                           ;incstack = 0
 11468                           ; Regs used in _Decode_Scan_Code: [wreg-fsr0h+status,2+status,0+pclath]
 11469                           ;Decode_Scan_Code@Code stored from wreg
 11470  197D  0020               	movlb	0	; select bank0
 11471  197E  00A5               	movwf	Decode_Scan_Code@Code
 11472                           
 11473                           ;PS_2.c: 814: Code -= 13;
 11474  197F  300D               	movlw	13
 11475  1980  02A5               	subwf	Decode_Scan_Code@Code,f
 11476                           
 11477                           ;PS_2.c: 815: if(Code <=112)
 11478  1981  3071               	movlw	113
 11479  1982  0225               	subwf	Decode_Scan_Code@Code,w
 11480  1983  1803               	skipnc
 11481  1984  298E               	goto	l6424
 11482                           
 11483                           ;PS_2.c: 816: {
 11484                           ;PS_2.c: 817: return ScanCode[Code];
 11485  1985  0825               	movf	Decode_Scan_Code@Code,w
 11486  1986  3E84               	addlw	low (_ScanCode| (0+32768))
 11487  1987  0084               	movwf	4
 11488  1988  3088               	movlw	high (_ScanCode| (0+32768))
 11489  1989  1803               	skipnc
 11490  198A  3E01               	addlw	1
 11491  198B  0085               	movwf	5
 11492  198C  0800               	movf	0,w	;code access
 11493                           
 11494                           ;PS_2.c: 818: }
 11495  198D  0008               	return
 11496  198E                     l6424:	
 11497                           
 11498                           ;PS_2.c: 819: else
 11499                           ;PS_2.c: 820: {
 11500                           ;PS_2.c: 821: return 0;
 11501  198E  3000               	movlw	0
 11502  198F  0008               	return
 11503  1990                     __end_of_Decode_Scan_Code:	
 11504                           
 11505                           	psect	text26
 11506  1593                     __ptext26:	
 11507 ;; *************** function _Init_System *****************
 11508 ;; Defined at:
 11509 ;;		line 105 in file "user.c"
 11510 ;; Parameters:    Size  Location     Type
 11511 ;;		None
 11512 ;; Auto vars:     Size  Location     Type
 11513 ;;  buf            60    0[BANK1 ] unsigned char [60]
 11514 ;;  Baud            4   65[BANK1 ] unsigned long 
 11515 ;;  temp            4   60[BANK1 ] unsigned long 
 11516 ;;  Parity          1   64[BANK1 ] unsigned char 
 11517 ;; Return value:  Size  Location     Type
 11518 ;;		None               void
 11519 ;; Registers used:
 11520 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11521 ;; Tracked objects:
 11522 ;;		On entry : 0/0
 11523 ;;		On exit  : 0/0
 11524 ;;		Unchanged: 0/0
 11525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11527 ;;      Locals:         0       0      69       0       0       0       0       0       0       0       0       0       
      +0       0
 11528 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11529 ;;      Totals:         0       5      69       0       0       0       0       0       0       0       0       0       
      +0       0
 11530 ;;Total ram usage:       74 bytes
 11531 ;; Hardware stack levels used:    1
 11532 ;; Hardware stack levels required when called:    6
 11533 ;; This function calls:
 11534 ;;		_InitUART
 11535 ;;		_ReadBaud
 11536 ;;		_UARTstringWAIT
 11537 ;;		_delayUS
 11538 ;;		_sprintf
 11539 ;; This function is called by:
 11540 ;;		_main
 11541 ;; This function uses a non-reentrant model
 11542 ;;
 11543                           
 11544                           
 11545                           ;psect for function _Init_System
 11546  1593                     _Init_System:	
 11547                           
 11548                           ;user.c: 107: unsigned long temp =0;
 11549                           
 11550                           ;incstack = 0
 11551                           ; Regs used in _Init_System: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11552  1593  3000               	movlw	0
 11553  1594  0021               	movlb	1	; select bank1
 11554  1595  00DF               	movwf	(Init_System@temp+3)^(0+128)
 11555  1596  3000               	movlw	0
 11556  1597  00DE               	movwf	(Init_System@temp+2)^(0+128)
 11557  1598  3000               	movlw	0
 11558  1599  00DD               	movwf	(Init_System@temp+1)^(0+128)
 11559  159A  3000               	movlw	0
 11560  159B  00DC               	movwf	Init_System@temp^(0+128)
 11561                           
 11562                           ;user.c: 108: unsigned long Baud =0;
 11563  159C  3000               	movlw	0
 11564  159D  00E4               	movwf	(Init_System@Baud+3)^(0+128)
 11565  159E  3000               	movlw	0
 11566  159F  00E3               	movwf	(Init_System@Baud+2)^(0+128)
 11567  15A0  3000               	movlw	0
 11568  15A1  00E2               	movwf	(Init_System@Baud+1)^(0+128)
 11569  15A2  3000               	movlw	0
 11570  15A3  00E1               	movwf	Init_System@Baud^(0+128)
 11571                           
 11572                           ;user.c: 109: unsigned char Parity =0;
 11573  15A4  01E0               	clrf	Init_System@Parity^(0+128)
 11574                           
 11575                           ;user.c: 110: unsigned char buf[60];
 11576                           ;user.c: 112: temp = ReadBaud((0x1800 >> 5),0);
 11577  15A5  30C0               	movlw	192
 11578  15A6  0020               	movlb	0	; select bank0
 11579  15A7  00B7               	movwf	ReadBaud@row
 11580  15A8  3000               	movlw	0
 11581  15A9  00B8               	movwf	ReadBaud@row+1
 11582  15AA  01B9               	clrf	ReadBaud@column
 11583  15AB  319E  2666  3195   	fcall	_ReadBaud
 11584  15AE  0020               	movlb	0	; select bank0
 11585  15AF  083A               	movf	?_ReadBaud+3,w
 11586  15B0  0021               	movlb	1	; select bank1
 11587  15B1  00DF               	movwf	(Init_System@temp+3)^(0+128)
 11588  15B2  0020               	movlb	0	; select bank0
 11589  15B3  0839               	movf	?_ReadBaud+2,w
 11590  15B4  0021               	movlb	1	; select bank1
 11591  15B5  00DE               	movwf	(Init_System@temp+2)^(0+128)
 11592  15B6  0020               	movlb	0	; select bank0
 11593  15B7  0838               	movf	?_ReadBaud+1,w
 11594  15B8  0021               	movlb	1	; select bank1
 11595  15B9  00DD               	movwf	(Init_System@temp+1)^(0+128)
 11596  15BA  0020               	movlb	0	; select bank0
 11597  15BB  0837               	movf	?_ReadBaud,w
 11598  15BC  0021               	movlb	1	; select bank1
 11599  15BD  00DC               	movwf	Init_System@temp^(0+128)
 11600                           
 11601                           ;user.c: 113: Baud = temp & 0x000FFFFF;
 11602  15BE  30FF               	movlw	255
 11603  15BF  055C               	andwf	Init_System@temp^(0+128),w
 11604  15C0  00E1               	movwf	Init_System@Baud^(0+128)
 11605  15C1  30FF               	movlw	255
 11606  15C2  055D               	andwf	(Init_System@temp+1)^(0+128),w
 11607  15C3  00E2               	movwf	(Init_System@Baud+1)^(0+128)
 11608  15C4  300F               	movlw	15
 11609  15C5  055E               	andwf	(Init_System@temp+2)^(0+128),w
 11610  15C6  00E3               	movwf	(Init_System@Baud+2)^(0+128)
 11611  15C7  3000               	movlw	0
 11612  15C8  055F               	andwf	(Init_System@temp+3)^(0+128),w
 11613  15C9  00E4               	movwf	(Init_System@Baud+3)^(0+128)
 11614                           
 11615                           ;user.c: 114: Parity = (unsigned char)((temp & 0x00F00000) >> 20);
 11616  15CA  085C               	movf	Init_System@temp^(0+128),w
 11617  15CB  0020               	movlb	0	; select bank0
 11618  15CC  00D4               	movwf	??_Init_System
 11619  15CD  0021               	movlb	1	; select bank1
 11620  15CE  085D               	movf	(Init_System@temp+1)^(0+128),w
 11621  15CF  0020               	movlb	0	; select bank0
 11622  15D0  00D5               	movwf	??_Init_System+1
 11623  15D1  0021               	movlb	1	; select bank1
 11624  15D2  085E               	movf	(Init_System@temp+2)^(0+128),w
 11625  15D3  0020               	movlb	0	; select bank0
 11626  15D4  00D6               	movwf	??_Init_System+2
 11627  15D5  0021               	movlb	1	; select bank1
 11628  15D6  085F               	movf	(Init_System@temp+3)^(0+128),w
 11629  15D7  0020               	movlb	0	; select bank0
 11630  15D8  00D7               	movwf	??_Init_System+3
 11631  15D9  3014               	movlw	20
 11632  15DA                     u10075:	
 11633  15DA  36D7               	lsrf	??_Init_System+3,f
 11634  15DB  0CD6               	rrf	??_Init_System+2,f
 11635  15DC  0CD5               	rrf	??_Init_System+1,f
 11636  15DD  0CD4               	rrf	??_Init_System,f
 11637  15DE  0B89               	decfsz	9,f
 11638  15DF  2DDA               	goto	u10075
 11639  15E0  0854               	movf	??_Init_System,w
 11640  15E1  390F               	andlw	15
 11641  15E2  00D8               	movwf	??_Init_System+4
 11642  15E3  0858               	movf	??_Init_System+4,w
 11643  15E4  0021               	movlb	1	; select bank1
 11644  15E5  00E0               	movwf	Init_System@Parity^(0+128)
 11645                           
 11646                           ;user.c: 115: if(Baud <2400 || Baud > 115200)
 11647  15E6  3000               	movlw	0
 11648  15E7  0264               	subwf	(Init_System@Baud+3)^(0+128),w
 11649  15E8  1D03               	skipz
 11650  15E9  2DF4               	goto	u10085
 11651  15EA  3000               	movlw	0
 11652  15EB  0263               	subwf	(Init_System@Baud+2)^(0+128),w
 11653  15EC  1D03               	skipz
 11654  15ED  2DF4               	goto	u10085
 11655  15EE  3009               	movlw	9
 11656  15EF  0262               	subwf	(Init_System@Baud+1)^(0+128),w
 11657  15F0  1D03               	skipz
 11658  15F1  2DF4               	goto	u10085
 11659  15F2  3060               	movlw	96
 11660  15F3  0261               	subwf	Init_System@Baud^(0+128),w
 11661  15F4                     u10085:	
 11662  15F4  1C03               	skipc
 11663  15F5  2E06               	goto	l7160
 11664  15F6  3000               	movlw	0
 11665  15F7  0264               	subwf	(Init_System@Baud+3)^(0+128),w
 11666  15F8  1D03               	skipz
 11667  15F9  2E04               	goto	u10095
 11668  15FA  3001               	movlw	1
 11669  15FB  0263               	subwf	(Init_System@Baud+2)^(0+128),w
 11670  15FC  1D03               	skipz
 11671  15FD  2E04               	goto	u10095
 11672  15FE  30C2               	movlw	194
 11673  15FF  0262               	subwf	(Init_System@Baud+1)^(0+128),w
 11674  1600  1D03               	skipz
 11675  1601  2E04               	goto	u10095
 11676  1602  3001               	movlw	1
 11677  1603  0261               	subwf	Init_System@Baud^(0+128),w
 11678  1604                     u10095:	
 11679  1604  1C03               	skipc
 11680  1605  2E0F               	goto	l7164
 11681  1606                     l7160:	
 11682                           
 11683                           ;user.c: 116: {
 11684                           ;user.c: 118: Baud = 9600;
 11685  1606  3000               	movlw	0
 11686  1607  00E4               	movwf	(Init_System@Baud+3)^(0+128)
 11687  1608  3000               	movlw	0
 11688  1609  00E3               	movwf	(Init_System@Baud+2)^(0+128)
 11689  160A  3025               	movlw	37
 11690  160B  00E2               	movwf	(Init_System@Baud+1)^(0+128)
 11691  160C  3080               	movlw	128
 11692  160D  00E1               	movwf	Init_System@Baud^(0+128)
 11693                           
 11694                           ;user.c: 119: Parity = 0;
 11695  160E  01E0               	clrf	Init_System@Parity^(0+128)
 11696  160F                     l7164:	
 11697                           
 11698                           ;user.c: 120: }
 11699                           ;user.c: 121: InitUART(Baud, Parity);
 11700  160F  0864               	movf	(Init_System@Baud+3)^(0+128),w
 11701  1610  0020               	movlb	0	; select bank0
 11702  1611  00B6               	movwf	InitUART@Baud+3
 11703  1612  0021               	movlb	1	; select bank1
 11704  1613  0863               	movf	(Init_System@Baud+2)^(0+128),w
 11705  1614  0020               	movlb	0	; select bank0
 11706  1615  00B5               	movwf	InitUART@Baud+2
 11707  1616  0021               	movlb	1	; select bank1
 11708  1617  0862               	movf	(Init_System@Baud+1)^(0+128),w
 11709  1618  0020               	movlb	0	; select bank0
 11710  1619  00B4               	movwf	InitUART@Baud+1
 11711  161A  0021               	movlb	1	; select bank1
 11712  161B  0861               	movf	Init_System@Baud^(0+128),w
 11713  161C  0020               	movlb	0	; select bank0
 11714  161D  00B3               	movwf	InitUART@Baud
 11715  161E  0021               	movlb	1	; select bank1
 11716  161F  0860               	movf	Init_System@Parity^(0+128),w
 11717  1620  0020               	movlb	0	; select bank0
 11718  1621  00D4               	movwf	??_Init_System
 11719  1622  0854               	movf	??_Init_System,w
 11720  1623  00B7               	movwf	InitUART@parity
 11721  1624  3191  21CA  3195   	fcall	_InitUART
 11722                           
 11723                           ;user.c: 122: UARTstringWAIT("\r\n");
 11724  1627  3056               	movlw	low ((STR_11+17)| (0+32768))
 11725  1628  0020               	movlb	0	; select bank0
 11726  1629  00B4               	movwf	UARTstringWAIT@data
 11727  162A  308B               	movlw	high ((STR_11+17)| (0+32768))
 11728  162B  00B5               	movwf	UARTstringWAIT@data+1
 11729  162C  319B  2362  3195   	fcall	_UARTstringWAIT
 11730                           
 11731                           ;user.c: 123: delayUS(10000);
 11732  162F  3000               	movlw	0
 11733  1630  0020               	movlb	0	; select bank0
 11734  1631  00A8               	movwf	delayUS@US+3
 11735  1632  3000               	movlw	0
 11736  1633  00A7               	movwf	delayUS@US+2
 11737  1634  3027               	movlw	39
 11738  1635  00A6               	movwf	delayUS@US+1
 11739  1636  3010               	movlw	16
 11740  1637  00A5               	movwf	delayUS@US
 11741  1638  3190  2002  3195   	fcall	_delayUS
 11742                           
 11743                           ;user.c: 124: sprintf(buf,"KeyBoard Baud is %lu",Baud);
 11744  163B  30A0               	movlw	low Init_System@buf
 11745  163C  0020               	movlb	0	; select bank0
 11746  163D  00BD               	movwf	sprintf@sp
 11747  163E  3000               	movlw	high Init_System@buf
 11748  163F  00BE               	movwf	sprintf@sp+1
 11749  1640  301B               	movlw	low (STR_16| (0+32768))
 11750  1641  00BF               	movwf	sprintf@f
 11751  1642  308B               	movlw	high (STR_16| (0+32768))
 11752  1643  00C0               	movwf	sprintf@f+1
 11753  1644  0021               	movlb	1	; select bank1
 11754  1645  0864               	movf	(Init_System@Baud+3)^(0+128),w
 11755  1646  0020               	movlb	0	; select bank0
 11756  1647  00C4               	movwf	?_sprintf+7
 11757  1648  0021               	movlb	1	; select bank1
 11758  1649  0863               	movf	(Init_System@Baud+2)^(0+128),w
 11759  164A  0020               	movlb	0	; select bank0
 11760  164B  00C3               	movwf	?_sprintf+6
 11761  164C  0021               	movlb	1	; select bank1
 11762  164D  0862               	movf	(Init_System@Baud+1)^(0+128),w
 11763  164E  0020               	movlb	0	; select bank0
 11764  164F  00C2               	movwf	?_sprintf+5
 11765  1650  0021               	movlb	1	; select bank1
 11766  1651  0861               	movf	Init_System@Baud^(0+128),w
 11767  1652  0020               	movlb	0	; select bank0
 11768  1653  00C1               	movwf	?_sprintf+4
 11769  1654  3194  249F  3195   	fcall	_sprintf
 11770                           
 11771                           ;user.c: 125: UARTstringWAIT(buf);
 11772  1657  30A0               	movlw	low Init_System@buf
 11773  1658  0020               	movlb	0	; select bank0
 11774  1659  00B4               	movwf	UARTstringWAIT@data
 11775  165A  3000               	movlw	high Init_System@buf
 11776  165B  00B5               	movwf	UARTstringWAIT@data+1
 11777  165C  319B  2362  3195   	fcall	_UARTstringWAIT
 11778                           
 11779                           ;user.c: 126: if(Parity)
 11780  165F  0021               	movlb	1	; select bank1
 11781  1660  0860               	movf	Init_System@Parity^(0+128),w
 11782  1661  1903               	btfsc	3,2
 11783  1662  2E85               	goto	l7190
 11784                           
 11785                           ;user.c: 127: {
 11786                           ;user.c: 128: switch (Parity)
 11787  1663  2E78               	goto	l7188
 11788  1664                     l7178:	
 11789                           ;user.c: 129: {
 11790                           ;user.c: 130: case 1:
 11791                           
 11792                           
 11793                           ;user.c: 131: UARTstringWAIT(" with Odd parity bit\r\n");
 11794  1664  30EE               	movlw	low (STR_17| (0+32768))
 11795  1665  0020               	movlb	0	; select bank0
 11796  1666  00B4               	movwf	UARTstringWAIT@data
 11797  1667  308A               	movlw	high (STR_17| (0+32768))
 11798  1668  2E89               	goto	L18
 11799  1669                     l7180:	
 11800                           ;user.c: 133: case 2:
 11801                           
 11802                           ;user.c: 132: break;
 11803                           
 11804                           
 11805                           ;user.c: 134: UARTstringWAIT(" with Even parity bit\r\n");
 11806  1669  30BE               	movlw	low (STR_18| (0+32768))
 11807  166A  0020               	movlb	0	; select bank0
 11808  166B  00B4               	movwf	UARTstringWAIT@data
 11809  166C  308A               	movlw	high (STR_18| (0+32768))
 11810  166D  2E89               	goto	L18
 11811  166E                     l7182:	
 11812                           ;user.c: 136: case 3:
 11813                           
 11814                           ;user.c: 135: break;
 11815                           
 11816                           
 11817                           ;user.c: 137: UARTstringWAIT(" with Mark bit\r\n");
 11818  166E  30A3               	movlw	low (STR_19| (0+32768))
 11819  166F  0020               	movlb	0	; select bank0
 11820  1670  00B4               	movwf	UARTstringWAIT@data
 11821  1671  308B               	movlw	high (STR_19| (0+32768))
 11822  1672  2E89               	goto	L18
 11823  1673                     l7184:	
 11824                           ;user.c: 139: default:
 11825                           
 11826                           ;user.c: 138: break;
 11827                           
 11828                           
 11829                           ;user.c: 140: UARTstringWAIT(" with Space bit\r\n");
 11830  1673  3091               	movlw	low (STR_20| (0+32768))
 11831  1674  0020               	movlb	0	; select bank0
 11832  1675  00B4               	movwf	UARTstringWAIT@data
 11833  1676  308B               	movlw	high (STR_20| (0+32768))
 11834  1677  2E89               	goto	L18
 11835  1678                     l7188:	
 11836                           ;user.c: 142: }
 11837                           
 11838                           ;user.c: 141: break;
 11839                           
 11840  1678  0021               	movlb	1	; select bank1
 11841  1679  0860               	movf	Init_System@Parity^(0+128),w
 11842                           
 11843                           ; Switch size 1, requested type "space"
 11844                           ; Number of cases is 3, Range of values is 1 to 3
 11845                           ; switch strategies available:
 11846                           ; Name         Instructions Cycles
 11847                           ; simple_byte           10     6 (average)
 11848                           ; direct_byte           15     9 (fixed)
 11849                           ; jumptable            263     9 (fixed)
 11850                           ;	Chosen strategy is simple_byte
 11851  167A  3A01               	xorlw	1	; case 1
 11852  167B  1903               	skipnz
 11853  167C  2E64               	goto	l7178
 11854  167D  3A03               	xorlw	3	; case 2
 11855  167E  1903               	skipnz
 11856  167F  2E69               	goto	l7180
 11857  1680  3A01               	xorlw	1	; case 3
 11858  1681  1903               	skipnz
 11859  1682  2E6E               	goto	l7182
 11860  1683  2E73               	goto	l7184
 11861                           
 11862                           ;user.c: 143: }
 11863  1684  2E8D               	goto	l7192
 11864  1685                     l7190:	
 11865                           
 11866                           ;user.c: 144: else
 11867                           ;user.c: 145: {
 11868                           ;user.c: 146: UARTstringWAIT(" with no parity bit\r\n");
 11869  1685  3011               	movlw	low ((STR_32+22)| (0+32768))
 11870  1686  0020               	movlb	0	; select bank0
 11871  1687  00B4               	movwf	UARTstringWAIT@data
 11872  1688  308A               	movlw	high ((STR_32+22)| (0+32768))
 11873  1689                     L18:	
 11874  1689  00B5               	movwf	UARTstringWAIT@data+1
 11875  168A  319B  2362  3195   	fcall	_UARTstringWAIT
 11876  168D                     l7192:	
 11877                           
 11878                           ;user.c: 147: }
 11879                           ;user.c: 148: delayUS(10000);
 11880  168D  3000               	movlw	0
 11881  168E  0020               	movlb	0	; select bank0
 11882  168F  00A8               	movwf	delayUS@US+3
 11883  1690  3000               	movlw	0
 11884  1691  00A7               	movwf	delayUS@US+2
 11885  1692  3027               	movlw	39
 11886  1693  00A6               	movwf	delayUS@US+1
 11887  1694  3010               	movlw	16
 11888  1695  00A5               	movwf	delayUS@US
 11889  1696  3190  2002         	fcall	_delayUS
 11890                           
 11891                           ;user.c: 150: INTCON |= 0x08;
 11892  1698  158B               	bsf	11,3	;volatile
 11893                           
 11894                           ;user.c: 151: INTCONbits.GIE = 1;
 11895  1699  178B               	bsf	11,7	;volatile
 11896  169A  0008               	return
 11897  169B                     __end_of_Init_System:	
 11898                           
 11899                           	psect	text27
 11900  149F                     __ptext27:	
 11901 ;; *************** function _sprintf *****************
 11902 ;; Defined at:
 11903 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
 11904 ;; Parameters:    Size  Location     Type
 11905 ;;  sp              2   29[BANK0 ] PTR unsigned char 
 11906 ;;		 -> PS_2_Update@buf(60), SetBaud@buf(50), Init_System@buf(60), 
 11907 ;;  f               2   31[BANK0 ] PTR const unsigned char 
 11908 ;;		 -> STR_34(33), STR_24(21), STR_16(21), 
 11909 ;; Auto vars:     Size  Location     Type
 11910 ;;  _val            4   46[BANK0 ] struct .
 11911 ;;  prec            2   44[BANK0 ] int 
 11912 ;;  c               1   51[BANK0 ] char 
 11913 ;;  ap              1   50[BANK0 ] PTR void [1]
 11914 ;;		 -> ?_sprintf(2), 
 11915 ;;  flag            1   43[BANK0 ] unsigned char 
 11916 ;; Return value:  Size  Location     Type
 11917 ;;                  2   29[BANK0 ] int 
 11918 ;; Registers used:
 11919 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11920 ;; Tracked objects:
 11921 ;;		On entry : 0/0
 11922 ;;		On exit  : 0/0
 11923 ;;		Unchanged: 0/0
 11924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11925 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11926 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11927 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11928 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11929 ;;Total ram usage:       23 bytes
 11930 ;; Hardware stack levels used:    1
 11931 ;; Hardware stack levels required when called:    4
 11932 ;; This function calls:
 11933 ;;		___lldiv
 11934 ;;		___llmod
 11935 ;; This function is called by:
 11936 ;;		_Init_System
 11937 ;;		_SetBaud
 11938 ;;		_PS_2_Update
 11939 ;; This function uses a non-reentrant model
 11940 ;;
 11941                           
 11942                           
 11943                           ;psect for function _sprintf
 11944  149F                     _sprintf:	
 11945                           
 11946                           ;doprnt.c: 494: va_list ap;
 11947                           ;doprnt.c: 499: signed char c;
 11948                           ;doprnt.c: 504: int prec;
 11949                           ;doprnt.c: 508: unsigned char flag;
 11950                           ;doprnt.c: 527: union {
 11951                           ;doprnt.c: 528: unsigned long _val;
 11952                           ;doprnt.c: 529: struct {
 11953                           ;doprnt.c: 530: const char * _cp;
 11954                           ;doprnt.c: 531: unsigned _len;
 11955                           ;doprnt.c: 532: } _str;
 11956                           ;doprnt.c: 533: } _val;
 11957                           ;doprnt.c: 542: *ap = __va_start();
 11958                           
 11959                           ;incstack = 0
 11960                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11961  149F  3041               	movlw	(?_sprintf+4)& (0+255)
 11962  14A0  0020               	movlb	0	; select bank0
 11963  14A1  00C5               	movwf	??_sprintf
 11964  14A2  0845               	movf	??_sprintf,w
 11965  14A3  00D2               	movwf	sprintf@ap
 11966  14A4                     l6092:	
 11967                           ;doprnt.c: 545: while(c = *f++) {
 11968                           
 11969  14A4  0840               	movf	sprintf@f+1,w
 11970  14A5  00C6               	movwf	??_sprintf+1
 11971  14A6  083F               	movf	sprintf@f,w
 11972  14A7  00C5               	movwf	??_sprintf
 11973  14A8  0ABF               	incf	sprintf@f,f
 11974  14A9  1903               	skipnz
 11975  14AA  0AC0               	incf	sprintf@f+1,f
 11976  14AB  0845               	movf	??_sprintf,w
 11977  14AC  0084               	movwf	4
 11978  14AD  0846               	movf	??_sprintf+1,w
 11979  14AE  0085               	movwf	5
 11980  14AF  0800               	movf	0,w	;code access
 11981  14B0  00C7               	movwf	??_sprintf+2
 11982  14B1  0847               	movf	??_sprintf+2,w
 11983  14B2  00D3               	movwf	sprintf@c
 11984  14B3  08D3               	movf	sprintf@c,f
 11985  14B4  1903               	btfsc	3,2
 11986  14B5  2D8D               	goto	l6094
 11987                           
 11988                           ;doprnt.c: 547: if(c != '%')
 11989  14B6  0853               	movf	sprintf@c,w
 11990  14B7  3A25               	xorlw	37
 11991  14B8  1903               	skipnz
 11992  14B9  2CC5               	goto	l6052
 11993                           
 11994                           ;doprnt.c: 549: {
 11995                           ;doprnt.c: 550: ((*sp++ = (c)));
 11996  14BA  083D               	movf	sprintf@sp,w
 11997  14BB  0086               	movwf	6
 11998  14BC  083E               	movf	sprintf@sp+1,w
 11999  14BD  0087               	movwf	7
 12000  14BE  0853               	movf	sprintf@c,w
 12001  14BF  0081               	movwf	1
 12002  14C0  3001               	movlw	1
 12003  14C1  07BD               	addwf	sprintf@sp,f
 12004  14C2  3000               	movlw	0
 12005  14C3  3DBE               	addwfc	sprintf@sp+1,f
 12006                           
 12007                           ;doprnt.c: 551: continue;
 12008  14C4  2CA4               	goto	l6092
 12009  14C5                     l6052:	
 12010                           
 12011                           ;doprnt.c: 552: }
 12012                           ;doprnt.c: 557: flag = 0;
 12013  14C5  01CB               	clrf	sprintf@flag
 12014                           
 12015                           ;doprnt.c: 644: switch(c = *f++) {
 12016                           
 12017                           ;doprnt.c: 642: loop:
 12018  14C6  2CCE               	goto	l6058
 12019  14C7                     l1024:	
 12020                           ;doprnt.c: 650: case 'l':
 12021                           
 12022                           ;doprnt.c: 647: goto alldone;
 12023                           
 12024                           ;doprnt.c: 646: case 0:
 12025                           
 12026                           
 12027                           ;doprnt.c: 652: flag |= 0x10;
 12028  14C7  164B               	bsf	sprintf@flag,4
 12029                           
 12030                           ;doprnt.c: 653: goto loop;
 12031  14C8  2CCE               	goto	l6058
 12032  14C9                     l6054:	
 12033                           ;doprnt.c: 826: case 'u':
 12034                           
 12035                           ;doprnt.c: 822: continue;
 12036                           
 12037                           ;doprnt.c: 811: default:
 12038                           
 12039                           
 12040                           ;doprnt.c: 827: flag |= 0xC0;
 12041  14C9  30C0               	movlw	192
 12042  14CA  00C5               	movwf	??_sprintf
 12043  14CB  0845               	movf	??_sprintf,w
 12044  14CC  04CB               	iorwf	sprintf@flag,f
 12045                           
 12046                           ;doprnt.c: 831: }
 12047                           
 12048                           ;doprnt.c: 828: break;
 12049  14CD  2CE5               	goto	l1027
 12050  14CE                     l6058:	
 12051  14CE  0840               	movf	sprintf@f+1,w
 12052  14CF  00C6               	movwf	??_sprintf+1
 12053  14D0  083F               	movf	sprintf@f,w
 12054  14D1  00C5               	movwf	??_sprintf
 12055  14D2  0ABF               	incf	sprintf@f,f
 12056  14D3  1903               	skipnz
 12057  14D4  0AC0               	incf	sprintf@f+1,f
 12058  14D5  0845               	movf	??_sprintf,w
 12059  14D6  0084               	movwf	4
 12060  14D7  0846               	movf	??_sprintf+1,w
 12061  14D8  0085               	movwf	5
 12062  14D9  0800               	movf	0,w	;code access
 12063  14DA  00D3               	movwf	sprintf@c
 12064                           
 12065                           ; Switch size 1, requested type "space"
 12066                           ; Number of cases is 3, Range of values is 0 to 117
 12067                           ; switch strategies available:
 12068                           ; Name         Instructions Cycles
 12069                           ; simple_byte           10     6 (average)
 12070                           ; direct_byte          242     6 (fixed)
 12071                           ; jumptable            260     6 (fixed)
 12072                           ;	Chosen strategy is simple_byte
 12073  14DB  3A00               	xorlw	0	; case 0
 12074  14DC  1903               	skipnz
 12075  14DD  2D8D               	goto	l6094
 12076  14DE  3A6C               	xorlw	108	; case 108
 12077  14DF  1903               	skipnz
 12078  14E0  2CC7               	goto	l1024
 12079  14E1  3A19               	xorlw	25	; case 117
 12080  14E2  1903               	skipnz
 12081  14E3  2CC9               	goto	l6054
 12082  14E4  2CA4               	goto	l6092
 12083  14E5                     l1027:	
 12084                           
 12085                           ;doprnt.c: 1282: {
 12086                           ;doprnt.c: 1290: if(flag & 0x10)
 12087  14E5  1E4B               	btfss	sprintf@flag,4
 12088  14E6  2CF4               	goto	l6064
 12089                           
 12090                           ;doprnt.c: 1291: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 12091  14E7  0852               	movf	sprintf@ap,w
 12092  14E8  0086               	movwf	6
 12093  14E9  0187               	clrf	7
 12094  14EA  3F40               	moviw [0]fsr1
 12095  14EB  00CE               	movwf	sprintf@_val
 12096  14EC  3F41               	moviw [1]fsr1
 12097  14ED  00CF               	movwf	sprintf@_val+1
 12098  14EE  3F42               	moviw [2]fsr1
 12099  14EF  00D0               	movwf	sprintf@_val+2
 12100  14F0  3F43               	moviw [3]fsr1
 12101  14F1  00D1               	movwf	sprintf@_val+3
 12102  14F2  3004               	movlw	4
 12103  14F3  2D02               	goto	L19
 12104  14F4                     l6064:	
 12105                           
 12106                           ;doprnt.c: 1292: else
 12107                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 12108  14F4  0852               	movf	sprintf@ap,w
 12109  14F5  0086               	movwf	6
 12110  14F6  0187               	clrf	7
 12111  14F7  3F40               	moviw [0]fsr1
 12112  14F8  00C5               	movwf	??_sprintf
 12113  14F9  3F41               	moviw [1]fsr1
 12114  14FA  00C6               	movwf	??_sprintf+1
 12115  14FB  0845               	movf	??_sprintf,w
 12116  14FC  00CE               	movwf	sprintf@_val
 12117  14FD  0846               	movf	??_sprintf+1,w
 12118  14FE  00CF               	movwf	sprintf@_val+1
 12119  14FF  01D0               	clrf	sprintf@_val+2
 12120  1500  01D1               	clrf	sprintf@_val+3
 12121  1501  3002               	movlw	2
 12122  1502                     L19:	
 12123  1502  00C5               	movwf	??_sprintf
 12124  1503  0845               	movf	??_sprintf,w
 12125  1504  07D2               	addwf	sprintf@ap,f
 12126                           
 12127                           ;doprnt.c: 1296: }
 12128                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12129  1505  01D3               	clrf	sprintf@c
 12130  1506  0AD3               	incf	sprintf@c,f
 12131  1507  0853               	movf	sprintf@c,w
 12132  1508  3A0A               	xorlw	10
 12133  1509  1903               	btfsc	3,2
 12134  150A  2D38               	goto	l6082
 12135  150B                     l6074:	
 12136                           
 12137                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
 12138  150B  0853               	movf	sprintf@c,w
 12139  150C  00C5               	movwf	??_sprintf
 12140  150D  01C6               	clrf	??_sprintf+1
 12141  150E  35C5               	lslf	??_sprintf,f
 12142  150F  0DC6               	rlf	??_sprintf+1,f
 12143  1510  35C5               	lslf	??_sprintf,f
 12144  1511  0DC6               	rlf	??_sprintf+1,f
 12145  1512  30D3               	movlw	low (_dpowers| (0+32768))
 12146  1513  0745               	addwf	??_sprintf,w
 12147  1514  0084               	movwf	4
 12148  1515  3089               	movlw	high (_dpowers| (0+32768))
 12149  1516  3D46               	addwfc	??_sprintf+1,w
 12150  1517  0085               	movwf	5
 12151  1518  3F00               	moviw [0]fsr0
 12152  1519  00C7               	movwf	??_sprintf+2
 12153  151A  3F01               	moviw [1]fsr0
 12154  151B  00C8               	movwf	??_sprintf+3
 12155  151C  3F02               	moviw [2]fsr0
 12156  151D  00C9               	movwf	??_sprintf+4
 12157  151E  3F03               	moviw [3]fsr0
 12158  151F  00CA               	movwf	??_sprintf+5
 12159  1520  084A               	movf	??_sprintf+5,w
 12160  1521  0251               	subwf	sprintf@_val+3,w
 12161  1522  1D03               	skipz
 12162  1523  2D2E               	goto	u7945
 12163  1524  0849               	movf	??_sprintf+4,w
 12164  1525  0250               	subwf	sprintf@_val+2,w
 12165  1526  1D03               	skipz
 12166  1527  2D2E               	goto	u7945
 12167  1528  0848               	movf	??_sprintf+3,w
 12168  1529  024F               	subwf	sprintf@_val+1,w
 12169  152A  1D03               	skipz
 12170  152B  2D2E               	goto	u7945
 12171  152C  0847               	movf	??_sprintf+2,w
 12172  152D  024E               	subwf	sprintf@_val,w
 12173  152E                     u7945:	
 12174  152E  1C03               	btfss	3,0
 12175  152F  2D38               	goto	l6082
 12176                           
 12177                           ;doprnt.c: 1316: break;
 12178  1530  3001               	movlw	1
 12179  1531  00C5               	movwf	??_sprintf
 12180  1532  0845               	movf	??_sprintf,w
 12181  1533  07D3               	addwf	sprintf@c,f
 12182  1534  0853               	movf	sprintf@c,w
 12183  1535  3A0A               	xorlw	10
 12184  1536  1D03               	skipz
 12185  1537  2D0B               	goto	l6074
 12186  1538                     l6082:	
 12187                           
 12188                           ;doprnt.c: 1431: {
 12189                           ;doprnt.c: 1478: }
 12190                           ;doprnt.c: 1481: prec = c;
 12191  1538  0853               	movf	sprintf@c,w
 12192  1539  00CC               	movwf	sprintf@prec
 12193  153A  01CD               	clrf	sprintf@prec+1
 12194  153B  1BCC               	btfsc	sprintf@prec,7
 12195  153C  03CD               	decf	sprintf@prec+1,f
 12196  153D                     l6090:	
 12197                           ;doprnt.c: 1483: while(prec--) {
 12198                           
 12199  153D  30FF               	movlw	255
 12200  153E  07CC               	addwf	sprintf@prec,f
 12201  153F  30FF               	movlw	255
 12202  1540  3DCD               	addwfc	sprintf@prec+1,f
 12203  1541  30FF               	movlw	255
 12204  1542  064D               	xorwf	sprintf@prec+1,w
 12205  1543  1D03               	skipz
 12206  1544  2D47               	goto	u7965
 12207  1545  30FF               	movlw	255
 12208  1546  064C               	xorwf	sprintf@prec,w
 12209  1547                     u7965:	
 12210  1547  1903               	btfsc	3,2
 12211  1548  2CA4               	goto	l6092
 12212                           
 12213                           ;doprnt.c: 1487: {
 12214                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
 12215  1549  3000               	movlw	0
 12216  154A  00B6               	movwf	___llmod@divisor+3
 12217  154B  3000               	movlw	0
 12218  154C  00B5               	movwf	___llmod@divisor+2
 12219  154D  3000               	movlw	0
 12220  154E  00B4               	movwf	___llmod@divisor+1
 12221  154F  300A               	movlw	10
 12222  1550  00B3               	movwf	___llmod@divisor
 12223  1551  084D               	movf	sprintf@prec+1,w
 12224  1552  0085               	movwf	5
 12225  1553  084C               	movf	sprintf@prec,w
 12226  1554  0084               	movwf	4
 12227  1555  3584               	lslf	4,f
 12228  1556  0D85               	rlf	5,f
 12229  1557  3584               	lslf	4,f
 12230  1558  0D85               	rlf	5,f
 12231  1559  30D3               	movlw	low (_dpowers| (0+32768))
 12232  155A  0784               	addwf	4,f
 12233  155B  3089               	movlw	high (_dpowers| (0+32768))
 12234  155C  3D85               	addwfc	5,f
 12235  155D  3F00               	moviw [0]fsr0
 12236  155E  00A5               	movwf	___lldiv@divisor
 12237  155F  3F01               	moviw [1]fsr0
 12238  1560  00A6               	movwf	___lldiv@divisor+1
 12239  1561  3F02               	moviw [2]fsr0
 12240  1562  00A7               	movwf	___lldiv@divisor+2
 12241  1563  3F03               	moviw [3]fsr0
 12242  1564  00A8               	movwf	___lldiv@divisor+3
 12243  1565  0851               	movf	sprintf@_val+3,w
 12244  1566  00AC               	movwf	___lldiv@dividend+3
 12245  1567  0850               	movf	sprintf@_val+2,w
 12246  1568  00AB               	movwf	___lldiv@dividend+2
 12247  1569  084F               	movf	sprintf@_val+1,w
 12248  156A  00AA               	movwf	___lldiv@dividend+1
 12249  156B  084E               	movf	sprintf@_val,w
 12250  156C  00A9               	movwf	___lldiv@dividend
 12251  156D  319C  24AC  3194   	fcall	___lldiv
 12252  1570  0020               	movlb	0	; select bank0
 12253  1571  0828               	movf	?___lldiv+3,w
 12254  1572  00BA               	movwf	___llmod@dividend+3
 12255  1573  0827               	movf	?___lldiv+2,w
 12256  1574  00B9               	movwf	___llmod@dividend+2
 12257  1575  0826               	movf	?___lldiv+1,w
 12258  1576  00B8               	movwf	___llmod@dividend+1
 12259  1577  0825               	movf	?___lldiv,w
 12260  1578  00B7               	movwf	___llmod@dividend
 12261  1579  319B  23D4  3194   	fcall	___llmod
 12262  157C  0020               	movlb	0	; select bank0
 12263  157D  0833               	movf	?___llmod,w
 12264  157E  3E30               	addlw	48
 12265  157F  00C5               	movwf	??_sprintf
 12266  1580  0845               	movf	??_sprintf,w
 12267  1581  00D3               	movwf	sprintf@c
 12268                           
 12269                           ;doprnt.c: 1532: }
 12270                           ;doprnt.c: 1533: ((*sp++ = (c)));
 12271  1582  083D               	movf	sprintf@sp,w
 12272  1583  0086               	movwf	6
 12273  1584  083E               	movf	sprintf@sp+1,w
 12274  1585  0087               	movwf	7
 12275  1586  0853               	movf	sprintf@c,w
 12276  1587  0081               	movwf	1
 12277  1588  3001               	movlw	1
 12278  1589  07BD               	addwf	sprintf@sp,f
 12279  158A  3000               	movlw	0
 12280  158B  3DBE               	addwfc	sprintf@sp+1,f
 12281  158C  2D3D               	goto	l6090
 12282  158D                     l6094:	
 12283                           ;doprnt.c: 1534: }
 12284                           ;doprnt.c: 1542: }
 12285                           ;doprnt.c: 1544: alldone:
 12286                           
 12287                           
 12288                           ;doprnt.c: 1547: *sp = 0;
 12289  158D  083D               	movf	sprintf@sp,w
 12290  158E  0086               	movwf	6
 12291  158F  083E               	movf	sprintf@sp+1,w
 12292  1590  0087               	movwf	7
 12293  1591  0181               	clrf	1
 12294  1592  0008               	return
 12295  1593                     __end_of_sprintf:	
 12296                           ;doprnt.c: 1549: return 0;
 12297                           ;	Return value of _sprintf is never used
 12298                           
 12299                           
 12300                           	psect	text28
 12301  1BD4                     __ptext28:	
 12302 ;; *************** function ___llmod *****************
 12303 ;; Defined at:
 12304 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\llmod.c"
 12305 ;; Parameters:    Size  Location     Type
 12306 ;;  divisor         4   19[BANK0 ] unsigned long 
 12307 ;;  dividend        4   23[BANK0 ] unsigned long 
 12308 ;; Auto vars:     Size  Location     Type
 12309 ;;  counter         1   28[BANK0 ] unsigned char 
 12310 ;; Return value:  Size  Location     Type
 12311 ;;                  4   19[BANK0 ] unsigned long 
 12312 ;; Registers used:
 12313 ;;		wreg, status,2, status,0
 12314 ;; Tracked objects:
 12315 ;;		On entry : 0/0
 12316 ;;		On exit  : 0/0
 12317 ;;		Unchanged: 0/0
 12318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12319 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12320 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12321 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12322 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12323 ;;Total ram usage:       10 bytes
 12324 ;; Hardware stack levels used:    1
 12325 ;; Hardware stack levels required when called:    3
 12326 ;; This function calls:
 12327 ;;		Nothing
 12328 ;; This function is called by:
 12329 ;;		_sprintf
 12330 ;; This function uses a non-reentrant model
 12331 ;;
 12332                           
 12333                           
 12334                           ;psect for function ___llmod
 12335  1BD4                     ___llmod:	
 12336                           
 12337                           ;incstack = 0
 12338                           ; Regs used in ___llmod: [wreg+status,2+status,0]
 12339  1BD4  0020               	movlb	0	; select bank0
 12340  1BD5  0836               	movf	___llmod@divisor+3,w
 12341  1BD6  0435               	iorwf	___llmod@divisor+2,w
 12342  1BD7  0434               	iorwf	___llmod@divisor+1,w
 12343  1BD8  0433               	iorwf	___llmod@divisor,w
 12344  1BD9  1903               	skipnz
 12345  1BDA  2C0E               	goto	l5922
 12346  1BDB  01BC               	clrf	___llmod@counter
 12347  1BDC  0ABC               	incf	___llmod@counter,f
 12348  1BDD                     l5912:	
 12349  1BDD  1BB6               	btfsc	___llmod@divisor+3,7
 12350  1BDE  2BEB               	goto	l5914
 12351  1BDF  3001               	movlw	1
 12352  1BE0                     u7755:	
 12353  1BE0  35B3               	lslf	___llmod@divisor,f
 12354  1BE1  0DB4               	rlf	___llmod@divisor+1,f
 12355  1BE2  0DB5               	rlf	___llmod@divisor+2,f
 12356  1BE3  0DB6               	rlf	___llmod@divisor+3,f
 12357  1BE4  0B89               	decfsz	9,f
 12358  1BE5  2BE0               	goto	u7755
 12359  1BE6  3001               	movlw	1
 12360  1BE7  00BB               	movwf	??___llmod
 12361  1BE8  083B               	movf	??___llmod,w
 12362  1BE9  07BC               	addwf	___llmod@counter,f
 12363  1BEA  2BDD               	goto	l5912
 12364  1BEB                     l5914:	
 12365  1BEB  0836               	movf	___llmod@divisor+3,w
 12366  1BEC  023A               	subwf	___llmod@dividend+3,w
 12367  1BED  1D03               	skipz
 12368  1BEE  2BF9               	goto	u7775
 12369  1BEF  0835               	movf	___llmod@divisor+2,w
 12370  1BF0  0239               	subwf	___llmod@dividend+2,w
 12371  1BF1  1D03               	skipz
 12372  1BF2  2BF9               	goto	u7775
 12373  1BF3  0834               	movf	___llmod@divisor+1,w
 12374  1BF4  0238               	subwf	___llmod@dividend+1,w
 12375  1BF5  1D03               	skipz
 12376  1BF6  2BF9               	goto	u7775
 12377  1BF7  0833               	movf	___llmod@divisor,w
 12378  1BF8  0237               	subwf	___llmod@dividend,w
 12379  1BF9                     u7775:	
 12380  1BF9  1C03               	skipc
 12381  1BFA  2C03               	goto	l5918
 12382  1BFB  0833               	movf	___llmod@divisor,w
 12383  1BFC  02B7               	subwf	___llmod@dividend,f
 12384  1BFD  0834               	movf	___llmod@divisor+1,w
 12385  1BFE  3BB8               	subwfb	___llmod@dividend+1,f
 12386  1BFF  0835               	movf	___llmod@divisor+2,w
 12387  1C00  3BB9               	subwfb	___llmod@dividend+2,f
 12388  1C01  0836               	movf	___llmod@divisor+3,w
 12389  1C02  3BBA               	subwfb	___llmod@dividend+3,f
 12390  1C03                     l5918:	
 12391  1C03  3001               	movlw	1
 12392  1C04                     u7785:	
 12393  1C04  36B6               	lsrf	___llmod@divisor+3,f
 12394  1C05  0CB5               	rrf	___llmod@divisor+2,f
 12395  1C06  0CB4               	rrf	___llmod@divisor+1,f
 12396  1C07  0CB3               	rrf	___llmod@divisor,f
 12397  1C08  0B89               	decfsz	9,f
 12398  1C09  2C04               	goto	u7785
 12399  1C0A  3001               	movlw	1
 12400  1C0B  02BC               	subwf	___llmod@counter,f
 12401  1C0C  1D03               	btfss	3,2
 12402  1C0D  2BEB               	goto	l5914
 12403  1C0E                     l5922:	
 12404  1C0E  083A               	movf	___llmod@dividend+3,w
 12405  1C0F  00B6               	movwf	?___llmod+3
 12406  1C10  0839               	movf	___llmod@dividend+2,w
 12407  1C11  00B5               	movwf	?___llmod+2
 12408  1C12  0838               	movf	___llmod@dividend+1,w
 12409  1C13  00B4               	movwf	?___llmod+1
 12410  1C14  0837               	movf	___llmod@dividend,w
 12411  1C15  00B3               	movwf	?___llmod
 12412  1C16  0008               	return
 12413  1C17                     __end_of___llmod:	
 12414                           
 12415                           	psect	text29
 12416  1B62                     __ptext29:	
 12417 ;; *************** function _UARTstringWAIT *****************
 12418 ;; Defined at:
 12419 ;;		line 362 in file "UART.c"
 12420 ;; Parameters:    Size  Location     Type
 12421 ;;  data            2   20[BANK0 ] PTR const unsigned char 
 12422 ;;		 -> STR_40(29), STR_39(22), STR_38(18), STR_37(17), 
 12423 ;;		 -> STR_36(24), STR_35(23), PS_2_Update@buf(60), STR_33(3), 
 12424 ;;		 -> STR_32(44), STR_31(18), STR_30(3), STR_29(22), 
 12425 ;;		 -> STR_28(18), STR_27(17), STR_26(24), STR_25(23), 
 12426 ;;		 -> SetBaud@buf(50), STR_23(24), STR_22(3), STR_21(22), 
 12427 ;;		 -> STR_20(18), STR_19(17), STR_18(24), STR_17(23), 
 12428 ;;		 -> Init_System@buf(60), STR_15(3), STR_14(17), STR_13(22), 
 12429 ;;		 -> STR_12(21), STR_11(20), STR_10(19), STR_9(17), 
 12430 ;;		 -> STR_8(22), STR_7(21), STR_6(24), STR_5(39), 
 12431 ;;		 -> STR_4(3), Version(4), STR_3(19), STR_2(26), 
 12432 ;;		 -> STR_1(3), 
 12433 ;; Auto vars:     Size  Location     Type
 12434 ;;		None
 12435 ;; Return value:  Size  Location     Type
 12436 ;;		None               void
 12437 ;; Registers used:
 12438 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12439 ;; Tracked objects:
 12440 ;;		On entry : 0/0
 12441 ;;		On exit  : 0/0
 12442 ;;		Unchanged: 0/0
 12443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12444 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12446 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12447 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12448 ;;Total ram usage:        4 bytes
 12449 ;; Hardware stack levels used:    1
 12450 ;; Hardware stack levels required when called:    5
 12451 ;; This function calls:
 12452 ;;		_UARTchar
 12453 ;;		_delayUS
 12454 ;; This function is called by:
 12455 ;;		_main
 12456 ;;		_Init_System
 12457 ;;		_SetBaud
 12458 ;;		_PS_2_Update
 12459 ;; This function uses a non-reentrant model
 12460 ;;
 12461                           
 12462                           
 12463                           ;psect for function _UARTstringWAIT
 12464  1B62                     _UARTstringWAIT:	
 12465  1B62                     l439:	
 12466                           ;incstack = 0
 12467                           ; Regs used in _UARTstringWAIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12468                           ;UART.c: 364: do
 12469                           
 12470                           
 12471                           ;UART.c: 365: {
 12472                           ;UART.c: 366: delayUS(5000);
 12473  1B62  3000               	movlw	0
 12474  1B63  0020               	movlb	0	; select bank0
 12475  1B64  00A8               	movwf	delayUS@US+3
 12476  1B65  3000               	movlw	0
 12477  1B66  00A7               	movwf	delayUS@US+2
 12478  1B67  3013               	movlw	19
 12479  1B68  00A6               	movwf	delayUS@US+1
 12480  1B69  3088               	movlw	136
 12481  1B6A  00A5               	movwf	delayUS@US
 12482  1B6B  3190  2002  319B   	fcall	_delayUS
 12483                           
 12484                           ;UART.c: 367: if(*data != 0)
 12485  1B6E  0020               	movlb	0	; select bank0
 12486  1B6F  0834               	movf	UARTstringWAIT@data,w
 12487  1B70  0084               	movwf	4
 12488  1B71  0835               	movf	UARTstringWAIT@data+1,w
 12489  1B72  0085               	movwf	5
 12490  1B73  0800               	movf	0,w	;code access
 12491  1B74  3A00               	xorlw	0
 12492  1B75  1903               	skipnz
 12493  1B76  2B84               	goto	l5956
 12494                           
 12495                           ;UART.c: 368: {
 12496                           ;UART.c: 369: UARTchar(*data, 0, 0);
 12497  1B77  01AD               	clrf	UARTchar@override
 12498  1B78  01AE               	clrf	UARTchar@NinethBit_override_data
 12499  1B79  0834               	movf	UARTstringWAIT@data,w
 12500  1B7A  0084               	movwf	4
 12501  1B7B  0835               	movf	UARTstringWAIT@data+1,w
 12502  1B7C  0085               	movwf	5
 12503  1B7D  0800               	movf	0,w	;code access
 12504  1B7E  319E  26CA  319B   	fcall	_UARTchar
 12505  1B81                     l441:	
 12506                           ;UART.c: 370: while((!TX1STAbits.TRMT));
 12507                           
 12508  1B81  0023               	movlb	3	; select bank3
 12509  1B82  1C9E               	btfss	30,1	;volatile
 12510  1B83  2B81               	goto	l441
 12511  1B84                     l5956:	
 12512                           
 12513                           ;UART.c: 371: }
 12514                           ;UART.c: 372: } while( *data++);
 12515  1B84  0020               	movlb	0	; select bank0
 12516  1B85  0835               	movf	UARTstringWAIT@data+1,w
 12517  1B86  00B7               	movwf	??_UARTstringWAIT+1
 12518  1B87  0834               	movf	UARTstringWAIT@data,w
 12519  1B88  00B6               	movwf	??_UARTstringWAIT
 12520  1B89  0AB4               	incf	UARTstringWAIT@data,f
 12521  1B8A  1903               	skipnz
 12522  1B8B  0AB5               	incf	UARTstringWAIT@data+1,f
 12523  1B8C  0836               	movf	??_UARTstringWAIT,w
 12524  1B8D  0084               	movwf	4
 12525  1B8E  0837               	movf	??_UARTstringWAIT+1,w
 12526  1B8F  0085               	movwf	5
 12527  1B90  0800               	movf	0,w	;code access
 12528  1B91  3800               	iorlw	0
 12529  1B92  1903               	btfsc	3,2
 12530  1B93  0008               	return
 12531  1B94  2B62               	goto	l439
 12532  1B95                     __end_of_UARTstringWAIT:	
 12533                           
 12534                           	psect	text30
 12535  1ECA                     __ptext30:	
 12536 ;; *************** function _UARTchar *****************
 12537 ;; Defined at:
 12538 ;;		line 232 in file "UART.c"
 12539 ;; Parameters:    Size  Location     Type
 12540 ;;  data            1    wreg     unsigned char 
 12541 ;;  override        1   13[BANK0 ] unsigned char 
 12542 ;;  NinethBit_ov    1   14[BANK0 ] unsigned char 
 12543 ;; Auto vars:     Size  Location     Type
 12544 ;;  data            1   19[BANK0 ] unsigned char 
 12545 ;; Return value:  Size  Location     Type
 12546 ;;		None               void
 12547 ;; Registers used:
 12548 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12549 ;; Tracked objects:
 12550 ;;		On entry : 0/0
 12551 ;;		On exit  : 0/0
 12552 ;;		Unchanged: 0/0
 12553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12554 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12555 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12556 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12557 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12558 ;;Total ram usage:        7 bytes
 12559 ;; Hardware stack levels used:    1
 12560 ;; Hardware stack levels required when called:    4
 12561 ;; This function calls:
 12562 ;;		_CheckSum_byte
 12563 ;; This function is called by:
 12564 ;;		_UARTstringWAIT
 12565 ;;		_PS_2_Update
 12566 ;;		_UARTstring
 12567 ;; This function uses a non-reentrant model
 12568 ;;
 12569                           
 12570                           
 12571                           ;psect for function _UARTchar
 12572  1ECA                     _UARTchar:	
 12573                           
 12574                           ;incstack = 0
 12575                           ; Regs used in _UARTchar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12576                           ;UARTchar@data stored from wreg
 12577  1ECA  0020               	movlb	0	; select bank0
 12578  1ECB  00B3               	movwf	UARTchar@data
 12579                           
 12580                           ;UART.c: 234: if(TXSTAbits.TX9)
 12581  1ECC  0023               	movlb	3	; select bank3
 12582  1ECD  1F1E               	btfss	30,6	;volatile
 12583  1ECE  2F15               	goto	l5750
 12584                           
 12585                           ;UART.c: 235: {
 12586                           ;UART.c: 237: if(!override)
 12587  1ECF  0020               	movlb	0	; select bank0
 12588  1ED0  08AD               	movf	UARTchar@override,f
 12589  1ED1  1903               	btfsc	3,2
 12590  1ED2  2EFC               	goto	l5746
 12591  1ED3  2F09               	goto	l5748
 12592  1ED4                     l5740:	
 12593                           ;UART.c: 241: {
 12594                           ;UART.c: 242: case 1:
 12595                           
 12596                           ;UART.c: 238: {
 12597                           ;UART.c: 240: switch (PARITY)
 12598                           
 12599                           
 12600                           ;UART.c: 243: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 3);
 12601  1ED4  0020               	movlb	0	; select bank0
 12602  1ED5  0833               	movf	UARTchar@data,w
 12603  1ED6  00AF               	movwf	??_UARTchar
 12604  1ED7  01B0               	clrf	??_UARTchar+1
 12605  1ED8  082F               	movf	??_UARTchar,w
 12606  1ED9  00A5               	movwf	CheckSum_byte@This
 12607  1EDA  0830               	movf	??_UARTchar+1,w
 12608  1EDB  00A6               	movwf	CheckSum_byte@This+1
 12609  1EDC  3003               	movlw	3
 12610  1EDD  2EE7               	goto	L22
 12611  1EDE                     l5742:	
 12612                           ;UART.c: 245: case 2:
 12613                           
 12614                           ;UART.c: 244: break;
 12615                           
 12616                           
 12617                           ;UART.c: 246: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 2);
 12618  1EDE  0020               	movlb	0	; select bank0
 12619  1EDF  0833               	movf	UARTchar@data,w
 12620  1EE0  00AF               	movwf	??_UARTchar
 12621  1EE1  01B0               	clrf	??_UARTchar+1
 12622  1EE2  082F               	movf	??_UARTchar,w
 12623  1EE3  00A5               	movwf	CheckSum_byte@This
 12624  1EE4  0830               	movf	??_UARTchar+1,w
 12625  1EE5  00A6               	movwf	CheckSum_byte@This+1
 12626  1EE6  3002               	movlw	2
 12627  1EE7                     L22:	
 12628  1EE7  00B1               	movwf	??_UARTchar+2
 12629  1EE8  0831               	movf	??_UARTchar+2,w
 12630  1EE9  00A7               	movwf	CheckSum_byte@Odd_Even
 12631  1EEA  319A  229B  319E   	fcall	_CheckSum_byte
 12632  1EED  0020               	movlb	0	; select bank0
 12633  1EEE  00B2               	movwf	??_UARTchar+3
 12634  1EEF  0023               	movlb	3	; select bank3
 12635  1EF0  081E               	movf	30,w	;volatile
 12636  1EF1  0020               	movlb	0	; select bank0
 12637  1EF2  0632               	xorwf	??_UARTchar+3,w
 12638  1EF3  39FE               	andlw	-2
 12639  1EF4  0632               	xorwf	??_UARTchar+3,w
 12640  1EF5  2F13               	goto	L21
 12641  1EF6                     l405:	
 12642                           ;UART.c: 248: case 3:
 12643                           
 12644                           ;UART.c: 247: break;
 12645                           
 12646                           
 12647                           ;UART.c: 249: TXSTAbits.TX9D = 1;
 12648  1EF6  0023               	movlb	3	; select bank3
 12649  1EF7  141E               	bsf	30,0	;volatile
 12650                           
 12651                           ;UART.c: 250: break;
 12652  1EF8  2F15               	goto	l5750
 12653  1EF9                     l406:	
 12654                           ;UART.c: 251: default:
 12655                           
 12656                           
 12657                           ;UART.c: 252: TXSTAbits.TX9D = 0;
 12658  1EF9  0023               	movlb	3	; select bank3
 12659  1EFA  101E               	bcf	30,0	;volatile
 12660                           
 12661                           ;UART.c: 254: }
 12662                           
 12663                           ;UART.c: 253: break;
 12664  1EFB  2F15               	goto	l5750
 12665  1EFC                     l5746:	
 12666  1EFC  0021               	movlb	1	; select bank1
 12667  1EFD  086A               	movf	_PARITY^(0+128),w
 12668                           
 12669                           ; Switch size 1, requested type "space"
 12670                           ; Number of cases is 3, Range of values is 1 to 3
 12671                           ; switch strategies available:
 12672                           ; Name         Instructions Cycles
 12673                           ; simple_byte           10     6 (average)
 12674                           ; direct_byte           15     9 (fixed)
 12675                           ; jumptable            263     9 (fixed)
 12676                           ;	Chosen strategy is simple_byte
 12677  1EFE  3A01               	xorlw	1	; case 1
 12678  1EFF  1903               	skipnz
 12679  1F00  2ED4               	goto	l5740
 12680  1F01  3A03               	xorlw	3	; case 2
 12681  1F02  1903               	skipnz
 12682  1F03  2EDE               	goto	l5742
 12683  1F04  3A01               	xorlw	1	; case 3
 12684  1F05  1903               	skipnz
 12685  1F06  2EF6               	goto	l405
 12686  1F07  2EF9               	goto	l406
 12687                           
 12688                           ;UART.c: 255: }
 12689  1F08  2F15               	goto	l5750
 12690  1F09                     l5748:	
 12691                           
 12692                           ;UART.c: 256: else
 12693                           ;UART.c: 257: {
 12694                           ;UART.c: 258: TXSTAbits.TX9D = (NinethBit_override_data & 0x01);
 12695  1F09  3001               	movlw	1
 12696  1F0A  0020               	movlb	0	; select bank0
 12697  1F0B  052E               	andwf	UARTchar@NinethBit_override_data,w
 12698  1F0C  00AF               	movwf	??_UARTchar
 12699  1F0D  0023               	movlb	3	; select bank3
 12700  1F0E  081E               	movf	30,w	;volatile
 12701  1F0F  0020               	movlb	0	; select bank0
 12702  1F10  062F               	xorwf	??_UARTchar,w
 12703  1F11  39FE               	andlw	-2
 12704  1F12  062F               	xorwf	??_UARTchar,w
 12705  1F13                     L21:	
 12706  1F13  0023               	movlb	3	; select bank3
 12707  1F14  009E               	movwf	30	;volatile
 12708  1F15                     l5750:	
 12709                           
 12710                           ;UART.c: 259: }
 12711                           ;UART.c: 260: }
 12712                           ;UART.c: 262: if(data == '\n')
 12713  1F15  0020               	movlb	0	; select bank0
 12714  1F16  0833               	movf	UARTchar@data,w
 12715  1F17  3A0A               	xorlw	10
 12716  1F18  1D03               	skipz
 12717  1F19  2F26               	goto	l414
 12718                           
 12719                           ;UART.c: 263: {
 12720                           ;UART.c: 264: if(override)
 12721  1F1A  082D               	movf	UARTchar@override,w
 12722  1F1B  1903               	btfsc	3,2
 12723  1F1C  0008               	return
 12724  1F1D                     l410:	
 12725                           ;UART.c: 265: {
 12726                           ;UART.c: 266: while(!TXSTAbits.TRMT);
 12727                           
 12728  1F1D  0023               	movlb	3	; select bank3
 12729  1F1E  1C9E               	btfss	30,1	;volatile
 12730  1F1F  2F1D               	goto	l410
 12731                           
 12732                           ;UART.c: 267: TXREG = data;
 12733  1F20  0020               	movlb	0	; select bank0
 12734  1F21  0833               	movf	UARTchar@data,w
 12735  1F22  0023               	movlb	3	; select bank3
 12736  1F23  009A               	movwf	26	;volatile
 12737  1F24  0020               	movlb	0	; select bank0
 12738  1F25  0008               	return
 12739  1F26                     l414:	
 12740                           ;UART.c: 270: else
 12741                           ;UART.c: 271: {
 12742                           ;UART.c: 272: while(!TXSTAbits.TRMT);
 12743                           
 12744                           ;UART.c: 268: }
 12745                           ;UART.c: 269: }
 12746                           
 12747  1F26  0023               	movlb	3	; select bank3
 12748  1F27  1C9E               	btfss	30,1	;volatile
 12749  1F28  2F26               	goto	l414
 12750                           
 12751                           ;UART.c: 273: TXREG = data;
 12752  1F29  0020               	movlb	0	; select bank0
 12753  1F2A  0833               	movf	UARTchar@data,w
 12754  1F2B  0023               	movlb	3	; select bank3
 12755  1F2C  009A               	movwf	26	;volatile
 12756  1F2D  0020               	movlb	0	; select bank0
 12757  1F2E  0008               	return
 12758  1F2F                     __end_of_UARTchar:	
 12759                           
 12760                           	psect	text31
 12761  1E66                     __ptext31:	
 12762 ;; *************** function _ReadBaud *****************
 12763 ;; Defined at:
 12764 ;;		line 187 in file "FLASH.c"
 12765 ;; Parameters:    Size  Location     Type
 12766 ;;  row             2   23[BANK0 ] unsigned int 
 12767 ;;  column          1   25[BANK0 ] unsigned char 
 12768 ;; Auto vars:     Size  Location     Type
 12769 ;;  temp            4   35[BANK0 ] unsigned long 
 12770 ;; Return value:  Size  Location     Type
 12771 ;;                  4   23[BANK0 ] unsigned long 
 12772 ;; Registers used:
 12773 ;;		wreg, status,2, status,0, pclath, cstack
 12774 ;; Tracked objects:
 12775 ;;		On entry : 0/0
 12776 ;;		On exit  : 0/0
 12777 ;;		Unchanged: 0/0
 12778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12779 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12780 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12781 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12782 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12783 ;;Total ram usage:       16 bytes
 12784 ;; Hardware stack levels used:    1
 12785 ;; Hardware stack levels required when called:    5
 12786 ;; This function calls:
 12787 ;;		_ReadFlash_4Byte
 12788 ;; This function is called by:
 12789 ;;		_Init_System
 12790 ;;		_SetBaud
 12791 ;; This function uses a non-reentrant model
 12792 ;;
 12793                           
 12794                           
 12795                           ;psect for function _ReadBaud
 12796  1E66                     _ReadBaud:	
 12797                           
 12798                           ;FLASH.c: 189: unsigned long temp;
 12799                           ;FLASH.c: 190: temp =(ReadFlash_4Byte(row, column));
 12800                           
 12801                           ;incstack = 0
 12802                           ; Regs used in _ReadBaud: [wreg+status,2+status,0+pclath+cstack]
 12803  1E66  0020               	movlb	0	; select bank0
 12804  1E67  0838               	movf	ReadBaud@row+1,w
 12805  1E68  01AB               	clrf	ReadFlash_4Byte@row+1
 12806  1E69  07AB               	addwf	ReadFlash_4Byte@row+1,f
 12807  1E6A  0837               	movf	ReadBaud@row,w
 12808  1E6B  01AA               	clrf	ReadFlash_4Byte@row
 12809  1E6C  07AA               	addwf	ReadFlash_4Byte@row,f
 12810  1E6D  0839               	movf	ReadBaud@column,w
 12811  1E6E  00BB               	movwf	??_ReadBaud
 12812  1E6F  083B               	movf	??_ReadBaud,w
 12813  1E70  00AC               	movwf	ReadFlash_4Byte@column
 12814  1E71  319C  245B  319E   	fcall	_ReadFlash_4Byte
 12815  1E74  0020               	movlb	0	; select bank0
 12816  1E75  082D               	movf	?_ReadFlash_4Byte+3,w
 12817  1E76  00C6               	movwf	ReadBaud@temp+3
 12818  1E77  082C               	movf	?_ReadFlash_4Byte+2,w
 12819  1E78  00C5               	movwf	ReadBaud@temp+2
 12820  1E79  082B               	movf	?_ReadFlash_4Byte+1,w
 12821  1E7A  00C4               	movwf	ReadBaud@temp+1
 12822  1E7B  082A               	movf	?_ReadFlash_4Byte,w
 12823  1E7C  00C3               	movwf	ReadBaud@temp
 12824                           
 12825                           ;FLASH.c: 191: MEM[1] = (unsigned int)(temp & 0x0003FFF);
 12826  1E7D  30FF               	movlw	255
 12827  1E7E  0543               	andwf	ReadBaud@temp,w
 12828  1E7F  0024               	movlb	4	; select bank4
 12829  1E80  00A8               	movwf	(_MEM^(0+512)+2)
 12830  1E81  303F               	movlw	63
 12831  1E82  0020               	movlb	0	; select bank0
 12832  1E83  0544               	andwf	ReadBaud@temp+1,w
 12833  1E84  0024               	movlb	4	; select bank4
 12834  1E85  00A9               	movwf	((_MEM+1)^(0+512)+2)
 12835                           
 12836                           ;FLASH.c: 192: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
 12837  1E86  0020               	movlb	0	; select bank0
 12838  1E87  0843               	movf	ReadBaud@temp,w
 12839  1E88  00BB               	movwf	??_ReadBaud
 12840  1E89  0844               	movf	ReadBaud@temp+1,w
 12841  1E8A  00BC               	movwf	??_ReadBaud+1
 12842  1E8B  0845               	movf	ReadBaud@temp+2,w
 12843  1E8C  00BD               	movwf	??_ReadBaud+2
 12844  1E8D  0846               	movf	ReadBaud@temp+3,w
 12845  1E8E  00BE               	movwf	??_ReadBaud+3
 12846  1E8F  300E               	movlw	14
 12847  1E90                     u7875:	
 12848  1E90  36BE               	lsrf	??_ReadBaud+3,f
 12849  1E91  0CBD               	rrf	??_ReadBaud+2,f
 12850  1E92  0CBC               	rrf	??_ReadBaud+1,f
 12851  1E93  0CBB               	rrf	??_ReadBaud,f
 12852  1E94  0B89               	decfsz	9,f
 12853  1E95  2E90               	goto	u7875
 12854  1E96  30FF               	movlw	255
 12855  1E97  053B               	andwf	??_ReadBaud,w
 12856  1E98  0024               	movlb	4	; select bank4
 12857  1E99  00A6               	movwf	_MEM^(0+512)
 12858  1E9A  303F               	movlw	63
 12859  1E9B  0020               	movlb	0	; select bank0
 12860  1E9C  053C               	andwf	??_ReadBaud+1,w
 12861  1E9D  0024               	movlb	4	; select bank4
 12862  1E9E  00A7               	movwf	(_MEM+1)^(0+512)
 12863                           
 12864                           ;FLASH.c: 193: return (((unsigned long)MEM[0] << 12) + (unsigned long)MEM[1]);
 12865  1E9F  0828               	movf	(_MEM^(0+512)+2),w
 12866  1EA0  0020               	movlb	0	; select bank0
 12867  1EA1  00BB               	movwf	??_ReadBaud
 12868  1EA2  0024               	movlb	4	; select bank4
 12869  1EA3  0829               	movf	((_MEM+1)^(0+512)+2),w
 12870  1EA4  0020               	movlb	0	; select bank0
 12871  1EA5  00BC               	movwf	??_ReadBaud+1
 12872  1EA6  01BD               	clrf	??_ReadBaud+2
 12873  1EA7  01BE               	clrf	??_ReadBaud+3
 12874  1EA8  0024               	movlb	4	; select bank4
 12875  1EA9  0826               	movf	_MEM^(0+512),w
 12876  1EAA  0020               	movlb	0	; select bank0
 12877  1EAB  00BF               	movwf	??_ReadBaud+4
 12878  1EAC  0024               	movlb	4	; select bank4
 12879  1EAD  0827               	movf	(_MEM+1)^(0+512),w
 12880  1EAE  0020               	movlb	0	; select bank0
 12881  1EAF  00C0               	movwf	??_ReadBaud+5
 12882  1EB0  01C1               	clrf	??_ReadBaud+6
 12883  1EB1  01C2               	clrf	??_ReadBaud+7
 12884  1EB2  300C               	movlw	12
 12885  1EB3                     u7885:	
 12886  1EB3  35BF               	lslf	??_ReadBaud+4,f
 12887  1EB4  0DC0               	rlf	??_ReadBaud+5,f
 12888  1EB5  0DC1               	rlf	??_ReadBaud+6,f
 12889  1EB6  0DC2               	rlf	??_ReadBaud+7,f
 12890  1EB7  0B89               	decfsz	9,f
 12891  1EB8  2EB3               	goto	u7885
 12892  1EB9  083F               	movf	??_ReadBaud+4,w
 12893  1EBA  07BB               	addwf	??_ReadBaud,f
 12894  1EBB  0840               	movf	??_ReadBaud+5,w
 12895  1EBC  3DBC               	addwfc	??_ReadBaud+1,f
 12896  1EBD  0841               	movf	??_ReadBaud+6,w
 12897  1EBE  3DBD               	addwfc	??_ReadBaud+2,f
 12898  1EBF  0842               	movf	??_ReadBaud+7,w
 12899  1EC0  3DBE               	addwfc	??_ReadBaud+3,f
 12900  1EC1  083E               	movf	??_ReadBaud+3,w
 12901  1EC2  00BA               	movwf	?_ReadBaud+3
 12902  1EC3  083D               	movf	??_ReadBaud+2,w
 12903  1EC4  00B9               	movwf	?_ReadBaud+2
 12904  1EC5  083C               	movf	??_ReadBaud+1,w
 12905  1EC6  00B8               	movwf	?_ReadBaud+1
 12906  1EC7  083B               	movf	??_ReadBaud,w
 12907  1EC8  00B7               	movwf	?_ReadBaud
 12908  1EC9  0008               	return
 12909  1ECA                     __end_of_ReadBaud:	
 12910                           
 12911                           	psect	text32
 12912  1C5B                     __ptext32:	
 12913 ;; *************** function _ReadFlash_4Byte *****************
 12914 ;; Defined at:
 12915 ;;		line 62 in file "FLASH.c"
 12916 ;; Parameters:    Size  Location     Type
 12917 ;;  row             2   10[BANK0 ] unsigned int 
 12918 ;;  column          1   12[BANK0 ] unsigned char 
 12919 ;; Auto vars:     Size  Location     Type
 12920 ;;  temp            4   19[BANK0 ] unsigned long 
 12921 ;; Return value:  Size  Location     Type
 12922 ;;                  4   10[BANK0 ] unsigned long 
 12923 ;; Registers used:
 12924 ;;		wreg, status,2, status,0, pclath, cstack
 12925 ;; Tracked objects:
 12926 ;;		On entry : 0/0
 12927 ;;		On exit  : 0/0
 12928 ;;		Unchanged: 0/0
 12929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12930 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12931 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12932 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12933 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12934 ;;Total ram usage:       13 bytes
 12935 ;; Hardware stack levels used:    1
 12936 ;; Hardware stack levels required when called:    4
 12937 ;; This function calls:
 12938 ;;		_ReadFlash_2Byte
 12939 ;; This function is called by:
 12940 ;;		_ReadBaud
 12941 ;; This function uses a non-reentrant model
 12942 ;;
 12943                           
 12944                           
 12945                           ;psect for function _ReadFlash_4Byte
 12946  1C5B                     _ReadFlash_4Byte:	
 12947                           
 12948                           ;FLASH.c: 64: unsigned long temp =0;
 12949                           
 12950                           ;incstack = 0
 12951                           ; Regs used in _ReadFlash_4Byte: [wreg+status,2+status,0+pclath+cstack]
 12952  1C5B  3000               	movlw	0
 12953  1C5C  0020               	movlb	0	; select bank0
 12954  1C5D  00B6               	movwf	ReadFlash_4Byte@temp+3
 12955  1C5E  3000               	movlw	0
 12956  1C5F  00B5               	movwf	ReadFlash_4Byte@temp+2
 12957  1C60  3000               	movlw	0
 12958  1C61  00B4               	movwf	ReadFlash_4Byte@temp+1
 12959  1C62  3000               	movlw	0
 12960  1C63  00B3               	movwf	ReadFlash_4Byte@temp
 12961                           
 12962                           ;FLASH.c: 65: temp = ((unsigned long)ReadFlash_2Byte(row, column) << 16);
 12963  1C64  082B               	movf	ReadFlash_4Byte@row+1,w
 12964  1C65  01A6               	clrf	ReadFlash_2Byte@row+1
 12965  1C66  07A6               	addwf	ReadFlash_2Byte@row+1,f
 12966  1C67  082A               	movf	ReadFlash_4Byte@row,w
 12967  1C68  01A5               	clrf	ReadFlash_2Byte@row
 12968  1C69  07A5               	addwf	ReadFlash_2Byte@row,f
 12969  1C6A  082C               	movf	ReadFlash_4Byte@column,w
 12970  1C6B  00AE               	movwf	??_ReadFlash_4Byte
 12971  1C6C  082E               	movf	??_ReadFlash_4Byte,w
 12972  1C6D  00A7               	movwf	ReadFlash_2Byte@column
 12973  1C6E  319A  22FD  319C   	fcall	_ReadFlash_2Byte
 12974  1C71  0020               	movlb	0	; select bank0
 12975  1C72  0825               	movf	?_ReadFlash_2Byte,w
 12976  1C73  00AF               	movwf	??_ReadFlash_4Byte+1
 12977  1C74  0826               	movf	?_ReadFlash_2Byte+1,w
 12978  1C75  00B0               	movwf	??_ReadFlash_4Byte+2
 12979  1C76  01B1               	clrf	??_ReadFlash_4Byte+3
 12980  1C77  01B2               	clrf	??_ReadFlash_4Byte+4
 12981  1C78  3010               	movlw	16
 12982  1C79                     u7625:	
 12983  1C79  35AF               	lslf	??_ReadFlash_4Byte+1,f
 12984  1C7A  0DB0               	rlf	??_ReadFlash_4Byte+2,f
 12985  1C7B  0DB1               	rlf	??_ReadFlash_4Byte+3,f
 12986  1C7C  0DB2               	rlf	??_ReadFlash_4Byte+4,f
 12987  1C7D  0B89               	decfsz	9,f
 12988  1C7E  2C79               	goto	u7625
 12989  1C7F  0832               	movf	??_ReadFlash_4Byte+4,w
 12990  1C80  00B6               	movwf	ReadFlash_4Byte@temp+3
 12991  1C81  0831               	movf	??_ReadFlash_4Byte+3,w
 12992  1C82  00B5               	movwf	ReadFlash_4Byte@temp+2
 12993  1C83  0830               	movf	??_ReadFlash_4Byte+2,w
 12994  1C84  00B4               	movwf	ReadFlash_4Byte@temp+1
 12995  1C85  082F               	movf	??_ReadFlash_4Byte+1,w
 12996  1C86  00B3               	movwf	ReadFlash_4Byte@temp
 12997                           
 12998                           ;FLASH.c: 66: temp |= ((unsigned long)ReadFlash_2Byte(row, (column + 1)));
 12999  1C87  082B               	movf	ReadFlash_4Byte@row+1,w
 13000  1C88  01A6               	clrf	ReadFlash_2Byte@row+1
 13001  1C89  07A6               	addwf	ReadFlash_2Byte@row+1,f
 13002  1C8A  082A               	movf	ReadFlash_4Byte@row,w
 13003  1C8B  01A5               	clrf	ReadFlash_2Byte@row
 13004  1C8C  07A5               	addwf	ReadFlash_2Byte@row,f
 13005  1C8D  082C               	movf	ReadFlash_4Byte@column,w
 13006  1C8E  3E01               	addlw	1
 13007  1C8F  00AE               	movwf	??_ReadFlash_4Byte
 13008  1C90  082E               	movf	??_ReadFlash_4Byte,w
 13009  1C91  00A7               	movwf	ReadFlash_2Byte@column
 13010  1C92  319A  22FD         	fcall	_ReadFlash_2Byte
 13011  1C94  0020               	movlb	0	; select bank0
 13012  1C95  0825               	movf	?_ReadFlash_2Byte,w
 13013  1C96  00AF               	movwf	??_ReadFlash_4Byte+1
 13014  1C97  0826               	movf	?_ReadFlash_2Byte+1,w
 13015  1C98  00B0               	movwf	??_ReadFlash_4Byte+2
 13016  1C99  01B1               	clrf	??_ReadFlash_4Byte+3
 13017  1C9A  01B2               	clrf	??_ReadFlash_4Byte+4
 13018  1C9B  082F               	movf	??_ReadFlash_4Byte+1,w
 13019  1C9C  04B3               	iorwf	ReadFlash_4Byte@temp,f
 13020  1C9D  0830               	movf	??_ReadFlash_4Byte+2,w
 13021  1C9E  04B4               	iorwf	ReadFlash_4Byte@temp+1,f
 13022  1C9F  0831               	movf	??_ReadFlash_4Byte+3,w
 13023  1CA0  04B5               	iorwf	ReadFlash_4Byte@temp+2,f
 13024  1CA1  0832               	movf	??_ReadFlash_4Byte+4,w
 13025  1CA2  04B6               	iorwf	ReadFlash_4Byte@temp+3,f
 13026                           
 13027                           ;FLASH.c: 67: return temp;
 13028  1CA3  0836               	movf	ReadFlash_4Byte@temp+3,w
 13029  1CA4  00AD               	movwf	?_ReadFlash_4Byte+3
 13030  1CA5  0835               	movf	ReadFlash_4Byte@temp+2,w
 13031  1CA6  00AC               	movwf	?_ReadFlash_4Byte+2
 13032  1CA7  0834               	movf	ReadFlash_4Byte@temp+1,w
 13033  1CA8  00AB               	movwf	?_ReadFlash_4Byte+1
 13034  1CA9  0833               	movf	ReadFlash_4Byte@temp,w
 13035  1CAA  00AA               	movwf	?_ReadFlash_4Byte
 13036  1CAB  0008               	return
 13037  1CAC                     __end_of_ReadFlash_4Byte:	
 13038                           
 13039                           	psect	text33
 13040  1AFD                     __ptext33:	
 13041 ;; *************** function _ReadFlash_2Byte *****************
 13042 ;; Defined at:
 13043 ;;		line 43 in file "FLASH.c"
 13044 ;; Parameters:    Size  Location     Type
 13045 ;;  row             2    5[BANK0 ] unsigned int 
 13046 ;;  column          1    7[BANK0 ] unsigned char 
 13047 ;; Auto vars:     Size  Location     Type
 13048 ;;		None
 13049 ;; Return value:  Size  Location     Type
 13050 ;;                  2    5[BANK0 ] unsigned int 
 13051 ;; Registers used:
 13052 ;;		wreg, status,2, status,0
 13053 ;; Tracked objects:
 13054 ;;		On entry : 0/0
 13055 ;;		On exit  : 0/0
 13056 ;;		Unchanged: 0/0
 13057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13058 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13060 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13061 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13062 ;;Total ram usage:        5 bytes
 13063 ;; Hardware stack levels used:    1
 13064 ;; Hardware stack levels required when called:    3
 13065 ;; This function calls:
 13066 ;;		Nothing
 13067 ;; This function is called by:
 13068 ;;		_ReadFlash_4Byte
 13069 ;;		_WriteFlash_Sequential
 13070 ;; This function uses a non-reentrant model
 13071 ;;
 13072                           
 13073                           
 13074                           ;psect for function _ReadFlash_2Byte
 13075  1AFD                     _ReadFlash_2Byte:	
 13076                           
 13077                           ;FLASH.c: 45: PMCON1 &= ~0b01000000;
 13078                           
 13079                           ;incstack = 0
 13080                           ; Regs used in _ReadFlash_2Byte: [wreg+status,2+status,0]
 13081  1AFD  30BF               	movlw	191
 13082  1AFE  0020               	movlb	0	; select bank0
 13083  1AFF  00A8               	movwf	??_ReadFlash_2Byte
 13084  1B00  0828               	movf	??_ReadFlash_2Byte,w
 13085  1B01  0023               	movlb	3	; select bank3
 13086  1B02  0595               	andwf	21,f	;volatile
 13087                           
 13088                           ;FLASH.c: 46: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 13089  1B03  0020               	movlb	0	; select bank0
 13090  1B04  0826               	movf	ReadFlash_2Byte@row+1,w
 13091  1B05  00A9               	movwf	??_ReadFlash_2Byte+1
 13092  1B06  0825               	movf	ReadFlash_2Byte@row,w
 13093  1B07  00A8               	movwf	??_ReadFlash_2Byte
 13094  1B08  36A9               	lsrf	??_ReadFlash_2Byte+1,f
 13095  1B09  0CA8               	rrf	??_ReadFlash_2Byte,f
 13096  1B0A  36A9               	lsrf	??_ReadFlash_2Byte+1,f
 13097  1B0B  0CA8               	rrf	??_ReadFlash_2Byte,f
 13098  1B0C  36A9               	lsrf	??_ReadFlash_2Byte+1,f
 13099  1B0D  0CA8               	rrf	??_ReadFlash_2Byte,f
 13100  1B0E  0828               	movf	??_ReadFlash_2Byte,w
 13101  1B0F  397F               	andlw	127
 13102  1B10  0023               	movlb	3	; select bank3
 13103  1B11  0092               	movwf	18	;volatile
 13104                           
 13105                           ;FLASH.c: 47: PMADRL = (unsigned char)(((row & 0x007) << 5) + column);
 13106  1B12  0020               	movlb	0	; select bank0
 13107  1B13  0825               	movf	ReadFlash_2Byte@row,w
 13108  1B14  3907               	andlw	7
 13109  1B15  00A8               	movwf	??_ReadFlash_2Byte
 13110  1B16  3004               	movlw	4
 13111  1B17                     u7455:	
 13112  1B17  35A8               	lslf	??_ReadFlash_2Byte,f
 13113  1B18  3EFF               	addlw	-1
 13114  1B19  1D03               	skipz
 13115  1B1A  2B17               	goto	u7455
 13116  1B1B  3528               	lslf	??_ReadFlash_2Byte,w
 13117  1B1C  0727               	addwf	ReadFlash_2Byte@column,w
 13118  1B1D  0023               	movlb	3	; select bank3
 13119  1B1E  0091               	movwf	17	;volatile
 13120                           
 13121                           ;FLASH.c: 48: PMCON1 |= 0b00000001;
 13122  1B1F  1415               	bsf	21,0	;volatile
 13123  1B20                     l916:	
 13124                           ;FLASH.c: 49: while(PMCON1 & 0b00000001);
 13125                           
 13126  1B20  1815               	btfsc	21,0	;volatile
 13127  1B21  2B20               	goto	l916
 13128                           
 13129                           ;FLASH.c: 50: __nop();
 13130  1B22  0000               	nop
 13131                           
 13132                           ;FLASH.c: 51: __nop();
 13133  1B23  0000               	nop
 13134                           
 13135                           ;FLASH.c: 52: return (PMDATL | (PMDATH << 8));
 13136  1B24  0023               	movlb	3	; select bank3
 13137  1B25  0814               	movf	20,w	;volatile
 13138  1B26  0020               	movlb	0	; select bank0
 13139  1B27  01A6               	clrf	?_ReadFlash_2Byte+1
 13140  1B28  07A6               	addwf	?_ReadFlash_2Byte+1,f
 13141  1B29  0023               	movlb	3	; select bank3
 13142  1B2A  0813               	movf	19,w	;volatile
 13143  1B2B  0020               	movlb	0	; select bank0
 13144  1B2C  01A5               	clrf	?_ReadFlash_2Byte
 13145  1B2D  07A5               	addwf	?_ReadFlash_2Byte,f
 13146  1B2E  0008               	return
 13147  1B2F                     __end_of_ReadFlash_2Byte:	
 13148                           
 13149                           	psect	text34
 13150  11CA                     __ptext34:	
 13151 ;; *************** function _InitUART *****************
 13152 ;; Defined at:
 13153 ;;		line 73 in file "UART.c"
 13154 ;; Parameters:    Size  Location     Type
 13155 ;;  Baud            4   19[BANK0 ] unsigned long 
 13156 ;;  parity          1   23[BANK0 ] unsigned char 
 13157 ;; Auto vars:     Size  Location     Type
 13158 ;;  temp            4   36[BANK0 ] unsigned long 
 13159 ;;  spbrg           2   32[BANK0 ] unsigned int 
 13160 ;;  config          1   35[BANK0 ] unsigned char 
 13161 ;;  baudconfig      1   34[BANK0 ] unsigned char 
 13162 ;; Return value:  Size  Location     Type
 13163 ;;		None               void
 13164 ;; Registers used:
 13165 ;;		wreg, status,2, status,0, pclath, cstack
 13166 ;; Tracked objects:
 13167 ;;		On entry : 0/0
 13168 ;;		On exit  : 0/0
 13169 ;;		Unchanged: 0/0
 13170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13171 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13172 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13173 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13174 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13175 ;;Total ram usage:       21 bytes
 13176 ;; Hardware stack levels used:    1
 13177 ;; Hardware stack levels required when called:    4
 13178 ;; This function calls:
 13179 ;;		_CloseUSART
 13180 ;;		_OpenUSART
 13181 ;;		_ReadUSART
 13182 ;;		___lldiv
 13183 ;;		_baudUSART
 13184 ;; This function is called by:
 13185 ;;		_Init_System
 13186 ;;		_SetBaud
 13187 ;; This function uses a non-reentrant model
 13188 ;;
 13189                           
 13190                           
 13191                           ;psect for function _InitUART
 13192  11CA                     _InitUART:	
 13193                           
 13194                           ;UART.c: 75: unsigned long temp;
 13195                           ;UART.c: 76: unsigned char config;
 13196                           ;UART.c: 77: unsigned int spbrg;
 13197                           ;UART.c: 78: unsigned char baudconfig;
 13198                           ;UART.c: 88: LATC |= 0b00000100;
 13199                           
 13200                           ;incstack = 0
 13201                           ; Regs used in _InitUART: [wreg+status,2+status,0+pclath+cstack]
 13202  11CA  0022               	movlb	2	; select bank2
 13203  11CB  150E               	bsf	14,2	;volatile
 13204                           
 13205                           ;UART.c: 89: PPSLOCK =0;
 13206  11CC  003C               	movlb	28	; select bank28
 13207  11CD  018F               	clrf	15	;volatile
 13208                           
 13209                           ;UART.c: 90: RC2PPS = 0b00000000;
 13210  11CE  003D               	movlb	29	; select bank29
 13211  11CF  01A2               	clrf	34	;volatile
 13212                           
 13213                           ;UART.c: 91: PPSLOCK =1;
 13214  11D0  3001               	movlw	1
 13215  11D1  003C               	movlb	28	; select bank28
 13216  11D2  008F               	movwf	15	;volatile
 13217                           
 13218                           ;UART.c: 93: CloseUSART();
 13219  11D3  3198  20FB  3191   	fcall	_CloseUSART
 13220                           
 13221                           ;UART.c: 94: config =0;
 13222  11D6  0020               	movlb	0	; select bank0
 13223  11D7  01C3               	clrf	InitUART@config
 13224                           
 13225                           ;UART.c: 95: baudconfig =0;
 13226  11D8  01C2               	clrf	InitUART@baudconfig
 13227                           
 13228                           ;UART.c: 100: config |= 0b01000000;
 13229  11D9  1743               	bsf	InitUART@config,6
 13230                           
 13231                           ;UART.c: 103: config |= 0b00001000;
 13232  11DA  15C3               	bsf	InitUART@config,3
 13233                           
 13234                           ;UART.c: 104: config |= 0b00010000;
 13235  11DB  1643               	bsf	InitUART@config,4
 13236                           
 13237                           ;UART.c: 105: PARITY = parity;
 13238  11DC  0837               	movf	InitUART@parity,w
 13239  11DD  00B8               	movwf	??_InitUART
 13240  11DE  0838               	movf	??_InitUART,w
 13241  11DF  0021               	movlb	1	; select bank1
 13242  11E0  00EA               	movwf	_PARITY^(0+128)
 13243                           
 13244                           ;UART.c: 106: BAUD = Baud;
 13245  11E1  0020               	movlb	0	; select bank0
 13246  11E2  0836               	movf	InitUART@Baud+3,w
 13247  11E3  0024               	movlb	4	; select bank4
 13248  11E4  00A3               	movwf	(_BAUD+3)^(0+512)
 13249  11E5  0020               	movlb	0	; select bank0
 13250  11E6  0835               	movf	InitUART@Baud+2,w
 13251  11E7  0024               	movlb	4	; select bank4
 13252  11E8  00A2               	movwf	(_BAUD+2)^(0+512)
 13253  11E9  0020               	movlb	0	; select bank0
 13254  11EA  0834               	movf	InitUART@Baud+1,w
 13255  11EB  0024               	movlb	4	; select bank4
 13256  11EC  00A1               	movwf	(_BAUD+1)^(0+512)
 13257  11ED  0020               	movlb	0	; select bank0
 13258  11EE  0833               	movf	InitUART@Baud,w
 13259  11EF  0024               	movlb	4	; select bank4
 13260  11F0  00A0               	movwf	_BAUD^(0+512)
 13261                           
 13262                           ;UART.c: 107: if(parity)
 13263  11F1  0020               	movlb	0	; select bank0
 13264  11F2  0837               	movf	InitUART@parity,w
 13265  11F3  1903               	btfsc	3,2
 13266  11F4  29F7               	goto	l6004
 13267                           
 13268                           ;UART.c: 108: {
 13269                           ;UART.c: 109: config |= 0b00000010;
 13270  11F5  14C3               	bsf	InitUART@config,1
 13271                           
 13272                           ;UART.c: 110: }
 13273  11F6  29FB               	goto	l6006
 13274  11F7                     l6004:	
 13275                           
 13276                           ;UART.c: 111: else
 13277                           ;UART.c: 112: {
 13278                           ;UART.c: 113: config &= ~0b00000010;
 13279  11F7  30FD               	movlw	253
 13280  11F8  00B8               	movwf	??_InitUART
 13281  11F9  0838               	movf	??_InitUART,w
 13282  11FA  05C3               	andwf	InitUART@config,f
 13283  11FB                     l6006:	
 13284                           
 13285                           ;UART.c: 114: }
 13286                           ;UART.c: 115: baudconfig |= 0b00001000;
 13287  11FB  15C2               	bsf	InitUART@baudconfig,3
 13288                           
 13289                           ;UART.c: 118: temp = (32000000L / Baud) - 1;
 13290  11FC  0836               	movf	InitUART@Baud+3,w
 13291  11FD  00A8               	movwf	___lldiv@divisor+3
 13292  11FE  0835               	movf	InitUART@Baud+2,w
 13293  11FF  00A7               	movwf	___lldiv@divisor+2
 13294  1200  0834               	movf	InitUART@Baud+1,w
 13295  1201  00A6               	movwf	___lldiv@divisor+1
 13296  1202  0833               	movf	InitUART@Baud,w
 13297  1203  00A5               	movwf	___lldiv@divisor
 13298  1204  3001               	movlw	1
 13299  1205  00AC               	movwf	___lldiv@dividend+3
 13300  1206  30E8               	movlw	232
 13301  1207  00AB               	movwf	___lldiv@dividend+2
 13302  1208  3048               	movlw	72
 13303  1209  00AA               	movwf	___lldiv@dividend+1
 13304  120A  3000               	movlw	0
 13305  120B  00A9               	movwf	___lldiv@dividend
 13306  120C  319C  24AC  3191   	fcall	___lldiv
 13307  120F  30FF               	movlw	255
 13308  1210  0020               	movlb	0	; select bank0
 13309  1211  0725               	addwf	?___lldiv,w
 13310  1212  00C4               	movwf	InitUART@temp
 13311  1213  30FF               	movlw	255
 13312  1214  3D26               	addwfc	?___lldiv+1,w
 13313  1215  00C5               	movwf	InitUART@temp+1
 13314  1216  30FF               	movlw	255
 13315  1217  3D27               	addwfc	?___lldiv+2,w
 13316  1218  00C6               	movwf	InitUART@temp+2
 13317  1219  30FF               	movlw	255
 13318  121A  3D28               	addwfc	?___lldiv+3,w
 13319  121B  00C7               	movwf	InitUART@temp+3
 13320                           
 13321                           ;UART.c: 119: temp = (temp >> 2) - 1;
 13322  121C  30FF               	movlw	255
 13323  121D  00B8               	movwf	??_InitUART
 13324  121E  30FF               	movlw	255
 13325  121F  00B9               	movwf	??_InitUART+1
 13326  1220  30FF               	movlw	255
 13327  1221  00BA               	movwf	??_InitUART+2
 13328  1222  30FF               	movlw	255
 13329  1223  00BB               	movwf	??_InitUART+3
 13330  1224  0844               	movf	InitUART@temp,w
 13331  1225  00BC               	movwf	??_InitUART+4
 13332  1226  0845               	movf	InitUART@temp+1,w
 13333  1227  00BD               	movwf	??_InitUART+5
 13334  1228  0846               	movf	InitUART@temp+2,w
 13335  1229  00BE               	movwf	??_InitUART+6
 13336  122A  0847               	movf	InitUART@temp+3,w
 13337  122B  00BF               	movwf	??_InitUART+7
 13338  122C  3002               	movlw	2
 13339  122D                     u7905:	
 13340  122D  36BF               	lsrf	??_InitUART+7,f
 13341  122E  0CBE               	rrf	??_InitUART+6,f
 13342  122F  0CBD               	rrf	??_InitUART+5,f
 13343  1230  0CBC               	rrf	??_InitUART+4,f
 13344  1231  0B89               	decfsz	9,f
 13345  1232  2A2D               	goto	u7905
 13346  1233  083C               	movf	??_InitUART+4,w
 13347  1234  07B8               	addwf	??_InitUART,f
 13348  1235  083D               	movf	??_InitUART+5,w
 13349  1236  3DB9               	addwfc	??_InitUART+1,f
 13350  1237  083E               	movf	??_InitUART+6,w
 13351  1238  3DBA               	addwfc	??_InitUART+2,f
 13352  1239  083F               	movf	??_InitUART+7,w
 13353  123A  3DBB               	addwfc	??_InitUART+3,f
 13354  123B  083B               	movf	??_InitUART+3,w
 13355  123C  00C7               	movwf	InitUART@temp+3
 13356  123D  083A               	movf	??_InitUART+2,w
 13357  123E  00C6               	movwf	InitUART@temp+2
 13358  123F  0839               	movf	??_InitUART+1,w
 13359  1240  00C5               	movwf	InitUART@temp+1
 13360  1241  0838               	movf	??_InitUART,w
 13361  1242  00C4               	movwf	InitUART@temp
 13362                           
 13363                           ;UART.c: 120: spbrg = (unsigned int)temp;
 13364  1243  0845               	movf	InitUART@temp+1,w
 13365  1244  01C1               	clrf	InitUART@spbrg+1
 13366  1245  07C1               	addwf	InitUART@spbrg+1,f
 13367  1246  0844               	movf	InitUART@temp,w
 13368  1247  01C0               	clrf	InitUART@spbrg
 13369  1248  07C0               	addwf	InitUART@spbrg,f
 13370                           
 13371                           ;UART.c: 122: RCSTAbits.CREN = 0;
 13372  1249  0023               	movlb	3	; select bank3
 13373  124A  121D               	bcf	29,4	;volatile
 13374                           
 13375                           ;UART.c: 123: OpenUSART(config, spbrg);
 13376  124B  0020               	movlb	0	; select bank0
 13377  124C  0841               	movf	InitUART@spbrg+1,w
 13378  124D  01A6               	clrf	OpenUSART@spbrg+1
 13379  124E  07A6               	addwf	OpenUSART@spbrg+1,f
 13380  124F  0840               	movf	InitUART@spbrg,w
 13381  1250  01A5               	clrf	OpenUSART@spbrg
 13382  1251  07A5               	addwf	OpenUSART@spbrg,f
 13383  1252  0843               	movf	InitUART@config,w
 13384  1253  319B  2395  3191   	fcall	_OpenUSART
 13385                           
 13386                           ;UART.c: 124: baudUSART(baudconfig);
 13387  1256  0020               	movlb	0	; select bank0
 13388  1257  0842               	movf	InitUART@baudconfig,w
 13389  1258  3198  20BB  3191   	fcall	_baudUSART
 13390                           
 13391                           ;UART.c: 125: temp = ReadUSART();
 13392  125B  3198  20C4  3191   	fcall	_ReadUSART
 13393  125E  0020               	movlb	0	; select bank0
 13394  125F  00B8               	movwf	??_InitUART
 13395  1260  01B9               	clrf	??_InitUART+1
 13396  1261  01BA               	clrf	??_InitUART+2
 13397  1262  01BB               	clrf	??_InitUART+3
 13398  1263  083B               	movf	??_InitUART+3,w
 13399  1264  00C7               	movwf	InitUART@temp+3
 13400  1265  083A               	movf	??_InitUART+2,w
 13401  1266  00C6               	movwf	InitUART@temp+2
 13402  1267  0839               	movf	??_InitUART+1,w
 13403  1268  00C5               	movwf	InitUART@temp+1
 13404  1269  0838               	movf	??_InitUART,w
 13405  126A  00C4               	movwf	InitUART@temp
 13406                           
 13407                           ;UART.c: 126: temp = ReadUSART();
 13408  126B  3198  20C4  3191   	fcall	_ReadUSART
 13409  126E  0020               	movlb	0	; select bank0
 13410  126F  00B8               	movwf	??_InitUART
 13411  1270  01B9               	clrf	??_InitUART+1
 13412  1271  01BA               	clrf	??_InitUART+2
 13413  1272  01BB               	clrf	??_InitUART+3
 13414  1273  083B               	movf	??_InitUART+3,w
 13415  1274  00C7               	movwf	InitUART@temp+3
 13416  1275  083A               	movf	??_InitUART+2,w
 13417  1276  00C6               	movwf	InitUART@temp+2
 13418  1277  0839               	movf	??_InitUART+1,w
 13419  1278  00C5               	movwf	InitUART@temp+1
 13420  1279  0838               	movf	??_InitUART,w
 13421  127A  00C4               	movwf	InitUART@temp
 13422                           
 13423                           ;UART.c: 127: temp = ReadUSART();
 13424  127B  3198  20C4  3191   	fcall	_ReadUSART
 13425  127E  0020               	movlb	0	; select bank0
 13426  127F  00B8               	movwf	??_InitUART
 13427  1280  01B9               	clrf	??_InitUART+1
 13428  1281  01BA               	clrf	??_InitUART+2
 13429  1282  01BB               	clrf	??_InitUART+3
 13430  1283  083B               	movf	??_InitUART+3,w
 13431  1284  00C7               	movwf	InitUART@temp+3
 13432  1285  083A               	movf	??_InitUART+2,w
 13433  1286  00C6               	movwf	InitUART@temp+2
 13434  1287  0839               	movf	??_InitUART+1,w
 13435  1288  00C5               	movwf	InitUART@temp+1
 13436  1289  0838               	movf	??_InitUART,w
 13437  128A  00C4               	movwf	InitUART@temp
 13438                           
 13439                           ;UART.c: 128: temp = ReadUSART();
 13440  128B  3198  20C4  3191   	fcall	_ReadUSART
 13441  128E  0020               	movlb	0	; select bank0
 13442  128F  00B8               	movwf	??_InitUART
 13443  1290  01B9               	clrf	??_InitUART+1
 13444  1291  01BA               	clrf	??_InitUART+2
 13445  1292  01BB               	clrf	??_InitUART+3
 13446  1293  083B               	movf	??_InitUART+3,w
 13447  1294  00C7               	movwf	InitUART@temp+3
 13448  1295  083A               	movf	??_InitUART+2,w
 13449  1296  00C6               	movwf	InitUART@temp+2
 13450  1297  0839               	movf	??_InitUART+1,w
 13451  1298  00C5               	movwf	InitUART@temp+1
 13452  1299  0838               	movf	??_InitUART,w
 13453  129A  00C4               	movwf	InitUART@temp
 13454                           
 13455                           ;UART.c: 129: temp = ReadUSART();
 13456  129B  3198  20C4         	fcall	_ReadUSART
 13457  129D  0020               	movlb	0	; select bank0
 13458  129E  00B8               	movwf	??_InitUART
 13459  129F  01B9               	clrf	??_InitUART+1
 13460  12A0  01BA               	clrf	??_InitUART+2
 13461  12A1  01BB               	clrf	??_InitUART+3
 13462  12A2  083B               	movf	??_InitUART+3,w
 13463  12A3  00C7               	movwf	InitUART@temp+3
 13464  12A4  083A               	movf	??_InitUART+2,w
 13465  12A5  00C6               	movwf	InitUART@temp+2
 13466  12A6  0839               	movf	??_InitUART+1,w
 13467  12A7  00C5               	movwf	InitUART@temp+1
 13468  12A8  0838               	movf	??_InitUART,w
 13469  12A9  00C4               	movwf	InitUART@temp
 13470                           
 13471                           ;UART.c: 131: PPSLOCK =0;
 13472  12AA  003C               	movlb	28	; select bank28
 13473  12AB  018F               	clrf	15	;volatile
 13474                           
 13475                           ;UART.c: 132: RC2PPS = 0b00010100;
 13476  12AC  3014               	movlw	20
 13477  12AD  003D               	movlb	29	; select bank29
 13478  12AE  00A2               	movwf	34	;volatile
 13479                           
 13480                           ;UART.c: 133: CKPPS = 0b00010010;
 13481  12AF  3012               	movlw	18
 13482  12B0  003C               	movlb	28	; select bank28
 13483  12B1  00A5               	movwf	37	;volatile
 13484                           
 13485                           ;UART.c: 135: RXPPS = 0b00010101;
 13486  12B2  3015               	movlw	21
 13487  12B3  00A4               	movwf	36	;volatile
 13488                           
 13489                           ;UART.c: 137: PPSLOCK =1;
 13490  12B4  3001               	movlw	1
 13491  12B5  008F               	movwf	15	;volatile
 13492                           
 13493                           ;UART.c: 139: PIR1bits.RCIF = 0;
 13494  12B6  0020               	movlb	0	; select bank0
 13495  12B7  1291               	bcf	17,5	;volatile
 13496                           
 13497                           ;UART.c: 140: INTCONbits.PEIE = 1;
 13498  12B8  170B               	bsf	11,6	;volatile
 13499  12B9  0008               	return
 13500  12BA                     __end_of_InitUART:	
 13501                           
 13502                           	psect	text35
 13503  18BB                     __ptext35:	
 13504 ;; *************** function _baudUSART *****************
 13505 ;; Defined at:
 13506 ;;		line 148 in file "UART.c"
 13507 ;; Parameters:    Size  Location     Type
 13508 ;;  baudconfig      1    wreg     unsigned char 
 13509 ;; Auto vars:     Size  Location     Type
 13510 ;;  baudconfig      1    5[BANK0 ] unsigned char 
 13511 ;; Return value:  Size  Location     Type
 13512 ;;		None               void
 13513 ;; Registers used:
 13514 ;;		wreg, status,2
 13515 ;; Tracked objects:
 13516 ;;		On entry : 0/0
 13517 ;;		On exit  : 0/0
 13518 ;;		Unchanged: 0/0
 13519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13521 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13523 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13524 ;;Total ram usage:        1 bytes
 13525 ;; Hardware stack levels used:    1
 13526 ;; Hardware stack levels required when called:    3
 13527 ;; This function calls:
 13528 ;;		Nothing
 13529 ;; This function is called by:
 13530 ;;		_InitUART
 13531 ;; This function uses a non-reentrant model
 13532 ;;
 13533                           
 13534                           
 13535                           ;psect for function _baudUSART
 13536  18BB                     _baudUSART:	
 13537                           
 13538                           ;incstack = 0
 13539                           ; Regs used in _baudUSART: [wreg+status,2]
 13540                           ;baudUSART@baudconfig stored from wreg
 13541  18BB  0020               	movlb	0	; select bank0
 13542  18BC  00A5               	movwf	baudUSART@baudconfig
 13543                           
 13544                           ;UART.c: 150: BAUD1CON =0;
 13545  18BD  0023               	movlb	3	; select bank3
 13546  18BE  019F               	clrf	31	;volatile
 13547                           
 13548                           ;UART.c: 151: BAUD1CON = baudconfig;
 13549  18BF  0020               	movlb	0	; select bank0
 13550  18C0  0825               	movf	baudUSART@baudconfig,w
 13551  18C1  0023               	movlb	3	; select bank3
 13552  18C2  009F               	movwf	31	;volatile
 13553  18C3  0008               	return
 13554  18C4                     __end_of_baudUSART:	
 13555                           
 13556                           	psect	text36
 13557  1CAC                     __ptext36:	
 13558 ;; *************** function ___lldiv *****************
 13559 ;; Defined at:
 13560 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
 13561 ;; Parameters:    Size  Location     Type
 13562 ;;  divisor         4    5[BANK0 ] unsigned long 
 13563 ;;  dividend        4    9[BANK0 ] unsigned long 
 13564 ;; Auto vars:     Size  Location     Type
 13565 ;;  quotient        4   14[BANK0 ] unsigned long 
 13566 ;;  counter         1   18[BANK0 ] unsigned char 
 13567 ;; Return value:  Size  Location     Type
 13568 ;;                  4    5[BANK0 ] unsigned long 
 13569 ;; Registers used:
 13570 ;;		wreg, status,2, status,0
 13571 ;; Tracked objects:
 13572 ;;		On entry : 0/0
 13573 ;;		On exit  : 0/0
 13574 ;;		Unchanged: 0/0
 13575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13576 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13577 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13578 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13579 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13580 ;;Total ram usage:       14 bytes
 13581 ;; Hardware stack levels used:    1
 13582 ;; Hardware stack levels required when called:    3
 13583 ;; This function calls:
 13584 ;;		Nothing
 13585 ;; This function is called by:
 13586 ;;		_InitUART
 13587 ;;		_sprintf
 13588 ;; This function uses a non-reentrant model
 13589 ;;
 13590                           
 13591                           
 13592                           ;psect for function ___lldiv
 13593  1CAC                     ___lldiv:	
 13594                           
 13595                           ;incstack = 0
 13596                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 13597  1CAC  3000               	movlw	0
 13598  1CAD  0020               	movlb	0	; select bank0
 13599  1CAE  00B1               	movwf	___lldiv@quotient+3
 13600  1CAF  3000               	movlw	0
 13601  1CB0  00B0               	movwf	___lldiv@quotient+2
 13602  1CB1  3000               	movlw	0
 13603  1CB2  00AF               	movwf	___lldiv@quotient+1
 13604  1CB3  3000               	movlw	0
 13605  1CB4  00AE               	movwf	___lldiv@quotient
 13606  1CB5  0828               	movf	___lldiv@divisor+3,w
 13607  1CB6  0427               	iorwf	___lldiv@divisor+2,w
 13608  1CB7  0426               	iorwf	___lldiv@divisor+1,w
 13609  1CB8  0425               	iorwf	___lldiv@divisor,w
 13610  1CB9  1903               	skipnz
 13611  1CBA  2CF6               	goto	l5902
 13612  1CBB  01B2               	clrf	___lldiv@counter
 13613  1CBC  0AB2               	incf	___lldiv@counter,f
 13614  1CBD                     l5888:	
 13615  1CBD  1BA8               	btfsc	___lldiv@divisor+3,7
 13616  1CBE  2CCB               	goto	l5890
 13617  1CBF  3001               	movlw	1
 13618  1CC0                     u7685:	
 13619  1CC0  35A5               	lslf	___lldiv@divisor,f
 13620  1CC1  0DA6               	rlf	___lldiv@divisor+1,f
 13621  1CC2  0DA7               	rlf	___lldiv@divisor+2,f
 13622  1CC3  0DA8               	rlf	___lldiv@divisor+3,f
 13623  1CC4  0B89               	decfsz	9,f
 13624  1CC5  2CC0               	goto	u7685
 13625  1CC6  3001               	movlw	1
 13626  1CC7  00AD               	movwf	??___lldiv
 13627  1CC8  082D               	movf	??___lldiv,w
 13628  1CC9  07B2               	addwf	___lldiv@counter,f
 13629  1CCA  2CBD               	goto	l5888
 13630  1CCB                     l5890:	
 13631  1CCB  3001               	movlw	1
 13632  1CCC                     u7705:	
 13633  1CCC  35AE               	lslf	___lldiv@quotient,f
 13634  1CCD  0DAF               	rlf	___lldiv@quotient+1,f
 13635  1CCE  0DB0               	rlf	___lldiv@quotient+2,f
 13636  1CCF  0DB1               	rlf	___lldiv@quotient+3,f
 13637  1CD0  0B89               	decfsz	9,f
 13638  1CD1  2CCC               	goto	u7705
 13639  1CD2  0828               	movf	___lldiv@divisor+3,w
 13640  1CD3  022C               	subwf	___lldiv@dividend+3,w
 13641  1CD4  1D03               	skipz
 13642  1CD5  2CE0               	goto	u7715
 13643  1CD6  0827               	movf	___lldiv@divisor+2,w
 13644  1CD7  022B               	subwf	___lldiv@dividend+2,w
 13645  1CD8  1D03               	skipz
 13646  1CD9  2CE0               	goto	u7715
 13647  1CDA  0826               	movf	___lldiv@divisor+1,w
 13648  1CDB  022A               	subwf	___lldiv@dividend+1,w
 13649  1CDC  1D03               	skipz
 13650  1CDD  2CE0               	goto	u7715
 13651  1CDE  0825               	movf	___lldiv@divisor,w
 13652  1CDF  0229               	subwf	___lldiv@dividend,w
 13653  1CE0                     u7715:	
 13654  1CE0  1C03               	skipc
 13655  1CE1  2CEB               	goto	l5898
 13656  1CE2  0825               	movf	___lldiv@divisor,w
 13657  1CE3  02A9               	subwf	___lldiv@dividend,f
 13658  1CE4  0826               	movf	___lldiv@divisor+1,w
 13659  1CE5  3BAA               	subwfb	___lldiv@dividend+1,f
 13660  1CE6  0827               	movf	___lldiv@divisor+2,w
 13661  1CE7  3BAB               	subwfb	___lldiv@dividend+2,f
 13662  1CE8  0828               	movf	___lldiv@divisor+3,w
 13663  1CE9  3BAC               	subwfb	___lldiv@dividend+3,f
 13664  1CEA  142E               	bsf	___lldiv@quotient,0
 13665  1CEB                     l5898:	
 13666  1CEB  3001               	movlw	1
 13667  1CEC                     u7725:	
 13668  1CEC  36A8               	lsrf	___lldiv@divisor+3,f
 13669  1CED  0CA7               	rrf	___lldiv@divisor+2,f
 13670  1CEE  0CA6               	rrf	___lldiv@divisor+1,f
 13671  1CEF  0CA5               	rrf	___lldiv@divisor,f
 13672  1CF0  0B89               	decfsz	9,f
 13673  1CF1  2CEC               	goto	u7725
 13674  1CF2  3001               	movlw	1
 13675  1CF3  02B2               	subwf	___lldiv@counter,f
 13676  1CF4  1D03               	btfss	3,2
 13677  1CF5  2CCB               	goto	l5890
 13678  1CF6                     l5902:	
 13679  1CF6  0831               	movf	___lldiv@quotient+3,w
 13680  1CF7  00A8               	movwf	?___lldiv+3
 13681  1CF8  0830               	movf	___lldiv@quotient+2,w
 13682  1CF9  00A7               	movwf	?___lldiv+2
 13683  1CFA  082F               	movf	___lldiv@quotient+1,w
 13684  1CFB  00A6               	movwf	?___lldiv+1
 13685  1CFC  082E               	movf	___lldiv@quotient,w
 13686  1CFD  00A5               	movwf	?___lldiv
 13687  1CFE  0008               	return
 13688  1CFF                     __end_of___lldiv:	
 13689                           
 13690                           	psect	text37
 13691  18C4                     __ptext37:	
 13692 ;; *************** function _ReadUSART *****************
 13693 ;; Defined at:
 13694 ;;		line 303 in file "UART.c"
 13695 ;; Parameters:    Size  Location     Type
 13696 ;;		None
 13697 ;; Auto vars:     Size  Location     Type
 13698 ;;  data            1    6[BANK0 ] unsigned char 
 13699 ;; Return value:  Size  Location     Type
 13700 ;;                  1    wreg      unsigned char 
 13701 ;; Registers used:
 13702 ;;		wreg
 13703 ;; Tracked objects:
 13704 ;;		On entry : 0/0
 13705 ;;		On exit  : 0/0
 13706 ;;		Unchanged: 0/0
 13707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13709 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13710 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13711 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13712 ;;Total ram usage:        2 bytes
 13713 ;; Hardware stack levels used:    1
 13714 ;; Hardware stack levels required when called:    3
 13715 ;; This function calls:
 13716 ;;		Nothing
 13717 ;; This function is called by:
 13718 ;;		_InitUART
 13719 ;; This function uses a non-reentrant model
 13720 ;;
 13721                           
 13722                           
 13723                           ;psect for function _ReadUSART
 13724  18C4                     _ReadUSART:	
 13725                           
 13726                           ;UART.c: 305: char data;
 13727                           ;UART.c: 307: if(RCSTAbits.OERR)
 13728                           
 13729                           ;incstack = 0
 13730                           ; Regs used in _ReadUSART: [wreg]
 13731  18C4  0023               	movlb	3	; select bank3
 13732  18C5  189D               	btfsc	29,1	;volatile
 13733                           
 13734                           ;UART.c: 308: {
 13735                           ;UART.c: 309: RCSTAbits.CREN = 0;
 13736  18C6  121D               	bcf	29,4	;volatile
 13737                           
 13738                           ;UART.c: 310: }
 13739                           ;UART.c: 312: data = RCREG;
 13740  18C7  0819               	movf	25,w	;volatile
 13741  18C8  0020               	movlb	0	; select bank0
 13742  18C9  00A5               	movwf	??_ReadUSART
 13743  18CA  0825               	movf	??_ReadUSART,w
 13744  18CB  00A6               	movwf	ReadUSART@data
 13745                           
 13746                           ;UART.c: 314: return (data);
 13747  18CC  0826               	movf	ReadUSART@data,w
 13748  18CD  0008               	return
 13749  18CE                     __end_of_ReadUSART:	
 13750                           
 13751                           	psect	text38
 13752  1B95                     __ptext38:	
 13753 ;; *************** function _OpenUSART *****************
 13754 ;; Defined at:
 13755 ;;		line 159 in file "UART.c"
 13756 ;; Parameters:    Size  Location     Type
 13757 ;;  config          1    wreg     unsigned char 
 13758 ;;  spbrg           2    5[BANK0 ] unsigned int 
 13759 ;; Auto vars:     Size  Location     Type
 13760 ;;  config          1    7[BANK0 ] unsigned char 
 13761 ;; Return value:  Size  Location     Type
 13762 ;;		None               void
 13763 ;; Registers used:
 13764 ;;		wreg, status,2
 13765 ;; Tracked objects:
 13766 ;;		On entry : 0/0
 13767 ;;		On exit  : 0/0
 13768 ;;		Unchanged: 0/0
 13769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13770 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13771 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13773 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13774 ;;Total ram usage:        3 bytes
 13775 ;; Hardware stack levels used:    1
 13776 ;; Hardware stack levels required when called:    3
 13777 ;; This function calls:
 13778 ;;		Nothing
 13779 ;; This function is called by:
 13780 ;;		_InitUART
 13781 ;; This function uses a non-reentrant model
 13782 ;;
 13783                           
 13784                           
 13785                           ;psect for function _OpenUSART
 13786  1B95                     _OpenUSART:	
 13787                           
 13788                           ;incstack = 0
 13789                           ; Regs used in _OpenUSART: [wreg+status,2]
 13790                           ;OpenUSART@config stored from wreg
 13791  1B95  0020               	movlb	0	; select bank0
 13792  1B96  00A7               	movwf	OpenUSART@config
 13793                           
 13794                           ;UART.c: 161: TX1STA = 0;
 13795  1B97  0023               	movlb	3	; select bank3
 13796  1B98  019E               	clrf	30	;volatile
 13797                           
 13798                           ;UART.c: 162: RC1STA = 0;
 13799  1B99  019D               	clrf	29	;volatile
 13800                           
 13801                           ;UART.c: 164: if(config&0x01)
 13802  1B9A  0020               	movlb	0	; select bank0
 13803  1B9B  1C27               	btfss	OpenUSART@config,0
 13804  1B9C  2B9F               	goto	l5770
 13805                           
 13806                           ;UART.c: 165: {
 13807                           ;UART.c: 166: TX1STAbits.SYNC = 1;
 13808  1B9D  0023               	movlb	3	; select bank3
 13809  1B9E  161E               	bsf	30,4	;volatile
 13810  1B9F                     l5770:	
 13811                           
 13812                           ;UART.c: 167: }
 13813                           ;UART.c: 169: if(config&0x02)
 13814  1B9F  0020               	movlb	0	; select bank0
 13815  1BA0  1CA7               	btfss	OpenUSART@config,1
 13816  1BA1  2BA5               	goto	l5774
 13817                           
 13818                           ;UART.c: 170: {
 13819                           ;UART.c: 171: TX1STAbits.TX9 = 1;
 13820  1BA2  0023               	movlb	3	; select bank3
 13821  1BA3  171E               	bsf	30,6	;volatile
 13822                           
 13823                           ;UART.c: 172: RC1STAbits.RX9 = 1;
 13824  1BA4  171D               	bsf	29,6	;volatile
 13825  1BA5                     l5774:	
 13826                           
 13827                           ;UART.c: 173: }
 13828                           ;UART.c: 175: if(config&0x04)
 13829  1BA5  0020               	movlb	0	; select bank0
 13830  1BA6  1D27               	btfss	OpenUSART@config,2
 13831  1BA7  2BAA               	goto	l5778
 13832                           
 13833                           ;UART.c: 176: {
 13834                           ;UART.c: 177: TX1STAbits.CSRC = 1;
 13835  1BA8  0023               	movlb	3	; select bank3
 13836  1BA9  179E               	bsf	30,7	;volatile
 13837  1BAA                     l5778:	
 13838                           
 13839                           ;UART.c: 178: }
 13840                           ;UART.c: 180: if(config&0x08)
 13841  1BAA  0020               	movlb	0	; select bank0
 13842  1BAB  1DA7               	btfss	OpenUSART@config,3
 13843  1BAC  2BB0               	goto	l388
 13844                           
 13845                           ;UART.c: 181: {
 13846                           ;UART.c: 182: RC1STAbits.CREN = 1;
 13847  1BAD  0023               	movlb	3	; select bank3
 13848  1BAE  161D               	bsf	29,4	;volatile
 13849                           
 13850                           ;UART.c: 183: }
 13851  1BAF  2BB2               	goto	l5782
 13852  1BB0                     l388:	
 13853                           
 13854                           ;UART.c: 184: else
 13855                           ;UART.c: 185: {
 13856                           ;UART.c: 186: RC1STAbits.SREN = 1;
 13857  1BB0  0023               	movlb	3	; select bank3
 13858  1BB1  169D               	bsf	29,5	;volatile
 13859  1BB2                     l5782:	
 13860                           
 13861                           ;UART.c: 187: }
 13862                           ;UART.c: 189: if(config&0x10)
 13863  1BB2  0020               	movlb	0	; select bank0
 13864  1BB3  1E27               	btfss	OpenUSART@config,4
 13865  1BB4  2BB7               	goto	l5788
 13866                           
 13867                           ;UART.c: 190: {
 13868                           ;UART.c: 191: TX1STAbits.BRGH = 1;
 13869  1BB5  0023               	movlb	3	; select bank3
 13870  1BB6  151E               	bsf	30,2	;volatile
 13871  1BB7                     l5788:	
 13872                           ;UART.c: 195: {
 13873                           
 13874                           
 13875                           ;UART.c: 197: }
 13876                           ;UART.c: 199: if(config&0x40)
 13877  1BB7  0020               	movlb	0	; select bank0
 13878  1BB8  1F27               	btfss	OpenUSART@config,6
 13879  1BB9  2BBE               	goto	l392
 13880                           
 13881                           ;UART.c: 200: {
 13882                           ;UART.c: 201: PIR1bits.RCIF = 0;
 13883  1BBA  1291               	bcf	17,5	;volatile
 13884                           
 13885                           ;UART.c: 202: PIE1bits.RCIE = 1;
 13886  1BBB  0021               	movlb	1	; select bank1
 13887  1BBC  1691               	bsf	17,5	;volatile
 13888                           
 13889                           ;UART.c: 204: }
 13890  1BBD  2BC0               	goto	l5792
 13891  1BBE                     l392:	
 13892                           
 13893                           ;UART.c: 205: else
 13894                           ;UART.c: 206: {
 13895                           ;UART.c: 207: PIE1bits.RCIE = 0;
 13896  1BBE  0021               	movlb	1	; select bank1
 13897  1BBF  1291               	bcf	17,5	;volatile
 13898  1BC0                     l5792:	
 13899                           
 13900                           ;UART.c: 208: }
 13901                           ;UART.c: 210: if(config&0x80)
 13902  1BC0  0020               	movlb	0	; select bank0
 13903  1BC1  1FA7               	btfss	OpenUSART@config,7
 13904  1BC2  2BC7               	goto	l394
 13905                           
 13906                           ;UART.c: 211: {
 13907                           ;UART.c: 212: PIR1bits.TXIF = 0;
 13908  1BC3  1211               	bcf	17,4	;volatile
 13909                           
 13910                           ;UART.c: 213: PIE1bits.TXIE = 1;
 13911  1BC4  0021               	movlb	1	; select bank1
 13912  1BC5  1611               	bsf	17,4	;volatile
 13913                           
 13914                           ;UART.c: 214: }
 13915  1BC6  2BC9               	goto	l5796
 13916  1BC7                     l394:	
 13917                           
 13918                           ;UART.c: 215: else
 13919                           ;UART.c: 216: {
 13920                           ;UART.c: 217: PIE1bits.TXIE = 0;
 13921  1BC7  0021               	movlb	1	; select bank1
 13922  1BC8  1211               	bcf	17,4	;volatile
 13923  1BC9                     l5796:	
 13924                           
 13925                           ;UART.c: 218: }
 13926                           ;UART.c: 220: SPBRG = spbrg;
 13927  1BC9  0020               	movlb	0	; select bank0
 13928  1BCA  0825               	movf	OpenUSART@spbrg,w
 13929  1BCB  0023               	movlb	3	; select bank3
 13930  1BCC  009B               	movwf	27	;volatile
 13931                           
 13932                           ;UART.c: 221: SPBRGH = spbrg >> 8;
 13933  1BCD  0020               	movlb	0	; select bank0
 13934  1BCE  0826               	movf	OpenUSART@spbrg+1,w
 13935  1BCF  0023               	movlb	3	; select bank3
 13936  1BD0  009C               	movwf	28	;volatile
 13937                           
 13938                           ;UART.c: 223: TX1STAbits.TXEN = 1;
 13939  1BD1  169E               	bsf	30,5	;volatile
 13940                           
 13941                           ;UART.c: 224: RC1STAbits.SPEN = 1;
 13942  1BD2  179D               	bsf	29,7	;volatile
 13943  1BD3  0008               	return
 13944  1BD4                     __end_of_OpenUSART:	
 13945                           
 13946                           	psect	text39
 13947  18FB                     __ptext39:	
 13948 ;; *************** function _CloseUSART *****************
 13949 ;; Defined at:
 13950 ;;		line 60 in file "UART.c"
 13951 ;; Parameters:    Size  Location     Type
 13952 ;;		None
 13953 ;; Auto vars:     Size  Location     Type
 13954 ;;		None
 13955 ;; Return value:  Size  Location     Type
 13956 ;;		None               void
 13957 ;; Registers used:
 13958 ;;		wreg, status,2, status,0
 13959 ;; Tracked objects:
 13960 ;;		On entry : 0/0
 13961 ;;		On exit  : 0/0
 13962 ;;		Unchanged: 0/0
 13963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13966 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13967 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13968 ;;Total ram usage:        1 bytes
 13969 ;; Hardware stack levels used:    1
 13970 ;; Hardware stack levels required when called:    3
 13971 ;; This function calls:
 13972 ;;		Nothing
 13973 ;; This function is called by:
 13974 ;;		_InitUART
 13975 ;; This function uses a non-reentrant model
 13976 ;;
 13977                           
 13978                           
 13979                           ;psect for function _CloseUSART
 13980  18FB                     _CloseUSART:	
 13981                           
 13982                           ;UART.c: 62: RCSTA&=0b01001111;
 13983                           
 13984                           ;incstack = 0
 13985                           ; Regs used in _CloseUSART: [wreg+status,2+status,0]
 13986  18FB  304F               	movlw	79
 13987  18FC  0020               	movlb	0	; select bank0
 13988  18FD  00A5               	movwf	??_CloseUSART
 13989  18FE  0825               	movf	??_CloseUSART,w
 13990  18FF  0023               	movlb	3	; select bank3
 13991  1900  059D               	andwf	29,f	;volatile
 13992                           
 13993                           ;UART.c: 63: TX1STAbits.TXEN=0;
 13994  1901  129E               	bcf	30,5	;volatile
 13995                           
 13996                           ;UART.c: 64: PIE1&=0b11001111;
 13997  1902  30CF               	movlw	207
 13998  1903  0020               	movlb	0	; select bank0
 13999  1904  00A5               	movwf	??_CloseUSART
 14000  1905  0825               	movf	??_CloseUSART,w
 14001  1906  0021               	movlb	1	; select bank1
 14002  1907  0591               	andwf	17,f	;volatile
 14003  1908  0008               	return
 14004  1909                     __end_of_CloseUSART:	
 14005                           
 14006                           	psect	text40
 14007  13AC                     __ptext40:	
 14008 ;; *************** function _Init_PS_2_Send *****************
 14009 ;; Defined at:
 14010 ;;		line 1046 in file "PS_2.c"
 14011 ;; Parameters:    Size  Location     Type
 14012 ;;		None
 14013 ;; Auto vars:     Size  Location     Type
 14014 ;;		None
 14015 ;; Return value:  Size  Location     Type
 14016 ;;                  1    wreg      unsigned char 
 14017 ;; Registers used:
 14018 ;;		wreg, status,2, status,0, pclath, cstack
 14019 ;; Tracked objects:
 14020 ;;		On entry : 0/0
 14021 ;;		On exit  : 0/0
 14022 ;;		Unchanged: 0/0
 14023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14027 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14028 ;;Total ram usage:        0 bytes
 14029 ;; Hardware stack levels used:    1
 14030 ;; Hardware stack levels required when called:    5
 14031 ;; This function calls:
 14032 ;;		_PS_2_DISABLE_INTERRUPT
 14033 ;;		_PS_2_ENABLE_INTERRUPT
 14034 ;;		_Send_PS2
 14035 ;;		_delayUS
 14036 ;; This function is called by:
 14037 ;;		_main
 14038 ;; This function uses a non-reentrant model
 14039 ;;
 14040                           
 14041                           
 14042                           ;psect for function _Init_PS_2_Send
 14043  13AC                     _Init_PS_2_Send:	
 14044                           
 14045                           ;PS_2.c: 1048: PS_2_DISABLE_INTERRUPT(0b00100000);
 14046                           
 14047                           ;incstack = 0
 14048                           ; Regs used in _Init_PS_2_Send: [wreg+status,2+status,0+pclath+cstack]
 14049  13AC  3020               	movlw	32
 14050  13AD  318B  23C5  3193   	fcall	_PS_2_DISABLE_INTERRUPT
 14051                           
 14052                           ;PS_2.c: 1051: if(Send_PS2(0xED))
 14053  13B0  30ED               	movlw	237
 14054  13B1  318C  2469  3193   	fcall	_Send_PS2
 14055  13B4  3A00               	xorlw	0
 14056  13B5  1903               	skipnz
 14057  13B6  2BB9               	goto	l7244
 14058                           
 14059                           ;PS_2.c: 1052: {
 14060                           ;PS_2.c: 1053: return 0;
 14061  13B7  3000               	movlw	0
 14062  13B8  0008               	return
 14063  13B9                     l7244:	
 14064                           
 14065                           ;PS_2.c: 1054: }
 14066                           ;PS_2.c: 1055: delayUS(100);
 14067  13B9  3000               	movlw	0
 14068  13BA  0020               	movlb	0	; select bank0
 14069  13BB  00A8               	movwf	delayUS@US+3
 14070  13BC  3000               	movlw	0
 14071  13BD  00A7               	movwf	delayUS@US+2
 14072  13BE  3000               	movlw	0
 14073  13BF  00A6               	movwf	delayUS@US+1
 14074  13C0  3064               	movlw	100
 14075  13C1  00A5               	movwf	delayUS@US
 14076  13C2  3190  2002  3193   	fcall	_delayUS
 14077                           
 14078                           ;PS_2.c: 1056: if(Send_PS2(0x01))
 14079  13C5  3001               	movlw	1
 14080  13C6  318C  2469  3193   	fcall	_Send_PS2
 14081  13C9  3A00               	xorlw	0
 14082  13CA  1903               	skipnz
 14083  13CB  2BCE               	goto	l7250
 14084                           
 14085                           ;PS_2.c: 1057: {
 14086                           ;PS_2.c: 1058: return 0;
 14087  13CC  3000               	movlw	0
 14088  13CD  0008               	return
 14089  13CE                     l7250:	
 14090                           
 14091                           ;PS_2.c: 1059: }
 14092                           ;PS_2.c: 1060: delayUS(5000);
 14093  13CE  3000               	movlw	0
 14094  13CF  0020               	movlb	0	; select bank0
 14095  13D0  00A8               	movwf	delayUS@US+3
 14096  13D1  3000               	movlw	0
 14097  13D2  00A7               	movwf	delayUS@US+2
 14098  13D3  3013               	movlw	19
 14099  13D4  00A6               	movwf	delayUS@US+1
 14100  13D5  3088               	movlw	136
 14101  13D6  00A5               	movwf	delayUS@US
 14102  13D7  3190  2002  3193   	fcall	_delayUS
 14103                           
 14104                           ;PS_2.c: 1063: if(Send_PS2(0xED))
 14105  13DA  30ED               	movlw	237
 14106  13DB  318C  2469  3193   	fcall	_Send_PS2
 14107  13DE  3A00               	xorlw	0
 14108  13DF  1903               	skipnz
 14109  13E0  2BE3               	goto	l7256
 14110                           
 14111                           ;PS_2.c: 1064: {
 14112                           ;PS_2.c: 1065: return 0;
 14113  13E1  3000               	movlw	0
 14114  13E2  0008               	return
 14115  13E3                     l7256:	
 14116                           
 14117                           ;PS_2.c: 1066: }
 14118                           ;PS_2.c: 1067: delayUS(100);
 14119  13E3  3000               	movlw	0
 14120  13E4  0020               	movlb	0	; select bank0
 14121  13E5  00A8               	movwf	delayUS@US+3
 14122  13E6  3000               	movlw	0
 14123  13E7  00A7               	movwf	delayUS@US+2
 14124  13E8  3000               	movlw	0
 14125  13E9  00A6               	movwf	delayUS@US+1
 14126  13EA  3064               	movlw	100
 14127  13EB  00A5               	movwf	delayUS@US
 14128  13EC  3190  2002  3193   	fcall	_delayUS
 14129                           
 14130                           ;PS_2.c: 1068: if(Send_PS2(0x04))
 14131  13EF  3004               	movlw	4
 14132  13F0  318C  2469  3193   	fcall	_Send_PS2
 14133  13F3  3A00               	xorlw	0
 14134  13F4  1903               	skipnz
 14135  13F5  2BF8               	goto	l7262
 14136                           
 14137                           ;PS_2.c: 1069: {
 14138                           ;PS_2.c: 1070: return 0;
 14139  13F6  3000               	movlw	0
 14140  13F7  0008               	return
 14141  13F8                     l7262:	
 14142                           
 14143                           ;PS_2.c: 1071: }
 14144                           ;PS_2.c: 1072: delayUS(5000);
 14145  13F8  3000               	movlw	0
 14146  13F9  0020               	movlb	0	; select bank0
 14147  13FA  00A8               	movwf	delayUS@US+3
 14148  13FB  3000               	movlw	0
 14149  13FC  00A7               	movwf	delayUS@US+2
 14150  13FD  3013               	movlw	19
 14151  13FE  00A6               	movwf	delayUS@US+1
 14152  13FF  3088               	movlw	136
 14153  1400  00A5               	movwf	delayUS@US
 14154  1401  3190  2002  3193   	fcall	_delayUS
 14155                           
 14156                           ;PS_2.c: 1075: if(Send_PS2(0xED))
 14157  1404  30ED               	movlw	237
 14158  1405  318C  2469  3193   	fcall	_Send_PS2
 14159  1408  3A00               	xorlw	0
 14160  1409  1903               	skipnz
 14161  140A  2C0D               	goto	l7268
 14162                           
 14163                           ;PS_2.c: 1076: {
 14164                           ;PS_2.c: 1077: return 0;
 14165  140B  3000               	movlw	0
 14166  140C  0008               	return
 14167  140D                     l7268:	
 14168                           
 14169                           ;PS_2.c: 1078: }
 14170                           ;PS_2.c: 1079: delayUS(1000);
 14171  140D  3000               	movlw	0
 14172  140E  0020               	movlb	0	; select bank0
 14173  140F  00A8               	movwf	delayUS@US+3
 14174  1410  3000               	movlw	0
 14175  1411  00A7               	movwf	delayUS@US+2
 14176  1412  3003               	movlw	3
 14177  1413  00A6               	movwf	delayUS@US+1
 14178  1414  30E8               	movlw	232
 14179  1415  00A5               	movwf	delayUS@US
 14180  1416  3190  2002  3193   	fcall	_delayUS
 14181                           
 14182                           ;PS_2.c: 1080: if(Send_PS2(0x02))
 14183  1419  3002               	movlw	2
 14184  141A  318C  2469  3193   	fcall	_Send_PS2
 14185  141D  3A00               	xorlw	0
 14186  141E  1903               	skipnz
 14187  141F  2C22               	goto	l7274
 14188                           
 14189                           ;PS_2.c: 1081: {
 14190                           ;PS_2.c: 1082: return 0;
 14191  1420  3000               	movlw	0
 14192  1421  0008               	return
 14193  1422                     l7274:	
 14194                           
 14195                           ;PS_2.c: 1083: }
 14196                           ;PS_2.c: 1084: delayUS(5000);
 14197  1422  3000               	movlw	0
 14198  1423  0020               	movlb	0	; select bank0
 14199  1424  00A8               	movwf	delayUS@US+3
 14200  1425  3000               	movlw	0
 14201  1426  00A7               	movwf	delayUS@US+2
 14202  1427  3013               	movlw	19
 14203  1428  00A6               	movwf	delayUS@US+1
 14204  1429  3088               	movlw	136
 14205  142A  00A5               	movwf	delayUS@US
 14206  142B  3190  2002  3193   	fcall	_delayUS
 14207                           
 14208                           ;PS_2.c: 1087: if(Send_PS2(0xED))
 14209  142E  30ED               	movlw	237
 14210  142F  318C  2469  3193   	fcall	_Send_PS2
 14211  1432  3A00               	xorlw	0
 14212  1433  1903               	skipnz
 14213  1434  2C37               	goto	l7280
 14214                           
 14215                           ;PS_2.c: 1088: {
 14216                           ;PS_2.c: 1089: return 0;
 14217  1435  3000               	movlw	0
 14218  1436  0008               	return
 14219  1437                     l7280:	
 14220                           
 14221                           ;PS_2.c: 1090: }
 14222                           ;PS_2.c: 1091: delayUS(100);
 14223  1437  3000               	movlw	0
 14224  1438  0020               	movlb	0	; select bank0
 14225  1439  00A8               	movwf	delayUS@US+3
 14226  143A  3000               	movlw	0
 14227  143B  00A7               	movwf	delayUS@US+2
 14228  143C  3000               	movlw	0
 14229  143D  00A6               	movwf	delayUS@US+1
 14230  143E  3064               	movlw	100
 14231  143F  00A5               	movwf	delayUS@US
 14232  1440  3190  2002  3193   	fcall	_delayUS
 14233                           
 14234                           ;PS_2.c: 1092: if(Send_PS2(0x00))
 14235  1443  3000               	movlw	0
 14236  1444  318C  2469  3193   	fcall	_Send_PS2
 14237  1447  3A00               	xorlw	0
 14238  1448  1903               	skipnz
 14239  1449  2C4C               	goto	l7286
 14240                           
 14241                           ;PS_2.c: 1093: {
 14242                           ;PS_2.c: 1094: return 0;
 14243  144A  3000               	movlw	0
 14244  144B  0008               	return
 14245  144C                     l7286:	
 14246                           
 14247                           ;PS_2.c: 1095: }
 14248                           ;PS_2.c: 1098: if(Send_PS2(0xf4))
 14249  144C  30F4               	movlw	244
 14250  144D  318C  2469  3193   	fcall	_Send_PS2
 14251  1450  3A00               	xorlw	0
 14252  1451  1903               	skipnz
 14253  1452  2C55               	goto	l7292
 14254                           
 14255                           ;PS_2.c: 1099: {
 14256                           ;PS_2.c: 1100: return 0;
 14257  1453  3000               	movlw	0
 14258  1454  0008               	return
 14259  1455                     l7292:	
 14260                           
 14261                           ;PS_2.c: 1101: }
 14262                           ;PS_2.c: 1104: if(Send_PS2(0xf4))
 14263  1455  30F4               	movlw	244
 14264  1456  318C  2469  3193   	fcall	_Send_PS2
 14265  1459  3A00               	xorlw	0
 14266  145A  1903               	skipnz
 14267  145B  2C5E               	goto	l7298
 14268                           
 14269                           ;PS_2.c: 1105: {
 14270                           ;PS_2.c: 1106: return 0;
 14271  145C  3000               	movlw	0
 14272  145D  0008               	return
 14273  145E                     l7298:	
 14274                           
 14275                           ;PS_2.c: 1107: }
 14276                           ;PS_2.c: 1110: if(Send_PS2(0xf0))
 14277  145E  30F0               	movlw	240
 14278  145F  318C  2469  3193   	fcall	_Send_PS2
 14279  1462  3A00               	xorlw	0
 14280  1463  1903               	skipnz
 14281  1464  2C67               	goto	l7304
 14282                           
 14283                           ;PS_2.c: 1111: {
 14284                           ;PS_2.c: 1112: return 0;
 14285  1465  3000               	movlw	0
 14286  1466  0008               	return
 14287  1467                     l7304:	
 14288                           
 14289                           ;PS_2.c: 1113: }
 14290                           ;PS_2.c: 1114: delayUS(100);
 14291  1467  3000               	movlw	0
 14292  1468  0020               	movlb	0	; select bank0
 14293  1469  00A8               	movwf	delayUS@US+3
 14294  146A  3000               	movlw	0
 14295  146B  00A7               	movwf	delayUS@US+2
 14296  146C  3000               	movlw	0
 14297  146D  00A6               	movwf	delayUS@US+1
 14298  146E  3064               	movlw	100
 14299  146F  00A5               	movwf	delayUS@US
 14300  1470  3190  2002  3193   	fcall	_delayUS
 14301                           
 14302                           ;PS_2.c: 1115: if(Send_PS2(0x02))
 14303  1473  3002               	movlw	2
 14304  1474  318C  2469  3193   	fcall	_Send_PS2
 14305  1477  3A00               	xorlw	0
 14306  1478  1903               	skipnz
 14307  1479  2C7C               	goto	l7310
 14308                           
 14309                           ;PS_2.c: 1116: {
 14310                           ;PS_2.c: 1117: return 0;
 14311  147A  3000               	movlw	0
 14312  147B  0008               	return
 14313  147C                     l7310:	
 14314                           
 14315                           ;PS_2.c: 1118: }
 14316                           ;PS_2.c: 1121: if(Send_PS2(0xf3))
 14317  147C  30F3               	movlw	243
 14318  147D  318C  2469  3193   	fcall	_Send_PS2
 14319  1480  3A00               	xorlw	0
 14320  1481  1903               	skipnz
 14321  1482  2C85               	goto	l7316
 14322                           
 14323                           ;PS_2.c: 1122: {
 14324                           ;PS_2.c: 1123: return 0;
 14325  1483  3000               	movlw	0
 14326  1484  0008               	return
 14327  1485                     l7316:	
 14328                           
 14329                           ;PS_2.c: 1124: }
 14330                           ;PS_2.c: 1125: delayUS(100);
 14331  1485  3000               	movlw	0
 14332  1486  0020               	movlb	0	; select bank0
 14333  1487  00A8               	movwf	delayUS@US+3
 14334  1488  3000               	movlw	0
 14335  1489  00A7               	movwf	delayUS@US+2
 14336  148A  3000               	movlw	0
 14337  148B  00A6               	movwf	delayUS@US+1
 14338  148C  3064               	movlw	100
 14339  148D  00A5               	movwf	delayUS@US
 14340  148E  3190  2002  3193   	fcall	_delayUS
 14341                           
 14342                           ;PS_2.c: 1126: if(Send_PS2(0x2F))
 14343  1491  302F               	movlw	47
 14344  1492  318C  2469  3193   	fcall	_Send_PS2
 14345  1495  3A00               	xorlw	0
 14346  1496  1903               	skipnz
 14347  1497  2C9A               	goto	l7322
 14348                           
 14349                           ;PS_2.c: 1127: {
 14350                           ;PS_2.c: 1128: return 0;
 14351  1498  3000               	movlw	0
 14352  1499  0008               	return
 14353  149A                     l7322:	
 14354                           
 14355                           ;PS_2.c: 1129: }
 14356                           ;PS_2.c: 1131: PS_2_ENABLE_INTERRUPT(0b00100000);
 14357  149A  3020               	movlw	32
 14358  149B  3199  21B6         	fcall	_PS_2_ENABLE_INTERRUPT
 14359                           
 14360                           ;PS_2.c: 1132: return 1;
 14361  149D  3001               	movlw	1
 14362  149E  0008               	return
 14363  149F                     __end_of_Init_PS_2_Send:	
 14364                           
 14365                           	psect	text41
 14366  0C69                     __ptext41:	
 14367 ;; *************** function _Send_PS2 *****************
 14368 ;; Defined at:
 14369 ;;		line 886 in file "PS_2.c"
 14370 ;; Parameters:    Size  Location     Type
 14371 ;;  command         1    wreg     unsigned char 
 14372 ;; Auto vars:     Size  Location     Type
 14373 ;;  command         1   20[BANK0 ] unsigned char 
 14374 ;;  timeout         2   22[BANK0 ] unsigned int 
 14375 ;;  i               1   21[BANK0 ] unsigned char 
 14376 ;;  oddparity       1   19[BANK0 ] unsigned char 
 14377 ;; Return value:  Size  Location     Type
 14378 ;;                  1    wreg      unsigned char 
 14379 ;; Registers used:
 14380 ;;		wreg, status,2, status,0, pclath, cstack
 14381 ;; Tracked objects:
 14382 ;;		On entry : 0/0
 14383 ;;		On exit  : 0/0
 14384 ;;		Unchanged: 0/0
 14385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14387 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14388 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14389 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14390 ;;Total ram usage:        9 bytes
 14391 ;; Hardware stack levels used:    1
 14392 ;; Hardware stack levels required when called:    4
 14393 ;; This function calls:
 14394 ;;		_CheckSum_byte
 14395 ;;		_Clock_TRIS
 14396 ;;		_Data_TRIS
 14397 ;;		_PS_2_ENABLE_INTERRUPT
 14398 ;;		_READ_PS_2_PIN
 14399 ;;		_delayUS
 14400 ;; This function is called by:
 14401 ;;		_PS_2_Update
 14402 ;;		_Init_PS_2_Send
 14403 ;;		_Keyboard_Connected
 14404 ;; This function uses a non-reentrant model
 14405 ;;
 14406                           
 14407                           
 14408                           ;psect for function _Send_PS2
 14409  0C69                     _Send_PS2:	
 14410                           
 14411                           ;incstack = 0
 14412                           ; Regs used in _Send_PS2: [wreg+status,2+status,0+pclath+cstack]
 14413                           ;Send_PS2@command stored from wreg
 14414  0C69  0020               	movlb	0	; select bank0
 14415  0C6A  00B4               	movwf	Send_PS2@command
 14416                           
 14417                           ;PS_2.c: 888: unsigned char i=0;
 14418  0C6B  01B5               	clrf	Send_PS2@i
 14419                           
 14420                           ;PS_2.c: 889: unsigned char oddparity = CheckSum_byte((unsigned int)command , 3);
 14421  0C6C  0834               	movf	Send_PS2@command,w
 14422  0C6D  00AF               	movwf	??_Send_PS2
 14423  0C6E  01B0               	clrf	??_Send_PS2+1
 14424  0C6F  082F               	movf	??_Send_PS2,w
 14425  0C70  00A5               	movwf	CheckSum_byte@This
 14426  0C71  0830               	movf	??_Send_PS2+1,w
 14427  0C72  00A6               	movwf	CheckSum_byte@This+1
 14428  0C73  3003               	movlw	3
 14429  0C74  00B1               	movwf	??_Send_PS2+2
 14430  0C75  0831               	movf	??_Send_PS2+2,w
 14431  0C76  00A7               	movwf	CheckSum_byte@Odd_Even
 14432  0C77  319A  229B  318C   	fcall	_CheckSum_byte
 14433  0C7A  0020               	movlb	0	; select bank0
 14434  0C7B  00B2               	movwf	??_Send_PS2+3
 14435  0C7C  0832               	movf	??_Send_PS2+3,w
 14436  0C7D  00B3               	movwf	Send_PS2@oddparity
 14437                           
 14438                           ;PS_2.c: 890: unsigned int timeout =0;
 14439  0C7E  01B6               	clrf	Send_PS2@timeout
 14440  0C7F  01B7               	clrf	Send_PS2@timeout+1
 14441                           
 14442                           ;PS_2.c: 892: Clock_TRIS(0);
 14443  0C80  3000               	movlw	0
 14444  0C81  3198  20CE  318C   	fcall	_Clock_TRIS
 14445                           
 14446                           ;PS_2.c: 893: Data_TRIS(0);
 14447  0C84  3000               	movlw	0
 14448  0C85  3198  20D9  318C   	fcall	_Data_TRIS
 14449                           
 14450                           ;PS_2.c: 894: LATA &= ~0b00100000;
 14451  0C88  30DF               	movlw	223
 14452  0C89  0020               	movlb	0	; select bank0
 14453  0C8A  00AF               	movwf	??_Send_PS2
 14454  0C8B  082F               	movf	??_Send_PS2,w
 14455  0C8C  0022               	movlb	2	; select bank2
 14456  0C8D  058C               	andwf	12,f	;volatile
 14457                           
 14458                           ;PS_2.c: 895: delayUS(300);
 14459  0C8E  3000               	movlw	0
 14460  0C8F  0020               	movlb	0	; select bank0
 14461  0C90  00A8               	movwf	delayUS@US+3
 14462  0C91  3000               	movlw	0
 14463  0C92  00A7               	movwf	delayUS@US+2
 14464  0C93  3001               	movlw	1
 14465  0C94  00A6               	movwf	delayUS@US+1
 14466  0C95  302C               	movlw	44
 14467  0C96  00A5               	movwf	delayUS@US
 14468  0C97  3190  2002  318C   	fcall	_delayUS
 14469                           
 14470                           ;PS_2.c: 896: LATA &= ~0b00010000;
 14471  0C9A  30EF               	movlw	239
 14472  0C9B  0020               	movlb	0	; select bank0
 14473  0C9C  00AF               	movwf	??_Send_PS2
 14474  0C9D  082F               	movf	??_Send_PS2,w
 14475  0C9E  0022               	movlb	2	; select bank2
 14476  0C9F  058C               	andwf	12,f	;volatile
 14477                           
 14478                           ;PS_2.c: 897: delayUS(20);
 14479  0CA0  3000               	movlw	0
 14480  0CA1  0020               	movlb	0	; select bank0
 14481  0CA2  00A8               	movwf	delayUS@US+3
 14482  0CA3  3000               	movlw	0
 14483  0CA4  00A7               	movwf	delayUS@US+2
 14484  0CA5  3000               	movlw	0
 14485  0CA6  00A6               	movwf	delayUS@US+1
 14486  0CA7  3014               	movlw	20
 14487  0CA8  00A5               	movwf	delayUS@US
 14488  0CA9  3190  2002  318C   	fcall	_delayUS
 14489                           
 14490                           ;PS_2.c: 898: Clock_TRIS(1);
 14491  0CAC  3001               	movlw	1
 14492  0CAD  3198  20CE  318C   	fcall	_Clock_TRIS
 14493                           
 14494                           ;PS_2.c: 899: timeout=0;
 14495  0CB0  0020               	movlb	0	; select bank0
 14496  0CB1  01B6               	clrf	Send_PS2@timeout
 14497  0CB2  01B7               	clrf	Send_PS2@timeout+1
 14498  0CB3                     l6278:	
 14499                           ;PS_2.c: 900: while(READ_PS_2_PIN(0b00100000))
 14500                           
 14501  0CB3  3020               	movlw	32
 14502  0CB4  3199  2158  318C   	fcall	_READ_PS_2_PIN
 14503  0CB7  3800               	iorlw	0
 14504  0CB8  1903               	btfsc	3,2
 14505  0CB9  2CD0               	goto	l6280
 14506                           
 14507                           ;PS_2.c: 901: {
 14508                           ;PS_2.c: 902: __nop();
 14509  0CBA  0000               	nop
 14510                           
 14511                           ;PS_2.c: 903: timeout++;
 14512  0CBB  3001               	movlw	1
 14513  0CBC  0020               	movlb	0	; select bank0
 14514  0CBD  07B6               	addwf	Send_PS2@timeout,f
 14515  0CBE  3000               	movlw	0
 14516  0CBF  3DB7               	addwfc	Send_PS2@timeout+1,f
 14517                           
 14518                           ;PS_2.c: 904: if(timeout > 15000)
 14519  0CC0  303A               	movlw	58
 14520  0CC1  0237               	subwf	Send_PS2@timeout+1,w
 14521  0CC2  3099               	movlw	153
 14522  0CC3  1903               	skipnz
 14523  0CC4  0236               	subwf	Send_PS2@timeout,w
 14524  0CC5  1C03               	skipc
 14525  0CC6  2CB3               	goto	l6278
 14526                           
 14527                           ;PS_2.c: 905: {
 14528                           ;PS_2.c: 906: Clock_TRIS(1);
 14529  0CC7  3001               	movlw	1
 14530  0CC8  3198  20CE  318C   	fcall	_Clock_TRIS
 14531                           
 14532                           ;PS_2.c: 907: Data_TRIS(1);
 14533  0CCB  3001               	movlw	1
 14534  0CCC  3198  20D9         	fcall	_Data_TRIS
 14535                           
 14536                           ;PS_2.c: 908: return 1;
 14537  0CCE  3001               	movlw	1
 14538  0CCF  0008               	return
 14539  0CD0                     l6280:	
 14540                           
 14541                           ;PS_2.c: 909: }
 14542                           ;PS_2.c: 910: }
 14543                           ;PS_2.c: 911: for(i=0;i<8;i++)
 14544  0CD0  0020               	movlb	0	; select bank0
 14545  0CD1  01B5               	clrf	Send_PS2@i
 14546  0CD2  3008               	movlw	8
 14547  0CD3  0235               	subwf	Send_PS2@i,w
 14548  0CD4  1803               	btfsc	3,0
 14549  0CD5  2D2C               	goto	l832
 14550  0CD6                     l831:	
 14551                           
 14552                           ;PS_2.c: 912: {
 14553                           ;PS_2.c: 913: if(command & 0x1)
 14554  0CD6  1C34               	btfss	Send_PS2@command,0
 14555  0CD7  2CDB               	goto	l6288
 14556                           
 14557                           ;PS_2.c: 914: {
 14558                           ;PS_2.c: 915: LATA |= 0b00010000;
 14559  0CD8  0022               	movlb	2	; select bank2
 14560  0CD9  160C               	bsf	12,4	;volatile
 14561                           
 14562                           ;PS_2.c: 916: }
 14563  0CDA  2CE1               	goto	l6290
 14564  0CDB                     l6288:	
 14565                           
 14566                           ;PS_2.c: 917: else
 14567                           ;PS_2.c: 918: {
 14568                           ;PS_2.c: 919: LATA &= ~0b00010000;
 14569  0CDB  30EF               	movlw	239
 14570  0CDC  0020               	movlb	0	; select bank0
 14571  0CDD  00AF               	movwf	??_Send_PS2
 14572  0CDE  082F               	movf	??_Send_PS2,w
 14573  0CDF  0022               	movlb	2	; select bank2
 14574  0CE0  058C               	andwf	12,f	;volatile
 14575  0CE1                     l6290:	
 14576                           
 14577                           ;PS_2.c: 920: }
 14578                           ;PS_2.c: 921: command >> = 1;
 14579  0CE1  1003               	clrc
 14580  0CE2  0020               	movlb	0	; select bank0
 14581  0CE3  0CB4               	rrf	Send_PS2@command,f
 14582                           
 14583                           ;PS_2.c: 922: timeout=0;
 14584  0CE4  01B6               	clrf	Send_PS2@timeout
 14585  0CE5  01B7               	clrf	Send_PS2@timeout+1
 14586  0CE6                     l6302:	
 14587                           ;PS_2.c: 923: while(!READ_PS_2_PIN(0b00100000))
 14588                           
 14589  0CE6  3020               	movlw	32
 14590  0CE7  3199  2158  318C   	fcall	_READ_PS_2_PIN
 14591  0CEA  3A00               	xorlw	0
 14592  0CEB  1D03               	btfss	3,2
 14593  0CEC  2D03               	goto	l6304
 14594                           
 14595                           ;PS_2.c: 924: {
 14596                           ;PS_2.c: 925: __nop();
 14597  0CED  0000               	nop
 14598                           
 14599                           ;PS_2.c: 926: timeout++;
 14600  0CEE  3001               	movlw	1
 14601  0CEF  0020               	movlb	0	; select bank0
 14602  0CF0  07B6               	addwf	Send_PS2@timeout,f
 14603  0CF1  3000               	movlw	0
 14604  0CF2  3DB7               	addwfc	Send_PS2@timeout+1,f
 14605                           
 14606                           ;PS_2.c: 927: if(timeout > 15000)
 14607  0CF3  303A               	movlw	58
 14608  0CF4  0237               	subwf	Send_PS2@timeout+1,w
 14609  0CF5  3099               	movlw	153
 14610  0CF6  1903               	skipnz
 14611  0CF7  0236               	subwf	Send_PS2@timeout,w
 14612  0CF8  1C03               	skipc
 14613  0CF9  2CE6               	goto	l6302
 14614                           
 14615                           ;PS_2.c: 928: {
 14616                           ;PS_2.c: 929: Clock_TRIS(1);
 14617  0CFA  3001               	movlw	1
 14618  0CFB  3198  20CE  318C   	fcall	_Clock_TRIS
 14619                           
 14620                           ;PS_2.c: 930: Data_TRIS(1);
 14621  0CFE  3001               	movlw	1
 14622  0CFF  3198  20D9         	fcall	_Data_TRIS
 14623                           
 14624                           ;PS_2.c: 931: return 1;
 14625  0D01  3001               	movlw	1
 14626  0D02  0008               	return
 14627  0D03                     l6304:	
 14628                           
 14629                           ;PS_2.c: 932: }
 14630                           ;PS_2.c: 933: }
 14631                           ;PS_2.c: 934: timeout=0;
 14632  0D03  0020               	movlb	0	; select bank0
 14633  0D04  01B6               	clrf	Send_PS2@timeout
 14634  0D05  01B7               	clrf	Send_PS2@timeout+1
 14635  0D06                     l6314:	
 14636                           ;PS_2.c: 935: while(READ_PS_2_PIN(0b00100000))
 14637                           
 14638  0D06  3020               	movlw	32
 14639  0D07  3199  2158  318C   	fcall	_READ_PS_2_PIN
 14640  0D0A  3800               	iorlw	0
 14641  0D0B  1903               	btfsc	3,2
 14642  0D0C  2D23               	goto	l6316
 14643                           
 14644                           ;PS_2.c: 936: {
 14645                           ;PS_2.c: 937: __nop();
 14646  0D0D  0000               	nop
 14647                           
 14648                           ;PS_2.c: 938: timeout++;
 14649  0D0E  3001               	movlw	1
 14650  0D0F  0020               	movlb	0	; select bank0
 14651  0D10  07B6               	addwf	Send_PS2@timeout,f
 14652  0D11  3000               	movlw	0
 14653  0D12  3DB7               	addwfc	Send_PS2@timeout+1,f
 14654                           
 14655                           ;PS_2.c: 939: if(timeout > 15000)
 14656  0D13  303A               	movlw	58
 14657  0D14  0237               	subwf	Send_PS2@timeout+1,w
 14658  0D15  3099               	movlw	153
 14659  0D16  1903               	skipnz
 14660  0D17  0236               	subwf	Send_PS2@timeout,w
 14661  0D18  1C03               	skipc
 14662  0D19  2D06               	goto	l6314
 14663                           
 14664                           ;PS_2.c: 940: {
 14665                           ;PS_2.c: 941: Clock_TRIS(1);
 14666  0D1A  3001               	movlw	1
 14667  0D1B  3198  20CE  318C   	fcall	_Clock_TRIS
 14668                           
 14669                           ;PS_2.c: 942: Data_TRIS(1);
 14670  0D1E  3001               	movlw	1
 14671  0D1F  3198  20D9         	fcall	_Data_TRIS
 14672                           
 14673                           ;PS_2.c: 943: return 1;
 14674  0D21  3001               	movlw	1
 14675  0D22  0008               	return
 14676  0D23                     l6316:	
 14677  0D23  3001               	movlw	1
 14678  0D24  0020               	movlb	0	; select bank0
 14679  0D25  00AF               	movwf	??_Send_PS2
 14680  0D26  082F               	movf	??_Send_PS2,w
 14681  0D27  07B5               	addwf	Send_PS2@i,f
 14682  0D28  3008               	movlw	8
 14683  0D29  0235               	subwf	Send_PS2@i,w
 14684  0D2A  1C03               	skipc
 14685  0D2B  2CD6               	goto	l831
 14686  0D2C                     l832:	
 14687                           
 14688                           ;PS_2.c: 944: }
 14689                           ;PS_2.c: 945: }
 14690                           ;PS_2.c: 946: }
 14691                           ;PS_2.c: 948: if(oddparity & 0x1)
 14692  0D2C  1C33               	btfss	Send_PS2@oddparity,0
 14693  0D2D  2D31               	goto	l6322
 14694                           
 14695                           ;PS_2.c: 949: {
 14696                           ;PS_2.c: 950: LATA |= 0b00010000;
 14697  0D2E  0022               	movlb	2	; select bank2
 14698  0D2F  160C               	bsf	12,4	;volatile
 14699                           
 14700                           ;PS_2.c: 951: }
 14701  0D30  2D37               	goto	l6324
 14702  0D31                     l6322:	
 14703                           
 14704                           ;PS_2.c: 952: else
 14705                           ;PS_2.c: 953: {
 14706                           ;PS_2.c: 954: LATA &= ~0b00010000;
 14707  0D31  30EF               	movlw	239
 14708  0D32  0020               	movlb	0	; select bank0
 14709  0D33  00AF               	movwf	??_Send_PS2
 14710  0D34  082F               	movf	??_Send_PS2,w
 14711  0D35  0022               	movlb	2	; select bank2
 14712  0D36  058C               	andwf	12,f	;volatile
 14713  0D37                     l6324:	
 14714                           
 14715                           ;PS_2.c: 955: }
 14716                           ;PS_2.c: 956: timeout=0;
 14717  0D37  0020               	movlb	0	; select bank0
 14718  0D38  01B6               	clrf	Send_PS2@timeout
 14719  0D39  01B7               	clrf	Send_PS2@timeout+1
 14720  0D3A                     l6334:	
 14721                           ;PS_2.c: 957: while(!READ_PS_2_PIN(0b00100000))
 14722                           
 14723  0D3A  3020               	movlw	32
 14724  0D3B  3199  2158  318C   	fcall	_READ_PS_2_PIN
 14725  0D3E  3A00               	xorlw	0
 14726  0D3F  1D03               	btfss	3,2
 14727  0D40  2D57               	goto	l6336
 14728                           
 14729                           ;PS_2.c: 958: {
 14730                           ;PS_2.c: 959: __nop();
 14731  0D41  0000               	nop
 14732                           
 14733                           ;PS_2.c: 960: timeout++;
 14734  0D42  3001               	movlw	1
 14735  0D43  0020               	movlb	0	; select bank0
 14736  0D44  07B6               	addwf	Send_PS2@timeout,f
 14737  0D45  3000               	movlw	0
 14738  0D46  3DB7               	addwfc	Send_PS2@timeout+1,f
 14739                           
 14740                           ;PS_2.c: 961: if(timeout > 15000)
 14741  0D47  303A               	movlw	58
 14742  0D48  0237               	subwf	Send_PS2@timeout+1,w
 14743  0D49  3099               	movlw	153
 14744  0D4A  1903               	skipnz
 14745  0D4B  0236               	subwf	Send_PS2@timeout,w
 14746  0D4C  1C03               	skipc
 14747  0D4D  2D3A               	goto	l6334
 14748                           
 14749                           ;PS_2.c: 962: {
 14750                           ;PS_2.c: 963: Clock_TRIS(1);
 14751  0D4E  3001               	movlw	1
 14752  0D4F  3198  20CE  318C   	fcall	_Clock_TRIS
 14753                           
 14754                           ;PS_2.c: 964: Data_TRIS(1);
 14755  0D52  3001               	movlw	1
 14756  0D53  3198  20D9         	fcall	_Data_TRIS
 14757                           
 14758                           ;PS_2.c: 965: return 1;
 14759  0D55  3001               	movlw	1
 14760  0D56  0008               	return
 14761  0D57                     l6336:	
 14762                           
 14763                           ;PS_2.c: 966: }
 14764                           ;PS_2.c: 967: }
 14765                           ;PS_2.c: 968: timeout=0;
 14766  0D57  0020               	movlb	0	; select bank0
 14767  0D58  01B6               	clrf	Send_PS2@timeout
 14768  0D59  01B7               	clrf	Send_PS2@timeout+1
 14769  0D5A                     l6346:	
 14770                           ;PS_2.c: 969: while(READ_PS_2_PIN(0b00100000))
 14771                           
 14772  0D5A  3020               	movlw	32
 14773  0D5B  3199  2158  318C   	fcall	_READ_PS_2_PIN
 14774  0D5E  3800               	iorlw	0
 14775  0D5F  1903               	btfsc	3,2
 14776  0D60  2D77               	goto	l6348
 14777                           
 14778                           ;PS_2.c: 970: {
 14779                           ;PS_2.c: 971: __nop();
 14780  0D61  0000               	nop
 14781                           
 14782                           ;PS_2.c: 972: timeout++;
 14783  0D62  3001               	movlw	1
 14784  0D63  0020               	movlb	0	; select bank0
 14785  0D64  07B6               	addwf	Send_PS2@timeout,f
 14786  0D65  3000               	movlw	0
 14787  0D66  3DB7               	addwfc	Send_PS2@timeout+1,f
 14788                           
 14789                           ;PS_2.c: 973: if(timeout > 15000)
 14790  0D67  303A               	movlw	58
 14791  0D68  0237               	subwf	Send_PS2@timeout+1,w
 14792  0D69  3099               	movlw	153
 14793  0D6A  1903               	skipnz
 14794  0D6B  0236               	subwf	Send_PS2@timeout,w
 14795  0D6C  1C03               	skipc
 14796  0D6D  2D5A               	goto	l6346
 14797                           
 14798                           ;PS_2.c: 974: {
 14799                           ;PS_2.c: 975: Clock_TRIS(1);
 14800  0D6E  3001               	movlw	1
 14801  0D6F  3198  20CE  318C   	fcall	_Clock_TRIS
 14802                           
 14803                           ;PS_2.c: 976: Data_TRIS(1);
 14804  0D72  3001               	movlw	1
 14805  0D73  3198  20D9         	fcall	_Data_TRIS
 14806                           
 14807                           ;PS_2.c: 977: return 1;
 14808  0D75  3001               	movlw	1
 14809  0D76  0008               	return
 14810  0D77                     l6348:	
 14811                           
 14812                           ;PS_2.c: 978: }
 14813                           ;PS_2.c: 979: }
 14814                           ;PS_2.c: 981: Data_TRIS(1);
 14815  0D77  3001               	movlw	1
 14816  0D78  3198  20D9  318C   	fcall	_Data_TRIS
 14817                           
 14818                           ;PS_2.c: 983: timeout=0;
 14819  0D7B  0020               	movlb	0	; select bank0
 14820  0D7C  01B6               	clrf	Send_PS2@timeout
 14821  0D7D  01B7               	clrf	Send_PS2@timeout+1
 14822  0D7E                     l6360:	
 14823                           ;PS_2.c: 984: while(READ_PS_2_PIN(0b00010000))
 14824                           
 14825  0D7E  3010               	movlw	16
 14826  0D7F  3199  2158  318C   	fcall	_READ_PS_2_PIN
 14827  0D82  3800               	iorlw	0
 14828  0D83  1903               	btfsc	3,2
 14829  0D84  2D9B               	goto	l6362
 14830                           
 14831                           ;PS_2.c: 985: {
 14832                           ;PS_2.c: 986: __nop();
 14833  0D85  0000               	nop
 14834                           
 14835                           ;PS_2.c: 987: timeout++;
 14836  0D86  3001               	movlw	1
 14837  0D87  0020               	movlb	0	; select bank0
 14838  0D88  07B6               	addwf	Send_PS2@timeout,f
 14839  0D89  3000               	movlw	0
 14840  0D8A  3DB7               	addwfc	Send_PS2@timeout+1,f
 14841                           
 14842                           ;PS_2.c: 988: if(timeout > 15000)
 14843  0D8B  303A               	movlw	58
 14844  0D8C  0237               	subwf	Send_PS2@timeout+1,w
 14845  0D8D  3099               	movlw	153
 14846  0D8E  1903               	skipnz
 14847  0D8F  0236               	subwf	Send_PS2@timeout,w
 14848  0D90  1C03               	skipc
 14849  0D91  2D7E               	goto	l6360
 14850                           
 14851                           ;PS_2.c: 989: {
 14852                           ;PS_2.c: 990: Clock_TRIS(1);
 14853  0D92  3001               	movlw	1
 14854  0D93  3198  20CE  318C   	fcall	_Clock_TRIS
 14855                           
 14856                           ;PS_2.c: 991: Data_TRIS(1);
 14857  0D96  3001               	movlw	1
 14858  0D97  3198  20D9         	fcall	_Data_TRIS
 14859                           
 14860                           ;PS_2.c: 992: return 1;
 14861  0D99  3001               	movlw	1
 14862  0D9A  0008               	return
 14863  0D9B                     l6362:	
 14864                           
 14865                           ;PS_2.c: 993: }
 14866                           ;PS_2.c: 994: }
 14867                           ;PS_2.c: 995: timeout=0;
 14868  0D9B  0020               	movlb	0	; select bank0
 14869  0D9C  01B6               	clrf	Send_PS2@timeout
 14870  0D9D  01B7               	clrf	Send_PS2@timeout+1
 14871  0D9E                     l6372:	
 14872                           ;PS_2.c: 996: while(READ_PS_2_PIN(0b00100000))
 14873                           
 14874  0D9E  3020               	movlw	32
 14875  0D9F  3199  2158  318C   	fcall	_READ_PS_2_PIN
 14876  0DA2  3800               	iorlw	0
 14877  0DA3  1903               	btfsc	3,2
 14878  0DA4  2DBB               	goto	l6374
 14879                           
 14880                           ;PS_2.c: 997: {
 14881                           ;PS_2.c: 998: __nop();
 14882  0DA5  0000               	nop
 14883                           
 14884                           ;PS_2.c: 999: timeout++;
 14885  0DA6  3001               	movlw	1
 14886  0DA7  0020               	movlb	0	; select bank0
 14887  0DA8  07B6               	addwf	Send_PS2@timeout,f
 14888  0DA9  3000               	movlw	0
 14889  0DAA  3DB7               	addwfc	Send_PS2@timeout+1,f
 14890                           
 14891                           ;PS_2.c: 1000: if(timeout > 15000)
 14892  0DAB  303A               	movlw	58
 14893  0DAC  0237               	subwf	Send_PS2@timeout+1,w
 14894  0DAD  3099               	movlw	153
 14895  0DAE  1903               	skipnz
 14896  0DAF  0236               	subwf	Send_PS2@timeout,w
 14897  0DB0  1C03               	skipc
 14898  0DB1  2D9E               	goto	l6372
 14899                           
 14900                           ;PS_2.c: 1001: {
 14901                           ;PS_2.c: 1002: Clock_TRIS(1);
 14902  0DB2  3001               	movlw	1
 14903  0DB3  3198  20CE  318C   	fcall	_Clock_TRIS
 14904                           
 14905                           ;PS_2.c: 1003: Data_TRIS(1);
 14906  0DB6  3001               	movlw	1
 14907  0DB7  3198  20D9         	fcall	_Data_TRIS
 14908                           
 14909                           ;PS_2.c: 1004: return 1;
 14910  0DB9  3001               	movlw	1
 14911  0DBA  0008               	return
 14912  0DBB                     l6374:	
 14913                           
 14914                           ;PS_2.c: 1005: }
 14915                           ;PS_2.c: 1006: }
 14916                           ;PS_2.c: 1007: timeout=0;
 14917  0DBB  0020               	movlb	0	; select bank0
 14918  0DBC  01B6               	clrf	Send_PS2@timeout
 14919  0DBD  01B7               	clrf	Send_PS2@timeout+1
 14920  0DBE                     l6384:	
 14921                           ;PS_2.c: 1008: while(!READ_PS_2_PIN(0b00010000))
 14922                           
 14923  0DBE  3010               	movlw	16
 14924  0DBF  3199  2158  318C   	fcall	_READ_PS_2_PIN
 14925  0DC2  3A00               	xorlw	0
 14926  0DC3  1D03               	btfss	3,2
 14927  0DC4  2DDB               	goto	l6386
 14928                           
 14929                           ;PS_2.c: 1009: {
 14930                           ;PS_2.c: 1010: __nop();
 14931  0DC5  0000               	nop
 14932                           
 14933                           ;PS_2.c: 1011: timeout++;
 14934  0DC6  3001               	movlw	1
 14935  0DC7  0020               	movlb	0	; select bank0
 14936  0DC8  07B6               	addwf	Send_PS2@timeout,f
 14937  0DC9  3000               	movlw	0
 14938  0DCA  3DB7               	addwfc	Send_PS2@timeout+1,f
 14939                           
 14940                           ;PS_2.c: 1012: if(timeout > 15000)
 14941  0DCB  303A               	movlw	58
 14942  0DCC  0237               	subwf	Send_PS2@timeout+1,w
 14943  0DCD  3099               	movlw	153
 14944  0DCE  1903               	skipnz
 14945  0DCF  0236               	subwf	Send_PS2@timeout,w
 14946  0DD0  1C03               	skipc
 14947  0DD1  2DBE               	goto	l6384
 14948                           
 14949                           ;PS_2.c: 1013: {
 14950                           ;PS_2.c: 1014: Clock_TRIS(1);
 14951  0DD2  3001               	movlw	1
 14952  0DD3  3198  20CE  318C   	fcall	_Clock_TRIS
 14953                           
 14954                           ;PS_2.c: 1015: Data_TRIS(1);
 14955  0DD6  3001               	movlw	1
 14956  0DD7  3198  20D9         	fcall	_Data_TRIS
 14957                           
 14958                           ;PS_2.c: 1016: return 1;
 14959  0DD9  3001               	movlw	1
 14960  0DDA  0008               	return
 14961  0DDB                     l6386:	
 14962                           
 14963                           ;PS_2.c: 1017: }
 14964                           ;PS_2.c: 1018: }
 14965                           ;PS_2.c: 1019: timeout=0;
 14966  0DDB  0020               	movlb	0	; select bank0
 14967  0DDC  01B6               	clrf	Send_PS2@timeout
 14968  0DDD  01B7               	clrf	Send_PS2@timeout+1
 14969  0DDE                     l6396:	
 14970                           ;PS_2.c: 1020: while(!READ_PS_2_PIN(0b00100000))
 14971                           
 14972  0DDE  3020               	movlw	32
 14973  0DDF  3199  2158  318C   	fcall	_READ_PS_2_PIN
 14974  0DE2  3A00               	xorlw	0
 14975  0DE3  1D03               	btfss	3,2
 14976  0DE4  2DFB               	goto	l6398
 14977                           
 14978                           ;PS_2.c: 1021: {
 14979                           ;PS_2.c: 1022: __nop();
 14980  0DE5  0000               	nop
 14981                           
 14982                           ;PS_2.c: 1023: timeout++;
 14983  0DE6  3001               	movlw	1
 14984  0DE7  0020               	movlb	0	; select bank0
 14985  0DE8  07B6               	addwf	Send_PS2@timeout,f
 14986  0DE9  3000               	movlw	0
 14987  0DEA  3DB7               	addwfc	Send_PS2@timeout+1,f
 14988                           
 14989                           ;PS_2.c: 1024: if(timeout > 15000)
 14990  0DEB  303A               	movlw	58
 14991  0DEC  0237               	subwf	Send_PS2@timeout+1,w
 14992  0DED  3099               	movlw	153
 14993  0DEE  1903               	skipnz
 14994  0DEF  0236               	subwf	Send_PS2@timeout,w
 14995  0DF0  1C03               	skipc
 14996  0DF1  2DDE               	goto	l6396
 14997                           
 14998                           ;PS_2.c: 1025: {
 14999                           ;PS_2.c: 1026: Clock_TRIS(1);
 15000  0DF2  3001               	movlw	1
 15001  0DF3  3198  20CE  318C   	fcall	_Clock_TRIS
 15002                           
 15003                           ;PS_2.c: 1027: Data_TRIS(1);
 15004  0DF6  3001               	movlw	1
 15005  0DF7  3198  20D9         	fcall	_Data_TRIS
 15006                           
 15007                           ;PS_2.c: 1028: return 1;
 15008  0DF9  3001               	movlw	1
 15009  0DFA  0008               	return
 15010  0DFB                     l6398:	
 15011                           
 15012                           ;PS_2.c: 1029: }
 15013                           ;PS_2.c: 1030: }
 15014                           ;PS_2.c: 1033: Clock_TRIS(1);
 15015  0DFB  3001               	movlw	1
 15016  0DFC  3198  20CE  318C   	fcall	_Clock_TRIS
 15017                           
 15018                           ;PS_2.c: 1034: Data_TRIS(1);
 15019  0DFF  3001               	movlw	1
 15020  0E00  3198  20D9  318C   	fcall	_Data_TRIS
 15021                           
 15022                           ;PS_2.c: 1035: PS_2_ENABLE_INTERRUPT(0b00100000);
 15023  0E03  3020               	movlw	32
 15024  0E04  3199  21B6         	fcall	_PS_2_ENABLE_INTERRUPT
 15025                           
 15026                           ;PS_2.c: 1036: return 0;
 15027  0E06  3000               	movlw	0
 15028  0E07  0008               	return
 15029  0E08                     __end_of_Send_PS2:	
 15030                           
 15031                           	psect	text42
 15032  1002                     __ptext42:	
 15033 ;; *************** function _delayUS *****************
 15034 ;; Defined at:
 15035 ;;		line 49 in file "MISC.c"
 15036 ;; Parameters:    Size  Location     Type
 15037 ;;  US              4    5[BANK0 ] long 
 15038 ;; Auto vars:     Size  Location     Type
 15039 ;;  i               4   10[BANK0 ] long 
 15040 ;;  j               1   14[BANK0 ] unsigned char 
 15041 ;; Return value:  Size  Location     Type
 15042 ;;		None               void
 15043 ;; Registers used:
 15044 ;;		wreg, status,2, status,0
 15045 ;; Tracked objects:
 15046 ;;		On entry : 0/0
 15047 ;;		On exit  : 0/0
 15048 ;;		Unchanged: 0/0
 15049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15050 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15051 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15052 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15053 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15054 ;;Total ram usage:       10 bytes
 15055 ;; Hardware stack levels used:    1
 15056 ;; Hardware stack levels required when called:    3
 15057 ;; This function calls:
 15058 ;;		Nothing
 15059 ;; This function is called by:
 15060 ;;		_main
 15061 ;;		_Init_System
 15062 ;;		_UART_send_break_timed
 15063 ;;		_UARTstringWAIT
 15064 ;;		_SetBaud
 15065 ;;		_PS_2_Update
 15066 ;;		_Send_PS2
 15067 ;;		_Init_PS_2_Send
 15068 ;;		_Keyboard_Connected
 15069 ;;		_WriteFlash_Sequential
 15070 ;;		_InternalADC_Read
 15071 ;; This function uses a non-reentrant model
 15072 ;;
 15073                           
 15074                           
 15075                           ;psect for function _delayUS
 15076  1002                     _delayUS:	
 15077                           
 15078                           ;MISC.c: 51: long i;
 15079                           ;MISC.c: 52: unsigned char j;
 15080                           ;MISC.c: 53: for(i=0;i<US;i+=6)
 15081                           
 15082                           ;incstack = 0
 15083                           ; Regs used in _delayUS: [wreg+status,2+status,0]
 15084  1002  3000               	movlw	0
 15085  1003  0020               	movlb	0	; select bank0
 15086  1004  00AD               	movwf	delayUS@i+3
 15087  1005  3000               	movlw	0
 15088  1006  00AC               	movwf	delayUS@i+2
 15089  1007  3000               	movlw	0
 15090  1008  00AB               	movwf	delayUS@i+1
 15091  1009  3000               	movlw	0
 15092  100A  00AA               	movwf	delayUS@i
 15093  100B                     l280:	
 15094  100B  082D               	movf	delayUS@i+3,w
 15095  100C  3A80               	xorlw	128
 15096  100D  00A9               	movwf	??_delayUS
 15097  100E  0828               	movf	delayUS@US+3,w
 15098  100F  3A80               	xorlw	128
 15099  1010  0229               	subwf	??_delayUS,w
 15100  1011  1D03               	skipz
 15101  1012  281D               	goto	u7373
 15102  1013  0827               	movf	delayUS@US+2,w
 15103  1014  022C               	subwf	delayUS@i+2,w
 15104  1015  1D03               	skipz
 15105  1016  281D               	goto	u7373
 15106  1017  0826               	movf	delayUS@US+1,w
 15107  1018  022B               	subwf	delayUS@i+1,w
 15108  1019  1D03               	skipz
 15109  101A  281D               	goto	u7373
 15110  101B  0825               	movf	delayUS@US,w
 15111  101C  022A               	subwf	delayUS@i,w
 15112  101D                     u7373:	
 15113  101D  1803               	btfsc	3,0
 15114  101E  0008               	return
 15115                           
 15116                           ;MISC.c: 54: {
 15117                           ;MISC.c: 55: for(j=0;j<32;j++)
 15118  101F  01AE               	clrf	delayUS@j
 15119  1020  3020               	movlw	32
 15120  1021  022E               	subwf	delayUS@j,w
 15121  1022  1803               	btfsc	3,0
 15122  1023  282E               	goto	l5668
 15123  1024                     l282:	
 15124                           
 15125                           ;MISC.c: 56: {
 15126                           ;MISC.c: 57: __nop();
 15127  1024  0000               	nop
 15128  1025  3001               	movlw	1
 15129  1026  0020               	movlb	0	; select bank0
 15130  1027  00A9               	movwf	??_delayUS
 15131  1028  0829               	movf	??_delayUS,w
 15132  1029  07AE               	addwf	delayUS@j,f
 15133  102A  3020               	movlw	32
 15134  102B  022E               	subwf	delayUS@j,w
 15135  102C  1C03               	skipc
 15136  102D  2824               	goto	l282
 15137  102E                     l5668:	
 15138  102E  3006               	movlw	6
 15139  102F  07AA               	addwf	delayUS@i,f
 15140  1030  3000               	movlw	0
 15141  1031  3DAB               	addwfc	delayUS@i+1,f
 15142  1032  3000               	movlw	0
 15143  1033  3DAC               	addwfc	delayUS@i+2,f
 15144  1034  3000               	movlw	0
 15145  1035  3DAD               	addwfc	delayUS@i+3,f
 15146  1036  280B               	goto	l280
 15147  1037                     __end_of_delayUS:	
 15148                           
 15149                           	psect	text43
 15150  1958                     __ptext43:	
 15151 ;; *************** function _READ_PS_2_PIN *****************
 15152 ;; Defined at:
 15153 ;;		line 224 in file "PS_2.c"
 15154 ;; Parameters:    Size  Location     Type
 15155 ;;  DATA_CLK        1    wreg     unsigned char 
 15156 ;; Auto vars:     Size  Location     Type
 15157 ;;  DATA_CLK        1    5[BANK0 ] unsigned char 
 15158 ;; Return value:  Size  Location     Type
 15159 ;;                  1    wreg      unsigned char 
 15160 ;; Registers used:
 15161 ;;		wreg
 15162 ;; Tracked objects:
 15163 ;;		On entry : 0/0
 15164 ;;		On exit  : 0/0
 15165 ;;		Unchanged: 0/0
 15166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15168 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15170 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15171 ;;Total ram usage:        1 bytes
 15172 ;; Hardware stack levels used:    1
 15173 ;; Hardware stack levels required when called:    3
 15174 ;; This function calls:
 15175 ;;		Nothing
 15176 ;; This function is called by:
 15177 ;;		_Send_PS2
 15178 ;; This function uses a non-reentrant model
 15179 ;;
 15180                           
 15181                           
 15182                           ;psect for function _READ_PS_2_PIN
 15183  1958                     _READ_PS_2_PIN:	
 15184                           
 15185                           ;incstack = 0
 15186                           ; Regs used in _READ_PS_2_PIN: [wreg]
 15187                           ;READ_PS_2_PIN@DATA_CLK stored from wreg
 15188  1958  0020               	movlb	0	; select bank0
 15189  1959  00A5               	movwf	READ_PS_2_PIN@DATA_CLK
 15190                           
 15191                           ;PS_2.c: 226: if(DATA_CLK == 0b00100000)
 15192  195A  0825               	movf	READ_PS_2_PIN@DATA_CLK,w
 15193  195B  3A20               	xorlw	32
 15194  195C  1D03               	skipz
 15195  195D  2964               	goto	l618
 15196                           
 15197                           ;PS_2.c: 227: {
 15198                           ;PS_2.c: 229: if((PORTA & 0b00100000) == 0b00100000)
 15199  195E  1E8C               	btfss	12,5	;volatile
 15200  195F  2962               	goto	l5936
 15201                           
 15202                           ;PS_2.c: 230: {
 15203                           ;PS_2.c: 231: return (1);
 15204  1960  3001               	movlw	1
 15205                           
 15206                           ;PS_2.c: 232: }
 15207  1961  0008               	return
 15208  1962                     l5936:	
 15209                           
 15210                           ;PS_2.c: 233: else
 15211                           ;PS_2.c: 234: {
 15212                           ;PS_2.c: 235: return 0;
 15213  1962  3000               	movlw	0
 15214                           
 15215                           ;PS_2.c: 236: }
 15216                           ;PS_2.c: 237: }
 15217  1963  0008               	return
 15218  1964                     l618:	
 15219                           
 15220                           ;PS_2.c: 238: else
 15221                           ;PS_2.c: 239: {
 15222                           ;PS_2.c: 241: if((PORTA & 0b00010000) == 0b00010000)
 15223  1964  1E0C               	btfss	12,4	;volatile
 15224  1965  2968               	goto	l5946
 15225                           
 15226                           ;PS_2.c: 242: {
 15227                           ;PS_2.c: 243: return (1);
 15228  1966  3001               	movlw	1
 15229                           
 15230                           ;PS_2.c: 244: }
 15231  1967  0008               	return
 15232  1968                     l5946:	
 15233                           
 15234                           ;PS_2.c: 245: else
 15235                           ;PS_2.c: 246: {
 15236                           ;PS_2.c: 247: return 0;
 15237  1968  3000               	movlw	0
 15238  1969  0008               	return
 15239  196A                     __end_of_READ_PS_2_PIN:	
 15240                           
 15241                           	psect	text44
 15242  19B6                     __ptext44:	
 15243 ;; *************** function _PS_2_ENABLE_INTERRUPT *****************
 15244 ;; Defined at:
 15245 ;;		line 199 in file "PS_2.c"
 15246 ;; Parameters:    Size  Location     Type
 15247 ;;  DATA_CLK        1    wreg     unsigned char 
 15248 ;; Auto vars:     Size  Location     Type
 15249 ;;  DATA_CLK        1    6[BANK0 ] unsigned char 
 15250 ;; Return value:  Size  Location     Type
 15251 ;;		None               void
 15252 ;; Registers used:
 15253 ;;		wreg, status,2, status,0
 15254 ;; Tracked objects:
 15255 ;;		On entry : 0/0
 15256 ;;		On exit  : 0/0
 15257 ;;		Unchanged: 0/0
 15258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15260 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15261 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15262 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15263 ;;Total ram usage:        2 bytes
 15264 ;; Hardware stack levels used:    1
 15265 ;; Hardware stack levels required when called:    3
 15266 ;; This function calls:
 15267 ;;		Nothing
 15268 ;; This function is called by:
 15269 ;;		_main
 15270 ;;		_PS_2_Update
 15271 ;;		_Send_PS2
 15272 ;;		_Init_PS_2_Send
 15273 ;;		_Keyboard_Connected
 15274 ;; This function uses a non-reentrant model
 15275 ;;
 15276                           
 15277                           
 15278                           ;psect for function _PS_2_ENABLE_INTERRUPT
 15279  19B6                     _PS_2_ENABLE_INTERRUPT:	
 15280                           
 15281                           ;incstack = 0
 15282                           ; Regs used in _PS_2_ENABLE_INTERRUPT: [wreg+status,2+status,0]
 15283                           ;PS_2_ENABLE_INTERRUPT@DATA_CLK stored from wreg
 15284  19B6  0020               	movlb	0	; select bank0
 15285  19B7  00A6               	movwf	PS_2_ENABLE_INTERRUPT@DATA_CLK
 15286                           
 15287                           ;PS_2.c: 201: if(DATA_CLK == 0b00100000)
 15288  19B8  0826               	movf	PS_2_ENABLE_INTERRUPT@DATA_CLK,w
 15289  19B9  3A20               	xorlw	32
 15290  19BA  1D03               	skipz
 15291  19BB  29C3               	goto	l5964
 15292                           
 15293                           ;PS_2.c: 202: {
 15294                           ;PS_2.c: 205: IOCAF &= ~0b00100000;
 15295  19BC  30DF               	movlw	223
 15296  19BD  00A5               	movwf	??_PS_2_ENABLE_INTERRUPT
 15297  19BE  0825               	movf	??_PS_2_ENABLE_INTERRUPT,w
 15298  19BF  0027               	movlb	7	; select bank7
 15299  19C0  0593               	andwf	19,f	;volatile
 15300                           
 15301                           ;PS_2.c: 206: IOCAN |= 0b00100000;
 15302  19C1  1692               	bsf	18,5	;volatile
 15303                           
 15304                           ;PS_2.c: 208: }
 15305  19C2  0008               	return
 15306  19C3                     l5964:	
 15307                           
 15308                           ;PS_2.c: 209: else
 15309                           ;PS_2.c: 210: {
 15310                           ;PS_2.c: 213: IOCAF &= ~0b00010000;
 15311  19C3  30EF               	movlw	239
 15312  19C4  0020               	movlb	0	; select bank0
 15313  19C5  00A5               	movwf	??_PS_2_ENABLE_INTERRUPT
 15314  19C6  0825               	movf	??_PS_2_ENABLE_INTERRUPT,w
 15315  19C7  0027               	movlb	7	; select bank7
 15316  19C8  0593               	andwf	19,f	;volatile
 15317                           
 15318                           ;PS_2.c: 214: IOCAN |= 0b00010000;
 15319  19C9  1612               	bsf	18,4	;volatile
 15320  19CA  0008               	return
 15321  19CB                     __end_of_PS_2_ENABLE_INTERRUPT:	
 15322                           
 15323                           	psect	text45
 15324  18D9                     __ptext45:	
 15325 ;; *************** function _Data_TRIS *****************
 15326 ;; Defined at:
 15327 ;;		line 135 in file "PS_2.c"
 15328 ;; Parameters:    Size  Location     Type
 15329 ;;  direction       1    wreg     unsigned char 
 15330 ;; Auto vars:     Size  Location     Type
 15331 ;;  direction       1    5[BANK0 ] unsigned char 
 15332 ;; Return value:  Size  Location     Type
 15333 ;;		None               void
 15334 ;; Registers used:
 15335 ;;		wreg, status,2, status,0
 15336 ;; Tracked objects:
 15337 ;;		On entry : 0/0
 15338 ;;		On exit  : 0/0
 15339 ;;		Unchanged: 0/0
 15340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15342 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15344 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15345 ;;Total ram usage:        1 bytes
 15346 ;; Hardware stack levels used:    1
 15347 ;; Hardware stack levels required when called:    3
 15348 ;; This function calls:
 15349 ;;		Nothing
 15350 ;; This function is called by:
 15351 ;;		_PS_2_INIT
 15352 ;;		_Send_PS2
 15353 ;; This function uses a non-reentrant model
 15354 ;;
 15355                           
 15356                           
 15357                           ;psect for function _Data_TRIS
 15358  18D9                     _Data_TRIS:	
 15359                           
 15360                           ;incstack = 0
 15361                           ; Regs used in _Data_TRIS: [wreg+status,2+status,0]
 15362                           ;Data_TRIS@direction stored from wreg
 15363  18D9  0020               	movlb	0	; select bank0
 15364  18DA  00A5               	movwf	Data_TRIS@direction
 15365                           
 15366                           ;PS_2.c: 137: if(direction == 0)
 15367  18DB  08A5               	movf	Data_TRIS@direction,f
 15368  18DC  1D03               	skipz
 15369  18DD  28E1               	goto	l598
 15370                           
 15371                           ;PS_2.c: 138: {
 15372                           ;PS_2.c: 139: TRISAbits.TRISA4 = 0;
 15373  18DE  0021               	movlb	1	; select bank1
 15374  18DF  120C               	bcf	12,4	;volatile
 15375                           
 15376                           ;PS_2.c: 140: }
 15377  18E0  0008               	return
 15378  18E1                     l598:	
 15379                           
 15380                           ;PS_2.c: 141: else
 15381                           ;PS_2.c: 142: {
 15382                           ;PS_2.c: 143: TRISAbits.TRISA4 = 1;
 15383  18E1  0021               	movlb	1	; select bank1
 15384  18E2  160C               	bsf	12,4	;volatile
 15385  18E3  0008               	return
 15386  18E4                     __end_of_Data_TRIS:	
 15387                           
 15388                           	psect	text46
 15389  18CE                     __ptext46:	
 15390 ;; *************** function _Clock_TRIS *****************
 15391 ;; Defined at:
 15392 ;;		line 118 in file "PS_2.c"
 15393 ;; Parameters:    Size  Location     Type
 15394 ;;  direction       1    wreg     unsigned char 
 15395 ;; Auto vars:     Size  Location     Type
 15396 ;;  direction       1    5[BANK0 ] unsigned char 
 15397 ;; Return value:  Size  Location     Type
 15398 ;;		None               void
 15399 ;; Registers used:
 15400 ;;		wreg, status,2, status,0
 15401 ;; Tracked objects:
 15402 ;;		On entry : 0/0
 15403 ;;		On exit  : 0/0
 15404 ;;		Unchanged: 0/0
 15405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15407 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15409 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15410 ;;Total ram usage:        1 bytes
 15411 ;; Hardware stack levels used:    1
 15412 ;; Hardware stack levels required when called:    3
 15413 ;; This function calls:
 15414 ;;		Nothing
 15415 ;; This function is called by:
 15416 ;;		_PS_2_INIT
 15417 ;;		_Send_PS2
 15418 ;; This function uses a non-reentrant model
 15419 ;;
 15420                           
 15421                           
 15422                           ;psect for function _Clock_TRIS
 15423  18CE                     _Clock_TRIS:	
 15424                           
 15425                           ;incstack = 0
 15426                           ; Regs used in _Clock_TRIS: [wreg+status,2+status,0]
 15427                           ;Clock_TRIS@direction stored from wreg
 15428  18CE  0020               	movlb	0	; select bank0
 15429  18CF  00A5               	movwf	Clock_TRIS@direction
 15430                           
 15431                           ;PS_2.c: 120: if(direction == 0)
 15432  18D0  08A5               	movf	Clock_TRIS@direction,f
 15433  18D1  1D03               	skipz
 15434  18D2  28D6               	goto	l593
 15435                           
 15436                           ;PS_2.c: 121: {
 15437                           ;PS_2.c: 122: TRISAbits.TRISA5 = 0;
 15438  18D3  0021               	movlb	1	; select bank1
 15439  18D4  128C               	bcf	12,5	;volatile
 15440                           
 15441                           ;PS_2.c: 123: }
 15442  18D5  0008               	return
 15443  18D6                     l593:	
 15444                           
 15445                           ;PS_2.c: 124: else
 15446                           ;PS_2.c: 125: {
 15447                           ;PS_2.c: 126: TRISAbits.TRISA5 = 1;
 15448  18D6  0021               	movlb	1	; select bank1
 15449  18D7  168C               	bsf	12,5	;volatile
 15450  18D8  0008               	return
 15451  18D9                     __end_of_Clock_TRIS:	
 15452                           
 15453                           	psect	text47
 15454  1A9B                     __ptext47:	
 15455 ;; *************** function _CheckSum_byte *****************
 15456 ;; Defined at:
 15457 ;;		line 69 in file "MISC.c"
 15458 ;; Parameters:    Size  Location     Type
 15459 ;;  This            2    5[BANK0 ] unsigned int 
 15460 ;;  Odd_Even        1    7[BANK0 ] unsigned char 
 15461 ;; Auto vars:     Size  Location     Type
 15462 ;;  ThisTemp        2    9[BANK0 ] unsigned int 
 15463 ;;  i               1   12[BANK0 ] unsigned char 
 15464 ;;  Parity          1   11[BANK0 ] unsigned char 
 15465 ;; Return value:  Size  Location     Type
 15466 ;;                  1    wreg      unsigned char 
 15467 ;; Registers used:
 15468 ;;		wreg, status,2, status,0
 15469 ;; Tracked objects:
 15470 ;;		On entry : 0/0
 15471 ;;		On exit  : 0/0
 15472 ;;		Unchanged: 0/0
 15473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15474 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15475 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15476 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15477 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15478 ;;Total ram usage:        8 bytes
 15479 ;; Hardware stack levels used:    1
 15480 ;; Hardware stack levels required when called:    3
 15481 ;; This function calls:
 15482 ;;		Nothing
 15483 ;; This function is called by:
 15484 ;;		_UARTchar
 15485 ;;		_PS_2_Update
 15486 ;;		_Send_PS2
 15487 ;; This function uses a non-reentrant model
 15488 ;;
 15489                           
 15490                           
 15491                           ;psect for function _CheckSum_byte
 15492  1A9B                     _CheckSum_byte:	
 15493                           
 15494                           ;MISC.c: 71: char i = 0;
 15495                           
 15496                           ;incstack = 0
 15497                           ; Regs used in _CheckSum_byte: [wreg+status,2+status,0]
 15498  1A9B  0020               	movlb	0	; select bank0
 15499  1A9C  01AC               	clrf	CheckSum_byte@i
 15500                           
 15501                           ;MISC.c: 72: unsigned char Parity = 0;
 15502  1A9D  01AB               	clrf	CheckSum_byte@Parity
 15503                           
 15504                           ;MISC.c: 73: unsigned int ThisTemp = This;
 15505  1A9E  0826               	movf	CheckSum_byte@This+1,w
 15506  1A9F  01AA               	clrf	CheckSum_byte@ThisTemp+1
 15507  1AA0  07AA               	addwf	CheckSum_byte@ThisTemp+1,f
 15508  1AA1  0825               	movf	CheckSum_byte@This,w
 15509  1AA2  01A9               	clrf	CheckSum_byte@ThisTemp
 15510  1AA3  07A9               	addwf	CheckSum_byte@ThisTemp,f
 15511                           
 15512                           ;MISC.c: 75: for (i =0; i<8; i++)
 15513  1AA4  01AC               	clrf	CheckSum_byte@i
 15514  1AA5  3008               	movlw	8
 15515  1AA6  022C               	subwf	CheckSum_byte@i,w
 15516  1AA7  1803               	btfsc	3,0
 15517  1AA8  2ABC               	goto	l5684
 15518  1AA9                     l288:	
 15519                           
 15520                           ;MISC.c: 76: {
 15521                           ;MISC.c: 77: if((ThisTemp & 0x01) == 1)
 15522  1AA9  1C29               	btfss	CheckSum_byte@ThisTemp,0
 15523  1AAA  2AAF               	goto	l290
 15524                           
 15525                           ;MISC.c: 78: {
 15526                           ;MISC.c: 79: Parity++;
 15527  1AAB  3001               	movlw	1
 15528  1AAC  00A8               	movwf	??_CheckSum_byte
 15529  1AAD  0828               	movf	??_CheckSum_byte,w
 15530  1AAE  07AB               	addwf	CheckSum_byte@Parity,f
 15531  1AAF                     l290:	
 15532                           
 15533                           ;MISC.c: 80: }
 15534                           ;MISC.c: 81: ThisTemp >>= 1;
 15535  1AAF  3001               	movlw	1
 15536  1AB0                     u7405:	
 15537  1AB0  36AA               	lsrf	CheckSum_byte@ThisTemp+1,f
 15538  1AB1  0CA9               	rrf	CheckSum_byte@ThisTemp,f
 15539  1AB2  0B89               	decfsz	9,f
 15540  1AB3  2AB0               	goto	u7405
 15541  1AB4  3001               	movlw	1
 15542  1AB5  00A8               	movwf	??_CheckSum_byte
 15543  1AB6  0828               	movf	??_CheckSum_byte,w
 15544  1AB7  07AC               	addwf	CheckSum_byte@i,f
 15545  1AB8  3008               	movlw	8
 15546  1AB9  022C               	subwf	CheckSum_byte@i,w
 15547  1ABA  1C03               	skipc
 15548  1ABB  2AA9               	goto	l288
 15549  1ABC                     l5684:	
 15550                           
 15551                           ;MISC.c: 82: }
 15552                           ;MISC.c: 83: if(Odd_Even == 3)
 15553  1ABC  0827               	movf	CheckSum_byte@Odd_Even,w
 15554  1ABD  3A03               	xorlw	3
 15555  1ABE  1D03               	skipz
 15556  1ABF  2AC6               	goto	l291
 15557                           
 15558                           ;MISC.c: 84: {
 15559                           ;MISC.c: 85: if(Parity % 2 == 0)
 15560  1AC0  182B               	btfsc	CheckSum_byte@Parity,0
 15561  1AC1  2AC4               	goto	l5692
 15562                           
 15563                           ;MISC.c: 86: {
 15564                           ;MISC.c: 87: return 1;
 15565  1AC2  3001               	movlw	1
 15566  1AC3  0008               	return
 15567  1AC4                     l5692:	
 15568                           
 15569                           ;MISC.c: 88: }
 15570                           ;MISC.c: 89: return 0;
 15571  1AC4  3000               	movlw	0
 15572                           
 15573                           ;MISC.c: 90: }
 15574  1AC5  0008               	return
 15575  1AC6                     l291:	
 15576                           
 15577                           ;MISC.c: 91: else
 15578                           ;MISC.c: 92: {
 15579                           ;MISC.c: 93: if(Parity % 2 == 1)
 15580  1AC6  1C2B               	btfss	CheckSum_byte@Parity,0
 15581  1AC7  2ACA               	goto	l5702
 15582                           
 15583                           ;MISC.c: 94: {
 15584                           ;MISC.c: 95: return 1;
 15585  1AC8  3001               	movlw	1
 15586  1AC9  0008               	return
 15587  1ACA                     l5702:	
 15588                           
 15589                           ;MISC.c: 96: }
 15590                           ;MISC.c: 97: return 0;
 15591  1ACA  3000               	movlw	0
 15592  1ACB  0008               	return
 15593  1ACC                     __end_of_CheckSum_byte:	
 15594                           
 15595                           	psect	text48
 15596  0BC5                     __ptext48:	
 15597 ;; *************** function _PS_2_DISABLE_INTERRUPT *****************
 15598 ;; Defined at:
 15599 ;;		line 176 in file "PS_2.c"
 15600 ;; Parameters:    Size  Location     Type
 15601 ;;  DATA_CLK        1    wreg     unsigned char 
 15602 ;; Auto vars:     Size  Location     Type
 15603 ;;  DATA_CLK        1    6[BANK0 ] unsigned char 
 15604 ;; Return value:  Size  Location     Type
 15605 ;;		None               void
 15606 ;; Registers used:
 15607 ;;		wreg, status,2, status,0
 15608 ;; Tracked objects:
 15609 ;;		On entry : 0/0
 15610 ;;		On exit  : 0/0
 15611 ;;		Unchanged: 0/0
 15612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15614 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15615 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15616 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15617 ;;Total ram usage:        2 bytes
 15618 ;; Hardware stack levels used:    1
 15619 ;; Hardware stack levels required when called:    3
 15620 ;; This function calls:
 15621 ;;		Nothing
 15622 ;; This function is called by:
 15623 ;;		_main
 15624 ;;		_PS_2_Update
 15625 ;;		_Init_PS_2_Send
 15626 ;;		_Keyboard_Connected
 15627 ;; This function uses a non-reentrant model
 15628 ;;
 15629                           
 15630                           
 15631                           ;psect for function _PS_2_DISABLE_INTERRUPT
 15632  0BC5                     _PS_2_DISABLE_INTERRUPT:	
 15633                           
 15634                           ;incstack = 0
 15635                           ; Regs used in _PS_2_DISABLE_INTERRUPT: [wreg+status,2+status,0]
 15636                           ;PS_2_DISABLE_INTERRUPT@DATA_CLK stored from wreg
 15637  0BC5  0020               	movlb	0	; select bank0
 15638  0BC6  00A6               	movwf	PS_2_DISABLE_INTERRUPT@DATA_CLK
 15639                           
 15640                           ;PS_2.c: 178: if(DATA_CLK == 0b00100000)
 15641  0BC7  0826               	movf	PS_2_DISABLE_INTERRUPT@DATA_CLK,w
 15642  0BC8  3A20               	xorlw	32
 15643  0BC9  1D03               	skipz
 15644  0BCA  2BD7               	goto	l6140
 15645                           
 15646                           ;PS_2.c: 179: {
 15647                           ;PS_2.c: 182: IOCAN &= ~0b00100000;
 15648  0BCB  30DF               	movlw	223
 15649  0BCC  00A5               	movwf	??_PS_2_DISABLE_INTERRUPT
 15650  0BCD  0825               	movf	??_PS_2_DISABLE_INTERRUPT,w
 15651  0BCE  0027               	movlb	7	; select bank7
 15652  0BCF  0592               	andwf	18,f	;volatile
 15653                           
 15654                           ;PS_2.c: 183: IOCAF &= ~0b00100000;
 15655  0BD0  30DF               	movlw	223
 15656  0BD1  0020               	movlb	0	; select bank0
 15657  0BD2  00A5               	movwf	??_PS_2_DISABLE_INTERRUPT
 15658  0BD3  0825               	movf	??_PS_2_DISABLE_INTERRUPT,w
 15659  0BD4  0027               	movlb	7	; select bank7
 15660  0BD5  0593               	andwf	19,f	;volatile
 15661                           
 15662                           ;PS_2.c: 184: }
 15663  0BD6  0008               	return
 15664  0BD7                     l6140:	
 15665                           
 15666                           ;PS_2.c: 185: else
 15667                           ;PS_2.c: 186: {
 15668                           ;PS_2.c: 189: IOCAN &= ~0b00010000;
 15669  0BD7  30EF               	movlw	239
 15670  0BD8  0020               	movlb	0	; select bank0
 15671  0BD9  00A5               	movwf	??_PS_2_DISABLE_INTERRUPT
 15672  0BDA  0825               	movf	??_PS_2_DISABLE_INTERRUPT,w
 15673  0BDB  0027               	movlb	7	; select bank7
 15674  0BDC  0592               	andwf	18,f	;volatile
 15675                           
 15676                           ;PS_2.c: 190: IOCAF &= ~0b00010000;
 15677  0BDD  30EF               	movlw	239
 15678  0BDE  0020               	movlb	0	; select bank0
 15679  0BDF  00A5               	movwf	??_PS_2_DISABLE_INTERRUPT
 15680  0BE0  0825               	movf	??_PS_2_DISABLE_INTERRUPT,w
 15681  0BE1  0027               	movlb	7	; select bank7
 15682  0BE2  0593               	andwf	19,f	;volatile
 15683  0BE3  0008               	return
 15684  0BE4                     __end_of_PS_2_DISABLE_INTERRUPT:	
 15685                           
 15686                           	psect	text49
 15687  19CB                     __ptext49:	
 15688 ;; *************** function _InitApp *****************
 15689 ;; Defined at:
 15690 ;;		line 64 in file "user.c"
 15691 ;; Parameters:    Size  Location     Type
 15692 ;;		None
 15693 ;; Auto vars:     Size  Location     Type
 15694 ;;		None
 15695 ;; Return value:  Size  Location     Type
 15696 ;;		None               void
 15697 ;; Registers used:
 15698 ;;		wreg, status,2
 15699 ;; Tracked objects:
 15700 ;;		On entry : 0/0
 15701 ;;		On exit  : 0/0
 15702 ;;		Unchanged: 0/0
 15703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15707 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15708 ;;Total ram usage:        0 bytes
 15709 ;; Hardware stack levels used:    1
 15710 ;; Hardware stack levels required when called:    3
 15711 ;; This function calls:
 15712 ;;		Nothing
 15713 ;; This function is called by:
 15714 ;;		_main
 15715 ;; This function uses a non-reentrant model
 15716 ;;
 15717                           
 15718                           
 15719                           ;psect for function _InitApp
 15720  19CB                     _InitApp:	
 15721                           
 15722                           ;user.c: 66: LATC =0;
 15723                           
 15724                           ;incstack = 0
 15725                           ; Regs used in _InitApp: [wreg+status,2]
 15726  19CB  0022               	movlb	2	; select bank2
 15727  19CC  018E               	clrf	14	;volatile
 15728                           
 15729                           ;user.c: 67: LATA =0;
 15730  19CD  018C               	clrf	12	;volatile
 15731                           
 15732                           ;user.c: 68: TRISCbits.TRISC2 = 0;
 15733  19CE  0021               	movlb	1	; select bank1
 15734  19CF  110E               	bcf	14,2	;volatile
 15735                           
 15736                           ;user.c: 69: TRISCbits.TRISC1 = 0;
 15737  19D0  108E               	bcf	14,1	;volatile
 15738                           
 15739                           ;user.c: 70: TRISCbits.TRISC3 = 0;
 15740  19D1  118E               	bcf	14,3	;volatile
 15741                           
 15742                           ;user.c: 71: TRISCbits.TRISC4 = 0;
 15743  19D2  120E               	bcf	14,4	;volatile
 15744                           
 15745                           ;user.c: 72: TRISAbits.TRISA2 = 1;
 15746  19D3  150C               	bsf	12,2	;volatile
 15747                           
 15748                           ;user.c: 74: TRISCbits.TRISC0 = 1;
 15749  19D4  140E               	bsf	14,0	;volatile
 15750                           
 15751                           ;user.c: 79: TRISCbits.TRISC5 = 1;
 15752  19D5  168E               	bsf	14,5	;volatile
 15753                           
 15754                           ;user.c: 82: LATC |= 0b00000010;
 15755  19D6  0022               	movlb	2	; select bank2
 15756  19D7  148E               	bsf	14,1	;volatile
 15757                           
 15758                           ;user.c: 83: PPSLOCK =0;
 15759  19D8  003C               	movlb	28	; select bank28
 15760  19D9  018F               	clrf	15	;volatile
 15761                           
 15762                           ;user.c: 84: RC2PPS = 0b00010100;
 15763  19DA  3014               	movlw	20
 15764  19DB  003D               	movlb	29	; select bank29
 15765  19DC  00A2               	movwf	34	;volatile
 15766                           
 15767                           ;user.c: 85: CKPPS = 0b00010010;
 15768  19DD  3012               	movlw	18
 15769  19DE  003C               	movlb	28	; select bank28
 15770  19DF  00A5               	movwf	37	;volatile
 15771                           
 15772                           ;user.c: 87: RXPPS = 0b00010101;
 15773  19E0  3015               	movlw	21
 15774  19E1  00A4               	movwf	36	;volatile
 15775                           
 15776                           ;user.c: 89: PPSLOCK =1;
 15777  19E2  3001               	movlw	1
 15778  19E3  008F               	movwf	15	;volatile
 15779                           
 15780                           ;user.c: 91: ANSELA &= ~0xFF;
 15781  19E4  0023               	movlb	3	; select bank3
 15782  19E5  018C               	clrf	12	;volatile
 15783                           
 15784                           ;user.c: 92: ANSELA |= 0b00000100;
 15785  19E6  150C               	bsf	12,2	;volatile
 15786                           
 15787                           ;user.c: 93: ANSELC &= ~0xFF;
 15788  19E7  018E               	clrf	14	;volatile
 15789                           
 15790                           ;user.c: 94: OPTION_REGbits.nWPUEN = 0;
 15791  19E8  0021               	movlb	1	; select bank1
 15792  19E9  1395               	bcf	21,7	;volatile
 15793                           
 15794                           ;user.c: 95: WPUC = 0b00100000;
 15795  19EA  3020               	movlw	32
 15796  19EB  0024               	movlb	4	; select bank4
 15797  19EC  008E               	movwf	14	;volatile
 15798                           
 15799                           ;user.c: 96: WPUA = 0;
 15800  19ED  018C               	clrf	12	;volatile
 15801  19EE  0008               	return
 15802  19EF                     __end_of_InitApp:	
 15803                           
 15804                           	psect	text50
 15805  1946                     __ptext50:	
 15806 ;; *************** function _ConfigureOscillator *****************
 15807 ;; Defined at:
 15808 ;;		line 40 in file "system.c"
 15809 ;; Parameters:    Size  Location     Type
 15810 ;;		None
 15811 ;; Auto vars:     Size  Location     Type
 15812 ;;		None
 15813 ;; Return value:  Size  Location     Type
 15814 ;;		None               void
 15815 ;; Registers used:
 15816 ;;		wreg, status,2, status,0
 15817 ;; Tracked objects:
 15818 ;;		On entry : 0/0
 15819 ;;		On exit  : 0/0
 15820 ;;		Unchanged: 0/0
 15821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15824 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15825 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15826 ;;Total ram usage:        1 bytes
 15827 ;; Hardware stack levels used:    1
 15828 ;; Hardware stack levels required when called:    3
 15829 ;; This function calls:
 15830 ;;		Nothing
 15831 ;; This function is called by:
 15832 ;;		_main
 15833 ;; This function uses a non-reentrant model
 15834 ;;
 15835                           
 15836                           
 15837                           ;psect for function _ConfigureOscillator
 15838  1946                     _ConfigureOscillator:	
 15839                           
 15840                           ;system.c: 42: OSCCON= 0b11110000;
 15841                           
 15842                           ;incstack = 0
 15843                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 15844  1946  30F0               	movlw	240
 15845  1947  0021               	movlb	1	; select bank1
 15846  1948  0099               	movwf	25	;volatile
 15847  1949                     l5110:	
 15848                           ;system.c: 43: while(!(OSCSTAT & HFIOFS));
 15849                           
 15850  1949  3000               	movlw	0
 15851  194A  181A               	btfsc	26,0	;volatile
 15852  194B  3001               	movlw	1
 15853  194C  051A               	andwf	26,w	;volatile
 15854  194D  1903               	btfsc	3,2
 15855  194E  2949               	goto	l5110
 15856  194F                     l5112:	
 15857                           ;system.c: 44: while(!(OSCSTAT & = 0b01000000));
 15858                           
 15859  194F  3040               	movlw	64
 15860  1950  0020               	movlb	0	; select bank0
 15861  1951  00A5               	movwf	??_ConfigureOscillator
 15862  1952  0825               	movf	??_ConfigureOscillator,w
 15863  1953  0021               	movlb	1	; select bank1
 15864  1954  059A               	andwf	26,f	;volatile
 15865  1955  1D03               	btfss	3,2
 15866  1956  0008               	return
 15867  1957  294F               	goto	l5112
 15868  1958                     __end_of_ConfigureOscillator:	
 15869                           
 15870                           	psect	intentry
 15871  0004                     __pintentry:	
 15872 ;; *************** function _isr *****************
 15873 ;; Defined at:
 15874 ;;		line 72 in file "interrupts.c"
 15875 ;; Parameters:    Size  Location     Type
 15876 ;;		None
 15877 ;; Auto vars:     Size  Location     Type
 15878 ;;  rx              1    4[BANK0 ] unsigned char 
 15879 ;;  Rx_fault        1    3[BANK0 ] unsigned char 
 15880 ;; Return value:  Size  Location     Type
 15881 ;;		None               void
 15882 ;; Registers used:
 15883 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 15884 ;; Tracked objects:
 15885 ;;		On entry : 0/0
 15886 ;;		On exit  : 0/0
 15887 ;;		Unchanged: 0/0
 15888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15890 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15891 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15892 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15893 ;;Total ram usage:        4 bytes
 15894 ;; Hardware stack levels used:    1
 15895 ;; Hardware stack levels required when called:    2
 15896 ;; This function calls:
 15897 ;;		_READ_CONFIG_PIN
 15898 ;;		i1_READ_PS_2_PIN
 15899 ;;		i1_ReadUSART
 15900 ;;		i1_UART_send_break_timed
 15901 ;;		i1_UARTchar
 15902 ;; This function is called by:
 15903 ;;		Interrupt level 1
 15904 ;; This function uses a non-reentrant model
 15905 ;;
 15906                           
 15907  0004                     _isr:	
 15908                           
 15909                           ;incstack = 0
 15910                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 15911  0004  147E               	bsf	126,0	;set compiler interrupt flag
 15912  0005  3180               	pagesel	$
 15913  0006  0020               	movlb	0	; select bank0
 15914  0007  087F               	movf	127,w
 15915  0008  00A2               	movwf	??_isr+1
 15916                           
 15917                           ;interrupts.c: 74: unsigned char rx;
 15918                           ;interrupts.c: 75: unsigned char Rx_fault =0;
 15919  0009  01A3               	clrf	isr@Rx_fault
 15920                           
 15921                           ;interrupts.c: 77: if(IOCAF & 0b00100000)
 15922  000A  0027               	movlb	7	; select bank7
 15923  000B  1E93               	btfss	19,5	;volatile
 15924  000C  287C               	goto	i1l65
 15925                           
 15926                           ;interrupts.c: 78: {
 15927                           ;interrupts.c: 80: LATC |= 0b00010000;
 15928  000D  0022               	movlb	2	; select bank2
 15929  000E  160E               	bsf	14,4	;volatile
 15930                           
 15931                           ;interrupts.c: 81: if(PS_2_bits <44)
 15932  000F  302C               	movlw	44
 15933  0010  0020               	movlb	0	; select bank0
 15934  0011  026A               	subwf	_PS_2_bits,w
 15935  0012  1803               	skipnc
 15936  0013  287A               	goto	i1l5492
 15937                           
 15938                           ;interrupts.c: 82: {
 15939                           ;interrupts.c: 83: if(PS_2_bits <11 )
 15940  0014  300B               	movlw	11
 15941  0015  026A               	subwf	_PS_2_bits,w
 15942  0016  1803               	skipnc
 15943  0017  2830               	goto	i1l5466
 15944                           
 15945                           ;interrupts.c: 84: {
 15946                           ;interrupts.c: 85: PS_2_Read_Data_FirstTEMP <<= 1;
 15947  0018  3001               	movlw	1
 15948  0019  0024               	movlb	4	; select bank4
 15949  001A                     u697_25:	
 15950  001A  35AE               	lslf	_PS_2_Read_Data_FirstTEMP^(0+512),f
 15951  001B  0DAF               	rlf	(_PS_2_Read_Data_FirstTEMP+1)^(0+512),f
 15952  001C  0B89               	decfsz	9,f
 15953  001D  281A               	goto	u697_25
 15954                           
 15955                           ;interrupts.c: 86: if(READ_PS_2_PIN(0b00010000))
 15956  001E  3010               	movlw	16
 15957  001F  3199  216A  3180   	fcall	i1_READ_PS_2_PIN
 15958  0022  3A00               	xorlw	0
 15959  0023  1903               	skipnz
 15960  0024  282A               	goto	i1l5462
 15961                           
 15962                           ;interrupts.c: 87: {
 15963                           ;interrupts.c: 88: PS_2_Read_Data_FirstTEMP++;
 15964  0025  3001               	movlw	1
 15965  0026  0024               	movlb	4	; select bank4
 15966  0027  07AE               	addwf	_PS_2_Read_Data_FirstTEMP^(0+512),f
 15967  0028  3000               	movlw	0
 15968  0029  3DAF               	addwfc	(_PS_2_Read_Data_FirstTEMP+1)^(0+512),f
 15969  002A                     i1l5462:	
 15970                           
 15971                           ;interrupts.c: 89: }
 15972                           ;interrupts.c: 90: PS_2_Read_Data_SecondTEMP = 0;
 15973  002A  0024               	movlb	4	; select bank4
 15974  002B  01B2               	clrf	_PS_2_Read_Data_SecondTEMP^(0+512)
 15975  002C  01B3               	clrf	(_PS_2_Read_Data_SecondTEMP+1)^(0+512)
 15976                           
 15977                           ;interrupts.c: 91: PS_2_Read_Data_ThirdTEMP = 0;
 15978  002D  01B4               	clrf	_PS_2_Read_Data_ThirdTEMP^(0+512)
 15979  002E  01B5               	clrf	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512)
 15980                           
 15981                           ;interrupts.c: 92: }
 15982  002F  2872               	goto	i1l5488
 15983  0030                     i1l5466:	
 15984                           
 15985                           ;interrupts.c: 93: else if(PS_2_bits <22 )
 15986  0030  3016               	movlw	22
 15987  0031  0020               	movlb	0	; select bank0
 15988  0032  026A               	subwf	_PS_2_bits,w
 15989  0033  1803               	skipnc
 15990  0034  2848               	goto	i1l5474
 15991                           
 15992                           ;interrupts.c: 94: {
 15993                           ;interrupts.c: 95: PS_2_Read_Data_SecondTEMP <<= 1;
 15994  0035  3001               	movlw	1
 15995  0036  0024               	movlb	4	; select bank4
 15996  0037                     u700_25:	
 15997  0037  35B2               	lslf	_PS_2_Read_Data_SecondTEMP^(0+512),f
 15998  0038  0DB3               	rlf	(_PS_2_Read_Data_SecondTEMP+1)^(0+512),f
 15999  0039  0B89               	decfsz	9,f
 16000  003A  2837               	goto	u700_25
 16001                           
 16002                           ;interrupts.c: 96: if(READ_PS_2_PIN(0b00010000))
 16003  003B  3010               	movlw	16
 16004  003C  3199  216A  3180   	fcall	i1_READ_PS_2_PIN
 16005  003F  3A00               	xorlw	0
 16006  0040  1903               	skipnz
 16007  0041  2872               	goto	i1l5488
 16008                           
 16009                           ;interrupts.c: 97: {
 16010                           ;interrupts.c: 98: PS_2_Read_Data_SecondTEMP++;
 16011  0042  3001               	movlw	1
 16012  0043  0024               	movlb	4	; select bank4
 16013  0044  07B2               	addwf	_PS_2_Read_Data_SecondTEMP^(0+512),f
 16014  0045  3000               	movlw	0
 16015  0046  3DB3               	addwfc	(_PS_2_Read_Data_SecondTEMP+1)^(0+512),f
 16016                           
 16017                           ;interrupts.c: 99: }
 16018                           ;interrupts.c: 100: }
 16019  0047  2872               	goto	i1l5488
 16020  0048                     i1l5474:	
 16021                           
 16022                           ;interrupts.c: 101: else if(PS_2_bits <33 )
 16023  0048  3021               	movlw	33
 16024  0049  0020               	movlb	0	; select bank0
 16025  004A  026A               	subwf	_PS_2_bits,w
 16026  004B  1803               	skipnc
 16027  004C  2860               	goto	i1l5482
 16028                           
 16029                           ;interrupts.c: 102: {
 16030                           ;interrupts.c: 103: PS_2_Read_Data_ThirdTEMP <<= 1;
 16031  004D  3001               	movlw	1
 16032  004E  0024               	movlb	4	; select bank4
 16033  004F                     u703_25:	
 16034  004F  35B4               	lslf	_PS_2_Read_Data_ThirdTEMP^(0+512),f
 16035  0050  0DB5               	rlf	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512),f
 16036  0051  0B89               	decfsz	9,f
 16037  0052  284F               	goto	u703_25
 16038                           
 16039                           ;interrupts.c: 104: if(READ_PS_2_PIN(0b00010000))
 16040  0053  3010               	movlw	16
 16041  0054  3199  216A  3180   	fcall	i1_READ_PS_2_PIN
 16042  0057  3A00               	xorlw	0
 16043  0058  1903               	skipnz
 16044  0059  2872               	goto	i1l5488
 16045                           
 16046                           ;interrupts.c: 105: {
 16047                           ;interrupts.c: 106: PS_2_Read_Data_ThirdTEMP++;
 16048  005A  3001               	movlw	1
 16049  005B  0024               	movlb	4	; select bank4
 16050  005C  07B4               	addwf	_PS_2_Read_Data_ThirdTEMP^(0+512),f
 16051  005D  3000               	movlw	0
 16052  005E  3DB5               	addwfc	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512),f
 16053                           
 16054                           ;interrupts.c: 107: }
 16055                           ;interrupts.c: 108: }
 16056  005F  2872               	goto	i1l5488
 16057  0060                     i1l5482:	
 16058                           
 16059                           ;interrupts.c: 109: else
 16060                           ;interrupts.c: 110: {
 16061                           ;interrupts.c: 111: PS_2_Read_Data_ForthTEMP <<= 1;
 16062  0060  3001               	movlw	1
 16063  0061  0024               	movlb	4	; select bank4
 16064  0062                     u705_25:	
 16065  0062  35B0               	lslf	_PS_2_Read_Data_ForthTEMP^(0+512),f
 16066  0063  0DB1               	rlf	(_PS_2_Read_Data_ForthTEMP+1)^(0+512),f
 16067  0064  0B89               	decfsz	9,f
 16068  0065  2862               	goto	u705_25
 16069                           
 16070                           ;interrupts.c: 112: if(READ_PS_2_PIN(0b00010000))
 16071  0066  3010               	movlw	16
 16072  0067  3199  216A  3180   	fcall	i1_READ_PS_2_PIN
 16073  006A  3A00               	xorlw	0
 16074  006B  1903               	skipnz
 16075  006C  2872               	goto	i1l5488
 16076                           
 16077                           ;interrupts.c: 113: {
 16078                           ;interrupts.c: 114: PS_2_Read_Data_ForthTEMP++;
 16079  006D  3001               	movlw	1
 16080  006E  0024               	movlb	4	; select bank4
 16081  006F  07B0               	addwf	_PS_2_Read_Data_ForthTEMP^(0+512),f
 16082  0070  3000               	movlw	0
 16083  0071  3DB1               	addwfc	(_PS_2_Read_Data_ForthTEMP+1)^(0+512),f
 16084  0072                     i1l5488:	
 16085                           
 16086                           ;interrupts.c: 115: }
 16087                           ;interrupts.c: 116: }
 16088                           ;interrupts.c: 117: PS_2_bits++;
 16089  0072  3001               	movlw	1
 16090  0073  0020               	movlb	0	; select bank0
 16091  0074  00A1               	movwf	??_isr
 16092  0075  0821               	movf	??_isr,w
 16093  0076  07EA               	addwf	_PS_2_bits,f
 16094                           
 16095                           ;interrupts.c: 118: Read_Timer = 0;
 16096  0077  0024               	movlb	4	; select bank4
 16097  0078  01A4               	clrf	_Read_Timer^(0+512)
 16098  0079  01A5               	clrf	(_Read_Timer+1)^(0+512)
 16099  007A                     i1l5492:	
 16100                           
 16101                           ;interrupts.c: 119: }
 16102                           ;interrupts.c: 120: IOCAF &= ~0b00100000;
 16103  007A  30DF               	movlw	223
 16104  007B  287F               	goto	L23
 16105  007C                     i1l65:	
 16106                           ;interrupts.c: 121: }
 16107                           
 16108                           
 16109                           ;interrupts.c: 122: else if (IOCAF & 0b00010000)
 16110  007C  1E13               	btfss	19,4	;volatile
 16111  007D  2885               	goto	i1l78
 16112                           
 16113                           ;interrupts.c: 123: {
 16114                           ;interrupts.c: 124: IOCAF &= ~0b00010000;
 16115  007E  30EF               	movlw	239
 16116  007F                     L23:	
 16117  007F  0020               	movlb	0	; select bank0
 16118  0080  00A1               	movwf	??_isr
 16119  0081  0821               	movf	??_isr,w
 16120  0082  0027               	movlb	7	; select bank7
 16121  0083  0593               	andwf	19,f	;volatile
 16122                           
 16123                           ;interrupts.c: 125: }
 16124  0084  28E3               	goto	i1l92
 16125  0085                     i1l78:	
 16126                           
 16127                           ;interrupts.c: 126: else if (PIR1bits.RCIF)
 16128  0085  0020               	movlb	0	; select bank0
 16129  0086  1E91               	btfss	17,5	;volatile
 16130  0087  28C1               	goto	i1l80
 16131                           
 16132                           ;interrupts.c: 127: {
 16133                           ;interrupts.c: 130: LATC |= 0b00001000;
 16134  0088  0022               	movlb	2	; select bank2
 16135  0089  158E               	bsf	14,3	;volatile
 16136                           
 16137                           ;interrupts.c: 131: SinLEDtimer = 0;
 16138  008A  0024               	movlb	4	; select bank4
 16139  008B  01B6               	clrf	_SinLEDtimer^(0+512)
 16140  008C  01B7               	clrf	(_SinLEDtimer+1)^(0+512)
 16141                           
 16142                           ;interrupts.c: 132: Rx_fault = 0;
 16143  008D  0020               	movlb	0	; select bank0
 16144  008E  01A3               	clrf	isr@Rx_fault
 16145                           
 16146                           ;interrupts.c: 133: if(RC1STAbits.FERR)
 16147  008F  0023               	movlb	3	; select bank3
 16148  0090  1D1D               	btfss	29,2	;volatile
 16149  0091  2895               	goto	i1l5504
 16150                           
 16151                           ;interrupts.c: 134: {
 16152                           ;interrupts.c: 135: Rx_fault =1;
 16153  0092  0020               	movlb	0	; select bank0
 16154  0093  01A3               	clrf	isr@Rx_fault
 16155  0094  0AA3               	incf	isr@Rx_fault,f
 16156  0095                     i1l5504:	
 16157                           
 16158                           ;interrupts.c: 136: }
 16159                           ;interrupts.c: 137: rx = ReadUSART();
 16160  0095  3198  20B2  3180   	fcall	i1_ReadUSART
 16161  0098  0020               	movlb	0	; select bank0
 16162  0099  00A1               	movwf	??_isr
 16163  009A  0821               	movf	??_isr,w
 16164  009B  00A4               	movwf	isr@rx
 16165                           
 16166                           ;interrupts.c: 139: if(READ_CONFIG_PIN())
 16167  009C  3198  20A4  3180   	fcall	_READ_CONFIG_PIN
 16168  009F  3A00               	xorlw	0
 16169  00A0  1903               	skipnz
 16170  00A1  28BE               	goto	i1l5514
 16171                           
 16172                           ;interrupts.c: 140: {
 16173                           ;interrupts.c: 141: if(Rx_fault == 1)
 16174  00A2  0020               	movlb	0	; select bank0
 16175  00A3  0823               	movf	isr@Rx_fault,w
 16176  00A4  3A01               	xorlw	1
 16177  00A5  1D03               	skipz
 16178  00A6  28B2               	goto	i1l5512
 16179                           
 16180                           ;interrupts.c: 142: {
 16181                           ;interrupts.c: 143: if(rx == 0)
 16182  00A7  08A4               	movf	isr@rx,f
 16183  00A8  1D03               	skipz
 16184  00A9  28BE               	goto	i1l5514
 16185                           
 16186                           ;interrupts.c: 144: {
 16187                           ;interrupts.c: 146: UART_send_break_timed(100000);
 16188  00AA  30A0               	movlw	160
 16189  00AB  00FA               	movwf	i1UART_send_break_timed@US
 16190  00AC  3086               	movlw	134
 16191  00AD  00FB               	movwf	i1UART_send_break_timed@US+1
 16192  00AE  3199  21EF  3180   	fcall	i1_UART_send_break_timed
 16193                           
 16194                           ;interrupts.c: 147: }
 16195                           ;interrupts.c: 148: }
 16196  00B1  28BE               	goto	i1l5514
 16197  00B2                     i1l5512:	
 16198                           
 16199                           ;interrupts.c: 149: else
 16200                           ;interrupts.c: 150: {
 16201                           ;interrupts.c: 151: UARTchar(rx, 1 ,RC1STAbits.RX9D);
 16202  00B2  01F8               	clrf	i1UARTchar@override
 16203  00B3  0AF8               	incf	i1UARTchar@override,f
 16204  00B4  3000               	movlw	0
 16205  00B5  0023               	movlb	3	; select bank3
 16206  00B6  181D               	btfsc	29,0	;volatile
 16207  00B7  3001               	movlw	1
 16208  00B8  00F9               	movwf	i1UARTchar@NinethBit_override_data
 16209  00B9  0020               	movlb	0	; select bank0
 16210  00BA  0824               	movf	isr@rx,w
 16211  00BB  319E  2607  3180   	fcall	i1_UARTchar
 16212  00BE                     i1l5514:	
 16213                           
 16214                           ;interrupts.c: 152: }
 16215                           ;interrupts.c: 153: }
 16216                           ;interrupts.c: 169: PIR1bits.RCIF = 0;
 16217  00BE  0020               	movlb	0	; select bank0
 16218  00BF  1291               	bcf	17,5	;volatile
 16219                           
 16220                           ;interrupts.c: 170: }
 16221  00C0  28E3               	goto	i1l92
 16222  00C1                     i1l80:	
 16223                           
 16224                           ;interrupts.c: 171: else if(PIR1bits.TMR2IF)
 16225  00C1  1C91               	btfss	17,1	;volatile
 16226  00C2  28E2               	goto	i1l87
 16227                           
 16228                           ;interrupts.c: 172: {
 16229                           ;interrupts.c: 174: PIE1bits.TMR2IE = 0;
 16230  00C3  0021               	movlb	1	; select bank1
 16231  00C4  1091               	bcf	17,1	;volatile
 16232                           
 16233                           ;interrupts.c: 175: blinkdelay++;LATC ^= 0b00000010;
 16234  00C5  3001               	movlw	1
 16235  00C6  0020               	movlb	0	; select bank0
 16236  00C7  00A1               	movwf	??_isr
 16237  00C8  0821               	movf	??_isr,w
 16238  00C9  0022               	movlb	2	; select bank2
 16239  00CA  07EC               	addwf	_blinkdelay^(0+256),f
 16240  00CB  3002               	movlw	2
 16241  00CC  0020               	movlb	0	; select bank0
 16242  00CD  00A1               	movwf	??_isr
 16243  00CE  0821               	movf	??_isr,w
 16244  00CF  0022               	movlb	2	; select bank2
 16245  00D0  068E               	xorwf	14,f	;volatile
 16246                           
 16247                           ;interrupts.c: 176: if(blinkdelay > 4)
 16248  00D1  3005               	movlw	5
 16249  00D2  026C               	subwf	_blinkdelay^(0+256),w
 16250  00D3  1C03               	skipc
 16251  00D4  28DF               	goto	i1l5528
 16252                           
 16253                           ;interrupts.c: 177: {
 16254                           ;interrupts.c: 178: if(Alarm)
 16255  00D5  0021               	movlb	1	; select bank1
 16256  00D6  0868               	movf	_Alarm^(0+128),w
 16257  00D7  1903               	btfsc	3,2
 16258  00D8  28DB               	goto	i1l89
 16259                           
 16260                           ;interrupts.c: 179: {
 16261                           ;interrupts.c: 180: __nop();
 16262  00D9  0000               	nop
 16263                           
 16264                           ;interrupts.c: 181: }
 16265  00DA  28DD               	goto	i1l5526
 16266  00DB                     i1l89:	
 16267                           
 16268                           ;interrupts.c: 182: else
 16269                           ;interrupts.c: 183: {
 16270                           ;interrupts.c: 184: LATC |= 0b00000010;
 16271  00DB  0022               	movlb	2	; select bank2
 16272  00DC  148E               	bsf	14,1	;volatile
 16273  00DD                     i1l5526:	
 16274                           
 16275                           ;interrupts.c: 185: }
 16276                           ;interrupts.c: 186: blinkdelay =0;
 16277  00DD  0022               	movlb	2	; select bank2
 16278  00DE  01EC               	clrf	_blinkdelay^(0+256)
 16279  00DF                     i1l5528:	
 16280                           
 16281                           ;interrupts.c: 187: }
 16282                           ;interrupts.c: 188: PIR1bits.TMR2IF =0;
 16283  00DF  0020               	movlb	0	; select bank0
 16284  00E0  1091               	bcf	17,1	;volatile
 16285                           
 16286                           ;interrupts.c: 190: }
 16287  00E1  28E3               	goto	i1l92
 16288  00E2                     i1l87:	
 16289                           
 16290                           ;interrupts.c: 191: else
 16291                           ;interrupts.c: 192: {
 16292                           ;interrupts.c: 194: __nop();
 16293  00E2  0000               	nop
 16294  00E3                     i1l92:	
 16295  00E3  0020               	movlb	0	; select bank0
 16296  00E4  0822               	movf	??_isr+1,w
 16297  00E5  00FF               	movwf	127
 16298  00E6  107E               	bcf	126,0	;clear compiler interrupt flag
 16299  00E7  0009               	retfie
 16300  00E8                     __end_of_isr:	
 16301                           
 16302                           	psect	text52
 16303  1E07                     __ptext52:	
 16304 ;; *************** function i1_UARTchar *****************
 16305 ;; Defined at:
 16306 ;;		line 232 in file "UART.c"
 16307 ;; Parameters:    Size  Location     Type
 16308 ;;  data            1    wreg     unsigned char 
 16309 ;;  override        1    8[COMMON] unsigned char 
 16310 ;;  NinethBit_ov    1    9[COMMON] unsigned char 
 16311 ;; Auto vars:     Size  Location     Type
 16312 ;;  data            1    0[BANK0 ] unsigned char 
 16313 ;; Return value:  Size  Location     Type
 16314 ;;		None               void
 16315 ;; Registers used:
 16316 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 16317 ;; Tracked objects:
 16318 ;;		On entry : 0/0
 16319 ;;		On exit  : 0/0
 16320 ;;		Unchanged: 0/0
 16321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16322 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16323 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16324 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16325 ;;      Totals:         6       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16326 ;;Total ram usage:        7 bytes
 16327 ;; Hardware stack levels used:    1
 16328 ;; Hardware stack levels required when called:    1
 16329 ;; This function calls:
 16330 ;;		i1_CheckSum_byte
 16331 ;; This function is called by:
 16332 ;;		_isr
 16333 ;; This function uses a non-reentrant model
 16334 ;;
 16335                           
 16336                           
 16337                           ;psect for function i1_UARTchar
 16338  1E07                     i1_UARTchar:	
 16339                           
 16340                           ;incstack = 0
 16341                           ; Regs used in i1_UARTchar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 16342                           ;i1UARTchar@data stored from wreg
 16343  1E07  0020               	movlb	0	; select bank0
 16344  1E08  00A0               	movwf	i1UARTchar@data
 16345                           
 16346                           ;UART.c: 234: if(TXSTAbits.TX9)
 16347  1E09  0023               	movlb	3	; select bank3
 16348  1E0A  1F1E               	btfss	30,6	;volatile
 16349  1E0B  2E4C               	goto	i1l5382
 16350                           
 16351                           ;UART.c: 235: {
 16352                           ;UART.c: 237: if(!override)
 16353  1E0C  08F8               	movf	i1UARTchar@override,f
 16354  1E0D  1903               	btfsc	3,2
 16355  1E0E  2E36               	goto	i1l5378
 16356  1E0F  2E43               	goto	i1l5380
 16357  1E10                     i1l5372:	
 16358                           ;UART.c: 241: {
 16359                           ;UART.c: 242: case 1:
 16360                           
 16361                           ;UART.c: 238: {
 16362                           ;UART.c: 240: switch (PARITY)
 16363                           
 16364                           
 16365                           ;UART.c: 243: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 3);
 16366  1E10  0020               	movlb	0	; select bank0
 16367  1E11  0820               	movf	i1UARTchar@data,w
 16368  1E12  00FA               	movwf	??i1_UARTchar
 16369  1E13  01FB               	clrf	??i1_UARTchar+1
 16370  1E14  087A               	movf	??i1_UARTchar,w
 16371  1E15  00F0               	movwf	i1CheckSum_byte@This
 16372  1E16  087B               	movf	??i1_UARTchar+1,w
 16373  1E17  00F1               	movwf	i1CheckSum_byte@This+1
 16374  1E18  3003               	movlw	3
 16375  1E19  2E23               	goto	L26
 16376  1E1A                     i1l5374:	
 16377                           ;UART.c: 245: case 2:
 16378                           
 16379                           ;UART.c: 244: break;
 16380                           
 16381                           
 16382                           ;UART.c: 246: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 2);
 16383  1E1A  0020               	movlb	0	; select bank0
 16384  1E1B  0820               	movf	i1UARTchar@data,w
 16385  1E1C  00FA               	movwf	??i1_UARTchar
 16386  1E1D  01FB               	clrf	??i1_UARTchar+1
 16387  1E1E  087A               	movf	??i1_UARTchar,w
 16388  1E1F  00F0               	movwf	i1CheckSum_byte@This
 16389  1E20  087B               	movf	??i1_UARTchar+1,w
 16390  1E21  00F1               	movwf	i1CheckSum_byte@This+1
 16391  1E22  3002               	movlw	2
 16392  1E23                     L26:	
 16393  1E23  00FC               	movwf	??i1_UARTchar+2
 16394  1E24  087C               	movf	??i1_UARTchar+2,w
 16395  1E25  00F2               	movwf	i1CheckSum_byte@Odd_Even
 16396  1E26  319A  223B  319E   	fcall	i1_CheckSum_byte
 16397  1E29  00FD               	movwf	??i1_UARTchar+3
 16398  1E2A  0023               	movlb	3	; select bank3
 16399  1E2B  081E               	movf	30,w	;volatile
 16400  1E2C  067D               	xorwf	??i1_UARTchar+3,w
 16401  1E2D  39FE               	andlw	-2
 16402  1E2E  067D               	xorwf	??i1_UARTchar+3,w
 16403  1E2F  2E4B               	goto	L25
 16404  1E30                     i1l405:	
 16405                           ;UART.c: 248: case 3:
 16406                           
 16407                           ;UART.c: 247: break;
 16408                           
 16409                           
 16410                           ;UART.c: 249: TXSTAbits.TX9D = 1;
 16411  1E30  0023               	movlb	3	; select bank3
 16412  1E31  141E               	bsf	30,0	;volatile
 16413                           
 16414                           ;UART.c: 250: break;
 16415  1E32  2E4C               	goto	i1l5382
 16416  1E33                     i1l406:	
 16417                           ;UART.c: 251: default:
 16418                           
 16419                           
 16420                           ;UART.c: 252: TXSTAbits.TX9D = 0;
 16421  1E33  0023               	movlb	3	; select bank3
 16422  1E34  101E               	bcf	30,0	;volatile
 16423                           
 16424                           ;UART.c: 254: }
 16425                           
 16426                           ;UART.c: 253: break;
 16427  1E35  2E4C               	goto	i1l5382
 16428  1E36                     i1l5378:	
 16429  1E36  0021               	movlb	1	; select bank1
 16430  1E37  086A               	movf	_PARITY^(0+128),w
 16431                           
 16432                           ; Switch size 1, requested type "space"
 16433                           ; Number of cases is 3, Range of values is 1 to 3
 16434                           ; switch strategies available:
 16435                           ; Name         Instructions Cycles
 16436                           ; simple_byte           10     6 (average)
 16437                           ; direct_byte           15     9 (fixed)
 16438                           ; jumptable            263     9 (fixed)
 16439                           ;	Chosen strategy is simple_byte
 16440  1E38  3A01               	xorlw	1	; case 1
 16441  1E39  1903               	skipnz
 16442  1E3A  2E10               	goto	i1l5372
 16443  1E3B  3A03               	xorlw	3	; case 2
 16444  1E3C  1903               	skipnz
 16445  1E3D  2E1A               	goto	i1l5374
 16446  1E3E  3A01               	xorlw	1	; case 3
 16447  1E3F  1903               	skipnz
 16448  1E40  2E30               	goto	i1l405
 16449  1E41  2E33               	goto	i1l406
 16450                           
 16451                           ;UART.c: 255: }
 16452  1E42  2E4C               	goto	i1l5382
 16453  1E43                     i1l5380:	
 16454                           
 16455                           ;UART.c: 256: else
 16456                           ;UART.c: 257: {
 16457                           ;UART.c: 258: TXSTAbits.TX9D = (NinethBit_override_data & 0x01);
 16458  1E43  3001               	movlw	1
 16459  1E44  0579               	andwf	i1UARTchar@NinethBit_override_data,w
 16460  1E45  00FA               	movwf	??i1_UARTchar
 16461  1E46  0023               	movlb	3	; select bank3
 16462  1E47  081E               	movf	30,w	;volatile
 16463  1E48  067A               	xorwf	??i1_UARTchar,w
 16464  1E49  39FE               	andlw	-2
 16465  1E4A  067A               	xorwf	??i1_UARTchar,w
 16466  1E4B                     L25:	
 16467  1E4B  009E               	movwf	30	;volatile
 16468  1E4C                     i1l5382:	
 16469                           
 16470                           ;UART.c: 259: }
 16471                           ;UART.c: 260: }
 16472                           ;UART.c: 262: if(data == '\n')
 16473  1E4C  0020               	movlb	0	; select bank0
 16474  1E4D  0820               	movf	i1UARTchar@data,w
 16475  1E4E  3A0A               	xorlw	10
 16476  1E4F  1D03               	skipz
 16477  1E50  2E5D               	goto	i1l414
 16478                           
 16479                           ;UART.c: 263: {
 16480                           ;UART.c: 264: if(override)
 16481  1E51  0878               	movf	i1UARTchar@override,w
 16482  1E52  1903               	btfsc	3,2
 16483  1E53  0008               	return
 16484  1E54                     i1l410:	
 16485                           ;UART.c: 265: {
 16486                           ;UART.c: 266: while(!TXSTAbits.TRMT);
 16487                           
 16488  1E54  0023               	movlb	3	; select bank3
 16489  1E55  1C9E               	btfss	30,1	;volatile
 16490  1E56  2E54               	goto	i1l410
 16491                           
 16492                           ;UART.c: 267: TXREG = data;
 16493  1E57  0020               	movlb	0	; select bank0
 16494  1E58  0820               	movf	i1UARTchar@data,w
 16495  1E59  0023               	movlb	3	; select bank3
 16496  1E5A  009A               	movwf	26	;volatile
 16497  1E5B  0020               	movlb	0	; select bank0
 16498  1E5C  0008               	return
 16499  1E5D                     i1l414:	
 16500                           ;UART.c: 270: else
 16501                           ;UART.c: 271: {
 16502                           ;UART.c: 272: while(!TXSTAbits.TRMT);
 16503                           
 16504                           ;UART.c: 268: }
 16505                           ;UART.c: 269: }
 16506                           
 16507  1E5D  0023               	movlb	3	; select bank3
 16508  1E5E  1C9E               	btfss	30,1	;volatile
 16509  1E5F  2E5D               	goto	i1l414
 16510                           
 16511                           ;UART.c: 273: TXREG = data;
 16512  1E60  0020               	movlb	0	; select bank0
 16513  1E61  0820               	movf	i1UARTchar@data,w
 16514  1E62  0023               	movlb	3	; select bank3
 16515  1E63  009A               	movwf	26	;volatile
 16516  1E64  0020               	movlb	0	; select bank0
 16517  1E65  0008               	return
 16518  1E66                     __end_ofi1_UARTchar:	
 16519                           
 16520                           	psect	text53
 16521  1A3B                     __ptext53:	
 16522 ;; *************** function i1_CheckSum_byte *****************
 16523 ;; Defined at:
 16524 ;;		line 69 in file "MISC.c"
 16525 ;; Parameters:    Size  Location     Type
 16526 ;;  This            2    0[COMMON] unsigned int 
 16527 ;;  Odd_Even        1    2[COMMON] unsigned char 
 16528 ;; Auto vars:     Size  Location     Type
 16529 ;;  CheckSum_byt    2    4[COMMON] unsigned int 
 16530 ;;  CheckSum_byt    1    7[COMMON] unsigned char 
 16531 ;;  CheckSum_byt    1    6[COMMON] unsigned char 
 16532 ;; Return value:  Size  Location     Type
 16533 ;;                  1    wreg      unsigned char 
 16534 ;; Registers used:
 16535 ;;		wreg, status,2, status,0
 16536 ;; Tracked objects:
 16537 ;;		On entry : 0/0
 16538 ;;		On exit  : 0/0
 16539 ;;		Unchanged: 0/0
 16540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16541 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16542 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16543 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16544 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16545 ;;Total ram usage:        8 bytes
 16546 ;; Hardware stack levels used:    1
 16547 ;; This function calls:
 16548 ;;		Nothing
 16549 ;; This function is called by:
 16550 ;;		i1_UARTchar
 16551 ;; This function uses a non-reentrant model
 16552 ;;
 16553                           
 16554                           
 16555                           ;psect for function i1_CheckSum_byte
 16556  1A3B                     i1_CheckSum_byte:	
 16557                           
 16558                           ;MISC.c: 71: char i = 0;
 16559                           
 16560                           ;incstack = 0
 16561                           ; Regs used in i1_CheckSum_byte: [wreg+status,2+status,0]
 16562  1A3B  01F7               	clrf	i1CheckSum_byte@i
 16563                           
 16564                           ;MISC.c: 72: unsigned char Parity = 0;
 16565  1A3C  01F6               	clrf	i1CheckSum_byte@Parity
 16566                           
 16567                           ;MISC.c: 73: unsigned int ThisTemp = This;
 16568  1A3D  0871               	movf	i1CheckSum_byte@This+1,w
 16569  1A3E  01F5               	clrf	i1CheckSum_byte@ThisTemp+1
 16570  1A3F  07F5               	addwf	i1CheckSum_byte@ThisTemp+1,f
 16571  1A40  0870               	movf	i1CheckSum_byte@This,w
 16572  1A41  01F4               	clrf	i1CheckSum_byte@ThisTemp
 16573  1A42  07F4               	addwf	i1CheckSum_byte@ThisTemp,f
 16574                           
 16575                           ;MISC.c: 75: for (i =0; i<8; i++)
 16576  1A43  01F7               	clrf	i1CheckSum_byte@i
 16577  1A44  3008               	movlw	8
 16578  1A45  0277               	subwf	i1CheckSum_byte@i,w
 16579  1A46  1803               	btfsc	3,0
 16580  1A47  2A5B               	goto	i1l5076
 16581  1A48                     i1l288:	
 16582                           
 16583                           ;MISC.c: 76: {
 16584                           ;MISC.c: 77: if((ThisTemp & 0x01) == 1)
 16585  1A48  1C74               	btfss	i1CheckSum_byte@ThisTemp,0
 16586  1A49  2A4E               	goto	i1l290
 16587                           
 16588                           ;MISC.c: 78: {
 16589                           ;MISC.c: 79: Parity++;
 16590  1A4A  3001               	movlw	1
 16591  1A4B  00F3               	movwf	??i1_CheckSum_byte
 16592  1A4C  0873               	movf	??i1_CheckSum_byte,w
 16593  1A4D  07F6               	addwf	i1CheckSum_byte@Parity,f
 16594  1A4E                     i1l290:	
 16595                           
 16596                           ;MISC.c: 80: }
 16597                           ;MISC.c: 81: ThisTemp >>= 1;
 16598  1A4E  3001               	movlw	1
 16599  1A4F                     u647_25:	
 16600  1A4F  36F5               	lsrf	i1CheckSum_byte@ThisTemp+1,f
 16601  1A50  0CF4               	rrf	i1CheckSum_byte@ThisTemp,f
 16602  1A51  0B89               	decfsz	9,f
 16603  1A52  2A4F               	goto	u647_25
 16604  1A53  3001               	movlw	1
 16605  1A54  00F3               	movwf	??i1_CheckSum_byte
 16606  1A55  0873               	movf	??i1_CheckSum_byte,w
 16607  1A56  07F7               	addwf	i1CheckSum_byte@i,f
 16608  1A57  3008               	movlw	8
 16609  1A58  0277               	subwf	i1CheckSum_byte@i,w
 16610  1A59  1C03               	skipc
 16611  1A5A  2A48               	goto	i1l288
 16612  1A5B                     i1l5076:	
 16613                           
 16614                           ;MISC.c: 82: }
 16615                           ;MISC.c: 83: if(Odd_Even == 3)
 16616  1A5B  0872               	movf	i1CheckSum_byte@Odd_Even,w
 16617  1A5C  3A03               	xorlw	3
 16618  1A5D  1D03               	skipz
 16619  1A5E  2A65               	goto	i1l291
 16620                           
 16621                           ;MISC.c: 84: {
 16622                           ;MISC.c: 85: if(Parity % 2 == 0)
 16623  1A5F  1876               	btfsc	i1CheckSum_byte@Parity,0
 16624  1A60  2A63               	goto	i1l5084
 16625                           
 16626                           ;MISC.c: 86: {
 16627                           ;MISC.c: 87: return 1;
 16628  1A61  3001               	movlw	1
 16629  1A62  0008               	return
 16630  1A63                     i1l5084:	
 16631                           
 16632                           ;MISC.c: 88: }
 16633                           ;MISC.c: 89: return 0;
 16634  1A63  3000               	movlw	0
 16635                           
 16636                           ;MISC.c: 90: }
 16637  1A64  0008               	return
 16638  1A65                     i1l291:	
 16639                           
 16640                           ;MISC.c: 91: else
 16641                           ;MISC.c: 92: {
 16642                           ;MISC.c: 93: if(Parity % 2 == 1)
 16643  1A65  1C76               	btfss	i1CheckSum_byte@Parity,0
 16644  1A66  2A69               	goto	i1l5094
 16645                           
 16646                           ;MISC.c: 94: {
 16647                           ;MISC.c: 95: return 1;
 16648  1A67  3001               	movlw	1
 16649  1A68  0008               	return
 16650  1A69                     i1l5094:	
 16651                           
 16652                           ;MISC.c: 96: }
 16653                           ;MISC.c: 97: return 0;
 16654  1A69  3000               	movlw	0
 16655  1A6A  0008               	return
 16656  1A6B                     __end_ofi1_CheckSum_byte:	
 16657                           
 16658                           	psect	text54
 16659  19EF                     __ptext54:	
 16660 ;; *************** function i1_UART_send_break_timed *****************
 16661 ;; Defined at:
 16662 ;;		line 335 in file "UART.c"
 16663 ;; Parameters:    Size  Location     Type
 16664 ;;  US              2   10[COMMON] unsigned int 
 16665 ;; Auto vars:     Size  Location     Type
 16666 ;;		None
 16667 ;; Return value:  Size  Location     Type
 16668 ;;		None               void
 16669 ;; Registers used:
 16670 ;;		wreg, status,2, status,0, pclath, cstack
 16671 ;; Tracked objects:
 16672 ;;		On entry : 0/0
 16673 ;;		On exit  : 0/0
 16674 ;;		Unchanged: 0/0
 16675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16676 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16678 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16679 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16680 ;;Total ram usage:        3 bytes
 16681 ;; Hardware stack levels used:    1
 16682 ;; Hardware stack levels required when called:    1
 16683 ;; This function calls:
 16684 ;;		i1_delayUS
 16685 ;; This function is called by:
 16686 ;;		_isr
 16687 ;; This function uses a non-reentrant model
 16688 ;;
 16689                           
 16690                           
 16691                           ;psect for function i1_UART_send_break_timed
 16692  19EF                     i1_UART_send_break_timed:	
 16693                           
 16694                           ;UART.c: 338: LATC |= 0b00000100;
 16695                           
 16696                           ;incstack = 0
 16697                           ; Regs used in i1_UART_send_break_timed: [wreg+status,2+status,0+pclath+cstack]
 16698  19EF  0022               	movlb	2	; select bank2
 16699  19F0  150E               	bsf	14,2	;volatile
 16700                           
 16701                           ;UART.c: 339: PPSLOCK =0;
 16702  19F1  003C               	movlb	28	; select bank28
 16703  19F2  018F               	clrf	15	;volatile
 16704                           
 16705                           ;UART.c: 340: RC2PPS = 0b00000000;
 16706  19F3  003D               	movlb	29	; select bank29
 16707  19F4  01A2               	clrf	34	;volatile
 16708                           
 16709                           ;UART.c: 341: PPSLOCK =1;
 16710  19F5  3001               	movlw	1
 16711  19F6  003C               	movlb	28	; select bank28
 16712  19F7  008F               	movwf	15	;volatile
 16713                           
 16714                           ;UART.c: 343: LATC &= ~0b00000100;
 16715  19F8  30FB               	movlw	251
 16716  19F9  00FC               	movwf	??i1_UART_send_break_timed
 16717  19FA  087C               	movf	??i1_UART_send_break_timed,w
 16718  19FB  0022               	movlb	2	; select bank2
 16719  19FC  058E               	andwf	14,f	;volatile
 16720                           
 16721                           ;UART.c: 344: delayUS(US);
 16722  19FD  087A               	movf	i1UART_send_break_timed@US,w
 16723  19FE  00F0               	movwf	i1delayUS@US
 16724  19FF  087B               	movf	i1UART_send_break_timed@US+1,w
 16725  1A00  00F1               	movwf	i1delayUS@US+1
 16726  1A01  01F2               	clrf	i1delayUS@US+2
 16727  1A02  01F3               	clrf	i1delayUS@US+3
 16728  1A03  319B  232F         	fcall	i1_delayUS
 16729                           
 16730                           ;UART.c: 345: LATC |= 0b00000100;
 16731  1A05  0022               	movlb	2	; select bank2
 16732  1A06  150E               	bsf	14,2	;volatile
 16733                           
 16734                           ;UART.c: 347: PPSLOCK =0;
 16735  1A07  003C               	movlb	28	; select bank28
 16736  1A08  018F               	clrf	15	;volatile
 16737                           
 16738                           ;UART.c: 348: RC2PPS = 0b00010100;
 16739  1A09  3014               	movlw	20
 16740  1A0A  003D               	movlb	29	; select bank29
 16741  1A0B  00A2               	movwf	34	;volatile
 16742                           
 16743                           ;UART.c: 349: CKPPS = 0b00010010;
 16744  1A0C  3012               	movlw	18
 16745  1A0D  003C               	movlb	28	; select bank28
 16746  1A0E  00A5               	movwf	37	;volatile
 16747                           
 16748                           ;UART.c: 351: RXPPS = 0b00010101;
 16749  1A0F  3015               	movlw	21
 16750  1A10  00A4               	movwf	36	;volatile
 16751                           
 16752                           ;UART.c: 353: PPSLOCK =1;
 16753  1A11  3001               	movlw	1
 16754  1A12  008F               	movwf	15	;volatile
 16755  1A13  0008               	return
 16756  1A14                     __end_ofi1_UART_send_break_timed:	
 16757                           
 16758                           	psect	text55
 16759  1B2F                     __ptext55:	
 16760 ;; *************** function i1_delayUS *****************
 16761 ;; Defined at:
 16762 ;;		line 49 in file "MISC.c"
 16763 ;; Parameters:    Size  Location     Type
 16764 ;;  US              4    0[COMMON] long 
 16765 ;; Auto vars:     Size  Location     Type
 16766 ;;  delayUS         4    5[COMMON] long 
 16767 ;;  delayUS         1    9[COMMON] unsigned char 
 16768 ;; Return value:  Size  Location     Type
 16769 ;;		None               void
 16770 ;; Registers used:
 16771 ;;		wreg, status,2, status,0
 16772 ;; Tracked objects:
 16773 ;;		On entry : 0/0
 16774 ;;		On exit  : 0/0
 16775 ;;		Unchanged: 0/0
 16776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16777 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16778 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16779 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16780 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16781 ;;Total ram usage:       10 bytes
 16782 ;; Hardware stack levels used:    1
 16783 ;; This function calls:
 16784 ;;		Nothing
 16785 ;; This function is called by:
 16786 ;;		i1_UART_send_break_timed
 16787 ;; This function uses a non-reentrant model
 16788 ;;
 16789                           
 16790                           
 16791                           ;psect for function i1_delayUS
 16792  1B2F                     i1_delayUS:	
 16793                           
 16794                           ;MISC.c: 51: long i;
 16795                           ;MISC.c: 52: unsigned char j;
 16796                           ;MISC.c: 53: for(i=0;i<US;i+=6)
 16797                           
 16798                           ;incstack = 0
 16799                           ; Regs used in i1_delayUS: [wreg+status,2+status,0]
 16800  1B2F  3000               	movlw	0
 16801  1B30  00F8               	movwf	i1delayUS@i+3
 16802  1B31  3000               	movlw	0
 16803  1B32  00F7               	movwf	i1delayUS@i+2
 16804  1B33  3000               	movlw	0
 16805  1B34  00F6               	movwf	i1delayUS@i+1
 16806  1B35  3000               	movlw	0
 16807  1B36  00F5               	movwf	i1delayUS@i
 16808  1B37                     i1l280:	
 16809  1B37  0878               	movf	i1delayUS@i+3,w
 16810  1B38  3A80               	xorlw	128
 16811  1B39  00F4               	movwf	??i1_delayUS
 16812  1B3A  0873               	movf	i1delayUS@US+3,w
 16813  1B3B  3A80               	xorlw	128
 16814  1B3C  0274               	subwf	??i1_delayUS,w
 16815  1B3D  1D03               	skipz
 16816  1B3E  2B49               	goto	u644_23
 16817  1B3F  0872               	movf	i1delayUS@US+2,w
 16818  1B40  0277               	subwf	i1delayUS@i+2,w
 16819  1B41  1D03               	skipz
 16820  1B42  2B49               	goto	u644_23
 16821  1B43  0871               	movf	i1delayUS@US+1,w
 16822  1B44  0276               	subwf	i1delayUS@i+1,w
 16823  1B45  1D03               	skipz
 16824  1B46  2B49               	goto	u644_23
 16825  1B47  0870               	movf	i1delayUS@US,w
 16826  1B48  0275               	subwf	i1delayUS@i,w
 16827  1B49                     u644_23:	
 16828  1B49  1803               	btfsc	3,0
 16829  1B4A  0008               	return
 16830                           
 16831                           ;MISC.c: 54: {
 16832                           ;MISC.c: 55: for(j=0;j<32;j++)
 16833  1B4B  01F9               	clrf	i1delayUS@j
 16834  1B4C  3020               	movlw	32
 16835  1B4D  0279               	subwf	i1delayUS@j,w
 16836  1B4E  1803               	btfsc	3,0
 16837  1B4F  2B59               	goto	i1l5060
 16838  1B50                     i1l282:	
 16839                           
 16840                           ;MISC.c: 56: {
 16841                           ;MISC.c: 57: __nop();
 16842  1B50  0000               	nop
 16843  1B51  3001               	movlw	1
 16844  1B52  00F4               	movwf	??i1_delayUS
 16845  1B53  0874               	movf	??i1_delayUS,w
 16846  1B54  07F9               	addwf	i1delayUS@j,f
 16847  1B55  3020               	movlw	32
 16848  1B56  0279               	subwf	i1delayUS@j,w
 16849  1B57  1C03               	skipc
 16850  1B58  2B50               	goto	i1l282
 16851  1B59                     i1l5060:	
 16852  1B59  3006               	movlw	6
 16853  1B5A  07F5               	addwf	i1delayUS@i,f
 16854  1B5B  3000               	movlw	0
 16855  1B5C  3DF6               	addwfc	i1delayUS@i+1,f
 16856  1B5D  3000               	movlw	0
 16857  1B5E  3DF7               	addwfc	i1delayUS@i+2,f
 16858  1B5F  3000               	movlw	0
 16859  1B60  3DF8               	addwfc	i1delayUS@i+3,f
 16860  1B61  2B37               	goto	i1l280
 16861  1B62                     __end_ofi1_delayUS:	
 16862                           
 16863                           	psect	text56
 16864  18B2                     __ptext56:	
 16865 ;; *************** function i1_ReadUSART *****************
 16866 ;; Defined at:
 16867 ;;		line 303 in file "UART.c"
 16868 ;; Parameters:    Size  Location     Type
 16869 ;;		None
 16870 ;; Auto vars:     Size  Location     Type
 16871 ;;  ReadUSART       1    1[COMMON] unsigned char 
 16872 ;; Return value:  Size  Location     Type
 16873 ;;                  1    wreg      unsigned char 
 16874 ;; Registers used:
 16875 ;;		wreg
 16876 ;; Tracked objects:
 16877 ;;		On entry : 0/0
 16878 ;;		On exit  : 0/0
 16879 ;;		Unchanged: 0/0
 16880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16882 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16883 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16884 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16885 ;;Total ram usage:        2 bytes
 16886 ;; Hardware stack levels used:    1
 16887 ;; This function calls:
 16888 ;;		Nothing
 16889 ;; This function is called by:
 16890 ;;		_isr
 16891 ;; This function uses a non-reentrant model
 16892 ;;
 16893                           
 16894                           
 16895                           ;psect for function i1_ReadUSART
 16896  18B2                     i1_ReadUSART:	
 16897                           
 16898                           ;UART.c: 305: char data;
 16899                           ;UART.c: 307: if(RCSTAbits.OERR)
 16900                           
 16901                           ;incstack = 0
 16902                           ; Regs used in i1_ReadUSART: [wreg]
 16903  18B2  0023               	movlb	3	; select bank3
 16904  18B3  189D               	btfsc	29,1	;volatile
 16905                           
 16906                           ;UART.c: 308: {
 16907                           ;UART.c: 309: RCSTAbits.CREN = 0;
 16908  18B4  121D               	bcf	29,4	;volatile
 16909                           
 16910                           ;UART.c: 310: }
 16911                           ;UART.c: 312: data = RCREG;
 16912  18B5  0819               	movf	25,w	;volatile
 16913  18B6  00F0               	movwf	??i1_ReadUSART
 16914  18B7  0870               	movf	??i1_ReadUSART,w
 16915  18B8  00F1               	movwf	i1ReadUSART@data
 16916                           
 16917                           ;UART.c: 314: return (data);
 16918  18B9  0871               	movf	i1ReadUSART@data,w
 16919  18BA  0008               	return
 16920  18BB                     __end_ofi1_ReadUSART:	
 16921                           
 16922                           	psect	text57
 16923  196A                     __ptext57:	
 16924 ;; *************** function i1_READ_PS_2_PIN *****************
 16925 ;; Defined at:
 16926 ;;		line 224 in file "PS_2.c"
 16927 ;; Parameters:    Size  Location     Type
 16928 ;;  DATA_CLK        1    wreg     unsigned char 
 16929 ;; Auto vars:     Size  Location     Type
 16930 ;;  DATA_CLK        1    0[COMMON] unsigned char 
 16931 ;; Return value:  Size  Location     Type
 16932 ;;                  1    wreg      unsigned char 
 16933 ;; Registers used:
 16934 ;;		wreg
 16935 ;; Tracked objects:
 16936 ;;		On entry : 0/0
 16937 ;;		On exit  : 0/0
 16938 ;;		Unchanged: 0/0
 16939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16941 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16943 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16944 ;;Total ram usage:        1 bytes
 16945 ;; Hardware stack levels used:    1
 16946 ;; This function calls:
 16947 ;;		Nothing
 16948 ;; This function is called by:
 16949 ;;		_isr
 16950 ;; This function uses a non-reentrant model
 16951 ;;
 16952                           
 16953                           
 16954                           ;psect for function i1_READ_PS_2_PIN
 16955  196A                     i1_READ_PS_2_PIN:	
 16956                           
 16957                           ;incstack = 0
 16958                           ; Regs used in i1_READ_PS_2_PIN: [wreg]
 16959                           ;i1READ_PS_2_PIN@DATA_CLK stored from wreg
 16960  196A  00F0               	movwf	i1READ_PS_2_PIN@DATA_CLK
 16961                           
 16962                           ;PS_2.c: 226: if(DATA_CLK == 0b00100000)
 16963  196B  0870               	movf	i1READ_PS_2_PIN@DATA_CLK,w
 16964  196C  3A20               	xorlw	32
 16965  196D  1D03               	skipz
 16966  196E  2976               	goto	i1l618
 16967                           
 16968                           ;PS_2.c: 227: {
 16969                           ;PS_2.c: 229: if((PORTA & 0b00100000) == 0b00100000)
 16970  196F  0020               	movlb	0	; select bank0
 16971  1970  1E8C               	btfss	12,5	;volatile
 16972  1971  2974               	goto	i1l5432
 16973                           
 16974                           ;PS_2.c: 230: {
 16975                           ;PS_2.c: 231: return (1);
 16976  1972  3001               	movlw	1
 16977                           
 16978                           ;PS_2.c: 232: }
 16979  1973  0008               	return
 16980  1974                     i1l5432:	
 16981                           
 16982                           ;PS_2.c: 233: else
 16983                           ;PS_2.c: 234: {
 16984                           ;PS_2.c: 235: return 0;
 16985  1974  3000               	movlw	0
 16986                           
 16987                           ;PS_2.c: 236: }
 16988                           ;PS_2.c: 237: }
 16989  1975  0008               	return
 16990  1976                     i1l618:	
 16991                           
 16992                           ;PS_2.c: 238: else
 16993                           ;PS_2.c: 239: {
 16994                           ;PS_2.c: 241: if((PORTA & 0b00010000) == 0b00010000)
 16995  1976  0020               	movlb	0	; select bank0
 16996  1977  1E0C               	btfss	12,4	;volatile
 16997  1978  297B               	goto	i1l5442
 16998                           
 16999                           ;PS_2.c: 242: {
 17000                           ;PS_2.c: 243: return (1);
 17001  1979  3001               	movlw	1
 17002                           
 17003                           ;PS_2.c: 244: }
 17004  197A  0008               	return
 17005  197B                     i1l5442:	
 17006                           
 17007                           ;PS_2.c: 245: else
 17008                           ;PS_2.c: 246: {
 17009                           ;PS_2.c: 247: return 0;
 17010  197B  3000               	movlw	0
 17011  197C  0008               	return
 17012  197D                     __end_ofi1_READ_PS_2_PIN:	
 17013                           
 17014                           	psect	text58
 17015  18A4                     __ptext58:	
 17016 ;; *************** function _READ_CONFIG_PIN *****************
 17017 ;; Defined at:
 17018 ;;		line 144 in file "MISC.c"
 17019 ;; Parameters:    Size  Location     Type
 17020 ;;		None
 17021 ;; Auto vars:     Size  Location     Type
 17022 ;;		None
 17023 ;; Return value:  Size  Location     Type
 17024 ;;                  1    wreg      unsigned char 
 17025 ;; Registers used:
 17026 ;;		wreg
 17027 ;; Tracked objects:
 17028 ;;		On entry : 0/0
 17029 ;;		On exit  : 0/0
 17030 ;;		Unchanged: 0/0
 17031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17036 ;;Total ram usage:        0 bytes
 17037 ;; Hardware stack levels used:    1
 17038 ;; This function calls:
 17039 ;;		Nothing
 17040 ;; This function is called by:
 17041 ;;		_isr
 17042 ;; This function uses a non-reentrant model
 17043 ;;
 17044                           
 17045                           
 17046                           ;psect for function _READ_CONFIG_PIN
 17047  18A4                     _READ_CONFIG_PIN:	
 17048                           
 17049                           ;MISC.c: 147: if((PORTC & 0b00000001) == 0b00000001)
 17050                           
 17051                           ;incstack = 0
 17052                           ; Regs used in _READ_CONFIG_PIN: [wreg]
 17053  18A4  0020               	movlb	0	; select bank0
 17054  18A5  1C0E               	btfss	14,0	;volatile
 17055  18A6  28A9               	goto	i1l5104
 17056                           
 17057                           ;MISC.c: 148: {
 17058                           ;MISC.c: 149: return (1);
 17059  18A7  3001               	movlw	1
 17060  18A8  0008               	return
 17061  18A9                     i1l5104:	
 17062                           
 17063                           ;MISC.c: 150: }
 17064                           ;MISC.c: 151: return 0;
 17065  18A9  3000               	movlw	0
 17066  18AA  0008               	return
 17067  18AB                     __end_of_READ_CONFIG_PIN:	
 17068  007E                     btemp	set	126	;btemp
 17069  007E                     pic14e$flags	set	126
 17070  007E                     wtemp	set	126
 17071  007E                     wtemp0	set	126
 17072  0080                     wtemp1	set	128
 17073  0082                     wtemp2	set	130
 17074  0084                     wtemp3	set	132
 17075  0086                     wtemp4	set	134
 17076  0088                     wtemp5	set	136
 17077  007F                     wtemp6	set	127
 17078  007E                     ttemp	set	126
 17079  007E                     ttemp0	set	126
 17080  0081                     ttemp1	set	129
 17081  0084                     ttemp2	set	132
 17082  0087                     ttemp3	set	135
 17083  007F                     ttemp4	set	127
 17084  007E                     ltemp	set	126
 17085  007E                     ltemp0	set	126
 17086  0082                     ltemp1	set	130
 17087  0086                     ltemp2	set	134
 17088  0080                     ltemp3	set	128


Data Sizes:
    Strings     458
    Constant    507
    Data        16
    BSS         50
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     70      75
    BANK1            80     72      76
    BANK2            80     63      79
    BANK3            80      9      24
    BANK4            80      0      26
    BANK5            80     65      65
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_34(CODE[33]), STR_24(CODE[21]), STR_16(CODE[21]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 60
		 -> PS_2_Update@buf(BANK5[60]), SetBaud@buf(BANK2[50]), Init_System@buf(BANK1[60]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1056$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    WriteFlash_Sequential@buffer	PTR unsigned int  size(1) Largest target is 4
		 -> MEM(BANK4[4]), 

    UARTstringWAIT@data	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_40(CODE[29]), STR_39(CODE[22]), STR_38(CODE[18]), STR_37(CODE[17]), 
		 -> STR_36(CODE[24]), STR_35(CODE[23]), PS_2_Update@buf(BANK5[60]), STR_33(CODE[3]), 
		 -> STR_32(CODE[44]), STR_31(CODE[18]), STR_30(CODE[3]), STR_29(CODE[22]), 
		 -> STR_28(CODE[18]), STR_27(CODE[17]), STR_26(CODE[24]), STR_25(CODE[23]), 
		 -> SetBaud@buf(BANK2[50]), STR_23(CODE[24]), STR_22(CODE[3]), STR_21(CODE[22]), 
		 -> STR_20(CODE[18]), STR_19(CODE[17]), STR_18(CODE[24]), STR_17(CODE[23]), 
		 -> Init_System@buf(BANK1[60]), STR_15(CODE[3]), STR_14(CODE[17]), STR_13(CODE[22]), 
		 -> STR_12(CODE[21]), STR_11(CODE[20]), STR_10(CODE[19]), STR_9(CODE[17]), 
		 -> STR_8(CODE[22]), STR_7(CODE[21]), STR_6(CODE[24]), STR_5(CODE[39]), 
		 -> STR_4(CODE[3]), Version(BANK4[4]), STR_3(CODE[19]), STR_2(CODE[26]), 
		 -> STR_1(CODE[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_UARTchar
    i1_UARTchar->i1_CheckSum_byte
    i1_UART_send_break_timed->i1_delayUS

Critical Paths under _main in BANK0

    _main->_Keyboard_Connected
    _ReadVoltage->___flmul
    ___lwtofl->___flpack
    ___flmul->___fldiv
    ___fldiv->___lwtofl
    _InternalADC_Read->_delayUS
    _PS_2_INIT->_Clock_TRIS
    _PS_2_INIT->_Data_TRIS
    _PS_2_INIT->_INIT_PS_2_INTERRUPT
    _PS_2_Update->_SetBaud
    _UART_send_break_timed->_delayUS
    _SetBaud->_sprintf
    _WriteBaud->_WriteFlash_Sequential
    _WriteFlash_Sequential->_delayUS
    _Init_System->_sprintf
    _sprintf->___llmod
    ___llmod->___lldiv
    _UARTstringWAIT->_UARTchar
    _UARTchar->_CheckSum_byte
    _ReadBaud->_ReadFlash_4Byte
    _ReadFlash_4Byte->_ReadFlash_2Byte
    _InitUART->___lldiv
    _Init_PS_2_Send->_Send_PS2
    _Send_PS2->_delayUS

Critical Paths under _isr in BANK0

    _isr->i1_UARTchar

Critical Paths under _main in BANK1

    _WriteBaud->_WriteFlash_Sequential

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _PS_2_Update->_SetBaud

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_PS_2_Update
    _Keyboard_Connected->_PS_2_Update

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    _main->_PS_2_Update
    _Keyboard_Connected->_PS_2_Update

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  164704
                                             69 BANK0      1     1      0
                                             71 BANK1      1     1      0
                _ConfigureOscillator
                            _InitApp
                     _Init_PS_2_Send
                        _Init_System
                 _Keyboard_Connected
             _PS_2_DISABLE_INTERRUPT
              _PS_2_ENABLE_INTERRUPT
                          _PS_2_INIT
                        _PS_2_Update
                        _ReadVoltage
                     _UARTstringWAIT
                             ___flge
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) ___flge                                              16     8      8     648
                                              5 BANK0     16     8      8
 ---------------------------------------------------------------------------------
 (1) _ReadVoltage                                         11     7      4   11607
                                             60 BANK0      5     1      4
                                              0 BANK1      6     6      0
                 _DisableInternalADC
                   _InternalADC_Read
                            ___fldiv
                            ___flmul
                           ___lwtofl
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             5     1      4    2481
                                             15 BANK0      5     1      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             20    12      8    3015
                                             40 BANK0     20    12      8
                            ___fldiv (ARG)
                           ___flpack
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             20    12      8    2944
                                             20 BANK0     20    12      8
                           ___flpack
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6    2373
                                              5 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _InternalADC_Read                                     5     3      2    3093
                                             15 BANK0      5     3      2
                            _delayUS
 ---------------------------------------------------------------------------------
 (2) _DisableInternalADC                                   1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PS_2_INIT                                            0     0      0      84
                         _Clock_TRIS
                          _Data_TRIS
                _INIT_PS_2_INTERRUPT
 ---------------------------------------------------------------------------------
 (2) _INIT_PS_2_INTERRUPT                                  1     1      0      22
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Keyboard_Connected                                   4     4      0   60957
                                             65 BANK0      4     4      0
             _PS_2_DISABLE_INTERRUPT
              _PS_2_ENABLE_INTERRUPT
                        _PS_2_Update
                           _Send_PS2
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) _PS_2_Update                                         74    74      0   52754
                                              0 BANK3      9     9      0
                                              0 BANK5     65    65      0
                      _CheckSum_byte
                   _Decode_Scan_Code
          _Decode_Scan_Code_Function
        _Decode_Scan_Code_FunctionE0
             _Decode_Scan_Code_Shift
                           _ISNUMBER
             _PS_2_DISABLE_INTERRUPT
              _PS_2_ENABLE_INTERRUPT
                       _Reverse_Byte
                           _Send_PS2
                            _SetBaud
              _UART_send_break_timed
                           _UARTchar
                     _UARTstringWAIT
                             ___lmul
                            _delayUS
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     290
                                              5 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) _UART_send_break_timed                                3     1      2    3212
                                             15 BANK0      3     1      2
                            _delayUS
 ---------------------------------------------------------------------------------
 (2) _SetBaud                                             76    71      5   23529
                                             52 BANK0     13     8      5
                                              0 BANK2     63    63      0
                           _InitUART
                           _ReadBaud
                     _UARTstringWAIT
                          _WriteBaud
                            _delayUS
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _WriteBaud                                           19    12      7    5208
                                             22 BANK0     19    12      7
              _WriteFlash_Sequential
 ---------------------------------------------------------------------------------
 (4) _WriteFlash_Sequential                               78    74      4    4819
                                             15 BANK0      7     3      4
                                              0 BANK1     71    71      0
                         _BlockErase
                    _ReadFlash_2Byte
                             _UNLOCK
                            _delayUS
 ---------------------------------------------------------------------------------
 (5) _BlockErase                                           4     2      2     139
                                              5 BANK0      4     2      2
                             _UNLOCK
 ---------------------------------------------------------------------------------
 (5) _UNLOCK                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Reverse_Byte                                         4     4      0     306
                                              5 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _ISNUMBER                                             1     1      0      62
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Decode_Scan_Code_Shift                               1     1      0      65
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Decode_Scan_Code_FunctionE0                          1     1      0      65
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Decode_Scan_Code_Function                            1     1      0      62
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Decode_Scan_Code                                     1     1      0      65
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                         74    74      0   17827
                                             52 BANK0      5     5      0
                                              0 BANK1     69    69      0
                           _InitUART
                           _ReadBaud
                     _UARTstringWAIT
                            _delayUS
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             23    15      8    1929
                                             29 BANK0     23    15      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     386
                                             19 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _UARTstringWAIT                                       4     2      2    9500
                                             20 BANK0      4     2      2
                           _UARTchar
                            _delayUS
 ---------------------------------------------------------------------------------
 (2) _UARTchar                                             7     5      2    3188
                                             13 BANK0      7     5      2
                      _CheckSum_byte
 ---------------------------------------------------------------------------------
 (3) _ReadBaud                                            16    12      4    1308
                                             23 BANK0     16    12      4
                    _ReadFlash_4Byte
 ---------------------------------------------------------------------------------
 (4) _ReadFlash_4Byte                                     13     9      4     873
                                             10 BANK0     13     9      4
                    _ReadFlash_2Byte
 ---------------------------------------------------------------------------------
 (5) _ReadFlash_2Byte                                      5     2      3     555
                                              5 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _InitUART                                            21    16      5    1636
                                             19 BANK0     21    16      5
                         _CloseUSART
                          _OpenUSART
                          _ReadUSART
                            ___lldiv
                          _baudUSART
 ---------------------------------------------------------------------------------
 (4) _baudUSART                                            1     1      0      31
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     549
                                              5 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (4) _ReadUSART                                            2     2      0      34
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _OpenUSART                                            3     1      2     387
                                              5 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _CloseUSART                                           1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_PS_2_Send                                       0     0      0    8132
             _PS_2_DISABLE_INTERRUPT
              _PS_2_ENABLE_INTERRUPT
                           _Send_PS2
                            _delayUS
 ---------------------------------------------------------------------------------
 (2) _Send_PS2                                             9     9      0    5008
                                             15 BANK0      9     9      0
                      _CheckSum_byte
                         _Clock_TRIS
                          _Data_TRIS
              _PS_2_ENABLE_INTERRUPT
                      _READ_PS_2_PIN
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) _delayUS                                             10     6      4    3062
                                              5 BANK0     10     6      4
 ---------------------------------------------------------------------------------
 (3) _READ_PS_2_PIN                                        1     1      0      31
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _PS_2_ENABLE_INTERRUPT                                2     2      0      31
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _Data_TRIS                                            1     1      0      31
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Clock_TRIS                                           1     1      0      31
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _CheckSum_byte                                        8     5      3    1316
                                              5 BANK0      8     5      3
 ---------------------------------------------------------------------------------
 (2) _PS_2_DISABLE_INTERRUPT                               2     2      0      31
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                  4     4      0     774
                                              1 BANK0      4     4      0
                    _READ_CONFIG_PIN
                    i1_READ_PS_2_PIN
                        i1_ReadUSART
            i1_UART_send_break_timed
                         i1_UARTchar
 ---------------------------------------------------------------------------------
 (9) i1_UARTchar                                           7     5      2     493
                                              8 COMMON     6     4      2
                                              0 BANK0      1     1      0
                    i1_CheckSum_byte
 ---------------------------------------------------------------------------------
 (10) i1_CheckSum_byte                                     8     5      3     265
                                              0 COMMON     8     5      3
 ---------------------------------------------------------------------------------
 (9) i1_UART_send_break_timed                              3     1      2     166
                                             10 COMMON     3     1      2
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (10) i1_delayUS                                          10     6      4     118
                                              0 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (9) i1_ReadUSART                                          2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) i1_READ_PS_2_PIN                                      1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _READ_CONFIG_PIN                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _Init_PS_2_Send
     _PS_2_DISABLE_INTERRUPT
     _PS_2_ENABLE_INTERRUPT
     _Send_PS2
       _CheckSum_byte
       _Clock_TRIS
       _Data_TRIS
       _PS_2_ENABLE_INTERRUPT
       _READ_PS_2_PIN
       _delayUS
     _delayUS
   _Init_System
     _InitUART
       _CloseUSART
       _OpenUSART
       _ReadUSART
       ___lldiv
       _baudUSART
     _ReadBaud
       _ReadFlash_4Byte
         _ReadFlash_2Byte
     _UARTstringWAIT
       _UARTchar
         _CheckSum_byte
       _delayUS
     _delayUS
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
   _Keyboard_Connected
     _PS_2_DISABLE_INTERRUPT
     _PS_2_ENABLE_INTERRUPT
     _PS_2_Update
       _CheckSum_byte
       _Decode_Scan_Code
       _Decode_Scan_Code_Function
       _Decode_Scan_Code_FunctionE0
       _Decode_Scan_Code_Shift
       _ISNUMBER
       _PS_2_DISABLE_INTERRUPT
       _PS_2_ENABLE_INTERRUPT
       _Reverse_Byte
       _Send_PS2
         _CheckSum_byte
         _Clock_TRIS
         _Data_TRIS
         _PS_2_ENABLE_INTERRUPT
         _READ_PS_2_PIN
         _delayUS
       _SetBaud
         _InitUART
           _CloseUSART
           _OpenUSART
           _ReadUSART
           ___lldiv
           _baudUSART
         _ReadBaud
           _ReadFlash_4Byte
             _ReadFlash_2Byte
         _UARTstringWAIT
           _UARTchar
             _CheckSum_byte
           _delayUS
         _WriteBaud
           _WriteFlash_Sequential
             _BlockErase
               _UNLOCK
             _ReadFlash_2Byte
             _UNLOCK
             _delayUS
         _delayUS
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
       _UART_send_break_timed
         _delayUS
       _UARTchar
         _CheckSum_byte
       _UARTstringWAIT
         _UARTchar
           _CheckSum_byte
         _delayUS
       ___lmul
       _delayUS
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
     _Send_PS2
       _CheckSum_byte
       _Clock_TRIS
       _Data_TRIS
       _PS_2_ENABLE_INTERRUPT
       _READ_PS_2_PIN
       _delayUS
     _delayUS
   _PS_2_DISABLE_INTERRUPT
   _PS_2_ENABLE_INTERRUPT
   _PS_2_INIT
     _Clock_TRIS
     _Data_TRIS
     _INIT_PS_2_INTERRUPT
   _PS_2_Update
     _CheckSum_byte
     _Decode_Scan_Code
     _Decode_Scan_Code_Function
     _Decode_Scan_Code_FunctionE0
     _Decode_Scan_Code_Shift
     _ISNUMBER
     _PS_2_DISABLE_INTERRUPT
     _PS_2_ENABLE_INTERRUPT
     _Reverse_Byte
     _Send_PS2
       _CheckSum_byte
       _Clock_TRIS
       _Data_TRIS
       _PS_2_ENABLE_INTERRUPT
       _READ_PS_2_PIN
       _delayUS
     _SetBaud
       _InitUART
         _CloseUSART
         _OpenUSART
         _ReadUSART
         ___lldiv
         _baudUSART
       _ReadBaud
         _ReadFlash_4Byte
           _ReadFlash_2Byte
       _UARTstringWAIT
         _UARTchar
           _CheckSum_byte
         _delayUS
       _WriteBaud
         _WriteFlash_Sequential
           _BlockErase
             _UNLOCK
           _ReadFlash_2Byte
           _UNLOCK
           _delayUS
       _delayUS
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
     _UART_send_break_timed
       _delayUS
     _UARTchar
       _CheckSum_byte
     _UARTstringWAIT
       _UARTchar
         _CheckSum_byte
       _delayUS
     ___lmul
     _delayUS
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
   _ReadVoltage
     _DisableInternalADC
     _InternalADC_Read
       _delayUS
     ___fldiv
       ___flpack
       ___lwtofl (ARG)
         ___flpack
     ___flmul
       ___fldiv (ARG)
         ___flpack
         ___lwtofl (ARG)
           ___flpack
       ___flpack (ARG)
       ___lwtofl (ARG)
         ___flpack
     ___lwtofl
       ___flpack
   _UARTstringWAIT
     _UARTchar
       _CheckSum_byte
     _delayUS
   ___flge
   _delayUS

 _isr (ROOT)
   _READ_CONFIG_PIN
   i1_READ_PS_2_PIN
   i1_ReadUSART
   i1_UART_send_break_timed
     i1_delayUS
   i1_UARTchar
     i1_CheckSum_byte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     46      4B       5       93.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     48      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     3F      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      9      18      11       30.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      1A      13       32.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50     41      41      15       81.3%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     167      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     167      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Thu Feb 26 16:01:12 2015

              _PS_2_DISABLE_INTERRUPT 0BC5                     ??_ReadFlash_2Byte 0028  
                   ??_ReadFlash_4Byte 002E                                     _i 016D  
                        ___fldiv@cntr 0045                          ___fldiv@sign 0047  
                         __CFG_CP$OFF 0000                    Data_TRIS@direction 0025  
                ?_INIT_PS_2_INTERRUPT 0070                          ___flpack@arg 0025  
                         __CFG_LVP$ON 0000                          ___flpack@exp 0029  
                                 l410 1F1D                                   l405 1EF6  
                                 l414 1F26                                   l406 1EF9  
                                 l167 0E1C                                   l280 100B  
                                 l184 0FE9                                   l441 1B81  
                                 l290 1AAF                                   l282 1024  
                                 l291 1AC6                                   l451 1783  
                                 l603 1932                                   l439 1B62  
                                 l288 1AA9                                   l392 1BBE  
                                 l618 1964                                   l394 1BC7  
                                 l388 1BB0                                   l831 0CD6  
                                 l832 0D2C                                   l593 18D6  
                                 l770 07B0                                   l916 1B20  
                                 l925 18EA                                   l598 18E1  
                                 l758 0566                                   l688 03E3  
                                 l778 06B3                                   l983 1C2A  
                                 l986 1C4F                                   _MEM 0226  
                                 _PR2 001B                                   _isr 0004  
                        __CFG_BORV$LO 0000                                   wreg 0009  
                        ___flmul@cntr 005A                          ___flmul@sign 005B  
          __end_of_ScanCodeFunctionE0 09D3               UART_send_break_timed@US 002F  
                       ___flpack@sign 002A                                  l1024 14C7  
                                l1027 14E5                                  l1205 1FE5  
                                l1199 1FCB                                  l5110 1949  
                                l5112 194F                                  l6004 11F7  
                                l6006 11FB                                  l6200 176A  
                                l7000 07AE                                  l7002 07B1  
                                l6140 0BD7                                  l6052 14C5  
                                l6204 177D                                  l6302 0CE6  
                                l6054 14C9                                  l6230 17D6  
                                l5350 1F59                                  l6304 0D03  
                                l6064 14F4                                  l6232 17DB  
                                l6240 17F4                                  l7120 117C  
                                l7104 112D                                  l6322 0D31  
                                l6314 0D06                                  l6090 153D  
                                l6082 1538                                  l6074 150B  
                                l6058 14CE                                  l6250 19B4  
                                l6226 17CD                                  l6218 17AC  
                                l5354 1F82                                  l6324 0D37  
                                l6316 0D23                                  l6092 14A4  
                                l6412 19A1                                  l6228 17D1  
                                l6236 17E0                                  l7060 1052  
                                l7132 119C                                  l7116 1172  
                                l5702 1ACA                                  l6334 0D3A  
                                l7310 147C                                  l6094 158D  
                                l6174 1915                                  l6238 17ED  
                                l7222 1D71                                  l6360 0D7E  
                                l6336 0D57                                  l6280 0CD0  
                                l7304 1467                                  l7160 1606  
                                l6424 198E                                  l6600 0333  
                                l6512 01A0                                  l7224 1D9D  
                                l7128 1192                                  l6362 0D9B  
                                l6346 0D5A                                  l6290 0CE1  
                                l7322 149A                                  l7250 13CE  
                                l6442 1A74                                  l6514 01A3  
                                l7234 1DA7                                  l7066 106C  
                                l7410 0EE6                                  l7402 0EC7  
                                l6372 0D9E                                  l6348 0D77  
                                l7316 1485                                  l7244 13B9  
                                l5740 1ED4                                  l7180 1669  
                                l7164 160F                                  l6436 1944  
                                l6620 035C                                  l6612 034D  
                                l6604 033C                                  l6700 041C  
                                l6540 0260                                  l7084 10D1  
                                l6374 0DBB                                  l6278 0CB3  
                                l7262 13F8                                  l5902 1CF6  
                                l5742 1EDE                                  l5750 1F15  
                                l7182 166E                                  l7190 1685  
                                l6446 1A7E                                  l6542 0267  
                                l6526 01FF                                  l6462 1FA8  
                                l7078 10B1                                  l7334 0C05  
                                l7422 0F48                                  l6384 0DBE  
                                l6288 0CDB                                  l7280 1437  
                                l7256 13E3                                  l5912 1BDD  
                                l7184 1673                                  l7192 168D  
                                l5832 12EF                                  l6720 0444  
                                l6712 0435                                  l6616 0354  
                                l6624 0362                                  l6528 0204  
                                l6472 1FD0                                  l6464 1FB3  
                                l7440 0F7E                                  l6386 0DDB  
                                l7274 1422                                  l5770 1B9F  
                                l5746 1EFC                                  l5914 1BEB  
                                l5922 1C0E                                  l7178 1664  
                                l6810 04F7                                  l6650 0388  
                                l6554 02C3                                  l6490 0132  
                                l6474 1FD9                                  l6466 1FB8  
                                l6458 1F9F                                  l7098 1113  
                                l7338 0C14                                  l7442 0F86  
                                l7418 0F22                                  l5692 1AC4  
                                l5684 1ABC                                  l5668 102E  
                                l6396 0DDE                                  l7292 1455  
                                l7268 140D                                  l5748 1F09  
                                l7188 1678                                  l5844 12C2  
                                l6820 0526                                  l6812 050F  
                                l6740 0471                                  l6724 044D  
                                l6716 043C                                  l6660 03B3  
                                l6652 03A0                                  l6628 036D  
                                l6556 02CC                                  l6492 0134  
                                ?_isr 0070        __size_of_PS_2_ENABLE_INTERRUPT 0015  
                                l6398 0DFB                                  l7286 144C  
                                l5782 1BB2                                  l5774 1BA5  
                                l5918 1C03                                  l5846 1333  
                                l5838 1315                                  l6822 0510  
                                l6750 0478                                  l6662 03A1  
                                l6638 0383                                  l7454 0FEB  
                                l5936 1962                                  l5792 1BC0  
                                l6912 062B                                  l6808 0509  
                                l6824 052C                                  l6760 04A0  
                                l6736 046B                                  l6752 048D  
                                l6648 039A                                  l6664 03B9  
                                l6568 02E7                                  l7448 0FD3  
                                l7368 0E46                                  l5946 1968  
                                l7298 145E                                  l5778 1BAA  
                                l5890 1CCB                                  l6906 061A  
                                l6818 0522                                  l6746 048A  
                                l6738 0459                                  l6850 0575  
                                l6674 03D0                                  l7458 0FFA  
                                l5964 19C3                                  l5796 1BC9  
                                l5788 1BB7                                  l5956 1B84  
                                l5876 137F                                  l6932 06AA  
                                l6924 065C                                  l6836 054D  
                                l6764 04AB                                  l6756 0497  
                                l6748 0473                                  l6668 03C1  
                                l6596 032A                                  l6588 0317  
                                l7396 0EBD                                  l5878 13A4  
                                l6950 06DF                                  l6942 06C8  
                                l6846 0567                                  l6782 04D1  
                                l6678 03DA                                  l7398 0EBF  
                                l5888 1CBD                                  l6792 04EA  
                                l6784 04BF                                  l6696 03FC  
                                l6688 03F0                                  l5898 1CEB  
                                l6962 0704                                  l6954 06ED  
                                l6946 06D6                                  l6938 06BF  
                                l6866 058E                                  l6858 0582  
                                l6794 04ED                                  l6786 04D7  
                                _BAUD 0220                                  l6980 075E  
                                l6796 04D8                                  l6982 0763  
                                l6990 0772                                  l6958 06F6  
                                l6886 05E7                                  l6798 04F3  
                                l6984 0768                                  l6992 077F  
                                l6896 0612                                  l6986 076D  
                                l6994 0787                                  l6996 079A  
                                _ECHO 00E9                                  STR_1 0B56  
                                STR_2 0A8C                                  STR_3 0B6C  
                                STR_4 0B56                                  STR_5 0A27  
                                STR_6 0AD6                                  STR_7 0B30  
                                STR_8 0B05                                  STR_9 0BB4  
                                _LATA 010C                                  _LATC 010E  
                                _LALT 0167         __end_of_PS_2_ENABLE_INTERRUPT 19CB  
                                _PIE1 0091                                  i1l80 00C1  
                                i1l65 007C                                  u8035 1D06  
                                u8115 16F6                                  i1l92 00E3  
                                u7405 1AB0                                  u8045 1D12  
                                u8125 174B                                  i1l78 0085  
                                i1l87 00E2                                  u8055 1D1E  
                                u8135 1768                                  _RALT 01AC  
                                i1l89 00DB                                  u8065 1D34  
                                u8075 1D3F                                  u7373 101D  
                                u8085 1D4A                                  u7455 1B17  
                                u7705 1CCC                                  u7625 1C79  
                                u7715 1CE0                                  u7475 1AEA  
                                u8515 1FC5                                  u7725 1CEC  
                                u8445 1A7F                                  u7655 1376  
                                u8455 1A86                                  u8535 1FD3  
                                u7905 122D                                  u8625 0182  
                                u7755 1BE0                                  u7685 1CC0  
                                u8645 01E1                                  u8565 1FED  
                                u7775 1BF9                                  u8495 1FAD  
                                u7785 1C04                                  u7945 152E  
                                u8665 0242                                  u7875 1E90  
                                u7885 1EB3                                  u7965 1547  
                                u8685 02A5                                  u9815 072C  
                                u7985 1DB1                                  u9825 073C  
                                u9905 108D                                  u7995 1DE6  
                                u9915 10B2                                  u9925 10C6  
                                u9855 1C30                                  u9935 10D2  
                                u9895 107A                                  u9975 113B  
                                u9985 114E                                  _WPUA 020C  
                                _WPUC 020E                            i1delayUS@i 0075  
                          i1delayUS@j 0079                          __CFG_WRT$OFF 0000  
                                _main 0E08                    UARTstringWAIT@data 0034  
                                fsr0h 0005                                  fsr1h 0007  
                                fsr0l 0004                                  indf0 0000  
                                indf1 0001                                  fsr1l 0006  
                                btemp 007E                   baudUSART@baudconfig 0025  
                       __CFG_BOREN$ON 0000                                  ltemp 007E  
                   SetBaud@Paritytemp 0156                                  start 00E8  
                                ttemp 007E                                  wtemp 007E  
                       __CFG_IESO$OFF 0000                      Reverse_Byte@This 0028  
           i1UART_send_break_timed@US 007A             WriteFlash_Sequential@temp 00E3  
                    Reverse_Byte@temp 0027                         __CFG_MCLRE$ON 0000  
                          _BlockErase 1ACC                           ?i1_UARTchar 0078  
             ?_Decode_Scan_Code_Shift 0070                       __end_of_InitApp 19EF  
                     __end_of_SetBaud 1800                            _Clock_TRIS 18CE  
                       ??_Init_System 0054                __size_of_READ_PS_2_PIN 0012  
                               ??_isr 0021                   _Right_Shift_Key_old 016B  
                      _Init_PS_2_Send 13AC                     ??i1_READ_PS_2_PIN 0070  
     UARTchar@NinethBit_override_data 002E     i1UARTchar@NinethBit_override_data 0079  
               ??_INIT_PS_2_INTERRUPT 0025             _Decode_Scan_Code_Function 1935  
                         ReadBaud@row 0037       WriteFlash_Sequential@amountTemp 00E2  
                       ??_ReadVoltage 0060                            _CloseUSART 18FB  
                               ?_main 0070              __size_ofi1_CheckSum_byte 0030  
                     __end_of___fldiv 10F8                                 STR_10 0B59  
                               STR_11 0B45                                 STR_12 0B30  
                               STR_20 0B91                                 STR_13 0B05  
                               STR_21 0A11                                 STR_30 0B56  
                               STR_22 0B56                                 STR_14 0BB4  
                               STR_15 0B56                                 STR_31 0B7F  
                               STR_23 0AA6                                 STR_24 0B1B  
                               STR_16 0B1B                                 STR_40 0A6F  
                               STR_32 09FB                                 STR_33 0B56  
                               STR_25 0AEE                                 STR_17 0AEE  
                       __CFG_WDTE$OFF 0000                                 STR_26 0ABE  
                               STR_18 0ABE                                 STR_34 0A4E  
                               STR_27 0BA3                                 STR_35 0AEE  
                               STR_19 0BA3                                 STR_28 0B91  
                               STR_36 0ABE                                 STR_37 0BA3  
                               STR_29 0A11                                 STR_38 0B91  
                               STR_39 0A11                       __end_of___flmul 11CA  
                    __end_of_ISNUMBER 1917                       __end_of___lldiv 1CFF  
                               u10005 117D                                 u10015 1184  
                               u10045 119D                                 u10135 1D88  
                               u10055 11A4                                 u10305 0C00  
                               u10075 15DA                                 u10085 15F4  
                               u10325 0C10                                 u10095 1604  
                               _CKPPS 0E25                       __end_of___llmod 1C17  
                               _T2CON 001C                                 _IOCAF 0393  
                               _IOCAN 0392                                 _IOCAP 0391  
                               i1l410 1E54                                 i1l405 1E30  
                               i1l414 1E5D                                 i1l406 1E33  
                               i1l280 1B37                                 i1l282 1B50  
                               i1l290 1A4E                                 i1l291 1A65  
                               i1l288 1A48                                 i1l618 1976  
      __size_of_UART_send_break_timed 0027                                 _RCREG 0199  
                               _RCSTA 019D                                 _SPBRG 019B  
       __end_of_UART_send_break_timed 1A3B                  _PS_2_Read_Data_First 01A0  
                               _PORTA 000C                                 _PORTC 000E  
                _PS_2_Read_Data_Forth 01A2                          InitUART@Baud 0033  
                               _RXPPS 0E24                                 _TXREG 019A  
                 _ConfigureOscillator 1946                                 _Alarm 00E8  
                _PS_2_Read_Data_Third 01A6                       __end_of_delayUS 1037  
                    _InternalADC_Read 1C17                           i1delayUS@US 0070  
                 ___lmul@multiplicand 0029      __size_ofi1_UART_send_break_timed 0025  
                      __CFG_FCMEN$OFF 0000            __end_of_Keyboard_Connected 1DA9  
                        InitUART@temp 0044                 _WriteFlash_Sequential 12BA  
               ReadFlash_2Byte@column 0027                      __end_of_UARTchar 1F2F  
                          SetBaud@buf 0120                       __end_of_dpowers 09FB  
                  __size_of_PS_2_INIT 000C                                 main@i 00E7  
                               isr@rx 0024                                 ltemp0 007E  
                               ltemp1 0082                                 ltemp2 0086  
                               ltemp3 0080               InternalADC_Read@channel 0033  
                               ttemp0 007E                                 ttemp1 0081  
                               ttemp2 0084                                 ttemp3 0087  
                               ttemp4 007F                                 status 0003  
                               wtemp0 007E                                 wtemp1 0080  
                               wtemp2 0082                                 wtemp3 0084  
                               wtemp4 0086                                 wtemp5 0088  
                               wtemp6 007F                       __end_of_sprintf 1593  
                ?_ConfigureOscillator 0070        __end_of_Decode_Scan_Code_Shift 19B6  
                       _ScanCodeSHIFT 08F5                    __size_ofi1_delayUS 0033  
                     __initialization 00EA                __end_of_Init_PS_2_Send 149F  
                  __size_of_Data_TRIS 000B                          __end_of_main 1000  
                    __end_of_InitUART 12BA                            _Read_Timer 0224  
                    ??_UARTstringWAIT 0036                           isr@Rx_fault 0023  
                    __end_of_ReadBaud 1ECA            __end_of_DisableInternalADC 18B2  
                    __end_of_ScanCode 08F5                        __CFG_LPBOR$OFF 0000  
            __size_of_READ_CONFIG_PIN 0007                      __end_of_Send_PS2 0E08  
                              ??_main 0065          __end_of_ScanCodeFunctionNoE0 0884  
                      __CFG_PLLEN$OFF 0000                   __end_of_Init_System 169B  
                        ReadBaud@temp 0043                      i1CheckSum_byte@i 0077  
       Decode_Scan_Code_Function@Code 0025                   __end_of_ReadVoltage 0C69  
               ReadFlash_4Byte@column 002C                                _ADCON0 009D  
                              _ADCON1 009E                                _ADCON2 009F  
                 __size_ofi1_UARTchar 005F                      ___llmod@dividend 0037  
                              _ADRESH 009C                                _ADRESL 009B  
                    __end_of___flpack 2000                         _READ_PS_2_PIN 1958  
                      __CFG_ZCDDIS$ON 0000                                _ANSELA 018C  
                              _ANSELC 018E                                _HFIOFS 04D0  
                              _RC1STA 019D                                _RC2PPS 0EA2  
                              i1l5104 18A9                                i1l5060 1B59  
                              i1l5084 1A63                                i1l5076 1A5B  
                              i1l5094 1A69                                i1l5432 1974  
                              i1l5512 00B2                                i1l5504 0095  
                              i1l5442 197B                                i1l5514 00BE  
                              i1l5372 1E10                                i1l5380 1E43  
                              i1l5374 1E1A                                i1l5382 1E4C  
                              i1l5526 00DD                                i1l5462 002A  
                              i1l5528 00DF                                i1l5378 1E36  
                              i1l5482 0060                                i1l5474 0048  
                              i1l5466 0030                                i1l5492 007A  
                              i1l5488 0072                                _INTCON 000B  
                              _FVRCON 0117                                _PARITY 00EA  
                              _PMADRH 0192                                _PMADRL 0191  
                    __end_of___lwtofl 07FB                                _PMDATH 0194  
                              _PMDATL 0193                                _PMCON1 0195  
                              _PMCON2 0196                                u700_25 0037  
                  __size_of_ReadUSART 000A                                u703_25 004F  
                              u705_25 0062                                _OSCCON 0099  
                              u644_23 1B49                                u647_25 1A4F  
                              _SPBRGH 019C                                u697_25 001A  
                              _TX1STA 019E                                _UNLOCK 18E4  
                     _No_Keyboard_old 016E                 _PS_2_Read_Data_Second 01A4  
                           ??_InitApp 0025                 ??_ConfigureOscillator 0025  
                              _Delete 0166                        __CFG_PWRTE$OFF 0000  
                           ??_SetBaud 0059                           ?_BlockErase 0025  
                       InitUART@spbrg 0040                           SetBaud@Baud 0054  
                  __size_of_OpenUSART 003F                       ?_Init_PS_2_Send 0070  
                              ___flge 1F2F                     ?_Decode_Scan_Code 0070  
                              ___lmul 1A6B                             ??___fldiv 003C  
                      __CFG_STVREN$ON 0000                             ??___flmul 0050  
                           ??___lldiv 002D                           ?_Clock_TRIS 0070  
                           ??___llmod 003B                           SetBaud@temp 015A  
                   __end_of_PS_2_INIT 18FB                    ??_Decode_Scan_Code 0025  
                        ?i1_ReadUSART 0070                             ??_delayUS 0029  
__size_of_Decode_Scan_Code_FunctionE0 0013                           ?_CloseUSART 0070  
              ?_WriteFlash_Sequential 002F                     __end_ofi1_delayUS 1B62  
                     SetBaud@Baudtemp 0152                __size_of_CheckSum_byte 0031  
                   ??i1_CheckSum_byte 0073                        ?_READ_PS_2_PIN 0070  
                   __end_of_Data_TRIS 18E4                             ??_sprintf 0045  
             i1READ_PS_2_PIN@DATA_CLK 0070                            ___flge@ff1 0025  
                          ___flge@ff2 0029                          ?_PS_2_Update 0070  
                     _ReadFlash_2Byte 1AFD                       _ReadFlash_4Byte 1C5B  
                          ___fldiv@f1 0038                            ___fldiv@f2 0034  
                          ___fldiv@f3 0041               __end_of__initialization 011F  
                  __size_of_WriteBaud 005E                            ___flmul@f1 0048  
                          ___flmul@f2 004C                        PS_2_Update@buf 02A0  
             ?_PS_2_DISABLE_INTERRUPT 0070                             ?_ISNUMBER 0070  
                         _No_Keyboard 00EB                    __size_of_baudUSART 0009  
                      __pcstackCOMMON 0070                          __pidataBANK1 07FB  
                        __pidataBANK2 07FC                          __pidataBANK4 1917  
                           ?_UARTchar 002D                    InitUART@baudconfig 0042  
                         _Init_System 1593                     __end_of_ReadUSART 18CE  
                          ___lwtofl@c 002F                           _ReadVoltage 0BE4  
                     ReadVoltage@temp 00A4                          WriteBaud@row 0036  
             i1_UART_send_break_timed 19EF                        _OPTION_REGbits 0095  
                 ReadFlash_4Byte@temp 0033                     ??_READ_CONFIG_PIN 0070  
                       ReadUSART@data 0026                           _SinLEDtimer 0236  
  __size_of_Decode_Scan_Code_Function 0011                     __end_of_OpenUSART 1BD4  
                 __size_of_BlockErase 0031                       WriteBaud@Parity 003C  
                   Send_PS2@oddparity 0033                            __pbssBANK0 0066  
                          __pbssBANK1 00E8                            __pbssBANK2 015F  
                          __pbssBANK3 01A0                            __pbssBANK4 022E  
                 __size_of_Clock_TRIS 000B                             ?_InitUART 0033  
                           ?_ReadBaud 0037        __end_of_PS_2_DISABLE_INTERRUPT 0BE4  
                  ReadVoltage@voltage 00A0                               ?_UNLOCK 0070  
                     i1_READ_PS_2_PIN 196A                   __size_of_CloseUSART 000E  
                           ?_Send_PS2 0070                            ??_ISNUMBER 0025  
                _ScanCodeFunctionNoE0 0800              __end_of_InternalADC_Read 1C5B  
                  _ScanCodeFunctionE0 0966                         _CheckSum_byte 1A9B  
                          __pmaintext 0E08                          ??i1_UARTchar 007A  
                         _ParityTyped 01AB                         BlockErase@row 0025  
                             ?___flge 0025                               ?___lmul 0025  
                 i1CheckSum_byte@This 0070                         _Caps_Lock_Key 0164  
                       ?_Reverse_Byte 0070                            __pintentry 0004  
                          ??_UARTchar 002F                            _blinkdelay 016C  
                           ?___flpack 0025                        ___lmul@product 002D  
               i1CheckSum_byte@Parity 0076                             ?___lwtofl 002F  
                   __end_of_WriteBaud 1E07                       ??_READ_PS_2_PIN 0025  
                   __end_of_baudUSART 18C4               __end_of_ReadFlash_2Byte 1B2F  
             __end_of_ReadFlash_4Byte 1CAC                               _OSCSTAT 009A  
                 Clock_TRIS@direction 0025                               _PPSLOCK 0E0F  
                  __end_ofi1_UARTchar 1E66                            ??_InitUART 0038  
                          ??_ReadBaud 003B                 READ_PS_2_PIN@DATA_CLK 0025  
               _PS_2_ENABLE_INTERRUPT 19B6                       __size_of_UNLOCK 000B  
                             _InitApp 19CB                            ??_Send_PS2 002F  
                  _Keyboard_Connected 1D54                               _SetBaud 169B  
                      InitUART@config 0043                        ?_CheckSum_byte 0025  
         __end_of_INIT_PS_2_INTERRUPT 1935                        InitUART@parity 0037  
             i1CheckSum_byte@Odd_Even 0072                        ??_Reverse_Byte 0025  
                             _Version 022A                       __size_of___flge 0066  
                             ___fldiv 1037                       __size_of___lmul 0030  
                             ___flmul 10F8                   ?_Keyboard_Connected 0070  
                             ___lldiv 1CAC                               ___llmod 1BD4  
                          ??___flpack 002B                               _delayUS 1002  
           ??i1_UART_send_break_timed 007C                               __ptext1 1F2F  
                             __ptext2 0BE4                               __ptext3 07E3  
                             __ptext4 10F8                               __ptext5 1037  
                             __ptext6 1F95                               __ptext7 1C17  
                             __ptext8 18AB                               __ptext9 18EF  
                          ??___lwtofl 0033                  __size_ofi1_ReadUSART 0009  
                             _dpowers 09D3                             _T2CONbits 001C  
             i1CheckSum_byte@ThisTemp 0074                          __size_of_isr 00E4  
         WriteFlash_Sequential@amount 0032           WriteFlash_Sequential@buffer 0031  
               _UART_send_break_timed 1A14                    _DisableInternalADC 18AB  
         WriteFlash_Sequential@spaces 00E5               __end_ofi1_READ_PS_2_PIN 197D  
                ??_Keyboard_Connected 0061                               _sprintf 149F  
                             clrloop0 189F                     _Caps_Lock_Key_old 0165  
                end_of_initialization 011F                       i1ReadUSART@data 0071  
                             init_ram 1898                   ?_DisableInternalADC 0070  
                             initloop 1899                      UARTchar@override 002D  
                    ??_Init_PS_2_Send 0038          ?_Decode_Scan_Code_FunctionE0 0070  
                __size_of_PS_2_Update 06C0                       ___lldiv@divisor 0025  
                     ___lldiv@counter 0032                          ??_BlockErase 0027  
                           _RCSTAbits 019D                          ??_Clock_TRIS 0025  
                        __pstringtext 0800              _PS_2_Read_Data_FirstTEMP 022E  
                     i1_CheckSum_byte 1A3B               ??_WriteFlash_Sequential 0033  
                        ??_CloseUSART 0025                  ??_DisableInternalADC 0025  
            _PS_2_Read_Data_ForthTEMP 0230                             _PS_2_INIT 18EF  
                    __CFG_FOSC$INTOSC 0000                             _PS_2_bits 006A  
                           _TRISAbits 008C                             _TRISCbits 008E  
           __size_of_Decode_Scan_Code 0013                      ?_ReadFlash_2Byte 0025  
                    ?_ReadFlash_4Byte 002A                           ___fldiv@exp 0046  
                  __end_of_BlockErase 1AFD           __end_of_ConfigureOscillator 1958  
                           i1_delayUS 1B2F                ?_PS_2_ENABLE_INTERRUPT 0070  
                  __end_of_Clock_TRIS 18D9                           ___flmul@exp 0055  
                           _BaudTyped 0066                             _Data_TRIS 18D9  
                     PS_2_Update@temp 02E0                             _CapsCount 01A8  
                           _Caps_Lock 01A9              _PS_2_Read_Data_ThirdTEMP 0234  
                     ??_CheckSum_byte 0028                           _CCP2CONbits 029A  
                           _TXSTAbits 019E                        __end_of_UNLOCK 18EF  
                  __end_of_CloseUSART 1909         ??_Decode_Scan_Code_FunctionE0 0025  
                   __size_of_ISNUMBER 000E                        __end_of___flge 1F95  
               CheckSum_byte@Odd_Even 0027                          ?_Init_System 0070  
                      __end_of___lmul 1A9B                       _READ_CONFIG_PIN 18A4  
                   __size_of_UARTchar 0065                          ?_ReadVoltage 005C  
                          ?_PS_2_INIT 0070                             Send_PS2@i 0035  
         INIT_PS_2_INTERRUPT@DATA_CLK 0025                ?_UART_send_break_timed 002F  
                 start_initialization 00EA                             _ReadUSART 18C4  
             __size_of_UARTstringWAIT 0033                 CheckSum_byte@ThisTemp 0029  
                         __end_of_isr 00E8                         WriteBaud@Baud 0038  
                __end_of_Reverse_Byte 1D54                      ?i1_READ_PS_2_PIN 0070  
                          ?i1_delayUS 0070              ??_Decode_Scan_Code_Shift 0025  
                       WriteBaud@temp 0045                             _OpenUSART 1B95  
                          ?_Data_TRIS 0070                              ??_UNLOCK 0025  
                     ___llmod@divisor 0033                     __size_of_InitUART 00F0  
                     ___llmod@counter 003C                     __size_of_ReadBaud 0064  
                           _Shift_Key 01AE               __end_ofi1_CheckSum_byte 1A6B  
                   ?_InternalADC_Read 002F                     __size_of_Send_PS2 019F  
                            ??___flge 002D                              ??___lmul 002D  
           _PS_2_Read_Data_SecondTEMP 0232                    ??_InternalADC_Read 0031  
                         __pdataBANK1 00EB                           __pdataBANK2 016E  
                         __pdataBANK4 0220                     __size_of___flpack 006B  
                          ?_ReadUSART 0070                             ___latbits 0002  
                   __size_of___lwtofl 0018                         __pcstackBANK0 0020  
                       __pcstackBANK1 00A0                         __pcstackBANK2 0120  
                       __pcstackBANK3 01AF                         __pcstackBANK5 02A0  
                           _WriteBaud 1DA9                   __end_of__stringdata 0BC5  
                  i1UARTchar@override 0078                    ReadFlash_2Byte@row 0025  
                           _baudUSART 18BB                    ReadFlash_4Byte@row 002A  
                          ?_OpenUSART 0025                           sprintf@_val 004E  
                         sprintf@flag 004B                           sprintf@prec 004C  
                            ?_InitApp 0070                 __end_of_ScanCodeSHIFT 0966  
     Decode_Scan_Code_FunctionE0@Code 0025                              ?_SetBaud 0054  
             __end_of_READ_CONFIG_PIN 18AB                        ReadBaud@column 0039  
                            ?___fldiv 0034                              ?___flmul 0048  
                            ?___lldiv 0025                              ?___llmod 0033  
                    __CFG_PPS1WAY$OFF 0000         WriteFlash_Sequential@TempBufH 00A0  
       WriteFlash_Sequential@TempBufL 00C0                              ?_delayUS 0025  
              WriteFlash_Sequential@i 00E6            Decode_Scan_Code_Shift@Code 0025  
                            _BAUD1CON 019F                           ??_PS_2_INIT 0026  
                            _BAUDMODE 0163                      _Decode_Scan_Code 197D  
                          ?_WriteBaud 0036                 __end_of_READ_PS_2_PIN 196A  
                            ?_sprintf 003D                       _PS_2_Update$830 02DC  
                     _PS_2_Update$831 02DD                       _PS_2_Update$832 02DE  
                     _PS_2_Update$833 02DF                            ?_baudUSART 0070  
                         ??i1_delayUS 0074                             delayUS@US 0025  
     __size_of_Decode_Scan_Code_Shift 0013            ?_Decode_Scan_Code_Function 0070  
                         ??_Data_TRIS 0025            WriteFlash_Sequential@tempH 00E0  
          WriteFlash_Sequential@tempL 00E1                             clear_ram0 189E  
                            _PIE1bits 0091                              _ISNUMBER 1909  
                            _PIR1bits 0011                      ?i1_CheckSum_byte 0070  
            WriteFlash_Sequential@row 002F                              _UARTchar 1ECA  
                       ??i1_ReadUSART 0070                              _LControl 0168  
        __size_of_INIT_PS_2_INTERRUPT 0010                           __stringdata 09FB  
                __size_of_Init_System 0108        __size_of_WriteFlash_Sequential 00F2  
       __end_of_WriteFlash_Sequential 13AC                 __size_of_Reverse_Byte 0055  
                      _UARTstringWAIT 1B62                           ??_ReadUSART 0025  
                __size_of_ReadVoltage 0085                              _RControl 016A  
            ??_PS_2_DISABLE_INTERRUPT 0025               ??_PS_2_ENABLE_INTERRUPT 0025  
                   ___lmul@multiplier 0025           __size_of_Keyboard_Connected 0055  
                            SetBaud@i 015E                         ??_PS_2_Update 01AF  
                            _InitUART 11CA                              _ReadBaud 1E66  
                         ??_OpenUSART 0027                              _ScanCode 0884  
                     OpenUSART@config 0027     __end_of_Decode_Scan_Code_Function 1946  
                            _Send_PS2 0C69                      __size_of_InitApp 0024  
                    ?_READ_CONFIG_PIN 0070                      __size_of_SetBaud 0165  
            ?i1_UART_send_break_timed 007A                          _Reverse_Byte 1CFF  
                    __size_of___fldiv 00C1                      __size_of___flmul 00D2  
              _Decode_Scan_Code_Shift 19A3                      __size_of___lldiv 0053  
                    __size_of___llmod 0043                              ___flpack 1F95  
                       SetBaud@Parity 0058               ??_UART_send_break_timed 0031  
                    __size_of_delayUS 0035           __size_of_DisableInternalADC 0007  
              __end_of_UARTstringWAIT 1B95                              ___lwtofl 07E3  
                     Send_PS2@command 0034                   __end_ofi1_ReadUSART 18BB  
                         ??_WriteBaud 003D                       Send_PS2@timeout 0036  
                       ISNUMBER@ascii 0025                              __ptext10 1925  
                            __ptext11 1D54                              __ptext20 1CFF  
                            __ptext12 0123                              __ptext21 1909  
                            __ptext13 1A6B                              __ptext30 1ECA  
                            __ptext22 19A3                              __ptext14 1A14  
                            __ptext31 1E66                              __ptext23 1990  
                            __ptext15 169B                              __ptext40 13AC  
                            __ptext32 1C5B                              __ptext24 1935  
                            __ptext16 1DA9                              __ptext41 0C69  
                            __ptext33 1AFD                              __ptext25 197D  
                            __ptext17 12BA                              __ptext50 1946  
                            __ptext42 1002                              __ptext34 11CA  
                            __ptext26 1593                              __ptext18 1ACC  
                            __ptext43 1958                              __ptext35 18BB  
                            __ptext27 149F                              __ptext19 18E4  
                            __ptext52 1E07                              __ptext44 19B6  
                            __ptext36 1CAC                              __ptext28 1BD4  
                            __ptext53 1A3B                              __ptext45 18D9  
                            __ptext37 18C4                              __ptext29 1B62  
                            __ptext54 19EF                              __ptext46 18CE  
                            __ptext38 1B95                              __ptext55 1B2F  
                            __ptext47 1A9B                              __ptext39 18FB  
                            __ptext56 18B2                              __ptext48 0BC5  
                            __ptext57 196A                              __ptext49 19CB  
                            __ptext58 18A4         PS_2_ENABLE_INTERRUPT@DATA_CLK 0026  
                         ??_baudUSART 0025                      __size_of_sprintf 00F4  
                 Keyboard_Connected@i 0061                         __size_of_main 01F8  
            __size_of_ReadFlash_2Byte 0032              __size_of_ReadFlash_4Byte 0051  
                            delayUS@i 002A                              delayUS@j 002E  
                        _pwrLEDtoggle 0238          __size_of_ConfigureOscillator 0012  
               __end_of_CheckSum_byte 1ACC                   __end_of_PS_2_Update 07E3  
                          _RC1STAbits 019D                        CheckSum_byte@i 002C  
                      _Left_Shift_Key 01AA               __size_of_Init_PS_2_Send 00F3  
               ___flmul@f3_as_product 0056                       ?_UARTstringWAIT 0034  
                 CheckSum_byte@Parity 002B                            _INTCONbits 000B  
           __size_of_InternalADC_Read 0044                        OpenUSART@spbrg 0025  
                        UARTchar@data 0033                           pic14e$flags 007E  
     __size_of_PS_2_DISABLE_INTERRUPT 001F                              intlevel1 0000  
                           sprintf@ap 0052                             sprintf@sp 003D  
                    ___lldiv@dividend 0029   __end_of_Decode_Scan_Code_FunctionE0 19A3  
         _Decode_Scan_Code_FunctionE0 1990                     __CFG_CLKOUTEN$OFF 0000  
     __end_ofi1_UART_send_break_timed 1A14                        _BatteryVoltage 015F  
            __size_ofi1_READ_PS_2_PIN 0013              __end_of_Decode_Scan_Code 1990  
                          i1_UARTchar 1E07                       _Right_Shift_Key 01AD  
                         i1_ReadUSART 18B2                              sprintf@c 0053  
                            sprintf@f 003F                      ___lldiv@quotient 002E  
                Decode_Scan_Code@Code 0025                     Init_System@Parity 00E0  
                  _Left_Shift_Key_old 0169                            _TX1STAbits 019E  
                   CheckSum_byte@This 0025                        i1UARTchar@data 0020  
                         _PS_2_Update 0123                   _INIT_PS_2_INTERRUPT 1925  
         ??_Decode_Scan_Code_Function 0025                       Init_System@Baud 00E1  
                     Init_System@temp 00DC                        Init_System@buf 00A0  
      PS_2_DISABLE_INTERRUPT@DATA_CLK 0026  
