

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Mon Mar 02 10:06:52 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F1705
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK4,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    12                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	intentry,global,class=CODE,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	dabs	1,0x7E,2
   102  0000                     	;# 
   103  0001                     	;# 
   104  0002                     	;# 
   105  0003                     	;# 
   106  0004                     	;# 
   107  0005                     	;# 
   108  0006                     	;# 
   109  0007                     	;# 
   110  0008                     	;# 
   111  0009                     	;# 
   112  000A                     	;# 
   113  000B                     	;# 
   114  000C                     	;# 
   115  000E                     	;# 
   116  0011                     	;# 
   117  0012                     	;# 
   118  0013                     	;# 
   119  0015                     	;# 
   120  0016                     	;# 
   121  0016                     	;# 
   122  0017                     	;# 
   123  0018                     	;# 
   124  0019                     	;# 
   125  001A                     	;# 
   126  001B                     	;# 
   127  001C                     	;# 
   128  008C                     	;# 
   129  008E                     	;# 
   130  0091                     	;# 
   131  0092                     	;# 
   132  0093                     	;# 
   133  0095                     	;# 
   134  0096                     	;# 
   135  0097                     	;# 
   136  0098                     	;# 
   137  0099                     	;# 
   138  009A                     	;# 
   139  009B                     	;# 
   140  009B                     	;# 
   141  009C                     	;# 
   142  009D                     	;# 
   143  009E                     	;# 
   144  009F                     	;# 
   145  010C                     	;# 
   146  010E                     	;# 
   147  0111                     	;# 
   148  0112                     	;# 
   149  0113                     	;# 
   150  0114                     	;# 
   151  0115                     	;# 
   152  0116                     	;# 
   153  0117                     	;# 
   154  0118                     	;# 
   155  0119                     	;# 
   156  011C                     	;# 
   157  018C                     	;# 
   158  018E                     	;# 
   159  0191                     	;# 
   160  0191                     	;# 
   161  0192                     	;# 
   162  0193                     	;# 
   163  0193                     	;# 
   164  0194                     	;# 
   165  0195                     	;# 
   166  0196                     	;# 
   167  0197                     	;# 
   168  0199                     	;# 
   169  0199                     	;# 
   170  0199                     	;# 
   171  019A                     	;# 
   172  019A                     	;# 
   173  019A                     	;# 
   174  019B                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019B                     	;# 
   179  019C                     	;# 
   180  019C                     	;# 
   181  019C                     	;# 
   182  019D                     	;# 
   183  019D                     	;# 
   184  019D                     	;# 
   185  019E                     	;# 
   186  019E                     	;# 
   187  019E                     	;# 
   188  019F                     	;# 
   189  019F                     	;# 
   190  019F                     	;# 
   191  019F                     	;# 
   192  019F                     	;# 
   193  020C                     	;# 
   194  020E                     	;# 
   195  0211                     	;# 
   196  0211                     	;# 
   197  0212                     	;# 
   198  0212                     	;# 
   199  0213                     	;# 
   200  0213                     	;# 
   201  0214                     	;# 
   202  0214                     	;# 
   203  0215                     	;# 
   204  0215                     	;# 
   205  0215                     	;# 
   206  0215                     	;# 
   207  0216                     	;# 
   208  0216                     	;# 
   209  0217                     	;# 
   210  0217                     	;# 
   211  028C                     	;# 
   212  028E                     	;# 
   213  0291                     	;# 
   214  0291                     	;# 
   215  0292                     	;# 
   216  0293                     	;# 
   217  0293                     	;# 
   218  0298                     	;# 
   219  0298                     	;# 
   220  0299                     	;# 
   221  029A                     	;# 
   222  029A                     	;# 
   223  029E                     	;# 
   224  030C                     	;# 
   225  030E                     	;# 
   226  038C                     	;# 
   227  038E                     	;# 
   228  0391                     	;# 
   229  0392                     	;# 
   230  0393                     	;# 
   231  0397                     	;# 
   232  0398                     	;# 
   233  0399                     	;# 
   234  0415                     	;# 
   235  0416                     	;# 
   236  0417                     	;# 
   237  041C                     	;# 
   238  041D                     	;# 
   239  041E                     	;# 
   240  0511                     	;# 
   241  0515                     	;# 
   242  0617                     	;# 
   243  0618                     	;# 
   244  0619                     	;# 
   245  0619                     	;# 
   246  061A                     	;# 
   247  061B                     	;# 
   248  061C                     	;# 
   249  061C                     	;# 
   250  0691                     	;# 
   251  0692                     	;# 
   252  0693                     	;# 
   253  0694                     	;# 
   254  0695                     	;# 
   255  0696                     	;# 
   256  0697                     	;# 
   257  0698                     	;# 
   258  0699                     	;# 
   259  069A                     	;# 
   260  069B                     	;# 
   261  069C                     	;# 
   262  069D                     	;# 
   263  069E                     	;# 
   264  069F                     	;# 
   265  0E0F                     	;# 
   266  0E10                     	;# 
   267  0E11                     	;# 
   268  0E12                     	;# 
   269  0E13                     	;# 
   270  0E14                     	;# 
   271  0E15                     	;# 
   272  0E17                     	;# 
   273  0E20                     	;# 
   274  0E21                     	;# 
   275  0E22                     	;# 
   276  0E24                     	;# 
   277  0E25                     	;# 
   278  0E28                     	;# 
   279  0E29                     	;# 
   280  0E2A                     	;# 
   281  0E2B                     	;# 
   282  0E90                     	;# 
   283  0E91                     	;# 
   284  0E92                     	;# 
   285  0E94                     	;# 
   286  0E95                     	;# 
   287  0EA0                     	;# 
   288  0EA1                     	;# 
   289  0EA2                     	;# 
   290  0EA3                     	;# 
   291  0EA4                     	;# 
   292  0EA5                     	;# 
   293  0F0F                     	;# 
   294  0F10                     	;# 
   295  0F11                     	;# 
   296  0F12                     	;# 
   297  0F13                     	;# 
   298  0F14                     	;# 
   299  0F15                     	;# 
   300  0F16                     	;# 
   301  0F17                     	;# 
   302  0F18                     	;# 
   303  0F19                     	;# 
   304  0F1A                     	;# 
   305  0F1B                     	;# 
   306  0F1C                     	;# 
   307  0F1D                     	;# 
   308  0F1E                     	;# 
   309  0F1F                     	;# 
   310  0F20                     	;# 
   311  0F21                     	;# 
   312  0F22                     	;# 
   313  0F23                     	;# 
   314  0F24                     	;# 
   315  0F25                     	;# 
   316  0F26                     	;# 
   317  0F27                     	;# 
   318  0F28                     	;# 
   319  0F29                     	;# 
   320  0F2A                     	;# 
   321  0F2B                     	;# 
   322  0F2C                     	;# 
   323  0F2D                     	;# 
   324  0F9E                     	;# 
   325  0FE4                     	;# 
   326  0FE5                     	;# 
   327  0FE6                     	;# 
   328  0FE7                     	;# 
   329  0FE8                     	;# 
   330  0FE9                     	;# 
   331  0FEA                     	;# 
   332  0FEB                     	;# 
   333  0FED                     	;# 
   334  0FEE                     	;# 
   335  0FEF                     	;# 
   336  0000                     	;# 
   337  0001                     	;# 
   338  0002                     	;# 
   339  0003                     	;# 
   340  0004                     	;# 
   341  0005                     	;# 
   342  0006                     	;# 
   343  0007                     	;# 
   344  0008                     	;# 
   345  0009                     	;# 
   346  000A                     	;# 
   347  000B                     	;# 
   348  000C                     	;# 
   349  000E                     	;# 
   350  0011                     	;# 
   351  0012                     	;# 
   352  0013                     	;# 
   353  0015                     	;# 
   354  0016                     	;# 
   355  0016                     	;# 
   356  0017                     	;# 
   357  0018                     	;# 
   358  0019                     	;# 
   359  001A                     	;# 
   360  001B                     	;# 
   361  001C                     	;# 
   362  008C                     	;# 
   363  008E                     	;# 
   364  0091                     	;# 
   365  0092                     	;# 
   366  0093                     	;# 
   367  0095                     	;# 
   368  0096                     	;# 
   369  0097                     	;# 
   370  0098                     	;# 
   371  0099                     	;# 
   372  009A                     	;# 
   373  009B                     	;# 
   374  009B                     	;# 
   375  009C                     	;# 
   376  009D                     	;# 
   377  009E                     	;# 
   378  009F                     	;# 
   379  010C                     	;# 
   380  010E                     	;# 
   381  0111                     	;# 
   382  0112                     	;# 
   383  0113                     	;# 
   384  0114                     	;# 
   385  0115                     	;# 
   386  0116                     	;# 
   387  0117                     	;# 
   388  0118                     	;# 
   389  0119                     	;# 
   390  011C                     	;# 
   391  018C                     	;# 
   392  018E                     	;# 
   393  0191                     	;# 
   394  0191                     	;# 
   395  0192                     	;# 
   396  0193                     	;# 
   397  0193                     	;# 
   398  0194                     	;# 
   399  0195                     	;# 
   400  0196                     	;# 
   401  0197                     	;# 
   402  0199                     	;# 
   403  0199                     	;# 
   404  0199                     	;# 
   405  019A                     	;# 
   406  019A                     	;# 
   407  019A                     	;# 
   408  019B                     	;# 
   409  019B                     	;# 
   410  019B                     	;# 
   411  019B                     	;# 
   412  019B                     	;# 
   413  019C                     	;# 
   414  019C                     	;# 
   415  019C                     	;# 
   416  019D                     	;# 
   417  019D                     	;# 
   418  019D                     	;# 
   419  019E                     	;# 
   420  019E                     	;# 
   421  019E                     	;# 
   422  019F                     	;# 
   423  019F                     	;# 
   424  019F                     	;# 
   425  019F                     	;# 
   426  019F                     	;# 
   427  020C                     	;# 
   428  020E                     	;# 
   429  0211                     	;# 
   430  0211                     	;# 
   431  0212                     	;# 
   432  0212                     	;# 
   433  0213                     	;# 
   434  0213                     	;# 
   435  0214                     	;# 
   436  0214                     	;# 
   437  0215                     	;# 
   438  0215                     	;# 
   439  0215                     	;# 
   440  0215                     	;# 
   441  0216                     	;# 
   442  0216                     	;# 
   443  0217                     	;# 
   444  0217                     	;# 
   445  028C                     	;# 
   446  028E                     	;# 
   447  0291                     	;# 
   448  0291                     	;# 
   449  0292                     	;# 
   450  0293                     	;# 
   451  0293                     	;# 
   452  0298                     	;# 
   453  0298                     	;# 
   454  0299                     	;# 
   455  029A                     	;# 
   456  029A                     	;# 
   457  029E                     	;# 
   458  030C                     	;# 
   459  030E                     	;# 
   460  038C                     	;# 
   461  038E                     	;# 
   462  0391                     	;# 
   463  0392                     	;# 
   464  0393                     	;# 
   465  0397                     	;# 
   466  0398                     	;# 
   467  0399                     	;# 
   468  0415                     	;# 
   469  0416                     	;# 
   470  0417                     	;# 
   471  041C                     	;# 
   472  041D                     	;# 
   473  041E                     	;# 
   474  0511                     	;# 
   475  0515                     	;# 
   476  0617                     	;# 
   477  0618                     	;# 
   478  0619                     	;# 
   479  0619                     	;# 
   480  061A                     	;# 
   481  061B                     	;# 
   482  061C                     	;# 
   483  061C                     	;# 
   484  0691                     	;# 
   485  0692                     	;# 
   486  0693                     	;# 
   487  0694                     	;# 
   488  0695                     	;# 
   489  0696                     	;# 
   490  0697                     	;# 
   491  0698                     	;# 
   492  0699                     	;# 
   493  069A                     	;# 
   494  069B                     	;# 
   495  069C                     	;# 
   496  069D                     	;# 
   497  069E                     	;# 
   498  069F                     	;# 
   499  0E0F                     	;# 
   500  0E10                     	;# 
   501  0E11                     	;# 
   502  0E12                     	;# 
   503  0E13                     	;# 
   504  0E14                     	;# 
   505  0E15                     	;# 
   506  0E17                     	;# 
   507  0E20                     	;# 
   508  0E21                     	;# 
   509  0E22                     	;# 
   510  0E24                     	;# 
   511  0E25                     	;# 
   512  0E28                     	;# 
   513  0E29                     	;# 
   514  0E2A                     	;# 
   515  0E2B                     	;# 
   516  0E90                     	;# 
   517  0E91                     	;# 
   518  0E92                     	;# 
   519  0E94                     	;# 
   520  0E95                     	;# 
   521  0EA0                     	;# 
   522  0EA1                     	;# 
   523  0EA2                     	;# 
   524  0EA3                     	;# 
   525  0EA4                     	;# 
   526  0EA5                     	;# 
   527  0F0F                     	;# 
   528  0F10                     	;# 
   529  0F11                     	;# 
   530  0F12                     	;# 
   531  0F13                     	;# 
   532  0F14                     	;# 
   533  0F15                     	;# 
   534  0F16                     	;# 
   535  0F17                     	;# 
   536  0F18                     	;# 
   537  0F19                     	;# 
   538  0F1A                     	;# 
   539  0F1B                     	;# 
   540  0F1C                     	;# 
   541  0F1D                     	;# 
   542  0F1E                     	;# 
   543  0F1F                     	;# 
   544  0F20                     	;# 
   545  0F21                     	;# 
   546  0F22                     	;# 
   547  0F23                     	;# 
   548  0F24                     	;# 
   549  0F25                     	;# 
   550  0F26                     	;# 
   551  0F27                     	;# 
   552  0F28                     	;# 
   553  0F29                     	;# 
   554  0F2A                     	;# 
   555  0F2B                     	;# 
   556  0F2C                     	;# 
   557  0F2D                     	;# 
   558  0F9E                     	;# 
   559  0FE4                     	;# 
   560  0FE5                     	;# 
   561  0FE6                     	;# 
   562  0FE7                     	;# 
   563  0FE8                     	;# 
   564  0FE9                     	;# 
   565  0FEA                     	;# 
   566  0FEB                     	;# 
   567  0FED                     	;# 
   568  0FEE                     	;# 
   569  0FEF                     	;# 
   570  0000                     	;# 
   571  0001                     	;# 
   572  0002                     	;# 
   573  0003                     	;# 
   574  0004                     	;# 
   575  0005                     	;# 
   576  0006                     	;# 
   577  0007                     	;# 
   578  0008                     	;# 
   579  0009                     	;# 
   580  000A                     	;# 
   581  000B                     	;# 
   582  000C                     	;# 
   583  000E                     	;# 
   584  0011                     	;# 
   585  0012                     	;# 
   586  0013                     	;# 
   587  0015                     	;# 
   588  0016                     	;# 
   589  0016                     	;# 
   590  0017                     	;# 
   591  0018                     	;# 
   592  0019                     	;# 
   593  001A                     	;# 
   594  001B                     	;# 
   595  001C                     	;# 
   596  008C                     	;# 
   597  008E                     	;# 
   598  0091                     	;# 
   599  0092                     	;# 
   600  0093                     	;# 
   601  0095                     	;# 
   602  0096                     	;# 
   603  0097                     	;# 
   604  0098                     	;# 
   605  0099                     	;# 
   606  009A                     	;# 
   607  009B                     	;# 
   608  009B                     	;# 
   609  009C                     	;# 
   610  009D                     	;# 
   611  009E                     	;# 
   612  009F                     	;# 
   613  010C                     	;# 
   614  010E                     	;# 
   615  0111                     	;# 
   616  0112                     	;# 
   617  0113                     	;# 
   618  0114                     	;# 
   619  0115                     	;# 
   620  0116                     	;# 
   621  0117                     	;# 
   622  0118                     	;# 
   623  0119                     	;# 
   624  011C                     	;# 
   625  018C                     	;# 
   626  018E                     	;# 
   627  0191                     	;# 
   628  0191                     	;# 
   629  0192                     	;# 
   630  0193                     	;# 
   631  0193                     	;# 
   632  0194                     	;# 
   633  0195                     	;# 
   634  0196                     	;# 
   635  0197                     	;# 
   636  0199                     	;# 
   637  0199                     	;# 
   638  0199                     	;# 
   639  019A                     	;# 
   640  019A                     	;# 
   641  019A                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019B                     	;# 
   647  019C                     	;# 
   648  019C                     	;# 
   649  019C                     	;# 
   650  019D                     	;# 
   651  019D                     	;# 
   652  019D                     	;# 
   653  019E                     	;# 
   654  019E                     	;# 
   655  019E                     	;# 
   656  019F                     	;# 
   657  019F                     	;# 
   658  019F                     	;# 
   659  019F                     	;# 
   660  019F                     	;# 
   661  020C                     	;# 
   662  020E                     	;# 
   663  0211                     	;# 
   664  0211                     	;# 
   665  0212                     	;# 
   666  0212                     	;# 
   667  0213                     	;# 
   668  0213                     	;# 
   669  0214                     	;# 
   670  0214                     	;# 
   671  0215                     	;# 
   672  0215                     	;# 
   673  0215                     	;# 
   674  0215                     	;# 
   675  0216                     	;# 
   676  0216                     	;# 
   677  0217                     	;# 
   678  0217                     	;# 
   679  028C                     	;# 
   680  028E                     	;# 
   681  0291                     	;# 
   682  0291                     	;# 
   683  0292                     	;# 
   684  0293                     	;# 
   685  0293                     	;# 
   686  0298                     	;# 
   687  0298                     	;# 
   688  0299                     	;# 
   689  029A                     	;# 
   690  029A                     	;# 
   691  029E                     	;# 
   692  030C                     	;# 
   693  030E                     	;# 
   694  038C                     	;# 
   695  038E                     	;# 
   696  0391                     	;# 
   697  0392                     	;# 
   698  0393                     	;# 
   699  0397                     	;# 
   700  0398                     	;# 
   701  0399                     	;# 
   702  0415                     	;# 
   703  0416                     	;# 
   704  0417                     	;# 
   705  041C                     	;# 
   706  041D                     	;# 
   707  041E                     	;# 
   708  0511                     	;# 
   709  0515                     	;# 
   710  0617                     	;# 
   711  0618                     	;# 
   712  0619                     	;# 
   713  0619                     	;# 
   714  061A                     	;# 
   715  061B                     	;# 
   716  061C                     	;# 
   717  061C                     	;# 
   718  0691                     	;# 
   719  0692                     	;# 
   720  0693                     	;# 
   721  0694                     	;# 
   722  0695                     	;# 
   723  0696                     	;# 
   724  0697                     	;# 
   725  0698                     	;# 
   726  0699                     	;# 
   727  069A                     	;# 
   728  069B                     	;# 
   729  069C                     	;# 
   730  069D                     	;# 
   731  069E                     	;# 
   732  069F                     	;# 
   733  0E0F                     	;# 
   734  0E10                     	;# 
   735  0E11                     	;# 
   736  0E12                     	;# 
   737  0E13                     	;# 
   738  0E14                     	;# 
   739  0E15                     	;# 
   740  0E17                     	;# 
   741  0E20                     	;# 
   742  0E21                     	;# 
   743  0E22                     	;# 
   744  0E24                     	;# 
   745  0E25                     	;# 
   746  0E28                     	;# 
   747  0E29                     	;# 
   748  0E2A                     	;# 
   749  0E2B                     	;# 
   750  0E90                     	;# 
   751  0E91                     	;# 
   752  0E92                     	;# 
   753  0E94                     	;# 
   754  0E95                     	;# 
   755  0EA0                     	;# 
   756  0EA1                     	;# 
   757  0EA2                     	;# 
   758  0EA3                     	;# 
   759  0EA4                     	;# 
   760  0EA5                     	;# 
   761  0F0F                     	;# 
   762  0F10                     	;# 
   763  0F11                     	;# 
   764  0F12                     	;# 
   765  0F13                     	;# 
   766  0F14                     	;# 
   767  0F15                     	;# 
   768  0F16                     	;# 
   769  0F17                     	;# 
   770  0F18                     	;# 
   771  0F19                     	;# 
   772  0F1A                     	;# 
   773  0F1B                     	;# 
   774  0F1C                     	;# 
   775  0F1D                     	;# 
   776  0F1E                     	;# 
   777  0F1F                     	;# 
   778  0F20                     	;# 
   779  0F21                     	;# 
   780  0F22                     	;# 
   781  0F23                     	;# 
   782  0F24                     	;# 
   783  0F25                     	;# 
   784  0F26                     	;# 
   785  0F27                     	;# 
   786  0F28                     	;# 
   787  0F29                     	;# 
   788  0F2A                     	;# 
   789  0F2B                     	;# 
   790  0F2C                     	;# 
   791  0F2D                     	;# 
   792  0F9E                     	;# 
   793  0FE4                     	;# 
   794  0FE5                     	;# 
   795  0FE6                     	;# 
   796  0FE7                     	;# 
   797  0FE8                     	;# 
   798  0FE9                     	;# 
   799  0FEA                     	;# 
   800  0FEB                     	;# 
   801  0FED                     	;# 
   802  0FEE                     	;# 
   803  0FEF                     	;# 
   804  0000                     	;# 
   805  0001                     	;# 
   806  0002                     	;# 
   807  0003                     	;# 
   808  0004                     	;# 
   809  0005                     	;# 
   810  0006                     	;# 
   811  0007                     	;# 
   812  0008                     	;# 
   813  0009                     	;# 
   814  000A                     	;# 
   815  000B                     	;# 
   816  000C                     	;# 
   817  000E                     	;# 
   818  0011                     	;# 
   819  0012                     	;# 
   820  0013                     	;# 
   821  0015                     	;# 
   822  0016                     	;# 
   823  0016                     	;# 
   824  0017                     	;# 
   825  0018                     	;# 
   826  0019                     	;# 
   827  001A                     	;# 
   828  001B                     	;# 
   829  001C                     	;# 
   830  008C                     	;# 
   831  008E                     	;# 
   832  0091                     	;# 
   833  0092                     	;# 
   834  0093                     	;# 
   835  0095                     	;# 
   836  0096                     	;# 
   837  0097                     	;# 
   838  0098                     	;# 
   839  0099                     	;# 
   840  009A                     	;# 
   841  009B                     	;# 
   842  009B                     	;# 
   843  009C                     	;# 
   844  009D                     	;# 
   845  009E                     	;# 
   846  009F                     	;# 
   847  010C                     	;# 
   848  010E                     	;# 
   849  0111                     	;# 
   850  0112                     	;# 
   851  0113                     	;# 
   852  0114                     	;# 
   853  0115                     	;# 
   854  0116                     	;# 
   855  0117                     	;# 
   856  0118                     	;# 
   857  0119                     	;# 
   858  011C                     	;# 
   859  018C                     	;# 
   860  018E                     	;# 
   861  0191                     	;# 
   862  0191                     	;# 
   863  0192                     	;# 
   864  0193                     	;# 
   865  0193                     	;# 
   866  0194                     	;# 
   867  0195                     	;# 
   868  0196                     	;# 
   869  0197                     	;# 
   870  0199                     	;# 
   871  0199                     	;# 
   872  0199                     	;# 
   873  019A                     	;# 
   874  019A                     	;# 
   875  019A                     	;# 
   876  019B                     	;# 
   877  019B                     	;# 
   878  019B                     	;# 
   879  019B                     	;# 
   880  019B                     	;# 
   881  019C                     	;# 
   882  019C                     	;# 
   883  019C                     	;# 
   884  019D                     	;# 
   885  019D                     	;# 
   886  019D                     	;# 
   887  019E                     	;# 
   888  019E                     	;# 
   889  019E                     	;# 
   890  019F                     	;# 
   891  019F                     	;# 
   892  019F                     	;# 
   893  019F                     	;# 
   894  019F                     	;# 
   895  020C                     	;# 
   896  020E                     	;# 
   897  0211                     	;# 
   898  0211                     	;# 
   899  0212                     	;# 
   900  0212                     	;# 
   901  0213                     	;# 
   902  0213                     	;# 
   903  0214                     	;# 
   904  0214                     	;# 
   905  0215                     	;# 
   906  0215                     	;# 
   907  0215                     	;# 
   908  0215                     	;# 
   909  0216                     	;# 
   910  0216                     	;# 
   911  0217                     	;# 
   912  0217                     	;# 
   913  028C                     	;# 
   914  028E                     	;# 
   915  0291                     	;# 
   916  0291                     	;# 
   917  0292                     	;# 
   918  0293                     	;# 
   919  0293                     	;# 
   920  0298                     	;# 
   921  0298                     	;# 
   922  0299                     	;# 
   923  029A                     	;# 
   924  029A                     	;# 
   925  029E                     	;# 
   926  030C                     	;# 
   927  030E                     	;# 
   928  038C                     	;# 
   929  038E                     	;# 
   930  0391                     	;# 
   931  0392                     	;# 
   932  0393                     	;# 
   933  0397                     	;# 
   934  0398                     	;# 
   935  0399                     	;# 
   936  0415                     	;# 
   937  0416                     	;# 
   938  0417                     	;# 
   939  041C                     	;# 
   940  041D                     	;# 
   941  041E                     	;# 
   942  0511                     	;# 
   943  0515                     	;# 
   944  0617                     	;# 
   945  0618                     	;# 
   946  0619                     	;# 
   947  0619                     	;# 
   948  061A                     	;# 
   949  061B                     	;# 
   950  061C                     	;# 
   951  061C                     	;# 
   952  0691                     	;# 
   953  0692                     	;# 
   954  0693                     	;# 
   955  0694                     	;# 
   956  0695                     	;# 
   957  0696                     	;# 
   958  0697                     	;# 
   959  0698                     	;# 
   960  0699                     	;# 
   961  069A                     	;# 
   962  069B                     	;# 
   963  069C                     	;# 
   964  069D                     	;# 
   965  069E                     	;# 
   966  069F                     	;# 
   967  0E0F                     	;# 
   968  0E10                     	;# 
   969  0E11                     	;# 
   970  0E12                     	;# 
   971  0E13                     	;# 
   972  0E14                     	;# 
   973  0E15                     	;# 
   974  0E17                     	;# 
   975  0E20                     	;# 
   976  0E21                     	;# 
   977  0E22                     	;# 
   978  0E24                     	;# 
   979  0E25                     	;# 
   980  0E28                     	;# 
   981  0E29                     	;# 
   982  0E2A                     	;# 
   983  0E2B                     	;# 
   984  0E90                     	;# 
   985  0E91                     	;# 
   986  0E92                     	;# 
   987  0E94                     	;# 
   988  0E95                     	;# 
   989  0EA0                     	;# 
   990  0EA1                     	;# 
   991  0EA2                     	;# 
   992  0EA3                     	;# 
   993  0EA4                     	;# 
   994  0EA5                     	;# 
   995  0F0F                     	;# 
   996  0F10                     	;# 
   997  0F11                     	;# 
   998  0F12                     	;# 
   999  0F13                     	;# 
  1000  0F14                     	;# 
  1001  0F15                     	;# 
  1002  0F16                     	;# 
  1003  0F17                     	;# 
  1004  0F18                     	;# 
  1005  0F19                     	;# 
  1006  0F1A                     	;# 
  1007  0F1B                     	;# 
  1008  0F1C                     	;# 
  1009  0F1D                     	;# 
  1010  0F1E                     	;# 
  1011  0F1F                     	;# 
  1012  0F20                     	;# 
  1013  0F21                     	;# 
  1014  0F22                     	;# 
  1015  0F23                     	;# 
  1016  0F24                     	;# 
  1017  0F25                     	;# 
  1018  0F26                     	;# 
  1019  0F27                     	;# 
  1020  0F28                     	;# 
  1021  0F29                     	;# 
  1022  0F2A                     	;# 
  1023  0F2B                     	;# 
  1024  0F2C                     	;# 
  1025  0F2D                     	;# 
  1026  0F9E                     	;# 
  1027  0FE4                     	;# 
  1028  0FE5                     	;# 
  1029  0FE6                     	;# 
  1030  0FE7                     	;# 
  1031  0FE8                     	;# 
  1032  0FE9                     	;# 
  1033  0FEA                     	;# 
  1034  0FEB                     	;# 
  1035  0FED                     	;# 
  1036  0FEE                     	;# 
  1037  0FEF                     	;# 
  1038  0000                     	;# 
  1039  0001                     	;# 
  1040  0002                     	;# 
  1041  0003                     	;# 
  1042  0004                     	;# 
  1043  0005                     	;# 
  1044  0006                     	;# 
  1045  0007                     	;# 
  1046  0008                     	;# 
  1047  0009                     	;# 
  1048  000A                     	;# 
  1049  000B                     	;# 
  1050  000C                     	;# 
  1051  000E                     	;# 
  1052  0011                     	;# 
  1053  0012                     	;# 
  1054  0013                     	;# 
  1055  0015                     	;# 
  1056  0016                     	;# 
  1057  0016                     	;# 
  1058  0017                     	;# 
  1059  0018                     	;# 
  1060  0019                     	;# 
  1061  001A                     	;# 
  1062  001B                     	;# 
  1063  001C                     	;# 
  1064  008C                     	;# 
  1065  008E                     	;# 
  1066  0091                     	;# 
  1067  0092                     	;# 
  1068  0093                     	;# 
  1069  0095                     	;# 
  1070  0096                     	;# 
  1071  0097                     	;# 
  1072  0098                     	;# 
  1073  0099                     	;# 
  1074  009A                     	;# 
  1075  009B                     	;# 
  1076  009B                     	;# 
  1077  009C                     	;# 
  1078  009D                     	;# 
  1079  009E                     	;# 
  1080  009F                     	;# 
  1081  010C                     	;# 
  1082  010E                     	;# 
  1083  0111                     	;# 
  1084  0112                     	;# 
  1085  0113                     	;# 
  1086  0114                     	;# 
  1087  0115                     	;# 
  1088  0116                     	;# 
  1089  0117                     	;# 
  1090  0118                     	;# 
  1091  0119                     	;# 
  1092  011C                     	;# 
  1093  018C                     	;# 
  1094  018E                     	;# 
  1095  0191                     	;# 
  1096  0191                     	;# 
  1097  0192                     	;# 
  1098  0193                     	;# 
  1099  0193                     	;# 
  1100  0194                     	;# 
  1101  0195                     	;# 
  1102  0196                     	;# 
  1103  0197                     	;# 
  1104  0199                     	;# 
  1105  0199                     	;# 
  1106  0199                     	;# 
  1107  019A                     	;# 
  1108  019A                     	;# 
  1109  019A                     	;# 
  1110  019B                     	;# 
  1111  019B                     	;# 
  1112  019B                     	;# 
  1113  019B                     	;# 
  1114  019B                     	;# 
  1115  019C                     	;# 
  1116  019C                     	;# 
  1117  019C                     	;# 
  1118  019D                     	;# 
  1119  019D                     	;# 
  1120  019D                     	;# 
  1121  019E                     	;# 
  1122  019E                     	;# 
  1123  019E                     	;# 
  1124  019F                     	;# 
  1125  019F                     	;# 
  1126  019F                     	;# 
  1127  019F                     	;# 
  1128  019F                     	;# 
  1129  020C                     	;# 
  1130  020E                     	;# 
  1131  0211                     	;# 
  1132  0211                     	;# 
  1133  0212                     	;# 
  1134  0212                     	;# 
  1135  0213                     	;# 
  1136  0213                     	;# 
  1137  0214                     	;# 
  1138  0214                     	;# 
  1139  0215                     	;# 
  1140  0215                     	;# 
  1141  0215                     	;# 
  1142  0215                     	;# 
  1143  0216                     	;# 
  1144  0216                     	;# 
  1145  0217                     	;# 
  1146  0217                     	;# 
  1147  028C                     	;# 
  1148  028E                     	;# 
  1149  0291                     	;# 
  1150  0291                     	;# 
  1151  0292                     	;# 
  1152  0293                     	;# 
  1153  0293                     	;# 
  1154  0298                     	;# 
  1155  0298                     	;# 
  1156  0299                     	;# 
  1157  029A                     	;# 
  1158  029A                     	;# 
  1159  029E                     	;# 
  1160  030C                     	;# 
  1161  030E                     	;# 
  1162  038C                     	;# 
  1163  038E                     	;# 
  1164  0391                     	;# 
  1165  0392                     	;# 
  1166  0393                     	;# 
  1167  0397                     	;# 
  1168  0398                     	;# 
  1169  0399                     	;# 
  1170  0415                     	;# 
  1171  0416                     	;# 
  1172  0417                     	;# 
  1173  041C                     	;# 
  1174  041D                     	;# 
  1175  041E                     	;# 
  1176  0511                     	;# 
  1177  0515                     	;# 
  1178  0617                     	;# 
  1179  0618                     	;# 
  1180  0619                     	;# 
  1181  0619                     	;# 
  1182  061A                     	;# 
  1183  061B                     	;# 
  1184  061C                     	;# 
  1185  061C                     	;# 
  1186  0691                     	;# 
  1187  0692                     	;# 
  1188  0693                     	;# 
  1189  0694                     	;# 
  1190  0695                     	;# 
  1191  0696                     	;# 
  1192  0697                     	;# 
  1193  0698                     	;# 
  1194  0699                     	;# 
  1195  069A                     	;# 
  1196  069B                     	;# 
  1197  069C                     	;# 
  1198  069D                     	;# 
  1199  069E                     	;# 
  1200  069F                     	;# 
  1201  0E0F                     	;# 
  1202  0E10                     	;# 
  1203  0E11                     	;# 
  1204  0E12                     	;# 
  1205  0E13                     	;# 
  1206  0E14                     	;# 
  1207  0E15                     	;# 
  1208  0E17                     	;# 
  1209  0E20                     	;# 
  1210  0E21                     	;# 
  1211  0E22                     	;# 
  1212  0E24                     	;# 
  1213  0E25                     	;# 
  1214  0E28                     	;# 
  1215  0E29                     	;# 
  1216  0E2A                     	;# 
  1217  0E2B                     	;# 
  1218  0E90                     	;# 
  1219  0E91                     	;# 
  1220  0E92                     	;# 
  1221  0E94                     	;# 
  1222  0E95                     	;# 
  1223  0EA0                     	;# 
  1224  0EA1                     	;# 
  1225  0EA2                     	;# 
  1226  0EA3                     	;# 
  1227  0EA4                     	;# 
  1228  0EA5                     	;# 
  1229  0F0F                     	;# 
  1230  0F10                     	;# 
  1231  0F11                     	;# 
  1232  0F12                     	;# 
  1233  0F13                     	;# 
  1234  0F14                     	;# 
  1235  0F15                     	;# 
  1236  0F16                     	;# 
  1237  0F17                     	;# 
  1238  0F18                     	;# 
  1239  0F19                     	;# 
  1240  0F1A                     	;# 
  1241  0F1B                     	;# 
  1242  0F1C                     	;# 
  1243  0F1D                     	;# 
  1244  0F1E                     	;# 
  1245  0F1F                     	;# 
  1246  0F20                     	;# 
  1247  0F21                     	;# 
  1248  0F22                     	;# 
  1249  0F23                     	;# 
  1250  0F24                     	;# 
  1251  0F25                     	;# 
  1252  0F26                     	;# 
  1253  0F27                     	;# 
  1254  0F28                     	;# 
  1255  0F29                     	;# 
  1256  0F2A                     	;# 
  1257  0F2B                     	;# 
  1258  0F2C                     	;# 
  1259  0F2D                     	;# 
  1260  0F9E                     	;# 
  1261  0FE4                     	;# 
  1262  0FE5                     	;# 
  1263  0FE6                     	;# 
  1264  0FE7                     	;# 
  1265  0FE8                     	;# 
  1266  0FE9                     	;# 
  1267  0FEA                     	;# 
  1268  0FEB                     	;# 
  1269  0FED                     	;# 
  1270  0FEE                     	;# 
  1271  0FEF                     	;# 
  1272  0000                     	;# 
  1273  0001                     	;# 
  1274  0002                     	;# 
  1275  0003                     	;# 
  1276  0004                     	;# 
  1277  0005                     	;# 
  1278  0006                     	;# 
  1279  0007                     	;# 
  1280  0008                     	;# 
  1281  0009                     	;# 
  1282  000A                     	;# 
  1283  000B                     	;# 
  1284  000C                     	;# 
  1285  000E                     	;# 
  1286  0011                     	;# 
  1287  0012                     	;# 
  1288  0013                     	;# 
  1289  0015                     	;# 
  1290  0016                     	;# 
  1291  0016                     	;# 
  1292  0017                     	;# 
  1293  0018                     	;# 
  1294  0019                     	;# 
  1295  001A                     	;# 
  1296  001B                     	;# 
  1297  001C                     	;# 
  1298  008C                     	;# 
  1299  008E                     	;# 
  1300  0091                     	;# 
  1301  0092                     	;# 
  1302  0093                     	;# 
  1303  0095                     	;# 
  1304  0096                     	;# 
  1305  0097                     	;# 
  1306  0098                     	;# 
  1307  0099                     	;# 
  1308  009A                     	;# 
  1309  009B                     	;# 
  1310  009B                     	;# 
  1311  009C                     	;# 
  1312  009D                     	;# 
  1313  009E                     	;# 
  1314  009F                     	;# 
  1315  010C                     	;# 
  1316  010E                     	;# 
  1317  0111                     	;# 
  1318  0112                     	;# 
  1319  0113                     	;# 
  1320  0114                     	;# 
  1321  0115                     	;# 
  1322  0116                     	;# 
  1323  0117                     	;# 
  1324  0118                     	;# 
  1325  0119                     	;# 
  1326  011C                     	;# 
  1327  018C                     	;# 
  1328  018E                     	;# 
  1329  0191                     	;# 
  1330  0191                     	;# 
  1331  0192                     	;# 
  1332  0193                     	;# 
  1333  0193                     	;# 
  1334  0194                     	;# 
  1335  0195                     	;# 
  1336  0196                     	;# 
  1337  0197                     	;# 
  1338  0199                     	;# 
  1339  0199                     	;# 
  1340  0199                     	;# 
  1341  019A                     	;# 
  1342  019A                     	;# 
  1343  019A                     	;# 
  1344  019B                     	;# 
  1345  019B                     	;# 
  1346  019B                     	;# 
  1347  019B                     	;# 
  1348  019B                     	;# 
  1349  019C                     	;# 
  1350  019C                     	;# 
  1351  019C                     	;# 
  1352  019D                     	;# 
  1353  019D                     	;# 
  1354  019D                     	;# 
  1355  019E                     	;# 
  1356  019E                     	;# 
  1357  019E                     	;# 
  1358  019F                     	;# 
  1359  019F                     	;# 
  1360  019F                     	;# 
  1361  019F                     	;# 
  1362  019F                     	;# 
  1363  020C                     	;# 
  1364  020E                     	;# 
  1365  0211                     	;# 
  1366  0211                     	;# 
  1367  0212                     	;# 
  1368  0212                     	;# 
  1369  0213                     	;# 
  1370  0213                     	;# 
  1371  0214                     	;# 
  1372  0214                     	;# 
  1373  0215                     	;# 
  1374  0215                     	;# 
  1375  0215                     	;# 
  1376  0215                     	;# 
  1377  0216                     	;# 
  1378  0216                     	;# 
  1379  0217                     	;# 
  1380  0217                     	;# 
  1381  028C                     	;# 
  1382  028E                     	;# 
  1383  0291                     	;# 
  1384  0291                     	;# 
  1385  0292                     	;# 
  1386  0293                     	;# 
  1387  0293                     	;# 
  1388  0298                     	;# 
  1389  0298                     	;# 
  1390  0299                     	;# 
  1391  029A                     	;# 
  1392  029A                     	;# 
  1393  029E                     	;# 
  1394  030C                     	;# 
  1395  030E                     	;# 
  1396  038C                     	;# 
  1397  038E                     	;# 
  1398  0391                     	;# 
  1399  0392                     	;# 
  1400  0393                     	;# 
  1401  0397                     	;# 
  1402  0398                     	;# 
  1403  0399                     	;# 
  1404  0415                     	;# 
  1405  0416                     	;# 
  1406  0417                     	;# 
  1407  041C                     	;# 
  1408  041D                     	;# 
  1409  041E                     	;# 
  1410  0511                     	;# 
  1411  0515                     	;# 
  1412  0617                     	;# 
  1413  0618                     	;# 
  1414  0619                     	;# 
  1415  0619                     	;# 
  1416  061A                     	;# 
  1417  061B                     	;# 
  1418  061C                     	;# 
  1419  061C                     	;# 
  1420  0691                     	;# 
  1421  0692                     	;# 
  1422  0693                     	;# 
  1423  0694                     	;# 
  1424  0695                     	;# 
  1425  0696                     	;# 
  1426  0697                     	;# 
  1427  0698                     	;# 
  1428  0699                     	;# 
  1429  069A                     	;# 
  1430  069B                     	;# 
  1431  069C                     	;# 
  1432  069D                     	;# 
  1433  069E                     	;# 
  1434  069F                     	;# 
  1435  0E0F                     	;# 
  1436  0E10                     	;# 
  1437  0E11                     	;# 
  1438  0E12                     	;# 
  1439  0E13                     	;# 
  1440  0E14                     	;# 
  1441  0E15                     	;# 
  1442  0E17                     	;# 
  1443  0E20                     	;# 
  1444  0E21                     	;# 
  1445  0E22                     	;# 
  1446  0E24                     	;# 
  1447  0E25                     	;# 
  1448  0E28                     	;# 
  1449  0E29                     	;# 
  1450  0E2A                     	;# 
  1451  0E2B                     	;# 
  1452  0E90                     	;# 
  1453  0E91                     	;# 
  1454  0E92                     	;# 
  1455  0E94                     	;# 
  1456  0E95                     	;# 
  1457  0EA0                     	;# 
  1458  0EA1                     	;# 
  1459  0EA2                     	;# 
  1460  0EA3                     	;# 
  1461  0EA4                     	;# 
  1462  0EA5                     	;# 
  1463  0F0F                     	;# 
  1464  0F10                     	;# 
  1465  0F11                     	;# 
  1466  0F12                     	;# 
  1467  0F13                     	;# 
  1468  0F14                     	;# 
  1469  0F15                     	;# 
  1470  0F16                     	;# 
  1471  0F17                     	;# 
  1472  0F18                     	;# 
  1473  0F19                     	;# 
  1474  0F1A                     	;# 
  1475  0F1B                     	;# 
  1476  0F1C                     	;# 
  1477  0F1D                     	;# 
  1478  0F1E                     	;# 
  1479  0F1F                     	;# 
  1480  0F20                     	;# 
  1481  0F21                     	;# 
  1482  0F22                     	;# 
  1483  0F23                     	;# 
  1484  0F24                     	;# 
  1485  0F25                     	;# 
  1486  0F26                     	;# 
  1487  0F27                     	;# 
  1488  0F28                     	;# 
  1489  0F29                     	;# 
  1490  0F2A                     	;# 
  1491  0F2B                     	;# 
  1492  0F2C                     	;# 
  1493  0F2D                     	;# 
  1494  0F9E                     	;# 
  1495  0FE4                     	;# 
  1496  0FE5                     	;# 
  1497  0FE6                     	;# 
  1498  0FE7                     	;# 
  1499  0FE8                     	;# 
  1500  0FE9                     	;# 
  1501  0FEA                     	;# 
  1502  0FEB                     	;# 
  1503  0FED                     	;# 
  1504  0FEE                     	;# 
  1505  0FEF                     	;# 
  1506  0000                     	;# 
  1507  0001                     	;# 
  1508  0002                     	;# 
  1509  0003                     	;# 
  1510  0004                     	;# 
  1511  0005                     	;# 
  1512  0006                     	;# 
  1513  0007                     	;# 
  1514  0008                     	;# 
  1515  0009                     	;# 
  1516  000A                     	;# 
  1517  000B                     	;# 
  1518  000C                     	;# 
  1519  000E                     	;# 
  1520  0011                     	;# 
  1521  0012                     	;# 
  1522  0013                     	;# 
  1523  0015                     	;# 
  1524  0016                     	;# 
  1525  0016                     	;# 
  1526  0017                     	;# 
  1527  0018                     	;# 
  1528  0019                     	;# 
  1529  001A                     	;# 
  1530  001B                     	;# 
  1531  001C                     	;# 
  1532  008C                     	;# 
  1533  008E                     	;# 
  1534  0091                     	;# 
  1535  0092                     	;# 
  1536  0093                     	;# 
  1537  0095                     	;# 
  1538  0096                     	;# 
  1539  0097                     	;# 
  1540  0098                     	;# 
  1541  0099                     	;# 
  1542  009A                     	;# 
  1543  009B                     	;# 
  1544  009B                     	;# 
  1545  009C                     	;# 
  1546  009D                     	;# 
  1547  009E                     	;# 
  1548  009F                     	;# 
  1549  010C                     	;# 
  1550  010E                     	;# 
  1551  0111                     	;# 
  1552  0112                     	;# 
  1553  0113                     	;# 
  1554  0114                     	;# 
  1555  0115                     	;# 
  1556  0116                     	;# 
  1557  0117                     	;# 
  1558  0118                     	;# 
  1559  0119                     	;# 
  1560  011C                     	;# 
  1561  018C                     	;# 
  1562  018E                     	;# 
  1563  0191                     	;# 
  1564  0191                     	;# 
  1565  0192                     	;# 
  1566  0193                     	;# 
  1567  0193                     	;# 
  1568  0194                     	;# 
  1569  0195                     	;# 
  1570  0196                     	;# 
  1571  0197                     	;# 
  1572  0199                     	;# 
  1573  0199                     	;# 
  1574  0199                     	;# 
  1575  019A                     	;# 
  1576  019A                     	;# 
  1577  019A                     	;# 
  1578  019B                     	;# 
  1579  019B                     	;# 
  1580  019B                     	;# 
  1581  019B                     	;# 
  1582  019B                     	;# 
  1583  019C                     	;# 
  1584  019C                     	;# 
  1585  019C                     	;# 
  1586  019D                     	;# 
  1587  019D                     	;# 
  1588  019D                     	;# 
  1589  019E                     	;# 
  1590  019E                     	;# 
  1591  019E                     	;# 
  1592  019F                     	;# 
  1593  019F                     	;# 
  1594  019F                     	;# 
  1595  019F                     	;# 
  1596  019F                     	;# 
  1597  020C                     	;# 
  1598  020E                     	;# 
  1599  0211                     	;# 
  1600  0211                     	;# 
  1601  0212                     	;# 
  1602  0212                     	;# 
  1603  0213                     	;# 
  1604  0213                     	;# 
  1605  0214                     	;# 
  1606  0214                     	;# 
  1607  0215                     	;# 
  1608  0215                     	;# 
  1609  0215                     	;# 
  1610  0215                     	;# 
  1611  0216                     	;# 
  1612  0216                     	;# 
  1613  0217                     	;# 
  1614  0217                     	;# 
  1615  028C                     	;# 
  1616  028E                     	;# 
  1617  0291                     	;# 
  1618  0291                     	;# 
  1619  0292                     	;# 
  1620  0293                     	;# 
  1621  0293                     	;# 
  1622  0298                     	;# 
  1623  0298                     	;# 
  1624  0299                     	;# 
  1625  029A                     	;# 
  1626  029A                     	;# 
  1627  029E                     	;# 
  1628  030C                     	;# 
  1629  030E                     	;# 
  1630  038C                     	;# 
  1631  038E                     	;# 
  1632  0391                     	;# 
  1633  0392                     	;# 
  1634  0393                     	;# 
  1635  0397                     	;# 
  1636  0398                     	;# 
  1637  0399                     	;# 
  1638  0415                     	;# 
  1639  0416                     	;# 
  1640  0417                     	;# 
  1641  041C                     	;# 
  1642  041D                     	;# 
  1643  041E                     	;# 
  1644  0511                     	;# 
  1645  0515                     	;# 
  1646  0617                     	;# 
  1647  0618                     	;# 
  1648  0619                     	;# 
  1649  0619                     	;# 
  1650  061A                     	;# 
  1651  061B                     	;# 
  1652  061C                     	;# 
  1653  061C                     	;# 
  1654  0691                     	;# 
  1655  0692                     	;# 
  1656  0693                     	;# 
  1657  0694                     	;# 
  1658  0695                     	;# 
  1659  0696                     	;# 
  1660  0697                     	;# 
  1661  0698                     	;# 
  1662  0699                     	;# 
  1663  069A                     	;# 
  1664  069B                     	;# 
  1665  069C                     	;# 
  1666  069D                     	;# 
  1667  069E                     	;# 
  1668  069F                     	;# 
  1669  0E0F                     	;# 
  1670  0E10                     	;# 
  1671  0E11                     	;# 
  1672  0E12                     	;# 
  1673  0E13                     	;# 
  1674  0E14                     	;# 
  1675  0E15                     	;# 
  1676  0E17                     	;# 
  1677  0E20                     	;# 
  1678  0E21                     	;# 
  1679  0E22                     	;# 
  1680  0E24                     	;# 
  1681  0E25                     	;# 
  1682  0E28                     	;# 
  1683  0E29                     	;# 
  1684  0E2A                     	;# 
  1685  0E2B                     	;# 
  1686  0E90                     	;# 
  1687  0E91                     	;# 
  1688  0E92                     	;# 
  1689  0E94                     	;# 
  1690  0E95                     	;# 
  1691  0EA0                     	;# 
  1692  0EA1                     	;# 
  1693  0EA2                     	;# 
  1694  0EA3                     	;# 
  1695  0EA4                     	;# 
  1696  0EA5                     	;# 
  1697  0F0F                     	;# 
  1698  0F10                     	;# 
  1699  0F11                     	;# 
  1700  0F12                     	;# 
  1701  0F13                     	;# 
  1702  0F14                     	;# 
  1703  0F15                     	;# 
  1704  0F16                     	;# 
  1705  0F17                     	;# 
  1706  0F18                     	;# 
  1707  0F19                     	;# 
  1708  0F1A                     	;# 
  1709  0F1B                     	;# 
  1710  0F1C                     	;# 
  1711  0F1D                     	;# 
  1712  0F1E                     	;# 
  1713  0F1F                     	;# 
  1714  0F20                     	;# 
  1715  0F21                     	;# 
  1716  0F22                     	;# 
  1717  0F23                     	;# 
  1718  0F24                     	;# 
  1719  0F25                     	;# 
  1720  0F26                     	;# 
  1721  0F27                     	;# 
  1722  0F28                     	;# 
  1723  0F29                     	;# 
  1724  0F2A                     	;# 
  1725  0F2B                     	;# 
  1726  0F2C                     	;# 
  1727  0F2D                     	;# 
  1728  0F9E                     	;# 
  1729  0FE4                     	;# 
  1730  0FE5                     	;# 
  1731  0FE6                     	;# 
  1732  0FE7                     	;# 
  1733  0FE8                     	;# 
  1734  0FE9                     	;# 
  1735  0FEA                     	;# 
  1736  0FEB                     	;# 
  1737  0FED                     	;# 
  1738  0FEE                     	;# 
  1739  0FEF                     	;# 
  1740  0000                     	;# 
  1741  0001                     	;# 
  1742  0002                     	;# 
  1743  0003                     	;# 
  1744  0004                     	;# 
  1745  0005                     	;# 
  1746  0006                     	;# 
  1747  0007                     	;# 
  1748  0008                     	;# 
  1749  0009                     	;# 
  1750  000A                     	;# 
  1751  000B                     	;# 
  1752  000C                     	;# 
  1753  000E                     	;# 
  1754  0011                     	;# 
  1755  0012                     	;# 
  1756  0013                     	;# 
  1757  0015                     	;# 
  1758  0016                     	;# 
  1759  0016                     	;# 
  1760  0017                     	;# 
  1761  0018                     	;# 
  1762  0019                     	;# 
  1763  001A                     	;# 
  1764  001B                     	;# 
  1765  001C                     	;# 
  1766  008C                     	;# 
  1767  008E                     	;# 
  1768  0091                     	;# 
  1769  0092                     	;# 
  1770  0093                     	;# 
  1771  0095                     	;# 
  1772  0096                     	;# 
  1773  0097                     	;# 
  1774  0098                     	;# 
  1775  0099                     	;# 
  1776  009A                     	;# 
  1777  009B                     	;# 
  1778  009B                     	;# 
  1779  009C                     	;# 
  1780  009D                     	;# 
  1781  009E                     	;# 
  1782  009F                     	;# 
  1783  010C                     	;# 
  1784  010E                     	;# 
  1785  0111                     	;# 
  1786  0112                     	;# 
  1787  0113                     	;# 
  1788  0114                     	;# 
  1789  0115                     	;# 
  1790  0116                     	;# 
  1791  0117                     	;# 
  1792  0118                     	;# 
  1793  0119                     	;# 
  1794  011C                     	;# 
  1795  018C                     	;# 
  1796  018E                     	;# 
  1797  0191                     	;# 
  1798  0191                     	;# 
  1799  0192                     	;# 
  1800  0193                     	;# 
  1801  0193                     	;# 
  1802  0194                     	;# 
  1803  0195                     	;# 
  1804  0196                     	;# 
  1805  0197                     	;# 
  1806  0199                     	;# 
  1807  0199                     	;# 
  1808  0199                     	;# 
  1809  019A                     	;# 
  1810  019A                     	;# 
  1811  019A                     	;# 
  1812  019B                     	;# 
  1813  019B                     	;# 
  1814  019B                     	;# 
  1815  019B                     	;# 
  1816  019B                     	;# 
  1817  019C                     	;# 
  1818  019C                     	;# 
  1819  019C                     	;# 
  1820  019D                     	;# 
  1821  019D                     	;# 
  1822  019D                     	;# 
  1823  019E                     	;# 
  1824  019E                     	;# 
  1825  019E                     	;# 
  1826  019F                     	;# 
  1827  019F                     	;# 
  1828  019F                     	;# 
  1829  019F                     	;# 
  1830  019F                     	;# 
  1831  020C                     	;# 
  1832  020E                     	;# 
  1833  0211                     	;# 
  1834  0211                     	;# 
  1835  0212                     	;# 
  1836  0212                     	;# 
  1837  0213                     	;# 
  1838  0213                     	;# 
  1839  0214                     	;# 
  1840  0214                     	;# 
  1841  0215                     	;# 
  1842  0215                     	;# 
  1843  0215                     	;# 
  1844  0215                     	;# 
  1845  0216                     	;# 
  1846  0216                     	;# 
  1847  0217                     	;# 
  1848  0217                     	;# 
  1849  028C                     	;# 
  1850  028E                     	;# 
  1851  0291                     	;# 
  1852  0291                     	;# 
  1853  0292                     	;# 
  1854  0293                     	;# 
  1855  0293                     	;# 
  1856  0298                     	;# 
  1857  0298                     	;# 
  1858  0299                     	;# 
  1859  029A                     	;# 
  1860  029A                     	;# 
  1861  029E                     	;# 
  1862  030C                     	;# 
  1863  030E                     	;# 
  1864  038C                     	;# 
  1865  038E                     	;# 
  1866  0391                     	;# 
  1867  0392                     	;# 
  1868  0393                     	;# 
  1869  0397                     	;# 
  1870  0398                     	;# 
  1871  0399                     	;# 
  1872  0415                     	;# 
  1873  0416                     	;# 
  1874  0417                     	;# 
  1875  041C                     	;# 
  1876  041D                     	;# 
  1877  041E                     	;# 
  1878  0511                     	;# 
  1879  0515                     	;# 
  1880  0617                     	;# 
  1881  0618                     	;# 
  1882  0619                     	;# 
  1883  0619                     	;# 
  1884  061A                     	;# 
  1885  061B                     	;# 
  1886  061C                     	;# 
  1887  061C                     	;# 
  1888  0691                     	;# 
  1889  0692                     	;# 
  1890  0693                     	;# 
  1891  0694                     	;# 
  1892  0695                     	;# 
  1893  0696                     	;# 
  1894  0697                     	;# 
  1895  0698                     	;# 
  1896  0699                     	;# 
  1897  069A                     	;# 
  1898  069B                     	;# 
  1899  069C                     	;# 
  1900  069D                     	;# 
  1901  069E                     	;# 
  1902  069F                     	;# 
  1903  0E0F                     	;# 
  1904  0E10                     	;# 
  1905  0E11                     	;# 
  1906  0E12                     	;# 
  1907  0E13                     	;# 
  1908  0E14                     	;# 
  1909  0E15                     	;# 
  1910  0E17                     	;# 
  1911  0E20                     	;# 
  1912  0E21                     	;# 
  1913  0E22                     	;# 
  1914  0E24                     	;# 
  1915  0E25                     	;# 
  1916  0E28                     	;# 
  1917  0E29                     	;# 
  1918  0E2A                     	;# 
  1919  0E2B                     	;# 
  1920  0E90                     	;# 
  1921  0E91                     	;# 
  1922  0E92                     	;# 
  1923  0E94                     	;# 
  1924  0E95                     	;# 
  1925  0EA0                     	;# 
  1926  0EA1                     	;# 
  1927  0EA2                     	;# 
  1928  0EA3                     	;# 
  1929  0EA4                     	;# 
  1930  0EA5                     	;# 
  1931  0F0F                     	;# 
  1932  0F10                     	;# 
  1933  0F11                     	;# 
  1934  0F12                     	;# 
  1935  0F13                     	;# 
  1936  0F14                     	;# 
  1937  0F15                     	;# 
  1938  0F16                     	;# 
  1939  0F17                     	;# 
  1940  0F18                     	;# 
  1941  0F19                     	;# 
  1942  0F1A                     	;# 
  1943  0F1B                     	;# 
  1944  0F1C                     	;# 
  1945  0F1D                     	;# 
  1946  0F1E                     	;# 
  1947  0F1F                     	;# 
  1948  0F20                     	;# 
  1949  0F21                     	;# 
  1950  0F22                     	;# 
  1951  0F23                     	;# 
  1952  0F24                     	;# 
  1953  0F25                     	;# 
  1954  0F26                     	;# 
  1955  0F27                     	;# 
  1956  0F28                     	;# 
  1957  0F29                     	;# 
  1958  0F2A                     	;# 
  1959  0F2B                     	;# 
  1960  0F2C                     	;# 
  1961  0F2D                     	;# 
  1962  0F9E                     	;# 
  1963  0FE4                     	;# 
  1964  0FE5                     	;# 
  1965  0FE6                     	;# 
  1966  0FE7                     	;# 
  1967  0FE8                     	;# 
  1968  0FE9                     	;# 
  1969  0FEA                     	;# 
  1970  0FEB                     	;# 
  1971  0FED                     	;# 
  1972  0FEE                     	;# 
  1973  0FEF                     	;# 
  1974  0000                     	;# 
  1975  0001                     	;# 
  1976  0002                     	;# 
  1977  0003                     	;# 
  1978  0004                     	;# 
  1979  0005                     	;# 
  1980  0006                     	;# 
  1981  0007                     	;# 
  1982  0008                     	;# 
  1983  0009                     	;# 
  1984  000A                     	;# 
  1985  000B                     	;# 
  1986  000C                     	;# 
  1987  000E                     	;# 
  1988  0011                     	;# 
  1989  0012                     	;# 
  1990  0013                     	;# 
  1991  0015                     	;# 
  1992  0016                     	;# 
  1993  0016                     	;# 
  1994  0017                     	;# 
  1995  0018                     	;# 
  1996  0019                     	;# 
  1997  001A                     	;# 
  1998  001B                     	;# 
  1999  001C                     	;# 
  2000  008C                     	;# 
  2001  008E                     	;# 
  2002  0091                     	;# 
  2003  0092                     	;# 
  2004  0093                     	;# 
  2005  0095                     	;# 
  2006  0096                     	;# 
  2007  0097                     	;# 
  2008  0098                     	;# 
  2009  0099                     	;# 
  2010  009A                     	;# 
  2011  009B                     	;# 
  2012  009B                     	;# 
  2013  009C                     	;# 
  2014  009D                     	;# 
  2015  009E                     	;# 
  2016  009F                     	;# 
  2017  010C                     	;# 
  2018  010E                     	;# 
  2019  0111                     	;# 
  2020  0112                     	;# 
  2021  0113                     	;# 
  2022  0114                     	;# 
  2023  0115                     	;# 
  2024  0116                     	;# 
  2025  0117                     	;# 
  2026  0118                     	;# 
  2027  0119                     	;# 
  2028  011C                     	;# 
  2029  018C                     	;# 
  2030  018E                     	;# 
  2031  0191                     	;# 
  2032  0191                     	;# 
  2033  0192                     	;# 
  2034  0193                     	;# 
  2035  0193                     	;# 
  2036  0194                     	;# 
  2037  0195                     	;# 
  2038  0196                     	;# 
  2039  0197                     	;# 
  2040  0199                     	;# 
  2041  0199                     	;# 
  2042  0199                     	;# 
  2043  019A                     	;# 
  2044  019A                     	;# 
  2045  019A                     	;# 
  2046  019B                     	;# 
  2047  019B                     	;# 
  2048  019B                     	;# 
  2049  019B                     	;# 
  2050  019B                     	;# 
  2051  019C                     	;# 
  2052  019C                     	;# 
  2053  019C                     	;# 
  2054  019D                     	;# 
  2055  019D                     	;# 
  2056  019D                     	;# 
  2057  019E                     	;# 
  2058  019E                     	;# 
  2059  019E                     	;# 
  2060  019F                     	;# 
  2061  019F                     	;# 
  2062  019F                     	;# 
  2063  019F                     	;# 
  2064  019F                     	;# 
  2065  020C                     	;# 
  2066  020E                     	;# 
  2067  0211                     	;# 
  2068  0211                     	;# 
  2069  0212                     	;# 
  2070  0212                     	;# 
  2071  0213                     	;# 
  2072  0213                     	;# 
  2073  0214                     	;# 
  2074  0214                     	;# 
  2075  0215                     	;# 
  2076  0215                     	;# 
  2077  0215                     	;# 
  2078  0215                     	;# 
  2079  0216                     	;# 
  2080  0216                     	;# 
  2081  0217                     	;# 
  2082  0217                     	;# 
  2083  028C                     	;# 
  2084  028E                     	;# 
  2085  0291                     	;# 
  2086  0291                     	;# 
  2087  0292                     	;# 
  2088  0293                     	;# 
  2089  0293                     	;# 
  2090  0298                     	;# 
  2091  0298                     	;# 
  2092  0299                     	;# 
  2093  029A                     	;# 
  2094  029A                     	;# 
  2095  029E                     	;# 
  2096  030C                     	;# 
  2097  030E                     	;# 
  2098  038C                     	;# 
  2099  038E                     	;# 
  2100  0391                     	;# 
  2101  0392                     	;# 
  2102  0393                     	;# 
  2103  0397                     	;# 
  2104  0398                     	;# 
  2105  0399                     	;# 
  2106  0415                     	;# 
  2107  0416                     	;# 
  2108  0417                     	;# 
  2109  041C                     	;# 
  2110  041D                     	;# 
  2111  041E                     	;# 
  2112  0511                     	;# 
  2113  0515                     	;# 
  2114  0617                     	;# 
  2115  0618                     	;# 
  2116  0619                     	;# 
  2117  0619                     	;# 
  2118  061A                     	;# 
  2119  061B                     	;# 
  2120  061C                     	;# 
  2121  061C                     	;# 
  2122  0691                     	;# 
  2123  0692                     	;# 
  2124  0693                     	;# 
  2125  0694                     	;# 
  2126  0695                     	;# 
  2127  0696                     	;# 
  2128  0697                     	;# 
  2129  0698                     	;# 
  2130  0699                     	;# 
  2131  069A                     	;# 
  2132  069B                     	;# 
  2133  069C                     	;# 
  2134  069D                     	;# 
  2135  069E                     	;# 
  2136  069F                     	;# 
  2137  0E0F                     	;# 
  2138  0E10                     	;# 
  2139  0E11                     	;# 
  2140  0E12                     	;# 
  2141  0E13                     	;# 
  2142  0E14                     	;# 
  2143  0E15                     	;# 
  2144  0E17                     	;# 
  2145  0E20                     	;# 
  2146  0E21                     	;# 
  2147  0E22                     	;# 
  2148  0E24                     	;# 
  2149  0E25                     	;# 
  2150  0E28                     	;# 
  2151  0E29                     	;# 
  2152  0E2A                     	;# 
  2153  0E2B                     	;# 
  2154  0E90                     	;# 
  2155  0E91                     	;# 
  2156  0E92                     	;# 
  2157  0E94                     	;# 
  2158  0E95                     	;# 
  2159  0EA0                     	;# 
  2160  0EA1                     	;# 
  2161  0EA2                     	;# 
  2162  0EA3                     	;# 
  2163  0EA4                     	;# 
  2164  0EA5                     	;# 
  2165  0F0F                     	;# 
  2166  0F10                     	;# 
  2167  0F11                     	;# 
  2168  0F12                     	;# 
  2169  0F13                     	;# 
  2170  0F14                     	;# 
  2171  0F15                     	;# 
  2172  0F16                     	;# 
  2173  0F17                     	;# 
  2174  0F18                     	;# 
  2175  0F19                     	;# 
  2176  0F1A                     	;# 
  2177  0F1B                     	;# 
  2178  0F1C                     	;# 
  2179  0F1D                     	;# 
  2180  0F1E                     	;# 
  2181  0F1F                     	;# 
  2182  0F20                     	;# 
  2183  0F21                     	;# 
  2184  0F22                     	;# 
  2185  0F23                     	;# 
  2186  0F24                     	;# 
  2187  0F25                     	;# 
  2188  0F26                     	;# 
  2189  0F27                     	;# 
  2190  0F28                     	;# 
  2191  0F29                     	;# 
  2192  0F2A                     	;# 
  2193  0F2B                     	;# 
  2194  0F2C                     	;# 
  2195  0F2D                     	;# 
  2196  0F9E                     	;# 
  2197  0FE4                     	;# 
  2198  0FE5                     	;# 
  2199  0FE6                     	;# 
  2200  0FE7                     	;# 
  2201  0FE8                     	;# 
  2202  0FE9                     	;# 
  2203  0FEA                     	;# 
  2204  0FEB                     	;# 
  2205  0FED                     	;# 
  2206  0FEE                     	;# 
  2207  0FEF                     	;# 
  2208  0000                     	;# 
  2209  0001                     	;# 
  2210  0002                     	;# 
  2211  0003                     	;# 
  2212  0004                     	;# 
  2213  0005                     	;# 
  2214  0006                     	;# 
  2215  0007                     	;# 
  2216  0008                     	;# 
  2217  0009                     	;# 
  2218  000A                     	;# 
  2219  000B                     	;# 
  2220  000C                     	;# 
  2221  000E                     	;# 
  2222  0011                     	;# 
  2223  0012                     	;# 
  2224  0013                     	;# 
  2225  0015                     	;# 
  2226  0016                     	;# 
  2227  0016                     	;# 
  2228  0017                     	;# 
  2229  0018                     	;# 
  2230  0019                     	;# 
  2231  001A                     	;# 
  2232  001B                     	;# 
  2233  001C                     	;# 
  2234  008C                     	;# 
  2235  008E                     	;# 
  2236  0091                     	;# 
  2237  0092                     	;# 
  2238  0093                     	;# 
  2239  0095                     	;# 
  2240  0096                     	;# 
  2241  0097                     	;# 
  2242  0098                     	;# 
  2243  0099                     	;# 
  2244  009A                     	;# 
  2245  009B                     	;# 
  2246  009B                     	;# 
  2247  009C                     	;# 
  2248  009D                     	;# 
  2249  009E                     	;# 
  2250  009F                     	;# 
  2251  010C                     	;# 
  2252  010E                     	;# 
  2253  0111                     	;# 
  2254  0112                     	;# 
  2255  0113                     	;# 
  2256  0114                     	;# 
  2257  0115                     	;# 
  2258  0116                     	;# 
  2259  0117                     	;# 
  2260  0118                     	;# 
  2261  0119                     	;# 
  2262  011C                     	;# 
  2263  018C                     	;# 
  2264  018E                     	;# 
  2265  0191                     	;# 
  2266  0191                     	;# 
  2267  0192                     	;# 
  2268  0193                     	;# 
  2269  0193                     	;# 
  2270  0194                     	;# 
  2271  0195                     	;# 
  2272  0196                     	;# 
  2273  0197                     	;# 
  2274  0199                     	;# 
  2275  0199                     	;# 
  2276  0199                     	;# 
  2277  019A                     	;# 
  2278  019A                     	;# 
  2279  019A                     	;# 
  2280  019B                     	;# 
  2281  019B                     	;# 
  2282  019B                     	;# 
  2283  019B                     	;# 
  2284  019B                     	;# 
  2285  019C                     	;# 
  2286  019C                     	;# 
  2287  019C                     	;# 
  2288  019D                     	;# 
  2289  019D                     	;# 
  2290  019D                     	;# 
  2291  019E                     	;# 
  2292  019E                     	;# 
  2293  019E                     	;# 
  2294  019F                     	;# 
  2295  019F                     	;# 
  2296  019F                     	;# 
  2297  019F                     	;# 
  2298  019F                     	;# 
  2299  020C                     	;# 
  2300  020E                     	;# 
  2301  0211                     	;# 
  2302  0211                     	;# 
  2303  0212                     	;# 
  2304  0212                     	;# 
  2305  0213                     	;# 
  2306  0213                     	;# 
  2307  0214                     	;# 
  2308  0214                     	;# 
  2309  0215                     	;# 
  2310  0215                     	;# 
  2311  0215                     	;# 
  2312  0215                     	;# 
  2313  0216                     	;# 
  2314  0216                     	;# 
  2315  0217                     	;# 
  2316  0217                     	;# 
  2317  028C                     	;# 
  2318  028E                     	;# 
  2319  0291                     	;# 
  2320  0291                     	;# 
  2321  0292                     	;# 
  2322  0293                     	;# 
  2323  0293                     	;# 
  2324  0298                     	;# 
  2325  0298                     	;# 
  2326  0299                     	;# 
  2327  029A                     	;# 
  2328  029A                     	;# 
  2329  029E                     	;# 
  2330  030C                     	;# 
  2331  030E                     	;# 
  2332  038C                     	;# 
  2333  038E                     	;# 
  2334  0391                     	;# 
  2335  0392                     	;# 
  2336  0393                     	;# 
  2337  0397                     	;# 
  2338  0398                     	;# 
  2339  0399                     	;# 
  2340  0415                     	;# 
  2341  0416                     	;# 
  2342  0417                     	;# 
  2343  041C                     	;# 
  2344  041D                     	;# 
  2345  041E                     	;# 
  2346  0511                     	;# 
  2347  0515                     	;# 
  2348  0617                     	;# 
  2349  0618                     	;# 
  2350  0619                     	;# 
  2351  0619                     	;# 
  2352  061A                     	;# 
  2353  061B                     	;# 
  2354  061C                     	;# 
  2355  061C                     	;# 
  2356  0691                     	;# 
  2357  0692                     	;# 
  2358  0693                     	;# 
  2359  0694                     	;# 
  2360  0695                     	;# 
  2361  0696                     	;# 
  2362  0697                     	;# 
  2363  0698                     	;# 
  2364  0699                     	;# 
  2365  069A                     	;# 
  2366  069B                     	;# 
  2367  069C                     	;# 
  2368  069D                     	;# 
  2369  069E                     	;# 
  2370  069F                     	;# 
  2371  0E0F                     	;# 
  2372  0E10                     	;# 
  2373  0E11                     	;# 
  2374  0E12                     	;# 
  2375  0E13                     	;# 
  2376  0E14                     	;# 
  2377  0E15                     	;# 
  2378  0E17                     	;# 
  2379  0E20                     	;# 
  2380  0E21                     	;# 
  2381  0E22                     	;# 
  2382  0E24                     	;# 
  2383  0E25                     	;# 
  2384  0E28                     	;# 
  2385  0E29                     	;# 
  2386  0E2A                     	;# 
  2387  0E2B                     	;# 
  2388  0E90                     	;# 
  2389  0E91                     	;# 
  2390  0E92                     	;# 
  2391  0E94                     	;# 
  2392  0E95                     	;# 
  2393  0EA0                     	;# 
  2394  0EA1                     	;# 
  2395  0EA2                     	;# 
  2396  0EA3                     	;# 
  2397  0EA4                     	;# 
  2398  0EA5                     	;# 
  2399  0F0F                     	;# 
  2400  0F10                     	;# 
  2401  0F11                     	;# 
  2402  0F12                     	;# 
  2403  0F13                     	;# 
  2404  0F14                     	;# 
  2405  0F15                     	;# 
  2406  0F16                     	;# 
  2407  0F17                     	;# 
  2408  0F18                     	;# 
  2409  0F19                     	;# 
  2410  0F1A                     	;# 
  2411  0F1B                     	;# 
  2412  0F1C                     	;# 
  2413  0F1D                     	;# 
  2414  0F1E                     	;# 
  2415  0F1F                     	;# 
  2416  0F20                     	;# 
  2417  0F21                     	;# 
  2418  0F22                     	;# 
  2419  0F23                     	;# 
  2420  0F24                     	;# 
  2421  0F25                     	;# 
  2422  0F26                     	;# 
  2423  0F27                     	;# 
  2424  0F28                     	;# 
  2425  0F29                     	;# 
  2426  0F2A                     	;# 
  2427  0F2B                     	;# 
  2428  0F2C                     	;# 
  2429  0F2D                     	;# 
  2430  0F9E                     	;# 
  2431  0FE4                     	;# 
  2432  0FE5                     	;# 
  2433  0FE6                     	;# 
  2434  0FE7                     	;# 
  2435  0FE8                     	;# 
  2436  0FE9                     	;# 
  2437  0FEA                     	;# 
  2438  0FEB                     	;# 
  2439  0FED                     	;# 
  2440  0FEE                     	;# 
  2441  0FEF                     	;# 
  2442  0000                     	;# 
  2443  0001                     	;# 
  2444  0002                     	;# 
  2445  0003                     	;# 
  2446  0004                     	;# 
  2447  0005                     	;# 
  2448  0006                     	;# 
  2449  0007                     	;# 
  2450  0008                     	;# 
  2451  0009                     	;# 
  2452  000A                     	;# 
  2453  000B                     	;# 
  2454  000C                     	;# 
  2455  000E                     	;# 
  2456  0011                     	;# 
  2457  0012                     	;# 
  2458  0013                     	;# 
  2459  0015                     	;# 
  2460  0016                     	;# 
  2461  0016                     	;# 
  2462  0017                     	;# 
  2463  0018                     	;# 
  2464  0019                     	;# 
  2465  001A                     	;# 
  2466  001B                     	;# 
  2467  001C                     	;# 
  2468  008C                     	;# 
  2469  008E                     	;# 
  2470  0091                     	;# 
  2471  0092                     	;# 
  2472  0093                     	;# 
  2473  0095                     	;# 
  2474  0096                     	;# 
  2475  0097                     	;# 
  2476  0098                     	;# 
  2477  0099                     	;# 
  2478  009A                     	;# 
  2479  009B                     	;# 
  2480  009B                     	;# 
  2481  009C                     	;# 
  2482  009D                     	;# 
  2483  009E                     	;# 
  2484  009F                     	;# 
  2485  010C                     	;# 
  2486  010E                     	;# 
  2487  0111                     	;# 
  2488  0112                     	;# 
  2489  0113                     	;# 
  2490  0114                     	;# 
  2491  0115                     	;# 
  2492  0116                     	;# 
  2493  0117                     	;# 
  2494  0118                     	;# 
  2495  0119                     	;# 
  2496  011C                     	;# 
  2497  018C                     	;# 
  2498  018E                     	;# 
  2499  0191                     	;# 
  2500  0191                     	;# 
  2501  0192                     	;# 
  2502  0193                     	;# 
  2503  0193                     	;# 
  2504  0194                     	;# 
  2505  0195                     	;# 
  2506  0196                     	;# 
  2507  0197                     	;# 
  2508  0199                     	;# 
  2509  0199                     	;# 
  2510  0199                     	;# 
  2511  019A                     	;# 
  2512  019A                     	;# 
  2513  019A                     	;# 
  2514  019B                     	;# 
  2515  019B                     	;# 
  2516  019B                     	;# 
  2517  019B                     	;# 
  2518  019B                     	;# 
  2519  019C                     	;# 
  2520  019C                     	;# 
  2521  019C                     	;# 
  2522  019D                     	;# 
  2523  019D                     	;# 
  2524  019D                     	;# 
  2525  019E                     	;# 
  2526  019E                     	;# 
  2527  019E                     	;# 
  2528  019F                     	;# 
  2529  019F                     	;# 
  2530  019F                     	;# 
  2531  019F                     	;# 
  2532  019F                     	;# 
  2533  020C                     	;# 
  2534  020E                     	;# 
  2535  0211                     	;# 
  2536  0211                     	;# 
  2537  0212                     	;# 
  2538  0212                     	;# 
  2539  0213                     	;# 
  2540  0213                     	;# 
  2541  0214                     	;# 
  2542  0214                     	;# 
  2543  0215                     	;# 
  2544  0215                     	;# 
  2545  0215                     	;# 
  2546  0215                     	;# 
  2547  0216                     	;# 
  2548  0216                     	;# 
  2549  0217                     	;# 
  2550  0217                     	;# 
  2551  028C                     	;# 
  2552  028E                     	;# 
  2553  0291                     	;# 
  2554  0291                     	;# 
  2555  0292                     	;# 
  2556  0293                     	;# 
  2557  0293                     	;# 
  2558  0298                     	;# 
  2559  0298                     	;# 
  2560  0299                     	;# 
  2561  029A                     	;# 
  2562  029A                     	;# 
  2563  029E                     	;# 
  2564  030C                     	;# 
  2565  030E                     	;# 
  2566  038C                     	;# 
  2567  038E                     	;# 
  2568  0391                     	;# 
  2569  0392                     	;# 
  2570  0393                     	;# 
  2571  0397                     	;# 
  2572  0398                     	;# 
  2573  0399                     	;# 
  2574  0415                     	;# 
  2575  0416                     	;# 
  2576  0417                     	;# 
  2577  041C                     	;# 
  2578  041D                     	;# 
  2579  041E                     	;# 
  2580  0511                     	;# 
  2581  0515                     	;# 
  2582  0617                     	;# 
  2583  0618                     	;# 
  2584  0619                     	;# 
  2585  0619                     	;# 
  2586  061A                     	;# 
  2587  061B                     	;# 
  2588  061C                     	;# 
  2589  061C                     	;# 
  2590  0691                     	;# 
  2591  0692                     	;# 
  2592  0693                     	;# 
  2593  0694                     	;# 
  2594  0695                     	;# 
  2595  0696                     	;# 
  2596  0697                     	;# 
  2597  0698                     	;# 
  2598  0699                     	;# 
  2599  069A                     	;# 
  2600  069B                     	;# 
  2601  069C                     	;# 
  2602  069D                     	;# 
  2603  069E                     	;# 
  2604  069F                     	;# 
  2605  0E0F                     	;# 
  2606  0E10                     	;# 
  2607  0E11                     	;# 
  2608  0E12                     	;# 
  2609  0E13                     	;# 
  2610  0E14                     	;# 
  2611  0E15                     	;# 
  2612  0E17                     	;# 
  2613  0E20                     	;# 
  2614  0E21                     	;# 
  2615  0E22                     	;# 
  2616  0E24                     	;# 
  2617  0E25                     	;# 
  2618  0E28                     	;# 
  2619  0E29                     	;# 
  2620  0E2A                     	;# 
  2621  0E2B                     	;# 
  2622  0E90                     	;# 
  2623  0E91                     	;# 
  2624  0E92                     	;# 
  2625  0E94                     	;# 
  2626  0E95                     	;# 
  2627  0EA0                     	;# 
  2628  0EA1                     	;# 
  2629  0EA2                     	;# 
  2630  0EA3                     	;# 
  2631  0EA4                     	;# 
  2632  0EA5                     	;# 
  2633  0F0F                     	;# 
  2634  0F10                     	;# 
  2635  0F11                     	;# 
  2636  0F12                     	;# 
  2637  0F13                     	;# 
  2638  0F14                     	;# 
  2639  0F15                     	;# 
  2640  0F16                     	;# 
  2641  0F17                     	;# 
  2642  0F18                     	;# 
  2643  0F19                     	;# 
  2644  0F1A                     	;# 
  2645  0F1B                     	;# 
  2646  0F1C                     	;# 
  2647  0F1D                     	;# 
  2648  0F1E                     	;# 
  2649  0F1F                     	;# 
  2650  0F20                     	;# 
  2651  0F21                     	;# 
  2652  0F22                     	;# 
  2653  0F23                     	;# 
  2654  0F24                     	;# 
  2655  0F25                     	;# 
  2656  0F26                     	;# 
  2657  0F27                     	;# 
  2658  0F28                     	;# 
  2659  0F29                     	;# 
  2660  0F2A                     	;# 
  2661  0F2B                     	;# 
  2662  0F2C                     	;# 
  2663  0F2D                     	;# 
  2664  0F9E                     	;# 
  2665  0FE4                     	;# 
  2666  0FE5                     	;# 
  2667  0FE6                     	;# 
  2668  0FE7                     	;# 
  2669  0FE8                     	;# 
  2670  0FE9                     	;# 
  2671  0FEA                     	;# 
  2672  0FEB                     	;# 
  2673  0FED                     	;# 
  2674  0FEE                     	;# 
  2675  0FEF                     	;# 
  2676                           
  2677                           	psect	idataBANK1
  2678  1830                     __pidataBANK1:	
  2679                           
  2680                           ;initializer for _MEM
  2681  1830  3400               	retlw	0
  2682  1831  3400               	retlw	0
  2683  1832  3480               	retlw	128
  2684  1833  3425               	retlw	37
  2685                           
  2686                           	psect	idataBANK4
  2687  182C                     __pidataBANK4:	
  2688                           
  2689                           ;initializer for _BAUD
  2690  182C  3480               	retlw	128
  2691  182D  3425               	retlw	37
  2692  182E  3400               	retlw	0
  2693  182F  3400               	retlw	0
  2694                           
  2695                           	psect	stringtext
  2696  0700                     __pstringtext:	
  2697  0700                     _ScanCodeFunctionNoE0:	
  2698  0700  3400               	retlw	0
  2699  0701  3411               	retlw	17
  2700  0702  3400               	retlw	0
  2701  0703  340C               	retlw	12
  2702  0704  340A               	retlw	10
  2703  0705  3406               	retlw	6
  2704  0706  3407               	retlw	7
  2705  0707  3414               	retlw	20
  2706  0708  3400               	retlw	0
  2707  0709  3412               	retlw	18
  2708  070A  3410               	retlw	16
  2709  070B  340E               	retlw	14
  2710  070C  340B               	retlw	11
  2711  070D  3400               	retlw	0
  2712  070E  3400               	retlw	0
  2713  070F  3400               	retlw	0
  2714  0710  3400               	retlw	0
  2715  0711  341C               	retlw	28
  2716  0712  3400               	retlw	0
  2717  0713  3400               	retlw	0
  2718  0714  341A               	retlw	26
  2719  0715  3400               	retlw	0
  2720  0716  3400               	retlw	0
  2721  0717  3400               	retlw	0
  2722  0718  3400               	retlw	0
  2723  0719  3400               	retlw	0
  2724  071A  3400               	retlw	0
  2725  071B  3400               	retlw	0
  2726  071C  3400               	retlw	0
  2727  071D  3400               	retlw	0
  2728  071E  3400               	retlw	0
  2729  071F  3400               	retlw	0
  2730  0720  3400               	retlw	0
  2731  0721  3400               	retlw	0
  2732  0722  3400               	retlw	0
  2733  0723  3400               	retlw	0
  2734  0724  3400               	retlw	0
  2735  0725  3400               	retlw	0
  2736  0726  3400               	retlw	0
  2737  0727  3400               	retlw	0
  2738  0728  3400               	retlw	0
  2739  0729  3400               	retlw	0
  2740  072A  3400               	retlw	0
  2741  072B  3400               	retlw	0
  2742  072C  3400               	retlw	0
  2743  072D  3400               	retlw	0
  2744  072E  3400               	retlw	0
  2745  072F  3400               	retlw	0
  2746  0730  3400               	retlw	0
  2747  0731  3400               	retlw	0
  2748  0732  3400               	retlw	0
  2749  0733  3400               	retlw	0
  2750  0734  3400               	retlw	0
  2751  0735  3400               	retlw	0
  2752  0736  3400               	retlw	0
  2753  0737  3400               	retlw	0
  2754  0738  3400               	retlw	0
  2755  0739  3400               	retlw	0
  2756  073A  3400               	retlw	0
  2757  073B  3400               	retlw	0
  2758  073C  3400               	retlw	0
  2759  073D  3400               	retlw	0
  2760  073E  3400               	retlw	0
  2761  073F  3400               	retlw	0
  2762  0740  3400               	retlw	0
  2763  0741  3400               	retlw	0
  2764  0742  3400               	retlw	0
  2765  0743  3400               	retlw	0
  2766  0744  3400               	retlw	0
  2767  0745  3400               	retlw	0
  2768  0746  3400               	retlw	0
  2769  0747  3400               	retlw	0
  2770  0748  3400               	retlw	0
  2771  0749  3400               	retlw	0
  2772  074A  3400               	retlw	0
  2773  074B  3400               	retlw	0
  2774  074C  3400               	retlw	0
  2775  074D  3400               	retlw	0
  2776  074E  3400               	retlw	0
  2777  074F  3400               	retlw	0
  2778  0750  3400               	retlw	0
  2779  0751  3400               	retlw	0
  2780  0752  3400               	retlw	0
  2781  0753  3400               	retlw	0
  2782  0754  3400               	retlw	0
  2783  0755  3400               	retlw	0
  2784  0756  3400               	retlw	0
  2785  0757  3400               	retlw	0
  2786  0758  3400               	retlw	0
  2787  0759  3400               	retlw	0
  2788  075A  3400               	retlw	0
  2789  075B  3400               	retlw	0
  2790  075C  3400               	retlw	0
  2791  075D  3400               	retlw	0
  2792  075E  3400               	retlw	0
  2793  075F  3400               	retlw	0
  2794  0760  3400               	retlw	0
  2795  0761  3400               	retlw	0
  2796  0762  3400               	retlw	0
  2797  0763  3400               	retlw	0
  2798  0764  3400               	retlw	0
  2799  0765  3400               	retlw	0
  2800  0766  3400               	retlw	0
  2801  0767  3400               	retlw	0
  2802  0768  3400               	retlw	0
  2803  0769  3400               	retlw	0
  2804  076A  3400               	retlw	0
  2805  076B  3400               	retlw	0
  2806  076C  3400               	retlw	0
  2807  076D  3400               	retlw	0
  2808  076E  3400               	retlw	0
  2809  076F  3400               	retlw	0
  2810  0770  3400               	retlw	0
  2811  0771  3400               	retlw	0
  2812  0772  3400               	retlw	0
  2813  0773  3400               	retlw	0
  2814  0774  3400               	retlw	0
  2815  0775  3400               	retlw	0
  2816  0776  3400               	retlw	0
  2817  0777  3400               	retlw	0
  2818  0778  3413               	retlw	19
  2819  0779  3400               	retlw	0
  2820  077A  3400               	retlw	0
  2821  077B  3400               	retlw	0
  2822  077C  3400               	retlw	0
  2823  077D  3400               	retlw	0
  2824  077E  3400               	retlw	0
  2825  077F  3400               	retlw	0
  2826  0780  3400               	retlw	0
  2827  0781  3400               	retlw	0
  2828  0782  3400               	retlw	0
  2829  0783  340F               	retlw	15
  2830  0784                     __end_of_ScanCodeFunctionNoE0:	
  2831  0784                     _ScanCode:	
  2832  0784  3409               	retlw	9
  2833  0785  3460               	retlw	96
  2834  0786  3400               	retlw	0
  2835  0787  3400               	retlw	0
  2836  0788  3400               	retlw	0
  2837  0789  3400               	retlw	0
  2838  078A  3400               	retlw	0
  2839  078B  3400               	retlw	0
  2840  078C  3471               	retlw	113
  2841  078D  3431               	retlw	49
  2842  078E  3400               	retlw	0
  2843  078F  3400               	retlw	0
  2844  0790  3400               	retlw	0
  2845  0791  347A               	retlw	122
  2846  0792  3473               	retlw	115
  2847  0793  3461               	retlw	97
  2848  0794  3477               	retlw	119
  2849  0795  3432               	retlw	50
  2850  0796  3400               	retlw	0
  2851  0797  3400               	retlw	0
  2852  0798  3463               	retlw	99
  2853  0799  3478               	retlw	120
  2854  079A  3464               	retlw	100
  2855  079B  3465               	retlw	101
  2856  079C  3434               	retlw	52
  2857  079D  3433               	retlw	51
  2858  079E  3400               	retlw	0
  2859  079F  3400               	retlw	0
  2860  07A0  3420               	retlw	32
  2861  07A1  3476               	retlw	118
  2862  07A2  3466               	retlw	102
  2863  07A3  3474               	retlw	116
  2864  07A4  3472               	retlw	114
  2865  07A5  3435               	retlw	53
  2866  07A6  3400               	retlw	0
  2867  07A7  3400               	retlw	0
  2868  07A8  346E               	retlw	110
  2869  07A9  3462               	retlw	98
  2870  07AA  3468               	retlw	104
  2871  07AB  3467               	retlw	103
  2872  07AC  3479               	retlw	121
  2873  07AD  3436               	retlw	54
  2874  07AE  3400               	retlw	0
  2875  07AF  3400               	retlw	0
  2876  07B0  3400               	retlw	0
  2877  07B1  346D               	retlw	109
  2878  07B2  346A               	retlw	106
  2879  07B3  3475               	retlw	117
  2880  07B4  3437               	retlw	55
  2881  07B5  3438               	retlw	56
  2882  07B6  3400               	retlw	0
  2883  07B7  3400               	retlw	0
  2884  07B8  342C               	retlw	44
  2885  07B9  346B               	retlw	107
  2886  07BA  3469               	retlw	105
  2887  07BB  346F               	retlw	111
  2888  07BC  3430               	retlw	48
  2889  07BD  3439               	retlw	57
  2890  07BE  3400               	retlw	0
  2891  07BF  3400               	retlw	0
  2892  07C0  342E               	retlw	46
  2893  07C1  342F               	retlw	47
  2894  07C2  346C               	retlw	108
  2895  07C3  343B               	retlw	59
  2896  07C4  3470               	retlw	112
  2897  07C5  342D               	retlw	45
  2898  07C6  3400               	retlw	0
  2899  07C7  3400               	retlw	0
  2900  07C8  3400               	retlw	0
  2901  07C9  3427               	retlw	39
  2902  07CA  3400               	retlw	0
  2903  07CB  345B               	retlw	91
  2904  07CC  343D               	retlw	61
  2905  07CD  3400               	retlw	0
  2906  07CE  3400               	retlw	0
  2907  07CF  3400               	retlw	0
  2908  07D0  3400               	retlw	0
  2909  07D1  340D               	retlw	13
  2910  07D2  345D               	retlw	93
  2911  07D3  3400               	retlw	0
  2912  07D4  345C               	retlw	92
  2913  07D5  3400               	retlw	0
  2914  07D6  3400               	retlw	0
  2915  07D7  3400               	retlw	0
  2916  07D8  3400               	retlw	0
  2917  07D9  3400               	retlw	0
  2918  07DA  3400               	retlw	0
  2919  07DB  3400               	retlw	0
  2920  07DC  3400               	retlw	0
  2921  07DD  3408               	retlw	8
  2922  07DE  3400               	retlw	0
  2923  07DF  3400               	retlw	0
  2924  07E0  3431               	retlw	49
  2925  07E1  3400               	retlw	0
  2926  07E2  3434               	retlw	52
  2927  07E3  3437               	retlw	55
  2928  07E4  3400               	retlw	0
  2929  07E5  3400               	retlw	0
  2930  07E6  3400               	retlw	0
  2931  07E7  3430               	retlw	48
  2932  07E8  342E               	retlw	46
  2933  07E9  3432               	retlw	50
  2934  07EA  3435               	retlw	53
  2935  07EB  3436               	retlw	54
  2936  07EC  3438               	retlw	56
  2937  07ED  341B               	retlw	27
  2938  07EE  3400               	retlw	0
  2939  07EF  3400               	retlw	0
  2940  07F0  342B               	retlw	43
  2941  07F1  3433               	retlw	51
  2942  07F2  342D               	retlw	45
  2943  07F3  342A               	retlw	42
  2944  07F4  3439               	retlw	57
  2945  07F5                     __end_of_ScanCode:	
  2946  07F5                     _ScanCodeSHIFT:	
  2947  07F5  3409               	retlw	9
  2948  07F6  347E               	retlw	126
  2949  07F7  3400               	retlw	0
  2950  07F8  3400               	retlw	0
  2951  07F9  3400               	retlw	0
  2952  07FA  3400               	retlw	0
  2953  07FB  3400               	retlw	0
  2954  07FC  3400               	retlw	0
  2955  07FD  3451               	retlw	81
  2956  07FE  3421               	retlw	33
  2957  07FF  3400               	retlw	0
  2958  0800  3400               	retlw	0
  2959  0801  3400               	retlw	0
  2960  0802  345A               	retlw	90
  2961  0803  3453               	retlw	83
  2962  0804  3441               	retlw	65
  2963  0805  3457               	retlw	87
  2964  0806  3440               	retlw	64
  2965  0807  3400               	retlw	0
  2966  0808  3400               	retlw	0
  2967  0809  3443               	retlw	67
  2968  080A  3458               	retlw	88
  2969  080B  3444               	retlw	68
  2970  080C  3445               	retlw	69
  2971  080D  3424               	retlw	36
  2972  080E  3423               	retlw	35
  2973  080F  3400               	retlw	0
  2974  0810  3400               	retlw	0
  2975  0811  3420               	retlw	32
  2976  0812  3456               	retlw	86
  2977  0813  3446               	retlw	70
  2978  0814  3454               	retlw	84
  2979  0815  3452               	retlw	82
  2980  0816  3425               	retlw	37
  2981  0817  3400               	retlw	0
  2982  0818  3400               	retlw	0
  2983  0819  344E               	retlw	78
  2984  081A  3442               	retlw	66
  2985  081B  3448               	retlw	72
  2986  081C  3447               	retlw	71
  2987  081D  3459               	retlw	89
  2988  081E  345E               	retlw	94
  2989  081F  3400               	retlw	0
  2990  0820  3400               	retlw	0
  2991  0821  3400               	retlw	0
  2992  0822  344D               	retlw	77
  2993  0823  344A               	retlw	74
  2994  0824  3455               	retlw	85
  2995  0825  3426               	retlw	38
  2996  0826  342A               	retlw	42
  2997  0827  3400               	retlw	0
  2998  0828  3400               	retlw	0
  2999  0829  343C               	retlw	60
  3000  082A  344B               	retlw	75
  3001  082B  3449               	retlw	73
  3002  082C  344F               	retlw	79
  3003  082D  3429               	retlw	41
  3004  082E  3428               	retlw	40
  3005  082F  3400               	retlw	0
  3006  0830  3400               	retlw	0
  3007  0831  343E               	retlw	62
  3008  0832  343F               	retlw	63
  3009  0833  344C               	retlw	76
  3010  0834  343A               	retlw	58
  3011  0835  3450               	retlw	80
  3012  0836  345F               	retlw	95
  3013  0837  3400               	retlw	0
  3014  0838  3400               	retlw	0
  3015  0839  3400               	retlw	0
  3016  083A  3422               	retlw	34
  3017  083B  3400               	retlw	0
  3018  083C  347B               	retlw	123
  3019  083D  342B               	retlw	43
  3020  083E  3400               	retlw	0
  3021  083F  3400               	retlw	0
  3022  0840  3400               	retlw	0
  3023  0841  3400               	retlw	0
  3024  0842  340D               	retlw	13
  3025  0843  347D               	retlw	125
  3026  0844  3400               	retlw	0
  3027  0845  347C               	retlw	124
  3028  0846  3400               	retlw	0
  3029  0847  3400               	retlw	0
  3030  0848  3400               	retlw	0
  3031  0849  3400               	retlw	0
  3032  084A  3400               	retlw	0
  3033  084B  3400               	retlw	0
  3034  084C  3400               	retlw	0
  3035  084D  3400               	retlw	0
  3036  084E  3408               	retlw	8
  3037  084F  3400               	retlw	0
  3038  0850  3400               	retlw	0
  3039  0851  3431               	retlw	49
  3040  0852  3400               	retlw	0
  3041  0853  3434               	retlw	52
  3042  0854  3437               	retlw	55
  3043  0855  3400               	retlw	0
  3044  0856  3400               	retlw	0
  3045  0857  3400               	retlw	0
  3046  0858  3430               	retlw	48
  3047  0859  342E               	retlw	46
  3048  085A  3432               	retlw	50
  3049  085B  3435               	retlw	53
  3050  085C  3436               	retlw	54
  3051  085D  3438               	retlw	56
  3052  085E  341B               	retlw	27
  3053  085F  3400               	retlw	0
  3054  0860  3400               	retlw	0
  3055  0861  342B               	retlw	43
  3056  0862  3433               	retlw	51
  3057  0863  342D               	retlw	45
  3058  0864  342A               	retlw	42
  3059  0865  3439               	retlw	57
  3060  0866                     __end_of_ScanCodeSHIFT:	
  3061  0866                     _ScanCodeFunctionE0:	
  3062  0866  341E               	retlw	30
  3063  0867  3400               	retlw	0
  3064  0868  3400               	retlw	0
  3065  0869  341F               	retlw	31
  3066  086A  3400               	retlw	0
  3067  086B  3400               	retlw	0
  3068  086C  3400               	retlw	0
  3069  086D  3400               	retlw	0
  3070  086E  3400               	retlw	0
  3071  086F  3400               	retlw	0
  3072  0870  3400               	retlw	0
  3073  0871  3400               	retlw	0
  3074  0872  3400               	retlw	0
  3075  0873  3400               	retlw	0
  3076  0874  3419               	retlw	25
  3077  0875  3400               	retlw	0
  3078  0876  3400               	retlw	0
  3079  0877  3400               	retlw	0
  3080  0878  3400               	retlw	0
  3081  0879  3400               	retlw	0
  3082  087A  3400               	retlw	0
  3083  087B  3400               	retlw	0
  3084  087C  341D               	retlw	29
  3085  087D  3400               	retlw	0
  3086  087E  3400               	retlw	0
  3087  087F  3400               	retlw	0
  3088  0880  3400               	retlw	0
  3089  0881  3400               	retlw	0
  3090  0882  3400               	retlw	0
  3091  0883  3400               	retlw	0
  3092  0884  3400               	retlw	0
  3093  0885  3400               	retlw	0
  3094  0886  3400               	retlw	0
  3095  0887  3400               	retlw	0
  3096  0888  3400               	retlw	0
  3097  0889  3400               	retlw	0
  3098  088A  3400               	retlw	0
  3099  088B  3400               	retlw	0
  3100  088C  3400               	retlw	0
  3101  088D  3400               	retlw	0
  3102  088E  3400               	retlw	0
  3103  088F  3400               	retlw	0
  3104  0890  3400               	retlw	0
  3105  0891  3400               	retlw	0
  3106  0892  3400               	retlw	0
  3107  0893  3400               	retlw	0
  3108  0894  3400               	retlw	0
  3109  0895  3400               	retlw	0
  3110  0896  3400               	retlw	0
  3111  0897  3400               	retlw	0
  3112  0898  3400               	retlw	0
  3113  0899  3400               	retlw	0
  3114  089A  3400               	retlw	0
  3115  089B  3400               	retlw	0
  3116  089C  3400               	retlw	0
  3117  089D  3400               	retlw	0
  3118  089E  3400               	retlw	0
  3119  089F  342F               	retlw	47
  3120  08A0  3400               	retlw	0
  3121  08A1  3400               	retlw	0
  3122  08A2  3400               	retlw	0
  3123  08A3  3400               	retlw	0
  3124  08A4  3400               	retlw	0
  3125  08A5  3400               	retlw	0
  3126  08A6  3400               	retlw	0
  3127  08A7  3400               	retlw	0
  3128  08A8  3400               	retlw	0
  3129  08A9  3400               	retlw	0
  3130  08AA  3400               	retlw	0
  3131  08AB  3400               	retlw	0
  3132  08AC  3400               	retlw	0
  3133  08AD  3400               	retlw	0
  3134  08AE  3400               	retlw	0
  3135  08AF  340D               	retlw	13
  3136  08B0  3400               	retlw	0
  3137  08B1  3400               	retlw	0
  3138  08B2  3400               	retlw	0
  3139  08B3  3400               	retlw	0
  3140  08B4  3400               	retlw	0
  3141  08B5  3400               	retlw	0
  3142  08B6  3400               	retlw	0
  3143  08B7  3400               	retlw	0
  3144  08B8  3400               	retlw	0
  3145  08B9  3400               	retlw	0
  3146  08BA  3400               	retlw	0
  3147  08BB  3400               	retlw	0
  3148  08BC  3400               	retlw	0
  3149  08BD  3400               	retlw	0
  3150  08BE  3401               	retlw	1
  3151  08BF  3400               	retlw	0
  3152  08C0  3403               	retlw	3
  3153  08C1  3416               	retlw	22
  3154  08C2  3400               	retlw	0
  3155  08C3  3400               	retlw	0
  3156  08C4  3400               	retlw	0
  3157  08C5  3415               	retlw	21
  3158  08C6  347F               	retlw	127
  3159  08C7  3404               	retlw	4
  3160  08C8  3400               	retlw	0
  3161  08C9  3405               	retlw	5
  3162  08CA  3402               	retlw	2
  3163  08CB  3400               	retlw	0
  3164  08CC  3400               	retlw	0
  3165  08CD  3400               	retlw	0
  3166  08CE  3400               	retlw	0
  3167  08CF  3418               	retlw	24
  3168  08D0  3400               	retlw	0
  3169  08D1  3400               	retlw	0
  3170  08D2  3417               	retlw	23
  3171  08D3                     __end_of_ScanCodeFunctionE0:	
  3172  08D3                     _dpowers:	
  3173  08D3  3401               	retlw	1
  3174  08D4  3400               	retlw	0
  3175  08D5  3400               	retlw	0
  3176  08D6  3400               	retlw	0
  3177  08D7  340A               	retlw	10
  3178  08D8  3400               	retlw	0
  3179  08D9  3400               	retlw	0
  3180  08DA  3400               	retlw	0
  3181  08DB  3464               	retlw	100
  3182  08DC  3400               	retlw	0
  3183  08DD  3400               	retlw	0
  3184  08DE  3400               	retlw	0
  3185  08DF  34E8               	retlw	232
  3186  08E0  3403               	retlw	3
  3187  08E1  3400               	retlw	0
  3188  08E2  3400               	retlw	0
  3189  08E3  3410               	retlw	16
  3190  08E4  3427               	retlw	39
  3191  08E5  3400               	retlw	0
  3192  08E6  3400               	retlw	0
  3193  08E7  34A0               	retlw	160
  3194  08E8  3486               	retlw	134
  3195  08E9  3401               	retlw	1
  3196  08EA  3400               	retlw	0
  3197  08EB  3440               	retlw	64
  3198  08EC  3442               	retlw	66
  3199  08ED  340F               	retlw	15
  3200  08EE  3400               	retlw	0
  3201  08EF  3480               	retlw	128
  3202  08F0  3496               	retlw	150
  3203  08F1  3498               	retlw	152
  3204  08F2  3400               	retlw	0
  3205  08F3  3400               	retlw	0
  3206  08F4  34E1               	retlw	225
  3207  08F5  34F5               	retlw	245
  3208  08F6  3405               	retlw	5
  3209  08F7  3400               	retlw	0
  3210  08F8  34CA               	retlw	202
  3211  08F9  349A               	retlw	154
  3212  08FA  343B               	retlw	59
  3213  08FB                     __end_of_dpowers:	
  3214  08FB                     _EvenParityMSG:	
  3215  08FB  3420               	retlw	32
  3216  08FC  3477               	retlw	119
  3217  08FD  3469               	retlw	105
  3218  08FE  3474               	retlw	116
  3219  08FF  3468               	retlw	104
  3220  0900  3420               	retlw	32
  3221  0901  3445               	retlw	69
  3222  0902  3476               	retlw	118
  3223  0903  3465               	retlw	101
  3224  0904  346E               	retlw	110
  3225  0905  3420               	retlw	32
  3226  0906  3470               	retlw	112
  3227  0907  3461               	retlw	97
  3228  0908  3472               	retlw	114
  3229  0909  3469               	retlw	105
  3230  090A  3474               	retlw	116
  3231  090B  3479               	retlw	121
  3232  090C  3420               	retlw	32
  3233  090D  3462               	retlw	98
  3234  090E  3469               	retlw	105
  3235  090F  3474               	retlw	116
  3236  0910  3400               	retlw	0
  3237  0911                     __end_of_EvenParityMSG:	
  3238  0911                     _OddParityMSG:	
  3239  0911  3420               	retlw	32
  3240  0912  3477               	retlw	119
  3241  0913  3469               	retlw	105
  3242  0914  3474               	retlw	116
  3243  0915  3468               	retlw	104
  3244  0916  3420               	retlw	32
  3245  0917  344F               	retlw	79
  3246  0918  3464               	retlw	100
  3247  0919  3464               	retlw	100
  3248  091A  3420               	retlw	32
  3249  091B  3470               	retlw	112
  3250  091C  3461               	retlw	97
  3251  091D  3472               	retlw	114
  3252  091E  3469               	retlw	105
  3253  091F  3474               	retlw	116
  3254  0920  3479               	retlw	121
  3255  0921  3420               	retlw	32
  3256  0922  3462               	retlw	98
  3257  0923  3469               	retlw	105
  3258  0924  3474               	retlw	116
  3259  0925  3400               	retlw	0
  3260  0926                     __end_of_OddParityMSG:	
  3261  0926                     _NoParityMSG:	
  3262  0926  3420               	retlw	32
  3263  0927  3477               	retlw	119
  3264  0928  3469               	retlw	105
  3265  0929  3474               	retlw	116
  3266  092A  3468               	retlw	104
  3267  092B  3420               	retlw	32
  3268  092C  344E               	retlw	78
  3269  092D  346F               	retlw	111
  3270  092E  3420               	retlw	32
  3271  092F  3470               	retlw	112
  3272  0930  3461               	retlw	97
  3273  0931  3472               	retlw	114
  3274  0932  3469               	retlw	105
  3275  0933  3474               	retlw	116
  3276  0934  3479               	retlw	121
  3277  0935  3420               	retlw	32
  3278  0936  3462               	retlw	98
  3279  0937  3469               	retlw	105
  3280  0938  3474               	retlw	116
  3281  0939  3400               	retlw	0
  3282  093A                     __end_of_NoParityMSG:	
  3283  093A                     _SpaceParityMSG:	
  3284  093A  3420               	retlw	32
  3285  093B  3477               	retlw	119
  3286  093C  3469               	retlw	105
  3287  093D  3474               	retlw	116
  3288  093E  3468               	retlw	104
  3289  093F  3420               	retlw	32
  3290  0940  3453               	retlw	83
  3291  0941  3470               	retlw	112
  3292  0942  3461               	retlw	97
  3293  0943  3463               	retlw	99
  3294  0944  3465               	retlw	101
  3295  0945  3420               	retlw	32
  3296  0946  3462               	retlw	98
  3297  0947  3469               	retlw	105
  3298  0948  3474               	retlw	116
  3299  0949  3400               	retlw	0
  3300  094A                     __end_of_SpaceParityMSG:	
  3301  094A                     _MarkParityMSG:	
  3302  094A  3420               	retlw	32
  3303  094B  3477               	retlw	119
  3304  094C  3469               	retlw	105
  3305  094D  3474               	retlw	116
  3306  094E  3468               	retlw	104
  3307  094F  3420               	retlw	32
  3308  0950  344D               	retlw	77
  3309  0951  3461               	retlw	97
  3310  0952  3472               	retlw	114
  3311  0953  346B               	retlw	107
  3312  0954  3420               	retlw	32
  3313  0955  3462               	retlw	98
  3314  0956  3469               	retlw	105
  3315  0957  3474               	retlw	116
  3316  0958  3400               	retlw	0
  3317  0959                     __end_of_MarkParityMSG:	
  3318  0959                     _VoltageMSG:	
  3319  0959  3456               	retlw	86
  3320  095A  346F               	retlw	111
  3321  095B  346C               	retlw	108
  3322  095C  3474               	retlw	116
  3323  095D  3461               	retlw	97
  3324  095E  3467               	retlw	103
  3325  095F  3465               	retlw	101
  3326  0960  3420               	retlw	32
  3327  0961  3474               	retlw	116
  3328  0962  346F               	retlw	111
  3329  0963  346F               	retlw	111
  3330  0964  3420               	retlw	32
  3331  0965  3400               	retlw	0
  3332  0966                     __end_of_VoltageMSG:	
  3333  0966                     _Version:	
  3334  0966  3431               	retlw	49
  3335  0967  342E               	retlw	46
  3336  0968  3433               	retlw	51
  3337  0969  345F               	retlw	95
  3338  096A  3444               	retlw	68
  3339  096B  3457               	retlw	87
  3340  096C  3430               	retlw	48
  3341  096D  3400               	retlw	0
  3342  096E                     __end_of_Version:	
  3343  000B                     _INTCON	set	11
  3344  000B                     _INTCONbits	set	11
  3345  0011                     _PIR1bits	set	17
  3346  000C                     _PORTA	set	12
  3347  000E                     _PORTC	set	14
  3348  001B                     _PR2	set	27
  3349  001C                     _T2CON	set	28
  3350  001C                     _T2CONbits	set	28
  3351  001A                     _TMR2	set	26
  3352  009D                     _ADCON0	set	157
  3353  009E                     _ADCON1	set	158
  3354  009F                     _ADCON2	set	159
  3355  009C                     _ADRESH	set	156
  3356  009B                     _ADRESL	set	155
  3357  0095                     _OPTION_REGbits	set	149
  3358  0099                     _OSCCON	set	153
  3359  009A                     _OSCSTAT	set	154
  3360  0091                     _PIE1	set	145
  3361  0091                     _PIE1bits	set	145
  3362  008C                     _TRISAbits	set	140
  3363  008E                     _TRISCbits	set	142
  3364  04D0                     _HFIOFS	set	1232
  3365  0117                     _FVRCON	set	279
  3366  010C                     _LATA	set	268
  3367  010E                     _LATC	set	270
  3368  018C                     _ANSELA	set	396
  3369  018E                     _ANSELC	set	398
  3370  019F                     _BAUD1CON	set	415
  3371  0192                     _PMADRH	set	402
  3372  0191                     _PMADRL	set	401
  3373  0195                     _PMCON1	set	405
  3374  0196                     _PMCON2	set	406
  3375  0194                     _PMDATH	set	404
  3376  0193                     _PMDATL	set	403
  3377  019D                     _RC1STA	set	413
  3378  019D                     _RC1STAbits	set	413
  3379  0199                     _RCREG	set	409
  3380  019D                     _RCSTA	set	413
  3381  019D                     _RCSTAbits	set	413
  3382  019B                     _SPBRG	set	411
  3383  019C                     _SPBRGH	set	412
  3384  019E                     _TX1STA	set	414
  3385  019E                     _TX1STAbits	set	414
  3386  019A                     _TXREG	set	410
  3387  019E                     _TXSTAbits	set	414
  3388  020C                     _WPUA	set	524
  3389  020E                     _WPUC	set	526
  3390  029A                     _CCP2CONbits	set	666
  3391  0393                     _IOCAF	set	915
  3392  0392                     _IOCAN	set	914
  3393  0391                     _IOCAP	set	913
  3394  0E25                     _CKPPS	set	3621
  3395  0E0F                     _PPSLOCK	set	3599
  3396  0E24                     _RXPPS	set	3620
  3397  0EA2                     _RC2PPS	set	3746
  3398  096E                     __stringdata:	
  3399  096E                     STR_6:	
  3400  096E  3443               	retlw	67	;'C'
  3401  096F  3468               	retlw	104	;'h'
  3402  0970  3461               	retlw	97	;'a'
  3403  0971  346E               	retlw	110	;'n'
  3404  0972  3467               	retlw	103	;'g'
  3405  0973  3465               	retlw	101	;'e'
  3406  0974  3420               	retlw	32	;' '
  3407  0975  3442               	retlw	66	;'B'
  3408  0976  3441               	retlw	65	;'A'
  3409  0977  3455               	retlw	85	;'U'
  3410  0978  3444               	retlw	68	;'D'
  3411  0979  343A               	retlw	58	;':'
  3412  097A  3420               	retlw	32	;' '
  3413  097B  3422               	retlw	34	;'"'
  3414  097C  3443               	retlw	67	;'C'
  3415  097D  344E               	retlw	78	;'N'
  3416  097E  3454               	retlw	84	;'T'
  3417  097F  3420               	retlw	32	;' '
  3418  0980  342B               	retlw	43	;'+'
  3419  0981  3420               	retlw	32	;' '
  3420  0982  3441               	retlw	65	;'A'
  3421  0983  344C               	retlw	76	;'L'
  3422  0984  3454               	retlw	84	;'T'
  3423  0985  3420               	retlw	32	;' '
  3424  0986  342B               	retlw	43	;'+'
  3425  0987  3420               	retlw	32	;' '
  3426  0988  3444               	retlw	68	;'D'
  3427  0989  3445               	retlw	69	;'E'
  3428  098A  344C               	retlw	76	;'L'
  3429  098B  3422               	retlw	34	;'"'
  3430  098C  340D               	retlw	13
  3431  098D  340A               	retlw	10
  3432  098E  3400               	retlw	0
  3433  098F                     STR_3:	
  3434  098F  340D               	retlw	13
  3435  0990  340A               	retlw	10
  3436  0991  3450               	retlw	80	;'P'
  3437  0992  3453               	retlw	83	;'S'
  3438  0993  342F               	retlw	47	;'/'
  3439  0994  3432               	retlw	50	;'2'
  3440  0995  3420               	retlw	32	;' '
  3441  0996  344B               	retlw	75	;'K'
  3442  0997  3465               	retlw	101	;'e'
  3443  0998  3479               	retlw	121	;'y'
  3444  0999  3462               	retlw	98	;'b'
  3445  099A  346F               	retlw	111	;'o'
  3446  099B  3461               	retlw	97	;'a'
  3447  099C  3472               	retlw	114	;'r'
  3448  099D  3464               	retlw	100	;'d'
  3449  099E  3420               	retlw	32	;' '
  3450  099F  3474               	retlw	116	;'t'
  3451  09A0  346F               	retlw	111	;'o'
  3452  09A1  3420               	retlw	32	;' '
  3453  09A2  3452               	retlw	82	;'R'
  3454  09A3  3453               	retlw	83	;'S'
  3455  09A4  342D               	retlw	45	;'-'
  3456  09A5  3432               	retlw	50	;'2'
  3457  09A6  3433               	retlw	51	;'3'
  3458  09A7  3432               	retlw	50	;'2'
  3459  09A8  340D               	retlw	13
  3460  09A9  340A               	retlw	10
  3461  09AA  3400               	retlw	0
  3462  09AB                     STR_18:	
  3463  09AB  3442               	retlw	66	;'B'
  3464  09AC  3461               	retlw	97	;'a'
  3465  09AD  3475               	retlw	117	;'u'
  3466  09AE  3464               	retlw	100	;'d'
  3467  09AF  3420               	retlw	32	;' '
  3468  09B0  3477               	retlw	119	;'w'
  3469  09B1  3469               	retlw	105	;'i'
  3470  09B2  346C               	retlw	108	;'l'
  3471  09B3  346C               	retlw	108	;'l'
  3472  09B4  3420               	retlw	32	;' '
  3473  09B5  3462               	retlw	98	;'b'
  3474  09B6  3465               	retlw	101	;'e'
  3475  09B7  3420               	retlw	32	;' '
  3476  09B8  3473               	retlw	115	;'s'
  3477  09B9  3465               	retlw	101	;'e'
  3478  09BA  3474               	retlw	116	;'t'
  3479  09BB  3420               	retlw	32	;' '
  3480  09BC  3474               	retlw	116	;'t'
  3481  09BD  346F               	retlw	111	;'o'
  3482  09BE  3420               	retlw	32	;' '
  3483  09BF  3425               	retlw	37	;'%'
  3484  09C0  346C               	retlw	108	;'l'
  3485  09C1  3475               	retlw	117	;'u'
  3486  09C2  3400               	retlw	0
  3487  09C3                     STR_10:	
  3488  09C3  3446               	retlw	70	;'F'
  3489  09C4  346C               	retlw	108	;'l'
  3490  09C5  3461               	retlw	97	;'a'
  3491  09C6  3473               	retlw	115	;'s'
  3492  09C7  3468               	retlw	104	;'h'
  3493  09C8  3420               	retlw	32	;' '
  3494  09C9  3450               	retlw	80	;'P'
  3495  09CA  3472               	retlw	114	;'r'
  3496  09CB  346F               	retlw	111	;'o'
  3497  09CC  3467               	retlw	103	;'g'
  3498  09CD  3472               	retlw	114	;'r'
  3499  09CE  3461               	retlw	97	;'a'
  3500  09CF  346D               	retlw	109	;'m'
  3501  09D0  3420               	retlw	32	;' '
  3502  09D1  3446               	retlw	70	;'F'
  3503  09D2  3461               	retlw	97	;'a'
  3504  09D3  3469               	retlw	105	;'i'
  3505  09D4  346C               	retlw	108	;'l'
  3506  09D5  340D               	retlw	13
  3507  09D6  340A               	retlw	10
  3508  09D7  3400               	retlw	0
  3509  09D8                     STR_20:	
  3510  09D8  3442               	retlw	66	;'B'
  3511  09D9  3461               	retlw	97	;'a'
  3512  09DA  3475               	retlw	117	;'u'
  3513  09DB  3464               	retlw	100	;'d'
  3514  09DC  3420               	retlw	32	;' '
  3515  09DD  344F               	retlw	79	;'O'
  3516  09DE  3475               	retlw	117	;'u'
  3517  09DF  3474               	retlw	116	;'t'
  3518  09E0  3420               	retlw	32	;' '
  3519  09E1  346F               	retlw	111	;'o'
  3520  09E2  3466               	retlw	102	;'f'
  3521  09E3  3420               	retlw	32	;' '
  3522  09E4  3452               	retlw	82	;'R'
  3523  09E5  3461               	retlw	97	;'a'
  3524  09E6  346E               	retlw	110	;'n'
  3525  09E7  3467               	retlw	103	;'g'
  3526  09E8  3465               	retlw	101	;'e'
  3527  09E9  340D               	retlw	13
  3528  09EA  340A               	retlw	10
  3529  09EB  3400               	retlw	0
  3530  09EC                     STR_14:	
  3531  09EC  3445               	retlw	69	;'E'
  3532  09ED  346E               	retlw	110	;'n'
  3533  09EE  3474               	retlw	116	;'t'
  3534  09EF  3465               	retlw	101	;'e'
  3535  09F0  3472               	retlw	114	;'r'
  3536  09F1  3420               	retlw	32	;' '
  3537  09F2  3442               	retlw	66	;'B'
  3538  09F3  3461               	retlw	97	;'a'
  3539  09F4  3475               	retlw	117	;'u'
  3540  09F5  3464               	retlw	100	;'d'
  3541  09F6  3420               	retlw	32	;' '
  3542  09F7  3472               	retlw	114	;'r'
  3543  09F8  3461               	retlw	97	;'a'
  3544  09F9  3474               	retlw	116	;'t'
  3545  09FA  3465               	retlw	101	;'e'
  3546  09FB  3420               	retlw	32	;' '
  3547  09FC  340D               	retlw	13
  3548  09FD  340A               	retlw	10
  3549  09FE  3400               	retlw	0
  3550  09FF                     STR_15:	
  3551  09FF  3442               	retlw	66	;'B'
  3552  0A00  3461               	retlw	97	;'a'
  3553  0A01  3475               	retlw	117	;'u'
  3554  0A02  3464               	retlw	100	;'d'
  3555  0A03  3420               	retlw	32	;' '
  3556  0A04  3452               	retlw	82	;'R'
  3557  0A05  3465               	retlw	101	;'e'
  3558  0A06  3473               	retlw	115	;'s'
  3559  0A07  3465               	retlw	101	;'e'
  3560  0A08  3474               	retlw	116	;'t'
  3561  0A09  3420               	retlw	32	;' '
  3562  0A0A  3474               	retlw	116	;'t'
  3563  0A0B  346F               	retlw	111	;'o'
  3564  0A0C  3420               	retlw	32	;' '
  3565  0A0D  3439               	retlw	57	;'9'
  3566  0A0E  3436               	retlw	54	;'6'
  3567  0A0F  3430               	retlw	48	;'0'
  3568  0A10  3430               	retlw	48	;'0'
  3569  0A11  3400               	retlw	0
  3570  0A12                     STR_4:	
  3571  0A12  3446               	retlw	70	;'F'
  3572  0A13  3469               	retlw	105	;'i'
  3573  0A14  3472               	retlw	114	;'r'
  3574  0A15  346D               	retlw	109	;'m'
  3575  0A16  3477               	retlw	119	;'w'
  3576  0A17  3461               	retlw	97	;'a'
  3577  0A18  3472               	retlw	114	;'r'
  3578  0A19  3465               	retlw	101	;'e'
  3579  0A1A  3420               	retlw	32	;' '
  3580  0A1B  3456               	retlw	86	;'V'
  3581  0A1C  3465               	retlw	101	;'e'
  3582  0A1D  3472               	retlw	114	;'r'
  3583  0A1E  3473               	retlw	115	;'s'
  3584  0A1F  3469               	retlw	105	;'i'
  3585  0A20  346F               	retlw	111	;'o'
  3586  0A21  346E               	retlw	110	;'n'
  3587  0A22  343A               	retlw	58	;':'
  3588  0A23  3420               	retlw	32	;' '
  3589  0A24  3400               	retlw	0
  3590  0A25                     STR_11:	
  3591  0A25  3442               	retlw	66	;'B'
  3592  0A26  3461               	retlw	97	;'a'
  3593  0A27  3475               	retlw	117	;'u'
  3594  0A28  3464               	retlw	100	;'d'
  3595  0A29  3420               	retlw	32	;' '
  3596  0A2A  3469               	retlw	105	;'i'
  3597  0A2B  3473               	retlw	115	;'s'
  3598  0A2C  3420               	retlw	32	;' '
  3599  0A2D  3425               	retlw	37	;'%'
  3600  0A2E  346C               	retlw	108	;'l'
  3601  0A2F  3475               	retlw	117	;'u'
  3602  0A30  3400               	retlw	0
  3603  0A31                     STR_2:	
  3604  0A31  3448               	retlw	72	;'H'
  3605  0A32  3469               	retlw	105	;'i'
  3606  0A33  3467               	retlw	103	;'g'
  3607  0A34  3468               	retlw	104	;'h'
  3608  0A35  3421               	retlw	33	;'!'
  3609  0A36  340D               	retlw	13
  3610  0A37  340A               	retlw	10
  3611  0A38  3400               	retlw	0
  3612  0A39                     STR_1:	
  3613  0A39  344C               	retlw	76	;'L'
  3614  0A3A  346F               	retlw	111	;'o'
  3615  0A3B  3477               	retlw	119	;'w'
  3616  0A3C  3421               	retlw	33	;'!'
  3617  0A3D  340D               	retlw	13
  3618  0A3E  340A               	retlw	10
  3619  0A3F  3400               	retlw	0
  3620  0A40                     __end_of__stringdata:	
  3621                           
  3622                           ; #config settings
  3623  0000                     
  3624                           	psect	cinit
  3625  00E8                     start_initialization:	
  3626  00E8                     __initialization:	
  3627                           
  3628                           ; Clear objects allocated to BANK1
  3629  00E8  30C5               	movlw	low __pbssBANK1
  3630  00E9  0084               	movwf	4
  3631  00EA  3000               	movlw	high __pbssBANK1
  3632  00EB  0085               	movwf	5
  3633  00EC  301D               	movlw	29
  3634  00ED  3198  2040  3180   	fcall	clear_ram0
  3635                           
  3636                           ; Clear objects allocated to BANK3
  3637  00F0  30E1               	movlw	low __pbssBANK3
  3638  00F1  0084               	movwf	4
  3639  00F2  3001               	movlw	high __pbssBANK3
  3640  00F3  0085               	movwf	5
  3641  00F4  300F               	movlw	15
  3642  00F5  3198  2040  3180   	fcall	clear_ram0
  3643                           
  3644                           ; Clear objects allocated to BANK4
  3645  00F8  3057               	movlw	low __pbssBANK4
  3646  00F9  0084               	movwf	4
  3647  00FA  3002               	movlw	high __pbssBANK4
  3648  00FB  0085               	movwf	5
  3649  00FC  300A               	movlw	10
  3650  00FD  3198  2040  3180   	fcall	clear_ram0
  3651                           
  3652                           ; Initialize objects allocated to BANK1
  3653  0100  3030               	movlw	low __pidataBANK1
  3654  0101  0084               	movwf	4
  3655  0102  3098               	movlw	(high __pidataBANK1)| (0+128)
  3656  0103  0085               	movwf	5
  3657  0104  30E2               	movlw	low __pdataBANK1
  3658  0105  0086               	movwf	6
  3659  0106  3000               	movlw	high __pdataBANK1
  3660  0107  0087               	movwf	7
  3661  0108  3004               	movlw	4
  3662  0109  3198  203A  3180   	fcall	init_ram
  3663                           
  3664                           ; Initialize objects allocated to BANK4
  3665  010C  302C               	movlw	low __pidataBANK4
  3666  010D  0084               	movwf	4
  3667  010E  3098               	movlw	(high __pidataBANK4)| (0+128)
  3668  010F  0085               	movwf	5
  3669  0110  3061               	movlw	low __pdataBANK4
  3670  0111  0086               	movwf	6
  3671  0112  3002               	movlw	high __pdataBANK4
  3672  0113  0087               	movwf	7
  3673  0114  3004               	movlw	4
  3674  0115  3198  203A         	fcall	init_ram
  3675  0117                     end_of_initialization:	
  3676                           ;End of C runtime variable initialization code
  3677                           
  3678  0117                     __end_of__initialization:	
  3679  0117  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  3680  0118  0020               	movlb	0
  3681  0119  3196  2E11         	ljmp	_main	;jump to C main() function
  3682                           
  3683                           	psect	bssBANK1
  3684  00C5                     __pbssBANK1:	
  3685  00C5                     _BaudTyped:	
  3686  00C5                     	ds	4
  3687  00C9                     _PS_2_Read_Data_TEMP:	
  3688  00C9                     	ds	2
  3689  00CB                     _BAUDMODE:	
  3690  00CB                     	ds	1
  3691  00CC                     _Caps_Lock_Key:	
  3692  00CC                     	ds	1
  3693  00CD                     _Caps_Lock_Key_old:	
  3694  00CD                     	ds	1
  3695  00CE                     _Delete:	
  3696  00CE                     	ds	1
  3697  00CF                     _LControl:	
  3698  00CF                     	ds	1
  3699  00D0                     _Left_Shift_Key_old:	
  3700  00D0                     	ds	1
  3701  00D1                     _PS_2_Buffer_items:	
  3702  00D1                     	ds	1
  3703  00D2                     _PS_2_bits:	
  3704  00D2                     	ds	1
  3705  00D3                     _ResendLastFlag:	
  3706  00D3                     	ds	1
  3707  00D4                     _Right_Shift_Key_old:	
  3708  00D4                     	ds	1
  3709  00D5                     _i:	
  3710  00D5                     	ds	1
  3711  00D6                     _PS_2_ScanCodes:	
  3712  00D6                     	ds	12
  3713                           
  3714                           	psect	dataBANK1
  3715  00E2                     __pdataBANK1:	
  3716  00E2                     _MEM:	
  3717  00E2                     	ds	4
  3718                           
  3719                           	psect	bssBANK3
  3720  01E1                     __pbssBANK3:	
  3721  01E1                     _PS_2_Read_Data_First:	
  3722  01E1                     	ds	2
  3723  01E3                     _PS_2_Read_Data_Second:	
  3724  01E3                     	ds	2
  3725  01E5                     _PS_2_Read_Data_Third:	
  3726  01E5                     	ds	2
  3727  01E7                     _CapsCount:	
  3728  01E7                     	ds	1
  3729  01E8                     _Caps_Lock:	
  3730  01E8                     	ds	1
  3731  01E9                     _LALT:	
  3732  01E9                     	ds	1
  3733  01EA                     _Left_Shift_Key:	
  3734  01EA                     	ds	1
  3735  01EB                     _ParityTyped:	
  3736  01EB                     	ds	1
  3737  01EC                     _RALT:	
  3738  01EC                     	ds	1
  3739  01ED                     _RControl:	
  3740  01ED                     	ds	1
  3741  01EE                     _Right_Shift_Key:	
  3742  01EE                     	ds	1
  3743  01EF                     _Shift_Key:	
  3744  01EF                     	ds	1
  3745                           
  3746                           	psect	bssBANK4
  3747  0257                     __pbssBANK4:	
  3748  0257                     _BatteryVoltage:	
  3749  0257                     	ds	3
  3750  025A                     _SinLEDtimer:	
  3751  025A                     	ds	2
  3752  025C                     _pwrLEDtoggle:	
  3753  025C                     	ds	2
  3754  025E                     _Alarm:	
  3755  025E                     	ds	1
  3756  025F                     _ECHO:	
  3757  025F                     	ds	1
  3758  0260                     _PARITY:	
  3759  0260                     	ds	1
  3760                           
  3761                           	psect	dataBANK4
  3762  0261                     __pdataBANK4:	
  3763  0261                     _BAUD:	
  3764  0261                     	ds	4
  3765                           
  3766                           	psect	clrtext
  3767  1840                     clear_ram0:	
  3768                           ;	Called with FSR0 containing the base address, and
  3769                           ;	WREG with the size to clear
  3770                           
  3771  1840  0064               	clrwdt	;clear the watchdog before getting into this loop
  3772  1841                     clrloop0:	
  3773  1841  0180               	clrf	0	;clear RAM location pointed to by FSR
  3774  1842  3101               	addfsr 0,1
  3775  1843  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3776  1844  2841               	goto	clrloop0	;have we reached the end yet?
  3777  1845  3400               	retlw	0	;all done for this memory range, return
  3778                           
  3779                           	psect	inittext
  3780  183A                     init_ram:	
  3781  183A  00FE               	movwf	126
  3782  183B                     initloop:	
  3783  183B  0012               	moviw fsr0++
  3784  183C  001E               	movwi fsr1++
  3785  183D  0BFE               	decfsz	126,f
  3786  183E  283B               	goto	initloop
  3787  183F  3400               	retlw	0
  3788                           
  3789                           	psect	cstackBANK4
  3790  0220                     __pcstackBANK4:	
  3791  0220                     ??_PS_2_DISABLE_INTERRUPT:	
  3792  0220                     ??_READ_PS_2_PIN:	
  3793                           ; 0 bytes @ 0x0
  3794                           
  3795  0220                     ??_Timer2ON:	
  3796                           ; 0 bytes @ 0x0
  3797                           
  3798  0220                     ??_PS_2_ENABLE_INTERRUPT:	
  3799                           ; 0 bytes @ 0x0
  3800                           
  3801  0220                     ??_ReadUSART:	
  3802                           ; 0 bytes @ 0x0
  3803                           
  3804  0220                     ??_ConfigureOscillator:	
  3805                           ; 0 bytes @ 0x0
  3806                           
  3807  0220                     ??_InitApp:	
  3808                           ; 0 bytes @ 0x0
  3809                           
  3810  0220                     ?_delayUS:	
  3811                           ; 0 bytes @ 0x0
  3812                           
  3813  0220                     ?_OpenUSART:	
  3814                           ; 0 bytes @ 0x0
  3815                           
  3816  0220                     ??_baudUSART:	
  3817                           ; 0 bytes @ 0x0
  3818                           
  3819  0220                     ??_Clock_TRIS:	
  3820                           ; 0 bytes @ 0x0
  3821                           
  3822  0220                     ??_Data_TRIS:	
  3823                           ; 0 bytes @ 0x0
  3824                           
  3825  0220                     ??_Timer2Init:	
  3826                           ; 0 bytes @ 0x0
  3827                           
  3828  0220                     ??_DisableInternalADC:	
  3829                           ; 0 bytes @ 0x0
  3830                           
  3831  0220                     ??_CloseUSART:	
  3832                           ; 0 bytes @ 0x0
  3833                           
  3834  0220                     ?___ftge:	
  3835                           ; 0 bytes @ 0x0
  3836                           
  3837  0220                     ?_CheckSum_byte:	
  3838                           ; 1 bit 
  3839                           
  3840  0220                     ?_ReadFlash_2Byte:	
  3841                           ; 1 bytes @ 0x0
  3842                           
  3843  0220                     ?___ftpack:	
  3844                           ; 2 bytes @ 0x0
  3845                           
  3846  0220                     ?___lldiv:	
  3847                           ; 3 bytes @ 0x0
  3848                           
  3849  0220                     baudUSART@baudconfig:	
  3850                           ; 4 bytes @ 0x0
  3851                           
  3852  0220                     Clock_TRIS@direction:	
  3853                           ; 1 bytes @ 0x0
  3854                           
  3855  0220                     Data_TRIS@direction:	
  3856                           ; 1 bytes @ 0x0
  3857                           
  3858  0220                     PS_2_ENABLE_INTERRUPT@DATA_CLK:	
  3859                           ; 1 bytes @ 0x0
  3860                           
  3861  0220                     READ_PS_2_PIN@DATA_CLK:	
  3862                           ; 1 bytes @ 0x0
  3863                           
  3864  0220                     CheckSum_byte@This:	
  3865                           ; 1 bytes @ 0x0
  3866                           
  3867  0220                     OpenUSART@spbrg:	
  3868                           ; 2 bytes @ 0x0
  3869                           
  3870  0220                     ReadFlash_2Byte@row:	
  3871                           ; 2 bytes @ 0x0
  3872                           
  3873  0220                     ___ftpack@arg:	
  3874                           ; 2 bytes @ 0x0
  3875                           
  3876  0220                     ___ftge@ff1:	
  3877                           ; 3 bytes @ 0x0
  3878                           
  3879  0220                     delayUS@US:	
  3880                           ; 3 bytes @ 0x0
  3881                           
  3882  0220                     ___lldiv@divisor:	
  3883                           ; 4 bytes @ 0x0
  3884                           
  3885                           
  3886                           ; 4 bytes @ 0x0
  3887  0220                     	ds	1
  3888  0221                     ReadUSART@data:	
  3889  0221                     PS_2_DISABLE_INTERRUPT@DATA_CLK:	
  3890                           ; 1 bytes @ 0x1
  3891                           
  3892                           
  3893                           ; 1 bytes @ 0x1
  3894  0221                     	ds	1
  3895  0222                     ??_OpenUSART:	
  3896  0222                     CheckSum_byte@Odd_Even:	
  3897                           ; 0 bytes @ 0x2
  3898                           
  3899  0222                     OpenUSART@config:	
  3900                           ; 1 bytes @ 0x2
  3901                           
  3902  0222                     ReadFlash_2Byte@column:	
  3903                           ; 1 bytes @ 0x2
  3904                           
  3905  0222                     Timer2Init@time:	
  3906                           ; 1 bytes @ 0x2
  3907                           
  3908                           
  3909                           ; 1 bytes @ 0x2
  3910  0222                     	ds	1
  3911  0223                     ??_CheckSum_byte:	
  3912  0223                     ??_ReadFlash_2Byte:	
  3913                           ; 0 bytes @ 0x3
  3914                           
  3915  0223                     Timer2Init@postscaler:	
  3916                           ; 0 bytes @ 0x3
  3917                           
  3918  0223                     ___ftpack@exp:	
  3919                           ; 1 bytes @ 0x3
  3920                           
  3921  0223                     ___ftge@ff2:	
  3922                           ; 1 bytes @ 0x3
  3923                           
  3924                           
  3925                           ; 3 bytes @ 0x3
  3926  0223                     	ds	1
  3927  0224                     ??_delayUS:	
  3928  0224                     Timer2Init@prescaler:	
  3929                           ; 0 bytes @ 0x4
  3930                           
  3931  0224                     ___ftpack@sign:	
  3932                           ; 1 bytes @ 0x4
  3933                           
  3934  0224                     CheckSum_byte@ThisTemp:	
  3935                           ; 1 bytes @ 0x4
  3936                           
  3937  0224                     ___lldiv@dividend:	
  3938                           ; 2 bytes @ 0x4
  3939                           
  3940                           
  3941                           ; 4 bytes @ 0x4
  3942  0224                     	ds	1
  3943  0225                     ??___ftpack:	
  3944  0225                     ?_ReadFlash_4Byte:	
  3945                           ; 0 bytes @ 0x5
  3946                           
  3947  0225                     ReadFlash_4Byte@row:	
  3948                           ; 4 bytes @ 0x5
  3949                           
  3950  0225                     delayUS@i:	
  3951                           ; 2 bytes @ 0x5
  3952                           
  3953                           
  3954                           ; 4 bytes @ 0x5
  3955  0225                     	ds	1
  3956  0226                     ??___ftge:	
  3957  0226                     CheckSum_byte@Parity:	
  3958                           ; 0 bytes @ 0x6
  3959                           
  3960                           
  3961                           ; 1 bytes @ 0x6
  3962  0226                     	ds	1
  3963  0227                     CheckSum_byte@i:	
  3964  0227                     ReadFlash_4Byte@column:	
  3965                           ; 1 bytes @ 0x7
  3966                           
  3967                           
  3968                           ; 1 bytes @ 0x7
  3969  0227                     	ds	1
  3970  0228                     ?_UARTchar:	
  3971  0228                     ??___lldiv:	
  3972                           ; 0 bytes @ 0x8
  3973                           
  3974  0228                     ?___lwtoft:	
  3975                           ; 0 bytes @ 0x8
  3976                           
  3977  0228                     UARTchar@override:	
  3978                           ; 3 bytes @ 0x8
  3979                           
  3980  0228                     ___lwtoft@c:	
  3981                           ; 1 bytes @ 0x8
  3982                           
  3983                           
  3984                           ; 2 bytes @ 0x8
  3985  0228                     	ds	1
  3986  0229                     ??_ReadFlash_4Byte:	
  3987  0229                     delayUS@j:	
  3988                           ; 0 bytes @ 0x9
  3989                           
  3990  0229                     UARTchar@NinethBit_override_data:	
  3991                           ; 1 bytes @ 0x9
  3992                           
  3993  0229                     ___lldiv@quotient:	
  3994                           ; 1 bytes @ 0x9
  3995                           
  3996                           
  3997                           ; 4 bytes @ 0x9
  3998  0229                     	ds	1
  3999  022A                     ??_UARTchar:	
  4000  022A                     ??_Send_PS2:	
  4001                           ; 0 bytes @ 0xA
  4002                           
  4003  022A                     ?_InternalADC_Read:	
  4004                           ; 0 bytes @ 0xA
  4005                           
  4006                           
  4007                           ; 2 bytes @ 0xA
  4008  022A                     	ds	1
  4009  022B                     ??___lwtoft:	
  4010                           
  4011                           ; 0 bytes @ 0xB
  4012  022B                     	ds	1
  4013  022C                     ??_InternalADC_Read:	
  4014  022C                     ?___ftdiv:	
  4015                           ; 0 bytes @ 0xC
  4016                           
  4017  022C                     ___ftdiv@f2:	
  4018                           ; 3 bytes @ 0xC
  4019                           
  4020                           
  4021                           ; 3 bytes @ 0xC
  4022  022C                     	ds	1
  4023  022D                     ___lldiv@counter:	
  4024                           
  4025                           ; 1 bytes @ 0xD
  4026  022D                     	ds	1
  4027  022E                     ?_InitUART:	
  4028  022E                     UARTchar@data:	
  4029                           ; 0 bytes @ 0xE
  4030                           
  4031  022E                     Send_PS2@oddparity:	
  4032                           ; 1 bytes @ 0xE
  4033                           
  4034  022E                     InternalADC_Read@channel:	
  4035                           ; 1 bytes @ 0xE
  4036                           
  4037  022E                     InitUART@Baud:	
  4038                           ; 1 bytes @ 0xE
  4039                           
  4040  022E                     ReadFlash_4Byte@temp:	
  4041                           ; 4 bytes @ 0xE
  4042                           
  4043                           
  4044                           ; 4 bytes @ 0xE
  4045  022E                     	ds	1
  4046  022F                     ?_UARTstringWAIT:	
  4047  022F                     Send_PS2@command:	
  4048                           ; 0 bytes @ 0xF
  4049                           
  4050  022F                     UARTstringWAIT@data:	
  4051                           ; 1 bytes @ 0xF
  4052                           
  4053  022F                     ___ftdiv@f1:	
  4054                           ; 2 bytes @ 0xF
  4055                           
  4056                           
  4057                           ; 3 bytes @ 0xF
  4058  022F                     	ds	1
  4059  0230                     Send_PS2@i:	
  4060                           
  4061                           ; 1 bytes @ 0x10
  4062  0230                     	ds	1
  4063  0231                     ??_UARTstringWAIT:	
  4064  0231                     Send_PS2@timeout:	
  4065                           ; 0 bytes @ 0x11
  4066                           
  4067                           
  4068                           ; 2 bytes @ 0x11
  4069  0231                     	ds	1
  4070  0232                     ??___ftdiv:	
  4071  0232                     ?_ReadBaud:	
  4072                           ; 0 bytes @ 0x12
  4073                           
  4074  0232                     InitUART@parity:	
  4075                           ; 4 bytes @ 0x12
  4076                           
  4077  0232                     ReadBaud@row:	
  4078                           ; 1 bytes @ 0x12
  4079                           
  4080                           
  4081                           ; 2 bytes @ 0x12
  4082  0232                     	ds	1
  4083  0233                     ??_PS_2_INIT:	
  4084  0233                     ??_InitUART:	
  4085                           ; 0 bytes @ 0x13
  4086                           
  4087  0233                     ??_Init_PS_2_Send:	
  4088                           ; 0 bytes @ 0x13
  4089                           
  4090                           
  4091                           ; 0 bytes @ 0x13
  4092  0233                     	ds	1
  4093  0234                     ReadBaud@column:	
  4094                           
  4095                           ; 1 bytes @ 0x14
  4096  0234                     	ds	2
  4097  0236                     ??_ReadBaud:	
  4098  0236                     ___ftdiv@cntr:	
  4099                           ; 0 bytes @ 0x16
  4100                           
  4101                           
  4102                           ; 1 bytes @ 0x16
  4103  0236                     	ds	1
  4104  0237                     ___ftdiv@f3:	
  4105                           
  4106                           ; 3 bytes @ 0x17
  4107  0237                     	ds	3
  4108  023A                     ___ftdiv@exp:	
  4109                           
  4110                           ; 1 bytes @ 0x1A
  4111  023A                     	ds	1
  4112  023B                     ___ftdiv@sign:	
  4113  023B                     InitUART@spbrg:	
  4114                           ; 1 bytes @ 0x1B
  4115                           
  4116                           
  4117                           ; 2 bytes @ 0x1B
  4118  023B                     	ds	1
  4119  023C                     ?___ftmul:	
  4120  023C                     ___ftmul@f1:	
  4121                           ; 3 bytes @ 0x1C
  4122                           
  4123                           
  4124                           ; 3 bytes @ 0x1C
  4125  023C                     	ds	1
  4126  023D                     InitUART@baudconfig:	
  4127                           
  4128                           ; 1 bytes @ 0x1D
  4129  023D                     	ds	1
  4130  023E                     InitUART@config:	
  4131  023E                     ReadBaud@temp:	
  4132                           ; 1 bytes @ 0x1E
  4133                           
  4134                           
  4135                           ; 4 bytes @ 0x1E
  4136  023E                     	ds	1
  4137  023F                     ___ftmul@f2:	
  4138  023F                     InitUART@temp:	
  4139                           ; 3 bytes @ 0x1F
  4140                           
  4141                           
  4142                           ; 4 bytes @ 0x1F
  4143  023F                     	ds	3
  4144  0242                     ??___ftmul:	
  4145                           
  4146                           ; 0 bytes @ 0x22
  4147  0242                     	ds	1
  4148  0243                     ??_Init_System:	
  4149                           
  4150                           ; 0 bytes @ 0x23
  4151  0243                     	ds	3
  4152  0246                     ___ftmul@exp:	
  4153                           
  4154                           ; 1 bytes @ 0x26
  4155  0246                     	ds	1
  4156  0247                     ___ftmul@f3_as_product:	
  4157                           
  4158                           ; 3 bytes @ 0x27
  4159  0247                     	ds	1
  4160  0248                     Init_System@temp:	
  4161                           
  4162                           ; 4 bytes @ 0x28
  4163  0248                     	ds	2
  4164  024A                     ___ftmul@cntr:	
  4165                           
  4166                           ; 1 bytes @ 0x2A
  4167  024A                     	ds	1
  4168  024B                     ___ftmul@sign:	
  4169                           
  4170                           ; 1 bytes @ 0x2B
  4171  024B                     	ds	1
  4172  024C                     ?_ReadVoltage:	
  4173  024C                     Init_System@Baud:	
  4174                           ; 3 bytes @ 0x2C
  4175                           
  4176                           
  4177                           ; 4 bytes @ 0x2C
  4178  024C                     	ds	3
  4179  024F                     ??_ReadVoltage:	
  4180                           
  4181                           ; 0 bytes @ 0x2F
  4182  024F                     	ds	1
  4183  0250                     Init_System@Parity:	
  4184  0250                     ReadVoltage@voltage:	
  4185                           ; 1 bytes @ 0x30
  4186                           
  4187                           
  4188                           ; 3 bytes @ 0x30
  4189  0250                     	ds	3
  4190  0253                     ReadVoltage@temp:	
  4191                           
  4192                           ; 2 bytes @ 0x33
  4193  0253                     	ds	2
  4194  0255                     ??_main:	
  4195                           
  4196                           ; 0 bytes @ 0x35
  4197  0255                     	ds	1
  4198  0256                     main@i:	
  4199                           
  4200                           ; 1 bytes @ 0x36
  4201  0256                     	ds	1
  4202                           
  4203                           	psect	cstackBANK3
  4204  01A0                     __pcstackBANK3:	
  4205  01A0                     Process_PS2_ScanCode@buf:	
  4206                           
  4207                           ; 60 bytes @ 0x0
  4208  01A0                     	ds	60
  4209  01DC                     _Process_PS2_ScanCode$851:	
  4210                           
  4211                           ; 1 bytes @ 0x3C
  4212  01DC                     	ds	1
  4213  01DD                     _Process_PS2_ScanCode$852:	
  4214                           
  4215                           ; 1 bytes @ 0x3D
  4216  01DD                     	ds	1
  4217  01DE                     _Process_PS2_ScanCode$853:	
  4218                           
  4219                           ; 1 bytes @ 0x3E
  4220  01DE                     	ds	1
  4221  01DF                     _Process_PS2_ScanCode$854:	
  4222                           
  4223                           ; 1 bytes @ 0x3F
  4224  01DF                     	ds	1
  4225  01E0                     Process_PS2_ScanCode@temp:	
  4226                           
  4227                           ; 1 bytes @ 0x40
  4228  01E0                     	ds	1
  4229                           
  4230                           	psect	cstackBANK2
  4231  0120                     __pcstackBANK2:	
  4232  0120                     SetBaud@buf:	
  4233                           
  4234                           ; 50 bytes @ 0x0
  4235  0120                     	ds	50
  4236  0152                     SetBaud@Baudtemp:	
  4237                           
  4238                           ; 4 bytes @ 0x32
  4239  0152                     	ds	4
  4240  0156                     SetBaud@Paritytemp:	
  4241                           
  4242                           ; 4 bytes @ 0x36
  4243  0156                     	ds	4
  4244  015A                     SetBaud@temp:	
  4245                           
  4246                           ; 4 bytes @ 0x3A
  4247  015A                     	ds	4
  4248  015E                     SetBaud@i:	
  4249                           
  4250                           ; 1 bytes @ 0x3E
  4251  015E                     	ds	1
  4252                           
  4253                           	psect	cstackBANK1
  4254  00A0                     __pcstackBANK1:	
  4255  00A0                     ?_WriteBaud:	
  4256  00A0                     WriteBaud@row:	
  4257                           ; 0 bytes @ 0x0
  4258                           
  4259                           
  4260                           ; 2 bytes @ 0x0
  4261  00A0                     	ds	2
  4262  00A2                     WriteBaud@Baud:	
  4263                           
  4264                           ; 4 bytes @ 0x2
  4265  00A2                     	ds	4
  4266  00A6                     WriteBaud@Parity:	
  4267                           
  4268                           ; 1 bytes @ 0x6
  4269  00A6                     	ds	1
  4270  00A7                     ??_WriteBaud:	
  4271                           
  4272                           ; 0 bytes @ 0x7
  4273  00A7                     	ds	8
  4274  00AF                     ?_SetBaud:	
  4275  00AF                     SetBaud@Baud:	
  4276                           ; 0 bytes @ 0xF
  4277                           
  4278                           
  4279                           ; 4 bytes @ 0xF
  4280  00AF                     	ds	4
  4281  00B3                     SetBaud@Parity:	
  4282                           
  4283                           ; 1 bytes @ 0x13
  4284  00B3                     	ds	1
  4285  00B4                     ??_SetBaud:	
  4286                           
  4287                           ; 0 bytes @ 0x14
  4288  00B4                     	ds	8
  4289  00BC                     ??_Process_PS2_ScanCode:	
  4290                           
  4291                           ; 0 bytes @ 0x1C
  4292  00BC                     	ds	6
  4293  00C2                     isr@Rx_fault:	
  4294                           
  4295                           ; 1 bytes @ 0x22
  4296  00C2                     	ds	1
  4297  00C3                     isr@rx:	
  4298                           
  4299                           ; 1 bytes @ 0x23
  4300  00C3                     	ds	1
  4301  00C4                     isr@ScanTemp:	
  4302                           
  4303                           ; 1 bytes @ 0x24
  4304  00C4                     	ds	1
  4305                           
  4306                           	psect	cstackCOMMON
  4307  0070                     __pcstackCOMMON:	
  4308  0070                     ?_PS_2_DISABLE_INTERRUPT:	
  4309  0070                     ?_Timer2Reset:	
  4310                           ; 0 bytes @ 0x0
  4311                           
  4312  0070                     ??_Timer2Reset:	
  4313                           ; 0 bytes @ 0x0
  4314                           
  4315  0070                     ?_Timer2ON:	
  4316                           ; 0 bytes @ 0x0
  4317                           
  4318  0070                     ?_PS_2_ENABLE_INTERRUPT:	
  4319                           ; 0 bytes @ 0x0
  4320                           
  4321  0070                     ??_READ_CONFIG_PIN:	
  4322                           ; 0 bytes @ 0x0
  4323                           
  4324  0070                     ?_Timer2OFF:	
  4325                           ; 0 bytes @ 0x0
  4326                           
  4327  0070                     ??_Timer2OFF:	
  4328                           ; 0 bytes @ 0x0
  4329                           
  4330  0070                     ?_ResendLast:	
  4331                           ; 0 bytes @ 0x0
  4332                           
  4333  0070                     ?_Process_PS2_ScanCode:	
  4334                           ; 0 bytes @ 0x0
  4335                           
  4336  0070                     ?_ConfigureOscillator:	
  4337                           ; 0 bytes @ 0x0
  4338                           
  4339  0070                     ?_InitApp:	
  4340                           ; 0 bytes @ 0x0
  4341                           
  4342  0070                     ?_Init_System:	
  4343                           ; 0 bytes @ 0x0
  4344                           
  4345  0070                     ?_PS_2_INIT:	
  4346                           ; 0 bytes @ 0x0
  4347                           
  4348  0070                     ?_baudUSART:	
  4349                           ; 0 bytes @ 0x0
  4350                           
  4351  0070                     ?_Clock_TRIS:	
  4352                           ; 0 bytes @ 0x0
  4353                           
  4354  0070                     ?_Data_TRIS:	
  4355                           ; 0 bytes @ 0x0
  4356                           
  4357  0070                     ?_Timer2Init:	
  4358                           ; 0 bytes @ 0x0
  4359                           
  4360  0070                     ??_Decode_Scan_Code_FunctionE0:	
  4361                           ; 0 bytes @ 0x0
  4362                           
  4363  0070                     ??_Decode_Scan_Code_Shift:	
  4364                           ; 0 bytes @ 0x0
  4365                           
  4366  0070                     ??_Decode_Scan_Code:	
  4367                           ; 0 bytes @ 0x0
  4368                           
  4369  0070                     ??_Decode_Scan_Code_Function:	
  4370                           ; 0 bytes @ 0x0
  4371                           
  4372  0070                     ?_DisableInternalADC:	
  4373                           ; 0 bytes @ 0x0
  4374                           
  4375  0070                     ?_isr:	
  4376                           ; 0 bytes @ 0x0
  4377                           
  4378  0070                     ?_main:	
  4379                           ; 0 bytes @ 0x0
  4380                           
  4381  0070                     ??_Reverse_Byte:	
  4382                           ; 0 bytes @ 0x0
  4383                           
  4384  0070                     ??_ISNUMBER:	
  4385                           ; 0 bytes @ 0x0
  4386                           
  4387  0070                     ?_cleanBuffer:	
  4388                           ; 0 bytes @ 0x0
  4389                           
  4390  0070                     ?_CloseUSART:	
  4391                           ; 0 bytes @ 0x0
  4392                           
  4393  0070                     ?_UART_send_break:	
  4394                           ; 0 bytes @ 0x0
  4395                           
  4396  0070                     ??_UART_send_break:	
  4397                           ; 0 bytes @ 0x0
  4398                           
  4399  0070                     ?_UNLOCK:	
  4400                           ; 0 bytes @ 0x0
  4401                           
  4402  0070                     ??_UNLOCK:	
  4403                           ; 0 bytes @ 0x0
  4404                           
  4405  0070                     ?_BlockErase:	
  4406                           ; 0 bytes @ 0x0
  4407                           
  4408  0070                     ?i1_delayUS:	
  4409                           ; 0 bytes @ 0x0
  4410                           
  4411  0070                     ?i1_CloseUSART:	
  4412                           ; 0 bytes @ 0x0
  4413                           
  4414  0070                     ??i1_CloseUSART:	
  4415                           ; 0 bytes @ 0x0
  4416                           
  4417  0070                     ?i1_baudUSART:	
  4418                           ; 0 bytes @ 0x0
  4419                           
  4420  0070                     ??i1_baudUSART:	
  4421                           ; 0 bytes @ 0x0
  4422                           
  4423  0070                     ?i1_OpenUSART:	
  4424                           ; 0 bytes @ 0x0
  4425                           
  4426  0070                     ??i1_ReadUSART:	
  4427                           ; 0 bytes @ 0x0
  4428                           
  4429  0070                     ?i1_Clock_TRIS:	
  4430                           ; 0 bytes @ 0x0
  4431                           
  4432  0070                     ??i1_Clock_TRIS:	
  4433                           ; 0 bytes @ 0x0
  4434                           
  4435  0070                     ?i1_Data_TRIS:	
  4436                           ; 0 bytes @ 0x0
  4437                           
  4438  0070                     ??i1_Data_TRIS:	
  4439                           ; 0 bytes @ 0x0
  4440                           
  4441  0070                     ?i1_PS_2_DISABLE_INTERRUPT:	
  4442                           ; 0 bytes @ 0x0
  4443                           
  4444  0070                     ??i1_PS_2_DISABLE_INTERRUPT:	
  4445                           ; 0 bytes @ 0x0
  4446                           
  4447  0070                     ?i1_PS_2_ENABLE_INTERRUPT:	
  4448                           ; 0 bytes @ 0x0
  4449                           
  4450  0070                     ??i1_PS_2_ENABLE_INTERRUPT:	
  4451                           ; 0 bytes @ 0x0
  4452                           
  4453  0070                     ??i1_READ_PS_2_PIN:	
  4454                           ; 0 bytes @ 0x0
  4455                           
  4456  0070                     ?i1_Timer2ON:	
  4457                           ; 0 bytes @ 0x0
  4458                           
  4459  0070                     ??i1_Timer2ON:	
  4460                           ; 0 bytes @ 0x0
  4461                           
  4462  0070                     ?_READ_PS_2_PIN:	
  4463                           ; 0 bytes @ 0x0
  4464                           
  4465  0070                     ?_ReadUSART:	
  4466                           ; 1 bytes @ 0x0
  4467                           
  4468  0070                     ?_READ_CONFIG_PIN:	
  4469                           ; 1 bytes @ 0x0
  4470                           
  4471  0070                     ?_Init_PS_2_Send:	
  4472                           ; 1 bytes @ 0x0
  4473                           
  4474  0070                     ?_Send_PS2:	
  4475                           ; 1 bytes @ 0x0
  4476                           
  4477  0070                     ?_Decode_Scan_Code_FunctionE0:	
  4478                           ; 1 bytes @ 0x0
  4479                           
  4480  0070                     ?_Decode_Scan_Code_Shift:	
  4481                           ; 1 bytes @ 0x0
  4482                           
  4483  0070                     ?_Decode_Scan_Code:	
  4484                           ; 1 bytes @ 0x0
  4485                           
  4486  0070                     ?_Decode_Scan_Code_Function:	
  4487                           ; 1 bytes @ 0x0
  4488                           
  4489  0070                     ?_Reverse_Byte:	
  4490                           ; 1 bytes @ 0x0
  4491                           
  4492  0070                     ?_ISNUMBER:	
  4493                           ; 1 bytes @ 0x0
  4494                           
  4495  0070                     ?_BufferShiftBack:	
  4496                           ; 1 bytes @ 0x0
  4497                           
  4498  0070                     ?i1_CheckSum_byte:	
  4499                           ; 1 bytes @ 0x0
  4500                           
  4501  0070                     ?i1_ReadUSART:	
  4502                           ; 1 bytes @ 0x0
  4503                           
  4504  0070                     ?i1_READ_PS_2_PIN:	
  4505                           ; 1 bytes @ 0x0
  4506                           
  4507  0070                     ?i1_Send_PS2:	
  4508                           ; 1 bytes @ 0x0
  4509                           
  4510  0070                     ?i1_ReadFlash_2Byte:	
  4511                           ; 1 bytes @ 0x0
  4512                           
  4513  0070                     ?___lmul:	
  4514                           ; 2 bytes @ 0x0
  4515                           
  4516  0070                     ?i1___lldiv:	
  4517                           ; 4 bytes @ 0x0
  4518                           
  4519  0070                     ISNUMBER@ascii:	
  4520                           ; 4 bytes @ 0x0
  4521                           
  4522  0070                     BufferShiftBack@shift:	
  4523                           ; 1 bytes @ 0x0
  4524                           
  4525  0070                     Decode_Scan_Code@Code:	
  4526                           ; 1 bytes @ 0x0
  4527                           
  4528  0070                     Decode_Scan_Code_Shift@Code:	
  4529                           ; 1 bytes @ 0x0
  4530                           
  4531  0070                     Decode_Scan_Code_FunctionE0@Code:	
  4532                           ; 1 bytes @ 0x0
  4533                           
  4534  0070                     Decode_Scan_Code_Function@Code:	
  4535                           ; 1 bytes @ 0x0
  4536                           
  4537  0070                     i1baudUSART@baudconfig:	
  4538                           ; 1 bytes @ 0x0
  4539                           
  4540  0070                     i1Clock_TRIS@direction:	
  4541                           ; 1 bytes @ 0x0
  4542                           
  4543  0070                     i1Data_TRIS@direction:	
  4544                           ; 1 bytes @ 0x0
  4545                           
  4546  0070                     i1PS_2_ENABLE_INTERRUPT@DATA_CLK:	
  4547                           ; 1 bytes @ 0x0
  4548                           
  4549  0070                     i1READ_PS_2_PIN@DATA_CLK:	
  4550                           ; 1 bytes @ 0x0
  4551                           
  4552  0070                     cleanBuffer@count:	
  4553                           ; 1 bytes @ 0x0
  4554                           
  4555  0070                     BlockErase@row:	
  4556                           ; 2 bytes @ 0x0
  4557                           
  4558  0070                     i1CheckSum_byte@This:	
  4559                           ; 2 bytes @ 0x0
  4560                           
  4561  0070                     i1OpenUSART@spbrg:	
  4562                           ; 2 bytes @ 0x0
  4563                           
  4564  0070                     i1ReadFlash_2Byte@row:	
  4565                           ; 2 bytes @ 0x0
  4566                           
  4567  0070                     ___lmul@multiplier:	
  4568                           ; 2 bytes @ 0x0
  4569                           
  4570  0070                     i1delayUS@US:	
  4571                           ; 4 bytes @ 0x0
  4572                           
  4573  0070                     i1___lldiv@divisor:	
  4574                           ; 4 bytes @ 0x0
  4575                           
  4576                           
  4577                           ; 4 bytes @ 0x0
  4578  0070                     	ds	1
  4579  0071                     BufferShiftBack@size:	
  4580  0071                     i1ReadUSART@data:	
  4581                           ; 1 bytes @ 0x1
  4582                           
  4583  0071                     i1PS_2_DISABLE_INTERRUPT@DATA_CLK:	
  4584                           ; 1 bytes @ 0x1
  4585                           
  4586                           
  4587                           ; 1 bytes @ 0x1
  4588  0071                     	ds	1
  4589  0072                     ??_cleanBuffer:	
  4590  0072                     ??_BufferShiftBack:	
  4591                           ; 0 bytes @ 0x2
  4592                           
  4593  0072                     ??_BlockErase:	
  4594                           ; 0 bytes @ 0x2
  4595                           
  4596  0072                     ??i1_OpenUSART:	
  4597                           ; 0 bytes @ 0x2
  4598                           
  4599  0072                     Reverse_Byte@temp:	
  4600                           ; 0 bytes @ 0x2
  4601                           
  4602  0072                     i1CheckSum_byte@Odd_Even:	
  4603                           ; 1 bytes @ 0x2
  4604                           
  4605  0072                     i1OpenUSART@config:	
  4606                           ; 1 bytes @ 0x2
  4607                           
  4608  0072                     i1ReadFlash_2Byte@column:	
  4609                           ; 1 bytes @ 0x2
  4610                           
  4611                           
  4612                           ; 1 bytes @ 0x2
  4613  0072                     	ds	1
  4614  0073                     ??i1_CheckSum_byte:	
  4615  0073                     ??i1_ReadFlash_2Byte:	
  4616                           ; 0 bytes @ 0x3
  4617                           
  4618  0073                     Reverse_Byte@This:	
  4619                           ; 0 bytes @ 0x3
  4620                           
  4621  0073                     cleanBuffer@data:	
  4622                           ; 1 bytes @ 0x3
  4623                           
  4624                           
  4625                           ; 1 bytes @ 0x3
  4626  0073                     	ds	1
  4627  0074                     ??i1_delayUS:	
  4628  0074                     cleanBuffer@i:	
  4629                           ; 0 bytes @ 0x4
  4630                           
  4631  0074                     i1CheckSum_byte@ThisTemp:	
  4632                           ; 1 bytes @ 0x4
  4633                           
  4634  0074                     ___lmul@multiplicand:	
  4635                           ; 2 bytes @ 0x4
  4636                           
  4637  0074                     i1___lldiv@dividend:	
  4638                           ; 4 bytes @ 0x4
  4639                           
  4640                           
  4641                           ; 4 bytes @ 0x4
  4642  0074                     	ds	1
  4643  0075                     ?i1_ReadFlash_4Byte:	
  4644  0075                     i1ReadFlash_4Byte@row:	
  4645                           ; 4 bytes @ 0x5
  4646                           
  4647  0075                     i1delayUS@i:	
  4648                           ; 2 bytes @ 0x5
  4649                           
  4650                           
  4651                           ; 4 bytes @ 0x5
  4652  0075                     	ds	1
  4653  0076                     BufferShiftBack@i:	
  4654  0076                     i1CheckSum_byte@Parity:	
  4655                           ; 1 bytes @ 0x6
  4656                           
  4657                           
  4658                           ; 1 bytes @ 0x6
  4659  0076                     	ds	1
  4660  0077                     BufferShiftBack@buffer:	
  4661  0077                     i1CheckSum_byte@i:	
  4662                           ; 1 bytes @ 0x7
  4663                           
  4664  0077                     i1ReadFlash_4Byte@column:	
  4665                           ; 1 bytes @ 0x7
  4666                           
  4667                           
  4668                           ; 1 bytes @ 0x7
  4669  0077                     	ds	1
  4670  0078                     ??___lmul:	
  4671  0078                     ?i1_UARTchar:	
  4672                           ; 0 bytes @ 0x8
  4673                           
  4674  0078                     ??i1___lldiv:	
  4675                           ; 0 bytes @ 0x8
  4676                           
  4677  0078                     ?_PS2RawToScan:	
  4678                           ; 0 bytes @ 0x8
  4679                           
  4680  0078                     i1UARTchar@override:	
  4681                           ; 2 bytes @ 0x8
  4682                           
  4683  0078                     PS2RawToScan@Raw:	
  4684                           ; 1 bytes @ 0x8
  4685                           
  4686  0078                     ___lmul@product:	
  4687                           ; 2 bytes @ 0x8
  4688                           
  4689                           
  4690                           ; 4 bytes @ 0x8
  4691  0078                     	ds	1
  4692  0079                     ??i1_ReadFlash_4Byte:	
  4693  0079                     i1delayUS@j:	
  4694                           ; 0 bytes @ 0x9
  4695                           
  4696  0079                     i1UARTchar@NinethBit_override_data:	
  4697                           ; 1 bytes @ 0x9
  4698                           
  4699  0079                     i1___lldiv@quotient:	
  4700                           ; 1 bytes @ 0x9
  4701                           
  4702                           
  4703                           ; 4 bytes @ 0x9
  4704  0079                     	ds	1
  4705  007A                     ?_UART_send_break_timed:	
  4706  007A                     ?_WriteFlash_Sequential:	
  4707                           ; 0 bytes @ 0xA
  4708                           
  4709  007A                     ??i1_UARTchar:	
  4710                           ; 0 bytes @ 0xA
  4711                           
  4712  007A                     ??i1_Send_PS2:	
  4713                           ; 0 bytes @ 0xA
  4714                           
  4715  007A                     UART_send_break_timed@US:	
  4716                           ; 0 bytes @ 0xA
  4717                           
  4718  007A                     PS2RawToScan@temp:	
  4719                           ; 2 bytes @ 0xA
  4720                           
  4721  007A                     WriteFlash_Sequential@row:	
  4722                           ; 2 bytes @ 0xA
  4723                           
  4724                           
  4725                           ; 2 bytes @ 0xA
  4726  007A                     	ds	2
  4727  007C                     ??_UART_send_break_timed:	
  4728  007C                     WriteFlash_Sequential@buffer:	
  4729                           ; 0 bytes @ 0xC
  4730                           
  4731                           
  4732                           ; 1 bytes @ 0xC
  4733  007C                     	ds	1
  4734  007D                     WriteFlash_Sequential@amount:	
  4735  007D                     i1___lldiv@counter:	
  4736                           ; 1 bytes @ 0xD
  4737                           
  4738                           
  4739                           ; 1 bytes @ 0xD
  4740  007D                     	ds	1
  4741  007E                     ??_ResendLast:	
  4742                           
  4743                           	psect	cstackBANK0
  4744  0020                     __pcstackBANK0:	
  4745                           ; 0 bytes @ 0xE
  4746                           
  4747  0020                     ??_PS2RawToScan:	
  4748  0020                     ??_WriteFlash_Sequential:	
  4749                           ; 0 bytes @ 0x0
  4750                           
  4751  0020                     ?i1_InitUART:	
  4752                           ; 0 bytes @ 0x0
  4753                           
  4754  0020                     ?___llmod:	
  4755                           ; 0 bytes @ 0x0
  4756                           
  4757  0020                     i1UARTchar@data:	
  4758                           ; 4 bytes @ 0x0
  4759                           
  4760  0020                     i1Send_PS2@oddparity:	
  4761                           ; 1 bytes @ 0x0
  4762                           
  4763  0020                     ___llmod@divisor:	
  4764                           ; 1 bytes @ 0x0
  4765                           
  4766  0020                     i1InitUART@Baud:	
  4767                           ; 4 bytes @ 0x0
  4768                           
  4769  0020                     i1ReadFlash_4Byte@temp:	
  4770                           ; 4 bytes @ 0x0
  4771                           
  4772                           
  4773                           ; 4 bytes @ 0x0
  4774  0020                     	ds	1
  4775  0021                     ?i1_UARTstringWAIT:	
  4776  0021                     i1Send_PS2@command:	
  4777                           ; 0 bytes @ 0x1
  4778                           
  4779  0021                     i1UARTstringWAIT@data:	
  4780                           ; 1 bytes @ 0x1
  4781                           
  4782                           
  4783                           ; 2 bytes @ 0x1
  4784  0021                     	ds	1
  4785  0022                     i1Send_PS2@i:	
  4786                           
  4787                           ; 1 bytes @ 0x2
  4788  0022                     	ds	1
  4789  0023                     ??i1_UARTstringWAIT:	
  4790  0023                     i1Send_PS2@timeout:	
  4791                           ; 0 bytes @ 0x3
  4792                           
  4793  0023                     WriteFlash_Sequential@TempBufH:	
  4794                           ; 2 bytes @ 0x3
  4795                           
  4796                           
  4797                           ; 32 bytes @ 0x3
  4798  0023                     	ds	1
  4799  0024                     ?i1_ReadBaud:	
  4800  0024                     i1InitUART@parity:	
  4801                           ; 4 bytes @ 0x4
  4802                           
  4803  0024                     i1ReadBaud@row:	
  4804                           ; 1 bytes @ 0x4
  4805                           
  4806  0024                     ___llmod@dividend:	
  4807                           ; 2 bytes @ 0x4
  4808                           
  4809                           
  4810                           ; 4 bytes @ 0x4
  4811  0024                     	ds	1
  4812  0025                     ??i1_InitUART:	
  4813                           
  4814                           ; 0 bytes @ 0x5
  4815  0025                     	ds	1
  4816  0026                     i1ReadBaud@column:	
  4817                           
  4818                           ; 1 bytes @ 0x6
  4819  0026                     	ds	2
  4820  0028                     ??___llmod:	
  4821  0028                     ??i1_ReadBaud:	
  4822                           ; 0 bytes @ 0x8
  4823                           
  4824                           
  4825                           ; 0 bytes @ 0x8
  4826  0028                     	ds	1
  4827  0029                     ___llmod@counter:	
  4828                           
  4829                           ; 1 bytes @ 0x9
  4830  0029                     	ds	1
  4831  002A                     ?_sprintf:	
  4832  002A                     sprintf@f:	
  4833                           ; 2 bytes @ 0xA
  4834                           
  4835                           
  4836                           ; 2 bytes @ 0xA
  4837  002A                     	ds	3
  4838  002D                     i1InitUART@spbrg:	
  4839                           
  4840                           ; 2 bytes @ 0xD
  4841  002D                     	ds	2
  4842  002F                     i1InitUART@baudconfig:	
  4843                           
  4844                           ; 1 bytes @ 0xF
  4845  002F                     	ds	1
  4846  0030                     ??_sprintf:	
  4847  0030                     i1InitUART@config:	
  4848                           ; 0 bytes @ 0x10
  4849                           
  4850  0030                     i1ReadBaud@temp:	
  4851                           ; 1 bytes @ 0x10
  4852                           
  4853                           
  4854                           ; 4 bytes @ 0x10
  4855  0030                     	ds	1
  4856  0031                     i1InitUART@temp:	
  4857                           
  4858                           ; 4 bytes @ 0x11
  4859  0031                     	ds	5
  4860  0036                     sprintf@flag:	
  4861                           
  4862                           ; 1 bytes @ 0x16
  4863  0036                     	ds	1
  4864  0037                     sprintf@prec:	
  4865                           
  4866                           ; 2 bytes @ 0x17
  4867  0037                     	ds	2
  4868  0039                     sprintf@_val:	
  4869                           
  4870                           ; 4 bytes @ 0x19
  4871  0039                     	ds	4
  4872  003D                     sprintf@ap:	
  4873                           
  4874                           ; 1 bytes @ 0x1D
  4875  003D                     	ds	1
  4876  003E                     sprintf@sp:	
  4877                           
  4878                           ; 1 bytes @ 0x1E
  4879  003E                     	ds	1
  4880  003F                     sprintf@c:	
  4881                           
  4882                           ; 1 bytes @ 0x1F
  4883  003F                     	ds	4
  4884  0043                     WriteFlash_Sequential@TempBufL:	
  4885                           
  4886                           ; 32 bytes @ 0x23
  4887  0043                     	ds	32
  4888  0063                     WriteFlash_Sequential@tempH:	
  4889                           
  4890                           ; 1 bytes @ 0x43
  4891  0063                     	ds	1
  4892  0064                     WriteFlash_Sequential@tempL:	
  4893                           
  4894                           ; 1 bytes @ 0x44
  4895  0064                     	ds	1
  4896  0065                     WriteFlash_Sequential@amountTemp:	
  4897                           
  4898                           ; 1 bytes @ 0x45
  4899  0065                     	ds	1
  4900  0066                     WriteFlash_Sequential@temp:	
  4901                           
  4902                           ; 2 bytes @ 0x46
  4903  0066                     	ds	2
  4904  0068                     WriteFlash_Sequential@spaces:	
  4905                           
  4906                           ; 1 bytes @ 0x48
  4907  0068                     	ds	1
  4908  0069                     WriteFlash_Sequential@i:	
  4909                           
  4910                           ; 1 bytes @ 0x49
  4911  0069                     	ds	1
  4912  006A                     WriteBaud@temp:	
  4913                           
  4914                           ; 4 bytes @ 0x4A
  4915  006A                     	ds	4
  4916  006E                     ??_isr:	
  4917                           
  4918                           ; 0 bytes @ 0x4E
  4919  006E                     	ds	2
  4920                           
  4921                           	psect	maintext
  4922  1611                     __pmaintext:	
  4923 ;;
  4924 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  4925 ;;
  4926 ;; *************** function _main *****************
  4927 ;; Defined at:
  4928 ;;		line 109 in file "main.c"
  4929 ;; Parameters:    Size  Location     Type
  4930 ;;		None
  4931 ;; Auto vars:     Size  Location     Type
  4932 ;;  i               1   54[BANK4 ] unsigned char 
  4933 ;; Return value:  Size  Location     Type
  4934 ;;		None               void
  4935 ;; Registers used:
  4936 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4937 ;; Tracked objects:
  4938 ;;		On entry : 17F/0
  4939 ;;		On exit  : 0/0
  4940 ;;		Unchanged: 0/0
  4941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4943 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  4944 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  4945 ;;      Totals:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  4946 ;;Total ram usage:        2 bytes
  4947 ;; Hardware stack levels required when called:   11
  4948 ;; This function calls:
  4949 ;;		_ConfigureOscillator
  4950 ;;		_InitApp
  4951 ;;		_Init_System
  4952 ;;		_PS_2_ENABLE_INTERRUPT
  4953 ;;		_PS_2_INIT
  4954 ;;		_ReadVoltage
  4955 ;;		_UARTstringWAIT
  4956 ;;		___ftge
  4957 ;;		_delayUS
  4958 ;; This function is called by:
  4959 ;;		Startup code after reset
  4960 ;; This function uses a non-reentrant model
  4961 ;;
  4962                           
  4963                           
  4964                           ;psect for function _main
  4965  1611                     _main:	
  4966                           
  4967                           ;main.c: 111: unsigned char i=0;
  4968                           
  4969                           ;incstack = 0
  4970                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4971  1611  0024               	movlb	4	; select bank4
  4972  1612  01D6               	clrf	main@i^(0+512)
  4973                           
  4974                           ;main.c: 113: ConfigureOscillator();
  4975  1613  3199  2140  3196   	fcall	_ConfigureOscillator
  4976                           
  4977                           ;main.c: 114: InitApp();
  4978  1616  3199  218C  3196   	fcall	_InitApp
  4979                           
  4980                           ;main.c: 115: Init_System();
  4981  1619  318A  2248  3196   	fcall	_Init_System
  4982                           
  4983                           ;main.c: 116: PS_2_INIT();
  4984  161C  3198  20DA  3196   	fcall	_PS_2_INIT
  4985                           
  4986                           ;main.c: 119: for(i =0;i<10;i++)
  4987  161F  0024               	movlb	4	; select bank4
  4988  1620  01D6               	clrf	main@i^(0+512)
  4989  1621  300A               	movlw	10
  4990  1622  0256               	subwf	main@i^(0+512),w
  4991  1623  1803               	btfsc	3,0
  4992  1624  2E4E               	goto	l6938
  4993  1625                     l171:	
  4994                           
  4995                           ;main.c: 120: {
  4996                           ;main.c: 121: LATC |= 0b00010000;
  4997  1625  0022               	movlb	2	; select bank2
  4998  1626  160E               	bsf	14,4	;volatile
  4999                           
  5000                           ;main.c: 122: delayUS(10000);
  5001  1627  3000               	movlw	0
  5002  1628  0024               	movlb	4	; select bank4
  5003  1629  00A3               	movwf	(delayUS@US+3)^(0+512)
  5004  162A  3000               	movlw	0
  5005  162B  00A2               	movwf	(delayUS@US+2)^(0+512)
  5006  162C  3027               	movlw	39
  5007  162D  00A1               	movwf	(delayUS@US+1)^(0+512)
  5008  162E  3010               	movlw	16
  5009  162F  00A0               	movwf	delayUS@US^(0+512)
  5010  1630  319B  23DB  3196   	fcall	_delayUS
  5011                           
  5012                           ;main.c: 123: LATC &= ~0b00010000;
  5013  1633  30EF               	movlw	239
  5014  1634  0024               	movlb	4	; select bank4
  5015  1635  00D5               	movwf	??_main^(0+512)
  5016  1636  0855               	movf	??_main^(0+512),w
  5017  1637  0022               	movlb	2	; select bank2
  5018  1638  058E               	andwf	14,f	;volatile
  5019                           
  5020                           ;main.c: 124: delayUS(10000);
  5021  1639  3000               	movlw	0
  5022  163A  0024               	movlb	4	; select bank4
  5023  163B  00A3               	movwf	(delayUS@US+3)^(0+512)
  5024  163C  3000               	movlw	0
  5025  163D  00A2               	movwf	(delayUS@US+2)^(0+512)
  5026  163E  3027               	movlw	39
  5027  163F  00A1               	movwf	(delayUS@US+1)^(0+512)
  5028  1640  3010               	movlw	16
  5029  1641  00A0               	movwf	delayUS@US^(0+512)
  5030  1642  319B  23DB  3196   	fcall	_delayUS
  5031  1645  3001               	movlw	1
  5032  1646  0024               	movlb	4	; select bank4
  5033  1647  00D5               	movwf	??_main^(0+512)
  5034  1648  0855               	movf	??_main^(0+512),w
  5035  1649  07D6               	addwf	main@i^(0+512),f
  5036  164A  300A               	movlw	10
  5037  164B  0256               	subwf	main@i^(0+512),w
  5038  164C  1C03               	skipc
  5039  164D  2E25               	goto	l171
  5040  164E                     l6938:	
  5041                           
  5042                           ;main.c: 125: }
  5043                           ;main.c: 127: BatteryVoltage = ReadVoltage();
  5044  164E  3190  201A  3196   	fcall	_ReadVoltage
  5045  1651  0024               	movlb	4	; select bank4
  5046  1652  084C               	movf	?_ReadVoltage^(0+512),w
  5047  1653  00D7               	movwf	_BatteryVoltage^(0+512)
  5048  1654  084D               	movf	(?_ReadVoltage+1)^(0+512),w
  5049  1655  00D8               	movwf	(_BatteryVoltage+1)^(0+512)
  5050  1656  084E               	movf	(?_ReadVoltage+2)^(0+512),w
  5051  1657  00D9               	movwf	(_BatteryVoltage+2)^(0+512)
  5052                           
  5053                           ;main.c: 128: if(BatteryVoltage < 6.55 )
  5054  1658  0857               	movf	_BatteryVoltage^(0+512),w
  5055  1659  00A0               	movwf	___ftge@ff1^(0+512)
  5056  165A  0858               	movf	(_BatteryVoltage+1)^(0+512),w
  5057  165B  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5058  165C  0859               	movf	(_BatteryVoltage+2)^(0+512),w
  5059  165D  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5060  165E  309A               	movlw	154
  5061  165F  00A3               	movwf	___ftge@ff2^(0+512)
  5062  1660  30D1               	movlw	209
  5063  1661  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5064  1662  3040               	movlw	64
  5065  1663  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5066  1664  319C  2410  3196   	fcall	___ftge
  5067  1667  1803               	btfsc	3,0
  5068  1668  2E76               	goto	l6942
  5069                           
  5070                           ;main.c: 129: {
  5071                           ;main.c: 130: UARTstringWAIT(VoltageMSG);
  5072  1669  3059               	movlw	low (_VoltageMSG| (0+32768))
  5073  166A  0024               	movlb	4	; select bank4
  5074  166B  00AF               	movwf	UARTstringWAIT@data^(0+512)
  5075  166C  3089               	movlw	high (_VoltageMSG| (0+32768))
  5076  166D  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  5077  166E  319B  23A8  3196   	fcall	_UARTstringWAIT
  5078                           
  5079                           ;main.c: 131: UARTstringWAIT("Low!\r\n");
  5080  1671  3039               	movlw	low (STR_1| (0+32768))
  5081  1672  0024               	movlb	4	; select bank4
  5082  1673  00AF               	movwf	UARTstringWAIT@data^(0+512)
  5083  1674  308A               	movlw	high (STR_1| (0+32768))
  5084  1675  2E94               	goto	L1
  5085  1676                     l6942:	
  5086                           ;main.c: 132: }
  5087                           
  5088                           
  5089                           ;main.c: 133: else if (BatteryVoltage > 30.0)
  5090  1676  3000               	movlw	0
  5091  1677  0024               	movlb	4	; select bank4
  5092  1678  00A0               	movwf	___ftge@ff1^(0+512)
  5093  1679  30F0               	movlw	240
  5094  167A  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5095  167B  3041               	movlw	65
  5096  167C  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5097  167D  0857               	movf	_BatteryVoltage^(0+512),w
  5098  167E  00A3               	movwf	___ftge@ff2^(0+512)
  5099  167F  0858               	movf	(_BatteryVoltage+1)^(0+512),w
  5100  1680  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5101  1681  0859               	movf	(_BatteryVoltage+2)^(0+512),w
  5102  1682  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5103  1683  319C  2410  3196   	fcall	___ftge
  5104  1686  1803               	btfsc	3,0
  5105  1687  2E98               	goto	l6946
  5106                           
  5107                           ;main.c: 134: {
  5108                           ;main.c: 135: UARTstringWAIT(VoltageMSG);
  5109  1688  3059               	movlw	low (_VoltageMSG| (0+32768))
  5110  1689  0024               	movlb	4	; select bank4
  5111  168A  00AF               	movwf	UARTstringWAIT@data^(0+512)
  5112  168B  3089               	movlw	high (_VoltageMSG| (0+32768))
  5113  168C  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  5114  168D  319B  23A8  3196   	fcall	_UARTstringWAIT
  5115                           
  5116                           ;main.c: 136: UARTstringWAIT("High!\r\n");
  5117  1690  3031               	movlw	low (STR_2| (0+32768))
  5118  1691  0024               	movlb	4	; select bank4
  5119  1692  00AF               	movwf	UARTstringWAIT@data^(0+512)
  5120  1693  308A               	movlw	high (STR_2| (0+32768))
  5121  1694                     L1:	
  5122  1694  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  5123  1695  319B  23A8  3196   	fcall	_UARTstringWAIT
  5124  1698                     l6946:	
  5125                           
  5126                           ;main.c: 137: }
  5127                           ;main.c: 139: PS_2_ENABLE_INTERRUPT(0b00100000);
  5128  1698  3020               	movlw	32
  5129  1699  3198  20B3  3196   	fcall	_PS_2_ENABLE_INTERRUPT
  5130                           
  5131                           ;main.c: 141: PIE1bits.RCIE = 1;
  5132  169C  0021               	movlb	1	; select bank1
  5133  169D  1691               	bsf	17,5	;volatile
  5134  169E                     l6950:	
  5135                           ;main.c: 144: while(1)
  5136                           
  5137                           
  5138                           ;main.c: 145: {
  5139                           ;main.c: 146: BatteryVoltage = ReadVoltage();
  5140  169E  3190  201A  3196   	fcall	_ReadVoltage
  5141  16A1  0024               	movlb	4	; select bank4
  5142  16A2  084C               	movf	?_ReadVoltage^(0+512),w
  5143  16A3  00D7               	movwf	_BatteryVoltage^(0+512)
  5144  16A4  084D               	movf	(?_ReadVoltage+1)^(0+512),w
  5145  16A5  00D8               	movwf	(_BatteryVoltage+1)^(0+512)
  5146  16A6  084E               	movf	(?_ReadVoltage+2)^(0+512),w
  5147  16A7  00D9               	movwf	(_BatteryVoltage+2)^(0+512)
  5148                           
  5149                           ;main.c: 147: delayUS(20);
  5150  16A8  3000               	movlw	0
  5151  16A9  00A3               	movwf	(delayUS@US+3)^(0+512)
  5152  16AA  3000               	movlw	0
  5153  16AB  00A2               	movwf	(delayUS@US+2)^(0+512)
  5154  16AC  3000               	movlw	0
  5155  16AD  00A1               	movwf	(delayUS@US+1)^(0+512)
  5156  16AE  3014               	movlw	20
  5157  16AF  00A0               	movwf	delayUS@US^(0+512)
  5158  16B0  319B  23DB  3196   	fcall	_delayUS
  5159                           
  5160                           ;main.c: 148: if(BatteryVoltage < 6.55 || BatteryVoltage > 30.0)
  5161  16B3  0024               	movlb	4	; select bank4
  5162  16B4  0857               	movf	_BatteryVoltage^(0+512),w
  5163  16B5  00A0               	movwf	___ftge@ff1^(0+512)
  5164  16B6  0858               	movf	(_BatteryVoltage+1)^(0+512),w
  5165  16B7  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5166  16B8  0859               	movf	(_BatteryVoltage+2)^(0+512),w
  5167  16B9  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5168  16BA  309A               	movlw	154
  5169  16BB  00A3               	movwf	___ftge@ff2^(0+512)
  5170  16BC  30D1               	movlw	209
  5171  16BD  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5172  16BE  3040               	movlw	64
  5173  16BF  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5174  16C0  319C  2410  3196   	fcall	___ftge
  5175  16C3  1C03               	btfss	3,0
  5176  16C4  2ED7               	goto	l179
  5177  16C5  3000               	movlw	0
  5178  16C6  0024               	movlb	4	; select bank4
  5179  16C7  00A0               	movwf	___ftge@ff1^(0+512)
  5180  16C8  30F0               	movlw	240
  5181  16C9  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5182  16CA  3041               	movlw	65
  5183  16CB  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5184  16CC  0857               	movf	_BatteryVoltage^(0+512),w
  5185  16CD  00A3               	movwf	___ftge@ff2^(0+512)
  5186  16CE  0858               	movf	(_BatteryVoltage+1)^(0+512),w
  5187  16CF  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5188  16D0  0859               	movf	(_BatteryVoltage+2)^(0+512),w
  5189  16D1  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5190  16D2  319C  2410  3196   	fcall	___ftge
  5191  16D5  1803               	btfsc	3,0
  5192  16D6  2EDB               	goto	l6958
  5193  16D7                     l179:	
  5194                           
  5195                           ;main.c: 149: {
  5196                           ;main.c: 150: Alarm = 1;
  5197  16D7  0024               	movlb	4	; select bank4
  5198  16D8  01DE               	clrf	_Alarm^(0+512)
  5199  16D9  0ADE               	incf	_Alarm^(0+512),f
  5200                           
  5201                           ;main.c: 151: }
  5202  16DA  2EDF               	goto	l6962
  5203  16DB                     l6958:	
  5204                           
  5205                           ;main.c: 152: else
  5206                           ;main.c: 153: {
  5207                           ;main.c: 154: Alarm = 0;
  5208  16DB  0024               	movlb	4	; select bank4
  5209  16DC  01DE               	clrf	_Alarm^(0+512)
  5210                           
  5211                           ;main.c: 155: LATC |= 0b00000010;
  5212  16DD  0022               	movlb	2	; select bank2
  5213  16DE  148E               	bsf	14,1	;volatile
  5214  16DF                     l6962:	
  5215                           
  5216                           ;main.c: 156: }
  5217                           ;main.c: 157: if(Alarm)
  5218  16DF  0024               	movlb	4	; select bank4
  5219  16E0  085E               	movf	_Alarm^(0+512),w
  5220  16E1  1903               	btfsc	3,2
  5221  16E2  2EF4               	goto	l6970
  5222                           
  5223                           ;main.c: 158: {
  5224                           ;main.c: 159: pwrLEDtoggle++;
  5225  16E3  3001               	movlw	1
  5226  16E4  07DC               	addwf	_pwrLEDtoggle^(0+512),f
  5227  16E5  3000               	movlw	0
  5228  16E6  3DDD               	addwfc	(_pwrLEDtoggle+1)^(0+512),f
  5229                           
  5230                           ;main.c: 160: if(pwrLEDtoggle == 100)
  5231  16E7  3064               	movlw	100
  5232  16E8  065C               	xorwf	_pwrLEDtoggle^(0+512),w
  5233  16E9  045D               	iorwf	(_pwrLEDtoggle+1)^(0+512),w
  5234  16EA  1D03               	skipz
  5235  16EB  2EF4               	goto	l6970
  5236                           
  5237                           ;main.c: 161: {
  5238                           ;main.c: 162: pwrLEDtoggle = 0;
  5239  16EC  01DC               	clrf	_pwrLEDtoggle^(0+512)
  5240  16ED  01DD               	clrf	(_pwrLEDtoggle+1)^(0+512)
  5241                           
  5242                           ;main.c: 163: LATC ^= 0b00000010;
  5243  16EE  3002               	movlw	2
  5244  16EF  00D5               	movwf	??_main^(0+512)
  5245  16F0  0855               	movf	??_main^(0+512),w
  5246  16F1  0022               	movlb	2	; select bank2
  5247  16F2  068E               	xorwf	14,f	;volatile
  5248  16F3  0024               	movlb	4	; select bank4
  5249  16F4                     l6970:	
  5250                           
  5251                           ;main.c: 164: }
  5252                           ;main.c: 165: }
  5253                           ;main.c: 167: if(SinLEDtimer < 100)
  5254  16F4  3000               	movlw	0
  5255  16F5  0024               	movlb	4	; select bank4
  5256  16F6  025B               	subwf	(_SinLEDtimer+1)^(0+512),w
  5257  16F7  3064               	movlw	100
  5258  16F8  1903               	skipnz
  5259  16F9  025A               	subwf	_SinLEDtimer^(0+512),w
  5260  16FA  1803               	skipnc
  5261  16FB  2F01               	goto	l6974
  5262                           
  5263                           ;main.c: 168: {
  5264                           ;main.c: 169: SinLEDtimer++;
  5265  16FC  3001               	movlw	1
  5266  16FD  07DA               	addwf	_SinLEDtimer^(0+512),f
  5267  16FE  3000               	movlw	0
  5268  16FF  3DDB               	addwfc	(_SinLEDtimer+1)^(0+512),f
  5269                           
  5270                           ;main.c: 170: }
  5271  1700  2E9E               	goto	l6950
  5272  1701                     l6974:	
  5273                           
  5274                           ;main.c: 171: else
  5275                           ;main.c: 172: {
  5276                           ;main.c: 173: LATC &= ~0b00001000;
  5277  1701  30F7               	movlw	247
  5278  1702  00D5               	movwf	??_main^(0+512)
  5279  1703  0855               	movf	??_main^(0+512),w
  5280  1704  0022               	movlb	2	; select bank2
  5281  1705  058E               	andwf	14,f	;volatile
  5282  1706  2E9E               	goto	l6950
  5283  1707                     __end_of_main:	
  5284                           
  5285                           	psect	text1
  5286  1C10                     __ptext1:	
  5287 ;; *************** function ___ftge *****************
  5288 ;; Defined at:
  5289 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  5290 ;; Parameters:    Size  Location     Type
  5291 ;;  ff1             3    0[BANK4 ] float 
  5292 ;;  ff2             3    3[BANK4 ] float 
  5293 ;; Auto vars:     Size  Location     Type
  5294 ;;		None
  5295 ;; Return value:  Size  Location     Type
  5296 ;;		None               void
  5297 ;; Registers used:
  5298 ;;		wreg, status,2, status,0
  5299 ;; Tracked objects:
  5300 ;;		On entry : 0/0
  5301 ;;		On exit  : 0/0
  5302 ;;		Unchanged: 0/0
  5303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5304 ;;      Params:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5306 ;;      Temps:          0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  5307 ;;      Totals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0
  5308 ;;Total ram usage:        9 bytes
  5309 ;; Hardware stack levels used:    1
  5310 ;; Hardware stack levels required when called:    7
  5311 ;; This function calls:
  5312 ;;		Nothing
  5313 ;; This function is called by:
  5314 ;;		_main
  5315 ;; This function uses a non-reentrant model
  5316 ;;
  5317                           
  5318                           
  5319                           ;psect for function ___ftge
  5320  1C10                     ___ftge:	
  5321                           
  5322                           ;incstack = 0
  5323                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  5324  1C10  0024               	movlb	4	; select bank4
  5325  1C11  1FA2               	btfss	(___ftge@ff1+2)^(0+512),7
  5326  1C12  2C27               	goto	l6898
  5327  1C13  0920               	comf	___ftge@ff1^(0+512),w
  5328  1C14  00A6               	movwf	??___ftge^(0+512)
  5329  1C15  0921               	comf	(___ftge@ff1+1)^(0+512),w
  5330  1C16  00A7               	movwf	(??___ftge^(0+512)+1)
  5331  1C17  0922               	comf	(___ftge@ff1+2)^(0+512),w
  5332  1C18  00A8               	movwf	(??___ftge^(0+512)+2)
  5333  1C19  0AA6               	incf	??___ftge^(0+512),f
  5334  1C1A  1903               	skipnz
  5335  1C1B  0AA7               	incf	(??___ftge^(0+512)+1),f
  5336  1C1C  1903               	skipnz
  5337  1C1D  0AA8               	incf	(??___ftge^(0+512)+2),f
  5338  1C1E  3000               	movlw	0
  5339  1C1F  0726               	addwf	??___ftge^(0+512),w
  5340  1C20  00A0               	movwf	___ftge@ff1^(0+512)
  5341  1C21  3000               	movlw	0
  5342  1C22  3D27               	addwfc	(??___ftge+1)^(0+512),w
  5343  1C23  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5344  1C24  3080               	movlw	128
  5345  1C25  3D28               	addwfc	(??___ftge+2)^(0+512),w
  5346  1C26  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5347  1C27                     l6898:	
  5348  1C27  1FA5               	btfss	(___ftge@ff2+2)^(0+512),7
  5349  1C28  2C3D               	goto	l6902
  5350  1C29  0923               	comf	___ftge@ff2^(0+512),w
  5351  1C2A  00A6               	movwf	??___ftge^(0+512)
  5352  1C2B  0924               	comf	(___ftge@ff2+1)^(0+512),w
  5353  1C2C  00A7               	movwf	(??___ftge^(0+512)+1)
  5354  1C2D  0925               	comf	(___ftge@ff2+2)^(0+512),w
  5355  1C2E  00A8               	movwf	(??___ftge^(0+512)+2)
  5356  1C2F  0AA6               	incf	??___ftge^(0+512),f
  5357  1C30  1903               	skipnz
  5358  1C31  0AA7               	incf	(??___ftge^(0+512)+1),f
  5359  1C32  1903               	skipnz
  5360  1C33  0AA8               	incf	(??___ftge^(0+512)+2),f
  5361  1C34  3000               	movlw	0
  5362  1C35  0726               	addwf	??___ftge^(0+512),w
  5363  1C36  00A3               	movwf	___ftge@ff2^(0+512)
  5364  1C37  3000               	movlw	0
  5365  1C38  3D27               	addwfc	(??___ftge+1)^(0+512),w
  5366  1C39  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5367  1C3A  3080               	movlw	128
  5368  1C3B  3D28               	addwfc	(??___ftge+2)^(0+512),w
  5369  1C3C  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5370  1C3D                     l6902:	
  5371  1C3D  3080               	movlw	128
  5372  1C3E  06A2               	xorwf	(___ftge@ff1+2)^(0+512),f
  5373  1C3F  3080               	movlw	128
  5374  1C40  06A5               	xorwf	(___ftge@ff2+2)^(0+512),f
  5375  1C41  0825               	movf	(___ftge@ff2+2)^(0+512),w
  5376  1C42  0222               	subwf	(___ftge@ff1+2)^(0+512),w
  5377  1C43  1D03               	skipz
  5378  1C44  0008               	return
  5379  1C45  0824               	movf	(___ftge@ff2+1)^(0+512),w
  5380  1C46  0221               	subwf	(___ftge@ff1+1)^(0+512),w
  5381  1C47  1D03               	skipz
  5382  1C48  0008               	return
  5383  1C49  0823               	movf	___ftge@ff2^(0+512),w
  5384  1C4A  0220               	subwf	___ftge@ff1^(0+512),w
  5385  1C4B  0008               	return
  5386  1C4C                     __end_of___ftge:	
  5387                           
  5388                           	psect	text2
  5389  101A                     __ptext2:	
  5390 ;; *************** function _ReadVoltage *****************
  5391 ;; Defined at:
  5392 ;;		line 62 in file "ADC.c"
  5393 ;; Parameters:    Size  Location     Type
  5394 ;;		None
  5395 ;; Auto vars:     Size  Location     Type
  5396 ;;  voltage         3   48[BANK4 ] float 
  5397 ;;  temp            2   51[BANK4 ] unsigned int 
  5398 ;; Return value:  Size  Location     Type
  5399 ;;                  3   44[BANK4 ] unsigned int 
  5400 ;; Registers used:
  5401 ;;		wreg, status,2, status,0, pclath, cstack
  5402 ;; Tracked objects:
  5403 ;;		On entry : 0/0
  5404 ;;		On exit  : 0/0
  5405 ;;		Unchanged: 0/0
  5406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5407 ;;      Params:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  5408 ;;      Locals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  5409 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  5410 ;;      Totals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0
  5411 ;;Total ram usage:        9 bytes
  5412 ;; Hardware stack levels used:    1
  5413 ;; Hardware stack levels required when called:    9
  5414 ;; This function calls:
  5415 ;;		_DisableInternalADC
  5416 ;;		_InternalADC_Read
  5417 ;;		___ftdiv
  5418 ;;		___ftmul
  5419 ;;		___lwtoft
  5420 ;; This function is called by:
  5421 ;;		_main
  5422 ;; This function uses a non-reentrant model
  5423 ;;
  5424                           
  5425                           
  5426                           ;psect for function _ReadVoltage
  5427  101A                     _ReadVoltage:	
  5428                           
  5429                           ;ADC.c: 64: unsigned int temp;
  5430                           ;ADC.c: 65: double voltage;
  5431                           ;ADC.c: 70: temp = InternalADC_Read(2);
  5432                           
  5433                           ;incstack = 0
  5434                           ; Regs used in _ReadVoltage: [wreg+status,2+status,0+pclath+cstack]
  5435  101A  3002               	movlw	2
  5436  101B  319D  2511  3190   	fcall	_InternalADC_Read
  5437  101E  0024               	movlb	4	; select bank4
  5438  101F  082B               	movf	(?_InternalADC_Read+1)^(0+512),w
  5439  1020  01D4               	clrf	(ReadVoltage@temp+1)^(0+512)
  5440  1021  07D4               	addwf	(ReadVoltage@temp+1)^(0+512),f
  5441  1022  082A               	movf	?_InternalADC_Read^(0+512),w
  5442  1023  01D3               	clrf	ReadVoltage@temp^(0+512)
  5443  1024  07D3               	addwf	ReadVoltage@temp^(0+512),f
  5444                           
  5445                           ;ADC.c: 71: DisableInternalADC();
  5446  1025  3198  204D  3190   	fcall	_DisableInternalADC
  5447                           
  5448                           ;ADC.c: 78: if((FVRCON & 0x03) == 0x03)
  5449  1028  3003               	movlw	3
  5450  1029  0022               	movlb	2	; select bank2
  5451  102A  0517               	andwf	23,w	;volatile
  5452  102B  0024               	movlb	4	; select bank4
  5453  102C  00CF               	movwf	??_ReadVoltage^(0+512)
  5454  102D  084F               	movf	??_ReadVoltage^(0+512),w
  5455  102E  3A03               	xorlw	3
  5456  102F  1D03               	skipz
  5457  1030  2837               	goto	l6884
  5458                           
  5459                           ;ADC.c: 79: {
  5460                           ;ADC.c: 81: temp <<= 2;
  5461  1031  3002               	movlw	2
  5462  1032                     u8925:	
  5463  1032  35D3               	lslf	ReadVoltage@temp^(0+512),f
  5464  1033  0DD4               	rlf	(ReadVoltage@temp+1)^(0+512),f
  5465  1034  0B89               	decfsz	9,f
  5466  1035  2832               	goto	u8925
  5467                           
  5468                           ;ADC.c: 82: }
  5469  1036  2845               	goto	l6888
  5470  1037                     l6884:	
  5471                           
  5472                           ;ADC.c: 83: else if((FVRCON & 0x03) == 0x02)
  5473  1037  3003               	movlw	3
  5474  1038  0022               	movlb	2	; select bank2
  5475  1039  0517               	andwf	23,w	;volatile
  5476  103A  0024               	movlb	4	; select bank4
  5477  103B  00CF               	movwf	??_ReadVoltage^(0+512)
  5478  103C  084F               	movf	??_ReadVoltage^(0+512),w
  5479  103D  3A02               	xorlw	2
  5480  103E  1D03               	skipz
  5481  103F  2845               	goto	l6888
  5482                           
  5483                           ;ADC.c: 84: {
  5484                           ;ADC.c: 86: temp <<= 1;
  5485  1040  3001               	movlw	1
  5486  1041                     u8945:	
  5487  1041  35D3               	lslf	ReadVoltage@temp^(0+512),f
  5488  1042  0DD4               	rlf	(ReadVoltage@temp+1)^(0+512),f
  5489  1043  0B89               	decfsz	9,f
  5490  1044  2841               	goto	u8945
  5491  1045                     l6888:	
  5492                           
  5493                           ;ADC.c: 87: }
  5494                           ;ADC.c: 88: voltage = ((double)temp / 1000) * 5.7;
  5495  1045  3066               	movlw	102
  5496  1046  00BC               	movwf	___ftmul@f1^(0+512)
  5497  1047  30B6               	movlw	182
  5498  1048  00BD               	movwf	(___ftmul@f1+1)^(0+512)
  5499  1049  3040               	movlw	64
  5500  104A  00BE               	movwf	(___ftmul@f1+2)^(0+512)
  5501  104B  3000               	movlw	0
  5502  104C  00AC               	movwf	___ftdiv@f2^(0+512)
  5503  104D  307A               	movlw	122
  5504  104E  00AD               	movwf	(___ftdiv@f2+1)^(0+512)
  5505  104F  3044               	movlw	68
  5506  1050  00AE               	movwf	(___ftdiv@f2+2)^(0+512)
  5507  1051  0854               	movf	(ReadVoltage@temp+1)^(0+512),w
  5508  1052  01A9               	clrf	(___lwtoft@c+1)^(0+512)
  5509  1053  07A9               	addwf	(___lwtoft@c+1)^(0+512),f
  5510  1054  0853               	movf	ReadVoltage@temp^(0+512),w
  5511  1055  01A8               	clrf	___lwtoft@c^(0+512)
  5512  1056  07A8               	addwf	___lwtoft@c^(0+512),f
  5513  1057  3190  2005  3190   	fcall	___lwtoft
  5514  105A  0024               	movlb	4	; select bank4
  5515  105B  0828               	movf	?___lwtoft^(0+512),w
  5516  105C  00AF               	movwf	___ftdiv@f1^(0+512)
  5517  105D  0829               	movf	(?___lwtoft+1)^(0+512),w
  5518  105E  00B0               	movwf	(___ftdiv@f1+1)^(0+512)
  5519  105F  082A               	movf	(?___lwtoft+2)^(0+512),w
  5520  1060  00B1               	movwf	(___ftdiv@f1+2)^(0+512)
  5521  1061  3192  220E  3190   	fcall	___ftdiv
  5522  1064  0024               	movlb	4	; select bank4
  5523  1065  082C               	movf	?___ftdiv^(0+512),w
  5524  1066  00BF               	movwf	___ftmul@f2^(0+512)
  5525  1067  082D               	movf	(?___ftdiv+1)^(0+512),w
  5526  1068  00C0               	movwf	(___ftmul@f2+1)^(0+512)
  5527  1069  082E               	movf	(?___ftdiv+2)^(0+512),w
  5528  106A  00C1               	movwf	(___ftmul@f2+2)^(0+512)
  5529  106B  3192  22B7         	fcall	___ftmul
  5530  106D  0024               	movlb	4	; select bank4
  5531  106E  083C               	movf	?___ftmul^(0+512),w
  5532  106F  00D0               	movwf	ReadVoltage@voltage^(0+512)
  5533  1070  083D               	movf	(?___ftmul+1)^(0+512),w
  5534  1071  00D1               	movwf	(ReadVoltage@voltage+1)^(0+512)
  5535  1072  083E               	movf	(?___ftmul+2)^(0+512),w
  5536  1073  00D2               	movwf	(ReadVoltage@voltage+2)^(0+512)
  5537                           
  5538                           ;ADC.c: 89: return voltage;
  5539  1074  0850               	movf	ReadVoltage@voltage^(0+512),w
  5540  1075  00CC               	movwf	?_ReadVoltage^(0+512)
  5541  1076  0851               	movf	(ReadVoltage@voltage+1)^(0+512),w
  5542  1077  00CD               	movwf	(?_ReadVoltage+1)^(0+512)
  5543  1078  0852               	movf	(ReadVoltage@voltage+2)^(0+512),w
  5544  1079  00CE               	movwf	(?_ReadVoltage+2)^(0+512)
  5545  107A  0008               	return
  5546  107B                     __end_of_ReadVoltage:	
  5547                           
  5548                           	psect	text3
  5549  1005                     __ptext3:	
  5550 ;; *************** function ___lwtoft *****************
  5551 ;; Defined at:
  5552 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwtoft.c"
  5553 ;; Parameters:    Size  Location     Type
  5554 ;;  c               2    8[BANK4 ] unsigned int 
  5555 ;; Auto vars:     Size  Location     Type
  5556 ;;		None
  5557 ;; Return value:  Size  Location     Type
  5558 ;;                  3    8[BANK4 ] float 
  5559 ;; Registers used:
  5560 ;;		wreg, status,2, status,0, pclath, cstack
  5561 ;; Tracked objects:
  5562 ;;		On entry : 0/0
  5563 ;;		On exit  : 0/0
  5564 ;;		Unchanged: 0/0
  5565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5566 ;;      Params:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  5567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5568 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  5569 ;;      Totals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  5570 ;;Total ram usage:        4 bytes
  5571 ;; Hardware stack levels used:    1
  5572 ;; Hardware stack levels required when called:    8
  5573 ;; This function calls:
  5574 ;;		___ftpack
  5575 ;; This function is called by:
  5576 ;;		_ReadVoltage
  5577 ;; This function uses a non-reentrant model
  5578 ;;
  5579                           
  5580                           
  5581                           ;psect for function ___lwtoft
  5582  1005                     ___lwtoft:	
  5583                           
  5584                           ;incstack = 0
  5585                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  5586  1005  0024               	movlb	4	; select bank4
  5587  1006  0828               	movf	___lwtoft@c^(0+512),w
  5588  1007  00A0               	movwf	___ftpack@arg^(0+512)
  5589  1008  0829               	movf	(___lwtoft@c+1)^(0+512),w
  5590  1009  00A1               	movwf	(___ftpack@arg+1)^(0+512)
  5591  100A  01A2               	clrf	(___ftpack@arg+2)^(0+512)
  5592  100B  308E               	movlw	142
  5593  100C  00AB               	movwf	??___lwtoft^(0+512)
  5594  100D  082B               	movf	??___lwtoft^(0+512),w
  5595  100E  00A3               	movwf	___ftpack@exp^(0+512)
  5596  100F  01A4               	clrf	___ftpack@sign^(0+512)
  5597  1010  319F  279F         	fcall	___ftpack
  5598  1012  0024               	movlb	4	; select bank4
  5599  1013  0820               	movf	?___ftpack^(0+512),w
  5600  1014  00A8               	movwf	?___lwtoft^(0+512)
  5601  1015  0821               	movf	(?___ftpack+1)^(0+512),w
  5602  1016  00A9               	movwf	(?___lwtoft+1)^(0+512)
  5603  1017  0822               	movf	(?___ftpack+2)^(0+512),w
  5604  1018  00AA               	movwf	(?___lwtoft+2)^(0+512)
  5605  1019  0008               	return
  5606  101A                     __end_of___lwtoft:	
  5607                           
  5608                           	psect	text4
  5609  12B7                     __ptext4:	
  5610 ;; *************** function ___ftmul *****************
  5611 ;; Defined at:
  5612 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  5613 ;; Parameters:    Size  Location     Type
  5614 ;;  f1              3   28[BANK4 ] float 
  5615 ;;  f2              3   31[BANK4 ] float 
  5616 ;; Auto vars:     Size  Location     Type
  5617 ;;  f3_as_produc    3   39[BANK4 ] unsigned um
  5618 ;;  sign            1   43[BANK4 ] unsigned char 
  5619 ;;  cntr            1   42[BANK4 ] unsigned char 
  5620 ;;  exp             1   38[BANK4 ] unsigned char 
  5621 ;; Return value:  Size  Location     Type
  5622 ;;                  3   28[BANK4 ] float 
  5623 ;; Registers used:
  5624 ;;		wreg, status,2, status,0, pclath, cstack
  5625 ;; Tracked objects:
  5626 ;;		On entry : 0/0
  5627 ;;		On exit  : 0/0
  5628 ;;		Unchanged: 0/0
  5629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5630 ;;      Params:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5631 ;;      Locals:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5632 ;;      Temps:          0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  5633 ;;      Totals:         0       0       0       0       0      16       0       0       0       0       0       0       
      +0       0
  5634 ;;Total ram usage:       16 bytes
  5635 ;; Hardware stack levels used:    1
  5636 ;; Hardware stack levels required when called:    8
  5637 ;; This function calls:
  5638 ;;		___ftpack
  5639 ;; This function is called by:
  5640 ;;		_ReadVoltage
  5641 ;; This function uses a non-reentrant model
  5642 ;;
  5643                           
  5644                           
  5645                           ;psect for function ___ftmul
  5646  12B7                     ___ftmul:	
  5647                           
  5648                           ;incstack = 0
  5649                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  5650  12B7  0024               	movlb	4	; select bank4
  5651  12B8  083C               	movf	___ftmul@f1^(0+512),w
  5652  12B9  00C2               	movwf	??___ftmul^(0+512)
  5653  12BA  083D               	movf	(___ftmul@f1+1)^(0+512),w
  5654  12BB  00C3               	movwf	(??___ftmul^(0+512)+1)
  5655  12BC  083E               	movf	(___ftmul@f1+2)^(0+512),w
  5656  12BD  00C4               	movwf	(??___ftmul^(0+512)+2)
  5657  12BE  1003               	clrc
  5658  12BF  0D43               	rlf	(??___ftmul^(0+512)+1),w
  5659  12C0  0D44               	rlf	(??___ftmul^(0+512)+2),w
  5660  12C1  00C5               	movwf	(??___ftmul+3)^(0+512)
  5661  12C2  0845               	movf	(??___ftmul+3)^(0+512),w
  5662  12C3  00C6               	movwf	___ftmul@exp^(0+512)
  5663  12C4  08C6               	movf	___ftmul@exp^(0+512),f
  5664  12C5  1D03               	skipz
  5665  12C6  2ACE               	goto	l6720
  5666  12C7  3000               	movlw	0
  5667  12C8  00BC               	movwf	?___ftmul^(0+512)
  5668  12C9  3000               	movlw	0
  5669  12CA  00BD               	movwf	(?___ftmul+1)^(0+512)
  5670  12CB  3000               	movlw	0
  5671  12CC  00BE               	movwf	(?___ftmul+2)^(0+512)
  5672  12CD  0008               	return
  5673  12CE                     l6720:	
  5674  12CE  083F               	movf	___ftmul@f2^(0+512),w
  5675  12CF  00C2               	movwf	??___ftmul^(0+512)
  5676  12D0  0840               	movf	(___ftmul@f2+1)^(0+512),w
  5677  12D1  00C3               	movwf	(??___ftmul^(0+512)+1)
  5678  12D2  0841               	movf	(___ftmul@f2+2)^(0+512),w
  5679  12D3  00C4               	movwf	(??___ftmul^(0+512)+2)
  5680  12D4  1003               	clrc
  5681  12D5  0D43               	rlf	(??___ftmul^(0+512)+1),w
  5682  12D6  0D44               	rlf	(??___ftmul^(0+512)+2),w
  5683  12D7  00C5               	movwf	(??___ftmul+3)^(0+512)
  5684  12D8  0845               	movf	(??___ftmul+3)^(0+512),w
  5685  12D9  00CB               	movwf	___ftmul@sign^(0+512)
  5686  12DA  08CB               	movf	___ftmul@sign^(0+512),f
  5687  12DB  1D03               	skipz
  5688  12DC  2AE4               	goto	l6726
  5689  12DD  3000               	movlw	0
  5690  12DE  00BC               	movwf	?___ftmul^(0+512)
  5691  12DF  3000               	movlw	0
  5692  12E0  00BD               	movwf	(?___ftmul+1)^(0+512)
  5693  12E1  3000               	movlw	0
  5694  12E2  00BE               	movwf	(?___ftmul+2)^(0+512)
  5695  12E3  0008               	return
  5696  12E4                     l6726:	
  5697  12E4  084B               	movf	___ftmul@sign^(0+512),w
  5698  12E5  3E7B               	addlw	123
  5699  12E6  00C2               	movwf	??___ftmul^(0+512)
  5700  12E7  0842               	movf	??___ftmul^(0+512),w
  5701  12E8  07C6               	addwf	___ftmul@exp^(0+512),f
  5702  12E9  083C               	movf	___ftmul@f1^(0+512),w
  5703  12EA  00C2               	movwf	??___ftmul^(0+512)
  5704  12EB  083D               	movf	(___ftmul@f1+1)^(0+512),w
  5705  12EC  00C3               	movwf	(??___ftmul^(0+512)+1)
  5706  12ED  083E               	movf	(___ftmul@f1+2)^(0+512),w
  5707  12EE  00C4               	movwf	(??___ftmul^(0+512)+2)
  5708  12EF  3010               	movlw	16
  5709  12F0                     u8745:	
  5710  12F0  36C4               	lsrf	(??___ftmul^(0+512)+2),f
  5711  12F1  0CC3               	rrf	(??___ftmul^(0+512)+1),f
  5712  12F2  0CC2               	rrf	??___ftmul^(0+512),f
  5713  12F3  0B89               	decfsz	9,f
  5714  12F4  2AF0               	goto	u8745
  5715  12F5  0842               	movf	??___ftmul^(0+512),w
  5716  12F6  00C5               	movwf	(??___ftmul+3)^(0+512)
  5717  12F7  0845               	movf	(??___ftmul+3)^(0+512),w
  5718  12F8  00CB               	movwf	___ftmul@sign^(0+512)
  5719  12F9  083F               	movf	___ftmul@f2^(0+512),w
  5720  12FA  00C2               	movwf	??___ftmul^(0+512)
  5721  12FB  0840               	movf	(___ftmul@f2+1)^(0+512),w
  5722  12FC  00C3               	movwf	(??___ftmul^(0+512)+1)
  5723  12FD  0841               	movf	(___ftmul@f2+2)^(0+512),w
  5724  12FE  00C4               	movwf	(??___ftmul^(0+512)+2)
  5725  12FF  3010               	movlw	16
  5726  1300                     u8755:	
  5727  1300  36C4               	lsrf	(??___ftmul^(0+512)+2),f
  5728  1301  0CC3               	rrf	(??___ftmul^(0+512)+1),f
  5729  1302  0CC2               	rrf	??___ftmul^(0+512),f
  5730  1303  0B89               	decfsz	9,f
  5731  1304  2B00               	goto	u8755
  5732  1305  0842               	movf	??___ftmul^(0+512),w
  5733  1306  00C5               	movwf	(??___ftmul+3)^(0+512)
  5734  1307  0845               	movf	(??___ftmul+3)^(0+512),w
  5735  1308  06CB               	xorwf	___ftmul@sign^(0+512),f
  5736  1309  3080               	movlw	128
  5737  130A  00C2               	movwf	??___ftmul^(0+512)
  5738  130B  0842               	movf	??___ftmul^(0+512),w
  5739  130C  05CB               	andwf	___ftmul@sign^(0+512),f
  5740  130D  17BD               	bsf	(___ftmul@f1^(0+512)+1),7
  5741  130E  17C0               	bsf	(___ftmul@f2^(0+512)+1),7
  5742  130F  30FF               	movlw	255
  5743  1310  05BF               	andwf	___ftmul@f2^(0+512),f
  5744  1311  30FF               	movlw	255
  5745  1312  05C0               	andwf	(___ftmul@f2+1)^(0+512),f
  5746  1313  3000               	movlw	0
  5747  1314  05C1               	andwf	(___ftmul@f2+2)^(0+512),f
  5748  1315  3000               	movlw	0
  5749  1316  00C7               	movwf	___ftmul@f3_as_product^(0+512)
  5750  1317  3000               	movlw	0
  5751  1318  00C8               	movwf	(___ftmul@f3_as_product+1)^(0+512)
  5752  1319  3000               	movlw	0
  5753  131A  00C9               	movwf	(___ftmul@f3_as_product+2)^(0+512)
  5754  131B  3007               	movlw	7
  5755  131C  00C2               	movwf	??___ftmul^(0+512)
  5756  131D  0842               	movf	??___ftmul^(0+512),w
  5757  131E  00CA               	movwf	___ftmul@cntr^(0+512)
  5758  131F                     l6738:	
  5759  131F  1C3C               	btfss	___ftmul@f1^(0+512),0
  5760  1320  2B27               	goto	l6742
  5761  1321  083F               	movf	___ftmul@f2^(0+512),w
  5762  1322  07C7               	addwf	___ftmul@f3_as_product^(0+512),f
  5763  1323  0840               	movf	(___ftmul@f2+1)^(0+512),w
  5764  1324  3DC8               	addwfc	(___ftmul@f3_as_product+1)^(0+512),f
  5765  1325  0841               	movf	(___ftmul@f2+2)^(0+512),w
  5766  1326  3DC9               	addwfc	(___ftmul@f3_as_product+2)^(0+512),f
  5767  1327                     l6742:	
  5768  1327  3001               	movlw	1
  5769  1328                     u8775:	
  5770  1328  36BE               	lsrf	(___ftmul@f1+2)^(0+512),f
  5771  1329  0CBD               	rrf	(___ftmul@f1+1)^(0+512),f
  5772  132A  0CBC               	rrf	___ftmul@f1^(0+512),f
  5773  132B  0B89               	decfsz	9,f
  5774  132C  2B28               	goto	u8775
  5775  132D  3001               	movlw	1
  5776  132E                     u8785:	
  5777  132E  35BF               	lslf	___ftmul@f2^(0+512),f
  5778  132F  0DC0               	rlf	(___ftmul@f2+1)^(0+512),f
  5779  1330  0DC1               	rlf	(___ftmul@f2+2)^(0+512),f
  5780  1331  0B89               	decfsz	9,f
  5781  1332  2B2E               	goto	u8785
  5782  1333  3001               	movlw	1
  5783  1334  02CA               	subwf	___ftmul@cntr^(0+512),f
  5784  1335  1D03               	btfss	3,2
  5785  1336  2B1F               	goto	l6738
  5786  1337  3009               	movlw	9
  5787  1338  00C2               	movwf	??___ftmul^(0+512)
  5788  1339  0842               	movf	??___ftmul^(0+512),w
  5789  133A  00CA               	movwf	___ftmul@cntr^(0+512)
  5790  133B                     l6750:	
  5791  133B  1C3C               	btfss	___ftmul@f1^(0+512),0
  5792  133C  2B43               	goto	l6754
  5793  133D  083F               	movf	___ftmul@f2^(0+512),w
  5794  133E  07C7               	addwf	___ftmul@f3_as_product^(0+512),f
  5795  133F  0840               	movf	(___ftmul@f2+1)^(0+512),w
  5796  1340  3DC8               	addwfc	(___ftmul@f3_as_product+1)^(0+512),f
  5797  1341  0841               	movf	(___ftmul@f2+2)^(0+512),w
  5798  1342  3DC9               	addwfc	(___ftmul@f3_as_product+2)^(0+512),f
  5799  1343                     l6754:	
  5800  1343  3001               	movlw	1
  5801  1344                     u8815:	
  5802  1344  36BE               	lsrf	(___ftmul@f1+2)^(0+512),f
  5803  1345  0CBD               	rrf	(___ftmul@f1+1)^(0+512),f
  5804  1346  0CBC               	rrf	___ftmul@f1^(0+512),f
  5805  1347  0B89               	decfsz	9,f
  5806  1348  2B44               	goto	u8815
  5807  1349  3001               	movlw	1
  5808  134A                     u8825:	
  5809  134A  36C9               	lsrf	(___ftmul@f3_as_product+2)^(0+512),f
  5810  134B  0CC8               	rrf	(___ftmul@f3_as_product+1)^(0+512),f
  5811  134C  0CC7               	rrf	___ftmul@f3_as_product^(0+512),f
  5812  134D  0B89               	decfsz	9,f
  5813  134E  2B4A               	goto	u8825
  5814  134F  3001               	movlw	1
  5815  1350  02CA               	subwf	___ftmul@cntr^(0+512),f
  5816  1351  1D03               	btfss	3,2
  5817  1352  2B3B               	goto	l6750
  5818  1353  0847               	movf	___ftmul@f3_as_product^(0+512),w
  5819  1354  00A0               	movwf	___ftpack@arg^(0+512)
  5820  1355  0848               	movf	(___ftmul@f3_as_product+1)^(0+512),w
  5821  1356  00A1               	movwf	(___ftpack@arg+1)^(0+512)
  5822  1357  0849               	movf	(___ftmul@f3_as_product+2)^(0+512),w
  5823  1358  00A2               	movwf	(___ftpack@arg+2)^(0+512)
  5824  1359  0846               	movf	___ftmul@exp^(0+512),w
  5825  135A  00C2               	movwf	??___ftmul^(0+512)
  5826  135B  0842               	movf	??___ftmul^(0+512),w
  5827  135C  00A3               	movwf	___ftpack@exp^(0+512)
  5828  135D  084B               	movf	___ftmul@sign^(0+512),w
  5829  135E  00C3               	movwf	(??___ftmul+1)^(0+512)
  5830  135F  0843               	movf	(??___ftmul+1)^(0+512),w
  5831  1360  00A4               	movwf	___ftpack@sign^(0+512)
  5832  1361  319F  279F         	fcall	___ftpack
  5833  1363  0024               	movlb	4	; select bank4
  5834  1364  0820               	movf	?___ftpack^(0+512),w
  5835  1365  00BC               	movwf	?___ftmul^(0+512)
  5836  1366  0821               	movf	(?___ftpack+1)^(0+512),w
  5837  1367  00BD               	movwf	(?___ftmul+1)^(0+512)
  5838  1368  0822               	movf	(?___ftpack+2)^(0+512),w
  5839  1369  00BE               	movwf	(?___ftmul+2)^(0+512)
  5840  136A  0008               	return
  5841  136B                     __end_of___ftmul:	
  5842                           
  5843                           	psect	text5
  5844  120E                     __ptext5:	
  5845 ;; *************** function ___ftdiv *****************
  5846 ;; Defined at:
  5847 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic\ftdiv.c"
  5848 ;; Parameters:    Size  Location     Type
  5849 ;;  f2              3   12[BANK4 ] float 
  5850 ;;  f1              3   15[BANK4 ] float 
  5851 ;; Auto vars:     Size  Location     Type
  5852 ;;  f3              3   23[BANK4 ] float 
  5853 ;;  sign            1   27[BANK4 ] unsigned char 
  5854 ;;  exp             1   26[BANK4 ] unsigned char 
  5855 ;;  cntr            1   22[BANK4 ] unsigned char 
  5856 ;; Return value:  Size  Location     Type
  5857 ;;                  3   12[BANK4 ] float 
  5858 ;; Registers used:
  5859 ;;		wreg, status,2, status,0, pclath, cstack
  5860 ;; Tracked objects:
  5861 ;;		On entry : 0/0
  5862 ;;		On exit  : 0/0
  5863 ;;		Unchanged: 0/0
  5864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5865 ;;      Params:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5866 ;;      Locals:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5867 ;;      Temps:          0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  5868 ;;      Totals:         0       0       0       0       0      16       0       0       0       0       0       0       
      +0       0
  5869 ;;Total ram usage:       16 bytes
  5870 ;; Hardware stack levels used:    1
  5871 ;; Hardware stack levels required when called:    8
  5872 ;; This function calls:
  5873 ;;		___ftpack
  5874 ;; This function is called by:
  5875 ;;		_ReadVoltage
  5876 ;; This function uses a non-reentrant model
  5877 ;;
  5878                           
  5879                           
  5880                           ;psect for function ___ftdiv
  5881  120E                     ___ftdiv:	
  5882                           
  5883                           ;incstack = 0
  5884                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  5885  120E  0024               	movlb	4	; select bank4
  5886  120F  082F               	movf	___ftdiv@f1^(0+512),w
  5887  1210  00B2               	movwf	??___ftdiv^(0+512)
  5888  1211  0830               	movf	(___ftdiv@f1+1)^(0+512),w
  5889  1212  00B3               	movwf	(??___ftdiv^(0+512)+1)
  5890  1213  0831               	movf	(___ftdiv@f1+2)^(0+512),w
  5891  1214  00B4               	movwf	(??___ftdiv^(0+512)+2)
  5892  1215  1003               	clrc
  5893  1216  0D33               	rlf	(??___ftdiv^(0+512)+1),w
  5894  1217  0D34               	rlf	(??___ftdiv^(0+512)+2),w
  5895  1218  00B5               	movwf	(??___ftdiv+3)^(0+512)
  5896  1219  0835               	movf	(??___ftdiv+3)^(0+512),w
  5897  121A  00BA               	movwf	___ftdiv@exp^(0+512)
  5898  121B  08BA               	movf	___ftdiv@exp^(0+512),f
  5899  121C  1D03               	skipz
  5900  121D  2A25               	goto	l6678
  5901  121E  3000               	movlw	0
  5902  121F  00AC               	movwf	?___ftdiv^(0+512)
  5903  1220  3000               	movlw	0
  5904  1221  00AD               	movwf	(?___ftdiv+1)^(0+512)
  5905  1222  3000               	movlw	0
  5906  1223  00AE               	movwf	(?___ftdiv+2)^(0+512)
  5907  1224  0008               	return
  5908  1225                     l6678:	
  5909  1225  082C               	movf	___ftdiv@f2^(0+512),w
  5910  1226  00B2               	movwf	??___ftdiv^(0+512)
  5911  1227  082D               	movf	(___ftdiv@f2+1)^(0+512),w
  5912  1228  00B3               	movwf	(??___ftdiv^(0+512)+1)
  5913  1229  082E               	movf	(___ftdiv@f2+2)^(0+512),w
  5914  122A  00B4               	movwf	(??___ftdiv^(0+512)+2)
  5915  122B  1003               	clrc
  5916  122C  0D33               	rlf	(??___ftdiv^(0+512)+1),w
  5917  122D  0D34               	rlf	(??___ftdiv^(0+512)+2),w
  5918  122E  00B5               	movwf	(??___ftdiv+3)^(0+512)
  5919  122F  0835               	movf	(??___ftdiv+3)^(0+512),w
  5920  1230  00BB               	movwf	___ftdiv@sign^(0+512)
  5921  1231  08BB               	movf	___ftdiv@sign^(0+512),f
  5922  1232  1D03               	skipz
  5923  1233  2A3B               	goto	l6684
  5924  1234  3000               	movlw	0
  5925  1235  00AC               	movwf	?___ftdiv^(0+512)
  5926  1236  3000               	movlw	0
  5927  1237  00AD               	movwf	(?___ftdiv+1)^(0+512)
  5928  1238  3000               	movlw	0
  5929  1239  00AE               	movwf	(?___ftdiv+2)^(0+512)
  5930  123A  0008               	return
  5931  123B                     l6684:	
  5932  123B  3000               	movlw	0
  5933  123C  00B7               	movwf	___ftdiv@f3^(0+512)
  5934  123D  3000               	movlw	0
  5935  123E  00B8               	movwf	(___ftdiv@f3+1)^(0+512)
  5936  123F  3000               	movlw	0
  5937  1240  00B9               	movwf	(___ftdiv@f3+2)^(0+512)
  5938  1241  3089               	movlw	137
  5939  1242  073B               	addwf	___ftdiv@sign^(0+512),w
  5940  1243  00B2               	movwf	??___ftdiv^(0+512)
  5941  1244  0832               	movf	??___ftdiv^(0+512),w
  5942  1245  02BA               	subwf	___ftdiv@exp^(0+512),f
  5943  1246  082F               	movf	___ftdiv@f1^(0+512),w
  5944  1247  00B2               	movwf	??___ftdiv^(0+512)
  5945  1248  0830               	movf	(___ftdiv@f1+1)^(0+512),w
  5946  1249  00B3               	movwf	(??___ftdiv^(0+512)+1)
  5947  124A  0831               	movf	(___ftdiv@f1+2)^(0+512),w
  5948  124B  00B4               	movwf	(??___ftdiv^(0+512)+2)
  5949  124C  3010               	movlw	16
  5950  124D                     u8665:	
  5951  124D  36B4               	lsrf	(??___ftdiv^(0+512)+2),f
  5952  124E  0CB3               	rrf	(??___ftdiv^(0+512)+1),f
  5953  124F  0CB2               	rrf	??___ftdiv^(0+512),f
  5954  1250  0B89               	decfsz	9,f
  5955  1251  2A4D               	goto	u8665
  5956  1252  0832               	movf	??___ftdiv^(0+512),w
  5957  1253  00B5               	movwf	(??___ftdiv+3)^(0+512)
  5958  1254  0835               	movf	(??___ftdiv+3)^(0+512),w
  5959  1255  00BB               	movwf	___ftdiv@sign^(0+512)
  5960  1256  082C               	movf	___ftdiv@f2^(0+512),w
  5961  1257  00B2               	movwf	??___ftdiv^(0+512)
  5962  1258  082D               	movf	(___ftdiv@f2+1)^(0+512),w
  5963  1259  00B3               	movwf	(??___ftdiv^(0+512)+1)
  5964  125A  082E               	movf	(___ftdiv@f2+2)^(0+512),w
  5965  125B  00B4               	movwf	(??___ftdiv^(0+512)+2)
  5966  125C  3010               	movlw	16
  5967  125D                     u8675:	
  5968  125D  36B4               	lsrf	(??___ftdiv^(0+512)+2),f
  5969  125E  0CB3               	rrf	(??___ftdiv^(0+512)+1),f
  5970  125F  0CB2               	rrf	??___ftdiv^(0+512),f
  5971  1260  0B89               	decfsz	9,f
  5972  1261  2A5D               	goto	u8675
  5973  1262  0832               	movf	??___ftdiv^(0+512),w
  5974  1263  00B5               	movwf	(??___ftdiv+3)^(0+512)
  5975  1264  0835               	movf	(??___ftdiv+3)^(0+512),w
  5976  1265  06BB               	xorwf	___ftdiv@sign^(0+512),f
  5977  1266  3080               	movlw	128
  5978  1267  00B2               	movwf	??___ftdiv^(0+512)
  5979  1268  0832               	movf	??___ftdiv^(0+512),w
  5980  1269  05BB               	andwf	___ftdiv@sign^(0+512),f
  5981  126A  17B0               	bsf	(___ftdiv@f1^(0+512)+1),7
  5982  126B  30FF               	movlw	255
  5983  126C  05AF               	andwf	___ftdiv@f1^(0+512),f
  5984  126D  30FF               	movlw	255
  5985  126E  05B0               	andwf	(___ftdiv@f1+1)^(0+512),f
  5986  126F  3000               	movlw	0
  5987  1270  05B1               	andwf	(___ftdiv@f1+2)^(0+512),f
  5988  1271  17AD               	bsf	(___ftdiv@f2^(0+512)+1),7
  5989  1272  30FF               	movlw	255
  5990  1273  05AC               	andwf	___ftdiv@f2^(0+512),f
  5991  1274  30FF               	movlw	255
  5992  1275  05AD               	andwf	(___ftdiv@f2+1)^(0+512),f
  5993  1276  3000               	movlw	0
  5994  1277  05AE               	andwf	(___ftdiv@f2+2)^(0+512),f
  5995  1278  3018               	movlw	24
  5996  1279  00B2               	movwf	??___ftdiv^(0+512)
  5997  127A  0832               	movf	??___ftdiv^(0+512),w
  5998  127B  00B6               	movwf	___ftdiv@cntr^(0+512)
  5999  127C                     l6698:	
  6000  127C  3001               	movlw	1
  6001  127D                     u8685:	
  6002  127D  35B7               	lslf	___ftdiv@f3^(0+512),f
  6003  127E  0DB8               	rlf	(___ftdiv@f3+1)^(0+512),f
  6004  127F  0DB9               	rlf	(___ftdiv@f3+2)^(0+512),f
  6005  1280  0B89               	decfsz	9,f
  6006  1281  2A7D               	goto	u8685
  6007  1282  082E               	movf	(___ftdiv@f2+2)^(0+512),w
  6008  1283  0231               	subwf	(___ftdiv@f1+2)^(0+512),w
  6009  1284  1D03               	skipz
  6010  1285  2A8C               	goto	u8695
  6011  1286  082D               	movf	(___ftdiv@f2+1)^(0+512),w
  6012  1287  0230               	subwf	(___ftdiv@f1+1)^(0+512),w
  6013  1288  1D03               	skipz
  6014  1289  2A8C               	goto	u8695
  6015  128A  082C               	movf	___ftdiv@f2^(0+512),w
  6016  128B  022F               	subwf	___ftdiv@f1^(0+512),w
  6017  128C                     u8695:	
  6018  128C  1C03               	skipc
  6019  128D  2A95               	goto	l6706
  6020  128E  082C               	movf	___ftdiv@f2^(0+512),w
  6021  128F  02AF               	subwf	___ftdiv@f1^(0+512),f
  6022  1290  082D               	movf	(___ftdiv@f2+1)^(0+512),w
  6023  1291  3BB0               	subwfb	(___ftdiv@f1+1)^(0+512),f
  6024  1292  082E               	movf	(___ftdiv@f2+2)^(0+512),w
  6025  1293  3BB1               	subwfb	(___ftdiv@f1+2)^(0+512),f
  6026  1294  1437               	bsf	___ftdiv@f3^(0+512),0
  6027  1295                     l6706:	
  6028  1295  3001               	movlw	1
  6029  1296                     u8705:	
  6030  1296  35AF               	lslf	___ftdiv@f1^(0+512),f
  6031  1297  0DB0               	rlf	(___ftdiv@f1+1)^(0+512),f
  6032  1298  0DB1               	rlf	(___ftdiv@f1+2)^(0+512),f
  6033  1299  0B89               	decfsz	9,f
  6034  129A  2A96               	goto	u8705
  6035  129B  3001               	movlw	1
  6036  129C  02B6               	subwf	___ftdiv@cntr^(0+512),f
  6037  129D  1D03               	btfss	3,2
  6038  129E  2A7C               	goto	l6698
  6039  129F  0837               	movf	___ftdiv@f3^(0+512),w
  6040  12A0  00A0               	movwf	___ftpack@arg^(0+512)
  6041  12A1  0838               	movf	(___ftdiv@f3+1)^(0+512),w
  6042  12A2  00A1               	movwf	(___ftpack@arg+1)^(0+512)
  6043  12A3  0839               	movf	(___ftdiv@f3+2)^(0+512),w
  6044  12A4  00A2               	movwf	(___ftpack@arg+2)^(0+512)
  6045  12A5  083A               	movf	___ftdiv@exp^(0+512),w
  6046  12A6  00B2               	movwf	??___ftdiv^(0+512)
  6047  12A7  0832               	movf	??___ftdiv^(0+512),w
  6048  12A8  00A3               	movwf	___ftpack@exp^(0+512)
  6049  12A9  083B               	movf	___ftdiv@sign^(0+512),w
  6050  12AA  00B3               	movwf	(??___ftdiv+1)^(0+512)
  6051  12AB  0833               	movf	(??___ftdiv+1)^(0+512),w
  6052  12AC  00A4               	movwf	___ftpack@sign^(0+512)
  6053  12AD  319F  279F         	fcall	___ftpack
  6054  12AF  0024               	movlb	4	; select bank4
  6055  12B0  0820               	movf	?___ftpack^(0+512),w
  6056  12B1  00AC               	movwf	?___ftdiv^(0+512)
  6057  12B2  0821               	movf	(?___ftpack+1)^(0+512),w
  6058  12B3  00AD               	movwf	(?___ftdiv+1)^(0+512)
  6059  12B4  0822               	movf	(?___ftpack+2)^(0+512),w
  6060  12B5  00AE               	movwf	(?___ftdiv+2)^(0+512)
  6061  12B6  0008               	return
  6062  12B7                     __end_of___ftdiv:	
  6063                           
  6064                           	psect	text6
  6065  1F9F                     __ptext6:	
  6066 ;; *************** function ___ftpack *****************
  6067 ;; Defined at:
  6068 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  6069 ;; Parameters:    Size  Location     Type
  6070 ;;  arg             3    0[BANK4 ] unsigned um
  6071 ;;  exp             1    3[BANK4 ] unsigned char 
  6072 ;;  sign            1    4[BANK4 ] unsigned char 
  6073 ;; Auto vars:     Size  Location     Type
  6074 ;;		None
  6075 ;; Return value:  Size  Location     Type
  6076 ;;                  3    0[BANK4 ] float 
  6077 ;; Registers used:
  6078 ;;		wreg, status,2, status,0
  6079 ;; Tracked objects:
  6080 ;;		On entry : 0/0
  6081 ;;		On exit  : 0/0
  6082 ;;		Unchanged: 0/0
  6083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6084 ;;      Params:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  6085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6086 ;;      Temps:          0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  6087 ;;      Totals:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  6088 ;;Total ram usage:        8 bytes
  6089 ;; Hardware stack levels used:    1
  6090 ;; Hardware stack levels required when called:    7
  6091 ;; This function calls:
  6092 ;;		Nothing
  6093 ;; This function is called by:
  6094 ;;		___ftdiv
  6095 ;;		___ftmul
  6096 ;;		___lwtoft
  6097 ;; This function uses a non-reentrant model
  6098 ;;
  6099                           
  6100                           
  6101                           ;psect for function ___ftpack
  6102  1F9F                     ___ftpack:	
  6103                           
  6104                           ;incstack = 0
  6105                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6106  1F9F  0024               	movlb	4	; select bank4
  6107  1FA0  0823               	movf	___ftpack@exp^(0+512),w
  6108  1FA1  1903               	btfsc	3,2
  6109  1FA2  2FA8               	goto	l6470
  6110  1FA3  0822               	movf	(___ftpack@arg+2)^(0+512),w
  6111  1FA4  0421               	iorwf	(___ftpack@arg+1)^(0+512),w
  6112  1FA5  0420               	iorwf	___ftpack@arg^(0+512),w
  6113  1FA6  1D03               	skipz
  6114  1FA7  2FB9               	goto	l6476
  6115  1FA8                     l6470:	
  6116  1FA8  3000               	movlw	0
  6117  1FA9  00A0               	movwf	?___ftpack^(0+512)
  6118  1FAA  3000               	movlw	0
  6119  1FAB  00A1               	movwf	(?___ftpack+1)^(0+512)
  6120  1FAC  3000               	movlw	0
  6121  1FAD  00A2               	movwf	(?___ftpack+2)^(0+512)
  6122  1FAE  0008               	return
  6123  1FAF                     l6474:	
  6124  1FAF  3001               	movlw	1
  6125  1FB0  00A5               	movwf	??___ftpack^(0+512)
  6126  1FB1  0825               	movf	??___ftpack^(0+512),w
  6127  1FB2  07A3               	addwf	___ftpack@exp^(0+512),f
  6128  1FB3  3001               	movlw	1
  6129  1FB4                     u8295:	
  6130  1FB4  36A2               	lsrf	(___ftpack@arg+2)^(0+512),f
  6131  1FB5  0CA1               	rrf	(___ftpack@arg+1)^(0+512),f
  6132  1FB6  0CA0               	rrf	___ftpack@arg^(0+512),f
  6133  1FB7  0B89               	decfsz	9,f
  6134  1FB8  2FB4               	goto	u8295
  6135  1FB9                     l6476:	
  6136  1FB9  30FE               	movlw	254
  6137  1FBA  0522               	andwf	(___ftpack@arg+2)^(0+512),w
  6138  1FBB  1903               	btfsc	3,2
  6139  1FBC  2FD2               	goto	l1252
  6140  1FBD  2FAF               	goto	l6474
  6141  1FBE                     l6478:	
  6142  1FBE  3001               	movlw	1
  6143  1FBF  00A5               	movwf	??___ftpack^(0+512)
  6144  1FC0  0825               	movf	??___ftpack^(0+512),w
  6145  1FC1  07A3               	addwf	___ftpack@exp^(0+512),f
  6146  1FC2  3001               	movlw	1
  6147  1FC3  07A0               	addwf	___ftpack@arg^(0+512),f
  6148  1FC4  3000               	movlw	0
  6149  1FC5  1803               	skipnc
  6150  1FC6  3001               	movlw	1
  6151  1FC7  07A1               	addwf	(___ftpack@arg+1)^(0+512),f
  6152  1FC8  3000               	movlw	0
  6153  1FC9  1803               	skipnc
  6154  1FCA  3001               	movlw	1
  6155  1FCB  07A2               	addwf	(___ftpack@arg+2)^(0+512),f
  6156  1FCC  3001               	movlw	1
  6157  1FCD                     u8315:	
  6158  1FCD  36A2               	lsrf	(___ftpack@arg+2)^(0+512),f
  6159  1FCE  0CA1               	rrf	(___ftpack@arg+1)^(0+512),f
  6160  1FCF  0CA0               	rrf	___ftpack@arg^(0+512),f
  6161  1FD0  0B89               	decfsz	9,f
  6162  1FD1  2FCD               	goto	u8315
  6163  1FD2                     l1252:	
  6164  1FD2  30FF               	movlw	255
  6165  1FD3  0522               	andwf	(___ftpack@arg+2)^(0+512),w
  6166  1FD4  1903               	btfsc	3,2
  6167  1FD5  2FDF               	goto	l6486
  6168  1FD6  2FBE               	goto	l6478
  6169  1FD7                     l6484:	
  6170  1FD7  3001               	movlw	1
  6171  1FD8  02A3               	subwf	___ftpack@exp^(0+512),f
  6172  1FD9  3001               	movlw	1
  6173  1FDA                     u8335:	
  6174  1FDA  35A0               	lslf	___ftpack@arg^(0+512),f
  6175  1FDB  0DA1               	rlf	(___ftpack@arg+1)^(0+512),f
  6176  1FDC  0DA2               	rlf	(___ftpack@arg+2)^(0+512),f
  6177  1FDD  0B89               	decfsz	9,f
  6178  1FDE  2FDA               	goto	u8335
  6179  1FDF                     l6486:	
  6180  1FDF  1FA1               	btfss	(___ftpack@arg+1)^(0+512),7
  6181  1FE0  2FD7               	goto	l6484
  6182  1FE1  1823               	btfsc	___ftpack@exp^(0+512),0
  6183  1FE2  2FE9               	goto	l1258
  6184  1FE3  30FF               	movlw	255
  6185  1FE4  05A0               	andwf	___ftpack@arg^(0+512),f
  6186  1FE5  307F               	movlw	127
  6187  1FE6  05A1               	andwf	(___ftpack@arg+1)^(0+512),f
  6188  1FE7  30FF               	movlw	255
  6189  1FE8  05A2               	andwf	(___ftpack@arg+2)^(0+512),f
  6190  1FE9                     l1258:	
  6191  1FE9  1003               	clrc
  6192  1FEA  0CA3               	rrf	___ftpack@exp^(0+512),f
  6193  1FEB  0823               	movf	___ftpack@exp^(0+512),w
  6194  1FEC  00A5               	movwf	??___ftpack^(0+512)
  6195  1FED  01A6               	clrf	(??___ftpack^(0+512)+1)
  6196  1FEE  01A7               	clrf	(??___ftpack^(0+512)+2)
  6197  1FEF  3010               	movlw	16
  6198  1FF0                     u8365:	
  6199  1FF0  35A5               	lslf	??___ftpack^(0+512),f
  6200  1FF1  0DA6               	rlf	(??___ftpack^(0+512)+1),f
  6201  1FF2  0DA7               	rlf	(??___ftpack^(0+512)+2),f
  6202  1FF3  0B89               	decfsz	9,f
  6203  1FF4  2FF0               	goto	u8365
  6204  1FF5  0825               	movf	??___ftpack^(0+512),w
  6205  1FF6  04A0               	iorwf	___ftpack@arg^(0+512),f
  6206  1FF7  0826               	movf	(??___ftpack+1)^(0+512),w
  6207  1FF8  04A1               	iorwf	(___ftpack@arg+1)^(0+512),f
  6208  1FF9  0827               	movf	(??___ftpack+2)^(0+512),w
  6209  1FFA  04A2               	iorwf	(___ftpack@arg+2)^(0+512),f
  6210  1FFB  0824               	movf	___ftpack@sign^(0+512),w
  6211  1FFC  1903               	btfsc	3,2
  6212  1FFD  0008               	return
  6213  1FFE  17A2               	bsf	(___ftpack@arg^(0+512)+2),7
  6214  1FFF  0008               	return
  6215  2000                     __end_of___ftpack:	
  6216                           
  6217                           	psect	text7
  6218  1D11                     __ptext7:	
  6219 ;; *************** function _InternalADC_Read *****************
  6220 ;; Defined at:
  6221 ;;		line 97 in file "ADC.c"
  6222 ;; Parameters:    Size  Location     Type
  6223 ;;  channel         1    wreg     unsigned char 
  6224 ;; Auto vars:     Size  Location     Type
  6225 ;;  channel         1   14[BANK4 ] unsigned char 
  6226 ;; Return value:  Size  Location     Type
  6227 ;;                  2   10[BANK4 ] unsigned int 
  6228 ;; Registers used:
  6229 ;;		wreg, status,2, status,0, pclath, cstack
  6230 ;; Tracked objects:
  6231 ;;		On entry : 0/0
  6232 ;;		On exit  : 0/0
  6233 ;;		Unchanged: 0/0
  6234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6235 ;;      Params:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  6236 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6237 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  6238 ;;      Totals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  6239 ;;Total ram usage:        5 bytes
  6240 ;; Hardware stack levels used:    1
  6241 ;; Hardware stack levels required when called:    8
  6242 ;; This function calls:
  6243 ;;		_delayUS
  6244 ;; This function is called by:
  6245 ;;		_ReadVoltage
  6246 ;; This function uses a non-reentrant model
  6247 ;;
  6248                           
  6249                           
  6250                           ;psect for function _InternalADC_Read
  6251  1D11                     _InternalADC_Read:	
  6252                           
  6253                           ;incstack = 0
  6254                           ; Regs used in _InternalADC_Read: [wreg+status,2+status,0+pclath+cstack]
  6255                           ;InternalADC_Read@channel stored from wreg
  6256  1D11  0024               	movlb	4	; select bank4
  6257  1D12  00AE               	movwf	InternalADC_Read@channel^(0+512)
  6258                           
  6259                           ;ADC.c: 99: ADCON0 =0;
  6260  1D13  0021               	movlb	1	; select bank1
  6261  1D14  019D               	clrf	29	;volatile
  6262                           
  6263                           ;ADC.c: 100: ADCON1 =0;
  6264  1D15  019E               	clrf	30	;volatile
  6265                           
  6266                           ;ADC.c: 101: ADCON1 |= 0b01010000;
  6267  1D16  3050               	movlw	80
  6268  1D17  0024               	movlb	4	; select bank4
  6269  1D18  00AC               	movwf	??_InternalADC_Read^(0+512)
  6270  1D19  082C               	movf	??_InternalADC_Read^(0+512),w
  6271  1D1A  0021               	movlb	1	; select bank1
  6272  1D1B  049E               	iorwf	30,f	;volatile
  6273                           
  6274                           ;ADC.c: 102: FVRCON |= 0b10000000;
  6275  1D1C  0022               	movlb	2	; select bank2
  6276  1D1D  1797               	bsf	23,7	;volatile
  6277                           
  6278                           ;ADC.c: 103: FVRCON |= 0b00000011;
  6279  1D1E  3003               	movlw	3
  6280  1D1F  0024               	movlb	4	; select bank4
  6281  1D20  00AC               	movwf	??_InternalADC_Read^(0+512)
  6282  1D21  082C               	movf	??_InternalADC_Read^(0+512),w
  6283  1D22  0022               	movlb	2	; select bank2
  6284  1D23  0497               	iorwf	23,f	;volatile
  6285  1D24                     l1020:	
  6286                           ;ADC.c: 104: while(!(FVRCON & 0b01000000));
  6287                           
  6288  1D24  1F17               	btfss	23,6	;volatile
  6289  1D25  2D24               	goto	l1020
  6290                           
  6291                           ;ADC.c: 105: ADCON0 |= (channel << 2);
  6292  1D26  0024               	movlb	4	; select bank4
  6293  1D27  082E               	movf	InternalADC_Read@channel^(0+512),w
  6294  1D28  00AC               	movwf	??_InternalADC_Read^(0+512)
  6295  1D29  3001               	movlw	1
  6296  1D2A                     u8625:	
  6297  1D2A  35AC               	lslf	??_InternalADC_Read^(0+512),f
  6298  1D2B  3EFF               	addlw	-1
  6299  1D2C  1D03               	skipz
  6300  1D2D  2D2A               	goto	u8625
  6301  1D2E  352C               	lslf	??_InternalADC_Read^(0+512),w
  6302  1D2F  00AD               	movwf	(??_InternalADC_Read+1)^(0+512)
  6303  1D30  082D               	movf	(??_InternalADC_Read+1)^(0+512),w
  6304  1D31  0021               	movlb	1	; select bank1
  6305  1D32  049D               	iorwf	29,f	;volatile
  6306                           
  6307                           ;ADC.c: 106: ADCON1 |= 0b10000011;
  6308  1D33  3083               	movlw	131
  6309  1D34  0024               	movlb	4	; select bank4
  6310  1D35  00AC               	movwf	??_InternalADC_Read^(0+512)
  6311  1D36  082C               	movf	??_InternalADC_Read^(0+512),w
  6312  1D37  0021               	movlb	1	; select bank1
  6313  1D38  049E               	iorwf	30,f	;volatile
  6314                           
  6315                           ;ADC.c: 107: ADCON0 |= 0b00000001;
  6316  1D39  141D               	bsf	29,0	;volatile
  6317                           
  6318                           ;ADC.c: 108: (PIE1bits.ADIE=0);
  6319  1D3A  1311               	bcf	17,6	;volatile
  6320                           
  6321                           ;ADC.c: 109: delayUS(5);
  6322  1D3B  3000               	movlw	0
  6323  1D3C  0024               	movlb	4	; select bank4
  6324  1D3D  00A3               	movwf	(delayUS@US+3)^(0+512)
  6325  1D3E  3000               	movlw	0
  6326  1D3F  00A2               	movwf	(delayUS@US+2)^(0+512)
  6327  1D40  3000               	movlw	0
  6328  1D41  00A1               	movwf	(delayUS@US+1)^(0+512)
  6329  1D42  3005               	movlw	5
  6330  1D43  00A0               	movwf	delayUS@US^(0+512)
  6331  1D44  319B  23DB  319D   	fcall	_delayUS
  6332                           
  6333                           ;ADC.c: 110: ADCON0 |= 0b00000010;
  6334  1D47  0021               	movlb	1	; select bank1
  6335  1D48  149D               	bsf	29,1	;volatile
  6336  1D49                     l1023:	
  6337                           ;ADC.c: 111: while(ADCON0 & 0b00000010);
  6338                           
  6339  1D49  189D               	btfsc	29,1	;volatile
  6340  1D4A  2D49               	goto	l1023
  6341                           
  6342                           ;ADC.c: 112: return ((ADRESH << 8) + ADRESL);
  6343  1D4B  081C               	movf	28,w	;volatile
  6344  1D4C  0024               	movlb	4	; select bank4
  6345  1D4D  01AB               	clrf	(?_InternalADC_Read+1)^(0+512)
  6346  1D4E  07AB               	addwf	(?_InternalADC_Read+1)^(0+512),f
  6347  1D4F  0021               	movlb	1	; select bank1
  6348  1D50  081B               	movf	27,w	;volatile
  6349  1D51  0024               	movlb	4	; select bank4
  6350  1D52  01AA               	clrf	?_InternalADC_Read^(0+512)
  6351  1D53  07AA               	addwf	?_InternalADC_Read^(0+512),f
  6352  1D54  0008               	return
  6353  1D55                     __end_of_InternalADC_Read:	
  6354                           
  6355                           	psect	text8
  6356  184D                     __ptext8:	
  6357 ;; *************** function _DisableInternalADC *****************
  6358 ;; Defined at:
  6359 ;;		line 120 in file "ADC.c"
  6360 ;; Parameters:    Size  Location     Type
  6361 ;;		None
  6362 ;; Auto vars:     Size  Location     Type
  6363 ;;		None
  6364 ;; Return value:  Size  Location     Type
  6365 ;;		None               void
  6366 ;; Registers used:
  6367 ;;		wreg, status,2, status,0
  6368 ;; Tracked objects:
  6369 ;;		On entry : 0/0
  6370 ;;		On exit  : 0/0
  6371 ;;		Unchanged: 0/0
  6372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6375 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6376 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6377 ;;Total ram usage:        1 bytes
  6378 ;; Hardware stack levels used:    1
  6379 ;; Hardware stack levels required when called:    7
  6380 ;; This function calls:
  6381 ;;		Nothing
  6382 ;; This function is called by:
  6383 ;;		_ReadVoltage
  6384 ;; This function uses a non-reentrant model
  6385 ;;
  6386                           
  6387                           
  6388                           ;psect for function _DisableInternalADC
  6389  184D                     _DisableInternalADC:	
  6390                           
  6391                           ;ADC.c: 122: ADCON0 &= ~0b00000001;
  6392                           
  6393                           ;incstack = 0
  6394                           ; Regs used in _DisableInternalADC: [wreg+status,2+status,0]
  6395  184D  30FE               	movlw	254
  6396  184E  0024               	movlb	4	; select bank4
  6397  184F  00A0               	movwf	??_DisableInternalADC^(0+512)
  6398  1850  0820               	movf	??_DisableInternalADC^(0+512),w
  6399  1851  0021               	movlb	1	; select bank1
  6400  1852  059D               	andwf	29,f	;volatile
  6401  1853  0008               	return
  6402  1854                     __end_of_DisableInternalADC:	
  6403                           
  6404                           	psect	text9
  6405  18DA                     __ptext9:	
  6406 ;; *************** function _PS_2_INIT *****************
  6407 ;; Defined at:
  6408 ;;		line 100 in file "PS_2.c"
  6409 ;; Parameters:    Size  Location     Type
  6410 ;;		None
  6411 ;; Auto vars:     Size  Location     Type
  6412 ;;		None
  6413 ;; Return value:  Size  Location     Type
  6414 ;;		None               void
  6415 ;; Registers used:
  6416 ;;		wreg, status,2, status,0, pclath, cstack
  6417 ;; Tracked objects:
  6418 ;;		On entry : 0/0
  6419 ;;		On exit  : 0/0
  6420 ;;		Unchanged: 0/0
  6421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6426 ;;Total ram usage:        0 bytes
  6427 ;; Hardware stack levels used:    1
  6428 ;; Hardware stack levels required when called:   10
  6429 ;; This function calls:
  6430 ;;		_Clock_TRIS
  6431 ;;		_Data_TRIS
  6432 ;;		_Init_PS_2_Send
  6433 ;;		_Timer2Init
  6434 ;; This function is called by:
  6435 ;;		_main
  6436 ;; This function uses a non-reentrant model
  6437 ;;
  6438                           
  6439                           
  6440                           ;psect for function _PS_2_INIT
  6441  18DA                     _PS_2_INIT:	
  6442                           
  6443                           ;PS_2.c: 103: Clock_TRIS(1);
  6444                           
  6445                           ;incstack = 0
  6446                           ; Regs used in _PS_2_INIT: [wreg+status,2+status,0+pclath+cstack]
  6447  18DA  3001               	movlw	1
  6448  18DB  3198  2091  3198   	fcall	_Clock_TRIS
  6449                           
  6450                           ;PS_2.c: 104: Data_TRIS(1);
  6451  18DE  3001               	movlw	1
  6452  18DF  3198  209C  3198   	fcall	_Data_TRIS
  6453                           
  6454                           ;PS_2.c: 105: Timer2Init(255);
  6455  18E2  30FF               	movlw	255
  6456  18E3  319A  222A  3198   	fcall	_Timer2Init
  6457                           
  6458                           ;PS_2.c: 106: Init_PS_2_Send();
  6459  18E6  3186  266F         	fcall	_Init_PS_2_Send
  6460  18E8  0008               	return
  6461  18E9                     __end_of_PS_2_INIT:	
  6462                           
  6463                           	psect	text10
  6464  1A2A                     __ptext10:	
  6465 ;; *************** function _Timer2Init *****************
  6466 ;; Defined at:
  6467 ;;		line 41 in file "Timer.c"
  6468 ;; Parameters:    Size  Location     Type
  6469 ;;  time            1    wreg     unsigned char 
  6470 ;; Auto vars:     Size  Location     Type
  6471 ;;  time            1    2[BANK4 ] unsigned char 
  6472 ;;  prescaler       1    4[BANK4 ] unsigned char 
  6473 ;;  postscaler      1    3[BANK4 ] unsigned char 
  6474 ;; Return value:  Size  Location     Type
  6475 ;;		None               void
  6476 ;; Registers used:
  6477 ;;		wreg, status,2, status,0, pclath, cstack
  6478 ;; Tracked objects:
  6479 ;;		On entry : 0/0
  6480 ;;		On exit  : 0/0
  6481 ;;		Unchanged: 0/0
  6482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6484 ;;      Locals:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  6485 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  6486 ;;      Totals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  6487 ;;Total ram usage:        5 bytes
  6488 ;; Hardware stack levels used:    1
  6489 ;; Hardware stack levels required when called:    8
  6490 ;; This function calls:
  6491 ;;		_Timer2ON
  6492 ;; This function is called by:
  6493 ;;		_PS_2_INIT
  6494 ;; This function uses a non-reentrant model
  6495 ;;
  6496                           
  6497                           
  6498                           ;psect for function _Timer2Init
  6499  1A2A                     _Timer2Init:	
  6500                           
  6501                           ;incstack = 0
  6502                           ; Regs used in _Timer2Init: [wreg+status,2+status,0+pclath+cstack]
  6503                           ;Timer2Init@time stored from wreg
  6504  1A2A  0024               	movlb	4	; select bank4
  6505  1A2B  00A2               	movwf	Timer2Init@time^(0+512)
  6506                           
  6507                           ;Timer.c: 43: unsigned char postscaler =0xF;
  6508  1A2C  300F               	movlw	15
  6509  1A2D  00A0               	movwf	??_Timer2Init^(0+512)
  6510  1A2E  0820               	movf	??_Timer2Init^(0+512),w
  6511  1A2F  00A3               	movwf	Timer2Init@postscaler^(0+512)
  6512                           
  6513                           ;Timer.c: 44: unsigned char prescaler =3;
  6514  1A30  3003               	movlw	3
  6515  1A31  00A0               	movwf	??_Timer2Init^(0+512)
  6516  1A32  0820               	movf	??_Timer2Init^(0+512),w
  6517  1A33  00A4               	movwf	Timer2Init@prescaler^(0+512)
  6518                           
  6519                           ;Timer.c: 45: CCP2CONbits.CCP2M = 0b1010;
  6520  1A34  0025               	movlb	5	; select bank5
  6521  1A35  081A               	movf	26,w	;volatile
  6522  1A36  39F0               	andlw	-16
  6523  1A37  380A               	iorlw	10
  6524  1A38  009A               	movwf	26	;volatile
  6525                           
  6526                           ;Timer.c: 46: PR2 = time;
  6527  1A39  0024               	movlb	4	; select bank4
  6528  1A3A  0822               	movf	Timer2Init@time^(0+512),w
  6529  1A3B  0020               	movlb	0	; select bank0
  6530  1A3C  009B               	movwf	27	;volatile
  6531                           
  6532                           ;Timer.c: 47: T2CON |= postscaler << 3;
  6533  1A3D  0024               	movlb	4	; select bank4
  6534  1A3E  0823               	movf	Timer2Init@postscaler^(0+512),w
  6535  1A3F  00A0               	movwf	??_Timer2Init^(0+512)
  6536  1A40  3002               	movlw	2
  6537  1A41                     u8525:	
  6538  1A41  35A0               	lslf	??_Timer2Init^(0+512),f
  6539  1A42  3EFF               	addlw	-1
  6540  1A43  1D03               	skipz
  6541  1A44  2A41               	goto	u8525
  6542  1A45  3520               	lslf	??_Timer2Init^(0+512),w
  6543  1A46  00A1               	movwf	(??_Timer2Init+1)^(0+512)
  6544  1A47  0821               	movf	(??_Timer2Init+1)^(0+512),w
  6545  1A48  0020               	movlb	0	; select bank0
  6546  1A49  049C               	iorwf	28,f	;volatile
  6547                           
  6548                           ;Timer.c: 48: T2CON |= prescaler;
  6549  1A4A  0024               	movlb	4	; select bank4
  6550  1A4B  0824               	movf	Timer2Init@prescaler^(0+512),w
  6551  1A4C  00A0               	movwf	??_Timer2Init^(0+512)
  6552  1A4D  0820               	movf	??_Timer2Init^(0+512),w
  6553  1A4E  0020               	movlb	0	; select bank0
  6554  1A4F  049C               	iorwf	28,f	;volatile
  6555                           
  6556                           ;Timer.c: 50: Timer2ON();
  6557  1A50  3198  2029         	fcall	_Timer2ON
  6558                           
  6559                           ;Timer.c: 51: PIE1bits.TMR2IE = 0;
  6560  1A52  0021               	movlb	1	; select bank1
  6561  1A53  1091               	bcf	17,1	;volatile
  6562  1A54  0008               	return
  6563  1A55                     __end_of_Timer2Init:	
  6564                           
  6565                           	psect	text11
  6566  1829                     __ptext11:	
  6567 ;; *************** function _Timer2ON *****************
  6568 ;; Defined at:
  6569 ;;		line 59 in file "Timer.c"
  6570 ;; Parameters:    Size  Location     Type
  6571 ;;		None
  6572 ;; Auto vars:     Size  Location     Type
  6573 ;;		None
  6574 ;; Return value:  Size  Location     Type
  6575 ;;		None               void
  6576 ;; Registers used:
  6577 ;;		None
  6578 ;; Tracked objects:
  6579 ;;		On entry : 0/0
  6580 ;;		On exit  : 0/0
  6581 ;;		Unchanged: 0/0
  6582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6586 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6587 ;;Total ram usage:        0 bytes
  6588 ;; Hardware stack levels used:    1
  6589 ;; Hardware stack levels required when called:    7
  6590 ;; This function calls:
  6591 ;;		Nothing
  6592 ;; This function is called by:
  6593 ;;		_Timer2Init
  6594 ;; This function uses a non-reentrant model
  6595 ;;
  6596                           
  6597                           
  6598                           ;psect for function _Timer2ON
  6599  1829                     _Timer2ON:	
  6600                           
  6601                           ;Timer.c: 61: T2CONbits.TMR2ON = 1;
  6602                           
  6603                           ;incstack = 0
  6604                           ; Regs used in _Timer2ON: []
  6605  1829  0020               	movlb	0	; select bank0
  6606  182A  151C               	bsf	28,2	;volatile
  6607  182B  0008               	return
  6608  182C                     __end_of_Timer2ON:	
  6609                           
  6610                           	psect	text12
  6611  066F                     __ptext12:	
  6612 ;; *************** function _Init_PS_2_Send *****************
  6613 ;; Defined at:
  6614 ;;		line 994 in file "PS_2.c"
  6615 ;; Parameters:    Size  Location     Type
  6616 ;;		None
  6617 ;; Auto vars:     Size  Location     Type
  6618 ;;		None
  6619 ;; Return value:  Size  Location     Type
  6620 ;;                  1    wreg      unsigned char 
  6621 ;; Registers used:
  6622 ;;		wreg, status,2, status,0, pclath, cstack
  6623 ;; Tracked objects:
  6624 ;;		On entry : 0/0
  6625 ;;		On exit  : 0/0
  6626 ;;		Unchanged: 0/0
  6627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6631 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6632 ;;Total ram usage:        0 bytes
  6633 ;; Hardware stack levels used:    1
  6634 ;; Hardware stack levels required when called:    9
  6635 ;; This function calls:
  6636 ;;		_PS_2_DISABLE_INTERRUPT
  6637 ;;		_Send_PS2
  6638 ;;		_delayUS
  6639 ;; This function is called by:
  6640 ;;		_PS_2_INIT
  6641 ;; This function uses a non-reentrant model
  6642 ;;
  6643                           
  6644                           
  6645                           ;psect for function _Init_PS_2_Send
  6646  066F                     _Init_PS_2_Send:	
  6647                           
  6648                           ;PS_2.c: 996: PS_2_DISABLE_INTERRUPT(0b00100000);
  6649                           
  6650                           ;incstack = 0
  6651                           ; Regs used in _Init_PS_2_Send: [wreg+status,2+status,0+pclath+cstack]
  6652  066F  3020               	movlw	32
  6653  0670  3199  2165  3186   	fcall	_PS_2_DISABLE_INTERRUPT
  6654                           
  6655                           ;PS_2.c: 999: if(Send_PS2(0x07))
  6656  0673  3007               	movlw	7
  6657  0674  318E  266C  3186   	fcall	_Send_PS2
  6658  0677  3A00               	xorlw	0
  6659  0678  1D03               	btfss	3,2
  6660  0679  0008               	return
  6661                           
  6662                           ;PS_2.c: 1002: }
  6663                           ;PS_2.c: 1003: delayUS(5000);
  6664                           
  6665                           ;PS_2.c: 1000: {
  6666                           ;PS_2.c: 1001: return 0;
  6667                           ;	Return value of _Init_PS_2_Send is never used
  6668  067A  3000               	movlw	0
  6669  067B  0024               	movlb	4	; select bank4
  6670  067C  00A3               	movwf	(delayUS@US+3)^(0+512)
  6671  067D  3000               	movlw	0
  6672  067E  00A2               	movwf	(delayUS@US+2)^(0+512)
  6673  067F  3013               	movlw	19
  6674  0680  00A1               	movwf	(delayUS@US+1)^(0+512)
  6675  0681  3088               	movlw	136
  6676  0682  00A0               	movwf	delayUS@US^(0+512)
  6677  0683  319B  23DB  3186   	fcall	_delayUS
  6678                           
  6679                           ;PS_2.c: 1006: if(Send_PS2(0xED))
  6680  0686  30ED               	movlw	237
  6681  0687  318E  266C  3186   	fcall	_Send_PS2
  6682  068A  3A00               	xorlw	0
  6683  068B  1D03               	btfss	3,2
  6684  068C  0008               	return
  6685                           
  6686                           ;PS_2.c: 1009: }
  6687                           ;PS_2.c: 1010: delayUS(5000);
  6688                           
  6689                           ;PS_2.c: 1007: {
  6690                           ;PS_2.c: 1008: return 0;
  6691                           ;	Return value of _Init_PS_2_Send is never used
  6692  068D  3000               	movlw	0
  6693  068E  0024               	movlb	4	; select bank4
  6694  068F  00A3               	movwf	(delayUS@US+3)^(0+512)
  6695  0690  3000               	movlw	0
  6696  0691  00A2               	movwf	(delayUS@US+2)^(0+512)
  6697  0692  3013               	movlw	19
  6698  0693  00A1               	movwf	(delayUS@US+1)^(0+512)
  6699  0694  3088               	movlw	136
  6700  0695  00A0               	movwf	delayUS@US^(0+512)
  6701  0696  319B  23DB  3186   	fcall	_delayUS
  6702                           
  6703                           ;PS_2.c: 1011: if(Send_PS2(0x00))
  6704  0699  3000               	movlw	0
  6705  069A  318E  266C  3186   	fcall	_Send_PS2
  6706  069D  3A00               	xorlw	0
  6707  069E  1D03               	btfss	3,2
  6708  069F  0008               	return
  6709                           
  6710                           ;PS_2.c: 1014: }
  6711                           ;PS_2.c: 1017: if(Send_PS2(0xf4))
  6712                           
  6713                           ;PS_2.c: 1012: {
  6714                           ;PS_2.c: 1013: return 0;
  6715                           ;	Return value of _Init_PS_2_Send is never used
  6716  06A0  30F4               	movlw	244
  6717  06A1  318E  266C  3186   	fcall	_Send_PS2
  6718  06A4  3A00               	xorlw	0
  6719  06A5  1D03               	btfss	3,2
  6720  06A6  0008               	return
  6721                           
  6722                           ;PS_2.c: 1020: }
  6723                           ;PS_2.c: 1023: if(Send_PS2(0xf4))
  6724                           
  6725                           ;PS_2.c: 1018: {
  6726                           ;PS_2.c: 1019: return 0;
  6727                           ;	Return value of _Init_PS_2_Send is never used
  6728  06A7  30F4               	movlw	244
  6729  06A8  318E  266C  3186   	fcall	_Send_PS2
  6730  06AB  3A00               	xorlw	0
  6731  06AC  1D03               	btfss	3,2
  6732  06AD  0008               	return
  6733                           
  6734                           ;PS_2.c: 1026: }
  6735                           ;PS_2.c: 1029: if(Send_PS2(0xf0))
  6736                           
  6737                           ;PS_2.c: 1024: {
  6738                           ;PS_2.c: 1025: return 0;
  6739                           ;	Return value of _Init_PS_2_Send is never used
  6740  06AE  30F0               	movlw	240
  6741  06AF  318E  266C  3186   	fcall	_Send_PS2
  6742  06B2  3A00               	xorlw	0
  6743  06B3  1D03               	btfss	3,2
  6744  06B4  0008               	return
  6745                           
  6746                           ;PS_2.c: 1032: }
  6747                           ;PS_2.c: 1033: delayUS(100);
  6748                           
  6749                           ;PS_2.c: 1030: {
  6750                           ;PS_2.c: 1031: return 0;
  6751                           ;	Return value of _Init_PS_2_Send is never used
  6752  06B5  3000               	movlw	0
  6753  06B6  0024               	movlb	4	; select bank4
  6754  06B7  00A3               	movwf	(delayUS@US+3)^(0+512)
  6755  06B8  3000               	movlw	0
  6756  06B9  00A2               	movwf	(delayUS@US+2)^(0+512)
  6757  06BA  3000               	movlw	0
  6758  06BB  00A1               	movwf	(delayUS@US+1)^(0+512)
  6759  06BC  3064               	movlw	100
  6760  06BD  00A0               	movwf	delayUS@US^(0+512)
  6761  06BE  319B  23DB  3186   	fcall	_delayUS
  6762                           
  6763                           ;PS_2.c: 1034: if(Send_PS2(0x02))
  6764  06C1  3002               	movlw	2
  6765  06C2  318E  266C  3186   	fcall	_Send_PS2
  6766  06C5  3A00               	xorlw	0
  6767  06C6  1D03               	btfss	3,2
  6768  06C7  0008               	return
  6769                           
  6770                           ;PS_2.c: 1037: }
  6771                           ;PS_2.c: 1040: if(Send_PS2(0xf3))
  6772                           
  6773                           ;PS_2.c: 1035: {
  6774                           ;PS_2.c: 1036: return 0;
  6775                           ;	Return value of _Init_PS_2_Send is never used
  6776  06C8  30F3               	movlw	243
  6777  06C9  318E  266C  3186   	fcall	_Send_PS2
  6778  06CC  3A00               	xorlw	0
  6779  06CD  1D03               	btfss	3,2
  6780  06CE  0008               	return
  6781                           
  6782                           ;PS_2.c: 1043: }
  6783                           ;PS_2.c: 1044: delayUS(100);
  6784                           
  6785                           ;PS_2.c: 1041: {
  6786                           ;PS_2.c: 1042: return 0;
  6787                           ;	Return value of _Init_PS_2_Send is never used
  6788  06CF  3000               	movlw	0
  6789  06D0  0024               	movlb	4	; select bank4
  6790  06D1  00A3               	movwf	(delayUS@US+3)^(0+512)
  6791  06D2  3000               	movlw	0
  6792  06D3  00A2               	movwf	(delayUS@US+2)^(0+512)
  6793  06D4  3000               	movlw	0
  6794  06D5  00A1               	movwf	(delayUS@US+1)^(0+512)
  6795  06D6  3064               	movlw	100
  6796  06D7  00A0               	movwf	delayUS@US^(0+512)
  6797  06D8  319B  23DB  3186   	fcall	_delayUS
  6798                           
  6799                           ;PS_2.c: 1045: if(Send_PS2(0x2F))
  6800  06DB  302F               	movlw	47
  6801  06DC  318E  266C         	fcall	_Send_PS2
  6802                           
  6803                           ;PS_2.c: 1046: {
  6804                           ;PS_2.c: 1047: return 0;
  6805                           ;	Return value of _Init_PS_2_Send is never used
  6806  06DE  0008               	return
  6807  06DF                     __end_of_Init_PS_2_Send:	
  6808                           ;PS_2.c: 1048: }
  6809                           ;PS_2.c: 1049: return 1;
  6810                           ;	Return value of _Init_PS_2_Send is never used
  6811                           
  6812                           
  6813                           	psect	text13
  6814  0E6C                     __ptext13:	
  6815 ;; *************** function _Send_PS2 *****************
  6816 ;; Defined at:
  6817 ;;		line 829 in file "PS_2.c"
  6818 ;; Parameters:    Size  Location     Type
  6819 ;;  command         1    wreg     unsigned char 
  6820 ;; Auto vars:     Size  Location     Type
  6821 ;;  command         1   15[BANK4 ] unsigned char 
  6822 ;;  timeout         2   17[BANK4 ] unsigned int 
  6823 ;;  i               1   16[BANK4 ] unsigned char 
  6824 ;;  oddparity       1   14[BANK4 ] unsigned char 
  6825 ;; Return value:  Size  Location     Type
  6826 ;;                  1    wreg      unsigned char 
  6827 ;; Registers used:
  6828 ;;		wreg, status,2, status,0, pclath, cstack
  6829 ;; Tracked objects:
  6830 ;;		On entry : 0/0
  6831 ;;		On exit  : 0/0
  6832 ;;		Unchanged: 0/0
  6833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6835 ;;      Locals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  6836 ;;      Temps:          0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  6837 ;;      Totals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0
  6838 ;;Total ram usage:        9 bytes
  6839 ;; Hardware stack levels used:    1
  6840 ;; Hardware stack levels required when called:    8
  6841 ;; This function calls:
  6842 ;;		_CheckSum_byte
  6843 ;;		_Clock_TRIS
  6844 ;;		_Data_TRIS
  6845 ;;		_READ_PS_2_PIN
  6846 ;;		_delayUS
  6847 ;; This function is called by:
  6848 ;;		_Init_PS_2_Send
  6849 ;;		_Keyboard_Connected
  6850 ;; This function uses a non-reentrant model
  6851 ;;
  6852                           
  6853                           
  6854                           ;psect for function _Send_PS2
  6855  0E6C                     _Send_PS2:	
  6856                           
  6857                           ;incstack = 0
  6858                           ; Regs used in _Send_PS2: [wreg+status,2+status,0+pclath+cstack]
  6859                           ;Send_PS2@command stored from wreg
  6860  0E6C  0024               	movlb	4	; select bank4
  6861  0E6D  00AF               	movwf	Send_PS2@command^(0+512)
  6862                           
  6863                           ;PS_2.c: 831: unsigned char i=0;
  6864  0E6E  01B0               	clrf	Send_PS2@i^(0+512)
  6865                           
  6866                           ;PS_2.c: 832: unsigned char oddparity = CheckSum_byte((unsigned int)command , 3);
  6867  0E6F  082F               	movf	Send_PS2@command^(0+512),w
  6868  0E70  00AA               	movwf	??_Send_PS2^(0+512)
  6869  0E71  01AB               	clrf	(??_Send_PS2^(0+512)+1)
  6870  0E72  082A               	movf	??_Send_PS2^(0+512),w
  6871  0E73  00A0               	movwf	CheckSum_byte@This^(0+512)
  6872  0E74  082B               	movf	(??_Send_PS2+1)^(0+512),w
  6873  0E75  00A1               	movwf	(CheckSum_byte@This+1)^(0+512)
  6874  0E76  3003               	movlw	3
  6875  0E77  00AC               	movwf	(??_Send_PS2+2)^(0+512)
  6876  0E78  082C               	movf	(??_Send_PS2+2)^(0+512),w
  6877  0E79  00A2               	movwf	CheckSum_byte@Odd_Even^(0+512)
  6878  0E7A  319A  22E0  318E   	fcall	_CheckSum_byte
  6879  0E7D  0024               	movlb	4	; select bank4
  6880  0E7E  00AD               	movwf	(??_Send_PS2+3)^(0+512)
  6881  0E7F  082D               	movf	(??_Send_PS2+3)^(0+512),w
  6882  0E80  00AE               	movwf	Send_PS2@oddparity^(0+512)
  6883                           
  6884                           ;PS_2.c: 833: unsigned int timeout =0;
  6885  0E81  01B1               	clrf	Send_PS2@timeout^(0+512)
  6886  0E82  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  6887                           
  6888                           ;PS_2.c: 835: Clock_TRIS(0);
  6889  0E83  3000               	movlw	0
  6890  0E84  3198  2091  318E   	fcall	_Clock_TRIS
  6891                           
  6892                           ;PS_2.c: 836: Data_TRIS(0);
  6893  0E87  3000               	movlw	0
  6894  0E88  3198  209C  318E   	fcall	_Data_TRIS
  6895                           
  6896                           ;PS_2.c: 837: LATA &= ~0b00100000;
  6897  0E8B  30DF               	movlw	223
  6898  0E8C  0024               	movlb	4	; select bank4
  6899  0E8D  00AA               	movwf	??_Send_PS2^(0+512)
  6900  0E8E  082A               	movf	??_Send_PS2^(0+512),w
  6901  0E8F  0022               	movlb	2	; select bank2
  6902  0E90  058C               	andwf	12,f	;volatile
  6903                           
  6904                           ;PS_2.c: 838: delayUS(300);
  6905  0E91  3000               	movlw	0
  6906  0E92  0024               	movlb	4	; select bank4
  6907  0E93  00A3               	movwf	(delayUS@US+3)^(0+512)
  6908  0E94  3000               	movlw	0
  6909  0E95  00A2               	movwf	(delayUS@US+2)^(0+512)
  6910  0E96  3001               	movlw	1
  6911  0E97  00A1               	movwf	(delayUS@US+1)^(0+512)
  6912  0E98  302C               	movlw	44
  6913  0E99  00A0               	movwf	delayUS@US^(0+512)
  6914  0E9A  319B  23DB  318E   	fcall	_delayUS
  6915                           
  6916                           ;PS_2.c: 839: LATA &= ~0b00010000;
  6917  0E9D  30EF               	movlw	239
  6918  0E9E  0024               	movlb	4	; select bank4
  6919  0E9F  00AA               	movwf	??_Send_PS2^(0+512)
  6920  0EA0  082A               	movf	??_Send_PS2^(0+512),w
  6921  0EA1  0022               	movlb	2	; select bank2
  6922  0EA2  058C               	andwf	12,f	;volatile
  6923                           
  6924                           ;PS_2.c: 840: delayUS(20);
  6925  0EA3  3000               	movlw	0
  6926  0EA4  0024               	movlb	4	; select bank4
  6927  0EA5  00A3               	movwf	(delayUS@US+3)^(0+512)
  6928  0EA6  3000               	movlw	0
  6929  0EA7  00A2               	movwf	(delayUS@US+2)^(0+512)
  6930  0EA8  3000               	movlw	0
  6931  0EA9  00A1               	movwf	(delayUS@US+1)^(0+512)
  6932  0EAA  3014               	movlw	20
  6933  0EAB  00A0               	movwf	delayUS@US^(0+512)
  6934  0EAC  319B  23DB  318E   	fcall	_delayUS
  6935                           
  6936                           ;PS_2.c: 841: Clock_TRIS(1);
  6937  0EAF  3001               	movlw	1
  6938  0EB0  3198  2091  318E   	fcall	_Clock_TRIS
  6939                           
  6940                           ;PS_2.c: 842: timeout=0;
  6941  0EB3  0024               	movlb	4	; select bank4
  6942  0EB4  01B1               	clrf	Send_PS2@timeout^(0+512)
  6943  0EB5  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  6944  0EB6                     l6332:	
  6945                           ;PS_2.c: 843: while(READ_PS_2_PIN(0b00100000))
  6946                           
  6947  0EB6  3020               	movlw	32
  6948  0EB7  3199  2178  318E   	fcall	_READ_PS_2_PIN
  6949  0EBA  3800               	iorlw	0
  6950  0EBB  1903               	btfsc	3,2
  6951  0EBC  2ED3               	goto	l6334
  6952                           
  6953                           ;PS_2.c: 844: {
  6954                           ;PS_2.c: 845: __nop();
  6955  0EBD  0000               	nop
  6956                           
  6957                           ;PS_2.c: 846: timeout++;
  6958  0EBE  3001               	movlw	1
  6959  0EBF  0024               	movlb	4	; select bank4
  6960  0EC0  07B1               	addwf	Send_PS2@timeout^(0+512),f
  6961  0EC1  3000               	movlw	0
  6962  0EC2  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  6963                           
  6964                           ;PS_2.c: 847: if(timeout > 15000)
  6965  0EC3  303A               	movlw	58
  6966  0EC4  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  6967  0EC5  3099               	movlw	153
  6968  0EC6  1903               	skipnz
  6969  0EC7  0231               	subwf	Send_PS2@timeout^(0+512),w
  6970  0EC8  1C03               	skipc
  6971  0EC9  2EB6               	goto	l6332
  6972                           
  6973                           ;PS_2.c: 848: {
  6974                           ;PS_2.c: 849: Clock_TRIS(1);
  6975  0ECA  3001               	movlw	1
  6976  0ECB  3198  2091  318E   	fcall	_Clock_TRIS
  6977                           
  6978                           ;PS_2.c: 850: Data_TRIS(1);
  6979  0ECE  3001               	movlw	1
  6980  0ECF  3198  209C         	fcall	_Data_TRIS
  6981                           
  6982                           ;PS_2.c: 851: return 1;
  6983  0ED1  3001               	movlw	1
  6984  0ED2  0008               	return
  6985  0ED3                     l6334:	
  6986                           
  6987                           ;PS_2.c: 852: }
  6988                           ;PS_2.c: 853: }
  6989                           ;PS_2.c: 854: for(i=0;i<8;i++)
  6990  0ED3  0024               	movlb	4	; select bank4
  6991  0ED4  01B0               	clrf	Send_PS2@i^(0+512)
  6992  0ED5  3008               	movlw	8
  6993  0ED6  0230               	subwf	Send_PS2@i^(0+512),w
  6994  0ED7  1803               	btfsc	3,0
  6995  0ED8  2F2E               	goto	l856
  6996  0ED9                     l855:	
  6997                           
  6998                           ;PS_2.c: 855: {
  6999                           ;PS_2.c: 856: if(command & 0x1)
  7000  0ED9  1C2F               	btfss	Send_PS2@command^(0+512),0
  7001  0EDA  2EDE               	goto	l6342
  7002                           
  7003                           ;PS_2.c: 857: {
  7004                           ;PS_2.c: 858: LATA |= 0b00010000;
  7005  0EDB  0022               	movlb	2	; select bank2
  7006  0EDC  160C               	bsf	12,4	;volatile
  7007                           
  7008                           ;PS_2.c: 859: }
  7009  0EDD  2EE4               	goto	l6344
  7010  0EDE                     l6342:	
  7011                           
  7012                           ;PS_2.c: 860: else
  7013                           ;PS_2.c: 861: {
  7014                           ;PS_2.c: 862: LATA &= ~0b00010000;
  7015  0EDE  30EF               	movlw	239
  7016  0EDF  0024               	movlb	4	; select bank4
  7017  0EE0  00AA               	movwf	??_Send_PS2^(0+512)
  7018  0EE1  082A               	movf	??_Send_PS2^(0+512),w
  7019  0EE2  0022               	movlb	2	; select bank2
  7020  0EE3  058C               	andwf	12,f	;volatile
  7021  0EE4                     l6344:	
  7022                           
  7023                           ;PS_2.c: 863: }
  7024                           ;PS_2.c: 864: command >> = 1;
  7025  0EE4  1003               	clrc
  7026  0EE5  0024               	movlb	4	; select bank4
  7027  0EE6  0CAF               	rrf	Send_PS2@command^(0+512),f
  7028                           
  7029                           ;PS_2.c: 865: timeout=0;
  7030  0EE7  01B1               	clrf	Send_PS2@timeout^(0+512)
  7031  0EE8  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7032  0EE9                     l6356:	
  7033                           ;PS_2.c: 866: while(!READ_PS_2_PIN(0b00100000))
  7034                           
  7035  0EE9  3020               	movlw	32
  7036  0EEA  3199  2178  318E   	fcall	_READ_PS_2_PIN
  7037  0EED  3A00               	xorlw	0
  7038  0EEE  1D03               	btfss	3,2
  7039  0EEF  2F05               	goto	l6358
  7040                           
  7041                           ;PS_2.c: 867: {
  7042                           ;PS_2.c: 868: timeout++;
  7043  0EF0  3001               	movlw	1
  7044  0EF1  0024               	movlb	4	; select bank4
  7045  0EF2  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7046  0EF3  3000               	movlw	0
  7047  0EF4  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7048                           
  7049                           ;PS_2.c: 869: if(timeout > 15000)
  7050  0EF5  303A               	movlw	58
  7051  0EF6  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7052  0EF7  3099               	movlw	153
  7053  0EF8  1903               	skipnz
  7054  0EF9  0231               	subwf	Send_PS2@timeout^(0+512),w
  7055  0EFA  1C03               	skipc
  7056  0EFB  2EE9               	goto	l6356
  7057                           
  7058                           ;PS_2.c: 870: {
  7059                           ;PS_2.c: 871: Clock_TRIS(1);
  7060  0EFC  3001               	movlw	1
  7061  0EFD  3198  2091  318E   	fcall	_Clock_TRIS
  7062                           
  7063                           ;PS_2.c: 872: Data_TRIS(1);
  7064  0F00  3001               	movlw	1
  7065  0F01  3198  209C         	fcall	_Data_TRIS
  7066                           
  7067                           ;PS_2.c: 873: return 1;
  7068  0F03  3001               	movlw	1
  7069  0F04  0008               	return
  7070  0F05                     l6358:	
  7071                           
  7072                           ;PS_2.c: 874: }
  7073                           ;PS_2.c: 875: }
  7074                           ;PS_2.c: 876: timeout=0;
  7075  0F05  0024               	movlb	4	; select bank4
  7076  0F06  01B1               	clrf	Send_PS2@timeout^(0+512)
  7077  0F07  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7078  0F08                     l6368:	
  7079                           ;PS_2.c: 877: while(READ_PS_2_PIN(0b00100000))
  7080                           
  7081  0F08  3020               	movlw	32
  7082  0F09  3199  2178  318E   	fcall	_READ_PS_2_PIN
  7083  0F0C  3800               	iorlw	0
  7084  0F0D  1903               	btfsc	3,2
  7085  0F0E  2F25               	goto	l6370
  7086                           
  7087                           ;PS_2.c: 878: {
  7088                           ;PS_2.c: 879: __nop();
  7089  0F0F  0000               	nop
  7090                           
  7091                           ;PS_2.c: 880: timeout++;
  7092  0F10  3001               	movlw	1
  7093  0F11  0024               	movlb	4	; select bank4
  7094  0F12  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7095  0F13  3000               	movlw	0
  7096  0F14  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7097                           
  7098                           ;PS_2.c: 881: if(timeout > 15000)
  7099  0F15  303A               	movlw	58
  7100  0F16  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7101  0F17  3099               	movlw	153
  7102  0F18  1903               	skipnz
  7103  0F19  0231               	subwf	Send_PS2@timeout^(0+512),w
  7104  0F1A  1C03               	skipc
  7105  0F1B  2F08               	goto	l6368
  7106                           
  7107                           ;PS_2.c: 882: {
  7108                           ;PS_2.c: 883: Clock_TRIS(1);
  7109  0F1C  3001               	movlw	1
  7110  0F1D  3198  2091  318E   	fcall	_Clock_TRIS
  7111                           
  7112                           ;PS_2.c: 884: Data_TRIS(1);
  7113  0F20  3001               	movlw	1
  7114  0F21  3198  209C         	fcall	_Data_TRIS
  7115                           
  7116                           ;PS_2.c: 885: return 1;
  7117  0F23  3001               	movlw	1
  7118  0F24  0008               	return
  7119  0F25                     l6370:	
  7120  0F25  3001               	movlw	1
  7121  0F26  0024               	movlb	4	; select bank4
  7122  0F27  00AA               	movwf	??_Send_PS2^(0+512)
  7123  0F28  082A               	movf	??_Send_PS2^(0+512),w
  7124  0F29  07B0               	addwf	Send_PS2@i^(0+512),f
  7125  0F2A  3008               	movlw	8
  7126  0F2B  0230               	subwf	Send_PS2@i^(0+512),w
  7127  0F2C  1C03               	skipc
  7128  0F2D  2ED9               	goto	l855
  7129  0F2E                     l856:	
  7130                           
  7131                           ;PS_2.c: 886: }
  7132                           ;PS_2.c: 887: }
  7133                           ;PS_2.c: 888: }
  7134                           ;PS_2.c: 890: if(oddparity & 0x1)
  7135  0F2E  1C2E               	btfss	Send_PS2@oddparity^(0+512),0
  7136  0F2F  2F33               	goto	l6376
  7137                           
  7138                           ;PS_2.c: 891: {
  7139                           ;PS_2.c: 892: LATA |= 0b00010000;
  7140  0F30  0022               	movlb	2	; select bank2
  7141  0F31  160C               	bsf	12,4	;volatile
  7142                           
  7143                           ;PS_2.c: 893: }
  7144  0F32  2F39               	goto	l6378
  7145  0F33                     l6376:	
  7146                           
  7147                           ;PS_2.c: 894: else
  7148                           ;PS_2.c: 895: {
  7149                           ;PS_2.c: 896: LATA &= ~0b00010000;
  7150  0F33  30EF               	movlw	239
  7151  0F34  0024               	movlb	4	; select bank4
  7152  0F35  00AA               	movwf	??_Send_PS2^(0+512)
  7153  0F36  082A               	movf	??_Send_PS2^(0+512),w
  7154  0F37  0022               	movlb	2	; select bank2
  7155  0F38  058C               	andwf	12,f	;volatile
  7156  0F39                     l6378:	
  7157                           
  7158                           ;PS_2.c: 897: }
  7159                           ;PS_2.c: 898: timeout=0;
  7160  0F39  0024               	movlb	4	; select bank4
  7161  0F3A  01B1               	clrf	Send_PS2@timeout^(0+512)
  7162  0F3B  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7163  0F3C                     l6388:	
  7164                           ;PS_2.c: 899: while(!READ_PS_2_PIN(0b00100000))
  7165                           
  7166  0F3C  3020               	movlw	32
  7167  0F3D  3199  2178  318E   	fcall	_READ_PS_2_PIN
  7168  0F40  3A00               	xorlw	0
  7169  0F41  1D03               	btfss	3,2
  7170  0F42  2F58               	goto	l6390
  7171                           
  7172                           ;PS_2.c: 900: {
  7173                           ;PS_2.c: 901: timeout++;
  7174  0F43  3001               	movlw	1
  7175  0F44  0024               	movlb	4	; select bank4
  7176  0F45  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7177  0F46  3000               	movlw	0
  7178  0F47  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7179                           
  7180                           ;PS_2.c: 902: if(timeout > 15000)
  7181  0F48  303A               	movlw	58
  7182  0F49  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7183  0F4A  3099               	movlw	153
  7184  0F4B  1903               	skipnz
  7185  0F4C  0231               	subwf	Send_PS2@timeout^(0+512),w
  7186  0F4D  1C03               	skipc
  7187  0F4E  2F3C               	goto	l6388
  7188                           
  7189                           ;PS_2.c: 903: {
  7190                           ;PS_2.c: 904: Clock_TRIS(1);
  7191  0F4F  3001               	movlw	1
  7192  0F50  3198  2091  318E   	fcall	_Clock_TRIS
  7193                           
  7194                           ;PS_2.c: 905: Data_TRIS(1);
  7195  0F53  3001               	movlw	1
  7196  0F54  3198  209C         	fcall	_Data_TRIS
  7197                           
  7198                           ;PS_2.c: 906: return 1;
  7199  0F56  3001               	movlw	1
  7200  0F57  0008               	return
  7201  0F58                     l6390:	
  7202                           
  7203                           ;PS_2.c: 907: }
  7204                           ;PS_2.c: 908: }
  7205                           ;PS_2.c: 909: timeout=0;
  7206  0F58  0024               	movlb	4	; select bank4
  7207  0F59  01B1               	clrf	Send_PS2@timeout^(0+512)
  7208  0F5A  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7209  0F5B                     l6400:	
  7210                           ;PS_2.c: 910: while(READ_PS_2_PIN(0b00100000))
  7211                           
  7212  0F5B  3020               	movlw	32
  7213  0F5C  3199  2178  318E   	fcall	_READ_PS_2_PIN
  7214  0F5F  3800               	iorlw	0
  7215  0F60  1903               	btfsc	3,2
  7216  0F61  2F77               	goto	l6402
  7217                           
  7218                           ;PS_2.c: 911: {
  7219                           ;PS_2.c: 912: timeout++;
  7220  0F62  3001               	movlw	1
  7221  0F63  0024               	movlb	4	; select bank4
  7222  0F64  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7223  0F65  3000               	movlw	0
  7224  0F66  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7225                           
  7226                           ;PS_2.c: 913: if(timeout > 15000)
  7227  0F67  303A               	movlw	58
  7228  0F68  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7229  0F69  3099               	movlw	153
  7230  0F6A  1903               	skipnz
  7231  0F6B  0231               	subwf	Send_PS2@timeout^(0+512),w
  7232  0F6C  1C03               	skipc
  7233  0F6D  2F5B               	goto	l6400
  7234                           
  7235                           ;PS_2.c: 914: {
  7236                           ;PS_2.c: 915: Clock_TRIS(1);
  7237  0F6E  3001               	movlw	1
  7238  0F6F  3198  2091  318E   	fcall	_Clock_TRIS
  7239                           
  7240                           ;PS_2.c: 916: Data_TRIS(1);
  7241  0F72  3001               	movlw	1
  7242  0F73  3198  209C         	fcall	_Data_TRIS
  7243                           
  7244                           ;PS_2.c: 917: return 1;
  7245  0F75  3001               	movlw	1
  7246  0F76  0008               	return
  7247  0F77                     l6402:	
  7248                           
  7249                           ;PS_2.c: 918: }
  7250                           ;PS_2.c: 919: }
  7251                           ;PS_2.c: 921: Data_TRIS(1);
  7252  0F77  3001               	movlw	1
  7253  0F78  3198  209C  318E   	fcall	_Data_TRIS
  7254                           
  7255                           ;PS_2.c: 923: timeout=0;
  7256  0F7B  0024               	movlb	4	; select bank4
  7257  0F7C  01B1               	clrf	Send_PS2@timeout^(0+512)
  7258  0F7D  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7259  0F7E                     l6414:	
  7260                           ;PS_2.c: 924: while(READ_PS_2_PIN(0b00010000))
  7261                           
  7262  0F7E  3010               	movlw	16
  7263  0F7F  3199  2178  318E   	fcall	_READ_PS_2_PIN
  7264  0F82  3800               	iorlw	0
  7265  0F83  1903               	btfsc	3,2
  7266  0F84  2F9A               	goto	l6416
  7267                           
  7268                           ;PS_2.c: 925: {
  7269                           ;PS_2.c: 926: timeout++;
  7270  0F85  3001               	movlw	1
  7271  0F86  0024               	movlb	4	; select bank4
  7272  0F87  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7273  0F88  3000               	movlw	0
  7274  0F89  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7275                           
  7276                           ;PS_2.c: 927: if(timeout > 15000)
  7277  0F8A  303A               	movlw	58
  7278  0F8B  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7279  0F8C  3099               	movlw	153
  7280  0F8D  1903               	skipnz
  7281  0F8E  0231               	subwf	Send_PS2@timeout^(0+512),w
  7282  0F8F  1C03               	skipc
  7283  0F90  2F7E               	goto	l6414
  7284                           
  7285                           ;PS_2.c: 928: {
  7286                           ;PS_2.c: 929: Clock_TRIS(1);
  7287  0F91  3001               	movlw	1
  7288  0F92  3198  2091  318E   	fcall	_Clock_TRIS
  7289                           
  7290                           ;PS_2.c: 930: Data_TRIS(1);
  7291  0F95  3001               	movlw	1
  7292  0F96  3198  209C         	fcall	_Data_TRIS
  7293                           
  7294                           ;PS_2.c: 931: return 1;
  7295  0F98  3001               	movlw	1
  7296  0F99  0008               	return
  7297  0F9A                     l6416:	
  7298                           
  7299                           ;PS_2.c: 932: }
  7300                           ;PS_2.c: 933: }
  7301                           ;PS_2.c: 934: timeout=0;
  7302  0F9A  0024               	movlb	4	; select bank4
  7303  0F9B  01B1               	clrf	Send_PS2@timeout^(0+512)
  7304  0F9C  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7305  0F9D                     l6426:	
  7306                           ;PS_2.c: 935: while(READ_PS_2_PIN(0b00100000))
  7307                           
  7308  0F9D  3020               	movlw	32
  7309  0F9E  3199  2178  318E   	fcall	_READ_PS_2_PIN
  7310  0FA1  3800               	iorlw	0
  7311  0FA2  1903               	btfsc	3,2
  7312  0FA3  2FB9               	goto	l6428
  7313                           
  7314                           ;PS_2.c: 936: {
  7315                           ;PS_2.c: 937: timeout++;
  7316  0FA4  3001               	movlw	1
  7317  0FA5  0024               	movlb	4	; select bank4
  7318  0FA6  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7319  0FA7  3000               	movlw	0
  7320  0FA8  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7321                           
  7322                           ;PS_2.c: 938: if(timeout > 15000)
  7323  0FA9  303A               	movlw	58
  7324  0FAA  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7325  0FAB  3099               	movlw	153
  7326  0FAC  1903               	skipnz
  7327  0FAD  0231               	subwf	Send_PS2@timeout^(0+512),w
  7328  0FAE  1C03               	skipc
  7329  0FAF  2F9D               	goto	l6426
  7330                           
  7331                           ;PS_2.c: 939: {
  7332                           ;PS_2.c: 940: Clock_TRIS(1);
  7333  0FB0  3001               	movlw	1
  7334  0FB1  3198  2091  318E   	fcall	_Clock_TRIS
  7335                           
  7336                           ;PS_2.c: 941: Data_TRIS(1);
  7337  0FB4  3001               	movlw	1
  7338  0FB5  3198  209C         	fcall	_Data_TRIS
  7339                           
  7340                           ;PS_2.c: 942: return 1;
  7341  0FB7  3001               	movlw	1
  7342  0FB8  0008               	return
  7343  0FB9                     l6428:	
  7344                           
  7345                           ;PS_2.c: 943: }
  7346                           ;PS_2.c: 944: }
  7347                           ;PS_2.c: 945: timeout=0;
  7348  0FB9  0024               	movlb	4	; select bank4
  7349  0FBA  01B1               	clrf	Send_PS2@timeout^(0+512)
  7350  0FBB  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7351  0FBC                     l6438:	
  7352                           ;PS_2.c: 946: while(!READ_PS_2_PIN(0b00010000))
  7353                           
  7354  0FBC  3010               	movlw	16
  7355  0FBD  3199  2178  318E   	fcall	_READ_PS_2_PIN
  7356  0FC0  3A00               	xorlw	0
  7357  0FC1  1D03               	btfss	3,2
  7358  0FC2  2FD8               	goto	l6440
  7359                           
  7360                           ;PS_2.c: 947: {
  7361                           ;PS_2.c: 948: timeout++;
  7362  0FC3  3001               	movlw	1
  7363  0FC4  0024               	movlb	4	; select bank4
  7364  0FC5  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7365  0FC6  3000               	movlw	0
  7366  0FC7  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7367                           
  7368                           ;PS_2.c: 949: if(timeout > 15000)
  7369  0FC8  303A               	movlw	58
  7370  0FC9  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7371  0FCA  3099               	movlw	153
  7372  0FCB  1903               	skipnz
  7373  0FCC  0231               	subwf	Send_PS2@timeout^(0+512),w
  7374  0FCD  1C03               	skipc
  7375  0FCE  2FBC               	goto	l6438
  7376                           
  7377                           ;PS_2.c: 950: {
  7378                           ;PS_2.c: 951: Clock_TRIS(1);
  7379  0FCF  3001               	movlw	1
  7380  0FD0  3198  2091  318E   	fcall	_Clock_TRIS
  7381                           
  7382                           ;PS_2.c: 952: Data_TRIS(1);
  7383  0FD3  3001               	movlw	1
  7384  0FD4  3198  209C         	fcall	_Data_TRIS
  7385                           
  7386                           ;PS_2.c: 953: return 1;
  7387  0FD6  3001               	movlw	1
  7388  0FD7  0008               	return
  7389  0FD8                     l6440:	
  7390                           
  7391                           ;PS_2.c: 954: }
  7392                           ;PS_2.c: 955: }
  7393                           ;PS_2.c: 956: timeout=0;
  7394  0FD8  0024               	movlb	4	; select bank4
  7395  0FD9  01B1               	clrf	Send_PS2@timeout^(0+512)
  7396  0FDA  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7397  0FDB                     l6450:	
  7398                           ;PS_2.c: 957: while(!READ_PS_2_PIN(0b00100000))
  7399                           
  7400  0FDB  3020               	movlw	32
  7401  0FDC  3199  2178  318E   	fcall	_READ_PS_2_PIN
  7402  0FDF  3A00               	xorlw	0
  7403  0FE0  1D03               	btfss	3,2
  7404  0FE1  2FF7               	goto	l6452
  7405                           
  7406                           ;PS_2.c: 958: {
  7407                           ;PS_2.c: 959: timeout++;
  7408  0FE2  3001               	movlw	1
  7409  0FE3  0024               	movlb	4	; select bank4
  7410  0FE4  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7411  0FE5  3000               	movlw	0
  7412  0FE6  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7413                           
  7414                           ;PS_2.c: 960: if(timeout > 15000)
  7415  0FE7  303A               	movlw	58
  7416  0FE8  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7417  0FE9  3099               	movlw	153
  7418  0FEA  1903               	skipnz
  7419  0FEB  0231               	subwf	Send_PS2@timeout^(0+512),w
  7420  0FEC  1C03               	skipc
  7421  0FED  2FDB               	goto	l6450
  7422                           
  7423                           ;PS_2.c: 961: {
  7424                           ;PS_2.c: 962: Clock_TRIS(1);
  7425  0FEE  3001               	movlw	1
  7426  0FEF  3198  2091  318E   	fcall	_Clock_TRIS
  7427                           
  7428                           ;PS_2.c: 963: Data_TRIS(1);
  7429  0FF2  3001               	movlw	1
  7430  0FF3  3198  209C         	fcall	_Data_TRIS
  7431                           
  7432                           ;PS_2.c: 964: return 1;
  7433  0FF5  3001               	movlw	1
  7434  0FF6  0008               	return
  7435  0FF7                     l6452:	
  7436                           
  7437                           ;PS_2.c: 965: }
  7438                           ;PS_2.c: 966: }
  7439                           ;PS_2.c: 969: Clock_TRIS(1);
  7440  0FF7  3001               	movlw	1
  7441  0FF8  3198  2091  318E   	fcall	_Clock_TRIS
  7442                           
  7443                           ;PS_2.c: 970: Data_TRIS(1);
  7444  0FFB  3001               	movlw	1
  7445  0FFC  3198  209C         	fcall	_Data_TRIS
  7446                           
  7447                           ;PS_2.c: 971: return 0;
  7448  0FFE  3000               	movlw	0
  7449  0FFF  0008               	return
  7450  1000                     __end_of_Send_PS2:	
  7451                           
  7452                           	psect	text14
  7453  1978                     __ptext14:	
  7454 ;; *************** function _READ_PS_2_PIN *****************
  7455 ;; Defined at:
  7456 ;;		line 216 in file "PS_2.c"
  7457 ;; Parameters:    Size  Location     Type
  7458 ;;  DATA_CLK        1    wreg     unsigned char 
  7459 ;; Auto vars:     Size  Location     Type
  7460 ;;  DATA_CLK        1    0[BANK4 ] unsigned char 
  7461 ;; Return value:  Size  Location     Type
  7462 ;;                  1    wreg      unsigned char 
  7463 ;; Registers used:
  7464 ;;		wreg
  7465 ;; Tracked objects:
  7466 ;;		On entry : 0/0
  7467 ;;		On exit  : 0/0
  7468 ;;		Unchanged: 0/0
  7469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7471 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7473 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7474 ;;Total ram usage:        1 bytes
  7475 ;; Hardware stack levels used:    1
  7476 ;; Hardware stack levels required when called:    7
  7477 ;; This function calls:
  7478 ;;		Nothing
  7479 ;; This function is called by:
  7480 ;;		_Send_PS2
  7481 ;; This function uses a non-reentrant model
  7482 ;;
  7483                           
  7484                           
  7485                           ;psect for function _READ_PS_2_PIN
  7486  1978                     _READ_PS_2_PIN:	
  7487                           
  7488                           ;incstack = 0
  7489                           ; Regs used in _READ_PS_2_PIN: [wreg]
  7490                           ;READ_PS_2_PIN@DATA_CLK stored from wreg
  7491  1978  0024               	movlb	4	; select bank4
  7492  1979  00A0               	movwf	READ_PS_2_PIN@DATA_CLK^(0+512)
  7493                           
  7494                           ;PS_2.c: 218: if(DATA_CLK == 0b00100000)
  7495  197A  0820               	movf	READ_PS_2_PIN@DATA_CLK^(0+512),w
  7496  197B  3A20               	xorlw	32
  7497  197C  1D03               	skipz
  7498  197D  2985               	goto	l647
  7499                           
  7500                           ;PS_2.c: 219: {
  7501                           ;PS_2.c: 221: if((PORTA & 0b00100000) == 0b00100000)
  7502  197E  0020               	movlb	0	; select bank0
  7503  197F  1E8C               	btfss	12,5	;volatile
  7504  1980  2983               	goto	l6138
  7505                           
  7506                           ;PS_2.c: 222: {
  7507                           ;PS_2.c: 223: return (1);
  7508  1981  3001               	movlw	1
  7509                           
  7510                           ;PS_2.c: 224: }
  7511  1982  0008               	return
  7512  1983                     l6138:	
  7513                           
  7514                           ;PS_2.c: 225: else
  7515                           ;PS_2.c: 226: {
  7516                           ;PS_2.c: 227: return 0;
  7517  1983  3000               	movlw	0
  7518                           
  7519                           ;PS_2.c: 228: }
  7520                           ;PS_2.c: 229: }
  7521  1984  0008               	return
  7522  1985                     l647:	
  7523                           
  7524                           ;PS_2.c: 230: else
  7525                           ;PS_2.c: 231: {
  7526                           ;PS_2.c: 233: if((PORTA & 0b00010000) == 0b00010000)
  7527  1985  0020               	movlb	0	; select bank0
  7528  1986  1E0C               	btfss	12,4	;volatile
  7529  1987  298A               	goto	l6148
  7530                           
  7531                           ;PS_2.c: 234: {
  7532                           ;PS_2.c: 235: return (1);
  7533  1988  3001               	movlw	1
  7534                           
  7535                           ;PS_2.c: 236: }
  7536  1989  0008               	return
  7537  198A                     l6148:	
  7538                           
  7539                           ;PS_2.c: 237: else
  7540                           ;PS_2.c: 238: {
  7541                           ;PS_2.c: 239: return 0;
  7542  198A  3000               	movlw	0
  7543  198B  0008               	return
  7544  198C                     __end_of_READ_PS_2_PIN:	
  7545                           
  7546                           	psect	text15
  7547  189C                     __ptext15:	
  7548 ;; *************** function _Data_TRIS *****************
  7549 ;; Defined at:
  7550 ;;		line 131 in file "PS_2.c"
  7551 ;; Parameters:    Size  Location     Type
  7552 ;;  direction       1    wreg     unsigned char 
  7553 ;; Auto vars:     Size  Location     Type
  7554 ;;  direction       1    0[BANK4 ] unsigned char 
  7555 ;; Return value:  Size  Location     Type
  7556 ;;		None               void
  7557 ;; Registers used:
  7558 ;;		wreg, status,2, status,0
  7559 ;; Tracked objects:
  7560 ;;		On entry : 0/0
  7561 ;;		On exit  : 0/0
  7562 ;;		Unchanged: 0/0
  7563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7565 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7567 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7568 ;;Total ram usage:        1 bytes
  7569 ;; Hardware stack levels used:    1
  7570 ;; Hardware stack levels required when called:    7
  7571 ;; This function calls:
  7572 ;;		Nothing
  7573 ;; This function is called by:
  7574 ;;		_PS_2_INIT
  7575 ;;		_Send_PS2
  7576 ;; This function uses a non-reentrant model
  7577 ;;
  7578                           
  7579                           
  7580                           ;psect for function _Data_TRIS
  7581  189C                     _Data_TRIS:	
  7582                           
  7583                           ;incstack = 0
  7584                           ; Regs used in _Data_TRIS: [wreg+status,2+status,0]
  7585                           ;Data_TRIS@direction stored from wreg
  7586  189C  0024               	movlb	4	; select bank4
  7587  189D  00A0               	movwf	Data_TRIS@direction^(0+512)
  7588                           
  7589                           ;PS_2.c: 133: if(direction == 0)
  7590  189E  08A0               	movf	Data_TRIS@direction^(0+512),f
  7591  189F  1D03               	skipz
  7592  18A0  28A4               	goto	l627
  7593                           
  7594                           ;PS_2.c: 134: {
  7595                           ;PS_2.c: 135: TRISAbits.TRISA4 = 0;
  7596  18A1  0021               	movlb	1	; select bank1
  7597  18A2  120C               	bcf	12,4	;volatile
  7598                           
  7599                           ;PS_2.c: 136: }
  7600  18A3  0008               	return
  7601  18A4                     l627:	
  7602                           
  7603                           ;PS_2.c: 137: else
  7604                           ;PS_2.c: 138: {
  7605                           ;PS_2.c: 139: TRISAbits.TRISA4 = 1;
  7606  18A4  0021               	movlb	1	; select bank1
  7607  18A5  160C               	bsf	12,4	;volatile
  7608  18A6  0008               	return
  7609  18A7                     __end_of_Data_TRIS:	
  7610                           
  7611                           	psect	text16
  7612  1891                     __ptext16:	
  7613 ;; *************** function _Clock_TRIS *****************
  7614 ;; Defined at:
  7615 ;;		line 114 in file "PS_2.c"
  7616 ;; Parameters:    Size  Location     Type
  7617 ;;  direction       1    wreg     unsigned char 
  7618 ;; Auto vars:     Size  Location     Type
  7619 ;;  direction       1    0[BANK4 ] unsigned char 
  7620 ;; Return value:  Size  Location     Type
  7621 ;;		None               void
  7622 ;; Registers used:
  7623 ;;		wreg, status,2, status,0
  7624 ;; Tracked objects:
  7625 ;;		On entry : 0/0
  7626 ;;		On exit  : 0/0
  7627 ;;		Unchanged: 0/0
  7628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7630 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7632 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7633 ;;Total ram usage:        1 bytes
  7634 ;; Hardware stack levels used:    1
  7635 ;; Hardware stack levels required when called:    7
  7636 ;; This function calls:
  7637 ;;		Nothing
  7638 ;; This function is called by:
  7639 ;;		_PS_2_INIT
  7640 ;;		_Send_PS2
  7641 ;; This function uses a non-reentrant model
  7642 ;;
  7643                           
  7644                           
  7645                           ;psect for function _Clock_TRIS
  7646  1891                     _Clock_TRIS:	
  7647                           
  7648                           ;incstack = 0
  7649                           ; Regs used in _Clock_TRIS: [wreg+status,2+status,0]
  7650                           ;Clock_TRIS@direction stored from wreg
  7651  1891  0024               	movlb	4	; select bank4
  7652  1892  00A0               	movwf	Clock_TRIS@direction^(0+512)
  7653                           
  7654                           ;PS_2.c: 116: if(direction == 0)
  7655  1893  08A0               	movf	Clock_TRIS@direction^(0+512),f
  7656  1894  1D03               	skipz
  7657  1895  2899               	goto	l622
  7658                           
  7659                           ;PS_2.c: 117: {
  7660                           ;PS_2.c: 118: TRISAbits.TRISA5 = 0;
  7661  1896  0021               	movlb	1	; select bank1
  7662  1897  128C               	bcf	12,5	;volatile
  7663                           
  7664                           ;PS_2.c: 119: }
  7665  1898  0008               	return
  7666  1899                     l622:	
  7667                           
  7668                           ;PS_2.c: 120: else
  7669                           ;PS_2.c: 121: {
  7670                           ;PS_2.c: 122: TRISAbits.TRISA5 = 1;
  7671  1899  0021               	movlb	1	; select bank1
  7672  189A  168C               	bsf	12,5	;volatile
  7673  189B  0008               	return
  7674  189C                     __end_of_Clock_TRIS:	
  7675                           
  7676                           	psect	text17
  7677  1965                     __ptext17:	
  7678 ;; *************** function _PS_2_DISABLE_INTERRUPT *****************
  7679 ;; Defined at:
  7680 ;;		line 172 in file "PS_2.c"
  7681 ;; Parameters:    Size  Location     Type
  7682 ;;  DATA_CLK        1    wreg     unsigned char 
  7683 ;; Auto vars:     Size  Location     Type
  7684 ;;  DATA_CLK        1    1[BANK4 ] unsigned char 
  7685 ;; Return value:  Size  Location     Type
  7686 ;;		None               void
  7687 ;; Registers used:
  7688 ;;		wreg, status,2, status,0
  7689 ;; Tracked objects:
  7690 ;;		On entry : 0/0
  7691 ;;		On exit  : 0/0
  7692 ;;		Unchanged: 0/0
  7693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7695 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7696 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7697 ;;      Totals:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  7698 ;;Total ram usage:        2 bytes
  7699 ;; Hardware stack levels used:    1
  7700 ;; Hardware stack levels required when called:    7
  7701 ;; This function calls:
  7702 ;;		Nothing
  7703 ;; This function is called by:
  7704 ;;		_Init_PS_2_Send
  7705 ;;		_Keyboard_Connected
  7706 ;; This function uses a non-reentrant model
  7707 ;;
  7708                           
  7709                           
  7710                           ;psect for function _PS_2_DISABLE_INTERRUPT
  7711  1965                     _PS_2_DISABLE_INTERRUPT:	
  7712                           
  7713                           ;incstack = 0
  7714                           ; Regs used in _PS_2_DISABLE_INTERRUPT: [wreg+status,2+status,0]
  7715                           ;PS_2_DISABLE_INTERRUPT@DATA_CLK stored from wreg
  7716  1965  0024               	movlb	4	; select bank4
  7717  1966  00A1               	movwf	PS_2_DISABLE_INTERRUPT@DATA_CLK^(0+512)
  7718                           
  7719                           ;PS_2.c: 174: if(DATA_CLK == 0b00100000)
  7720  1967  0821               	movf	PS_2_DISABLE_INTERRUPT@DATA_CLK^(0+512),w
  7721  1968  3A20               	xorlw	32
  7722  1969  1D03               	skipz
  7723  196A  2971               	goto	l6222
  7724                           
  7725                           ;PS_2.c: 175: {
  7726                           ;PS_2.c: 178: IOCAN &= ~0b00100000;
  7727  196B  30DF               	movlw	223
  7728  196C  00A0               	movwf	??_PS_2_DISABLE_INTERRUPT^(0+512)
  7729  196D  0820               	movf	??_PS_2_DISABLE_INTERRUPT^(0+512),w
  7730  196E  0027               	movlb	7	; select bank7
  7731  196F  0592               	andwf	18,f	;volatile
  7732                           
  7733                           ;PS_2.c: 179: }
  7734  1970  0008               	return
  7735  1971                     l6222:	
  7736                           
  7737                           ;PS_2.c: 180: else
  7738                           ;PS_2.c: 181: {
  7739                           ;PS_2.c: 184: IOCAN &= ~0b00010000;
  7740  1971  30EF               	movlw	239
  7741  1972  0024               	movlb	4	; select bank4
  7742  1973  00A0               	movwf	??_PS_2_DISABLE_INTERRUPT^(0+512)
  7743  1974  0820               	movf	??_PS_2_DISABLE_INTERRUPT^(0+512),w
  7744  1975  0027               	movlb	7	; select bank7
  7745  1976  0592               	andwf	18,f	;volatile
  7746  1977  0008               	return
  7747  1978                     __end_of_PS_2_DISABLE_INTERRUPT:	
  7748                           
  7749                           	psect	text18
  7750  18B3                     __ptext18:	
  7751 ;; *************** function _PS_2_ENABLE_INTERRUPT *****************
  7752 ;; Defined at:
  7753 ;;		line 193 in file "PS_2.c"
  7754 ;; Parameters:    Size  Location     Type
  7755 ;;  DATA_CLK        1    wreg     unsigned char 
  7756 ;; Auto vars:     Size  Location     Type
  7757 ;;  DATA_CLK        1    0[BANK4 ] unsigned char 
  7758 ;; Return value:  Size  Location     Type
  7759 ;;		None               void
  7760 ;; Registers used:
  7761 ;;		wreg
  7762 ;; Tracked objects:
  7763 ;;		On entry : 0/0
  7764 ;;		On exit  : 0/0
  7765 ;;		Unchanged: 0/0
  7766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7768 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7770 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7771 ;;Total ram usage:        1 bytes
  7772 ;; Hardware stack levels used:    1
  7773 ;; Hardware stack levels required when called:    7
  7774 ;; This function calls:
  7775 ;;		Nothing
  7776 ;; This function is called by:
  7777 ;;		_main
  7778 ;;		_Keyboard_Connected
  7779 ;; This function uses a non-reentrant model
  7780 ;;
  7781                           
  7782                           
  7783                           ;psect for function _PS_2_ENABLE_INTERRUPT
  7784  18B3                     _PS_2_ENABLE_INTERRUPT:	
  7785                           
  7786                           ;incstack = 0
  7787                           ; Regs used in _PS_2_ENABLE_INTERRUPT: [wreg]
  7788                           ;PS_2_ENABLE_INTERRUPT@DATA_CLK stored from wreg
  7789  18B3  0024               	movlb	4	; select bank4
  7790  18B4  00A0               	movwf	PS_2_ENABLE_INTERRUPT@DATA_CLK^(0+512)
  7791                           
  7792                           ;PS_2.c: 195: if(DATA_CLK == 0b00100000)
  7793  18B5  0820               	movf	PS_2_ENABLE_INTERRUPT@DATA_CLK^(0+512),w
  7794  18B6  3A20               	xorlw	32
  7795  18B7  1D03               	skipz
  7796  18B8  28BC               	goto	l642
  7797                           
  7798                           ;PS_2.c: 196: {
  7799                           ;PS_2.c: 199: IOCAN |= 0b00100000;
  7800  18B9  0027               	movlb	7	; select bank7
  7801  18BA  1692               	bsf	18,5	;volatile
  7802                           
  7803                           ;PS_2.c: 201: }
  7804  18BB  0008               	return
  7805  18BC                     l642:	
  7806                           
  7807                           ;PS_2.c: 202: else
  7808                           ;PS_2.c: 203: {
  7809                           ;PS_2.c: 206: IOCAN |= 0b00010000;
  7810  18BC  0027               	movlb	7	; select bank7
  7811  18BD  1612               	bsf	18,4	;volatile
  7812  18BE  0008               	return
  7813  18BF                     __end_of_PS_2_ENABLE_INTERRUPT:	
  7814                           
  7815                           	psect	text19
  7816  0A48                     __ptext19:	
  7817 ;; *************** function _Init_System *****************
  7818 ;; Defined at:
  7819 ;;		line 103 in file "user.c"
  7820 ;; Parameters:    Size  Location     Type
  7821 ;;		None
  7822 ;; Auto vars:     Size  Location     Type
  7823 ;;  Baud            4   44[BANK4 ] unsigned long 
  7824 ;;  temp            4   40[BANK4 ] unsigned long 
  7825 ;;  Parity          1   48[BANK4 ] unsigned char 
  7826 ;; Return value:  Size  Location     Type
  7827 ;;		None               void
  7828 ;; Registers used:
  7829 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7830 ;; Tracked objects:
  7831 ;;		On entry : 0/0
  7832 ;;		On exit  : 0/0
  7833 ;;		Unchanged: 0/0
  7834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7836 ;;      Locals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0
  7837 ;;      Temps:          0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  7838 ;;      Totals:         0       0       0       0       0      14       0       0       0       0       0       0       
      +0       0
  7839 ;;Total ram usage:       14 bytes
  7840 ;; Hardware stack levels used:    1
  7841 ;; Hardware stack levels required when called:   10
  7842 ;; This function calls:
  7843 ;;		_InitUART
  7844 ;;		_ReadBaud
  7845 ;;		_UARTstringWAIT
  7846 ;;		_delayUS
  7847 ;; This function is called by:
  7848 ;;		_main
  7849 ;; This function uses a non-reentrant model
  7850 ;;
  7851                           
  7852                           
  7853                           ;psect for function _Init_System
  7854  0A48                     _Init_System:	
  7855                           
  7856                           ;user.c: 105: unsigned long temp =0;
  7857                           
  7858                           ;incstack = 0
  7859                           ; Regs used in _Init_System: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7860  0A48  3000               	movlw	0
  7861  0A49  0024               	movlb	4	; select bank4
  7862  0A4A  00CB               	movwf	(Init_System@temp+3)^(0+512)
  7863  0A4B  3000               	movlw	0
  7864  0A4C  00CA               	movwf	(Init_System@temp+2)^(0+512)
  7865  0A4D  3000               	movlw	0
  7866  0A4E  00C9               	movwf	(Init_System@temp+1)^(0+512)
  7867  0A4F  3000               	movlw	0
  7868  0A50  00C8               	movwf	Init_System@temp^(0+512)
  7869                           
  7870                           ;user.c: 106: unsigned long Baud =0;
  7871  0A51  3000               	movlw	0
  7872  0A52  00CF               	movwf	(Init_System@Baud+3)^(0+512)
  7873  0A53  3000               	movlw	0
  7874  0A54  00CE               	movwf	(Init_System@Baud+2)^(0+512)
  7875  0A55  3000               	movlw	0
  7876  0A56  00CD               	movwf	(Init_System@Baud+1)^(0+512)
  7877  0A57  3000               	movlw	0
  7878  0A58  00CC               	movwf	Init_System@Baud^(0+512)
  7879                           
  7880                           ;user.c: 107: unsigned char Parity =0;
  7881  0A59  01D0               	clrf	Init_System@Parity^(0+512)
  7882                           
  7883                           ;user.c: 109: temp = ReadBaud((0x1800 >> 5),0);
  7884  0A5A  30C0               	movlw	192
  7885  0A5B  00B2               	movwf	ReadBaud@row^(0+512)
  7886  0A5C  3000               	movlw	0
  7887  0A5D  00B3               	movwf	(ReadBaud@row^(0+512)+1)
  7888  0A5E  01B4               	clrf	ReadBaud@column^(0+512)
  7889  0A5F  3191  2142  318A   	fcall	_ReadBaud
  7890  0A62  0024               	movlb	4	; select bank4
  7891  0A63  0835               	movf	(?_ReadBaud+3)^(0+512),w
  7892  0A64  00CB               	movwf	(Init_System@temp+3)^(0+512)
  7893  0A65  0834               	movf	(?_ReadBaud+2)^(0+512),w
  7894  0A66  00CA               	movwf	(Init_System@temp+2)^(0+512)
  7895  0A67  0833               	movf	(?_ReadBaud+1)^(0+512),w
  7896  0A68  00C9               	movwf	(Init_System@temp+1)^(0+512)
  7897  0A69  0832               	movf	?_ReadBaud^(0+512),w
  7898  0A6A  00C8               	movwf	Init_System@temp^(0+512)
  7899                           
  7900                           ;user.c: 110: Baud = temp & 0x000FFFFF;
  7901  0A6B  30FF               	movlw	255
  7902  0A6C  0548               	andwf	Init_System@temp^(0+512),w
  7903  0A6D  00CC               	movwf	Init_System@Baud^(0+512)
  7904  0A6E  30FF               	movlw	255
  7905  0A6F  0549               	andwf	(Init_System@temp+1)^(0+512),w
  7906  0A70  00CD               	movwf	(Init_System@Baud+1)^(0+512)
  7907  0A71  300F               	movlw	15
  7908  0A72  054A               	andwf	(Init_System@temp+2)^(0+512),w
  7909  0A73  00CE               	movwf	(Init_System@Baud+2)^(0+512)
  7910  0A74  3000               	movlw	0
  7911  0A75  054B               	andwf	(Init_System@temp+3)^(0+512),w
  7912  0A76  00CF               	movwf	(Init_System@Baud+3)^(0+512)
  7913                           
  7914                           ;user.c: 111: Parity = (unsigned char)((temp & 0x00F00000) >> 20);
  7915  0A77  0848               	movf	Init_System@temp^(0+512),w
  7916  0A78  00C3               	movwf	??_Init_System^(0+512)
  7917  0A79  0849               	movf	(Init_System@temp+1)^(0+512),w
  7918  0A7A  00C4               	movwf	(??_Init_System^(0+512)+1)
  7919  0A7B  084A               	movf	(Init_System@temp+2)^(0+512),w
  7920  0A7C  00C5               	movwf	(??_Init_System^(0+512)+2)
  7921  0A7D  084B               	movf	(Init_System@temp+3)^(0+512),w
  7922  0A7E  00C6               	movwf	(??_Init_System^(0+512)+3)
  7923  0A7F  3014               	movlw	20
  7924  0A80                     u8875:	
  7925  0A80  36C6               	lsrf	(??_Init_System^(0+512)+3),f
  7926  0A81  0CC5               	rrf	(??_Init_System^(0+512)+2),f
  7927  0A82  0CC4               	rrf	(??_Init_System^(0+512)+1),f
  7928  0A83  0CC3               	rrf	??_Init_System^(0+512),f
  7929  0A84  0B89               	decfsz	9,f
  7930  0A85  2A80               	goto	u8875
  7931  0A86  0843               	movf	??_Init_System^(0+512),w
  7932  0A87  390F               	andlw	15
  7933  0A88  00C7               	movwf	(??_Init_System+4)^(0+512)
  7934  0A89  0847               	movf	(??_Init_System+4)^(0+512),w
  7935  0A8A  00D0               	movwf	Init_System@Parity^(0+512)
  7936                           
  7937                           ;user.c: 112: if(Baud <2400 || Baud > 115200)
  7938  0A8B  3000               	movlw	0
  7939  0A8C  024F               	subwf	(Init_System@Baud+3)^(0+512),w
  7940  0A8D  1D03               	skipz
  7941  0A8E  2A99               	goto	u8885
  7942  0A8F  3000               	movlw	0
  7943  0A90  024E               	subwf	(Init_System@Baud+2)^(0+512),w
  7944  0A91  1D03               	skipz
  7945  0A92  2A99               	goto	u8885
  7946  0A93  3009               	movlw	9
  7947  0A94  024D               	subwf	(Init_System@Baud+1)^(0+512),w
  7948  0A95  1D03               	skipz
  7949  0A96  2A99               	goto	u8885
  7950  0A97  3060               	movlw	96
  7951  0A98  024C               	subwf	Init_System@Baud^(0+512),w
  7952  0A99                     u8885:	
  7953  0A99  1C03               	skipc
  7954  0A9A  2AAB               	goto	l6826
  7955  0A9B  3000               	movlw	0
  7956  0A9C  024F               	subwf	(Init_System@Baud+3)^(0+512),w
  7957  0A9D  1D03               	skipz
  7958  0A9E  2AA9               	goto	u8895
  7959  0A9F  3001               	movlw	1
  7960  0AA0  024E               	subwf	(Init_System@Baud+2)^(0+512),w
  7961  0AA1  1D03               	skipz
  7962  0AA2  2AA9               	goto	u8895
  7963  0AA3  30C2               	movlw	194
  7964  0AA4  024D               	subwf	(Init_System@Baud+1)^(0+512),w
  7965  0AA5  1D03               	skipz
  7966  0AA6  2AA9               	goto	u8895
  7967  0AA7  3001               	movlw	1
  7968  0AA8  024C               	subwf	Init_System@Baud^(0+512),w
  7969  0AA9                     u8895:	
  7970  0AA9  1C03               	skipc
  7971  0AAA  2AB4               	goto	l6830
  7972  0AAB                     l6826:	
  7973                           
  7974                           ;user.c: 113: {
  7975                           ;user.c: 115: Baud = 9600;
  7976  0AAB  3000               	movlw	0
  7977  0AAC  00CF               	movwf	(Init_System@Baud+3)^(0+512)
  7978  0AAD  3000               	movlw	0
  7979  0AAE  00CE               	movwf	(Init_System@Baud+2)^(0+512)
  7980  0AAF  3025               	movlw	37
  7981  0AB0  00CD               	movwf	(Init_System@Baud+1)^(0+512)
  7982  0AB1  3080               	movlw	128
  7983  0AB2  00CC               	movwf	Init_System@Baud^(0+512)
  7984                           
  7985                           ;user.c: 116: Parity = 0;
  7986  0AB3  01D0               	clrf	Init_System@Parity^(0+512)
  7987  0AB4                     l6830:	
  7988                           
  7989                           ;user.c: 117: }
  7990                           ;user.c: 118: InitUART(Baud, Parity);
  7991  0AB4  084F               	movf	(Init_System@Baud+3)^(0+512),w
  7992  0AB5  00B1               	movwf	(InitUART@Baud+3)^(0+512)
  7993  0AB6  084E               	movf	(Init_System@Baud+2)^(0+512),w
  7994  0AB7  00B0               	movwf	(InitUART@Baud+2)^(0+512)
  7995  0AB8  084D               	movf	(Init_System@Baud+1)^(0+512),w
  7996  0AB9  00AF               	movwf	(InitUART@Baud+1)^(0+512)
  7997  0ABA  084C               	movf	Init_System@Baud^(0+512),w
  7998  0ABB  00AE               	movwf	InitUART@Baud^(0+512)
  7999  0ABC  0850               	movf	Init_System@Parity^(0+512),w
  8000  0ABD  00C3               	movwf	??_Init_System^(0+512)
  8001  0ABE  0843               	movf	??_Init_System^(0+512),w
  8002  0ABF  00B2               	movwf	InitUART@parity^(0+512)
  8003  0AC0  3194  243D  318A   	fcall	_InitUART
  8004                           
  8005                           ;user.c: 121: delayUS(15000);
  8006  0AC3  3000               	movlw	0
  8007  0AC4  0024               	movlb	4	; select bank4
  8008  0AC5  00A3               	movwf	(delayUS@US+3)^(0+512)
  8009  0AC6  3000               	movlw	0
  8010  0AC7  00A2               	movwf	(delayUS@US+2)^(0+512)
  8011  0AC8  303A               	movlw	58
  8012  0AC9  00A1               	movwf	(delayUS@US+1)^(0+512)
  8013  0ACA  3098               	movlw	152
  8014  0ACB  00A0               	movwf	delayUS@US^(0+512)
  8015  0ACC  319B  23DB  318A   	fcall	_delayUS
  8016                           
  8017                           ;user.c: 122: UARTstringWAIT("\r\nPS/2 Keyboard to RS-232\r\n");
  8018  0ACF  308F               	movlw	low (STR_3| (0+32768))
  8019  0AD0  0024               	movlb	4	; select bank4
  8020  0AD1  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8021  0AD2  3089               	movlw	high (STR_3| (0+32768))
  8022  0AD3  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8023  0AD4  319B  23A8  318A   	fcall	_UARTstringWAIT
  8024                           
  8025                           ;user.c: 123: delayUS(15000);
  8026  0AD7  3000               	movlw	0
  8027  0AD8  0024               	movlb	4	; select bank4
  8028  0AD9  00A3               	movwf	(delayUS@US+3)^(0+512)
  8029  0ADA  3000               	movlw	0
  8030  0ADB  00A2               	movwf	(delayUS@US+2)^(0+512)
  8031  0ADC  303A               	movlw	58
  8032  0ADD  00A1               	movwf	(delayUS@US+1)^(0+512)
  8033  0ADE  3098               	movlw	152
  8034  0ADF  00A0               	movwf	delayUS@US^(0+512)
  8035  0AE0  319B  23DB  318A   	fcall	_delayUS
  8036                           
  8037                           ;user.c: 124: UARTstringWAIT("Firmware Version: ");
  8038  0AE3  3012               	movlw	low (STR_4| (0+32768))
  8039  0AE4  0024               	movlb	4	; select bank4
  8040  0AE5  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8041  0AE6  308A               	movlw	high (STR_4| (0+32768))
  8042  0AE7  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8043  0AE8  319B  23A8  318A   	fcall	_UARTstringWAIT
  8044                           
  8045                           ;user.c: 125: UARTstringWAIT(Version);
  8046  0AEB  3066               	movlw	low (_Version| (0+32768))
  8047  0AEC  0024               	movlb	4	; select bank4
  8048  0AED  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8049  0AEE  3089               	movlw	high (_Version| (0+32768))
  8050  0AEF  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8051  0AF0  319B  23A8  318A   	fcall	_UARTstringWAIT
  8052                           
  8053                           ;user.c: 126: UARTstringWAIT("\r\n");
  8054  0AF3  30FC               	movlw	low ((STR_14+16)| (0+32768))
  8055  0AF4  0024               	movlb	4	; select bank4
  8056  0AF5  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8057  0AF6  3089               	movlw	high ((STR_14+16)| (0+32768))
  8058  0AF7  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8059  0AF8  319B  23A8  318A   	fcall	_UARTstringWAIT
  8060                           
  8061                           ;user.c: 127: delayUS(15000);
  8062  0AFB  3000               	movlw	0
  8063  0AFC  0024               	movlb	4	; select bank4
  8064  0AFD  00A3               	movwf	(delayUS@US+3)^(0+512)
  8065  0AFE  3000               	movlw	0
  8066  0AFF  00A2               	movwf	(delayUS@US+2)^(0+512)
  8067  0B00  303A               	movlw	58
  8068  0B01  00A1               	movwf	(delayUS@US+1)^(0+512)
  8069  0B02  3098               	movlw	152
  8070  0B03  00A0               	movwf	delayUS@US^(0+512)
  8071  0B04  319B  23DB  318A   	fcall	_delayUS
  8072                           
  8073                           ;user.c: 128: UARTstringWAIT("Change BAUD: \"CNT + ALT + DEL\"\r\n");
  8074  0B07  306E               	movlw	low (STR_6| (0+32768))
  8075  0B08  0024               	movlb	4	; select bank4
  8076  0B09  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8077  0B0A  3089               	movlw	high (STR_6| (0+32768))
  8078  0B0B  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8079  0B0C  319B  23A8  318A   	fcall	_UARTstringWAIT
  8080                           
  8081                           ;user.c: 129: delayUS(15000);
  8082  0B0F  3000               	movlw	0
  8083  0B10  0024               	movlb	4	; select bank4
  8084  0B11  00A3               	movwf	(delayUS@US+3)^(0+512)
  8085  0B12  3000               	movlw	0
  8086  0B13  00A2               	movwf	(delayUS@US+2)^(0+512)
  8087  0B14  303A               	movlw	58
  8088  0B15  00A1               	movwf	(delayUS@US+1)^(0+512)
  8089  0B16  3098               	movlw	152
  8090  0B17  00A0               	movwf	delayUS@US^(0+512)
  8091  0B18  319B  23DB  318A   	fcall	_delayUS
  8092                           
  8093                           ;user.c: 130: UARTstringWAIT("\r\n");
  8094  0B1B  30FC               	movlw	low ((STR_14+16)| (0+32768))
  8095  0B1C  0024               	movlb	4	; select bank4
  8096  0B1D  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8097  0B1E  3089               	movlw	high ((STR_14+16)| (0+32768))
  8098  0B1F  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8099  0B20  319B  23A8  318A   	fcall	_UARTstringWAIT
  8100                           
  8101                           ;user.c: 132: if(Parity)
  8102  0B23  0024               	movlb	4	; select bank4
  8103  0B24  0850               	movf	Init_System@Parity^(0+512),w
  8104  0B25  1903               	btfsc	3,2
  8105  0B26  2B48               	goto	l6868
  8106                           
  8107                           ;user.c: 133: {
  8108                           ;user.c: 134: switch (Parity)
  8109  0B27  2B3B               	goto	l6866
  8110  0B28                     l6856:	
  8111                           ;user.c: 135: {
  8112                           ;user.c: 136: case 1:
  8113                           
  8114                           
  8115                           ;user.c: 137: UARTstringWAIT(OddParityMSG);
  8116  0B28  3011               	movlw	low (_OddParityMSG| (0+32768))
  8117  0B29  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8118  0B2A  3089               	movlw	high (_OddParityMSG| (0+32768))
  8119  0B2B  2B4B               	goto	L3
  8120  0B2C                     l6858:	
  8121                           ;user.c: 139: case 2:
  8122                           
  8123                           ;user.c: 138: break;
  8124                           
  8125                           
  8126                           ;user.c: 140: UARTstringWAIT(EvenParityMSG);
  8127  0B2C  30FB               	movlw	low (_EvenParityMSG| (0+32768))
  8128  0B2D  0024               	movlb	4	; select bank4
  8129  0B2E  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8130  0B2F  3088               	movlw	high (_EvenParityMSG| (0+32768))
  8131  0B30  2B4B               	goto	L3
  8132  0B31                     l6860:	
  8133                           ;user.c: 142: case 3:
  8134                           
  8135                           ;user.c: 141: break;
  8136                           
  8137                           
  8138                           ;user.c: 143: UARTstringWAIT(MarkParityMSG);
  8139  0B31  304A               	movlw	low (_MarkParityMSG| (0+32768))
  8140  0B32  0024               	movlb	4	; select bank4
  8141  0B33  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8142  0B34  3089               	movlw	high (_MarkParityMSG| (0+32768))
  8143  0B35  2B4B               	goto	L3
  8144  0B36                     l6862:	
  8145                           ;user.c: 145: default:
  8146                           
  8147                           ;user.c: 144: break;
  8148                           
  8149                           
  8150                           ;user.c: 146: UARTstringWAIT(SpaceParityMSG);
  8151  0B36  303A               	movlw	low (_SpaceParityMSG| (0+32768))
  8152  0B37  0024               	movlb	4	; select bank4
  8153  0B38  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8154  0B39  3089               	movlw	high (_SpaceParityMSG| (0+32768))
  8155  0B3A  2B4B               	goto	L3
  8156  0B3B                     l6866:	
  8157                           ;user.c: 148: }
  8158                           
  8159                           ;user.c: 147: break;
  8160                           
  8161  0B3B  0024               	movlb	4	; select bank4
  8162  0B3C  0850               	movf	Init_System@Parity^(0+512),w
  8163                           
  8164                           ; Switch size 1, requested type "space"
  8165                           ; Number of cases is 3, Range of values is 1 to 3
  8166                           ; switch strategies available:
  8167                           ; Name         Instructions Cycles
  8168                           ; simple_byte           10     6 (average)
  8169                           ; direct_byte           15     9 (fixed)
  8170                           ; jumptable            263     9 (fixed)
  8171                           ;	Chosen strategy is simple_byte
  8172  0B3D  3A01               	xorlw	1	; case 1
  8173  0B3E  1903               	skipnz
  8174  0B3F  2B28               	goto	l6856
  8175  0B40  3A03               	xorlw	3	; case 2
  8176  0B41  1903               	skipnz
  8177  0B42  2B2C               	goto	l6858
  8178  0B43  3A01               	xorlw	1	; case 3
  8179  0B44  1903               	skipnz
  8180  0B45  2B31               	goto	l6860
  8181  0B46  2B36               	goto	l6862
  8182                           
  8183                           ;user.c: 149: }
  8184  0B47  2B4F               	goto	l274
  8185  0B48                     l6868:	
  8186                           
  8187                           ;user.c: 150: else
  8188                           ;user.c: 151: {
  8189                           ;user.c: 152: UARTstringWAIT(NoParityMSG);
  8190  0B48  3026               	movlw	low (_NoParityMSG| (0+32768))
  8191  0B49  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8192  0B4A  3089               	movlw	high (_NoParityMSG| (0+32768))
  8193  0B4B                     L3:	
  8194  0B4B  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8195  0B4C  319B  23A8  318A   	fcall	_UARTstringWAIT
  8196  0B4F                     l274:	
  8197                           
  8198                           ;user.c: 153: }
  8199                           ;user.c: 154: UARTstringWAIT("\r\n");
  8200  0B4F  30FC               	movlw	low ((STR_14+16)| (0+32768))
  8201  0B50  0024               	movlb	4	; select bank4
  8202  0B51  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8203  0B52  3089               	movlw	high ((STR_14+16)| (0+32768))
  8204  0B53  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8205  0B54  319B  23A8  318A   	fcall	_UARTstringWAIT
  8206                           
  8207                           ;user.c: 155: delayUS(15000);
  8208  0B57  3000               	movlw	0
  8209  0B58  0024               	movlb	4	; select bank4
  8210  0B59  00A3               	movwf	(delayUS@US+3)^(0+512)
  8211  0B5A  3000               	movlw	0
  8212  0B5B  00A2               	movwf	(delayUS@US+2)^(0+512)
  8213  0B5C  303A               	movlw	58
  8214  0B5D  00A1               	movwf	(delayUS@US+1)^(0+512)
  8215  0B5E  3098               	movlw	152
  8216  0B5F  00A0               	movwf	delayUS@US^(0+512)
  8217  0B60  319B  23DB         	fcall	_delayUS
  8218                           
  8219                           ;user.c: 156: INTCON |= 0x08;
  8220  0B62  158B               	bsf	11,3	;volatile
  8221                           
  8222                           ;user.c: 157: INTCONbits.GIE = 1;
  8223  0B63  178B               	bsf	11,7	;volatile
  8224  0B64  0008               	return
  8225  0B65                     __end_of_Init_System:	
  8226                           
  8227                           	psect	text20
  8228  1BA8                     __ptext20:	
  8229 ;; *************** function _UARTstringWAIT *****************
  8230 ;; Defined at:
  8231 ;;		line 361 in file "UART.c"
  8232 ;; Parameters:    Size  Location     Type
  8233 ;;  data            2   15[BANK4 ] PTR const unsigned char 
  8234 ;;		 -> STR_20(20), STR_19(3), Process_PS2_ScanCode@buf(60), STR_17(3), 
  8235 ;;		 -> STR_16(3), STR_15(19), STR_14(19), STR_13(3), 
  8236 ;;		 -> STR_12(3), SetBaud@buf(50), STR_10(21), STR_9(3), 
  8237 ;;		 -> STR_8(3), NoParityMSG(20), SpaceParityMSG(16), MarkParityMSG(15), 
  8238 ;;		 -> EvenParityMSG(22), OddParityMSG(21), STR_7(3), STR_6(33), 
  8239 ;;		 -> STR_5(3), Version(8), STR_4(19), STR_3(28), 
  8240 ;;		 -> STR_2(8), STR_1(7), VoltageMSG(13), 
  8241 ;; Auto vars:     Size  Location     Type
  8242 ;;		None
  8243 ;; Return value:  Size  Location     Type
  8244 ;;		None               void
  8245 ;; Registers used:
  8246 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8247 ;; Tracked objects:
  8248 ;;		On entry : 0/0
  8249 ;;		On exit  : 0/0
  8250 ;;		Unchanged: 0/0
  8251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8252 ;;      Params:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  8253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8254 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  8255 ;;      Totals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8256 ;;Total ram usage:        4 bytes
  8257 ;; Hardware stack levels used:    1
  8258 ;; Hardware stack levels required when called:    9
  8259 ;; This function calls:
  8260 ;;		_UARTchar
  8261 ;;		_delayUS
  8262 ;; This function is called by:
  8263 ;;		_main
  8264 ;;		_Init_System
  8265 ;; This function uses a non-reentrant model
  8266 ;;
  8267                           
  8268                           
  8269                           ;psect for function _UARTstringWAIT
  8270  1BA8                     _UARTstringWAIT:	
  8271  1BA8                     l466:	
  8272                           ;incstack = 0
  8273                           ; Regs used in _UARTstringWAIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8274                           ;UART.c: 363: do
  8275                           
  8276                           
  8277                           ;UART.c: 364: {
  8278                           ;UART.c: 365: delayUS(5000);
  8279  1BA8  3000               	movlw	0
  8280  1BA9  0024               	movlb	4	; select bank4
  8281  1BAA  00A3               	movwf	(delayUS@US+3)^(0+512)
  8282  1BAB  3000               	movlw	0
  8283  1BAC  00A2               	movwf	(delayUS@US+2)^(0+512)
  8284  1BAD  3013               	movlw	19
  8285  1BAE  00A1               	movwf	(delayUS@US+1)^(0+512)
  8286  1BAF  3088               	movlw	136
  8287  1BB0  00A0               	movwf	delayUS@US^(0+512)
  8288  1BB1  319B  23DB  319B   	fcall	_delayUS
  8289                           
  8290                           ;UART.c: 366: if(*data != 0)
  8291  1BB4  0024               	movlb	4	; select bank4
  8292  1BB5  082F               	movf	UARTstringWAIT@data^(0+512),w
  8293  1BB6  0084               	movwf	4
  8294  1BB7  0830               	movf	(UARTstringWAIT@data+1)^(0+512),w
  8295  1BB8  0085               	movwf	5
  8296  1BB9  0800               	movf	0,w	;code access
  8297  1BBA  3A00               	xorlw	0
  8298  1BBB  1903               	skipnz
  8299  1BBC  2BCA               	goto	l6526
  8300                           
  8301                           ;UART.c: 367: {
  8302                           ;UART.c: 368: UARTchar(*data, 0, 0);
  8303  1BBD  01A8               	clrf	UARTchar@override^(0+512)
  8304  1BBE  01A9               	clrf	UARTchar@NinethBit_override_data^(0+512)
  8305  1BBF  082F               	movf	UARTstringWAIT@data^(0+512),w
  8306  1BC0  0084               	movwf	4
  8307  1BC1  0830               	movf	(UARTstringWAIT@data+1)^(0+512),w
  8308  1BC2  0085               	movwf	5
  8309  1BC3  0800               	movf	0,w	;code access
  8310  1BC4  3190  207B  319B   	fcall	_UARTchar
  8311  1BC7                     l468:	
  8312                           ;UART.c: 369: while((!TX1STAbits.TRMT));
  8313                           
  8314  1BC7  0023               	movlb	3	; select bank3
  8315  1BC8  1C9E               	btfss	30,1	;volatile
  8316  1BC9  2BC7               	goto	l468
  8317  1BCA                     l6526:	
  8318                           
  8319                           ;UART.c: 370: }
  8320                           ;UART.c: 371: } while( *data++);
  8321  1BCA  0024               	movlb	4	; select bank4
  8322  1BCB  0830               	movf	(UARTstringWAIT@data+1)^(0+512),w
  8323  1BCC  00B2               	movwf	(??_UARTstringWAIT^(0+512)+1)
  8324  1BCD  082F               	movf	UARTstringWAIT@data^(0+512),w
  8325  1BCE  00B1               	movwf	??_UARTstringWAIT^(0+512)
  8326  1BCF  0AAF               	incf	UARTstringWAIT@data^(0+512),f
  8327  1BD0  1903               	skipnz
  8328  1BD1  0AB0               	incf	(UARTstringWAIT@data+1)^(0+512),f
  8329  1BD2  0831               	movf	??_UARTstringWAIT^(0+512),w
  8330  1BD3  0084               	movwf	4
  8331  1BD4  0832               	movf	(??_UARTstringWAIT+1)^(0+512),w
  8332  1BD5  0085               	movwf	5
  8333  1BD6  0800               	movf	0,w	;code access
  8334  1BD7  3800               	iorlw	0
  8335  1BD8  1903               	btfsc	3,2
  8336  1BD9  0008               	return
  8337  1BDA  2BA8               	goto	l466
  8338  1BDB                     __end_of_UARTstringWAIT:	
  8339                           
  8340                           	psect	text21
  8341  1BDB                     __ptext21:	
  8342 ;; *************** function _delayUS *****************
  8343 ;; Defined at:
  8344 ;;		line 49 in file "MISC.c"
  8345 ;; Parameters:    Size  Location     Type
  8346 ;;  US              4    0[BANK4 ] long 
  8347 ;; Auto vars:     Size  Location     Type
  8348 ;;  i               4    5[BANK4 ] long 
  8349 ;;  j               1    9[BANK4 ] unsigned char 
  8350 ;; Return value:  Size  Location     Type
  8351 ;;		None               void
  8352 ;; Registers used:
  8353 ;;		wreg, status,2, status,0
  8354 ;; Tracked objects:
  8355 ;;		On entry : 0/0
  8356 ;;		On exit  : 0/0
  8357 ;;		Unchanged: 0/0
  8358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8359 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8360 ;;      Locals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  8361 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  8362 ;;      Totals:         0       0       0       0       0      10       0       0       0       0       0       0       
      +0       0
  8363 ;;Total ram usage:       10 bytes
  8364 ;; Hardware stack levels used:    1
  8365 ;; Hardware stack levels required when called:    7
  8366 ;; This function calls:
  8367 ;;		Nothing
  8368 ;; This function is called by:
  8369 ;;		_main
  8370 ;;		_Init_System
  8371 ;;		_UARTstringWAIT
  8372 ;;		_Send_PS2
  8373 ;;		_Init_PS_2_Send
  8374 ;;		_InternalADC_Read
  8375 ;;		_Keyboard_Connected
  8376 ;; This function uses a non-reentrant model
  8377 ;;
  8378                           
  8379                           
  8380                           ;psect for function _delayUS
  8381  1BDB                     _delayUS:	
  8382                           
  8383                           ;MISC.c: 51: long i;
  8384                           ;MISC.c: 52: unsigned char j;
  8385                           ;MISC.c: 53: for(i=0;i<US;i+=6)
  8386                           
  8387                           ;incstack = 0
  8388                           ; Regs used in _delayUS: [wreg+status,2+status,0]
  8389  1BDB  3000               	movlw	0
  8390  1BDC  0024               	movlb	4	; select bank4
  8391  1BDD  00A8               	movwf	(delayUS@i+3)^(0+512)
  8392  1BDE  3000               	movlw	0
  8393  1BDF  00A7               	movwf	(delayUS@i+2)^(0+512)
  8394  1BE0  3000               	movlw	0
  8395  1BE1  00A6               	movwf	(delayUS@i+1)^(0+512)
  8396  1BE2  3000               	movlw	0
  8397  1BE3  00A5               	movwf	delayUS@i^(0+512)
  8398  1BE4                     l282:	
  8399  1BE4  0828               	movf	(delayUS@i+3)^(0+512),w
  8400  1BE5  3A80               	xorlw	128
  8401  1BE6  00A4               	movwf	??_delayUS^(0+512)
  8402  1BE7  0823               	movf	(delayUS@US+3)^(0+512),w
  8403  1BE8  3A80               	xorlw	128
  8404  1BE9  0224               	subwf	??_delayUS^(0+512),w
  8405  1BEA  1D03               	skipz
  8406  1BEB  2BF6               	goto	u7773
  8407  1BEC  0822               	movf	(delayUS@US+2)^(0+512),w
  8408  1BED  0227               	subwf	(delayUS@i+2)^(0+512),w
  8409  1BEE  1D03               	skipz
  8410  1BEF  2BF6               	goto	u7773
  8411  1BF0  0821               	movf	(delayUS@US+1)^(0+512),w
  8412  1BF1  0226               	subwf	(delayUS@i+1)^(0+512),w
  8413  1BF2  1D03               	skipz
  8414  1BF3  2BF6               	goto	u7773
  8415  1BF4  0820               	movf	delayUS@US^(0+512),w
  8416  1BF5  0225               	subwf	delayUS@i^(0+512),w
  8417  1BF6                     u7773:	
  8418  1BF6  1803               	btfsc	3,0
  8419  1BF7  0008               	return
  8420                           
  8421                           ;MISC.c: 54: {
  8422                           ;MISC.c: 55: for(j=0;j<32;j++)
  8423  1BF8  01A9               	clrf	delayUS@j^(0+512)
  8424  1BF9  3020               	movlw	32
  8425  1BFA  0229               	subwf	delayUS@j^(0+512),w
  8426  1BFB  1803               	btfsc	3,0
  8427  1BFC  2C07               	goto	l6164
  8428  1BFD                     l284:	
  8429                           
  8430                           ;MISC.c: 56: {
  8431                           ;MISC.c: 57: __nop();
  8432  1BFD  0000               	nop
  8433  1BFE  3001               	movlw	1
  8434  1BFF  0024               	movlb	4	; select bank4
  8435  1C00  00A4               	movwf	??_delayUS^(0+512)
  8436  1C01  0824               	movf	??_delayUS^(0+512),w
  8437  1C02  07A9               	addwf	delayUS@j^(0+512),f
  8438  1C03  3020               	movlw	32
  8439  1C04  0229               	subwf	delayUS@j^(0+512),w
  8440  1C05  1C03               	skipc
  8441  1C06  2BFD               	goto	l284
  8442  1C07                     l6164:	
  8443  1C07  3006               	movlw	6
  8444  1C08  07A5               	addwf	delayUS@i^(0+512),f
  8445  1C09  3000               	movlw	0
  8446  1C0A  3DA6               	addwfc	(delayUS@i+1)^(0+512),f
  8447  1C0B  3000               	movlw	0
  8448  1C0C  3DA7               	addwfc	(delayUS@i+2)^(0+512),f
  8449  1C0D  3000               	movlw	0
  8450  1C0E  3DA8               	addwfc	(delayUS@i+3)^(0+512),f
  8451  1C0F  2BE4               	goto	l282
  8452  1C10                     __end_of_delayUS:	
  8453                           
  8454                           	psect	text22
  8455  107B                     __ptext22:	
  8456 ;; *************** function _UARTchar *****************
  8457 ;; Defined at:
  8458 ;;		line 231 in file "UART.c"
  8459 ;; Parameters:    Size  Location     Type
  8460 ;;  data            1    wreg     unsigned char 
  8461 ;;  override        1    8[BANK4 ] unsigned char 
  8462 ;;  NinethBit_ov    1    9[BANK4 ] unsigned char 
  8463 ;; Auto vars:     Size  Location     Type
  8464 ;;  data            1   14[BANK4 ] unsigned char 
  8465 ;; Return value:  Size  Location     Type
  8466 ;;		None               void
  8467 ;; Registers used:
  8468 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8469 ;; Tracked objects:
  8470 ;;		On entry : 0/0
  8471 ;;		On exit  : 0/0
  8472 ;;		Unchanged: 0/0
  8473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8474 ;;      Params:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  8475 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  8476 ;;      Temps:          0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8477 ;;      Totals:         0       0       0       0       0       7       0       0       0       0       0       0       
      +0       0
  8478 ;;Total ram usage:        7 bytes
  8479 ;; Hardware stack levels used:    1
  8480 ;; Hardware stack levels required when called:    8
  8481 ;; This function calls:
  8482 ;;		_CheckSum_byte
  8483 ;; This function is called by:
  8484 ;;		_UARTstringWAIT
  8485 ;;		_UARTstring
  8486 ;; This function uses a non-reentrant model
  8487 ;;
  8488                           
  8489                           
  8490                           ;psect for function _UARTchar
  8491  107B                     _UARTchar:	
  8492                           
  8493                           ;incstack = 0
  8494                           ; Regs used in _UARTchar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8495                           ;UARTchar@data stored from wreg
  8496  107B  0024               	movlb	4	; select bank4
  8497  107C  00AE               	movwf	UARTchar@data^(0+512)
  8498                           
  8499                           ;UART.c: 233: if(TXSTAbits.TX9)
  8500  107D  0023               	movlb	3	; select bank3
  8501  107E  1F1E               	btfss	30,6	;volatile
  8502  107F  28C4               	goto	l6250
  8503                           
  8504                           ;UART.c: 234: {
  8505                           ;UART.c: 236: if(!override)
  8506  1080  0024               	movlb	4	; select bank4
  8507  1081  08A8               	movf	UARTchar@override^(0+512),f
  8508  1082  1903               	btfsc	3,2
  8509  1083  28AC               	goto	l6246
  8510  1084  28B9               	goto	l6248
  8511  1085                     l6240:	
  8512                           ;UART.c: 240: {
  8513                           ;UART.c: 241: case 1:
  8514                           
  8515                           ;UART.c: 237: {
  8516                           ;UART.c: 239: switch (PARITY)
  8517                           
  8518                           
  8519                           ;UART.c: 242: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 3);
  8520  1085  082E               	movf	UARTchar@data^(0+512),w
  8521  1086  00AA               	movwf	??_UARTchar^(0+512)
  8522  1087  01AB               	clrf	(??_UARTchar^(0+512)+1)
  8523  1088  082A               	movf	??_UARTchar^(0+512),w
  8524  1089  00A0               	movwf	CheckSum_byte@This^(0+512)
  8525  108A  082B               	movf	(??_UARTchar+1)^(0+512),w
  8526  108B  00A1               	movwf	(CheckSum_byte@This+1)^(0+512)
  8527  108C  3003               	movlw	3
  8528  108D  2897               	goto	L6
  8529  108E                     l6242:	
  8530                           ;UART.c: 244: case 2:
  8531                           
  8532                           ;UART.c: 243: break;
  8533                           
  8534                           
  8535                           ;UART.c: 245: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 2);
  8536  108E  0024               	movlb	4	; select bank4
  8537  108F  082E               	movf	UARTchar@data^(0+512),w
  8538  1090  00AA               	movwf	??_UARTchar^(0+512)
  8539  1091  01AB               	clrf	(??_UARTchar^(0+512)+1)
  8540  1092  082A               	movf	??_UARTchar^(0+512),w
  8541  1093  00A0               	movwf	CheckSum_byte@This^(0+512)
  8542  1094  082B               	movf	(??_UARTchar+1)^(0+512),w
  8543  1095  00A1               	movwf	(CheckSum_byte@This+1)^(0+512)
  8544  1096  3002               	movlw	2
  8545  1097                     L6:	
  8546  1097  00AC               	movwf	(??_UARTchar+2)^(0+512)
  8547  1098  082C               	movf	(??_UARTchar+2)^(0+512),w
  8548  1099  00A2               	movwf	CheckSum_byte@Odd_Even^(0+512)
  8549  109A  319A  22E0  3190   	fcall	_CheckSum_byte
  8550  109D  0024               	movlb	4	; select bank4
  8551  109E  00AD               	movwf	(??_UARTchar+3)^(0+512)
  8552  109F  0023               	movlb	3	; select bank3
  8553  10A0  081E               	movf	30,w	;volatile
  8554  10A1  0024               	movlb	4	; select bank4
  8555  10A2  062D               	xorwf	(??_UARTchar+3)^(0+512),w
  8556  10A3  39FE               	andlw	-2
  8557  10A4  062D               	xorwf	(??_UARTchar+3)^(0+512),w
  8558  10A5  28C2               	goto	L5
  8559  10A6                     l432:	
  8560                           ;UART.c: 247: case 3:
  8561                           
  8562                           ;UART.c: 246: break;
  8563                           
  8564                           
  8565                           ;UART.c: 248: TXSTAbits.TX9D = 1;
  8566  10A6  0023               	movlb	3	; select bank3
  8567  10A7  141E               	bsf	30,0	;volatile
  8568                           
  8569                           ;UART.c: 249: break;
  8570  10A8  28C4               	goto	l6250
  8571  10A9                     l433:	
  8572                           ;UART.c: 250: default:
  8573                           
  8574                           
  8575                           ;UART.c: 251: TXSTAbits.TX9D = 0;
  8576  10A9  0023               	movlb	3	; select bank3
  8577  10AA  101E               	bcf	30,0	;volatile
  8578                           
  8579                           ;UART.c: 253: }
  8580                           
  8581                           ;UART.c: 252: break;
  8582  10AB  28C4               	goto	l6250
  8583  10AC                     l6246:	
  8584  10AC  0024               	movlb	4	; select bank4
  8585  10AD  0860               	movf	_PARITY^(0+512),w
  8586                           
  8587                           ; Switch size 1, requested type "space"
  8588                           ; Number of cases is 3, Range of values is 1 to 3
  8589                           ; switch strategies available:
  8590                           ; Name         Instructions Cycles
  8591                           ; simple_byte           10     6 (average)
  8592                           ; direct_byte           15     9 (fixed)
  8593                           ; jumptable            263     9 (fixed)
  8594                           ;	Chosen strategy is simple_byte
  8595  10AE  3A01               	xorlw	1	; case 1
  8596  10AF  1903               	skipnz
  8597  10B0  2885               	goto	l6240
  8598  10B1  3A03               	xorlw	3	; case 2
  8599  10B2  1903               	skipnz
  8600  10B3  288E               	goto	l6242
  8601  10B4  3A01               	xorlw	1	; case 3
  8602  10B5  1903               	skipnz
  8603  10B6  28A6               	goto	l432
  8604  10B7  28A9               	goto	l433
  8605                           
  8606                           ;UART.c: 254: }
  8607  10B8  28C4               	goto	l6250
  8608  10B9                     l6248:	
  8609                           
  8610                           ;UART.c: 255: else
  8611                           ;UART.c: 256: {
  8612                           ;UART.c: 257: TXSTAbits.TX9D = (NinethBit_override_data & 0x01);
  8613  10B9  3001               	movlw	1
  8614  10BA  0529               	andwf	UARTchar@NinethBit_override_data^(0+512),w
  8615  10BB  00AA               	movwf	??_UARTchar^(0+512)
  8616  10BC  0023               	movlb	3	; select bank3
  8617  10BD  081E               	movf	30,w	;volatile
  8618  10BE  0024               	movlb	4	; select bank4
  8619  10BF  062A               	xorwf	??_UARTchar^(0+512),w
  8620  10C0  39FE               	andlw	-2
  8621  10C1  062A               	xorwf	??_UARTchar^(0+512),w
  8622  10C2                     L5:	
  8623  10C2  0023               	movlb	3	; select bank3
  8624  10C3  009E               	movwf	30	;volatile
  8625  10C4                     l6250:	
  8626                           
  8627                           ;UART.c: 258: }
  8628                           ;UART.c: 259: }
  8629                           ;UART.c: 261: if(data == '\n')
  8630  10C4  0024               	movlb	4	; select bank4
  8631  10C5  082E               	movf	UARTchar@data^(0+512),w
  8632  10C6  3A0A               	xorlw	10
  8633  10C7  1D03               	skipz
  8634  10C8  28D5               	goto	l441
  8635                           
  8636                           ;UART.c: 262: {
  8637                           ;UART.c: 263: if(override)
  8638  10C9  0828               	movf	UARTchar@override^(0+512),w
  8639  10CA  1903               	btfsc	3,2
  8640  10CB  0008               	return
  8641  10CC                     l437:	
  8642                           ;UART.c: 264: {
  8643                           ;UART.c: 265: while(!TXSTAbits.TRMT);
  8644                           
  8645  10CC  0023               	movlb	3	; select bank3
  8646  10CD  1C9E               	btfss	30,1	;volatile
  8647  10CE  28CC               	goto	l437
  8648                           
  8649                           ;UART.c: 266: TXREG = data;
  8650  10CF  0024               	movlb	4	; select bank4
  8651  10D0  082E               	movf	UARTchar@data^(0+512),w
  8652  10D1  0023               	movlb	3	; select bank3
  8653  10D2  009A               	movwf	26	;volatile
  8654  10D3  0024               	movlb	4	; select bank4
  8655  10D4  0008               	return
  8656  10D5                     l441:	
  8657                           ;UART.c: 269: else
  8658                           ;UART.c: 270: {
  8659                           ;UART.c: 271: while(!TXSTAbits.TRMT);
  8660                           
  8661                           ;UART.c: 267: }
  8662                           ;UART.c: 268: }
  8663                           
  8664  10D5  0023               	movlb	3	; select bank3
  8665  10D6  1C9E               	btfss	30,1	;volatile
  8666  10D7  28D5               	goto	l441
  8667                           
  8668                           ;UART.c: 272: TXREG = data;
  8669  10D8  0024               	movlb	4	; select bank4
  8670  10D9  082E               	movf	UARTchar@data^(0+512),w
  8671  10DA  0023               	movlb	3	; select bank3
  8672  10DB  009A               	movwf	26	;volatile
  8673  10DC  0024               	movlb	4	; select bank4
  8674  10DD  0008               	return
  8675  10DE                     __end_of_UARTchar:	
  8676                           
  8677                           	psect	text23
  8678  1AE0                     __ptext23:	
  8679 ;; *************** function _CheckSum_byte *****************
  8680 ;; Defined at:
  8681 ;;		line 69 in file "MISC.c"
  8682 ;; Parameters:    Size  Location     Type
  8683 ;;  This            2    0[BANK4 ] unsigned int 
  8684 ;;  Odd_Even        1    2[BANK4 ] unsigned char 
  8685 ;; Auto vars:     Size  Location     Type
  8686 ;;  ThisTemp        2    4[BANK4 ] unsigned int 
  8687 ;;  i               1    7[BANK4 ] unsigned char 
  8688 ;;  Parity          1    6[BANK4 ] unsigned char 
  8689 ;; Return value:  Size  Location     Type
  8690 ;;                  1    wreg      unsigned char 
  8691 ;; Registers used:
  8692 ;;		wreg, status,2, status,0
  8693 ;; Tracked objects:
  8694 ;;		On entry : 0/0
  8695 ;;		On exit  : 0/0
  8696 ;;		Unchanged: 0/0
  8697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8698 ;;      Params:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  8699 ;;      Locals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8700 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  8701 ;;      Totals:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  8702 ;;Total ram usage:        8 bytes
  8703 ;; Hardware stack levels used:    1
  8704 ;; Hardware stack levels required when called:    7
  8705 ;; This function calls:
  8706 ;;		Nothing
  8707 ;; This function is called by:
  8708 ;;		_UARTchar
  8709 ;;		_Send_PS2
  8710 ;; This function uses a non-reentrant model
  8711 ;;
  8712                           
  8713                           
  8714                           ;psect for function _CheckSum_byte
  8715  1AE0                     _CheckSum_byte:	
  8716                           
  8717                           ;MISC.c: 71: char i = 0;
  8718                           
  8719                           ;incstack = 0
  8720                           ; Regs used in _CheckSum_byte: [wreg+status,2+status,0]
  8721  1AE0  0024               	movlb	4	; select bank4
  8722  1AE1  01A7               	clrf	CheckSum_byte@i^(0+512)
  8723                           
  8724                           ;MISC.c: 72: unsigned char Parity = 0;
  8725  1AE2  01A6               	clrf	CheckSum_byte@Parity^(0+512)
  8726                           
  8727                           ;MISC.c: 73: unsigned int ThisTemp = This;
  8728  1AE3  0821               	movf	(CheckSum_byte@This+1)^(0+512),w
  8729  1AE4  01A5               	clrf	(CheckSum_byte@ThisTemp+1)^(0+512)
  8730  1AE5  07A5               	addwf	(CheckSum_byte@ThisTemp+1)^(0+512),f
  8731  1AE6  0820               	movf	CheckSum_byte@This^(0+512),w
  8732  1AE7  01A4               	clrf	CheckSum_byte@ThisTemp^(0+512)
  8733  1AE8  07A4               	addwf	CheckSum_byte@ThisTemp^(0+512),f
  8734                           
  8735                           ;MISC.c: 75: for (i =0; i<8; i++)
  8736  1AE9  01A7               	clrf	CheckSum_byte@i^(0+512)
  8737  1AEA  3008               	movlw	8
  8738  1AEB  0227               	subwf	CheckSum_byte@i^(0+512),w
  8739  1AEC  1803               	btfsc	3,0
  8740  1AED  2B01               	goto	l6180
  8741  1AEE                     l290:	
  8742                           
  8743                           ;MISC.c: 76: {
  8744                           ;MISC.c: 77: if((ThisTemp & 0x01) == 1)
  8745  1AEE  1C24               	btfss	CheckSum_byte@ThisTemp^(0+512),0
  8746  1AEF  2AF4               	goto	l292
  8747                           
  8748                           ;MISC.c: 78: {
  8749                           ;MISC.c: 79: Parity++;
  8750  1AF0  3001               	movlw	1
  8751  1AF1  00A3               	movwf	??_CheckSum_byte^(0+512)
  8752  1AF2  0823               	movf	??_CheckSum_byte^(0+512),w
  8753  1AF3  07A6               	addwf	CheckSum_byte@Parity^(0+512),f
  8754  1AF4                     l292:	
  8755                           
  8756                           ;MISC.c: 80: }
  8757                           ;MISC.c: 81: ThisTemp >>= 1;
  8758  1AF4  3001               	movlw	1
  8759  1AF5                     u7805:	
  8760  1AF5  36A5               	lsrf	(CheckSum_byte@ThisTemp+1)^(0+512),f
  8761  1AF6  0CA4               	rrf	CheckSum_byte@ThisTemp^(0+512),f
  8762  1AF7  0B89               	decfsz	9,f
  8763  1AF8  2AF5               	goto	u7805
  8764  1AF9  3001               	movlw	1
  8765  1AFA  00A3               	movwf	??_CheckSum_byte^(0+512)
  8766  1AFB  0823               	movf	??_CheckSum_byte^(0+512),w
  8767  1AFC  07A7               	addwf	CheckSum_byte@i^(0+512),f
  8768  1AFD  3008               	movlw	8
  8769  1AFE  0227               	subwf	CheckSum_byte@i^(0+512),w
  8770  1AFF  1C03               	skipc
  8771  1B00  2AEE               	goto	l290
  8772  1B01                     l6180:	
  8773                           
  8774                           ;MISC.c: 82: }
  8775                           ;MISC.c: 83: if(Odd_Even == 3)
  8776  1B01  0822               	movf	CheckSum_byte@Odd_Even^(0+512),w
  8777  1B02  3A03               	xorlw	3
  8778  1B03  1D03               	skipz
  8779  1B04  2B0B               	goto	l293
  8780                           
  8781                           ;MISC.c: 84: {
  8782                           ;MISC.c: 85: if(Parity % 2 == 0)
  8783  1B05  1826               	btfsc	CheckSum_byte@Parity^(0+512),0
  8784  1B06  2B09               	goto	l6188
  8785                           
  8786                           ;MISC.c: 86: {
  8787                           ;MISC.c: 87: return 1;
  8788  1B07  3001               	movlw	1
  8789  1B08  0008               	return
  8790  1B09                     l6188:	
  8791                           
  8792                           ;MISC.c: 88: }
  8793                           ;MISC.c: 89: return 0;
  8794  1B09  3000               	movlw	0
  8795                           
  8796                           ;MISC.c: 90: }
  8797  1B0A  0008               	return
  8798  1B0B                     l293:	
  8799                           
  8800                           ;MISC.c: 91: else
  8801                           ;MISC.c: 92: {
  8802                           ;MISC.c: 93: if(Parity % 2 == 1)
  8803  1B0B  1C26               	btfss	CheckSum_byte@Parity^(0+512),0
  8804  1B0C  2B0F               	goto	l6198
  8805                           
  8806                           ;MISC.c: 94: {
  8807                           ;MISC.c: 95: return 1;
  8808  1B0D  3001               	movlw	1
  8809  1B0E  0008               	return
  8810  1B0F                     l6198:	
  8811                           
  8812                           ;MISC.c: 96: }
  8813                           ;MISC.c: 97: return 0;
  8814  1B0F  3000               	movlw	0
  8815  1B10  0008               	return
  8816  1B11                     __end_of_CheckSum_byte:	
  8817                           
  8818                           	psect	text24
  8819  1142                     __ptext24:	
  8820 ;; *************** function _ReadBaud *****************
  8821 ;; Defined at:
  8822 ;;		line 187 in file "FLASH.c"
  8823 ;; Parameters:    Size  Location     Type
  8824 ;;  row             2   18[BANK4 ] unsigned int 
  8825 ;;  column          1   20[BANK4 ] unsigned char 
  8826 ;; Auto vars:     Size  Location     Type
  8827 ;;  temp            4   30[BANK4 ] unsigned long 
  8828 ;; Return value:  Size  Location     Type
  8829 ;;                  4   18[BANK4 ] unsigned long 
  8830 ;; Registers used:
  8831 ;;		wreg, status,2, status,0, pclath, cstack
  8832 ;; Tracked objects:
  8833 ;;		On entry : 0/0
  8834 ;;		On exit  : 0/0
  8835 ;;		Unchanged: 0/0
  8836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8837 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8838 ;;      Locals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8839 ;;      Temps:          0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  8840 ;;      Totals:         0       0       0       0       0      16       0       0       0       0       0       0       
      +0       0
  8841 ;;Total ram usage:       16 bytes
  8842 ;; Hardware stack levels used:    1
  8843 ;; Hardware stack levels required when called:    9
  8844 ;; This function calls:
  8845 ;;		_ReadFlash_4Byte
  8846 ;; This function is called by:
  8847 ;;		_Init_System
  8848 ;; This function uses a non-reentrant model
  8849 ;;
  8850                           
  8851                           
  8852                           ;psect for function _ReadBaud
  8853  1142                     _ReadBaud:	
  8854                           
  8855                           ;FLASH.c: 189: unsigned long temp;
  8856                           ;FLASH.c: 190: temp =(ReadFlash_4Byte(row, column));
  8857                           
  8858                           ;incstack = 0
  8859                           ; Regs used in _ReadBaud: [wreg+status,2+status,0+pclath+cstack]
  8860  1142  0024               	movlb	4	; select bank4
  8861  1143  0833               	movf	(ReadBaud@row+1)^(0+512),w
  8862  1144  01A6               	clrf	(ReadFlash_4Byte@row+1)^(0+512)
  8863  1145  07A6               	addwf	(ReadFlash_4Byte@row+1)^(0+512),f
  8864  1146  0832               	movf	ReadBaud@row^(0+512),w
  8865  1147  01A5               	clrf	ReadFlash_4Byte@row^(0+512)
  8866  1148  07A5               	addwf	ReadFlash_4Byte@row^(0+512),f
  8867  1149  0834               	movf	ReadBaud@column^(0+512),w
  8868  114A  00B6               	movwf	??_ReadBaud^(0+512)
  8869  114B  0836               	movf	??_ReadBaud^(0+512),w
  8870  114C  00A7               	movwf	ReadFlash_4Byte@column^(0+512)
  8871  114D  319D  25F6  3191   	fcall	_ReadFlash_4Byte
  8872  1150  0024               	movlb	4	; select bank4
  8873  1151  0828               	movf	(?_ReadFlash_4Byte+3)^(0+512),w
  8874  1152  00C1               	movwf	(ReadBaud@temp+3)^(0+512)
  8875  1153  0827               	movf	(?_ReadFlash_4Byte+2)^(0+512),w
  8876  1154  00C0               	movwf	(ReadBaud@temp+2)^(0+512)
  8877  1155  0826               	movf	(?_ReadFlash_4Byte+1)^(0+512),w
  8878  1156  00BF               	movwf	(ReadBaud@temp+1)^(0+512)
  8879  1157  0825               	movf	?_ReadFlash_4Byte^(0+512),w
  8880  1158  00BE               	movwf	ReadBaud@temp^(0+512)
  8881                           
  8882                           ;FLASH.c: 191: MEM[1] = (unsigned int)(temp & 0x0003FFF);
  8883  1159  30FF               	movlw	255
  8884  115A  053E               	andwf	ReadBaud@temp^(0+512),w
  8885  115B  0021               	movlb	1	; select bank1
  8886  115C  00E4               	movwf	(_MEM^(0+128)+2)
  8887  115D  303F               	movlw	63
  8888  115E  0024               	movlb	4	; select bank4
  8889  115F  053F               	andwf	(ReadBaud@temp+1)^(0+512),w
  8890  1160  0021               	movlb	1	; select bank1
  8891  1161  00E5               	movwf	((_MEM+1)^(0+128)+2)
  8892                           
  8893                           ;FLASH.c: 192: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
  8894  1162  0024               	movlb	4	; select bank4
  8895  1163  083E               	movf	ReadBaud@temp^(0+512),w
  8896  1164  00B6               	movwf	??_ReadBaud^(0+512)
  8897  1165  083F               	movf	(ReadBaud@temp+1)^(0+512),w
  8898  1166  00B7               	movwf	(??_ReadBaud^(0+512)+1)
  8899  1167  0840               	movf	(ReadBaud@temp+2)^(0+512),w
  8900  1168  00B8               	movwf	(??_ReadBaud^(0+512)+2)
  8901  1169  0841               	movf	(ReadBaud@temp+3)^(0+512),w
  8902  116A  00B9               	movwf	(??_ReadBaud^(0+512)+3)
  8903  116B  300E               	movlw	14
  8904  116C                     u8485:	
  8905  116C  36B9               	lsrf	(??_ReadBaud^(0+512)+3),f
  8906  116D  0CB8               	rrf	(??_ReadBaud^(0+512)+2),f
  8907  116E  0CB7               	rrf	(??_ReadBaud^(0+512)+1),f
  8908  116F  0CB6               	rrf	??_ReadBaud^(0+512),f
  8909  1170  0B89               	decfsz	9,f
  8910  1171  296C               	goto	u8485
  8911  1172  30FF               	movlw	255
  8912  1173  0536               	andwf	??_ReadBaud^(0+512),w
  8913  1174  0021               	movlb	1	; select bank1
  8914  1175  00E2               	movwf	_MEM^(0+128)
  8915  1176  303F               	movlw	63
  8916  1177  0024               	movlb	4	; select bank4
  8917  1178  0537               	andwf	(??_ReadBaud+1)^(0+512),w
  8918  1179  0021               	movlb	1	; select bank1
  8919  117A  00E3               	movwf	(_MEM+1)^(0+128)
  8920                           
  8921                           ;FLASH.c: 193: return (((unsigned long)MEM[0] << 12) + (unsigned long)MEM[1]);
  8922  117B  0864               	movf	(_MEM^(0+128)+2),w
  8923  117C  0024               	movlb	4	; select bank4
  8924  117D  00B6               	movwf	??_ReadBaud^(0+512)
  8925  117E  0021               	movlb	1	; select bank1
  8926  117F  0865               	movf	((_MEM+1)^(0+128)+2),w
  8927  1180  0024               	movlb	4	; select bank4
  8928  1181  00B7               	movwf	(??_ReadBaud^(0+512)+1)
  8929  1182  01B8               	clrf	(??_ReadBaud^(0+512)+2)
  8930  1183  01B9               	clrf	(??_ReadBaud^(0+512)+3)
  8931  1184  0021               	movlb	1	; select bank1
  8932  1185  0862               	movf	_MEM^(0+128),w
  8933  1186  0024               	movlb	4	; select bank4
  8934  1187  00BA               	movwf	(??_ReadBaud+4)^(0+512)
  8935  1188  0021               	movlb	1	; select bank1
  8936  1189  0863               	movf	(_MEM+1)^(0+128),w
  8937  118A  0024               	movlb	4	; select bank4
  8938  118B  00BB               	movwf	((??_ReadBaud+4)^(0+512)+1)
  8939  118C  01BC               	clrf	((??_ReadBaud+4)^(0+512)+2)
  8940  118D  01BD               	clrf	((??_ReadBaud+4)^(0+512)+3)
  8941  118E  300C               	movlw	12
  8942  118F                     u8495:	
  8943  118F  35BA               	lslf	(??_ReadBaud+4)^(0+512),f
  8944  1190  0DBB               	rlf	((??_ReadBaud+4)^(0+512)+1),f
  8945  1191  0DBC               	rlf	((??_ReadBaud+4)^(0+512)+2),f
  8946  1192  0DBD               	rlf	((??_ReadBaud+4)^(0+512)+3),f
  8947  1193  0B89               	decfsz	9,f
  8948  1194  298F               	goto	u8495
  8949  1195  083A               	movf	(??_ReadBaud+4)^(0+512),w
  8950  1196  07B6               	addwf	??_ReadBaud^(0+512),f
  8951  1197  083B               	movf	(??_ReadBaud+5)^(0+512),w
  8952  1198  3DB7               	addwfc	(??_ReadBaud^(0+512)+1),f
  8953  1199  083C               	movf	(??_ReadBaud+6)^(0+512),w
  8954  119A  3DB8               	addwfc	(??_ReadBaud^(0+512)+2),f
  8955  119B  083D               	movf	(??_ReadBaud+7)^(0+512),w
  8956  119C  3DB9               	addwfc	(??_ReadBaud^(0+512)+3),f
  8957  119D  0839               	movf	(??_ReadBaud+3)^(0+512),w
  8958  119E  00B5               	movwf	(?_ReadBaud+3)^(0+512)
  8959  119F  0838               	movf	(??_ReadBaud+2)^(0+512),w
  8960  11A0  00B4               	movwf	(?_ReadBaud+2)^(0+512)
  8961  11A1  0837               	movf	(??_ReadBaud+1)^(0+512),w
  8962  11A2  00B3               	movwf	(?_ReadBaud+1)^(0+512)
  8963  11A3  0836               	movf	??_ReadBaud^(0+512),w
  8964  11A4  00B2               	movwf	?_ReadBaud^(0+512)
  8965  11A5  0008               	return
  8966  11A6                     __end_of_ReadBaud:	
  8967                           
  8968                           	psect	text25
  8969  1DF6                     __ptext25:	
  8970 ;; *************** function _ReadFlash_4Byte *****************
  8971 ;; Defined at:
  8972 ;;		line 62 in file "FLASH.c"
  8973 ;; Parameters:    Size  Location     Type
  8974 ;;  row             2    5[BANK4 ] unsigned int 
  8975 ;;  column          1    7[BANK4 ] unsigned char 
  8976 ;; Auto vars:     Size  Location     Type
  8977 ;;  temp            4   14[BANK4 ] unsigned long 
  8978 ;; Return value:  Size  Location     Type
  8979 ;;                  4    5[BANK4 ] unsigned long 
  8980 ;; Registers used:
  8981 ;;		wreg, status,2, status,0, pclath, cstack
  8982 ;; Tracked objects:
  8983 ;;		On entry : 0/0
  8984 ;;		On exit  : 0/0
  8985 ;;		Unchanged: 0/0
  8986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8987 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8988 ;;      Locals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8989 ;;      Temps:          0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  8990 ;;      Totals:         0       0       0       0       0      13       0       0       0       0       0       0       
      +0       0
  8991 ;;Total ram usage:       13 bytes
  8992 ;; Hardware stack levels used:    1
  8993 ;; Hardware stack levels required when called:    8
  8994 ;; This function calls:
  8995 ;;		_ReadFlash_2Byte
  8996 ;; This function is called by:
  8997 ;;		_ReadBaud
  8998 ;; This function uses a non-reentrant model
  8999 ;;
  9000                           
  9001                           
  9002                           ;psect for function _ReadFlash_4Byte
  9003  1DF6                     _ReadFlash_4Byte:	
  9004                           
  9005                           ;FLASH.c: 64: unsigned long temp =0;
  9006                           
  9007                           ;incstack = 0
  9008                           ; Regs used in _ReadFlash_4Byte: [wreg+status,2+status,0+pclath+cstack]
  9009  1DF6  3000               	movlw	0
  9010  1DF7  0024               	movlb	4	; select bank4
  9011  1DF8  00B1               	movwf	(ReadFlash_4Byte@temp+3)^(0+512)
  9012  1DF9  3000               	movlw	0
  9013  1DFA  00B0               	movwf	(ReadFlash_4Byte@temp+2)^(0+512)
  9014  1DFB  3000               	movlw	0
  9015  1DFC  00AF               	movwf	(ReadFlash_4Byte@temp+1)^(0+512)
  9016  1DFD  3000               	movlw	0
  9017  1DFE  00AE               	movwf	ReadFlash_4Byte@temp^(0+512)
  9018                           
  9019                           ;FLASH.c: 65: temp = ((unsigned long)ReadFlash_2Byte(row, column) << 16);
  9020  1DFF  0826               	movf	(ReadFlash_4Byte@row+1)^(0+512),w
  9021  1E00  01A1               	clrf	(ReadFlash_2Byte@row+1)^(0+512)
  9022  1E01  07A1               	addwf	(ReadFlash_2Byte@row+1)^(0+512),f
  9023  1E02  0825               	movf	ReadFlash_4Byte@row^(0+512),w
  9024  1E03  01A0               	clrf	ReadFlash_2Byte@row^(0+512)
  9025  1E04  07A0               	addwf	ReadFlash_2Byte@row^(0+512),f
  9026  1E05  0827               	movf	ReadFlash_4Byte@column^(0+512),w
  9027  1E06  00A9               	movwf	??_ReadFlash_4Byte^(0+512)
  9028  1E07  0829               	movf	??_ReadFlash_4Byte^(0+512),w
  9029  1E08  00A2               	movwf	ReadFlash_2Byte@column^(0+512)
  9030  1E09  319B  2343  319D   	fcall	_ReadFlash_2Byte
  9031  1E0C  0024               	movlb	4	; select bank4
  9032  1E0D  0820               	movf	?_ReadFlash_2Byte^(0+512),w
  9033  1E0E  00AA               	movwf	(??_ReadFlash_4Byte+1)^(0+512)
  9034  1E0F  0821               	movf	(?_ReadFlash_2Byte+1)^(0+512),w
  9035  1E10  00AB               	movwf	((??_ReadFlash_4Byte+1)^(0+512)+1)
  9036  1E11  01AC               	clrf	((??_ReadFlash_4Byte+1)^(0+512)+2)
  9037  1E12  01AD               	clrf	((??_ReadFlash_4Byte+1)^(0+512)+3)
  9038  1E13  3010               	movlw	16
  9039  1E14                     u8265:	
  9040  1E14  35AA               	lslf	(??_ReadFlash_4Byte+1)^(0+512),f
  9041  1E15  0DAB               	rlf	((??_ReadFlash_4Byte+1)^(0+512)+1),f
  9042  1E16  0DAC               	rlf	((??_ReadFlash_4Byte+1)^(0+512)+2),f
  9043  1E17  0DAD               	rlf	((??_ReadFlash_4Byte+1)^(0+512)+3),f
  9044  1E18  0B89               	decfsz	9,f
  9045  1E19  2E14               	goto	u8265
  9046  1E1A  082D               	movf	(??_ReadFlash_4Byte+4)^(0+512),w
  9047  1E1B  00B1               	movwf	(ReadFlash_4Byte@temp+3)^(0+512)
  9048  1E1C  082C               	movf	(??_ReadFlash_4Byte+3)^(0+512),w
  9049  1E1D  00B0               	movwf	(ReadFlash_4Byte@temp+2)^(0+512)
  9050  1E1E  082B               	movf	(??_ReadFlash_4Byte+2)^(0+512),w
  9051  1E1F  00AF               	movwf	(ReadFlash_4Byte@temp+1)^(0+512)
  9052  1E20  082A               	movf	(??_ReadFlash_4Byte+1)^(0+512),w
  9053  1E21  00AE               	movwf	ReadFlash_4Byte@temp^(0+512)
  9054                           
  9055                           ;FLASH.c: 66: temp |= ((unsigned long)ReadFlash_2Byte(row, (column + 1)));
  9056  1E22  0826               	movf	(ReadFlash_4Byte@row+1)^(0+512),w
  9057  1E23  01A1               	clrf	(ReadFlash_2Byte@row+1)^(0+512)
  9058  1E24  07A1               	addwf	(ReadFlash_2Byte@row+1)^(0+512),f
  9059  1E25  0825               	movf	ReadFlash_4Byte@row^(0+512),w
  9060  1E26  01A0               	clrf	ReadFlash_2Byte@row^(0+512)
  9061  1E27  07A0               	addwf	ReadFlash_2Byte@row^(0+512),f
  9062  1E28  0827               	movf	ReadFlash_4Byte@column^(0+512),w
  9063  1E29  3E01               	addlw	1
  9064  1E2A  00A9               	movwf	??_ReadFlash_4Byte^(0+512)
  9065  1E2B  0829               	movf	??_ReadFlash_4Byte^(0+512),w
  9066  1E2C  00A2               	movwf	ReadFlash_2Byte@column^(0+512)
  9067  1E2D  319B  2343         	fcall	_ReadFlash_2Byte
  9068  1E2F  0024               	movlb	4	; select bank4
  9069  1E30  0820               	movf	?_ReadFlash_2Byte^(0+512),w
  9070  1E31  00AA               	movwf	(??_ReadFlash_4Byte+1)^(0+512)
  9071  1E32  0821               	movf	(?_ReadFlash_2Byte+1)^(0+512),w
  9072  1E33  00AB               	movwf	((??_ReadFlash_4Byte+1)^(0+512)+1)
  9073  1E34  01AC               	clrf	((??_ReadFlash_4Byte+1)^(0+512)+2)
  9074  1E35  01AD               	clrf	((??_ReadFlash_4Byte+1)^(0+512)+3)
  9075  1E36  082A               	movf	(??_ReadFlash_4Byte+1)^(0+512),w
  9076  1E37  04AE               	iorwf	ReadFlash_4Byte@temp^(0+512),f
  9077  1E38  082B               	movf	(??_ReadFlash_4Byte+2)^(0+512),w
  9078  1E39  04AF               	iorwf	(ReadFlash_4Byte@temp+1)^(0+512),f
  9079  1E3A  082C               	movf	(??_ReadFlash_4Byte+3)^(0+512),w
  9080  1E3B  04B0               	iorwf	(ReadFlash_4Byte@temp+2)^(0+512),f
  9081  1E3C  082D               	movf	(??_ReadFlash_4Byte+4)^(0+512),w
  9082  1E3D  04B1               	iorwf	(ReadFlash_4Byte@temp+3)^(0+512),f
  9083                           
  9084                           ;FLASH.c: 67: return temp;
  9085  1E3E  0831               	movf	(ReadFlash_4Byte@temp+3)^(0+512),w
  9086  1E3F  00A8               	movwf	(?_ReadFlash_4Byte+3)^(0+512)
  9087  1E40  0830               	movf	(ReadFlash_4Byte@temp+2)^(0+512),w
  9088  1E41  00A7               	movwf	(?_ReadFlash_4Byte+2)^(0+512)
  9089  1E42  082F               	movf	(ReadFlash_4Byte@temp+1)^(0+512),w
  9090  1E43  00A6               	movwf	(?_ReadFlash_4Byte+1)^(0+512)
  9091  1E44  082E               	movf	ReadFlash_4Byte@temp^(0+512),w
  9092  1E45  00A5               	movwf	?_ReadFlash_4Byte^(0+512)
  9093  1E46  0008               	return
  9094  1E47                     __end_of_ReadFlash_4Byte:	
  9095                           
  9096                           	psect	text26
  9097  1B43                     __ptext26:	
  9098 ;; *************** function _ReadFlash_2Byte *****************
  9099 ;; Defined at:
  9100 ;;		line 43 in file "FLASH.c"
  9101 ;; Parameters:    Size  Location     Type
  9102 ;;  row             2    0[BANK4 ] unsigned int 
  9103 ;;  column          1    2[BANK4 ] unsigned char 
  9104 ;; Auto vars:     Size  Location     Type
  9105 ;;		None
  9106 ;; Return value:  Size  Location     Type
  9107 ;;                  2    0[BANK4 ] unsigned int 
  9108 ;; Registers used:
  9109 ;;		wreg, status,2, status,0
  9110 ;; Tracked objects:
  9111 ;;		On entry : 0/0
  9112 ;;		On exit  : 0/0
  9113 ;;		Unchanged: 0/0
  9114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9115 ;;      Params:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  9116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9117 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  9118 ;;      Totals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  9119 ;;Total ram usage:        5 bytes
  9120 ;; Hardware stack levels used:    1
  9121 ;; Hardware stack levels required when called:    7
  9122 ;; This function calls:
  9123 ;;		Nothing
  9124 ;; This function is called by:
  9125 ;;		_ReadFlash_4Byte
  9126 ;; This function uses a non-reentrant model
  9127 ;;
  9128                           
  9129                           
  9130                           ;psect for function _ReadFlash_2Byte
  9131  1B43                     _ReadFlash_2Byte:	
  9132                           
  9133                           ;FLASH.c: 45: PMCON1 &= ~0b01000000;
  9134                           
  9135                           ;incstack = 0
  9136                           ; Regs used in _ReadFlash_2Byte: [wreg+status,2+status,0]
  9137  1B43  30BF               	movlw	191
  9138  1B44  0024               	movlb	4	; select bank4
  9139  1B45  00A3               	movwf	??_ReadFlash_2Byte^(0+512)
  9140  1B46  0823               	movf	??_ReadFlash_2Byte^(0+512),w
  9141  1B47  0023               	movlb	3	; select bank3
  9142  1B48  0595               	andwf	21,f	;volatile
  9143                           
  9144                           ;FLASH.c: 46: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
  9145  1B49  0024               	movlb	4	; select bank4
  9146  1B4A  0821               	movf	(ReadFlash_2Byte@row+1)^(0+512),w
  9147  1B4B  00A4               	movwf	(??_ReadFlash_2Byte^(0+512)+1)
  9148  1B4C  0820               	movf	ReadFlash_2Byte@row^(0+512),w
  9149  1B4D  00A3               	movwf	??_ReadFlash_2Byte^(0+512)
  9150  1B4E  36A4               	lsrf	(??_ReadFlash_2Byte^(0+512)+1),f
  9151  1B4F  0CA3               	rrf	??_ReadFlash_2Byte^(0+512),f
  9152  1B50  36A4               	lsrf	(??_ReadFlash_2Byte^(0+512)+1),f
  9153  1B51  0CA3               	rrf	??_ReadFlash_2Byte^(0+512),f
  9154  1B52  36A4               	lsrf	(??_ReadFlash_2Byte^(0+512)+1),f
  9155  1B53  0CA3               	rrf	??_ReadFlash_2Byte^(0+512),f
  9156  1B54  0823               	movf	??_ReadFlash_2Byte^(0+512),w
  9157  1B55  397F               	andlw	127
  9158  1B56  0023               	movlb	3	; select bank3
  9159  1B57  0092               	movwf	18	;volatile
  9160                           
  9161                           ;FLASH.c: 47: PMADRL = (unsigned char)(((row & 0x007) << 5) + column);
  9162  1B58  0024               	movlb	4	; select bank4
  9163  1B59  0820               	movf	ReadFlash_2Byte@row^(0+512),w
  9164  1B5A  3907               	andlw	7
  9165  1B5B  00A3               	movwf	??_ReadFlash_2Byte^(0+512)
  9166  1B5C  3004               	movlw	4
  9167  1B5D                     u7875:	
  9168  1B5D  35A3               	lslf	??_ReadFlash_2Byte^(0+512),f
  9169  1B5E  3EFF               	addlw	-1
  9170  1B5F  1D03               	skipz
  9171  1B60  2B5D               	goto	u7875
  9172  1B61  3523               	lslf	??_ReadFlash_2Byte^(0+512),w
  9173  1B62  0722               	addwf	ReadFlash_2Byte@column^(0+512),w
  9174  1B63  0023               	movlb	3	; select bank3
  9175  1B64  0091               	movwf	17	;volatile
  9176                           
  9177                           ;FLASH.c: 48: PMCON1 |= 0b00000001;
  9178  1B65  1415               	bsf	21,0	;volatile
  9179  1B66                     l943:	
  9180                           ;FLASH.c: 49: while(PMCON1 & 0b00000001);
  9181                           
  9182  1B66  1815               	btfsc	21,0	;volatile
  9183  1B67  2B66               	goto	l943
  9184                           
  9185                           ;FLASH.c: 50: __nop();
  9186  1B68  0000               	nop
  9187                           
  9188                           ;FLASH.c: 51: __nop();
  9189  1B69  0000               	nop
  9190                           
  9191                           ;FLASH.c: 52: return (PMDATL | (PMDATH << 8));
  9192  1B6A  0023               	movlb	3	; select bank3
  9193  1B6B  0814               	movf	20,w	;volatile
  9194  1B6C  0024               	movlb	4	; select bank4
  9195  1B6D  01A1               	clrf	(?_ReadFlash_2Byte+1)^(0+512)
  9196  1B6E  07A1               	addwf	(?_ReadFlash_2Byte+1)^(0+512),f
  9197  1B6F  0023               	movlb	3	; select bank3
  9198  1B70  0813               	movf	19,w	;volatile
  9199  1B71  0024               	movlb	4	; select bank4
  9200  1B72  01A0               	clrf	?_ReadFlash_2Byte^(0+512)
  9201  1B73  07A0               	addwf	?_ReadFlash_2Byte^(0+512),f
  9202  1B74  0008               	return
  9203  1B75                     __end_of_ReadFlash_2Byte:	
  9204                           
  9205                           	psect	text27
  9206  143D                     __ptext27:	
  9207 ;; *************** function _InitUART *****************
  9208 ;; Defined at:
  9209 ;;		line 75 in file "UART.c"
  9210 ;; Parameters:    Size  Location     Type
  9211 ;;  Baud            4   14[BANK4 ] unsigned long 
  9212 ;;  parity          1   18[BANK4 ] unsigned char 
  9213 ;; Auto vars:     Size  Location     Type
  9214 ;;  temp            4   31[BANK4 ] unsigned long 
  9215 ;;  spbrg           2   27[BANK4 ] unsigned int 
  9216 ;;  config          1   30[BANK4 ] unsigned char 
  9217 ;;  baudconfig      1   29[BANK4 ] unsigned char 
  9218 ;; Return value:  Size  Location     Type
  9219 ;;		None               void
  9220 ;; Registers used:
  9221 ;;		wreg, status,2, status,0, pclath, cstack
  9222 ;; Tracked objects:
  9223 ;;		On entry : 0/0
  9224 ;;		On exit  : 0/0
  9225 ;;		Unchanged: 0/0
  9226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9227 ;;      Params:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  9228 ;;      Locals:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  9229 ;;      Temps:          0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  9230 ;;      Totals:         0       0       0       0       0      21       0       0       0       0       0       0       
      +0       0
  9231 ;;Total ram usage:       21 bytes
  9232 ;; Hardware stack levels used:    1
  9233 ;; Hardware stack levels required when called:    8
  9234 ;; This function calls:
  9235 ;;		_CloseUSART
  9236 ;;		_OpenUSART
  9237 ;;		_ReadUSART
  9238 ;;		___lldiv
  9239 ;;		_baudUSART
  9240 ;; This function is called by:
  9241 ;;		_Init_System
  9242 ;; This function uses a non-reentrant model
  9243 ;;
  9244                           
  9245                           
  9246                           ;psect for function _InitUART
  9247  143D                     _InitUART:	
  9248                           
  9249                           ;UART.c: 77: unsigned long temp;
  9250                           ;UART.c: 78: unsigned char config;
  9251                           ;UART.c: 79: unsigned int spbrg;
  9252                           ;UART.c: 80: unsigned char baudconfig;
  9253                           ;UART.c: 90: LATC |= 0b00000100;
  9254                           
  9255                           ;incstack = 0
  9256                           ; Regs used in _InitUART: [wreg+status,2+status,0+pclath+cstack]
  9257  143D  0022               	movlb	2	; select bank2
  9258  143E  150E               	bsf	14,2	;volatile
  9259                           
  9260                           ;UART.c: 91: PPSLOCK =0;
  9261  143F  003C               	movlb	28	; select bank28
  9262  1440  018F               	clrf	15	;volatile
  9263                           
  9264                           ;UART.c: 92: RC2PPS = 0b00000000;
  9265  1441  003D               	movlb	29	; select bank29
  9266  1442  01A2               	clrf	34	;volatile
  9267                           
  9268                           ;UART.c: 93: PPSLOCK =1;
  9269  1443  3001               	movlw	1
  9270  1444  003C               	movlb	28	; select bank28
  9271  1445  008F               	movwf	15	;volatile
  9272                           
  9273                           ;UART.c: 95: CloseUSART();
  9274  1446  3198  20CC  3194   	fcall	_CloseUSART
  9275                           
  9276                           ;UART.c: 96: config =0;
  9277  1449  0024               	movlb	4	; select bank4
  9278  144A  01BE               	clrf	InitUART@config^(0+512)
  9279                           
  9280                           ;UART.c: 97: baudconfig =0;
  9281  144B  01BD               	clrf	InitUART@baudconfig^(0+512)
  9282                           
  9283                           ;UART.c: 102: config |= 0b00001000;
  9284  144C  15BE               	bsf	InitUART@config^(0+512),3
  9285                           
  9286                           ;UART.c: 103: config |= 0b00010000;
  9287  144D  163E               	bsf	InitUART@config^(0+512),4
  9288                           
  9289                           ;UART.c: 104: PARITY = parity;
  9290  144E  0832               	movf	InitUART@parity^(0+512),w
  9291  144F  00B3               	movwf	??_InitUART^(0+512)
  9292  1450  0833               	movf	??_InitUART^(0+512),w
  9293  1451  00E0               	movwf	_PARITY^(0+512)
  9294                           
  9295                           ;UART.c: 105: BAUD = Baud;
  9296  1452  0831               	movf	(InitUART@Baud+3)^(0+512),w
  9297  1453  00E4               	movwf	(_BAUD+3)^(0+512)
  9298  1454  0830               	movf	(InitUART@Baud+2)^(0+512),w
  9299  1455  00E3               	movwf	(_BAUD+2)^(0+512)
  9300  1456  082F               	movf	(InitUART@Baud+1)^(0+512),w
  9301  1457  00E2               	movwf	(_BAUD+1)^(0+512)
  9302  1458  082E               	movf	InitUART@Baud^(0+512),w
  9303  1459  00E1               	movwf	_BAUD^(0+512)
  9304                           
  9305                           ;UART.c: 106: if(parity)
  9306  145A  0832               	movf	InitUART@parity^(0+512),w
  9307  145B  1903               	btfsc	3,2
  9308  145C  2C5F               	goto	l6562
  9309                           
  9310                           ;UART.c: 107: {
  9311                           ;UART.c: 108: config |= 0b00000010;
  9312  145D  14BE               	bsf	InitUART@config^(0+512),1
  9313                           
  9314                           ;UART.c: 109: }
  9315  145E  2C63               	goto	l6564
  9316  145F                     l6562:	
  9317                           
  9318                           ;UART.c: 110: else
  9319                           ;UART.c: 111: {
  9320                           ;UART.c: 112: config &= ~0b00000010;
  9321  145F  30FD               	movlw	253
  9322  1460  00B3               	movwf	??_InitUART^(0+512)
  9323  1461  0833               	movf	??_InitUART^(0+512),w
  9324  1462  05BE               	andwf	InitUART@config^(0+512),f
  9325  1463                     l6564:	
  9326                           
  9327                           ;UART.c: 113: }
  9328                           ;UART.c: 114: baudconfig |= 0b00001000;
  9329  1463  15BD               	bsf	InitUART@baudconfig^(0+512),3
  9330                           
  9331                           ;UART.c: 117: temp = (32000000L / Baud) - 1;
  9332  1464  0831               	movf	(InitUART@Baud+3)^(0+512),w
  9333  1465  00A3               	movwf	(___lldiv@divisor+3)^(0+512)
  9334  1466  0830               	movf	(InitUART@Baud+2)^(0+512),w
  9335  1467  00A2               	movwf	(___lldiv@divisor+2)^(0+512)
  9336  1468  082F               	movf	(InitUART@Baud+1)^(0+512),w
  9337  1469  00A1               	movwf	(___lldiv@divisor+1)^(0+512)
  9338  146A  082E               	movf	InitUART@Baud^(0+512),w
  9339  146B  00A0               	movwf	___lldiv@divisor^(0+512)
  9340  146C  3001               	movlw	1
  9341  146D  00A7               	movwf	(___lldiv@dividend+3)^(0+512)
  9342  146E  30E8               	movlw	232
  9343  146F  00A6               	movwf	(___lldiv@dividend+2)^(0+512)
  9344  1470  3048               	movlw	72
  9345  1471  00A5               	movwf	(___lldiv@dividend+1)^(0+512)
  9346  1472  3000               	movlw	0
  9347  1473  00A4               	movwf	___lldiv@dividend^(0+512)
  9348  1474  319E  2699  3194   	fcall	___lldiv
  9349  1477  30FF               	movlw	255
  9350  1478  0024               	movlb	4	; select bank4
  9351  1479  0720               	addwf	?___lldiv^(0+512),w
  9352  147A  00BF               	movwf	InitUART@temp^(0+512)
  9353  147B  30FF               	movlw	255
  9354  147C  3D21               	addwfc	(?___lldiv+1)^(0+512),w
  9355  147D  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9356  147E  30FF               	movlw	255
  9357  147F  3D22               	addwfc	(?___lldiv+2)^(0+512),w
  9358  1480  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9359  1481  30FF               	movlw	255
  9360  1482  3D23               	addwfc	(?___lldiv+3)^(0+512),w
  9361  1483  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9362                           
  9363                           ;UART.c: 118: temp = (temp >> 2) - 1;
  9364  1484  30FF               	movlw	255
  9365  1485  00B3               	movwf	??_InitUART^(0+512)
  9366  1486  30FF               	movlw	255
  9367  1487  00B4               	movwf	(??_InitUART^(0+512)+1)
  9368  1488  30FF               	movlw	255
  9369  1489  00B5               	movwf	(??_InitUART^(0+512)+2)
  9370  148A  30FF               	movlw	255
  9371  148B  00B6               	movwf	(??_InitUART^(0+512)+3)
  9372  148C  083F               	movf	InitUART@temp^(0+512),w
  9373  148D  00B7               	movwf	(??_InitUART+4)^(0+512)
  9374  148E  0840               	movf	(InitUART@temp+1)^(0+512),w
  9375  148F  00B8               	movwf	((??_InitUART+4)^(0+512)+1)
  9376  1490  0841               	movf	(InitUART@temp+2)^(0+512),w
  9377  1491  00B9               	movwf	((??_InitUART+4)^(0+512)+2)
  9378  1492  0842               	movf	(InitUART@temp+3)^(0+512),w
  9379  1493  00BA               	movwf	((??_InitUART+4)^(0+512)+3)
  9380  1494  3002               	movlw	2
  9381  1495                     u8515:	
  9382  1495  36BA               	lsrf	((??_InitUART+4)^(0+512)+3),f
  9383  1496  0CB9               	rrf	((??_InitUART+4)^(0+512)+2),f
  9384  1497  0CB8               	rrf	((??_InitUART+4)^(0+512)+1),f
  9385  1498  0CB7               	rrf	(??_InitUART+4)^(0+512),f
  9386  1499  0B89               	decfsz	9,f
  9387  149A  2C95               	goto	u8515
  9388  149B  0837               	movf	(??_InitUART+4)^(0+512),w
  9389  149C  07B3               	addwf	??_InitUART^(0+512),f
  9390  149D  0838               	movf	(??_InitUART+5)^(0+512),w
  9391  149E  3DB4               	addwfc	(??_InitUART^(0+512)+1),f
  9392  149F  0839               	movf	(??_InitUART+6)^(0+512),w
  9393  14A0  3DB5               	addwfc	(??_InitUART^(0+512)+2),f
  9394  14A1  083A               	movf	(??_InitUART+7)^(0+512),w
  9395  14A2  3DB6               	addwfc	(??_InitUART^(0+512)+3),f
  9396  14A3  0836               	movf	(??_InitUART+3)^(0+512),w
  9397  14A4  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9398  14A5  0835               	movf	(??_InitUART+2)^(0+512),w
  9399  14A6  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9400  14A7  0834               	movf	(??_InitUART+1)^(0+512),w
  9401  14A8  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9402  14A9  0833               	movf	??_InitUART^(0+512),w
  9403  14AA  00BF               	movwf	InitUART@temp^(0+512)
  9404                           
  9405                           ;UART.c: 119: spbrg = (unsigned int)temp;
  9406  14AB  0840               	movf	(InitUART@temp+1)^(0+512),w
  9407  14AC  01BC               	clrf	(InitUART@spbrg+1)^(0+512)
  9408  14AD  07BC               	addwf	(InitUART@spbrg+1)^(0+512),f
  9409  14AE  083F               	movf	InitUART@temp^(0+512),w
  9410  14AF  01BB               	clrf	InitUART@spbrg^(0+512)
  9411  14B0  07BB               	addwf	InitUART@spbrg^(0+512),f
  9412                           
  9413                           ;UART.c: 121: RCSTAbits.CREN = 0;
  9414  14B1  0023               	movlb	3	; select bank3
  9415  14B2  121D               	bcf	29,4	;volatile
  9416                           
  9417                           ;UART.c: 122: OpenUSART(config, spbrg);
  9418  14B3  0024               	movlb	4	; select bank4
  9419  14B4  083C               	movf	(InitUART@spbrg+1)^(0+512),w
  9420  14B5  01A1               	clrf	(OpenUSART@spbrg+1)^(0+512)
  9421  14B6  07A1               	addwf	(OpenUSART@spbrg+1)^(0+512),f
  9422  14B7  083B               	movf	InitUART@spbrg^(0+512),w
  9423  14B8  01A0               	clrf	OpenUSART@spbrg^(0+512)
  9424  14B9  07A0               	addwf	OpenUSART@spbrg^(0+512),f
  9425  14BA  083E               	movf	InitUART@config^(0+512),w
  9426  14BB  319C  248D  3194   	fcall	_OpenUSART
  9427                           
  9428                           ;UART.c: 123: baudUSART(baudconfig);
  9429  14BE  0024               	movlb	4	; select bank4
  9430  14BF  083D               	movf	InitUART@baudconfig^(0+512),w
  9431  14C0  3186  26F7  3194   	fcall	_baudUSART
  9432                           
  9433                           ;UART.c: 124: temp = ReadUSART();
  9434  14C3  3198  2071  3194   	fcall	_ReadUSART
  9435  14C6  0024               	movlb	4	; select bank4
  9436  14C7  00B3               	movwf	??_InitUART^(0+512)
  9437  14C8  01B4               	clrf	(??_InitUART^(0+512)+1)
  9438  14C9  01B5               	clrf	(??_InitUART^(0+512)+2)
  9439  14CA  01B6               	clrf	(??_InitUART^(0+512)+3)
  9440  14CB  0836               	movf	(??_InitUART+3)^(0+512),w
  9441  14CC  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9442  14CD  0835               	movf	(??_InitUART+2)^(0+512),w
  9443  14CE  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9444  14CF  0834               	movf	(??_InitUART+1)^(0+512),w
  9445  14D0  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9446  14D1  0833               	movf	??_InitUART^(0+512),w
  9447  14D2  00BF               	movwf	InitUART@temp^(0+512)
  9448                           
  9449                           ;UART.c: 125: temp = ReadUSART();
  9450  14D3  3198  2071  3194   	fcall	_ReadUSART
  9451  14D6  0024               	movlb	4	; select bank4
  9452  14D7  00B3               	movwf	??_InitUART^(0+512)
  9453  14D8  01B4               	clrf	(??_InitUART^(0+512)+1)
  9454  14D9  01B5               	clrf	(??_InitUART^(0+512)+2)
  9455  14DA  01B6               	clrf	(??_InitUART^(0+512)+3)
  9456  14DB  0836               	movf	(??_InitUART+3)^(0+512),w
  9457  14DC  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9458  14DD  0835               	movf	(??_InitUART+2)^(0+512),w
  9459  14DE  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9460  14DF  0834               	movf	(??_InitUART+1)^(0+512),w
  9461  14E0  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9462  14E1  0833               	movf	??_InitUART^(0+512),w
  9463  14E2  00BF               	movwf	InitUART@temp^(0+512)
  9464                           
  9465                           ;UART.c: 126: temp = ReadUSART();
  9466  14E3  3198  2071  3194   	fcall	_ReadUSART
  9467  14E6  0024               	movlb	4	; select bank4
  9468  14E7  00B3               	movwf	??_InitUART^(0+512)
  9469  14E8  01B4               	clrf	(??_InitUART^(0+512)+1)
  9470  14E9  01B5               	clrf	(??_InitUART^(0+512)+2)
  9471  14EA  01B6               	clrf	(??_InitUART^(0+512)+3)
  9472  14EB  0836               	movf	(??_InitUART+3)^(0+512),w
  9473  14EC  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9474  14ED  0835               	movf	(??_InitUART+2)^(0+512),w
  9475  14EE  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9476  14EF  0834               	movf	(??_InitUART+1)^(0+512),w
  9477  14F0  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9478  14F1  0833               	movf	??_InitUART^(0+512),w
  9479  14F2  00BF               	movwf	InitUART@temp^(0+512)
  9480                           
  9481                           ;UART.c: 127: temp = ReadUSART();
  9482  14F3  3198  2071  3194   	fcall	_ReadUSART
  9483  14F6  0024               	movlb	4	; select bank4
  9484  14F7  00B3               	movwf	??_InitUART^(0+512)
  9485  14F8  01B4               	clrf	(??_InitUART^(0+512)+1)
  9486  14F9  01B5               	clrf	(??_InitUART^(0+512)+2)
  9487  14FA  01B6               	clrf	(??_InitUART^(0+512)+3)
  9488  14FB  0836               	movf	(??_InitUART+3)^(0+512),w
  9489  14FC  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9490  14FD  0835               	movf	(??_InitUART+2)^(0+512),w
  9491  14FE  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9492  14FF  0834               	movf	(??_InitUART+1)^(0+512),w
  9493  1500  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9494  1501  0833               	movf	??_InitUART^(0+512),w
  9495  1502  00BF               	movwf	InitUART@temp^(0+512)
  9496                           
  9497                           ;UART.c: 128: temp = ReadUSART();
  9498  1503  3198  2071         	fcall	_ReadUSART
  9499  1505  0024               	movlb	4	; select bank4
  9500  1506  00B3               	movwf	??_InitUART^(0+512)
  9501  1507  01B4               	clrf	(??_InitUART^(0+512)+1)
  9502  1508  01B5               	clrf	(??_InitUART^(0+512)+2)
  9503  1509  01B6               	clrf	(??_InitUART^(0+512)+3)
  9504  150A  0836               	movf	(??_InitUART+3)^(0+512),w
  9505  150B  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9506  150C  0835               	movf	(??_InitUART+2)^(0+512),w
  9507  150D  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9508  150E  0834               	movf	(??_InitUART+1)^(0+512),w
  9509  150F  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9510  1510  0833               	movf	??_InitUART^(0+512),w
  9511  1511  00BF               	movwf	InitUART@temp^(0+512)
  9512                           
  9513                           ;UART.c: 130: PPSLOCK =0;
  9514  1512  003C               	movlb	28	; select bank28
  9515  1513  018F               	clrf	15	;volatile
  9516                           
  9517                           ;UART.c: 131: RC2PPS = 0b00010100;
  9518  1514  3014               	movlw	20
  9519  1515  003D               	movlb	29	; select bank29
  9520  1516  00A2               	movwf	34	;volatile
  9521                           
  9522                           ;UART.c: 132: CKPPS = 0b00010010;
  9523  1517  3012               	movlw	18
  9524  1518  003C               	movlb	28	; select bank28
  9525  1519  00A5               	movwf	37	;volatile
  9526                           
  9527                           ;UART.c: 134: RXPPS = 0b00010101;
  9528  151A  3015               	movlw	21
  9529  151B  00A4               	movwf	36	;volatile
  9530                           
  9531                           ;UART.c: 136: PPSLOCK =1;
  9532  151C  3001               	movlw	1
  9533  151D  008F               	movwf	15	;volatile
  9534                           
  9535                           ;UART.c: 138: PIR1bits.RCIF = 0;
  9536  151E  0020               	movlb	0	; select bank0
  9537  151F  1291               	bcf	17,5	;volatile
  9538                           
  9539                           ;UART.c: 139: INTCONbits.PEIE = 1;
  9540  1520  170B               	bsf	11,6	;volatile
  9541  1521  0008               	return
  9542  1522                     __end_of_InitUART:	
  9543                           
  9544                           	psect	text28
  9545  06F7                     __ptext28:	
  9546 ;; *************** function _baudUSART *****************
  9547 ;; Defined at:
  9548 ;;		line 147 in file "UART.c"
  9549 ;; Parameters:    Size  Location     Type
  9550 ;;  baudconfig      1    wreg     unsigned char 
  9551 ;; Auto vars:     Size  Location     Type
  9552 ;;  baudconfig      1    0[BANK4 ] unsigned char 
  9553 ;; Return value:  Size  Location     Type
  9554 ;;		None               void
  9555 ;; Registers used:
  9556 ;;		wreg, status,2
  9557 ;; Tracked objects:
  9558 ;;		On entry : 0/0
  9559 ;;		On exit  : 0/0
  9560 ;;		Unchanged: 0/0
  9561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9563 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9565 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9566 ;;Total ram usage:        1 bytes
  9567 ;; Hardware stack levels used:    1
  9568 ;; Hardware stack levels required when called:    7
  9569 ;; This function calls:
  9570 ;;		Nothing
  9571 ;; This function is called by:
  9572 ;;		_InitUART
  9573 ;; This function uses a non-reentrant model
  9574 ;;
  9575                           
  9576                           
  9577                           ;psect for function _baudUSART
  9578  06F7                     _baudUSART:	
  9579                           
  9580                           ;incstack = 0
  9581                           ; Regs used in _baudUSART: [wreg+status,2]
  9582                           ;baudUSART@baudconfig stored from wreg
  9583  06F7  0024               	movlb	4	; select bank4
  9584  06F8  00A0               	movwf	baudUSART@baudconfig^(0+512)
  9585                           
  9586                           ;UART.c: 149: BAUD1CON =0;
  9587  06F9  0023               	movlb	3	; select bank3
  9588  06FA  019F               	clrf	31	;volatile
  9589                           
  9590                           ;UART.c: 150: BAUD1CON = baudconfig;
  9591  06FB  0024               	movlb	4	; select bank4
  9592  06FC  0820               	movf	baudUSART@baudconfig^(0+512),w
  9593  06FD  0023               	movlb	3	; select bank3
  9594  06FE  009F               	movwf	31	;volatile
  9595  06FF  0008               	return
  9596  0700                     __end_of_baudUSART:	
  9597                           
  9598                           	psect	text29
  9599  1E99                     __ptext29:	
  9600 ;; *************** function ___lldiv *****************
  9601 ;; Defined at:
  9602 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
  9603 ;; Parameters:    Size  Location     Type
  9604 ;;  divisor         4    0[BANK4 ] unsigned long 
  9605 ;;  dividend        4    4[BANK4 ] unsigned long 
  9606 ;; Auto vars:     Size  Location     Type
  9607 ;;  quotient        4    9[BANK4 ] unsigned long 
  9608 ;;  counter         1   13[BANK4 ] unsigned char 
  9609 ;; Return value:  Size  Location     Type
  9610 ;;                  4    0[BANK4 ] unsigned long 
  9611 ;; Registers used:
  9612 ;;		wreg, status,2, status,0
  9613 ;; Tracked objects:
  9614 ;;		On entry : 0/0
  9615 ;;		On exit  : 0/0
  9616 ;;		Unchanged: 0/0
  9617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9618 ;;      Params:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  9619 ;;      Locals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  9620 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9621 ;;      Totals:         0       0       0       0       0      14       0       0       0       0       0       0       
      +0       0
  9622 ;;Total ram usage:       14 bytes
  9623 ;; Hardware stack levels used:    1
  9624 ;; Hardware stack levels required when called:    7
  9625 ;; This function calls:
  9626 ;;		Nothing
  9627 ;; This function is called by:
  9628 ;;		_InitUART
  9629 ;; This function uses a non-reentrant model
  9630 ;;
  9631                           
  9632                           
  9633                           ;psect for function ___lldiv
  9634  1E99                     ___lldiv:	
  9635                           
  9636                           ;incstack = 0
  9637                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  9638  1E99  3000               	movlw	0
  9639  1E9A  0024               	movlb	4	; select bank4
  9640  1E9B  00AC               	movwf	(___lldiv@quotient+3)^(0+512)
  9641  1E9C  3000               	movlw	0
  9642  1E9D  00AB               	movwf	(___lldiv@quotient+2)^(0+512)
  9643  1E9E  3000               	movlw	0
  9644  1E9F  00AA               	movwf	(___lldiv@quotient+1)^(0+512)
  9645  1EA0  3000               	movlw	0
  9646  1EA1  00A9               	movwf	___lldiv@quotient^(0+512)
  9647  1EA2  0823               	movf	(___lldiv@divisor+3)^(0+512),w
  9648  1EA3  0422               	iorwf	(___lldiv@divisor+2)^(0+512),w
  9649  1EA4  0421               	iorwf	(___lldiv@divisor+1)^(0+512),w
  9650  1EA5  0420               	iorwf	___lldiv@divisor^(0+512),w
  9651  1EA6  1903               	skipnz
  9652  1EA7  2EE3               	goto	l6516
  9653  1EA8  01AD               	clrf	___lldiv@counter^(0+512)
  9654  1EA9  0AAD               	incf	___lldiv@counter^(0+512),f
  9655  1EAA                     l6502:	
  9656  1EAA  1BA3               	btfsc	(___lldiv@divisor+3)^(0+512),7
  9657  1EAB  2EB8               	goto	l6504
  9658  1EAC  3001               	movlw	1
  9659  1EAD                     u8395:	
  9660  1EAD  35A0               	lslf	___lldiv@divisor^(0+512),f
  9661  1EAE  0DA1               	rlf	(___lldiv@divisor+1)^(0+512),f
  9662  1EAF  0DA2               	rlf	(___lldiv@divisor+2)^(0+512),f
  9663  1EB0  0DA3               	rlf	(___lldiv@divisor+3)^(0+512),f
  9664  1EB1  0B89               	decfsz	9,f
  9665  1EB2  2EAD               	goto	u8395
  9666  1EB3  3001               	movlw	1
  9667  1EB4  00A8               	movwf	??___lldiv^(0+512)
  9668  1EB5  0828               	movf	??___lldiv^(0+512),w
  9669  1EB6  07AD               	addwf	___lldiv@counter^(0+512),f
  9670  1EB7  2EAA               	goto	l6502
  9671  1EB8                     l6504:	
  9672  1EB8  3001               	movlw	1
  9673  1EB9                     u8415:	
  9674  1EB9  35A9               	lslf	___lldiv@quotient^(0+512),f
  9675  1EBA  0DAA               	rlf	(___lldiv@quotient+1)^(0+512),f
  9676  1EBB  0DAB               	rlf	(___lldiv@quotient+2)^(0+512),f
  9677  1EBC  0DAC               	rlf	(___lldiv@quotient+3)^(0+512),f
  9678  1EBD  0B89               	decfsz	9,f
  9679  1EBE  2EB9               	goto	u8415
  9680  1EBF  0823               	movf	(___lldiv@divisor+3)^(0+512),w
  9681  1EC0  0227               	subwf	(___lldiv@dividend+3)^(0+512),w
  9682  1EC1  1D03               	skipz
  9683  1EC2  2ECD               	goto	u8425
  9684  1EC3  0822               	movf	(___lldiv@divisor+2)^(0+512),w
  9685  1EC4  0226               	subwf	(___lldiv@dividend+2)^(0+512),w
  9686  1EC5  1D03               	skipz
  9687  1EC6  2ECD               	goto	u8425
  9688  1EC7  0821               	movf	(___lldiv@divisor+1)^(0+512),w
  9689  1EC8  0225               	subwf	(___lldiv@dividend+1)^(0+512),w
  9690  1EC9  1D03               	skipz
  9691  1ECA  2ECD               	goto	u8425
  9692  1ECB  0820               	movf	___lldiv@divisor^(0+512),w
  9693  1ECC  0224               	subwf	___lldiv@dividend^(0+512),w
  9694  1ECD                     u8425:	
  9695  1ECD  1C03               	skipc
  9696  1ECE  2ED8               	goto	l6512
  9697  1ECF  0820               	movf	___lldiv@divisor^(0+512),w
  9698  1ED0  02A4               	subwf	___lldiv@dividend^(0+512),f
  9699  1ED1  0821               	movf	(___lldiv@divisor+1)^(0+512),w
  9700  1ED2  3BA5               	subwfb	(___lldiv@dividend+1)^(0+512),f
  9701  1ED3  0822               	movf	(___lldiv@divisor+2)^(0+512),w
  9702  1ED4  3BA6               	subwfb	(___lldiv@dividend+2)^(0+512),f
  9703  1ED5  0823               	movf	(___lldiv@divisor+3)^(0+512),w
  9704  1ED6  3BA7               	subwfb	(___lldiv@dividend+3)^(0+512),f
  9705  1ED7  1429               	bsf	___lldiv@quotient^(0+512),0
  9706  1ED8                     l6512:	
  9707  1ED8  3001               	movlw	1
  9708  1ED9                     u8435:	
  9709  1ED9  36A3               	lsrf	(___lldiv@divisor+3)^(0+512),f
  9710  1EDA  0CA2               	rrf	(___lldiv@divisor+2)^(0+512),f
  9711  1EDB  0CA1               	rrf	(___lldiv@divisor+1)^(0+512),f
  9712  1EDC  0CA0               	rrf	___lldiv@divisor^(0+512),f
  9713  1EDD  0B89               	decfsz	9,f
  9714  1EDE  2ED9               	goto	u8435
  9715  1EDF  3001               	movlw	1
  9716  1EE0  02AD               	subwf	___lldiv@counter^(0+512),f
  9717  1EE1  1D03               	btfss	3,2
  9718  1EE2  2EB8               	goto	l6504
  9719  1EE3                     l6516:	
  9720  1EE3  082C               	movf	(___lldiv@quotient+3)^(0+512),w
  9721  1EE4  00A3               	movwf	(?___lldiv+3)^(0+512)
  9722  1EE5  082B               	movf	(___lldiv@quotient+2)^(0+512),w
  9723  1EE6  00A2               	movwf	(?___lldiv+2)^(0+512)
  9724  1EE7  082A               	movf	(___lldiv@quotient+1)^(0+512),w
  9725  1EE8  00A1               	movwf	(?___lldiv+1)^(0+512)
  9726  1EE9  0829               	movf	___lldiv@quotient^(0+512),w
  9727  1EEA  00A0               	movwf	?___lldiv^(0+512)
  9728  1EEB  0008               	return
  9729  1EEC                     __end_of___lldiv:	
  9730                           
  9731                           	psect	text30
  9732  1871                     __ptext30:	
  9733 ;; *************** function _ReadUSART *****************
  9734 ;; Defined at:
  9735 ;;		line 302 in file "UART.c"
  9736 ;; Parameters:    Size  Location     Type
  9737 ;;		None
  9738 ;; Auto vars:     Size  Location     Type
  9739 ;;  data            1    1[BANK4 ] unsigned char 
  9740 ;; Return value:  Size  Location     Type
  9741 ;;                  1    wreg      unsigned char 
  9742 ;; Registers used:
  9743 ;;		wreg
  9744 ;; Tracked objects:
  9745 ;;		On entry : 0/0
  9746 ;;		On exit  : 0/0
  9747 ;;		Unchanged: 0/0
  9748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9750 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9751 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9752 ;;      Totals:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  9753 ;;Total ram usage:        2 bytes
  9754 ;; Hardware stack levels used:    1
  9755 ;; Hardware stack levels required when called:    7
  9756 ;; This function calls:
  9757 ;;		Nothing
  9758 ;; This function is called by:
  9759 ;;		_InitUART
  9760 ;; This function uses a non-reentrant model
  9761 ;;
  9762                           
  9763                           
  9764                           ;psect for function _ReadUSART
  9765  1871                     _ReadUSART:	
  9766                           
  9767                           ;UART.c: 304: char data;
  9768                           ;UART.c: 306: if(RCSTAbits.OERR)
  9769                           
  9770                           ;incstack = 0
  9771                           ; Regs used in _ReadUSART: [wreg]
  9772  1871  0023               	movlb	3	; select bank3
  9773  1872  189D               	btfsc	29,1	;volatile
  9774                           
  9775                           ;UART.c: 307: {
  9776                           ;UART.c: 308: RCSTAbits.CREN = 0;
  9777  1873  121D               	bcf	29,4	;volatile
  9778                           
  9779                           ;UART.c: 309: }
  9780                           ;UART.c: 311: data = RCREG;
  9781  1874  0819               	movf	25,w	;volatile
  9782  1875  0024               	movlb	4	; select bank4
  9783  1876  00A0               	movwf	??_ReadUSART^(0+512)
  9784  1877  0820               	movf	??_ReadUSART^(0+512),w
  9785  1878  00A1               	movwf	ReadUSART@data^(0+512)
  9786                           
  9787                           ;UART.c: 313: return (data);
  9788  1879  0821               	movf	ReadUSART@data^(0+512),w
  9789  187A  0008               	return
  9790  187B                     __end_of_ReadUSART:	
  9791                           
  9792                           	psect	text31
  9793  1C8D                     __ptext31:	
  9794 ;; *************** function _OpenUSART *****************
  9795 ;; Defined at:
  9796 ;;		line 158 in file "UART.c"
  9797 ;; Parameters:    Size  Location     Type
  9798 ;;  config          1    wreg     unsigned char 
  9799 ;;  spbrg           2    0[BANK4 ] unsigned int 
  9800 ;; Auto vars:     Size  Location     Type
  9801 ;;  config          1    2[BANK4 ] unsigned char 
  9802 ;; Return value:  Size  Location     Type
  9803 ;;		None               void
  9804 ;; Registers used:
  9805 ;;		wreg, status,2
  9806 ;; Tracked objects:
  9807 ;;		On entry : 0/0
  9808 ;;		On exit  : 0/0
  9809 ;;		Unchanged: 0/0
  9810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9811 ;;      Params:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  9812 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9814 ;;      Totals:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  9815 ;;Total ram usage:        3 bytes
  9816 ;; Hardware stack levels used:    1
  9817 ;; Hardware stack levels required when called:    7
  9818 ;; This function calls:
  9819 ;;		Nothing
  9820 ;; This function is called by:
  9821 ;;		_InitUART
  9822 ;; This function uses a non-reentrant model
  9823 ;;
  9824                           
  9825                           
  9826                           ;psect for function _OpenUSART
  9827  1C8D                     _OpenUSART:	
  9828                           
  9829                           ;incstack = 0
  9830                           ; Regs used in _OpenUSART: [wreg+status,2]
  9831                           ;OpenUSART@config stored from wreg
  9832  1C8D  0024               	movlb	4	; select bank4
  9833  1C8E  00A2               	movwf	OpenUSART@config^(0+512)
  9834                           
  9835                           ;UART.c: 160: TX1STA = 0;
  9836  1C8F  0023               	movlb	3	; select bank3
  9837  1C90  019E               	clrf	30	;volatile
  9838                           
  9839                           ;UART.c: 161: RC1STA = 0;
  9840  1C91  019D               	clrf	29	;volatile
  9841                           
  9842                           ;UART.c: 163: if(config&0x01)
  9843  1C92  0024               	movlb	4	; select bank4
  9844  1C93  1C22               	btfss	OpenUSART@config^(0+512),0
  9845  1C94  2C97               	goto	l6270
  9846                           
  9847                           ;UART.c: 164: {
  9848                           ;UART.c: 165: TX1STAbits.SYNC = 1;
  9849  1C95  0023               	movlb	3	; select bank3
  9850  1C96  161E               	bsf	30,4	;volatile
  9851  1C97                     l6270:	
  9852                           
  9853                           ;UART.c: 166: }
  9854                           ;UART.c: 168: if(config&0x02)
  9855  1C97  0024               	movlb	4	; select bank4
  9856  1C98  1CA2               	btfss	OpenUSART@config^(0+512),1
  9857  1C99  2C9D               	goto	l6274
  9858                           
  9859                           ;UART.c: 169: {
  9860                           ;UART.c: 170: TX1STAbits.TX9 = 1;
  9861  1C9A  0023               	movlb	3	; select bank3
  9862  1C9B  171E               	bsf	30,6	;volatile
  9863                           
  9864                           ;UART.c: 171: RC1STAbits.RX9 = 1;
  9865  1C9C  171D               	bsf	29,6	;volatile
  9866  1C9D                     l6274:	
  9867                           
  9868                           ;UART.c: 172: }
  9869                           ;UART.c: 174: if(config&0x04)
  9870  1C9D  0024               	movlb	4	; select bank4
  9871  1C9E  1D22               	btfss	OpenUSART@config^(0+512),2
  9872  1C9F  2CA2               	goto	l6278
  9873                           
  9874                           ;UART.c: 175: {
  9875                           ;UART.c: 176: TX1STAbits.CSRC = 1;
  9876  1CA0  0023               	movlb	3	; select bank3
  9877  1CA1  179E               	bsf	30,7	;volatile
  9878  1CA2                     l6278:	
  9879                           
  9880                           ;UART.c: 177: }
  9881                           ;UART.c: 179: if(config&0x08)
  9882  1CA2  0024               	movlb	4	; select bank4
  9883  1CA3  1DA2               	btfss	OpenUSART@config^(0+512),3
  9884  1CA4  2CA8               	goto	l415
  9885                           
  9886                           ;UART.c: 180: {
  9887                           ;UART.c: 181: RC1STAbits.CREN = 1;
  9888  1CA5  0023               	movlb	3	; select bank3
  9889  1CA6  161D               	bsf	29,4	;volatile
  9890                           
  9891                           ;UART.c: 182: }
  9892  1CA7  2CAA               	goto	l6282
  9893  1CA8                     l415:	
  9894                           
  9895                           ;UART.c: 183: else
  9896                           ;UART.c: 184: {
  9897                           ;UART.c: 185: RC1STAbits.SREN = 1;
  9898  1CA8  0023               	movlb	3	; select bank3
  9899  1CA9  169D               	bsf	29,5	;volatile
  9900  1CAA                     l6282:	
  9901                           
  9902                           ;UART.c: 186: }
  9903                           ;UART.c: 188: if(config&0x10)
  9904  1CAA  0024               	movlb	4	; select bank4
  9905  1CAB  1E22               	btfss	OpenUSART@config^(0+512),4
  9906  1CAC  2CAF               	goto	l6288
  9907                           
  9908                           ;UART.c: 189: {
  9909                           ;UART.c: 190: TX1STAbits.BRGH = 1;
  9910  1CAD  0023               	movlb	3	; select bank3
  9911  1CAE  151E               	bsf	30,2	;volatile
  9912  1CAF                     l6288:	
  9913                           ;UART.c: 194: {
  9914                           
  9915                           
  9916                           ;UART.c: 196: }
  9917                           ;UART.c: 198: if(config&0x40)
  9918  1CAF  0024               	movlb	4	; select bank4
  9919  1CB0  1F22               	btfss	OpenUSART@config^(0+512),6
  9920  1CB1  2CB7               	goto	l419
  9921                           
  9922                           ;UART.c: 199: {
  9923                           ;UART.c: 200: PIR1bits.RCIF = 0;
  9924  1CB2  0020               	movlb	0	; select bank0
  9925  1CB3  1291               	bcf	17,5	;volatile
  9926                           
  9927                           ;UART.c: 201: PIE1bits.RCIE = 1;
  9928  1CB4  0021               	movlb	1	; select bank1
  9929  1CB5  1691               	bsf	17,5	;volatile
  9930                           
  9931                           ;UART.c: 203: }
  9932  1CB6  2CB9               	goto	l6292
  9933  1CB7                     l419:	
  9934                           
  9935                           ;UART.c: 204: else
  9936                           ;UART.c: 205: {
  9937                           ;UART.c: 206: PIE1bits.RCIE = 0;
  9938  1CB7  0021               	movlb	1	; select bank1
  9939  1CB8  1291               	bcf	17,5	;volatile
  9940  1CB9                     l6292:	
  9941                           
  9942                           ;UART.c: 207: }
  9943                           ;UART.c: 209: if(config&0x80)
  9944  1CB9  0024               	movlb	4	; select bank4
  9945  1CBA  1FA2               	btfss	OpenUSART@config^(0+512),7
  9946  1CBB  2CC1               	goto	l421
  9947                           
  9948                           ;UART.c: 210: {
  9949                           ;UART.c: 211: PIR1bits.TXIF = 0;
  9950  1CBC  0020               	movlb	0	; select bank0
  9951  1CBD  1211               	bcf	17,4	;volatile
  9952                           
  9953                           ;UART.c: 212: PIE1bits.TXIE = 1;
  9954  1CBE  0021               	movlb	1	; select bank1
  9955  1CBF  1611               	bsf	17,4	;volatile
  9956                           
  9957                           ;UART.c: 213: }
  9958  1CC0  2CC3               	goto	l6296
  9959  1CC1                     l421:	
  9960                           
  9961                           ;UART.c: 214: else
  9962                           ;UART.c: 215: {
  9963                           ;UART.c: 216: PIE1bits.TXIE = 0;
  9964  1CC1  0021               	movlb	1	; select bank1
  9965  1CC2  1211               	bcf	17,4	;volatile
  9966  1CC3                     l6296:	
  9967                           
  9968                           ;UART.c: 217: }
  9969                           ;UART.c: 219: SPBRG = spbrg;
  9970  1CC3  0024               	movlb	4	; select bank4
  9971  1CC4  0820               	movf	OpenUSART@spbrg^(0+512),w
  9972  1CC5  0023               	movlb	3	; select bank3
  9973  1CC6  009B               	movwf	27	;volatile
  9974                           
  9975                           ;UART.c: 220: SPBRGH = spbrg >> 8;
  9976  1CC7  0024               	movlb	4	; select bank4
  9977  1CC8  0821               	movf	(OpenUSART@spbrg+1)^(0+512),w
  9978  1CC9  0023               	movlb	3	; select bank3
  9979  1CCA  009C               	movwf	28	;volatile
  9980                           
  9981                           ;UART.c: 222: TX1STAbits.TXEN = 1;
  9982  1CCB  169E               	bsf	30,5	;volatile
  9983                           
  9984                           ;UART.c: 223: RC1STAbits.SPEN = 1;
  9985  1CCC  179D               	bsf	29,7	;volatile
  9986  1CCD  0008               	return
  9987  1CCE                     __end_of_OpenUSART:	
  9988                           
  9989                           	psect	text32
  9990  18CC                     __ptext32:	
  9991 ;; *************** function _CloseUSART *****************
  9992 ;; Defined at:
  9993 ;;		line 62 in file "UART.c"
  9994 ;; Parameters:    Size  Location     Type
  9995 ;;		None
  9996 ;; Auto vars:     Size  Location     Type
  9997 ;;		None
  9998 ;; Return value:  Size  Location     Type
  9999 ;;		None               void
 10000 ;; Registers used:
 10001 ;;		wreg, status,2, status,0
 10002 ;; Tracked objects:
 10003 ;;		On entry : 0/0
 10004 ;;		On exit  : 0/0
 10005 ;;		Unchanged: 0/0
 10006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10009 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
 10010 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
 10011 ;;Total ram usage:        1 bytes
 10012 ;; Hardware stack levels used:    1
 10013 ;; Hardware stack levels required when called:    7
 10014 ;; This function calls:
 10015 ;;		Nothing
 10016 ;; This function is called by:
 10017 ;;		_InitUART
 10018 ;; This function uses a non-reentrant model
 10019 ;;
 10020                           
 10021                           
 10022                           ;psect for function _CloseUSART
 10023  18CC                     _CloseUSART:	
 10024                           
 10025                           ;UART.c: 64: RCSTA&=0b01001111;
 10026                           
 10027                           ;incstack = 0
 10028                           ; Regs used in _CloseUSART: [wreg+status,2+status,0]
 10029  18CC  304F               	movlw	79
 10030  18CD  0024               	movlb	4	; select bank4
 10031  18CE  00A0               	movwf	??_CloseUSART^(0+512)
 10032  18CF  0820               	movf	??_CloseUSART^(0+512),w
 10033  18D0  0023               	movlb	3	; select bank3
 10034  18D1  059D               	andwf	29,f	;volatile
 10035                           
 10036                           ;UART.c: 65: TX1STAbits.TXEN=0;
 10037  18D2  129E               	bcf	30,5	;volatile
 10038                           
 10039                           ;UART.c: 66: PIE1&=0b11001111;
 10040  18D3  30CF               	movlw	207
 10041  18D4  0024               	movlb	4	; select bank4
 10042  18D5  00A0               	movwf	??_CloseUSART^(0+512)
 10043  18D6  0820               	movf	??_CloseUSART^(0+512),w
 10044  18D7  0021               	movlb	1	; select bank1
 10045  18D8  0591               	andwf	17,f	;volatile
 10046  18D9  0008               	return
 10047  18DA                     __end_of_CloseUSART:	
 10048                           
 10049                           	psect	text33
 10050  198C                     __ptext33:	
 10051 ;; *************** function _InitApp *****************
 10052 ;; Defined at:
 10053 ;;		line 62 in file "user.c"
 10054 ;; Parameters:    Size  Location     Type
 10055 ;;		None
 10056 ;; Auto vars:     Size  Location     Type
 10057 ;;		None
 10058 ;; Return value:  Size  Location     Type
 10059 ;;		None               void
 10060 ;; Registers used:
 10061 ;;		wreg, status,2
 10062 ;; Tracked objects:
 10063 ;;		On entry : 0/0
 10064 ;;		On exit  : 0/0
 10065 ;;		Unchanged: 0/0
 10066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10070 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10071 ;;Total ram usage:        0 bytes
 10072 ;; Hardware stack levels used:    1
 10073 ;; Hardware stack levels required when called:    7
 10074 ;; This function calls:
 10075 ;;		Nothing
 10076 ;; This function is called by:
 10077 ;;		_main
 10078 ;; This function uses a non-reentrant model
 10079 ;;
 10080                           
 10081                           
 10082                           ;psect for function _InitApp
 10083  198C                     _InitApp:	
 10084                           
 10085                           ;user.c: 64: LATC =0;
 10086                           
 10087                           ;incstack = 0
 10088                           ; Regs used in _InitApp: [wreg+status,2]
 10089  198C  0022               	movlb	2	; select bank2
 10090  198D  018E               	clrf	14	;volatile
 10091                           
 10092                           ;user.c: 65: LATA =0;
 10093  198E  018C               	clrf	12	;volatile
 10094                           
 10095                           ;user.c: 66: TRISCbits.TRISC2 = 0;
 10096  198F  0021               	movlb	1	; select bank1
 10097  1990  110E               	bcf	14,2	;volatile
 10098                           
 10099                           ;user.c: 67: TRISCbits.TRISC1 = 0;
 10100  1991  108E               	bcf	14,1	;volatile
 10101                           
 10102                           ;user.c: 68: TRISCbits.TRISC3 = 0;
 10103  1992  118E               	bcf	14,3	;volatile
 10104                           
 10105                           ;user.c: 69: TRISCbits.TRISC4 = 0;
 10106  1993  120E               	bcf	14,4	;volatile
 10107                           
 10108                           ;user.c: 70: TRISAbits.TRISA2 = 1;
 10109  1994  150C               	bsf	12,2	;volatile
 10110                           
 10111                           ;user.c: 72: TRISCbits.TRISC0 = 1;
 10112  1995  140E               	bsf	14,0	;volatile
 10113                           
 10114                           ;user.c: 77: TRISCbits.TRISC5 = 1;
 10115  1996  168E               	bsf	14,5	;volatile
 10116                           
 10117                           ;user.c: 80: LATC |= 0b00000010;
 10118  1997  0022               	movlb	2	; select bank2
 10119  1998  148E               	bsf	14,1	;volatile
 10120                           
 10121                           ;user.c: 81: PPSLOCK =0;
 10122  1999  003C               	movlb	28	; select bank28
 10123  199A  018F               	clrf	15	;volatile
 10124                           
 10125                           ;user.c: 82: RC2PPS = 0b00010100;
 10126  199B  3014               	movlw	20
 10127  199C  003D               	movlb	29	; select bank29
 10128  199D  00A2               	movwf	34	;volatile
 10129                           
 10130                           ;user.c: 83: CKPPS = 0b00010010;
 10131  199E  3012               	movlw	18
 10132  199F  003C               	movlb	28	; select bank28
 10133  19A0  00A5               	movwf	37	;volatile
 10134                           
 10135                           ;user.c: 85: RXPPS = 0b00010101;
 10136  19A1  3015               	movlw	21
 10137  19A2  00A4               	movwf	36	;volatile
 10138                           
 10139                           ;user.c: 87: PPSLOCK =1;
 10140  19A3  3001               	movlw	1
 10141  19A4  008F               	movwf	15	;volatile
 10142                           
 10143                           ;user.c: 89: ANSELA &= ~0xFF;
 10144  19A5  0023               	movlb	3	; select bank3
 10145  19A6  018C               	clrf	12	;volatile
 10146                           
 10147                           ;user.c: 90: ANSELA |= 0b00000100;
 10148  19A7  150C               	bsf	12,2	;volatile
 10149                           
 10150                           ;user.c: 91: ANSELC &= ~0xFF;
 10151  19A8  018E               	clrf	14	;volatile
 10152                           
 10153                           ;user.c: 92: OPTION_REGbits.nWPUEN = 0;
 10154  19A9  0021               	movlb	1	; select bank1
 10155  19AA  1395               	bcf	21,7	;volatile
 10156                           
 10157                           ;user.c: 93: WPUC = 0b00100000;
 10158  19AB  3020               	movlw	32
 10159  19AC  0024               	movlb	4	; select bank4
 10160  19AD  008E               	movwf	14	;volatile
 10161                           
 10162                           ;user.c: 94: WPUA = 0;
 10163  19AE  018C               	clrf	12	;volatile
 10164  19AF  0008               	return
 10165  19B0                     __end_of_InitApp:	
 10166                           
 10167                           	psect	text34
 10168  1940                     __ptext34:	
 10169 ;; *************** function _ConfigureOscillator *****************
 10170 ;; Defined at:
 10171 ;;		line 40 in file "system.c"
 10172 ;; Parameters:    Size  Location     Type
 10173 ;;		None
 10174 ;; Auto vars:     Size  Location     Type
 10175 ;;		None
 10176 ;; Return value:  Size  Location     Type
 10177 ;;		None               void
 10178 ;; Registers used:
 10179 ;;		wreg, status,2, status,0
 10180 ;; Tracked objects:
 10181 ;;		On entry : 0/0
 10182 ;;		On exit  : 0/0
 10183 ;;		Unchanged: 0/0
 10184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10187 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
 10188 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
 10189 ;;Total ram usage:        1 bytes
 10190 ;; Hardware stack levels used:    1
 10191 ;; Hardware stack levels required when called:    7
 10192 ;; This function calls:
 10193 ;;		Nothing
 10194 ;; This function is called by:
 10195 ;;		_main
 10196 ;; This function uses a non-reentrant model
 10197 ;;
 10198                           
 10199                           
 10200                           ;psect for function _ConfigureOscillator
 10201  1940                     _ConfigureOscillator:	
 10202                           
 10203                           ;system.c: 42: OSCCON= 0b11110000;
 10204                           
 10205                           ;incstack = 0
 10206                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 10207  1940  30F0               	movlw	240
 10208  1941  0021               	movlb	1	; select bank1
 10209  1942  0099               	movwf	25	;volatile
 10210  1943                     l6774:	
 10211                           ;system.c: 43: while(!(OSCSTAT & HFIOFS));
 10212                           
 10213  1943  3000               	movlw	0
 10214  1944  181A               	btfsc	26,0	;volatile
 10215  1945  3001               	movlw	1
 10216  1946  051A               	andwf	26,w	;volatile
 10217  1947  1903               	btfsc	3,2
 10218  1948  2943               	goto	l6774
 10219  1949                     l6776:	
 10220                           ;system.c: 44: while(!(OSCSTAT & = 0b01000000));
 10221                           
 10222  1949  3040               	movlw	64
 10223  194A  0024               	movlb	4	; select bank4
 10224  194B  00A0               	movwf	??_ConfigureOscillator^(0+512)
 10225  194C  0820               	movf	??_ConfigureOscillator^(0+512),w
 10226  194D  0021               	movlb	1	; select bank1
 10227  194E  059A               	andwf	26,f	;volatile
 10228  194F  1D03               	btfss	3,2
 10229  1950  0008               	return
 10230  1951  2949               	goto	l6776
 10231  1952                     __end_of_ConfigureOscillator:	
 10232                           
 10233                           	psect	intentry
 10234  0004                     __pintentry:	
 10235 ;; *************** function _isr *****************
 10236 ;; Defined at:
 10237 ;;		line 72 in file "interrupts.c"
 10238 ;; Parameters:    Size  Location     Type
 10239 ;;		None
 10240 ;; Auto vars:     Size  Location     Type
 10241 ;;  ScanTemp        1   36[BANK1 ] unsigned char 
 10242 ;;  rx              1   35[BANK1 ] unsigned char 
 10243 ;;  Rx_fault        1   34[BANK1 ] unsigned char 
 10244 ;; Return value:  Size  Location     Type
 10245 ;;		None               void
 10246 ;; Registers used:
 10247 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10248 ;; Tracked objects:
 10249 ;;		On entry : 0/0
 10250 ;;		On exit  : 0/0
 10251 ;;		Unchanged: 0/0
 10252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10254 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 10255 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10256 ;;      Totals:         0       2       3       0       0       0       0       0       0       0       0       0       
      +0       0
 10257 ;;Total ram usage:        5 bytes
 10258 ;; Hardware stack levels used:    1
 10259 ;; Hardware stack levels required when called:    6
 10260 ;; This function calls:
 10261 ;;		_PS2RawToScan
 10262 ;;		_Process_PS2_ScanCode
 10263 ;;		_READ_CONFIG_PIN
 10264 ;;		_ResendLast
 10265 ;;		_Timer2OFF
 10266 ;;		_Timer2Reset
 10267 ;;		_UART_send_break_timed
 10268 ;;		i1_PS_2_DISABLE_INTERRUPT
 10269 ;;		i1_PS_2_ENABLE_INTERRUPT
 10270 ;;		i1_READ_PS_2_PIN
 10271 ;;		i1_ReadUSART
 10272 ;;		i1_Timer2ON
 10273 ;;		i1_UARTchar
 10274 ;; This function is called by:
 10275 ;;		Interrupt level 1
 10276 ;; This function uses a non-reentrant model
 10277 ;;
 10278                           
 10279  0004                     _isr:	
 10280                           
 10281                           ;incstack = 0
 10282                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10283  0004  147E               	bsf	126,0	;set compiler interrupt flag
 10284  0005  3180               	pagesel	$
 10285  0006  0020               	movlb	0	; select bank0
 10286  0007  087F               	movf	127,w
 10287  0008  00EF               	movwf	??_isr+1
 10288                           
 10289                           ;interrupts.c: 74: unsigned char rx;
 10290                           ;interrupts.c: 75: unsigned char Rx_fault =0;
 10291  0009  0021               	movlb	1	; select bank1
 10292  000A  01C2               	clrf	isr@Rx_fault^(0+128)
 10293                           
 10294                           ;interrupts.c: 76: unsigned char ScanTemp;
 10295                           ;interrupts.c: 78: if(IOCAF & 0b00100000)
 10296  000B  0027               	movlb	7	; select bank7
 10297  000C  1E93               	btfss	19,5	;volatile
 10298  000D  2875               	goto	i1l83
 10299                           
 10300                           ;interrupts.c: 79: {
 10301                           ;interrupts.c: 81: PS_2_DISABLE_INTERRUPT(0b00100000);
 10302  000E  3020               	movlw	32
 10303  000F  3198  20F9  3180   	fcall	i1_PS_2_DISABLE_INTERRUPT
 10304                           
 10305                           ;interrupts.c: 82: PIE1bits.TMR2IE = 0;
 10306  0012  0021               	movlb	1	; select bank1
 10307  0013  1091               	bcf	17,1	;volatile
 10308                           
 10309                           ;interrupts.c: 83: PIE1bits.RCIE = 0;
 10310  0014  1291               	bcf	17,5	;volatile
 10311                           
 10312                           ;interrupts.c: 84: LATC |= 0b00010000;
 10313  0015  0022               	movlb	2	; select bank2
 10314  0016  160E               	bsf	14,4	;volatile
 10315                           
 10316                           ;interrupts.c: 85: PS_2_bits++;
 10317  0017  3001               	movlw	1
 10318  0018  0020               	movlb	0	; select bank0
 10319  0019  00EE               	movwf	??_isr
 10320  001A  086E               	movf	??_isr,w
 10321  001B  0021               	movlb	1	; select bank1
 10322  001C  07D2               	addwf	_PS_2_bits^(0+128),f
 10323                           
 10324                           ;interrupts.c: 86: PS_2_Read_Data_TEMP <<= 1;
 10325  001D  3001               	movlw	1
 10326  001E                     u744_25:	
 10327  001E  35C9               	lslf	_PS_2_Read_Data_TEMP^(0+128),f
 10328  001F  0DCA               	rlf	(_PS_2_Read_Data_TEMP+1)^(0+128),f
 10329  0020  0B89               	decfsz	9,f
 10330  0021  281E               	goto	u744_25
 10331                           
 10332                           ;interrupts.c: 87: __nop();
 10333  0022  0000               	nop
 10334                           
 10335                           ;interrupts.c: 88: if(READ_PS_2_PIN(0b00010000))
 10336  0023  3010               	movlw	16
 10337  0024  3199  2152  3180   	fcall	i1_READ_PS_2_PIN
 10338  0027  3A00               	xorlw	0
 10339  0028  1903               	skipnz
 10340  0029  282F               	goto	i1l84
 10341                           
 10342                           ;interrupts.c: 89: {
 10343                           ;interrupts.c: 90: PS_2_Read_Data_TEMP++;
 10344  002A  3001               	movlw	1
 10345  002B  0021               	movlb	1	; select bank1
 10346  002C  07C9               	addwf	_PS_2_Read_Data_TEMP^(0+128),f
 10347  002D  3000               	movlw	0
 10348  002E  3DCA               	addwfc	(_PS_2_Read_Data_TEMP+1)^(0+128),f
 10349  002F                     i1l84:	
 10350                           
 10351                           ;interrupts.c: 91: }
 10352                           ;interrupts.c: 92: if(PS_2_bits == 11)
 10353  002F  0021               	movlb	1	; select bank1
 10354  0030  0852               	movf	_PS_2_bits^(0+128),w
 10355  0031  3A0B               	xorlw	11
 10356  0032  1D03               	skipz
 10357  0033  2860               	goto	i1l5968
 10358                           
 10359                           ;interrupts.c: 93: {
 10360                           ;interrupts.c: 94: if(PS_2_Buffer_items < 12)
 10361  0034  300C               	movlw	12
 10362  0035  0251               	subwf	_PS_2_Buffer_items^(0+128),w
 10363  0036  1803               	skipnc
 10364  0037  285D               	goto	i1l5966
 10365                           
 10366                           ;interrupts.c: 95: {
 10367                           ;interrupts.c: 96: ScanTemp = (unsigned char) PS2RawToScan(PS_2_Read_Data_TEMP);
 10368  0038  084A               	movf	(_PS_2_Read_Data_TEMP+1)^(0+128),w
 10369  0039  01F9               	clrf	PS2RawToScan@Raw+1
 10370  003A  07F9               	addwf	PS2RawToScan@Raw+1,f
 10371  003B  0849               	movf	_PS_2_Read_Data_TEMP^(0+128),w
 10372  003C  01F8               	clrf	PS2RawToScan@Raw
 10373  003D  07F8               	addwf	PS2RawToScan@Raw,f
 10374  003E  319D  2555  3180   	fcall	_PS2RawToScan
 10375  0041  0878               	movf	?_PS2RawToScan,w
 10376  0042  0020               	movlb	0	; select bank0
 10377  0043  00EE               	movwf	??_isr
 10378  0044  086E               	movf	??_isr,w
 10379  0045  0021               	movlb	1	; select bank1
 10380  0046  00C4               	movwf	isr@ScanTemp^(0+128)
 10381                           
 10382                           ;interrupts.c: 97: if(ScanTemp)
 10383  0047  0844               	movf	isr@ScanTemp^(0+128),w
 10384  0048  1903               	btfsc	3,2
 10385  0049  285B               	goto	i1l87
 10386                           
 10387                           ;interrupts.c: 98: {
 10388                           ;interrupts.c: 100: PS_2_ScanCodes[PS_2_Buffer_items] = ScanTemp;
 10389  004A  0844               	movf	isr@ScanTemp^(0+128),w
 10390  004B  0020               	movlb	0	; select bank0
 10391  004C  00EE               	movwf	??_isr
 10392  004D  0021               	movlb	1	; select bank1
 10393  004E  0851               	movf	_PS_2_Buffer_items^(0+128),w
 10394  004F  3ED6               	addlw	_PS_2_ScanCodes& (0+255)
 10395  0050  0086               	movwf	6
 10396  0051  0187               	clrf	7
 10397  0052  0020               	movlb	0	; select bank0
 10398  0053  086E               	movf	??_isr,w
 10399  0054  0081               	movwf	1
 10400                           
 10401                           ;interrupts.c: 101: PS_2_Buffer_items++;
 10402  0055  3001               	movlw	1
 10403  0056  00EE               	movwf	??_isr
 10404  0057  086E               	movf	??_isr,w
 10405  0058  0021               	movlb	1	; select bank1
 10406  0059  07D1               	addwf	_PS_2_Buffer_items^(0+128),f
 10407                           
 10408                           ;interrupts.c: 102: }
 10409  005A  285D               	goto	i1l5966
 10410  005B                     i1l87:	
 10411                           
 10412                           ;interrupts.c: 103: else
 10413                           ;interrupts.c: 104: {
 10414                           ;interrupts.c: 106: ResendLastFlag = 1;
 10415  005B  01D3               	clrf	_ResendLastFlag^(0+128)
 10416  005C  0AD3               	incf	_ResendLastFlag^(0+128),f
 10417  005D                     i1l5966:	
 10418                           
 10419                           ;interrupts.c: 107: }
 10420                           ;interrupts.c: 109: }
 10421                           ;interrupts.c: 110: PS_2_bits = 0;
 10422  005D  01D2               	clrf	_PS_2_bits^(0+128)
 10423                           
 10424                           ;interrupts.c: 111: PS_2_Read_Data_TEMP = 0;
 10425  005E  01C9               	clrf	_PS_2_Read_Data_TEMP^(0+128)
 10426  005F  01CA               	clrf	(_PS_2_Read_Data_TEMP+1)^(0+128)
 10427  0060                     i1l5968:	
 10428                           
 10429                           ;interrupts.c: 112: }
 10430                           ;interrupts.c: 113: Timer2Reset();
 10431  0060  3198  2023  3180   	fcall	_Timer2Reset
 10432                           
 10433                           ;interrupts.c: 114: PIR1bits.TMR2IF = 0;
 10434  0063  0020               	movlb	0	; select bank0
 10435  0064  1091               	bcf	17,1	;volatile
 10436                           
 10437                           ;interrupts.c: 115: PIE1bits.TMR2IE = 1;
 10438  0065  0021               	movlb	1	; select bank1
 10439  0066  1491               	bsf	17,1	;volatile
 10440                           
 10441                           ;interrupts.c: 116: Timer2ON();
 10442  0067  3198  2026  3180   	fcall	i1_Timer2ON
 10443                           
 10444                           ;interrupts.c: 117: IOCAF &= ~0b00100000;
 10445  006A  30DF               	movlw	223
 10446  006B  0020               	movlb	0	; select bank0
 10447  006C  00EE               	movwf	??_isr
 10448  006D  086E               	movf	??_isr,w
 10449  006E  0027               	movlb	7	; select bank7
 10450  006F  0593               	andwf	19,f	;volatile
 10451                           
 10452                           ;interrupts.c: 118: PS_2_ENABLE_INTERRUPT(0b00100000);
 10453  0070  3020               	movlw	32
 10454  0071  3198  2086  3180   	fcall	i1_PS_2_ENABLE_INTERRUPT
 10455                           
 10456                           ;interrupts.c: 119: }
 10457  0074  28E1               	goto	i1l102
 10458  0075                     i1l83:	
 10459                           
 10460                           ;interrupts.c: 120: else if (IOCAF & 0b00010000)
 10461  0075  1E13               	btfss	19,4	;volatile
 10462  0076  2882               	goto	i1l90
 10463                           
 10464                           ;interrupts.c: 121: {
 10465                           ;interrupts.c: 122: PS_2_DISABLE_INTERRUPT(0b00010000);
 10466  0077  3010               	movlw	16
 10467  0078  3198  20F9  3180   	fcall	i1_PS_2_DISABLE_INTERRUPT
 10468                           
 10469                           ;interrupts.c: 123: IOCAF &= ~0b00010000;
 10470  007B  30EF               	movlw	239
 10471  007C  0020               	movlb	0	; select bank0
 10472  007D  00EE               	movwf	??_isr
 10473  007E  086E               	movf	??_isr,w
 10474  007F  0027               	movlb	7	; select bank7
 10475  0080  0593               	andwf	19,f	;volatile
 10476                           
 10477                           ;interrupts.c: 124: }
 10478  0081  28E1               	goto	i1l102
 10479  0082                     i1l90:	
 10480                           
 10481                           ;interrupts.c: 125: else if (PIR1bits.RCIF)
 10482  0082  0020               	movlb	0	; select bank0
 10483  0083  1E91               	btfss	17,5	;volatile
 10484  0084  28BF               	goto	i1l92
 10485                           
 10486                           ;interrupts.c: 126: {
 10487                           ;interrupts.c: 129: LATC |= 0b00001000;
 10488  0085  0022               	movlb	2	; select bank2
 10489  0086  158E               	bsf	14,3	;volatile
 10490                           
 10491                           ;interrupts.c: 130: SinLEDtimer = 0;
 10492  0087  0024               	movlb	4	; select bank4
 10493  0088  01DA               	clrf	_SinLEDtimer^(0+512)
 10494  0089  01DB               	clrf	(_SinLEDtimer+1)^(0+512)
 10495                           
 10496                           ;interrupts.c: 131: Rx_fault = 0;
 10497  008A  0021               	movlb	1	; select bank1
 10498  008B  01C2               	clrf	isr@Rx_fault^(0+128)
 10499                           
 10500                           ;interrupts.c: 132: if(RC1STAbits.FERR)
 10501  008C  0023               	movlb	3	; select bank3
 10502  008D  1D1D               	btfss	29,2	;volatile
 10503  008E  2892               	goto	i1l5992
 10504                           
 10505                           ;interrupts.c: 133: {
 10506                           ;interrupts.c: 134: Rx_fault =1;
 10507  008F  0021               	movlb	1	; select bank1
 10508  0090  01C2               	clrf	isr@Rx_fault^(0+128)
 10509  0091  0AC2               	incf	isr@Rx_fault^(0+128),f
 10510  0092                     i1l5992:	
 10511                           
 10512                           ;interrupts.c: 135: }
 10513                           ;interrupts.c: 136: rx = ReadUSART();
 10514  0092  3198  2054  3180   	fcall	i1_ReadUSART
 10515  0095  0020               	movlb	0	; select bank0
 10516  0096  00EE               	movwf	??_isr
 10517  0097  086E               	movf	??_isr,w
 10518  0098  0021               	movlb	1	; select bank1
 10519  0099  00C3               	movwf	isr@rx^(0+128)
 10520                           
 10521                           ;interrupts.c: 138: if(READ_CONFIG_PIN())
 10522  009A  3198  2046  3180   	fcall	_READ_CONFIG_PIN
 10523  009D  3A00               	xorlw	0
 10524  009E  1903               	skipnz
 10525  009F  28BC               	goto	i1l6002
 10526                           
 10527                           ;interrupts.c: 139: {
 10528                           ;interrupts.c: 140: if(Rx_fault == 1)
 10529  00A0  0021               	movlb	1	; select bank1
 10530  00A1  0842               	movf	isr@Rx_fault^(0+128),w
 10531  00A2  3A01               	xorlw	1
 10532  00A3  1D03               	skipz
 10533  00A4  28B0               	goto	i1l6000
 10534                           
 10535                           ;interrupts.c: 141: {
 10536                           ;interrupts.c: 142: if(rx == 0)
 10537  00A5  08C3               	movf	isr@rx^(0+128),f
 10538  00A6  1D03               	skipz
 10539  00A7  28BC               	goto	i1l6002
 10540                           
 10541                           ;interrupts.c: 143: {
 10542                           ;interrupts.c: 145: UART_send_break_timed(100000);
 10543  00A8  30A0               	movlw	160
 10544  00A9  00FA               	movwf	UART_send_break_timed@US
 10545  00AA  3086               	movlw	134
 10546  00AB  00FB               	movwf	UART_send_break_timed@US+1
 10547  00AC  3199  21B0  3180   	fcall	_UART_send_break_timed
 10548                           
 10549                           ;interrupts.c: 146: }
 10550                           ;interrupts.c: 147: }
 10551  00AF  28BC               	goto	i1l6002
 10552  00B0                     i1l6000:	
 10553                           
 10554                           ;interrupts.c: 148: else
 10555                           ;interrupts.c: 149: {
 10556                           ;interrupts.c: 150: UARTchar(rx, 1 ,RC1STAbits.RX9D);
 10557  00B0  01F8               	clrf	i1UARTchar@override
 10558  00B1  0AF8               	incf	i1UARTchar@override,f
 10559  00B2  3000               	movlw	0
 10560  00B3  0023               	movlb	3	; select bank3
 10561  00B4  181D               	btfsc	29,0	;volatile
 10562  00B5  3001               	movlw	1
 10563  00B6  00F9               	movwf	i1UARTchar@NinethBit_override_data
 10564  00B7  0021               	movlb	1	; select bank1
 10565  00B8  0843               	movf	isr@rx^(0+128),w
 10566  00B9  319F  2740  3180   	fcall	i1_UARTchar
 10567  00BC                     i1l6002:	
 10568                           
 10569                           ;interrupts.c: 151: }
 10570                           ;interrupts.c: 152: }
 10571                           ;interrupts.c: 168: PIR1bits.RCIF = 0;
 10572  00BC  0020               	movlb	0	; select bank0
 10573  00BD  1291               	bcf	17,5	;volatile
 10574                           
 10575                           ;interrupts.c: 169: }
 10576  00BE  28E1               	goto	i1l102
 10577  00BF                     i1l92:	
 10578                           
 10579                           ;interrupts.c: 170: else if(PIR1bits.TMR2IF)
 10580  00BF  1C91               	btfss	17,1	;volatile
 10581  00C0  28E1               	goto	i1l102
 10582                           
 10583                           ;interrupts.c: 171: {
 10584                           ;interrupts.c: 173: PIE1bits.TMR2IE = 0;
 10585  00C1  0021               	movlb	1	; select bank1
 10586  00C2  1091               	bcf	17,1	;volatile
 10587                           
 10588                           ;interrupts.c: 174: Timer2OFF();
 10589  00C3  3198  2020  3180   	fcall	_Timer2OFF
 10590                           
 10591                           ;interrupts.c: 175: PS_2_DISABLE_INTERRUPT(0b00100000);
 10592  00C6  3020               	movlw	32
 10593  00C7  3198  20F9  3180   	fcall	i1_PS_2_DISABLE_INTERRUPT
 10594                           
 10595                           ;interrupts.c: 176: PS_2_bits = 0;
 10596  00CA  0021               	movlb	1	; select bank1
 10597  00CB  01D2               	clrf	_PS_2_bits^(0+128)
 10598                           
 10599                           ;interrupts.c: 177: PS_2_Read_Data_TEMP = 0;
 10600  00CC  01C9               	clrf	_PS_2_Read_Data_TEMP^(0+128)
 10601  00CD  01CA               	clrf	(_PS_2_Read_Data_TEMP+1)^(0+128)
 10602                           
 10603                           ;interrupts.c: 178: if(ResendLastFlag)
 10604  00CE  0853               	movf	_ResendLastFlag^(0+128),w
 10605  00CF  1903               	btfsc	3,2
 10606  00D0  28D7               	goto	i1l6018
 10607                           
 10608                           ;interrupts.c: 179: {
 10609                           ;interrupts.c: 181: ResendLast();
 10610  00D1  318A  2240  3180   	fcall	_ResendLast
 10611                           
 10612                           ;interrupts.c: 182: ResendLastFlag = 0;
 10613  00D4  0021               	movlb	1	; select bank1
 10614  00D5  01D3               	clrf	_ResendLastFlag^(0+128)
 10615                           
 10616                           ;interrupts.c: 183: }
 10617  00D6  28DA               	goto	i1l6020
 10618  00D7                     i1l6018:	
 10619                           
 10620                           ;interrupts.c: 184: else
 10621                           ;interrupts.c: 185: {
 10622                           ;interrupts.c: 186: Process_PS2_ScanCode();
 10623  00D7  3181  211B  3180   	fcall	_Process_PS2_ScanCode
 10624  00DA                     i1l6020:	
 10625                           
 10626                           ;interrupts.c: 187: }
 10627                           ;interrupts.c: 189: PIE1bits.RCIE = 1;
 10628  00DA  0021               	movlb	1	; select bank1
 10629  00DB  1691               	bsf	17,5	;volatile
 10630                           
 10631                           ;interrupts.c: 191: PS_2_ENABLE_INTERRUPT(0b00100000);
 10632  00DC  3020               	movlw	32
 10633  00DD  3198  2086         	fcall	i1_PS_2_ENABLE_INTERRUPT
 10634                           
 10635                           ;interrupts.c: 192: PIR1bits.TMR2IF =0;
 10636  00DF  0020               	movlb	0	; select bank0
 10637  00E0  1091               	bcf	17,1	;volatile
 10638  00E1                     i1l102:	
 10639  00E1  0020               	movlb	0	; select bank0
 10640  00E2  086F               	movf	??_isr+1,w
 10641  00E3  00FF               	movwf	127
 10642  00E4  107E               	bcf	126,0	;clear compiler interrupt flag
 10643  00E5  0009               	retfie
 10644  00E6                     __end_of_isr:	
 10645                           
 10646                           	psect	text36
 10647  1826                     __ptext36:	
 10648 ;; *************** function i1_Timer2ON *****************
 10649 ;; Defined at:
 10650 ;;		line 59 in file "Timer.c"
 10651 ;; Parameters:    Size  Location     Type
 10652 ;;		None
 10653 ;; Auto vars:     Size  Location     Type
 10654 ;;		None
 10655 ;; Return value:  Size  Location     Type
 10656 ;;		None               void
 10657 ;; Registers used:
 10658 ;;		None
 10659 ;; Tracked objects:
 10660 ;;		On entry : 0/0
 10661 ;;		On exit  : 0/0
 10662 ;;		Unchanged: 0/0
 10663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10667 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10668 ;;Total ram usage:        0 bytes
 10669 ;; Hardware stack levels used:    1
 10670 ;; This function calls:
 10671 ;;		Nothing
 10672 ;; This function is called by:
 10673 ;;		_isr
 10674 ;; This function uses a non-reentrant model
 10675 ;;
 10676                           
 10677                           
 10678                           ;psect for function i1_Timer2ON
 10679  1826                     i1_Timer2ON:	
 10680                           
 10681                           ;Timer.c: 61: T2CONbits.TMR2ON = 1;
 10682                           
 10683                           ;incstack = 0
 10684                           ; Regs used in i1_Timer2ON: []
 10685  1826  0020               	movlb	0	; select bank0
 10686  1827  151C               	bsf	28,2	;volatile
 10687  1828  0008               	return
 10688  1829                     __end_ofi1_Timer2ON:	
 10689                           
 10690                           	psect	text37
 10691  1886                     __ptext37:	
 10692 ;; *************** function i1_PS_2_ENABLE_INTERRUPT *****************
 10693 ;; Defined at:
 10694 ;;		line 193 in file "PS_2.c"
 10695 ;; Parameters:    Size  Location     Type
 10696 ;;  DATA_CLK        1    wreg     unsigned char 
 10697 ;; Auto vars:     Size  Location     Type
 10698 ;;  DATA_CLK        1    0[COMMON] unsigned char 
 10699 ;; Return value:  Size  Location     Type
 10700 ;;		None               void
 10701 ;; Registers used:
 10702 ;;		wreg
 10703 ;; Tracked objects:
 10704 ;;		On entry : 0/0
 10705 ;;		On exit  : 0/0
 10706 ;;		Unchanged: 0/0
 10707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10709 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10711 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10712 ;;Total ram usage:        1 bytes
 10713 ;; Hardware stack levels used:    1
 10714 ;; This function calls:
 10715 ;;		Nothing
 10716 ;; This function is called by:
 10717 ;;		_isr
 10718 ;; This function uses a non-reentrant model
 10719 ;;
 10720                           
 10721                           
 10722                           ;psect for function i1_PS_2_ENABLE_INTERRUPT
 10723  1886                     i1_PS_2_ENABLE_INTERRUPT:	
 10724                           
 10725                           ;incstack = 0
 10726                           ; Regs used in i1_PS_2_ENABLE_INTERRUPT: [wreg]
 10727                           ;i1PS_2_ENABLE_INTERRUPT@DATA_CLK stored from wreg
 10728  1886  00F0               	movwf	i1PS_2_ENABLE_INTERRUPT@DATA_CLK
 10729                           
 10730                           ;PS_2.c: 195: if(DATA_CLK == 0b00100000)
 10731  1887  0870               	movf	i1PS_2_ENABLE_INTERRUPT@DATA_CLK,w
 10732  1888  3A20               	xorlw	32
 10733  1889  1D03               	skipz
 10734  188A  288E               	goto	i1l642
 10735                           
 10736                           ;PS_2.c: 196: {
 10737                           ;PS_2.c: 199: IOCAN |= 0b00100000;
 10738  188B  0027               	movlb	7	; select bank7
 10739  188C  1692               	bsf	18,5	;volatile
 10740                           
 10741                           ;PS_2.c: 201: }
 10742  188D  0008               	return
 10743  188E                     i1l642:	
 10744                           
 10745                           ;PS_2.c: 202: else
 10746                           ;PS_2.c: 203: {
 10747                           ;PS_2.c: 206: IOCAN |= 0b00010000;
 10748  188E  0027               	movlb	7	; select bank7
 10749  188F  1612               	bsf	18,4	;volatile
 10750  1890  0008               	return
 10751  1891                     __end_ofi1_PS_2_ENABLE_INTERRUPT:	
 10752                           
 10753                           	psect	text38
 10754  1823                     __ptext38:	
 10755 ;; *************** function _Timer2Reset *****************
 10756 ;; Defined at:
 10757 ;;		line 81 in file "Timer.c"
 10758 ;; Parameters:    Size  Location     Type
 10759 ;;		None
 10760 ;; Auto vars:     Size  Location     Type
 10761 ;;		None
 10762 ;; Return value:  Size  Location     Type
 10763 ;;		None               void
 10764 ;; Registers used:
 10765 ;;		status,2
 10766 ;; Tracked objects:
 10767 ;;		On entry : 0/0
 10768 ;;		On exit  : 0/0
 10769 ;;		Unchanged: 0/0
 10770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10774 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10775 ;;Total ram usage:        0 bytes
 10776 ;; Hardware stack levels used:    1
 10777 ;; This function calls:
 10778 ;;		Nothing
 10779 ;; This function is called by:
 10780 ;;		_isr
 10781 ;; This function uses a non-reentrant model
 10782 ;;
 10783                           
 10784                           
 10785                           ;psect for function _Timer2Reset
 10786  1823                     _Timer2Reset:	
 10787                           
 10788                           ;Timer.c: 83: TMR2 = 0;
 10789                           
 10790                           ;incstack = 0
 10791                           ; Regs used in _Timer2Reset: [status,2]
 10792  1823  0020               	movlb	0	; select bank0
 10793  1824  019A               	clrf	26	;volatile
 10794  1825  0008               	return
 10795  1826                     __end_of_Timer2Reset:	
 10796                           
 10797                           	psect	text39
 10798  1820                     __ptext39:	
 10799 ;; *************** function _Timer2OFF *****************
 10800 ;; Defined at:
 10801 ;;		line 70 in file "Timer.c"
 10802 ;; Parameters:    Size  Location     Type
 10803 ;;		None
 10804 ;; Auto vars:     Size  Location     Type
 10805 ;;		None
 10806 ;; Return value:  Size  Location     Type
 10807 ;;		None               void
 10808 ;; Registers used:
 10809 ;;		None
 10810 ;; Tracked objects:
 10811 ;;		On entry : 0/0
 10812 ;;		On exit  : 0/0
 10813 ;;		Unchanged: 0/0
 10814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10819 ;;Total ram usage:        0 bytes
 10820 ;; Hardware stack levels used:    1
 10821 ;; This function calls:
 10822 ;;		Nothing
 10823 ;; This function is called by:
 10824 ;;		_isr
 10825 ;; This function uses a non-reentrant model
 10826 ;;
 10827                           
 10828                           
 10829                           ;psect for function _Timer2OFF
 10830  1820                     _Timer2OFF:	
 10831                           
 10832                           ;Timer.c: 72: T2CONbits.TMR2ON = 0;
 10833                           
 10834                           ;incstack = 0
 10835                           ; Regs used in _Timer2OFF: []
 10836  1820  0020               	movlb	0	; select bank0
 10837  1821  111C               	bcf	28,2	;volatile
 10838  1822  0008               	return
 10839  1823                     __end_of_Timer2OFF:	
 10840                           
 10841                           	psect	text40
 10842  0A40                     __ptext40:	
 10843 ;; *************** function _ResendLast *****************
 10844 ;; Defined at:
 10845 ;;		line 979 in file "PS_2.c"
 10846 ;; Parameters:    Size  Location     Type
 10847 ;;		None
 10848 ;; Auto vars:     Size  Location     Type
 10849 ;;		None
 10850 ;; Return value:  Size  Location     Type
 10851 ;;		None               void
 10852 ;; Registers used:
 10853 ;;		wreg, status,2, status,0, pclath, cstack
 10854 ;; Tracked objects:
 10855 ;;		On entry : 0/0
 10856 ;;		On exit  : 0/0
 10857 ;;		Unchanged: 0/0
 10858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10862 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10863 ;;Total ram usage:        0 bytes
 10864 ;; Hardware stack levels used:    1
 10865 ;; Hardware stack levels required when called:    2
 10866 ;; This function calls:
 10867 ;;		i1_PS_2_DISABLE_INTERRUPT
 10868 ;;		i1_Send_PS2
 10869 ;; This function is called by:
 10870 ;;		_isr
 10871 ;; This function uses a non-reentrant model
 10872 ;;
 10873                           
 10874                           
 10875                           ;psect for function _ResendLast
 10876  0A40                     _ResendLast:	
 10877                           
 10878                           ;PS_2.c: 981: PS_2_DISABLE_INTERRUPT(0b00100000);
 10879                           
 10880                           ;incstack = 0
 10881                           ; Regs used in _ResendLast: [wreg+status,2+status,0+pclath+cstack]
 10882  0A40  3020               	movlw	32
 10883  0A41  3198  20F9  318A   	fcall	i1_PS_2_DISABLE_INTERRUPT
 10884                           
 10885                           ;PS_2.c: 983: Send_PS2(0xFE);
 10886  0A44  30FE               	movlw	254
 10887  0A45  318C  24DE         	fcall	i1_Send_PS2
 10888  0A47  0008               	return
 10889  0A48                     __end_of_ResendLast:	
 10890                           
 10891                           	psect	text41
 10892  18F9                     __ptext41:	
 10893 ;; *************** function i1_PS_2_DISABLE_INTERRUPT *****************
 10894 ;; Defined at:
 10895 ;;		line 172 in file "PS_2.c"
 10896 ;; Parameters:    Size  Location     Type
 10897 ;;  DATA_CLK        1    wreg     unsigned char 
 10898 ;; Auto vars:     Size  Location     Type
 10899 ;;  DATA_CLK        1    1[COMMON] unsigned char 
 10900 ;; Return value:  Size  Location     Type
 10901 ;;		None               void
 10902 ;; Registers used:
 10903 ;;		wreg, status,2, status,0
 10904 ;; Tracked objects:
 10905 ;;		On entry : 0/0
 10906 ;;		On exit  : 0/0
 10907 ;;		Unchanged: 0/0
 10908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10910 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10911 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10912 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10913 ;;Total ram usage:        2 bytes
 10914 ;; Hardware stack levels used:    1
 10915 ;; This function calls:
 10916 ;;		Nothing
 10917 ;; This function is called by:
 10918 ;;		_isr
 10919 ;;		_ResendLast
 10920 ;; This function uses a non-reentrant model
 10921 ;;
 10922                           
 10923                           
 10924                           ;psect for function i1_PS_2_DISABLE_INTERRUPT
 10925  18F9                     i1_PS_2_DISABLE_INTERRUPT:	
 10926                           
 10927                           ;incstack = 0
 10928                           ; Regs used in i1_PS_2_DISABLE_INTERRUPT: [wreg+status,2+status,0]
 10929                           ;i1PS_2_DISABLE_INTERRUPT@DATA_CLK stored from wreg
 10930  18F9  00F1               	movwf	i1PS_2_DISABLE_INTERRUPT@DATA_CLK
 10931                           
 10932                           ;PS_2.c: 174: if(DATA_CLK == 0b00100000)
 10933  18FA  0871               	movf	i1PS_2_DISABLE_INTERRUPT@DATA_CLK,w
 10934  18FB  3A20               	xorlw	32
 10935  18FC  1D03               	skipz
 10936  18FD  2904               	goto	i1l5116
 10937                           
 10938                           ;PS_2.c: 175: {
 10939                           ;PS_2.c: 178: IOCAN &= ~0b00100000;
 10940  18FE  30DF               	movlw	223
 10941  18FF  00F0               	movwf	??i1_PS_2_DISABLE_INTERRUPT
 10942  1900  0870               	movf	??i1_PS_2_DISABLE_INTERRUPT,w
 10943  1901  0027               	movlb	7	; select bank7
 10944  1902  0592               	andwf	18,f	;volatile
 10945                           
 10946                           ;PS_2.c: 179: }
 10947  1903  0008               	return
 10948  1904                     i1l5116:	
 10949                           
 10950                           ;PS_2.c: 180: else
 10951                           ;PS_2.c: 181: {
 10952                           ;PS_2.c: 184: IOCAN &= ~0b00010000;
 10953  1904  30EF               	movlw	239
 10954  1905  00F0               	movwf	??i1_PS_2_DISABLE_INTERRUPT
 10955  1906  0870               	movf	??i1_PS_2_DISABLE_INTERRUPT,w
 10956  1907  0027               	movlb	7	; select bank7
 10957  1908  0592               	andwf	18,f	;volatile
 10958  1909  0008               	return
 10959  190A                     __end_ofi1_PS_2_DISABLE_INTERRUPT:	
 10960                           
 10961                           	psect	text42
 10962  1846                     __ptext42:	
 10963 ;; *************** function _READ_CONFIG_PIN *****************
 10964 ;; Defined at:
 10965 ;;		line 144 in file "MISC.c"
 10966 ;; Parameters:    Size  Location     Type
 10967 ;;		None
 10968 ;; Auto vars:     Size  Location     Type
 10969 ;;		None
 10970 ;; Return value:  Size  Location     Type
 10971 ;;                  1    wreg      unsigned char 
 10972 ;; Registers used:
 10973 ;;		wreg
 10974 ;; Tracked objects:
 10975 ;;		On entry : 0/0
 10976 ;;		On exit  : 0/0
 10977 ;;		Unchanged: 0/0
 10978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10982 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10983 ;;Total ram usage:        0 bytes
 10984 ;; Hardware stack levels used:    1
 10985 ;; This function calls:
 10986 ;;		Nothing
 10987 ;; This function is called by:
 10988 ;;		_isr
 10989 ;; This function uses a non-reentrant model
 10990 ;;
 10991                           
 10992                           
 10993                           ;psect for function _READ_CONFIG_PIN
 10994  1846                     _READ_CONFIG_PIN:	
 10995                           
 10996                           ;MISC.c: 147: if((PORTC & 0b00000001) == 0b00000001)
 10997                           
 10998                           ;incstack = 0
 10999                           ; Regs used in _READ_CONFIG_PIN: [wreg]
 11000  1846  0020               	movlb	0	; select bank0
 11001  1847  1C0E               	btfss	14,0	;volatile
 11002  1848  284B               	goto	i1l5292
 11003                           
 11004                           ;MISC.c: 148: {
 11005                           ;MISC.c: 149: return (1);
 11006  1849  3001               	movlw	1
 11007  184A  0008               	return
 11008  184B                     i1l5292:	
 11009                           
 11010                           ;MISC.c: 150: }
 11011                           ;MISC.c: 151: return 0;
 11012  184B  3000               	movlw	0
 11013  184C  0008               	return
 11014  184D                     __end_of_READ_CONFIG_PIN:	
 11015                           
 11016                           	psect	text43
 11017  011B                     __ptext43:	
 11018 ;; *************** function _Process_PS2_ScanCode *****************
 11019 ;; Defined at:
 11020 ;;		line 251 in file "PS_2.c"
 11021 ;; Parameters:    Size  Location     Type
 11022 ;;		None
 11023 ;; Auto vars:     Size  Location     Type
 11024 ;;  buf            60    0[BANK3 ] unsigned char [60]
 11025 ;;  temp            1   64[BANK3 ] unsigned char 
 11026 ;; Return value:  Size  Location     Type
 11027 ;;		None               void
 11028 ;; Registers used:
 11029 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11030 ;; Tracked objects:
 11031 ;;		On entry : 0/0
 11032 ;;		On exit  : 0/0
 11033 ;;		Unchanged: 0/0
 11034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11036 ;;      Locals:         0       0       0       0      65       0       0       0       0       0       0       0       
      +0       0
 11037 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 11038 ;;      Totals:         0       0       6       0      65       0       0       0       0       0       0       0       
      +0       0
 11039 ;;Total ram usage:       71 bytes
 11040 ;; Hardware stack levels used:    1
 11041 ;; Hardware stack levels required when called:    5
 11042 ;; This function calls:
 11043 ;;		_BufferShiftBack
 11044 ;;		_Decode_Scan_Code
 11045 ;;		_Decode_Scan_Code_Function
 11046 ;;		_Decode_Scan_Code_FunctionE0
 11047 ;;		_Decode_Scan_Code_Shift
 11048 ;;		_ISNUMBER
 11049 ;;		_SetBaud
 11050 ;;		_UART_send_break
 11051 ;;		_UART_send_break_timed
 11052 ;;		___lmul
 11053 ;;		_cleanBuffer
 11054 ;;		_sprintf
 11055 ;;		i1_Send_PS2
 11056 ;;		i1_UARTchar
 11057 ;;		i1_UARTstringWAIT
 11058 ;;		i1_delayUS
 11059 ;; This function is called by:
 11060 ;;		_isr
 11061 ;; This function uses a non-reentrant model
 11062 ;;
 11063                           
 11064                           
 11065                           ;psect for function _Process_PS2_ScanCode
 11066  011B                     _Process_PS2_ScanCode:	
 11067                           
 11068                           ;PS_2.c: 253: unsigned char temp =0;
 11069                           
 11070                           ;incstack = 0
 11071                           ; Regs used in _Process_PS2_ScanCode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11072  011B  0023               	movlb	3	; select bank3
 11073  011C  01E0               	clrf	Process_PS2_ScanCode@temp^(0+384)
 11074                           
 11075                           ;PS_2.c: 254: unsigned char buf[60];
 11076                           ;PS_2.c: 256: if(PS_2_Buffer_items != 0)
 11077  011D  0021               	movlb	1	; select bank1
 11078  011E  0851               	movf	_PS_2_Buffer_items^(0+128),w
 11079  011F  1903               	btfsc	3,2
 11080  0120  0008               	return
 11081  0121                     i1l5786:	
 11082                           ;PS_2.c: 257: {
 11083                           ;PS_2.c: 259: while(PS_2_Buffer_items != 0)
 11084                           
 11085  0121  0021               	movlb	1	; select bank1
 11086  0122  08D1               	movf	_PS_2_Buffer_items^(0+128),f
 11087  0123  1903               	btfsc	3,2
 11088  0124  0008               	return
 11089                           
 11090                           ;PS_2.c: 260: {
 11091                           ;PS_2.c: 262: if(PS_2_ScanCodes[0])
 11092  0125  0856               	movf	_PS_2_ScanCodes^(0+128),w
 11093  0126  1903               	btfsc	3,2
 11094  0127  2E64               	goto	i1l5782
 11095                           
 11096                           ;PS_2.c: 263: {
 11097                           ;PS_2.c: 265: PS_2_Read_Data_First = PS_2_ScanCodes[0];
 11098  0128  0856               	movf	_PS_2_ScanCodes^(0+128),w
 11099  0129  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11100  012A  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11101  012B  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11102  012C  0023               	movlb	3	; select bank3
 11103  012D  00E1               	movwf	_PS_2_Read_Data_First^(0+384)
 11104  012E  0021               	movlb	1	; select bank1
 11105  012F  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11106  0130  0023               	movlb	3	; select bank3
 11107  0131  00E2               	movwf	(_PS_2_Read_Data_First+1)^(0+384)
 11108                           
 11109                           ;PS_2.c: 266: if(PS_2_Read_Data_First == 0xF0)
 11110  0132  30F0               	movlw	240
 11111  0133  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11112  0134  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11113  0135  1D03               	skipz
 11114  0136  294E               	goto	i1l5316
 11115                           
 11116                           ;PS_2.c: 267: {
 11117                           ;PS_2.c: 268: PS_2_Read_Data_First = PS_2_ScanCodes[0];
 11118  0137  0021               	movlb	1	; select bank1
 11119  0138  0856               	movf	_PS_2_ScanCodes^(0+128),w
 11120  0139  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11121  013A  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11122  013B  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11123  013C  0023               	movlb	3	; select bank3
 11124  013D  00E1               	movwf	_PS_2_Read_Data_First^(0+384)
 11125  013E  0021               	movlb	1	; select bank1
 11126  013F  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11127  0140  0023               	movlb	3	; select bank3
 11128  0141  00E2               	movwf	(_PS_2_Read_Data_First+1)^(0+384)
 11129                           
 11130                           ;PS_2.c: 269: PS_2_Read_Data_Second = PS_2_ScanCodes[1];
 11131  0142  0021               	movlb	1	; select bank1
 11132  0143  0857               	movf	(_PS_2_ScanCodes^(0+128)+1),w
 11133  0144  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11134  0145  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11135  0146  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11136  0147  0023               	movlb	3	; select bank3
 11137  0148  00E3               	movwf	_PS_2_Read_Data_Second^(0+384)
 11138  0149  0021               	movlb	1	; select bank1
 11139  014A  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11140  014B  0023               	movlb	3	; select bank3
 11141  014C  00E4               	movwf	(_PS_2_Read_Data_Second+1)^(0+384)
 11142  014D  299D               	goto	i1l5340
 11143  014E                     i1l5316:	
 11144                           ;PS_2.c: 272: }
 11145                           
 11146                           ;PS_2.c: 271: BufferShiftBack(PS_2_ScanCodes,2,12);
 11147                           
 11148                           ;PS_2.c: 270: PS_2_Buffer_items -= 2;
 11149                           
 11150                           
 11151                           ;PS_2.c: 273: else if(PS_2_Read_Data_First == 0xE0)
 11152  014E  30E0               	movlw	224
 11153  014F  0023               	movlb	3	; select bank3
 11154  0150  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11155  0151  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11156  0152  1D03               	skipz
 11157  0153  29A8               	goto	i1l5344
 11158                           
 11159                           ;PS_2.c: 274: {
 11160                           ;PS_2.c: 275: PS_2_Read_Data_Second = PS_2_ScanCodes[1];
 11161  0154  0021               	movlb	1	; select bank1
 11162  0155  0857               	movf	(_PS_2_ScanCodes^(0+128)+1),w
 11163  0156  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11164  0157  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11165  0158  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11166  0159  0023               	movlb	3	; select bank3
 11167  015A  00E3               	movwf	_PS_2_Read_Data_Second^(0+384)
 11168  015B  0021               	movlb	1	; select bank1
 11169  015C  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11170  015D  0023               	movlb	3	; select bank3
 11171  015E  00E4               	movwf	(_PS_2_Read_Data_Second+1)^(0+384)
 11172                           
 11173                           ;PS_2.c: 276: if(PS_2_Read_Data_Second == 0x12)
 11174  015F  3012               	movlw	18
 11175  0160  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11176  0161  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11177  0162  1D03               	skipz
 11178  0163  2977               	goto	i1l5326
 11179                           
 11180                           ;PS_2.c: 277: {
 11181                           ;PS_2.c: 279: PS_2_Read_Data_First = 0;
 11182  0164  01E1               	clrf	_PS_2_Read_Data_First^(0+384)
 11183  0165  01E2               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
 11184                           
 11185                           ;PS_2.c: 280: PS_2_Read_Data_Second = 0;
 11186  0166  01E3               	clrf	_PS_2_Read_Data_Second^(0+384)
 11187  0167  01E4               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
 11188                           
 11189                           ;PS_2.c: 281: PS_2_Buffer_items -= 4;
 11190  0168  3004               	movlw	4
 11191  0169  0021               	movlb	1	; select bank1
 11192  016A  02D1               	subwf	_PS_2_Buffer_items^(0+128),f
 11193                           
 11194                           ;PS_2.c: 282: BufferShiftBack(PS_2_ScanCodes,4,12);
 11195  016B  3004               	movlw	4
 11196  016C  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11197  016D  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11198  016E  00F0               	movwf	BufferShiftBack@shift
 11199  016F  300C               	movlw	12
 11200  0170  00BD               	movwf	(??_Process_PS2_ScanCode+1)^(0+128)
 11201  0171  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11202  0172  00F1               	movwf	BufferShiftBack@size
 11203  0173  30D6               	movlw	_PS_2_ScanCodes& (0+255)
 11204  0174  319C  244C  3181   	fcall	_BufferShiftBack
 11205  0177                     i1l5326:	
 11206                           
 11207                           ;PS_2.c: 283: }
 11208                           ;PS_2.c: 284: if(PS_2_Read_Data_Second == 0xF0)
 11209  0177  30F0               	movlw	240
 11210  0178  0023               	movlb	3	; select bank3
 11211  0179  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11212  017A  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11213  017B  1D03               	skipz
 11214  017C  299D               	goto	i1l5340
 11215                           
 11216                           ;PS_2.c: 285: {
 11217                           ;PS_2.c: 286: PS_2_Read_Data_Third = PS_2_ScanCodes[2];
 11218  017D  0021               	movlb	1	; select bank1
 11219  017E  0858               	movf	(_PS_2_ScanCodes^(0+128)+2),w
 11220  017F  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11221  0180  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11222  0181  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11223  0182  0023               	movlb	3	; select bank3
 11224  0183  00E5               	movwf	_PS_2_Read_Data_Third^(0+384)
 11225  0184  0021               	movlb	1	; select bank1
 11226  0185  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11227  0186  0023               	movlb	3	; select bank3
 11228  0187  00E6               	movwf	(_PS_2_Read_Data_Third+1)^(0+384)
 11229                           
 11230                           ;PS_2.c: 287: if(PS_2_Read_Data_Third == 0x7C)
 11231  0188  307C               	movlw	124
 11232  0189  0665               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 11233  018A  0466               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11234  018B  1D03               	skipz
 11235  018C  2998               	goto	i1l5336
 11236                           
 11237                           ;PS_2.c: 288: {
 11238                           ;PS_2.c: 290: PS_2_Read_Data_First = 0;
 11239  018D  01E1               	clrf	_PS_2_Read_Data_First^(0+384)
 11240  018E  01E2               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
 11241                           
 11242                           ;PS_2.c: 291: PS_2_Read_Data_Second = 0;
 11243  018F  01E3               	clrf	_PS_2_Read_Data_Second^(0+384)
 11244  0190  01E4               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
 11245                           
 11246                           ;PS_2.c: 292: PS_2_Read_Data_Third = 0;
 11247  0191  01E5               	clrf	_PS_2_Read_Data_Third^(0+384)
 11248  0192  01E6               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
 11249                           
 11250                           ;PS_2.c: 293: PS_2_Buffer_items -= 6;
 11251  0193  3006               	movlw	6
 11252  0194  0021               	movlb	1	; select bank1
 11253  0195  02D1               	subwf	_PS_2_Buffer_items^(0+128),f
 11254                           
 11255                           ;PS_2.c: 294: BufferShiftBack(PS_2_ScanCodes,6,12);
 11256  0196  3006               	movlw	6
 11257  0197  29A1               	goto	L18
 11258  0198                     i1l5336:	
 11259                           ;PS_2.c: 295: }
 11260                           
 11261                           
 11262                           ;PS_2.c: 296: else
 11263                           ;PS_2.c: 297: {
 11264                           ;PS_2.c: 298: PS_2_Buffer_items -= 3;
 11265  0198  3003               	movlw	3
 11266  0199  0021               	movlb	1	; select bank1
 11267  019A  02D1               	subwf	_PS_2_Buffer_items^(0+128),f
 11268                           
 11269                           ;PS_2.c: 299: BufferShiftBack(PS_2_ScanCodes,3,12);
 11270  019B  3003               	movlw	3
 11271  019C  29A1               	goto	L18
 11272  019D                     i1l5340:	
 11273                           ;PS_2.c: 300: }
 11274                           ;PS_2.c: 301: }
 11275                           
 11276                           
 11277                           ;PS_2.c: 302: else
 11278                           ;PS_2.c: 303: {
 11279                           ;PS_2.c: 304: PS_2_Buffer_items -= 2;
 11280  019D  3002               	movlw	2
 11281  019E  0021               	movlb	1	; select bank1
 11282  019F  02D1               	subwf	_PS_2_Buffer_items^(0+128),f
 11283                           
 11284                           ;PS_2.c: 305: BufferShiftBack(PS_2_ScanCodes,2,12);
 11285  01A0  3002               	movlw	2
 11286  01A1                     L18:	
 11287  01A1  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11288  01A2  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11289  01A3  00F0               	movwf	BufferShiftBack@shift
 11290  01A4  300C               	movlw	12
 11291  01A5  00BD               	movwf	(??_Process_PS2_ScanCode+1)^(0+128)
 11292  01A6  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11293  01A7  29B0               	goto	L15
 11294  01A8                     i1l5344:	
 11295                           ;PS_2.c: 306: }
 11296                           ;PS_2.c: 307: }
 11297                           
 11298                           
 11299                           ;PS_2.c: 308: else
 11300                           ;PS_2.c: 309: {
 11301                           ;PS_2.c: 310: PS_2_Buffer_items -= 1;
 11302  01A8  3001               	movlw	1
 11303  01A9  0021               	movlb	1	; select bank1
 11304  01AA  02D1               	subwf	_PS_2_Buffer_items^(0+128),f
 11305                           
 11306                           ;PS_2.c: 311: BufferShiftBack(PS_2_ScanCodes,1,12);
 11307  01AB  01F0               	clrf	BufferShiftBack@shift
 11308  01AC  0AF0               	incf	BufferShiftBack@shift,f
 11309  01AD  300C               	movlw	12
 11310  01AE  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11311  01AF  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11312  01B0                     L15:	
 11313  01B0  00F1               	movwf	BufferShiftBack@size
 11314  01B1  30D6               	movlw	_PS_2_ScanCodes& (0+255)
 11315  01B2  319C  244C  3181   	fcall	_BufferShiftBack
 11316                           
 11317                           ;PS_2.c: 312: }
 11318                           ;PS_2.c: 315: if(PS_2_Read_Data_Third)
 11319  01B5  0023               	movlb	3	; select bank3
 11320  01B6  0866               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11321  01B7  0465               	iorwf	_PS_2_Read_Data_Third^(0+384),w
 11322  01B8  1903               	skipnz
 11323  01B9  29DC               	goto	i1l5366
 11324                           
 11325                           ;PS_2.c: 316: {
 11326                           ;PS_2.c: 318: if(PS_2_Read_Data_First == 0xE0)
 11327  01BA  30E0               	movlw	224
 11328  01BB  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11329  01BC  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11330  01BD  1D03               	skipz
 11331  01BE  2AB5               	goto	i1l5462
 11332                           
 11333                           ;PS_2.c: 319: {
 11334                           ;PS_2.c: 320: if(PS_2_Read_Data_Second == 0xF0)
 11335  01BF  30F0               	movlw	240
 11336  01C0  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11337  01C1  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11338  01C2  1D03               	skipz
 11339  01C3  2AB5               	goto	i1l5462
 11340                           
 11341                           ;PS_2.c: 321: {
 11342                           ;PS_2.c: 322: if(PS_2_Read_Data_Third == 0x11 )
 11343  01C4  3011               	movlw	17
 11344  01C5  0665               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 11345  01C6  0466               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11346  01C7  1D03               	skipz
 11347  01C8  29CB               	goto	i1l5358
 11348                           
 11349                           ;PS_2.c: 323: {
 11350                           ;PS_2.c: 324: LALT = 0;
 11351  01C9  01E9               	clrf	_LALT^(0+384)
 11352                           
 11353                           ;PS_2.c: 325: }
 11354  01CA  2AB5               	goto	i1l5462
 11355  01CB                     i1l5358:	
 11356                           
 11357                           ;PS_2.c: 326: else if(PS_2_Read_Data_Third == 0x14 )
 11358  01CB  3014               	movlw	20
 11359  01CC  0665               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 11360  01CD  0466               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11361  01CE  1D03               	skipz
 11362  01CF  29D3               	goto	i1l5362
 11363                           
 11364                           ;PS_2.c: 327: {
 11365                           ;PS_2.c: 328: LControl = 0;
 11366  01D0  0021               	movlb	1	; select bank1
 11367  01D1  01CF               	clrf	_LControl^(0+128)
 11368                           
 11369                           ;PS_2.c: 329: }
 11370  01D2  2AB5               	goto	i1l5462
 11371  01D3                     i1l5362:	
 11372                           
 11373                           ;PS_2.c: 330: else if(PS_2_Read_Data_Third == 0x71 )
 11374  01D3  3071               	movlw	113
 11375  01D4  0023               	movlb	3	; select bank3
 11376  01D5  0665               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 11377  01D6  0466               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11378  01D7  1D03               	skipz
 11379  01D8  2AB5               	goto	i1l5462
 11380                           
 11381                           ;PS_2.c: 331: {
 11382                           ;PS_2.c: 332: Delete = 0;
 11383  01D9  0021               	movlb	1	; select bank1
 11384  01DA  01CE               	clrf	_Delete^(0+128)
 11385                           
 11386                           ;PS_2.c: 333: }
 11387                           ;PS_2.c: 334: }
 11388                           ;PS_2.c: 335: }
 11389                           ;PS_2.c: 336: }
 11390  01DB  2AB5               	goto	i1l5462
 11391  01DC                     i1l5366:	
 11392                           
 11393                           ;PS_2.c: 337: else if(PS_2_Read_Data_Second)
 11394  01DC  0023               	movlb	3	; select bank3
 11395  01DD  0864               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11396  01DE  0463               	iorwf	_PS_2_Read_Data_Second^(0+384),w
 11397  01DF  1903               	skipnz
 11398  01E0  2AB5               	goto	i1l5462
 11399                           
 11400                           ;PS_2.c: 338: {
 11401                           ;PS_2.c: 340: if(PS_2_Read_Data_First == 0xF0)
 11402  01E1  30F0               	movlw	240
 11403  01E2  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11404  01E3  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11405  01E4  1D03               	skipz
 11406  01E5  2A60               	goto	i1l5430
 11407                           
 11408                           ;PS_2.c: 341: {
 11409                           ;PS_2.c: 343: if(PS_2_Read_Data_Second == 0x12)
 11410  01E6  3012               	movlw	18
 11411  01E7  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11412  01E8  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11413  01E9  1D03               	skipz
 11414  01EA  29ED               	goto	i1l5374
 11415                           
 11416                           ;PS_2.c: 344: {
 11417                           ;PS_2.c: 345: Right_Shift_Key =0;
 11418  01EB  01EE               	clrf	_Right_Shift_Key^(0+384)
 11419                           
 11420                           ;PS_2.c: 346: }
 11421  01EC  2A00               	goto	i1l5386
 11422  01ED                     i1l5374:	
 11423                           
 11424                           ;PS_2.c: 347: else if(PS_2_Read_Data_Second == 0x59)
 11425  01ED  3059               	movlw	89
 11426  01EE  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11427  01EF  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11428  01F0  1D03               	skipz
 11429  01F1  29F4               	goto	i1l5378
 11430                           
 11431                           ;PS_2.c: 348: {
 11432                           ;PS_2.c: 349: Left_Shift_Key =0;
 11433  01F2  01EA               	clrf	_Left_Shift_Key^(0+384)
 11434                           
 11435                           ;PS_2.c: 350: }
 11436  01F3  2A00               	goto	i1l5386
 11437  01F4                     i1l5378:	
 11438                           
 11439                           ;PS_2.c: 351: else if(PS_2_Read_Data_Second == 0x14)
 11440  01F4  3014               	movlw	20
 11441  01F5  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11442  01F6  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11443  01F7  1D03               	skipz
 11444  01F8  29FB               	goto	i1l5382
 11445                           
 11446                           ;PS_2.c: 352: {
 11447                           ;PS_2.c: 353: RControl =0;
 11448  01F9  01ED               	clrf	_RControl^(0+384)
 11449                           
 11450                           ;PS_2.c: 354: }
 11451  01FA  2A00               	goto	i1l5386
 11452  01FB                     i1l5382:	
 11453                           
 11454                           ;PS_2.c: 355: else if(PS_2_Read_Data_Second == 0x11 )
 11455  01FB  3011               	movlw	17
 11456  01FC  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11457  01FD  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11458  01FE  1903               	btfsc	3,2
 11459                           
 11460                           ;PS_2.c: 356: {
 11461                           ;PS_2.c: 357: RALT =0;
 11462  01FF  01EC               	clrf	_RALT^(0+384)
 11463  0200                     i1l5386:	
 11464                           
 11465                           ;PS_2.c: 358: }
 11466                           ;PS_2.c: 359: if(PS_2_Read_Data_Second == 0x59 || PS_2_Read_Data_Second == 0x12)
 11467  0200  3059               	movlw	89
 11468  0201  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11469  0202  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11470  0203  1903               	skipnz
 11471  0204  2A0A               	goto	i1l5390
 11472  0205  3012               	movlw	18
 11473  0206  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11474  0207  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11475  0208  1D03               	skipz
 11476  0209  2A58               	goto	i1l5426
 11477  020A                     i1l5390:	
 11478                           
 11479                           ;PS_2.c: 360: {
 11480                           ;PS_2.c: 361: if(Right_Shift_Key == 0 && Left_Shift_Key == 0)
 11481  020A  08EE               	movf	_Right_Shift_Key^(0+384),f
 11482  020B  1D03               	skipz
 11483  020C  2AB5               	goto	i1l5462
 11484  020D  08EA               	movf	_Left_Shift_Key^(0+384),f
 11485  020E  1D03               	skipz
 11486  020F  2AB5               	goto	i1l5462
 11487                           
 11488                           ;PS_2.c: 362: {
 11489                           ;PS_2.c: 363: if(!Send_PS2(0xED))
 11490  0210  30ED               	movlw	237
 11491  0211  318C  24DE  3181   	fcall	i1_Send_PS2
 11492  0214  3800               	iorlw	0
 11493  0215  1D03               	skipz
 11494  0216  2A20               	goto	i1l5400
 11495                           
 11496                           ;PS_2.c: 364: {
 11497                           ;PS_2.c: 365: if(!Send_PS2(0x00))
 11498  0217  3000               	movlw	0
 11499  0218  318C  24DE  3181   	fcall	i1_Send_PS2
 11500  021B  3800               	iorlw	0
 11501  021C  1D03               	skipz
 11502  021D  2A20               	goto	i1l5400
 11503                           
 11504                           ;PS_2.c: 366: {
 11505                           ;PS_2.c: 367: Shift_Key = 0;
 11506  021E  0023               	movlb	3	; select bank3
 11507  021F  01EF               	clrf	_Shift_Key^(0+384)
 11508  0220                     i1l5400:	
 11509                           
 11510                           ;PS_2.c: 368: }
 11511                           ;PS_2.c: 369: }
 11512                           ;PS_2.c: 370: if(Caps_Lock)
 11513  0220  0023               	movlb	3	; select bank3
 11514  0221  0868               	movf	_Caps_Lock^(0+384),w
 11515  0222  1903               	btfsc	3,2
 11516  0223  2A3E               	goto	i1l5414
 11517                           
 11518                           ;PS_2.c: 371: {
 11519                           ;PS_2.c: 372: CapsCount=0;
 11520  0224  01E7               	clrf	_CapsCount^(0+384)
 11521  0225                     i1l5412:	
 11522                           ;PS_2.c: 373: while(CapsCount<10)
 11523                           
 11524  0225  300A               	movlw	10
 11525  0226  0267               	subwf	_CapsCount^(0+384),w
 11526  0227  1803               	btfsc	3,0
 11527  0228  2AB5               	goto	i1l5462
 11528                           
 11529                           ;PS_2.c: 374: {
 11530                           ;PS_2.c: 375: if(!Send_PS2(0xED))
 11531  0229  30ED               	movlw	237
 11532  022A  318C  24DE  3181   	fcall	i1_Send_PS2
 11533  022D  3800               	iorlw	0
 11534  022E  1D03               	skipz
 11535  022F  2A37               	goto	i1l5410
 11536                           
 11537                           ;PS_2.c: 376: {
 11538                           ;PS_2.c: 377: if(!Send_PS2(0x04))
 11539  0230  3004               	movlw	4
 11540  0231  318C  24DE  3181   	fcall	i1_Send_PS2
 11541  0234  3800               	iorlw	0
 11542  0235  1903               	btfsc	3,2
 11543  0236  2AB5               	goto	i1l5462
 11544  0237                     i1l5410:	
 11545                           ;PS_2.c: 378: {
 11546                           ;PS_2.c: 379: break;
 11547                           
 11548                           
 11549                           ;PS_2.c: 380: }
 11550                           ;PS_2.c: 381: }
 11551                           ;PS_2.c: 382: CapsCount++;
 11552  0237  3001               	movlw	1
 11553  0238  0021               	movlb	1	; select bank1
 11554  0239  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11555  023A  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11556  023B  0023               	movlb	3	; select bank3
 11557  023C  07E7               	addwf	_CapsCount^(0+384),f
 11558  023D  2A25               	goto	i1l5412
 11559  023E                     i1l5414:	
 11560                           ;PS_2.c: 383: }
 11561                           ;PS_2.c: 384: }
 11562                           
 11563                           
 11564                           ;PS_2.c: 385: else
 11565                           ;PS_2.c: 386: {
 11566                           ;PS_2.c: 387: CapsCount=0;
 11567  023E  01E7               	clrf	_CapsCount^(0+384)
 11568  023F                     i1l5424:	
 11569                           ;PS_2.c: 388: while(CapsCount<10)
 11570                           
 11571  023F  300A               	movlw	10
 11572  0240  0267               	subwf	_CapsCount^(0+384),w
 11573  0241  1803               	btfsc	3,0
 11574  0242  2AB5               	goto	i1l5462
 11575                           
 11576                           ;PS_2.c: 389: {
 11577                           ;PS_2.c: 390: if(!Send_PS2(0xED))
 11578  0243  30ED               	movlw	237
 11579  0244  318C  24DE  3181   	fcall	i1_Send_PS2
 11580  0247  3800               	iorlw	0
 11581  0248  1D03               	skipz
 11582  0249  2A51               	goto	i1l5422
 11583                           
 11584                           ;PS_2.c: 391: {
 11585                           ;PS_2.c: 392: if(!Send_PS2(0x00))
 11586  024A  3000               	movlw	0
 11587  024B  318C  24DE  3181   	fcall	i1_Send_PS2
 11588  024E  3800               	iorlw	0
 11589  024F  1903               	btfsc	3,2
 11590  0250  2AB5               	goto	i1l5462
 11591  0251                     i1l5422:	
 11592                           ;PS_2.c: 393: {
 11593                           ;PS_2.c: 394: break;
 11594                           
 11595                           
 11596                           ;PS_2.c: 395: }
 11597                           ;PS_2.c: 396: }
 11598                           ;PS_2.c: 397: CapsCount++;
 11599  0251  3001               	movlw	1
 11600  0252  0021               	movlb	1	; select bank1
 11601  0253  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11602  0254  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11603  0255  0023               	movlb	3	; select bank3
 11604  0256  07E7               	addwf	_CapsCount^(0+384),f
 11605  0257  2A3F               	goto	i1l5424
 11606  0258                     i1l5426:	
 11607                           ;PS_2.c: 398: }
 11608                           ;PS_2.c: 399: }
 11609                           ;PS_2.c: 400: }
 11610                           ;PS_2.c: 401: }
 11611                           
 11612                           
 11613                           ;PS_2.c: 402: else if(PS_2_Read_Data_Second == 0x58)
 11614  0258  3058               	movlw	88
 11615  0259  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11616  025A  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11617  025B  1D03               	skipz
 11618  025C  2AB5               	goto	i1l5462
 11619                           
 11620                           ;PS_2.c: 403: {
 11621                           ;PS_2.c: 404: Caps_Lock_Key = 0;
 11622  025D  0021               	movlb	1	; select bank1
 11623  025E  01CC               	clrf	_Caps_Lock_Key^(0+128)
 11624                           
 11625                           ;PS_2.c: 405: }
 11626                           ;PS_2.c: 406: }
 11627  025F  2AB5               	goto	i1l5462
 11628  0260                     i1l5430:	
 11629                           
 11630                           ;PS_2.c: 407: else if(PS_2_Read_Data_First == 0xE0)
 11631  0260  30E0               	movlw	224
 11632  0261  0023               	movlb	3	; select bank3
 11633  0262  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11634  0263  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11635  0264  1D03               	skipz
 11636  0265  2AB5               	goto	i1l5462
 11637                           
 11638                           ;PS_2.c: 408: {
 11639                           ;PS_2.c: 410: if(PS_2_Read_Data_Second == 0x11 )
 11640  0266  3011               	movlw	17
 11641  0267  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11642  0268  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11643  0269  1D03               	skipz
 11644  026A  2A6E               	goto	i1l5436
 11645                           
 11646                           ;PS_2.c: 411: {
 11647                           ;PS_2.c: 412: LALT = 1;
 11648  026B  01E9               	clrf	_LALT^(0+384)
 11649  026C  0AE9               	incf	_LALT^(0+384),f
 11650                           
 11651                           ;PS_2.c: 413: }
 11652  026D  2A80               	goto	i1l710
 11653  026E                     i1l5436:	
 11654                           
 11655                           ;PS_2.c: 414: else if(PS_2_Read_Data_Second == 0x14 )
 11656  026E  3014               	movlw	20
 11657  026F  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11658  0270  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11659  0271  1D03               	skipz
 11660  0272  2A77               	goto	i1l5440
 11661                           
 11662                           ;PS_2.c: 415: {
 11663                           ;PS_2.c: 416: LControl = 1;
 11664  0273  0021               	movlb	1	; select bank1
 11665  0274  01CF               	clrf	_LControl^(0+128)
 11666  0275  0ACF               	incf	_LControl^(0+128),f
 11667                           
 11668                           ;PS_2.c: 417: }
 11669  0276  2A80               	goto	i1l710
 11670  0277                     i1l5440:	
 11671                           
 11672                           ;PS_2.c: 418: else if(PS_2_Read_Data_Second == 0x71 )
 11673  0277  3071               	movlw	113
 11674  0278  0023               	movlb	3	; select bank3
 11675  0279  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11676  027A  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11677  027B  1D03               	skipz
 11678  027C  2A80               	goto	i1l710
 11679                           
 11680                           ;PS_2.c: 419: {
 11681                           ;PS_2.c: 420: Delete = 1;
 11682  027D  0021               	movlb	1	; select bank1
 11683  027E  01CE               	clrf	_Delete^(0+128)
 11684  027F  0ACE               	incf	_Delete^(0+128),f
 11685  0280                     i1l710:	
 11686                           
 11687                           ;PS_2.c: 421: }
 11688                           ;PS_2.c: 422: if(((RControl || LControl) + (LALT || RALT) + Delete) != 3)
 11689  0280  0023               	movlb	3	; select bank3
 11690  0281  01DC               	clrf	_Process_PS2_ScanCode$851^(0+384)
 11691  0282  0ADC               	incf	_Process_PS2_ScanCode$851^(0+384),f
 11692  0283  08E9               	movf	_LALT^(0+384),f
 11693  0284  1D03               	skipz
 11694  0285  2A8A               	goto	i1l5450
 11695  0286  08EC               	movf	_RALT^(0+384),f
 11696  0287  1D03               	skipz
 11697  0288  2A8A               	goto	i1l5450
 11698  0289  01DC               	clrf	_Process_PS2_ScanCode$851^(0+384)
 11699  028A                     i1l5450:	
 11700  028A  01DD               	clrf	_Process_PS2_ScanCode$852^(0+384)
 11701  028B  0ADD               	incf	_Process_PS2_ScanCode$852^(0+384),f
 11702  028C  08ED               	movf	_RControl^(0+384),f
 11703  028D  1D03               	skipz
 11704  028E  2A95               	goto	i1l5458
 11705  028F  0021               	movlb	1	; select bank1
 11706  0290  08CF               	movf	_LControl^(0+128),f
 11707  0291  1D03               	skipz
 11708  0292  2A95               	goto	i1l5458
 11709  0293  0023               	movlb	3	; select bank3
 11710  0294  01DD               	clrf	_Process_PS2_ScanCode$852^(0+384)
 11711  0295                     i1l5458:	
 11712  0295  0021               	movlb	1	; select bank1
 11713  0296  084E               	movf	_Delete^(0+128),w
 11714  0297  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11715  0298  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11716  0299  0023               	movlb	3	; select bank3
 11717  029A  085D               	movf	_Process_PS2_ScanCode$852^(0+384),w
 11718  029B  075C               	addwf	_Process_PS2_ScanCode$851^(0+384),w
 11719  029C  0021               	movlb	1	; select bank1
 11720  029D  00BE               	movwf	(??_Process_PS2_ScanCode+2)^(0+128)
 11721  029E  01BF               	clrf	((??_Process_PS2_ScanCode+2)^(0+128)+1)
 11722  029F  0DBF               	rlf	(??_Process_PS2_ScanCode+3)^(0+128),f
 11723  02A0  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11724  02A1  073E               	addwf	(??_Process_PS2_ScanCode+2)^(0+128),w
 11725  02A2  00C0               	movwf	(??_Process_PS2_ScanCode+4)^(0+128)
 11726  02A3  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11727  02A4  3D3F               	addwfc	(??_Process_PS2_ScanCode+3)^(0+128),w
 11728  02A5  00C1               	movwf	(??_Process_PS2_ScanCode+5)^(0+128)
 11729  02A6  3003               	movlw	3
 11730  02A7  0640               	xorwf	(??_Process_PS2_ScanCode+4)^(0+128),w
 11731  02A8  0441               	iorwf	(??_Process_PS2_ScanCode+5)^(0+128),w
 11732  02A9  1903               	skipnz
 11733  02AA  2AB5               	goto	i1l5462
 11734                           
 11735                           ;PS_2.c: 423: {
 11736                           ;PS_2.c: 425: temp = Decode_Scan_Code_FunctionE0(PS_2_Read_Data_Second);
 11737  02AB  0023               	movlb	3	; select bank3
 11738  02AC  0863               	movf	_PS_2_Read_Data_Second^(0+384),w
 11739  02AD  3199  211C  3181   	fcall	_Decode_Scan_Code_FunctionE0
 11740  02B0  0021               	movlb	1	; select bank1
 11741  02B1  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11742  02B2  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11743  02B3  0023               	movlb	3	; select bank3
 11744  02B4  00E0               	movwf	Process_PS2_ScanCode@temp^(0+384)
 11745  02B5                     i1l5462:	
 11746                           
 11747                           ;PS_2.c: 426: }
 11748                           ;PS_2.c: 427: }
 11749                           ;PS_2.c: 428: }
 11750                           ;PS_2.c: 429: if(PS_2_Read_Data_First != 0 && PS_2_Read_Data_Second == 0 &&
 11751                           ;PS_2.c: 430: PS_2_Read_Data_Third == 0)
 11752  02B5  0023               	movlb	3	; select bank3
 11753  02B6  0862               	movf	(_PS_2_Read_Data_First+1)^(0+384),w
 11754  02B7  0461               	iorwf	_PS_2_Read_Data_First^(0+384),w
 11755  02B8  1903               	skipnz
 11756  02B9  2C04               	goto	i1l5610
 11757  02BA  0864               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11758  02BB  0463               	iorwf	_PS_2_Read_Data_Second^(0+384),w
 11759  02BC  1D03               	skipz
 11760  02BD  2C04               	goto	i1l5610
 11761  02BE  0866               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11762  02BF  0465               	iorwf	_PS_2_Read_Data_Third^(0+384),w
 11763  02C0  1D03               	skipz
 11764  02C1  2C04               	goto	i1l5610
 11765                           
 11766                           ;PS_2.c: 431: {
 11767                           ;PS_2.c: 433: if(PS_2_Read_Data_First == 0x12)
 11768  02C2  3012               	movlw	18
 11769  02C3  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11770  02C4  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11771  02C5  1D03               	skipz
 11772  02C6  2ACA               	goto	i1l5472
 11773                           
 11774                           ;PS_2.c: 434: {
 11775                           ;PS_2.c: 435: Right_Shift_Key = 1;
 11776  02C7  01EE               	clrf	_Right_Shift_Key^(0+384)
 11777  02C8  0AEE               	incf	_Right_Shift_Key^(0+384),f
 11778                           
 11779                           ;PS_2.c: 436: }
 11780  02C9  2AD1               	goto	i1l5476
 11781  02CA                     i1l5472:	
 11782                           
 11783                           ;PS_2.c: 437: else if(PS_2_Read_Data_First == 0x59)
 11784  02CA  3059               	movlw	89
 11785  02CB  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11786  02CC  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11787  02CD  1D03               	skipz
 11788  02CE  2AD1               	goto	i1l5476
 11789                           
 11790                           ;PS_2.c: 438: {
 11791                           ;PS_2.c: 439: Left_Shift_Key = 1;
 11792  02CF  01EA               	clrf	_Left_Shift_Key^(0+384)
 11793  02D0  0AEA               	incf	_Left_Shift_Key^(0+384),f
 11794  02D1                     i1l5476:	
 11795                           
 11796                           ;PS_2.c: 440: }
 11797                           ;PS_2.c: 441: if((Right_Shift_Key == 1 && Right_Shift_Key_old == 0) || (Left_Shift_Key =
      +                          = 1 && Left_Shift_Key_old == 0))
 11798  02D1  086E               	movf	_Right_Shift_Key^(0+384),w
 11799  02D2  3A01               	xorlw	1
 11800  02D3  1D03               	skipz
 11801  02D4  2AD9               	goto	i1l5480
 11802  02D5  0021               	movlb	1	; select bank1
 11803  02D6  0854               	movf	_Right_Shift_Key_old^(0+128),w
 11804  02D7  1903               	btfsc	3,2
 11805  02D8  2AE2               	goto	i1l5484
 11806  02D9                     i1l5480:	
 11807  02D9  0023               	movlb	3	; select bank3
 11808  02DA  086A               	movf	_Left_Shift_Key^(0+384),w
 11809  02DB  3A01               	xorlw	1
 11810  02DC  1D03               	skipz
 11811  02DD  2B24               	goto	i1l5512
 11812  02DE  0021               	movlb	1	; select bank1
 11813  02DF  08D0               	movf	_Left_Shift_Key_old^(0+128),f
 11814  02E0  1D03               	skipz
 11815  02E1  2B24               	goto	i1l5512
 11816  02E2                     i1l5484:	
 11817                           
 11818                           ;PS_2.c: 442: {
 11819                           ;PS_2.c: 444: if(!Send_PS2(0xED))
 11820  02E2  30ED               	movlw	237
 11821  02E3  318C  24DE  3181   	fcall	i1_Send_PS2
 11822  02E6  3800               	iorlw	0
 11823  02E7  1D03               	skipz
 11824  02E8  2B24               	goto	i1l5512
 11825                           
 11826                           ;PS_2.c: 445: {
 11827                           ;PS_2.c: 446: if(Caps_Lock)
 11828  02E9  0023               	movlb	3	; select bank3
 11829  02EA  0868               	movf	_Caps_Lock^(0+384),w
 11830  02EB  1903               	btfsc	3,2
 11831  02EC  2B07               	goto	i1l5500
 11832                           
 11833                           ;PS_2.c: 447: {
 11834                           ;PS_2.c: 448: CapsCount=0;
 11835  02ED  01E7               	clrf	_CapsCount^(0+384)
 11836  02EE                     i1l5498:	
 11837                           ;PS_2.c: 449: while(CapsCount<10)
 11838                           
 11839  02EE  300A               	movlw	10
 11840  02EF  0267               	subwf	_CapsCount^(0+384),w
 11841  02F0  1803               	btfsc	3,0
 11842  02F1  2B24               	goto	i1l5512
 11843                           
 11844                           ;PS_2.c: 450: {
 11845                           ;PS_2.c: 451: if(!Send_PS2(0xED))
 11846  02F2  30ED               	movlw	237
 11847  02F3  318C  24DE  3181   	fcall	i1_Send_PS2
 11848  02F6  3800               	iorlw	0
 11849  02F7  1D03               	skipz
 11850  02F8  2B00               	goto	i1l5496
 11851                           
 11852                           ;PS_2.c: 452: {
 11853                           ;PS_2.c: 453: if(!Send_PS2(0x05))
 11854  02F9  3005               	movlw	5
 11855  02FA  318C  24DE  3181   	fcall	i1_Send_PS2
 11856  02FD  3800               	iorlw	0
 11857  02FE  1903               	btfsc	3,2
 11858  02FF  2B21               	goto	i1l5506
 11859  0300                     i1l5496:	
 11860                           ;PS_2.c: 456: break;
 11861                           
 11862                           ;PS_2.c: 454: {
 11863                           ;PS_2.c: 455: Shift_Key = 1;
 11864                           
 11865                           
 11866                           ;PS_2.c: 457: }
 11867                           ;PS_2.c: 458: }
 11868                           ;PS_2.c: 459: CapsCount++;
 11869  0300  3001               	movlw	1
 11870  0301  0021               	movlb	1	; select bank1
 11871  0302  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11872  0303  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11873  0304  0023               	movlb	3	; select bank3
 11874  0305  07E7               	addwf	_CapsCount^(0+384),f
 11875  0306  2AEE               	goto	i1l5498
 11876  0307                     i1l5500:	
 11877                           ;PS_2.c: 460: }
 11878                           ;PS_2.c: 461: }
 11879                           
 11880                           
 11881                           ;PS_2.c: 462: else
 11882                           ;PS_2.c: 463: {
 11883                           ;PS_2.c: 464: CapsCount=0;
 11884  0307  01E7               	clrf	_CapsCount^(0+384)
 11885                           
 11886                           ;PS_2.c: 465: while(CapsCount<10)
 11887  0308  2B0F               	goto	i1l5510
 11888  0309                     i1l5508:	
 11889                           ;PS_2.c: 472: break;
 11890                           
 11891                           
 11892                           ;PS_2.c: 473: }
 11893                           ;PS_2.c: 474: }
 11894                           ;PS_2.c: 475: CapsCount++;
 11895  0309  3001               	movlw	1
 11896  030A  0021               	movlb	1	; select bank1
 11897  030B  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11898  030C  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11899  030D  0023               	movlb	3	; select bank3
 11900  030E  07E7               	addwf	_CapsCount^(0+384),f
 11901  030F                     i1l5510:	
 11902  030F  300A               	movlw	10
 11903  0310  0267               	subwf	_CapsCount^(0+384),w
 11904  0311  1803               	btfsc	3,0
 11905  0312  2B24               	goto	i1l5512
 11906                           
 11907                           ;PS_2.c: 466: {
 11908                           ;PS_2.c: 467: if(!Send_PS2(0xED))
 11909  0313  30ED               	movlw	237
 11910  0314  318C  24DE  3181   	fcall	i1_Send_PS2
 11911  0317  3800               	iorlw	0
 11912  0318  1D03               	skipz
 11913  0319  2B09               	goto	i1l5508
 11914                           
 11915                           ;PS_2.c: 468: {
 11916                           ;PS_2.c: 469: if(!Send_PS2(0x01))
 11917  031A  3001               	movlw	1
 11918  031B  318C  24DE  3181   	fcall	i1_Send_PS2
 11919  031E  3800               	iorlw	0
 11920  031F  1D03               	skipz
 11921  0320  2B09               	goto	i1l5508
 11922  0321                     i1l5506:	
 11923                           
 11924                           ;PS_2.c: 470: {
 11925                           ;PS_2.c: 471: Shift_Key = 1;
 11926  0321  0023               	movlb	3	; select bank3
 11927  0322  01EF               	clrf	_Shift_Key^(0+384)
 11928  0323  0AEF               	incf	_Shift_Key^(0+384),f
 11929  0324                     i1l5512:	
 11930                           
 11931                           ;PS_2.c: 476: }
 11932                           ;PS_2.c: 477: }
 11933                           ;PS_2.c: 478: }
 11934                           ;PS_2.c: 479: }
 11935                           ;PS_2.c: 480: if(PS_2_Read_Data_First == 0x14 )
 11936  0324  3014               	movlw	20
 11937  0325  0023               	movlb	3	; select bank3
 11938  0326  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11939  0327  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11940  0328  1D03               	skipz
 11941  0329  2B2D               	goto	i1l5516
 11942                           
 11943                           ;PS_2.c: 481: {
 11944                           ;PS_2.c: 482: RControl = 1;
 11945  032A  01ED               	clrf	_RControl^(0+384)
 11946  032B  0AED               	incf	_RControl^(0+384),f
 11947                           
 11948                           ;PS_2.c: 483: }
 11949  032C  2C04               	goto	i1l5610
 11950  032D                     i1l5516:	
 11951                           
 11952                           ;PS_2.c: 484: else if(PS_2_Read_Data_First == 0x11 )
 11953  032D  3011               	movlw	17
 11954  032E  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11955  032F  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11956  0330  1D03               	skipz
 11957  0331  2B35               	goto	i1l5520
 11958                           
 11959                           ;PS_2.c: 485: {
 11960                           ;PS_2.c: 486: RALT = 1;
 11961  0332  01EC               	clrf	_RALT^(0+384)
 11962  0333  0AEC               	incf	_RALT^(0+384),f
 11963                           
 11964                           ;PS_2.c: 487: }
 11965  0334  2C04               	goto	i1l5610
 11966  0335                     i1l5520:	
 11967                           
 11968                           ;PS_2.c: 488: else if(PS_2_Read_Data_First == 0xEE )
 11969  0335  30EE               	movlw	238
 11970  0336  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11971  0337  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11972  0338  1D03               	skipz
 11973  0339  2B3E               	goto	i1l5524
 11974                           
 11975                           ;PS_2.c: 489: {
 11976                           ;PS_2.c: 490: ECHO = 1;
 11977  033A  0024               	movlb	4	; select bank4
 11978  033B  01DF               	clrf	_ECHO^(0+512)
 11979  033C  0ADF               	incf	_ECHO^(0+512),f
 11980                           
 11981                           ;PS_2.c: 491: }
 11982  033D  2C04               	goto	i1l5610
 11983  033E                     i1l5524:	
 11984                           
 11985                           ;PS_2.c: 492: else if(PS_2_Read_Data_First == 0x58)
 11986  033E  3058               	movlw	88
 11987  033F  0023               	movlb	3	; select bank3
 11988  0340  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11989  0341  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11990  0342  1D03               	skipz
 11991  0343  2BC3               	goto	i1l5584
 11992                           
 11993                           ;PS_2.c: 493: {
 11994                           ;PS_2.c: 494: Caps_Lock_Key = 1;
 11995  0344  0021               	movlb	1	; select bank1
 11996  0345  01CC               	clrf	_Caps_Lock_Key^(0+128)
 11997  0346  0ACC               	incf	_Caps_Lock_Key^(0+128),f
 11998                           
 11999                           ;PS_2.c: 495: if(Caps_Lock_Key_old == 0)
 12000  0347  08CD               	movf	_Caps_Lock_Key_old^(0+128),f
 12001  0348  1D03               	skipz
 12002  0349  2C04               	goto	i1l5610
 12003                           
 12004                           ;PS_2.c: 496: {
 12005                           ;PS_2.c: 497: if(Caps_Lock)
 12006  034A  0023               	movlb	3	; select bank3
 12007  034B  0868               	movf	_Caps_Lock^(0+384),w
 12008  034C  1903               	btfsc	3,2
 12009  034D  2B88               	goto	i1l5558
 12010                           
 12011                           ;PS_2.c: 498: {
 12012                           ;PS_2.c: 499: if(Shift_Key)
 12013  034E  086F               	movf	_Shift_Key^(0+384),w
 12014  034F  1903               	btfsc	3,2
 12015  0350  2B6B               	goto	i1l5546
 12016                           
 12017                           ;PS_2.c: 500: {
 12018                           ;PS_2.c: 501: CapsCount=0;
 12019  0351  01E7               	clrf	_CapsCount^(0+384)
 12020  0352                     i1l5544:	
 12021                           ;PS_2.c: 502: while(CapsCount<10)
 12022                           
 12023  0352  300A               	movlw	10
 12024  0353  0267               	subwf	_CapsCount^(0+384),w
 12025  0354  1803               	btfsc	3,0
 12026  0355  2C04               	goto	i1l5610
 12027                           
 12028                           ;PS_2.c: 503: {
 12029                           ;PS_2.c: 504: if(!Send_PS2(0xED))
 12030  0356  30ED               	movlw	237
 12031  0357  318C  24DE  3181   	fcall	i1_Send_PS2
 12032  035A  3800               	iorlw	0
 12033  035B  1D03               	skipz
 12034  035C  2B64               	goto	i1l5542
 12035                           
 12036                           ;PS_2.c: 505: {
 12037                           ;PS_2.c: 506: if(!Send_PS2(0x01))
 12038  035D  3001               	movlw	1
 12039  035E  318C  24DE  3181   	fcall	i1_Send_PS2
 12040  0361  3800               	iorlw	0
 12041  0362  1903               	btfsc	3,2
 12042  0363  2B7E               	goto	i1l5552
 12043  0364                     i1l5542:	
 12044                           ;PS_2.c: 509: break;
 12045                           
 12046                           ;PS_2.c: 507: {
 12047                           ;PS_2.c: 508: Caps_Lock =0;
 12048                           
 12049                           
 12050                           ;PS_2.c: 510: }
 12051                           ;PS_2.c: 511: }
 12052                           ;PS_2.c: 512: CapsCount++;
 12053  0364  3001               	movlw	1
 12054  0365  0021               	movlb	1	; select bank1
 12055  0366  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12056  0367  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12057  0368  0023               	movlb	3	; select bank3
 12058  0369  07E7               	addwf	_CapsCount^(0+384),f
 12059  036A  2B52               	goto	i1l5544
 12060  036B                     i1l5546:	
 12061                           ;PS_2.c: 513: }
 12062                           ;PS_2.c: 514: }
 12063                           
 12064                           
 12065                           ;PS_2.c: 515: else
 12066                           ;PS_2.c: 516: {
 12067                           ;PS_2.c: 517: CapsCount=0;
 12068  036B  01E7               	clrf	_CapsCount^(0+384)
 12069  036C                     i1l5556:	
 12070                           ;PS_2.c: 518: while(CapsCount<10)
 12071                           
 12072  036C  300A               	movlw	10
 12073  036D  0267               	subwf	_CapsCount^(0+384),w
 12074  036E  1803               	btfsc	3,0
 12075  036F  2C04               	goto	i1l5610
 12076                           
 12077                           ;PS_2.c: 519: {
 12078                           ;PS_2.c: 520: if(!Send_PS2(0xED))
 12079  0370  30ED               	movlw	237
 12080  0371  318C  24DE  3181   	fcall	i1_Send_PS2
 12081  0374  3800               	iorlw	0
 12082  0375  1D03               	skipz
 12083  0376  2B81               	goto	i1l5554
 12084                           
 12085                           ;PS_2.c: 521: {
 12086                           ;PS_2.c: 522: if(!Send_PS2(0x00))
 12087  0377  3000               	movlw	0
 12088  0378  318C  24DE  3181   	fcall	i1_Send_PS2
 12089  037B  3800               	iorlw	0
 12090  037C  1D03               	skipz
 12091  037D  2B81               	goto	i1l5554
 12092  037E                     i1l5552:	
 12093                           
 12094                           ;PS_2.c: 523: {
 12095                           ;PS_2.c: 524: Caps_Lock =0;
 12096  037E  0023               	movlb	3	; select bank3
 12097  037F  01E8               	clrf	_Caps_Lock^(0+384)
 12098                           
 12099                           ;PS_2.c: 525: break;
 12100  0380  2C04               	goto	i1l5610
 12101  0381                     i1l5554:	
 12102                           
 12103                           ;PS_2.c: 526: }
 12104                           ;PS_2.c: 527: }
 12105                           ;PS_2.c: 528: CapsCount++;
 12106  0381  3001               	movlw	1
 12107  0382  0021               	movlb	1	; select bank1
 12108  0383  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12109  0384  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12110  0385  0023               	movlb	3	; select bank3
 12111  0386  07E7               	addwf	_CapsCount^(0+384),f
 12112  0387  2B6C               	goto	i1l5556
 12113  0388                     i1l5558:	
 12114                           ;PS_2.c: 529: }
 12115                           ;PS_2.c: 530: }
 12116                           ;PS_2.c: 531: }
 12117                           
 12118                           
 12119                           ;PS_2.c: 532: else
 12120                           ;PS_2.c: 533: {
 12121                           ;PS_2.c: 534: if(Shift_Key)
 12122  0388  086F               	movf	_Shift_Key^(0+384),w
 12123  0389  1903               	btfsc	3,2
 12124  038A  2BA5               	goto	i1l5572
 12125                           
 12126                           ;PS_2.c: 535: {
 12127                           ;PS_2.c: 536: CapsCount=0;
 12128  038B  01E7               	clrf	_CapsCount^(0+384)
 12129  038C                     i1l5570:	
 12130                           ;PS_2.c: 537: while(CapsCount<10)
 12131                           
 12132  038C  300A               	movlw	10
 12133  038D  0267               	subwf	_CapsCount^(0+384),w
 12134  038E  1803               	btfsc	3,0
 12135  038F  2C04               	goto	i1l5610
 12136                           
 12137                           ;PS_2.c: 538: {
 12138                           ;PS_2.c: 539: if(!Send_PS2(0xED))
 12139  0390  30ED               	movlw	237
 12140  0391  318C  24DE  3181   	fcall	i1_Send_PS2
 12141  0394  3800               	iorlw	0
 12142  0395  1D03               	skipz
 12143  0396  2B9E               	goto	i1l5568
 12144                           
 12145                           ;PS_2.c: 540: {
 12146                           ;PS_2.c: 541: if(!Send_PS2(0x05))
 12147  0397  3005               	movlw	5
 12148  0398  318C  24DE  3181   	fcall	i1_Send_PS2
 12149  039B  3800               	iorlw	0
 12150  039C  1903               	btfsc	3,2
 12151  039D  2BB8               	goto	i1l5578
 12152  039E                     i1l5568:	
 12153                           ;PS_2.c: 544: break;
 12154                           
 12155                           ;PS_2.c: 542: {
 12156                           ;PS_2.c: 543: Caps_Lock =1;
 12157                           
 12158                           
 12159                           ;PS_2.c: 545: }
 12160                           ;PS_2.c: 546: }
 12161                           ;PS_2.c: 547: CapsCount++;
 12162  039E  3001               	movlw	1
 12163  039F  0021               	movlb	1	; select bank1
 12164  03A0  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12165  03A1  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12166  03A2  0023               	movlb	3	; select bank3
 12167  03A3  07E7               	addwf	_CapsCount^(0+384),f
 12168  03A4  2B8C               	goto	i1l5570
 12169  03A5                     i1l5572:	
 12170                           ;PS_2.c: 548: }
 12171                           ;PS_2.c: 549: }
 12172                           
 12173                           
 12174                           ;PS_2.c: 550: else
 12175                           ;PS_2.c: 551: {
 12176                           ;PS_2.c: 552: CapsCount=0;
 12177  03A5  01E7               	clrf	_CapsCount^(0+384)
 12178  03A6                     i1l5582:	
 12179                           ;PS_2.c: 553: while(CapsCount<10)
 12180                           
 12181  03A6  300A               	movlw	10
 12182  03A7  0267               	subwf	_CapsCount^(0+384),w
 12183  03A8  1803               	btfsc	3,0
 12184  03A9  2C04               	goto	i1l5610
 12185                           
 12186                           ;PS_2.c: 554: {
 12187                           ;PS_2.c: 555: if(!Send_PS2(0xED))
 12188  03AA  30ED               	movlw	237
 12189  03AB  318C  24DE  3181   	fcall	i1_Send_PS2
 12190  03AE  3800               	iorlw	0
 12191  03AF  1D03               	skipz
 12192  03B0  2BBC               	goto	i1l5580
 12193                           
 12194                           ;PS_2.c: 556: {
 12195                           ;PS_2.c: 557: if(!Send_PS2(0x04))
 12196  03B1  3004               	movlw	4
 12197  03B2  318C  24DE  3181   	fcall	i1_Send_PS2
 12198  03B5  3800               	iorlw	0
 12199  03B6  1D03               	skipz
 12200  03B7  2BBC               	goto	i1l5580
 12201  03B8                     i1l5578:	
 12202                           
 12203                           ;PS_2.c: 558: {
 12204                           ;PS_2.c: 559: Caps_Lock =1;
 12205  03B8  0023               	movlb	3	; select bank3
 12206  03B9  01E8               	clrf	_Caps_Lock^(0+384)
 12207  03BA  0AE8               	incf	_Caps_Lock^(0+384),f
 12208                           
 12209                           ;PS_2.c: 560: break;
 12210  03BB  2C04               	goto	i1l5610
 12211  03BC                     i1l5580:	
 12212                           
 12213                           ;PS_2.c: 561: }
 12214                           ;PS_2.c: 562: }
 12215                           ;PS_2.c: 563: CapsCount++;
 12216  03BC  3001               	movlw	1
 12217  03BD  0021               	movlb	1	; select bank1
 12218  03BE  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12219  03BF  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12220  03C0  0023               	movlb	3	; select bank3
 12221  03C1  07E7               	addwf	_CapsCount^(0+384),f
 12222  03C2  2BA6               	goto	i1l5582
 12223  03C3                     i1l5584:	
 12224                           ;PS_2.c: 564: }
 12225                           ;PS_2.c: 565: }
 12226                           ;PS_2.c: 566: }
 12227                           ;PS_2.c: 567: }
 12228                           ;PS_2.c: 569: }
 12229                           
 12230                           
 12231                           ;PS_2.c: 570: else
 12232                           ;PS_2.c: 571: {
 12233                           ;PS_2.c: 572: if(Shift_Key ==1)
 12234  03C3  086F               	movf	_Shift_Key^(0+384),w
 12235  03C4  3A01               	xorlw	1
 12236  03C5  1D03               	skipz
 12237  03C6  2BE2               	goto	i1l5596
 12238                           
 12239                           ;PS_2.c: 573: {
 12240                           ;PS_2.c: 575: temp = Decode_Scan_Code_Shift(PS_2_Read_Data_First);
 12241  03C7  0861               	movf	_PS_2_Read_Data_First^(0+384),w
 12242  03C8  3199  212E  3181   	fcall	_Decode_Scan_Code_Shift
 12243  03CB  0021               	movlb	1	; select bank1
 12244  03CC  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12245  03CD  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12246  03CE  0023               	movlb	3	; select bank3
 12247  03CF  00E0               	movwf	Process_PS2_ScanCode@temp^(0+384)
 12248                           
 12249                           ;PS_2.c: 576: if(Caps_Lock)
 12250  03D0  0868               	movf	_Caps_Lock^(0+384),w
 12251  03D1  1903               	btfsc	3,2
 12252  03D2  2BF8               	goto	i1l5606
 12253                           
 12254                           ;PS_2.c: 577: {
 12255                           ;PS_2.c: 579: if(temp >= 'A' && temp <= 'Z')
 12256  03D3  3041               	movlw	65
 12257  03D4  0260               	subwf	Process_PS2_ScanCode@temp^(0+384),w
 12258  03D5  1C03               	skipc
 12259  03D6  2BF8               	goto	i1l5606
 12260  03D7  305B               	movlw	91
 12261  03D8  0260               	subwf	Process_PS2_ScanCode@temp^(0+384),w
 12262  03D9  1803               	skipnc
 12263  03DA  2BF8               	goto	i1l5606
 12264                           
 12265                           ;PS_2.c: 580: {
 12266                           ;PS_2.c: 581: temp += 32;
 12267  03DB  3020               	movlw	32
 12268  03DC  0021               	movlb	1	; select bank1
 12269  03DD  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12270  03DE  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12271  03DF  0023               	movlb	3	; select bank3
 12272  03E0  07E0               	addwf	Process_PS2_ScanCode@temp^(0+384),f
 12273                           
 12274                           ;PS_2.c: 582: }
 12275                           ;PS_2.c: 583: }
 12276                           ;PS_2.c: 584: }
 12277  03E1  2BF8               	goto	i1l5606
 12278  03E2                     i1l5596:	
 12279                           
 12280                           ;PS_2.c: 585: else
 12281                           ;PS_2.c: 586: {
 12282                           ;PS_2.c: 587: temp = Decode_Scan_Code(PS_2_Read_Data_First);
 12283  03E2  0861               	movf	_PS_2_Read_Data_First^(0+384),w
 12284  03E3  3199  210A  3181   	fcall	_Decode_Scan_Code
 12285  03E6  0021               	movlb	1	; select bank1
 12286  03E7  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12287  03E8  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12288  03E9  0023               	movlb	3	; select bank3
 12289  03EA  00E0               	movwf	Process_PS2_ScanCode@temp^(0+384)
 12290                           
 12291                           ;PS_2.c: 588: if(Caps_Lock)
 12292  03EB  0868               	movf	_Caps_Lock^(0+384),w
 12293  03EC  1903               	btfsc	3,2
 12294  03ED  2BF8               	goto	i1l5606
 12295                           
 12296                           ;PS_2.c: 589: {
 12297                           ;PS_2.c: 591: if(temp >= 'a' && temp <= 'z')
 12298  03EE  3061               	movlw	97
 12299  03EF  0260               	subwf	Process_PS2_ScanCode@temp^(0+384),w
 12300  03F0  1C03               	skipc
 12301  03F1  2BF8               	goto	i1l5606
 12302  03F2  307B               	movlw	123
 12303  03F3  0260               	subwf	Process_PS2_ScanCode@temp^(0+384),w
 12304  03F4  1803               	skipnc
 12305  03F5  2BF8               	goto	i1l5606
 12306                           
 12307                           ;PS_2.c: 592: {
 12308                           ;PS_2.c: 593: temp -= 32;
 12309  03F6  3020               	movlw	32
 12310  03F7  02E0               	subwf	Process_PS2_ScanCode@temp^(0+384),f
 12311  03F8                     i1l5606:	
 12312                           
 12313                           ;PS_2.c: 594: }
 12314                           ;PS_2.c: 595: }
 12315                           ;PS_2.c: 596: }
 12316                           ;PS_2.c: 597: if(!temp)
 12317  03F8  08E0               	movf	Process_PS2_ScanCode@temp^(0+384),f
 12318  03F9  1D03               	skipz
 12319  03FA  2C04               	goto	i1l5610
 12320                           
 12321                           ;PS_2.c: 598: {
 12322                           ;PS_2.c: 600: temp = Decode_Scan_Code_Function(PS_2_Read_Data_First);
 12323  03FB  0861               	movf	_PS_2_Read_Data_First^(0+384),w
 12324  03FC  3198  20E9  3181   	fcall	_Decode_Scan_Code_Function
 12325  03FF  0021               	movlb	1	; select bank1
 12326  0400  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12327  0401  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12328  0402  0023               	movlb	3	; select bank3
 12329  0403  00E0               	movwf	Process_PS2_ScanCode@temp^(0+384)
 12330  0404                     i1l5610:	
 12331                           
 12332                           ;PS_2.c: 601: }
 12333                           ;PS_2.c: 602: }
 12334                           ;PS_2.c: 603: }
 12335                           ;PS_2.c: 605: if(((RControl || LControl) + (LALT || RALT) + Delete) == 3)
 12336  0404  0023               	movlb	3	; select bank3
 12337  0405  01DE               	clrf	_Process_PS2_ScanCode$853^(0+384)
 12338  0406  0ADE               	incf	_Process_PS2_ScanCode$853^(0+384),f
 12339  0407  08E9               	movf	_LALT^(0+384),f
 12340  0408  1D03               	skipz
 12341  0409  2C0E               	goto	i1l5618
 12342  040A  08EC               	movf	_RALT^(0+384),f
 12343  040B  1D03               	skipz
 12344  040C  2C0E               	goto	i1l5618
 12345  040D  01DE               	clrf	_Process_PS2_ScanCode$853^(0+384)
 12346  040E                     i1l5618:	
 12347  040E  01DF               	clrf	_Process_PS2_ScanCode$854^(0+384)
 12348  040F  0ADF               	incf	_Process_PS2_ScanCode$854^(0+384),f
 12349  0410  08ED               	movf	_RControl^(0+384),f
 12350  0411  1D03               	skipz
 12351  0412  2C19               	goto	i1l5626
 12352  0413  0021               	movlb	1	; select bank1
 12353  0414  08CF               	movf	_LControl^(0+128),f
 12354  0415  1D03               	skipz
 12355  0416  2C19               	goto	i1l5626
 12356  0417  0023               	movlb	3	; select bank3
 12357  0418  01DF               	clrf	_Process_PS2_ScanCode$854^(0+384)
 12358  0419                     i1l5626:	
 12359  0419  0021               	movlb	1	; select bank1
 12360  041A  084E               	movf	_Delete^(0+128),w
 12361  041B  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12362  041C  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 12363  041D  0023               	movlb	3	; select bank3
 12364  041E  085F               	movf	_Process_PS2_ScanCode$854^(0+384),w
 12365  041F  075E               	addwf	_Process_PS2_ScanCode$853^(0+384),w
 12366  0420  0021               	movlb	1	; select bank1
 12367  0421  00BE               	movwf	(??_Process_PS2_ScanCode+2)^(0+128)
 12368  0422  01BF               	clrf	((??_Process_PS2_ScanCode+2)^(0+128)+1)
 12369  0423  0DBF               	rlf	(??_Process_PS2_ScanCode+3)^(0+128),f
 12370  0424  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12371  0425  073E               	addwf	(??_Process_PS2_ScanCode+2)^(0+128),w
 12372  0426  00C0               	movwf	(??_Process_PS2_ScanCode+4)^(0+128)
 12373  0427  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 12374  0428  3D3F               	addwfc	(??_Process_PS2_ScanCode+3)^(0+128),w
 12375  0429  00C1               	movwf	(??_Process_PS2_ScanCode+5)^(0+128)
 12376  042A  3003               	movlw	3
 12377  042B  0640               	xorwf	(??_Process_PS2_ScanCode+4)^(0+128),w
 12378  042C  0441               	iorwf	(??_Process_PS2_ScanCode+5)^(0+128),w
 12379  042D  1D03               	skipz
 12380  042E  2CB1               	goto	i1l5670
 12381                           
 12382                           ;PS_2.c: 606: {
 12383                           ;PS_2.c: 608: UARTstringWAIT("\r\n");
 12384  042F  30FC               	movlw	low ((STR_14+16)| (0+32768))
 12385  0430  0020               	movlb	0	; select bank0
 12386  0431  00A1               	movwf	i1UARTstringWAIT@data
 12387  0432  3089               	movlw	high ((STR_14+16)| (0+32768))
 12388  0433  00A2               	movwf	i1UARTstringWAIT@data+1
 12389  0434  319B  2311  3181   	fcall	i1_UARTstringWAIT
 12390                           
 12391                           ;PS_2.c: 609: delayUS(15000);
 12392  0437  3000               	movlw	0
 12393  0438  00F3               	movwf	i1delayUS@US+3
 12394  0439  3000               	movlw	0
 12395  043A  00F2               	movwf	i1delayUS@US+2
 12396  043B  303A               	movlw	58
 12397  043C  00F1               	movwf	i1delayUS@US+1
 12398  043D  3098               	movlw	152
 12399  043E  00F0               	movwf	i1delayUS@US
 12400  043F  319B  2375  3181   	fcall	i1_delayUS
 12401                           
 12402                           ;PS_2.c: 610: if(!BAUDMODE)
 12403  0442  0021               	movlb	1	; select bank1
 12404  0443  08CB               	movf	_BAUDMODE^(0+128),f
 12405  0444  1D03               	skipz
 12406  0445  2C6D               	goto	i1l5646
 12407                           
 12408                           ;PS_2.c: 611: {
 12409                           ;PS_2.c: 612: BaudTyped =0;
 12410  0446  3000               	movlw	0
 12411  0447  00C8               	movwf	(_BaudTyped+3)^(0+128)
 12412  0448  3000               	movlw	0
 12413  0449  00C7               	movwf	(_BaudTyped+2)^(0+128)
 12414  044A  3000               	movlw	0
 12415  044B  00C6               	movwf	(_BaudTyped+1)^(0+128)
 12416  044C  3000               	movlw	0
 12417  044D  00C5               	movwf	_BaudTyped^(0+128)
 12418                           
 12419                           ;PS_2.c: 613: ParityTyped =0;
 12420  044E  0023               	movlb	3	; select bank3
 12421  044F  01EB               	clrf	_ParityTyped^(0+384)
 12422                           
 12423                           ;PS_2.c: 614: BAUDMODE = 1;
 12424  0450  0021               	movlb	1	; select bank1
 12425  0451  01CB               	clrf	_BAUDMODE^(0+128)
 12426  0452  0ACB               	incf	_BAUDMODE^(0+128),f
 12427                           
 12428                           ;PS_2.c: 615: UARTstringWAIT("Enter Baud rate \r\n");
 12429  0453  30EC               	movlw	low (STR_14| (0+32768))
 12430  0454  0020               	movlb	0	; select bank0
 12431  0455  00A1               	movwf	i1UARTstringWAIT@data
 12432  0456  3089               	movlw	high (STR_14| (0+32768))
 12433  0457  00A2               	movwf	i1UARTstringWAIT@data+1
 12434  0458  319B  2311  3181   	fcall	i1_UARTstringWAIT
 12435                           
 12436                           ;PS_2.c: 616: delayUS(15000);
 12437  045B  3000               	movlw	0
 12438  045C  00F3               	movwf	i1delayUS@US+3
 12439  045D  3000               	movlw	0
 12440  045E  00F2               	movwf	i1delayUS@US+2
 12441  045F  303A               	movlw	58
 12442  0460  00F1               	movwf	i1delayUS@US+1
 12443  0461  3098               	movlw	152
 12444  0462  00F0               	movwf	i1delayUS@US
 12445  0463  319B  2375  3181   	fcall	i1_delayUS
 12446                           
 12447                           ;PS_2.c: 617: UARTchar('>' , 0, 0);
 12448  0466  01F8               	clrf	i1UARTchar@override
 12449  0467  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12450  0468  303E               	movlw	62
 12451  0469  319F  2740  3181   	fcall	i1_UARTchar
 12452                           
 12453                           ;PS_2.c: 619: }
 12454  046C  2CA8               	goto	i1l5660
 12455  046D                     i1l5646:	
 12456                           
 12457                           ;PS_2.c: 620: else
 12458                           ;PS_2.c: 621: {
 12459                           ;PS_2.c: 622: BaudTyped = 9600;
 12460  046D  3000               	movlw	0
 12461  046E  0021               	movlb	1	; select bank1
 12462  046F  00C8               	movwf	(_BaudTyped+3)^(0+128)
 12463  0470  3000               	movlw	0
 12464  0471  00C7               	movwf	(_BaudTyped+2)^(0+128)
 12465  0472  3025               	movlw	37
 12466  0473  00C6               	movwf	(_BaudTyped+1)^(0+128)
 12467  0474  3080               	movlw	128
 12468  0475  00C5               	movwf	_BaudTyped^(0+128)
 12469                           
 12470                           ;PS_2.c: 623: UARTstringWAIT("Baud Reset to 9600");
 12471  0476  30FF               	movlw	low (STR_15| (0+32768))
 12472  0477  0020               	movlb	0	; select bank0
 12473  0478  00A1               	movwf	i1UARTstringWAIT@data
 12474  0479  3089               	movlw	high (STR_15| (0+32768))
 12475  047A  00A2               	movwf	i1UARTstringWAIT@data+1
 12476  047B  319B  2311  3181   	fcall	i1_UARTstringWAIT
 12477                           
 12478                           ;PS_2.c: 624: UARTstringWAIT(NoParityMSG);
 12479  047E  3026               	movlw	low (_NoParityMSG| (0+32768))
 12480  047F  0020               	movlb	0	; select bank0
 12481  0480  00A1               	movwf	i1UARTstringWAIT@data
 12482  0481  3089               	movlw	high (_NoParityMSG| (0+32768))
 12483  0482  00A2               	movwf	i1UARTstringWAIT@data+1
 12484  0483  319B  2311  3181   	fcall	i1_UARTstringWAIT
 12485                           
 12486                           ;PS_2.c: 625: UARTstringWAIT("\r\n");
 12487  0486  30FC               	movlw	low ((STR_14+16)| (0+32768))
 12488  0487  0020               	movlb	0	; select bank0
 12489  0488  00A1               	movwf	i1UARTstringWAIT@data
 12490  0489  3089               	movlw	high ((STR_14+16)| (0+32768))
 12491  048A  00A2               	movwf	i1UARTstringWAIT@data+1
 12492  048B  319B  2311  3181   	fcall	i1_UARTstringWAIT
 12493                           
 12494                           ;PS_2.c: 626: delayUS(15000);
 12495  048E  3000               	movlw	0
 12496  048F  00F3               	movwf	i1delayUS@US+3
 12497  0490  3000               	movlw	0
 12498  0491  00F2               	movwf	i1delayUS@US+2
 12499  0492  303A               	movlw	58
 12500  0493  00F1               	movwf	i1delayUS@US+1
 12501  0494  3098               	movlw	152
 12502  0495  00F0               	movwf	i1delayUS@US
 12503  0496  319B  2375  3181   	fcall	i1_delayUS
 12504                           
 12505                           ;PS_2.c: 627: SetBaud(BaudTyped, 0);
 12506  0499  0021               	movlb	1	; select bank1
 12507  049A  0848               	movf	(_BaudTyped+3)^(0+128),w
 12508  049B  00B2               	movwf	(SetBaud@Baud+3)^(0+128)
 12509  049C  0847               	movf	(_BaudTyped+2)^(0+128),w
 12510  049D  00B1               	movwf	(SetBaud@Baud+2)^(0+128)
 12511  049E  0846               	movf	(_BaudTyped+1)^(0+128),w
 12512  049F  00B0               	movwf	(SetBaud@Baud+1)^(0+128)
 12513  04A0  0845               	movf	_BaudTyped^(0+128),w
 12514  04A1  00AF               	movwf	SetBaud@Baud^(0+128)
 12515  04A2  01B3               	clrf	SetBaud@Parity^(0+128)
 12516  04A3  318B  2365  3181   	fcall	_SetBaud
 12517                           
 12518                           ;PS_2.c: 628: BAUDMODE = 0;
 12519  04A6  0021               	movlb	1	; select bank1
 12520  04A7  01CB               	clrf	_BAUDMODE^(0+128)
 12521  04A8                     i1l5660:	
 12522                           
 12523                           ;PS_2.c: 629: }
 12524                           ;PS_2.c: 630: RControl =0;
 12525  04A8  0023               	movlb	3	; select bank3
 12526  04A9  01ED               	clrf	_RControl^(0+384)
 12527                           
 12528                           ;PS_2.c: 631: LControl =0;
 12529  04AA  0021               	movlb	1	; select bank1
 12530  04AB  01CF               	clrf	_LControl^(0+128)
 12531                           
 12532                           ;PS_2.c: 632: LALT =0;
 12533  04AC  0023               	movlb	3	; select bank3
 12534  04AD  01E9               	clrf	_LALT^(0+384)
 12535                           
 12536                           ;PS_2.c: 633: RALT =0;
 12537  04AE  01EC               	clrf	_RALT^(0+384)
 12538                           
 12539                           ;PS_2.c: 634: Delete =0;
 12540  04AF  0021               	movlb	1	; select bank1
 12541  04B0  01CE               	clrf	_Delete^(0+128)
 12542  04B1                     i1l5670:	
 12543                           
 12544                           ;PS_2.c: 635: }
 12545                           ;PS_2.c: 637: if(temp)
 12546  04B1  0023               	movlb	3	; select bank3
 12547  04B2  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12548  04B3  1903               	btfsc	3,2
 12549  04B4  2E45               	goto	i1l5766
 12550                           
 12551                           ;PS_2.c: 638: {
 12552                           ;PS_2.c: 640: if(temp == 0x01)
 12553  04B5  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12554  04B6  3A01               	xorlw	1
 12555  04B7  1D03               	skipz
 12556  04B8  2CC4               	goto	i1l5676
 12557                           
 12558                           ;PS_2.c: 641: {
 12559                           ;PS_2.c: 643: UART_send_break();
 12560  04B9  3190  2000  3181   	fcall	_UART_send_break
 12561                           
 12562                           ;PS_2.c: 644: UART_send_break_timed(100000);
 12563  04BC  30A0               	movlw	160
 12564  04BD  00FA               	movwf	UART_send_break_timed@US
 12565  04BE  3086               	movlw	134
 12566  04BF  00FB               	movwf	UART_send_break_timed@US+1
 12567  04C0  3199  21B0  3181   	fcall	_UART_send_break_timed
 12568  04C3  2E44               	goto	i1l792
 12569  04C4                     i1l5676:	
 12570                           ;PS_2.c: 645: }
 12571                           
 12572                           
 12573                           ;PS_2.c: 646: else
 12574                           ;PS_2.c: 647: {
 12575                           ;PS_2.c: 648: if(!BAUDMODE)
 12576  04C4  0021               	movlb	1	; select bank1
 12577  04C5  08CB               	movf	_BAUDMODE^(0+128),f
 12578  04C6  1D03               	skipz
 12579  04C7  2CF1               	goto	i1l5688
 12580                           
 12581                           ;PS_2.c: 649: {
 12582                           ;PS_2.c: 650: UARTchar(temp, 0, 0);
 12583  04C8  01F8               	clrf	i1UARTchar@override
 12584  04C9  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12585  04CA  0023               	movlb	3	; select bank3
 12586  04CB  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12587  04CC  319F  2740  3181   	fcall	i1_UARTchar
 12588                           
 12589                           ;PS_2.c: 651: if(temp == '\r')
 12590  04CF  0023               	movlb	3	; select bank3
 12591  04D0  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12592  04D1  3A0D               	xorlw	13
 12593  04D2  1D03               	skipz
 12594  04D3  2E45               	goto	i1l5766
 12595                           
 12596                           ;PS_2.c: 652: {
 12597                           ;PS_2.c: 653: delayUS(5000);
 12598  04D4  3000               	movlw	0
 12599  04D5  00F3               	movwf	i1delayUS@US+3
 12600  04D6  3000               	movlw	0
 12601  04D7  00F2               	movwf	i1delayUS@US+2
 12602  04D8  3013               	movlw	19
 12603  04D9  00F1               	movwf	i1delayUS@US+1
 12604  04DA  3088               	movlw	136
 12605  04DB  00F0               	movwf	i1delayUS@US
 12606  04DC  319B  2375  3181   	fcall	i1_delayUS
 12607                           
 12608                           ;PS_2.c: 654: UARTchar('\n', 0, 0);
 12609  04DF  01F8               	clrf	i1UARTchar@override
 12610  04E0  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12611  04E1  300A               	movlw	10
 12612  04E2  319F  2740  3181   	fcall	i1_UARTchar
 12613                           
 12614                           ;PS_2.c: 655: delayUS(15000);
 12615  04E5  3000               	movlw	0
 12616  04E6  00F3               	movwf	i1delayUS@US+3
 12617  04E7  3000               	movlw	0
 12618  04E8  00F2               	movwf	i1delayUS@US+2
 12619  04E9  303A               	movlw	58
 12620  04EA  00F1               	movwf	i1delayUS@US+1
 12621  04EB  3098               	movlw	152
 12622  04EC  00F0               	movwf	i1delayUS@US
 12623  04ED  319B  2375  3181   	fcall	i1_delayUS
 12624  04F0  2E44               	goto	i1l792
 12625  04F1                     i1l5688:	
 12626                           ;PS_2.c: 656: }
 12627                           ;PS_2.c: 657: }
 12628                           
 12629                           
 12630                           ;PS_2.c: 658: else
 12631                           ;PS_2.c: 659: {
 12632                           ;PS_2.c: 660: if(ISNUMBER(temp))
 12633  04F1  0023               	movlb	3	; select bank3
 12634  04F2  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12635  04F3  3198  20BF  3181   	fcall	_ISNUMBER
 12636  04F6  3A00               	xorlw	0
 12637  04F7  1903               	skipnz
 12638  04F8  2D38               	goto	i1l5696
 12639                           
 12640                           ;PS_2.c: 661: {
 12641                           ;PS_2.c: 662: BaudTyped*=10;
 12642  04F9  3000               	movlw	0
 12643  04FA  00F3               	movwf	___lmul@multiplier+3
 12644  04FB  3000               	movlw	0
 12645  04FC  00F2               	movwf	___lmul@multiplier+2
 12646  04FD  3000               	movlw	0
 12647  04FE  00F1               	movwf	___lmul@multiplier+1
 12648  04FF  300A               	movlw	10
 12649  0500  00F0               	movwf	___lmul@multiplier
 12650  0501  0021               	movlb	1	; select bank1
 12651  0502  0848               	movf	(_BaudTyped+3)^(0+128),w
 12652  0503  00F7               	movwf	___lmul@multiplicand+3
 12653  0504  0847               	movf	(_BaudTyped+2)^(0+128),w
 12654  0505  00F6               	movwf	___lmul@multiplicand+2
 12655  0506  0846               	movf	(_BaudTyped+1)^(0+128),w
 12656  0507  00F5               	movwf	___lmul@multiplicand+1
 12657  0508  0845               	movf	_BaudTyped^(0+128),w
 12658  0509  00F4               	movwf	___lmul@multiplicand
 12659  050A  319A  2281  3181   	fcall	___lmul
 12660  050D  0873               	movf	?___lmul+3,w
 12661  050E  0021               	movlb	1	; select bank1
 12662  050F  00C8               	movwf	(_BaudTyped+3)^(0+128)
 12663  0510  0872               	movf	?___lmul+2,w
 12664  0511  00C7               	movwf	(_BaudTyped+2)^(0+128)
 12665  0512  0871               	movf	?___lmul+1,w
 12666  0513  00C6               	movwf	(_BaudTyped+1)^(0+128)
 12667  0514  0870               	movf	?___lmul,w
 12668  0515  00C5               	movwf	_BaudTyped^(0+128)
 12669                           
 12670                           ;PS_2.c: 663: BaudTyped += temp - 48;
 12671  0516  0023               	movlb	3	; select bank3
 12672  0517  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12673  0518  3ED0               	addlw	208
 12674  0519  0021               	movlb	1	; select bank1
 12675  051A  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12676  051B  30FF               	movlw	255
 12677  051C  1803               	skipnc
 12678  051D  3000               	movlw	0
 12679  051E  00BD               	movwf	(??_Process_PS2_ScanCode^(0+128)+1)
 12680  051F  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12681  0520  00BE               	movwf	(??_Process_PS2_ScanCode+2)^(0+128)
 12682  0521  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 12683  0522  00BF               	movwf	((??_Process_PS2_ScanCode+2)^(0+128)+1)
 12684  0523  3000               	movlw	0
 12685  0524  1BBF               	btfsc	((??_Process_PS2_ScanCode+2)^(0+128)+1),7
 12686  0525  30FF               	movlw	255
 12687  0526  00C0               	movwf	((??_Process_PS2_ScanCode+2)^(0+128)+2)
 12688  0527  00C1               	movwf	((??_Process_PS2_ScanCode+2)^(0+128)+3)
 12689  0528  083E               	movf	(??_Process_PS2_ScanCode+2)^(0+128),w
 12690  0529  07C5               	addwf	_BaudTyped^(0+128),f
 12691  052A  083F               	movf	(??_Process_PS2_ScanCode+3)^(0+128),w
 12692  052B  3DC6               	addwfc	(_BaudTyped+1)^(0+128),f
 12693  052C  0840               	movf	(??_Process_PS2_ScanCode+4)^(0+128),w
 12694  052D  3DC7               	addwfc	(_BaudTyped+2)^(0+128),f
 12695  052E  0841               	movf	(??_Process_PS2_ScanCode+5)^(0+128),w
 12696  052F  3DC8               	addwfc	(_BaudTyped+3)^(0+128),f
 12697                           
 12698                           ;PS_2.c: 664: UARTchar(temp, 0, 0);
 12699  0530  01F8               	clrf	i1UARTchar@override
 12700  0531  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12701  0532  0023               	movlb	3	; select bank3
 12702  0533  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12703  0534  319F  2740  3181   	fcall	i1_UARTchar
 12704  0537  2E44               	goto	i1l792
 12705  0538                     i1l5696:	
 12706                           ;PS_2.c: 665: }
 12707                           
 12708                           
 12709                           ;PS_2.c: 666: else if(temp == 'o' || temp == 'O')
 12710  0538  0023               	movlb	3	; select bank3
 12711  0539  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12712  053A  3A6F               	xorlw	111
 12713  053B  1903               	skipnz
 12714  053C  2D41               	goto	i1l800
 12715  053D  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12716  053E  3A4F               	xorlw	79
 12717  053F  1D03               	skipz
 12718  0540  2D4A               	goto	i1l5702
 12719  0541                     i1l800:	
 12720                           
 12721                           ;PS_2.c: 667: {
 12722                           ;PS_2.c: 668: ParityTyped = 1;
 12723  0541  01EB               	clrf	_ParityTyped^(0+384)
 12724  0542  0AEB               	incf	_ParityTyped^(0+384),f
 12725                           
 12726                           ;PS_2.c: 669: UARTchar(temp, 0, 0);
 12727  0543  01F8               	clrf	i1UARTchar@override
 12728  0544  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12729  0545  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12730  0546  319F  2740  3181   	fcall	i1_UARTchar
 12731  0549  2E44               	goto	i1l792
 12732  054A                     i1l5702:	
 12733                           ;PS_2.c: 670: }
 12734                           
 12735                           
 12736                           ;PS_2.c: 671: else if(temp == 'e' || temp == 'E')
 12737  054A  0023               	movlb	3	; select bank3
 12738  054B  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12739  054C  3A65               	xorlw	101
 12740  054D  1903               	skipnz
 12741  054E  2D53               	goto	i1l5706
 12742  054F  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12743  0550  3A45               	xorlw	69
 12744  0551  1D03               	skipz
 12745  0552  2D60               	goto	i1l5710
 12746  0553                     i1l5706:	
 12747                           
 12748                           ;PS_2.c: 672: {
 12749                           ;PS_2.c: 673: ParityTyped = 2;
 12750  0553  3002               	movlw	2
 12751  0554  0021               	movlb	1	; select bank1
 12752  0555  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12753  0556  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12754  0557  0023               	movlb	3	; select bank3
 12755  0558  00EB               	movwf	_ParityTyped^(0+384)
 12756                           
 12757                           ;PS_2.c: 674: UARTchar(temp, 0, 0);
 12758  0559  01F8               	clrf	i1UARTchar@override
 12759  055A  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12760  055B  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12761  055C  319F  2740  3181   	fcall	i1_UARTchar
 12762  055F  2E44               	goto	i1l792
 12763  0560                     i1l5710:	
 12764                           ;PS_2.c: 675: }
 12765                           
 12766                           
 12767                           ;PS_2.c: 676: else if(temp == 'm' || temp == 'M')
 12768  0560  0023               	movlb	3	; select bank3
 12769  0561  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12770  0562  3A6D               	xorlw	109
 12771  0563  1903               	skipnz
 12772  0564  2D69               	goto	i1l5714
 12773  0565  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12774  0566  3A4D               	xorlw	77
 12775  0567  1D03               	skipz
 12776  0568  2D76               	goto	i1l5718
 12777  0569                     i1l5714:	
 12778                           
 12779                           ;PS_2.c: 677: {
 12780                           ;PS_2.c: 678: ParityTyped = 3;
 12781  0569  3003               	movlw	3
 12782  056A  0021               	movlb	1	; select bank1
 12783  056B  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12784  056C  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12785  056D  0023               	movlb	3	; select bank3
 12786  056E  00EB               	movwf	_ParityTyped^(0+384)
 12787                           
 12788                           ;PS_2.c: 679: UARTchar(temp, 0, 0);
 12789  056F  01F8               	clrf	i1UARTchar@override
 12790  0570  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12791  0571  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12792  0572  319F  2740  3181   	fcall	i1_UARTchar
 12793  0575  2E44               	goto	i1l792
 12794  0576                     i1l5718:	
 12795                           ;PS_2.c: 680: }
 12796                           
 12797                           
 12798                           ;PS_2.c: 681: else if(temp == 's' || temp == 'S')
 12799  0576  0023               	movlb	3	; select bank3
 12800  0577  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12801  0578  3A73               	xorlw	115
 12802  0579  1903               	skipnz
 12803  057A  2D7F               	goto	i1l5722
 12804  057B  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12805  057C  3A53               	xorlw	83
 12806  057D  1D03               	skipz
 12807  057E  2D8C               	goto	i1l5726
 12808  057F                     i1l5722:	
 12809                           
 12810                           ;PS_2.c: 682: {
 12811                           ;PS_2.c: 683: ParityTyped = 4;
 12812  057F  3004               	movlw	4
 12813  0580  0021               	movlb	1	; select bank1
 12814  0581  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12815  0582  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12816  0583  0023               	movlb	3	; select bank3
 12817  0584  00EB               	movwf	_ParityTyped^(0+384)
 12818                           
 12819                           ;PS_2.c: 684: UARTchar(temp, 0, 0);
 12820  0585  01F8               	clrf	i1UARTchar@override
 12821  0586  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12822  0587  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12823  0588  319F  2740  3181   	fcall	i1_UARTchar
 12824  058B  2E44               	goto	i1l792
 12825  058C                     i1l5726:	
 12826                           ;PS_2.c: 685: }
 12827                           
 12828                           
 12829                           ;PS_2.c: 686: else if(temp == '\r')
 12830  058C  0023               	movlb	3	; select bank3
 12831  058D  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12832  058E  3A0D               	xorlw	13
 12833  058F  1D03               	skipz
 12834  0590  2E45               	goto	i1l5766
 12835                           
 12836                           ;PS_2.c: 687: {
 12837                           ;PS_2.c: 688: UARTstringWAIT("\r\n");
 12838  0591  30FC               	movlw	low ((STR_14+16)| (0+32768))
 12839  0592  0020               	movlb	0	; select bank0
 12840  0593  00A1               	movwf	i1UARTstringWAIT@data
 12841  0594  3089               	movlw	high ((STR_14+16)| (0+32768))
 12842  0595  00A2               	movwf	i1UARTstringWAIT@data+1
 12843  0596  319B  2311  3181   	fcall	i1_UARTstringWAIT
 12844                           
 12845                           ;PS_2.c: 689: delayUS(15000);
 12846  0599  3000               	movlw	0
 12847  059A  00F3               	movwf	i1delayUS@US+3
 12848  059B  3000               	movlw	0
 12849  059C  00F2               	movwf	i1delayUS@US+2
 12850  059D  303A               	movlw	58
 12851  059E  00F1               	movwf	i1delayUS@US+1
 12852  059F  3098               	movlw	152
 12853  05A0  00F0               	movwf	i1delayUS@US
 12854  05A1  319B  2375  3181   	fcall	i1_delayUS
 12855                           
 12856                           ;PS_2.c: 690: if(BaudTyped >=2400 && BaudTyped <= 115200)
 12857  05A4  3000               	movlw	0
 12858  05A5  0021               	movlb	1	; select bank1
 12859  05A6  0248               	subwf	(_BaudTyped+3)^(0+128),w
 12860  05A7  1D03               	skipz
 12861  05A8  2DB3               	goto	u725_25
 12862  05A9  3000               	movlw	0
 12863  05AA  0247               	subwf	(_BaudTyped+2)^(0+128),w
 12864  05AB  1D03               	skipz
 12865  05AC  2DB3               	goto	u725_25
 12866  05AD  3009               	movlw	9
 12867  05AE  0246               	subwf	(_BaudTyped+1)^(0+128),w
 12868  05AF  1D03               	skipz
 12869  05B0  2DB3               	goto	u725_25
 12870  05B1  3060               	movlw	96
 12871  05B2  0245               	subwf	_BaudTyped^(0+128),w
 12872  05B3                     u725_25:	
 12873  05B3  1C03               	skipc
 12874  05B4  2E2F               	goto	i1l5760
 12875  05B5  3000               	movlw	0
 12876  05B6  0248               	subwf	(_BaudTyped+3)^(0+128),w
 12877  05B7  1D03               	skipz
 12878  05B8  2DC3               	goto	u726_25
 12879  05B9  3001               	movlw	1
 12880  05BA  0247               	subwf	(_BaudTyped+2)^(0+128),w
 12881  05BB  1D03               	skipz
 12882  05BC  2DC3               	goto	u726_25
 12883  05BD  30C2               	movlw	194
 12884  05BE  0246               	subwf	(_BaudTyped+1)^(0+128),w
 12885  05BF  1D03               	skipz
 12886  05C0  2DC3               	goto	u726_25
 12887  05C1  3001               	movlw	1
 12888  05C2  0245               	subwf	_BaudTyped^(0+128),w
 12889  05C3                     u726_25:	
 12890  05C3  1803               	skipnc
 12891  05C4  2E2F               	goto	i1l5760
 12892                           
 12893                           ;PS_2.c: 691: {
 12894                           ;PS_2.c: 692: sprintf(buf,"Baud will be set to %lu",BaudTyped);
 12895  05C5  30AB               	movlw	low (STR_18| (0+32768))
 12896  05C6  0020               	movlb	0	; select bank0
 12897  05C7  00AA               	movwf	sprintf@f
 12898  05C8  3089               	movlw	high (STR_18| (0+32768))
 12899  05C9  00AB               	movwf	sprintf@f+1
 12900  05CA  0021               	movlb	1	; select bank1
 12901  05CB  0848               	movf	(_BaudTyped+3)^(0+128),w
 12902  05CC  0020               	movlb	0	; select bank0
 12903  05CD  00AF               	movwf	?_sprintf+5
 12904  05CE  0021               	movlb	1	; select bank1
 12905  05CF  0847               	movf	(_BaudTyped+2)^(0+128),w
 12906  05D0  0020               	movlb	0	; select bank0
 12907  05D1  00AE               	movwf	?_sprintf+4
 12908  05D2  0021               	movlb	1	; select bank1
 12909  05D3  0846               	movf	(_BaudTyped+1)^(0+128),w
 12910  05D4  0020               	movlb	0	; select bank0
 12911  05D5  00AD               	movwf	?_sprintf+3
 12912  05D6  0021               	movlb	1	; select bank1
 12913  05D7  0845               	movf	_BaudTyped^(0+128),w
 12914  05D8  0020               	movlb	0	; select bank0
 12915  05D9  00AC               	movwf	?_sprintf+2
 12916  05DA  30A0               	movlw	Process_PS2_ScanCode@buf& (0+255)
 12917  05DB  3197  2707  3181   	fcall	_sprintf
 12918                           
 12919                           ;PS_2.c: 693: UARTstringWAIT(buf);
 12920  05DE  30A0               	movlw	low Process_PS2_ScanCode@buf
 12921  05DF  0020               	movlb	0	; select bank0
 12922  05E0  00A1               	movwf	i1UARTstringWAIT@data
 12923  05E1  3001               	movlw	high Process_PS2_ScanCode@buf
 12924  05E2  00A2               	movwf	i1UARTstringWAIT@data+1
 12925  05E3  319B  2311  3181   	fcall	i1_UARTstringWAIT
 12926                           
 12927                           ;PS_2.c: 694: if(ParityTyped)
 12928  05E6  0023               	movlb	3	; select bank3
 12929  05E7  086B               	movf	_ParityTyped^(0+384),w
 12930  05E8  1903               	btfsc	3,2
 12931  05E9  2E0C               	goto	i1l5756
 12932                           
 12933                           ;PS_2.c: 695: {
 12934                           ;PS_2.c: 696: switch (ParityTyped)
 12935  05EA  2DFF               	goto	i1l5754
 12936  05EB                     i1l5744:	
 12937                           ;PS_2.c: 697: {
 12938                           ;PS_2.c: 698: case 1:
 12939                           
 12940                           
 12941                           ;PS_2.c: 699: UARTstringWAIT(OddParityMSG);
 12942  05EB  3011               	movlw	low (_OddParityMSG| (0+32768))
 12943  05EC  0020               	movlb	0	; select bank0
 12944  05ED  00A1               	movwf	i1UARTstringWAIT@data
 12945  05EE  3089               	movlw	high (_OddParityMSG| (0+32768))
 12946  05EF  2E10               	goto	L14
 12947  05F0                     i1l5746:	
 12948                           ;PS_2.c: 701: case 2:
 12949                           
 12950                           ;PS_2.c: 700: break;
 12951                           
 12952                           
 12953                           ;PS_2.c: 702: UARTstringWAIT(EvenParityMSG);
 12954  05F0  30FB               	movlw	low (_EvenParityMSG| (0+32768))
 12955  05F1  0020               	movlb	0	; select bank0
 12956  05F2  00A1               	movwf	i1UARTstringWAIT@data
 12957  05F3  3088               	movlw	high (_EvenParityMSG| (0+32768))
 12958  05F4  2E10               	goto	L14
 12959  05F5                     i1l5748:	
 12960                           ;PS_2.c: 704: case 3:
 12961                           
 12962                           ;PS_2.c: 703: break;
 12963                           
 12964                           
 12965                           ;PS_2.c: 705: UARTstringWAIT(MarkParityMSG);
 12966  05F5  304A               	movlw	low (_MarkParityMSG| (0+32768))
 12967  05F6  0020               	movlb	0	; select bank0
 12968  05F7  00A1               	movwf	i1UARTstringWAIT@data
 12969  05F8  3089               	movlw	high (_MarkParityMSG| (0+32768))
 12970  05F9  2E10               	goto	L14
 12971  05FA                     i1l5750:	
 12972                           ;PS_2.c: 707: default:
 12973                           
 12974                           ;PS_2.c: 706: break;
 12975                           
 12976                           
 12977                           ;PS_2.c: 708: UARTstringWAIT(SpaceParityMSG);
 12978  05FA  303A               	movlw	low (_SpaceParityMSG| (0+32768))
 12979  05FB  0020               	movlb	0	; select bank0
 12980  05FC  00A1               	movwf	i1UARTstringWAIT@data
 12981  05FD  3089               	movlw	high (_SpaceParityMSG| (0+32768))
 12982  05FE  2E10               	goto	L14
 12983  05FF                     i1l5754:	
 12984                           ;PS_2.c: 710: }
 12985                           
 12986                           ;PS_2.c: 709: break;
 12987                           
 12988  05FF  0023               	movlb	3	; select bank3
 12989  0600  086B               	movf	_ParityTyped^(0+384),w
 12990                           
 12991                           ; Switch size 1, requested type "space"
 12992                           ; Number of cases is 3, Range of values is 1 to 3
 12993                           ; switch strategies available:
 12994                           ; Name         Instructions Cycles
 12995                           ; simple_byte           10     6 (average)
 12996                           ; direct_byte           15     9 (fixed)
 12997                           ; jumptable            263     9 (fixed)
 12998                           ;	Chosen strategy is simple_byte
 12999  0601  3A01               	xorlw	1	; case 1
 13000  0602  1903               	skipnz
 13001  0603  2DEB               	goto	i1l5744
 13002  0604  3A03               	xorlw	3	; case 2
 13003  0605  1903               	skipnz
 13004  0606  2DF0               	goto	i1l5746
 13005  0607  3A01               	xorlw	1	; case 3
 13006  0608  1903               	skipnz
 13007  0609  2DF5               	goto	i1l5748
 13008  060A  2DFA               	goto	i1l5750
 13009                           
 13010                           ;PS_2.c: 711: }
 13011  060B  2E14               	goto	i1l823
 13012  060C                     i1l5756:	
 13013                           
 13014                           ;PS_2.c: 712: else
 13015                           ;PS_2.c: 713: {
 13016                           ;PS_2.c: 714: UARTstringWAIT(NoParityMSG);
 13017  060C  3026               	movlw	low (_NoParityMSG| (0+32768))
 13018  060D  0020               	movlb	0	; select bank0
 13019  060E  00A1               	movwf	i1UARTstringWAIT@data
 13020  060F  3089               	movlw	high (_NoParityMSG| (0+32768))
 13021  0610                     L14:	
 13022  0610  00A2               	movwf	i1UARTstringWAIT@data+1
 13023  0611  319B  2311  3181   	fcall	i1_UARTstringWAIT
 13024  0614                     i1l823:	
 13025                           
 13026                           ;PS_2.c: 715: }
 13027                           ;PS_2.c: 716: UARTstringWAIT("\r\n");
 13028  0614  30FC               	movlw	low ((STR_14+16)| (0+32768))
 13029  0615  0020               	movlb	0	; select bank0
 13030  0616  00A1               	movwf	i1UARTstringWAIT@data
 13031  0617  3089               	movlw	high ((STR_14+16)| (0+32768))
 13032  0618  00A2               	movwf	i1UARTstringWAIT@data+1
 13033  0619  319B  2311  3181   	fcall	i1_UARTstringWAIT
 13034                           
 13035                           ;PS_2.c: 717: SetBaud(BaudTyped, ParityTyped);
 13036  061C  0021               	movlb	1	; select bank1
 13037  061D  0848               	movf	(_BaudTyped+3)^(0+128),w
 13038  061E  00B2               	movwf	(SetBaud@Baud+3)^(0+128)
 13039  061F  0847               	movf	(_BaudTyped+2)^(0+128),w
 13040  0620  00B1               	movwf	(SetBaud@Baud+2)^(0+128)
 13041  0621  0846               	movf	(_BaudTyped+1)^(0+128),w
 13042  0622  00B0               	movwf	(SetBaud@Baud+1)^(0+128)
 13043  0623  0845               	movf	_BaudTyped^(0+128),w
 13044  0624  00AF               	movwf	SetBaud@Baud^(0+128)
 13045  0625  0023               	movlb	3	; select bank3
 13046  0626  086B               	movf	_ParityTyped^(0+384),w
 13047  0627  0021               	movlb	1	; select bank1
 13048  0628  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 13049  0629  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 13050  062A  00B3               	movwf	SetBaud@Parity^(0+128)
 13051  062B  318B  2365  3181   	fcall	_SetBaud
 13052                           
 13053                           ;PS_2.c: 718: }
 13054  062E  2E42               	goto	i1l5764
 13055  062F                     i1l5760:	
 13056                           
 13057                           ;PS_2.c: 719: else
 13058                           ;PS_2.c: 720: {
 13059                           ;PS_2.c: 721: UARTstringWAIT("Baud Out of Range\r\n");
 13060  062F  30D8               	movlw	low (STR_20| (0+32768))
 13061  0630  0020               	movlb	0	; select bank0
 13062  0631  00A1               	movwf	i1UARTstringWAIT@data
 13063  0632  3089               	movlw	high (STR_20| (0+32768))
 13064  0633  00A2               	movwf	i1UARTstringWAIT@data+1
 13065  0634  319B  2311  3181   	fcall	i1_UARTstringWAIT
 13066                           
 13067                           ;PS_2.c: 722: delayUS(15000);
 13068  0637  3000               	movlw	0
 13069  0638  00F3               	movwf	i1delayUS@US+3
 13070  0639  3000               	movlw	0
 13071  063A  00F2               	movwf	i1delayUS@US+2
 13072  063B  303A               	movlw	58
 13073  063C  00F1               	movwf	i1delayUS@US+1
 13074  063D  3098               	movlw	152
 13075  063E  00F0               	movwf	i1delayUS@US
 13076  063F  319B  2375  3181   	fcall	i1_delayUS
 13077  0642                     i1l5764:	
 13078                           
 13079                           ;PS_2.c: 723: }
 13080                           ;PS_2.c: 724: BAUDMODE=0;
 13081  0642  0021               	movlb	1	; select bank1
 13082  0643  01CB               	clrf	_BAUDMODE^(0+128)
 13083  0644                     i1l792:	
 13084  0644  0023               	movlb	3	; select bank3
 13085  0645                     i1l5766:	
 13086                           
 13087                           ;PS_2.c: 725: }
 13088                           ;PS_2.c: 726: }
 13089                           ;PS_2.c: 727: }
 13090                           ;PS_2.c: 728: }
 13091                           ;PS_2.c: 731: temp =0;
 13092  0645  0023               	movlb	3	; select bank3
 13093  0646  01E0               	clrf	Process_PS2_ScanCode@temp^(0+384)
 13094                           
 13095                           ;PS_2.c: 732: PS_2_Read_Data_First =0;
 13096  0647  01E1               	clrf	_PS_2_Read_Data_First^(0+384)
 13097  0648  01E2               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
 13098                           
 13099                           ;PS_2.c: 733: PS_2_Read_Data_Second =0;
 13100  0649  01E3               	clrf	_PS_2_Read_Data_Second^(0+384)
 13101  064A  01E4               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
 13102                           
 13103                           ;PS_2.c: 734: PS_2_Read_Data_Third =0;
 13104  064B  01E5               	clrf	_PS_2_Read_Data_Third^(0+384)
 13105  064C  01E6               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
 13106                           
 13107                           ;PS_2.c: 735: Caps_Lock_Key_old = Caps_Lock_Key;
 13108  064D  0021               	movlb	1	; select bank1
 13109  064E  084C               	movf	_Caps_Lock_Key^(0+128),w
 13110  064F  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 13111  0650  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 13112  0651  00CD               	movwf	_Caps_Lock_Key_old^(0+128)
 13113                           
 13114                           ;PS_2.c: 736: Right_Shift_Key_old = Right_Shift_Key;
 13115  0652  0023               	movlb	3	; select bank3
 13116  0653  086E               	movf	_Right_Shift_Key^(0+384),w
 13117  0654  0021               	movlb	1	; select bank1
 13118  0655  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 13119  0656  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 13120  0657  00D4               	movwf	_Right_Shift_Key_old^(0+128)
 13121                           
 13122                           ;PS_2.c: 737: Left_Shift_Key_old = Left_Shift_Key;
 13123  0658  0023               	movlb	3	; select bank3
 13124  0659  086A               	movf	_Left_Shift_Key^(0+384),w
 13125  065A  0021               	movlb	1	; select bank1
 13126  065B  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 13127  065C  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 13128  065D  00D0               	movwf	_Left_Shift_Key_old^(0+128)
 13129                           
 13130                           ;PS_2.c: 738: LATC &= ~0b00010000;
 13131  065E  30EF               	movlw	239
 13132  065F  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 13133  0660  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 13134  0661  0022               	movlb	2	; select bank2
 13135  0662  058E               	andwf	14,f	;volatile
 13136                           
 13137                           ;PS_2.c: 739: }
 13138  0663  2921               	goto	i1l5786
 13139  0664                     i1l5782:	
 13140                           
 13141                           ;PS_2.c: 740: else
 13142                           ;PS_2.c: 741: {
 13143                           ;PS_2.c: 743: cleanBuffer(PS_2_ScanCodes, 12);
 13144  0664  300C               	movlw	12
 13145  0665  00F0               	movwf	cleanBuffer@count
 13146  0666  3000               	movlw	0
 13147  0667  00F1               	movwf	cleanBuffer@count+1
 13148  0668  30D6               	movlw	_PS_2_ScanCodes& (0+255)
 13149  0669  3186  26DF  3181   	fcall	_cleanBuffer
 13150                           
 13151                           ;PS_2.c: 744: PS_2_Buffer_items = 0;
 13152  066C  0021               	movlb	1	; select bank1
 13153  066D  01D1               	clrf	_PS_2_Buffer_items^(0+128)
 13154  066E  2921               	goto	i1l5786
 13155  066F                     __end_of_Process_PS2_ScanCode:	
 13156                           
 13157                           	psect	text44
 13158  0CDE                     __ptext44:	
 13159 ;; *************** function i1_Send_PS2 *****************
 13160 ;; Defined at:
 13161 ;;		line 829 in file "PS_2.c"
 13162 ;; Parameters:    Size  Location     Type
 13163 ;;  command         1    wreg     unsigned char 
 13164 ;; Auto vars:     Size  Location     Type
 13165 ;;  command         1    1[BANK0 ] unsigned char 
 13166 ;;  Send_PS2        2    3[BANK0 ] unsigned int 
 13167 ;;  Send_PS2        1    2[BANK0 ] unsigned char 
 13168 ;;  Send_PS2        1    0[BANK0 ] unsigned char 
 13169 ;; Return value:  Size  Location     Type
 13170 ;;                  1    wreg      unsigned char 
 13171 ;; Registers used:
 13172 ;;		wreg, status,2, status,0, pclath, cstack
 13173 ;; Tracked objects:
 13174 ;;		On entry : 0/0
 13175 ;;		On exit  : 0/0
 13176 ;;		Unchanged: 0/0
 13177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13179 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13180 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13181 ;;      Totals:         4       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13182 ;;Total ram usage:        9 bytes
 13183 ;; Hardware stack levels used:    1
 13184 ;; Hardware stack levels required when called:    1
 13185 ;; This function calls:
 13186 ;;		i1_CheckSum_byte
 13187 ;;		i1_Clock_TRIS
 13188 ;;		i1_Data_TRIS
 13189 ;;		i1_READ_PS_2_PIN
 13190 ;;		i1_delayUS
 13191 ;; This function is called by:
 13192 ;;		_Process_PS2_ScanCode
 13193 ;;		_ResendLast
 13194 ;; This function uses a non-reentrant model
 13195 ;;
 13196                           
 13197                           
 13198                           ;psect for function i1_Send_PS2
 13199  0CDE                     i1_Send_PS2:	
 13200                           
 13201                           ;incstack = 0
 13202                           ; Regs used in i1_Send_PS2: [wreg+status,2+status,0+pclath+cstack]
 13203                           ;i1Send_PS2@command stored from wreg
 13204  0CDE  0020               	movlb	0	; select bank0
 13205  0CDF  00A1               	movwf	i1Send_PS2@command
 13206                           
 13207                           ;PS_2.c: 831: unsigned char i=0;
 13208  0CE0  01A2               	clrf	i1Send_PS2@i
 13209                           
 13210                           ;PS_2.c: 832: unsigned char oddparity = CheckSum_byte((unsigned int)command , 3);
 13211  0CE1  0821               	movf	i1Send_PS2@command,w
 13212  0CE2  00FA               	movwf	??i1_Send_PS2
 13213  0CE3  01FB               	clrf	??i1_Send_PS2+1
 13214  0CE4  087A               	movf	??i1_Send_PS2,w
 13215  0CE5  00F0               	movwf	i1CheckSum_byte@This
 13216  0CE6  087B               	movf	??i1_Send_PS2+1,w
 13217  0CE7  00F1               	movwf	i1CheckSum_byte@This+1
 13218  0CE8  3003               	movlw	3
 13219  0CE9  00FC               	movwf	??i1_Send_PS2+2
 13220  0CEA  087C               	movf	??i1_Send_PS2+2,w
 13221  0CEB  00F2               	movwf	i1CheckSum_byte@Odd_Even
 13222  0CEC  319A  22B0  318C   	fcall	i1_CheckSum_byte
 13223  0CEF  00FD               	movwf	??i1_Send_PS2+3
 13224  0CF0  087D               	movf	??i1_Send_PS2+3,w
 13225  0CF1  0020               	movlb	0	; select bank0
 13226  0CF2  00A0               	movwf	i1Send_PS2@oddparity
 13227                           
 13228                           ;PS_2.c: 833: unsigned int timeout =0;
 13229  0CF3  01A3               	clrf	i1Send_PS2@timeout
 13230  0CF4  01A4               	clrf	i1Send_PS2@timeout+1
 13231                           
 13232                           ;PS_2.c: 835: Clock_TRIS(0);
 13233  0CF5  3000               	movlw	0
 13234  0CF6  3198  205D  318C   	fcall	i1_Clock_TRIS
 13235                           
 13236                           ;PS_2.c: 836: Data_TRIS(0);
 13237  0CF9  3000               	movlw	0
 13238  0CFA  3198  2067  318C   	fcall	i1_Data_TRIS
 13239                           
 13240                           ;PS_2.c: 837: LATA &= ~0b00100000;
 13241  0CFD  30DF               	movlw	223
 13242  0CFE  00FA               	movwf	??i1_Send_PS2
 13243  0CFF  087A               	movf	??i1_Send_PS2,w
 13244  0D00  0022               	movlb	2	; select bank2
 13245  0D01  058C               	andwf	12,f	;volatile
 13246                           
 13247                           ;PS_2.c: 838: delayUS(300);
 13248  0D02  3000               	movlw	0
 13249  0D03  00F3               	movwf	i1delayUS@US+3
 13250  0D04  3000               	movlw	0
 13251  0D05  00F2               	movwf	i1delayUS@US+2
 13252  0D06  3001               	movlw	1
 13253  0D07  00F1               	movwf	i1delayUS@US+1
 13254  0D08  302C               	movlw	44
 13255  0D09  00F0               	movwf	i1delayUS@US
 13256  0D0A  319B  2375  318C   	fcall	i1_delayUS
 13257                           
 13258                           ;PS_2.c: 839: LATA &= ~0b00010000;
 13259  0D0D  30EF               	movlw	239
 13260  0D0E  00FA               	movwf	??i1_Send_PS2
 13261  0D0F  087A               	movf	??i1_Send_PS2,w
 13262  0D10  0022               	movlb	2	; select bank2
 13263  0D11  058C               	andwf	12,f	;volatile
 13264                           
 13265                           ;PS_2.c: 840: delayUS(20);
 13266  0D12  3000               	movlw	0
 13267  0D13  00F3               	movwf	i1delayUS@US+3
 13268  0D14  3000               	movlw	0
 13269  0D15  00F2               	movwf	i1delayUS@US+2
 13270  0D16  3000               	movlw	0
 13271  0D17  00F1               	movwf	i1delayUS@US+1
 13272  0D18  3014               	movlw	20
 13273  0D19  00F0               	movwf	i1delayUS@US
 13274  0D1A  319B  2375  318C   	fcall	i1_delayUS
 13275                           
 13276                           ;PS_2.c: 841: Clock_TRIS(1);
 13277  0D1D  3001               	movlw	1
 13278  0D1E  3198  205D  318C   	fcall	i1_Clock_TRIS
 13279                           
 13280                           ;PS_2.c: 842: timeout=0;
 13281  0D21  0020               	movlb	0	; select bank0
 13282  0D22  01A3               	clrf	i1Send_PS2@timeout
 13283  0D23  01A4               	clrf	i1Send_PS2@timeout+1
 13284  0D24                     i1l5142:	
 13285                           ;PS_2.c: 843: while(READ_PS_2_PIN(0b00100000))
 13286                           
 13287  0D24  3020               	movlw	32
 13288  0D25  3199  2152  318C   	fcall	i1_READ_PS_2_PIN
 13289  0D28  3800               	iorlw	0
 13290  0D29  1903               	btfsc	3,2
 13291  0D2A  2D41               	goto	i1l5144
 13292                           
 13293                           ;PS_2.c: 844: {
 13294                           ;PS_2.c: 845: __nop();
 13295  0D2B  0000               	nop
 13296                           
 13297                           ;PS_2.c: 846: timeout++;
 13298  0D2C  3001               	movlw	1
 13299  0D2D  0020               	movlb	0	; select bank0
 13300  0D2E  07A3               	addwf	i1Send_PS2@timeout,f
 13301  0D2F  3000               	movlw	0
 13302  0D30  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13303                           
 13304                           ;PS_2.c: 847: if(timeout > 15000)
 13305  0D31  303A               	movlw	58
 13306  0D32  0224               	subwf	i1Send_PS2@timeout+1,w
 13307  0D33  3099               	movlw	153
 13308  0D34  1903               	skipnz
 13309  0D35  0223               	subwf	i1Send_PS2@timeout,w
 13310  0D36  1C03               	skipc
 13311  0D37  2D24               	goto	i1l5142
 13312                           
 13313                           ;PS_2.c: 848: {
 13314                           ;PS_2.c: 849: Clock_TRIS(1);
 13315  0D38  3001               	movlw	1
 13316  0D39  3198  205D  318C   	fcall	i1_Clock_TRIS
 13317                           
 13318                           ;PS_2.c: 850: Data_TRIS(1);
 13319  0D3C  3001               	movlw	1
 13320  0D3D  3198  2067         	fcall	i1_Data_TRIS
 13321                           
 13322                           ;PS_2.c: 851: return 1;
 13323  0D3F  3001               	movlw	1
 13324  0D40  0008               	return
 13325  0D41                     i1l5144:	
 13326                           
 13327                           ;PS_2.c: 852: }
 13328                           ;PS_2.c: 853: }
 13329                           ;PS_2.c: 854: for(i=0;i<8;i++)
 13330  0D41  0020               	movlb	0	; select bank0
 13331  0D42  01A2               	clrf	i1Send_PS2@i
 13332  0D43  3008               	movlw	8
 13333  0D44  0222               	subwf	i1Send_PS2@i,w
 13334  0D45  1803               	btfsc	3,0
 13335  0D46  2D9B               	goto	i1l856
 13336  0D47                     i1l855:	
 13337                           
 13338                           ;PS_2.c: 855: {
 13339                           ;PS_2.c: 856: if(command & 0x1)
 13340  0D47  1C21               	btfss	i1Send_PS2@command,0
 13341  0D48  2D4C               	goto	i1l5152
 13342                           
 13343                           ;PS_2.c: 857: {
 13344                           ;PS_2.c: 858: LATA |= 0b00010000;
 13345  0D49  0022               	movlb	2	; select bank2
 13346  0D4A  160C               	bsf	12,4	;volatile
 13347                           
 13348                           ;PS_2.c: 859: }
 13349  0D4B  2D51               	goto	i1l5154
 13350  0D4C                     i1l5152:	
 13351                           
 13352                           ;PS_2.c: 860: else
 13353                           ;PS_2.c: 861: {
 13354                           ;PS_2.c: 862: LATA &= ~0b00010000;
 13355  0D4C  30EF               	movlw	239
 13356  0D4D  00FA               	movwf	??i1_Send_PS2
 13357  0D4E  087A               	movf	??i1_Send_PS2,w
 13358  0D4F  0022               	movlb	2	; select bank2
 13359  0D50  058C               	andwf	12,f	;volatile
 13360  0D51                     i1l5154:	
 13361                           
 13362                           ;PS_2.c: 863: }
 13363                           ;PS_2.c: 864: command >> = 1;
 13364  0D51  1003               	clrc
 13365  0D52  0020               	movlb	0	; select bank0
 13366  0D53  0CA1               	rrf	i1Send_PS2@command,f
 13367                           
 13368                           ;PS_2.c: 865: timeout=0;
 13369  0D54  01A3               	clrf	i1Send_PS2@timeout
 13370  0D55  01A4               	clrf	i1Send_PS2@timeout+1
 13371  0D56                     i1l5166:	
 13372                           ;PS_2.c: 866: while(!READ_PS_2_PIN(0b00100000))
 13373                           
 13374  0D56  3020               	movlw	32
 13375  0D57  3199  2152  318C   	fcall	i1_READ_PS_2_PIN
 13376  0D5A  3A00               	xorlw	0
 13377  0D5B  1D03               	btfss	3,2
 13378  0D5C  2D72               	goto	i1l5168
 13379                           
 13380                           ;PS_2.c: 867: {
 13381                           ;PS_2.c: 868: timeout++;
 13382  0D5D  3001               	movlw	1
 13383  0D5E  0020               	movlb	0	; select bank0
 13384  0D5F  07A3               	addwf	i1Send_PS2@timeout,f
 13385  0D60  3000               	movlw	0
 13386  0D61  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13387                           
 13388                           ;PS_2.c: 869: if(timeout > 15000)
 13389  0D62  303A               	movlw	58
 13390  0D63  0224               	subwf	i1Send_PS2@timeout+1,w
 13391  0D64  3099               	movlw	153
 13392  0D65  1903               	skipnz
 13393  0D66  0223               	subwf	i1Send_PS2@timeout,w
 13394  0D67  1C03               	skipc
 13395  0D68  2D56               	goto	i1l5166
 13396                           
 13397                           ;PS_2.c: 870: {
 13398                           ;PS_2.c: 871: Clock_TRIS(1);
 13399  0D69  3001               	movlw	1
 13400  0D6A  3198  205D  318C   	fcall	i1_Clock_TRIS
 13401                           
 13402                           ;PS_2.c: 872: Data_TRIS(1);
 13403  0D6D  3001               	movlw	1
 13404  0D6E  3198  2067         	fcall	i1_Data_TRIS
 13405                           
 13406                           ;PS_2.c: 873: return 1;
 13407  0D70  3001               	movlw	1
 13408  0D71  0008               	return
 13409  0D72                     i1l5168:	
 13410                           
 13411                           ;PS_2.c: 874: }
 13412                           ;PS_2.c: 875: }
 13413                           ;PS_2.c: 876: timeout=0;
 13414  0D72  0020               	movlb	0	; select bank0
 13415  0D73  01A3               	clrf	i1Send_PS2@timeout
 13416  0D74  01A4               	clrf	i1Send_PS2@timeout+1
 13417  0D75                     i1l5178:	
 13418                           ;PS_2.c: 877: while(READ_PS_2_PIN(0b00100000))
 13419                           
 13420  0D75  3020               	movlw	32
 13421  0D76  3199  2152  318C   	fcall	i1_READ_PS_2_PIN
 13422  0D79  3800               	iorlw	0
 13423  0D7A  1903               	btfsc	3,2
 13424  0D7B  2D92               	goto	i1l5180
 13425                           
 13426                           ;PS_2.c: 878: {
 13427                           ;PS_2.c: 879: __nop();
 13428  0D7C  0000               	nop
 13429                           
 13430                           ;PS_2.c: 880: timeout++;
 13431  0D7D  3001               	movlw	1
 13432  0D7E  0020               	movlb	0	; select bank0
 13433  0D7F  07A3               	addwf	i1Send_PS2@timeout,f
 13434  0D80  3000               	movlw	0
 13435  0D81  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13436                           
 13437                           ;PS_2.c: 881: if(timeout > 15000)
 13438  0D82  303A               	movlw	58
 13439  0D83  0224               	subwf	i1Send_PS2@timeout+1,w
 13440  0D84  3099               	movlw	153
 13441  0D85  1903               	skipnz
 13442  0D86  0223               	subwf	i1Send_PS2@timeout,w
 13443  0D87  1C03               	skipc
 13444  0D88  2D75               	goto	i1l5178
 13445                           
 13446                           ;PS_2.c: 882: {
 13447                           ;PS_2.c: 883: Clock_TRIS(1);
 13448  0D89  3001               	movlw	1
 13449  0D8A  3198  205D  318C   	fcall	i1_Clock_TRIS
 13450                           
 13451                           ;PS_2.c: 884: Data_TRIS(1);
 13452  0D8D  3001               	movlw	1
 13453  0D8E  3198  2067         	fcall	i1_Data_TRIS
 13454                           
 13455                           ;PS_2.c: 885: return 1;
 13456  0D90  3001               	movlw	1
 13457  0D91  0008               	return
 13458  0D92                     i1l5180:	
 13459  0D92  3001               	movlw	1
 13460  0D93  00FA               	movwf	??i1_Send_PS2
 13461  0D94  087A               	movf	??i1_Send_PS2,w
 13462  0D95  0020               	movlb	0	; select bank0
 13463  0D96  07A2               	addwf	i1Send_PS2@i,f
 13464  0D97  3008               	movlw	8
 13465  0D98  0222               	subwf	i1Send_PS2@i,w
 13466  0D99  1C03               	skipc
 13467  0D9A  2D47               	goto	i1l855
 13468  0D9B                     i1l856:	
 13469                           
 13470                           ;PS_2.c: 886: }
 13471                           ;PS_2.c: 887: }
 13472                           ;PS_2.c: 888: }
 13473                           ;PS_2.c: 890: if(oddparity & 0x1)
 13474  0D9B  1C20               	btfss	i1Send_PS2@oddparity,0
 13475  0D9C  2DA0               	goto	i1l5186
 13476                           
 13477                           ;PS_2.c: 891: {
 13478                           ;PS_2.c: 892: LATA |= 0b00010000;
 13479  0D9D  0022               	movlb	2	; select bank2
 13480  0D9E  160C               	bsf	12,4	;volatile
 13481                           
 13482                           ;PS_2.c: 893: }
 13483  0D9F  2DA5               	goto	i1l5188
 13484  0DA0                     i1l5186:	
 13485                           
 13486                           ;PS_2.c: 894: else
 13487                           ;PS_2.c: 895: {
 13488                           ;PS_2.c: 896: LATA &= ~0b00010000;
 13489  0DA0  30EF               	movlw	239
 13490  0DA1  00FA               	movwf	??i1_Send_PS2
 13491  0DA2  087A               	movf	??i1_Send_PS2,w
 13492  0DA3  0022               	movlb	2	; select bank2
 13493  0DA4  058C               	andwf	12,f	;volatile
 13494  0DA5                     i1l5188:	
 13495                           
 13496                           ;PS_2.c: 897: }
 13497                           ;PS_2.c: 898: timeout=0;
 13498  0DA5  0020               	movlb	0	; select bank0
 13499  0DA6  01A3               	clrf	i1Send_PS2@timeout
 13500  0DA7  01A4               	clrf	i1Send_PS2@timeout+1
 13501  0DA8                     i1l5198:	
 13502                           ;PS_2.c: 899: while(!READ_PS_2_PIN(0b00100000))
 13503                           
 13504  0DA8  3020               	movlw	32
 13505  0DA9  3199  2152  318C   	fcall	i1_READ_PS_2_PIN
 13506  0DAC  3A00               	xorlw	0
 13507  0DAD  1D03               	btfss	3,2
 13508  0DAE  2DC4               	goto	i1l5200
 13509                           
 13510                           ;PS_2.c: 900: {
 13511                           ;PS_2.c: 901: timeout++;
 13512  0DAF  3001               	movlw	1
 13513  0DB0  0020               	movlb	0	; select bank0
 13514  0DB1  07A3               	addwf	i1Send_PS2@timeout,f
 13515  0DB2  3000               	movlw	0
 13516  0DB3  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13517                           
 13518                           ;PS_2.c: 902: if(timeout > 15000)
 13519  0DB4  303A               	movlw	58
 13520  0DB5  0224               	subwf	i1Send_PS2@timeout+1,w
 13521  0DB6  3099               	movlw	153
 13522  0DB7  1903               	skipnz
 13523  0DB8  0223               	subwf	i1Send_PS2@timeout,w
 13524  0DB9  1C03               	skipc
 13525  0DBA  2DA8               	goto	i1l5198
 13526                           
 13527                           ;PS_2.c: 903: {
 13528                           ;PS_2.c: 904: Clock_TRIS(1);
 13529  0DBB  3001               	movlw	1
 13530  0DBC  3198  205D  318C   	fcall	i1_Clock_TRIS
 13531                           
 13532                           ;PS_2.c: 905: Data_TRIS(1);
 13533  0DBF  3001               	movlw	1
 13534  0DC0  3198  2067         	fcall	i1_Data_TRIS
 13535                           
 13536                           ;PS_2.c: 906: return 1;
 13537  0DC2  3001               	movlw	1
 13538  0DC3  0008               	return
 13539  0DC4                     i1l5200:	
 13540                           
 13541                           ;PS_2.c: 907: }
 13542                           ;PS_2.c: 908: }
 13543                           ;PS_2.c: 909: timeout=0;
 13544  0DC4  0020               	movlb	0	; select bank0
 13545  0DC5  01A3               	clrf	i1Send_PS2@timeout
 13546  0DC6  01A4               	clrf	i1Send_PS2@timeout+1
 13547  0DC7                     i1l5210:	
 13548                           ;PS_2.c: 910: while(READ_PS_2_PIN(0b00100000))
 13549                           
 13550  0DC7  3020               	movlw	32
 13551  0DC8  3199  2152  318C   	fcall	i1_READ_PS_2_PIN
 13552  0DCB  3800               	iorlw	0
 13553  0DCC  1903               	btfsc	3,2
 13554  0DCD  2DE3               	goto	i1l5212
 13555                           
 13556                           ;PS_2.c: 911: {
 13557                           ;PS_2.c: 912: timeout++;
 13558  0DCE  3001               	movlw	1
 13559  0DCF  0020               	movlb	0	; select bank0
 13560  0DD0  07A3               	addwf	i1Send_PS2@timeout,f
 13561  0DD1  3000               	movlw	0
 13562  0DD2  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13563                           
 13564                           ;PS_2.c: 913: if(timeout > 15000)
 13565  0DD3  303A               	movlw	58
 13566  0DD4  0224               	subwf	i1Send_PS2@timeout+1,w
 13567  0DD5  3099               	movlw	153
 13568  0DD6  1903               	skipnz
 13569  0DD7  0223               	subwf	i1Send_PS2@timeout,w
 13570  0DD8  1C03               	skipc
 13571  0DD9  2DC7               	goto	i1l5210
 13572                           
 13573                           ;PS_2.c: 914: {
 13574                           ;PS_2.c: 915: Clock_TRIS(1);
 13575  0DDA  3001               	movlw	1
 13576  0DDB  3198  205D  318C   	fcall	i1_Clock_TRIS
 13577                           
 13578                           ;PS_2.c: 916: Data_TRIS(1);
 13579  0DDE  3001               	movlw	1
 13580  0DDF  3198  2067         	fcall	i1_Data_TRIS
 13581                           
 13582                           ;PS_2.c: 917: return 1;
 13583  0DE1  3001               	movlw	1
 13584  0DE2  0008               	return
 13585  0DE3                     i1l5212:	
 13586                           
 13587                           ;PS_2.c: 918: }
 13588                           ;PS_2.c: 919: }
 13589                           ;PS_2.c: 921: Data_TRIS(1);
 13590  0DE3  3001               	movlw	1
 13591  0DE4  3198  2067  318C   	fcall	i1_Data_TRIS
 13592                           
 13593                           ;PS_2.c: 923: timeout=0;
 13594  0DE7  0020               	movlb	0	; select bank0
 13595  0DE8  01A3               	clrf	i1Send_PS2@timeout
 13596  0DE9  01A4               	clrf	i1Send_PS2@timeout+1
 13597  0DEA                     i1l5224:	
 13598                           ;PS_2.c: 924: while(READ_PS_2_PIN(0b00010000))
 13599                           
 13600  0DEA  3010               	movlw	16
 13601  0DEB  3199  2152  318C   	fcall	i1_READ_PS_2_PIN
 13602  0DEE  3800               	iorlw	0
 13603  0DEF  1903               	btfsc	3,2
 13604  0DF0  2E06               	goto	i1l5226
 13605                           
 13606                           ;PS_2.c: 925: {
 13607                           ;PS_2.c: 926: timeout++;
 13608  0DF1  3001               	movlw	1
 13609  0DF2  0020               	movlb	0	; select bank0
 13610  0DF3  07A3               	addwf	i1Send_PS2@timeout,f
 13611  0DF4  3000               	movlw	0
 13612  0DF5  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13613                           
 13614                           ;PS_2.c: 927: if(timeout > 15000)
 13615  0DF6  303A               	movlw	58
 13616  0DF7  0224               	subwf	i1Send_PS2@timeout+1,w
 13617  0DF8  3099               	movlw	153
 13618  0DF9  1903               	skipnz
 13619  0DFA  0223               	subwf	i1Send_PS2@timeout,w
 13620  0DFB  1C03               	skipc
 13621  0DFC  2DEA               	goto	i1l5224
 13622                           
 13623                           ;PS_2.c: 928: {
 13624                           ;PS_2.c: 929: Clock_TRIS(1);
 13625  0DFD  3001               	movlw	1
 13626  0DFE  3198  205D  318C   	fcall	i1_Clock_TRIS
 13627                           
 13628                           ;PS_2.c: 930: Data_TRIS(1);
 13629  0E01  3001               	movlw	1
 13630  0E02  3198  2067         	fcall	i1_Data_TRIS
 13631                           
 13632                           ;PS_2.c: 931: return 1;
 13633  0E04  3001               	movlw	1
 13634  0E05  0008               	return
 13635  0E06                     i1l5226:	
 13636                           
 13637                           ;PS_2.c: 932: }
 13638                           ;PS_2.c: 933: }
 13639                           ;PS_2.c: 934: timeout=0;
 13640  0E06  0020               	movlb	0	; select bank0
 13641  0E07  01A3               	clrf	i1Send_PS2@timeout
 13642  0E08  01A4               	clrf	i1Send_PS2@timeout+1
 13643  0E09                     i1l5236:	
 13644                           ;PS_2.c: 935: while(READ_PS_2_PIN(0b00100000))
 13645                           
 13646  0E09  3020               	movlw	32
 13647  0E0A  3199  2152  318C   	fcall	i1_READ_PS_2_PIN
 13648  0E0D  3800               	iorlw	0
 13649  0E0E  1903               	btfsc	3,2
 13650  0E0F  2E25               	goto	i1l5238
 13651                           
 13652                           ;PS_2.c: 936: {
 13653                           ;PS_2.c: 937: timeout++;
 13654  0E10  3001               	movlw	1
 13655  0E11  0020               	movlb	0	; select bank0
 13656  0E12  07A3               	addwf	i1Send_PS2@timeout,f
 13657  0E13  3000               	movlw	0
 13658  0E14  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13659                           
 13660                           ;PS_2.c: 938: if(timeout > 15000)
 13661  0E15  303A               	movlw	58
 13662  0E16  0224               	subwf	i1Send_PS2@timeout+1,w
 13663  0E17  3099               	movlw	153
 13664  0E18  1903               	skipnz
 13665  0E19  0223               	subwf	i1Send_PS2@timeout,w
 13666  0E1A  1C03               	skipc
 13667  0E1B  2E09               	goto	i1l5236
 13668                           
 13669                           ;PS_2.c: 939: {
 13670                           ;PS_2.c: 940: Clock_TRIS(1);
 13671  0E1C  3001               	movlw	1
 13672  0E1D  3198  205D  318C   	fcall	i1_Clock_TRIS
 13673                           
 13674                           ;PS_2.c: 941: Data_TRIS(1);
 13675  0E20  3001               	movlw	1
 13676  0E21  3198  2067         	fcall	i1_Data_TRIS
 13677                           
 13678                           ;PS_2.c: 942: return 1;
 13679  0E23  3001               	movlw	1
 13680  0E24  0008               	return
 13681  0E25                     i1l5238:	
 13682                           
 13683                           ;PS_2.c: 943: }
 13684                           ;PS_2.c: 944: }
 13685                           ;PS_2.c: 945: timeout=0;
 13686  0E25  0020               	movlb	0	; select bank0
 13687  0E26  01A3               	clrf	i1Send_PS2@timeout
 13688  0E27  01A4               	clrf	i1Send_PS2@timeout+1
 13689  0E28                     i1l5248:	
 13690                           ;PS_2.c: 946: while(!READ_PS_2_PIN(0b00010000))
 13691                           
 13692  0E28  3010               	movlw	16
 13693  0E29  3199  2152  318C   	fcall	i1_READ_PS_2_PIN
 13694  0E2C  3A00               	xorlw	0
 13695  0E2D  1D03               	btfss	3,2
 13696  0E2E  2E44               	goto	i1l5250
 13697                           
 13698                           ;PS_2.c: 947: {
 13699                           ;PS_2.c: 948: timeout++;
 13700  0E2F  3001               	movlw	1
 13701  0E30  0020               	movlb	0	; select bank0
 13702  0E31  07A3               	addwf	i1Send_PS2@timeout,f
 13703  0E32  3000               	movlw	0
 13704  0E33  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13705                           
 13706                           ;PS_2.c: 949: if(timeout > 15000)
 13707  0E34  303A               	movlw	58
 13708  0E35  0224               	subwf	i1Send_PS2@timeout+1,w
 13709  0E36  3099               	movlw	153
 13710  0E37  1903               	skipnz
 13711  0E38  0223               	subwf	i1Send_PS2@timeout,w
 13712  0E39  1C03               	skipc
 13713  0E3A  2E28               	goto	i1l5248
 13714                           
 13715                           ;PS_2.c: 950: {
 13716                           ;PS_2.c: 951: Clock_TRIS(1);
 13717  0E3B  3001               	movlw	1
 13718  0E3C  3198  205D  318C   	fcall	i1_Clock_TRIS
 13719                           
 13720                           ;PS_2.c: 952: Data_TRIS(1);
 13721  0E3F  3001               	movlw	1
 13722  0E40  3198  2067         	fcall	i1_Data_TRIS
 13723                           
 13724                           ;PS_2.c: 953: return 1;
 13725  0E42  3001               	movlw	1
 13726  0E43  0008               	return
 13727  0E44                     i1l5250:	
 13728                           
 13729                           ;PS_2.c: 954: }
 13730                           ;PS_2.c: 955: }
 13731                           ;PS_2.c: 956: timeout=0;
 13732  0E44  0020               	movlb	0	; select bank0
 13733  0E45  01A3               	clrf	i1Send_PS2@timeout
 13734  0E46  01A4               	clrf	i1Send_PS2@timeout+1
 13735  0E47                     i1l5260:	
 13736                           ;PS_2.c: 957: while(!READ_PS_2_PIN(0b00100000))
 13737                           
 13738  0E47  3020               	movlw	32
 13739  0E48  3199  2152  318C   	fcall	i1_READ_PS_2_PIN
 13740  0E4B  3A00               	xorlw	0
 13741  0E4C  1D03               	btfss	3,2
 13742  0E4D  2E63               	goto	i1l5262
 13743                           
 13744                           ;PS_2.c: 958: {
 13745                           ;PS_2.c: 959: timeout++;
 13746  0E4E  3001               	movlw	1
 13747  0E4F  0020               	movlb	0	; select bank0
 13748  0E50  07A3               	addwf	i1Send_PS2@timeout,f
 13749  0E51  3000               	movlw	0
 13750  0E52  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13751                           
 13752                           ;PS_2.c: 960: if(timeout > 15000)
 13753  0E53  303A               	movlw	58
 13754  0E54  0224               	subwf	i1Send_PS2@timeout+1,w
 13755  0E55  3099               	movlw	153
 13756  0E56  1903               	skipnz
 13757  0E57  0223               	subwf	i1Send_PS2@timeout,w
 13758  0E58  1C03               	skipc
 13759  0E59  2E47               	goto	i1l5260
 13760                           
 13761                           ;PS_2.c: 961: {
 13762                           ;PS_2.c: 962: Clock_TRIS(1);
 13763  0E5A  3001               	movlw	1
 13764  0E5B  3198  205D  318C   	fcall	i1_Clock_TRIS
 13765                           
 13766                           ;PS_2.c: 963: Data_TRIS(1);
 13767  0E5E  3001               	movlw	1
 13768  0E5F  3198  2067         	fcall	i1_Data_TRIS
 13769                           
 13770                           ;PS_2.c: 964: return 1;
 13771  0E61  3001               	movlw	1
 13772  0E62  0008               	return
 13773  0E63                     i1l5262:	
 13774                           
 13775                           ;PS_2.c: 965: }
 13776                           ;PS_2.c: 966: }
 13777                           ;PS_2.c: 969: Clock_TRIS(1);
 13778  0E63  3001               	movlw	1
 13779  0E64  3198  205D  318C   	fcall	i1_Clock_TRIS
 13780                           
 13781                           ;PS_2.c: 970: Data_TRIS(1);
 13782  0E67  3001               	movlw	1
 13783  0E68  3198  2067         	fcall	i1_Data_TRIS
 13784                           
 13785                           ;PS_2.c: 971: return 0;
 13786  0E6A  3000               	movlw	0
 13787  0E6B  0008               	return
 13788  0E6C                     __end_ofi1_Send_PS2:	
 13789                           
 13790                           	psect	text45
 13791  1952                     __ptext45:	
 13792 ;; *************** function i1_READ_PS_2_PIN *****************
 13793 ;; Defined at:
 13794 ;;		line 216 in file "PS_2.c"
 13795 ;; Parameters:    Size  Location     Type
 13796 ;;  DATA_CLK        1    wreg     unsigned char 
 13797 ;; Auto vars:     Size  Location     Type
 13798 ;;  DATA_CLK        1    0[COMMON] unsigned char 
 13799 ;; Return value:  Size  Location     Type
 13800 ;;                  1    wreg      unsigned char 
 13801 ;; Registers used:
 13802 ;;		wreg
 13803 ;; Tracked objects:
 13804 ;;		On entry : 0/0
 13805 ;;		On exit  : 0/0
 13806 ;;		Unchanged: 0/0
 13807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13809 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13811 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13812 ;;Total ram usage:        1 bytes
 13813 ;; Hardware stack levels used:    1
 13814 ;; This function calls:
 13815 ;;		Nothing
 13816 ;; This function is called by:
 13817 ;;		_isr
 13818 ;;		i1_Send_PS2
 13819 ;; This function uses a non-reentrant model
 13820 ;;
 13821                           
 13822                           
 13823                           ;psect for function i1_READ_PS_2_PIN
 13824  1952                     i1_READ_PS_2_PIN:	
 13825                           
 13826                           ;incstack = 0
 13827                           ; Regs used in i1_READ_PS_2_PIN: [wreg]
 13828                           ;i1READ_PS_2_PIN@DATA_CLK stored from wreg
 13829  1952  00F0               	movwf	i1READ_PS_2_PIN@DATA_CLK
 13830                           
 13831                           ;PS_2.c: 218: if(DATA_CLK == 0b00100000)
 13832  1953  0870               	movf	i1READ_PS_2_PIN@DATA_CLK,w
 13833  1954  3A20               	xorlw	32
 13834  1955  1D03               	skipz
 13835  1956  295E               	goto	i1l647
 13836                           
 13837                           ;PS_2.c: 219: {
 13838                           ;PS_2.c: 221: if((PORTA & 0b00100000) == 0b00100000)
 13839  1957  0020               	movlb	0	; select bank0
 13840  1958  1E8C               	btfss	12,5	;volatile
 13841  1959  295C               	goto	i1l4626
 13842                           
 13843                           ;PS_2.c: 222: {
 13844                           ;PS_2.c: 223: return (1);
 13845  195A  3001               	movlw	1
 13846                           
 13847                           ;PS_2.c: 224: }
 13848  195B  0008               	return
 13849  195C                     i1l4626:	
 13850                           
 13851                           ;PS_2.c: 225: else
 13852                           ;PS_2.c: 226: {
 13853                           ;PS_2.c: 227: return 0;
 13854  195C  3000               	movlw	0
 13855                           
 13856                           ;PS_2.c: 228: }
 13857                           ;PS_2.c: 229: }
 13858  195D  0008               	return
 13859  195E                     i1l647:	
 13860                           
 13861                           ;PS_2.c: 230: else
 13862                           ;PS_2.c: 231: {
 13863                           ;PS_2.c: 233: if((PORTA & 0b00010000) == 0b00010000)
 13864  195E  0020               	movlb	0	; select bank0
 13865  195F  1E0C               	btfss	12,4	;volatile
 13866  1960  2963               	goto	i1l4636
 13867                           
 13868                           ;PS_2.c: 234: {
 13869                           ;PS_2.c: 235: return (1);
 13870  1961  3001               	movlw	1
 13871                           
 13872                           ;PS_2.c: 236: }
 13873  1962  0008               	return
 13874  1963                     i1l4636:	
 13875                           
 13876                           ;PS_2.c: 237: else
 13877                           ;PS_2.c: 238: {
 13878                           ;PS_2.c: 239: return 0;
 13879  1963  3000               	movlw	0
 13880  1964  0008               	return
 13881  1965                     __end_ofi1_READ_PS_2_PIN:	
 13882                           
 13883                           	psect	text46
 13884  1867                     __ptext46:	
 13885 ;; *************** function i1_Data_TRIS *****************
 13886 ;; Defined at:
 13887 ;;		line 131 in file "PS_2.c"
 13888 ;; Parameters:    Size  Location     Type
 13889 ;;  direction       1    wreg     unsigned char 
 13890 ;; Auto vars:     Size  Location     Type
 13891 ;;  direction       1    0[COMMON] unsigned char 
 13892 ;; Return value:  Size  Location     Type
 13893 ;;		None               void
 13894 ;; Registers used:
 13895 ;;		wreg, status,2, status,0
 13896 ;; Tracked objects:
 13897 ;;		On entry : 0/0
 13898 ;;		On exit  : 0/0
 13899 ;;		Unchanged: 0/0
 13900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13902 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13904 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13905 ;;Total ram usage:        1 bytes
 13906 ;; Hardware stack levels used:    1
 13907 ;; This function calls:
 13908 ;;		Nothing
 13909 ;; This function is called by:
 13910 ;;		i1_Send_PS2
 13911 ;; This function uses a non-reentrant model
 13912 ;;
 13913                           
 13914                           
 13915                           ;psect for function i1_Data_TRIS
 13916  1867                     i1_Data_TRIS:	
 13917                           
 13918                           ;incstack = 0
 13919                           ; Regs used in i1_Data_TRIS: [wreg+status,2+status,0]
 13920                           ;i1Data_TRIS@direction stored from wreg
 13921  1867  00F0               	movwf	i1Data_TRIS@direction
 13922                           
 13923                           ;PS_2.c: 133: if(direction == 0)
 13924  1868  08F0               	movf	i1Data_TRIS@direction,f
 13925  1869  1D03               	skipz
 13926  186A  286E               	goto	i1l627
 13927                           
 13928                           ;PS_2.c: 134: {
 13929                           ;PS_2.c: 135: TRISAbits.TRISA4 = 0;
 13930  186B  0021               	movlb	1	; select bank1
 13931  186C  120C               	bcf	12,4	;volatile
 13932                           
 13933                           ;PS_2.c: 136: }
 13934  186D  0008               	return
 13935  186E                     i1l627:	
 13936                           
 13937                           ;PS_2.c: 137: else
 13938                           ;PS_2.c: 138: {
 13939                           ;PS_2.c: 139: TRISAbits.TRISA4 = 1;
 13940  186E  0021               	movlb	1	; select bank1
 13941  186F  160C               	bsf	12,4	;volatile
 13942  1870  0008               	return
 13943  1871                     __end_ofi1_Data_TRIS:	
 13944                           
 13945                           	psect	text47
 13946  185D                     __ptext47:	
 13947 ;; *************** function i1_Clock_TRIS *****************
 13948 ;; Defined at:
 13949 ;;		line 114 in file "PS_2.c"
 13950 ;; Parameters:    Size  Location     Type
 13951 ;;  direction       1    wreg     unsigned char 
 13952 ;; Auto vars:     Size  Location     Type
 13953 ;;  direction       1    0[COMMON] unsigned char 
 13954 ;; Return value:  Size  Location     Type
 13955 ;;		None               void
 13956 ;; Registers used:
 13957 ;;		wreg, status,2, status,0
 13958 ;; Tracked objects:
 13959 ;;		On entry : 0/0
 13960 ;;		On exit  : 0/0
 13961 ;;		Unchanged: 0/0
 13962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13964 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13966 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13967 ;;Total ram usage:        1 bytes
 13968 ;; Hardware stack levels used:    1
 13969 ;; This function calls:
 13970 ;;		Nothing
 13971 ;; This function is called by:
 13972 ;;		i1_Send_PS2
 13973 ;; This function uses a non-reentrant model
 13974 ;;
 13975                           
 13976                           
 13977                           ;psect for function i1_Clock_TRIS
 13978  185D                     i1_Clock_TRIS:	
 13979                           
 13980                           ;incstack = 0
 13981                           ; Regs used in i1_Clock_TRIS: [wreg+status,2+status,0]
 13982                           ;i1Clock_TRIS@direction stored from wreg
 13983  185D  00F0               	movwf	i1Clock_TRIS@direction
 13984                           
 13985                           ;PS_2.c: 116: if(direction == 0)
 13986  185E  08F0               	movf	i1Clock_TRIS@direction,f
 13987  185F  1D03               	skipz
 13988  1860  2864               	goto	i1l622
 13989                           
 13990                           ;PS_2.c: 117: {
 13991                           ;PS_2.c: 118: TRISAbits.TRISA5 = 0;
 13992  1861  0021               	movlb	1	; select bank1
 13993  1862  128C               	bcf	12,5	;volatile
 13994                           
 13995                           ;PS_2.c: 119: }
 13996  1863  0008               	return
 13997  1864                     i1l622:	
 13998                           
 13999                           ;PS_2.c: 120: else
 14000                           ;PS_2.c: 121: {
 14001                           ;PS_2.c: 122: TRISAbits.TRISA5 = 1;
 14002  1864  0021               	movlb	1	; select bank1
 14003  1865  168C               	bsf	12,5	;volatile
 14004  1866  0008               	return
 14005  1867                     __end_ofi1_Clock_TRIS:	
 14006                           
 14007                           	psect	text48
 14008  06DF                     __ptext48:	
 14009 ;; *************** function _cleanBuffer *****************
 14010 ;; Defined at:
 14011 ;;		line 159 in file "MISC.c"
 14012 ;; Parameters:    Size  Location     Type
 14013 ;;  data            1    wreg     PTR unsigned char 
 14014 ;;		 -> PS_2_ScanCodes(12), 
 14015 ;;  count           2    0[COMMON] int 
 14016 ;; Auto vars:     Size  Location     Type
 14017 ;;  data            1    3[COMMON] PTR unsigned char 
 14018 ;;		 -> PS_2_ScanCodes(12), 
 14019 ;;  i               1    4[COMMON] unsigned char 
 14020 ;; Return value:  Size  Location     Type
 14021 ;;		None               void
 14022 ;; Registers used:
 14023 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14024 ;; Tracked objects:
 14025 ;;		On entry : 0/0
 14026 ;;		On exit  : 0/0
 14027 ;;		Unchanged: 0/0
 14028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14029 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14030 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14031 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14032 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14033 ;;Total ram usage:        5 bytes
 14034 ;; Hardware stack levels used:    1
 14035 ;; This function calls:
 14036 ;;		Nothing
 14037 ;; This function is called by:
 14038 ;;		_Process_PS2_ScanCode
 14039 ;; This function uses a non-reentrant model
 14040 ;;
 14041                           
 14042                           
 14043                           ;psect for function _cleanBuffer
 14044  06DF                     _cleanBuffer:	
 14045                           
 14046                           ;incstack = 0
 14047                           ; Regs used in _cleanBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
 14048                           ;cleanBuffer@data stored from wreg
 14049  06DF  00F3               	movwf	cleanBuffer@data
 14050                           
 14051                           ;MISC.c: 161: unsigned char i=0;
 14052  06E0  01F4               	clrf	cleanBuffer@i
 14053                           
 14054                           ;MISC.c: 162: for(i=0; i<count;i++)
 14055  06E1  01F4               	clrf	cleanBuffer@i
 14056  06E2                     i1l4796:	
 14057  06E2  0871               	movf	cleanBuffer@count+1,w
 14058  06E3  3A80               	xorlw	128
 14059  06E4  3C80               	sublw	128
 14060  06E5  1D03               	skipz
 14061  06E6  2EE9               	goto	u542_25
 14062  06E7  0870               	movf	cleanBuffer@count,w
 14063  06E8  0274               	subwf	cleanBuffer@i,w
 14064  06E9                     u542_25:	
 14065  06E9  1803               	btfsc	3,0
 14066  06EA  0008               	return
 14067                           
 14068                           ;MISC.c: 163: {
 14069                           ;MISC.c: 164: data[i]= 0;
 14070  06EB  0874               	movf	cleanBuffer@i,w
 14071  06EC  0773               	addwf	cleanBuffer@data,w
 14072  06ED  00F2               	movwf	??_cleanBuffer
 14073  06EE  0872               	movf	??_cleanBuffer,w
 14074  06EF  0086               	movwf	6
 14075  06F0  0187               	clrf	7
 14076  06F1  0181               	clrf	1
 14077  06F2  3001               	movlw	1
 14078  06F3  00F2               	movwf	??_cleanBuffer
 14079  06F4  0872               	movf	??_cleanBuffer,w
 14080  06F5  07F4               	addwf	cleanBuffer@i,f
 14081  06F6  2EE2               	goto	i1l4796
 14082  06F7                     __end_of_cleanBuffer:	
 14083                           
 14084                           	psect	text49
 14085  1A81                     __ptext49:	
 14086 ;; *************** function ___lmul *****************
 14087 ;; Defined at:
 14088 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul32.c"
 14089 ;; Parameters:    Size  Location     Type
 14090 ;;  multiplier      4    0[COMMON] unsigned long 
 14091 ;;  multiplicand    4    4[COMMON] unsigned long 
 14092 ;; Auto vars:     Size  Location     Type
 14093 ;;  product         4    8[COMMON] unsigned long 
 14094 ;; Return value:  Size  Location     Type
 14095 ;;                  4    0[COMMON] unsigned long 
 14096 ;; Registers used:
 14097 ;;		wreg, status,2, status,0
 14098 ;; Tracked objects:
 14099 ;;		On entry : 0/0
 14100 ;;		On exit  : 0/0
 14101 ;;		Unchanged: 0/0
 14102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14103 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14104 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14106 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14107 ;;Total ram usage:       12 bytes
 14108 ;; Hardware stack levels used:    1
 14109 ;; This function calls:
 14110 ;;		Nothing
 14111 ;; This function is called by:
 14112 ;;		_Process_PS2_ScanCode
 14113 ;; This function uses a non-reentrant model
 14114 ;;
 14115                           
 14116                           
 14117                           ;psect for function ___lmul
 14118  1A81                     ___lmul:	
 14119                           
 14120                           ;incstack = 0
 14121                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 14122  1A81  3000               	movlw	0
 14123  1A82  00FB               	movwf	___lmul@product+3
 14124  1A83  3000               	movlw	0
 14125  1A84  00FA               	movwf	___lmul@product+2
 14126  1A85  3000               	movlw	0
 14127  1A86  00F9               	movwf	___lmul@product+1
 14128  1A87  3000               	movlw	0
 14129  1A88  00F8               	movwf	___lmul@product
 14130  1A89                     i1l5004:	
 14131  1A89  1C70               	btfss	___lmul@multiplier,0
 14132  1A8A  2A93               	goto	i1l5008
 14133  1A8B  0874               	movf	___lmul@multiplicand,w
 14134  1A8C  07F8               	addwf	___lmul@product,f
 14135  1A8D  0875               	movf	___lmul@multiplicand+1,w
 14136  1A8E  3DF9               	addwfc	___lmul@product+1,f
 14137  1A8F  0876               	movf	___lmul@multiplicand+2,w
 14138  1A90  3DFA               	addwfc	___lmul@product+2,f
 14139  1A91  0877               	movf	___lmul@multiplicand+3,w
 14140  1A92  3DFB               	addwfc	___lmul@product+3,f
 14141  1A93                     i1l5008:	
 14142  1A93  3001               	movlw	1
 14143  1A94                     u569_25:	
 14144  1A94  35F4               	lslf	___lmul@multiplicand,f
 14145  1A95  0DF5               	rlf	___lmul@multiplicand+1,f
 14146  1A96  0DF6               	rlf	___lmul@multiplicand+2,f
 14147  1A97  0DF7               	rlf	___lmul@multiplicand+3,f
 14148  1A98  0B89               	decfsz	9,f
 14149  1A99  2A94               	goto	u569_25
 14150  1A9A  3001               	movlw	1
 14151  1A9B                     u570_25:	
 14152  1A9B  36F3               	lsrf	___lmul@multiplier+3,f
 14153  1A9C  0CF2               	rrf	___lmul@multiplier+2,f
 14154  1A9D  0CF1               	rrf	___lmul@multiplier+1,f
 14155  1A9E  0CF0               	rrf	___lmul@multiplier,f
 14156  1A9F  0B89               	decfsz	9,f
 14157  1AA0  2A9B               	goto	u570_25
 14158  1AA1  0873               	movf	___lmul@multiplier+3,w
 14159  1AA2  0472               	iorwf	___lmul@multiplier+2,w
 14160  1AA3  0471               	iorwf	___lmul@multiplier+1,w
 14161  1AA4  0470               	iorwf	___lmul@multiplier,w
 14162  1AA5  1D03               	skipz
 14163  1AA6  2A89               	goto	i1l5004
 14164  1AA7  087B               	movf	___lmul@product+3,w
 14165  1AA8  00F3               	movwf	?___lmul+3
 14166  1AA9  087A               	movf	___lmul@product+2,w
 14167  1AAA  00F2               	movwf	?___lmul+2
 14168  1AAB  0879               	movf	___lmul@product+1,w
 14169  1AAC  00F1               	movwf	?___lmul+1
 14170  1AAD  0878               	movf	___lmul@product,w
 14171  1AAE  00F0               	movwf	?___lmul
 14172  1AAF  0008               	return
 14173  1AB0                     __end_of___lmul:	
 14174                           
 14175                           	psect	text50
 14176  19B0                     __ptext50:	
 14177 ;; *************** function _UART_send_break_timed *****************
 14178 ;; Defined at:
 14179 ;;		line 334 in file "UART.c"
 14180 ;; Parameters:    Size  Location     Type
 14181 ;;  US              2   10[COMMON] unsigned int 
 14182 ;; Auto vars:     Size  Location     Type
 14183 ;;		None
 14184 ;; Return value:  Size  Location     Type
 14185 ;;		None               void
 14186 ;; Registers used:
 14187 ;;		wreg, status,2, status,0, pclath, cstack
 14188 ;; Tracked objects:
 14189 ;;		On entry : 0/0
 14190 ;;		On exit  : 0/0
 14191 ;;		Unchanged: 0/0
 14192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14193 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14195 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14196 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14197 ;;Total ram usage:        3 bytes
 14198 ;; Hardware stack levels used:    1
 14199 ;; Hardware stack levels required when called:    1
 14200 ;; This function calls:
 14201 ;;		i1_delayUS
 14202 ;; This function is called by:
 14203 ;;		_isr
 14204 ;;		_Process_PS2_ScanCode
 14205 ;; This function uses a non-reentrant model
 14206 ;;
 14207                           
 14208                           
 14209                           ;psect for function _UART_send_break_timed
 14210  19B0                     _UART_send_break_timed:	
 14211                           
 14212                           ;UART.c: 337: LATC |= 0b00000100;
 14213                           
 14214                           ;incstack = 0
 14215                           ; Regs used in _UART_send_break_timed: [wreg+status,2+status,0+pclath+cstack]
 14216  19B0  0022               	movlb	2	; select bank2
 14217  19B1  150E               	bsf	14,2	;volatile
 14218                           
 14219                           ;UART.c: 338: PPSLOCK =0;
 14220  19B2  003C               	movlb	28	; select bank28
 14221  19B3  018F               	clrf	15	;volatile
 14222                           
 14223                           ;UART.c: 339: RC2PPS = 0b00000000;
 14224  19B4  003D               	movlb	29	; select bank29
 14225  19B5  01A2               	clrf	34	;volatile
 14226                           
 14227                           ;UART.c: 340: PPSLOCK =1;
 14228  19B6  3001               	movlw	1
 14229  19B7  003C               	movlb	28	; select bank28
 14230  19B8  008F               	movwf	15	;volatile
 14231                           
 14232                           ;UART.c: 342: LATC &= ~0b00000100;
 14233  19B9  30FB               	movlw	251
 14234  19BA  00FC               	movwf	??_UART_send_break_timed
 14235  19BB  087C               	movf	??_UART_send_break_timed,w
 14236  19BC  0022               	movlb	2	; select bank2
 14237  19BD  058E               	andwf	14,f	;volatile
 14238                           
 14239                           ;UART.c: 343: delayUS(US);
 14240  19BE  087A               	movf	UART_send_break_timed@US,w
 14241  19BF  00F0               	movwf	i1delayUS@US
 14242  19C0  087B               	movf	UART_send_break_timed@US+1,w
 14243  19C1  00F1               	movwf	i1delayUS@US+1
 14244  19C2  01F2               	clrf	i1delayUS@US+2
 14245  19C3  01F3               	clrf	i1delayUS@US+3
 14246  19C4  319B  2375         	fcall	i1_delayUS
 14247                           
 14248                           ;UART.c: 344: LATC |= 0b00000100;
 14249  19C6  0022               	movlb	2	; select bank2
 14250  19C7  150E               	bsf	14,2	;volatile
 14251                           
 14252                           ;UART.c: 346: PPSLOCK =0;
 14253  19C8  003C               	movlb	28	; select bank28
 14254  19C9  018F               	clrf	15	;volatile
 14255                           
 14256                           ;UART.c: 347: RC2PPS = 0b00010100;
 14257  19CA  3014               	movlw	20
 14258  19CB  003D               	movlb	29	; select bank29
 14259  19CC  00A2               	movwf	34	;volatile
 14260                           
 14261                           ;UART.c: 348: CKPPS = 0b00010010;
 14262  19CD  3012               	movlw	18
 14263  19CE  003C               	movlb	28	; select bank28
 14264  19CF  00A5               	movwf	37	;volatile
 14265                           
 14266                           ;UART.c: 350: RXPPS = 0b00010101;
 14267  19D0  3015               	movlw	21
 14268  19D1  00A4               	movwf	36	;volatile
 14269                           
 14270                           ;UART.c: 352: PPSLOCK =1;
 14271  19D2  3001               	movlw	1
 14272  19D3  008F               	movwf	15	;volatile
 14273  19D4  0008               	return
 14274  19D5                     __end_of_UART_send_break_timed:	
 14275                           
 14276                           	psect	text51
 14277  1000                     __ptext51:	
 14278 ;; *************** function _UART_send_break *****************
 14279 ;; Defined at:
 14280 ;;		line 322 in file "UART.c"
 14281 ;; Parameters:    Size  Location     Type
 14282 ;;		None
 14283 ;; Auto vars:     Size  Location     Type
 14284 ;;		None
 14285 ;; Return value:  Size  Location     Type
 14286 ;;		None               void
 14287 ;; Registers used:
 14288 ;;		wreg
 14289 ;; Tracked objects:
 14290 ;;		On entry : 0/0
 14291 ;;		On exit  : 0/0
 14292 ;;		Unchanged: 0/0
 14293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14297 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14298 ;;Total ram usage:        0 bytes
 14299 ;; Hardware stack levels used:    1
 14300 ;; This function calls:
 14301 ;;		Nothing
 14302 ;; This function is called by:
 14303 ;;		_Process_PS2_ScanCode
 14304 ;; This function uses a non-reentrant model
 14305 ;;
 14306                           
 14307                           
 14308                           ;psect for function _UART_send_break
 14309  1000                     _UART_send_break:	
 14310                           
 14311                           ;UART.c: 324: TX1STA |= 0b00001000;
 14312                           
 14313                           ;incstack = 0
 14314                           ; Regs used in _UART_send_break: [wreg]
 14315  1000  0023               	movlb	3	; select bank3
 14316  1001  159E               	bsf	30,3	;volatile
 14317                           
 14318                           ;UART.c: 325: TXREG = 'd';
 14319  1002  3064               	movlw	100
 14320  1003  009A               	movwf	26	;volatile
 14321  1004  0008               	return
 14322  1005                     __end_of_UART_send_break:	
 14323                           
 14324                           	psect	text52
 14325  0B65                     __ptext52:	
 14326 ;; *************** function _SetBaud *****************
 14327 ;; Defined at:
 14328 ;;		line 380 in file "UART.c"
 14329 ;; Parameters:    Size  Location     Type
 14330 ;;  Baud            4   15[BANK1 ] unsigned long 
 14331 ;;  Parity          1   19[BANK1 ] unsigned char 
 14332 ;; Auto vars:     Size  Location     Type
 14333 ;;  buf            50    0[BANK2 ] unsigned char [50]
 14334 ;;  temp            4   58[BANK2 ] unsigned long 
 14335 ;;  Paritytemp      4   54[BANK2 ] unsigned long 
 14336 ;;  Baudtemp        4   50[BANK2 ] unsigned long 
 14337 ;;  i               1   62[BANK2 ] unsigned char 
 14338 ;; Return value:  Size  Location     Type
 14339 ;;		None               void
 14340 ;; Registers used:
 14341 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14342 ;; Tracked objects:
 14343 ;;		On entry : 0/0
 14344 ;;		On exit  : 0/0
 14345 ;;		Unchanged: 0/0
 14346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14347 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 14348 ;;      Locals:         0       0       0      63       0       0       0       0       0       0       0       0       
      +0       0
 14349 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
 14350 ;;      Totals:         0       0      13      63       0       0       0       0       0       0       0       0       
      +0       0
 14351 ;;Total ram usage:       76 bytes
 14352 ;; Hardware stack levels used:    1
 14353 ;; Hardware stack levels required when called:    4
 14354 ;; This function calls:
 14355 ;;		_WriteBaud
 14356 ;;		_sprintf
 14357 ;;		i1_InitUART
 14358 ;;		i1_ReadBaud
 14359 ;;		i1_UARTstringWAIT
 14360 ;;		i1_delayUS
 14361 ;; This function is called by:
 14362 ;;		_Process_PS2_ScanCode
 14363 ;; This function uses a non-reentrant model
 14364 ;;
 14365                           
 14366                           
 14367                           ;psect for function _SetBaud
 14368  0B65                     _SetBaud:	
 14369                           
 14370                           ;UART.c: 382: unsigned char buf[50];
 14371                           ;UART.c: 383: unsigned long Baudtemp=0;
 14372                           
 14373                           ;incstack = 0
 14374                           ; Regs used in _SetBaud: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14375  0B65  3000               	movlw	0
 14376  0B66  0022               	movlb	2	; select bank2
 14377  0B67  00D5               	movwf	(SetBaud@Baudtemp+3)^(0+256)
 14378  0B68  3000               	movlw	0
 14379  0B69  00D4               	movwf	(SetBaud@Baudtemp+2)^(0+256)
 14380  0B6A  3000               	movlw	0
 14381  0B6B  00D3               	movwf	(SetBaud@Baudtemp+1)^(0+256)
 14382  0B6C  3000               	movlw	0
 14383  0B6D  00D2               	movwf	SetBaud@Baudtemp^(0+256)
 14384                           
 14385                           ;UART.c: 384: unsigned long Paritytemp=0;
 14386  0B6E  3000               	movlw	0
 14387  0B6F  00D9               	movwf	(SetBaud@Paritytemp+3)^(0+256)
 14388  0B70  3000               	movlw	0
 14389  0B71  00D8               	movwf	(SetBaud@Paritytemp+2)^(0+256)
 14390  0B72  3000               	movlw	0
 14391  0B73  00D7               	movwf	(SetBaud@Paritytemp+1)^(0+256)
 14392  0B74  3000               	movlw	0
 14393  0B75  00D6               	movwf	SetBaud@Paritytemp^(0+256)
 14394                           
 14395                           ;UART.c: 385: unsigned long temp;
 14396                           ;UART.c: 386: unsigned char i =0;
 14397  0B76  01DE               	clrf	SetBaud@i^(0+256)
 14398                           
 14399                           ;UART.c: 388: WriteBaud((0x1800 >> 5), Baud, Parity);
 14400  0B77  30C0               	movlw	192
 14401  0B78  0021               	movlb	1	; select bank1
 14402  0B79  00A0               	movwf	WriteBaud@row^(0+128)
 14403  0B7A  3000               	movlw	0
 14404  0B7B  00A1               	movwf	(WriteBaud@row^(0+128)+1)
 14405  0B7C  0832               	movf	(SetBaud@Baud+3)^(0+128),w
 14406  0B7D  00A5               	movwf	(WriteBaud@Baud+3)^(0+128)
 14407  0B7E  0831               	movf	(SetBaud@Baud+2)^(0+128),w
 14408  0B7F  00A4               	movwf	(WriteBaud@Baud+2)^(0+128)
 14409  0B80  0830               	movf	(SetBaud@Baud+1)^(0+128),w
 14410  0B81  00A3               	movwf	(WriteBaud@Baud+1)^(0+128)
 14411  0B82  082F               	movf	SetBaud@Baud^(0+128),w
 14412  0B83  00A2               	movwf	WriteBaud@Baud^(0+128)
 14413  0B84  0833               	movf	SetBaud@Parity^(0+128),w
 14414  0B85  00B4               	movwf	??_SetBaud^(0+128)
 14415  0B86  0834               	movf	??_SetBaud^(0+128),w
 14416  0B87  00A6               	movwf	WriteBaud@Parity^(0+128)
 14417  0B88  3191  21A6  318B   	fcall	_WriteBaud
 14418                           
 14419                           ;UART.c: 389: temp = ReadBaud((0x1800 >> 5), 0);
 14420  0B8B  30C0               	movlw	192
 14421  0B8C  0020               	movlb	0	; select bank0
 14422  0B8D  00A4               	movwf	i1ReadBaud@row
 14423  0B8E  3000               	movlw	0
 14424  0B8F  00A5               	movwf	i1ReadBaud@row+1
 14425  0B90  01A6               	clrf	i1ReadBaud@column
 14426  0B91  3190  20DE  318B   	fcall	i1_ReadBaud
 14427  0B94  0020               	movlb	0	; select bank0
 14428  0B95  0827               	movf	?i1_ReadBaud+3,w
 14429  0B96  0022               	movlb	2	; select bank2
 14430  0B97  00DD               	movwf	(SetBaud@temp+3)^(0+256)
 14431  0B98  0020               	movlb	0	; select bank0
 14432  0B99  0826               	movf	?i1_ReadBaud+2,w
 14433  0B9A  0022               	movlb	2	; select bank2
 14434  0B9B  00DC               	movwf	(SetBaud@temp+2)^(0+256)
 14435  0B9C  0020               	movlb	0	; select bank0
 14436  0B9D  0825               	movf	?i1_ReadBaud+1,w
 14437  0B9E  0022               	movlb	2	; select bank2
 14438  0B9F  00DB               	movwf	(SetBaud@temp+1)^(0+256)
 14439  0BA0  0020               	movlb	0	; select bank0
 14440  0BA1  0824               	movf	?i1_ReadBaud,w
 14441  0BA2  0022               	movlb	2	; select bank2
 14442  0BA3  00DA               	movwf	SetBaud@temp^(0+256)
 14443                           
 14444                           ;UART.c: 390: Baudtemp = temp & 0x000FFFFF;
 14445  0BA4  30FF               	movlw	255
 14446  0BA5  055A               	andwf	SetBaud@temp^(0+256),w
 14447  0BA6  00D2               	movwf	SetBaud@Baudtemp^(0+256)
 14448  0BA7  30FF               	movlw	255
 14449  0BA8  055B               	andwf	(SetBaud@temp+1)^(0+256),w
 14450  0BA9  00D3               	movwf	(SetBaud@Baudtemp+1)^(0+256)
 14451  0BAA  300F               	movlw	15
 14452  0BAB  055C               	andwf	(SetBaud@temp+2)^(0+256),w
 14453  0BAC  00D4               	movwf	(SetBaud@Baudtemp+2)^(0+256)
 14454  0BAD  3000               	movlw	0
 14455  0BAE  055D               	andwf	(SetBaud@temp+3)^(0+256),w
 14456  0BAF  00D5               	movwf	(SetBaud@Baudtemp+3)^(0+256)
 14457                           
 14458                           ;UART.c: 391: Paritytemp = (unsigned char)((temp & 0x00F00000) >> 20);
 14459  0BB0  085A               	movf	SetBaud@temp^(0+256),w
 14460  0BB1  0021               	movlb	1	; select bank1
 14461  0BB2  00B4               	movwf	??_SetBaud^(0+128)
 14462  0BB3  0022               	movlb	2	; select bank2
 14463  0BB4  085B               	movf	(SetBaud@temp+1)^(0+256),w
 14464  0BB5  0021               	movlb	1	; select bank1
 14465  0BB6  00B5               	movwf	(??_SetBaud^(0+128)+1)
 14466  0BB7  0022               	movlb	2	; select bank2
 14467  0BB8  085C               	movf	(SetBaud@temp+2)^(0+256),w
 14468  0BB9  0021               	movlb	1	; select bank1
 14469  0BBA  00B6               	movwf	(??_SetBaud^(0+128)+2)
 14470  0BBB  0022               	movlb	2	; select bank2
 14471  0BBC  085D               	movf	(SetBaud@temp+3)^(0+256),w
 14472  0BBD  0021               	movlb	1	; select bank1
 14473  0BBE  00B7               	movwf	(??_SetBaud^(0+128)+3)
 14474  0BBF  3014               	movlw	20
 14475  0BC0                     u546_25:	
 14476  0BC0  36B7               	lsrf	(??_SetBaud^(0+128)+3),f
 14477  0BC1  0CB6               	rrf	(??_SetBaud^(0+128)+2),f
 14478  0BC2  0CB5               	rrf	(??_SetBaud^(0+128)+1),f
 14479  0BC3  0CB4               	rrf	??_SetBaud^(0+128),f
 14480  0BC4  0B89               	decfsz	9,f
 14481  0BC5  2BC0               	goto	u546_25
 14482  0BC6  0834               	movf	??_SetBaud^(0+128),w
 14483  0BC7  390F               	andlw	15
 14484  0BC8  00B8               	movwf	(??_SetBaud+4)^(0+128)
 14485  0BC9  01B9               	clrf	((??_SetBaud+4)^(0+128)+1)
 14486  0BCA  01BA               	clrf	((??_SetBaud+4)^(0+128)+2)
 14487  0BCB  01BB               	clrf	((??_SetBaud+4)^(0+128)+3)
 14488  0BCC  083B               	movf	(??_SetBaud+7)^(0+128),w
 14489  0BCD  0022               	movlb	2	; select bank2
 14490  0BCE  00D9               	movwf	(SetBaud@Paritytemp+3)^(0+256)
 14491  0BCF  0021               	movlb	1	; select bank1
 14492  0BD0  083A               	movf	(??_SetBaud+6)^(0+128),w
 14493  0BD1  0022               	movlb	2	; select bank2
 14494  0BD2  00D8               	movwf	(SetBaud@Paritytemp+2)^(0+256)
 14495  0BD3  0021               	movlb	1	; select bank1
 14496  0BD4  0839               	movf	(??_SetBaud+5)^(0+128),w
 14497  0BD5  0022               	movlb	2	; select bank2
 14498  0BD6  00D7               	movwf	(SetBaud@Paritytemp+1)^(0+256)
 14499  0BD7  0021               	movlb	1	; select bank1
 14500  0BD8  0838               	movf	(??_SetBaud+4)^(0+128),w
 14501  0BD9  0022               	movlb	2	; select bank2
 14502  0BDA  00D6               	movwf	SetBaud@Paritytemp^(0+256)
 14503                           
 14504                           ;UART.c: 393: InitUART(Baud, Parity);
 14505  0BDB  0021               	movlb	1	; select bank1
 14506  0BDC  0832               	movf	(SetBaud@Baud+3)^(0+128),w
 14507  0BDD  0020               	movlb	0	; select bank0
 14508  0BDE  00A3               	movwf	i1InitUART@Baud+3
 14509  0BDF  0021               	movlb	1	; select bank1
 14510  0BE0  0831               	movf	(SetBaud@Baud+2)^(0+128),w
 14511  0BE1  0020               	movlb	0	; select bank0
 14512  0BE2  00A2               	movwf	i1InitUART@Baud+2
 14513  0BE3  0021               	movlb	1	; select bank1
 14514  0BE4  0830               	movf	(SetBaud@Baud+1)^(0+128),w
 14515  0BE5  0020               	movlb	0	; select bank0
 14516  0BE6  00A1               	movwf	i1InitUART@Baud+1
 14517  0BE7  0021               	movlb	1	; select bank1
 14518  0BE8  082F               	movf	SetBaud@Baud^(0+128),w
 14519  0BE9  0020               	movlb	0	; select bank0
 14520  0BEA  00A0               	movwf	i1InitUART@Baud
 14521  0BEB  0021               	movlb	1	; select bank1
 14522  0BEC  0833               	movf	SetBaud@Parity^(0+128),w
 14523  0BED  00B4               	movwf	??_SetBaud^(0+128)
 14524  0BEE  0834               	movf	??_SetBaud^(0+128),w
 14525  0BEF  0020               	movlb	0	; select bank0
 14526  0BF0  00A4               	movwf	i1InitUART@parity
 14527  0BF1  3195  2522  318B   	fcall	i1_InitUART
 14528                           
 14529                           ;UART.c: 394: UARTstringWAIT("\r\n");
 14530  0BF4  30FC               	movlw	low ((STR_14+16)| (0+32768))
 14531  0BF5  0020               	movlb	0	; select bank0
 14532  0BF6  00A1               	movwf	i1UARTstringWAIT@data
 14533  0BF7  3089               	movlw	high ((STR_14+16)| (0+32768))
 14534  0BF8  00A2               	movwf	i1UARTstringWAIT@data+1
 14535  0BF9  319B  2311  318B   	fcall	i1_UARTstringWAIT
 14536                           
 14537                           ;UART.c: 395: delayUS(15000);
 14538  0BFC  3000               	movlw	0
 14539  0BFD  00F3               	movwf	i1delayUS@US+3
 14540  0BFE  3000               	movlw	0
 14541  0BFF  00F2               	movwf	i1delayUS@US+2
 14542  0C00  303A               	movlw	58
 14543  0C01  00F1               	movwf	i1delayUS@US+1
 14544  0C02  3098               	movlw	152
 14545  0C03  00F0               	movwf	i1delayUS@US
 14546  0C04  319B  2375  318B   	fcall	i1_delayUS
 14547                           
 14548                           ;UART.c: 396: if((Baud != Baudtemp) || (Parity != Paritytemp))
 14549  0C07  0022               	movlb	2	; select bank2
 14550  0C08  0855               	movf	(SetBaud@Baudtemp+3)^(0+256),w
 14551  0C09  0021               	movlb	1	; select bank1
 14552  0C0A  0632               	xorwf	(SetBaud@Baud+3)^(0+128),w
 14553  0C0B  1D03               	skipz
 14554  0C0C  2C1D               	goto	u547_25
 14555  0C0D  0022               	movlb	2	; select bank2
 14556  0C0E  0854               	movf	(SetBaud@Baudtemp+2)^(0+256),w
 14557  0C0F  0021               	movlb	1	; select bank1
 14558  0C10  0631               	xorwf	(SetBaud@Baud+2)^(0+128),w
 14559  0C11  1D03               	skipz
 14560  0C12  2C1D               	goto	u547_25
 14561  0C13  0022               	movlb	2	; select bank2
 14562  0C14  0853               	movf	(SetBaud@Baudtemp+1)^(0+256),w
 14563  0C15  0021               	movlb	1	; select bank1
 14564  0C16  0630               	xorwf	(SetBaud@Baud+1)^(0+128),w
 14565  0C17  1D03               	skipz
 14566  0C18  2C1D               	goto	u547_25
 14567  0C19  0022               	movlb	2	; select bank2
 14568  0C1A  0852               	movf	SetBaud@Baudtemp^(0+256),w
 14569  0C1B  0021               	movlb	1	; select bank1
 14570  0C1C  062F               	xorwf	SetBaud@Baud^(0+128),w
 14571  0C1D                     u547_25:	
 14572  0C1D  1D03               	skipz
 14573  0C1E  2C3C               	goto	i1l4842
 14574  0C1F  0833               	movf	SetBaud@Parity^(0+128),w
 14575  0C20  00B4               	movwf	??_SetBaud^(0+128)
 14576  0C21  01B5               	clrf	(??_SetBaud^(0+128)+1)
 14577  0C22  01B6               	clrf	(??_SetBaud^(0+128)+2)
 14578  0C23  01B7               	clrf	(??_SetBaud^(0+128)+3)
 14579  0C24  0022               	movlb	2	; select bank2
 14580  0C25  0859               	movf	(SetBaud@Paritytemp+3)^(0+256),w
 14581  0C26  0021               	movlb	1	; select bank1
 14582  0C27  0637               	xorwf	(??_SetBaud+3)^(0+128),w
 14583  0C28  1D03               	skipz
 14584  0C29  2C3A               	goto	u548_25
 14585  0C2A  0022               	movlb	2	; select bank2
 14586  0C2B  0858               	movf	(SetBaud@Paritytemp+2)^(0+256),w
 14587  0C2C  0021               	movlb	1	; select bank1
 14588  0C2D  0636               	xorwf	(??_SetBaud+2)^(0+128),w
 14589  0C2E  1D03               	skipz
 14590  0C2F  2C3A               	goto	u548_25
 14591  0C30  0022               	movlb	2	; select bank2
 14592  0C31  0857               	movf	(SetBaud@Paritytemp+1)^(0+256),w
 14593  0C32  0021               	movlb	1	; select bank1
 14594  0C33  0635               	xorwf	(??_SetBaud+1)^(0+128),w
 14595  0C34  1D03               	skipz
 14596  0C35  2C3A               	goto	u548_25
 14597  0C36  0022               	movlb	2	; select bank2
 14598  0C37  0856               	movf	SetBaud@Paritytemp^(0+256),w
 14599  0C38  0021               	movlb	1	; select bank1
 14600  0C39  0634               	xorwf	??_SetBaud^(0+128),w
 14601  0C3A                     u548_25:	
 14602  0C3A  1903               	skipnz
 14603  0C3B  2C4F               	goto	i1l4846
 14604  0C3C                     i1l4842:	
 14605                           
 14606                           ;UART.c: 397: {
 14607                           ;UART.c: 398: UARTstringWAIT("Flash Program Fail\r\n");
 14608  0C3C  30C3               	movlw	low (STR_10| (0+32768))
 14609  0C3D  0020               	movlb	0	; select bank0
 14610  0C3E  00A1               	movwf	i1UARTstringWAIT@data
 14611  0C3F  3089               	movlw	high (STR_10| (0+32768))
 14612  0C40  00A2               	movwf	i1UARTstringWAIT@data+1
 14613  0C41  319B  2311  318B   	fcall	i1_UARTstringWAIT
 14614                           
 14615                           ;UART.c: 399: delayUS(15000);
 14616  0C44  3000               	movlw	0
 14617  0C45  00F3               	movwf	i1delayUS@US+3
 14618  0C46  3000               	movlw	0
 14619  0C47  00F2               	movwf	i1delayUS@US+2
 14620  0C48  303A               	movlw	58
 14621  0C49  00F1               	movwf	i1delayUS@US+1
 14622  0C4A  3098               	movlw	152
 14623  0C4B  00F0               	movwf	i1delayUS@US
 14624  0C4C  319B  2375  318B   	fcall	i1_delayUS
 14625  0C4F                     i1l4846:	
 14626                           
 14627                           ;UART.c: 400: }
 14628                           ;UART.c: 403: for(i =0;i<10;i++)
 14629  0C4F  0022               	movlb	2	; select bank2
 14630  0C50  01DE               	clrf	SetBaud@i^(0+256)
 14631  0C51  300A               	movlw	10
 14632  0C52  025E               	subwf	SetBaud@i^(0+256),w
 14633  0C53  1803               	btfsc	3,0
 14634  0C54  2C7C               	goto	i1l4860
 14635  0C55                     i1l478:	
 14636                           
 14637                           ;UART.c: 404: {
 14638                           ;UART.c: 405: LATC |= 0b00010000;
 14639  0C55  160E               	bsf	14,4	;volatile
 14640                           
 14641                           ;UART.c: 406: delayUS(10000);
 14642  0C56  3000               	movlw	0
 14643  0C57  00F3               	movwf	i1delayUS@US+3
 14644  0C58  3000               	movlw	0
 14645  0C59  00F2               	movwf	i1delayUS@US+2
 14646  0C5A  3027               	movlw	39
 14647  0C5B  00F1               	movwf	i1delayUS@US+1
 14648  0C5C  3010               	movlw	16
 14649  0C5D  00F0               	movwf	i1delayUS@US
 14650  0C5E  319B  2375  318B   	fcall	i1_delayUS
 14651                           
 14652                           ;UART.c: 407: LATC &= ~0b00010000;
 14653  0C61  30EF               	movlw	239
 14654  0C62  0021               	movlb	1	; select bank1
 14655  0C63  00B4               	movwf	??_SetBaud^(0+128)
 14656  0C64  0834               	movf	??_SetBaud^(0+128),w
 14657  0C65  0022               	movlb	2	; select bank2
 14658  0C66  058E               	andwf	14,f	;volatile
 14659                           
 14660                           ;UART.c: 408: delayUS(10000);
 14661  0C67  3000               	movlw	0
 14662  0C68  00F3               	movwf	i1delayUS@US+3
 14663  0C69  3000               	movlw	0
 14664  0C6A  00F2               	movwf	i1delayUS@US+2
 14665  0C6B  3027               	movlw	39
 14666  0C6C  00F1               	movwf	i1delayUS@US+1
 14667  0C6D  3010               	movlw	16
 14668  0C6E  00F0               	movwf	i1delayUS@US
 14669  0C6F  319B  2375  318B   	fcall	i1_delayUS
 14670  0C72  3001               	movlw	1
 14671  0C73  0021               	movlb	1	; select bank1
 14672  0C74  00B4               	movwf	??_SetBaud^(0+128)
 14673  0C75  0834               	movf	??_SetBaud^(0+128),w
 14674  0C76  0022               	movlb	2	; select bank2
 14675  0C77  07DE               	addwf	SetBaud@i^(0+256),f
 14676  0C78  300A               	movlw	10
 14677  0C79  025E               	subwf	SetBaud@i^(0+256),w
 14678  0C7A  1C03               	skipc
 14679  0C7B  2C55               	goto	i1l478
 14680  0C7C                     i1l4860:	
 14681                           
 14682                           ;UART.c: 409: }
 14683                           ;UART.c: 411: sprintf(buf,"Baud is %lu",Baud);
 14684  0C7C  3025               	movlw	low (STR_11| (0+32768))
 14685  0C7D  0020               	movlb	0	; select bank0
 14686  0C7E  00AA               	movwf	sprintf@f
 14687  0C7F  308A               	movlw	high (STR_11| (0+32768))
 14688  0C80  00AB               	movwf	sprintf@f+1
 14689  0C81  0021               	movlb	1	; select bank1
 14690  0C82  0832               	movf	(SetBaud@Baud+3)^(0+128),w
 14691  0C83  0020               	movlb	0	; select bank0
 14692  0C84  00AF               	movwf	?_sprintf+5
 14693  0C85  0021               	movlb	1	; select bank1
 14694  0C86  0831               	movf	(SetBaud@Baud+2)^(0+128),w
 14695  0C87  0020               	movlb	0	; select bank0
 14696  0C88  00AE               	movwf	?_sprintf+4
 14697  0C89  0021               	movlb	1	; select bank1
 14698  0C8A  0830               	movf	(SetBaud@Baud+1)^(0+128),w
 14699  0C8B  0020               	movlb	0	; select bank0
 14700  0C8C  00AD               	movwf	?_sprintf+3
 14701  0C8D  0021               	movlb	1	; select bank1
 14702  0C8E  082F               	movf	SetBaud@Baud^(0+128),w
 14703  0C8F  0020               	movlb	0	; select bank0
 14704  0C90  00AC               	movwf	?_sprintf+2
 14705  0C91  3020               	movlw	SetBaud@buf& (0+255)
 14706  0C92  3197  2707  318B   	fcall	_sprintf
 14707                           
 14708                           ;UART.c: 412: UARTstringWAIT(buf);
 14709  0C95  3020               	movlw	low SetBaud@buf
 14710  0C96  0020               	movlb	0	; select bank0
 14711  0C97  00A1               	movwf	i1UARTstringWAIT@data
 14712  0C98  3001               	movlw	high SetBaud@buf
 14713  0C99  00A2               	movwf	i1UARTstringWAIT@data+1
 14714  0C9A  319B  2311  318B   	fcall	i1_UARTstringWAIT
 14715                           
 14716                           ;UART.c: 413: if(Parity)
 14717  0C9D  0021               	movlb	1	; select bank1
 14718  0C9E  0833               	movf	SetBaud@Parity^(0+128),w
 14719  0C9F  1903               	btfsc	3,2
 14720  0CA0  2CC3               	goto	i1l4880
 14721                           
 14722                           ;UART.c: 414: {
 14723                           ;UART.c: 415: switch (Parity)
 14724  0CA1  2CB6               	goto	i1l4878
 14725  0CA2                     i1l4868:	
 14726                           ;UART.c: 416: {
 14727                           ;UART.c: 417: case 1:
 14728                           
 14729                           
 14730                           ;UART.c: 418: UARTstringWAIT(OddParityMSG);
 14731  0CA2  3011               	movlw	low (_OddParityMSG| (0+32768))
 14732  0CA3  0020               	movlb	0	; select bank0
 14733  0CA4  00A1               	movwf	i1UARTstringWAIT@data
 14734  0CA5  3089               	movlw	high (_OddParityMSG| (0+32768))
 14735  0CA6  2CC7               	goto	L19
 14736  0CA7                     i1l4870:	
 14737                           ;UART.c: 420: case 2:
 14738                           
 14739                           ;UART.c: 419: break;
 14740                           
 14741                           
 14742                           ;UART.c: 421: UARTstringWAIT(EvenParityMSG);
 14743  0CA7  30FB               	movlw	low (_EvenParityMSG| (0+32768))
 14744  0CA8  0020               	movlb	0	; select bank0
 14745  0CA9  00A1               	movwf	i1UARTstringWAIT@data
 14746  0CAA  3088               	movlw	high (_EvenParityMSG| (0+32768))
 14747  0CAB  2CC7               	goto	L19
 14748  0CAC                     i1l4872:	
 14749                           ;UART.c: 423: case 3:
 14750                           
 14751                           ;UART.c: 422: break;
 14752                           
 14753                           
 14754                           ;UART.c: 424: UARTstringWAIT(MarkParityMSG);
 14755  0CAC  304A               	movlw	low (_MarkParityMSG| (0+32768))
 14756  0CAD  0020               	movlb	0	; select bank0
 14757  0CAE  00A1               	movwf	i1UARTstringWAIT@data
 14758  0CAF  3089               	movlw	high (_MarkParityMSG| (0+32768))
 14759  0CB0  2CC7               	goto	L19
 14760  0CB1                     i1l4874:	
 14761                           ;UART.c: 426: default:
 14762                           
 14763                           ;UART.c: 425: break;
 14764                           
 14765                           
 14766                           ;UART.c: 427: UARTstringWAIT(SpaceParityMSG);
 14767  0CB1  303A               	movlw	low (_SpaceParityMSG| (0+32768))
 14768  0CB2  0020               	movlb	0	; select bank0
 14769  0CB3  00A1               	movwf	i1UARTstringWAIT@data
 14770  0CB4  3089               	movlw	high (_SpaceParityMSG| (0+32768))
 14771  0CB5  2CC7               	goto	L19
 14772  0CB6                     i1l4878:	
 14773                           ;UART.c: 429: }
 14774                           
 14775                           ;UART.c: 428: break;
 14776                           
 14777  0CB6  0021               	movlb	1	; select bank1
 14778  0CB7  0833               	movf	SetBaud@Parity^(0+128),w
 14779                           
 14780                           ; Switch size 1, requested type "space"
 14781                           ; Number of cases is 3, Range of values is 1 to 3
 14782                           ; switch strategies available:
 14783                           ; Name         Instructions Cycles
 14784                           ; simple_byte           10     6 (average)
 14785                           ; direct_byte           15     9 (fixed)
 14786                           ; jumptable            263     9 (fixed)
 14787                           ;	Chosen strategy is simple_byte
 14788  0CB8  3A01               	xorlw	1	; case 1
 14789  0CB9  1903               	skipnz
 14790  0CBA  2CA2               	goto	i1l4868
 14791  0CBB  3A03               	xorlw	3	; case 2
 14792  0CBC  1903               	skipnz
 14793  0CBD  2CA7               	goto	i1l4870
 14794  0CBE  3A01               	xorlw	1	; case 3
 14795  0CBF  1903               	skipnz
 14796  0CC0  2CAC               	goto	i1l4872
 14797  0CC1  2CB1               	goto	i1l4874
 14798                           
 14799                           ;UART.c: 430: }
 14800  0CC2  2CCB               	goto	i1l487
 14801  0CC3                     i1l4880:	
 14802                           
 14803                           ;UART.c: 431: else
 14804                           ;UART.c: 432: {
 14805                           ;UART.c: 433: UARTstringWAIT(NoParityMSG);
 14806  0CC3  3026               	movlw	low (_NoParityMSG| (0+32768))
 14807  0CC4  0020               	movlb	0	; select bank0
 14808  0CC5  00A1               	movwf	i1UARTstringWAIT@data
 14809  0CC6  3089               	movlw	high (_NoParityMSG| (0+32768))
 14810  0CC7                     L19:	
 14811  0CC7  00A2               	movwf	i1UARTstringWAIT@data+1
 14812  0CC8  319B  2311  318B   	fcall	i1_UARTstringWAIT
 14813  0CCB                     i1l487:	
 14814                           
 14815                           ;UART.c: 434: }
 14816                           ;UART.c: 435: UARTstringWAIT("\r\n");
 14817  0CCB  30FC               	movlw	low ((STR_14+16)| (0+32768))
 14818  0CCC  0020               	movlb	0	; select bank0
 14819  0CCD  00A1               	movwf	i1UARTstringWAIT@data
 14820  0CCE  3089               	movlw	high ((STR_14+16)| (0+32768))
 14821  0CCF  00A2               	movwf	i1UARTstringWAIT@data+1
 14822  0CD0  319B  2311  318B   	fcall	i1_UARTstringWAIT
 14823                           
 14824                           ;UART.c: 436: delayUS(15000);
 14825  0CD3  3000               	movlw	0
 14826  0CD4  00F3               	movwf	i1delayUS@US+3
 14827  0CD5  3000               	movlw	0
 14828  0CD6  00F2               	movwf	i1delayUS@US+2
 14829  0CD7  303A               	movlw	58
 14830  0CD8  00F1               	movwf	i1delayUS@US+1
 14831  0CD9  3098               	movlw	152
 14832  0CDA  00F0               	movwf	i1delayUS@US
 14833  0CDB  319B  2375         	fcall	i1_delayUS
 14834  0CDD  0008               	return
 14835  0CDE                     __end_of_SetBaud:	
 14836                           
 14837                           	psect	text53
 14838  1B11                     __ptext53:	
 14839 ;; *************** function i1_UARTstringWAIT *****************
 14840 ;; Defined at:
 14841 ;;		line 361 in file "UART.c"
 14842 ;; Parameters:    Size  Location     Type
 14843 ;;  data            2    1[BANK0 ] PTR const unsigned char 
 14844 ;;		 -> STR_20(20), STR_19(3), Process_PS2_ScanCode@buf(60), STR_17(3), 
 14845 ;;		 -> STR_16(3), STR_15(19), STR_14(19), STR_13(3), 
 14846 ;;		 -> STR_12(3), SetBaud@buf(50), STR_10(21), STR_9(3), 
 14847 ;;		 -> STR_8(3), NoParityMSG(20), SpaceParityMSG(16), MarkParityMSG(15), 
 14848 ;;		 -> EvenParityMSG(22), OddParityMSG(21), STR_7(3), STR_6(33), 
 14849 ;;		 -> STR_5(3), Version(8), STR_4(19), STR_3(28), 
 14850 ;;		 -> STR_2(8), STR_1(7), VoltageMSG(13), 
 14851 ;; Auto vars:     Size  Location     Type
 14852 ;;		None
 14853 ;; Return value:  Size  Location     Type
 14854 ;;		None               void
 14855 ;; Registers used:
 14856 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14857 ;; Tracked objects:
 14858 ;;		On entry : 0/0
 14859 ;;		On exit  : 0/0
 14860 ;;		Unchanged: 0/0
 14861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14862 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14864 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14865 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14866 ;;Total ram usage:        4 bytes
 14867 ;; Hardware stack levels used:    1
 14868 ;; Hardware stack levels required when called:    2
 14869 ;; This function calls:
 14870 ;;		i1_UARTchar
 14871 ;;		i1_delayUS
 14872 ;; This function is called by:
 14873 ;;		_SetBaud
 14874 ;;		_Process_PS2_ScanCode
 14875 ;; This function uses a non-reentrant model
 14876 ;;
 14877                           
 14878                           
 14879                           ;psect for function i1_UARTstringWAIT
 14880  1B11                     i1_UARTstringWAIT:	
 14881  1B11                     i1l466:	
 14882                           ;incstack = 0
 14883                           ; Regs used in i1_UARTstringWAIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14884                           ;UART.c: 363: do
 14885                           
 14886                           
 14887                           ;UART.c: 364: {
 14888                           ;UART.c: 365: delayUS(5000);
 14889  1B11  3000               	movlw	0
 14890  1B12  00F3               	movwf	i1delayUS@US+3
 14891  1B13  3000               	movlw	0
 14892  1B14  00F2               	movwf	i1delayUS@US+2
 14893  1B15  3013               	movlw	19
 14894  1B16  00F1               	movwf	i1delayUS@US+1
 14895  1B17  3088               	movlw	136
 14896  1B18  00F0               	movwf	i1delayUS@US
 14897  1B19  319B  2375  319B   	fcall	i1_delayUS
 14898                           
 14899                           ;UART.c: 366: if(*data != 0)
 14900  1B1C  0020               	movlb	0	; select bank0
 14901  1B1D  0821               	movf	i1UARTstringWAIT@data,w
 14902  1B1E  0084               	movwf	4
 14903  1B1F  0822               	movf	i1UARTstringWAIT@data+1,w
 14904  1B20  0085               	movwf	5
 14905  1B21  0800               	movf	0,w	;code access
 14906  1B22  3A00               	xorlw	0
 14907  1B23  1903               	skipnz
 14908  1B24  2B32               	goto	i1l4606
 14909                           
 14910                           ;UART.c: 367: {
 14911                           ;UART.c: 368: UARTchar(*data, 0, 0);
 14912  1B25  01F8               	clrf	i1UARTchar@override
 14913  1B26  01F9               	clrf	i1UARTchar@NinethBit_override_data
 14914  1B27  0821               	movf	i1UARTstringWAIT@data,w
 14915  1B28  0084               	movwf	4
 14916  1B29  0822               	movf	i1UARTstringWAIT@data+1,w
 14917  1B2A  0085               	movwf	5
 14918  1B2B  0800               	movf	0,w	;code access
 14919  1B2C  319F  2740  319B   	fcall	i1_UARTchar
 14920  1B2F                     i1l468:	
 14921                           ;UART.c: 369: while((!TX1STAbits.TRMT));
 14922                           
 14923  1B2F  0023               	movlb	3	; select bank3
 14924  1B30  1C9E               	btfss	30,1	;volatile
 14925  1B31  2B2F               	goto	i1l468
 14926  1B32                     i1l4606:	
 14927                           
 14928                           ;UART.c: 370: }
 14929                           ;UART.c: 371: } while( *data++);
 14930  1B32  0020               	movlb	0	; select bank0
 14931  1B33  0822               	movf	i1UARTstringWAIT@data+1,w
 14932  1B34  00A4               	movwf	??i1_UARTstringWAIT+1
 14933  1B35  0821               	movf	i1UARTstringWAIT@data,w
 14934  1B36  00A3               	movwf	??i1_UARTstringWAIT
 14935  1B37  0AA1               	incf	i1UARTstringWAIT@data,f
 14936  1B38  1903               	skipnz
 14937  1B39  0AA2               	incf	i1UARTstringWAIT@data+1,f
 14938  1B3A  0823               	movf	??i1_UARTstringWAIT,w
 14939  1B3B  0084               	movwf	4
 14940  1B3C  0824               	movf	??i1_UARTstringWAIT+1,w
 14941  1B3D  0085               	movwf	5
 14942  1B3E  0800               	movf	0,w	;code access
 14943  1B3F  3800               	iorlw	0
 14944  1B40  1903               	btfsc	3,2
 14945  1B41  0008               	return
 14946  1B42  2B11               	goto	i1l466
 14947  1B43                     __end_ofi1_UARTstringWAIT:	
 14948                           
 14949                           	psect	text54
 14950  1F40                     __ptext54:	
 14951 ;; *************** function i1_UARTchar *****************
 14952 ;; Defined at:
 14953 ;;		line 231 in file "UART.c"
 14954 ;; Parameters:    Size  Location     Type
 14955 ;;  data            1    wreg     unsigned char 
 14956 ;;  override        1    8[COMMON] unsigned char 
 14957 ;;  NinethBit_ov    1    9[COMMON] unsigned char 
 14958 ;; Auto vars:     Size  Location     Type
 14959 ;;  data            1    0[BANK0 ] unsigned char 
 14960 ;; Return value:  Size  Location     Type
 14961 ;;		None               void
 14962 ;; Registers used:
 14963 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14964 ;; Tracked objects:
 14965 ;;		On entry : 0/0
 14966 ;;		On exit  : 0/0
 14967 ;;		Unchanged: 0/0
 14968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14969 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14970 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14971 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14972 ;;      Totals:         6       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14973 ;;Total ram usage:        7 bytes
 14974 ;; Hardware stack levels used:    1
 14975 ;; Hardware stack levels required when called:    1
 14976 ;; This function calls:
 14977 ;;		i1_CheckSum_byte
 14978 ;; This function is called by:
 14979 ;;		_isr
 14980 ;;		_Process_PS2_ScanCode
 14981 ;;		i1_UARTstringWAIT
 14982 ;; This function uses a non-reentrant model
 14983 ;;
 14984                           
 14985                           
 14986                           ;psect for function i1_UARTchar
 14987  1F40                     i1_UARTchar:	
 14988                           
 14989                           ;incstack = 0
 14990                           ; Regs used in i1_UARTchar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14991                           ;i1UARTchar@data stored from wreg
 14992  1F40  0020               	movlb	0	; select bank0
 14993  1F41  00A0               	movwf	i1UARTchar@data
 14994                           
 14995                           ;UART.c: 233: if(TXSTAbits.TX9)
 14996  1F42  0023               	movlb	3	; select bank3
 14997  1F43  1F1E               	btfss	30,6	;volatile
 14998  1F44  2F85               	goto	i1l4122
 14999                           
 15000                           ;UART.c: 234: {
 15001                           ;UART.c: 236: if(!override)
 15002  1F45  08F8               	movf	i1UARTchar@override,f
 15003  1F46  1903               	btfsc	3,2
 15004  1F47  2F6F               	goto	i1l4118
 15005  1F48  2F7C               	goto	i1l4120
 15006  1F49                     i1l4112:	
 15007                           ;UART.c: 240: {
 15008                           ;UART.c: 241: case 1:
 15009                           
 15010                           ;UART.c: 237: {
 15011                           ;UART.c: 239: switch (PARITY)
 15012                           
 15013                           
 15014                           ;UART.c: 242: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 3);
 15015  1F49  0020               	movlb	0	; select bank0
 15016  1F4A  0820               	movf	i1UARTchar@data,w
 15017  1F4B  00FA               	movwf	??i1_UARTchar
 15018  1F4C  01FB               	clrf	??i1_UARTchar+1
 15019  1F4D  087A               	movf	??i1_UARTchar,w
 15020  1F4E  00F0               	movwf	i1CheckSum_byte@This
 15021  1F4F  087B               	movf	??i1_UARTchar+1,w
 15022  1F50  00F1               	movwf	i1CheckSum_byte@This+1
 15023  1F51  3003               	movlw	3
 15024  1F52  2F5C               	goto	L22
 15025  1F53                     i1l4114:	
 15026                           ;UART.c: 244: case 2:
 15027                           
 15028                           ;UART.c: 243: break;
 15029                           
 15030                           
 15031                           ;UART.c: 245: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 2);
 15032  1F53  0020               	movlb	0	; select bank0
 15033  1F54  0820               	movf	i1UARTchar@data,w
 15034  1F55  00FA               	movwf	??i1_UARTchar
 15035  1F56  01FB               	clrf	??i1_UARTchar+1
 15036  1F57  087A               	movf	??i1_UARTchar,w
 15037  1F58  00F0               	movwf	i1CheckSum_byte@This
 15038  1F59  087B               	movf	??i1_UARTchar+1,w
 15039  1F5A  00F1               	movwf	i1CheckSum_byte@This+1
 15040  1F5B  3002               	movlw	2
 15041  1F5C                     L22:	
 15042  1F5C  00FC               	movwf	??i1_UARTchar+2
 15043  1F5D  087C               	movf	??i1_UARTchar+2,w
 15044  1F5E  00F2               	movwf	i1CheckSum_byte@Odd_Even
 15045  1F5F  319A  22B0  319F   	fcall	i1_CheckSum_byte
 15046  1F62  00FD               	movwf	??i1_UARTchar+3
 15047  1F63  0023               	movlb	3	; select bank3
 15048  1F64  081E               	movf	30,w	;volatile
 15049  1F65  067D               	xorwf	??i1_UARTchar+3,w
 15050  1F66  39FE               	andlw	-2
 15051  1F67  067D               	xorwf	??i1_UARTchar+3,w
 15052  1F68  2F84               	goto	L21
 15053  1F69                     i1l432:	
 15054                           ;UART.c: 247: case 3:
 15055                           
 15056                           ;UART.c: 246: break;
 15057                           
 15058                           
 15059                           ;UART.c: 248: TXSTAbits.TX9D = 1;
 15060  1F69  0023               	movlb	3	; select bank3
 15061  1F6A  141E               	bsf	30,0	;volatile
 15062                           
 15063                           ;UART.c: 249: break;
 15064  1F6B  2F85               	goto	i1l4122
 15065  1F6C                     i1l433:	
 15066                           ;UART.c: 250: default:
 15067                           
 15068                           
 15069                           ;UART.c: 251: TXSTAbits.TX9D = 0;
 15070  1F6C  0023               	movlb	3	; select bank3
 15071  1F6D  101E               	bcf	30,0	;volatile
 15072                           
 15073                           ;UART.c: 253: }
 15074                           
 15075                           ;UART.c: 252: break;
 15076  1F6E  2F85               	goto	i1l4122
 15077  1F6F                     i1l4118:	
 15078  1F6F  0024               	movlb	4	; select bank4
 15079  1F70  0860               	movf	_PARITY^(0+512),w
 15080                           
 15081                           ; Switch size 1, requested type "space"
 15082                           ; Number of cases is 3, Range of values is 1 to 3
 15083                           ; switch strategies available:
 15084                           ; Name         Instructions Cycles
 15085                           ; simple_byte           10     6 (average)
 15086                           ; direct_byte           15     9 (fixed)
 15087                           ; jumptable            263     9 (fixed)
 15088                           ;	Chosen strategy is simple_byte
 15089  1F71  3A01               	xorlw	1	; case 1
 15090  1F72  1903               	skipnz
 15091  1F73  2F49               	goto	i1l4112
 15092  1F74  3A03               	xorlw	3	; case 2
 15093  1F75  1903               	skipnz
 15094  1F76  2F53               	goto	i1l4114
 15095  1F77  3A01               	xorlw	1	; case 3
 15096  1F78  1903               	skipnz
 15097  1F79  2F69               	goto	i1l432
 15098  1F7A  2F6C               	goto	i1l433
 15099                           
 15100                           ;UART.c: 254: }
 15101  1F7B  2F85               	goto	i1l4122
 15102  1F7C                     i1l4120:	
 15103                           
 15104                           ;UART.c: 255: else
 15105                           ;UART.c: 256: {
 15106                           ;UART.c: 257: TXSTAbits.TX9D = (NinethBit_override_data & 0x01);
 15107  1F7C  3001               	movlw	1
 15108  1F7D  0579               	andwf	i1UARTchar@NinethBit_override_data,w
 15109  1F7E  00FA               	movwf	??i1_UARTchar
 15110  1F7F  0023               	movlb	3	; select bank3
 15111  1F80  081E               	movf	30,w	;volatile
 15112  1F81  067A               	xorwf	??i1_UARTchar,w
 15113  1F82  39FE               	andlw	-2
 15114  1F83  067A               	xorwf	??i1_UARTchar,w
 15115  1F84                     L21:	
 15116  1F84  009E               	movwf	30	;volatile
 15117  1F85                     i1l4122:	
 15118                           
 15119                           ;UART.c: 258: }
 15120                           ;UART.c: 259: }
 15121                           ;UART.c: 261: if(data == '\n')
 15122  1F85  0020               	movlb	0	; select bank0
 15123  1F86  0820               	movf	i1UARTchar@data,w
 15124  1F87  3A0A               	xorlw	10
 15125  1F88  1D03               	skipz
 15126  1F89  2F96               	goto	i1l441
 15127                           
 15128                           ;UART.c: 262: {
 15129                           ;UART.c: 263: if(override)
 15130  1F8A  0878               	movf	i1UARTchar@override,w
 15131  1F8B  1903               	btfsc	3,2
 15132  1F8C  0008               	return
 15133  1F8D                     i1l437:	
 15134                           ;UART.c: 264: {
 15135                           ;UART.c: 265: while(!TXSTAbits.TRMT);
 15136                           
 15137  1F8D  0023               	movlb	3	; select bank3
 15138  1F8E  1C9E               	btfss	30,1	;volatile
 15139  1F8F  2F8D               	goto	i1l437
 15140                           
 15141                           ;UART.c: 266: TXREG = data;
 15142  1F90  0020               	movlb	0	; select bank0
 15143  1F91  0820               	movf	i1UARTchar@data,w
 15144  1F92  0023               	movlb	3	; select bank3
 15145  1F93  009A               	movwf	26	;volatile
 15146  1F94  0020               	movlb	0	; select bank0
 15147  1F95  0008               	return
 15148  1F96                     i1l441:	
 15149                           ;UART.c: 269: else
 15150                           ;UART.c: 270: {
 15151                           ;UART.c: 271: while(!TXSTAbits.TRMT);
 15152                           
 15153                           ;UART.c: 267: }
 15154                           ;UART.c: 268: }
 15155                           
 15156  1F96  0023               	movlb	3	; select bank3
 15157  1F97  1C9E               	btfss	30,1	;volatile
 15158  1F98  2F96               	goto	i1l441
 15159                           
 15160                           ;UART.c: 272: TXREG = data;
 15161  1F99  0020               	movlb	0	; select bank0
 15162  1F9A  0820               	movf	i1UARTchar@data,w
 15163  1F9B  0023               	movlb	3	; select bank3
 15164  1F9C  009A               	movwf	26	;volatile
 15165  1F9D  0020               	movlb	0	; select bank0
 15166  1F9E  0008               	return
 15167  1F9F                     __end_ofi1_UARTchar:	
 15168                           
 15169                           	psect	text55
 15170  10DE                     __ptext55:	
 15171 ;; *************** function i1_ReadBaud *****************
 15172 ;; Defined at:
 15173 ;;		line 187 in file "FLASH.c"
 15174 ;; Parameters:    Size  Location     Type
 15175 ;;  row             2    4[BANK0 ] unsigned int 
 15176 ;;  column          1    6[BANK0 ] unsigned char 
 15177 ;; Auto vars:     Size  Location     Type
 15178 ;;  ReadBaud        4   16[BANK0 ] unsigned long 
 15179 ;; Return value:  Size  Location     Type
 15180 ;;                  4    4[BANK0 ] unsigned long 
 15181 ;; Registers used:
 15182 ;;		wreg, status,2, status,0, pclath, cstack
 15183 ;; Tracked objects:
 15184 ;;		On entry : 0/0
 15185 ;;		On exit  : 0/0
 15186 ;;		Unchanged: 0/0
 15187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15188 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15189 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15190 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15191 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15192 ;;Total ram usage:       16 bytes
 15193 ;; Hardware stack levels used:    1
 15194 ;; Hardware stack levels required when called:    2
 15195 ;; This function calls:
 15196 ;;		i1_ReadFlash_4Byte
 15197 ;; This function is called by:
 15198 ;;		_SetBaud
 15199 ;; This function uses a non-reentrant model
 15200 ;;
 15201                           
 15202                           
 15203                           ;psect for function i1_ReadBaud
 15204  10DE                     i1_ReadBaud:	
 15205                           
 15206                           ;FLASH.c: 189: unsigned long temp;
 15207                           ;FLASH.c: 190: temp =(ReadFlash_4Byte(row, column));
 15208                           
 15209                           ;incstack = 0
 15210                           ; Regs used in i1_ReadBaud: [wreg+status,2+status,0+pclath+cstack]
 15211  10DE  0020               	movlb	0	; select bank0
 15212  10DF  0825               	movf	i1ReadBaud@row+1,w
 15213  10E0  01F6               	clrf	i1ReadFlash_4Byte@row+1
 15214  10E1  07F6               	addwf	i1ReadFlash_4Byte@row+1,f
 15215  10E2  0824               	movf	i1ReadBaud@row,w
 15216  10E3  01F5               	clrf	i1ReadFlash_4Byte@row
 15217  10E4  07F5               	addwf	i1ReadFlash_4Byte@row,f
 15218  10E5  0826               	movf	i1ReadBaud@column,w
 15219  10E6  00A8               	movwf	??i1_ReadBaud
 15220  10E7  0828               	movf	??i1_ReadBaud,w
 15221  10E8  00F7               	movwf	i1ReadFlash_4Byte@column
 15222  10E9  319D  25A5  3190   	fcall	i1_ReadFlash_4Byte
 15223  10EC  0878               	movf	?i1_ReadFlash_4Byte+3,w
 15224  10ED  0020               	movlb	0	; select bank0
 15225  10EE  00B3               	movwf	i1ReadBaud@temp+3
 15226  10EF  0877               	movf	?i1_ReadFlash_4Byte+2,w
 15227  10F0  00B2               	movwf	i1ReadBaud@temp+2
 15228  10F1  0876               	movf	?i1_ReadFlash_4Byte+1,w
 15229  10F2  00B1               	movwf	i1ReadBaud@temp+1
 15230  10F3  0875               	movf	?i1_ReadFlash_4Byte,w
 15231  10F4  00B0               	movwf	i1ReadBaud@temp
 15232                           
 15233                           ;FLASH.c: 191: MEM[1] = (unsigned int)(temp & 0x0003FFF);
 15234  10F5  30FF               	movlw	255
 15235  10F6  0530               	andwf	i1ReadBaud@temp,w
 15236  10F7  0021               	movlb	1	; select bank1
 15237  10F8  00E4               	movwf	(_MEM^(0+128)+2)
 15238  10F9  303F               	movlw	63
 15239  10FA  0020               	movlb	0	; select bank0
 15240  10FB  0531               	andwf	i1ReadBaud@temp+1,w
 15241  10FC  0021               	movlb	1	; select bank1
 15242  10FD  00E5               	movwf	((_MEM+1)^(0+128)+2)
 15243                           
 15244                           ;FLASH.c: 192: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
 15245  10FE  0020               	movlb	0	; select bank0
 15246  10FF  0830               	movf	i1ReadBaud@temp,w
 15247  1100  00A8               	movwf	??i1_ReadBaud
 15248  1101  0831               	movf	i1ReadBaud@temp+1,w
 15249  1102  00A9               	movwf	??i1_ReadBaud+1
 15250  1103  0832               	movf	i1ReadBaud@temp+2,w
 15251  1104  00AA               	movwf	??i1_ReadBaud+2
 15252  1105  0833               	movf	i1ReadBaud@temp+3,w
 15253  1106  00AB               	movwf	??i1_ReadBaud+3
 15254  1107  300E               	movlw	14
 15255  1108                     u525_25:	
 15256  1108  36AB               	lsrf	??i1_ReadBaud+3,f
 15257  1109  0CAA               	rrf	??i1_ReadBaud+2,f
 15258  110A  0CA9               	rrf	??i1_ReadBaud+1,f
 15259  110B  0CA8               	rrf	??i1_ReadBaud,f
 15260  110C  0B89               	decfsz	9,f
 15261  110D  2908               	goto	u525_25
 15262  110E  30FF               	movlw	255
 15263  110F  0528               	andwf	??i1_ReadBaud,w
 15264  1110  0021               	movlb	1	; select bank1
 15265  1111  00E2               	movwf	_MEM^(0+128)
 15266  1112  303F               	movlw	63
 15267  1113  0020               	movlb	0	; select bank0
 15268  1114  0529               	andwf	??i1_ReadBaud+1,w
 15269  1115  0021               	movlb	1	; select bank1
 15270  1116  00E3               	movwf	(_MEM+1)^(0+128)
 15271                           
 15272                           ;FLASH.c: 193: return (((unsigned long)MEM[0] << 12) + (unsigned long)MEM[1]);
 15273  1117  0864               	movf	(_MEM^(0+128)+2),w
 15274  1118  0020               	movlb	0	; select bank0
 15275  1119  00A8               	movwf	??i1_ReadBaud
 15276  111A  0021               	movlb	1	; select bank1
 15277  111B  0865               	movf	((_MEM+1)^(0+128)+2),w
 15278  111C  0020               	movlb	0	; select bank0
 15279  111D  00A9               	movwf	??i1_ReadBaud+1
 15280  111E  01AA               	clrf	??i1_ReadBaud+2
 15281  111F  01AB               	clrf	??i1_ReadBaud+3
 15282  1120  0021               	movlb	1	; select bank1
 15283  1121  0862               	movf	_MEM^(0+128),w
 15284  1122  0020               	movlb	0	; select bank0
 15285  1123  00AC               	movwf	??i1_ReadBaud+4
 15286  1124  0021               	movlb	1	; select bank1
 15287  1125  0863               	movf	(_MEM+1)^(0+128),w
 15288  1126  0020               	movlb	0	; select bank0
 15289  1127  00AD               	movwf	??i1_ReadBaud+5
 15290  1128  01AE               	clrf	??i1_ReadBaud+6
 15291  1129  01AF               	clrf	??i1_ReadBaud+7
 15292  112A  300C               	movlw	12
 15293  112B                     u526_25:	
 15294  112B  35AC               	lslf	??i1_ReadBaud+4,f
 15295  112C  0DAD               	rlf	??i1_ReadBaud+5,f
 15296  112D  0DAE               	rlf	??i1_ReadBaud+6,f
 15297  112E  0DAF               	rlf	??i1_ReadBaud+7,f
 15298  112F  0B89               	decfsz	9,f
 15299  1130  292B               	goto	u526_25
 15300  1131  082C               	movf	??i1_ReadBaud+4,w
 15301  1132  07A8               	addwf	??i1_ReadBaud,f
 15302  1133  082D               	movf	??i1_ReadBaud+5,w
 15303  1134  3DA9               	addwfc	??i1_ReadBaud+1,f
 15304  1135  082E               	movf	??i1_ReadBaud+6,w
 15305  1136  3DAA               	addwfc	??i1_ReadBaud+2,f
 15306  1137  082F               	movf	??i1_ReadBaud+7,w
 15307  1138  3DAB               	addwfc	??i1_ReadBaud+3,f
 15308  1139  082B               	movf	??i1_ReadBaud+3,w
 15309  113A  00A7               	movwf	?i1_ReadBaud+3
 15310  113B  082A               	movf	??i1_ReadBaud+2,w
 15311  113C  00A6               	movwf	?i1_ReadBaud+2
 15312  113D  0829               	movf	??i1_ReadBaud+1,w
 15313  113E  00A5               	movwf	?i1_ReadBaud+1
 15314  113F  0828               	movf	??i1_ReadBaud,w
 15315  1140  00A4               	movwf	?i1_ReadBaud
 15316  1141  0008               	return
 15317  1142                     __end_ofi1_ReadBaud:	
 15318                           
 15319                           	psect	text56
 15320  1DA5                     __ptext56:	
 15321 ;; *************** function i1_ReadFlash_4Byte *****************
 15322 ;; Defined at:
 15323 ;;		line 62 in file "FLASH.c"
 15324 ;; Parameters:    Size  Location     Type
 15325 ;;  row             2    5[COMMON] unsigned int 
 15326 ;;  column          1    7[COMMON] unsigned char 
 15327 ;; Auto vars:     Size  Location     Type
 15328 ;;  ReadFlash_4B    4    0[BANK0 ] unsigned long 
 15329 ;; Return value:  Size  Location     Type
 15330 ;;                  4    5[COMMON] unsigned long 
 15331 ;; Registers used:
 15332 ;;		wreg, status,2, status,0, pclath, cstack
 15333 ;; Tracked objects:
 15334 ;;		On entry : 0/0
 15335 ;;		On exit  : 0/0
 15336 ;;		Unchanged: 0/0
 15337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15338 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15339 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15340 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15341 ;;      Totals:         9       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15342 ;;Total ram usage:       13 bytes
 15343 ;; Hardware stack levels used:    1
 15344 ;; Hardware stack levels required when called:    1
 15345 ;; This function calls:
 15346 ;;		i1_ReadFlash_2Byte
 15347 ;; This function is called by:
 15348 ;;		i1_ReadBaud
 15349 ;; This function uses a non-reentrant model
 15350 ;;
 15351                           
 15352                           
 15353                           ;psect for function i1_ReadFlash_4Byte
 15354  1DA5                     i1_ReadFlash_4Byte:	
 15355                           
 15356                           ;FLASH.c: 64: unsigned long temp =0;
 15357                           
 15358                           ;incstack = 0
 15359                           ; Regs used in i1_ReadFlash_4Byte: [wreg+status,2+status,0+pclath+cstack]
 15360  1DA5  3000               	movlw	0
 15361  1DA6  0020               	movlb	0	; select bank0
 15362  1DA7  00A3               	movwf	i1ReadFlash_4Byte@temp+3
 15363  1DA8  3000               	movlw	0
 15364  1DA9  00A2               	movwf	i1ReadFlash_4Byte@temp+2
 15365  1DAA  3000               	movlw	0
 15366  1DAB  00A1               	movwf	i1ReadFlash_4Byte@temp+1
 15367  1DAC  3000               	movlw	0
 15368  1DAD  00A0               	movwf	i1ReadFlash_4Byte@temp
 15369                           
 15370                           ;FLASH.c: 65: temp = ((unsigned long)ReadFlash_2Byte(row, column) << 16);
 15371  1DAE  0876               	movf	i1ReadFlash_4Byte@row+1,w
 15372  1DAF  01F1               	clrf	i1ReadFlash_2Byte@row+1
 15373  1DB0  07F1               	addwf	i1ReadFlash_2Byte@row+1,f
 15374  1DB1  0875               	movf	i1ReadFlash_4Byte@row,w
 15375  1DB2  01F0               	clrf	i1ReadFlash_2Byte@row
 15376  1DB3  07F0               	addwf	i1ReadFlash_2Byte@row,f
 15377  1DB4  0877               	movf	i1ReadFlash_4Byte@column,w
 15378  1DB5  00F9               	movwf	??i1_ReadFlash_4Byte
 15379  1DB6  0879               	movf	??i1_ReadFlash_4Byte,w
 15380  1DB7  00F2               	movwf	i1ReadFlash_2Byte@column
 15381  1DB8  3199  21D5  319D   	fcall	i1_ReadFlash_2Byte
 15382  1DBB  0870               	movf	?i1_ReadFlash_2Byte,w
 15383  1DBC  00FA               	movwf	??i1_ReadFlash_4Byte+1
 15384  1DBD  0871               	movf	?i1_ReadFlash_2Byte+1,w
 15385  1DBE  00FB               	movwf	??i1_ReadFlash_4Byte+2
 15386  1DBF  01FC               	clrf	??i1_ReadFlash_4Byte+3
 15387  1DC0  01FD               	clrf	??i1_ReadFlash_4Byte+4
 15388  1DC1  3010               	movlw	16
 15389  1DC2                     u442_25:	
 15390  1DC2  35FA               	lslf	??i1_ReadFlash_4Byte+1,f
 15391  1DC3  0DFB               	rlf	??i1_ReadFlash_4Byte+2,f
 15392  1DC4  0DFC               	rlf	??i1_ReadFlash_4Byte+3,f
 15393  1DC5  0DFD               	rlf	??i1_ReadFlash_4Byte+4,f
 15394  1DC6  0B89               	decfsz	9,f
 15395  1DC7  2DC2               	goto	u442_25
 15396  1DC8  087D               	movf	??i1_ReadFlash_4Byte+4,w
 15397  1DC9  0020               	movlb	0	; select bank0
 15398  1DCA  00A3               	movwf	i1ReadFlash_4Byte@temp+3
 15399  1DCB  087C               	movf	??i1_ReadFlash_4Byte+3,w
 15400  1DCC  00A2               	movwf	i1ReadFlash_4Byte@temp+2
 15401  1DCD  087B               	movf	??i1_ReadFlash_4Byte+2,w
 15402  1DCE  00A1               	movwf	i1ReadFlash_4Byte@temp+1
 15403  1DCF  087A               	movf	??i1_ReadFlash_4Byte+1,w
 15404  1DD0  00A0               	movwf	i1ReadFlash_4Byte@temp
 15405                           
 15406                           ;FLASH.c: 66: temp |= ((unsigned long)ReadFlash_2Byte(row, (column + 1)));
 15407  1DD1  0876               	movf	i1ReadFlash_4Byte@row+1,w
 15408  1DD2  01F1               	clrf	i1ReadFlash_2Byte@row+1
 15409  1DD3  07F1               	addwf	i1ReadFlash_2Byte@row+1,f
 15410  1DD4  0875               	movf	i1ReadFlash_4Byte@row,w
 15411  1DD5  01F0               	clrf	i1ReadFlash_2Byte@row
 15412  1DD6  07F0               	addwf	i1ReadFlash_2Byte@row,f
 15413  1DD7  0877               	movf	i1ReadFlash_4Byte@column,w
 15414  1DD8  3E01               	addlw	1
 15415  1DD9  00F9               	movwf	??i1_ReadFlash_4Byte
 15416  1DDA  0879               	movf	??i1_ReadFlash_4Byte,w
 15417  1DDB  00F2               	movwf	i1ReadFlash_2Byte@column
 15418  1DDC  3199  21D5         	fcall	i1_ReadFlash_2Byte
 15419  1DDE  0870               	movf	?i1_ReadFlash_2Byte,w
 15420  1DDF  00FA               	movwf	??i1_ReadFlash_4Byte+1
 15421  1DE0  0871               	movf	?i1_ReadFlash_2Byte+1,w
 15422  1DE1  00FB               	movwf	??i1_ReadFlash_4Byte+2
 15423  1DE2  01FC               	clrf	??i1_ReadFlash_4Byte+3
 15424  1DE3  01FD               	clrf	??i1_ReadFlash_4Byte+4
 15425  1DE4  087A               	movf	??i1_ReadFlash_4Byte+1,w
 15426  1DE5  0020               	movlb	0	; select bank0
 15427  1DE6  04A0               	iorwf	i1ReadFlash_4Byte@temp,f
 15428  1DE7  087B               	movf	??i1_ReadFlash_4Byte+2,w
 15429  1DE8  04A1               	iorwf	i1ReadFlash_4Byte@temp+1,f
 15430  1DE9  087C               	movf	??i1_ReadFlash_4Byte+3,w
 15431  1DEA  04A2               	iorwf	i1ReadFlash_4Byte@temp+2,f
 15432  1DEB  087D               	movf	??i1_ReadFlash_4Byte+4,w
 15433  1DEC  04A3               	iorwf	i1ReadFlash_4Byte@temp+3,f
 15434                           
 15435                           ;FLASH.c: 67: return temp;
 15436  1DED  0823               	movf	i1ReadFlash_4Byte@temp+3,w
 15437  1DEE  00F8               	movwf	?i1_ReadFlash_4Byte+3
 15438  1DEF  0822               	movf	i1ReadFlash_4Byte@temp+2,w
 15439  1DF0  00F7               	movwf	?i1_ReadFlash_4Byte+2
 15440  1DF1  0821               	movf	i1ReadFlash_4Byte@temp+1,w
 15441  1DF2  00F6               	movwf	?i1_ReadFlash_4Byte+1
 15442  1DF3  0820               	movf	i1ReadFlash_4Byte@temp,w
 15443  1DF4  00F5               	movwf	?i1_ReadFlash_4Byte
 15444  1DF5  0008               	return
 15445  1DF6                     __end_ofi1_ReadFlash_4Byte:	
 15446                           
 15447                           	psect	text57
 15448  1522                     __ptext57:	
 15449 ;; *************** function i1_InitUART *****************
 15450 ;; Defined at:
 15451 ;;		line 75 in file "UART.c"
 15452 ;; Parameters:    Size  Location     Type
 15453 ;;  Baud            4    0[BANK0 ] unsigned long 
 15454 ;;  parity          1    4[BANK0 ] unsigned char 
 15455 ;; Auto vars:     Size  Location     Type
 15456 ;;  InitUART        4   17[BANK0 ] unsigned long 
 15457 ;;  InitUART        2   13[BANK0 ] unsigned int 
 15458 ;;  InitUART        1   16[BANK0 ] unsigned char 
 15459 ;;  InitUART        1   15[BANK0 ] unsigned char 
 15460 ;; Return value:  Size  Location     Type
 15461 ;;		None               void
 15462 ;; Registers used:
 15463 ;;		wreg, status,2, status,0, pclath, cstack
 15464 ;; Tracked objects:
 15465 ;;		On entry : 0/0
 15466 ;;		On exit  : 0/0
 15467 ;;		Unchanged: 0/0
 15468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15469 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15470 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15471 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15472 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15473 ;;Total ram usage:       21 bytes
 15474 ;; Hardware stack levels used:    1
 15475 ;; Hardware stack levels required when called:    1
 15476 ;; This function calls:
 15477 ;;		i1_CloseUSART
 15478 ;;		i1_OpenUSART
 15479 ;;		i1_ReadUSART
 15480 ;;		i1___lldiv
 15481 ;;		i1_baudUSART
 15482 ;; This function is called by:
 15483 ;;		_SetBaud
 15484 ;; This function uses a non-reentrant model
 15485 ;;
 15486                           
 15487                           
 15488                           ;psect for function i1_InitUART
 15489  1522                     i1_InitUART:	
 15490                           
 15491                           ;UART.c: 77: unsigned long temp;
 15492                           ;UART.c: 78: unsigned char config;
 15493                           ;UART.c: 79: unsigned int spbrg;
 15494                           ;UART.c: 80: unsigned char baudconfig;
 15495                           ;UART.c: 90: LATC |= 0b00000100;
 15496                           
 15497                           ;incstack = 0
 15498                           ; Regs used in i1_InitUART: [wreg+status,2+status,0+pclath+cstack]
 15499  1522  0022               	movlb	2	; select bank2
 15500  1523  150E               	bsf	14,2	;volatile
 15501                           
 15502                           ;UART.c: 91: PPSLOCK =0;
 15503  1524  003C               	movlb	28	; select bank28
 15504  1525  018F               	clrf	15	;volatile
 15505                           
 15506                           ;UART.c: 92: RC2PPS = 0b00000000;
 15507  1526  003D               	movlb	29	; select bank29
 15508  1527  01A2               	clrf	34	;volatile
 15509                           
 15510                           ;UART.c: 93: PPSLOCK =1;
 15511  1528  3001               	movlw	1
 15512  1529  003C               	movlb	28	; select bank28
 15513  152A  008F               	movwf	15	;volatile
 15514                           
 15515                           ;UART.c: 95: CloseUSART();
 15516  152B  3198  20A7  3195   	fcall	i1_CloseUSART
 15517                           
 15518                           ;UART.c: 96: config =0;
 15519  152E  0020               	movlb	0	; select bank0
 15520  152F  01B0               	clrf	i1InitUART@config
 15521                           
 15522                           ;UART.c: 97: baudconfig =0;
 15523  1530  01AF               	clrf	i1InitUART@baudconfig
 15524                           
 15525                           ;UART.c: 102: config |= 0b00001000;
 15526  1531  15B0               	bsf	i1InitUART@config,3
 15527                           
 15528                           ;UART.c: 103: config |= 0b00010000;
 15529  1532  1630               	bsf	i1InitUART@config,4
 15530                           
 15531                           ;UART.c: 104: PARITY = parity;
 15532  1533  0824               	movf	i1InitUART@parity,w
 15533  1534  00A5               	movwf	??i1_InitUART
 15534  1535  0825               	movf	??i1_InitUART,w
 15535  1536  0024               	movlb	4	; select bank4
 15536  1537  00E0               	movwf	_PARITY^(0+512)
 15537                           
 15538                           ;UART.c: 105: BAUD = Baud;
 15539  1538  0020               	movlb	0	; select bank0
 15540  1539  0823               	movf	i1InitUART@Baud+3,w
 15541  153A  0024               	movlb	4	; select bank4
 15542  153B  00E4               	movwf	(_BAUD+3)^(0+512)
 15543  153C  0020               	movlb	0	; select bank0
 15544  153D  0822               	movf	i1InitUART@Baud+2,w
 15545  153E  0024               	movlb	4	; select bank4
 15546  153F  00E3               	movwf	(_BAUD+2)^(0+512)
 15547  1540  0020               	movlb	0	; select bank0
 15548  1541  0821               	movf	i1InitUART@Baud+1,w
 15549  1542  0024               	movlb	4	; select bank4
 15550  1543  00E2               	movwf	(_BAUD+1)^(0+512)
 15551  1544  0020               	movlb	0	; select bank0
 15552  1545  0820               	movf	i1InitUART@Baud,w
 15553  1546  0024               	movlb	4	; select bank4
 15554  1547  00E1               	movwf	_BAUD^(0+512)
 15555                           
 15556                           ;UART.c: 106: if(parity)
 15557  1548  0020               	movlb	0	; select bank0
 15558  1549  0824               	movf	i1InitUART@parity,w
 15559  154A  1903               	btfsc	3,2
 15560  154B  2D4E               	goto	i1l4560
 15561                           
 15562                           ;UART.c: 107: {
 15563                           ;UART.c: 108: config |= 0b00000010;
 15564  154C  14B0               	bsf	i1InitUART@config,1
 15565                           
 15566                           ;UART.c: 109: }
 15567  154D  2D52               	goto	i1l4562
 15568  154E                     i1l4560:	
 15569                           
 15570                           ;UART.c: 110: else
 15571                           ;UART.c: 111: {
 15572                           ;UART.c: 112: config &= ~0b00000010;
 15573  154E  30FD               	movlw	253
 15574  154F  00A5               	movwf	??i1_InitUART
 15575  1550  0825               	movf	??i1_InitUART,w
 15576  1551  05B0               	andwf	i1InitUART@config,f
 15577  1552                     i1l4562:	
 15578                           
 15579                           ;UART.c: 113: }
 15580                           ;UART.c: 114: baudconfig |= 0b00001000;
 15581  1552  15AF               	bsf	i1InitUART@baudconfig,3
 15582                           
 15583                           ;UART.c: 117: temp = (32000000L / Baud) - 1;
 15584  1553  0823               	movf	i1InitUART@Baud+3,w
 15585  1554  00F3               	movwf	i1___lldiv@divisor+3
 15586  1555  0822               	movf	i1InitUART@Baud+2,w
 15587  1556  00F2               	movwf	i1___lldiv@divisor+2
 15588  1557  0821               	movf	i1InitUART@Baud+1,w
 15589  1558  00F1               	movwf	i1___lldiv@divisor+1
 15590  1559  0820               	movf	i1InitUART@Baud,w
 15591  155A  00F0               	movwf	i1___lldiv@divisor
 15592  155B  3001               	movlw	1
 15593  155C  00F7               	movwf	i1___lldiv@dividend+3
 15594  155D  30E8               	movlw	232
 15595  155E  00F6               	movwf	i1___lldiv@dividend+2
 15596  155F  3048               	movlw	72
 15597  1560  00F5               	movwf	i1___lldiv@dividend+1
 15598  1561  3000               	movlw	0
 15599  1562  00F4               	movwf	i1___lldiv@dividend
 15600  1563  319E  2647  3195   	fcall	i1___lldiv
 15601  1566  30FF               	movlw	255
 15602  1567  0770               	addwf	?i1___lldiv,w
 15603  1568  0020               	movlb	0	; select bank0
 15604  1569  00B1               	movwf	i1InitUART@temp
 15605  156A  30FF               	movlw	255
 15606  156B  3D71               	addwfc	?i1___lldiv+1,w
 15607  156C  00B2               	movwf	i1InitUART@temp+1
 15608  156D  30FF               	movlw	255
 15609  156E  3D72               	addwfc	?i1___lldiv+2,w
 15610  156F  00B3               	movwf	i1InitUART@temp+2
 15611  1570  30FF               	movlw	255
 15612  1571  3D73               	addwfc	?i1___lldiv+3,w
 15613  1572  00B4               	movwf	i1InitUART@temp+3
 15614                           
 15615                           ;UART.c: 118: temp = (temp >> 2) - 1;
 15616  1573  30FF               	movlw	255
 15617  1574  00A5               	movwf	??i1_InitUART
 15618  1575  30FF               	movlw	255
 15619  1576  00A6               	movwf	??i1_InitUART+1
 15620  1577  30FF               	movlw	255
 15621  1578  00A7               	movwf	??i1_InitUART+2
 15622  1579  30FF               	movlw	255
 15623  157A  00A8               	movwf	??i1_InitUART+3
 15624  157B  0831               	movf	i1InitUART@temp,w
 15625  157C  00A9               	movwf	??i1_InitUART+4
 15626  157D  0832               	movf	i1InitUART@temp+1,w
 15627  157E  00AA               	movwf	??i1_InitUART+5
 15628  157F  0833               	movf	i1InitUART@temp+2,w
 15629  1580  00AB               	movwf	??i1_InitUART+6
 15630  1581  0834               	movf	i1InitUART@temp+3,w
 15631  1582  00AC               	movwf	??i1_InitUART+7
 15632  1583  3002               	movlw	2
 15633  1584                     u516_25:	
 15634  1584  36AC               	lsrf	??i1_InitUART+7,f
 15635  1585  0CAB               	rrf	??i1_InitUART+6,f
 15636  1586  0CAA               	rrf	??i1_InitUART+5,f
 15637  1587  0CA9               	rrf	??i1_InitUART+4,f
 15638  1588  0B89               	decfsz	9,f
 15639  1589  2D84               	goto	u516_25
 15640  158A  0829               	movf	??i1_InitUART+4,w
 15641  158B  07A5               	addwf	??i1_InitUART,f
 15642  158C  082A               	movf	??i1_InitUART+5,w
 15643  158D  3DA6               	addwfc	??i1_InitUART+1,f
 15644  158E  082B               	movf	??i1_InitUART+6,w
 15645  158F  3DA7               	addwfc	??i1_InitUART+2,f
 15646  1590  082C               	movf	??i1_InitUART+7,w
 15647  1591  3DA8               	addwfc	??i1_InitUART+3,f
 15648  1592  0828               	movf	??i1_InitUART+3,w
 15649  1593  00B4               	movwf	i1InitUART@temp+3
 15650  1594  0827               	movf	??i1_InitUART+2,w
 15651  1595  00B3               	movwf	i1InitUART@temp+2
 15652  1596  0826               	movf	??i1_InitUART+1,w
 15653  1597  00B2               	movwf	i1InitUART@temp+1
 15654  1598  0825               	movf	??i1_InitUART,w
 15655  1599  00B1               	movwf	i1InitUART@temp
 15656                           
 15657                           ;UART.c: 119: spbrg = (unsigned int)temp;
 15658  159A  0832               	movf	i1InitUART@temp+1,w
 15659  159B  01AE               	clrf	i1InitUART@spbrg+1
 15660  159C  07AE               	addwf	i1InitUART@spbrg+1,f
 15661  159D  0831               	movf	i1InitUART@temp,w
 15662  159E  01AD               	clrf	i1InitUART@spbrg
 15663  159F  07AD               	addwf	i1InitUART@spbrg,f
 15664                           
 15665                           ;UART.c: 121: RCSTAbits.CREN = 0;
 15666  15A0  0023               	movlb	3	; select bank3
 15667  15A1  121D               	bcf	29,4	;volatile
 15668                           
 15669                           ;UART.c: 122: OpenUSART(config, spbrg);
 15670  15A2  0020               	movlb	0	; select bank0
 15671  15A3  082E               	movf	i1InitUART@spbrg+1,w
 15672  15A4  01F1               	clrf	i1OpenUSART@spbrg+1
 15673  15A5  07F1               	addwf	i1OpenUSART@spbrg+1,f
 15674  15A6  082D               	movf	i1InitUART@spbrg,w
 15675  15A7  01F0               	clrf	i1OpenUSART@spbrg
 15676  15A8  07F0               	addwf	i1OpenUSART@spbrg,f
 15677  15A9  0830               	movf	i1InitUART@config,w
 15678  15AA  319A  2255  3195   	fcall	i1_OpenUSART
 15679                           
 15680                           ;UART.c: 123: baudUSART(baudconfig);
 15681  15AD  0020               	movlb	0	; select bank0
 15682  15AE  082F               	movf	i1InitUART@baudconfig,w
 15683  15AF  3198  2034  3195   	fcall	i1_baudUSART
 15684                           
 15685                           ;UART.c: 124: temp = ReadUSART();
 15686  15B2  3198  2054  3195   	fcall	i1_ReadUSART
 15687  15B5  0020               	movlb	0	; select bank0
 15688  15B6  00A5               	movwf	??i1_InitUART
 15689  15B7  01A6               	clrf	??i1_InitUART+1
 15690  15B8  01A7               	clrf	??i1_InitUART+2
 15691  15B9  01A8               	clrf	??i1_InitUART+3
 15692  15BA  0828               	movf	??i1_InitUART+3,w
 15693  15BB  00B4               	movwf	i1InitUART@temp+3
 15694  15BC  0827               	movf	??i1_InitUART+2,w
 15695  15BD  00B3               	movwf	i1InitUART@temp+2
 15696  15BE  0826               	movf	??i1_InitUART+1,w
 15697  15BF  00B2               	movwf	i1InitUART@temp+1
 15698  15C0  0825               	movf	??i1_InitUART,w
 15699  15C1  00B1               	movwf	i1InitUART@temp
 15700                           
 15701                           ;UART.c: 125: temp = ReadUSART();
 15702  15C2  3198  2054  3195   	fcall	i1_ReadUSART
 15703  15C5  0020               	movlb	0	; select bank0
 15704  15C6  00A5               	movwf	??i1_InitUART
 15705  15C7  01A6               	clrf	??i1_InitUART+1
 15706  15C8  01A7               	clrf	??i1_InitUART+2
 15707  15C9  01A8               	clrf	??i1_InitUART+3
 15708  15CA  0828               	movf	??i1_InitUART+3,w
 15709  15CB  00B4               	movwf	i1InitUART@temp+3
 15710  15CC  0827               	movf	??i1_InitUART+2,w
 15711  15CD  00B3               	movwf	i1InitUART@temp+2
 15712  15CE  0826               	movf	??i1_InitUART+1,w
 15713  15CF  00B2               	movwf	i1InitUART@temp+1
 15714  15D0  0825               	movf	??i1_InitUART,w
 15715  15D1  00B1               	movwf	i1InitUART@temp
 15716                           
 15717                           ;UART.c: 126: temp = ReadUSART();
 15718  15D2  3198  2054  3195   	fcall	i1_ReadUSART
 15719  15D5  0020               	movlb	0	; select bank0
 15720  15D6  00A5               	movwf	??i1_InitUART
 15721  15D7  01A6               	clrf	??i1_InitUART+1
 15722  15D8  01A7               	clrf	??i1_InitUART+2
 15723  15D9  01A8               	clrf	??i1_InitUART+3
 15724  15DA  0828               	movf	??i1_InitUART+3,w
 15725  15DB  00B4               	movwf	i1InitUART@temp+3
 15726  15DC  0827               	movf	??i1_InitUART+2,w
 15727  15DD  00B3               	movwf	i1InitUART@temp+2
 15728  15DE  0826               	movf	??i1_InitUART+1,w
 15729  15DF  00B2               	movwf	i1InitUART@temp+1
 15730  15E0  0825               	movf	??i1_InitUART,w
 15731  15E1  00B1               	movwf	i1InitUART@temp
 15732                           
 15733                           ;UART.c: 127: temp = ReadUSART();
 15734  15E2  3198  2054  3195   	fcall	i1_ReadUSART
 15735  15E5  0020               	movlb	0	; select bank0
 15736  15E6  00A5               	movwf	??i1_InitUART
 15737  15E7  01A6               	clrf	??i1_InitUART+1
 15738  15E8  01A7               	clrf	??i1_InitUART+2
 15739  15E9  01A8               	clrf	??i1_InitUART+3
 15740  15EA  0828               	movf	??i1_InitUART+3,w
 15741  15EB  00B4               	movwf	i1InitUART@temp+3
 15742  15EC  0827               	movf	??i1_InitUART+2,w
 15743  15ED  00B3               	movwf	i1InitUART@temp+2
 15744  15EE  0826               	movf	??i1_InitUART+1,w
 15745  15EF  00B2               	movwf	i1InitUART@temp+1
 15746  15F0  0825               	movf	??i1_InitUART,w
 15747  15F1  00B1               	movwf	i1InitUART@temp
 15748                           
 15749                           ;UART.c: 128: temp = ReadUSART();
 15750  15F2  3198  2054         	fcall	i1_ReadUSART
 15751  15F4  0020               	movlb	0	; select bank0
 15752  15F5  00A5               	movwf	??i1_InitUART
 15753  15F6  01A6               	clrf	??i1_InitUART+1
 15754  15F7  01A7               	clrf	??i1_InitUART+2
 15755  15F8  01A8               	clrf	??i1_InitUART+3
 15756  15F9  0828               	movf	??i1_InitUART+3,w
 15757  15FA  00B4               	movwf	i1InitUART@temp+3
 15758  15FB  0827               	movf	??i1_InitUART+2,w
 15759  15FC  00B3               	movwf	i1InitUART@temp+2
 15760  15FD  0826               	movf	??i1_InitUART+1,w
 15761  15FE  00B2               	movwf	i1InitUART@temp+1
 15762  15FF  0825               	movf	??i1_InitUART,w
 15763  1600  00B1               	movwf	i1InitUART@temp
 15764                           
 15765                           ;UART.c: 130: PPSLOCK =0;
 15766  1601  003C               	movlb	28	; select bank28
 15767  1602  018F               	clrf	15	;volatile
 15768                           
 15769                           ;UART.c: 131: RC2PPS = 0b00010100;
 15770  1603  3014               	movlw	20
 15771  1604  003D               	movlb	29	; select bank29
 15772  1605  00A2               	movwf	34	;volatile
 15773                           
 15774                           ;UART.c: 132: CKPPS = 0b00010010;
 15775  1606  3012               	movlw	18
 15776  1607  003C               	movlb	28	; select bank28
 15777  1608  00A5               	movwf	37	;volatile
 15778                           
 15779                           ;UART.c: 134: RXPPS = 0b00010101;
 15780  1609  3015               	movlw	21
 15781  160A  00A4               	movwf	36	;volatile
 15782                           
 15783                           ;UART.c: 136: PPSLOCK =1;
 15784  160B  3001               	movlw	1
 15785  160C  008F               	movwf	15	;volatile
 15786                           
 15787                           ;UART.c: 138: PIR1bits.RCIF = 0;
 15788  160D  0020               	movlb	0	; select bank0
 15789  160E  1291               	bcf	17,5	;volatile
 15790                           
 15791                           ;UART.c: 139: INTCONbits.PEIE = 1;
 15792  160F  170B               	bsf	11,6	;volatile
 15793  1610  0008               	return
 15794  1611                     __end_ofi1_InitUART:	
 15795                           
 15796                           	psect	text58
 15797  1834                     __ptext58:	
 15798 ;; *************** function i1_baudUSART *****************
 15799 ;; Defined at:
 15800 ;;		line 147 in file "UART.c"
 15801 ;; Parameters:    Size  Location     Type
 15802 ;;  baudconfig      1    wreg     unsigned char 
 15803 ;; Auto vars:     Size  Location     Type
 15804 ;;  baudconfig      1    0[COMMON] unsigned char 
 15805 ;; Return value:  Size  Location     Type
 15806 ;;		None               void
 15807 ;; Registers used:
 15808 ;;		wreg, status,2
 15809 ;; Tracked objects:
 15810 ;;		On entry : 0/0
 15811 ;;		On exit  : 0/0
 15812 ;;		Unchanged: 0/0
 15813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15815 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15817 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15818 ;;Total ram usage:        1 bytes
 15819 ;; Hardware stack levels used:    1
 15820 ;; This function calls:
 15821 ;;		Nothing
 15822 ;; This function is called by:
 15823 ;;		i1_InitUART
 15824 ;; This function uses a non-reentrant model
 15825 ;;
 15826                           
 15827                           
 15828                           ;psect for function i1_baudUSART
 15829  1834                     i1_baudUSART:	
 15830                           
 15831                           ;incstack = 0
 15832                           ; Regs used in i1_baudUSART: [wreg+status,2]
 15833                           ;i1baudUSART@baudconfig stored from wreg
 15834  1834  00F0               	movwf	i1baudUSART@baudconfig
 15835                           
 15836                           ;UART.c: 149: BAUD1CON =0;
 15837  1835  0023               	movlb	3	; select bank3
 15838  1836  019F               	clrf	31	;volatile
 15839                           
 15840                           ;UART.c: 150: BAUD1CON = baudconfig;
 15841  1837  0870               	movf	i1baudUSART@baudconfig,w
 15842  1838  009F               	movwf	31	;volatile
 15843  1839  0008               	return
 15844  183A                     __end_ofi1_baudUSART:	
 15845                           
 15846                           	psect	text59
 15847  1854                     __ptext59:	
 15848 ;; *************** function i1_ReadUSART *****************
 15849 ;; Defined at:
 15850 ;;		line 302 in file "UART.c"
 15851 ;; Parameters:    Size  Location     Type
 15852 ;;		None
 15853 ;; Auto vars:     Size  Location     Type
 15854 ;;  ReadUSART       1    1[COMMON] unsigned char 
 15855 ;; Return value:  Size  Location     Type
 15856 ;;                  1    wreg      unsigned char 
 15857 ;; Registers used:
 15858 ;;		wreg
 15859 ;; Tracked objects:
 15860 ;;		On entry : 0/0
 15861 ;;		On exit  : 0/0
 15862 ;;		Unchanged: 0/0
 15863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15865 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15866 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15867 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15868 ;;Total ram usage:        2 bytes
 15869 ;; Hardware stack levels used:    1
 15870 ;; This function calls:
 15871 ;;		Nothing
 15872 ;; This function is called by:
 15873 ;;		_isr
 15874 ;;		i1_InitUART
 15875 ;; This function uses a non-reentrant model
 15876 ;;
 15877                           
 15878                           
 15879                           ;psect for function i1_ReadUSART
 15880  1854                     i1_ReadUSART:	
 15881                           
 15882                           ;UART.c: 304: char data;
 15883                           ;UART.c: 306: if(RCSTAbits.OERR)
 15884                           
 15885                           ;incstack = 0
 15886                           ; Regs used in i1_ReadUSART: [wreg]
 15887  1854  0023               	movlb	3	; select bank3
 15888  1855  189D               	btfsc	29,1	;volatile
 15889                           
 15890                           ;UART.c: 307: {
 15891                           ;UART.c: 308: RCSTAbits.CREN = 0;
 15892  1856  121D               	bcf	29,4	;volatile
 15893                           
 15894                           ;UART.c: 309: }
 15895                           ;UART.c: 311: data = RCREG;
 15896  1857  0819               	movf	25,w	;volatile
 15897  1858  00F0               	movwf	??i1_ReadUSART
 15898  1859  0870               	movf	??i1_ReadUSART,w
 15899  185A  00F1               	movwf	i1ReadUSART@data
 15900                           
 15901                           ;UART.c: 313: return (data);
 15902  185B  0871               	movf	i1ReadUSART@data,w
 15903  185C  0008               	return
 15904  185D                     __end_ofi1_ReadUSART:	
 15905                           
 15906                           	psect	text60
 15907  1A55                     __ptext60:	
 15908 ;; *************** function i1_OpenUSART *****************
 15909 ;; Defined at:
 15910 ;;		line 158 in file "UART.c"
 15911 ;; Parameters:    Size  Location     Type
 15912 ;;  config          1    wreg     unsigned char 
 15913 ;;  spbrg           2    0[COMMON] unsigned int 
 15914 ;; Auto vars:     Size  Location     Type
 15915 ;;  config          1    2[COMMON] unsigned char 
 15916 ;; Return value:  Size  Location     Type
 15917 ;;		None               void
 15918 ;; Registers used:
 15919 ;;		wreg, status,2
 15920 ;; Tracked objects:
 15921 ;;		On entry : 0/0
 15922 ;;		On exit  : 0/0
 15923 ;;		Unchanged: 0/0
 15924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15925 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15926 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15928 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15929 ;;Total ram usage:        3 bytes
 15930 ;; Hardware stack levels used:    1
 15931 ;; This function calls:
 15932 ;;		Nothing
 15933 ;; This function is called by:
 15934 ;;		i1_InitUART
 15935 ;; This function uses a non-reentrant model
 15936 ;;
 15937                           
 15938                           
 15939                           ;psect for function i1_OpenUSART
 15940  1A55                     i1_OpenUSART:	
 15941                           
 15942                           ;incstack = 0
 15943                           ; Regs used in i1_OpenUSART: [wreg+status,2]
 15944                           ;i1OpenUSART@config stored from wreg
 15945  1A55  00F2               	movwf	i1OpenUSART@config
 15946                           
 15947                           ;UART.c: 160: TX1STA = 0;
 15948  1A56  0023               	movlb	3	; select bank3
 15949  1A57  019E               	clrf	30	;volatile
 15950                           
 15951                           ;UART.c: 161: RC1STA = 0;
 15952  1A58  019D               	clrf	29	;volatile
 15953                           
 15954                           ;UART.c: 163: if(config&0x01)
 15955  1A59  1872               	btfsc	i1OpenUSART@config,0
 15956                           
 15957                           ;UART.c: 164: {
 15958                           ;UART.c: 165: TX1STAbits.SYNC = 1;
 15959  1A5A  161E               	bsf	30,4	;volatile
 15960                           
 15961                           ;UART.c: 166: }
 15962                           ;UART.c: 168: if(config&0x02)
 15963  1A5B  1CF2               	btfss	i1OpenUSART@config,1
 15964  1A5C  2A5F               	goto	i1l4076
 15965                           
 15966                           ;UART.c: 169: {
 15967                           ;UART.c: 170: TX1STAbits.TX9 = 1;
 15968  1A5D  171E               	bsf	30,6	;volatile
 15969                           
 15970                           ;UART.c: 171: RC1STAbits.RX9 = 1;
 15971  1A5E  171D               	bsf	29,6	;volatile
 15972  1A5F                     i1l4076:	
 15973                           
 15974                           ;UART.c: 172: }
 15975                           ;UART.c: 174: if(config&0x04)
 15976  1A5F  1972               	btfsc	i1OpenUSART@config,2
 15977                           
 15978                           ;UART.c: 175: {
 15979                           ;UART.c: 176: TX1STAbits.CSRC = 1;
 15980  1A60  179E               	bsf	30,7	;volatile
 15981                           
 15982                           ;UART.c: 177: }
 15983                           ;UART.c: 179: if(config&0x08)
 15984  1A61  1DF2               	btfss	i1OpenUSART@config,3
 15985  1A62  2A65               	goto	i1l415
 15986                           
 15987                           ;UART.c: 180: {
 15988                           ;UART.c: 181: RC1STAbits.CREN = 1;
 15989  1A63  161D               	bsf	29,4	;volatile
 15990                           
 15991                           ;UART.c: 182: }
 15992  1A64  2A66               	goto	i1l4084
 15993  1A65                     i1l415:	
 15994                           
 15995                           ;UART.c: 183: else
 15996                           ;UART.c: 184: {
 15997                           ;UART.c: 185: RC1STAbits.SREN = 1;
 15998  1A65  169D               	bsf	29,5	;volatile
 15999  1A66                     i1l4084:	
 16000                           
 16001                           ;UART.c: 186: }
 16002                           ;UART.c: 188: if(config&0x10)
 16003  1A66  1A72               	btfsc	i1OpenUSART@config,4
 16004                           
 16005                           ;UART.c: 189: {
 16006                           ;UART.c: 190: TX1STAbits.BRGH = 1;
 16007  1A67  151E               	bsf	30,2	;volatile
 16008                           
 16009                           ;UART.c: 196: }
 16010                           ;UART.c: 198: if(config&0x40)
 16011                           
 16012                           ;UART.c: 194: {
 16013  1A68  1F72               	btfss	i1OpenUSART@config,6
 16014  1A69  2A6F               	goto	i1l419
 16015                           
 16016                           ;UART.c: 199: {
 16017                           ;UART.c: 200: PIR1bits.RCIF = 0;
 16018  1A6A  0020               	movlb	0	; select bank0
 16019  1A6B  1291               	bcf	17,5	;volatile
 16020                           
 16021                           ;UART.c: 201: PIE1bits.RCIE = 1;
 16022  1A6C  0021               	movlb	1	; select bank1
 16023  1A6D  1691               	bsf	17,5	;volatile
 16024                           
 16025                           ;UART.c: 203: }
 16026  1A6E  2A71               	goto	i1l4094
 16027  1A6F                     i1l419:	
 16028                           
 16029                           ;UART.c: 204: else
 16030                           ;UART.c: 205: {
 16031                           ;UART.c: 206: PIE1bits.RCIE = 0;
 16032  1A6F  0021               	movlb	1	; select bank1
 16033  1A70  1291               	bcf	17,5	;volatile
 16034  1A71                     i1l4094:	
 16035                           
 16036                           ;UART.c: 207: }
 16037                           ;UART.c: 209: if(config&0x80)
 16038  1A71  1FF2               	btfss	i1OpenUSART@config,7
 16039  1A72  2A78               	goto	i1l421
 16040                           
 16041                           ;UART.c: 210: {
 16042                           ;UART.c: 211: PIR1bits.TXIF = 0;
 16043  1A73  0020               	movlb	0	; select bank0
 16044  1A74  1211               	bcf	17,4	;volatile
 16045                           
 16046                           ;UART.c: 212: PIE1bits.TXIE = 1;
 16047  1A75  0021               	movlb	1	; select bank1
 16048  1A76  1611               	bsf	17,4	;volatile
 16049                           
 16050                           ;UART.c: 213: }
 16051  1A77  2A79               	goto	i1l4098
 16052  1A78                     i1l421:	
 16053                           
 16054                           ;UART.c: 214: else
 16055                           ;UART.c: 215: {
 16056                           ;UART.c: 216: PIE1bits.TXIE = 0;
 16057  1A78  1211               	bcf	17,4	;volatile
 16058  1A79                     i1l4098:	
 16059                           
 16060                           ;UART.c: 217: }
 16061                           ;UART.c: 219: SPBRG = spbrg;
 16062  1A79  0870               	movf	i1OpenUSART@spbrg,w
 16063  1A7A  0023               	movlb	3	; select bank3
 16064  1A7B  009B               	movwf	27	;volatile
 16065                           
 16066                           ;UART.c: 220: SPBRGH = spbrg >> 8;
 16067  1A7C  0871               	movf	i1OpenUSART@spbrg+1,w
 16068  1A7D  009C               	movwf	28	;volatile
 16069                           
 16070                           ;UART.c: 222: TX1STAbits.TXEN = 1;
 16071  1A7E  169E               	bsf	30,5	;volatile
 16072                           
 16073                           ;UART.c: 223: RC1STAbits.SPEN = 1;
 16074  1A7F  179D               	bsf	29,7	;volatile
 16075  1A80  0008               	return
 16076  1A81                     __end_ofi1_OpenUSART:	
 16077                           
 16078                           	psect	text61
 16079  18A7                     __ptext61:	
 16080 ;; *************** function i1_CloseUSART *****************
 16081 ;; Defined at:
 16082 ;;		line 62 in file "UART.c"
 16083 ;; Parameters:    Size  Location     Type
 16084 ;;		None
 16085 ;; Auto vars:     Size  Location     Type
 16086 ;;		None
 16087 ;; Return value:  Size  Location     Type
 16088 ;;		None               void
 16089 ;; Registers used:
 16090 ;;		wreg, status,2, status,0
 16091 ;; Tracked objects:
 16092 ;;		On entry : 0/0
 16093 ;;		On exit  : 0/0
 16094 ;;		Unchanged: 0/0
 16095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16098 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16099 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16100 ;;Total ram usage:        1 bytes
 16101 ;; Hardware stack levels used:    1
 16102 ;; This function calls:
 16103 ;;		Nothing
 16104 ;; This function is called by:
 16105 ;;		i1_InitUART
 16106 ;; This function uses a non-reentrant model
 16107 ;;
 16108                           
 16109                           
 16110                           ;psect for function i1_CloseUSART
 16111  18A7                     i1_CloseUSART:	
 16112                           
 16113                           ;UART.c: 64: RCSTA&=0b01001111;
 16114                           
 16115                           ;incstack = 0
 16116                           ; Regs used in i1_CloseUSART: [wreg+status,2+status,0]
 16117  18A7  304F               	movlw	79
 16118  18A8  00F0               	movwf	??i1_CloseUSART
 16119  18A9  0870               	movf	??i1_CloseUSART,w
 16120  18AA  0023               	movlb	3	; select bank3
 16121  18AB  059D               	andwf	29,f	;volatile
 16122                           
 16123                           ;UART.c: 65: TX1STAbits.TXEN=0;
 16124  18AC  129E               	bcf	30,5	;volatile
 16125                           
 16126                           ;UART.c: 66: PIE1&=0b11001111;
 16127  18AD  30CF               	movlw	207
 16128  18AE  00F0               	movwf	??i1_CloseUSART
 16129  18AF  0870               	movf	??i1_CloseUSART,w
 16130  18B0  0021               	movlb	1	; select bank1
 16131  18B1  0591               	andwf	17,f	;volatile
 16132  18B2  0008               	return
 16133  18B3                     __end_ofi1_CloseUSART:	
 16134                           
 16135                           	psect	text62
 16136  1707                     __ptext62:	
 16137 ;; *************** function _sprintf *****************
 16138 ;; Defined at:
 16139 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
 16140 ;; Parameters:    Size  Location     Type
 16141 ;;  sp              1    wreg     PTR unsigned char 
 16142 ;;		 -> Process_PS2_ScanCode@buf(60), SetBaud@buf(50), 
 16143 ;;  f               2   10[BANK0 ] PTR const unsigned char 
 16144 ;;		 -> STR_18(24), STR_11(12), 
 16145 ;; Auto vars:     Size  Location     Type
 16146 ;;  sp              1   30[BANK0 ] PTR unsigned char 
 16147 ;;		 -> Process_PS2_ScanCode@buf(60), SetBaud@buf(50), 
 16148 ;;  _val            4   25[BANK0 ] struct .
 16149 ;;  prec            2   23[BANK0 ] int 
 16150 ;;  c               1   31[BANK0 ] char 
 16151 ;;  ap              1   29[BANK0 ] PTR void [1]
 16152 ;;		 -> ?_sprintf(2), 
 16153 ;;  flag            1   22[BANK0 ] unsigned char 
 16154 ;; Return value:  Size  Location     Type
 16155 ;;                  2   10[BANK0 ] int 
 16156 ;; Registers used:
 16157 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16158 ;; Tracked objects:
 16159 ;;		On entry : 0/0
 16160 ;;		On exit  : 0/0
 16161 ;;		Unchanged: 0/0
 16162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16163 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16164 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16165 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16166 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16167 ;;Total ram usage:       22 bytes
 16168 ;; Hardware stack levels used:    1
 16169 ;; Hardware stack levels required when called:    1
 16170 ;; This function calls:
 16171 ;;		___llmod
 16172 ;;		i1___lldiv
 16173 ;; This function is called by:
 16174 ;;		_SetBaud
 16175 ;;		_Process_PS2_ScanCode
 16176 ;; This function uses a non-reentrant model
 16177 ;;
 16178                           
 16179                           
 16180                           ;psect for function _sprintf
 16181  1707                     _sprintf:	
 16182                           
 16183                           ;incstack = 0
 16184                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16185                           ;sprintf@sp stored from wreg
 16186  1707  0020               	movlb	0	; select bank0
 16187  1708  00BE               	movwf	sprintf@sp
 16188                           
 16189                           ;doprnt.c: 494: va_list ap;
 16190                           ;doprnt.c: 499: signed char c;
 16191                           ;doprnt.c: 504: int prec;
 16192                           ;doprnt.c: 508: unsigned char flag;
 16193                           ;doprnt.c: 527: union {
 16194                           ;doprnt.c: 528: unsigned long _val;
 16195                           ;doprnt.c: 529: struct {
 16196                           ;doprnt.c: 530: const char * _cp;
 16197                           ;doprnt.c: 531: unsigned _len;
 16198                           ;doprnt.c: 532: } _str;
 16199                           ;doprnt.c: 533: } _val;
 16200                           ;doprnt.c: 542: *ap = __va_start();
 16201  1709  302C               	movlw	(?_sprintf+2)& (0+255)
 16202  170A  00B0               	movwf	??_sprintf
 16203  170B  0830               	movf	??_sprintf,w
 16204  170C  00BD               	movwf	sprintf@ap
 16205  170D                     i1l4318:	
 16206                           ;doprnt.c: 545: while(c = *f++) {
 16207                           
 16208  170D  082B               	movf	sprintf@f+1,w
 16209  170E  00B1               	movwf	??_sprintf+1
 16210  170F  082A               	movf	sprintf@f,w
 16211  1710  00B0               	movwf	??_sprintf
 16212  1711  0AAA               	incf	sprintf@f,f
 16213  1712  1903               	skipnz
 16214  1713  0AAB               	incf	sprintf@f+1,f
 16215  1714  0830               	movf	??_sprintf,w
 16216  1715  0084               	movwf	4
 16217  1716  0831               	movf	??_sprintf+1,w
 16218  1717  0085               	movwf	5
 16219  1718  0800               	movf	0,w	;code access
 16220  1719  00B2               	movwf	??_sprintf+2
 16221  171A  0832               	movf	??_sprintf+2,w
 16222  171B  00BF               	movwf	sprintf@c
 16223  171C  08BF               	movf	sprintf@c,f
 16224  171D  1903               	btfsc	3,2
 16225  171E  2FFA               	goto	i1l4320
 16226                           
 16227                           ;doprnt.c: 547: if(c != '%')
 16228  171F  083F               	movf	sprintf@c,w
 16229  1720  3A25               	xorlw	37
 16230  1721  1903               	skipnz
 16231  1722  2F30               	goto	i1l4278
 16232                           
 16233                           ;doprnt.c: 549: {
 16234                           ;doprnt.c: 550: ((*sp++ = (c)));
 16235  1723  083F               	movf	sprintf@c,w
 16236  1724  00B0               	movwf	??_sprintf
 16237  1725  083E               	movf	sprintf@sp,w
 16238  1726  0086               	movwf	6
 16239  1727  3001               	movlw	1	; select bank2/3
 16240  1728  0087               	movwf	7
 16241  1729  0830               	movf	??_sprintf,w
 16242  172A  0081               	movwf	1
 16243  172B  3001               	movlw	1
 16244  172C  00B0               	movwf	??_sprintf
 16245  172D  0830               	movf	??_sprintf,w
 16246  172E  07BE               	addwf	sprintf@sp,f
 16247                           
 16248                           ;doprnt.c: 551: continue;
 16249  172F  2F0D               	goto	i1l4318
 16250  1730                     i1l4278:	
 16251                           
 16252                           ;doprnt.c: 552: }
 16253                           ;doprnt.c: 557: flag = 0;
 16254  1730  01B6               	clrf	sprintf@flag
 16255                           
 16256                           ;doprnt.c: 644: switch(c = *f++) {
 16257                           
 16258                           ;doprnt.c: 642: loop:
 16259  1731  2F39               	goto	i1l4284
 16260  1732                     i1l1074:	
 16261                           ;doprnt.c: 650: case 'l':
 16262                           
 16263                           ;doprnt.c: 647: goto alldone;
 16264                           
 16265                           ;doprnt.c: 646: case 0:
 16266                           
 16267                           
 16268                           ;doprnt.c: 652: flag |= 0x10;
 16269  1732  1636               	bsf	sprintf@flag,4
 16270                           
 16271                           ;doprnt.c: 653: goto loop;
 16272  1733  2F39               	goto	i1l4284
 16273  1734                     i1l4280:	
 16274                           ;doprnt.c: 826: case 'u':
 16275                           
 16276                           ;doprnt.c: 822: continue;
 16277                           
 16278                           ;doprnt.c: 811: default:
 16279                           
 16280                           
 16281                           ;doprnt.c: 827: flag |= 0xC0;
 16282  1734  30C0               	movlw	192
 16283  1735  00B0               	movwf	??_sprintf
 16284  1736  0830               	movf	??_sprintf,w
 16285  1737  04B6               	iorwf	sprintf@flag,f
 16286                           
 16287                           ;doprnt.c: 831: }
 16288                           
 16289                           ;doprnt.c: 828: break;
 16290  1738  2F50               	goto	i1l1077
 16291  1739                     i1l4284:	
 16292  1739  082B               	movf	sprintf@f+1,w
 16293  173A  00B1               	movwf	??_sprintf+1
 16294  173B  082A               	movf	sprintf@f,w
 16295  173C  00B0               	movwf	??_sprintf
 16296  173D  0AAA               	incf	sprintf@f,f
 16297  173E  1903               	skipnz
 16298  173F  0AAB               	incf	sprintf@f+1,f
 16299  1740  0830               	movf	??_sprintf,w
 16300  1741  0084               	movwf	4
 16301  1742  0831               	movf	??_sprintf+1,w
 16302  1743  0085               	movwf	5
 16303  1744  0800               	movf	0,w	;code access
 16304  1745  00BF               	movwf	sprintf@c
 16305                           
 16306                           ; Switch size 1, requested type "space"
 16307                           ; Number of cases is 3, Range of values is 0 to 117
 16308                           ; switch strategies available:
 16309                           ; Name         Instructions Cycles
 16310                           ; simple_byte           10     6 (average)
 16311                           ; direct_byte          242     6 (fixed)
 16312                           ; jumptable            260     6 (fixed)
 16313                           ;	Chosen strategy is simple_byte
 16314  1746  3A00               	xorlw	0	; case 0
 16315  1747  1903               	skipnz
 16316  1748  2FFA               	goto	i1l4320
 16317  1749  3A6C               	xorlw	108	; case 108
 16318  174A  1903               	skipnz
 16319  174B  2F32               	goto	i1l1074
 16320  174C  3A19               	xorlw	25	; case 117
 16321  174D  1903               	skipnz
 16322  174E  2F34               	goto	i1l4280
 16323  174F  2F0D               	goto	i1l4318
 16324  1750                     i1l1077:	
 16325                           
 16326                           ;doprnt.c: 1282: {
 16327                           ;doprnt.c: 1290: if(flag & 0x10)
 16328  1750  1E36               	btfss	sprintf@flag,4
 16329  1751  2F5F               	goto	i1l4290
 16330                           
 16331                           ;doprnt.c: 1291: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 16332  1752  083D               	movf	sprintf@ap,w
 16333  1753  0086               	movwf	6
 16334  1754  0187               	clrf	7
 16335  1755  3F40               	moviw [0]fsr1
 16336  1756  00B9               	movwf	sprintf@_val
 16337  1757  3F41               	moviw [1]fsr1
 16338  1758  00BA               	movwf	sprintf@_val+1
 16339  1759  3F42               	moviw [2]fsr1
 16340  175A  00BB               	movwf	sprintf@_val+2
 16341  175B  3F43               	moviw [3]fsr1
 16342  175C  00BC               	movwf	sprintf@_val+3
 16343  175D  3004               	movlw	4
 16344  175E  2F6D               	goto	L23
 16345  175F                     i1l4290:	
 16346                           
 16347                           ;doprnt.c: 1292: else
 16348                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 16349  175F  083D               	movf	sprintf@ap,w
 16350  1760  0086               	movwf	6
 16351  1761  0187               	clrf	7
 16352  1762  3F40               	moviw [0]fsr1
 16353  1763  00B0               	movwf	??_sprintf
 16354  1764  3F41               	moviw [1]fsr1
 16355  1765  00B1               	movwf	??_sprintf+1
 16356  1766  0830               	movf	??_sprintf,w
 16357  1767  00B9               	movwf	sprintf@_val
 16358  1768  0831               	movf	??_sprintf+1,w
 16359  1769  00BA               	movwf	sprintf@_val+1
 16360  176A  01BB               	clrf	sprintf@_val+2
 16361  176B  01BC               	clrf	sprintf@_val+3
 16362  176C  3002               	movlw	2
 16363  176D                     L23:	
 16364  176D  00B0               	movwf	??_sprintf
 16365  176E  0830               	movf	??_sprintf,w
 16366  176F  07BD               	addwf	sprintf@ap,f
 16367                           
 16368                           ;doprnt.c: 1296: }
 16369                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 16370  1770  01BF               	clrf	sprintf@c
 16371  1771  0ABF               	incf	sprintf@c,f
 16372  1772  083F               	movf	sprintf@c,w
 16373  1773  3A0A               	xorlw	10
 16374  1774  1903               	btfsc	3,2
 16375  1775  2FA3               	goto	i1l4308
 16376  1776                     i1l4300:	
 16377                           
 16378                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
 16379  1776  083F               	movf	sprintf@c,w
 16380  1777  00B0               	movwf	??_sprintf
 16381  1778  01B1               	clrf	??_sprintf+1
 16382  1779  35B0               	lslf	??_sprintf,f
 16383  177A  0DB1               	rlf	??_sprintf+1,f
 16384  177B  35B0               	lslf	??_sprintf,f
 16385  177C  0DB1               	rlf	??_sprintf+1,f
 16386  177D  30D3               	movlw	low (_dpowers| (0+32768))
 16387  177E  0730               	addwf	??_sprintf,w
 16388  177F  0084               	movwf	4
 16389  1780  3088               	movlw	high (_dpowers| (0+32768))
 16390  1781  3D31               	addwfc	??_sprintf+1,w
 16391  1782  0085               	movwf	5
 16392  1783  3F00               	moviw [0]fsr0
 16393  1784  00B2               	movwf	??_sprintf+2
 16394  1785  3F01               	moviw [1]fsr0
 16395  1786  00B3               	movwf	??_sprintf+3
 16396  1787  3F02               	moviw [2]fsr0
 16397  1788  00B4               	movwf	??_sprintf+4
 16398  1789  3F03               	moviw [3]fsr0
 16399  178A  00B5               	movwf	??_sprintf+5
 16400  178B  0835               	movf	??_sprintf+5,w
 16401  178C  023C               	subwf	sprintf@_val+3,w
 16402  178D  1D03               	skipz
 16403  178E  2F99               	goto	u470_25
 16404  178F  0834               	movf	??_sprintf+4,w
 16405  1790  023B               	subwf	sprintf@_val+2,w
 16406  1791  1D03               	skipz
 16407  1792  2F99               	goto	u470_25
 16408  1793  0833               	movf	??_sprintf+3,w
 16409  1794  023A               	subwf	sprintf@_val+1,w
 16410  1795  1D03               	skipz
 16411  1796  2F99               	goto	u470_25
 16412  1797  0832               	movf	??_sprintf+2,w
 16413  1798  0239               	subwf	sprintf@_val,w
 16414  1799                     u470_25:	
 16415  1799  1C03               	btfss	3,0
 16416  179A  2FA3               	goto	i1l4308
 16417                           
 16418                           ;doprnt.c: 1316: break;
 16419  179B  3001               	movlw	1
 16420  179C  00B0               	movwf	??_sprintf
 16421  179D  0830               	movf	??_sprintf,w
 16422  179E  07BF               	addwf	sprintf@c,f
 16423  179F  083F               	movf	sprintf@c,w
 16424  17A0  3A0A               	xorlw	10
 16425  17A1  1D03               	skipz
 16426  17A2  2F76               	goto	i1l4300
 16427  17A3                     i1l4308:	
 16428                           
 16429                           ;doprnt.c: 1431: {
 16430                           ;doprnt.c: 1478: }
 16431                           ;doprnt.c: 1481: prec = c;
 16432  17A3  083F               	movf	sprintf@c,w
 16433  17A4  00B7               	movwf	sprintf@prec
 16434  17A5  01B8               	clrf	sprintf@prec+1
 16435  17A6  1BB7               	btfsc	sprintf@prec,7
 16436  17A7  03B8               	decf	sprintf@prec+1,f
 16437  17A8                     i1l4316:	
 16438                           ;doprnt.c: 1483: while(prec--) {
 16439                           
 16440  17A8  30FF               	movlw	255
 16441  17A9  07B7               	addwf	sprintf@prec,f
 16442  17AA  30FF               	movlw	255
 16443  17AB  3DB8               	addwfc	sprintf@prec+1,f
 16444  17AC  30FF               	movlw	255
 16445  17AD  0638               	xorwf	sprintf@prec+1,w
 16446  17AE  1D03               	skipz
 16447  17AF  2FB2               	goto	u472_25
 16448  17B0  30FF               	movlw	255
 16449  17B1  0637               	xorwf	sprintf@prec,w
 16450  17B2                     u472_25:	
 16451  17B2  1903               	btfsc	3,2
 16452  17B3  2F0D               	goto	i1l4318
 16453                           
 16454                           ;doprnt.c: 1487: {
 16455                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
 16456  17B4  3000               	movlw	0
 16457  17B5  00A3               	movwf	___llmod@divisor+3
 16458  17B6  3000               	movlw	0
 16459  17B7  00A2               	movwf	___llmod@divisor+2
 16460  17B8  3000               	movlw	0
 16461  17B9  00A1               	movwf	___llmod@divisor+1
 16462  17BA  300A               	movlw	10
 16463  17BB  00A0               	movwf	___llmod@divisor
 16464  17BC  0838               	movf	sprintf@prec+1,w
 16465  17BD  0085               	movwf	5
 16466  17BE  0837               	movf	sprintf@prec,w
 16467  17BF  0084               	movwf	4
 16468  17C0  3584               	lslf	4,f
 16469  17C1  0D85               	rlf	5,f
 16470  17C2  3584               	lslf	4,f
 16471  17C3  0D85               	rlf	5,f
 16472  17C4  30D3               	movlw	low (_dpowers| (0+32768))
 16473  17C5  0784               	addwf	4,f
 16474  17C6  3088               	movlw	high (_dpowers| (0+32768))
 16475  17C7  3D85               	addwfc	5,f
 16476  17C8  3F00               	moviw [0]fsr0
 16477  17C9  00F0               	movwf	i1___lldiv@divisor
 16478  17CA  3F01               	moviw [1]fsr0
 16479  17CB  00F1               	movwf	i1___lldiv@divisor+1
 16480  17CC  3F02               	moviw [2]fsr0
 16481  17CD  00F2               	movwf	i1___lldiv@divisor+2
 16482  17CE  3F03               	moviw [3]fsr0
 16483  17CF  00F3               	movwf	i1___lldiv@divisor+3
 16484  17D0  083C               	movf	sprintf@_val+3,w
 16485  17D1  00F7               	movwf	i1___lldiv@dividend+3
 16486  17D2  083B               	movf	sprintf@_val+2,w
 16487  17D3  00F6               	movwf	i1___lldiv@dividend+2
 16488  17D4  083A               	movf	sprintf@_val+1,w
 16489  17D5  00F5               	movwf	i1___lldiv@dividend+1
 16490  17D6  0839               	movf	sprintf@_val,w
 16491  17D7  00F4               	movwf	i1___lldiv@dividend
 16492  17D8  319E  2647  3197   	fcall	i1___lldiv
 16493  17DB  0873               	movf	?i1___lldiv+3,w
 16494  17DC  0020               	movlb	0	; select bank0
 16495  17DD  00A7               	movwf	___llmod@dividend+3
 16496  17DE  0872               	movf	?i1___lldiv+2,w
 16497  17DF  00A6               	movwf	___llmod@dividend+2
 16498  17E0  0871               	movf	?i1___lldiv+1,w
 16499  17E1  00A5               	movwf	___llmod@dividend+1
 16500  17E2  0870               	movf	?i1___lldiv,w
 16501  17E3  00A4               	movwf	___llmod@dividend
 16502  17E4  319C  24CE  3197   	fcall	___llmod
 16503  17E7  0020               	movlb	0	; select bank0
 16504  17E8  0820               	movf	?___llmod,w
 16505  17E9  3E30               	addlw	48
 16506  17EA  00B0               	movwf	??_sprintf
 16507  17EB  0830               	movf	??_sprintf,w
 16508  17EC  00BF               	movwf	sprintf@c
 16509                           
 16510                           ;doprnt.c: 1532: }
 16511                           ;doprnt.c: 1533: ((*sp++ = (c)));
 16512  17ED  083F               	movf	sprintf@c,w
 16513  17EE  00B0               	movwf	??_sprintf
 16514  17EF  083E               	movf	sprintf@sp,w
 16515  17F0  0086               	movwf	6
 16516  17F1  3001               	movlw	1	; select bank2/3
 16517  17F2  0087               	movwf	7
 16518  17F3  0830               	movf	??_sprintf,w
 16519  17F4  0081               	movwf	1
 16520  17F5  3001               	movlw	1
 16521  17F6  00B0               	movwf	??_sprintf
 16522  17F7  0830               	movf	??_sprintf,w
 16523  17F8  07BE               	addwf	sprintf@sp,f
 16524  17F9  2FA8               	goto	i1l4316
 16525  17FA                     i1l4320:	
 16526                           ;doprnt.c: 1534: }
 16527                           ;doprnt.c: 1542: }
 16528                           ;doprnt.c: 1544: alldone:
 16529                           
 16530                           
 16531                           ;doprnt.c: 1547: *sp = 0;
 16532  17FA  083E               	movf	sprintf@sp,w
 16533  17FB  0086               	movwf	6
 16534  17FC  3001               	movlw	1	; select bank2/3
 16535  17FD  0087               	movwf	7
 16536  17FE  0181               	clrf	1
 16537  17FF  0008               	return
 16538  1800                     __end_of_sprintf:	
 16539                           ;doprnt.c: 1549: return 0;
 16540                           ;	Return value of _sprintf is never used
 16541                           
 16542                           
 16543                           	psect	text63
 16544  1E47                     __ptext63:	
 16545 ;; *************** function i1___lldiv *****************
 16546 ;; Defined at:
 16547 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
 16548 ;; Parameters:    Size  Location     Type
 16549 ;;  divisor         4    0[COMMON] unsigned long 
 16550 ;;  dividend        4    4[COMMON] unsigned long 
 16551 ;; Auto vars:     Size  Location     Type
 16552 ;;  __lldiv         4    9[COMMON] unsigned long 
 16553 ;;  __lldiv         1   13[COMMON] unsigned char 
 16554 ;; Return value:  Size  Location     Type
 16555 ;;                  4    0[COMMON] unsigned long 
 16556 ;; Registers used:
 16557 ;;		wreg, status,2, status,0
 16558 ;; Tracked objects:
 16559 ;;		On entry : 0/0
 16560 ;;		On exit  : 0/0
 16561 ;;		Unchanged: 0/0
 16562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16563 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16564 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16565 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16566 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16567 ;;Total ram usage:       14 bytes
 16568 ;; Hardware stack levels used:    1
 16569 ;; This function calls:
 16570 ;;		Nothing
 16571 ;; This function is called by:
 16572 ;;		_sprintf
 16573 ;;		i1_InitUART
 16574 ;; This function uses a non-reentrant model
 16575 ;;
 16576                           
 16577                           
 16578                           ;psect for function i1___lldiv
 16579  1E47                     i1___lldiv:	
 16580                           
 16581                           ;incstack = 0
 16582                           ; Regs used in i1___lldiv: [wreg+status,2+status,0]
 16583  1E47  3000               	movlw	0
 16584  1E48  00FC               	movwf	i1___lldiv@quotient+3
 16585  1E49  3000               	movlw	0
 16586  1E4A  00FB               	movwf	i1___lldiv@quotient+2
 16587  1E4B  3000               	movlw	0
 16588  1E4C  00FA               	movwf	i1___lldiv@quotient+1
 16589  1E4D  3000               	movlw	0
 16590  1E4E  00F9               	movwf	i1___lldiv@quotient
 16591  1E4F  0873               	movf	i1___lldiv@divisor+3,w
 16592  1E50  0472               	iorwf	i1___lldiv@divisor+2,w
 16593  1E51  0471               	iorwf	i1___lldiv@divisor+1,w
 16594  1E52  0470               	iorwf	i1___lldiv@divisor,w
 16595  1E53  1903               	skipnz
 16596  1E54  2E90               	goto	i1l4168
 16597  1E55  01FD               	clrf	i1___lldiv@counter
 16598  1E56  0AFD               	incf	i1___lldiv@counter,f
 16599  1E57                     i1l4154:	
 16600  1E57  1BF3               	btfsc	i1___lldiv@divisor+3,7
 16601  1E58  2E65               	goto	i1l4156
 16602  1E59  3001               	movlw	1
 16603  1E5A                     u444_25:	
 16604  1E5A  35F0               	lslf	i1___lldiv@divisor,f
 16605  1E5B  0DF1               	rlf	i1___lldiv@divisor+1,f
 16606  1E5C  0DF2               	rlf	i1___lldiv@divisor+2,f
 16607  1E5D  0DF3               	rlf	i1___lldiv@divisor+3,f
 16608  1E5E  0B89               	decfsz	9,f
 16609  1E5F  2E5A               	goto	u444_25
 16610  1E60  3001               	movlw	1
 16611  1E61  00F8               	movwf	??i1___lldiv
 16612  1E62  0878               	movf	??i1___lldiv,w
 16613  1E63  07FD               	addwf	i1___lldiv@counter,f
 16614  1E64  2E57               	goto	i1l4154
 16615  1E65                     i1l4156:	
 16616  1E65  3001               	movlw	1
 16617  1E66                     u446_25:	
 16618  1E66  35F9               	lslf	i1___lldiv@quotient,f
 16619  1E67  0DFA               	rlf	i1___lldiv@quotient+1,f
 16620  1E68  0DFB               	rlf	i1___lldiv@quotient+2,f
 16621  1E69  0DFC               	rlf	i1___lldiv@quotient+3,f
 16622  1E6A  0B89               	decfsz	9,f
 16623  1E6B  2E66               	goto	u446_25
 16624  1E6C  0873               	movf	i1___lldiv@divisor+3,w
 16625  1E6D  0277               	subwf	i1___lldiv@dividend+3,w
 16626  1E6E  1D03               	skipz
 16627  1E6F  2E7A               	goto	u447_25
 16628  1E70  0872               	movf	i1___lldiv@divisor+2,w
 16629  1E71  0276               	subwf	i1___lldiv@dividend+2,w
 16630  1E72  1D03               	skipz
 16631  1E73  2E7A               	goto	u447_25
 16632  1E74  0871               	movf	i1___lldiv@divisor+1,w
 16633  1E75  0275               	subwf	i1___lldiv@dividend+1,w
 16634  1E76  1D03               	skipz
 16635  1E77  2E7A               	goto	u447_25
 16636  1E78  0870               	movf	i1___lldiv@divisor,w
 16637  1E79  0274               	subwf	i1___lldiv@dividend,w
 16638  1E7A                     u447_25:	
 16639  1E7A  1C03               	skipc
 16640  1E7B  2E85               	goto	i1l4164
 16641  1E7C  0870               	movf	i1___lldiv@divisor,w
 16642  1E7D  02F4               	subwf	i1___lldiv@dividend,f
 16643  1E7E  0871               	movf	i1___lldiv@divisor+1,w
 16644  1E7F  3BF5               	subwfb	i1___lldiv@dividend+1,f
 16645  1E80  0872               	movf	i1___lldiv@divisor+2,w
 16646  1E81  3BF6               	subwfb	i1___lldiv@dividend+2,f
 16647  1E82  0873               	movf	i1___lldiv@divisor+3,w
 16648  1E83  3BF7               	subwfb	i1___lldiv@dividend+3,f
 16649  1E84  1479               	bsf	i1___lldiv@quotient,0
 16650  1E85                     i1l4164:	
 16651  1E85  3001               	movlw	1
 16652  1E86                     u448_25:	
 16653  1E86  36F3               	lsrf	i1___lldiv@divisor+3,f
 16654  1E87  0CF2               	rrf	i1___lldiv@divisor+2,f
 16655  1E88  0CF1               	rrf	i1___lldiv@divisor+1,f
 16656  1E89  0CF0               	rrf	i1___lldiv@divisor,f
 16657  1E8A  0B89               	decfsz	9,f
 16658  1E8B  2E86               	goto	u448_25
 16659  1E8C  3001               	movlw	1
 16660  1E8D  02FD               	subwf	i1___lldiv@counter,f
 16661  1E8E  1D03               	btfss	3,2
 16662  1E8F  2E65               	goto	i1l4156
 16663  1E90                     i1l4168:	
 16664  1E90  087C               	movf	i1___lldiv@quotient+3,w
 16665  1E91  00F3               	movwf	?i1___lldiv+3
 16666  1E92  087B               	movf	i1___lldiv@quotient+2,w
 16667  1E93  00F2               	movwf	?i1___lldiv+2
 16668  1E94  087A               	movf	i1___lldiv@quotient+1,w
 16669  1E95  00F1               	movwf	?i1___lldiv+1
 16670  1E96  0879               	movf	i1___lldiv@quotient,w
 16671  1E97  00F0               	movwf	?i1___lldiv
 16672  1E98  0008               	return
 16673  1E99                     __end_ofi1___lldiv:	
 16674                           
 16675                           	psect	text64
 16676  1CCE                     __ptext64:	
 16677 ;; *************** function ___llmod *****************
 16678 ;; Defined at:
 16679 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\llmod.c"
 16680 ;; Parameters:    Size  Location     Type
 16681 ;;  divisor         4    0[BANK0 ] unsigned long 
 16682 ;;  dividend        4    4[BANK0 ] unsigned long 
 16683 ;; Auto vars:     Size  Location     Type
 16684 ;;  counter         1    9[BANK0 ] unsigned char 
 16685 ;; Return value:  Size  Location     Type
 16686 ;;                  4    0[BANK0 ] unsigned long 
 16687 ;; Registers used:
 16688 ;;		wreg, status,2, status,0
 16689 ;; Tracked objects:
 16690 ;;		On entry : 0/0
 16691 ;;		On exit  : 0/0
 16692 ;;		Unchanged: 0/0
 16693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16694 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16695 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16696 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16697 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16698 ;;Total ram usage:       10 bytes
 16699 ;; Hardware stack levels used:    1
 16700 ;; This function calls:
 16701 ;;		Nothing
 16702 ;; This function is called by:
 16703 ;;		_sprintf
 16704 ;; This function uses a non-reentrant model
 16705 ;;
 16706                           
 16707                           
 16708                           ;psect for function ___llmod
 16709  1CCE                     ___llmod:	
 16710                           
 16711                           ;incstack = 0
 16712                           ; Regs used in ___llmod: [wreg+status,2+status,0]
 16713  1CCE  0020               	movlb	0	; select bank0
 16714  1CCF  0823               	movf	___llmod@divisor+3,w
 16715  1CD0  0422               	iorwf	___llmod@divisor+2,w
 16716  1CD1  0421               	iorwf	___llmod@divisor+1,w
 16717  1CD2  0420               	iorwf	___llmod@divisor,w
 16718  1CD3  1903               	skipnz
 16719  1CD4  2D08               	goto	i1l4054
 16720  1CD5  01A9               	clrf	___llmod@counter
 16721  1CD6  0AA9               	incf	___llmod@counter,f
 16722  1CD7                     i1l4044:	
 16723  1CD7  1BA3               	btfsc	___llmod@divisor+3,7
 16724  1CD8  2CE5               	goto	i1l4046
 16725  1CD9  3001               	movlw	1
 16726  1CDA                     u423_25:	
 16727  1CDA  35A0               	lslf	___llmod@divisor,f
 16728  1CDB  0DA1               	rlf	___llmod@divisor+1,f
 16729  1CDC  0DA2               	rlf	___llmod@divisor+2,f
 16730  1CDD  0DA3               	rlf	___llmod@divisor+3,f
 16731  1CDE  0B89               	decfsz	9,f
 16732  1CDF  2CDA               	goto	u423_25
 16733  1CE0  3001               	movlw	1
 16734  1CE1  00A8               	movwf	??___llmod
 16735  1CE2  0828               	movf	??___llmod,w
 16736  1CE3  07A9               	addwf	___llmod@counter,f
 16737  1CE4  2CD7               	goto	i1l4044
 16738  1CE5                     i1l4046:	
 16739  1CE5  0823               	movf	___llmod@divisor+3,w
 16740  1CE6  0227               	subwf	___llmod@dividend+3,w
 16741  1CE7  1D03               	skipz
 16742  1CE8  2CF3               	goto	u425_25
 16743  1CE9  0822               	movf	___llmod@divisor+2,w
 16744  1CEA  0226               	subwf	___llmod@dividend+2,w
 16745  1CEB  1D03               	skipz
 16746  1CEC  2CF3               	goto	u425_25
 16747  1CED  0821               	movf	___llmod@divisor+1,w
 16748  1CEE  0225               	subwf	___llmod@dividend+1,w
 16749  1CEF  1D03               	skipz
 16750  1CF0  2CF3               	goto	u425_25
 16751  1CF1  0820               	movf	___llmod@divisor,w
 16752  1CF2  0224               	subwf	___llmod@dividend,w
 16753  1CF3                     u425_25:	
 16754  1CF3  1C03               	skipc
 16755  1CF4  2CFD               	goto	i1l4050
 16756  1CF5  0820               	movf	___llmod@divisor,w
 16757  1CF6  02A4               	subwf	___llmod@dividend,f
 16758  1CF7  0821               	movf	___llmod@divisor+1,w
 16759  1CF8  3BA5               	subwfb	___llmod@dividend+1,f
 16760  1CF9  0822               	movf	___llmod@divisor+2,w
 16761  1CFA  3BA6               	subwfb	___llmod@dividend+2,f
 16762  1CFB  0823               	movf	___llmod@divisor+3,w
 16763  1CFC  3BA7               	subwfb	___llmod@dividend+3,f
 16764  1CFD                     i1l4050:	
 16765  1CFD  3001               	movlw	1
 16766  1CFE                     u426_25:	
 16767  1CFE  36A3               	lsrf	___llmod@divisor+3,f
 16768  1CFF  0CA2               	rrf	___llmod@divisor+2,f
 16769  1D00  0CA1               	rrf	___llmod@divisor+1,f
 16770  1D01  0CA0               	rrf	___llmod@divisor,f
 16771  1D02  0B89               	decfsz	9,f
 16772  1D03  2CFE               	goto	u426_25
 16773  1D04  3001               	movlw	1
 16774  1D05  02A9               	subwf	___llmod@counter,f
 16775  1D06  1D03               	btfss	3,2
 16776  1D07  2CE5               	goto	i1l4046
 16777  1D08                     i1l4054:	
 16778  1D08  0827               	movf	___llmod@dividend+3,w
 16779  1D09  00A3               	movwf	?___llmod+3
 16780  1D0A  0826               	movf	___llmod@dividend+2,w
 16781  1D0B  00A2               	movwf	?___llmod+2
 16782  1D0C  0825               	movf	___llmod@dividend+1,w
 16783  1D0D  00A1               	movwf	?___llmod+1
 16784  1D0E  0824               	movf	___llmod@dividend,w
 16785  1D0F  00A0               	movwf	?___llmod
 16786  1D10  0008               	return
 16787  1D11                     __end_of___llmod:	
 16788                           
 16789                           	psect	text65
 16790  11A6                     __ptext65:	
 16791 ;; *************** function _WriteBaud *****************
 16792 ;; Defined at:
 16793 ;;		line 171 in file "FLASH.c"
 16794 ;; Parameters:    Size  Location     Type
 16795 ;;  row             2    0[BANK1 ] unsigned int 
 16796 ;;  Baud            4    2[BANK1 ] unsigned long 
 16797 ;;  Parity          1    6[BANK1 ] unsigned char 
 16798 ;; Auto vars:     Size  Location     Type
 16799 ;;  temp            4   74[BANK0 ] unsigned long 
 16800 ;; Return value:  Size  Location     Type
 16801 ;;		None               void
 16802 ;; Registers used:
 16803 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16804 ;; Tracked objects:
 16805 ;;		On entry : 0/0
 16806 ;;		On exit  : 0/0
 16807 ;;		Unchanged: 0/0
 16808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16809 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 16810 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16811 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
 16812 ;;      Totals:         0       4      15       0       0       0       0       0       0       0       0       0       
      +0       0
 16813 ;;Total ram usage:       19 bytes
 16814 ;; Hardware stack levels used:    1
 16815 ;; Hardware stack levels required when called:    3
 16816 ;; This function calls:
 16817 ;;		_WriteFlash_Sequential
 16818 ;; This function is called by:
 16819 ;;		_SetBaud
 16820 ;; This function uses a non-reentrant model
 16821 ;;
 16822                           
 16823                           
 16824                           ;psect for function _WriteBaud
 16825  11A6                     _WriteBaud:	
 16826                           
 16827                           ;FLASH.c: 173: unsigned long temp;
 16828                           ;FLASH.c: 174: temp = (Baud & 0x000FFFFF) + (((unsigned long) Parity & 0x7) << 20);
 16829                           
 16830                           ;incstack = 0
 16831                           ; Regs used in _WriteBaud: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16832  11A6  0021               	movlb	1	; select bank1
 16833  11A7  0826               	movf	WriteBaud@Parity^(0+128),w
 16834  11A8  3907               	andlw	7
 16835  11A9  00A7               	movwf	??_WriteBaud^(0+128)
 16836  11AA  01A8               	clrf	(??_WriteBaud^(0+128)+1)
 16837  11AB  01A9               	clrf	(??_WriteBaud^(0+128)+2)
 16838  11AC  01AA               	clrf	(??_WriteBaud^(0+128)+3)
 16839  11AD  3014               	movlw	20
 16840  11AE                     u465_25:	
 16841  11AE  35A7               	lslf	??_WriteBaud^(0+128),f
 16842  11AF  0DA8               	rlf	(??_WriteBaud^(0+128)+1),f
 16843  11B0  0DA9               	rlf	(??_WriteBaud^(0+128)+2),f
 16844  11B1  0DAA               	rlf	(??_WriteBaud^(0+128)+3),f
 16845  11B2  0B89               	decfsz	9,f
 16846  11B3  29AE               	goto	u465_25
 16847  11B4  30FF               	movlw	255
 16848  11B5  0522               	andwf	WriteBaud@Baud^(0+128),w
 16849  11B6  00AB               	movwf	(??_WriteBaud+4)^(0+128)
 16850  11B7  30FF               	movlw	255
 16851  11B8  0523               	andwf	(WriteBaud@Baud+1)^(0+128),w
 16852  11B9  00AC               	movwf	((??_WriteBaud+4)^(0+128)+1)
 16853  11BA  300F               	movlw	15
 16854  11BB  0524               	andwf	(WriteBaud@Baud+2)^(0+128),w
 16855  11BC  00AD               	movwf	((??_WriteBaud+4)^(0+128)+2)
 16856  11BD  3000               	movlw	0
 16857  11BE  0525               	andwf	(WriteBaud@Baud+3)^(0+128),w
 16858  11BF  00AE               	movwf	((??_WriteBaud+4)^(0+128)+3)
 16859  11C0  082B               	movf	(??_WriteBaud+4)^(0+128),w
 16860  11C1  07A7               	addwf	??_WriteBaud^(0+128),f
 16861  11C2  082C               	movf	(??_WriteBaud+5)^(0+128),w
 16862  11C3  3DA8               	addwfc	(??_WriteBaud^(0+128)+1),f
 16863  11C4  082D               	movf	(??_WriteBaud+6)^(0+128),w
 16864  11C5  3DA9               	addwfc	(??_WriteBaud^(0+128)+2),f
 16865  11C6  082E               	movf	(??_WriteBaud+7)^(0+128),w
 16866  11C7  3DAA               	addwfc	(??_WriteBaud^(0+128)+3),f
 16867  11C8  082A               	movf	(??_WriteBaud+3)^(0+128),w
 16868  11C9  0020               	movlb	0	; select bank0
 16869  11CA  00ED               	movwf	WriteBaud@temp+3
 16870  11CB  0021               	movlb	1	; select bank1
 16871  11CC  0829               	movf	(??_WriteBaud+2)^(0+128),w
 16872  11CD  0020               	movlb	0	; select bank0
 16873  11CE  00EC               	movwf	WriteBaud@temp+2
 16874  11CF  0021               	movlb	1	; select bank1
 16875  11D0  0828               	movf	(??_WriteBaud+1)^(0+128),w
 16876  11D1  0020               	movlb	0	; select bank0
 16877  11D2  00EB               	movwf	WriteBaud@temp+1
 16878  11D3  0021               	movlb	1	; select bank1
 16879  11D4  0827               	movf	??_WriteBaud^(0+128),w
 16880  11D5  0020               	movlb	0	; select bank0
 16881  11D6  00EA               	movwf	WriteBaud@temp
 16882                           
 16883                           ;FLASH.c: 175: MEM[1] = (unsigned int) (temp & 0x0003FFF);
 16884  11D7  30FF               	movlw	255
 16885  11D8  056A               	andwf	WriteBaud@temp,w
 16886  11D9  0021               	movlb	1	; select bank1
 16887  11DA  00E4               	movwf	(_MEM^(0+128)+2)
 16888  11DB  303F               	movlw	63
 16889  11DC  0020               	movlb	0	; select bank0
 16890  11DD  056B               	andwf	WriteBaud@temp+1,w
 16891  11DE  0021               	movlb	1	; select bank1
 16892  11DF  00E5               	movwf	((_MEM+1)^(0+128)+2)
 16893                           
 16894                           ;FLASH.c: 176: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
 16895  11E0  0020               	movlb	0	; select bank0
 16896  11E1  086A               	movf	WriteBaud@temp,w
 16897  11E2  0021               	movlb	1	; select bank1
 16898  11E3  00A7               	movwf	??_WriteBaud^(0+128)
 16899  11E4  0020               	movlb	0	; select bank0
 16900  11E5  086B               	movf	WriteBaud@temp+1,w
 16901  11E6  0021               	movlb	1	; select bank1
 16902  11E7  00A8               	movwf	(??_WriteBaud^(0+128)+1)
 16903  11E8  0020               	movlb	0	; select bank0
 16904  11E9  086C               	movf	WriteBaud@temp+2,w
 16905  11EA  0021               	movlb	1	; select bank1
 16906  11EB  00A9               	movwf	(??_WriteBaud^(0+128)+2)
 16907  11EC  0020               	movlb	0	; select bank0
 16908  11ED  086D               	movf	WriteBaud@temp+3,w
 16909  11EE  0021               	movlb	1	; select bank1
 16910  11EF  00AA               	movwf	(??_WriteBaud^(0+128)+3)
 16911  11F0  300E               	movlw	14
 16912  11F1                     u466_25:	
 16913  11F1  36AA               	lsrf	(??_WriteBaud^(0+128)+3),f
 16914  11F2  0CA9               	rrf	(??_WriteBaud^(0+128)+2),f
 16915  11F3  0CA8               	rrf	(??_WriteBaud^(0+128)+1),f
 16916  11F4  0CA7               	rrf	??_WriteBaud^(0+128),f
 16917  11F5  0B89               	decfsz	9,f
 16918  11F6  29F1               	goto	u466_25
 16919  11F7  30FF               	movlw	255
 16920  11F8  0527               	andwf	??_WriteBaud^(0+128),w
 16921  11F9  00E2               	movwf	_MEM^(0+128)
 16922  11FA  303F               	movlw	63
 16923  11FB  0528               	andwf	(??_WriteBaud+1)^(0+128),w
 16924  11FC  00E3               	movwf	(_MEM+1)^(0+128)
 16925                           
 16926                           ;FLASH.c: 177: WriteFlash_Sequential(row, MEM, 2);
 16927  11FD  0821               	movf	(WriteBaud@row+1)^(0+128),w
 16928  11FE  01FB               	clrf	WriteFlash_Sequential@row+1
 16929  11FF  07FB               	addwf	WriteFlash_Sequential@row+1,f
 16930  1200  0820               	movf	WriteBaud@row^(0+128),w
 16931  1201  01FA               	clrf	WriteFlash_Sequential@row
 16932  1202  07FA               	addwf	WriteFlash_Sequential@row,f
 16933  1203  30E2               	movlw	_MEM& (0+255)
 16934  1204  00A7               	movwf	??_WriteBaud^(0+128)
 16935  1205  0827               	movf	??_WriteBaud^(0+128),w
 16936  1206  00FC               	movwf	WriteFlash_Sequential@buffer
 16937  1207  3002               	movlw	2
 16938  1208  00A8               	movwf	(??_WriteBaud+1)^(0+128)
 16939  1209  0828               	movf	(??_WriteBaud+1)^(0+128),w
 16940  120A  00FD               	movwf	WriteFlash_Sequential@amount
 16941  120B  3193  236B         	fcall	_WriteFlash_Sequential
 16942  120D  0008               	return
 16943  120E                     __end_of_WriteBaud:	
 16944                           
 16945                           	psect	text66
 16946  136B                     __ptext66:	
 16947 ;; *************** function _WriteFlash_Sequential *****************
 16948 ;; Defined at:
 16949 ;;		line 112 in file "FLASH.c"
 16950 ;; Parameters:    Size  Location     Type
 16951 ;;  row             2   10[COMMON] unsigned int 
 16952 ;;  buffer          1   12[COMMON] PTR unsigned int 
 16953 ;;		 -> MEM(4), 
 16954 ;;  amount          1   13[COMMON] unsigned char 
 16955 ;; Auto vars:     Size  Location     Type
 16956 ;;  TempBufL       32   35[BANK0 ] unsigned char [32]
 16957 ;;  TempBufH       32    3[BANK0 ] unsigned char [32]
 16958 ;;  temp            2   70[BANK0 ] unsigned int 
 16959 ;;  i               1   73[BANK0 ] unsigned char 
 16960 ;;  spaces          1   72[BANK0 ] unsigned char 
 16961 ;;  amountTemp      1   69[BANK0 ] unsigned char 
 16962 ;;  tempL           1   68[BANK0 ] unsigned char 
 16963 ;;  tempH           1   67[BANK0 ] unsigned char 
 16964 ;; Return value:  Size  Location     Type
 16965 ;;		None               void
 16966 ;; Registers used:
 16967 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16968 ;; Tracked objects:
 16969 ;;		On entry : 0/0
 16970 ;;		On exit  : 0/0
 16971 ;;		Unchanged: 0/0
 16972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16973 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16974 ;;      Locals:         0      71       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16975 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16976 ;;      Totals:         4      74       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16977 ;;Total ram usage:       78 bytes
 16978 ;; Hardware stack levels used:    1
 16979 ;; Hardware stack levels required when called:    2
 16980 ;; This function calls:
 16981 ;;		_BlockErase
 16982 ;;		_UNLOCK
 16983 ;;		i1_ReadFlash_2Byte
 16984 ;;		i1_delayUS
 16985 ;; This function is called by:
 16986 ;;		_WriteBaud
 16987 ;; This function uses a non-reentrant model
 16988 ;;
 16989                           
 16990                           
 16991                           ;psect for function _WriteFlash_Sequential
 16992  136B                     _WriteFlash_Sequential:	
 16993                           
 16994                           ;FLASH.c: 114: unsigned char spaces = 32;
 16995                           
 16996                           ;incstack = 0
 16997                           ; Regs used in _WriteFlash_Sequential: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16998  136B  3020               	movlw	32
 16999  136C  0020               	movlb	0	; select bank0
 17000  136D  00A0               	movwf	??_WriteFlash_Sequential
 17001  136E  0820               	movf	??_WriteFlash_Sequential,w
 17002  136F  00E8               	movwf	WriteFlash_Sequential@spaces
 17003                           
 17004                           ;FLASH.c: 115: unsigned char tempH;
 17005                           ;FLASH.c: 116: unsigned char tempL;
 17006                           ;FLASH.c: 117: unsigned char i;
 17007                           ;FLASH.c: 118: unsigned int temp;
 17008                           ;FLASH.c: 119: unsigned char amountTemp =0;
 17009  1370  01E5               	clrf	WriteFlash_Sequential@amountTemp
 17010                           
 17011                           ;FLASH.c: 120: unsigned char TempBufH[32];
 17012                           ;FLASH.c: 121: unsigned char TempBufL[32];
 17013                           ;FLASH.c: 123: for(i=0;i<spaces;i++)
 17014  1371  01E9               	clrf	WriteFlash_Sequential@i
 17015  1372                     i1l4000:	
 17016  1372  0868               	movf	WriteFlash_Sequential@spaces,w
 17017  1373  0269               	subwf	WriteFlash_Sequential@i,w
 17018  1374  1803               	btfsc	3,0
 17019  1375  2BC8               	goto	i1l4002
 17020                           
 17021                           ;FLASH.c: 124: {
 17022                           ;FLASH.c: 125: amountTemp++;
 17023  1376  3001               	movlw	1
 17024  1377  00A0               	movwf	??_WriteFlash_Sequential
 17025  1378  0820               	movf	??_WriteFlash_Sequential,w
 17026  1379  07E5               	addwf	WriteFlash_Sequential@amountTemp,f
 17027                           
 17028                           ;FLASH.c: 126: if(amountTemp <= amount)
 17029  137A  0865               	movf	WriteFlash_Sequential@amountTemp,w
 17030  137B  027D               	subwf	WriteFlash_Sequential@amount,w
 17031  137C  1C03               	skipc
 17032  137D  2B96               	goto	i1l3988
 17033                           
 17034                           ;FLASH.c: 127: {
 17035                           ;FLASH.c: 128: tempH = (unsigned char)((*buffer & 0x3F00) >> 8);
 17036  137E  087C               	movf	WriteFlash_Sequential@buffer,w
 17037  137F  0086               	movwf	6
 17038  1380  0187               	clrf	7
 17039  1381  3F40               	moviw [0]fsr1
 17040  1382  00A0               	movwf	??_WriteFlash_Sequential
 17041  1383  3F41               	moviw [1]fsr1
 17042  1384  00A1               	movwf	??_WriteFlash_Sequential+1
 17043  1385  0821               	movf	??_WriteFlash_Sequential+1,w
 17044  1386  393F               	andlw	63
 17045  1387  00A2               	movwf	??_WriteFlash_Sequential+2
 17046  1388  0822               	movf	??_WriteFlash_Sequential+2,w
 17047  1389  00E3               	movwf	WriteFlash_Sequential@tempH
 17048                           
 17049                           ;FLASH.c: 129: tempL = (unsigned char)(*buffer & 0x00FF);
 17050  138A  087C               	movf	WriteFlash_Sequential@buffer,w
 17051  138B  0086               	movwf	6
 17052  138C  0187               	clrf	7
 17053  138D  0801               	movf	1,w
 17054  138E  00A0               	movwf	??_WriteFlash_Sequential
 17055  138F  0820               	movf	??_WriteFlash_Sequential,w
 17056  1390  00E4               	movwf	WriteFlash_Sequential@tempL
 17057                           
 17058                           ;FLASH.c: 130: buffer++;
 17059  1391  3002               	movlw	2
 17060  1392  00A0               	movwf	??_WriteFlash_Sequential
 17061  1393  0820               	movf	??_WriteFlash_Sequential,w
 17062  1394  07FC               	addwf	WriteFlash_Sequential@buffer,f
 17063                           
 17064                           ;FLASH.c: 131: }
 17065  1395  2BB3               	goto	i1l3994
 17066  1396                     i1l3988:	
 17067                           
 17068                           ;FLASH.c: 132: else
 17069                           ;FLASH.c: 133: {
 17070                           ;FLASH.c: 135: temp = ReadFlash_2Byte(row, i);
 17071  1396  087B               	movf	WriteFlash_Sequential@row+1,w
 17072  1397  01F1               	clrf	i1ReadFlash_2Byte@row+1
 17073  1398  07F1               	addwf	i1ReadFlash_2Byte@row+1,f
 17074  1399  087A               	movf	WriteFlash_Sequential@row,w
 17075  139A  01F0               	clrf	i1ReadFlash_2Byte@row
 17076  139B  07F0               	addwf	i1ReadFlash_2Byte@row,f
 17077  139C  0869               	movf	WriteFlash_Sequential@i,w
 17078  139D  00A0               	movwf	??_WriteFlash_Sequential
 17079  139E  0820               	movf	??_WriteFlash_Sequential,w
 17080  139F  00F2               	movwf	i1ReadFlash_2Byte@column
 17081  13A0  3199  21D5  3193   	fcall	i1_ReadFlash_2Byte
 17082  13A3  0871               	movf	?i1_ReadFlash_2Byte+1,w
 17083  13A4  0020               	movlb	0	; select bank0
 17084  13A5  01E7               	clrf	WriteFlash_Sequential@temp+1
 17085  13A6  07E7               	addwf	WriteFlash_Sequential@temp+1,f
 17086  13A7  0870               	movf	?i1_ReadFlash_2Byte,w
 17087  13A8  01E6               	clrf	WriteFlash_Sequential@temp
 17088  13A9  07E6               	addwf	WriteFlash_Sequential@temp,f
 17089                           
 17090                           ;FLASH.c: 136: tempH = (unsigned char)((temp & 0x3F00) >>8);
 17091  13AA  0867               	movf	WriteFlash_Sequential@temp+1,w
 17092  13AB  393F               	andlw	63
 17093  13AC  00A0               	movwf	??_WriteFlash_Sequential
 17094  13AD  0820               	movf	??_WriteFlash_Sequential,w
 17095  13AE  00E3               	movwf	WriteFlash_Sequential@tempH
 17096                           
 17097                           ;FLASH.c: 137: tempL = (unsigned char)(temp & 0x00FF);
 17098  13AF  0866               	movf	WriteFlash_Sequential@temp,w
 17099  13B0  00A0               	movwf	??_WriteFlash_Sequential
 17100  13B1  0820               	movf	??_WriteFlash_Sequential,w
 17101  13B2  00E4               	movwf	WriteFlash_Sequential@tempL
 17102  13B3                     i1l3994:	
 17103                           
 17104                           ;FLASH.c: 138: }
 17105                           ;FLASH.c: 139: TempBufH[i] = tempH;
 17106  13B3  0863               	movf	WriteFlash_Sequential@tempH,w
 17107  13B4  00A0               	movwf	??_WriteFlash_Sequential
 17108  13B5  0869               	movf	WriteFlash_Sequential@i,w
 17109  13B6  3E23               	addlw	WriteFlash_Sequential@TempBufH& (0+255)
 17110  13B7  0086               	movwf	6
 17111  13B8  0187               	clrf	7
 17112  13B9  0820               	movf	??_WriteFlash_Sequential,w
 17113  13BA  0081               	movwf	1
 17114                           
 17115                           ;FLASH.c: 140: TempBufL[i] = tempL;
 17116  13BB  0864               	movf	WriteFlash_Sequential@tempL,w
 17117  13BC  00A0               	movwf	??_WriteFlash_Sequential
 17118  13BD  0869               	movf	WriteFlash_Sequential@i,w
 17119  13BE  3E43               	addlw	WriteFlash_Sequential@TempBufL& (0+255)
 17120  13BF  0086               	movwf	6
 17121  13C0  0187               	clrf	7
 17122  13C1  0820               	movf	??_WriteFlash_Sequential,w
 17123  13C2  0081               	movwf	1
 17124  13C3  3001               	movlw	1
 17125  13C4  00A0               	movwf	??_WriteFlash_Sequential
 17126  13C5  0820               	movf	??_WriteFlash_Sequential,w
 17127  13C6  07E9               	addwf	WriteFlash_Sequential@i,f
 17128  13C7  2B72               	goto	i1l4000
 17129  13C8                     i1l4002:	
 17130                           
 17131                           ;FLASH.c: 141: }
 17132                           ;FLASH.c: 142: BlockErase(row);
 17133  13C8  087B               	movf	WriteFlash_Sequential@row+1,w
 17134  13C9  01F1               	clrf	BlockErase@row+1
 17135  13CA  07F1               	addwf	BlockErase@row+1,f
 17136  13CB  087A               	movf	WriteFlash_Sequential@row,w
 17137  13CC  01F0               	clrf	BlockErase@row
 17138  13CD  07F0               	addwf	BlockErase@row,f
 17139  13CE  3199  21FF  3193   	fcall	_BlockErase
 17140                           
 17141                           ;FLASH.c: 143: delayUS(1000);
 17142  13D1  3000               	movlw	0
 17143  13D2  00F3               	movwf	i1delayUS@US+3
 17144  13D3  3000               	movlw	0
 17145  13D4  00F2               	movwf	i1delayUS@US+2
 17146  13D5  3003               	movlw	3
 17147  13D6  00F1               	movwf	i1delayUS@US+1
 17148  13D7  30E8               	movlw	232
 17149  13D8  00F0               	movwf	i1delayUS@US
 17150  13D9  319B  2375  3193   	fcall	i1_delayUS
 17151                           
 17152                           ;FLASH.c: 144: INTCON &= ~0x80;
 17153  13DC  307F               	movlw	127
 17154  13DD  0020               	movlb	0	; select bank0
 17155  13DE  00A0               	movwf	??_WriteFlash_Sequential
 17156  13DF  0820               	movf	??_WriteFlash_Sequential,w
 17157  13E0  058B               	andwf	11,f	;volatile
 17158                           
 17159                           ;FLASH.c: 145: PMCON1 |= 0b00000100;
 17160  13E1  0023               	movlb	3	; select bank3
 17161  13E2  1515               	bsf	21,2	;volatile
 17162                           
 17163                           ;FLASH.c: 146: PMCON1 &= ~0b01000000;
 17164  13E3  30BF               	movlw	191
 17165  13E4  0020               	movlb	0	; select bank0
 17166  13E5  00A0               	movwf	??_WriteFlash_Sequential
 17167  13E6  0820               	movf	??_WriteFlash_Sequential,w
 17168  13E7  0023               	movlb	3	; select bank3
 17169  13E8  0595               	andwf	21,f	;volatile
 17170                           
 17171                           ;FLASH.c: 147: PMCON1 &= ~0b00100000;
 17172  13E9  30DF               	movlw	223
 17173  13EA  0020               	movlb	0	; select bank0
 17174  13EB  00A0               	movwf	??_WriteFlash_Sequential
 17175  13EC  0820               	movf	??_WriteFlash_Sequential,w
 17176  13ED  0023               	movlb	3	; select bank3
 17177  13EE  0595               	andwf	21,f	;volatile
 17178                           
 17179                           ;FLASH.c: 148: PMCON1 &= ~0b00010000;
 17180  13EF  30EF               	movlw	239
 17181  13F0  0020               	movlb	0	; select bank0
 17182  13F1  00A0               	movwf	??_WriteFlash_Sequential
 17183  13F2  0820               	movf	??_WriteFlash_Sequential,w
 17184  13F3  0023               	movlb	3	; select bank3
 17185  13F4  0595               	andwf	21,f	;volatile
 17186                           
 17187                           ;FLASH.c: 149: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 17188  13F5  087B               	movf	WriteFlash_Sequential@row+1,w
 17189  13F6  0020               	movlb	0	; select bank0
 17190  13F7  00A1               	movwf	??_WriteFlash_Sequential+1
 17191  13F8  087A               	movf	WriteFlash_Sequential@row,w
 17192  13F9  00A0               	movwf	??_WriteFlash_Sequential
 17193  13FA  36A1               	lsrf	??_WriteFlash_Sequential+1,f
 17194  13FB  0CA0               	rrf	??_WriteFlash_Sequential,f
 17195  13FC  36A1               	lsrf	??_WriteFlash_Sequential+1,f
 17196  13FD  0CA0               	rrf	??_WriteFlash_Sequential,f
 17197  13FE  36A1               	lsrf	??_WriteFlash_Sequential+1,f
 17198  13FF  0CA0               	rrf	??_WriteFlash_Sequential,f
 17199  1400  0820               	movf	??_WriteFlash_Sequential,w
 17200  1401  397F               	andlw	127
 17201  1402  0023               	movlb	3	; select bank3
 17202  1403  0092               	movwf	18	;volatile
 17203                           
 17204                           ;FLASH.c: 150: PMADRL = (unsigned char)((row & 0x007) << 5);
 17205  1404  087A               	movf	WriteFlash_Sequential@row,w
 17206  1405  3907               	andlw	7
 17207  1406  0020               	movlb	0	; select bank0
 17208  1407  00A0               	movwf	??_WriteFlash_Sequential
 17209  1408  3004               	movlw	4
 17210  1409                     u420_25:	
 17211  1409  35A0               	lslf	??_WriteFlash_Sequential,f
 17212  140A  3EFF               	addlw	-1
 17213  140B  1D03               	skipz
 17214  140C  2C09               	goto	u420_25
 17215  140D  3520               	lslf	??_WriteFlash_Sequential,w
 17216  140E  0023               	movlb	3	; select bank3
 17217  140F  0091               	movwf	17	;volatile
 17218                           
 17219                           ;FLASH.c: 152: for(i=0;i<spaces;i++)
 17220  1410  0020               	movlb	0	; select bank0
 17221  1411  01E9               	clrf	WriteFlash_Sequential@i
 17222  1412                     i1l4032:	
 17223  1412  0868               	movf	WriteFlash_Sequential@spaces,w
 17224  1413  0269               	subwf	WriteFlash_Sequential@i,w
 17225  1414  1803               	btfsc	3,0
 17226  1415  2C36               	goto	i1l4034
 17227                           
 17228                           ;FLASH.c: 153: {
 17229                           ;FLASH.c: 154: PMDATH = TempBufH[i];
 17230  1416  0869               	movf	WriteFlash_Sequential@i,w
 17231  1417  3E23               	addlw	WriteFlash_Sequential@TempBufH& (0+255)
 17232  1418  0086               	movwf	6
 17233  1419  0187               	clrf	7
 17234  141A  0801               	movf	1,w
 17235  141B  0023               	movlb	3	; select bank3
 17236  141C  0094               	movwf	20	;volatile
 17237                           
 17238                           ;FLASH.c: 155: PMDATL = TempBufL[i];
 17239  141D  0020               	movlb	0	; select bank0
 17240  141E  0869               	movf	WriteFlash_Sequential@i,w
 17241  141F  3E43               	addlw	WriteFlash_Sequential@TempBufL& (0+255)
 17242  1420  0086               	movwf	6
 17243  1421  0187               	clrf	7
 17244  1422  0801               	movf	1,w
 17245  1423  0023               	movlb	3	; select bank3
 17246  1424  0093               	movwf	19	;volatile
 17247                           
 17248                           ;FLASH.c: 156: __nop();
 17249  1425  0000               	nop
 17250                           
 17251                           ;FLASH.c: 157: __nop();
 17252  1426  0000               	nop
 17253                           
 17254                           ;FLASH.c: 158: UNLOCK();
 17255  1427  3198  207B  3193   	fcall	_UNLOCK
 17256                           
 17257                           ;FLASH.c: 159: PMADRL++;
 17258  142A  3001               	movlw	1
 17259  142B  0020               	movlb	0	; select bank0
 17260  142C  00A0               	movwf	??_WriteFlash_Sequential
 17261  142D  0820               	movf	??_WriteFlash_Sequential,w
 17262  142E  0023               	movlb	3	; select bank3
 17263  142F  0791               	addwf	17,f	;volatile
 17264  1430  3001               	movlw	1
 17265  1431  0020               	movlb	0	; select bank0
 17266  1432  00A0               	movwf	??_WriteFlash_Sequential
 17267  1433  0820               	movf	??_WriteFlash_Sequential,w
 17268  1434  07E9               	addwf	WriteFlash_Sequential@i,f
 17269  1435  2C12               	goto	i1l4032
 17270  1436                     i1l4034:	
 17271                           
 17272                           ;FLASH.c: 161: }
 17273                           ;FLASH.c: 162: PMCON1 &= ~0b00000100;
 17274  1436  30FB               	movlw	251
 17275  1437  00A0               	movwf	??_WriteFlash_Sequential
 17276  1438  0820               	movf	??_WriteFlash_Sequential,w
 17277  1439  0023               	movlb	3	; select bank3
 17278  143A  0595               	andwf	21,f	;volatile
 17279                           
 17280                           ;FLASH.c: 163: INTCON |= 0x80;
 17281  143B  178B               	bsf	11,7	;volatile
 17282  143C  0008               	return
 17283  143D                     __end_of_WriteFlash_Sequential:	
 17284                           
 17285                           	psect	text67
 17286  1B75                     __ptext67:	
 17287 ;; *************** function i1_delayUS *****************
 17288 ;; Defined at:
 17289 ;;		line 49 in file "MISC.c"
 17290 ;; Parameters:    Size  Location     Type
 17291 ;;  US              4    0[COMMON] long 
 17292 ;; Auto vars:     Size  Location     Type
 17293 ;;  delayUS         4    5[COMMON] long 
 17294 ;;  delayUS         1    9[COMMON] unsigned char 
 17295 ;; Return value:  Size  Location     Type
 17296 ;;		None               void
 17297 ;; Registers used:
 17298 ;;		wreg, status,2, status,0
 17299 ;; Tracked objects:
 17300 ;;		On entry : 0/0
 17301 ;;		On exit  : 0/0
 17302 ;;		Unchanged: 0/0
 17303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17304 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17305 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17306 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17307 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17308 ;;Total ram usage:       10 bytes
 17309 ;; Hardware stack levels used:    1
 17310 ;; This function calls:
 17311 ;;		Nothing
 17312 ;; This function is called by:
 17313 ;;		_UART_send_break_timed
 17314 ;;		_SetBaud
 17315 ;;		_Process_PS2_ScanCode
 17316 ;;		_WriteFlash_Sequential
 17317 ;;		i1_UARTstringWAIT
 17318 ;;		i1_Send_PS2
 17319 ;; This function uses a non-reentrant model
 17320 ;;
 17321                           
 17322                           
 17323                           ;psect for function i1_delayUS
 17324  1B75                     i1_delayUS:	
 17325                           
 17326                           ;MISC.c: 51: long i;
 17327                           ;MISC.c: 52: unsigned char j;
 17328                           ;MISC.c: 53: for(i=0;i<US;i+=6)
 17329                           
 17330                           ;incstack = 0
 17331                           ; Regs used in i1_delayUS: [wreg+status,2+status,0]
 17332  1B75  3000               	movlw	0
 17333  1B76  00F8               	movwf	i1delayUS@i+3
 17334  1B77  3000               	movlw	0
 17335  1B78  00F7               	movwf	i1delayUS@i+2
 17336  1B79  3000               	movlw	0
 17337  1B7A  00F6               	movwf	i1delayUS@i+1
 17338  1B7B  3000               	movlw	0
 17339  1B7C  00F5               	movwf	i1delayUS@i
 17340  1B7D                     i1l282:	
 17341  1B7D  0878               	movf	i1delayUS@i+3,w
 17342  1B7E  3A80               	xorlw	128
 17343  1B7F  00F4               	movwf	??i1_delayUS
 17344  1B80  0873               	movf	i1delayUS@US+3,w
 17345  1B81  3A80               	xorlw	128
 17346  1B82  0274               	subwf	??i1_delayUS,w
 17347  1B83  1D03               	skipz
 17348  1B84  2B8F               	goto	u391_23
 17349  1B85  0872               	movf	i1delayUS@US+2,w
 17350  1B86  0277               	subwf	i1delayUS@i+2,w
 17351  1B87  1D03               	skipz
 17352  1B88  2B8F               	goto	u391_23
 17353  1B89  0871               	movf	i1delayUS@US+1,w
 17354  1B8A  0276               	subwf	i1delayUS@i+1,w
 17355  1B8B  1D03               	skipz
 17356  1B8C  2B8F               	goto	u391_23
 17357  1B8D  0870               	movf	i1delayUS@US,w
 17358  1B8E  0275               	subwf	i1delayUS@i,w
 17359  1B8F                     u391_23:	
 17360  1B8F  1803               	btfsc	3,0
 17361  1B90  0008               	return
 17362                           
 17363                           ;MISC.c: 54: {
 17364                           ;MISC.c: 55: for(j=0;j<32;j++)
 17365  1B91  01F9               	clrf	i1delayUS@j
 17366  1B92  3020               	movlw	32
 17367  1B93  0279               	subwf	i1delayUS@j,w
 17368  1B94  1803               	btfsc	3,0
 17369  1B95  2B9F               	goto	i1l3836
 17370  1B96                     i1l284:	
 17371                           
 17372                           ;MISC.c: 56: {
 17373                           ;MISC.c: 57: __nop();
 17374  1B96  0000               	nop
 17375  1B97  3001               	movlw	1
 17376  1B98  00F4               	movwf	??i1_delayUS
 17377  1B99  0874               	movf	??i1_delayUS,w
 17378  1B9A  07F9               	addwf	i1delayUS@j,f
 17379  1B9B  3020               	movlw	32
 17380  1B9C  0279               	subwf	i1delayUS@j,w
 17381  1B9D  1C03               	skipc
 17382  1B9E  2B96               	goto	i1l284
 17383  1B9F                     i1l3836:	
 17384  1B9F  3006               	movlw	6
 17385  1BA0  07F5               	addwf	i1delayUS@i,f
 17386  1BA1  3000               	movlw	0
 17387  1BA2  3DF6               	addwfc	i1delayUS@i+1,f
 17388  1BA3  3000               	movlw	0
 17389  1BA4  3DF7               	addwfc	i1delayUS@i+2,f
 17390  1BA5  3000               	movlw	0
 17391  1BA6  3DF8               	addwfc	i1delayUS@i+3,f
 17392  1BA7  2B7D               	goto	i1l282
 17393  1BA8                     __end_ofi1_delayUS:	
 17394                           
 17395                           	psect	text68
 17396  19D5                     __ptext68:	
 17397 ;; *************** function i1_ReadFlash_2Byte *****************
 17398 ;; Defined at:
 17399 ;;		line 43 in file "FLASH.c"
 17400 ;; Parameters:    Size  Location     Type
 17401 ;;  row             2    0[COMMON] unsigned int 
 17402 ;;  column          1    2[COMMON] unsigned char 
 17403 ;; Auto vars:     Size  Location     Type
 17404 ;;		None
 17405 ;; Return value:  Size  Location     Type
 17406 ;;                  2    0[COMMON] unsigned int 
 17407 ;; Registers used:
 17408 ;;		wreg, status,2, status,0
 17409 ;; Tracked objects:
 17410 ;;		On entry : 0/0
 17411 ;;		On exit  : 0/0
 17412 ;;		Unchanged: 0/0
 17413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17414 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17416 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17417 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17418 ;;Total ram usage:        5 bytes
 17419 ;; Hardware stack levels used:    1
 17420 ;; This function calls:
 17421 ;;		Nothing
 17422 ;; This function is called by:
 17423 ;;		_WriteFlash_Sequential
 17424 ;;		i1_ReadFlash_4Byte
 17425 ;; This function uses a non-reentrant model
 17426 ;;
 17427                           
 17428                           
 17429                           ;psect for function i1_ReadFlash_2Byte
 17430  19D5                     i1_ReadFlash_2Byte:	
 17431                           
 17432                           ;FLASH.c: 45: PMCON1 &= ~0b01000000;
 17433                           
 17434                           ;incstack = 0
 17435                           ; Regs used in i1_ReadFlash_2Byte: [wreg+status,2+status,0]
 17436  19D5  30BF               	movlw	191
 17437  19D6  00F3               	movwf	??i1_ReadFlash_2Byte
 17438  19D7  0873               	movf	??i1_ReadFlash_2Byte,w
 17439  19D8  0023               	movlb	3	; select bank3
 17440  19D9  0595               	andwf	21,f	;volatile
 17441                           
 17442                           ;FLASH.c: 46: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 17443  19DA  0871               	movf	i1ReadFlash_2Byte@row+1,w
 17444  19DB  00F4               	movwf	??i1_ReadFlash_2Byte+1
 17445  19DC  0870               	movf	i1ReadFlash_2Byte@row,w
 17446  19DD  00F3               	movwf	??i1_ReadFlash_2Byte
 17447  19DE  36F4               	lsrf	??i1_ReadFlash_2Byte+1,f
 17448  19DF  0CF3               	rrf	??i1_ReadFlash_2Byte,f
 17449  19E0  36F4               	lsrf	??i1_ReadFlash_2Byte+1,f
 17450  19E1  0CF3               	rrf	??i1_ReadFlash_2Byte,f
 17451  19E2  36F4               	lsrf	??i1_ReadFlash_2Byte+1,f
 17452  19E3  0CF3               	rrf	??i1_ReadFlash_2Byte,f
 17453  19E4  0873               	movf	??i1_ReadFlash_2Byte,w
 17454  19E5  397F               	andlw	127
 17455  19E6  0092               	movwf	18	;volatile
 17456                           
 17457                           ;FLASH.c: 47: PMADRL = (unsigned char)(((row & 0x007) << 5) + column);
 17458  19E7  0870               	movf	i1ReadFlash_2Byte@row,w
 17459  19E8  3907               	andlw	7
 17460  19E9  00F3               	movwf	??i1_ReadFlash_2Byte
 17461  19EA  3004               	movlw	4
 17462  19EB                     u399_25:	
 17463  19EB  35F3               	lslf	??i1_ReadFlash_2Byte,f
 17464  19EC  3EFF               	addlw	-1
 17465  19ED  1D03               	skipz
 17466  19EE  29EB               	goto	u399_25
 17467  19EF  3573               	lslf	??i1_ReadFlash_2Byte,w
 17468  19F0  0772               	addwf	i1ReadFlash_2Byte@column,w
 17469  19F1  0091               	movwf	17	;volatile
 17470                           
 17471                           ;FLASH.c: 48: PMCON1 |= 0b00000001;
 17472  19F2  1415               	bsf	21,0	;volatile
 17473  19F3                     i1l943:	
 17474                           ;FLASH.c: 49: while(PMCON1 & 0b00000001);
 17475                           
 17476  19F3  1815               	btfsc	21,0	;volatile
 17477  19F4  29F3               	goto	i1l943
 17478                           
 17479                           ;FLASH.c: 50: __nop();
 17480  19F5  0000               	nop
 17481                           
 17482                           ;FLASH.c: 51: __nop();
 17483  19F6  0000               	nop
 17484                           
 17485                           ;FLASH.c: 52: return (PMDATL | (PMDATH << 8));
 17486  19F7  0023               	movlb	3	; select bank3
 17487  19F8  0814               	movf	20,w	;volatile
 17488  19F9  01F1               	clrf	?i1_ReadFlash_2Byte+1
 17489  19FA  07F1               	addwf	?i1_ReadFlash_2Byte+1,f
 17490  19FB  0813               	movf	19,w	;volatile
 17491  19FC  01F0               	clrf	?i1_ReadFlash_2Byte
 17492  19FD  07F0               	addwf	?i1_ReadFlash_2Byte,f
 17493  19FE  0008               	return
 17494  19FF                     __end_ofi1_ReadFlash_2Byte:	
 17495                           
 17496                           	psect	text69
 17497  19FF                     __ptext69:	
 17498 ;; *************** function _BlockErase *****************
 17499 ;; Defined at:
 17500 ;;		line 91 in file "FLASH.c"
 17501 ;; Parameters:    Size  Location     Type
 17502 ;;  row             2    0[COMMON] unsigned int 
 17503 ;; Auto vars:     Size  Location     Type
 17504 ;;		None
 17505 ;; Return value:  Size  Location     Type
 17506 ;;		None               void
 17507 ;; Registers used:
 17508 ;;		wreg, status,2, status,0, pclath, cstack
 17509 ;; Tracked objects:
 17510 ;;		On entry : 0/0
 17511 ;;		On exit  : 0/0
 17512 ;;		Unchanged: 0/0
 17513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17514 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17516 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17517 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17518 ;;Total ram usage:        4 bytes
 17519 ;; Hardware stack levels used:    1
 17520 ;; Hardware stack levels required when called:    1
 17521 ;; This function calls:
 17522 ;;		_UNLOCK
 17523 ;; This function is called by:
 17524 ;;		_WriteFlash_Sequential
 17525 ;; This function uses a non-reentrant model
 17526 ;;
 17527                           
 17528                           
 17529                           ;psect for function _BlockErase
 17530  19FF                     _BlockErase:	
 17531                           
 17532                           ;FLASH.c: 93: INTCON &= ~0x80;
 17533                           
 17534                           ;incstack = 0
 17535                           ; Regs used in _BlockErase: [wreg+status,2+status,0+pclath+cstack]
 17536  19FF  307F               	movlw	127
 17537  1A00  00F2               	movwf	??_BlockErase
 17538  1A01  0872               	movf	??_BlockErase,w
 17539  1A02  058B               	andwf	11,f	;volatile
 17540                           
 17541                           ;FLASH.c: 94: PMCON1 &= ~0b01000000;
 17542  1A03  30BF               	movlw	191
 17543  1A04  00F2               	movwf	??_BlockErase
 17544  1A05  0872               	movf	??_BlockErase,w
 17545  1A06  0023               	movlb	3	; select bank3
 17546  1A07  0595               	andwf	21,f	;volatile
 17547                           
 17548                           ;FLASH.c: 95: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 17549  1A08  0871               	movf	BlockErase@row+1,w
 17550  1A09  00F3               	movwf	??_BlockErase+1
 17551  1A0A  0870               	movf	BlockErase@row,w
 17552  1A0B  00F2               	movwf	??_BlockErase
 17553  1A0C  36F3               	lsrf	??_BlockErase+1,f
 17554  1A0D  0CF2               	rrf	??_BlockErase,f
 17555  1A0E  36F3               	lsrf	??_BlockErase+1,f
 17556  1A0F  0CF2               	rrf	??_BlockErase,f
 17557  1A10  36F3               	lsrf	??_BlockErase+1,f
 17558  1A11  0CF2               	rrf	??_BlockErase,f
 17559  1A12  0872               	movf	??_BlockErase,w
 17560  1A13  397F               	andlw	127
 17561  1A14  0092               	movwf	18	;volatile
 17562                           
 17563                           ;FLASH.c: 96: PMADRL = (unsigned char)((row & 0x007) << 5);
 17564  1A15  0870               	movf	BlockErase@row,w
 17565  1A16  3907               	andlw	7
 17566  1A17  00F2               	movwf	??_BlockErase
 17567  1A18  3004               	movlw	4
 17568  1A19                     u388_25:	
 17569  1A19  35F2               	lslf	??_BlockErase,f
 17570  1A1A  3EFF               	addlw	-1
 17571  1A1B  1D03               	skipz
 17572  1A1C  2A19               	goto	u388_25
 17573  1A1D  3572               	lslf	??_BlockErase,w
 17574  1A1E  0091               	movwf	17	;volatile
 17575                           
 17576                           ;FLASH.c: 97: PMCON1 |= 0b00010000;
 17577  1A1F  1615               	bsf	21,4	;volatile
 17578                           
 17579                           ;FLASH.c: 98: PMCON1 |= 0b00000100;
 17580  1A20  1515               	bsf	21,2	;volatile
 17581                           
 17582                           ;FLASH.c: 99: UNLOCK();
 17583  1A21  3198  207B         	fcall	_UNLOCK
 17584                           
 17585                           ;FLASH.c: 100: PMCON1 &= ~0b00000100;
 17586  1A23  30FB               	movlw	251
 17587  1A24  00F2               	movwf	??_BlockErase
 17588  1A25  0872               	movf	??_BlockErase,w
 17589  1A26  0023               	movlb	3	; select bank3
 17590  1A27  0595               	andwf	21,f	;volatile
 17591                           
 17592                           ;FLASH.c: 101: INTCON |= 0x80;
 17593  1A28  178B               	bsf	11,7	;volatile
 17594  1A29  0008               	return
 17595  1A2A                     __end_of_BlockErase:	
 17596                           
 17597                           	psect	text70
 17598  187B                     __ptext70:	
 17599 ;; *************** function _UNLOCK *****************
 17600 ;; Defined at:
 17601 ;;		line 76 in file "FLASH.c"
 17602 ;; Parameters:    Size  Location     Type
 17603 ;;		None
 17604 ;; Auto vars:     Size  Location     Type
 17605 ;;		None
 17606 ;; Return value:  Size  Location     Type
 17607 ;;		None               void
 17608 ;; Registers used:
 17609 ;;		wreg
 17610 ;; Tracked objects:
 17611 ;;		On entry : 0/0
 17612 ;;		On exit  : 0/0
 17613 ;;		Unchanged: 0/0
 17614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17618 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17619 ;;Total ram usage:        0 bytes
 17620 ;; Hardware stack levels used:    1
 17621 ;; This function calls:
 17622 ;;		Nothing
 17623 ;; This function is called by:
 17624 ;;		_BlockErase
 17625 ;;		_WriteFlash_Sequential
 17626 ;; This function uses a non-reentrant model
 17627 ;;
 17628                           
 17629                           
 17630                           ;psect for function _UNLOCK
 17631  187B                     _UNLOCK:	
 17632                           
 17633                           ;FLASH.c: 78: PMCON2 = 0x55;
 17634                           
 17635                           ;incstack = 0
 17636                           ; Regs used in _UNLOCK: [wreg]
 17637  187B  3055               	movlw	85
 17638  187C  0023               	movlb	3	; select bank3
 17639  187D  0096               	movwf	22	;volatile
 17640                           
 17641                           ;FLASH.c: 79: PMCON2 = 0xAA;
 17642  187E  30AA               	movlw	170
 17643  187F  0096               	movwf	22	;volatile
 17644                           
 17645                           ;FLASH.c: 80: PMCON1 |= 0b00000010;
 17646  1880  1495               	bsf	21,1	;volatile
 17647  1881                     i1l952:	
 17648                           ;FLASH.c: 81: while(PMCON1 & 0b00000010);
 17649                           
 17650  1881  1895               	btfsc	21,1	;volatile
 17651  1882  2881               	goto	i1l952
 17652                           
 17653                           ;FLASH.c: 82: __nop();
 17654  1883  0000               	nop
 17655                           
 17656                           ;FLASH.c: 83: __nop();
 17657  1884  0000               	nop
 17658  1885  0008               	return
 17659  1886                     __end_of_UNLOCK:	
 17660                           
 17661                           	psect	text71
 17662  18BF                     __ptext71:	
 17663 ;; *************** function _ISNUMBER *****************
 17664 ;; Defined at:
 17665 ;;		line 127 in file "MISC.c"
 17666 ;; Parameters:    Size  Location     Type
 17667 ;;  ascii           1    wreg     unsigned char 
 17668 ;; Auto vars:     Size  Location     Type
 17669 ;;  ascii           1    0[COMMON] unsigned char 
 17670 ;; Return value:  Size  Location     Type
 17671 ;;                  1    wreg      unsigned char 
 17672 ;; Registers used:
 17673 ;;		wreg
 17674 ;; Tracked objects:
 17675 ;;		On entry : 0/0
 17676 ;;		On exit  : 0/0
 17677 ;;		Unchanged: 0/0
 17678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17680 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17682 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17683 ;;Total ram usage:        1 bytes
 17684 ;; Hardware stack levels used:    1
 17685 ;; This function calls:
 17686 ;;		Nothing
 17687 ;; This function is called by:
 17688 ;;		_Process_PS2_ScanCode
 17689 ;; This function uses a non-reentrant model
 17690 ;;
 17691                           
 17692                           
 17693                           ;psect for function _ISNUMBER
 17694  18BF                     _ISNUMBER:	
 17695                           
 17696                           ;incstack = 0
 17697                           ; Regs used in _ISNUMBER: [wreg]
 17698                           ;ISNUMBER@ascii stored from wreg
 17699  18BF  00F0               	movwf	ISNUMBER@ascii
 17700                           
 17701                           ;MISC.c: 129: if(ascii >= '0' && ascii <='9')
 17702  18C0  3030               	movlw	48
 17703  18C1  0270               	subwf	ISNUMBER@ascii,w
 17704  18C2  1C03               	skipc
 17705  18C3  28CA               	goto	i1l4786
 17706  18C4  303A               	movlw	58
 17707  18C5  0270               	subwf	ISNUMBER@ascii,w
 17708  18C6  1803               	skipnc
 17709  18C7  28CA               	goto	i1l4786
 17710                           
 17711                           ;MISC.c: 130: {
 17712                           ;MISC.c: 131: return 1;
 17713  18C8  3001               	movlw	1
 17714                           
 17715                           ;MISC.c: 132: }
 17716  18C9  0008               	return
 17717  18CA                     i1l4786:	
 17718                           
 17719                           ;MISC.c: 133: else
 17720                           ;MISC.c: 134: {
 17721                           ;MISC.c: 135: return 0;
 17722  18CA  3000               	movlw	0
 17723  18CB  0008               	return
 17724  18CC                     __end_of_ISNUMBER:	
 17725                           
 17726                           	psect	text72
 17727  192E                     __ptext72:	
 17728 ;; *************** function _Decode_Scan_Code_Shift *****************
 17729 ;; Defined at:
 17730 ;;		line 774 in file "PS_2.c"
 17731 ;; Parameters:    Size  Location     Type
 17732 ;;  Code            1    wreg     unsigned char 
 17733 ;; Auto vars:     Size  Location     Type
 17734 ;;  Code            1    0[COMMON] unsigned char 
 17735 ;; Return value:  Size  Location     Type
 17736 ;;                  1    wreg      unsigned char 
 17737 ;; Registers used:
 17738 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 17739 ;; Tracked objects:
 17740 ;;		On entry : 0/0
 17741 ;;		On exit  : 0/0
 17742 ;;		Unchanged: 0/0
 17743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17745 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17747 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17748 ;;Total ram usage:        1 bytes
 17749 ;; Hardware stack levels used:    1
 17750 ;; This function calls:
 17751 ;;		Nothing
 17752 ;; This function is called by:
 17753 ;;		_Process_PS2_ScanCode
 17754 ;; This function uses a non-reentrant model
 17755 ;;
 17756                           
 17757                           
 17758                           ;psect for function _Decode_Scan_Code_Shift
 17759  192E                     _Decode_Scan_Code_Shift:	
 17760                           
 17761                           ;incstack = 0
 17762                           ; Regs used in _Decode_Scan_Code_Shift: [wreg-fsr0h+status,2+status,0+pclath]
 17763                           ;Decode_Scan_Code_Shift@Code stored from wreg
 17764  192E  00F0               	movwf	Decode_Scan_Code_Shift@Code
 17765                           
 17766                           ;PS_2.c: 776: Code -= 13;
 17767  192F  300D               	movlw	13
 17768  1930  02F0               	subwf	Decode_Scan_Code_Shift@Code,f
 17769                           
 17770                           ;PS_2.c: 777: if(Code <=112)
 17771  1931  3071               	movlw	113
 17772  1932  0270               	subwf	Decode_Scan_Code_Shift@Code,w
 17773  1933  1803               	skipnc
 17774  1934  293E               	goto	i1l4950
 17775                           
 17776                           ;PS_2.c: 778: {
 17777                           ;PS_2.c: 779: return ScanCodeSHIFT[Code];
 17778  1935  0870               	movf	Decode_Scan_Code_Shift@Code,w
 17779  1936  3EF5               	addlw	low (_ScanCodeSHIFT| (0+32768))
 17780  1937  0084               	movwf	4
 17781  1938  3087               	movlw	high (_ScanCodeSHIFT| (0+32768))
 17782  1939  1803               	skipnc
 17783  193A  3E01               	addlw	1
 17784  193B  0085               	movwf	5
 17785  193C  0800               	movf	0,w	;code access
 17786                           
 17787                           ;PS_2.c: 780: }
 17788  193D  0008               	return
 17789  193E                     i1l4950:	
 17790                           
 17791                           ;PS_2.c: 781: else
 17792                           ;PS_2.c: 782: {
 17793                           ;PS_2.c: 783: return 0;
 17794  193E  3000               	movlw	0
 17795  193F  0008               	return
 17796  1940                     __end_of_Decode_Scan_Code_Shift:	
 17797                           
 17798                           	psect	text73
 17799  191C                     __ptext73:	
 17800 ;; *************** function _Decode_Scan_Code_FunctionE0 *****************
 17801 ;; Defined at:
 17802 ;;		line 793 in file "PS_2.c"
 17803 ;; Parameters:    Size  Location     Type
 17804 ;;  Code            1    wreg     unsigned char 
 17805 ;; Auto vars:     Size  Location     Type
 17806 ;;  Code            1    0[COMMON] unsigned char 
 17807 ;; Return value:  Size  Location     Type
 17808 ;;                  1    wreg      unsigned char 
 17809 ;; Registers used:
 17810 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 17811 ;; Tracked objects:
 17812 ;;		On entry : 0/0
 17813 ;;		On exit  : 0/0
 17814 ;;		Unchanged: 0/0
 17815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17817 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17819 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17820 ;;Total ram usage:        1 bytes
 17821 ;; Hardware stack levels used:    1
 17822 ;; This function calls:
 17823 ;;		Nothing
 17824 ;; This function is called by:
 17825 ;;		_Process_PS2_ScanCode
 17826 ;; This function uses a non-reentrant model
 17827 ;;
 17828                           
 17829                           
 17830                           ;psect for function _Decode_Scan_Code_FunctionE0
 17831  191C                     _Decode_Scan_Code_FunctionE0:	
 17832                           
 17833                           ;incstack = 0
 17834                           ; Regs used in _Decode_Scan_Code_FunctionE0: [wreg-fsr0h+status,2+status,0+pclath]
 17835                           ;Decode_Scan_Code_FunctionE0@Code stored from wreg
 17836  191C  00F0               	movwf	Decode_Scan_Code_FunctionE0@Code
 17837                           
 17838                           ;PS_2.c: 795: Code -= 17;
 17839  191D  3011               	movlw	17
 17840  191E  02F0               	subwf	Decode_Scan_Code_FunctionE0@Code,f
 17841                           
 17842                           ;PS_2.c: 796: if(Code <=108)
 17843  191F  306D               	movlw	109
 17844  1920  0270               	subwf	Decode_Scan_Code_FunctionE0@Code,w
 17845  1921  1803               	skipnc
 17846  1922  292C               	goto	i1l4938
 17847                           
 17848                           ;PS_2.c: 797: {
 17849                           ;PS_2.c: 798: return ScanCodeFunctionE0[Code];
 17850  1923  0870               	movf	Decode_Scan_Code_FunctionE0@Code,w
 17851  1924  3E66               	addlw	low (_ScanCodeFunctionE0| (0+32768))
 17852  1925  0084               	movwf	4
 17853  1926  3088               	movlw	high (_ScanCodeFunctionE0| (0+32768))
 17854  1927  1803               	skipnc
 17855  1928  3E01               	addlw	1
 17856  1929  0085               	movwf	5
 17857  192A  0800               	movf	0,w	;code access
 17858                           
 17859                           ;PS_2.c: 799: }
 17860  192B  0008               	return
 17861  192C                     i1l4938:	
 17862                           
 17863                           ;PS_2.c: 800: else
 17864                           ;PS_2.c: 801: {
 17865                           ;PS_2.c: 802: return 0;
 17866  192C  3000               	movlw	0
 17867  192D  0008               	return
 17868  192E                     __end_of_Decode_Scan_Code_FunctionE0:	
 17869                           
 17870                           	psect	text74
 17871  18E9                     __ptext74:	
 17872 ;; *************** function _Decode_Scan_Code_Function *****************
 17873 ;; Defined at:
 17874 ;;		line 812 in file "PS_2.c"
 17875 ;; Parameters:    Size  Location     Type
 17876 ;;  Code            1    wreg     unsigned char 
 17877 ;; Auto vars:     Size  Location     Type
 17878 ;;  Code            1    0[COMMON] unsigned char 
 17879 ;; Return value:  Size  Location     Type
 17880 ;;                  1    wreg      unsigned char 
 17881 ;; Registers used:
 17882 ;;		wreg, fsr0l, fsr0h, pclath
 17883 ;; Tracked objects:
 17884 ;;		On entry : 0/0
 17885 ;;		On exit  : 0/0
 17886 ;;		Unchanged: 0/0
 17887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17889 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17891 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17892 ;;Total ram usage:        1 bytes
 17893 ;; Hardware stack levels used:    1
 17894 ;; This function calls:
 17895 ;;		Nothing
 17896 ;; This function is called by:
 17897 ;;		_Process_PS2_ScanCode
 17898 ;; This function uses a non-reentrant model
 17899 ;;
 17900                           
 17901                           
 17902                           ;psect for function _Decode_Scan_Code_Function
 17903  18E9                     _Decode_Scan_Code_Function:	
 17904                           
 17905                           ;incstack = 0
 17906                           ; Regs used in _Decode_Scan_Code_Function: [wreg-fsr0h+pclath]
 17907                           ;Decode_Scan_Code_Function@Code stored from wreg
 17908  18E9  00F0               	movwf	Decode_Scan_Code_Function@Code
 17909                           
 17910                           ;PS_2.c: 814: if(Code <=131)
 17911  18EA  3084               	movlw	132
 17912  18EB  0270               	subwf	Decode_Scan_Code_Function@Code,w
 17913  18EC  1803               	skipnc
 17914  18ED  28F7               	goto	i1l4974
 17915                           
 17916                           ;PS_2.c: 815: {
 17917                           ;PS_2.c: 816: return ScanCodeFunctionNoE0[Code];
 17918  18EE  0870               	movf	Decode_Scan_Code_Function@Code,w
 17919  18EF  3E00               	addlw	low (_ScanCodeFunctionNoE0| (0+32768))
 17920  18F0  0084               	movwf	4
 17921  18F1  3087               	movlw	high (_ScanCodeFunctionNoE0| (0+32768))
 17922  18F2  1803               	skipnc
 17923  18F3  3E01               	addlw	1
 17924  18F4  0085               	movwf	5
 17925  18F5  0800               	movf	0,w	;code access
 17926                           
 17927                           ;PS_2.c: 817: }
 17928  18F6  0008               	return
 17929  18F7                     i1l4974:	
 17930                           
 17931                           ;PS_2.c: 818: else
 17932                           ;PS_2.c: 819: {
 17933                           ;PS_2.c: 820: return 0;
 17934  18F7  3000               	movlw	0
 17935  18F8  0008               	return
 17936  18F9                     __end_of_Decode_Scan_Code_Function:	
 17937                           
 17938                           	psect	text75
 17939  190A                     __ptext75:	
 17940 ;; *************** function _Decode_Scan_Code *****************
 17941 ;; Defined at:
 17942 ;;		line 755 in file "PS_2.c"
 17943 ;; Parameters:    Size  Location     Type
 17944 ;;  Code            1    wreg     unsigned char 
 17945 ;; Auto vars:     Size  Location     Type
 17946 ;;  Code            1    0[COMMON] unsigned char 
 17947 ;; Return value:  Size  Location     Type
 17948 ;;                  1    wreg      unsigned char 
 17949 ;; Registers used:
 17950 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 17951 ;; Tracked objects:
 17952 ;;		On entry : 0/0
 17953 ;;		On exit  : 0/0
 17954 ;;		Unchanged: 0/0
 17955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17957 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17959 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17960 ;;Total ram usage:        1 bytes
 17961 ;; Hardware stack levels used:    1
 17962 ;; This function calls:
 17963 ;;		Nothing
 17964 ;; This function is called by:
 17965 ;;		_Process_PS2_ScanCode
 17966 ;; This function uses a non-reentrant model
 17967 ;;
 17968                           
 17969                           
 17970                           ;psect for function _Decode_Scan_Code
 17971  190A                     _Decode_Scan_Code:	
 17972                           
 17973                           ;incstack = 0
 17974                           ; Regs used in _Decode_Scan_Code: [wreg-fsr0h+status,2+status,0+pclath]
 17975                           ;Decode_Scan_Code@Code stored from wreg
 17976  190A  00F0               	movwf	Decode_Scan_Code@Code
 17977                           
 17978                           ;PS_2.c: 757: Code -= 13;
 17979  190B  300D               	movlw	13
 17980  190C  02F0               	subwf	Decode_Scan_Code@Code,f
 17981                           
 17982                           ;PS_2.c: 758: if(Code <=112)
 17983  190D  3071               	movlw	113
 17984  190E  0270               	subwf	Decode_Scan_Code@Code,w
 17985  190F  1803               	skipnc
 17986  1910  291A               	goto	i1l4962
 17987                           
 17988                           ;PS_2.c: 759: {
 17989                           ;PS_2.c: 760: return ScanCode[Code];
 17990  1911  0870               	movf	Decode_Scan_Code@Code,w
 17991  1912  3E84               	addlw	low (_ScanCode| (0+32768))
 17992  1913  0084               	movwf	4
 17993  1914  3087               	movlw	high (_ScanCode| (0+32768))
 17994  1915  1803               	skipnc
 17995  1916  3E01               	addlw	1
 17996  1917  0085               	movwf	5
 17997  1918  0800               	movf	0,w	;code access
 17998                           
 17999                           ;PS_2.c: 761: }
 18000  1919  0008               	return
 18001  191A                     i1l4962:	
 18002                           
 18003                           ;PS_2.c: 762: else
 18004                           ;PS_2.c: 763: {
 18005                           ;PS_2.c: 764: return 0;
 18006  191A  3000               	movlw	0
 18007  191B  0008               	return
 18008  191C                     __end_of_Decode_Scan_Code:	
 18009                           
 18010                           	psect	text76
 18011  1C4C                     __ptext76:	
 18012 ;; *************** function _BufferShiftBack *****************
 18013 ;; Defined at:
 18014 ;;		line 175 in file "MISC.c"
 18015 ;; Parameters:    Size  Location     Type
 18016 ;;  buffer          1    wreg     PTR unsigned char 
 18017 ;;		 -> PS_2_ScanCodes(12), 
 18018 ;;  shift           1    0[COMMON] unsigned char 
 18019 ;;  size            1    1[COMMON] unsigned char 
 18020 ;; Auto vars:     Size  Location     Type
 18021 ;;  buffer          1    7[COMMON] PTR unsigned char 
 18022 ;;		 -> PS_2_ScanCodes(12), 
 18023 ;;  i               1    6[COMMON] unsigned char 
 18024 ;; Return value:  Size  Location     Type
 18025 ;;                  1    wreg      unsigned char 
 18026 ;; Registers used:
 18027 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18028 ;; Tracked objects:
 18029 ;;		On entry : 0/0
 18030 ;;		On exit  : 0/0
 18031 ;;		Unchanged: 0/0
 18032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18033 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18034 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18035 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18036 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18037 ;;Total ram usage:        8 bytes
 18038 ;; Hardware stack levels used:    1
 18039 ;; This function calls:
 18040 ;;		Nothing
 18041 ;; This function is called by:
 18042 ;;		_Process_PS2_ScanCode
 18043 ;; This function uses a non-reentrant model
 18044 ;;
 18045                           
 18046                           
 18047                           ;psect for function _BufferShiftBack
 18048  1C4C                     _BufferShiftBack:	
 18049                           
 18050                           ;incstack = 0
 18051                           ; Regs used in _BufferShiftBack: [wreg+fsr1l+fsr1h+status,2+status,0]
 18052                           ;BufferShiftBack@buffer stored from wreg
 18053  1C4C  00F7               	movwf	BufferShiftBack@buffer
 18054                           
 18055                           ;MISC.c: 177: unsigned char i=0;
 18056  1C4D  01F6               	clrf	BufferShiftBack@i
 18057                           
 18058                           ;MISC.c: 178: if(shift > size)
 18059  1C4E  0870               	movf	BufferShiftBack@shift,w
 18060  1C4F  0271               	subwf	BufferShiftBack@size,w
 18061  1C50  1C03               	btfss	3,0
 18062  1C51  0008               	return
 18063                           
 18064                           ;MISC.c: 181: }
 18065                           ;MISC.c: 182: for(i = 0; i < size; i++)
 18066                           
 18067                           ;MISC.c: 179: {
 18068                           ;MISC.c: 180: return 0;
 18069                           ;	Return value of _BufferShiftBack is never used
 18070  1C52  01F6               	clrf	BufferShiftBack@i
 18071  1C53                     i1l4814:	
 18072  1C53  0871               	movf	BufferShiftBack@size,w
 18073  1C54  0276               	subwf	BufferShiftBack@i,w
 18074  1C55  1803               	btfsc	3,0
 18075  1C56  0008               	return
 18076                           
 18077                           ;MISC.c: 183: {
 18078                           ;MISC.c: 184: if(i < (size - shift))
 18079  1C57  0870               	movf	BufferShiftBack@shift,w
 18080  1C58  00F2               	movwf	??_BufferShiftBack
 18081  1C59  01F3               	clrf	??_BufferShiftBack+1
 18082  1C5A  09F2               	comf	??_BufferShiftBack,f
 18083  1C5B  09F3               	comf	??_BufferShiftBack+1,f
 18084  1C5C  0AF2               	incf	??_BufferShiftBack,f
 18085  1C5D  1903               	skipnz
 18086  1C5E  0AF3               	incf	??_BufferShiftBack+1,f
 18087  1C5F  0871               	movf	BufferShiftBack@size,w
 18088  1C60  0772               	addwf	??_BufferShiftBack,w
 18089  1C61  00F4               	movwf	??_BufferShiftBack+2
 18090  1C62  0873               	movf	??_BufferShiftBack+1,w
 18091  1C63  1803               	skipnc
 18092  1C64  0A73               	incf	??_BufferShiftBack+1,w
 18093  1C65  00F5               	movwf	??_BufferShiftBack+3
 18094  1C66  0875               	movf	??_BufferShiftBack+3,w
 18095  1C67  3A80               	xorlw	128
 18096  1C68  3C80               	sublw	128
 18097  1C69  1D03               	skipz
 18098  1C6A  2C6D               	goto	u544_25
 18099  1C6B  0874               	movf	??_BufferShiftBack+2,w
 18100  1C6C  0276               	subwf	BufferShiftBack@i,w
 18101  1C6D                     u544_25:	
 18102  1C6D  1803               	skipnc
 18103  1C6E  2C81               	goto	i1l4810
 18104                           
 18105                           ;MISC.c: 185: {
 18106                           ;MISC.c: 186: buffer[i] = buffer[i+shift];
 18107  1C6F  0876               	movf	BufferShiftBack@i,w
 18108  1C70  0770               	addwf	BufferShiftBack@shift,w
 18109  1C71  0777               	addwf	BufferShiftBack@buffer,w
 18110  1C72  00F2               	movwf	??_BufferShiftBack
 18111  1C73  0872               	movf	??_BufferShiftBack,w
 18112  1C74  0086               	movwf	6
 18113  1C75  0187               	clrf	7
 18114  1C76  0801               	movf	1,w
 18115  1C77  00F3               	movwf	??_BufferShiftBack+1
 18116  1C78  0876               	movf	BufferShiftBack@i,w
 18117  1C79  0777               	addwf	BufferShiftBack@buffer,w
 18118  1C7A  00F4               	movwf	??_BufferShiftBack+2
 18119  1C7B  0874               	movf	??_BufferShiftBack+2,w
 18120  1C7C  0086               	movwf	6
 18121  1C7D  0187               	clrf	7
 18122  1C7E  0873               	movf	??_BufferShiftBack+1,w
 18123  1C7F  0081               	movwf	1
 18124                           
 18125                           ;MISC.c: 187: }
 18126  1C80  2C88               	goto	i1l4812
 18127  1C81                     i1l4810:	
 18128                           
 18129                           ;MISC.c: 188: else
 18130                           ;MISC.c: 189: {
 18131                           ;MISC.c: 190: buffer[i] = 0;
 18132  1C81  0876               	movf	BufferShiftBack@i,w
 18133  1C82  0777               	addwf	BufferShiftBack@buffer,w
 18134  1C83  00F2               	movwf	??_BufferShiftBack
 18135  1C84  0872               	movf	??_BufferShiftBack,w
 18136  1C85  0086               	movwf	6
 18137  1C86  0187               	clrf	7
 18138  1C87  0181               	clrf	1
 18139  1C88                     i1l4812:	
 18140  1C88  3001               	movlw	1
 18141  1C89  00F2               	movwf	??_BufferShiftBack
 18142  1C8A  0872               	movf	??_BufferShiftBack,w
 18143  1C8B  07F6               	addwf	BufferShiftBack@i,f
 18144  1C8C  2C53               	goto	i1l4814
 18145  1C8D                     __end_of_BufferShiftBack:	
 18146                           ;MISC.c: 191: }
 18147                           ;MISC.c: 192: }
 18148                           ;MISC.c: 193: return 1;
 18149                           ;	Return value of _BufferShiftBack is never used
 18150                           
 18151                           
 18152                           	psect	text77
 18153  1D55                     __ptext77:	
 18154 ;; *************** function _PS2RawToScan *****************
 18155 ;; Defined at:
 18156 ;;		line 1088 in file "PS_2.c"
 18157 ;; Parameters:    Size  Location     Type
 18158 ;;  Raw             2    8[COMMON] unsigned int 
 18159 ;; Auto vars:     Size  Location     Type
 18160 ;;  temp            2   10[COMMON] unsigned int 
 18161 ;; Return value:  Size  Location     Type
 18162 ;;                  2    8[COMMON] unsigned int 
 18163 ;; Registers used:
 18164 ;;		wreg, status,2, status,0, pclath, cstack
 18165 ;; Tracked objects:
 18166 ;;		On entry : 0/0
 18167 ;;		On exit  : 0/0
 18168 ;;		Unchanged: 0/0
 18169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18170 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18171 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18172 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18173 ;;      Totals:         4       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18174 ;;Total ram usage:       13 bytes
 18175 ;; Hardware stack levels used:    1
 18176 ;; Hardware stack levels required when called:    1
 18177 ;; This function calls:
 18178 ;;		_Reverse_Byte
 18179 ;;		i1_CheckSum_byte
 18180 ;; This function is called by:
 18181 ;;		_isr
 18182 ;; This function uses a non-reentrant model
 18183 ;;
 18184                           
 18185                           
 18186                           ;psect for function _PS2RawToScan
 18187  1D55                     _PS2RawToScan:	
 18188                           
 18189                           ;PS_2.c: 1090: unsigned int temp;
 18190                           ;PS_2.c: 1092: if(CheckSum_byte((Raw >> 2) & 0xFF , 3) == ((Raw & 0x02)>> 1))
 18191                           
 18192                           ;incstack = 0
 18193                           ; Regs used in _PS2RawToScan: [wreg+status,2+status,0+pclath+cstack]
 18194  1D55  0879               	movf	PS2RawToScan@Raw+1,w
 18195  1D56  0020               	movlb	0	; select bank0
 18196  1D57  00A1               	movwf	??_PS2RawToScan+1
 18197  1D58  0878               	movf	PS2RawToScan@Raw,w
 18198  1D59  00A0               	movwf	??_PS2RawToScan
 18199  1D5A  36A1               	lsrf	??_PS2RawToScan+1,f
 18200  1D5B  0CA0               	rrf	??_PS2RawToScan,f
 18201  1D5C  3001               	movlw	1
 18202  1D5D  0520               	andwf	??_PS2RawToScan,w
 18203  1D5E  00A2               	movwf	??_PS2RawToScan+2
 18204  1D5F  3000               	movlw	0
 18205  1D60  0521               	andwf	??_PS2RawToScan+1,w
 18206  1D61  00A3               	movwf	??_PS2RawToScan+3
 18207  1D62  0879               	movf	PS2RawToScan@Raw+1,w
 18208  1D63  00A5               	movwf	??_PS2RawToScan+5
 18209  1D64  0878               	movf	PS2RawToScan@Raw,w
 18210  1D65  00A4               	movwf	??_PS2RawToScan+4
 18211  1D66  36A5               	lsrf	??_PS2RawToScan+5,f
 18212  1D67  0CA4               	rrf	??_PS2RawToScan+4,f
 18213  1D68  36A5               	lsrf	??_PS2RawToScan+5,f
 18214  1D69  0CA4               	rrf	??_PS2RawToScan+4,f
 18215  1D6A  30FF               	movlw	255
 18216  1D6B  0524               	andwf	??_PS2RawToScan+4,w
 18217  1D6C  00F0               	movwf	i1CheckSum_byte@This
 18218  1D6D  3000               	movlw	0
 18219  1D6E  0525               	andwf	??_PS2RawToScan+5,w
 18220  1D6F  00F1               	movwf	i1CheckSum_byte@This+1
 18221  1D70  3003               	movlw	3
 18222  1D71  00A6               	movwf	??_PS2RawToScan+6
 18223  1D72  0826               	movf	??_PS2RawToScan+6,w
 18224  1D73  00F2               	movwf	i1CheckSum_byte@Odd_Even
 18225  1D74  319A  22B0  319D   	fcall	i1_CheckSum_byte
 18226  1D77  0020               	movlb	0	; select bank0
 18227  1D78  00A7               	movwf	??_PS2RawToScan+7
 18228  1D79  01A8               	clrf	??_PS2RawToScan+8
 18229  1D7A  0823               	movf	??_PS2RawToScan+3,w
 18230  1D7B  0628               	xorwf	??_PS2RawToScan+8,w
 18231  1D7C  1D03               	skipz
 18232  1D7D  2D80               	goto	u615_25
 18233  1D7E  0822               	movf	??_PS2RawToScan+2,w
 18234  1D7F  0627               	xorwf	??_PS2RawToScan+7,w
 18235  1D80                     u615_25:	
 18236  1D80  1D03               	skipz
 18237  1D81  2D9C               	goto	i1l5274
 18238                           
 18239                           ;PS_2.c: 1093: {
 18240                           ;PS_2.c: 1095: temp = ((Raw >> 2) & 0xFF);
 18241  1D82  0879               	movf	PS2RawToScan@Raw+1,w
 18242  1D83  00A1               	movwf	??_PS2RawToScan+1
 18243  1D84  0878               	movf	PS2RawToScan@Raw,w
 18244  1D85  00A0               	movwf	??_PS2RawToScan
 18245  1D86  36A1               	lsrf	??_PS2RawToScan+1,f
 18246  1D87  0CA0               	rrf	??_PS2RawToScan,f
 18247  1D88  36A1               	lsrf	??_PS2RawToScan+1,f
 18248  1D89  0CA0               	rrf	??_PS2RawToScan,f
 18249  1D8A  30FF               	movlw	255
 18250  1D8B  0520               	andwf	??_PS2RawToScan,w
 18251  1D8C  00FA               	movwf	PS2RawToScan@temp
 18252  1D8D  3000               	movlw	0
 18253  1D8E  0521               	andwf	??_PS2RawToScan+1,w
 18254  1D8F  00FB               	movwf	PS2RawToScan@temp+1
 18255                           
 18256                           ;PS_2.c: 1096: temp = (unsigned int) Reverse_Byte((unsigned char) temp);
 18257  1D90  087A               	movf	PS2RawToScan@temp,w
 18258  1D91  319E  26EC  319D   	fcall	_Reverse_Byte
 18259  1D94  0020               	movlb	0	; select bank0
 18260  1D95  00A0               	movwf	??_PS2RawToScan
 18261  1D96  01A1               	clrf	??_PS2RawToScan+1
 18262  1D97  0820               	movf	??_PS2RawToScan,w
 18263  1D98  00FA               	movwf	PS2RawToScan@temp
 18264  1D99  0821               	movf	??_PS2RawToScan+1,w
 18265  1D9A  00FB               	movwf	PS2RawToScan@temp+1
 18266                           
 18267                           ;PS_2.c: 1098: }
 18268  1D9B  2D9E               	goto	i1l5276
 18269  1D9C                     i1l5274:	
 18270                           
 18271                           ;PS_2.c: 1099: else
 18272                           ;PS_2.c: 1100: {
 18273                           ;PS_2.c: 1102: temp = 0;
 18274  1D9C  01FA               	clrf	PS2RawToScan@temp
 18275  1D9D  01FB               	clrf	PS2RawToScan@temp+1
 18276  1D9E                     i1l5276:	
 18277                           
 18278                           ;PS_2.c: 1103: }
 18279                           ;PS_2.c: 1104: return temp;
 18280  1D9E  087B               	movf	PS2RawToScan@temp+1,w
 18281  1D9F  01F9               	clrf	?_PS2RawToScan+1
 18282  1DA0  07F9               	addwf	?_PS2RawToScan+1,f
 18283  1DA1  087A               	movf	PS2RawToScan@temp,w
 18284  1DA2  01F8               	clrf	?_PS2RawToScan
 18285  1DA3  07F8               	addwf	?_PS2RawToScan,f
 18286  1DA4  0008               	return
 18287  1DA5                     __end_of_PS2RawToScan:	
 18288                           
 18289                           	psect	text78
 18290  1AB0                     __ptext78:	
 18291 ;; *************** function i1_CheckSum_byte *****************
 18292 ;; Defined at:
 18293 ;;		line 69 in file "MISC.c"
 18294 ;; Parameters:    Size  Location     Type
 18295 ;;  This            2    0[COMMON] unsigned int 
 18296 ;;  Odd_Even        1    2[COMMON] unsigned char 
 18297 ;; Auto vars:     Size  Location     Type
 18298 ;;  CheckSum_byt    2    4[COMMON] unsigned int 
 18299 ;;  CheckSum_byt    1    7[COMMON] unsigned char 
 18300 ;;  CheckSum_byt    1    6[COMMON] unsigned char 
 18301 ;; Return value:  Size  Location     Type
 18302 ;;                  1    wreg      unsigned char 
 18303 ;; Registers used:
 18304 ;;		wreg, status,2, status,0
 18305 ;; Tracked objects:
 18306 ;;		On entry : 0/0
 18307 ;;		On exit  : 0/0
 18308 ;;		Unchanged: 0/0
 18309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18310 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18311 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18312 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18313 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18314 ;;Total ram usage:        8 bytes
 18315 ;; Hardware stack levels used:    1
 18316 ;; This function calls:
 18317 ;;		Nothing
 18318 ;; This function is called by:
 18319 ;;		_PS2RawToScan
 18320 ;;		i1_UARTchar
 18321 ;;		i1_Send_PS2
 18322 ;; This function uses a non-reentrant model
 18323 ;;
 18324                           
 18325                           
 18326                           ;psect for function i1_CheckSum_byte
 18327  1AB0                     i1_CheckSum_byte:	
 18328                           
 18329                           ;MISC.c: 71: char i = 0;
 18330                           
 18331                           ;incstack = 0
 18332                           ; Regs used in i1_CheckSum_byte: [wreg+status,2+status,0]
 18333  1AB0  01F7               	clrf	i1CheckSum_byte@i
 18334                           
 18335                           ;MISC.c: 72: unsigned char Parity = 0;
 18336  1AB1  01F6               	clrf	i1CheckSum_byte@Parity
 18337                           
 18338                           ;MISC.c: 73: unsigned int ThisTemp = This;
 18339  1AB2  0871               	movf	i1CheckSum_byte@This+1,w
 18340  1AB3  01F5               	clrf	i1CheckSum_byte@ThisTemp+1
 18341  1AB4  07F5               	addwf	i1CheckSum_byte@ThisTemp+1,f
 18342  1AB5  0870               	movf	i1CheckSum_byte@This,w
 18343  1AB6  01F4               	clrf	i1CheckSum_byte@ThisTemp
 18344  1AB7  07F4               	addwf	i1CheckSum_byte@ThisTemp,f
 18345                           
 18346                           ;MISC.c: 75: for (i =0; i<8; i++)
 18347  1AB8  01F7               	clrf	i1CheckSum_byte@i
 18348  1AB9  3008               	movlw	8
 18349  1ABA  0277               	subwf	i1CheckSum_byte@i,w
 18350  1ABB  1803               	btfsc	3,0
 18351  1ABC  2AD0               	goto	i1l3852
 18352  1ABD                     i1l290:	
 18353                           
 18354                           ;MISC.c: 76: {
 18355                           ;MISC.c: 77: if((ThisTemp & 0x01) == 1)
 18356  1ABD  1C74               	btfss	i1CheckSum_byte@ThisTemp,0
 18357  1ABE  2AC3               	goto	i1l292
 18358                           
 18359                           ;MISC.c: 78: {
 18360                           ;MISC.c: 79: Parity++;
 18361  1ABF  3001               	movlw	1
 18362  1AC0  00F3               	movwf	??i1_CheckSum_byte
 18363  1AC1  0873               	movf	??i1_CheckSum_byte,w
 18364  1AC2  07F6               	addwf	i1CheckSum_byte@Parity,f
 18365  1AC3                     i1l292:	
 18366                           
 18367                           ;MISC.c: 80: }
 18368                           ;MISC.c: 81: ThisTemp >>= 1;
 18369  1AC3  3001               	movlw	1
 18370  1AC4                     u394_25:	
 18371  1AC4  36F5               	lsrf	i1CheckSum_byte@ThisTemp+1,f
 18372  1AC5  0CF4               	rrf	i1CheckSum_byte@ThisTemp,f
 18373  1AC6  0B89               	decfsz	9,f
 18374  1AC7  2AC4               	goto	u394_25
 18375  1AC8  3001               	movlw	1
 18376  1AC9  00F3               	movwf	??i1_CheckSum_byte
 18377  1ACA  0873               	movf	??i1_CheckSum_byte,w
 18378  1ACB  07F7               	addwf	i1CheckSum_byte@i,f
 18379  1ACC  3008               	movlw	8
 18380  1ACD  0277               	subwf	i1CheckSum_byte@i,w
 18381  1ACE  1C03               	skipc
 18382  1ACF  2ABD               	goto	i1l290
 18383  1AD0                     i1l3852:	
 18384                           
 18385                           ;MISC.c: 82: }
 18386                           ;MISC.c: 83: if(Odd_Even == 3)
 18387  1AD0  0872               	movf	i1CheckSum_byte@Odd_Even,w
 18388  1AD1  3A03               	xorlw	3
 18389  1AD2  1D03               	skipz
 18390  1AD3  2ADA               	goto	i1l293
 18391                           
 18392                           ;MISC.c: 84: {
 18393                           ;MISC.c: 85: if(Parity % 2 == 0)
 18394  1AD4  1876               	btfsc	i1CheckSum_byte@Parity,0
 18395  1AD5  2AD8               	goto	i1l3860
 18396                           
 18397                           ;MISC.c: 86: {
 18398                           ;MISC.c: 87: return 1;
 18399  1AD6  3001               	movlw	1
 18400  1AD7  0008               	return
 18401  1AD8                     i1l3860:	
 18402                           
 18403                           ;MISC.c: 88: }
 18404                           ;MISC.c: 89: return 0;
 18405  1AD8  3000               	movlw	0
 18406                           
 18407                           ;MISC.c: 90: }
 18408  1AD9  0008               	return
 18409  1ADA                     i1l293:	
 18410                           
 18411                           ;MISC.c: 91: else
 18412                           ;MISC.c: 92: {
 18413                           ;MISC.c: 93: if(Parity % 2 == 1)
 18414  1ADA  1C76               	btfss	i1CheckSum_byte@Parity,0
 18415  1ADB  2ADE               	goto	i1l3870
 18416                           
 18417                           ;MISC.c: 94: {
 18418                           ;MISC.c: 95: return 1;
 18419  1ADC  3001               	movlw	1
 18420  1ADD  0008               	return
 18421  1ADE                     i1l3870:	
 18422                           
 18423                           ;MISC.c: 96: }
 18424                           ;MISC.c: 97: return 0;
 18425  1ADE  3000               	movlw	0
 18426  1ADF  0008               	return
 18427  1AE0                     __end_ofi1_CheckSum_byte:	
 18428                           
 18429                           	psect	text79
 18430  1EEC                     __ptext79:	
 18431 ;; *************** function _Reverse_Byte *****************
 18432 ;; Defined at:
 18433 ;;		line 106 in file "MISC.c"
 18434 ;; Parameters:    Size  Location     Type
 18435 ;;  This            1    wreg     unsigned char 
 18436 ;; Auto vars:     Size  Location     Type
 18437 ;;  This            1    3[COMMON] unsigned char 
 18438 ;;  temp            1    2[COMMON] unsigned char 
 18439 ;; Return value:  Size  Location     Type
 18440 ;;                  1    wreg      unsigned char 
 18441 ;; Registers used:
 18442 ;;		wreg, status,2, status,0
 18443 ;; Tracked objects:
 18444 ;;		On entry : 0/0
 18445 ;;		On exit  : 0/0
 18446 ;;		Unchanged: 0/0
 18447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18449 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18450 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18451 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18452 ;;Total ram usage:        4 bytes
 18453 ;; Hardware stack levels used:    1
 18454 ;; This function calls:
 18455 ;;		Nothing
 18456 ;; This function is called by:
 18457 ;;		_PS2RawToScan
 18458 ;; This function uses a non-reentrant model
 18459 ;;
 18460                           
 18461                           
 18462                           ;psect for function _Reverse_Byte
 18463  1EEC                     _Reverse_Byte:	
 18464                           
 18465                           ;incstack = 0
 18466                           ; Regs used in _Reverse_Byte: [wreg+status,2+status,0]
 18467                           ;Reverse_Byte@This stored from wreg
 18468  1EEC  00F3               	movwf	Reverse_Byte@This
 18469                           
 18470                           ;MISC.c: 108: unsigned char temp=0;
 18471  1EED  01F2               	clrf	Reverse_Byte@temp
 18472                           
 18473                           ;MISC.c: 110: temp += (This & 0x01) << 7;
 18474  1EEE  0873               	movf	Reverse_Byte@This,w
 18475  1EEF  3901               	andlw	1
 18476  1EF0  00F0               	movwf	??_Reverse_Byte
 18477  1EF1  3006               	movlw	6
 18478  1EF2                     u534_25:	
 18479  1EF2  35F0               	lslf	??_Reverse_Byte,f
 18480  1EF3  3EFF               	addlw	-1
 18481  1EF4  1D03               	skipz
 18482  1EF5  2EF2               	goto	u534_25
 18483  1EF6  3570               	lslf	??_Reverse_Byte,w
 18484  1EF7  00F1               	movwf	??_Reverse_Byte+1
 18485  1EF8  0871               	movf	??_Reverse_Byte+1,w
 18486  1EF9  07F2               	addwf	Reverse_Byte@temp,f
 18487                           
 18488                           ;MISC.c: 111: temp += (This & 0x02) << 5;
 18489  1EFA  0873               	movf	Reverse_Byte@This,w
 18490  1EFB  3902               	andlw	2
 18491  1EFC  00F0               	movwf	??_Reverse_Byte
 18492  1EFD  3004               	movlw	4
 18493  1EFE                     u535_25:	
 18494  1EFE  35F0               	lslf	??_Reverse_Byte,f
 18495  1EFF  3EFF               	addlw	-1
 18496  1F00  1D03               	skipz
 18497  1F01  2EFE               	goto	u535_25
 18498  1F02  3570               	lslf	??_Reverse_Byte,w
 18499  1F03  00F1               	movwf	??_Reverse_Byte+1
 18500  1F04  0871               	movf	??_Reverse_Byte+1,w
 18501  1F05  07F2               	addwf	Reverse_Byte@temp,f
 18502                           
 18503                           ;MISC.c: 112: temp += (This & 0x04) << 3;
 18504  1F06  0873               	movf	Reverse_Byte@This,w
 18505  1F07  3904               	andlw	4
 18506  1F08  00F0               	movwf	??_Reverse_Byte
 18507  1F09  3002               	movlw	2
 18508  1F0A                     u536_25:	
 18509  1F0A  35F0               	lslf	??_Reverse_Byte,f
 18510  1F0B  3EFF               	addlw	-1
 18511  1F0C  1D03               	skipz
 18512  1F0D  2F0A               	goto	u536_25
 18513  1F0E  3570               	lslf	??_Reverse_Byte,w
 18514  1F0F  00F1               	movwf	??_Reverse_Byte+1
 18515  1F10  0871               	movf	??_Reverse_Byte+1,w
 18516  1F11  07F2               	addwf	Reverse_Byte@temp,f
 18517                           
 18518                           ;MISC.c: 113: temp += (This & 0x08) << 1;
 18519  1F12  0873               	movf	Reverse_Byte@This,w
 18520  1F13  3908               	andlw	8
 18521  1F14  0709               	addwf	9,w
 18522  1F15  00F0               	movwf	??_Reverse_Byte
 18523  1F16  0870               	movf	??_Reverse_Byte,w
 18524  1F17  07F2               	addwf	Reverse_Byte@temp,f
 18525                           
 18526                           ;MISC.c: 114: temp += (This & 0x10) >> 1;
 18527  1F18  3673               	lsrf	Reverse_Byte@This,w
 18528  1F19  3908               	andlw	8
 18529  1F1A  00F0               	movwf	??_Reverse_Byte
 18530  1F1B  0870               	movf	??_Reverse_Byte,w
 18531  1F1C  07F2               	addwf	Reverse_Byte@temp,f
 18532                           
 18533                           ;MISC.c: 115: temp += (This & 0x20) >> 3;
 18534  1F1D  0873               	movf	Reverse_Byte@This,w
 18535  1F1E  00F0               	movwf	??_Reverse_Byte
 18536  1F1F  3003               	movlw	3
 18537  1F20                     u537_25:	
 18538  1F20  36F0               	lsrf	??_Reverse_Byte,f
 18539  1F21  0B89               	decfsz	9,f
 18540  1F22  2F20               	goto	u537_25
 18541  1F23  0870               	movf	??_Reverse_Byte,w
 18542  1F24  3904               	andlw	4
 18543  1F25  00F1               	movwf	??_Reverse_Byte+1
 18544  1F26  0871               	movf	??_Reverse_Byte+1,w
 18545  1F27  07F2               	addwf	Reverse_Byte@temp,f
 18546                           
 18547                           ;MISC.c: 116: temp += (This & 0x40) >> 5;
 18548  1F28  0873               	movf	Reverse_Byte@This,w
 18549  1F29  00F0               	movwf	??_Reverse_Byte
 18550  1F2A  3005               	movlw	5
 18551  1F2B                     u538_25:	
 18552  1F2B  36F0               	lsrf	??_Reverse_Byte,f
 18553  1F2C  0B89               	decfsz	9,f
 18554  1F2D  2F2B               	goto	u538_25
 18555  1F2E  0870               	movf	??_Reverse_Byte,w
 18556  1F2F  3902               	andlw	2
 18557  1F30  00F1               	movwf	??_Reverse_Byte+1
 18558  1F31  0871               	movf	??_Reverse_Byte+1,w
 18559  1F32  07F2               	addwf	Reverse_Byte@temp,f
 18560                           
 18561                           ;MISC.c: 117: temp += (This & 0x80) >> 7;
 18562  1F33  0873               	movf	Reverse_Byte@This,w
 18563  1F34  00F0               	movwf	??_Reverse_Byte
 18564  1F35  3007               	movlw	7
 18565  1F36                     u539_25:	
 18566  1F36  36F0               	lsrf	??_Reverse_Byte,f
 18567  1F37  0B89               	decfsz	9,f
 18568  1F38  2F36               	goto	u539_25
 18569  1F39  0870               	movf	??_Reverse_Byte,w
 18570  1F3A  3901               	andlw	1
 18571  1F3B  00F1               	movwf	??_Reverse_Byte+1
 18572  1F3C  0871               	movf	??_Reverse_Byte+1,w
 18573  1F3D  07F2               	addwf	Reverse_Byte@temp,f
 18574                           
 18575                           ;MISC.c: 119: return temp;
 18576  1F3E  0872               	movf	Reverse_Byte@temp,w
 18577  1F3F  0008               	return
 18578  1F40                     __end_of_Reverse_Byte:	
 18579  007E                     btemp	set	126	;btemp
 18580  007E                     pic14e$flags	set	126
 18581  007E                     wtemp	set	126
 18582  007E                     wtemp0	set	126
 18583  0080                     wtemp1	set	128
 18584  0082                     wtemp2	set	130
 18585  0084                     wtemp3	set	132
 18586  0086                     wtemp4	set	134
 18587  0088                     wtemp5	set	136
 18588  007F                     wtemp6	set	127
 18589  007E                     ttemp	set	126
 18590  007E                     ttemp0	set	126
 18591  0081                     ttemp1	set	129
 18592  0084                     ttemp2	set	132
 18593  0087                     ttemp3	set	135
 18594  007F                     ttemp4	set	127
 18595  007E                     ltemp	set	126
 18596  007E                     ltemp0	set	126
 18597  0082                     ltemp1	set	130
 18598  0086                     ltemp2	set	134
 18599  0080                     ltemp3	set	128


Data Sizes:
    Strings     210
    Constant    622
    Data        8
    BSS         54
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     37      70
    BANK2            80     63      63
    BANK3            80     65      80
    BANK4            80     55      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_18(CODE[24]), STR_11(CODE[12]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 60
		 -> Process_PS2_ScanCode@buf(BANK3[60]), SetBaud@buf(BANK2[50]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1091$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    WriteFlash_Sequential@buffer	PTR unsigned int  size(1) Largest target is 4
		 -> MEM(BANK1[4]), 

    UARTstringWAIT@data	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_20(CODE[20]), STR_19(CODE[3]), Process_PS2_ScanCode@buf(BANK3[60]), STR_17(CODE[3]), 
		 -> STR_16(CODE[3]), STR_15(CODE[19]), STR_14(CODE[19]), STR_13(CODE[3]), 
		 -> STR_12(CODE[3]), SetBaud@buf(BANK2[50]), STR_10(CODE[21]), STR_9(CODE[3]), 
		 -> STR_8(CODE[3]), NoParityMSG(CODE[20]), SpaceParityMSG(CODE[16]), MarkParityMSG(CODE[15]), 
		 -> EvenParityMSG(CODE[22]), OddParityMSG(CODE[21]), STR_7(CODE[3]), STR_6(CODE[33]), 
		 -> STR_5(CODE[3]), Version(CODE[8]), STR_4(CODE[19]), STR_3(CODE[28]), 
		 -> STR_2(CODE[8]), STR_1(CODE[7]), VoltageMSG(CODE[13]), 

    BufferShiftBack@buffer	PTR unsigned char  size(1) Largest target is 12
		 -> PS_2_ScanCodes(BANK1[12]), 

    cleanBuffer@data	PTR unsigned char  size(1) Largest target is 12
		 -> PS_2_ScanCodes(BANK1[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_UARTchar
    _ResendLast->i1_Send_PS2
    _Process_PS2_ScanCode->i1_Send_PS2
    _Process_PS2_ScanCode->i1_UARTchar
    i1_Send_PS2->i1_delayUS
    _UART_send_break_timed->i1_delayUS
    i1_UARTstringWAIT->i1_UARTchar
    i1_UARTchar->i1_CheckSum_byte
    i1_ReadBaud->i1_ReadFlash_4Byte
    i1_ReadFlash_4Byte->i1_ReadFlash_2Byte
    i1_InitUART->i1___lldiv
    _sprintf->i1___lldiv
    ___llmod->i1___lldiv
    _WriteBaud->_WriteFlash_Sequential
    _WriteFlash_Sequential->i1_delayUS
    _PS2RawToScan->i1_CheckSum_byte

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _ResendLast->i1_Send_PS2
    _SetBaud->_WriteBaud
    i1_UARTstringWAIT->i1_UARTchar
    i1_ReadBaud->i1_ReadFlash_4Byte
    _sprintf->___llmod
    _WriteBaud->_WriteFlash_Sequential

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    _isr->_Process_PS2_ScanCode
    _Process_PS2_ScanCode->_SetBaud
    _SetBaud->_WriteBaud

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    _Process_PS2_ScanCode->_SetBaud

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    _isr->_Process_PS2_ScanCode

Critical Paths under _main in BANK4

    _main->_ReadVoltage
    _ReadVoltage->___ftmul
    ___lwtoft->___ftpack
    ___ftmul->___ftdiv
    ___ftdiv->___lwtoft
    _InternalADC_Read->_delayUS
    _Init_PS_2_Send->_Send_PS2
    _Send_PS2->_delayUS
    _Init_System->_InitUART
    _UARTstringWAIT->_UARTchar
    _UARTchar->_CheckSum_byte
    _ReadBaud->_ReadFlash_4Byte
    _ReadFlash_4Byte->_ReadFlash_2Byte
    _InitUART->___lldiv

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   36977
                                             53 BANK4      2     2      0
                _ConfigureOscillator
                            _InitApp
                        _Init_System
              _PS_2_ENABLE_INTERRUPT
                          _PS_2_INIT
                        _ReadVoltage
                     _UARTstringWAIT
                             ___ftge
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     814
                                              0 BANK4      9     3      6
 ---------------------------------------------------------------------------------
 (1) _ReadVoltage                                          9     6      3   10581
                                             44 BANK4      9     6      3
                 _DisableInternalADC
                   _InternalADC_Read
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             4     1      3    2481
                                              8 BANK4      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    3015
                                             28 BANK4     16    10      6
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2947
                                             12 BANK4     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2373
                                              0 BANK4      8     3      5
 ---------------------------------------------------------------------------------
 (2) _InternalADC_Read                                     5     3      2    2064
                                             10 BANK4      5     3      2
                            _delayUS
 ---------------------------------------------------------------------------------
 (2) _DisableInternalADC                                   1     1      0       0
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PS_2_INIT                                            0     0      0    5641
                         _Clock_TRIS
                          _Data_TRIS
                     _Init_PS_2_Send
                         _Timer2Init
 ---------------------------------------------------------------------------------
 (2) _Timer2Init                                           5     5      0      99
                                              0 BANK4      5     5      0
                           _Timer2ON
 ---------------------------------------------------------------------------------
 (3) _Timer2ON                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_PS_2_Send                                       0     0      0    5480
             _PS_2_DISABLE_INTERRUPT
                           _Send_PS2
                            _delayUS
 ---------------------------------------------------------------------------------
 (3) _Send_PS2                                             9     9      0    3416
                                             10 BANK4      9     9      0
                      _CheckSum_byte
                         _Clock_TRIS
                          _Data_TRIS
                      _READ_PS_2_PIN
                            _delayUS
 ---------------------------------------------------------------------------------
 (4) _READ_PS_2_PIN                                        1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Data_TRIS                                            1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Clock_TRIS                                           1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (3) _PS_2_DISABLE_INTERRUPT                               2     2      0      31
                                              0 BANK4      2     2      0
 ---------------------------------------------------------------------------------
 (1) _PS_2_ENABLE_INTERRUPT                                1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                         14    14      0   11386
                                             35 BANK4     14    14      0
                           _InitUART
                           _ReadBaud
                     _UARTstringWAIT
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) _UARTstringWAIT                                       4     2      2    6420
                                             15 BANK4      4     2      2
                           _UARTchar
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) _delayUS                                             10     6      4    2033
                                              0 BANK4     10     6      4
 ---------------------------------------------------------------------------------
 (2) _UARTchar                                             7     5      2    2096
                                              8 BANK4      7     5      2
                      _CheckSum_byte
 ---------------------------------------------------------------------------------
 (3) _CheckSum_byte                                        8     5      3     784
                                              0 BANK4      8     5      3
 ---------------------------------------------------------------------------------
 (2) _ReadBaud                                            16    12      4    1168
                                             18 BANK4     16    12      4
                    _ReadFlash_4Byte
 ---------------------------------------------------------------------------------
 (3) _ReadFlash_4Byte                                     13     9      4     803
                                              5 BANK4     13     9      4
                    _ReadFlash_2Byte
 ---------------------------------------------------------------------------------
 (4) _ReadFlash_2Byte                                      5     2      3     485
                                              0 BANK4      5     2      3
 ---------------------------------------------------------------------------------
 (2) _InitUART                                            21    16      5    1493
                                             14 BANK4     21    16      5
                         _CloseUSART
                          _OpenUSART
                          _ReadUSART
                            ___lldiv
                          _baudUSART
 ---------------------------------------------------------------------------------
 (3) _baudUSART                                            1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     479
                                              0 BANK4     14     6      8
 ---------------------------------------------------------------------------------
 (3) _ReadUSART                                            2     2      0      34
                                              0 BANK4      2     2      0
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     387
                                              0 BANK4      3     1      2
 ---------------------------------------------------------------------------------
 (3) _CloseUSART                                           1     1      0       0
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  1     1      0       0
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  5     5      0   21616
                                             78 BANK0      2     2      0
                                             34 BANK1      3     3      0
                       _PS2RawToScan
               _Process_PS2_ScanCode
                    _READ_CONFIG_PIN
                         _ResendLast
                          _Timer2OFF
                        _Timer2Reset
              _UART_send_break_timed
           i1_PS_2_DISABLE_INTERRUPT
            i1_PS_2_ENABLE_INTERRUPT
                    i1_READ_PS_2_PIN
                        i1_ReadUSART
                         i1_Timer2ON
                         i1_UARTchar
 ---------------------------------------------------------------------------------
 (6) i1_Timer2ON                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) i1_PS_2_ENABLE_INTERRUPT                              1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Timer2Reset                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Timer2OFF                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _ResendLast                                           0     0      0    1323
           i1_PS_2_DISABLE_INTERRUPT
                         i1_Send_PS2
 ---------------------------------------------------------------------------------
 (6) i1_PS_2_DISABLE_INTERRUPT                             2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _READ_CONFIG_PIN                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Process_PS2_ScanCode                                71    71      0   17587
                                             28 BANK1      6     6      0
                                              0 BANK3     65    65      0
                    _BufferShiftBack
                   _Decode_Scan_Code
          _Decode_Scan_Code_Function
        _Decode_Scan_Code_FunctionE0
             _Decode_Scan_Code_Shift
                           _ISNUMBER
                            _SetBaud
                    _UART_send_break
              _UART_send_break_timed
                             ___lmul
                        _cleanBuffer
                            _sprintf
                         i1_Send_PS2
                         i1_UARTchar
                   i1_UARTstringWAIT
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (7) i1_Send_PS2                                           9     9      0    1301
                                             10 COMMON     4     4      0
                                              0 BANK0      5     5      0
                    i1_CheckSum_byte
                       i1_Clock_TRIS
                        i1_Data_TRIS
                    i1_READ_PS_2_PIN
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (6) i1_READ_PS_2_PIN                                      1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_Data_TRIS                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_Clock_TRIS                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _cleanBuffer                                          5     3      2     193
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (7) ___lmul                                              12     4      8     220
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (6) _UART_send_break_timed                                3     1      2     684
                                             10 COMMON     3     1      2
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (7) _UART_send_break                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _SetBaud                                             76    71      5    7906
                                             15 BANK1     13     8      5
                                              0 BANK2     63    63      0
                          _WriteBaud
                            _sprintf
                         i1_InitUART
                         i1_ReadBaud
                   i1_UARTstringWAIT
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (7) i1_UARTstringWAIT                                     4     2      2    2263
                                              1 BANK0      4     2      2
                         i1_UARTchar
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (6) i1_UARTchar                                           7     5      2    1065
                                              8 COMMON     6     4      2
                                              0 BANK0      1     1      0
                    i1_CheckSum_byte
 ---------------------------------------------------------------------------------
 (8) i1_ReadBaud                                          16    12      4     528
                                              4 BANK0     16    12      4
                  i1_ReadFlash_4Byte
 ---------------------------------------------------------------------------------
 (9) i1_ReadFlash_4Byte                                   13     9      4     387
                                              5 COMMON     9     5      4
                                              0 BANK0      4     4      0
                  i1_ReadFlash_2Byte
 ---------------------------------------------------------------------------------
 (8) i1_InitUART                                          21    16      5     822
                                              0 BANK0     21    16      5
                       i1_CloseUSART
                        i1_OpenUSART
                        i1_ReadUSART
                          i1___lldiv
                        i1_baudUSART
 ---------------------------------------------------------------------------------
 (9) i1_baudUSART                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) i1_ReadUSART                                          2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) i1_OpenUSART                                          3     1      2     246
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (9) i1_CloseUSART                                         1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _sprintf                                             22    16      6    1181
                                             10 BANK0     22    16      6
                            ___llmod
                          i1___lldiv
 ---------------------------------------------------------------------------------
 (8) i1___lldiv                                           14     6      8     266
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (8) ___llmod                                             10     2      8     287
                                              0 BANK0     10     2      8
                          i1___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (8) _WriteBaud                                           19    12      7    1928
                                             74 BANK0      4     4      0
                                              0 BANK1     15     8      7
              _WriteFlash_Sequential
 ---------------------------------------------------------------------------------
 (9) _WriteFlash_Sequential                               78    74      4    1625
                                             10 COMMON     4     0      4
                                              0 BANK0     74    74      0
                         _BlockErase
                             _UNLOCK
                  i1_ReadFlash_2Byte
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (7) i1_delayUS                                           10     6      4     534
                                              0 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (10) i1_ReadFlash_2Byte                                   5     2      3     222
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (10) _BlockErase                                          4     2      2     108
                                              0 COMMON     4     2      2
                             _UNLOCK
 ---------------------------------------------------------------------------------
 (10) _UNLOCK                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _ISNUMBER                                             1     1      0      44
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code_Shift                               1     1      0      45
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code_FunctionE0                          1     1      0      45
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code_Function                            1     1      0      44
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code                                     1     1      0      45
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _BufferShiftBack                                      8     6      2    1307
                                              0 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 (6) _PS2RawToScan                                        13    11      2     753
                                              8 COMMON     4     2      2
                                              0 BANK0      9     9      0
                       _Reverse_Byte
                    i1_CheckSum_byte
 ---------------------------------------------------------------------------------
 (7) i1_CheckSum_byte                                      8     5      3     369
                                              0 COMMON     8     5      3
 ---------------------------------------------------------------------------------
 (7) _Reverse_Byte                                         4     4      0     207
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _Init_System
     _InitUART
       _CloseUSART
       _OpenUSART
       _ReadUSART
       ___lldiv
       _baudUSART
     _ReadBaud
       _ReadFlash_4Byte
         _ReadFlash_2Byte
     _UARTstringWAIT
       _UARTchar
         _CheckSum_byte
       _delayUS
     _delayUS
   _PS_2_ENABLE_INTERRUPT
   _PS_2_INIT
     _Clock_TRIS
     _Data_TRIS
     _Init_PS_2_Send
       _PS_2_DISABLE_INTERRUPT
       _Send_PS2
         _CheckSum_byte
         _Clock_TRIS
         _Data_TRIS
         _READ_PS_2_PIN
         _delayUS
       _delayUS
     _Timer2Init
       _Timer2ON
   _ReadVoltage
     _DisableInternalADC
     _InternalADC_Read
       _delayUS
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _UARTstringWAIT
     _UARTchar
       _CheckSum_byte
     _delayUS
   ___ftge
   _delayUS

 _isr (ROOT)
   _PS2RawToScan
     _Reverse_Byte
     i1_CheckSum_byte
   _Process_PS2_ScanCode
     _BufferShiftBack
     _Decode_Scan_Code
     _Decode_Scan_Code_Function
     _Decode_Scan_Code_FunctionE0
     _Decode_Scan_Code_Shift
     _ISNUMBER
     _SetBaud
       _WriteBaud
         _WriteFlash_Sequential
           _BlockErase
             _UNLOCK
           _UNLOCK
           i1_ReadFlash_2Byte
           i1_delayUS
       _sprintf
         ___llmod
           i1___lldiv (ARG)
         i1___lldiv
       i1_InitUART
         i1_CloseUSART
         i1_OpenUSART
         i1_ReadUSART
         i1___lldiv
         i1_baudUSART
       i1_ReadBaud
         i1_ReadFlash_4Byte
           i1_ReadFlash_2Byte
       i1_UARTstringWAIT
         i1_UARTchar
           i1_CheckSum_byte
         i1_delayUS
       i1_delayUS
     _UART_send_break
     _UART_send_break_timed
       i1_delayUS
     ___lmul
     _cleanBuffer
     _sprintf
       ___llmod
         i1___lldiv (ARG)
       i1___lldiv
     i1_Send_PS2
       i1_CheckSum_byte
       i1_Clock_TRIS
       i1_Data_TRIS
       i1_READ_PS_2_PIN
       i1_delayUS
     i1_UARTchar
       i1_CheckSum_byte
     i1_UARTstringWAIT
       i1_UARTchar
         i1_CheckSum_byte
       i1_delayUS
     i1_delayUS
   _READ_CONFIG_PIN
   _ResendLast
     i1_PS_2_DISABLE_INTERRUPT
     i1_Send_PS2
       i1_CheckSum_byte
       i1_Clock_TRIS
       i1_Data_TRIS
       i1_READ_PS_2_PIN
       i1_delayUS
   _Timer2OFF
   _Timer2Reset
   _UART_send_break_timed
     i1_delayUS
   i1_PS_2_DISABLE_INTERRUPT
   i1_PS_2_ENABLE_INTERRUPT
   i1_READ_PS_2_PIN
   i1_ReadUSART
   i1_Timer2ON
   i1_UARTchar
     i1_CheckSum_byte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     25      46       7       87.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     3F      3F       9       78.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50     41      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50     37      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     178      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     178      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Mon Mar 02 10:06:52 2015

                     _BufferShiftBack 1C4C                _PS_2_DISABLE_INTERRUPT 1965  
             Process_PS2_ScanCode@buf 01A0                     ??_ReadFlash_2Byte 0223  
                   ??_ReadFlash_4Byte 0229                                     _i 00D5  
                      _ResendLastFlag 00D3              Process_PS2_ScanCode@temp 01E0  
                         __CFG_CP$OFF 0000                  i1InitUART@baudconfig 002F  
                  Data_TRIS@direction 0220                           __CFG_LVP$ON 0000  
                                 l171 1625                                   l421 1CC1  
                                 l415 1CA8                                   l432 10A6  
                                 l441 10D5                                   l433 10A9  
                                 l290 1AEE                                   l282 1BE4  
                                 l274 0B4F                                   l419 1CB7  
                                 l179 16D7                                   l292 1AF4  
                                 l284 1BFD                                   l293 1B0B  
                                 l437 10CC                                   l622 1899  
                                 l466 1BA8                                   l642 18BC  
                                 l627 18A4                                   l468 1BC7  
                                 l647 1985                                   l943 1B66  
                                 l855 0ED9                                   l856 0F2E  
                                 _MEM 00E2                                   _PR2 001B  
                                 _isr 0004                  _Process_PS2_ScanCode 011B  
                         i1_baudUSART 1834               i1ReadFlash_4Byte@column 0077  
                        __CFG_BORV$LO 0000                                   wreg 0009  
          __size_ofi1_ReadFlash_2Byte 002A            __size_ofi1_ReadFlash_4Byte 0051  
          __end_of_ScanCodeFunctionE0 08D3               UART_send_break_timed@US 007A  
                        ___ftdiv@cntr 0236                          ___ftdiv@sign 023B  
                                l1020 1D24                                  l1023 1D49  
                                l1252 1FD2                                  l1258 1FE9  
                                l6222 1971                                  l6240 1085  
                                l6400 0F5B                                  l6242 108E  
                                l6250 10C4                                  l6138 1983  
                                l6402 0F77                                  l6180 1B01  
                                l6164 1C07                                  l6148 198A  
                                l6332 0EB6                                  l6270 1C97  
                                l6502 1EAA                                  l6246 10AC  
                                l6414 0F7E                                  l6342 0EDE  
                                l6334 0ED3                                  l6512 1ED8  
                                l6504 1EB8                                  l6248 10B9  
                                l6440 0FD8                                  l6416 0F9A  
                                l6344 0EE4                                  l6282 1CAA  
                                l6274 1C9D                                  l6450 0FDB  
                                l6426 0F9D                                  l6370 0F25  
                                l6292 1CB9                                  l6516 1EE3  
                                l6188 1B09                                  l6452 0FF7  
                                l6428 0FB9                                  l6356 0EE9  
                                l6278 1CA2                                  l6198 1B0F  
                                l6526 1BCA                                  l6438 0FBC  
                                l6390 0F58                                  l6358 0F05  
                                l6470 1FA8                                  l6296 1CC3  
                                l6288 1CAF                                  l6376 0F33  
                                l6368 0F08                                  l6720 12CE  
                                l6562 145F                                  l6378 0F39  
                                l6474 1FAF                                  l6706 1295  
                                l6564 1463                                  l6388 0F3C  
                                l6484 1FD7                                  l6476 1FB9  
                                ?_isr 0070        __size_of_PS_2_ENABLE_INTERRUPT 000C  
                                l6830 0AB4                                  l6486 1FDF  
                                l6478 1FBE                                  l6750 133B  
                                l6742 1327                                  l6726 12E4  
                                l6902 1C3D                                  l6826 0AAB  
                                l6754 1343                                  l6738 131F  
                                l6860 0B31                                  l6684 123B  
                                l6774 1943                                  l6862 0B36  
                                l6678 1225                                  l6950 169E  
                                l6942 1676                                  l6776 1949  
                                l6856 0B28                                  l6858 0B2C  
                                l6866 0B3B                                  l6698 127C  
                                l6970 16F4                                  l6962 16DF  
                                l6946 1698                                  l6938 164E  
                                _BAUD 0261                                  l6868 0B48  
                                l6884 1037                                  l6974 1701  
                                l6958 16DB                                  l6888 1045  
                                l6898 1C27                   _PS_2_Read_Data_TEMP 00C9  
                                _ECHO 025F                                  STR_1 0A39  
                                STR_2 0A31                                  STR_3 098F  
                                STR_4 0A12                                  STR_5 09FC  
                                STR_6 096E                                  STR_7 09FC  
                                STR_8 09FC                                  STR_9 09FC  
                                _LATA 010C                                  _LATC 010E  
                                _LALT 01E9         __end_of_PS_2_ENABLE_INTERRUPT 18BF  
                                _PIE1 0091                                  i1l90 0082  
                                i1l83 0075                                  i1l92 00BF  
                                i1l84 002F                                  i1l87 005B  
                                _RALT 01EC                                  u8315 1FCD  
                                u8415 1EB9                                  u8335 1FDA  
                                u8425 1ECD                                  u8265 1E14  
                                u8435 1ED9                                  u8515 1495  
                                u7805 1AF5                                  u8525 1A41  
                                u8365 1FF0                                  u8295 1FB4  
                                u8625 1D2A                                  u8705 1296  
                                u8395 1EAD                                  u8485 116C  
                                u7773 1BF6                                  u8495 118F  
                                u8815 1344                                  u8665 124D  
                                u8825 134A                                  u8745 12F0  
                                u7875 1B5D                                  u8675 125D  
                                u8755 1300                                  u8685 127D  
                                u8925 1032                                  u8695 128C  
                                u8775 1328                                  u8785 132E  
                                u8945 1041                                  u8875 0A80  
                                u8885 0A99                                  u8895 0AA9  
                                _TMR2 001A                                  _WPUA 020C  
                                _WPUC 020E                            i1delayUS@i 0075  
                          i1delayUS@j 0079                          __CFG_WRT$OFF 0000  
    __size_ofi1_PS_2_ENABLE_INTERRUPT 000B                     i1___lldiv@divisor 0070  
                                _main 1611                    UARTstringWAIT@data 022F  
                        ___ftpack@arg 0220                          ___ftpack@exp 0223  
                                fsr0h 0005                                  fsr1h 0007  
                                fsr0l 0004                                  indf0 0000  
                                indf1 0001                                  fsr1l 0006  
                                btemp 007E                     i1___lldiv@counter 007D  
                 baudUSART@baudconfig 0220                         __CFG_BOREN$ON 0000  
                                ltemp 007E                     SetBaud@Paritytemp 0156  
                    i1_UARTstringWAIT 1B11                                  start 00E6  
                                ttemp 007E                                  wtemp 007E  
                       __CFG_IESO$OFF 0000                      Reverse_Byte@This 0073  
           WriteFlash_Sequential@temp 0066                      Reverse_Byte@temp 0072  
                       __CFG_MCLRE$ON 0000                            _BlockErase 19FF  
                        ___ftmul@cntr 024A                           ?i1_UARTchar 0078  
             ?_Decode_Scan_Code_Shift 0070                          ___ftmul@sign 024B  
                     __end_of_InitApp 19B0                       __end_of_SetBaud 0CDE  
                          _Clock_TRIS 1891                         ??_Init_System 0243  
              __size_of_READ_PS_2_PIN 0014                                 ??_isr 006E  
                 _Right_Shift_Key_old 00D4                        _Init_PS_2_Send 066F  
                   ??i1_READ_PS_2_PIN 0070     i1UARTchar@NinethBit_override_data 0079  
     UARTchar@NinethBit_override_data 0229             _Decode_Scan_Code_Function 18E9  
                         ReadBaud@row 0232       WriteFlash_Sequential@amountTemp 0065  
                     __end_of_Version 096E                         ??_ReadVoltage 024F  
                          _CloseUSART 18CC                                 ?_main 0070  
            __size_ofi1_CheckSum_byte 0030                                 STR_10 09C3  
                               STR_11 0A25                                 STR_12 09FC  
                               STR_20 09D8                                 STR_13 09FC  
                               STR_14 09EC                                 STR_15 09FF  
                               STR_16 09FC                                 STR_17 09FC  
                       __CFG_WDTE$OFF 0000                                 STR_18 09AB  
                               STR_19 09FC                       __end_of___ftdiv 12B7  
                    __end_of_ISNUMBER 18CC                       __end_of___lldiv 1EEC  
                     __end_of___ftmul 136B                                 _CKPPS 0E25  
                     __end_of___llmod 1D11                                 _T2CON 001C  
                               _IOCAF 0393                                 _IOCAN 0392  
                               _IOCAP 0391                                 i1l102 00E1  
                               i1l421 1A78                                 i1l415 1A65  
                               i1l432 1F69                                 i1l441 1F96  
                               i1l433 1F6C                                 i1l290 1ABD  
                               i1l282 1B7D                                 i1l419 1A6F  
                               i1l292 1AC3                                 i1l284 1B96  
                               i1l293 1ADA                                 i1l437 1F8D  
                               i1l622 1864                                 i1l710 0280  
                               i1l800 0541                                 i1l466 1B11  
                               i1l642 188E                                 i1l627 186E  
                               i1l468 1B2F                                 i1l478 0C55  
                               i1l487 0CCB                                 i1l647 195E  
                               i1l823 0614                                 i1l943 19F3  
                               i1l855 0D47                                 i1l952 1881  
                               i1l856 0D9B                                 i1l792 0644  
      __size_of_UART_send_break_timed 0025                                 _RCREG 0199  
               ?_Process_PS2_ScanCode 0070                                 _RCSTA 019D  
                               _SPBRG 019B         __end_of_UART_send_break_timed 19D5  
                _PS_2_Read_Data_First 01E1                                 _PORTA 000C  
                               _PORTC 000E                          InitUART@Baud 022E  
                               _RXPPS 0E24                                 _TXREG 019A  
                 _ConfigureOscillator 1940                                 _Alarm 025E  
                _PS_2_Read_Data_Third 01E5                       __end_of_delayUS 1C10  
                    _InternalADC_Read 1D11                           i1delayUS@US 0070  
                 ___lmul@multiplicand 0074                        __CFG_FCMEN$OFF 0000  
                        InitUART@temp 023F                 _WriteFlash_Sequential 136B  
                  i1___lldiv@dividend 0074                 ReadFlash_2Byte@column 0222  
                    __end_of_UARTchar 10DE                            SetBaud@buf 0120  
                     __end_of_dpowers 08FB                           ?i1_InitUART 0020  
                         ?i1_ReadBaud 0024                         ___ftpack@sign 0224  
                  __size_of_PS_2_INIT 000F                                 main@i 0256  
                               isr@rx 00C3                                 ltemp0 007E  
                               ltemp1 0082                                 ltemp2 0086  
                               ltemp3 0080                           ?i1_Send_PS2 0070  
             InternalADC_Read@channel 022E                                 ttemp0 007E  
                               ttemp1 0081                                 ttemp2 0084  
                               ttemp3 0087                                 ttemp4 007F  
                               status 0003               __end_of_BufferShiftBack 1C8D  
                               wtemp0 007E                                 wtemp1 0080  
                               wtemp2 0082                                 wtemp3 0084  
                               wtemp4 0086                                 wtemp5 0088  
                               wtemp6 007F                       __end_of_sprintf 1800  
                         isr@ScanTemp 00C4                    __size_ofi1___lldiv 0052  
                __size_of_cleanBuffer 0018                           ?i1_Timer2ON 0070  
                ?_ConfigureOscillator 0070        __end_of_Decode_Scan_Code_Shift 1940  
                       _ScanCodeSHIFT 07F5                    __size_ofi1_delayUS 0033  
                     _UART_send_break 1000                       __initialization 00E8  
              __end_of_Init_PS_2_Send 06DF                   __end_of_NoParityMSG 093A  
                  __size_of_Data_TRIS 000B                          __end_of_main 1707  
                    __end_of_InitUART 1522                      ??_UARTstringWAIT 0231  
                         isr@Rx_fault 00C2                      __end_of_ReadBaud 11A6  
                  i1___lldiv@quotient 0079            __end_of_DisableInternalADC 1854  
                      _SpaceParityMSG 093A                      __end_of_ScanCode 07F5  
                      __CFG_LPBOR$OFF 0000              __size_of_READ_CONFIG_PIN 0007  
                    __end_of_Send_PS2 1000                                ??_main 0255  
        __end_of_ScanCodeFunctionNoE0 0784                        __CFG_PLLEN$OFF 0000  
                    __end_of_Timer2ON 182C                   __end_of_Init_System 0B65  
                        ReadBaud@temp 023E                      i1CheckSum_byte@i 0077  
                      i1InitUART@Baud 0020                          ?i1_Data_TRIS 0070  
                    BufferShiftBack@i 0076         Decode_Scan_Code_Function@Code 0070  
                 __end_of_ReadVoltage 107B                 ReadFlash_4Byte@column 0227  
                              _ADCON0 009D                                _ADCON1 009E  
                              _ADCON2 009F                   __size_ofi1_UARTchar 005F  
                    ___llmod@dividend 0024                                _ADRESH 009C  
                              _ADRESL 009B                        i1InitUART@temp 0031  
                       _READ_PS_2_PIN 1978                        __CFG_ZCDDIS$ON 0000  
                              _ANSELA 018C                                _ANSELC 018E  
                    __end_of___ftpack 2000                                _HFIOFS 04D0  
                              _RC1STA 019D                                _RC2PPS 0EA2  
                              i1l1074 1732                                i1l1077 1750  
                              i1l4000 1372                                i1l4002 13C8  
                              i1l4032 1412                                i1l4112 1F49  
                              i1l4120 1F7C                                i1l4034 1436  
                              i1l4050 1CFD                                i1l4114 1F53  
                              i1l4122 1F85                                i1l4044 1CD7  
                              i1l4300 1776                                i1l5004 1A89  
                              i1l4046 1CE5                                i1l4054 1D08  
                              i1l4118 1F6F                                i1l4320 17FA  
                              i1l5008 1A93                                i1l5200 0DC4  
                              i1l6000 00B0                                i1l4154 1E57  
                              i1l5210 0DC7                                i1l6002 00BC  
                              i1l4164 1E85                                i1l4156 1E65  
                              i1l4316 17A8                                i1l4308 17A3  
                              i1l4084 1A66                                i1l4076 1A5F  
                              i1l5212 0DE3                                i1l5116 1904  
                              i1l6020 00DA                                i1l4318 170D  
                              i1l4094 1A71                                i1l5142 0D24  
                              i1l4168 1E90                                i1l4280 1734  
                              i1l5224 0DEA                                i1l5152 0D4C  
                              i1l5144 0D41                                i1l5400 0220  
                              i1l4290 175F                                i1l4098 1A79  
                              i1l5250 0E44                                i1l5226 0E06  
                              i1l5154 0D51                                i1l5410 0237  
                              i1l6018 00D7                                i1l4284 1739  
                              i1l5260 0E47                                i1l5236 0E09  
                              i1l5180 0D92                                i1l5500 0307  
                              i1l5412 0225                                i1l5340 019D  
                              i1l5316 014E                                i1l4278 1730  
                              i1l4606 1B32                                i1l5262 0E63  
                              i1l5238 0E25                                i1l5166 0D56  
                              i1l5510 030F                                i1l5422 0251  
                              i1l5414 023E                                i1l5430 0260  
                              i1l5326 0177                                i1l4560 154E  
                              i1l5248 0E28                                i1l5168 0D72  
                              i1l5520 0335                                i1l5512 0324  
                              i1l5440 0277                                i1l5424 023F  
                              i1l5336 0198                                i1l5344 01A8  
                              i1l5274 1D9C                                i1l4810 1C81  
                              i1l4562 1552                                i1l4626 195C  
                              i1l5186 0DA0                                i1l5178 0D75  
                              i1l5506 0321                                i1l5610 0404  
                              i1l5450 028A                                i1l5426 0258  
                              i1l5362 01D3                                i1l3860 1AD8  
                              i1l3852 1AD0                                i1l5276 1D9E  
                              i1l4812 1C88                                i1l3836 1B9F  
                              i1l4636 1963                                i1l5188 0DA5  
                              i1l5524 033E                                i1l5516 032D  
                              i1l5508 0309                                i1l5436 026E  
                              i1l5292 184B                                i1l3870 1ADE  
                              i1l4814 1C53                                i1l5198 0DA8  
                              i1l5710 0560                                i1l5702 054A  
                              i1l5606 03F8                                i1l5542 0364  
                              i1l5390 020A                                i1l5382 01FB  
                              i1l5374 01ED                                i1l5358 01CB  
                              i1l5462 02B5                                i1l5366 01DC  
                              i1l5552 037E                                i1l5544 0352  
                              i1l5480 02D9                                i1l5472 02CA  
                              i1l4842 0C3C                                i1l5722 057F  
                              i1l5714 0569                                i1l5706 0553  
                              i1l5626 0419                                i1l5618 040E  
                              i1l5570 038C                                i1l5554 0381  
                              i1l5546 036B                                i1l5458 0295  
                              i1l5378 01F4                                i1l5386 0200  
                              i1l4860 0C7C                                i1l5660 04A8  
                              i1l5580 03BC                                i1l5572 03A5  
                              i1l5556 036C                                i1l5484 02E2  
                              i1l5476 02D1                                i1l4950 193E  
                              i1l4870 0CA7                                i1l4846 0C4F  
                              i1l5750 05FA                                i1l5726 058C  
                              i1l5718 0576                                i1l5646 046D  
                              i1l5670 04B1                                i1l5582 03A6  
                              i1l5558 0388                                i1l4872 0CAC  
                              i1l4880 0CC3                                i1l5744 05EB  
                              i1l5760 062F                                i1l5568 039E  
                              i1l5584 03C3                                i1l5496 0300  
                              i1l4962 191A                                i1l4938 192C  
                              i1l4786 18CA                                i1l3994 13B3  
                              i1l4874 0CB1                                i1l5746 05F0  
                              i1l5754 05FF                                i1l5578 03B8  
                              i1l5498 02EE                                i1l3988 1396  
                              i1l4868 0CA2                                i1l4796 06E2  
                              i1l5764 0642                                i1l5748 05F5  
                              i1l5756 060C                                i1l5676 04C4  
                              i1l5596 03E2                                i1l4974 18F7  
                              i1l4878 0CB6                                i1l5766 0645  
                              i1l5782 0664                                i1l5696 0538  
                              i1l5688 04F1                                i1l5786 0121  
                              i1l5966 005D                                i1l5992 0092  
                              i1l5968 0060                                _INTCON 000B  
                              _FVRCON 0117                                u420_25 1409  
                              _PARITY 0260                                u423_25 1CDA  
                              _PMADRH 0192                                _PMADRL 0191  
                              u425_25 1CF3                      __end_of___lwtoft 101A  
                              _PMDATH 0194                                u426_25 1CFE  
                              u442_25 1DC2                                _PMDATL 0193  
                              _PMCON1 0195                                _PMCON2 0196  
                              u444_25 1E5A                                u516_25 1584  
                              u525_25 1108                                u534_25 1EF2  
                              u446_25 1E66                                u470_25 1799  
                              u526_25 112B                                u542_25 06E9  
                  __size_of_ReadUSART 000A                                u391_23 1B8F  
                              u535_25 1EFE                                u615_25 1D80  
                              u447_25 1E7A                                u536_25 1F0A  
                              u544_25 1C6D                                u448_25 1E86  
                              u472_25 17B2                                u537_25 1F20  
                              u465_25 11AE                                _OSCCON 0099  
                              u538_25 1F2B                                u394_25 1AC4  
                              u466_25 11F1                                u546_25 0BC0  
                              u570_25 1A9B                                u539_25 1F36  
                              u547_25 0C1D                                u388_25 1A19  
                              u548_25 0C3A                                u725_25 05B3  
                              u726_25 05C3                                u399_25 19EB  
                              u744_25 001E                                u569_25 1A94  
                              _SPBRGH 019C                                _TX1STA 019E  
                              _UNLOCK 187B                  __end_of_OddParityMSG 0926  
                          _ResendLast 0A40                 _PS_2_Read_Data_Second 01E3  
                           ??_InitApp 0220                 ??_ConfigureOscillator 0220  
                              _Delete 00CE                      i1OpenUSART@spbrg 0070  
                      __CFG_PWRTE$OFF 0000                             ??_SetBaud 00B4  
                       ??_Timer2Reset 0070                            _Timer2Init 1A2A  
                         ?_BlockErase 0070                         InitUART@spbrg 023B  
                         SetBaud@Baud 00AF                    __size_of_OpenUSART 0041  
                     ?_Init_PS_2_Send 0070                                ___ftge 1C10  
              __end_of_SpaceParityMSG 094A                     ?_Decode_Scan_Code 0070  
                              ___lmul 1A81                        __CFG_STVREN$ON 0000  
                           ??___ftdiv 0232                             ??___lldiv 0228  
                         ?_Clock_TRIS 0070                             ??___ftmul 0242  
                           ??___llmod 0028                           SetBaud@temp 015A  
                 __size_ofi1_InitUART 00EF                     __end_of_PS_2_INIT 18E9  
                 __size_ofi1_ReadBaud 0064                    ??_Decode_Scan_Code 0070  
                        ?i1_ReadUSART 0070                             ??_delayUS 0224  
__size_of_Decode_Scan_Code_FunctionE0 0012                    __size_of_Timer2OFF 0003  
                         ?_CloseUSART 0070                ??_Process_PS2_ScanCode 00BC  
                 __size_ofi1_Send_PS2 018E                 ___ftmul@f3_as_product 0247  
                   __end_ofi1___lldiv 1E99                ?_WriteFlash_Sequential 007A  
                 __size_ofi1_Timer2ON 0003                     __end_ofi1_delayUS 1BA8  
                     SetBaud@Baudtemp 0152                          ?i1_OpenUSART 0070  
              __size_of_CheckSum_byte 0031                     ??i1_CheckSum_byte 0073  
                      ?_READ_PS_2_PIN 0070                     __end_of_Data_TRIS 18A7  
                           ??_sprintf 0030                        i1ReadBaud@temp 0030  
             i1READ_PS_2_PIN@DATA_CLK 0070               i1_PS_2_ENABLE_INTERRUPT 1886  
             __end_of_UART_send_break 1005                       _ReadFlash_2Byte 1B43  
                     _ReadFlash_4Byte 1DF6               __end_of__initialization 0117  
                 Timer2Init@prescaler 0224                           _NoParityMSG 0926  
                  __size_of_WriteBaud 0068                      ?_BufferShiftBack 0070  
                          ___ftge@ff1 0220                            ___ftge@ff2 0223  
             ?_PS_2_DISABLE_INTERRUPT 0070                            ___ftdiv@f1 022F  
                          ___ftdiv@f2 022C                            ___ftdiv@f3 0237  
                          _VoltageMSG 0959                             ?_ISNUMBER 0070  
                  __size_of_baudUSART 0009                            ___ftmul@f1 023C  
                          ___ftmul@f2 023F                        __pcstackCOMMON 0070  
                        __pidataBANK1 1830                          __pidataBANK4 182C  
                           ?_UARTchar 0228                         ?_PS2RawToScan 0078  
                  InitUART@baudconfig 023D                           _Init_System 0A48  
                 __end_of_Timer2Reset 1826                     __end_of_ReadUSART 187B  
                          ___lwtoft@c 0228                           _ReadVoltage 101A  
                     ReadVoltage@temp 0253                          WriteBaud@row 00A0  
            __end_ofi1_UARTstringWAIT 1B43                        _OPTION_REGbits 0095  
                 ReadFlash_4Byte@temp 022E                          ?i1_baudUSART 0070  
                   ??_READ_CONFIG_PIN 0070                         ReadUSART@data 0221  
                         _SinLEDtimer 025A    __size_of_Decode_Scan_Code_Function 0010  
                   __end_of_OpenUSART 1CCE                   __size_of_BlockErase 002B  
                     WriteBaud@Parity 00A6                     Send_PS2@oddparity 022E  
                          __pbssBANK1 00C5                            __pbssBANK3 01E1  
                          __pbssBANK4 0257                   __size_of_Clock_TRIS 000B  
                           ?_InitUART 022E                             ?_ReadBaud 0232  
                   __end_of_Timer2OFF 1823        __end_of_PS_2_DISABLE_INTERRUPT 1978  
                  ReadVoltage@voltage 0250                               ?_UNLOCK 0070  
                         ?_ResendLast 0070                       i1_READ_PS_2_PIN 1952  
                 __size_of_CloseUSART 000E                             ?_Send_PS2 0070  
                          ??_ISNUMBER 0070                  _ScanCodeFunctionNoE0 0700  
            __end_of_InternalADC_Read 1D55     __size_ofi1_PS_2_DISABLE_INTERRUPT 0011  
                         ?_Timer2Init 0070                    _ScanCodeFunctionE0 0866  
                           ?_Timer2ON 0070             ?i1_PS_2_DISABLE_INTERRUPT 0070  
                       _CheckSum_byte 1AE0                            __pmaintext 1611  
                        ??i1_UARTchar 007A                           _ParityTyped 01EB  
                       BlockErase@row 0070                               ?___ftge 0220  
                             ?___lmul 0070                   i1CheckSum_byte@This 0070  
                      ??_PS2RawToScan 0020                         _Caps_Lock_Key 00CC  
                       ?_Reverse_Byte 0070                            __pintentry 0004  
                          ??_UARTchar 022A                        ___lmul@product 0078  
                           ?___ftpack 0220                       i1InitUART@spbrg 002D  
                   _PS_2_Buffer_items 00D1                 i1CheckSum_byte@Parity 0076  
                           ?___lwtoft 0228                     __end_of_WriteBaud 120E  
                     ??_READ_PS_2_PIN 0220                   BufferShiftBack@size 0071  
                   __end_of_baudUSART 0700               __end_of_ReadFlash_2Byte 1B75  
             __end_of_ReadFlash_4Byte 1E47                               _OSCSTAT 009A  
                 Clock_TRIS@direction 0220             ??i1_PS_2_ENABLE_INTERRUPT 0070  
                             _PPSLOCK 0E0F                          ??i1_InitUART 0025  
                i1ReadFlash_2Byte@row 0070                          ??i1_ReadBaud 0028  
                       ?i1_Clock_TRIS 0070                    __end_ofi1_UARTchar 1F9F  
                __size_ofi1_Data_TRIS 000A                     i1OpenUSART@config 0072  
                i1ReadFlash_4Byte@row 0075                            ??_InitUART 0233  
                          ??_ReadBaud 0236                          ??i1_Send_PS2 007A  
               READ_PS_2_PIN@DATA_CLK 0220                      ?_UART_send_break 0070  
                       ?i1_CloseUSART 0070                 _PS_2_ENABLE_INTERRUPT 18B3  
                     __size_of_UNLOCK 000B                          ??i1_Timer2ON 0070  
                             _InitApp 198C                            ??_Send_PS2 022A  
                             _SetBaud 0B65                        InitUART@config 023E  
                      ?_CheckSum_byte 0220                           _Timer2Reset 1823  
     i1PS_2_ENABLE_INTERRUPT@DATA_CLK 0070                            ??_Timer2ON 0220  
                      InitUART@parity 0232               i1CheckSum_byte@Odd_Even 0072  
                      ??_Reverse_Byte 0070                               _Version 0966  
                     __size_of___ftge 003C                       __size_of___lmul 002F  
                             ___ftdiv 120E                               ___lldiv 1E99  
                             ___ftmul 12B7                               ___llmod 1CCE  
                   i1Send_PS2@command 0021                    __end_ofi1_InitUART 1611  
                             _delayUS 1BDB                    __end_ofi1_ReadBaud 1142  
                          ??___ftpack 0225                               __ptext1 1C10  
                             __ptext2 101A                               __ptext3 1005  
                             __ptext4 12B7                               __ptext5 120E  
                             __ptext6 1F9F                               __ptext7 1D11  
                             __ptext8 184D                               __ptext9 18DA  
                          ??___lwtoft 022B                  __size_ofi1_ReadUSART 0009  
                        _OddParityMSG 0911                               _dpowers 08D3  
                  __end_ofi1_Send_PS2 0E6C                   __size_of_ResendLast 0008  
                           _T2CONbits 001C               i1CheckSum_byte@ThisTemp 0074  
                        __size_of_isr 00E2                     i1Send_PS2@timeout 0023  
            _Process_PS2_ScanCode$851 01DC              _Process_PS2_ScanCode$852 01DD  
            _Process_PS2_ScanCode$853 01DE              _Process_PS2_ScanCode$854 01DF  
         WriteFlash_Sequential@amount 007D           WriteFlash_Sequential@buffer 007C  
                  __end_ofi1_Timer2ON 1829                 _UART_send_break_timed 19B0  
                 __size_of_Timer2Init 002B                    _DisableInternalADC 184D  
         WriteFlash_Sequential@spaces 0068                        ??i1_Clock_TRIS 0070  
             __end_ofi1_READ_PS_2_PIN 1965                               _sprintf 1707  
                             clrloop0 1841                     _Caps_Lock_Key_old 00CD  
                __size_ofi1_OpenUSART 002C                  end_of_initialization 0117  
                       ??_cleanBuffer 0072                        ??i1_CloseUSART 0070  
               BufferShiftBack@buffer 0077                       i1ReadUSART@data 0071  
                             init_ram 183A                   ?_DisableInternalADC 0070  
                             initloop 183B                      UARTchar@override 0228  
                    ??_Init_PS_2_Send 0233          ?_Decode_Scan_Code_FunctionE0 0070  
                     ___lldiv@divisor 0220                       ___lldiv@counter 022D  
                        ??_BlockErase 0072                             _RCSTAbits 019D  
                        ??_Clock_TRIS 0220                          __pstringtext 0700  
               __end_of_EvenParityMSG 0911                       i1_CheckSum_byte 1AB0  
             ??_WriteFlash_Sequential 0020                          ??_CloseUSART 0220  
                ??_DisableInternalADC 0220                             _PS_2_INIT 18DA  
                    __CFG_FOSC$INTOSC 0000                             _PS_2_bits 00D2  
                           _TRISAbits 008C                             _TRISCbits 008E  
           __size_of_Decode_Scan_Code 0012                      ?_ReadFlash_2Byte 0220  
                    ?_ReadFlash_4Byte 0225                  __size_ofi1_baudUSART 0006  
                           i1___lldiv 1E47                 __end_of_MarkParityMSG 0959  
                  __end_of_BlockErase 1A2A           __end_of_ConfigureOscillator 1952  
                __end_of_PS2RawToScan 1DA5                             i1_delayUS 1B75  
              ?_PS_2_ENABLE_INTERRUPT 0070                    __end_of_Clock_TRIS 189C  
                           _BaudTyped 00C5                             _Data_TRIS 189C  
                           _CapsCount 01E7                 i1baudUSART@baudconfig 0070  
                         ___ftdiv@exp 023A                             _Caps_Lock 01E8  
                     ??_CheckSum_byte 0223                           _CCP2CONbits 029A  
                           _TXSTAbits 019E                        __end_of_UNLOCK 1886  
                  __end_of_CloseUSART 18DA                  Timer2Init@postscaler 0223  
                 __end_of_cleanBuffer 06F7         ??_Decode_Scan_Code_FunctionE0 0070  
                         ___ftmul@exp 0246                     __size_of_ISNUMBER 000D  
                      __end_of___ftge 1C4C                 CheckSum_byte@Odd_Even 0222  
                        ?_Init_System 0070                        __end_of___lmul 1AB0  
                     _READ_CONFIG_PIN 1846                     __size_of_UARTchar 0063  
                        ?_ReadVoltage 024C                            ?_PS_2_INIT 0070  
                           Send_PS2@i 0230         __size_of_Process_PS2_ScanCode 0554  
              ?_UART_send_break_timed 007A                   start_initialization 00E8  
                   ?i1_UARTstringWAIT 0021                             _ReadUSART 1871  
             __size_of_UARTstringWAIT 0033                 CheckSum_byte@ThisTemp 0224  
                         __end_of_isr 00E6                            ?i1___lldiv 0070  
                  ??i1_UARTstringWAIT 0023      __end_ofi1_PS_2_DISABLE_INTERRUPT 190A  
                       WriteBaud@Baud 00A2                  __end_of_Reverse_Byte 1F40  
                    ?i1_READ_PS_2_PIN 0070                            ?i1_delayUS 0070  
            ??_Decode_Scan_Code_Shift 0070                         WriteBaud@temp 006A  
                           _OpenUSART 1C8D                            ?_Data_TRIS 0070  
                            ??_UNLOCK 0070                          ??_ResendLast 007E  
                     ___llmod@divisor 0020                     __size_of_InitUART 00E5  
                     ___llmod@counter 0029                     __size_of_ReadBaud 0064  
                           _Shift_Key 01EF                          ??_Timer2Init 0220  
                           _Timer2OFF 1820               __end_ofi1_CheckSum_byte 1AE0  
                   ?_InternalADC_Read 022A                     __size_of_Send_PS2 0194  
                            ??___ftge 0226                              ??___lmul 0078  
            __size_of_BufferShiftBack 0041                    ??_InternalADC_Read 022C  
                   __size_of_Timer2ON 0003                  __end_ofi1_Clock_TRIS 1867  
                         __pdataBANK1 00E2                           __pdataBANK4 0261  
                __end_ofi1_CloseUSART 18B3                         i1ReadBaud@row 0024  
                   __size_of___ftpack 0061                      cleanBuffer@count 0070  
                  __end_of_ResendLast 0A48                            ?_ReadUSART 0070  
                           ___latbits 0002                     __size_of___lwtoft 0015  
                       __pcstackBANK0 0020                         __pcstackBANK1 00A0  
                       __pcstackBANK2 0120                         __pcstackBANK3 01A0  
                       __pcstackBANK4 0220                             _WriteBaud 11A6  
                 __end_of__stringdata 0A40                    i1UARTchar@override 0078  
                  ReadFlash_2Byte@row 0220                    __end_of_Timer2Init 1A55  
                           _baudUSART 06F7                    ReadFlash_4Byte@row 0225  
                         _cleanBuffer 06DF                            ?_OpenUSART 0220  
                         sprintf@_val 0039                           sprintf@flag 0036  
                         sprintf@prec 0037                              ?_InitApp 0070  
               __end_of_ScanCodeSHIFT 0866       Decode_Scan_Code_FunctionE0@Code 0070  
                            ?_SetBaud 00AF               __end_of_READ_CONFIG_PIN 184D  
                      ReadBaud@column 0234                            ?_Timer2OFF 0070  
                        ?_Timer2Reset 0070                              ?___ftdiv 022C  
                            ?___lldiv 0220                   i1Send_PS2@oddparity 0020  
                            ?___ftmul 023C                              ?___llmod 0020  
                    __CFG_PPS1WAY$OFF 0000         WriteFlash_Sequential@TempBufH 0023  
       WriteFlash_Sequential@TempBufL 0043                              ?_delayUS 0220  
              WriteFlash_Sequential@i 0069            Decode_Scan_Code_Shift@Code 0070  
                            _BAUD1CON 019F                           ??_PS_2_INIT 0233  
                    i1InitUART@config 0030                              _BAUDMODE 00CB  
               __size_of_PS2RawToScan 0050                      i1InitUART@parity 0024  
                       ??i1_Data_TRIS 0070                      _Decode_Scan_Code 190A  
                  __end_of_VoltageMSG 0966                            ?_WriteBaud 00A0  
    i1PS_2_DISABLE_INTERRUPT@DATA_CLK 0071                           ??i1___lldiv 0078  
               __end_of_READ_PS_2_PIN 198C                              ?_sprintf 002A  
                          ?_baudUSART 0070                           ??i1_delayUS 0074  
                           delayUS@US 0220       __size_of_Decode_Scan_Code_Shift 0012  
          ?_Decode_Scan_Code_Function 0070                           ??_Data_TRIS 0220  
          WriteFlash_Sequential@tempH 0063            WriteFlash_Sequential@tempL 0064  
            i1_PS_2_DISABLE_INTERRUPT 18F9                             clear_ram0 1840  
                            _PIE1bits 0091                          cleanBuffer@i 0074  
                BufferShiftBack@shift 0070                              _ISNUMBER 18BF  
                            _PIR1bits 0011                      ?i1_CheckSum_byte 0070  
            __size_of_UART_send_break 0005              WriteFlash_Sequential@row 007A  
                            _UARTchar 107B                  i1Data_TRIS@direction 0070  
                        _PS2RawToScan 1D55                         ??i1_ReadUSART 0070  
                            _LControl 00CF                           __stringdata 096E  
                __size_of_Init_System 011D              ?i1_PS_2_ENABLE_INTERRUPT 0070  
      __size_of_WriteFlash_Sequential 00D2                     ??_BufferShiftBack 0072  
               i1ReadFlash_4Byte@temp 0020         __end_of_WriteFlash_Sequential 143D  
               __size_of_Reverse_Byte 0054                        _UARTstringWAIT 1BA8  
                         ??_ReadUSART 0220                  __size_of_ReadVoltage 0061  
                            _RControl 01ED                         ??i1_OpenUSART 0072  
            ??_PS_2_DISABLE_INTERRUPT 0220               ??_PS_2_ENABLE_INTERRUPT 0220  
                   ___lmul@multiplier 0070                              SetBaud@i 015E  
                            _InitUART 143D                              _ReadBaud 1142  
                         ??_OpenUSART 0222                   __end_ofi1_Data_TRIS 1871  
                i1UARTstringWAIT@data 0021                              _ScanCode 0784  
                     OpenUSART@config 0222     __end_of_Decode_Scan_Code_Function 18F9  
                            _Send_PS2 0E6C                 __size_ofi1_Clock_TRIS 000A  
                    __size_of_InitApp 0024                           ??_Timer2OFF 0070  
                    ?_READ_CONFIG_PIN 0070                              _Timer2ON 1829  
                    __size_of_SetBaud 0179                 __size_ofi1_CloseUSART 000C  
                        _Reverse_Byte 1EEC                      __size_of___ftdiv 00A9  
                     cleanBuffer@data 0073                _Decode_Scan_Code_Shift 192E  
                    __size_of___lldiv 0053                      __size_of___ftmul 00B4  
                    __size_of___llmod 0043                         SetBaud@Parity 00B3  
                            ___ftpack 1F9F                        _PS_2_ScanCodes 00D6  
             ??_UART_send_break_timed 007C                      __size_of_delayUS 0035  
         __size_of_DisableInternalADC 0007                __end_of_UARTstringWAIT 1BDB  
                            ___lwtoft 1005                       Send_PS2@command 022F  
                       ??i1_baudUSART 0070                   __end_ofi1_ReadUSART 185D  
               i1Clock_TRIS@direction 0070                           ??_WriteBaud 00A7  
                       ISNUMBER@ascii 0070                       Send_PS2@timeout 0231  
                            __ptext10 1A2A                              __ptext11 1829  
                            __ptext20 1BA8                              __ptext12 066F  
                            __ptext21 1BDB                              __ptext13 0E6C  
                            __ptext30 1871                              __ptext22 107B  
                            __ptext14 1978                              __ptext31 1C8D  
                            __ptext23 1AE0                              __ptext15 189C  
                            __ptext40 0A40                              __ptext32 18CC  
                            __ptext24 1142                              __ptext16 1891  
                            __ptext41 18F9                              __ptext33 198C  
                            __ptext25 1DF6                              __ptext17 1965  
                            __ptext50 19B0                              __ptext42 1846  
                            __ptext34 1940                              __ptext26 1B43  
                            __ptext18 18B3                              __ptext51 1000  
                            __ptext43 011B                              __ptext27 143D  
                            __ptext19 0A48                              __ptext60 1A55  
                            __ptext52 0B65                              __ptext44 0CDE  
                            __ptext36 1826                              __ptext28 06F7  
                            __ptext61 18A7                              __ptext53 1B11  
                            __ptext45 1952                              __ptext37 1886  
                            __ptext29 1E99                              __ptext70 187B  
                            __ptext62 1707                              __ptext54 1F40  
                            __ptext46 1867                              __ptext38 1823  
                            __ptext71 18BF                              __ptext63 1E47  
                            __ptext55 10DE                              __ptext47 185D  
                            __ptext39 1820                              __ptext72 192E  
                            __ptext64 1CCE                              __ptext56 1DA5  
                            __ptext48 06DF                              __ptext73 191C  
                            __ptext65 11A6                              __ptext57 1522  
                            __ptext49 1A81                              __ptext74 18E9  
                            __ptext66 136B                              __ptext58 1834  
                            __ptext75 190A                              __ptext67 1B75  
                            __ptext59 1854                              __ptext76 1C4C  
                            __ptext68 19D5                              __ptext77 1D55  
                            __ptext69 19FF                              __ptext78 1AB0  
                            __ptext79 1EEC         PS_2_ENABLE_INTERRUPT@DATA_CLK 0220  
                   i1_ReadFlash_2Byte 19D5                     i1_ReadFlash_4Byte 1DA5  
                         ??_baudUSART 0220                          i1_Clock_TRIS 185D  
                    __size_of_sprintf 00F9                    ?i1_ReadFlash_2Byte 0070  
                  ?i1_ReadFlash_4Byte 0075                   __end_ofi1_OpenUSART 1A81  
                       __size_of_main 00F6                          i1_CloseUSART 18A7  
            __size_of_ReadFlash_2Byte 0032              __size_of_ReadFlash_4Byte 0051  
        __end_of_Process_PS2_ScanCode 066F                              delayUS@i 0225  
                            delayUS@j 0229             __size_ofi1_UARTstringWAIT 0032  
                        _pwrLEDtoggle 025C          __size_of_ConfigureOscillator 0012  
               __end_of_CheckSum_byte 1B11                   ??i1_ReadFlash_2Byte 0073  
                 ??i1_ReadFlash_4Byte 0079                            _RC1STAbits 019D  
                      CheckSum_byte@i 0227                        _Left_Shift_Key 01EA  
                __size_of_Timer2Reset 0003       __end_ofi1_PS_2_ENABLE_INTERRUPT 1891  
             __size_of_Init_PS_2_Send 0070                        Timer2Init@time 0222  
                   ??_UART_send_break 0070                       ?_UARTstringWAIT 022F  
                 CheckSum_byte@Parity 0226                            _INTCONbits 000B  
           __size_of_InternalADC_Read 0044                        OpenUSART@spbrg 0220  
           __end_ofi1_ReadFlash_2Byte 19FF             __end_ofi1_ReadFlash_4Byte 1DF6  
                        UARTchar@data 022E                           i1_Data_TRIS 1867  
                         pic14e$flags 007E       __size_of_PS_2_DISABLE_INTERRUPT 0013  
                 __end_ofi1_baudUSART 183A                              intlevel1 0000  
                           sprintf@ap 003D                             sprintf@sp 003E  
                        ?_cleanBuffer 0070                      ___lldiv@dividend 0224  
 __end_of_Decode_Scan_Code_FunctionE0 192E           _Decode_Scan_Code_FunctionE0 191C  
                   __CFG_CLKOUTEN$OFF 0000                        _BatteryVoltage 0257  
            __size_ofi1_READ_PS_2_PIN 0013              __end_of_Decode_Scan_Code 191C  
                          i1_UARTchar 1F40                       _Right_Shift_Key 01EE  
                         i1Send_PS2@i 0022                           i1_ReadUSART 1854  
                       _EvenParityMSG 08FB                              sprintf@c 003F  
                            sprintf@f 002A                      i1ReadBaud@column 0026  
                    ___lldiv@quotient 0229               i1ReadFlash_2Byte@column 0072  
                Decode_Scan_Code@Code 0070            ??i1_PS_2_DISABLE_INTERRUPT 0070  
                         i1_OpenUSART 1A55                     Init_System@Parity 0250  
                  _Left_Shift_Key_old 00D0                            _TX1STAbits 019E  
                          i1_InitUART 1522                     CheckSum_byte@This 0220  
                      i1UARTchar@data 0020                            i1_ReadBaud 10DE  
                       _MarkParityMSG 094A                            i1_Send_PS2 0CDE  
         ??_Decode_Scan_Code_Function 0070                       Init_System@Baud 024C  
                          i1_Timer2ON 1826                       Init_System@temp 0248  
                     PS2RawToScan@Raw 0078        PS_2_DISABLE_INTERRUPT@DATA_CLK 0221  
                    PS2RawToScan@temp 007A  
