

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Fri Feb 27 14:01:34 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F1705
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK4,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    12                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1
    16                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	intentry,global,class=CODE,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	psect	text66,local,class=CODE,merge=1,delta=2
    89                           	psect	text67,local,class=CODE,merge=1,delta=2
    90                           	psect	text68,local,class=CODE,merge=1,delta=2
    91                           	psect	text69,local,class=CODE,merge=1,delta=2
    92                           	psect	text70,local,class=CODE,merge=1,delta=2
    93                           	psect	text71,local,class=CODE,merge=1,delta=2
    94                           	psect	text72,local,class=CODE,merge=1,delta=2
    95                           	psect	text73,local,class=CODE,merge=1,delta=2
    96                           	psect	text74,local,class=CODE,merge=1,delta=2
    97                           	psect	text75,local,class=CODE,merge=1,delta=2
    98                           	psect	text76,local,class=CODE,merge=1,delta=2
    99                           	psect	text77,local,class=CODE,merge=1,delta=2
   100                           	dabs	1,0x7E,2
   101  0000                     	;# 
   102  0001                     	;# 
   103  0002                     	;# 
   104  0003                     	;# 
   105  0004                     	;# 
   106  0005                     	;# 
   107  0006                     	;# 
   108  0007                     	;# 
   109  0008                     	;# 
   110  0009                     	;# 
   111  000A                     	;# 
   112  000B                     	;# 
   113  000C                     	;# 
   114  000E                     	;# 
   115  0011                     	;# 
   116  0012                     	;# 
   117  0013                     	;# 
   118  0015                     	;# 
   119  0016                     	;# 
   120  0016                     	;# 
   121  0017                     	;# 
   122  0018                     	;# 
   123  0019                     	;# 
   124  001A                     	;# 
   125  001B                     	;# 
   126  001C                     	;# 
   127  008C                     	;# 
   128  008E                     	;# 
   129  0091                     	;# 
   130  0092                     	;# 
   131  0093                     	;# 
   132  0095                     	;# 
   133  0096                     	;# 
   134  0097                     	;# 
   135  0098                     	;# 
   136  0099                     	;# 
   137  009A                     	;# 
   138  009B                     	;# 
   139  009B                     	;# 
   140  009C                     	;# 
   141  009D                     	;# 
   142  009E                     	;# 
   143  009F                     	;# 
   144  010C                     	;# 
   145  010E                     	;# 
   146  0111                     	;# 
   147  0112                     	;# 
   148  0113                     	;# 
   149  0114                     	;# 
   150  0115                     	;# 
   151  0116                     	;# 
   152  0117                     	;# 
   153  0118                     	;# 
   154  0119                     	;# 
   155  011C                     	;# 
   156  018C                     	;# 
   157  018E                     	;# 
   158  0191                     	;# 
   159  0191                     	;# 
   160  0192                     	;# 
   161  0193                     	;# 
   162  0193                     	;# 
   163  0194                     	;# 
   164  0195                     	;# 
   165  0196                     	;# 
   166  0197                     	;# 
   167  0199                     	;# 
   168  0199                     	;# 
   169  0199                     	;# 
   170  019A                     	;# 
   171  019A                     	;# 
   172  019A                     	;# 
   173  019B                     	;# 
   174  019B                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019C                     	;# 
   179  019C                     	;# 
   180  019C                     	;# 
   181  019D                     	;# 
   182  019D                     	;# 
   183  019D                     	;# 
   184  019E                     	;# 
   185  019E                     	;# 
   186  019E                     	;# 
   187  019F                     	;# 
   188  019F                     	;# 
   189  019F                     	;# 
   190  019F                     	;# 
   191  019F                     	;# 
   192  020C                     	;# 
   193  020E                     	;# 
   194  0211                     	;# 
   195  0211                     	;# 
   196  0212                     	;# 
   197  0212                     	;# 
   198  0213                     	;# 
   199  0213                     	;# 
   200  0214                     	;# 
   201  0214                     	;# 
   202  0215                     	;# 
   203  0215                     	;# 
   204  0215                     	;# 
   205  0215                     	;# 
   206  0216                     	;# 
   207  0216                     	;# 
   208  0217                     	;# 
   209  0217                     	;# 
   210  028C                     	;# 
   211  028E                     	;# 
   212  0291                     	;# 
   213  0291                     	;# 
   214  0292                     	;# 
   215  0293                     	;# 
   216  0293                     	;# 
   217  0298                     	;# 
   218  0298                     	;# 
   219  0299                     	;# 
   220  029A                     	;# 
   221  029A                     	;# 
   222  029E                     	;# 
   223  030C                     	;# 
   224  030E                     	;# 
   225  038C                     	;# 
   226  038E                     	;# 
   227  0391                     	;# 
   228  0392                     	;# 
   229  0393                     	;# 
   230  0397                     	;# 
   231  0398                     	;# 
   232  0399                     	;# 
   233  0415                     	;# 
   234  0416                     	;# 
   235  0417                     	;# 
   236  041C                     	;# 
   237  041D                     	;# 
   238  041E                     	;# 
   239  0511                     	;# 
   240  0515                     	;# 
   241  0617                     	;# 
   242  0618                     	;# 
   243  0619                     	;# 
   244  0619                     	;# 
   245  061A                     	;# 
   246  061B                     	;# 
   247  061C                     	;# 
   248  061C                     	;# 
   249  0691                     	;# 
   250  0692                     	;# 
   251  0693                     	;# 
   252  0694                     	;# 
   253  0695                     	;# 
   254  0696                     	;# 
   255  0697                     	;# 
   256  0698                     	;# 
   257  0699                     	;# 
   258  069A                     	;# 
   259  069B                     	;# 
   260  069C                     	;# 
   261  069D                     	;# 
   262  069E                     	;# 
   263  069F                     	;# 
   264  0E0F                     	;# 
   265  0E10                     	;# 
   266  0E11                     	;# 
   267  0E12                     	;# 
   268  0E13                     	;# 
   269  0E14                     	;# 
   270  0E15                     	;# 
   271  0E17                     	;# 
   272  0E20                     	;# 
   273  0E21                     	;# 
   274  0E22                     	;# 
   275  0E24                     	;# 
   276  0E25                     	;# 
   277  0E28                     	;# 
   278  0E29                     	;# 
   279  0E2A                     	;# 
   280  0E2B                     	;# 
   281  0E90                     	;# 
   282  0E91                     	;# 
   283  0E92                     	;# 
   284  0E94                     	;# 
   285  0E95                     	;# 
   286  0EA0                     	;# 
   287  0EA1                     	;# 
   288  0EA2                     	;# 
   289  0EA3                     	;# 
   290  0EA4                     	;# 
   291  0EA5                     	;# 
   292  0F0F                     	;# 
   293  0F10                     	;# 
   294  0F11                     	;# 
   295  0F12                     	;# 
   296  0F13                     	;# 
   297  0F14                     	;# 
   298  0F15                     	;# 
   299  0F16                     	;# 
   300  0F17                     	;# 
   301  0F18                     	;# 
   302  0F19                     	;# 
   303  0F1A                     	;# 
   304  0F1B                     	;# 
   305  0F1C                     	;# 
   306  0F1D                     	;# 
   307  0F1E                     	;# 
   308  0F1F                     	;# 
   309  0F20                     	;# 
   310  0F21                     	;# 
   311  0F22                     	;# 
   312  0F23                     	;# 
   313  0F24                     	;# 
   314  0F25                     	;# 
   315  0F26                     	;# 
   316  0F27                     	;# 
   317  0F28                     	;# 
   318  0F29                     	;# 
   319  0F2A                     	;# 
   320  0F2B                     	;# 
   321  0F2C                     	;# 
   322  0F2D                     	;# 
   323  0F9E                     	;# 
   324  0FE4                     	;# 
   325  0FE5                     	;# 
   326  0FE6                     	;# 
   327  0FE7                     	;# 
   328  0FE8                     	;# 
   329  0FE9                     	;# 
   330  0FEA                     	;# 
   331  0FEB                     	;# 
   332  0FED                     	;# 
   333  0FEE                     	;# 
   334  0FEF                     	;# 
   335  0000                     	;# 
   336  0001                     	;# 
   337  0002                     	;# 
   338  0003                     	;# 
   339  0004                     	;# 
   340  0005                     	;# 
   341  0006                     	;# 
   342  0007                     	;# 
   343  0008                     	;# 
   344  0009                     	;# 
   345  000A                     	;# 
   346  000B                     	;# 
   347  000C                     	;# 
   348  000E                     	;# 
   349  0011                     	;# 
   350  0012                     	;# 
   351  0013                     	;# 
   352  0015                     	;# 
   353  0016                     	;# 
   354  0016                     	;# 
   355  0017                     	;# 
   356  0018                     	;# 
   357  0019                     	;# 
   358  001A                     	;# 
   359  001B                     	;# 
   360  001C                     	;# 
   361  008C                     	;# 
   362  008E                     	;# 
   363  0091                     	;# 
   364  0092                     	;# 
   365  0093                     	;# 
   366  0095                     	;# 
   367  0096                     	;# 
   368  0097                     	;# 
   369  0098                     	;# 
   370  0099                     	;# 
   371  009A                     	;# 
   372  009B                     	;# 
   373  009B                     	;# 
   374  009C                     	;# 
   375  009D                     	;# 
   376  009E                     	;# 
   377  009F                     	;# 
   378  010C                     	;# 
   379  010E                     	;# 
   380  0111                     	;# 
   381  0112                     	;# 
   382  0113                     	;# 
   383  0114                     	;# 
   384  0115                     	;# 
   385  0116                     	;# 
   386  0117                     	;# 
   387  0118                     	;# 
   388  0119                     	;# 
   389  011C                     	;# 
   390  018C                     	;# 
   391  018E                     	;# 
   392  0191                     	;# 
   393  0191                     	;# 
   394  0192                     	;# 
   395  0193                     	;# 
   396  0193                     	;# 
   397  0194                     	;# 
   398  0195                     	;# 
   399  0196                     	;# 
   400  0197                     	;# 
   401  0199                     	;# 
   402  0199                     	;# 
   403  0199                     	;# 
   404  019A                     	;# 
   405  019A                     	;# 
   406  019A                     	;# 
   407  019B                     	;# 
   408  019B                     	;# 
   409  019B                     	;# 
   410  019B                     	;# 
   411  019B                     	;# 
   412  019C                     	;# 
   413  019C                     	;# 
   414  019C                     	;# 
   415  019D                     	;# 
   416  019D                     	;# 
   417  019D                     	;# 
   418  019E                     	;# 
   419  019E                     	;# 
   420  019E                     	;# 
   421  019F                     	;# 
   422  019F                     	;# 
   423  019F                     	;# 
   424  019F                     	;# 
   425  019F                     	;# 
   426  020C                     	;# 
   427  020E                     	;# 
   428  0211                     	;# 
   429  0211                     	;# 
   430  0212                     	;# 
   431  0212                     	;# 
   432  0213                     	;# 
   433  0213                     	;# 
   434  0214                     	;# 
   435  0214                     	;# 
   436  0215                     	;# 
   437  0215                     	;# 
   438  0215                     	;# 
   439  0215                     	;# 
   440  0216                     	;# 
   441  0216                     	;# 
   442  0217                     	;# 
   443  0217                     	;# 
   444  028C                     	;# 
   445  028E                     	;# 
   446  0291                     	;# 
   447  0291                     	;# 
   448  0292                     	;# 
   449  0293                     	;# 
   450  0293                     	;# 
   451  0298                     	;# 
   452  0298                     	;# 
   453  0299                     	;# 
   454  029A                     	;# 
   455  029A                     	;# 
   456  029E                     	;# 
   457  030C                     	;# 
   458  030E                     	;# 
   459  038C                     	;# 
   460  038E                     	;# 
   461  0391                     	;# 
   462  0392                     	;# 
   463  0393                     	;# 
   464  0397                     	;# 
   465  0398                     	;# 
   466  0399                     	;# 
   467  0415                     	;# 
   468  0416                     	;# 
   469  0417                     	;# 
   470  041C                     	;# 
   471  041D                     	;# 
   472  041E                     	;# 
   473  0511                     	;# 
   474  0515                     	;# 
   475  0617                     	;# 
   476  0618                     	;# 
   477  0619                     	;# 
   478  0619                     	;# 
   479  061A                     	;# 
   480  061B                     	;# 
   481  061C                     	;# 
   482  061C                     	;# 
   483  0691                     	;# 
   484  0692                     	;# 
   485  0693                     	;# 
   486  0694                     	;# 
   487  0695                     	;# 
   488  0696                     	;# 
   489  0697                     	;# 
   490  0698                     	;# 
   491  0699                     	;# 
   492  069A                     	;# 
   493  069B                     	;# 
   494  069C                     	;# 
   495  069D                     	;# 
   496  069E                     	;# 
   497  069F                     	;# 
   498  0E0F                     	;# 
   499  0E10                     	;# 
   500  0E11                     	;# 
   501  0E12                     	;# 
   502  0E13                     	;# 
   503  0E14                     	;# 
   504  0E15                     	;# 
   505  0E17                     	;# 
   506  0E20                     	;# 
   507  0E21                     	;# 
   508  0E22                     	;# 
   509  0E24                     	;# 
   510  0E25                     	;# 
   511  0E28                     	;# 
   512  0E29                     	;# 
   513  0E2A                     	;# 
   514  0E2B                     	;# 
   515  0E90                     	;# 
   516  0E91                     	;# 
   517  0E92                     	;# 
   518  0E94                     	;# 
   519  0E95                     	;# 
   520  0EA0                     	;# 
   521  0EA1                     	;# 
   522  0EA2                     	;# 
   523  0EA3                     	;# 
   524  0EA4                     	;# 
   525  0EA5                     	;# 
   526  0F0F                     	;# 
   527  0F10                     	;# 
   528  0F11                     	;# 
   529  0F12                     	;# 
   530  0F13                     	;# 
   531  0F14                     	;# 
   532  0F15                     	;# 
   533  0F16                     	;# 
   534  0F17                     	;# 
   535  0F18                     	;# 
   536  0F19                     	;# 
   537  0F1A                     	;# 
   538  0F1B                     	;# 
   539  0F1C                     	;# 
   540  0F1D                     	;# 
   541  0F1E                     	;# 
   542  0F1F                     	;# 
   543  0F20                     	;# 
   544  0F21                     	;# 
   545  0F22                     	;# 
   546  0F23                     	;# 
   547  0F24                     	;# 
   548  0F25                     	;# 
   549  0F26                     	;# 
   550  0F27                     	;# 
   551  0F28                     	;# 
   552  0F29                     	;# 
   553  0F2A                     	;# 
   554  0F2B                     	;# 
   555  0F2C                     	;# 
   556  0F2D                     	;# 
   557  0F9E                     	;# 
   558  0FE4                     	;# 
   559  0FE5                     	;# 
   560  0FE6                     	;# 
   561  0FE7                     	;# 
   562  0FE8                     	;# 
   563  0FE9                     	;# 
   564  0FEA                     	;# 
   565  0FEB                     	;# 
   566  0FED                     	;# 
   567  0FEE                     	;# 
   568  0FEF                     	;# 
   569  0000                     	;# 
   570  0001                     	;# 
   571  0002                     	;# 
   572  0003                     	;# 
   573  0004                     	;# 
   574  0005                     	;# 
   575  0006                     	;# 
   576  0007                     	;# 
   577  0008                     	;# 
   578  0009                     	;# 
   579  000A                     	;# 
   580  000B                     	;# 
   581  000C                     	;# 
   582  000E                     	;# 
   583  0011                     	;# 
   584  0012                     	;# 
   585  0013                     	;# 
   586  0015                     	;# 
   587  0016                     	;# 
   588  0016                     	;# 
   589  0017                     	;# 
   590  0018                     	;# 
   591  0019                     	;# 
   592  001A                     	;# 
   593  001B                     	;# 
   594  001C                     	;# 
   595  008C                     	;# 
   596  008E                     	;# 
   597  0091                     	;# 
   598  0092                     	;# 
   599  0093                     	;# 
   600  0095                     	;# 
   601  0096                     	;# 
   602  0097                     	;# 
   603  0098                     	;# 
   604  0099                     	;# 
   605  009A                     	;# 
   606  009B                     	;# 
   607  009B                     	;# 
   608  009C                     	;# 
   609  009D                     	;# 
   610  009E                     	;# 
   611  009F                     	;# 
   612  010C                     	;# 
   613  010E                     	;# 
   614  0111                     	;# 
   615  0112                     	;# 
   616  0113                     	;# 
   617  0114                     	;# 
   618  0115                     	;# 
   619  0116                     	;# 
   620  0117                     	;# 
   621  0118                     	;# 
   622  0119                     	;# 
   623  011C                     	;# 
   624  018C                     	;# 
   625  018E                     	;# 
   626  0191                     	;# 
   627  0191                     	;# 
   628  0192                     	;# 
   629  0193                     	;# 
   630  0193                     	;# 
   631  0194                     	;# 
   632  0195                     	;# 
   633  0196                     	;# 
   634  0197                     	;# 
   635  0199                     	;# 
   636  0199                     	;# 
   637  0199                     	;# 
   638  019A                     	;# 
   639  019A                     	;# 
   640  019A                     	;# 
   641  019B                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019C                     	;# 
   647  019C                     	;# 
   648  019C                     	;# 
   649  019D                     	;# 
   650  019D                     	;# 
   651  019D                     	;# 
   652  019E                     	;# 
   653  019E                     	;# 
   654  019E                     	;# 
   655  019F                     	;# 
   656  019F                     	;# 
   657  019F                     	;# 
   658  019F                     	;# 
   659  019F                     	;# 
   660  020C                     	;# 
   661  020E                     	;# 
   662  0211                     	;# 
   663  0211                     	;# 
   664  0212                     	;# 
   665  0212                     	;# 
   666  0213                     	;# 
   667  0213                     	;# 
   668  0214                     	;# 
   669  0214                     	;# 
   670  0215                     	;# 
   671  0215                     	;# 
   672  0215                     	;# 
   673  0215                     	;# 
   674  0216                     	;# 
   675  0216                     	;# 
   676  0217                     	;# 
   677  0217                     	;# 
   678  028C                     	;# 
   679  028E                     	;# 
   680  0291                     	;# 
   681  0291                     	;# 
   682  0292                     	;# 
   683  0293                     	;# 
   684  0293                     	;# 
   685  0298                     	;# 
   686  0298                     	;# 
   687  0299                     	;# 
   688  029A                     	;# 
   689  029A                     	;# 
   690  029E                     	;# 
   691  030C                     	;# 
   692  030E                     	;# 
   693  038C                     	;# 
   694  038E                     	;# 
   695  0391                     	;# 
   696  0392                     	;# 
   697  0393                     	;# 
   698  0397                     	;# 
   699  0398                     	;# 
   700  0399                     	;# 
   701  0415                     	;# 
   702  0416                     	;# 
   703  0417                     	;# 
   704  041C                     	;# 
   705  041D                     	;# 
   706  041E                     	;# 
   707  0511                     	;# 
   708  0515                     	;# 
   709  0617                     	;# 
   710  0618                     	;# 
   711  0619                     	;# 
   712  0619                     	;# 
   713  061A                     	;# 
   714  061B                     	;# 
   715  061C                     	;# 
   716  061C                     	;# 
   717  0691                     	;# 
   718  0692                     	;# 
   719  0693                     	;# 
   720  0694                     	;# 
   721  0695                     	;# 
   722  0696                     	;# 
   723  0697                     	;# 
   724  0698                     	;# 
   725  0699                     	;# 
   726  069A                     	;# 
   727  069B                     	;# 
   728  069C                     	;# 
   729  069D                     	;# 
   730  069E                     	;# 
   731  069F                     	;# 
   732  0E0F                     	;# 
   733  0E10                     	;# 
   734  0E11                     	;# 
   735  0E12                     	;# 
   736  0E13                     	;# 
   737  0E14                     	;# 
   738  0E15                     	;# 
   739  0E17                     	;# 
   740  0E20                     	;# 
   741  0E21                     	;# 
   742  0E22                     	;# 
   743  0E24                     	;# 
   744  0E25                     	;# 
   745  0E28                     	;# 
   746  0E29                     	;# 
   747  0E2A                     	;# 
   748  0E2B                     	;# 
   749  0E90                     	;# 
   750  0E91                     	;# 
   751  0E92                     	;# 
   752  0E94                     	;# 
   753  0E95                     	;# 
   754  0EA0                     	;# 
   755  0EA1                     	;# 
   756  0EA2                     	;# 
   757  0EA3                     	;# 
   758  0EA4                     	;# 
   759  0EA5                     	;# 
   760  0F0F                     	;# 
   761  0F10                     	;# 
   762  0F11                     	;# 
   763  0F12                     	;# 
   764  0F13                     	;# 
   765  0F14                     	;# 
   766  0F15                     	;# 
   767  0F16                     	;# 
   768  0F17                     	;# 
   769  0F18                     	;# 
   770  0F19                     	;# 
   771  0F1A                     	;# 
   772  0F1B                     	;# 
   773  0F1C                     	;# 
   774  0F1D                     	;# 
   775  0F1E                     	;# 
   776  0F1F                     	;# 
   777  0F20                     	;# 
   778  0F21                     	;# 
   779  0F22                     	;# 
   780  0F23                     	;# 
   781  0F24                     	;# 
   782  0F25                     	;# 
   783  0F26                     	;# 
   784  0F27                     	;# 
   785  0F28                     	;# 
   786  0F29                     	;# 
   787  0F2A                     	;# 
   788  0F2B                     	;# 
   789  0F2C                     	;# 
   790  0F2D                     	;# 
   791  0F9E                     	;# 
   792  0FE4                     	;# 
   793  0FE5                     	;# 
   794  0FE6                     	;# 
   795  0FE7                     	;# 
   796  0FE8                     	;# 
   797  0FE9                     	;# 
   798  0FEA                     	;# 
   799  0FEB                     	;# 
   800  0FED                     	;# 
   801  0FEE                     	;# 
   802  0FEF                     	;# 
   803  0000                     	;# 
   804  0001                     	;# 
   805  0002                     	;# 
   806  0003                     	;# 
   807  0004                     	;# 
   808  0005                     	;# 
   809  0006                     	;# 
   810  0007                     	;# 
   811  0008                     	;# 
   812  0009                     	;# 
   813  000A                     	;# 
   814  000B                     	;# 
   815  000C                     	;# 
   816  000E                     	;# 
   817  0011                     	;# 
   818  0012                     	;# 
   819  0013                     	;# 
   820  0015                     	;# 
   821  0016                     	;# 
   822  0016                     	;# 
   823  0017                     	;# 
   824  0018                     	;# 
   825  0019                     	;# 
   826  001A                     	;# 
   827  001B                     	;# 
   828  001C                     	;# 
   829  008C                     	;# 
   830  008E                     	;# 
   831  0091                     	;# 
   832  0092                     	;# 
   833  0093                     	;# 
   834  0095                     	;# 
   835  0096                     	;# 
   836  0097                     	;# 
   837  0098                     	;# 
   838  0099                     	;# 
   839  009A                     	;# 
   840  009B                     	;# 
   841  009B                     	;# 
   842  009C                     	;# 
   843  009D                     	;# 
   844  009E                     	;# 
   845  009F                     	;# 
   846  010C                     	;# 
   847  010E                     	;# 
   848  0111                     	;# 
   849  0112                     	;# 
   850  0113                     	;# 
   851  0114                     	;# 
   852  0115                     	;# 
   853  0116                     	;# 
   854  0117                     	;# 
   855  0118                     	;# 
   856  0119                     	;# 
   857  011C                     	;# 
   858  018C                     	;# 
   859  018E                     	;# 
   860  0191                     	;# 
   861  0191                     	;# 
   862  0192                     	;# 
   863  0193                     	;# 
   864  0193                     	;# 
   865  0194                     	;# 
   866  0195                     	;# 
   867  0196                     	;# 
   868  0197                     	;# 
   869  0199                     	;# 
   870  0199                     	;# 
   871  0199                     	;# 
   872  019A                     	;# 
   873  019A                     	;# 
   874  019A                     	;# 
   875  019B                     	;# 
   876  019B                     	;# 
   877  019B                     	;# 
   878  019B                     	;# 
   879  019B                     	;# 
   880  019C                     	;# 
   881  019C                     	;# 
   882  019C                     	;# 
   883  019D                     	;# 
   884  019D                     	;# 
   885  019D                     	;# 
   886  019E                     	;# 
   887  019E                     	;# 
   888  019E                     	;# 
   889  019F                     	;# 
   890  019F                     	;# 
   891  019F                     	;# 
   892  019F                     	;# 
   893  019F                     	;# 
   894  020C                     	;# 
   895  020E                     	;# 
   896  0211                     	;# 
   897  0211                     	;# 
   898  0212                     	;# 
   899  0212                     	;# 
   900  0213                     	;# 
   901  0213                     	;# 
   902  0214                     	;# 
   903  0214                     	;# 
   904  0215                     	;# 
   905  0215                     	;# 
   906  0215                     	;# 
   907  0215                     	;# 
   908  0216                     	;# 
   909  0216                     	;# 
   910  0217                     	;# 
   911  0217                     	;# 
   912  028C                     	;# 
   913  028E                     	;# 
   914  0291                     	;# 
   915  0291                     	;# 
   916  0292                     	;# 
   917  0293                     	;# 
   918  0293                     	;# 
   919  0298                     	;# 
   920  0298                     	;# 
   921  0299                     	;# 
   922  029A                     	;# 
   923  029A                     	;# 
   924  029E                     	;# 
   925  030C                     	;# 
   926  030E                     	;# 
   927  038C                     	;# 
   928  038E                     	;# 
   929  0391                     	;# 
   930  0392                     	;# 
   931  0393                     	;# 
   932  0397                     	;# 
   933  0398                     	;# 
   934  0399                     	;# 
   935  0415                     	;# 
   936  0416                     	;# 
   937  0417                     	;# 
   938  041C                     	;# 
   939  041D                     	;# 
   940  041E                     	;# 
   941  0511                     	;# 
   942  0515                     	;# 
   943  0617                     	;# 
   944  0618                     	;# 
   945  0619                     	;# 
   946  0619                     	;# 
   947  061A                     	;# 
   948  061B                     	;# 
   949  061C                     	;# 
   950  061C                     	;# 
   951  0691                     	;# 
   952  0692                     	;# 
   953  0693                     	;# 
   954  0694                     	;# 
   955  0695                     	;# 
   956  0696                     	;# 
   957  0697                     	;# 
   958  0698                     	;# 
   959  0699                     	;# 
   960  069A                     	;# 
   961  069B                     	;# 
   962  069C                     	;# 
   963  069D                     	;# 
   964  069E                     	;# 
   965  069F                     	;# 
   966  0E0F                     	;# 
   967  0E10                     	;# 
   968  0E11                     	;# 
   969  0E12                     	;# 
   970  0E13                     	;# 
   971  0E14                     	;# 
   972  0E15                     	;# 
   973  0E17                     	;# 
   974  0E20                     	;# 
   975  0E21                     	;# 
   976  0E22                     	;# 
   977  0E24                     	;# 
   978  0E25                     	;# 
   979  0E28                     	;# 
   980  0E29                     	;# 
   981  0E2A                     	;# 
   982  0E2B                     	;# 
   983  0E90                     	;# 
   984  0E91                     	;# 
   985  0E92                     	;# 
   986  0E94                     	;# 
   987  0E95                     	;# 
   988  0EA0                     	;# 
   989  0EA1                     	;# 
   990  0EA2                     	;# 
   991  0EA3                     	;# 
   992  0EA4                     	;# 
   993  0EA5                     	;# 
   994  0F0F                     	;# 
   995  0F10                     	;# 
   996  0F11                     	;# 
   997  0F12                     	;# 
   998  0F13                     	;# 
   999  0F14                     	;# 
  1000  0F15                     	;# 
  1001  0F16                     	;# 
  1002  0F17                     	;# 
  1003  0F18                     	;# 
  1004  0F19                     	;# 
  1005  0F1A                     	;# 
  1006  0F1B                     	;# 
  1007  0F1C                     	;# 
  1008  0F1D                     	;# 
  1009  0F1E                     	;# 
  1010  0F1F                     	;# 
  1011  0F20                     	;# 
  1012  0F21                     	;# 
  1013  0F22                     	;# 
  1014  0F23                     	;# 
  1015  0F24                     	;# 
  1016  0F25                     	;# 
  1017  0F26                     	;# 
  1018  0F27                     	;# 
  1019  0F28                     	;# 
  1020  0F29                     	;# 
  1021  0F2A                     	;# 
  1022  0F2B                     	;# 
  1023  0F2C                     	;# 
  1024  0F2D                     	;# 
  1025  0F9E                     	;# 
  1026  0FE4                     	;# 
  1027  0FE5                     	;# 
  1028  0FE6                     	;# 
  1029  0FE7                     	;# 
  1030  0FE8                     	;# 
  1031  0FE9                     	;# 
  1032  0FEA                     	;# 
  1033  0FEB                     	;# 
  1034  0FED                     	;# 
  1035  0FEE                     	;# 
  1036  0FEF                     	;# 
  1037  0000                     	;# 
  1038  0001                     	;# 
  1039  0002                     	;# 
  1040  0003                     	;# 
  1041  0004                     	;# 
  1042  0005                     	;# 
  1043  0006                     	;# 
  1044  0007                     	;# 
  1045  0008                     	;# 
  1046  0009                     	;# 
  1047  000A                     	;# 
  1048  000B                     	;# 
  1049  000C                     	;# 
  1050  000E                     	;# 
  1051  0011                     	;# 
  1052  0012                     	;# 
  1053  0013                     	;# 
  1054  0015                     	;# 
  1055  0016                     	;# 
  1056  0016                     	;# 
  1057  0017                     	;# 
  1058  0018                     	;# 
  1059  0019                     	;# 
  1060  001A                     	;# 
  1061  001B                     	;# 
  1062  001C                     	;# 
  1063  008C                     	;# 
  1064  008E                     	;# 
  1065  0091                     	;# 
  1066  0092                     	;# 
  1067  0093                     	;# 
  1068  0095                     	;# 
  1069  0096                     	;# 
  1070  0097                     	;# 
  1071  0098                     	;# 
  1072  0099                     	;# 
  1073  009A                     	;# 
  1074  009B                     	;# 
  1075  009B                     	;# 
  1076  009C                     	;# 
  1077  009D                     	;# 
  1078  009E                     	;# 
  1079  009F                     	;# 
  1080  010C                     	;# 
  1081  010E                     	;# 
  1082  0111                     	;# 
  1083  0112                     	;# 
  1084  0113                     	;# 
  1085  0114                     	;# 
  1086  0115                     	;# 
  1087  0116                     	;# 
  1088  0117                     	;# 
  1089  0118                     	;# 
  1090  0119                     	;# 
  1091  011C                     	;# 
  1092  018C                     	;# 
  1093  018E                     	;# 
  1094  0191                     	;# 
  1095  0191                     	;# 
  1096  0192                     	;# 
  1097  0193                     	;# 
  1098  0193                     	;# 
  1099  0194                     	;# 
  1100  0195                     	;# 
  1101  0196                     	;# 
  1102  0197                     	;# 
  1103  0199                     	;# 
  1104  0199                     	;# 
  1105  0199                     	;# 
  1106  019A                     	;# 
  1107  019A                     	;# 
  1108  019A                     	;# 
  1109  019B                     	;# 
  1110  019B                     	;# 
  1111  019B                     	;# 
  1112  019B                     	;# 
  1113  019B                     	;# 
  1114  019C                     	;# 
  1115  019C                     	;# 
  1116  019C                     	;# 
  1117  019D                     	;# 
  1118  019D                     	;# 
  1119  019D                     	;# 
  1120  019E                     	;# 
  1121  019E                     	;# 
  1122  019E                     	;# 
  1123  019F                     	;# 
  1124  019F                     	;# 
  1125  019F                     	;# 
  1126  019F                     	;# 
  1127  019F                     	;# 
  1128  020C                     	;# 
  1129  020E                     	;# 
  1130  0211                     	;# 
  1131  0211                     	;# 
  1132  0212                     	;# 
  1133  0212                     	;# 
  1134  0213                     	;# 
  1135  0213                     	;# 
  1136  0214                     	;# 
  1137  0214                     	;# 
  1138  0215                     	;# 
  1139  0215                     	;# 
  1140  0215                     	;# 
  1141  0215                     	;# 
  1142  0216                     	;# 
  1143  0216                     	;# 
  1144  0217                     	;# 
  1145  0217                     	;# 
  1146  028C                     	;# 
  1147  028E                     	;# 
  1148  0291                     	;# 
  1149  0291                     	;# 
  1150  0292                     	;# 
  1151  0293                     	;# 
  1152  0293                     	;# 
  1153  0298                     	;# 
  1154  0298                     	;# 
  1155  0299                     	;# 
  1156  029A                     	;# 
  1157  029A                     	;# 
  1158  029E                     	;# 
  1159  030C                     	;# 
  1160  030E                     	;# 
  1161  038C                     	;# 
  1162  038E                     	;# 
  1163  0391                     	;# 
  1164  0392                     	;# 
  1165  0393                     	;# 
  1166  0397                     	;# 
  1167  0398                     	;# 
  1168  0399                     	;# 
  1169  0415                     	;# 
  1170  0416                     	;# 
  1171  0417                     	;# 
  1172  041C                     	;# 
  1173  041D                     	;# 
  1174  041E                     	;# 
  1175  0511                     	;# 
  1176  0515                     	;# 
  1177  0617                     	;# 
  1178  0618                     	;# 
  1179  0619                     	;# 
  1180  0619                     	;# 
  1181  061A                     	;# 
  1182  061B                     	;# 
  1183  061C                     	;# 
  1184  061C                     	;# 
  1185  0691                     	;# 
  1186  0692                     	;# 
  1187  0693                     	;# 
  1188  0694                     	;# 
  1189  0695                     	;# 
  1190  0696                     	;# 
  1191  0697                     	;# 
  1192  0698                     	;# 
  1193  0699                     	;# 
  1194  069A                     	;# 
  1195  069B                     	;# 
  1196  069C                     	;# 
  1197  069D                     	;# 
  1198  069E                     	;# 
  1199  069F                     	;# 
  1200  0E0F                     	;# 
  1201  0E10                     	;# 
  1202  0E11                     	;# 
  1203  0E12                     	;# 
  1204  0E13                     	;# 
  1205  0E14                     	;# 
  1206  0E15                     	;# 
  1207  0E17                     	;# 
  1208  0E20                     	;# 
  1209  0E21                     	;# 
  1210  0E22                     	;# 
  1211  0E24                     	;# 
  1212  0E25                     	;# 
  1213  0E28                     	;# 
  1214  0E29                     	;# 
  1215  0E2A                     	;# 
  1216  0E2B                     	;# 
  1217  0E90                     	;# 
  1218  0E91                     	;# 
  1219  0E92                     	;# 
  1220  0E94                     	;# 
  1221  0E95                     	;# 
  1222  0EA0                     	;# 
  1223  0EA1                     	;# 
  1224  0EA2                     	;# 
  1225  0EA3                     	;# 
  1226  0EA4                     	;# 
  1227  0EA5                     	;# 
  1228  0F0F                     	;# 
  1229  0F10                     	;# 
  1230  0F11                     	;# 
  1231  0F12                     	;# 
  1232  0F13                     	;# 
  1233  0F14                     	;# 
  1234  0F15                     	;# 
  1235  0F16                     	;# 
  1236  0F17                     	;# 
  1237  0F18                     	;# 
  1238  0F19                     	;# 
  1239  0F1A                     	;# 
  1240  0F1B                     	;# 
  1241  0F1C                     	;# 
  1242  0F1D                     	;# 
  1243  0F1E                     	;# 
  1244  0F1F                     	;# 
  1245  0F20                     	;# 
  1246  0F21                     	;# 
  1247  0F22                     	;# 
  1248  0F23                     	;# 
  1249  0F24                     	;# 
  1250  0F25                     	;# 
  1251  0F26                     	;# 
  1252  0F27                     	;# 
  1253  0F28                     	;# 
  1254  0F29                     	;# 
  1255  0F2A                     	;# 
  1256  0F2B                     	;# 
  1257  0F2C                     	;# 
  1258  0F2D                     	;# 
  1259  0F9E                     	;# 
  1260  0FE4                     	;# 
  1261  0FE5                     	;# 
  1262  0FE6                     	;# 
  1263  0FE7                     	;# 
  1264  0FE8                     	;# 
  1265  0FE9                     	;# 
  1266  0FEA                     	;# 
  1267  0FEB                     	;# 
  1268  0FED                     	;# 
  1269  0FEE                     	;# 
  1270  0FEF                     	;# 
  1271  0000                     	;# 
  1272  0001                     	;# 
  1273  0002                     	;# 
  1274  0003                     	;# 
  1275  0004                     	;# 
  1276  0005                     	;# 
  1277  0006                     	;# 
  1278  0007                     	;# 
  1279  0008                     	;# 
  1280  0009                     	;# 
  1281  000A                     	;# 
  1282  000B                     	;# 
  1283  000C                     	;# 
  1284  000E                     	;# 
  1285  0011                     	;# 
  1286  0012                     	;# 
  1287  0013                     	;# 
  1288  0015                     	;# 
  1289  0016                     	;# 
  1290  0016                     	;# 
  1291  0017                     	;# 
  1292  0018                     	;# 
  1293  0019                     	;# 
  1294  001A                     	;# 
  1295  001B                     	;# 
  1296  001C                     	;# 
  1297  008C                     	;# 
  1298  008E                     	;# 
  1299  0091                     	;# 
  1300  0092                     	;# 
  1301  0093                     	;# 
  1302  0095                     	;# 
  1303  0096                     	;# 
  1304  0097                     	;# 
  1305  0098                     	;# 
  1306  0099                     	;# 
  1307  009A                     	;# 
  1308  009B                     	;# 
  1309  009B                     	;# 
  1310  009C                     	;# 
  1311  009D                     	;# 
  1312  009E                     	;# 
  1313  009F                     	;# 
  1314  010C                     	;# 
  1315  010E                     	;# 
  1316  0111                     	;# 
  1317  0112                     	;# 
  1318  0113                     	;# 
  1319  0114                     	;# 
  1320  0115                     	;# 
  1321  0116                     	;# 
  1322  0117                     	;# 
  1323  0118                     	;# 
  1324  0119                     	;# 
  1325  011C                     	;# 
  1326  018C                     	;# 
  1327  018E                     	;# 
  1328  0191                     	;# 
  1329  0191                     	;# 
  1330  0192                     	;# 
  1331  0193                     	;# 
  1332  0193                     	;# 
  1333  0194                     	;# 
  1334  0195                     	;# 
  1335  0196                     	;# 
  1336  0197                     	;# 
  1337  0199                     	;# 
  1338  0199                     	;# 
  1339  0199                     	;# 
  1340  019A                     	;# 
  1341  019A                     	;# 
  1342  019A                     	;# 
  1343  019B                     	;# 
  1344  019B                     	;# 
  1345  019B                     	;# 
  1346  019B                     	;# 
  1347  019B                     	;# 
  1348  019C                     	;# 
  1349  019C                     	;# 
  1350  019C                     	;# 
  1351  019D                     	;# 
  1352  019D                     	;# 
  1353  019D                     	;# 
  1354  019E                     	;# 
  1355  019E                     	;# 
  1356  019E                     	;# 
  1357  019F                     	;# 
  1358  019F                     	;# 
  1359  019F                     	;# 
  1360  019F                     	;# 
  1361  019F                     	;# 
  1362  020C                     	;# 
  1363  020E                     	;# 
  1364  0211                     	;# 
  1365  0211                     	;# 
  1366  0212                     	;# 
  1367  0212                     	;# 
  1368  0213                     	;# 
  1369  0213                     	;# 
  1370  0214                     	;# 
  1371  0214                     	;# 
  1372  0215                     	;# 
  1373  0215                     	;# 
  1374  0215                     	;# 
  1375  0215                     	;# 
  1376  0216                     	;# 
  1377  0216                     	;# 
  1378  0217                     	;# 
  1379  0217                     	;# 
  1380  028C                     	;# 
  1381  028E                     	;# 
  1382  0291                     	;# 
  1383  0291                     	;# 
  1384  0292                     	;# 
  1385  0293                     	;# 
  1386  0293                     	;# 
  1387  0298                     	;# 
  1388  0298                     	;# 
  1389  0299                     	;# 
  1390  029A                     	;# 
  1391  029A                     	;# 
  1392  029E                     	;# 
  1393  030C                     	;# 
  1394  030E                     	;# 
  1395  038C                     	;# 
  1396  038E                     	;# 
  1397  0391                     	;# 
  1398  0392                     	;# 
  1399  0393                     	;# 
  1400  0397                     	;# 
  1401  0398                     	;# 
  1402  0399                     	;# 
  1403  0415                     	;# 
  1404  0416                     	;# 
  1405  0417                     	;# 
  1406  041C                     	;# 
  1407  041D                     	;# 
  1408  041E                     	;# 
  1409  0511                     	;# 
  1410  0515                     	;# 
  1411  0617                     	;# 
  1412  0618                     	;# 
  1413  0619                     	;# 
  1414  0619                     	;# 
  1415  061A                     	;# 
  1416  061B                     	;# 
  1417  061C                     	;# 
  1418  061C                     	;# 
  1419  0691                     	;# 
  1420  0692                     	;# 
  1421  0693                     	;# 
  1422  0694                     	;# 
  1423  0695                     	;# 
  1424  0696                     	;# 
  1425  0697                     	;# 
  1426  0698                     	;# 
  1427  0699                     	;# 
  1428  069A                     	;# 
  1429  069B                     	;# 
  1430  069C                     	;# 
  1431  069D                     	;# 
  1432  069E                     	;# 
  1433  069F                     	;# 
  1434  0E0F                     	;# 
  1435  0E10                     	;# 
  1436  0E11                     	;# 
  1437  0E12                     	;# 
  1438  0E13                     	;# 
  1439  0E14                     	;# 
  1440  0E15                     	;# 
  1441  0E17                     	;# 
  1442  0E20                     	;# 
  1443  0E21                     	;# 
  1444  0E22                     	;# 
  1445  0E24                     	;# 
  1446  0E25                     	;# 
  1447  0E28                     	;# 
  1448  0E29                     	;# 
  1449  0E2A                     	;# 
  1450  0E2B                     	;# 
  1451  0E90                     	;# 
  1452  0E91                     	;# 
  1453  0E92                     	;# 
  1454  0E94                     	;# 
  1455  0E95                     	;# 
  1456  0EA0                     	;# 
  1457  0EA1                     	;# 
  1458  0EA2                     	;# 
  1459  0EA3                     	;# 
  1460  0EA4                     	;# 
  1461  0EA5                     	;# 
  1462  0F0F                     	;# 
  1463  0F10                     	;# 
  1464  0F11                     	;# 
  1465  0F12                     	;# 
  1466  0F13                     	;# 
  1467  0F14                     	;# 
  1468  0F15                     	;# 
  1469  0F16                     	;# 
  1470  0F17                     	;# 
  1471  0F18                     	;# 
  1472  0F19                     	;# 
  1473  0F1A                     	;# 
  1474  0F1B                     	;# 
  1475  0F1C                     	;# 
  1476  0F1D                     	;# 
  1477  0F1E                     	;# 
  1478  0F1F                     	;# 
  1479  0F20                     	;# 
  1480  0F21                     	;# 
  1481  0F22                     	;# 
  1482  0F23                     	;# 
  1483  0F24                     	;# 
  1484  0F25                     	;# 
  1485  0F26                     	;# 
  1486  0F27                     	;# 
  1487  0F28                     	;# 
  1488  0F29                     	;# 
  1489  0F2A                     	;# 
  1490  0F2B                     	;# 
  1491  0F2C                     	;# 
  1492  0F2D                     	;# 
  1493  0F9E                     	;# 
  1494  0FE4                     	;# 
  1495  0FE5                     	;# 
  1496  0FE6                     	;# 
  1497  0FE7                     	;# 
  1498  0FE8                     	;# 
  1499  0FE9                     	;# 
  1500  0FEA                     	;# 
  1501  0FEB                     	;# 
  1502  0FED                     	;# 
  1503  0FEE                     	;# 
  1504  0FEF                     	;# 
  1505  0000                     	;# 
  1506  0001                     	;# 
  1507  0002                     	;# 
  1508  0003                     	;# 
  1509  0004                     	;# 
  1510  0005                     	;# 
  1511  0006                     	;# 
  1512  0007                     	;# 
  1513  0008                     	;# 
  1514  0009                     	;# 
  1515  000A                     	;# 
  1516  000B                     	;# 
  1517  000C                     	;# 
  1518  000E                     	;# 
  1519  0011                     	;# 
  1520  0012                     	;# 
  1521  0013                     	;# 
  1522  0015                     	;# 
  1523  0016                     	;# 
  1524  0016                     	;# 
  1525  0017                     	;# 
  1526  0018                     	;# 
  1527  0019                     	;# 
  1528  001A                     	;# 
  1529  001B                     	;# 
  1530  001C                     	;# 
  1531  008C                     	;# 
  1532  008E                     	;# 
  1533  0091                     	;# 
  1534  0092                     	;# 
  1535  0093                     	;# 
  1536  0095                     	;# 
  1537  0096                     	;# 
  1538  0097                     	;# 
  1539  0098                     	;# 
  1540  0099                     	;# 
  1541  009A                     	;# 
  1542  009B                     	;# 
  1543  009B                     	;# 
  1544  009C                     	;# 
  1545  009D                     	;# 
  1546  009E                     	;# 
  1547  009F                     	;# 
  1548  010C                     	;# 
  1549  010E                     	;# 
  1550  0111                     	;# 
  1551  0112                     	;# 
  1552  0113                     	;# 
  1553  0114                     	;# 
  1554  0115                     	;# 
  1555  0116                     	;# 
  1556  0117                     	;# 
  1557  0118                     	;# 
  1558  0119                     	;# 
  1559  011C                     	;# 
  1560  018C                     	;# 
  1561  018E                     	;# 
  1562  0191                     	;# 
  1563  0191                     	;# 
  1564  0192                     	;# 
  1565  0193                     	;# 
  1566  0193                     	;# 
  1567  0194                     	;# 
  1568  0195                     	;# 
  1569  0196                     	;# 
  1570  0197                     	;# 
  1571  0199                     	;# 
  1572  0199                     	;# 
  1573  0199                     	;# 
  1574  019A                     	;# 
  1575  019A                     	;# 
  1576  019A                     	;# 
  1577  019B                     	;# 
  1578  019B                     	;# 
  1579  019B                     	;# 
  1580  019B                     	;# 
  1581  019B                     	;# 
  1582  019C                     	;# 
  1583  019C                     	;# 
  1584  019C                     	;# 
  1585  019D                     	;# 
  1586  019D                     	;# 
  1587  019D                     	;# 
  1588  019E                     	;# 
  1589  019E                     	;# 
  1590  019E                     	;# 
  1591  019F                     	;# 
  1592  019F                     	;# 
  1593  019F                     	;# 
  1594  019F                     	;# 
  1595  019F                     	;# 
  1596  020C                     	;# 
  1597  020E                     	;# 
  1598  0211                     	;# 
  1599  0211                     	;# 
  1600  0212                     	;# 
  1601  0212                     	;# 
  1602  0213                     	;# 
  1603  0213                     	;# 
  1604  0214                     	;# 
  1605  0214                     	;# 
  1606  0215                     	;# 
  1607  0215                     	;# 
  1608  0215                     	;# 
  1609  0215                     	;# 
  1610  0216                     	;# 
  1611  0216                     	;# 
  1612  0217                     	;# 
  1613  0217                     	;# 
  1614  028C                     	;# 
  1615  028E                     	;# 
  1616  0291                     	;# 
  1617  0291                     	;# 
  1618  0292                     	;# 
  1619  0293                     	;# 
  1620  0293                     	;# 
  1621  0298                     	;# 
  1622  0298                     	;# 
  1623  0299                     	;# 
  1624  029A                     	;# 
  1625  029A                     	;# 
  1626  029E                     	;# 
  1627  030C                     	;# 
  1628  030E                     	;# 
  1629  038C                     	;# 
  1630  038E                     	;# 
  1631  0391                     	;# 
  1632  0392                     	;# 
  1633  0393                     	;# 
  1634  0397                     	;# 
  1635  0398                     	;# 
  1636  0399                     	;# 
  1637  0415                     	;# 
  1638  0416                     	;# 
  1639  0417                     	;# 
  1640  041C                     	;# 
  1641  041D                     	;# 
  1642  041E                     	;# 
  1643  0511                     	;# 
  1644  0515                     	;# 
  1645  0617                     	;# 
  1646  0618                     	;# 
  1647  0619                     	;# 
  1648  0619                     	;# 
  1649  061A                     	;# 
  1650  061B                     	;# 
  1651  061C                     	;# 
  1652  061C                     	;# 
  1653  0691                     	;# 
  1654  0692                     	;# 
  1655  0693                     	;# 
  1656  0694                     	;# 
  1657  0695                     	;# 
  1658  0696                     	;# 
  1659  0697                     	;# 
  1660  0698                     	;# 
  1661  0699                     	;# 
  1662  069A                     	;# 
  1663  069B                     	;# 
  1664  069C                     	;# 
  1665  069D                     	;# 
  1666  069E                     	;# 
  1667  069F                     	;# 
  1668  0E0F                     	;# 
  1669  0E10                     	;# 
  1670  0E11                     	;# 
  1671  0E12                     	;# 
  1672  0E13                     	;# 
  1673  0E14                     	;# 
  1674  0E15                     	;# 
  1675  0E17                     	;# 
  1676  0E20                     	;# 
  1677  0E21                     	;# 
  1678  0E22                     	;# 
  1679  0E24                     	;# 
  1680  0E25                     	;# 
  1681  0E28                     	;# 
  1682  0E29                     	;# 
  1683  0E2A                     	;# 
  1684  0E2B                     	;# 
  1685  0E90                     	;# 
  1686  0E91                     	;# 
  1687  0E92                     	;# 
  1688  0E94                     	;# 
  1689  0E95                     	;# 
  1690  0EA0                     	;# 
  1691  0EA1                     	;# 
  1692  0EA2                     	;# 
  1693  0EA3                     	;# 
  1694  0EA4                     	;# 
  1695  0EA5                     	;# 
  1696  0F0F                     	;# 
  1697  0F10                     	;# 
  1698  0F11                     	;# 
  1699  0F12                     	;# 
  1700  0F13                     	;# 
  1701  0F14                     	;# 
  1702  0F15                     	;# 
  1703  0F16                     	;# 
  1704  0F17                     	;# 
  1705  0F18                     	;# 
  1706  0F19                     	;# 
  1707  0F1A                     	;# 
  1708  0F1B                     	;# 
  1709  0F1C                     	;# 
  1710  0F1D                     	;# 
  1711  0F1E                     	;# 
  1712  0F1F                     	;# 
  1713  0F20                     	;# 
  1714  0F21                     	;# 
  1715  0F22                     	;# 
  1716  0F23                     	;# 
  1717  0F24                     	;# 
  1718  0F25                     	;# 
  1719  0F26                     	;# 
  1720  0F27                     	;# 
  1721  0F28                     	;# 
  1722  0F29                     	;# 
  1723  0F2A                     	;# 
  1724  0F2B                     	;# 
  1725  0F2C                     	;# 
  1726  0F2D                     	;# 
  1727  0F9E                     	;# 
  1728  0FE4                     	;# 
  1729  0FE5                     	;# 
  1730  0FE6                     	;# 
  1731  0FE7                     	;# 
  1732  0FE8                     	;# 
  1733  0FE9                     	;# 
  1734  0FEA                     	;# 
  1735  0FEB                     	;# 
  1736  0FED                     	;# 
  1737  0FEE                     	;# 
  1738  0FEF                     	;# 
  1739  0000                     	;# 
  1740  0001                     	;# 
  1741  0002                     	;# 
  1742  0003                     	;# 
  1743  0004                     	;# 
  1744  0005                     	;# 
  1745  0006                     	;# 
  1746  0007                     	;# 
  1747  0008                     	;# 
  1748  0009                     	;# 
  1749  000A                     	;# 
  1750  000B                     	;# 
  1751  000C                     	;# 
  1752  000E                     	;# 
  1753  0011                     	;# 
  1754  0012                     	;# 
  1755  0013                     	;# 
  1756  0015                     	;# 
  1757  0016                     	;# 
  1758  0016                     	;# 
  1759  0017                     	;# 
  1760  0018                     	;# 
  1761  0019                     	;# 
  1762  001A                     	;# 
  1763  001B                     	;# 
  1764  001C                     	;# 
  1765  008C                     	;# 
  1766  008E                     	;# 
  1767  0091                     	;# 
  1768  0092                     	;# 
  1769  0093                     	;# 
  1770  0095                     	;# 
  1771  0096                     	;# 
  1772  0097                     	;# 
  1773  0098                     	;# 
  1774  0099                     	;# 
  1775  009A                     	;# 
  1776  009B                     	;# 
  1777  009B                     	;# 
  1778  009C                     	;# 
  1779  009D                     	;# 
  1780  009E                     	;# 
  1781  009F                     	;# 
  1782  010C                     	;# 
  1783  010E                     	;# 
  1784  0111                     	;# 
  1785  0112                     	;# 
  1786  0113                     	;# 
  1787  0114                     	;# 
  1788  0115                     	;# 
  1789  0116                     	;# 
  1790  0117                     	;# 
  1791  0118                     	;# 
  1792  0119                     	;# 
  1793  011C                     	;# 
  1794  018C                     	;# 
  1795  018E                     	;# 
  1796  0191                     	;# 
  1797  0191                     	;# 
  1798  0192                     	;# 
  1799  0193                     	;# 
  1800  0193                     	;# 
  1801  0194                     	;# 
  1802  0195                     	;# 
  1803  0196                     	;# 
  1804  0197                     	;# 
  1805  0199                     	;# 
  1806  0199                     	;# 
  1807  0199                     	;# 
  1808  019A                     	;# 
  1809  019A                     	;# 
  1810  019A                     	;# 
  1811  019B                     	;# 
  1812  019B                     	;# 
  1813  019B                     	;# 
  1814  019B                     	;# 
  1815  019B                     	;# 
  1816  019C                     	;# 
  1817  019C                     	;# 
  1818  019C                     	;# 
  1819  019D                     	;# 
  1820  019D                     	;# 
  1821  019D                     	;# 
  1822  019E                     	;# 
  1823  019E                     	;# 
  1824  019E                     	;# 
  1825  019F                     	;# 
  1826  019F                     	;# 
  1827  019F                     	;# 
  1828  019F                     	;# 
  1829  019F                     	;# 
  1830  020C                     	;# 
  1831  020E                     	;# 
  1832  0211                     	;# 
  1833  0211                     	;# 
  1834  0212                     	;# 
  1835  0212                     	;# 
  1836  0213                     	;# 
  1837  0213                     	;# 
  1838  0214                     	;# 
  1839  0214                     	;# 
  1840  0215                     	;# 
  1841  0215                     	;# 
  1842  0215                     	;# 
  1843  0215                     	;# 
  1844  0216                     	;# 
  1845  0216                     	;# 
  1846  0217                     	;# 
  1847  0217                     	;# 
  1848  028C                     	;# 
  1849  028E                     	;# 
  1850  0291                     	;# 
  1851  0291                     	;# 
  1852  0292                     	;# 
  1853  0293                     	;# 
  1854  0293                     	;# 
  1855  0298                     	;# 
  1856  0298                     	;# 
  1857  0299                     	;# 
  1858  029A                     	;# 
  1859  029A                     	;# 
  1860  029E                     	;# 
  1861  030C                     	;# 
  1862  030E                     	;# 
  1863  038C                     	;# 
  1864  038E                     	;# 
  1865  0391                     	;# 
  1866  0392                     	;# 
  1867  0393                     	;# 
  1868  0397                     	;# 
  1869  0398                     	;# 
  1870  0399                     	;# 
  1871  0415                     	;# 
  1872  0416                     	;# 
  1873  0417                     	;# 
  1874  041C                     	;# 
  1875  041D                     	;# 
  1876  041E                     	;# 
  1877  0511                     	;# 
  1878  0515                     	;# 
  1879  0617                     	;# 
  1880  0618                     	;# 
  1881  0619                     	;# 
  1882  0619                     	;# 
  1883  061A                     	;# 
  1884  061B                     	;# 
  1885  061C                     	;# 
  1886  061C                     	;# 
  1887  0691                     	;# 
  1888  0692                     	;# 
  1889  0693                     	;# 
  1890  0694                     	;# 
  1891  0695                     	;# 
  1892  0696                     	;# 
  1893  0697                     	;# 
  1894  0698                     	;# 
  1895  0699                     	;# 
  1896  069A                     	;# 
  1897  069B                     	;# 
  1898  069C                     	;# 
  1899  069D                     	;# 
  1900  069E                     	;# 
  1901  069F                     	;# 
  1902  0E0F                     	;# 
  1903  0E10                     	;# 
  1904  0E11                     	;# 
  1905  0E12                     	;# 
  1906  0E13                     	;# 
  1907  0E14                     	;# 
  1908  0E15                     	;# 
  1909  0E17                     	;# 
  1910  0E20                     	;# 
  1911  0E21                     	;# 
  1912  0E22                     	;# 
  1913  0E24                     	;# 
  1914  0E25                     	;# 
  1915  0E28                     	;# 
  1916  0E29                     	;# 
  1917  0E2A                     	;# 
  1918  0E2B                     	;# 
  1919  0E90                     	;# 
  1920  0E91                     	;# 
  1921  0E92                     	;# 
  1922  0E94                     	;# 
  1923  0E95                     	;# 
  1924  0EA0                     	;# 
  1925  0EA1                     	;# 
  1926  0EA2                     	;# 
  1927  0EA3                     	;# 
  1928  0EA4                     	;# 
  1929  0EA5                     	;# 
  1930  0F0F                     	;# 
  1931  0F10                     	;# 
  1932  0F11                     	;# 
  1933  0F12                     	;# 
  1934  0F13                     	;# 
  1935  0F14                     	;# 
  1936  0F15                     	;# 
  1937  0F16                     	;# 
  1938  0F17                     	;# 
  1939  0F18                     	;# 
  1940  0F19                     	;# 
  1941  0F1A                     	;# 
  1942  0F1B                     	;# 
  1943  0F1C                     	;# 
  1944  0F1D                     	;# 
  1945  0F1E                     	;# 
  1946  0F1F                     	;# 
  1947  0F20                     	;# 
  1948  0F21                     	;# 
  1949  0F22                     	;# 
  1950  0F23                     	;# 
  1951  0F24                     	;# 
  1952  0F25                     	;# 
  1953  0F26                     	;# 
  1954  0F27                     	;# 
  1955  0F28                     	;# 
  1956  0F29                     	;# 
  1957  0F2A                     	;# 
  1958  0F2B                     	;# 
  1959  0F2C                     	;# 
  1960  0F2D                     	;# 
  1961  0F9E                     	;# 
  1962  0FE4                     	;# 
  1963  0FE5                     	;# 
  1964  0FE6                     	;# 
  1965  0FE7                     	;# 
  1966  0FE8                     	;# 
  1967  0FE9                     	;# 
  1968  0FEA                     	;# 
  1969  0FEB                     	;# 
  1970  0FED                     	;# 
  1971  0FEE                     	;# 
  1972  0FEF                     	;# 
  1973  0000                     	;# 
  1974  0001                     	;# 
  1975  0002                     	;# 
  1976  0003                     	;# 
  1977  0004                     	;# 
  1978  0005                     	;# 
  1979  0006                     	;# 
  1980  0007                     	;# 
  1981  0008                     	;# 
  1982  0009                     	;# 
  1983  000A                     	;# 
  1984  000B                     	;# 
  1985  000C                     	;# 
  1986  000E                     	;# 
  1987  0011                     	;# 
  1988  0012                     	;# 
  1989  0013                     	;# 
  1990  0015                     	;# 
  1991  0016                     	;# 
  1992  0016                     	;# 
  1993  0017                     	;# 
  1994  0018                     	;# 
  1995  0019                     	;# 
  1996  001A                     	;# 
  1997  001B                     	;# 
  1998  001C                     	;# 
  1999  008C                     	;# 
  2000  008E                     	;# 
  2001  0091                     	;# 
  2002  0092                     	;# 
  2003  0093                     	;# 
  2004  0095                     	;# 
  2005  0096                     	;# 
  2006  0097                     	;# 
  2007  0098                     	;# 
  2008  0099                     	;# 
  2009  009A                     	;# 
  2010  009B                     	;# 
  2011  009B                     	;# 
  2012  009C                     	;# 
  2013  009D                     	;# 
  2014  009E                     	;# 
  2015  009F                     	;# 
  2016  010C                     	;# 
  2017  010E                     	;# 
  2018  0111                     	;# 
  2019  0112                     	;# 
  2020  0113                     	;# 
  2021  0114                     	;# 
  2022  0115                     	;# 
  2023  0116                     	;# 
  2024  0117                     	;# 
  2025  0118                     	;# 
  2026  0119                     	;# 
  2027  011C                     	;# 
  2028  018C                     	;# 
  2029  018E                     	;# 
  2030  0191                     	;# 
  2031  0191                     	;# 
  2032  0192                     	;# 
  2033  0193                     	;# 
  2034  0193                     	;# 
  2035  0194                     	;# 
  2036  0195                     	;# 
  2037  0196                     	;# 
  2038  0197                     	;# 
  2039  0199                     	;# 
  2040  0199                     	;# 
  2041  0199                     	;# 
  2042  019A                     	;# 
  2043  019A                     	;# 
  2044  019A                     	;# 
  2045  019B                     	;# 
  2046  019B                     	;# 
  2047  019B                     	;# 
  2048  019B                     	;# 
  2049  019B                     	;# 
  2050  019C                     	;# 
  2051  019C                     	;# 
  2052  019C                     	;# 
  2053  019D                     	;# 
  2054  019D                     	;# 
  2055  019D                     	;# 
  2056  019E                     	;# 
  2057  019E                     	;# 
  2058  019E                     	;# 
  2059  019F                     	;# 
  2060  019F                     	;# 
  2061  019F                     	;# 
  2062  019F                     	;# 
  2063  019F                     	;# 
  2064  020C                     	;# 
  2065  020E                     	;# 
  2066  0211                     	;# 
  2067  0211                     	;# 
  2068  0212                     	;# 
  2069  0212                     	;# 
  2070  0213                     	;# 
  2071  0213                     	;# 
  2072  0214                     	;# 
  2073  0214                     	;# 
  2074  0215                     	;# 
  2075  0215                     	;# 
  2076  0215                     	;# 
  2077  0215                     	;# 
  2078  0216                     	;# 
  2079  0216                     	;# 
  2080  0217                     	;# 
  2081  0217                     	;# 
  2082  028C                     	;# 
  2083  028E                     	;# 
  2084  0291                     	;# 
  2085  0291                     	;# 
  2086  0292                     	;# 
  2087  0293                     	;# 
  2088  0293                     	;# 
  2089  0298                     	;# 
  2090  0298                     	;# 
  2091  0299                     	;# 
  2092  029A                     	;# 
  2093  029A                     	;# 
  2094  029E                     	;# 
  2095  030C                     	;# 
  2096  030E                     	;# 
  2097  038C                     	;# 
  2098  038E                     	;# 
  2099  0391                     	;# 
  2100  0392                     	;# 
  2101  0393                     	;# 
  2102  0397                     	;# 
  2103  0398                     	;# 
  2104  0399                     	;# 
  2105  0415                     	;# 
  2106  0416                     	;# 
  2107  0417                     	;# 
  2108  041C                     	;# 
  2109  041D                     	;# 
  2110  041E                     	;# 
  2111  0511                     	;# 
  2112  0515                     	;# 
  2113  0617                     	;# 
  2114  0618                     	;# 
  2115  0619                     	;# 
  2116  0619                     	;# 
  2117  061A                     	;# 
  2118  061B                     	;# 
  2119  061C                     	;# 
  2120  061C                     	;# 
  2121  0691                     	;# 
  2122  0692                     	;# 
  2123  0693                     	;# 
  2124  0694                     	;# 
  2125  0695                     	;# 
  2126  0696                     	;# 
  2127  0697                     	;# 
  2128  0698                     	;# 
  2129  0699                     	;# 
  2130  069A                     	;# 
  2131  069B                     	;# 
  2132  069C                     	;# 
  2133  069D                     	;# 
  2134  069E                     	;# 
  2135  069F                     	;# 
  2136  0E0F                     	;# 
  2137  0E10                     	;# 
  2138  0E11                     	;# 
  2139  0E12                     	;# 
  2140  0E13                     	;# 
  2141  0E14                     	;# 
  2142  0E15                     	;# 
  2143  0E17                     	;# 
  2144  0E20                     	;# 
  2145  0E21                     	;# 
  2146  0E22                     	;# 
  2147  0E24                     	;# 
  2148  0E25                     	;# 
  2149  0E28                     	;# 
  2150  0E29                     	;# 
  2151  0E2A                     	;# 
  2152  0E2B                     	;# 
  2153  0E90                     	;# 
  2154  0E91                     	;# 
  2155  0E92                     	;# 
  2156  0E94                     	;# 
  2157  0E95                     	;# 
  2158  0EA0                     	;# 
  2159  0EA1                     	;# 
  2160  0EA2                     	;# 
  2161  0EA3                     	;# 
  2162  0EA4                     	;# 
  2163  0EA5                     	;# 
  2164  0F0F                     	;# 
  2165  0F10                     	;# 
  2166  0F11                     	;# 
  2167  0F12                     	;# 
  2168  0F13                     	;# 
  2169  0F14                     	;# 
  2170  0F15                     	;# 
  2171  0F16                     	;# 
  2172  0F17                     	;# 
  2173  0F18                     	;# 
  2174  0F19                     	;# 
  2175  0F1A                     	;# 
  2176  0F1B                     	;# 
  2177  0F1C                     	;# 
  2178  0F1D                     	;# 
  2179  0F1E                     	;# 
  2180  0F1F                     	;# 
  2181  0F20                     	;# 
  2182  0F21                     	;# 
  2183  0F22                     	;# 
  2184  0F23                     	;# 
  2185  0F24                     	;# 
  2186  0F25                     	;# 
  2187  0F26                     	;# 
  2188  0F27                     	;# 
  2189  0F28                     	;# 
  2190  0F29                     	;# 
  2191  0F2A                     	;# 
  2192  0F2B                     	;# 
  2193  0F2C                     	;# 
  2194  0F2D                     	;# 
  2195  0F9E                     	;# 
  2196  0FE4                     	;# 
  2197  0FE5                     	;# 
  2198  0FE6                     	;# 
  2199  0FE7                     	;# 
  2200  0FE8                     	;# 
  2201  0FE9                     	;# 
  2202  0FEA                     	;# 
  2203  0FEB                     	;# 
  2204  0FED                     	;# 
  2205  0FEE                     	;# 
  2206  0FEF                     	;# 
  2207  0000                     	;# 
  2208  0001                     	;# 
  2209  0002                     	;# 
  2210  0003                     	;# 
  2211  0004                     	;# 
  2212  0005                     	;# 
  2213  0006                     	;# 
  2214  0007                     	;# 
  2215  0008                     	;# 
  2216  0009                     	;# 
  2217  000A                     	;# 
  2218  000B                     	;# 
  2219  000C                     	;# 
  2220  000E                     	;# 
  2221  0011                     	;# 
  2222  0012                     	;# 
  2223  0013                     	;# 
  2224  0015                     	;# 
  2225  0016                     	;# 
  2226  0016                     	;# 
  2227  0017                     	;# 
  2228  0018                     	;# 
  2229  0019                     	;# 
  2230  001A                     	;# 
  2231  001B                     	;# 
  2232  001C                     	;# 
  2233  008C                     	;# 
  2234  008E                     	;# 
  2235  0091                     	;# 
  2236  0092                     	;# 
  2237  0093                     	;# 
  2238  0095                     	;# 
  2239  0096                     	;# 
  2240  0097                     	;# 
  2241  0098                     	;# 
  2242  0099                     	;# 
  2243  009A                     	;# 
  2244  009B                     	;# 
  2245  009B                     	;# 
  2246  009C                     	;# 
  2247  009D                     	;# 
  2248  009E                     	;# 
  2249  009F                     	;# 
  2250  010C                     	;# 
  2251  010E                     	;# 
  2252  0111                     	;# 
  2253  0112                     	;# 
  2254  0113                     	;# 
  2255  0114                     	;# 
  2256  0115                     	;# 
  2257  0116                     	;# 
  2258  0117                     	;# 
  2259  0118                     	;# 
  2260  0119                     	;# 
  2261  011C                     	;# 
  2262  018C                     	;# 
  2263  018E                     	;# 
  2264  0191                     	;# 
  2265  0191                     	;# 
  2266  0192                     	;# 
  2267  0193                     	;# 
  2268  0193                     	;# 
  2269  0194                     	;# 
  2270  0195                     	;# 
  2271  0196                     	;# 
  2272  0197                     	;# 
  2273  0199                     	;# 
  2274  0199                     	;# 
  2275  0199                     	;# 
  2276  019A                     	;# 
  2277  019A                     	;# 
  2278  019A                     	;# 
  2279  019B                     	;# 
  2280  019B                     	;# 
  2281  019B                     	;# 
  2282  019B                     	;# 
  2283  019B                     	;# 
  2284  019C                     	;# 
  2285  019C                     	;# 
  2286  019C                     	;# 
  2287  019D                     	;# 
  2288  019D                     	;# 
  2289  019D                     	;# 
  2290  019E                     	;# 
  2291  019E                     	;# 
  2292  019E                     	;# 
  2293  019F                     	;# 
  2294  019F                     	;# 
  2295  019F                     	;# 
  2296  019F                     	;# 
  2297  019F                     	;# 
  2298  020C                     	;# 
  2299  020E                     	;# 
  2300  0211                     	;# 
  2301  0211                     	;# 
  2302  0212                     	;# 
  2303  0212                     	;# 
  2304  0213                     	;# 
  2305  0213                     	;# 
  2306  0214                     	;# 
  2307  0214                     	;# 
  2308  0215                     	;# 
  2309  0215                     	;# 
  2310  0215                     	;# 
  2311  0215                     	;# 
  2312  0216                     	;# 
  2313  0216                     	;# 
  2314  0217                     	;# 
  2315  0217                     	;# 
  2316  028C                     	;# 
  2317  028E                     	;# 
  2318  0291                     	;# 
  2319  0291                     	;# 
  2320  0292                     	;# 
  2321  0293                     	;# 
  2322  0293                     	;# 
  2323  0298                     	;# 
  2324  0298                     	;# 
  2325  0299                     	;# 
  2326  029A                     	;# 
  2327  029A                     	;# 
  2328  029E                     	;# 
  2329  030C                     	;# 
  2330  030E                     	;# 
  2331  038C                     	;# 
  2332  038E                     	;# 
  2333  0391                     	;# 
  2334  0392                     	;# 
  2335  0393                     	;# 
  2336  0397                     	;# 
  2337  0398                     	;# 
  2338  0399                     	;# 
  2339  0415                     	;# 
  2340  0416                     	;# 
  2341  0417                     	;# 
  2342  041C                     	;# 
  2343  041D                     	;# 
  2344  041E                     	;# 
  2345  0511                     	;# 
  2346  0515                     	;# 
  2347  0617                     	;# 
  2348  0618                     	;# 
  2349  0619                     	;# 
  2350  0619                     	;# 
  2351  061A                     	;# 
  2352  061B                     	;# 
  2353  061C                     	;# 
  2354  061C                     	;# 
  2355  0691                     	;# 
  2356  0692                     	;# 
  2357  0693                     	;# 
  2358  0694                     	;# 
  2359  0695                     	;# 
  2360  0696                     	;# 
  2361  0697                     	;# 
  2362  0698                     	;# 
  2363  0699                     	;# 
  2364  069A                     	;# 
  2365  069B                     	;# 
  2366  069C                     	;# 
  2367  069D                     	;# 
  2368  069E                     	;# 
  2369  069F                     	;# 
  2370  0E0F                     	;# 
  2371  0E10                     	;# 
  2372  0E11                     	;# 
  2373  0E12                     	;# 
  2374  0E13                     	;# 
  2375  0E14                     	;# 
  2376  0E15                     	;# 
  2377  0E17                     	;# 
  2378  0E20                     	;# 
  2379  0E21                     	;# 
  2380  0E22                     	;# 
  2381  0E24                     	;# 
  2382  0E25                     	;# 
  2383  0E28                     	;# 
  2384  0E29                     	;# 
  2385  0E2A                     	;# 
  2386  0E2B                     	;# 
  2387  0E90                     	;# 
  2388  0E91                     	;# 
  2389  0E92                     	;# 
  2390  0E94                     	;# 
  2391  0E95                     	;# 
  2392  0EA0                     	;# 
  2393  0EA1                     	;# 
  2394  0EA2                     	;# 
  2395  0EA3                     	;# 
  2396  0EA4                     	;# 
  2397  0EA5                     	;# 
  2398  0F0F                     	;# 
  2399  0F10                     	;# 
  2400  0F11                     	;# 
  2401  0F12                     	;# 
  2402  0F13                     	;# 
  2403  0F14                     	;# 
  2404  0F15                     	;# 
  2405  0F16                     	;# 
  2406  0F17                     	;# 
  2407  0F18                     	;# 
  2408  0F19                     	;# 
  2409  0F1A                     	;# 
  2410  0F1B                     	;# 
  2411  0F1C                     	;# 
  2412  0F1D                     	;# 
  2413  0F1E                     	;# 
  2414  0F1F                     	;# 
  2415  0F20                     	;# 
  2416  0F21                     	;# 
  2417  0F22                     	;# 
  2418  0F23                     	;# 
  2419  0F24                     	;# 
  2420  0F25                     	;# 
  2421  0F26                     	;# 
  2422  0F27                     	;# 
  2423  0F28                     	;# 
  2424  0F29                     	;# 
  2425  0F2A                     	;# 
  2426  0F2B                     	;# 
  2427  0F2C                     	;# 
  2428  0F2D                     	;# 
  2429  0F9E                     	;# 
  2430  0FE4                     	;# 
  2431  0FE5                     	;# 
  2432  0FE6                     	;# 
  2433  0FE7                     	;# 
  2434  0FE8                     	;# 
  2435  0FE9                     	;# 
  2436  0FEA                     	;# 
  2437  0FEB                     	;# 
  2438  0FED                     	;# 
  2439  0FEE                     	;# 
  2440  0FEF                     	;# 
  2441  0000                     	;# 
  2442  0001                     	;# 
  2443  0002                     	;# 
  2444  0003                     	;# 
  2445  0004                     	;# 
  2446  0005                     	;# 
  2447  0006                     	;# 
  2448  0007                     	;# 
  2449  0008                     	;# 
  2450  0009                     	;# 
  2451  000A                     	;# 
  2452  000B                     	;# 
  2453  000C                     	;# 
  2454  000E                     	;# 
  2455  0011                     	;# 
  2456  0012                     	;# 
  2457  0013                     	;# 
  2458  0015                     	;# 
  2459  0016                     	;# 
  2460  0016                     	;# 
  2461  0017                     	;# 
  2462  0018                     	;# 
  2463  0019                     	;# 
  2464  001A                     	;# 
  2465  001B                     	;# 
  2466  001C                     	;# 
  2467  008C                     	;# 
  2468  008E                     	;# 
  2469  0091                     	;# 
  2470  0092                     	;# 
  2471  0093                     	;# 
  2472  0095                     	;# 
  2473  0096                     	;# 
  2474  0097                     	;# 
  2475  0098                     	;# 
  2476  0099                     	;# 
  2477  009A                     	;# 
  2478  009B                     	;# 
  2479  009B                     	;# 
  2480  009C                     	;# 
  2481  009D                     	;# 
  2482  009E                     	;# 
  2483  009F                     	;# 
  2484  010C                     	;# 
  2485  010E                     	;# 
  2486  0111                     	;# 
  2487  0112                     	;# 
  2488  0113                     	;# 
  2489  0114                     	;# 
  2490  0115                     	;# 
  2491  0116                     	;# 
  2492  0117                     	;# 
  2493  0118                     	;# 
  2494  0119                     	;# 
  2495  011C                     	;# 
  2496  018C                     	;# 
  2497  018E                     	;# 
  2498  0191                     	;# 
  2499  0191                     	;# 
  2500  0192                     	;# 
  2501  0193                     	;# 
  2502  0193                     	;# 
  2503  0194                     	;# 
  2504  0195                     	;# 
  2505  0196                     	;# 
  2506  0197                     	;# 
  2507  0199                     	;# 
  2508  0199                     	;# 
  2509  0199                     	;# 
  2510  019A                     	;# 
  2511  019A                     	;# 
  2512  019A                     	;# 
  2513  019B                     	;# 
  2514  019B                     	;# 
  2515  019B                     	;# 
  2516  019B                     	;# 
  2517  019B                     	;# 
  2518  019C                     	;# 
  2519  019C                     	;# 
  2520  019C                     	;# 
  2521  019D                     	;# 
  2522  019D                     	;# 
  2523  019D                     	;# 
  2524  019E                     	;# 
  2525  019E                     	;# 
  2526  019E                     	;# 
  2527  019F                     	;# 
  2528  019F                     	;# 
  2529  019F                     	;# 
  2530  019F                     	;# 
  2531  019F                     	;# 
  2532  020C                     	;# 
  2533  020E                     	;# 
  2534  0211                     	;# 
  2535  0211                     	;# 
  2536  0212                     	;# 
  2537  0212                     	;# 
  2538  0213                     	;# 
  2539  0213                     	;# 
  2540  0214                     	;# 
  2541  0214                     	;# 
  2542  0215                     	;# 
  2543  0215                     	;# 
  2544  0215                     	;# 
  2545  0215                     	;# 
  2546  0216                     	;# 
  2547  0216                     	;# 
  2548  0217                     	;# 
  2549  0217                     	;# 
  2550  028C                     	;# 
  2551  028E                     	;# 
  2552  0291                     	;# 
  2553  0291                     	;# 
  2554  0292                     	;# 
  2555  0293                     	;# 
  2556  0293                     	;# 
  2557  0298                     	;# 
  2558  0298                     	;# 
  2559  0299                     	;# 
  2560  029A                     	;# 
  2561  029A                     	;# 
  2562  029E                     	;# 
  2563  030C                     	;# 
  2564  030E                     	;# 
  2565  038C                     	;# 
  2566  038E                     	;# 
  2567  0391                     	;# 
  2568  0392                     	;# 
  2569  0393                     	;# 
  2570  0397                     	;# 
  2571  0398                     	;# 
  2572  0399                     	;# 
  2573  0415                     	;# 
  2574  0416                     	;# 
  2575  0417                     	;# 
  2576  041C                     	;# 
  2577  041D                     	;# 
  2578  041E                     	;# 
  2579  0511                     	;# 
  2580  0515                     	;# 
  2581  0617                     	;# 
  2582  0618                     	;# 
  2583  0619                     	;# 
  2584  0619                     	;# 
  2585  061A                     	;# 
  2586  061B                     	;# 
  2587  061C                     	;# 
  2588  061C                     	;# 
  2589  0691                     	;# 
  2590  0692                     	;# 
  2591  0693                     	;# 
  2592  0694                     	;# 
  2593  0695                     	;# 
  2594  0696                     	;# 
  2595  0697                     	;# 
  2596  0698                     	;# 
  2597  0699                     	;# 
  2598  069A                     	;# 
  2599  069B                     	;# 
  2600  069C                     	;# 
  2601  069D                     	;# 
  2602  069E                     	;# 
  2603  069F                     	;# 
  2604  0E0F                     	;# 
  2605  0E10                     	;# 
  2606  0E11                     	;# 
  2607  0E12                     	;# 
  2608  0E13                     	;# 
  2609  0E14                     	;# 
  2610  0E15                     	;# 
  2611  0E17                     	;# 
  2612  0E20                     	;# 
  2613  0E21                     	;# 
  2614  0E22                     	;# 
  2615  0E24                     	;# 
  2616  0E25                     	;# 
  2617  0E28                     	;# 
  2618  0E29                     	;# 
  2619  0E2A                     	;# 
  2620  0E2B                     	;# 
  2621  0E90                     	;# 
  2622  0E91                     	;# 
  2623  0E92                     	;# 
  2624  0E94                     	;# 
  2625  0E95                     	;# 
  2626  0EA0                     	;# 
  2627  0EA1                     	;# 
  2628  0EA2                     	;# 
  2629  0EA3                     	;# 
  2630  0EA4                     	;# 
  2631  0EA5                     	;# 
  2632  0F0F                     	;# 
  2633  0F10                     	;# 
  2634  0F11                     	;# 
  2635  0F12                     	;# 
  2636  0F13                     	;# 
  2637  0F14                     	;# 
  2638  0F15                     	;# 
  2639  0F16                     	;# 
  2640  0F17                     	;# 
  2641  0F18                     	;# 
  2642  0F19                     	;# 
  2643  0F1A                     	;# 
  2644  0F1B                     	;# 
  2645  0F1C                     	;# 
  2646  0F1D                     	;# 
  2647  0F1E                     	;# 
  2648  0F1F                     	;# 
  2649  0F20                     	;# 
  2650  0F21                     	;# 
  2651  0F22                     	;# 
  2652  0F23                     	;# 
  2653  0F24                     	;# 
  2654  0F25                     	;# 
  2655  0F26                     	;# 
  2656  0F27                     	;# 
  2657  0F28                     	;# 
  2658  0F29                     	;# 
  2659  0F2A                     	;# 
  2660  0F2B                     	;# 
  2661  0F2C                     	;# 
  2662  0F2D                     	;# 
  2663  0F9E                     	;# 
  2664  0FE4                     	;# 
  2665  0FE5                     	;# 
  2666  0FE6                     	;# 
  2667  0FE7                     	;# 
  2668  0FE8                     	;# 
  2669  0FE9                     	;# 
  2670  0FEA                     	;# 
  2671  0FEB                     	;# 
  2672  0FED                     	;# 
  2673  0FEE                     	;# 
  2674  0FEF                     	;# 
  2675                           
  2676                           	psect	idataBANK1
  2677  18AE                     __pidataBANK1:	
  2678                           
  2679                           ;initializer for _MEM
  2680  18AE  3400               	retlw	0
  2681  18AF  3400               	retlw	0
  2682  18B0  3480               	retlw	128
  2683  18B1  3425               	retlw	37
  2684                           
  2685                           	psect	idataBANK4
  2686  18AA                     __pidataBANK4:	
  2687                           
  2688                           ;initializer for _BAUD
  2689  18AA  3480               	retlw	128
  2690  18AB  3425               	retlw	37
  2691  18AC  3400               	retlw	0
  2692  18AD  3400               	retlw	0
  2693                           
  2694                           	psect	stringtext
  2695  0700                     __pstringtext:	
  2696  0700                     _ScanCodeFunctionNoE0:	
  2697  0700  3400               	retlw	0
  2698  0701  3411               	retlw	17
  2699  0702  3400               	retlw	0
  2700  0703  340C               	retlw	12
  2701  0704  340A               	retlw	10
  2702  0705  3406               	retlw	6
  2703  0706  3407               	retlw	7
  2704  0707  3414               	retlw	20
  2705  0708  3400               	retlw	0
  2706  0709  3412               	retlw	18
  2707  070A  3410               	retlw	16
  2708  070B  340E               	retlw	14
  2709  070C  340B               	retlw	11
  2710  070D  3400               	retlw	0
  2711  070E  3400               	retlw	0
  2712  070F  3400               	retlw	0
  2713  0710  3400               	retlw	0
  2714  0711  341C               	retlw	28
  2715  0712  3400               	retlw	0
  2716  0713  3400               	retlw	0
  2717  0714  341A               	retlw	26
  2718  0715  3400               	retlw	0
  2719  0716  3400               	retlw	0
  2720  0717  3400               	retlw	0
  2721  0718  3400               	retlw	0
  2722  0719  3400               	retlw	0
  2723  071A  3400               	retlw	0
  2724  071B  3400               	retlw	0
  2725  071C  3400               	retlw	0
  2726  071D  3400               	retlw	0
  2727  071E  3400               	retlw	0
  2728  071F  3400               	retlw	0
  2729  0720  3400               	retlw	0
  2730  0721  3400               	retlw	0
  2731  0722  3400               	retlw	0
  2732  0723  3400               	retlw	0
  2733  0724  3400               	retlw	0
  2734  0725  3400               	retlw	0
  2735  0726  3400               	retlw	0
  2736  0727  3400               	retlw	0
  2737  0728  3400               	retlw	0
  2738  0729  3400               	retlw	0
  2739  072A  3400               	retlw	0
  2740  072B  3400               	retlw	0
  2741  072C  3400               	retlw	0
  2742  072D  3400               	retlw	0
  2743  072E  3400               	retlw	0
  2744  072F  3400               	retlw	0
  2745  0730  3400               	retlw	0
  2746  0731  3400               	retlw	0
  2747  0732  3400               	retlw	0
  2748  0733  3400               	retlw	0
  2749  0734  3400               	retlw	0
  2750  0735  3400               	retlw	0
  2751  0736  3400               	retlw	0
  2752  0737  3400               	retlw	0
  2753  0738  3400               	retlw	0
  2754  0739  3400               	retlw	0
  2755  073A  3400               	retlw	0
  2756  073B  3400               	retlw	0
  2757  073C  3400               	retlw	0
  2758  073D  3400               	retlw	0
  2759  073E  3400               	retlw	0
  2760  073F  3400               	retlw	0
  2761  0740  3400               	retlw	0
  2762  0741  3400               	retlw	0
  2763  0742  3400               	retlw	0
  2764  0743  3400               	retlw	0
  2765  0744  3400               	retlw	0
  2766  0745  3400               	retlw	0
  2767  0746  3400               	retlw	0
  2768  0747  3400               	retlw	0
  2769  0748  3400               	retlw	0
  2770  0749  3400               	retlw	0
  2771  074A  3400               	retlw	0
  2772  074B  3400               	retlw	0
  2773  074C  3400               	retlw	0
  2774  074D  3400               	retlw	0
  2775  074E  3400               	retlw	0
  2776  074F  3400               	retlw	0
  2777  0750  3400               	retlw	0
  2778  0751  3400               	retlw	0
  2779  0752  3400               	retlw	0
  2780  0753  3400               	retlw	0
  2781  0754  3400               	retlw	0
  2782  0755  3400               	retlw	0
  2783  0756  3400               	retlw	0
  2784  0757  3400               	retlw	0
  2785  0758  3400               	retlw	0
  2786  0759  3400               	retlw	0
  2787  075A  3400               	retlw	0
  2788  075B  3400               	retlw	0
  2789  075C  3400               	retlw	0
  2790  075D  3400               	retlw	0
  2791  075E  3400               	retlw	0
  2792  075F  3400               	retlw	0
  2793  0760  3400               	retlw	0
  2794  0761  3400               	retlw	0
  2795  0762  3400               	retlw	0
  2796  0763  3400               	retlw	0
  2797  0764  3400               	retlw	0
  2798  0765  3400               	retlw	0
  2799  0766  3400               	retlw	0
  2800  0767  3400               	retlw	0
  2801  0768  3400               	retlw	0
  2802  0769  3400               	retlw	0
  2803  076A  3400               	retlw	0
  2804  076B  3400               	retlw	0
  2805  076C  3400               	retlw	0
  2806  076D  3400               	retlw	0
  2807  076E  3400               	retlw	0
  2808  076F  3400               	retlw	0
  2809  0770  3400               	retlw	0
  2810  0771  3400               	retlw	0
  2811  0772  3400               	retlw	0
  2812  0773  3400               	retlw	0
  2813  0774  3400               	retlw	0
  2814  0775  3400               	retlw	0
  2815  0776  3400               	retlw	0
  2816  0777  3400               	retlw	0
  2817  0778  3413               	retlw	19
  2818  0779  3400               	retlw	0
  2819  077A  3400               	retlw	0
  2820  077B  3400               	retlw	0
  2821  077C  3400               	retlw	0
  2822  077D  3400               	retlw	0
  2823  077E  3400               	retlw	0
  2824  077F  3400               	retlw	0
  2825  0780  3400               	retlw	0
  2826  0781  3400               	retlw	0
  2827  0782  3400               	retlw	0
  2828  0783  340F               	retlw	15
  2829  0784                     __end_of_ScanCodeFunctionNoE0:	
  2830  0784                     _ScanCode:	
  2831  0784  3409               	retlw	9
  2832  0785  3460               	retlw	96
  2833  0786  3400               	retlw	0
  2834  0787  3400               	retlw	0
  2835  0788  3400               	retlw	0
  2836  0789  3400               	retlw	0
  2837  078A  3400               	retlw	0
  2838  078B  3400               	retlw	0
  2839  078C  3471               	retlw	113
  2840  078D  3431               	retlw	49
  2841  078E  3400               	retlw	0
  2842  078F  3400               	retlw	0
  2843  0790  3400               	retlw	0
  2844  0791  347A               	retlw	122
  2845  0792  3473               	retlw	115
  2846  0793  3461               	retlw	97
  2847  0794  3477               	retlw	119
  2848  0795  3432               	retlw	50
  2849  0796  3400               	retlw	0
  2850  0797  3400               	retlw	0
  2851  0798  3463               	retlw	99
  2852  0799  3478               	retlw	120
  2853  079A  3464               	retlw	100
  2854  079B  3465               	retlw	101
  2855  079C  3434               	retlw	52
  2856  079D  3433               	retlw	51
  2857  079E  3400               	retlw	0
  2858  079F  3400               	retlw	0
  2859  07A0  3420               	retlw	32
  2860  07A1  3476               	retlw	118
  2861  07A2  3466               	retlw	102
  2862  07A3  3474               	retlw	116
  2863  07A4  3472               	retlw	114
  2864  07A5  3435               	retlw	53
  2865  07A6  3400               	retlw	0
  2866  07A7  3400               	retlw	0
  2867  07A8  346E               	retlw	110
  2868  07A9  3462               	retlw	98
  2869  07AA  3468               	retlw	104
  2870  07AB  3467               	retlw	103
  2871  07AC  3479               	retlw	121
  2872  07AD  3436               	retlw	54
  2873  07AE  3400               	retlw	0
  2874  07AF  3400               	retlw	0
  2875  07B0  3400               	retlw	0
  2876  07B1  346D               	retlw	109
  2877  07B2  346A               	retlw	106
  2878  07B3  3475               	retlw	117
  2879  07B4  3437               	retlw	55
  2880  07B5  3438               	retlw	56
  2881  07B6  3400               	retlw	0
  2882  07B7  3400               	retlw	0
  2883  07B8  342C               	retlw	44
  2884  07B9  346B               	retlw	107
  2885  07BA  3469               	retlw	105
  2886  07BB  346F               	retlw	111
  2887  07BC  3430               	retlw	48
  2888  07BD  3439               	retlw	57
  2889  07BE  3400               	retlw	0
  2890  07BF  3400               	retlw	0
  2891  07C0  342E               	retlw	46
  2892  07C1  342F               	retlw	47
  2893  07C2  346C               	retlw	108
  2894  07C3  343B               	retlw	59
  2895  07C4  3470               	retlw	112
  2896  07C5  342D               	retlw	45
  2897  07C6  3400               	retlw	0
  2898  07C7  3400               	retlw	0
  2899  07C8  3400               	retlw	0
  2900  07C9  3427               	retlw	39
  2901  07CA  3400               	retlw	0
  2902  07CB  345B               	retlw	91
  2903  07CC  343D               	retlw	61
  2904  07CD  3400               	retlw	0
  2905  07CE  3400               	retlw	0
  2906  07CF  3400               	retlw	0
  2907  07D0  3400               	retlw	0
  2908  07D1  340D               	retlw	13
  2909  07D2  345D               	retlw	93
  2910  07D3  3400               	retlw	0
  2911  07D4  345C               	retlw	92
  2912  07D5  3400               	retlw	0
  2913  07D6  3400               	retlw	0
  2914  07D7  3400               	retlw	0
  2915  07D8  3400               	retlw	0
  2916  07D9  3400               	retlw	0
  2917  07DA  3400               	retlw	0
  2918  07DB  3400               	retlw	0
  2919  07DC  3400               	retlw	0
  2920  07DD  3408               	retlw	8
  2921  07DE  3400               	retlw	0
  2922  07DF  3400               	retlw	0
  2923  07E0  3431               	retlw	49
  2924  07E1  3400               	retlw	0
  2925  07E2  3434               	retlw	52
  2926  07E3  3437               	retlw	55
  2927  07E4  3400               	retlw	0
  2928  07E5  3400               	retlw	0
  2929  07E6  3400               	retlw	0
  2930  07E7  3430               	retlw	48
  2931  07E8  342E               	retlw	46
  2932  07E9  3432               	retlw	50
  2933  07EA  3435               	retlw	53
  2934  07EB  3436               	retlw	54
  2935  07EC  3438               	retlw	56
  2936  07ED  341B               	retlw	27
  2937  07EE  3400               	retlw	0
  2938  07EF  3400               	retlw	0
  2939  07F0  342B               	retlw	43
  2940  07F1  3433               	retlw	51
  2941  07F2  342D               	retlw	45
  2942  07F3  342A               	retlw	42
  2943  07F4  3439               	retlw	57
  2944  07F5                     __end_of_ScanCode:	
  2945  07F5                     _ScanCodeSHIFT:	
  2946  07F5  3409               	retlw	9
  2947  07F6  347E               	retlw	126
  2948  07F7  3400               	retlw	0
  2949  07F8  3400               	retlw	0
  2950  07F9  3400               	retlw	0
  2951  07FA  3400               	retlw	0
  2952  07FB  3400               	retlw	0
  2953  07FC  3400               	retlw	0
  2954  07FD  3451               	retlw	81
  2955  07FE  3421               	retlw	33
  2956  07FF  3400               	retlw	0
  2957  0800  3400               	retlw	0
  2958  0801  3400               	retlw	0
  2959  0802  345A               	retlw	90
  2960  0803  3453               	retlw	83
  2961  0804  3441               	retlw	65
  2962  0805  3457               	retlw	87
  2963  0806  3440               	retlw	64
  2964  0807  3400               	retlw	0
  2965  0808  3400               	retlw	0
  2966  0809  3443               	retlw	67
  2967  080A  3458               	retlw	88
  2968  080B  3444               	retlw	68
  2969  080C  3445               	retlw	69
  2970  080D  3424               	retlw	36
  2971  080E  3423               	retlw	35
  2972  080F  3400               	retlw	0
  2973  0810  3400               	retlw	0
  2974  0811  3420               	retlw	32
  2975  0812  3456               	retlw	86
  2976  0813  3446               	retlw	70
  2977  0814  3454               	retlw	84
  2978  0815  3452               	retlw	82
  2979  0816  3425               	retlw	37
  2980  0817  3400               	retlw	0
  2981  0818  3400               	retlw	0
  2982  0819  344E               	retlw	78
  2983  081A  3442               	retlw	66
  2984  081B  3448               	retlw	72
  2985  081C  3447               	retlw	71
  2986  081D  3459               	retlw	89
  2987  081E  345E               	retlw	94
  2988  081F  3400               	retlw	0
  2989  0820  3400               	retlw	0
  2990  0821  3400               	retlw	0
  2991  0822  344D               	retlw	77
  2992  0823  344A               	retlw	74
  2993  0824  3455               	retlw	85
  2994  0825  3426               	retlw	38
  2995  0826  342A               	retlw	42
  2996  0827  3400               	retlw	0
  2997  0828  3400               	retlw	0
  2998  0829  343C               	retlw	60
  2999  082A  344B               	retlw	75
  3000  082B  3449               	retlw	73
  3001  082C  344F               	retlw	79
  3002  082D  3429               	retlw	41
  3003  082E  3428               	retlw	40
  3004  082F  3400               	retlw	0
  3005  0830  3400               	retlw	0
  3006  0831  343E               	retlw	62
  3007  0832  343F               	retlw	63
  3008  0833  344C               	retlw	76
  3009  0834  343A               	retlw	58
  3010  0835  3450               	retlw	80
  3011  0836  345F               	retlw	95
  3012  0837  3400               	retlw	0
  3013  0838  3400               	retlw	0
  3014  0839  3400               	retlw	0
  3015  083A  3422               	retlw	34
  3016  083B  3400               	retlw	0
  3017  083C  347B               	retlw	123
  3018  083D  342B               	retlw	43
  3019  083E  3400               	retlw	0
  3020  083F  3400               	retlw	0
  3021  0840  3400               	retlw	0
  3022  0841  3400               	retlw	0
  3023  0842  340D               	retlw	13
  3024  0843  347D               	retlw	125
  3025  0844  3400               	retlw	0
  3026  0845  347C               	retlw	124
  3027  0846  3400               	retlw	0
  3028  0847  3400               	retlw	0
  3029  0848  3400               	retlw	0
  3030  0849  3400               	retlw	0
  3031  084A  3400               	retlw	0
  3032  084B  3400               	retlw	0
  3033  084C  3400               	retlw	0
  3034  084D  3400               	retlw	0
  3035  084E  3408               	retlw	8
  3036  084F  3400               	retlw	0
  3037  0850  3400               	retlw	0
  3038  0851  3431               	retlw	49
  3039  0852  3400               	retlw	0
  3040  0853  3434               	retlw	52
  3041  0854  3437               	retlw	55
  3042  0855  3400               	retlw	0
  3043  0856  3400               	retlw	0
  3044  0857  3400               	retlw	0
  3045  0858  3430               	retlw	48
  3046  0859  342E               	retlw	46
  3047  085A  3432               	retlw	50
  3048  085B  3435               	retlw	53
  3049  085C  3436               	retlw	54
  3050  085D  3438               	retlw	56
  3051  085E  341B               	retlw	27
  3052  085F  3400               	retlw	0
  3053  0860  3400               	retlw	0
  3054  0861  342B               	retlw	43
  3055  0862  3433               	retlw	51
  3056  0863  342D               	retlw	45
  3057  0864  342A               	retlw	42
  3058  0865  3439               	retlw	57
  3059  0866                     __end_of_ScanCodeSHIFT:	
  3060  0866                     _ScanCodeFunctionE0:	
  3061  0866  341E               	retlw	30
  3062  0867  3400               	retlw	0
  3063  0868  3400               	retlw	0
  3064  0869  341F               	retlw	31
  3065  086A  3400               	retlw	0
  3066  086B  3400               	retlw	0
  3067  086C  3400               	retlw	0
  3068  086D  3400               	retlw	0
  3069  086E  3400               	retlw	0
  3070  086F  3400               	retlw	0
  3071  0870  3400               	retlw	0
  3072  0871  3400               	retlw	0
  3073  0872  3400               	retlw	0
  3074  0873  3400               	retlw	0
  3075  0874  3419               	retlw	25
  3076  0875  3400               	retlw	0
  3077  0876  3400               	retlw	0
  3078  0877  3400               	retlw	0
  3079  0878  3400               	retlw	0
  3080  0879  3400               	retlw	0
  3081  087A  3400               	retlw	0
  3082  087B  3400               	retlw	0
  3083  087C  341D               	retlw	29
  3084  087D  3400               	retlw	0
  3085  087E  3400               	retlw	0
  3086  087F  3400               	retlw	0
  3087  0880  3400               	retlw	0
  3088  0881  3400               	retlw	0
  3089  0882  3400               	retlw	0
  3090  0883  3400               	retlw	0
  3091  0884  3400               	retlw	0
  3092  0885  3400               	retlw	0
  3093  0886  3400               	retlw	0
  3094  0887  3400               	retlw	0
  3095  0888  3400               	retlw	0
  3096  0889  3400               	retlw	0
  3097  088A  3400               	retlw	0
  3098  088B  3400               	retlw	0
  3099  088C  3400               	retlw	0
  3100  088D  3400               	retlw	0
  3101  088E  3400               	retlw	0
  3102  088F  3400               	retlw	0
  3103  0890  3400               	retlw	0
  3104  0891  3400               	retlw	0
  3105  0892  3400               	retlw	0
  3106  0893  3400               	retlw	0
  3107  0894  3400               	retlw	0
  3108  0895  3400               	retlw	0
  3109  0896  3400               	retlw	0
  3110  0897  3400               	retlw	0
  3111  0898  3400               	retlw	0
  3112  0899  3400               	retlw	0
  3113  089A  3400               	retlw	0
  3114  089B  3400               	retlw	0
  3115  089C  3400               	retlw	0
  3116  089D  3400               	retlw	0
  3117  089E  3400               	retlw	0
  3118  089F  342F               	retlw	47
  3119  08A0  3400               	retlw	0
  3120  08A1  3400               	retlw	0
  3121  08A2  3400               	retlw	0
  3122  08A3  3400               	retlw	0
  3123  08A4  3400               	retlw	0
  3124  08A5  3400               	retlw	0
  3125  08A6  3400               	retlw	0
  3126  08A7  3400               	retlw	0
  3127  08A8  3400               	retlw	0
  3128  08A9  3400               	retlw	0
  3129  08AA  3400               	retlw	0
  3130  08AB  3400               	retlw	0
  3131  08AC  3400               	retlw	0
  3132  08AD  3400               	retlw	0
  3133  08AE  3400               	retlw	0
  3134  08AF  340D               	retlw	13
  3135  08B0  3400               	retlw	0
  3136  08B1  3400               	retlw	0
  3137  08B2  3400               	retlw	0
  3138  08B3  3400               	retlw	0
  3139  08B4  3400               	retlw	0
  3140  08B5  3400               	retlw	0
  3141  08B6  3400               	retlw	0
  3142  08B7  3400               	retlw	0
  3143  08B8  3400               	retlw	0
  3144  08B9  3400               	retlw	0
  3145  08BA  3400               	retlw	0
  3146  08BB  3400               	retlw	0
  3147  08BC  3400               	retlw	0
  3148  08BD  3400               	retlw	0
  3149  08BE  3401               	retlw	1
  3150  08BF  3400               	retlw	0
  3151  08C0  3403               	retlw	3
  3152  08C1  3416               	retlw	22
  3153  08C2  3400               	retlw	0
  3154  08C3  3400               	retlw	0
  3155  08C4  3400               	retlw	0
  3156  08C5  3415               	retlw	21
  3157  08C6  347F               	retlw	127
  3158  08C7  3404               	retlw	4
  3159  08C8  3400               	retlw	0
  3160  08C9  3405               	retlw	5
  3161  08CA  3402               	retlw	2
  3162  08CB  3400               	retlw	0
  3163  08CC  3400               	retlw	0
  3164  08CD  3400               	retlw	0
  3165  08CE  3400               	retlw	0
  3166  08CF  3418               	retlw	24
  3167  08D0  3400               	retlw	0
  3168  08D1  3400               	retlw	0
  3169  08D2  3417               	retlw	23
  3170  08D3                     __end_of_ScanCodeFunctionE0:	
  3171  08D3                     _dpowers:	
  3172  08D3  3401               	retlw	1
  3173  08D4  3400               	retlw	0
  3174  08D5  3400               	retlw	0
  3175  08D6  3400               	retlw	0
  3176  08D7  340A               	retlw	10
  3177  08D8  3400               	retlw	0
  3178  08D9  3400               	retlw	0
  3179  08DA  3400               	retlw	0
  3180  08DB  3464               	retlw	100
  3181  08DC  3400               	retlw	0
  3182  08DD  3400               	retlw	0
  3183  08DE  3400               	retlw	0
  3184  08DF  34E8               	retlw	232
  3185  08E0  3403               	retlw	3
  3186  08E1  3400               	retlw	0
  3187  08E2  3400               	retlw	0
  3188  08E3  3410               	retlw	16
  3189  08E4  3427               	retlw	39
  3190  08E5  3400               	retlw	0
  3191  08E6  3400               	retlw	0
  3192  08E7  34A0               	retlw	160
  3193  08E8  3486               	retlw	134
  3194  08E9  3401               	retlw	1
  3195  08EA  3400               	retlw	0
  3196  08EB  3440               	retlw	64
  3197  08EC  3442               	retlw	66
  3198  08ED  340F               	retlw	15
  3199  08EE  3400               	retlw	0
  3200  08EF  3480               	retlw	128
  3201  08F0  3496               	retlw	150
  3202  08F1  3498               	retlw	152
  3203  08F2  3400               	retlw	0
  3204  08F3  3400               	retlw	0
  3205  08F4  34E1               	retlw	225
  3206  08F5  34F5               	retlw	245
  3207  08F6  3405               	retlw	5
  3208  08F7  3400               	retlw	0
  3209  08F8  34CA               	retlw	202
  3210  08F9  349A               	retlw	154
  3211  08FA  343B               	retlw	59
  3212  08FB                     __end_of_dpowers:	
  3213  08FB                     _EvenParityMSG:	
  3214  08FB  3420               	retlw	32
  3215  08FC  3477               	retlw	119
  3216  08FD  3469               	retlw	105
  3217  08FE  3474               	retlw	116
  3218  08FF  3468               	retlw	104
  3219  0900  3420               	retlw	32
  3220  0901  3445               	retlw	69
  3221  0902  3476               	retlw	118
  3222  0903  3465               	retlw	101
  3223  0904  346E               	retlw	110
  3224  0905  3420               	retlw	32
  3225  0906  3470               	retlw	112
  3226  0907  3461               	retlw	97
  3227  0908  3472               	retlw	114
  3228  0909  3469               	retlw	105
  3229  090A  3474               	retlw	116
  3230  090B  3479               	retlw	121
  3231  090C  3420               	retlw	32
  3232  090D  3462               	retlw	98
  3233  090E  3469               	retlw	105
  3234  090F  3474               	retlw	116
  3235  0910  3400               	retlw	0
  3236  0911                     __end_of_EvenParityMSG:	
  3237  0911                     _OddParityMSG:	
  3238  0911  3420               	retlw	32
  3239  0912  3477               	retlw	119
  3240  0913  3469               	retlw	105
  3241  0914  3474               	retlw	116
  3242  0915  3468               	retlw	104
  3243  0916  3420               	retlw	32
  3244  0917  344F               	retlw	79
  3245  0918  3464               	retlw	100
  3246  0919  3464               	retlw	100
  3247  091A  3420               	retlw	32
  3248  091B  3470               	retlw	112
  3249  091C  3461               	retlw	97
  3250  091D  3472               	retlw	114
  3251  091E  3469               	retlw	105
  3252  091F  3474               	retlw	116
  3253  0920  3479               	retlw	121
  3254  0921  3420               	retlw	32
  3255  0922  3462               	retlw	98
  3256  0923  3469               	retlw	105
  3257  0924  3474               	retlw	116
  3258  0925  3400               	retlw	0
  3259  0926                     __end_of_OddParityMSG:	
  3260  0926                     _NoParityMSG:	
  3261  0926  3420               	retlw	32
  3262  0927  3477               	retlw	119
  3263  0928  3469               	retlw	105
  3264  0929  3474               	retlw	116
  3265  092A  3468               	retlw	104
  3266  092B  3420               	retlw	32
  3267  092C  344E               	retlw	78
  3268  092D  346F               	retlw	111
  3269  092E  3420               	retlw	32
  3270  092F  3470               	retlw	112
  3271  0930  3461               	retlw	97
  3272  0931  3472               	retlw	114
  3273  0932  3469               	retlw	105
  3274  0933  3474               	retlw	116
  3275  0934  3479               	retlw	121
  3276  0935  3420               	retlw	32
  3277  0936  3462               	retlw	98
  3278  0937  3469               	retlw	105
  3279  0938  3474               	retlw	116
  3280  0939  3400               	retlw	0
  3281  093A                     __end_of_NoParityMSG:	
  3282  093A                     _SpaceParityMSG:	
  3283  093A  3420               	retlw	32
  3284  093B  3477               	retlw	119
  3285  093C  3469               	retlw	105
  3286  093D  3474               	retlw	116
  3287  093E  3468               	retlw	104
  3288  093F  3420               	retlw	32
  3289  0940  3453               	retlw	83
  3290  0941  3470               	retlw	112
  3291  0942  3461               	retlw	97
  3292  0943  3463               	retlw	99
  3293  0944  3465               	retlw	101
  3294  0945  3420               	retlw	32
  3295  0946  3462               	retlw	98
  3296  0947  3469               	retlw	105
  3297  0948  3474               	retlw	116
  3298  0949  3400               	retlw	0
  3299  094A                     __end_of_SpaceParityMSG:	
  3300  094A                     _MarkParityMSG:	
  3301  094A  3420               	retlw	32
  3302  094B  3477               	retlw	119
  3303  094C  3469               	retlw	105
  3304  094D  3474               	retlw	116
  3305  094E  3468               	retlw	104
  3306  094F  3420               	retlw	32
  3307  0950  344D               	retlw	77
  3308  0951  3461               	retlw	97
  3309  0952  3472               	retlw	114
  3310  0953  346B               	retlw	107
  3311  0954  3420               	retlw	32
  3312  0955  3462               	retlw	98
  3313  0956  3469               	retlw	105
  3314  0957  3474               	retlw	116
  3315  0958  3400               	retlw	0
  3316  0959                     __end_of_MarkParityMSG:	
  3317  0959                     _VoltageMSG:	
  3318  0959  3456               	retlw	86
  3319  095A  346F               	retlw	111
  3320  095B  346C               	retlw	108
  3321  095C  3474               	retlw	116
  3322  095D  3461               	retlw	97
  3323  095E  3467               	retlw	103
  3324  095F  3465               	retlw	101
  3325  0960  3420               	retlw	32
  3326  0961  3474               	retlw	116
  3327  0962  346F               	retlw	111
  3328  0963  346F               	retlw	111
  3329  0964  3420               	retlw	32
  3330  0965  3400               	retlw	0
  3331  0966                     __end_of_VoltageMSG:	
  3332  0966                     _Version:	
  3333  0966  3431               	retlw	49
  3334  0967  342E               	retlw	46
  3335  0968  3433               	retlw	51
  3336  0969  345F               	retlw	95
  3337  096A  3444               	retlw	68
  3338  096B  3457               	retlw	87
  3339  096C  3430               	retlw	48
  3340  096D  3400               	retlw	0
  3341  096E                     __end_of_Version:	
  3342  000B                     _INTCON	set	11
  3343  000B                     _INTCONbits	set	11
  3344  0011                     _PIR1bits	set	17
  3345  000C                     _PORTA	set	12
  3346  000E                     _PORTC	set	14
  3347  001B                     _PR2	set	27
  3348  001C                     _T2CON	set	28
  3349  001C                     _T2CONbits	set	28
  3350  001A                     _TMR2	set	26
  3351  009D                     _ADCON0	set	157
  3352  009E                     _ADCON1	set	158
  3353  009F                     _ADCON2	set	159
  3354  009C                     _ADRESH	set	156
  3355  009B                     _ADRESL	set	155
  3356  0095                     _OPTION_REGbits	set	149
  3357  0099                     _OSCCON	set	153
  3358  009A                     _OSCSTAT	set	154
  3359  0091                     _PIE1	set	145
  3360  0091                     _PIE1bits	set	145
  3361  008C                     _TRISAbits	set	140
  3362  008E                     _TRISCbits	set	142
  3363  04D0                     _HFIOFS	set	1232
  3364  0117                     _FVRCON	set	279
  3365  010C                     _LATA	set	268
  3366  010E                     _LATC	set	270
  3367  018C                     _ANSELA	set	396
  3368  018E                     _ANSELC	set	398
  3369  019F                     _BAUD1CON	set	415
  3370  0192                     _PMADRH	set	402
  3371  0191                     _PMADRL	set	401
  3372  0195                     _PMCON1	set	405
  3373  0196                     _PMCON2	set	406
  3374  0194                     _PMDATH	set	404
  3375  0193                     _PMDATL	set	403
  3376  019D                     _RC1STA	set	413
  3377  019D                     _RC1STAbits	set	413
  3378  0199                     _RCREG	set	409
  3379  019D                     _RCSTA	set	413
  3380  019D                     _RCSTAbits	set	413
  3381  019B                     _SPBRG	set	411
  3382  019C                     _SPBRGH	set	412
  3383  019E                     _TX1STA	set	414
  3384  019E                     _TX1STAbits	set	414
  3385  019A                     _TXREG	set	410
  3386  019E                     _TXSTAbits	set	414
  3387  020C                     _WPUA	set	524
  3388  020E                     _WPUC	set	526
  3389  029A                     _CCP2CONbits	set	666
  3390  0393                     _IOCAF	set	915
  3391  0392                     _IOCAN	set	914
  3392  0391                     _IOCAP	set	913
  3393  0E25                     _CKPPS	set	3621
  3394  0E0F                     _PPSLOCK	set	3599
  3395  0E24                     _RXPPS	set	3620
  3396  0EA2                     _RC2PPS	set	3746
  3397  096E                     __stringdata:	
  3398  096E                     STR_6:	
  3399  096E  3454               	retlw	84	;'T'
  3400  096F  346F               	retlw	111	;'o'
  3401  0970  3420               	retlw	32	;' '
  3402  0971  3443               	retlw	67	;'C'
  3403  0972  3468               	retlw	104	;'h'
  3404  0973  3461               	retlw	97	;'a'
  3405  0974  346E               	retlw	110	;'n'
  3406  0975  3467               	retlw	103	;'g'
  3407  0976  3465               	retlw	101	;'e'
  3408  0977  3420               	retlw	32	;' '
  3409  0978  3442               	retlw	66	;'B'
  3410  0979  3441               	retlw	65	;'A'
  3411  097A  3455               	retlw	85	;'U'
  3412  097B  3444               	retlw	68	;'D'
  3413  097C  3420               	retlw	32	;' '
  3414  097D  3468               	retlw	104	;'h'
  3415  097E  3469               	retlw	105	;'i'
  3416  097F  3474               	retlw	116	;'t'
  3417  0980  3420               	retlw	32	;' '
  3418  0981  3422               	retlw	34	;'"'
  3419  0982  3443               	retlw	67	;'C'
  3420  0983  344E               	retlw	78	;'N'
  3421  0984  3454               	retlw	84	;'T'
  3422  0985  3420               	retlw	32	;' '
  3423  0986  342B               	retlw	43	;'+'
  3424  0987  3420               	retlw	32	;' '
  3425  0988  3441               	retlw	65	;'A'
  3426  0989  344C               	retlw	76	;'L'
  3427  098A  3454               	retlw	84	;'T'
  3428  098B  3420               	retlw	32	;' '
  3429  098C  342B               	retlw	43	;'+'
  3430  098D  3420               	retlw	32	;' '
  3431  098E  3444               	retlw	68	;'D'
  3432  098F  3445               	retlw	69	;'E'
  3433  0990  344C               	retlw	76	;'L'
  3434  0991  3422               	retlw	34	;'"'
  3435  0992  340D               	retlw	13
  3436  0993  340A               	retlw	10
  3437  0994  3400               	retlw	0
  3438  0995                     STR_19:	
  3439  0995  344B               	retlw	75	;'K'
  3440  0996  3465               	retlw	101	;'e'
  3441  0997  3479               	retlw	121	;'y'
  3442  0998  3442               	retlw	66	;'B'
  3443  0999  346F               	retlw	111	;'o'
  3444  099A  3461               	retlw	97	;'a'
  3445  099B  3472               	retlw	114	;'r'
  3446  099C  3464               	retlw	100	;'d'
  3447  099D  3420               	retlw	32	;' '
  3448  099E  3442               	retlw	66	;'B'
  3449  099F  3461               	retlw	97	;'a'
  3450  09A0  3475               	retlw	117	;'u'
  3451  09A1  3464               	retlw	100	;'d'
  3452  09A2  3420               	retlw	32	;' '
  3453  09A3  3477               	retlw	119	;'w'
  3454  09A4  3469               	retlw	105	;'i'
  3455  09A5  346C               	retlw	108	;'l'
  3456  09A6  346C               	retlw	108	;'l'
  3457  09A7  3420               	retlw	32	;' '
  3458  09A8  3462               	retlw	98	;'b'
  3459  09A9  3465               	retlw	101	;'e'
  3460  09AA  3420               	retlw	32	;' '
  3461  09AB  3473               	retlw	115	;'s'
  3462  09AC  3465               	retlw	101	;'e'
  3463  09AD  3474               	retlw	116	;'t'
  3464  09AE  3420               	retlw	32	;' '
  3465  09AF  3474               	retlw	116	;'t'
  3466  09B0  346F               	retlw	111	;'o'
  3467  09B1  3420               	retlw	32	;' '
  3468  09B2  3425               	retlw	37	;'%'
  3469  09B3  346C               	retlw	108	;'l'
  3470  09B4  3475               	retlw	117	;'u'
  3471  09B5  3400               	retlw	0
  3472  09B6                     STR_21:	
  3473  09B6  344B               	retlw	75	;'K'
  3474  09B7  3465               	retlw	101	;'e'
  3475  09B8  3479               	retlw	121	;'y'
  3476  09B9  3442               	retlw	66	;'B'
  3477  09BA  346F               	retlw	111	;'o'
  3478  09BB  3461               	retlw	97	;'a'
  3479  09BC  3472               	retlw	114	;'r'
  3480  09BD  3464               	retlw	100	;'d'
  3481  09BE  3420               	retlw	32	;' '
  3482  09BF  3442               	retlw	66	;'B'
  3483  09C0  3461               	retlw	97	;'a'
  3484  09C1  3475               	retlw	117	;'u'
  3485  09C2  3464               	retlw	100	;'d'
  3486  09C3  3420               	retlw	32	;' '
  3487  09C4  344F               	retlw	79	;'O'
  3488  09C5  3475               	retlw	117	;'u'
  3489  09C6  3474               	retlw	116	;'t'
  3490  09C7  3420               	retlw	32	;' '
  3491  09C8  346F               	retlw	111	;'o'
  3492  09C9  3466               	retlw	102	;'f'
  3493  09CA  3420               	retlw	32	;' '
  3494  09CB  3452               	retlw	82	;'R'
  3495  09CC  3461               	retlw	97	;'a'
  3496  09CD  346E               	retlw	110	;'n'
  3497  09CE  3467               	retlw	103	;'g'
  3498  09CF  3465               	retlw	101	;'e'
  3499  09D0  340D               	retlw	13
  3500  09D1  340A               	retlw	10
  3501  09D2  3400               	retlw	0
  3502  09D3                     STR_3:	
  3503  09D3  340D               	retlw	13
  3504  09D4  340A               	retlw	10
  3505  09D5  3450               	retlw	80	;'P'
  3506  09D6  3453               	retlw	83	;'S'
  3507  09D7  342F               	retlw	47	;'/'
  3508  09D8  3432               	retlw	50	;'2'
  3509  09D9  3420               	retlw	32	;' '
  3510  09DA  344B               	retlw	75	;'K'
  3511  09DB  3465               	retlw	101	;'e'
  3512  09DC  3479               	retlw	121	;'y'
  3513  09DD  3462               	retlw	98	;'b'
  3514  09DE  346F               	retlw	111	;'o'
  3515  09DF  3461               	retlw	97	;'a'
  3516  09E0  3472               	retlw	114	;'r'
  3517  09E1  3464               	retlw	100	;'d'
  3518  09E2  3420               	retlw	32	;' '
  3519  09E3  3474               	retlw	116	;'t'
  3520  09E4  346F               	retlw	111	;'o'
  3521  09E5  3420               	retlw	32	;' '
  3522  09E6  3452               	retlw	82	;'R'
  3523  09E7  3453               	retlw	83	;'S'
  3524  09E8  342D               	retlw	45	;'-'
  3525  09E9  3432               	retlw	50	;'2'
  3526  09EA  3433               	retlw	51	;'3'
  3527  09EB  3432               	retlw	50	;'2'
  3528  09EC  340D               	retlw	13
  3529  09ED  340A               	retlw	10
  3530  09EE  3400               	retlw	0
  3531  09EF                     STR_11:	
  3532  09EF  344B               	retlw	75	;'K'
  3533  09F0  3465               	retlw	101	;'e'
  3534  09F1  3479               	retlw	121	;'y'
  3535  09F2  3442               	retlw	66	;'B'
  3536  09F3  346F               	retlw	111	;'o'
  3537  09F4  3461               	retlw	97	;'a'
  3538  09F5  3472               	retlw	114	;'r'
  3539  09F6  3464               	retlw	100	;'d'
  3540  09F7  3420               	retlw	32	;' '
  3541  09F8  3450               	retlw	80	;'P'
  3542  09F9  3472               	retlw	114	;'r'
  3543  09FA  346F               	retlw	111	;'o'
  3544  09FB  3467               	retlw	103	;'g'
  3545  09FC  3472               	retlw	114	;'r'
  3546  09FD  3461               	retlw	97	;'a'
  3547  09FE  346D               	retlw	109	;'m'
  3548  09FF  3420               	retlw	32	;' '
  3549  0A00  3446               	retlw	70	;'F'
  3550  0A01  3461               	retlw	97	;'a'
  3551  0A02  3469               	retlw	105	;'i'
  3552  0A03  346C               	retlw	108	;'l'
  3553  0A04  340D               	retlw	13
  3554  0A05  340A               	retlw	10
  3555  0A06  3400               	retlw	0
  3556  0A07                     STR_16:	
  3557  0A07  344B               	retlw	75	;'K'
  3558  0A08  3465               	retlw	101	;'e'
  3559  0A09  3479               	retlw	121	;'y'
  3560  0A0A  3442               	retlw	66	;'B'
  3561  0A0B  346F               	retlw	111	;'o'
  3562  0A0C  3461               	retlw	97	;'a'
  3563  0A0D  3472               	retlw	114	;'r'
  3564  0A0E  3464               	retlw	100	;'d'
  3565  0A0F  3420               	retlw	32	;' '
  3566  0A10  3452               	retlw	82	;'R'
  3567  0A11  3465               	retlw	101	;'e'
  3568  0A12  3473               	retlw	115	;'s'
  3569  0A13  3465               	retlw	101	;'e'
  3570  0A14  3474               	retlw	116	;'t'
  3571  0A15  3420               	retlw	32	;' '
  3572  0A16  3474               	retlw	116	;'t'
  3573  0A17  346F               	retlw	111	;'o'
  3574  0A18  3420               	retlw	32	;' '
  3575  0A19  3439               	retlw	57	;'9'
  3576  0A1A  3436               	retlw	54	;'6'
  3577  0A1B  3430               	retlw	48	;'0'
  3578  0A1C  3430               	retlw	48	;'0'
  3579  0A1D  3400               	retlw	0
  3580  0A1E                     STR_8:	
  3581  0A1E  344B               	retlw	75	;'K'
  3582  0A1F  3465               	retlw	101	;'e'
  3583  0A20  3479               	retlw	121	;'y'
  3584  0A21  3442               	retlw	66	;'B'
  3585  0A22  346F               	retlw	111	;'o'
  3586  0A23  3461               	retlw	97	;'a'
  3587  0A24  3472               	retlw	114	;'r'
  3588  0A25  3464               	retlw	100	;'d'
  3589  0A26  3420               	retlw	32	;' '
  3590  0A27  3442               	retlw	66	;'B'
  3591  0A28  3461               	retlw	97	;'a'
  3592  0A29  3475               	retlw	117	;'u'
  3593  0A2A  3464               	retlw	100	;'d'
  3594  0A2B  3420               	retlw	32	;' '
  3595  0A2C  3469               	retlw	105	;'i'
  3596  0A2D  3473               	retlw	115	;'s'
  3597  0A2E  3420               	retlw	32	;' '
  3598  0A2F  3425               	retlw	37	;'%'
  3599  0A30  346C               	retlw	108	;'l'
  3600  0A31  3475               	retlw	117	;'u'
  3601  0A32  3400               	retlw	0
  3602  0A33                     STR_15:	
  3603  0A33  3445               	retlw	69	;'E'
  3604  0A34  346E               	retlw	110	;'n'
  3605  0A35  3474               	retlw	116	;'t'
  3606  0A36  3465               	retlw	101	;'e'
  3607  0A37  3472               	retlw	114	;'r'
  3608  0A38  3420               	retlw	32	;' '
  3609  0A39  3442               	retlw	66	;'B'
  3610  0A3A  3461               	retlw	97	;'a'
  3611  0A3B  3475               	retlw	117	;'u'
  3612  0A3C  3464               	retlw	100	;'d'
  3613  0A3D  3420               	retlw	32	;' '
  3614  0A3E  3472               	retlw	114	;'r'
  3615  0A3F  3461               	retlw	97	;'a'
  3616  0A40  3474               	retlw	116	;'t'
  3617  0A41  3465               	retlw	101	;'e'
  3618  0A42  3420               	retlw	32	;' '
  3619  0A43  340D               	retlw	13
  3620  0A44  340A               	retlw	10
  3621  0A45  3400               	retlw	0
  3622  0A46                     STR_4:	
  3623  0A46  3446               	retlw	70	;'F'
  3624  0A47  3469               	retlw	105	;'i'
  3625  0A48  3472               	retlw	114	;'r'
  3626  0A49  346D               	retlw	109	;'m'
  3627  0A4A  3477               	retlw	119	;'w'
  3628  0A4B  3461               	retlw	97	;'a'
  3629  0A4C  3472               	retlw	114	;'r'
  3630  0A4D  3465               	retlw	101	;'e'
  3631  0A4E  3420               	retlw	32	;' '
  3632  0A4F  3456               	retlw	86	;'V'
  3633  0A50  3465               	retlw	101	;'e'
  3634  0A51  3472               	retlw	114	;'r'
  3635  0A52  3473               	retlw	115	;'s'
  3636  0A53  3469               	retlw	105	;'i'
  3637  0A54  346F               	retlw	111	;'o'
  3638  0A55  346E               	retlw	110	;'n'
  3639  0A56  343A               	retlw	58	;':'
  3640  0A57  3420               	retlw	32	;' '
  3641  0A58  3400               	retlw	0
  3642  0A59                     STR_2:	
  3643  0A59  3448               	retlw	72	;'H'
  3644  0A5A  3469               	retlw	105	;'i'
  3645  0A5B  3467               	retlw	103	;'g'
  3646  0A5C  3468               	retlw	104	;'h'
  3647  0A5D  3421               	retlw	33	;'!'
  3648  0A5E  340D               	retlw	13
  3649  0A5F  340A               	retlw	10
  3650  0A60  3400               	retlw	0
  3651  0A61                     STR_1:	
  3652  0A61  344C               	retlw	76	;'L'
  3653  0A62  346F               	retlw	111	;'o'
  3654  0A63  3477               	retlw	119	;'w'
  3655  0A64  3421               	retlw	33	;'!'
  3656  0A65  340D               	retlw	13
  3657  0A66  340A               	retlw	10
  3658  0A67  3400               	retlw	0
  3659  0A68                     __end_of__stringdata:	
  3660                           
  3661                           ; #config settings
  3662  0000                     
  3663                           	psect	cinit
  3664  00E8                     start_initialization:	
  3665  00E8                     __initialization:	
  3666                           
  3667                           ; Clear objects allocated to BANK1
  3668  00E8  30C5               	movlw	low __pbssBANK1
  3669  00E9  0084               	movwf	4
  3670  00EA  3000               	movlw	high __pbssBANK1
  3671  00EB  0085               	movwf	5
  3672  00EC  301D               	movlw	29
  3673  00ED  3198  20C3  3180   	fcall	clear_ram0
  3674                           
  3675                           ; Clear objects allocated to BANK3
  3676  00F0  30E1               	movlw	low __pbssBANK3
  3677  00F1  0084               	movwf	4
  3678  00F2  3001               	movlw	high __pbssBANK3
  3679  00F3  0085               	movwf	5
  3680  00F4  300F               	movlw	15
  3681  00F5  3198  20C3  3180   	fcall	clear_ram0
  3682                           
  3683                           ; Clear objects allocated to BANK4
  3684  00F8  3057               	movlw	low __pbssBANK4
  3685  00F9  0084               	movwf	4
  3686  00FA  3002               	movlw	high __pbssBANK4
  3687  00FB  0085               	movwf	5
  3688  00FC  300A               	movlw	10
  3689  00FD  3198  20C3  3180   	fcall	clear_ram0
  3690                           
  3691                           ; Initialize objects allocated to BANK1
  3692  0100  30AE               	movlw	low __pidataBANK1
  3693  0101  0084               	movwf	4
  3694  0102  3098               	movlw	(high __pidataBANK1)| (0+128)
  3695  0103  0085               	movwf	5
  3696  0104  30E2               	movlw	low __pdataBANK1
  3697  0105  0086               	movwf	6
  3698  0106  3000               	movlw	high __pdataBANK1
  3699  0107  0087               	movwf	7
  3700  0108  3004               	movlw	4
  3701  0109  3198  20BD  3180   	fcall	init_ram
  3702                           
  3703                           ; Initialize objects allocated to BANK4
  3704  010C  30AA               	movlw	low __pidataBANK4
  3705  010D  0084               	movwf	4
  3706  010E  3098               	movlw	(high __pidataBANK4)| (0+128)
  3707  010F  0085               	movwf	5
  3708  0110  3061               	movlw	low __pdataBANK4
  3709  0111  0086               	movwf	6
  3710  0112  3002               	movlw	high __pdataBANK4
  3711  0113  0087               	movwf	7
  3712  0114  3004               	movlw	4
  3713  0115  3198  20BD         	fcall	init_ram
  3714  0117                     end_of_initialization:	
  3715                           ;End of C runtime variable initialization code
  3716                           
  3717  0117                     __end_of__initialization:	
  3718  0117  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  3719  0118  0020               	movlb	0
  3720  0119  318A  2A98         	ljmp	_main	;jump to C main() function
  3721                           
  3722                           	psect	bssBANK1
  3723  00C5                     __pbssBANK1:	
  3724  00C5                     _BaudTyped:	
  3725  00C5                     	ds	4
  3726  00C9                     _PS_2_Read_Data_TEMP:	
  3727  00C9                     	ds	2
  3728  00CB                     _BAUDMODE:	
  3729  00CB                     	ds	1
  3730  00CC                     _Caps_Lock_Key:	
  3731  00CC                     	ds	1
  3732  00CD                     _Caps_Lock_Key_old:	
  3733  00CD                     	ds	1
  3734  00CE                     _Delete:	
  3735  00CE                     	ds	1
  3736  00CF                     _LControl:	
  3737  00CF                     	ds	1
  3738  00D0                     _Left_Shift_Key_old:	
  3739  00D0                     	ds	1
  3740  00D1                     _PS_2_Buffer_items:	
  3741  00D1                     	ds	1
  3742  00D2                     _PS_2_bits:	
  3743  00D2                     	ds	1
  3744  00D3                     _ResendLastFlag:	
  3745  00D3                     	ds	1
  3746  00D4                     _Right_Shift_Key_old:	
  3747  00D4                     	ds	1
  3748  00D5                     _i:	
  3749  00D5                     	ds	1
  3750  00D6                     _PS_2_ScanCodes:	
  3751  00D6                     	ds	12
  3752                           
  3753                           	psect	dataBANK1
  3754  00E2                     __pdataBANK1:	
  3755  00E2                     _MEM:	
  3756  00E2                     	ds	4
  3757                           
  3758                           	psect	bssBANK3
  3759  01E1                     __pbssBANK3:	
  3760  01E1                     _PS_2_Read_Data_First:	
  3761  01E1                     	ds	2
  3762  01E3                     _PS_2_Read_Data_Second:	
  3763  01E3                     	ds	2
  3764  01E5                     _PS_2_Read_Data_Third:	
  3765  01E5                     	ds	2
  3766  01E7                     _CapsCount:	
  3767  01E7                     	ds	1
  3768  01E8                     _Caps_Lock:	
  3769  01E8                     	ds	1
  3770  01E9                     _LALT:	
  3771  01E9                     	ds	1
  3772  01EA                     _Left_Shift_Key:	
  3773  01EA                     	ds	1
  3774  01EB                     _ParityTyped:	
  3775  01EB                     	ds	1
  3776  01EC                     _RALT:	
  3777  01EC                     	ds	1
  3778  01ED                     _RControl:	
  3779  01ED                     	ds	1
  3780  01EE                     _Right_Shift_Key:	
  3781  01EE                     	ds	1
  3782  01EF                     _Shift_Key:	
  3783  01EF                     	ds	1
  3784                           
  3785                           	psect	bssBANK4
  3786  0257                     __pbssBANK4:	
  3787  0257                     _BatteryVoltage:	
  3788  0257                     	ds	3
  3789  025A                     _SinLEDtimer:	
  3790  025A                     	ds	2
  3791  025C                     _pwrLEDtoggle:	
  3792  025C                     	ds	2
  3793  025E                     _Alarm:	
  3794  025E                     	ds	1
  3795  025F                     _ECHO:	
  3796  025F                     	ds	1
  3797  0260                     _PARITY:	
  3798  0260                     	ds	1
  3799                           
  3800                           	psect	dataBANK4
  3801  0261                     __pdataBANK4:	
  3802  0261                     _BAUD:	
  3803  0261                     	ds	4
  3804                           
  3805                           	psect	clrtext
  3806  18C3                     clear_ram0:	
  3807                           ;	Called with FSR0 containing the base address, and
  3808                           ;	WREG with the size to clear
  3809                           
  3810  18C3  0064               	clrwdt	;clear the watchdog before getting into this loop
  3811  18C4                     clrloop0:	
  3812  18C4  0180               	clrf	0	;clear RAM location pointed to by FSR
  3813  18C5  3101               	addfsr 0,1
  3814  18C6  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3815  18C7  28C4               	goto	clrloop0	;have we reached the end yet?
  3816  18C8  3400               	retlw	0	;all done for this memory range, return
  3817                           
  3818                           	psect	inittext
  3819  18BD                     init_ram:	
  3820  18BD  00FE               	movwf	126
  3821  18BE                     initloop:	
  3822  18BE  0012               	moviw fsr0++
  3823  18BF  001E               	movwi fsr1++
  3824  18C0  0BFE               	decfsz	126,f
  3825  18C1  28BE               	goto	initloop
  3826  18C2  3400               	retlw	0
  3827                           
  3828                           	psect	cstackBANK5
  3829  02A0                     __pcstackBANK5:	
  3830  02A0                     Init_System@buf:	
  3831                           
  3832                           ; 60 bytes @ 0x0
  3833  02A0                     	ds	60
  3834  02DC                     Init_System@temp:	
  3835                           
  3836                           ; 4 bytes @ 0x3C
  3837  02DC                     	ds	4
  3838  02E0                     Init_System@Parity:	
  3839                           
  3840                           ; 1 bytes @ 0x40
  3841  02E0                     	ds	1
  3842  02E1                     Init_System@Baud:	
  3843                           
  3844                           ; 4 bytes @ 0x41
  3845  02E1                     	ds	4
  3846                           
  3847                           	psect	cstackBANK4
  3848  0220                     __pcstackBANK4:	
  3849  0220                     ??_Timer2ON:	
  3850  0220                     ??_PS_2_ENABLE_INTERRUPT:	
  3851                           ; 0 bytes @ 0x0
  3852                           
  3853  0220                     ??_ReadUSART:	
  3854                           ; 0 bytes @ 0x0
  3855                           
  3856  0220                     ??_ConfigureOscillator:	
  3857                           ; 0 bytes @ 0x0
  3858                           
  3859  0220                     ??_InitApp:	
  3860                           ; 0 bytes @ 0x0
  3861                           
  3862  0220                     ?_delayUS:	
  3863                           ; 0 bytes @ 0x0
  3864                           
  3865  0220                     ?_OpenUSART:	
  3866                           ; 0 bytes @ 0x0
  3867                           
  3868  0220                     ??_baudUSART:	
  3869                           ; 0 bytes @ 0x0
  3870                           
  3871  0220                     ??_Clock_TRIS:	
  3872                           ; 0 bytes @ 0x0
  3873                           
  3874  0220                     ??_Data_TRIS:	
  3875                           ; 0 bytes @ 0x0
  3876                           
  3877  0220                     ??_Timer2Init:	
  3878                           ; 0 bytes @ 0x0
  3879                           
  3880  0220                     ??_DisableInternalADC:	
  3881                           ; 0 bytes @ 0x0
  3882                           
  3883  0220                     ??_CloseUSART:	
  3884                           ; 0 bytes @ 0x0
  3885                           
  3886  0220                     ?___ftge:	
  3887                           ; 0 bytes @ 0x0
  3888                           
  3889  0220                     ?_CheckSum_byte:	
  3890                           ; 1 bit 
  3891                           
  3892  0220                     ?_ReadFlash_2Byte:	
  3893                           ; 1 bytes @ 0x0
  3894                           
  3895  0220                     ?___ftpack:	
  3896                           ; 2 bytes @ 0x0
  3897                           
  3898  0220                     ?___lldiv:	
  3899                           ; 3 bytes @ 0x0
  3900                           
  3901  0220                     baudUSART@baudconfig:	
  3902                           ; 4 bytes @ 0x0
  3903                           
  3904  0220                     Clock_TRIS@direction:	
  3905                           ; 1 bytes @ 0x0
  3906                           
  3907  0220                     Data_TRIS@direction:	
  3908                           ; 1 bytes @ 0x0
  3909                           
  3910  0220                     PS_2_ENABLE_INTERRUPT@DATA_CLK:	
  3911                           ; 1 bytes @ 0x0
  3912                           
  3913  0220                     CheckSum_byte@This:	
  3914                           ; 1 bytes @ 0x0
  3915                           
  3916  0220                     OpenUSART@spbrg:	
  3917                           ; 2 bytes @ 0x0
  3918                           
  3919  0220                     ReadFlash_2Byte@row:	
  3920                           ; 2 bytes @ 0x0
  3921                           
  3922  0220                     ___ftpack@arg:	
  3923                           ; 2 bytes @ 0x0
  3924                           
  3925  0220                     ___ftge@ff1:	
  3926                           ; 3 bytes @ 0x0
  3927                           
  3928  0220                     delayUS@US:	
  3929                           ; 3 bytes @ 0x0
  3930                           
  3931  0220                     ___lldiv@divisor:	
  3932                           ; 4 bytes @ 0x0
  3933                           
  3934                           
  3935                           ; 4 bytes @ 0x0
  3936  0220                     	ds	1
  3937  0221                     ReadUSART@data:	
  3938                           
  3939                           ; 1 bytes @ 0x1
  3940  0221                     	ds	1
  3941  0222                     ??_OpenUSART:	
  3942  0222                     CheckSum_byte@Odd_Even:	
  3943                           ; 0 bytes @ 0x2
  3944                           
  3945  0222                     OpenUSART@config:	
  3946                           ; 1 bytes @ 0x2
  3947                           
  3948  0222                     ReadFlash_2Byte@column:	
  3949                           ; 1 bytes @ 0x2
  3950                           
  3951  0222                     Timer2Init@time:	
  3952                           ; 1 bytes @ 0x2
  3953                           
  3954                           
  3955                           ; 1 bytes @ 0x2
  3956  0222                     	ds	1
  3957  0223                     ??_CheckSum_byte:	
  3958  0223                     ??_ReadFlash_2Byte:	
  3959                           ; 0 bytes @ 0x3
  3960                           
  3961  0223                     Timer2Init@postscaler:	
  3962                           ; 0 bytes @ 0x3
  3963                           
  3964  0223                     ___ftpack@exp:	
  3965                           ; 1 bytes @ 0x3
  3966                           
  3967  0223                     ___ftge@ff2:	
  3968                           ; 1 bytes @ 0x3
  3969                           
  3970                           
  3971                           ; 3 bytes @ 0x3
  3972  0223                     	ds	1
  3973  0224                     ??_delayUS:	
  3974  0224                     Timer2Init@prescaler:	
  3975                           ; 0 bytes @ 0x4
  3976                           
  3977  0224                     ___ftpack@sign:	
  3978                           ; 1 bytes @ 0x4
  3979                           
  3980  0224                     CheckSum_byte@ThisTemp:	
  3981                           ; 1 bytes @ 0x4
  3982                           
  3983  0224                     ___lldiv@dividend:	
  3984                           ; 2 bytes @ 0x4
  3985                           
  3986                           
  3987                           ; 4 bytes @ 0x4
  3988  0224                     	ds	1
  3989  0225                     ??_PS_2_INIT:	
  3990  0225                     ??___ftpack:	
  3991                           ; 0 bytes @ 0x5
  3992                           
  3993  0225                     ?_ReadFlash_4Byte:	
  3994                           ; 0 bytes @ 0x5
  3995                           
  3996  0225                     ReadFlash_4Byte@row:	
  3997                           ; 4 bytes @ 0x5
  3998                           
  3999  0225                     delayUS@i:	
  4000                           ; 2 bytes @ 0x5
  4001                           
  4002                           
  4003                           ; 4 bytes @ 0x5
  4004  0225                     	ds	1
  4005  0226                     ??___ftge:	
  4006  0226                     CheckSum_byte@Parity:	
  4007                           ; 0 bytes @ 0x6
  4008                           
  4009                           
  4010                           ; 1 bytes @ 0x6
  4011  0226                     	ds	1
  4012  0227                     CheckSum_byte@i:	
  4013  0227                     ReadFlash_4Byte@column:	
  4014                           ; 1 bytes @ 0x7
  4015                           
  4016                           
  4017                           ; 1 bytes @ 0x7
  4018  0227                     	ds	1
  4019  0228                     ?_UARTchar:	
  4020  0228                     ??___lldiv:	
  4021                           ; 0 bytes @ 0x8
  4022                           
  4023  0228                     ?___lwtoft:	
  4024                           ; 0 bytes @ 0x8
  4025                           
  4026  0228                     UARTchar@override:	
  4027                           ; 3 bytes @ 0x8
  4028                           
  4029  0228                     ___lwtoft@c:	
  4030                           ; 1 bytes @ 0x8
  4031                           
  4032                           
  4033                           ; 2 bytes @ 0x8
  4034  0228                     	ds	1
  4035  0229                     ??_ReadFlash_4Byte:	
  4036  0229                     delayUS@j:	
  4037                           ; 0 bytes @ 0x9
  4038                           
  4039  0229                     UARTchar@NinethBit_override_data:	
  4040                           ; 1 bytes @ 0x9
  4041                           
  4042  0229                     ___lldiv@quotient:	
  4043                           ; 1 bytes @ 0x9
  4044                           
  4045                           
  4046                           ; 4 bytes @ 0x9
  4047  0229                     	ds	1
  4048  022A                     ??_UARTchar:	
  4049  022A                     ?_InternalADC_Read:	
  4050                           ; 0 bytes @ 0xA
  4051                           
  4052                           
  4053                           ; 2 bytes @ 0xA
  4054  022A                     	ds	1
  4055  022B                     ??___lwtoft:	
  4056                           
  4057                           ; 0 bytes @ 0xB
  4058  022B                     	ds	1
  4059  022C                     ??_InternalADC_Read:	
  4060  022C                     ?___ftdiv:	
  4061                           ; 0 bytes @ 0xC
  4062                           
  4063  022C                     ___ftdiv@f2:	
  4064                           ; 3 bytes @ 0xC
  4065                           
  4066                           
  4067                           ; 3 bytes @ 0xC
  4068  022C                     	ds	1
  4069  022D                     ___lldiv@counter:	
  4070                           
  4071                           ; 1 bytes @ 0xD
  4072  022D                     	ds	1
  4073  022E                     ?_InitUART:	
  4074  022E                     ?___llmod:	
  4075                           ; 0 bytes @ 0xE
  4076                           
  4077  022E                     UARTchar@data:	
  4078                           ; 4 bytes @ 0xE
  4079                           
  4080  022E                     InternalADC_Read@channel:	
  4081                           ; 1 bytes @ 0xE
  4082                           
  4083  022E                     InitUART@Baud:	
  4084                           ; 1 bytes @ 0xE
  4085                           
  4086  022E                     ReadFlash_4Byte@temp:	
  4087                           ; 4 bytes @ 0xE
  4088                           
  4089  022E                     ___llmod@divisor:	
  4090                           ; 4 bytes @ 0xE
  4091                           
  4092                           
  4093                           ; 4 bytes @ 0xE
  4094  022E                     	ds	1
  4095  022F                     ?_UARTstringWAIT:	
  4096  022F                     UARTstringWAIT@data:	
  4097                           ; 0 bytes @ 0xF
  4098                           
  4099  022F                     ___ftdiv@f1:	
  4100                           ; 2 bytes @ 0xF
  4101                           
  4102                           
  4103                           ; 3 bytes @ 0xF
  4104  022F                     	ds	2
  4105  0231                     ??_UARTstringWAIT:	
  4106                           
  4107                           ; 0 bytes @ 0x11
  4108  0231                     	ds	1
  4109  0232                     ??___ftdiv:	
  4110  0232                     ?_ReadBaud:	
  4111                           ; 0 bytes @ 0x12
  4112                           
  4113  0232                     InitUART@parity:	
  4114                           ; 4 bytes @ 0x12
  4115                           
  4116  0232                     ReadBaud@row:	
  4117                           ; 1 bytes @ 0x12
  4118                           
  4119  0232                     ___llmod@dividend:	
  4120                           ; 2 bytes @ 0x12
  4121                           
  4122                           
  4123                           ; 4 bytes @ 0x12
  4124  0232                     	ds	1
  4125  0233                     ??_InitUART:	
  4126                           
  4127                           ; 0 bytes @ 0x13
  4128  0233                     	ds	1
  4129  0234                     ReadBaud@column:	
  4130                           
  4131                           ; 1 bytes @ 0x14
  4132  0234                     	ds	2
  4133  0236                     ??_ReadBaud:	
  4134  0236                     ??___llmod:	
  4135                           ; 0 bytes @ 0x16
  4136                           
  4137  0236                     ___ftdiv@cntr:	
  4138                           ; 0 bytes @ 0x16
  4139                           
  4140                           
  4141                           ; 1 bytes @ 0x16
  4142  0236                     	ds	1
  4143  0237                     ___llmod@counter:	
  4144  0237                     ___ftdiv@f3:	
  4145                           ; 1 bytes @ 0x17
  4146                           
  4147                           
  4148                           ; 3 bytes @ 0x17
  4149  0237                     	ds	1
  4150  0238                     ?_sprintf:	
  4151  0238                     sprintf@sp:	
  4152                           ; 2 bytes @ 0x18
  4153                           
  4154                           
  4155                           ; 2 bytes @ 0x18
  4156  0238                     	ds	2
  4157  023A                     ___ftdiv@exp:	
  4158  023A                     sprintf@f:	
  4159                           ; 1 bytes @ 0x1A
  4160                           
  4161                           
  4162                           ; 2 bytes @ 0x1A
  4163  023A                     	ds	1
  4164  023B                     ___ftdiv@sign:	
  4165  023B                     InitUART@spbrg:	
  4166                           ; 1 bytes @ 0x1B
  4167                           
  4168                           
  4169                           ; 2 bytes @ 0x1B
  4170  023B                     	ds	1
  4171  023C                     ?___ftmul:	
  4172  023C                     ___ftmul@f1:	
  4173                           ; 3 bytes @ 0x1C
  4174                           
  4175                           
  4176                           ; 3 bytes @ 0x1C
  4177  023C                     	ds	1
  4178  023D                     InitUART@baudconfig:	
  4179                           
  4180                           ; 1 bytes @ 0x1D
  4181  023D                     	ds	1
  4182  023E                     InitUART@config:	
  4183  023E                     ReadBaud@temp:	
  4184                           ; 1 bytes @ 0x1E
  4185                           
  4186                           
  4187                           ; 4 bytes @ 0x1E
  4188  023E                     	ds	1
  4189  023F                     ___ftmul@f2:	
  4190  023F                     InitUART@temp:	
  4191                           ; 3 bytes @ 0x1F
  4192                           
  4193                           
  4194                           ; 4 bytes @ 0x1F
  4195  023F                     	ds	1
  4196  0240                     ??_sprintf:	
  4197                           
  4198                           ; 0 bytes @ 0x20
  4199  0240                     	ds	2
  4200  0242                     ??___ftmul:	
  4201                           
  4202                           ; 0 bytes @ 0x22
  4203  0242                     	ds	4
  4204  0246                     sprintf@flag:	
  4205  0246                     ___ftmul@exp:	
  4206                           ; 1 bytes @ 0x26
  4207                           
  4208                           
  4209                           ; 1 bytes @ 0x26
  4210  0246                     	ds	1
  4211  0247                     sprintf@prec:	
  4212  0247                     ___ftmul@f3_as_product:	
  4213                           ; 2 bytes @ 0x27
  4214                           
  4215                           
  4216                           ; 3 bytes @ 0x27
  4217  0247                     	ds	2
  4218  0249                     sprintf@_val:	
  4219                           
  4220                           ; 4 bytes @ 0x29
  4221  0249                     	ds	1
  4222  024A                     ___ftmul@cntr:	
  4223                           
  4224                           ; 1 bytes @ 0x2A
  4225  024A                     	ds	1
  4226  024B                     ___ftmul@sign:	
  4227                           
  4228                           ; 1 bytes @ 0x2B
  4229  024B                     	ds	1
  4230  024C                     ?_ReadVoltage:	
  4231                           
  4232                           ; 3 bytes @ 0x2C
  4233  024C                     	ds	1
  4234  024D                     sprintf@ap:	
  4235                           
  4236                           ; 2 bytes @ 0x2D
  4237  024D                     	ds	2
  4238  024F                     ??_ReadVoltage:	
  4239  024F                     sprintf@c:	
  4240                           ; 0 bytes @ 0x2F
  4241                           
  4242                           
  4243                           ; 1 bytes @ 0x2F
  4244  024F                     	ds	1
  4245  0250                     ??_Init_System:	
  4246  0250                     ReadVoltage@voltage:	
  4247                           ; 0 bytes @ 0x30
  4248                           
  4249                           
  4250                           ; 3 bytes @ 0x30
  4251  0250                     	ds	3
  4252  0253                     ReadVoltage@temp:	
  4253                           
  4254                           ; 2 bytes @ 0x33
  4255  0253                     	ds	2
  4256  0255                     ??_main:	
  4257                           
  4258                           ; 0 bytes @ 0x35
  4259  0255                     	ds	1
  4260  0256                     main@i:	
  4261                           
  4262                           ; 1 bytes @ 0x36
  4263  0256                     	ds	1
  4264                           
  4265                           	psect	cstackBANK3
  4266  01A0                     __pcstackBANK3:	
  4267  01A0                     Process_PS2_ScanCode@buf:	
  4268                           
  4269                           ; 60 bytes @ 0x0
  4270  01A0                     	ds	60
  4271  01DC                     _Process_PS2_ScanCode$850:	
  4272                           
  4273                           ; 1 bytes @ 0x3C
  4274  01DC                     	ds	1
  4275  01DD                     _Process_PS2_ScanCode$851:	
  4276                           
  4277                           ; 1 bytes @ 0x3D
  4278  01DD                     	ds	1
  4279  01DE                     _Process_PS2_ScanCode$852:	
  4280                           
  4281                           ; 1 bytes @ 0x3E
  4282  01DE                     	ds	1
  4283  01DF                     _Process_PS2_ScanCode$853:	
  4284                           
  4285                           ; 1 bytes @ 0x3F
  4286  01DF                     	ds	1
  4287  01E0                     Process_PS2_ScanCode@temp:	
  4288                           
  4289                           ; 1 bytes @ 0x40
  4290  01E0                     	ds	1
  4291                           
  4292                           	psect	cstackBANK2
  4293  0120                     __pcstackBANK2:	
  4294  0120                     SetBaud@buf:	
  4295                           
  4296                           ; 50 bytes @ 0x0
  4297  0120                     	ds	50
  4298  0152                     SetBaud@Baudtemp:	
  4299                           
  4300                           ; 4 bytes @ 0x32
  4301  0152                     	ds	4
  4302  0156                     SetBaud@Paritytemp:	
  4303                           
  4304                           ; 4 bytes @ 0x36
  4305  0156                     	ds	4
  4306  015A                     SetBaud@temp:	
  4307                           
  4308                           ; 4 bytes @ 0x3A
  4309  015A                     	ds	4
  4310  015E                     SetBaud@i:	
  4311                           
  4312                           ; 1 bytes @ 0x3E
  4313  015E                     	ds	1
  4314                           
  4315                           	psect	cstackBANK1
  4316  00A0                     __pcstackBANK1:	
  4317  00A0                     ?_WriteBaud:	
  4318  00A0                     WriteBaud@row:	
  4319                           ; 0 bytes @ 0x0
  4320                           
  4321                           
  4322                           ; 2 bytes @ 0x0
  4323  00A0                     	ds	2
  4324  00A2                     WriteBaud@Baud:	
  4325                           
  4326                           ; 4 bytes @ 0x2
  4327  00A2                     	ds	4
  4328  00A6                     WriteBaud@Parity:	
  4329                           
  4330                           ; 1 bytes @ 0x6
  4331  00A6                     	ds	1
  4332  00A7                     ??_WriteBaud:	
  4333                           
  4334                           ; 0 bytes @ 0x7
  4335  00A7                     	ds	8
  4336  00AF                     ?_SetBaud:	
  4337  00AF                     SetBaud@Baud:	
  4338                           ; 0 bytes @ 0xF
  4339                           
  4340                           
  4341                           ; 4 bytes @ 0xF
  4342  00AF                     	ds	4
  4343  00B3                     SetBaud@Parity:	
  4344                           
  4345                           ; 1 bytes @ 0x13
  4346  00B3                     	ds	1
  4347  00B4                     ??_SetBaud:	
  4348                           
  4349                           ; 0 bytes @ 0x14
  4350  00B4                     	ds	8
  4351  00BC                     ??_Process_PS2_ScanCode:	
  4352                           
  4353                           ; 0 bytes @ 0x1C
  4354  00BC                     	ds	6
  4355  00C2                     isr@Rx_fault:	
  4356                           
  4357                           ; 1 bytes @ 0x22
  4358  00C2                     	ds	1
  4359  00C3                     isr@rx:	
  4360                           
  4361                           ; 1 bytes @ 0x23
  4362  00C3                     	ds	1
  4363  00C4                     isr@ScanTemp:	
  4364                           
  4365                           ; 1 bytes @ 0x24
  4366  00C4                     	ds	1
  4367                           
  4368                           	psect	cstackCOMMON
  4369  0070                     __pcstackCOMMON:	
  4370  0070                     ?_PS_2_DISABLE_INTERRUPT:	
  4371  0070                     ??_PS_2_DISABLE_INTERRUPT:	
  4372                           ; 0 bytes @ 0x0
  4373                           
  4374  0070                     ??_READ_PS_2_PIN:	
  4375                           ; 0 bytes @ 0x0
  4376                           
  4377  0070                     ?_Timer2Reset:	
  4378                           ; 0 bytes @ 0x0
  4379                           
  4380  0070                     ??_Timer2Reset:	
  4381                           ; 0 bytes @ 0x0
  4382                           
  4383  0070                     ?_Timer2ON:	
  4384                           ; 0 bytes @ 0x0
  4385                           
  4386  0070                     ?_PS_2_ENABLE_INTERRUPT:	
  4387                           ; 0 bytes @ 0x0
  4388                           
  4389  0070                     ??_READ_CONFIG_PIN:	
  4390                           ; 0 bytes @ 0x0
  4391                           
  4392  0070                     ?_Timer2OFF:	
  4393                           ; 0 bytes @ 0x0
  4394                           
  4395  0070                     ??_Timer2OFF:	
  4396                           ; 0 bytes @ 0x0
  4397                           
  4398  0070                     ?_ResendLast:	
  4399                           ; 0 bytes @ 0x0
  4400                           
  4401  0070                     ?_Process_PS2_ScanCode:	
  4402                           ; 0 bytes @ 0x0
  4403                           
  4404  0070                     ?_ConfigureOscillator:	
  4405                           ; 0 bytes @ 0x0
  4406                           
  4407  0070                     ?_InitApp:	
  4408                           ; 0 bytes @ 0x0
  4409                           
  4410  0070                     ?_Init_System:	
  4411                           ; 0 bytes @ 0x0
  4412                           
  4413  0070                     ?_PS_2_INIT:	
  4414                           ; 0 bytes @ 0x0
  4415                           
  4416  0070                     ?_baudUSART:	
  4417                           ; 0 bytes @ 0x0
  4418                           
  4419  0070                     ?_Clock_TRIS:	
  4420                           ; 0 bytes @ 0x0
  4421                           
  4422  0070                     ?_Data_TRIS:	
  4423                           ; 0 bytes @ 0x0
  4424                           
  4425  0070                     ?_Timer2Init:	
  4426                           ; 0 bytes @ 0x0
  4427                           
  4428  0070                     ??_Decode_Scan_Code_FunctionE0:	
  4429                           ; 0 bytes @ 0x0
  4430                           
  4431  0070                     ??_Decode_Scan_Code_Shift:	
  4432                           ; 0 bytes @ 0x0
  4433                           
  4434  0070                     ??_Decode_Scan_Code:	
  4435                           ; 0 bytes @ 0x0
  4436                           
  4437  0070                     ??_Decode_Scan_Code_Function:	
  4438                           ; 0 bytes @ 0x0
  4439                           
  4440  0070                     ?_DisableInternalADC:	
  4441                           ; 0 bytes @ 0x0
  4442                           
  4443  0070                     ?_isr:	
  4444                           ; 0 bytes @ 0x0
  4445                           
  4446  0070                     ?_main:	
  4447                           ; 0 bytes @ 0x0
  4448                           
  4449  0070                     ??_Reverse_Byte:	
  4450                           ; 0 bytes @ 0x0
  4451                           
  4452  0070                     ??_ISNUMBER:	
  4453                           ; 0 bytes @ 0x0
  4454                           
  4455  0070                     ?_cleanBuffer:	
  4456                           ; 0 bytes @ 0x0
  4457                           
  4458  0070                     ?_CloseUSART:	
  4459                           ; 0 bytes @ 0x0
  4460                           
  4461  0070                     ?_UART_send_break:	
  4462                           ; 0 bytes @ 0x0
  4463                           
  4464  0070                     ??_UART_send_break:	
  4465                           ; 0 bytes @ 0x0
  4466                           
  4467  0070                     ?_UNLOCK:	
  4468                           ; 0 bytes @ 0x0
  4469                           
  4470  0070                     ??_UNLOCK:	
  4471                           ; 0 bytes @ 0x0
  4472                           
  4473  0070                     ?_BlockErase:	
  4474                           ; 0 bytes @ 0x0
  4475                           
  4476  0070                     ?i1_delayUS:	
  4477                           ; 0 bytes @ 0x0
  4478                           
  4479  0070                     ?i1_CloseUSART:	
  4480                           ; 0 bytes @ 0x0
  4481                           
  4482  0070                     ??i1_CloseUSART:	
  4483                           ; 0 bytes @ 0x0
  4484                           
  4485  0070                     ?i1_baudUSART:	
  4486                           ; 0 bytes @ 0x0
  4487                           
  4488  0070                     ??i1_baudUSART:	
  4489                           ; 0 bytes @ 0x0
  4490                           
  4491  0070                     ?i1_OpenUSART:	
  4492                           ; 0 bytes @ 0x0
  4493                           
  4494  0070                     ??i1_ReadUSART:	
  4495                           ; 0 bytes @ 0x0
  4496                           
  4497  0070                     ?i1_Clock_TRIS:	
  4498                           ; 0 bytes @ 0x0
  4499                           
  4500  0070                     ??i1_Clock_TRIS:	
  4501                           ; 0 bytes @ 0x0
  4502                           
  4503  0070                     ?i1_Data_TRIS:	
  4504                           ; 0 bytes @ 0x0
  4505                           
  4506  0070                     ??i1_Data_TRIS:	
  4507                           ; 0 bytes @ 0x0
  4508                           
  4509  0070                     ?i1_PS_2_ENABLE_INTERRUPT:	
  4510                           ; 0 bytes @ 0x0
  4511                           
  4512  0070                     ??i1_PS_2_ENABLE_INTERRUPT:	
  4513                           ; 0 bytes @ 0x0
  4514                           
  4515  0070                     ?i1_Timer2ON:	
  4516                           ; 0 bytes @ 0x0
  4517                           
  4518  0070                     ??i1_Timer2ON:	
  4519                           ; 0 bytes @ 0x0
  4520                           
  4521  0070                     ?_READ_PS_2_PIN:	
  4522                           ; 0 bytes @ 0x0
  4523                           
  4524  0070                     ?_ReadUSART:	
  4525                           ; 1 bytes @ 0x0
  4526                           
  4527  0070                     ?_READ_CONFIG_PIN:	
  4528                           ; 1 bytes @ 0x0
  4529                           
  4530  0070                     ?_Send_PS2:	
  4531                           ; 1 bytes @ 0x0
  4532                           
  4533  0070                     ?_Decode_Scan_Code_FunctionE0:	
  4534                           ; 1 bytes @ 0x0
  4535                           
  4536  0070                     ?_Decode_Scan_Code_Shift:	
  4537                           ; 1 bytes @ 0x0
  4538                           
  4539  0070                     ?_Decode_Scan_Code:	
  4540                           ; 1 bytes @ 0x0
  4541                           
  4542  0070                     ?_Decode_Scan_Code_Function:	
  4543                           ; 1 bytes @ 0x0
  4544                           
  4545  0070                     ?_Reverse_Byte:	
  4546                           ; 1 bytes @ 0x0
  4547                           
  4548  0070                     ?_ISNUMBER:	
  4549                           ; 1 bytes @ 0x0
  4550                           
  4551  0070                     ?_BufferShiftBack:	
  4552                           ; 1 bytes @ 0x0
  4553                           
  4554  0070                     ?i1_CheckSum_byte:	
  4555                           ; 1 bytes @ 0x0
  4556                           
  4557  0070                     ?i1_ReadUSART:	
  4558                           ; 1 bytes @ 0x0
  4559                           
  4560  0070                     ?i1_ReadFlash_2Byte:	
  4561                           ; 1 bytes @ 0x0
  4562                           
  4563  0070                     ?___lmul:	
  4564                           ; 2 bytes @ 0x0
  4565                           
  4566  0070                     ?i1___lldiv:	
  4567                           ; 4 bytes @ 0x0
  4568                           
  4569  0070                     ISNUMBER@ascii:	
  4570                           ; 4 bytes @ 0x0
  4571                           
  4572  0070                     BufferShiftBack@shift:	
  4573                           ; 1 bytes @ 0x0
  4574                           
  4575  0070                     READ_PS_2_PIN@DATA_CLK:	
  4576                           ; 1 bytes @ 0x0
  4577                           
  4578  0070                     Decode_Scan_Code@Code:	
  4579                           ; 1 bytes @ 0x0
  4580                           
  4581  0070                     Decode_Scan_Code_Shift@Code:	
  4582                           ; 1 bytes @ 0x0
  4583                           
  4584  0070                     Decode_Scan_Code_FunctionE0@Code:	
  4585                           ; 1 bytes @ 0x0
  4586                           
  4587  0070                     Decode_Scan_Code_Function@Code:	
  4588                           ; 1 bytes @ 0x0
  4589                           
  4590  0070                     i1baudUSART@baudconfig:	
  4591                           ; 1 bytes @ 0x0
  4592                           
  4593  0070                     i1Clock_TRIS@direction:	
  4594                           ; 1 bytes @ 0x0
  4595                           
  4596  0070                     i1Data_TRIS@direction:	
  4597                           ; 1 bytes @ 0x0
  4598                           
  4599  0070                     i1PS_2_ENABLE_INTERRUPT@DATA_CLK:	
  4600                           ; 1 bytes @ 0x0
  4601                           
  4602  0070                     cleanBuffer@count:	
  4603                           ; 1 bytes @ 0x0
  4604                           
  4605  0070                     BlockErase@row:	
  4606                           ; 2 bytes @ 0x0
  4607                           
  4608  0070                     i1CheckSum_byte@This:	
  4609                           ; 2 bytes @ 0x0
  4610                           
  4611  0070                     i1OpenUSART@spbrg:	
  4612                           ; 2 bytes @ 0x0
  4613                           
  4614  0070                     i1ReadFlash_2Byte@row:	
  4615                           ; 2 bytes @ 0x0
  4616                           
  4617  0070                     ___lmul@multiplier:	
  4618                           ; 2 bytes @ 0x0
  4619                           
  4620  0070                     i1delayUS@US:	
  4621                           ; 4 bytes @ 0x0
  4622                           
  4623  0070                     i1___lldiv@divisor:	
  4624                           ; 4 bytes @ 0x0
  4625                           
  4626                           
  4627                           ; 4 bytes @ 0x0
  4628  0070                     	ds	1
  4629  0071                     BufferShiftBack@size:	
  4630  0071                     PS_2_DISABLE_INTERRUPT@DATA_CLK:	
  4631                           ; 1 bytes @ 0x1
  4632                           
  4633  0071                     i1ReadUSART@data:	
  4634                           ; 1 bytes @ 0x1
  4635                           
  4636                           
  4637                           ; 1 bytes @ 0x1
  4638  0071                     	ds	1
  4639  0072                     ??_cleanBuffer:	
  4640  0072                     ??_BufferShiftBack:	
  4641                           ; 0 bytes @ 0x2
  4642                           
  4643  0072                     ??_BlockErase:	
  4644                           ; 0 bytes @ 0x2
  4645                           
  4646  0072                     ??i1_OpenUSART:	
  4647                           ; 0 bytes @ 0x2
  4648                           
  4649  0072                     Reverse_Byte@temp:	
  4650                           ; 0 bytes @ 0x2
  4651                           
  4652  0072                     i1CheckSum_byte@Odd_Even:	
  4653                           ; 1 bytes @ 0x2
  4654                           
  4655  0072                     i1OpenUSART@config:	
  4656                           ; 1 bytes @ 0x2
  4657                           
  4658  0072                     i1ReadFlash_2Byte@column:	
  4659                           ; 1 bytes @ 0x2
  4660                           
  4661                           
  4662                           ; 1 bytes @ 0x2
  4663  0072                     	ds	1
  4664  0073                     ??i1_CheckSum_byte:	
  4665  0073                     ??i1_ReadFlash_2Byte:	
  4666                           ; 0 bytes @ 0x3
  4667                           
  4668  0073                     Reverse_Byte@This:	
  4669                           ; 0 bytes @ 0x3
  4670                           
  4671  0073                     cleanBuffer@data:	
  4672                           ; 1 bytes @ 0x3
  4673                           
  4674                           
  4675                           ; 1 bytes @ 0x3
  4676  0073                     	ds	1
  4677  0074                     ??i1_delayUS:	
  4678  0074                     cleanBuffer@i:	
  4679                           ; 0 bytes @ 0x4
  4680                           
  4681  0074                     i1CheckSum_byte@ThisTemp:	
  4682                           ; 1 bytes @ 0x4
  4683                           
  4684  0074                     ___lmul@multiplicand:	
  4685                           ; 2 bytes @ 0x4
  4686                           
  4687  0074                     i1___lldiv@dividend:	
  4688                           ; 4 bytes @ 0x4
  4689                           
  4690                           
  4691                           ; 4 bytes @ 0x4
  4692  0074                     	ds	1
  4693  0075                     ?i1_ReadFlash_4Byte:	
  4694  0075                     i1ReadFlash_4Byte@row:	
  4695                           ; 4 bytes @ 0x5
  4696                           
  4697  0075                     i1delayUS@i:	
  4698                           ; 2 bytes @ 0x5
  4699                           
  4700                           
  4701                           ; 4 bytes @ 0x5
  4702  0075                     	ds	1
  4703  0076                     BufferShiftBack@i:	
  4704  0076                     i1CheckSum_byte@Parity:	
  4705                           ; 1 bytes @ 0x6
  4706                           
  4707                           
  4708                           ; 1 bytes @ 0x6
  4709  0076                     	ds	1
  4710  0077                     BufferShiftBack@buffer:	
  4711  0077                     i1CheckSum_byte@i:	
  4712                           ; 1 bytes @ 0x7
  4713                           
  4714  0077                     i1ReadFlash_4Byte@column:	
  4715                           ; 1 bytes @ 0x7
  4716                           
  4717                           
  4718                           ; 1 bytes @ 0x7
  4719  0077                     	ds	1
  4720  0078                     ??___lmul:	
  4721  0078                     ?i1_UARTchar:	
  4722                           ; 0 bytes @ 0x8
  4723                           
  4724  0078                     ??i1___lldiv:	
  4725                           ; 0 bytes @ 0x8
  4726                           
  4727  0078                     ?_PS2RawToScan:	
  4728                           ; 0 bytes @ 0x8
  4729                           
  4730  0078                     i1UARTchar@override:	
  4731                           ; 2 bytes @ 0x8
  4732                           
  4733  0078                     PS2RawToScan@Raw:	
  4734                           ; 1 bytes @ 0x8
  4735                           
  4736  0078                     ___lmul@product:	
  4737                           ; 2 bytes @ 0x8
  4738                           
  4739                           
  4740                           ; 4 bytes @ 0x8
  4741  0078                     	ds	1
  4742  0079                     ??i1_ReadFlash_4Byte:	
  4743  0079                     i1delayUS@j:	
  4744                           ; 0 bytes @ 0x9
  4745                           
  4746  0079                     i1UARTchar@NinethBit_override_data:	
  4747                           ; 1 bytes @ 0x9
  4748                           
  4749  0079                     i1___lldiv@quotient:	
  4750                           ; 1 bytes @ 0x9
  4751                           
  4752                           
  4753                           ; 4 bytes @ 0x9
  4754  0079                     	ds	1
  4755  007A                     ?_UART_send_break_timed:	
  4756  007A                     ??_Send_PS2:	
  4757                           ; 0 bytes @ 0xA
  4758                           
  4759  007A                     ?_WriteFlash_Sequential:	
  4760                           ; 0 bytes @ 0xA
  4761                           
  4762  007A                     ??i1_UARTchar:	
  4763                           ; 0 bytes @ 0xA
  4764                           
  4765  007A                     UART_send_break_timed@US:	
  4766                           ; 0 bytes @ 0xA
  4767                           
  4768  007A                     PS2RawToScan@temp:	
  4769                           ; 2 bytes @ 0xA
  4770                           
  4771  007A                     WriteFlash_Sequential@row:	
  4772                           ; 2 bytes @ 0xA
  4773                           
  4774                           
  4775                           ; 2 bytes @ 0xA
  4776  007A                     	ds	2
  4777  007C                     ??_UART_send_break_timed:	
  4778  007C                     WriteFlash_Sequential@buffer:	
  4779                           ; 0 bytes @ 0xC
  4780                           
  4781                           
  4782                           ; 1 bytes @ 0xC
  4783  007C                     	ds	1
  4784  007D                     WriteFlash_Sequential@amount:	
  4785  007D                     i1___lldiv@counter:	
  4786                           ; 1 bytes @ 0xD
  4787                           
  4788                           
  4789                           ; 1 bytes @ 0xD
  4790  007D                     	ds	1
  4791  007E                     ??_ResendLast:	
  4792                           
  4793                           	psect	cstackBANK0
  4794  0020                     __pcstackBANK0:	
  4795                           ; 0 bytes @ 0xE
  4796                           
  4797  0020                     ??_PS2RawToScan:	
  4798  0020                     ??_WriteFlash_Sequential:	
  4799                           ; 0 bytes @ 0x0
  4800                           
  4801  0020                     ?i1_InitUART:	
  4802                           ; 0 bytes @ 0x0
  4803                           
  4804  0020                     ?i1___llmod:	
  4805                           ; 0 bytes @ 0x0
  4806                           
  4807  0020                     Send_PS2@oddparity:	
  4808                           ; 4 bytes @ 0x0
  4809                           
  4810  0020                     i1UARTchar@data:	
  4811                           ; 1 bytes @ 0x0
  4812                           
  4813  0020                     i1InitUART@Baud:	
  4814                           ; 1 bytes @ 0x0
  4815                           
  4816  0020                     i1ReadFlash_4Byte@temp:	
  4817                           ; 4 bytes @ 0x0
  4818                           
  4819  0020                     i1___llmod@divisor:	
  4820                           ; 4 bytes @ 0x0
  4821                           
  4822                           
  4823                           ; 4 bytes @ 0x0
  4824  0020                     	ds	1
  4825  0021                     ?i1_UARTstringWAIT:	
  4826  0021                     Send_PS2@command:	
  4827                           ; 0 bytes @ 0x1
  4828                           
  4829  0021                     i1UARTstringWAIT@data:	
  4830                           ; 1 bytes @ 0x1
  4831                           
  4832                           
  4833                           ; 2 bytes @ 0x1
  4834  0021                     	ds	1
  4835  0022                     Send_PS2@i:	
  4836                           
  4837                           ; 1 bytes @ 0x2
  4838  0022                     	ds	1
  4839  0023                     ??i1_UARTstringWAIT:	
  4840  0023                     Send_PS2@timeout:	
  4841                           ; 0 bytes @ 0x3
  4842                           
  4843  0023                     WriteFlash_Sequential@TempBufH:	
  4844                           ; 2 bytes @ 0x3
  4845                           
  4846                           
  4847                           ; 32 bytes @ 0x3
  4848  0023                     	ds	1
  4849  0024                     ?i1_ReadBaud:	
  4850  0024                     i1InitUART@parity:	
  4851                           ; 4 bytes @ 0x4
  4852                           
  4853  0024                     i1ReadBaud@row:	
  4854                           ; 1 bytes @ 0x4
  4855                           
  4856  0024                     i1___llmod@dividend:	
  4857                           ; 2 bytes @ 0x4
  4858                           
  4859                           
  4860                           ; 4 bytes @ 0x4
  4861  0024                     	ds	1
  4862  0025                     ??i1_InitUART:	
  4863                           
  4864                           ; 0 bytes @ 0x5
  4865  0025                     	ds	1
  4866  0026                     i1ReadBaud@column:	
  4867                           
  4868                           ; 1 bytes @ 0x6
  4869  0026                     	ds	2
  4870  0028                     ??i1_ReadBaud:	
  4871  0028                     ??i1___llmod:	
  4872                           ; 0 bytes @ 0x8
  4873                           
  4874                           
  4875                           ; 0 bytes @ 0x8
  4876  0028                     	ds	1
  4877  0029                     i1___llmod@counter:	
  4878                           
  4879                           ; 1 bytes @ 0x9
  4880  0029                     	ds	1
  4881  002A                     ?i1_sprintf:	
  4882  002A                     i1sprintf@sp:	
  4883                           ; 2 bytes @ 0xA
  4884                           
  4885                           
  4886                           ; 2 bytes @ 0xA
  4887  002A                     	ds	2
  4888  002C                     i1sprintf@f:	
  4889                           
  4890                           ; 2 bytes @ 0xC
  4891  002C                     	ds	1
  4892  002D                     i1InitUART@spbrg:	
  4893                           
  4894                           ; 2 bytes @ 0xD
  4895  002D                     	ds	2
  4896  002F                     i1InitUART@baudconfig:	
  4897                           
  4898                           ; 1 bytes @ 0xF
  4899  002F                     	ds	1
  4900  0030                     i1InitUART@config:	
  4901  0030                     i1ReadBaud@temp:	
  4902                           ; 1 bytes @ 0x10
  4903                           
  4904                           
  4905                           ; 4 bytes @ 0x10
  4906  0030                     	ds	1
  4907  0031                     i1InitUART@temp:	
  4908                           
  4909                           ; 4 bytes @ 0x11
  4910  0031                     	ds	1
  4911  0032                     ??i1_sprintf:	
  4912                           
  4913                           ; 0 bytes @ 0x12
  4914  0032                     	ds	6
  4915  0038                     i1sprintf@flag:	
  4916                           
  4917                           ; 1 bytes @ 0x18
  4918  0038                     	ds	1
  4919  0039                     i1sprintf@prec:	
  4920                           
  4921                           ; 2 bytes @ 0x19
  4922  0039                     	ds	2
  4923  003B                     i1sprintf@_val:	
  4924                           
  4925                           ; 4 bytes @ 0x1B
  4926  003B                     	ds	4
  4927  003F                     i1sprintf@ap:	
  4928                           
  4929                           ; 2 bytes @ 0x1F
  4930  003F                     	ds	2
  4931  0041                     i1sprintf@c:	
  4932                           
  4933                           ; 1 bytes @ 0x21
  4934  0041                     	ds	2
  4935  0043                     WriteFlash_Sequential@TempBufL:	
  4936                           
  4937                           ; 32 bytes @ 0x23
  4938  0043                     	ds	32
  4939  0063                     WriteFlash_Sequential@tempH:	
  4940                           
  4941                           ; 1 bytes @ 0x43
  4942  0063                     	ds	1
  4943  0064                     WriteFlash_Sequential@tempL:	
  4944                           
  4945                           ; 1 bytes @ 0x44
  4946  0064                     	ds	1
  4947  0065                     WriteFlash_Sequential@amountTemp:	
  4948                           
  4949                           ; 1 bytes @ 0x45
  4950  0065                     	ds	1
  4951  0066                     WriteFlash_Sequential@temp:	
  4952                           
  4953                           ; 2 bytes @ 0x46
  4954  0066                     	ds	2
  4955  0068                     WriteFlash_Sequential@spaces:	
  4956                           
  4957                           ; 1 bytes @ 0x48
  4958  0068                     	ds	1
  4959  0069                     WriteFlash_Sequential@i:	
  4960                           
  4961                           ; 1 bytes @ 0x49
  4962  0069                     	ds	1
  4963  006A                     WriteBaud@temp:	
  4964                           
  4965                           ; 4 bytes @ 0x4A
  4966  006A                     	ds	4
  4967  006E                     ??_isr:	
  4968                           
  4969                           ; 0 bytes @ 0x4E
  4970  006E                     	ds	2
  4971                           
  4972                           	psect	maintext
  4973  0A98                     __pmaintext:	
  4974 ;;
  4975 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  4976 ;;
  4977 ;; *************** function _main *****************
  4978 ;; Defined at:
  4979 ;;		line 108 in file "main.c"
  4980 ;; Parameters:    Size  Location     Type
  4981 ;;		None
  4982 ;; Auto vars:     Size  Location     Type
  4983 ;;  i               1   54[BANK4 ] unsigned char 
  4984 ;; Return value:  Size  Location     Type
  4985 ;;		None               void
  4986 ;; Registers used:
  4987 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4988 ;; Tracked objects:
  4989 ;;		On entry : 17F/0
  4990 ;;		On exit  : 0/0
  4991 ;;		Unchanged: 0/0
  4992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4994 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  4995 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  4996 ;;      Totals:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  4997 ;;Total ram usage:        2 bytes
  4998 ;; Hardware stack levels required when called:   11
  4999 ;; This function calls:
  5000 ;;		_ConfigureOscillator
  5001 ;;		_InitApp
  5002 ;;		_Init_System
  5003 ;;		_PS_2_ENABLE_INTERRUPT
  5004 ;;		_PS_2_INIT
  5005 ;;		_ReadVoltage
  5006 ;;		_UARTstringWAIT
  5007 ;;		___ftge
  5008 ;;		_delayUS
  5009 ;; This function is called by:
  5010 ;;		Startup code after reset
  5011 ;; This function uses a non-reentrant model
  5012 ;;
  5013                           
  5014                           
  5015                           ;psect for function _main
  5016  0A98                     _main:	
  5017                           
  5018                           ;main.c: 110: unsigned char i=0;
  5019                           
  5020                           ;incstack = 0
  5021                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5022  0A98  0024               	movlb	4	; select bank4
  5023  0A99  01D6               	clrf	main@i^(0+512)
  5024                           
  5025                           ;main.c: 112: ConfigureOscillator();
  5026  0A9A  3199  21D1  318A   	fcall	_ConfigureOscillator
  5027                           
  5028                           ;main.c: 113: InitApp();
  5029  0A9D  3190  2000  318A   	fcall	_InitApp
  5030                           
  5031                           ;main.c: 114: Init_System();
  5032  0AA0  318B  238E  318A   	fcall	_Init_System
  5033                           
  5034                           ;main.c: 115: PS_2_INIT();
  5035  0AA3  3199  2153  318A   	fcall	_PS_2_INIT
  5036                           
  5037                           ;main.c: 118: for(i =0;i<10;i++)
  5038  0AA6  0024               	movlb	4	; select bank4
  5039  0AA7  01D6               	clrf	main@i^(0+512)
  5040  0AA8  300A               	movlw	10
  5041  0AA9  0256               	subwf	main@i^(0+512),w
  5042  0AAA  1803               	btfsc	3,0
  5043  0AAB  2AD5               	goto	l6627
  5044  0AAC                     l171:	
  5045                           
  5046                           ;main.c: 119: {
  5047                           ;main.c: 120: LATC |= 0b00010000;
  5048  0AAC  0022               	movlb	2	; select bank2
  5049  0AAD  160E               	bsf	14,4	;volatile
  5050                           
  5051                           ;main.c: 121: delayUS(10000);
  5052  0AAE  3000               	movlw	0
  5053  0AAF  0024               	movlb	4	; select bank4
  5054  0AB0  00A3               	movwf	(delayUS@US+3)^(0+512)
  5055  0AB1  3000               	movlw	0
  5056  0AB2  00A2               	movwf	(delayUS@US+2)^(0+512)
  5057  0AB3  3027               	movlw	39
  5058  0AB4  00A1               	movwf	(delayUS@US+1)^(0+512)
  5059  0AB5  3010               	movlw	16
  5060  0AB6  00A0               	movwf	delayUS@US^(0+512)
  5061  0AB7  319B  23F9  318A   	fcall	_delayUS
  5062                           
  5063                           ;main.c: 122: LATC &= ~0b00010000;
  5064  0ABA  30EF               	movlw	239
  5065  0ABB  0024               	movlb	4	; select bank4
  5066  0ABC  00D5               	movwf	??_main^(0+512)
  5067  0ABD  0855               	movf	??_main^(0+512),w
  5068  0ABE  0022               	movlb	2	; select bank2
  5069  0ABF  058E               	andwf	14,f	;volatile
  5070                           
  5071                           ;main.c: 123: delayUS(10000);
  5072  0AC0  3000               	movlw	0
  5073  0AC1  0024               	movlb	4	; select bank4
  5074  0AC2  00A3               	movwf	(delayUS@US+3)^(0+512)
  5075  0AC3  3000               	movlw	0
  5076  0AC4  00A2               	movwf	(delayUS@US+2)^(0+512)
  5077  0AC5  3027               	movlw	39
  5078  0AC6  00A1               	movwf	(delayUS@US+1)^(0+512)
  5079  0AC7  3010               	movlw	16
  5080  0AC8  00A0               	movwf	delayUS@US^(0+512)
  5081  0AC9  319B  23F9  318A   	fcall	_delayUS
  5082  0ACC  3001               	movlw	1
  5083  0ACD  0024               	movlb	4	; select bank4
  5084  0ACE  00D5               	movwf	??_main^(0+512)
  5085  0ACF  0855               	movf	??_main^(0+512),w
  5086  0AD0  07D6               	addwf	main@i^(0+512),f
  5087  0AD1  300A               	movlw	10
  5088  0AD2  0256               	subwf	main@i^(0+512),w
  5089  0AD3  1C03               	skipc
  5090  0AD4  2AAC               	goto	l171
  5091  0AD5                     l6627:	
  5092                           
  5093                           ;main.c: 124: }
  5094                           ;main.c: 126: BatteryVoltage = ReadVoltage();
  5095  0AD5  3190  2085  318A   	fcall	_ReadVoltage
  5096  0AD8  0024               	movlb	4	; select bank4
  5097  0AD9  084C               	movf	?_ReadVoltage^(0+512),w
  5098  0ADA  00D7               	movwf	_BatteryVoltage^(0+512)
  5099  0ADB  084D               	movf	(?_ReadVoltage+1)^(0+512),w
  5100  0ADC  00D8               	movwf	(_BatteryVoltage+1)^(0+512)
  5101  0ADD  084E               	movf	(?_ReadVoltage+2)^(0+512),w
  5102  0ADE  00D9               	movwf	(_BatteryVoltage+2)^(0+512)
  5103                           
  5104                           ;main.c: 127: if(BatteryVoltage < 6.55 )
  5105  0ADF  0857               	movf	_BatteryVoltage^(0+512),w
  5106  0AE0  00A0               	movwf	___ftge@ff1^(0+512)
  5107  0AE1  0858               	movf	(_BatteryVoltage+1)^(0+512),w
  5108  0AE2  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5109  0AE3  0859               	movf	(_BatteryVoltage+2)^(0+512),w
  5110  0AE4  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5111  0AE5  309A               	movlw	154
  5112  0AE6  00A3               	movwf	___ftge@ff2^(0+512)
  5113  0AE7  30D1               	movlw	209
  5114  0AE8  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5115  0AE9  3040               	movlw	64
  5116  0AEA  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5117  0AEB  319C  242E  318A   	fcall	___ftge
  5118  0AEE  1803               	btfsc	3,0
  5119  0AEF  2AFD               	goto	l6631
  5120                           
  5121                           ;main.c: 128: {
  5122                           ;main.c: 129: UARTstringWAIT(VoltageMSG);
  5123  0AF0  3059               	movlw	low (_VoltageMSG| (0+32768))
  5124  0AF1  0024               	movlb	4	; select bank4
  5125  0AF2  00AF               	movwf	UARTstringWAIT@data^(0+512)
  5126  0AF3  3089               	movlw	high (_VoltageMSG| (0+32768))
  5127  0AF4  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  5128  0AF5  319B  23C6  318A   	fcall	_UARTstringWAIT
  5129                           
  5130                           ;main.c: 130: UARTstringWAIT("Low!\r\n");
  5131  0AF8  3061               	movlw	low (STR_1| (0+32768))
  5132  0AF9  0024               	movlb	4	; select bank4
  5133  0AFA  00AF               	movwf	UARTstringWAIT@data^(0+512)
  5134  0AFB  308A               	movlw	high (STR_1| (0+32768))
  5135  0AFC  2B1B               	goto	L1
  5136  0AFD                     l6631:	
  5137                           ;main.c: 131: }
  5138                           
  5139                           
  5140                           ;main.c: 132: else if (BatteryVoltage > 30.0)
  5141  0AFD  3000               	movlw	0
  5142  0AFE  0024               	movlb	4	; select bank4
  5143  0AFF  00A0               	movwf	___ftge@ff1^(0+512)
  5144  0B00  30F0               	movlw	240
  5145  0B01  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5146  0B02  3041               	movlw	65
  5147  0B03  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5148  0B04  0857               	movf	_BatteryVoltage^(0+512),w
  5149  0B05  00A3               	movwf	___ftge@ff2^(0+512)
  5150  0B06  0858               	movf	(_BatteryVoltage+1)^(0+512),w
  5151  0B07  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5152  0B08  0859               	movf	(_BatteryVoltage+2)^(0+512),w
  5153  0B09  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5154  0B0A  319C  242E  318A   	fcall	___ftge
  5155  0B0D  1803               	btfsc	3,0
  5156  0B0E  2B1F               	goto	l6635
  5157                           
  5158                           ;main.c: 133: {
  5159                           ;main.c: 134: UARTstringWAIT(VoltageMSG);
  5160  0B0F  3059               	movlw	low (_VoltageMSG| (0+32768))
  5161  0B10  0024               	movlb	4	; select bank4
  5162  0B11  00AF               	movwf	UARTstringWAIT@data^(0+512)
  5163  0B12  3089               	movlw	high (_VoltageMSG| (0+32768))
  5164  0B13  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  5165  0B14  319B  23C6  318A   	fcall	_UARTstringWAIT
  5166                           
  5167                           ;main.c: 135: UARTstringWAIT("High!\r\n");
  5168  0B17  3059               	movlw	low (STR_2| (0+32768))
  5169  0B18  0024               	movlb	4	; select bank4
  5170  0B19  00AF               	movwf	UARTstringWAIT@data^(0+512)
  5171  0B1A  308A               	movlw	high (STR_2| (0+32768))
  5172  0B1B                     L1:	
  5173  0B1B  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  5174  0B1C  319B  23C6  318A   	fcall	_UARTstringWAIT
  5175  0B1F                     l6635:	
  5176                           
  5177                           ;main.c: 136: }
  5178                           ;main.c: 138: PS_2_ENABLE_INTERRUPT(0b00100000);
  5179  0B1F  3020               	movlw	32
  5180  0B20  3199  2147  318A   	fcall	_PS_2_ENABLE_INTERRUPT
  5181                           
  5182                           ;main.c: 140: PIE1bits.RCIE = 1;
  5183  0B23  0021               	movlb	1	; select bank1
  5184  0B24  1691               	bsf	17,5	;volatile
  5185  0B25                     l6639:	
  5186                           ;main.c: 143: while(1)
  5187                           
  5188                           
  5189                           ;main.c: 144: {
  5190                           ;main.c: 145: BatteryVoltage = ReadVoltage();
  5191  0B25  3190  2085  318A   	fcall	_ReadVoltage
  5192  0B28  0024               	movlb	4	; select bank4
  5193  0B29  084C               	movf	?_ReadVoltage^(0+512),w
  5194  0B2A  00D7               	movwf	_BatteryVoltage^(0+512)
  5195  0B2B  084D               	movf	(?_ReadVoltage+1)^(0+512),w
  5196  0B2C  00D8               	movwf	(_BatteryVoltage+1)^(0+512)
  5197  0B2D  084E               	movf	(?_ReadVoltage+2)^(0+512),w
  5198  0B2E  00D9               	movwf	(_BatteryVoltage+2)^(0+512)
  5199                           
  5200                           ;main.c: 146: delayUS(20);
  5201  0B2F  3000               	movlw	0
  5202  0B30  00A3               	movwf	(delayUS@US+3)^(0+512)
  5203  0B31  3000               	movlw	0
  5204  0B32  00A2               	movwf	(delayUS@US+2)^(0+512)
  5205  0B33  3000               	movlw	0
  5206  0B34  00A1               	movwf	(delayUS@US+1)^(0+512)
  5207  0B35  3014               	movlw	20
  5208  0B36  00A0               	movwf	delayUS@US^(0+512)
  5209  0B37  319B  23F9  318A   	fcall	_delayUS
  5210                           
  5211                           ;main.c: 147: if(BatteryVoltage < 6.55 || BatteryVoltage > 30.0)
  5212  0B3A  0024               	movlb	4	; select bank4
  5213  0B3B  0857               	movf	_BatteryVoltage^(0+512),w
  5214  0B3C  00A0               	movwf	___ftge@ff1^(0+512)
  5215  0B3D  0858               	movf	(_BatteryVoltage+1)^(0+512),w
  5216  0B3E  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5217  0B3F  0859               	movf	(_BatteryVoltage+2)^(0+512),w
  5218  0B40  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5219  0B41  309A               	movlw	154
  5220  0B42  00A3               	movwf	___ftge@ff2^(0+512)
  5221  0B43  30D1               	movlw	209
  5222  0B44  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5223  0B45  3040               	movlw	64
  5224  0B46  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5225  0B47  319C  242E  318A   	fcall	___ftge
  5226  0B4A  1C03               	btfss	3,0
  5227  0B4B  2B5E               	goto	l179
  5228  0B4C  3000               	movlw	0
  5229  0B4D  0024               	movlb	4	; select bank4
  5230  0B4E  00A0               	movwf	___ftge@ff1^(0+512)
  5231  0B4F  30F0               	movlw	240
  5232  0B50  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5233  0B51  3041               	movlw	65
  5234  0B52  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5235  0B53  0857               	movf	_BatteryVoltage^(0+512),w
  5236  0B54  00A3               	movwf	___ftge@ff2^(0+512)
  5237  0B55  0858               	movf	(_BatteryVoltage+1)^(0+512),w
  5238  0B56  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5239  0B57  0859               	movf	(_BatteryVoltage+2)^(0+512),w
  5240  0B58  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5241  0B59  319C  242E  318A   	fcall	___ftge
  5242  0B5C  1803               	btfsc	3,0
  5243  0B5D  2B62               	goto	l6647
  5244  0B5E                     l179:	
  5245                           
  5246                           ;main.c: 148: {
  5247                           ;main.c: 149: Alarm = 1;
  5248  0B5E  0024               	movlb	4	; select bank4
  5249  0B5F  01DE               	clrf	_Alarm^(0+512)
  5250  0B60  0ADE               	incf	_Alarm^(0+512),f
  5251                           
  5252                           ;main.c: 150: }
  5253  0B61  2B66               	goto	l6651
  5254  0B62                     l6647:	
  5255                           
  5256                           ;main.c: 151: else
  5257                           ;main.c: 152: {
  5258                           ;main.c: 153: Alarm = 0;
  5259  0B62  0024               	movlb	4	; select bank4
  5260  0B63  01DE               	clrf	_Alarm^(0+512)
  5261                           
  5262                           ;main.c: 154: LATC |= 0b00000010;
  5263  0B64  0022               	movlb	2	; select bank2
  5264  0B65  148E               	bsf	14,1	;volatile
  5265  0B66                     l6651:	
  5266                           
  5267                           ;main.c: 155: }
  5268                           ;main.c: 156: if(Alarm)
  5269  0B66  0024               	movlb	4	; select bank4
  5270  0B67  085E               	movf	_Alarm^(0+512),w
  5271  0B68  1903               	btfsc	3,2
  5272  0B69  2B7B               	goto	l6659
  5273                           
  5274                           ;main.c: 157: {
  5275                           ;main.c: 158: pwrLEDtoggle++;
  5276  0B6A  3001               	movlw	1
  5277  0B6B  07DC               	addwf	_pwrLEDtoggle^(0+512),f
  5278  0B6C  3000               	movlw	0
  5279  0B6D  3DDD               	addwfc	(_pwrLEDtoggle+1)^(0+512),f
  5280                           
  5281                           ;main.c: 159: if(pwrLEDtoggle == 100)
  5282  0B6E  3064               	movlw	100
  5283  0B6F  065C               	xorwf	_pwrLEDtoggle^(0+512),w
  5284  0B70  045D               	iorwf	(_pwrLEDtoggle+1)^(0+512),w
  5285  0B71  1D03               	skipz
  5286  0B72  2B7B               	goto	l6659
  5287                           
  5288                           ;main.c: 160: {
  5289                           ;main.c: 161: pwrLEDtoggle = 0;
  5290  0B73  01DC               	clrf	_pwrLEDtoggle^(0+512)
  5291  0B74  01DD               	clrf	(_pwrLEDtoggle+1)^(0+512)
  5292                           
  5293                           ;main.c: 162: LATC ^= 0b00000010;
  5294  0B75  3002               	movlw	2
  5295  0B76  00D5               	movwf	??_main^(0+512)
  5296  0B77  0855               	movf	??_main^(0+512),w
  5297  0B78  0022               	movlb	2	; select bank2
  5298  0B79  068E               	xorwf	14,f	;volatile
  5299  0B7A  0024               	movlb	4	; select bank4
  5300  0B7B                     l6659:	
  5301                           
  5302                           ;main.c: 163: }
  5303                           ;main.c: 164: }
  5304                           ;main.c: 166: if(SinLEDtimer < 100)
  5305  0B7B  3000               	movlw	0
  5306  0B7C  0024               	movlb	4	; select bank4
  5307  0B7D  025B               	subwf	(_SinLEDtimer+1)^(0+512),w
  5308  0B7E  3064               	movlw	100
  5309  0B7F  1903               	skipnz
  5310  0B80  025A               	subwf	_SinLEDtimer^(0+512),w
  5311  0B81  1803               	skipnc
  5312  0B82  2B88               	goto	l6663
  5313                           
  5314                           ;main.c: 167: {
  5315                           ;main.c: 168: SinLEDtimer++;
  5316  0B83  3001               	movlw	1
  5317  0B84  07DA               	addwf	_SinLEDtimer^(0+512),f
  5318  0B85  3000               	movlw	0
  5319  0B86  3DDB               	addwfc	(_SinLEDtimer+1)^(0+512),f
  5320                           
  5321                           ;main.c: 169: }
  5322  0B87  2B25               	goto	l6639
  5323  0B88                     l6663:	
  5324                           
  5325                           ;main.c: 170: else
  5326                           ;main.c: 171: {
  5327                           ;main.c: 172: LATC &= ~0b00001000;
  5328  0B88  30F7               	movlw	247
  5329  0B89  00D5               	movwf	??_main^(0+512)
  5330  0B8A  0855               	movf	??_main^(0+512),w
  5331  0B8B  0022               	movlb	2	; select bank2
  5332  0B8C  058E               	andwf	14,f	;volatile
  5333  0B8D  2B25               	goto	l6639
  5334  0B8E                     __end_of_main:	
  5335                           
  5336                           	psect	text1
  5337  1C2E                     __ptext1:	
  5338 ;; *************** function ___ftge *****************
  5339 ;; Defined at:
  5340 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  5341 ;; Parameters:    Size  Location     Type
  5342 ;;  ff1             3    0[BANK4 ] float 
  5343 ;;  ff2             3    3[BANK4 ] float 
  5344 ;; Auto vars:     Size  Location     Type
  5345 ;;		None
  5346 ;; Return value:  Size  Location     Type
  5347 ;;		None               void
  5348 ;; Registers used:
  5349 ;;		wreg, status,2, status,0
  5350 ;; Tracked objects:
  5351 ;;		On entry : 0/0
  5352 ;;		On exit  : 0/0
  5353 ;;		Unchanged: 0/0
  5354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5355 ;;      Params:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5357 ;;      Temps:          0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  5358 ;;      Totals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0
  5359 ;;Total ram usage:        9 bytes
  5360 ;; Hardware stack levels used:    1
  5361 ;; Hardware stack levels required when called:    7
  5362 ;; This function calls:
  5363 ;;		Nothing
  5364 ;; This function is called by:
  5365 ;;		_main
  5366 ;; This function uses a non-reentrant model
  5367 ;;
  5368                           
  5369                           
  5370                           ;psect for function ___ftge
  5371  1C2E                     ___ftge:	
  5372                           
  5373                           ;incstack = 0
  5374                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  5375  1C2E  0024               	movlb	4	; select bank4
  5376  1C2F  1FA2               	btfss	(___ftge@ff1+2)^(0+512),7
  5377  1C30  2C45               	goto	l6587
  5378  1C31  0920               	comf	___ftge@ff1^(0+512),w
  5379  1C32  00A6               	movwf	??___ftge^(0+512)
  5380  1C33  0921               	comf	(___ftge@ff1+1)^(0+512),w
  5381  1C34  00A7               	movwf	(??___ftge^(0+512)+1)
  5382  1C35  0922               	comf	(___ftge@ff1+2)^(0+512),w
  5383  1C36  00A8               	movwf	(??___ftge^(0+512)+2)
  5384  1C37  0AA6               	incf	??___ftge^(0+512),f
  5385  1C38  1903               	skipnz
  5386  1C39  0AA7               	incf	(??___ftge^(0+512)+1),f
  5387  1C3A  1903               	skipnz
  5388  1C3B  0AA8               	incf	(??___ftge^(0+512)+2),f
  5389  1C3C  3000               	movlw	0
  5390  1C3D  0726               	addwf	??___ftge^(0+512),w
  5391  1C3E  00A0               	movwf	___ftge@ff1^(0+512)
  5392  1C3F  3000               	movlw	0
  5393  1C40  3D27               	addwfc	(??___ftge+1)^(0+512),w
  5394  1C41  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5395  1C42  3080               	movlw	128
  5396  1C43  3D28               	addwfc	(??___ftge+2)^(0+512),w
  5397  1C44  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5398  1C45                     l6587:	
  5399  1C45  1FA5               	btfss	(___ftge@ff2+2)^(0+512),7
  5400  1C46  2C5B               	goto	l6591
  5401  1C47  0923               	comf	___ftge@ff2^(0+512),w
  5402  1C48  00A6               	movwf	??___ftge^(0+512)
  5403  1C49  0924               	comf	(___ftge@ff2+1)^(0+512),w
  5404  1C4A  00A7               	movwf	(??___ftge^(0+512)+1)
  5405  1C4B  0925               	comf	(___ftge@ff2+2)^(0+512),w
  5406  1C4C  00A8               	movwf	(??___ftge^(0+512)+2)
  5407  1C4D  0AA6               	incf	??___ftge^(0+512),f
  5408  1C4E  1903               	skipnz
  5409  1C4F  0AA7               	incf	(??___ftge^(0+512)+1),f
  5410  1C50  1903               	skipnz
  5411  1C51  0AA8               	incf	(??___ftge^(0+512)+2),f
  5412  1C52  3000               	movlw	0
  5413  1C53  0726               	addwf	??___ftge^(0+512),w
  5414  1C54  00A3               	movwf	___ftge@ff2^(0+512)
  5415  1C55  3000               	movlw	0
  5416  1C56  3D27               	addwfc	(??___ftge+1)^(0+512),w
  5417  1C57  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5418  1C58  3080               	movlw	128
  5419  1C59  3D28               	addwfc	(??___ftge+2)^(0+512),w
  5420  1C5A  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5421  1C5B                     l6591:	
  5422  1C5B  3080               	movlw	128
  5423  1C5C  06A2               	xorwf	(___ftge@ff1+2)^(0+512),f
  5424  1C5D  3080               	movlw	128
  5425  1C5E  06A5               	xorwf	(___ftge@ff2+2)^(0+512),f
  5426  1C5F  0825               	movf	(___ftge@ff2+2)^(0+512),w
  5427  1C60  0222               	subwf	(___ftge@ff1+2)^(0+512),w
  5428  1C61  1D03               	skipz
  5429  1C62  0008               	return
  5430  1C63  0824               	movf	(___ftge@ff2+1)^(0+512),w
  5431  1C64  0221               	subwf	(___ftge@ff1+1)^(0+512),w
  5432  1C65  1D03               	skipz
  5433  1C66  0008               	return
  5434  1C67  0823               	movf	___ftge@ff2^(0+512),w
  5435  1C68  0220               	subwf	___ftge@ff1^(0+512),w
  5436  1C69  0008               	return
  5437  1C6A                     __end_of___ftge:	
  5438                           
  5439                           	psect	text2
  5440  1085                     __ptext2:	
  5441 ;; *************** function _ReadVoltage *****************
  5442 ;; Defined at:
  5443 ;;		line 62 in file "ADC.c"
  5444 ;; Parameters:    Size  Location     Type
  5445 ;;		None
  5446 ;; Auto vars:     Size  Location     Type
  5447 ;;  voltage         3   48[BANK4 ] float 
  5448 ;;  temp            2   51[BANK4 ] unsigned int 
  5449 ;; Return value:  Size  Location     Type
  5450 ;;                  3   44[BANK4 ] unsigned int 
  5451 ;; Registers used:
  5452 ;;		wreg, status,2, status,0, pclath, cstack
  5453 ;; Tracked objects:
  5454 ;;		On entry : 0/0
  5455 ;;		On exit  : 0/0
  5456 ;;		Unchanged: 0/0
  5457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5458 ;;      Params:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  5459 ;;      Locals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  5460 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  5461 ;;      Totals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0
  5462 ;;Total ram usage:        9 bytes
  5463 ;; Hardware stack levels used:    1
  5464 ;; Hardware stack levels required when called:    9
  5465 ;; This function calls:
  5466 ;;		_DisableInternalADC
  5467 ;;		_InternalADC_Read
  5468 ;;		___ftdiv
  5469 ;;		___ftmul
  5470 ;;		___lwtoft
  5471 ;; This function is called by:
  5472 ;;		_main
  5473 ;; This function uses a non-reentrant model
  5474 ;;
  5475                           
  5476                           
  5477                           ;psect for function _ReadVoltage
  5478  1085                     _ReadVoltage:	
  5479                           
  5480                           ;ADC.c: 64: unsigned int temp;
  5481                           ;ADC.c: 65: double voltage;
  5482                           ;ADC.c: 70: temp = InternalADC_Read(2);
  5483                           
  5484                           ;incstack = 0
  5485                           ; Regs used in _ReadVoltage: [wreg+status,2+status,0+pclath+cstack]
  5486  1085  3002               	movlw	2
  5487  1086  319D  2572  3190   	fcall	_InternalADC_Read
  5488  1089  0024               	movlb	4	; select bank4
  5489  108A  082B               	movf	(?_InternalADC_Read+1)^(0+512),w
  5490  108B  01D4               	clrf	(ReadVoltage@temp+1)^(0+512)
  5491  108C  07D4               	addwf	(ReadVoltage@temp+1)^(0+512),f
  5492  108D  082A               	movf	?_InternalADC_Read^(0+512),w
  5493  108E  01D3               	clrf	ReadVoltage@temp^(0+512)
  5494  108F  07D3               	addwf	ReadVoltage@temp^(0+512),f
  5495                           
  5496                           ;ADC.c: 71: DisableInternalADC();
  5497  1090  3198  20D0  3190   	fcall	_DisableInternalADC
  5498                           
  5499                           ;ADC.c: 78: if((FVRCON & 0x03) == 0x03)
  5500  1093  3003               	movlw	3
  5501  1094  0022               	movlb	2	; select bank2
  5502  1095  0517               	andwf	23,w	;volatile
  5503  1096  0024               	movlb	4	; select bank4
  5504  1097  00CF               	movwf	??_ReadVoltage^(0+512)
  5505  1098  084F               	movf	??_ReadVoltage^(0+512),w
  5506  1099  3A03               	xorlw	3
  5507  109A  1D03               	skipz
  5508  109B  28A2               	goto	l6573
  5509                           
  5510                           ;ADC.c: 79: {
  5511                           ;ADC.c: 81: temp <<= 2;
  5512  109C  3002               	movlw	2
  5513  109D                     u8495:	
  5514  109D  35D3               	lslf	ReadVoltage@temp^(0+512),f
  5515  109E  0DD4               	rlf	(ReadVoltage@temp+1)^(0+512),f
  5516  109F  0B89               	decfsz	9,f
  5517  10A0  289D               	goto	u8495
  5518                           
  5519                           ;ADC.c: 82: }
  5520  10A1  28B0               	goto	l6577
  5521  10A2                     l6573:	
  5522                           
  5523                           ;ADC.c: 83: else if((FVRCON & 0x03) == 0x02)
  5524  10A2  3003               	movlw	3
  5525  10A3  0022               	movlb	2	; select bank2
  5526  10A4  0517               	andwf	23,w	;volatile
  5527  10A5  0024               	movlb	4	; select bank4
  5528  10A6  00CF               	movwf	??_ReadVoltage^(0+512)
  5529  10A7  084F               	movf	??_ReadVoltage^(0+512),w
  5530  10A8  3A02               	xorlw	2
  5531  10A9  1D03               	skipz
  5532  10AA  28B0               	goto	l6577
  5533                           
  5534                           ;ADC.c: 84: {
  5535                           ;ADC.c: 86: temp <<= 1;
  5536  10AB  3001               	movlw	1
  5537  10AC                     u8515:	
  5538  10AC  35D3               	lslf	ReadVoltage@temp^(0+512),f
  5539  10AD  0DD4               	rlf	(ReadVoltage@temp+1)^(0+512),f
  5540  10AE  0B89               	decfsz	9,f
  5541  10AF  28AC               	goto	u8515
  5542  10B0                     l6577:	
  5543                           
  5544                           ;ADC.c: 87: }
  5545                           ;ADC.c: 88: voltage = ((double)temp / 1000) * 5.7;
  5546  10B0  3066               	movlw	102
  5547  10B1  00BC               	movwf	___ftmul@f1^(0+512)
  5548  10B2  30B6               	movlw	182
  5549  10B3  00BD               	movwf	(___ftmul@f1+1)^(0+512)
  5550  10B4  3040               	movlw	64
  5551  10B5  00BE               	movwf	(___ftmul@f1+2)^(0+512)
  5552  10B6  3000               	movlw	0
  5553  10B7  00AC               	movwf	___ftdiv@f2^(0+512)
  5554  10B8  307A               	movlw	122
  5555  10B9  00AD               	movwf	(___ftdiv@f2+1)^(0+512)
  5556  10BA  3044               	movlw	68
  5557  10BB  00AE               	movwf	(___ftdiv@f2+2)^(0+512)
  5558  10BC  0854               	movf	(ReadVoltage@temp+1)^(0+512),w
  5559  10BD  01A9               	clrf	(___lwtoft@c+1)^(0+512)
  5560  10BE  07A9               	addwf	(___lwtoft@c+1)^(0+512),f
  5561  10BF  0853               	movf	ReadVoltage@temp^(0+512),w
  5562  10C0  01A8               	clrf	___lwtoft@c^(0+512)
  5563  10C1  07A8               	addwf	___lwtoft@c^(0+512),f
  5564  10C2  3199  21F6  3190   	fcall	___lwtoft
  5565  10C5  0024               	movlb	4	; select bank4
  5566  10C6  0828               	movf	?___lwtoft^(0+512),w
  5567  10C7  00AF               	movwf	___ftdiv@f1^(0+512)
  5568  10C8  0829               	movf	(?___lwtoft+1)^(0+512),w
  5569  10C9  00B0               	movwf	(___ftdiv@f1+1)^(0+512)
  5570  10CA  082A               	movf	(?___lwtoft+2)^(0+512),w
  5571  10CB  00B1               	movwf	(___ftdiv@f1+2)^(0+512)
  5572  10CC  3192  2211  3190   	fcall	___ftdiv
  5573  10CF  0024               	movlb	4	; select bank4
  5574  10D0  082C               	movf	?___ftdiv^(0+512),w
  5575  10D1  00BF               	movwf	___ftmul@f2^(0+512)
  5576  10D2  082D               	movf	(?___ftdiv+1)^(0+512),w
  5577  10D3  00C0               	movwf	(___ftmul@f2+1)^(0+512)
  5578  10D4  082E               	movf	(?___ftdiv+2)^(0+512),w
  5579  10D5  00C1               	movwf	(___ftmul@f2+2)^(0+512)
  5580  10D6  3192  22BA         	fcall	___ftmul
  5581  10D8  0024               	movlb	4	; select bank4
  5582  10D9  083C               	movf	?___ftmul^(0+512),w
  5583  10DA  00D0               	movwf	ReadVoltage@voltage^(0+512)
  5584  10DB  083D               	movf	(?___ftmul+1)^(0+512),w
  5585  10DC  00D1               	movwf	(ReadVoltage@voltage+1)^(0+512)
  5586  10DD  083E               	movf	(?___ftmul+2)^(0+512),w
  5587  10DE  00D2               	movwf	(ReadVoltage@voltage+2)^(0+512)
  5588                           
  5589                           ;ADC.c: 89: return voltage;
  5590  10DF  0850               	movf	ReadVoltage@voltage^(0+512),w
  5591  10E0  00CC               	movwf	?_ReadVoltage^(0+512)
  5592  10E1  0851               	movf	(ReadVoltage@voltage+1)^(0+512),w
  5593  10E2  00CD               	movwf	(?_ReadVoltage+1)^(0+512)
  5594  10E3  0852               	movf	(ReadVoltage@voltage+2)^(0+512),w
  5595  10E4  00CE               	movwf	(?_ReadVoltage+2)^(0+512)
  5596  10E5  0008               	return
  5597  10E6                     __end_of_ReadVoltage:	
  5598                           
  5599                           	psect	text3
  5600  19F6                     __ptext3:	
  5601 ;; *************** function ___lwtoft *****************
  5602 ;; Defined at:
  5603 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwtoft.c"
  5604 ;; Parameters:    Size  Location     Type
  5605 ;;  c               2    8[BANK4 ] unsigned int 
  5606 ;; Auto vars:     Size  Location     Type
  5607 ;;		None
  5608 ;; Return value:  Size  Location     Type
  5609 ;;                  3    8[BANK4 ] float 
  5610 ;; Registers used:
  5611 ;;		wreg, status,2, status,0, pclath, cstack
  5612 ;; Tracked objects:
  5613 ;;		On entry : 0/0
  5614 ;;		On exit  : 0/0
  5615 ;;		Unchanged: 0/0
  5616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5617 ;;      Params:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  5618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5619 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  5620 ;;      Totals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  5621 ;;Total ram usage:        4 bytes
  5622 ;; Hardware stack levels used:    1
  5623 ;; Hardware stack levels required when called:    8
  5624 ;; This function calls:
  5625 ;;		___ftpack
  5626 ;; This function is called by:
  5627 ;;		_ReadVoltage
  5628 ;; This function uses a non-reentrant model
  5629 ;;
  5630                           
  5631                           
  5632                           ;psect for function ___lwtoft
  5633  19F6                     ___lwtoft:	
  5634                           
  5635                           ;incstack = 0
  5636                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  5637  19F6  0024               	movlb	4	; select bank4
  5638  19F7  0828               	movf	___lwtoft@c^(0+512),w
  5639  19F8  00A0               	movwf	___ftpack@arg^(0+512)
  5640  19F9  0829               	movf	(___lwtoft@c+1)^(0+512),w
  5641  19FA  00A1               	movwf	(___ftpack@arg+1)^(0+512)
  5642  19FB  01A2               	clrf	(___ftpack@arg+2)^(0+512)
  5643  19FC  308E               	movlw	142
  5644  19FD  00AB               	movwf	??___lwtoft^(0+512)
  5645  19FE  082B               	movf	??___lwtoft^(0+512),w
  5646  19FF  00A3               	movwf	___ftpack@exp^(0+512)
  5647  1A00  01A4               	clrf	___ftpack@sign^(0+512)
  5648  1A01  3190  2024         	fcall	___ftpack
  5649  1A03  0024               	movlb	4	; select bank4
  5650  1A04  0820               	movf	?___ftpack^(0+512),w
  5651  1A05  00A8               	movwf	?___lwtoft^(0+512)
  5652  1A06  0821               	movf	(?___ftpack+1)^(0+512),w
  5653  1A07  00A9               	movwf	(?___lwtoft+1)^(0+512)
  5654  1A08  0822               	movf	(?___ftpack+2)^(0+512),w
  5655  1A09  00AA               	movwf	(?___lwtoft+2)^(0+512)
  5656  1A0A  0008               	return
  5657  1A0B                     __end_of___lwtoft:	
  5658                           
  5659                           	psect	text4
  5660  12BA                     __ptext4:	
  5661 ;; *************** function ___ftmul *****************
  5662 ;; Defined at:
  5663 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  5664 ;; Parameters:    Size  Location     Type
  5665 ;;  f1              3   28[BANK4 ] float 
  5666 ;;  f2              3   31[BANK4 ] float 
  5667 ;; Auto vars:     Size  Location     Type
  5668 ;;  f3_as_produc    3   39[BANK4 ] unsigned um
  5669 ;;  sign            1   43[BANK4 ] unsigned char 
  5670 ;;  cntr            1   42[BANK4 ] unsigned char 
  5671 ;;  exp             1   38[BANK4 ] unsigned char 
  5672 ;; Return value:  Size  Location     Type
  5673 ;;                  3   28[BANK4 ] float 
  5674 ;; Registers used:
  5675 ;;		wreg, status,2, status,0, pclath, cstack
  5676 ;; Tracked objects:
  5677 ;;		On entry : 0/0
  5678 ;;		On exit  : 0/0
  5679 ;;		Unchanged: 0/0
  5680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5681 ;;      Params:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5682 ;;      Locals:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5683 ;;      Temps:          0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  5684 ;;      Totals:         0       0       0       0       0      16       0       0       0       0       0       0       
      +0       0
  5685 ;;Total ram usage:       16 bytes
  5686 ;; Hardware stack levels used:    1
  5687 ;; Hardware stack levels required when called:    8
  5688 ;; This function calls:
  5689 ;;		___ftpack
  5690 ;; This function is called by:
  5691 ;;		_ReadVoltage
  5692 ;; This function uses a non-reentrant model
  5693 ;;
  5694                           
  5695                           
  5696                           ;psect for function ___ftmul
  5697  12BA                     ___ftmul:	
  5698                           
  5699                           ;incstack = 0
  5700                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  5701  12BA  0024               	movlb	4	; select bank4
  5702  12BB  083C               	movf	___ftmul@f1^(0+512),w
  5703  12BC  00C2               	movwf	??___ftmul^(0+512)
  5704  12BD  083D               	movf	(___ftmul@f1+1)^(0+512),w
  5705  12BE  00C3               	movwf	(??___ftmul^(0+512)+1)
  5706  12BF  083E               	movf	(___ftmul@f1+2)^(0+512),w
  5707  12C0  00C4               	movwf	(??___ftmul^(0+512)+2)
  5708  12C1  1003               	clrc
  5709  12C2  0D43               	rlf	(??___ftmul^(0+512)+1),w
  5710  12C3  0D44               	rlf	(??___ftmul^(0+512)+2),w
  5711  12C4  00C5               	movwf	(??___ftmul+3)^(0+512)
  5712  12C5  0845               	movf	(??___ftmul+3)^(0+512),w
  5713  12C6  00C6               	movwf	___ftmul@exp^(0+512)
  5714  12C7  08C6               	movf	___ftmul@exp^(0+512),f
  5715  12C8  1D03               	skipz
  5716  12C9  2AD1               	goto	l6403
  5717  12CA  3000               	movlw	0
  5718  12CB  00BC               	movwf	?___ftmul^(0+512)
  5719  12CC  3000               	movlw	0
  5720  12CD  00BD               	movwf	(?___ftmul+1)^(0+512)
  5721  12CE  3000               	movlw	0
  5722  12CF  00BE               	movwf	(?___ftmul+2)^(0+512)
  5723  12D0  0008               	return
  5724  12D1                     l6403:	
  5725  12D1  083F               	movf	___ftmul@f2^(0+512),w
  5726  12D2  00C2               	movwf	??___ftmul^(0+512)
  5727  12D3  0840               	movf	(___ftmul@f2+1)^(0+512),w
  5728  12D4  00C3               	movwf	(??___ftmul^(0+512)+1)
  5729  12D5  0841               	movf	(___ftmul@f2+2)^(0+512),w
  5730  12D6  00C4               	movwf	(??___ftmul^(0+512)+2)
  5731  12D7  1003               	clrc
  5732  12D8  0D43               	rlf	(??___ftmul^(0+512)+1),w
  5733  12D9  0D44               	rlf	(??___ftmul^(0+512)+2),w
  5734  12DA  00C5               	movwf	(??___ftmul+3)^(0+512)
  5735  12DB  0845               	movf	(??___ftmul+3)^(0+512),w
  5736  12DC  00CB               	movwf	___ftmul@sign^(0+512)
  5737  12DD  08CB               	movf	___ftmul@sign^(0+512),f
  5738  12DE  1D03               	skipz
  5739  12DF  2AE7               	goto	l6409
  5740  12E0  3000               	movlw	0
  5741  12E1  00BC               	movwf	?___ftmul^(0+512)
  5742  12E2  3000               	movlw	0
  5743  12E3  00BD               	movwf	(?___ftmul+1)^(0+512)
  5744  12E4  3000               	movlw	0
  5745  12E5  00BE               	movwf	(?___ftmul+2)^(0+512)
  5746  12E6  0008               	return
  5747  12E7                     l6409:	
  5748  12E7  084B               	movf	___ftmul@sign^(0+512),w
  5749  12E8  3E7B               	addlw	123
  5750  12E9  00C2               	movwf	??___ftmul^(0+512)
  5751  12EA  0842               	movf	??___ftmul^(0+512),w
  5752  12EB  07C6               	addwf	___ftmul@exp^(0+512),f
  5753  12EC  083C               	movf	___ftmul@f1^(0+512),w
  5754  12ED  00C2               	movwf	??___ftmul^(0+512)
  5755  12EE  083D               	movf	(___ftmul@f1+1)^(0+512),w
  5756  12EF  00C3               	movwf	(??___ftmul^(0+512)+1)
  5757  12F0  083E               	movf	(___ftmul@f1+2)^(0+512),w
  5758  12F1  00C4               	movwf	(??___ftmul^(0+512)+2)
  5759  12F2  3010               	movlw	16
  5760  12F3                     u8315:	
  5761  12F3  36C4               	lsrf	(??___ftmul^(0+512)+2),f
  5762  12F4  0CC3               	rrf	(??___ftmul^(0+512)+1),f
  5763  12F5  0CC2               	rrf	??___ftmul^(0+512),f
  5764  12F6  0B89               	decfsz	9,f
  5765  12F7  2AF3               	goto	u8315
  5766  12F8  0842               	movf	??___ftmul^(0+512),w
  5767  12F9  00C5               	movwf	(??___ftmul+3)^(0+512)
  5768  12FA  0845               	movf	(??___ftmul+3)^(0+512),w
  5769  12FB  00CB               	movwf	___ftmul@sign^(0+512)
  5770  12FC  083F               	movf	___ftmul@f2^(0+512),w
  5771  12FD  00C2               	movwf	??___ftmul^(0+512)
  5772  12FE  0840               	movf	(___ftmul@f2+1)^(0+512),w
  5773  12FF  00C3               	movwf	(??___ftmul^(0+512)+1)
  5774  1300  0841               	movf	(___ftmul@f2+2)^(0+512),w
  5775  1301  00C4               	movwf	(??___ftmul^(0+512)+2)
  5776  1302  3010               	movlw	16
  5777  1303                     u8325:	
  5778  1303  36C4               	lsrf	(??___ftmul^(0+512)+2),f
  5779  1304  0CC3               	rrf	(??___ftmul^(0+512)+1),f
  5780  1305  0CC2               	rrf	??___ftmul^(0+512),f
  5781  1306  0B89               	decfsz	9,f
  5782  1307  2B03               	goto	u8325
  5783  1308  0842               	movf	??___ftmul^(0+512),w
  5784  1309  00C5               	movwf	(??___ftmul+3)^(0+512)
  5785  130A  0845               	movf	(??___ftmul+3)^(0+512),w
  5786  130B  06CB               	xorwf	___ftmul@sign^(0+512),f
  5787  130C  3080               	movlw	128
  5788  130D  00C2               	movwf	??___ftmul^(0+512)
  5789  130E  0842               	movf	??___ftmul^(0+512),w
  5790  130F  05CB               	andwf	___ftmul@sign^(0+512),f
  5791  1310  17BD               	bsf	(___ftmul@f1^(0+512)+1),7
  5792  1311  17C0               	bsf	(___ftmul@f2^(0+512)+1),7
  5793  1312  30FF               	movlw	255
  5794  1313  05BF               	andwf	___ftmul@f2^(0+512),f
  5795  1314  30FF               	movlw	255
  5796  1315  05C0               	andwf	(___ftmul@f2+1)^(0+512),f
  5797  1316  3000               	movlw	0
  5798  1317  05C1               	andwf	(___ftmul@f2+2)^(0+512),f
  5799  1318  3000               	movlw	0
  5800  1319  00C7               	movwf	___ftmul@f3_as_product^(0+512)
  5801  131A  3000               	movlw	0
  5802  131B  00C8               	movwf	(___ftmul@f3_as_product+1)^(0+512)
  5803  131C  3000               	movlw	0
  5804  131D  00C9               	movwf	(___ftmul@f3_as_product+2)^(0+512)
  5805  131E  3007               	movlw	7
  5806  131F  00C2               	movwf	??___ftmul^(0+512)
  5807  1320  0842               	movf	??___ftmul^(0+512),w
  5808  1321  00CA               	movwf	___ftmul@cntr^(0+512)
  5809  1322                     l6421:	
  5810  1322  1C3C               	btfss	___ftmul@f1^(0+512),0
  5811  1323  2B2A               	goto	l6425
  5812  1324  083F               	movf	___ftmul@f2^(0+512),w
  5813  1325  07C7               	addwf	___ftmul@f3_as_product^(0+512),f
  5814  1326  0840               	movf	(___ftmul@f2+1)^(0+512),w
  5815  1327  3DC8               	addwfc	(___ftmul@f3_as_product+1)^(0+512),f
  5816  1328  0841               	movf	(___ftmul@f2+2)^(0+512),w
  5817  1329  3DC9               	addwfc	(___ftmul@f3_as_product+2)^(0+512),f
  5818  132A                     l6425:	
  5819  132A  3001               	movlw	1
  5820  132B                     u8345:	
  5821  132B  36BE               	lsrf	(___ftmul@f1+2)^(0+512),f
  5822  132C  0CBD               	rrf	(___ftmul@f1+1)^(0+512),f
  5823  132D  0CBC               	rrf	___ftmul@f1^(0+512),f
  5824  132E  0B89               	decfsz	9,f
  5825  132F  2B2B               	goto	u8345
  5826  1330  3001               	movlw	1
  5827  1331                     u8355:	
  5828  1331  35BF               	lslf	___ftmul@f2^(0+512),f
  5829  1332  0DC0               	rlf	(___ftmul@f2+1)^(0+512),f
  5830  1333  0DC1               	rlf	(___ftmul@f2+2)^(0+512),f
  5831  1334  0B89               	decfsz	9,f
  5832  1335  2B31               	goto	u8355
  5833  1336  3001               	movlw	1
  5834  1337  02CA               	subwf	___ftmul@cntr^(0+512),f
  5835  1338  1D03               	btfss	3,2
  5836  1339  2B22               	goto	l6421
  5837  133A  3009               	movlw	9
  5838  133B  00C2               	movwf	??___ftmul^(0+512)
  5839  133C  0842               	movf	??___ftmul^(0+512),w
  5840  133D  00CA               	movwf	___ftmul@cntr^(0+512)
  5841  133E                     l6433:	
  5842  133E  1C3C               	btfss	___ftmul@f1^(0+512),0
  5843  133F  2B46               	goto	l6437
  5844  1340  083F               	movf	___ftmul@f2^(0+512),w
  5845  1341  07C7               	addwf	___ftmul@f3_as_product^(0+512),f
  5846  1342  0840               	movf	(___ftmul@f2+1)^(0+512),w
  5847  1343  3DC8               	addwfc	(___ftmul@f3_as_product+1)^(0+512),f
  5848  1344  0841               	movf	(___ftmul@f2+2)^(0+512),w
  5849  1345  3DC9               	addwfc	(___ftmul@f3_as_product+2)^(0+512),f
  5850  1346                     l6437:	
  5851  1346  3001               	movlw	1
  5852  1347                     u8385:	
  5853  1347  36BE               	lsrf	(___ftmul@f1+2)^(0+512),f
  5854  1348  0CBD               	rrf	(___ftmul@f1+1)^(0+512),f
  5855  1349  0CBC               	rrf	___ftmul@f1^(0+512),f
  5856  134A  0B89               	decfsz	9,f
  5857  134B  2B47               	goto	u8385
  5858  134C  3001               	movlw	1
  5859  134D                     u8395:	
  5860  134D  36C9               	lsrf	(___ftmul@f3_as_product+2)^(0+512),f
  5861  134E  0CC8               	rrf	(___ftmul@f3_as_product+1)^(0+512),f
  5862  134F  0CC7               	rrf	___ftmul@f3_as_product^(0+512),f
  5863  1350  0B89               	decfsz	9,f
  5864  1351  2B4D               	goto	u8395
  5865  1352  3001               	movlw	1
  5866  1353  02CA               	subwf	___ftmul@cntr^(0+512),f
  5867  1354  1D03               	btfss	3,2
  5868  1355  2B3E               	goto	l6433
  5869  1356  0847               	movf	___ftmul@f3_as_product^(0+512),w
  5870  1357  00A0               	movwf	___ftpack@arg^(0+512)
  5871  1358  0848               	movf	(___ftmul@f3_as_product+1)^(0+512),w
  5872  1359  00A1               	movwf	(___ftpack@arg+1)^(0+512)
  5873  135A  0849               	movf	(___ftmul@f3_as_product+2)^(0+512),w
  5874  135B  00A2               	movwf	(___ftpack@arg+2)^(0+512)
  5875  135C  0846               	movf	___ftmul@exp^(0+512),w
  5876  135D  00C2               	movwf	??___ftmul^(0+512)
  5877  135E  0842               	movf	??___ftmul^(0+512),w
  5878  135F  00A3               	movwf	___ftpack@exp^(0+512)
  5879  1360  084B               	movf	___ftmul@sign^(0+512),w
  5880  1361  00C3               	movwf	(??___ftmul+1)^(0+512)
  5881  1362  0843               	movf	(??___ftmul+1)^(0+512),w
  5882  1363  00A4               	movwf	___ftpack@sign^(0+512)
  5883  1364  3190  2024         	fcall	___ftpack
  5884  1366  0024               	movlb	4	; select bank4
  5885  1367  0820               	movf	?___ftpack^(0+512),w
  5886  1368  00BC               	movwf	?___ftmul^(0+512)
  5887  1369  0821               	movf	(?___ftpack+1)^(0+512),w
  5888  136A  00BD               	movwf	(?___ftmul+1)^(0+512)
  5889  136B  0822               	movf	(?___ftpack+2)^(0+512),w
  5890  136C  00BE               	movwf	(?___ftmul+2)^(0+512)
  5891  136D  0008               	return
  5892  136E                     __end_of___ftmul:	
  5893                           
  5894                           	psect	text5
  5895  1211                     __ptext5:	
  5896 ;; *************** function ___ftdiv *****************
  5897 ;; Defined at:
  5898 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic\ftdiv.c"
  5899 ;; Parameters:    Size  Location     Type
  5900 ;;  f2              3   12[BANK4 ] float 
  5901 ;;  f1              3   15[BANK4 ] float 
  5902 ;; Auto vars:     Size  Location     Type
  5903 ;;  f3              3   23[BANK4 ] float 
  5904 ;;  sign            1   27[BANK4 ] unsigned char 
  5905 ;;  exp             1   26[BANK4 ] unsigned char 
  5906 ;;  cntr            1   22[BANK4 ] unsigned char 
  5907 ;; Return value:  Size  Location     Type
  5908 ;;                  3   12[BANK4 ] float 
  5909 ;; Registers used:
  5910 ;;		wreg, status,2, status,0, pclath, cstack
  5911 ;; Tracked objects:
  5912 ;;		On entry : 0/0
  5913 ;;		On exit  : 0/0
  5914 ;;		Unchanged: 0/0
  5915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5916 ;;      Params:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5917 ;;      Locals:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5918 ;;      Temps:          0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  5919 ;;      Totals:         0       0       0       0       0      16       0       0       0       0       0       0       
      +0       0
  5920 ;;Total ram usage:       16 bytes
  5921 ;; Hardware stack levels used:    1
  5922 ;; Hardware stack levels required when called:    8
  5923 ;; This function calls:
  5924 ;;		___ftpack
  5925 ;; This function is called by:
  5926 ;;		_ReadVoltage
  5927 ;; This function uses a non-reentrant model
  5928 ;;
  5929                           
  5930                           
  5931                           ;psect for function ___ftdiv
  5932  1211                     ___ftdiv:	
  5933                           
  5934                           ;incstack = 0
  5935                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  5936  1211  0024               	movlb	4	; select bank4
  5937  1212  082F               	movf	___ftdiv@f1^(0+512),w
  5938  1213  00B2               	movwf	??___ftdiv^(0+512)
  5939  1214  0830               	movf	(___ftdiv@f1+1)^(0+512),w
  5940  1215  00B3               	movwf	(??___ftdiv^(0+512)+1)
  5941  1216  0831               	movf	(___ftdiv@f1+2)^(0+512),w
  5942  1217  00B4               	movwf	(??___ftdiv^(0+512)+2)
  5943  1218  1003               	clrc
  5944  1219  0D33               	rlf	(??___ftdiv^(0+512)+1),w
  5945  121A  0D34               	rlf	(??___ftdiv^(0+512)+2),w
  5946  121B  00B5               	movwf	(??___ftdiv+3)^(0+512)
  5947  121C  0835               	movf	(??___ftdiv+3)^(0+512),w
  5948  121D  00BA               	movwf	___ftdiv@exp^(0+512)
  5949  121E  08BA               	movf	___ftdiv@exp^(0+512),f
  5950  121F  1D03               	skipz
  5951  1220  2A28               	goto	l6361
  5952  1221  3000               	movlw	0
  5953  1222  00AC               	movwf	?___ftdiv^(0+512)
  5954  1223  3000               	movlw	0
  5955  1224  00AD               	movwf	(?___ftdiv+1)^(0+512)
  5956  1225  3000               	movlw	0
  5957  1226  00AE               	movwf	(?___ftdiv+2)^(0+512)
  5958  1227  0008               	return
  5959  1228                     l6361:	
  5960  1228  082C               	movf	___ftdiv@f2^(0+512),w
  5961  1229  00B2               	movwf	??___ftdiv^(0+512)
  5962  122A  082D               	movf	(___ftdiv@f2+1)^(0+512),w
  5963  122B  00B3               	movwf	(??___ftdiv^(0+512)+1)
  5964  122C  082E               	movf	(___ftdiv@f2+2)^(0+512),w
  5965  122D  00B4               	movwf	(??___ftdiv^(0+512)+2)
  5966  122E  1003               	clrc
  5967  122F  0D33               	rlf	(??___ftdiv^(0+512)+1),w
  5968  1230  0D34               	rlf	(??___ftdiv^(0+512)+2),w
  5969  1231  00B5               	movwf	(??___ftdiv+3)^(0+512)
  5970  1232  0835               	movf	(??___ftdiv+3)^(0+512),w
  5971  1233  00BB               	movwf	___ftdiv@sign^(0+512)
  5972  1234  08BB               	movf	___ftdiv@sign^(0+512),f
  5973  1235  1D03               	skipz
  5974  1236  2A3E               	goto	l6367
  5975  1237  3000               	movlw	0
  5976  1238  00AC               	movwf	?___ftdiv^(0+512)
  5977  1239  3000               	movlw	0
  5978  123A  00AD               	movwf	(?___ftdiv+1)^(0+512)
  5979  123B  3000               	movlw	0
  5980  123C  00AE               	movwf	(?___ftdiv+2)^(0+512)
  5981  123D  0008               	return
  5982  123E                     l6367:	
  5983  123E  3000               	movlw	0
  5984  123F  00B7               	movwf	___ftdiv@f3^(0+512)
  5985  1240  3000               	movlw	0
  5986  1241  00B8               	movwf	(___ftdiv@f3+1)^(0+512)
  5987  1242  3000               	movlw	0
  5988  1243  00B9               	movwf	(___ftdiv@f3+2)^(0+512)
  5989  1244  3089               	movlw	137
  5990  1245  073B               	addwf	___ftdiv@sign^(0+512),w
  5991  1246  00B2               	movwf	??___ftdiv^(0+512)
  5992  1247  0832               	movf	??___ftdiv^(0+512),w
  5993  1248  02BA               	subwf	___ftdiv@exp^(0+512),f
  5994  1249  082F               	movf	___ftdiv@f1^(0+512),w
  5995  124A  00B2               	movwf	??___ftdiv^(0+512)
  5996  124B  0830               	movf	(___ftdiv@f1+1)^(0+512),w
  5997  124C  00B3               	movwf	(??___ftdiv^(0+512)+1)
  5998  124D  0831               	movf	(___ftdiv@f1+2)^(0+512),w
  5999  124E  00B4               	movwf	(??___ftdiv^(0+512)+2)
  6000  124F  3010               	movlw	16
  6001  1250                     u8235:	
  6002  1250  36B4               	lsrf	(??___ftdiv^(0+512)+2),f
  6003  1251  0CB3               	rrf	(??___ftdiv^(0+512)+1),f
  6004  1252  0CB2               	rrf	??___ftdiv^(0+512),f
  6005  1253  0B89               	decfsz	9,f
  6006  1254  2A50               	goto	u8235
  6007  1255  0832               	movf	??___ftdiv^(0+512),w
  6008  1256  00B5               	movwf	(??___ftdiv+3)^(0+512)
  6009  1257  0835               	movf	(??___ftdiv+3)^(0+512),w
  6010  1258  00BB               	movwf	___ftdiv@sign^(0+512)
  6011  1259  082C               	movf	___ftdiv@f2^(0+512),w
  6012  125A  00B2               	movwf	??___ftdiv^(0+512)
  6013  125B  082D               	movf	(___ftdiv@f2+1)^(0+512),w
  6014  125C  00B3               	movwf	(??___ftdiv^(0+512)+1)
  6015  125D  082E               	movf	(___ftdiv@f2+2)^(0+512),w
  6016  125E  00B4               	movwf	(??___ftdiv^(0+512)+2)
  6017  125F  3010               	movlw	16
  6018  1260                     u8245:	
  6019  1260  36B4               	lsrf	(??___ftdiv^(0+512)+2),f
  6020  1261  0CB3               	rrf	(??___ftdiv^(0+512)+1),f
  6021  1262  0CB2               	rrf	??___ftdiv^(0+512),f
  6022  1263  0B89               	decfsz	9,f
  6023  1264  2A60               	goto	u8245
  6024  1265  0832               	movf	??___ftdiv^(0+512),w
  6025  1266  00B5               	movwf	(??___ftdiv+3)^(0+512)
  6026  1267  0835               	movf	(??___ftdiv+3)^(0+512),w
  6027  1268  06BB               	xorwf	___ftdiv@sign^(0+512),f
  6028  1269  3080               	movlw	128
  6029  126A  00B2               	movwf	??___ftdiv^(0+512)
  6030  126B  0832               	movf	??___ftdiv^(0+512),w
  6031  126C  05BB               	andwf	___ftdiv@sign^(0+512),f
  6032  126D  17B0               	bsf	(___ftdiv@f1^(0+512)+1),7
  6033  126E  30FF               	movlw	255
  6034  126F  05AF               	andwf	___ftdiv@f1^(0+512),f
  6035  1270  30FF               	movlw	255
  6036  1271  05B0               	andwf	(___ftdiv@f1+1)^(0+512),f
  6037  1272  3000               	movlw	0
  6038  1273  05B1               	andwf	(___ftdiv@f1+2)^(0+512),f
  6039  1274  17AD               	bsf	(___ftdiv@f2^(0+512)+1),7
  6040  1275  30FF               	movlw	255
  6041  1276  05AC               	andwf	___ftdiv@f2^(0+512),f
  6042  1277  30FF               	movlw	255
  6043  1278  05AD               	andwf	(___ftdiv@f2+1)^(0+512),f
  6044  1279  3000               	movlw	0
  6045  127A  05AE               	andwf	(___ftdiv@f2+2)^(0+512),f
  6046  127B  3018               	movlw	24
  6047  127C  00B2               	movwf	??___ftdiv^(0+512)
  6048  127D  0832               	movf	??___ftdiv^(0+512),w
  6049  127E  00B6               	movwf	___ftdiv@cntr^(0+512)
  6050  127F                     l6381:	
  6051  127F  3001               	movlw	1
  6052  1280                     u8255:	
  6053  1280  35B7               	lslf	___ftdiv@f3^(0+512),f
  6054  1281  0DB8               	rlf	(___ftdiv@f3+1)^(0+512),f
  6055  1282  0DB9               	rlf	(___ftdiv@f3+2)^(0+512),f
  6056  1283  0B89               	decfsz	9,f
  6057  1284  2A80               	goto	u8255
  6058  1285  082E               	movf	(___ftdiv@f2+2)^(0+512),w
  6059  1286  0231               	subwf	(___ftdiv@f1+2)^(0+512),w
  6060  1287  1D03               	skipz
  6061  1288  2A8F               	goto	u8265
  6062  1289  082D               	movf	(___ftdiv@f2+1)^(0+512),w
  6063  128A  0230               	subwf	(___ftdiv@f1+1)^(0+512),w
  6064  128B  1D03               	skipz
  6065  128C  2A8F               	goto	u8265
  6066  128D  082C               	movf	___ftdiv@f2^(0+512),w
  6067  128E  022F               	subwf	___ftdiv@f1^(0+512),w
  6068  128F                     u8265:	
  6069  128F  1C03               	skipc
  6070  1290  2A98               	goto	l6389
  6071  1291  082C               	movf	___ftdiv@f2^(0+512),w
  6072  1292  02AF               	subwf	___ftdiv@f1^(0+512),f
  6073  1293  082D               	movf	(___ftdiv@f2+1)^(0+512),w
  6074  1294  3BB0               	subwfb	(___ftdiv@f1+1)^(0+512),f
  6075  1295  082E               	movf	(___ftdiv@f2+2)^(0+512),w
  6076  1296  3BB1               	subwfb	(___ftdiv@f1+2)^(0+512),f
  6077  1297  1437               	bsf	___ftdiv@f3^(0+512),0
  6078  1298                     l6389:	
  6079  1298  3001               	movlw	1
  6080  1299                     u8275:	
  6081  1299  35AF               	lslf	___ftdiv@f1^(0+512),f
  6082  129A  0DB0               	rlf	(___ftdiv@f1+1)^(0+512),f
  6083  129B  0DB1               	rlf	(___ftdiv@f1+2)^(0+512),f
  6084  129C  0B89               	decfsz	9,f
  6085  129D  2A99               	goto	u8275
  6086  129E  3001               	movlw	1
  6087  129F  02B6               	subwf	___ftdiv@cntr^(0+512),f
  6088  12A0  1D03               	btfss	3,2
  6089  12A1  2A7F               	goto	l6381
  6090  12A2  0837               	movf	___ftdiv@f3^(0+512),w
  6091  12A3  00A0               	movwf	___ftpack@arg^(0+512)
  6092  12A4  0838               	movf	(___ftdiv@f3+1)^(0+512),w
  6093  12A5  00A1               	movwf	(___ftpack@arg+1)^(0+512)
  6094  12A6  0839               	movf	(___ftdiv@f3+2)^(0+512),w
  6095  12A7  00A2               	movwf	(___ftpack@arg+2)^(0+512)
  6096  12A8  083A               	movf	___ftdiv@exp^(0+512),w
  6097  12A9  00B2               	movwf	??___ftdiv^(0+512)
  6098  12AA  0832               	movf	??___ftdiv^(0+512),w
  6099  12AB  00A3               	movwf	___ftpack@exp^(0+512)
  6100  12AC  083B               	movf	___ftdiv@sign^(0+512),w
  6101  12AD  00B3               	movwf	(??___ftdiv+1)^(0+512)
  6102  12AE  0833               	movf	(??___ftdiv+1)^(0+512),w
  6103  12AF  00A4               	movwf	___ftpack@sign^(0+512)
  6104  12B0  3190  2024         	fcall	___ftpack
  6105  12B2  0024               	movlb	4	; select bank4
  6106  12B3  0820               	movf	?___ftpack^(0+512),w
  6107  12B4  00AC               	movwf	?___ftdiv^(0+512)
  6108  12B5  0821               	movf	(?___ftpack+1)^(0+512),w
  6109  12B6  00AD               	movwf	(?___ftdiv+1)^(0+512)
  6110  12B7  0822               	movf	(?___ftpack+2)^(0+512),w
  6111  12B8  00AE               	movwf	(?___ftdiv+2)^(0+512)
  6112  12B9  0008               	return
  6113  12BA                     __end_of___ftdiv:	
  6114                           
  6115                           	psect	text6
  6116  1024                     __ptext6:	
  6117 ;; *************** function ___ftpack *****************
  6118 ;; Defined at:
  6119 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  6120 ;; Parameters:    Size  Location     Type
  6121 ;;  arg             3    0[BANK4 ] unsigned um
  6122 ;;  exp             1    3[BANK4 ] unsigned char 
  6123 ;;  sign            1    4[BANK4 ] unsigned char 
  6124 ;; Auto vars:     Size  Location     Type
  6125 ;;		None
  6126 ;; Return value:  Size  Location     Type
  6127 ;;                  3    0[BANK4 ] float 
  6128 ;; Registers used:
  6129 ;;		wreg, status,2, status,0
  6130 ;; Tracked objects:
  6131 ;;		On entry : 0/0
  6132 ;;		On exit  : 0/0
  6133 ;;		Unchanged: 0/0
  6134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6135 ;;      Params:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  6136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6137 ;;      Temps:          0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  6138 ;;      Totals:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  6139 ;;Total ram usage:        8 bytes
  6140 ;; Hardware stack levels used:    1
  6141 ;; Hardware stack levels required when called:    7
  6142 ;; This function calls:
  6143 ;;		Nothing
  6144 ;; This function is called by:
  6145 ;;		___ftdiv
  6146 ;;		___ftmul
  6147 ;;		___lwtoft
  6148 ;; This function uses a non-reentrant model
  6149 ;;
  6150                           
  6151                           
  6152                           ;psect for function ___ftpack
  6153  1024                     ___ftpack:	
  6154                           
  6155                           ;incstack = 0
  6156                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6157  1024  0024               	movlb	4	; select bank4
  6158  1025  0823               	movf	___ftpack@exp^(0+512),w
  6159  1026  1903               	btfsc	3,2
  6160  1027  282D               	goto	l6127
  6161  1028  0822               	movf	(___ftpack@arg+2)^(0+512),w
  6162  1029  0421               	iorwf	(___ftpack@arg+1)^(0+512),w
  6163  102A  0420               	iorwf	___ftpack@arg^(0+512),w
  6164  102B  1D03               	skipz
  6165  102C  283E               	goto	l6133
  6166  102D                     l6127:	
  6167  102D  3000               	movlw	0
  6168  102E  00A0               	movwf	?___ftpack^(0+512)
  6169  102F  3000               	movlw	0
  6170  1030  00A1               	movwf	(?___ftpack+1)^(0+512)
  6171  1031  3000               	movlw	0
  6172  1032  00A2               	movwf	(?___ftpack+2)^(0+512)
  6173  1033  0008               	return
  6174  1034                     l6131:	
  6175  1034  3001               	movlw	1
  6176  1035  00A5               	movwf	??___ftpack^(0+512)
  6177  1036  0825               	movf	??___ftpack^(0+512),w
  6178  1037  07A3               	addwf	___ftpack@exp^(0+512),f
  6179  1038  3001               	movlw	1
  6180  1039                     u7855:	
  6181  1039  36A2               	lsrf	(___ftpack@arg+2)^(0+512),f
  6182  103A  0CA1               	rrf	(___ftpack@arg+1)^(0+512),f
  6183  103B  0CA0               	rrf	___ftpack@arg^(0+512),f
  6184  103C  0B89               	decfsz	9,f
  6185  103D  2839               	goto	u7855
  6186  103E                     l6133:	
  6187  103E  30FE               	movlw	254
  6188  103F  0522               	andwf	(___ftpack@arg+2)^(0+512),w
  6189  1040  1903               	btfsc	3,2
  6190  1041  2857               	goto	l1257
  6191  1042  2834               	goto	l6131
  6192  1043                     l6135:	
  6193  1043  3001               	movlw	1
  6194  1044  00A5               	movwf	??___ftpack^(0+512)
  6195  1045  0825               	movf	??___ftpack^(0+512),w
  6196  1046  07A3               	addwf	___ftpack@exp^(0+512),f
  6197  1047  3001               	movlw	1
  6198  1048  07A0               	addwf	___ftpack@arg^(0+512),f
  6199  1049  3000               	movlw	0
  6200  104A  1803               	skipnc
  6201  104B  3001               	movlw	1
  6202  104C  07A1               	addwf	(___ftpack@arg+1)^(0+512),f
  6203  104D  3000               	movlw	0
  6204  104E  1803               	skipnc
  6205  104F  3001               	movlw	1
  6206  1050  07A2               	addwf	(___ftpack@arg+2)^(0+512),f
  6207  1051  3001               	movlw	1
  6208  1052                     u7875:	
  6209  1052  36A2               	lsrf	(___ftpack@arg+2)^(0+512),f
  6210  1053  0CA1               	rrf	(___ftpack@arg+1)^(0+512),f
  6211  1054  0CA0               	rrf	___ftpack@arg^(0+512),f
  6212  1055  0B89               	decfsz	9,f
  6213  1056  2852               	goto	u7875
  6214  1057                     l1257:	
  6215  1057  30FF               	movlw	255
  6216  1058  0522               	andwf	(___ftpack@arg+2)^(0+512),w
  6217  1059  1903               	btfsc	3,2
  6218  105A  2864               	goto	l6143
  6219  105B  2843               	goto	l6135
  6220  105C                     l6141:	
  6221  105C  3001               	movlw	1
  6222  105D  02A3               	subwf	___ftpack@exp^(0+512),f
  6223  105E  3001               	movlw	1
  6224  105F                     u7895:	
  6225  105F  35A0               	lslf	___ftpack@arg^(0+512),f
  6226  1060  0DA1               	rlf	(___ftpack@arg+1)^(0+512),f
  6227  1061  0DA2               	rlf	(___ftpack@arg+2)^(0+512),f
  6228  1062  0B89               	decfsz	9,f
  6229  1063  285F               	goto	u7895
  6230  1064                     l6143:	
  6231  1064  1FA1               	btfss	(___ftpack@arg+1)^(0+512),7
  6232  1065  285C               	goto	l6141
  6233  1066  1823               	btfsc	___ftpack@exp^(0+512),0
  6234  1067  286E               	goto	l1263
  6235  1068  30FF               	movlw	255
  6236  1069  05A0               	andwf	___ftpack@arg^(0+512),f
  6237  106A  307F               	movlw	127
  6238  106B  05A1               	andwf	(___ftpack@arg+1)^(0+512),f
  6239  106C  30FF               	movlw	255
  6240  106D  05A2               	andwf	(___ftpack@arg+2)^(0+512),f
  6241  106E                     l1263:	
  6242  106E  1003               	clrc
  6243  106F  0CA3               	rrf	___ftpack@exp^(0+512),f
  6244  1070  0823               	movf	___ftpack@exp^(0+512),w
  6245  1071  00A5               	movwf	??___ftpack^(0+512)
  6246  1072  01A6               	clrf	(??___ftpack^(0+512)+1)
  6247  1073  01A7               	clrf	(??___ftpack^(0+512)+2)
  6248  1074  3010               	movlw	16
  6249  1075                     u7925:	
  6250  1075  35A5               	lslf	??___ftpack^(0+512),f
  6251  1076  0DA6               	rlf	(??___ftpack^(0+512)+1),f
  6252  1077  0DA7               	rlf	(??___ftpack^(0+512)+2),f
  6253  1078  0B89               	decfsz	9,f
  6254  1079  2875               	goto	u7925
  6255  107A  0825               	movf	??___ftpack^(0+512),w
  6256  107B  04A0               	iorwf	___ftpack@arg^(0+512),f
  6257  107C  0826               	movf	(??___ftpack+1)^(0+512),w
  6258  107D  04A1               	iorwf	(___ftpack@arg+1)^(0+512),f
  6259  107E  0827               	movf	(??___ftpack+2)^(0+512),w
  6260  107F  04A2               	iorwf	(___ftpack@arg+2)^(0+512),f
  6261  1080  0824               	movf	___ftpack@sign^(0+512),w
  6262  1081  1903               	btfsc	3,2
  6263  1082  0008               	return
  6264  1083  17A2               	bsf	(___ftpack@arg^(0+512)+2),7
  6265  1084  0008               	return
  6266  1085                     __end_of___ftpack:	
  6267                           
  6268                           	psect	text7
  6269  1D72                     __ptext7:	
  6270 ;; *************** function _InternalADC_Read *****************
  6271 ;; Defined at:
  6272 ;;		line 97 in file "ADC.c"
  6273 ;; Parameters:    Size  Location     Type
  6274 ;;  channel         1    wreg     unsigned char 
  6275 ;; Auto vars:     Size  Location     Type
  6276 ;;  channel         1   14[BANK4 ] unsigned char 
  6277 ;; Return value:  Size  Location     Type
  6278 ;;                  2   10[BANK4 ] unsigned int 
  6279 ;; Registers used:
  6280 ;;		wreg, status,2, status,0, pclath, cstack
  6281 ;; Tracked objects:
  6282 ;;		On entry : 0/0
  6283 ;;		On exit  : 0/0
  6284 ;;		Unchanged: 0/0
  6285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6286 ;;      Params:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  6287 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6288 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  6289 ;;      Totals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  6290 ;;Total ram usage:        5 bytes
  6291 ;; Hardware stack levels used:    1
  6292 ;; Hardware stack levels required when called:    8
  6293 ;; This function calls:
  6294 ;;		_delayUS
  6295 ;; This function is called by:
  6296 ;;		_ReadVoltage
  6297 ;; This function uses a non-reentrant model
  6298 ;;
  6299                           
  6300                           
  6301                           ;psect for function _InternalADC_Read
  6302  1D72                     _InternalADC_Read:	
  6303                           
  6304                           ;incstack = 0
  6305                           ; Regs used in _InternalADC_Read: [wreg+status,2+status,0+pclath+cstack]
  6306                           ;InternalADC_Read@channel stored from wreg
  6307  1D72  0024               	movlb	4	; select bank4
  6308  1D73  00AE               	movwf	InternalADC_Read@channel^(0+512)
  6309                           
  6310                           ;ADC.c: 99: ADCON0 =0;
  6311  1D74  0021               	movlb	1	; select bank1
  6312  1D75  019D               	clrf	29	;volatile
  6313                           
  6314                           ;ADC.c: 100: ADCON1 =0;
  6315  1D76  019E               	clrf	30	;volatile
  6316                           
  6317                           ;ADC.c: 101: ADCON1 |= 0b01010000;
  6318  1D77  3050               	movlw	80
  6319  1D78  0024               	movlb	4	; select bank4
  6320  1D79  00AC               	movwf	??_InternalADC_Read^(0+512)
  6321  1D7A  082C               	movf	??_InternalADC_Read^(0+512),w
  6322  1D7B  0021               	movlb	1	; select bank1
  6323  1D7C  049E               	iorwf	30,f	;volatile
  6324                           
  6325                           ;ADC.c: 102: FVRCON |= 0b10000000;
  6326  1D7D  0022               	movlb	2	; select bank2
  6327  1D7E  1797               	bsf	23,7	;volatile
  6328                           
  6329                           ;ADC.c: 103: FVRCON |= 0b00000011;
  6330  1D7F  3003               	movlw	3
  6331  1D80  0024               	movlb	4	; select bank4
  6332  1D81  00AC               	movwf	??_InternalADC_Read^(0+512)
  6333  1D82  082C               	movf	??_InternalADC_Read^(0+512),w
  6334  1D83  0022               	movlb	2	; select bank2
  6335  1D84  0497               	iorwf	23,f	;volatile
  6336  1D85                     l1025:	
  6337                           ;ADC.c: 104: while(!(FVRCON & 0b01000000));
  6338                           
  6339  1D85  1F17               	btfss	23,6	;volatile
  6340  1D86  2D85               	goto	l1025
  6341                           
  6342                           ;ADC.c: 105: ADCON0 |= (channel << 2);
  6343  1D87  0024               	movlb	4	; select bank4
  6344  1D88  082E               	movf	InternalADC_Read@channel^(0+512),w
  6345  1D89  00AC               	movwf	??_InternalADC_Read^(0+512)
  6346  1D8A  3001               	movlw	1
  6347  1D8B                     u8195:	
  6348  1D8B  35AC               	lslf	??_InternalADC_Read^(0+512),f
  6349  1D8C  3EFF               	addlw	-1
  6350  1D8D  1D03               	skipz
  6351  1D8E  2D8B               	goto	u8195
  6352  1D8F  352C               	lslf	??_InternalADC_Read^(0+512),w
  6353  1D90  00AD               	movwf	(??_InternalADC_Read+1)^(0+512)
  6354  1D91  082D               	movf	(??_InternalADC_Read+1)^(0+512),w
  6355  1D92  0021               	movlb	1	; select bank1
  6356  1D93  049D               	iorwf	29,f	;volatile
  6357                           
  6358                           ;ADC.c: 106: ADCON1 |= 0b10000011;
  6359  1D94  3083               	movlw	131
  6360  1D95  0024               	movlb	4	; select bank4
  6361  1D96  00AC               	movwf	??_InternalADC_Read^(0+512)
  6362  1D97  082C               	movf	??_InternalADC_Read^(0+512),w
  6363  1D98  0021               	movlb	1	; select bank1
  6364  1D99  049E               	iorwf	30,f	;volatile
  6365                           
  6366                           ;ADC.c: 107: ADCON0 |= 0b00000001;
  6367  1D9A  141D               	bsf	29,0	;volatile
  6368                           
  6369                           ;ADC.c: 108: (PIE1bits.ADIE=0);
  6370  1D9B  1311               	bcf	17,6	;volatile
  6371                           
  6372                           ;ADC.c: 109: delayUS(5);
  6373  1D9C  3000               	movlw	0
  6374  1D9D  0024               	movlb	4	; select bank4
  6375  1D9E  00A3               	movwf	(delayUS@US+3)^(0+512)
  6376  1D9F  3000               	movlw	0
  6377  1DA0  00A2               	movwf	(delayUS@US+2)^(0+512)
  6378  1DA1  3000               	movlw	0
  6379  1DA2  00A1               	movwf	(delayUS@US+1)^(0+512)
  6380  1DA3  3005               	movlw	5
  6381  1DA4  00A0               	movwf	delayUS@US^(0+512)
  6382  1DA5  319B  23F9  319D   	fcall	_delayUS
  6383                           
  6384                           ;ADC.c: 110: ADCON0 |= 0b00000010;
  6385  1DA8  0021               	movlb	1	; select bank1
  6386  1DA9  149D               	bsf	29,1	;volatile
  6387  1DAA                     l1028:	
  6388                           ;ADC.c: 111: while(ADCON0 & 0b00000010);
  6389                           
  6390  1DAA  189D               	btfsc	29,1	;volatile
  6391  1DAB  2DAA               	goto	l1028
  6392                           
  6393                           ;ADC.c: 112: return ((ADRESH << 8) + ADRESL);
  6394  1DAC  081C               	movf	28,w	;volatile
  6395  1DAD  0024               	movlb	4	; select bank4
  6396  1DAE  01AB               	clrf	(?_InternalADC_Read+1)^(0+512)
  6397  1DAF  07AB               	addwf	(?_InternalADC_Read+1)^(0+512),f
  6398  1DB0  0021               	movlb	1	; select bank1
  6399  1DB1  081B               	movf	27,w	;volatile
  6400  1DB2  0024               	movlb	4	; select bank4
  6401  1DB3  01AA               	clrf	?_InternalADC_Read^(0+512)
  6402  1DB4  07AA               	addwf	?_InternalADC_Read^(0+512),f
  6403  1DB5  0008               	return
  6404  1DB6                     __end_of_InternalADC_Read:	
  6405                           
  6406                           	psect	text8
  6407  18D0                     __ptext8:	
  6408 ;; *************** function _DisableInternalADC *****************
  6409 ;; Defined at:
  6410 ;;		line 120 in file "ADC.c"
  6411 ;; Parameters:    Size  Location     Type
  6412 ;;		None
  6413 ;; Auto vars:     Size  Location     Type
  6414 ;;		None
  6415 ;; Return value:  Size  Location     Type
  6416 ;;		None               void
  6417 ;; Registers used:
  6418 ;;		wreg, status,2, status,0
  6419 ;; Tracked objects:
  6420 ;;		On entry : 0/0
  6421 ;;		On exit  : 0/0
  6422 ;;		Unchanged: 0/0
  6423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6426 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6427 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6428 ;;Total ram usage:        1 bytes
  6429 ;; Hardware stack levels used:    1
  6430 ;; Hardware stack levels required when called:    7
  6431 ;; This function calls:
  6432 ;;		Nothing
  6433 ;; This function is called by:
  6434 ;;		_ReadVoltage
  6435 ;; This function uses a non-reentrant model
  6436 ;;
  6437                           
  6438                           
  6439                           ;psect for function _DisableInternalADC
  6440  18D0                     _DisableInternalADC:	
  6441                           
  6442                           ;ADC.c: 122: ADCON0 &= ~0b00000001;
  6443                           
  6444                           ;incstack = 0
  6445                           ; Regs used in _DisableInternalADC: [wreg+status,2+status,0]
  6446  18D0  30FE               	movlw	254
  6447  18D1  0024               	movlb	4	; select bank4
  6448  18D2  00A0               	movwf	??_DisableInternalADC^(0+512)
  6449  18D3  0820               	movf	??_DisableInternalADC^(0+512),w
  6450  18D4  0021               	movlb	1	; select bank1
  6451  18D5  059D               	andwf	29,f	;volatile
  6452  18D6  0008               	return
  6453  18D7                     __end_of_DisableInternalADC:	
  6454                           
  6455                           	psect	text9
  6456  1953                     __ptext9:	
  6457 ;; *************** function _PS_2_INIT *****************
  6458 ;; Defined at:
  6459 ;;		line 100 in file "PS_2.c"
  6460 ;; Parameters:    Size  Location     Type
  6461 ;;		None
  6462 ;; Auto vars:     Size  Location     Type
  6463 ;;		None
  6464 ;; Return value:  Size  Location     Type
  6465 ;;		None               void
  6466 ;; Registers used:
  6467 ;;		wreg, status,2, status,0, pclath, cstack
  6468 ;; Tracked objects:
  6469 ;;		On entry : 0/0
  6470 ;;		On exit  : 0/0
  6471 ;;		Unchanged: 0/0
  6472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6476 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6477 ;;Total ram usage:        0 bytes
  6478 ;; Hardware stack levels used:    1
  6479 ;; Hardware stack levels required when called:    9
  6480 ;; This function calls:
  6481 ;;		_Clock_TRIS
  6482 ;;		_Data_TRIS
  6483 ;;		_Timer2Init
  6484 ;; This function is called by:
  6485 ;;		_main
  6486 ;; This function uses a non-reentrant model
  6487 ;;
  6488                           
  6489                           
  6490                           ;psect for function _PS_2_INIT
  6491  1953                     _PS_2_INIT:	
  6492                           
  6493                           ;PS_2.c: 103: Clock_TRIS(1);
  6494                           
  6495                           ;incstack = 0
  6496                           ; Regs used in _PS_2_INIT: [wreg+status,2+status,0+pclath+cstack]
  6497  1953  3001               	movlw	1
  6498  1954  3199  2125  3199   	fcall	_Clock_TRIS
  6499                           
  6500                           ;PS_2.c: 104: Data_TRIS(1);
  6501  1957  3001               	movlw	1
  6502  1958  3199  2130  3199   	fcall	_Data_TRIS
  6503                           
  6504                           ;PS_2.c: 105: Timer2Init(255);
  6505  195B  30FF               	movlw	255
  6506  195C  319A  2278         	fcall	_Timer2Init
  6507  195E  0008               	return
  6508  195F                     __end_of_PS_2_INIT:	
  6509                           
  6510                           	psect	text10
  6511  1A78                     __ptext10:	
  6512 ;; *************** function _Timer2Init *****************
  6513 ;; Defined at:
  6514 ;;		line 41 in file "Timer.c"
  6515 ;; Parameters:    Size  Location     Type
  6516 ;;  time            1    wreg     unsigned char 
  6517 ;; Auto vars:     Size  Location     Type
  6518 ;;  time            1    2[BANK4 ] unsigned char 
  6519 ;;  prescaler       1    4[BANK4 ] unsigned char 
  6520 ;;  postscaler      1    3[BANK4 ] unsigned char 
  6521 ;; Return value:  Size  Location     Type
  6522 ;;		None               void
  6523 ;; Registers used:
  6524 ;;		wreg, status,2, status,0, pclath, cstack
  6525 ;; Tracked objects:
  6526 ;;		On entry : 0/0
  6527 ;;		On exit  : 0/0
  6528 ;;		Unchanged: 0/0
  6529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6531 ;;      Locals:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  6532 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  6533 ;;      Totals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  6534 ;;Total ram usage:        5 bytes
  6535 ;; Hardware stack levels used:    1
  6536 ;; Hardware stack levels required when called:    8
  6537 ;; This function calls:
  6538 ;;		_Timer2ON
  6539 ;; This function is called by:
  6540 ;;		_PS_2_INIT
  6541 ;; This function uses a non-reentrant model
  6542 ;;
  6543                           
  6544                           
  6545                           ;psect for function _Timer2Init
  6546  1A78                     _Timer2Init:	
  6547                           
  6548                           ;incstack = 0
  6549                           ; Regs used in _Timer2Init: [wreg+status,2+status,0+pclath+cstack]
  6550                           ;Timer2Init@time stored from wreg
  6551  1A78  0024               	movlb	4	; select bank4
  6552  1A79  00A2               	movwf	Timer2Init@time^(0+512)
  6553                           
  6554                           ;Timer.c: 43: unsigned char postscaler =0xF;
  6555  1A7A  300F               	movlw	15
  6556  1A7B  00A0               	movwf	??_Timer2Init^(0+512)
  6557  1A7C  0820               	movf	??_Timer2Init^(0+512),w
  6558  1A7D  00A3               	movwf	Timer2Init@postscaler^(0+512)
  6559                           
  6560                           ;Timer.c: 44: unsigned char prescaler =3;
  6561  1A7E  3003               	movlw	3
  6562  1A7F  00A0               	movwf	??_Timer2Init^(0+512)
  6563  1A80  0820               	movf	??_Timer2Init^(0+512),w
  6564  1A81  00A4               	movwf	Timer2Init@prescaler^(0+512)
  6565                           
  6566                           ;Timer.c: 45: CCP2CONbits.CCP2M = 0b1010;
  6567  1A82  0025               	movlb	5	; select bank5
  6568  1A83  081A               	movf	26,w	;volatile
  6569  1A84  39F0               	andlw	-16
  6570  1A85  380A               	iorlw	10
  6571  1A86  009A               	movwf	26	;volatile
  6572                           
  6573                           ;Timer.c: 46: PR2 = time;
  6574  1A87  0024               	movlb	4	; select bank4
  6575  1A88  0822               	movf	Timer2Init@time^(0+512),w
  6576  1A89  0020               	movlb	0	; select bank0
  6577  1A8A  009B               	movwf	27	;volatile
  6578                           
  6579                           ;Timer.c: 47: T2CON |= postscaler << 3;
  6580  1A8B  0024               	movlb	4	; select bank4
  6581  1A8C  0823               	movf	Timer2Init@postscaler^(0+512),w
  6582  1A8D  00A0               	movwf	??_Timer2Init^(0+512)
  6583  1A8E  3002               	movlw	2
  6584  1A8F                     u8175:	
  6585  1A8F  35A0               	lslf	??_Timer2Init^(0+512),f
  6586  1A90  3EFF               	addlw	-1
  6587  1A91  1D03               	skipz
  6588  1A92  2A8F               	goto	u8175
  6589  1A93  3520               	lslf	??_Timer2Init^(0+512),w
  6590  1A94  00A1               	movwf	(??_Timer2Init+1)^(0+512)
  6591  1A95  0821               	movf	(??_Timer2Init+1)^(0+512),w
  6592  1A96  0020               	movlb	0	; select bank0
  6593  1A97  049C               	iorwf	28,f	;volatile
  6594                           
  6595                           ;Timer.c: 48: T2CON |= prescaler;
  6596  1A98  0024               	movlb	4	; select bank4
  6597  1A99  0824               	movf	Timer2Init@prescaler^(0+512),w
  6598  1A9A  00A0               	movwf	??_Timer2Init^(0+512)
  6599  1A9B  0820               	movf	??_Timer2Init^(0+512),w
  6600  1A9C  0020               	movlb	0	; select bank0
  6601  1A9D  049C               	iorwf	28,f	;volatile
  6602                           
  6603                           ;Timer.c: 50: Timer2ON();
  6604  1A9E  3198  20A7         	fcall	_Timer2ON
  6605                           
  6606                           ;Timer.c: 51: PIE1bits.TMR2IE = 0;
  6607  1AA0  0021               	movlb	1	; select bank1
  6608  1AA1  1091               	bcf	17,1	;volatile
  6609  1AA2  0008               	return
  6610  1AA3                     __end_of_Timer2Init:	
  6611                           
  6612                           	psect	text11
  6613  18A7                     __ptext11:	
  6614 ;; *************** function _Timer2ON *****************
  6615 ;; Defined at:
  6616 ;;		line 59 in file "Timer.c"
  6617 ;; Parameters:    Size  Location     Type
  6618 ;;		None
  6619 ;; Auto vars:     Size  Location     Type
  6620 ;;		None
  6621 ;; Return value:  Size  Location     Type
  6622 ;;		None               void
  6623 ;; Registers used:
  6624 ;;		None
  6625 ;; Tracked objects:
  6626 ;;		On entry : 0/0
  6627 ;;		On exit  : 0/0
  6628 ;;		Unchanged: 0/0
  6629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6634 ;;Total ram usage:        0 bytes
  6635 ;; Hardware stack levels used:    1
  6636 ;; Hardware stack levels required when called:    7
  6637 ;; This function calls:
  6638 ;;		Nothing
  6639 ;; This function is called by:
  6640 ;;		_Timer2Init
  6641 ;; This function uses a non-reentrant model
  6642 ;;
  6643                           
  6644                           
  6645                           ;psect for function _Timer2ON
  6646  18A7                     _Timer2ON:	
  6647                           
  6648                           ;Timer.c: 61: T2CONbits.TMR2ON = 1;
  6649                           
  6650                           ;incstack = 0
  6651                           ; Regs used in _Timer2ON: []
  6652  18A7  0020               	movlb	0	; select bank0
  6653  18A8  151C               	bsf	28,2	;volatile
  6654  18A9  0008               	return
  6655  18AA                     __end_of_Timer2ON:	
  6656                           
  6657                           	psect	text12
  6658  1930                     __ptext12:	
  6659 ;; *************** function _Data_TRIS *****************
  6660 ;; Defined at:
  6661 ;;		line 130 in file "PS_2.c"
  6662 ;; Parameters:    Size  Location     Type
  6663 ;;  direction       1    wreg     unsigned char 
  6664 ;; Auto vars:     Size  Location     Type
  6665 ;;  direction       1    0[BANK4 ] unsigned char 
  6666 ;; Return value:  Size  Location     Type
  6667 ;;		None               void
  6668 ;; Registers used:
  6669 ;;		wreg, status,2, status,0
  6670 ;; Tracked objects:
  6671 ;;		On entry : 0/0
  6672 ;;		On exit  : 0/0
  6673 ;;		Unchanged: 0/0
  6674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6676 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6678 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6679 ;;Total ram usage:        1 bytes
  6680 ;; Hardware stack levels used:    1
  6681 ;; Hardware stack levels required when called:    7
  6682 ;; This function calls:
  6683 ;;		Nothing
  6684 ;; This function is called by:
  6685 ;;		_PS_2_INIT
  6686 ;; This function uses a non-reentrant model
  6687 ;;
  6688                           
  6689                           
  6690                           ;psect for function _Data_TRIS
  6691  1930                     _Data_TRIS:	
  6692                           
  6693                           ;incstack = 0
  6694                           ; Regs used in _Data_TRIS: [wreg+status,2+status,0]
  6695                           ;Data_TRIS@direction stored from wreg
  6696  1930  0024               	movlb	4	; select bank4
  6697  1931  00A0               	movwf	Data_TRIS@direction^(0+512)
  6698                           
  6699                           ;PS_2.c: 132: if(direction == 0)
  6700  1932  08A0               	movf	Data_TRIS@direction^(0+512),f
  6701  1933  1D03               	skipz
  6702  1934  2938               	goto	l627
  6703                           
  6704                           ;PS_2.c: 133: {
  6705                           ;PS_2.c: 134: TRISAbits.TRISA4 = 0;
  6706  1935  0021               	movlb	1	; select bank1
  6707  1936  120C               	bcf	12,4	;volatile
  6708                           
  6709                           ;PS_2.c: 135: }
  6710  1937  0008               	return
  6711  1938                     l627:	
  6712                           
  6713                           ;PS_2.c: 136: else
  6714                           ;PS_2.c: 137: {
  6715                           ;PS_2.c: 138: TRISAbits.TRISA4 = 1;
  6716  1938  0021               	movlb	1	; select bank1
  6717  1939  160C               	bsf	12,4	;volatile
  6718  193A  0008               	return
  6719  193B                     __end_of_Data_TRIS:	
  6720                           
  6721                           	psect	text13
  6722  1925                     __ptext13:	
  6723 ;; *************** function _Clock_TRIS *****************
  6724 ;; Defined at:
  6725 ;;		line 113 in file "PS_2.c"
  6726 ;; Parameters:    Size  Location     Type
  6727 ;;  direction       1    wreg     unsigned char 
  6728 ;; Auto vars:     Size  Location     Type
  6729 ;;  direction       1    0[BANK4 ] unsigned char 
  6730 ;; Return value:  Size  Location     Type
  6731 ;;		None               void
  6732 ;; Registers used:
  6733 ;;		wreg, status,2, status,0
  6734 ;; Tracked objects:
  6735 ;;		On entry : 0/0
  6736 ;;		On exit  : 0/0
  6737 ;;		Unchanged: 0/0
  6738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6740 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6742 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6743 ;;Total ram usage:        1 bytes
  6744 ;; Hardware stack levels used:    1
  6745 ;; Hardware stack levels required when called:    7
  6746 ;; This function calls:
  6747 ;;		Nothing
  6748 ;; This function is called by:
  6749 ;;		_PS_2_INIT
  6750 ;; This function uses a non-reentrant model
  6751 ;;
  6752                           
  6753                           
  6754                           ;psect for function _Clock_TRIS
  6755  1925                     _Clock_TRIS:	
  6756                           
  6757                           ;incstack = 0
  6758                           ; Regs used in _Clock_TRIS: [wreg+status,2+status,0]
  6759                           ;Clock_TRIS@direction stored from wreg
  6760  1925  0024               	movlb	4	; select bank4
  6761  1926  00A0               	movwf	Clock_TRIS@direction^(0+512)
  6762                           
  6763                           ;PS_2.c: 115: if(direction == 0)
  6764  1927  08A0               	movf	Clock_TRIS@direction^(0+512),f
  6765  1928  1D03               	skipz
  6766  1929  292D               	goto	l622
  6767                           
  6768                           ;PS_2.c: 116: {
  6769                           ;PS_2.c: 117: TRISAbits.TRISA5 = 0;
  6770  192A  0021               	movlb	1	; select bank1
  6771  192B  128C               	bcf	12,5	;volatile
  6772                           
  6773                           ;PS_2.c: 118: }
  6774  192C  0008               	return
  6775  192D                     l622:	
  6776                           
  6777                           ;PS_2.c: 119: else
  6778                           ;PS_2.c: 120: {
  6779                           ;PS_2.c: 121: TRISAbits.TRISA5 = 1;
  6780  192D  0021               	movlb	1	; select bank1
  6781  192E  168C               	bsf	12,5	;volatile
  6782  192F  0008               	return
  6783  1930                     __end_of_Clock_TRIS:	
  6784                           
  6785                           	psect	text14
  6786  1947                     __ptext14:	
  6787 ;; *************** function _PS_2_ENABLE_INTERRUPT *****************
  6788 ;; Defined at:
  6789 ;;		line 192 in file "PS_2.c"
  6790 ;; Parameters:    Size  Location     Type
  6791 ;;  DATA_CLK        1    wreg     unsigned char 
  6792 ;; Auto vars:     Size  Location     Type
  6793 ;;  DATA_CLK        1    0[BANK4 ] unsigned char 
  6794 ;; Return value:  Size  Location     Type
  6795 ;;		None               void
  6796 ;; Registers used:
  6797 ;;		wreg
  6798 ;; Tracked objects:
  6799 ;;		On entry : 0/0
  6800 ;;		On exit  : 0/0
  6801 ;;		Unchanged: 0/0
  6802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6804 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6806 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6807 ;;Total ram usage:        1 bytes
  6808 ;; Hardware stack levels used:    1
  6809 ;; Hardware stack levels required when called:    7
  6810 ;; This function calls:
  6811 ;;		Nothing
  6812 ;; This function is called by:
  6813 ;;		_main
  6814 ;;		_Keyboard_Connected
  6815 ;; This function uses a non-reentrant model
  6816 ;;
  6817                           
  6818                           
  6819                           ;psect for function _PS_2_ENABLE_INTERRUPT
  6820  1947                     _PS_2_ENABLE_INTERRUPT:	
  6821                           
  6822                           ;incstack = 0
  6823                           ; Regs used in _PS_2_ENABLE_INTERRUPT: [wreg]
  6824                           ;PS_2_ENABLE_INTERRUPT@DATA_CLK stored from wreg
  6825  1947  0024               	movlb	4	; select bank4
  6826  1948  00A0               	movwf	PS_2_ENABLE_INTERRUPT@DATA_CLK^(0+512)
  6827                           
  6828                           ;PS_2.c: 194: if(DATA_CLK == 0b00100000)
  6829  1949  0820               	movf	PS_2_ENABLE_INTERRUPT@DATA_CLK^(0+512),w
  6830  194A  3A20               	xorlw	32
  6831  194B  1D03               	skipz
  6832  194C  2950               	goto	l642
  6833                           
  6834                           ;PS_2.c: 195: {
  6835                           ;PS_2.c: 198: IOCAN |= 0b00100000;
  6836  194D  0027               	movlb	7	; select bank7
  6837  194E  1692               	bsf	18,5	;volatile
  6838                           
  6839                           ;PS_2.c: 200: }
  6840  194F  0008               	return
  6841  1950                     l642:	
  6842                           
  6843                           ;PS_2.c: 201: else
  6844                           ;PS_2.c: 202: {
  6845                           ;PS_2.c: 205: IOCAN |= 0b00010000;
  6846  1950  0027               	movlb	7	; select bank7
  6847  1951  1612               	bsf	18,4	;volatile
  6848  1952  0008               	return
  6849  1953                     __end_of_PS_2_ENABLE_INTERRUPT:	
  6850                           
  6851                           	psect	text15
  6852  0B8E                     __ptext15:	
  6853 ;; *************** function _Init_System *****************
  6854 ;; Defined at:
  6855 ;;		line 103 in file "user.c"
  6856 ;; Parameters:    Size  Location     Type
  6857 ;;		None
  6858 ;; Auto vars:     Size  Location     Type
  6859 ;;  buf            60    0[BANK5 ] unsigned char [60]
  6860 ;;  Baud            4   65[BANK5 ] unsigned long 
  6861 ;;  temp            4   60[BANK5 ] unsigned long 
  6862 ;;  Parity          1   64[BANK5 ] unsigned char 
  6863 ;; Return value:  Size  Location     Type
  6864 ;;		None               void
  6865 ;; Registers used:
  6866 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6867 ;; Tracked objects:
  6868 ;;		On entry : 0/0
  6869 ;;		On exit  : 0/0
  6870 ;;		Unchanged: 0/0
  6871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6873 ;;      Locals:         0       0       0       0       0       0      69       0       0       0       0       0       
      +0       0
  6874 ;;      Temps:          0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  6875 ;;      Totals:         0       0       0       0       0       5      69       0       0       0       0       0       
      +0       0
  6876 ;;Total ram usage:       74 bytes
  6877 ;; Hardware stack levels used:    1
  6878 ;; Hardware stack levels required when called:   10
  6879 ;; This function calls:
  6880 ;;		_InitUART
  6881 ;;		_ReadBaud
  6882 ;;		_UARTstringWAIT
  6883 ;;		_delayUS
  6884 ;;		_sprintf
  6885 ;; This function is called by:
  6886 ;;		_main
  6887 ;; This function uses a non-reentrant model
  6888 ;;
  6889                           
  6890                           
  6891                           ;psect for function _Init_System
  6892  0B8E                     _Init_System:	
  6893                           
  6894                           ;user.c: 105: unsigned long temp =0;
  6895                           
  6896                           ;incstack = 0
  6897                           ; Regs used in _Init_System: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6898  0B8E  3000               	movlw	0
  6899  0B8F  0025               	movlb	5	; select bank5
  6900  0B90  00DF               	movwf	(Init_System@temp+3)^(0+640)
  6901  0B91  3000               	movlw	0
  6902  0B92  00DE               	movwf	(Init_System@temp+2)^(0+640)
  6903  0B93  3000               	movlw	0
  6904  0B94  00DD               	movwf	(Init_System@temp+1)^(0+640)
  6905  0B95  3000               	movlw	0
  6906  0B96  00DC               	movwf	Init_System@temp^(0+640)
  6907                           
  6908                           ;user.c: 106: unsigned long Baud =0;
  6909  0B97  3000               	movlw	0
  6910  0B98  00E4               	movwf	(Init_System@Baud+3)^(0+640)
  6911  0B99  3000               	movlw	0
  6912  0B9A  00E3               	movwf	(Init_System@Baud+2)^(0+640)
  6913  0B9B  3000               	movlw	0
  6914  0B9C  00E2               	movwf	(Init_System@Baud+1)^(0+640)
  6915  0B9D  3000               	movlw	0
  6916  0B9E  00E1               	movwf	Init_System@Baud^(0+640)
  6917                           
  6918                           ;user.c: 107: unsigned char Parity =0;
  6919  0B9F  01E0               	clrf	Init_System@Parity^(0+640)
  6920                           
  6921                           ;user.c: 108: unsigned char buf[60];
  6922                           ;user.c: 110: temp = ReadBaud((0x1800 >> 5),0);
  6923  0BA0  30C0               	movlw	192
  6924  0BA1  0024               	movlb	4	; select bank4
  6925  0BA2  00B2               	movwf	ReadBaud@row^(0+512)
  6926  0BA3  3000               	movlw	0
  6927  0BA4  00B3               	movwf	(ReadBaud@row^(0+512)+1)
  6928  0BA5  01B4               	clrf	ReadBaud@column^(0+512)
  6929  0BA6  3191  21AD  318B   	fcall	_ReadBaud
  6930  0BA9  0024               	movlb	4	; select bank4
  6931  0BAA  0835               	movf	(?_ReadBaud+3)^(0+512),w
  6932  0BAB  0025               	movlb	5	; select bank5
  6933  0BAC  00DF               	movwf	(Init_System@temp+3)^(0+640)
  6934  0BAD  0024               	movlb	4	; select bank4
  6935  0BAE  0834               	movf	(?_ReadBaud+2)^(0+512),w
  6936  0BAF  0025               	movlb	5	; select bank5
  6937  0BB0  00DE               	movwf	(Init_System@temp+2)^(0+640)
  6938  0BB1  0024               	movlb	4	; select bank4
  6939  0BB2  0833               	movf	(?_ReadBaud+1)^(0+512),w
  6940  0BB3  0025               	movlb	5	; select bank5
  6941  0BB4  00DD               	movwf	(Init_System@temp+1)^(0+640)
  6942  0BB5  0024               	movlb	4	; select bank4
  6943  0BB6  0832               	movf	?_ReadBaud^(0+512),w
  6944  0BB7  0025               	movlb	5	; select bank5
  6945  0BB8  00DC               	movwf	Init_System@temp^(0+640)
  6946                           
  6947                           ;user.c: 111: Baud = temp & 0x000FFFFF;
  6948  0BB9  30FF               	movlw	255
  6949  0BBA  055C               	andwf	Init_System@temp^(0+640),w
  6950  0BBB  00E1               	movwf	Init_System@Baud^(0+640)
  6951  0BBC  30FF               	movlw	255
  6952  0BBD  055D               	andwf	(Init_System@temp+1)^(0+640),w
  6953  0BBE  00E2               	movwf	(Init_System@Baud+1)^(0+640)
  6954  0BBF  300F               	movlw	15
  6955  0BC0  055E               	andwf	(Init_System@temp+2)^(0+640),w
  6956  0BC1  00E3               	movwf	(Init_System@Baud+2)^(0+640)
  6957  0BC2  3000               	movlw	0
  6958  0BC3  055F               	andwf	(Init_System@temp+3)^(0+640),w
  6959  0BC4  00E4               	movwf	(Init_System@Baud+3)^(0+640)
  6960                           
  6961                           ;user.c: 112: Parity = (unsigned char)((temp & 0x00F00000) >> 20);
  6962  0BC5  085C               	movf	Init_System@temp^(0+640),w
  6963  0BC6  0024               	movlb	4	; select bank4
  6964  0BC7  00D0               	movwf	??_Init_System^(0+512)
  6965  0BC8  0025               	movlb	5	; select bank5
  6966  0BC9  085D               	movf	(Init_System@temp+1)^(0+640),w
  6967  0BCA  0024               	movlb	4	; select bank4
  6968  0BCB  00D1               	movwf	(??_Init_System^(0+512)+1)
  6969  0BCC  0025               	movlb	5	; select bank5
  6970  0BCD  085E               	movf	(Init_System@temp+2)^(0+640),w
  6971  0BCE  0024               	movlb	4	; select bank4
  6972  0BCF  00D2               	movwf	(??_Init_System^(0+512)+2)
  6973  0BD0  0025               	movlb	5	; select bank5
  6974  0BD1  085F               	movf	(Init_System@temp+3)^(0+640),w
  6975  0BD2  0024               	movlb	4	; select bank4
  6976  0BD3  00D3               	movwf	(??_Init_System^(0+512)+3)
  6977  0BD4  3014               	movlw	20
  6978  0BD5                     u8445:	
  6979  0BD5  36D3               	lsrf	(??_Init_System^(0+512)+3),f
  6980  0BD6  0CD2               	rrf	(??_Init_System^(0+512)+2),f
  6981  0BD7  0CD1               	rrf	(??_Init_System^(0+512)+1),f
  6982  0BD8  0CD0               	rrf	??_Init_System^(0+512),f
  6983  0BD9  0B89               	decfsz	9,f
  6984  0BDA  2BD5               	goto	u8445
  6985  0BDB  0850               	movf	??_Init_System^(0+512),w
  6986  0BDC  390F               	andlw	15
  6987  0BDD  00D4               	movwf	(??_Init_System+4)^(0+512)
  6988  0BDE  0854               	movf	(??_Init_System+4)^(0+512),w
  6989  0BDF  0025               	movlb	5	; select bank5
  6990  0BE0  00E0               	movwf	Init_System@Parity^(0+640)
  6991                           
  6992                           ;user.c: 113: if(Baud <2400 || Baud > 115200)
  6993  0BE1  3000               	movlw	0
  6994  0BE2  0264               	subwf	(Init_System@Baud+3)^(0+640),w
  6995  0BE3  1D03               	skipz
  6996  0BE4  2BEF               	goto	u8455
  6997  0BE5  3000               	movlw	0
  6998  0BE6  0263               	subwf	(Init_System@Baud+2)^(0+640),w
  6999  0BE7  1D03               	skipz
  7000  0BE8  2BEF               	goto	u8455
  7001  0BE9  3009               	movlw	9
  7002  0BEA  0262               	subwf	(Init_System@Baud+1)^(0+640),w
  7003  0BEB  1D03               	skipz
  7004  0BEC  2BEF               	goto	u8455
  7005  0BED  3060               	movlw	96
  7006  0BEE  0261               	subwf	Init_System@Baud^(0+640),w
  7007  0BEF                     u8455:	
  7008  0BEF  1C03               	skipc
  7009  0BF0  2C01               	goto	l6509
  7010  0BF1  3000               	movlw	0
  7011  0BF2  0264               	subwf	(Init_System@Baud+3)^(0+640),w
  7012  0BF3  1D03               	skipz
  7013  0BF4  2BFF               	goto	u8465
  7014  0BF5  3001               	movlw	1
  7015  0BF6  0263               	subwf	(Init_System@Baud+2)^(0+640),w
  7016  0BF7  1D03               	skipz
  7017  0BF8  2BFF               	goto	u8465
  7018  0BF9  30C2               	movlw	194
  7019  0BFA  0262               	subwf	(Init_System@Baud+1)^(0+640),w
  7020  0BFB  1D03               	skipz
  7021  0BFC  2BFF               	goto	u8465
  7022  0BFD  3001               	movlw	1
  7023  0BFE  0261               	subwf	Init_System@Baud^(0+640),w
  7024  0BFF                     u8465:	
  7025  0BFF  1C03               	skipc
  7026  0C00  2C0A               	goto	l6513
  7027  0C01                     l6509:	
  7028                           
  7029                           ;user.c: 114: {
  7030                           ;user.c: 116: Baud = 9600;
  7031  0C01  3000               	movlw	0
  7032  0C02  00E4               	movwf	(Init_System@Baud+3)^(0+640)
  7033  0C03  3000               	movlw	0
  7034  0C04  00E3               	movwf	(Init_System@Baud+2)^(0+640)
  7035  0C05  3025               	movlw	37
  7036  0C06  00E2               	movwf	(Init_System@Baud+1)^(0+640)
  7037  0C07  3080               	movlw	128
  7038  0C08  00E1               	movwf	Init_System@Baud^(0+640)
  7039                           
  7040                           ;user.c: 117: Parity = 0;
  7041  0C09  01E0               	clrf	Init_System@Parity^(0+640)
  7042  0C0A                     l6513:	
  7043                           
  7044                           ;user.c: 118: }
  7045                           ;user.c: 119: InitUART(Baud, Parity);
  7046  0C0A  0864               	movf	(Init_System@Baud+3)^(0+640),w
  7047  0C0B  0024               	movlb	4	; select bank4
  7048  0C0C  00B1               	movwf	(InitUART@Baud+3)^(0+512)
  7049  0C0D  0025               	movlb	5	; select bank5
  7050  0C0E  0863               	movf	(Init_System@Baud+2)^(0+640),w
  7051  0C0F  0024               	movlb	4	; select bank4
  7052  0C10  00B0               	movwf	(InitUART@Baud+2)^(0+512)
  7053  0C11  0025               	movlb	5	; select bank5
  7054  0C12  0862               	movf	(Init_System@Baud+1)^(0+640),w
  7055  0C13  0024               	movlb	4	; select bank4
  7056  0C14  00AF               	movwf	(InitUART@Baud+1)^(0+512)
  7057  0C15  0025               	movlb	5	; select bank5
  7058  0C16  0861               	movf	Init_System@Baud^(0+640),w
  7059  0C17  0024               	movlb	4	; select bank4
  7060  0C18  00AE               	movwf	InitUART@Baud^(0+512)
  7061  0C19  0025               	movlb	5	; select bank5
  7062  0C1A  0860               	movf	Init_System@Parity^(0+640),w
  7063  0C1B  0024               	movlb	4	; select bank4
  7064  0C1C  00D0               	movwf	??_Init_System^(0+512)
  7065  0C1D  0850               	movf	??_Init_System^(0+512),w
  7066  0C1E  00B2               	movwf	InitUART@parity^(0+512)
  7067  0C1F  3194  2440  318B   	fcall	_InitUART
  7068                           
  7069                           ;user.c: 122: delayUS(10000);
  7070  0C22  3000               	movlw	0
  7071  0C23  0024               	movlb	4	; select bank4
  7072  0C24  00A3               	movwf	(delayUS@US+3)^(0+512)
  7073  0C25  3000               	movlw	0
  7074  0C26  00A2               	movwf	(delayUS@US+2)^(0+512)
  7075  0C27  3027               	movlw	39
  7076  0C28  00A1               	movwf	(delayUS@US+1)^(0+512)
  7077  0C29  3010               	movlw	16
  7078  0C2A  00A0               	movwf	delayUS@US^(0+512)
  7079  0C2B  319B  23F9  318B   	fcall	_delayUS
  7080                           
  7081                           ;user.c: 123: UARTstringWAIT("\r\nPS/2 Keyboard to RS-232\r\n");
  7082  0C2E  30D3               	movlw	low (STR_3| (0+32768))
  7083  0C2F  0024               	movlb	4	; select bank4
  7084  0C30  00AF               	movwf	UARTstringWAIT@data^(0+512)
  7085  0C31  3089               	movlw	high (STR_3| (0+32768))
  7086  0C32  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  7087  0C33  319B  23C6  318B   	fcall	_UARTstringWAIT
  7088                           
  7089                           ;user.c: 124: delayUS(10000);
  7090  0C36  3000               	movlw	0
  7091  0C37  0024               	movlb	4	; select bank4
  7092  0C38  00A3               	movwf	(delayUS@US+3)^(0+512)
  7093  0C39  3000               	movlw	0
  7094  0C3A  00A2               	movwf	(delayUS@US+2)^(0+512)
  7095  0C3B  3027               	movlw	39
  7096  0C3C  00A1               	movwf	(delayUS@US+1)^(0+512)
  7097  0C3D  3010               	movlw	16
  7098  0C3E  00A0               	movwf	delayUS@US^(0+512)
  7099  0C3F  319B  23F9  318B   	fcall	_delayUS
  7100                           
  7101                           ;user.c: 125: UARTstringWAIT("Firmware Version: ");
  7102  0C42  3046               	movlw	low (STR_4| (0+32768))
  7103  0C43  0024               	movlb	4	; select bank4
  7104  0C44  00AF               	movwf	UARTstringWAIT@data^(0+512)
  7105  0C45  308A               	movlw	high (STR_4| (0+32768))
  7106  0C46  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  7107  0C47  319B  23C6  318B   	fcall	_UARTstringWAIT
  7108                           
  7109                           ;user.c: 126: UARTstringWAIT(Version);
  7110  0C4A  3066               	movlw	low (_Version| (0+32768))
  7111  0C4B  0024               	movlb	4	; select bank4
  7112  0C4C  00AF               	movwf	UARTstringWAIT@data^(0+512)
  7113  0C4D  3089               	movlw	high (_Version| (0+32768))
  7114  0C4E  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  7115  0C4F  319B  23C6  318B   	fcall	_UARTstringWAIT
  7116                           
  7117                           ;user.c: 127: UARTstringWAIT("\r\n");
  7118  0C52  3043               	movlw	low ((STR_15+16)| (0+32768))
  7119  0C53  0024               	movlb	4	; select bank4
  7120  0C54  00AF               	movwf	UARTstringWAIT@data^(0+512)
  7121  0C55  308A               	movlw	high ((STR_15+16)| (0+32768))
  7122  0C56  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  7123  0C57  319B  23C6  318B   	fcall	_UARTstringWAIT
  7124                           
  7125                           ;user.c: 128: delayUS(10000);
  7126  0C5A  3000               	movlw	0
  7127  0C5B  0024               	movlb	4	; select bank4
  7128  0C5C  00A3               	movwf	(delayUS@US+3)^(0+512)
  7129  0C5D  3000               	movlw	0
  7130  0C5E  00A2               	movwf	(delayUS@US+2)^(0+512)
  7131  0C5F  3027               	movlw	39
  7132  0C60  00A1               	movwf	(delayUS@US+1)^(0+512)
  7133  0C61  3010               	movlw	16
  7134  0C62  00A0               	movwf	delayUS@US^(0+512)
  7135  0C63  319B  23F9  318B   	fcall	_delayUS
  7136                           
  7137                           ;user.c: 129: UARTstringWAIT("To Change BAUD hit \"CNT + ALT + DEL\"\r\n");
  7138  0C66  306E               	movlw	low (STR_6| (0+32768))
  7139  0C67  0024               	movlb	4	; select bank4
  7140  0C68  00AF               	movwf	UARTstringWAIT@data^(0+512)
  7141  0C69  3089               	movlw	high (STR_6| (0+32768))
  7142  0C6A  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  7143  0C6B  319B  23C6  318B   	fcall	_UARTstringWAIT
  7144                           
  7145                           ;user.c: 130: delayUS(10000);
  7146  0C6E  3000               	movlw	0
  7147  0C6F  0024               	movlb	4	; select bank4
  7148  0C70  00A3               	movwf	(delayUS@US+3)^(0+512)
  7149  0C71  3000               	movlw	0
  7150  0C72  00A2               	movwf	(delayUS@US+2)^(0+512)
  7151  0C73  3027               	movlw	39
  7152  0C74  00A1               	movwf	(delayUS@US+1)^(0+512)
  7153  0C75  3010               	movlw	16
  7154  0C76  00A0               	movwf	delayUS@US^(0+512)
  7155  0C77  319B  23F9  318B   	fcall	_delayUS
  7156                           
  7157                           ;user.c: 132: UARTstringWAIT("\r\n");
  7158  0C7A  3043               	movlw	low ((STR_15+16)| (0+32768))
  7159  0C7B  0024               	movlb	4	; select bank4
  7160  0C7C  00AF               	movwf	UARTstringWAIT@data^(0+512)
  7161  0C7D  308A               	movlw	high ((STR_15+16)| (0+32768))
  7162  0C7E  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  7163  0C7F  319B  23C6  318B   	fcall	_UARTstringWAIT
  7164                           
  7165                           ;user.c: 133: delayUS(10000);
  7166  0C82  3000               	movlw	0
  7167  0C83  0024               	movlb	4	; select bank4
  7168  0C84  00A3               	movwf	(delayUS@US+3)^(0+512)
  7169  0C85  3000               	movlw	0
  7170  0C86  00A2               	movwf	(delayUS@US+2)^(0+512)
  7171  0C87  3027               	movlw	39
  7172  0C88  00A1               	movwf	(delayUS@US+1)^(0+512)
  7173  0C89  3010               	movlw	16
  7174  0C8A  00A0               	movwf	delayUS@US^(0+512)
  7175  0C8B  319B  23F9  318B   	fcall	_delayUS
  7176                           
  7177                           ;user.c: 134: sprintf(buf,"KeyBoard Baud is %lu",Baud);
  7178  0C8E  30A0               	movlw	low Init_System@buf
  7179  0C8F  0024               	movlb	4	; select bank4
  7180  0C90  00B8               	movwf	sprintf@sp^(0+512)
  7181  0C91  3002               	movlw	high Init_System@buf
  7182  0C92  00B9               	movwf	(sprintf@sp+1)^(0+512)
  7183  0C93  301E               	movlw	low (STR_8| (0+32768))
  7184  0C94  00BA               	movwf	sprintf@f^(0+512)
  7185  0C95  308A               	movlw	high (STR_8| (0+32768))
  7186  0C96  00BB               	movwf	(sprintf@f^(0+512)+1)
  7187  0C97  0025               	movlb	5	; select bank5
  7188  0C98  0864               	movf	(Init_System@Baud+3)^(0+640),w
  7189  0C99  0024               	movlb	4	; select bank4
  7190  0C9A  00BF               	movwf	((?_sprintf+3)^(0+512)+4)
  7191  0C9B  0025               	movlb	5	; select bank5
  7192  0C9C  0863               	movf	(Init_System@Baud+2)^(0+640),w
  7193  0C9D  0024               	movlb	4	; select bank4
  7194  0C9E  00BE               	movwf	((?_sprintf+2)^(0+512)+4)
  7195  0C9F  0025               	movlb	5	; select bank5
  7196  0CA0  0862               	movf	(Init_System@Baud+1)^(0+640),w
  7197  0CA1  0024               	movlb	4	; select bank4
  7198  0CA2  00BD               	movwf	((?_sprintf+1)^(0+512)+4)
  7199  0CA3  0025               	movlb	5	; select bank5
  7200  0CA4  0861               	movf	Init_System@Baud^(0+640),w
  7201  0CA5  0024               	movlb	4	; select bank4
  7202  0CA6  00BC               	movwf	(?_sprintf^(0+512)+4)
  7203  0CA7  3197  270A  318B   	fcall	_sprintf
  7204                           
  7205                           ;user.c: 135: UARTstringWAIT(buf);
  7206  0CAA  30A0               	movlw	low Init_System@buf
  7207  0CAB  0024               	movlb	4	; select bank4
  7208  0CAC  00AF               	movwf	UARTstringWAIT@data^(0+512)
  7209  0CAD  3002               	movlw	high Init_System@buf
  7210  0CAE  00B0               	movwf	(UARTstringWAIT@data+1)^(0+512)
  7211  0CAF  319B  23C6  318B   	fcall	_UARTstringWAIT
  7212                           
  7213                           ;user.c: 136: if(Parity)
  7214  0CB2  0025               	movlb	5	; select bank5
  7215  0CB3  0860               	movf	Init_System@Parity^(0+640),w
  7216  0CB4  1903               	btfsc	3,2
  7217  0CB5  2CD8               	goto	l6557
  7218                           
  7219                           ;user.c: 137: {
  7220                           ;user.c: 138: switch (Parity)
  7221  0CB6  2CCB               	goto	l6555
  7222  0CB7                     l6545:	
  7223                           ;user.c: 139: {
  7224                           ;user.c: 140: case 1:
  7225                           
  7226                           
  7227                           ;user.c: 141: UARTstringWAIT(OddParityMSG);
  7228  0CB7  3011               	movlw	low (_OddParityMSG| (0+32768))
  7229  0CB8  0024               	movlb	4	; select bank4
  7230  0CB9  00AF               	movwf	UARTstringWAIT@data^(0+512)
  7231  0CBA  3089               	movlw	high (_OddParityMSG| (0+32768))
  7232  0CBB  2CDC               	goto	L3
  7233  0CBC                     l6547:	
  7234                           ;user.c: 143: case 2:
  7235                           
  7236                           ;user.c: 142: break;
  7237                           
  7238                           
  7239                           ;user.c: 144: UARTstringWAIT(EvenParityMSG);
  7240  0CBC  30FB               	movlw	low (_EvenParityMSG| (0+32768))
  7241  0CBD  0024               	movlb	4	; select bank4
  7242  0CBE  00AF               	movwf	UARTstringWAIT@data^(0+512)
  7243  0CBF  3088               	movlw	high (_EvenParityMSG| (0+32768))
  7244  0CC0  2CDC               	goto	L3
  7245  0CC1                     l6549:	
  7246                           ;user.c: 146: case 3:
  7247                           
  7248                           ;user.c: 145: break;
  7249                           
  7250                           
  7251                           ;user.c: 147: UARTstringWAIT(MarkParityMSG);
  7252  0CC1  304A               	movlw	low (_MarkParityMSG| (0+32768))
  7253  0CC2  0024               	movlb	4	; select bank4
  7254  0CC3  00AF               	movwf	UARTstringWAIT@data^(0+512)
  7255  0CC4  3089               	movlw	high (_MarkParityMSG| (0+32768))
  7256  0CC5  2CDC               	goto	L3
  7257  0CC6                     l6551:	
  7258                           ;user.c: 149: default:
  7259                           
  7260                           ;user.c: 148: break;
  7261                           
  7262                           
  7263                           ;user.c: 150: UARTstringWAIT(SpaceParityMSG);
  7264  0CC6  303A               	movlw	low (_SpaceParityMSG| (0+32768))
  7265  0CC7  0024               	movlb	4	; select bank4
  7266  0CC8  00AF               	movwf	UARTstringWAIT@data^(0+512)
  7267  0CC9  3089               	movlw	high (_SpaceParityMSG| (0+32768))
  7268  0CCA  2CDC               	goto	L3
  7269  0CCB                     l6555:	
  7270                           ;user.c: 152: }
  7271                           
  7272                           ;user.c: 151: break;
  7273                           
  7274  0CCB  0025               	movlb	5	; select bank5
  7275  0CCC  0860               	movf	Init_System@Parity^(0+640),w
  7276                           
  7277                           ; Switch size 1, requested type "space"
  7278                           ; Number of cases is 3, Range of values is 1 to 3
  7279                           ; switch strategies available:
  7280                           ; Name         Instructions Cycles
  7281                           ; simple_byte           10     6 (average)
  7282                           ; direct_byte           15     9 (fixed)
  7283                           ; jumptable            263     9 (fixed)
  7284                           ;	Chosen strategy is simple_byte
  7285  0CCD  3A01               	xorlw	1	; case 1
  7286  0CCE  1903               	skipnz
  7287  0CCF  2CB7               	goto	l6545
  7288  0CD0  3A03               	xorlw	3	; case 2
  7289  0CD1  1903               	skipnz
  7290  0CD2  2CBC               	goto	l6547
  7291  0CD3  3A01               	xorlw	1	; case 3
  7292  0CD4  1903               	skipnz
  7293  0CD5  2CC1               	goto	l6549
  7294  0CD6  2CC6               	goto	l6551
  7295                           
  7296                           ;user.c: 153: }
  7297  0CD7  2CE0               	goto	l276
  7298  0CD8                     l6557:	
  7299                           
  7300                           ;user.c: 154: else
  7301                           ;user.c: 155: {
  7302                           ;user.c: 156: UARTstringWAIT(NoParityMSG);
  7303  0CD8  3026               	movlw	low (_NoParityMSG| (0+32768))
  7304  0CD9  0024               	movlb	4	; select bank4
  7305  0CDA  00AF               	movwf	UARTstringWAIT@data^(0+512)
  7306  0CDB  3089               	movlw	high (_NoParityMSG| (0+32768))
  7307  0CDC                     L3:	
  7308  0CDC  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  7309  0CDD  319B  23C6  318B   	fcall	_UARTstringWAIT
  7310  0CE0                     l276:	
  7311                           
  7312                           ;user.c: 157: }
  7313                           ;user.c: 158: UARTstringWAIT("\r\n");
  7314  0CE0  3043               	movlw	low ((STR_15+16)| (0+32768))
  7315  0CE1  0024               	movlb	4	; select bank4
  7316  0CE2  00AF               	movwf	UARTstringWAIT@data^(0+512)
  7317  0CE3  308A               	movlw	high ((STR_15+16)| (0+32768))
  7318  0CE4  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  7319  0CE5  319B  23C6  318B   	fcall	_UARTstringWAIT
  7320                           
  7321                           ;user.c: 159: delayUS(10000);
  7322  0CE8  3000               	movlw	0
  7323  0CE9  0024               	movlb	4	; select bank4
  7324  0CEA  00A3               	movwf	(delayUS@US+3)^(0+512)
  7325  0CEB  3000               	movlw	0
  7326  0CEC  00A2               	movwf	(delayUS@US+2)^(0+512)
  7327  0CED  3027               	movlw	39
  7328  0CEE  00A1               	movwf	(delayUS@US+1)^(0+512)
  7329  0CEF  3010               	movlw	16
  7330  0CF0  00A0               	movwf	delayUS@US^(0+512)
  7331  0CF1  319B  23F9         	fcall	_delayUS
  7332                           
  7333                           ;user.c: 160: INTCON |= 0x08;
  7334  0CF3  158B               	bsf	11,3	;volatile
  7335                           
  7336                           ;user.c: 161: INTCONbits.GIE = 1;
  7337  0CF4  178B               	bsf	11,7	;volatile
  7338  0CF5  0008               	return
  7339  0CF6                     __end_of_Init_System:	
  7340                           
  7341                           	psect	text16
  7342  170A                     __ptext16:	
  7343 ;; *************** function _sprintf *****************
  7344 ;; Defined at:
  7345 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  7346 ;; Parameters:    Size  Location     Type
  7347 ;;  sp              2   24[BANK4 ] PTR unsigned char 
  7348 ;;		 -> Process_PS2_ScanCode@buf(60), SetBaud@buf(50), Init_System@buf(60), 
  7349 ;;  f               2   26[BANK4 ] PTR const unsigned char 
  7350 ;;		 -> STR_19(33), STR_12(21), STR_8(21), 
  7351 ;; Auto vars:     Size  Location     Type
  7352 ;;  _val            4   41[BANK4 ] struct .
  7353 ;;  ap              2   45[BANK4 ] PTR void [1]
  7354 ;;		 -> ?i1_sprintf(2), ?_sprintf(2), 
  7355 ;;  prec            2   39[BANK4 ] int 
  7356 ;;  c               1   47[BANK4 ] char 
  7357 ;;  flag            1   38[BANK4 ] unsigned char 
  7358 ;; Return value:  Size  Location     Type
  7359 ;;                  2   24[BANK4 ] int 
  7360 ;; Registers used:
  7361 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7362 ;; Tracked objects:
  7363 ;;		On entry : 0/0
  7364 ;;		On exit  : 0/0
  7365 ;;		Unchanged: 0/0
  7366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7367 ;;      Params:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  7368 ;;      Locals:         0       0       0       0       0      10       0       0       0       0       0       0       
      +0       0
  7369 ;;      Temps:          0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  7370 ;;      Totals:         0       0       0       0       0      24       0       0       0       0       0       0       
      +0       0
  7371 ;;Total ram usage:       24 bytes
  7372 ;; Hardware stack levels used:    1
  7373 ;; Hardware stack levels required when called:    8
  7374 ;; This function calls:
  7375 ;;		___lldiv
  7376 ;;		___llmod
  7377 ;; This function is called by:
  7378 ;;		_Init_System
  7379 ;; This function uses a non-reentrant model
  7380 ;;
  7381                           
  7382                           
  7383                           ;psect for function _sprintf
  7384  170A                     _sprintf:	
  7385                           
  7386                           ;doprnt.c: 494: va_list ap;
  7387                           ;doprnt.c: 499: signed char c;
  7388                           ;doprnt.c: 504: int prec;
  7389                           ;doprnt.c: 508: unsigned char flag;
  7390                           ;doprnt.c: 527: union {
  7391                           ;doprnt.c: 528: unsigned long _val;
  7392                           ;doprnt.c: 529: struct {
  7393                           ;doprnt.c: 530: const char * _cp;
  7394                           ;doprnt.c: 531: unsigned _len;
  7395                           ;doprnt.c: 532: } _str;
  7396                           ;doprnt.c: 533: } _val;
  7397                           ;doprnt.c: 542: *ap = __va_start();
  7398                           
  7399                           ;incstack = 0
  7400                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7401  170A  303C               	movlw	low (?_sprintf+4)
  7402  170B  0024               	movlb	4	; select bank4
  7403  170C  00CD               	movwf	sprintf@ap^(0+512)
  7404  170D  3002               	movlw	high (?_sprintf+4)
  7405  170E  00CE               	movwf	(sprintf@ap+1)^(0+512)
  7406  170F                     l6307:	
  7407                           ;doprnt.c: 545: while(c = *f++) {
  7408                           
  7409  170F  083B               	movf	(sprintf@f+1)^(0+512),w
  7410  1710  00C1               	movwf	(??_sprintf^(0+512)+1)
  7411  1711  083A               	movf	sprintf@f^(0+512),w
  7412  1712  00C0               	movwf	??_sprintf^(0+512)
  7413  1713  0ABA               	incf	sprintf@f^(0+512),f
  7414  1714  1903               	skipnz
  7415  1715  0ABB               	incf	(sprintf@f+1)^(0+512),f
  7416  1716  0840               	movf	??_sprintf^(0+512),w
  7417  1717  0084               	movwf	4
  7418  1718  0841               	movf	(??_sprintf+1)^(0+512),w
  7419  1719  0085               	movwf	5
  7420  171A  0800               	movf	0,w	;code access
  7421  171B  00C2               	movwf	(??_sprintf+2)^(0+512)
  7422  171C  0842               	movf	(??_sprintf+2)^(0+512),w
  7423  171D  00CF               	movwf	sprintf@c^(0+512)
  7424  171E  08CF               	movf	sprintf@c^(0+512),f
  7425  171F  1903               	btfsc	3,2
  7426  1720  2FFA               	goto	l6309
  7427                           
  7428                           ;doprnt.c: 547: if(c != '%')
  7429  1721  084F               	movf	sprintf@c^(0+512),w
  7430  1722  3A25               	xorlw	37
  7431  1723  1903               	skipnz
  7432  1724  2F30               	goto	l6267
  7433                           
  7434                           ;doprnt.c: 549: {
  7435                           ;doprnt.c: 550: ((*sp++ = (c)));
  7436  1725  0838               	movf	sprintf@sp^(0+512),w
  7437  1726  0086               	movwf	6
  7438  1727  0839               	movf	(sprintf@sp+1)^(0+512),w
  7439  1728  0087               	movwf	7
  7440  1729  084F               	movf	sprintf@c^(0+512),w
  7441  172A  0081               	movwf	1
  7442  172B  3001               	movlw	1
  7443  172C  07B8               	addwf	sprintf@sp^(0+512),f
  7444  172D  3000               	movlw	0
  7445  172E  3DB9               	addwfc	(sprintf@sp+1)^(0+512),f
  7446                           
  7447                           ;doprnt.c: 551: continue;
  7448  172F  2F0F               	goto	l6307
  7449  1730                     l6267:	
  7450                           
  7451                           ;doprnt.c: 552: }
  7452                           ;doprnt.c: 557: flag = 0;
  7453  1730  01C6               	clrf	sprintf@flag^(0+512)
  7454                           
  7455                           ;doprnt.c: 644: switch(c = *f++) {
  7456                           
  7457                           ;doprnt.c: 642: loop:
  7458  1731  2F39               	goto	l6273
  7459  1732                     l1079:	
  7460                           ;doprnt.c: 650: case 'l':
  7461                           
  7462                           ;doprnt.c: 647: goto alldone;
  7463                           
  7464                           ;doprnt.c: 646: case 0:
  7465                           
  7466                           
  7467                           ;doprnt.c: 652: flag |= 0x10;
  7468  1732  1646               	bsf	sprintf@flag^(0+512),4
  7469                           
  7470                           ;doprnt.c: 653: goto loop;
  7471  1733  2F39               	goto	l6273
  7472  1734                     l6269:	
  7473                           ;doprnt.c: 826: case 'u':
  7474                           
  7475                           ;doprnt.c: 822: continue;
  7476                           
  7477                           ;doprnt.c: 811: default:
  7478                           
  7479                           
  7480                           ;doprnt.c: 827: flag |= 0xC0;
  7481  1734  30C0               	movlw	192
  7482  1735  00C0               	movwf	??_sprintf^(0+512)
  7483  1736  0840               	movf	??_sprintf^(0+512),w
  7484  1737  04C6               	iorwf	sprintf@flag^(0+512),f
  7485                           
  7486                           ;doprnt.c: 831: }
  7487                           
  7488                           ;doprnt.c: 828: break;
  7489  1738  2F50               	goto	l1082
  7490  1739                     l6273:	
  7491  1739  083B               	movf	(sprintf@f+1)^(0+512),w
  7492  173A  00C1               	movwf	(??_sprintf^(0+512)+1)
  7493  173B  083A               	movf	sprintf@f^(0+512),w
  7494  173C  00C0               	movwf	??_sprintf^(0+512)
  7495  173D  0ABA               	incf	sprintf@f^(0+512),f
  7496  173E  1903               	skipnz
  7497  173F  0ABB               	incf	(sprintf@f+1)^(0+512),f
  7498  1740  0840               	movf	??_sprintf^(0+512),w
  7499  1741  0084               	movwf	4
  7500  1742  0841               	movf	(??_sprintf+1)^(0+512),w
  7501  1743  0085               	movwf	5
  7502  1744  0800               	movf	0,w	;code access
  7503  1745  00CF               	movwf	sprintf@c^(0+512)
  7504                           
  7505                           ; Switch size 1, requested type "space"
  7506                           ; Number of cases is 3, Range of values is 0 to 117
  7507                           ; switch strategies available:
  7508                           ; Name         Instructions Cycles
  7509                           ; simple_byte           10     6 (average)
  7510                           ; direct_byte          242     6 (fixed)
  7511                           ; jumptable            260     6 (fixed)
  7512                           ;	Chosen strategy is simple_byte
  7513  1746  3A00               	xorlw	0	; case 0
  7514  1747  1903               	skipnz
  7515  1748  2FFA               	goto	l6309
  7516  1749  3A6C               	xorlw	108	; case 108
  7517  174A  1903               	skipnz
  7518  174B  2F32               	goto	l1079
  7519  174C  3A19               	xorlw	25	; case 117
  7520  174D  1903               	skipnz
  7521  174E  2F34               	goto	l6269
  7522  174F  2F0F               	goto	l6307
  7523  1750                     l1082:	
  7524                           
  7525                           ;doprnt.c: 1282: {
  7526                           ;doprnt.c: 1290: if(flag & 0x10)
  7527  1750  1E46               	btfss	sprintf@flag^(0+512),4
  7528  1751  2F60               	goto	l6279
  7529                           
  7530                           ;doprnt.c: 1291: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
  7531  1752  084D               	movf	sprintf@ap^(0+512),w
  7532  1753  0086               	movwf	6
  7533  1754  084E               	movf	(sprintf@ap+1)^(0+512),w
  7534  1755  0087               	movwf	7
  7535  1756  3F40               	moviw [0]fsr1
  7536  1757  00C9               	movwf	sprintf@_val^(0+512)
  7537  1758  3F41               	moviw [1]fsr1
  7538  1759  00CA               	movwf	(sprintf@_val+1)^(0+512)
  7539  175A  3F42               	moviw [2]fsr1
  7540  175B  00CB               	movwf	(sprintf@_val+2)^(0+512)
  7541  175C  3F43               	moviw [3]fsr1
  7542  175D  00CC               	movwf	(sprintf@_val+3)^(0+512)
  7543  175E  3004               	movlw	4
  7544  175F  2F6F               	goto	L4
  7545  1760                     l6279:	
  7546                           
  7547                           ;doprnt.c: 1292: else
  7548                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7549  1760  084D               	movf	sprintf@ap^(0+512),w
  7550  1761  0086               	movwf	6
  7551  1762  084E               	movf	(sprintf@ap+1)^(0+512),w
  7552  1763  0087               	movwf	7
  7553  1764  3F40               	moviw [0]fsr1
  7554  1765  00C0               	movwf	??_sprintf^(0+512)
  7555  1766  3F41               	moviw [1]fsr1
  7556  1767  00C1               	movwf	(??_sprintf^(0+512)+1)
  7557  1768  0840               	movf	??_sprintf^(0+512),w
  7558  1769  00C9               	movwf	sprintf@_val^(0+512)
  7559  176A  0841               	movf	(??_sprintf+1)^(0+512),w
  7560  176B  00CA               	movwf	(sprintf@_val^(0+512)+1)
  7561  176C  01CB               	clrf	(sprintf@_val^(0+512)+2)
  7562  176D  01CC               	clrf	(sprintf@_val^(0+512)+3)
  7563  176E  3002               	movlw	2
  7564  176F                     L4:	
  7565  176F  07CD               	addwf	sprintf@ap^(0+512),f
  7566  1770  3000               	movlw	0
  7567  1771  3DCE               	addwfc	(sprintf@ap+1)^(0+512),f
  7568                           
  7569                           ;doprnt.c: 1296: }
  7570                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7571  1772  01CF               	clrf	sprintf@c^(0+512)
  7572  1773  0ACF               	incf	sprintf@c^(0+512),f
  7573  1774  084F               	movf	sprintf@c^(0+512),w
  7574  1775  3A0A               	xorlw	10
  7575  1776  1903               	btfsc	3,2
  7576  1777  2FA5               	goto	l6297
  7577  1778                     l6289:	
  7578                           
  7579                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  7580  1778  084F               	movf	sprintf@c^(0+512),w
  7581  1779  00C0               	movwf	??_sprintf^(0+512)
  7582  177A  01C1               	clrf	(??_sprintf^(0+512)+1)
  7583  177B  35C0               	lslf	??_sprintf^(0+512),f
  7584  177C  0DC1               	rlf	(??_sprintf^(0+512)+1),f
  7585  177D  35C0               	lslf	??_sprintf^(0+512),f
  7586  177E  0DC1               	rlf	(??_sprintf^(0+512)+1),f
  7587  177F  30D3               	movlw	low (_dpowers| (0+32768))
  7588  1780  0740               	addwf	??_sprintf^(0+512),w
  7589  1781  0084               	movwf	4
  7590  1782  3088               	movlw	high (_dpowers| (0+32768))
  7591  1783  3D41               	addwfc	(??_sprintf+1)^(0+512),w
  7592  1784  0085               	movwf	5
  7593  1785  3F00               	moviw [0]fsr0
  7594  1786  00C2               	movwf	(??_sprintf+2)^(0+512)
  7595  1787  3F01               	moviw [1]fsr0
  7596  1788  00C3               	movwf	((??_sprintf+2)^(0+512)+1)
  7597  1789  3F02               	moviw [2]fsr0
  7598  178A  00C4               	movwf	((??_sprintf+2)^(0+512)+2)
  7599  178B  3F03               	moviw [3]fsr0
  7600  178C  00C5               	movwf	((??_sprintf+2)^(0+512)+3)
  7601  178D  0845               	movf	(??_sprintf+5)^(0+512),w
  7602  178E  024C               	subwf	(sprintf@_val+3)^(0+512),w
  7603  178F  1D03               	skipz
  7604  1790  2F9B               	goto	u8115
  7605  1791  0844               	movf	(??_sprintf+4)^(0+512),w
  7606  1792  024B               	subwf	(sprintf@_val+2)^(0+512),w
  7607  1793  1D03               	skipz
  7608  1794  2F9B               	goto	u8115
  7609  1795  0843               	movf	(??_sprintf+3)^(0+512),w
  7610  1796  024A               	subwf	(sprintf@_val+1)^(0+512),w
  7611  1797  1D03               	skipz
  7612  1798  2F9B               	goto	u8115
  7613  1799  0842               	movf	(??_sprintf+2)^(0+512),w
  7614  179A  0249               	subwf	sprintf@_val^(0+512),w
  7615  179B                     u8115:	
  7616  179B  1C03               	btfss	3,0
  7617  179C  2FA5               	goto	l6297
  7618                           
  7619                           ;doprnt.c: 1316: break;
  7620  179D  3001               	movlw	1
  7621  179E  00C0               	movwf	??_sprintf^(0+512)
  7622  179F  0840               	movf	??_sprintf^(0+512),w
  7623  17A0  07CF               	addwf	sprintf@c^(0+512),f
  7624  17A1  084F               	movf	sprintf@c^(0+512),w
  7625  17A2  3A0A               	xorlw	10
  7626  17A3  1D03               	skipz
  7627  17A4  2F78               	goto	l6289
  7628  17A5                     l6297:	
  7629                           
  7630                           ;doprnt.c: 1431: {
  7631                           ;doprnt.c: 1478: }
  7632                           ;doprnt.c: 1481: prec = c;
  7633  17A5  084F               	movf	sprintf@c^(0+512),w
  7634  17A6  00C7               	movwf	sprintf@prec^(0+512)
  7635  17A7  01C8               	clrf	(sprintf@prec+1)^(0+512)
  7636  17A8  1BC7               	btfsc	sprintf@prec^(0+512),7
  7637  17A9  03C8               	decf	(sprintf@prec+1)^(0+512),f
  7638  17AA                     l6305:	
  7639                           ;doprnt.c: 1483: while(prec--) {
  7640                           
  7641  17AA  30FF               	movlw	255
  7642  17AB  07C7               	addwf	sprintf@prec^(0+512),f
  7643  17AC  30FF               	movlw	255
  7644  17AD  3DC8               	addwfc	(sprintf@prec+1)^(0+512),f
  7645  17AE  30FF               	movlw	255
  7646  17AF  0648               	xorwf	(sprintf@prec+1)^(0+512),w
  7647  17B0  1D03               	skipz
  7648  17B1  2FB4               	goto	u8135
  7649  17B2  30FF               	movlw	255
  7650  17B3  0647               	xorwf	sprintf@prec^(0+512),w
  7651  17B4                     u8135:	
  7652  17B4  1903               	btfsc	3,2
  7653  17B5  2F0F               	goto	l6307
  7654                           
  7655                           ;doprnt.c: 1487: {
  7656                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  7657  17B6  3000               	movlw	0
  7658  17B7  00B1               	movwf	(___llmod@divisor+3)^(0+512)
  7659  17B8  3000               	movlw	0
  7660  17B9  00B0               	movwf	(___llmod@divisor+2)^(0+512)
  7661  17BA  3000               	movlw	0
  7662  17BB  00AF               	movwf	(___llmod@divisor+1)^(0+512)
  7663  17BC  300A               	movlw	10
  7664  17BD  00AE               	movwf	___llmod@divisor^(0+512)
  7665  17BE  0848               	movf	(sprintf@prec+1)^(0+512),w
  7666  17BF  0085               	movwf	5
  7667  17C0  0847               	movf	sprintf@prec^(0+512),w
  7668  17C1  0084               	movwf	4
  7669  17C2  3584               	lslf	4,f
  7670  17C3  0D85               	rlf	5,f
  7671  17C4  3584               	lslf	4,f
  7672  17C5  0D85               	rlf	5,f
  7673  17C6  30D3               	movlw	low (_dpowers| (0+32768))
  7674  17C7  0784               	addwf	4,f
  7675  17C8  3088               	movlw	high (_dpowers| (0+32768))
  7676  17C9  3D85               	addwfc	5,f
  7677  17CA  3F00               	moviw [0]fsr0
  7678  17CB  00A0               	movwf	___lldiv@divisor^(0+512)
  7679  17CC  3F01               	moviw [1]fsr0
  7680  17CD  00A1               	movwf	(___lldiv@divisor+1)^(0+512)
  7681  17CE  3F02               	moviw [2]fsr0
  7682  17CF  00A2               	movwf	(___lldiv@divisor+2)^(0+512)
  7683  17D0  3F03               	moviw [3]fsr0
  7684  17D1  00A3               	movwf	(___lldiv@divisor+3)^(0+512)
  7685  17D2  084C               	movf	(sprintf@_val+3)^(0+512),w
  7686  17D3  00A7               	movwf	(___lldiv@dividend+3)^(0+512)
  7687  17D4  084B               	movf	(sprintf@_val+2)^(0+512),w
  7688  17D5  00A6               	movwf	(___lldiv@dividend+2)^(0+512)
  7689  17D6  084A               	movf	(sprintf@_val+1)^(0+512),w
  7690  17D7  00A5               	movwf	(___lldiv@dividend+1)^(0+512)
  7691  17D8  0849               	movf	sprintf@_val^(0+512),w
  7692  17D9  00A4               	movwf	___lldiv@dividend^(0+512)
  7693  17DA  319E  26FA  3197   	fcall	___lldiv
  7694  17DD  0024               	movlb	4	; select bank4
  7695  17DE  0823               	movf	(?___lldiv+3)^(0+512),w
  7696  17DF  00B5               	movwf	(___llmod@dividend+3)^(0+512)
  7697  17E0  0822               	movf	(?___lldiv+2)^(0+512),w
  7698  17E1  00B4               	movwf	(___llmod@dividend+2)^(0+512)
  7699  17E2  0821               	movf	(?___lldiv+1)^(0+512),w
  7700  17E3  00B3               	movwf	(___llmod@dividend+1)^(0+512)
  7701  17E4  0820               	movf	?___lldiv^(0+512),w
  7702  17E5  00B2               	movwf	___llmod@dividend^(0+512)
  7703  17E6  319D  252F  3197   	fcall	___llmod
  7704  17E9  0024               	movlb	4	; select bank4
  7705  17EA  082E               	movf	?___llmod^(0+512),w
  7706  17EB  3E30               	addlw	48
  7707  17EC  00C0               	movwf	??_sprintf^(0+512)
  7708  17ED  0840               	movf	??_sprintf^(0+512),w
  7709  17EE  00CF               	movwf	sprintf@c^(0+512)
  7710                           
  7711                           ;doprnt.c: 1532: }
  7712                           ;doprnt.c: 1533: ((*sp++ = (c)));
  7713  17EF  0838               	movf	sprintf@sp^(0+512),w
  7714  17F0  0086               	movwf	6
  7715  17F1  0839               	movf	(sprintf@sp+1)^(0+512),w
  7716  17F2  0087               	movwf	7
  7717  17F3  084F               	movf	sprintf@c^(0+512),w
  7718  17F4  0081               	movwf	1
  7719  17F5  3001               	movlw	1
  7720  17F6  07B8               	addwf	sprintf@sp^(0+512),f
  7721  17F7  3000               	movlw	0
  7722  17F8  3DB9               	addwfc	(sprintf@sp+1)^(0+512),f
  7723  17F9  2FAA               	goto	l6305
  7724  17FA                     l6309:	
  7725                           ;doprnt.c: 1534: }
  7726                           ;doprnt.c: 1542: }
  7727                           ;doprnt.c: 1544: alldone:
  7728                           
  7729                           
  7730                           ;doprnt.c: 1547: *sp = 0;
  7731  17FA  0838               	movf	sprintf@sp^(0+512),w
  7732  17FB  0086               	movwf	6
  7733  17FC  0839               	movf	(sprintf@sp+1)^(0+512),w
  7734  17FD  0087               	movwf	7
  7735  17FE  0181               	clrf	1
  7736  17FF  0008               	return
  7737  1800                     __end_of_sprintf:	
  7738                           ;doprnt.c: 1549: return 0;
  7739                           ;	Return value of _sprintf is never used
  7740                           
  7741                           
  7742                           	psect	text17
  7743  1D2F                     __ptext17:	
  7744 ;; *************** function ___llmod *****************
  7745 ;; Defined at:
  7746 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\llmod.c"
  7747 ;; Parameters:    Size  Location     Type
  7748 ;;  divisor         4   14[BANK4 ] unsigned long 
  7749 ;;  dividend        4   18[BANK4 ] unsigned long 
  7750 ;; Auto vars:     Size  Location     Type
  7751 ;;  counter         1   23[BANK4 ] unsigned char 
  7752 ;; Return value:  Size  Location     Type
  7753 ;;                  4   14[BANK4 ] unsigned long 
  7754 ;; Registers used:
  7755 ;;		wreg, status,2, status,0
  7756 ;; Tracked objects:
  7757 ;;		On entry : 0/0
  7758 ;;		On exit  : 0/0
  7759 ;;		Unchanged: 0/0
  7760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7761 ;;      Params:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  7762 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7763 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7764 ;;      Totals:         0       0       0       0       0      10       0       0       0       0       0       0       
      +0       0
  7765 ;;Total ram usage:       10 bytes
  7766 ;; Hardware stack levels used:    1
  7767 ;; Hardware stack levels required when called:    7
  7768 ;; This function calls:
  7769 ;;		Nothing
  7770 ;; This function is called by:
  7771 ;;		_sprintf
  7772 ;; This function uses a non-reentrant model
  7773 ;;
  7774                           
  7775                           
  7776                           ;psect for function ___llmod
  7777  1D2F                     ___llmod:	
  7778                           
  7779                           ;incstack = 0
  7780                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  7781  1D2F  0024               	movlb	4	; select bank4
  7782  1D30  0831               	movf	(___llmod@divisor+3)^(0+512),w
  7783  1D31  0430               	iorwf	(___llmod@divisor+2)^(0+512),w
  7784  1D32  042F               	iorwf	(___llmod@divisor+1)^(0+512),w
  7785  1D33  042E               	iorwf	___llmod@divisor^(0+512),w
  7786  1D34  1903               	skipnz
  7787  1D35  2D69               	goto	l4259
  7788  1D36  01B7               	clrf	___llmod@counter^(0+512)
  7789  1D37  0AB7               	incf	___llmod@counter^(0+512),f
  7790  1D38                     l4249:	
  7791  1D38  1BB1               	btfsc	(___llmod@divisor+3)^(0+512),7
  7792  1D39  2D46               	goto	l4251
  7793  1D3A  3001               	movlw	1
  7794  1D3B                     u4765:	
  7795  1D3B  35AE               	lslf	___llmod@divisor^(0+512),f
  7796  1D3C  0DAF               	rlf	(___llmod@divisor+1)^(0+512),f
  7797  1D3D  0DB0               	rlf	(___llmod@divisor+2)^(0+512),f
  7798  1D3E  0DB1               	rlf	(___llmod@divisor+3)^(0+512),f
  7799  1D3F  0B89               	decfsz	9,f
  7800  1D40  2D3B               	goto	u4765
  7801  1D41  3001               	movlw	1
  7802  1D42  00B6               	movwf	??___llmod^(0+512)
  7803  1D43  0836               	movf	??___llmod^(0+512),w
  7804  1D44  07B7               	addwf	___llmod@counter^(0+512),f
  7805  1D45  2D38               	goto	l4249
  7806  1D46                     l4251:	
  7807  1D46  0831               	movf	(___llmod@divisor+3)^(0+512),w
  7808  1D47  0235               	subwf	(___llmod@dividend+3)^(0+512),w
  7809  1D48  1D03               	skipz
  7810  1D49  2D54               	goto	u4785
  7811  1D4A  0830               	movf	(___llmod@divisor+2)^(0+512),w
  7812  1D4B  0234               	subwf	(___llmod@dividend+2)^(0+512),w
  7813  1D4C  1D03               	skipz
  7814  1D4D  2D54               	goto	u4785
  7815  1D4E  082F               	movf	(___llmod@divisor+1)^(0+512),w
  7816  1D4F  0233               	subwf	(___llmod@dividend+1)^(0+512),w
  7817  1D50  1D03               	skipz
  7818  1D51  2D54               	goto	u4785
  7819  1D52  082E               	movf	___llmod@divisor^(0+512),w
  7820  1D53  0232               	subwf	___llmod@dividend^(0+512),w
  7821  1D54                     u4785:	
  7822  1D54  1C03               	skipc
  7823  1D55  2D5E               	goto	l4255
  7824  1D56  082E               	movf	___llmod@divisor^(0+512),w
  7825  1D57  02B2               	subwf	___llmod@dividend^(0+512),f
  7826  1D58  082F               	movf	(___llmod@divisor+1)^(0+512),w
  7827  1D59  3BB3               	subwfb	(___llmod@dividend+1)^(0+512),f
  7828  1D5A  0830               	movf	(___llmod@divisor+2)^(0+512),w
  7829  1D5B  3BB4               	subwfb	(___llmod@dividend+2)^(0+512),f
  7830  1D5C  0831               	movf	(___llmod@divisor+3)^(0+512),w
  7831  1D5D  3BB5               	subwfb	(___llmod@dividend+3)^(0+512),f
  7832  1D5E                     l4255:	
  7833  1D5E  3001               	movlw	1
  7834  1D5F                     u4795:	
  7835  1D5F  36B1               	lsrf	(___llmod@divisor+3)^(0+512),f
  7836  1D60  0CB0               	rrf	(___llmod@divisor+2)^(0+512),f
  7837  1D61  0CAF               	rrf	(___llmod@divisor+1)^(0+512),f
  7838  1D62  0CAE               	rrf	___llmod@divisor^(0+512),f
  7839  1D63  0B89               	decfsz	9,f
  7840  1D64  2D5F               	goto	u4795
  7841  1D65  3001               	movlw	1
  7842  1D66  02B7               	subwf	___llmod@counter^(0+512),f
  7843  1D67  1D03               	btfss	3,2
  7844  1D68  2D46               	goto	l4251
  7845  1D69                     l4259:	
  7846  1D69  0835               	movf	(___llmod@dividend+3)^(0+512),w
  7847  1D6A  00B1               	movwf	(?___llmod+3)^(0+512)
  7848  1D6B  0834               	movf	(___llmod@dividend+2)^(0+512),w
  7849  1D6C  00B0               	movwf	(?___llmod+2)^(0+512)
  7850  1D6D  0833               	movf	(___llmod@dividend+1)^(0+512),w
  7851  1D6E  00AF               	movwf	(?___llmod+1)^(0+512)
  7852  1D6F  0832               	movf	___llmod@dividend^(0+512),w
  7853  1D70  00AE               	movwf	?___llmod^(0+512)
  7854  1D71  0008               	return
  7855  1D72                     __end_of___llmod:	
  7856                           
  7857                           	psect	text18
  7858  1BC6                     __ptext18:	
  7859 ;; *************** function _UARTstringWAIT *****************
  7860 ;; Defined at:
  7861 ;;		line 361 in file "UART.c"
  7862 ;; Parameters:    Size  Location     Type
  7863 ;;  data            2   15[BANK4 ] PTR const unsigned char 
  7864 ;;		 -> STR_21(29), STR_20(3), Process_PS2_ScanCode@buf(60), STR_18(3), 
  7865 ;;		 -> STR_17(3), STR_16(23), STR_15(19), STR_14(3), 
  7866 ;;		 -> STR_13(3), SetBaud@buf(50), STR_11(24), STR_10(3), 
  7867 ;;		 -> STR_9(3), NoParityMSG(20), SpaceParityMSG(16), MarkParityMSG(15), 
  7868 ;;		 -> EvenParityMSG(22), OddParityMSG(21), Init_System@buf(60), STR_7(3), 
  7869 ;;		 -> STR_6(39), STR_5(3), Version(8), STR_4(19), 
  7870 ;;		 -> STR_3(28), STR_2(8), STR_1(7), VoltageMSG(13), 
  7871 ;; Auto vars:     Size  Location     Type
  7872 ;;		None
  7873 ;; Return value:  Size  Location     Type
  7874 ;;		None               void
  7875 ;; Registers used:
  7876 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7877 ;; Tracked objects:
  7878 ;;		On entry : 0/0
  7879 ;;		On exit  : 0/0
  7880 ;;		Unchanged: 0/0
  7881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7882 ;;      Params:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  7883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7884 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  7885 ;;      Totals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  7886 ;;Total ram usage:        4 bytes
  7887 ;; Hardware stack levels used:    1
  7888 ;; Hardware stack levels required when called:    9
  7889 ;; This function calls:
  7890 ;;		_UARTchar
  7891 ;;		_delayUS
  7892 ;; This function is called by:
  7893 ;;		_main
  7894 ;;		_Init_System
  7895 ;; This function uses a non-reentrant model
  7896 ;;
  7897                           
  7898                           
  7899                           ;psect for function _UARTstringWAIT
  7900  1BC6                     _UARTstringWAIT:	
  7901  1BC6                     l468:	
  7902                           ;incstack = 0
  7903                           ; Regs used in _UARTstringWAIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7904                           ;UART.c: 363: do
  7905                           
  7906                           
  7907                           ;UART.c: 364: {
  7908                           ;UART.c: 365: delayUS(5000);
  7909  1BC6  3000               	movlw	0
  7910  1BC7  0024               	movlb	4	; select bank4
  7911  1BC8  00A3               	movwf	(delayUS@US+3)^(0+512)
  7912  1BC9  3000               	movlw	0
  7913  1BCA  00A2               	movwf	(delayUS@US+2)^(0+512)
  7914  1BCB  3013               	movlw	19
  7915  1BCC  00A1               	movwf	(delayUS@US+1)^(0+512)
  7916  1BCD  3088               	movlw	136
  7917  1BCE  00A0               	movwf	delayUS@US^(0+512)
  7918  1BCF  319B  23F9  319B   	fcall	_delayUS
  7919                           
  7920                           ;UART.c: 366: if(*data != 0)
  7921  1BD2  0024               	movlb	4	; select bank4
  7922  1BD3  082F               	movf	UARTstringWAIT@data^(0+512),w
  7923  1BD4  0084               	movwf	4
  7924  1BD5  0830               	movf	(UARTstringWAIT@data+1)^(0+512),w
  7925  1BD6  0085               	movwf	5
  7926  1BD7  0800               	movf	0,w	;code access
  7927  1BD8  3A00               	xorlw	0
  7928  1BD9  1903               	skipnz
  7929  1BDA  2BE8               	goto	l6183
  7930                           
  7931                           ;UART.c: 367: {
  7932                           ;UART.c: 368: UARTchar(*data, 0, 0);
  7933  1BDB  01A8               	clrf	UARTchar@override^(0+512)
  7934  1BDC  01A9               	clrf	UARTchar@NinethBit_override_data^(0+512)
  7935  1BDD  082F               	movf	UARTstringWAIT@data^(0+512),w
  7936  1BDE  0084               	movwf	4
  7937  1BDF  0830               	movf	(UARTstringWAIT@data+1)^(0+512),w
  7938  1BE0  0085               	movwf	5
  7939  1BE1  0800               	movf	0,w	;code access
  7940  1BE2  3190  20E6  319B   	fcall	_UARTchar
  7941  1BE5                     l470:	
  7942                           ;UART.c: 369: while((!TX1STAbits.TRMT));
  7943                           
  7944  1BE5  0023               	movlb	3	; select bank3
  7945  1BE6  1C9E               	btfss	30,1	;volatile
  7946  1BE7  2BE5               	goto	l470
  7947  1BE8                     l6183:	
  7948                           
  7949                           ;UART.c: 370: }
  7950                           ;UART.c: 371: } while( *data++);
  7951  1BE8  0024               	movlb	4	; select bank4
  7952  1BE9  0830               	movf	(UARTstringWAIT@data+1)^(0+512),w
  7953  1BEA  00B2               	movwf	(??_UARTstringWAIT^(0+512)+1)
  7954  1BEB  082F               	movf	UARTstringWAIT@data^(0+512),w
  7955  1BEC  00B1               	movwf	??_UARTstringWAIT^(0+512)
  7956  1BED  0AAF               	incf	UARTstringWAIT@data^(0+512),f
  7957  1BEE  1903               	skipnz
  7958  1BEF  0AB0               	incf	(UARTstringWAIT@data+1)^(0+512),f
  7959  1BF0  0831               	movf	??_UARTstringWAIT^(0+512),w
  7960  1BF1  0084               	movwf	4
  7961  1BF2  0832               	movf	(??_UARTstringWAIT+1)^(0+512),w
  7962  1BF3  0085               	movwf	5
  7963  1BF4  0800               	movf	0,w	;code access
  7964  1BF5  3800               	iorlw	0
  7965  1BF6  1903               	btfsc	3,2
  7966  1BF7  0008               	return
  7967  1BF8  2BC6               	goto	l468
  7968  1BF9                     __end_of_UARTstringWAIT:	
  7969                           
  7970                           	psect	text19
  7971  1BF9                     __ptext19:	
  7972 ;; *************** function _delayUS *****************
  7973 ;; Defined at:
  7974 ;;		line 49 in file "MISC.c"
  7975 ;; Parameters:    Size  Location     Type
  7976 ;;  US              4    0[BANK4 ] long 
  7977 ;; Auto vars:     Size  Location     Type
  7978 ;;  i               4    5[BANK4 ] long 
  7979 ;;  j               1    9[BANK4 ] unsigned char 
  7980 ;; Return value:  Size  Location     Type
  7981 ;;		None               void
  7982 ;; Registers used:
  7983 ;;		wreg, status,2, status,0
  7984 ;; Tracked objects:
  7985 ;;		On entry : 0/0
  7986 ;;		On exit  : 0/0
  7987 ;;		Unchanged: 0/0
  7988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7989 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  7990 ;;      Locals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  7991 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7992 ;;      Totals:         0       0       0       0       0      10       0       0       0       0       0       0       
      +0       0
  7993 ;;Total ram usage:       10 bytes
  7994 ;; Hardware stack levels used:    1
  7995 ;; Hardware stack levels required when called:    7
  7996 ;; This function calls:
  7997 ;;		Nothing
  7998 ;; This function is called by:
  7999 ;;		_main
  8000 ;;		_Init_System
  8001 ;;		_UARTstringWAIT
  8002 ;;		_InternalADC_Read
  8003 ;;		_Init_PS_2_Send
  8004 ;;		_Keyboard_Connected
  8005 ;; This function uses a non-reentrant model
  8006 ;;
  8007                           
  8008                           
  8009                           ;psect for function _delayUS
  8010  1BF9                     _delayUS:	
  8011                           
  8012                           ;MISC.c: 51: long i;
  8013                           ;MISC.c: 52: unsigned char j;
  8014                           ;MISC.c: 53: for(i=0;i<US;i+=6)
  8015                           
  8016                           ;incstack = 0
  8017                           ; Regs used in _delayUS: [wreg+status,2+status,0]
  8018  1BF9  3000               	movlw	0
  8019  1BFA  0024               	movlb	4	; select bank4
  8020  1BFB  00A8               	movwf	(delayUS@i+3)^(0+512)
  8021  1BFC  3000               	movlw	0
  8022  1BFD  00A7               	movwf	(delayUS@i+2)^(0+512)
  8023  1BFE  3000               	movlw	0
  8024  1BFF  00A6               	movwf	(delayUS@i+1)^(0+512)
  8025  1C00  3000               	movlw	0
  8026  1C01  00A5               	movwf	delayUS@i^(0+512)
  8027  1C02                     l284:	
  8028  1C02  0828               	movf	(delayUS@i+3)^(0+512),w
  8029  1C03  3A80               	xorlw	128
  8030  1C04  00A4               	movwf	??_delayUS^(0+512)
  8031  1C05  0823               	movf	(delayUS@US+3)^(0+512),w
  8032  1C06  3A80               	xorlw	128
  8033  1C07  0224               	subwf	??_delayUS^(0+512),w
  8034  1C08  1D03               	skipz
  8035  1C09  2C14               	goto	u7743
  8036  1C0A  0822               	movf	(delayUS@US+2)^(0+512),w
  8037  1C0B  0227               	subwf	(delayUS@i+2)^(0+512),w
  8038  1C0C  1D03               	skipz
  8039  1C0D  2C14               	goto	u7743
  8040  1C0E  0821               	movf	(delayUS@US+1)^(0+512),w
  8041  1C0F  0226               	subwf	(delayUS@i+1)^(0+512),w
  8042  1C10  1D03               	skipz
  8043  1C11  2C14               	goto	u7743
  8044  1C12  0820               	movf	delayUS@US^(0+512),w
  8045  1C13  0225               	subwf	delayUS@i^(0+512),w
  8046  1C14                     u7743:	
  8047  1C14  1803               	btfsc	3,0
  8048  1C15  0008               	return
  8049                           
  8050                           ;MISC.c: 54: {
  8051                           ;MISC.c: 55: for(j=0;j<32;j++)
  8052  1C16  01A9               	clrf	delayUS@j^(0+512)
  8053  1C17  3020               	movlw	32
  8054  1C18  0229               	subwf	delayUS@j^(0+512),w
  8055  1C19  1803               	btfsc	3,0
  8056  1C1A  2C25               	goto	l6065
  8057  1C1B                     l286:	
  8058                           
  8059                           ;MISC.c: 56: {
  8060                           ;MISC.c: 57: __nop();
  8061  1C1B  0000               	nop
  8062  1C1C  3001               	movlw	1
  8063  1C1D  0024               	movlb	4	; select bank4
  8064  1C1E  00A4               	movwf	??_delayUS^(0+512)
  8065  1C1F  0824               	movf	??_delayUS^(0+512),w
  8066  1C20  07A9               	addwf	delayUS@j^(0+512),f
  8067  1C21  3020               	movlw	32
  8068  1C22  0229               	subwf	delayUS@j^(0+512),w
  8069  1C23  1C03               	skipc
  8070  1C24  2C1B               	goto	l286
  8071  1C25                     l6065:	
  8072  1C25  3006               	movlw	6
  8073  1C26  07A5               	addwf	delayUS@i^(0+512),f
  8074  1C27  3000               	movlw	0
  8075  1C28  3DA6               	addwfc	(delayUS@i+1)^(0+512),f
  8076  1C29  3000               	movlw	0
  8077  1C2A  3DA7               	addwfc	(delayUS@i+2)^(0+512),f
  8078  1C2B  3000               	movlw	0
  8079  1C2C  3DA8               	addwfc	(delayUS@i+3)^(0+512),f
  8080  1C2D  2C02               	goto	l284
  8081  1C2E                     __end_of_delayUS:	
  8082                           
  8083                           	psect	text20
  8084  10E6                     __ptext20:	
  8085 ;; *************** function _UARTchar *****************
  8086 ;; Defined at:
  8087 ;;		line 231 in file "UART.c"
  8088 ;; Parameters:    Size  Location     Type
  8089 ;;  data            1    wreg     unsigned char 
  8090 ;;  override        1    8[BANK4 ] unsigned char 
  8091 ;;  NinethBit_ov    1    9[BANK4 ] unsigned char 
  8092 ;; Auto vars:     Size  Location     Type
  8093 ;;  data            1   14[BANK4 ] unsigned char 
  8094 ;; Return value:  Size  Location     Type
  8095 ;;		None               void
  8096 ;; Registers used:
  8097 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8098 ;; Tracked objects:
  8099 ;;		On entry : 0/0
  8100 ;;		On exit  : 0/0
  8101 ;;		Unchanged: 0/0
  8102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8103 ;;      Params:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  8104 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  8105 ;;      Temps:          0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8106 ;;      Totals:         0       0       0       0       0       7       0       0       0       0       0       0       
      +0       0
  8107 ;;Total ram usage:        7 bytes
  8108 ;; Hardware stack levels used:    1
  8109 ;; Hardware stack levels required when called:    8
  8110 ;; This function calls:
  8111 ;;		_CheckSum_byte
  8112 ;; This function is called by:
  8113 ;;		_UARTstringWAIT
  8114 ;;		_UARTstring
  8115 ;; This function uses a non-reentrant model
  8116 ;;
  8117                           
  8118                           
  8119                           ;psect for function _UARTchar
  8120  10E6                     _UARTchar:	
  8121                           
  8122                           ;incstack = 0
  8123                           ; Regs used in _UARTchar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8124                           ;UARTchar@data stored from wreg
  8125  10E6  0024               	movlb	4	; select bank4
  8126  10E7  00AE               	movwf	UARTchar@data^(0+512)
  8127                           
  8128                           ;UART.c: 233: if(TXSTAbits.TX9)
  8129  10E8  0023               	movlb	3	; select bank3
  8130  10E9  1F1E               	btfss	30,6	;volatile
  8131  10EA  292F               	goto	l6043
  8132                           
  8133                           ;UART.c: 234: {
  8134                           ;UART.c: 236: if(!override)
  8135  10EB  0024               	movlb	4	; select bank4
  8136  10EC  08A8               	movf	UARTchar@override^(0+512),f
  8137  10ED  1903               	btfsc	3,2
  8138  10EE  2917               	goto	l6039
  8139  10EF  2924               	goto	l6041
  8140  10F0                     l6033:	
  8141                           ;UART.c: 240: {
  8142                           ;UART.c: 241: case 1:
  8143                           
  8144                           ;UART.c: 237: {
  8145                           ;UART.c: 239: switch (PARITY)
  8146                           
  8147                           
  8148                           ;UART.c: 242: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 3);
  8149  10F0  082E               	movf	UARTchar@data^(0+512),w
  8150  10F1  00AA               	movwf	??_UARTchar^(0+512)
  8151  10F2  01AB               	clrf	(??_UARTchar^(0+512)+1)
  8152  10F3  082A               	movf	??_UARTchar^(0+512),w
  8153  10F4  00A0               	movwf	CheckSum_byte@This^(0+512)
  8154  10F5  082B               	movf	(??_UARTchar+1)^(0+512),w
  8155  10F6  00A1               	movwf	(CheckSum_byte@This+1)^(0+512)
  8156  10F7  3003               	movlw	3
  8157  10F8  2902               	goto	L7
  8158  10F9                     l6035:	
  8159                           ;UART.c: 244: case 2:
  8160                           
  8161                           ;UART.c: 243: break;
  8162                           
  8163                           
  8164                           ;UART.c: 245: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 2);
  8165  10F9  0024               	movlb	4	; select bank4
  8166  10FA  082E               	movf	UARTchar@data^(0+512),w
  8167  10FB  00AA               	movwf	??_UARTchar^(0+512)
  8168  10FC  01AB               	clrf	(??_UARTchar^(0+512)+1)
  8169  10FD  082A               	movf	??_UARTchar^(0+512),w
  8170  10FE  00A0               	movwf	CheckSum_byte@This^(0+512)
  8171  10FF  082B               	movf	(??_UARTchar+1)^(0+512),w
  8172  1100  00A1               	movwf	(CheckSum_byte@This+1)^(0+512)
  8173  1101  3002               	movlw	2
  8174  1102                     L7:	
  8175  1102  00AC               	movwf	(??_UARTchar+2)^(0+512)
  8176  1103  082C               	movf	(??_UARTchar+2)^(0+512),w
  8177  1104  00A2               	movwf	CheckSum_byte@Odd_Even^(0+512)
  8178  1105  319A  22FE  3190   	fcall	_CheckSum_byte
  8179  1108  0024               	movlb	4	; select bank4
  8180  1109  00AD               	movwf	(??_UARTchar+3)^(0+512)
  8181  110A  0023               	movlb	3	; select bank3
  8182  110B  081E               	movf	30,w	;volatile
  8183  110C  0024               	movlb	4	; select bank4
  8184  110D  062D               	xorwf	(??_UARTchar+3)^(0+512),w
  8185  110E  39FE               	andlw	-2
  8186  110F  062D               	xorwf	(??_UARTchar+3)^(0+512),w
  8187  1110  292D               	goto	L6
  8188  1111                     l434:	
  8189                           ;UART.c: 247: case 3:
  8190                           
  8191                           ;UART.c: 246: break;
  8192                           
  8193                           
  8194                           ;UART.c: 248: TXSTAbits.TX9D = 1;
  8195  1111  0023               	movlb	3	; select bank3
  8196  1112  141E               	bsf	30,0	;volatile
  8197                           
  8198                           ;UART.c: 249: break;
  8199  1113  292F               	goto	l6043
  8200  1114                     l435:	
  8201                           ;UART.c: 250: default:
  8202                           
  8203                           
  8204                           ;UART.c: 251: TXSTAbits.TX9D = 0;
  8205  1114  0023               	movlb	3	; select bank3
  8206  1115  101E               	bcf	30,0	;volatile
  8207                           
  8208                           ;UART.c: 253: }
  8209                           
  8210                           ;UART.c: 252: break;
  8211  1116  292F               	goto	l6043
  8212  1117                     l6039:	
  8213  1117  0024               	movlb	4	; select bank4
  8214  1118  0860               	movf	_PARITY^(0+512),w
  8215                           
  8216                           ; Switch size 1, requested type "space"
  8217                           ; Number of cases is 3, Range of values is 1 to 3
  8218                           ; switch strategies available:
  8219                           ; Name         Instructions Cycles
  8220                           ; simple_byte           10     6 (average)
  8221                           ; direct_byte           15     9 (fixed)
  8222                           ; jumptable            263     9 (fixed)
  8223                           ;	Chosen strategy is simple_byte
  8224  1119  3A01               	xorlw	1	; case 1
  8225  111A  1903               	skipnz
  8226  111B  28F0               	goto	l6033
  8227  111C  3A03               	xorlw	3	; case 2
  8228  111D  1903               	skipnz
  8229  111E  28F9               	goto	l6035
  8230  111F  3A01               	xorlw	1	; case 3
  8231  1120  1903               	skipnz
  8232  1121  2911               	goto	l434
  8233  1122  2914               	goto	l435
  8234                           
  8235                           ;UART.c: 254: }
  8236  1123  292F               	goto	l6043
  8237  1124                     l6041:	
  8238                           
  8239                           ;UART.c: 255: else
  8240                           ;UART.c: 256: {
  8241                           ;UART.c: 257: TXSTAbits.TX9D = (NinethBit_override_data & 0x01);
  8242  1124  3001               	movlw	1
  8243  1125  0529               	andwf	UARTchar@NinethBit_override_data^(0+512),w
  8244  1126  00AA               	movwf	??_UARTchar^(0+512)
  8245  1127  0023               	movlb	3	; select bank3
  8246  1128  081E               	movf	30,w	;volatile
  8247  1129  0024               	movlb	4	; select bank4
  8248  112A  062A               	xorwf	??_UARTchar^(0+512),w
  8249  112B  39FE               	andlw	-2
  8250  112C  062A               	xorwf	??_UARTchar^(0+512),w
  8251  112D                     L6:	
  8252  112D  0023               	movlb	3	; select bank3
  8253  112E  009E               	movwf	30	;volatile
  8254  112F                     l6043:	
  8255                           
  8256                           ;UART.c: 258: }
  8257                           ;UART.c: 259: }
  8258                           ;UART.c: 261: if(data == '\n')
  8259  112F  0024               	movlb	4	; select bank4
  8260  1130  082E               	movf	UARTchar@data^(0+512),w
  8261  1131  3A0A               	xorlw	10
  8262  1132  1D03               	skipz
  8263  1133  2940               	goto	l443
  8264                           
  8265                           ;UART.c: 262: {
  8266                           ;UART.c: 263: if(override)
  8267  1134  0828               	movf	UARTchar@override^(0+512),w
  8268  1135  1903               	btfsc	3,2
  8269  1136  0008               	return
  8270  1137                     l439:	
  8271                           ;UART.c: 264: {
  8272                           ;UART.c: 265: while(!TXSTAbits.TRMT);
  8273                           
  8274  1137  0023               	movlb	3	; select bank3
  8275  1138  1C9E               	btfss	30,1	;volatile
  8276  1139  2937               	goto	l439
  8277                           
  8278                           ;UART.c: 266: TXREG = data;
  8279  113A  0024               	movlb	4	; select bank4
  8280  113B  082E               	movf	UARTchar@data^(0+512),w
  8281  113C  0023               	movlb	3	; select bank3
  8282  113D  009A               	movwf	26	;volatile
  8283  113E  0024               	movlb	4	; select bank4
  8284  113F  0008               	return
  8285  1140                     l443:	
  8286                           ;UART.c: 269: else
  8287                           ;UART.c: 270: {
  8288                           ;UART.c: 271: while(!TXSTAbits.TRMT);
  8289                           
  8290                           ;UART.c: 267: }
  8291                           ;UART.c: 268: }
  8292                           
  8293  1140  0023               	movlb	3	; select bank3
  8294  1141  1C9E               	btfss	30,1	;volatile
  8295  1142  2940               	goto	l443
  8296                           
  8297                           ;UART.c: 272: TXREG = data;
  8298  1143  0024               	movlb	4	; select bank4
  8299  1144  082E               	movf	UARTchar@data^(0+512),w
  8300  1145  0023               	movlb	3	; select bank3
  8301  1146  009A               	movwf	26	;volatile
  8302  1147  0024               	movlb	4	; select bank4
  8303  1148  0008               	return
  8304  1149                     __end_of_UARTchar:	
  8305                           
  8306                           	psect	text21
  8307  1AFE                     __ptext21:	
  8308 ;; *************** function _CheckSum_byte *****************
  8309 ;; Defined at:
  8310 ;;		line 69 in file "MISC.c"
  8311 ;; Parameters:    Size  Location     Type
  8312 ;;  This            2    0[BANK4 ] unsigned int 
  8313 ;;  Odd_Even        1    2[BANK4 ] unsigned char 
  8314 ;; Auto vars:     Size  Location     Type
  8315 ;;  ThisTemp        2    4[BANK4 ] unsigned int 
  8316 ;;  i               1    7[BANK4 ] unsigned char 
  8317 ;;  Parity          1    6[BANK4 ] unsigned char 
  8318 ;; Return value:  Size  Location     Type
  8319 ;;                  1    wreg      unsigned char 
  8320 ;; Registers used:
  8321 ;;		wreg, status,2, status,0
  8322 ;; Tracked objects:
  8323 ;;		On entry : 0/0
  8324 ;;		On exit  : 0/0
  8325 ;;		Unchanged: 0/0
  8326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8327 ;;      Params:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  8328 ;;      Locals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8329 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  8330 ;;      Totals:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  8331 ;;Total ram usage:        8 bytes
  8332 ;; Hardware stack levels used:    1
  8333 ;; Hardware stack levels required when called:    7
  8334 ;; This function calls:
  8335 ;;		Nothing
  8336 ;; This function is called by:
  8337 ;;		_UARTchar
  8338 ;; This function uses a non-reentrant model
  8339 ;;
  8340                           
  8341                           
  8342                           ;psect for function _CheckSum_byte
  8343  1AFE                     _CheckSum_byte:	
  8344                           
  8345                           ;MISC.c: 71: char i = 0;
  8346                           
  8347                           ;incstack = 0
  8348                           ; Regs used in _CheckSum_byte: [wreg+status,2+status,0]
  8349  1AFE  0024               	movlb	4	; select bank4
  8350  1AFF  01A7               	clrf	CheckSum_byte@i^(0+512)
  8351                           
  8352                           ;MISC.c: 72: unsigned char Parity = 0;
  8353  1B00  01A6               	clrf	CheckSum_byte@Parity^(0+512)
  8354                           
  8355                           ;MISC.c: 73: unsigned int ThisTemp = This;
  8356  1B01  0821               	movf	(CheckSum_byte@This+1)^(0+512),w
  8357  1B02  01A5               	clrf	(CheckSum_byte@ThisTemp+1)^(0+512)
  8358  1B03  07A5               	addwf	(CheckSum_byte@ThisTemp+1)^(0+512),f
  8359  1B04  0820               	movf	CheckSum_byte@This^(0+512),w
  8360  1B05  01A4               	clrf	CheckSum_byte@ThisTemp^(0+512)
  8361  1B06  07A4               	addwf	CheckSum_byte@ThisTemp^(0+512),f
  8362                           
  8363                           ;MISC.c: 75: for (i =0; i<8; i++)
  8364  1B07  01A7               	clrf	CheckSum_byte@i^(0+512)
  8365  1B08  3008               	movlw	8
  8366  1B09  0227               	subwf	CheckSum_byte@i^(0+512),w
  8367  1B0A  1803               	btfsc	3,0
  8368  1B0B  2B1F               	goto	l5987
  8369  1B0C                     l292:	
  8370                           
  8371                           ;MISC.c: 76: {
  8372                           ;MISC.c: 77: if((ThisTemp & 0x01) == 1)
  8373  1B0C  1C24               	btfss	CheckSum_byte@ThisTemp^(0+512),0
  8374  1B0D  2B12               	goto	l294
  8375                           
  8376                           ;MISC.c: 78: {
  8377                           ;MISC.c: 79: Parity++;
  8378  1B0E  3001               	movlw	1
  8379  1B0F  00A3               	movwf	??_CheckSum_byte^(0+512)
  8380  1B10  0823               	movf	??_CheckSum_byte^(0+512),w
  8381  1B11  07A6               	addwf	CheckSum_byte@Parity^(0+512),f
  8382  1B12                     l294:	
  8383                           
  8384                           ;MISC.c: 80: }
  8385                           ;MISC.c: 81: ThisTemp >>= 1;
  8386  1B12  3001               	movlw	1
  8387  1B13                     u7585:	
  8388  1B13  36A5               	lsrf	(CheckSum_byte@ThisTemp+1)^(0+512),f
  8389  1B14  0CA4               	rrf	CheckSum_byte@ThisTemp^(0+512),f
  8390  1B15  0B89               	decfsz	9,f
  8391  1B16  2B13               	goto	u7585
  8392  1B17  3001               	movlw	1
  8393  1B18  00A3               	movwf	??_CheckSum_byte^(0+512)
  8394  1B19  0823               	movf	??_CheckSum_byte^(0+512),w
  8395  1B1A  07A7               	addwf	CheckSum_byte@i^(0+512),f
  8396  1B1B  3008               	movlw	8
  8397  1B1C  0227               	subwf	CheckSum_byte@i^(0+512),w
  8398  1B1D  1C03               	skipc
  8399  1B1E  2B0C               	goto	l292
  8400  1B1F                     l5987:	
  8401                           
  8402                           ;MISC.c: 82: }
  8403                           ;MISC.c: 83: if(Odd_Even == 3)
  8404  1B1F  0822               	movf	CheckSum_byte@Odd_Even^(0+512),w
  8405  1B20  3A03               	xorlw	3
  8406  1B21  1D03               	skipz
  8407  1B22  2B29               	goto	l295
  8408                           
  8409                           ;MISC.c: 84: {
  8410                           ;MISC.c: 85: if(Parity % 2 == 0)
  8411  1B23  1826               	btfsc	CheckSum_byte@Parity^(0+512),0
  8412  1B24  2B27               	goto	l5995
  8413                           
  8414                           ;MISC.c: 86: {
  8415                           ;MISC.c: 87: return 1;
  8416  1B25  3001               	movlw	1
  8417  1B26  0008               	return
  8418  1B27                     l5995:	
  8419                           
  8420                           ;MISC.c: 88: }
  8421                           ;MISC.c: 89: return 0;
  8422  1B27  3000               	movlw	0
  8423                           
  8424                           ;MISC.c: 90: }
  8425  1B28  0008               	return
  8426  1B29                     l295:	
  8427                           
  8428                           ;MISC.c: 91: else
  8429                           ;MISC.c: 92: {
  8430                           ;MISC.c: 93: if(Parity % 2 == 1)
  8431  1B29  1C26               	btfss	CheckSum_byte@Parity^(0+512),0
  8432  1B2A  2B2D               	goto	l6005
  8433                           
  8434                           ;MISC.c: 94: {
  8435                           ;MISC.c: 95: return 1;
  8436  1B2B  3001               	movlw	1
  8437  1B2C  0008               	return
  8438  1B2D                     l6005:	
  8439                           
  8440                           ;MISC.c: 96: }
  8441                           ;MISC.c: 97: return 0;
  8442  1B2D  3000               	movlw	0
  8443  1B2E  0008               	return
  8444  1B2F                     __end_of_CheckSum_byte:	
  8445                           
  8446                           	psect	text22
  8447  11AD                     __ptext22:	
  8448 ;; *************** function _ReadBaud *****************
  8449 ;; Defined at:
  8450 ;;		line 187 in file "FLASH.c"
  8451 ;; Parameters:    Size  Location     Type
  8452 ;;  row             2   18[BANK4 ] unsigned int 
  8453 ;;  column          1   20[BANK4 ] unsigned char 
  8454 ;; Auto vars:     Size  Location     Type
  8455 ;;  temp            4   30[BANK4 ] unsigned long 
  8456 ;; Return value:  Size  Location     Type
  8457 ;;                  4   18[BANK4 ] unsigned long 
  8458 ;; Registers used:
  8459 ;;		wreg, status,2, status,0, pclath, cstack
  8460 ;; Tracked objects:
  8461 ;;		On entry : 0/0
  8462 ;;		On exit  : 0/0
  8463 ;;		Unchanged: 0/0
  8464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8465 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8466 ;;      Locals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8467 ;;      Temps:          0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  8468 ;;      Totals:         0       0       0       0       0      16       0       0       0       0       0       0       
      +0       0
  8469 ;;Total ram usage:       16 bytes
  8470 ;; Hardware stack levels used:    1
  8471 ;; Hardware stack levels required when called:    9
  8472 ;; This function calls:
  8473 ;;		_ReadFlash_4Byte
  8474 ;; This function is called by:
  8475 ;;		_Init_System
  8476 ;; This function uses a non-reentrant model
  8477 ;;
  8478                           
  8479                           
  8480                           ;psect for function _ReadBaud
  8481  11AD                     _ReadBaud:	
  8482                           
  8483                           ;FLASH.c: 189: unsigned long temp;
  8484                           ;FLASH.c: 190: temp =(ReadFlash_4Byte(row, column));
  8485                           
  8486                           ;incstack = 0
  8487                           ; Regs used in _ReadBaud: [wreg+status,2+status,0+pclath+cstack]
  8488  11AD  0024               	movlb	4	; select bank4
  8489  11AE  0833               	movf	(ReadBaud@row+1)^(0+512),w
  8490  11AF  01A6               	clrf	(ReadFlash_4Byte@row+1)^(0+512)
  8491  11B0  07A6               	addwf	(ReadFlash_4Byte@row+1)^(0+512),f
  8492  11B1  0832               	movf	ReadBaud@row^(0+512),w
  8493  11B2  01A5               	clrf	ReadFlash_4Byte@row^(0+512)
  8494  11B3  07A5               	addwf	ReadFlash_4Byte@row^(0+512),f
  8495  11B4  0834               	movf	ReadBaud@column^(0+512),w
  8496  11B5  00B6               	movwf	??_ReadBaud^(0+512)
  8497  11B6  0836               	movf	??_ReadBaud^(0+512),w
  8498  11B7  00A7               	movwf	ReadFlash_4Byte@column^(0+512)
  8499  11B8  319E  2657  3191   	fcall	_ReadFlash_4Byte
  8500  11BB  0024               	movlb	4	; select bank4
  8501  11BC  0828               	movf	(?_ReadFlash_4Byte+3)^(0+512),w
  8502  11BD  00C1               	movwf	(ReadBaud@temp+3)^(0+512)
  8503  11BE  0827               	movf	(?_ReadFlash_4Byte+2)^(0+512),w
  8504  11BF  00C0               	movwf	(ReadBaud@temp+2)^(0+512)
  8505  11C0  0826               	movf	(?_ReadFlash_4Byte+1)^(0+512),w
  8506  11C1  00BF               	movwf	(ReadBaud@temp+1)^(0+512)
  8507  11C2  0825               	movf	?_ReadFlash_4Byte^(0+512),w
  8508  11C3  00BE               	movwf	ReadBaud@temp^(0+512)
  8509                           
  8510                           ;FLASH.c: 191: MEM[1] = (unsigned int)(temp & 0x0003FFF);
  8511  11C4  30FF               	movlw	255
  8512  11C5  053E               	andwf	ReadBaud@temp^(0+512),w
  8513  11C6  0021               	movlb	1	; select bank1
  8514  11C7  00E4               	movwf	(_MEM^(0+128)+2)
  8515  11C8  303F               	movlw	63
  8516  11C9  0024               	movlb	4	; select bank4
  8517  11CA  053F               	andwf	(ReadBaud@temp+1)^(0+512),w
  8518  11CB  0021               	movlb	1	; select bank1
  8519  11CC  00E5               	movwf	((_MEM+1)^(0+128)+2)
  8520                           
  8521                           ;FLASH.c: 192: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
  8522  11CD  0024               	movlb	4	; select bank4
  8523  11CE  083E               	movf	ReadBaud@temp^(0+512),w
  8524  11CF  00B6               	movwf	??_ReadBaud^(0+512)
  8525  11D0  083F               	movf	(ReadBaud@temp+1)^(0+512),w
  8526  11D1  00B7               	movwf	(??_ReadBaud^(0+512)+1)
  8527  11D2  0840               	movf	(ReadBaud@temp+2)^(0+512),w
  8528  11D3  00B8               	movwf	(??_ReadBaud^(0+512)+2)
  8529  11D4  0841               	movf	(ReadBaud@temp+3)^(0+512),w
  8530  11D5  00B9               	movwf	(??_ReadBaud^(0+512)+3)
  8531  11D6  300E               	movlw	14
  8532  11D7                     u8045:	
  8533  11D7  36B9               	lsrf	(??_ReadBaud^(0+512)+3),f
  8534  11D8  0CB8               	rrf	(??_ReadBaud^(0+512)+2),f
  8535  11D9  0CB7               	rrf	(??_ReadBaud^(0+512)+1),f
  8536  11DA  0CB6               	rrf	??_ReadBaud^(0+512),f
  8537  11DB  0B89               	decfsz	9,f
  8538  11DC  29D7               	goto	u8045
  8539  11DD  30FF               	movlw	255
  8540  11DE  0536               	andwf	??_ReadBaud^(0+512),w
  8541  11DF  0021               	movlb	1	; select bank1
  8542  11E0  00E2               	movwf	_MEM^(0+128)
  8543  11E1  303F               	movlw	63
  8544  11E2  0024               	movlb	4	; select bank4
  8545  11E3  0537               	andwf	(??_ReadBaud+1)^(0+512),w
  8546  11E4  0021               	movlb	1	; select bank1
  8547  11E5  00E3               	movwf	(_MEM+1)^(0+128)
  8548                           
  8549                           ;FLASH.c: 193: return (((unsigned long)MEM[0] << 12) + (unsigned long)MEM[1]);
  8550  11E6  0864               	movf	(_MEM^(0+128)+2),w
  8551  11E7  0024               	movlb	4	; select bank4
  8552  11E8  00B6               	movwf	??_ReadBaud^(0+512)
  8553  11E9  0021               	movlb	1	; select bank1
  8554  11EA  0865               	movf	((_MEM+1)^(0+128)+2),w
  8555  11EB  0024               	movlb	4	; select bank4
  8556  11EC  00B7               	movwf	(??_ReadBaud^(0+512)+1)
  8557  11ED  01B8               	clrf	(??_ReadBaud^(0+512)+2)
  8558  11EE  01B9               	clrf	(??_ReadBaud^(0+512)+3)
  8559  11EF  0021               	movlb	1	; select bank1
  8560  11F0  0862               	movf	_MEM^(0+128),w
  8561  11F1  0024               	movlb	4	; select bank4
  8562  11F2  00BA               	movwf	(??_ReadBaud+4)^(0+512)
  8563  11F3  0021               	movlb	1	; select bank1
  8564  11F4  0863               	movf	(_MEM+1)^(0+128),w
  8565  11F5  0024               	movlb	4	; select bank4
  8566  11F6  00BB               	movwf	((??_ReadBaud+4)^(0+512)+1)
  8567  11F7  01BC               	clrf	((??_ReadBaud+4)^(0+512)+2)
  8568  11F8  01BD               	clrf	((??_ReadBaud+4)^(0+512)+3)
  8569  11F9  300C               	movlw	12
  8570  11FA                     u8055:	
  8571  11FA  35BA               	lslf	(??_ReadBaud+4)^(0+512),f
  8572  11FB  0DBB               	rlf	((??_ReadBaud+4)^(0+512)+1),f
  8573  11FC  0DBC               	rlf	((??_ReadBaud+4)^(0+512)+2),f
  8574  11FD  0DBD               	rlf	((??_ReadBaud+4)^(0+512)+3),f
  8575  11FE  0B89               	decfsz	9,f
  8576  11FF  29FA               	goto	u8055
  8577  1200  083A               	movf	(??_ReadBaud+4)^(0+512),w
  8578  1201  07B6               	addwf	??_ReadBaud^(0+512),f
  8579  1202  083B               	movf	(??_ReadBaud+5)^(0+512),w
  8580  1203  3DB7               	addwfc	(??_ReadBaud^(0+512)+1),f
  8581  1204  083C               	movf	(??_ReadBaud+6)^(0+512),w
  8582  1205  3DB8               	addwfc	(??_ReadBaud^(0+512)+2),f
  8583  1206  083D               	movf	(??_ReadBaud+7)^(0+512),w
  8584  1207  3DB9               	addwfc	(??_ReadBaud^(0+512)+3),f
  8585  1208  0839               	movf	(??_ReadBaud+3)^(0+512),w
  8586  1209  00B5               	movwf	(?_ReadBaud+3)^(0+512)
  8587  120A  0838               	movf	(??_ReadBaud+2)^(0+512),w
  8588  120B  00B4               	movwf	(?_ReadBaud+2)^(0+512)
  8589  120C  0837               	movf	(??_ReadBaud+1)^(0+512),w
  8590  120D  00B3               	movwf	(?_ReadBaud+1)^(0+512)
  8591  120E  0836               	movf	??_ReadBaud^(0+512),w
  8592  120F  00B2               	movwf	?_ReadBaud^(0+512)
  8593  1210  0008               	return
  8594  1211                     __end_of_ReadBaud:	
  8595                           
  8596                           	psect	text23
  8597  1E57                     __ptext23:	
  8598 ;; *************** function _ReadFlash_4Byte *****************
  8599 ;; Defined at:
  8600 ;;		line 62 in file "FLASH.c"
  8601 ;; Parameters:    Size  Location     Type
  8602 ;;  row             2    5[BANK4 ] unsigned int 
  8603 ;;  column          1    7[BANK4 ] unsigned char 
  8604 ;; Auto vars:     Size  Location     Type
  8605 ;;  temp            4   14[BANK4 ] unsigned long 
  8606 ;; Return value:  Size  Location     Type
  8607 ;;                  4    5[BANK4 ] unsigned long 
  8608 ;; Registers used:
  8609 ;;		wreg, status,2, status,0, pclath, cstack
  8610 ;; Tracked objects:
  8611 ;;		On entry : 0/0
  8612 ;;		On exit  : 0/0
  8613 ;;		Unchanged: 0/0
  8614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8615 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8616 ;;      Locals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8617 ;;      Temps:          0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  8618 ;;      Totals:         0       0       0       0       0      13       0       0       0       0       0       0       
      +0       0
  8619 ;;Total ram usage:       13 bytes
  8620 ;; Hardware stack levels used:    1
  8621 ;; Hardware stack levels required when called:    8
  8622 ;; This function calls:
  8623 ;;		_ReadFlash_2Byte
  8624 ;; This function is called by:
  8625 ;;		_ReadBaud
  8626 ;; This function uses a non-reentrant model
  8627 ;;
  8628                           
  8629                           
  8630                           ;psect for function _ReadFlash_4Byte
  8631  1E57                     _ReadFlash_4Byte:	
  8632                           
  8633                           ;FLASH.c: 64: unsigned long temp =0;
  8634                           
  8635                           ;incstack = 0
  8636                           ; Regs used in _ReadFlash_4Byte: [wreg+status,2+status,0+pclath+cstack]
  8637  1E57  3000               	movlw	0
  8638  1E58  0024               	movlb	4	; select bank4
  8639  1E59  00B1               	movwf	(ReadFlash_4Byte@temp+3)^(0+512)
  8640  1E5A  3000               	movlw	0
  8641  1E5B  00B0               	movwf	(ReadFlash_4Byte@temp+2)^(0+512)
  8642  1E5C  3000               	movlw	0
  8643  1E5D  00AF               	movwf	(ReadFlash_4Byte@temp+1)^(0+512)
  8644  1E5E  3000               	movlw	0
  8645  1E5F  00AE               	movwf	ReadFlash_4Byte@temp^(0+512)
  8646                           
  8647                           ;FLASH.c: 65: temp = ((unsigned long)ReadFlash_2Byte(row, column) << 16);
  8648  1E60  0826               	movf	(ReadFlash_4Byte@row+1)^(0+512),w
  8649  1E61  01A1               	clrf	(ReadFlash_2Byte@row+1)^(0+512)
  8650  1E62  07A1               	addwf	(ReadFlash_2Byte@row+1)^(0+512),f
  8651  1E63  0825               	movf	ReadFlash_4Byte@row^(0+512),w
  8652  1E64  01A0               	clrf	ReadFlash_2Byte@row^(0+512)
  8653  1E65  07A0               	addwf	ReadFlash_2Byte@row^(0+512),f
  8654  1E66  0827               	movf	ReadFlash_4Byte@column^(0+512),w
  8655  1E67  00A9               	movwf	??_ReadFlash_4Byte^(0+512)
  8656  1E68  0829               	movf	??_ReadFlash_4Byte^(0+512),w
  8657  1E69  00A2               	movwf	ReadFlash_2Byte@column^(0+512)
  8658  1E6A  319B  2361  319E   	fcall	_ReadFlash_2Byte
  8659  1E6D  0024               	movlb	4	; select bank4
  8660  1E6E  0820               	movf	?_ReadFlash_2Byte^(0+512),w
  8661  1E6F  00AA               	movwf	(??_ReadFlash_4Byte+1)^(0+512)
  8662  1E70  0821               	movf	(?_ReadFlash_2Byte+1)^(0+512),w
  8663  1E71  00AB               	movwf	((??_ReadFlash_4Byte+1)^(0+512)+1)
  8664  1E72  01AC               	clrf	((??_ReadFlash_4Byte+1)^(0+512)+2)
  8665  1E73  01AD               	clrf	((??_ReadFlash_4Byte+1)^(0+512)+3)
  8666  1E74  3010               	movlw	16
  8667  1E75                     u7825:	
  8668  1E75  35AA               	lslf	(??_ReadFlash_4Byte+1)^(0+512),f
  8669  1E76  0DAB               	rlf	((??_ReadFlash_4Byte+1)^(0+512)+1),f
  8670  1E77  0DAC               	rlf	((??_ReadFlash_4Byte+1)^(0+512)+2),f
  8671  1E78  0DAD               	rlf	((??_ReadFlash_4Byte+1)^(0+512)+3),f
  8672  1E79  0B89               	decfsz	9,f
  8673  1E7A  2E75               	goto	u7825
  8674  1E7B  082D               	movf	(??_ReadFlash_4Byte+4)^(0+512),w
  8675  1E7C  00B1               	movwf	(ReadFlash_4Byte@temp+3)^(0+512)
  8676  1E7D  082C               	movf	(??_ReadFlash_4Byte+3)^(0+512),w
  8677  1E7E  00B0               	movwf	(ReadFlash_4Byte@temp+2)^(0+512)
  8678  1E7F  082B               	movf	(??_ReadFlash_4Byte+2)^(0+512),w
  8679  1E80  00AF               	movwf	(ReadFlash_4Byte@temp+1)^(0+512)
  8680  1E81  082A               	movf	(??_ReadFlash_4Byte+1)^(0+512),w
  8681  1E82  00AE               	movwf	ReadFlash_4Byte@temp^(0+512)
  8682                           
  8683                           ;FLASH.c: 66: temp |= ((unsigned long)ReadFlash_2Byte(row, (column + 1)));
  8684  1E83  0826               	movf	(ReadFlash_4Byte@row+1)^(0+512),w
  8685  1E84  01A1               	clrf	(ReadFlash_2Byte@row+1)^(0+512)
  8686  1E85  07A1               	addwf	(ReadFlash_2Byte@row+1)^(0+512),f
  8687  1E86  0825               	movf	ReadFlash_4Byte@row^(0+512),w
  8688  1E87  01A0               	clrf	ReadFlash_2Byte@row^(0+512)
  8689  1E88  07A0               	addwf	ReadFlash_2Byte@row^(0+512),f
  8690  1E89  0827               	movf	ReadFlash_4Byte@column^(0+512),w
  8691  1E8A  3E01               	addlw	1
  8692  1E8B  00A9               	movwf	??_ReadFlash_4Byte^(0+512)
  8693  1E8C  0829               	movf	??_ReadFlash_4Byte^(0+512),w
  8694  1E8D  00A2               	movwf	ReadFlash_2Byte@column^(0+512)
  8695  1E8E  319B  2361         	fcall	_ReadFlash_2Byte
  8696  1E90  0024               	movlb	4	; select bank4
  8697  1E91  0820               	movf	?_ReadFlash_2Byte^(0+512),w
  8698  1E92  00AA               	movwf	(??_ReadFlash_4Byte+1)^(0+512)
  8699  1E93  0821               	movf	(?_ReadFlash_2Byte+1)^(0+512),w
  8700  1E94  00AB               	movwf	((??_ReadFlash_4Byte+1)^(0+512)+1)
  8701  1E95  01AC               	clrf	((??_ReadFlash_4Byte+1)^(0+512)+2)
  8702  1E96  01AD               	clrf	((??_ReadFlash_4Byte+1)^(0+512)+3)
  8703  1E97  082A               	movf	(??_ReadFlash_4Byte+1)^(0+512),w
  8704  1E98  04AE               	iorwf	ReadFlash_4Byte@temp^(0+512),f
  8705  1E99  082B               	movf	(??_ReadFlash_4Byte+2)^(0+512),w
  8706  1E9A  04AF               	iorwf	(ReadFlash_4Byte@temp+1)^(0+512),f
  8707  1E9B  082C               	movf	(??_ReadFlash_4Byte+3)^(0+512),w
  8708  1E9C  04B0               	iorwf	(ReadFlash_4Byte@temp+2)^(0+512),f
  8709  1E9D  082D               	movf	(??_ReadFlash_4Byte+4)^(0+512),w
  8710  1E9E  04B1               	iorwf	(ReadFlash_4Byte@temp+3)^(0+512),f
  8711                           
  8712                           ;FLASH.c: 67: return temp;
  8713  1E9F  0831               	movf	(ReadFlash_4Byte@temp+3)^(0+512),w
  8714  1EA0  00A8               	movwf	(?_ReadFlash_4Byte+3)^(0+512)
  8715  1EA1  0830               	movf	(ReadFlash_4Byte@temp+2)^(0+512),w
  8716  1EA2  00A7               	movwf	(?_ReadFlash_4Byte+2)^(0+512)
  8717  1EA3  082F               	movf	(ReadFlash_4Byte@temp+1)^(0+512),w
  8718  1EA4  00A6               	movwf	(?_ReadFlash_4Byte+1)^(0+512)
  8719  1EA5  082E               	movf	ReadFlash_4Byte@temp^(0+512),w
  8720  1EA6  00A5               	movwf	?_ReadFlash_4Byte^(0+512)
  8721  1EA7  0008               	return
  8722  1EA8                     __end_of_ReadFlash_4Byte:	
  8723                           
  8724                           	psect	text24
  8725  1B61                     __ptext24:	
  8726 ;; *************** function _ReadFlash_2Byte *****************
  8727 ;; Defined at:
  8728 ;;		line 43 in file "FLASH.c"
  8729 ;; Parameters:    Size  Location     Type
  8730 ;;  row             2    0[BANK4 ] unsigned int 
  8731 ;;  column          1    2[BANK4 ] unsigned char 
  8732 ;; Auto vars:     Size  Location     Type
  8733 ;;		None
  8734 ;; Return value:  Size  Location     Type
  8735 ;;                  2    0[BANK4 ] unsigned int 
  8736 ;; Registers used:
  8737 ;;		wreg, status,2, status,0
  8738 ;; Tracked objects:
  8739 ;;		On entry : 0/0
  8740 ;;		On exit  : 0/0
  8741 ;;		Unchanged: 0/0
  8742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8743 ;;      Params:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  8744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8745 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  8746 ;;      Totals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  8747 ;;Total ram usage:        5 bytes
  8748 ;; Hardware stack levels used:    1
  8749 ;; Hardware stack levels required when called:    7
  8750 ;; This function calls:
  8751 ;;		Nothing
  8752 ;; This function is called by:
  8753 ;;		_ReadFlash_4Byte
  8754 ;; This function uses a non-reentrant model
  8755 ;;
  8756                           
  8757                           
  8758                           ;psect for function _ReadFlash_2Byte
  8759  1B61                     _ReadFlash_2Byte:	
  8760                           
  8761                           ;FLASH.c: 45: PMCON1 &= ~0b01000000;
  8762                           
  8763                           ;incstack = 0
  8764                           ; Regs used in _ReadFlash_2Byte: [wreg+status,2+status,0]
  8765  1B61  30BF               	movlw	191
  8766  1B62  0024               	movlb	4	; select bank4
  8767  1B63  00A3               	movwf	??_ReadFlash_2Byte^(0+512)
  8768  1B64  0823               	movf	??_ReadFlash_2Byte^(0+512),w
  8769  1B65  0023               	movlb	3	; select bank3
  8770  1B66  0595               	andwf	21,f	;volatile
  8771                           
  8772                           ;FLASH.c: 46: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
  8773  1B67  0024               	movlb	4	; select bank4
  8774  1B68  0821               	movf	(ReadFlash_2Byte@row+1)^(0+512),w
  8775  1B69  00A4               	movwf	(??_ReadFlash_2Byte^(0+512)+1)
  8776  1B6A  0820               	movf	ReadFlash_2Byte@row^(0+512),w
  8777  1B6B  00A3               	movwf	??_ReadFlash_2Byte^(0+512)
  8778  1B6C  36A4               	lsrf	(??_ReadFlash_2Byte^(0+512)+1),f
  8779  1B6D  0CA3               	rrf	??_ReadFlash_2Byte^(0+512),f
  8780  1B6E  36A4               	lsrf	(??_ReadFlash_2Byte^(0+512)+1),f
  8781  1B6F  0CA3               	rrf	??_ReadFlash_2Byte^(0+512),f
  8782  1B70  36A4               	lsrf	(??_ReadFlash_2Byte^(0+512)+1),f
  8783  1B71  0CA3               	rrf	??_ReadFlash_2Byte^(0+512),f
  8784  1B72  0823               	movf	??_ReadFlash_2Byte^(0+512),w
  8785  1B73  397F               	andlw	127
  8786  1B74  0023               	movlb	3	; select bank3
  8787  1B75  0092               	movwf	18	;volatile
  8788                           
  8789                           ;FLASH.c: 47: PMADRL = (unsigned char)(((row & 0x007) << 5) + column);
  8790  1B76  0024               	movlb	4	; select bank4
  8791  1B77  0820               	movf	ReadFlash_2Byte@row^(0+512),w
  8792  1B78  3907               	andlw	7
  8793  1B79  00A3               	movwf	??_ReadFlash_2Byte^(0+512)
  8794  1B7A  3004               	movlw	4
  8795  1B7B                     u7635:	
  8796  1B7B  35A3               	lslf	??_ReadFlash_2Byte^(0+512),f
  8797  1B7C  3EFF               	addlw	-1
  8798  1B7D  1D03               	skipz
  8799  1B7E  2B7B               	goto	u7635
  8800  1B7F  3523               	lslf	??_ReadFlash_2Byte^(0+512),w
  8801  1B80  0722               	addwf	ReadFlash_2Byte@column^(0+512),w
  8802  1B81  0023               	movlb	3	; select bank3
  8803  1B82  0091               	movwf	17	;volatile
  8804                           
  8805                           ;FLASH.c: 48: PMCON1 |= 0b00000001;
  8806  1B83  1415               	bsf	21,0	;volatile
  8807  1B84                     l948:	
  8808                           ;FLASH.c: 49: while(PMCON1 & 0b00000001);
  8809                           
  8810  1B84  1815               	btfsc	21,0	;volatile
  8811  1B85  2B84               	goto	l948
  8812                           
  8813                           ;FLASH.c: 50: __nop();
  8814  1B86  0000               	nop
  8815                           
  8816                           ;FLASH.c: 51: __nop();
  8817  1B87  0000               	nop
  8818                           
  8819                           ;FLASH.c: 52: return (PMDATL | (PMDATH << 8));
  8820  1B88  0023               	movlb	3	; select bank3
  8821  1B89  0814               	movf	20,w	;volatile
  8822  1B8A  0024               	movlb	4	; select bank4
  8823  1B8B  01A1               	clrf	(?_ReadFlash_2Byte+1)^(0+512)
  8824  1B8C  07A1               	addwf	(?_ReadFlash_2Byte+1)^(0+512),f
  8825  1B8D  0023               	movlb	3	; select bank3
  8826  1B8E  0813               	movf	19,w	;volatile
  8827  1B8F  0024               	movlb	4	; select bank4
  8828  1B90  01A0               	clrf	?_ReadFlash_2Byte^(0+512)
  8829  1B91  07A0               	addwf	?_ReadFlash_2Byte^(0+512),f
  8830  1B92  0008               	return
  8831  1B93                     __end_of_ReadFlash_2Byte:	
  8832                           
  8833                           	psect	text25
  8834  1440                     __ptext25:	
  8835 ;; *************** function _InitUART *****************
  8836 ;; Defined at:
  8837 ;;		line 75 in file "UART.c"
  8838 ;; Parameters:    Size  Location     Type
  8839 ;;  Baud            4   14[BANK4 ] unsigned long 
  8840 ;;  parity          1   18[BANK4 ] unsigned char 
  8841 ;; Auto vars:     Size  Location     Type
  8842 ;;  temp            4   31[BANK4 ] unsigned long 
  8843 ;;  spbrg           2   27[BANK4 ] unsigned int 
  8844 ;;  config          1   30[BANK4 ] unsigned char 
  8845 ;;  baudconfig      1   29[BANK4 ] unsigned char 
  8846 ;; Return value:  Size  Location     Type
  8847 ;;		None               void
  8848 ;; Registers used:
  8849 ;;		wreg, status,2, status,0, pclath, cstack
  8850 ;; Tracked objects:
  8851 ;;		On entry : 0/0
  8852 ;;		On exit  : 0/0
  8853 ;;		Unchanged: 0/0
  8854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8855 ;;      Params:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  8856 ;;      Locals:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  8857 ;;      Temps:          0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  8858 ;;      Totals:         0       0       0       0       0      21       0       0       0       0       0       0       
      +0       0
  8859 ;;Total ram usage:       21 bytes
  8860 ;; Hardware stack levels used:    1
  8861 ;; Hardware stack levels required when called:    8
  8862 ;; This function calls:
  8863 ;;		_CloseUSART
  8864 ;;		_OpenUSART
  8865 ;;		_ReadUSART
  8866 ;;		___lldiv
  8867 ;;		_baudUSART
  8868 ;; This function is called by:
  8869 ;;		_Init_System
  8870 ;; This function uses a non-reentrant model
  8871 ;;
  8872                           
  8873                           
  8874                           ;psect for function _InitUART
  8875  1440                     _InitUART:	
  8876                           
  8877                           ;UART.c: 77: unsigned long temp;
  8878                           ;UART.c: 78: unsigned char config;
  8879                           ;UART.c: 79: unsigned int spbrg;
  8880                           ;UART.c: 80: unsigned char baudconfig;
  8881                           ;UART.c: 90: LATC |= 0b00000100;
  8882                           
  8883                           ;incstack = 0
  8884                           ; Regs used in _InitUART: [wreg+status,2+status,0+pclath+cstack]
  8885  1440  0022               	movlb	2	; select bank2
  8886  1441  150E               	bsf	14,2	;volatile
  8887                           
  8888                           ;UART.c: 91: PPSLOCK =0;
  8889  1442  003C               	movlb	28	; select bank28
  8890  1443  018F               	clrf	15	;volatile
  8891                           
  8892                           ;UART.c: 92: RC2PPS = 0b00000000;
  8893  1444  003D               	movlb	29	; select bank29
  8894  1445  01A2               	clrf	34	;volatile
  8895                           
  8896                           ;UART.c: 93: PPSLOCK =1;
  8897  1446  3001               	movlw	1
  8898  1447  003C               	movlb	28	; select bank28
  8899  1448  008F               	movwf	15	;volatile
  8900                           
  8901                           ;UART.c: 95: CloseUSART();
  8902  1449  3199  216C  3194   	fcall	_CloseUSART
  8903                           
  8904                           ;UART.c: 96: config =0;
  8905  144C  0024               	movlb	4	; select bank4
  8906  144D  01BE               	clrf	InitUART@config^(0+512)
  8907                           
  8908                           ;UART.c: 97: baudconfig =0;
  8909  144E  01BD               	clrf	InitUART@baudconfig^(0+512)
  8910                           
  8911                           ;UART.c: 102: config |= 0b00001000;
  8912  144F  15BE               	bsf	InitUART@config^(0+512),3
  8913                           
  8914                           ;UART.c: 103: config |= 0b00010000;
  8915  1450  163E               	bsf	InitUART@config^(0+512),4
  8916                           
  8917                           ;UART.c: 104: PARITY = parity;
  8918  1451  0832               	movf	InitUART@parity^(0+512),w
  8919  1452  00B3               	movwf	??_InitUART^(0+512)
  8920  1453  0833               	movf	??_InitUART^(0+512),w
  8921  1454  00E0               	movwf	_PARITY^(0+512)
  8922                           
  8923                           ;UART.c: 105: BAUD = Baud;
  8924  1455  0831               	movf	(InitUART@Baud+3)^(0+512),w
  8925  1456  00E4               	movwf	(_BAUD+3)^(0+512)
  8926  1457  0830               	movf	(InitUART@Baud+2)^(0+512),w
  8927  1458  00E3               	movwf	(_BAUD+2)^(0+512)
  8928  1459  082F               	movf	(InitUART@Baud+1)^(0+512),w
  8929  145A  00E2               	movwf	(_BAUD+1)^(0+512)
  8930  145B  082E               	movf	InitUART@Baud^(0+512),w
  8931  145C  00E1               	movwf	_BAUD^(0+512)
  8932                           
  8933                           ;UART.c: 106: if(parity)
  8934  145D  0832               	movf	InitUART@parity^(0+512),w
  8935  145E  1903               	btfsc	3,2
  8936  145F  2C62               	goto	l6219
  8937                           
  8938                           ;UART.c: 107: {
  8939                           ;UART.c: 108: config |= 0b00000010;
  8940  1460  14BE               	bsf	InitUART@config^(0+512),1
  8941                           
  8942                           ;UART.c: 109: }
  8943  1461  2C66               	goto	l6221
  8944  1462                     l6219:	
  8945                           
  8946                           ;UART.c: 110: else
  8947                           ;UART.c: 111: {
  8948                           ;UART.c: 112: config &= ~0b00000010;
  8949  1462  30FD               	movlw	253
  8950  1463  00B3               	movwf	??_InitUART^(0+512)
  8951  1464  0833               	movf	??_InitUART^(0+512),w
  8952  1465  05BE               	andwf	InitUART@config^(0+512),f
  8953  1466                     l6221:	
  8954                           
  8955                           ;UART.c: 113: }
  8956                           ;UART.c: 114: baudconfig |= 0b00001000;
  8957  1466  15BD               	bsf	InitUART@baudconfig^(0+512),3
  8958                           
  8959                           ;UART.c: 117: temp = (32000000L / Baud) - 1;
  8960  1467  0831               	movf	(InitUART@Baud+3)^(0+512),w
  8961  1468  00A3               	movwf	(___lldiv@divisor+3)^(0+512)
  8962  1469  0830               	movf	(InitUART@Baud+2)^(0+512),w
  8963  146A  00A2               	movwf	(___lldiv@divisor+2)^(0+512)
  8964  146B  082F               	movf	(InitUART@Baud+1)^(0+512),w
  8965  146C  00A1               	movwf	(___lldiv@divisor+1)^(0+512)
  8966  146D  082E               	movf	InitUART@Baud^(0+512),w
  8967  146E  00A0               	movwf	___lldiv@divisor^(0+512)
  8968  146F  3001               	movlw	1
  8969  1470  00A7               	movwf	(___lldiv@dividend+3)^(0+512)
  8970  1471  30E8               	movlw	232
  8971  1472  00A6               	movwf	(___lldiv@dividend+2)^(0+512)
  8972  1473  3048               	movlw	72
  8973  1474  00A5               	movwf	(___lldiv@dividend+1)^(0+512)
  8974  1475  3000               	movlw	0
  8975  1476  00A4               	movwf	___lldiv@dividend^(0+512)
  8976  1477  319E  26FA  3194   	fcall	___lldiv
  8977  147A  30FF               	movlw	255
  8978  147B  0024               	movlb	4	; select bank4
  8979  147C  0720               	addwf	?___lldiv^(0+512),w
  8980  147D  00BF               	movwf	InitUART@temp^(0+512)
  8981  147E  30FF               	movlw	255
  8982  147F  3D21               	addwfc	(?___lldiv+1)^(0+512),w
  8983  1480  00C0               	movwf	(InitUART@temp+1)^(0+512)
  8984  1481  30FF               	movlw	255
  8985  1482  3D22               	addwfc	(?___lldiv+2)^(0+512),w
  8986  1483  00C1               	movwf	(InitUART@temp+2)^(0+512)
  8987  1484  30FF               	movlw	255
  8988  1485  3D23               	addwfc	(?___lldiv+3)^(0+512),w
  8989  1486  00C2               	movwf	(InitUART@temp+3)^(0+512)
  8990                           
  8991                           ;UART.c: 118: temp = (temp >> 2) - 1;
  8992  1487  30FF               	movlw	255
  8993  1488  00B3               	movwf	??_InitUART^(0+512)
  8994  1489  30FF               	movlw	255
  8995  148A  00B4               	movwf	(??_InitUART^(0+512)+1)
  8996  148B  30FF               	movlw	255
  8997  148C  00B5               	movwf	(??_InitUART^(0+512)+2)
  8998  148D  30FF               	movlw	255
  8999  148E  00B6               	movwf	(??_InitUART^(0+512)+3)
  9000  148F  083F               	movf	InitUART@temp^(0+512),w
  9001  1490  00B7               	movwf	(??_InitUART+4)^(0+512)
  9002  1491  0840               	movf	(InitUART@temp+1)^(0+512),w
  9003  1492  00B8               	movwf	((??_InitUART+4)^(0+512)+1)
  9004  1493  0841               	movf	(InitUART@temp+2)^(0+512),w
  9005  1494  00B9               	movwf	((??_InitUART+4)^(0+512)+2)
  9006  1495  0842               	movf	(InitUART@temp+3)^(0+512),w
  9007  1496  00BA               	movwf	((??_InitUART+4)^(0+512)+3)
  9008  1497  3002               	movlw	2
  9009  1498                     u8075:	
  9010  1498  36BA               	lsrf	((??_InitUART+4)^(0+512)+3),f
  9011  1499  0CB9               	rrf	((??_InitUART+4)^(0+512)+2),f
  9012  149A  0CB8               	rrf	((??_InitUART+4)^(0+512)+1),f
  9013  149B  0CB7               	rrf	(??_InitUART+4)^(0+512),f
  9014  149C  0B89               	decfsz	9,f
  9015  149D  2C98               	goto	u8075
  9016  149E  0837               	movf	(??_InitUART+4)^(0+512),w
  9017  149F  07B3               	addwf	??_InitUART^(0+512),f
  9018  14A0  0838               	movf	(??_InitUART+5)^(0+512),w
  9019  14A1  3DB4               	addwfc	(??_InitUART^(0+512)+1),f
  9020  14A2  0839               	movf	(??_InitUART+6)^(0+512),w
  9021  14A3  3DB5               	addwfc	(??_InitUART^(0+512)+2),f
  9022  14A4  083A               	movf	(??_InitUART+7)^(0+512),w
  9023  14A5  3DB6               	addwfc	(??_InitUART^(0+512)+3),f
  9024  14A6  0836               	movf	(??_InitUART+3)^(0+512),w
  9025  14A7  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9026  14A8  0835               	movf	(??_InitUART+2)^(0+512),w
  9027  14A9  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9028  14AA  0834               	movf	(??_InitUART+1)^(0+512),w
  9029  14AB  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9030  14AC  0833               	movf	??_InitUART^(0+512),w
  9031  14AD  00BF               	movwf	InitUART@temp^(0+512)
  9032                           
  9033                           ;UART.c: 119: spbrg = (unsigned int)temp;
  9034  14AE  0840               	movf	(InitUART@temp+1)^(0+512),w
  9035  14AF  01BC               	clrf	(InitUART@spbrg+1)^(0+512)
  9036  14B0  07BC               	addwf	(InitUART@spbrg+1)^(0+512),f
  9037  14B1  083F               	movf	InitUART@temp^(0+512),w
  9038  14B2  01BB               	clrf	InitUART@spbrg^(0+512)
  9039  14B3  07BB               	addwf	InitUART@spbrg^(0+512),f
  9040                           
  9041                           ;UART.c: 121: RCSTAbits.CREN = 0;
  9042  14B4  0023               	movlb	3	; select bank3
  9043  14B5  121D               	bcf	29,4	;volatile
  9044                           
  9045                           ;UART.c: 122: OpenUSART(config, spbrg);
  9046  14B6  0024               	movlb	4	; select bank4
  9047  14B7  083C               	movf	(InitUART@spbrg+1)^(0+512),w
  9048  14B8  01A1               	clrf	(OpenUSART@spbrg+1)^(0+512)
  9049  14B9  07A1               	addwf	(OpenUSART@spbrg+1)^(0+512),f
  9050  14BA  083B               	movf	InitUART@spbrg^(0+512),w
  9051  14BB  01A0               	clrf	OpenUSART@spbrg^(0+512)
  9052  14BC  07A0               	addwf	OpenUSART@spbrg^(0+512),f
  9053  14BD  083E               	movf	InitUART@config^(0+512),w
  9054  14BE  319C  24AB  3194   	fcall	_OpenUSART
  9055                           
  9056                           ;UART.c: 123: baudUSART(baudconfig);
  9057  14C1  0024               	movlb	4	; select bank4
  9058  14C2  083D               	movf	InitUART@baudconfig^(0+512),w
  9059  14C3  3198  20E8  3194   	fcall	_baudUSART
  9060                           
  9061                           ;UART.c: 124: temp = ReadUSART();
  9062  14C6  3199  2105  3194   	fcall	_ReadUSART
  9063  14C9  0024               	movlb	4	; select bank4
  9064  14CA  00B3               	movwf	??_InitUART^(0+512)
  9065  14CB  01B4               	clrf	(??_InitUART^(0+512)+1)
  9066  14CC  01B5               	clrf	(??_InitUART^(0+512)+2)
  9067  14CD  01B6               	clrf	(??_InitUART^(0+512)+3)
  9068  14CE  0836               	movf	(??_InitUART+3)^(0+512),w
  9069  14CF  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9070  14D0  0835               	movf	(??_InitUART+2)^(0+512),w
  9071  14D1  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9072  14D2  0834               	movf	(??_InitUART+1)^(0+512),w
  9073  14D3  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9074  14D4  0833               	movf	??_InitUART^(0+512),w
  9075  14D5  00BF               	movwf	InitUART@temp^(0+512)
  9076                           
  9077                           ;UART.c: 125: temp = ReadUSART();
  9078  14D6  3199  2105  3194   	fcall	_ReadUSART
  9079  14D9  0024               	movlb	4	; select bank4
  9080  14DA  00B3               	movwf	??_InitUART^(0+512)
  9081  14DB  01B4               	clrf	(??_InitUART^(0+512)+1)
  9082  14DC  01B5               	clrf	(??_InitUART^(0+512)+2)
  9083  14DD  01B6               	clrf	(??_InitUART^(0+512)+3)
  9084  14DE  0836               	movf	(??_InitUART+3)^(0+512),w
  9085  14DF  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9086  14E0  0835               	movf	(??_InitUART+2)^(0+512),w
  9087  14E1  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9088  14E2  0834               	movf	(??_InitUART+1)^(0+512),w
  9089  14E3  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9090  14E4  0833               	movf	??_InitUART^(0+512),w
  9091  14E5  00BF               	movwf	InitUART@temp^(0+512)
  9092                           
  9093                           ;UART.c: 126: temp = ReadUSART();
  9094  14E6  3199  2105  3194   	fcall	_ReadUSART
  9095  14E9  0024               	movlb	4	; select bank4
  9096  14EA  00B3               	movwf	??_InitUART^(0+512)
  9097  14EB  01B4               	clrf	(??_InitUART^(0+512)+1)
  9098  14EC  01B5               	clrf	(??_InitUART^(0+512)+2)
  9099  14ED  01B6               	clrf	(??_InitUART^(0+512)+3)
  9100  14EE  0836               	movf	(??_InitUART+3)^(0+512),w
  9101  14EF  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9102  14F0  0835               	movf	(??_InitUART+2)^(0+512),w
  9103  14F1  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9104  14F2  0834               	movf	(??_InitUART+1)^(0+512),w
  9105  14F3  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9106  14F4  0833               	movf	??_InitUART^(0+512),w
  9107  14F5  00BF               	movwf	InitUART@temp^(0+512)
  9108                           
  9109                           ;UART.c: 127: temp = ReadUSART();
  9110  14F6  3199  2105  3194   	fcall	_ReadUSART
  9111  14F9  0024               	movlb	4	; select bank4
  9112  14FA  00B3               	movwf	??_InitUART^(0+512)
  9113  14FB  01B4               	clrf	(??_InitUART^(0+512)+1)
  9114  14FC  01B5               	clrf	(??_InitUART^(0+512)+2)
  9115  14FD  01B6               	clrf	(??_InitUART^(0+512)+3)
  9116  14FE  0836               	movf	(??_InitUART+3)^(0+512),w
  9117  14FF  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9118  1500  0835               	movf	(??_InitUART+2)^(0+512),w
  9119  1501  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9120  1502  0834               	movf	(??_InitUART+1)^(0+512),w
  9121  1503  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9122  1504  0833               	movf	??_InitUART^(0+512),w
  9123  1505  00BF               	movwf	InitUART@temp^(0+512)
  9124                           
  9125                           ;UART.c: 128: temp = ReadUSART();
  9126  1506  3199  2105         	fcall	_ReadUSART
  9127  1508  0024               	movlb	4	; select bank4
  9128  1509  00B3               	movwf	??_InitUART^(0+512)
  9129  150A  01B4               	clrf	(??_InitUART^(0+512)+1)
  9130  150B  01B5               	clrf	(??_InitUART^(0+512)+2)
  9131  150C  01B6               	clrf	(??_InitUART^(0+512)+3)
  9132  150D  0836               	movf	(??_InitUART+3)^(0+512),w
  9133  150E  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9134  150F  0835               	movf	(??_InitUART+2)^(0+512),w
  9135  1510  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9136  1511  0834               	movf	(??_InitUART+1)^(0+512),w
  9137  1512  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9138  1513  0833               	movf	??_InitUART^(0+512),w
  9139  1514  00BF               	movwf	InitUART@temp^(0+512)
  9140                           
  9141                           ;UART.c: 130: PPSLOCK =0;
  9142  1515  003C               	movlb	28	; select bank28
  9143  1516  018F               	clrf	15	;volatile
  9144                           
  9145                           ;UART.c: 131: RC2PPS = 0b00010100;
  9146  1517  3014               	movlw	20
  9147  1518  003D               	movlb	29	; select bank29
  9148  1519  00A2               	movwf	34	;volatile
  9149                           
  9150                           ;UART.c: 132: CKPPS = 0b00010010;
  9151  151A  3012               	movlw	18
  9152  151B  003C               	movlb	28	; select bank28
  9153  151C  00A5               	movwf	37	;volatile
  9154                           
  9155                           ;UART.c: 134: RXPPS = 0b00010101;
  9156  151D  3015               	movlw	21
  9157  151E  00A4               	movwf	36	;volatile
  9158                           
  9159                           ;UART.c: 136: PPSLOCK =1;
  9160  151F  3001               	movlw	1
  9161  1520  008F               	movwf	15	;volatile
  9162                           
  9163                           ;UART.c: 138: PIR1bits.RCIF = 0;
  9164  1521  0020               	movlb	0	; select bank0
  9165  1522  1291               	bcf	17,5	;volatile
  9166                           
  9167                           ;UART.c: 139: INTCONbits.PEIE = 1;
  9168  1523  170B               	bsf	11,6	;volatile
  9169  1524  0008               	return
  9170  1525                     __end_of_InitUART:	
  9171                           
  9172                           	psect	text26
  9173  18E8                     __ptext26:	
  9174 ;; *************** function _baudUSART *****************
  9175 ;; Defined at:
  9176 ;;		line 147 in file "UART.c"
  9177 ;; Parameters:    Size  Location     Type
  9178 ;;  baudconfig      1    wreg     unsigned char 
  9179 ;; Auto vars:     Size  Location     Type
  9180 ;;  baudconfig      1    0[BANK4 ] unsigned char 
  9181 ;; Return value:  Size  Location     Type
  9182 ;;		None               void
  9183 ;; Registers used:
  9184 ;;		wreg, status,2
  9185 ;; Tracked objects:
  9186 ;;		On entry : 0/0
  9187 ;;		On exit  : 0/0
  9188 ;;		Unchanged: 0/0
  9189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9191 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9193 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9194 ;;Total ram usage:        1 bytes
  9195 ;; Hardware stack levels used:    1
  9196 ;; Hardware stack levels required when called:    7
  9197 ;; This function calls:
  9198 ;;		Nothing
  9199 ;; This function is called by:
  9200 ;;		_InitUART
  9201 ;; This function uses a non-reentrant model
  9202 ;;
  9203                           
  9204                           
  9205                           ;psect for function _baudUSART
  9206  18E8                     _baudUSART:	
  9207                           
  9208                           ;incstack = 0
  9209                           ; Regs used in _baudUSART: [wreg+status,2]
  9210                           ;baudUSART@baudconfig stored from wreg
  9211  18E8  0024               	movlb	4	; select bank4
  9212  18E9  00A0               	movwf	baudUSART@baudconfig^(0+512)
  9213                           
  9214                           ;UART.c: 149: BAUD1CON =0;
  9215  18EA  0023               	movlb	3	; select bank3
  9216  18EB  019F               	clrf	31	;volatile
  9217                           
  9218                           ;UART.c: 150: BAUD1CON = baudconfig;
  9219  18EC  0024               	movlb	4	; select bank4
  9220  18ED  0820               	movf	baudUSART@baudconfig^(0+512),w
  9221  18EE  0023               	movlb	3	; select bank3
  9222  18EF  009F               	movwf	31	;volatile
  9223  18F0  0008               	return
  9224  18F1                     __end_of_baudUSART:	
  9225                           
  9226                           	psect	text27
  9227  1EFA                     __ptext27:	
  9228 ;; *************** function ___lldiv *****************
  9229 ;; Defined at:
  9230 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
  9231 ;; Parameters:    Size  Location     Type
  9232 ;;  divisor         4    0[BANK4 ] unsigned long 
  9233 ;;  dividend        4    4[BANK4 ] unsigned long 
  9234 ;; Auto vars:     Size  Location     Type
  9235 ;;  quotient        4    9[BANK4 ] unsigned long 
  9236 ;;  counter         1   13[BANK4 ] unsigned char 
  9237 ;; Return value:  Size  Location     Type
  9238 ;;                  4    0[BANK4 ] unsigned long 
  9239 ;; Registers used:
  9240 ;;		wreg, status,2, status,0
  9241 ;; Tracked objects:
  9242 ;;		On entry : 0/0
  9243 ;;		On exit  : 0/0
  9244 ;;		Unchanged: 0/0
  9245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9246 ;;      Params:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  9247 ;;      Locals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  9248 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9249 ;;      Totals:         0       0       0       0       0      14       0       0       0       0       0       0       
      +0       0
  9250 ;;Total ram usage:       14 bytes
  9251 ;; Hardware stack levels used:    1
  9252 ;; Hardware stack levels required when called:    7
  9253 ;; This function calls:
  9254 ;;		Nothing
  9255 ;; This function is called by:
  9256 ;;		_InitUART
  9257 ;;		_sprintf
  9258 ;; This function uses a non-reentrant model
  9259 ;;
  9260                           
  9261                           
  9262                           ;psect for function ___lldiv
  9263  1EFA                     ___lldiv:	
  9264                           
  9265                           ;incstack = 0
  9266                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  9267  1EFA  3000               	movlw	0
  9268  1EFB  0024               	movlb	4	; select bank4
  9269  1EFC  00AC               	movwf	(___lldiv@quotient+3)^(0+512)
  9270  1EFD  3000               	movlw	0
  9271  1EFE  00AB               	movwf	(___lldiv@quotient+2)^(0+512)
  9272  1EFF  3000               	movlw	0
  9273  1F00  00AA               	movwf	(___lldiv@quotient+1)^(0+512)
  9274  1F01  3000               	movlw	0
  9275  1F02  00A9               	movwf	___lldiv@quotient^(0+512)
  9276  1F03  0823               	movf	(___lldiv@divisor+3)^(0+512),w
  9277  1F04  0422               	iorwf	(___lldiv@divisor+2)^(0+512),w
  9278  1F05  0421               	iorwf	(___lldiv@divisor+1)^(0+512),w
  9279  1F06  0420               	iorwf	___lldiv@divisor^(0+512),w
  9280  1F07  1903               	skipnz
  9281  1F08  2F44               	goto	l6173
  9282  1F09  01AD               	clrf	___lldiv@counter^(0+512)
  9283  1F0A  0AAD               	incf	___lldiv@counter^(0+512),f
  9284  1F0B                     l6159:	
  9285  1F0B  1BA3               	btfsc	(___lldiv@divisor+3)^(0+512),7
  9286  1F0C  2F19               	goto	l6161
  9287  1F0D  3001               	movlw	1
  9288  1F0E                     u7955:	
  9289  1F0E  35A0               	lslf	___lldiv@divisor^(0+512),f
  9290  1F0F  0DA1               	rlf	(___lldiv@divisor+1)^(0+512),f
  9291  1F10  0DA2               	rlf	(___lldiv@divisor+2)^(0+512),f
  9292  1F11  0DA3               	rlf	(___lldiv@divisor+3)^(0+512),f
  9293  1F12  0B89               	decfsz	9,f
  9294  1F13  2F0E               	goto	u7955
  9295  1F14  3001               	movlw	1
  9296  1F15  00A8               	movwf	??___lldiv^(0+512)
  9297  1F16  0828               	movf	??___lldiv^(0+512),w
  9298  1F17  07AD               	addwf	___lldiv@counter^(0+512),f
  9299  1F18  2F0B               	goto	l6159
  9300  1F19                     l6161:	
  9301  1F19  3001               	movlw	1
  9302  1F1A                     u7975:	
  9303  1F1A  35A9               	lslf	___lldiv@quotient^(0+512),f
  9304  1F1B  0DAA               	rlf	(___lldiv@quotient+1)^(0+512),f
  9305  1F1C  0DAB               	rlf	(___lldiv@quotient+2)^(0+512),f
  9306  1F1D  0DAC               	rlf	(___lldiv@quotient+3)^(0+512),f
  9307  1F1E  0B89               	decfsz	9,f
  9308  1F1F  2F1A               	goto	u7975
  9309  1F20  0823               	movf	(___lldiv@divisor+3)^(0+512),w
  9310  1F21  0227               	subwf	(___lldiv@dividend+3)^(0+512),w
  9311  1F22  1D03               	skipz
  9312  1F23  2F2E               	goto	u7985
  9313  1F24  0822               	movf	(___lldiv@divisor+2)^(0+512),w
  9314  1F25  0226               	subwf	(___lldiv@dividend+2)^(0+512),w
  9315  1F26  1D03               	skipz
  9316  1F27  2F2E               	goto	u7985
  9317  1F28  0821               	movf	(___lldiv@divisor+1)^(0+512),w
  9318  1F29  0225               	subwf	(___lldiv@dividend+1)^(0+512),w
  9319  1F2A  1D03               	skipz
  9320  1F2B  2F2E               	goto	u7985
  9321  1F2C  0820               	movf	___lldiv@divisor^(0+512),w
  9322  1F2D  0224               	subwf	___lldiv@dividend^(0+512),w
  9323  1F2E                     u7985:	
  9324  1F2E  1C03               	skipc
  9325  1F2F  2F39               	goto	l6169
  9326  1F30  0820               	movf	___lldiv@divisor^(0+512),w
  9327  1F31  02A4               	subwf	___lldiv@dividend^(0+512),f
  9328  1F32  0821               	movf	(___lldiv@divisor+1)^(0+512),w
  9329  1F33  3BA5               	subwfb	(___lldiv@dividend+1)^(0+512),f
  9330  1F34  0822               	movf	(___lldiv@divisor+2)^(0+512),w
  9331  1F35  3BA6               	subwfb	(___lldiv@dividend+2)^(0+512),f
  9332  1F36  0823               	movf	(___lldiv@divisor+3)^(0+512),w
  9333  1F37  3BA7               	subwfb	(___lldiv@dividend+3)^(0+512),f
  9334  1F38  1429               	bsf	___lldiv@quotient^(0+512),0
  9335  1F39                     l6169:	
  9336  1F39  3001               	movlw	1
  9337  1F3A                     u7995:	
  9338  1F3A  36A3               	lsrf	(___lldiv@divisor+3)^(0+512),f
  9339  1F3B  0CA2               	rrf	(___lldiv@divisor+2)^(0+512),f
  9340  1F3C  0CA1               	rrf	(___lldiv@divisor+1)^(0+512),f
  9341  1F3D  0CA0               	rrf	___lldiv@divisor^(0+512),f
  9342  1F3E  0B89               	decfsz	9,f
  9343  1F3F  2F3A               	goto	u7995
  9344  1F40  3001               	movlw	1
  9345  1F41  02AD               	subwf	___lldiv@counter^(0+512),f
  9346  1F42  1D03               	btfss	3,2
  9347  1F43  2F19               	goto	l6161
  9348  1F44                     l6173:	
  9349  1F44  082C               	movf	(___lldiv@quotient+3)^(0+512),w
  9350  1F45  00A3               	movwf	(?___lldiv+3)^(0+512)
  9351  1F46  082B               	movf	(___lldiv@quotient+2)^(0+512),w
  9352  1F47  00A2               	movwf	(?___lldiv+2)^(0+512)
  9353  1F48  082A               	movf	(___lldiv@quotient+1)^(0+512),w
  9354  1F49  00A1               	movwf	(?___lldiv+1)^(0+512)
  9355  1F4A  0829               	movf	___lldiv@quotient^(0+512),w
  9356  1F4B  00A0               	movwf	?___lldiv^(0+512)
  9357  1F4C  0008               	return
  9358  1F4D                     __end_of___lldiv:	
  9359                           
  9360                           	psect	text28
  9361  1905                     __ptext28:	
  9362 ;; *************** function _ReadUSART *****************
  9363 ;; Defined at:
  9364 ;;		line 302 in file "UART.c"
  9365 ;; Parameters:    Size  Location     Type
  9366 ;;		None
  9367 ;; Auto vars:     Size  Location     Type
  9368 ;;  data            1    1[BANK4 ] unsigned char 
  9369 ;; Return value:  Size  Location     Type
  9370 ;;                  1    wreg      unsigned char 
  9371 ;; Registers used:
  9372 ;;		wreg
  9373 ;; Tracked objects:
  9374 ;;		On entry : 0/0
  9375 ;;		On exit  : 0/0
  9376 ;;		Unchanged: 0/0
  9377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9379 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9380 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9381 ;;      Totals:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  9382 ;;Total ram usage:        2 bytes
  9383 ;; Hardware stack levels used:    1
  9384 ;; Hardware stack levels required when called:    7
  9385 ;; This function calls:
  9386 ;;		Nothing
  9387 ;; This function is called by:
  9388 ;;		_InitUART
  9389 ;; This function uses a non-reentrant model
  9390 ;;
  9391                           
  9392                           
  9393                           ;psect for function _ReadUSART
  9394  1905                     _ReadUSART:	
  9395                           
  9396                           ;UART.c: 304: char data;
  9397                           ;UART.c: 306: if(RCSTAbits.OERR)
  9398                           
  9399                           ;incstack = 0
  9400                           ; Regs used in _ReadUSART: [wreg]
  9401  1905  0023               	movlb	3	; select bank3
  9402  1906  189D               	btfsc	29,1	;volatile
  9403                           
  9404                           ;UART.c: 307: {
  9405                           ;UART.c: 308: RCSTAbits.CREN = 0;
  9406  1907  121D               	bcf	29,4	;volatile
  9407                           
  9408                           ;UART.c: 309: }
  9409                           ;UART.c: 311: data = RCREG;
  9410  1908  0819               	movf	25,w	;volatile
  9411  1909  0024               	movlb	4	; select bank4
  9412  190A  00A0               	movwf	??_ReadUSART^(0+512)
  9413  190B  0820               	movf	??_ReadUSART^(0+512),w
  9414  190C  00A1               	movwf	ReadUSART@data^(0+512)
  9415                           
  9416                           ;UART.c: 313: return (data);
  9417  190D  0821               	movf	ReadUSART@data^(0+512),w
  9418  190E  0008               	return
  9419  190F                     __end_of_ReadUSART:	
  9420                           
  9421                           	psect	text29
  9422  1CAB                     __ptext29:	
  9423 ;; *************** function _OpenUSART *****************
  9424 ;; Defined at:
  9425 ;;		line 158 in file "UART.c"
  9426 ;; Parameters:    Size  Location     Type
  9427 ;;  config          1    wreg     unsigned char 
  9428 ;;  spbrg           2    0[BANK4 ] unsigned int 
  9429 ;; Auto vars:     Size  Location     Type
  9430 ;;  config          1    2[BANK4 ] unsigned char 
  9431 ;; Return value:  Size  Location     Type
  9432 ;;		None               void
  9433 ;; Registers used:
  9434 ;;		wreg, status,2
  9435 ;; Tracked objects:
  9436 ;;		On entry : 0/0
  9437 ;;		On exit  : 0/0
  9438 ;;		Unchanged: 0/0
  9439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9440 ;;      Params:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  9441 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9443 ;;      Totals:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  9444 ;;Total ram usage:        3 bytes
  9445 ;; Hardware stack levels used:    1
  9446 ;; Hardware stack levels required when called:    7
  9447 ;; This function calls:
  9448 ;;		Nothing
  9449 ;; This function is called by:
  9450 ;;		_InitUART
  9451 ;; This function uses a non-reentrant model
  9452 ;;
  9453                           
  9454                           
  9455                           ;psect for function _OpenUSART
  9456  1CAB                     _OpenUSART:	
  9457                           
  9458                           ;incstack = 0
  9459                           ; Regs used in _OpenUSART: [wreg+status,2]
  9460                           ;OpenUSART@config stored from wreg
  9461  1CAB  0024               	movlb	4	; select bank4
  9462  1CAC  00A2               	movwf	OpenUSART@config^(0+512)
  9463                           
  9464                           ;UART.c: 160: TX1STA = 0;
  9465  1CAD  0023               	movlb	3	; select bank3
  9466  1CAE  019E               	clrf	30	;volatile
  9467                           
  9468                           ;UART.c: 161: RC1STA = 0;
  9469  1CAF  019D               	clrf	29	;volatile
  9470                           
  9471                           ;UART.c: 163: if(config&0x01)
  9472  1CB0  0024               	movlb	4	; select bank4
  9473  1CB1  1C22               	btfss	OpenUSART@config^(0+512),0
  9474  1CB2  2CB5               	goto	l6077
  9475                           
  9476                           ;UART.c: 164: {
  9477                           ;UART.c: 165: TX1STAbits.SYNC = 1;
  9478  1CB3  0023               	movlb	3	; select bank3
  9479  1CB4  161E               	bsf	30,4	;volatile
  9480  1CB5                     l6077:	
  9481                           
  9482                           ;UART.c: 166: }
  9483                           ;UART.c: 168: if(config&0x02)
  9484  1CB5  0024               	movlb	4	; select bank4
  9485  1CB6  1CA2               	btfss	OpenUSART@config^(0+512),1
  9486  1CB7  2CBB               	goto	l6081
  9487                           
  9488                           ;UART.c: 169: {
  9489                           ;UART.c: 170: TX1STAbits.TX9 = 1;
  9490  1CB8  0023               	movlb	3	; select bank3
  9491  1CB9  171E               	bsf	30,6	;volatile
  9492                           
  9493                           ;UART.c: 171: RC1STAbits.RX9 = 1;
  9494  1CBA  171D               	bsf	29,6	;volatile
  9495  1CBB                     l6081:	
  9496                           
  9497                           ;UART.c: 172: }
  9498                           ;UART.c: 174: if(config&0x04)
  9499  1CBB  0024               	movlb	4	; select bank4
  9500  1CBC  1D22               	btfss	OpenUSART@config^(0+512),2
  9501  1CBD  2CC0               	goto	l6085
  9502                           
  9503                           ;UART.c: 175: {
  9504                           ;UART.c: 176: TX1STAbits.CSRC = 1;
  9505  1CBE  0023               	movlb	3	; select bank3
  9506  1CBF  179E               	bsf	30,7	;volatile
  9507  1CC0                     l6085:	
  9508                           
  9509                           ;UART.c: 177: }
  9510                           ;UART.c: 179: if(config&0x08)
  9511  1CC0  0024               	movlb	4	; select bank4
  9512  1CC1  1DA2               	btfss	OpenUSART@config^(0+512),3
  9513  1CC2  2CC6               	goto	l417
  9514                           
  9515                           ;UART.c: 180: {
  9516                           ;UART.c: 181: RC1STAbits.CREN = 1;
  9517  1CC3  0023               	movlb	3	; select bank3
  9518  1CC4  161D               	bsf	29,4	;volatile
  9519                           
  9520                           ;UART.c: 182: }
  9521  1CC5  2CC8               	goto	l6089
  9522  1CC6                     l417:	
  9523                           
  9524                           ;UART.c: 183: else
  9525                           ;UART.c: 184: {
  9526                           ;UART.c: 185: RC1STAbits.SREN = 1;
  9527  1CC6  0023               	movlb	3	; select bank3
  9528  1CC7  169D               	bsf	29,5	;volatile
  9529  1CC8                     l6089:	
  9530                           
  9531                           ;UART.c: 186: }
  9532                           ;UART.c: 188: if(config&0x10)
  9533  1CC8  0024               	movlb	4	; select bank4
  9534  1CC9  1E22               	btfss	OpenUSART@config^(0+512),4
  9535  1CCA  2CCD               	goto	l6095
  9536                           
  9537                           ;UART.c: 189: {
  9538                           ;UART.c: 190: TX1STAbits.BRGH = 1;
  9539  1CCB  0023               	movlb	3	; select bank3
  9540  1CCC  151E               	bsf	30,2	;volatile
  9541  1CCD                     l6095:	
  9542                           ;UART.c: 194: {
  9543                           
  9544                           
  9545                           ;UART.c: 196: }
  9546                           ;UART.c: 198: if(config&0x40)
  9547  1CCD  0024               	movlb	4	; select bank4
  9548  1CCE  1F22               	btfss	OpenUSART@config^(0+512),6
  9549  1CCF  2CD5               	goto	l421
  9550                           
  9551                           ;UART.c: 199: {
  9552                           ;UART.c: 200: PIR1bits.RCIF = 0;
  9553  1CD0  0020               	movlb	0	; select bank0
  9554  1CD1  1291               	bcf	17,5	;volatile
  9555                           
  9556                           ;UART.c: 201: PIE1bits.RCIE = 1;
  9557  1CD2  0021               	movlb	1	; select bank1
  9558  1CD3  1691               	bsf	17,5	;volatile
  9559                           
  9560                           ;UART.c: 203: }
  9561  1CD4  2CD7               	goto	l6099
  9562  1CD5                     l421:	
  9563                           
  9564                           ;UART.c: 204: else
  9565                           ;UART.c: 205: {
  9566                           ;UART.c: 206: PIE1bits.RCIE = 0;
  9567  1CD5  0021               	movlb	1	; select bank1
  9568  1CD6  1291               	bcf	17,5	;volatile
  9569  1CD7                     l6099:	
  9570                           
  9571                           ;UART.c: 207: }
  9572                           ;UART.c: 209: if(config&0x80)
  9573  1CD7  0024               	movlb	4	; select bank4
  9574  1CD8  1FA2               	btfss	OpenUSART@config^(0+512),7
  9575  1CD9  2CDF               	goto	l423
  9576                           
  9577                           ;UART.c: 210: {
  9578                           ;UART.c: 211: PIR1bits.TXIF = 0;
  9579  1CDA  0020               	movlb	0	; select bank0
  9580  1CDB  1211               	bcf	17,4	;volatile
  9581                           
  9582                           ;UART.c: 212: PIE1bits.TXIE = 1;
  9583  1CDC  0021               	movlb	1	; select bank1
  9584  1CDD  1611               	bsf	17,4	;volatile
  9585                           
  9586                           ;UART.c: 213: }
  9587  1CDE  2CE1               	goto	l6103
  9588  1CDF                     l423:	
  9589                           
  9590                           ;UART.c: 214: else
  9591                           ;UART.c: 215: {
  9592                           ;UART.c: 216: PIE1bits.TXIE = 0;
  9593  1CDF  0021               	movlb	1	; select bank1
  9594  1CE0  1211               	bcf	17,4	;volatile
  9595  1CE1                     l6103:	
  9596                           
  9597                           ;UART.c: 217: }
  9598                           ;UART.c: 219: SPBRG = spbrg;
  9599  1CE1  0024               	movlb	4	; select bank4
  9600  1CE2  0820               	movf	OpenUSART@spbrg^(0+512),w
  9601  1CE3  0023               	movlb	3	; select bank3
  9602  1CE4  009B               	movwf	27	;volatile
  9603                           
  9604                           ;UART.c: 220: SPBRGH = spbrg >> 8;
  9605  1CE5  0024               	movlb	4	; select bank4
  9606  1CE6  0821               	movf	(OpenUSART@spbrg+1)^(0+512),w
  9607  1CE7  0023               	movlb	3	; select bank3
  9608  1CE8  009C               	movwf	28	;volatile
  9609                           
  9610                           ;UART.c: 222: TX1STAbits.TXEN = 1;
  9611  1CE9  169E               	bsf	30,5	;volatile
  9612                           
  9613                           ;UART.c: 223: RC1STAbits.SPEN = 1;
  9614  1CEA  179D               	bsf	29,7	;volatile
  9615  1CEB  0008               	return
  9616  1CEC                     __end_of_OpenUSART:	
  9617                           
  9618                           	psect	text30
  9619  196C                     __ptext30:	
  9620 ;; *************** function _CloseUSART *****************
  9621 ;; Defined at:
  9622 ;;		line 62 in file "UART.c"
  9623 ;; Parameters:    Size  Location     Type
  9624 ;;		None
  9625 ;; Auto vars:     Size  Location     Type
  9626 ;;		None
  9627 ;; Return value:  Size  Location     Type
  9628 ;;		None               void
  9629 ;; Registers used:
  9630 ;;		wreg, status,2, status,0
  9631 ;; Tracked objects:
  9632 ;;		On entry : 0/0
  9633 ;;		On exit  : 0/0
  9634 ;;		Unchanged: 0/0
  9635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9638 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9639 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9640 ;;Total ram usage:        1 bytes
  9641 ;; Hardware stack levels used:    1
  9642 ;; Hardware stack levels required when called:    7
  9643 ;; This function calls:
  9644 ;;		Nothing
  9645 ;; This function is called by:
  9646 ;;		_InitUART
  9647 ;; This function uses a non-reentrant model
  9648 ;;
  9649                           
  9650                           
  9651                           ;psect for function _CloseUSART
  9652  196C                     _CloseUSART:	
  9653                           
  9654                           ;UART.c: 64: RCSTA&=0b01001111;
  9655                           
  9656                           ;incstack = 0
  9657                           ; Regs used in _CloseUSART: [wreg+status,2+status,0]
  9658  196C  304F               	movlw	79
  9659  196D  0024               	movlb	4	; select bank4
  9660  196E  00A0               	movwf	??_CloseUSART^(0+512)
  9661  196F  0820               	movf	??_CloseUSART^(0+512),w
  9662  1970  0023               	movlb	3	; select bank3
  9663  1971  059D               	andwf	29,f	;volatile
  9664                           
  9665                           ;UART.c: 65: TX1STAbits.TXEN=0;
  9666  1972  129E               	bcf	30,5	;volatile
  9667                           
  9668                           ;UART.c: 66: PIE1&=0b11001111;
  9669  1973  30CF               	movlw	207
  9670  1974  0024               	movlb	4	; select bank4
  9671  1975  00A0               	movwf	??_CloseUSART^(0+512)
  9672  1976  0820               	movf	??_CloseUSART^(0+512),w
  9673  1977  0021               	movlb	1	; select bank1
  9674  1978  0591               	andwf	17,f	;volatile
  9675  1979  0008               	return
  9676  197A                     __end_of_CloseUSART:	
  9677                           
  9678                           	psect	text31
  9679  1000                     __ptext31:	
  9680 ;; *************** function _InitApp *****************
  9681 ;; Defined at:
  9682 ;;		line 62 in file "user.c"
  9683 ;; Parameters:    Size  Location     Type
  9684 ;;		None
  9685 ;; Auto vars:     Size  Location     Type
  9686 ;;		None
  9687 ;; Return value:  Size  Location     Type
  9688 ;;		None               void
  9689 ;; Registers used:
  9690 ;;		wreg, status,2
  9691 ;; Tracked objects:
  9692 ;;		On entry : 0/0
  9693 ;;		On exit  : 0/0
  9694 ;;		Unchanged: 0/0
  9695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9700 ;;Total ram usage:        0 bytes
  9701 ;; Hardware stack levels used:    1
  9702 ;; Hardware stack levels required when called:    7
  9703 ;; This function calls:
  9704 ;;		Nothing
  9705 ;; This function is called by:
  9706 ;;		_main
  9707 ;; This function uses a non-reentrant model
  9708 ;;
  9709                           
  9710                           
  9711                           ;psect for function _InitApp
  9712  1000                     _InitApp:	
  9713                           
  9714                           ;user.c: 64: LATC =0;
  9715                           
  9716                           ;incstack = 0
  9717                           ; Regs used in _InitApp: [wreg+status,2]
  9718  1000  0022               	movlb	2	; select bank2
  9719  1001  018E               	clrf	14	;volatile
  9720                           
  9721                           ;user.c: 65: LATA =0;
  9722  1002  018C               	clrf	12	;volatile
  9723                           
  9724                           ;user.c: 66: TRISCbits.TRISC2 = 0;
  9725  1003  0021               	movlb	1	; select bank1
  9726  1004  110E               	bcf	14,2	;volatile
  9727                           
  9728                           ;user.c: 67: TRISCbits.TRISC1 = 0;
  9729  1005  108E               	bcf	14,1	;volatile
  9730                           
  9731                           ;user.c: 68: TRISCbits.TRISC3 = 0;
  9732  1006  118E               	bcf	14,3	;volatile
  9733                           
  9734                           ;user.c: 69: TRISCbits.TRISC4 = 0;
  9735  1007  120E               	bcf	14,4	;volatile
  9736                           
  9737                           ;user.c: 70: TRISAbits.TRISA2 = 1;
  9738  1008  150C               	bsf	12,2	;volatile
  9739                           
  9740                           ;user.c: 72: TRISCbits.TRISC0 = 1;
  9741  1009  140E               	bsf	14,0	;volatile
  9742                           
  9743                           ;user.c: 77: TRISCbits.TRISC5 = 1;
  9744  100A  168E               	bsf	14,5	;volatile
  9745                           
  9746                           ;user.c: 80: LATC |= 0b00000010;
  9747  100B  0022               	movlb	2	; select bank2
  9748  100C  148E               	bsf	14,1	;volatile
  9749                           
  9750                           ;user.c: 81: PPSLOCK =0;
  9751  100D  003C               	movlb	28	; select bank28
  9752  100E  018F               	clrf	15	;volatile
  9753                           
  9754                           ;user.c: 82: RC2PPS = 0b00010100;
  9755  100F  3014               	movlw	20
  9756  1010  003D               	movlb	29	; select bank29
  9757  1011  00A2               	movwf	34	;volatile
  9758                           
  9759                           ;user.c: 83: CKPPS = 0b00010010;
  9760  1012  3012               	movlw	18
  9761  1013  003C               	movlb	28	; select bank28
  9762  1014  00A5               	movwf	37	;volatile
  9763                           
  9764                           ;user.c: 85: RXPPS = 0b00010101;
  9765  1015  3015               	movlw	21
  9766  1016  00A4               	movwf	36	;volatile
  9767                           
  9768                           ;user.c: 87: PPSLOCK =1;
  9769  1017  3001               	movlw	1
  9770  1018  008F               	movwf	15	;volatile
  9771                           
  9772                           ;user.c: 89: ANSELA &= ~0xFF;
  9773  1019  0023               	movlb	3	; select bank3
  9774  101A  018C               	clrf	12	;volatile
  9775                           
  9776                           ;user.c: 90: ANSELA |= 0b00000100;
  9777  101B  150C               	bsf	12,2	;volatile
  9778                           
  9779                           ;user.c: 91: ANSELC &= ~0xFF;
  9780  101C  018E               	clrf	14	;volatile
  9781                           
  9782                           ;user.c: 92: OPTION_REGbits.nWPUEN = 0;
  9783  101D  0021               	movlb	1	; select bank1
  9784  101E  1395               	bcf	21,7	;volatile
  9785                           
  9786                           ;user.c: 93: WPUC = 0b00100000;
  9787  101F  3020               	movlw	32
  9788  1020  0024               	movlb	4	; select bank4
  9789  1021  008E               	movwf	14	;volatile
  9790                           
  9791                           ;user.c: 94: WPUA = 0;
  9792  1022  018C               	clrf	12	;volatile
  9793  1023  0008               	return
  9794  1024                     __end_of_InitApp:	
  9795                           
  9796                           	psect	text32
  9797  19D1                     __ptext32:	
  9798 ;; *************** function _ConfigureOscillator *****************
  9799 ;; Defined at:
  9800 ;;		line 40 in file "system.c"
  9801 ;; Parameters:    Size  Location     Type
  9802 ;;		None
  9803 ;; Auto vars:     Size  Location     Type
  9804 ;;		None
  9805 ;; Return value:  Size  Location     Type
  9806 ;;		None               void
  9807 ;; Registers used:
  9808 ;;		wreg, status,2, status,0
  9809 ;; Tracked objects:
  9810 ;;		On entry : 0/0
  9811 ;;		On exit  : 0/0
  9812 ;;		Unchanged: 0/0
  9813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9816 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9817 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9818 ;;Total ram usage:        1 bytes
  9819 ;; Hardware stack levels used:    1
  9820 ;; Hardware stack levels required when called:    7
  9821 ;; This function calls:
  9822 ;;		Nothing
  9823 ;; This function is called by:
  9824 ;;		_main
  9825 ;; This function uses a non-reentrant model
  9826 ;;
  9827                           
  9828                           
  9829                           ;psect for function _ConfigureOscillator
  9830  19D1                     _ConfigureOscillator:	
  9831                           
  9832                           ;system.c: 42: OSCCON= 0b11110000;
  9833                           
  9834                           ;incstack = 0
  9835                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
  9836  19D1  30F0               	movlw	240
  9837  19D2  0021               	movlb	1	; select bank1
  9838  19D3  0099               	movwf	25	;volatile
  9839  19D4                     l6457:	
  9840                           ;system.c: 43: while(!(OSCSTAT & HFIOFS));
  9841                           
  9842  19D4  3000               	movlw	0
  9843  19D5  181A               	btfsc	26,0	;volatile
  9844  19D6  3001               	movlw	1
  9845  19D7  051A               	andwf	26,w	;volatile
  9846  19D8  1903               	btfsc	3,2
  9847  19D9  29D4               	goto	l6457
  9848  19DA                     l6459:	
  9849                           ;system.c: 44: while(!(OSCSTAT & = 0b01000000));
  9850                           
  9851  19DA  3040               	movlw	64
  9852  19DB  0024               	movlb	4	; select bank4
  9853  19DC  00A0               	movwf	??_ConfigureOscillator^(0+512)
  9854  19DD  0820               	movf	??_ConfigureOscillator^(0+512),w
  9855  19DE  0021               	movlb	1	; select bank1
  9856  19DF  059A               	andwf	26,f	;volatile
  9857  19E0  1D03               	btfss	3,2
  9858  19E1  0008               	return
  9859  19E2  29DA               	goto	l6459
  9860  19E3                     __end_of_ConfigureOscillator:	
  9861                           
  9862                           	psect	intentry
  9863  0004                     __pintentry:	
  9864 ;; *************** function _isr *****************
  9865 ;; Defined at:
  9866 ;;		line 72 in file "interrupts.c"
  9867 ;; Parameters:    Size  Location     Type
  9868 ;;		None
  9869 ;; Auto vars:     Size  Location     Type
  9870 ;;  ScanTemp        1   36[BANK1 ] unsigned char 
  9871 ;;  rx              1   35[BANK1 ] unsigned char 
  9872 ;;  Rx_fault        1   34[BANK1 ] unsigned char 
  9873 ;; Return value:  Size  Location     Type
  9874 ;;		None               void
  9875 ;; Registers used:
  9876 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9877 ;; Tracked objects:
  9878 ;;		On entry : 0/0
  9879 ;;		On exit  : 0/0
  9880 ;;		Unchanged: 0/0
  9881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9883 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  9884 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9885 ;;      Totals:         0       2       3       0       0       0       0       0       0       0       0       0       
      +0       0
  9886 ;;Total ram usage:        5 bytes
  9887 ;; Hardware stack levels used:    1
  9888 ;; Hardware stack levels required when called:    6
  9889 ;; This function calls:
  9890 ;;		_PS2RawToScan
  9891 ;;		_PS_2_DISABLE_INTERRUPT
  9892 ;;		_Process_PS2_ScanCode
  9893 ;;		_READ_CONFIG_PIN
  9894 ;;		_READ_PS_2_PIN
  9895 ;;		_ResendLast
  9896 ;;		_Timer2OFF
  9897 ;;		_Timer2Reset
  9898 ;;		_UART_send_break_timed
  9899 ;;		i1_PS_2_ENABLE_INTERRUPT
  9900 ;;		i1_ReadUSART
  9901 ;;		i1_Timer2ON
  9902 ;;		i1_UARTchar
  9903 ;; This function is called by:
  9904 ;;		Interrupt level 1
  9905 ;; This function uses a non-reentrant model
  9906 ;;
  9907                           
  9908  0004                     _isr:	
  9909                           
  9910                           ;incstack = 0
  9911                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9912  0004  147E               	bsf	126,0	;set compiler interrupt flag
  9913  0005  3180               	pagesel	$
  9914  0006  0020               	movlb	0	; select bank0
  9915  0007  087F               	movf	127,w
  9916  0008  00EF               	movwf	??_isr+1
  9917                           
  9918                           ;interrupts.c: 74: unsigned char rx;
  9919                           ;interrupts.c: 75: unsigned char Rx_fault =0;
  9920  0009  0021               	movlb	1	; select bank1
  9921  000A  01C2               	clrf	isr@Rx_fault^(0+128)
  9922                           
  9923                           ;interrupts.c: 76: unsigned char ScanTemp;
  9924                           ;interrupts.c: 78: if(IOCAF & 0b00100000)
  9925  000B  0027               	movlb	7	; select bank7
  9926  000C  1E93               	btfss	19,5	;volatile
  9927  000D  2875               	goto	i1l83
  9928                           
  9929                           ;interrupts.c: 79: {
  9930                           ;interrupts.c: 81: PS_2_DISABLE_INTERRUPT(0b00100000);
  9931  000E  3020               	movlw	32
  9932  000F  3199  218A  3180   	fcall	_PS_2_DISABLE_INTERRUPT
  9933                           
  9934                           ;interrupts.c: 82: PIE1bits.TMR2IE = 0;
  9935  0012  0021               	movlb	1	; select bank1
  9936  0013  1091               	bcf	17,1	;volatile
  9937                           
  9938                           ;interrupts.c: 83: PIE1bits.RCIE = 0;
  9939  0014  1291               	bcf	17,5	;volatile
  9940                           
  9941                           ;interrupts.c: 84: LATC |= 0b00010000;
  9942  0015  0022               	movlb	2	; select bank2
  9943  0016  160E               	bsf	14,4	;volatile
  9944                           
  9945                           ;interrupts.c: 85: PS_2_bits++;
  9946  0017  3001               	movlw	1
  9947  0018  0020               	movlb	0	; select bank0
  9948  0019  00EE               	movwf	??_isr
  9949  001A  086E               	movf	??_isr,w
  9950  001B  0021               	movlb	1	; select bank1
  9951  001C  07D2               	addwf	_PS_2_bits^(0+128),f
  9952                           
  9953                           ;interrupts.c: 86: PS_2_Read_Data_TEMP <<= 1;
  9954  001D  3001               	movlw	1
  9955  001E                     u715_25:	
  9956  001E  35C9               	lslf	_PS_2_Read_Data_TEMP^(0+128),f
  9957  001F  0DCA               	rlf	(_PS_2_Read_Data_TEMP+1)^(0+128),f
  9958  0020  0B89               	decfsz	9,f
  9959  0021  281E               	goto	u715_25
  9960                           
  9961                           ;interrupts.c: 87: __nop();
  9962  0022  0000               	nop
  9963                           
  9964                           ;interrupts.c: 88: if(READ_PS_2_PIN(0b00010000))
  9965  0023  3010               	movlw	16
  9966  0024  3199  21E3  3180   	fcall	_READ_PS_2_PIN
  9967  0027  3A00               	xorlw	0
  9968  0028  1903               	skipnz
  9969  0029  282F               	goto	i1l84
  9970                           
  9971                           ;interrupts.c: 89: {
  9972                           ;interrupts.c: 90: PS_2_Read_Data_TEMP++;
  9973  002A  3001               	movlw	1
  9974  002B  0021               	movlb	1	; select bank1
  9975  002C  07C9               	addwf	_PS_2_Read_Data_TEMP^(0+128),f
  9976  002D  3000               	movlw	0
  9977  002E  3DCA               	addwfc	(_PS_2_Read_Data_TEMP+1)^(0+128),f
  9978  002F                     i1l84:	
  9979                           
  9980                           ;interrupts.c: 91: }
  9981                           ;interrupts.c: 92: if(PS_2_bits == 11)
  9982  002F  0021               	movlb	1	; select bank1
  9983  0030  0852               	movf	_PS_2_bits^(0+128),w
  9984  0031  3A0B               	xorlw	11
  9985  0032  1D03               	skipz
  9986  0033  2860               	goto	i1l5757
  9987                           
  9988                           ;interrupts.c: 93: {
  9989                           ;interrupts.c: 94: if(PS_2_Buffer_items < 12)
  9990  0034  300C               	movlw	12
  9991  0035  0251               	subwf	_PS_2_Buffer_items^(0+128),w
  9992  0036  1803               	skipnc
  9993  0037  285D               	goto	i1l5755
  9994                           
  9995                           ;interrupts.c: 95: {
  9996                           ;interrupts.c: 96: ScanTemp = (unsigned char) PS2RawToScan(PS_2_Read_Data_TEMP);
  9997  0038  084A               	movf	(_PS_2_Read_Data_TEMP+1)^(0+128),w
  9998  0039  01F9               	clrf	PS2RawToScan@Raw+1
  9999  003A  07F9               	addwf	PS2RawToScan@Raw+1,f
 10000  003B  0849               	movf	_PS_2_Read_Data_TEMP^(0+128),w
 10001  003C  01F8               	clrf	PS2RawToScan@Raw
 10002  003D  07F8               	addwf	PS2RawToScan@Raw,f
 10003  003E  319D  25B6  3180   	fcall	_PS2RawToScan
 10004  0041  0878               	movf	?_PS2RawToScan,w
 10005  0042  0020               	movlb	0	; select bank0
 10006  0043  00EE               	movwf	??_isr
 10007  0044  086E               	movf	??_isr,w
 10008  0045  0021               	movlb	1	; select bank1
 10009  0046  00C4               	movwf	isr@ScanTemp^(0+128)
 10010                           
 10011                           ;interrupts.c: 97: if(ScanTemp)
 10012  0047  0844               	movf	isr@ScanTemp^(0+128),w
 10013  0048  1903               	btfsc	3,2
 10014  0049  285B               	goto	i1l87
 10015                           
 10016                           ;interrupts.c: 98: {
 10017                           ;interrupts.c: 100: PS_2_ScanCodes[PS_2_Buffer_items] = ScanTemp;
 10018  004A  0844               	movf	isr@ScanTemp^(0+128),w
 10019  004B  0020               	movlb	0	; select bank0
 10020  004C  00EE               	movwf	??_isr
 10021  004D  0021               	movlb	1	; select bank1
 10022  004E  0851               	movf	_PS_2_Buffer_items^(0+128),w
 10023  004F  3ED6               	addlw	_PS_2_ScanCodes& (0+255)
 10024  0050  0086               	movwf	6
 10025  0051  0187               	clrf	7
 10026  0052  0020               	movlb	0	; select bank0
 10027  0053  086E               	movf	??_isr,w
 10028  0054  0081               	movwf	1
 10029                           
 10030                           ;interrupts.c: 101: PS_2_Buffer_items++;
 10031  0055  3001               	movlw	1
 10032  0056  00EE               	movwf	??_isr
 10033  0057  086E               	movf	??_isr,w
 10034  0058  0021               	movlb	1	; select bank1
 10035  0059  07D1               	addwf	_PS_2_Buffer_items^(0+128),f
 10036                           
 10037                           ;interrupts.c: 102: }
 10038  005A  285D               	goto	i1l5755
 10039  005B                     i1l87:	
 10040                           
 10041                           ;interrupts.c: 103: else
 10042                           ;interrupts.c: 104: {
 10043                           ;interrupts.c: 106: ResendLastFlag = 1;
 10044  005B  01D3               	clrf	_ResendLastFlag^(0+128)
 10045  005C  0AD3               	incf	_ResendLastFlag^(0+128),f
 10046  005D                     i1l5755:	
 10047                           
 10048                           ;interrupts.c: 107: }
 10049                           ;interrupts.c: 109: }
 10050                           ;interrupts.c: 110: PS_2_bits = 0;
 10051  005D  01D2               	clrf	_PS_2_bits^(0+128)
 10052                           
 10053                           ;interrupts.c: 111: PS_2_Read_Data_TEMP = 0;
 10054  005E  01C9               	clrf	_PS_2_Read_Data_TEMP^(0+128)
 10055  005F  01CA               	clrf	(_PS_2_Read_Data_TEMP+1)^(0+128)
 10056  0060                     i1l5757:	
 10057                           
 10058                           ;interrupts.c: 112: }
 10059                           ;interrupts.c: 113: Timer2Reset();
 10060  0060  3198  20A1  3180   	fcall	_Timer2Reset
 10061                           
 10062                           ;interrupts.c: 114: PIR1bits.TMR2IF = 0;
 10063  0063  0020               	movlb	0	; select bank0
 10064  0064  1091               	bcf	17,1	;volatile
 10065                           
 10066                           ;interrupts.c: 115: PIE1bits.TMR2IE = 1;
 10067  0065  0021               	movlb	1	; select bank1
 10068  0066  1491               	bsf	17,1	;volatile
 10069                           
 10070                           ;interrupts.c: 116: Timer2ON();
 10071  0067  3198  20A4  3180   	fcall	i1_Timer2ON
 10072                           
 10073                           ;interrupts.c: 117: IOCAF &= ~0b00100000;
 10074  006A  30DF               	movlw	223
 10075  006B  0020               	movlb	0	; select bank0
 10076  006C  00EE               	movwf	??_isr
 10077  006D  086E               	movf	??_isr,w
 10078  006E  0027               	movlb	7	; select bank7
 10079  006F  0593               	andwf	19,f	;volatile
 10080                           
 10081                           ;interrupts.c: 118: PS_2_ENABLE_INTERRUPT(0b00100000);
 10082  0070  3020               	movlw	32
 10083  0071  3199  211A  3180   	fcall	i1_PS_2_ENABLE_INTERRUPT
 10084                           
 10085                           ;interrupts.c: 119: }
 10086  0074  28E1               	goto	i1l102
 10087  0075                     i1l83:	
 10088                           
 10089                           ;interrupts.c: 120: else if (IOCAF & 0b00010000)
 10090  0075  1E13               	btfss	19,4	;volatile
 10091  0076  2882               	goto	i1l90
 10092                           
 10093                           ;interrupts.c: 121: {
 10094                           ;interrupts.c: 122: PS_2_DISABLE_INTERRUPT(0b00010000);
 10095  0077  3010               	movlw	16
 10096  0078  3199  218A  3180   	fcall	_PS_2_DISABLE_INTERRUPT
 10097                           
 10098                           ;interrupts.c: 123: IOCAF &= ~0b00010000;
 10099  007B  30EF               	movlw	239
 10100  007C  0020               	movlb	0	; select bank0
 10101  007D  00EE               	movwf	??_isr
 10102  007E  086E               	movf	??_isr,w
 10103  007F  0027               	movlb	7	; select bank7
 10104  0080  0593               	andwf	19,f	;volatile
 10105                           
 10106                           ;interrupts.c: 124: }
 10107  0081  28E1               	goto	i1l102
 10108  0082                     i1l90:	
 10109                           
 10110                           ;interrupts.c: 125: else if (PIR1bits.RCIF)
 10111  0082  0020               	movlb	0	; select bank0
 10112  0083  1E91               	btfss	17,5	;volatile
 10113  0084  28BF               	goto	i1l92
 10114                           
 10115                           ;interrupts.c: 126: {
 10116                           ;interrupts.c: 129: LATC |= 0b00001000;
 10117  0085  0022               	movlb	2	; select bank2
 10118  0086  158E               	bsf	14,3	;volatile
 10119                           
 10120                           ;interrupts.c: 130: SinLEDtimer = 0;
 10121  0087  0024               	movlb	4	; select bank4
 10122  0088  01DA               	clrf	_SinLEDtimer^(0+512)
 10123  0089  01DB               	clrf	(_SinLEDtimer+1)^(0+512)
 10124                           
 10125                           ;interrupts.c: 131: Rx_fault = 0;
 10126  008A  0021               	movlb	1	; select bank1
 10127  008B  01C2               	clrf	isr@Rx_fault^(0+128)
 10128                           
 10129                           ;interrupts.c: 132: if(RC1STAbits.FERR)
 10130  008C  0023               	movlb	3	; select bank3
 10131  008D  1D1D               	btfss	29,2	;volatile
 10132  008E  2892               	goto	i1l5781
 10133                           
 10134                           ;interrupts.c: 133: {
 10135                           ;interrupts.c: 134: Rx_fault =1;
 10136  008F  0021               	movlb	1	; select bank1
 10137  0090  01C2               	clrf	isr@Rx_fault^(0+128)
 10138  0091  0AC2               	incf	isr@Rx_fault^(0+128),f
 10139  0092                     i1l5781:	
 10140                           
 10141                           ;interrupts.c: 135: }
 10142                           ;interrupts.c: 136: rx = ReadUSART();
 10143  0092  3198  20DF  3180   	fcall	i1_ReadUSART
 10144  0095  0020               	movlb	0	; select bank0
 10145  0096  00EE               	movwf	??_isr
 10146  0097  086E               	movf	??_isr,w
 10147  0098  0021               	movlb	1	; select bank1
 10148  0099  00C3               	movwf	isr@rx^(0+128)
 10149                           
 10150                           ;interrupts.c: 138: if(READ_CONFIG_PIN())
 10151  009A  3198  20C9  3180   	fcall	_READ_CONFIG_PIN
 10152  009D  3A00               	xorlw	0
 10153  009E  1903               	skipnz
 10154  009F  28BC               	goto	i1l5791
 10155                           
 10156                           ;interrupts.c: 139: {
 10157                           ;interrupts.c: 140: if(Rx_fault == 1)
 10158  00A0  0021               	movlb	1	; select bank1
 10159  00A1  0842               	movf	isr@Rx_fault^(0+128),w
 10160  00A2  3A01               	xorlw	1
 10161  00A3  1D03               	skipz
 10162  00A4  28B0               	goto	i1l5789
 10163                           
 10164                           ;interrupts.c: 141: {
 10165                           ;interrupts.c: 142: if(rx == 0)
 10166  00A5  08C3               	movf	isr@rx^(0+128),f
 10167  00A6  1D03               	skipz
 10168  00A7  28BC               	goto	i1l5791
 10169                           
 10170                           ;interrupts.c: 143: {
 10171                           ;interrupts.c: 145: UART_send_break_timed(100000);
 10172  00A8  30A0               	movlw	160
 10173  00A9  00FA               	movwf	UART_send_break_timed@US
 10174  00AA  3086               	movlw	134
 10175  00AB  00FB               	movwf	UART_send_break_timed@US+1
 10176  00AC  3186  26DA  3180   	fcall	_UART_send_break_timed
 10177                           
 10178                           ;interrupts.c: 146: }
 10179                           ;interrupts.c: 147: }
 10180  00AF  28BC               	goto	i1l5791
 10181  00B0                     i1l5789:	
 10182                           
 10183                           ;interrupts.c: 148: else
 10184                           ;interrupts.c: 149: {
 10185                           ;interrupts.c: 150: UARTchar(rx, 1 ,RC1STAbits.RX9D);
 10186  00B0  01F8               	clrf	i1UARTchar@override
 10187  00B1  0AF8               	incf	i1UARTchar@override,f
 10188  00B2  3000               	movlw	0
 10189  00B3  0023               	movlb	3	; select bank3
 10190  00B4  181D               	btfsc	29,0	;volatile
 10191  00B5  3001               	movlw	1
 10192  00B6  00F9               	movwf	i1UARTchar@NinethBit_override_data
 10193  00B7  0021               	movlb	1	; select bank1
 10194  00B8  0843               	movf	isr@rx^(0+128),w
 10195  00B9  319F  27A1  3180   	fcall	i1_UARTchar
 10196  00BC                     i1l5791:	
 10197                           
 10198                           ;interrupts.c: 151: }
 10199                           ;interrupts.c: 152: }
 10200                           ;interrupts.c: 168: PIR1bits.RCIF = 0;
 10201  00BC  0020               	movlb	0	; select bank0
 10202  00BD  1291               	bcf	17,5	;volatile
 10203                           
 10204                           ;interrupts.c: 169: }
 10205  00BE  28E1               	goto	i1l102
 10206  00BF                     i1l92:	
 10207                           
 10208                           ;interrupts.c: 170: else if(PIR1bits.TMR2IF)
 10209  00BF  1C91               	btfss	17,1	;volatile
 10210  00C0  28E1               	goto	i1l102
 10211                           
 10212                           ;interrupts.c: 171: {
 10213                           ;interrupts.c: 173: PIE1bits.TMR2IE = 0;
 10214  00C1  0021               	movlb	1	; select bank1
 10215  00C2  1091               	bcf	17,1	;volatile
 10216                           
 10217                           ;interrupts.c: 174: Timer2OFF();
 10218  00C3  3198  209E  3180   	fcall	_Timer2OFF
 10219                           
 10220                           ;interrupts.c: 175: PS_2_DISABLE_INTERRUPT(0b00100000);
 10221  00C6  3020               	movlw	32
 10222  00C7  3199  218A  3180   	fcall	_PS_2_DISABLE_INTERRUPT
 10223                           
 10224                           ;interrupts.c: 176: PS_2_bits = 0;
 10225  00CA  0021               	movlb	1	; select bank1
 10226  00CB  01D2               	clrf	_PS_2_bits^(0+128)
 10227                           
 10228                           ;interrupts.c: 177: PS_2_Read_Data_TEMP = 0;
 10229  00CC  01C9               	clrf	_PS_2_Read_Data_TEMP^(0+128)
 10230  00CD  01CA               	clrf	(_PS_2_Read_Data_TEMP+1)^(0+128)
 10231                           
 10232                           ;interrupts.c: 178: if(ResendLastFlag)
 10233  00CE  0853               	movf	_ResendLastFlag^(0+128),w
 10234  00CF  1903               	btfsc	3,2
 10235  00D0  28D7               	goto	i1l5807
 10236                           
 10237                           ;interrupts.c: 179: {
 10238                           ;interrupts.c: 181: ResendLast();
 10239  00D1  3198  20D7  3180   	fcall	_ResendLast
 10240                           
 10241                           ;interrupts.c: 182: ResendLastFlag = 0;
 10242  00D4  0021               	movlb	1	; select bank1
 10243  00D5  01D3               	clrf	_ResendLastFlag^(0+128)
 10244                           
 10245                           ;interrupts.c: 183: }
 10246  00D6  28DA               	goto	i1l5809
 10247  00D7                     i1l5807:	
 10248                           
 10249                           ;interrupts.c: 184: else
 10250                           ;interrupts.c: 185: {
 10251                           ;interrupts.c: 186: Process_PS2_ScanCode();
 10252  00D7  3181  211B  3180   	fcall	_Process_PS2_ScanCode
 10253  00DA                     i1l5809:	
 10254                           
 10255                           ;interrupts.c: 187: }
 10256                           ;interrupts.c: 189: PIE1bits.RCIE = 1;
 10257  00DA  0021               	movlb	1	; select bank1
 10258  00DB  1691               	bsf	17,5	;volatile
 10259                           
 10260                           ;interrupts.c: 191: PS_2_ENABLE_INTERRUPT(0b00100000);
 10261  00DC  3020               	movlw	32
 10262  00DD  3199  211A         	fcall	i1_PS_2_ENABLE_INTERRUPT
 10263                           
 10264                           ;interrupts.c: 192: PIR1bits.TMR2IF =0;
 10265  00DF  0020               	movlb	0	; select bank0
 10266  00E0  1091               	bcf	17,1	;volatile
 10267  00E1                     i1l102:	
 10268  00E1  0020               	movlb	0	; select bank0
 10269  00E2  086F               	movf	??_isr+1,w
 10270  00E3  00FF               	movwf	127
 10271  00E4  107E               	bcf	126,0	;clear compiler interrupt flag
 10272  00E5  0009               	retfie
 10273  00E6                     __end_of_isr:	
 10274                           
 10275                           	psect	text34
 10276  18A4                     __ptext34:	
 10277 ;; *************** function i1_Timer2ON *****************
 10278 ;; Defined at:
 10279 ;;		line 59 in file "Timer.c"
 10280 ;; Parameters:    Size  Location     Type
 10281 ;;		None
 10282 ;; Auto vars:     Size  Location     Type
 10283 ;;		None
 10284 ;; Return value:  Size  Location     Type
 10285 ;;		None               void
 10286 ;; Registers used:
 10287 ;;		None
 10288 ;; Tracked objects:
 10289 ;;		On entry : 0/0
 10290 ;;		On exit  : 0/0
 10291 ;;		Unchanged: 0/0
 10292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10296 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10297 ;;Total ram usage:        0 bytes
 10298 ;; Hardware stack levels used:    1
 10299 ;; This function calls:
 10300 ;;		Nothing
 10301 ;; This function is called by:
 10302 ;;		_isr
 10303 ;; This function uses a non-reentrant model
 10304 ;;
 10305                           
 10306                           
 10307                           ;psect for function i1_Timer2ON
 10308  18A4                     i1_Timer2ON:	
 10309                           
 10310                           ;Timer.c: 61: T2CONbits.TMR2ON = 1;
 10311                           
 10312                           ;incstack = 0
 10313                           ; Regs used in i1_Timer2ON: []
 10314  18A4  0020               	movlb	0	; select bank0
 10315  18A5  151C               	bsf	28,2	;volatile
 10316  18A6  0008               	return
 10317  18A7                     __end_ofi1_Timer2ON:	
 10318                           
 10319                           	psect	text35
 10320  191A                     __ptext35:	
 10321 ;; *************** function i1_PS_2_ENABLE_INTERRUPT *****************
 10322 ;; Defined at:
 10323 ;;		line 192 in file "PS_2.c"
 10324 ;; Parameters:    Size  Location     Type
 10325 ;;  DATA_CLK        1    wreg     unsigned char 
 10326 ;; Auto vars:     Size  Location     Type
 10327 ;;  DATA_CLK        1    0[COMMON] unsigned char 
 10328 ;; Return value:  Size  Location     Type
 10329 ;;		None               void
 10330 ;; Registers used:
 10331 ;;		wreg
 10332 ;; Tracked objects:
 10333 ;;		On entry : 0/0
 10334 ;;		On exit  : 0/0
 10335 ;;		Unchanged: 0/0
 10336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10338 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10340 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10341 ;;Total ram usage:        1 bytes
 10342 ;; Hardware stack levels used:    1
 10343 ;; This function calls:
 10344 ;;		Nothing
 10345 ;; This function is called by:
 10346 ;;		_isr
 10347 ;; This function uses a non-reentrant model
 10348 ;;
 10349                           
 10350                           
 10351                           ;psect for function i1_PS_2_ENABLE_INTERRUPT
 10352  191A                     i1_PS_2_ENABLE_INTERRUPT:	
 10353                           
 10354                           ;incstack = 0
 10355                           ; Regs used in i1_PS_2_ENABLE_INTERRUPT: [wreg]
 10356                           ;i1PS_2_ENABLE_INTERRUPT@DATA_CLK stored from wreg
 10357  191A  00F0               	movwf	i1PS_2_ENABLE_INTERRUPT@DATA_CLK
 10358                           
 10359                           ;PS_2.c: 194: if(DATA_CLK == 0b00100000)
 10360  191B  0870               	movf	i1PS_2_ENABLE_INTERRUPT@DATA_CLK,w
 10361  191C  3A20               	xorlw	32
 10362  191D  1D03               	skipz
 10363  191E  2922               	goto	i1l642
 10364                           
 10365                           ;PS_2.c: 195: {
 10366                           ;PS_2.c: 198: IOCAN |= 0b00100000;
 10367  191F  0027               	movlb	7	; select bank7
 10368  1920  1692               	bsf	18,5	;volatile
 10369                           
 10370                           ;PS_2.c: 200: }
 10371  1921  0008               	return
 10372  1922                     i1l642:	
 10373                           
 10374                           ;PS_2.c: 201: else
 10375                           ;PS_2.c: 202: {
 10376                           ;PS_2.c: 205: IOCAN |= 0b00010000;
 10377  1922  0027               	movlb	7	; select bank7
 10378  1923  1612               	bsf	18,4	;volatile
 10379  1924  0008               	return
 10380  1925                     __end_ofi1_PS_2_ENABLE_INTERRUPT:	
 10381                           
 10382                           	psect	text36
 10383  18A1                     __ptext36:	
 10384 ;; *************** function _Timer2Reset *****************
 10385 ;; Defined at:
 10386 ;;		line 81 in file "Timer.c"
 10387 ;; Parameters:    Size  Location     Type
 10388 ;;		None
 10389 ;; Auto vars:     Size  Location     Type
 10390 ;;		None
 10391 ;; Return value:  Size  Location     Type
 10392 ;;		None               void
 10393 ;; Registers used:
 10394 ;;		status,2
 10395 ;; Tracked objects:
 10396 ;;		On entry : 0/0
 10397 ;;		On exit  : 0/0
 10398 ;;		Unchanged: 0/0
 10399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10404 ;;Total ram usage:        0 bytes
 10405 ;; Hardware stack levels used:    1
 10406 ;; This function calls:
 10407 ;;		Nothing
 10408 ;; This function is called by:
 10409 ;;		_isr
 10410 ;; This function uses a non-reentrant model
 10411 ;;
 10412                           
 10413                           
 10414                           ;psect for function _Timer2Reset
 10415  18A1                     _Timer2Reset:	
 10416                           
 10417                           ;Timer.c: 83: TMR2 = 0;
 10418                           
 10419                           ;incstack = 0
 10420                           ; Regs used in _Timer2Reset: [status,2]
 10421  18A1  0020               	movlb	0	; select bank0
 10422  18A2  019A               	clrf	26	;volatile
 10423  18A3  0008               	return
 10424  18A4                     __end_of_Timer2Reset:	
 10425                           
 10426                           	psect	text37
 10427  189E                     __ptext37:	
 10428 ;; *************** function _Timer2OFF *****************
 10429 ;; Defined at:
 10430 ;;		line 70 in file "Timer.c"
 10431 ;; Parameters:    Size  Location     Type
 10432 ;;		None
 10433 ;; Auto vars:     Size  Location     Type
 10434 ;;		None
 10435 ;; Return value:  Size  Location     Type
 10436 ;;		None               void
 10437 ;; Registers used:
 10438 ;;		None
 10439 ;; Tracked objects:
 10440 ;;		On entry : 0/0
 10441 ;;		On exit  : 0/0
 10442 ;;		Unchanged: 0/0
 10443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10447 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10448 ;;Total ram usage:        0 bytes
 10449 ;; Hardware stack levels used:    1
 10450 ;; This function calls:
 10451 ;;		Nothing
 10452 ;; This function is called by:
 10453 ;;		_isr
 10454 ;; This function uses a non-reentrant model
 10455 ;;
 10456                           
 10457                           
 10458                           ;psect for function _Timer2OFF
 10459  189E                     _Timer2OFF:	
 10460                           
 10461                           ;Timer.c: 72: T2CONbits.TMR2ON = 0;
 10462                           
 10463                           ;incstack = 0
 10464                           ; Regs used in _Timer2OFF: []
 10465  189E  0020               	movlb	0	; select bank0
 10466  189F  111C               	bcf	28,2	;volatile
 10467  18A0  0008               	return
 10468  18A1                     __end_of_Timer2OFF:	
 10469                           
 10470                           	psect	text38
 10471  18D7                     __ptext38:	
 10472 ;; *************** function _ResendLast *****************
 10473 ;; Defined at:
 10474 ;;		line 978 in file "PS_2.c"
 10475 ;; Parameters:    Size  Location     Type
 10476 ;;		None
 10477 ;; Auto vars:     Size  Location     Type
 10478 ;;		None
 10479 ;; Return value:  Size  Location     Type
 10480 ;;		None               void
 10481 ;; Registers used:
 10482 ;;		wreg, status,2, status,0, pclath, cstack
 10483 ;; Tracked objects:
 10484 ;;		On entry : 0/0
 10485 ;;		On exit  : 0/0
 10486 ;;		Unchanged: 0/0
 10487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10491 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10492 ;;Total ram usage:        0 bytes
 10493 ;; Hardware stack levels used:    1
 10494 ;; Hardware stack levels required when called:    2
 10495 ;; This function calls:
 10496 ;;		_PS_2_DISABLE_INTERRUPT
 10497 ;;		_Send_PS2
 10498 ;; This function is called by:
 10499 ;;		_isr
 10500 ;; This function uses a non-reentrant model
 10501 ;;
 10502                           
 10503                           
 10504                           ;psect for function _ResendLast
 10505  18D7                     _ResendLast:	
 10506                           
 10507                           ;PS_2.c: 980: PS_2_DISABLE_INTERRUPT(0b00100000);
 10508                           
 10509                           ;incstack = 0
 10510                           ; Regs used in _ResendLast: [wreg+status,2+status,0+pclath+cstack]
 10511  18D7  3020               	movlw	32
 10512  18D8  3199  218A  3198   	fcall	_PS_2_DISABLE_INTERRUPT
 10513                           
 10514                           ;PS_2.c: 982: Send_PS2(0xFE);
 10515  18DB  30FE               	movlw	254
 10516  18DC  318E  2672         	fcall	_Send_PS2
 10517  18DE  0008               	return
 10518  18DF                     __end_of_ResendLast:	
 10519                           
 10520                           	psect	text39
 10521  198A                     __ptext39:	
 10522 ;; *************** function _PS_2_DISABLE_INTERRUPT *****************
 10523 ;; Defined at:
 10524 ;;		line 171 in file "PS_2.c"
 10525 ;; Parameters:    Size  Location     Type
 10526 ;;  DATA_CLK        1    wreg     unsigned char 
 10527 ;; Auto vars:     Size  Location     Type
 10528 ;;  DATA_CLK        1    1[COMMON] unsigned char 
 10529 ;; Return value:  Size  Location     Type
 10530 ;;		None               void
 10531 ;; Registers used:
 10532 ;;		wreg, status,2, status,0
 10533 ;; Tracked objects:
 10534 ;;		On entry : 0/0
 10535 ;;		On exit  : 0/0
 10536 ;;		Unchanged: 0/0
 10537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10539 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10540 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10541 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10542 ;;Total ram usage:        2 bytes
 10543 ;; Hardware stack levels used:    1
 10544 ;; This function calls:
 10545 ;;		Nothing
 10546 ;; This function is called by:
 10547 ;;		_isr
 10548 ;;		_ResendLast
 10549 ;;		_Init_PS_2_Send
 10550 ;;		_Keyboard_Connected
 10551 ;; This function uses a non-reentrant model
 10552 ;;
 10553                           
 10554                           
 10555                           ;psect for function _PS_2_DISABLE_INTERRUPT
 10556  198A                     _PS_2_DISABLE_INTERRUPT:	
 10557                           
 10558                           ;incstack = 0
 10559                           ; Regs used in _PS_2_DISABLE_INTERRUPT: [wreg+status,2+status,0]
 10560                           ;PS_2_DISABLE_INTERRUPT@DATA_CLK stored from wreg
 10561  198A  00F1               	movwf	PS_2_DISABLE_INTERRUPT@DATA_CLK
 10562                           
 10563                           ;PS_2.c: 173: if(DATA_CLK == 0b00100000)
 10564  198B  0871               	movf	PS_2_DISABLE_INTERRUPT@DATA_CLK,w
 10565  198C  3A20               	xorlw	32
 10566  198D  1D03               	skipz
 10567  198E  2995               	goto	i1l4411
 10568                           
 10569                           ;PS_2.c: 174: {
 10570                           ;PS_2.c: 177: IOCAN &= ~0b00100000;
 10571  198F  30DF               	movlw	223
 10572  1990  00F0               	movwf	??_PS_2_DISABLE_INTERRUPT
 10573  1991  0870               	movf	??_PS_2_DISABLE_INTERRUPT,w
 10574  1992  0027               	movlb	7	; select bank7
 10575  1993  0592               	andwf	18,f	;volatile
 10576                           
 10577                           ;PS_2.c: 178: }
 10578  1994  0008               	return
 10579  1995                     i1l4411:	
 10580                           
 10581                           ;PS_2.c: 179: else
 10582                           ;PS_2.c: 180: {
 10583                           ;PS_2.c: 183: IOCAN &= ~0b00010000;
 10584  1995  30EF               	movlw	239
 10585  1996  00F0               	movwf	??_PS_2_DISABLE_INTERRUPT
 10586  1997  0870               	movf	??_PS_2_DISABLE_INTERRUPT,w
 10587  1998  0027               	movlb	7	; select bank7
 10588  1999  0592               	andwf	18,f	;volatile
 10589  199A  0008               	return
 10590  199B                     __end_of_PS_2_DISABLE_INTERRUPT:	
 10591                           
 10592                           	psect	text40
 10593  18C9                     __ptext40:	
 10594 ;; *************** function _READ_CONFIG_PIN *****************
 10595 ;; Defined at:
 10596 ;;		line 144 in file "MISC.c"
 10597 ;; Parameters:    Size  Location     Type
 10598 ;;		None
 10599 ;; Auto vars:     Size  Location     Type
 10600 ;;		None
 10601 ;; Return value:  Size  Location     Type
 10602 ;;                  1    wreg      unsigned char 
 10603 ;; Registers used:
 10604 ;;		wreg
 10605 ;; Tracked objects:
 10606 ;;		On entry : 0/0
 10607 ;;		On exit  : 0/0
 10608 ;;		Unchanged: 0/0
 10609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10613 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10614 ;;Total ram usage:        0 bytes
 10615 ;; Hardware stack levels used:    1
 10616 ;; This function calls:
 10617 ;;		Nothing
 10618 ;; This function is called by:
 10619 ;;		_isr
 10620 ;; This function uses a non-reentrant model
 10621 ;;
 10622                           
 10623                           
 10624                           ;psect for function _READ_CONFIG_PIN
 10625  18C9                     _READ_CONFIG_PIN:	
 10626                           
 10627                           ;MISC.c: 147: if((PORTC & 0b00000001) == 0b00000001)
 10628                           
 10629                           ;incstack = 0
 10630                           ; Regs used in _READ_CONFIG_PIN: [wreg]
 10631  18C9  0020               	movlb	0	; select bank0
 10632  18CA  1C0E               	btfss	14,0	;volatile
 10633  18CB  28CE               	goto	i1l5075
 10634                           
 10635                           ;MISC.c: 148: {
 10636                           ;MISC.c: 149: return (1);
 10637  18CC  3001               	movlw	1
 10638  18CD  0008               	return
 10639  18CE                     i1l5075:	
 10640                           
 10641                           ;MISC.c: 150: }
 10642                           ;MISC.c: 151: return 0;
 10643  18CE  3000               	movlw	0
 10644  18CF  0008               	return
 10645  18D0                     __end_of_READ_CONFIG_PIN:	
 10646                           
 10647                           	psect	text41
 10648  011B                     __ptext41:	
 10649 ;; *************** function _Process_PS2_ScanCode *****************
 10650 ;; Defined at:
 10651 ;;		line 250 in file "PS_2.c"
 10652 ;; Parameters:    Size  Location     Type
 10653 ;;		None
 10654 ;; Auto vars:     Size  Location     Type
 10655 ;;  buf            60    0[BANK3 ] unsigned char [60]
 10656 ;;  temp            1   64[BANK3 ] unsigned char 
 10657 ;; Return value:  Size  Location     Type
 10658 ;;		None               void
 10659 ;; Registers used:
 10660 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10661 ;; Tracked objects:
 10662 ;;		On entry : 0/0
 10663 ;;		On exit  : 0/0
 10664 ;;		Unchanged: 0/0
 10665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10667 ;;      Locals:         0       0       0       0      65       0       0       0       0       0       0       0       
      +0       0
 10668 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 10669 ;;      Totals:         0       0       6       0      65       0       0       0       0       0       0       0       
      +0       0
 10670 ;;Total ram usage:       71 bytes
 10671 ;; Hardware stack levels used:    1
 10672 ;; Hardware stack levels required when called:    5
 10673 ;; This function calls:
 10674 ;;		_BufferShiftBack
 10675 ;;		_Decode_Scan_Code
 10676 ;;		_Decode_Scan_Code_Function
 10677 ;;		_Decode_Scan_Code_FunctionE0
 10678 ;;		_Decode_Scan_Code_Shift
 10679 ;;		_ISNUMBER
 10680 ;;		_Send_PS2
 10681 ;;		_SetBaud
 10682 ;;		_UART_send_break
 10683 ;;		_UART_send_break_timed
 10684 ;;		___lmul
 10685 ;;		_cleanBuffer
 10686 ;;		i1_UARTchar
 10687 ;;		i1_UARTstringWAIT
 10688 ;;		i1_delayUS
 10689 ;;		i1_sprintf
 10690 ;; This function is called by:
 10691 ;;		_isr
 10692 ;; This function uses a non-reentrant model
 10693 ;;
 10694                           
 10695                           
 10696                           ;psect for function _Process_PS2_ScanCode
 10697  011B                     _Process_PS2_ScanCode:	
 10698                           
 10699                           ;PS_2.c: 252: unsigned char temp =0;
 10700                           
 10701                           ;incstack = 0
 10702                           ; Regs used in _Process_PS2_ScanCode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10703  011B  0023               	movlb	3	; select bank3
 10704  011C  01E0               	clrf	Process_PS2_ScanCode@temp^(0+384)
 10705                           
 10706                           ;PS_2.c: 253: unsigned char buf[60];
 10707                           ;PS_2.c: 255: if(PS_2_Buffer_items != 0)
 10708  011D  0021               	movlb	1	; select bank1
 10709  011E  0851               	movf	_PS_2_Buffer_items^(0+128),w
 10710  011F  1903               	btfsc	3,2
 10711  0120  0008               	return
 10712  0121                     i1l5569:	
 10713                           ;PS_2.c: 256: {
 10714                           ;PS_2.c: 258: while(PS_2_Buffer_items != 0)
 10715                           
 10716  0121  0021               	movlb	1	; select bank1
 10717  0122  08D1               	movf	_PS_2_Buffer_items^(0+128),f
 10718  0123  1903               	btfsc	3,2
 10719  0124  0008               	return
 10720                           
 10721                           ;PS_2.c: 259: {
 10722                           ;PS_2.c: 261: if(PS_2_ScanCodes[0])
 10723  0125  0856               	movf	_PS_2_ScanCodes^(0+128),w
 10724  0126  1903               	btfsc	3,2
 10725  0127  2E67               	goto	i1l5565
 10726                           
 10727                           ;PS_2.c: 262: {
 10728                           ;PS_2.c: 264: PS_2_Read_Data_First = PS_2_ScanCodes[0];
 10729  0128  0856               	movf	_PS_2_ScanCodes^(0+128),w
 10730  0129  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 10731  012A  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 10732  012B  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 10733  012C  0023               	movlb	3	; select bank3
 10734  012D  00E1               	movwf	_PS_2_Read_Data_First^(0+384)
 10735  012E  0021               	movlb	1	; select bank1
 10736  012F  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 10737  0130  0023               	movlb	3	; select bank3
 10738  0131  00E2               	movwf	(_PS_2_Read_Data_First+1)^(0+384)
 10739                           
 10740                           ;PS_2.c: 265: if(PS_2_Read_Data_First == 0xF0)
 10741  0132  30F0               	movlw	240
 10742  0133  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 10743  0134  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 10744  0135  1D03               	skipz
 10745  0136  294E               	goto	i1l5099
 10746                           
 10747                           ;PS_2.c: 266: {
 10748                           ;PS_2.c: 267: PS_2_Read_Data_First = PS_2_ScanCodes[0];
 10749  0137  0021               	movlb	1	; select bank1
 10750  0138  0856               	movf	_PS_2_ScanCodes^(0+128),w
 10751  0139  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 10752  013A  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 10753  013B  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 10754  013C  0023               	movlb	3	; select bank3
 10755  013D  00E1               	movwf	_PS_2_Read_Data_First^(0+384)
 10756  013E  0021               	movlb	1	; select bank1
 10757  013F  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 10758  0140  0023               	movlb	3	; select bank3
 10759  0141  00E2               	movwf	(_PS_2_Read_Data_First+1)^(0+384)
 10760                           
 10761                           ;PS_2.c: 268: PS_2_Read_Data_Second = PS_2_ScanCodes[1];
 10762  0142  0021               	movlb	1	; select bank1
 10763  0143  0857               	movf	(_PS_2_ScanCodes^(0+128)+1),w
 10764  0144  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 10765  0145  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 10766  0146  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 10767  0147  0023               	movlb	3	; select bank3
 10768  0148  00E3               	movwf	_PS_2_Read_Data_Second^(0+384)
 10769  0149  0021               	movlb	1	; select bank1
 10770  014A  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 10771  014B  0023               	movlb	3	; select bank3
 10772  014C  00E4               	movwf	(_PS_2_Read_Data_Second+1)^(0+384)
 10773  014D  299D               	goto	i1l5123
 10774  014E                     i1l5099:	
 10775                           ;PS_2.c: 271: }
 10776                           
 10777                           ;PS_2.c: 270: BufferShiftBack(PS_2_ScanCodes,2,12);
 10778                           
 10779                           ;PS_2.c: 269: PS_2_Buffer_items -= 2;
 10780                           
 10781                           
 10782                           ;PS_2.c: 272: else if(PS_2_Read_Data_First == 0xE0)
 10783  014E  30E0               	movlw	224
 10784  014F  0023               	movlb	3	; select bank3
 10785  0150  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 10786  0151  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 10787  0152  1D03               	skipz
 10788  0153  29A8               	goto	i1l5127
 10789                           
 10790                           ;PS_2.c: 273: {
 10791                           ;PS_2.c: 274: PS_2_Read_Data_Second = PS_2_ScanCodes[1];
 10792  0154  0021               	movlb	1	; select bank1
 10793  0155  0857               	movf	(_PS_2_ScanCodes^(0+128)+1),w
 10794  0156  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 10795  0157  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 10796  0158  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 10797  0159  0023               	movlb	3	; select bank3
 10798  015A  00E3               	movwf	_PS_2_Read_Data_Second^(0+384)
 10799  015B  0021               	movlb	1	; select bank1
 10800  015C  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 10801  015D  0023               	movlb	3	; select bank3
 10802  015E  00E4               	movwf	(_PS_2_Read_Data_Second+1)^(0+384)
 10803                           
 10804                           ;PS_2.c: 275: if(PS_2_Read_Data_Second == 0x12)
 10805  015F  3012               	movlw	18
 10806  0160  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 10807  0161  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 10808  0162  1D03               	skipz
 10809  0163  2977               	goto	i1l5109
 10810                           
 10811                           ;PS_2.c: 276: {
 10812                           ;PS_2.c: 278: PS_2_Read_Data_First = 0;
 10813  0164  01E1               	clrf	_PS_2_Read_Data_First^(0+384)
 10814  0165  01E2               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
 10815                           
 10816                           ;PS_2.c: 279: PS_2_Read_Data_Second = 0;
 10817  0166  01E3               	clrf	_PS_2_Read_Data_Second^(0+384)
 10818  0167  01E4               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
 10819                           
 10820                           ;PS_2.c: 280: PS_2_Buffer_items -= 4;
 10821  0168  3004               	movlw	4
 10822  0169  0021               	movlb	1	; select bank1
 10823  016A  02D1               	subwf	_PS_2_Buffer_items^(0+128),f
 10824                           
 10825                           ;PS_2.c: 281: BufferShiftBack(PS_2_ScanCodes,4,12);
 10826  016B  3004               	movlw	4
 10827  016C  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 10828  016D  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 10829  016E  00F0               	movwf	BufferShiftBack@shift
 10830  016F  300C               	movlw	12
 10831  0170  00BD               	movwf	(??_Process_PS2_ScanCode+1)^(0+128)
 10832  0171  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 10833  0172  00F1               	movwf	BufferShiftBack@size
 10834  0173  30D6               	movlw	_PS_2_ScanCodes& (0+255)
 10835  0174  319C  246A  3181   	fcall	_BufferShiftBack
 10836  0177                     i1l5109:	
 10837                           
 10838                           ;PS_2.c: 282: }
 10839                           ;PS_2.c: 283: if(PS_2_Read_Data_Second == 0xF0)
 10840  0177  30F0               	movlw	240
 10841  0178  0023               	movlb	3	; select bank3
 10842  0179  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 10843  017A  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 10844  017B  1D03               	skipz
 10845  017C  299D               	goto	i1l5123
 10846                           
 10847                           ;PS_2.c: 284: {
 10848                           ;PS_2.c: 285: PS_2_Read_Data_Third = PS_2_ScanCodes[2];
 10849  017D  0021               	movlb	1	; select bank1
 10850  017E  0858               	movf	(_PS_2_ScanCodes^(0+128)+2),w
 10851  017F  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 10852  0180  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 10853  0181  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 10854  0182  0023               	movlb	3	; select bank3
 10855  0183  00E5               	movwf	_PS_2_Read_Data_Third^(0+384)
 10856  0184  0021               	movlb	1	; select bank1
 10857  0185  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 10858  0186  0023               	movlb	3	; select bank3
 10859  0187  00E6               	movwf	(_PS_2_Read_Data_Third+1)^(0+384)
 10860                           
 10861                           ;PS_2.c: 286: if(PS_2_Read_Data_Third == 0x7C)
 10862  0188  307C               	movlw	124
 10863  0189  0665               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 10864  018A  0466               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 10865  018B  1D03               	skipz
 10866  018C  2998               	goto	i1l5119
 10867                           
 10868                           ;PS_2.c: 287: {
 10869                           ;PS_2.c: 289: PS_2_Read_Data_First = 0;
 10870  018D  01E1               	clrf	_PS_2_Read_Data_First^(0+384)
 10871  018E  01E2               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
 10872                           
 10873                           ;PS_2.c: 290: PS_2_Read_Data_Second = 0;
 10874  018F  01E3               	clrf	_PS_2_Read_Data_Second^(0+384)
 10875  0190  01E4               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
 10876                           
 10877                           ;PS_2.c: 291: PS_2_Read_Data_Third = 0;
 10878  0191  01E5               	clrf	_PS_2_Read_Data_Third^(0+384)
 10879  0192  01E6               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
 10880                           
 10881                           ;PS_2.c: 292: PS_2_Buffer_items -= 6;
 10882  0193  3006               	movlw	6
 10883  0194  0021               	movlb	1	; select bank1
 10884  0195  02D1               	subwf	_PS_2_Buffer_items^(0+128),f
 10885                           
 10886                           ;PS_2.c: 293: BufferShiftBack(PS_2_ScanCodes,6,12);
 10887  0196  3006               	movlw	6
 10888  0197  29A1               	goto	L19
 10889  0198                     i1l5119:	
 10890                           ;PS_2.c: 294: }
 10891                           
 10892                           
 10893                           ;PS_2.c: 295: else
 10894                           ;PS_2.c: 296: {
 10895                           ;PS_2.c: 297: PS_2_Buffer_items -= 3;
 10896  0198  3003               	movlw	3
 10897  0199  0021               	movlb	1	; select bank1
 10898  019A  02D1               	subwf	_PS_2_Buffer_items^(0+128),f
 10899                           
 10900                           ;PS_2.c: 298: BufferShiftBack(PS_2_ScanCodes,3,12);
 10901  019B  3003               	movlw	3
 10902  019C  29A1               	goto	L19
 10903  019D                     i1l5123:	
 10904                           ;PS_2.c: 299: }
 10905                           ;PS_2.c: 300: }
 10906                           
 10907                           
 10908                           ;PS_2.c: 301: else
 10909                           ;PS_2.c: 302: {
 10910                           ;PS_2.c: 303: PS_2_Buffer_items -= 2;
 10911  019D  3002               	movlw	2
 10912  019E  0021               	movlb	1	; select bank1
 10913  019F  02D1               	subwf	_PS_2_Buffer_items^(0+128),f
 10914                           
 10915                           ;PS_2.c: 304: BufferShiftBack(PS_2_ScanCodes,2,12);
 10916  01A0  3002               	movlw	2
 10917  01A1                     L19:	
 10918  01A1  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 10919  01A2  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 10920  01A3  00F0               	movwf	BufferShiftBack@shift
 10921  01A4  300C               	movlw	12
 10922  01A5  00BD               	movwf	(??_Process_PS2_ScanCode+1)^(0+128)
 10923  01A6  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 10924  01A7  29B0               	goto	L16
 10925  01A8                     i1l5127:	
 10926                           ;PS_2.c: 305: }
 10927                           ;PS_2.c: 306: }
 10928                           
 10929                           
 10930                           ;PS_2.c: 307: else
 10931                           ;PS_2.c: 308: {
 10932                           ;PS_2.c: 309: PS_2_Buffer_items -= 1;
 10933  01A8  3001               	movlw	1
 10934  01A9  0021               	movlb	1	; select bank1
 10935  01AA  02D1               	subwf	_PS_2_Buffer_items^(0+128),f
 10936                           
 10937                           ;PS_2.c: 310: BufferShiftBack(PS_2_ScanCodes,1,12);
 10938  01AB  01F0               	clrf	BufferShiftBack@shift
 10939  01AC  0AF0               	incf	BufferShiftBack@shift,f
 10940  01AD  300C               	movlw	12
 10941  01AE  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 10942  01AF  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 10943  01B0                     L16:	
 10944  01B0  00F1               	movwf	BufferShiftBack@size
 10945  01B1  30D6               	movlw	_PS_2_ScanCodes& (0+255)
 10946  01B2  319C  246A  3181   	fcall	_BufferShiftBack
 10947                           
 10948                           ;PS_2.c: 311: }
 10949                           ;PS_2.c: 314: if(PS_2_Read_Data_Third)
 10950  01B5  0023               	movlb	3	; select bank3
 10951  01B6  0866               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
 10952  01B7  0465               	iorwf	_PS_2_Read_Data_Third^(0+384),w
 10953  01B8  1903               	skipnz
 10954  01B9  29DC               	goto	i1l5149
 10955                           
 10956                           ;PS_2.c: 315: {
 10957                           ;PS_2.c: 317: if(PS_2_Read_Data_First == 0xE0)
 10958  01BA  30E0               	movlw	224
 10959  01BB  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 10960  01BC  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 10961  01BD  1D03               	skipz
 10962  01BE  2AB5               	goto	i1l5245
 10963                           
 10964                           ;PS_2.c: 318: {
 10965                           ;PS_2.c: 319: if(PS_2_Read_Data_Second == 0xF0)
 10966  01BF  30F0               	movlw	240
 10967  01C0  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 10968  01C1  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 10969  01C2  1D03               	skipz
 10970  01C3  2AB5               	goto	i1l5245
 10971                           
 10972                           ;PS_2.c: 320: {
 10973                           ;PS_2.c: 321: if(PS_2_Read_Data_Third == 0x11 )
 10974  01C4  3011               	movlw	17
 10975  01C5  0665               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 10976  01C6  0466               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 10977  01C7  1D03               	skipz
 10978  01C8  29CB               	goto	i1l5141
 10979                           
 10980                           ;PS_2.c: 322: {
 10981                           ;PS_2.c: 323: LALT = 0;
 10982  01C9  01E9               	clrf	_LALT^(0+384)
 10983                           
 10984                           ;PS_2.c: 324: }
 10985  01CA  2AB5               	goto	i1l5245
 10986  01CB                     i1l5141:	
 10987                           
 10988                           ;PS_2.c: 325: else if(PS_2_Read_Data_Third == 0x14 )
 10989  01CB  3014               	movlw	20
 10990  01CC  0665               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 10991  01CD  0466               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 10992  01CE  1D03               	skipz
 10993  01CF  29D3               	goto	i1l5145
 10994                           
 10995                           ;PS_2.c: 326: {
 10996                           ;PS_2.c: 327: LControl = 0;
 10997  01D0  0021               	movlb	1	; select bank1
 10998  01D1  01CF               	clrf	_LControl^(0+128)
 10999                           
 11000                           ;PS_2.c: 328: }
 11001  01D2  2AB5               	goto	i1l5245
 11002  01D3                     i1l5145:	
 11003                           
 11004                           ;PS_2.c: 329: else if(PS_2_Read_Data_Third == 0x71 )
 11005  01D3  3071               	movlw	113
 11006  01D4  0023               	movlb	3	; select bank3
 11007  01D5  0665               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 11008  01D6  0466               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11009  01D7  1D03               	skipz
 11010  01D8  2AB5               	goto	i1l5245
 11011                           
 11012                           ;PS_2.c: 330: {
 11013                           ;PS_2.c: 331: Delete = 0;
 11014  01D9  0021               	movlb	1	; select bank1
 11015  01DA  01CE               	clrf	_Delete^(0+128)
 11016                           
 11017                           ;PS_2.c: 332: }
 11018                           ;PS_2.c: 333: }
 11019                           ;PS_2.c: 334: }
 11020                           ;PS_2.c: 335: }
 11021  01DB  2AB5               	goto	i1l5245
 11022  01DC                     i1l5149:	
 11023                           
 11024                           ;PS_2.c: 336: else if(PS_2_Read_Data_Second)
 11025  01DC  0023               	movlb	3	; select bank3
 11026  01DD  0864               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11027  01DE  0463               	iorwf	_PS_2_Read_Data_Second^(0+384),w
 11028  01DF  1903               	skipnz
 11029  01E0  2AB5               	goto	i1l5245
 11030                           
 11031                           ;PS_2.c: 337: {
 11032                           ;PS_2.c: 339: if(PS_2_Read_Data_First == 0xF0)
 11033  01E1  30F0               	movlw	240
 11034  01E2  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11035  01E3  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11036  01E4  1D03               	skipz
 11037  01E5  2A60               	goto	i1l5213
 11038                           
 11039                           ;PS_2.c: 340: {
 11040                           ;PS_2.c: 342: if(PS_2_Read_Data_Second == 0x12)
 11041  01E6  3012               	movlw	18
 11042  01E7  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11043  01E8  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11044  01E9  1D03               	skipz
 11045  01EA  29ED               	goto	i1l5157
 11046                           
 11047                           ;PS_2.c: 343: {
 11048                           ;PS_2.c: 344: Right_Shift_Key =0;
 11049  01EB  01EE               	clrf	_Right_Shift_Key^(0+384)
 11050                           
 11051                           ;PS_2.c: 345: }
 11052  01EC  2A00               	goto	i1l5169
 11053  01ED                     i1l5157:	
 11054                           
 11055                           ;PS_2.c: 346: else if(PS_2_Read_Data_Second == 0x59)
 11056  01ED  3059               	movlw	89
 11057  01EE  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11058  01EF  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11059  01F0  1D03               	skipz
 11060  01F1  29F4               	goto	i1l5161
 11061                           
 11062                           ;PS_2.c: 347: {
 11063                           ;PS_2.c: 348: Left_Shift_Key =0;
 11064  01F2  01EA               	clrf	_Left_Shift_Key^(0+384)
 11065                           
 11066                           ;PS_2.c: 349: }
 11067  01F3  2A00               	goto	i1l5169
 11068  01F4                     i1l5161:	
 11069                           
 11070                           ;PS_2.c: 350: else if(PS_2_Read_Data_Second == 0x14)
 11071  01F4  3014               	movlw	20
 11072  01F5  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11073  01F6  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11074  01F7  1D03               	skipz
 11075  01F8  29FB               	goto	i1l5165
 11076                           
 11077                           ;PS_2.c: 351: {
 11078                           ;PS_2.c: 352: RControl =0;
 11079  01F9  01ED               	clrf	_RControl^(0+384)
 11080                           
 11081                           ;PS_2.c: 353: }
 11082  01FA  2A00               	goto	i1l5169
 11083  01FB                     i1l5165:	
 11084                           
 11085                           ;PS_2.c: 354: else if(PS_2_Read_Data_Second == 0x11 )
 11086  01FB  3011               	movlw	17
 11087  01FC  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11088  01FD  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11089  01FE  1903               	btfsc	3,2
 11090                           
 11091                           ;PS_2.c: 355: {
 11092                           ;PS_2.c: 356: RALT =0;
 11093  01FF  01EC               	clrf	_RALT^(0+384)
 11094  0200                     i1l5169:	
 11095                           
 11096                           ;PS_2.c: 357: }
 11097                           ;PS_2.c: 358: if(PS_2_Read_Data_Second == 0x59 || PS_2_Read_Data_Second == 0x12)
 11098  0200  3059               	movlw	89
 11099  0201  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11100  0202  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11101  0203  1903               	skipnz
 11102  0204  2A0A               	goto	i1l5173
 11103  0205  3012               	movlw	18
 11104  0206  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11105  0207  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11106  0208  1D03               	skipz
 11107  0209  2A58               	goto	i1l5209
 11108  020A                     i1l5173:	
 11109                           
 11110                           ;PS_2.c: 359: {
 11111                           ;PS_2.c: 360: if(Right_Shift_Key == 0 && Left_Shift_Key == 0)
 11112  020A  08EE               	movf	_Right_Shift_Key^(0+384),f
 11113  020B  1D03               	skipz
 11114  020C  2AB5               	goto	i1l5245
 11115  020D  08EA               	movf	_Left_Shift_Key^(0+384),f
 11116  020E  1D03               	skipz
 11117  020F  2AB5               	goto	i1l5245
 11118                           
 11119                           ;PS_2.c: 361: {
 11120                           ;PS_2.c: 362: if(!Send_PS2(0xED))
 11121  0210  30ED               	movlw	237
 11122  0211  318E  2672  3181   	fcall	_Send_PS2
 11123  0214  3800               	iorlw	0
 11124  0215  1D03               	skipz
 11125  0216  2A20               	goto	i1l5183
 11126                           
 11127                           ;PS_2.c: 363: {
 11128                           ;PS_2.c: 364: if(!Send_PS2(0x00))
 11129  0217  3000               	movlw	0
 11130  0218  318E  2672  3181   	fcall	_Send_PS2
 11131  021B  3800               	iorlw	0
 11132  021C  1D03               	skipz
 11133  021D  2A20               	goto	i1l5183
 11134                           
 11135                           ;PS_2.c: 365: {
 11136                           ;PS_2.c: 366: Shift_Key = 0;
 11137  021E  0023               	movlb	3	; select bank3
 11138  021F  01EF               	clrf	_Shift_Key^(0+384)
 11139  0220                     i1l5183:	
 11140                           
 11141                           ;PS_2.c: 367: }
 11142                           ;PS_2.c: 368: }
 11143                           ;PS_2.c: 369: if(Caps_Lock)
 11144  0220  0023               	movlb	3	; select bank3
 11145  0221  0868               	movf	_Caps_Lock^(0+384),w
 11146  0222  1903               	btfsc	3,2
 11147  0223  2A3E               	goto	i1l5197
 11148                           
 11149                           ;PS_2.c: 370: {
 11150                           ;PS_2.c: 371: CapsCount=0;
 11151  0224  01E7               	clrf	_CapsCount^(0+384)
 11152  0225                     i1l5195:	
 11153                           ;PS_2.c: 372: while(CapsCount<10)
 11154                           
 11155  0225  300A               	movlw	10
 11156  0226  0267               	subwf	_CapsCount^(0+384),w
 11157  0227  1803               	btfsc	3,0
 11158  0228  2AB5               	goto	i1l5245
 11159                           
 11160                           ;PS_2.c: 373: {
 11161                           ;PS_2.c: 374: if(!Send_PS2(0xED))
 11162  0229  30ED               	movlw	237
 11163  022A  318E  2672  3181   	fcall	_Send_PS2
 11164  022D  3800               	iorlw	0
 11165  022E  1D03               	skipz
 11166  022F  2A37               	goto	i1l5193
 11167                           
 11168                           ;PS_2.c: 375: {
 11169                           ;PS_2.c: 376: if(!Send_PS2(0x04))
 11170  0230  3004               	movlw	4
 11171  0231  318E  2672  3181   	fcall	_Send_PS2
 11172  0234  3800               	iorlw	0
 11173  0235  1903               	btfsc	3,2
 11174  0236  2AB5               	goto	i1l5245
 11175  0237                     i1l5193:	
 11176                           ;PS_2.c: 377: {
 11177                           ;PS_2.c: 378: break;
 11178                           
 11179                           
 11180                           ;PS_2.c: 379: }
 11181                           ;PS_2.c: 380: }
 11182                           ;PS_2.c: 381: CapsCount++;
 11183  0237  3001               	movlw	1
 11184  0238  0021               	movlb	1	; select bank1
 11185  0239  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11186  023A  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11187  023B  0023               	movlb	3	; select bank3
 11188  023C  07E7               	addwf	_CapsCount^(0+384),f
 11189  023D  2A25               	goto	i1l5195
 11190  023E                     i1l5197:	
 11191                           ;PS_2.c: 382: }
 11192                           ;PS_2.c: 383: }
 11193                           
 11194                           
 11195                           ;PS_2.c: 384: else
 11196                           ;PS_2.c: 385: {
 11197                           ;PS_2.c: 386: CapsCount=0;
 11198  023E  01E7               	clrf	_CapsCount^(0+384)
 11199  023F                     i1l5207:	
 11200                           ;PS_2.c: 387: while(CapsCount<10)
 11201                           
 11202  023F  300A               	movlw	10
 11203  0240  0267               	subwf	_CapsCount^(0+384),w
 11204  0241  1803               	btfsc	3,0
 11205  0242  2AB5               	goto	i1l5245
 11206                           
 11207                           ;PS_2.c: 388: {
 11208                           ;PS_2.c: 389: if(!Send_PS2(0xED))
 11209  0243  30ED               	movlw	237
 11210  0244  318E  2672  3181   	fcall	_Send_PS2
 11211  0247  3800               	iorlw	0
 11212  0248  1D03               	skipz
 11213  0249  2A51               	goto	i1l5205
 11214                           
 11215                           ;PS_2.c: 390: {
 11216                           ;PS_2.c: 391: if(!Send_PS2(0x00))
 11217  024A  3000               	movlw	0
 11218  024B  318E  2672  3181   	fcall	_Send_PS2
 11219  024E  3800               	iorlw	0
 11220  024F  1903               	btfsc	3,2
 11221  0250  2AB5               	goto	i1l5245
 11222  0251                     i1l5205:	
 11223                           ;PS_2.c: 392: {
 11224                           ;PS_2.c: 393: break;
 11225                           
 11226                           
 11227                           ;PS_2.c: 394: }
 11228                           ;PS_2.c: 395: }
 11229                           ;PS_2.c: 396: CapsCount++;
 11230  0251  3001               	movlw	1
 11231  0252  0021               	movlb	1	; select bank1
 11232  0253  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11233  0254  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11234  0255  0023               	movlb	3	; select bank3
 11235  0256  07E7               	addwf	_CapsCount^(0+384),f
 11236  0257  2A3F               	goto	i1l5207
 11237  0258                     i1l5209:	
 11238                           ;PS_2.c: 397: }
 11239                           ;PS_2.c: 398: }
 11240                           ;PS_2.c: 399: }
 11241                           ;PS_2.c: 400: }
 11242                           
 11243                           
 11244                           ;PS_2.c: 401: else if(PS_2_Read_Data_Second == 0x58)
 11245  0258  3058               	movlw	88
 11246  0259  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11247  025A  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11248  025B  1D03               	skipz
 11249  025C  2AB5               	goto	i1l5245
 11250                           
 11251                           ;PS_2.c: 402: {
 11252                           ;PS_2.c: 403: Caps_Lock_Key = 0;
 11253  025D  0021               	movlb	1	; select bank1
 11254  025E  01CC               	clrf	_Caps_Lock_Key^(0+128)
 11255                           
 11256                           ;PS_2.c: 404: }
 11257                           ;PS_2.c: 405: }
 11258  025F  2AB5               	goto	i1l5245
 11259  0260                     i1l5213:	
 11260                           
 11261                           ;PS_2.c: 406: else if(PS_2_Read_Data_First == 0xE0)
 11262  0260  30E0               	movlw	224
 11263  0261  0023               	movlb	3	; select bank3
 11264  0262  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11265  0263  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11266  0264  1D03               	skipz
 11267  0265  2AB5               	goto	i1l5245
 11268                           
 11269                           ;PS_2.c: 407: {
 11270                           ;PS_2.c: 409: if(PS_2_Read_Data_Second == 0x11 )
 11271  0266  3011               	movlw	17
 11272  0267  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11273  0268  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11274  0269  1D03               	skipz
 11275  026A  2A6E               	goto	i1l5219
 11276                           
 11277                           ;PS_2.c: 410: {
 11278                           ;PS_2.c: 411: LALT = 1;
 11279  026B  01E9               	clrf	_LALT^(0+384)
 11280  026C  0AE9               	incf	_LALT^(0+384),f
 11281                           
 11282                           ;PS_2.c: 412: }
 11283  026D  2A80               	goto	i1l710
 11284  026E                     i1l5219:	
 11285                           
 11286                           ;PS_2.c: 413: else if(PS_2_Read_Data_Second == 0x14 )
 11287  026E  3014               	movlw	20
 11288  026F  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11289  0270  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11290  0271  1D03               	skipz
 11291  0272  2A77               	goto	i1l5223
 11292                           
 11293                           ;PS_2.c: 414: {
 11294                           ;PS_2.c: 415: LControl = 1;
 11295  0273  0021               	movlb	1	; select bank1
 11296  0274  01CF               	clrf	_LControl^(0+128)
 11297  0275  0ACF               	incf	_LControl^(0+128),f
 11298                           
 11299                           ;PS_2.c: 416: }
 11300  0276  2A80               	goto	i1l710
 11301  0277                     i1l5223:	
 11302                           
 11303                           ;PS_2.c: 417: else if(PS_2_Read_Data_Second == 0x71 )
 11304  0277  3071               	movlw	113
 11305  0278  0023               	movlb	3	; select bank3
 11306  0279  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11307  027A  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11308  027B  1D03               	skipz
 11309  027C  2A80               	goto	i1l710
 11310                           
 11311                           ;PS_2.c: 418: {
 11312                           ;PS_2.c: 419: Delete = 1;
 11313  027D  0021               	movlb	1	; select bank1
 11314  027E  01CE               	clrf	_Delete^(0+128)
 11315  027F  0ACE               	incf	_Delete^(0+128),f
 11316  0280                     i1l710:	
 11317                           
 11318                           ;PS_2.c: 420: }
 11319                           ;PS_2.c: 421: if(((RControl || LControl) + (LALT || RALT) + Delete) != 3)
 11320  0280  0023               	movlb	3	; select bank3
 11321  0281  01DC               	clrf	_Process_PS2_ScanCode$850^(0+384)
 11322  0282  0ADC               	incf	_Process_PS2_ScanCode$850^(0+384),f
 11323  0283  08E9               	movf	_LALT^(0+384),f
 11324  0284  1D03               	skipz
 11325  0285  2A8A               	goto	i1l5233
 11326  0286  08EC               	movf	_RALT^(0+384),f
 11327  0287  1D03               	skipz
 11328  0288  2A8A               	goto	i1l5233
 11329  0289  01DC               	clrf	_Process_PS2_ScanCode$850^(0+384)
 11330  028A                     i1l5233:	
 11331  028A  01DD               	clrf	_Process_PS2_ScanCode$851^(0+384)
 11332  028B  0ADD               	incf	_Process_PS2_ScanCode$851^(0+384),f
 11333  028C  08ED               	movf	_RControl^(0+384),f
 11334  028D  1D03               	skipz
 11335  028E  2A95               	goto	i1l5241
 11336  028F  0021               	movlb	1	; select bank1
 11337  0290  08CF               	movf	_LControl^(0+128),f
 11338  0291  1D03               	skipz
 11339  0292  2A95               	goto	i1l5241
 11340  0293  0023               	movlb	3	; select bank3
 11341  0294  01DD               	clrf	_Process_PS2_ScanCode$851^(0+384)
 11342  0295                     i1l5241:	
 11343  0295  0021               	movlb	1	; select bank1
 11344  0296  084E               	movf	_Delete^(0+128),w
 11345  0297  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11346  0298  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11347  0299  0023               	movlb	3	; select bank3
 11348  029A  085D               	movf	_Process_PS2_ScanCode$851^(0+384),w
 11349  029B  075C               	addwf	_Process_PS2_ScanCode$850^(0+384),w
 11350  029C  0021               	movlb	1	; select bank1
 11351  029D  00BE               	movwf	(??_Process_PS2_ScanCode+2)^(0+128)
 11352  029E  01BF               	clrf	((??_Process_PS2_ScanCode+2)^(0+128)+1)
 11353  029F  0DBF               	rlf	(??_Process_PS2_ScanCode+3)^(0+128),f
 11354  02A0  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11355  02A1  073E               	addwf	(??_Process_PS2_ScanCode+2)^(0+128),w
 11356  02A2  00C0               	movwf	(??_Process_PS2_ScanCode+4)^(0+128)
 11357  02A3  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11358  02A4  3D3F               	addwfc	(??_Process_PS2_ScanCode+3)^(0+128),w
 11359  02A5  00C1               	movwf	(??_Process_PS2_ScanCode+5)^(0+128)
 11360  02A6  3003               	movlw	3
 11361  02A7  0640               	xorwf	(??_Process_PS2_ScanCode+4)^(0+128),w
 11362  02A8  0441               	iorwf	(??_Process_PS2_ScanCode+5)^(0+128),w
 11363  02A9  1903               	skipnz
 11364  02AA  2AB5               	goto	i1l5245
 11365                           
 11366                           ;PS_2.c: 422: {
 11367                           ;PS_2.c: 424: temp = Decode_Scan_Code_FunctionE0(PS_2_Read_Data_Second);
 11368  02AB  0023               	movlb	3	; select bank3
 11369  02AC  0863               	movf	_PS_2_Read_Data_Second^(0+384),w
 11370  02AD  3199  21AD  3181   	fcall	_Decode_Scan_Code_FunctionE0
 11371  02B0  0021               	movlb	1	; select bank1
 11372  02B1  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11373  02B2  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11374  02B3  0023               	movlb	3	; select bank3
 11375  02B4  00E0               	movwf	Process_PS2_ScanCode@temp^(0+384)
 11376  02B5                     i1l5245:	
 11377                           
 11378                           ;PS_2.c: 425: }
 11379                           ;PS_2.c: 426: }
 11380                           ;PS_2.c: 427: }
 11381                           ;PS_2.c: 428: if(PS_2_Read_Data_First != 0 && PS_2_Read_Data_Second == 0 &&
 11382                           ;PS_2.c: 429: PS_2_Read_Data_Third == 0)
 11383  02B5  0023               	movlb	3	; select bank3
 11384  02B6  0862               	movf	(_PS_2_Read_Data_First+1)^(0+384),w
 11385  02B7  0461               	iorwf	_PS_2_Read_Data_First^(0+384),w
 11386  02B8  1903               	skipnz
 11387  02B9  2C04               	goto	i1l5393
 11388  02BA  0864               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11389  02BB  0463               	iorwf	_PS_2_Read_Data_Second^(0+384),w
 11390  02BC  1D03               	skipz
 11391  02BD  2C04               	goto	i1l5393
 11392  02BE  0866               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11393  02BF  0465               	iorwf	_PS_2_Read_Data_Third^(0+384),w
 11394  02C0  1D03               	skipz
 11395  02C1  2C04               	goto	i1l5393
 11396                           
 11397                           ;PS_2.c: 430: {
 11398                           ;PS_2.c: 432: if(PS_2_Read_Data_First == 0x12)
 11399  02C2  3012               	movlw	18
 11400  02C3  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11401  02C4  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11402  02C5  1D03               	skipz
 11403  02C6  2ACA               	goto	i1l5255
 11404                           
 11405                           ;PS_2.c: 433: {
 11406                           ;PS_2.c: 434: Right_Shift_Key = 1;
 11407  02C7  01EE               	clrf	_Right_Shift_Key^(0+384)
 11408  02C8  0AEE               	incf	_Right_Shift_Key^(0+384),f
 11409                           
 11410                           ;PS_2.c: 435: }
 11411  02C9  2AD1               	goto	i1l5259
 11412  02CA                     i1l5255:	
 11413                           
 11414                           ;PS_2.c: 436: else if(PS_2_Read_Data_First == 0x59)
 11415  02CA  3059               	movlw	89
 11416  02CB  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11417  02CC  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11418  02CD  1D03               	skipz
 11419  02CE  2AD1               	goto	i1l5259
 11420                           
 11421                           ;PS_2.c: 437: {
 11422                           ;PS_2.c: 438: Left_Shift_Key = 1;
 11423  02CF  01EA               	clrf	_Left_Shift_Key^(0+384)
 11424  02D0  0AEA               	incf	_Left_Shift_Key^(0+384),f
 11425  02D1                     i1l5259:	
 11426                           
 11427                           ;PS_2.c: 439: }
 11428                           ;PS_2.c: 440: if((Right_Shift_Key == 1 && Right_Shift_Key_old == 0) || (Left_Shift_Key =
      +                          = 1 && Left_Shift_Key_old == 0))
 11429  02D1  086E               	movf	_Right_Shift_Key^(0+384),w
 11430  02D2  3A01               	xorlw	1
 11431  02D3  1D03               	skipz
 11432  02D4  2AD9               	goto	i1l5263
 11433  02D5  0021               	movlb	1	; select bank1
 11434  02D6  0854               	movf	_Right_Shift_Key_old^(0+128),w
 11435  02D7  1903               	btfsc	3,2
 11436  02D8  2AE2               	goto	i1l5267
 11437  02D9                     i1l5263:	
 11438  02D9  0023               	movlb	3	; select bank3
 11439  02DA  086A               	movf	_Left_Shift_Key^(0+384),w
 11440  02DB  3A01               	xorlw	1
 11441  02DC  1D03               	skipz
 11442  02DD  2B24               	goto	i1l5295
 11443  02DE  0021               	movlb	1	; select bank1
 11444  02DF  08D0               	movf	_Left_Shift_Key_old^(0+128),f
 11445  02E0  1D03               	skipz
 11446  02E1  2B24               	goto	i1l5295
 11447  02E2                     i1l5267:	
 11448                           
 11449                           ;PS_2.c: 441: {
 11450                           ;PS_2.c: 443: if(!Send_PS2(0xED))
 11451  02E2  30ED               	movlw	237
 11452  02E3  318E  2672  3181   	fcall	_Send_PS2
 11453  02E6  3800               	iorlw	0
 11454  02E7  1D03               	skipz
 11455  02E8  2B24               	goto	i1l5295
 11456                           
 11457                           ;PS_2.c: 444: {
 11458                           ;PS_2.c: 445: if(Caps_Lock)
 11459  02E9  0023               	movlb	3	; select bank3
 11460  02EA  0868               	movf	_Caps_Lock^(0+384),w
 11461  02EB  1903               	btfsc	3,2
 11462  02EC  2B07               	goto	i1l5283
 11463                           
 11464                           ;PS_2.c: 446: {
 11465                           ;PS_2.c: 447: CapsCount=0;
 11466  02ED  01E7               	clrf	_CapsCount^(0+384)
 11467  02EE                     i1l5281:	
 11468                           ;PS_2.c: 448: while(CapsCount<10)
 11469                           
 11470  02EE  300A               	movlw	10
 11471  02EF  0267               	subwf	_CapsCount^(0+384),w
 11472  02F0  1803               	btfsc	3,0
 11473  02F1  2B24               	goto	i1l5295
 11474                           
 11475                           ;PS_2.c: 449: {
 11476                           ;PS_2.c: 450: if(!Send_PS2(0xED))
 11477  02F2  30ED               	movlw	237
 11478  02F3  318E  2672  3181   	fcall	_Send_PS2
 11479  02F6  3800               	iorlw	0
 11480  02F7  1D03               	skipz
 11481  02F8  2B00               	goto	i1l5279
 11482                           
 11483                           ;PS_2.c: 451: {
 11484                           ;PS_2.c: 452: if(!Send_PS2(0x05))
 11485  02F9  3005               	movlw	5
 11486  02FA  318E  2672  3181   	fcall	_Send_PS2
 11487  02FD  3800               	iorlw	0
 11488  02FE  1903               	btfsc	3,2
 11489  02FF  2B21               	goto	i1l5289
 11490  0300                     i1l5279:	
 11491                           ;PS_2.c: 455: break;
 11492                           
 11493                           ;PS_2.c: 453: {
 11494                           ;PS_2.c: 454: Shift_Key = 1;
 11495                           
 11496                           
 11497                           ;PS_2.c: 456: }
 11498                           ;PS_2.c: 457: }
 11499                           ;PS_2.c: 458: CapsCount++;
 11500  0300  3001               	movlw	1
 11501  0301  0021               	movlb	1	; select bank1
 11502  0302  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11503  0303  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11504  0304  0023               	movlb	3	; select bank3
 11505  0305  07E7               	addwf	_CapsCount^(0+384),f
 11506  0306  2AEE               	goto	i1l5281
 11507  0307                     i1l5283:	
 11508                           ;PS_2.c: 459: }
 11509                           ;PS_2.c: 460: }
 11510                           
 11511                           
 11512                           ;PS_2.c: 461: else
 11513                           ;PS_2.c: 462: {
 11514                           ;PS_2.c: 463: CapsCount=0;
 11515  0307  01E7               	clrf	_CapsCount^(0+384)
 11516                           
 11517                           ;PS_2.c: 464: while(CapsCount<10)
 11518  0308  2B0F               	goto	i1l5293
 11519  0309                     i1l5291:	
 11520                           ;PS_2.c: 471: break;
 11521                           
 11522                           
 11523                           ;PS_2.c: 472: }
 11524                           ;PS_2.c: 473: }
 11525                           ;PS_2.c: 474: CapsCount++;
 11526  0309  3001               	movlw	1
 11527  030A  0021               	movlb	1	; select bank1
 11528  030B  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11529  030C  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11530  030D  0023               	movlb	3	; select bank3
 11531  030E  07E7               	addwf	_CapsCount^(0+384),f
 11532  030F                     i1l5293:	
 11533  030F  300A               	movlw	10
 11534  0310  0267               	subwf	_CapsCount^(0+384),w
 11535  0311  1803               	btfsc	3,0
 11536  0312  2B24               	goto	i1l5295
 11537                           
 11538                           ;PS_2.c: 465: {
 11539                           ;PS_2.c: 466: if(!Send_PS2(0xED))
 11540  0313  30ED               	movlw	237
 11541  0314  318E  2672  3181   	fcall	_Send_PS2
 11542  0317  3800               	iorlw	0
 11543  0318  1D03               	skipz
 11544  0319  2B09               	goto	i1l5291
 11545                           
 11546                           ;PS_2.c: 467: {
 11547                           ;PS_2.c: 468: if(!Send_PS2(0x01))
 11548  031A  3001               	movlw	1
 11549  031B  318E  2672  3181   	fcall	_Send_PS2
 11550  031E  3800               	iorlw	0
 11551  031F  1D03               	skipz
 11552  0320  2B09               	goto	i1l5291
 11553  0321                     i1l5289:	
 11554                           
 11555                           ;PS_2.c: 469: {
 11556                           ;PS_2.c: 470: Shift_Key = 1;
 11557  0321  0023               	movlb	3	; select bank3
 11558  0322  01EF               	clrf	_Shift_Key^(0+384)
 11559  0323  0AEF               	incf	_Shift_Key^(0+384),f
 11560  0324                     i1l5295:	
 11561                           
 11562                           ;PS_2.c: 475: }
 11563                           ;PS_2.c: 476: }
 11564                           ;PS_2.c: 477: }
 11565                           ;PS_2.c: 478: }
 11566                           ;PS_2.c: 479: if(PS_2_Read_Data_First == 0x14 )
 11567  0324  3014               	movlw	20
 11568  0325  0023               	movlb	3	; select bank3
 11569  0326  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11570  0327  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11571  0328  1D03               	skipz
 11572  0329  2B2D               	goto	i1l5299
 11573                           
 11574                           ;PS_2.c: 480: {
 11575                           ;PS_2.c: 481: RControl = 1;
 11576  032A  01ED               	clrf	_RControl^(0+384)
 11577  032B  0AED               	incf	_RControl^(0+384),f
 11578                           
 11579                           ;PS_2.c: 482: }
 11580  032C  2C04               	goto	i1l5393
 11581  032D                     i1l5299:	
 11582                           
 11583                           ;PS_2.c: 483: else if(PS_2_Read_Data_First == 0x11 )
 11584  032D  3011               	movlw	17
 11585  032E  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11586  032F  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11587  0330  1D03               	skipz
 11588  0331  2B35               	goto	i1l5303
 11589                           
 11590                           ;PS_2.c: 484: {
 11591                           ;PS_2.c: 485: RALT = 1;
 11592  0332  01EC               	clrf	_RALT^(0+384)
 11593  0333  0AEC               	incf	_RALT^(0+384),f
 11594                           
 11595                           ;PS_2.c: 486: }
 11596  0334  2C04               	goto	i1l5393
 11597  0335                     i1l5303:	
 11598                           
 11599                           ;PS_2.c: 487: else if(PS_2_Read_Data_First == 0xEE )
 11600  0335  30EE               	movlw	238
 11601  0336  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11602  0337  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11603  0338  1D03               	skipz
 11604  0339  2B3E               	goto	i1l5307
 11605                           
 11606                           ;PS_2.c: 488: {
 11607                           ;PS_2.c: 489: ECHO = 1;
 11608  033A  0024               	movlb	4	; select bank4
 11609  033B  01DF               	clrf	_ECHO^(0+512)
 11610  033C  0ADF               	incf	_ECHO^(0+512),f
 11611                           
 11612                           ;PS_2.c: 490: }
 11613  033D  2C04               	goto	i1l5393
 11614  033E                     i1l5307:	
 11615                           
 11616                           ;PS_2.c: 491: else if(PS_2_Read_Data_First == 0x58)
 11617  033E  3058               	movlw	88
 11618  033F  0023               	movlb	3	; select bank3
 11619  0340  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11620  0341  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11621  0342  1D03               	skipz
 11622  0343  2BC3               	goto	i1l5367
 11623                           
 11624                           ;PS_2.c: 492: {
 11625                           ;PS_2.c: 493: Caps_Lock_Key = 1;
 11626  0344  0021               	movlb	1	; select bank1
 11627  0345  01CC               	clrf	_Caps_Lock_Key^(0+128)
 11628  0346  0ACC               	incf	_Caps_Lock_Key^(0+128),f
 11629                           
 11630                           ;PS_2.c: 494: if(Caps_Lock_Key_old == 0)
 11631  0347  08CD               	movf	_Caps_Lock_Key_old^(0+128),f
 11632  0348  1D03               	skipz
 11633  0349  2C04               	goto	i1l5393
 11634                           
 11635                           ;PS_2.c: 495: {
 11636                           ;PS_2.c: 496: if(Caps_Lock)
 11637  034A  0023               	movlb	3	; select bank3
 11638  034B  0868               	movf	_Caps_Lock^(0+384),w
 11639  034C  1903               	btfsc	3,2
 11640  034D  2B88               	goto	i1l5341
 11641                           
 11642                           ;PS_2.c: 497: {
 11643                           ;PS_2.c: 498: if(Shift_Key)
 11644  034E  086F               	movf	_Shift_Key^(0+384),w
 11645  034F  1903               	btfsc	3,2
 11646  0350  2B6B               	goto	i1l5329
 11647                           
 11648                           ;PS_2.c: 499: {
 11649                           ;PS_2.c: 500: CapsCount=0;
 11650  0351  01E7               	clrf	_CapsCount^(0+384)
 11651  0352                     i1l5327:	
 11652                           ;PS_2.c: 501: while(CapsCount<10)
 11653                           
 11654  0352  300A               	movlw	10
 11655  0353  0267               	subwf	_CapsCount^(0+384),w
 11656  0354  1803               	btfsc	3,0
 11657  0355  2C04               	goto	i1l5393
 11658                           
 11659                           ;PS_2.c: 502: {
 11660                           ;PS_2.c: 503: if(!Send_PS2(0xED))
 11661  0356  30ED               	movlw	237
 11662  0357  318E  2672  3181   	fcall	_Send_PS2
 11663  035A  3800               	iorlw	0
 11664  035B  1D03               	skipz
 11665  035C  2B64               	goto	i1l5325
 11666                           
 11667                           ;PS_2.c: 504: {
 11668                           ;PS_2.c: 505: if(!Send_PS2(0x01))
 11669  035D  3001               	movlw	1
 11670  035E  318E  2672  3181   	fcall	_Send_PS2
 11671  0361  3800               	iorlw	0
 11672  0362  1903               	btfsc	3,2
 11673  0363  2B7E               	goto	i1l5335
 11674  0364                     i1l5325:	
 11675                           ;PS_2.c: 508: break;
 11676                           
 11677                           ;PS_2.c: 506: {
 11678                           ;PS_2.c: 507: Caps_Lock =0;
 11679                           
 11680                           
 11681                           ;PS_2.c: 509: }
 11682                           ;PS_2.c: 510: }
 11683                           ;PS_2.c: 511: CapsCount++;
 11684  0364  3001               	movlw	1
 11685  0365  0021               	movlb	1	; select bank1
 11686  0366  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11687  0367  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11688  0368  0023               	movlb	3	; select bank3
 11689  0369  07E7               	addwf	_CapsCount^(0+384),f
 11690  036A  2B52               	goto	i1l5327
 11691  036B                     i1l5329:	
 11692                           ;PS_2.c: 512: }
 11693                           ;PS_2.c: 513: }
 11694                           
 11695                           
 11696                           ;PS_2.c: 514: else
 11697                           ;PS_2.c: 515: {
 11698                           ;PS_2.c: 516: CapsCount=0;
 11699  036B  01E7               	clrf	_CapsCount^(0+384)
 11700  036C                     i1l5339:	
 11701                           ;PS_2.c: 517: while(CapsCount<10)
 11702                           
 11703  036C  300A               	movlw	10
 11704  036D  0267               	subwf	_CapsCount^(0+384),w
 11705  036E  1803               	btfsc	3,0
 11706  036F  2C04               	goto	i1l5393
 11707                           
 11708                           ;PS_2.c: 518: {
 11709                           ;PS_2.c: 519: if(!Send_PS2(0xED))
 11710  0370  30ED               	movlw	237
 11711  0371  318E  2672  3181   	fcall	_Send_PS2
 11712  0374  3800               	iorlw	0
 11713  0375  1D03               	skipz
 11714  0376  2B81               	goto	i1l5337
 11715                           
 11716                           ;PS_2.c: 520: {
 11717                           ;PS_2.c: 521: if(!Send_PS2(0x00))
 11718  0377  3000               	movlw	0
 11719  0378  318E  2672  3181   	fcall	_Send_PS2
 11720  037B  3800               	iorlw	0
 11721  037C  1D03               	skipz
 11722  037D  2B81               	goto	i1l5337
 11723  037E                     i1l5335:	
 11724                           
 11725                           ;PS_2.c: 522: {
 11726                           ;PS_2.c: 523: Caps_Lock =0;
 11727  037E  0023               	movlb	3	; select bank3
 11728  037F  01E8               	clrf	_Caps_Lock^(0+384)
 11729                           
 11730                           ;PS_2.c: 524: break;
 11731  0380  2C04               	goto	i1l5393
 11732  0381                     i1l5337:	
 11733                           
 11734                           ;PS_2.c: 525: }
 11735                           ;PS_2.c: 526: }
 11736                           ;PS_2.c: 527: CapsCount++;
 11737  0381  3001               	movlw	1
 11738  0382  0021               	movlb	1	; select bank1
 11739  0383  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11740  0384  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11741  0385  0023               	movlb	3	; select bank3
 11742  0386  07E7               	addwf	_CapsCount^(0+384),f
 11743  0387  2B6C               	goto	i1l5339
 11744  0388                     i1l5341:	
 11745                           ;PS_2.c: 528: }
 11746                           ;PS_2.c: 529: }
 11747                           ;PS_2.c: 530: }
 11748                           
 11749                           
 11750                           ;PS_2.c: 531: else
 11751                           ;PS_2.c: 532: {
 11752                           ;PS_2.c: 533: if(Shift_Key)
 11753  0388  086F               	movf	_Shift_Key^(0+384),w
 11754  0389  1903               	btfsc	3,2
 11755  038A  2BA5               	goto	i1l5355
 11756                           
 11757                           ;PS_2.c: 534: {
 11758                           ;PS_2.c: 535: CapsCount=0;
 11759  038B  01E7               	clrf	_CapsCount^(0+384)
 11760  038C                     i1l5353:	
 11761                           ;PS_2.c: 536: while(CapsCount<10)
 11762                           
 11763  038C  300A               	movlw	10
 11764  038D  0267               	subwf	_CapsCount^(0+384),w
 11765  038E  1803               	btfsc	3,0
 11766  038F  2C04               	goto	i1l5393
 11767                           
 11768                           ;PS_2.c: 537: {
 11769                           ;PS_2.c: 538: if(!Send_PS2(0xED))
 11770  0390  30ED               	movlw	237
 11771  0391  318E  2672  3181   	fcall	_Send_PS2
 11772  0394  3800               	iorlw	0
 11773  0395  1D03               	skipz
 11774  0396  2B9E               	goto	i1l5351
 11775                           
 11776                           ;PS_2.c: 539: {
 11777                           ;PS_2.c: 540: if(!Send_PS2(0x05))
 11778  0397  3005               	movlw	5
 11779  0398  318E  2672  3181   	fcall	_Send_PS2
 11780  039B  3800               	iorlw	0
 11781  039C  1903               	btfsc	3,2
 11782  039D  2BB8               	goto	i1l5361
 11783  039E                     i1l5351:	
 11784                           ;PS_2.c: 543: break;
 11785                           
 11786                           ;PS_2.c: 541: {
 11787                           ;PS_2.c: 542: Caps_Lock =1;
 11788                           
 11789                           
 11790                           ;PS_2.c: 544: }
 11791                           ;PS_2.c: 545: }
 11792                           ;PS_2.c: 546: CapsCount++;
 11793  039E  3001               	movlw	1
 11794  039F  0021               	movlb	1	; select bank1
 11795  03A0  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11796  03A1  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11797  03A2  0023               	movlb	3	; select bank3
 11798  03A3  07E7               	addwf	_CapsCount^(0+384),f
 11799  03A4  2B8C               	goto	i1l5353
 11800  03A5                     i1l5355:	
 11801                           ;PS_2.c: 547: }
 11802                           ;PS_2.c: 548: }
 11803                           
 11804                           
 11805                           ;PS_2.c: 549: else
 11806                           ;PS_2.c: 550: {
 11807                           ;PS_2.c: 551: CapsCount=0;
 11808  03A5  01E7               	clrf	_CapsCount^(0+384)
 11809  03A6                     i1l5365:	
 11810                           ;PS_2.c: 552: while(CapsCount<10)
 11811                           
 11812  03A6  300A               	movlw	10
 11813  03A7  0267               	subwf	_CapsCount^(0+384),w
 11814  03A8  1803               	btfsc	3,0
 11815  03A9  2C04               	goto	i1l5393
 11816                           
 11817                           ;PS_2.c: 553: {
 11818                           ;PS_2.c: 554: if(!Send_PS2(0xED))
 11819  03AA  30ED               	movlw	237
 11820  03AB  318E  2672  3181   	fcall	_Send_PS2
 11821  03AE  3800               	iorlw	0
 11822  03AF  1D03               	skipz
 11823  03B0  2BBC               	goto	i1l5363
 11824                           
 11825                           ;PS_2.c: 555: {
 11826                           ;PS_2.c: 556: if(!Send_PS2(0x04))
 11827  03B1  3004               	movlw	4
 11828  03B2  318E  2672  3181   	fcall	_Send_PS2
 11829  03B5  3800               	iorlw	0
 11830  03B6  1D03               	skipz
 11831  03B7  2BBC               	goto	i1l5363
 11832  03B8                     i1l5361:	
 11833                           
 11834                           ;PS_2.c: 557: {
 11835                           ;PS_2.c: 558: Caps_Lock =1;
 11836  03B8  0023               	movlb	3	; select bank3
 11837  03B9  01E8               	clrf	_Caps_Lock^(0+384)
 11838  03BA  0AE8               	incf	_Caps_Lock^(0+384),f
 11839                           
 11840                           ;PS_2.c: 559: break;
 11841  03BB  2C04               	goto	i1l5393
 11842  03BC                     i1l5363:	
 11843                           
 11844                           ;PS_2.c: 560: }
 11845                           ;PS_2.c: 561: }
 11846                           ;PS_2.c: 562: CapsCount++;
 11847  03BC  3001               	movlw	1
 11848  03BD  0021               	movlb	1	; select bank1
 11849  03BE  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11850  03BF  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11851  03C0  0023               	movlb	3	; select bank3
 11852  03C1  07E7               	addwf	_CapsCount^(0+384),f
 11853  03C2  2BA6               	goto	i1l5365
 11854  03C3                     i1l5367:	
 11855                           ;PS_2.c: 563: }
 11856                           ;PS_2.c: 564: }
 11857                           ;PS_2.c: 565: }
 11858                           ;PS_2.c: 566: }
 11859                           ;PS_2.c: 568: }
 11860                           
 11861                           
 11862                           ;PS_2.c: 569: else
 11863                           ;PS_2.c: 570: {
 11864                           ;PS_2.c: 571: if(Shift_Key ==1)
 11865  03C3  086F               	movf	_Shift_Key^(0+384),w
 11866  03C4  3A01               	xorlw	1
 11867  03C5  1D03               	skipz
 11868  03C6  2BE2               	goto	i1l5379
 11869                           
 11870                           ;PS_2.c: 572: {
 11871                           ;PS_2.c: 574: temp = Decode_Scan_Code_Shift(PS_2_Read_Data_First);
 11872  03C7  0861               	movf	_PS_2_Read_Data_First^(0+384),w
 11873  03C8  3199  21BF  3181   	fcall	_Decode_Scan_Code_Shift
 11874  03CB  0021               	movlb	1	; select bank1
 11875  03CC  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11876  03CD  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11877  03CE  0023               	movlb	3	; select bank3
 11878  03CF  00E0               	movwf	Process_PS2_ScanCode@temp^(0+384)
 11879                           
 11880                           ;PS_2.c: 575: if(Caps_Lock)
 11881  03D0  0868               	movf	_Caps_Lock^(0+384),w
 11882  03D1  1903               	btfsc	3,2
 11883  03D2  2BF8               	goto	i1l5389
 11884                           
 11885                           ;PS_2.c: 576: {
 11886                           ;PS_2.c: 578: if(temp >= 'A' && temp <= 'Z')
 11887  03D3  3041               	movlw	65
 11888  03D4  0260               	subwf	Process_PS2_ScanCode@temp^(0+384),w
 11889  03D5  1C03               	skipc
 11890  03D6  2BF8               	goto	i1l5389
 11891  03D7  305B               	movlw	91
 11892  03D8  0260               	subwf	Process_PS2_ScanCode@temp^(0+384),w
 11893  03D9  1803               	skipnc
 11894  03DA  2BF8               	goto	i1l5389
 11895                           
 11896                           ;PS_2.c: 579: {
 11897                           ;PS_2.c: 580: temp += 32;
 11898  03DB  3020               	movlw	32
 11899  03DC  0021               	movlb	1	; select bank1
 11900  03DD  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11901  03DE  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11902  03DF  0023               	movlb	3	; select bank3
 11903  03E0  07E0               	addwf	Process_PS2_ScanCode@temp^(0+384),f
 11904                           
 11905                           ;PS_2.c: 581: }
 11906                           ;PS_2.c: 582: }
 11907                           ;PS_2.c: 583: }
 11908  03E1  2BF8               	goto	i1l5389
 11909  03E2                     i1l5379:	
 11910                           
 11911                           ;PS_2.c: 584: else
 11912                           ;PS_2.c: 585: {
 11913                           ;PS_2.c: 586: temp = Decode_Scan_Code(PS_2_Read_Data_First);
 11914  03E2  0861               	movf	_PS_2_Read_Data_First^(0+384),w
 11915  03E3  3199  219B  3181   	fcall	_Decode_Scan_Code
 11916  03E6  0021               	movlb	1	; select bank1
 11917  03E7  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11918  03E8  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11919  03E9  0023               	movlb	3	; select bank3
 11920  03EA  00E0               	movwf	Process_PS2_ScanCode@temp^(0+384)
 11921                           
 11922                           ;PS_2.c: 587: if(Caps_Lock)
 11923  03EB  0868               	movf	_Caps_Lock^(0+384),w
 11924  03EC  1903               	btfsc	3,2
 11925  03ED  2BF8               	goto	i1l5389
 11926                           
 11927                           ;PS_2.c: 588: {
 11928                           ;PS_2.c: 590: if(temp >= 'a' && temp <= 'z')
 11929  03EE  3061               	movlw	97
 11930  03EF  0260               	subwf	Process_PS2_ScanCode@temp^(0+384),w
 11931  03F0  1C03               	skipc
 11932  03F1  2BF8               	goto	i1l5389
 11933  03F2  307B               	movlw	123
 11934  03F3  0260               	subwf	Process_PS2_ScanCode@temp^(0+384),w
 11935  03F4  1803               	skipnc
 11936  03F5  2BF8               	goto	i1l5389
 11937                           
 11938                           ;PS_2.c: 591: {
 11939                           ;PS_2.c: 592: temp -= 32;
 11940  03F6  3020               	movlw	32
 11941  03F7  02E0               	subwf	Process_PS2_ScanCode@temp^(0+384),f
 11942  03F8                     i1l5389:	
 11943                           
 11944                           ;PS_2.c: 593: }
 11945                           ;PS_2.c: 594: }
 11946                           ;PS_2.c: 595: }
 11947                           ;PS_2.c: 596: if(!temp)
 11948  03F8  08E0               	movf	Process_PS2_ScanCode@temp^(0+384),f
 11949  03F9  1D03               	skipz
 11950  03FA  2C04               	goto	i1l5393
 11951                           
 11952                           ;PS_2.c: 597: {
 11953                           ;PS_2.c: 599: temp = Decode_Scan_Code_Function(PS_2_Read_Data_First);
 11954  03FB  0861               	movf	_PS_2_Read_Data_First^(0+384),w
 11955  03FC  3199  217A  3181   	fcall	_Decode_Scan_Code_Function
 11956  03FF  0021               	movlb	1	; select bank1
 11957  0400  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11958  0401  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11959  0402  0023               	movlb	3	; select bank3
 11960  0403  00E0               	movwf	Process_PS2_ScanCode@temp^(0+384)
 11961  0404                     i1l5393:	
 11962                           
 11963                           ;PS_2.c: 600: }
 11964                           ;PS_2.c: 601: }
 11965                           ;PS_2.c: 602: }
 11966                           ;PS_2.c: 604: if(((RControl || LControl) + (LALT || RALT) + Delete) == 3)
 11967  0404  0023               	movlb	3	; select bank3
 11968  0405  01DE               	clrf	_Process_PS2_ScanCode$852^(0+384)
 11969  0406  0ADE               	incf	_Process_PS2_ScanCode$852^(0+384),f
 11970  0407  08E9               	movf	_LALT^(0+384),f
 11971  0408  1D03               	skipz
 11972  0409  2C0E               	goto	i1l5401
 11973  040A  08EC               	movf	_RALT^(0+384),f
 11974  040B  1D03               	skipz
 11975  040C  2C0E               	goto	i1l5401
 11976  040D  01DE               	clrf	_Process_PS2_ScanCode$852^(0+384)
 11977  040E                     i1l5401:	
 11978  040E  01DF               	clrf	_Process_PS2_ScanCode$853^(0+384)
 11979  040F  0ADF               	incf	_Process_PS2_ScanCode$853^(0+384),f
 11980  0410  08ED               	movf	_RControl^(0+384),f
 11981  0411  1D03               	skipz
 11982  0412  2C19               	goto	i1l5409
 11983  0413  0021               	movlb	1	; select bank1
 11984  0414  08CF               	movf	_LControl^(0+128),f
 11985  0415  1D03               	skipz
 11986  0416  2C19               	goto	i1l5409
 11987  0417  0023               	movlb	3	; select bank3
 11988  0418  01DF               	clrf	_Process_PS2_ScanCode$853^(0+384)
 11989  0419                     i1l5409:	
 11990  0419  0021               	movlb	1	; select bank1
 11991  041A  084E               	movf	_Delete^(0+128),w
 11992  041B  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11993  041C  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11994  041D  0023               	movlb	3	; select bank3
 11995  041E  085F               	movf	_Process_PS2_ScanCode$853^(0+384),w
 11996  041F  075E               	addwf	_Process_PS2_ScanCode$852^(0+384),w
 11997  0420  0021               	movlb	1	; select bank1
 11998  0421  00BE               	movwf	(??_Process_PS2_ScanCode+2)^(0+128)
 11999  0422  01BF               	clrf	((??_Process_PS2_ScanCode+2)^(0+128)+1)
 12000  0423  0DBF               	rlf	(??_Process_PS2_ScanCode+3)^(0+128),f
 12001  0424  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12002  0425  073E               	addwf	(??_Process_PS2_ScanCode+2)^(0+128),w
 12003  0426  00C0               	movwf	(??_Process_PS2_ScanCode+4)^(0+128)
 12004  0427  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 12005  0428  3D3F               	addwfc	(??_Process_PS2_ScanCode+3)^(0+128),w
 12006  0429  00C1               	movwf	(??_Process_PS2_ScanCode+5)^(0+128)
 12007  042A  3003               	movlw	3
 12008  042B  0640               	xorwf	(??_Process_PS2_ScanCode+4)^(0+128),w
 12009  042C  0441               	iorwf	(??_Process_PS2_ScanCode+5)^(0+128),w
 12010  042D  1D03               	skipz
 12011  042E  2CB1               	goto	i1l5453
 12012                           
 12013                           ;PS_2.c: 605: {
 12014                           ;PS_2.c: 607: UARTstringWAIT("\r\n");
 12015  042F  3043               	movlw	low ((STR_15+16)| (0+32768))
 12016  0430  0020               	movlb	0	; select bank0
 12017  0431  00A1               	movwf	i1UARTstringWAIT@data
 12018  0432  308A               	movlw	high ((STR_15+16)| (0+32768))
 12019  0433  00A2               	movwf	i1UARTstringWAIT@data+1
 12020  0434  319B  232F  3181   	fcall	i1_UARTstringWAIT
 12021                           
 12022                           ;PS_2.c: 608: delayUS(10000);
 12023  0437  3000               	movlw	0
 12024  0438  00F3               	movwf	i1delayUS@US+3
 12025  0439  3000               	movlw	0
 12026  043A  00F2               	movwf	i1delayUS@US+2
 12027  043B  3027               	movlw	39
 12028  043C  00F1               	movwf	i1delayUS@US+1
 12029  043D  3010               	movlw	16
 12030  043E  00F0               	movwf	i1delayUS@US
 12031  043F  319B  2393  3181   	fcall	i1_delayUS
 12032                           
 12033                           ;PS_2.c: 609: if(!BAUDMODE)
 12034  0442  0021               	movlb	1	; select bank1
 12035  0443  08CB               	movf	_BAUDMODE^(0+128),f
 12036  0444  1D03               	skipz
 12037  0445  2C6D               	goto	i1l5429
 12038                           
 12039                           ;PS_2.c: 610: {
 12040                           ;PS_2.c: 611: BaudTyped =0;
 12041  0446  3000               	movlw	0
 12042  0447  00C8               	movwf	(_BaudTyped+3)^(0+128)
 12043  0448  3000               	movlw	0
 12044  0449  00C7               	movwf	(_BaudTyped+2)^(0+128)
 12045  044A  3000               	movlw	0
 12046  044B  00C6               	movwf	(_BaudTyped+1)^(0+128)
 12047  044C  3000               	movlw	0
 12048  044D  00C5               	movwf	_BaudTyped^(0+128)
 12049                           
 12050                           ;PS_2.c: 612: ParityTyped =0;
 12051  044E  0023               	movlb	3	; select bank3
 12052  044F  01EB               	clrf	_ParityTyped^(0+384)
 12053                           
 12054                           ;PS_2.c: 613: BAUDMODE = 1;
 12055  0450  0021               	movlb	1	; select bank1
 12056  0451  01CB               	clrf	_BAUDMODE^(0+128)
 12057  0452  0ACB               	incf	_BAUDMODE^(0+128),f
 12058                           
 12059                           ;PS_2.c: 614: UARTstringWAIT("Enter Baud rate \r\n");
 12060  0453  3033               	movlw	low (STR_15| (0+32768))
 12061  0454  0020               	movlb	0	; select bank0
 12062  0455  00A1               	movwf	i1UARTstringWAIT@data
 12063  0456  308A               	movlw	high (STR_15| (0+32768))
 12064  0457  00A2               	movwf	i1UARTstringWAIT@data+1
 12065  0458  319B  232F  3181   	fcall	i1_UARTstringWAIT
 12066                           
 12067                           ;PS_2.c: 615: delayUS(10000);
 12068  045B  3000               	movlw	0
 12069  045C  00F3               	movwf	i1delayUS@US+3
 12070  045D  3000               	movlw	0
 12071  045E  00F2               	movwf	i1delayUS@US+2
 12072  045F  3027               	movlw	39
 12073  0460  00F1               	movwf	i1delayUS@US+1
 12074  0461  3010               	movlw	16
 12075  0462  00F0               	movwf	i1delayUS@US
 12076  0463  319B  2393  3181   	fcall	i1_delayUS
 12077                           
 12078                           ;PS_2.c: 616: UARTchar('>' , 0, 0);
 12079  0466  01F8               	clrf	i1UARTchar@override
 12080  0467  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12081  0468  303E               	movlw	62
 12082  0469  319F  27A1  3181   	fcall	i1_UARTchar
 12083                           
 12084                           ;PS_2.c: 618: }
 12085  046C  2CA8               	goto	i1l5443
 12086  046D                     i1l5429:	
 12087                           
 12088                           ;PS_2.c: 619: else
 12089                           ;PS_2.c: 620: {
 12090                           ;PS_2.c: 621: BaudTyped = 9600;
 12091  046D  3000               	movlw	0
 12092  046E  0021               	movlb	1	; select bank1
 12093  046F  00C8               	movwf	(_BaudTyped+3)^(0+128)
 12094  0470  3000               	movlw	0
 12095  0471  00C7               	movwf	(_BaudTyped+2)^(0+128)
 12096  0472  3025               	movlw	37
 12097  0473  00C6               	movwf	(_BaudTyped+1)^(0+128)
 12098  0474  3080               	movlw	128
 12099  0475  00C5               	movwf	_BaudTyped^(0+128)
 12100                           
 12101                           ;PS_2.c: 622: UARTstringWAIT("KeyBoard Reset to 9600");
 12102  0476  3007               	movlw	low (STR_16| (0+32768))
 12103  0477  0020               	movlb	0	; select bank0
 12104  0478  00A1               	movwf	i1UARTstringWAIT@data
 12105  0479  308A               	movlw	high (STR_16| (0+32768))
 12106  047A  00A2               	movwf	i1UARTstringWAIT@data+1
 12107  047B  319B  232F  3181   	fcall	i1_UARTstringWAIT
 12108                           
 12109                           ;PS_2.c: 623: UARTstringWAIT(NoParityMSG);
 12110  047E  3026               	movlw	low (_NoParityMSG| (0+32768))
 12111  047F  0020               	movlb	0	; select bank0
 12112  0480  00A1               	movwf	i1UARTstringWAIT@data
 12113  0481  3089               	movlw	high (_NoParityMSG| (0+32768))
 12114  0482  00A2               	movwf	i1UARTstringWAIT@data+1
 12115  0483  319B  232F  3181   	fcall	i1_UARTstringWAIT
 12116                           
 12117                           ;PS_2.c: 624: UARTstringWAIT("\r\n");
 12118  0486  3043               	movlw	low ((STR_15+16)| (0+32768))
 12119  0487  0020               	movlb	0	; select bank0
 12120  0488  00A1               	movwf	i1UARTstringWAIT@data
 12121  0489  308A               	movlw	high ((STR_15+16)| (0+32768))
 12122  048A  00A2               	movwf	i1UARTstringWAIT@data+1
 12123  048B  319B  232F  3181   	fcall	i1_UARTstringWAIT
 12124                           
 12125                           ;PS_2.c: 625: delayUS(10000);
 12126  048E  3000               	movlw	0
 12127  048F  00F3               	movwf	i1delayUS@US+3
 12128  0490  3000               	movlw	0
 12129  0491  00F2               	movwf	i1delayUS@US+2
 12130  0492  3027               	movlw	39
 12131  0493  00F1               	movwf	i1delayUS@US+1
 12132  0494  3010               	movlw	16
 12133  0495  00F0               	movwf	i1delayUS@US
 12134  0496  319B  2393  3181   	fcall	i1_delayUS
 12135                           
 12136                           ;PS_2.c: 626: SetBaud(BaudTyped, 0);
 12137  0499  0021               	movlb	1	; select bank1
 12138  049A  0848               	movf	(_BaudTyped+3)^(0+128),w
 12139  049B  00B2               	movwf	(SetBaud@Baud+3)^(0+128)
 12140  049C  0847               	movf	(_BaudTyped+2)^(0+128),w
 12141  049D  00B1               	movwf	(SetBaud@Baud+2)^(0+128)
 12142  049E  0846               	movf	(_BaudTyped+1)^(0+128),w
 12143  049F  00B0               	movwf	(SetBaud@Baud+1)^(0+128)
 12144  04A0  0845               	movf	_BaudTyped^(0+128),w
 12145  04A1  00AF               	movwf	SetBaud@Baud^(0+128)
 12146  04A2  01B3               	clrf	SetBaud@Parity^(0+128)
 12147  04A3  318C  24F6  3181   	fcall	_SetBaud
 12148                           
 12149                           ;PS_2.c: 627: BAUDMODE = 0;
 12150  04A6  0021               	movlb	1	; select bank1
 12151  04A7  01CB               	clrf	_BAUDMODE^(0+128)
 12152  04A8                     i1l5443:	
 12153                           
 12154                           ;PS_2.c: 628: }
 12155                           ;PS_2.c: 629: RControl =0;
 12156  04A8  0023               	movlb	3	; select bank3
 12157  04A9  01ED               	clrf	_RControl^(0+384)
 12158                           
 12159                           ;PS_2.c: 630: LControl =0;
 12160  04AA  0021               	movlb	1	; select bank1
 12161  04AB  01CF               	clrf	_LControl^(0+128)
 12162                           
 12163                           ;PS_2.c: 631: LALT =0;
 12164  04AC  0023               	movlb	3	; select bank3
 12165  04AD  01E9               	clrf	_LALT^(0+384)
 12166                           
 12167                           ;PS_2.c: 632: RALT =0;
 12168  04AE  01EC               	clrf	_RALT^(0+384)
 12169                           
 12170                           ;PS_2.c: 633: Delete =0;
 12171  04AF  0021               	movlb	1	; select bank1
 12172  04B0  01CE               	clrf	_Delete^(0+128)
 12173  04B1                     i1l5453:	
 12174                           
 12175                           ;PS_2.c: 634: }
 12176                           ;PS_2.c: 636: if(temp)
 12177  04B1  0023               	movlb	3	; select bank3
 12178  04B2  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12179  04B3  1903               	btfsc	3,2
 12180  04B4  2E48               	goto	i1l5549
 12181                           
 12182                           ;PS_2.c: 637: {
 12183                           ;PS_2.c: 639: if(temp == 0x01)
 12184  04B5  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12185  04B6  3A01               	xorlw	1
 12186  04B7  1D03               	skipz
 12187  04B8  2CC4               	goto	i1l5459
 12188                           
 12189                           ;PS_2.c: 640: {
 12190                           ;PS_2.c: 642: UART_send_break();
 12191  04B9  3198  20B2  3181   	fcall	_UART_send_break
 12192                           
 12193                           ;PS_2.c: 643: UART_send_break_timed(100000);
 12194  04BC  30A0               	movlw	160
 12195  04BD  00FA               	movwf	UART_send_break_timed@US
 12196  04BE  3086               	movlw	134
 12197  04BF  00FB               	movwf	UART_send_break_timed@US+1
 12198  04C0  3186  26DA  3181   	fcall	_UART_send_break_timed
 12199  04C3  2E47               	goto	i1l792
 12200  04C4                     i1l5459:	
 12201                           ;PS_2.c: 644: }
 12202                           
 12203                           
 12204                           ;PS_2.c: 645: else
 12205                           ;PS_2.c: 646: {
 12206                           ;PS_2.c: 647: if(!BAUDMODE)
 12207  04C4  0021               	movlb	1	; select bank1
 12208  04C5  08CB               	movf	_BAUDMODE^(0+128),f
 12209  04C6  1D03               	skipz
 12210  04C7  2CF1               	goto	i1l5471
 12211                           
 12212                           ;PS_2.c: 648: {
 12213                           ;PS_2.c: 649: UARTchar(temp, 0, 0);
 12214  04C8  01F8               	clrf	i1UARTchar@override
 12215  04C9  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12216  04CA  0023               	movlb	3	; select bank3
 12217  04CB  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12218  04CC  319F  27A1  3181   	fcall	i1_UARTchar
 12219                           
 12220                           ;PS_2.c: 650: if(temp == '\r')
 12221  04CF  0023               	movlb	3	; select bank3
 12222  04D0  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12223  04D1  3A0D               	xorlw	13
 12224  04D2  1D03               	skipz
 12225  04D3  2E48               	goto	i1l5549
 12226                           
 12227                           ;PS_2.c: 651: {
 12228                           ;PS_2.c: 652: delayUS(5000);
 12229  04D4  3000               	movlw	0
 12230  04D5  00F3               	movwf	i1delayUS@US+3
 12231  04D6  3000               	movlw	0
 12232  04D7  00F2               	movwf	i1delayUS@US+2
 12233  04D8  3013               	movlw	19
 12234  04D9  00F1               	movwf	i1delayUS@US+1
 12235  04DA  3088               	movlw	136
 12236  04DB  00F0               	movwf	i1delayUS@US
 12237  04DC  319B  2393  3181   	fcall	i1_delayUS
 12238                           
 12239                           ;PS_2.c: 653: UARTchar('\n', 0, 0);
 12240  04DF  01F8               	clrf	i1UARTchar@override
 12241  04E0  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12242  04E1  300A               	movlw	10
 12243  04E2  319F  27A1  3181   	fcall	i1_UARTchar
 12244                           
 12245                           ;PS_2.c: 654: delayUS(10000);
 12246  04E5  3000               	movlw	0
 12247  04E6  00F3               	movwf	i1delayUS@US+3
 12248  04E7  3000               	movlw	0
 12249  04E8  00F2               	movwf	i1delayUS@US+2
 12250  04E9  3027               	movlw	39
 12251  04EA  00F1               	movwf	i1delayUS@US+1
 12252  04EB  3010               	movlw	16
 12253  04EC  00F0               	movwf	i1delayUS@US
 12254  04ED  319B  2393  3181   	fcall	i1_delayUS
 12255  04F0  2E47               	goto	i1l792
 12256  04F1                     i1l5471:	
 12257                           ;PS_2.c: 655: }
 12258                           ;PS_2.c: 656: }
 12259                           
 12260                           
 12261                           ;PS_2.c: 657: else
 12262                           ;PS_2.c: 658: {
 12263                           ;PS_2.c: 659: if(ISNUMBER(temp))
 12264  04F1  0023               	movlb	3	; select bank3
 12265  04F2  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12266  04F3  3199  215F  3181   	fcall	_ISNUMBER
 12267  04F6  3A00               	xorlw	0
 12268  04F7  1903               	skipnz
 12269  04F8  2D38               	goto	i1l5479
 12270                           
 12271                           ;PS_2.c: 660: {
 12272                           ;PS_2.c: 661: BaudTyped*=10;
 12273  04F9  3000               	movlw	0
 12274  04FA  00F3               	movwf	___lmul@multiplier+3
 12275  04FB  3000               	movlw	0
 12276  04FC  00F2               	movwf	___lmul@multiplier+2
 12277  04FD  3000               	movlw	0
 12278  04FE  00F1               	movwf	___lmul@multiplier+1
 12279  04FF  300A               	movlw	10
 12280  0500  00F0               	movwf	___lmul@multiplier
 12281  0501  0021               	movlb	1	; select bank1
 12282  0502  0848               	movf	(_BaudTyped+3)^(0+128),w
 12283  0503  00F7               	movwf	___lmul@multiplicand+3
 12284  0504  0847               	movf	(_BaudTyped+2)^(0+128),w
 12285  0505  00F6               	movwf	___lmul@multiplicand+2
 12286  0506  0846               	movf	(_BaudTyped+1)^(0+128),w
 12287  0507  00F5               	movwf	___lmul@multiplicand+1
 12288  0508  0845               	movf	_BaudTyped^(0+128),w
 12289  0509  00F4               	movwf	___lmul@multiplicand
 12290  050A  319A  22CF  3181   	fcall	___lmul
 12291  050D  0873               	movf	?___lmul+3,w
 12292  050E  0021               	movlb	1	; select bank1
 12293  050F  00C8               	movwf	(_BaudTyped+3)^(0+128)
 12294  0510  0872               	movf	?___lmul+2,w
 12295  0511  00C7               	movwf	(_BaudTyped+2)^(0+128)
 12296  0512  0871               	movf	?___lmul+1,w
 12297  0513  00C6               	movwf	(_BaudTyped+1)^(0+128)
 12298  0514  0870               	movf	?___lmul,w
 12299  0515  00C5               	movwf	_BaudTyped^(0+128)
 12300                           
 12301                           ;PS_2.c: 662: BaudTyped += temp - 48;
 12302  0516  0023               	movlb	3	; select bank3
 12303  0517  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12304  0518  3ED0               	addlw	208
 12305  0519  0021               	movlb	1	; select bank1
 12306  051A  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12307  051B  30FF               	movlw	255
 12308  051C  1803               	skipnc
 12309  051D  3000               	movlw	0
 12310  051E  00BD               	movwf	(??_Process_PS2_ScanCode^(0+128)+1)
 12311  051F  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12312  0520  00BE               	movwf	(??_Process_PS2_ScanCode+2)^(0+128)
 12313  0521  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 12314  0522  00BF               	movwf	((??_Process_PS2_ScanCode+2)^(0+128)+1)
 12315  0523  3000               	movlw	0
 12316  0524  1BBF               	btfsc	((??_Process_PS2_ScanCode+2)^(0+128)+1),7
 12317  0525  30FF               	movlw	255
 12318  0526  00C0               	movwf	((??_Process_PS2_ScanCode+2)^(0+128)+2)
 12319  0527  00C1               	movwf	((??_Process_PS2_ScanCode+2)^(0+128)+3)
 12320  0528  083E               	movf	(??_Process_PS2_ScanCode+2)^(0+128),w
 12321  0529  07C5               	addwf	_BaudTyped^(0+128),f
 12322  052A  083F               	movf	(??_Process_PS2_ScanCode+3)^(0+128),w
 12323  052B  3DC6               	addwfc	(_BaudTyped+1)^(0+128),f
 12324  052C  0840               	movf	(??_Process_PS2_ScanCode+4)^(0+128),w
 12325  052D  3DC7               	addwfc	(_BaudTyped+2)^(0+128),f
 12326  052E  0841               	movf	(??_Process_PS2_ScanCode+5)^(0+128),w
 12327  052F  3DC8               	addwfc	(_BaudTyped+3)^(0+128),f
 12328                           
 12329                           ;PS_2.c: 663: UARTchar(temp, 0, 0);
 12330  0530  01F8               	clrf	i1UARTchar@override
 12331  0531  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12332  0532  0023               	movlb	3	; select bank3
 12333  0533  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12334  0534  319F  27A1  3181   	fcall	i1_UARTchar
 12335  0537  2E47               	goto	i1l792
 12336  0538                     i1l5479:	
 12337                           ;PS_2.c: 664: }
 12338                           
 12339                           
 12340                           ;PS_2.c: 665: else if(temp == 'o' || temp == 'O')
 12341  0538  0023               	movlb	3	; select bank3
 12342  0539  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12343  053A  3A6F               	xorlw	111
 12344  053B  1903               	skipnz
 12345  053C  2D41               	goto	i1l800
 12346  053D  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12347  053E  3A4F               	xorlw	79
 12348  053F  1D03               	skipz
 12349  0540  2D4A               	goto	i1l5485
 12350  0541                     i1l800:	
 12351                           
 12352                           ;PS_2.c: 666: {
 12353                           ;PS_2.c: 667: ParityTyped = 1;
 12354  0541  01EB               	clrf	_ParityTyped^(0+384)
 12355  0542  0AEB               	incf	_ParityTyped^(0+384),f
 12356                           
 12357                           ;PS_2.c: 668: UARTchar(temp, 0, 0);
 12358  0543  01F8               	clrf	i1UARTchar@override
 12359  0544  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12360  0545  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12361  0546  319F  27A1  3181   	fcall	i1_UARTchar
 12362  0549  2E47               	goto	i1l792
 12363  054A                     i1l5485:	
 12364                           ;PS_2.c: 669: }
 12365                           
 12366                           
 12367                           ;PS_2.c: 670: else if(temp == 'e' || temp == 'E')
 12368  054A  0023               	movlb	3	; select bank3
 12369  054B  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12370  054C  3A65               	xorlw	101
 12371  054D  1903               	skipnz
 12372  054E  2D53               	goto	i1l5489
 12373  054F  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12374  0550  3A45               	xorlw	69
 12375  0551  1D03               	skipz
 12376  0552  2D60               	goto	i1l5493
 12377  0553                     i1l5489:	
 12378                           
 12379                           ;PS_2.c: 671: {
 12380                           ;PS_2.c: 672: ParityTyped = 2;
 12381  0553  3002               	movlw	2
 12382  0554  0021               	movlb	1	; select bank1
 12383  0555  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12384  0556  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12385  0557  0023               	movlb	3	; select bank3
 12386  0558  00EB               	movwf	_ParityTyped^(0+384)
 12387                           
 12388                           ;PS_2.c: 673: UARTchar(temp, 0, 0);
 12389  0559  01F8               	clrf	i1UARTchar@override
 12390  055A  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12391  055B  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12392  055C  319F  27A1  3181   	fcall	i1_UARTchar
 12393  055F  2E47               	goto	i1l792
 12394  0560                     i1l5493:	
 12395                           ;PS_2.c: 674: }
 12396                           
 12397                           
 12398                           ;PS_2.c: 675: else if(temp == 'm' || temp == 'M')
 12399  0560  0023               	movlb	3	; select bank3
 12400  0561  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12401  0562  3A6D               	xorlw	109
 12402  0563  1903               	skipnz
 12403  0564  2D69               	goto	i1l5497
 12404  0565  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12405  0566  3A4D               	xorlw	77
 12406  0567  1D03               	skipz
 12407  0568  2D76               	goto	i1l5501
 12408  0569                     i1l5497:	
 12409                           
 12410                           ;PS_2.c: 676: {
 12411                           ;PS_2.c: 677: ParityTyped = 3;
 12412  0569  3003               	movlw	3
 12413  056A  0021               	movlb	1	; select bank1
 12414  056B  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12415  056C  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12416  056D  0023               	movlb	3	; select bank3
 12417  056E  00EB               	movwf	_ParityTyped^(0+384)
 12418                           
 12419                           ;PS_2.c: 678: UARTchar(temp, 0, 0);
 12420  056F  01F8               	clrf	i1UARTchar@override
 12421  0570  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12422  0571  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12423  0572  319F  27A1  3181   	fcall	i1_UARTchar
 12424  0575  2E47               	goto	i1l792
 12425  0576                     i1l5501:	
 12426                           ;PS_2.c: 679: }
 12427                           
 12428                           
 12429                           ;PS_2.c: 680: else if(temp == 's' || temp == 'S')
 12430  0576  0023               	movlb	3	; select bank3
 12431  0577  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12432  0578  3A73               	xorlw	115
 12433  0579  1903               	skipnz
 12434  057A  2D7F               	goto	i1l5505
 12435  057B  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12436  057C  3A53               	xorlw	83
 12437  057D  1D03               	skipz
 12438  057E  2D8C               	goto	i1l5509
 12439  057F                     i1l5505:	
 12440                           
 12441                           ;PS_2.c: 681: {
 12442                           ;PS_2.c: 682: ParityTyped = 4;
 12443  057F  3004               	movlw	4
 12444  0580  0021               	movlb	1	; select bank1
 12445  0581  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12446  0582  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12447  0583  0023               	movlb	3	; select bank3
 12448  0584  00EB               	movwf	_ParityTyped^(0+384)
 12449                           
 12450                           ;PS_2.c: 683: UARTchar(temp, 0, 0);
 12451  0585  01F8               	clrf	i1UARTchar@override
 12452  0586  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12453  0587  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12454  0588  319F  27A1  3181   	fcall	i1_UARTchar
 12455  058B  2E47               	goto	i1l792
 12456  058C                     i1l5509:	
 12457                           ;PS_2.c: 684: }
 12458                           
 12459                           
 12460                           ;PS_2.c: 685: else if(temp == '\r')
 12461  058C  0023               	movlb	3	; select bank3
 12462  058D  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12463  058E  3A0D               	xorlw	13
 12464  058F  1D03               	skipz
 12465  0590  2E48               	goto	i1l5549
 12466                           
 12467                           ;PS_2.c: 686: {
 12468                           ;PS_2.c: 687: UARTstringWAIT("\r\n");
 12469  0591  3043               	movlw	low ((STR_15+16)| (0+32768))
 12470  0592  0020               	movlb	0	; select bank0
 12471  0593  00A1               	movwf	i1UARTstringWAIT@data
 12472  0594  308A               	movlw	high ((STR_15+16)| (0+32768))
 12473  0595  00A2               	movwf	i1UARTstringWAIT@data+1
 12474  0596  319B  232F  3181   	fcall	i1_UARTstringWAIT
 12475                           
 12476                           ;PS_2.c: 688: delayUS(10000);
 12477  0599  3000               	movlw	0
 12478  059A  00F3               	movwf	i1delayUS@US+3
 12479  059B  3000               	movlw	0
 12480  059C  00F2               	movwf	i1delayUS@US+2
 12481  059D  3027               	movlw	39
 12482  059E  00F1               	movwf	i1delayUS@US+1
 12483  059F  3010               	movlw	16
 12484  05A0  00F0               	movwf	i1delayUS@US
 12485  05A1  319B  2393  3181   	fcall	i1_delayUS
 12486                           
 12487                           ;PS_2.c: 689: if(BaudTyped >=2400 && BaudTyped <= 115200)
 12488  05A4  3000               	movlw	0
 12489  05A5  0021               	movlb	1	; select bank1
 12490  05A6  0248               	subwf	(_BaudTyped+3)^(0+128),w
 12491  05A7  1D03               	skipz
 12492  05A8  2DB3               	goto	u696_25
 12493  05A9  3000               	movlw	0
 12494  05AA  0247               	subwf	(_BaudTyped+2)^(0+128),w
 12495  05AB  1D03               	skipz
 12496  05AC  2DB3               	goto	u696_25
 12497  05AD  3009               	movlw	9
 12498  05AE  0246               	subwf	(_BaudTyped+1)^(0+128),w
 12499  05AF  1D03               	skipz
 12500  05B0  2DB3               	goto	u696_25
 12501  05B1  3060               	movlw	96
 12502  05B2  0245               	subwf	_BaudTyped^(0+128),w
 12503  05B3                     u696_25:	
 12504  05B3  1C03               	skipc
 12505  05B4  2E32               	goto	i1l5543
 12506  05B5  3000               	movlw	0
 12507  05B6  0248               	subwf	(_BaudTyped+3)^(0+128),w
 12508  05B7  1D03               	skipz
 12509  05B8  2DC3               	goto	u697_25
 12510  05B9  3001               	movlw	1
 12511  05BA  0247               	subwf	(_BaudTyped+2)^(0+128),w
 12512  05BB  1D03               	skipz
 12513  05BC  2DC3               	goto	u697_25
 12514  05BD  30C2               	movlw	194
 12515  05BE  0246               	subwf	(_BaudTyped+1)^(0+128),w
 12516  05BF  1D03               	skipz
 12517  05C0  2DC3               	goto	u697_25
 12518  05C1  3001               	movlw	1
 12519  05C2  0245               	subwf	_BaudTyped^(0+128),w
 12520  05C3                     u697_25:	
 12521  05C3  1803               	skipnc
 12522  05C4  2E32               	goto	i1l5543
 12523                           
 12524                           ;PS_2.c: 690: {
 12525                           ;PS_2.c: 691: sprintf(buf,"KeyBoard Baud will be set to %lu",BaudTyped);
 12526  05C5  30A0               	movlw	low Process_PS2_ScanCode@buf
 12527  05C6  0020               	movlb	0	; select bank0
 12528  05C7  00AA               	movwf	i1sprintf@sp
 12529  05C8  3001               	movlw	high Process_PS2_ScanCode@buf
 12530  05C9  00AB               	movwf	i1sprintf@sp+1
 12531  05CA  3095               	movlw	low (STR_19| (0+32768))
 12532  05CB  00AC               	movwf	i1sprintf@f
 12533  05CC  3089               	movlw	high (STR_19| (0+32768))
 12534  05CD  00AD               	movwf	i1sprintf@f+1
 12535  05CE  0021               	movlb	1	; select bank1
 12536  05CF  0848               	movf	(_BaudTyped+3)^(0+128),w
 12537  05D0  0020               	movlb	0	; select bank0
 12538  05D1  00B1               	movwf	?i1_sprintf+7
 12539  05D2  0021               	movlb	1	; select bank1
 12540  05D3  0847               	movf	(_BaudTyped+2)^(0+128),w
 12541  05D4  0020               	movlb	0	; select bank0
 12542  05D5  00B0               	movwf	?i1_sprintf+6
 12543  05D6  0021               	movlb	1	; select bank1
 12544  05D7  0846               	movf	(_BaudTyped+1)^(0+128),w
 12545  05D8  0020               	movlb	0	; select bank0
 12546  05D9  00AF               	movwf	?i1_sprintf+5
 12547  05DA  0021               	movlb	1	; select bank1
 12548  05DB  0845               	movf	_BaudTyped^(0+128),w
 12549  05DC  0020               	movlb	0	; select bank0
 12550  05DD  00AE               	movwf	?i1_sprintf+4
 12551  05DE  3196  2614  3181   	fcall	i1_sprintf
 12552                           
 12553                           ;PS_2.c: 692: UARTstringWAIT(buf);
 12554  05E1  30A0               	movlw	low Process_PS2_ScanCode@buf
 12555  05E2  0020               	movlb	0	; select bank0
 12556  05E3  00A1               	movwf	i1UARTstringWAIT@data
 12557  05E4  3001               	movlw	high Process_PS2_ScanCode@buf
 12558  05E5  00A2               	movwf	i1UARTstringWAIT@data+1
 12559  05E6  319B  232F  3181   	fcall	i1_UARTstringWAIT
 12560                           
 12561                           ;PS_2.c: 693: if(ParityTyped)
 12562  05E9  0023               	movlb	3	; select bank3
 12563  05EA  086B               	movf	_ParityTyped^(0+384),w
 12564  05EB  1903               	btfsc	3,2
 12565  05EC  2E0F               	goto	i1l5539
 12566                           
 12567                           ;PS_2.c: 694: {
 12568                           ;PS_2.c: 695: switch (ParityTyped)
 12569  05ED  2E02               	goto	i1l5537
 12570  05EE                     i1l5527:	
 12571                           ;PS_2.c: 696: {
 12572                           ;PS_2.c: 697: case 1:
 12573                           
 12574                           
 12575                           ;PS_2.c: 698: UARTstringWAIT(OddParityMSG);
 12576  05EE  3011               	movlw	low (_OddParityMSG| (0+32768))
 12577  05EF  0020               	movlb	0	; select bank0
 12578  05F0  00A1               	movwf	i1UARTstringWAIT@data
 12579  05F1  3089               	movlw	high (_OddParityMSG| (0+32768))
 12580  05F2  2E13               	goto	L15
 12581  05F3                     i1l5529:	
 12582                           ;PS_2.c: 700: case 2:
 12583                           
 12584                           ;PS_2.c: 699: break;
 12585                           
 12586                           
 12587                           ;PS_2.c: 701: UARTstringWAIT(EvenParityMSG);
 12588  05F3  30FB               	movlw	low (_EvenParityMSG| (0+32768))
 12589  05F4  0020               	movlb	0	; select bank0
 12590  05F5  00A1               	movwf	i1UARTstringWAIT@data
 12591  05F6  3088               	movlw	high (_EvenParityMSG| (0+32768))
 12592  05F7  2E13               	goto	L15
 12593  05F8                     i1l5531:	
 12594                           ;PS_2.c: 703: case 3:
 12595                           
 12596                           ;PS_2.c: 702: break;
 12597                           
 12598                           
 12599                           ;PS_2.c: 704: UARTstringWAIT(MarkParityMSG);
 12600  05F8  304A               	movlw	low (_MarkParityMSG| (0+32768))
 12601  05F9  0020               	movlb	0	; select bank0
 12602  05FA  00A1               	movwf	i1UARTstringWAIT@data
 12603  05FB  3089               	movlw	high (_MarkParityMSG| (0+32768))
 12604  05FC  2E13               	goto	L15
 12605  05FD                     i1l5533:	
 12606                           ;PS_2.c: 706: default:
 12607                           
 12608                           ;PS_2.c: 705: break;
 12609                           
 12610                           
 12611                           ;PS_2.c: 707: UARTstringWAIT(SpaceParityMSG);
 12612  05FD  303A               	movlw	low (_SpaceParityMSG| (0+32768))
 12613  05FE  0020               	movlb	0	; select bank0
 12614  05FF  00A1               	movwf	i1UARTstringWAIT@data
 12615  0600  3089               	movlw	high (_SpaceParityMSG| (0+32768))
 12616  0601  2E13               	goto	L15
 12617  0602                     i1l5537:	
 12618                           ;PS_2.c: 709: }
 12619                           
 12620                           ;PS_2.c: 708: break;
 12621                           
 12622  0602  0023               	movlb	3	; select bank3
 12623  0603  086B               	movf	_ParityTyped^(0+384),w
 12624                           
 12625                           ; Switch size 1, requested type "space"
 12626                           ; Number of cases is 3, Range of values is 1 to 3
 12627                           ; switch strategies available:
 12628                           ; Name         Instructions Cycles
 12629                           ; simple_byte           10     6 (average)
 12630                           ; direct_byte           15     9 (fixed)
 12631                           ; jumptable            263     9 (fixed)
 12632                           ;	Chosen strategy is simple_byte
 12633  0604  3A01               	xorlw	1	; case 1
 12634  0605  1903               	skipnz
 12635  0606  2DEE               	goto	i1l5527
 12636  0607  3A03               	xorlw	3	; case 2
 12637  0608  1903               	skipnz
 12638  0609  2DF3               	goto	i1l5529
 12639  060A  3A01               	xorlw	1	; case 3
 12640  060B  1903               	skipnz
 12641  060C  2DF8               	goto	i1l5531
 12642  060D  2DFD               	goto	i1l5533
 12643                           
 12644                           ;PS_2.c: 710: }
 12645  060E  2E17               	goto	i1l823
 12646  060F                     i1l5539:	
 12647                           
 12648                           ;PS_2.c: 711: else
 12649                           ;PS_2.c: 712: {
 12650                           ;PS_2.c: 713: UARTstringWAIT(NoParityMSG);
 12651  060F  3026               	movlw	low (_NoParityMSG| (0+32768))
 12652  0610  0020               	movlb	0	; select bank0
 12653  0611  00A1               	movwf	i1UARTstringWAIT@data
 12654  0612  3089               	movlw	high (_NoParityMSG| (0+32768))
 12655  0613                     L15:	
 12656  0613  00A2               	movwf	i1UARTstringWAIT@data+1
 12657  0614  319B  232F  3181   	fcall	i1_UARTstringWAIT
 12658  0617                     i1l823:	
 12659                           
 12660                           ;PS_2.c: 714: }
 12661                           ;PS_2.c: 715: UARTstringWAIT("\r\n");
 12662  0617  3043               	movlw	low ((STR_15+16)| (0+32768))
 12663  0618  0020               	movlb	0	; select bank0
 12664  0619  00A1               	movwf	i1UARTstringWAIT@data
 12665  061A  308A               	movlw	high ((STR_15+16)| (0+32768))
 12666  061B  00A2               	movwf	i1UARTstringWAIT@data+1
 12667  061C  319B  232F  3181   	fcall	i1_UARTstringWAIT
 12668                           
 12669                           ;PS_2.c: 716: SetBaud(BaudTyped, ParityTyped);
 12670  061F  0021               	movlb	1	; select bank1
 12671  0620  0848               	movf	(_BaudTyped+3)^(0+128),w
 12672  0621  00B2               	movwf	(SetBaud@Baud+3)^(0+128)
 12673  0622  0847               	movf	(_BaudTyped+2)^(0+128),w
 12674  0623  00B1               	movwf	(SetBaud@Baud+2)^(0+128)
 12675  0624  0846               	movf	(_BaudTyped+1)^(0+128),w
 12676  0625  00B0               	movwf	(SetBaud@Baud+1)^(0+128)
 12677  0626  0845               	movf	_BaudTyped^(0+128),w
 12678  0627  00AF               	movwf	SetBaud@Baud^(0+128)
 12679  0628  0023               	movlb	3	; select bank3
 12680  0629  086B               	movf	_ParityTyped^(0+384),w
 12681  062A  0021               	movlb	1	; select bank1
 12682  062B  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12683  062C  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12684  062D  00B3               	movwf	SetBaud@Parity^(0+128)
 12685  062E  318C  24F6  3181   	fcall	_SetBaud
 12686                           
 12687                           ;PS_2.c: 717: }
 12688  0631  2E45               	goto	i1l5547
 12689  0632                     i1l5543:	
 12690                           
 12691                           ;PS_2.c: 718: else
 12692                           ;PS_2.c: 719: {
 12693                           ;PS_2.c: 720: UARTstringWAIT("KeyBoard Baud Out of Range\r\n");
 12694  0632  30B6               	movlw	low (STR_21| (0+32768))
 12695  0633  0020               	movlb	0	; select bank0
 12696  0634  00A1               	movwf	i1UARTstringWAIT@data
 12697  0635  3089               	movlw	high (STR_21| (0+32768))
 12698  0636  00A2               	movwf	i1UARTstringWAIT@data+1
 12699  0637  319B  232F  3181   	fcall	i1_UARTstringWAIT
 12700                           
 12701                           ;PS_2.c: 721: delayUS(10000);
 12702  063A  3000               	movlw	0
 12703  063B  00F3               	movwf	i1delayUS@US+3
 12704  063C  3000               	movlw	0
 12705  063D  00F2               	movwf	i1delayUS@US+2
 12706  063E  3027               	movlw	39
 12707  063F  00F1               	movwf	i1delayUS@US+1
 12708  0640  3010               	movlw	16
 12709  0641  00F0               	movwf	i1delayUS@US
 12710  0642  319B  2393  3181   	fcall	i1_delayUS
 12711  0645                     i1l5547:	
 12712                           
 12713                           ;PS_2.c: 722: }
 12714                           ;PS_2.c: 723: BAUDMODE=0;
 12715  0645  0021               	movlb	1	; select bank1
 12716  0646  01CB               	clrf	_BAUDMODE^(0+128)
 12717  0647                     i1l792:	
 12718  0647  0023               	movlb	3	; select bank3
 12719  0648                     i1l5549:	
 12720                           
 12721                           ;PS_2.c: 724: }
 12722                           ;PS_2.c: 725: }
 12723                           ;PS_2.c: 726: }
 12724                           ;PS_2.c: 727: }
 12725                           ;PS_2.c: 730: temp =0;
 12726  0648  0023               	movlb	3	; select bank3
 12727  0649  01E0               	clrf	Process_PS2_ScanCode@temp^(0+384)
 12728                           
 12729                           ;PS_2.c: 731: PS_2_Read_Data_First =0;
 12730  064A  01E1               	clrf	_PS_2_Read_Data_First^(0+384)
 12731  064B  01E2               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
 12732                           
 12733                           ;PS_2.c: 732: PS_2_Read_Data_Second =0;
 12734  064C  01E3               	clrf	_PS_2_Read_Data_Second^(0+384)
 12735  064D  01E4               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
 12736                           
 12737                           ;PS_2.c: 733: PS_2_Read_Data_Third =0;
 12738  064E  01E5               	clrf	_PS_2_Read_Data_Third^(0+384)
 12739  064F  01E6               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
 12740                           
 12741                           ;PS_2.c: 734: Caps_Lock_Key_old = Caps_Lock_Key;
 12742  0650  0021               	movlb	1	; select bank1
 12743  0651  084C               	movf	_Caps_Lock_Key^(0+128),w
 12744  0652  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12745  0653  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12746  0654  00CD               	movwf	_Caps_Lock_Key_old^(0+128)
 12747                           
 12748                           ;PS_2.c: 735: Right_Shift_Key_old = Right_Shift_Key;
 12749  0655  0023               	movlb	3	; select bank3
 12750  0656  086E               	movf	_Right_Shift_Key^(0+384),w
 12751  0657  0021               	movlb	1	; select bank1
 12752  0658  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12753  0659  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12754  065A  00D4               	movwf	_Right_Shift_Key_old^(0+128)
 12755                           
 12756                           ;PS_2.c: 736: Left_Shift_Key_old = Left_Shift_Key;
 12757  065B  0023               	movlb	3	; select bank3
 12758  065C  086A               	movf	_Left_Shift_Key^(0+384),w
 12759  065D  0021               	movlb	1	; select bank1
 12760  065E  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12761  065F  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12762  0660  00D0               	movwf	_Left_Shift_Key_old^(0+128)
 12763                           
 12764                           ;PS_2.c: 737: LATC &= ~0b00010000;
 12765  0661  30EF               	movlw	239
 12766  0662  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12767  0663  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12768  0664  0022               	movlb	2	; select bank2
 12769  0665  058E               	andwf	14,f	;volatile
 12770                           
 12771                           ;PS_2.c: 738: }
 12772  0666  2921               	goto	i1l5569
 12773  0667                     i1l5565:	
 12774                           
 12775                           ;PS_2.c: 739: else
 12776                           ;PS_2.c: 740: {
 12777                           ;PS_2.c: 742: cleanBuffer(PS_2_ScanCodes, 12);
 12778  0667  300C               	movlw	12
 12779  0668  00F0               	movwf	cleanBuffer@count
 12780  0669  3000               	movlw	0
 12781  066A  00F1               	movwf	cleanBuffer@count+1
 12782  066B  30D6               	movlw	_PS_2_ScanCodes& (0+255)
 12783  066C  319A  220B  3181   	fcall	_cleanBuffer
 12784                           
 12785                           ;PS_2.c: 743: PS_2_Buffer_items = 0;
 12786  066F  0021               	movlb	1	; select bank1
 12787  0670  01D1               	clrf	_PS_2_Buffer_items^(0+128)
 12788  0671  2921               	goto	i1l5569
 12789  0672                     __end_of_Process_PS2_ScanCode:	
 12790                           
 12791                           	psect	text42
 12792  1A0B                     __ptext42:	
 12793 ;; *************** function _cleanBuffer *****************
 12794 ;; Defined at:
 12795 ;;		line 159 in file "MISC.c"
 12796 ;; Parameters:    Size  Location     Type
 12797 ;;  data            1    wreg     PTR unsigned char 
 12798 ;;		 -> PS_2_ScanCodes(12), 
 12799 ;;  count           2    0[COMMON] int 
 12800 ;; Auto vars:     Size  Location     Type
 12801 ;;  data            1    3[COMMON] PTR unsigned char 
 12802 ;;		 -> PS_2_ScanCodes(12), 
 12803 ;;  i               1    4[COMMON] unsigned char 
 12804 ;; Return value:  Size  Location     Type
 12805 ;;		None               void
 12806 ;; Registers used:
 12807 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12808 ;; Tracked objects:
 12809 ;;		On entry : 0/0
 12810 ;;		On exit  : 0/0
 12811 ;;		Unchanged: 0/0
 12812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12813 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12814 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12815 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12816 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12817 ;;Total ram usage:        5 bytes
 12818 ;; Hardware stack levels used:    1
 12819 ;; This function calls:
 12820 ;;		Nothing
 12821 ;; This function is called by:
 12822 ;;		_Process_PS2_ScanCode
 12823 ;; This function uses a non-reentrant model
 12824 ;;
 12825                           
 12826                           
 12827                           ;psect for function _cleanBuffer
 12828  1A0B                     _cleanBuffer:	
 12829                           
 12830                           ;incstack = 0
 12831                           ; Regs used in _cleanBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
 12832                           ;cleanBuffer@data stored from wreg
 12833  1A0B  00F3               	movwf	cleanBuffer@data
 12834                           
 12835                           ;MISC.c: 161: unsigned char i=0;
 12836  1A0C  01F4               	clrf	cleanBuffer@i
 12837                           
 12838                           ;MISC.c: 162: for(i=0; i<count;i++)
 12839  1A0D  01F4               	clrf	cleanBuffer@i
 12840  1A0E                     i1l4613:	
 12841  1A0E  0871               	movf	cleanBuffer@count+1,w
 12842  1A0F  3A80               	xorlw	128
 12843  1A10  3C80               	sublw	128
 12844  1A11  1D03               	skipz
 12845  1A12  2A15               	goto	u520_25
 12846  1A13  0870               	movf	cleanBuffer@count,w
 12847  1A14  0274               	subwf	cleanBuffer@i,w
 12848  1A15                     u520_25:	
 12849  1A15  1803               	btfsc	3,0
 12850  1A16  0008               	return
 12851                           
 12852                           ;MISC.c: 163: {
 12853                           ;MISC.c: 164: data[i]= 0;
 12854  1A17  0874               	movf	cleanBuffer@i,w
 12855  1A18  0773               	addwf	cleanBuffer@data,w
 12856  1A19  00F2               	movwf	??_cleanBuffer
 12857  1A1A  0872               	movf	??_cleanBuffer,w
 12858  1A1B  0086               	movwf	6
 12859  1A1C  0187               	clrf	7
 12860  1A1D  0181               	clrf	1
 12861  1A1E  3001               	movlw	1
 12862  1A1F  00F2               	movwf	??_cleanBuffer
 12863  1A20  0872               	movf	??_cleanBuffer,w
 12864  1A21  07F4               	addwf	cleanBuffer@i,f
 12865  1A22  2A0E               	goto	i1l4613
 12866  1A23                     __end_of_cleanBuffer:	
 12867                           
 12868                           	psect	text43
 12869  1ACF                     __ptext43:	
 12870 ;; *************** function ___lmul *****************
 12871 ;; Defined at:
 12872 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul32.c"
 12873 ;; Parameters:    Size  Location     Type
 12874 ;;  multiplier      4    0[COMMON] unsigned long 
 12875 ;;  multiplicand    4    4[COMMON] unsigned long 
 12876 ;; Auto vars:     Size  Location     Type
 12877 ;;  product         4    8[COMMON] unsigned long 
 12878 ;; Return value:  Size  Location     Type
 12879 ;;                  4    0[COMMON] unsigned long 
 12880 ;; Registers used:
 12881 ;;		wreg, status,2, status,0
 12882 ;; Tracked objects:
 12883 ;;		On entry : 0/0
 12884 ;;		On exit  : 0/0
 12885 ;;		Unchanged: 0/0
 12886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12887 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12888 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12890 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12891 ;;Total ram usage:       12 bytes
 12892 ;; Hardware stack levels used:    1
 12893 ;; This function calls:
 12894 ;;		Nothing
 12895 ;; This function is called by:
 12896 ;;		_Process_PS2_ScanCode
 12897 ;; This function uses a non-reentrant model
 12898 ;;
 12899                           
 12900                           
 12901                           ;psect for function ___lmul
 12902  1ACF                     ___lmul:	
 12903                           
 12904                           ;incstack = 0
 12905                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 12906  1ACF  3000               	movlw	0
 12907  1AD0  00FB               	movwf	___lmul@product+3
 12908  1AD1  3000               	movlw	0
 12909  1AD2  00FA               	movwf	___lmul@product+2
 12910  1AD3  3000               	movlw	0
 12911  1AD4  00F9               	movwf	___lmul@product+1
 12912  1AD5  3000               	movlw	0
 12913  1AD6  00F8               	movwf	___lmul@product
 12914  1AD7                     i1l4943:	
 12915  1AD7  1C70               	btfss	___lmul@multiplier,0
 12916  1AD8  2AE1               	goto	i1l4947
 12917  1AD9  0874               	movf	___lmul@multiplicand,w
 12918  1ADA  07F8               	addwf	___lmul@product,f
 12919  1ADB  0875               	movf	___lmul@multiplicand+1,w
 12920  1ADC  3DF9               	addwfc	___lmul@product+1,f
 12921  1ADD  0876               	movf	___lmul@multiplicand+2,w
 12922  1ADE  3DFA               	addwfc	___lmul@product+2,f
 12923  1ADF  0877               	movf	___lmul@multiplicand+3,w
 12924  1AE0  3DFB               	addwfc	___lmul@product+3,f
 12925  1AE1                     i1l4947:	
 12926  1AE1  3001               	movlw	1
 12927  1AE2                     u563_25:	
 12928  1AE2  35F4               	lslf	___lmul@multiplicand,f
 12929  1AE3  0DF5               	rlf	___lmul@multiplicand+1,f
 12930  1AE4  0DF6               	rlf	___lmul@multiplicand+2,f
 12931  1AE5  0DF7               	rlf	___lmul@multiplicand+3,f
 12932  1AE6  0B89               	decfsz	9,f
 12933  1AE7  2AE2               	goto	u563_25
 12934  1AE8  3001               	movlw	1
 12935  1AE9                     u564_25:	
 12936  1AE9  36F3               	lsrf	___lmul@multiplier+3,f
 12937  1AEA  0CF2               	rrf	___lmul@multiplier+2,f
 12938  1AEB  0CF1               	rrf	___lmul@multiplier+1,f
 12939  1AEC  0CF0               	rrf	___lmul@multiplier,f
 12940  1AED  0B89               	decfsz	9,f
 12941  1AEE  2AE9               	goto	u564_25
 12942  1AEF  0873               	movf	___lmul@multiplier+3,w
 12943  1AF0  0472               	iorwf	___lmul@multiplier+2,w
 12944  1AF1  0471               	iorwf	___lmul@multiplier+1,w
 12945  1AF2  0470               	iorwf	___lmul@multiplier,w
 12946  1AF3  1D03               	skipz
 12947  1AF4  2AD7               	goto	i1l4943
 12948  1AF5  087B               	movf	___lmul@product+3,w
 12949  1AF6  00F3               	movwf	?___lmul+3
 12950  1AF7  087A               	movf	___lmul@product+2,w
 12951  1AF8  00F2               	movwf	?___lmul+2
 12952  1AF9  0879               	movf	___lmul@product+1,w
 12953  1AFA  00F1               	movwf	?___lmul+1
 12954  1AFB  0878               	movf	___lmul@product,w
 12955  1AFC  00F0               	movwf	?___lmul
 12956  1AFD  0008               	return
 12957  1AFE                     __end_of___lmul:	
 12958                           
 12959                           	psect	text44
 12960  06DA                     __ptext44:	
 12961 ;; *************** function _UART_send_break_timed *****************
 12962 ;; Defined at:
 12963 ;;		line 334 in file "UART.c"
 12964 ;; Parameters:    Size  Location     Type
 12965 ;;  US              2   10[COMMON] unsigned int 
 12966 ;; Auto vars:     Size  Location     Type
 12967 ;;		None
 12968 ;; Return value:  Size  Location     Type
 12969 ;;		None               void
 12970 ;; Registers used:
 12971 ;;		wreg, status,2, status,0, pclath, cstack
 12972 ;; Tracked objects:
 12973 ;;		On entry : 0/0
 12974 ;;		On exit  : 0/0
 12975 ;;		Unchanged: 0/0
 12976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12977 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12979 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12980 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12981 ;;Total ram usage:        3 bytes
 12982 ;; Hardware stack levels used:    1
 12983 ;; Hardware stack levels required when called:    1
 12984 ;; This function calls:
 12985 ;;		i1_delayUS
 12986 ;; This function is called by:
 12987 ;;		_isr
 12988 ;;		_Process_PS2_ScanCode
 12989 ;; This function uses a non-reentrant model
 12990 ;;
 12991                           
 12992                           
 12993                           ;psect for function _UART_send_break_timed
 12994  06DA                     _UART_send_break_timed:	
 12995                           
 12996                           ;UART.c: 337: LATC |= 0b00000100;
 12997                           
 12998                           ;incstack = 0
 12999                           ; Regs used in _UART_send_break_timed: [wreg+status,2+status,0+pclath+cstack]
 13000  06DA  0022               	movlb	2	; select bank2
 13001  06DB  150E               	bsf	14,2	;volatile
 13002                           
 13003                           ;UART.c: 338: PPSLOCK =0;
 13004  06DC  003C               	movlb	28	; select bank28
 13005  06DD  018F               	clrf	15	;volatile
 13006                           
 13007                           ;UART.c: 339: RC2PPS = 0b00000000;
 13008  06DE  003D               	movlb	29	; select bank29
 13009  06DF  01A2               	clrf	34	;volatile
 13010                           
 13011                           ;UART.c: 340: PPSLOCK =1;
 13012  06E0  3001               	movlw	1
 13013  06E1  003C               	movlb	28	; select bank28
 13014  06E2  008F               	movwf	15	;volatile
 13015                           
 13016                           ;UART.c: 342: LATC &= ~0b00000100;
 13017  06E3  30FB               	movlw	251
 13018  06E4  00FC               	movwf	??_UART_send_break_timed
 13019  06E5  087C               	movf	??_UART_send_break_timed,w
 13020  06E6  0022               	movlb	2	; select bank2
 13021  06E7  058E               	andwf	14,f	;volatile
 13022                           
 13023                           ;UART.c: 343: delayUS(US);
 13024  06E8  087A               	movf	UART_send_break_timed@US,w
 13025  06E9  00F0               	movwf	i1delayUS@US
 13026  06EA  087B               	movf	UART_send_break_timed@US+1,w
 13027  06EB  00F1               	movwf	i1delayUS@US+1
 13028  06EC  01F2               	clrf	i1delayUS@US+2
 13029  06ED  01F3               	clrf	i1delayUS@US+3
 13030  06EE  319B  2393         	fcall	i1_delayUS
 13031                           
 13032                           ;UART.c: 344: LATC |= 0b00000100;
 13033  06F0  0022               	movlb	2	; select bank2
 13034  06F1  150E               	bsf	14,2	;volatile
 13035                           
 13036                           ;UART.c: 346: PPSLOCK =0;
 13037  06F2  003C               	movlb	28	; select bank28
 13038  06F3  018F               	clrf	15	;volatile
 13039                           
 13040                           ;UART.c: 347: RC2PPS = 0b00010100;
 13041  06F4  3014               	movlw	20
 13042  06F5  003D               	movlb	29	; select bank29
 13043  06F6  00A2               	movwf	34	;volatile
 13044                           
 13045                           ;UART.c: 348: CKPPS = 0b00010010;
 13046  06F7  3012               	movlw	18
 13047  06F8  003C               	movlb	28	; select bank28
 13048  06F9  00A5               	movwf	37	;volatile
 13049                           
 13050                           ;UART.c: 350: RXPPS = 0b00010101;
 13051  06FA  3015               	movlw	21
 13052  06FB  00A4               	movwf	36	;volatile
 13053                           
 13054                           ;UART.c: 352: PPSLOCK =1;
 13055  06FC  3001               	movlw	1
 13056  06FD  008F               	movwf	15	;volatile
 13057  06FE  0008               	return
 13058  06FF                     __end_of_UART_send_break_timed:	
 13059                           
 13060                           	psect	text45
 13061  18B2                     __ptext45:	
 13062 ;; *************** function _UART_send_break *****************
 13063 ;; Defined at:
 13064 ;;		line 322 in file "UART.c"
 13065 ;; Parameters:    Size  Location     Type
 13066 ;;		None
 13067 ;; Auto vars:     Size  Location     Type
 13068 ;;		None
 13069 ;; Return value:  Size  Location     Type
 13070 ;;		None               void
 13071 ;; Registers used:
 13072 ;;		wreg
 13073 ;; Tracked objects:
 13074 ;;		On entry : 0/0
 13075 ;;		On exit  : 0/0
 13076 ;;		Unchanged: 0/0
 13077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13081 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13082 ;;Total ram usage:        0 bytes
 13083 ;; Hardware stack levels used:    1
 13084 ;; This function calls:
 13085 ;;		Nothing
 13086 ;; This function is called by:
 13087 ;;		_Process_PS2_ScanCode
 13088 ;; This function uses a non-reentrant model
 13089 ;;
 13090                           
 13091                           
 13092                           ;psect for function _UART_send_break
 13093  18B2                     _UART_send_break:	
 13094                           
 13095                           ;UART.c: 324: TX1STA |= 0b00001000;
 13096                           
 13097                           ;incstack = 0
 13098                           ; Regs used in _UART_send_break: [wreg]
 13099  18B2  0023               	movlb	3	; select bank3
 13100  18B3  159E               	bsf	30,3	;volatile
 13101                           
 13102                           ;UART.c: 325: TXREG = 'd';
 13103  18B4  3064               	movlw	100
 13104  18B5  009A               	movwf	26	;volatile
 13105  18B6  0008               	return
 13106  18B7                     __end_of_UART_send_break:	
 13107                           
 13108                           	psect	text46
 13109  0CF6                     __ptext46:	
 13110 ;; *************** function _SetBaud *****************
 13111 ;; Defined at:
 13112 ;;		line 380 in file "UART.c"
 13113 ;; Parameters:    Size  Location     Type
 13114 ;;  Baud            4   15[BANK1 ] unsigned long 
 13115 ;;  Parity          1   19[BANK1 ] unsigned char 
 13116 ;; Auto vars:     Size  Location     Type
 13117 ;;  buf            50    0[BANK2 ] unsigned char [50]
 13118 ;;  temp            4   58[BANK2 ] unsigned long 
 13119 ;;  Paritytemp      4   54[BANK2 ] unsigned long 
 13120 ;;  Baudtemp        4   50[BANK2 ] unsigned long 
 13121 ;;  i               1   62[BANK2 ] unsigned char 
 13122 ;; Return value:  Size  Location     Type
 13123 ;;		None               void
 13124 ;; Registers used:
 13125 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13126 ;; Tracked objects:
 13127 ;;		On entry : 0/0
 13128 ;;		On exit  : 0/0
 13129 ;;		Unchanged: 0/0
 13130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13131 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 13132 ;;      Locals:         0       0       0      63       0       0       0       0       0       0       0       0       
      +0       0
 13133 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
 13134 ;;      Totals:         0       0      13      63       0       0       0       0       0       0       0       0       
      +0       0
 13135 ;;Total ram usage:       76 bytes
 13136 ;; Hardware stack levels used:    1
 13137 ;; Hardware stack levels required when called:    4
 13138 ;; This function calls:
 13139 ;;		_WriteBaud
 13140 ;;		i1_InitUART
 13141 ;;		i1_ReadBaud
 13142 ;;		i1_UARTstringWAIT
 13143 ;;		i1_delayUS
 13144 ;;		i1_sprintf
 13145 ;; This function is called by:
 13146 ;;		_Process_PS2_ScanCode
 13147 ;; This function uses a non-reentrant model
 13148 ;;
 13149                           
 13150                           
 13151                           ;psect for function _SetBaud
 13152  0CF6                     _SetBaud:	
 13153                           
 13154                           ;UART.c: 382: unsigned char buf[50];
 13155                           ;UART.c: 383: unsigned long Baudtemp=0;
 13156                           
 13157                           ;incstack = 0
 13158                           ; Regs used in _SetBaud: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13159  0CF6  3000               	movlw	0
 13160  0CF7  0022               	movlb	2	; select bank2
 13161  0CF8  00D5               	movwf	(SetBaud@Baudtemp+3)^(0+256)
 13162  0CF9  3000               	movlw	0
 13163  0CFA  00D4               	movwf	(SetBaud@Baudtemp+2)^(0+256)
 13164  0CFB  3000               	movlw	0
 13165  0CFC  00D3               	movwf	(SetBaud@Baudtemp+1)^(0+256)
 13166  0CFD  3000               	movlw	0
 13167  0CFE  00D2               	movwf	SetBaud@Baudtemp^(0+256)
 13168                           
 13169                           ;UART.c: 384: unsigned long Paritytemp=0;
 13170  0CFF  3000               	movlw	0
 13171  0D00  00D9               	movwf	(SetBaud@Paritytemp+3)^(0+256)
 13172  0D01  3000               	movlw	0
 13173  0D02  00D8               	movwf	(SetBaud@Paritytemp+2)^(0+256)
 13174  0D03  3000               	movlw	0
 13175  0D04  00D7               	movwf	(SetBaud@Paritytemp+1)^(0+256)
 13176  0D05  3000               	movlw	0
 13177  0D06  00D6               	movwf	SetBaud@Paritytemp^(0+256)
 13178                           
 13179                           ;UART.c: 385: unsigned long temp;
 13180                           ;UART.c: 386: unsigned char i =0;
 13181  0D07  01DE               	clrf	SetBaud@i^(0+256)
 13182                           
 13183                           ;UART.c: 388: WriteBaud((0x1800 >> 5), Baud, Parity);
 13184  0D08  30C0               	movlw	192
 13185  0D09  0021               	movlb	1	; select bank1
 13186  0D0A  00A0               	movwf	WriteBaud@row^(0+128)
 13187  0D0B  3000               	movlw	0
 13188  0D0C  00A1               	movwf	(WriteBaud@row^(0+128)+1)
 13189  0D0D  0832               	movf	(SetBaud@Baud+3)^(0+128),w
 13190  0D0E  00A5               	movwf	(WriteBaud@Baud+3)^(0+128)
 13191  0D0F  0831               	movf	(SetBaud@Baud+2)^(0+128),w
 13192  0D10  00A4               	movwf	(WriteBaud@Baud+2)^(0+128)
 13193  0D11  0830               	movf	(SetBaud@Baud+1)^(0+128),w
 13194  0D12  00A3               	movwf	(WriteBaud@Baud+1)^(0+128)
 13195  0D13  082F               	movf	SetBaud@Baud^(0+128),w
 13196  0D14  00A2               	movwf	WriteBaud@Baud^(0+128)
 13197  0D15  0833               	movf	SetBaud@Parity^(0+128),w
 13198  0D16  00B4               	movwf	??_SetBaud^(0+128)
 13199  0D17  0834               	movf	??_SetBaud^(0+128),w
 13200  0D18  00A6               	movwf	WriteBaud@Parity^(0+128)
 13201  0D19  3186  2672  318C   	fcall	_WriteBaud
 13202                           
 13203                           ;UART.c: 389: temp = ReadBaud((0x1800 >> 5), 0);
 13204  0D1C  30C0               	movlw	192
 13205  0D1D  0020               	movlb	0	; select bank0
 13206  0D1E  00A4               	movwf	i1ReadBaud@row
 13207  0D1F  3000               	movlw	0
 13208  0D20  00A5               	movwf	i1ReadBaud@row+1
 13209  0D21  01A6               	clrf	i1ReadBaud@column
 13210  0D22  3191  2149  318C   	fcall	i1_ReadBaud
 13211  0D25  0020               	movlb	0	; select bank0
 13212  0D26  0827               	movf	?i1_ReadBaud+3,w
 13213  0D27  0022               	movlb	2	; select bank2
 13214  0D28  00DD               	movwf	(SetBaud@temp+3)^(0+256)
 13215  0D29  0020               	movlb	0	; select bank0
 13216  0D2A  0826               	movf	?i1_ReadBaud+2,w
 13217  0D2B  0022               	movlb	2	; select bank2
 13218  0D2C  00DC               	movwf	(SetBaud@temp+2)^(0+256)
 13219  0D2D  0020               	movlb	0	; select bank0
 13220  0D2E  0825               	movf	?i1_ReadBaud+1,w
 13221  0D2F  0022               	movlb	2	; select bank2
 13222  0D30  00DB               	movwf	(SetBaud@temp+1)^(0+256)
 13223  0D31  0020               	movlb	0	; select bank0
 13224  0D32  0824               	movf	?i1_ReadBaud,w
 13225  0D33  0022               	movlb	2	; select bank2
 13226  0D34  00DA               	movwf	SetBaud@temp^(0+256)
 13227                           
 13228                           ;UART.c: 390: Baudtemp = temp & 0x000FFFFF;
 13229  0D35  30FF               	movlw	255
 13230  0D36  055A               	andwf	SetBaud@temp^(0+256),w
 13231  0D37  00D2               	movwf	SetBaud@Baudtemp^(0+256)
 13232  0D38  30FF               	movlw	255
 13233  0D39  055B               	andwf	(SetBaud@temp+1)^(0+256),w
 13234  0D3A  00D3               	movwf	(SetBaud@Baudtemp+1)^(0+256)
 13235  0D3B  300F               	movlw	15
 13236  0D3C  055C               	andwf	(SetBaud@temp+2)^(0+256),w
 13237  0D3D  00D4               	movwf	(SetBaud@Baudtemp+2)^(0+256)
 13238  0D3E  3000               	movlw	0
 13239  0D3F  055D               	andwf	(SetBaud@temp+3)^(0+256),w
 13240  0D40  00D5               	movwf	(SetBaud@Baudtemp+3)^(0+256)
 13241                           
 13242                           ;UART.c: 391: Paritytemp = (unsigned char)((temp & 0x00F00000) >> 20);
 13243  0D41  085A               	movf	SetBaud@temp^(0+256),w
 13244  0D42  0021               	movlb	1	; select bank1
 13245  0D43  00B4               	movwf	??_SetBaud^(0+128)
 13246  0D44  0022               	movlb	2	; select bank2
 13247  0D45  085B               	movf	(SetBaud@temp+1)^(0+256),w
 13248  0D46  0021               	movlb	1	; select bank1
 13249  0D47  00B5               	movwf	(??_SetBaud^(0+128)+1)
 13250  0D48  0022               	movlb	2	; select bank2
 13251  0D49  085C               	movf	(SetBaud@temp+2)^(0+256),w
 13252  0D4A  0021               	movlb	1	; select bank1
 13253  0D4B  00B6               	movwf	(??_SetBaud^(0+128)+2)
 13254  0D4C  0022               	movlb	2	; select bank2
 13255  0D4D  085D               	movf	(SetBaud@temp+3)^(0+256),w
 13256  0D4E  0021               	movlb	1	; select bank1
 13257  0D4F  00B7               	movwf	(??_SetBaud^(0+128)+3)
 13258  0D50  3014               	movlw	20
 13259  0D51                     u524_25:	
 13260  0D51  36B7               	lsrf	(??_SetBaud^(0+128)+3),f
 13261  0D52  0CB6               	rrf	(??_SetBaud^(0+128)+2),f
 13262  0D53  0CB5               	rrf	(??_SetBaud^(0+128)+1),f
 13263  0D54  0CB4               	rrf	??_SetBaud^(0+128),f
 13264  0D55  0B89               	decfsz	9,f
 13265  0D56  2D51               	goto	u524_25
 13266  0D57  0834               	movf	??_SetBaud^(0+128),w
 13267  0D58  390F               	andlw	15
 13268  0D59  00B8               	movwf	(??_SetBaud+4)^(0+128)
 13269  0D5A  01B9               	clrf	((??_SetBaud+4)^(0+128)+1)
 13270  0D5B  01BA               	clrf	((??_SetBaud+4)^(0+128)+2)
 13271  0D5C  01BB               	clrf	((??_SetBaud+4)^(0+128)+3)
 13272  0D5D  083B               	movf	(??_SetBaud+7)^(0+128),w
 13273  0D5E  0022               	movlb	2	; select bank2
 13274  0D5F  00D9               	movwf	(SetBaud@Paritytemp+3)^(0+256)
 13275  0D60  0021               	movlb	1	; select bank1
 13276  0D61  083A               	movf	(??_SetBaud+6)^(0+128),w
 13277  0D62  0022               	movlb	2	; select bank2
 13278  0D63  00D8               	movwf	(SetBaud@Paritytemp+2)^(0+256)
 13279  0D64  0021               	movlb	1	; select bank1
 13280  0D65  0839               	movf	(??_SetBaud+5)^(0+128),w
 13281  0D66  0022               	movlb	2	; select bank2
 13282  0D67  00D7               	movwf	(SetBaud@Paritytemp+1)^(0+256)
 13283  0D68  0021               	movlb	1	; select bank1
 13284  0D69  0838               	movf	(??_SetBaud+4)^(0+128),w
 13285  0D6A  0022               	movlb	2	; select bank2
 13286  0D6B  00D6               	movwf	SetBaud@Paritytemp^(0+256)
 13287                           
 13288                           ;UART.c: 393: InitUART(Baud, Parity);
 13289  0D6C  0021               	movlb	1	; select bank1
 13290  0D6D  0832               	movf	(SetBaud@Baud+3)^(0+128),w
 13291  0D6E  0020               	movlb	0	; select bank0
 13292  0D6F  00A3               	movwf	i1InitUART@Baud+3
 13293  0D70  0021               	movlb	1	; select bank1
 13294  0D71  0831               	movf	(SetBaud@Baud+2)^(0+128),w
 13295  0D72  0020               	movlb	0	; select bank0
 13296  0D73  00A2               	movwf	i1InitUART@Baud+2
 13297  0D74  0021               	movlb	1	; select bank1
 13298  0D75  0830               	movf	(SetBaud@Baud+1)^(0+128),w
 13299  0D76  0020               	movlb	0	; select bank0
 13300  0D77  00A1               	movwf	i1InitUART@Baud+1
 13301  0D78  0021               	movlb	1	; select bank1
 13302  0D79  082F               	movf	SetBaud@Baud^(0+128),w
 13303  0D7A  0020               	movlb	0	; select bank0
 13304  0D7B  00A0               	movwf	i1InitUART@Baud
 13305  0D7C  0021               	movlb	1	; select bank1
 13306  0D7D  0833               	movf	SetBaud@Parity^(0+128),w
 13307  0D7E  00B4               	movwf	??_SetBaud^(0+128)
 13308  0D7F  0834               	movf	??_SetBaud^(0+128),w
 13309  0D80  0020               	movlb	0	; select bank0
 13310  0D81  00A4               	movwf	i1InitUART@parity
 13311  0D82  3195  2525  318C   	fcall	i1_InitUART
 13312                           
 13313                           ;UART.c: 394: UARTstringWAIT("\r\n");
 13314  0D85  3043               	movlw	low ((STR_15+16)| (0+32768))
 13315  0D86  0020               	movlb	0	; select bank0
 13316  0D87  00A1               	movwf	i1UARTstringWAIT@data
 13317  0D88  308A               	movlw	high ((STR_15+16)| (0+32768))
 13318  0D89  00A2               	movwf	i1UARTstringWAIT@data+1
 13319  0D8A  319B  232F  318C   	fcall	i1_UARTstringWAIT
 13320                           
 13321                           ;UART.c: 395: delayUS(10000);
 13322  0D8D  3000               	movlw	0
 13323  0D8E  00F3               	movwf	i1delayUS@US+3
 13324  0D8F  3000               	movlw	0
 13325  0D90  00F2               	movwf	i1delayUS@US+2
 13326  0D91  3027               	movlw	39
 13327  0D92  00F1               	movwf	i1delayUS@US+1
 13328  0D93  3010               	movlw	16
 13329  0D94  00F0               	movwf	i1delayUS@US
 13330  0D95  319B  2393  318C   	fcall	i1_delayUS
 13331                           
 13332                           ;UART.c: 396: if((Baud != Baudtemp) || (Parity != Paritytemp))
 13333  0D98  0022               	movlb	2	; select bank2
 13334  0D99  0855               	movf	(SetBaud@Baudtemp+3)^(0+256),w
 13335  0D9A  0021               	movlb	1	; select bank1
 13336  0D9B  0632               	xorwf	(SetBaud@Baud+3)^(0+128),w
 13337  0D9C  1D03               	skipz
 13338  0D9D  2DAE               	goto	u525_25
 13339  0D9E  0022               	movlb	2	; select bank2
 13340  0D9F  0854               	movf	(SetBaud@Baudtemp+2)^(0+256),w
 13341  0DA0  0021               	movlb	1	; select bank1
 13342  0DA1  0631               	xorwf	(SetBaud@Baud+2)^(0+128),w
 13343  0DA2  1D03               	skipz
 13344  0DA3  2DAE               	goto	u525_25
 13345  0DA4  0022               	movlb	2	; select bank2
 13346  0DA5  0853               	movf	(SetBaud@Baudtemp+1)^(0+256),w
 13347  0DA6  0021               	movlb	1	; select bank1
 13348  0DA7  0630               	xorwf	(SetBaud@Baud+1)^(0+128),w
 13349  0DA8  1D03               	skipz
 13350  0DA9  2DAE               	goto	u525_25
 13351  0DAA  0022               	movlb	2	; select bank2
 13352  0DAB  0852               	movf	SetBaud@Baudtemp^(0+256),w
 13353  0DAC  0021               	movlb	1	; select bank1
 13354  0DAD  062F               	xorwf	SetBaud@Baud^(0+128),w
 13355  0DAE                     u525_25:	
 13356  0DAE  1D03               	skipz
 13357  0DAF  2DCD               	goto	i1l4659
 13358  0DB0  0833               	movf	SetBaud@Parity^(0+128),w
 13359  0DB1  00B4               	movwf	??_SetBaud^(0+128)
 13360  0DB2  01B5               	clrf	(??_SetBaud^(0+128)+1)
 13361  0DB3  01B6               	clrf	(??_SetBaud^(0+128)+2)
 13362  0DB4  01B7               	clrf	(??_SetBaud^(0+128)+3)
 13363  0DB5  0022               	movlb	2	; select bank2
 13364  0DB6  0859               	movf	(SetBaud@Paritytemp+3)^(0+256),w
 13365  0DB7  0021               	movlb	1	; select bank1
 13366  0DB8  0637               	xorwf	(??_SetBaud+3)^(0+128),w
 13367  0DB9  1D03               	skipz
 13368  0DBA  2DCB               	goto	u526_25
 13369  0DBB  0022               	movlb	2	; select bank2
 13370  0DBC  0858               	movf	(SetBaud@Paritytemp+2)^(0+256),w
 13371  0DBD  0021               	movlb	1	; select bank1
 13372  0DBE  0636               	xorwf	(??_SetBaud+2)^(0+128),w
 13373  0DBF  1D03               	skipz
 13374  0DC0  2DCB               	goto	u526_25
 13375  0DC1  0022               	movlb	2	; select bank2
 13376  0DC2  0857               	movf	(SetBaud@Paritytemp+1)^(0+256),w
 13377  0DC3  0021               	movlb	1	; select bank1
 13378  0DC4  0635               	xorwf	(??_SetBaud+1)^(0+128),w
 13379  0DC5  1D03               	skipz
 13380  0DC6  2DCB               	goto	u526_25
 13381  0DC7  0022               	movlb	2	; select bank2
 13382  0DC8  0856               	movf	SetBaud@Paritytemp^(0+256),w
 13383  0DC9  0021               	movlb	1	; select bank1
 13384  0DCA  0634               	xorwf	??_SetBaud^(0+128),w
 13385  0DCB                     u526_25:	
 13386  0DCB  1903               	skipnz
 13387  0DCC  2DE0               	goto	i1l4663
 13388  0DCD                     i1l4659:	
 13389                           
 13390                           ;UART.c: 397: {
 13391                           ;UART.c: 398: UARTstringWAIT("KeyBoard Program Fail\r\n");
 13392  0DCD  30EF               	movlw	low (STR_11| (0+32768))
 13393  0DCE  0020               	movlb	0	; select bank0
 13394  0DCF  00A1               	movwf	i1UARTstringWAIT@data
 13395  0DD0  3089               	movlw	high (STR_11| (0+32768))
 13396  0DD1  00A2               	movwf	i1UARTstringWAIT@data+1
 13397  0DD2  319B  232F  318C   	fcall	i1_UARTstringWAIT
 13398                           
 13399                           ;UART.c: 399: delayUS(10000);
 13400  0DD5  3000               	movlw	0
 13401  0DD6  00F3               	movwf	i1delayUS@US+3
 13402  0DD7  3000               	movlw	0
 13403  0DD8  00F2               	movwf	i1delayUS@US+2
 13404  0DD9  3027               	movlw	39
 13405  0DDA  00F1               	movwf	i1delayUS@US+1
 13406  0DDB  3010               	movlw	16
 13407  0DDC  00F0               	movwf	i1delayUS@US
 13408  0DDD  319B  2393  318C   	fcall	i1_delayUS
 13409  0DE0                     i1l4663:	
 13410                           
 13411                           ;UART.c: 400: }
 13412                           ;UART.c: 403: for(i =0;i<10;i++)
 13413  0DE0  0022               	movlb	2	; select bank2
 13414  0DE1  01DE               	clrf	SetBaud@i^(0+256)
 13415  0DE2  300A               	movlw	10
 13416  0DE3  025E               	subwf	SetBaud@i^(0+256),w
 13417  0DE4  1803               	btfsc	3,0
 13418  0DE5  2E0D               	goto	i1l4677
 13419  0DE6                     i1l480:	
 13420                           
 13421                           ;UART.c: 404: {
 13422                           ;UART.c: 405: LATC |= 0b00010000;
 13423  0DE6  160E               	bsf	14,4	;volatile
 13424                           
 13425                           ;UART.c: 406: delayUS(10000);
 13426  0DE7  3000               	movlw	0
 13427  0DE8  00F3               	movwf	i1delayUS@US+3
 13428  0DE9  3000               	movlw	0
 13429  0DEA  00F2               	movwf	i1delayUS@US+2
 13430  0DEB  3027               	movlw	39
 13431  0DEC  00F1               	movwf	i1delayUS@US+1
 13432  0DED  3010               	movlw	16
 13433  0DEE  00F0               	movwf	i1delayUS@US
 13434  0DEF  319B  2393  318C   	fcall	i1_delayUS
 13435                           
 13436                           ;UART.c: 407: LATC &= ~0b00010000;
 13437  0DF2  30EF               	movlw	239
 13438  0DF3  0021               	movlb	1	; select bank1
 13439  0DF4  00B4               	movwf	??_SetBaud^(0+128)
 13440  0DF5  0834               	movf	??_SetBaud^(0+128),w
 13441  0DF6  0022               	movlb	2	; select bank2
 13442  0DF7  058E               	andwf	14,f	;volatile
 13443                           
 13444                           ;UART.c: 408: delayUS(10000);
 13445  0DF8  3000               	movlw	0
 13446  0DF9  00F3               	movwf	i1delayUS@US+3
 13447  0DFA  3000               	movlw	0
 13448  0DFB  00F2               	movwf	i1delayUS@US+2
 13449  0DFC  3027               	movlw	39
 13450  0DFD  00F1               	movwf	i1delayUS@US+1
 13451  0DFE  3010               	movlw	16
 13452  0DFF  00F0               	movwf	i1delayUS@US
 13453  0E00  319B  2393  318C   	fcall	i1_delayUS
 13454  0E03  3001               	movlw	1
 13455  0E04  0021               	movlb	1	; select bank1
 13456  0E05  00B4               	movwf	??_SetBaud^(0+128)
 13457  0E06  0834               	movf	??_SetBaud^(0+128),w
 13458  0E07  0022               	movlb	2	; select bank2
 13459  0E08  07DE               	addwf	SetBaud@i^(0+256),f
 13460  0E09  300A               	movlw	10
 13461  0E0A  025E               	subwf	SetBaud@i^(0+256),w
 13462  0E0B  1C03               	skipc
 13463  0E0C  2DE6               	goto	i1l480
 13464  0E0D                     i1l4677:	
 13465                           
 13466                           ;UART.c: 409: }
 13467                           ;UART.c: 411: sprintf(buf,"KeyBoard Baud is %lu",Baud);
 13468  0E0D  3020               	movlw	low SetBaud@buf
 13469  0E0E  0020               	movlb	0	; select bank0
 13470  0E0F  00AA               	movwf	i1sprintf@sp
 13471  0E10  3001               	movlw	high SetBaud@buf
 13472  0E11  00AB               	movwf	i1sprintf@sp+1
 13473  0E12  301E               	movlw	low (STR_8| (0+32768))
 13474  0E13  00AC               	movwf	i1sprintf@f
 13475  0E14  308A               	movlw	high (STR_8| (0+32768))
 13476  0E15  00AD               	movwf	i1sprintf@f+1
 13477  0E16  0021               	movlb	1	; select bank1
 13478  0E17  0832               	movf	(SetBaud@Baud+3)^(0+128),w
 13479  0E18  0020               	movlb	0	; select bank0
 13480  0E19  00B1               	movwf	?i1_sprintf+7
 13481  0E1A  0021               	movlb	1	; select bank1
 13482  0E1B  0831               	movf	(SetBaud@Baud+2)^(0+128),w
 13483  0E1C  0020               	movlb	0	; select bank0
 13484  0E1D  00B0               	movwf	?i1_sprintf+6
 13485  0E1E  0021               	movlb	1	; select bank1
 13486  0E1F  0830               	movf	(SetBaud@Baud+1)^(0+128),w
 13487  0E20  0020               	movlb	0	; select bank0
 13488  0E21  00AF               	movwf	?i1_sprintf+5
 13489  0E22  0021               	movlb	1	; select bank1
 13490  0E23  082F               	movf	SetBaud@Baud^(0+128),w
 13491  0E24  0020               	movlb	0	; select bank0
 13492  0E25  00AE               	movwf	?i1_sprintf+4
 13493  0E26  3196  2614  318C   	fcall	i1_sprintf
 13494                           
 13495                           ;UART.c: 412: UARTstringWAIT(buf);
 13496  0E29  3020               	movlw	low SetBaud@buf
 13497  0E2A  0020               	movlb	0	; select bank0
 13498  0E2B  00A1               	movwf	i1UARTstringWAIT@data
 13499  0E2C  3001               	movlw	high SetBaud@buf
 13500  0E2D  00A2               	movwf	i1UARTstringWAIT@data+1
 13501  0E2E  319B  232F  318C   	fcall	i1_UARTstringWAIT
 13502                           
 13503                           ;UART.c: 413: if(Parity)
 13504  0E31  0021               	movlb	1	; select bank1
 13505  0E32  0833               	movf	SetBaud@Parity^(0+128),w
 13506  0E33  1903               	btfsc	3,2
 13507  0E34  2E57               	goto	i1l4697
 13508                           
 13509                           ;UART.c: 414: {
 13510                           ;UART.c: 415: switch (Parity)
 13511  0E35  2E4A               	goto	i1l4695
 13512  0E36                     i1l4685:	
 13513                           ;UART.c: 416: {
 13514                           ;UART.c: 417: case 1:
 13515                           
 13516                           
 13517                           ;UART.c: 418: UARTstringWAIT(OddParityMSG);
 13518  0E36  3011               	movlw	low (_OddParityMSG| (0+32768))
 13519  0E37  0020               	movlb	0	; select bank0
 13520  0E38  00A1               	movwf	i1UARTstringWAIT@data
 13521  0E39  3089               	movlw	high (_OddParityMSG| (0+32768))
 13522  0E3A  2E5B               	goto	L20
 13523  0E3B                     i1l4687:	
 13524                           ;UART.c: 420: case 2:
 13525                           
 13526                           ;UART.c: 419: break;
 13527                           
 13528                           
 13529                           ;UART.c: 421: UARTstringWAIT(EvenParityMSG);
 13530  0E3B  30FB               	movlw	low (_EvenParityMSG| (0+32768))
 13531  0E3C  0020               	movlb	0	; select bank0
 13532  0E3D  00A1               	movwf	i1UARTstringWAIT@data
 13533  0E3E  3088               	movlw	high (_EvenParityMSG| (0+32768))
 13534  0E3F  2E5B               	goto	L20
 13535  0E40                     i1l4689:	
 13536                           ;UART.c: 423: case 3:
 13537                           
 13538                           ;UART.c: 422: break;
 13539                           
 13540                           
 13541                           ;UART.c: 424: UARTstringWAIT(MarkParityMSG);
 13542  0E40  304A               	movlw	low (_MarkParityMSG| (0+32768))
 13543  0E41  0020               	movlb	0	; select bank0
 13544  0E42  00A1               	movwf	i1UARTstringWAIT@data
 13545  0E43  3089               	movlw	high (_MarkParityMSG| (0+32768))
 13546  0E44  2E5B               	goto	L20
 13547  0E45                     i1l4691:	
 13548                           ;UART.c: 426: default:
 13549                           
 13550                           ;UART.c: 425: break;
 13551                           
 13552                           
 13553                           ;UART.c: 427: UARTstringWAIT(SpaceParityMSG);
 13554  0E45  303A               	movlw	low (_SpaceParityMSG| (0+32768))
 13555  0E46  0020               	movlb	0	; select bank0
 13556  0E47  00A1               	movwf	i1UARTstringWAIT@data
 13557  0E48  3089               	movlw	high (_SpaceParityMSG| (0+32768))
 13558  0E49  2E5B               	goto	L20
 13559  0E4A                     i1l4695:	
 13560                           ;UART.c: 429: }
 13561                           
 13562                           ;UART.c: 428: break;
 13563                           
 13564  0E4A  0021               	movlb	1	; select bank1
 13565  0E4B  0833               	movf	SetBaud@Parity^(0+128),w
 13566                           
 13567                           ; Switch size 1, requested type "space"
 13568                           ; Number of cases is 3, Range of values is 1 to 3
 13569                           ; switch strategies available:
 13570                           ; Name         Instructions Cycles
 13571                           ; simple_byte           10     6 (average)
 13572                           ; direct_byte           15     9 (fixed)
 13573                           ; jumptable            263     9 (fixed)
 13574                           ;	Chosen strategy is simple_byte
 13575  0E4C  3A01               	xorlw	1	; case 1
 13576  0E4D  1903               	skipnz
 13577  0E4E  2E36               	goto	i1l4685
 13578  0E4F  3A03               	xorlw	3	; case 2
 13579  0E50  1903               	skipnz
 13580  0E51  2E3B               	goto	i1l4687
 13581  0E52  3A01               	xorlw	1	; case 3
 13582  0E53  1903               	skipnz
 13583  0E54  2E40               	goto	i1l4689
 13584  0E55  2E45               	goto	i1l4691
 13585                           
 13586                           ;UART.c: 430: }
 13587  0E56  2E5F               	goto	i1l489
 13588  0E57                     i1l4697:	
 13589                           
 13590                           ;UART.c: 431: else
 13591                           ;UART.c: 432: {
 13592                           ;UART.c: 433: UARTstringWAIT(NoParityMSG);
 13593  0E57  3026               	movlw	low (_NoParityMSG| (0+32768))
 13594  0E58  0020               	movlb	0	; select bank0
 13595  0E59  00A1               	movwf	i1UARTstringWAIT@data
 13596  0E5A  3089               	movlw	high (_NoParityMSG| (0+32768))
 13597  0E5B                     L20:	
 13598  0E5B  00A2               	movwf	i1UARTstringWAIT@data+1
 13599  0E5C  319B  232F  318C   	fcall	i1_UARTstringWAIT
 13600  0E5F                     i1l489:	
 13601                           
 13602                           ;UART.c: 434: }
 13603                           ;UART.c: 435: UARTstringWAIT("\r\n");
 13604  0E5F  3043               	movlw	low ((STR_15+16)| (0+32768))
 13605  0E60  0020               	movlb	0	; select bank0
 13606  0E61  00A1               	movwf	i1UARTstringWAIT@data
 13607  0E62  308A               	movlw	high ((STR_15+16)| (0+32768))
 13608  0E63  00A2               	movwf	i1UARTstringWAIT@data+1
 13609  0E64  319B  232F  318C   	fcall	i1_UARTstringWAIT
 13610                           
 13611                           ;UART.c: 436: delayUS(10000);
 13612  0E67  3000               	movlw	0
 13613  0E68  00F3               	movwf	i1delayUS@US+3
 13614  0E69  3000               	movlw	0
 13615  0E6A  00F2               	movwf	i1delayUS@US+2
 13616  0E6B  3027               	movlw	39
 13617  0E6C  00F1               	movwf	i1delayUS@US+1
 13618  0E6D  3010               	movlw	16
 13619  0E6E  00F0               	movwf	i1delayUS@US
 13620  0E6F  319B  2393         	fcall	i1_delayUS
 13621  0E71  0008               	return
 13622  0E72                     __end_of_SetBaud:	
 13623                           
 13624                           	psect	text47
 13625  1614                     __ptext47:	
 13626 ;; *************** function i1_sprintf *****************
 13627 ;; Defined at:
 13628 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
 13629 ;; Parameters:    Size  Location     Type
 13630 ;;  sp              2   10[BANK0 ] PTR unsigned char 
 13631 ;;		 -> Process_PS2_ScanCode@buf(60), SetBaud@buf(50), Init_System@buf(60), 
 13632 ;;  f               2   12[BANK0 ] PTR const unsigned char 
 13633 ;;		 -> STR_19(33), STR_12(21), STR_8(21), 
 13634 ;; Auto vars:     Size  Location     Type
 13635 ;;  sprintf         4   27[BANK0 ] struct .
 13636 ;;  sprintf         2   31[BANK0 ] PTR void [1]
 13637 ;;		 -> ?i1_sprintf(2), ?_sprintf(2), 
 13638 ;;  sprintf         2   25[BANK0 ] int 
 13639 ;;  sprintf         1   33[BANK0 ] char 
 13640 ;;  sprintf         1   24[BANK0 ] unsigned char 
 13641 ;; Return value:  Size  Location     Type
 13642 ;;                  2   10[BANK0 ] int 
 13643 ;; Registers used:
 13644 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13645 ;; Tracked objects:
 13646 ;;		On entry : 0/0
 13647 ;;		On exit  : 0/0
 13648 ;;		Unchanged: 0/0
 13649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13650 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13651 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13652 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13653 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13654 ;;Total ram usage:       24 bytes
 13655 ;; Hardware stack levels used:    1
 13656 ;; Hardware stack levels required when called:    1
 13657 ;; This function calls:
 13658 ;;		i1___lldiv
 13659 ;;		i1___llmod
 13660 ;; This function is called by:
 13661 ;;		_SetBaud
 13662 ;;		_Process_PS2_ScanCode
 13663 ;; This function uses a non-reentrant model
 13664 ;;
 13665                           
 13666                           
 13667                           ;psect for function i1_sprintf
 13668  1614                     i1_sprintf:	
 13669                           
 13670                           ;doprnt.c: 494: va_list ap;
 13671                           ;doprnt.c: 499: signed char c;
 13672                           ;doprnt.c: 504: int prec;
 13673                           ;doprnt.c: 508: unsigned char flag;
 13674                           ;doprnt.c: 527: union {
 13675                           ;doprnt.c: 528: unsigned long _val;
 13676                           ;doprnt.c: 529: struct {
 13677                           ;doprnt.c: 530: const char * _cp;
 13678                           ;doprnt.c: 531: unsigned _len;
 13679                           ;doprnt.c: 532: } _str;
 13680                           ;doprnt.c: 533: } _val;
 13681                           ;doprnt.c: 542: *ap = __va_start();
 13682                           
 13683                           ;incstack = 0
 13684                           ; Regs used in i1_sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13685  1614  302E               	movlw	low (?i1_sprintf+4)
 13686  1615  0020               	movlb	0	; select bank0
 13687  1616  00BF               	movwf	i1sprintf@ap
 13688  1617  3000               	movlw	high (?i1_sprintf+4)
 13689  1618  00C0               	movwf	i1sprintf@ap+1
 13690  1619                     i1l4401:	
 13691                           ;doprnt.c: 545: while(c = *f++) {
 13692                           
 13693  1619  082D               	movf	i1sprintf@f+1,w
 13694  161A  00B3               	movwf	??i1_sprintf+1
 13695  161B  082C               	movf	i1sprintf@f,w
 13696  161C  00B2               	movwf	??i1_sprintf
 13697  161D  0AAC               	incf	i1sprintf@f,f
 13698  161E  1903               	skipnz
 13699  161F  0AAD               	incf	i1sprintf@f+1,f
 13700  1620  0832               	movf	??i1_sprintf,w
 13701  1621  0084               	movwf	4
 13702  1622  0833               	movf	??i1_sprintf+1,w
 13703  1623  0085               	movwf	5
 13704  1624  0800               	movf	0,w	;code access
 13705  1625  00B4               	movwf	??i1_sprintf+2
 13706  1626  0834               	movf	??i1_sprintf+2,w
 13707  1627  00C1               	movwf	i1sprintf@c
 13708  1628  08C1               	movf	i1sprintf@c,f
 13709  1629  1903               	btfsc	3,2
 13710  162A  2F04               	goto	i1l4403
 13711                           
 13712                           ;doprnt.c: 547: if(c != '%')
 13713  162B  0841               	movf	i1sprintf@c,w
 13714  162C  3A25               	xorlw	37
 13715  162D  1903               	skipnz
 13716  162E  2E3A               	goto	i1l4361
 13717                           
 13718                           ;doprnt.c: 549: {
 13719                           ;doprnt.c: 550: ((*sp++ = (c)));
 13720  162F  082A               	movf	i1sprintf@sp,w
 13721  1630  0086               	movwf	6
 13722  1631  082B               	movf	i1sprintf@sp+1,w
 13723  1632  0087               	movwf	7
 13724  1633  0841               	movf	i1sprintf@c,w
 13725  1634  0081               	movwf	1
 13726  1635  3001               	movlw	1
 13727  1636  07AA               	addwf	i1sprintf@sp,f
 13728  1637  3000               	movlw	0
 13729  1638  3DAB               	addwfc	i1sprintf@sp+1,f
 13730                           
 13731                           ;doprnt.c: 551: continue;
 13732  1639  2E19               	goto	i1l4401
 13733  163A                     i1l4361:	
 13734                           
 13735                           ;doprnt.c: 552: }
 13736                           ;doprnt.c: 557: flag = 0;
 13737  163A  01B8               	clrf	i1sprintf@flag
 13738                           
 13739                           ;doprnt.c: 644: switch(c = *f++) {
 13740                           
 13741                           ;doprnt.c: 642: loop:
 13742  163B  2E43               	goto	i1l4367
 13743  163C                     i1l1079:	
 13744                           ;doprnt.c: 650: case 'l':
 13745                           
 13746                           ;doprnt.c: 647: goto alldone;
 13747                           
 13748                           ;doprnt.c: 646: case 0:
 13749                           
 13750                           
 13751                           ;doprnt.c: 652: flag |= 0x10;
 13752  163C  1638               	bsf	i1sprintf@flag,4
 13753                           
 13754                           ;doprnt.c: 653: goto loop;
 13755  163D  2E43               	goto	i1l4367
 13756  163E                     i1l4363:	
 13757                           ;doprnt.c: 826: case 'u':
 13758                           
 13759                           ;doprnt.c: 822: continue;
 13760                           
 13761                           ;doprnt.c: 811: default:
 13762                           
 13763                           
 13764                           ;doprnt.c: 827: flag |= 0xC0;
 13765  163E  30C0               	movlw	192
 13766  163F  00B2               	movwf	??i1_sprintf
 13767  1640  0832               	movf	??i1_sprintf,w
 13768  1641  04B8               	iorwf	i1sprintf@flag,f
 13769                           
 13770                           ;doprnt.c: 831: }
 13771                           
 13772                           ;doprnt.c: 828: break;
 13773  1642  2E5A               	goto	i1l1082
 13774  1643                     i1l4367:	
 13775  1643  082D               	movf	i1sprintf@f+1,w
 13776  1644  00B3               	movwf	??i1_sprintf+1
 13777  1645  082C               	movf	i1sprintf@f,w
 13778  1646  00B2               	movwf	??i1_sprintf
 13779  1647  0AAC               	incf	i1sprintf@f,f
 13780  1648  1903               	skipnz
 13781  1649  0AAD               	incf	i1sprintf@f+1,f
 13782  164A  0832               	movf	??i1_sprintf,w
 13783  164B  0084               	movwf	4
 13784  164C  0833               	movf	??i1_sprintf+1,w
 13785  164D  0085               	movwf	5
 13786  164E  0800               	movf	0,w	;code access
 13787  164F  00C1               	movwf	i1sprintf@c
 13788                           
 13789                           ; Switch size 1, requested type "space"
 13790                           ; Number of cases is 3, Range of values is 0 to 117
 13791                           ; switch strategies available:
 13792                           ; Name         Instructions Cycles
 13793                           ; simple_byte           10     6 (average)
 13794                           ; direct_byte          242     6 (fixed)
 13795                           ; jumptable            260     6 (fixed)
 13796                           ;	Chosen strategy is simple_byte
 13797  1650  3A00               	xorlw	0	; case 0
 13798  1651  1903               	skipnz
 13799  1652  2F04               	goto	i1l4403
 13800  1653  3A6C               	xorlw	108	; case 108
 13801  1654  1903               	skipnz
 13802  1655  2E3C               	goto	i1l1079
 13803  1656  3A19               	xorlw	25	; case 117
 13804  1657  1903               	skipnz
 13805  1658  2E3E               	goto	i1l4363
 13806  1659  2E19               	goto	i1l4401
 13807  165A                     i1l1082:	
 13808                           
 13809                           ;doprnt.c: 1282: {
 13810                           ;doprnt.c: 1290: if(flag & 0x10)
 13811  165A  1E38               	btfss	i1sprintf@flag,4
 13812  165B  2E6A               	goto	i1l4373
 13813                           
 13814                           ;doprnt.c: 1291: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 13815  165C  083F               	movf	i1sprintf@ap,w
 13816  165D  0086               	movwf	6
 13817  165E  0840               	movf	i1sprintf@ap+1,w
 13818  165F  0087               	movwf	7
 13819  1660  3F40               	moviw [0]fsr1
 13820  1661  00BB               	movwf	i1sprintf@_val
 13821  1662  3F41               	moviw [1]fsr1
 13822  1663  00BC               	movwf	i1sprintf@_val+1
 13823  1664  3F42               	moviw [2]fsr1
 13824  1665  00BD               	movwf	i1sprintf@_val+2
 13825  1666  3F43               	moviw [3]fsr1
 13826  1667  00BE               	movwf	i1sprintf@_val+3
 13827  1668  3004               	movlw	4
 13828  1669  2E79               	goto	L21
 13829  166A                     i1l4373:	
 13830                           
 13831                           ;doprnt.c: 1292: else
 13832                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 13833  166A  083F               	movf	i1sprintf@ap,w
 13834  166B  0086               	movwf	6
 13835  166C  0840               	movf	i1sprintf@ap+1,w
 13836  166D  0087               	movwf	7
 13837  166E  3F40               	moviw [0]fsr1
 13838  166F  00B2               	movwf	??i1_sprintf
 13839  1670  3F41               	moviw [1]fsr1
 13840  1671  00B3               	movwf	??i1_sprintf+1
 13841  1672  0832               	movf	??i1_sprintf,w
 13842  1673  00BB               	movwf	i1sprintf@_val
 13843  1674  0833               	movf	??i1_sprintf+1,w
 13844  1675  00BC               	movwf	i1sprintf@_val+1
 13845  1676  01BD               	clrf	i1sprintf@_val+2
 13846  1677  01BE               	clrf	i1sprintf@_val+3
 13847  1678  3002               	movlw	2
 13848  1679                     L21:	
 13849  1679  07BF               	addwf	i1sprintf@ap,f
 13850  167A  3000               	movlw	0
 13851  167B  3DC0               	addwfc	i1sprintf@ap+1,f
 13852                           
 13853                           ;doprnt.c: 1296: }
 13854                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13855  167C  01C1               	clrf	i1sprintf@c
 13856  167D  0AC1               	incf	i1sprintf@c,f
 13857  167E  0841               	movf	i1sprintf@c,w
 13858  167F  3A0A               	xorlw	10
 13859  1680  1903               	btfsc	3,2
 13860  1681  2EAF               	goto	i1l4391
 13861  1682                     i1l4383:	
 13862                           
 13863                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
 13864  1682  0841               	movf	i1sprintf@c,w
 13865  1683  00B2               	movwf	??i1_sprintf
 13866  1684  01B3               	clrf	??i1_sprintf+1
 13867  1685  35B2               	lslf	??i1_sprintf,f
 13868  1686  0DB3               	rlf	??i1_sprintf+1,f
 13869  1687  35B2               	lslf	??i1_sprintf,f
 13870  1688  0DB3               	rlf	??i1_sprintf+1,f
 13871  1689  30D3               	movlw	low (_dpowers| (0+32768))
 13872  168A  0732               	addwf	??i1_sprintf,w
 13873  168B  0084               	movwf	4
 13874  168C  3088               	movlw	high (_dpowers| (0+32768))
 13875  168D  3D33               	addwfc	??i1_sprintf+1,w
 13876  168E  0085               	movwf	5
 13877  168F  3F00               	moviw [0]fsr0
 13878  1690  00B4               	movwf	??i1_sprintf+2
 13879  1691  3F01               	moviw [1]fsr0
 13880  1692  00B5               	movwf	??i1_sprintf+3
 13881  1693  3F02               	moviw [2]fsr0
 13882  1694  00B6               	movwf	??i1_sprintf+4
 13883  1695  3F03               	moviw [3]fsr0
 13884  1696  00B7               	movwf	??i1_sprintf+5
 13885  1697  0837               	movf	??i1_sprintf+5,w
 13886  1698  023E               	subwf	i1sprintf@_val+3,w
 13887  1699  1D03               	skipz
 13888  169A  2EA5               	goto	u493_25
 13889  169B  0836               	movf	??i1_sprintf+4,w
 13890  169C  023D               	subwf	i1sprintf@_val+2,w
 13891  169D  1D03               	skipz
 13892  169E  2EA5               	goto	u493_25
 13893  169F  0835               	movf	??i1_sprintf+3,w
 13894  16A0  023C               	subwf	i1sprintf@_val+1,w
 13895  16A1  1D03               	skipz
 13896  16A2  2EA5               	goto	u493_25
 13897  16A3  0834               	movf	??i1_sprintf+2,w
 13898  16A4  023B               	subwf	i1sprintf@_val,w
 13899  16A5                     u493_25:	
 13900  16A5  1C03               	btfss	3,0
 13901  16A6  2EAF               	goto	i1l4391
 13902                           
 13903                           ;doprnt.c: 1316: break;
 13904  16A7  3001               	movlw	1
 13905  16A8  00B2               	movwf	??i1_sprintf
 13906  16A9  0832               	movf	??i1_sprintf,w
 13907  16AA  07C1               	addwf	i1sprintf@c,f
 13908  16AB  0841               	movf	i1sprintf@c,w
 13909  16AC  3A0A               	xorlw	10
 13910  16AD  1D03               	skipz
 13911  16AE  2E82               	goto	i1l4383
 13912  16AF                     i1l4391:	
 13913                           
 13914                           ;doprnt.c: 1431: {
 13915                           ;doprnt.c: 1478: }
 13916                           ;doprnt.c: 1481: prec = c;
 13917  16AF  0841               	movf	i1sprintf@c,w
 13918  16B0  00B9               	movwf	i1sprintf@prec
 13919  16B1  01BA               	clrf	i1sprintf@prec+1
 13920  16B2  1BB9               	btfsc	i1sprintf@prec,7
 13921  16B3  03BA               	decf	i1sprintf@prec+1,f
 13922  16B4                     i1l4399:	
 13923                           ;doprnt.c: 1483: while(prec--) {
 13924                           
 13925  16B4  30FF               	movlw	255
 13926  16B5  07B9               	addwf	i1sprintf@prec,f
 13927  16B6  30FF               	movlw	255
 13928  16B7  3DBA               	addwfc	i1sprintf@prec+1,f
 13929  16B8  30FF               	movlw	255
 13930  16B9  063A               	xorwf	i1sprintf@prec+1,w
 13931  16BA  1D03               	skipz
 13932  16BB  2EBE               	goto	u495_25
 13933  16BC  30FF               	movlw	255
 13934  16BD  0639               	xorwf	i1sprintf@prec,w
 13935  16BE                     u495_25:	
 13936  16BE  1903               	btfsc	3,2
 13937  16BF  2E19               	goto	i1l4401
 13938                           
 13939                           ;doprnt.c: 1487: {
 13940                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
 13941  16C0  3000               	movlw	0
 13942  16C1  00A3               	movwf	i1___llmod@divisor+3
 13943  16C2  3000               	movlw	0
 13944  16C3  00A2               	movwf	i1___llmod@divisor+2
 13945  16C4  3000               	movlw	0
 13946  16C5  00A1               	movwf	i1___llmod@divisor+1
 13947  16C6  300A               	movlw	10
 13948  16C7  00A0               	movwf	i1___llmod@divisor
 13949  16C8  083A               	movf	i1sprintf@prec+1,w
 13950  16C9  0085               	movwf	5
 13951  16CA  0839               	movf	i1sprintf@prec,w
 13952  16CB  0084               	movwf	4
 13953  16CC  3584               	lslf	4,f
 13954  16CD  0D85               	rlf	5,f
 13955  16CE  3584               	lslf	4,f
 13956  16CF  0D85               	rlf	5,f
 13957  16D0  30D3               	movlw	low (_dpowers| (0+32768))
 13958  16D1  0784               	addwf	4,f
 13959  16D2  3088               	movlw	high (_dpowers| (0+32768))
 13960  16D3  3D85               	addwfc	5,f
 13961  16D4  3F00               	moviw [0]fsr0
 13962  16D5  00F0               	movwf	i1___lldiv@divisor
 13963  16D6  3F01               	moviw [1]fsr0
 13964  16D7  00F1               	movwf	i1___lldiv@divisor+1
 13965  16D8  3F02               	moviw [2]fsr0
 13966  16D9  00F2               	movwf	i1___lldiv@divisor+2
 13967  16DA  3F03               	moviw [3]fsr0
 13968  16DB  00F3               	movwf	i1___lldiv@divisor+3
 13969  16DC  083E               	movf	i1sprintf@_val+3,w
 13970  16DD  00F7               	movwf	i1___lldiv@dividend+3
 13971  16DE  083D               	movf	i1sprintf@_val+2,w
 13972  16DF  00F6               	movwf	i1___lldiv@dividend+2
 13973  16E0  083C               	movf	i1sprintf@_val+1,w
 13974  16E1  00F5               	movwf	i1___lldiv@dividend+1
 13975  16E2  083B               	movf	i1sprintf@_val,w
 13976  16E3  00F4               	movwf	i1___lldiv@dividend
 13977  16E4  319E  26A8  3196   	fcall	i1___lldiv
 13978  16E7  0873               	movf	?i1___lldiv+3,w
 13979  16E8  0020               	movlb	0	; select bank0
 13980  16E9  00A7               	movwf	i1___llmod@dividend+3
 13981  16EA  0872               	movf	?i1___lldiv+2,w
 13982  16EB  00A6               	movwf	i1___llmod@dividend+2
 13983  16EC  0871               	movf	?i1___lldiv+1,w
 13984  16ED  00A5               	movwf	i1___llmod@dividend+1
 13985  16EE  0870               	movf	?i1___lldiv,w
 13986  16EF  00A4               	movwf	i1___llmod@dividend
 13987  16F0  319C  24EC  3196   	fcall	i1___llmod
 13988  16F3  0020               	movlb	0	; select bank0
 13989  16F4  0820               	movf	?i1___llmod,w
 13990  16F5  3E30               	addlw	48
 13991  16F6  00B2               	movwf	??i1_sprintf
 13992  16F7  0832               	movf	??i1_sprintf,w
 13993  16F8  00C1               	movwf	i1sprintf@c
 13994                           
 13995                           ;doprnt.c: 1532: }
 13996                           ;doprnt.c: 1533: ((*sp++ = (c)));
 13997  16F9  082A               	movf	i1sprintf@sp,w
 13998  16FA  0086               	movwf	6
 13999  16FB  082B               	movf	i1sprintf@sp+1,w
 14000  16FC  0087               	movwf	7
 14001  16FD  0841               	movf	i1sprintf@c,w
 14002  16FE  0081               	movwf	1
 14003  16FF  3001               	movlw	1
 14004  1700  07AA               	addwf	i1sprintf@sp,f
 14005  1701  3000               	movlw	0
 14006  1702  3DAB               	addwfc	i1sprintf@sp+1,f
 14007  1703  2EB4               	goto	i1l4399
 14008  1704                     i1l4403:	
 14009                           ;doprnt.c: 1534: }
 14010                           ;doprnt.c: 1542: }
 14011                           ;doprnt.c: 1544: alldone:
 14012                           
 14013                           
 14014                           ;doprnt.c: 1547: *sp = 0;
 14015  1704  082A               	movf	i1sprintf@sp,w
 14016  1705  0086               	movwf	6
 14017  1706  082B               	movf	i1sprintf@sp+1,w
 14018  1707  0087               	movwf	7
 14019  1708  0181               	clrf	1
 14020  1709  0008               	return
 14021  170A                     __end_ofi1_sprintf:	
 14022                           ;doprnt.c: 1549: return 0;
 14023                           ;	Return value of i1_sprintf is never used
 14024                           
 14025                           
 14026                           	psect	text48
 14027  1CEC                     __ptext48:	
 14028 ;; *************** function i1___llmod *****************
 14029 ;; Defined at:
 14030 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\llmod.c"
 14031 ;; Parameters:    Size  Location     Type
 14032 ;;  divisor         4    0[BANK0 ] unsigned long 
 14033 ;;  dividend        4    4[BANK0 ] unsigned long 
 14034 ;; Auto vars:     Size  Location     Type
 14035 ;;  __llmod         1    9[BANK0 ] unsigned char 
 14036 ;; Return value:  Size  Location     Type
 14037 ;;                  4    0[BANK0 ] unsigned long 
 14038 ;; Registers used:
 14039 ;;		wreg, status,2, status,0
 14040 ;; Tracked objects:
 14041 ;;		On entry : 0/0
 14042 ;;		On exit  : 0/0
 14043 ;;		Unchanged: 0/0
 14044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14045 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14046 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14047 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14048 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14049 ;;Total ram usage:       10 bytes
 14050 ;; Hardware stack levels used:    1
 14051 ;; This function calls:
 14052 ;;		Nothing
 14053 ;; This function is called by:
 14054 ;;		i1_sprintf
 14055 ;; This function uses a non-reentrant model
 14056 ;;
 14057                           
 14058                           
 14059                           ;psect for function i1___llmod
 14060  1CEC                     i1___llmod:	
 14061                           
 14062                           ;incstack = 0
 14063                           ; Regs used in i1___llmod: [wreg+status,2+status,0]
 14064  1CEC  0020               	movlb	0	; select bank0
 14065  1CED  0823               	movf	i1___llmod@divisor+3,w
 14066  1CEE  0422               	iorwf	i1___llmod@divisor+2,w
 14067  1CEF  0421               	iorwf	i1___llmod@divisor+1,w
 14068  1CF0  0420               	iorwf	i1___llmod@divisor,w
 14069  1CF1  1903               	skipnz
 14070  1CF2  2D26               	goto	i1l4047
 14071  1CF3  01A9               	clrf	i1___llmod@counter
 14072  1CF4  0AA9               	incf	i1___llmod@counter,f
 14073  1CF5                     i1l4037:	
 14074  1CF5  1BA3               	btfsc	i1___llmod@divisor+3,7
 14075  1CF6  2D03               	goto	i1l4039
 14076  1CF7  3001               	movlw	1
 14077  1CF8                     u429_25:	
 14078  1CF8  35A0               	lslf	i1___llmod@divisor,f
 14079  1CF9  0DA1               	rlf	i1___llmod@divisor+1,f
 14080  1CFA  0DA2               	rlf	i1___llmod@divisor+2,f
 14081  1CFB  0DA3               	rlf	i1___llmod@divisor+3,f
 14082  1CFC  0B89               	decfsz	9,f
 14083  1CFD  2CF8               	goto	u429_25
 14084  1CFE  3001               	movlw	1
 14085  1CFF  00A8               	movwf	??i1___llmod
 14086  1D00  0828               	movf	??i1___llmod,w
 14087  1D01  07A9               	addwf	i1___llmod@counter,f
 14088  1D02  2CF5               	goto	i1l4037
 14089  1D03                     i1l4039:	
 14090  1D03  0823               	movf	i1___llmod@divisor+3,w
 14091  1D04  0227               	subwf	i1___llmod@dividend+3,w
 14092  1D05  1D03               	skipz
 14093  1D06  2D11               	goto	u431_25
 14094  1D07  0822               	movf	i1___llmod@divisor+2,w
 14095  1D08  0226               	subwf	i1___llmod@dividend+2,w
 14096  1D09  1D03               	skipz
 14097  1D0A  2D11               	goto	u431_25
 14098  1D0B  0821               	movf	i1___llmod@divisor+1,w
 14099  1D0C  0225               	subwf	i1___llmod@dividend+1,w
 14100  1D0D  1D03               	skipz
 14101  1D0E  2D11               	goto	u431_25
 14102  1D0F  0820               	movf	i1___llmod@divisor,w
 14103  1D10  0224               	subwf	i1___llmod@dividend,w
 14104  1D11                     u431_25:	
 14105  1D11  1C03               	skipc
 14106  1D12  2D1B               	goto	i1l4043
 14107  1D13  0820               	movf	i1___llmod@divisor,w
 14108  1D14  02A4               	subwf	i1___llmod@dividend,f
 14109  1D15  0821               	movf	i1___llmod@divisor+1,w
 14110  1D16  3BA5               	subwfb	i1___llmod@dividend+1,f
 14111  1D17  0822               	movf	i1___llmod@divisor+2,w
 14112  1D18  3BA6               	subwfb	i1___llmod@dividend+2,f
 14113  1D19  0823               	movf	i1___llmod@divisor+3,w
 14114  1D1A  3BA7               	subwfb	i1___llmod@dividend+3,f
 14115  1D1B                     i1l4043:	
 14116  1D1B  3001               	movlw	1
 14117  1D1C                     u432_25:	
 14118  1D1C  36A3               	lsrf	i1___llmod@divisor+3,f
 14119  1D1D  0CA2               	rrf	i1___llmod@divisor+2,f
 14120  1D1E  0CA1               	rrf	i1___llmod@divisor+1,f
 14121  1D1F  0CA0               	rrf	i1___llmod@divisor,f
 14122  1D20  0B89               	decfsz	9,f
 14123  1D21  2D1C               	goto	u432_25
 14124  1D22  3001               	movlw	1
 14125  1D23  02A9               	subwf	i1___llmod@counter,f
 14126  1D24  1D03               	btfss	3,2
 14127  1D25  2D03               	goto	i1l4039
 14128  1D26                     i1l4047:	
 14129  1D26  0827               	movf	i1___llmod@dividend+3,w
 14130  1D27  00A3               	movwf	?i1___llmod+3
 14131  1D28  0826               	movf	i1___llmod@dividend+2,w
 14132  1D29  00A2               	movwf	?i1___llmod+2
 14133  1D2A  0825               	movf	i1___llmod@dividend+1,w
 14134  1D2B  00A1               	movwf	?i1___llmod+1
 14135  1D2C  0824               	movf	i1___llmod@dividend,w
 14136  1D2D  00A0               	movwf	?i1___llmod
 14137  1D2E  0008               	return
 14138  1D2F                     __end_ofi1___llmod:	
 14139                           
 14140                           	psect	text49
 14141  1B2F                     __ptext49:	
 14142 ;; *************** function i1_UARTstringWAIT *****************
 14143 ;; Defined at:
 14144 ;;		line 361 in file "UART.c"
 14145 ;; Parameters:    Size  Location     Type
 14146 ;;  data            2    1[BANK0 ] PTR const unsigned char 
 14147 ;;		 -> STR_21(29), STR_20(3), Process_PS2_ScanCode@buf(60), STR_18(3), 
 14148 ;;		 -> STR_17(3), STR_16(23), STR_15(19), STR_14(3), 
 14149 ;;		 -> STR_13(3), SetBaud@buf(50), STR_11(24), STR_10(3), 
 14150 ;;		 -> STR_9(3), NoParityMSG(20), SpaceParityMSG(16), MarkParityMSG(15), 
 14151 ;;		 -> EvenParityMSG(22), OddParityMSG(21), Init_System@buf(60), STR_7(3), 
 14152 ;;		 -> STR_6(39), STR_5(3), Version(8), STR_4(19), 
 14153 ;;		 -> STR_3(28), STR_2(8), STR_1(7), VoltageMSG(13), 
 14154 ;; Auto vars:     Size  Location     Type
 14155 ;;		None
 14156 ;; Return value:  Size  Location     Type
 14157 ;;		None               void
 14158 ;; Registers used:
 14159 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14160 ;; Tracked objects:
 14161 ;;		On entry : 0/0
 14162 ;;		On exit  : 0/0
 14163 ;;		Unchanged: 0/0
 14164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14165 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14167 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14168 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14169 ;;Total ram usage:        4 bytes
 14170 ;; Hardware stack levels used:    1
 14171 ;; Hardware stack levels required when called:    2
 14172 ;; This function calls:
 14173 ;;		i1_UARTchar
 14174 ;;		i1_delayUS
 14175 ;; This function is called by:
 14176 ;;		_SetBaud
 14177 ;;		_Process_PS2_ScanCode
 14178 ;; This function uses a non-reentrant model
 14179 ;;
 14180                           
 14181                           
 14182                           ;psect for function i1_UARTstringWAIT
 14183  1B2F                     i1_UARTstringWAIT:	
 14184  1B2F                     i1l468:	
 14185                           ;incstack = 0
 14186                           ; Regs used in i1_UARTstringWAIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14187                           ;UART.c: 363: do
 14188                           
 14189                           
 14190                           ;UART.c: 364: {
 14191                           ;UART.c: 365: delayUS(5000);
 14192  1B2F  3000               	movlw	0
 14193  1B30  00F3               	movwf	i1delayUS@US+3
 14194  1B31  3000               	movlw	0
 14195  1B32  00F2               	movwf	i1delayUS@US+2
 14196  1B33  3013               	movlw	19
 14197  1B34  00F1               	movwf	i1delayUS@US+1
 14198  1B35  3088               	movlw	136
 14199  1B36  00F0               	movwf	i1delayUS@US
 14200  1B37  319B  2393  319B   	fcall	i1_delayUS
 14201                           
 14202                           ;UART.c: 366: if(*data != 0)
 14203  1B3A  0020               	movlb	0	; select bank0
 14204  1B3B  0821               	movf	i1UARTstringWAIT@data,w
 14205  1B3C  0084               	movwf	4
 14206  1B3D  0822               	movf	i1UARTstringWAIT@data+1,w
 14207  1B3E  0085               	movwf	5
 14208  1B3F  0800               	movf	0,w	;code access
 14209  1B40  3A00               	xorlw	0
 14210  1B41  1903               	skipnz
 14211  1B42  2B50               	goto	i1l4333
 14212                           
 14213                           ;UART.c: 367: {
 14214                           ;UART.c: 368: UARTchar(*data, 0, 0);
 14215  1B43  01F8               	clrf	i1UARTchar@override
 14216  1B44  01F9               	clrf	i1UARTchar@NinethBit_override_data
 14217  1B45  0821               	movf	i1UARTstringWAIT@data,w
 14218  1B46  0084               	movwf	4
 14219  1B47  0822               	movf	i1UARTstringWAIT@data+1,w
 14220  1B48  0085               	movwf	5
 14221  1B49  0800               	movf	0,w	;code access
 14222  1B4A  319F  27A1  319B   	fcall	i1_UARTchar
 14223  1B4D                     i1l470:	
 14224                           ;UART.c: 369: while((!TX1STAbits.TRMT));
 14225                           
 14226  1B4D  0023               	movlb	3	; select bank3
 14227  1B4E  1C9E               	btfss	30,1	;volatile
 14228  1B4F  2B4D               	goto	i1l470
 14229  1B50                     i1l4333:	
 14230                           
 14231                           ;UART.c: 370: }
 14232                           ;UART.c: 371: } while( *data++);
 14233  1B50  0020               	movlb	0	; select bank0
 14234  1B51  0822               	movf	i1UARTstringWAIT@data+1,w
 14235  1B52  00A4               	movwf	??i1_UARTstringWAIT+1
 14236  1B53  0821               	movf	i1UARTstringWAIT@data,w
 14237  1B54  00A3               	movwf	??i1_UARTstringWAIT
 14238  1B55  0AA1               	incf	i1UARTstringWAIT@data,f
 14239  1B56  1903               	skipnz
 14240  1B57  0AA2               	incf	i1UARTstringWAIT@data+1,f
 14241  1B58  0823               	movf	??i1_UARTstringWAIT,w
 14242  1B59  0084               	movwf	4
 14243  1B5A  0824               	movf	??i1_UARTstringWAIT+1,w
 14244  1B5B  0085               	movwf	5
 14245  1B5C  0800               	movf	0,w	;code access
 14246  1B5D  3800               	iorlw	0
 14247  1B5E  1903               	btfsc	3,2
 14248  1B5F  0008               	return
 14249  1B60  2B2F               	goto	i1l468
 14250  1B61                     __end_ofi1_UARTstringWAIT:	
 14251                           
 14252                           	psect	text50
 14253  1FA1                     __ptext50:	
 14254 ;; *************** function i1_UARTchar *****************
 14255 ;; Defined at:
 14256 ;;		line 231 in file "UART.c"
 14257 ;; Parameters:    Size  Location     Type
 14258 ;;  data            1    wreg     unsigned char 
 14259 ;;  override        1    8[COMMON] unsigned char 
 14260 ;;  NinethBit_ov    1    9[COMMON] unsigned char 
 14261 ;; Auto vars:     Size  Location     Type
 14262 ;;  data            1    0[BANK0 ] unsigned char 
 14263 ;; Return value:  Size  Location     Type
 14264 ;;		None               void
 14265 ;; Registers used:
 14266 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14267 ;; Tracked objects:
 14268 ;;		On entry : 0/0
 14269 ;;		On exit  : 0/0
 14270 ;;		Unchanged: 0/0
 14271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14272 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14273 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14274 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14275 ;;      Totals:         6       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14276 ;;Total ram usage:        7 bytes
 14277 ;; Hardware stack levels used:    1
 14278 ;; Hardware stack levels required when called:    1
 14279 ;; This function calls:
 14280 ;;		i1_CheckSum_byte
 14281 ;; This function is called by:
 14282 ;;		_isr
 14283 ;;		_Process_PS2_ScanCode
 14284 ;;		i1_UARTstringWAIT
 14285 ;; This function uses a non-reentrant model
 14286 ;;
 14287                           
 14288                           
 14289                           ;psect for function i1_UARTchar
 14290  1FA1                     i1_UARTchar:	
 14291                           
 14292                           ;incstack = 0
 14293                           ; Regs used in i1_UARTchar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14294                           ;i1UARTchar@data stored from wreg
 14295  1FA1  0020               	movlb	0	; select bank0
 14296  1FA2  00A0               	movwf	i1UARTchar@data
 14297                           
 14298                           ;UART.c: 233: if(TXSTAbits.TX9)
 14299  1FA3  0023               	movlb	3	; select bank3
 14300  1FA4  1F1E               	btfss	30,6	;volatile
 14301  1FA5  2FE6               	goto	i1l3981
 14302                           
 14303                           ;UART.c: 234: {
 14304                           ;UART.c: 236: if(!override)
 14305  1FA6  08F8               	movf	i1UARTchar@override,f
 14306  1FA7  1903               	btfsc	3,2
 14307  1FA8  2FD0               	goto	i1l3977
 14308  1FA9  2FDD               	goto	i1l3979
 14309  1FAA                     i1l3971:	
 14310                           ;UART.c: 240: {
 14311                           ;UART.c: 241: case 1:
 14312                           
 14313                           ;UART.c: 237: {
 14314                           ;UART.c: 239: switch (PARITY)
 14315                           
 14316                           
 14317                           ;UART.c: 242: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 3);
 14318  1FAA  0020               	movlb	0	; select bank0
 14319  1FAB  0820               	movf	i1UARTchar@data,w
 14320  1FAC  00FA               	movwf	??i1_UARTchar
 14321  1FAD  01FB               	clrf	??i1_UARTchar+1
 14322  1FAE  087A               	movf	??i1_UARTchar,w
 14323  1FAF  00F0               	movwf	i1CheckSum_byte@This
 14324  1FB0  087B               	movf	??i1_UARTchar+1,w
 14325  1FB1  00F1               	movwf	i1CheckSum_byte@This+1
 14326  1FB2  3003               	movlw	3
 14327  1FB3  2FBD               	goto	L24
 14328  1FB4                     i1l3973:	
 14329                           ;UART.c: 244: case 2:
 14330                           
 14331                           ;UART.c: 243: break;
 14332                           
 14333                           
 14334                           ;UART.c: 245: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 2);
 14335  1FB4  0020               	movlb	0	; select bank0
 14336  1FB5  0820               	movf	i1UARTchar@data,w
 14337  1FB6  00FA               	movwf	??i1_UARTchar
 14338  1FB7  01FB               	clrf	??i1_UARTchar+1
 14339  1FB8  087A               	movf	??i1_UARTchar,w
 14340  1FB9  00F0               	movwf	i1CheckSum_byte@This
 14341  1FBA  087B               	movf	??i1_UARTchar+1,w
 14342  1FBB  00F1               	movwf	i1CheckSum_byte@This+1
 14343  1FBC  3002               	movlw	2
 14344  1FBD                     L24:	
 14345  1FBD  00FC               	movwf	??i1_UARTchar+2
 14346  1FBE  087C               	movf	??i1_UARTchar+2,w
 14347  1FBF  00F2               	movwf	i1CheckSum_byte@Odd_Even
 14348  1FC0  318A  2268  319F   	fcall	i1_CheckSum_byte
 14349  1FC3  00FD               	movwf	??i1_UARTchar+3
 14350  1FC4  0023               	movlb	3	; select bank3
 14351  1FC5  081E               	movf	30,w	;volatile
 14352  1FC6  067D               	xorwf	??i1_UARTchar+3,w
 14353  1FC7  39FE               	andlw	-2
 14354  1FC8  067D               	xorwf	??i1_UARTchar+3,w
 14355  1FC9  2FE5               	goto	L23
 14356  1FCA                     i1l434:	
 14357                           ;UART.c: 247: case 3:
 14358                           
 14359                           ;UART.c: 246: break;
 14360                           
 14361                           
 14362                           ;UART.c: 248: TXSTAbits.TX9D = 1;
 14363  1FCA  0023               	movlb	3	; select bank3
 14364  1FCB  141E               	bsf	30,0	;volatile
 14365                           
 14366                           ;UART.c: 249: break;
 14367  1FCC  2FE6               	goto	i1l3981
 14368  1FCD                     i1l435:	
 14369                           ;UART.c: 250: default:
 14370                           
 14371                           
 14372                           ;UART.c: 251: TXSTAbits.TX9D = 0;
 14373  1FCD  0023               	movlb	3	; select bank3
 14374  1FCE  101E               	bcf	30,0	;volatile
 14375                           
 14376                           ;UART.c: 253: }
 14377                           
 14378                           ;UART.c: 252: break;
 14379  1FCF  2FE6               	goto	i1l3981
 14380  1FD0                     i1l3977:	
 14381  1FD0  0024               	movlb	4	; select bank4
 14382  1FD1  0860               	movf	_PARITY^(0+512),w
 14383                           
 14384                           ; Switch size 1, requested type "space"
 14385                           ; Number of cases is 3, Range of values is 1 to 3
 14386                           ; switch strategies available:
 14387                           ; Name         Instructions Cycles
 14388                           ; simple_byte           10     6 (average)
 14389                           ; direct_byte           15     9 (fixed)
 14390                           ; jumptable            263     9 (fixed)
 14391                           ;	Chosen strategy is simple_byte
 14392  1FD2  3A01               	xorlw	1	; case 1
 14393  1FD3  1903               	skipnz
 14394  1FD4  2FAA               	goto	i1l3971
 14395  1FD5  3A03               	xorlw	3	; case 2
 14396  1FD6  1903               	skipnz
 14397  1FD7  2FB4               	goto	i1l3973
 14398  1FD8  3A01               	xorlw	1	; case 3
 14399  1FD9  1903               	skipnz
 14400  1FDA  2FCA               	goto	i1l434
 14401  1FDB  2FCD               	goto	i1l435
 14402                           
 14403                           ;UART.c: 254: }
 14404  1FDC  2FE6               	goto	i1l3981
 14405  1FDD                     i1l3979:	
 14406                           
 14407                           ;UART.c: 255: else
 14408                           ;UART.c: 256: {
 14409                           ;UART.c: 257: TXSTAbits.TX9D = (NinethBit_override_data & 0x01);
 14410  1FDD  3001               	movlw	1
 14411  1FDE  0579               	andwf	i1UARTchar@NinethBit_override_data,w
 14412  1FDF  00FA               	movwf	??i1_UARTchar
 14413  1FE0  0023               	movlb	3	; select bank3
 14414  1FE1  081E               	movf	30,w	;volatile
 14415  1FE2  067A               	xorwf	??i1_UARTchar,w
 14416  1FE3  39FE               	andlw	-2
 14417  1FE4  067A               	xorwf	??i1_UARTchar,w
 14418  1FE5                     L23:	
 14419  1FE5  009E               	movwf	30	;volatile
 14420  1FE6                     i1l3981:	
 14421                           
 14422                           ;UART.c: 258: }
 14423                           ;UART.c: 259: }
 14424                           ;UART.c: 261: if(data == '\n')
 14425  1FE6  0020               	movlb	0	; select bank0
 14426  1FE7  0820               	movf	i1UARTchar@data,w
 14427  1FE8  3A0A               	xorlw	10
 14428  1FE9  1D03               	skipz
 14429  1FEA  2FF7               	goto	i1l443
 14430                           
 14431                           ;UART.c: 262: {
 14432                           ;UART.c: 263: if(override)
 14433  1FEB  0878               	movf	i1UARTchar@override,w
 14434  1FEC  1903               	btfsc	3,2
 14435  1FED  0008               	return
 14436  1FEE                     i1l439:	
 14437                           ;UART.c: 264: {
 14438                           ;UART.c: 265: while(!TXSTAbits.TRMT);
 14439                           
 14440  1FEE  0023               	movlb	3	; select bank3
 14441  1FEF  1C9E               	btfss	30,1	;volatile
 14442  1FF0  2FEE               	goto	i1l439
 14443                           
 14444                           ;UART.c: 266: TXREG = data;
 14445  1FF1  0020               	movlb	0	; select bank0
 14446  1FF2  0820               	movf	i1UARTchar@data,w
 14447  1FF3  0023               	movlb	3	; select bank3
 14448  1FF4  009A               	movwf	26	;volatile
 14449  1FF5  0020               	movlb	0	; select bank0
 14450  1FF6  0008               	return
 14451  1FF7                     i1l443:	
 14452                           ;UART.c: 269: else
 14453                           ;UART.c: 270: {
 14454                           ;UART.c: 271: while(!TXSTAbits.TRMT);
 14455                           
 14456                           ;UART.c: 267: }
 14457                           ;UART.c: 268: }
 14458                           
 14459  1FF7  0023               	movlb	3	; select bank3
 14460  1FF8  1C9E               	btfss	30,1	;volatile
 14461  1FF9  2FF7               	goto	i1l443
 14462                           
 14463                           ;UART.c: 272: TXREG = data;
 14464  1FFA  0020               	movlb	0	; select bank0
 14465  1FFB  0820               	movf	i1UARTchar@data,w
 14466  1FFC  0023               	movlb	3	; select bank3
 14467  1FFD  009A               	movwf	26	;volatile
 14468  1FFE  0020               	movlb	0	; select bank0
 14469  1FFF  0008               	return
 14470  2000                     __end_ofi1_UARTchar:	
 14471                           
 14472                           	psect	text51
 14473  1149                     __ptext51:	
 14474 ;; *************** function i1_ReadBaud *****************
 14475 ;; Defined at:
 14476 ;;		line 187 in file "FLASH.c"
 14477 ;; Parameters:    Size  Location     Type
 14478 ;;  row             2    4[BANK0 ] unsigned int 
 14479 ;;  column          1    6[BANK0 ] unsigned char 
 14480 ;; Auto vars:     Size  Location     Type
 14481 ;;  ReadBaud        4   16[BANK0 ] unsigned long 
 14482 ;; Return value:  Size  Location     Type
 14483 ;;                  4    4[BANK0 ] unsigned long 
 14484 ;; Registers used:
 14485 ;;		wreg, status,2, status,0, pclath, cstack
 14486 ;; Tracked objects:
 14487 ;;		On entry : 0/0
 14488 ;;		On exit  : 0/0
 14489 ;;		Unchanged: 0/0
 14490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14491 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14492 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14493 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14494 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14495 ;;Total ram usage:       16 bytes
 14496 ;; Hardware stack levels used:    1
 14497 ;; Hardware stack levels required when called:    2
 14498 ;; This function calls:
 14499 ;;		i1_ReadFlash_4Byte
 14500 ;; This function is called by:
 14501 ;;		_SetBaud
 14502 ;; This function uses a non-reentrant model
 14503 ;;
 14504                           
 14505                           
 14506                           ;psect for function i1_ReadBaud
 14507  1149                     i1_ReadBaud:	
 14508                           
 14509                           ;FLASH.c: 189: unsigned long temp;
 14510                           ;FLASH.c: 190: temp =(ReadFlash_4Byte(row, column));
 14511                           
 14512                           ;incstack = 0
 14513                           ; Regs used in i1_ReadBaud: [wreg+status,2+status,0+pclath+cstack]
 14514  1149  0020               	movlb	0	; select bank0
 14515  114A  0825               	movf	i1ReadBaud@row+1,w
 14516  114B  01F6               	clrf	i1ReadFlash_4Byte@row+1
 14517  114C  07F6               	addwf	i1ReadFlash_4Byte@row+1,f
 14518  114D  0824               	movf	i1ReadBaud@row,w
 14519  114E  01F5               	clrf	i1ReadFlash_4Byte@row
 14520  114F  07F5               	addwf	i1ReadFlash_4Byte@row,f
 14521  1150  0826               	movf	i1ReadBaud@column,w
 14522  1151  00A8               	movwf	??i1_ReadBaud
 14523  1152  0828               	movf	??i1_ReadBaud,w
 14524  1153  00F7               	movwf	i1ReadFlash_4Byte@column
 14525  1154  319E  2606  3191   	fcall	i1_ReadFlash_4Byte
 14526  1157  0878               	movf	?i1_ReadFlash_4Byte+3,w
 14527  1158  0020               	movlb	0	; select bank0
 14528  1159  00B3               	movwf	i1ReadBaud@temp+3
 14529  115A  0877               	movf	?i1_ReadFlash_4Byte+2,w
 14530  115B  00B2               	movwf	i1ReadBaud@temp+2
 14531  115C  0876               	movf	?i1_ReadFlash_4Byte+1,w
 14532  115D  00B1               	movwf	i1ReadBaud@temp+1
 14533  115E  0875               	movf	?i1_ReadFlash_4Byte,w
 14534  115F  00B0               	movwf	i1ReadBaud@temp
 14535                           
 14536                           ;FLASH.c: 191: MEM[1] = (unsigned int)(temp & 0x0003FFF);
 14537  1160  30FF               	movlw	255
 14538  1161  0530               	andwf	i1ReadBaud@temp,w
 14539  1162  0021               	movlb	1	; select bank1
 14540  1163  00E4               	movwf	(_MEM^(0+128)+2)
 14541  1164  303F               	movlw	63
 14542  1165  0020               	movlb	0	; select bank0
 14543  1166  0531               	andwf	i1ReadBaud@temp+1,w
 14544  1167  0021               	movlb	1	; select bank1
 14545  1168  00E5               	movwf	((_MEM+1)^(0+128)+2)
 14546                           
 14547                           ;FLASH.c: 192: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
 14548  1169  0020               	movlb	0	; select bank0
 14549  116A  0830               	movf	i1ReadBaud@temp,w
 14550  116B  00A8               	movwf	??i1_ReadBaud
 14551  116C  0831               	movf	i1ReadBaud@temp+1,w
 14552  116D  00A9               	movwf	??i1_ReadBaud+1
 14553  116E  0832               	movf	i1ReadBaud@temp+2,w
 14554  116F  00AA               	movwf	??i1_ReadBaud+2
 14555  1170  0833               	movf	i1ReadBaud@temp+3,w
 14556  1171  00AB               	movwf	??i1_ReadBaud+3
 14557  1172  300E               	movlw	14
 14558  1173                     u488_25:	
 14559  1173  36AB               	lsrf	??i1_ReadBaud+3,f
 14560  1174  0CAA               	rrf	??i1_ReadBaud+2,f
 14561  1175  0CA9               	rrf	??i1_ReadBaud+1,f
 14562  1176  0CA8               	rrf	??i1_ReadBaud,f
 14563  1177  0B89               	decfsz	9,f
 14564  1178  2973               	goto	u488_25
 14565  1179  30FF               	movlw	255
 14566  117A  0528               	andwf	??i1_ReadBaud,w
 14567  117B  0021               	movlb	1	; select bank1
 14568  117C  00E2               	movwf	_MEM^(0+128)
 14569  117D  303F               	movlw	63
 14570  117E  0020               	movlb	0	; select bank0
 14571  117F  0529               	andwf	??i1_ReadBaud+1,w
 14572  1180  0021               	movlb	1	; select bank1
 14573  1181  00E3               	movwf	(_MEM+1)^(0+128)
 14574                           
 14575                           ;FLASH.c: 193: return (((unsigned long)MEM[0] << 12) + (unsigned long)MEM[1]);
 14576  1182  0864               	movf	(_MEM^(0+128)+2),w
 14577  1183  0020               	movlb	0	; select bank0
 14578  1184  00A8               	movwf	??i1_ReadBaud
 14579  1185  0021               	movlb	1	; select bank1
 14580  1186  0865               	movf	((_MEM+1)^(0+128)+2),w
 14581  1187  0020               	movlb	0	; select bank0
 14582  1188  00A9               	movwf	??i1_ReadBaud+1
 14583  1189  01AA               	clrf	??i1_ReadBaud+2
 14584  118A  01AB               	clrf	??i1_ReadBaud+3
 14585  118B  0021               	movlb	1	; select bank1
 14586  118C  0862               	movf	_MEM^(0+128),w
 14587  118D  0020               	movlb	0	; select bank0
 14588  118E  00AC               	movwf	??i1_ReadBaud+4
 14589  118F  0021               	movlb	1	; select bank1
 14590  1190  0863               	movf	(_MEM+1)^(0+128),w
 14591  1191  0020               	movlb	0	; select bank0
 14592  1192  00AD               	movwf	??i1_ReadBaud+5
 14593  1193  01AE               	clrf	??i1_ReadBaud+6
 14594  1194  01AF               	clrf	??i1_ReadBaud+7
 14595  1195  300C               	movlw	12
 14596  1196                     u489_25:	
 14597  1196  35AC               	lslf	??i1_ReadBaud+4,f
 14598  1197  0DAD               	rlf	??i1_ReadBaud+5,f
 14599  1198  0DAE               	rlf	??i1_ReadBaud+6,f
 14600  1199  0DAF               	rlf	??i1_ReadBaud+7,f
 14601  119A  0B89               	decfsz	9,f
 14602  119B  2996               	goto	u489_25
 14603  119C  082C               	movf	??i1_ReadBaud+4,w
 14604  119D  07A8               	addwf	??i1_ReadBaud,f
 14605  119E  082D               	movf	??i1_ReadBaud+5,w
 14606  119F  3DA9               	addwfc	??i1_ReadBaud+1,f
 14607  11A0  082E               	movf	??i1_ReadBaud+6,w
 14608  11A1  3DAA               	addwfc	??i1_ReadBaud+2,f
 14609  11A2  082F               	movf	??i1_ReadBaud+7,w
 14610  11A3  3DAB               	addwfc	??i1_ReadBaud+3,f
 14611  11A4  082B               	movf	??i1_ReadBaud+3,w
 14612  11A5  00A7               	movwf	?i1_ReadBaud+3
 14613  11A6  082A               	movf	??i1_ReadBaud+2,w
 14614  11A7  00A6               	movwf	?i1_ReadBaud+2
 14615  11A8  0829               	movf	??i1_ReadBaud+1,w
 14616  11A9  00A5               	movwf	?i1_ReadBaud+1
 14617  11AA  0828               	movf	??i1_ReadBaud,w
 14618  11AB  00A4               	movwf	?i1_ReadBaud
 14619  11AC  0008               	return
 14620  11AD                     __end_ofi1_ReadBaud:	
 14621                           
 14622                           	psect	text52
 14623  1E06                     __ptext52:	
 14624 ;; *************** function i1_ReadFlash_4Byte *****************
 14625 ;; Defined at:
 14626 ;;		line 62 in file "FLASH.c"
 14627 ;; Parameters:    Size  Location     Type
 14628 ;;  row             2    5[COMMON] unsigned int 
 14629 ;;  column          1    7[COMMON] unsigned char 
 14630 ;; Auto vars:     Size  Location     Type
 14631 ;;  ReadFlash_4B    4    0[BANK0 ] unsigned long 
 14632 ;; Return value:  Size  Location     Type
 14633 ;;                  4    5[COMMON] unsigned long 
 14634 ;; Registers used:
 14635 ;;		wreg, status,2, status,0, pclath, cstack
 14636 ;; Tracked objects:
 14637 ;;		On entry : 0/0
 14638 ;;		On exit  : 0/0
 14639 ;;		Unchanged: 0/0
 14640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14641 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14642 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14643 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14644 ;;      Totals:         9       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14645 ;;Total ram usage:       13 bytes
 14646 ;; Hardware stack levels used:    1
 14647 ;; Hardware stack levels required when called:    1
 14648 ;; This function calls:
 14649 ;;		i1_ReadFlash_2Byte
 14650 ;; This function is called by:
 14651 ;;		i1_ReadBaud
 14652 ;; This function uses a non-reentrant model
 14653 ;;
 14654                           
 14655                           
 14656                           ;psect for function i1_ReadFlash_4Byte
 14657  1E06                     i1_ReadFlash_4Byte:	
 14658                           
 14659                           ;FLASH.c: 64: unsigned long temp =0;
 14660                           
 14661                           ;incstack = 0
 14662                           ; Regs used in i1_ReadFlash_4Byte: [wreg+status,2+status,0+pclath+cstack]
 14663  1E06  3000               	movlw	0
 14664  1E07  0020               	movlb	0	; select bank0
 14665  1E08  00A3               	movwf	i1ReadFlash_4Byte@temp+3
 14666  1E09  3000               	movlw	0
 14667  1E0A  00A2               	movwf	i1ReadFlash_4Byte@temp+2
 14668  1E0B  3000               	movlw	0
 14669  1E0C  00A1               	movwf	i1ReadFlash_4Byte@temp+1
 14670  1E0D  3000               	movlw	0
 14671  1E0E  00A0               	movwf	i1ReadFlash_4Byte@temp
 14672                           
 14673                           ;FLASH.c: 65: temp = ((unsigned long)ReadFlash_2Byte(row, column) << 16);
 14674  1E0F  0876               	movf	i1ReadFlash_4Byte@row+1,w
 14675  1E10  01F1               	clrf	i1ReadFlash_2Byte@row+1
 14676  1E11  07F1               	addwf	i1ReadFlash_2Byte@row+1,f
 14677  1E12  0875               	movf	i1ReadFlash_4Byte@row,w
 14678  1E13  01F0               	clrf	i1ReadFlash_2Byte@row
 14679  1E14  07F0               	addwf	i1ReadFlash_2Byte@row,f
 14680  1E15  0877               	movf	i1ReadFlash_4Byte@column,w
 14681  1E16  00F9               	movwf	??i1_ReadFlash_4Byte
 14682  1E17  0879               	movf	??i1_ReadFlash_4Byte,w
 14683  1E18  00F2               	movwf	i1ReadFlash_2Byte@column
 14684  1E19  319A  2223  319E   	fcall	i1_ReadFlash_2Byte
 14685  1E1C  0870               	movf	?i1_ReadFlash_2Byte,w
 14686  1E1D  00FA               	movwf	??i1_ReadFlash_4Byte+1
 14687  1E1E  0871               	movf	?i1_ReadFlash_2Byte+1,w
 14688  1E1F  00FB               	movwf	??i1_ReadFlash_4Byte+2
 14689  1E20  01FC               	clrf	??i1_ReadFlash_4Byte+3
 14690  1E21  01FD               	clrf	??i1_ReadFlash_4Byte+4
 14691  1E22  3010               	movlw	16
 14692  1E23                     u420_25:	
 14693  1E23  35FA               	lslf	??i1_ReadFlash_4Byte+1,f
 14694  1E24  0DFB               	rlf	??i1_ReadFlash_4Byte+2,f
 14695  1E25  0DFC               	rlf	??i1_ReadFlash_4Byte+3,f
 14696  1E26  0DFD               	rlf	??i1_ReadFlash_4Byte+4,f
 14697  1E27  0B89               	decfsz	9,f
 14698  1E28  2E23               	goto	u420_25
 14699  1E29  087D               	movf	??i1_ReadFlash_4Byte+4,w
 14700  1E2A  0020               	movlb	0	; select bank0
 14701  1E2B  00A3               	movwf	i1ReadFlash_4Byte@temp+3
 14702  1E2C  087C               	movf	??i1_ReadFlash_4Byte+3,w
 14703  1E2D  00A2               	movwf	i1ReadFlash_4Byte@temp+2
 14704  1E2E  087B               	movf	??i1_ReadFlash_4Byte+2,w
 14705  1E2F  00A1               	movwf	i1ReadFlash_4Byte@temp+1
 14706  1E30  087A               	movf	??i1_ReadFlash_4Byte+1,w
 14707  1E31  00A0               	movwf	i1ReadFlash_4Byte@temp
 14708                           
 14709                           ;FLASH.c: 66: temp |= ((unsigned long)ReadFlash_2Byte(row, (column + 1)));
 14710  1E32  0876               	movf	i1ReadFlash_4Byte@row+1,w
 14711  1E33  01F1               	clrf	i1ReadFlash_2Byte@row+1
 14712  1E34  07F1               	addwf	i1ReadFlash_2Byte@row+1,f
 14713  1E35  0875               	movf	i1ReadFlash_4Byte@row,w
 14714  1E36  01F0               	clrf	i1ReadFlash_2Byte@row
 14715  1E37  07F0               	addwf	i1ReadFlash_2Byte@row,f
 14716  1E38  0877               	movf	i1ReadFlash_4Byte@column,w
 14717  1E39  3E01               	addlw	1
 14718  1E3A  00F9               	movwf	??i1_ReadFlash_4Byte
 14719  1E3B  0879               	movf	??i1_ReadFlash_4Byte,w
 14720  1E3C  00F2               	movwf	i1ReadFlash_2Byte@column
 14721  1E3D  319A  2223         	fcall	i1_ReadFlash_2Byte
 14722  1E3F  0870               	movf	?i1_ReadFlash_2Byte,w
 14723  1E40  00FA               	movwf	??i1_ReadFlash_4Byte+1
 14724  1E41  0871               	movf	?i1_ReadFlash_2Byte+1,w
 14725  1E42  00FB               	movwf	??i1_ReadFlash_4Byte+2
 14726  1E43  01FC               	clrf	??i1_ReadFlash_4Byte+3
 14727  1E44  01FD               	clrf	??i1_ReadFlash_4Byte+4
 14728  1E45  087A               	movf	??i1_ReadFlash_4Byte+1,w
 14729  1E46  0020               	movlb	0	; select bank0
 14730  1E47  04A0               	iorwf	i1ReadFlash_4Byte@temp,f
 14731  1E48  087B               	movf	??i1_ReadFlash_4Byte+2,w
 14732  1E49  04A1               	iorwf	i1ReadFlash_4Byte@temp+1,f
 14733  1E4A  087C               	movf	??i1_ReadFlash_4Byte+3,w
 14734  1E4B  04A2               	iorwf	i1ReadFlash_4Byte@temp+2,f
 14735  1E4C  087D               	movf	??i1_ReadFlash_4Byte+4,w
 14736  1E4D  04A3               	iorwf	i1ReadFlash_4Byte@temp+3,f
 14737                           
 14738                           ;FLASH.c: 67: return temp;
 14739  1E4E  0823               	movf	i1ReadFlash_4Byte@temp+3,w
 14740  1E4F  00F8               	movwf	?i1_ReadFlash_4Byte+3
 14741  1E50  0822               	movf	i1ReadFlash_4Byte@temp+2,w
 14742  1E51  00F7               	movwf	?i1_ReadFlash_4Byte+2
 14743  1E52  0821               	movf	i1ReadFlash_4Byte@temp+1,w
 14744  1E53  00F6               	movwf	?i1_ReadFlash_4Byte+1
 14745  1E54  0820               	movf	i1ReadFlash_4Byte@temp,w
 14746  1E55  00F5               	movwf	?i1_ReadFlash_4Byte
 14747  1E56  0008               	return
 14748  1E57                     __end_ofi1_ReadFlash_4Byte:	
 14749                           
 14750                           	psect	text53
 14751  1525                     __ptext53:	
 14752 ;; *************** function i1_InitUART *****************
 14753 ;; Defined at:
 14754 ;;		line 75 in file "UART.c"
 14755 ;; Parameters:    Size  Location     Type
 14756 ;;  Baud            4    0[BANK0 ] unsigned long 
 14757 ;;  parity          1    4[BANK0 ] unsigned char 
 14758 ;; Auto vars:     Size  Location     Type
 14759 ;;  InitUART        4   17[BANK0 ] unsigned long 
 14760 ;;  InitUART        2   13[BANK0 ] unsigned int 
 14761 ;;  InitUART        1   16[BANK0 ] unsigned char 
 14762 ;;  InitUART        1   15[BANK0 ] unsigned char 
 14763 ;; Return value:  Size  Location     Type
 14764 ;;		None               void
 14765 ;; Registers used:
 14766 ;;		wreg, status,2, status,0, pclath, cstack
 14767 ;; Tracked objects:
 14768 ;;		On entry : 0/0
 14769 ;;		On exit  : 0/0
 14770 ;;		Unchanged: 0/0
 14771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14772 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14773 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14774 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14775 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14776 ;;Total ram usage:       21 bytes
 14777 ;; Hardware stack levels used:    1
 14778 ;; Hardware stack levels required when called:    1
 14779 ;; This function calls:
 14780 ;;		i1_CloseUSART
 14781 ;;		i1_OpenUSART
 14782 ;;		i1_ReadUSART
 14783 ;;		i1___lldiv
 14784 ;;		i1_baudUSART
 14785 ;; This function is called by:
 14786 ;;		_SetBaud
 14787 ;; This function uses a non-reentrant model
 14788 ;;
 14789                           
 14790                           
 14791                           ;psect for function i1_InitUART
 14792  1525                     i1_InitUART:	
 14793                           
 14794                           ;UART.c: 77: unsigned long temp;
 14795                           ;UART.c: 78: unsigned char config;
 14796                           ;UART.c: 79: unsigned int spbrg;
 14797                           ;UART.c: 80: unsigned char baudconfig;
 14798                           ;UART.c: 90: LATC |= 0b00000100;
 14799                           
 14800                           ;incstack = 0
 14801                           ; Regs used in i1_InitUART: [wreg+status,2+status,0+pclath+cstack]
 14802  1525  0022               	movlb	2	; select bank2
 14803  1526  150E               	bsf	14,2	;volatile
 14804                           
 14805                           ;UART.c: 91: PPSLOCK =0;
 14806  1527  003C               	movlb	28	; select bank28
 14807  1528  018F               	clrf	15	;volatile
 14808                           
 14809                           ;UART.c: 92: RC2PPS = 0b00000000;
 14810  1529  003D               	movlb	29	; select bank29
 14811  152A  01A2               	clrf	34	;volatile
 14812                           
 14813                           ;UART.c: 93: PPSLOCK =1;
 14814  152B  3001               	movlw	1
 14815  152C  003C               	movlb	28	; select bank28
 14816  152D  008F               	movwf	15	;volatile
 14817                           
 14818                           ;UART.c: 95: CloseUSART();
 14819  152E  3199  213B  3195   	fcall	i1_CloseUSART
 14820                           
 14821                           ;UART.c: 96: config =0;
 14822  1531  0020               	movlb	0	; select bank0
 14823  1532  01B0               	clrf	i1InitUART@config
 14824                           
 14825                           ;UART.c: 97: baudconfig =0;
 14826  1533  01AF               	clrf	i1InitUART@baudconfig
 14827                           
 14828                           ;UART.c: 102: config |= 0b00001000;
 14829  1534  15B0               	bsf	i1InitUART@config,3
 14830                           
 14831                           ;UART.c: 103: config |= 0b00010000;
 14832  1535  1630               	bsf	i1InitUART@config,4
 14833                           
 14834                           ;UART.c: 104: PARITY = parity;
 14835  1536  0824               	movf	i1InitUART@parity,w
 14836  1537  00A5               	movwf	??i1_InitUART
 14837  1538  0825               	movf	??i1_InitUART,w
 14838  1539  0024               	movlb	4	; select bank4
 14839  153A  00E0               	movwf	_PARITY^(0+512)
 14840                           
 14841                           ;UART.c: 105: BAUD = Baud;
 14842  153B  0020               	movlb	0	; select bank0
 14843  153C  0823               	movf	i1InitUART@Baud+3,w
 14844  153D  0024               	movlb	4	; select bank4
 14845  153E  00E4               	movwf	(_BAUD+3)^(0+512)
 14846  153F  0020               	movlb	0	; select bank0
 14847  1540  0822               	movf	i1InitUART@Baud+2,w
 14848  1541  0024               	movlb	4	; select bank4
 14849  1542  00E3               	movwf	(_BAUD+2)^(0+512)
 14850  1543  0020               	movlb	0	; select bank0
 14851  1544  0821               	movf	i1InitUART@Baud+1,w
 14852  1545  0024               	movlb	4	; select bank4
 14853  1546  00E2               	movwf	(_BAUD+1)^(0+512)
 14854  1547  0020               	movlb	0	; select bank0
 14855  1548  0820               	movf	i1InitUART@Baud,w
 14856  1549  0024               	movlb	4	; select bank4
 14857  154A  00E1               	movwf	_BAUD^(0+512)
 14858                           
 14859                           ;UART.c: 106: if(parity)
 14860  154B  0020               	movlb	0	; select bank0
 14861  154C  0824               	movf	i1InitUART@parity,w
 14862  154D  1903               	btfsc	3,2
 14863  154E  2D51               	goto	i1l4287
 14864                           
 14865                           ;UART.c: 107: {
 14866                           ;UART.c: 108: config |= 0b00000010;
 14867  154F  14B0               	bsf	i1InitUART@config,1
 14868                           
 14869                           ;UART.c: 109: }
 14870  1550  2D55               	goto	i1l4289
 14871  1551                     i1l4287:	
 14872                           
 14873                           ;UART.c: 110: else
 14874                           ;UART.c: 111: {
 14875                           ;UART.c: 112: config &= ~0b00000010;
 14876  1551  30FD               	movlw	253
 14877  1552  00A5               	movwf	??i1_InitUART
 14878  1553  0825               	movf	??i1_InitUART,w
 14879  1554  05B0               	andwf	i1InitUART@config,f
 14880  1555                     i1l4289:	
 14881                           
 14882                           ;UART.c: 113: }
 14883                           ;UART.c: 114: baudconfig |= 0b00001000;
 14884  1555  15AF               	bsf	i1InitUART@baudconfig,3
 14885                           
 14886                           ;UART.c: 117: temp = (32000000L / Baud) - 1;
 14887  1556  0823               	movf	i1InitUART@Baud+3,w
 14888  1557  00F3               	movwf	i1___lldiv@divisor+3
 14889  1558  0822               	movf	i1InitUART@Baud+2,w
 14890  1559  00F2               	movwf	i1___lldiv@divisor+2
 14891  155A  0821               	movf	i1InitUART@Baud+1,w
 14892  155B  00F1               	movwf	i1___lldiv@divisor+1
 14893  155C  0820               	movf	i1InitUART@Baud,w
 14894  155D  00F0               	movwf	i1___lldiv@divisor
 14895  155E  3001               	movlw	1
 14896  155F  00F7               	movwf	i1___lldiv@dividend+3
 14897  1560  30E8               	movlw	232
 14898  1561  00F6               	movwf	i1___lldiv@dividend+2
 14899  1562  3048               	movlw	72
 14900  1563  00F5               	movwf	i1___lldiv@dividend+1
 14901  1564  3000               	movlw	0
 14902  1565  00F4               	movwf	i1___lldiv@dividend
 14903  1566  319E  26A8  3195   	fcall	i1___lldiv
 14904  1569  30FF               	movlw	255
 14905  156A  0770               	addwf	?i1___lldiv,w
 14906  156B  0020               	movlb	0	; select bank0
 14907  156C  00B1               	movwf	i1InitUART@temp
 14908  156D  30FF               	movlw	255
 14909  156E  3D71               	addwfc	?i1___lldiv+1,w
 14910  156F  00B2               	movwf	i1InitUART@temp+1
 14911  1570  30FF               	movlw	255
 14912  1571  3D72               	addwfc	?i1___lldiv+2,w
 14913  1572  00B3               	movwf	i1InitUART@temp+2
 14914  1573  30FF               	movlw	255
 14915  1574  3D73               	addwfc	?i1___lldiv+3,w
 14916  1575  00B4               	movwf	i1InitUART@temp+3
 14917                           
 14918                           ;UART.c: 118: temp = (temp >> 2) - 1;
 14919  1576  30FF               	movlw	255
 14920  1577  00A5               	movwf	??i1_InitUART
 14921  1578  30FF               	movlw	255
 14922  1579  00A6               	movwf	??i1_InitUART+1
 14923  157A  30FF               	movlw	255
 14924  157B  00A7               	movwf	??i1_InitUART+2
 14925  157C  30FF               	movlw	255
 14926  157D  00A8               	movwf	??i1_InitUART+3
 14927  157E  0831               	movf	i1InitUART@temp,w
 14928  157F  00A9               	movwf	??i1_InitUART+4
 14929  1580  0832               	movf	i1InitUART@temp+1,w
 14930  1581  00AA               	movwf	??i1_InitUART+5
 14931  1582  0833               	movf	i1InitUART@temp+2,w
 14932  1583  00AB               	movwf	??i1_InitUART+6
 14933  1584  0834               	movf	i1InitUART@temp+3,w
 14934  1585  00AC               	movwf	??i1_InitUART+7
 14935  1586  3002               	movlw	2
 14936  1587                     u482_25:	
 14937  1587  36AC               	lsrf	??i1_InitUART+7,f
 14938  1588  0CAB               	rrf	??i1_InitUART+6,f
 14939  1589  0CAA               	rrf	??i1_InitUART+5,f
 14940  158A  0CA9               	rrf	??i1_InitUART+4,f
 14941  158B  0B89               	decfsz	9,f
 14942  158C  2D87               	goto	u482_25
 14943  158D  0829               	movf	??i1_InitUART+4,w
 14944  158E  07A5               	addwf	??i1_InitUART,f
 14945  158F  082A               	movf	??i1_InitUART+5,w
 14946  1590  3DA6               	addwfc	??i1_InitUART+1,f
 14947  1591  082B               	movf	??i1_InitUART+6,w
 14948  1592  3DA7               	addwfc	??i1_InitUART+2,f
 14949  1593  082C               	movf	??i1_InitUART+7,w
 14950  1594  3DA8               	addwfc	??i1_InitUART+3,f
 14951  1595  0828               	movf	??i1_InitUART+3,w
 14952  1596  00B4               	movwf	i1InitUART@temp+3
 14953  1597  0827               	movf	??i1_InitUART+2,w
 14954  1598  00B3               	movwf	i1InitUART@temp+2
 14955  1599  0826               	movf	??i1_InitUART+1,w
 14956  159A  00B2               	movwf	i1InitUART@temp+1
 14957  159B  0825               	movf	??i1_InitUART,w
 14958  159C  00B1               	movwf	i1InitUART@temp
 14959                           
 14960                           ;UART.c: 119: spbrg = (unsigned int)temp;
 14961  159D  0832               	movf	i1InitUART@temp+1,w
 14962  159E  01AE               	clrf	i1InitUART@spbrg+1
 14963  159F  07AE               	addwf	i1InitUART@spbrg+1,f
 14964  15A0  0831               	movf	i1InitUART@temp,w
 14965  15A1  01AD               	clrf	i1InitUART@spbrg
 14966  15A2  07AD               	addwf	i1InitUART@spbrg,f
 14967                           
 14968                           ;UART.c: 121: RCSTAbits.CREN = 0;
 14969  15A3  0023               	movlb	3	; select bank3
 14970  15A4  121D               	bcf	29,4	;volatile
 14971                           
 14972                           ;UART.c: 122: OpenUSART(config, spbrg);
 14973  15A5  0020               	movlb	0	; select bank0
 14974  15A6  082E               	movf	i1InitUART@spbrg+1,w
 14975  15A7  01F1               	clrf	i1OpenUSART@spbrg+1
 14976  15A8  07F1               	addwf	i1OpenUSART@spbrg+1,f
 14977  15A9  082D               	movf	i1InitUART@spbrg,w
 14978  15AA  01F0               	clrf	i1OpenUSART@spbrg
 14979  15AB  07F0               	addwf	i1OpenUSART@spbrg,f
 14980  15AC  0830               	movf	i1InitUART@config,w
 14981  15AD  319A  22A3  3195   	fcall	i1_OpenUSART
 14982                           
 14983                           ;UART.c: 123: baudUSART(baudconfig);
 14984  15B0  0020               	movlb	0	; select bank0
 14985  15B1  082F               	movf	i1InitUART@baudconfig,w
 14986  15B2  3198  20B7  3195   	fcall	i1_baudUSART
 14987                           
 14988                           ;UART.c: 124: temp = ReadUSART();
 14989  15B5  3198  20DF  3195   	fcall	i1_ReadUSART
 14990  15B8  0020               	movlb	0	; select bank0
 14991  15B9  00A5               	movwf	??i1_InitUART
 14992  15BA  01A6               	clrf	??i1_InitUART+1
 14993  15BB  01A7               	clrf	??i1_InitUART+2
 14994  15BC  01A8               	clrf	??i1_InitUART+3
 14995  15BD  0828               	movf	??i1_InitUART+3,w
 14996  15BE  00B4               	movwf	i1InitUART@temp+3
 14997  15BF  0827               	movf	??i1_InitUART+2,w
 14998  15C0  00B3               	movwf	i1InitUART@temp+2
 14999  15C1  0826               	movf	??i1_InitUART+1,w
 15000  15C2  00B2               	movwf	i1InitUART@temp+1
 15001  15C3  0825               	movf	??i1_InitUART,w
 15002  15C4  00B1               	movwf	i1InitUART@temp
 15003                           
 15004                           ;UART.c: 125: temp = ReadUSART();
 15005  15C5  3198  20DF  3195   	fcall	i1_ReadUSART
 15006  15C8  0020               	movlb	0	; select bank0
 15007  15C9  00A5               	movwf	??i1_InitUART
 15008  15CA  01A6               	clrf	??i1_InitUART+1
 15009  15CB  01A7               	clrf	??i1_InitUART+2
 15010  15CC  01A8               	clrf	??i1_InitUART+3
 15011  15CD  0828               	movf	??i1_InitUART+3,w
 15012  15CE  00B4               	movwf	i1InitUART@temp+3
 15013  15CF  0827               	movf	??i1_InitUART+2,w
 15014  15D0  00B3               	movwf	i1InitUART@temp+2
 15015  15D1  0826               	movf	??i1_InitUART+1,w
 15016  15D2  00B2               	movwf	i1InitUART@temp+1
 15017  15D3  0825               	movf	??i1_InitUART,w
 15018  15D4  00B1               	movwf	i1InitUART@temp
 15019                           
 15020                           ;UART.c: 126: temp = ReadUSART();
 15021  15D5  3198  20DF  3195   	fcall	i1_ReadUSART
 15022  15D8  0020               	movlb	0	; select bank0
 15023  15D9  00A5               	movwf	??i1_InitUART
 15024  15DA  01A6               	clrf	??i1_InitUART+1
 15025  15DB  01A7               	clrf	??i1_InitUART+2
 15026  15DC  01A8               	clrf	??i1_InitUART+3
 15027  15DD  0828               	movf	??i1_InitUART+3,w
 15028  15DE  00B4               	movwf	i1InitUART@temp+3
 15029  15DF  0827               	movf	??i1_InitUART+2,w
 15030  15E0  00B3               	movwf	i1InitUART@temp+2
 15031  15E1  0826               	movf	??i1_InitUART+1,w
 15032  15E2  00B2               	movwf	i1InitUART@temp+1
 15033  15E3  0825               	movf	??i1_InitUART,w
 15034  15E4  00B1               	movwf	i1InitUART@temp
 15035                           
 15036                           ;UART.c: 127: temp = ReadUSART();
 15037  15E5  3198  20DF  3195   	fcall	i1_ReadUSART
 15038  15E8  0020               	movlb	0	; select bank0
 15039  15E9  00A5               	movwf	??i1_InitUART
 15040  15EA  01A6               	clrf	??i1_InitUART+1
 15041  15EB  01A7               	clrf	??i1_InitUART+2
 15042  15EC  01A8               	clrf	??i1_InitUART+3
 15043  15ED  0828               	movf	??i1_InitUART+3,w
 15044  15EE  00B4               	movwf	i1InitUART@temp+3
 15045  15EF  0827               	movf	??i1_InitUART+2,w
 15046  15F0  00B3               	movwf	i1InitUART@temp+2
 15047  15F1  0826               	movf	??i1_InitUART+1,w
 15048  15F2  00B2               	movwf	i1InitUART@temp+1
 15049  15F3  0825               	movf	??i1_InitUART,w
 15050  15F4  00B1               	movwf	i1InitUART@temp
 15051                           
 15052                           ;UART.c: 128: temp = ReadUSART();
 15053  15F5  3198  20DF         	fcall	i1_ReadUSART
 15054  15F7  0020               	movlb	0	; select bank0
 15055  15F8  00A5               	movwf	??i1_InitUART
 15056  15F9  01A6               	clrf	??i1_InitUART+1
 15057  15FA  01A7               	clrf	??i1_InitUART+2
 15058  15FB  01A8               	clrf	??i1_InitUART+3
 15059  15FC  0828               	movf	??i1_InitUART+3,w
 15060  15FD  00B4               	movwf	i1InitUART@temp+3
 15061  15FE  0827               	movf	??i1_InitUART+2,w
 15062  15FF  00B3               	movwf	i1InitUART@temp+2
 15063  1600  0826               	movf	??i1_InitUART+1,w
 15064  1601  00B2               	movwf	i1InitUART@temp+1
 15065  1602  0825               	movf	??i1_InitUART,w
 15066  1603  00B1               	movwf	i1InitUART@temp
 15067                           
 15068                           ;UART.c: 130: PPSLOCK =0;
 15069  1604  003C               	movlb	28	; select bank28
 15070  1605  018F               	clrf	15	;volatile
 15071                           
 15072                           ;UART.c: 131: RC2PPS = 0b00010100;
 15073  1606  3014               	movlw	20
 15074  1607  003D               	movlb	29	; select bank29
 15075  1608  00A2               	movwf	34	;volatile
 15076                           
 15077                           ;UART.c: 132: CKPPS = 0b00010010;
 15078  1609  3012               	movlw	18
 15079  160A  003C               	movlb	28	; select bank28
 15080  160B  00A5               	movwf	37	;volatile
 15081                           
 15082                           ;UART.c: 134: RXPPS = 0b00010101;
 15083  160C  3015               	movlw	21
 15084  160D  00A4               	movwf	36	;volatile
 15085                           
 15086                           ;UART.c: 136: PPSLOCK =1;
 15087  160E  3001               	movlw	1
 15088  160F  008F               	movwf	15	;volatile
 15089                           
 15090                           ;UART.c: 138: PIR1bits.RCIF = 0;
 15091  1610  0020               	movlb	0	; select bank0
 15092  1611  1291               	bcf	17,5	;volatile
 15093                           
 15094                           ;UART.c: 139: INTCONbits.PEIE = 1;
 15095  1612  170B               	bsf	11,6	;volatile
 15096  1613  0008               	return
 15097  1614                     __end_ofi1_InitUART:	
 15098                           
 15099                           	psect	text54
 15100  18B7                     __ptext54:	
 15101 ;; *************** function i1_baudUSART *****************
 15102 ;; Defined at:
 15103 ;;		line 147 in file "UART.c"
 15104 ;; Parameters:    Size  Location     Type
 15105 ;;  baudconfig      1    wreg     unsigned char 
 15106 ;; Auto vars:     Size  Location     Type
 15107 ;;  baudconfig      1    0[COMMON] unsigned char 
 15108 ;; Return value:  Size  Location     Type
 15109 ;;		None               void
 15110 ;; Registers used:
 15111 ;;		wreg, status,2
 15112 ;; Tracked objects:
 15113 ;;		On entry : 0/0
 15114 ;;		On exit  : 0/0
 15115 ;;		Unchanged: 0/0
 15116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15118 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15120 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15121 ;;Total ram usage:        1 bytes
 15122 ;; Hardware stack levels used:    1
 15123 ;; This function calls:
 15124 ;;		Nothing
 15125 ;; This function is called by:
 15126 ;;		i1_InitUART
 15127 ;; This function uses a non-reentrant model
 15128 ;;
 15129                           
 15130                           
 15131                           ;psect for function i1_baudUSART
 15132  18B7                     i1_baudUSART:	
 15133                           
 15134                           ;incstack = 0
 15135                           ; Regs used in i1_baudUSART: [wreg+status,2]
 15136                           ;i1baudUSART@baudconfig stored from wreg
 15137  18B7  00F0               	movwf	i1baudUSART@baudconfig
 15138                           
 15139                           ;UART.c: 149: BAUD1CON =0;
 15140  18B8  0023               	movlb	3	; select bank3
 15141  18B9  019F               	clrf	31	;volatile
 15142                           
 15143                           ;UART.c: 150: BAUD1CON = baudconfig;
 15144  18BA  0870               	movf	i1baudUSART@baudconfig,w
 15145  18BB  009F               	movwf	31	;volatile
 15146  18BC  0008               	return
 15147  18BD                     __end_ofi1_baudUSART:	
 15148                           
 15149                           	psect	text55
 15150  1EA8                     __ptext55:	
 15151 ;; *************** function i1___lldiv *****************
 15152 ;; Defined at:
 15153 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
 15154 ;; Parameters:    Size  Location     Type
 15155 ;;  divisor         4    0[COMMON] unsigned long 
 15156 ;;  dividend        4    4[COMMON] unsigned long 
 15157 ;; Auto vars:     Size  Location     Type
 15158 ;;  __lldiv         4    9[COMMON] unsigned long 
 15159 ;;  __lldiv         1   13[COMMON] unsigned char 
 15160 ;; Return value:  Size  Location     Type
 15161 ;;                  4    0[COMMON] unsigned long 
 15162 ;; Registers used:
 15163 ;;		wreg, status,2, status,0
 15164 ;; Tracked objects:
 15165 ;;		On entry : 0/0
 15166 ;;		On exit  : 0/0
 15167 ;;		Unchanged: 0/0
 15168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15169 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15170 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15171 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15172 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15173 ;;Total ram usage:       14 bytes
 15174 ;; Hardware stack levels used:    1
 15175 ;; This function calls:
 15176 ;;		Nothing
 15177 ;; This function is called by:
 15178 ;;		i1_InitUART
 15179 ;;		i1_sprintf
 15180 ;; This function uses a non-reentrant model
 15181 ;;
 15182                           
 15183                           
 15184                           ;psect for function i1___lldiv
 15185  1EA8                     i1___lldiv:	
 15186                           
 15187                           ;incstack = 0
 15188                           ; Regs used in i1___lldiv: [wreg+status,2+status,0]
 15189  1EA8  3000               	movlw	0
 15190  1EA9  00FC               	movwf	i1___lldiv@quotient+3
 15191  1EAA  3000               	movlw	0
 15192  1EAB  00FB               	movwf	i1___lldiv@quotient+2
 15193  1EAC  3000               	movlw	0
 15194  1EAD  00FA               	movwf	i1___lldiv@quotient+1
 15195  1EAE  3000               	movlw	0
 15196  1EAF  00F9               	movwf	i1___lldiv@quotient
 15197  1EB0  0873               	movf	i1___lldiv@divisor+3,w
 15198  1EB1  0472               	iorwf	i1___lldiv@divisor+2,w
 15199  1EB2  0471               	iorwf	i1___lldiv@divisor+1,w
 15200  1EB3  0470               	iorwf	i1___lldiv@divisor,w
 15201  1EB4  1903               	skipnz
 15202  1EB5  2EF1               	goto	i1l4027
 15203  1EB6  01FD               	clrf	i1___lldiv@counter
 15204  1EB7  0AFD               	incf	i1___lldiv@counter,f
 15205  1EB8                     i1l4013:	
 15206  1EB8  1BF3               	btfsc	i1___lldiv@divisor+3,7
 15207  1EB9  2EC6               	goto	i1l4015
 15208  1EBA  3001               	movlw	1
 15209  1EBB                     u422_25:	
 15210  1EBB  35F0               	lslf	i1___lldiv@divisor,f
 15211  1EBC  0DF1               	rlf	i1___lldiv@divisor+1,f
 15212  1EBD  0DF2               	rlf	i1___lldiv@divisor+2,f
 15213  1EBE  0DF3               	rlf	i1___lldiv@divisor+3,f
 15214  1EBF  0B89               	decfsz	9,f
 15215  1EC0  2EBB               	goto	u422_25
 15216  1EC1  3001               	movlw	1
 15217  1EC2  00F8               	movwf	??i1___lldiv
 15218  1EC3  0878               	movf	??i1___lldiv,w
 15219  1EC4  07FD               	addwf	i1___lldiv@counter,f
 15220  1EC5  2EB8               	goto	i1l4013
 15221  1EC6                     i1l4015:	
 15222  1EC6  3001               	movlw	1
 15223  1EC7                     u424_25:	
 15224  1EC7  35F9               	lslf	i1___lldiv@quotient,f
 15225  1EC8  0DFA               	rlf	i1___lldiv@quotient+1,f
 15226  1EC9  0DFB               	rlf	i1___lldiv@quotient+2,f
 15227  1ECA  0DFC               	rlf	i1___lldiv@quotient+3,f
 15228  1ECB  0B89               	decfsz	9,f
 15229  1ECC  2EC7               	goto	u424_25
 15230  1ECD  0873               	movf	i1___lldiv@divisor+3,w
 15231  1ECE  0277               	subwf	i1___lldiv@dividend+3,w
 15232  1ECF  1D03               	skipz
 15233  1ED0  2EDB               	goto	u425_25
 15234  1ED1  0872               	movf	i1___lldiv@divisor+2,w
 15235  1ED2  0276               	subwf	i1___lldiv@dividend+2,w
 15236  1ED3  1D03               	skipz
 15237  1ED4  2EDB               	goto	u425_25
 15238  1ED5  0871               	movf	i1___lldiv@divisor+1,w
 15239  1ED6  0275               	subwf	i1___lldiv@dividend+1,w
 15240  1ED7  1D03               	skipz
 15241  1ED8  2EDB               	goto	u425_25
 15242  1ED9  0870               	movf	i1___lldiv@divisor,w
 15243  1EDA  0274               	subwf	i1___lldiv@dividend,w
 15244  1EDB                     u425_25:	
 15245  1EDB  1C03               	skipc
 15246  1EDC  2EE6               	goto	i1l4023
 15247  1EDD  0870               	movf	i1___lldiv@divisor,w
 15248  1EDE  02F4               	subwf	i1___lldiv@dividend,f
 15249  1EDF  0871               	movf	i1___lldiv@divisor+1,w
 15250  1EE0  3BF5               	subwfb	i1___lldiv@dividend+1,f
 15251  1EE1  0872               	movf	i1___lldiv@divisor+2,w
 15252  1EE2  3BF6               	subwfb	i1___lldiv@dividend+2,f
 15253  1EE3  0873               	movf	i1___lldiv@divisor+3,w
 15254  1EE4  3BF7               	subwfb	i1___lldiv@dividend+3,f
 15255  1EE5  1479               	bsf	i1___lldiv@quotient,0
 15256  1EE6                     i1l4023:	
 15257  1EE6  3001               	movlw	1
 15258  1EE7                     u426_25:	
 15259  1EE7  36F3               	lsrf	i1___lldiv@divisor+3,f
 15260  1EE8  0CF2               	rrf	i1___lldiv@divisor+2,f
 15261  1EE9  0CF1               	rrf	i1___lldiv@divisor+1,f
 15262  1EEA  0CF0               	rrf	i1___lldiv@divisor,f
 15263  1EEB  0B89               	decfsz	9,f
 15264  1EEC  2EE7               	goto	u426_25
 15265  1EED  3001               	movlw	1
 15266  1EEE  02FD               	subwf	i1___lldiv@counter,f
 15267  1EEF  1D03               	btfss	3,2
 15268  1EF0  2EC6               	goto	i1l4015
 15269  1EF1                     i1l4027:	
 15270  1EF1  087C               	movf	i1___lldiv@quotient+3,w
 15271  1EF2  00F3               	movwf	?i1___lldiv+3
 15272  1EF3  087B               	movf	i1___lldiv@quotient+2,w
 15273  1EF4  00F2               	movwf	?i1___lldiv+2
 15274  1EF5  087A               	movf	i1___lldiv@quotient+1,w
 15275  1EF6  00F1               	movwf	?i1___lldiv+1
 15276  1EF7  0879               	movf	i1___lldiv@quotient,w
 15277  1EF8  00F0               	movwf	?i1___lldiv
 15278  1EF9  0008               	return
 15279  1EFA                     __end_ofi1___lldiv:	
 15280                           
 15281                           	psect	text56
 15282  18DF                     __ptext56:	
 15283 ;; *************** function i1_ReadUSART *****************
 15284 ;; Defined at:
 15285 ;;		line 302 in file "UART.c"
 15286 ;; Parameters:    Size  Location     Type
 15287 ;;		None
 15288 ;; Auto vars:     Size  Location     Type
 15289 ;;  ReadUSART       1    1[COMMON] unsigned char 
 15290 ;; Return value:  Size  Location     Type
 15291 ;;                  1    wreg      unsigned char 
 15292 ;; Registers used:
 15293 ;;		wreg
 15294 ;; Tracked objects:
 15295 ;;		On entry : 0/0
 15296 ;;		On exit  : 0/0
 15297 ;;		Unchanged: 0/0
 15298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15300 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15301 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15302 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15303 ;;Total ram usage:        2 bytes
 15304 ;; Hardware stack levels used:    1
 15305 ;; This function calls:
 15306 ;;		Nothing
 15307 ;; This function is called by:
 15308 ;;		_isr
 15309 ;;		i1_InitUART
 15310 ;; This function uses a non-reentrant model
 15311 ;;
 15312                           
 15313                           
 15314                           ;psect for function i1_ReadUSART
 15315  18DF                     i1_ReadUSART:	
 15316                           
 15317                           ;UART.c: 304: char data;
 15318                           ;UART.c: 306: if(RCSTAbits.OERR)
 15319                           
 15320                           ;incstack = 0
 15321                           ; Regs used in i1_ReadUSART: [wreg]
 15322  18DF  0023               	movlb	3	; select bank3
 15323  18E0  189D               	btfsc	29,1	;volatile
 15324                           
 15325                           ;UART.c: 307: {
 15326                           ;UART.c: 308: RCSTAbits.CREN = 0;
 15327  18E1  121D               	bcf	29,4	;volatile
 15328                           
 15329                           ;UART.c: 309: }
 15330                           ;UART.c: 311: data = RCREG;
 15331  18E2  0819               	movf	25,w	;volatile
 15332  18E3  00F0               	movwf	??i1_ReadUSART
 15333  18E4  0870               	movf	??i1_ReadUSART,w
 15334  18E5  00F1               	movwf	i1ReadUSART@data
 15335                           
 15336                           ;UART.c: 313: return (data);
 15337  18E6  0871               	movf	i1ReadUSART@data,w
 15338  18E7  0008               	return
 15339  18E8                     __end_ofi1_ReadUSART:	
 15340                           
 15341                           	psect	text57
 15342  1AA3                     __ptext57:	
 15343 ;; *************** function i1_OpenUSART *****************
 15344 ;; Defined at:
 15345 ;;		line 158 in file "UART.c"
 15346 ;; Parameters:    Size  Location     Type
 15347 ;;  config          1    wreg     unsigned char 
 15348 ;;  spbrg           2    0[COMMON] unsigned int 
 15349 ;; Auto vars:     Size  Location     Type
 15350 ;;  config          1    2[COMMON] unsigned char 
 15351 ;; Return value:  Size  Location     Type
 15352 ;;		None               void
 15353 ;; Registers used:
 15354 ;;		wreg, status,2
 15355 ;; Tracked objects:
 15356 ;;		On entry : 0/0
 15357 ;;		On exit  : 0/0
 15358 ;;		Unchanged: 0/0
 15359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15360 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15361 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15363 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15364 ;;Total ram usage:        3 bytes
 15365 ;; Hardware stack levels used:    1
 15366 ;; This function calls:
 15367 ;;		Nothing
 15368 ;; This function is called by:
 15369 ;;		i1_InitUART
 15370 ;; This function uses a non-reentrant model
 15371 ;;
 15372                           
 15373                           
 15374                           ;psect for function i1_OpenUSART
 15375  1AA3                     i1_OpenUSART:	
 15376                           
 15377                           ;incstack = 0
 15378                           ; Regs used in i1_OpenUSART: [wreg+status,2]
 15379                           ;i1OpenUSART@config stored from wreg
 15380  1AA3  00F2               	movwf	i1OpenUSART@config
 15381                           
 15382                           ;UART.c: 160: TX1STA = 0;
 15383  1AA4  0023               	movlb	3	; select bank3
 15384  1AA5  019E               	clrf	30	;volatile
 15385                           
 15386                           ;UART.c: 161: RC1STA = 0;
 15387  1AA6  019D               	clrf	29	;volatile
 15388                           
 15389                           ;UART.c: 163: if(config&0x01)
 15390  1AA7  1872               	btfsc	i1OpenUSART@config,0
 15391                           
 15392                           ;UART.c: 164: {
 15393                           ;UART.c: 165: TX1STAbits.SYNC = 1;
 15394  1AA8  161E               	bsf	30,4	;volatile
 15395                           
 15396                           ;UART.c: 166: }
 15397                           ;UART.c: 168: if(config&0x02)
 15398  1AA9  1CF2               	btfss	i1OpenUSART@config,1
 15399  1AAA  2AAD               	goto	i1l3935
 15400                           
 15401                           ;UART.c: 169: {
 15402                           ;UART.c: 170: TX1STAbits.TX9 = 1;
 15403  1AAB  171E               	bsf	30,6	;volatile
 15404                           
 15405                           ;UART.c: 171: RC1STAbits.RX9 = 1;
 15406  1AAC  171D               	bsf	29,6	;volatile
 15407  1AAD                     i1l3935:	
 15408                           
 15409                           ;UART.c: 172: }
 15410                           ;UART.c: 174: if(config&0x04)
 15411  1AAD  1972               	btfsc	i1OpenUSART@config,2
 15412                           
 15413                           ;UART.c: 175: {
 15414                           ;UART.c: 176: TX1STAbits.CSRC = 1;
 15415  1AAE  179E               	bsf	30,7	;volatile
 15416                           
 15417                           ;UART.c: 177: }
 15418                           ;UART.c: 179: if(config&0x08)
 15419  1AAF  1DF2               	btfss	i1OpenUSART@config,3
 15420  1AB0  2AB3               	goto	i1l417
 15421                           
 15422                           ;UART.c: 180: {
 15423                           ;UART.c: 181: RC1STAbits.CREN = 1;
 15424  1AB1  161D               	bsf	29,4	;volatile
 15425                           
 15426                           ;UART.c: 182: }
 15427  1AB2  2AB4               	goto	i1l3943
 15428  1AB3                     i1l417:	
 15429                           
 15430                           ;UART.c: 183: else
 15431                           ;UART.c: 184: {
 15432                           ;UART.c: 185: RC1STAbits.SREN = 1;
 15433  1AB3  169D               	bsf	29,5	;volatile
 15434  1AB4                     i1l3943:	
 15435                           
 15436                           ;UART.c: 186: }
 15437                           ;UART.c: 188: if(config&0x10)
 15438  1AB4  1A72               	btfsc	i1OpenUSART@config,4
 15439                           
 15440                           ;UART.c: 189: {
 15441                           ;UART.c: 190: TX1STAbits.BRGH = 1;
 15442  1AB5  151E               	bsf	30,2	;volatile
 15443                           
 15444                           ;UART.c: 196: }
 15445                           ;UART.c: 198: if(config&0x40)
 15446                           
 15447                           ;UART.c: 194: {
 15448  1AB6  1F72               	btfss	i1OpenUSART@config,6
 15449  1AB7  2ABD               	goto	i1l421
 15450                           
 15451                           ;UART.c: 199: {
 15452                           ;UART.c: 200: PIR1bits.RCIF = 0;
 15453  1AB8  0020               	movlb	0	; select bank0
 15454  1AB9  1291               	bcf	17,5	;volatile
 15455                           
 15456                           ;UART.c: 201: PIE1bits.RCIE = 1;
 15457  1ABA  0021               	movlb	1	; select bank1
 15458  1ABB  1691               	bsf	17,5	;volatile
 15459                           
 15460                           ;UART.c: 203: }
 15461  1ABC  2ABF               	goto	i1l3953
 15462  1ABD                     i1l421:	
 15463                           
 15464                           ;UART.c: 204: else
 15465                           ;UART.c: 205: {
 15466                           ;UART.c: 206: PIE1bits.RCIE = 0;
 15467  1ABD  0021               	movlb	1	; select bank1
 15468  1ABE  1291               	bcf	17,5	;volatile
 15469  1ABF                     i1l3953:	
 15470                           
 15471                           ;UART.c: 207: }
 15472                           ;UART.c: 209: if(config&0x80)
 15473  1ABF  1FF2               	btfss	i1OpenUSART@config,7
 15474  1AC0  2AC6               	goto	i1l423
 15475                           
 15476                           ;UART.c: 210: {
 15477                           ;UART.c: 211: PIR1bits.TXIF = 0;
 15478  1AC1  0020               	movlb	0	; select bank0
 15479  1AC2  1211               	bcf	17,4	;volatile
 15480                           
 15481                           ;UART.c: 212: PIE1bits.TXIE = 1;
 15482  1AC3  0021               	movlb	1	; select bank1
 15483  1AC4  1611               	bsf	17,4	;volatile
 15484                           
 15485                           ;UART.c: 213: }
 15486  1AC5  2AC7               	goto	i1l3957
 15487  1AC6                     i1l423:	
 15488                           
 15489                           ;UART.c: 214: else
 15490                           ;UART.c: 215: {
 15491                           ;UART.c: 216: PIE1bits.TXIE = 0;
 15492  1AC6  1211               	bcf	17,4	;volatile
 15493  1AC7                     i1l3957:	
 15494                           
 15495                           ;UART.c: 217: }
 15496                           ;UART.c: 219: SPBRG = spbrg;
 15497  1AC7  0870               	movf	i1OpenUSART@spbrg,w
 15498  1AC8  0023               	movlb	3	; select bank3
 15499  1AC9  009B               	movwf	27	;volatile
 15500                           
 15501                           ;UART.c: 220: SPBRGH = spbrg >> 8;
 15502  1ACA  0871               	movf	i1OpenUSART@spbrg+1,w
 15503  1ACB  009C               	movwf	28	;volatile
 15504                           
 15505                           ;UART.c: 222: TX1STAbits.TXEN = 1;
 15506  1ACC  169E               	bsf	30,5	;volatile
 15507                           
 15508                           ;UART.c: 223: RC1STAbits.SPEN = 1;
 15509  1ACD  179D               	bsf	29,7	;volatile
 15510  1ACE  0008               	return
 15511  1ACF                     __end_ofi1_OpenUSART:	
 15512                           
 15513                           	psect	text58
 15514  193B                     __ptext58:	
 15515 ;; *************** function i1_CloseUSART *****************
 15516 ;; Defined at:
 15517 ;;		line 62 in file "UART.c"
 15518 ;; Parameters:    Size  Location     Type
 15519 ;;		None
 15520 ;; Auto vars:     Size  Location     Type
 15521 ;;		None
 15522 ;; Return value:  Size  Location     Type
 15523 ;;		None               void
 15524 ;; Registers used:
 15525 ;;		wreg, status,2, status,0
 15526 ;; Tracked objects:
 15527 ;;		On entry : 0/0
 15528 ;;		On exit  : 0/0
 15529 ;;		Unchanged: 0/0
 15530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15533 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15534 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15535 ;;Total ram usage:        1 bytes
 15536 ;; Hardware stack levels used:    1
 15537 ;; This function calls:
 15538 ;;		Nothing
 15539 ;; This function is called by:
 15540 ;;		i1_InitUART
 15541 ;; This function uses a non-reentrant model
 15542 ;;
 15543                           
 15544                           
 15545                           ;psect for function i1_CloseUSART
 15546  193B                     i1_CloseUSART:	
 15547                           
 15548                           ;UART.c: 64: RCSTA&=0b01001111;
 15549                           
 15550                           ;incstack = 0
 15551                           ; Regs used in i1_CloseUSART: [wreg+status,2+status,0]
 15552  193B  304F               	movlw	79
 15553  193C  00F0               	movwf	??i1_CloseUSART
 15554  193D  0870               	movf	??i1_CloseUSART,w
 15555  193E  0023               	movlb	3	; select bank3
 15556  193F  059D               	andwf	29,f	;volatile
 15557                           
 15558                           ;UART.c: 65: TX1STAbits.TXEN=0;
 15559  1940  129E               	bcf	30,5	;volatile
 15560                           
 15561                           ;UART.c: 66: PIE1&=0b11001111;
 15562  1941  30CF               	movlw	207
 15563  1942  00F0               	movwf	??i1_CloseUSART
 15564  1943  0870               	movf	??i1_CloseUSART,w
 15565  1944  0021               	movlb	1	; select bank1
 15566  1945  0591               	andwf	17,f	;volatile
 15567  1946  0008               	return
 15568  1947                     __end_ofi1_CloseUSART:	
 15569                           
 15570                           	psect	text59
 15571  0672                     __ptext59:	
 15572 ;; *************** function _WriteBaud *****************
 15573 ;; Defined at:
 15574 ;;		line 171 in file "FLASH.c"
 15575 ;; Parameters:    Size  Location     Type
 15576 ;;  row             2    0[BANK1 ] unsigned int 
 15577 ;;  Baud            4    2[BANK1 ] unsigned long 
 15578 ;;  Parity          1    6[BANK1 ] unsigned char 
 15579 ;; Auto vars:     Size  Location     Type
 15580 ;;  temp            4   74[BANK0 ] unsigned long 
 15581 ;; Return value:  Size  Location     Type
 15582 ;;		None               void
 15583 ;; Registers used:
 15584 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15585 ;; Tracked objects:
 15586 ;;		On entry : 0/0
 15587 ;;		On exit  : 0/0
 15588 ;;		Unchanged: 0/0
 15589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15590 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 15591 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15592 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
 15593 ;;      Totals:         0       4      15       0       0       0       0       0       0       0       0       0       
      +0       0
 15594 ;;Total ram usage:       19 bytes
 15595 ;; Hardware stack levels used:    1
 15596 ;; Hardware stack levels required when called:    3
 15597 ;; This function calls:
 15598 ;;		_WriteFlash_Sequential
 15599 ;; This function is called by:
 15600 ;;		_SetBaud
 15601 ;; This function uses a non-reentrant model
 15602 ;;
 15603                           
 15604                           
 15605                           ;psect for function _WriteBaud
 15606  0672                     _WriteBaud:	
 15607                           
 15608                           ;FLASH.c: 173: unsigned long temp;
 15609                           ;FLASH.c: 174: temp = (Baud & 0x000FFFFF) + (((unsigned long) Parity & 0x7) << 20);
 15610                           
 15611                           ;incstack = 0
 15612                           ; Regs used in _WriteBaud: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15613  0672  0021               	movlb	1	; select bank1
 15614  0673  0826               	movf	WriteBaud@Parity^(0+128),w
 15615  0674  3907               	andlw	7
 15616  0675  00A7               	movwf	??_WriteBaud^(0+128)
 15617  0676  01A8               	clrf	(??_WriteBaud^(0+128)+1)
 15618  0677  01A9               	clrf	(??_WriteBaud^(0+128)+2)
 15619  0678  01AA               	clrf	(??_WriteBaud^(0+128)+3)
 15620  0679  3014               	movlw	20
 15621  067A                     u454_25:	
 15622  067A  35A7               	lslf	??_WriteBaud^(0+128),f
 15623  067B  0DA8               	rlf	(??_WriteBaud^(0+128)+1),f
 15624  067C  0DA9               	rlf	(??_WriteBaud^(0+128)+2),f
 15625  067D  0DAA               	rlf	(??_WriteBaud^(0+128)+3),f
 15626  067E  0B89               	decfsz	9,f
 15627  067F  2E7A               	goto	u454_25
 15628  0680  30FF               	movlw	255
 15629  0681  0522               	andwf	WriteBaud@Baud^(0+128),w
 15630  0682  00AB               	movwf	(??_WriteBaud+4)^(0+128)
 15631  0683  30FF               	movlw	255
 15632  0684  0523               	andwf	(WriteBaud@Baud+1)^(0+128),w
 15633  0685  00AC               	movwf	((??_WriteBaud+4)^(0+128)+1)
 15634  0686  300F               	movlw	15
 15635  0687  0524               	andwf	(WriteBaud@Baud+2)^(0+128),w
 15636  0688  00AD               	movwf	((??_WriteBaud+4)^(0+128)+2)
 15637  0689  3000               	movlw	0
 15638  068A  0525               	andwf	(WriteBaud@Baud+3)^(0+128),w
 15639  068B  00AE               	movwf	((??_WriteBaud+4)^(0+128)+3)
 15640  068C  082B               	movf	(??_WriteBaud+4)^(0+128),w
 15641  068D  07A7               	addwf	??_WriteBaud^(0+128),f
 15642  068E  082C               	movf	(??_WriteBaud+5)^(0+128),w
 15643  068F  3DA8               	addwfc	(??_WriteBaud^(0+128)+1),f
 15644  0690  082D               	movf	(??_WriteBaud+6)^(0+128),w
 15645  0691  3DA9               	addwfc	(??_WriteBaud^(0+128)+2),f
 15646  0692  082E               	movf	(??_WriteBaud+7)^(0+128),w
 15647  0693  3DAA               	addwfc	(??_WriteBaud^(0+128)+3),f
 15648  0694  082A               	movf	(??_WriteBaud+3)^(0+128),w
 15649  0695  0020               	movlb	0	; select bank0
 15650  0696  00ED               	movwf	WriteBaud@temp+3
 15651  0697  0021               	movlb	1	; select bank1
 15652  0698  0829               	movf	(??_WriteBaud+2)^(0+128),w
 15653  0699  0020               	movlb	0	; select bank0
 15654  069A  00EC               	movwf	WriteBaud@temp+2
 15655  069B  0021               	movlb	1	; select bank1
 15656  069C  0828               	movf	(??_WriteBaud+1)^(0+128),w
 15657  069D  0020               	movlb	0	; select bank0
 15658  069E  00EB               	movwf	WriteBaud@temp+1
 15659  069F  0021               	movlb	1	; select bank1
 15660  06A0  0827               	movf	??_WriteBaud^(0+128),w
 15661  06A1  0020               	movlb	0	; select bank0
 15662  06A2  00EA               	movwf	WriteBaud@temp
 15663                           
 15664                           ;FLASH.c: 175: MEM[1] = (unsigned int) (temp & 0x0003FFF);
 15665  06A3  30FF               	movlw	255
 15666  06A4  056A               	andwf	WriteBaud@temp,w
 15667  06A5  0021               	movlb	1	; select bank1
 15668  06A6  00E4               	movwf	(_MEM^(0+128)+2)
 15669  06A7  303F               	movlw	63
 15670  06A8  0020               	movlb	0	; select bank0
 15671  06A9  056B               	andwf	WriteBaud@temp+1,w
 15672  06AA  0021               	movlb	1	; select bank1
 15673  06AB  00E5               	movwf	((_MEM+1)^(0+128)+2)
 15674                           
 15675                           ;FLASH.c: 176: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
 15676  06AC  0020               	movlb	0	; select bank0
 15677  06AD  086A               	movf	WriteBaud@temp,w
 15678  06AE  0021               	movlb	1	; select bank1
 15679  06AF  00A7               	movwf	??_WriteBaud^(0+128)
 15680  06B0  0020               	movlb	0	; select bank0
 15681  06B1  086B               	movf	WriteBaud@temp+1,w
 15682  06B2  0021               	movlb	1	; select bank1
 15683  06B3  00A8               	movwf	(??_WriteBaud^(0+128)+1)
 15684  06B4  0020               	movlb	0	; select bank0
 15685  06B5  086C               	movf	WriteBaud@temp+2,w
 15686  06B6  0021               	movlb	1	; select bank1
 15687  06B7  00A9               	movwf	(??_WriteBaud^(0+128)+2)
 15688  06B8  0020               	movlb	0	; select bank0
 15689  06B9  086D               	movf	WriteBaud@temp+3,w
 15690  06BA  0021               	movlb	1	; select bank1
 15691  06BB  00AA               	movwf	(??_WriteBaud^(0+128)+3)
 15692  06BC  300E               	movlw	14
 15693  06BD                     u455_25:	
 15694  06BD  36AA               	lsrf	(??_WriteBaud^(0+128)+3),f
 15695  06BE  0CA9               	rrf	(??_WriteBaud^(0+128)+2),f
 15696  06BF  0CA8               	rrf	(??_WriteBaud^(0+128)+1),f
 15697  06C0  0CA7               	rrf	??_WriteBaud^(0+128),f
 15698  06C1  0B89               	decfsz	9,f
 15699  06C2  2EBD               	goto	u455_25
 15700  06C3  30FF               	movlw	255
 15701  06C4  0527               	andwf	??_WriteBaud^(0+128),w
 15702  06C5  00E2               	movwf	_MEM^(0+128)
 15703  06C6  303F               	movlw	63
 15704  06C7  0528               	andwf	(??_WriteBaud+1)^(0+128),w
 15705  06C8  00E3               	movwf	(_MEM+1)^(0+128)
 15706                           
 15707                           ;FLASH.c: 177: WriteFlash_Sequential(row, MEM, 2);
 15708  06C9  0821               	movf	(WriteBaud@row+1)^(0+128),w
 15709  06CA  01FB               	clrf	WriteFlash_Sequential@row+1
 15710  06CB  07FB               	addwf	WriteFlash_Sequential@row+1,f
 15711  06CC  0820               	movf	WriteBaud@row^(0+128),w
 15712  06CD  01FA               	clrf	WriteFlash_Sequential@row
 15713  06CE  07FA               	addwf	WriteFlash_Sequential@row,f
 15714  06CF  30E2               	movlw	_MEM& (0+255)
 15715  06D0  00A7               	movwf	??_WriteBaud^(0+128)
 15716  06D1  0827               	movf	??_WriteBaud^(0+128),w
 15717  06D2  00FC               	movwf	WriteFlash_Sequential@buffer
 15718  06D3  3002               	movlw	2
 15719  06D4  00A8               	movwf	(??_WriteBaud+1)^(0+128)
 15720  06D5  0828               	movf	(??_WriteBaud+1)^(0+128),w
 15721  06D6  00FD               	movwf	WriteFlash_Sequential@amount
 15722  06D7  3193  236E         	fcall	_WriteFlash_Sequential
 15723  06D9  0008               	return
 15724  06DA                     __end_of_WriteBaud:	
 15725                           
 15726                           	psect	text60
 15727  136E                     __ptext60:	
 15728 ;; *************** function _WriteFlash_Sequential *****************
 15729 ;; Defined at:
 15730 ;;		line 112 in file "FLASH.c"
 15731 ;; Parameters:    Size  Location     Type
 15732 ;;  row             2   10[COMMON] unsigned int 
 15733 ;;  buffer          1   12[COMMON] PTR unsigned int 
 15734 ;;		 -> MEM(4), 
 15735 ;;  amount          1   13[COMMON] unsigned char 
 15736 ;; Auto vars:     Size  Location     Type
 15737 ;;  TempBufL       32   35[BANK0 ] unsigned char [32]
 15738 ;;  TempBufH       32    3[BANK0 ] unsigned char [32]
 15739 ;;  temp            2   70[BANK0 ] unsigned int 
 15740 ;;  i               1   73[BANK0 ] unsigned char 
 15741 ;;  spaces          1   72[BANK0 ] unsigned char 
 15742 ;;  amountTemp      1   69[BANK0 ] unsigned char 
 15743 ;;  tempL           1   68[BANK0 ] unsigned char 
 15744 ;;  tempH           1   67[BANK0 ] unsigned char 
 15745 ;; Return value:  Size  Location     Type
 15746 ;;		None               void
 15747 ;; Registers used:
 15748 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15749 ;; Tracked objects:
 15750 ;;		On entry : 0/0
 15751 ;;		On exit  : 0/0
 15752 ;;		Unchanged: 0/0
 15753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15754 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15755 ;;      Locals:         0      71       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15756 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15757 ;;      Totals:         4      74       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15758 ;;Total ram usage:       78 bytes
 15759 ;; Hardware stack levels used:    1
 15760 ;; Hardware stack levels required when called:    2
 15761 ;; This function calls:
 15762 ;;		_BlockErase
 15763 ;;		_UNLOCK
 15764 ;;		i1_ReadFlash_2Byte
 15765 ;;		i1_delayUS
 15766 ;; This function is called by:
 15767 ;;		_WriteBaud
 15768 ;; This function uses a non-reentrant model
 15769 ;;
 15770                           
 15771                           
 15772                           ;psect for function _WriteFlash_Sequential
 15773  136E                     _WriteFlash_Sequential:	
 15774                           
 15775                           ;FLASH.c: 114: unsigned char spaces = 32;
 15776                           
 15777                           ;incstack = 0
 15778                           ; Regs used in _WriteFlash_Sequential: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15779  136E  3020               	movlw	32
 15780  136F  0020               	movlb	0	; select bank0
 15781  1370  00A0               	movwf	??_WriteFlash_Sequential
 15782  1371  0820               	movf	??_WriteFlash_Sequential,w
 15783  1372  00E8               	movwf	WriteFlash_Sequential@spaces
 15784                           
 15785                           ;FLASH.c: 115: unsigned char tempH;
 15786                           ;FLASH.c: 116: unsigned char tempL;
 15787                           ;FLASH.c: 117: unsigned char i;
 15788                           ;FLASH.c: 118: unsigned int temp;
 15789                           ;FLASH.c: 119: unsigned char amountTemp =0;
 15790  1373  01E5               	clrf	WriteFlash_Sequential@amountTemp
 15791                           
 15792                           ;FLASH.c: 120: unsigned char TempBufH[32];
 15793                           ;FLASH.c: 121: unsigned char TempBufL[32];
 15794                           ;FLASH.c: 123: for(i=0;i<spaces;i++)
 15795  1374  01E9               	clrf	WriteFlash_Sequential@i
 15796  1375                     i1l3879:	
 15797  1375  0868               	movf	WriteFlash_Sequential@spaces,w
 15798  1376  0269               	subwf	WriteFlash_Sequential@i,w
 15799  1377  1803               	btfsc	3,0
 15800  1378  2BCB               	goto	i1l3881
 15801                           
 15802                           ;FLASH.c: 124: {
 15803                           ;FLASH.c: 125: amountTemp++;
 15804  1379  3001               	movlw	1
 15805  137A  00A0               	movwf	??_WriteFlash_Sequential
 15806  137B  0820               	movf	??_WriteFlash_Sequential,w
 15807  137C  07E5               	addwf	WriteFlash_Sequential@amountTemp,f
 15808                           
 15809                           ;FLASH.c: 126: if(amountTemp <= amount)
 15810  137D  0865               	movf	WriteFlash_Sequential@amountTemp,w
 15811  137E  027D               	subwf	WriteFlash_Sequential@amount,w
 15812  137F  1C03               	skipc
 15813  1380  2B99               	goto	i1l3867
 15814                           
 15815                           ;FLASH.c: 127: {
 15816                           ;FLASH.c: 128: tempH = (unsigned char)((*buffer & 0x3F00) >> 8);
 15817  1381  087C               	movf	WriteFlash_Sequential@buffer,w
 15818  1382  0086               	movwf	6
 15819  1383  0187               	clrf	7
 15820  1384  3F40               	moviw [0]fsr1
 15821  1385  00A0               	movwf	??_WriteFlash_Sequential
 15822  1386  3F41               	moviw [1]fsr1
 15823  1387  00A1               	movwf	??_WriteFlash_Sequential+1
 15824  1388  0821               	movf	??_WriteFlash_Sequential+1,w
 15825  1389  393F               	andlw	63
 15826  138A  00A2               	movwf	??_WriteFlash_Sequential+2
 15827  138B  0822               	movf	??_WriteFlash_Sequential+2,w
 15828  138C  00E3               	movwf	WriteFlash_Sequential@tempH
 15829                           
 15830                           ;FLASH.c: 129: tempL = (unsigned char)(*buffer & 0x00FF);
 15831  138D  087C               	movf	WriteFlash_Sequential@buffer,w
 15832  138E  0086               	movwf	6
 15833  138F  0187               	clrf	7
 15834  1390  0801               	movf	1,w
 15835  1391  00A0               	movwf	??_WriteFlash_Sequential
 15836  1392  0820               	movf	??_WriteFlash_Sequential,w
 15837  1393  00E4               	movwf	WriteFlash_Sequential@tempL
 15838                           
 15839                           ;FLASH.c: 130: buffer++;
 15840  1394  3002               	movlw	2
 15841  1395  00A0               	movwf	??_WriteFlash_Sequential
 15842  1396  0820               	movf	??_WriteFlash_Sequential,w
 15843  1397  07FC               	addwf	WriteFlash_Sequential@buffer,f
 15844                           
 15845                           ;FLASH.c: 131: }
 15846  1398  2BB6               	goto	i1l3873
 15847  1399                     i1l3867:	
 15848                           
 15849                           ;FLASH.c: 132: else
 15850                           ;FLASH.c: 133: {
 15851                           ;FLASH.c: 135: temp = ReadFlash_2Byte(row, i);
 15852  1399  087B               	movf	WriteFlash_Sequential@row+1,w
 15853  139A  01F1               	clrf	i1ReadFlash_2Byte@row+1
 15854  139B  07F1               	addwf	i1ReadFlash_2Byte@row+1,f
 15855  139C  087A               	movf	WriteFlash_Sequential@row,w
 15856  139D  01F0               	clrf	i1ReadFlash_2Byte@row
 15857  139E  07F0               	addwf	i1ReadFlash_2Byte@row,f
 15858  139F  0869               	movf	WriteFlash_Sequential@i,w
 15859  13A0  00A0               	movwf	??_WriteFlash_Sequential
 15860  13A1  0820               	movf	??_WriteFlash_Sequential,w
 15861  13A2  00F2               	movwf	i1ReadFlash_2Byte@column
 15862  13A3  319A  2223  3193   	fcall	i1_ReadFlash_2Byte
 15863  13A6  0871               	movf	?i1_ReadFlash_2Byte+1,w
 15864  13A7  0020               	movlb	0	; select bank0
 15865  13A8  01E7               	clrf	WriteFlash_Sequential@temp+1
 15866  13A9  07E7               	addwf	WriteFlash_Sequential@temp+1,f
 15867  13AA  0870               	movf	?i1_ReadFlash_2Byte,w
 15868  13AB  01E6               	clrf	WriteFlash_Sequential@temp
 15869  13AC  07E6               	addwf	WriteFlash_Sequential@temp,f
 15870                           
 15871                           ;FLASH.c: 136: tempH = (unsigned char)((temp & 0x3F00) >>8);
 15872  13AD  0867               	movf	WriteFlash_Sequential@temp+1,w
 15873  13AE  393F               	andlw	63
 15874  13AF  00A0               	movwf	??_WriteFlash_Sequential
 15875  13B0  0820               	movf	??_WriteFlash_Sequential,w
 15876  13B1  00E3               	movwf	WriteFlash_Sequential@tempH
 15877                           
 15878                           ;FLASH.c: 137: tempL = (unsigned char)(temp & 0x00FF);
 15879  13B2  0866               	movf	WriteFlash_Sequential@temp,w
 15880  13B3  00A0               	movwf	??_WriteFlash_Sequential
 15881  13B4  0820               	movf	??_WriteFlash_Sequential,w
 15882  13B5  00E4               	movwf	WriteFlash_Sequential@tempL
 15883  13B6                     i1l3873:	
 15884                           
 15885                           ;FLASH.c: 138: }
 15886                           ;FLASH.c: 139: TempBufH[i] = tempH;
 15887  13B6  0863               	movf	WriteFlash_Sequential@tempH,w
 15888  13B7  00A0               	movwf	??_WriteFlash_Sequential
 15889  13B8  0869               	movf	WriteFlash_Sequential@i,w
 15890  13B9  3E23               	addlw	WriteFlash_Sequential@TempBufH& (0+255)
 15891  13BA  0086               	movwf	6
 15892  13BB  0187               	clrf	7
 15893  13BC  0820               	movf	??_WriteFlash_Sequential,w
 15894  13BD  0081               	movwf	1
 15895                           
 15896                           ;FLASH.c: 140: TempBufL[i] = tempL;
 15897  13BE  0864               	movf	WriteFlash_Sequential@tempL,w
 15898  13BF  00A0               	movwf	??_WriteFlash_Sequential
 15899  13C0  0869               	movf	WriteFlash_Sequential@i,w
 15900  13C1  3E43               	addlw	WriteFlash_Sequential@TempBufL& (0+255)
 15901  13C2  0086               	movwf	6
 15902  13C3  0187               	clrf	7
 15903  13C4  0820               	movf	??_WriteFlash_Sequential,w
 15904  13C5  0081               	movwf	1
 15905  13C6  3001               	movlw	1
 15906  13C7  00A0               	movwf	??_WriteFlash_Sequential
 15907  13C8  0820               	movf	??_WriteFlash_Sequential,w
 15908  13C9  07E9               	addwf	WriteFlash_Sequential@i,f
 15909  13CA  2B75               	goto	i1l3879
 15910  13CB                     i1l3881:	
 15911                           
 15912                           ;FLASH.c: 141: }
 15913                           ;FLASH.c: 142: BlockErase(row);
 15914  13CB  087B               	movf	WriteFlash_Sequential@row+1,w
 15915  13CC  01F1               	clrf	BlockErase@row+1
 15916  13CD  07F1               	addwf	BlockErase@row+1,f
 15917  13CE  087A               	movf	WriteFlash_Sequential@row,w
 15918  13CF  01F0               	clrf	BlockErase@row
 15919  13D0  07F0               	addwf	BlockErase@row,f
 15920  13D1  319A  224D  3193   	fcall	_BlockErase
 15921                           
 15922                           ;FLASH.c: 143: delayUS(1000);
 15923  13D4  3000               	movlw	0
 15924  13D5  00F3               	movwf	i1delayUS@US+3
 15925  13D6  3000               	movlw	0
 15926  13D7  00F2               	movwf	i1delayUS@US+2
 15927  13D8  3003               	movlw	3
 15928  13D9  00F1               	movwf	i1delayUS@US+1
 15929  13DA  30E8               	movlw	232
 15930  13DB  00F0               	movwf	i1delayUS@US
 15931  13DC  319B  2393  3193   	fcall	i1_delayUS
 15932                           
 15933                           ;FLASH.c: 144: INTCON &= ~0x80;
 15934  13DF  307F               	movlw	127
 15935  13E0  0020               	movlb	0	; select bank0
 15936  13E1  00A0               	movwf	??_WriteFlash_Sequential
 15937  13E2  0820               	movf	??_WriteFlash_Sequential,w
 15938  13E3  058B               	andwf	11,f	;volatile
 15939                           
 15940                           ;FLASH.c: 145: PMCON1 |= 0b00000100;
 15941  13E4  0023               	movlb	3	; select bank3
 15942  13E5  1515               	bsf	21,2	;volatile
 15943                           
 15944                           ;FLASH.c: 146: PMCON1 &= ~0b01000000;
 15945  13E6  30BF               	movlw	191
 15946  13E7  0020               	movlb	0	; select bank0
 15947  13E8  00A0               	movwf	??_WriteFlash_Sequential
 15948  13E9  0820               	movf	??_WriteFlash_Sequential,w
 15949  13EA  0023               	movlb	3	; select bank3
 15950  13EB  0595               	andwf	21,f	;volatile
 15951                           
 15952                           ;FLASH.c: 147: PMCON1 &= ~0b00100000;
 15953  13EC  30DF               	movlw	223
 15954  13ED  0020               	movlb	0	; select bank0
 15955  13EE  00A0               	movwf	??_WriteFlash_Sequential
 15956  13EF  0820               	movf	??_WriteFlash_Sequential,w
 15957  13F0  0023               	movlb	3	; select bank3
 15958  13F1  0595               	andwf	21,f	;volatile
 15959                           
 15960                           ;FLASH.c: 148: PMCON1 &= ~0b00010000;
 15961  13F2  30EF               	movlw	239
 15962  13F3  0020               	movlb	0	; select bank0
 15963  13F4  00A0               	movwf	??_WriteFlash_Sequential
 15964  13F5  0820               	movf	??_WriteFlash_Sequential,w
 15965  13F6  0023               	movlb	3	; select bank3
 15966  13F7  0595               	andwf	21,f	;volatile
 15967                           
 15968                           ;FLASH.c: 149: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 15969  13F8  087B               	movf	WriteFlash_Sequential@row+1,w
 15970  13F9  0020               	movlb	0	; select bank0
 15971  13FA  00A1               	movwf	??_WriteFlash_Sequential+1
 15972  13FB  087A               	movf	WriteFlash_Sequential@row,w
 15973  13FC  00A0               	movwf	??_WriteFlash_Sequential
 15974  13FD  36A1               	lsrf	??_WriteFlash_Sequential+1,f
 15975  13FE  0CA0               	rrf	??_WriteFlash_Sequential,f
 15976  13FF  36A1               	lsrf	??_WriteFlash_Sequential+1,f
 15977  1400  0CA0               	rrf	??_WriteFlash_Sequential,f
 15978  1401  36A1               	lsrf	??_WriteFlash_Sequential+1,f
 15979  1402  0CA0               	rrf	??_WriteFlash_Sequential,f
 15980  1403  0820               	movf	??_WriteFlash_Sequential,w
 15981  1404  397F               	andlw	127
 15982  1405  0023               	movlb	3	; select bank3
 15983  1406  0092               	movwf	18	;volatile
 15984                           
 15985                           ;FLASH.c: 150: PMADRL = (unsigned char)((row & 0x007) << 5);
 15986  1407  087A               	movf	WriteFlash_Sequential@row,w
 15987  1408  3907               	andlw	7
 15988  1409  0020               	movlb	0	; select bank0
 15989  140A  00A0               	movwf	??_WriteFlash_Sequential
 15990  140B  3004               	movlw	4
 15991  140C                     u404_25:	
 15992  140C  35A0               	lslf	??_WriteFlash_Sequential,f
 15993  140D  3EFF               	addlw	-1
 15994  140E  1D03               	skipz
 15995  140F  2C0C               	goto	u404_25
 15996  1410  3520               	lslf	??_WriteFlash_Sequential,w
 15997  1411  0023               	movlb	3	; select bank3
 15998  1412  0091               	movwf	17	;volatile
 15999                           
 16000                           ;FLASH.c: 152: for(i=0;i<spaces;i++)
 16001  1413  0020               	movlb	0	; select bank0
 16002  1414  01E9               	clrf	WriteFlash_Sequential@i
 16003  1415                     i1l3911:	
 16004  1415  0868               	movf	WriteFlash_Sequential@spaces,w
 16005  1416  0269               	subwf	WriteFlash_Sequential@i,w
 16006  1417  1803               	btfsc	3,0
 16007  1418  2C39               	goto	i1l3913
 16008                           
 16009                           ;FLASH.c: 153: {
 16010                           ;FLASH.c: 154: PMDATH = TempBufH[i];
 16011  1419  0869               	movf	WriteFlash_Sequential@i,w
 16012  141A  3E23               	addlw	WriteFlash_Sequential@TempBufH& (0+255)
 16013  141B  0086               	movwf	6
 16014  141C  0187               	clrf	7
 16015  141D  0801               	movf	1,w
 16016  141E  0023               	movlb	3	; select bank3
 16017  141F  0094               	movwf	20	;volatile
 16018                           
 16019                           ;FLASH.c: 155: PMDATL = TempBufL[i];
 16020  1420  0020               	movlb	0	; select bank0
 16021  1421  0869               	movf	WriteFlash_Sequential@i,w
 16022  1422  3E43               	addlw	WriteFlash_Sequential@TempBufL& (0+255)
 16023  1423  0086               	movwf	6
 16024  1424  0187               	clrf	7
 16025  1425  0801               	movf	1,w
 16026  1426  0023               	movlb	3	; select bank3
 16027  1427  0093               	movwf	19	;volatile
 16028                           
 16029                           ;FLASH.c: 156: __nop();
 16030  1428  0000               	nop
 16031                           
 16032                           ;FLASH.c: 157: __nop();
 16033  1429  0000               	nop
 16034                           
 16035                           ;FLASH.c: 158: UNLOCK();
 16036  142A  3199  210F  3193   	fcall	_UNLOCK
 16037                           
 16038                           ;FLASH.c: 159: PMADRL++;
 16039  142D  3001               	movlw	1
 16040  142E  0020               	movlb	0	; select bank0
 16041  142F  00A0               	movwf	??_WriteFlash_Sequential
 16042  1430  0820               	movf	??_WriteFlash_Sequential,w
 16043  1431  0023               	movlb	3	; select bank3
 16044  1432  0791               	addwf	17,f	;volatile
 16045  1433  3001               	movlw	1
 16046  1434  0020               	movlb	0	; select bank0
 16047  1435  00A0               	movwf	??_WriteFlash_Sequential
 16048  1436  0820               	movf	??_WriteFlash_Sequential,w
 16049  1437  07E9               	addwf	WriteFlash_Sequential@i,f
 16050  1438  2C15               	goto	i1l3911
 16051  1439                     i1l3913:	
 16052                           
 16053                           ;FLASH.c: 161: }
 16054                           ;FLASH.c: 162: PMCON1 &= ~0b00000100;
 16055  1439  30FB               	movlw	251
 16056  143A  00A0               	movwf	??_WriteFlash_Sequential
 16057  143B  0820               	movf	??_WriteFlash_Sequential,w
 16058  143C  0023               	movlb	3	; select bank3
 16059  143D  0595               	andwf	21,f	;volatile
 16060                           
 16061                           ;FLASH.c: 163: INTCON |= 0x80;
 16062  143E  178B               	bsf	11,7	;volatile
 16063  143F  0008               	return
 16064  1440                     __end_of_WriteFlash_Sequential:	
 16065                           
 16066                           	psect	text61
 16067  1A23                     __ptext61:	
 16068 ;; *************** function i1_ReadFlash_2Byte *****************
 16069 ;; Defined at:
 16070 ;;		line 43 in file "FLASH.c"
 16071 ;; Parameters:    Size  Location     Type
 16072 ;;  row             2    0[COMMON] unsigned int 
 16073 ;;  column          1    2[COMMON] unsigned char 
 16074 ;; Auto vars:     Size  Location     Type
 16075 ;;		None
 16076 ;; Return value:  Size  Location     Type
 16077 ;;                  2    0[COMMON] unsigned int 
 16078 ;; Registers used:
 16079 ;;		wreg, status,2, status,0
 16080 ;; Tracked objects:
 16081 ;;		On entry : 0/0
 16082 ;;		On exit  : 0/0
 16083 ;;		Unchanged: 0/0
 16084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16085 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16087 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16088 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16089 ;;Total ram usage:        5 bytes
 16090 ;; Hardware stack levels used:    1
 16091 ;; This function calls:
 16092 ;;		Nothing
 16093 ;; This function is called by:
 16094 ;;		_WriteFlash_Sequential
 16095 ;;		i1_ReadFlash_4Byte
 16096 ;; This function uses a non-reentrant model
 16097 ;;
 16098                           
 16099                           
 16100                           ;psect for function i1_ReadFlash_2Byte
 16101  1A23                     i1_ReadFlash_2Byte:	
 16102                           
 16103                           ;FLASH.c: 45: PMCON1 &= ~0b01000000;
 16104                           
 16105                           ;incstack = 0
 16106                           ; Regs used in i1_ReadFlash_2Byte: [wreg+status,2+status,0]
 16107  1A23  30BF               	movlw	191
 16108  1A24  00F3               	movwf	??i1_ReadFlash_2Byte
 16109  1A25  0873               	movf	??i1_ReadFlash_2Byte,w
 16110  1A26  0023               	movlb	3	; select bank3
 16111  1A27  0595               	andwf	21,f	;volatile
 16112                           
 16113                           ;FLASH.c: 46: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 16114  1A28  0871               	movf	i1ReadFlash_2Byte@row+1,w
 16115  1A29  00F4               	movwf	??i1_ReadFlash_2Byte+1
 16116  1A2A  0870               	movf	i1ReadFlash_2Byte@row,w
 16117  1A2B  00F3               	movwf	??i1_ReadFlash_2Byte
 16118  1A2C  36F4               	lsrf	??i1_ReadFlash_2Byte+1,f
 16119  1A2D  0CF3               	rrf	??i1_ReadFlash_2Byte,f
 16120  1A2E  36F4               	lsrf	??i1_ReadFlash_2Byte+1,f
 16121  1A2F  0CF3               	rrf	??i1_ReadFlash_2Byte,f
 16122  1A30  36F4               	lsrf	??i1_ReadFlash_2Byte+1,f
 16123  1A31  0CF3               	rrf	??i1_ReadFlash_2Byte,f
 16124  1A32  0873               	movf	??i1_ReadFlash_2Byte,w
 16125  1A33  397F               	andlw	127
 16126  1A34  0092               	movwf	18	;volatile
 16127                           
 16128                           ;FLASH.c: 47: PMADRL = (unsigned char)(((row & 0x007) << 5) + column);
 16129  1A35  0870               	movf	i1ReadFlash_2Byte@row,w
 16130  1A36  3907               	andlw	7
 16131  1A37  00F3               	movwf	??i1_ReadFlash_2Byte
 16132  1A38  3004               	movlw	4
 16133  1A39                     u391_25:	
 16134  1A39  35F3               	lslf	??i1_ReadFlash_2Byte,f
 16135  1A3A  3EFF               	addlw	-1
 16136  1A3B  1D03               	skipz
 16137  1A3C  2A39               	goto	u391_25
 16138  1A3D  3573               	lslf	??i1_ReadFlash_2Byte,w
 16139  1A3E  0772               	addwf	i1ReadFlash_2Byte@column,w
 16140  1A3F  0091               	movwf	17	;volatile
 16141                           
 16142                           ;FLASH.c: 48: PMCON1 |= 0b00000001;
 16143  1A40  1415               	bsf	21,0	;volatile
 16144  1A41                     i1l948:	
 16145                           ;FLASH.c: 49: while(PMCON1 & 0b00000001);
 16146                           
 16147  1A41  1815               	btfsc	21,0	;volatile
 16148  1A42  2A41               	goto	i1l948
 16149                           
 16150                           ;FLASH.c: 50: __nop();
 16151  1A43  0000               	nop
 16152                           
 16153                           ;FLASH.c: 51: __nop();
 16154  1A44  0000               	nop
 16155                           
 16156                           ;FLASH.c: 52: return (PMDATL | (PMDATH << 8));
 16157  1A45  0023               	movlb	3	; select bank3
 16158  1A46  0814               	movf	20,w	;volatile
 16159  1A47  01F1               	clrf	?i1_ReadFlash_2Byte+1
 16160  1A48  07F1               	addwf	?i1_ReadFlash_2Byte+1,f
 16161  1A49  0813               	movf	19,w	;volatile
 16162  1A4A  01F0               	clrf	?i1_ReadFlash_2Byte
 16163  1A4B  07F0               	addwf	?i1_ReadFlash_2Byte,f
 16164  1A4C  0008               	return
 16165  1A4D                     __end_ofi1_ReadFlash_2Byte:	
 16166                           
 16167                           	psect	text62
 16168  1A4D                     __ptext62:	
 16169 ;; *************** function _BlockErase *****************
 16170 ;; Defined at:
 16171 ;;		line 91 in file "FLASH.c"
 16172 ;; Parameters:    Size  Location     Type
 16173 ;;  row             2    0[COMMON] unsigned int 
 16174 ;; Auto vars:     Size  Location     Type
 16175 ;;		None
 16176 ;; Return value:  Size  Location     Type
 16177 ;;		None               void
 16178 ;; Registers used:
 16179 ;;		wreg, status,2, status,0, pclath, cstack
 16180 ;; Tracked objects:
 16181 ;;		On entry : 0/0
 16182 ;;		On exit  : 0/0
 16183 ;;		Unchanged: 0/0
 16184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16185 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16187 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16188 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16189 ;;Total ram usage:        4 bytes
 16190 ;; Hardware stack levels used:    1
 16191 ;; Hardware stack levels required when called:    1
 16192 ;; This function calls:
 16193 ;;		_UNLOCK
 16194 ;; This function is called by:
 16195 ;;		_WriteFlash_Sequential
 16196 ;; This function uses a non-reentrant model
 16197 ;;
 16198                           
 16199                           
 16200                           ;psect for function _BlockErase
 16201  1A4D                     _BlockErase:	
 16202                           
 16203                           ;FLASH.c: 93: INTCON &= ~0x80;
 16204                           
 16205                           ;incstack = 0
 16206                           ; Regs used in _BlockErase: [wreg+status,2+status,0+pclath+cstack]
 16207  1A4D  307F               	movlw	127
 16208  1A4E  00F2               	movwf	??_BlockErase
 16209  1A4F  0872               	movf	??_BlockErase,w
 16210  1A50  058B               	andwf	11,f	;volatile
 16211                           
 16212                           ;FLASH.c: 94: PMCON1 &= ~0b01000000;
 16213  1A51  30BF               	movlw	191
 16214  1A52  00F2               	movwf	??_BlockErase
 16215  1A53  0872               	movf	??_BlockErase,w
 16216  1A54  0023               	movlb	3	; select bank3
 16217  1A55  0595               	andwf	21,f	;volatile
 16218                           
 16219                           ;FLASH.c: 95: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 16220  1A56  0871               	movf	BlockErase@row+1,w
 16221  1A57  00F3               	movwf	??_BlockErase+1
 16222  1A58  0870               	movf	BlockErase@row,w
 16223  1A59  00F2               	movwf	??_BlockErase
 16224  1A5A  36F3               	lsrf	??_BlockErase+1,f
 16225  1A5B  0CF2               	rrf	??_BlockErase,f
 16226  1A5C  36F3               	lsrf	??_BlockErase+1,f
 16227  1A5D  0CF2               	rrf	??_BlockErase,f
 16228  1A5E  36F3               	lsrf	??_BlockErase+1,f
 16229  1A5F  0CF2               	rrf	??_BlockErase,f
 16230  1A60  0872               	movf	??_BlockErase,w
 16231  1A61  397F               	andlw	127
 16232  1A62  0092               	movwf	18	;volatile
 16233                           
 16234                           ;FLASH.c: 96: PMADRL = (unsigned char)((row & 0x007) << 5);
 16235  1A63  0870               	movf	BlockErase@row,w
 16236  1A64  3907               	andlw	7
 16237  1A65  00F2               	movwf	??_BlockErase
 16238  1A66  3004               	movlw	4
 16239  1A67                     u380_25:	
 16240  1A67  35F2               	lslf	??_BlockErase,f
 16241  1A68  3EFF               	addlw	-1
 16242  1A69  1D03               	skipz
 16243  1A6A  2A67               	goto	u380_25
 16244  1A6B  3572               	lslf	??_BlockErase,w
 16245  1A6C  0091               	movwf	17	;volatile
 16246                           
 16247                           ;FLASH.c: 97: PMCON1 |= 0b00010000;
 16248  1A6D  1615               	bsf	21,4	;volatile
 16249                           
 16250                           ;FLASH.c: 98: PMCON1 |= 0b00000100;
 16251  1A6E  1515               	bsf	21,2	;volatile
 16252                           
 16253                           ;FLASH.c: 99: UNLOCK();
 16254  1A6F  3199  210F         	fcall	_UNLOCK
 16255                           
 16256                           ;FLASH.c: 100: PMCON1 &= ~0b00000100;
 16257  1A71  30FB               	movlw	251
 16258  1A72  00F2               	movwf	??_BlockErase
 16259  1A73  0872               	movf	??_BlockErase,w
 16260  1A74  0023               	movlb	3	; select bank3
 16261  1A75  0595               	andwf	21,f	;volatile
 16262                           
 16263                           ;FLASH.c: 101: INTCON |= 0x80;
 16264  1A76  178B               	bsf	11,7	;volatile
 16265  1A77  0008               	return
 16266  1A78                     __end_of_BlockErase:	
 16267                           
 16268                           	psect	text63
 16269  190F                     __ptext63:	
 16270 ;; *************** function _UNLOCK *****************
 16271 ;; Defined at:
 16272 ;;		line 76 in file "FLASH.c"
 16273 ;; Parameters:    Size  Location     Type
 16274 ;;		None
 16275 ;; Auto vars:     Size  Location     Type
 16276 ;;		None
 16277 ;; Return value:  Size  Location     Type
 16278 ;;		None               void
 16279 ;; Registers used:
 16280 ;;		wreg
 16281 ;; Tracked objects:
 16282 ;;		On entry : 0/0
 16283 ;;		On exit  : 0/0
 16284 ;;		Unchanged: 0/0
 16285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16289 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16290 ;;Total ram usage:        0 bytes
 16291 ;; Hardware stack levels used:    1
 16292 ;; This function calls:
 16293 ;;		Nothing
 16294 ;; This function is called by:
 16295 ;;		_BlockErase
 16296 ;;		_WriteFlash_Sequential
 16297 ;; This function uses a non-reentrant model
 16298 ;;
 16299                           
 16300                           
 16301                           ;psect for function _UNLOCK
 16302  190F                     _UNLOCK:	
 16303                           
 16304                           ;FLASH.c: 78: PMCON2 = 0x55;
 16305                           
 16306                           ;incstack = 0
 16307                           ; Regs used in _UNLOCK: [wreg]
 16308  190F  3055               	movlw	85
 16309  1910  0023               	movlb	3	; select bank3
 16310  1911  0096               	movwf	22	;volatile
 16311                           
 16312                           ;FLASH.c: 79: PMCON2 = 0xAA;
 16313  1912  30AA               	movlw	170
 16314  1913  0096               	movwf	22	;volatile
 16315                           
 16316                           ;FLASH.c: 80: PMCON1 |= 0b00000010;
 16317  1914  1495               	bsf	21,1	;volatile
 16318  1915                     i1l957:	
 16319                           ;FLASH.c: 81: while(PMCON1 & 0b00000010);
 16320                           
 16321  1915  1895               	btfsc	21,1	;volatile
 16322  1916  2915               	goto	i1l957
 16323                           
 16324                           ;FLASH.c: 82: __nop();
 16325  1917  0000               	nop
 16326                           
 16327                           ;FLASH.c: 83: __nop();
 16328  1918  0000               	nop
 16329  1919  0008               	return
 16330  191A                     __end_of_UNLOCK:	
 16331                           
 16332                           	psect	text64
 16333  0E72                     __ptext64:	
 16334 ;; *************** function _Send_PS2 *****************
 16335 ;; Defined at:
 16336 ;;		line 828 in file "PS_2.c"
 16337 ;; Parameters:    Size  Location     Type
 16338 ;;  command         1    wreg     unsigned char 
 16339 ;; Auto vars:     Size  Location     Type
 16340 ;;  command         1    1[BANK0 ] unsigned char 
 16341 ;;  timeout         2    3[BANK0 ] unsigned int 
 16342 ;;  i               1    2[BANK0 ] unsigned char 
 16343 ;;  oddparity       1    0[BANK0 ] unsigned char 
 16344 ;; Return value:  Size  Location     Type
 16345 ;;                  1    wreg      unsigned char 
 16346 ;; Registers used:
 16347 ;;		wreg, status,2, status,0, pclath, cstack
 16348 ;; Tracked objects:
 16349 ;;		On entry : 0/0
 16350 ;;		On exit  : 0/0
 16351 ;;		Unchanged: 0/0
 16352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16354 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16355 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16356 ;;      Totals:         4       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16357 ;;Total ram usage:        9 bytes
 16358 ;; Hardware stack levels used:    1
 16359 ;; Hardware stack levels required when called:    1
 16360 ;; This function calls:
 16361 ;;		_READ_PS_2_PIN
 16362 ;;		i1_CheckSum_byte
 16363 ;;		i1_Clock_TRIS
 16364 ;;		i1_Data_TRIS
 16365 ;;		i1_delayUS
 16366 ;; This function is called by:
 16367 ;;		_Process_PS2_ScanCode
 16368 ;;		_ResendLast
 16369 ;;		_Init_PS_2_Send
 16370 ;;		_Keyboard_Connected
 16371 ;; This function uses a non-reentrant model
 16372 ;;
 16373                           
 16374                           
 16375                           ;psect for function _Send_PS2
 16376  0E72                     _Send_PS2:	
 16377                           
 16378                           ;incstack = 0
 16379                           ; Regs used in _Send_PS2: [wreg+status,2+status,0+pclath+cstack]
 16380                           ;Send_PS2@command stored from wreg
 16381  0E72  0020               	movlb	0	; select bank0
 16382  0E73  00A1               	movwf	Send_PS2@command
 16383                           
 16384                           ;PS_2.c: 830: unsigned char i=0;
 16385  0E74  01A2               	clrf	Send_PS2@i
 16386                           
 16387                           ;PS_2.c: 831: unsigned char oddparity = CheckSum_byte((unsigned int)command , 3);
 16388  0E75  0821               	movf	Send_PS2@command,w
 16389  0E76  00FA               	movwf	??_Send_PS2
 16390  0E77  01FB               	clrf	??_Send_PS2+1
 16391  0E78  087A               	movf	??_Send_PS2,w
 16392  0E79  00F0               	movwf	i1CheckSum_byte@This
 16393  0E7A  087B               	movf	??_Send_PS2+1,w
 16394  0E7B  00F1               	movwf	i1CheckSum_byte@This+1
 16395  0E7C  3003               	movlw	3
 16396  0E7D  00FC               	movwf	??_Send_PS2+2
 16397  0E7E  087C               	movf	??_Send_PS2+2,w
 16398  0E7F  00F2               	movwf	i1CheckSum_byte@Odd_Even
 16399  0E80  318A  2268  318E   	fcall	i1_CheckSum_byte
 16400  0E83  00FD               	movwf	??_Send_PS2+3
 16401  0E84  087D               	movf	??_Send_PS2+3,w
 16402  0E85  0020               	movlb	0	; select bank0
 16403  0E86  00A0               	movwf	Send_PS2@oddparity
 16404                           
 16405                           ;PS_2.c: 832: unsigned int timeout =0;
 16406  0E87  01A3               	clrf	Send_PS2@timeout
 16407  0E88  01A4               	clrf	Send_PS2@timeout+1
 16408                           
 16409                           ;PS_2.c: 834: Clock_TRIS(0);
 16410  0E89  3000               	movlw	0
 16411  0E8A  3198  20F1  318E   	fcall	i1_Clock_TRIS
 16412                           
 16413                           ;PS_2.c: 835: Data_TRIS(0);
 16414  0E8D  3000               	movlw	0
 16415  0E8E  3198  20FB  318E   	fcall	i1_Data_TRIS
 16416                           
 16417                           ;PS_2.c: 836: LATA &= ~0b00100000;
 16418  0E91  30DF               	movlw	223
 16419  0E92  00FA               	movwf	??_Send_PS2
 16420  0E93  087A               	movf	??_Send_PS2,w
 16421  0E94  0022               	movlb	2	; select bank2
 16422  0E95  058C               	andwf	12,f	;volatile
 16423                           
 16424                           ;PS_2.c: 837: delayUS(300);
 16425  0E96  3000               	movlw	0
 16426  0E97  00F3               	movwf	i1delayUS@US+3
 16427  0E98  3000               	movlw	0
 16428  0E99  00F2               	movwf	i1delayUS@US+2
 16429  0E9A  3001               	movlw	1
 16430  0E9B  00F1               	movwf	i1delayUS@US+1
 16431  0E9C  302C               	movlw	44
 16432  0E9D  00F0               	movwf	i1delayUS@US
 16433  0E9E  319B  2393  318E   	fcall	i1_delayUS
 16434                           
 16435                           ;PS_2.c: 838: LATA &= ~0b00010000;
 16436  0EA1  30EF               	movlw	239
 16437  0EA2  00FA               	movwf	??_Send_PS2
 16438  0EA3  087A               	movf	??_Send_PS2,w
 16439  0EA4  0022               	movlb	2	; select bank2
 16440  0EA5  058C               	andwf	12,f	;volatile
 16441                           
 16442                           ;PS_2.c: 839: delayUS(20);
 16443  0EA6  3000               	movlw	0
 16444  0EA7  00F3               	movwf	i1delayUS@US+3
 16445  0EA8  3000               	movlw	0
 16446  0EA9  00F2               	movwf	i1delayUS@US+2
 16447  0EAA  3000               	movlw	0
 16448  0EAB  00F1               	movwf	i1delayUS@US+1
 16449  0EAC  3014               	movlw	20
 16450  0EAD  00F0               	movwf	i1delayUS@US
 16451  0EAE  319B  2393  318E   	fcall	i1_delayUS
 16452                           
 16453                           ;PS_2.c: 840: Clock_TRIS(1);
 16454  0EB1  3001               	movlw	1
 16455  0EB2  3198  20F1  318E   	fcall	i1_Clock_TRIS
 16456                           
 16457                           ;PS_2.c: 841: timeout=0;
 16458  0EB5  0020               	movlb	0	; select bank0
 16459  0EB6  01A3               	clrf	Send_PS2@timeout
 16460  0EB7  01A4               	clrf	Send_PS2@timeout+1
 16461  0EB8                     i1l4743:	
 16462                           ;PS_2.c: 842: while(READ_PS_2_PIN(0b00100000))
 16463                           
 16464  0EB8  3020               	movlw	32
 16465  0EB9  3199  21E3  318E   	fcall	_READ_PS_2_PIN
 16466  0EBC  3800               	iorlw	0
 16467  0EBD  1903               	btfsc	3,2
 16468  0EBE  2ED5               	goto	i1l4745
 16469                           
 16470                           ;PS_2.c: 843: {
 16471                           ;PS_2.c: 844: __nop();
 16472  0EBF  0000               	nop
 16473                           
 16474                           ;PS_2.c: 845: timeout++;
 16475  0EC0  3001               	movlw	1
 16476  0EC1  0020               	movlb	0	; select bank0
 16477  0EC2  07A3               	addwf	Send_PS2@timeout,f
 16478  0EC3  3000               	movlw	0
 16479  0EC4  3DA4               	addwfc	Send_PS2@timeout+1,f
 16480                           
 16481                           ;PS_2.c: 846: if(timeout > 15000)
 16482  0EC5  303A               	movlw	58
 16483  0EC6  0224               	subwf	Send_PS2@timeout+1,w
 16484  0EC7  3099               	movlw	153
 16485  0EC8  1903               	skipnz
 16486  0EC9  0223               	subwf	Send_PS2@timeout,w
 16487  0ECA  1C03               	skipc
 16488  0ECB  2EB8               	goto	i1l4743
 16489                           
 16490                           ;PS_2.c: 847: {
 16491                           ;PS_2.c: 848: Clock_TRIS(1);
 16492  0ECC  3001               	movlw	1
 16493  0ECD  3198  20F1  318E   	fcall	i1_Clock_TRIS
 16494                           
 16495                           ;PS_2.c: 849: Data_TRIS(1);
 16496  0ED0  3001               	movlw	1
 16497  0ED1  3198  20FB         	fcall	i1_Data_TRIS
 16498                           
 16499                           ;PS_2.c: 850: return 1;
 16500  0ED3  3001               	movlw	1
 16501  0ED4  0008               	return
 16502  0ED5                     i1l4745:	
 16503                           
 16504                           ;PS_2.c: 851: }
 16505                           ;PS_2.c: 852: }
 16506                           ;PS_2.c: 853: for(i=0;i<8;i++)
 16507  0ED5  0020               	movlb	0	; select bank0
 16508  0ED6  01A2               	clrf	Send_PS2@i
 16509  0ED7  3008               	movlw	8
 16510  0ED8  0222               	subwf	Send_PS2@i,w
 16511  0ED9  1803               	btfsc	3,0
 16512  0EDA  2F2F               	goto	i1l856
 16513  0EDB                     i1l855:	
 16514                           
 16515                           ;PS_2.c: 854: {
 16516                           ;PS_2.c: 855: if(command & 0x1)
 16517  0EDB  1C21               	btfss	Send_PS2@command,0
 16518  0EDC  2EE0               	goto	i1l4753
 16519                           
 16520                           ;PS_2.c: 856: {
 16521                           ;PS_2.c: 857: LATA |= 0b00010000;
 16522  0EDD  0022               	movlb	2	; select bank2
 16523  0EDE  160C               	bsf	12,4	;volatile
 16524                           
 16525                           ;PS_2.c: 858: }
 16526  0EDF  2EE5               	goto	i1l4755
 16527  0EE0                     i1l4753:	
 16528                           
 16529                           ;PS_2.c: 859: else
 16530                           ;PS_2.c: 860: {
 16531                           ;PS_2.c: 861: LATA &= ~0b00010000;
 16532  0EE0  30EF               	movlw	239
 16533  0EE1  00FA               	movwf	??_Send_PS2
 16534  0EE2  087A               	movf	??_Send_PS2,w
 16535  0EE3  0022               	movlb	2	; select bank2
 16536  0EE4  058C               	andwf	12,f	;volatile
 16537  0EE5                     i1l4755:	
 16538                           
 16539                           ;PS_2.c: 862: }
 16540                           ;PS_2.c: 863: command >> = 1;
 16541  0EE5  1003               	clrc
 16542  0EE6  0020               	movlb	0	; select bank0
 16543  0EE7  0CA1               	rrf	Send_PS2@command,f
 16544                           
 16545                           ;PS_2.c: 864: timeout=0;
 16546  0EE8  01A3               	clrf	Send_PS2@timeout
 16547  0EE9  01A4               	clrf	Send_PS2@timeout+1
 16548  0EEA                     i1l4767:	
 16549                           ;PS_2.c: 865: while(!READ_PS_2_PIN(0b00100000))
 16550                           
 16551  0EEA  3020               	movlw	32
 16552  0EEB  3199  21E3  318E   	fcall	_READ_PS_2_PIN
 16553  0EEE  3A00               	xorlw	0
 16554  0EEF  1D03               	btfss	3,2
 16555  0EF0  2F06               	goto	i1l4769
 16556                           
 16557                           ;PS_2.c: 866: {
 16558                           ;PS_2.c: 867: timeout++;
 16559  0EF1  3001               	movlw	1
 16560  0EF2  0020               	movlb	0	; select bank0
 16561  0EF3  07A3               	addwf	Send_PS2@timeout,f
 16562  0EF4  3000               	movlw	0
 16563  0EF5  3DA4               	addwfc	Send_PS2@timeout+1,f
 16564                           
 16565                           ;PS_2.c: 868: if(timeout > 15000)
 16566  0EF6  303A               	movlw	58
 16567  0EF7  0224               	subwf	Send_PS2@timeout+1,w
 16568  0EF8  3099               	movlw	153
 16569  0EF9  1903               	skipnz
 16570  0EFA  0223               	subwf	Send_PS2@timeout,w
 16571  0EFB  1C03               	skipc
 16572  0EFC  2EEA               	goto	i1l4767
 16573                           
 16574                           ;PS_2.c: 869: {
 16575                           ;PS_2.c: 870: Clock_TRIS(1);
 16576  0EFD  3001               	movlw	1
 16577  0EFE  3198  20F1  318E   	fcall	i1_Clock_TRIS
 16578                           
 16579                           ;PS_2.c: 871: Data_TRIS(1);
 16580  0F01  3001               	movlw	1
 16581  0F02  3198  20FB         	fcall	i1_Data_TRIS
 16582                           
 16583                           ;PS_2.c: 872: return 1;
 16584  0F04  3001               	movlw	1
 16585  0F05  0008               	return
 16586  0F06                     i1l4769:	
 16587                           
 16588                           ;PS_2.c: 873: }
 16589                           ;PS_2.c: 874: }
 16590                           ;PS_2.c: 875: timeout=0;
 16591  0F06  0020               	movlb	0	; select bank0
 16592  0F07  01A3               	clrf	Send_PS2@timeout
 16593  0F08  01A4               	clrf	Send_PS2@timeout+1
 16594  0F09                     i1l4779:	
 16595                           ;PS_2.c: 876: while(READ_PS_2_PIN(0b00100000))
 16596                           
 16597  0F09  3020               	movlw	32
 16598  0F0A  3199  21E3  318E   	fcall	_READ_PS_2_PIN
 16599  0F0D  3800               	iorlw	0
 16600  0F0E  1903               	btfsc	3,2
 16601  0F0F  2F26               	goto	i1l4781
 16602                           
 16603                           ;PS_2.c: 877: {
 16604                           ;PS_2.c: 878: __nop();
 16605  0F10  0000               	nop
 16606                           
 16607                           ;PS_2.c: 879: timeout++;
 16608  0F11  3001               	movlw	1
 16609  0F12  0020               	movlb	0	; select bank0
 16610  0F13  07A3               	addwf	Send_PS2@timeout,f
 16611  0F14  3000               	movlw	0
 16612  0F15  3DA4               	addwfc	Send_PS2@timeout+1,f
 16613                           
 16614                           ;PS_2.c: 880: if(timeout > 15000)
 16615  0F16  303A               	movlw	58
 16616  0F17  0224               	subwf	Send_PS2@timeout+1,w
 16617  0F18  3099               	movlw	153
 16618  0F19  1903               	skipnz
 16619  0F1A  0223               	subwf	Send_PS2@timeout,w
 16620  0F1B  1C03               	skipc
 16621  0F1C  2F09               	goto	i1l4779
 16622                           
 16623                           ;PS_2.c: 881: {
 16624                           ;PS_2.c: 882: Clock_TRIS(1);
 16625  0F1D  3001               	movlw	1
 16626  0F1E  3198  20F1  318E   	fcall	i1_Clock_TRIS
 16627                           
 16628                           ;PS_2.c: 883: Data_TRIS(1);
 16629  0F21  3001               	movlw	1
 16630  0F22  3198  20FB         	fcall	i1_Data_TRIS
 16631                           
 16632                           ;PS_2.c: 884: return 1;
 16633  0F24  3001               	movlw	1
 16634  0F25  0008               	return
 16635  0F26                     i1l4781:	
 16636  0F26  3001               	movlw	1
 16637  0F27  00FA               	movwf	??_Send_PS2
 16638  0F28  087A               	movf	??_Send_PS2,w
 16639  0F29  0020               	movlb	0	; select bank0
 16640  0F2A  07A2               	addwf	Send_PS2@i,f
 16641  0F2B  3008               	movlw	8
 16642  0F2C  0222               	subwf	Send_PS2@i,w
 16643  0F2D  1C03               	skipc
 16644  0F2E  2EDB               	goto	i1l855
 16645  0F2F                     i1l856:	
 16646                           
 16647                           ;PS_2.c: 885: }
 16648                           ;PS_2.c: 886: }
 16649                           ;PS_2.c: 887: }
 16650                           ;PS_2.c: 889: if(oddparity & 0x1)
 16651  0F2F  1C20               	btfss	Send_PS2@oddparity,0
 16652  0F30  2F34               	goto	i1l4787
 16653                           
 16654                           ;PS_2.c: 890: {
 16655                           ;PS_2.c: 891: LATA |= 0b00010000;
 16656  0F31  0022               	movlb	2	; select bank2
 16657  0F32  160C               	bsf	12,4	;volatile
 16658                           
 16659                           ;PS_2.c: 892: }
 16660  0F33  2F39               	goto	i1l4789
 16661  0F34                     i1l4787:	
 16662                           
 16663                           ;PS_2.c: 893: else
 16664                           ;PS_2.c: 894: {
 16665                           ;PS_2.c: 895: LATA &= ~0b00010000;
 16666  0F34  30EF               	movlw	239
 16667  0F35  00FA               	movwf	??_Send_PS2
 16668  0F36  087A               	movf	??_Send_PS2,w
 16669  0F37  0022               	movlb	2	; select bank2
 16670  0F38  058C               	andwf	12,f	;volatile
 16671  0F39                     i1l4789:	
 16672                           
 16673                           ;PS_2.c: 896: }
 16674                           ;PS_2.c: 897: timeout=0;
 16675  0F39  0020               	movlb	0	; select bank0
 16676  0F3A  01A3               	clrf	Send_PS2@timeout
 16677  0F3B  01A4               	clrf	Send_PS2@timeout+1
 16678  0F3C                     i1l4799:	
 16679                           ;PS_2.c: 898: while(!READ_PS_2_PIN(0b00100000))
 16680                           
 16681  0F3C  3020               	movlw	32
 16682  0F3D  3199  21E3  318E   	fcall	_READ_PS_2_PIN
 16683  0F40  3A00               	xorlw	0
 16684  0F41  1D03               	btfss	3,2
 16685  0F42  2F58               	goto	i1l4801
 16686                           
 16687                           ;PS_2.c: 899: {
 16688                           ;PS_2.c: 900: timeout++;
 16689  0F43  3001               	movlw	1
 16690  0F44  0020               	movlb	0	; select bank0
 16691  0F45  07A3               	addwf	Send_PS2@timeout,f
 16692  0F46  3000               	movlw	0
 16693  0F47  3DA4               	addwfc	Send_PS2@timeout+1,f
 16694                           
 16695                           ;PS_2.c: 901: if(timeout > 15000)
 16696  0F48  303A               	movlw	58
 16697  0F49  0224               	subwf	Send_PS2@timeout+1,w
 16698  0F4A  3099               	movlw	153
 16699  0F4B  1903               	skipnz
 16700  0F4C  0223               	subwf	Send_PS2@timeout,w
 16701  0F4D  1C03               	skipc
 16702  0F4E  2F3C               	goto	i1l4799
 16703                           
 16704                           ;PS_2.c: 902: {
 16705                           ;PS_2.c: 903: Clock_TRIS(1);
 16706  0F4F  3001               	movlw	1
 16707  0F50  3198  20F1  318E   	fcall	i1_Clock_TRIS
 16708                           
 16709                           ;PS_2.c: 904: Data_TRIS(1);
 16710  0F53  3001               	movlw	1
 16711  0F54  3198  20FB         	fcall	i1_Data_TRIS
 16712                           
 16713                           ;PS_2.c: 905: return 1;
 16714  0F56  3001               	movlw	1
 16715  0F57  0008               	return
 16716  0F58                     i1l4801:	
 16717                           
 16718                           ;PS_2.c: 906: }
 16719                           ;PS_2.c: 907: }
 16720                           ;PS_2.c: 908: timeout=0;
 16721  0F58  0020               	movlb	0	; select bank0
 16722  0F59  01A3               	clrf	Send_PS2@timeout
 16723  0F5A  01A4               	clrf	Send_PS2@timeout+1
 16724  0F5B                     i1l4811:	
 16725                           ;PS_2.c: 909: while(READ_PS_2_PIN(0b00100000))
 16726                           
 16727  0F5B  3020               	movlw	32
 16728  0F5C  3199  21E3  318E   	fcall	_READ_PS_2_PIN
 16729  0F5F  3800               	iorlw	0
 16730  0F60  1903               	btfsc	3,2
 16731  0F61  2F77               	goto	i1l4813
 16732                           
 16733                           ;PS_2.c: 910: {
 16734                           ;PS_2.c: 911: timeout++;
 16735  0F62  3001               	movlw	1
 16736  0F63  0020               	movlb	0	; select bank0
 16737  0F64  07A3               	addwf	Send_PS2@timeout,f
 16738  0F65  3000               	movlw	0
 16739  0F66  3DA4               	addwfc	Send_PS2@timeout+1,f
 16740                           
 16741                           ;PS_2.c: 912: if(timeout > 15000)
 16742  0F67  303A               	movlw	58
 16743  0F68  0224               	subwf	Send_PS2@timeout+1,w
 16744  0F69  3099               	movlw	153
 16745  0F6A  1903               	skipnz
 16746  0F6B  0223               	subwf	Send_PS2@timeout,w
 16747  0F6C  1C03               	skipc
 16748  0F6D  2F5B               	goto	i1l4811
 16749                           
 16750                           ;PS_2.c: 913: {
 16751                           ;PS_2.c: 914: Clock_TRIS(1);
 16752  0F6E  3001               	movlw	1
 16753  0F6F  3198  20F1  318E   	fcall	i1_Clock_TRIS
 16754                           
 16755                           ;PS_2.c: 915: Data_TRIS(1);
 16756  0F72  3001               	movlw	1
 16757  0F73  3198  20FB         	fcall	i1_Data_TRIS
 16758                           
 16759                           ;PS_2.c: 916: return 1;
 16760  0F75  3001               	movlw	1
 16761  0F76  0008               	return
 16762  0F77                     i1l4813:	
 16763                           
 16764                           ;PS_2.c: 917: }
 16765                           ;PS_2.c: 918: }
 16766                           ;PS_2.c: 920: Data_TRIS(1);
 16767  0F77  3001               	movlw	1
 16768  0F78  3198  20FB  318E   	fcall	i1_Data_TRIS
 16769                           
 16770                           ;PS_2.c: 922: timeout=0;
 16771  0F7B  0020               	movlb	0	; select bank0
 16772  0F7C  01A3               	clrf	Send_PS2@timeout
 16773  0F7D  01A4               	clrf	Send_PS2@timeout+1
 16774  0F7E                     i1l4825:	
 16775                           ;PS_2.c: 923: while(READ_PS_2_PIN(0b00010000))
 16776                           
 16777  0F7E  3010               	movlw	16
 16778  0F7F  3199  21E3  318E   	fcall	_READ_PS_2_PIN
 16779  0F82  3800               	iorlw	0
 16780  0F83  1903               	btfsc	3,2
 16781  0F84  2F9A               	goto	i1l4827
 16782                           
 16783                           ;PS_2.c: 924: {
 16784                           ;PS_2.c: 925: timeout++;
 16785  0F85  3001               	movlw	1
 16786  0F86  0020               	movlb	0	; select bank0
 16787  0F87  07A3               	addwf	Send_PS2@timeout,f
 16788  0F88  3000               	movlw	0
 16789  0F89  3DA4               	addwfc	Send_PS2@timeout+1,f
 16790                           
 16791                           ;PS_2.c: 926: if(timeout > 15000)
 16792  0F8A  303A               	movlw	58
 16793  0F8B  0224               	subwf	Send_PS2@timeout+1,w
 16794  0F8C  3099               	movlw	153
 16795  0F8D  1903               	skipnz
 16796  0F8E  0223               	subwf	Send_PS2@timeout,w
 16797  0F8F  1C03               	skipc
 16798  0F90  2F7E               	goto	i1l4825
 16799                           
 16800                           ;PS_2.c: 927: {
 16801                           ;PS_2.c: 928: Clock_TRIS(1);
 16802  0F91  3001               	movlw	1
 16803  0F92  3198  20F1  318E   	fcall	i1_Clock_TRIS
 16804                           
 16805                           ;PS_2.c: 929: Data_TRIS(1);
 16806  0F95  3001               	movlw	1
 16807  0F96  3198  20FB         	fcall	i1_Data_TRIS
 16808                           
 16809                           ;PS_2.c: 930: return 1;
 16810  0F98  3001               	movlw	1
 16811  0F99  0008               	return
 16812  0F9A                     i1l4827:	
 16813                           
 16814                           ;PS_2.c: 931: }
 16815                           ;PS_2.c: 932: }
 16816                           ;PS_2.c: 933: timeout=0;
 16817  0F9A  0020               	movlb	0	; select bank0
 16818  0F9B  01A3               	clrf	Send_PS2@timeout
 16819  0F9C  01A4               	clrf	Send_PS2@timeout+1
 16820  0F9D                     i1l4837:	
 16821                           ;PS_2.c: 934: while(READ_PS_2_PIN(0b00100000))
 16822                           
 16823  0F9D  3020               	movlw	32
 16824  0F9E  3199  21E3  318E   	fcall	_READ_PS_2_PIN
 16825  0FA1  3800               	iorlw	0
 16826  0FA2  1903               	btfsc	3,2
 16827  0FA3  2FB9               	goto	i1l4839
 16828                           
 16829                           ;PS_2.c: 935: {
 16830                           ;PS_2.c: 936: timeout++;
 16831  0FA4  3001               	movlw	1
 16832  0FA5  0020               	movlb	0	; select bank0
 16833  0FA6  07A3               	addwf	Send_PS2@timeout,f
 16834  0FA7  3000               	movlw	0
 16835  0FA8  3DA4               	addwfc	Send_PS2@timeout+1,f
 16836                           
 16837                           ;PS_2.c: 937: if(timeout > 15000)
 16838  0FA9  303A               	movlw	58
 16839  0FAA  0224               	subwf	Send_PS2@timeout+1,w
 16840  0FAB  3099               	movlw	153
 16841  0FAC  1903               	skipnz
 16842  0FAD  0223               	subwf	Send_PS2@timeout,w
 16843  0FAE  1C03               	skipc
 16844  0FAF  2F9D               	goto	i1l4837
 16845                           
 16846                           ;PS_2.c: 938: {
 16847                           ;PS_2.c: 939: Clock_TRIS(1);
 16848  0FB0  3001               	movlw	1
 16849  0FB1  3198  20F1  318E   	fcall	i1_Clock_TRIS
 16850                           
 16851                           ;PS_2.c: 940: Data_TRIS(1);
 16852  0FB4  3001               	movlw	1
 16853  0FB5  3198  20FB         	fcall	i1_Data_TRIS
 16854                           
 16855                           ;PS_2.c: 941: return 1;
 16856  0FB7  3001               	movlw	1
 16857  0FB8  0008               	return
 16858  0FB9                     i1l4839:	
 16859                           
 16860                           ;PS_2.c: 942: }
 16861                           ;PS_2.c: 943: }
 16862                           ;PS_2.c: 944: timeout=0;
 16863  0FB9  0020               	movlb	0	; select bank0
 16864  0FBA  01A3               	clrf	Send_PS2@timeout
 16865  0FBB  01A4               	clrf	Send_PS2@timeout+1
 16866  0FBC                     i1l4849:	
 16867                           ;PS_2.c: 945: while(!READ_PS_2_PIN(0b00010000))
 16868                           
 16869  0FBC  3010               	movlw	16
 16870  0FBD  3199  21E3  318E   	fcall	_READ_PS_2_PIN
 16871  0FC0  3A00               	xorlw	0
 16872  0FC1  1D03               	btfss	3,2
 16873  0FC2  2FD8               	goto	i1l4851
 16874                           
 16875                           ;PS_2.c: 946: {
 16876                           ;PS_2.c: 947: timeout++;
 16877  0FC3  3001               	movlw	1
 16878  0FC4  0020               	movlb	0	; select bank0
 16879  0FC5  07A3               	addwf	Send_PS2@timeout,f
 16880  0FC6  3000               	movlw	0
 16881  0FC7  3DA4               	addwfc	Send_PS2@timeout+1,f
 16882                           
 16883                           ;PS_2.c: 948: if(timeout > 15000)
 16884  0FC8  303A               	movlw	58
 16885  0FC9  0224               	subwf	Send_PS2@timeout+1,w
 16886  0FCA  3099               	movlw	153
 16887  0FCB  1903               	skipnz
 16888  0FCC  0223               	subwf	Send_PS2@timeout,w
 16889  0FCD  1C03               	skipc
 16890  0FCE  2FBC               	goto	i1l4849
 16891                           
 16892                           ;PS_2.c: 949: {
 16893                           ;PS_2.c: 950: Clock_TRIS(1);
 16894  0FCF  3001               	movlw	1
 16895  0FD0  3198  20F1  318E   	fcall	i1_Clock_TRIS
 16896                           
 16897                           ;PS_2.c: 951: Data_TRIS(1);
 16898  0FD3  3001               	movlw	1
 16899  0FD4  3198  20FB         	fcall	i1_Data_TRIS
 16900                           
 16901                           ;PS_2.c: 952: return 1;
 16902  0FD6  3001               	movlw	1
 16903  0FD7  0008               	return
 16904  0FD8                     i1l4851:	
 16905                           
 16906                           ;PS_2.c: 953: }
 16907                           ;PS_2.c: 954: }
 16908                           ;PS_2.c: 955: timeout=0;
 16909  0FD8  0020               	movlb	0	; select bank0
 16910  0FD9  01A3               	clrf	Send_PS2@timeout
 16911  0FDA  01A4               	clrf	Send_PS2@timeout+1
 16912  0FDB                     i1l4861:	
 16913                           ;PS_2.c: 956: while(!READ_PS_2_PIN(0b00100000))
 16914                           
 16915  0FDB  3020               	movlw	32
 16916  0FDC  3199  21E3  318E   	fcall	_READ_PS_2_PIN
 16917  0FDF  3A00               	xorlw	0
 16918  0FE0  1D03               	btfss	3,2
 16919  0FE1  2FF7               	goto	i1l4863
 16920                           
 16921                           ;PS_2.c: 957: {
 16922                           ;PS_2.c: 958: timeout++;
 16923  0FE2  3001               	movlw	1
 16924  0FE3  0020               	movlb	0	; select bank0
 16925  0FE4  07A3               	addwf	Send_PS2@timeout,f
 16926  0FE5  3000               	movlw	0
 16927  0FE6  3DA4               	addwfc	Send_PS2@timeout+1,f
 16928                           
 16929                           ;PS_2.c: 959: if(timeout > 15000)
 16930  0FE7  303A               	movlw	58
 16931  0FE8  0224               	subwf	Send_PS2@timeout+1,w
 16932  0FE9  3099               	movlw	153
 16933  0FEA  1903               	skipnz
 16934  0FEB  0223               	subwf	Send_PS2@timeout,w
 16935  0FEC  1C03               	skipc
 16936  0FED  2FDB               	goto	i1l4861
 16937                           
 16938                           ;PS_2.c: 960: {
 16939                           ;PS_2.c: 961: Clock_TRIS(1);
 16940  0FEE  3001               	movlw	1
 16941  0FEF  3198  20F1  318E   	fcall	i1_Clock_TRIS
 16942                           
 16943                           ;PS_2.c: 962: Data_TRIS(1);
 16944  0FF2  3001               	movlw	1
 16945  0FF3  3198  20FB         	fcall	i1_Data_TRIS
 16946                           
 16947                           ;PS_2.c: 963: return 1;
 16948  0FF5  3001               	movlw	1
 16949  0FF6  0008               	return
 16950  0FF7                     i1l4863:	
 16951                           
 16952                           ;PS_2.c: 964: }
 16953                           ;PS_2.c: 965: }
 16954                           ;PS_2.c: 968: Clock_TRIS(1);
 16955  0FF7  3001               	movlw	1
 16956  0FF8  3198  20F1  318E   	fcall	i1_Clock_TRIS
 16957                           
 16958                           ;PS_2.c: 969: Data_TRIS(1);
 16959  0FFB  3001               	movlw	1
 16960  0FFC  3198  20FB         	fcall	i1_Data_TRIS
 16961                           
 16962                           ;PS_2.c: 970: return 0;
 16963  0FFE  3000               	movlw	0
 16964  0FFF  0008               	return
 16965  1000                     __end_of_Send_PS2:	
 16966                           
 16967                           	psect	text65
 16968  1B93                     __ptext65:	
 16969 ;; *************** function i1_delayUS *****************
 16970 ;; Defined at:
 16971 ;;		line 49 in file "MISC.c"
 16972 ;; Parameters:    Size  Location     Type
 16973 ;;  US              4    0[COMMON] long 
 16974 ;; Auto vars:     Size  Location     Type
 16975 ;;  delayUS         4    5[COMMON] long 
 16976 ;;  delayUS         1    9[COMMON] unsigned char 
 16977 ;; Return value:  Size  Location     Type
 16978 ;;		None               void
 16979 ;; Registers used:
 16980 ;;		wreg, status,2, status,0
 16981 ;; Tracked objects:
 16982 ;;		On entry : 0/0
 16983 ;;		On exit  : 0/0
 16984 ;;		Unchanged: 0/0
 16985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16986 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16987 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16988 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16989 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16990 ;;Total ram usage:       10 bytes
 16991 ;; Hardware stack levels used:    1
 16992 ;; This function calls:
 16993 ;;		Nothing
 16994 ;; This function is called by:
 16995 ;;		_UART_send_break_timed
 16996 ;;		_SetBaud
 16997 ;;		_Process_PS2_ScanCode
 16998 ;;		_Send_PS2
 16999 ;;		_WriteFlash_Sequential
 17000 ;;		i1_UARTstringWAIT
 17001 ;; This function uses a non-reentrant model
 17002 ;;
 17003                           
 17004                           
 17005                           ;psect for function i1_delayUS
 17006  1B93                     i1_delayUS:	
 17007                           
 17008                           ;MISC.c: 51: long i;
 17009                           ;MISC.c: 52: unsigned char j;
 17010                           ;MISC.c: 53: for(i=0;i<US;i+=6)
 17011                           
 17012                           ;incstack = 0
 17013                           ; Regs used in i1_delayUS: [wreg+status,2+status,0]
 17014  1B93  3000               	movlw	0
 17015  1B94  00F8               	movwf	i1delayUS@i+3
 17016  1B95  3000               	movlw	0
 17017  1B96  00F7               	movwf	i1delayUS@i+2
 17018  1B97  3000               	movlw	0
 17019  1B98  00F6               	movwf	i1delayUS@i+1
 17020  1B99  3000               	movlw	0
 17021  1B9A  00F5               	movwf	i1delayUS@i
 17022  1B9B                     i1l284:	
 17023  1B9B  0878               	movf	i1delayUS@i+3,w
 17024  1B9C  3A80               	xorlw	128
 17025  1B9D  00F4               	movwf	??i1_delayUS
 17026  1B9E  0873               	movf	i1delayUS@US+3,w
 17027  1B9F  3A80               	xorlw	128
 17028  1BA0  0274               	subwf	??i1_delayUS,w
 17029  1BA1  1D03               	skipz
 17030  1BA2  2BAD               	goto	u383_23
 17031  1BA3  0872               	movf	i1delayUS@US+2,w
 17032  1BA4  0277               	subwf	i1delayUS@i+2,w
 17033  1BA5  1D03               	skipz
 17034  1BA6  2BAD               	goto	u383_23
 17035  1BA7  0871               	movf	i1delayUS@US+1,w
 17036  1BA8  0276               	subwf	i1delayUS@i+1,w
 17037  1BA9  1D03               	skipz
 17038  1BAA  2BAD               	goto	u383_23
 17039  1BAB  0870               	movf	i1delayUS@US,w
 17040  1BAC  0275               	subwf	i1delayUS@i,w
 17041  1BAD                     u383_23:	
 17042  1BAD  1803               	btfsc	3,0
 17043  1BAE  0008               	return
 17044                           
 17045                           ;MISC.c: 54: {
 17046                           ;MISC.c: 55: for(j=0;j<32;j++)
 17047  1BAF  01F9               	clrf	i1delayUS@j
 17048  1BB0  3020               	movlw	32
 17049  1BB1  0279               	subwf	i1delayUS@j,w
 17050  1BB2  1803               	btfsc	3,0
 17051  1BB3  2BBD               	goto	i1l3761
 17052  1BB4                     i1l286:	
 17053                           
 17054                           ;MISC.c: 56: {
 17055                           ;MISC.c: 57: __nop();
 17056  1BB4  0000               	nop
 17057  1BB5  3001               	movlw	1
 17058  1BB6  00F4               	movwf	??i1_delayUS
 17059  1BB7  0874               	movf	??i1_delayUS,w
 17060  1BB8  07F9               	addwf	i1delayUS@j,f
 17061  1BB9  3020               	movlw	32
 17062  1BBA  0279               	subwf	i1delayUS@j,w
 17063  1BBB  1C03               	skipc
 17064  1BBC  2BB4               	goto	i1l286
 17065  1BBD                     i1l3761:	
 17066  1BBD  3006               	movlw	6
 17067  1BBE  07F5               	addwf	i1delayUS@i,f
 17068  1BBF  3000               	movlw	0
 17069  1BC0  3DF6               	addwfc	i1delayUS@i+1,f
 17070  1BC1  3000               	movlw	0
 17071  1BC2  3DF7               	addwfc	i1delayUS@i+2,f
 17072  1BC3  3000               	movlw	0
 17073  1BC4  3DF8               	addwfc	i1delayUS@i+3,f
 17074  1BC5  2B9B               	goto	i1l284
 17075  1BC6                     __end_ofi1_delayUS:	
 17076                           
 17077                           	psect	text66
 17078  18FB                     __ptext66:	
 17079 ;; *************** function i1_Data_TRIS *****************
 17080 ;; Defined at:
 17081 ;;		line 130 in file "PS_2.c"
 17082 ;; Parameters:    Size  Location     Type
 17083 ;;  direction       1    wreg     unsigned char 
 17084 ;; Auto vars:     Size  Location     Type
 17085 ;;  direction       1    0[COMMON] unsigned char 
 17086 ;; Return value:  Size  Location     Type
 17087 ;;		None               void
 17088 ;; Registers used:
 17089 ;;		wreg, status,2, status,0
 17090 ;; Tracked objects:
 17091 ;;		On entry : 0/0
 17092 ;;		On exit  : 0/0
 17093 ;;		Unchanged: 0/0
 17094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17096 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17098 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17099 ;;Total ram usage:        1 bytes
 17100 ;; Hardware stack levels used:    1
 17101 ;; This function calls:
 17102 ;;		Nothing
 17103 ;; This function is called by:
 17104 ;;		_Send_PS2
 17105 ;; This function uses a non-reentrant model
 17106 ;;
 17107                           
 17108                           
 17109                           ;psect for function i1_Data_TRIS
 17110  18FB                     i1_Data_TRIS:	
 17111                           
 17112                           ;incstack = 0
 17113                           ; Regs used in i1_Data_TRIS: [wreg+status,2+status,0]
 17114                           ;i1Data_TRIS@direction stored from wreg
 17115  18FB  00F0               	movwf	i1Data_TRIS@direction
 17116                           
 17117                           ;PS_2.c: 132: if(direction == 0)
 17118  18FC  08F0               	movf	i1Data_TRIS@direction,f
 17119  18FD  1D03               	skipz
 17120  18FE  2902               	goto	i1l627
 17121                           
 17122                           ;PS_2.c: 133: {
 17123                           ;PS_2.c: 134: TRISAbits.TRISA4 = 0;
 17124  18FF  0021               	movlb	1	; select bank1
 17125  1900  120C               	bcf	12,4	;volatile
 17126                           
 17127                           ;PS_2.c: 135: }
 17128  1901  0008               	return
 17129  1902                     i1l627:	
 17130                           
 17131                           ;PS_2.c: 136: else
 17132                           ;PS_2.c: 137: {
 17133                           ;PS_2.c: 138: TRISAbits.TRISA4 = 1;
 17134  1902  0021               	movlb	1	; select bank1
 17135  1903  160C               	bsf	12,4	;volatile
 17136  1904  0008               	return
 17137  1905                     __end_ofi1_Data_TRIS:	
 17138                           
 17139                           	psect	text67
 17140  18F1                     __ptext67:	
 17141 ;; *************** function i1_Clock_TRIS *****************
 17142 ;; Defined at:
 17143 ;;		line 113 in file "PS_2.c"
 17144 ;; Parameters:    Size  Location     Type
 17145 ;;  direction       1    wreg     unsigned char 
 17146 ;; Auto vars:     Size  Location     Type
 17147 ;;  direction       1    0[COMMON] unsigned char 
 17148 ;; Return value:  Size  Location     Type
 17149 ;;		None               void
 17150 ;; Registers used:
 17151 ;;		wreg, status,2, status,0
 17152 ;; Tracked objects:
 17153 ;;		On entry : 0/0
 17154 ;;		On exit  : 0/0
 17155 ;;		Unchanged: 0/0
 17156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17158 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17160 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17161 ;;Total ram usage:        1 bytes
 17162 ;; Hardware stack levels used:    1
 17163 ;; This function calls:
 17164 ;;		Nothing
 17165 ;; This function is called by:
 17166 ;;		_Send_PS2
 17167 ;; This function uses a non-reentrant model
 17168 ;;
 17169                           
 17170                           
 17171                           ;psect for function i1_Clock_TRIS
 17172  18F1                     i1_Clock_TRIS:	
 17173                           
 17174                           ;incstack = 0
 17175                           ; Regs used in i1_Clock_TRIS: [wreg+status,2+status,0]
 17176                           ;i1Clock_TRIS@direction stored from wreg
 17177  18F1  00F0               	movwf	i1Clock_TRIS@direction
 17178                           
 17179                           ;PS_2.c: 115: if(direction == 0)
 17180  18F2  08F0               	movf	i1Clock_TRIS@direction,f
 17181  18F3  1D03               	skipz
 17182  18F4  28F8               	goto	i1l622
 17183                           
 17184                           ;PS_2.c: 116: {
 17185                           ;PS_2.c: 117: TRISAbits.TRISA5 = 0;
 17186  18F5  0021               	movlb	1	; select bank1
 17187  18F6  128C               	bcf	12,5	;volatile
 17188                           
 17189                           ;PS_2.c: 118: }
 17190  18F7  0008               	return
 17191  18F8                     i1l622:	
 17192                           
 17193                           ;PS_2.c: 119: else
 17194                           ;PS_2.c: 120: {
 17195                           ;PS_2.c: 121: TRISAbits.TRISA5 = 1;
 17196  18F8  0021               	movlb	1	; select bank1
 17197  18F9  168C               	bsf	12,5	;volatile
 17198  18FA  0008               	return
 17199  18FB                     __end_ofi1_Clock_TRIS:	
 17200                           
 17201                           	psect	text68
 17202  19E3                     __ptext68:	
 17203 ;; *************** function _READ_PS_2_PIN *****************
 17204 ;; Defined at:
 17205 ;;		line 215 in file "PS_2.c"
 17206 ;; Parameters:    Size  Location     Type
 17207 ;;  DATA_CLK        1    wreg     unsigned char 
 17208 ;; Auto vars:     Size  Location     Type
 17209 ;;  DATA_CLK        1    0[COMMON] unsigned char 
 17210 ;; Return value:  Size  Location     Type
 17211 ;;                  1    wreg      unsigned char 
 17212 ;; Registers used:
 17213 ;;		wreg
 17214 ;; Tracked objects:
 17215 ;;		On entry : 0/0
 17216 ;;		On exit  : 0/0
 17217 ;;		Unchanged: 0/0
 17218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17220 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17222 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17223 ;;Total ram usage:        1 bytes
 17224 ;; Hardware stack levels used:    1
 17225 ;; This function calls:
 17226 ;;		Nothing
 17227 ;; This function is called by:
 17228 ;;		_isr
 17229 ;;		_Send_PS2
 17230 ;; This function uses a non-reentrant model
 17231 ;;
 17232                           
 17233                           
 17234                           ;psect for function _READ_PS_2_PIN
 17235  19E3                     _READ_PS_2_PIN:	
 17236                           
 17237                           ;incstack = 0
 17238                           ; Regs used in _READ_PS_2_PIN: [wreg]
 17239                           ;READ_PS_2_PIN@DATA_CLK stored from wreg
 17240  19E3  00F0               	movwf	READ_PS_2_PIN@DATA_CLK
 17241                           
 17242                           ;PS_2.c: 217: if(DATA_CLK == 0b00100000)
 17243  19E4  0870               	movf	READ_PS_2_PIN@DATA_CLK,w
 17244  19E5  3A20               	xorlw	32
 17245  19E6  1D03               	skipz
 17246  19E7  29EF               	goto	i1l647
 17247                           
 17248                           ;PS_2.c: 218: {
 17249                           ;PS_2.c: 220: if((PORTA & 0b00100000) == 0b00100000)
 17250  19E8  0020               	movlb	0	; select bank0
 17251  19E9  1E8C               	btfss	12,5	;volatile
 17252  19EA  29ED               	goto	i1l4061
 17253                           
 17254                           ;PS_2.c: 221: {
 17255                           ;PS_2.c: 222: return (1);
 17256  19EB  3001               	movlw	1
 17257                           
 17258                           ;PS_2.c: 223: }
 17259  19EC  0008               	return
 17260  19ED                     i1l4061:	
 17261                           
 17262                           ;PS_2.c: 224: else
 17263                           ;PS_2.c: 225: {
 17264                           ;PS_2.c: 226: return 0;
 17265  19ED  3000               	movlw	0
 17266                           
 17267                           ;PS_2.c: 227: }
 17268                           ;PS_2.c: 228: }
 17269  19EE  0008               	return
 17270  19EF                     i1l647:	
 17271                           
 17272                           ;PS_2.c: 229: else
 17273                           ;PS_2.c: 230: {
 17274                           ;PS_2.c: 232: if((PORTA & 0b00010000) == 0b00010000)
 17275  19EF  0020               	movlb	0	; select bank0
 17276  19F0  1E0C               	btfss	12,4	;volatile
 17277  19F1  29F4               	goto	i1l4071
 17278                           
 17279                           ;PS_2.c: 233: {
 17280                           ;PS_2.c: 234: return (1);
 17281  19F2  3001               	movlw	1
 17282                           
 17283                           ;PS_2.c: 235: }
 17284  19F3  0008               	return
 17285  19F4                     i1l4071:	
 17286                           
 17287                           ;PS_2.c: 236: else
 17288                           ;PS_2.c: 237: {
 17289                           ;PS_2.c: 238: return 0;
 17290  19F4  3000               	movlw	0
 17291  19F5  0008               	return
 17292  19F6                     __end_of_READ_PS_2_PIN:	
 17293                           
 17294                           	psect	text69
 17295  195F                     __ptext69:	
 17296 ;; *************** function _ISNUMBER *****************
 17297 ;; Defined at:
 17298 ;;		line 127 in file "MISC.c"
 17299 ;; Parameters:    Size  Location     Type
 17300 ;;  ascii           1    wreg     unsigned char 
 17301 ;; Auto vars:     Size  Location     Type
 17302 ;;  ascii           1    0[COMMON] unsigned char 
 17303 ;; Return value:  Size  Location     Type
 17304 ;;                  1    wreg      unsigned char 
 17305 ;; Registers used:
 17306 ;;		wreg
 17307 ;; Tracked objects:
 17308 ;;		On entry : 0/0
 17309 ;;		On exit  : 0/0
 17310 ;;		Unchanged: 0/0
 17311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17313 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17315 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17316 ;;Total ram usage:        1 bytes
 17317 ;; Hardware stack levels used:    1
 17318 ;; This function calls:
 17319 ;;		Nothing
 17320 ;; This function is called by:
 17321 ;;		_Process_PS2_ScanCode
 17322 ;; This function uses a non-reentrant model
 17323 ;;
 17324                           
 17325                           
 17326                           ;psect for function _ISNUMBER
 17327  195F                     _ISNUMBER:	
 17328                           
 17329                           ;incstack = 0
 17330                           ; Regs used in _ISNUMBER: [wreg]
 17331                           ;ISNUMBER@ascii stored from wreg
 17332  195F  00F0               	movwf	ISNUMBER@ascii
 17333                           
 17334                           ;MISC.c: 129: if(ascii >= '0' && ascii <='9')
 17335  1960  3030               	movlw	48
 17336  1961  0270               	subwf	ISNUMBER@ascii,w
 17337  1962  1C03               	skipc
 17338  1963  296A               	goto	i1l4603
 17339  1964  303A               	movlw	58
 17340  1965  0270               	subwf	ISNUMBER@ascii,w
 17341  1966  1803               	skipnc
 17342  1967  296A               	goto	i1l4603
 17343                           
 17344                           ;MISC.c: 130: {
 17345                           ;MISC.c: 131: return 1;
 17346  1968  3001               	movlw	1
 17347                           
 17348                           ;MISC.c: 132: }
 17349  1969  0008               	return
 17350  196A                     i1l4603:	
 17351                           
 17352                           ;MISC.c: 133: else
 17353                           ;MISC.c: 134: {
 17354                           ;MISC.c: 135: return 0;
 17355  196A  3000               	movlw	0
 17356  196B  0008               	return
 17357  196C                     __end_of_ISNUMBER:	
 17358                           
 17359                           	psect	text70
 17360  19BF                     __ptext70:	
 17361 ;; *************** function _Decode_Scan_Code_Shift *****************
 17362 ;; Defined at:
 17363 ;;		line 773 in file "PS_2.c"
 17364 ;; Parameters:    Size  Location     Type
 17365 ;;  Code            1    wreg     unsigned char 
 17366 ;; Auto vars:     Size  Location     Type
 17367 ;;  Code            1    0[COMMON] unsigned char 
 17368 ;; Return value:  Size  Location     Type
 17369 ;;                  1    wreg      unsigned char 
 17370 ;; Registers used:
 17371 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 17372 ;; Tracked objects:
 17373 ;;		On entry : 0/0
 17374 ;;		On exit  : 0/0
 17375 ;;		Unchanged: 0/0
 17376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17378 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17380 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17381 ;;Total ram usage:        1 bytes
 17382 ;; Hardware stack levels used:    1
 17383 ;; This function calls:
 17384 ;;		Nothing
 17385 ;; This function is called by:
 17386 ;;		_Process_PS2_ScanCode
 17387 ;; This function uses a non-reentrant model
 17388 ;;
 17389                           
 17390                           
 17391                           ;psect for function _Decode_Scan_Code_Shift
 17392  19BF                     _Decode_Scan_Code_Shift:	
 17393                           
 17394                           ;incstack = 0
 17395                           ; Regs used in _Decode_Scan_Code_Shift: [wreg-fsr0h+status,2+status,0+pclath]
 17396                           ;Decode_Scan_Code_Shift@Code stored from wreg
 17397  19BF  00F0               	movwf	Decode_Scan_Code_Shift@Code
 17398                           
 17399                           ;PS_2.c: 775: Code -= 13;
 17400  19C0  300D               	movlw	13
 17401  19C1  02F0               	subwf	Decode_Scan_Code_Shift@Code,f
 17402                           
 17403                           ;PS_2.c: 776: if(Code <=112)
 17404  19C2  3071               	movlw	113
 17405  19C3  0270               	subwf	Decode_Scan_Code_Shift@Code,w
 17406  19C4  1803               	skipnc
 17407  19C5  29CF               	goto	i1l4889
 17408                           
 17409                           ;PS_2.c: 777: {
 17410                           ;PS_2.c: 778: return ScanCodeSHIFT[Code];
 17411  19C6  0870               	movf	Decode_Scan_Code_Shift@Code,w
 17412  19C7  3EF5               	addlw	low (_ScanCodeSHIFT| (0+32768))
 17413  19C8  0084               	movwf	4
 17414  19C9  3087               	movlw	high (_ScanCodeSHIFT| (0+32768))
 17415  19CA  1803               	skipnc
 17416  19CB  3E01               	addlw	1
 17417  19CC  0085               	movwf	5
 17418  19CD  0800               	movf	0,w	;code access
 17419                           
 17420                           ;PS_2.c: 779: }
 17421  19CE  0008               	return
 17422  19CF                     i1l4889:	
 17423                           
 17424                           ;PS_2.c: 780: else
 17425                           ;PS_2.c: 781: {
 17426                           ;PS_2.c: 782: return 0;
 17427  19CF  3000               	movlw	0
 17428  19D0  0008               	return
 17429  19D1                     __end_of_Decode_Scan_Code_Shift:	
 17430                           
 17431                           	psect	text71
 17432  19AD                     __ptext71:	
 17433 ;; *************** function _Decode_Scan_Code_FunctionE0 *****************
 17434 ;; Defined at:
 17435 ;;		line 792 in file "PS_2.c"
 17436 ;; Parameters:    Size  Location     Type
 17437 ;;  Code            1    wreg     unsigned char 
 17438 ;; Auto vars:     Size  Location     Type
 17439 ;;  Code            1    0[COMMON] unsigned char 
 17440 ;; Return value:  Size  Location     Type
 17441 ;;                  1    wreg      unsigned char 
 17442 ;; Registers used:
 17443 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 17444 ;; Tracked objects:
 17445 ;;		On entry : 0/0
 17446 ;;		On exit  : 0/0
 17447 ;;		Unchanged: 0/0
 17448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17450 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17452 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17453 ;;Total ram usage:        1 bytes
 17454 ;; Hardware stack levels used:    1
 17455 ;; This function calls:
 17456 ;;		Nothing
 17457 ;; This function is called by:
 17458 ;;		_Process_PS2_ScanCode
 17459 ;; This function uses a non-reentrant model
 17460 ;;
 17461                           
 17462                           
 17463                           ;psect for function _Decode_Scan_Code_FunctionE0
 17464  19AD                     _Decode_Scan_Code_FunctionE0:	
 17465                           
 17466                           ;incstack = 0
 17467                           ; Regs used in _Decode_Scan_Code_FunctionE0: [wreg-fsr0h+status,2+status,0+pclath]
 17468                           ;Decode_Scan_Code_FunctionE0@Code stored from wreg
 17469  19AD  00F0               	movwf	Decode_Scan_Code_FunctionE0@Code
 17470                           
 17471                           ;PS_2.c: 794: Code -= 17;
 17472  19AE  3011               	movlw	17
 17473  19AF  02F0               	subwf	Decode_Scan_Code_FunctionE0@Code,f
 17474                           
 17475                           ;PS_2.c: 795: if(Code <=108)
 17476  19B0  306D               	movlw	109
 17477  19B1  0270               	subwf	Decode_Scan_Code_FunctionE0@Code,w
 17478  19B2  1803               	skipnc
 17479  19B3  29BD               	goto	i1l4877
 17480                           
 17481                           ;PS_2.c: 796: {
 17482                           ;PS_2.c: 797: return ScanCodeFunctionE0[Code];
 17483  19B4  0870               	movf	Decode_Scan_Code_FunctionE0@Code,w
 17484  19B5  3E66               	addlw	low (_ScanCodeFunctionE0| (0+32768))
 17485  19B6  0084               	movwf	4
 17486  19B7  3088               	movlw	high (_ScanCodeFunctionE0| (0+32768))
 17487  19B8  1803               	skipnc
 17488  19B9  3E01               	addlw	1
 17489  19BA  0085               	movwf	5
 17490  19BB  0800               	movf	0,w	;code access
 17491                           
 17492                           ;PS_2.c: 798: }
 17493  19BC  0008               	return
 17494  19BD                     i1l4877:	
 17495                           
 17496                           ;PS_2.c: 799: else
 17497                           ;PS_2.c: 800: {
 17498                           ;PS_2.c: 801: return 0;
 17499  19BD  3000               	movlw	0
 17500  19BE  0008               	return
 17501  19BF                     __end_of_Decode_Scan_Code_FunctionE0:	
 17502                           
 17503                           	psect	text72
 17504  197A                     __ptext72:	
 17505 ;; *************** function _Decode_Scan_Code_Function *****************
 17506 ;; Defined at:
 17507 ;;		line 811 in file "PS_2.c"
 17508 ;; Parameters:    Size  Location     Type
 17509 ;;  Code            1    wreg     unsigned char 
 17510 ;; Auto vars:     Size  Location     Type
 17511 ;;  Code            1    0[COMMON] unsigned char 
 17512 ;; Return value:  Size  Location     Type
 17513 ;;                  1    wreg      unsigned char 
 17514 ;; Registers used:
 17515 ;;		wreg, fsr0l, fsr0h, pclath
 17516 ;; Tracked objects:
 17517 ;;		On entry : 0/0
 17518 ;;		On exit  : 0/0
 17519 ;;		Unchanged: 0/0
 17520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17522 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17524 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17525 ;;Total ram usage:        1 bytes
 17526 ;; Hardware stack levels used:    1
 17527 ;; This function calls:
 17528 ;;		Nothing
 17529 ;; This function is called by:
 17530 ;;		_Process_PS2_ScanCode
 17531 ;; This function uses a non-reentrant model
 17532 ;;
 17533                           
 17534                           
 17535                           ;psect for function _Decode_Scan_Code_Function
 17536  197A                     _Decode_Scan_Code_Function:	
 17537                           
 17538                           ;incstack = 0
 17539                           ; Regs used in _Decode_Scan_Code_Function: [wreg-fsr0h+pclath]
 17540                           ;Decode_Scan_Code_Function@Code stored from wreg
 17541  197A  00F0               	movwf	Decode_Scan_Code_Function@Code
 17542                           
 17543                           ;PS_2.c: 813: if(Code <=131)
 17544  197B  3084               	movlw	132
 17545  197C  0270               	subwf	Decode_Scan_Code_Function@Code,w
 17546  197D  1803               	skipnc
 17547  197E  2988               	goto	i1l4913
 17548                           
 17549                           ;PS_2.c: 814: {
 17550                           ;PS_2.c: 815: return ScanCodeFunctionNoE0[Code];
 17551  197F  0870               	movf	Decode_Scan_Code_Function@Code,w
 17552  1980  3E00               	addlw	low (_ScanCodeFunctionNoE0| (0+32768))
 17553  1981  0084               	movwf	4
 17554  1982  3087               	movlw	high (_ScanCodeFunctionNoE0| (0+32768))
 17555  1983  1803               	skipnc
 17556  1984  3E01               	addlw	1
 17557  1985  0085               	movwf	5
 17558  1986  0800               	movf	0,w	;code access
 17559                           
 17560                           ;PS_2.c: 816: }
 17561  1987  0008               	return
 17562  1988                     i1l4913:	
 17563                           
 17564                           ;PS_2.c: 817: else
 17565                           ;PS_2.c: 818: {
 17566                           ;PS_2.c: 819: return 0;
 17567  1988  3000               	movlw	0
 17568  1989  0008               	return
 17569  198A                     __end_of_Decode_Scan_Code_Function:	
 17570                           
 17571                           	psect	text73
 17572  199B                     __ptext73:	
 17573 ;; *************** function _Decode_Scan_Code *****************
 17574 ;; Defined at:
 17575 ;;		line 754 in file "PS_2.c"
 17576 ;; Parameters:    Size  Location     Type
 17577 ;;  Code            1    wreg     unsigned char 
 17578 ;; Auto vars:     Size  Location     Type
 17579 ;;  Code            1    0[COMMON] unsigned char 
 17580 ;; Return value:  Size  Location     Type
 17581 ;;                  1    wreg      unsigned char 
 17582 ;; Registers used:
 17583 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 17584 ;; Tracked objects:
 17585 ;;		On entry : 0/0
 17586 ;;		On exit  : 0/0
 17587 ;;		Unchanged: 0/0
 17588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17590 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17592 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17593 ;;Total ram usage:        1 bytes
 17594 ;; Hardware stack levels used:    1
 17595 ;; This function calls:
 17596 ;;		Nothing
 17597 ;; This function is called by:
 17598 ;;		_Process_PS2_ScanCode
 17599 ;; This function uses a non-reentrant model
 17600 ;;
 17601                           
 17602                           
 17603                           ;psect for function _Decode_Scan_Code
 17604  199B                     _Decode_Scan_Code:	
 17605                           
 17606                           ;incstack = 0
 17607                           ; Regs used in _Decode_Scan_Code: [wreg-fsr0h+status,2+status,0+pclath]
 17608                           ;Decode_Scan_Code@Code stored from wreg
 17609  199B  00F0               	movwf	Decode_Scan_Code@Code
 17610                           
 17611                           ;PS_2.c: 756: Code -= 13;
 17612  199C  300D               	movlw	13
 17613  199D  02F0               	subwf	Decode_Scan_Code@Code,f
 17614                           
 17615                           ;PS_2.c: 757: if(Code <=112)
 17616  199E  3071               	movlw	113
 17617  199F  0270               	subwf	Decode_Scan_Code@Code,w
 17618  19A0  1803               	skipnc
 17619  19A1  29AB               	goto	i1l4901
 17620                           
 17621                           ;PS_2.c: 758: {
 17622                           ;PS_2.c: 759: return ScanCode[Code];
 17623  19A2  0870               	movf	Decode_Scan_Code@Code,w
 17624  19A3  3E84               	addlw	low (_ScanCode| (0+32768))
 17625  19A4  0084               	movwf	4
 17626  19A5  3087               	movlw	high (_ScanCode| (0+32768))
 17627  19A6  1803               	skipnc
 17628  19A7  3E01               	addlw	1
 17629  19A8  0085               	movwf	5
 17630  19A9  0800               	movf	0,w	;code access
 17631                           
 17632                           ;PS_2.c: 760: }
 17633  19AA  0008               	return
 17634  19AB                     i1l4901:	
 17635                           
 17636                           ;PS_2.c: 761: else
 17637                           ;PS_2.c: 762: {
 17638                           ;PS_2.c: 763: return 0;
 17639  19AB  3000               	movlw	0
 17640  19AC  0008               	return
 17641  19AD                     __end_of_Decode_Scan_Code:	
 17642                           
 17643                           	psect	text74
 17644  1C6A                     __ptext74:	
 17645 ;; *************** function _BufferShiftBack *****************
 17646 ;; Defined at:
 17647 ;;		line 175 in file "MISC.c"
 17648 ;; Parameters:    Size  Location     Type
 17649 ;;  buffer          1    wreg     PTR unsigned char 
 17650 ;;		 -> PS_2_ScanCodes(12), 
 17651 ;;  shift           1    0[COMMON] unsigned char 
 17652 ;;  size            1    1[COMMON] unsigned char 
 17653 ;; Auto vars:     Size  Location     Type
 17654 ;;  buffer          1    7[COMMON] PTR unsigned char 
 17655 ;;		 -> PS_2_ScanCodes(12), 
 17656 ;;  i               1    6[COMMON] unsigned char 
 17657 ;; Return value:  Size  Location     Type
 17658 ;;                  1    wreg      unsigned char 
 17659 ;; Registers used:
 17660 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17661 ;; Tracked objects:
 17662 ;;		On entry : 0/0
 17663 ;;		On exit  : 0/0
 17664 ;;		Unchanged: 0/0
 17665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17666 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17667 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17668 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17669 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17670 ;;Total ram usage:        8 bytes
 17671 ;; Hardware stack levels used:    1
 17672 ;; This function calls:
 17673 ;;		Nothing
 17674 ;; This function is called by:
 17675 ;;		_Process_PS2_ScanCode
 17676 ;; This function uses a non-reentrant model
 17677 ;;
 17678                           
 17679                           
 17680                           ;psect for function _BufferShiftBack
 17681  1C6A                     _BufferShiftBack:	
 17682                           
 17683                           ;incstack = 0
 17684                           ; Regs used in _BufferShiftBack: [wreg+fsr1l+fsr1h+status,2+status,0]
 17685                           ;BufferShiftBack@buffer stored from wreg
 17686  1C6A  00F7               	movwf	BufferShiftBack@buffer
 17687                           
 17688                           ;MISC.c: 177: unsigned char i=0;
 17689  1C6B  01F6               	clrf	BufferShiftBack@i
 17690                           
 17691                           ;MISC.c: 178: if(shift > size)
 17692  1C6C  0870               	movf	BufferShiftBack@shift,w
 17693  1C6D  0271               	subwf	BufferShiftBack@size,w
 17694  1C6E  1C03               	btfss	3,0
 17695  1C6F  0008               	return
 17696                           
 17697                           ;MISC.c: 181: }
 17698                           ;MISC.c: 182: for(i = 0; i < size; i++)
 17699                           
 17700                           ;MISC.c: 179: {
 17701                           ;MISC.c: 180: return 0;
 17702                           ;	Return value of _BufferShiftBack is never used
 17703  1C70  01F6               	clrf	BufferShiftBack@i
 17704  1C71                     i1l4631:	
 17705  1C71  0871               	movf	BufferShiftBack@size,w
 17706  1C72  0276               	subwf	BufferShiftBack@i,w
 17707  1C73  1803               	btfsc	3,0
 17708  1C74  0008               	return
 17709                           
 17710                           ;MISC.c: 183: {
 17711                           ;MISC.c: 184: if(i < (size - shift))
 17712  1C75  0870               	movf	BufferShiftBack@shift,w
 17713  1C76  00F2               	movwf	??_BufferShiftBack
 17714  1C77  01F3               	clrf	??_BufferShiftBack+1
 17715  1C78  09F2               	comf	??_BufferShiftBack,f
 17716  1C79  09F3               	comf	??_BufferShiftBack+1,f
 17717  1C7A  0AF2               	incf	??_BufferShiftBack,f
 17718  1C7B  1903               	skipnz
 17719  1C7C  0AF3               	incf	??_BufferShiftBack+1,f
 17720  1C7D  0871               	movf	BufferShiftBack@size,w
 17721  1C7E  0772               	addwf	??_BufferShiftBack,w
 17722  1C7F  00F4               	movwf	??_BufferShiftBack+2
 17723  1C80  0873               	movf	??_BufferShiftBack+1,w
 17724  1C81  1803               	skipnc
 17725  1C82  0A73               	incf	??_BufferShiftBack+1,w
 17726  1C83  00F5               	movwf	??_BufferShiftBack+3
 17727  1C84  0875               	movf	??_BufferShiftBack+3,w
 17728  1C85  3A80               	xorlw	128
 17729  1C86  3C80               	sublw	128
 17730  1C87  1D03               	skipz
 17731  1C88  2C8B               	goto	u522_25
 17732  1C89  0874               	movf	??_BufferShiftBack+2,w
 17733  1C8A  0276               	subwf	BufferShiftBack@i,w
 17734  1C8B                     u522_25:	
 17735  1C8B  1803               	skipnc
 17736  1C8C  2C9F               	goto	i1l4627
 17737                           
 17738                           ;MISC.c: 185: {
 17739                           ;MISC.c: 186: buffer[i] = buffer[i+shift];
 17740  1C8D  0876               	movf	BufferShiftBack@i,w
 17741  1C8E  0770               	addwf	BufferShiftBack@shift,w
 17742  1C8F  0777               	addwf	BufferShiftBack@buffer,w
 17743  1C90  00F2               	movwf	??_BufferShiftBack
 17744  1C91  0872               	movf	??_BufferShiftBack,w
 17745  1C92  0086               	movwf	6
 17746  1C93  0187               	clrf	7
 17747  1C94  0801               	movf	1,w
 17748  1C95  00F3               	movwf	??_BufferShiftBack+1
 17749  1C96  0876               	movf	BufferShiftBack@i,w
 17750  1C97  0777               	addwf	BufferShiftBack@buffer,w
 17751  1C98  00F4               	movwf	??_BufferShiftBack+2
 17752  1C99  0874               	movf	??_BufferShiftBack+2,w
 17753  1C9A  0086               	movwf	6
 17754  1C9B  0187               	clrf	7
 17755  1C9C  0873               	movf	??_BufferShiftBack+1,w
 17756  1C9D  0081               	movwf	1
 17757                           
 17758                           ;MISC.c: 187: }
 17759  1C9E  2CA6               	goto	i1l4629
 17760  1C9F                     i1l4627:	
 17761                           
 17762                           ;MISC.c: 188: else
 17763                           ;MISC.c: 189: {
 17764                           ;MISC.c: 190: buffer[i] = 0;
 17765  1C9F  0876               	movf	BufferShiftBack@i,w
 17766  1CA0  0777               	addwf	BufferShiftBack@buffer,w
 17767  1CA1  00F2               	movwf	??_BufferShiftBack
 17768  1CA2  0872               	movf	??_BufferShiftBack,w
 17769  1CA3  0086               	movwf	6
 17770  1CA4  0187               	clrf	7
 17771  1CA5  0181               	clrf	1
 17772  1CA6                     i1l4629:	
 17773  1CA6  3001               	movlw	1
 17774  1CA7  00F2               	movwf	??_BufferShiftBack
 17775  1CA8  0872               	movf	??_BufferShiftBack,w
 17776  1CA9  07F6               	addwf	BufferShiftBack@i,f
 17777  1CAA  2C71               	goto	i1l4631
 17778  1CAB                     __end_of_BufferShiftBack:	
 17779                           ;MISC.c: 191: }
 17780                           ;MISC.c: 192: }
 17781                           ;MISC.c: 193: return 1;
 17782                           ;	Return value of _BufferShiftBack is never used
 17783                           
 17784                           
 17785                           	psect	text75
 17786  1DB6                     __ptext75:	
 17787 ;; *************** function _PS2RawToScan *****************
 17788 ;; Defined at:
 17789 ;;		line 1116 in file "PS_2.c"
 17790 ;; Parameters:    Size  Location     Type
 17791 ;;  Raw             2    8[COMMON] unsigned int 
 17792 ;; Auto vars:     Size  Location     Type
 17793 ;;  temp            2   10[COMMON] unsigned int 
 17794 ;; Return value:  Size  Location     Type
 17795 ;;                  2    8[COMMON] unsigned int 
 17796 ;; Registers used:
 17797 ;;		wreg, status,2, status,0, pclath, cstack
 17798 ;; Tracked objects:
 17799 ;;		On entry : 0/0
 17800 ;;		On exit  : 0/0
 17801 ;;		Unchanged: 0/0
 17802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17803 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17804 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17805 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17806 ;;      Totals:         4       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17807 ;;Total ram usage:       13 bytes
 17808 ;; Hardware stack levels used:    1
 17809 ;; Hardware stack levels required when called:    1
 17810 ;; This function calls:
 17811 ;;		_Reverse_Byte
 17812 ;;		i1_CheckSum_byte
 17813 ;; This function is called by:
 17814 ;;		_isr
 17815 ;; This function uses a non-reentrant model
 17816 ;;
 17817                           
 17818                           
 17819                           ;psect for function _PS2RawToScan
 17820  1DB6                     _PS2RawToScan:	
 17821                           
 17822                           ;PS_2.c: 1118: unsigned int temp;
 17823                           ;PS_2.c: 1120: if(CheckSum_byte((Raw >> 2) & 0xFF , 3) == ((Raw & 0x02)>> 1))
 17824                           
 17825                           ;incstack = 0
 17826                           ; Regs used in _PS2RawToScan: [wreg+status,2+status,0+pclath+cstack]
 17827  1DB6  0879               	movf	PS2RawToScan@Raw+1,w
 17828  1DB7  0020               	movlb	0	; select bank0
 17829  1DB8  00A1               	movwf	??_PS2RawToScan+1
 17830  1DB9  0878               	movf	PS2RawToScan@Raw,w
 17831  1DBA  00A0               	movwf	??_PS2RawToScan
 17832  1DBB  36A1               	lsrf	??_PS2RawToScan+1,f
 17833  1DBC  0CA0               	rrf	??_PS2RawToScan,f
 17834  1DBD  3001               	movlw	1
 17835  1DBE  0520               	andwf	??_PS2RawToScan,w
 17836  1DBF  00A2               	movwf	??_PS2RawToScan+2
 17837  1DC0  3000               	movlw	0
 17838  1DC1  0521               	andwf	??_PS2RawToScan+1,w
 17839  1DC2  00A3               	movwf	??_PS2RawToScan+3
 17840  1DC3  0879               	movf	PS2RawToScan@Raw+1,w
 17841  1DC4  00A5               	movwf	??_PS2RawToScan+5
 17842  1DC5  0878               	movf	PS2RawToScan@Raw,w
 17843  1DC6  00A4               	movwf	??_PS2RawToScan+4
 17844  1DC7  36A5               	lsrf	??_PS2RawToScan+5,f
 17845  1DC8  0CA4               	rrf	??_PS2RawToScan+4,f
 17846  1DC9  36A5               	lsrf	??_PS2RawToScan+5,f
 17847  1DCA  0CA4               	rrf	??_PS2RawToScan+4,f
 17848  1DCB  30FF               	movlw	255
 17849  1DCC  0524               	andwf	??_PS2RawToScan+4,w
 17850  1DCD  00F0               	movwf	i1CheckSum_byte@This
 17851  1DCE  3000               	movlw	0
 17852  1DCF  0525               	andwf	??_PS2RawToScan+5,w
 17853  1DD0  00F1               	movwf	i1CheckSum_byte@This+1
 17854  1DD1  3003               	movlw	3
 17855  1DD2  00A6               	movwf	??_PS2RawToScan+6
 17856  1DD3  0826               	movf	??_PS2RawToScan+6,w
 17857  1DD4  00F2               	movwf	i1CheckSum_byte@Odd_Even
 17858  1DD5  318A  2268  319D   	fcall	i1_CheckSum_byte
 17859  1DD8  0020               	movlb	0	; select bank0
 17860  1DD9  00A7               	movwf	??_PS2RawToScan+7
 17861  1DDA  01A8               	clrf	??_PS2RawToScan+8
 17862  1DDB  0823               	movf	??_PS2RawToScan+3,w
 17863  1DDC  0628               	xorwf	??_PS2RawToScan+8,w
 17864  1DDD  1D03               	skipz
 17865  1DDE  2DE1               	goto	u586_25
 17866  1DDF  0822               	movf	??_PS2RawToScan+2,w
 17867  1DE0  0627               	xorwf	??_PS2RawToScan+7,w
 17868  1DE1                     u586_25:	
 17869  1DE1  1D03               	skipz
 17870  1DE2  2DFD               	goto	i1l5057
 17871                           
 17872                           ;PS_2.c: 1121: {
 17873                           ;PS_2.c: 1123: temp = ((Raw >> 2) & 0xFF);
 17874  1DE3  0879               	movf	PS2RawToScan@Raw+1,w
 17875  1DE4  00A1               	movwf	??_PS2RawToScan+1
 17876  1DE5  0878               	movf	PS2RawToScan@Raw,w
 17877  1DE6  00A0               	movwf	??_PS2RawToScan
 17878  1DE7  36A1               	lsrf	??_PS2RawToScan+1,f
 17879  1DE8  0CA0               	rrf	??_PS2RawToScan,f
 17880  1DE9  36A1               	lsrf	??_PS2RawToScan+1,f
 17881  1DEA  0CA0               	rrf	??_PS2RawToScan,f
 17882  1DEB  30FF               	movlw	255
 17883  1DEC  0520               	andwf	??_PS2RawToScan,w
 17884  1DED  00FA               	movwf	PS2RawToScan@temp
 17885  1DEE  3000               	movlw	0
 17886  1DEF  0521               	andwf	??_PS2RawToScan+1,w
 17887  1DF0  00FB               	movwf	PS2RawToScan@temp+1
 17888                           
 17889                           ;PS_2.c: 1124: temp = (unsigned int) Reverse_Byte((unsigned char) temp);
 17890  1DF1  087A               	movf	PS2RawToScan@temp,w
 17891  1DF2  319F  274D  319D   	fcall	_Reverse_Byte
 17892  1DF5  0020               	movlb	0	; select bank0
 17893  1DF6  00A0               	movwf	??_PS2RawToScan
 17894  1DF7  01A1               	clrf	??_PS2RawToScan+1
 17895  1DF8  0820               	movf	??_PS2RawToScan,w
 17896  1DF9  00FA               	movwf	PS2RawToScan@temp
 17897  1DFA  0821               	movf	??_PS2RawToScan+1,w
 17898  1DFB  00FB               	movwf	PS2RawToScan@temp+1
 17899                           
 17900                           ;PS_2.c: 1126: }
 17901  1DFC  2DFF               	goto	i1l5059
 17902  1DFD                     i1l5057:	
 17903                           
 17904                           ;PS_2.c: 1127: else
 17905                           ;PS_2.c: 1128: {
 17906                           ;PS_2.c: 1130: temp = 0;
 17907  1DFD  01FA               	clrf	PS2RawToScan@temp
 17908  1DFE  01FB               	clrf	PS2RawToScan@temp+1
 17909  1DFF                     i1l5059:	
 17910                           
 17911                           ;PS_2.c: 1131: }
 17912                           ;PS_2.c: 1132: return temp;
 17913  1DFF  087B               	movf	PS2RawToScan@temp+1,w
 17914  1E00  01F9               	clrf	?_PS2RawToScan+1
 17915  1E01  07F9               	addwf	?_PS2RawToScan+1,f
 17916  1E02  087A               	movf	PS2RawToScan@temp,w
 17917  1E03  01F8               	clrf	?_PS2RawToScan
 17918  1E04  07F8               	addwf	?_PS2RawToScan,f
 17919  1E05  0008               	return
 17920  1E06                     __end_of_PS2RawToScan:	
 17921                           
 17922                           	psect	text76
 17923  0A68                     __ptext76:	
 17924 ;; *************** function i1_CheckSum_byte *****************
 17925 ;; Defined at:
 17926 ;;		line 69 in file "MISC.c"
 17927 ;; Parameters:    Size  Location     Type
 17928 ;;  This            2    0[COMMON] unsigned int 
 17929 ;;  Odd_Even        1    2[COMMON] unsigned char 
 17930 ;; Auto vars:     Size  Location     Type
 17931 ;;  CheckSum_byt    2    4[COMMON] unsigned int 
 17932 ;;  CheckSum_byt    1    7[COMMON] unsigned char 
 17933 ;;  CheckSum_byt    1    6[COMMON] unsigned char 
 17934 ;; Return value:  Size  Location     Type
 17935 ;;                  1    wreg      unsigned char 
 17936 ;; Registers used:
 17937 ;;		wreg, status,2, status,0
 17938 ;; Tracked objects:
 17939 ;;		On entry : 0/0
 17940 ;;		On exit  : 0/0
 17941 ;;		Unchanged: 0/0
 17942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17943 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17944 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17945 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17946 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17947 ;;Total ram usage:        8 bytes
 17948 ;; Hardware stack levels used:    1
 17949 ;; This function calls:
 17950 ;;		Nothing
 17951 ;; This function is called by:
 17952 ;;		_Send_PS2
 17953 ;;		_PS2RawToScan
 17954 ;;		i1_UARTchar
 17955 ;; This function uses a non-reentrant model
 17956 ;;
 17957                           
 17958                           
 17959                           ;psect for function i1_CheckSum_byte
 17960  0A68                     i1_CheckSum_byte:	
 17961                           
 17962                           ;MISC.c: 71: char i = 0;
 17963                           
 17964                           ;incstack = 0
 17965                           ; Regs used in i1_CheckSum_byte: [wreg+status,2+status,0]
 17966  0A68  01F7               	clrf	i1CheckSum_byte@i
 17967                           
 17968                           ;MISC.c: 72: unsigned char Parity = 0;
 17969  0A69  01F6               	clrf	i1CheckSum_byte@Parity
 17970                           
 17971                           ;MISC.c: 73: unsigned int ThisTemp = This;
 17972  0A6A  0871               	movf	i1CheckSum_byte@This+1,w
 17973  0A6B  01F5               	clrf	i1CheckSum_byte@ThisTemp+1
 17974  0A6C  07F5               	addwf	i1CheckSum_byte@ThisTemp+1,f
 17975  0A6D  0870               	movf	i1CheckSum_byte@This,w
 17976  0A6E  01F4               	clrf	i1CheckSum_byte@ThisTemp
 17977  0A6F  07F4               	addwf	i1CheckSum_byte@ThisTemp,f
 17978                           
 17979                           ;MISC.c: 75: for (i =0; i<8; i++)
 17980  0A70  01F7               	clrf	i1CheckSum_byte@i
 17981  0A71  3008               	movlw	8
 17982  0A72  0277               	subwf	i1CheckSum_byte@i,w
 17983  0A73  1803               	btfsc	3,0
 17984  0A74  2A88               	goto	i1l3777
 17985  0A75                     i1l292:	
 17986                           
 17987                           ;MISC.c: 76: {
 17988                           ;MISC.c: 77: if((ThisTemp & 0x01) == 1)
 17989  0A75  1C74               	btfss	i1CheckSum_byte@ThisTemp,0
 17990  0A76  2A7B               	goto	i1l294
 17991                           
 17992                           ;MISC.c: 78: {
 17993                           ;MISC.c: 79: Parity++;
 17994  0A77  3001               	movlw	1
 17995  0A78  00F3               	movwf	??i1_CheckSum_byte
 17996  0A79  0873               	movf	??i1_CheckSum_byte,w
 17997  0A7A  07F6               	addwf	i1CheckSum_byte@Parity,f
 17998  0A7B                     i1l294:	
 17999                           
 18000                           ;MISC.c: 80: }
 18001                           ;MISC.c: 81: ThisTemp >>= 1;
 18002  0A7B  3001               	movlw	1
 18003  0A7C                     u386_25:	
 18004  0A7C  36F5               	lsrf	i1CheckSum_byte@ThisTemp+1,f
 18005  0A7D  0CF4               	rrf	i1CheckSum_byte@ThisTemp,f
 18006  0A7E  0B89               	decfsz	9,f
 18007  0A7F  2A7C               	goto	u386_25
 18008  0A80  3001               	movlw	1
 18009  0A81  00F3               	movwf	??i1_CheckSum_byte
 18010  0A82  0873               	movf	??i1_CheckSum_byte,w
 18011  0A83  07F7               	addwf	i1CheckSum_byte@i,f
 18012  0A84  3008               	movlw	8
 18013  0A85  0277               	subwf	i1CheckSum_byte@i,w
 18014  0A86  1C03               	skipc
 18015  0A87  2A75               	goto	i1l292
 18016  0A88                     i1l3777:	
 18017                           
 18018                           ;MISC.c: 82: }
 18019                           ;MISC.c: 83: if(Odd_Even == 3)
 18020  0A88  0872               	movf	i1CheckSum_byte@Odd_Even,w
 18021  0A89  3A03               	xorlw	3
 18022  0A8A  1D03               	skipz
 18023  0A8B  2A92               	goto	i1l295
 18024                           
 18025                           ;MISC.c: 84: {
 18026                           ;MISC.c: 85: if(Parity % 2 == 0)
 18027  0A8C  1876               	btfsc	i1CheckSum_byte@Parity,0
 18028  0A8D  2A90               	goto	i1l3785
 18029                           
 18030                           ;MISC.c: 86: {
 18031                           ;MISC.c: 87: return 1;
 18032  0A8E  3001               	movlw	1
 18033  0A8F  0008               	return
 18034  0A90                     i1l3785:	
 18035                           
 18036                           ;MISC.c: 88: }
 18037                           ;MISC.c: 89: return 0;
 18038  0A90  3000               	movlw	0
 18039                           
 18040                           ;MISC.c: 90: }
 18041  0A91  0008               	return
 18042  0A92                     i1l295:	
 18043                           
 18044                           ;MISC.c: 91: else
 18045                           ;MISC.c: 92: {
 18046                           ;MISC.c: 93: if(Parity % 2 == 1)
 18047  0A92  1C76               	btfss	i1CheckSum_byte@Parity,0
 18048  0A93  2A96               	goto	i1l3795
 18049                           
 18050                           ;MISC.c: 94: {
 18051                           ;MISC.c: 95: return 1;
 18052  0A94  3001               	movlw	1
 18053  0A95  0008               	return
 18054  0A96                     i1l3795:	
 18055                           
 18056                           ;MISC.c: 96: }
 18057                           ;MISC.c: 97: return 0;
 18058  0A96  3000               	movlw	0
 18059  0A97  0008               	return
 18060  0A98                     __end_ofi1_CheckSum_byte:	
 18061                           
 18062                           	psect	text77
 18063  1F4D                     __ptext77:	
 18064 ;; *************** function _Reverse_Byte *****************
 18065 ;; Defined at:
 18066 ;;		line 106 in file "MISC.c"
 18067 ;; Parameters:    Size  Location     Type
 18068 ;;  This            1    wreg     unsigned char 
 18069 ;; Auto vars:     Size  Location     Type
 18070 ;;  This            1    3[COMMON] unsigned char 
 18071 ;;  temp            1    2[COMMON] unsigned char 
 18072 ;; Return value:  Size  Location     Type
 18073 ;;                  1    wreg      unsigned char 
 18074 ;; Registers used:
 18075 ;;		wreg, status,2, status,0
 18076 ;; Tracked objects:
 18077 ;;		On entry : 0/0
 18078 ;;		On exit  : 0/0
 18079 ;;		Unchanged: 0/0
 18080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18082 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18083 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18084 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18085 ;;Total ram usage:        4 bytes
 18086 ;; Hardware stack levels used:    1
 18087 ;; This function calls:
 18088 ;;		Nothing
 18089 ;; This function is called by:
 18090 ;;		_PS2RawToScan
 18091 ;; This function uses a non-reentrant model
 18092 ;;
 18093                           
 18094                           
 18095                           ;psect for function _Reverse_Byte
 18096  1F4D                     _Reverse_Byte:	
 18097                           
 18098                           ;incstack = 0
 18099                           ; Regs used in _Reverse_Byte: [wreg+status,2+status,0]
 18100                           ;Reverse_Byte@This stored from wreg
 18101  1F4D  00F3               	movwf	Reverse_Byte@This
 18102                           
 18103                           ;MISC.c: 108: unsigned char temp=0;
 18104  1F4E  01F2               	clrf	Reverse_Byte@temp
 18105                           
 18106                           ;MISC.c: 110: temp += (This & 0x01) << 7;
 18107  1F4F  0873               	movf	Reverse_Byte@This,w
 18108  1F50  3901               	andlw	1
 18109  1F51  00F0               	movwf	??_Reverse_Byte
 18110  1F52  3006               	movlw	6
 18111  1F53                     u512_25:	
 18112  1F53  35F0               	lslf	??_Reverse_Byte,f
 18113  1F54  3EFF               	addlw	-1
 18114  1F55  1D03               	skipz
 18115  1F56  2F53               	goto	u512_25
 18116  1F57  3570               	lslf	??_Reverse_Byte,w
 18117  1F58  00F1               	movwf	??_Reverse_Byte+1
 18118  1F59  0871               	movf	??_Reverse_Byte+1,w
 18119  1F5A  07F2               	addwf	Reverse_Byte@temp,f
 18120                           
 18121                           ;MISC.c: 111: temp += (This & 0x02) << 5;
 18122  1F5B  0873               	movf	Reverse_Byte@This,w
 18123  1F5C  3902               	andlw	2
 18124  1F5D  00F0               	movwf	??_Reverse_Byte
 18125  1F5E  3004               	movlw	4
 18126  1F5F                     u513_25:	
 18127  1F5F  35F0               	lslf	??_Reverse_Byte,f
 18128  1F60  3EFF               	addlw	-1
 18129  1F61  1D03               	skipz
 18130  1F62  2F5F               	goto	u513_25
 18131  1F63  3570               	lslf	??_Reverse_Byte,w
 18132  1F64  00F1               	movwf	??_Reverse_Byte+1
 18133  1F65  0871               	movf	??_Reverse_Byte+1,w
 18134  1F66  07F2               	addwf	Reverse_Byte@temp,f
 18135                           
 18136                           ;MISC.c: 112: temp += (This & 0x04) << 3;
 18137  1F67  0873               	movf	Reverse_Byte@This,w
 18138  1F68  3904               	andlw	4
 18139  1F69  00F0               	movwf	??_Reverse_Byte
 18140  1F6A  3002               	movlw	2
 18141  1F6B                     u514_25:	
 18142  1F6B  35F0               	lslf	??_Reverse_Byte,f
 18143  1F6C  3EFF               	addlw	-1
 18144  1F6D  1D03               	skipz
 18145  1F6E  2F6B               	goto	u514_25
 18146  1F6F  3570               	lslf	??_Reverse_Byte,w
 18147  1F70  00F1               	movwf	??_Reverse_Byte+1
 18148  1F71  0871               	movf	??_Reverse_Byte+1,w
 18149  1F72  07F2               	addwf	Reverse_Byte@temp,f
 18150                           
 18151                           ;MISC.c: 113: temp += (This & 0x08) << 1;
 18152  1F73  0873               	movf	Reverse_Byte@This,w
 18153  1F74  3908               	andlw	8
 18154  1F75  0709               	addwf	9,w
 18155  1F76  00F0               	movwf	??_Reverse_Byte
 18156  1F77  0870               	movf	??_Reverse_Byte,w
 18157  1F78  07F2               	addwf	Reverse_Byte@temp,f
 18158                           
 18159                           ;MISC.c: 114: temp += (This & 0x10) >> 1;
 18160  1F79  3673               	lsrf	Reverse_Byte@This,w
 18161  1F7A  3908               	andlw	8
 18162  1F7B  00F0               	movwf	??_Reverse_Byte
 18163  1F7C  0870               	movf	??_Reverse_Byte,w
 18164  1F7D  07F2               	addwf	Reverse_Byte@temp,f
 18165                           
 18166                           ;MISC.c: 115: temp += (This & 0x20) >> 3;
 18167  1F7E  0873               	movf	Reverse_Byte@This,w
 18168  1F7F  00F0               	movwf	??_Reverse_Byte
 18169  1F80  3003               	movlw	3
 18170  1F81                     u515_25:	
 18171  1F81  36F0               	lsrf	??_Reverse_Byte,f
 18172  1F82  0B89               	decfsz	9,f
 18173  1F83  2F81               	goto	u515_25
 18174  1F84  0870               	movf	??_Reverse_Byte,w
 18175  1F85  3904               	andlw	4
 18176  1F86  00F1               	movwf	??_Reverse_Byte+1
 18177  1F87  0871               	movf	??_Reverse_Byte+1,w
 18178  1F88  07F2               	addwf	Reverse_Byte@temp,f
 18179                           
 18180                           ;MISC.c: 116: temp += (This & 0x40) >> 5;
 18181  1F89  0873               	movf	Reverse_Byte@This,w
 18182  1F8A  00F0               	movwf	??_Reverse_Byte
 18183  1F8B  3005               	movlw	5
 18184  1F8C                     u516_25:	
 18185  1F8C  36F0               	lsrf	??_Reverse_Byte,f
 18186  1F8D  0B89               	decfsz	9,f
 18187  1F8E  2F8C               	goto	u516_25
 18188  1F8F  0870               	movf	??_Reverse_Byte,w
 18189  1F90  3902               	andlw	2
 18190  1F91  00F1               	movwf	??_Reverse_Byte+1
 18191  1F92  0871               	movf	??_Reverse_Byte+1,w
 18192  1F93  07F2               	addwf	Reverse_Byte@temp,f
 18193                           
 18194                           ;MISC.c: 117: temp += (This & 0x80) >> 7;
 18195  1F94  0873               	movf	Reverse_Byte@This,w
 18196  1F95  00F0               	movwf	??_Reverse_Byte
 18197  1F96  3007               	movlw	7
 18198  1F97                     u517_25:	
 18199  1F97  36F0               	lsrf	??_Reverse_Byte,f
 18200  1F98  0B89               	decfsz	9,f
 18201  1F99  2F97               	goto	u517_25
 18202  1F9A  0870               	movf	??_Reverse_Byte,w
 18203  1F9B  3901               	andlw	1
 18204  1F9C  00F1               	movwf	??_Reverse_Byte+1
 18205  1F9D  0871               	movf	??_Reverse_Byte+1,w
 18206  1F9E  07F2               	addwf	Reverse_Byte@temp,f
 18207                           
 18208                           ;MISC.c: 119: return temp;
 18209  1F9F  0872               	movf	Reverse_Byte@temp,w
 18210  1FA0  0008               	return
 18211  1FA1                     __end_of_Reverse_Byte:	
 18212  007E                     btemp	set	126	;btemp
 18213  007E                     pic14e$flags	set	126
 18214  007E                     wtemp	set	126
 18215  007E                     wtemp0	set	126
 18216  0080                     wtemp1	set	128
 18217  0082                     wtemp2	set	130
 18218  0084                     wtemp3	set	132
 18219  0086                     wtemp4	set	134
 18220  0088                     wtemp5	set	136
 18221  007F                     wtemp6	set	127
 18222  007E                     ttemp	set	126
 18223  007E                     ttemp0	set	126
 18224  0081                     ttemp1	set	129
 18225  0084                     ttemp2	set	132
 18226  0087                     ttemp3	set	135
 18227  007F                     ttemp4	set	127
 18228  007E                     ltemp	set	126
 18229  007E                     ltemp0	set	126
 18230  0082                     ltemp1	set	130
 18231  0086                     ltemp2	set	134
 18232  0080                     ltemp3	set	128


Data Sizes:
    Strings     250
    Constant    622
    Data        8
    BSS         54
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     37      70
    BANK2            80     63      63
    BANK3            80     65      80
    BANK4            80     55      69
    BANK5            80     69      69
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_19(CODE[33]), STR_12(CODE[21]), STR_8(CODE[21]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 60
		 -> Process_PS2_ScanCode@buf(BANK3[60]), SetBaud@buf(BANK2[50]), Init_System@buf(BANK5[60]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i1_sprintf(BANK0[2]), ?_sprintf(BANK4[2]), 

    S1090$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    WriteFlash_Sequential@buffer	PTR unsigned int  size(1) Largest target is 4
		 -> MEM(BANK1[4]), 

    UARTstringWAIT@data	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_21(CODE[29]), STR_20(CODE[3]), Process_PS2_ScanCode@buf(BANK3[60]), STR_18(CODE[3]), 
		 -> STR_17(CODE[3]), STR_16(CODE[23]), STR_15(CODE[19]), STR_14(CODE[3]), 
		 -> STR_13(CODE[3]), SetBaud@buf(BANK2[50]), STR_11(CODE[24]), STR_10(CODE[3]), 
		 -> STR_9(CODE[3]), NoParityMSG(CODE[20]), SpaceParityMSG(CODE[16]), MarkParityMSG(CODE[15]), 
		 -> EvenParityMSG(CODE[22]), OddParityMSG(CODE[21]), Init_System@buf(BANK5[60]), STR_7(CODE[3]), 
		 -> STR_6(CODE[39]), STR_5(CODE[3]), Version(CODE[8]), STR_4(CODE[19]), 
		 -> STR_3(CODE[28]), STR_2(CODE[8]), STR_1(CODE[7]), VoltageMSG(CODE[13]), 

    BufferShiftBack@buffer	PTR unsigned char  size(1) Largest target is 12
		 -> PS_2_ScanCodes(BANK1[12]), 

    cleanBuffer@data	PTR unsigned char  size(1) Largest target is 12
		 -> PS_2_ScanCodes(BANK1[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_UARTchar
    _ResendLast->_Send_PS2
    _Process_PS2_ScanCode->_Send_PS2
    _Process_PS2_ScanCode->i1_UARTchar
    _UART_send_break_timed->i1_delayUS
    i1_sprintf->i1___lldiv
    i1___llmod->i1___lldiv
    i1_UARTstringWAIT->i1_UARTchar
    i1_UARTchar->i1_CheckSum_byte
    i1_ReadBaud->i1_ReadFlash_4Byte
    i1_ReadFlash_4Byte->i1_ReadFlash_2Byte
    i1_InitUART->i1___lldiv
    _WriteBaud->_WriteFlash_Sequential
    _WriteFlash_Sequential->i1_delayUS
    _Send_PS2->i1_delayUS
    _PS2RawToScan->i1_CheckSum_byte

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _ResendLast->_Send_PS2
    _SetBaud->_WriteBaud
    i1_sprintf->i1___llmod
    i1_UARTstringWAIT->i1_UARTchar
    i1_ReadBaud->i1_ReadFlash_4Byte
    _WriteBaud->_WriteFlash_Sequential

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    _isr->_Process_PS2_ScanCode
    _Process_PS2_ScanCode->_SetBaud
    _SetBaud->_WriteBaud

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    _Process_PS2_ScanCode->_SetBaud

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    _isr->_Process_PS2_ScanCode

Critical Paths under _main in BANK4

    _main->_Init_System
    _main->_ReadVoltage
    _ReadVoltage->___ftmul
    ___lwtoft->___ftpack
    ___ftmul->___ftdiv
    ___ftdiv->___lwtoft
    _InternalADC_Read->_delayUS
    _PS_2_INIT->_Timer2Init
    _Init_System->_sprintf
    _sprintf->___llmod
    ___llmod->___lldiv
    _UARTstringWAIT->_UARTchar
    _UARTchar->_CheckSum_byte
    _ReadBaud->_ReadFlash_4Byte
    _ReadFlash_4Byte->_ReadFlash_2Byte
    _InitUART->___lldiv

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    _main->_Init_System

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   35430
                                             53 BANK4      2     2      0
                _ConfigureOscillator
                            _InitApp
                        _Init_System
              _PS_2_ENABLE_INTERRUPT
                          _PS_2_INIT
                        _ReadVoltage
                     _UARTstringWAIT
                             ___ftge
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     814
                                              0 BANK4      9     3      6
 ---------------------------------------------------------------------------------
 (1) _ReadVoltage                                          9     6      3   10973
                                             44 BANK4      9     6      3
                 _DisableInternalADC
                   _InternalADC_Read
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             4     1      3    2481
                                              8 BANK4      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    3015
                                             28 BANK4     16    10      6
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2947
                                             12 BANK4     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2373
                                              0 BANK4      8     3      5
 ---------------------------------------------------------------------------------
 (2) _InternalADC_Read                                     5     3      2    2456
                                             10 BANK4      5     3      2
                            _delayUS
 ---------------------------------------------------------------------------------
 (2) _DisableInternalADC                                   1     1      0       0
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PS_2_INIT                                            0     0      0     161
                         _Clock_TRIS
                          _Data_TRIS
                         _Timer2Init
 ---------------------------------------------------------------------------------
 (2) _Timer2Init                                           5     5      0      99
                                              0 BANK4      5     5      0
                           _Timer2ON
 ---------------------------------------------------------------------------------
 (3) _Timer2ON                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Data_TRIS                                            1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Clock_TRIS                                           1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PS_2_ENABLE_INTERRUPT                                1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                         74    74      0   14136
                                             48 BANK4      5     5      0
                                              0 BANK5     69    69      0
                           _InitUART
                           _ReadBaud
                     _UARTstringWAIT
                            _delayUS
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             24    16      8    1742
                                             24 BANK4     24    16      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     287
                                             14 BANK4     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _UARTstringWAIT                                       4     2      2    6819
                                             15 BANK4      4     2      2
                           _UARTchar
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) _delayUS                                             10     6      4    2425
                                              0 BANK4     10     6      4
 ---------------------------------------------------------------------------------
 (2) _UARTchar                                             7     5      2    2026
                                              8 BANK4      7     5      2
                      _CheckSum_byte
 ---------------------------------------------------------------------------------
 (3) _CheckSum_byte                                        8     5      3     714
                                              0 BANK4      8     5      3
 ---------------------------------------------------------------------------------
 (2) _ReadBaud                                            16    12      4    1168
                                             18 BANK4     16    12      4
                    _ReadFlash_4Byte
 ---------------------------------------------------------------------------------
 (3) _ReadFlash_4Byte                                     13     9      4     803
                                              5 BANK4     13     9      4
                    _ReadFlash_2Byte
 ---------------------------------------------------------------------------------
 (4) _ReadFlash_2Byte                                      5     2      3     485
                                              0 BANK4      5     2      3
 ---------------------------------------------------------------------------------
 (2) _InitUART                                            21    16      5    1563
                                             14 BANK4     21    16      5
                         _CloseUSART
                          _OpenUSART
                          _ReadUSART
                            ___lldiv
                          _baudUSART
 ---------------------------------------------------------------------------------
 (3) _baudUSART                                            1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     549
                                              0 BANK4     14     6      8
 ---------------------------------------------------------------------------------
 (3) _ReadUSART                                            2     2      0      34
                                              0 BANK4      2     2      0
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     387
                                              0 BANK4      3     1      2
 ---------------------------------------------------------------------------------
 (3) _CloseUSART                                           1     1      0       0
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  1     1      0       0
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  5     5      0   21208
                                             78 BANK0      2     2      0
                                             34 BANK1      3     3      0
                       _PS2RawToScan
             _PS_2_DISABLE_INTERRUPT
               _Process_PS2_ScanCode
                    _READ_CONFIG_PIN
                      _READ_PS_2_PIN
                         _ResendLast
                          _Timer2OFF
                        _Timer2Reset
              _UART_send_break_timed
            i1_PS_2_ENABLE_INTERRUPT
                        i1_ReadUSART
                         i1_Timer2ON
                         i1_UARTchar
 ---------------------------------------------------------------------------------
 (6) i1_Timer2ON                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) i1_PS_2_ENABLE_INTERRUPT                              1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Timer2Reset                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Timer2OFF                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _ResendLast                                           0     0      0    1323
             _PS_2_DISABLE_INTERRUPT
                           _Send_PS2
 ---------------------------------------------------------------------------------
 (7) _PS_2_DISABLE_INTERRUPT                               2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _READ_CONFIG_PIN                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Process_PS2_ScanCode                                71    71      0   17179
                                             28 BANK1      6     6      0
                                              0 BANK3     65    65      0
                    _BufferShiftBack
                   _Decode_Scan_Code
          _Decode_Scan_Code_Function
        _Decode_Scan_Code_FunctionE0
             _Decode_Scan_Code_Shift
                           _ISNUMBER
                           _Send_PS2
                            _SetBaud
                    _UART_send_break
              _UART_send_break_timed
                             ___lmul
                        _cleanBuffer
                         i1_UARTchar
                   i1_UARTstringWAIT
                          i1_delayUS
                          i1_sprintf
 ---------------------------------------------------------------------------------
 (7) _cleanBuffer                                          5     3      2     193
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (7) ___lmul                                              12     4      8     220
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (6) _UART_send_break_timed                                3     1      2     684
                                             10 COMMON     3     1      2
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (7) _UART_send_break                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _SetBaud                                             76    71      5    7702
                                             15 BANK1     13     8      5
                                              0 BANK2     63    63      0
                          _WriteBaud
                         i1_InitUART
                         i1_ReadBaud
                   i1_UARTstringWAIT
                          i1_delayUS
                          i1_sprintf
 ---------------------------------------------------------------------------------
 (7) i1_sprintf                                           24    16      8     971
                                             10 BANK0     24    16      8
                          i1___lldiv
                          i1___llmod
 ---------------------------------------------------------------------------------
 (8) i1___llmod                                           10     2      8     211
                                              0 BANK0     10     2      8
                          i1___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i1_UARTstringWAIT                                     4     2      2    2263
                                              1 BANK0      4     2      2
                         i1_UARTchar
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (6) i1_UARTchar                                           7     5      2    1065
                                              8 COMMON     6     4      2
                                              0 BANK0      1     1      0
                    i1_CheckSum_byte
 ---------------------------------------------------------------------------------
 (8) i1_ReadBaud                                          16    12      4     528
                                              4 BANK0     16    12      4
                  i1_ReadFlash_4Byte
 ---------------------------------------------------------------------------------
 (9) i1_ReadFlash_4Byte                                   13     9      4     387
                                              5 COMMON     9     5      4
                                              0 BANK0      4     4      0
                  i1_ReadFlash_2Byte
 ---------------------------------------------------------------------------------
 (8) i1_InitUART                                          21    16      5     822
                                              0 BANK0     21    16      5
                       i1_CloseUSART
                        i1_OpenUSART
                        i1_ReadUSART
                          i1___lldiv
                        i1_baudUSART
 ---------------------------------------------------------------------------------
 (9) i1_baudUSART                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1___lldiv                                           14     6      8     266
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (6) i1_ReadUSART                                          2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) i1_OpenUSART                                          3     1      2     246
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (9) i1_CloseUSART                                         1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _WriteBaud                                           19    12      7    1928
                                             74 BANK0      4     4      0
                                              0 BANK1     15     8      7
              _WriteFlash_Sequential
 ---------------------------------------------------------------------------------
 (9) _WriteFlash_Sequential                               78    74      4    1625
                                             10 COMMON     4     0      4
                                              0 BANK0     74    74      0
                         _BlockErase
                             _UNLOCK
                  i1_ReadFlash_2Byte
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (10) i1_ReadFlash_2Byte                                   5     2      3     222
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (10) _BlockErase                                          4     2      2     108
                                              0 COMMON     4     2      2
                             _UNLOCK
 ---------------------------------------------------------------------------------
 (10) _UNLOCK                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Send_PS2                                             9     9      0    1301
                                             10 COMMON     4     4      0
                                              0 BANK0      5     5      0
                      _READ_PS_2_PIN
                    i1_CheckSum_byte
                       i1_Clock_TRIS
                        i1_Data_TRIS
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (7) i1_delayUS                                           10     6      4     534
                                              0 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (8) i1_Data_TRIS                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_Clock_TRIS                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _READ_PS_2_PIN                                        1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _ISNUMBER                                             1     1      0      44
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code_Shift                               1     1      0      45
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code_FunctionE0                          1     1      0      45
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code_Function                            1     1      0      44
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code                                     1     1      0      45
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _BufferShiftBack                                      8     6      2    1307
                                              0 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 (6) _PS2RawToScan                                        13    11      2     753
                                              8 COMMON     4     2      2
                                              0 BANK0      9     9      0
                       _Reverse_Byte
                    i1_CheckSum_byte
 ---------------------------------------------------------------------------------
 (7) i1_CheckSum_byte                                      8     5      3     369
                                              0 COMMON     8     5      3
 ---------------------------------------------------------------------------------
 (7) _Reverse_Byte                                         4     4      0     207
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _Init_System
     _InitUART
       _CloseUSART
       _OpenUSART
       _ReadUSART
       ___lldiv
       _baudUSART
     _ReadBaud
       _ReadFlash_4Byte
         _ReadFlash_2Byte
     _UARTstringWAIT
       _UARTchar
         _CheckSum_byte
       _delayUS
     _delayUS
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
   _PS_2_ENABLE_INTERRUPT
   _PS_2_INIT
     _Clock_TRIS
     _Data_TRIS
     _Timer2Init
       _Timer2ON
   _ReadVoltage
     _DisableInternalADC
     _InternalADC_Read
       _delayUS
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _UARTstringWAIT
     _UARTchar
       _CheckSum_byte
     _delayUS
   ___ftge
   _delayUS

 _isr (ROOT)
   _PS2RawToScan
     _Reverse_Byte
     i1_CheckSum_byte
   _PS_2_DISABLE_INTERRUPT
   _Process_PS2_ScanCode
     _BufferShiftBack
     _Decode_Scan_Code
     _Decode_Scan_Code_Function
     _Decode_Scan_Code_FunctionE0
     _Decode_Scan_Code_Shift
     _ISNUMBER
     _Send_PS2
       _READ_PS_2_PIN
       i1_CheckSum_byte
       i1_Clock_TRIS
       i1_Data_TRIS
       i1_delayUS
     _SetBaud
       _WriteBaud
         _WriteFlash_Sequential
           _BlockErase
             _UNLOCK
           _UNLOCK
           i1_ReadFlash_2Byte
           i1_delayUS
       i1_InitUART
         i1_CloseUSART
         i1_OpenUSART
         i1_ReadUSART
         i1___lldiv
         i1_baudUSART
       i1_ReadBaud
         i1_ReadFlash_4Byte
           i1_ReadFlash_2Byte
       i1_UARTstringWAIT
         i1_UARTchar
           i1_CheckSum_byte
         i1_delayUS
       i1_delayUS
       i1_sprintf
         i1___lldiv
         i1___llmod
           i1___lldiv (ARG)
     _UART_send_break
     _UART_send_break_timed
       i1_delayUS
     ___lmul
     _cleanBuffer
     i1_UARTchar
       i1_CheckSum_byte
     i1_UARTstringWAIT
       i1_UARTchar
         i1_CheckSum_byte
       i1_delayUS
     i1_delayUS
     i1_sprintf
       i1___lldiv
       i1___llmod
         i1___lldiv (ARG)
   _READ_CONFIG_PIN
   _READ_PS_2_PIN
   _ResendLast
     _PS_2_DISABLE_INTERRUPT
     _Send_PS2
       _READ_PS_2_PIN
       i1_CheckSum_byte
       i1_Clock_TRIS
       i1_Data_TRIS
       i1_delayUS
   _Timer2OFF
   _Timer2Reset
   _UART_send_break_timed
     i1_delayUS
   i1_PS_2_ENABLE_INTERRUPT
   i1_ReadUSART
   i1_Timer2ON
   i1_UARTchar
     i1_CheckSum_byte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     25      46       7       87.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     3F      3F       9       78.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50     41      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50     37      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50     45      45      15       86.3%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     1BD      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     1BD      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Fri Feb 27 14:01:34 2015

                     _BufferShiftBack 1C6A                _PS_2_DISABLE_INTERRUPT 198A  
             Process_PS2_ScanCode@buf 01A0                     ??_ReadFlash_2Byte 0223  
                   ??_ReadFlash_4Byte 0229                                     _i 00D5  
                      _ResendLastFlag 00D3              Process_PS2_ScanCode@temp 01E0  
                         __CFG_CP$OFF 0000                  i1InitUART@baudconfig 002F  
                  Data_TRIS@direction 0220                           __CFG_LVP$ON 0000  
                                 l171 0AAC                                   l421 1CD5  
                                 l423 1CDF                                   l417 1CC6  
                                 l434 1111                                   l443 1140  
                                 l435 1114                                   l179 0B5E  
                                 l292 1B0C                                   l284 1C02  
                                 l276 0CE0                                   l294 1B12  
                                 l286 1C1B                                   l470 1BE5  
                                 l622 192D                                   l295 1B29  
                                 l439 1137                                   l642 1950  
                                 l627 1938                                   l468 1BC6  
                                 l948 1B84                                   _MEM 00E2  
                                 _PR2 001B                                   _isr 0004  
                _Process_PS2_ScanCode 011B                           i1_baudUSART 18B7  
             i1ReadFlash_4Byte@column 0077                          __CFG_BORV$LO 0000  
                                 wreg 0009            __size_ofi1_ReadFlash_2Byte 002A  
          __size_ofi1_ReadFlash_4Byte 0051            __end_of_ScanCodeFunctionE0 08D3  
             UART_send_break_timed@US 007A                          ___ftdiv@cntr 0236  
                        ___ftdiv@sign 023B                                  l1025 1D85  
                                l1028 1DAA                                  l1082 1750  
                                l1079 1732                                  l1263 106E  
                                l1257 1057                                  l4251 1D46  
                                l6005 1B2D                                  l6103 1CE1  
                                l4255 1D5E                                  l6033 10F0  
                                l6041 1124                                  l4249 1D38  
                                l6035 10F9                                  l6043 112F  
                                l4259 1D69                                  l6131 1034  
                                l6221 1466                                  l6141 105C  
                                l6133 103E                                  l6039 1117  
                                l6143 1064                                  l6135 1043  
                                l6127 102D                                  l6081 1CBB  
                                l6161 1F19                                  l6065 1C25  
                                l6305 17AA                                  l6219 1462  
                                l6307 170F                                  l6403 12D1  
                                l6085 1CC0                                  l6077 1CB5  
                                l6173 1F44                                  l6309 17FA  
                                l6421 1322                                  l6095 1CCD  
                                l6159 1F0B                                  l6183 1BE8  
                                l6089 1CC8                                  l6169 1F39  
                                l6273 1739                                  l6513 0C0A  
                                l6361 1228                                  l6433 133E  
                                l6425 132A                                  l6409 12E7  
                                l6099 1CD7                                  l6267 1730  
                                l6269 1734                                  l6509 0C01  
                                l6381 127F                                  l6437 1346  
                                l6279 1760                                  l6551 0CC6  
                                l6367 123E                                  l6631 0AFD  
                                l6457 19D4                                  l6297 17A5  
                                l6289 1778                                  l6545 0CB7  
                                l6459 19DA                                  l6547 0CBC  
                                l6555 0CCB                                  l6651 0B66  
                                l6635 0B1F                                  l6627 0AD5  
                                ?_isr 0070                                  l6549 0CC1  
                                l6557 0CD8        __size_of_PS_2_ENABLE_INTERRUPT 000C  
                                l6389 1298                                  l6573 10A2  
                                l6591 1C5B                                  l6663 0B88  
                                l6647 0B62                                  l6639 0B25  
                                l6577 10B0                                  l6587 1C45  
                                l6659 0B7B                                  _BAUD 0261  
                                l5995 1B27                                  l5987 1B1F  
                 _PS_2_Read_Data_TEMP 00C9                                  _ECHO 025F  
                                STR_1 0A61                                  STR_2 0A59  
                                STR_3 09D3                                  STR_4 0A46  
                                STR_5 0A43                                  STR_6 096E  
                                STR_7 0A43                                  STR_8 0A1E  
                                STR_9 0A43                                  _LATA 010C  
                                _LATC 010E                                  _LALT 01E9  
       __end_of_PS_2_ENABLE_INTERRUPT 1953                                  _PIE1 0091  
                                i1l90 0082                                  i1l83 0075  
                                u8115 179B                                  i1l92 00BF  
                                i1l84 002F                                  u8045 11D7  
                                u4765 1D3B                                  i1l87 005B  
                                u8055 11FA                                  u8135 17B4  
                                _RALT 01EC                                  u4785 1D54  
                                u8075 1498                                  u4795 1D5F  
                                u8235 1250                                  u8315 12F3  
                                u8245 1260                                  u8325 1303  
                                u8175 1A8F                                  u8255 1280  
                                u8265 128F                                  u8345 132B  
                                u7635 1B7B                                  u8195 1D8B  
                                u8275 1299                                  u8355 1331  
                                u8515 10AC                                  u8445 0BD5  
                                u7743 1C14                                  u8455 0BEF  
                                u7825 1E75                                  u7585 1B13  
                                u8465 0BFF                                  u8385 1347  
                                u8395 134D                                  u7925 1075  
                                u7855 1039                                  u8495 109D  
                                u7955 1F0E                                  u7875 1052  
                                u7975 1F1A                                  u7895 105F  
                                u7985 1F2E                                  u7995 1F3A  
                                _TMR2 001A                                  _WPUA 020C  
                                _WPUC 020E                            i1delayUS@i 0075  
                          i1delayUS@j 0079                          __CFG_WRT$OFF 0000  
    __size_ofi1_PS_2_ENABLE_INTERRUPT 000B                     i1___lldiv@divisor 0070  
                                _main 0A98                    UARTstringWAIT@data 022F  
                        ___ftpack@arg 0220                          ___ftpack@exp 0223  
                                fsr0h 0005                                  fsr1h 0007  
                                fsr0l 0004                                  indf0 0000  
                                indf1 0001                                  fsr1l 0006  
                                btemp 007E                     i1___lldiv@counter 007D  
                 baudUSART@baudconfig 0220                         __CFG_BOREN$ON 0000  
                                ltemp 007E                     SetBaud@Paritytemp 0156  
                    i1_UARTstringWAIT 1B2F                                  start 00E6  
                                ttemp 007E                                  wtemp 007E  
                       __CFG_IESO$OFF 0000                      Reverse_Byte@This 0073  
           WriteFlash_Sequential@temp 0066                      Reverse_Byte@temp 0072  
                       __CFG_MCLRE$ON 0000                            _BlockErase 1A4D  
                        ___ftmul@cntr 024A                           ?i1_UARTchar 0078  
             ?_Decode_Scan_Code_Shift 0070                          ___ftmul@sign 024B  
                     __end_of_InitApp 1024                       __end_of_SetBaud 0E72  
                          _Clock_TRIS 1925                         ??_Init_System 0250  
              __size_of_READ_PS_2_PIN 0013                                 ??_isr 006E  
                 _Right_Shift_Key_old 00D4     i1UARTchar@NinethBit_override_data 0079  
     UARTchar@NinethBit_override_data 0229             _Decode_Scan_Code_Function 197A  
                         ReadBaud@row 0232       WriteFlash_Sequential@amountTemp 0065  
                     __end_of_Version 096E                         ??_ReadVoltage 024F  
                          _CloseUSART 196C                                 ?_main 0070  
            __size_ofi1_CheckSum_byte 0030                                 STR_10 0A43  
                               STR_11 09EF                                 STR_20 0A43  
                               STR_12 0A1E                                 STR_13 0A43  
                               STR_21 09B6                                 STR_14 0A43  
                               STR_15 0A33                                 STR_16 0A07  
                               STR_17 0A43                         __CFG_WDTE$OFF 0000  
                               STR_18 0A43                                 STR_19 0995  
                     __end_of___ftdiv 12BA                      __end_of_ISNUMBER 196C  
                     __end_of___lldiv 1F4D                       __end_of___ftmul 136E  
                               _CKPPS 0E25                       __end_of___llmod 1D72  
                               _T2CON 001C                                 _IOCAF 0393  
                               _IOCAN 0392                                 _IOCAP 0391  
                               i1l102 00E1                                 i1l421 1ABD  
                               i1l423 1AC6                                 i1l417 1AB3  
                               i1l434 1FCA                                 i1l443 1FF7  
                               i1l435 1FCD                                 i1l292 0A75  
                               i1l284 1B9B                                 i1l294 0A7B  
                               i1l622 18F8                                 i1l286 1BB4  
                               i1l470 1B4D                                 i1l710 0280  
                               i1l295 0A92                                 i1l439 1FEE  
                               i1l480 0DE6                                 i1l800 0541  
                               i1l642 1922                                 i1l627 1902  
                               i1l468 1B2F                                 i1l647 19EF  
                               i1l823 0617                                 i1l489 0E5F  
                               i1l855 0EDB                                 i1l856 0F2F  
                               i1l792 0647                                 i1l948 1A41  
                               i1l957 1915        __size_of_UART_send_break_timed 0025  
                               _RCREG 0199                 ?_Process_PS2_ScanCode 0070  
                               _RCSTA 019D                                 _SPBRG 019B  
       __end_of_UART_send_break_timed 06FF                  _PS_2_Read_Data_First 01E1  
                               _PORTA 000C                                 _PORTC 000E  
                        InitUART@Baud 022E                                 _RXPPS 0E24  
                               _TXREG 019A                   _ConfigureOscillator 19D1  
                               _Alarm 025E                  _PS_2_Read_Data_Third 01E5  
                     __end_of_delayUS 1C2E                      _InternalADC_Read 1D72  
                         i1delayUS@US 0070                   ___lmul@multiplicand 0074  
                      __CFG_FCMEN$OFF 0000                          InitUART@temp 023F  
               _WriteFlash_Sequential 136E                    i1___lldiv@dividend 0074  
               ReadFlash_2Byte@column 0222                      __end_of_UARTchar 1149  
                          SetBaud@buf 0120                       __end_of_dpowers 08FB  
                         ?i1_InitUART 0020                           ?i1_ReadBaud 0024  
                       ___ftpack@sign 0224                    __size_of_PS_2_INIT 000C  
                               main@i 0256                                 isr@rx 00C3  
                               ltemp0 007E                                 ltemp1 0082  
                               ltemp2 0086                                 ltemp3 0080  
             InternalADC_Read@channel 022E                                 ttemp0 007E  
                               ttemp1 0081                                 ttemp2 0084  
                               ttemp3 0087                                 ttemp4 007F  
                               status 0003               __end_of_BufferShiftBack 1CAB  
                               wtemp0 007E                                 wtemp1 0080  
                               wtemp2 0082                                 wtemp3 0084  
                               wtemp4 0086                                 wtemp5 0088  
                               wtemp6 007F                       __end_of_sprintf 1800  
                         isr@ScanTemp 00C4                    __size_ofi1___lldiv 0052  
                __size_of_cleanBuffer 0018                    __size_ofi1___llmod 0043  
                         ?i1_Timer2ON 0070                  ?_ConfigureOscillator 0070  
      __end_of_Decode_Scan_Code_Shift 19D1                         _ScanCodeSHIFT 07F5  
                  __size_ofi1_delayUS 0033                       _UART_send_break 18B2  
                     __initialization 00E8                   __end_of_NoParityMSG 093A  
                  __size_of_Data_TRIS 000B                          __end_of_main 0B8E  
                    __end_of_InitUART 1525                      ??_UARTstringWAIT 0231  
                         isr@Rx_fault 00C2                      __end_of_ReadBaud 1211  
                  i1___lldiv@quotient 0079            __end_of_DisableInternalADC 18D7  
                      _SpaceParityMSG 093A                      __end_of_ScanCode 07F5  
                      __CFG_LPBOR$OFF 0000                            i1sprintf@c 0041  
                          i1sprintf@f 002C              __size_of_READ_CONFIG_PIN 0007  
                    __end_of_Send_PS2 1000                                ??_main 0255  
                  __size_ofi1_sprintf 00F6          __end_of_ScanCodeFunctionNoE0 0784  
                      __CFG_PLLEN$OFF 0000                      __end_of_Timer2ON 18AA  
                 __end_of_Init_System 0CF6                          ReadBaud@temp 023E  
                    i1CheckSum_byte@i 0077                        i1InitUART@Baud 0020  
                        ?i1_Data_TRIS 0070                      BufferShiftBack@i 0076  
       Decode_Scan_Code_Function@Code 0070                   __end_of_ReadVoltage 10E6  
               ReadFlash_4Byte@column 0227                                _ADCON0 009D  
                              _ADCON1 009E                                _ADCON2 009F  
                 __size_ofi1_UARTchar 005F                      ___llmod@dividend 0232  
                              _ADRESH 009C                                _ADRESL 009B  
                      i1InitUART@temp 0031                         _READ_PS_2_PIN 19E3  
                      __CFG_ZCDDIS$ON 0000                                _ANSELA 018C  
                              _ANSELC 018E                      __end_of___ftpack 1085  
                              _HFIOFS 04D0                                _RC1STA 019D  
                              _RC2PPS 0EA2                                i1l1082 165A  
                              i1l1079 163C                                i1l4013 1EB8  
                              i1l4023 1EE6                                i1l4015 1EC6  
                   i1___llmod@divisor 0020                                i1l4027 1EF1  
                              i1l4043 1D1B                                i1l4061 19ED  
                              i1l4037 1CF5                                i1l4071 19F4  
                              i1l4039 1D03                                i1l4047 1D26  
                              i1l4401 1619                                i1l4403 1704  
                              i1l5123 019D                                i1l4411 1995  
                              i1l4333 1B50                                i1l5205 0251  
                              i1l5213 0260                                i1l5141 01CB  
                              i1l5109 0177                                i1l5303 0335  
                              i1l5223 0277                                i1l5207 023F  
                              i1l5119 0198                                i1l5127 01A8  
                              i1l5057 1DFD                                i1l4361 163A  
                              i1l5401 040E                                i1l5241 0295  
                              i1l5233 028A                                i1l5209 0258  
                              i1l5161 01F4                                i1l5145 01D3  
                              i1l5059 1DFF                                i1l4603 196A  
                              i1l4363 163E                                i1l5307 033E  
                              i1l5219 026E                                i1l5075 18CE  
                              i1l4373 166A                                i1l4613 1A0E  
                              i1l5501 0576                                i1l5325 0364  
                              i1l5341 0388                                i1l5173 020A  
                              i1l5165 01FB                                i1l5157 01ED  
                              i1l5245 02B5                                i1l5149 01DC  
                              i1l4631 1C71                                i1l3911 1415  
                              i1l4287 1551                                i1l4391 16AF  
                              i1l4383 1682                                i1l4367 1643  
                              i1l5351 039E                                i1l5335 037E  
                              i1l5327 0352                                i1l5263 02D9  
                              i1l5255 02CA                                i1l5183 0220  
                              i1l3761 1BBD                                i1l4801 0F58  
                              i1l3913 1439                                i1l4289 1555  
                              i1l5505 057F                                i1l5409 0419  
                              i1l5361 03B8                                i1l5353 038C  
                              i1l5337 0381                                i1l5329 036B  
                              i1l5281 02EE                                i1l5193 0237  
                              i1l5169 0200                                i1l4627 1C9F  
                              i1l4811 0F5B                                i1l5531 05F8  
                              i1l5443 04A8                                i1l5363 03BC  
                              i1l5355 03A5                                i1l5339 036C  
                              i1l5291 0309                                i1l5283 0307  
                              i1l5267 02E2                                i1l5259 02D1  
                              i1l5195 0225                                i1l5099 014E  
                              i1l4629 1CA6                                i1l4901 19AB  
                              i1l4813 0F77                                i1l5533 05FD  
                              i1l5509 058C                                i1l5429 046D  
                              i1l5453 04B1                                i1l5365 03A6  
                              i1l5293 030F                                i1l5197 023E  
                              i1l4743 0EB8                                i1l3943 1AB4  
                              i1l3935 1AAD                                i1l4399 16B4  
                              i1l4663 0DE0                                i1l5527 05EE  
                              i1l5543 0632                                i1l5471 04F1  
                              i1l5367 03C3                                i1l5279 0300  
                              i1l5295 0324                                i1l3785 0A90  
                              i1l3777 0A88                                i1l4913 1988  
                              i1l4825 0F7E                                i1l4753 0EE0  
                              i1l4745 0ED5                                i1l3881 13CB  
                              i1l3873 13B6                                i1l3953 1ABF  
                              i1l5529 05F3                                i1l5537 0602  
                              i1l5289 0321                                i1l5393 0404  
                              i1l3795 0A96                                i1l4851 0FD8  
                              i1l4827 0F9A                                i1l4755 0EE5  
                              i1l3867 1399                                i1l3971 1FAA  
                              i1l4691 0E45                                i1l4659 0DCD  
                              i1l5547 0645                                i1l5539 060F  
                              i1l5459 04C4                                i1l5379 03E2  
                              i1l5299 032D                                i1l4861 0FDB  
                              i1l4837 0F9D                                i1l4781 0F26  
                              i1l3957 1AC7                                i1l3973 1FB4  
                              i1l3981 1FE6                                i1l4685 0E36  
                              i1l4677 0E0D                                i1l5493 0560  
                              i1l5485 054A                                i1l5549 0648  
                              i1l5389 03F8                                i1l5565 0667  
                              i1l4863 0FF7                                i1l4839 0FB9  
                              i1l4767 0EEA                                i1l3879 1375  
                              i1l4687 0E3B                                i1l4695 0E4A  
                              i1l4943 1AD7                                i1l5479 0538  
                              i1l5807 00D7                                i1l4849 0FBC  
                              i1l4769 0F06                                i1l3977 1FD0  
                              i1l4689 0E40                                i1l4697 0E57  
                              i1l5497 0569                                i1l5489 0553  
                              i1l5569 0121                                i1l5809 00DA  
                              i1l4787 0F34                                i1l4779 0F09  
                              i1l3979 1FDD                                i1l4947 1AE1  
                              i1l5755 005D                                i1l4877 19BD  
                              i1l4789 0F39                                i1l5781 0092  
                              i1l5757 0060                                i1l4799 0F3C  
                              i1l5791 00BC                                i1l4889 19CF  
                              i1l5789 00B0                                _INTCON 000B  
                              _FVRCON 0117                                u404_25 140C  
                              u420_25 1E23                                u422_25 1EBB  
                              _PARITY 0260                                u431_25 1D11  
                              _PMADRH 0192                                u512_25 1F53  
                              u424_25 1EC7                                u432_25 1D1C  
                              u520_25 1A15                                _PMADRL 0191  
                              u513_25 1F5F                                u425_25 1EDB  
                   i1___llmod@counter 0029                      __end_of___lwtoft 1A0B  
                              _PMDATH 0194                                u514_25 1F6B  
                              u522_25 1C8B                                u426_25 1EE7  
                              _PMDATL 0193                                u515_25 1F81  
                              _PMCON1 0195                                _PMCON2 0196  
                              u516_25 1F8C                                u380_25 1A67  
                              u524_25 0D51                                u517_25 1F97  
                              u429_25 1CF8                                u525_25 0DAE  
                              u454_25 067A                                u526_25 0DCB  
                  __size_of_ReadUSART 000A                                u383_23 1BAD  
                              u391_25 1A39                                u455_25 06BD  
                              _OSCCON 0099                                u386_25 0A7C  
                              u482_25 1587                                u563_25 1AE2  
                              u715_25 001E                                u564_25 1AE9  
                              u493_25 16A5                                u495_25 16BE  
                              u488_25 1173                                u489_25 1196  
                              u586_25 1DE1                                _SPBRGH 019C  
                              u696_25 05B3                                u697_25 05C3  
                              _TX1STA 019E                                _UNLOCK 190F  
                __end_of_OddParityMSG 0926                            _ResendLast 18D7  
                       i1sprintf@_val 003B                 _PS_2_Read_Data_Second 01E3  
                       i1sprintf@flag 0038                         i1sprintf@prec 0039  
                           ??_InitApp 0220                 ??_ConfigureOscillator 0220  
                              _Delete 00CE                      i1OpenUSART@spbrg 0070  
                      __CFG_PWRTE$OFF 0000                             ??_SetBaud 00B4  
                       ??_Timer2Reset 0070                            _Timer2Init 1A78  
                         ?_BlockErase 0070                         InitUART@spbrg 023B  
                         SetBaud@Baud 00AF                    __size_of_OpenUSART 0041  
                              ___ftge 1C2E                __end_of_SpaceParityMSG 094A  
                   ?_Decode_Scan_Code 0070                                ___lmul 1ACF  
                      __CFG_STVREN$ON 0000                             ??___ftdiv 0232  
                           ??___lldiv 0228                           ?_Clock_TRIS 0070  
                           ??___ftmul 0242                             ??___llmod 0236  
                         SetBaud@temp 015A                   __size_ofi1_InitUART 00EF  
                   __end_of_PS_2_INIT 195F                   __size_ofi1_ReadBaud 0064  
                  ??_Decode_Scan_Code 0070                          ?i1_ReadUSART 0070  
                           ??_delayUS 0224  __size_of_Decode_Scan_Code_FunctionE0 0012  
                  __size_of_Timer2OFF 0003                           ?_CloseUSART 0070  
              ??_Process_PS2_ScanCode 00BC                 ___ftmul@f3_as_product 0247  
                   __end_ofi1___lldiv 1EFA                     __end_ofi1___llmod 1D2F  
              ?_WriteFlash_Sequential 007A                   __size_ofi1_Timer2ON 0003  
                   __end_ofi1_delayUS 1BC6                       SetBaud@Baudtemp 0152  
                        ?i1_OpenUSART 0070                __size_of_CheckSum_byte 0031  
                   ??i1_CheckSum_byte 0073                        ?_READ_PS_2_PIN 0070  
                   __end_of_Data_TRIS 193B                             ??_sprintf 0240  
                      i1ReadBaud@temp 0030               i1_PS_2_ENABLE_INTERRUPT 191A  
             __end_of_UART_send_break 18B7                       _ReadFlash_2Byte 1B61  
                     _ReadFlash_4Byte 1E57               __end_of__initialization 0117  
                 Timer2Init@prescaler 0224                           _NoParityMSG 0926  
                  __size_of_WriteBaud 0068                      ?_BufferShiftBack 0070  
                          ___ftge@ff1 0220                            ___ftge@ff2 0223  
                   __end_ofi1_sprintf 170A               ?_PS_2_DISABLE_INTERRUPT 0070  
                          ___ftdiv@f1 022F                            ___ftdiv@f2 022C  
                          ___ftdiv@f3 0237                            _VoltageMSG 0959  
                           ?_ISNUMBER 0070                    __size_of_baudUSART 0009  
                          ___ftmul@f1 023C                            ___ftmul@f2 023F  
                      __pcstackCOMMON 0070                          __pidataBANK1 18AE  
                        __pidataBANK4 18AA                             ?_UARTchar 0228  
                       ?_PS2RawToScan 0078                    InitUART@baudconfig 023D  
                         _Init_System 0B8E                   __end_of_Timer2Reset 18A4  
                   __end_of_ReadUSART 190F                            ___lwtoft@c 0228  
                         _ReadVoltage 1085                       ReadVoltage@temp 0253  
                        WriteBaud@row 00A0              __end_ofi1_UARTstringWAIT 1B61  
                      _OPTION_REGbits 0095                   ReadFlash_4Byte@temp 022E  
                        ?i1_baudUSART 0070                           i1sprintf@ap 003F  
                         i1sprintf@sp 002A                     ??_READ_CONFIG_PIN 0070  
                       ReadUSART@data 0221                           _SinLEDtimer 025A  
  __size_of_Decode_Scan_Code_Function 0010                     __end_of_OpenUSART 1CEC  
                 __size_of_BlockErase 002B                       WriteBaud@Parity 00A6  
                   Send_PS2@oddparity 0020                            __pbssBANK1 00C5  
                          __pbssBANK3 01E1                            __pbssBANK4 0257  
                 __size_of_Clock_TRIS 000B                             ?_InitUART 022E  
                           ?_ReadBaud 0232                     __end_of_Timer2OFF 18A1  
      __end_of_PS_2_DISABLE_INTERRUPT 199B                    ReadVoltage@voltage 0250  
                             ?_UNLOCK 0070                           ?_ResendLast 0070  
                 __size_of_CloseUSART 000E                             ?_Send_PS2 0070  
                          ??_ISNUMBER 0070                  _ScanCodeFunctionNoE0 0700  
            __end_of_InternalADC_Read 1DB6                           ?_Timer2Init 0070  
                  _ScanCodeFunctionE0 0866                             ?_Timer2ON 0070  
                       _CheckSum_byte 1AFE                            __pmaintext 0A98  
                        ??i1_UARTchar 007A                           _ParityTyped 01EB  
                       BlockErase@row 0070                               ?___ftge 0220  
                             ?___lmul 0070                   i1CheckSum_byte@This 0070  
                      ??_PS2RawToScan 0020                         _Caps_Lock_Key 00CC  
                       ?_Reverse_Byte 0070                            __pintentry 0004  
                          ??_UARTchar 022A                        ___lmul@product 0078  
                           ?___ftpack 0220                       i1InitUART@spbrg 002D  
                   _PS_2_Buffer_items 00D1                 i1CheckSum_byte@Parity 0076  
                           ?___lwtoft 0228                     __end_of_WriteBaud 06DA  
                  i1___llmod@dividend 0024                       ??_READ_PS_2_PIN 0070  
                 BufferShiftBack@size 0071                     __end_of_baudUSART 18F1  
             __end_of_ReadFlash_2Byte 1B93               __end_of_ReadFlash_4Byte 1EA8  
                             _OSCSTAT 009A                   Clock_TRIS@direction 0220  
           ??i1_PS_2_ENABLE_INTERRUPT 0070                               _PPSLOCK 0E0F  
                        ??i1_InitUART 0025                  i1ReadFlash_2Byte@row 0070  
                        ??i1_ReadBaud 0028                         ?i1_Clock_TRIS 0070  
                  __end_ofi1_UARTchar 2000                  __size_ofi1_Data_TRIS 000A  
                   i1OpenUSART@config 0072                  i1ReadFlash_4Byte@row 0075  
                          ??_InitUART 0233                            ??_ReadBaud 0236  
               READ_PS_2_PIN@DATA_CLK 0070                      ?_UART_send_break 0070  
                       ?i1_CloseUSART 0070                 _PS_2_ENABLE_INTERRUPT 1947  
                     __size_of_UNLOCK 000B                          ??i1_Timer2ON 0070  
                             _InitApp 1000                            ??_Send_PS2 007A  
                             _SetBaud 0CF6                        InitUART@config 023E  
                      ?_CheckSum_byte 0220                           _Timer2Reset 18A1  
     i1PS_2_ENABLE_INTERRUPT@DATA_CLK 0070                            ??_Timer2ON 0220  
                      InitUART@parity 0232               i1CheckSum_byte@Odd_Even 0072  
                      ??_Reverse_Byte 0070                               _Version 0966  
                     __size_of___ftge 003C                       __size_of___lmul 002F  
                             ___ftdiv 1211                               ___lldiv 1EFA  
                             ___ftmul 12BA                               ___llmod 1D2F  
                  __end_ofi1_InitUART 1614                               _delayUS 1BF9  
                  __end_ofi1_ReadBaud 11AD                            ??___ftpack 0225  
                             __ptext1 1C2E                               __ptext2 1085  
                             __ptext3 19F6                               __ptext4 12BA  
                             __ptext5 1211                               __ptext6 1024  
                             __ptext7 1D72                               __ptext8 18D0  
                             __ptext9 1953                            ??___lwtoft 022B  
                __size_ofi1_ReadUSART 0009                          _OddParityMSG 0911  
                             _dpowers 08D3                   __size_of_ResendLast 0008  
                           _T2CONbits 001C               i1CheckSum_byte@ThisTemp 0074  
                        __size_of_isr 00E2              _Process_PS2_ScanCode$850 01DC  
            _Process_PS2_ScanCode$851 01DD              _Process_PS2_ScanCode$852 01DE  
            _Process_PS2_ScanCode$853 01DF           WriteFlash_Sequential@amount 007D  
         WriteFlash_Sequential@buffer 007C                    __end_ofi1_Timer2ON 18A7  
               _UART_send_break_timed 06DA                   __size_of_Timer2Init 002B  
                  _DisableInternalADC 18D0           WriteFlash_Sequential@spaces 0068  
                      ??i1_Clock_TRIS 0070                               _sprintf 170A  
                             clrloop0 18C4                     _Caps_Lock_Key_old 00CD  
                __size_ofi1_OpenUSART 002C                  end_of_initialization 0117  
                       ??_cleanBuffer 0072                        ??i1_CloseUSART 0070  
               BufferShiftBack@buffer 0077                       i1ReadUSART@data 0071  
                             init_ram 18BD                   ?_DisableInternalADC 0070  
                             initloop 18BE                      UARTchar@override 0228  
        ?_Decode_Scan_Code_FunctionE0 0070                       ___lldiv@divisor 0220  
                     ___lldiv@counter 022D                          ??_BlockErase 0072  
                           _RCSTAbits 019D                          ??_Clock_TRIS 0220  
                        __pstringtext 0700                 __end_of_EvenParityMSG 0911  
                     i1_CheckSum_byte 0A68               ??_WriteFlash_Sequential 0020  
                        ??_CloseUSART 0220                  ??_DisableInternalADC 0220  
                           _PS_2_INIT 1953                      __CFG_FOSC$INTOSC 0000  
                           _PS_2_bits 00D2                             _TRISAbits 008C  
                           _TRISCbits 008E             __size_of_Decode_Scan_Code 0012  
                    ?_ReadFlash_2Byte 0220                      ?_ReadFlash_4Byte 0225  
                __size_ofi1_baudUSART 0006                             i1___lldiv 1EA8  
               __end_of_MarkParityMSG 0959                             i1___llmod 1CEC  
                  __end_of_BlockErase 1A78           __end_of_ConfigureOscillator 19E3  
                __end_of_PS2RawToScan 1E06                             i1_delayUS 1B93  
              ?_PS_2_ENABLE_INTERRUPT 0070                    __end_of_Clock_TRIS 1930  
                           _BaudTyped 00C5                             _Data_TRIS 1930  
                           _CapsCount 01E7                 i1baudUSART@baudconfig 0070  
                         ___ftdiv@exp 023A                             _Caps_Lock 01E8  
                     ??_CheckSum_byte 0223                           _CCP2CONbits 029A  
                           _TXSTAbits 019E                        __end_of_UNLOCK 191A  
                  __end_of_CloseUSART 197A                  Timer2Init@postscaler 0223  
                 __end_of_cleanBuffer 1A23         ??_Decode_Scan_Code_FunctionE0 0070  
                         ___ftmul@exp 0246                             i1_sprintf 1614  
                   __size_of_ISNUMBER 000D                        __end_of___ftge 1C6A  
               CheckSum_byte@Odd_Even 0222                          ?_Init_System 0070  
                      __end_of___lmul 1AFE                       _READ_CONFIG_PIN 18C9  
                   __size_of_UARTchar 0063                          ?_ReadVoltage 024C  
                          ?_PS_2_INIT 0070                             Send_PS2@i 0022  
       __size_of_Process_PS2_ScanCode 0557                ?_UART_send_break_timed 007A  
                 start_initialization 00E8                     ?i1_UARTstringWAIT 0021  
                           _ReadUSART 1905               __size_of_UARTstringWAIT 0033  
               CheckSum_byte@ThisTemp 0224                           __end_of_isr 00E6  
                          ?i1___lldiv 0070                    ??i1_UARTstringWAIT 0023  
                          ?i1___llmod 0020                         WriteBaud@Baud 00A2  
                __end_of_Reverse_Byte 1FA1                            ?i1_delayUS 0070  
            ??_Decode_Scan_Code_Shift 0070                         WriteBaud@temp 006A  
                           _OpenUSART 1CAB                            ?_Data_TRIS 0070  
                            ??_UNLOCK 0070                          ??_ResendLast 007E  
                     ___llmod@divisor 022E                     __size_of_InitUART 00E5  
                     ___llmod@counter 0237                     __size_of_ReadBaud 0064  
                           _Shift_Key 01EF                          ??_Timer2Init 0220  
                           _Timer2OFF 189E               __end_ofi1_CheckSum_byte 0A98  
                   ?_InternalADC_Read 022A                     __size_of_Send_PS2 018E  
                          ?i1_sprintf 002A                              ??___ftge 0226  
                            ??___lmul 0078              __size_of_BufferShiftBack 0041  
                  ??_InternalADC_Read 022C                     __size_of_Timer2ON 0003  
                __end_ofi1_Clock_TRIS 18FB                           __pdataBANK1 00E2  
                         __pdataBANK4 0261                  __end_ofi1_CloseUSART 1947  
                       i1ReadBaud@row 0024                     __size_of___ftpack 0061  
                    cleanBuffer@count 0070                    __end_of_ResendLast 18DF  
                          ?_ReadUSART 0070                             ___latbits 0002  
                   __size_of___lwtoft 0015                         __pcstackBANK0 0020  
                       __pcstackBANK1 00A0                         __pcstackBANK2 0120  
                       __pcstackBANK3 01A0                         __pcstackBANK4 0220  
                       __pcstackBANK5 02A0                             _WriteBaud 0672  
                 __end_of__stringdata 0A68                    i1UARTchar@override 0078  
                  ReadFlash_2Byte@row 0220                    __end_of_Timer2Init 1AA3  
                           _baudUSART 18E8                    ReadFlash_4Byte@row 0225  
                         _cleanBuffer 1A0B                            ?_OpenUSART 0220  
                         sprintf@_val 0249                           sprintf@flag 0246  
                         sprintf@prec 0247                              ?_InitApp 0070  
               __end_of_ScanCodeSHIFT 0866       Decode_Scan_Code_FunctionE0@Code 0070  
                            ?_SetBaud 00AF               __end_of_READ_CONFIG_PIN 18D0  
                      ReadBaud@column 0234                            ?_Timer2OFF 0070  
                        ?_Timer2Reset 0070                              ?___ftdiv 022C  
                            ?___lldiv 0220                              ?___ftmul 023C  
                            ?___llmod 022E                      __CFG_PPS1WAY$OFF 0000  
       WriteFlash_Sequential@TempBufH 0023         WriteFlash_Sequential@TempBufL 0043  
                            ?_delayUS 0220                WriteFlash_Sequential@i 0069  
          Decode_Scan_Code_Shift@Code 0070                              _BAUD1CON 019F  
                         ??_PS_2_INIT 0225                      i1InitUART@config 0030  
                            _BAUDMODE 00CB                 __size_of_PS2RawToScan 0050  
                    i1InitUART@parity 0024                         ??i1_Data_TRIS 0070  
                    _Decode_Scan_Code 199B                    __end_of_VoltageMSG 0966  
                          ?_WriteBaud 00A0                           ??i1___lldiv 0078  
               __end_of_READ_PS_2_PIN 19F6                           ??i1___llmod 0028  
                            ?_sprintf 0238                            ?_baudUSART 0070  
                         ??i1_delayUS 0074                             delayUS@US 0220  
     __size_of_Decode_Scan_Code_Shift 0012            ?_Decode_Scan_Code_Function 0070  
                         ??_Data_TRIS 0220            WriteFlash_Sequential@tempH 0063  
          WriteFlash_Sequential@tempL 0064                             clear_ram0 18C3  
                            _PIE1bits 0091                          cleanBuffer@i 0074  
                BufferShiftBack@shift 0070                              _ISNUMBER 195F  
                            _PIR1bits 0011                      ?i1_CheckSum_byte 0070  
                         ??i1_sprintf 0032              __size_of_UART_send_break 0005  
            WriteFlash_Sequential@row 007A                              _UARTchar 10E6  
                i1Data_TRIS@direction 0070                          _PS2RawToScan 1DB6  
                       ??i1_ReadUSART 0070                              _LControl 00CF  
                         __stringdata 096E                  __size_of_Init_System 0168  
            ?i1_PS_2_ENABLE_INTERRUPT 0070        __size_of_WriteFlash_Sequential 00D2  
                   ??_BufferShiftBack 0072                 i1ReadFlash_4Byte@temp 0020  
       __end_of_WriteFlash_Sequential 1440                 __size_of_Reverse_Byte 0054  
                      _UARTstringWAIT 1BC6                           ??_ReadUSART 0220  
                __size_of_ReadVoltage 0061                              _RControl 01ED  
                       ??i1_OpenUSART 0072              ??_PS_2_DISABLE_INTERRUPT 0070  
             ??_PS_2_ENABLE_INTERRUPT 0220                     ___lmul@multiplier 0070  
                            SetBaud@i 015E                              _InitUART 1440  
                            _ReadBaud 11AD                           ??_OpenUSART 0222  
                 __end_ofi1_Data_TRIS 1905                  i1UARTstringWAIT@data 0021  
                            _ScanCode 0784                       OpenUSART@config 0222  
   __end_of_Decode_Scan_Code_Function 198A                              _Send_PS2 0E72  
               __size_ofi1_Clock_TRIS 000A                      __size_of_InitApp 0024  
                         ??_Timer2OFF 0070                      ?_READ_CONFIG_PIN 0070  
                            _Timer2ON 18A7                      __size_of_SetBaud 017C  
               __size_ofi1_CloseUSART 000C                          _Reverse_Byte 1F4D  
                    __size_of___ftdiv 00A9                       cleanBuffer@data 0073  
              _Decode_Scan_Code_Shift 19BF                      __size_of___lldiv 0053  
                    __size_of___ftmul 00B4                      __size_of___llmod 0043  
                       SetBaud@Parity 00B3                              ___ftpack 1024  
                      _PS_2_ScanCodes 00D6               ??_UART_send_break_timed 007C  
                    __size_of_delayUS 0035           __size_of_DisableInternalADC 0007  
              __end_of_UARTstringWAIT 1BF9                              ___lwtoft 19F6  
                     Send_PS2@command 0021                         ??i1_baudUSART 0070  
                 __end_ofi1_ReadUSART 18E8                 i1Clock_TRIS@direction 0070  
                         ??_WriteBaud 00A7                       Send_PS2@timeout 0023  
                       ISNUMBER@ascii 0070                              __ptext10 1A78  
                            __ptext11 18A7                              __ptext20 10E6  
                            __ptext12 1930                              __ptext21 1AFE  
                            __ptext13 1925                              __ptext30 196C  
                            __ptext22 11AD                              __ptext14 1947  
                            __ptext31 1000                              __ptext23 1E57  
                            __ptext15 0B8E                              __ptext40 18C9  
                            __ptext32 19D1                              __ptext24 1B61  
                            __ptext16 170A                              __ptext41 011B  
                            __ptext25 1440                              __ptext17 1D2F  
                            __ptext50 1FA1                              __ptext42 1A0B  
                            __ptext34 18A4                              __ptext26 18E8  
                            __ptext18 1BC6                              __ptext51 1149  
                            __ptext43 1ACF                              __ptext35 191A  
                            __ptext27 1EFA                              __ptext19 1BF9  
                            __ptext60 136E                              __ptext52 1E06  
                            __ptext44 06DA                              __ptext36 18A1  
                            __ptext28 1905                              __ptext61 1A23  
                            __ptext53 1525                              __ptext45 18B2  
                            __ptext37 189E                              __ptext29 1CAB  
                            __ptext70 19BF                              __ptext62 1A4D  
                            __ptext54 18B7                              __ptext46 0CF6  
                            __ptext38 18D7                              __ptext71 19AD  
                            __ptext63 190F                              __ptext55 1EA8  
                            __ptext47 1614                              __ptext39 198A  
                            __ptext72 197A                              __ptext64 0E72  
                            __ptext56 18DF                              __ptext48 1CEC  
                            __ptext73 199B                              __ptext65 1B93  
                            __ptext57 1AA3                              __ptext49 1B2F  
                            __ptext74 1C6A                              __ptext66 18FB  
                            __ptext58 193B                              __ptext75 1DB6  
                            __ptext67 18F1                              __ptext59 0672  
                            __ptext76 0A68                              __ptext68 19E3  
                            __ptext77 1F4D                              __ptext69 195F  
       PS_2_ENABLE_INTERRUPT@DATA_CLK 0220                     i1_ReadFlash_2Byte 1A23  
                   i1_ReadFlash_4Byte 1E06                           ??_baudUSART 0220  
                        i1_Clock_TRIS 18F1                      __size_of_sprintf 00F6  
                  ?i1_ReadFlash_2Byte 0070                    ?i1_ReadFlash_4Byte 0075  
                 __end_ofi1_OpenUSART 1ACF                         __size_of_main 00F6  
                        i1_CloseUSART 193B              __size_of_ReadFlash_2Byte 0032  
            __size_of_ReadFlash_4Byte 0051          __end_of_Process_PS2_ScanCode 0672  
                            delayUS@i 0225                              delayUS@j 0229  
           __size_ofi1_UARTstringWAIT 0032                          _pwrLEDtoggle 025C  
        __size_of_ConfigureOscillator 0012                 __end_of_CheckSum_byte 1B2F  
                 ??i1_ReadFlash_2Byte 0073                   ??i1_ReadFlash_4Byte 0079  
                          _RC1STAbits 019D                        CheckSum_byte@i 0227  
                      _Left_Shift_Key 01EA                  __size_of_Timer2Reset 0003  
     __end_ofi1_PS_2_ENABLE_INTERRUPT 1925                        Timer2Init@time 0222  
                   ??_UART_send_break 0070                       ?_UARTstringWAIT 022F  
                 CheckSum_byte@Parity 0226                            _INTCONbits 000B  
           __size_of_InternalADC_Read 0044                        OpenUSART@spbrg 0220  
           __end_ofi1_ReadFlash_2Byte 1A4D             __end_ofi1_ReadFlash_4Byte 1E57  
                        UARTchar@data 022E                           i1_Data_TRIS 18FB  
                         pic14e$flags 007E       __size_of_PS_2_DISABLE_INTERRUPT 0011  
                 __end_ofi1_baudUSART 18BD                              intlevel1 0000  
                           sprintf@ap 024D                             sprintf@sp 0238  
                        ?_cleanBuffer 0070                      ___lldiv@dividend 0224  
 __end_of_Decode_Scan_Code_FunctionE0 19BF           _Decode_Scan_Code_FunctionE0 19AD  
                   __CFG_CLKOUTEN$OFF 0000                        _BatteryVoltage 0257  
            __end_of_Decode_Scan_Code 19AD                            i1_UARTchar 1FA1  
                     _Right_Shift_Key 01EE                           i1_ReadUSART 18DF  
                       _EvenParityMSG 08FB                              sprintf@c 024F  
                            sprintf@f 023A                      i1ReadBaud@column 0026  
                    ___lldiv@quotient 0229               i1ReadFlash_2Byte@column 0072  
                Decode_Scan_Code@Code 0070                           i1_OpenUSART 1AA3  
                   Init_System@Parity 02E0                    _Left_Shift_Key_old 00D0  
                          _TX1STAbits 019E                            i1_InitUART 1525  
                   CheckSum_byte@This 0220                        i1UARTchar@data 0020  
                          i1_ReadBaud 1149                         _MarkParityMSG 094A  
         ??_Decode_Scan_Code_Function 0070                       Init_System@Baud 02E1  
                          i1_Timer2ON 18A4                       Init_System@temp 02DC  
                      Init_System@buf 02A0                       PS2RawToScan@Raw 0078  
      PS_2_DISABLE_INTERRUPT@DATA_CLK 0071                      PS2RawToScan@temp 007A  
