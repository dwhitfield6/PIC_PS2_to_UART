

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Fri Feb 27 13:27:04 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F1705
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK4,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    12                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1
    16                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	intentry,global,class=CODE,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	psect	text66,local,class=CODE,merge=1,delta=2
    89                           	psect	text67,local,class=CODE,merge=1,delta=2
    90                           	psect	text68,local,class=CODE,merge=1,delta=2
    91                           	psect	text69,local,class=CODE,merge=1,delta=2
    92                           	psect	text70,local,class=CODE,merge=1,delta=2
    93                           	psect	text71,local,class=CODE,merge=1,delta=2
    94                           	psect	text72,local,class=CODE,merge=1,delta=2
    95                           	psect	text73,local,class=CODE,merge=1,delta=2
    96                           	psect	text74,local,class=CODE,merge=1,delta=2
    97                           	psect	text75,local,class=CODE,merge=1,delta=2
    98                           	psect	text76,local,class=CODE,merge=1,delta=2
    99                           	psect	text77,local,class=CODE,merge=1,delta=2
   100                           	dabs	1,0x7E,2
   101  0000                     	;# 
   102  0001                     	;# 
   103  0002                     	;# 
   104  0003                     	;# 
   105  0004                     	;# 
   106  0005                     	;# 
   107  0006                     	;# 
   108  0007                     	;# 
   109  0008                     	;# 
   110  0009                     	;# 
   111  000A                     	;# 
   112  000B                     	;# 
   113  000C                     	;# 
   114  000E                     	;# 
   115  0011                     	;# 
   116  0012                     	;# 
   117  0013                     	;# 
   118  0015                     	;# 
   119  0016                     	;# 
   120  0016                     	;# 
   121  0017                     	;# 
   122  0018                     	;# 
   123  0019                     	;# 
   124  001A                     	;# 
   125  001B                     	;# 
   126  001C                     	;# 
   127  008C                     	;# 
   128  008E                     	;# 
   129  0091                     	;# 
   130  0092                     	;# 
   131  0093                     	;# 
   132  0095                     	;# 
   133  0096                     	;# 
   134  0097                     	;# 
   135  0098                     	;# 
   136  0099                     	;# 
   137  009A                     	;# 
   138  009B                     	;# 
   139  009B                     	;# 
   140  009C                     	;# 
   141  009D                     	;# 
   142  009E                     	;# 
   143  009F                     	;# 
   144  010C                     	;# 
   145  010E                     	;# 
   146  0111                     	;# 
   147  0112                     	;# 
   148  0113                     	;# 
   149  0114                     	;# 
   150  0115                     	;# 
   151  0116                     	;# 
   152  0117                     	;# 
   153  0118                     	;# 
   154  0119                     	;# 
   155  011C                     	;# 
   156  018C                     	;# 
   157  018E                     	;# 
   158  0191                     	;# 
   159  0191                     	;# 
   160  0192                     	;# 
   161  0193                     	;# 
   162  0193                     	;# 
   163  0194                     	;# 
   164  0195                     	;# 
   165  0196                     	;# 
   166  0197                     	;# 
   167  0199                     	;# 
   168  0199                     	;# 
   169  0199                     	;# 
   170  019A                     	;# 
   171  019A                     	;# 
   172  019A                     	;# 
   173  019B                     	;# 
   174  019B                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019C                     	;# 
   179  019C                     	;# 
   180  019C                     	;# 
   181  019D                     	;# 
   182  019D                     	;# 
   183  019D                     	;# 
   184  019E                     	;# 
   185  019E                     	;# 
   186  019E                     	;# 
   187  019F                     	;# 
   188  019F                     	;# 
   189  019F                     	;# 
   190  019F                     	;# 
   191  019F                     	;# 
   192  020C                     	;# 
   193  020E                     	;# 
   194  0211                     	;# 
   195  0211                     	;# 
   196  0212                     	;# 
   197  0212                     	;# 
   198  0213                     	;# 
   199  0213                     	;# 
   200  0214                     	;# 
   201  0214                     	;# 
   202  0215                     	;# 
   203  0215                     	;# 
   204  0215                     	;# 
   205  0215                     	;# 
   206  0216                     	;# 
   207  0216                     	;# 
   208  0217                     	;# 
   209  0217                     	;# 
   210  028C                     	;# 
   211  028E                     	;# 
   212  0291                     	;# 
   213  0291                     	;# 
   214  0292                     	;# 
   215  0293                     	;# 
   216  0293                     	;# 
   217  0298                     	;# 
   218  0298                     	;# 
   219  0299                     	;# 
   220  029A                     	;# 
   221  029A                     	;# 
   222  029E                     	;# 
   223  030C                     	;# 
   224  030E                     	;# 
   225  038C                     	;# 
   226  038E                     	;# 
   227  0391                     	;# 
   228  0392                     	;# 
   229  0393                     	;# 
   230  0397                     	;# 
   231  0398                     	;# 
   232  0399                     	;# 
   233  0415                     	;# 
   234  0416                     	;# 
   235  0417                     	;# 
   236  041C                     	;# 
   237  041D                     	;# 
   238  041E                     	;# 
   239  0511                     	;# 
   240  0515                     	;# 
   241  0617                     	;# 
   242  0618                     	;# 
   243  0619                     	;# 
   244  0619                     	;# 
   245  061A                     	;# 
   246  061B                     	;# 
   247  061C                     	;# 
   248  061C                     	;# 
   249  0691                     	;# 
   250  0692                     	;# 
   251  0693                     	;# 
   252  0694                     	;# 
   253  0695                     	;# 
   254  0696                     	;# 
   255  0697                     	;# 
   256  0698                     	;# 
   257  0699                     	;# 
   258  069A                     	;# 
   259  069B                     	;# 
   260  069C                     	;# 
   261  069D                     	;# 
   262  069E                     	;# 
   263  069F                     	;# 
   264  0E0F                     	;# 
   265  0E10                     	;# 
   266  0E11                     	;# 
   267  0E12                     	;# 
   268  0E13                     	;# 
   269  0E14                     	;# 
   270  0E15                     	;# 
   271  0E17                     	;# 
   272  0E20                     	;# 
   273  0E21                     	;# 
   274  0E22                     	;# 
   275  0E24                     	;# 
   276  0E25                     	;# 
   277  0E28                     	;# 
   278  0E29                     	;# 
   279  0E2A                     	;# 
   280  0E2B                     	;# 
   281  0E90                     	;# 
   282  0E91                     	;# 
   283  0E92                     	;# 
   284  0E94                     	;# 
   285  0E95                     	;# 
   286  0EA0                     	;# 
   287  0EA1                     	;# 
   288  0EA2                     	;# 
   289  0EA3                     	;# 
   290  0EA4                     	;# 
   291  0EA5                     	;# 
   292  0F0F                     	;# 
   293  0F10                     	;# 
   294  0F11                     	;# 
   295  0F12                     	;# 
   296  0F13                     	;# 
   297  0F14                     	;# 
   298  0F15                     	;# 
   299  0F16                     	;# 
   300  0F17                     	;# 
   301  0F18                     	;# 
   302  0F19                     	;# 
   303  0F1A                     	;# 
   304  0F1B                     	;# 
   305  0F1C                     	;# 
   306  0F1D                     	;# 
   307  0F1E                     	;# 
   308  0F1F                     	;# 
   309  0F20                     	;# 
   310  0F21                     	;# 
   311  0F22                     	;# 
   312  0F23                     	;# 
   313  0F24                     	;# 
   314  0F25                     	;# 
   315  0F26                     	;# 
   316  0F27                     	;# 
   317  0F28                     	;# 
   318  0F29                     	;# 
   319  0F2A                     	;# 
   320  0F2B                     	;# 
   321  0F2C                     	;# 
   322  0F2D                     	;# 
   323  0F9E                     	;# 
   324  0FE4                     	;# 
   325  0FE5                     	;# 
   326  0FE6                     	;# 
   327  0FE7                     	;# 
   328  0FE8                     	;# 
   329  0FE9                     	;# 
   330  0FEA                     	;# 
   331  0FEB                     	;# 
   332  0FED                     	;# 
   333  0FEE                     	;# 
   334  0FEF                     	;# 
   335  0000                     	;# 
   336  0001                     	;# 
   337  0002                     	;# 
   338  0003                     	;# 
   339  0004                     	;# 
   340  0005                     	;# 
   341  0006                     	;# 
   342  0007                     	;# 
   343  0008                     	;# 
   344  0009                     	;# 
   345  000A                     	;# 
   346  000B                     	;# 
   347  000C                     	;# 
   348  000E                     	;# 
   349  0011                     	;# 
   350  0012                     	;# 
   351  0013                     	;# 
   352  0015                     	;# 
   353  0016                     	;# 
   354  0016                     	;# 
   355  0017                     	;# 
   356  0018                     	;# 
   357  0019                     	;# 
   358  001A                     	;# 
   359  001B                     	;# 
   360  001C                     	;# 
   361  008C                     	;# 
   362  008E                     	;# 
   363  0091                     	;# 
   364  0092                     	;# 
   365  0093                     	;# 
   366  0095                     	;# 
   367  0096                     	;# 
   368  0097                     	;# 
   369  0098                     	;# 
   370  0099                     	;# 
   371  009A                     	;# 
   372  009B                     	;# 
   373  009B                     	;# 
   374  009C                     	;# 
   375  009D                     	;# 
   376  009E                     	;# 
   377  009F                     	;# 
   378  010C                     	;# 
   379  010E                     	;# 
   380  0111                     	;# 
   381  0112                     	;# 
   382  0113                     	;# 
   383  0114                     	;# 
   384  0115                     	;# 
   385  0116                     	;# 
   386  0117                     	;# 
   387  0118                     	;# 
   388  0119                     	;# 
   389  011C                     	;# 
   390  018C                     	;# 
   391  018E                     	;# 
   392  0191                     	;# 
   393  0191                     	;# 
   394  0192                     	;# 
   395  0193                     	;# 
   396  0193                     	;# 
   397  0194                     	;# 
   398  0195                     	;# 
   399  0196                     	;# 
   400  0197                     	;# 
   401  0199                     	;# 
   402  0199                     	;# 
   403  0199                     	;# 
   404  019A                     	;# 
   405  019A                     	;# 
   406  019A                     	;# 
   407  019B                     	;# 
   408  019B                     	;# 
   409  019B                     	;# 
   410  019B                     	;# 
   411  019B                     	;# 
   412  019C                     	;# 
   413  019C                     	;# 
   414  019C                     	;# 
   415  019D                     	;# 
   416  019D                     	;# 
   417  019D                     	;# 
   418  019E                     	;# 
   419  019E                     	;# 
   420  019E                     	;# 
   421  019F                     	;# 
   422  019F                     	;# 
   423  019F                     	;# 
   424  019F                     	;# 
   425  019F                     	;# 
   426  020C                     	;# 
   427  020E                     	;# 
   428  0211                     	;# 
   429  0211                     	;# 
   430  0212                     	;# 
   431  0212                     	;# 
   432  0213                     	;# 
   433  0213                     	;# 
   434  0214                     	;# 
   435  0214                     	;# 
   436  0215                     	;# 
   437  0215                     	;# 
   438  0215                     	;# 
   439  0215                     	;# 
   440  0216                     	;# 
   441  0216                     	;# 
   442  0217                     	;# 
   443  0217                     	;# 
   444  028C                     	;# 
   445  028E                     	;# 
   446  0291                     	;# 
   447  0291                     	;# 
   448  0292                     	;# 
   449  0293                     	;# 
   450  0293                     	;# 
   451  0298                     	;# 
   452  0298                     	;# 
   453  0299                     	;# 
   454  029A                     	;# 
   455  029A                     	;# 
   456  029E                     	;# 
   457  030C                     	;# 
   458  030E                     	;# 
   459  038C                     	;# 
   460  038E                     	;# 
   461  0391                     	;# 
   462  0392                     	;# 
   463  0393                     	;# 
   464  0397                     	;# 
   465  0398                     	;# 
   466  0399                     	;# 
   467  0415                     	;# 
   468  0416                     	;# 
   469  0417                     	;# 
   470  041C                     	;# 
   471  041D                     	;# 
   472  041E                     	;# 
   473  0511                     	;# 
   474  0515                     	;# 
   475  0617                     	;# 
   476  0618                     	;# 
   477  0619                     	;# 
   478  0619                     	;# 
   479  061A                     	;# 
   480  061B                     	;# 
   481  061C                     	;# 
   482  061C                     	;# 
   483  0691                     	;# 
   484  0692                     	;# 
   485  0693                     	;# 
   486  0694                     	;# 
   487  0695                     	;# 
   488  0696                     	;# 
   489  0697                     	;# 
   490  0698                     	;# 
   491  0699                     	;# 
   492  069A                     	;# 
   493  069B                     	;# 
   494  069C                     	;# 
   495  069D                     	;# 
   496  069E                     	;# 
   497  069F                     	;# 
   498  0E0F                     	;# 
   499  0E10                     	;# 
   500  0E11                     	;# 
   501  0E12                     	;# 
   502  0E13                     	;# 
   503  0E14                     	;# 
   504  0E15                     	;# 
   505  0E17                     	;# 
   506  0E20                     	;# 
   507  0E21                     	;# 
   508  0E22                     	;# 
   509  0E24                     	;# 
   510  0E25                     	;# 
   511  0E28                     	;# 
   512  0E29                     	;# 
   513  0E2A                     	;# 
   514  0E2B                     	;# 
   515  0E90                     	;# 
   516  0E91                     	;# 
   517  0E92                     	;# 
   518  0E94                     	;# 
   519  0E95                     	;# 
   520  0EA0                     	;# 
   521  0EA1                     	;# 
   522  0EA2                     	;# 
   523  0EA3                     	;# 
   524  0EA4                     	;# 
   525  0EA5                     	;# 
   526  0F0F                     	;# 
   527  0F10                     	;# 
   528  0F11                     	;# 
   529  0F12                     	;# 
   530  0F13                     	;# 
   531  0F14                     	;# 
   532  0F15                     	;# 
   533  0F16                     	;# 
   534  0F17                     	;# 
   535  0F18                     	;# 
   536  0F19                     	;# 
   537  0F1A                     	;# 
   538  0F1B                     	;# 
   539  0F1C                     	;# 
   540  0F1D                     	;# 
   541  0F1E                     	;# 
   542  0F1F                     	;# 
   543  0F20                     	;# 
   544  0F21                     	;# 
   545  0F22                     	;# 
   546  0F23                     	;# 
   547  0F24                     	;# 
   548  0F25                     	;# 
   549  0F26                     	;# 
   550  0F27                     	;# 
   551  0F28                     	;# 
   552  0F29                     	;# 
   553  0F2A                     	;# 
   554  0F2B                     	;# 
   555  0F2C                     	;# 
   556  0F2D                     	;# 
   557  0F9E                     	;# 
   558  0FE4                     	;# 
   559  0FE5                     	;# 
   560  0FE6                     	;# 
   561  0FE7                     	;# 
   562  0FE8                     	;# 
   563  0FE9                     	;# 
   564  0FEA                     	;# 
   565  0FEB                     	;# 
   566  0FED                     	;# 
   567  0FEE                     	;# 
   568  0FEF                     	;# 
   569  0000                     	;# 
   570  0001                     	;# 
   571  0002                     	;# 
   572  0003                     	;# 
   573  0004                     	;# 
   574  0005                     	;# 
   575  0006                     	;# 
   576  0007                     	;# 
   577  0008                     	;# 
   578  0009                     	;# 
   579  000A                     	;# 
   580  000B                     	;# 
   581  000C                     	;# 
   582  000E                     	;# 
   583  0011                     	;# 
   584  0012                     	;# 
   585  0013                     	;# 
   586  0015                     	;# 
   587  0016                     	;# 
   588  0016                     	;# 
   589  0017                     	;# 
   590  0018                     	;# 
   591  0019                     	;# 
   592  001A                     	;# 
   593  001B                     	;# 
   594  001C                     	;# 
   595  008C                     	;# 
   596  008E                     	;# 
   597  0091                     	;# 
   598  0092                     	;# 
   599  0093                     	;# 
   600  0095                     	;# 
   601  0096                     	;# 
   602  0097                     	;# 
   603  0098                     	;# 
   604  0099                     	;# 
   605  009A                     	;# 
   606  009B                     	;# 
   607  009B                     	;# 
   608  009C                     	;# 
   609  009D                     	;# 
   610  009E                     	;# 
   611  009F                     	;# 
   612  010C                     	;# 
   613  010E                     	;# 
   614  0111                     	;# 
   615  0112                     	;# 
   616  0113                     	;# 
   617  0114                     	;# 
   618  0115                     	;# 
   619  0116                     	;# 
   620  0117                     	;# 
   621  0118                     	;# 
   622  0119                     	;# 
   623  011C                     	;# 
   624  018C                     	;# 
   625  018E                     	;# 
   626  0191                     	;# 
   627  0191                     	;# 
   628  0192                     	;# 
   629  0193                     	;# 
   630  0193                     	;# 
   631  0194                     	;# 
   632  0195                     	;# 
   633  0196                     	;# 
   634  0197                     	;# 
   635  0199                     	;# 
   636  0199                     	;# 
   637  0199                     	;# 
   638  019A                     	;# 
   639  019A                     	;# 
   640  019A                     	;# 
   641  019B                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019C                     	;# 
   647  019C                     	;# 
   648  019C                     	;# 
   649  019D                     	;# 
   650  019D                     	;# 
   651  019D                     	;# 
   652  019E                     	;# 
   653  019E                     	;# 
   654  019E                     	;# 
   655  019F                     	;# 
   656  019F                     	;# 
   657  019F                     	;# 
   658  019F                     	;# 
   659  019F                     	;# 
   660  020C                     	;# 
   661  020E                     	;# 
   662  0211                     	;# 
   663  0211                     	;# 
   664  0212                     	;# 
   665  0212                     	;# 
   666  0213                     	;# 
   667  0213                     	;# 
   668  0214                     	;# 
   669  0214                     	;# 
   670  0215                     	;# 
   671  0215                     	;# 
   672  0215                     	;# 
   673  0215                     	;# 
   674  0216                     	;# 
   675  0216                     	;# 
   676  0217                     	;# 
   677  0217                     	;# 
   678  028C                     	;# 
   679  028E                     	;# 
   680  0291                     	;# 
   681  0291                     	;# 
   682  0292                     	;# 
   683  0293                     	;# 
   684  0293                     	;# 
   685  0298                     	;# 
   686  0298                     	;# 
   687  0299                     	;# 
   688  029A                     	;# 
   689  029A                     	;# 
   690  029E                     	;# 
   691  030C                     	;# 
   692  030E                     	;# 
   693  038C                     	;# 
   694  038E                     	;# 
   695  0391                     	;# 
   696  0392                     	;# 
   697  0393                     	;# 
   698  0397                     	;# 
   699  0398                     	;# 
   700  0399                     	;# 
   701  0415                     	;# 
   702  0416                     	;# 
   703  0417                     	;# 
   704  041C                     	;# 
   705  041D                     	;# 
   706  041E                     	;# 
   707  0511                     	;# 
   708  0515                     	;# 
   709  0617                     	;# 
   710  0618                     	;# 
   711  0619                     	;# 
   712  0619                     	;# 
   713  061A                     	;# 
   714  061B                     	;# 
   715  061C                     	;# 
   716  061C                     	;# 
   717  0691                     	;# 
   718  0692                     	;# 
   719  0693                     	;# 
   720  0694                     	;# 
   721  0695                     	;# 
   722  0696                     	;# 
   723  0697                     	;# 
   724  0698                     	;# 
   725  0699                     	;# 
   726  069A                     	;# 
   727  069B                     	;# 
   728  069C                     	;# 
   729  069D                     	;# 
   730  069E                     	;# 
   731  069F                     	;# 
   732  0E0F                     	;# 
   733  0E10                     	;# 
   734  0E11                     	;# 
   735  0E12                     	;# 
   736  0E13                     	;# 
   737  0E14                     	;# 
   738  0E15                     	;# 
   739  0E17                     	;# 
   740  0E20                     	;# 
   741  0E21                     	;# 
   742  0E22                     	;# 
   743  0E24                     	;# 
   744  0E25                     	;# 
   745  0E28                     	;# 
   746  0E29                     	;# 
   747  0E2A                     	;# 
   748  0E2B                     	;# 
   749  0E90                     	;# 
   750  0E91                     	;# 
   751  0E92                     	;# 
   752  0E94                     	;# 
   753  0E95                     	;# 
   754  0EA0                     	;# 
   755  0EA1                     	;# 
   756  0EA2                     	;# 
   757  0EA3                     	;# 
   758  0EA4                     	;# 
   759  0EA5                     	;# 
   760  0F0F                     	;# 
   761  0F10                     	;# 
   762  0F11                     	;# 
   763  0F12                     	;# 
   764  0F13                     	;# 
   765  0F14                     	;# 
   766  0F15                     	;# 
   767  0F16                     	;# 
   768  0F17                     	;# 
   769  0F18                     	;# 
   770  0F19                     	;# 
   771  0F1A                     	;# 
   772  0F1B                     	;# 
   773  0F1C                     	;# 
   774  0F1D                     	;# 
   775  0F1E                     	;# 
   776  0F1F                     	;# 
   777  0F20                     	;# 
   778  0F21                     	;# 
   779  0F22                     	;# 
   780  0F23                     	;# 
   781  0F24                     	;# 
   782  0F25                     	;# 
   783  0F26                     	;# 
   784  0F27                     	;# 
   785  0F28                     	;# 
   786  0F29                     	;# 
   787  0F2A                     	;# 
   788  0F2B                     	;# 
   789  0F2C                     	;# 
   790  0F2D                     	;# 
   791  0F9E                     	;# 
   792  0FE4                     	;# 
   793  0FE5                     	;# 
   794  0FE6                     	;# 
   795  0FE7                     	;# 
   796  0FE8                     	;# 
   797  0FE9                     	;# 
   798  0FEA                     	;# 
   799  0FEB                     	;# 
   800  0FED                     	;# 
   801  0FEE                     	;# 
   802  0FEF                     	;# 
   803  0000                     	;# 
   804  0001                     	;# 
   805  0002                     	;# 
   806  0003                     	;# 
   807  0004                     	;# 
   808  0005                     	;# 
   809  0006                     	;# 
   810  0007                     	;# 
   811  0008                     	;# 
   812  0009                     	;# 
   813  000A                     	;# 
   814  000B                     	;# 
   815  000C                     	;# 
   816  000E                     	;# 
   817  0011                     	;# 
   818  0012                     	;# 
   819  0013                     	;# 
   820  0015                     	;# 
   821  0016                     	;# 
   822  0016                     	;# 
   823  0017                     	;# 
   824  0018                     	;# 
   825  0019                     	;# 
   826  001A                     	;# 
   827  001B                     	;# 
   828  001C                     	;# 
   829  008C                     	;# 
   830  008E                     	;# 
   831  0091                     	;# 
   832  0092                     	;# 
   833  0093                     	;# 
   834  0095                     	;# 
   835  0096                     	;# 
   836  0097                     	;# 
   837  0098                     	;# 
   838  0099                     	;# 
   839  009A                     	;# 
   840  009B                     	;# 
   841  009B                     	;# 
   842  009C                     	;# 
   843  009D                     	;# 
   844  009E                     	;# 
   845  009F                     	;# 
   846  010C                     	;# 
   847  010E                     	;# 
   848  0111                     	;# 
   849  0112                     	;# 
   850  0113                     	;# 
   851  0114                     	;# 
   852  0115                     	;# 
   853  0116                     	;# 
   854  0117                     	;# 
   855  0118                     	;# 
   856  0119                     	;# 
   857  011C                     	;# 
   858  018C                     	;# 
   859  018E                     	;# 
   860  0191                     	;# 
   861  0191                     	;# 
   862  0192                     	;# 
   863  0193                     	;# 
   864  0193                     	;# 
   865  0194                     	;# 
   866  0195                     	;# 
   867  0196                     	;# 
   868  0197                     	;# 
   869  0199                     	;# 
   870  0199                     	;# 
   871  0199                     	;# 
   872  019A                     	;# 
   873  019A                     	;# 
   874  019A                     	;# 
   875  019B                     	;# 
   876  019B                     	;# 
   877  019B                     	;# 
   878  019B                     	;# 
   879  019B                     	;# 
   880  019C                     	;# 
   881  019C                     	;# 
   882  019C                     	;# 
   883  019D                     	;# 
   884  019D                     	;# 
   885  019D                     	;# 
   886  019E                     	;# 
   887  019E                     	;# 
   888  019E                     	;# 
   889  019F                     	;# 
   890  019F                     	;# 
   891  019F                     	;# 
   892  019F                     	;# 
   893  019F                     	;# 
   894  020C                     	;# 
   895  020E                     	;# 
   896  0211                     	;# 
   897  0211                     	;# 
   898  0212                     	;# 
   899  0212                     	;# 
   900  0213                     	;# 
   901  0213                     	;# 
   902  0214                     	;# 
   903  0214                     	;# 
   904  0215                     	;# 
   905  0215                     	;# 
   906  0215                     	;# 
   907  0215                     	;# 
   908  0216                     	;# 
   909  0216                     	;# 
   910  0217                     	;# 
   911  0217                     	;# 
   912  028C                     	;# 
   913  028E                     	;# 
   914  0291                     	;# 
   915  0291                     	;# 
   916  0292                     	;# 
   917  0293                     	;# 
   918  0293                     	;# 
   919  0298                     	;# 
   920  0298                     	;# 
   921  0299                     	;# 
   922  029A                     	;# 
   923  029A                     	;# 
   924  029E                     	;# 
   925  030C                     	;# 
   926  030E                     	;# 
   927  038C                     	;# 
   928  038E                     	;# 
   929  0391                     	;# 
   930  0392                     	;# 
   931  0393                     	;# 
   932  0397                     	;# 
   933  0398                     	;# 
   934  0399                     	;# 
   935  0415                     	;# 
   936  0416                     	;# 
   937  0417                     	;# 
   938  041C                     	;# 
   939  041D                     	;# 
   940  041E                     	;# 
   941  0511                     	;# 
   942  0515                     	;# 
   943  0617                     	;# 
   944  0618                     	;# 
   945  0619                     	;# 
   946  0619                     	;# 
   947  061A                     	;# 
   948  061B                     	;# 
   949  061C                     	;# 
   950  061C                     	;# 
   951  0691                     	;# 
   952  0692                     	;# 
   953  0693                     	;# 
   954  0694                     	;# 
   955  0695                     	;# 
   956  0696                     	;# 
   957  0697                     	;# 
   958  0698                     	;# 
   959  0699                     	;# 
   960  069A                     	;# 
   961  069B                     	;# 
   962  069C                     	;# 
   963  069D                     	;# 
   964  069E                     	;# 
   965  069F                     	;# 
   966  0E0F                     	;# 
   967  0E10                     	;# 
   968  0E11                     	;# 
   969  0E12                     	;# 
   970  0E13                     	;# 
   971  0E14                     	;# 
   972  0E15                     	;# 
   973  0E17                     	;# 
   974  0E20                     	;# 
   975  0E21                     	;# 
   976  0E22                     	;# 
   977  0E24                     	;# 
   978  0E25                     	;# 
   979  0E28                     	;# 
   980  0E29                     	;# 
   981  0E2A                     	;# 
   982  0E2B                     	;# 
   983  0E90                     	;# 
   984  0E91                     	;# 
   985  0E92                     	;# 
   986  0E94                     	;# 
   987  0E95                     	;# 
   988  0EA0                     	;# 
   989  0EA1                     	;# 
   990  0EA2                     	;# 
   991  0EA3                     	;# 
   992  0EA4                     	;# 
   993  0EA5                     	;# 
   994  0F0F                     	;# 
   995  0F10                     	;# 
   996  0F11                     	;# 
   997  0F12                     	;# 
   998  0F13                     	;# 
   999  0F14                     	;# 
  1000  0F15                     	;# 
  1001  0F16                     	;# 
  1002  0F17                     	;# 
  1003  0F18                     	;# 
  1004  0F19                     	;# 
  1005  0F1A                     	;# 
  1006  0F1B                     	;# 
  1007  0F1C                     	;# 
  1008  0F1D                     	;# 
  1009  0F1E                     	;# 
  1010  0F1F                     	;# 
  1011  0F20                     	;# 
  1012  0F21                     	;# 
  1013  0F22                     	;# 
  1014  0F23                     	;# 
  1015  0F24                     	;# 
  1016  0F25                     	;# 
  1017  0F26                     	;# 
  1018  0F27                     	;# 
  1019  0F28                     	;# 
  1020  0F29                     	;# 
  1021  0F2A                     	;# 
  1022  0F2B                     	;# 
  1023  0F2C                     	;# 
  1024  0F2D                     	;# 
  1025  0F9E                     	;# 
  1026  0FE4                     	;# 
  1027  0FE5                     	;# 
  1028  0FE6                     	;# 
  1029  0FE7                     	;# 
  1030  0FE8                     	;# 
  1031  0FE9                     	;# 
  1032  0FEA                     	;# 
  1033  0FEB                     	;# 
  1034  0FED                     	;# 
  1035  0FEE                     	;# 
  1036  0FEF                     	;# 
  1037  0000                     	;# 
  1038  0001                     	;# 
  1039  0002                     	;# 
  1040  0003                     	;# 
  1041  0004                     	;# 
  1042  0005                     	;# 
  1043  0006                     	;# 
  1044  0007                     	;# 
  1045  0008                     	;# 
  1046  0009                     	;# 
  1047  000A                     	;# 
  1048  000B                     	;# 
  1049  000C                     	;# 
  1050  000E                     	;# 
  1051  0011                     	;# 
  1052  0012                     	;# 
  1053  0013                     	;# 
  1054  0015                     	;# 
  1055  0016                     	;# 
  1056  0016                     	;# 
  1057  0017                     	;# 
  1058  0018                     	;# 
  1059  0019                     	;# 
  1060  001A                     	;# 
  1061  001B                     	;# 
  1062  001C                     	;# 
  1063  008C                     	;# 
  1064  008E                     	;# 
  1065  0091                     	;# 
  1066  0092                     	;# 
  1067  0093                     	;# 
  1068  0095                     	;# 
  1069  0096                     	;# 
  1070  0097                     	;# 
  1071  0098                     	;# 
  1072  0099                     	;# 
  1073  009A                     	;# 
  1074  009B                     	;# 
  1075  009B                     	;# 
  1076  009C                     	;# 
  1077  009D                     	;# 
  1078  009E                     	;# 
  1079  009F                     	;# 
  1080  010C                     	;# 
  1081  010E                     	;# 
  1082  0111                     	;# 
  1083  0112                     	;# 
  1084  0113                     	;# 
  1085  0114                     	;# 
  1086  0115                     	;# 
  1087  0116                     	;# 
  1088  0117                     	;# 
  1089  0118                     	;# 
  1090  0119                     	;# 
  1091  011C                     	;# 
  1092  018C                     	;# 
  1093  018E                     	;# 
  1094  0191                     	;# 
  1095  0191                     	;# 
  1096  0192                     	;# 
  1097  0193                     	;# 
  1098  0193                     	;# 
  1099  0194                     	;# 
  1100  0195                     	;# 
  1101  0196                     	;# 
  1102  0197                     	;# 
  1103  0199                     	;# 
  1104  0199                     	;# 
  1105  0199                     	;# 
  1106  019A                     	;# 
  1107  019A                     	;# 
  1108  019A                     	;# 
  1109  019B                     	;# 
  1110  019B                     	;# 
  1111  019B                     	;# 
  1112  019B                     	;# 
  1113  019B                     	;# 
  1114  019C                     	;# 
  1115  019C                     	;# 
  1116  019C                     	;# 
  1117  019D                     	;# 
  1118  019D                     	;# 
  1119  019D                     	;# 
  1120  019E                     	;# 
  1121  019E                     	;# 
  1122  019E                     	;# 
  1123  019F                     	;# 
  1124  019F                     	;# 
  1125  019F                     	;# 
  1126  019F                     	;# 
  1127  019F                     	;# 
  1128  020C                     	;# 
  1129  020E                     	;# 
  1130  0211                     	;# 
  1131  0211                     	;# 
  1132  0212                     	;# 
  1133  0212                     	;# 
  1134  0213                     	;# 
  1135  0213                     	;# 
  1136  0214                     	;# 
  1137  0214                     	;# 
  1138  0215                     	;# 
  1139  0215                     	;# 
  1140  0215                     	;# 
  1141  0215                     	;# 
  1142  0216                     	;# 
  1143  0216                     	;# 
  1144  0217                     	;# 
  1145  0217                     	;# 
  1146  028C                     	;# 
  1147  028E                     	;# 
  1148  0291                     	;# 
  1149  0291                     	;# 
  1150  0292                     	;# 
  1151  0293                     	;# 
  1152  0293                     	;# 
  1153  0298                     	;# 
  1154  0298                     	;# 
  1155  0299                     	;# 
  1156  029A                     	;# 
  1157  029A                     	;# 
  1158  029E                     	;# 
  1159  030C                     	;# 
  1160  030E                     	;# 
  1161  038C                     	;# 
  1162  038E                     	;# 
  1163  0391                     	;# 
  1164  0392                     	;# 
  1165  0393                     	;# 
  1166  0397                     	;# 
  1167  0398                     	;# 
  1168  0399                     	;# 
  1169  0415                     	;# 
  1170  0416                     	;# 
  1171  0417                     	;# 
  1172  041C                     	;# 
  1173  041D                     	;# 
  1174  041E                     	;# 
  1175  0511                     	;# 
  1176  0515                     	;# 
  1177  0617                     	;# 
  1178  0618                     	;# 
  1179  0619                     	;# 
  1180  0619                     	;# 
  1181  061A                     	;# 
  1182  061B                     	;# 
  1183  061C                     	;# 
  1184  061C                     	;# 
  1185  0691                     	;# 
  1186  0692                     	;# 
  1187  0693                     	;# 
  1188  0694                     	;# 
  1189  0695                     	;# 
  1190  0696                     	;# 
  1191  0697                     	;# 
  1192  0698                     	;# 
  1193  0699                     	;# 
  1194  069A                     	;# 
  1195  069B                     	;# 
  1196  069C                     	;# 
  1197  069D                     	;# 
  1198  069E                     	;# 
  1199  069F                     	;# 
  1200  0E0F                     	;# 
  1201  0E10                     	;# 
  1202  0E11                     	;# 
  1203  0E12                     	;# 
  1204  0E13                     	;# 
  1205  0E14                     	;# 
  1206  0E15                     	;# 
  1207  0E17                     	;# 
  1208  0E20                     	;# 
  1209  0E21                     	;# 
  1210  0E22                     	;# 
  1211  0E24                     	;# 
  1212  0E25                     	;# 
  1213  0E28                     	;# 
  1214  0E29                     	;# 
  1215  0E2A                     	;# 
  1216  0E2B                     	;# 
  1217  0E90                     	;# 
  1218  0E91                     	;# 
  1219  0E92                     	;# 
  1220  0E94                     	;# 
  1221  0E95                     	;# 
  1222  0EA0                     	;# 
  1223  0EA1                     	;# 
  1224  0EA2                     	;# 
  1225  0EA3                     	;# 
  1226  0EA4                     	;# 
  1227  0EA5                     	;# 
  1228  0F0F                     	;# 
  1229  0F10                     	;# 
  1230  0F11                     	;# 
  1231  0F12                     	;# 
  1232  0F13                     	;# 
  1233  0F14                     	;# 
  1234  0F15                     	;# 
  1235  0F16                     	;# 
  1236  0F17                     	;# 
  1237  0F18                     	;# 
  1238  0F19                     	;# 
  1239  0F1A                     	;# 
  1240  0F1B                     	;# 
  1241  0F1C                     	;# 
  1242  0F1D                     	;# 
  1243  0F1E                     	;# 
  1244  0F1F                     	;# 
  1245  0F20                     	;# 
  1246  0F21                     	;# 
  1247  0F22                     	;# 
  1248  0F23                     	;# 
  1249  0F24                     	;# 
  1250  0F25                     	;# 
  1251  0F26                     	;# 
  1252  0F27                     	;# 
  1253  0F28                     	;# 
  1254  0F29                     	;# 
  1255  0F2A                     	;# 
  1256  0F2B                     	;# 
  1257  0F2C                     	;# 
  1258  0F2D                     	;# 
  1259  0F9E                     	;# 
  1260  0FE4                     	;# 
  1261  0FE5                     	;# 
  1262  0FE6                     	;# 
  1263  0FE7                     	;# 
  1264  0FE8                     	;# 
  1265  0FE9                     	;# 
  1266  0FEA                     	;# 
  1267  0FEB                     	;# 
  1268  0FED                     	;# 
  1269  0FEE                     	;# 
  1270  0FEF                     	;# 
  1271  0000                     	;# 
  1272  0001                     	;# 
  1273  0002                     	;# 
  1274  0003                     	;# 
  1275  0004                     	;# 
  1276  0005                     	;# 
  1277  0006                     	;# 
  1278  0007                     	;# 
  1279  0008                     	;# 
  1280  0009                     	;# 
  1281  000A                     	;# 
  1282  000B                     	;# 
  1283  000C                     	;# 
  1284  000E                     	;# 
  1285  0011                     	;# 
  1286  0012                     	;# 
  1287  0013                     	;# 
  1288  0015                     	;# 
  1289  0016                     	;# 
  1290  0016                     	;# 
  1291  0017                     	;# 
  1292  0018                     	;# 
  1293  0019                     	;# 
  1294  001A                     	;# 
  1295  001B                     	;# 
  1296  001C                     	;# 
  1297  008C                     	;# 
  1298  008E                     	;# 
  1299  0091                     	;# 
  1300  0092                     	;# 
  1301  0093                     	;# 
  1302  0095                     	;# 
  1303  0096                     	;# 
  1304  0097                     	;# 
  1305  0098                     	;# 
  1306  0099                     	;# 
  1307  009A                     	;# 
  1308  009B                     	;# 
  1309  009B                     	;# 
  1310  009C                     	;# 
  1311  009D                     	;# 
  1312  009E                     	;# 
  1313  009F                     	;# 
  1314  010C                     	;# 
  1315  010E                     	;# 
  1316  0111                     	;# 
  1317  0112                     	;# 
  1318  0113                     	;# 
  1319  0114                     	;# 
  1320  0115                     	;# 
  1321  0116                     	;# 
  1322  0117                     	;# 
  1323  0118                     	;# 
  1324  0119                     	;# 
  1325  011C                     	;# 
  1326  018C                     	;# 
  1327  018E                     	;# 
  1328  0191                     	;# 
  1329  0191                     	;# 
  1330  0192                     	;# 
  1331  0193                     	;# 
  1332  0193                     	;# 
  1333  0194                     	;# 
  1334  0195                     	;# 
  1335  0196                     	;# 
  1336  0197                     	;# 
  1337  0199                     	;# 
  1338  0199                     	;# 
  1339  0199                     	;# 
  1340  019A                     	;# 
  1341  019A                     	;# 
  1342  019A                     	;# 
  1343  019B                     	;# 
  1344  019B                     	;# 
  1345  019B                     	;# 
  1346  019B                     	;# 
  1347  019B                     	;# 
  1348  019C                     	;# 
  1349  019C                     	;# 
  1350  019C                     	;# 
  1351  019D                     	;# 
  1352  019D                     	;# 
  1353  019D                     	;# 
  1354  019E                     	;# 
  1355  019E                     	;# 
  1356  019E                     	;# 
  1357  019F                     	;# 
  1358  019F                     	;# 
  1359  019F                     	;# 
  1360  019F                     	;# 
  1361  019F                     	;# 
  1362  020C                     	;# 
  1363  020E                     	;# 
  1364  0211                     	;# 
  1365  0211                     	;# 
  1366  0212                     	;# 
  1367  0212                     	;# 
  1368  0213                     	;# 
  1369  0213                     	;# 
  1370  0214                     	;# 
  1371  0214                     	;# 
  1372  0215                     	;# 
  1373  0215                     	;# 
  1374  0215                     	;# 
  1375  0215                     	;# 
  1376  0216                     	;# 
  1377  0216                     	;# 
  1378  0217                     	;# 
  1379  0217                     	;# 
  1380  028C                     	;# 
  1381  028E                     	;# 
  1382  0291                     	;# 
  1383  0291                     	;# 
  1384  0292                     	;# 
  1385  0293                     	;# 
  1386  0293                     	;# 
  1387  0298                     	;# 
  1388  0298                     	;# 
  1389  0299                     	;# 
  1390  029A                     	;# 
  1391  029A                     	;# 
  1392  029E                     	;# 
  1393  030C                     	;# 
  1394  030E                     	;# 
  1395  038C                     	;# 
  1396  038E                     	;# 
  1397  0391                     	;# 
  1398  0392                     	;# 
  1399  0393                     	;# 
  1400  0397                     	;# 
  1401  0398                     	;# 
  1402  0399                     	;# 
  1403  0415                     	;# 
  1404  0416                     	;# 
  1405  0417                     	;# 
  1406  041C                     	;# 
  1407  041D                     	;# 
  1408  041E                     	;# 
  1409  0511                     	;# 
  1410  0515                     	;# 
  1411  0617                     	;# 
  1412  0618                     	;# 
  1413  0619                     	;# 
  1414  0619                     	;# 
  1415  061A                     	;# 
  1416  061B                     	;# 
  1417  061C                     	;# 
  1418  061C                     	;# 
  1419  0691                     	;# 
  1420  0692                     	;# 
  1421  0693                     	;# 
  1422  0694                     	;# 
  1423  0695                     	;# 
  1424  0696                     	;# 
  1425  0697                     	;# 
  1426  0698                     	;# 
  1427  0699                     	;# 
  1428  069A                     	;# 
  1429  069B                     	;# 
  1430  069C                     	;# 
  1431  069D                     	;# 
  1432  069E                     	;# 
  1433  069F                     	;# 
  1434  0E0F                     	;# 
  1435  0E10                     	;# 
  1436  0E11                     	;# 
  1437  0E12                     	;# 
  1438  0E13                     	;# 
  1439  0E14                     	;# 
  1440  0E15                     	;# 
  1441  0E17                     	;# 
  1442  0E20                     	;# 
  1443  0E21                     	;# 
  1444  0E22                     	;# 
  1445  0E24                     	;# 
  1446  0E25                     	;# 
  1447  0E28                     	;# 
  1448  0E29                     	;# 
  1449  0E2A                     	;# 
  1450  0E2B                     	;# 
  1451  0E90                     	;# 
  1452  0E91                     	;# 
  1453  0E92                     	;# 
  1454  0E94                     	;# 
  1455  0E95                     	;# 
  1456  0EA0                     	;# 
  1457  0EA1                     	;# 
  1458  0EA2                     	;# 
  1459  0EA3                     	;# 
  1460  0EA4                     	;# 
  1461  0EA5                     	;# 
  1462  0F0F                     	;# 
  1463  0F10                     	;# 
  1464  0F11                     	;# 
  1465  0F12                     	;# 
  1466  0F13                     	;# 
  1467  0F14                     	;# 
  1468  0F15                     	;# 
  1469  0F16                     	;# 
  1470  0F17                     	;# 
  1471  0F18                     	;# 
  1472  0F19                     	;# 
  1473  0F1A                     	;# 
  1474  0F1B                     	;# 
  1475  0F1C                     	;# 
  1476  0F1D                     	;# 
  1477  0F1E                     	;# 
  1478  0F1F                     	;# 
  1479  0F20                     	;# 
  1480  0F21                     	;# 
  1481  0F22                     	;# 
  1482  0F23                     	;# 
  1483  0F24                     	;# 
  1484  0F25                     	;# 
  1485  0F26                     	;# 
  1486  0F27                     	;# 
  1487  0F28                     	;# 
  1488  0F29                     	;# 
  1489  0F2A                     	;# 
  1490  0F2B                     	;# 
  1491  0F2C                     	;# 
  1492  0F2D                     	;# 
  1493  0F9E                     	;# 
  1494  0FE4                     	;# 
  1495  0FE5                     	;# 
  1496  0FE6                     	;# 
  1497  0FE7                     	;# 
  1498  0FE8                     	;# 
  1499  0FE9                     	;# 
  1500  0FEA                     	;# 
  1501  0FEB                     	;# 
  1502  0FED                     	;# 
  1503  0FEE                     	;# 
  1504  0FEF                     	;# 
  1505  0000                     	;# 
  1506  0001                     	;# 
  1507  0002                     	;# 
  1508  0003                     	;# 
  1509  0004                     	;# 
  1510  0005                     	;# 
  1511  0006                     	;# 
  1512  0007                     	;# 
  1513  0008                     	;# 
  1514  0009                     	;# 
  1515  000A                     	;# 
  1516  000B                     	;# 
  1517  000C                     	;# 
  1518  000E                     	;# 
  1519  0011                     	;# 
  1520  0012                     	;# 
  1521  0013                     	;# 
  1522  0015                     	;# 
  1523  0016                     	;# 
  1524  0016                     	;# 
  1525  0017                     	;# 
  1526  0018                     	;# 
  1527  0019                     	;# 
  1528  001A                     	;# 
  1529  001B                     	;# 
  1530  001C                     	;# 
  1531  008C                     	;# 
  1532  008E                     	;# 
  1533  0091                     	;# 
  1534  0092                     	;# 
  1535  0093                     	;# 
  1536  0095                     	;# 
  1537  0096                     	;# 
  1538  0097                     	;# 
  1539  0098                     	;# 
  1540  0099                     	;# 
  1541  009A                     	;# 
  1542  009B                     	;# 
  1543  009B                     	;# 
  1544  009C                     	;# 
  1545  009D                     	;# 
  1546  009E                     	;# 
  1547  009F                     	;# 
  1548  010C                     	;# 
  1549  010E                     	;# 
  1550  0111                     	;# 
  1551  0112                     	;# 
  1552  0113                     	;# 
  1553  0114                     	;# 
  1554  0115                     	;# 
  1555  0116                     	;# 
  1556  0117                     	;# 
  1557  0118                     	;# 
  1558  0119                     	;# 
  1559  011C                     	;# 
  1560  018C                     	;# 
  1561  018E                     	;# 
  1562  0191                     	;# 
  1563  0191                     	;# 
  1564  0192                     	;# 
  1565  0193                     	;# 
  1566  0193                     	;# 
  1567  0194                     	;# 
  1568  0195                     	;# 
  1569  0196                     	;# 
  1570  0197                     	;# 
  1571  0199                     	;# 
  1572  0199                     	;# 
  1573  0199                     	;# 
  1574  019A                     	;# 
  1575  019A                     	;# 
  1576  019A                     	;# 
  1577  019B                     	;# 
  1578  019B                     	;# 
  1579  019B                     	;# 
  1580  019B                     	;# 
  1581  019B                     	;# 
  1582  019C                     	;# 
  1583  019C                     	;# 
  1584  019C                     	;# 
  1585  019D                     	;# 
  1586  019D                     	;# 
  1587  019D                     	;# 
  1588  019E                     	;# 
  1589  019E                     	;# 
  1590  019E                     	;# 
  1591  019F                     	;# 
  1592  019F                     	;# 
  1593  019F                     	;# 
  1594  019F                     	;# 
  1595  019F                     	;# 
  1596  020C                     	;# 
  1597  020E                     	;# 
  1598  0211                     	;# 
  1599  0211                     	;# 
  1600  0212                     	;# 
  1601  0212                     	;# 
  1602  0213                     	;# 
  1603  0213                     	;# 
  1604  0214                     	;# 
  1605  0214                     	;# 
  1606  0215                     	;# 
  1607  0215                     	;# 
  1608  0215                     	;# 
  1609  0215                     	;# 
  1610  0216                     	;# 
  1611  0216                     	;# 
  1612  0217                     	;# 
  1613  0217                     	;# 
  1614  028C                     	;# 
  1615  028E                     	;# 
  1616  0291                     	;# 
  1617  0291                     	;# 
  1618  0292                     	;# 
  1619  0293                     	;# 
  1620  0293                     	;# 
  1621  0298                     	;# 
  1622  0298                     	;# 
  1623  0299                     	;# 
  1624  029A                     	;# 
  1625  029A                     	;# 
  1626  029E                     	;# 
  1627  030C                     	;# 
  1628  030E                     	;# 
  1629  038C                     	;# 
  1630  038E                     	;# 
  1631  0391                     	;# 
  1632  0392                     	;# 
  1633  0393                     	;# 
  1634  0397                     	;# 
  1635  0398                     	;# 
  1636  0399                     	;# 
  1637  0415                     	;# 
  1638  0416                     	;# 
  1639  0417                     	;# 
  1640  041C                     	;# 
  1641  041D                     	;# 
  1642  041E                     	;# 
  1643  0511                     	;# 
  1644  0515                     	;# 
  1645  0617                     	;# 
  1646  0618                     	;# 
  1647  0619                     	;# 
  1648  0619                     	;# 
  1649  061A                     	;# 
  1650  061B                     	;# 
  1651  061C                     	;# 
  1652  061C                     	;# 
  1653  0691                     	;# 
  1654  0692                     	;# 
  1655  0693                     	;# 
  1656  0694                     	;# 
  1657  0695                     	;# 
  1658  0696                     	;# 
  1659  0697                     	;# 
  1660  0698                     	;# 
  1661  0699                     	;# 
  1662  069A                     	;# 
  1663  069B                     	;# 
  1664  069C                     	;# 
  1665  069D                     	;# 
  1666  069E                     	;# 
  1667  069F                     	;# 
  1668  0E0F                     	;# 
  1669  0E10                     	;# 
  1670  0E11                     	;# 
  1671  0E12                     	;# 
  1672  0E13                     	;# 
  1673  0E14                     	;# 
  1674  0E15                     	;# 
  1675  0E17                     	;# 
  1676  0E20                     	;# 
  1677  0E21                     	;# 
  1678  0E22                     	;# 
  1679  0E24                     	;# 
  1680  0E25                     	;# 
  1681  0E28                     	;# 
  1682  0E29                     	;# 
  1683  0E2A                     	;# 
  1684  0E2B                     	;# 
  1685  0E90                     	;# 
  1686  0E91                     	;# 
  1687  0E92                     	;# 
  1688  0E94                     	;# 
  1689  0E95                     	;# 
  1690  0EA0                     	;# 
  1691  0EA1                     	;# 
  1692  0EA2                     	;# 
  1693  0EA3                     	;# 
  1694  0EA4                     	;# 
  1695  0EA5                     	;# 
  1696  0F0F                     	;# 
  1697  0F10                     	;# 
  1698  0F11                     	;# 
  1699  0F12                     	;# 
  1700  0F13                     	;# 
  1701  0F14                     	;# 
  1702  0F15                     	;# 
  1703  0F16                     	;# 
  1704  0F17                     	;# 
  1705  0F18                     	;# 
  1706  0F19                     	;# 
  1707  0F1A                     	;# 
  1708  0F1B                     	;# 
  1709  0F1C                     	;# 
  1710  0F1D                     	;# 
  1711  0F1E                     	;# 
  1712  0F1F                     	;# 
  1713  0F20                     	;# 
  1714  0F21                     	;# 
  1715  0F22                     	;# 
  1716  0F23                     	;# 
  1717  0F24                     	;# 
  1718  0F25                     	;# 
  1719  0F26                     	;# 
  1720  0F27                     	;# 
  1721  0F28                     	;# 
  1722  0F29                     	;# 
  1723  0F2A                     	;# 
  1724  0F2B                     	;# 
  1725  0F2C                     	;# 
  1726  0F2D                     	;# 
  1727  0F9E                     	;# 
  1728  0FE4                     	;# 
  1729  0FE5                     	;# 
  1730  0FE6                     	;# 
  1731  0FE7                     	;# 
  1732  0FE8                     	;# 
  1733  0FE9                     	;# 
  1734  0FEA                     	;# 
  1735  0FEB                     	;# 
  1736  0FED                     	;# 
  1737  0FEE                     	;# 
  1738  0FEF                     	;# 
  1739  0000                     	;# 
  1740  0001                     	;# 
  1741  0002                     	;# 
  1742  0003                     	;# 
  1743  0004                     	;# 
  1744  0005                     	;# 
  1745  0006                     	;# 
  1746  0007                     	;# 
  1747  0008                     	;# 
  1748  0009                     	;# 
  1749  000A                     	;# 
  1750  000B                     	;# 
  1751  000C                     	;# 
  1752  000E                     	;# 
  1753  0011                     	;# 
  1754  0012                     	;# 
  1755  0013                     	;# 
  1756  0015                     	;# 
  1757  0016                     	;# 
  1758  0016                     	;# 
  1759  0017                     	;# 
  1760  0018                     	;# 
  1761  0019                     	;# 
  1762  001A                     	;# 
  1763  001B                     	;# 
  1764  001C                     	;# 
  1765  008C                     	;# 
  1766  008E                     	;# 
  1767  0091                     	;# 
  1768  0092                     	;# 
  1769  0093                     	;# 
  1770  0095                     	;# 
  1771  0096                     	;# 
  1772  0097                     	;# 
  1773  0098                     	;# 
  1774  0099                     	;# 
  1775  009A                     	;# 
  1776  009B                     	;# 
  1777  009B                     	;# 
  1778  009C                     	;# 
  1779  009D                     	;# 
  1780  009E                     	;# 
  1781  009F                     	;# 
  1782  010C                     	;# 
  1783  010E                     	;# 
  1784  0111                     	;# 
  1785  0112                     	;# 
  1786  0113                     	;# 
  1787  0114                     	;# 
  1788  0115                     	;# 
  1789  0116                     	;# 
  1790  0117                     	;# 
  1791  0118                     	;# 
  1792  0119                     	;# 
  1793  011C                     	;# 
  1794  018C                     	;# 
  1795  018E                     	;# 
  1796  0191                     	;# 
  1797  0191                     	;# 
  1798  0192                     	;# 
  1799  0193                     	;# 
  1800  0193                     	;# 
  1801  0194                     	;# 
  1802  0195                     	;# 
  1803  0196                     	;# 
  1804  0197                     	;# 
  1805  0199                     	;# 
  1806  0199                     	;# 
  1807  0199                     	;# 
  1808  019A                     	;# 
  1809  019A                     	;# 
  1810  019A                     	;# 
  1811  019B                     	;# 
  1812  019B                     	;# 
  1813  019B                     	;# 
  1814  019B                     	;# 
  1815  019B                     	;# 
  1816  019C                     	;# 
  1817  019C                     	;# 
  1818  019C                     	;# 
  1819  019D                     	;# 
  1820  019D                     	;# 
  1821  019D                     	;# 
  1822  019E                     	;# 
  1823  019E                     	;# 
  1824  019E                     	;# 
  1825  019F                     	;# 
  1826  019F                     	;# 
  1827  019F                     	;# 
  1828  019F                     	;# 
  1829  019F                     	;# 
  1830  020C                     	;# 
  1831  020E                     	;# 
  1832  0211                     	;# 
  1833  0211                     	;# 
  1834  0212                     	;# 
  1835  0212                     	;# 
  1836  0213                     	;# 
  1837  0213                     	;# 
  1838  0214                     	;# 
  1839  0214                     	;# 
  1840  0215                     	;# 
  1841  0215                     	;# 
  1842  0215                     	;# 
  1843  0215                     	;# 
  1844  0216                     	;# 
  1845  0216                     	;# 
  1846  0217                     	;# 
  1847  0217                     	;# 
  1848  028C                     	;# 
  1849  028E                     	;# 
  1850  0291                     	;# 
  1851  0291                     	;# 
  1852  0292                     	;# 
  1853  0293                     	;# 
  1854  0293                     	;# 
  1855  0298                     	;# 
  1856  0298                     	;# 
  1857  0299                     	;# 
  1858  029A                     	;# 
  1859  029A                     	;# 
  1860  029E                     	;# 
  1861  030C                     	;# 
  1862  030E                     	;# 
  1863  038C                     	;# 
  1864  038E                     	;# 
  1865  0391                     	;# 
  1866  0392                     	;# 
  1867  0393                     	;# 
  1868  0397                     	;# 
  1869  0398                     	;# 
  1870  0399                     	;# 
  1871  0415                     	;# 
  1872  0416                     	;# 
  1873  0417                     	;# 
  1874  041C                     	;# 
  1875  041D                     	;# 
  1876  041E                     	;# 
  1877  0511                     	;# 
  1878  0515                     	;# 
  1879  0617                     	;# 
  1880  0618                     	;# 
  1881  0619                     	;# 
  1882  0619                     	;# 
  1883  061A                     	;# 
  1884  061B                     	;# 
  1885  061C                     	;# 
  1886  061C                     	;# 
  1887  0691                     	;# 
  1888  0692                     	;# 
  1889  0693                     	;# 
  1890  0694                     	;# 
  1891  0695                     	;# 
  1892  0696                     	;# 
  1893  0697                     	;# 
  1894  0698                     	;# 
  1895  0699                     	;# 
  1896  069A                     	;# 
  1897  069B                     	;# 
  1898  069C                     	;# 
  1899  069D                     	;# 
  1900  069E                     	;# 
  1901  069F                     	;# 
  1902  0E0F                     	;# 
  1903  0E10                     	;# 
  1904  0E11                     	;# 
  1905  0E12                     	;# 
  1906  0E13                     	;# 
  1907  0E14                     	;# 
  1908  0E15                     	;# 
  1909  0E17                     	;# 
  1910  0E20                     	;# 
  1911  0E21                     	;# 
  1912  0E22                     	;# 
  1913  0E24                     	;# 
  1914  0E25                     	;# 
  1915  0E28                     	;# 
  1916  0E29                     	;# 
  1917  0E2A                     	;# 
  1918  0E2B                     	;# 
  1919  0E90                     	;# 
  1920  0E91                     	;# 
  1921  0E92                     	;# 
  1922  0E94                     	;# 
  1923  0E95                     	;# 
  1924  0EA0                     	;# 
  1925  0EA1                     	;# 
  1926  0EA2                     	;# 
  1927  0EA3                     	;# 
  1928  0EA4                     	;# 
  1929  0EA5                     	;# 
  1930  0F0F                     	;# 
  1931  0F10                     	;# 
  1932  0F11                     	;# 
  1933  0F12                     	;# 
  1934  0F13                     	;# 
  1935  0F14                     	;# 
  1936  0F15                     	;# 
  1937  0F16                     	;# 
  1938  0F17                     	;# 
  1939  0F18                     	;# 
  1940  0F19                     	;# 
  1941  0F1A                     	;# 
  1942  0F1B                     	;# 
  1943  0F1C                     	;# 
  1944  0F1D                     	;# 
  1945  0F1E                     	;# 
  1946  0F1F                     	;# 
  1947  0F20                     	;# 
  1948  0F21                     	;# 
  1949  0F22                     	;# 
  1950  0F23                     	;# 
  1951  0F24                     	;# 
  1952  0F25                     	;# 
  1953  0F26                     	;# 
  1954  0F27                     	;# 
  1955  0F28                     	;# 
  1956  0F29                     	;# 
  1957  0F2A                     	;# 
  1958  0F2B                     	;# 
  1959  0F2C                     	;# 
  1960  0F2D                     	;# 
  1961  0F9E                     	;# 
  1962  0FE4                     	;# 
  1963  0FE5                     	;# 
  1964  0FE6                     	;# 
  1965  0FE7                     	;# 
  1966  0FE8                     	;# 
  1967  0FE9                     	;# 
  1968  0FEA                     	;# 
  1969  0FEB                     	;# 
  1970  0FED                     	;# 
  1971  0FEE                     	;# 
  1972  0FEF                     	;# 
  1973  0000                     	;# 
  1974  0001                     	;# 
  1975  0002                     	;# 
  1976  0003                     	;# 
  1977  0004                     	;# 
  1978  0005                     	;# 
  1979  0006                     	;# 
  1980  0007                     	;# 
  1981  0008                     	;# 
  1982  0009                     	;# 
  1983  000A                     	;# 
  1984  000B                     	;# 
  1985  000C                     	;# 
  1986  000E                     	;# 
  1987  0011                     	;# 
  1988  0012                     	;# 
  1989  0013                     	;# 
  1990  0015                     	;# 
  1991  0016                     	;# 
  1992  0016                     	;# 
  1993  0017                     	;# 
  1994  0018                     	;# 
  1995  0019                     	;# 
  1996  001A                     	;# 
  1997  001B                     	;# 
  1998  001C                     	;# 
  1999  008C                     	;# 
  2000  008E                     	;# 
  2001  0091                     	;# 
  2002  0092                     	;# 
  2003  0093                     	;# 
  2004  0095                     	;# 
  2005  0096                     	;# 
  2006  0097                     	;# 
  2007  0098                     	;# 
  2008  0099                     	;# 
  2009  009A                     	;# 
  2010  009B                     	;# 
  2011  009B                     	;# 
  2012  009C                     	;# 
  2013  009D                     	;# 
  2014  009E                     	;# 
  2015  009F                     	;# 
  2016  010C                     	;# 
  2017  010E                     	;# 
  2018  0111                     	;# 
  2019  0112                     	;# 
  2020  0113                     	;# 
  2021  0114                     	;# 
  2022  0115                     	;# 
  2023  0116                     	;# 
  2024  0117                     	;# 
  2025  0118                     	;# 
  2026  0119                     	;# 
  2027  011C                     	;# 
  2028  018C                     	;# 
  2029  018E                     	;# 
  2030  0191                     	;# 
  2031  0191                     	;# 
  2032  0192                     	;# 
  2033  0193                     	;# 
  2034  0193                     	;# 
  2035  0194                     	;# 
  2036  0195                     	;# 
  2037  0196                     	;# 
  2038  0197                     	;# 
  2039  0199                     	;# 
  2040  0199                     	;# 
  2041  0199                     	;# 
  2042  019A                     	;# 
  2043  019A                     	;# 
  2044  019A                     	;# 
  2045  019B                     	;# 
  2046  019B                     	;# 
  2047  019B                     	;# 
  2048  019B                     	;# 
  2049  019B                     	;# 
  2050  019C                     	;# 
  2051  019C                     	;# 
  2052  019C                     	;# 
  2053  019D                     	;# 
  2054  019D                     	;# 
  2055  019D                     	;# 
  2056  019E                     	;# 
  2057  019E                     	;# 
  2058  019E                     	;# 
  2059  019F                     	;# 
  2060  019F                     	;# 
  2061  019F                     	;# 
  2062  019F                     	;# 
  2063  019F                     	;# 
  2064  020C                     	;# 
  2065  020E                     	;# 
  2066  0211                     	;# 
  2067  0211                     	;# 
  2068  0212                     	;# 
  2069  0212                     	;# 
  2070  0213                     	;# 
  2071  0213                     	;# 
  2072  0214                     	;# 
  2073  0214                     	;# 
  2074  0215                     	;# 
  2075  0215                     	;# 
  2076  0215                     	;# 
  2077  0215                     	;# 
  2078  0216                     	;# 
  2079  0216                     	;# 
  2080  0217                     	;# 
  2081  0217                     	;# 
  2082  028C                     	;# 
  2083  028E                     	;# 
  2084  0291                     	;# 
  2085  0291                     	;# 
  2086  0292                     	;# 
  2087  0293                     	;# 
  2088  0293                     	;# 
  2089  0298                     	;# 
  2090  0298                     	;# 
  2091  0299                     	;# 
  2092  029A                     	;# 
  2093  029A                     	;# 
  2094  029E                     	;# 
  2095  030C                     	;# 
  2096  030E                     	;# 
  2097  038C                     	;# 
  2098  038E                     	;# 
  2099  0391                     	;# 
  2100  0392                     	;# 
  2101  0393                     	;# 
  2102  0397                     	;# 
  2103  0398                     	;# 
  2104  0399                     	;# 
  2105  0415                     	;# 
  2106  0416                     	;# 
  2107  0417                     	;# 
  2108  041C                     	;# 
  2109  041D                     	;# 
  2110  041E                     	;# 
  2111  0511                     	;# 
  2112  0515                     	;# 
  2113  0617                     	;# 
  2114  0618                     	;# 
  2115  0619                     	;# 
  2116  0619                     	;# 
  2117  061A                     	;# 
  2118  061B                     	;# 
  2119  061C                     	;# 
  2120  061C                     	;# 
  2121  0691                     	;# 
  2122  0692                     	;# 
  2123  0693                     	;# 
  2124  0694                     	;# 
  2125  0695                     	;# 
  2126  0696                     	;# 
  2127  0697                     	;# 
  2128  0698                     	;# 
  2129  0699                     	;# 
  2130  069A                     	;# 
  2131  069B                     	;# 
  2132  069C                     	;# 
  2133  069D                     	;# 
  2134  069E                     	;# 
  2135  069F                     	;# 
  2136  0E0F                     	;# 
  2137  0E10                     	;# 
  2138  0E11                     	;# 
  2139  0E12                     	;# 
  2140  0E13                     	;# 
  2141  0E14                     	;# 
  2142  0E15                     	;# 
  2143  0E17                     	;# 
  2144  0E20                     	;# 
  2145  0E21                     	;# 
  2146  0E22                     	;# 
  2147  0E24                     	;# 
  2148  0E25                     	;# 
  2149  0E28                     	;# 
  2150  0E29                     	;# 
  2151  0E2A                     	;# 
  2152  0E2B                     	;# 
  2153  0E90                     	;# 
  2154  0E91                     	;# 
  2155  0E92                     	;# 
  2156  0E94                     	;# 
  2157  0E95                     	;# 
  2158  0EA0                     	;# 
  2159  0EA1                     	;# 
  2160  0EA2                     	;# 
  2161  0EA3                     	;# 
  2162  0EA4                     	;# 
  2163  0EA5                     	;# 
  2164  0F0F                     	;# 
  2165  0F10                     	;# 
  2166  0F11                     	;# 
  2167  0F12                     	;# 
  2168  0F13                     	;# 
  2169  0F14                     	;# 
  2170  0F15                     	;# 
  2171  0F16                     	;# 
  2172  0F17                     	;# 
  2173  0F18                     	;# 
  2174  0F19                     	;# 
  2175  0F1A                     	;# 
  2176  0F1B                     	;# 
  2177  0F1C                     	;# 
  2178  0F1D                     	;# 
  2179  0F1E                     	;# 
  2180  0F1F                     	;# 
  2181  0F20                     	;# 
  2182  0F21                     	;# 
  2183  0F22                     	;# 
  2184  0F23                     	;# 
  2185  0F24                     	;# 
  2186  0F25                     	;# 
  2187  0F26                     	;# 
  2188  0F27                     	;# 
  2189  0F28                     	;# 
  2190  0F29                     	;# 
  2191  0F2A                     	;# 
  2192  0F2B                     	;# 
  2193  0F2C                     	;# 
  2194  0F2D                     	;# 
  2195  0F9E                     	;# 
  2196  0FE4                     	;# 
  2197  0FE5                     	;# 
  2198  0FE6                     	;# 
  2199  0FE7                     	;# 
  2200  0FE8                     	;# 
  2201  0FE9                     	;# 
  2202  0FEA                     	;# 
  2203  0FEB                     	;# 
  2204  0FED                     	;# 
  2205  0FEE                     	;# 
  2206  0FEF                     	;# 
  2207  0000                     	;# 
  2208  0001                     	;# 
  2209  0002                     	;# 
  2210  0003                     	;# 
  2211  0004                     	;# 
  2212  0005                     	;# 
  2213  0006                     	;# 
  2214  0007                     	;# 
  2215  0008                     	;# 
  2216  0009                     	;# 
  2217  000A                     	;# 
  2218  000B                     	;# 
  2219  000C                     	;# 
  2220  000E                     	;# 
  2221  0011                     	;# 
  2222  0012                     	;# 
  2223  0013                     	;# 
  2224  0015                     	;# 
  2225  0016                     	;# 
  2226  0016                     	;# 
  2227  0017                     	;# 
  2228  0018                     	;# 
  2229  0019                     	;# 
  2230  001A                     	;# 
  2231  001B                     	;# 
  2232  001C                     	;# 
  2233  008C                     	;# 
  2234  008E                     	;# 
  2235  0091                     	;# 
  2236  0092                     	;# 
  2237  0093                     	;# 
  2238  0095                     	;# 
  2239  0096                     	;# 
  2240  0097                     	;# 
  2241  0098                     	;# 
  2242  0099                     	;# 
  2243  009A                     	;# 
  2244  009B                     	;# 
  2245  009B                     	;# 
  2246  009C                     	;# 
  2247  009D                     	;# 
  2248  009E                     	;# 
  2249  009F                     	;# 
  2250  010C                     	;# 
  2251  010E                     	;# 
  2252  0111                     	;# 
  2253  0112                     	;# 
  2254  0113                     	;# 
  2255  0114                     	;# 
  2256  0115                     	;# 
  2257  0116                     	;# 
  2258  0117                     	;# 
  2259  0118                     	;# 
  2260  0119                     	;# 
  2261  011C                     	;# 
  2262  018C                     	;# 
  2263  018E                     	;# 
  2264  0191                     	;# 
  2265  0191                     	;# 
  2266  0192                     	;# 
  2267  0193                     	;# 
  2268  0193                     	;# 
  2269  0194                     	;# 
  2270  0195                     	;# 
  2271  0196                     	;# 
  2272  0197                     	;# 
  2273  0199                     	;# 
  2274  0199                     	;# 
  2275  0199                     	;# 
  2276  019A                     	;# 
  2277  019A                     	;# 
  2278  019A                     	;# 
  2279  019B                     	;# 
  2280  019B                     	;# 
  2281  019B                     	;# 
  2282  019B                     	;# 
  2283  019B                     	;# 
  2284  019C                     	;# 
  2285  019C                     	;# 
  2286  019C                     	;# 
  2287  019D                     	;# 
  2288  019D                     	;# 
  2289  019D                     	;# 
  2290  019E                     	;# 
  2291  019E                     	;# 
  2292  019E                     	;# 
  2293  019F                     	;# 
  2294  019F                     	;# 
  2295  019F                     	;# 
  2296  019F                     	;# 
  2297  019F                     	;# 
  2298  020C                     	;# 
  2299  020E                     	;# 
  2300  0211                     	;# 
  2301  0211                     	;# 
  2302  0212                     	;# 
  2303  0212                     	;# 
  2304  0213                     	;# 
  2305  0213                     	;# 
  2306  0214                     	;# 
  2307  0214                     	;# 
  2308  0215                     	;# 
  2309  0215                     	;# 
  2310  0215                     	;# 
  2311  0215                     	;# 
  2312  0216                     	;# 
  2313  0216                     	;# 
  2314  0217                     	;# 
  2315  0217                     	;# 
  2316  028C                     	;# 
  2317  028E                     	;# 
  2318  0291                     	;# 
  2319  0291                     	;# 
  2320  0292                     	;# 
  2321  0293                     	;# 
  2322  0293                     	;# 
  2323  0298                     	;# 
  2324  0298                     	;# 
  2325  0299                     	;# 
  2326  029A                     	;# 
  2327  029A                     	;# 
  2328  029E                     	;# 
  2329  030C                     	;# 
  2330  030E                     	;# 
  2331  038C                     	;# 
  2332  038E                     	;# 
  2333  0391                     	;# 
  2334  0392                     	;# 
  2335  0393                     	;# 
  2336  0397                     	;# 
  2337  0398                     	;# 
  2338  0399                     	;# 
  2339  0415                     	;# 
  2340  0416                     	;# 
  2341  0417                     	;# 
  2342  041C                     	;# 
  2343  041D                     	;# 
  2344  041E                     	;# 
  2345  0511                     	;# 
  2346  0515                     	;# 
  2347  0617                     	;# 
  2348  0618                     	;# 
  2349  0619                     	;# 
  2350  0619                     	;# 
  2351  061A                     	;# 
  2352  061B                     	;# 
  2353  061C                     	;# 
  2354  061C                     	;# 
  2355  0691                     	;# 
  2356  0692                     	;# 
  2357  0693                     	;# 
  2358  0694                     	;# 
  2359  0695                     	;# 
  2360  0696                     	;# 
  2361  0697                     	;# 
  2362  0698                     	;# 
  2363  0699                     	;# 
  2364  069A                     	;# 
  2365  069B                     	;# 
  2366  069C                     	;# 
  2367  069D                     	;# 
  2368  069E                     	;# 
  2369  069F                     	;# 
  2370  0E0F                     	;# 
  2371  0E10                     	;# 
  2372  0E11                     	;# 
  2373  0E12                     	;# 
  2374  0E13                     	;# 
  2375  0E14                     	;# 
  2376  0E15                     	;# 
  2377  0E17                     	;# 
  2378  0E20                     	;# 
  2379  0E21                     	;# 
  2380  0E22                     	;# 
  2381  0E24                     	;# 
  2382  0E25                     	;# 
  2383  0E28                     	;# 
  2384  0E29                     	;# 
  2385  0E2A                     	;# 
  2386  0E2B                     	;# 
  2387  0E90                     	;# 
  2388  0E91                     	;# 
  2389  0E92                     	;# 
  2390  0E94                     	;# 
  2391  0E95                     	;# 
  2392  0EA0                     	;# 
  2393  0EA1                     	;# 
  2394  0EA2                     	;# 
  2395  0EA3                     	;# 
  2396  0EA4                     	;# 
  2397  0EA5                     	;# 
  2398  0F0F                     	;# 
  2399  0F10                     	;# 
  2400  0F11                     	;# 
  2401  0F12                     	;# 
  2402  0F13                     	;# 
  2403  0F14                     	;# 
  2404  0F15                     	;# 
  2405  0F16                     	;# 
  2406  0F17                     	;# 
  2407  0F18                     	;# 
  2408  0F19                     	;# 
  2409  0F1A                     	;# 
  2410  0F1B                     	;# 
  2411  0F1C                     	;# 
  2412  0F1D                     	;# 
  2413  0F1E                     	;# 
  2414  0F1F                     	;# 
  2415  0F20                     	;# 
  2416  0F21                     	;# 
  2417  0F22                     	;# 
  2418  0F23                     	;# 
  2419  0F24                     	;# 
  2420  0F25                     	;# 
  2421  0F26                     	;# 
  2422  0F27                     	;# 
  2423  0F28                     	;# 
  2424  0F29                     	;# 
  2425  0F2A                     	;# 
  2426  0F2B                     	;# 
  2427  0F2C                     	;# 
  2428  0F2D                     	;# 
  2429  0F9E                     	;# 
  2430  0FE4                     	;# 
  2431  0FE5                     	;# 
  2432  0FE6                     	;# 
  2433  0FE7                     	;# 
  2434  0FE8                     	;# 
  2435  0FE9                     	;# 
  2436  0FEA                     	;# 
  2437  0FEB                     	;# 
  2438  0FED                     	;# 
  2439  0FEE                     	;# 
  2440  0FEF                     	;# 
  2441  0000                     	;# 
  2442  0001                     	;# 
  2443  0002                     	;# 
  2444  0003                     	;# 
  2445  0004                     	;# 
  2446  0005                     	;# 
  2447  0006                     	;# 
  2448  0007                     	;# 
  2449  0008                     	;# 
  2450  0009                     	;# 
  2451  000A                     	;# 
  2452  000B                     	;# 
  2453  000C                     	;# 
  2454  000E                     	;# 
  2455  0011                     	;# 
  2456  0012                     	;# 
  2457  0013                     	;# 
  2458  0015                     	;# 
  2459  0016                     	;# 
  2460  0016                     	;# 
  2461  0017                     	;# 
  2462  0018                     	;# 
  2463  0019                     	;# 
  2464  001A                     	;# 
  2465  001B                     	;# 
  2466  001C                     	;# 
  2467  008C                     	;# 
  2468  008E                     	;# 
  2469  0091                     	;# 
  2470  0092                     	;# 
  2471  0093                     	;# 
  2472  0095                     	;# 
  2473  0096                     	;# 
  2474  0097                     	;# 
  2475  0098                     	;# 
  2476  0099                     	;# 
  2477  009A                     	;# 
  2478  009B                     	;# 
  2479  009B                     	;# 
  2480  009C                     	;# 
  2481  009D                     	;# 
  2482  009E                     	;# 
  2483  009F                     	;# 
  2484  010C                     	;# 
  2485  010E                     	;# 
  2486  0111                     	;# 
  2487  0112                     	;# 
  2488  0113                     	;# 
  2489  0114                     	;# 
  2490  0115                     	;# 
  2491  0116                     	;# 
  2492  0117                     	;# 
  2493  0118                     	;# 
  2494  0119                     	;# 
  2495  011C                     	;# 
  2496  018C                     	;# 
  2497  018E                     	;# 
  2498  0191                     	;# 
  2499  0191                     	;# 
  2500  0192                     	;# 
  2501  0193                     	;# 
  2502  0193                     	;# 
  2503  0194                     	;# 
  2504  0195                     	;# 
  2505  0196                     	;# 
  2506  0197                     	;# 
  2507  0199                     	;# 
  2508  0199                     	;# 
  2509  0199                     	;# 
  2510  019A                     	;# 
  2511  019A                     	;# 
  2512  019A                     	;# 
  2513  019B                     	;# 
  2514  019B                     	;# 
  2515  019B                     	;# 
  2516  019B                     	;# 
  2517  019B                     	;# 
  2518  019C                     	;# 
  2519  019C                     	;# 
  2520  019C                     	;# 
  2521  019D                     	;# 
  2522  019D                     	;# 
  2523  019D                     	;# 
  2524  019E                     	;# 
  2525  019E                     	;# 
  2526  019E                     	;# 
  2527  019F                     	;# 
  2528  019F                     	;# 
  2529  019F                     	;# 
  2530  019F                     	;# 
  2531  019F                     	;# 
  2532  020C                     	;# 
  2533  020E                     	;# 
  2534  0211                     	;# 
  2535  0211                     	;# 
  2536  0212                     	;# 
  2537  0212                     	;# 
  2538  0213                     	;# 
  2539  0213                     	;# 
  2540  0214                     	;# 
  2541  0214                     	;# 
  2542  0215                     	;# 
  2543  0215                     	;# 
  2544  0215                     	;# 
  2545  0215                     	;# 
  2546  0216                     	;# 
  2547  0216                     	;# 
  2548  0217                     	;# 
  2549  0217                     	;# 
  2550  028C                     	;# 
  2551  028E                     	;# 
  2552  0291                     	;# 
  2553  0291                     	;# 
  2554  0292                     	;# 
  2555  0293                     	;# 
  2556  0293                     	;# 
  2557  0298                     	;# 
  2558  0298                     	;# 
  2559  0299                     	;# 
  2560  029A                     	;# 
  2561  029A                     	;# 
  2562  029E                     	;# 
  2563  030C                     	;# 
  2564  030E                     	;# 
  2565  038C                     	;# 
  2566  038E                     	;# 
  2567  0391                     	;# 
  2568  0392                     	;# 
  2569  0393                     	;# 
  2570  0397                     	;# 
  2571  0398                     	;# 
  2572  0399                     	;# 
  2573  0415                     	;# 
  2574  0416                     	;# 
  2575  0417                     	;# 
  2576  041C                     	;# 
  2577  041D                     	;# 
  2578  041E                     	;# 
  2579  0511                     	;# 
  2580  0515                     	;# 
  2581  0617                     	;# 
  2582  0618                     	;# 
  2583  0619                     	;# 
  2584  0619                     	;# 
  2585  061A                     	;# 
  2586  061B                     	;# 
  2587  061C                     	;# 
  2588  061C                     	;# 
  2589  0691                     	;# 
  2590  0692                     	;# 
  2591  0693                     	;# 
  2592  0694                     	;# 
  2593  0695                     	;# 
  2594  0696                     	;# 
  2595  0697                     	;# 
  2596  0698                     	;# 
  2597  0699                     	;# 
  2598  069A                     	;# 
  2599  069B                     	;# 
  2600  069C                     	;# 
  2601  069D                     	;# 
  2602  069E                     	;# 
  2603  069F                     	;# 
  2604  0E0F                     	;# 
  2605  0E10                     	;# 
  2606  0E11                     	;# 
  2607  0E12                     	;# 
  2608  0E13                     	;# 
  2609  0E14                     	;# 
  2610  0E15                     	;# 
  2611  0E17                     	;# 
  2612  0E20                     	;# 
  2613  0E21                     	;# 
  2614  0E22                     	;# 
  2615  0E24                     	;# 
  2616  0E25                     	;# 
  2617  0E28                     	;# 
  2618  0E29                     	;# 
  2619  0E2A                     	;# 
  2620  0E2B                     	;# 
  2621  0E90                     	;# 
  2622  0E91                     	;# 
  2623  0E92                     	;# 
  2624  0E94                     	;# 
  2625  0E95                     	;# 
  2626  0EA0                     	;# 
  2627  0EA1                     	;# 
  2628  0EA2                     	;# 
  2629  0EA3                     	;# 
  2630  0EA4                     	;# 
  2631  0EA5                     	;# 
  2632  0F0F                     	;# 
  2633  0F10                     	;# 
  2634  0F11                     	;# 
  2635  0F12                     	;# 
  2636  0F13                     	;# 
  2637  0F14                     	;# 
  2638  0F15                     	;# 
  2639  0F16                     	;# 
  2640  0F17                     	;# 
  2641  0F18                     	;# 
  2642  0F19                     	;# 
  2643  0F1A                     	;# 
  2644  0F1B                     	;# 
  2645  0F1C                     	;# 
  2646  0F1D                     	;# 
  2647  0F1E                     	;# 
  2648  0F1F                     	;# 
  2649  0F20                     	;# 
  2650  0F21                     	;# 
  2651  0F22                     	;# 
  2652  0F23                     	;# 
  2653  0F24                     	;# 
  2654  0F25                     	;# 
  2655  0F26                     	;# 
  2656  0F27                     	;# 
  2657  0F28                     	;# 
  2658  0F29                     	;# 
  2659  0F2A                     	;# 
  2660  0F2B                     	;# 
  2661  0F2C                     	;# 
  2662  0F2D                     	;# 
  2663  0F9E                     	;# 
  2664  0FE4                     	;# 
  2665  0FE5                     	;# 
  2666  0FE6                     	;# 
  2667  0FE7                     	;# 
  2668  0FE8                     	;# 
  2669  0FE9                     	;# 
  2670  0FEA                     	;# 
  2671  0FEB                     	;# 
  2672  0FED                     	;# 
  2673  0FEE                     	;# 
  2674  0FEF                     	;# 
  2675                           
  2676                           	psect	idataBANK1
  2677  06FC                     __pidataBANK1:	
  2678                           
  2679                           ;initializer for _MEM
  2680  06FC  3400               	retlw	0
  2681  06FD  3400               	retlw	0
  2682  06FE  3480               	retlw	128
  2683  06FF  3425               	retlw	37
  2684                           
  2685                           	psect	idataBANK4
  2686  18D7                     __pidataBANK4:	
  2687                           
  2688                           ;initializer for _BAUD
  2689  18D7  3480               	retlw	128
  2690  18D8  3425               	retlw	37
  2691  18D9  3400               	retlw	0
  2692  18DA  3400               	retlw	0
  2693                           
  2694                           	psect	stringtext
  2695  0700                     __pstringtext:	
  2696  0700                     _ScanCodeFunctionNoE0:	
  2697  0700  3400               	retlw	0
  2698  0701  3411               	retlw	17
  2699  0702  3400               	retlw	0
  2700  0703  340C               	retlw	12
  2701  0704  340A               	retlw	10
  2702  0705  3406               	retlw	6
  2703  0706  3407               	retlw	7
  2704  0707  3414               	retlw	20
  2705  0708  3400               	retlw	0
  2706  0709  3412               	retlw	18
  2707  070A  3410               	retlw	16
  2708  070B  340E               	retlw	14
  2709  070C  340B               	retlw	11
  2710  070D  3400               	retlw	0
  2711  070E  3400               	retlw	0
  2712  070F  3400               	retlw	0
  2713  0710  3400               	retlw	0
  2714  0711  341C               	retlw	28
  2715  0712  3400               	retlw	0
  2716  0713  3400               	retlw	0
  2717  0714  341A               	retlw	26
  2718  0715  3400               	retlw	0
  2719  0716  3400               	retlw	0
  2720  0717  3400               	retlw	0
  2721  0718  3400               	retlw	0
  2722  0719  3400               	retlw	0
  2723  071A  3400               	retlw	0
  2724  071B  3400               	retlw	0
  2725  071C  3400               	retlw	0
  2726  071D  3400               	retlw	0
  2727  071E  3400               	retlw	0
  2728  071F  3400               	retlw	0
  2729  0720  3400               	retlw	0
  2730  0721  3400               	retlw	0
  2731  0722  3400               	retlw	0
  2732  0723  3400               	retlw	0
  2733  0724  3400               	retlw	0
  2734  0725  3400               	retlw	0
  2735  0726  3400               	retlw	0
  2736  0727  3400               	retlw	0
  2737  0728  3400               	retlw	0
  2738  0729  3400               	retlw	0
  2739  072A  3400               	retlw	0
  2740  072B  3400               	retlw	0
  2741  072C  3400               	retlw	0
  2742  072D  3400               	retlw	0
  2743  072E  3400               	retlw	0
  2744  072F  3400               	retlw	0
  2745  0730  3400               	retlw	0
  2746  0731  3400               	retlw	0
  2747  0732  3400               	retlw	0
  2748  0733  3400               	retlw	0
  2749  0734  3400               	retlw	0
  2750  0735  3400               	retlw	0
  2751  0736  3400               	retlw	0
  2752  0737  3400               	retlw	0
  2753  0738  3400               	retlw	0
  2754  0739  3400               	retlw	0
  2755  073A  3400               	retlw	0
  2756  073B  3400               	retlw	0
  2757  073C  3400               	retlw	0
  2758  073D  3400               	retlw	0
  2759  073E  3400               	retlw	0
  2760  073F  3400               	retlw	0
  2761  0740  3400               	retlw	0
  2762  0741  3400               	retlw	0
  2763  0742  3400               	retlw	0
  2764  0743  3400               	retlw	0
  2765  0744  3400               	retlw	0
  2766  0745  3400               	retlw	0
  2767  0746  3400               	retlw	0
  2768  0747  3400               	retlw	0
  2769  0748  3400               	retlw	0
  2770  0749  3400               	retlw	0
  2771  074A  3400               	retlw	0
  2772  074B  3400               	retlw	0
  2773  074C  3400               	retlw	0
  2774  074D  3400               	retlw	0
  2775  074E  3400               	retlw	0
  2776  074F  3400               	retlw	0
  2777  0750  3400               	retlw	0
  2778  0751  3400               	retlw	0
  2779  0752  3400               	retlw	0
  2780  0753  3400               	retlw	0
  2781  0754  3400               	retlw	0
  2782  0755  3400               	retlw	0
  2783  0756  3400               	retlw	0
  2784  0757  3400               	retlw	0
  2785  0758  3400               	retlw	0
  2786  0759  3400               	retlw	0
  2787  075A  3400               	retlw	0
  2788  075B  3400               	retlw	0
  2789  075C  3400               	retlw	0
  2790  075D  3400               	retlw	0
  2791  075E  3400               	retlw	0
  2792  075F  3400               	retlw	0
  2793  0760  3400               	retlw	0
  2794  0761  3400               	retlw	0
  2795  0762  3400               	retlw	0
  2796  0763  3400               	retlw	0
  2797  0764  3400               	retlw	0
  2798  0765  3400               	retlw	0
  2799  0766  3400               	retlw	0
  2800  0767  3400               	retlw	0
  2801  0768  3400               	retlw	0
  2802  0769  3400               	retlw	0
  2803  076A  3400               	retlw	0
  2804  076B  3400               	retlw	0
  2805  076C  3400               	retlw	0
  2806  076D  3400               	retlw	0
  2807  076E  3400               	retlw	0
  2808  076F  3400               	retlw	0
  2809  0770  3400               	retlw	0
  2810  0771  3400               	retlw	0
  2811  0772  3400               	retlw	0
  2812  0773  3400               	retlw	0
  2813  0774  3400               	retlw	0
  2814  0775  3400               	retlw	0
  2815  0776  3400               	retlw	0
  2816  0777  3400               	retlw	0
  2817  0778  3413               	retlw	19
  2818  0779  3400               	retlw	0
  2819  077A  3400               	retlw	0
  2820  077B  3400               	retlw	0
  2821  077C  3400               	retlw	0
  2822  077D  3400               	retlw	0
  2823  077E  3400               	retlw	0
  2824  077F  3400               	retlw	0
  2825  0780  3400               	retlw	0
  2826  0781  3400               	retlw	0
  2827  0782  3400               	retlw	0
  2828  0783  340F               	retlw	15
  2829  0784                     __end_of_ScanCodeFunctionNoE0:	
  2830  0784                     _ScanCode:	
  2831  0784  3409               	retlw	9
  2832  0785  3460               	retlw	96
  2833  0786  3400               	retlw	0
  2834  0787  3400               	retlw	0
  2835  0788  3400               	retlw	0
  2836  0789  3400               	retlw	0
  2837  078A  3400               	retlw	0
  2838  078B  3400               	retlw	0
  2839  078C  3471               	retlw	113
  2840  078D  3431               	retlw	49
  2841  078E  3400               	retlw	0
  2842  078F  3400               	retlw	0
  2843  0790  3400               	retlw	0
  2844  0791  347A               	retlw	122
  2845  0792  3473               	retlw	115
  2846  0793  3461               	retlw	97
  2847  0794  3477               	retlw	119
  2848  0795  3432               	retlw	50
  2849  0796  3400               	retlw	0
  2850  0797  3400               	retlw	0
  2851  0798  3463               	retlw	99
  2852  0799  3478               	retlw	120
  2853  079A  3464               	retlw	100
  2854  079B  3465               	retlw	101
  2855  079C  3434               	retlw	52
  2856  079D  3433               	retlw	51
  2857  079E  3400               	retlw	0
  2858  079F  3400               	retlw	0
  2859  07A0  3420               	retlw	32
  2860  07A1  3476               	retlw	118
  2861  07A2  3466               	retlw	102
  2862  07A3  3474               	retlw	116
  2863  07A4  3472               	retlw	114
  2864  07A5  3435               	retlw	53
  2865  07A6  3400               	retlw	0
  2866  07A7  3400               	retlw	0
  2867  07A8  346E               	retlw	110
  2868  07A9  3462               	retlw	98
  2869  07AA  3468               	retlw	104
  2870  07AB  3467               	retlw	103
  2871  07AC  3479               	retlw	121
  2872  07AD  3436               	retlw	54
  2873  07AE  3400               	retlw	0
  2874  07AF  3400               	retlw	0
  2875  07B0  3400               	retlw	0
  2876  07B1  346D               	retlw	109
  2877  07B2  346A               	retlw	106
  2878  07B3  3475               	retlw	117
  2879  07B4  3437               	retlw	55
  2880  07B5  3438               	retlw	56
  2881  07B6  3400               	retlw	0
  2882  07B7  3400               	retlw	0
  2883  07B8  342C               	retlw	44
  2884  07B9  346B               	retlw	107
  2885  07BA  3469               	retlw	105
  2886  07BB  346F               	retlw	111
  2887  07BC  3430               	retlw	48
  2888  07BD  3439               	retlw	57
  2889  07BE  3400               	retlw	0
  2890  07BF  3400               	retlw	0
  2891  07C0  342E               	retlw	46
  2892  07C1  342F               	retlw	47
  2893  07C2  346C               	retlw	108
  2894  07C3  343B               	retlw	59
  2895  07C4  3470               	retlw	112
  2896  07C5  342D               	retlw	45
  2897  07C6  3400               	retlw	0
  2898  07C7  3400               	retlw	0
  2899  07C8  3400               	retlw	0
  2900  07C9  3427               	retlw	39
  2901  07CA  3400               	retlw	0
  2902  07CB  345B               	retlw	91
  2903  07CC  343D               	retlw	61
  2904  07CD  3400               	retlw	0
  2905  07CE  3400               	retlw	0
  2906  07CF  3400               	retlw	0
  2907  07D0  3400               	retlw	0
  2908  07D1  340D               	retlw	13
  2909  07D2  345D               	retlw	93
  2910  07D3  3400               	retlw	0
  2911  07D4  345C               	retlw	92
  2912  07D5  3400               	retlw	0
  2913  07D6  3400               	retlw	0
  2914  07D7  3400               	retlw	0
  2915  07D8  3400               	retlw	0
  2916  07D9  3400               	retlw	0
  2917  07DA  3400               	retlw	0
  2918  07DB  3400               	retlw	0
  2919  07DC  3400               	retlw	0
  2920  07DD  3408               	retlw	8
  2921  07DE  3400               	retlw	0
  2922  07DF  3400               	retlw	0
  2923  07E0  3431               	retlw	49
  2924  07E1  3400               	retlw	0
  2925  07E2  3434               	retlw	52
  2926  07E3  3437               	retlw	55
  2927  07E4  3400               	retlw	0
  2928  07E5  3400               	retlw	0
  2929  07E6  3400               	retlw	0
  2930  07E7  3430               	retlw	48
  2931  07E8  342E               	retlw	46
  2932  07E9  3432               	retlw	50
  2933  07EA  3435               	retlw	53
  2934  07EB  3436               	retlw	54
  2935  07EC  3438               	retlw	56
  2936  07ED  341B               	retlw	27
  2937  07EE  3400               	retlw	0
  2938  07EF  3400               	retlw	0
  2939  07F0  342B               	retlw	43
  2940  07F1  3433               	retlw	51
  2941  07F2  342D               	retlw	45
  2942  07F3  342A               	retlw	42
  2943  07F4  3439               	retlw	57
  2944  07F5                     __end_of_ScanCode:	
  2945  07F5                     _ScanCodeSHIFT:	
  2946  07F5  3409               	retlw	9
  2947  07F6  347E               	retlw	126
  2948  07F7  3400               	retlw	0
  2949  07F8  3400               	retlw	0
  2950  07F9  3400               	retlw	0
  2951  07FA  3400               	retlw	0
  2952  07FB  3400               	retlw	0
  2953  07FC  3400               	retlw	0
  2954  07FD  3451               	retlw	81
  2955  07FE  3421               	retlw	33
  2956  07FF  3400               	retlw	0
  2957  0800  3400               	retlw	0
  2958  0801  3400               	retlw	0
  2959  0802  345A               	retlw	90
  2960  0803  3453               	retlw	83
  2961  0804  3441               	retlw	65
  2962  0805  3457               	retlw	87
  2963  0806  3440               	retlw	64
  2964  0807  3400               	retlw	0
  2965  0808  3400               	retlw	0
  2966  0809  3443               	retlw	67
  2967  080A  3458               	retlw	88
  2968  080B  3444               	retlw	68
  2969  080C  3445               	retlw	69
  2970  080D  3424               	retlw	36
  2971  080E  3423               	retlw	35
  2972  080F  3400               	retlw	0
  2973  0810  3400               	retlw	0
  2974  0811  3420               	retlw	32
  2975  0812  3456               	retlw	86
  2976  0813  3446               	retlw	70
  2977  0814  3454               	retlw	84
  2978  0815  3452               	retlw	82
  2979  0816  3425               	retlw	37
  2980  0817  3400               	retlw	0
  2981  0818  3400               	retlw	0
  2982  0819  344E               	retlw	78
  2983  081A  3442               	retlw	66
  2984  081B  3448               	retlw	72
  2985  081C  3447               	retlw	71
  2986  081D  3459               	retlw	89
  2987  081E  345E               	retlw	94
  2988  081F  3400               	retlw	0
  2989  0820  3400               	retlw	0
  2990  0821  3400               	retlw	0
  2991  0822  344D               	retlw	77
  2992  0823  344A               	retlw	74
  2993  0824  3455               	retlw	85
  2994  0825  3426               	retlw	38
  2995  0826  342A               	retlw	42
  2996  0827  3400               	retlw	0
  2997  0828  3400               	retlw	0
  2998  0829  343C               	retlw	60
  2999  082A  344B               	retlw	75
  3000  082B  3449               	retlw	73
  3001  082C  344F               	retlw	79
  3002  082D  3429               	retlw	41
  3003  082E  3428               	retlw	40
  3004  082F  3400               	retlw	0
  3005  0830  3400               	retlw	0
  3006  0831  343E               	retlw	62
  3007  0832  343F               	retlw	63
  3008  0833  344C               	retlw	76
  3009  0834  343A               	retlw	58
  3010  0835  3450               	retlw	80
  3011  0836  345F               	retlw	95
  3012  0837  3400               	retlw	0
  3013  0838  3400               	retlw	0
  3014  0839  3400               	retlw	0
  3015  083A  3422               	retlw	34
  3016  083B  3400               	retlw	0
  3017  083C  347B               	retlw	123
  3018  083D  342B               	retlw	43
  3019  083E  3400               	retlw	0
  3020  083F  3400               	retlw	0
  3021  0840  3400               	retlw	0
  3022  0841  3400               	retlw	0
  3023  0842  340D               	retlw	13
  3024  0843  347D               	retlw	125
  3025  0844  3400               	retlw	0
  3026  0845  347C               	retlw	124
  3027  0846  3400               	retlw	0
  3028  0847  3400               	retlw	0
  3029  0848  3400               	retlw	0
  3030  0849  3400               	retlw	0
  3031  084A  3400               	retlw	0
  3032  084B  3400               	retlw	0
  3033  084C  3400               	retlw	0
  3034  084D  3400               	retlw	0
  3035  084E  3408               	retlw	8
  3036  084F  3400               	retlw	0
  3037  0850  3400               	retlw	0
  3038  0851  3431               	retlw	49
  3039  0852  3400               	retlw	0
  3040  0853  3434               	retlw	52
  3041  0854  3437               	retlw	55
  3042  0855  3400               	retlw	0
  3043  0856  3400               	retlw	0
  3044  0857  3400               	retlw	0
  3045  0858  3430               	retlw	48
  3046  0859  342E               	retlw	46
  3047  085A  3432               	retlw	50
  3048  085B  3435               	retlw	53
  3049  085C  3436               	retlw	54
  3050  085D  3438               	retlw	56
  3051  085E  341B               	retlw	27
  3052  085F  3400               	retlw	0
  3053  0860  3400               	retlw	0
  3054  0861  342B               	retlw	43
  3055  0862  3433               	retlw	51
  3056  0863  342D               	retlw	45
  3057  0864  342A               	retlw	42
  3058  0865  3439               	retlw	57
  3059  0866                     __end_of_ScanCodeSHIFT:	
  3060  0866                     _ScanCodeFunctionE0:	
  3061  0866  341E               	retlw	30
  3062  0867  3400               	retlw	0
  3063  0868  3400               	retlw	0
  3064  0869  341F               	retlw	31
  3065  086A  3400               	retlw	0
  3066  086B  3400               	retlw	0
  3067  086C  3400               	retlw	0
  3068  086D  3400               	retlw	0
  3069  086E  3400               	retlw	0
  3070  086F  3400               	retlw	0
  3071  0870  3400               	retlw	0
  3072  0871  3400               	retlw	0
  3073  0872  3400               	retlw	0
  3074  0873  3400               	retlw	0
  3075  0874  3419               	retlw	25
  3076  0875  3400               	retlw	0
  3077  0876  3400               	retlw	0
  3078  0877  3400               	retlw	0
  3079  0878  3400               	retlw	0
  3080  0879  3400               	retlw	0
  3081  087A  3400               	retlw	0
  3082  087B  3400               	retlw	0
  3083  087C  341D               	retlw	29
  3084  087D  3400               	retlw	0
  3085  087E  3400               	retlw	0
  3086  087F  3400               	retlw	0
  3087  0880  3400               	retlw	0
  3088  0881  3400               	retlw	0
  3089  0882  3400               	retlw	0
  3090  0883  3400               	retlw	0
  3091  0884  3400               	retlw	0
  3092  0885  3400               	retlw	0
  3093  0886  3400               	retlw	0
  3094  0887  3400               	retlw	0
  3095  0888  3400               	retlw	0
  3096  0889  3400               	retlw	0
  3097  088A  3400               	retlw	0
  3098  088B  3400               	retlw	0
  3099  088C  3400               	retlw	0
  3100  088D  3400               	retlw	0
  3101  088E  3400               	retlw	0
  3102  088F  3400               	retlw	0
  3103  0890  3400               	retlw	0
  3104  0891  3400               	retlw	0
  3105  0892  3400               	retlw	0
  3106  0893  3400               	retlw	0
  3107  0894  3400               	retlw	0
  3108  0895  3400               	retlw	0
  3109  0896  3400               	retlw	0
  3110  0897  3400               	retlw	0
  3111  0898  3400               	retlw	0
  3112  0899  3400               	retlw	0
  3113  089A  3400               	retlw	0
  3114  089B  3400               	retlw	0
  3115  089C  3400               	retlw	0
  3116  089D  3400               	retlw	0
  3117  089E  3400               	retlw	0
  3118  089F  342F               	retlw	47
  3119  08A0  3400               	retlw	0
  3120  08A1  3400               	retlw	0
  3121  08A2  3400               	retlw	0
  3122  08A3  3400               	retlw	0
  3123  08A4  3400               	retlw	0
  3124  08A5  3400               	retlw	0
  3125  08A6  3400               	retlw	0
  3126  08A7  3400               	retlw	0
  3127  08A8  3400               	retlw	0
  3128  08A9  3400               	retlw	0
  3129  08AA  3400               	retlw	0
  3130  08AB  3400               	retlw	0
  3131  08AC  3400               	retlw	0
  3132  08AD  3400               	retlw	0
  3133  08AE  3400               	retlw	0
  3134  08AF  340D               	retlw	13
  3135  08B0  3400               	retlw	0
  3136  08B1  3400               	retlw	0
  3137  08B2  3400               	retlw	0
  3138  08B3  3400               	retlw	0
  3139  08B4  3400               	retlw	0
  3140  08B5  3400               	retlw	0
  3141  08B6  3400               	retlw	0
  3142  08B7  3400               	retlw	0
  3143  08B8  3400               	retlw	0
  3144  08B9  3400               	retlw	0
  3145  08BA  3400               	retlw	0
  3146  08BB  3400               	retlw	0
  3147  08BC  3400               	retlw	0
  3148  08BD  3400               	retlw	0
  3149  08BE  3401               	retlw	1
  3150  08BF  3400               	retlw	0
  3151  08C0  3403               	retlw	3
  3152  08C1  3416               	retlw	22
  3153  08C2  3400               	retlw	0
  3154  08C3  3400               	retlw	0
  3155  08C4  3400               	retlw	0
  3156  08C5  3415               	retlw	21
  3157  08C6  347F               	retlw	127
  3158  08C7  3404               	retlw	4
  3159  08C8  3400               	retlw	0
  3160  08C9  3405               	retlw	5
  3161  08CA  3402               	retlw	2
  3162  08CB  3400               	retlw	0
  3163  08CC  3400               	retlw	0
  3164  08CD  3400               	retlw	0
  3165  08CE  3400               	retlw	0
  3166  08CF  3418               	retlw	24
  3167  08D0  3400               	retlw	0
  3168  08D1  3400               	retlw	0
  3169  08D2  3417               	retlw	23
  3170  08D3                     __end_of_ScanCodeFunctionE0:	
  3171  08D3                     _dpowers:	
  3172  08D3  3401               	retlw	1
  3173  08D4  3400               	retlw	0
  3174  08D5  3400               	retlw	0
  3175  08D6  3400               	retlw	0
  3176  08D7  340A               	retlw	10
  3177  08D8  3400               	retlw	0
  3178  08D9  3400               	retlw	0
  3179  08DA  3400               	retlw	0
  3180  08DB  3464               	retlw	100
  3181  08DC  3400               	retlw	0
  3182  08DD  3400               	retlw	0
  3183  08DE  3400               	retlw	0
  3184  08DF  34E8               	retlw	232
  3185  08E0  3403               	retlw	3
  3186  08E1  3400               	retlw	0
  3187  08E2  3400               	retlw	0
  3188  08E3  3410               	retlw	16
  3189  08E4  3427               	retlw	39
  3190  08E5  3400               	retlw	0
  3191  08E6  3400               	retlw	0
  3192  08E7  34A0               	retlw	160
  3193  08E8  3486               	retlw	134
  3194  08E9  3401               	retlw	1
  3195  08EA  3400               	retlw	0
  3196  08EB  3440               	retlw	64
  3197  08EC  3442               	retlw	66
  3198  08ED  340F               	retlw	15
  3199  08EE  3400               	retlw	0
  3200  08EF  3480               	retlw	128
  3201  08F0  3496               	retlw	150
  3202  08F1  3498               	retlw	152
  3203  08F2  3400               	retlw	0
  3204  08F3  3400               	retlw	0
  3205  08F4  34E1               	retlw	225
  3206  08F5  34F5               	retlw	245
  3207  08F6  3405               	retlw	5
  3208  08F7  3400               	retlw	0
  3209  08F8  34CA               	retlw	202
  3210  08F9  349A               	retlw	154
  3211  08FA  343B               	retlw	59
  3212  08FB                     __end_of_dpowers:	
  3213  08FB                     _EvenParityMSG:	
  3214  08FB  3420               	retlw	32
  3215  08FC  3477               	retlw	119
  3216  08FD  3469               	retlw	105
  3217  08FE  3474               	retlw	116
  3218  08FF  3468               	retlw	104
  3219  0900  3420               	retlw	32
  3220  0901  3445               	retlw	69
  3221  0902  3476               	retlw	118
  3222  0903  3465               	retlw	101
  3223  0904  346E               	retlw	110
  3224  0905  3420               	retlw	32
  3225  0906  3470               	retlw	112
  3226  0907  3461               	retlw	97
  3227  0908  3472               	retlw	114
  3228  0909  3469               	retlw	105
  3229  090A  3474               	retlw	116
  3230  090B  3479               	retlw	121
  3231  090C  3420               	retlw	32
  3232  090D  3462               	retlw	98
  3233  090E  3469               	retlw	105
  3234  090F  3474               	retlw	116
  3235  0910  3400               	retlw	0
  3236  0911                     __end_of_EvenParityMSG:	
  3237  0911                     _OddParityMSG:	
  3238  0911  3420               	retlw	32
  3239  0912  3477               	retlw	119
  3240  0913  3469               	retlw	105
  3241  0914  3474               	retlw	116
  3242  0915  3468               	retlw	104
  3243  0916  3420               	retlw	32
  3244  0917  344F               	retlw	79
  3245  0918  3464               	retlw	100
  3246  0919  3464               	retlw	100
  3247  091A  3420               	retlw	32
  3248  091B  3470               	retlw	112
  3249  091C  3461               	retlw	97
  3250  091D  3472               	retlw	114
  3251  091E  3469               	retlw	105
  3252  091F  3474               	retlw	116
  3253  0920  3479               	retlw	121
  3254  0921  3420               	retlw	32
  3255  0922  3462               	retlw	98
  3256  0923  3469               	retlw	105
  3257  0924  3474               	retlw	116
  3258  0925  3400               	retlw	0
  3259  0926                     __end_of_OddParityMSG:	
  3260  0926                     _NoParityMSG:	
  3261  0926  3420               	retlw	32
  3262  0927  3477               	retlw	119
  3263  0928  3469               	retlw	105
  3264  0929  3474               	retlw	116
  3265  092A  3468               	retlw	104
  3266  092B  3420               	retlw	32
  3267  092C  344E               	retlw	78
  3268  092D  346F               	retlw	111
  3269  092E  3420               	retlw	32
  3270  092F  3470               	retlw	112
  3271  0930  3461               	retlw	97
  3272  0931  3472               	retlw	114
  3273  0932  3469               	retlw	105
  3274  0933  3474               	retlw	116
  3275  0934  3479               	retlw	121
  3276  0935  3420               	retlw	32
  3277  0936  3462               	retlw	98
  3278  0937  3469               	retlw	105
  3279  0938  3474               	retlw	116
  3280  0939  3400               	retlw	0
  3281  093A                     __end_of_NoParityMSG:	
  3282  093A                     _SpaceParityMSG:	
  3283  093A  3420               	retlw	32
  3284  093B  3477               	retlw	119
  3285  093C  3469               	retlw	105
  3286  093D  3474               	retlw	116
  3287  093E  3468               	retlw	104
  3288  093F  3420               	retlw	32
  3289  0940  3453               	retlw	83
  3290  0941  3470               	retlw	112
  3291  0942  3461               	retlw	97
  3292  0943  3463               	retlw	99
  3293  0944  3465               	retlw	101
  3294  0945  3420               	retlw	32
  3295  0946  3462               	retlw	98
  3296  0947  3469               	retlw	105
  3297  0948  3474               	retlw	116
  3298  0949  3400               	retlw	0
  3299  094A                     __end_of_SpaceParityMSG:	
  3300  094A                     _MarkParityMSG:	
  3301  094A  3420               	retlw	32
  3302  094B  3477               	retlw	119
  3303  094C  3469               	retlw	105
  3304  094D  3474               	retlw	116
  3305  094E  3468               	retlw	104
  3306  094F  3420               	retlw	32
  3307  0950  344D               	retlw	77
  3308  0951  3461               	retlw	97
  3309  0952  3472               	retlw	114
  3310  0953  346B               	retlw	107
  3311  0954  3420               	retlw	32
  3312  0955  3462               	retlw	98
  3313  0956  3469               	retlw	105
  3314  0957  3474               	retlw	116
  3315  0958  3400               	retlw	0
  3316  0959                     __end_of_MarkParityMSG:	
  3317  0959                     _VoltageMSG:	
  3318  0959  3456               	retlw	86
  3319  095A  346F               	retlw	111
  3320  095B  346C               	retlw	108
  3321  095C  3474               	retlw	116
  3322  095D  3461               	retlw	97
  3323  095E  3467               	retlw	103
  3324  095F  3465               	retlw	101
  3325  0960  3420               	retlw	32
  3326  0961  3474               	retlw	116
  3327  0962  346F               	retlw	111
  3328  0963  346F               	retlw	111
  3329  0964  3420               	retlw	32
  3330  0965  3400               	retlw	0
  3331  0966                     __end_of_VoltageMSG:	
  3332  0966                     _Version:	
  3333  0966  3431               	retlw	49
  3334  0967  342E               	retlw	46
  3335  0968  3433               	retlw	51
  3336  0969  345F               	retlw	95
  3337  096A  3444               	retlw	68
  3338  096B  3457               	retlw	87
  3339  096C  3430               	retlw	48
  3340  096D  3400               	retlw	0
  3341  096E                     __end_of_Version:	
  3342  000B                     _INTCON	set	11
  3343  000B                     _INTCONbits	set	11
  3344  0011                     _PIR1bits	set	17
  3345  000C                     _PORTA	set	12
  3346  000E                     _PORTC	set	14
  3347  001B                     _PR2	set	27
  3348  001C                     _T2CON	set	28
  3349  001C                     _T2CONbits	set	28
  3350  001A                     _TMR2	set	26
  3351  009D                     _ADCON0	set	157
  3352  009E                     _ADCON1	set	158
  3353  009F                     _ADCON2	set	159
  3354  009C                     _ADRESH	set	156
  3355  009B                     _ADRESL	set	155
  3356  0095                     _OPTION_REGbits	set	149
  3357  0099                     _OSCCON	set	153
  3358  009A                     _OSCSTAT	set	154
  3359  0091                     _PIE1	set	145
  3360  0091                     _PIE1bits	set	145
  3361  008C                     _TRISAbits	set	140
  3362  008E                     _TRISCbits	set	142
  3363  04D0                     _HFIOFS	set	1232
  3364  0117                     _FVRCON	set	279
  3365  010C                     _LATA	set	268
  3366  010E                     _LATC	set	270
  3367  018C                     _ANSELA	set	396
  3368  018E                     _ANSELC	set	398
  3369  019F                     _BAUD1CON	set	415
  3370  0192                     _PMADRH	set	402
  3371  0191                     _PMADRL	set	401
  3372  0195                     _PMCON1	set	405
  3373  0196                     _PMCON2	set	406
  3374  0194                     _PMDATH	set	404
  3375  0193                     _PMDATL	set	403
  3376  019D                     _RC1STA	set	413
  3377  019D                     _RC1STAbits	set	413
  3378  0199                     _RCREG	set	409
  3379  019D                     _RCSTA	set	413
  3380  019D                     _RCSTAbits	set	413
  3381  019B                     _SPBRG	set	411
  3382  019C                     _SPBRGH	set	412
  3383  019E                     _TX1STA	set	414
  3384  019E                     _TX1STAbits	set	414
  3385  019A                     _TXREG	set	410
  3386  019E                     _TXSTAbits	set	414
  3387  020C                     _WPUA	set	524
  3388  020E                     _WPUC	set	526
  3389  029A                     _CCP2CONbits	set	666
  3390  0393                     _IOCAF	set	915
  3391  0392                     _IOCAN	set	914
  3392  0391                     _IOCAP	set	913
  3393  0E25                     _CKPPS	set	3621
  3394  0E0F                     _PPSLOCK	set	3599
  3395  0E24                     _RXPPS	set	3620
  3396  0EA2                     _RC2PPS	set	3746
  3397  096E                     __stringdata:	
  3398  096E                     STR_6:	
  3399  096E  3454               	retlw	84	;'T'
  3400  096F  346F               	retlw	111	;'o'
  3401  0970  3420               	retlw	32	;' '
  3402  0971  3443               	retlw	67	;'C'
  3403  0972  3468               	retlw	104	;'h'
  3404  0973  3461               	retlw	97	;'a'
  3405  0974  346E               	retlw	110	;'n'
  3406  0975  3467               	retlw	103	;'g'
  3407  0976  3465               	retlw	101	;'e'
  3408  0977  3420               	retlw	32	;' '
  3409  0978  3442               	retlw	66	;'B'
  3410  0979  3441               	retlw	65	;'A'
  3411  097A  3455               	retlw	85	;'U'
  3412  097B  3444               	retlw	68	;'D'
  3413  097C  3420               	retlw	32	;' '
  3414  097D  3468               	retlw	104	;'h'
  3415  097E  3469               	retlw	105	;'i'
  3416  097F  3474               	retlw	116	;'t'
  3417  0980  3420               	retlw	32	;' '
  3418  0981  3422               	retlw	34	;'"'
  3419  0982  3443               	retlw	67	;'C'
  3420  0983  344E               	retlw	78	;'N'
  3421  0984  3454               	retlw	84	;'T'
  3422  0985  3420               	retlw	32	;' '
  3423  0986  342B               	retlw	43	;'+'
  3424  0987  3420               	retlw	32	;' '
  3425  0988  3441               	retlw	65	;'A'
  3426  0989  344C               	retlw	76	;'L'
  3427  098A  3454               	retlw	84	;'T'
  3428  098B  3420               	retlw	32	;' '
  3429  098C  342B               	retlw	43	;'+'
  3430  098D  3420               	retlw	32	;' '
  3431  098E  3444               	retlw	68	;'D'
  3432  098F  3445               	retlw	69	;'E'
  3433  0990  344C               	retlw	76	;'L'
  3434  0991  3422               	retlw	34	;'"'
  3435  0992  340D               	retlw	13
  3436  0993  340A               	retlw	10
  3437  0994  3400               	retlw	0
  3438  0995                     STR_19:	
  3439  0995  344B               	retlw	75	;'K'
  3440  0996  3465               	retlw	101	;'e'
  3441  0997  3479               	retlw	121	;'y'
  3442  0998  3442               	retlw	66	;'B'
  3443  0999  346F               	retlw	111	;'o'
  3444  099A  3461               	retlw	97	;'a'
  3445  099B  3472               	retlw	114	;'r'
  3446  099C  3464               	retlw	100	;'d'
  3447  099D  3420               	retlw	32	;' '
  3448  099E  3442               	retlw	66	;'B'
  3449  099F  3461               	retlw	97	;'a'
  3450  09A0  3475               	retlw	117	;'u'
  3451  09A1  3464               	retlw	100	;'d'
  3452  09A2  3420               	retlw	32	;' '
  3453  09A3  3477               	retlw	119	;'w'
  3454  09A4  3469               	retlw	105	;'i'
  3455  09A5  346C               	retlw	108	;'l'
  3456  09A6  346C               	retlw	108	;'l'
  3457  09A7  3420               	retlw	32	;' '
  3458  09A8  3462               	retlw	98	;'b'
  3459  09A9  3465               	retlw	101	;'e'
  3460  09AA  3420               	retlw	32	;' '
  3461  09AB  3473               	retlw	115	;'s'
  3462  09AC  3465               	retlw	101	;'e'
  3463  09AD  3474               	retlw	116	;'t'
  3464  09AE  3420               	retlw	32	;' '
  3465  09AF  3474               	retlw	116	;'t'
  3466  09B0  346F               	retlw	111	;'o'
  3467  09B1  3420               	retlw	32	;' '
  3468  09B2  3425               	retlw	37	;'%'
  3469  09B3  346C               	retlw	108	;'l'
  3470  09B4  3475               	retlw	117	;'u'
  3471  09B5  3400               	retlw	0
  3472  09B6                     STR_21:	
  3473  09B6  344B               	retlw	75	;'K'
  3474  09B7  3465               	retlw	101	;'e'
  3475  09B8  3479               	retlw	121	;'y'
  3476  09B9  3442               	retlw	66	;'B'
  3477  09BA  346F               	retlw	111	;'o'
  3478  09BB  3461               	retlw	97	;'a'
  3479  09BC  3472               	retlw	114	;'r'
  3480  09BD  3464               	retlw	100	;'d'
  3481  09BE  3420               	retlw	32	;' '
  3482  09BF  3442               	retlw	66	;'B'
  3483  09C0  3461               	retlw	97	;'a'
  3484  09C1  3475               	retlw	117	;'u'
  3485  09C2  3464               	retlw	100	;'d'
  3486  09C3  3420               	retlw	32	;' '
  3487  09C4  344F               	retlw	79	;'O'
  3488  09C5  3475               	retlw	117	;'u'
  3489  09C6  3474               	retlw	116	;'t'
  3490  09C7  3420               	retlw	32	;' '
  3491  09C8  346F               	retlw	111	;'o'
  3492  09C9  3466               	retlw	102	;'f'
  3493  09CA  3420               	retlw	32	;' '
  3494  09CB  3452               	retlw	82	;'R'
  3495  09CC  3461               	retlw	97	;'a'
  3496  09CD  346E               	retlw	110	;'n'
  3497  09CE  3467               	retlw	103	;'g'
  3498  09CF  3465               	retlw	101	;'e'
  3499  09D0  340D               	retlw	13
  3500  09D1  340A               	retlw	10
  3501  09D2  3400               	retlw	0
  3502  09D3                     STR_3:	
  3503  09D3  3450               	retlw	80	;'P'
  3504  09D4  3453               	retlw	83	;'S'
  3505  09D5  342F               	retlw	47	;'/'
  3506  09D6  3432               	retlw	50	;'2'
  3507  09D7  3420               	retlw	32	;' '
  3508  09D8  344B               	retlw	75	;'K'
  3509  09D9  3465               	retlw	101	;'e'
  3510  09DA  3479               	retlw	121	;'y'
  3511  09DB  3462               	retlw	98	;'b'
  3512  09DC  346F               	retlw	111	;'o'
  3513  09DD  3461               	retlw	97	;'a'
  3514  09DE  3472               	retlw	114	;'r'
  3515  09DF  3464               	retlw	100	;'d'
  3516  09E0  3420               	retlw	32	;' '
  3517  09E1  3474               	retlw	116	;'t'
  3518  09E2  346F               	retlw	111	;'o'
  3519  09E3  3420               	retlw	32	;' '
  3520  09E4  3452               	retlw	82	;'R'
  3521  09E5  3453               	retlw	83	;'S'
  3522  09E6  342D               	retlw	45	;'-'
  3523  09E7  3432               	retlw	50	;'2'
  3524  09E8  3433               	retlw	51	;'3'
  3525  09E9  3432               	retlw	50	;'2'
  3526  09EA  340D               	retlw	13
  3527  09EB  340A               	retlw	10
  3528  09EC  3400               	retlw	0
  3529  09ED                     STR_11:	
  3530  09ED  344B               	retlw	75	;'K'
  3531  09EE  3465               	retlw	101	;'e'
  3532  09EF  3479               	retlw	121	;'y'
  3533  09F0  3442               	retlw	66	;'B'
  3534  09F1  346F               	retlw	111	;'o'
  3535  09F2  3461               	retlw	97	;'a'
  3536  09F3  3472               	retlw	114	;'r'
  3537  09F4  3464               	retlw	100	;'d'
  3538  09F5  3420               	retlw	32	;' '
  3539  09F6  3450               	retlw	80	;'P'
  3540  09F7  3472               	retlw	114	;'r'
  3541  09F8  346F               	retlw	111	;'o'
  3542  09F9  3467               	retlw	103	;'g'
  3543  09FA  3472               	retlw	114	;'r'
  3544  09FB  3461               	retlw	97	;'a'
  3545  09FC  346D               	retlw	109	;'m'
  3546  09FD  3420               	retlw	32	;' '
  3547  09FE  3446               	retlw	70	;'F'
  3548  09FF  3461               	retlw	97	;'a'
  3549  0A00  3469               	retlw	105	;'i'
  3550  0A01  346C               	retlw	108	;'l'
  3551  0A02  340D               	retlw	13
  3552  0A03  340A               	retlw	10
  3553  0A04  3400               	retlw	0
  3554  0A05                     STR_16:	
  3555  0A05  344B               	retlw	75	;'K'
  3556  0A06  3465               	retlw	101	;'e'
  3557  0A07  3479               	retlw	121	;'y'
  3558  0A08  3442               	retlw	66	;'B'
  3559  0A09  346F               	retlw	111	;'o'
  3560  0A0A  3461               	retlw	97	;'a'
  3561  0A0B  3472               	retlw	114	;'r'
  3562  0A0C  3464               	retlw	100	;'d'
  3563  0A0D  3420               	retlw	32	;' '
  3564  0A0E  3452               	retlw	82	;'R'
  3565  0A0F  3465               	retlw	101	;'e'
  3566  0A10  3473               	retlw	115	;'s'
  3567  0A11  3465               	retlw	101	;'e'
  3568  0A12  3474               	retlw	116	;'t'
  3569  0A13  3420               	retlw	32	;' '
  3570  0A14  3474               	retlw	116	;'t'
  3571  0A15  346F               	retlw	111	;'o'
  3572  0A16  3420               	retlw	32	;' '
  3573  0A17  3439               	retlw	57	;'9'
  3574  0A18  3436               	retlw	54	;'6'
  3575  0A19  3430               	retlw	48	;'0'
  3576  0A1A  3430               	retlw	48	;'0'
  3577  0A1B  3400               	retlw	0
  3578  0A1C                     STR_8:	
  3579  0A1C  344B               	retlw	75	;'K'
  3580  0A1D  3465               	retlw	101	;'e'
  3581  0A1E  3479               	retlw	121	;'y'
  3582  0A1F  3442               	retlw	66	;'B'
  3583  0A20  346F               	retlw	111	;'o'
  3584  0A21  3461               	retlw	97	;'a'
  3585  0A22  3472               	retlw	114	;'r'
  3586  0A23  3464               	retlw	100	;'d'
  3587  0A24  3420               	retlw	32	;' '
  3588  0A25  3442               	retlw	66	;'B'
  3589  0A26  3461               	retlw	97	;'a'
  3590  0A27  3475               	retlw	117	;'u'
  3591  0A28  3464               	retlw	100	;'d'
  3592  0A29  3420               	retlw	32	;' '
  3593  0A2A  3469               	retlw	105	;'i'
  3594  0A2B  3473               	retlw	115	;'s'
  3595  0A2C  3420               	retlw	32	;' '
  3596  0A2D  3425               	retlw	37	;'%'
  3597  0A2E  346C               	retlw	108	;'l'
  3598  0A2F  3475               	retlw	117	;'u'
  3599  0A30  3400               	retlw	0
  3600  0A31                     STR_15:	
  3601  0A31  3445               	retlw	69	;'E'
  3602  0A32  346E               	retlw	110	;'n'
  3603  0A33  3474               	retlw	116	;'t'
  3604  0A34  3465               	retlw	101	;'e'
  3605  0A35  3472               	retlw	114	;'r'
  3606  0A36  3420               	retlw	32	;' '
  3607  0A37  3442               	retlw	66	;'B'
  3608  0A38  3461               	retlw	97	;'a'
  3609  0A39  3475               	retlw	117	;'u'
  3610  0A3A  3464               	retlw	100	;'d'
  3611  0A3B  3420               	retlw	32	;' '
  3612  0A3C  3472               	retlw	114	;'r'
  3613  0A3D  3461               	retlw	97	;'a'
  3614  0A3E  3474               	retlw	116	;'t'
  3615  0A3F  3465               	retlw	101	;'e'
  3616  0A40  3420               	retlw	32	;' '
  3617  0A41  340D               	retlw	13
  3618  0A42  340A               	retlw	10
  3619  0A43  3400               	retlw	0
  3620  0A44                     STR_4:	
  3621  0A44  3446               	retlw	70	;'F'
  3622  0A45  3469               	retlw	105	;'i'
  3623  0A46  3472               	retlw	114	;'r'
  3624  0A47  346D               	retlw	109	;'m'
  3625  0A48  3477               	retlw	119	;'w'
  3626  0A49  3461               	retlw	97	;'a'
  3627  0A4A  3472               	retlw	114	;'r'
  3628  0A4B  3465               	retlw	101	;'e'
  3629  0A4C  3420               	retlw	32	;' '
  3630  0A4D  3456               	retlw	86	;'V'
  3631  0A4E  3465               	retlw	101	;'e'
  3632  0A4F  3472               	retlw	114	;'r'
  3633  0A50  3473               	retlw	115	;'s'
  3634  0A51  3469               	retlw	105	;'i'
  3635  0A52  346F               	retlw	111	;'o'
  3636  0A53  346E               	retlw	110	;'n'
  3637  0A54  343A               	retlw	58	;':'
  3638  0A55  3420               	retlw	32	;' '
  3639  0A56  3400               	retlw	0
  3640  0A57                     STR_2:	
  3641  0A57  3448               	retlw	72	;'H'
  3642  0A58  3469               	retlw	105	;'i'
  3643  0A59  3467               	retlw	103	;'g'
  3644  0A5A  3468               	retlw	104	;'h'
  3645  0A5B  3421               	retlw	33	;'!'
  3646  0A5C  340D               	retlw	13
  3647  0A5D  340A               	retlw	10
  3648  0A5E  3400               	retlw	0
  3649  0A5F                     STR_1:	
  3650  0A5F  344C               	retlw	76	;'L'
  3651  0A60  346F               	retlw	111	;'o'
  3652  0A61  3477               	retlw	119	;'w'
  3653  0A62  3421               	retlw	33	;'!'
  3654  0A63  340D               	retlw	13
  3655  0A64  340A               	retlw	10
  3656  0A65  3400               	retlw	0
  3657  0A66                     __end_of__stringdata:	
  3658                           
  3659                           ; #config settings
  3660  0000                     
  3661                           	psect	cinit
  3662  00E8                     start_initialization:	
  3663  00E8                     __initialization:	
  3664                           
  3665                           ; Clear objects allocated to BANK1
  3666  00E8  30C5               	movlw	low __pbssBANK1
  3667  00E9  0084               	movwf	4
  3668  00EA  3000               	movlw	high __pbssBANK1
  3669  00EB  0085               	movwf	5
  3670  00EC  301D               	movlw	29
  3671  00ED  3198  20EC  3180   	fcall	clear_ram0
  3672                           
  3673                           ; Clear objects allocated to BANK3
  3674  00F0  30E1               	movlw	low __pbssBANK3
  3675  00F1  0084               	movwf	4
  3676  00F2  3001               	movlw	high __pbssBANK3
  3677  00F3  0085               	movwf	5
  3678  00F4  300F               	movlw	15
  3679  00F5  3198  20EC  3180   	fcall	clear_ram0
  3680                           
  3681                           ; Clear objects allocated to BANK4
  3682  00F8  3057               	movlw	low __pbssBANK4
  3683  00F9  0084               	movwf	4
  3684  00FA  3002               	movlw	high __pbssBANK4
  3685  00FB  0085               	movwf	5
  3686  00FC  300A               	movlw	10
  3687  00FD  3198  20EC  3180   	fcall	clear_ram0
  3688                           
  3689                           ; Initialize objects allocated to BANK1
  3690  0100  30FC               	movlw	low __pidataBANK1
  3691  0101  0084               	movwf	4
  3692  0102  3086               	movlw	(high __pidataBANK1)| (0+128)
  3693  0103  0085               	movwf	5
  3694  0104  30E2               	movlw	low __pdataBANK1
  3695  0105  0086               	movwf	6
  3696  0106  3000               	movlw	high __pdataBANK1
  3697  0107  0087               	movwf	7
  3698  0108  3004               	movlw	4
  3699  0109  3198  20E6  3180   	fcall	init_ram
  3700                           
  3701                           ; Initialize objects allocated to BANK4
  3702  010C  30D7               	movlw	low __pidataBANK4
  3703  010D  0084               	movwf	4
  3704  010E  3098               	movlw	(high __pidataBANK4)| (0+128)
  3705  010F  0085               	movwf	5
  3706  0110  3061               	movlw	low __pdataBANK4
  3707  0111  0086               	movwf	6
  3708  0112  3002               	movlw	high __pdataBANK4
  3709  0113  0087               	movwf	7
  3710  0114  3004               	movlw	4
  3711  0115  3198  20E6         	fcall	init_ram
  3712  0117                     end_of_initialization:	
  3713                           ;End of C runtime variable initialization code
  3714                           
  3715  0117                     __end_of__initialization:	
  3716  0117  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  3717  0118  0020               	movlb	0
  3718  0119  318A  2A98         	ljmp	_main	;jump to C main() function
  3719                           
  3720                           	psect	bssBANK1
  3721  00C5                     __pbssBANK1:	
  3722  00C5                     _BaudTyped:	
  3723  00C5                     	ds	4
  3724  00C9                     _PS_2_Read_Data_TEMP:	
  3725  00C9                     	ds	2
  3726  00CB                     _BAUDMODE:	
  3727  00CB                     	ds	1
  3728  00CC                     _Caps_Lock_Key:	
  3729  00CC                     	ds	1
  3730  00CD                     _Caps_Lock_Key_old:	
  3731  00CD                     	ds	1
  3732  00CE                     _Delete:	
  3733  00CE                     	ds	1
  3734  00CF                     _LControl:	
  3735  00CF                     	ds	1
  3736  00D0                     _Left_Shift_Key_old:	
  3737  00D0                     	ds	1
  3738  00D1                     _PS_2_Buffer_items:	
  3739  00D1                     	ds	1
  3740  00D2                     _PS_2_bits:	
  3741  00D2                     	ds	1
  3742  00D3                     _ResendLastFlag:	
  3743  00D3                     	ds	1
  3744  00D4                     _Right_Shift_Key_old:	
  3745  00D4                     	ds	1
  3746  00D5                     _i:	
  3747  00D5                     	ds	1
  3748  00D6                     _PS_2_ScanCodes:	
  3749  00D6                     	ds	12
  3750                           
  3751                           	psect	dataBANK1
  3752  00E2                     __pdataBANK1:	
  3753  00E2                     _MEM:	
  3754  00E2                     	ds	4
  3755                           
  3756                           	psect	bssBANK3
  3757  01E1                     __pbssBANK3:	
  3758  01E1                     _PS_2_Read_Data_First:	
  3759  01E1                     	ds	2
  3760  01E3                     _PS_2_Read_Data_Second:	
  3761  01E3                     	ds	2
  3762  01E5                     _PS_2_Read_Data_Third:	
  3763  01E5                     	ds	2
  3764  01E7                     _CapsCount:	
  3765  01E7                     	ds	1
  3766  01E8                     _Caps_Lock:	
  3767  01E8                     	ds	1
  3768  01E9                     _LALT:	
  3769  01E9                     	ds	1
  3770  01EA                     _Left_Shift_Key:	
  3771  01EA                     	ds	1
  3772  01EB                     _ParityTyped:	
  3773  01EB                     	ds	1
  3774  01EC                     _RALT:	
  3775  01EC                     	ds	1
  3776  01ED                     _RControl:	
  3777  01ED                     	ds	1
  3778  01EE                     _Right_Shift_Key:	
  3779  01EE                     	ds	1
  3780  01EF                     _Shift_Key:	
  3781  01EF                     	ds	1
  3782                           
  3783                           	psect	bssBANK4
  3784  0257                     __pbssBANK4:	
  3785  0257                     _BatteryVoltage:	
  3786  0257                     	ds	3
  3787  025A                     _SinLEDtimer:	
  3788  025A                     	ds	2
  3789  025C                     _pwrLEDtoggle:	
  3790  025C                     	ds	2
  3791  025E                     _Alarm:	
  3792  025E                     	ds	1
  3793  025F                     _ECHO:	
  3794  025F                     	ds	1
  3795  0260                     _PARITY:	
  3796  0260                     	ds	1
  3797                           
  3798                           	psect	dataBANK4
  3799  0261                     __pdataBANK4:	
  3800  0261                     _BAUD:	
  3801  0261                     	ds	4
  3802                           
  3803                           	psect	clrtext
  3804  18EC                     clear_ram0:	
  3805                           ;	Called with FSR0 containing the base address, and
  3806                           ;	WREG with the size to clear
  3807                           
  3808  18EC  0064               	clrwdt	;clear the watchdog before getting into this loop
  3809  18ED                     clrloop0:	
  3810  18ED  0180               	clrf	0	;clear RAM location pointed to by FSR
  3811  18EE  3101               	addfsr 0,1
  3812  18EF  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3813  18F0  28ED               	goto	clrloop0	;have we reached the end yet?
  3814  18F1  3400               	retlw	0	;all done for this memory range, return
  3815                           
  3816                           	psect	inittext
  3817  18E6                     init_ram:	
  3818  18E6  00FE               	movwf	126
  3819  18E7                     initloop:	
  3820  18E7  0012               	moviw fsr0++
  3821  18E8  001E               	movwi fsr1++
  3822  18E9  0BFE               	decfsz	126,f
  3823  18EA  28E7               	goto	initloop
  3824  18EB  3400               	retlw	0
  3825                           
  3826                           	psect	cstackBANK5
  3827  02A0                     __pcstackBANK5:	
  3828  02A0                     Init_System@buf:	
  3829                           
  3830                           ; 60 bytes @ 0x0
  3831  02A0                     	ds	60
  3832  02DC                     Init_System@temp:	
  3833                           
  3834                           ; 4 bytes @ 0x3C
  3835  02DC                     	ds	4
  3836  02E0                     Init_System@Parity:	
  3837                           
  3838                           ; 1 bytes @ 0x40
  3839  02E0                     	ds	1
  3840  02E1                     Init_System@Baud:	
  3841                           
  3842                           ; 4 bytes @ 0x41
  3843  02E1                     	ds	4
  3844                           
  3845                           	psect	cstackBANK4
  3846  0220                     __pcstackBANK4:	
  3847  0220                     ??_Timer2ON:	
  3848  0220                     ??_PS_2_ENABLE_INTERRUPT:	
  3849                           ; 0 bytes @ 0x0
  3850                           
  3851  0220                     ??_ReadUSART:	
  3852                           ; 0 bytes @ 0x0
  3853                           
  3854  0220                     ??_ConfigureOscillator:	
  3855                           ; 0 bytes @ 0x0
  3856                           
  3857  0220                     ??_InitApp:	
  3858                           ; 0 bytes @ 0x0
  3859                           
  3860  0220                     ?_delayUS:	
  3861                           ; 0 bytes @ 0x0
  3862                           
  3863  0220                     ?_OpenUSART:	
  3864                           ; 0 bytes @ 0x0
  3865                           
  3866  0220                     ??_baudUSART:	
  3867                           ; 0 bytes @ 0x0
  3868                           
  3869  0220                     ??_Clock_TRIS:	
  3870                           ; 0 bytes @ 0x0
  3871                           
  3872  0220                     ??_Data_TRIS:	
  3873                           ; 0 bytes @ 0x0
  3874                           
  3875  0220                     ??_Timer2Init:	
  3876                           ; 0 bytes @ 0x0
  3877                           
  3878  0220                     ??_DisableInternalADC:	
  3879                           ; 0 bytes @ 0x0
  3880                           
  3881  0220                     ??_CloseUSART:	
  3882                           ; 0 bytes @ 0x0
  3883                           
  3884  0220                     ?___ftge:	
  3885                           ; 0 bytes @ 0x0
  3886                           
  3887  0220                     ?_CheckSum_byte:	
  3888                           ; 1 bit 
  3889                           
  3890  0220                     ?_ReadFlash_2Byte:	
  3891                           ; 1 bytes @ 0x0
  3892                           
  3893  0220                     ?___ftpack:	
  3894                           ; 2 bytes @ 0x0
  3895                           
  3896  0220                     ?___lldiv:	
  3897                           ; 3 bytes @ 0x0
  3898                           
  3899  0220                     baudUSART@baudconfig:	
  3900                           ; 4 bytes @ 0x0
  3901                           
  3902  0220                     Clock_TRIS@direction:	
  3903                           ; 1 bytes @ 0x0
  3904                           
  3905  0220                     Data_TRIS@direction:	
  3906                           ; 1 bytes @ 0x0
  3907                           
  3908  0220                     PS_2_ENABLE_INTERRUPT@DATA_CLK:	
  3909                           ; 1 bytes @ 0x0
  3910                           
  3911  0220                     CheckSum_byte@This:	
  3912                           ; 1 bytes @ 0x0
  3913                           
  3914  0220                     OpenUSART@spbrg:	
  3915                           ; 2 bytes @ 0x0
  3916                           
  3917  0220                     ReadFlash_2Byte@row:	
  3918                           ; 2 bytes @ 0x0
  3919                           
  3920  0220                     ___ftpack@arg:	
  3921                           ; 2 bytes @ 0x0
  3922                           
  3923  0220                     ___ftge@ff1:	
  3924                           ; 3 bytes @ 0x0
  3925                           
  3926  0220                     delayUS@US:	
  3927                           ; 3 bytes @ 0x0
  3928                           
  3929  0220                     ___lldiv@divisor:	
  3930                           ; 4 bytes @ 0x0
  3931                           
  3932                           
  3933                           ; 4 bytes @ 0x0
  3934  0220                     	ds	1
  3935  0221                     ReadUSART@data:	
  3936                           
  3937                           ; 1 bytes @ 0x1
  3938  0221                     	ds	1
  3939  0222                     ??_OpenUSART:	
  3940  0222                     CheckSum_byte@Odd_Even:	
  3941                           ; 0 bytes @ 0x2
  3942                           
  3943  0222                     OpenUSART@config:	
  3944                           ; 1 bytes @ 0x2
  3945                           
  3946  0222                     ReadFlash_2Byte@column:	
  3947                           ; 1 bytes @ 0x2
  3948                           
  3949  0222                     Timer2Init@time:	
  3950                           ; 1 bytes @ 0x2
  3951                           
  3952                           
  3953                           ; 1 bytes @ 0x2
  3954  0222                     	ds	1
  3955  0223                     ??_CheckSum_byte:	
  3956  0223                     ??_ReadFlash_2Byte:	
  3957                           ; 0 bytes @ 0x3
  3958                           
  3959  0223                     Timer2Init@postscaler:	
  3960                           ; 0 bytes @ 0x3
  3961                           
  3962  0223                     ___ftpack@exp:	
  3963                           ; 1 bytes @ 0x3
  3964                           
  3965  0223                     ___ftge@ff2:	
  3966                           ; 1 bytes @ 0x3
  3967                           
  3968                           
  3969                           ; 3 bytes @ 0x3
  3970  0223                     	ds	1
  3971  0224                     ??_delayUS:	
  3972  0224                     Timer2Init@prescaler:	
  3973                           ; 0 bytes @ 0x4
  3974                           
  3975  0224                     ___ftpack@sign:	
  3976                           ; 1 bytes @ 0x4
  3977                           
  3978  0224                     CheckSum_byte@ThisTemp:	
  3979                           ; 1 bytes @ 0x4
  3980                           
  3981  0224                     ___lldiv@dividend:	
  3982                           ; 2 bytes @ 0x4
  3983                           
  3984                           
  3985                           ; 4 bytes @ 0x4
  3986  0224                     	ds	1
  3987  0225                     ??_PS_2_INIT:	
  3988  0225                     ??___ftpack:	
  3989                           ; 0 bytes @ 0x5
  3990                           
  3991  0225                     ?_ReadFlash_4Byte:	
  3992                           ; 0 bytes @ 0x5
  3993                           
  3994  0225                     ReadFlash_4Byte@row:	
  3995                           ; 4 bytes @ 0x5
  3996                           
  3997  0225                     delayUS@i:	
  3998                           ; 2 bytes @ 0x5
  3999                           
  4000                           
  4001                           ; 4 bytes @ 0x5
  4002  0225                     	ds	1
  4003  0226                     ??___ftge:	
  4004  0226                     CheckSum_byte@Parity:	
  4005                           ; 0 bytes @ 0x6
  4006                           
  4007                           
  4008                           ; 1 bytes @ 0x6
  4009  0226                     	ds	1
  4010  0227                     CheckSum_byte@i:	
  4011  0227                     ReadFlash_4Byte@column:	
  4012                           ; 1 bytes @ 0x7
  4013                           
  4014                           
  4015                           ; 1 bytes @ 0x7
  4016  0227                     	ds	1
  4017  0228                     ?_UARTchar:	
  4018  0228                     ??___lldiv:	
  4019                           ; 0 bytes @ 0x8
  4020                           
  4021  0228                     ?___lwtoft:	
  4022                           ; 0 bytes @ 0x8
  4023                           
  4024  0228                     UARTchar@override:	
  4025                           ; 3 bytes @ 0x8
  4026                           
  4027  0228                     ___lwtoft@c:	
  4028                           ; 1 bytes @ 0x8
  4029                           
  4030                           
  4031                           ; 2 bytes @ 0x8
  4032  0228                     	ds	1
  4033  0229                     ??_ReadFlash_4Byte:	
  4034  0229                     delayUS@j:	
  4035                           ; 0 bytes @ 0x9
  4036                           
  4037  0229                     UARTchar@NinethBit_override_data:	
  4038                           ; 1 bytes @ 0x9
  4039                           
  4040  0229                     ___lldiv@quotient:	
  4041                           ; 1 bytes @ 0x9
  4042                           
  4043                           
  4044                           ; 4 bytes @ 0x9
  4045  0229                     	ds	1
  4046  022A                     ??_UARTchar:	
  4047  022A                     ?_InternalADC_Read:	
  4048                           ; 0 bytes @ 0xA
  4049                           
  4050                           
  4051                           ; 2 bytes @ 0xA
  4052  022A                     	ds	1
  4053  022B                     ??___lwtoft:	
  4054                           
  4055                           ; 0 bytes @ 0xB
  4056  022B                     	ds	1
  4057  022C                     ??_InternalADC_Read:	
  4058  022C                     ?___ftdiv:	
  4059                           ; 0 bytes @ 0xC
  4060                           
  4061  022C                     ___ftdiv@f2:	
  4062                           ; 3 bytes @ 0xC
  4063                           
  4064                           
  4065                           ; 3 bytes @ 0xC
  4066  022C                     	ds	1
  4067  022D                     ___lldiv@counter:	
  4068                           
  4069                           ; 1 bytes @ 0xD
  4070  022D                     	ds	1
  4071  022E                     ?_InitUART:	
  4072  022E                     ?___llmod:	
  4073                           ; 0 bytes @ 0xE
  4074                           
  4075  022E                     UARTchar@data:	
  4076                           ; 4 bytes @ 0xE
  4077                           
  4078  022E                     InternalADC_Read@channel:	
  4079                           ; 1 bytes @ 0xE
  4080                           
  4081  022E                     InitUART@Baud:	
  4082                           ; 1 bytes @ 0xE
  4083                           
  4084  022E                     ReadFlash_4Byte@temp:	
  4085                           ; 4 bytes @ 0xE
  4086                           
  4087  022E                     ___llmod@divisor:	
  4088                           ; 4 bytes @ 0xE
  4089                           
  4090                           
  4091                           ; 4 bytes @ 0xE
  4092  022E                     	ds	1
  4093  022F                     ?_UARTstringWAIT:	
  4094  022F                     UARTstringWAIT@data:	
  4095                           ; 0 bytes @ 0xF
  4096                           
  4097  022F                     ___ftdiv@f1:	
  4098                           ; 2 bytes @ 0xF
  4099                           
  4100                           
  4101                           ; 3 bytes @ 0xF
  4102  022F                     	ds	2
  4103  0231                     ??_UARTstringWAIT:	
  4104                           
  4105                           ; 0 bytes @ 0x11
  4106  0231                     	ds	1
  4107  0232                     ??___ftdiv:	
  4108  0232                     ?_ReadBaud:	
  4109                           ; 0 bytes @ 0x12
  4110                           
  4111  0232                     InitUART@parity:	
  4112                           ; 4 bytes @ 0x12
  4113                           
  4114  0232                     ReadBaud@row:	
  4115                           ; 1 bytes @ 0x12
  4116                           
  4117  0232                     ___llmod@dividend:	
  4118                           ; 2 bytes @ 0x12
  4119                           
  4120                           
  4121                           ; 4 bytes @ 0x12
  4122  0232                     	ds	1
  4123  0233                     ??_InitUART:	
  4124                           
  4125                           ; 0 bytes @ 0x13
  4126  0233                     	ds	1
  4127  0234                     ReadBaud@column:	
  4128                           
  4129                           ; 1 bytes @ 0x14
  4130  0234                     	ds	2
  4131  0236                     ??_ReadBaud:	
  4132  0236                     ??___llmod:	
  4133                           ; 0 bytes @ 0x16
  4134                           
  4135  0236                     ___ftdiv@cntr:	
  4136                           ; 0 bytes @ 0x16
  4137                           
  4138                           
  4139                           ; 1 bytes @ 0x16
  4140  0236                     	ds	1
  4141  0237                     ___llmod@counter:	
  4142  0237                     ___ftdiv@f3:	
  4143                           ; 1 bytes @ 0x17
  4144                           
  4145                           
  4146                           ; 3 bytes @ 0x17
  4147  0237                     	ds	1
  4148  0238                     ?_sprintf:	
  4149  0238                     sprintf@sp:	
  4150                           ; 2 bytes @ 0x18
  4151                           
  4152                           
  4153                           ; 2 bytes @ 0x18
  4154  0238                     	ds	2
  4155  023A                     ___ftdiv@exp:	
  4156  023A                     sprintf@f:	
  4157                           ; 1 bytes @ 0x1A
  4158                           
  4159                           
  4160                           ; 2 bytes @ 0x1A
  4161  023A                     	ds	1
  4162  023B                     ___ftdiv@sign:	
  4163  023B                     InitUART@spbrg:	
  4164                           ; 1 bytes @ 0x1B
  4165                           
  4166                           
  4167                           ; 2 bytes @ 0x1B
  4168  023B                     	ds	1
  4169  023C                     ?___ftmul:	
  4170  023C                     ___ftmul@f1:	
  4171                           ; 3 bytes @ 0x1C
  4172                           
  4173                           
  4174                           ; 3 bytes @ 0x1C
  4175  023C                     	ds	1
  4176  023D                     InitUART@baudconfig:	
  4177                           
  4178                           ; 1 bytes @ 0x1D
  4179  023D                     	ds	1
  4180  023E                     InitUART@config:	
  4181  023E                     ReadBaud@temp:	
  4182                           ; 1 bytes @ 0x1E
  4183                           
  4184                           
  4185                           ; 4 bytes @ 0x1E
  4186  023E                     	ds	1
  4187  023F                     ___ftmul@f2:	
  4188  023F                     InitUART@temp:	
  4189                           ; 3 bytes @ 0x1F
  4190                           
  4191                           
  4192                           ; 4 bytes @ 0x1F
  4193  023F                     	ds	1
  4194  0240                     ??_sprintf:	
  4195                           
  4196                           ; 0 bytes @ 0x20
  4197  0240                     	ds	2
  4198  0242                     ??___ftmul:	
  4199                           
  4200                           ; 0 bytes @ 0x22
  4201  0242                     	ds	4
  4202  0246                     sprintf@flag:	
  4203  0246                     ___ftmul@exp:	
  4204                           ; 1 bytes @ 0x26
  4205                           
  4206                           
  4207                           ; 1 bytes @ 0x26
  4208  0246                     	ds	1
  4209  0247                     sprintf@prec:	
  4210  0247                     ___ftmul@f3_as_product:	
  4211                           ; 2 bytes @ 0x27
  4212                           
  4213                           
  4214                           ; 3 bytes @ 0x27
  4215  0247                     	ds	2
  4216  0249                     sprintf@_val:	
  4217                           
  4218                           ; 4 bytes @ 0x29
  4219  0249                     	ds	1
  4220  024A                     ___ftmul@cntr:	
  4221                           
  4222                           ; 1 bytes @ 0x2A
  4223  024A                     	ds	1
  4224  024B                     ___ftmul@sign:	
  4225                           
  4226                           ; 1 bytes @ 0x2B
  4227  024B                     	ds	1
  4228  024C                     ?_ReadVoltage:	
  4229                           
  4230                           ; 3 bytes @ 0x2C
  4231  024C                     	ds	1
  4232  024D                     sprintf@ap:	
  4233                           
  4234                           ; 2 bytes @ 0x2D
  4235  024D                     	ds	2
  4236  024F                     ??_ReadVoltage:	
  4237  024F                     sprintf@c:	
  4238                           ; 0 bytes @ 0x2F
  4239                           
  4240                           
  4241                           ; 1 bytes @ 0x2F
  4242  024F                     	ds	1
  4243  0250                     ??_Init_System:	
  4244  0250                     ReadVoltage@voltage:	
  4245                           ; 0 bytes @ 0x30
  4246                           
  4247                           
  4248                           ; 3 bytes @ 0x30
  4249  0250                     	ds	3
  4250  0253                     ReadVoltage@temp:	
  4251                           
  4252                           ; 2 bytes @ 0x33
  4253  0253                     	ds	2
  4254  0255                     ??_main:	
  4255                           
  4256                           ; 0 bytes @ 0x35
  4257  0255                     	ds	1
  4258  0256                     main@i:	
  4259                           
  4260                           ; 1 bytes @ 0x36
  4261  0256                     	ds	1
  4262                           
  4263                           	psect	cstackBANK3
  4264  01A0                     __pcstackBANK3:	
  4265  01A0                     Process_PS2_ScanCode@buf:	
  4266                           
  4267                           ; 60 bytes @ 0x0
  4268  01A0                     	ds	60
  4269  01DC                     _Process_PS2_ScanCode$850:	
  4270                           
  4271                           ; 1 bytes @ 0x3C
  4272  01DC                     	ds	1
  4273  01DD                     _Process_PS2_ScanCode$851:	
  4274                           
  4275                           ; 1 bytes @ 0x3D
  4276  01DD                     	ds	1
  4277  01DE                     _Process_PS2_ScanCode$852:	
  4278                           
  4279                           ; 1 bytes @ 0x3E
  4280  01DE                     	ds	1
  4281  01DF                     _Process_PS2_ScanCode$853:	
  4282                           
  4283                           ; 1 bytes @ 0x3F
  4284  01DF                     	ds	1
  4285  01E0                     Process_PS2_ScanCode@temp:	
  4286                           
  4287                           ; 1 bytes @ 0x40
  4288  01E0                     	ds	1
  4289                           
  4290                           	psect	cstackBANK2
  4291  0120                     __pcstackBANK2:	
  4292  0120                     SetBaud@buf:	
  4293                           
  4294                           ; 50 bytes @ 0x0
  4295  0120                     	ds	50
  4296  0152                     SetBaud@Baudtemp:	
  4297                           
  4298                           ; 4 bytes @ 0x32
  4299  0152                     	ds	4
  4300  0156                     SetBaud@Paritytemp:	
  4301                           
  4302                           ; 4 bytes @ 0x36
  4303  0156                     	ds	4
  4304  015A                     SetBaud@temp:	
  4305                           
  4306                           ; 4 bytes @ 0x3A
  4307  015A                     	ds	4
  4308  015E                     SetBaud@i:	
  4309                           
  4310                           ; 1 bytes @ 0x3E
  4311  015E                     	ds	1
  4312                           
  4313                           	psect	cstackBANK1
  4314  00A0                     __pcstackBANK1:	
  4315  00A0                     ?_WriteBaud:	
  4316  00A0                     WriteBaud@row:	
  4317                           ; 0 bytes @ 0x0
  4318                           
  4319                           
  4320                           ; 2 bytes @ 0x0
  4321  00A0                     	ds	2
  4322  00A2                     WriteBaud@Baud:	
  4323                           
  4324                           ; 4 bytes @ 0x2
  4325  00A2                     	ds	4
  4326  00A6                     WriteBaud@Parity:	
  4327                           
  4328                           ; 1 bytes @ 0x6
  4329  00A6                     	ds	1
  4330  00A7                     ??_WriteBaud:	
  4331                           
  4332                           ; 0 bytes @ 0x7
  4333  00A7                     	ds	8
  4334  00AF                     ?_SetBaud:	
  4335  00AF                     SetBaud@Baud:	
  4336                           ; 0 bytes @ 0xF
  4337                           
  4338                           
  4339                           ; 4 bytes @ 0xF
  4340  00AF                     	ds	4
  4341  00B3                     SetBaud@Parity:	
  4342                           
  4343                           ; 1 bytes @ 0x13
  4344  00B3                     	ds	1
  4345  00B4                     ??_SetBaud:	
  4346                           
  4347                           ; 0 bytes @ 0x14
  4348  00B4                     	ds	8
  4349  00BC                     ??_Process_PS2_ScanCode:	
  4350                           
  4351                           ; 0 bytes @ 0x1C
  4352  00BC                     	ds	6
  4353  00C2                     isr@Rx_fault:	
  4354                           
  4355                           ; 1 bytes @ 0x22
  4356  00C2                     	ds	1
  4357  00C3                     isr@rx:	
  4358                           
  4359                           ; 1 bytes @ 0x23
  4360  00C3                     	ds	1
  4361  00C4                     isr@ScanTemp:	
  4362                           
  4363                           ; 1 bytes @ 0x24
  4364  00C4                     	ds	1
  4365                           
  4366                           	psect	cstackCOMMON
  4367  0070                     __pcstackCOMMON:	
  4368  0070                     ?_PS_2_DISABLE_INTERRUPT:	
  4369  0070                     ??_PS_2_DISABLE_INTERRUPT:	
  4370                           ; 0 bytes @ 0x0
  4371                           
  4372  0070                     ??_READ_PS_2_PIN:	
  4373                           ; 0 bytes @ 0x0
  4374                           
  4375  0070                     ?_Timer2Reset:	
  4376                           ; 0 bytes @ 0x0
  4377                           
  4378  0070                     ??_Timer2Reset:	
  4379                           ; 0 bytes @ 0x0
  4380                           
  4381  0070                     ?_Timer2ON:	
  4382                           ; 0 bytes @ 0x0
  4383                           
  4384  0070                     ?_PS_2_ENABLE_INTERRUPT:	
  4385                           ; 0 bytes @ 0x0
  4386                           
  4387  0070                     ??_READ_CONFIG_PIN:	
  4388                           ; 0 bytes @ 0x0
  4389                           
  4390  0070                     ?_Timer2OFF:	
  4391                           ; 0 bytes @ 0x0
  4392                           
  4393  0070                     ??_Timer2OFF:	
  4394                           ; 0 bytes @ 0x0
  4395                           
  4396  0070                     ?_ResendLast:	
  4397                           ; 0 bytes @ 0x0
  4398                           
  4399  0070                     ?_Process_PS2_ScanCode:	
  4400                           ; 0 bytes @ 0x0
  4401                           
  4402  0070                     ?_ConfigureOscillator:	
  4403                           ; 0 bytes @ 0x0
  4404                           
  4405  0070                     ?_InitApp:	
  4406                           ; 0 bytes @ 0x0
  4407                           
  4408  0070                     ?_Init_System:	
  4409                           ; 0 bytes @ 0x0
  4410                           
  4411  0070                     ?_PS_2_INIT:	
  4412                           ; 0 bytes @ 0x0
  4413                           
  4414  0070                     ?_baudUSART:	
  4415                           ; 0 bytes @ 0x0
  4416                           
  4417  0070                     ?_Clock_TRIS:	
  4418                           ; 0 bytes @ 0x0
  4419                           
  4420  0070                     ?_Data_TRIS:	
  4421                           ; 0 bytes @ 0x0
  4422                           
  4423  0070                     ?_Timer2Init:	
  4424                           ; 0 bytes @ 0x0
  4425                           
  4426  0070                     ??_Decode_Scan_Code_FunctionE0:	
  4427                           ; 0 bytes @ 0x0
  4428                           
  4429  0070                     ??_Decode_Scan_Code_Shift:	
  4430                           ; 0 bytes @ 0x0
  4431                           
  4432  0070                     ??_Decode_Scan_Code:	
  4433                           ; 0 bytes @ 0x0
  4434                           
  4435  0070                     ??_Decode_Scan_Code_Function:	
  4436                           ; 0 bytes @ 0x0
  4437                           
  4438  0070                     ?_DisableInternalADC:	
  4439                           ; 0 bytes @ 0x0
  4440                           
  4441  0070                     ?_isr:	
  4442                           ; 0 bytes @ 0x0
  4443                           
  4444  0070                     ?_main:	
  4445                           ; 0 bytes @ 0x0
  4446                           
  4447  0070                     ??_Reverse_Byte:	
  4448                           ; 0 bytes @ 0x0
  4449                           
  4450  0070                     ??_ISNUMBER:	
  4451                           ; 0 bytes @ 0x0
  4452                           
  4453  0070                     ?_cleanBuffer:	
  4454                           ; 0 bytes @ 0x0
  4455                           
  4456  0070                     ?_CloseUSART:	
  4457                           ; 0 bytes @ 0x0
  4458                           
  4459  0070                     ?_UART_send_break:	
  4460                           ; 0 bytes @ 0x0
  4461                           
  4462  0070                     ??_UART_send_break:	
  4463                           ; 0 bytes @ 0x0
  4464                           
  4465  0070                     ?_UNLOCK:	
  4466                           ; 0 bytes @ 0x0
  4467                           
  4468  0070                     ??_UNLOCK:	
  4469                           ; 0 bytes @ 0x0
  4470                           
  4471  0070                     ?_BlockErase:	
  4472                           ; 0 bytes @ 0x0
  4473                           
  4474  0070                     ?i1_delayUS:	
  4475                           ; 0 bytes @ 0x0
  4476                           
  4477  0070                     ?i1_CloseUSART:	
  4478                           ; 0 bytes @ 0x0
  4479                           
  4480  0070                     ??i1_CloseUSART:	
  4481                           ; 0 bytes @ 0x0
  4482                           
  4483  0070                     ?i1_baudUSART:	
  4484                           ; 0 bytes @ 0x0
  4485                           
  4486  0070                     ??i1_baudUSART:	
  4487                           ; 0 bytes @ 0x0
  4488                           
  4489  0070                     ?i1_OpenUSART:	
  4490                           ; 0 bytes @ 0x0
  4491                           
  4492  0070                     ??i1_ReadUSART:	
  4493                           ; 0 bytes @ 0x0
  4494                           
  4495  0070                     ?i1_Clock_TRIS:	
  4496                           ; 0 bytes @ 0x0
  4497                           
  4498  0070                     ??i1_Clock_TRIS:	
  4499                           ; 0 bytes @ 0x0
  4500                           
  4501  0070                     ?i1_Data_TRIS:	
  4502                           ; 0 bytes @ 0x0
  4503                           
  4504  0070                     ??i1_Data_TRIS:	
  4505                           ; 0 bytes @ 0x0
  4506                           
  4507  0070                     ?i1_PS_2_ENABLE_INTERRUPT:	
  4508                           ; 0 bytes @ 0x0
  4509                           
  4510  0070                     ??i1_PS_2_ENABLE_INTERRUPT:	
  4511                           ; 0 bytes @ 0x0
  4512                           
  4513  0070                     ?i1_Timer2ON:	
  4514                           ; 0 bytes @ 0x0
  4515                           
  4516  0070                     ??i1_Timer2ON:	
  4517                           ; 0 bytes @ 0x0
  4518                           
  4519  0070                     ?_READ_PS_2_PIN:	
  4520                           ; 0 bytes @ 0x0
  4521                           
  4522  0070                     ?_ReadUSART:	
  4523                           ; 1 bytes @ 0x0
  4524                           
  4525  0070                     ?_READ_CONFIG_PIN:	
  4526                           ; 1 bytes @ 0x0
  4527                           
  4528  0070                     ?_Send_PS2:	
  4529                           ; 1 bytes @ 0x0
  4530                           
  4531  0070                     ?_Decode_Scan_Code_FunctionE0:	
  4532                           ; 1 bytes @ 0x0
  4533                           
  4534  0070                     ?_Decode_Scan_Code_Shift:	
  4535                           ; 1 bytes @ 0x0
  4536                           
  4537  0070                     ?_Decode_Scan_Code:	
  4538                           ; 1 bytes @ 0x0
  4539                           
  4540  0070                     ?_Decode_Scan_Code_Function:	
  4541                           ; 1 bytes @ 0x0
  4542                           
  4543  0070                     ?_Reverse_Byte:	
  4544                           ; 1 bytes @ 0x0
  4545                           
  4546  0070                     ?_ISNUMBER:	
  4547                           ; 1 bytes @ 0x0
  4548                           
  4549  0070                     ?_BufferShiftBack:	
  4550                           ; 1 bytes @ 0x0
  4551                           
  4552  0070                     ?i1_CheckSum_byte:	
  4553                           ; 1 bytes @ 0x0
  4554                           
  4555  0070                     ?i1_ReadUSART:	
  4556                           ; 1 bytes @ 0x0
  4557                           
  4558  0070                     ?i1_ReadFlash_2Byte:	
  4559                           ; 1 bytes @ 0x0
  4560                           
  4561  0070                     ?___lmul:	
  4562                           ; 2 bytes @ 0x0
  4563                           
  4564  0070                     ?i1___lldiv:	
  4565                           ; 4 bytes @ 0x0
  4566                           
  4567  0070                     ISNUMBER@ascii:	
  4568                           ; 4 bytes @ 0x0
  4569                           
  4570  0070                     BufferShiftBack@shift:	
  4571                           ; 1 bytes @ 0x0
  4572                           
  4573  0070                     READ_PS_2_PIN@DATA_CLK:	
  4574                           ; 1 bytes @ 0x0
  4575                           
  4576  0070                     Decode_Scan_Code@Code:	
  4577                           ; 1 bytes @ 0x0
  4578                           
  4579  0070                     Decode_Scan_Code_Shift@Code:	
  4580                           ; 1 bytes @ 0x0
  4581                           
  4582  0070                     Decode_Scan_Code_FunctionE0@Code:	
  4583                           ; 1 bytes @ 0x0
  4584                           
  4585  0070                     Decode_Scan_Code_Function@Code:	
  4586                           ; 1 bytes @ 0x0
  4587                           
  4588  0070                     i1baudUSART@baudconfig:	
  4589                           ; 1 bytes @ 0x0
  4590                           
  4591  0070                     i1Clock_TRIS@direction:	
  4592                           ; 1 bytes @ 0x0
  4593                           
  4594  0070                     i1Data_TRIS@direction:	
  4595                           ; 1 bytes @ 0x0
  4596                           
  4597  0070                     i1PS_2_ENABLE_INTERRUPT@DATA_CLK:	
  4598                           ; 1 bytes @ 0x0
  4599                           
  4600  0070                     cleanBuffer@count:	
  4601                           ; 1 bytes @ 0x0
  4602                           
  4603  0070                     BlockErase@row:	
  4604                           ; 2 bytes @ 0x0
  4605                           
  4606  0070                     i1CheckSum_byte@This:	
  4607                           ; 2 bytes @ 0x0
  4608                           
  4609  0070                     i1OpenUSART@spbrg:	
  4610                           ; 2 bytes @ 0x0
  4611                           
  4612  0070                     i1ReadFlash_2Byte@row:	
  4613                           ; 2 bytes @ 0x0
  4614                           
  4615  0070                     ___lmul@multiplier:	
  4616                           ; 2 bytes @ 0x0
  4617                           
  4618  0070                     i1delayUS@US:	
  4619                           ; 4 bytes @ 0x0
  4620                           
  4621  0070                     i1___lldiv@divisor:	
  4622                           ; 4 bytes @ 0x0
  4623                           
  4624                           
  4625                           ; 4 bytes @ 0x0
  4626  0070                     	ds	1
  4627  0071                     BufferShiftBack@size:	
  4628  0071                     PS_2_DISABLE_INTERRUPT@DATA_CLK:	
  4629                           ; 1 bytes @ 0x1
  4630                           
  4631  0071                     i1ReadUSART@data:	
  4632                           ; 1 bytes @ 0x1
  4633                           
  4634                           
  4635                           ; 1 bytes @ 0x1
  4636  0071                     	ds	1
  4637  0072                     ??_cleanBuffer:	
  4638  0072                     ??_BufferShiftBack:	
  4639                           ; 0 bytes @ 0x2
  4640                           
  4641  0072                     ??_BlockErase:	
  4642                           ; 0 bytes @ 0x2
  4643                           
  4644  0072                     ??i1_OpenUSART:	
  4645                           ; 0 bytes @ 0x2
  4646                           
  4647  0072                     Reverse_Byte@temp:	
  4648                           ; 0 bytes @ 0x2
  4649                           
  4650  0072                     i1CheckSum_byte@Odd_Even:	
  4651                           ; 1 bytes @ 0x2
  4652                           
  4653  0072                     i1OpenUSART@config:	
  4654                           ; 1 bytes @ 0x2
  4655                           
  4656  0072                     i1ReadFlash_2Byte@column:	
  4657                           ; 1 bytes @ 0x2
  4658                           
  4659                           
  4660                           ; 1 bytes @ 0x2
  4661  0072                     	ds	1
  4662  0073                     ??i1_CheckSum_byte:	
  4663  0073                     ??i1_ReadFlash_2Byte:	
  4664                           ; 0 bytes @ 0x3
  4665                           
  4666  0073                     Reverse_Byte@This:	
  4667                           ; 0 bytes @ 0x3
  4668                           
  4669  0073                     cleanBuffer@data:	
  4670                           ; 1 bytes @ 0x3
  4671                           
  4672                           
  4673                           ; 1 bytes @ 0x3
  4674  0073                     	ds	1
  4675  0074                     ??i1_delayUS:	
  4676  0074                     cleanBuffer@i:	
  4677                           ; 0 bytes @ 0x4
  4678                           
  4679  0074                     i1CheckSum_byte@ThisTemp:	
  4680                           ; 1 bytes @ 0x4
  4681                           
  4682  0074                     ___lmul@multiplicand:	
  4683                           ; 2 bytes @ 0x4
  4684                           
  4685  0074                     i1___lldiv@dividend:	
  4686                           ; 4 bytes @ 0x4
  4687                           
  4688                           
  4689                           ; 4 bytes @ 0x4
  4690  0074                     	ds	1
  4691  0075                     ?i1_ReadFlash_4Byte:	
  4692  0075                     i1ReadFlash_4Byte@row:	
  4693                           ; 4 bytes @ 0x5
  4694                           
  4695  0075                     i1delayUS@i:	
  4696                           ; 2 bytes @ 0x5
  4697                           
  4698                           
  4699                           ; 4 bytes @ 0x5
  4700  0075                     	ds	1
  4701  0076                     BufferShiftBack@buffer:	
  4702  0076                     i1CheckSum_byte@Parity:	
  4703                           ; 1 bytes @ 0x6
  4704                           
  4705                           
  4706                           ; 1 bytes @ 0x6
  4707  0076                     	ds	1
  4708  0077                     BufferShiftBack@i:	
  4709  0077                     i1CheckSum_byte@i:	
  4710                           ; 1 bytes @ 0x7
  4711                           
  4712  0077                     i1ReadFlash_4Byte@column:	
  4713                           ; 1 bytes @ 0x7
  4714                           
  4715                           
  4716                           ; 1 bytes @ 0x7
  4717  0077                     	ds	1
  4718  0078                     ??___lmul:	
  4719  0078                     ?i1_UARTchar:	
  4720                           ; 0 bytes @ 0x8
  4721                           
  4722  0078                     ??i1___lldiv:	
  4723                           ; 0 bytes @ 0x8
  4724                           
  4725  0078                     ?_PS2RawToScan:	
  4726                           ; 0 bytes @ 0x8
  4727                           
  4728  0078                     i1UARTchar@override:	
  4729                           ; 2 bytes @ 0x8
  4730                           
  4731  0078                     PS2RawToScan@Raw:	
  4732                           ; 1 bytes @ 0x8
  4733                           
  4734  0078                     ___lmul@product:	
  4735                           ; 2 bytes @ 0x8
  4736                           
  4737                           
  4738                           ; 4 bytes @ 0x8
  4739  0078                     	ds	1
  4740  0079                     ??i1_ReadFlash_4Byte:	
  4741  0079                     i1delayUS@j:	
  4742                           ; 0 bytes @ 0x9
  4743                           
  4744  0079                     i1UARTchar@NinethBit_override_data:	
  4745                           ; 1 bytes @ 0x9
  4746                           
  4747  0079                     i1___lldiv@quotient:	
  4748                           ; 1 bytes @ 0x9
  4749                           
  4750                           
  4751                           ; 4 bytes @ 0x9
  4752  0079                     	ds	1
  4753  007A                     ?_UART_send_break_timed:	
  4754  007A                     ??_Send_PS2:	
  4755                           ; 0 bytes @ 0xA
  4756                           
  4757  007A                     ?_WriteFlash_Sequential:	
  4758                           ; 0 bytes @ 0xA
  4759                           
  4760  007A                     ??i1_UARTchar:	
  4761                           ; 0 bytes @ 0xA
  4762                           
  4763  007A                     UART_send_break_timed@US:	
  4764                           ; 0 bytes @ 0xA
  4765                           
  4766  007A                     PS2RawToScan@temp:	
  4767                           ; 2 bytes @ 0xA
  4768                           
  4769  007A                     WriteFlash_Sequential@row:	
  4770                           ; 2 bytes @ 0xA
  4771                           
  4772                           
  4773                           ; 2 bytes @ 0xA
  4774  007A                     	ds	2
  4775  007C                     ??_UART_send_break_timed:	
  4776  007C                     WriteFlash_Sequential@buffer:	
  4777                           ; 0 bytes @ 0xC
  4778                           
  4779                           
  4780                           ; 1 bytes @ 0xC
  4781  007C                     	ds	1
  4782  007D                     WriteFlash_Sequential@amount:	
  4783  007D                     i1___lldiv@counter:	
  4784                           ; 1 bytes @ 0xD
  4785                           
  4786                           
  4787                           ; 1 bytes @ 0xD
  4788  007D                     	ds	1
  4789  007E                     ??_ResendLast:	
  4790                           
  4791                           	psect	cstackBANK0
  4792  0020                     __pcstackBANK0:	
  4793                           ; 0 bytes @ 0xE
  4794                           
  4795  0020                     ??_PS2RawToScan:	
  4796  0020                     ??_WriteFlash_Sequential:	
  4797                           ; 0 bytes @ 0x0
  4798                           
  4799  0020                     ?i1_InitUART:	
  4800                           ; 0 bytes @ 0x0
  4801                           
  4802  0020                     ?i1___llmod:	
  4803                           ; 0 bytes @ 0x0
  4804                           
  4805  0020                     Send_PS2@oddparity:	
  4806                           ; 4 bytes @ 0x0
  4807                           
  4808  0020                     i1UARTchar@data:	
  4809                           ; 1 bytes @ 0x0
  4810                           
  4811  0020                     i1InitUART@Baud:	
  4812                           ; 1 bytes @ 0x0
  4813                           
  4814  0020                     i1ReadFlash_4Byte@temp:	
  4815                           ; 4 bytes @ 0x0
  4816                           
  4817  0020                     i1___llmod@divisor:	
  4818                           ; 4 bytes @ 0x0
  4819                           
  4820                           
  4821                           ; 4 bytes @ 0x0
  4822  0020                     	ds	1
  4823  0021                     ?i1_UARTstringWAIT:	
  4824  0021                     Send_PS2@command:	
  4825                           ; 0 bytes @ 0x1
  4826                           
  4827  0021                     i1UARTstringWAIT@data:	
  4828                           ; 1 bytes @ 0x1
  4829                           
  4830                           
  4831                           ; 2 bytes @ 0x1
  4832  0021                     	ds	1
  4833  0022                     Send_PS2@i:	
  4834                           
  4835                           ; 1 bytes @ 0x2
  4836  0022                     	ds	1
  4837  0023                     ??i1_UARTstringWAIT:	
  4838  0023                     Send_PS2@timeout:	
  4839                           ; 0 bytes @ 0x3
  4840                           
  4841  0023                     WriteFlash_Sequential@TempBufH:	
  4842                           ; 2 bytes @ 0x3
  4843                           
  4844                           
  4845                           ; 32 bytes @ 0x3
  4846  0023                     	ds	1
  4847  0024                     ?i1_ReadBaud:	
  4848  0024                     i1InitUART@parity:	
  4849                           ; 4 bytes @ 0x4
  4850                           
  4851  0024                     i1ReadBaud@row:	
  4852                           ; 1 bytes @ 0x4
  4853                           
  4854  0024                     i1___llmod@dividend:	
  4855                           ; 2 bytes @ 0x4
  4856                           
  4857                           
  4858                           ; 4 bytes @ 0x4
  4859  0024                     	ds	1
  4860  0025                     ??i1_InitUART:	
  4861                           
  4862                           ; 0 bytes @ 0x5
  4863  0025                     	ds	1
  4864  0026                     i1ReadBaud@column:	
  4865                           
  4866                           ; 1 bytes @ 0x6
  4867  0026                     	ds	2
  4868  0028                     ??i1_ReadBaud:	
  4869  0028                     ??i1___llmod:	
  4870                           ; 0 bytes @ 0x8
  4871                           
  4872                           
  4873                           ; 0 bytes @ 0x8
  4874  0028                     	ds	1
  4875  0029                     i1___llmod@counter:	
  4876                           
  4877                           ; 1 bytes @ 0x9
  4878  0029                     	ds	1
  4879  002A                     ?i1_sprintf:	
  4880  002A                     i1sprintf@sp:	
  4881                           ; 2 bytes @ 0xA
  4882                           
  4883                           
  4884                           ; 2 bytes @ 0xA
  4885  002A                     	ds	2
  4886  002C                     i1sprintf@f:	
  4887                           
  4888                           ; 2 bytes @ 0xC
  4889  002C                     	ds	1
  4890  002D                     i1InitUART@spbrg:	
  4891                           
  4892                           ; 2 bytes @ 0xD
  4893  002D                     	ds	2
  4894  002F                     i1InitUART@baudconfig:	
  4895                           
  4896                           ; 1 bytes @ 0xF
  4897  002F                     	ds	1
  4898  0030                     i1InitUART@config:	
  4899  0030                     i1ReadBaud@temp:	
  4900                           ; 1 bytes @ 0x10
  4901                           
  4902                           
  4903                           ; 4 bytes @ 0x10
  4904  0030                     	ds	1
  4905  0031                     i1InitUART@temp:	
  4906                           
  4907                           ; 4 bytes @ 0x11
  4908  0031                     	ds	1
  4909  0032                     ??i1_sprintf:	
  4910                           
  4911                           ; 0 bytes @ 0x12
  4912  0032                     	ds	6
  4913  0038                     i1sprintf@flag:	
  4914                           
  4915                           ; 1 bytes @ 0x18
  4916  0038                     	ds	1
  4917  0039                     i1sprintf@prec:	
  4918                           
  4919                           ; 2 bytes @ 0x19
  4920  0039                     	ds	2
  4921  003B                     i1sprintf@_val:	
  4922                           
  4923                           ; 4 bytes @ 0x1B
  4924  003B                     	ds	4
  4925  003F                     i1sprintf@ap:	
  4926                           
  4927                           ; 2 bytes @ 0x1F
  4928  003F                     	ds	2
  4929  0041                     i1sprintf@c:	
  4930                           
  4931                           ; 1 bytes @ 0x21
  4932  0041                     	ds	2
  4933  0043                     WriteFlash_Sequential@TempBufL:	
  4934                           
  4935                           ; 32 bytes @ 0x23
  4936  0043                     	ds	32
  4937  0063                     WriteFlash_Sequential@tempH:	
  4938                           
  4939                           ; 1 bytes @ 0x43
  4940  0063                     	ds	1
  4941  0064                     WriteFlash_Sequential@tempL:	
  4942                           
  4943                           ; 1 bytes @ 0x44
  4944  0064                     	ds	1
  4945  0065                     WriteFlash_Sequential@amountTemp:	
  4946                           
  4947                           ; 1 bytes @ 0x45
  4948  0065                     	ds	1
  4949  0066                     WriteFlash_Sequential@temp:	
  4950                           
  4951                           ; 2 bytes @ 0x46
  4952  0066                     	ds	2
  4953  0068                     WriteFlash_Sequential@spaces:	
  4954                           
  4955                           ; 1 bytes @ 0x48
  4956  0068                     	ds	1
  4957  0069                     WriteFlash_Sequential@i:	
  4958                           
  4959                           ; 1 bytes @ 0x49
  4960  0069                     	ds	1
  4961  006A                     WriteBaud@temp:	
  4962                           
  4963                           ; 4 bytes @ 0x4A
  4964  006A                     	ds	4
  4965  006E                     ??_isr:	
  4966                           
  4967                           ; 0 bytes @ 0x4E
  4968  006E                     	ds	2
  4969                           
  4970                           	psect	maintext
  4971  0A98                     __pmaintext:	
  4972 ;;
  4973 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  4974 ;;
  4975 ;; *************** function _main *****************
  4976 ;; Defined at:
  4977 ;;		line 108 in file "main.c"
  4978 ;; Parameters:    Size  Location     Type
  4979 ;;		None
  4980 ;; Auto vars:     Size  Location     Type
  4981 ;;  i               1   54[BANK4 ] unsigned char 
  4982 ;; Return value:  Size  Location     Type
  4983 ;;		None               void
  4984 ;; Registers used:
  4985 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4986 ;; Tracked objects:
  4987 ;;		On entry : 17F/0
  4988 ;;		On exit  : 0/0
  4989 ;;		Unchanged: 0/0
  4990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4992 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  4993 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  4994 ;;      Totals:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  4995 ;;Total ram usage:        2 bytes
  4996 ;; Hardware stack levels required when called:   11
  4997 ;; This function calls:
  4998 ;;		_ConfigureOscillator
  4999 ;;		_InitApp
  5000 ;;		_Init_System
  5001 ;;		_PS_2_ENABLE_INTERRUPT
  5002 ;;		_PS_2_INIT
  5003 ;;		_ReadVoltage
  5004 ;;		_UARTstringWAIT
  5005 ;;		___ftge
  5006 ;;		_delayUS
  5007 ;; This function is called by:
  5008 ;;		Startup code after reset
  5009 ;; This function uses a non-reentrant model
  5010 ;;
  5011                           
  5012                           
  5013                           ;psect for function _main
  5014  0A98                     _main:	
  5015                           
  5016                           ;main.c: 110: unsigned char i=0;
  5017                           
  5018                           ;incstack = 0
  5019                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5020  0A98  0024               	movlb	4	; select bank4
  5021  0A99  01D6               	clrf	main@i^(0+512)
  5022                           
  5023                           ;main.c: 112: ConfigureOscillator();
  5024  0A9A  3199  21E9  318A   	fcall	_ConfigureOscillator
  5025                           
  5026                           ;main.c: 113: InitApp();
  5027  0A9D  319A  223B  318A   	fcall	_InitApp
  5028                           
  5029                           ;main.c: 114: Init_System();
  5030  0AA0  318B  238E  318A   	fcall	_Init_System
  5031                           
  5032                           ;main.c: 115: PS_2_INIT();
  5033  0AA3  3199  217C  318A   	fcall	_PS_2_INIT
  5034                           
  5035                           ;main.c: 118: for(i =0;i<10;i++)
  5036  0AA6  0024               	movlb	4	; select bank4
  5037  0AA7  01D6               	clrf	main@i^(0+512)
  5038  0AA8  300A               	movlw	10
  5039  0AA9  0256               	subwf	main@i^(0+512),w
  5040  0AAA  1803               	btfsc	3,0
  5041  0AAB  2AD5               	goto	l6596
  5042  0AAC                     l171:	
  5043                           
  5044                           ;main.c: 119: {
  5045                           ;main.c: 120: LATC |= 0b00010000;
  5046  0AAC  0022               	movlb	2	; select bank2
  5047  0AAD  160E               	bsf	14,4	;volatile
  5048                           
  5049                           ;main.c: 121: delayUS(10000);
  5050  0AAE  3000               	movlw	0
  5051  0AAF  0024               	movlb	4	; select bank4
  5052  0AB0  00A3               	movwf	(delayUS@US+3)^(0+512)
  5053  0AB1  3000               	movlw	0
  5054  0AB2  00A2               	movwf	(delayUS@US+2)^(0+512)
  5055  0AB3  3027               	movlw	39
  5056  0AB4  00A1               	movwf	(delayUS@US+1)^(0+512)
  5057  0AB5  3010               	movlw	16
  5058  0AB6  00A0               	movwf	delayUS@US^(0+512)
  5059  0AB7  319C  2458  318A   	fcall	_delayUS
  5060                           
  5061                           ;main.c: 122: LATC &= ~0b00010000;
  5062  0ABA  30EF               	movlw	239
  5063  0ABB  0024               	movlb	4	; select bank4
  5064  0ABC  00D5               	movwf	??_main^(0+512)
  5065  0ABD  0855               	movf	??_main^(0+512),w
  5066  0ABE  0022               	movlb	2	; select bank2
  5067  0ABF  058E               	andwf	14,f	;volatile
  5068                           
  5069                           ;main.c: 123: delayUS(10000);
  5070  0AC0  3000               	movlw	0
  5071  0AC1  0024               	movlb	4	; select bank4
  5072  0AC2  00A3               	movwf	(delayUS@US+3)^(0+512)
  5073  0AC3  3000               	movlw	0
  5074  0AC4  00A2               	movwf	(delayUS@US+2)^(0+512)
  5075  0AC5  3027               	movlw	39
  5076  0AC6  00A1               	movwf	(delayUS@US+1)^(0+512)
  5077  0AC7  3010               	movlw	16
  5078  0AC8  00A0               	movwf	delayUS@US^(0+512)
  5079  0AC9  319C  2458  318A   	fcall	_delayUS
  5080  0ACC  3001               	movlw	1
  5081  0ACD  0024               	movlb	4	; select bank4
  5082  0ACE  00D5               	movwf	??_main^(0+512)
  5083  0ACF  0855               	movf	??_main^(0+512),w
  5084  0AD0  07D6               	addwf	main@i^(0+512),f
  5085  0AD1  300A               	movlw	10
  5086  0AD2  0256               	subwf	main@i^(0+512),w
  5087  0AD3  1C03               	skipc
  5088  0AD4  2AAC               	goto	l171
  5089  0AD5                     l6596:	
  5090                           
  5091                           ;main.c: 124: }
  5092                           ;main.c: 126: BatteryVoltage = ReadVoltage();
  5093  0AD5  3190  20D1  318A   	fcall	_ReadVoltage
  5094  0AD8  0024               	movlb	4	; select bank4
  5095  0AD9  084C               	movf	?_ReadVoltage^(0+512),w
  5096  0ADA  00D7               	movwf	_BatteryVoltage^(0+512)
  5097  0ADB  084D               	movf	(?_ReadVoltage+1)^(0+512),w
  5098  0ADC  00D8               	movwf	(_BatteryVoltage+1)^(0+512)
  5099  0ADD  084E               	movf	(?_ReadVoltage+2)^(0+512),w
  5100  0ADE  00D9               	movwf	(_BatteryVoltage+2)^(0+512)
  5101                           
  5102                           ;main.c: 127: if(BatteryVoltage < 6.55 )
  5103  0ADF  0857               	movf	_BatteryVoltage^(0+512),w
  5104  0AE0  00A0               	movwf	___ftge@ff1^(0+512)
  5105  0AE1  0858               	movf	(_BatteryVoltage+1)^(0+512),w
  5106  0AE2  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5107  0AE3  0859               	movf	(_BatteryVoltage+2)^(0+512),w
  5108  0AE4  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5109  0AE5  309A               	movlw	154
  5110  0AE6  00A3               	movwf	___ftge@ff2^(0+512)
  5111  0AE7  30D1               	movlw	209
  5112  0AE8  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5113  0AE9  3040               	movlw	64
  5114  0AEA  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5115  0AEB  319C  248D  318A   	fcall	___ftge
  5116  0AEE  1803               	btfsc	3,0
  5117  0AEF  2AFD               	goto	l6600
  5118                           
  5119                           ;main.c: 128: {
  5120                           ;main.c: 129: UARTstringWAIT(VoltageMSG);
  5121  0AF0  3059               	movlw	low (_VoltageMSG| (0+32768))
  5122  0AF1  0024               	movlb	4	; select bank4
  5123  0AF2  00AF               	movwf	UARTstringWAIT@data^(0+512)
  5124  0AF3  3089               	movlw	high (_VoltageMSG| (0+32768))
  5125  0AF4  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  5126  0AF5  319C  2425  318A   	fcall	_UARTstringWAIT
  5127                           
  5128                           ;main.c: 130: UARTstringWAIT("Low!\r\n");
  5129  0AF8  305F               	movlw	low (STR_1| (0+32768))
  5130  0AF9  0024               	movlb	4	; select bank4
  5131  0AFA  00AF               	movwf	UARTstringWAIT@data^(0+512)
  5132  0AFB  308A               	movlw	high (STR_1| (0+32768))
  5133  0AFC  2B1B               	goto	L1
  5134  0AFD                     l6600:	
  5135                           ;main.c: 131: }
  5136                           
  5137                           
  5138                           ;main.c: 132: else if (BatteryVoltage > 30.0)
  5139  0AFD  3000               	movlw	0
  5140  0AFE  0024               	movlb	4	; select bank4
  5141  0AFF  00A0               	movwf	___ftge@ff1^(0+512)
  5142  0B00  30F0               	movlw	240
  5143  0B01  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5144  0B02  3041               	movlw	65
  5145  0B03  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5146  0B04  0857               	movf	_BatteryVoltage^(0+512),w
  5147  0B05  00A3               	movwf	___ftge@ff2^(0+512)
  5148  0B06  0858               	movf	(_BatteryVoltage+1)^(0+512),w
  5149  0B07  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5150  0B08  0859               	movf	(_BatteryVoltage+2)^(0+512),w
  5151  0B09  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5152  0B0A  319C  248D  318A   	fcall	___ftge
  5153  0B0D  1803               	btfsc	3,0
  5154  0B0E  2B1F               	goto	l6604
  5155                           
  5156                           ;main.c: 133: {
  5157                           ;main.c: 134: UARTstringWAIT(VoltageMSG);
  5158  0B0F  3059               	movlw	low (_VoltageMSG| (0+32768))
  5159  0B10  0024               	movlb	4	; select bank4
  5160  0B11  00AF               	movwf	UARTstringWAIT@data^(0+512)
  5161  0B12  3089               	movlw	high (_VoltageMSG| (0+32768))
  5162  0B13  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  5163  0B14  319C  2425  318A   	fcall	_UARTstringWAIT
  5164                           
  5165                           ;main.c: 135: UARTstringWAIT("High!\r\n");
  5166  0B17  3057               	movlw	low (STR_2| (0+32768))
  5167  0B18  0024               	movlb	4	; select bank4
  5168  0B19  00AF               	movwf	UARTstringWAIT@data^(0+512)
  5169  0B1A  308A               	movlw	high (STR_2| (0+32768))
  5170  0B1B                     L1:	
  5171  0B1B  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  5172  0B1C  319C  2425  318A   	fcall	_UARTstringWAIT
  5173  0B1F                     l6604:	
  5174                           
  5175                           ;main.c: 136: }
  5176                           ;main.c: 138: PS_2_ENABLE_INTERRUPT(0b00100000);
  5177  0B1F  3020               	movlw	32
  5178  0B20  3199  2170  318A   	fcall	_PS_2_ENABLE_INTERRUPT
  5179                           
  5180                           ;main.c: 140: PIE1bits.RCIE = 1;
  5181  0B23  0021               	movlb	1	; select bank1
  5182  0B24  1691               	bsf	17,5	;volatile
  5183  0B25                     l6608:	
  5184                           ;main.c: 143: while(1)
  5185                           
  5186                           
  5187                           ;main.c: 144: {
  5188                           ;main.c: 145: BatteryVoltage = ReadVoltage();
  5189  0B25  3190  20D1  318A   	fcall	_ReadVoltage
  5190  0B28  0024               	movlb	4	; select bank4
  5191  0B29  084C               	movf	?_ReadVoltage^(0+512),w
  5192  0B2A  00D7               	movwf	_BatteryVoltage^(0+512)
  5193  0B2B  084D               	movf	(?_ReadVoltage+1)^(0+512),w
  5194  0B2C  00D8               	movwf	(_BatteryVoltage+1)^(0+512)
  5195  0B2D  084E               	movf	(?_ReadVoltage+2)^(0+512),w
  5196  0B2E  00D9               	movwf	(_BatteryVoltage+2)^(0+512)
  5197                           
  5198                           ;main.c: 146: delayUS(20);
  5199  0B2F  3000               	movlw	0
  5200  0B30  00A3               	movwf	(delayUS@US+3)^(0+512)
  5201  0B31  3000               	movlw	0
  5202  0B32  00A2               	movwf	(delayUS@US+2)^(0+512)
  5203  0B33  3000               	movlw	0
  5204  0B34  00A1               	movwf	(delayUS@US+1)^(0+512)
  5205  0B35  3014               	movlw	20
  5206  0B36  00A0               	movwf	delayUS@US^(0+512)
  5207  0B37  319C  2458  318A   	fcall	_delayUS
  5208                           
  5209                           ;main.c: 147: if(BatteryVoltage < 6.55 || BatteryVoltage > 30.0)
  5210  0B3A  0024               	movlb	4	; select bank4
  5211  0B3B  0857               	movf	_BatteryVoltage^(0+512),w
  5212  0B3C  00A0               	movwf	___ftge@ff1^(0+512)
  5213  0B3D  0858               	movf	(_BatteryVoltage+1)^(0+512),w
  5214  0B3E  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5215  0B3F  0859               	movf	(_BatteryVoltage+2)^(0+512),w
  5216  0B40  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5217  0B41  309A               	movlw	154
  5218  0B42  00A3               	movwf	___ftge@ff2^(0+512)
  5219  0B43  30D1               	movlw	209
  5220  0B44  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5221  0B45  3040               	movlw	64
  5222  0B46  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5223  0B47  319C  248D  318A   	fcall	___ftge
  5224  0B4A  1C03               	btfss	3,0
  5225  0B4B  2B5E               	goto	l179
  5226  0B4C  3000               	movlw	0
  5227  0B4D  0024               	movlb	4	; select bank4
  5228  0B4E  00A0               	movwf	___ftge@ff1^(0+512)
  5229  0B4F  30F0               	movlw	240
  5230  0B50  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5231  0B51  3041               	movlw	65
  5232  0B52  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5233  0B53  0857               	movf	_BatteryVoltage^(0+512),w
  5234  0B54  00A3               	movwf	___ftge@ff2^(0+512)
  5235  0B55  0858               	movf	(_BatteryVoltage+1)^(0+512),w
  5236  0B56  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5237  0B57  0859               	movf	(_BatteryVoltage+2)^(0+512),w
  5238  0B58  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5239  0B59  319C  248D  318A   	fcall	___ftge
  5240  0B5C  1803               	btfsc	3,0
  5241  0B5D  2B62               	goto	l6616
  5242  0B5E                     l179:	
  5243                           
  5244                           ;main.c: 148: {
  5245                           ;main.c: 149: Alarm = 1;
  5246  0B5E  0024               	movlb	4	; select bank4
  5247  0B5F  01DE               	clrf	_Alarm^(0+512)
  5248  0B60  0ADE               	incf	_Alarm^(0+512),f
  5249                           
  5250                           ;main.c: 150: }
  5251  0B61  2B66               	goto	l6620
  5252  0B62                     l6616:	
  5253                           
  5254                           ;main.c: 151: else
  5255                           ;main.c: 152: {
  5256                           ;main.c: 153: Alarm = 0;
  5257  0B62  0024               	movlb	4	; select bank4
  5258  0B63  01DE               	clrf	_Alarm^(0+512)
  5259                           
  5260                           ;main.c: 154: LATC |= 0b00000010;
  5261  0B64  0022               	movlb	2	; select bank2
  5262  0B65  148E               	bsf	14,1	;volatile
  5263  0B66                     l6620:	
  5264                           
  5265                           ;main.c: 155: }
  5266                           ;main.c: 156: if(Alarm)
  5267  0B66  0024               	movlb	4	; select bank4
  5268  0B67  085E               	movf	_Alarm^(0+512),w
  5269  0B68  1903               	btfsc	3,2
  5270  0B69  2B7B               	goto	l6628
  5271                           
  5272                           ;main.c: 157: {
  5273                           ;main.c: 158: pwrLEDtoggle++;
  5274  0B6A  3001               	movlw	1
  5275  0B6B  07DC               	addwf	_pwrLEDtoggle^(0+512),f
  5276  0B6C  3000               	movlw	0
  5277  0B6D  3DDD               	addwfc	(_pwrLEDtoggle+1)^(0+512),f
  5278                           
  5279                           ;main.c: 159: if(pwrLEDtoggle == 100)
  5280  0B6E  3064               	movlw	100
  5281  0B6F  065C               	xorwf	_pwrLEDtoggle^(0+512),w
  5282  0B70  045D               	iorwf	(_pwrLEDtoggle+1)^(0+512),w
  5283  0B71  1D03               	skipz
  5284  0B72  2B7B               	goto	l6628
  5285                           
  5286                           ;main.c: 160: {
  5287                           ;main.c: 161: pwrLEDtoggle = 0;
  5288  0B73  01DC               	clrf	_pwrLEDtoggle^(0+512)
  5289  0B74  01DD               	clrf	(_pwrLEDtoggle+1)^(0+512)
  5290                           
  5291                           ;main.c: 162: LATC ^= 0b00000010;
  5292  0B75  3002               	movlw	2
  5293  0B76  00D5               	movwf	??_main^(0+512)
  5294  0B77  0855               	movf	??_main^(0+512),w
  5295  0B78  0022               	movlb	2	; select bank2
  5296  0B79  068E               	xorwf	14,f	;volatile
  5297  0B7A  0024               	movlb	4	; select bank4
  5298  0B7B                     l6628:	
  5299                           
  5300                           ;main.c: 163: }
  5301                           ;main.c: 164: }
  5302                           ;main.c: 166: if(SinLEDtimer < 100)
  5303  0B7B  3000               	movlw	0
  5304  0B7C  0024               	movlb	4	; select bank4
  5305  0B7D  025B               	subwf	(_SinLEDtimer+1)^(0+512),w
  5306  0B7E  3064               	movlw	100
  5307  0B7F  1903               	skipnz
  5308  0B80  025A               	subwf	_SinLEDtimer^(0+512),w
  5309  0B81  1803               	skipnc
  5310  0B82  2B88               	goto	l6632
  5311                           
  5312                           ;main.c: 167: {
  5313                           ;main.c: 168: SinLEDtimer++;
  5314  0B83  3001               	movlw	1
  5315  0B84  07DA               	addwf	_SinLEDtimer^(0+512),f
  5316  0B85  3000               	movlw	0
  5317  0B86  3DDB               	addwfc	(_SinLEDtimer+1)^(0+512),f
  5318                           
  5319                           ;main.c: 169: }
  5320  0B87  2B25               	goto	l6608
  5321  0B88                     l6632:	
  5322                           
  5323                           ;main.c: 170: else
  5324                           ;main.c: 171: {
  5325                           ;main.c: 172: LATC &= ~0b00001000;
  5326  0B88  30F7               	movlw	247
  5327  0B89  00D5               	movwf	??_main^(0+512)
  5328  0B8A  0855               	movf	??_main^(0+512),w
  5329  0B8B  0022               	movlb	2	; select bank2
  5330  0B8C  058E               	andwf	14,f	;volatile
  5331  0B8D  2B25               	goto	l6608
  5332  0B8E                     __end_of_main:	
  5333                           
  5334                           	psect	text1
  5335  1C8D                     __ptext1:	
  5336 ;; *************** function ___ftge *****************
  5337 ;; Defined at:
  5338 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  5339 ;; Parameters:    Size  Location     Type
  5340 ;;  ff1             3    0[BANK4 ] float 
  5341 ;;  ff2             3    3[BANK4 ] float 
  5342 ;; Auto vars:     Size  Location     Type
  5343 ;;		None
  5344 ;; Return value:  Size  Location     Type
  5345 ;;		None               void
  5346 ;; Registers used:
  5347 ;;		wreg, status,2, status,0
  5348 ;; Tracked objects:
  5349 ;;		On entry : 0/0
  5350 ;;		On exit  : 0/0
  5351 ;;		Unchanged: 0/0
  5352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5353 ;;      Params:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5355 ;;      Temps:          0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  5356 ;;      Totals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0
  5357 ;;Total ram usage:        9 bytes
  5358 ;; Hardware stack levels used:    1
  5359 ;; Hardware stack levels required when called:    7
  5360 ;; This function calls:
  5361 ;;		Nothing
  5362 ;; This function is called by:
  5363 ;;		_main
  5364 ;; This function uses a non-reentrant model
  5365 ;;
  5366                           
  5367                           
  5368                           ;psect for function ___ftge
  5369  1C8D                     ___ftge:	
  5370                           
  5371                           ;incstack = 0
  5372                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  5373  1C8D  0024               	movlb	4	; select bank4
  5374  1C8E  1FA2               	btfss	(___ftge@ff1+2)^(0+512),7
  5375  1C8F  2CA4               	goto	l6556
  5376  1C90  0920               	comf	___ftge@ff1^(0+512),w
  5377  1C91  00A6               	movwf	??___ftge^(0+512)
  5378  1C92  0921               	comf	(___ftge@ff1+1)^(0+512),w
  5379  1C93  00A7               	movwf	(??___ftge^(0+512)+1)
  5380  1C94  0922               	comf	(___ftge@ff1+2)^(0+512),w
  5381  1C95  00A8               	movwf	(??___ftge^(0+512)+2)
  5382  1C96  0AA6               	incf	??___ftge^(0+512),f
  5383  1C97  1903               	skipnz
  5384  1C98  0AA7               	incf	(??___ftge^(0+512)+1),f
  5385  1C99  1903               	skipnz
  5386  1C9A  0AA8               	incf	(??___ftge^(0+512)+2),f
  5387  1C9B  3000               	movlw	0
  5388  1C9C  0726               	addwf	??___ftge^(0+512),w
  5389  1C9D  00A0               	movwf	___ftge@ff1^(0+512)
  5390  1C9E  3000               	movlw	0
  5391  1C9F  3D27               	addwfc	(??___ftge+1)^(0+512),w
  5392  1CA0  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5393  1CA1  3080               	movlw	128
  5394  1CA2  3D28               	addwfc	(??___ftge+2)^(0+512),w
  5395  1CA3  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5396  1CA4                     l6556:	
  5397  1CA4  1FA5               	btfss	(___ftge@ff2+2)^(0+512),7
  5398  1CA5  2CBA               	goto	l6560
  5399  1CA6  0923               	comf	___ftge@ff2^(0+512),w
  5400  1CA7  00A6               	movwf	??___ftge^(0+512)
  5401  1CA8  0924               	comf	(___ftge@ff2+1)^(0+512),w
  5402  1CA9  00A7               	movwf	(??___ftge^(0+512)+1)
  5403  1CAA  0925               	comf	(___ftge@ff2+2)^(0+512),w
  5404  1CAB  00A8               	movwf	(??___ftge^(0+512)+2)
  5405  1CAC  0AA6               	incf	??___ftge^(0+512),f
  5406  1CAD  1903               	skipnz
  5407  1CAE  0AA7               	incf	(??___ftge^(0+512)+1),f
  5408  1CAF  1903               	skipnz
  5409  1CB0  0AA8               	incf	(??___ftge^(0+512)+2),f
  5410  1CB1  3000               	movlw	0
  5411  1CB2  0726               	addwf	??___ftge^(0+512),w
  5412  1CB3  00A3               	movwf	___ftge@ff2^(0+512)
  5413  1CB4  3000               	movlw	0
  5414  1CB5  3D27               	addwfc	(??___ftge+1)^(0+512),w
  5415  1CB6  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5416  1CB7  3080               	movlw	128
  5417  1CB8  3D28               	addwfc	(??___ftge+2)^(0+512),w
  5418  1CB9  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5419  1CBA                     l6560:	
  5420  1CBA  3080               	movlw	128
  5421  1CBB  06A2               	xorwf	(___ftge@ff1+2)^(0+512),f
  5422  1CBC  3080               	movlw	128
  5423  1CBD  06A5               	xorwf	(___ftge@ff2+2)^(0+512),f
  5424  1CBE  0825               	movf	(___ftge@ff2+2)^(0+512),w
  5425  1CBF  0222               	subwf	(___ftge@ff1+2)^(0+512),w
  5426  1CC0  1D03               	skipz
  5427  1CC1  0008               	return
  5428  1CC2  0824               	movf	(___ftge@ff2+1)^(0+512),w
  5429  1CC3  0221               	subwf	(___ftge@ff1+1)^(0+512),w
  5430  1CC4  1D03               	skipz
  5431  1CC5  0008               	return
  5432  1CC6  0823               	movf	___ftge@ff2^(0+512),w
  5433  1CC7  0220               	subwf	___ftge@ff1^(0+512),w
  5434  1CC8  0008               	return
  5435  1CC9                     __end_of___ftge:	
  5436                           
  5437                           	psect	text2
  5438  10D1                     __ptext2:	
  5439 ;; *************** function _ReadVoltage *****************
  5440 ;; Defined at:
  5441 ;;		line 62 in file "ADC.c"
  5442 ;; Parameters:    Size  Location     Type
  5443 ;;		None
  5444 ;; Auto vars:     Size  Location     Type
  5445 ;;  voltage         3   48[BANK4 ] float 
  5446 ;;  temp            2   51[BANK4 ] unsigned int 
  5447 ;; Return value:  Size  Location     Type
  5448 ;;                  3   44[BANK4 ] unsigned int 
  5449 ;; Registers used:
  5450 ;;		wreg, status,2, status,0, pclath, cstack
  5451 ;; Tracked objects:
  5452 ;;		On entry : 0/0
  5453 ;;		On exit  : 0/0
  5454 ;;		Unchanged: 0/0
  5455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5456 ;;      Params:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  5457 ;;      Locals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  5458 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  5459 ;;      Totals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0
  5460 ;;Total ram usage:        9 bytes
  5461 ;; Hardware stack levels used:    1
  5462 ;; Hardware stack levels required when called:    9
  5463 ;; This function calls:
  5464 ;;		_DisableInternalADC
  5465 ;;		_InternalADC_Read
  5466 ;;		___ftdiv
  5467 ;;		___ftmul
  5468 ;;		___lwtoft
  5469 ;; This function is called by:
  5470 ;;		_main
  5471 ;; This function uses a non-reentrant model
  5472 ;;
  5473                           
  5474                           
  5475                           ;psect for function _ReadVoltage
  5476  10D1                     _ReadVoltage:	
  5477                           
  5478                           ;ADC.c: 64: unsigned int temp;
  5479                           ;ADC.c: 65: double voltage;
  5480                           ;ADC.c: 70: temp = InternalADC_Read(2);
  5481                           
  5482                           ;incstack = 0
  5483                           ; Regs used in _ReadVoltage: [wreg+status,2+status,0+pclath+cstack]
  5484  10D1  3002               	movlw	2
  5485  10D2  319D  25D1  3190   	fcall	_InternalADC_Read
  5486  10D5  0024               	movlb	4	; select bank4
  5487  10D6  082B               	movf	(?_InternalADC_Read+1)^(0+512),w
  5488  10D7  01D4               	clrf	(ReadVoltage@temp+1)^(0+512)
  5489  10D8  07D4               	addwf	(ReadVoltage@temp+1)^(0+512),f
  5490  10D9  082A               	movf	?_InternalADC_Read^(0+512),w
  5491  10DA  01D3               	clrf	ReadVoltage@temp^(0+512)
  5492  10DB  07D3               	addwf	ReadVoltage@temp^(0+512),f
  5493                           
  5494                           ;ADC.c: 71: DisableInternalADC();
  5495  10DC  3198  20F9  3190   	fcall	_DisableInternalADC
  5496                           
  5497                           ;ADC.c: 78: if((FVRCON & 0x03) == 0x03)
  5498  10DF  3003               	movlw	3
  5499  10E0  0022               	movlb	2	; select bank2
  5500  10E1  0517               	andwf	23,w	;volatile
  5501  10E2  0024               	movlb	4	; select bank4
  5502  10E3  00CF               	movwf	??_ReadVoltage^(0+512)
  5503  10E4  084F               	movf	??_ReadVoltage^(0+512),w
  5504  10E5  3A03               	xorlw	3
  5505  10E6  1D03               	skipz
  5506  10E7  28EE               	goto	l6542
  5507                           
  5508                           ;ADC.c: 79: {
  5509                           ;ADC.c: 81: temp <<= 2;
  5510  10E8  3002               	movlw	2
  5511  10E9                     u8455:	
  5512  10E9  35D3               	lslf	ReadVoltage@temp^(0+512),f
  5513  10EA  0DD4               	rlf	(ReadVoltage@temp+1)^(0+512),f
  5514  10EB  0B89               	decfsz	9,f
  5515  10EC  28E9               	goto	u8455
  5516                           
  5517                           ;ADC.c: 82: }
  5518  10ED  28FC               	goto	l6546
  5519  10EE                     l6542:	
  5520                           
  5521                           ;ADC.c: 83: else if((FVRCON & 0x03) == 0x02)
  5522  10EE  3003               	movlw	3
  5523  10EF  0022               	movlb	2	; select bank2
  5524  10F0  0517               	andwf	23,w	;volatile
  5525  10F1  0024               	movlb	4	; select bank4
  5526  10F2  00CF               	movwf	??_ReadVoltage^(0+512)
  5527  10F3  084F               	movf	??_ReadVoltage^(0+512),w
  5528  10F4  3A02               	xorlw	2
  5529  10F5  1D03               	skipz
  5530  10F6  28FC               	goto	l6546
  5531                           
  5532                           ;ADC.c: 84: {
  5533                           ;ADC.c: 86: temp <<= 1;
  5534  10F7  3001               	movlw	1
  5535  10F8                     u8475:	
  5536  10F8  35D3               	lslf	ReadVoltage@temp^(0+512),f
  5537  10F9  0DD4               	rlf	(ReadVoltage@temp+1)^(0+512),f
  5538  10FA  0B89               	decfsz	9,f
  5539  10FB  28F8               	goto	u8475
  5540  10FC                     l6546:	
  5541                           
  5542                           ;ADC.c: 87: }
  5543                           ;ADC.c: 88: voltage = ((double)temp / 1000) * 5.7;
  5544  10FC  3066               	movlw	102
  5545  10FD  00BC               	movwf	___ftmul@f1^(0+512)
  5546  10FE  30B6               	movlw	182
  5547  10FF  00BD               	movwf	(___ftmul@f1+1)^(0+512)
  5548  1100  3040               	movlw	64
  5549  1101  00BE               	movwf	(___ftmul@f1+2)^(0+512)
  5550  1102  3000               	movlw	0
  5551  1103  00AC               	movwf	___ftdiv@f2^(0+512)
  5552  1104  307A               	movlw	122
  5553  1105  00AD               	movwf	(___ftdiv@f2+1)^(0+512)
  5554  1106  3044               	movlw	68
  5555  1107  00AE               	movwf	(___ftdiv@f2+2)^(0+512)
  5556  1108  0854               	movf	(ReadVoltage@temp+1)^(0+512),w
  5557  1109  01A9               	clrf	(___lwtoft@c+1)^(0+512)
  5558  110A  07A9               	addwf	(___lwtoft@c+1)^(0+512),f
  5559  110B  0853               	movf	ReadVoltage@temp^(0+512),w
  5560  110C  01A8               	clrf	___lwtoft@c^(0+512)
  5561  110D  07A8               	addwf	___lwtoft@c^(0+512),f
  5562  110E  319A  220E  3190   	fcall	___lwtoft
  5563  1111  0024               	movlb	4	; select bank4
  5564  1112  0828               	movf	?___lwtoft^(0+512),w
  5565  1113  00AF               	movwf	___ftdiv@f1^(0+512)
  5566  1114  0829               	movf	(?___lwtoft+1)^(0+512),w
  5567  1115  00B0               	movwf	(___ftdiv@f1+1)^(0+512)
  5568  1116  082A               	movf	(?___lwtoft+2)^(0+512),w
  5569  1117  00B1               	movwf	(___ftdiv@f1+2)^(0+512)
  5570  1118  3192  22C5  3190   	fcall	___ftdiv
  5571  111B  0024               	movlb	4	; select bank4
  5572  111C  082C               	movf	?___ftdiv^(0+512),w
  5573  111D  00BF               	movwf	___ftmul@f2^(0+512)
  5574  111E  082D               	movf	(?___ftdiv+1)^(0+512),w
  5575  111F  00C0               	movwf	(___ftmul@f2+1)^(0+512)
  5576  1120  082E               	movf	(?___ftdiv+2)^(0+512),w
  5577  1121  00C1               	movwf	(___ftmul@f2+2)^(0+512)
  5578  1122  3186  2648         	fcall	___ftmul
  5579  1124  0024               	movlb	4	; select bank4
  5580  1125  083C               	movf	?___ftmul^(0+512),w
  5581  1126  00D0               	movwf	ReadVoltage@voltage^(0+512)
  5582  1127  083D               	movf	(?___ftmul+1)^(0+512),w
  5583  1128  00D1               	movwf	(ReadVoltage@voltage+1)^(0+512)
  5584  1129  083E               	movf	(?___ftmul+2)^(0+512),w
  5585  112A  00D2               	movwf	(ReadVoltage@voltage+2)^(0+512)
  5586                           
  5587                           ;ADC.c: 89: return voltage;
  5588  112B  0850               	movf	ReadVoltage@voltage^(0+512),w
  5589  112C  00CC               	movwf	?_ReadVoltage^(0+512)
  5590  112D  0851               	movf	(ReadVoltage@voltage+1)^(0+512),w
  5591  112E  00CD               	movwf	(?_ReadVoltage+1)^(0+512)
  5592  112F  0852               	movf	(ReadVoltage@voltage+2)^(0+512),w
  5593  1130  00CE               	movwf	(?_ReadVoltage+2)^(0+512)
  5594  1131  0008               	return
  5595  1132                     __end_of_ReadVoltage:	
  5596                           
  5597                           	psect	text3
  5598  1A0E                     __ptext3:	
  5599 ;; *************** function ___lwtoft *****************
  5600 ;; Defined at:
  5601 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwtoft.c"
  5602 ;; Parameters:    Size  Location     Type
  5603 ;;  c               2    8[BANK4 ] unsigned int 
  5604 ;; Auto vars:     Size  Location     Type
  5605 ;;		None
  5606 ;; Return value:  Size  Location     Type
  5607 ;;                  3    8[BANK4 ] float 
  5608 ;; Registers used:
  5609 ;;		wreg, status,2, status,0, pclath, cstack
  5610 ;; Tracked objects:
  5611 ;;		On entry : 0/0
  5612 ;;		On exit  : 0/0
  5613 ;;		Unchanged: 0/0
  5614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5615 ;;      Params:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  5616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5617 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  5618 ;;      Totals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  5619 ;;Total ram usage:        4 bytes
  5620 ;; Hardware stack levels used:    1
  5621 ;; Hardware stack levels required when called:    8
  5622 ;; This function calls:
  5623 ;;		___ftpack
  5624 ;; This function is called by:
  5625 ;;		_ReadVoltage
  5626 ;; This function uses a non-reentrant model
  5627 ;;
  5628                           
  5629                           
  5630                           ;psect for function ___lwtoft
  5631  1A0E                     ___lwtoft:	
  5632                           
  5633                           ;incstack = 0
  5634                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  5635  1A0E  0024               	movlb	4	; select bank4
  5636  1A0F  0828               	movf	___lwtoft@c^(0+512),w
  5637  1A10  00A0               	movwf	___ftpack@arg^(0+512)
  5638  1A11  0829               	movf	(___lwtoft@c+1)^(0+512),w
  5639  1A12  00A1               	movwf	(___ftpack@arg+1)^(0+512)
  5640  1A13  01A2               	clrf	(___ftpack@arg+2)^(0+512)
  5641  1A14  308E               	movlw	142
  5642  1A15  00AB               	movwf	??___lwtoft^(0+512)
  5643  1A16  082B               	movf	??___lwtoft^(0+512),w
  5644  1A17  00A3               	movwf	___ftpack@exp^(0+512)
  5645  1A18  01A4               	clrf	___ftpack@sign^(0+512)
  5646  1A19  3190  2070         	fcall	___ftpack
  5647  1A1B  0024               	movlb	4	; select bank4
  5648  1A1C  0820               	movf	?___ftpack^(0+512),w
  5649  1A1D  00A8               	movwf	?___lwtoft^(0+512)
  5650  1A1E  0821               	movf	(?___ftpack+1)^(0+512),w
  5651  1A1F  00A9               	movwf	(?___lwtoft+1)^(0+512)
  5652  1A20  0822               	movf	(?___ftpack+2)^(0+512),w
  5653  1A21  00AA               	movwf	(?___lwtoft+2)^(0+512)
  5654  1A22  0008               	return
  5655  1A23                     __end_of___lwtoft:	
  5656                           
  5657                           	psect	text4
  5658  0648                     __ptext4:	
  5659 ;; *************** function ___ftmul *****************
  5660 ;; Defined at:
  5661 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  5662 ;; Parameters:    Size  Location     Type
  5663 ;;  f1              3   28[BANK4 ] float 
  5664 ;;  f2              3   31[BANK4 ] float 
  5665 ;; Auto vars:     Size  Location     Type
  5666 ;;  f3_as_produc    3   39[BANK4 ] unsigned um
  5667 ;;  sign            1   43[BANK4 ] unsigned char 
  5668 ;;  cntr            1   42[BANK4 ] unsigned char 
  5669 ;;  exp             1   38[BANK4 ] unsigned char 
  5670 ;; Return value:  Size  Location     Type
  5671 ;;                  3   28[BANK4 ] float 
  5672 ;; Registers used:
  5673 ;;		wreg, status,2, status,0, pclath, cstack
  5674 ;; Tracked objects:
  5675 ;;		On entry : 0/0
  5676 ;;		On exit  : 0/0
  5677 ;;		Unchanged: 0/0
  5678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5679 ;;      Params:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5680 ;;      Locals:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5681 ;;      Temps:          0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  5682 ;;      Totals:         0       0       0       0       0      16       0       0       0       0       0       0       
      +0       0
  5683 ;;Total ram usage:       16 bytes
  5684 ;; Hardware stack levels used:    1
  5685 ;; Hardware stack levels required when called:    8
  5686 ;; This function calls:
  5687 ;;		___ftpack
  5688 ;; This function is called by:
  5689 ;;		_ReadVoltage
  5690 ;; This function uses a non-reentrant model
  5691 ;;
  5692                           
  5693                           
  5694                           ;psect for function ___ftmul
  5695  0648                     ___ftmul:	
  5696                           
  5697                           ;incstack = 0
  5698                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  5699  0648  0024               	movlb	4	; select bank4
  5700  0649  083C               	movf	___ftmul@f1^(0+512),w
  5701  064A  00C2               	movwf	??___ftmul^(0+512)
  5702  064B  083D               	movf	(___ftmul@f1+1)^(0+512),w
  5703  064C  00C3               	movwf	(??___ftmul^(0+512)+1)
  5704  064D  083E               	movf	(___ftmul@f1+2)^(0+512),w
  5705  064E  00C4               	movwf	(??___ftmul^(0+512)+2)
  5706  064F  1003               	clrc
  5707  0650  0D43               	rlf	(??___ftmul^(0+512)+1),w
  5708  0651  0D44               	rlf	(??___ftmul^(0+512)+2),w
  5709  0652  00C5               	movwf	(??___ftmul+3)^(0+512)
  5710  0653  0845               	movf	(??___ftmul+3)^(0+512),w
  5711  0654  00C6               	movwf	___ftmul@exp^(0+512)
  5712  0655  08C6               	movf	___ftmul@exp^(0+512),f
  5713  0656  1D03               	skipz
  5714  0657  2E5F               	goto	l6372
  5715  0658  3000               	movlw	0
  5716  0659  00BC               	movwf	?___ftmul^(0+512)
  5717  065A  3000               	movlw	0
  5718  065B  00BD               	movwf	(?___ftmul+1)^(0+512)
  5719  065C  3000               	movlw	0
  5720  065D  00BE               	movwf	(?___ftmul+2)^(0+512)
  5721  065E  0008               	return
  5722  065F                     l6372:	
  5723  065F  083F               	movf	___ftmul@f2^(0+512),w
  5724  0660  00C2               	movwf	??___ftmul^(0+512)
  5725  0661  0840               	movf	(___ftmul@f2+1)^(0+512),w
  5726  0662  00C3               	movwf	(??___ftmul^(0+512)+1)
  5727  0663  0841               	movf	(___ftmul@f2+2)^(0+512),w
  5728  0664  00C4               	movwf	(??___ftmul^(0+512)+2)
  5729  0665  1003               	clrc
  5730  0666  0D43               	rlf	(??___ftmul^(0+512)+1),w
  5731  0667  0D44               	rlf	(??___ftmul^(0+512)+2),w
  5732  0668  00C5               	movwf	(??___ftmul+3)^(0+512)
  5733  0669  0845               	movf	(??___ftmul+3)^(0+512),w
  5734  066A  00CB               	movwf	___ftmul@sign^(0+512)
  5735  066B  08CB               	movf	___ftmul@sign^(0+512),f
  5736  066C  1D03               	skipz
  5737  066D  2E75               	goto	l6378
  5738  066E  3000               	movlw	0
  5739  066F  00BC               	movwf	?___ftmul^(0+512)
  5740  0670  3000               	movlw	0
  5741  0671  00BD               	movwf	(?___ftmul+1)^(0+512)
  5742  0672  3000               	movlw	0
  5743  0673  00BE               	movwf	(?___ftmul+2)^(0+512)
  5744  0674  0008               	return
  5745  0675                     l6378:	
  5746  0675  084B               	movf	___ftmul@sign^(0+512),w
  5747  0676  3E7B               	addlw	123
  5748  0677  00C2               	movwf	??___ftmul^(0+512)
  5749  0678  0842               	movf	??___ftmul^(0+512),w
  5750  0679  07C6               	addwf	___ftmul@exp^(0+512),f
  5751  067A  083C               	movf	___ftmul@f1^(0+512),w
  5752  067B  00C2               	movwf	??___ftmul^(0+512)
  5753  067C  083D               	movf	(___ftmul@f1+1)^(0+512),w
  5754  067D  00C3               	movwf	(??___ftmul^(0+512)+1)
  5755  067E  083E               	movf	(___ftmul@f1+2)^(0+512),w
  5756  067F  00C4               	movwf	(??___ftmul^(0+512)+2)
  5757  0680  3010               	movlw	16
  5758  0681                     u8275:	
  5759  0681  36C4               	lsrf	(??___ftmul^(0+512)+2),f
  5760  0682  0CC3               	rrf	(??___ftmul^(0+512)+1),f
  5761  0683  0CC2               	rrf	??___ftmul^(0+512),f
  5762  0684  0B89               	decfsz	9,f
  5763  0685  2E81               	goto	u8275
  5764  0686  0842               	movf	??___ftmul^(0+512),w
  5765  0687  00C5               	movwf	(??___ftmul+3)^(0+512)
  5766  0688  0845               	movf	(??___ftmul+3)^(0+512),w
  5767  0689  00CB               	movwf	___ftmul@sign^(0+512)
  5768  068A  083F               	movf	___ftmul@f2^(0+512),w
  5769  068B  00C2               	movwf	??___ftmul^(0+512)
  5770  068C  0840               	movf	(___ftmul@f2+1)^(0+512),w
  5771  068D  00C3               	movwf	(??___ftmul^(0+512)+1)
  5772  068E  0841               	movf	(___ftmul@f2+2)^(0+512),w
  5773  068F  00C4               	movwf	(??___ftmul^(0+512)+2)
  5774  0690  3010               	movlw	16
  5775  0691                     u8285:	
  5776  0691  36C4               	lsrf	(??___ftmul^(0+512)+2),f
  5777  0692  0CC3               	rrf	(??___ftmul^(0+512)+1),f
  5778  0693  0CC2               	rrf	??___ftmul^(0+512),f
  5779  0694  0B89               	decfsz	9,f
  5780  0695  2E91               	goto	u8285
  5781  0696  0842               	movf	??___ftmul^(0+512),w
  5782  0697  00C5               	movwf	(??___ftmul+3)^(0+512)
  5783  0698  0845               	movf	(??___ftmul+3)^(0+512),w
  5784  0699  06CB               	xorwf	___ftmul@sign^(0+512),f
  5785  069A  3080               	movlw	128
  5786  069B  00C2               	movwf	??___ftmul^(0+512)
  5787  069C  0842               	movf	??___ftmul^(0+512),w
  5788  069D  05CB               	andwf	___ftmul@sign^(0+512),f
  5789  069E  17BD               	bsf	(___ftmul@f1^(0+512)+1),7
  5790  069F  17C0               	bsf	(___ftmul@f2^(0+512)+1),7
  5791  06A0  30FF               	movlw	255
  5792  06A1  05BF               	andwf	___ftmul@f2^(0+512),f
  5793  06A2  30FF               	movlw	255
  5794  06A3  05C0               	andwf	(___ftmul@f2+1)^(0+512),f
  5795  06A4  3000               	movlw	0
  5796  06A5  05C1               	andwf	(___ftmul@f2+2)^(0+512),f
  5797  06A6  3000               	movlw	0
  5798  06A7  00C7               	movwf	___ftmul@f3_as_product^(0+512)
  5799  06A8  3000               	movlw	0
  5800  06A9  00C8               	movwf	(___ftmul@f3_as_product+1)^(0+512)
  5801  06AA  3000               	movlw	0
  5802  06AB  00C9               	movwf	(___ftmul@f3_as_product+2)^(0+512)
  5803  06AC  3007               	movlw	7
  5804  06AD  00C2               	movwf	??___ftmul^(0+512)
  5805  06AE  0842               	movf	??___ftmul^(0+512),w
  5806  06AF  00CA               	movwf	___ftmul@cntr^(0+512)
  5807  06B0                     l6390:	
  5808  06B0  1C3C               	btfss	___ftmul@f1^(0+512),0
  5809  06B1  2EB8               	goto	l6394
  5810  06B2  083F               	movf	___ftmul@f2^(0+512),w
  5811  06B3  07C7               	addwf	___ftmul@f3_as_product^(0+512),f
  5812  06B4  0840               	movf	(___ftmul@f2+1)^(0+512),w
  5813  06B5  3DC8               	addwfc	(___ftmul@f3_as_product+1)^(0+512),f
  5814  06B6  0841               	movf	(___ftmul@f2+2)^(0+512),w
  5815  06B7  3DC9               	addwfc	(___ftmul@f3_as_product+2)^(0+512),f
  5816  06B8                     l6394:	
  5817  06B8  3001               	movlw	1
  5818  06B9                     u8305:	
  5819  06B9  36BE               	lsrf	(___ftmul@f1+2)^(0+512),f
  5820  06BA  0CBD               	rrf	(___ftmul@f1+1)^(0+512),f
  5821  06BB  0CBC               	rrf	___ftmul@f1^(0+512),f
  5822  06BC  0B89               	decfsz	9,f
  5823  06BD  2EB9               	goto	u8305
  5824  06BE  3001               	movlw	1
  5825  06BF                     u8315:	
  5826  06BF  35BF               	lslf	___ftmul@f2^(0+512),f
  5827  06C0  0DC0               	rlf	(___ftmul@f2+1)^(0+512),f
  5828  06C1  0DC1               	rlf	(___ftmul@f2+2)^(0+512),f
  5829  06C2  0B89               	decfsz	9,f
  5830  06C3  2EBF               	goto	u8315
  5831  06C4  3001               	movlw	1
  5832  06C5  02CA               	subwf	___ftmul@cntr^(0+512),f
  5833  06C6  1D03               	btfss	3,2
  5834  06C7  2EB0               	goto	l6390
  5835  06C8  3009               	movlw	9
  5836  06C9  00C2               	movwf	??___ftmul^(0+512)
  5837  06CA  0842               	movf	??___ftmul^(0+512),w
  5838  06CB  00CA               	movwf	___ftmul@cntr^(0+512)
  5839  06CC                     l6402:	
  5840  06CC  1C3C               	btfss	___ftmul@f1^(0+512),0
  5841  06CD  2ED4               	goto	l6406
  5842  06CE  083F               	movf	___ftmul@f2^(0+512),w
  5843  06CF  07C7               	addwf	___ftmul@f3_as_product^(0+512),f
  5844  06D0  0840               	movf	(___ftmul@f2+1)^(0+512),w
  5845  06D1  3DC8               	addwfc	(___ftmul@f3_as_product+1)^(0+512),f
  5846  06D2  0841               	movf	(___ftmul@f2+2)^(0+512),w
  5847  06D3  3DC9               	addwfc	(___ftmul@f3_as_product+2)^(0+512),f
  5848  06D4                     l6406:	
  5849  06D4  3001               	movlw	1
  5850  06D5                     u8345:	
  5851  06D5  36BE               	lsrf	(___ftmul@f1+2)^(0+512),f
  5852  06D6  0CBD               	rrf	(___ftmul@f1+1)^(0+512),f
  5853  06D7  0CBC               	rrf	___ftmul@f1^(0+512),f
  5854  06D8  0B89               	decfsz	9,f
  5855  06D9  2ED5               	goto	u8345
  5856  06DA  3001               	movlw	1
  5857  06DB                     u8355:	
  5858  06DB  36C9               	lsrf	(___ftmul@f3_as_product+2)^(0+512),f
  5859  06DC  0CC8               	rrf	(___ftmul@f3_as_product+1)^(0+512),f
  5860  06DD  0CC7               	rrf	___ftmul@f3_as_product^(0+512),f
  5861  06DE  0B89               	decfsz	9,f
  5862  06DF  2EDB               	goto	u8355
  5863  06E0  3001               	movlw	1
  5864  06E1  02CA               	subwf	___ftmul@cntr^(0+512),f
  5865  06E2  1D03               	btfss	3,2
  5866  06E3  2ECC               	goto	l6402
  5867  06E4  0847               	movf	___ftmul@f3_as_product^(0+512),w
  5868  06E5  00A0               	movwf	___ftpack@arg^(0+512)
  5869  06E6  0848               	movf	(___ftmul@f3_as_product+1)^(0+512),w
  5870  06E7  00A1               	movwf	(___ftpack@arg+1)^(0+512)
  5871  06E8  0849               	movf	(___ftmul@f3_as_product+2)^(0+512),w
  5872  06E9  00A2               	movwf	(___ftpack@arg+2)^(0+512)
  5873  06EA  0846               	movf	___ftmul@exp^(0+512),w
  5874  06EB  00C2               	movwf	??___ftmul^(0+512)
  5875  06EC  0842               	movf	??___ftmul^(0+512),w
  5876  06ED  00A3               	movwf	___ftpack@exp^(0+512)
  5877  06EE  084B               	movf	___ftmul@sign^(0+512),w
  5878  06EF  00C3               	movwf	(??___ftmul+1)^(0+512)
  5879  06F0  0843               	movf	(??___ftmul+1)^(0+512),w
  5880  06F1  00A4               	movwf	___ftpack@sign^(0+512)
  5881  06F2  3190  2070         	fcall	___ftpack
  5882  06F4  0024               	movlb	4	; select bank4
  5883  06F5  0820               	movf	?___ftpack^(0+512),w
  5884  06F6  00BC               	movwf	?___ftmul^(0+512)
  5885  06F7  0821               	movf	(?___ftpack+1)^(0+512),w
  5886  06F8  00BD               	movwf	(?___ftmul+1)^(0+512)
  5887  06F9  0822               	movf	(?___ftpack+2)^(0+512),w
  5888  06FA  00BE               	movwf	(?___ftmul+2)^(0+512)
  5889  06FB  0008               	return
  5890  06FC                     __end_of___ftmul:	
  5891                           
  5892                           	psect	text5
  5893  12C5                     __ptext5:	
  5894 ;; *************** function ___ftdiv *****************
  5895 ;; Defined at:
  5896 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic\ftdiv.c"
  5897 ;; Parameters:    Size  Location     Type
  5898 ;;  f2              3   12[BANK4 ] float 
  5899 ;;  f1              3   15[BANK4 ] float 
  5900 ;; Auto vars:     Size  Location     Type
  5901 ;;  f3              3   23[BANK4 ] float 
  5902 ;;  sign            1   27[BANK4 ] unsigned char 
  5903 ;;  exp             1   26[BANK4 ] unsigned char 
  5904 ;;  cntr            1   22[BANK4 ] unsigned char 
  5905 ;; Return value:  Size  Location     Type
  5906 ;;                  3   12[BANK4 ] float 
  5907 ;; Registers used:
  5908 ;;		wreg, status,2, status,0, pclath, cstack
  5909 ;; Tracked objects:
  5910 ;;		On entry : 0/0
  5911 ;;		On exit  : 0/0
  5912 ;;		Unchanged: 0/0
  5913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5914 ;;      Params:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5915 ;;      Locals:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5916 ;;      Temps:          0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  5917 ;;      Totals:         0       0       0       0       0      16       0       0       0       0       0       0       
      +0       0
  5918 ;;Total ram usage:       16 bytes
  5919 ;; Hardware stack levels used:    1
  5920 ;; Hardware stack levels required when called:    8
  5921 ;; This function calls:
  5922 ;;		___ftpack
  5923 ;; This function is called by:
  5924 ;;		_ReadVoltage
  5925 ;; This function uses a non-reentrant model
  5926 ;;
  5927                           
  5928                           
  5929                           ;psect for function ___ftdiv
  5930  12C5                     ___ftdiv:	
  5931                           
  5932                           ;incstack = 0
  5933                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  5934  12C5  0024               	movlb	4	; select bank4
  5935  12C6  082F               	movf	___ftdiv@f1^(0+512),w
  5936  12C7  00B2               	movwf	??___ftdiv^(0+512)
  5937  12C8  0830               	movf	(___ftdiv@f1+1)^(0+512),w
  5938  12C9  00B3               	movwf	(??___ftdiv^(0+512)+1)
  5939  12CA  0831               	movf	(___ftdiv@f1+2)^(0+512),w
  5940  12CB  00B4               	movwf	(??___ftdiv^(0+512)+2)
  5941  12CC  1003               	clrc
  5942  12CD  0D33               	rlf	(??___ftdiv^(0+512)+1),w
  5943  12CE  0D34               	rlf	(??___ftdiv^(0+512)+2),w
  5944  12CF  00B5               	movwf	(??___ftdiv+3)^(0+512)
  5945  12D0  0835               	movf	(??___ftdiv+3)^(0+512),w
  5946  12D1  00BA               	movwf	___ftdiv@exp^(0+512)
  5947  12D2  08BA               	movf	___ftdiv@exp^(0+512),f
  5948  12D3  1D03               	skipz
  5949  12D4  2ADC               	goto	l6330
  5950  12D5  3000               	movlw	0
  5951  12D6  00AC               	movwf	?___ftdiv^(0+512)
  5952  12D7  3000               	movlw	0
  5953  12D8  00AD               	movwf	(?___ftdiv+1)^(0+512)
  5954  12D9  3000               	movlw	0
  5955  12DA  00AE               	movwf	(?___ftdiv+2)^(0+512)
  5956  12DB  0008               	return
  5957  12DC                     l6330:	
  5958  12DC  082C               	movf	___ftdiv@f2^(0+512),w
  5959  12DD  00B2               	movwf	??___ftdiv^(0+512)
  5960  12DE  082D               	movf	(___ftdiv@f2+1)^(0+512),w
  5961  12DF  00B3               	movwf	(??___ftdiv^(0+512)+1)
  5962  12E0  082E               	movf	(___ftdiv@f2+2)^(0+512),w
  5963  12E1  00B4               	movwf	(??___ftdiv^(0+512)+2)
  5964  12E2  1003               	clrc
  5965  12E3  0D33               	rlf	(??___ftdiv^(0+512)+1),w
  5966  12E4  0D34               	rlf	(??___ftdiv^(0+512)+2),w
  5967  12E5  00B5               	movwf	(??___ftdiv+3)^(0+512)
  5968  12E6  0835               	movf	(??___ftdiv+3)^(0+512),w
  5969  12E7  00BB               	movwf	___ftdiv@sign^(0+512)
  5970  12E8  08BB               	movf	___ftdiv@sign^(0+512),f
  5971  12E9  1D03               	skipz
  5972  12EA  2AF2               	goto	l6336
  5973  12EB  3000               	movlw	0
  5974  12EC  00AC               	movwf	?___ftdiv^(0+512)
  5975  12ED  3000               	movlw	0
  5976  12EE  00AD               	movwf	(?___ftdiv+1)^(0+512)
  5977  12EF  3000               	movlw	0
  5978  12F0  00AE               	movwf	(?___ftdiv+2)^(0+512)
  5979  12F1  0008               	return
  5980  12F2                     l6336:	
  5981  12F2  3000               	movlw	0
  5982  12F3  00B7               	movwf	___ftdiv@f3^(0+512)
  5983  12F4  3000               	movlw	0
  5984  12F5  00B8               	movwf	(___ftdiv@f3+1)^(0+512)
  5985  12F6  3000               	movlw	0
  5986  12F7  00B9               	movwf	(___ftdiv@f3+2)^(0+512)
  5987  12F8  3089               	movlw	137
  5988  12F9  073B               	addwf	___ftdiv@sign^(0+512),w
  5989  12FA  00B2               	movwf	??___ftdiv^(0+512)
  5990  12FB  0832               	movf	??___ftdiv^(0+512),w
  5991  12FC  02BA               	subwf	___ftdiv@exp^(0+512),f
  5992  12FD  082F               	movf	___ftdiv@f1^(0+512),w
  5993  12FE  00B2               	movwf	??___ftdiv^(0+512)
  5994  12FF  0830               	movf	(___ftdiv@f1+1)^(0+512),w
  5995  1300  00B3               	movwf	(??___ftdiv^(0+512)+1)
  5996  1301  0831               	movf	(___ftdiv@f1+2)^(0+512),w
  5997  1302  00B4               	movwf	(??___ftdiv^(0+512)+2)
  5998  1303  3010               	movlw	16
  5999  1304                     u8195:	
  6000  1304  36B4               	lsrf	(??___ftdiv^(0+512)+2),f
  6001  1305  0CB3               	rrf	(??___ftdiv^(0+512)+1),f
  6002  1306  0CB2               	rrf	??___ftdiv^(0+512),f
  6003  1307  0B89               	decfsz	9,f
  6004  1308  2B04               	goto	u8195
  6005  1309  0832               	movf	??___ftdiv^(0+512),w
  6006  130A  00B5               	movwf	(??___ftdiv+3)^(0+512)
  6007  130B  0835               	movf	(??___ftdiv+3)^(0+512),w
  6008  130C  00BB               	movwf	___ftdiv@sign^(0+512)
  6009  130D  082C               	movf	___ftdiv@f2^(0+512),w
  6010  130E  00B2               	movwf	??___ftdiv^(0+512)
  6011  130F  082D               	movf	(___ftdiv@f2+1)^(0+512),w
  6012  1310  00B3               	movwf	(??___ftdiv^(0+512)+1)
  6013  1311  082E               	movf	(___ftdiv@f2+2)^(0+512),w
  6014  1312  00B4               	movwf	(??___ftdiv^(0+512)+2)
  6015  1313  3010               	movlw	16
  6016  1314                     u8205:	
  6017  1314  36B4               	lsrf	(??___ftdiv^(0+512)+2),f
  6018  1315  0CB3               	rrf	(??___ftdiv^(0+512)+1),f
  6019  1316  0CB2               	rrf	??___ftdiv^(0+512),f
  6020  1317  0B89               	decfsz	9,f
  6021  1318  2B14               	goto	u8205
  6022  1319  0832               	movf	??___ftdiv^(0+512),w
  6023  131A  00B5               	movwf	(??___ftdiv+3)^(0+512)
  6024  131B  0835               	movf	(??___ftdiv+3)^(0+512),w
  6025  131C  06BB               	xorwf	___ftdiv@sign^(0+512),f
  6026  131D  3080               	movlw	128
  6027  131E  00B2               	movwf	??___ftdiv^(0+512)
  6028  131F  0832               	movf	??___ftdiv^(0+512),w
  6029  1320  05BB               	andwf	___ftdiv@sign^(0+512),f
  6030  1321  17B0               	bsf	(___ftdiv@f1^(0+512)+1),7
  6031  1322  30FF               	movlw	255
  6032  1323  05AF               	andwf	___ftdiv@f1^(0+512),f
  6033  1324  30FF               	movlw	255
  6034  1325  05B0               	andwf	(___ftdiv@f1+1)^(0+512),f
  6035  1326  3000               	movlw	0
  6036  1327  05B1               	andwf	(___ftdiv@f1+2)^(0+512),f
  6037  1328  17AD               	bsf	(___ftdiv@f2^(0+512)+1),7
  6038  1329  30FF               	movlw	255
  6039  132A  05AC               	andwf	___ftdiv@f2^(0+512),f
  6040  132B  30FF               	movlw	255
  6041  132C  05AD               	andwf	(___ftdiv@f2+1)^(0+512),f
  6042  132D  3000               	movlw	0
  6043  132E  05AE               	andwf	(___ftdiv@f2+2)^(0+512),f
  6044  132F  3018               	movlw	24
  6045  1330  00B2               	movwf	??___ftdiv^(0+512)
  6046  1331  0832               	movf	??___ftdiv^(0+512),w
  6047  1332  00B6               	movwf	___ftdiv@cntr^(0+512)
  6048  1333                     l6350:	
  6049  1333  3001               	movlw	1
  6050  1334                     u8215:	
  6051  1334  35B7               	lslf	___ftdiv@f3^(0+512),f
  6052  1335  0DB8               	rlf	(___ftdiv@f3+1)^(0+512),f
  6053  1336  0DB9               	rlf	(___ftdiv@f3+2)^(0+512),f
  6054  1337  0B89               	decfsz	9,f
  6055  1338  2B34               	goto	u8215
  6056  1339  082E               	movf	(___ftdiv@f2+2)^(0+512),w
  6057  133A  0231               	subwf	(___ftdiv@f1+2)^(0+512),w
  6058  133B  1D03               	skipz
  6059  133C  2B43               	goto	u8225
  6060  133D  082D               	movf	(___ftdiv@f2+1)^(0+512),w
  6061  133E  0230               	subwf	(___ftdiv@f1+1)^(0+512),w
  6062  133F  1D03               	skipz
  6063  1340  2B43               	goto	u8225
  6064  1341  082C               	movf	___ftdiv@f2^(0+512),w
  6065  1342  022F               	subwf	___ftdiv@f1^(0+512),w
  6066  1343                     u8225:	
  6067  1343  1C03               	skipc
  6068  1344  2B4C               	goto	l6358
  6069  1345  082C               	movf	___ftdiv@f2^(0+512),w
  6070  1346  02AF               	subwf	___ftdiv@f1^(0+512),f
  6071  1347  082D               	movf	(___ftdiv@f2+1)^(0+512),w
  6072  1348  3BB0               	subwfb	(___ftdiv@f1+1)^(0+512),f
  6073  1349  082E               	movf	(___ftdiv@f2+2)^(0+512),w
  6074  134A  3BB1               	subwfb	(___ftdiv@f1+2)^(0+512),f
  6075  134B  1437               	bsf	___ftdiv@f3^(0+512),0
  6076  134C                     l6358:	
  6077  134C  3001               	movlw	1
  6078  134D                     u8235:	
  6079  134D  35AF               	lslf	___ftdiv@f1^(0+512),f
  6080  134E  0DB0               	rlf	(___ftdiv@f1+1)^(0+512),f
  6081  134F  0DB1               	rlf	(___ftdiv@f1+2)^(0+512),f
  6082  1350  0B89               	decfsz	9,f
  6083  1351  2B4D               	goto	u8235
  6084  1352  3001               	movlw	1
  6085  1353  02B6               	subwf	___ftdiv@cntr^(0+512),f
  6086  1354  1D03               	btfss	3,2
  6087  1355  2B33               	goto	l6350
  6088  1356  0837               	movf	___ftdiv@f3^(0+512),w
  6089  1357  00A0               	movwf	___ftpack@arg^(0+512)
  6090  1358  0838               	movf	(___ftdiv@f3+1)^(0+512),w
  6091  1359  00A1               	movwf	(___ftpack@arg+1)^(0+512)
  6092  135A  0839               	movf	(___ftdiv@f3+2)^(0+512),w
  6093  135B  00A2               	movwf	(___ftpack@arg+2)^(0+512)
  6094  135C  083A               	movf	___ftdiv@exp^(0+512),w
  6095  135D  00B2               	movwf	??___ftdiv^(0+512)
  6096  135E  0832               	movf	??___ftdiv^(0+512),w
  6097  135F  00A3               	movwf	___ftpack@exp^(0+512)
  6098  1360  083B               	movf	___ftdiv@sign^(0+512),w
  6099  1361  00B3               	movwf	(??___ftdiv+1)^(0+512)
  6100  1362  0833               	movf	(??___ftdiv+1)^(0+512),w
  6101  1363  00A4               	movwf	___ftpack@sign^(0+512)
  6102  1364  3190  2070         	fcall	___ftpack
  6103  1366  0024               	movlb	4	; select bank4
  6104  1367  0820               	movf	?___ftpack^(0+512),w
  6105  1368  00AC               	movwf	?___ftdiv^(0+512)
  6106  1369  0821               	movf	(?___ftpack+1)^(0+512),w
  6107  136A  00AD               	movwf	(?___ftdiv+1)^(0+512)
  6108  136B  0822               	movf	(?___ftpack+2)^(0+512),w
  6109  136C  00AE               	movwf	(?___ftdiv+2)^(0+512)
  6110  136D  0008               	return
  6111  136E                     __end_of___ftdiv:	
  6112                           
  6113                           	psect	text6
  6114  1070                     __ptext6:	
  6115 ;; *************** function ___ftpack *****************
  6116 ;; Defined at:
  6117 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  6118 ;; Parameters:    Size  Location     Type
  6119 ;;  arg             3    0[BANK4 ] unsigned um
  6120 ;;  exp             1    3[BANK4 ] unsigned char 
  6121 ;;  sign            1    4[BANK4 ] unsigned char 
  6122 ;; Auto vars:     Size  Location     Type
  6123 ;;		None
  6124 ;; Return value:  Size  Location     Type
  6125 ;;                  3    0[BANK4 ] float 
  6126 ;; Registers used:
  6127 ;;		wreg, status,2, status,0
  6128 ;; Tracked objects:
  6129 ;;		On entry : 0/0
  6130 ;;		On exit  : 0/0
  6131 ;;		Unchanged: 0/0
  6132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6133 ;;      Params:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  6134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6135 ;;      Temps:          0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  6136 ;;      Totals:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  6137 ;;Total ram usage:        8 bytes
  6138 ;; Hardware stack levels used:    1
  6139 ;; Hardware stack levels required when called:    7
  6140 ;; This function calls:
  6141 ;;		Nothing
  6142 ;; This function is called by:
  6143 ;;		___ftdiv
  6144 ;;		___ftmul
  6145 ;;		___lwtoft
  6146 ;; This function uses a non-reentrant model
  6147 ;;
  6148                           
  6149                           
  6150                           ;psect for function ___ftpack
  6151  1070                     ___ftpack:	
  6152                           
  6153                           ;incstack = 0
  6154                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6155  1070  0024               	movlb	4	; select bank4
  6156  1071  0823               	movf	___ftpack@exp^(0+512),w
  6157  1072  1903               	btfsc	3,2
  6158  1073  2879               	goto	l6096
  6159  1074  0822               	movf	(___ftpack@arg+2)^(0+512),w
  6160  1075  0421               	iorwf	(___ftpack@arg+1)^(0+512),w
  6161  1076  0420               	iorwf	___ftpack@arg^(0+512),w
  6162  1077  1D03               	skipz
  6163  1078  288A               	goto	l6102
  6164  1079                     l6096:	
  6165  1079  3000               	movlw	0
  6166  107A  00A0               	movwf	?___ftpack^(0+512)
  6167  107B  3000               	movlw	0
  6168  107C  00A1               	movwf	(?___ftpack+1)^(0+512)
  6169  107D  3000               	movlw	0
  6170  107E  00A2               	movwf	(?___ftpack+2)^(0+512)
  6171  107F  0008               	return
  6172  1080                     l6100:	
  6173  1080  3001               	movlw	1
  6174  1081  00A5               	movwf	??___ftpack^(0+512)
  6175  1082  0825               	movf	??___ftpack^(0+512),w
  6176  1083  07A3               	addwf	___ftpack@exp^(0+512),f
  6177  1084  3001               	movlw	1
  6178  1085                     u7815:	
  6179  1085  36A2               	lsrf	(___ftpack@arg+2)^(0+512),f
  6180  1086  0CA1               	rrf	(___ftpack@arg+1)^(0+512),f
  6181  1087  0CA0               	rrf	___ftpack@arg^(0+512),f
  6182  1088  0B89               	decfsz	9,f
  6183  1089  2885               	goto	u7815
  6184  108A                     l6102:	
  6185  108A  30FE               	movlw	254
  6186  108B  0522               	andwf	(___ftpack@arg+2)^(0+512),w
  6187  108C  1903               	btfsc	3,2
  6188  108D  28A3               	goto	l1254
  6189  108E  2880               	goto	l6100
  6190  108F                     l6104:	
  6191  108F  3001               	movlw	1
  6192  1090  00A5               	movwf	??___ftpack^(0+512)
  6193  1091  0825               	movf	??___ftpack^(0+512),w
  6194  1092  07A3               	addwf	___ftpack@exp^(0+512),f
  6195  1093  3001               	movlw	1
  6196  1094  07A0               	addwf	___ftpack@arg^(0+512),f
  6197  1095  3000               	movlw	0
  6198  1096  1803               	skipnc
  6199  1097  3001               	movlw	1
  6200  1098  07A1               	addwf	(___ftpack@arg+1)^(0+512),f
  6201  1099  3000               	movlw	0
  6202  109A  1803               	skipnc
  6203  109B  3001               	movlw	1
  6204  109C  07A2               	addwf	(___ftpack@arg+2)^(0+512),f
  6205  109D  3001               	movlw	1
  6206  109E                     u7835:	
  6207  109E  36A2               	lsrf	(___ftpack@arg+2)^(0+512),f
  6208  109F  0CA1               	rrf	(___ftpack@arg+1)^(0+512),f
  6209  10A0  0CA0               	rrf	___ftpack@arg^(0+512),f
  6210  10A1  0B89               	decfsz	9,f
  6211  10A2  289E               	goto	u7835
  6212  10A3                     l1254:	
  6213  10A3  30FF               	movlw	255
  6214  10A4  0522               	andwf	(___ftpack@arg+2)^(0+512),w
  6215  10A5  1903               	btfsc	3,2
  6216  10A6  28B0               	goto	l6112
  6217  10A7  288F               	goto	l6104
  6218  10A8                     l6110:	
  6219  10A8  3001               	movlw	1
  6220  10A9  02A3               	subwf	___ftpack@exp^(0+512),f
  6221  10AA  3001               	movlw	1
  6222  10AB                     u7855:	
  6223  10AB  35A0               	lslf	___ftpack@arg^(0+512),f
  6224  10AC  0DA1               	rlf	(___ftpack@arg+1)^(0+512),f
  6225  10AD  0DA2               	rlf	(___ftpack@arg+2)^(0+512),f
  6226  10AE  0B89               	decfsz	9,f
  6227  10AF  28AB               	goto	u7855
  6228  10B0                     l6112:	
  6229  10B0  1FA1               	btfss	(___ftpack@arg+1)^(0+512),7
  6230  10B1  28A8               	goto	l6110
  6231  10B2  1823               	btfsc	___ftpack@exp^(0+512),0
  6232  10B3  28BA               	goto	l1260
  6233  10B4  30FF               	movlw	255
  6234  10B5  05A0               	andwf	___ftpack@arg^(0+512),f
  6235  10B6  307F               	movlw	127
  6236  10B7  05A1               	andwf	(___ftpack@arg+1)^(0+512),f
  6237  10B8  30FF               	movlw	255
  6238  10B9  05A2               	andwf	(___ftpack@arg+2)^(0+512),f
  6239  10BA                     l1260:	
  6240  10BA  1003               	clrc
  6241  10BB  0CA3               	rrf	___ftpack@exp^(0+512),f
  6242  10BC  0823               	movf	___ftpack@exp^(0+512),w
  6243  10BD  00A5               	movwf	??___ftpack^(0+512)
  6244  10BE  01A6               	clrf	(??___ftpack^(0+512)+1)
  6245  10BF  01A7               	clrf	(??___ftpack^(0+512)+2)
  6246  10C0  3010               	movlw	16
  6247  10C1                     u7885:	
  6248  10C1  35A5               	lslf	??___ftpack^(0+512),f
  6249  10C2  0DA6               	rlf	(??___ftpack^(0+512)+1),f
  6250  10C3  0DA7               	rlf	(??___ftpack^(0+512)+2),f
  6251  10C4  0B89               	decfsz	9,f
  6252  10C5  28C1               	goto	u7885
  6253  10C6  0825               	movf	??___ftpack^(0+512),w
  6254  10C7  04A0               	iorwf	___ftpack@arg^(0+512),f
  6255  10C8  0826               	movf	(??___ftpack+1)^(0+512),w
  6256  10C9  04A1               	iorwf	(___ftpack@arg+1)^(0+512),f
  6257  10CA  0827               	movf	(??___ftpack+2)^(0+512),w
  6258  10CB  04A2               	iorwf	(___ftpack@arg+2)^(0+512),f
  6259  10CC  0824               	movf	___ftpack@sign^(0+512),w
  6260  10CD  1903               	btfsc	3,2
  6261  10CE  0008               	return
  6262  10CF  17A2               	bsf	(___ftpack@arg^(0+512)+2),7
  6263  10D0  0008               	return
  6264  10D1                     __end_of___ftpack:	
  6265                           
  6266                           	psect	text7
  6267  1DD1                     __ptext7:	
  6268 ;; *************** function _InternalADC_Read *****************
  6269 ;; Defined at:
  6270 ;;		line 97 in file "ADC.c"
  6271 ;; Parameters:    Size  Location     Type
  6272 ;;  channel         1    wreg     unsigned char 
  6273 ;; Auto vars:     Size  Location     Type
  6274 ;;  channel         1   14[BANK4 ] unsigned char 
  6275 ;; Return value:  Size  Location     Type
  6276 ;;                  2   10[BANK4 ] unsigned int 
  6277 ;; Registers used:
  6278 ;;		wreg, status,2, status,0, pclath, cstack
  6279 ;; Tracked objects:
  6280 ;;		On entry : 0/0
  6281 ;;		On exit  : 0/0
  6282 ;;		Unchanged: 0/0
  6283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6284 ;;      Params:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  6285 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6286 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  6287 ;;      Totals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  6288 ;;Total ram usage:        5 bytes
  6289 ;; Hardware stack levels used:    1
  6290 ;; Hardware stack levels required when called:    8
  6291 ;; This function calls:
  6292 ;;		_delayUS
  6293 ;; This function is called by:
  6294 ;;		_ReadVoltage
  6295 ;; This function uses a non-reentrant model
  6296 ;;
  6297                           
  6298                           
  6299                           ;psect for function _InternalADC_Read
  6300  1DD1                     _InternalADC_Read:	
  6301                           
  6302                           ;incstack = 0
  6303                           ; Regs used in _InternalADC_Read: [wreg+status,2+status,0+pclath+cstack]
  6304                           ;InternalADC_Read@channel stored from wreg
  6305  1DD1  0024               	movlb	4	; select bank4
  6306  1DD2  00AE               	movwf	InternalADC_Read@channel^(0+512)
  6307                           
  6308                           ;ADC.c: 99: ADCON0 =0;
  6309  1DD3  0021               	movlb	1	; select bank1
  6310  1DD4  019D               	clrf	29	;volatile
  6311                           
  6312                           ;ADC.c: 100: ADCON1 =0;
  6313  1DD5  019E               	clrf	30	;volatile
  6314                           
  6315                           ;ADC.c: 101: ADCON1 |= 0b01010000;
  6316  1DD6  3050               	movlw	80
  6317  1DD7  0024               	movlb	4	; select bank4
  6318  1DD8  00AC               	movwf	??_InternalADC_Read^(0+512)
  6319  1DD9  082C               	movf	??_InternalADC_Read^(0+512),w
  6320  1DDA  0021               	movlb	1	; select bank1
  6321  1DDB  049E               	iorwf	30,f	;volatile
  6322                           
  6323                           ;ADC.c: 102: FVRCON |= 0b10000000;
  6324  1DDC  0022               	movlb	2	; select bank2
  6325  1DDD  1797               	bsf	23,7	;volatile
  6326                           
  6327                           ;ADC.c: 103: FVRCON |= 0b00000011;
  6328  1DDE  3003               	movlw	3
  6329  1DDF  0024               	movlb	4	; select bank4
  6330  1DE0  00AC               	movwf	??_InternalADC_Read^(0+512)
  6331  1DE1  082C               	movf	??_InternalADC_Read^(0+512),w
  6332  1DE2  0022               	movlb	2	; select bank2
  6333  1DE3  0497               	iorwf	23,f	;volatile
  6334  1DE4                     l1022:	
  6335                           ;ADC.c: 104: while(!(FVRCON & 0b01000000));
  6336                           
  6337  1DE4  1F17               	btfss	23,6	;volatile
  6338  1DE5  2DE4               	goto	l1022
  6339                           
  6340                           ;ADC.c: 105: ADCON0 |= (channel << 2);
  6341  1DE6  0024               	movlb	4	; select bank4
  6342  1DE7  082E               	movf	InternalADC_Read@channel^(0+512),w
  6343  1DE8  00AC               	movwf	??_InternalADC_Read^(0+512)
  6344  1DE9  3001               	movlw	1
  6345  1DEA                     u8155:	
  6346  1DEA  35AC               	lslf	??_InternalADC_Read^(0+512),f
  6347  1DEB  3EFF               	addlw	-1
  6348  1DEC  1D03               	skipz
  6349  1DED  2DEA               	goto	u8155
  6350  1DEE  352C               	lslf	??_InternalADC_Read^(0+512),w
  6351  1DEF  00AD               	movwf	(??_InternalADC_Read+1)^(0+512)
  6352  1DF0  082D               	movf	(??_InternalADC_Read+1)^(0+512),w
  6353  1DF1  0021               	movlb	1	; select bank1
  6354  1DF2  049D               	iorwf	29,f	;volatile
  6355                           
  6356                           ;ADC.c: 106: ADCON1 |= 0b10000011;
  6357  1DF3  3083               	movlw	131
  6358  1DF4  0024               	movlb	4	; select bank4
  6359  1DF5  00AC               	movwf	??_InternalADC_Read^(0+512)
  6360  1DF6  082C               	movf	??_InternalADC_Read^(0+512),w
  6361  1DF7  0021               	movlb	1	; select bank1
  6362  1DF8  049E               	iorwf	30,f	;volatile
  6363                           
  6364                           ;ADC.c: 107: ADCON0 |= 0b00000001;
  6365  1DF9  141D               	bsf	29,0	;volatile
  6366                           
  6367                           ;ADC.c: 108: (PIE1bits.ADIE=0);
  6368  1DFA  1311               	bcf	17,6	;volatile
  6369                           
  6370                           ;ADC.c: 109: delayUS(5);
  6371  1DFB  3000               	movlw	0
  6372  1DFC  0024               	movlb	4	; select bank4
  6373  1DFD  00A3               	movwf	(delayUS@US+3)^(0+512)
  6374  1DFE  3000               	movlw	0
  6375  1DFF  00A2               	movwf	(delayUS@US+2)^(0+512)
  6376  1E00  3000               	movlw	0
  6377  1E01  00A1               	movwf	(delayUS@US+1)^(0+512)
  6378  1E02  3005               	movlw	5
  6379  1E03  00A0               	movwf	delayUS@US^(0+512)
  6380  1E04  319C  2458  319D   	fcall	_delayUS
  6381                           
  6382                           ;ADC.c: 110: ADCON0 |= 0b00000010;
  6383  1E07  0021               	movlb	1	; select bank1
  6384  1E08  149D               	bsf	29,1	;volatile
  6385  1E09                     l1025:	
  6386                           ;ADC.c: 111: while(ADCON0 & 0b00000010);
  6387                           
  6388  1E09  189D               	btfsc	29,1	;volatile
  6389  1E0A  2E09               	goto	l1025
  6390                           
  6391                           ;ADC.c: 112: return ((ADRESH << 8) + ADRESL);
  6392  1E0B  081C               	movf	28,w	;volatile
  6393  1E0C  0024               	movlb	4	; select bank4
  6394  1E0D  01AB               	clrf	(?_InternalADC_Read+1)^(0+512)
  6395  1E0E  07AB               	addwf	(?_InternalADC_Read+1)^(0+512),f
  6396  1E0F  0021               	movlb	1	; select bank1
  6397  1E10  081B               	movf	27,w	;volatile
  6398  1E11  0024               	movlb	4	; select bank4
  6399  1E12  01AA               	clrf	?_InternalADC_Read^(0+512)
  6400  1E13  07AA               	addwf	?_InternalADC_Read^(0+512),f
  6401  1E14  0008               	return
  6402  1E15                     __end_of_InternalADC_Read:	
  6403                           
  6404                           	psect	text8
  6405  18F9                     __ptext8:	
  6406 ;; *************** function _DisableInternalADC *****************
  6407 ;; Defined at:
  6408 ;;		line 120 in file "ADC.c"
  6409 ;; Parameters:    Size  Location     Type
  6410 ;;		None
  6411 ;; Auto vars:     Size  Location     Type
  6412 ;;		None
  6413 ;; Return value:  Size  Location     Type
  6414 ;;		None               void
  6415 ;; Registers used:
  6416 ;;		wreg, status,2, status,0
  6417 ;; Tracked objects:
  6418 ;;		On entry : 0/0
  6419 ;;		On exit  : 0/0
  6420 ;;		Unchanged: 0/0
  6421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6424 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6425 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6426 ;;Total ram usage:        1 bytes
  6427 ;; Hardware stack levels used:    1
  6428 ;; Hardware stack levels required when called:    7
  6429 ;; This function calls:
  6430 ;;		Nothing
  6431 ;; This function is called by:
  6432 ;;		_ReadVoltage
  6433 ;; This function uses a non-reentrant model
  6434 ;;
  6435                           
  6436                           
  6437                           ;psect for function _DisableInternalADC
  6438  18F9                     _DisableInternalADC:	
  6439                           
  6440                           ;ADC.c: 122: ADCON0 &= ~0b00000001;
  6441                           
  6442                           ;incstack = 0
  6443                           ; Regs used in _DisableInternalADC: [wreg+status,2+status,0]
  6444  18F9  30FE               	movlw	254
  6445  18FA  0024               	movlb	4	; select bank4
  6446  18FB  00A0               	movwf	??_DisableInternalADC^(0+512)
  6447  18FC  0820               	movf	??_DisableInternalADC^(0+512),w
  6448  18FD  0021               	movlb	1	; select bank1
  6449  18FE  059D               	andwf	29,f	;volatile
  6450  18FF  0008               	return
  6451  1900                     __end_of_DisableInternalADC:	
  6452                           
  6453                           	psect	text9
  6454  197C                     __ptext9:	
  6455 ;; *************** function _PS_2_INIT *****************
  6456 ;; Defined at:
  6457 ;;		line 100 in file "PS_2.c"
  6458 ;; Parameters:    Size  Location     Type
  6459 ;;		None
  6460 ;; Auto vars:     Size  Location     Type
  6461 ;;		None
  6462 ;; Return value:  Size  Location     Type
  6463 ;;		None               void
  6464 ;; Registers used:
  6465 ;;		wreg, status,2, status,0, pclath, cstack
  6466 ;; Tracked objects:
  6467 ;;		On entry : 0/0
  6468 ;;		On exit  : 0/0
  6469 ;;		Unchanged: 0/0
  6470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6475 ;;Total ram usage:        0 bytes
  6476 ;; Hardware stack levels used:    1
  6477 ;; Hardware stack levels required when called:    9
  6478 ;; This function calls:
  6479 ;;		_Clock_TRIS
  6480 ;;		_Data_TRIS
  6481 ;;		_Timer2Init
  6482 ;; This function is called by:
  6483 ;;		_main
  6484 ;; This function uses a non-reentrant model
  6485 ;;
  6486                           
  6487                           
  6488                           ;psect for function _PS_2_INIT
  6489  197C                     _PS_2_INIT:	
  6490                           
  6491                           ;PS_2.c: 103: Clock_TRIS(1);
  6492                           
  6493                           ;incstack = 0
  6494                           ; Regs used in _PS_2_INIT: [wreg+status,2+status,0+pclath+cstack]
  6495  197C  3001               	movlw	1
  6496  197D  3199  214E  3199   	fcall	_Clock_TRIS
  6497                           
  6498                           ;PS_2.c: 104: Data_TRIS(1);
  6499  1980  3001               	movlw	1
  6500  1981  3199  2159  3199   	fcall	_Data_TRIS
  6501                           
  6502                           ;PS_2.c: 105: Timer2Init(255);
  6503  1984  30FF               	movlw	255
  6504  1985  319A  22D9         	fcall	_Timer2Init
  6505  1987  0008               	return
  6506  1988                     __end_of_PS_2_INIT:	
  6507                           
  6508                           	psect	text10
  6509  1AD9                     __ptext10:	
  6510 ;; *************** function _Timer2Init *****************
  6511 ;; Defined at:
  6512 ;;		line 41 in file "Timer.c"
  6513 ;; Parameters:    Size  Location     Type
  6514 ;;  time            1    wreg     unsigned char 
  6515 ;; Auto vars:     Size  Location     Type
  6516 ;;  time            1    2[BANK4 ] unsigned char 
  6517 ;;  prescaler       1    4[BANK4 ] unsigned char 
  6518 ;;  postscaler      1    3[BANK4 ] unsigned char 
  6519 ;; Return value:  Size  Location     Type
  6520 ;;		None               void
  6521 ;; Registers used:
  6522 ;;		wreg, status,2, status,0, pclath, cstack
  6523 ;; Tracked objects:
  6524 ;;		On entry : 0/0
  6525 ;;		On exit  : 0/0
  6526 ;;		Unchanged: 0/0
  6527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6529 ;;      Locals:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  6530 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  6531 ;;      Totals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  6532 ;;Total ram usage:        5 bytes
  6533 ;; Hardware stack levels used:    1
  6534 ;; Hardware stack levels required when called:    8
  6535 ;; This function calls:
  6536 ;;		_Timer2ON
  6537 ;; This function is called by:
  6538 ;;		_PS_2_INIT
  6539 ;; This function uses a non-reentrant model
  6540 ;;
  6541                           
  6542                           
  6543                           ;psect for function _Timer2Init
  6544  1AD9                     _Timer2Init:	
  6545                           
  6546                           ;incstack = 0
  6547                           ; Regs used in _Timer2Init: [wreg+status,2+status,0+pclath+cstack]
  6548                           ;Timer2Init@time stored from wreg
  6549  1AD9  0024               	movlb	4	; select bank4
  6550  1ADA  00A2               	movwf	Timer2Init@time^(0+512)
  6551                           
  6552                           ;Timer.c: 43: unsigned char postscaler =0xF;
  6553  1ADB  300F               	movlw	15
  6554  1ADC  00A0               	movwf	??_Timer2Init^(0+512)
  6555  1ADD  0820               	movf	??_Timer2Init^(0+512),w
  6556  1ADE  00A3               	movwf	Timer2Init@postscaler^(0+512)
  6557                           
  6558                           ;Timer.c: 44: unsigned char prescaler =3;
  6559  1ADF  3003               	movlw	3
  6560  1AE0  00A0               	movwf	??_Timer2Init^(0+512)
  6561  1AE1  0820               	movf	??_Timer2Init^(0+512),w
  6562  1AE2  00A4               	movwf	Timer2Init@prescaler^(0+512)
  6563                           
  6564                           ;Timer.c: 45: CCP2CONbits.CCP2M = 0b1010;
  6565  1AE3  0025               	movlb	5	; select bank5
  6566  1AE4  081A               	movf	26,w	;volatile
  6567  1AE5  39F0               	andlw	-16
  6568  1AE6  380A               	iorlw	10
  6569  1AE7  009A               	movwf	26	;volatile
  6570                           
  6571                           ;Timer.c: 46: PR2 = time;
  6572  1AE8  0024               	movlb	4	; select bank4
  6573  1AE9  0822               	movf	Timer2Init@time^(0+512),w
  6574  1AEA  0020               	movlb	0	; select bank0
  6575  1AEB  009B               	movwf	27	;volatile
  6576                           
  6577                           ;Timer.c: 47: T2CON |= postscaler << 3;
  6578  1AEC  0024               	movlb	4	; select bank4
  6579  1AED  0823               	movf	Timer2Init@postscaler^(0+512),w
  6580  1AEE  00A0               	movwf	??_Timer2Init^(0+512)
  6581  1AEF  3002               	movlw	2
  6582  1AF0                     u8135:	
  6583  1AF0  35A0               	lslf	??_Timer2Init^(0+512),f
  6584  1AF1  3EFF               	addlw	-1
  6585  1AF2  1D03               	skipz
  6586  1AF3  2AF0               	goto	u8135
  6587  1AF4  3520               	lslf	??_Timer2Init^(0+512),w
  6588  1AF5  00A1               	movwf	(??_Timer2Init+1)^(0+512)
  6589  1AF6  0821               	movf	(??_Timer2Init+1)^(0+512),w
  6590  1AF7  0020               	movlb	0	; select bank0
  6591  1AF8  049C               	iorwf	28,f	;volatile
  6592                           
  6593                           ;Timer.c: 48: T2CON |= prescaler;
  6594  1AF9  0024               	movlb	4	; select bank4
  6595  1AFA  0824               	movf	Timer2Init@prescaler^(0+512),w
  6596  1AFB  00A0               	movwf	??_Timer2Init^(0+512)
  6597  1AFC  0820               	movf	??_Timer2Init^(0+512),w
  6598  1AFD  0020               	movlb	0	; select bank0
  6599  1AFE  049C               	iorwf	28,f	;volatile
  6600                           
  6601                           ;Timer.c: 50: Timer2ON();
  6602  1AFF  3198  20D4         	fcall	_Timer2ON
  6603                           
  6604                           ;Timer.c: 51: PIE1bits.TMR2IE = 0;
  6605  1B01  0021               	movlb	1	; select bank1
  6606  1B02  1091               	bcf	17,1	;volatile
  6607  1B03  0008               	return
  6608  1B04                     __end_of_Timer2Init:	
  6609                           
  6610                           	psect	text11
  6611  18D4                     __ptext11:	
  6612 ;; *************** function _Timer2ON *****************
  6613 ;; Defined at:
  6614 ;;		line 59 in file "Timer.c"
  6615 ;; Parameters:    Size  Location     Type
  6616 ;;		None
  6617 ;; Auto vars:     Size  Location     Type
  6618 ;;		None
  6619 ;; Return value:  Size  Location     Type
  6620 ;;		None               void
  6621 ;; Registers used:
  6622 ;;		None
  6623 ;; Tracked objects:
  6624 ;;		On entry : 0/0
  6625 ;;		On exit  : 0/0
  6626 ;;		Unchanged: 0/0
  6627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6631 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6632 ;;Total ram usage:        0 bytes
  6633 ;; Hardware stack levels used:    1
  6634 ;; Hardware stack levels required when called:    7
  6635 ;; This function calls:
  6636 ;;		Nothing
  6637 ;; This function is called by:
  6638 ;;		_Timer2Init
  6639 ;; This function uses a non-reentrant model
  6640 ;;
  6641                           
  6642                           
  6643                           ;psect for function _Timer2ON
  6644  18D4                     _Timer2ON:	
  6645                           
  6646                           ;Timer.c: 61: T2CONbits.TMR2ON = 1;
  6647                           
  6648                           ;incstack = 0
  6649                           ; Regs used in _Timer2ON: []
  6650  18D4  0020               	movlb	0	; select bank0
  6651  18D5  151C               	bsf	28,2	;volatile
  6652  18D6  0008               	return
  6653  18D7                     __end_of_Timer2ON:	
  6654                           
  6655                           	psect	text12
  6656  1959                     __ptext12:	
  6657 ;; *************** function _Data_TRIS *****************
  6658 ;; Defined at:
  6659 ;;		line 130 in file "PS_2.c"
  6660 ;; Parameters:    Size  Location     Type
  6661 ;;  direction       1    wreg     unsigned char 
  6662 ;; Auto vars:     Size  Location     Type
  6663 ;;  direction       1    0[BANK4 ] unsigned char 
  6664 ;; Return value:  Size  Location     Type
  6665 ;;		None               void
  6666 ;; Registers used:
  6667 ;;		wreg, status,2, status,0
  6668 ;; Tracked objects:
  6669 ;;		On entry : 0/0
  6670 ;;		On exit  : 0/0
  6671 ;;		Unchanged: 0/0
  6672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6674 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6676 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6677 ;;Total ram usage:        1 bytes
  6678 ;; Hardware stack levels used:    1
  6679 ;; Hardware stack levels required when called:    7
  6680 ;; This function calls:
  6681 ;;		Nothing
  6682 ;; This function is called by:
  6683 ;;		_PS_2_INIT
  6684 ;; This function uses a non-reentrant model
  6685 ;;
  6686                           
  6687                           
  6688                           ;psect for function _Data_TRIS
  6689  1959                     _Data_TRIS:	
  6690                           
  6691                           ;incstack = 0
  6692                           ; Regs used in _Data_TRIS: [wreg+status,2+status,0]
  6693                           ;Data_TRIS@direction stored from wreg
  6694  1959  0024               	movlb	4	; select bank4
  6695  195A  00A0               	movwf	Data_TRIS@direction^(0+512)
  6696                           
  6697                           ;PS_2.c: 132: if(direction == 0)
  6698  195B  08A0               	movf	Data_TRIS@direction^(0+512),f
  6699  195C  1D03               	skipz
  6700  195D  2961               	goto	l627
  6701                           
  6702                           ;PS_2.c: 133: {
  6703                           ;PS_2.c: 134: TRISAbits.TRISA4 = 0;
  6704  195E  0021               	movlb	1	; select bank1
  6705  195F  120C               	bcf	12,4	;volatile
  6706                           
  6707                           ;PS_2.c: 135: }
  6708  1960  0008               	return
  6709  1961                     l627:	
  6710                           
  6711                           ;PS_2.c: 136: else
  6712                           ;PS_2.c: 137: {
  6713                           ;PS_2.c: 138: TRISAbits.TRISA4 = 1;
  6714  1961  0021               	movlb	1	; select bank1
  6715  1962  160C               	bsf	12,4	;volatile
  6716  1963  0008               	return
  6717  1964                     __end_of_Data_TRIS:	
  6718                           
  6719                           	psect	text13
  6720  194E                     __ptext13:	
  6721 ;; *************** function _Clock_TRIS *****************
  6722 ;; Defined at:
  6723 ;;		line 113 in file "PS_2.c"
  6724 ;; Parameters:    Size  Location     Type
  6725 ;;  direction       1    wreg     unsigned char 
  6726 ;; Auto vars:     Size  Location     Type
  6727 ;;  direction       1    0[BANK4 ] unsigned char 
  6728 ;; Return value:  Size  Location     Type
  6729 ;;		None               void
  6730 ;; Registers used:
  6731 ;;		wreg, status,2, status,0
  6732 ;; Tracked objects:
  6733 ;;		On entry : 0/0
  6734 ;;		On exit  : 0/0
  6735 ;;		Unchanged: 0/0
  6736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6738 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6740 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6741 ;;Total ram usage:        1 bytes
  6742 ;; Hardware stack levels used:    1
  6743 ;; Hardware stack levels required when called:    7
  6744 ;; This function calls:
  6745 ;;		Nothing
  6746 ;; This function is called by:
  6747 ;;		_PS_2_INIT
  6748 ;; This function uses a non-reentrant model
  6749 ;;
  6750                           
  6751                           
  6752                           ;psect for function _Clock_TRIS
  6753  194E                     _Clock_TRIS:	
  6754                           
  6755                           ;incstack = 0
  6756                           ; Regs used in _Clock_TRIS: [wreg+status,2+status,0]
  6757                           ;Clock_TRIS@direction stored from wreg
  6758  194E  0024               	movlb	4	; select bank4
  6759  194F  00A0               	movwf	Clock_TRIS@direction^(0+512)
  6760                           
  6761                           ;PS_2.c: 115: if(direction == 0)
  6762  1950  08A0               	movf	Clock_TRIS@direction^(0+512),f
  6763  1951  1D03               	skipz
  6764  1952  2956               	goto	l622
  6765                           
  6766                           ;PS_2.c: 116: {
  6767                           ;PS_2.c: 117: TRISAbits.TRISA5 = 0;
  6768  1953  0021               	movlb	1	; select bank1
  6769  1954  128C               	bcf	12,5	;volatile
  6770                           
  6771                           ;PS_2.c: 118: }
  6772  1955  0008               	return
  6773  1956                     l622:	
  6774                           
  6775                           ;PS_2.c: 119: else
  6776                           ;PS_2.c: 120: {
  6777                           ;PS_2.c: 121: TRISAbits.TRISA5 = 1;
  6778  1956  0021               	movlb	1	; select bank1
  6779  1957  168C               	bsf	12,5	;volatile
  6780  1958  0008               	return
  6781  1959                     __end_of_Clock_TRIS:	
  6782                           
  6783                           	psect	text14
  6784  1970                     __ptext14:	
  6785 ;; *************** function _PS_2_ENABLE_INTERRUPT *****************
  6786 ;; Defined at:
  6787 ;;		line 192 in file "PS_2.c"
  6788 ;; Parameters:    Size  Location     Type
  6789 ;;  DATA_CLK        1    wreg     unsigned char 
  6790 ;; Auto vars:     Size  Location     Type
  6791 ;;  DATA_CLK        1    0[BANK4 ] unsigned char 
  6792 ;; Return value:  Size  Location     Type
  6793 ;;		None               void
  6794 ;; Registers used:
  6795 ;;		wreg
  6796 ;; Tracked objects:
  6797 ;;		On entry : 0/0
  6798 ;;		On exit  : 0/0
  6799 ;;		Unchanged: 0/0
  6800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6802 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6804 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6805 ;;Total ram usage:        1 bytes
  6806 ;; Hardware stack levels used:    1
  6807 ;; Hardware stack levels required when called:    7
  6808 ;; This function calls:
  6809 ;;		Nothing
  6810 ;; This function is called by:
  6811 ;;		_main
  6812 ;;		_Keyboard_Connected
  6813 ;; This function uses a non-reentrant model
  6814 ;;
  6815                           
  6816                           
  6817                           ;psect for function _PS_2_ENABLE_INTERRUPT
  6818  1970                     _PS_2_ENABLE_INTERRUPT:	
  6819                           
  6820                           ;incstack = 0
  6821                           ; Regs used in _PS_2_ENABLE_INTERRUPT: [wreg]
  6822                           ;PS_2_ENABLE_INTERRUPT@DATA_CLK stored from wreg
  6823  1970  0024               	movlb	4	; select bank4
  6824  1971  00A0               	movwf	PS_2_ENABLE_INTERRUPT@DATA_CLK^(0+512)
  6825                           
  6826                           ;PS_2.c: 194: if(DATA_CLK == 0b00100000)
  6827  1972  0820               	movf	PS_2_ENABLE_INTERRUPT@DATA_CLK^(0+512),w
  6828  1973  3A20               	xorlw	32
  6829  1974  1D03               	skipz
  6830  1975  2979               	goto	l642
  6831                           
  6832                           ;PS_2.c: 195: {
  6833                           ;PS_2.c: 198: IOCAN |= 0b00100000;
  6834  1976  0027               	movlb	7	; select bank7
  6835  1977  1692               	bsf	18,5	;volatile
  6836                           
  6837                           ;PS_2.c: 200: }
  6838  1978  0008               	return
  6839  1979                     l642:	
  6840                           
  6841                           ;PS_2.c: 201: else
  6842                           ;PS_2.c: 202: {
  6843                           ;PS_2.c: 205: IOCAN |= 0b00010000;
  6844  1979  0027               	movlb	7	; select bank7
  6845  197A  1612               	bsf	18,4	;volatile
  6846  197B  0008               	return
  6847  197C                     __end_of_PS_2_ENABLE_INTERRUPT:	
  6848                           
  6849                           	psect	text15
  6850  0B8E                     __ptext15:	
  6851 ;; *************** function _Init_System *****************
  6852 ;; Defined at:
  6853 ;;		line 103 in file "user.c"
  6854 ;; Parameters:    Size  Location     Type
  6855 ;;		None
  6856 ;; Auto vars:     Size  Location     Type
  6857 ;;  buf            60    0[BANK5 ] unsigned char [60]
  6858 ;;  Baud            4   65[BANK5 ] unsigned long 
  6859 ;;  temp            4   60[BANK5 ] unsigned long 
  6860 ;;  Parity          1   64[BANK5 ] unsigned char 
  6861 ;; Return value:  Size  Location     Type
  6862 ;;		None               void
  6863 ;; Registers used:
  6864 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6865 ;; Tracked objects:
  6866 ;;		On entry : 0/0
  6867 ;;		On exit  : 0/0
  6868 ;;		Unchanged: 0/0
  6869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6871 ;;      Locals:         0       0       0       0       0       0      69       0       0       0       0       0       
      +0       0
  6872 ;;      Temps:          0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  6873 ;;      Totals:         0       0       0       0       0       5      69       0       0       0       0       0       
      +0       0
  6874 ;;Total ram usage:       74 bytes
  6875 ;; Hardware stack levels used:    1
  6876 ;; Hardware stack levels required when called:   10
  6877 ;; This function calls:
  6878 ;;		_InitUART
  6879 ;;		_ReadBaud
  6880 ;;		_UARTstringWAIT
  6881 ;;		_delayUS
  6882 ;;		_sprintf
  6883 ;; This function is called by:
  6884 ;;		_main
  6885 ;; This function uses a non-reentrant model
  6886 ;;
  6887                           
  6888                           
  6889                           ;psect for function _Init_System
  6890  0B8E                     _Init_System:	
  6891                           
  6892                           ;user.c: 105: unsigned long temp =0;
  6893                           
  6894                           ;incstack = 0
  6895                           ; Regs used in _Init_System: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6896  0B8E  3000               	movlw	0
  6897  0B8F  0025               	movlb	5	; select bank5
  6898  0B90  00DF               	movwf	(Init_System@temp+3)^(0+640)
  6899  0B91  3000               	movlw	0
  6900  0B92  00DE               	movwf	(Init_System@temp+2)^(0+640)
  6901  0B93  3000               	movlw	0
  6902  0B94  00DD               	movwf	(Init_System@temp+1)^(0+640)
  6903  0B95  3000               	movlw	0
  6904  0B96  00DC               	movwf	Init_System@temp^(0+640)
  6905                           
  6906                           ;user.c: 106: unsigned long Baud =0;
  6907  0B97  3000               	movlw	0
  6908  0B98  00E4               	movwf	(Init_System@Baud+3)^(0+640)
  6909  0B99  3000               	movlw	0
  6910  0B9A  00E3               	movwf	(Init_System@Baud+2)^(0+640)
  6911  0B9B  3000               	movlw	0
  6912  0B9C  00E2               	movwf	(Init_System@Baud+1)^(0+640)
  6913  0B9D  3000               	movlw	0
  6914  0B9E  00E1               	movwf	Init_System@Baud^(0+640)
  6915                           
  6916                           ;user.c: 107: unsigned char Parity =0;
  6917  0B9F  01E0               	clrf	Init_System@Parity^(0+640)
  6918                           
  6919                           ;user.c: 108: unsigned char buf[60];
  6920                           ;user.c: 110: temp = ReadBaud((0x1800 >> 5),0);
  6921  0BA0  30C0               	movlw	192
  6922  0BA1  0024               	movlb	4	; select bank4
  6923  0BA2  00B2               	movwf	ReadBaud@row^(0+512)
  6924  0BA3  3000               	movlw	0
  6925  0BA4  00B3               	movwf	(ReadBaud@row^(0+512)+1)
  6926  0BA5  01B4               	clrf	ReadBaud@column^(0+512)
  6927  0BA6  3191  21F9  318B   	fcall	_ReadBaud
  6928  0BA9  0024               	movlb	4	; select bank4
  6929  0BAA  0835               	movf	(?_ReadBaud+3)^(0+512),w
  6930  0BAB  0025               	movlb	5	; select bank5
  6931  0BAC  00DF               	movwf	(Init_System@temp+3)^(0+640)
  6932  0BAD  0024               	movlb	4	; select bank4
  6933  0BAE  0834               	movf	(?_ReadBaud+2)^(0+512),w
  6934  0BAF  0025               	movlb	5	; select bank5
  6935  0BB0  00DE               	movwf	(Init_System@temp+2)^(0+640)
  6936  0BB1  0024               	movlb	4	; select bank4
  6937  0BB2  0833               	movf	(?_ReadBaud+1)^(0+512),w
  6938  0BB3  0025               	movlb	5	; select bank5
  6939  0BB4  00DD               	movwf	(Init_System@temp+1)^(0+640)
  6940  0BB5  0024               	movlb	4	; select bank4
  6941  0BB6  0832               	movf	?_ReadBaud^(0+512),w
  6942  0BB7  0025               	movlb	5	; select bank5
  6943  0BB8  00DC               	movwf	Init_System@temp^(0+640)
  6944                           
  6945                           ;user.c: 111: Baud = temp & 0x000FFFFF;
  6946  0BB9  30FF               	movlw	255
  6947  0BBA  055C               	andwf	Init_System@temp^(0+640),w
  6948  0BBB  00E1               	movwf	Init_System@Baud^(0+640)
  6949  0BBC  30FF               	movlw	255
  6950  0BBD  055D               	andwf	(Init_System@temp+1)^(0+640),w
  6951  0BBE  00E2               	movwf	(Init_System@Baud+1)^(0+640)
  6952  0BBF  300F               	movlw	15
  6953  0BC0  055E               	andwf	(Init_System@temp+2)^(0+640),w
  6954  0BC1  00E3               	movwf	(Init_System@Baud+2)^(0+640)
  6955  0BC2  3000               	movlw	0
  6956  0BC3  055F               	andwf	(Init_System@temp+3)^(0+640),w
  6957  0BC4  00E4               	movwf	(Init_System@Baud+3)^(0+640)
  6958                           
  6959                           ;user.c: 112: Parity = (unsigned char)((temp & 0x00F00000) >> 20);
  6960  0BC5  085C               	movf	Init_System@temp^(0+640),w
  6961  0BC6  0024               	movlb	4	; select bank4
  6962  0BC7  00D0               	movwf	??_Init_System^(0+512)
  6963  0BC8  0025               	movlb	5	; select bank5
  6964  0BC9  085D               	movf	(Init_System@temp+1)^(0+640),w
  6965  0BCA  0024               	movlb	4	; select bank4
  6966  0BCB  00D1               	movwf	(??_Init_System^(0+512)+1)
  6967  0BCC  0025               	movlb	5	; select bank5
  6968  0BCD  085E               	movf	(Init_System@temp+2)^(0+640),w
  6969  0BCE  0024               	movlb	4	; select bank4
  6970  0BCF  00D2               	movwf	(??_Init_System^(0+512)+2)
  6971  0BD0  0025               	movlb	5	; select bank5
  6972  0BD1  085F               	movf	(Init_System@temp+3)^(0+640),w
  6973  0BD2  0024               	movlb	4	; select bank4
  6974  0BD3  00D3               	movwf	(??_Init_System^(0+512)+3)
  6975  0BD4  3014               	movlw	20
  6976  0BD5                     u8405:	
  6977  0BD5  36D3               	lsrf	(??_Init_System^(0+512)+3),f
  6978  0BD6  0CD2               	rrf	(??_Init_System^(0+512)+2),f
  6979  0BD7  0CD1               	rrf	(??_Init_System^(0+512)+1),f
  6980  0BD8  0CD0               	rrf	??_Init_System^(0+512),f
  6981  0BD9  0B89               	decfsz	9,f
  6982  0BDA  2BD5               	goto	u8405
  6983  0BDB  0850               	movf	??_Init_System^(0+512),w
  6984  0BDC  390F               	andlw	15
  6985  0BDD  00D4               	movwf	(??_Init_System+4)^(0+512)
  6986  0BDE  0854               	movf	(??_Init_System+4)^(0+512),w
  6987  0BDF  0025               	movlb	5	; select bank5
  6988  0BE0  00E0               	movwf	Init_System@Parity^(0+640)
  6989                           
  6990                           ;user.c: 113: if(Baud <2400 || Baud > 115200)
  6991  0BE1  3000               	movlw	0
  6992  0BE2  0264               	subwf	(Init_System@Baud+3)^(0+640),w
  6993  0BE3  1D03               	skipz
  6994  0BE4  2BEF               	goto	u8415
  6995  0BE5  3000               	movlw	0
  6996  0BE6  0263               	subwf	(Init_System@Baud+2)^(0+640),w
  6997  0BE7  1D03               	skipz
  6998  0BE8  2BEF               	goto	u8415
  6999  0BE9  3009               	movlw	9
  7000  0BEA  0262               	subwf	(Init_System@Baud+1)^(0+640),w
  7001  0BEB  1D03               	skipz
  7002  0BEC  2BEF               	goto	u8415
  7003  0BED  3060               	movlw	96
  7004  0BEE  0261               	subwf	Init_System@Baud^(0+640),w
  7005  0BEF                     u8415:	
  7006  0BEF  1C03               	skipc
  7007  0BF0  2C01               	goto	l6478
  7008  0BF1  3000               	movlw	0
  7009  0BF2  0264               	subwf	(Init_System@Baud+3)^(0+640),w
  7010  0BF3  1D03               	skipz
  7011  0BF4  2BFF               	goto	u8425
  7012  0BF5  3001               	movlw	1
  7013  0BF6  0263               	subwf	(Init_System@Baud+2)^(0+640),w
  7014  0BF7  1D03               	skipz
  7015  0BF8  2BFF               	goto	u8425
  7016  0BF9  30C2               	movlw	194
  7017  0BFA  0262               	subwf	(Init_System@Baud+1)^(0+640),w
  7018  0BFB  1D03               	skipz
  7019  0BFC  2BFF               	goto	u8425
  7020  0BFD  3001               	movlw	1
  7021  0BFE  0261               	subwf	Init_System@Baud^(0+640),w
  7022  0BFF                     u8425:	
  7023  0BFF  1C03               	skipc
  7024  0C00  2C0A               	goto	l6482
  7025  0C01                     l6478:	
  7026                           
  7027                           ;user.c: 114: {
  7028                           ;user.c: 116: Baud = 9600;
  7029  0C01  3000               	movlw	0
  7030  0C02  00E4               	movwf	(Init_System@Baud+3)^(0+640)
  7031  0C03  3000               	movlw	0
  7032  0C04  00E3               	movwf	(Init_System@Baud+2)^(0+640)
  7033  0C05  3025               	movlw	37
  7034  0C06  00E2               	movwf	(Init_System@Baud+1)^(0+640)
  7035  0C07  3080               	movlw	128
  7036  0C08  00E1               	movwf	Init_System@Baud^(0+640)
  7037                           
  7038                           ;user.c: 117: Parity = 0;
  7039  0C09  01E0               	clrf	Init_System@Parity^(0+640)
  7040  0C0A                     l6482:	
  7041                           
  7042                           ;user.c: 118: }
  7043                           ;user.c: 119: InitUART(Baud, Parity);
  7044  0C0A  0864               	movf	(Init_System@Baud+3)^(0+640),w
  7045  0C0B  0024               	movlb	4	; select bank4
  7046  0C0C  00B1               	movwf	(InitUART@Baud+3)^(0+512)
  7047  0C0D  0025               	movlb	5	; select bank5
  7048  0C0E  0863               	movf	(Init_System@Baud+2)^(0+640),w
  7049  0C0F  0024               	movlb	4	; select bank4
  7050  0C10  00B0               	movwf	(InitUART@Baud+2)^(0+512)
  7051  0C11  0025               	movlb	5	; select bank5
  7052  0C12  0862               	movf	(Init_System@Baud+1)^(0+640),w
  7053  0C13  0024               	movlb	4	; select bank4
  7054  0C14  00AF               	movwf	(InitUART@Baud+1)^(0+512)
  7055  0C15  0025               	movlb	5	; select bank5
  7056  0C16  0861               	movf	Init_System@Baud^(0+640),w
  7057  0C17  0024               	movlb	4	; select bank4
  7058  0C18  00AE               	movwf	InitUART@Baud^(0+512)
  7059  0C19  0025               	movlb	5	; select bank5
  7060  0C1A  0860               	movf	Init_System@Parity^(0+640),w
  7061  0C1B  0024               	movlb	4	; select bank4
  7062  0C1C  00D0               	movwf	??_Init_System^(0+512)
  7063  0C1D  0850               	movf	??_Init_System^(0+512),w
  7064  0C1E  00B2               	movwf	InitUART@parity^(0+512)
  7065  0C1F  3194  2440  318B   	fcall	_InitUART
  7066                           
  7067                           ;user.c: 122: delayUS(10000);
  7068  0C22  3000               	movlw	0
  7069  0C23  0024               	movlb	4	; select bank4
  7070  0C24  00A3               	movwf	(delayUS@US+3)^(0+512)
  7071  0C25  3000               	movlw	0
  7072  0C26  00A2               	movwf	(delayUS@US+2)^(0+512)
  7073  0C27  3027               	movlw	39
  7074  0C28  00A1               	movwf	(delayUS@US+1)^(0+512)
  7075  0C29  3010               	movlw	16
  7076  0C2A  00A0               	movwf	delayUS@US^(0+512)
  7077  0C2B  319C  2458  318B   	fcall	_delayUS
  7078                           
  7079                           ;user.c: 123: UARTstringWAIT("PS/2 Keyboard to RS-232\r\n");
  7080  0C2E  30D3               	movlw	low (STR_3| (0+32768))
  7081  0C2F  0024               	movlb	4	; select bank4
  7082  0C30  00AF               	movwf	UARTstringWAIT@data^(0+512)
  7083  0C31  3089               	movlw	high (STR_3| (0+32768))
  7084  0C32  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  7085  0C33  319C  2425  318B   	fcall	_UARTstringWAIT
  7086                           
  7087                           ;user.c: 124: delayUS(10000);
  7088  0C36  3000               	movlw	0
  7089  0C37  0024               	movlb	4	; select bank4
  7090  0C38  00A3               	movwf	(delayUS@US+3)^(0+512)
  7091  0C39  3000               	movlw	0
  7092  0C3A  00A2               	movwf	(delayUS@US+2)^(0+512)
  7093  0C3B  3027               	movlw	39
  7094  0C3C  00A1               	movwf	(delayUS@US+1)^(0+512)
  7095  0C3D  3010               	movlw	16
  7096  0C3E  00A0               	movwf	delayUS@US^(0+512)
  7097  0C3F  319C  2458  318B   	fcall	_delayUS
  7098                           
  7099                           ;user.c: 125: UARTstringWAIT("Firmware Version: ");
  7100  0C42  3044               	movlw	low (STR_4| (0+32768))
  7101  0C43  0024               	movlb	4	; select bank4
  7102  0C44  00AF               	movwf	UARTstringWAIT@data^(0+512)
  7103  0C45  308A               	movlw	high (STR_4| (0+32768))
  7104  0C46  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  7105  0C47  319C  2425  318B   	fcall	_UARTstringWAIT
  7106                           
  7107                           ;user.c: 126: UARTstringWAIT(Version);
  7108  0C4A  3066               	movlw	low (_Version| (0+32768))
  7109  0C4B  0024               	movlb	4	; select bank4
  7110  0C4C  00AF               	movwf	UARTstringWAIT@data^(0+512)
  7111  0C4D  3089               	movlw	high (_Version| (0+32768))
  7112  0C4E  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  7113  0C4F  319C  2425  318B   	fcall	_UARTstringWAIT
  7114                           
  7115                           ;user.c: 127: UARTstringWAIT("\r\n");
  7116  0C52  3041               	movlw	low ((STR_15+16)| (0+32768))
  7117  0C53  0024               	movlb	4	; select bank4
  7118  0C54  00AF               	movwf	UARTstringWAIT@data^(0+512)
  7119  0C55  308A               	movlw	high ((STR_15+16)| (0+32768))
  7120  0C56  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  7121  0C57  319C  2425  318B   	fcall	_UARTstringWAIT
  7122                           
  7123                           ;user.c: 128: delayUS(10000);
  7124  0C5A  3000               	movlw	0
  7125  0C5B  0024               	movlb	4	; select bank4
  7126  0C5C  00A3               	movwf	(delayUS@US+3)^(0+512)
  7127  0C5D  3000               	movlw	0
  7128  0C5E  00A2               	movwf	(delayUS@US+2)^(0+512)
  7129  0C5F  3027               	movlw	39
  7130  0C60  00A1               	movwf	(delayUS@US+1)^(0+512)
  7131  0C61  3010               	movlw	16
  7132  0C62  00A0               	movwf	delayUS@US^(0+512)
  7133  0C63  319C  2458  318B   	fcall	_delayUS
  7134                           
  7135                           ;user.c: 129: UARTstringWAIT("To Change BAUD hit \"CNT + ALT + DEL\"\r\n");
  7136  0C66  306E               	movlw	low (STR_6| (0+32768))
  7137  0C67  0024               	movlb	4	; select bank4
  7138  0C68  00AF               	movwf	UARTstringWAIT@data^(0+512)
  7139  0C69  3089               	movlw	high (STR_6| (0+32768))
  7140  0C6A  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  7141  0C6B  319C  2425  318B   	fcall	_UARTstringWAIT
  7142                           
  7143                           ;user.c: 130: delayUS(10000);
  7144  0C6E  3000               	movlw	0
  7145  0C6F  0024               	movlb	4	; select bank4
  7146  0C70  00A3               	movwf	(delayUS@US+3)^(0+512)
  7147  0C71  3000               	movlw	0
  7148  0C72  00A2               	movwf	(delayUS@US+2)^(0+512)
  7149  0C73  3027               	movlw	39
  7150  0C74  00A1               	movwf	(delayUS@US+1)^(0+512)
  7151  0C75  3010               	movlw	16
  7152  0C76  00A0               	movwf	delayUS@US^(0+512)
  7153  0C77  319C  2458  318B   	fcall	_delayUS
  7154                           
  7155                           ;user.c: 132: UARTstringWAIT("\r\n");
  7156  0C7A  3041               	movlw	low ((STR_15+16)| (0+32768))
  7157  0C7B  0024               	movlb	4	; select bank4
  7158  0C7C  00AF               	movwf	UARTstringWAIT@data^(0+512)
  7159  0C7D  308A               	movlw	high ((STR_15+16)| (0+32768))
  7160  0C7E  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  7161  0C7F  319C  2425  318B   	fcall	_UARTstringWAIT
  7162                           
  7163                           ;user.c: 133: delayUS(10000);
  7164  0C82  3000               	movlw	0
  7165  0C83  0024               	movlb	4	; select bank4
  7166  0C84  00A3               	movwf	(delayUS@US+3)^(0+512)
  7167  0C85  3000               	movlw	0
  7168  0C86  00A2               	movwf	(delayUS@US+2)^(0+512)
  7169  0C87  3027               	movlw	39
  7170  0C88  00A1               	movwf	(delayUS@US+1)^(0+512)
  7171  0C89  3010               	movlw	16
  7172  0C8A  00A0               	movwf	delayUS@US^(0+512)
  7173  0C8B  319C  2458  318B   	fcall	_delayUS
  7174                           
  7175                           ;user.c: 134: sprintf(buf,"KeyBoard Baud is %lu",Baud);
  7176  0C8E  30A0               	movlw	low Init_System@buf
  7177  0C8F  0024               	movlb	4	; select bank4
  7178  0C90  00B8               	movwf	sprintf@sp^(0+512)
  7179  0C91  3002               	movlw	high Init_System@buf
  7180  0C92  00B9               	movwf	(sprintf@sp+1)^(0+512)
  7181  0C93  301C               	movlw	low (STR_8| (0+32768))
  7182  0C94  00BA               	movwf	sprintf@f^(0+512)
  7183  0C95  308A               	movlw	high (STR_8| (0+32768))
  7184  0C96  00BB               	movwf	(sprintf@f^(0+512)+1)
  7185  0C97  0025               	movlb	5	; select bank5
  7186  0C98  0864               	movf	(Init_System@Baud+3)^(0+640),w
  7187  0C99  0024               	movlb	4	; select bank4
  7188  0C9A  00BF               	movwf	((?_sprintf+3)^(0+512)+4)
  7189  0C9B  0025               	movlb	5	; select bank5
  7190  0C9C  0863               	movf	(Init_System@Baud+2)^(0+640),w
  7191  0C9D  0024               	movlb	4	; select bank4
  7192  0C9E  00BE               	movwf	((?_sprintf+2)^(0+512)+4)
  7193  0C9F  0025               	movlb	5	; select bank5
  7194  0CA0  0862               	movf	(Init_System@Baud+1)^(0+640),w
  7195  0CA1  0024               	movlb	4	; select bank4
  7196  0CA2  00BD               	movwf	((?_sprintf+1)^(0+512)+4)
  7197  0CA3  0025               	movlb	5	; select bank5
  7198  0CA4  0861               	movf	Init_System@Baud^(0+640),w
  7199  0CA5  0024               	movlb	4	; select bank4
  7200  0CA6  00BC               	movwf	(?_sprintf^(0+512)+4)
  7201  0CA7  3197  270A  318B   	fcall	_sprintf
  7202                           
  7203                           ;user.c: 135: UARTstringWAIT(buf);
  7204  0CAA  30A0               	movlw	low Init_System@buf
  7205  0CAB  0024               	movlb	4	; select bank4
  7206  0CAC  00AF               	movwf	UARTstringWAIT@data^(0+512)
  7207  0CAD  3002               	movlw	high Init_System@buf
  7208  0CAE  00B0               	movwf	(UARTstringWAIT@data+1)^(0+512)
  7209  0CAF  319C  2425  318B   	fcall	_UARTstringWAIT
  7210                           
  7211                           ;user.c: 136: if(Parity)
  7212  0CB2  0025               	movlb	5	; select bank5
  7213  0CB3  0860               	movf	Init_System@Parity^(0+640),w
  7214  0CB4  1903               	btfsc	3,2
  7215  0CB5  2CD8               	goto	l6526
  7216                           
  7217                           ;user.c: 137: {
  7218                           ;user.c: 138: switch (Parity)
  7219  0CB6  2CCB               	goto	l6524
  7220  0CB7                     l6514:	
  7221                           ;user.c: 139: {
  7222                           ;user.c: 140: case 1:
  7223                           
  7224                           
  7225                           ;user.c: 141: UARTstringWAIT(OddParityMSG);
  7226  0CB7  3011               	movlw	low (_OddParityMSG| (0+32768))
  7227  0CB8  0024               	movlb	4	; select bank4
  7228  0CB9  00AF               	movwf	UARTstringWAIT@data^(0+512)
  7229  0CBA  3089               	movlw	high (_OddParityMSG| (0+32768))
  7230  0CBB  2CDC               	goto	L3
  7231  0CBC                     l6516:	
  7232                           ;user.c: 143: case 2:
  7233                           
  7234                           ;user.c: 142: break;
  7235                           
  7236                           
  7237                           ;user.c: 144: UARTstringWAIT(EvenParityMSG);
  7238  0CBC  30FB               	movlw	low (_EvenParityMSG| (0+32768))
  7239  0CBD  0024               	movlb	4	; select bank4
  7240  0CBE  00AF               	movwf	UARTstringWAIT@data^(0+512)
  7241  0CBF  3088               	movlw	high (_EvenParityMSG| (0+32768))
  7242  0CC0  2CDC               	goto	L3
  7243  0CC1                     l6518:	
  7244                           ;user.c: 146: case 3:
  7245                           
  7246                           ;user.c: 145: break;
  7247                           
  7248                           
  7249                           ;user.c: 147: UARTstringWAIT(MarkParityMSG);
  7250  0CC1  304A               	movlw	low (_MarkParityMSG| (0+32768))
  7251  0CC2  0024               	movlb	4	; select bank4
  7252  0CC3  00AF               	movwf	UARTstringWAIT@data^(0+512)
  7253  0CC4  3089               	movlw	high (_MarkParityMSG| (0+32768))
  7254  0CC5  2CDC               	goto	L3
  7255  0CC6                     l6520:	
  7256                           ;user.c: 149: default:
  7257                           
  7258                           ;user.c: 148: break;
  7259                           
  7260                           
  7261                           ;user.c: 150: UARTstringWAIT(SpaceParityMSG);
  7262  0CC6  303A               	movlw	low (_SpaceParityMSG| (0+32768))
  7263  0CC7  0024               	movlb	4	; select bank4
  7264  0CC8  00AF               	movwf	UARTstringWAIT@data^(0+512)
  7265  0CC9  3089               	movlw	high (_SpaceParityMSG| (0+32768))
  7266  0CCA  2CDC               	goto	L3
  7267  0CCB                     l6524:	
  7268                           ;user.c: 152: }
  7269                           
  7270                           ;user.c: 151: break;
  7271                           
  7272  0CCB  0025               	movlb	5	; select bank5
  7273  0CCC  0860               	movf	Init_System@Parity^(0+640),w
  7274                           
  7275                           ; Switch size 1, requested type "space"
  7276                           ; Number of cases is 3, Range of values is 1 to 3
  7277                           ; switch strategies available:
  7278                           ; Name         Instructions Cycles
  7279                           ; simple_byte           10     6 (average)
  7280                           ; direct_byte           15     9 (fixed)
  7281                           ; jumptable            263     9 (fixed)
  7282                           ;	Chosen strategy is simple_byte
  7283  0CCD  3A01               	xorlw	1	; case 1
  7284  0CCE  1903               	skipnz
  7285  0CCF  2CB7               	goto	l6514
  7286  0CD0  3A03               	xorlw	3	; case 2
  7287  0CD1  1903               	skipnz
  7288  0CD2  2CBC               	goto	l6516
  7289  0CD3  3A01               	xorlw	1	; case 3
  7290  0CD4  1903               	skipnz
  7291  0CD5  2CC1               	goto	l6518
  7292  0CD6  2CC6               	goto	l6520
  7293                           
  7294                           ;user.c: 153: }
  7295  0CD7  2CE0               	goto	l276
  7296  0CD8                     l6526:	
  7297                           
  7298                           ;user.c: 154: else
  7299                           ;user.c: 155: {
  7300                           ;user.c: 156: UARTstringWAIT(NoParityMSG);
  7301  0CD8  3026               	movlw	low (_NoParityMSG| (0+32768))
  7302  0CD9  0024               	movlb	4	; select bank4
  7303  0CDA  00AF               	movwf	UARTstringWAIT@data^(0+512)
  7304  0CDB  3089               	movlw	high (_NoParityMSG| (0+32768))
  7305  0CDC                     L3:	
  7306  0CDC  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  7307  0CDD  319C  2425  318B   	fcall	_UARTstringWAIT
  7308  0CE0                     l276:	
  7309                           
  7310                           ;user.c: 157: }
  7311                           ;user.c: 158: UARTstringWAIT("\r\n");
  7312  0CE0  3041               	movlw	low ((STR_15+16)| (0+32768))
  7313  0CE1  0024               	movlb	4	; select bank4
  7314  0CE2  00AF               	movwf	UARTstringWAIT@data^(0+512)
  7315  0CE3  308A               	movlw	high ((STR_15+16)| (0+32768))
  7316  0CE4  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  7317  0CE5  319C  2425  318B   	fcall	_UARTstringWAIT
  7318                           
  7319                           ;user.c: 159: delayUS(10000);
  7320  0CE8  3000               	movlw	0
  7321  0CE9  0024               	movlb	4	; select bank4
  7322  0CEA  00A3               	movwf	(delayUS@US+3)^(0+512)
  7323  0CEB  3000               	movlw	0
  7324  0CEC  00A2               	movwf	(delayUS@US+2)^(0+512)
  7325  0CED  3027               	movlw	39
  7326  0CEE  00A1               	movwf	(delayUS@US+1)^(0+512)
  7327  0CEF  3010               	movlw	16
  7328  0CF0  00A0               	movwf	delayUS@US^(0+512)
  7329  0CF1  319C  2458         	fcall	_delayUS
  7330                           
  7331                           ;user.c: 160: INTCON |= 0x08;
  7332  0CF3  158B               	bsf	11,3	;volatile
  7333                           
  7334                           ;user.c: 161: INTCONbits.GIE = 1;
  7335  0CF4  178B               	bsf	11,7	;volatile
  7336  0CF5  0008               	return
  7337  0CF6                     __end_of_Init_System:	
  7338                           
  7339                           	psect	text16
  7340  170A                     __ptext16:	
  7341 ;; *************** function _sprintf *****************
  7342 ;; Defined at:
  7343 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  7344 ;; Parameters:    Size  Location     Type
  7345 ;;  sp              2   24[BANK4 ] PTR unsigned char 
  7346 ;;		 -> Process_PS2_ScanCode@buf(60), SetBaud@buf(50), Init_System@buf(60), 
  7347 ;;  f               2   26[BANK4 ] PTR const unsigned char 
  7348 ;;		 -> STR_19(33), STR_12(21), STR_8(21), 
  7349 ;; Auto vars:     Size  Location     Type
  7350 ;;  _val            4   41[BANK4 ] struct .
  7351 ;;  ap              2   45[BANK4 ] PTR void [1]
  7352 ;;		 -> ?i1_sprintf(2), ?_sprintf(2), 
  7353 ;;  prec            2   39[BANK4 ] int 
  7354 ;;  c               1   47[BANK4 ] char 
  7355 ;;  flag            1   38[BANK4 ] unsigned char 
  7356 ;; Return value:  Size  Location     Type
  7357 ;;                  2   24[BANK4 ] int 
  7358 ;; Registers used:
  7359 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7360 ;; Tracked objects:
  7361 ;;		On entry : 0/0
  7362 ;;		On exit  : 0/0
  7363 ;;		Unchanged: 0/0
  7364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7365 ;;      Params:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  7366 ;;      Locals:         0       0       0       0       0      10       0       0       0       0       0       0       
      +0       0
  7367 ;;      Temps:          0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  7368 ;;      Totals:         0       0       0       0       0      24       0       0       0       0       0       0       
      +0       0
  7369 ;;Total ram usage:       24 bytes
  7370 ;; Hardware stack levels used:    1
  7371 ;; Hardware stack levels required when called:    8
  7372 ;; This function calls:
  7373 ;;		___lldiv
  7374 ;;		___llmod
  7375 ;; This function is called by:
  7376 ;;		_Init_System
  7377 ;; This function uses a non-reentrant model
  7378 ;;
  7379                           
  7380                           
  7381                           ;psect for function _sprintf
  7382  170A                     _sprintf:	
  7383                           
  7384                           ;doprnt.c: 494: va_list ap;
  7385                           ;doprnt.c: 499: signed char c;
  7386                           ;doprnt.c: 504: int prec;
  7387                           ;doprnt.c: 508: unsigned char flag;
  7388                           ;doprnt.c: 527: union {
  7389                           ;doprnt.c: 528: unsigned long _val;
  7390                           ;doprnt.c: 529: struct {
  7391                           ;doprnt.c: 530: const char * _cp;
  7392                           ;doprnt.c: 531: unsigned _len;
  7393                           ;doprnt.c: 532: } _str;
  7394                           ;doprnt.c: 533: } _val;
  7395                           ;doprnt.c: 542: *ap = __va_start();
  7396                           
  7397                           ;incstack = 0
  7398                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7399  170A  303C               	movlw	low (?_sprintf+4)
  7400  170B  0024               	movlb	4	; select bank4
  7401  170C  00CD               	movwf	sprintf@ap^(0+512)
  7402  170D  3002               	movlw	high (?_sprintf+4)
  7403  170E  00CE               	movwf	(sprintf@ap+1)^(0+512)
  7404  170F                     l6276:	
  7405                           ;doprnt.c: 545: while(c = *f++) {
  7406                           
  7407  170F  083B               	movf	(sprintf@f+1)^(0+512),w
  7408  1710  00C1               	movwf	(??_sprintf^(0+512)+1)
  7409  1711  083A               	movf	sprintf@f^(0+512),w
  7410  1712  00C0               	movwf	??_sprintf^(0+512)
  7411  1713  0ABA               	incf	sprintf@f^(0+512),f
  7412  1714  1903               	skipnz
  7413  1715  0ABB               	incf	(sprintf@f+1)^(0+512),f
  7414  1716  0840               	movf	??_sprintf^(0+512),w
  7415  1717  0084               	movwf	4
  7416  1718  0841               	movf	(??_sprintf+1)^(0+512),w
  7417  1719  0085               	movwf	5
  7418  171A  0800               	movf	0,w	;code access
  7419  171B  00C2               	movwf	(??_sprintf+2)^(0+512)
  7420  171C  0842               	movf	(??_sprintf+2)^(0+512),w
  7421  171D  00CF               	movwf	sprintf@c^(0+512)
  7422  171E  08CF               	movf	sprintf@c^(0+512),f
  7423  171F  1903               	btfsc	3,2
  7424  1720  2FFA               	goto	l6278
  7425                           
  7426                           ;doprnt.c: 547: if(c != '%')
  7427  1721  084F               	movf	sprintf@c^(0+512),w
  7428  1722  3A25               	xorlw	37
  7429  1723  1903               	skipnz
  7430  1724  2F30               	goto	l6236
  7431                           
  7432                           ;doprnt.c: 549: {
  7433                           ;doprnt.c: 550: ((*sp++ = (c)));
  7434  1725  0838               	movf	sprintf@sp^(0+512),w
  7435  1726  0086               	movwf	6
  7436  1727  0839               	movf	(sprintf@sp+1)^(0+512),w
  7437  1728  0087               	movwf	7
  7438  1729  084F               	movf	sprintf@c^(0+512),w
  7439  172A  0081               	movwf	1
  7440  172B  3001               	movlw	1
  7441  172C  07B8               	addwf	sprintf@sp^(0+512),f
  7442  172D  3000               	movlw	0
  7443  172E  3DB9               	addwfc	(sprintf@sp+1)^(0+512),f
  7444                           
  7445                           ;doprnt.c: 551: continue;
  7446  172F  2F0F               	goto	l6276
  7447  1730                     l6236:	
  7448                           
  7449                           ;doprnt.c: 552: }
  7450                           ;doprnt.c: 557: flag = 0;
  7451  1730  01C6               	clrf	sprintf@flag^(0+512)
  7452                           
  7453                           ;doprnt.c: 644: switch(c = *f++) {
  7454                           
  7455                           ;doprnt.c: 642: loop:
  7456  1731  2F39               	goto	l6242
  7457  1732                     l1076:	
  7458                           ;doprnt.c: 650: case 'l':
  7459                           
  7460                           ;doprnt.c: 647: goto alldone;
  7461                           
  7462                           ;doprnt.c: 646: case 0:
  7463                           
  7464                           
  7465                           ;doprnt.c: 652: flag |= 0x10;
  7466  1732  1646               	bsf	sprintf@flag^(0+512),4
  7467                           
  7468                           ;doprnt.c: 653: goto loop;
  7469  1733  2F39               	goto	l6242
  7470  1734                     l6238:	
  7471                           ;doprnt.c: 826: case 'u':
  7472                           
  7473                           ;doprnt.c: 822: continue;
  7474                           
  7475                           ;doprnt.c: 811: default:
  7476                           
  7477                           
  7478                           ;doprnt.c: 827: flag |= 0xC0;
  7479  1734  30C0               	movlw	192
  7480  1735  00C0               	movwf	??_sprintf^(0+512)
  7481  1736  0840               	movf	??_sprintf^(0+512),w
  7482  1737  04C6               	iorwf	sprintf@flag^(0+512),f
  7483                           
  7484                           ;doprnt.c: 831: }
  7485                           
  7486                           ;doprnt.c: 828: break;
  7487  1738  2F50               	goto	l1079
  7488  1739                     l6242:	
  7489  1739  083B               	movf	(sprintf@f+1)^(0+512),w
  7490  173A  00C1               	movwf	(??_sprintf^(0+512)+1)
  7491  173B  083A               	movf	sprintf@f^(0+512),w
  7492  173C  00C0               	movwf	??_sprintf^(0+512)
  7493  173D  0ABA               	incf	sprintf@f^(0+512),f
  7494  173E  1903               	skipnz
  7495  173F  0ABB               	incf	(sprintf@f+1)^(0+512),f
  7496  1740  0840               	movf	??_sprintf^(0+512),w
  7497  1741  0084               	movwf	4
  7498  1742  0841               	movf	(??_sprintf+1)^(0+512),w
  7499  1743  0085               	movwf	5
  7500  1744  0800               	movf	0,w	;code access
  7501  1745  00CF               	movwf	sprintf@c^(0+512)
  7502                           
  7503                           ; Switch size 1, requested type "space"
  7504                           ; Number of cases is 3, Range of values is 0 to 117
  7505                           ; switch strategies available:
  7506                           ; Name         Instructions Cycles
  7507                           ; simple_byte           10     6 (average)
  7508                           ; direct_byte          242     6 (fixed)
  7509                           ; jumptable            260     6 (fixed)
  7510                           ;	Chosen strategy is simple_byte
  7511  1746  3A00               	xorlw	0	; case 0
  7512  1747  1903               	skipnz
  7513  1748  2FFA               	goto	l6278
  7514  1749  3A6C               	xorlw	108	; case 108
  7515  174A  1903               	skipnz
  7516  174B  2F32               	goto	l1076
  7517  174C  3A19               	xorlw	25	; case 117
  7518  174D  1903               	skipnz
  7519  174E  2F34               	goto	l6238
  7520  174F  2F0F               	goto	l6276
  7521  1750                     l1079:	
  7522                           
  7523                           ;doprnt.c: 1282: {
  7524                           ;doprnt.c: 1290: if(flag & 0x10)
  7525  1750  1E46               	btfss	sprintf@flag^(0+512),4
  7526  1751  2F60               	goto	l6248
  7527                           
  7528                           ;doprnt.c: 1291: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
  7529  1752  084D               	movf	sprintf@ap^(0+512),w
  7530  1753  0086               	movwf	6
  7531  1754  084E               	movf	(sprintf@ap+1)^(0+512),w
  7532  1755  0087               	movwf	7
  7533  1756  3F40               	moviw [0]fsr1
  7534  1757  00C9               	movwf	sprintf@_val^(0+512)
  7535  1758  3F41               	moviw [1]fsr1
  7536  1759  00CA               	movwf	(sprintf@_val+1)^(0+512)
  7537  175A  3F42               	moviw [2]fsr1
  7538  175B  00CB               	movwf	(sprintf@_val+2)^(0+512)
  7539  175C  3F43               	moviw [3]fsr1
  7540  175D  00CC               	movwf	(sprintf@_val+3)^(0+512)
  7541  175E  3004               	movlw	4
  7542  175F  2F6F               	goto	L4
  7543  1760                     l6248:	
  7544                           
  7545                           ;doprnt.c: 1292: else
  7546                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7547  1760  084D               	movf	sprintf@ap^(0+512),w
  7548  1761  0086               	movwf	6
  7549  1762  084E               	movf	(sprintf@ap+1)^(0+512),w
  7550  1763  0087               	movwf	7
  7551  1764  3F40               	moviw [0]fsr1
  7552  1765  00C0               	movwf	??_sprintf^(0+512)
  7553  1766  3F41               	moviw [1]fsr1
  7554  1767  00C1               	movwf	(??_sprintf^(0+512)+1)
  7555  1768  0840               	movf	??_sprintf^(0+512),w
  7556  1769  00C9               	movwf	sprintf@_val^(0+512)
  7557  176A  0841               	movf	(??_sprintf+1)^(0+512),w
  7558  176B  00CA               	movwf	(sprintf@_val^(0+512)+1)
  7559  176C  01CB               	clrf	(sprintf@_val^(0+512)+2)
  7560  176D  01CC               	clrf	(sprintf@_val^(0+512)+3)
  7561  176E  3002               	movlw	2
  7562  176F                     L4:	
  7563  176F  07CD               	addwf	sprintf@ap^(0+512),f
  7564  1770  3000               	movlw	0
  7565  1771  3DCE               	addwfc	(sprintf@ap+1)^(0+512),f
  7566                           
  7567                           ;doprnt.c: 1296: }
  7568                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7569  1772  01CF               	clrf	sprintf@c^(0+512)
  7570  1773  0ACF               	incf	sprintf@c^(0+512),f
  7571  1774  084F               	movf	sprintf@c^(0+512),w
  7572  1775  3A0A               	xorlw	10
  7573  1776  1903               	btfsc	3,2
  7574  1777  2FA5               	goto	l6266
  7575  1778                     l6258:	
  7576                           
  7577                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  7578  1778  084F               	movf	sprintf@c^(0+512),w
  7579  1779  00C0               	movwf	??_sprintf^(0+512)
  7580  177A  01C1               	clrf	(??_sprintf^(0+512)+1)
  7581  177B  35C0               	lslf	??_sprintf^(0+512),f
  7582  177C  0DC1               	rlf	(??_sprintf^(0+512)+1),f
  7583  177D  35C0               	lslf	??_sprintf^(0+512),f
  7584  177E  0DC1               	rlf	(??_sprintf^(0+512)+1),f
  7585  177F  30D3               	movlw	low (_dpowers| (0+32768))
  7586  1780  0740               	addwf	??_sprintf^(0+512),w
  7587  1781  0084               	movwf	4
  7588  1782  3088               	movlw	high (_dpowers| (0+32768))
  7589  1783  3D41               	addwfc	(??_sprintf+1)^(0+512),w
  7590  1784  0085               	movwf	5
  7591  1785  3F00               	moviw [0]fsr0
  7592  1786  00C2               	movwf	(??_sprintf+2)^(0+512)
  7593  1787  3F01               	moviw [1]fsr0
  7594  1788  00C3               	movwf	((??_sprintf+2)^(0+512)+1)
  7595  1789  3F02               	moviw [2]fsr0
  7596  178A  00C4               	movwf	((??_sprintf+2)^(0+512)+2)
  7597  178B  3F03               	moviw [3]fsr0
  7598  178C  00C5               	movwf	((??_sprintf+2)^(0+512)+3)
  7599  178D  0845               	movf	(??_sprintf+5)^(0+512),w
  7600  178E  024C               	subwf	(sprintf@_val+3)^(0+512),w
  7601  178F  1D03               	skipz
  7602  1790  2F9B               	goto	u8075
  7603  1791  0844               	movf	(??_sprintf+4)^(0+512),w
  7604  1792  024B               	subwf	(sprintf@_val+2)^(0+512),w
  7605  1793  1D03               	skipz
  7606  1794  2F9B               	goto	u8075
  7607  1795  0843               	movf	(??_sprintf+3)^(0+512),w
  7608  1796  024A               	subwf	(sprintf@_val+1)^(0+512),w
  7609  1797  1D03               	skipz
  7610  1798  2F9B               	goto	u8075
  7611  1799  0842               	movf	(??_sprintf+2)^(0+512),w
  7612  179A  0249               	subwf	sprintf@_val^(0+512),w
  7613  179B                     u8075:	
  7614  179B  1C03               	btfss	3,0
  7615  179C  2FA5               	goto	l6266
  7616                           
  7617                           ;doprnt.c: 1316: break;
  7618  179D  3001               	movlw	1
  7619  179E  00C0               	movwf	??_sprintf^(0+512)
  7620  179F  0840               	movf	??_sprintf^(0+512),w
  7621  17A0  07CF               	addwf	sprintf@c^(0+512),f
  7622  17A1  084F               	movf	sprintf@c^(0+512),w
  7623  17A2  3A0A               	xorlw	10
  7624  17A3  1D03               	skipz
  7625  17A4  2F78               	goto	l6258
  7626  17A5                     l6266:	
  7627                           
  7628                           ;doprnt.c: 1431: {
  7629                           ;doprnt.c: 1478: }
  7630                           ;doprnt.c: 1481: prec = c;
  7631  17A5  084F               	movf	sprintf@c^(0+512),w
  7632  17A6  00C7               	movwf	sprintf@prec^(0+512)
  7633  17A7  01C8               	clrf	(sprintf@prec+1)^(0+512)
  7634  17A8  1BC7               	btfsc	sprintf@prec^(0+512),7
  7635  17A9  03C8               	decf	(sprintf@prec+1)^(0+512),f
  7636  17AA                     l6274:	
  7637                           ;doprnt.c: 1483: while(prec--) {
  7638                           
  7639  17AA  30FF               	movlw	255
  7640  17AB  07C7               	addwf	sprintf@prec^(0+512),f
  7641  17AC  30FF               	movlw	255
  7642  17AD  3DC8               	addwfc	(sprintf@prec+1)^(0+512),f
  7643  17AE  30FF               	movlw	255
  7644  17AF  0648               	xorwf	(sprintf@prec+1)^(0+512),w
  7645  17B0  1D03               	skipz
  7646  17B1  2FB4               	goto	u8095
  7647  17B2  30FF               	movlw	255
  7648  17B3  0647               	xorwf	sprintf@prec^(0+512),w
  7649  17B4                     u8095:	
  7650  17B4  1903               	btfsc	3,2
  7651  17B5  2F0F               	goto	l6276
  7652                           
  7653                           ;doprnt.c: 1487: {
  7654                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  7655  17B6  3000               	movlw	0
  7656  17B7  00B1               	movwf	(___llmod@divisor+3)^(0+512)
  7657  17B8  3000               	movlw	0
  7658  17B9  00B0               	movwf	(___llmod@divisor+2)^(0+512)
  7659  17BA  3000               	movlw	0
  7660  17BB  00AF               	movwf	(___llmod@divisor+1)^(0+512)
  7661  17BC  300A               	movlw	10
  7662  17BD  00AE               	movwf	___llmod@divisor^(0+512)
  7663  17BE  0848               	movf	(sprintf@prec+1)^(0+512),w
  7664  17BF  0085               	movwf	5
  7665  17C0  0847               	movf	sprintf@prec^(0+512),w
  7666  17C1  0084               	movwf	4
  7667  17C2  3584               	lslf	4,f
  7668  17C3  0D85               	rlf	5,f
  7669  17C4  3584               	lslf	4,f
  7670  17C5  0D85               	rlf	5,f
  7671  17C6  30D3               	movlw	low (_dpowers| (0+32768))
  7672  17C7  0784               	addwf	4,f
  7673  17C8  3088               	movlw	high (_dpowers| (0+32768))
  7674  17C9  3D85               	addwfc	5,f
  7675  17CA  3F00               	moviw [0]fsr0
  7676  17CB  00A0               	movwf	___lldiv@divisor^(0+512)
  7677  17CC  3F01               	moviw [1]fsr0
  7678  17CD  00A1               	movwf	(___lldiv@divisor+1)^(0+512)
  7679  17CE  3F02               	moviw [2]fsr0
  7680  17CF  00A2               	movwf	(___lldiv@divisor+2)^(0+512)
  7681  17D0  3F03               	moviw [3]fsr0
  7682  17D1  00A3               	movwf	(___lldiv@divisor+3)^(0+512)
  7683  17D2  084C               	movf	(sprintf@_val+3)^(0+512),w
  7684  17D3  00A7               	movwf	(___lldiv@dividend+3)^(0+512)
  7685  17D4  084B               	movf	(sprintf@_val+2)^(0+512),w
  7686  17D5  00A6               	movwf	(___lldiv@dividend+2)^(0+512)
  7687  17D6  084A               	movf	(sprintf@_val+1)^(0+512),w
  7688  17D7  00A5               	movwf	(___lldiv@dividend+1)^(0+512)
  7689  17D8  0849               	movf	sprintf@_val^(0+512),w
  7690  17D9  00A4               	movwf	___lldiv@dividend^(0+512)
  7691  17DA  319F  2759  3197   	fcall	___lldiv
  7692  17DD  0024               	movlb	4	; select bank4
  7693  17DE  0823               	movf	(?___lldiv+3)^(0+512),w
  7694  17DF  00B5               	movwf	(___llmod@dividend+3)^(0+512)
  7695  17E0  0822               	movf	(?___lldiv+2)^(0+512),w
  7696  17E1  00B4               	movwf	(___llmod@dividend+2)^(0+512)
  7697  17E2  0821               	movf	(?___lldiv+1)^(0+512),w
  7698  17E3  00B3               	movwf	(___llmod@dividend+1)^(0+512)
  7699  17E4  0820               	movf	?___lldiv^(0+512),w
  7700  17E5  00B2               	movwf	___llmod@dividend^(0+512)
  7701  17E6  319D  258E  3197   	fcall	___llmod
  7702  17E9  0024               	movlb	4	; select bank4
  7703  17EA  082E               	movf	?___llmod^(0+512),w
  7704  17EB  3E30               	addlw	48
  7705  17EC  00C0               	movwf	??_sprintf^(0+512)
  7706  17ED  0840               	movf	??_sprintf^(0+512),w
  7707  17EE  00CF               	movwf	sprintf@c^(0+512)
  7708                           
  7709                           ;doprnt.c: 1532: }
  7710                           ;doprnt.c: 1533: ((*sp++ = (c)));
  7711  17EF  0838               	movf	sprintf@sp^(0+512),w
  7712  17F0  0086               	movwf	6
  7713  17F1  0839               	movf	(sprintf@sp+1)^(0+512),w
  7714  17F2  0087               	movwf	7
  7715  17F3  084F               	movf	sprintf@c^(0+512),w
  7716  17F4  0081               	movwf	1
  7717  17F5  3001               	movlw	1
  7718  17F6  07B8               	addwf	sprintf@sp^(0+512),f
  7719  17F7  3000               	movlw	0
  7720  17F8  3DB9               	addwfc	(sprintf@sp+1)^(0+512),f
  7721  17F9  2FAA               	goto	l6274
  7722  17FA                     l6278:	
  7723                           ;doprnt.c: 1534: }
  7724                           ;doprnt.c: 1542: }
  7725                           ;doprnt.c: 1544: alldone:
  7726                           
  7727                           
  7728                           ;doprnt.c: 1547: *sp = 0;
  7729  17FA  0838               	movf	sprintf@sp^(0+512),w
  7730  17FB  0086               	movwf	6
  7731  17FC  0839               	movf	(sprintf@sp+1)^(0+512),w
  7732  17FD  0087               	movwf	7
  7733  17FE  0181               	clrf	1
  7734  17FF  0008               	return
  7735  1800                     __end_of_sprintf:	
  7736                           ;doprnt.c: 1549: return 0;
  7737                           ;	Return value of _sprintf is never used
  7738                           
  7739                           
  7740                           	psect	text17
  7741  1D8E                     __ptext17:	
  7742 ;; *************** function ___llmod *****************
  7743 ;; Defined at:
  7744 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\llmod.c"
  7745 ;; Parameters:    Size  Location     Type
  7746 ;;  divisor         4   14[BANK4 ] unsigned long 
  7747 ;;  dividend        4   18[BANK4 ] unsigned long 
  7748 ;; Auto vars:     Size  Location     Type
  7749 ;;  counter         1   23[BANK4 ] unsigned char 
  7750 ;; Return value:  Size  Location     Type
  7751 ;;                  4   14[BANK4 ] unsigned long 
  7752 ;; Registers used:
  7753 ;;		wreg, status,2, status,0
  7754 ;; Tracked objects:
  7755 ;;		On entry : 0/0
  7756 ;;		On exit  : 0/0
  7757 ;;		Unchanged: 0/0
  7758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7759 ;;      Params:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  7760 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7761 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7762 ;;      Totals:         0       0       0       0       0      10       0       0       0       0       0       0       
      +0       0
  7763 ;;Total ram usage:       10 bytes
  7764 ;; Hardware stack levels used:    1
  7765 ;; Hardware stack levels required when called:    7
  7766 ;; This function calls:
  7767 ;;		Nothing
  7768 ;; This function is called by:
  7769 ;;		_sprintf
  7770 ;; This function uses a non-reentrant model
  7771 ;;
  7772                           
  7773                           
  7774                           ;psect for function ___llmod
  7775  1D8E                     ___llmod:	
  7776                           
  7777                           ;incstack = 0
  7778                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  7779  1D8E  0024               	movlb	4	; select bank4
  7780  1D8F  0831               	movf	(___llmod@divisor+3)^(0+512),w
  7781  1D90  0430               	iorwf	(___llmod@divisor+2)^(0+512),w
  7782  1D91  042F               	iorwf	(___llmod@divisor+1)^(0+512),w
  7783  1D92  042E               	iorwf	___llmod@divisor^(0+512),w
  7784  1D93  1903               	skipnz
  7785  1D94  2DC8               	goto	l4242
  7786  1D95  01B7               	clrf	___llmod@counter^(0+512)
  7787  1D96  0AB7               	incf	___llmod@counter^(0+512),f
  7788  1D97                     l4232:	
  7789  1D97  1BB1               	btfsc	(___llmod@divisor+3)^(0+512),7
  7790  1D98  2DA5               	goto	l4234
  7791  1D99  3001               	movlw	1
  7792  1D9A                     u4745:	
  7793  1D9A  35AE               	lslf	___llmod@divisor^(0+512),f
  7794  1D9B  0DAF               	rlf	(___llmod@divisor+1)^(0+512),f
  7795  1D9C  0DB0               	rlf	(___llmod@divisor+2)^(0+512),f
  7796  1D9D  0DB1               	rlf	(___llmod@divisor+3)^(0+512),f
  7797  1D9E  0B89               	decfsz	9,f
  7798  1D9F  2D9A               	goto	u4745
  7799  1DA0  3001               	movlw	1
  7800  1DA1  00B6               	movwf	??___llmod^(0+512)
  7801  1DA2  0836               	movf	??___llmod^(0+512),w
  7802  1DA3  07B7               	addwf	___llmod@counter^(0+512),f
  7803  1DA4  2D97               	goto	l4232
  7804  1DA5                     l4234:	
  7805  1DA5  0831               	movf	(___llmod@divisor+3)^(0+512),w
  7806  1DA6  0235               	subwf	(___llmod@dividend+3)^(0+512),w
  7807  1DA7  1D03               	skipz
  7808  1DA8  2DB3               	goto	u4765
  7809  1DA9  0830               	movf	(___llmod@divisor+2)^(0+512),w
  7810  1DAA  0234               	subwf	(___llmod@dividend+2)^(0+512),w
  7811  1DAB  1D03               	skipz
  7812  1DAC  2DB3               	goto	u4765
  7813  1DAD  082F               	movf	(___llmod@divisor+1)^(0+512),w
  7814  1DAE  0233               	subwf	(___llmod@dividend+1)^(0+512),w
  7815  1DAF  1D03               	skipz
  7816  1DB0  2DB3               	goto	u4765
  7817  1DB1  082E               	movf	___llmod@divisor^(0+512),w
  7818  1DB2  0232               	subwf	___llmod@dividend^(0+512),w
  7819  1DB3                     u4765:	
  7820  1DB3  1C03               	skipc
  7821  1DB4  2DBD               	goto	l4238
  7822  1DB5  082E               	movf	___llmod@divisor^(0+512),w
  7823  1DB6  02B2               	subwf	___llmod@dividend^(0+512),f
  7824  1DB7  082F               	movf	(___llmod@divisor+1)^(0+512),w
  7825  1DB8  3BB3               	subwfb	(___llmod@dividend+1)^(0+512),f
  7826  1DB9  0830               	movf	(___llmod@divisor+2)^(0+512),w
  7827  1DBA  3BB4               	subwfb	(___llmod@dividend+2)^(0+512),f
  7828  1DBB  0831               	movf	(___llmod@divisor+3)^(0+512),w
  7829  1DBC  3BB5               	subwfb	(___llmod@dividend+3)^(0+512),f
  7830  1DBD                     l4238:	
  7831  1DBD  3001               	movlw	1
  7832  1DBE                     u4775:	
  7833  1DBE  36B1               	lsrf	(___llmod@divisor+3)^(0+512),f
  7834  1DBF  0CB0               	rrf	(___llmod@divisor+2)^(0+512),f
  7835  1DC0  0CAF               	rrf	(___llmod@divisor+1)^(0+512),f
  7836  1DC1  0CAE               	rrf	___llmod@divisor^(0+512),f
  7837  1DC2  0B89               	decfsz	9,f
  7838  1DC3  2DBE               	goto	u4775
  7839  1DC4  3001               	movlw	1
  7840  1DC5  02B7               	subwf	___llmod@counter^(0+512),f
  7841  1DC6  1D03               	btfss	3,2
  7842  1DC7  2DA5               	goto	l4234
  7843  1DC8                     l4242:	
  7844  1DC8  0835               	movf	(___llmod@dividend+3)^(0+512),w
  7845  1DC9  00B1               	movwf	(?___llmod+3)^(0+512)
  7846  1DCA  0834               	movf	(___llmod@dividend+2)^(0+512),w
  7847  1DCB  00B0               	movwf	(?___llmod+2)^(0+512)
  7848  1DCC  0833               	movf	(___llmod@dividend+1)^(0+512),w
  7849  1DCD  00AF               	movwf	(?___llmod+1)^(0+512)
  7850  1DCE  0832               	movf	___llmod@dividend^(0+512),w
  7851  1DCF  00AE               	movwf	?___llmod^(0+512)
  7852  1DD0  0008               	return
  7853  1DD1                     __end_of___llmod:	
  7854                           
  7855                           	psect	text18
  7856  1C25                     __ptext18:	
  7857 ;; *************** function _UARTstringWAIT *****************
  7858 ;; Defined at:
  7859 ;;		line 361 in file "UART.c"
  7860 ;; Parameters:    Size  Location     Type
  7861 ;;  data            2   15[BANK4 ] PTR const unsigned char 
  7862 ;;		 -> STR_21(29), STR_20(3), Process_PS2_ScanCode@buf(60), STR_18(3), 
  7863 ;;		 -> STR_17(3), STR_16(23), STR_15(19), STR_14(3), 
  7864 ;;		 -> STR_13(3), SetBaud@buf(50), STR_11(24), STR_10(3), 
  7865 ;;		 -> STR_9(3), NoParityMSG(20), SpaceParityMSG(16), MarkParityMSG(15), 
  7866 ;;		 -> EvenParityMSG(22), OddParityMSG(21), Init_System@buf(60), STR_7(3), 
  7867 ;;		 -> STR_6(39), STR_5(3), Version(8), STR_4(19), 
  7868 ;;		 -> STR_3(26), STR_2(8), STR_1(7), VoltageMSG(13), 
  7869 ;; Auto vars:     Size  Location     Type
  7870 ;;		None
  7871 ;; Return value:  Size  Location     Type
  7872 ;;		None               void
  7873 ;; Registers used:
  7874 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7875 ;; Tracked objects:
  7876 ;;		On entry : 0/0
  7877 ;;		On exit  : 0/0
  7878 ;;		Unchanged: 0/0
  7879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7880 ;;      Params:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  7881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7882 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  7883 ;;      Totals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  7884 ;;Total ram usage:        4 bytes
  7885 ;; Hardware stack levels used:    1
  7886 ;; Hardware stack levels required when called:    9
  7887 ;; This function calls:
  7888 ;;		_UARTchar
  7889 ;;		_delayUS
  7890 ;; This function is called by:
  7891 ;;		_main
  7892 ;;		_Init_System
  7893 ;; This function uses a non-reentrant model
  7894 ;;
  7895                           
  7896                           
  7897                           ;psect for function _UARTstringWAIT
  7898  1C25                     _UARTstringWAIT:	
  7899  1C25                     l468:	
  7900                           ;incstack = 0
  7901                           ; Regs used in _UARTstringWAIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7902                           ;UART.c: 363: do
  7903                           
  7904                           
  7905                           ;UART.c: 364: {
  7906                           ;UART.c: 365: delayUS(5000);
  7907  1C25  3000               	movlw	0
  7908  1C26  0024               	movlb	4	; select bank4
  7909  1C27  00A3               	movwf	(delayUS@US+3)^(0+512)
  7910  1C28  3000               	movlw	0
  7911  1C29  00A2               	movwf	(delayUS@US+2)^(0+512)
  7912  1C2A  3013               	movlw	19
  7913  1C2B  00A1               	movwf	(delayUS@US+1)^(0+512)
  7914  1C2C  3088               	movlw	136
  7915  1C2D  00A0               	movwf	delayUS@US^(0+512)
  7916  1C2E  319C  2458  319C   	fcall	_delayUS
  7917                           
  7918                           ;UART.c: 366: if(*data != 0)
  7919  1C31  0024               	movlb	4	; select bank4
  7920  1C32  082F               	movf	UARTstringWAIT@data^(0+512),w
  7921  1C33  0084               	movwf	4
  7922  1C34  0830               	movf	(UARTstringWAIT@data+1)^(0+512),w
  7923  1C35  0085               	movwf	5
  7924  1C36  0800               	movf	0,w	;code access
  7925  1C37  3A00               	xorlw	0
  7926  1C38  1903               	skipnz
  7927  1C39  2C47               	goto	l6152
  7928                           
  7929                           ;UART.c: 367: {
  7930                           ;UART.c: 368: UARTchar(*data, 0, 0);
  7931  1C3A  01A8               	clrf	UARTchar@override^(0+512)
  7932  1C3B  01A9               	clrf	UARTchar@NinethBit_override_data^(0+512)
  7933  1C3C  082F               	movf	UARTstringWAIT@data^(0+512),w
  7934  1C3D  0084               	movwf	4
  7935  1C3E  0830               	movf	(UARTstringWAIT@data+1)^(0+512),w
  7936  1C3F  0085               	movwf	5
  7937  1C40  0800               	movf	0,w	;code access
  7938  1C41  3191  2132  319C   	fcall	_UARTchar
  7939  1C44                     l470:	
  7940                           ;UART.c: 369: while((!TX1STAbits.TRMT));
  7941                           
  7942  1C44  0023               	movlb	3	; select bank3
  7943  1C45  1C9E               	btfss	30,1	;volatile
  7944  1C46  2C44               	goto	l470
  7945  1C47                     l6152:	
  7946                           
  7947                           ;UART.c: 370: }
  7948                           ;UART.c: 371: } while( *data++);
  7949  1C47  0024               	movlb	4	; select bank4
  7950  1C48  0830               	movf	(UARTstringWAIT@data+1)^(0+512),w
  7951  1C49  00B2               	movwf	(??_UARTstringWAIT^(0+512)+1)
  7952  1C4A  082F               	movf	UARTstringWAIT@data^(0+512),w
  7953  1C4B  00B1               	movwf	??_UARTstringWAIT^(0+512)
  7954  1C4C  0AAF               	incf	UARTstringWAIT@data^(0+512),f
  7955  1C4D  1903               	skipnz
  7956  1C4E  0AB0               	incf	(UARTstringWAIT@data+1)^(0+512),f
  7957  1C4F  0831               	movf	??_UARTstringWAIT^(0+512),w
  7958  1C50  0084               	movwf	4
  7959  1C51  0832               	movf	(??_UARTstringWAIT+1)^(0+512),w
  7960  1C52  0085               	movwf	5
  7961  1C53  0800               	movf	0,w	;code access
  7962  1C54  3800               	iorlw	0
  7963  1C55  1903               	btfsc	3,2
  7964  1C56  0008               	return
  7965  1C57  2C25               	goto	l468
  7966  1C58                     __end_of_UARTstringWAIT:	
  7967                           
  7968                           	psect	text19
  7969  1C58                     __ptext19:	
  7970 ;; *************** function _delayUS *****************
  7971 ;; Defined at:
  7972 ;;		line 49 in file "MISC.c"
  7973 ;; Parameters:    Size  Location     Type
  7974 ;;  US              4    0[BANK4 ] long 
  7975 ;; Auto vars:     Size  Location     Type
  7976 ;;  i               4    5[BANK4 ] long 
  7977 ;;  j               1    9[BANK4 ] unsigned char 
  7978 ;; Return value:  Size  Location     Type
  7979 ;;		None               void
  7980 ;; Registers used:
  7981 ;;		wreg, status,2, status,0
  7982 ;; Tracked objects:
  7983 ;;		On entry : 0/0
  7984 ;;		On exit  : 0/0
  7985 ;;		Unchanged: 0/0
  7986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7987 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  7988 ;;      Locals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  7989 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7990 ;;      Totals:         0       0       0       0       0      10       0       0       0       0       0       0       
      +0       0
  7991 ;;Total ram usage:       10 bytes
  7992 ;; Hardware stack levels used:    1
  7993 ;; Hardware stack levels required when called:    7
  7994 ;; This function calls:
  7995 ;;		Nothing
  7996 ;; This function is called by:
  7997 ;;		_main
  7998 ;;		_Init_System
  7999 ;;		_UARTstringWAIT
  8000 ;;		_InternalADC_Read
  8001 ;;		_Init_PS_2_Send
  8002 ;;		_Keyboard_Connected
  8003 ;; This function uses a non-reentrant model
  8004 ;;
  8005                           
  8006                           
  8007                           ;psect for function _delayUS
  8008  1C58                     _delayUS:	
  8009                           
  8010                           ;MISC.c: 51: long i;
  8011                           ;MISC.c: 52: unsigned char j;
  8012                           ;MISC.c: 53: for(i=0;i<US;i+=6)
  8013                           
  8014                           ;incstack = 0
  8015                           ; Regs used in _delayUS: [wreg+status,2+status,0]
  8016  1C58  3000               	movlw	0
  8017  1C59  0024               	movlb	4	; select bank4
  8018  1C5A  00A8               	movwf	(delayUS@i+3)^(0+512)
  8019  1C5B  3000               	movlw	0
  8020  1C5C  00A7               	movwf	(delayUS@i+2)^(0+512)
  8021  1C5D  3000               	movlw	0
  8022  1C5E  00A6               	movwf	(delayUS@i+1)^(0+512)
  8023  1C5F  3000               	movlw	0
  8024  1C60  00A5               	movwf	delayUS@i^(0+512)
  8025  1C61                     l284:	
  8026  1C61  0828               	movf	(delayUS@i+3)^(0+512),w
  8027  1C62  3A80               	xorlw	128
  8028  1C63  00A4               	movwf	??_delayUS^(0+512)
  8029  1C64  0823               	movf	(delayUS@US+3)^(0+512),w
  8030  1C65  3A80               	xorlw	128
  8031  1C66  0224               	subwf	??_delayUS^(0+512),w
  8032  1C67  1D03               	skipz
  8033  1C68  2C73               	goto	u7703
  8034  1C69  0822               	movf	(delayUS@US+2)^(0+512),w
  8035  1C6A  0227               	subwf	(delayUS@i+2)^(0+512),w
  8036  1C6B  1D03               	skipz
  8037  1C6C  2C73               	goto	u7703
  8038  1C6D  0821               	movf	(delayUS@US+1)^(0+512),w
  8039  1C6E  0226               	subwf	(delayUS@i+1)^(0+512),w
  8040  1C6F  1D03               	skipz
  8041  1C70  2C73               	goto	u7703
  8042  1C71  0820               	movf	delayUS@US^(0+512),w
  8043  1C72  0225               	subwf	delayUS@i^(0+512),w
  8044  1C73                     u7703:	
  8045  1C73  1803               	btfsc	3,0
  8046  1C74  0008               	return
  8047                           
  8048                           ;MISC.c: 54: {
  8049                           ;MISC.c: 55: for(j=0;j<32;j++)
  8050  1C75  01A9               	clrf	delayUS@j^(0+512)
  8051  1C76  3020               	movlw	32
  8052  1C77  0229               	subwf	delayUS@j^(0+512),w
  8053  1C78  1803               	btfsc	3,0
  8054  1C79  2C84               	goto	l6034
  8055  1C7A                     l286:	
  8056                           
  8057                           ;MISC.c: 56: {
  8058                           ;MISC.c: 57: __nop();
  8059  1C7A  0000               	nop
  8060  1C7B  3001               	movlw	1
  8061  1C7C  0024               	movlb	4	; select bank4
  8062  1C7D  00A4               	movwf	??_delayUS^(0+512)
  8063  1C7E  0824               	movf	??_delayUS^(0+512),w
  8064  1C7F  07A9               	addwf	delayUS@j^(0+512),f
  8065  1C80  3020               	movlw	32
  8066  1C81  0229               	subwf	delayUS@j^(0+512),w
  8067  1C82  1C03               	skipc
  8068  1C83  2C7A               	goto	l286
  8069  1C84                     l6034:	
  8070  1C84  3006               	movlw	6
  8071  1C85  07A5               	addwf	delayUS@i^(0+512),f
  8072  1C86  3000               	movlw	0
  8073  1C87  3DA6               	addwfc	(delayUS@i+1)^(0+512),f
  8074  1C88  3000               	movlw	0
  8075  1C89  3DA7               	addwfc	(delayUS@i+2)^(0+512),f
  8076  1C8A  3000               	movlw	0
  8077  1C8B  3DA8               	addwfc	(delayUS@i+3)^(0+512),f
  8078  1C8C  2C61               	goto	l284
  8079  1C8D                     __end_of_delayUS:	
  8080                           
  8081                           	psect	text20
  8082  1132                     __ptext20:	
  8083 ;; *************** function _UARTchar *****************
  8084 ;; Defined at:
  8085 ;;		line 231 in file "UART.c"
  8086 ;; Parameters:    Size  Location     Type
  8087 ;;  data            1    wreg     unsigned char 
  8088 ;;  override        1    8[BANK4 ] unsigned char 
  8089 ;;  NinethBit_ov    1    9[BANK4 ] unsigned char 
  8090 ;; Auto vars:     Size  Location     Type
  8091 ;;  data            1   14[BANK4 ] unsigned char 
  8092 ;; Return value:  Size  Location     Type
  8093 ;;		None               void
  8094 ;; Registers used:
  8095 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8096 ;; Tracked objects:
  8097 ;;		On entry : 0/0
  8098 ;;		On exit  : 0/0
  8099 ;;		Unchanged: 0/0
  8100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8101 ;;      Params:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  8102 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  8103 ;;      Temps:          0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8104 ;;      Totals:         0       0       0       0       0       7       0       0       0       0       0       0       
      +0       0
  8105 ;;Total ram usage:        7 bytes
  8106 ;; Hardware stack levels used:    1
  8107 ;; Hardware stack levels required when called:    8
  8108 ;; This function calls:
  8109 ;;		_CheckSum_byte
  8110 ;; This function is called by:
  8111 ;;		_UARTstringWAIT
  8112 ;;		_UARTstring
  8113 ;; This function uses a non-reentrant model
  8114 ;;
  8115                           
  8116                           
  8117                           ;psect for function _UARTchar
  8118  1132                     _UARTchar:	
  8119                           
  8120                           ;incstack = 0
  8121                           ; Regs used in _UARTchar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8122                           ;UARTchar@data stored from wreg
  8123  1132  0024               	movlb	4	; select bank4
  8124  1133  00AE               	movwf	UARTchar@data^(0+512)
  8125                           
  8126                           ;UART.c: 233: if(TXSTAbits.TX9)
  8127  1134  0023               	movlb	3	; select bank3
  8128  1135  1F1E               	btfss	30,6	;volatile
  8129  1136  297B               	goto	l6012
  8130                           
  8131                           ;UART.c: 234: {
  8132                           ;UART.c: 236: if(!override)
  8133  1137  0024               	movlb	4	; select bank4
  8134  1138  08A8               	movf	UARTchar@override^(0+512),f
  8135  1139  1903               	btfsc	3,2
  8136  113A  2963               	goto	l6008
  8137  113B  2970               	goto	l6010
  8138  113C                     l6002:	
  8139                           ;UART.c: 240: {
  8140                           ;UART.c: 241: case 1:
  8141                           
  8142                           ;UART.c: 237: {
  8143                           ;UART.c: 239: switch (PARITY)
  8144                           
  8145                           
  8146                           ;UART.c: 242: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 3);
  8147  113C  082E               	movf	UARTchar@data^(0+512),w
  8148  113D  00AA               	movwf	??_UARTchar^(0+512)
  8149  113E  01AB               	clrf	(??_UARTchar^(0+512)+1)
  8150  113F  082A               	movf	??_UARTchar^(0+512),w
  8151  1140  00A0               	movwf	CheckSum_byte@This^(0+512)
  8152  1141  082B               	movf	(??_UARTchar+1)^(0+512),w
  8153  1142  00A1               	movwf	(CheckSum_byte@This+1)^(0+512)
  8154  1143  3003               	movlw	3
  8155  1144  294E               	goto	L7
  8156  1145                     l6004:	
  8157                           ;UART.c: 244: case 2:
  8158                           
  8159                           ;UART.c: 243: break;
  8160                           
  8161                           
  8162                           ;UART.c: 245: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 2);
  8163  1145  0024               	movlb	4	; select bank4
  8164  1146  082E               	movf	UARTchar@data^(0+512),w
  8165  1147  00AA               	movwf	??_UARTchar^(0+512)
  8166  1148  01AB               	clrf	(??_UARTchar^(0+512)+1)
  8167  1149  082A               	movf	??_UARTchar^(0+512),w
  8168  114A  00A0               	movwf	CheckSum_byte@This^(0+512)
  8169  114B  082B               	movf	(??_UARTchar+1)^(0+512),w
  8170  114C  00A1               	movwf	(CheckSum_byte@This+1)^(0+512)
  8171  114D  3002               	movlw	2
  8172  114E                     L7:	
  8173  114E  00AC               	movwf	(??_UARTchar+2)^(0+512)
  8174  114F  082C               	movf	(??_UARTchar+2)^(0+512),w
  8175  1150  00A2               	movwf	CheckSum_byte@Odd_Even^(0+512)
  8176  1151  319B  238F  3191   	fcall	_CheckSum_byte
  8177  1154  0024               	movlb	4	; select bank4
  8178  1155  00AD               	movwf	(??_UARTchar+3)^(0+512)
  8179  1156  0023               	movlb	3	; select bank3
  8180  1157  081E               	movf	30,w	;volatile
  8181  1158  0024               	movlb	4	; select bank4
  8182  1159  062D               	xorwf	(??_UARTchar+3)^(0+512),w
  8183  115A  39FE               	andlw	-2
  8184  115B  062D               	xorwf	(??_UARTchar+3)^(0+512),w
  8185  115C  2979               	goto	L6
  8186  115D                     l434:	
  8187                           ;UART.c: 247: case 3:
  8188                           
  8189                           ;UART.c: 246: break;
  8190                           
  8191                           
  8192                           ;UART.c: 248: TXSTAbits.TX9D = 1;
  8193  115D  0023               	movlb	3	; select bank3
  8194  115E  141E               	bsf	30,0	;volatile
  8195                           
  8196                           ;UART.c: 249: break;
  8197  115F  297B               	goto	l6012
  8198  1160                     l435:	
  8199                           ;UART.c: 250: default:
  8200                           
  8201                           
  8202                           ;UART.c: 251: TXSTAbits.TX9D = 0;
  8203  1160  0023               	movlb	3	; select bank3
  8204  1161  101E               	bcf	30,0	;volatile
  8205                           
  8206                           ;UART.c: 253: }
  8207                           
  8208                           ;UART.c: 252: break;
  8209  1162  297B               	goto	l6012
  8210  1163                     l6008:	
  8211  1163  0024               	movlb	4	; select bank4
  8212  1164  0860               	movf	_PARITY^(0+512),w
  8213                           
  8214                           ; Switch size 1, requested type "space"
  8215                           ; Number of cases is 3, Range of values is 1 to 3
  8216                           ; switch strategies available:
  8217                           ; Name         Instructions Cycles
  8218                           ; simple_byte           10     6 (average)
  8219                           ; direct_byte           15     9 (fixed)
  8220                           ; jumptable            263     9 (fixed)
  8221                           ;	Chosen strategy is simple_byte
  8222  1165  3A01               	xorlw	1	; case 1
  8223  1166  1903               	skipnz
  8224  1167  293C               	goto	l6002
  8225  1168  3A03               	xorlw	3	; case 2
  8226  1169  1903               	skipnz
  8227  116A  2945               	goto	l6004
  8228  116B  3A01               	xorlw	1	; case 3
  8229  116C  1903               	skipnz
  8230  116D  295D               	goto	l434
  8231  116E  2960               	goto	l435
  8232                           
  8233                           ;UART.c: 254: }
  8234  116F  297B               	goto	l6012
  8235  1170                     l6010:	
  8236                           
  8237                           ;UART.c: 255: else
  8238                           ;UART.c: 256: {
  8239                           ;UART.c: 257: TXSTAbits.TX9D = (NinethBit_override_data & 0x01);
  8240  1170  3001               	movlw	1
  8241  1171  0529               	andwf	UARTchar@NinethBit_override_data^(0+512),w
  8242  1172  00AA               	movwf	??_UARTchar^(0+512)
  8243  1173  0023               	movlb	3	; select bank3
  8244  1174  081E               	movf	30,w	;volatile
  8245  1175  0024               	movlb	4	; select bank4
  8246  1176  062A               	xorwf	??_UARTchar^(0+512),w
  8247  1177  39FE               	andlw	-2
  8248  1178  062A               	xorwf	??_UARTchar^(0+512),w
  8249  1179                     L6:	
  8250  1179  0023               	movlb	3	; select bank3
  8251  117A  009E               	movwf	30	;volatile
  8252  117B                     l6012:	
  8253                           
  8254                           ;UART.c: 258: }
  8255                           ;UART.c: 259: }
  8256                           ;UART.c: 261: if(data == '\n')
  8257  117B  0024               	movlb	4	; select bank4
  8258  117C  082E               	movf	UARTchar@data^(0+512),w
  8259  117D  3A0A               	xorlw	10
  8260  117E  1D03               	skipz
  8261  117F  298C               	goto	l443
  8262                           
  8263                           ;UART.c: 262: {
  8264                           ;UART.c: 263: if(override)
  8265  1180  0828               	movf	UARTchar@override^(0+512),w
  8266  1181  1903               	btfsc	3,2
  8267  1182  0008               	return
  8268  1183                     l439:	
  8269                           ;UART.c: 264: {
  8270                           ;UART.c: 265: while(!TXSTAbits.TRMT);
  8271                           
  8272  1183  0023               	movlb	3	; select bank3
  8273  1184  1C9E               	btfss	30,1	;volatile
  8274  1185  2983               	goto	l439
  8275                           
  8276                           ;UART.c: 266: TXREG = data;
  8277  1186  0024               	movlb	4	; select bank4
  8278  1187  082E               	movf	UARTchar@data^(0+512),w
  8279  1188  0023               	movlb	3	; select bank3
  8280  1189  009A               	movwf	26	;volatile
  8281  118A  0024               	movlb	4	; select bank4
  8282  118B  0008               	return
  8283  118C                     l443:	
  8284                           ;UART.c: 269: else
  8285                           ;UART.c: 270: {
  8286                           ;UART.c: 271: while(!TXSTAbits.TRMT);
  8287                           
  8288                           ;UART.c: 267: }
  8289                           ;UART.c: 268: }
  8290                           
  8291  118C  0023               	movlb	3	; select bank3
  8292  118D  1C9E               	btfss	30,1	;volatile
  8293  118E  298C               	goto	l443
  8294                           
  8295                           ;UART.c: 272: TXREG = data;
  8296  118F  0024               	movlb	4	; select bank4
  8297  1190  082E               	movf	UARTchar@data^(0+512),w
  8298  1191  0023               	movlb	3	; select bank3
  8299  1192  009A               	movwf	26	;volatile
  8300  1193  0024               	movlb	4	; select bank4
  8301  1194  0008               	return
  8302  1195                     __end_of_UARTchar:	
  8303                           
  8304                           	psect	text21
  8305  1B8F                     __ptext21:	
  8306 ;; *************** function _CheckSum_byte *****************
  8307 ;; Defined at:
  8308 ;;		line 69 in file "MISC.c"
  8309 ;; Parameters:    Size  Location     Type
  8310 ;;  This            2    0[BANK4 ] unsigned int 
  8311 ;;  Odd_Even        1    2[BANK4 ] unsigned char 
  8312 ;; Auto vars:     Size  Location     Type
  8313 ;;  ThisTemp        2    4[BANK4 ] unsigned int 
  8314 ;;  i               1    7[BANK4 ] unsigned char 
  8315 ;;  Parity          1    6[BANK4 ] unsigned char 
  8316 ;; Return value:  Size  Location     Type
  8317 ;;                  1    wreg      unsigned char 
  8318 ;; Registers used:
  8319 ;;		wreg, status,2, status,0
  8320 ;; Tracked objects:
  8321 ;;		On entry : 0/0
  8322 ;;		On exit  : 0/0
  8323 ;;		Unchanged: 0/0
  8324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8325 ;;      Params:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  8326 ;;      Locals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8327 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  8328 ;;      Totals:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  8329 ;;Total ram usage:        8 bytes
  8330 ;; Hardware stack levels used:    1
  8331 ;; Hardware stack levels required when called:    7
  8332 ;; This function calls:
  8333 ;;		Nothing
  8334 ;; This function is called by:
  8335 ;;		_UARTchar
  8336 ;; This function uses a non-reentrant model
  8337 ;;
  8338                           
  8339                           
  8340                           ;psect for function _CheckSum_byte
  8341  1B8F                     _CheckSum_byte:	
  8342                           
  8343                           ;MISC.c: 71: char i = 0;
  8344                           
  8345                           ;incstack = 0
  8346                           ; Regs used in _CheckSum_byte: [wreg+status,2+status,0]
  8347  1B8F  0024               	movlb	4	; select bank4
  8348  1B90  01A7               	clrf	CheckSum_byte@i^(0+512)
  8349                           
  8350                           ;MISC.c: 72: unsigned char Parity = 0;
  8351  1B91  01A6               	clrf	CheckSum_byte@Parity^(0+512)
  8352                           
  8353                           ;MISC.c: 73: unsigned int ThisTemp = This;
  8354  1B92  0821               	movf	(CheckSum_byte@This+1)^(0+512),w
  8355  1B93  01A5               	clrf	(CheckSum_byte@ThisTemp+1)^(0+512)
  8356  1B94  07A5               	addwf	(CheckSum_byte@ThisTemp+1)^(0+512),f
  8357  1B95  0820               	movf	CheckSum_byte@This^(0+512),w
  8358  1B96  01A4               	clrf	CheckSum_byte@ThisTemp^(0+512)
  8359  1B97  07A4               	addwf	CheckSum_byte@ThisTemp^(0+512),f
  8360                           
  8361                           ;MISC.c: 75: for (i =0; i<8; i++)
  8362  1B98  01A7               	clrf	CheckSum_byte@i^(0+512)
  8363  1B99  3008               	movlw	8
  8364  1B9A  0227               	subwf	CheckSum_byte@i^(0+512),w
  8365  1B9B  1803               	btfsc	3,0
  8366  1B9C  2BB0               	goto	l5956
  8367  1B9D                     l292:	
  8368                           
  8369                           ;MISC.c: 76: {
  8370                           ;MISC.c: 77: if((ThisTemp & 0x01) == 1)
  8371  1B9D  1C24               	btfss	CheckSum_byte@ThisTemp^(0+512),0
  8372  1B9E  2BA3               	goto	l294
  8373                           
  8374                           ;MISC.c: 78: {
  8375                           ;MISC.c: 79: Parity++;
  8376  1B9F  3001               	movlw	1
  8377  1BA0  00A3               	movwf	??_CheckSum_byte^(0+512)
  8378  1BA1  0823               	movf	??_CheckSum_byte^(0+512),w
  8379  1BA2  07A6               	addwf	CheckSum_byte@Parity^(0+512),f
  8380  1BA3                     l294:	
  8381                           
  8382                           ;MISC.c: 80: }
  8383                           ;MISC.c: 81: ThisTemp >>= 1;
  8384  1BA3  3001               	movlw	1
  8385  1BA4                     u7545:	
  8386  1BA4  36A5               	lsrf	(CheckSum_byte@ThisTemp+1)^(0+512),f
  8387  1BA5  0CA4               	rrf	CheckSum_byte@ThisTemp^(0+512),f
  8388  1BA6  0B89               	decfsz	9,f
  8389  1BA7  2BA4               	goto	u7545
  8390  1BA8  3001               	movlw	1
  8391  1BA9  00A3               	movwf	??_CheckSum_byte^(0+512)
  8392  1BAA  0823               	movf	??_CheckSum_byte^(0+512),w
  8393  1BAB  07A7               	addwf	CheckSum_byte@i^(0+512),f
  8394  1BAC  3008               	movlw	8
  8395  1BAD  0227               	subwf	CheckSum_byte@i^(0+512),w
  8396  1BAE  1C03               	skipc
  8397  1BAF  2B9D               	goto	l292
  8398  1BB0                     l5956:	
  8399                           
  8400                           ;MISC.c: 82: }
  8401                           ;MISC.c: 83: if(Odd_Even == 3)
  8402  1BB0  0822               	movf	CheckSum_byte@Odd_Even^(0+512),w
  8403  1BB1  3A03               	xorlw	3
  8404  1BB2  1D03               	skipz
  8405  1BB3  2BBA               	goto	l295
  8406                           
  8407                           ;MISC.c: 84: {
  8408                           ;MISC.c: 85: if(Parity % 2 == 0)
  8409  1BB4  1826               	btfsc	CheckSum_byte@Parity^(0+512),0
  8410  1BB5  2BB8               	goto	l5964
  8411                           
  8412                           ;MISC.c: 86: {
  8413                           ;MISC.c: 87: return 1;
  8414  1BB6  3001               	movlw	1
  8415  1BB7  0008               	return
  8416  1BB8                     l5964:	
  8417                           
  8418                           ;MISC.c: 88: }
  8419                           ;MISC.c: 89: return 0;
  8420  1BB8  3000               	movlw	0
  8421                           
  8422                           ;MISC.c: 90: }
  8423  1BB9  0008               	return
  8424  1BBA                     l295:	
  8425                           
  8426                           ;MISC.c: 91: else
  8427                           ;MISC.c: 92: {
  8428                           ;MISC.c: 93: if(Parity % 2 == 1)
  8429  1BBA  1C26               	btfss	CheckSum_byte@Parity^(0+512),0
  8430  1BBB  2BBE               	goto	l5974
  8431                           
  8432                           ;MISC.c: 94: {
  8433                           ;MISC.c: 95: return 1;
  8434  1BBC  3001               	movlw	1
  8435  1BBD  0008               	return
  8436  1BBE                     l5974:	
  8437                           
  8438                           ;MISC.c: 96: }
  8439                           ;MISC.c: 97: return 0;
  8440  1BBE  3000               	movlw	0
  8441  1BBF  0008               	return
  8442  1BC0                     __end_of_CheckSum_byte:	
  8443                           
  8444                           	psect	text22
  8445  11F9                     __ptext22:	
  8446 ;; *************** function _ReadBaud *****************
  8447 ;; Defined at:
  8448 ;;		line 187 in file "FLASH.c"
  8449 ;; Parameters:    Size  Location     Type
  8450 ;;  row             2   18[BANK4 ] unsigned int 
  8451 ;;  column          1   20[BANK4 ] unsigned char 
  8452 ;; Auto vars:     Size  Location     Type
  8453 ;;  temp            4   30[BANK4 ] unsigned long 
  8454 ;; Return value:  Size  Location     Type
  8455 ;;                  4   18[BANK4 ] unsigned long 
  8456 ;; Registers used:
  8457 ;;		wreg, status,2, status,0, pclath, cstack
  8458 ;; Tracked objects:
  8459 ;;		On entry : 0/0
  8460 ;;		On exit  : 0/0
  8461 ;;		Unchanged: 0/0
  8462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8463 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8464 ;;      Locals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8465 ;;      Temps:          0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  8466 ;;      Totals:         0       0       0       0       0      16       0       0       0       0       0       0       
      +0       0
  8467 ;;Total ram usage:       16 bytes
  8468 ;; Hardware stack levels used:    1
  8469 ;; Hardware stack levels required when called:    9
  8470 ;; This function calls:
  8471 ;;		_ReadFlash_4Byte
  8472 ;; This function is called by:
  8473 ;;		_Init_System
  8474 ;; This function uses a non-reentrant model
  8475 ;;
  8476                           
  8477                           
  8478                           ;psect for function _ReadBaud
  8479  11F9                     _ReadBaud:	
  8480                           
  8481                           ;FLASH.c: 189: unsigned long temp;
  8482                           ;FLASH.c: 190: temp =(ReadFlash_4Byte(row, column));
  8483                           
  8484                           ;incstack = 0
  8485                           ; Regs used in _ReadBaud: [wreg+status,2+status,0+pclath+cstack]
  8486  11F9  0024               	movlb	4	; select bank4
  8487  11FA  0833               	movf	(ReadBaud@row+1)^(0+512),w
  8488  11FB  01A6               	clrf	(ReadFlash_4Byte@row+1)^(0+512)
  8489  11FC  07A6               	addwf	(ReadFlash_4Byte@row+1)^(0+512),f
  8490  11FD  0832               	movf	ReadBaud@row^(0+512),w
  8491  11FE  01A5               	clrf	ReadFlash_4Byte@row^(0+512)
  8492  11FF  07A5               	addwf	ReadFlash_4Byte@row^(0+512),f
  8493  1200  0834               	movf	ReadBaud@column^(0+512),w
  8494  1201  00B6               	movwf	??_ReadBaud^(0+512)
  8495  1202  0836               	movf	??_ReadBaud^(0+512),w
  8496  1203  00A7               	movwf	ReadFlash_4Byte@column^(0+512)
  8497  1204  319E  26B6  3191   	fcall	_ReadFlash_4Byte
  8498  1207  0024               	movlb	4	; select bank4
  8499  1208  0828               	movf	(?_ReadFlash_4Byte+3)^(0+512),w
  8500  1209  00C1               	movwf	(ReadBaud@temp+3)^(0+512)
  8501  120A  0827               	movf	(?_ReadFlash_4Byte+2)^(0+512),w
  8502  120B  00C0               	movwf	(ReadBaud@temp+2)^(0+512)
  8503  120C  0826               	movf	(?_ReadFlash_4Byte+1)^(0+512),w
  8504  120D  00BF               	movwf	(ReadBaud@temp+1)^(0+512)
  8505  120E  0825               	movf	?_ReadFlash_4Byte^(0+512),w
  8506  120F  00BE               	movwf	ReadBaud@temp^(0+512)
  8507                           
  8508                           ;FLASH.c: 191: MEM[1] = (unsigned int)(temp & 0x0003FFF);
  8509  1210  30FF               	movlw	255
  8510  1211  053E               	andwf	ReadBaud@temp^(0+512),w
  8511  1212  0021               	movlb	1	; select bank1
  8512  1213  00E4               	movwf	(_MEM^(0+128)+2)
  8513  1214  303F               	movlw	63
  8514  1215  0024               	movlb	4	; select bank4
  8515  1216  053F               	andwf	(ReadBaud@temp+1)^(0+512),w
  8516  1217  0021               	movlb	1	; select bank1
  8517  1218  00E5               	movwf	((_MEM+1)^(0+128)+2)
  8518                           
  8519                           ;FLASH.c: 192: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
  8520  1219  0024               	movlb	4	; select bank4
  8521  121A  083E               	movf	ReadBaud@temp^(0+512),w
  8522  121B  00B6               	movwf	??_ReadBaud^(0+512)
  8523  121C  083F               	movf	(ReadBaud@temp+1)^(0+512),w
  8524  121D  00B7               	movwf	(??_ReadBaud^(0+512)+1)
  8525  121E  0840               	movf	(ReadBaud@temp+2)^(0+512),w
  8526  121F  00B8               	movwf	(??_ReadBaud^(0+512)+2)
  8527  1220  0841               	movf	(ReadBaud@temp+3)^(0+512),w
  8528  1221  00B9               	movwf	(??_ReadBaud^(0+512)+3)
  8529  1222  300E               	movlw	14
  8530  1223                     u8005:	
  8531  1223  36B9               	lsrf	(??_ReadBaud^(0+512)+3),f
  8532  1224  0CB8               	rrf	(??_ReadBaud^(0+512)+2),f
  8533  1225  0CB7               	rrf	(??_ReadBaud^(0+512)+1),f
  8534  1226  0CB6               	rrf	??_ReadBaud^(0+512),f
  8535  1227  0B89               	decfsz	9,f
  8536  1228  2A23               	goto	u8005
  8537  1229  30FF               	movlw	255
  8538  122A  0536               	andwf	??_ReadBaud^(0+512),w
  8539  122B  0021               	movlb	1	; select bank1
  8540  122C  00E2               	movwf	_MEM^(0+128)
  8541  122D  303F               	movlw	63
  8542  122E  0024               	movlb	4	; select bank4
  8543  122F  0537               	andwf	(??_ReadBaud+1)^(0+512),w
  8544  1230  0021               	movlb	1	; select bank1
  8545  1231  00E3               	movwf	(_MEM+1)^(0+128)
  8546                           
  8547                           ;FLASH.c: 193: return (((unsigned long)MEM[0] << 12) + (unsigned long)MEM[1]);
  8548  1232  0864               	movf	(_MEM^(0+128)+2),w
  8549  1233  0024               	movlb	4	; select bank4
  8550  1234  00B6               	movwf	??_ReadBaud^(0+512)
  8551  1235  0021               	movlb	1	; select bank1
  8552  1236  0865               	movf	((_MEM+1)^(0+128)+2),w
  8553  1237  0024               	movlb	4	; select bank4
  8554  1238  00B7               	movwf	(??_ReadBaud^(0+512)+1)
  8555  1239  01B8               	clrf	(??_ReadBaud^(0+512)+2)
  8556  123A  01B9               	clrf	(??_ReadBaud^(0+512)+3)
  8557  123B  0021               	movlb	1	; select bank1
  8558  123C  0862               	movf	_MEM^(0+128),w
  8559  123D  0024               	movlb	4	; select bank4
  8560  123E  00BA               	movwf	(??_ReadBaud+4)^(0+512)
  8561  123F  0021               	movlb	1	; select bank1
  8562  1240  0863               	movf	(_MEM+1)^(0+128),w
  8563  1241  0024               	movlb	4	; select bank4
  8564  1242  00BB               	movwf	((??_ReadBaud+4)^(0+512)+1)
  8565  1243  01BC               	clrf	((??_ReadBaud+4)^(0+512)+2)
  8566  1244  01BD               	clrf	((??_ReadBaud+4)^(0+512)+3)
  8567  1245  300C               	movlw	12
  8568  1246                     u8015:	
  8569  1246  35BA               	lslf	(??_ReadBaud+4)^(0+512),f
  8570  1247  0DBB               	rlf	((??_ReadBaud+4)^(0+512)+1),f
  8571  1248  0DBC               	rlf	((??_ReadBaud+4)^(0+512)+2),f
  8572  1249  0DBD               	rlf	((??_ReadBaud+4)^(0+512)+3),f
  8573  124A  0B89               	decfsz	9,f
  8574  124B  2A46               	goto	u8015
  8575  124C  083A               	movf	(??_ReadBaud+4)^(0+512),w
  8576  124D  07B6               	addwf	??_ReadBaud^(0+512),f
  8577  124E  083B               	movf	(??_ReadBaud+5)^(0+512),w
  8578  124F  3DB7               	addwfc	(??_ReadBaud^(0+512)+1),f
  8579  1250  083C               	movf	(??_ReadBaud+6)^(0+512),w
  8580  1251  3DB8               	addwfc	(??_ReadBaud^(0+512)+2),f
  8581  1252  083D               	movf	(??_ReadBaud+7)^(0+512),w
  8582  1253  3DB9               	addwfc	(??_ReadBaud^(0+512)+3),f
  8583  1254  0839               	movf	(??_ReadBaud+3)^(0+512),w
  8584  1255  00B5               	movwf	(?_ReadBaud+3)^(0+512)
  8585  1256  0838               	movf	(??_ReadBaud+2)^(0+512),w
  8586  1257  00B4               	movwf	(?_ReadBaud+2)^(0+512)
  8587  1258  0837               	movf	(??_ReadBaud+1)^(0+512),w
  8588  1259  00B3               	movwf	(?_ReadBaud+1)^(0+512)
  8589  125A  0836               	movf	??_ReadBaud^(0+512),w
  8590  125B  00B2               	movwf	?_ReadBaud^(0+512)
  8591  125C  0008               	return
  8592  125D                     __end_of_ReadBaud:	
  8593                           
  8594                           	psect	text23
  8595  1EB6                     __ptext23:	
  8596 ;; *************** function _ReadFlash_4Byte *****************
  8597 ;; Defined at:
  8598 ;;		line 62 in file "FLASH.c"
  8599 ;; Parameters:    Size  Location     Type
  8600 ;;  row             2    5[BANK4 ] unsigned int 
  8601 ;;  column          1    7[BANK4 ] unsigned char 
  8602 ;; Auto vars:     Size  Location     Type
  8603 ;;  temp            4   14[BANK4 ] unsigned long 
  8604 ;; Return value:  Size  Location     Type
  8605 ;;                  4    5[BANK4 ] unsigned long 
  8606 ;; Registers used:
  8607 ;;		wreg, status,2, status,0, pclath, cstack
  8608 ;; Tracked objects:
  8609 ;;		On entry : 0/0
  8610 ;;		On exit  : 0/0
  8611 ;;		Unchanged: 0/0
  8612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8613 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8614 ;;      Locals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8615 ;;      Temps:          0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  8616 ;;      Totals:         0       0       0       0       0      13       0       0       0       0       0       0       
      +0       0
  8617 ;;Total ram usage:       13 bytes
  8618 ;; Hardware stack levels used:    1
  8619 ;; Hardware stack levels required when called:    8
  8620 ;; This function calls:
  8621 ;;		_ReadFlash_2Byte
  8622 ;; This function is called by:
  8623 ;;		_ReadBaud
  8624 ;; This function uses a non-reentrant model
  8625 ;;
  8626                           
  8627                           
  8628                           ;psect for function _ReadFlash_4Byte
  8629  1EB6                     _ReadFlash_4Byte:	
  8630                           
  8631                           ;FLASH.c: 64: unsigned long temp =0;
  8632                           
  8633                           ;incstack = 0
  8634                           ; Regs used in _ReadFlash_4Byte: [wreg+status,2+status,0+pclath+cstack]
  8635  1EB6  3000               	movlw	0
  8636  1EB7  0024               	movlb	4	; select bank4
  8637  1EB8  00B1               	movwf	(ReadFlash_4Byte@temp+3)^(0+512)
  8638  1EB9  3000               	movlw	0
  8639  1EBA  00B0               	movwf	(ReadFlash_4Byte@temp+2)^(0+512)
  8640  1EBB  3000               	movlw	0
  8641  1EBC  00AF               	movwf	(ReadFlash_4Byte@temp+1)^(0+512)
  8642  1EBD  3000               	movlw	0
  8643  1EBE  00AE               	movwf	ReadFlash_4Byte@temp^(0+512)
  8644                           
  8645                           ;FLASH.c: 65: temp = ((unsigned long)ReadFlash_2Byte(row, column) << 16);
  8646  1EBF  0826               	movf	(ReadFlash_4Byte@row+1)^(0+512),w
  8647  1EC0  01A1               	clrf	(ReadFlash_2Byte@row+1)^(0+512)
  8648  1EC1  07A1               	addwf	(ReadFlash_2Byte@row+1)^(0+512),f
  8649  1EC2  0825               	movf	ReadFlash_4Byte@row^(0+512),w
  8650  1EC3  01A0               	clrf	ReadFlash_2Byte@row^(0+512)
  8651  1EC4  07A0               	addwf	ReadFlash_2Byte@row^(0+512),f
  8652  1EC5  0827               	movf	ReadFlash_4Byte@column^(0+512),w
  8653  1EC6  00A9               	movwf	??_ReadFlash_4Byte^(0+512)
  8654  1EC7  0829               	movf	??_ReadFlash_4Byte^(0+512),w
  8655  1EC8  00A2               	movwf	ReadFlash_2Byte@column^(0+512)
  8656  1EC9  318A  2266  319E   	fcall	_ReadFlash_2Byte
  8657  1ECC  0024               	movlb	4	; select bank4
  8658  1ECD  0820               	movf	?_ReadFlash_2Byte^(0+512),w
  8659  1ECE  00AA               	movwf	(??_ReadFlash_4Byte+1)^(0+512)
  8660  1ECF  0821               	movf	(?_ReadFlash_2Byte+1)^(0+512),w
  8661  1ED0  00AB               	movwf	((??_ReadFlash_4Byte+1)^(0+512)+1)
  8662  1ED1  01AC               	clrf	((??_ReadFlash_4Byte+1)^(0+512)+2)
  8663  1ED2  01AD               	clrf	((??_ReadFlash_4Byte+1)^(0+512)+3)
  8664  1ED3  3010               	movlw	16
  8665  1ED4                     u7785:	
  8666  1ED4  35AA               	lslf	(??_ReadFlash_4Byte+1)^(0+512),f
  8667  1ED5  0DAB               	rlf	((??_ReadFlash_4Byte+1)^(0+512)+1),f
  8668  1ED6  0DAC               	rlf	((??_ReadFlash_4Byte+1)^(0+512)+2),f
  8669  1ED7  0DAD               	rlf	((??_ReadFlash_4Byte+1)^(0+512)+3),f
  8670  1ED8  0B89               	decfsz	9,f
  8671  1ED9  2ED4               	goto	u7785
  8672  1EDA  082D               	movf	(??_ReadFlash_4Byte+4)^(0+512),w
  8673  1EDB  00B1               	movwf	(ReadFlash_4Byte@temp+3)^(0+512)
  8674  1EDC  082C               	movf	(??_ReadFlash_4Byte+3)^(0+512),w
  8675  1EDD  00B0               	movwf	(ReadFlash_4Byte@temp+2)^(0+512)
  8676  1EDE  082B               	movf	(??_ReadFlash_4Byte+2)^(0+512),w
  8677  1EDF  00AF               	movwf	(ReadFlash_4Byte@temp+1)^(0+512)
  8678  1EE0  082A               	movf	(??_ReadFlash_4Byte+1)^(0+512),w
  8679  1EE1  00AE               	movwf	ReadFlash_4Byte@temp^(0+512)
  8680                           
  8681                           ;FLASH.c: 66: temp |= ((unsigned long)ReadFlash_2Byte(row, (column + 1)));
  8682  1EE2  0826               	movf	(ReadFlash_4Byte@row+1)^(0+512),w
  8683  1EE3  01A1               	clrf	(ReadFlash_2Byte@row+1)^(0+512)
  8684  1EE4  07A1               	addwf	(ReadFlash_2Byte@row+1)^(0+512),f
  8685  1EE5  0825               	movf	ReadFlash_4Byte@row^(0+512),w
  8686  1EE6  01A0               	clrf	ReadFlash_2Byte@row^(0+512)
  8687  1EE7  07A0               	addwf	ReadFlash_2Byte@row^(0+512),f
  8688  1EE8  0827               	movf	ReadFlash_4Byte@column^(0+512),w
  8689  1EE9  3E01               	addlw	1
  8690  1EEA  00A9               	movwf	??_ReadFlash_4Byte^(0+512)
  8691  1EEB  0829               	movf	??_ReadFlash_4Byte^(0+512),w
  8692  1EEC  00A2               	movwf	ReadFlash_2Byte@column^(0+512)
  8693  1EED  318A  2266         	fcall	_ReadFlash_2Byte
  8694  1EEF  0024               	movlb	4	; select bank4
  8695  1EF0  0820               	movf	?_ReadFlash_2Byte^(0+512),w
  8696  1EF1  00AA               	movwf	(??_ReadFlash_4Byte+1)^(0+512)
  8697  1EF2  0821               	movf	(?_ReadFlash_2Byte+1)^(0+512),w
  8698  1EF3  00AB               	movwf	((??_ReadFlash_4Byte+1)^(0+512)+1)
  8699  1EF4  01AC               	clrf	((??_ReadFlash_4Byte+1)^(0+512)+2)
  8700  1EF5  01AD               	clrf	((??_ReadFlash_4Byte+1)^(0+512)+3)
  8701  1EF6  082A               	movf	(??_ReadFlash_4Byte+1)^(0+512),w
  8702  1EF7  04AE               	iorwf	ReadFlash_4Byte@temp^(0+512),f
  8703  1EF8  082B               	movf	(??_ReadFlash_4Byte+2)^(0+512),w
  8704  1EF9  04AF               	iorwf	(ReadFlash_4Byte@temp+1)^(0+512),f
  8705  1EFA  082C               	movf	(??_ReadFlash_4Byte+3)^(0+512),w
  8706  1EFB  04B0               	iorwf	(ReadFlash_4Byte@temp+2)^(0+512),f
  8707  1EFC  082D               	movf	(??_ReadFlash_4Byte+4)^(0+512),w
  8708  1EFD  04B1               	iorwf	(ReadFlash_4Byte@temp+3)^(0+512),f
  8709                           
  8710                           ;FLASH.c: 67: return temp;
  8711  1EFE  0831               	movf	(ReadFlash_4Byte@temp+3)^(0+512),w
  8712  1EFF  00A8               	movwf	(?_ReadFlash_4Byte+3)^(0+512)
  8713  1F00  0830               	movf	(ReadFlash_4Byte@temp+2)^(0+512),w
  8714  1F01  00A7               	movwf	(?_ReadFlash_4Byte+2)^(0+512)
  8715  1F02  082F               	movf	(ReadFlash_4Byte@temp+1)^(0+512),w
  8716  1F03  00A6               	movwf	(?_ReadFlash_4Byte+1)^(0+512)
  8717  1F04  082E               	movf	ReadFlash_4Byte@temp^(0+512),w
  8718  1F05  00A5               	movwf	?_ReadFlash_4Byte^(0+512)
  8719  1F06  0008               	return
  8720  1F07                     __end_of_ReadFlash_4Byte:	
  8721                           
  8722                           	psect	text24
  8723  0A66                     __ptext24:	
  8724 ;; *************** function _ReadFlash_2Byte *****************
  8725 ;; Defined at:
  8726 ;;		line 43 in file "FLASH.c"
  8727 ;; Parameters:    Size  Location     Type
  8728 ;;  row             2    0[BANK4 ] unsigned int 
  8729 ;;  column          1    2[BANK4 ] unsigned char 
  8730 ;; Auto vars:     Size  Location     Type
  8731 ;;		None
  8732 ;; Return value:  Size  Location     Type
  8733 ;;                  2    0[BANK4 ] unsigned int 
  8734 ;; Registers used:
  8735 ;;		wreg, status,2, status,0
  8736 ;; Tracked objects:
  8737 ;;		On entry : 0/0
  8738 ;;		On exit  : 0/0
  8739 ;;		Unchanged: 0/0
  8740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8741 ;;      Params:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  8742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8743 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  8744 ;;      Totals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  8745 ;;Total ram usage:        5 bytes
  8746 ;; Hardware stack levels used:    1
  8747 ;; Hardware stack levels required when called:    7
  8748 ;; This function calls:
  8749 ;;		Nothing
  8750 ;; This function is called by:
  8751 ;;		_ReadFlash_4Byte
  8752 ;; This function uses a non-reentrant model
  8753 ;;
  8754                           
  8755                           
  8756                           ;psect for function _ReadFlash_2Byte
  8757  0A66                     _ReadFlash_2Byte:	
  8758                           
  8759                           ;FLASH.c: 45: PMCON1 &= ~0b01000000;
  8760                           
  8761                           ;incstack = 0
  8762                           ; Regs used in _ReadFlash_2Byte: [wreg+status,2+status,0]
  8763  0A66  30BF               	movlw	191
  8764  0A67  0024               	movlb	4	; select bank4
  8765  0A68  00A3               	movwf	??_ReadFlash_2Byte^(0+512)
  8766  0A69  0823               	movf	??_ReadFlash_2Byte^(0+512),w
  8767  0A6A  0023               	movlb	3	; select bank3
  8768  0A6B  0595               	andwf	21,f	;volatile
  8769                           
  8770                           ;FLASH.c: 46: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
  8771  0A6C  0024               	movlb	4	; select bank4
  8772  0A6D  0821               	movf	(ReadFlash_2Byte@row+1)^(0+512),w
  8773  0A6E  00A4               	movwf	(??_ReadFlash_2Byte^(0+512)+1)
  8774  0A6F  0820               	movf	ReadFlash_2Byte@row^(0+512),w
  8775  0A70  00A3               	movwf	??_ReadFlash_2Byte^(0+512)
  8776  0A71  36A4               	lsrf	(??_ReadFlash_2Byte^(0+512)+1),f
  8777  0A72  0CA3               	rrf	??_ReadFlash_2Byte^(0+512),f
  8778  0A73  36A4               	lsrf	(??_ReadFlash_2Byte^(0+512)+1),f
  8779  0A74  0CA3               	rrf	??_ReadFlash_2Byte^(0+512),f
  8780  0A75  36A4               	lsrf	(??_ReadFlash_2Byte^(0+512)+1),f
  8781  0A76  0CA3               	rrf	??_ReadFlash_2Byte^(0+512),f
  8782  0A77  0823               	movf	??_ReadFlash_2Byte^(0+512),w
  8783  0A78  397F               	andlw	127
  8784  0A79  0023               	movlb	3	; select bank3
  8785  0A7A  0092               	movwf	18	;volatile
  8786                           
  8787                           ;FLASH.c: 47: PMADRL = (unsigned char)(((row & 0x007) << 5) + column);
  8788  0A7B  0024               	movlb	4	; select bank4
  8789  0A7C  0820               	movf	ReadFlash_2Byte@row^(0+512),w
  8790  0A7D  3907               	andlw	7
  8791  0A7E  00A3               	movwf	??_ReadFlash_2Byte^(0+512)
  8792  0A7F  3004               	movlw	4
  8793  0A80                     u7595:	
  8794  0A80  35A3               	lslf	??_ReadFlash_2Byte^(0+512),f
  8795  0A81  3EFF               	addlw	-1
  8796  0A82  1D03               	skipz
  8797  0A83  2A80               	goto	u7595
  8798  0A84  3523               	lslf	??_ReadFlash_2Byte^(0+512),w
  8799  0A85  0722               	addwf	ReadFlash_2Byte@column^(0+512),w
  8800  0A86  0023               	movlb	3	; select bank3
  8801  0A87  0091               	movwf	17	;volatile
  8802                           
  8803                           ;FLASH.c: 48: PMCON1 |= 0b00000001;
  8804  0A88  1415               	bsf	21,0	;volatile
  8805  0A89                     l945:	
  8806                           ;FLASH.c: 49: while(PMCON1 & 0b00000001);
  8807                           
  8808  0A89  1815               	btfsc	21,0	;volatile
  8809  0A8A  2A89               	goto	l945
  8810                           
  8811                           ;FLASH.c: 50: __nop();
  8812  0A8B  0000               	nop
  8813                           
  8814                           ;FLASH.c: 51: __nop();
  8815  0A8C  0000               	nop
  8816                           
  8817                           ;FLASH.c: 52: return (PMDATL | (PMDATH << 8));
  8818  0A8D  0023               	movlb	3	; select bank3
  8819  0A8E  0814               	movf	20,w	;volatile
  8820  0A8F  0024               	movlb	4	; select bank4
  8821  0A90  01A1               	clrf	(?_ReadFlash_2Byte+1)^(0+512)
  8822  0A91  07A1               	addwf	(?_ReadFlash_2Byte+1)^(0+512),f
  8823  0A92  0023               	movlb	3	; select bank3
  8824  0A93  0813               	movf	19,w	;volatile
  8825  0A94  0024               	movlb	4	; select bank4
  8826  0A95  01A0               	clrf	?_ReadFlash_2Byte^(0+512)
  8827  0A96  07A0               	addwf	?_ReadFlash_2Byte^(0+512),f
  8828  0A97  0008               	return
  8829  0A98                     __end_of_ReadFlash_2Byte:	
  8830                           
  8831                           	psect	text25
  8832  1440                     __ptext25:	
  8833 ;; *************** function _InitUART *****************
  8834 ;; Defined at:
  8835 ;;		line 75 in file "UART.c"
  8836 ;; Parameters:    Size  Location     Type
  8837 ;;  Baud            4   14[BANK4 ] unsigned long 
  8838 ;;  parity          1   18[BANK4 ] unsigned char 
  8839 ;; Auto vars:     Size  Location     Type
  8840 ;;  temp            4   31[BANK4 ] unsigned long 
  8841 ;;  spbrg           2   27[BANK4 ] unsigned int 
  8842 ;;  config          1   30[BANK4 ] unsigned char 
  8843 ;;  baudconfig      1   29[BANK4 ] unsigned char 
  8844 ;; Return value:  Size  Location     Type
  8845 ;;		None               void
  8846 ;; Registers used:
  8847 ;;		wreg, status,2, status,0, pclath, cstack
  8848 ;; Tracked objects:
  8849 ;;		On entry : 0/0
  8850 ;;		On exit  : 0/0
  8851 ;;		Unchanged: 0/0
  8852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8853 ;;      Params:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  8854 ;;      Locals:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  8855 ;;      Temps:          0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  8856 ;;      Totals:         0       0       0       0       0      21       0       0       0       0       0       0       
      +0       0
  8857 ;;Total ram usage:       21 bytes
  8858 ;; Hardware stack levels used:    1
  8859 ;; Hardware stack levels required when called:    8
  8860 ;; This function calls:
  8861 ;;		_CloseUSART
  8862 ;;		_OpenUSART
  8863 ;;		_ReadUSART
  8864 ;;		___lldiv
  8865 ;;		_baudUSART
  8866 ;; This function is called by:
  8867 ;;		_Init_System
  8868 ;; This function uses a non-reentrant model
  8869 ;;
  8870                           
  8871                           
  8872                           ;psect for function _InitUART
  8873  1440                     _InitUART:	
  8874                           
  8875                           ;UART.c: 77: unsigned long temp;
  8876                           ;UART.c: 78: unsigned char config;
  8877                           ;UART.c: 79: unsigned int spbrg;
  8878                           ;UART.c: 80: unsigned char baudconfig;
  8879                           ;UART.c: 90: LATC |= 0b00000100;
  8880                           
  8881                           ;incstack = 0
  8882                           ; Regs used in _InitUART: [wreg+status,2+status,0+pclath+cstack]
  8883  1440  0022               	movlb	2	; select bank2
  8884  1441  150E               	bsf	14,2	;volatile
  8885                           
  8886                           ;UART.c: 91: PPSLOCK =0;
  8887  1442  003C               	movlb	28	; select bank28
  8888  1443  018F               	clrf	15	;volatile
  8889                           
  8890                           ;UART.c: 92: RC2PPS = 0b00000000;
  8891  1444  003D               	movlb	29	; select bank29
  8892  1445  01A2               	clrf	34	;volatile
  8893                           
  8894                           ;UART.c: 93: PPSLOCK =1;
  8895  1446  3001               	movlw	1
  8896  1447  003C               	movlb	28	; select bank28
  8897  1448  008F               	movwf	15	;volatile
  8898                           
  8899                           ;UART.c: 95: CloseUSART();
  8900  1449  3199  2195  3194   	fcall	_CloseUSART
  8901                           
  8902                           ;UART.c: 96: config =0;
  8903  144C  0024               	movlb	4	; select bank4
  8904  144D  01BE               	clrf	InitUART@config^(0+512)
  8905                           
  8906                           ;UART.c: 97: baudconfig =0;
  8907  144E  01BD               	clrf	InitUART@baudconfig^(0+512)
  8908                           
  8909                           ;UART.c: 102: config |= 0b00001000;
  8910  144F  15BE               	bsf	InitUART@config^(0+512),3
  8911                           
  8912                           ;UART.c: 103: config |= 0b00010000;
  8913  1450  163E               	bsf	InitUART@config^(0+512),4
  8914                           
  8915                           ;UART.c: 104: PARITY = parity;
  8916  1451  0832               	movf	InitUART@parity^(0+512),w
  8917  1452  00B3               	movwf	??_InitUART^(0+512)
  8918  1453  0833               	movf	??_InitUART^(0+512),w
  8919  1454  00E0               	movwf	_PARITY^(0+512)
  8920                           
  8921                           ;UART.c: 105: BAUD = Baud;
  8922  1455  0831               	movf	(InitUART@Baud+3)^(0+512),w
  8923  1456  00E4               	movwf	(_BAUD+3)^(0+512)
  8924  1457  0830               	movf	(InitUART@Baud+2)^(0+512),w
  8925  1458  00E3               	movwf	(_BAUD+2)^(0+512)
  8926  1459  082F               	movf	(InitUART@Baud+1)^(0+512),w
  8927  145A  00E2               	movwf	(_BAUD+1)^(0+512)
  8928  145B  082E               	movf	InitUART@Baud^(0+512),w
  8929  145C  00E1               	movwf	_BAUD^(0+512)
  8930                           
  8931                           ;UART.c: 106: if(parity)
  8932  145D  0832               	movf	InitUART@parity^(0+512),w
  8933  145E  1903               	btfsc	3,2
  8934  145F  2C62               	goto	l6188
  8935                           
  8936                           ;UART.c: 107: {
  8937                           ;UART.c: 108: config |= 0b00000010;
  8938  1460  14BE               	bsf	InitUART@config^(0+512),1
  8939                           
  8940                           ;UART.c: 109: }
  8941  1461  2C66               	goto	l6190
  8942  1462                     l6188:	
  8943                           
  8944                           ;UART.c: 110: else
  8945                           ;UART.c: 111: {
  8946                           ;UART.c: 112: config &= ~0b00000010;
  8947  1462  30FD               	movlw	253
  8948  1463  00B3               	movwf	??_InitUART^(0+512)
  8949  1464  0833               	movf	??_InitUART^(0+512),w
  8950  1465  05BE               	andwf	InitUART@config^(0+512),f
  8951  1466                     l6190:	
  8952                           
  8953                           ;UART.c: 113: }
  8954                           ;UART.c: 114: baudconfig |= 0b00001000;
  8955  1466  15BD               	bsf	InitUART@baudconfig^(0+512),3
  8956                           
  8957                           ;UART.c: 117: temp = (32000000L / Baud) - 1;
  8958  1467  0831               	movf	(InitUART@Baud+3)^(0+512),w
  8959  1468  00A3               	movwf	(___lldiv@divisor+3)^(0+512)
  8960  1469  0830               	movf	(InitUART@Baud+2)^(0+512),w
  8961  146A  00A2               	movwf	(___lldiv@divisor+2)^(0+512)
  8962  146B  082F               	movf	(InitUART@Baud+1)^(0+512),w
  8963  146C  00A1               	movwf	(___lldiv@divisor+1)^(0+512)
  8964  146D  082E               	movf	InitUART@Baud^(0+512),w
  8965  146E  00A0               	movwf	___lldiv@divisor^(0+512)
  8966  146F  3001               	movlw	1
  8967  1470  00A7               	movwf	(___lldiv@dividend+3)^(0+512)
  8968  1471  30E8               	movlw	232
  8969  1472  00A6               	movwf	(___lldiv@dividend+2)^(0+512)
  8970  1473  3048               	movlw	72
  8971  1474  00A5               	movwf	(___lldiv@dividend+1)^(0+512)
  8972  1475  3000               	movlw	0
  8973  1476  00A4               	movwf	___lldiv@dividend^(0+512)
  8974  1477  319F  2759  3194   	fcall	___lldiv
  8975  147A  30FF               	movlw	255
  8976  147B  0024               	movlb	4	; select bank4
  8977  147C  0720               	addwf	?___lldiv^(0+512),w
  8978  147D  00BF               	movwf	InitUART@temp^(0+512)
  8979  147E  30FF               	movlw	255
  8980  147F  3D21               	addwfc	(?___lldiv+1)^(0+512),w
  8981  1480  00C0               	movwf	(InitUART@temp+1)^(0+512)
  8982  1481  30FF               	movlw	255
  8983  1482  3D22               	addwfc	(?___lldiv+2)^(0+512),w
  8984  1483  00C1               	movwf	(InitUART@temp+2)^(0+512)
  8985  1484  30FF               	movlw	255
  8986  1485  3D23               	addwfc	(?___lldiv+3)^(0+512),w
  8987  1486  00C2               	movwf	(InitUART@temp+3)^(0+512)
  8988                           
  8989                           ;UART.c: 118: temp = (temp >> 2) - 1;
  8990  1487  30FF               	movlw	255
  8991  1488  00B3               	movwf	??_InitUART^(0+512)
  8992  1489  30FF               	movlw	255
  8993  148A  00B4               	movwf	(??_InitUART^(0+512)+1)
  8994  148B  30FF               	movlw	255
  8995  148C  00B5               	movwf	(??_InitUART^(0+512)+2)
  8996  148D  30FF               	movlw	255
  8997  148E  00B6               	movwf	(??_InitUART^(0+512)+3)
  8998  148F  083F               	movf	InitUART@temp^(0+512),w
  8999  1490  00B7               	movwf	(??_InitUART+4)^(0+512)
  9000  1491  0840               	movf	(InitUART@temp+1)^(0+512),w
  9001  1492  00B8               	movwf	((??_InitUART+4)^(0+512)+1)
  9002  1493  0841               	movf	(InitUART@temp+2)^(0+512),w
  9003  1494  00B9               	movwf	((??_InitUART+4)^(0+512)+2)
  9004  1495  0842               	movf	(InitUART@temp+3)^(0+512),w
  9005  1496  00BA               	movwf	((??_InitUART+4)^(0+512)+3)
  9006  1497  3002               	movlw	2
  9007  1498                     u8035:	
  9008  1498  36BA               	lsrf	((??_InitUART+4)^(0+512)+3),f
  9009  1499  0CB9               	rrf	((??_InitUART+4)^(0+512)+2),f
  9010  149A  0CB8               	rrf	((??_InitUART+4)^(0+512)+1),f
  9011  149B  0CB7               	rrf	(??_InitUART+4)^(0+512),f
  9012  149C  0B89               	decfsz	9,f
  9013  149D  2C98               	goto	u8035
  9014  149E  0837               	movf	(??_InitUART+4)^(0+512),w
  9015  149F  07B3               	addwf	??_InitUART^(0+512),f
  9016  14A0  0838               	movf	(??_InitUART+5)^(0+512),w
  9017  14A1  3DB4               	addwfc	(??_InitUART^(0+512)+1),f
  9018  14A2  0839               	movf	(??_InitUART+6)^(0+512),w
  9019  14A3  3DB5               	addwfc	(??_InitUART^(0+512)+2),f
  9020  14A4  083A               	movf	(??_InitUART+7)^(0+512),w
  9021  14A5  3DB6               	addwfc	(??_InitUART^(0+512)+3),f
  9022  14A6  0836               	movf	(??_InitUART+3)^(0+512),w
  9023  14A7  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9024  14A8  0835               	movf	(??_InitUART+2)^(0+512),w
  9025  14A9  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9026  14AA  0834               	movf	(??_InitUART+1)^(0+512),w
  9027  14AB  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9028  14AC  0833               	movf	??_InitUART^(0+512),w
  9029  14AD  00BF               	movwf	InitUART@temp^(0+512)
  9030                           
  9031                           ;UART.c: 119: spbrg = (unsigned int)temp;
  9032  14AE  0840               	movf	(InitUART@temp+1)^(0+512),w
  9033  14AF  01BC               	clrf	(InitUART@spbrg+1)^(0+512)
  9034  14B0  07BC               	addwf	(InitUART@spbrg+1)^(0+512),f
  9035  14B1  083F               	movf	InitUART@temp^(0+512),w
  9036  14B2  01BB               	clrf	InitUART@spbrg^(0+512)
  9037  14B3  07BB               	addwf	InitUART@spbrg^(0+512),f
  9038                           
  9039                           ;UART.c: 121: RCSTAbits.CREN = 0;
  9040  14B4  0023               	movlb	3	; select bank3
  9041  14B5  121D               	bcf	29,4	;volatile
  9042                           
  9043                           ;UART.c: 122: OpenUSART(config, spbrg);
  9044  14B6  0024               	movlb	4	; select bank4
  9045  14B7  083C               	movf	(InitUART@spbrg+1)^(0+512),w
  9046  14B8  01A1               	clrf	(OpenUSART@spbrg+1)^(0+512)
  9047  14B9  07A1               	addwf	(OpenUSART@spbrg+1)^(0+512),f
  9048  14BA  083B               	movf	InitUART@spbrg^(0+512),w
  9049  14BB  01A0               	clrf	OpenUSART@spbrg^(0+512)
  9050  14BC  07A0               	addwf	OpenUSART@spbrg^(0+512),f
  9051  14BD  083E               	movf	InitUART@config^(0+512),w
  9052  14BE  319D  250A  3194   	fcall	_OpenUSART
  9053                           
  9054                           ;UART.c: 123: baudUSART(baudconfig);
  9055  14C1  0024               	movlb	4	; select bank4
  9056  14C2  083D               	movf	InitUART@baudconfig^(0+512),w
  9057  14C3  3199  2111  3194   	fcall	_baudUSART
  9058                           
  9059                           ;UART.c: 124: temp = ReadUSART();
  9060  14C6  3199  212E  3194   	fcall	_ReadUSART
  9061  14C9  0024               	movlb	4	; select bank4
  9062  14CA  00B3               	movwf	??_InitUART^(0+512)
  9063  14CB  01B4               	clrf	(??_InitUART^(0+512)+1)
  9064  14CC  01B5               	clrf	(??_InitUART^(0+512)+2)
  9065  14CD  01B6               	clrf	(??_InitUART^(0+512)+3)
  9066  14CE  0836               	movf	(??_InitUART+3)^(0+512),w
  9067  14CF  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9068  14D0  0835               	movf	(??_InitUART+2)^(0+512),w
  9069  14D1  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9070  14D2  0834               	movf	(??_InitUART+1)^(0+512),w
  9071  14D3  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9072  14D4  0833               	movf	??_InitUART^(0+512),w
  9073  14D5  00BF               	movwf	InitUART@temp^(0+512)
  9074                           
  9075                           ;UART.c: 125: temp = ReadUSART();
  9076  14D6  3199  212E  3194   	fcall	_ReadUSART
  9077  14D9  0024               	movlb	4	; select bank4
  9078  14DA  00B3               	movwf	??_InitUART^(0+512)
  9079  14DB  01B4               	clrf	(??_InitUART^(0+512)+1)
  9080  14DC  01B5               	clrf	(??_InitUART^(0+512)+2)
  9081  14DD  01B6               	clrf	(??_InitUART^(0+512)+3)
  9082  14DE  0836               	movf	(??_InitUART+3)^(0+512),w
  9083  14DF  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9084  14E0  0835               	movf	(??_InitUART+2)^(0+512),w
  9085  14E1  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9086  14E2  0834               	movf	(??_InitUART+1)^(0+512),w
  9087  14E3  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9088  14E4  0833               	movf	??_InitUART^(0+512),w
  9089  14E5  00BF               	movwf	InitUART@temp^(0+512)
  9090                           
  9091                           ;UART.c: 126: temp = ReadUSART();
  9092  14E6  3199  212E  3194   	fcall	_ReadUSART
  9093  14E9  0024               	movlb	4	; select bank4
  9094  14EA  00B3               	movwf	??_InitUART^(0+512)
  9095  14EB  01B4               	clrf	(??_InitUART^(0+512)+1)
  9096  14EC  01B5               	clrf	(??_InitUART^(0+512)+2)
  9097  14ED  01B6               	clrf	(??_InitUART^(0+512)+3)
  9098  14EE  0836               	movf	(??_InitUART+3)^(0+512),w
  9099  14EF  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9100  14F0  0835               	movf	(??_InitUART+2)^(0+512),w
  9101  14F1  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9102  14F2  0834               	movf	(??_InitUART+1)^(0+512),w
  9103  14F3  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9104  14F4  0833               	movf	??_InitUART^(0+512),w
  9105  14F5  00BF               	movwf	InitUART@temp^(0+512)
  9106                           
  9107                           ;UART.c: 127: temp = ReadUSART();
  9108  14F6  3199  212E  3194   	fcall	_ReadUSART
  9109  14F9  0024               	movlb	4	; select bank4
  9110  14FA  00B3               	movwf	??_InitUART^(0+512)
  9111  14FB  01B4               	clrf	(??_InitUART^(0+512)+1)
  9112  14FC  01B5               	clrf	(??_InitUART^(0+512)+2)
  9113  14FD  01B6               	clrf	(??_InitUART^(0+512)+3)
  9114  14FE  0836               	movf	(??_InitUART+3)^(0+512),w
  9115  14FF  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9116  1500  0835               	movf	(??_InitUART+2)^(0+512),w
  9117  1501  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9118  1502  0834               	movf	(??_InitUART+1)^(0+512),w
  9119  1503  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9120  1504  0833               	movf	??_InitUART^(0+512),w
  9121  1505  00BF               	movwf	InitUART@temp^(0+512)
  9122                           
  9123                           ;UART.c: 128: temp = ReadUSART();
  9124  1506  3199  212E         	fcall	_ReadUSART
  9125  1508  0024               	movlb	4	; select bank4
  9126  1509  00B3               	movwf	??_InitUART^(0+512)
  9127  150A  01B4               	clrf	(??_InitUART^(0+512)+1)
  9128  150B  01B5               	clrf	(??_InitUART^(0+512)+2)
  9129  150C  01B6               	clrf	(??_InitUART^(0+512)+3)
  9130  150D  0836               	movf	(??_InitUART+3)^(0+512),w
  9131  150E  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9132  150F  0835               	movf	(??_InitUART+2)^(0+512),w
  9133  1510  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9134  1511  0834               	movf	(??_InitUART+1)^(0+512),w
  9135  1512  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9136  1513  0833               	movf	??_InitUART^(0+512),w
  9137  1514  00BF               	movwf	InitUART@temp^(0+512)
  9138                           
  9139                           ;UART.c: 130: PPSLOCK =0;
  9140  1515  003C               	movlb	28	; select bank28
  9141  1516  018F               	clrf	15	;volatile
  9142                           
  9143                           ;UART.c: 131: RC2PPS = 0b00010100;
  9144  1517  3014               	movlw	20
  9145  1518  003D               	movlb	29	; select bank29
  9146  1519  00A2               	movwf	34	;volatile
  9147                           
  9148                           ;UART.c: 132: CKPPS = 0b00010010;
  9149  151A  3012               	movlw	18
  9150  151B  003C               	movlb	28	; select bank28
  9151  151C  00A5               	movwf	37	;volatile
  9152                           
  9153                           ;UART.c: 134: RXPPS = 0b00010101;
  9154  151D  3015               	movlw	21
  9155  151E  00A4               	movwf	36	;volatile
  9156                           
  9157                           ;UART.c: 136: PPSLOCK =1;
  9158  151F  3001               	movlw	1
  9159  1520  008F               	movwf	15	;volatile
  9160                           
  9161                           ;UART.c: 138: PIR1bits.RCIF = 0;
  9162  1521  0020               	movlb	0	; select bank0
  9163  1522  1291               	bcf	17,5	;volatile
  9164                           
  9165                           ;UART.c: 139: INTCONbits.PEIE = 1;
  9166  1523  170B               	bsf	11,6	;volatile
  9167  1524  0008               	return
  9168  1525                     __end_of_InitUART:	
  9169                           
  9170                           	psect	text26
  9171  1911                     __ptext26:	
  9172 ;; *************** function _baudUSART *****************
  9173 ;; Defined at:
  9174 ;;		line 147 in file "UART.c"
  9175 ;; Parameters:    Size  Location     Type
  9176 ;;  baudconfig      1    wreg     unsigned char 
  9177 ;; Auto vars:     Size  Location     Type
  9178 ;;  baudconfig      1    0[BANK4 ] unsigned char 
  9179 ;; Return value:  Size  Location     Type
  9180 ;;		None               void
  9181 ;; Registers used:
  9182 ;;		wreg, status,2
  9183 ;; Tracked objects:
  9184 ;;		On entry : 0/0
  9185 ;;		On exit  : 0/0
  9186 ;;		Unchanged: 0/0
  9187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9189 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9191 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9192 ;;Total ram usage:        1 bytes
  9193 ;; Hardware stack levels used:    1
  9194 ;; Hardware stack levels required when called:    7
  9195 ;; This function calls:
  9196 ;;		Nothing
  9197 ;; This function is called by:
  9198 ;;		_InitUART
  9199 ;; This function uses a non-reentrant model
  9200 ;;
  9201                           
  9202                           
  9203                           ;psect for function _baudUSART
  9204  1911                     _baudUSART:	
  9205                           
  9206                           ;incstack = 0
  9207                           ; Regs used in _baudUSART: [wreg+status,2]
  9208                           ;baudUSART@baudconfig stored from wreg
  9209  1911  0024               	movlb	4	; select bank4
  9210  1912  00A0               	movwf	baudUSART@baudconfig^(0+512)
  9211                           
  9212                           ;UART.c: 149: BAUD1CON =0;
  9213  1913  0023               	movlb	3	; select bank3
  9214  1914  019F               	clrf	31	;volatile
  9215                           
  9216                           ;UART.c: 150: BAUD1CON = baudconfig;
  9217  1915  0024               	movlb	4	; select bank4
  9218  1916  0820               	movf	baudUSART@baudconfig^(0+512),w
  9219  1917  0023               	movlb	3	; select bank3
  9220  1918  009F               	movwf	31	;volatile
  9221  1919  0008               	return
  9222  191A                     __end_of_baudUSART:	
  9223                           
  9224                           	psect	text27
  9225  1F59                     __ptext27:	
  9226 ;; *************** function ___lldiv *****************
  9227 ;; Defined at:
  9228 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
  9229 ;; Parameters:    Size  Location     Type
  9230 ;;  divisor         4    0[BANK4 ] unsigned long 
  9231 ;;  dividend        4    4[BANK4 ] unsigned long 
  9232 ;; Auto vars:     Size  Location     Type
  9233 ;;  quotient        4    9[BANK4 ] unsigned long 
  9234 ;;  counter         1   13[BANK4 ] unsigned char 
  9235 ;; Return value:  Size  Location     Type
  9236 ;;                  4    0[BANK4 ] unsigned long 
  9237 ;; Registers used:
  9238 ;;		wreg, status,2, status,0
  9239 ;; Tracked objects:
  9240 ;;		On entry : 0/0
  9241 ;;		On exit  : 0/0
  9242 ;;		Unchanged: 0/0
  9243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9244 ;;      Params:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  9245 ;;      Locals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  9246 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9247 ;;      Totals:         0       0       0       0       0      14       0       0       0       0       0       0       
      +0       0
  9248 ;;Total ram usage:       14 bytes
  9249 ;; Hardware stack levels used:    1
  9250 ;; Hardware stack levels required when called:    7
  9251 ;; This function calls:
  9252 ;;		Nothing
  9253 ;; This function is called by:
  9254 ;;		_InitUART
  9255 ;;		_sprintf
  9256 ;; This function uses a non-reentrant model
  9257 ;;
  9258                           
  9259                           
  9260                           ;psect for function ___lldiv
  9261  1F59                     ___lldiv:	
  9262                           
  9263                           ;incstack = 0
  9264                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  9265  1F59  3000               	movlw	0
  9266  1F5A  0024               	movlb	4	; select bank4
  9267  1F5B  00AC               	movwf	(___lldiv@quotient+3)^(0+512)
  9268  1F5C  3000               	movlw	0
  9269  1F5D  00AB               	movwf	(___lldiv@quotient+2)^(0+512)
  9270  1F5E  3000               	movlw	0
  9271  1F5F  00AA               	movwf	(___lldiv@quotient+1)^(0+512)
  9272  1F60  3000               	movlw	0
  9273  1F61  00A9               	movwf	___lldiv@quotient^(0+512)
  9274  1F62  0823               	movf	(___lldiv@divisor+3)^(0+512),w
  9275  1F63  0422               	iorwf	(___lldiv@divisor+2)^(0+512),w
  9276  1F64  0421               	iorwf	(___lldiv@divisor+1)^(0+512),w
  9277  1F65  0420               	iorwf	___lldiv@divisor^(0+512),w
  9278  1F66  1903               	skipnz
  9279  1F67  2FA3               	goto	l6142
  9280  1F68  01AD               	clrf	___lldiv@counter^(0+512)
  9281  1F69  0AAD               	incf	___lldiv@counter^(0+512),f
  9282  1F6A                     l6128:	
  9283  1F6A  1BA3               	btfsc	(___lldiv@divisor+3)^(0+512),7
  9284  1F6B  2F78               	goto	l6130
  9285  1F6C  3001               	movlw	1
  9286  1F6D                     u7915:	
  9287  1F6D  35A0               	lslf	___lldiv@divisor^(0+512),f
  9288  1F6E  0DA1               	rlf	(___lldiv@divisor+1)^(0+512),f
  9289  1F6F  0DA2               	rlf	(___lldiv@divisor+2)^(0+512),f
  9290  1F70  0DA3               	rlf	(___lldiv@divisor+3)^(0+512),f
  9291  1F71  0B89               	decfsz	9,f
  9292  1F72  2F6D               	goto	u7915
  9293  1F73  3001               	movlw	1
  9294  1F74  00A8               	movwf	??___lldiv^(0+512)
  9295  1F75  0828               	movf	??___lldiv^(0+512),w
  9296  1F76  07AD               	addwf	___lldiv@counter^(0+512),f
  9297  1F77  2F6A               	goto	l6128
  9298  1F78                     l6130:	
  9299  1F78  3001               	movlw	1
  9300  1F79                     u7935:	
  9301  1F79  35A9               	lslf	___lldiv@quotient^(0+512),f
  9302  1F7A  0DAA               	rlf	(___lldiv@quotient+1)^(0+512),f
  9303  1F7B  0DAB               	rlf	(___lldiv@quotient+2)^(0+512),f
  9304  1F7C  0DAC               	rlf	(___lldiv@quotient+3)^(0+512),f
  9305  1F7D  0B89               	decfsz	9,f
  9306  1F7E  2F79               	goto	u7935
  9307  1F7F  0823               	movf	(___lldiv@divisor+3)^(0+512),w
  9308  1F80  0227               	subwf	(___lldiv@dividend+3)^(0+512),w
  9309  1F81  1D03               	skipz
  9310  1F82  2F8D               	goto	u7945
  9311  1F83  0822               	movf	(___lldiv@divisor+2)^(0+512),w
  9312  1F84  0226               	subwf	(___lldiv@dividend+2)^(0+512),w
  9313  1F85  1D03               	skipz
  9314  1F86  2F8D               	goto	u7945
  9315  1F87  0821               	movf	(___lldiv@divisor+1)^(0+512),w
  9316  1F88  0225               	subwf	(___lldiv@dividend+1)^(0+512),w
  9317  1F89  1D03               	skipz
  9318  1F8A  2F8D               	goto	u7945
  9319  1F8B  0820               	movf	___lldiv@divisor^(0+512),w
  9320  1F8C  0224               	subwf	___lldiv@dividend^(0+512),w
  9321  1F8D                     u7945:	
  9322  1F8D  1C03               	skipc
  9323  1F8E  2F98               	goto	l6138
  9324  1F8F  0820               	movf	___lldiv@divisor^(0+512),w
  9325  1F90  02A4               	subwf	___lldiv@dividend^(0+512),f
  9326  1F91  0821               	movf	(___lldiv@divisor+1)^(0+512),w
  9327  1F92  3BA5               	subwfb	(___lldiv@dividend+1)^(0+512),f
  9328  1F93  0822               	movf	(___lldiv@divisor+2)^(0+512),w
  9329  1F94  3BA6               	subwfb	(___lldiv@dividend+2)^(0+512),f
  9330  1F95  0823               	movf	(___lldiv@divisor+3)^(0+512),w
  9331  1F96  3BA7               	subwfb	(___lldiv@dividend+3)^(0+512),f
  9332  1F97  1429               	bsf	___lldiv@quotient^(0+512),0
  9333  1F98                     l6138:	
  9334  1F98  3001               	movlw	1
  9335  1F99                     u7955:	
  9336  1F99  36A3               	lsrf	(___lldiv@divisor+3)^(0+512),f
  9337  1F9A  0CA2               	rrf	(___lldiv@divisor+2)^(0+512),f
  9338  1F9B  0CA1               	rrf	(___lldiv@divisor+1)^(0+512),f
  9339  1F9C  0CA0               	rrf	___lldiv@divisor^(0+512),f
  9340  1F9D  0B89               	decfsz	9,f
  9341  1F9E  2F99               	goto	u7955
  9342  1F9F  3001               	movlw	1
  9343  1FA0  02AD               	subwf	___lldiv@counter^(0+512),f
  9344  1FA1  1D03               	btfss	3,2
  9345  1FA2  2F78               	goto	l6130
  9346  1FA3                     l6142:	
  9347  1FA3  082C               	movf	(___lldiv@quotient+3)^(0+512),w
  9348  1FA4  00A3               	movwf	(?___lldiv+3)^(0+512)
  9349  1FA5  082B               	movf	(___lldiv@quotient+2)^(0+512),w
  9350  1FA6  00A2               	movwf	(?___lldiv+2)^(0+512)
  9351  1FA7  082A               	movf	(___lldiv@quotient+1)^(0+512),w
  9352  1FA8  00A1               	movwf	(?___lldiv+1)^(0+512)
  9353  1FA9  0829               	movf	___lldiv@quotient^(0+512),w
  9354  1FAA  00A0               	movwf	?___lldiv^(0+512)
  9355  1FAB  0008               	return
  9356  1FAC                     __end_of___lldiv:	
  9357                           
  9358                           	psect	text28
  9359  192E                     __ptext28:	
  9360 ;; *************** function _ReadUSART *****************
  9361 ;; Defined at:
  9362 ;;		line 302 in file "UART.c"
  9363 ;; Parameters:    Size  Location     Type
  9364 ;;		None
  9365 ;; Auto vars:     Size  Location     Type
  9366 ;;  data            1    1[BANK4 ] unsigned char 
  9367 ;; Return value:  Size  Location     Type
  9368 ;;                  1    wreg      unsigned char 
  9369 ;; Registers used:
  9370 ;;		wreg
  9371 ;; Tracked objects:
  9372 ;;		On entry : 0/0
  9373 ;;		On exit  : 0/0
  9374 ;;		Unchanged: 0/0
  9375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9377 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9378 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9379 ;;      Totals:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  9380 ;;Total ram usage:        2 bytes
  9381 ;; Hardware stack levels used:    1
  9382 ;; Hardware stack levels required when called:    7
  9383 ;; This function calls:
  9384 ;;		Nothing
  9385 ;; This function is called by:
  9386 ;;		_InitUART
  9387 ;; This function uses a non-reentrant model
  9388 ;;
  9389                           
  9390                           
  9391                           ;psect for function _ReadUSART
  9392  192E                     _ReadUSART:	
  9393                           
  9394                           ;UART.c: 304: char data;
  9395                           ;UART.c: 306: if(RCSTAbits.OERR)
  9396                           
  9397                           ;incstack = 0
  9398                           ; Regs used in _ReadUSART: [wreg]
  9399  192E  0023               	movlb	3	; select bank3
  9400  192F  189D               	btfsc	29,1	;volatile
  9401                           
  9402                           ;UART.c: 307: {
  9403                           ;UART.c: 308: RCSTAbits.CREN = 0;
  9404  1930  121D               	bcf	29,4	;volatile
  9405                           
  9406                           ;UART.c: 309: }
  9407                           ;UART.c: 311: data = RCREG;
  9408  1931  0819               	movf	25,w	;volatile
  9409  1932  0024               	movlb	4	; select bank4
  9410  1933  00A0               	movwf	??_ReadUSART^(0+512)
  9411  1934  0820               	movf	??_ReadUSART^(0+512),w
  9412  1935  00A1               	movwf	ReadUSART@data^(0+512)
  9413                           
  9414                           ;UART.c: 313: return (data);
  9415  1936  0821               	movf	ReadUSART@data^(0+512),w
  9416  1937  0008               	return
  9417  1938                     __end_of_ReadUSART:	
  9418                           
  9419                           	psect	text29
  9420  1D0A                     __ptext29:	
  9421 ;; *************** function _OpenUSART *****************
  9422 ;; Defined at:
  9423 ;;		line 158 in file "UART.c"
  9424 ;; Parameters:    Size  Location     Type
  9425 ;;  config          1    wreg     unsigned char 
  9426 ;;  spbrg           2    0[BANK4 ] unsigned int 
  9427 ;; Auto vars:     Size  Location     Type
  9428 ;;  config          1    2[BANK4 ] unsigned char 
  9429 ;; Return value:  Size  Location     Type
  9430 ;;		None               void
  9431 ;; Registers used:
  9432 ;;		wreg, status,2
  9433 ;; Tracked objects:
  9434 ;;		On entry : 0/0
  9435 ;;		On exit  : 0/0
  9436 ;;		Unchanged: 0/0
  9437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9438 ;;      Params:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  9439 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9441 ;;      Totals:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  9442 ;;Total ram usage:        3 bytes
  9443 ;; Hardware stack levels used:    1
  9444 ;; Hardware stack levels required when called:    7
  9445 ;; This function calls:
  9446 ;;		Nothing
  9447 ;; This function is called by:
  9448 ;;		_InitUART
  9449 ;; This function uses a non-reentrant model
  9450 ;;
  9451                           
  9452                           
  9453                           ;psect for function _OpenUSART
  9454  1D0A                     _OpenUSART:	
  9455                           
  9456                           ;incstack = 0
  9457                           ; Regs used in _OpenUSART: [wreg+status,2]
  9458                           ;OpenUSART@config stored from wreg
  9459  1D0A  0024               	movlb	4	; select bank4
  9460  1D0B  00A2               	movwf	OpenUSART@config^(0+512)
  9461                           
  9462                           ;UART.c: 160: TX1STA = 0;
  9463  1D0C  0023               	movlb	3	; select bank3
  9464  1D0D  019E               	clrf	30	;volatile
  9465                           
  9466                           ;UART.c: 161: RC1STA = 0;
  9467  1D0E  019D               	clrf	29	;volatile
  9468                           
  9469                           ;UART.c: 163: if(config&0x01)
  9470  1D0F  0024               	movlb	4	; select bank4
  9471  1D10  1C22               	btfss	OpenUSART@config^(0+512),0
  9472  1D11  2D14               	goto	l6046
  9473                           
  9474                           ;UART.c: 164: {
  9475                           ;UART.c: 165: TX1STAbits.SYNC = 1;
  9476  1D12  0023               	movlb	3	; select bank3
  9477  1D13  161E               	bsf	30,4	;volatile
  9478  1D14                     l6046:	
  9479                           
  9480                           ;UART.c: 166: }
  9481                           ;UART.c: 168: if(config&0x02)
  9482  1D14  0024               	movlb	4	; select bank4
  9483  1D15  1CA2               	btfss	OpenUSART@config^(0+512),1
  9484  1D16  2D1A               	goto	l6050
  9485                           
  9486                           ;UART.c: 169: {
  9487                           ;UART.c: 170: TX1STAbits.TX9 = 1;
  9488  1D17  0023               	movlb	3	; select bank3
  9489  1D18  171E               	bsf	30,6	;volatile
  9490                           
  9491                           ;UART.c: 171: RC1STAbits.RX9 = 1;
  9492  1D19  171D               	bsf	29,6	;volatile
  9493  1D1A                     l6050:	
  9494                           
  9495                           ;UART.c: 172: }
  9496                           ;UART.c: 174: if(config&0x04)
  9497  1D1A  0024               	movlb	4	; select bank4
  9498  1D1B  1D22               	btfss	OpenUSART@config^(0+512),2
  9499  1D1C  2D1F               	goto	l6054
  9500                           
  9501                           ;UART.c: 175: {
  9502                           ;UART.c: 176: TX1STAbits.CSRC = 1;
  9503  1D1D  0023               	movlb	3	; select bank3
  9504  1D1E  179E               	bsf	30,7	;volatile
  9505  1D1F                     l6054:	
  9506                           
  9507                           ;UART.c: 177: }
  9508                           ;UART.c: 179: if(config&0x08)
  9509  1D1F  0024               	movlb	4	; select bank4
  9510  1D20  1DA2               	btfss	OpenUSART@config^(0+512),3
  9511  1D21  2D25               	goto	l417
  9512                           
  9513                           ;UART.c: 180: {
  9514                           ;UART.c: 181: RC1STAbits.CREN = 1;
  9515  1D22  0023               	movlb	3	; select bank3
  9516  1D23  161D               	bsf	29,4	;volatile
  9517                           
  9518                           ;UART.c: 182: }
  9519  1D24  2D27               	goto	l6058
  9520  1D25                     l417:	
  9521                           
  9522                           ;UART.c: 183: else
  9523                           ;UART.c: 184: {
  9524                           ;UART.c: 185: RC1STAbits.SREN = 1;
  9525  1D25  0023               	movlb	3	; select bank3
  9526  1D26  169D               	bsf	29,5	;volatile
  9527  1D27                     l6058:	
  9528                           
  9529                           ;UART.c: 186: }
  9530                           ;UART.c: 188: if(config&0x10)
  9531  1D27  0024               	movlb	4	; select bank4
  9532  1D28  1E22               	btfss	OpenUSART@config^(0+512),4
  9533  1D29  2D2C               	goto	l6064
  9534                           
  9535                           ;UART.c: 189: {
  9536                           ;UART.c: 190: TX1STAbits.BRGH = 1;
  9537  1D2A  0023               	movlb	3	; select bank3
  9538  1D2B  151E               	bsf	30,2	;volatile
  9539  1D2C                     l6064:	
  9540                           ;UART.c: 194: {
  9541                           
  9542                           
  9543                           ;UART.c: 196: }
  9544                           ;UART.c: 198: if(config&0x40)
  9545  1D2C  0024               	movlb	4	; select bank4
  9546  1D2D  1F22               	btfss	OpenUSART@config^(0+512),6
  9547  1D2E  2D34               	goto	l421
  9548                           
  9549                           ;UART.c: 199: {
  9550                           ;UART.c: 200: PIR1bits.RCIF = 0;
  9551  1D2F  0020               	movlb	0	; select bank0
  9552  1D30  1291               	bcf	17,5	;volatile
  9553                           
  9554                           ;UART.c: 201: PIE1bits.RCIE = 1;
  9555  1D31  0021               	movlb	1	; select bank1
  9556  1D32  1691               	bsf	17,5	;volatile
  9557                           
  9558                           ;UART.c: 203: }
  9559  1D33  2D36               	goto	l6068
  9560  1D34                     l421:	
  9561                           
  9562                           ;UART.c: 204: else
  9563                           ;UART.c: 205: {
  9564                           ;UART.c: 206: PIE1bits.RCIE = 0;
  9565  1D34  0021               	movlb	1	; select bank1
  9566  1D35  1291               	bcf	17,5	;volatile
  9567  1D36                     l6068:	
  9568                           
  9569                           ;UART.c: 207: }
  9570                           ;UART.c: 209: if(config&0x80)
  9571  1D36  0024               	movlb	4	; select bank4
  9572  1D37  1FA2               	btfss	OpenUSART@config^(0+512),7
  9573  1D38  2D3E               	goto	l423
  9574                           
  9575                           ;UART.c: 210: {
  9576                           ;UART.c: 211: PIR1bits.TXIF = 0;
  9577  1D39  0020               	movlb	0	; select bank0
  9578  1D3A  1211               	bcf	17,4	;volatile
  9579                           
  9580                           ;UART.c: 212: PIE1bits.TXIE = 1;
  9581  1D3B  0021               	movlb	1	; select bank1
  9582  1D3C  1611               	bsf	17,4	;volatile
  9583                           
  9584                           ;UART.c: 213: }
  9585  1D3D  2D40               	goto	l6072
  9586  1D3E                     l423:	
  9587                           
  9588                           ;UART.c: 214: else
  9589                           ;UART.c: 215: {
  9590                           ;UART.c: 216: PIE1bits.TXIE = 0;
  9591  1D3E  0021               	movlb	1	; select bank1
  9592  1D3F  1211               	bcf	17,4	;volatile
  9593  1D40                     l6072:	
  9594                           
  9595                           ;UART.c: 217: }
  9596                           ;UART.c: 219: SPBRG = spbrg;
  9597  1D40  0024               	movlb	4	; select bank4
  9598  1D41  0820               	movf	OpenUSART@spbrg^(0+512),w
  9599  1D42  0023               	movlb	3	; select bank3
  9600  1D43  009B               	movwf	27	;volatile
  9601                           
  9602                           ;UART.c: 220: SPBRGH = spbrg >> 8;
  9603  1D44  0024               	movlb	4	; select bank4
  9604  1D45  0821               	movf	(OpenUSART@spbrg+1)^(0+512),w
  9605  1D46  0023               	movlb	3	; select bank3
  9606  1D47  009C               	movwf	28	;volatile
  9607                           
  9608                           ;UART.c: 222: TX1STAbits.TXEN = 1;
  9609  1D48  169E               	bsf	30,5	;volatile
  9610                           
  9611                           ;UART.c: 223: RC1STAbits.SPEN = 1;
  9612  1D49  179D               	bsf	29,7	;volatile
  9613  1D4A  0008               	return
  9614  1D4B                     __end_of_OpenUSART:	
  9615                           
  9616                           	psect	text30
  9617  1995                     __ptext30:	
  9618 ;; *************** function _CloseUSART *****************
  9619 ;; Defined at:
  9620 ;;		line 62 in file "UART.c"
  9621 ;; Parameters:    Size  Location     Type
  9622 ;;		None
  9623 ;; Auto vars:     Size  Location     Type
  9624 ;;		None
  9625 ;; Return value:  Size  Location     Type
  9626 ;;		None               void
  9627 ;; Registers used:
  9628 ;;		wreg, status,2, status,0
  9629 ;; Tracked objects:
  9630 ;;		On entry : 0/0
  9631 ;;		On exit  : 0/0
  9632 ;;		Unchanged: 0/0
  9633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9636 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9637 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9638 ;;Total ram usage:        1 bytes
  9639 ;; Hardware stack levels used:    1
  9640 ;; Hardware stack levels required when called:    7
  9641 ;; This function calls:
  9642 ;;		Nothing
  9643 ;; This function is called by:
  9644 ;;		_InitUART
  9645 ;; This function uses a non-reentrant model
  9646 ;;
  9647                           
  9648                           
  9649                           ;psect for function _CloseUSART
  9650  1995                     _CloseUSART:	
  9651                           
  9652                           ;UART.c: 64: RCSTA&=0b01001111;
  9653                           
  9654                           ;incstack = 0
  9655                           ; Regs used in _CloseUSART: [wreg+status,2+status,0]
  9656  1995  304F               	movlw	79
  9657  1996  0024               	movlb	4	; select bank4
  9658  1997  00A0               	movwf	??_CloseUSART^(0+512)
  9659  1998  0820               	movf	??_CloseUSART^(0+512),w
  9660  1999  0023               	movlb	3	; select bank3
  9661  199A  059D               	andwf	29,f	;volatile
  9662                           
  9663                           ;UART.c: 65: TX1STAbits.TXEN=0;
  9664  199B  129E               	bcf	30,5	;volatile
  9665                           
  9666                           ;UART.c: 66: PIE1&=0b11001111;
  9667  199C  30CF               	movlw	207
  9668  199D  0024               	movlb	4	; select bank4
  9669  199E  00A0               	movwf	??_CloseUSART^(0+512)
  9670  199F  0820               	movf	??_CloseUSART^(0+512),w
  9671  19A0  0021               	movlb	1	; select bank1
  9672  19A1  0591               	andwf	17,f	;volatile
  9673  19A2  0008               	return
  9674  19A3                     __end_of_CloseUSART:	
  9675                           
  9676                           	psect	text31
  9677  1A3B                     __ptext31:	
  9678 ;; *************** function _InitApp *****************
  9679 ;; Defined at:
  9680 ;;		line 62 in file "user.c"
  9681 ;; Parameters:    Size  Location     Type
  9682 ;;		None
  9683 ;; Auto vars:     Size  Location     Type
  9684 ;;		None
  9685 ;; Return value:  Size  Location     Type
  9686 ;;		None               void
  9687 ;; Registers used:
  9688 ;;		wreg, status,2
  9689 ;; Tracked objects:
  9690 ;;		On entry : 0/0
  9691 ;;		On exit  : 0/0
  9692 ;;		Unchanged: 0/0
  9693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9698 ;;Total ram usage:        0 bytes
  9699 ;; Hardware stack levels used:    1
  9700 ;; Hardware stack levels required when called:    7
  9701 ;; This function calls:
  9702 ;;		Nothing
  9703 ;; This function is called by:
  9704 ;;		_main
  9705 ;; This function uses a non-reentrant model
  9706 ;;
  9707                           
  9708                           
  9709                           ;psect for function _InitApp
  9710  1A3B                     _InitApp:	
  9711                           
  9712                           ;user.c: 64: LATC =0;
  9713                           
  9714                           ;incstack = 0
  9715                           ; Regs used in _InitApp: [wreg+status,2]
  9716  1A3B  0022               	movlb	2	; select bank2
  9717  1A3C  018E               	clrf	14	;volatile
  9718                           
  9719                           ;user.c: 65: LATA =0;
  9720  1A3D  018C               	clrf	12	;volatile
  9721                           
  9722                           ;user.c: 66: TRISCbits.TRISC2 = 0;
  9723  1A3E  0021               	movlb	1	; select bank1
  9724  1A3F  110E               	bcf	14,2	;volatile
  9725                           
  9726                           ;user.c: 67: TRISCbits.TRISC1 = 0;
  9727  1A40  108E               	bcf	14,1	;volatile
  9728                           
  9729                           ;user.c: 68: TRISCbits.TRISC3 = 0;
  9730  1A41  118E               	bcf	14,3	;volatile
  9731                           
  9732                           ;user.c: 69: TRISCbits.TRISC4 = 0;
  9733  1A42  120E               	bcf	14,4	;volatile
  9734                           
  9735                           ;user.c: 70: TRISAbits.TRISA2 = 1;
  9736  1A43  150C               	bsf	12,2	;volatile
  9737                           
  9738                           ;user.c: 72: TRISCbits.TRISC0 = 1;
  9739  1A44  140E               	bsf	14,0	;volatile
  9740                           
  9741                           ;user.c: 77: TRISCbits.TRISC5 = 1;
  9742  1A45  168E               	bsf	14,5	;volatile
  9743                           
  9744                           ;user.c: 80: LATC |= 0b00000010;
  9745  1A46  0022               	movlb	2	; select bank2
  9746  1A47  148E               	bsf	14,1	;volatile
  9747                           
  9748                           ;user.c: 81: PPSLOCK =0;
  9749  1A48  003C               	movlb	28	; select bank28
  9750  1A49  018F               	clrf	15	;volatile
  9751                           
  9752                           ;user.c: 82: RC2PPS = 0b00010100;
  9753  1A4A  3014               	movlw	20
  9754  1A4B  003D               	movlb	29	; select bank29
  9755  1A4C  00A2               	movwf	34	;volatile
  9756                           
  9757                           ;user.c: 83: CKPPS = 0b00010010;
  9758  1A4D  3012               	movlw	18
  9759  1A4E  003C               	movlb	28	; select bank28
  9760  1A4F  00A5               	movwf	37	;volatile
  9761                           
  9762                           ;user.c: 85: RXPPS = 0b00010101;
  9763  1A50  3015               	movlw	21
  9764  1A51  00A4               	movwf	36	;volatile
  9765                           
  9766                           ;user.c: 87: PPSLOCK =1;
  9767  1A52  3001               	movlw	1
  9768  1A53  008F               	movwf	15	;volatile
  9769                           
  9770                           ;user.c: 89: ANSELA &= ~0xFF;
  9771  1A54  0023               	movlb	3	; select bank3
  9772  1A55  018C               	clrf	12	;volatile
  9773                           
  9774                           ;user.c: 90: ANSELA |= 0b00000100;
  9775  1A56  150C               	bsf	12,2	;volatile
  9776                           
  9777                           ;user.c: 91: ANSELC &= ~0xFF;
  9778  1A57  018E               	clrf	14	;volatile
  9779                           
  9780                           ;user.c: 92: OPTION_REGbits.nWPUEN = 0;
  9781  1A58  0021               	movlb	1	; select bank1
  9782  1A59  1395               	bcf	21,7	;volatile
  9783                           
  9784                           ;user.c: 93: WPUC = 0b00100000;
  9785  1A5A  3020               	movlw	32
  9786  1A5B  0024               	movlb	4	; select bank4
  9787  1A5C  008E               	movwf	14	;volatile
  9788                           
  9789                           ;user.c: 94: WPUA = 0;
  9790  1A5D  018C               	clrf	12	;volatile
  9791  1A5E  0008               	return
  9792  1A5F                     __end_of_InitApp:	
  9793                           
  9794                           	psect	text32
  9795  19E9                     __ptext32:	
  9796 ;; *************** function _ConfigureOscillator *****************
  9797 ;; Defined at:
  9798 ;;		line 40 in file "system.c"
  9799 ;; Parameters:    Size  Location     Type
  9800 ;;		None
  9801 ;; Auto vars:     Size  Location     Type
  9802 ;;		None
  9803 ;; Return value:  Size  Location     Type
  9804 ;;		None               void
  9805 ;; Registers used:
  9806 ;;		wreg, status,2, status,0
  9807 ;; Tracked objects:
  9808 ;;		On entry : 0/0
  9809 ;;		On exit  : 0/0
  9810 ;;		Unchanged: 0/0
  9811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9814 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9815 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9816 ;;Total ram usage:        1 bytes
  9817 ;; Hardware stack levels used:    1
  9818 ;; Hardware stack levels required when called:    7
  9819 ;; This function calls:
  9820 ;;		Nothing
  9821 ;; This function is called by:
  9822 ;;		_main
  9823 ;; This function uses a non-reentrant model
  9824 ;;
  9825                           
  9826                           
  9827                           ;psect for function _ConfigureOscillator
  9828  19E9                     _ConfigureOscillator:	
  9829                           
  9830                           ;system.c: 42: OSCCON= 0b11110000;
  9831                           
  9832                           ;incstack = 0
  9833                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
  9834  19E9  30F0               	movlw	240
  9835  19EA  0021               	movlb	1	; select bank1
  9836  19EB  0099               	movwf	25	;volatile
  9837  19EC                     l6426:	
  9838                           ;system.c: 43: while(!(OSCSTAT & HFIOFS));
  9839                           
  9840  19EC  3000               	movlw	0
  9841  19ED  181A               	btfsc	26,0	;volatile
  9842  19EE  3001               	movlw	1
  9843  19EF  051A               	andwf	26,w	;volatile
  9844  19F0  1903               	btfsc	3,2
  9845  19F1  29EC               	goto	l6426
  9846  19F2                     l6428:	
  9847                           ;system.c: 44: while(!(OSCSTAT & = 0b01000000));
  9848                           
  9849  19F2  3040               	movlw	64
  9850  19F3  0024               	movlb	4	; select bank4
  9851  19F4  00A0               	movwf	??_ConfigureOscillator^(0+512)
  9852  19F5  0820               	movf	??_ConfigureOscillator^(0+512),w
  9853  19F6  0021               	movlb	1	; select bank1
  9854  19F7  059A               	andwf	26,f	;volatile
  9855  19F8  1D03               	btfss	3,2
  9856  19F9  0008               	return
  9857  19FA  29F2               	goto	l6428
  9858  19FB                     __end_of_ConfigureOscillator:	
  9859                           
  9860                           	psect	intentry
  9861  0004                     __pintentry:	
  9862 ;; *************** function _isr *****************
  9863 ;; Defined at:
  9864 ;;		line 72 in file "interrupts.c"
  9865 ;; Parameters:    Size  Location     Type
  9866 ;;		None
  9867 ;; Auto vars:     Size  Location     Type
  9868 ;;  ScanTemp        1   36[BANK1 ] unsigned char 
  9869 ;;  rx              1   35[BANK1 ] unsigned char 
  9870 ;;  Rx_fault        1   34[BANK1 ] unsigned char 
  9871 ;; Return value:  Size  Location     Type
  9872 ;;		None               void
  9873 ;; Registers used:
  9874 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9875 ;; Tracked objects:
  9876 ;;		On entry : 0/0
  9877 ;;		On exit  : 0/0
  9878 ;;		Unchanged: 0/0
  9879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9881 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  9882 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9883 ;;      Totals:         0       2       3       0       0       0       0       0       0       0       0       0       
      +0       0
  9884 ;;Total ram usage:        5 bytes
  9885 ;; Hardware stack levels used:    1
  9886 ;; Hardware stack levels required when called:    6
  9887 ;; This function calls:
  9888 ;;		_PS2RawToScan
  9889 ;;		_PS_2_DISABLE_INTERRUPT
  9890 ;;		_Process_PS2_ScanCode
  9891 ;;		_READ_CONFIG_PIN
  9892 ;;		_READ_PS_2_PIN
  9893 ;;		_ResendLast
  9894 ;;		_Timer2OFF
  9895 ;;		_Timer2Reset
  9896 ;;		_UART_send_break_timed
  9897 ;;		i1_PS_2_ENABLE_INTERRUPT
  9898 ;;		i1_ReadUSART
  9899 ;;		i1_Timer2ON
  9900 ;;		i1_UARTchar
  9901 ;; This function is called by:
  9902 ;;		Interrupt level 1
  9903 ;; This function uses a non-reentrant model
  9904 ;;
  9905                           
  9906  0004                     _isr:	
  9907                           
  9908                           ;incstack = 0
  9909                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9910  0004  147E               	bsf	126,0	;set compiler interrupt flag
  9911  0005  3180               	pagesel	$
  9912  0006  0020               	movlb	0	; select bank0
  9913  0007  087F               	movf	127,w
  9914  0008  00EF               	movwf	??_isr+1
  9915                           
  9916                           ;interrupts.c: 74: unsigned char rx;
  9917                           ;interrupts.c: 75: unsigned char Rx_fault =0;
  9918  0009  0021               	movlb	1	; select bank1
  9919  000A  01C2               	clrf	isr@Rx_fault^(0+128)
  9920                           
  9921                           ;interrupts.c: 76: unsigned char ScanTemp;
  9922                           ;interrupts.c: 78: if(IOCAF & 0b00100000)
  9923  000B  0027               	movlb	7	; select bank7
  9924  000C  1E93               	btfss	19,5	;volatile
  9925  000D  2875               	goto	i1l83
  9926                           
  9927                           ;interrupts.c: 79: {
  9928                           ;interrupts.c: 81: PS_2_DISABLE_INTERRUPT(0b00100000);
  9929  000E  3020               	movlw	32
  9930  000F  3190  2000  3180   	fcall	_PS_2_DISABLE_INTERRUPT
  9931                           
  9932                           ;interrupts.c: 82: PIE1bits.TMR2IE = 0;
  9933  0012  0021               	movlb	1	; select bank1
  9934  0013  1091               	bcf	17,1	;volatile
  9935                           
  9936                           ;interrupts.c: 83: PIE1bits.RCIE = 0;
  9937  0014  1291               	bcf	17,5	;volatile
  9938                           
  9939                           ;interrupts.c: 84: LATC |= 0b00010000;
  9940  0015  0022               	movlb	2	; select bank2
  9941  0016  160E               	bsf	14,4	;volatile
  9942                           
  9943                           ;interrupts.c: 85: PS_2_bits++;
  9944  0017  3001               	movlw	1
  9945  0018  0020               	movlb	0	; select bank0
  9946  0019  00EE               	movwf	??_isr
  9947  001A  086E               	movf	??_isr,w
  9948  001B  0021               	movlb	1	; select bank1
  9949  001C  07D2               	addwf	_PS_2_bits^(0+128),f
  9950                           
  9951                           ;interrupts.c: 86: PS_2_Read_Data_TEMP <<= 1;
  9952  001D  3001               	movlw	1
  9953  001E                     u711_25:	
  9954  001E  35C9               	lslf	_PS_2_Read_Data_TEMP^(0+128),f
  9955  001F  0DCA               	rlf	(_PS_2_Read_Data_TEMP+1)^(0+128),f
  9956  0020  0B89               	decfsz	9,f
  9957  0021  281E               	goto	u711_25
  9958                           
  9959                           ;interrupts.c: 87: __nop();
  9960  0022  0000               	nop
  9961                           
  9962                           ;interrupts.c: 88: if(READ_PS_2_PIN(0b00010000))
  9963  0023  3010               	movlw	16
  9964  0024  3199  21FB  3180   	fcall	_READ_PS_2_PIN
  9965  0027  3A00               	xorlw	0
  9966  0028  1903               	skipnz
  9967  0029  282F               	goto	i1l84
  9968                           
  9969                           ;interrupts.c: 89: {
  9970                           ;interrupts.c: 90: PS_2_Read_Data_TEMP++;
  9971  002A  3001               	movlw	1
  9972  002B  0021               	movlb	1	; select bank1
  9973  002C  07C9               	addwf	_PS_2_Read_Data_TEMP^(0+128),f
  9974  002D  3000               	movlw	0
  9975  002E  3DCA               	addwfc	(_PS_2_Read_Data_TEMP+1)^(0+128),f
  9976  002F                     i1l84:	
  9977                           
  9978                           ;interrupts.c: 91: }
  9979                           ;interrupts.c: 92: if(PS_2_bits == 11)
  9980  002F  0021               	movlb	1	; select bank1
  9981  0030  0852               	movf	_PS_2_bits^(0+128),w
  9982  0031  3A0B               	xorlw	11
  9983  0032  1D03               	skipz
  9984  0033  2860               	goto	i1l5726
  9985                           
  9986                           ;interrupts.c: 93: {
  9987                           ;interrupts.c: 94: if(PS_2_Buffer_items < 12)
  9988  0034  300C               	movlw	12
  9989  0035  0251               	subwf	_PS_2_Buffer_items^(0+128),w
  9990  0036  1803               	skipnc
  9991  0037  285D               	goto	i1l5724
  9992                           
  9993                           ;interrupts.c: 95: {
  9994                           ;interrupts.c: 96: ScanTemp = (unsigned char) PS2RawToScan(PS_2_Read_Data_TEMP);
  9995  0038  084A               	movf	(_PS_2_Read_Data_TEMP+1)^(0+128),w
  9996  0039  01F9               	clrf	PS2RawToScan@Raw+1
  9997  003A  07F9               	addwf	PS2RawToScan@Raw+1,f
  9998  003B  0849               	movf	_PS_2_Read_Data_TEMP^(0+128),w
  9999  003C  01F8               	clrf	PS2RawToScan@Raw
 10000  003D  07F8               	addwf	PS2RawToScan@Raw,f
 10001  003E  319E  2615  3180   	fcall	_PS2RawToScan
 10002  0041  0878               	movf	?_PS2RawToScan,w
 10003  0042  0020               	movlb	0	; select bank0
 10004  0043  00EE               	movwf	??_isr
 10005  0044  086E               	movf	??_isr,w
 10006  0045  0021               	movlb	1	; select bank1
 10007  0046  00C4               	movwf	isr@ScanTemp^(0+128)
 10008                           
 10009                           ;interrupts.c: 97: if(ScanTemp)
 10010  0047  0844               	movf	isr@ScanTemp^(0+128),w
 10011  0048  1903               	btfsc	3,2
 10012  0049  285B               	goto	i1l87
 10013                           
 10014                           ;interrupts.c: 98: {
 10015                           ;interrupts.c: 100: PS_2_ScanCodes[PS_2_Buffer_items] = ScanTemp;
 10016  004A  0844               	movf	isr@ScanTemp^(0+128),w
 10017  004B  0020               	movlb	0	; select bank0
 10018  004C  00EE               	movwf	??_isr
 10019  004D  0021               	movlb	1	; select bank1
 10020  004E  0851               	movf	_PS_2_Buffer_items^(0+128),w
 10021  004F  3ED6               	addlw	_PS_2_ScanCodes& (0+255)
 10022  0050  0086               	movwf	6
 10023  0051  0187               	clrf	7
 10024  0052  0020               	movlb	0	; select bank0
 10025  0053  086E               	movf	??_isr,w
 10026  0054  0081               	movwf	1
 10027                           
 10028                           ;interrupts.c: 101: PS_2_Buffer_items++;
 10029  0055  3001               	movlw	1
 10030  0056  00EE               	movwf	??_isr
 10031  0057  086E               	movf	??_isr,w
 10032  0058  0021               	movlb	1	; select bank1
 10033  0059  07D1               	addwf	_PS_2_Buffer_items^(0+128),f
 10034                           
 10035                           ;interrupts.c: 102: }
 10036  005A  285D               	goto	i1l5724
 10037  005B                     i1l87:	
 10038                           
 10039                           ;interrupts.c: 103: else
 10040                           ;interrupts.c: 104: {
 10041                           ;interrupts.c: 106: ResendLastFlag = 1;
 10042  005B  01D3               	clrf	_ResendLastFlag^(0+128)
 10043  005C  0AD3               	incf	_ResendLastFlag^(0+128),f
 10044  005D                     i1l5724:	
 10045                           
 10046                           ;interrupts.c: 107: }
 10047                           ;interrupts.c: 109: }
 10048                           ;interrupts.c: 110: PS_2_bits = 0;
 10049  005D  01D2               	clrf	_PS_2_bits^(0+128)
 10050                           
 10051                           ;interrupts.c: 111: PS_2_Read_Data_TEMP = 0;
 10052  005E  01C9               	clrf	_PS_2_Read_Data_TEMP^(0+128)
 10053  005F  01CA               	clrf	(_PS_2_Read_Data_TEMP+1)^(0+128)
 10054  0060                     i1l5726:	
 10055                           
 10056                           ;interrupts.c: 112: }
 10057                           ;interrupts.c: 113: Timer2Reset();
 10058  0060  3198  20CE  3180   	fcall	_Timer2Reset
 10059                           
 10060                           ;interrupts.c: 114: PIR1bits.TMR2IF = 0;
 10061  0063  0020               	movlb	0	; select bank0
 10062  0064  1091               	bcf	17,1	;volatile
 10063                           
 10064                           ;interrupts.c: 115: PIE1bits.TMR2IE = 1;
 10065  0065  0021               	movlb	1	; select bank1
 10066  0066  1491               	bsf	17,1	;volatile
 10067                           
 10068                           ;interrupts.c: 116: Timer2ON();
 10069  0067  3198  20D1  3180   	fcall	i1_Timer2ON
 10070                           
 10071                           ;interrupts.c: 117: IOCAF &= ~0b00100000;
 10072  006A  30DF               	movlw	223
 10073  006B  0020               	movlb	0	; select bank0
 10074  006C  00EE               	movwf	??_isr
 10075  006D  086E               	movf	??_isr,w
 10076  006E  0027               	movlb	7	; select bank7
 10077  006F  0593               	andwf	19,f	;volatile
 10078                           
 10079                           ;interrupts.c: 118: PS_2_ENABLE_INTERRUPT(0b00100000);
 10080  0070  3020               	movlw	32
 10081  0071  3199  2143  3180   	fcall	i1_PS_2_ENABLE_INTERRUPT
 10082                           
 10083                           ;interrupts.c: 119: }
 10084  0074  28E1               	goto	i1l102
 10085  0075                     i1l83:	
 10086                           
 10087                           ;interrupts.c: 120: else if (IOCAF & 0b00010000)
 10088  0075  1E13               	btfss	19,4	;volatile
 10089  0076  2882               	goto	i1l90
 10090                           
 10091                           ;interrupts.c: 121: {
 10092                           ;interrupts.c: 122: PS_2_DISABLE_INTERRUPT(0b00010000);
 10093  0077  3010               	movlw	16
 10094  0078  3190  2000  3180   	fcall	_PS_2_DISABLE_INTERRUPT
 10095                           
 10096                           ;interrupts.c: 123: IOCAF &= ~0b00010000;
 10097  007B  30EF               	movlw	239
 10098  007C  0020               	movlb	0	; select bank0
 10099  007D  00EE               	movwf	??_isr
 10100  007E  086E               	movf	??_isr,w
 10101  007F  0027               	movlb	7	; select bank7
 10102  0080  0593               	andwf	19,f	;volatile
 10103                           
 10104                           ;interrupts.c: 124: }
 10105  0081  28E1               	goto	i1l102
 10106  0082                     i1l90:	
 10107                           
 10108                           ;interrupts.c: 125: else if (PIR1bits.RCIF)
 10109  0082  0020               	movlb	0	; select bank0
 10110  0083  1E91               	btfss	17,5	;volatile
 10111  0084  28BF               	goto	i1l92
 10112                           
 10113                           ;interrupts.c: 126: {
 10114                           ;interrupts.c: 129: LATC |= 0b00001000;
 10115  0085  0022               	movlb	2	; select bank2
 10116  0086  158E               	bsf	14,3	;volatile
 10117                           
 10118                           ;interrupts.c: 130: SinLEDtimer = 0;
 10119  0087  0024               	movlb	4	; select bank4
 10120  0088  01DA               	clrf	_SinLEDtimer^(0+512)
 10121  0089  01DB               	clrf	(_SinLEDtimer+1)^(0+512)
 10122                           
 10123                           ;interrupts.c: 131: Rx_fault = 0;
 10124  008A  0021               	movlb	1	; select bank1
 10125  008B  01C2               	clrf	isr@Rx_fault^(0+128)
 10126                           
 10127                           ;interrupts.c: 132: if(RC1STAbits.FERR)
 10128  008C  0023               	movlb	3	; select bank3
 10129  008D  1D1D               	btfss	29,2	;volatile
 10130  008E  2892               	goto	i1l5750
 10131                           
 10132                           ;interrupts.c: 133: {
 10133                           ;interrupts.c: 134: Rx_fault =1;
 10134  008F  0021               	movlb	1	; select bank1
 10135  0090  01C2               	clrf	isr@Rx_fault^(0+128)
 10136  0091  0AC2               	incf	isr@Rx_fault^(0+128),f
 10137  0092                     i1l5750:	
 10138                           
 10139                           ;interrupts.c: 135: }
 10140                           ;interrupts.c: 136: rx = ReadUSART();
 10141  0092  3199  2108  3180   	fcall	i1_ReadUSART
 10142  0095  0020               	movlb	0	; select bank0
 10143  0096  00EE               	movwf	??_isr
 10144  0097  086E               	movf	??_isr,w
 10145  0098  0021               	movlb	1	; select bank1
 10146  0099  00C3               	movwf	isr@rx^(0+128)
 10147                           
 10148                           ;interrupts.c: 138: if(READ_CONFIG_PIN())
 10149  009A  3198  20F2  3180   	fcall	_READ_CONFIG_PIN
 10150  009D  3A00               	xorlw	0
 10151  009E  1903               	skipnz
 10152  009F  28BC               	goto	i1l5760
 10153                           
 10154                           ;interrupts.c: 139: {
 10155                           ;interrupts.c: 140: if(Rx_fault == 1)
 10156  00A0  0021               	movlb	1	; select bank1
 10157  00A1  0842               	movf	isr@Rx_fault^(0+128),w
 10158  00A2  3A01               	xorlw	1
 10159  00A3  1D03               	skipz
 10160  00A4  28B0               	goto	i1l5758
 10161                           
 10162                           ;interrupts.c: 141: {
 10163                           ;interrupts.c: 142: if(rx == 0)
 10164  00A5  08C3               	movf	isr@rx^(0+128),f
 10165  00A6  1D03               	skipz
 10166  00A7  28BC               	goto	i1l5760
 10167                           
 10168                           ;interrupts.c: 143: {
 10169                           ;interrupts.c: 145: UART_send_break_timed(100000);
 10170  00A8  30A0               	movlw	160
 10171  00A9  00FA               	movwf	UART_send_break_timed@US
 10172  00AA  3086               	movlw	134
 10173  00AB  00FB               	movwf	UART_send_break_timed@US+1
 10174  00AC  319A  225F  3180   	fcall	_UART_send_break_timed
 10175                           
 10176                           ;interrupts.c: 146: }
 10177                           ;interrupts.c: 147: }
 10178  00AF  28BC               	goto	i1l5760
 10179  00B0                     i1l5758:	
 10180                           
 10181                           ;interrupts.c: 148: else
 10182                           ;interrupts.c: 149: {
 10183                           ;interrupts.c: 150: UARTchar(rx, 1 ,RC1STAbits.RX9D);
 10184  00B0  01F8               	clrf	i1UARTchar@override
 10185  00B1  0AF8               	incf	i1UARTchar@override,f
 10186  00B2  3000               	movlw	0
 10187  00B3  0023               	movlb	3	; select bank3
 10188  00B4  181D               	btfsc	29,0	;volatile
 10189  00B5  3001               	movlw	1
 10190  00B6  00F9               	movwf	i1UARTchar@NinethBit_override_data
 10191  00B7  0021               	movlb	1	; select bank1
 10192  00B8  0843               	movf	isr@rx^(0+128),w
 10193  00B9  3190  2011  3180   	fcall	i1_UARTchar
 10194  00BC                     i1l5760:	
 10195                           
 10196                           ;interrupts.c: 151: }
 10197                           ;interrupts.c: 152: }
 10198                           ;interrupts.c: 168: PIR1bits.RCIF = 0;
 10199  00BC  0020               	movlb	0	; select bank0
 10200  00BD  1291               	bcf	17,5	;volatile
 10201                           
 10202                           ;interrupts.c: 169: }
 10203  00BE  28E1               	goto	i1l102
 10204  00BF                     i1l92:	
 10205                           
 10206                           ;interrupts.c: 170: else if(PIR1bits.TMR2IF)
 10207  00BF  1C91               	btfss	17,1	;volatile
 10208  00C0  28E1               	goto	i1l102
 10209                           
 10210                           ;interrupts.c: 171: {
 10211                           ;interrupts.c: 173: PIE1bits.TMR2IE = 0;
 10212  00C1  0021               	movlb	1	; select bank1
 10213  00C2  1091               	bcf	17,1	;volatile
 10214                           
 10215                           ;interrupts.c: 174: Timer2OFF();
 10216  00C3  3198  20CB  3180   	fcall	_Timer2OFF
 10217                           
 10218                           ;interrupts.c: 175: PS_2_DISABLE_INTERRUPT(0b00100000);
 10219  00C6  3020               	movlw	32
 10220  00C7  3190  2000  3180   	fcall	_PS_2_DISABLE_INTERRUPT
 10221                           
 10222                           ;interrupts.c: 176: PS_2_bits = 0;
 10223  00CA  0021               	movlb	1	; select bank1
 10224  00CB  01D2               	clrf	_PS_2_bits^(0+128)
 10225                           
 10226                           ;interrupts.c: 177: PS_2_Read_Data_TEMP = 0;
 10227  00CC  01C9               	clrf	_PS_2_Read_Data_TEMP^(0+128)
 10228  00CD  01CA               	clrf	(_PS_2_Read_Data_TEMP+1)^(0+128)
 10229                           
 10230                           ;interrupts.c: 178: if(ResendLastFlag)
 10231  00CE  0853               	movf	_ResendLastFlag^(0+128),w
 10232  00CF  1903               	btfsc	3,2
 10233  00D0  28D7               	goto	i1l5776
 10234                           
 10235                           ;interrupts.c: 179: {
 10236                           ;interrupts.c: 181: ResendLast();
 10237  00D1  3199  2100  3180   	fcall	_ResendLast
 10238                           
 10239                           ;interrupts.c: 182: ResendLastFlag = 0;
 10240  00D4  0021               	movlb	1	; select bank1
 10241  00D5  01D3               	clrf	_ResendLastFlag^(0+128)
 10242                           
 10243                           ;interrupts.c: 183: }
 10244  00D6  28DA               	goto	i1l5778
 10245  00D7                     i1l5776:	
 10246                           
 10247                           ;interrupts.c: 184: else
 10248                           ;interrupts.c: 185: {
 10249                           ;interrupts.c: 186: Process_PS2_ScanCode();
 10250  00D7  3181  211B  3180   	fcall	_Process_PS2_ScanCode
 10251  00DA                     i1l5778:	
 10252                           
 10253                           ;interrupts.c: 187: }
 10254                           ;interrupts.c: 189: PIE1bits.RCIE = 1;
 10255  00DA  0021               	movlb	1	; select bank1
 10256  00DB  1691               	bsf	17,5	;volatile
 10257                           
 10258                           ;interrupts.c: 191: PS_2_ENABLE_INTERRUPT(0b00100000);
 10259  00DC  3020               	movlw	32
 10260  00DD  3199  2143         	fcall	i1_PS_2_ENABLE_INTERRUPT
 10261                           
 10262                           ;interrupts.c: 192: PIR1bits.TMR2IF =0;
 10263  00DF  0020               	movlb	0	; select bank0
 10264  00E0  1091               	bcf	17,1	;volatile
 10265  00E1                     i1l102:	
 10266  00E1  0020               	movlb	0	; select bank0
 10267  00E2  086F               	movf	??_isr+1,w
 10268  00E3  00FF               	movwf	127
 10269  00E4  107E               	bcf	126,0	;clear compiler interrupt flag
 10270  00E5  0009               	retfie
 10271  00E6                     __end_of_isr:	
 10272                           
 10273                           	psect	text34
 10274  18D1                     __ptext34:	
 10275 ;; *************** function i1_Timer2ON *****************
 10276 ;; Defined at:
 10277 ;;		line 59 in file "Timer.c"
 10278 ;; Parameters:    Size  Location     Type
 10279 ;;		None
 10280 ;; Auto vars:     Size  Location     Type
 10281 ;;		None
 10282 ;; Return value:  Size  Location     Type
 10283 ;;		None               void
 10284 ;; Registers used:
 10285 ;;		None
 10286 ;; Tracked objects:
 10287 ;;		On entry : 0/0
 10288 ;;		On exit  : 0/0
 10289 ;;		Unchanged: 0/0
 10290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10294 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10295 ;;Total ram usage:        0 bytes
 10296 ;; Hardware stack levels used:    1
 10297 ;; This function calls:
 10298 ;;		Nothing
 10299 ;; This function is called by:
 10300 ;;		_isr
 10301 ;; This function uses a non-reentrant model
 10302 ;;
 10303                           
 10304                           
 10305                           ;psect for function i1_Timer2ON
 10306  18D1                     i1_Timer2ON:	
 10307                           
 10308                           ;Timer.c: 61: T2CONbits.TMR2ON = 1;
 10309                           
 10310                           ;incstack = 0
 10311                           ; Regs used in i1_Timer2ON: []
 10312  18D1  0020               	movlb	0	; select bank0
 10313  18D2  151C               	bsf	28,2	;volatile
 10314  18D3  0008               	return
 10315  18D4                     __end_ofi1_Timer2ON:	
 10316                           
 10317                           	psect	text35
 10318  1943                     __ptext35:	
 10319 ;; *************** function i1_PS_2_ENABLE_INTERRUPT *****************
 10320 ;; Defined at:
 10321 ;;		line 192 in file "PS_2.c"
 10322 ;; Parameters:    Size  Location     Type
 10323 ;;  DATA_CLK        1    wreg     unsigned char 
 10324 ;; Auto vars:     Size  Location     Type
 10325 ;;  DATA_CLK        1    0[COMMON] unsigned char 
 10326 ;; Return value:  Size  Location     Type
 10327 ;;		None               void
 10328 ;; Registers used:
 10329 ;;		wreg
 10330 ;; Tracked objects:
 10331 ;;		On entry : 0/0
 10332 ;;		On exit  : 0/0
 10333 ;;		Unchanged: 0/0
 10334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10336 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10338 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10339 ;;Total ram usage:        1 bytes
 10340 ;; Hardware stack levels used:    1
 10341 ;; This function calls:
 10342 ;;		Nothing
 10343 ;; This function is called by:
 10344 ;;		_isr
 10345 ;; This function uses a non-reentrant model
 10346 ;;
 10347                           
 10348                           
 10349                           ;psect for function i1_PS_2_ENABLE_INTERRUPT
 10350  1943                     i1_PS_2_ENABLE_INTERRUPT:	
 10351                           
 10352                           ;incstack = 0
 10353                           ; Regs used in i1_PS_2_ENABLE_INTERRUPT: [wreg]
 10354                           ;i1PS_2_ENABLE_INTERRUPT@DATA_CLK stored from wreg
 10355  1943  00F0               	movwf	i1PS_2_ENABLE_INTERRUPT@DATA_CLK
 10356                           
 10357                           ;PS_2.c: 194: if(DATA_CLK == 0b00100000)
 10358  1944  0870               	movf	i1PS_2_ENABLE_INTERRUPT@DATA_CLK,w
 10359  1945  3A20               	xorlw	32
 10360  1946  1D03               	skipz
 10361  1947  294B               	goto	i1l642
 10362                           
 10363                           ;PS_2.c: 195: {
 10364                           ;PS_2.c: 198: IOCAN |= 0b00100000;
 10365  1948  0027               	movlb	7	; select bank7
 10366  1949  1692               	bsf	18,5	;volatile
 10367                           
 10368                           ;PS_2.c: 200: }
 10369  194A  0008               	return
 10370  194B                     i1l642:	
 10371                           
 10372                           ;PS_2.c: 201: else
 10373                           ;PS_2.c: 202: {
 10374                           ;PS_2.c: 205: IOCAN |= 0b00010000;
 10375  194B  0027               	movlb	7	; select bank7
 10376  194C  1612               	bsf	18,4	;volatile
 10377  194D  0008               	return
 10378  194E                     __end_ofi1_PS_2_ENABLE_INTERRUPT:	
 10379                           
 10380                           	psect	text36
 10381  18CE                     __ptext36:	
 10382 ;; *************** function _Timer2Reset *****************
 10383 ;; Defined at:
 10384 ;;		line 81 in file "Timer.c"
 10385 ;; Parameters:    Size  Location     Type
 10386 ;;		None
 10387 ;; Auto vars:     Size  Location     Type
 10388 ;;		None
 10389 ;; Return value:  Size  Location     Type
 10390 ;;		None               void
 10391 ;; Registers used:
 10392 ;;		status,2
 10393 ;; Tracked objects:
 10394 ;;		On entry : 0/0
 10395 ;;		On exit  : 0/0
 10396 ;;		Unchanged: 0/0
 10397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10402 ;;Total ram usage:        0 bytes
 10403 ;; Hardware stack levels used:    1
 10404 ;; This function calls:
 10405 ;;		Nothing
 10406 ;; This function is called by:
 10407 ;;		_isr
 10408 ;; This function uses a non-reentrant model
 10409 ;;
 10410                           
 10411                           
 10412                           ;psect for function _Timer2Reset
 10413  18CE                     _Timer2Reset:	
 10414                           
 10415                           ;Timer.c: 83: TMR2 = 0;
 10416                           
 10417                           ;incstack = 0
 10418                           ; Regs used in _Timer2Reset: [status,2]
 10419  18CE  0020               	movlb	0	; select bank0
 10420  18CF  019A               	clrf	26	;volatile
 10421  18D0  0008               	return
 10422  18D1                     __end_of_Timer2Reset:	
 10423                           
 10424                           	psect	text37
 10425  18CB                     __ptext37:	
 10426 ;; *************** function _Timer2OFF *****************
 10427 ;; Defined at:
 10428 ;;		line 70 in file "Timer.c"
 10429 ;; Parameters:    Size  Location     Type
 10430 ;;		None
 10431 ;; Auto vars:     Size  Location     Type
 10432 ;;		None
 10433 ;; Return value:  Size  Location     Type
 10434 ;;		None               void
 10435 ;; Registers used:
 10436 ;;		None
 10437 ;; Tracked objects:
 10438 ;;		On entry : 0/0
 10439 ;;		On exit  : 0/0
 10440 ;;		Unchanged: 0/0
 10441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10445 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10446 ;;Total ram usage:        0 bytes
 10447 ;; Hardware stack levels used:    1
 10448 ;; This function calls:
 10449 ;;		Nothing
 10450 ;; This function is called by:
 10451 ;;		_isr
 10452 ;; This function uses a non-reentrant model
 10453 ;;
 10454                           
 10455                           
 10456                           ;psect for function _Timer2OFF
 10457  18CB                     _Timer2OFF:	
 10458                           
 10459                           ;Timer.c: 72: T2CONbits.TMR2ON = 0;
 10460                           
 10461                           ;incstack = 0
 10462                           ; Regs used in _Timer2OFF: []
 10463  18CB  0020               	movlb	0	; select bank0
 10464  18CC  111C               	bcf	28,2	;volatile
 10465  18CD  0008               	return
 10466  18CE                     __end_of_Timer2OFF:	
 10467                           
 10468                           	psect	text38
 10469  1900                     __ptext38:	
 10470 ;; *************** function _ResendLast *****************
 10471 ;; Defined at:
 10472 ;;		line 958 in file "PS_2.c"
 10473 ;; Parameters:    Size  Location     Type
 10474 ;;		None
 10475 ;; Auto vars:     Size  Location     Type
 10476 ;;		None
 10477 ;; Return value:  Size  Location     Type
 10478 ;;		None               void
 10479 ;; Registers used:
 10480 ;;		wreg, status,2, status,0, pclath, cstack
 10481 ;; Tracked objects:
 10482 ;;		On entry : 0/0
 10483 ;;		On exit  : 0/0
 10484 ;;		Unchanged: 0/0
 10485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10489 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10490 ;;Total ram usage:        0 bytes
 10491 ;; Hardware stack levels used:    1
 10492 ;; Hardware stack levels required when called:    2
 10493 ;; This function calls:
 10494 ;;		_PS_2_DISABLE_INTERRUPT
 10495 ;;		_Send_PS2
 10496 ;; This function is called by:
 10497 ;;		_isr
 10498 ;; This function uses a non-reentrant model
 10499 ;;
 10500                           
 10501                           
 10502                           ;psect for function _ResendLast
 10503  1900                     _ResendLast:	
 10504                           
 10505                           ;PS_2.c: 960: PS_2_DISABLE_INTERRUPT(0b00100000);
 10506                           
 10507                           ;incstack = 0
 10508                           ; Regs used in _ResendLast: [wreg+status,2+status,0+pclath+cstack]
 10509  1900  3020               	movlw	32
 10510  1901  3190  2000  3199   	fcall	_PS_2_DISABLE_INTERRUPT
 10511                           
 10512                           ;PS_2.c: 962: Send_PS2(0xFE);
 10513  1904  30FE               	movlw	254
 10514  1905  318E  2672         	fcall	_Send_PS2
 10515  1907  0008               	return
 10516  1908                     __end_of_ResendLast:	
 10517                           
 10518                           	psect	text39
 10519  1000                     __ptext39:	
 10520 ;; *************** function _PS_2_DISABLE_INTERRUPT *****************
 10521 ;; Defined at:
 10522 ;;		line 171 in file "PS_2.c"
 10523 ;; Parameters:    Size  Location     Type
 10524 ;;  DATA_CLK        1    wreg     unsigned char 
 10525 ;; Auto vars:     Size  Location     Type
 10526 ;;  DATA_CLK        1    1[COMMON] unsigned char 
 10527 ;; Return value:  Size  Location     Type
 10528 ;;		None               void
 10529 ;; Registers used:
 10530 ;;		wreg, status,2, status,0
 10531 ;; Tracked objects:
 10532 ;;		On entry : 0/0
 10533 ;;		On exit  : 0/0
 10534 ;;		Unchanged: 0/0
 10535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10537 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10538 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10539 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10540 ;;Total ram usage:        2 bytes
 10541 ;; Hardware stack levels used:    1
 10542 ;; This function calls:
 10543 ;;		Nothing
 10544 ;; This function is called by:
 10545 ;;		_isr
 10546 ;;		_ResendLast
 10547 ;;		_Init_PS_2_Send
 10548 ;;		_Keyboard_Connected
 10549 ;; This function uses a non-reentrant model
 10550 ;;
 10551                           
 10552                           
 10553                           ;psect for function _PS_2_DISABLE_INTERRUPT
 10554  1000                     _PS_2_DISABLE_INTERRUPT:	
 10555                           
 10556                           ;incstack = 0
 10557                           ; Regs used in _PS_2_DISABLE_INTERRUPT: [wreg+status,2+status,0]
 10558                           ;PS_2_DISABLE_INTERRUPT@DATA_CLK stored from wreg
 10559  1000  00F1               	movwf	PS_2_DISABLE_INTERRUPT@DATA_CLK
 10560                           
 10561                           ;PS_2.c: 173: if(DATA_CLK == 0b00100000)
 10562  1001  0871               	movf	PS_2_DISABLE_INTERRUPT@DATA_CLK,w
 10563  1002  3A20               	xorlw	32
 10564  1003  1D03               	skipz
 10565  1004  280B               	goto	i1l4394
 10566                           
 10567                           ;PS_2.c: 174: {
 10568                           ;PS_2.c: 177: IOCAN &= ~0b00100000;
 10569  1005  30DF               	movlw	223
 10570  1006  00F0               	movwf	??_PS_2_DISABLE_INTERRUPT
 10571  1007  0870               	movf	??_PS_2_DISABLE_INTERRUPT,w
 10572  1008  0027               	movlb	7	; select bank7
 10573  1009  0592               	andwf	18,f	;volatile
 10574                           
 10575                           ;PS_2.c: 178: }
 10576  100A  0008               	return
 10577  100B                     i1l4394:	
 10578                           
 10579                           ;PS_2.c: 179: else
 10580                           ;PS_2.c: 180: {
 10581                           ;PS_2.c: 183: IOCAN &= ~0b00010000;
 10582  100B  30EF               	movlw	239
 10583  100C  00F0               	movwf	??_PS_2_DISABLE_INTERRUPT
 10584  100D  0870               	movf	??_PS_2_DISABLE_INTERRUPT,w
 10585  100E  0027               	movlb	7	; select bank7
 10586  100F  0592               	andwf	18,f	;volatile
 10587  1010  0008               	return
 10588  1011                     __end_of_PS_2_DISABLE_INTERRUPT:	
 10589                           
 10590                           	psect	text40
 10591  18F2                     __ptext40:	
 10592 ;; *************** function _READ_CONFIG_PIN *****************
 10593 ;; Defined at:
 10594 ;;		line 144 in file "MISC.c"
 10595 ;; Parameters:    Size  Location     Type
 10596 ;;		None
 10597 ;; Auto vars:     Size  Location     Type
 10598 ;;		None
 10599 ;; Return value:  Size  Location     Type
 10600 ;;                  1    wreg      unsigned char 
 10601 ;; Registers used:
 10602 ;;		wreg
 10603 ;; Tracked objects:
 10604 ;;		On entry : 0/0
 10605 ;;		On exit  : 0/0
 10606 ;;		Unchanged: 0/0
 10607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10611 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10612 ;;Total ram usage:        0 bytes
 10613 ;; Hardware stack levels used:    1
 10614 ;; This function calls:
 10615 ;;		Nothing
 10616 ;; This function is called by:
 10617 ;;		_isr
 10618 ;; This function uses a non-reentrant model
 10619 ;;
 10620                           
 10621                           
 10622                           ;psect for function _READ_CONFIG_PIN
 10623  18F2                     _READ_CONFIG_PIN:	
 10624                           
 10625                           ;MISC.c: 147: if((PORTC & 0b00000001) == 0b00000001)
 10626                           
 10627                           ;incstack = 0
 10628                           ; Regs used in _READ_CONFIG_PIN: [wreg]
 10629  18F2  0020               	movlb	0	; select bank0
 10630  18F3  1C0E               	btfss	14,0	;volatile
 10631  18F4  28F7               	goto	i1l5058
 10632                           
 10633                           ;MISC.c: 148: {
 10634                           ;MISC.c: 149: return (1);
 10635  18F5  3001               	movlw	1
 10636  18F6  0008               	return
 10637  18F7                     i1l5058:	
 10638                           
 10639                           ;MISC.c: 150: }
 10640                           ;MISC.c: 151: return 0;
 10641  18F7  3000               	movlw	0
 10642  18F8  0008               	return
 10643  18F9                     __end_of_READ_CONFIG_PIN:	
 10644                           
 10645                           	psect	text41
 10646  011B                     __ptext41:	
 10647 ;; *************** function _Process_PS2_ScanCode *****************
 10648 ;; Defined at:
 10649 ;;		line 250 in file "PS_2.c"
 10650 ;; Parameters:    Size  Location     Type
 10651 ;;		None
 10652 ;; Auto vars:     Size  Location     Type
 10653 ;;  buf            60    0[BANK3 ] unsigned char [60]
 10654 ;;  temp            1   64[BANK3 ] unsigned char 
 10655 ;; Return value:  Size  Location     Type
 10656 ;;		None               void
 10657 ;; Registers used:
 10658 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10659 ;; Tracked objects:
 10660 ;;		On entry : 0/0
 10661 ;;		On exit  : 0/0
 10662 ;;		Unchanged: 0/0
 10663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10665 ;;      Locals:         0       0       0       0      65       0       0       0       0       0       0       0       
      +0       0
 10666 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 10667 ;;      Totals:         0       0       6       0      65       0       0       0       0       0       0       0       
      +0       0
 10668 ;;Total ram usage:       71 bytes
 10669 ;; Hardware stack levels used:    1
 10670 ;; Hardware stack levels required when called:    5
 10671 ;; This function calls:
 10672 ;;		_BufferShiftBack
 10673 ;;		_Decode_Scan_Code
 10674 ;;		_Decode_Scan_Code_Function
 10675 ;;		_Decode_Scan_Code_FunctionE0
 10676 ;;		_Decode_Scan_Code_Shift
 10677 ;;		_ISNUMBER
 10678 ;;		_Send_PS2
 10679 ;;		_SetBaud
 10680 ;;		_UART_send_break
 10681 ;;		_UART_send_break_timed
 10682 ;;		___lmul
 10683 ;;		_cleanBuffer
 10684 ;;		i1_UARTchar
 10685 ;;		i1_UARTstringWAIT
 10686 ;;		i1_delayUS
 10687 ;;		i1_sprintf
 10688 ;; This function is called by:
 10689 ;;		_isr
 10690 ;; This function uses a non-reentrant model
 10691 ;;
 10692                           
 10693                           
 10694                           ;psect for function _Process_PS2_ScanCode
 10695  011B                     _Process_PS2_ScanCode:	
 10696                           
 10697                           ;PS_2.c: 252: unsigned char temp =0;
 10698                           
 10699                           ;incstack = 0
 10700                           ; Regs used in _Process_PS2_ScanCode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10701  011B  0023               	movlb	3	; select bank3
 10702  011C  01E0               	clrf	Process_PS2_ScanCode@temp^(0+384)
 10703                           
 10704                           ;PS_2.c: 253: unsigned char buf[60];
 10705                           ;PS_2.c: 255: if(PS_2_Buffer_items != 0)
 10706  011D  0021               	movlb	1	; select bank1
 10707  011E  0851               	movf	_PS_2_Buffer_items^(0+128),w
 10708  011F  1903               	btfsc	3,2
 10709  0120  0008               	return
 10710  0121                     i1l5538:	
 10711                           ;PS_2.c: 256: {
 10712                           ;PS_2.c: 258: while(PS_2_Buffer_items != 0)
 10713                           
 10714  0121  0021               	movlb	1	; select bank1
 10715  0122  08D1               	movf	_PS_2_Buffer_items^(0+128),f
 10716  0123  1903               	btfsc	3,2
 10717  0124  0008               	return
 10718                           
 10719                           ;PS_2.c: 259: {
 10720                           ;PS_2.c: 261: if(PS_2_ScanCodes[0])
 10721  0125  0856               	movf	_PS_2_ScanCodes^(0+128),w
 10722  0126  1903               	btfsc	3,2
 10723  0127  2E3D               	goto	i1l5534
 10724                           
 10725                           ;PS_2.c: 262: {
 10726                           ;PS_2.c: 264: PS_2_Read_Data_First = PS_2_ScanCodes[0];
 10727  0128  0856               	movf	_PS_2_ScanCodes^(0+128),w
 10728  0129  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 10729  012A  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 10730  012B  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 10731  012C  0023               	movlb	3	; select bank3
 10732  012D  00E1               	movwf	_PS_2_Read_Data_First^(0+384)
 10733  012E  0021               	movlb	1	; select bank1
 10734  012F  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 10735  0130  0023               	movlb	3	; select bank3
 10736  0131  00E2               	movwf	(_PS_2_Read_Data_First+1)^(0+384)
 10737                           
 10738                           ;PS_2.c: 265: if(PS_2_Read_Data_First == 0xF0)
 10739  0132  30F0               	movlw	240
 10740  0133  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 10741  0134  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 10742  0135  1D03               	skipz
 10743  0136  2962               	goto	i1l5088
 10744                           
 10745                           ;PS_2.c: 266: {
 10746                           ;PS_2.c: 267: PS_2_Read_Data_First = PS_2_ScanCodes[0];
 10747  0137  0021               	movlb	1	; select bank1
 10748  0138  0856               	movf	_PS_2_ScanCodes^(0+128),w
 10749  0139  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 10750  013A  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 10751  013B  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 10752  013C  0023               	movlb	3	; select bank3
 10753  013D  00E1               	movwf	_PS_2_Read_Data_First^(0+384)
 10754  013E  0021               	movlb	1	; select bank1
 10755  013F  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 10756  0140  0023               	movlb	3	; select bank3
 10757  0141  00E2               	movwf	(_PS_2_Read_Data_First+1)^(0+384)
 10758                           
 10759                           ;PS_2.c: 268: PS_2_Read_Data_Second = PS_2_ScanCodes[1];
 10760  0142  0021               	movlb	1	; select bank1
 10761  0143  0857               	movf	(_PS_2_ScanCodes^(0+128)+1),w
 10762  0144  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 10763  0145  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 10764  0146  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 10765  0147  0023               	movlb	3	; select bank3
 10766  0148  00E3               	movwf	_PS_2_Read_Data_Second^(0+384)
 10767  0149  0021               	movlb	1	; select bank1
 10768  014A  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 10769  014B  0023               	movlb	3	; select bank3
 10770  014C  00E4               	movwf	(_PS_2_Read_Data_Second+1)^(0+384)
 10771                           
 10772                           ;PS_2.c: 269: if(PS_2_Read_Data_Second == 0xE0)
 10773  014D  30E0               	movlw	224
 10774  014E  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 10775  014F  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 10776  0150  1D03               	skipz
 10777  0151  2973               	goto	L19
 10778                           
 10779                           ;PS_2.c: 270: {
 10780                           ;PS_2.c: 271: PS_2_Read_Data_Third = PS_2_ScanCodes[2];
 10781  0152  0021               	movlb	1	; select bank1
 10782  0153  0858               	movf	(_PS_2_ScanCodes^(0+128)+2),w
 10783  0154  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 10784  0155  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 10785  0156  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 10786  0157  0023               	movlb	3	; select bank3
 10787  0158  00E5               	movwf	_PS_2_Read_Data_Third^(0+384)
 10788  0159  0021               	movlb	1	; select bank1
 10789  015A  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 10790  015B  0023               	movlb	3	; select bank3
 10791  015C  00E6               	movwf	(_PS_2_Read_Data_Third+1)^(0+384)
 10792                           
 10793                           ;PS_2.c: 272: PS_2_Buffer_items -= 3;
 10794  015D  3003               	movlw	3
 10795  015E  0021               	movlb	1	; select bank1
 10796  015F  02D1               	subwf	_PS_2_Buffer_items^(0+128),f
 10797                           
 10798                           ;PS_2.c: 273: BufferShiftBack(PS_2_ScanCodes,3,12);
 10799  0160  3003               	movlw	3
 10800  0161  2977               	goto	L18
 10801  0162                     i1l5088:	
 10802                           ;PS_2.c: 279: }
 10803                           ;PS_2.c: 280: }
 10804                           
 10805                           ;PS_2.c: 278: BufferShiftBack(PS_2_ScanCodes,2,12);
 10806                           
 10807                           ;PS_2.c: 275: else
 10808                           ;PS_2.c: 276: {
 10809                           ;PS_2.c: 277: PS_2_Buffer_items -= 2;
 10810                           
 10811                           ;PS_2.c: 274: }
 10812                           
 10813                           
 10814                           ;PS_2.c: 281: else if(PS_2_Read_Data_First == 0xE0)
 10815  0162  30E0               	movlw	224
 10816  0163  0023               	movlb	3	; select bank3
 10817  0164  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 10818  0165  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 10819  0166  1D03               	skipz
 10820  0167  297E               	goto	i1l5096
 10821                           
 10822                           ;PS_2.c: 282: {
 10823                           ;PS_2.c: 283: PS_2_Read_Data_Second = PS_2_ScanCodes[1];
 10824  0168  0021               	movlb	1	; select bank1
 10825  0169  0857               	movf	(_PS_2_ScanCodes^(0+128)+1),w
 10826  016A  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 10827  016B  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 10828  016C  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 10829  016D  0023               	movlb	3	; select bank3
 10830  016E  00E3               	movwf	_PS_2_Read_Data_Second^(0+384)
 10831  016F  0021               	movlb	1	; select bank1
 10832  0170  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 10833  0171  0023               	movlb	3	; select bank3
 10834  0172  00E4               	movwf	(_PS_2_Read_Data_Second+1)^(0+384)
 10835  0173                     L19:	
 10836                           
 10837                           ;PS_2.c: 284: PS_2_Buffer_items -= 2;
 10838  0173  3002               	movlw	2
 10839  0174  0021               	movlb	1	; select bank1
 10840  0175  02D1               	subwf	_PS_2_Buffer_items^(0+128),f
 10841                           
 10842                           ;PS_2.c: 285: BufferShiftBack(PS_2_ScanCodes,2,12);
 10843  0176  3002               	movlw	2
 10844  0177                     L18:	
 10845  0177  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 10846  0178  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 10847  0179  00F0               	movwf	BufferShiftBack@shift
 10848  017A  300C               	movlw	12
 10849  017B  00BD               	movwf	(??_Process_PS2_ScanCode+1)^(0+128)
 10850  017C  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 10851  017D  2986               	goto	L16
 10852  017E                     i1l5096:	
 10853                           ;PS_2.c: 286: }
 10854                           
 10855                           
 10856                           ;PS_2.c: 287: else
 10857                           ;PS_2.c: 288: {
 10858                           ;PS_2.c: 289: PS_2_Buffer_items -= 1;
 10859  017E  3001               	movlw	1
 10860  017F  0021               	movlb	1	; select bank1
 10861  0180  02D1               	subwf	_PS_2_Buffer_items^(0+128),f
 10862                           
 10863                           ;PS_2.c: 290: BufferShiftBack(PS_2_ScanCodes,1,12);
 10864  0181  01F0               	clrf	BufferShiftBack@shift
 10865  0182  0AF0               	incf	BufferShiftBack@shift,f
 10866  0183  300C               	movlw	12
 10867  0184  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 10868  0185  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 10869  0186                     L16:	
 10870  0186  00F1               	movwf	BufferShiftBack@size
 10871  0187  30D6               	movlw	_PS_2_ScanCodes& (0+255)
 10872  0188  319C  24C9  3181   	fcall	_BufferShiftBack
 10873                           
 10874                           ;PS_2.c: 291: }
 10875                           ;PS_2.c: 294: if(PS_2_Read_Data_Third)
 10876  018B  0023               	movlb	3	; select bank3
 10877  018C  0866               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
 10878  018D  0465               	iorwf	_PS_2_Read_Data_Third^(0+384),w
 10879  018E  1903               	skipnz
 10880  018F  29B2               	goto	i1l5118
 10881                           
 10882                           ;PS_2.c: 295: {
 10883                           ;PS_2.c: 297: if(PS_2_Read_Data_First == 0xE0)
 10884  0190  30E0               	movlw	224
 10885  0191  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 10886  0192  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 10887  0193  1D03               	skipz
 10888  0194  2A8B               	goto	i1l5214
 10889                           
 10890                           ;PS_2.c: 298: {
 10891                           ;PS_2.c: 299: if(PS_2_Read_Data_Second == 0xF0)
 10892  0195  30F0               	movlw	240
 10893  0196  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 10894  0197  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 10895  0198  1D03               	skipz
 10896  0199  2A8B               	goto	i1l5214
 10897                           
 10898                           ;PS_2.c: 300: {
 10899                           ;PS_2.c: 301: if(PS_2_Read_Data_Third == 0x11 )
 10900  019A  3011               	movlw	17
 10901  019B  0665               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 10902  019C  0466               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 10903  019D  1D03               	skipz
 10904  019E  29A1               	goto	i1l5110
 10905                           
 10906                           ;PS_2.c: 302: {
 10907                           ;PS_2.c: 303: LALT = 0;
 10908  019F  01E9               	clrf	_LALT^(0+384)
 10909                           
 10910                           ;PS_2.c: 304: }
 10911  01A0  2A8B               	goto	i1l5214
 10912  01A1                     i1l5110:	
 10913                           
 10914                           ;PS_2.c: 305: else if(PS_2_Read_Data_Third == 0x14 )
 10915  01A1  3014               	movlw	20
 10916  01A2  0665               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 10917  01A3  0466               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 10918  01A4  1D03               	skipz
 10919  01A5  29A9               	goto	i1l5114
 10920                           
 10921                           ;PS_2.c: 306: {
 10922                           ;PS_2.c: 307: LControl = 0;
 10923  01A6  0021               	movlb	1	; select bank1
 10924  01A7  01CF               	clrf	_LControl^(0+128)
 10925                           
 10926                           ;PS_2.c: 308: }
 10927  01A8  2A8B               	goto	i1l5214
 10928  01A9                     i1l5114:	
 10929                           
 10930                           ;PS_2.c: 309: else if(PS_2_Read_Data_Third == 0x71 )
 10931  01A9  3071               	movlw	113
 10932  01AA  0023               	movlb	3	; select bank3
 10933  01AB  0665               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 10934  01AC  0466               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 10935  01AD  1D03               	skipz
 10936  01AE  2A8B               	goto	i1l5214
 10937                           
 10938                           ;PS_2.c: 310: {
 10939                           ;PS_2.c: 311: Delete = 0;
 10940  01AF  0021               	movlb	1	; select bank1
 10941  01B0  01CE               	clrf	_Delete^(0+128)
 10942                           
 10943                           ;PS_2.c: 312: }
 10944                           ;PS_2.c: 313: }
 10945                           ;PS_2.c: 314: }
 10946                           ;PS_2.c: 315: }
 10947  01B1  2A8B               	goto	i1l5214
 10948  01B2                     i1l5118:	
 10949                           
 10950                           ;PS_2.c: 316: else if(PS_2_Read_Data_Second)
 10951  01B2  0023               	movlb	3	; select bank3
 10952  01B3  0864               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
 10953  01B4  0463               	iorwf	_PS_2_Read_Data_Second^(0+384),w
 10954  01B5  1903               	skipnz
 10955  01B6  2A8B               	goto	i1l5214
 10956                           
 10957                           ;PS_2.c: 317: {
 10958                           ;PS_2.c: 319: if(PS_2_Read_Data_First == 0xF0)
 10959  01B7  30F0               	movlw	240
 10960  01B8  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 10961  01B9  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 10962  01BA  1D03               	skipz
 10963  01BB  2A36               	goto	i1l5182
 10964                           
 10965                           ;PS_2.c: 320: {
 10966                           ;PS_2.c: 322: if(PS_2_Read_Data_Second == 0x12)
 10967  01BC  3012               	movlw	18
 10968  01BD  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 10969  01BE  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 10970  01BF  1D03               	skipz
 10971  01C0  29C3               	goto	i1l5126
 10972                           
 10973                           ;PS_2.c: 323: {
 10974                           ;PS_2.c: 324: Right_Shift_Key =0;
 10975  01C1  01EE               	clrf	_Right_Shift_Key^(0+384)
 10976                           
 10977                           ;PS_2.c: 325: }
 10978  01C2  29D6               	goto	i1l5138
 10979  01C3                     i1l5126:	
 10980                           
 10981                           ;PS_2.c: 326: else if(PS_2_Read_Data_Second == 0x59)
 10982  01C3  3059               	movlw	89
 10983  01C4  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 10984  01C5  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 10985  01C6  1D03               	skipz
 10986  01C7  29CA               	goto	i1l5130
 10987                           
 10988                           ;PS_2.c: 327: {
 10989                           ;PS_2.c: 328: Left_Shift_Key =0;
 10990  01C8  01EA               	clrf	_Left_Shift_Key^(0+384)
 10991                           
 10992                           ;PS_2.c: 329: }
 10993  01C9  29D6               	goto	i1l5138
 10994  01CA                     i1l5130:	
 10995                           
 10996                           ;PS_2.c: 330: else if(PS_2_Read_Data_Second == 0x14)
 10997  01CA  3014               	movlw	20
 10998  01CB  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 10999  01CC  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11000  01CD  1D03               	skipz
 11001  01CE  29D1               	goto	i1l5134
 11002                           
 11003                           ;PS_2.c: 331: {
 11004                           ;PS_2.c: 332: RControl =0;
 11005  01CF  01ED               	clrf	_RControl^(0+384)
 11006                           
 11007                           ;PS_2.c: 333: }
 11008  01D0  29D6               	goto	i1l5138
 11009  01D1                     i1l5134:	
 11010                           
 11011                           ;PS_2.c: 334: else if(PS_2_Read_Data_Second == 0x11 )
 11012  01D1  3011               	movlw	17
 11013  01D2  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11014  01D3  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11015  01D4  1903               	btfsc	3,2
 11016                           
 11017                           ;PS_2.c: 335: {
 11018                           ;PS_2.c: 336: RALT =0;
 11019  01D5  01EC               	clrf	_RALT^(0+384)
 11020  01D6                     i1l5138:	
 11021                           
 11022                           ;PS_2.c: 337: }
 11023                           ;PS_2.c: 338: if(PS_2_Read_Data_Second == 0x59 || PS_2_Read_Data_Second == 0x12)
 11024  01D6  3059               	movlw	89
 11025  01D7  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11026  01D8  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11027  01D9  1903               	skipnz
 11028  01DA  29E0               	goto	i1l5142
 11029  01DB  3012               	movlw	18
 11030  01DC  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11031  01DD  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11032  01DE  1D03               	skipz
 11033  01DF  2A2E               	goto	i1l5178
 11034  01E0                     i1l5142:	
 11035                           
 11036                           ;PS_2.c: 339: {
 11037                           ;PS_2.c: 340: if(Right_Shift_Key == 0 && Left_Shift_Key == 0)
 11038  01E0  08EE               	movf	_Right_Shift_Key^(0+384),f
 11039  01E1  1D03               	skipz
 11040  01E2  2A8B               	goto	i1l5214
 11041  01E3  08EA               	movf	_Left_Shift_Key^(0+384),f
 11042  01E4  1D03               	skipz
 11043  01E5  2A8B               	goto	i1l5214
 11044                           
 11045                           ;PS_2.c: 341: {
 11046                           ;PS_2.c: 342: if(!Send_PS2(0xED))
 11047  01E6  30ED               	movlw	237
 11048  01E7  318E  2672  3181   	fcall	_Send_PS2
 11049  01EA  3800               	iorlw	0
 11050  01EB  1D03               	skipz
 11051  01EC  29F6               	goto	i1l5152
 11052                           
 11053                           ;PS_2.c: 343: {
 11054                           ;PS_2.c: 344: if(!Send_PS2(0x00))
 11055  01ED  3000               	movlw	0
 11056  01EE  318E  2672  3181   	fcall	_Send_PS2
 11057  01F1  3800               	iorlw	0
 11058  01F2  1D03               	skipz
 11059  01F3  29F6               	goto	i1l5152
 11060                           
 11061                           ;PS_2.c: 345: {
 11062                           ;PS_2.c: 346: Shift_Key = 0;
 11063  01F4  0023               	movlb	3	; select bank3
 11064  01F5  01EF               	clrf	_Shift_Key^(0+384)
 11065  01F6                     i1l5152:	
 11066                           
 11067                           ;PS_2.c: 347: }
 11068                           ;PS_2.c: 348: }
 11069                           ;PS_2.c: 349: if(Caps_Lock)
 11070  01F6  0023               	movlb	3	; select bank3
 11071  01F7  0868               	movf	_Caps_Lock^(0+384),w
 11072  01F8  1903               	btfsc	3,2
 11073  01F9  2A14               	goto	i1l5166
 11074                           
 11075                           ;PS_2.c: 350: {
 11076                           ;PS_2.c: 351: CapsCount=0;
 11077  01FA  01E7               	clrf	_CapsCount^(0+384)
 11078  01FB                     i1l5164:	
 11079                           ;PS_2.c: 352: while(CapsCount<10)
 11080                           
 11081  01FB  300A               	movlw	10
 11082  01FC  0267               	subwf	_CapsCount^(0+384),w
 11083  01FD  1803               	btfsc	3,0
 11084  01FE  2A8B               	goto	i1l5214
 11085                           
 11086                           ;PS_2.c: 353: {
 11087                           ;PS_2.c: 354: if(!Send_PS2(0xED))
 11088  01FF  30ED               	movlw	237
 11089  0200  318E  2672  3181   	fcall	_Send_PS2
 11090  0203  3800               	iorlw	0
 11091  0204  1D03               	skipz
 11092  0205  2A0D               	goto	i1l5162
 11093                           
 11094                           ;PS_2.c: 355: {
 11095                           ;PS_2.c: 356: if(!Send_PS2(0x04))
 11096  0206  3004               	movlw	4
 11097  0207  318E  2672  3181   	fcall	_Send_PS2
 11098  020A  3800               	iorlw	0
 11099  020B  1903               	btfsc	3,2
 11100  020C  2A8B               	goto	i1l5214
 11101  020D                     i1l5162:	
 11102                           ;PS_2.c: 357: {
 11103                           ;PS_2.c: 358: break;
 11104                           
 11105                           
 11106                           ;PS_2.c: 359: }
 11107                           ;PS_2.c: 360: }
 11108                           ;PS_2.c: 361: CapsCount++;
 11109  020D  3001               	movlw	1
 11110  020E  0021               	movlb	1	; select bank1
 11111  020F  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11112  0210  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11113  0211  0023               	movlb	3	; select bank3
 11114  0212  07E7               	addwf	_CapsCount^(0+384),f
 11115  0213  29FB               	goto	i1l5164
 11116  0214                     i1l5166:	
 11117                           ;PS_2.c: 362: }
 11118                           ;PS_2.c: 363: }
 11119                           
 11120                           
 11121                           ;PS_2.c: 364: else
 11122                           ;PS_2.c: 365: {
 11123                           ;PS_2.c: 366: CapsCount=0;
 11124  0214  01E7               	clrf	_CapsCount^(0+384)
 11125  0215                     i1l5176:	
 11126                           ;PS_2.c: 367: while(CapsCount<10)
 11127                           
 11128  0215  300A               	movlw	10
 11129  0216  0267               	subwf	_CapsCount^(0+384),w
 11130  0217  1803               	btfsc	3,0
 11131  0218  2A8B               	goto	i1l5214
 11132                           
 11133                           ;PS_2.c: 368: {
 11134                           ;PS_2.c: 369: if(!Send_PS2(0xED))
 11135  0219  30ED               	movlw	237
 11136  021A  318E  2672  3181   	fcall	_Send_PS2
 11137  021D  3800               	iorlw	0
 11138  021E  1D03               	skipz
 11139  021F  2A27               	goto	i1l5174
 11140                           
 11141                           ;PS_2.c: 370: {
 11142                           ;PS_2.c: 371: if(!Send_PS2(0x00))
 11143  0220  3000               	movlw	0
 11144  0221  318E  2672  3181   	fcall	_Send_PS2
 11145  0224  3800               	iorlw	0
 11146  0225  1903               	btfsc	3,2
 11147  0226  2A8B               	goto	i1l5214
 11148  0227                     i1l5174:	
 11149                           ;PS_2.c: 372: {
 11150                           ;PS_2.c: 373: break;
 11151                           
 11152                           
 11153                           ;PS_2.c: 374: }
 11154                           ;PS_2.c: 375: }
 11155                           ;PS_2.c: 376: CapsCount++;
 11156  0227  3001               	movlw	1
 11157  0228  0021               	movlb	1	; select bank1
 11158  0229  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11159  022A  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11160  022B  0023               	movlb	3	; select bank3
 11161  022C  07E7               	addwf	_CapsCount^(0+384),f
 11162  022D  2A15               	goto	i1l5176
 11163  022E                     i1l5178:	
 11164                           ;PS_2.c: 377: }
 11165                           ;PS_2.c: 378: }
 11166                           ;PS_2.c: 379: }
 11167                           ;PS_2.c: 380: }
 11168                           
 11169                           
 11170                           ;PS_2.c: 381: else if(PS_2_Read_Data_Second == 0x58)
 11171  022E  3058               	movlw	88
 11172  022F  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11173  0230  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11174  0231  1D03               	skipz
 11175  0232  2A8B               	goto	i1l5214
 11176                           
 11177                           ;PS_2.c: 382: {
 11178                           ;PS_2.c: 383: Caps_Lock_Key = 0;
 11179  0233  0021               	movlb	1	; select bank1
 11180  0234  01CC               	clrf	_Caps_Lock_Key^(0+128)
 11181                           
 11182                           ;PS_2.c: 384: }
 11183                           ;PS_2.c: 385: }
 11184  0235  2A8B               	goto	i1l5214
 11185  0236                     i1l5182:	
 11186                           
 11187                           ;PS_2.c: 386: else if(PS_2_Read_Data_First == 0xE0)
 11188  0236  30E0               	movlw	224
 11189  0237  0023               	movlb	3	; select bank3
 11190  0238  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11191  0239  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11192  023A  1D03               	skipz
 11193  023B  2A8B               	goto	i1l5214
 11194                           
 11195                           ;PS_2.c: 387: {
 11196                           ;PS_2.c: 389: if(PS_2_Read_Data_Second == 0x11 )
 11197  023C  3011               	movlw	17
 11198  023D  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11199  023E  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11200  023F  1D03               	skipz
 11201  0240  2A44               	goto	i1l5188
 11202                           
 11203                           ;PS_2.c: 390: {
 11204                           ;PS_2.c: 391: LALT = 1;
 11205  0241  01E9               	clrf	_LALT^(0+384)
 11206  0242  0AE9               	incf	_LALT^(0+384),f
 11207                           
 11208                           ;PS_2.c: 392: }
 11209  0243  2A56               	goto	i1l707
 11210  0244                     i1l5188:	
 11211                           
 11212                           ;PS_2.c: 393: else if(PS_2_Read_Data_Second == 0x14 )
 11213  0244  3014               	movlw	20
 11214  0245  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11215  0246  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11216  0247  1D03               	skipz
 11217  0248  2A4D               	goto	i1l5192
 11218                           
 11219                           ;PS_2.c: 394: {
 11220                           ;PS_2.c: 395: LControl = 1;
 11221  0249  0021               	movlb	1	; select bank1
 11222  024A  01CF               	clrf	_LControl^(0+128)
 11223  024B  0ACF               	incf	_LControl^(0+128),f
 11224                           
 11225                           ;PS_2.c: 396: }
 11226  024C  2A56               	goto	i1l707
 11227  024D                     i1l5192:	
 11228                           
 11229                           ;PS_2.c: 397: else if(PS_2_Read_Data_Second == 0x71 )
 11230  024D  3071               	movlw	113
 11231  024E  0023               	movlb	3	; select bank3
 11232  024F  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11233  0250  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11234  0251  1D03               	skipz
 11235  0252  2A56               	goto	i1l707
 11236                           
 11237                           ;PS_2.c: 398: {
 11238                           ;PS_2.c: 399: Delete = 1;
 11239  0253  0021               	movlb	1	; select bank1
 11240  0254  01CE               	clrf	_Delete^(0+128)
 11241  0255  0ACE               	incf	_Delete^(0+128),f
 11242  0256                     i1l707:	
 11243                           
 11244                           ;PS_2.c: 400: }
 11245                           ;PS_2.c: 401: if(((RControl || LControl) + (LALT || RALT) + Delete) != 3)
 11246  0256  0023               	movlb	3	; select bank3
 11247  0257  01DC               	clrf	_Process_PS2_ScanCode$850^(0+384)
 11248  0258  0ADC               	incf	_Process_PS2_ScanCode$850^(0+384),f
 11249  0259  08E9               	movf	_LALT^(0+384),f
 11250  025A  1D03               	skipz
 11251  025B  2A60               	goto	i1l5202
 11252  025C  08EC               	movf	_RALT^(0+384),f
 11253  025D  1D03               	skipz
 11254  025E  2A60               	goto	i1l5202
 11255  025F  01DC               	clrf	_Process_PS2_ScanCode$850^(0+384)
 11256  0260                     i1l5202:	
 11257  0260  01DD               	clrf	_Process_PS2_ScanCode$851^(0+384)
 11258  0261  0ADD               	incf	_Process_PS2_ScanCode$851^(0+384),f
 11259  0262  08ED               	movf	_RControl^(0+384),f
 11260  0263  1D03               	skipz
 11261  0264  2A6B               	goto	i1l5210
 11262  0265  0021               	movlb	1	; select bank1
 11263  0266  08CF               	movf	_LControl^(0+128),f
 11264  0267  1D03               	skipz
 11265  0268  2A6B               	goto	i1l5210
 11266  0269  0023               	movlb	3	; select bank3
 11267  026A  01DD               	clrf	_Process_PS2_ScanCode$851^(0+384)
 11268  026B                     i1l5210:	
 11269  026B  0021               	movlb	1	; select bank1
 11270  026C  084E               	movf	_Delete^(0+128),w
 11271  026D  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11272  026E  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11273  026F  0023               	movlb	3	; select bank3
 11274  0270  085D               	movf	_Process_PS2_ScanCode$851^(0+384),w
 11275  0271  075C               	addwf	_Process_PS2_ScanCode$850^(0+384),w
 11276  0272  0021               	movlb	1	; select bank1
 11277  0273  00BE               	movwf	(??_Process_PS2_ScanCode+2)^(0+128)
 11278  0274  01BF               	clrf	((??_Process_PS2_ScanCode+2)^(0+128)+1)
 11279  0275  0DBF               	rlf	(??_Process_PS2_ScanCode+3)^(0+128),f
 11280  0276  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11281  0277  073E               	addwf	(??_Process_PS2_ScanCode+2)^(0+128),w
 11282  0278  00C0               	movwf	(??_Process_PS2_ScanCode+4)^(0+128)
 11283  0279  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11284  027A  3D3F               	addwfc	(??_Process_PS2_ScanCode+3)^(0+128),w
 11285  027B  00C1               	movwf	(??_Process_PS2_ScanCode+5)^(0+128)
 11286  027C  3003               	movlw	3
 11287  027D  0640               	xorwf	(??_Process_PS2_ScanCode+4)^(0+128),w
 11288  027E  0441               	iorwf	(??_Process_PS2_ScanCode+5)^(0+128),w
 11289  027F  1903               	skipnz
 11290  0280  2A8B               	goto	i1l5214
 11291                           
 11292                           ;PS_2.c: 402: {
 11293                           ;PS_2.c: 404: temp = Decode_Scan_Code_FunctionE0(PS_2_Read_Data_Second);
 11294  0281  0023               	movlb	3	; select bank3
 11295  0282  0863               	movf	_PS_2_Read_Data_Second^(0+384),w
 11296  0283  3199  21C5  3181   	fcall	_Decode_Scan_Code_FunctionE0
 11297  0286  0021               	movlb	1	; select bank1
 11298  0287  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11299  0288  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11300  0289  0023               	movlb	3	; select bank3
 11301  028A  00E0               	movwf	Process_PS2_ScanCode@temp^(0+384)
 11302  028B                     i1l5214:	
 11303                           
 11304                           ;PS_2.c: 405: }
 11305                           ;PS_2.c: 406: }
 11306                           ;PS_2.c: 407: }
 11307                           ;PS_2.c: 408: if(PS_2_Read_Data_First != 0 && PS_2_Read_Data_Second == 0 &&
 11308                           ;PS_2.c: 409: PS_2_Read_Data_Third == 0)
 11309  028B  0023               	movlb	3	; select bank3
 11310  028C  0862               	movf	(_PS_2_Read_Data_First+1)^(0+384),w
 11311  028D  0461               	iorwf	_PS_2_Read_Data_First^(0+384),w
 11312  028E  1903               	skipnz
 11313  028F  2BDA               	goto	i1l5362
 11314  0290  0864               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11315  0291  0463               	iorwf	_PS_2_Read_Data_Second^(0+384),w
 11316  0292  1D03               	skipz
 11317  0293  2BDA               	goto	i1l5362
 11318  0294  0866               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11319  0295  0465               	iorwf	_PS_2_Read_Data_Third^(0+384),w
 11320  0296  1D03               	skipz
 11321  0297  2BDA               	goto	i1l5362
 11322                           
 11323                           ;PS_2.c: 410: {
 11324                           ;PS_2.c: 412: if(PS_2_Read_Data_First == 0x12)
 11325  0298  3012               	movlw	18
 11326  0299  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11327  029A  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11328  029B  1D03               	skipz
 11329  029C  2AA0               	goto	i1l5224
 11330                           
 11331                           ;PS_2.c: 413: {
 11332                           ;PS_2.c: 414: Right_Shift_Key = 1;
 11333  029D  01EE               	clrf	_Right_Shift_Key^(0+384)
 11334  029E  0AEE               	incf	_Right_Shift_Key^(0+384),f
 11335                           
 11336                           ;PS_2.c: 415: }
 11337  029F  2AA7               	goto	i1l5228
 11338  02A0                     i1l5224:	
 11339                           
 11340                           ;PS_2.c: 416: else if(PS_2_Read_Data_First == 0x59)
 11341  02A0  3059               	movlw	89
 11342  02A1  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11343  02A2  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11344  02A3  1D03               	skipz
 11345  02A4  2AA7               	goto	i1l5228
 11346                           
 11347                           ;PS_2.c: 417: {
 11348                           ;PS_2.c: 418: Left_Shift_Key = 1;
 11349  02A5  01EA               	clrf	_Left_Shift_Key^(0+384)
 11350  02A6  0AEA               	incf	_Left_Shift_Key^(0+384),f
 11351  02A7                     i1l5228:	
 11352                           
 11353                           ;PS_2.c: 419: }
 11354                           ;PS_2.c: 420: if((Right_Shift_Key == 1 && Right_Shift_Key_old == 0) || (Left_Shift_Key =
      +                          = 1 && Left_Shift_Key_old == 0))
 11355  02A7  086E               	movf	_Right_Shift_Key^(0+384),w
 11356  02A8  3A01               	xorlw	1
 11357  02A9  1D03               	skipz
 11358  02AA  2AAF               	goto	i1l5232
 11359  02AB  0021               	movlb	1	; select bank1
 11360  02AC  0854               	movf	_Right_Shift_Key_old^(0+128),w
 11361  02AD  1903               	btfsc	3,2
 11362  02AE  2AB8               	goto	i1l5236
 11363  02AF                     i1l5232:	
 11364  02AF  0023               	movlb	3	; select bank3
 11365  02B0  086A               	movf	_Left_Shift_Key^(0+384),w
 11366  02B1  3A01               	xorlw	1
 11367  02B2  1D03               	skipz
 11368  02B3  2AFA               	goto	i1l5264
 11369  02B4  0021               	movlb	1	; select bank1
 11370  02B5  08D0               	movf	_Left_Shift_Key_old^(0+128),f
 11371  02B6  1D03               	skipz
 11372  02B7  2AFA               	goto	i1l5264
 11373  02B8                     i1l5236:	
 11374                           
 11375                           ;PS_2.c: 421: {
 11376                           ;PS_2.c: 423: if(!Send_PS2(0xED))
 11377  02B8  30ED               	movlw	237
 11378  02B9  318E  2672  3181   	fcall	_Send_PS2
 11379  02BC  3800               	iorlw	0
 11380  02BD  1D03               	skipz
 11381  02BE  2AFA               	goto	i1l5264
 11382                           
 11383                           ;PS_2.c: 424: {
 11384                           ;PS_2.c: 425: if(Caps_Lock)
 11385  02BF  0023               	movlb	3	; select bank3
 11386  02C0  0868               	movf	_Caps_Lock^(0+384),w
 11387  02C1  1903               	btfsc	3,2
 11388  02C2  2ADD               	goto	i1l5252
 11389                           
 11390                           ;PS_2.c: 426: {
 11391                           ;PS_2.c: 427: CapsCount=0;
 11392  02C3  01E7               	clrf	_CapsCount^(0+384)
 11393  02C4                     i1l5250:	
 11394                           ;PS_2.c: 428: while(CapsCount<10)
 11395                           
 11396  02C4  300A               	movlw	10
 11397  02C5  0267               	subwf	_CapsCount^(0+384),w
 11398  02C6  1803               	btfsc	3,0
 11399  02C7  2AFA               	goto	i1l5264
 11400                           
 11401                           ;PS_2.c: 429: {
 11402                           ;PS_2.c: 430: if(!Send_PS2(0xED))
 11403  02C8  30ED               	movlw	237
 11404  02C9  318E  2672  3181   	fcall	_Send_PS2
 11405  02CC  3800               	iorlw	0
 11406  02CD  1D03               	skipz
 11407  02CE  2AD6               	goto	i1l5248
 11408                           
 11409                           ;PS_2.c: 431: {
 11410                           ;PS_2.c: 432: if(!Send_PS2(0x05))
 11411  02CF  3005               	movlw	5
 11412  02D0  318E  2672  3181   	fcall	_Send_PS2
 11413  02D3  3800               	iorlw	0
 11414  02D4  1903               	btfsc	3,2
 11415  02D5  2AF7               	goto	i1l5258
 11416  02D6                     i1l5248:	
 11417                           ;PS_2.c: 435: break;
 11418                           
 11419                           ;PS_2.c: 433: {
 11420                           ;PS_2.c: 434: Shift_Key = 1;
 11421                           
 11422                           
 11423                           ;PS_2.c: 436: }
 11424                           ;PS_2.c: 437: }
 11425                           ;PS_2.c: 438: CapsCount++;
 11426  02D6  3001               	movlw	1
 11427  02D7  0021               	movlb	1	; select bank1
 11428  02D8  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11429  02D9  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11430  02DA  0023               	movlb	3	; select bank3
 11431  02DB  07E7               	addwf	_CapsCount^(0+384),f
 11432  02DC  2AC4               	goto	i1l5250
 11433  02DD                     i1l5252:	
 11434                           ;PS_2.c: 439: }
 11435                           ;PS_2.c: 440: }
 11436                           
 11437                           
 11438                           ;PS_2.c: 441: else
 11439                           ;PS_2.c: 442: {
 11440                           ;PS_2.c: 443: CapsCount=0;
 11441  02DD  01E7               	clrf	_CapsCount^(0+384)
 11442                           
 11443                           ;PS_2.c: 444: while(CapsCount<10)
 11444  02DE  2AE5               	goto	i1l5262
 11445  02DF                     i1l5260:	
 11446                           ;PS_2.c: 451: break;
 11447                           
 11448                           
 11449                           ;PS_2.c: 452: }
 11450                           ;PS_2.c: 453: }
 11451                           ;PS_2.c: 454: CapsCount++;
 11452  02DF  3001               	movlw	1
 11453  02E0  0021               	movlb	1	; select bank1
 11454  02E1  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11455  02E2  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11456  02E3  0023               	movlb	3	; select bank3
 11457  02E4  07E7               	addwf	_CapsCount^(0+384),f
 11458  02E5                     i1l5262:	
 11459  02E5  300A               	movlw	10
 11460  02E6  0267               	subwf	_CapsCount^(0+384),w
 11461  02E7  1803               	btfsc	3,0
 11462  02E8  2AFA               	goto	i1l5264
 11463                           
 11464                           ;PS_2.c: 445: {
 11465                           ;PS_2.c: 446: if(!Send_PS2(0xED))
 11466  02E9  30ED               	movlw	237
 11467  02EA  318E  2672  3181   	fcall	_Send_PS2
 11468  02ED  3800               	iorlw	0
 11469  02EE  1D03               	skipz
 11470  02EF  2ADF               	goto	i1l5260
 11471                           
 11472                           ;PS_2.c: 447: {
 11473                           ;PS_2.c: 448: if(!Send_PS2(0x01))
 11474  02F0  3001               	movlw	1
 11475  02F1  318E  2672  3181   	fcall	_Send_PS2
 11476  02F4  3800               	iorlw	0
 11477  02F5  1D03               	skipz
 11478  02F6  2ADF               	goto	i1l5260
 11479  02F7                     i1l5258:	
 11480                           
 11481                           ;PS_2.c: 449: {
 11482                           ;PS_2.c: 450: Shift_Key = 1;
 11483  02F7  0023               	movlb	3	; select bank3
 11484  02F8  01EF               	clrf	_Shift_Key^(0+384)
 11485  02F9  0AEF               	incf	_Shift_Key^(0+384),f
 11486  02FA                     i1l5264:	
 11487                           
 11488                           ;PS_2.c: 455: }
 11489                           ;PS_2.c: 456: }
 11490                           ;PS_2.c: 457: }
 11491                           ;PS_2.c: 458: }
 11492                           ;PS_2.c: 459: if(PS_2_Read_Data_First == 0x14 )
 11493  02FA  3014               	movlw	20
 11494  02FB  0023               	movlb	3	; select bank3
 11495  02FC  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11496  02FD  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11497  02FE  1D03               	skipz
 11498  02FF  2B03               	goto	i1l5268
 11499                           
 11500                           ;PS_2.c: 460: {
 11501                           ;PS_2.c: 461: RControl = 1;
 11502  0300  01ED               	clrf	_RControl^(0+384)
 11503  0301  0AED               	incf	_RControl^(0+384),f
 11504                           
 11505                           ;PS_2.c: 462: }
 11506  0302  2BDA               	goto	i1l5362
 11507  0303                     i1l5268:	
 11508                           
 11509                           ;PS_2.c: 463: else if(PS_2_Read_Data_First == 0x11 )
 11510  0303  3011               	movlw	17
 11511  0304  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11512  0305  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11513  0306  1D03               	skipz
 11514  0307  2B0B               	goto	i1l5272
 11515                           
 11516                           ;PS_2.c: 464: {
 11517                           ;PS_2.c: 465: RALT = 1;
 11518  0308  01EC               	clrf	_RALT^(0+384)
 11519  0309  0AEC               	incf	_RALT^(0+384),f
 11520                           
 11521                           ;PS_2.c: 466: }
 11522  030A  2BDA               	goto	i1l5362
 11523  030B                     i1l5272:	
 11524                           
 11525                           ;PS_2.c: 467: else if(PS_2_Read_Data_First == 0xEE )
 11526  030B  30EE               	movlw	238
 11527  030C  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11528  030D  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11529  030E  1D03               	skipz
 11530  030F  2B14               	goto	i1l5276
 11531                           
 11532                           ;PS_2.c: 468: {
 11533                           ;PS_2.c: 469: ECHO = 1;
 11534  0310  0024               	movlb	4	; select bank4
 11535  0311  01DF               	clrf	_ECHO^(0+512)
 11536  0312  0ADF               	incf	_ECHO^(0+512),f
 11537                           
 11538                           ;PS_2.c: 470: }
 11539  0313  2BDA               	goto	i1l5362
 11540  0314                     i1l5276:	
 11541                           
 11542                           ;PS_2.c: 471: else if(PS_2_Read_Data_First == 0x58)
 11543  0314  3058               	movlw	88
 11544  0315  0023               	movlb	3	; select bank3
 11545  0316  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11546  0317  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11547  0318  1D03               	skipz
 11548  0319  2B99               	goto	i1l5336
 11549                           
 11550                           ;PS_2.c: 472: {
 11551                           ;PS_2.c: 473: Caps_Lock_Key = 1;
 11552  031A  0021               	movlb	1	; select bank1
 11553  031B  01CC               	clrf	_Caps_Lock_Key^(0+128)
 11554  031C  0ACC               	incf	_Caps_Lock_Key^(0+128),f
 11555                           
 11556                           ;PS_2.c: 474: if(Caps_Lock_Key_old == 0)
 11557  031D  08CD               	movf	_Caps_Lock_Key_old^(0+128),f
 11558  031E  1D03               	skipz
 11559  031F  2BDA               	goto	i1l5362
 11560                           
 11561                           ;PS_2.c: 475: {
 11562                           ;PS_2.c: 476: if(Caps_Lock)
 11563  0320  0023               	movlb	3	; select bank3
 11564  0321  0868               	movf	_Caps_Lock^(0+384),w
 11565  0322  1903               	btfsc	3,2
 11566  0323  2B5E               	goto	i1l5310
 11567                           
 11568                           ;PS_2.c: 477: {
 11569                           ;PS_2.c: 478: if(Shift_Key)
 11570  0324  086F               	movf	_Shift_Key^(0+384),w
 11571  0325  1903               	btfsc	3,2
 11572  0326  2B41               	goto	i1l5298
 11573                           
 11574                           ;PS_2.c: 479: {
 11575                           ;PS_2.c: 480: CapsCount=0;
 11576  0327  01E7               	clrf	_CapsCount^(0+384)
 11577  0328                     i1l5296:	
 11578                           ;PS_2.c: 481: while(CapsCount<10)
 11579                           
 11580  0328  300A               	movlw	10
 11581  0329  0267               	subwf	_CapsCount^(0+384),w
 11582  032A  1803               	btfsc	3,0
 11583  032B  2BDA               	goto	i1l5362
 11584                           
 11585                           ;PS_2.c: 482: {
 11586                           ;PS_2.c: 483: if(!Send_PS2(0xED))
 11587  032C  30ED               	movlw	237
 11588  032D  318E  2672  3181   	fcall	_Send_PS2
 11589  0330  3800               	iorlw	0
 11590  0331  1D03               	skipz
 11591  0332  2B3A               	goto	i1l5294
 11592                           
 11593                           ;PS_2.c: 484: {
 11594                           ;PS_2.c: 485: if(!Send_PS2(0x01))
 11595  0333  3001               	movlw	1
 11596  0334  318E  2672  3181   	fcall	_Send_PS2
 11597  0337  3800               	iorlw	0
 11598  0338  1903               	btfsc	3,2
 11599  0339  2B54               	goto	i1l5304
 11600  033A                     i1l5294:	
 11601                           ;PS_2.c: 488: break;
 11602                           
 11603                           ;PS_2.c: 486: {
 11604                           ;PS_2.c: 487: Caps_Lock =0;
 11605                           
 11606                           
 11607                           ;PS_2.c: 489: }
 11608                           ;PS_2.c: 490: }
 11609                           ;PS_2.c: 491: CapsCount++;
 11610  033A  3001               	movlw	1
 11611  033B  0021               	movlb	1	; select bank1
 11612  033C  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11613  033D  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11614  033E  0023               	movlb	3	; select bank3
 11615  033F  07E7               	addwf	_CapsCount^(0+384),f
 11616  0340  2B28               	goto	i1l5296
 11617  0341                     i1l5298:	
 11618                           ;PS_2.c: 492: }
 11619                           ;PS_2.c: 493: }
 11620                           
 11621                           
 11622                           ;PS_2.c: 494: else
 11623                           ;PS_2.c: 495: {
 11624                           ;PS_2.c: 496: CapsCount=0;
 11625  0341  01E7               	clrf	_CapsCount^(0+384)
 11626  0342                     i1l5308:	
 11627                           ;PS_2.c: 497: while(CapsCount<10)
 11628                           
 11629  0342  300A               	movlw	10
 11630  0343  0267               	subwf	_CapsCount^(0+384),w
 11631  0344  1803               	btfsc	3,0
 11632  0345  2BDA               	goto	i1l5362
 11633                           
 11634                           ;PS_2.c: 498: {
 11635                           ;PS_2.c: 499: if(!Send_PS2(0xED))
 11636  0346  30ED               	movlw	237
 11637  0347  318E  2672  3181   	fcall	_Send_PS2
 11638  034A  3800               	iorlw	0
 11639  034B  1D03               	skipz
 11640  034C  2B57               	goto	i1l5306
 11641                           
 11642                           ;PS_2.c: 500: {
 11643                           ;PS_2.c: 501: if(!Send_PS2(0x00))
 11644  034D  3000               	movlw	0
 11645  034E  318E  2672  3181   	fcall	_Send_PS2
 11646  0351  3800               	iorlw	0
 11647  0352  1D03               	skipz
 11648  0353  2B57               	goto	i1l5306
 11649  0354                     i1l5304:	
 11650                           
 11651                           ;PS_2.c: 502: {
 11652                           ;PS_2.c: 503: Caps_Lock =0;
 11653  0354  0023               	movlb	3	; select bank3
 11654  0355  01E8               	clrf	_Caps_Lock^(0+384)
 11655                           
 11656                           ;PS_2.c: 504: break;
 11657  0356  2BDA               	goto	i1l5362
 11658  0357                     i1l5306:	
 11659                           
 11660                           ;PS_2.c: 505: }
 11661                           ;PS_2.c: 506: }
 11662                           ;PS_2.c: 507: CapsCount++;
 11663  0357  3001               	movlw	1
 11664  0358  0021               	movlb	1	; select bank1
 11665  0359  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11666  035A  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11667  035B  0023               	movlb	3	; select bank3
 11668  035C  07E7               	addwf	_CapsCount^(0+384),f
 11669  035D  2B42               	goto	i1l5308
 11670  035E                     i1l5310:	
 11671                           ;PS_2.c: 508: }
 11672                           ;PS_2.c: 509: }
 11673                           ;PS_2.c: 510: }
 11674                           
 11675                           
 11676                           ;PS_2.c: 511: else
 11677                           ;PS_2.c: 512: {
 11678                           ;PS_2.c: 513: if(Shift_Key)
 11679  035E  086F               	movf	_Shift_Key^(0+384),w
 11680  035F  1903               	btfsc	3,2
 11681  0360  2B7B               	goto	i1l5324
 11682                           
 11683                           ;PS_2.c: 514: {
 11684                           ;PS_2.c: 515: CapsCount=0;
 11685  0361  01E7               	clrf	_CapsCount^(0+384)
 11686  0362                     i1l5322:	
 11687                           ;PS_2.c: 516: while(CapsCount<10)
 11688                           
 11689  0362  300A               	movlw	10
 11690  0363  0267               	subwf	_CapsCount^(0+384),w
 11691  0364  1803               	btfsc	3,0
 11692  0365  2BDA               	goto	i1l5362
 11693                           
 11694                           ;PS_2.c: 517: {
 11695                           ;PS_2.c: 518: if(!Send_PS2(0xED))
 11696  0366  30ED               	movlw	237
 11697  0367  318E  2672  3181   	fcall	_Send_PS2
 11698  036A  3800               	iorlw	0
 11699  036B  1D03               	skipz
 11700  036C  2B74               	goto	i1l5320
 11701                           
 11702                           ;PS_2.c: 519: {
 11703                           ;PS_2.c: 520: if(!Send_PS2(0x05))
 11704  036D  3005               	movlw	5
 11705  036E  318E  2672  3181   	fcall	_Send_PS2
 11706  0371  3800               	iorlw	0
 11707  0372  1903               	btfsc	3,2
 11708  0373  2B8E               	goto	i1l5330
 11709  0374                     i1l5320:	
 11710                           ;PS_2.c: 523: break;
 11711                           
 11712                           ;PS_2.c: 521: {
 11713                           ;PS_2.c: 522: Caps_Lock =1;
 11714                           
 11715                           
 11716                           ;PS_2.c: 524: }
 11717                           ;PS_2.c: 525: }
 11718                           ;PS_2.c: 526: CapsCount++;
 11719  0374  3001               	movlw	1
 11720  0375  0021               	movlb	1	; select bank1
 11721  0376  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11722  0377  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11723  0378  0023               	movlb	3	; select bank3
 11724  0379  07E7               	addwf	_CapsCount^(0+384),f
 11725  037A  2B62               	goto	i1l5322
 11726  037B                     i1l5324:	
 11727                           ;PS_2.c: 527: }
 11728                           ;PS_2.c: 528: }
 11729                           
 11730                           
 11731                           ;PS_2.c: 529: else
 11732                           ;PS_2.c: 530: {
 11733                           ;PS_2.c: 531: CapsCount=0;
 11734  037B  01E7               	clrf	_CapsCount^(0+384)
 11735  037C                     i1l5334:	
 11736                           ;PS_2.c: 532: while(CapsCount<10)
 11737                           
 11738  037C  300A               	movlw	10
 11739  037D  0267               	subwf	_CapsCount^(0+384),w
 11740  037E  1803               	btfsc	3,0
 11741  037F  2BDA               	goto	i1l5362
 11742                           
 11743                           ;PS_2.c: 533: {
 11744                           ;PS_2.c: 534: if(!Send_PS2(0xED))
 11745  0380  30ED               	movlw	237
 11746  0381  318E  2672  3181   	fcall	_Send_PS2
 11747  0384  3800               	iorlw	0
 11748  0385  1D03               	skipz
 11749  0386  2B92               	goto	i1l5332
 11750                           
 11751                           ;PS_2.c: 535: {
 11752                           ;PS_2.c: 536: if(!Send_PS2(0x04))
 11753  0387  3004               	movlw	4
 11754  0388  318E  2672  3181   	fcall	_Send_PS2
 11755  038B  3800               	iorlw	0
 11756  038C  1D03               	skipz
 11757  038D  2B92               	goto	i1l5332
 11758  038E                     i1l5330:	
 11759                           
 11760                           ;PS_2.c: 537: {
 11761                           ;PS_2.c: 538: Caps_Lock =1;
 11762  038E  0023               	movlb	3	; select bank3
 11763  038F  01E8               	clrf	_Caps_Lock^(0+384)
 11764  0390  0AE8               	incf	_Caps_Lock^(0+384),f
 11765                           
 11766                           ;PS_2.c: 539: break;
 11767  0391  2BDA               	goto	i1l5362
 11768  0392                     i1l5332:	
 11769                           
 11770                           ;PS_2.c: 540: }
 11771                           ;PS_2.c: 541: }
 11772                           ;PS_2.c: 542: CapsCount++;
 11773  0392  3001               	movlw	1
 11774  0393  0021               	movlb	1	; select bank1
 11775  0394  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11776  0395  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11777  0396  0023               	movlb	3	; select bank3
 11778  0397  07E7               	addwf	_CapsCount^(0+384),f
 11779  0398  2B7C               	goto	i1l5334
 11780  0399                     i1l5336:	
 11781                           ;PS_2.c: 543: }
 11782                           ;PS_2.c: 544: }
 11783                           ;PS_2.c: 545: }
 11784                           ;PS_2.c: 546: }
 11785                           ;PS_2.c: 548: }
 11786                           
 11787                           
 11788                           ;PS_2.c: 549: else
 11789                           ;PS_2.c: 550: {
 11790                           ;PS_2.c: 551: if(Shift_Key ==1)
 11791  0399  086F               	movf	_Shift_Key^(0+384),w
 11792  039A  3A01               	xorlw	1
 11793  039B  1D03               	skipz
 11794  039C  2BB8               	goto	i1l5348
 11795                           
 11796                           ;PS_2.c: 552: {
 11797                           ;PS_2.c: 554: temp = Decode_Scan_Code_Shift(PS_2_Read_Data_First);
 11798  039D  0861               	movf	_PS_2_Read_Data_First^(0+384),w
 11799  039E  3199  21D7  3181   	fcall	_Decode_Scan_Code_Shift
 11800  03A1  0021               	movlb	1	; select bank1
 11801  03A2  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11802  03A3  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11803  03A4  0023               	movlb	3	; select bank3
 11804  03A5  00E0               	movwf	Process_PS2_ScanCode@temp^(0+384)
 11805                           
 11806                           ;PS_2.c: 555: if(Caps_Lock)
 11807  03A6  0868               	movf	_Caps_Lock^(0+384),w
 11808  03A7  1903               	btfsc	3,2
 11809  03A8  2BCE               	goto	i1l5358
 11810                           
 11811                           ;PS_2.c: 556: {
 11812                           ;PS_2.c: 558: if(temp >= 'A' && temp <= 'Z')
 11813  03A9  3041               	movlw	65
 11814  03AA  0260               	subwf	Process_PS2_ScanCode@temp^(0+384),w
 11815  03AB  1C03               	skipc
 11816  03AC  2BCE               	goto	i1l5358
 11817  03AD  305B               	movlw	91
 11818  03AE  0260               	subwf	Process_PS2_ScanCode@temp^(0+384),w
 11819  03AF  1803               	skipnc
 11820  03B0  2BCE               	goto	i1l5358
 11821                           
 11822                           ;PS_2.c: 559: {
 11823                           ;PS_2.c: 560: temp += 32;
 11824  03B1  3020               	movlw	32
 11825  03B2  0021               	movlb	1	; select bank1
 11826  03B3  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11827  03B4  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11828  03B5  0023               	movlb	3	; select bank3
 11829  03B6  07E0               	addwf	Process_PS2_ScanCode@temp^(0+384),f
 11830                           
 11831                           ;PS_2.c: 561: }
 11832                           ;PS_2.c: 562: }
 11833                           ;PS_2.c: 563: }
 11834  03B7  2BCE               	goto	i1l5358
 11835  03B8                     i1l5348:	
 11836                           
 11837                           ;PS_2.c: 564: else
 11838                           ;PS_2.c: 565: {
 11839                           ;PS_2.c: 566: temp = Decode_Scan_Code(PS_2_Read_Data_First);
 11840  03B8  0861               	movf	_PS_2_Read_Data_First^(0+384),w
 11841  03B9  3199  21B3  3181   	fcall	_Decode_Scan_Code
 11842  03BC  0021               	movlb	1	; select bank1
 11843  03BD  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11844  03BE  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11845  03BF  0023               	movlb	3	; select bank3
 11846  03C0  00E0               	movwf	Process_PS2_ScanCode@temp^(0+384)
 11847                           
 11848                           ;PS_2.c: 567: if(Caps_Lock)
 11849  03C1  0868               	movf	_Caps_Lock^(0+384),w
 11850  03C2  1903               	btfsc	3,2
 11851  03C3  2BCE               	goto	i1l5358
 11852                           
 11853                           ;PS_2.c: 568: {
 11854                           ;PS_2.c: 570: if(temp >= 'a' && temp <= 'z')
 11855  03C4  3061               	movlw	97
 11856  03C5  0260               	subwf	Process_PS2_ScanCode@temp^(0+384),w
 11857  03C6  1C03               	skipc
 11858  03C7  2BCE               	goto	i1l5358
 11859  03C8  307B               	movlw	123
 11860  03C9  0260               	subwf	Process_PS2_ScanCode@temp^(0+384),w
 11861  03CA  1803               	skipnc
 11862  03CB  2BCE               	goto	i1l5358
 11863                           
 11864                           ;PS_2.c: 571: {
 11865                           ;PS_2.c: 572: temp -= 32;
 11866  03CC  3020               	movlw	32
 11867  03CD  02E0               	subwf	Process_PS2_ScanCode@temp^(0+384),f
 11868  03CE                     i1l5358:	
 11869                           
 11870                           ;PS_2.c: 573: }
 11871                           ;PS_2.c: 574: }
 11872                           ;PS_2.c: 575: }
 11873                           ;PS_2.c: 576: if(!temp)
 11874  03CE  08E0               	movf	Process_PS2_ScanCode@temp^(0+384),f
 11875  03CF  1D03               	skipz
 11876  03D0  2BDA               	goto	i1l5362
 11877                           
 11878                           ;PS_2.c: 577: {
 11879                           ;PS_2.c: 579: temp = Decode_Scan_Code_Function(PS_2_Read_Data_First);
 11880  03D1  0861               	movf	_PS_2_Read_Data_First^(0+384),w
 11881  03D2  3199  21A3  3181   	fcall	_Decode_Scan_Code_Function
 11882  03D5  0021               	movlb	1	; select bank1
 11883  03D6  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11884  03D7  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11885  03D8  0023               	movlb	3	; select bank3
 11886  03D9  00E0               	movwf	Process_PS2_ScanCode@temp^(0+384)
 11887  03DA                     i1l5362:	
 11888                           
 11889                           ;PS_2.c: 580: }
 11890                           ;PS_2.c: 581: }
 11891                           ;PS_2.c: 582: }
 11892                           ;PS_2.c: 584: if(((RControl || LControl) + (LALT || RALT) + Delete) == 3)
 11893  03DA  0023               	movlb	3	; select bank3
 11894  03DB  01DE               	clrf	_Process_PS2_ScanCode$852^(0+384)
 11895  03DC  0ADE               	incf	_Process_PS2_ScanCode$852^(0+384),f
 11896  03DD  08E9               	movf	_LALT^(0+384),f
 11897  03DE  1D03               	skipz
 11898  03DF  2BE4               	goto	i1l5370
 11899  03E0  08EC               	movf	_RALT^(0+384),f
 11900  03E1  1D03               	skipz
 11901  03E2  2BE4               	goto	i1l5370
 11902  03E3  01DE               	clrf	_Process_PS2_ScanCode$852^(0+384)
 11903  03E4                     i1l5370:	
 11904  03E4  01DF               	clrf	_Process_PS2_ScanCode$853^(0+384)
 11905  03E5  0ADF               	incf	_Process_PS2_ScanCode$853^(0+384),f
 11906  03E6  08ED               	movf	_RControl^(0+384),f
 11907  03E7  1D03               	skipz
 11908  03E8  2BEF               	goto	i1l5378
 11909  03E9  0021               	movlb	1	; select bank1
 11910  03EA  08CF               	movf	_LControl^(0+128),f
 11911  03EB  1D03               	skipz
 11912  03EC  2BEF               	goto	i1l5378
 11913  03ED  0023               	movlb	3	; select bank3
 11914  03EE  01DF               	clrf	_Process_PS2_ScanCode$853^(0+384)
 11915  03EF                     i1l5378:	
 11916  03EF  0021               	movlb	1	; select bank1
 11917  03F0  084E               	movf	_Delete^(0+128),w
 11918  03F1  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11919  03F2  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11920  03F3  0023               	movlb	3	; select bank3
 11921  03F4  085F               	movf	_Process_PS2_ScanCode$853^(0+384),w
 11922  03F5  075E               	addwf	_Process_PS2_ScanCode$852^(0+384),w
 11923  03F6  0021               	movlb	1	; select bank1
 11924  03F7  00BE               	movwf	(??_Process_PS2_ScanCode+2)^(0+128)
 11925  03F8  01BF               	clrf	((??_Process_PS2_ScanCode+2)^(0+128)+1)
 11926  03F9  0DBF               	rlf	(??_Process_PS2_ScanCode+3)^(0+128),f
 11927  03FA  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11928  03FB  073E               	addwf	(??_Process_PS2_ScanCode+2)^(0+128),w
 11929  03FC  00C0               	movwf	(??_Process_PS2_ScanCode+4)^(0+128)
 11930  03FD  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11931  03FE  3D3F               	addwfc	(??_Process_PS2_ScanCode+3)^(0+128),w
 11932  03FF  00C1               	movwf	(??_Process_PS2_ScanCode+5)^(0+128)
 11933  0400  3003               	movlw	3
 11934  0401  0640               	xorwf	(??_Process_PS2_ScanCode+4)^(0+128),w
 11935  0402  0441               	iorwf	(??_Process_PS2_ScanCode+5)^(0+128),w
 11936  0403  1D03               	skipz
 11937  0404  2C87               	goto	i1l5422
 11938                           
 11939                           ;PS_2.c: 585: {
 11940                           ;PS_2.c: 587: UARTstringWAIT("\r\n");
 11941  0405  3041               	movlw	low ((STR_15+16)| (0+32768))
 11942  0406  0020               	movlb	0	; select bank0
 11943  0407  00A1               	movwf	i1UARTstringWAIT@data
 11944  0408  308A               	movlw	high ((STR_15+16)| (0+32768))
 11945  0409  00A2               	movwf	i1UARTstringWAIT@data+1
 11946  040A  319B  23C0  3181   	fcall	i1_UARTstringWAIT
 11947                           
 11948                           ;PS_2.c: 588: delayUS(10000);
 11949  040D  3000               	movlw	0
 11950  040E  00F3               	movwf	i1delayUS@US+3
 11951  040F  3000               	movlw	0
 11952  0410  00F2               	movwf	i1delayUS@US+2
 11953  0411  3027               	movlw	39
 11954  0412  00F1               	movwf	i1delayUS@US+1
 11955  0413  3010               	movlw	16
 11956  0414  00F0               	movwf	i1delayUS@US
 11957  0415  319B  23F2  3181   	fcall	i1_delayUS
 11958                           
 11959                           ;PS_2.c: 589: if(!BAUDMODE)
 11960  0418  0021               	movlb	1	; select bank1
 11961  0419  08CB               	movf	_BAUDMODE^(0+128),f
 11962  041A  1D03               	skipz
 11963  041B  2C43               	goto	i1l5398
 11964                           
 11965                           ;PS_2.c: 590: {
 11966                           ;PS_2.c: 591: BaudTyped =0;
 11967  041C  3000               	movlw	0
 11968  041D  00C8               	movwf	(_BaudTyped+3)^(0+128)
 11969  041E  3000               	movlw	0
 11970  041F  00C7               	movwf	(_BaudTyped+2)^(0+128)
 11971  0420  3000               	movlw	0
 11972  0421  00C6               	movwf	(_BaudTyped+1)^(0+128)
 11973  0422  3000               	movlw	0
 11974  0423  00C5               	movwf	_BaudTyped^(0+128)
 11975                           
 11976                           ;PS_2.c: 592: ParityTyped =0;
 11977  0424  0023               	movlb	3	; select bank3
 11978  0425  01EB               	clrf	_ParityTyped^(0+384)
 11979                           
 11980                           ;PS_2.c: 593: BAUDMODE = 1;
 11981  0426  0021               	movlb	1	; select bank1
 11982  0427  01CB               	clrf	_BAUDMODE^(0+128)
 11983  0428  0ACB               	incf	_BAUDMODE^(0+128),f
 11984                           
 11985                           ;PS_2.c: 594: UARTstringWAIT("Enter Baud rate \r\n");
 11986  0429  3031               	movlw	low (STR_15| (0+32768))
 11987  042A  0020               	movlb	0	; select bank0
 11988  042B  00A1               	movwf	i1UARTstringWAIT@data
 11989  042C  308A               	movlw	high (STR_15| (0+32768))
 11990  042D  00A2               	movwf	i1UARTstringWAIT@data+1
 11991  042E  319B  23C0  3181   	fcall	i1_UARTstringWAIT
 11992                           
 11993                           ;PS_2.c: 595: delayUS(10000);
 11994  0431  3000               	movlw	0
 11995  0432  00F3               	movwf	i1delayUS@US+3
 11996  0433  3000               	movlw	0
 11997  0434  00F2               	movwf	i1delayUS@US+2
 11998  0435  3027               	movlw	39
 11999  0436  00F1               	movwf	i1delayUS@US+1
 12000  0437  3010               	movlw	16
 12001  0438  00F0               	movwf	i1delayUS@US
 12002  0439  319B  23F2  3181   	fcall	i1_delayUS
 12003                           
 12004                           ;PS_2.c: 596: UARTchar('>' , 0, 0);
 12005  043C  01F8               	clrf	i1UARTchar@override
 12006  043D  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12007  043E  303E               	movlw	62
 12008  043F  3190  2011  3181   	fcall	i1_UARTchar
 12009                           
 12010                           ;PS_2.c: 598: }
 12011  0442  2C7E               	goto	i1l5412
 12012  0443                     i1l5398:	
 12013                           
 12014                           ;PS_2.c: 599: else
 12015                           ;PS_2.c: 600: {
 12016                           ;PS_2.c: 601: BaudTyped = 9600;
 12017  0443  3000               	movlw	0
 12018  0444  0021               	movlb	1	; select bank1
 12019  0445  00C8               	movwf	(_BaudTyped+3)^(0+128)
 12020  0446  3000               	movlw	0
 12021  0447  00C7               	movwf	(_BaudTyped+2)^(0+128)
 12022  0448  3025               	movlw	37
 12023  0449  00C6               	movwf	(_BaudTyped+1)^(0+128)
 12024  044A  3080               	movlw	128
 12025  044B  00C5               	movwf	_BaudTyped^(0+128)
 12026                           
 12027                           ;PS_2.c: 602: UARTstringWAIT("KeyBoard Reset to 9600");
 12028  044C  3005               	movlw	low (STR_16| (0+32768))
 12029  044D  0020               	movlb	0	; select bank0
 12030  044E  00A1               	movwf	i1UARTstringWAIT@data
 12031  044F  308A               	movlw	high (STR_16| (0+32768))
 12032  0450  00A2               	movwf	i1UARTstringWAIT@data+1
 12033  0451  319B  23C0  3181   	fcall	i1_UARTstringWAIT
 12034                           
 12035                           ;PS_2.c: 603: UARTstringWAIT(NoParityMSG);
 12036  0454  3026               	movlw	low (_NoParityMSG| (0+32768))
 12037  0455  0020               	movlb	0	; select bank0
 12038  0456  00A1               	movwf	i1UARTstringWAIT@data
 12039  0457  3089               	movlw	high (_NoParityMSG| (0+32768))
 12040  0458  00A2               	movwf	i1UARTstringWAIT@data+1
 12041  0459  319B  23C0  3181   	fcall	i1_UARTstringWAIT
 12042                           
 12043                           ;PS_2.c: 604: UARTstringWAIT("\r\n");
 12044  045C  3041               	movlw	low ((STR_15+16)| (0+32768))
 12045  045D  0020               	movlb	0	; select bank0
 12046  045E  00A1               	movwf	i1UARTstringWAIT@data
 12047  045F  308A               	movlw	high ((STR_15+16)| (0+32768))
 12048  0460  00A2               	movwf	i1UARTstringWAIT@data+1
 12049  0461  319B  23C0  3181   	fcall	i1_UARTstringWAIT
 12050                           
 12051                           ;PS_2.c: 605: delayUS(10000);
 12052  0464  3000               	movlw	0
 12053  0465  00F3               	movwf	i1delayUS@US+3
 12054  0466  3000               	movlw	0
 12055  0467  00F2               	movwf	i1delayUS@US+2
 12056  0468  3027               	movlw	39
 12057  0469  00F1               	movwf	i1delayUS@US+1
 12058  046A  3010               	movlw	16
 12059  046B  00F0               	movwf	i1delayUS@US
 12060  046C  319B  23F2  3181   	fcall	i1_delayUS
 12061                           
 12062                           ;PS_2.c: 606: SetBaud(BaudTyped, 0);
 12063  046F  0021               	movlb	1	; select bank1
 12064  0470  0848               	movf	(_BaudTyped+3)^(0+128),w
 12065  0471  00B2               	movwf	(SetBaud@Baud+3)^(0+128)
 12066  0472  0847               	movf	(_BaudTyped+2)^(0+128),w
 12067  0473  00B1               	movwf	(SetBaud@Baud+2)^(0+128)
 12068  0474  0846               	movf	(_BaudTyped+1)^(0+128),w
 12069  0475  00B0               	movwf	(SetBaud@Baud+1)^(0+128)
 12070  0476  0845               	movf	_BaudTyped^(0+128),w
 12071  0477  00AF               	movwf	SetBaud@Baud^(0+128)
 12072  0478  01B3               	clrf	SetBaud@Parity^(0+128)
 12073  0479  318C  24F6  3181   	fcall	_SetBaud
 12074                           
 12075                           ;PS_2.c: 607: BAUDMODE = 0;
 12076  047C  0021               	movlb	1	; select bank1
 12077  047D  01CB               	clrf	_BAUDMODE^(0+128)
 12078  047E                     i1l5412:	
 12079                           
 12080                           ;PS_2.c: 608: }
 12081                           ;PS_2.c: 609: RControl =0;
 12082  047E  0023               	movlb	3	; select bank3
 12083  047F  01ED               	clrf	_RControl^(0+384)
 12084                           
 12085                           ;PS_2.c: 610: LControl =0;
 12086  0480  0021               	movlb	1	; select bank1
 12087  0481  01CF               	clrf	_LControl^(0+128)
 12088                           
 12089                           ;PS_2.c: 611: LALT =0;
 12090  0482  0023               	movlb	3	; select bank3
 12091  0483  01E9               	clrf	_LALT^(0+384)
 12092                           
 12093                           ;PS_2.c: 612: RALT =0;
 12094  0484  01EC               	clrf	_RALT^(0+384)
 12095                           
 12096                           ;PS_2.c: 613: Delete =0;
 12097  0485  0021               	movlb	1	; select bank1
 12098  0486  01CE               	clrf	_Delete^(0+128)
 12099  0487                     i1l5422:	
 12100                           
 12101                           ;PS_2.c: 614: }
 12102                           ;PS_2.c: 616: if(temp)
 12103  0487  0023               	movlb	3	; select bank3
 12104  0488  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12105  0489  1903               	btfsc	3,2
 12106  048A  2E1E               	goto	i1l5518
 12107                           
 12108                           ;PS_2.c: 617: {
 12109                           ;PS_2.c: 619: if(temp == 0x01)
 12110  048B  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12111  048C  3A01               	xorlw	1
 12112  048D  1D03               	skipz
 12113  048E  2C9A               	goto	i1l5428
 12114                           
 12115                           ;PS_2.c: 620: {
 12116                           ;PS_2.c: 622: UART_send_break();
 12117  048F  3198  20DB  3181   	fcall	_UART_send_break
 12118                           
 12119                           ;PS_2.c: 623: UART_send_break_timed(100000);
 12120  0492  30A0               	movlw	160
 12121  0493  00FA               	movwf	UART_send_break_timed@US
 12122  0494  3086               	movlw	134
 12123  0495  00FB               	movwf	UART_send_break_timed@US+1
 12124  0496  319A  225F  3181   	fcall	_UART_send_break_timed
 12125  0499  2E1D               	goto	i1l789
 12126  049A                     i1l5428:	
 12127                           ;PS_2.c: 624: }
 12128                           
 12129                           
 12130                           ;PS_2.c: 625: else
 12131                           ;PS_2.c: 626: {
 12132                           ;PS_2.c: 627: if(!BAUDMODE)
 12133  049A  0021               	movlb	1	; select bank1
 12134  049B  08CB               	movf	_BAUDMODE^(0+128),f
 12135  049C  1D03               	skipz
 12136  049D  2CC7               	goto	i1l5440
 12137                           
 12138                           ;PS_2.c: 628: {
 12139                           ;PS_2.c: 629: UARTchar(temp, 0, 0);
 12140  049E  01F8               	clrf	i1UARTchar@override
 12141  049F  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12142  04A0  0023               	movlb	3	; select bank3
 12143  04A1  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12144  04A2  3190  2011  3181   	fcall	i1_UARTchar
 12145                           
 12146                           ;PS_2.c: 630: if(temp == '\r')
 12147  04A5  0023               	movlb	3	; select bank3
 12148  04A6  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12149  04A7  3A0D               	xorlw	13
 12150  04A8  1D03               	skipz
 12151  04A9  2E1E               	goto	i1l5518
 12152                           
 12153                           ;PS_2.c: 631: {
 12154                           ;PS_2.c: 632: delayUS(5000);
 12155  04AA  3000               	movlw	0
 12156  04AB  00F3               	movwf	i1delayUS@US+3
 12157  04AC  3000               	movlw	0
 12158  04AD  00F2               	movwf	i1delayUS@US+2
 12159  04AE  3013               	movlw	19
 12160  04AF  00F1               	movwf	i1delayUS@US+1
 12161  04B0  3088               	movlw	136
 12162  04B1  00F0               	movwf	i1delayUS@US
 12163  04B2  319B  23F2  3181   	fcall	i1_delayUS
 12164                           
 12165                           ;PS_2.c: 633: UARTchar('\n', 0, 0);
 12166  04B5  01F8               	clrf	i1UARTchar@override
 12167  04B6  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12168  04B7  300A               	movlw	10
 12169  04B8  3190  2011  3181   	fcall	i1_UARTchar
 12170                           
 12171                           ;PS_2.c: 634: delayUS(10000);
 12172  04BB  3000               	movlw	0
 12173  04BC  00F3               	movwf	i1delayUS@US+3
 12174  04BD  3000               	movlw	0
 12175  04BE  00F2               	movwf	i1delayUS@US+2
 12176  04BF  3027               	movlw	39
 12177  04C0  00F1               	movwf	i1delayUS@US+1
 12178  04C1  3010               	movlw	16
 12179  04C2  00F0               	movwf	i1delayUS@US
 12180  04C3  319B  23F2  3181   	fcall	i1_delayUS
 12181  04C6  2E1D               	goto	i1l789
 12182  04C7                     i1l5440:	
 12183                           ;PS_2.c: 635: }
 12184                           ;PS_2.c: 636: }
 12185                           
 12186                           
 12187                           ;PS_2.c: 637: else
 12188                           ;PS_2.c: 638: {
 12189                           ;PS_2.c: 639: if(ISNUMBER(temp))
 12190  04C7  0023               	movlb	3	; select bank3
 12191  04C8  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12192  04C9  3199  2188  3181   	fcall	_ISNUMBER
 12193  04CC  3A00               	xorlw	0
 12194  04CD  1903               	skipnz
 12195  04CE  2D0E               	goto	i1l5448
 12196                           
 12197                           ;PS_2.c: 640: {
 12198                           ;PS_2.c: 641: BaudTyped*=10;
 12199  04CF  3000               	movlw	0
 12200  04D0  00F3               	movwf	___lmul@multiplier+3
 12201  04D1  3000               	movlw	0
 12202  04D2  00F2               	movwf	___lmul@multiplier+2
 12203  04D3  3000               	movlw	0
 12204  04D4  00F1               	movwf	___lmul@multiplier+1
 12205  04D5  300A               	movlw	10
 12206  04D6  00F0               	movwf	___lmul@multiplier
 12207  04D7  0021               	movlb	1	; select bank1
 12208  04D8  0848               	movf	(_BaudTyped+3)^(0+128),w
 12209  04D9  00F7               	movwf	___lmul@multiplicand+3
 12210  04DA  0847               	movf	(_BaudTyped+2)^(0+128),w
 12211  04DB  00F6               	movwf	___lmul@multiplicand+2
 12212  04DC  0846               	movf	(_BaudTyped+1)^(0+128),w
 12213  04DD  00F5               	movwf	___lmul@multiplicand+1
 12214  04DE  0845               	movf	_BaudTyped^(0+128),w
 12215  04DF  00F4               	movwf	___lmul@multiplicand
 12216  04E0  319B  2330  3181   	fcall	___lmul
 12217  04E3  0873               	movf	?___lmul+3,w
 12218  04E4  0021               	movlb	1	; select bank1
 12219  04E5  00C8               	movwf	(_BaudTyped+3)^(0+128)
 12220  04E6  0872               	movf	?___lmul+2,w
 12221  04E7  00C7               	movwf	(_BaudTyped+2)^(0+128)
 12222  04E8  0871               	movf	?___lmul+1,w
 12223  04E9  00C6               	movwf	(_BaudTyped+1)^(0+128)
 12224  04EA  0870               	movf	?___lmul,w
 12225  04EB  00C5               	movwf	_BaudTyped^(0+128)
 12226                           
 12227                           ;PS_2.c: 642: BaudTyped += temp - 48;
 12228  04EC  0023               	movlb	3	; select bank3
 12229  04ED  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12230  04EE  3ED0               	addlw	208
 12231  04EF  0021               	movlb	1	; select bank1
 12232  04F0  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12233  04F1  30FF               	movlw	255
 12234  04F2  1803               	skipnc
 12235  04F3  3000               	movlw	0
 12236  04F4  00BD               	movwf	(??_Process_PS2_ScanCode^(0+128)+1)
 12237  04F5  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12238  04F6  00BE               	movwf	(??_Process_PS2_ScanCode+2)^(0+128)
 12239  04F7  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 12240  04F8  00BF               	movwf	((??_Process_PS2_ScanCode+2)^(0+128)+1)
 12241  04F9  3000               	movlw	0
 12242  04FA  1BBF               	btfsc	((??_Process_PS2_ScanCode+2)^(0+128)+1),7
 12243  04FB  30FF               	movlw	255
 12244  04FC  00C0               	movwf	((??_Process_PS2_ScanCode+2)^(0+128)+2)
 12245  04FD  00C1               	movwf	((??_Process_PS2_ScanCode+2)^(0+128)+3)
 12246  04FE  083E               	movf	(??_Process_PS2_ScanCode+2)^(0+128),w
 12247  04FF  07C5               	addwf	_BaudTyped^(0+128),f
 12248  0500  083F               	movf	(??_Process_PS2_ScanCode+3)^(0+128),w
 12249  0501  3DC6               	addwfc	(_BaudTyped+1)^(0+128),f
 12250  0502  0840               	movf	(??_Process_PS2_ScanCode+4)^(0+128),w
 12251  0503  3DC7               	addwfc	(_BaudTyped+2)^(0+128),f
 12252  0504  0841               	movf	(??_Process_PS2_ScanCode+5)^(0+128),w
 12253  0505  3DC8               	addwfc	(_BaudTyped+3)^(0+128),f
 12254                           
 12255                           ;PS_2.c: 643: UARTchar(temp, 0, 0);
 12256  0506  01F8               	clrf	i1UARTchar@override
 12257  0507  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12258  0508  0023               	movlb	3	; select bank3
 12259  0509  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12260  050A  3190  2011  3181   	fcall	i1_UARTchar
 12261  050D  2E1D               	goto	i1l789
 12262  050E                     i1l5448:	
 12263                           ;PS_2.c: 644: }
 12264                           
 12265                           
 12266                           ;PS_2.c: 645: else if(temp == 'o' || temp == 'O')
 12267  050E  0023               	movlb	3	; select bank3
 12268  050F  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12269  0510  3A6F               	xorlw	111
 12270  0511  1903               	skipnz
 12271  0512  2D17               	goto	i1l797
 12272  0513  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12273  0514  3A4F               	xorlw	79
 12274  0515  1D03               	skipz
 12275  0516  2D20               	goto	i1l5454
 12276  0517                     i1l797:	
 12277                           
 12278                           ;PS_2.c: 646: {
 12279                           ;PS_2.c: 647: ParityTyped = 1;
 12280  0517  01EB               	clrf	_ParityTyped^(0+384)
 12281  0518  0AEB               	incf	_ParityTyped^(0+384),f
 12282                           
 12283                           ;PS_2.c: 648: UARTchar(temp, 0, 0);
 12284  0519  01F8               	clrf	i1UARTchar@override
 12285  051A  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12286  051B  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12287  051C  3190  2011  3181   	fcall	i1_UARTchar
 12288  051F  2E1D               	goto	i1l789
 12289  0520                     i1l5454:	
 12290                           ;PS_2.c: 649: }
 12291                           
 12292                           
 12293                           ;PS_2.c: 650: else if(temp == 'e' || temp == 'E')
 12294  0520  0023               	movlb	3	; select bank3
 12295  0521  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12296  0522  3A65               	xorlw	101
 12297  0523  1903               	skipnz
 12298  0524  2D29               	goto	i1l5458
 12299  0525  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12300  0526  3A45               	xorlw	69
 12301  0527  1D03               	skipz
 12302  0528  2D36               	goto	i1l5462
 12303  0529                     i1l5458:	
 12304                           
 12305                           ;PS_2.c: 651: {
 12306                           ;PS_2.c: 652: ParityTyped = 2;
 12307  0529  3002               	movlw	2
 12308  052A  0021               	movlb	1	; select bank1
 12309  052B  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12310  052C  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12311  052D  0023               	movlb	3	; select bank3
 12312  052E  00EB               	movwf	_ParityTyped^(0+384)
 12313                           
 12314                           ;PS_2.c: 653: UARTchar(temp, 0, 0);
 12315  052F  01F8               	clrf	i1UARTchar@override
 12316  0530  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12317  0531  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12318  0532  3190  2011  3181   	fcall	i1_UARTchar
 12319  0535  2E1D               	goto	i1l789
 12320  0536                     i1l5462:	
 12321                           ;PS_2.c: 654: }
 12322                           
 12323                           
 12324                           ;PS_2.c: 655: else if(temp == 'm' || temp == 'M')
 12325  0536  0023               	movlb	3	; select bank3
 12326  0537  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12327  0538  3A6D               	xorlw	109
 12328  0539  1903               	skipnz
 12329  053A  2D3F               	goto	i1l5466
 12330  053B  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12331  053C  3A4D               	xorlw	77
 12332  053D  1D03               	skipz
 12333  053E  2D4C               	goto	i1l5470
 12334  053F                     i1l5466:	
 12335                           
 12336                           ;PS_2.c: 656: {
 12337                           ;PS_2.c: 657: ParityTyped = 3;
 12338  053F  3003               	movlw	3
 12339  0540  0021               	movlb	1	; select bank1
 12340  0541  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12341  0542  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12342  0543  0023               	movlb	3	; select bank3
 12343  0544  00EB               	movwf	_ParityTyped^(0+384)
 12344                           
 12345                           ;PS_2.c: 658: UARTchar(temp, 0, 0);
 12346  0545  01F8               	clrf	i1UARTchar@override
 12347  0546  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12348  0547  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12349  0548  3190  2011  3181   	fcall	i1_UARTchar
 12350  054B  2E1D               	goto	i1l789
 12351  054C                     i1l5470:	
 12352                           ;PS_2.c: 659: }
 12353                           
 12354                           
 12355                           ;PS_2.c: 660: else if(temp == 's' || temp == 'S')
 12356  054C  0023               	movlb	3	; select bank3
 12357  054D  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12358  054E  3A73               	xorlw	115
 12359  054F  1903               	skipnz
 12360  0550  2D55               	goto	i1l5474
 12361  0551  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12362  0552  3A53               	xorlw	83
 12363  0553  1D03               	skipz
 12364  0554  2D62               	goto	i1l5478
 12365  0555                     i1l5474:	
 12366                           
 12367                           ;PS_2.c: 661: {
 12368                           ;PS_2.c: 662: ParityTyped = 4;
 12369  0555  3004               	movlw	4
 12370  0556  0021               	movlb	1	; select bank1
 12371  0557  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12372  0558  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12373  0559  0023               	movlb	3	; select bank3
 12374  055A  00EB               	movwf	_ParityTyped^(0+384)
 12375                           
 12376                           ;PS_2.c: 663: UARTchar(temp, 0, 0);
 12377  055B  01F8               	clrf	i1UARTchar@override
 12378  055C  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12379  055D  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12380  055E  3190  2011  3181   	fcall	i1_UARTchar
 12381  0561  2E1D               	goto	i1l789
 12382  0562                     i1l5478:	
 12383                           ;PS_2.c: 664: }
 12384                           
 12385                           
 12386                           ;PS_2.c: 665: else if(temp == '\r')
 12387  0562  0023               	movlb	3	; select bank3
 12388  0563  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12389  0564  3A0D               	xorlw	13
 12390  0565  1D03               	skipz
 12391  0566  2E1E               	goto	i1l5518
 12392                           
 12393                           ;PS_2.c: 666: {
 12394                           ;PS_2.c: 667: UARTstringWAIT("\r\n");
 12395  0567  3041               	movlw	low ((STR_15+16)| (0+32768))
 12396  0568  0020               	movlb	0	; select bank0
 12397  0569  00A1               	movwf	i1UARTstringWAIT@data
 12398  056A  308A               	movlw	high ((STR_15+16)| (0+32768))
 12399  056B  00A2               	movwf	i1UARTstringWAIT@data+1
 12400  056C  319B  23C0  3181   	fcall	i1_UARTstringWAIT
 12401                           
 12402                           ;PS_2.c: 668: delayUS(10000);
 12403  056F  3000               	movlw	0
 12404  0570  00F3               	movwf	i1delayUS@US+3
 12405  0571  3000               	movlw	0
 12406  0572  00F2               	movwf	i1delayUS@US+2
 12407  0573  3027               	movlw	39
 12408  0574  00F1               	movwf	i1delayUS@US+1
 12409  0575  3010               	movlw	16
 12410  0576  00F0               	movwf	i1delayUS@US
 12411  0577  319B  23F2  3181   	fcall	i1_delayUS
 12412                           
 12413                           ;PS_2.c: 669: if(BaudTyped >=2400 && BaudTyped <= 115200)
 12414  057A  3000               	movlw	0
 12415  057B  0021               	movlb	1	; select bank1
 12416  057C  0248               	subwf	(_BaudTyped+3)^(0+128),w
 12417  057D  1D03               	skipz
 12418  057E  2D89               	goto	u692_25
 12419  057F  3000               	movlw	0
 12420  0580  0247               	subwf	(_BaudTyped+2)^(0+128),w
 12421  0581  1D03               	skipz
 12422  0582  2D89               	goto	u692_25
 12423  0583  3009               	movlw	9
 12424  0584  0246               	subwf	(_BaudTyped+1)^(0+128),w
 12425  0585  1D03               	skipz
 12426  0586  2D89               	goto	u692_25
 12427  0587  3060               	movlw	96
 12428  0588  0245               	subwf	_BaudTyped^(0+128),w
 12429  0589                     u692_25:	
 12430  0589  1C03               	skipc
 12431  058A  2E08               	goto	i1l5512
 12432  058B  3000               	movlw	0
 12433  058C  0248               	subwf	(_BaudTyped+3)^(0+128),w
 12434  058D  1D03               	skipz
 12435  058E  2D99               	goto	u693_25
 12436  058F  3001               	movlw	1
 12437  0590  0247               	subwf	(_BaudTyped+2)^(0+128),w
 12438  0591  1D03               	skipz
 12439  0592  2D99               	goto	u693_25
 12440  0593  30C2               	movlw	194
 12441  0594  0246               	subwf	(_BaudTyped+1)^(0+128),w
 12442  0595  1D03               	skipz
 12443  0596  2D99               	goto	u693_25
 12444  0597  3001               	movlw	1
 12445  0598  0245               	subwf	_BaudTyped^(0+128),w
 12446  0599                     u693_25:	
 12447  0599  1803               	skipnc
 12448  059A  2E08               	goto	i1l5512
 12449                           
 12450                           ;PS_2.c: 670: {
 12451                           ;PS_2.c: 671: sprintf(buf,"KeyBoard Baud will be set to %lu",BaudTyped);
 12452  059B  30A0               	movlw	low Process_PS2_ScanCode@buf
 12453  059C  0020               	movlb	0	; select bank0
 12454  059D  00AA               	movwf	i1sprintf@sp
 12455  059E  3001               	movlw	high Process_PS2_ScanCode@buf
 12456  059F  00AB               	movwf	i1sprintf@sp+1
 12457  05A0  3095               	movlw	low (STR_19| (0+32768))
 12458  05A1  00AC               	movwf	i1sprintf@f
 12459  05A2  3089               	movlw	high (STR_19| (0+32768))
 12460  05A3  00AD               	movwf	i1sprintf@f+1
 12461  05A4  0021               	movlb	1	; select bank1
 12462  05A5  0848               	movf	(_BaudTyped+3)^(0+128),w
 12463  05A6  0020               	movlb	0	; select bank0
 12464  05A7  00B1               	movwf	?i1_sprintf+7
 12465  05A8  0021               	movlb	1	; select bank1
 12466  05A9  0847               	movf	(_BaudTyped+2)^(0+128),w
 12467  05AA  0020               	movlb	0	; select bank0
 12468  05AB  00B0               	movwf	?i1_sprintf+6
 12469  05AC  0021               	movlb	1	; select bank1
 12470  05AD  0846               	movf	(_BaudTyped+1)^(0+128),w
 12471  05AE  0020               	movlb	0	; select bank0
 12472  05AF  00AF               	movwf	?i1_sprintf+5
 12473  05B0  0021               	movlb	1	; select bank1
 12474  05B1  0845               	movf	_BaudTyped^(0+128),w
 12475  05B2  0020               	movlb	0	; select bank0
 12476  05B3  00AE               	movwf	?i1_sprintf+4
 12477  05B4  3196  2614  3181   	fcall	i1_sprintf
 12478                           
 12479                           ;PS_2.c: 672: UARTstringWAIT(buf);
 12480  05B7  30A0               	movlw	low Process_PS2_ScanCode@buf
 12481  05B8  0020               	movlb	0	; select bank0
 12482  05B9  00A1               	movwf	i1UARTstringWAIT@data
 12483  05BA  3001               	movlw	high Process_PS2_ScanCode@buf
 12484  05BB  00A2               	movwf	i1UARTstringWAIT@data+1
 12485  05BC  319B  23C0  3181   	fcall	i1_UARTstringWAIT
 12486                           
 12487                           ;PS_2.c: 673: if(ParityTyped)
 12488  05BF  0023               	movlb	3	; select bank3
 12489  05C0  086B               	movf	_ParityTyped^(0+384),w
 12490  05C1  1903               	btfsc	3,2
 12491  05C2  2DE5               	goto	i1l5508
 12492                           
 12493                           ;PS_2.c: 674: {
 12494                           ;PS_2.c: 675: switch (ParityTyped)
 12495  05C3  2DD8               	goto	i1l5506
 12496  05C4                     i1l5496:	
 12497                           ;PS_2.c: 676: {
 12498                           ;PS_2.c: 677: case 1:
 12499                           
 12500                           
 12501                           ;PS_2.c: 678: UARTstringWAIT(OddParityMSG);
 12502  05C4  3011               	movlw	low (_OddParityMSG| (0+32768))
 12503  05C5  0020               	movlb	0	; select bank0
 12504  05C6  00A1               	movwf	i1UARTstringWAIT@data
 12505  05C7  3089               	movlw	high (_OddParityMSG| (0+32768))
 12506  05C8  2DE9               	goto	L15
 12507  05C9                     i1l5498:	
 12508                           ;PS_2.c: 680: case 2:
 12509                           
 12510                           ;PS_2.c: 679: break;
 12511                           
 12512                           
 12513                           ;PS_2.c: 681: UARTstringWAIT(EvenParityMSG);
 12514  05C9  30FB               	movlw	low (_EvenParityMSG| (0+32768))
 12515  05CA  0020               	movlb	0	; select bank0
 12516  05CB  00A1               	movwf	i1UARTstringWAIT@data
 12517  05CC  3088               	movlw	high (_EvenParityMSG| (0+32768))
 12518  05CD  2DE9               	goto	L15
 12519  05CE                     i1l5500:	
 12520                           ;PS_2.c: 683: case 3:
 12521                           
 12522                           ;PS_2.c: 682: break;
 12523                           
 12524                           
 12525                           ;PS_2.c: 684: UARTstringWAIT(MarkParityMSG);
 12526  05CE  304A               	movlw	low (_MarkParityMSG| (0+32768))
 12527  05CF  0020               	movlb	0	; select bank0
 12528  05D0  00A1               	movwf	i1UARTstringWAIT@data
 12529  05D1  3089               	movlw	high (_MarkParityMSG| (0+32768))
 12530  05D2  2DE9               	goto	L15
 12531  05D3                     i1l5502:	
 12532                           ;PS_2.c: 686: default:
 12533                           
 12534                           ;PS_2.c: 685: break;
 12535                           
 12536                           
 12537                           ;PS_2.c: 687: UARTstringWAIT(SpaceParityMSG);
 12538  05D3  303A               	movlw	low (_SpaceParityMSG| (0+32768))
 12539  05D4  0020               	movlb	0	; select bank0
 12540  05D5  00A1               	movwf	i1UARTstringWAIT@data
 12541  05D6  3089               	movlw	high (_SpaceParityMSG| (0+32768))
 12542  05D7  2DE9               	goto	L15
 12543  05D8                     i1l5506:	
 12544                           ;PS_2.c: 689: }
 12545                           
 12546                           ;PS_2.c: 688: break;
 12547                           
 12548  05D8  0023               	movlb	3	; select bank3
 12549  05D9  086B               	movf	_ParityTyped^(0+384),w
 12550                           
 12551                           ; Switch size 1, requested type "space"
 12552                           ; Number of cases is 3, Range of values is 1 to 3
 12553                           ; switch strategies available:
 12554                           ; Name         Instructions Cycles
 12555                           ; simple_byte           10     6 (average)
 12556                           ; direct_byte           15     9 (fixed)
 12557                           ; jumptable            263     9 (fixed)
 12558                           ;	Chosen strategy is simple_byte
 12559  05DA  3A01               	xorlw	1	; case 1
 12560  05DB  1903               	skipnz
 12561  05DC  2DC4               	goto	i1l5496
 12562  05DD  3A03               	xorlw	3	; case 2
 12563  05DE  1903               	skipnz
 12564  05DF  2DC9               	goto	i1l5498
 12565  05E0  3A01               	xorlw	1	; case 3
 12566  05E1  1903               	skipnz
 12567  05E2  2DCE               	goto	i1l5500
 12568  05E3  2DD3               	goto	i1l5502
 12569                           
 12570                           ;PS_2.c: 690: }
 12571  05E4  2DED               	goto	i1l820
 12572  05E5                     i1l5508:	
 12573                           
 12574                           ;PS_2.c: 691: else
 12575                           ;PS_2.c: 692: {
 12576                           ;PS_2.c: 693: UARTstringWAIT(NoParityMSG);
 12577  05E5  3026               	movlw	low (_NoParityMSG| (0+32768))
 12578  05E6  0020               	movlb	0	; select bank0
 12579  05E7  00A1               	movwf	i1UARTstringWAIT@data
 12580  05E8  3089               	movlw	high (_NoParityMSG| (0+32768))
 12581  05E9                     L15:	
 12582  05E9  00A2               	movwf	i1UARTstringWAIT@data+1
 12583  05EA  319B  23C0  3181   	fcall	i1_UARTstringWAIT
 12584  05ED                     i1l820:	
 12585                           
 12586                           ;PS_2.c: 694: }
 12587                           ;PS_2.c: 695: UARTstringWAIT("\r\n");
 12588  05ED  3041               	movlw	low ((STR_15+16)| (0+32768))
 12589  05EE  0020               	movlb	0	; select bank0
 12590  05EF  00A1               	movwf	i1UARTstringWAIT@data
 12591  05F0  308A               	movlw	high ((STR_15+16)| (0+32768))
 12592  05F1  00A2               	movwf	i1UARTstringWAIT@data+1
 12593  05F2  319B  23C0  3181   	fcall	i1_UARTstringWAIT
 12594                           
 12595                           ;PS_2.c: 696: SetBaud(BaudTyped, ParityTyped);
 12596  05F5  0021               	movlb	1	; select bank1
 12597  05F6  0848               	movf	(_BaudTyped+3)^(0+128),w
 12598  05F7  00B2               	movwf	(SetBaud@Baud+3)^(0+128)
 12599  05F8  0847               	movf	(_BaudTyped+2)^(0+128),w
 12600  05F9  00B1               	movwf	(SetBaud@Baud+2)^(0+128)
 12601  05FA  0846               	movf	(_BaudTyped+1)^(0+128),w
 12602  05FB  00B0               	movwf	(SetBaud@Baud+1)^(0+128)
 12603  05FC  0845               	movf	_BaudTyped^(0+128),w
 12604  05FD  00AF               	movwf	SetBaud@Baud^(0+128)
 12605  05FE  0023               	movlb	3	; select bank3
 12606  05FF  086B               	movf	_ParityTyped^(0+384),w
 12607  0600  0021               	movlb	1	; select bank1
 12608  0601  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12609  0602  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12610  0603  00B3               	movwf	SetBaud@Parity^(0+128)
 12611  0604  318C  24F6  3181   	fcall	_SetBaud
 12612                           
 12613                           ;PS_2.c: 697: }
 12614  0607  2E1B               	goto	i1l5516
 12615  0608                     i1l5512:	
 12616                           
 12617                           ;PS_2.c: 698: else
 12618                           ;PS_2.c: 699: {
 12619                           ;PS_2.c: 700: UARTstringWAIT("KeyBoard Baud Out of Range\r\n");
 12620  0608  30B6               	movlw	low (STR_21| (0+32768))
 12621  0609  0020               	movlb	0	; select bank0
 12622  060A  00A1               	movwf	i1UARTstringWAIT@data
 12623  060B  3089               	movlw	high (STR_21| (0+32768))
 12624  060C  00A2               	movwf	i1UARTstringWAIT@data+1
 12625  060D  319B  23C0  3181   	fcall	i1_UARTstringWAIT
 12626                           
 12627                           ;PS_2.c: 701: delayUS(10000);
 12628  0610  3000               	movlw	0
 12629  0611  00F3               	movwf	i1delayUS@US+3
 12630  0612  3000               	movlw	0
 12631  0613  00F2               	movwf	i1delayUS@US+2
 12632  0614  3027               	movlw	39
 12633  0615  00F1               	movwf	i1delayUS@US+1
 12634  0616  3010               	movlw	16
 12635  0617  00F0               	movwf	i1delayUS@US
 12636  0618  319B  23F2  3181   	fcall	i1_delayUS
 12637  061B                     i1l5516:	
 12638                           
 12639                           ;PS_2.c: 702: }
 12640                           ;PS_2.c: 703: BAUDMODE=0;
 12641  061B  0021               	movlb	1	; select bank1
 12642  061C  01CB               	clrf	_BAUDMODE^(0+128)
 12643  061D                     i1l789:	
 12644  061D  0023               	movlb	3	; select bank3
 12645  061E                     i1l5518:	
 12646                           
 12647                           ;PS_2.c: 704: }
 12648                           ;PS_2.c: 705: }
 12649                           ;PS_2.c: 706: }
 12650                           ;PS_2.c: 707: }
 12651                           ;PS_2.c: 710: temp =0;
 12652  061E  0023               	movlb	3	; select bank3
 12653  061F  01E0               	clrf	Process_PS2_ScanCode@temp^(0+384)
 12654                           
 12655                           ;PS_2.c: 711: PS_2_Read_Data_First =0;
 12656  0620  01E1               	clrf	_PS_2_Read_Data_First^(0+384)
 12657  0621  01E2               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
 12658                           
 12659                           ;PS_2.c: 712: PS_2_Read_Data_Second =0;
 12660  0622  01E3               	clrf	_PS_2_Read_Data_Second^(0+384)
 12661  0623  01E4               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
 12662                           
 12663                           ;PS_2.c: 713: PS_2_Read_Data_Third =0;
 12664  0624  01E5               	clrf	_PS_2_Read_Data_Third^(0+384)
 12665  0625  01E6               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
 12666                           
 12667                           ;PS_2.c: 714: Caps_Lock_Key_old = Caps_Lock_Key;
 12668  0626  0021               	movlb	1	; select bank1
 12669  0627  084C               	movf	_Caps_Lock_Key^(0+128),w
 12670  0628  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12671  0629  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12672  062A  00CD               	movwf	_Caps_Lock_Key_old^(0+128)
 12673                           
 12674                           ;PS_2.c: 715: Right_Shift_Key_old = Right_Shift_Key;
 12675  062B  0023               	movlb	3	; select bank3
 12676  062C  086E               	movf	_Right_Shift_Key^(0+384),w
 12677  062D  0021               	movlb	1	; select bank1
 12678  062E  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12679  062F  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12680  0630  00D4               	movwf	_Right_Shift_Key_old^(0+128)
 12681                           
 12682                           ;PS_2.c: 716: Left_Shift_Key_old = Left_Shift_Key;
 12683  0631  0023               	movlb	3	; select bank3
 12684  0632  086A               	movf	_Left_Shift_Key^(0+384),w
 12685  0633  0021               	movlb	1	; select bank1
 12686  0634  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12687  0635  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12688  0636  00D0               	movwf	_Left_Shift_Key_old^(0+128)
 12689                           
 12690                           ;PS_2.c: 717: LATC &= ~0b00010000;
 12691  0637  30EF               	movlw	239
 12692  0638  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12693  0639  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12694  063A  0022               	movlb	2	; select bank2
 12695  063B  058E               	andwf	14,f	;volatile
 12696                           
 12697                           ;PS_2.c: 718: }
 12698  063C  2921               	goto	i1l5538
 12699  063D                     i1l5534:	
 12700                           
 12701                           ;PS_2.c: 719: else
 12702                           ;PS_2.c: 720: {
 12703                           ;PS_2.c: 722: cleanBuffer(PS_2_ScanCodes, 12);
 12704  063D  300C               	movlw	12
 12705  063E  00F0               	movwf	cleanBuffer@count
 12706  063F  3000               	movlw	0
 12707  0640  00F1               	movwf	cleanBuffer@count+1
 12708  0641  30D6               	movlw	_PS_2_ScanCodes& (0+255)
 12709  0642  319A  2223  3181   	fcall	_cleanBuffer
 12710                           
 12711                           ;PS_2.c: 723: PS_2_Buffer_items = 0;
 12712  0645  0021               	movlb	1	; select bank1
 12713  0646  01D1               	clrf	_PS_2_Buffer_items^(0+128)
 12714  0647  2921               	goto	i1l5538
 12715  0648                     __end_of_Process_PS2_ScanCode:	
 12716                           
 12717                           	psect	text42
 12718  1A23                     __ptext42:	
 12719 ;; *************** function _cleanBuffer *****************
 12720 ;; Defined at:
 12721 ;;		line 159 in file "MISC.c"
 12722 ;; Parameters:    Size  Location     Type
 12723 ;;  data            1    wreg     PTR unsigned char 
 12724 ;;		 -> PS_2_ScanCodes(12), 
 12725 ;;  count           2    0[COMMON] int 
 12726 ;; Auto vars:     Size  Location     Type
 12727 ;;  data            1    3[COMMON] PTR unsigned char 
 12728 ;;		 -> PS_2_ScanCodes(12), 
 12729 ;;  i               1    4[COMMON] unsigned char 
 12730 ;; Return value:  Size  Location     Type
 12731 ;;		None               void
 12732 ;; Registers used:
 12733 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12734 ;; Tracked objects:
 12735 ;;		On entry : 0/0
 12736 ;;		On exit  : 0/0
 12737 ;;		Unchanged: 0/0
 12738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12739 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12740 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12741 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12742 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12743 ;;Total ram usage:        5 bytes
 12744 ;; Hardware stack levels used:    1
 12745 ;; This function calls:
 12746 ;;		Nothing
 12747 ;; This function is called by:
 12748 ;;		_Process_PS2_ScanCode
 12749 ;; This function uses a non-reentrant model
 12750 ;;
 12751                           
 12752                           
 12753                           ;psect for function _cleanBuffer
 12754  1A23                     _cleanBuffer:	
 12755                           
 12756                           ;incstack = 0
 12757                           ; Regs used in _cleanBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
 12758                           ;cleanBuffer@data stored from wreg
 12759  1A23  00F3               	movwf	cleanBuffer@data
 12760                           
 12761                           ;MISC.c: 161: unsigned char i=0;
 12762  1A24  01F4               	clrf	cleanBuffer@i
 12763                           
 12764                           ;MISC.c: 162: for(i=0; i<count;i++)
 12765  1A25  01F4               	clrf	cleanBuffer@i
 12766  1A26                     i1l4596:	
 12767  1A26  0871               	movf	cleanBuffer@count+1,w
 12768  1A27  3A80               	xorlw	128
 12769  1A28  3C80               	sublw	128
 12770  1A29  1D03               	skipz
 12771  1A2A  2A2D               	goto	u518_25
 12772  1A2B  0870               	movf	cleanBuffer@count,w
 12773  1A2C  0274               	subwf	cleanBuffer@i,w
 12774  1A2D                     u518_25:	
 12775  1A2D  1803               	btfsc	3,0
 12776  1A2E  0008               	return
 12777                           
 12778                           ;MISC.c: 163: {
 12779                           ;MISC.c: 164: data[i]= 0;
 12780  1A2F  0874               	movf	cleanBuffer@i,w
 12781  1A30  0773               	addwf	cleanBuffer@data,w
 12782  1A31  00F2               	movwf	??_cleanBuffer
 12783  1A32  0872               	movf	??_cleanBuffer,w
 12784  1A33  0086               	movwf	6
 12785  1A34  0187               	clrf	7
 12786  1A35  0181               	clrf	1
 12787  1A36  3001               	movlw	1
 12788  1A37  00F2               	movwf	??_cleanBuffer
 12789  1A38  0872               	movf	??_cleanBuffer,w
 12790  1A39  07F4               	addwf	cleanBuffer@i,f
 12791  1A3A  2A26               	goto	i1l4596
 12792  1A3B                     __end_of_cleanBuffer:	
 12793                           
 12794                           	psect	text43
 12795  1B30                     __ptext43:	
 12796 ;; *************** function ___lmul *****************
 12797 ;; Defined at:
 12798 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul32.c"
 12799 ;; Parameters:    Size  Location     Type
 12800 ;;  multiplier      4    0[COMMON] unsigned long 
 12801 ;;  multiplicand    4    4[COMMON] unsigned long 
 12802 ;; Auto vars:     Size  Location     Type
 12803 ;;  product         4    8[COMMON] unsigned long 
 12804 ;; Return value:  Size  Location     Type
 12805 ;;                  4    0[COMMON] unsigned long 
 12806 ;; Registers used:
 12807 ;;		wreg, status,2, status,0
 12808 ;; Tracked objects:
 12809 ;;		On entry : 0/0
 12810 ;;		On exit  : 0/0
 12811 ;;		Unchanged: 0/0
 12812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12813 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12814 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12816 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12817 ;;Total ram usage:       12 bytes
 12818 ;; Hardware stack levels used:    1
 12819 ;; This function calls:
 12820 ;;		Nothing
 12821 ;; This function is called by:
 12822 ;;		_Process_PS2_ScanCode
 12823 ;; This function uses a non-reentrant model
 12824 ;;
 12825                           
 12826                           
 12827                           ;psect for function ___lmul
 12828  1B30                     ___lmul:	
 12829                           
 12830                           ;incstack = 0
 12831                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 12832  1B30  3000               	movlw	0
 12833  1B31  00FB               	movwf	___lmul@product+3
 12834  1B32  3000               	movlw	0
 12835  1B33  00FA               	movwf	___lmul@product+2
 12836  1B34  3000               	movlw	0
 12837  1B35  00F9               	movwf	___lmul@product+1
 12838  1B36  3000               	movlw	0
 12839  1B37  00F8               	movwf	___lmul@product
 12840  1B38                     i1l4926:	
 12841  1B38  1C70               	btfss	___lmul@multiplier,0
 12842  1B39  2B42               	goto	i1l4930
 12843  1B3A  0874               	movf	___lmul@multiplicand,w
 12844  1B3B  07F8               	addwf	___lmul@product,f
 12845  1B3C  0875               	movf	___lmul@multiplicand+1,w
 12846  1B3D  3DF9               	addwfc	___lmul@product+1,f
 12847  1B3E  0876               	movf	___lmul@multiplicand+2,w
 12848  1B3F  3DFA               	addwfc	___lmul@product+2,f
 12849  1B40  0877               	movf	___lmul@multiplicand+3,w
 12850  1B41  3DFB               	addwfc	___lmul@product+3,f
 12851  1B42                     i1l4930:	
 12852  1B42  3001               	movlw	1
 12853  1B43                     u561_25:	
 12854  1B43  35F4               	lslf	___lmul@multiplicand,f
 12855  1B44  0DF5               	rlf	___lmul@multiplicand+1,f
 12856  1B45  0DF6               	rlf	___lmul@multiplicand+2,f
 12857  1B46  0DF7               	rlf	___lmul@multiplicand+3,f
 12858  1B47  0B89               	decfsz	9,f
 12859  1B48  2B43               	goto	u561_25
 12860  1B49  3001               	movlw	1
 12861  1B4A                     u562_25:	
 12862  1B4A  36F3               	lsrf	___lmul@multiplier+3,f
 12863  1B4B  0CF2               	rrf	___lmul@multiplier+2,f
 12864  1B4C  0CF1               	rrf	___lmul@multiplier+1,f
 12865  1B4D  0CF0               	rrf	___lmul@multiplier,f
 12866  1B4E  0B89               	decfsz	9,f
 12867  1B4F  2B4A               	goto	u562_25
 12868  1B50  0873               	movf	___lmul@multiplier+3,w
 12869  1B51  0472               	iorwf	___lmul@multiplier+2,w
 12870  1B52  0471               	iorwf	___lmul@multiplier+1,w
 12871  1B53  0470               	iorwf	___lmul@multiplier,w
 12872  1B54  1D03               	skipz
 12873  1B55  2B38               	goto	i1l4926
 12874  1B56  087B               	movf	___lmul@product+3,w
 12875  1B57  00F3               	movwf	?___lmul+3
 12876  1B58  087A               	movf	___lmul@product+2,w
 12877  1B59  00F2               	movwf	?___lmul+2
 12878  1B5A  0879               	movf	___lmul@product+1,w
 12879  1B5B  00F1               	movwf	?___lmul+1
 12880  1B5C  0878               	movf	___lmul@product,w
 12881  1B5D  00F0               	movwf	?___lmul
 12882  1B5E  0008               	return
 12883  1B5F                     __end_of___lmul:	
 12884                           
 12885                           	psect	text44
 12886  1A5F                     __ptext44:	
 12887 ;; *************** function _UART_send_break_timed *****************
 12888 ;; Defined at:
 12889 ;;		line 334 in file "UART.c"
 12890 ;; Parameters:    Size  Location     Type
 12891 ;;  US              2   10[COMMON] unsigned int 
 12892 ;; Auto vars:     Size  Location     Type
 12893 ;;		None
 12894 ;; Return value:  Size  Location     Type
 12895 ;;		None               void
 12896 ;; Registers used:
 12897 ;;		wreg, status,2, status,0, pclath, cstack
 12898 ;; Tracked objects:
 12899 ;;		On entry : 0/0
 12900 ;;		On exit  : 0/0
 12901 ;;		Unchanged: 0/0
 12902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12903 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12905 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12906 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12907 ;;Total ram usage:        3 bytes
 12908 ;; Hardware stack levels used:    1
 12909 ;; Hardware stack levels required when called:    1
 12910 ;; This function calls:
 12911 ;;		i1_delayUS
 12912 ;; This function is called by:
 12913 ;;		_isr
 12914 ;;		_Process_PS2_ScanCode
 12915 ;; This function uses a non-reentrant model
 12916 ;;
 12917                           
 12918                           
 12919                           ;psect for function _UART_send_break_timed
 12920  1A5F                     _UART_send_break_timed:	
 12921                           
 12922                           ;UART.c: 337: LATC |= 0b00000100;
 12923                           
 12924                           ;incstack = 0
 12925                           ; Regs used in _UART_send_break_timed: [wreg+status,2+status,0+pclath+cstack]
 12926  1A5F  0022               	movlb	2	; select bank2
 12927  1A60  150E               	bsf	14,2	;volatile
 12928                           
 12929                           ;UART.c: 338: PPSLOCK =0;
 12930  1A61  003C               	movlb	28	; select bank28
 12931  1A62  018F               	clrf	15	;volatile
 12932                           
 12933                           ;UART.c: 339: RC2PPS = 0b00000000;
 12934  1A63  003D               	movlb	29	; select bank29
 12935  1A64  01A2               	clrf	34	;volatile
 12936                           
 12937                           ;UART.c: 340: PPSLOCK =1;
 12938  1A65  3001               	movlw	1
 12939  1A66  003C               	movlb	28	; select bank28
 12940  1A67  008F               	movwf	15	;volatile
 12941                           
 12942                           ;UART.c: 342: LATC &= ~0b00000100;
 12943  1A68  30FB               	movlw	251
 12944  1A69  00FC               	movwf	??_UART_send_break_timed
 12945  1A6A  087C               	movf	??_UART_send_break_timed,w
 12946  1A6B  0022               	movlb	2	; select bank2
 12947  1A6C  058E               	andwf	14,f	;volatile
 12948                           
 12949                           ;UART.c: 343: delayUS(US);
 12950  1A6D  087A               	movf	UART_send_break_timed@US,w
 12951  1A6E  00F0               	movwf	i1delayUS@US
 12952  1A6F  087B               	movf	UART_send_break_timed@US+1,w
 12953  1A70  00F1               	movwf	i1delayUS@US+1
 12954  1A71  01F2               	clrf	i1delayUS@US+2
 12955  1A72  01F3               	clrf	i1delayUS@US+3
 12956  1A73  319B  23F2         	fcall	i1_delayUS
 12957                           
 12958                           ;UART.c: 344: LATC |= 0b00000100;
 12959  1A75  0022               	movlb	2	; select bank2
 12960  1A76  150E               	bsf	14,2	;volatile
 12961                           
 12962                           ;UART.c: 346: PPSLOCK =0;
 12963  1A77  003C               	movlb	28	; select bank28
 12964  1A78  018F               	clrf	15	;volatile
 12965                           
 12966                           ;UART.c: 347: RC2PPS = 0b00010100;
 12967  1A79  3014               	movlw	20
 12968  1A7A  003D               	movlb	29	; select bank29
 12969  1A7B  00A2               	movwf	34	;volatile
 12970                           
 12971                           ;UART.c: 348: CKPPS = 0b00010010;
 12972  1A7C  3012               	movlw	18
 12973  1A7D  003C               	movlb	28	; select bank28
 12974  1A7E  00A5               	movwf	37	;volatile
 12975                           
 12976                           ;UART.c: 350: RXPPS = 0b00010101;
 12977  1A7F  3015               	movlw	21
 12978  1A80  00A4               	movwf	36	;volatile
 12979                           
 12980                           ;UART.c: 352: PPSLOCK =1;
 12981  1A81  3001               	movlw	1
 12982  1A82  008F               	movwf	15	;volatile
 12983  1A83  0008               	return
 12984  1A84                     __end_of_UART_send_break_timed:	
 12985                           
 12986                           	psect	text45
 12987  18DB                     __ptext45:	
 12988 ;; *************** function _UART_send_break *****************
 12989 ;; Defined at:
 12990 ;;		line 322 in file "UART.c"
 12991 ;; Parameters:    Size  Location     Type
 12992 ;;		None
 12993 ;; Auto vars:     Size  Location     Type
 12994 ;;		None
 12995 ;; Return value:  Size  Location     Type
 12996 ;;		None               void
 12997 ;; Registers used:
 12998 ;;		wreg
 12999 ;; Tracked objects:
 13000 ;;		On entry : 0/0
 13001 ;;		On exit  : 0/0
 13002 ;;		Unchanged: 0/0
 13003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13007 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13008 ;;Total ram usage:        0 bytes
 13009 ;; Hardware stack levels used:    1
 13010 ;; This function calls:
 13011 ;;		Nothing
 13012 ;; This function is called by:
 13013 ;;		_Process_PS2_ScanCode
 13014 ;; This function uses a non-reentrant model
 13015 ;;
 13016                           
 13017                           
 13018                           ;psect for function _UART_send_break
 13019  18DB                     _UART_send_break:	
 13020                           
 13021                           ;UART.c: 324: TX1STA |= 0b00001000;
 13022                           
 13023                           ;incstack = 0
 13024                           ; Regs used in _UART_send_break: [wreg]
 13025  18DB  0023               	movlb	3	; select bank3
 13026  18DC  159E               	bsf	30,3	;volatile
 13027                           
 13028                           ;UART.c: 325: TXREG = 'd';
 13029  18DD  3064               	movlw	100
 13030  18DE  009A               	movwf	26	;volatile
 13031  18DF  0008               	return
 13032  18E0                     __end_of_UART_send_break:	
 13033                           
 13034                           	psect	text46
 13035  0CF6                     __ptext46:	
 13036 ;; *************** function _SetBaud *****************
 13037 ;; Defined at:
 13038 ;;		line 380 in file "UART.c"
 13039 ;; Parameters:    Size  Location     Type
 13040 ;;  Baud            4   15[BANK1 ] unsigned long 
 13041 ;;  Parity          1   19[BANK1 ] unsigned char 
 13042 ;; Auto vars:     Size  Location     Type
 13043 ;;  buf            50    0[BANK2 ] unsigned char [50]
 13044 ;;  temp            4   58[BANK2 ] unsigned long 
 13045 ;;  Paritytemp      4   54[BANK2 ] unsigned long 
 13046 ;;  Baudtemp        4   50[BANK2 ] unsigned long 
 13047 ;;  i               1   62[BANK2 ] unsigned char 
 13048 ;; Return value:  Size  Location     Type
 13049 ;;		None               void
 13050 ;; Registers used:
 13051 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13052 ;; Tracked objects:
 13053 ;;		On entry : 0/0
 13054 ;;		On exit  : 0/0
 13055 ;;		Unchanged: 0/0
 13056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13057 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 13058 ;;      Locals:         0       0       0      63       0       0       0       0       0       0       0       0       
      +0       0
 13059 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
 13060 ;;      Totals:         0       0      13      63       0       0       0       0       0       0       0       0       
      +0       0
 13061 ;;Total ram usage:       76 bytes
 13062 ;; Hardware stack levels used:    1
 13063 ;; Hardware stack levels required when called:    4
 13064 ;; This function calls:
 13065 ;;		_WriteBaud
 13066 ;;		i1_InitUART
 13067 ;;		i1_ReadBaud
 13068 ;;		i1_UARTstringWAIT
 13069 ;;		i1_delayUS
 13070 ;;		i1_sprintf
 13071 ;; This function is called by:
 13072 ;;		_Process_PS2_ScanCode
 13073 ;; This function uses a non-reentrant model
 13074 ;;
 13075                           
 13076                           
 13077                           ;psect for function _SetBaud
 13078  0CF6                     _SetBaud:	
 13079                           
 13080                           ;UART.c: 382: unsigned char buf[50];
 13081                           ;UART.c: 383: unsigned long Baudtemp=0;
 13082                           
 13083                           ;incstack = 0
 13084                           ; Regs used in _SetBaud: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13085  0CF6  3000               	movlw	0
 13086  0CF7  0022               	movlb	2	; select bank2
 13087  0CF8  00D5               	movwf	(SetBaud@Baudtemp+3)^(0+256)
 13088  0CF9  3000               	movlw	0
 13089  0CFA  00D4               	movwf	(SetBaud@Baudtemp+2)^(0+256)
 13090  0CFB  3000               	movlw	0
 13091  0CFC  00D3               	movwf	(SetBaud@Baudtemp+1)^(0+256)
 13092  0CFD  3000               	movlw	0
 13093  0CFE  00D2               	movwf	SetBaud@Baudtemp^(0+256)
 13094                           
 13095                           ;UART.c: 384: unsigned long Paritytemp=0;
 13096  0CFF  3000               	movlw	0
 13097  0D00  00D9               	movwf	(SetBaud@Paritytemp+3)^(0+256)
 13098  0D01  3000               	movlw	0
 13099  0D02  00D8               	movwf	(SetBaud@Paritytemp+2)^(0+256)
 13100  0D03  3000               	movlw	0
 13101  0D04  00D7               	movwf	(SetBaud@Paritytemp+1)^(0+256)
 13102  0D05  3000               	movlw	0
 13103  0D06  00D6               	movwf	SetBaud@Paritytemp^(0+256)
 13104                           
 13105                           ;UART.c: 385: unsigned long temp;
 13106                           ;UART.c: 386: unsigned char i =0;
 13107  0D07  01DE               	clrf	SetBaud@i^(0+256)
 13108                           
 13109                           ;UART.c: 388: WriteBaud((0x1800 >> 5), Baud, Parity);
 13110  0D08  30C0               	movlw	192
 13111  0D09  0021               	movlb	1	; select bank1
 13112  0D0A  00A0               	movwf	WriteBaud@row^(0+128)
 13113  0D0B  3000               	movlw	0
 13114  0D0C  00A1               	movwf	(WriteBaud@row^(0+128)+1)
 13115  0D0D  0832               	movf	(SetBaud@Baud+3)^(0+128),w
 13116  0D0E  00A5               	movwf	(WriteBaud@Baud+3)^(0+128)
 13117  0D0F  0831               	movf	(SetBaud@Baud+2)^(0+128),w
 13118  0D10  00A4               	movwf	(WriteBaud@Baud+2)^(0+128)
 13119  0D11  0830               	movf	(SetBaud@Baud+1)^(0+128),w
 13120  0D12  00A3               	movwf	(WriteBaud@Baud+1)^(0+128)
 13121  0D13  082F               	movf	SetBaud@Baud^(0+128),w
 13122  0D14  00A2               	movwf	WriteBaud@Baud^(0+128)
 13123  0D15  0833               	movf	SetBaud@Parity^(0+128),w
 13124  0D16  00B4               	movwf	??_SetBaud^(0+128)
 13125  0D17  0834               	movf	??_SetBaud^(0+128),w
 13126  0D18  00A6               	movwf	WriteBaud@Parity^(0+128)
 13127  0D19  3192  225D  318C   	fcall	_WriteBaud
 13128                           
 13129                           ;UART.c: 389: temp = ReadBaud((0x1800 >> 5), 0);
 13130  0D1C  30C0               	movlw	192
 13131  0D1D  0020               	movlb	0	; select bank0
 13132  0D1E  00A4               	movwf	i1ReadBaud@row
 13133  0D1F  3000               	movlw	0
 13134  0D20  00A5               	movwf	i1ReadBaud@row+1
 13135  0D21  01A6               	clrf	i1ReadBaud@column
 13136  0D22  3191  2195  318C   	fcall	i1_ReadBaud
 13137  0D25  0020               	movlb	0	; select bank0
 13138  0D26  0827               	movf	?i1_ReadBaud+3,w
 13139  0D27  0022               	movlb	2	; select bank2
 13140  0D28  00DD               	movwf	(SetBaud@temp+3)^(0+256)
 13141  0D29  0020               	movlb	0	; select bank0
 13142  0D2A  0826               	movf	?i1_ReadBaud+2,w
 13143  0D2B  0022               	movlb	2	; select bank2
 13144  0D2C  00DC               	movwf	(SetBaud@temp+2)^(0+256)
 13145  0D2D  0020               	movlb	0	; select bank0
 13146  0D2E  0825               	movf	?i1_ReadBaud+1,w
 13147  0D2F  0022               	movlb	2	; select bank2
 13148  0D30  00DB               	movwf	(SetBaud@temp+1)^(0+256)
 13149  0D31  0020               	movlb	0	; select bank0
 13150  0D32  0824               	movf	?i1_ReadBaud,w
 13151  0D33  0022               	movlb	2	; select bank2
 13152  0D34  00DA               	movwf	SetBaud@temp^(0+256)
 13153                           
 13154                           ;UART.c: 390: Baudtemp = temp & 0x000FFFFF;
 13155  0D35  30FF               	movlw	255
 13156  0D36  055A               	andwf	SetBaud@temp^(0+256),w
 13157  0D37  00D2               	movwf	SetBaud@Baudtemp^(0+256)
 13158  0D38  30FF               	movlw	255
 13159  0D39  055B               	andwf	(SetBaud@temp+1)^(0+256),w
 13160  0D3A  00D3               	movwf	(SetBaud@Baudtemp+1)^(0+256)
 13161  0D3B  300F               	movlw	15
 13162  0D3C  055C               	andwf	(SetBaud@temp+2)^(0+256),w
 13163  0D3D  00D4               	movwf	(SetBaud@Baudtemp+2)^(0+256)
 13164  0D3E  3000               	movlw	0
 13165  0D3F  055D               	andwf	(SetBaud@temp+3)^(0+256),w
 13166  0D40  00D5               	movwf	(SetBaud@Baudtemp+3)^(0+256)
 13167                           
 13168                           ;UART.c: 391: Paritytemp = (unsigned char)((temp & 0x00F00000) >> 20);
 13169  0D41  085A               	movf	SetBaud@temp^(0+256),w
 13170  0D42  0021               	movlb	1	; select bank1
 13171  0D43  00B4               	movwf	??_SetBaud^(0+128)
 13172  0D44  0022               	movlb	2	; select bank2
 13173  0D45  085B               	movf	(SetBaud@temp+1)^(0+256),w
 13174  0D46  0021               	movlb	1	; select bank1
 13175  0D47  00B5               	movwf	(??_SetBaud^(0+128)+1)
 13176  0D48  0022               	movlb	2	; select bank2
 13177  0D49  085C               	movf	(SetBaud@temp+2)^(0+256),w
 13178  0D4A  0021               	movlb	1	; select bank1
 13179  0D4B  00B6               	movwf	(??_SetBaud^(0+128)+2)
 13180  0D4C  0022               	movlb	2	; select bank2
 13181  0D4D  085D               	movf	(SetBaud@temp+3)^(0+256),w
 13182  0D4E  0021               	movlb	1	; select bank1
 13183  0D4F  00B7               	movwf	(??_SetBaud^(0+128)+3)
 13184  0D50  3014               	movlw	20
 13185  0D51                     u522_25:	
 13186  0D51  36B7               	lsrf	(??_SetBaud^(0+128)+3),f
 13187  0D52  0CB6               	rrf	(??_SetBaud^(0+128)+2),f
 13188  0D53  0CB5               	rrf	(??_SetBaud^(0+128)+1),f
 13189  0D54  0CB4               	rrf	??_SetBaud^(0+128),f
 13190  0D55  0B89               	decfsz	9,f
 13191  0D56  2D51               	goto	u522_25
 13192  0D57  0834               	movf	??_SetBaud^(0+128),w
 13193  0D58  390F               	andlw	15
 13194  0D59  00B8               	movwf	(??_SetBaud+4)^(0+128)
 13195  0D5A  01B9               	clrf	((??_SetBaud+4)^(0+128)+1)
 13196  0D5B  01BA               	clrf	((??_SetBaud+4)^(0+128)+2)
 13197  0D5C  01BB               	clrf	((??_SetBaud+4)^(0+128)+3)
 13198  0D5D  083B               	movf	(??_SetBaud+7)^(0+128),w
 13199  0D5E  0022               	movlb	2	; select bank2
 13200  0D5F  00D9               	movwf	(SetBaud@Paritytemp+3)^(0+256)
 13201  0D60  0021               	movlb	1	; select bank1
 13202  0D61  083A               	movf	(??_SetBaud+6)^(0+128),w
 13203  0D62  0022               	movlb	2	; select bank2
 13204  0D63  00D8               	movwf	(SetBaud@Paritytemp+2)^(0+256)
 13205  0D64  0021               	movlb	1	; select bank1
 13206  0D65  0839               	movf	(??_SetBaud+5)^(0+128),w
 13207  0D66  0022               	movlb	2	; select bank2
 13208  0D67  00D7               	movwf	(SetBaud@Paritytemp+1)^(0+256)
 13209  0D68  0021               	movlb	1	; select bank1
 13210  0D69  0838               	movf	(??_SetBaud+4)^(0+128),w
 13211  0D6A  0022               	movlb	2	; select bank2
 13212  0D6B  00D6               	movwf	SetBaud@Paritytemp^(0+256)
 13213                           
 13214                           ;UART.c: 393: InitUART(Baud, Parity);
 13215  0D6C  0021               	movlb	1	; select bank1
 13216  0D6D  0832               	movf	(SetBaud@Baud+3)^(0+128),w
 13217  0D6E  0020               	movlb	0	; select bank0
 13218  0D6F  00A3               	movwf	i1InitUART@Baud+3
 13219  0D70  0021               	movlb	1	; select bank1
 13220  0D71  0831               	movf	(SetBaud@Baud+2)^(0+128),w
 13221  0D72  0020               	movlb	0	; select bank0
 13222  0D73  00A2               	movwf	i1InitUART@Baud+2
 13223  0D74  0021               	movlb	1	; select bank1
 13224  0D75  0830               	movf	(SetBaud@Baud+1)^(0+128),w
 13225  0D76  0020               	movlb	0	; select bank0
 13226  0D77  00A1               	movwf	i1InitUART@Baud+1
 13227  0D78  0021               	movlb	1	; select bank1
 13228  0D79  082F               	movf	SetBaud@Baud^(0+128),w
 13229  0D7A  0020               	movlb	0	; select bank0
 13230  0D7B  00A0               	movwf	i1InitUART@Baud
 13231  0D7C  0021               	movlb	1	; select bank1
 13232  0D7D  0833               	movf	SetBaud@Parity^(0+128),w
 13233  0D7E  00B4               	movwf	??_SetBaud^(0+128)
 13234  0D7F  0834               	movf	??_SetBaud^(0+128),w
 13235  0D80  0020               	movlb	0	; select bank0
 13236  0D81  00A4               	movwf	i1InitUART@parity
 13237  0D82  3195  2525  318C   	fcall	i1_InitUART
 13238                           
 13239                           ;UART.c: 394: UARTstringWAIT("\r\n");
 13240  0D85  3041               	movlw	low ((STR_15+16)| (0+32768))
 13241  0D86  0020               	movlb	0	; select bank0
 13242  0D87  00A1               	movwf	i1UARTstringWAIT@data
 13243  0D88  308A               	movlw	high ((STR_15+16)| (0+32768))
 13244  0D89  00A2               	movwf	i1UARTstringWAIT@data+1
 13245  0D8A  319B  23C0  318C   	fcall	i1_UARTstringWAIT
 13246                           
 13247                           ;UART.c: 395: delayUS(10000);
 13248  0D8D  3000               	movlw	0
 13249  0D8E  00F3               	movwf	i1delayUS@US+3
 13250  0D8F  3000               	movlw	0
 13251  0D90  00F2               	movwf	i1delayUS@US+2
 13252  0D91  3027               	movlw	39
 13253  0D92  00F1               	movwf	i1delayUS@US+1
 13254  0D93  3010               	movlw	16
 13255  0D94  00F0               	movwf	i1delayUS@US
 13256  0D95  319B  23F2  318C   	fcall	i1_delayUS
 13257                           
 13258                           ;UART.c: 396: if((Baud != Baudtemp) || (Parity != Paritytemp))
 13259  0D98  0022               	movlb	2	; select bank2
 13260  0D99  0855               	movf	(SetBaud@Baudtemp+3)^(0+256),w
 13261  0D9A  0021               	movlb	1	; select bank1
 13262  0D9B  0632               	xorwf	(SetBaud@Baud+3)^(0+128),w
 13263  0D9C  1D03               	skipz
 13264  0D9D  2DAE               	goto	u523_25
 13265  0D9E  0022               	movlb	2	; select bank2
 13266  0D9F  0854               	movf	(SetBaud@Baudtemp+2)^(0+256),w
 13267  0DA0  0021               	movlb	1	; select bank1
 13268  0DA1  0631               	xorwf	(SetBaud@Baud+2)^(0+128),w
 13269  0DA2  1D03               	skipz
 13270  0DA3  2DAE               	goto	u523_25
 13271  0DA4  0022               	movlb	2	; select bank2
 13272  0DA5  0853               	movf	(SetBaud@Baudtemp+1)^(0+256),w
 13273  0DA6  0021               	movlb	1	; select bank1
 13274  0DA7  0630               	xorwf	(SetBaud@Baud+1)^(0+128),w
 13275  0DA8  1D03               	skipz
 13276  0DA9  2DAE               	goto	u523_25
 13277  0DAA  0022               	movlb	2	; select bank2
 13278  0DAB  0852               	movf	SetBaud@Baudtemp^(0+256),w
 13279  0DAC  0021               	movlb	1	; select bank1
 13280  0DAD  062F               	xorwf	SetBaud@Baud^(0+128),w
 13281  0DAE                     u523_25:	
 13282  0DAE  1D03               	skipz
 13283  0DAF  2DCD               	goto	i1l4642
 13284  0DB0  0833               	movf	SetBaud@Parity^(0+128),w
 13285  0DB1  00B4               	movwf	??_SetBaud^(0+128)
 13286  0DB2  01B5               	clrf	(??_SetBaud^(0+128)+1)
 13287  0DB3  01B6               	clrf	(??_SetBaud^(0+128)+2)
 13288  0DB4  01B7               	clrf	(??_SetBaud^(0+128)+3)
 13289  0DB5  0022               	movlb	2	; select bank2
 13290  0DB6  0859               	movf	(SetBaud@Paritytemp+3)^(0+256),w
 13291  0DB7  0021               	movlb	1	; select bank1
 13292  0DB8  0637               	xorwf	(??_SetBaud+3)^(0+128),w
 13293  0DB9  1D03               	skipz
 13294  0DBA  2DCB               	goto	u524_25
 13295  0DBB  0022               	movlb	2	; select bank2
 13296  0DBC  0858               	movf	(SetBaud@Paritytemp+2)^(0+256),w
 13297  0DBD  0021               	movlb	1	; select bank1
 13298  0DBE  0636               	xorwf	(??_SetBaud+2)^(0+128),w
 13299  0DBF  1D03               	skipz
 13300  0DC0  2DCB               	goto	u524_25
 13301  0DC1  0022               	movlb	2	; select bank2
 13302  0DC2  0857               	movf	(SetBaud@Paritytemp+1)^(0+256),w
 13303  0DC3  0021               	movlb	1	; select bank1
 13304  0DC4  0635               	xorwf	(??_SetBaud+1)^(0+128),w
 13305  0DC5  1D03               	skipz
 13306  0DC6  2DCB               	goto	u524_25
 13307  0DC7  0022               	movlb	2	; select bank2
 13308  0DC8  0856               	movf	SetBaud@Paritytemp^(0+256),w
 13309  0DC9  0021               	movlb	1	; select bank1
 13310  0DCA  0634               	xorwf	??_SetBaud^(0+128),w
 13311  0DCB                     u524_25:	
 13312  0DCB  1903               	skipnz
 13313  0DCC  2DE0               	goto	i1l4646
 13314  0DCD                     i1l4642:	
 13315                           
 13316                           ;UART.c: 397: {
 13317                           ;UART.c: 398: UARTstringWAIT("KeyBoard Program Fail\r\n");
 13318  0DCD  30ED               	movlw	low (STR_11| (0+32768))
 13319  0DCE  0020               	movlb	0	; select bank0
 13320  0DCF  00A1               	movwf	i1UARTstringWAIT@data
 13321  0DD0  3089               	movlw	high (STR_11| (0+32768))
 13322  0DD1  00A2               	movwf	i1UARTstringWAIT@data+1
 13323  0DD2  319B  23C0  318C   	fcall	i1_UARTstringWAIT
 13324                           
 13325                           ;UART.c: 399: delayUS(10000);
 13326  0DD5  3000               	movlw	0
 13327  0DD6  00F3               	movwf	i1delayUS@US+3
 13328  0DD7  3000               	movlw	0
 13329  0DD8  00F2               	movwf	i1delayUS@US+2
 13330  0DD9  3027               	movlw	39
 13331  0DDA  00F1               	movwf	i1delayUS@US+1
 13332  0DDB  3010               	movlw	16
 13333  0DDC  00F0               	movwf	i1delayUS@US
 13334  0DDD  319B  23F2  318C   	fcall	i1_delayUS
 13335  0DE0                     i1l4646:	
 13336                           
 13337                           ;UART.c: 400: }
 13338                           ;UART.c: 403: for(i =0;i<10;i++)
 13339  0DE0  0022               	movlb	2	; select bank2
 13340  0DE1  01DE               	clrf	SetBaud@i^(0+256)
 13341  0DE2  300A               	movlw	10
 13342  0DE3  025E               	subwf	SetBaud@i^(0+256),w
 13343  0DE4  1803               	btfsc	3,0
 13344  0DE5  2E0D               	goto	i1l4660
 13345  0DE6                     i1l480:	
 13346                           
 13347                           ;UART.c: 404: {
 13348                           ;UART.c: 405: LATC |= 0b00010000;
 13349  0DE6  160E               	bsf	14,4	;volatile
 13350                           
 13351                           ;UART.c: 406: delayUS(10000);
 13352  0DE7  3000               	movlw	0
 13353  0DE8  00F3               	movwf	i1delayUS@US+3
 13354  0DE9  3000               	movlw	0
 13355  0DEA  00F2               	movwf	i1delayUS@US+2
 13356  0DEB  3027               	movlw	39
 13357  0DEC  00F1               	movwf	i1delayUS@US+1
 13358  0DED  3010               	movlw	16
 13359  0DEE  00F0               	movwf	i1delayUS@US
 13360  0DEF  319B  23F2  318C   	fcall	i1_delayUS
 13361                           
 13362                           ;UART.c: 407: LATC &= ~0b00010000;
 13363  0DF2  30EF               	movlw	239
 13364  0DF3  0021               	movlb	1	; select bank1
 13365  0DF4  00B4               	movwf	??_SetBaud^(0+128)
 13366  0DF5  0834               	movf	??_SetBaud^(0+128),w
 13367  0DF6  0022               	movlb	2	; select bank2
 13368  0DF7  058E               	andwf	14,f	;volatile
 13369                           
 13370                           ;UART.c: 408: delayUS(10000);
 13371  0DF8  3000               	movlw	0
 13372  0DF9  00F3               	movwf	i1delayUS@US+3
 13373  0DFA  3000               	movlw	0
 13374  0DFB  00F2               	movwf	i1delayUS@US+2
 13375  0DFC  3027               	movlw	39
 13376  0DFD  00F1               	movwf	i1delayUS@US+1
 13377  0DFE  3010               	movlw	16
 13378  0DFF  00F0               	movwf	i1delayUS@US
 13379  0E00  319B  23F2  318C   	fcall	i1_delayUS
 13380  0E03  3001               	movlw	1
 13381  0E04  0021               	movlb	1	; select bank1
 13382  0E05  00B4               	movwf	??_SetBaud^(0+128)
 13383  0E06  0834               	movf	??_SetBaud^(0+128),w
 13384  0E07  0022               	movlb	2	; select bank2
 13385  0E08  07DE               	addwf	SetBaud@i^(0+256),f
 13386  0E09  300A               	movlw	10
 13387  0E0A  025E               	subwf	SetBaud@i^(0+256),w
 13388  0E0B  1C03               	skipc
 13389  0E0C  2DE6               	goto	i1l480
 13390  0E0D                     i1l4660:	
 13391                           
 13392                           ;UART.c: 409: }
 13393                           ;UART.c: 411: sprintf(buf,"KeyBoard Baud is %lu",Baud);
 13394  0E0D  3020               	movlw	low SetBaud@buf
 13395  0E0E  0020               	movlb	0	; select bank0
 13396  0E0F  00AA               	movwf	i1sprintf@sp
 13397  0E10  3001               	movlw	high SetBaud@buf
 13398  0E11  00AB               	movwf	i1sprintf@sp+1
 13399  0E12  301C               	movlw	low (STR_8| (0+32768))
 13400  0E13  00AC               	movwf	i1sprintf@f
 13401  0E14  308A               	movlw	high (STR_8| (0+32768))
 13402  0E15  00AD               	movwf	i1sprintf@f+1
 13403  0E16  0021               	movlb	1	; select bank1
 13404  0E17  0832               	movf	(SetBaud@Baud+3)^(0+128),w
 13405  0E18  0020               	movlb	0	; select bank0
 13406  0E19  00B1               	movwf	?i1_sprintf+7
 13407  0E1A  0021               	movlb	1	; select bank1
 13408  0E1B  0831               	movf	(SetBaud@Baud+2)^(0+128),w
 13409  0E1C  0020               	movlb	0	; select bank0
 13410  0E1D  00B0               	movwf	?i1_sprintf+6
 13411  0E1E  0021               	movlb	1	; select bank1
 13412  0E1F  0830               	movf	(SetBaud@Baud+1)^(0+128),w
 13413  0E20  0020               	movlb	0	; select bank0
 13414  0E21  00AF               	movwf	?i1_sprintf+5
 13415  0E22  0021               	movlb	1	; select bank1
 13416  0E23  082F               	movf	SetBaud@Baud^(0+128),w
 13417  0E24  0020               	movlb	0	; select bank0
 13418  0E25  00AE               	movwf	?i1_sprintf+4
 13419  0E26  3196  2614  318C   	fcall	i1_sprintf
 13420                           
 13421                           ;UART.c: 412: UARTstringWAIT(buf);
 13422  0E29  3020               	movlw	low SetBaud@buf
 13423  0E2A  0020               	movlb	0	; select bank0
 13424  0E2B  00A1               	movwf	i1UARTstringWAIT@data
 13425  0E2C  3001               	movlw	high SetBaud@buf
 13426  0E2D  00A2               	movwf	i1UARTstringWAIT@data+1
 13427  0E2E  319B  23C0  318C   	fcall	i1_UARTstringWAIT
 13428                           
 13429                           ;UART.c: 413: if(Parity)
 13430  0E31  0021               	movlb	1	; select bank1
 13431  0E32  0833               	movf	SetBaud@Parity^(0+128),w
 13432  0E33  1903               	btfsc	3,2
 13433  0E34  2E57               	goto	i1l4680
 13434                           
 13435                           ;UART.c: 414: {
 13436                           ;UART.c: 415: switch (Parity)
 13437  0E35  2E4A               	goto	i1l4678
 13438  0E36                     i1l4668:	
 13439                           ;UART.c: 416: {
 13440                           ;UART.c: 417: case 1:
 13441                           
 13442                           
 13443                           ;UART.c: 418: UARTstringWAIT(OddParityMSG);
 13444  0E36  3011               	movlw	low (_OddParityMSG| (0+32768))
 13445  0E37  0020               	movlb	0	; select bank0
 13446  0E38  00A1               	movwf	i1UARTstringWAIT@data
 13447  0E39  3089               	movlw	high (_OddParityMSG| (0+32768))
 13448  0E3A  2E5B               	goto	L20
 13449  0E3B                     i1l4670:	
 13450                           ;UART.c: 420: case 2:
 13451                           
 13452                           ;UART.c: 419: break;
 13453                           
 13454                           
 13455                           ;UART.c: 421: UARTstringWAIT(EvenParityMSG);
 13456  0E3B  30FB               	movlw	low (_EvenParityMSG| (0+32768))
 13457  0E3C  0020               	movlb	0	; select bank0
 13458  0E3D  00A1               	movwf	i1UARTstringWAIT@data
 13459  0E3E  3088               	movlw	high (_EvenParityMSG| (0+32768))
 13460  0E3F  2E5B               	goto	L20
 13461  0E40                     i1l4672:	
 13462                           ;UART.c: 423: case 3:
 13463                           
 13464                           ;UART.c: 422: break;
 13465                           
 13466                           
 13467                           ;UART.c: 424: UARTstringWAIT(MarkParityMSG);
 13468  0E40  304A               	movlw	low (_MarkParityMSG| (0+32768))
 13469  0E41  0020               	movlb	0	; select bank0
 13470  0E42  00A1               	movwf	i1UARTstringWAIT@data
 13471  0E43  3089               	movlw	high (_MarkParityMSG| (0+32768))
 13472  0E44  2E5B               	goto	L20
 13473  0E45                     i1l4674:	
 13474                           ;UART.c: 426: default:
 13475                           
 13476                           ;UART.c: 425: break;
 13477                           
 13478                           
 13479                           ;UART.c: 427: UARTstringWAIT(SpaceParityMSG);
 13480  0E45  303A               	movlw	low (_SpaceParityMSG| (0+32768))
 13481  0E46  0020               	movlb	0	; select bank0
 13482  0E47  00A1               	movwf	i1UARTstringWAIT@data
 13483  0E48  3089               	movlw	high (_SpaceParityMSG| (0+32768))
 13484  0E49  2E5B               	goto	L20
 13485  0E4A                     i1l4678:	
 13486                           ;UART.c: 429: }
 13487                           
 13488                           ;UART.c: 428: break;
 13489                           
 13490  0E4A  0021               	movlb	1	; select bank1
 13491  0E4B  0833               	movf	SetBaud@Parity^(0+128),w
 13492                           
 13493                           ; Switch size 1, requested type "space"
 13494                           ; Number of cases is 3, Range of values is 1 to 3
 13495                           ; switch strategies available:
 13496                           ; Name         Instructions Cycles
 13497                           ; simple_byte           10     6 (average)
 13498                           ; direct_byte           15     9 (fixed)
 13499                           ; jumptable            263     9 (fixed)
 13500                           ;	Chosen strategy is simple_byte
 13501  0E4C  3A01               	xorlw	1	; case 1
 13502  0E4D  1903               	skipnz
 13503  0E4E  2E36               	goto	i1l4668
 13504  0E4F  3A03               	xorlw	3	; case 2
 13505  0E50  1903               	skipnz
 13506  0E51  2E3B               	goto	i1l4670
 13507  0E52  3A01               	xorlw	1	; case 3
 13508  0E53  1903               	skipnz
 13509  0E54  2E40               	goto	i1l4672
 13510  0E55  2E45               	goto	i1l4674
 13511                           
 13512                           ;UART.c: 430: }
 13513  0E56  2E5F               	goto	i1l489
 13514  0E57                     i1l4680:	
 13515                           
 13516                           ;UART.c: 431: else
 13517                           ;UART.c: 432: {
 13518                           ;UART.c: 433: UARTstringWAIT(NoParityMSG);
 13519  0E57  3026               	movlw	low (_NoParityMSG| (0+32768))
 13520  0E58  0020               	movlb	0	; select bank0
 13521  0E59  00A1               	movwf	i1UARTstringWAIT@data
 13522  0E5A  3089               	movlw	high (_NoParityMSG| (0+32768))
 13523  0E5B                     L20:	
 13524  0E5B  00A2               	movwf	i1UARTstringWAIT@data+1
 13525  0E5C  319B  23C0  318C   	fcall	i1_UARTstringWAIT
 13526  0E5F                     i1l489:	
 13527                           
 13528                           ;UART.c: 434: }
 13529                           ;UART.c: 435: UARTstringWAIT("\r\n");
 13530  0E5F  3041               	movlw	low ((STR_15+16)| (0+32768))
 13531  0E60  0020               	movlb	0	; select bank0
 13532  0E61  00A1               	movwf	i1UARTstringWAIT@data
 13533  0E62  308A               	movlw	high ((STR_15+16)| (0+32768))
 13534  0E63  00A2               	movwf	i1UARTstringWAIT@data+1
 13535  0E64  319B  23C0  318C   	fcall	i1_UARTstringWAIT
 13536                           
 13537                           ;UART.c: 436: delayUS(10000);
 13538  0E67  3000               	movlw	0
 13539  0E68  00F3               	movwf	i1delayUS@US+3
 13540  0E69  3000               	movlw	0
 13541  0E6A  00F2               	movwf	i1delayUS@US+2
 13542  0E6B  3027               	movlw	39
 13543  0E6C  00F1               	movwf	i1delayUS@US+1
 13544  0E6D  3010               	movlw	16
 13545  0E6E  00F0               	movwf	i1delayUS@US
 13546  0E6F  319B  23F2         	fcall	i1_delayUS
 13547  0E71  0008               	return
 13548  0E72                     __end_of_SetBaud:	
 13549                           
 13550                           	psect	text47
 13551  1614                     __ptext47:	
 13552 ;; *************** function i1_sprintf *****************
 13553 ;; Defined at:
 13554 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
 13555 ;; Parameters:    Size  Location     Type
 13556 ;;  sp              2   10[BANK0 ] PTR unsigned char 
 13557 ;;		 -> Process_PS2_ScanCode@buf(60), SetBaud@buf(50), Init_System@buf(60), 
 13558 ;;  f               2   12[BANK0 ] PTR const unsigned char 
 13559 ;;		 -> STR_19(33), STR_12(21), STR_8(21), 
 13560 ;; Auto vars:     Size  Location     Type
 13561 ;;  sprintf         4   27[BANK0 ] struct .
 13562 ;;  sprintf         2   31[BANK0 ] PTR void [1]
 13563 ;;		 -> ?i1_sprintf(2), ?_sprintf(2), 
 13564 ;;  sprintf         2   25[BANK0 ] int 
 13565 ;;  sprintf         1   33[BANK0 ] char 
 13566 ;;  sprintf         1   24[BANK0 ] unsigned char 
 13567 ;; Return value:  Size  Location     Type
 13568 ;;                  2   10[BANK0 ] int 
 13569 ;; Registers used:
 13570 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13571 ;; Tracked objects:
 13572 ;;		On entry : 0/0
 13573 ;;		On exit  : 0/0
 13574 ;;		Unchanged: 0/0
 13575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13576 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13577 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13578 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13579 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13580 ;;Total ram usage:       24 bytes
 13581 ;; Hardware stack levels used:    1
 13582 ;; Hardware stack levels required when called:    1
 13583 ;; This function calls:
 13584 ;;		i1___lldiv
 13585 ;;		i1___llmod
 13586 ;; This function is called by:
 13587 ;;		_SetBaud
 13588 ;;		_Process_PS2_ScanCode
 13589 ;; This function uses a non-reentrant model
 13590 ;;
 13591                           
 13592                           
 13593                           ;psect for function i1_sprintf
 13594  1614                     i1_sprintf:	
 13595                           
 13596                           ;doprnt.c: 494: va_list ap;
 13597                           ;doprnt.c: 499: signed char c;
 13598                           ;doprnt.c: 504: int prec;
 13599                           ;doprnt.c: 508: unsigned char flag;
 13600                           ;doprnt.c: 527: union {
 13601                           ;doprnt.c: 528: unsigned long _val;
 13602                           ;doprnt.c: 529: struct {
 13603                           ;doprnt.c: 530: const char * _cp;
 13604                           ;doprnt.c: 531: unsigned _len;
 13605                           ;doprnt.c: 532: } _str;
 13606                           ;doprnt.c: 533: } _val;
 13607                           ;doprnt.c: 542: *ap = __va_start();
 13608                           
 13609                           ;incstack = 0
 13610                           ; Regs used in i1_sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13611  1614  302E               	movlw	low (?i1_sprintf+4)
 13612  1615  0020               	movlb	0	; select bank0
 13613  1616  00BF               	movwf	i1sprintf@ap
 13614  1617  3000               	movlw	high (?i1_sprintf+4)
 13615  1618  00C0               	movwf	i1sprintf@ap+1
 13616  1619                     i1l4384:	
 13617                           ;doprnt.c: 545: while(c = *f++) {
 13618                           
 13619  1619  082D               	movf	i1sprintf@f+1,w
 13620  161A  00B3               	movwf	??i1_sprintf+1
 13621  161B  082C               	movf	i1sprintf@f,w
 13622  161C  00B2               	movwf	??i1_sprintf
 13623  161D  0AAC               	incf	i1sprintf@f,f
 13624  161E  1903               	skipnz
 13625  161F  0AAD               	incf	i1sprintf@f+1,f
 13626  1620  0832               	movf	??i1_sprintf,w
 13627  1621  0084               	movwf	4
 13628  1622  0833               	movf	??i1_sprintf+1,w
 13629  1623  0085               	movwf	5
 13630  1624  0800               	movf	0,w	;code access
 13631  1625  00B4               	movwf	??i1_sprintf+2
 13632  1626  0834               	movf	??i1_sprintf+2,w
 13633  1627  00C1               	movwf	i1sprintf@c
 13634  1628  08C1               	movf	i1sprintf@c,f
 13635  1629  1903               	btfsc	3,2
 13636  162A  2F04               	goto	i1l4386
 13637                           
 13638                           ;doprnt.c: 547: if(c != '%')
 13639  162B  0841               	movf	i1sprintf@c,w
 13640  162C  3A25               	xorlw	37
 13641  162D  1903               	skipnz
 13642  162E  2E3A               	goto	i1l4344
 13643                           
 13644                           ;doprnt.c: 549: {
 13645                           ;doprnt.c: 550: ((*sp++ = (c)));
 13646  162F  082A               	movf	i1sprintf@sp,w
 13647  1630  0086               	movwf	6
 13648  1631  082B               	movf	i1sprintf@sp+1,w
 13649  1632  0087               	movwf	7
 13650  1633  0841               	movf	i1sprintf@c,w
 13651  1634  0081               	movwf	1
 13652  1635  3001               	movlw	1
 13653  1636  07AA               	addwf	i1sprintf@sp,f
 13654  1637  3000               	movlw	0
 13655  1638  3DAB               	addwfc	i1sprintf@sp+1,f
 13656                           
 13657                           ;doprnt.c: 551: continue;
 13658  1639  2E19               	goto	i1l4384
 13659  163A                     i1l4344:	
 13660                           
 13661                           ;doprnt.c: 552: }
 13662                           ;doprnt.c: 557: flag = 0;
 13663  163A  01B8               	clrf	i1sprintf@flag
 13664                           
 13665                           ;doprnt.c: 644: switch(c = *f++) {
 13666                           
 13667                           ;doprnt.c: 642: loop:
 13668  163B  2E43               	goto	i1l4350
 13669  163C                     i1l1076:	
 13670                           ;doprnt.c: 650: case 'l':
 13671                           
 13672                           ;doprnt.c: 647: goto alldone;
 13673                           
 13674                           ;doprnt.c: 646: case 0:
 13675                           
 13676                           
 13677                           ;doprnt.c: 652: flag |= 0x10;
 13678  163C  1638               	bsf	i1sprintf@flag,4
 13679                           
 13680                           ;doprnt.c: 653: goto loop;
 13681  163D  2E43               	goto	i1l4350
 13682  163E                     i1l4346:	
 13683                           ;doprnt.c: 826: case 'u':
 13684                           
 13685                           ;doprnt.c: 822: continue;
 13686                           
 13687                           ;doprnt.c: 811: default:
 13688                           
 13689                           
 13690                           ;doprnt.c: 827: flag |= 0xC0;
 13691  163E  30C0               	movlw	192
 13692  163F  00B2               	movwf	??i1_sprintf
 13693  1640  0832               	movf	??i1_sprintf,w
 13694  1641  04B8               	iorwf	i1sprintf@flag,f
 13695                           
 13696                           ;doprnt.c: 831: }
 13697                           
 13698                           ;doprnt.c: 828: break;
 13699  1642  2E5A               	goto	i1l1079
 13700  1643                     i1l4350:	
 13701  1643  082D               	movf	i1sprintf@f+1,w
 13702  1644  00B3               	movwf	??i1_sprintf+1
 13703  1645  082C               	movf	i1sprintf@f,w
 13704  1646  00B2               	movwf	??i1_sprintf
 13705  1647  0AAC               	incf	i1sprintf@f,f
 13706  1648  1903               	skipnz
 13707  1649  0AAD               	incf	i1sprintf@f+1,f
 13708  164A  0832               	movf	??i1_sprintf,w
 13709  164B  0084               	movwf	4
 13710  164C  0833               	movf	??i1_sprintf+1,w
 13711  164D  0085               	movwf	5
 13712  164E  0800               	movf	0,w	;code access
 13713  164F  00C1               	movwf	i1sprintf@c
 13714                           
 13715                           ; Switch size 1, requested type "space"
 13716                           ; Number of cases is 3, Range of values is 0 to 117
 13717                           ; switch strategies available:
 13718                           ; Name         Instructions Cycles
 13719                           ; simple_byte           10     6 (average)
 13720                           ; direct_byte          242     6 (fixed)
 13721                           ; jumptable            260     6 (fixed)
 13722                           ;	Chosen strategy is simple_byte
 13723  1650  3A00               	xorlw	0	; case 0
 13724  1651  1903               	skipnz
 13725  1652  2F04               	goto	i1l4386
 13726  1653  3A6C               	xorlw	108	; case 108
 13727  1654  1903               	skipnz
 13728  1655  2E3C               	goto	i1l1076
 13729  1656  3A19               	xorlw	25	; case 117
 13730  1657  1903               	skipnz
 13731  1658  2E3E               	goto	i1l4346
 13732  1659  2E19               	goto	i1l4384
 13733  165A                     i1l1079:	
 13734                           
 13735                           ;doprnt.c: 1282: {
 13736                           ;doprnt.c: 1290: if(flag & 0x10)
 13737  165A  1E38               	btfss	i1sprintf@flag,4
 13738  165B  2E6A               	goto	i1l4356
 13739                           
 13740                           ;doprnt.c: 1291: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 13741  165C  083F               	movf	i1sprintf@ap,w
 13742  165D  0086               	movwf	6
 13743  165E  0840               	movf	i1sprintf@ap+1,w
 13744  165F  0087               	movwf	7
 13745  1660  3F40               	moviw [0]fsr1
 13746  1661  00BB               	movwf	i1sprintf@_val
 13747  1662  3F41               	moviw [1]fsr1
 13748  1663  00BC               	movwf	i1sprintf@_val+1
 13749  1664  3F42               	moviw [2]fsr1
 13750  1665  00BD               	movwf	i1sprintf@_val+2
 13751  1666  3F43               	moviw [3]fsr1
 13752  1667  00BE               	movwf	i1sprintf@_val+3
 13753  1668  3004               	movlw	4
 13754  1669  2E79               	goto	L21
 13755  166A                     i1l4356:	
 13756                           
 13757                           ;doprnt.c: 1292: else
 13758                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 13759  166A  083F               	movf	i1sprintf@ap,w
 13760  166B  0086               	movwf	6
 13761  166C  0840               	movf	i1sprintf@ap+1,w
 13762  166D  0087               	movwf	7
 13763  166E  3F40               	moviw [0]fsr1
 13764  166F  00B2               	movwf	??i1_sprintf
 13765  1670  3F41               	moviw [1]fsr1
 13766  1671  00B3               	movwf	??i1_sprintf+1
 13767  1672  0832               	movf	??i1_sprintf,w
 13768  1673  00BB               	movwf	i1sprintf@_val
 13769  1674  0833               	movf	??i1_sprintf+1,w
 13770  1675  00BC               	movwf	i1sprintf@_val+1
 13771  1676  01BD               	clrf	i1sprintf@_val+2
 13772  1677  01BE               	clrf	i1sprintf@_val+3
 13773  1678  3002               	movlw	2
 13774  1679                     L21:	
 13775  1679  07BF               	addwf	i1sprintf@ap,f
 13776  167A  3000               	movlw	0
 13777  167B  3DC0               	addwfc	i1sprintf@ap+1,f
 13778                           
 13779                           ;doprnt.c: 1296: }
 13780                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13781  167C  01C1               	clrf	i1sprintf@c
 13782  167D  0AC1               	incf	i1sprintf@c,f
 13783  167E  0841               	movf	i1sprintf@c,w
 13784  167F  3A0A               	xorlw	10
 13785  1680  1903               	btfsc	3,2
 13786  1681  2EAF               	goto	i1l4374
 13787  1682                     i1l4366:	
 13788                           
 13789                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
 13790  1682  0841               	movf	i1sprintf@c,w
 13791  1683  00B2               	movwf	??i1_sprintf
 13792  1684  01B3               	clrf	??i1_sprintf+1
 13793  1685  35B2               	lslf	??i1_sprintf,f
 13794  1686  0DB3               	rlf	??i1_sprintf+1,f
 13795  1687  35B2               	lslf	??i1_sprintf,f
 13796  1688  0DB3               	rlf	??i1_sprintf+1,f
 13797  1689  30D3               	movlw	low (_dpowers| (0+32768))
 13798  168A  0732               	addwf	??i1_sprintf,w
 13799  168B  0084               	movwf	4
 13800  168C  3088               	movlw	high (_dpowers| (0+32768))
 13801  168D  3D33               	addwfc	??i1_sprintf+1,w
 13802  168E  0085               	movwf	5
 13803  168F  3F00               	moviw [0]fsr0
 13804  1690  00B4               	movwf	??i1_sprintf+2
 13805  1691  3F01               	moviw [1]fsr0
 13806  1692  00B5               	movwf	??i1_sprintf+3
 13807  1693  3F02               	moviw [2]fsr0
 13808  1694  00B6               	movwf	??i1_sprintf+4
 13809  1695  3F03               	moviw [3]fsr0
 13810  1696  00B7               	movwf	??i1_sprintf+5
 13811  1697  0837               	movf	??i1_sprintf+5,w
 13812  1698  023E               	subwf	i1sprintf@_val+3,w
 13813  1699  1D03               	skipz
 13814  169A  2EA5               	goto	u491_25
 13815  169B  0836               	movf	??i1_sprintf+4,w
 13816  169C  023D               	subwf	i1sprintf@_val+2,w
 13817  169D  1D03               	skipz
 13818  169E  2EA5               	goto	u491_25
 13819  169F  0835               	movf	??i1_sprintf+3,w
 13820  16A0  023C               	subwf	i1sprintf@_val+1,w
 13821  16A1  1D03               	skipz
 13822  16A2  2EA5               	goto	u491_25
 13823  16A3  0834               	movf	??i1_sprintf+2,w
 13824  16A4  023B               	subwf	i1sprintf@_val,w
 13825  16A5                     u491_25:	
 13826  16A5  1C03               	btfss	3,0
 13827  16A6  2EAF               	goto	i1l4374
 13828                           
 13829                           ;doprnt.c: 1316: break;
 13830  16A7  3001               	movlw	1
 13831  16A8  00B2               	movwf	??i1_sprintf
 13832  16A9  0832               	movf	??i1_sprintf,w
 13833  16AA  07C1               	addwf	i1sprintf@c,f
 13834  16AB  0841               	movf	i1sprintf@c,w
 13835  16AC  3A0A               	xorlw	10
 13836  16AD  1D03               	skipz
 13837  16AE  2E82               	goto	i1l4366
 13838  16AF                     i1l4374:	
 13839                           
 13840                           ;doprnt.c: 1431: {
 13841                           ;doprnt.c: 1478: }
 13842                           ;doprnt.c: 1481: prec = c;
 13843  16AF  0841               	movf	i1sprintf@c,w
 13844  16B0  00B9               	movwf	i1sprintf@prec
 13845  16B1  01BA               	clrf	i1sprintf@prec+1
 13846  16B2  1BB9               	btfsc	i1sprintf@prec,7
 13847  16B3  03BA               	decf	i1sprintf@prec+1,f
 13848  16B4                     i1l4382:	
 13849                           ;doprnt.c: 1483: while(prec--) {
 13850                           
 13851  16B4  30FF               	movlw	255
 13852  16B5  07B9               	addwf	i1sprintf@prec,f
 13853  16B6  30FF               	movlw	255
 13854  16B7  3DBA               	addwfc	i1sprintf@prec+1,f
 13855  16B8  30FF               	movlw	255
 13856  16B9  063A               	xorwf	i1sprintf@prec+1,w
 13857  16BA  1D03               	skipz
 13858  16BB  2EBE               	goto	u493_25
 13859  16BC  30FF               	movlw	255
 13860  16BD  0639               	xorwf	i1sprintf@prec,w
 13861  16BE                     u493_25:	
 13862  16BE  1903               	btfsc	3,2
 13863  16BF  2E19               	goto	i1l4384
 13864                           
 13865                           ;doprnt.c: 1487: {
 13866                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
 13867  16C0  3000               	movlw	0
 13868  16C1  00A3               	movwf	i1___llmod@divisor+3
 13869  16C2  3000               	movlw	0
 13870  16C3  00A2               	movwf	i1___llmod@divisor+2
 13871  16C4  3000               	movlw	0
 13872  16C5  00A1               	movwf	i1___llmod@divisor+1
 13873  16C6  300A               	movlw	10
 13874  16C7  00A0               	movwf	i1___llmod@divisor
 13875  16C8  083A               	movf	i1sprintf@prec+1,w
 13876  16C9  0085               	movwf	5
 13877  16CA  0839               	movf	i1sprintf@prec,w
 13878  16CB  0084               	movwf	4
 13879  16CC  3584               	lslf	4,f
 13880  16CD  0D85               	rlf	5,f
 13881  16CE  3584               	lslf	4,f
 13882  16CF  0D85               	rlf	5,f
 13883  16D0  30D3               	movlw	low (_dpowers| (0+32768))
 13884  16D1  0784               	addwf	4,f
 13885  16D2  3088               	movlw	high (_dpowers| (0+32768))
 13886  16D3  3D85               	addwfc	5,f
 13887  16D4  3F00               	moviw [0]fsr0
 13888  16D5  00F0               	movwf	i1___lldiv@divisor
 13889  16D6  3F01               	moviw [1]fsr0
 13890  16D7  00F1               	movwf	i1___lldiv@divisor+1
 13891  16D8  3F02               	moviw [2]fsr0
 13892  16D9  00F2               	movwf	i1___lldiv@divisor+2
 13893  16DA  3F03               	moviw [3]fsr0
 13894  16DB  00F3               	movwf	i1___lldiv@divisor+3
 13895  16DC  083E               	movf	i1sprintf@_val+3,w
 13896  16DD  00F7               	movwf	i1___lldiv@dividend+3
 13897  16DE  083D               	movf	i1sprintf@_val+2,w
 13898  16DF  00F6               	movwf	i1___lldiv@dividend+2
 13899  16E0  083C               	movf	i1sprintf@_val+1,w
 13900  16E1  00F5               	movwf	i1___lldiv@dividend+1
 13901  16E2  083B               	movf	i1sprintf@_val,w
 13902  16E3  00F4               	movwf	i1___lldiv@dividend
 13903  16E4  319F  2707  3196   	fcall	i1___lldiv
 13904  16E7  0873               	movf	?i1___lldiv+3,w
 13905  16E8  0020               	movlb	0	; select bank0
 13906  16E9  00A7               	movwf	i1___llmod@dividend+3
 13907  16EA  0872               	movf	?i1___lldiv+2,w
 13908  16EB  00A6               	movwf	i1___llmod@dividend+2
 13909  16EC  0871               	movf	?i1___lldiv+1,w
 13910  16ED  00A5               	movwf	i1___llmod@dividend+1
 13911  16EE  0870               	movf	?i1___lldiv,w
 13912  16EF  00A4               	movwf	i1___llmod@dividend
 13913  16F0  319D  254B  3196   	fcall	i1___llmod
 13914  16F3  0020               	movlb	0	; select bank0
 13915  16F4  0820               	movf	?i1___llmod,w
 13916  16F5  3E30               	addlw	48
 13917  16F6  00B2               	movwf	??i1_sprintf
 13918  16F7  0832               	movf	??i1_sprintf,w
 13919  16F8  00C1               	movwf	i1sprintf@c
 13920                           
 13921                           ;doprnt.c: 1532: }
 13922                           ;doprnt.c: 1533: ((*sp++ = (c)));
 13923  16F9  082A               	movf	i1sprintf@sp,w
 13924  16FA  0086               	movwf	6
 13925  16FB  082B               	movf	i1sprintf@sp+1,w
 13926  16FC  0087               	movwf	7
 13927  16FD  0841               	movf	i1sprintf@c,w
 13928  16FE  0081               	movwf	1
 13929  16FF  3001               	movlw	1
 13930  1700  07AA               	addwf	i1sprintf@sp,f
 13931  1701  3000               	movlw	0
 13932  1702  3DAB               	addwfc	i1sprintf@sp+1,f
 13933  1703  2EB4               	goto	i1l4382
 13934  1704                     i1l4386:	
 13935                           ;doprnt.c: 1534: }
 13936                           ;doprnt.c: 1542: }
 13937                           ;doprnt.c: 1544: alldone:
 13938                           
 13939                           
 13940                           ;doprnt.c: 1547: *sp = 0;
 13941  1704  082A               	movf	i1sprintf@sp,w
 13942  1705  0086               	movwf	6
 13943  1706  082B               	movf	i1sprintf@sp+1,w
 13944  1707  0087               	movwf	7
 13945  1708  0181               	clrf	1
 13946  1709  0008               	return
 13947  170A                     __end_ofi1_sprintf:	
 13948                           ;doprnt.c: 1549: return 0;
 13949                           ;	Return value of i1_sprintf is never used
 13950                           
 13951                           
 13952                           	psect	text48
 13953  1D4B                     __ptext48:	
 13954 ;; *************** function i1___llmod *****************
 13955 ;; Defined at:
 13956 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\llmod.c"
 13957 ;; Parameters:    Size  Location     Type
 13958 ;;  divisor         4    0[BANK0 ] unsigned long 
 13959 ;;  dividend        4    4[BANK0 ] unsigned long 
 13960 ;; Auto vars:     Size  Location     Type
 13961 ;;  __llmod         1    9[BANK0 ] unsigned char 
 13962 ;; Return value:  Size  Location     Type
 13963 ;;                  4    0[BANK0 ] unsigned long 
 13964 ;; Registers used:
 13965 ;;		wreg, status,2, status,0
 13966 ;; Tracked objects:
 13967 ;;		On entry : 0/0
 13968 ;;		On exit  : 0/0
 13969 ;;		Unchanged: 0/0
 13970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13971 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13972 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13973 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13974 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13975 ;;Total ram usage:       10 bytes
 13976 ;; Hardware stack levels used:    1
 13977 ;; This function calls:
 13978 ;;		Nothing
 13979 ;; This function is called by:
 13980 ;;		i1_sprintf
 13981 ;; This function uses a non-reentrant model
 13982 ;;
 13983                           
 13984                           
 13985                           ;psect for function i1___llmod
 13986  1D4B                     i1___llmod:	
 13987                           
 13988                           ;incstack = 0
 13989                           ; Regs used in i1___llmod: [wreg+status,2+status,0]
 13990  1D4B  0020               	movlb	0	; select bank0
 13991  1D4C  0823               	movf	i1___llmod@divisor+3,w
 13992  1D4D  0422               	iorwf	i1___llmod@divisor+2,w
 13993  1D4E  0421               	iorwf	i1___llmod@divisor+1,w
 13994  1D4F  0420               	iorwf	i1___llmod@divisor,w
 13995  1D50  1903               	skipnz
 13996  1D51  2D85               	goto	i1l4030
 13997  1D52  01A9               	clrf	i1___llmod@counter
 13998  1D53  0AA9               	incf	i1___llmod@counter,f
 13999  1D54                     i1l4020:	
 14000  1D54  1BA3               	btfsc	i1___llmod@divisor+3,7
 14001  1D55  2D62               	goto	i1l4022
 14002  1D56  3001               	movlw	1
 14003  1D57                     u427_25:	
 14004  1D57  35A0               	lslf	i1___llmod@divisor,f
 14005  1D58  0DA1               	rlf	i1___llmod@divisor+1,f
 14006  1D59  0DA2               	rlf	i1___llmod@divisor+2,f
 14007  1D5A  0DA3               	rlf	i1___llmod@divisor+3,f
 14008  1D5B  0B89               	decfsz	9,f
 14009  1D5C  2D57               	goto	u427_25
 14010  1D5D  3001               	movlw	1
 14011  1D5E  00A8               	movwf	??i1___llmod
 14012  1D5F  0828               	movf	??i1___llmod,w
 14013  1D60  07A9               	addwf	i1___llmod@counter,f
 14014  1D61  2D54               	goto	i1l4020
 14015  1D62                     i1l4022:	
 14016  1D62  0823               	movf	i1___llmod@divisor+3,w
 14017  1D63  0227               	subwf	i1___llmod@dividend+3,w
 14018  1D64  1D03               	skipz
 14019  1D65  2D70               	goto	u429_25
 14020  1D66  0822               	movf	i1___llmod@divisor+2,w
 14021  1D67  0226               	subwf	i1___llmod@dividend+2,w
 14022  1D68  1D03               	skipz
 14023  1D69  2D70               	goto	u429_25
 14024  1D6A  0821               	movf	i1___llmod@divisor+1,w
 14025  1D6B  0225               	subwf	i1___llmod@dividend+1,w
 14026  1D6C  1D03               	skipz
 14027  1D6D  2D70               	goto	u429_25
 14028  1D6E  0820               	movf	i1___llmod@divisor,w
 14029  1D6F  0224               	subwf	i1___llmod@dividend,w
 14030  1D70                     u429_25:	
 14031  1D70  1C03               	skipc
 14032  1D71  2D7A               	goto	i1l4026
 14033  1D72  0820               	movf	i1___llmod@divisor,w
 14034  1D73  02A4               	subwf	i1___llmod@dividend,f
 14035  1D74  0821               	movf	i1___llmod@divisor+1,w
 14036  1D75  3BA5               	subwfb	i1___llmod@dividend+1,f
 14037  1D76  0822               	movf	i1___llmod@divisor+2,w
 14038  1D77  3BA6               	subwfb	i1___llmod@dividend+2,f
 14039  1D78  0823               	movf	i1___llmod@divisor+3,w
 14040  1D79  3BA7               	subwfb	i1___llmod@dividend+3,f
 14041  1D7A                     i1l4026:	
 14042  1D7A  3001               	movlw	1
 14043  1D7B                     u430_25:	
 14044  1D7B  36A3               	lsrf	i1___llmod@divisor+3,f
 14045  1D7C  0CA2               	rrf	i1___llmod@divisor+2,f
 14046  1D7D  0CA1               	rrf	i1___llmod@divisor+1,f
 14047  1D7E  0CA0               	rrf	i1___llmod@divisor,f
 14048  1D7F  0B89               	decfsz	9,f
 14049  1D80  2D7B               	goto	u430_25
 14050  1D81  3001               	movlw	1
 14051  1D82  02A9               	subwf	i1___llmod@counter,f
 14052  1D83  1D03               	btfss	3,2
 14053  1D84  2D62               	goto	i1l4022
 14054  1D85                     i1l4030:	
 14055  1D85  0827               	movf	i1___llmod@dividend+3,w
 14056  1D86  00A3               	movwf	?i1___llmod+3
 14057  1D87  0826               	movf	i1___llmod@dividend+2,w
 14058  1D88  00A2               	movwf	?i1___llmod+2
 14059  1D89  0825               	movf	i1___llmod@dividend+1,w
 14060  1D8A  00A1               	movwf	?i1___llmod+1
 14061  1D8B  0824               	movf	i1___llmod@dividend,w
 14062  1D8C  00A0               	movwf	?i1___llmod
 14063  1D8D  0008               	return
 14064  1D8E                     __end_ofi1___llmod:	
 14065                           
 14066                           	psect	text49
 14067  1BC0                     __ptext49:	
 14068 ;; *************** function i1_UARTstringWAIT *****************
 14069 ;; Defined at:
 14070 ;;		line 361 in file "UART.c"
 14071 ;; Parameters:    Size  Location     Type
 14072 ;;  data            2    1[BANK0 ] PTR const unsigned char 
 14073 ;;		 -> STR_21(29), STR_20(3), Process_PS2_ScanCode@buf(60), STR_18(3), 
 14074 ;;		 -> STR_17(3), STR_16(23), STR_15(19), STR_14(3), 
 14075 ;;		 -> STR_13(3), SetBaud@buf(50), STR_11(24), STR_10(3), 
 14076 ;;		 -> STR_9(3), NoParityMSG(20), SpaceParityMSG(16), MarkParityMSG(15), 
 14077 ;;		 -> EvenParityMSG(22), OddParityMSG(21), Init_System@buf(60), STR_7(3), 
 14078 ;;		 -> STR_6(39), STR_5(3), Version(8), STR_4(19), 
 14079 ;;		 -> STR_3(26), STR_2(8), STR_1(7), VoltageMSG(13), 
 14080 ;; Auto vars:     Size  Location     Type
 14081 ;;		None
 14082 ;; Return value:  Size  Location     Type
 14083 ;;		None               void
 14084 ;; Registers used:
 14085 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14086 ;; Tracked objects:
 14087 ;;		On entry : 0/0
 14088 ;;		On exit  : 0/0
 14089 ;;		Unchanged: 0/0
 14090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14091 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14093 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14094 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14095 ;;Total ram usage:        4 bytes
 14096 ;; Hardware stack levels used:    1
 14097 ;; Hardware stack levels required when called:    2
 14098 ;; This function calls:
 14099 ;;		i1_UARTchar
 14100 ;;		i1_delayUS
 14101 ;; This function is called by:
 14102 ;;		_SetBaud
 14103 ;;		_Process_PS2_ScanCode
 14104 ;; This function uses a non-reentrant model
 14105 ;;
 14106                           
 14107                           
 14108                           ;psect for function i1_UARTstringWAIT
 14109  1BC0                     i1_UARTstringWAIT:	
 14110  1BC0                     i1l468:	
 14111                           ;incstack = 0
 14112                           ; Regs used in i1_UARTstringWAIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14113                           ;UART.c: 363: do
 14114                           
 14115                           
 14116                           ;UART.c: 364: {
 14117                           ;UART.c: 365: delayUS(5000);
 14118  1BC0  3000               	movlw	0
 14119  1BC1  00F3               	movwf	i1delayUS@US+3
 14120  1BC2  3000               	movlw	0
 14121  1BC3  00F2               	movwf	i1delayUS@US+2
 14122  1BC4  3013               	movlw	19
 14123  1BC5  00F1               	movwf	i1delayUS@US+1
 14124  1BC6  3088               	movlw	136
 14125  1BC7  00F0               	movwf	i1delayUS@US
 14126  1BC8  319B  23F2  319B   	fcall	i1_delayUS
 14127                           
 14128                           ;UART.c: 366: if(*data != 0)
 14129  1BCB  0020               	movlb	0	; select bank0
 14130  1BCC  0821               	movf	i1UARTstringWAIT@data,w
 14131  1BCD  0084               	movwf	4
 14132  1BCE  0822               	movf	i1UARTstringWAIT@data+1,w
 14133  1BCF  0085               	movwf	5
 14134  1BD0  0800               	movf	0,w	;code access
 14135  1BD1  3A00               	xorlw	0
 14136  1BD2  1903               	skipnz
 14137  1BD3  2BE1               	goto	i1l4316
 14138                           
 14139                           ;UART.c: 367: {
 14140                           ;UART.c: 368: UARTchar(*data, 0, 0);
 14141  1BD4  01F8               	clrf	i1UARTchar@override
 14142  1BD5  01F9               	clrf	i1UARTchar@NinethBit_override_data
 14143  1BD6  0821               	movf	i1UARTstringWAIT@data,w
 14144  1BD7  0084               	movwf	4
 14145  1BD8  0822               	movf	i1UARTstringWAIT@data+1,w
 14146  1BD9  0085               	movwf	5
 14147  1BDA  0800               	movf	0,w	;code access
 14148  1BDB  3190  2011  319B   	fcall	i1_UARTchar
 14149  1BDE                     i1l470:	
 14150                           ;UART.c: 369: while((!TX1STAbits.TRMT));
 14151                           
 14152  1BDE  0023               	movlb	3	; select bank3
 14153  1BDF  1C9E               	btfss	30,1	;volatile
 14154  1BE0  2BDE               	goto	i1l470
 14155  1BE1                     i1l4316:	
 14156                           
 14157                           ;UART.c: 370: }
 14158                           ;UART.c: 371: } while( *data++);
 14159  1BE1  0020               	movlb	0	; select bank0
 14160  1BE2  0822               	movf	i1UARTstringWAIT@data+1,w
 14161  1BE3  00A4               	movwf	??i1_UARTstringWAIT+1
 14162  1BE4  0821               	movf	i1UARTstringWAIT@data,w
 14163  1BE5  00A3               	movwf	??i1_UARTstringWAIT
 14164  1BE6  0AA1               	incf	i1UARTstringWAIT@data,f
 14165  1BE7  1903               	skipnz
 14166  1BE8  0AA2               	incf	i1UARTstringWAIT@data+1,f
 14167  1BE9  0823               	movf	??i1_UARTstringWAIT,w
 14168  1BEA  0084               	movwf	4
 14169  1BEB  0824               	movf	??i1_UARTstringWAIT+1,w
 14170  1BEC  0085               	movwf	5
 14171  1BED  0800               	movf	0,w	;code access
 14172  1BEE  3800               	iorlw	0
 14173  1BEF  1903               	btfsc	3,2
 14174  1BF0  0008               	return
 14175  1BF1  2BC0               	goto	i1l468
 14176  1BF2                     __end_ofi1_UARTstringWAIT:	
 14177                           
 14178                           	psect	text50
 14179  1011                     __ptext50:	
 14180 ;; *************** function i1_UARTchar *****************
 14181 ;; Defined at:
 14182 ;;		line 231 in file "UART.c"
 14183 ;; Parameters:    Size  Location     Type
 14184 ;;  data            1    wreg     unsigned char 
 14185 ;;  override        1    8[COMMON] unsigned char 
 14186 ;;  NinethBit_ov    1    9[COMMON] unsigned char 
 14187 ;; Auto vars:     Size  Location     Type
 14188 ;;  data            1    0[BANK0 ] unsigned char 
 14189 ;; Return value:  Size  Location     Type
 14190 ;;		None               void
 14191 ;; Registers used:
 14192 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14193 ;; Tracked objects:
 14194 ;;		On entry : 0/0
 14195 ;;		On exit  : 0/0
 14196 ;;		Unchanged: 0/0
 14197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14198 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14199 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14200 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14201 ;;      Totals:         6       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14202 ;;Total ram usage:        7 bytes
 14203 ;; Hardware stack levels used:    1
 14204 ;; Hardware stack levels required when called:    1
 14205 ;; This function calls:
 14206 ;;		i1_CheckSum_byte
 14207 ;; This function is called by:
 14208 ;;		_isr
 14209 ;;		_Process_PS2_ScanCode
 14210 ;;		i1_UARTstringWAIT
 14211 ;; This function uses a non-reentrant model
 14212 ;;
 14213                           
 14214                           
 14215                           ;psect for function i1_UARTchar
 14216  1011                     i1_UARTchar:	
 14217                           
 14218                           ;incstack = 0
 14219                           ; Regs used in i1_UARTchar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14220                           ;i1UARTchar@data stored from wreg
 14221  1011  0020               	movlb	0	; select bank0
 14222  1012  00A0               	movwf	i1UARTchar@data
 14223                           
 14224                           ;UART.c: 233: if(TXSTAbits.TX9)
 14225  1013  0023               	movlb	3	; select bank3
 14226  1014  1F1E               	btfss	30,6	;volatile
 14227  1015  2856               	goto	i1l3964
 14228                           
 14229                           ;UART.c: 234: {
 14230                           ;UART.c: 236: if(!override)
 14231  1016  08F8               	movf	i1UARTchar@override,f
 14232  1017  1903               	btfsc	3,2
 14233  1018  2840               	goto	i1l3960
 14234  1019  284D               	goto	i1l3962
 14235  101A                     i1l3954:	
 14236                           ;UART.c: 240: {
 14237                           ;UART.c: 241: case 1:
 14238                           
 14239                           ;UART.c: 237: {
 14240                           ;UART.c: 239: switch (PARITY)
 14241                           
 14242                           
 14243                           ;UART.c: 242: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 3);
 14244  101A  0020               	movlb	0	; select bank0
 14245  101B  0820               	movf	i1UARTchar@data,w
 14246  101C  00FA               	movwf	??i1_UARTchar
 14247  101D  01FB               	clrf	??i1_UARTchar+1
 14248  101E  087A               	movf	??i1_UARTchar,w
 14249  101F  00F0               	movwf	i1CheckSum_byte@This
 14250  1020  087B               	movf	??i1_UARTchar+1,w
 14251  1021  00F1               	movwf	i1CheckSum_byte@This+1
 14252  1022  3003               	movlw	3
 14253  1023  282D               	goto	L24
 14254  1024                     i1l3956:	
 14255                           ;UART.c: 244: case 2:
 14256                           
 14257                           ;UART.c: 243: break;
 14258                           
 14259                           
 14260                           ;UART.c: 245: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 2);
 14261  1024  0020               	movlb	0	; select bank0
 14262  1025  0820               	movf	i1UARTchar@data,w
 14263  1026  00FA               	movwf	??i1_UARTchar
 14264  1027  01FB               	clrf	??i1_UARTchar+1
 14265  1028  087A               	movf	??i1_UARTchar,w
 14266  1029  00F0               	movwf	i1CheckSum_byte@This
 14267  102A  087B               	movf	??i1_UARTchar+1,w
 14268  102B  00F1               	movwf	i1CheckSum_byte@This+1
 14269  102C  3002               	movlw	2
 14270  102D                     L24:	
 14271  102D  00FC               	movwf	??i1_UARTchar+2
 14272  102E  087C               	movf	??i1_UARTchar+2,w
 14273  102F  00F2               	movwf	i1CheckSum_byte@Odd_Even
 14274  1030  319B  235F  3190   	fcall	i1_CheckSum_byte
 14275  1033  00FD               	movwf	??i1_UARTchar+3
 14276  1034  0023               	movlb	3	; select bank3
 14277  1035  081E               	movf	30,w	;volatile
 14278  1036  067D               	xorwf	??i1_UARTchar+3,w
 14279  1037  39FE               	andlw	-2
 14280  1038  067D               	xorwf	??i1_UARTchar+3,w
 14281  1039  2855               	goto	L23
 14282  103A                     i1l434:	
 14283                           ;UART.c: 247: case 3:
 14284                           
 14285                           ;UART.c: 246: break;
 14286                           
 14287                           
 14288                           ;UART.c: 248: TXSTAbits.TX9D = 1;
 14289  103A  0023               	movlb	3	; select bank3
 14290  103B  141E               	bsf	30,0	;volatile
 14291                           
 14292                           ;UART.c: 249: break;
 14293  103C  2856               	goto	i1l3964
 14294  103D                     i1l435:	
 14295                           ;UART.c: 250: default:
 14296                           
 14297                           
 14298                           ;UART.c: 251: TXSTAbits.TX9D = 0;
 14299  103D  0023               	movlb	3	; select bank3
 14300  103E  101E               	bcf	30,0	;volatile
 14301                           
 14302                           ;UART.c: 253: }
 14303                           
 14304                           ;UART.c: 252: break;
 14305  103F  2856               	goto	i1l3964
 14306  1040                     i1l3960:	
 14307  1040  0024               	movlb	4	; select bank4
 14308  1041  0860               	movf	_PARITY^(0+512),w
 14309                           
 14310                           ; Switch size 1, requested type "space"
 14311                           ; Number of cases is 3, Range of values is 1 to 3
 14312                           ; switch strategies available:
 14313                           ; Name         Instructions Cycles
 14314                           ; simple_byte           10     6 (average)
 14315                           ; direct_byte           15     9 (fixed)
 14316                           ; jumptable            263     9 (fixed)
 14317                           ;	Chosen strategy is simple_byte
 14318  1042  3A01               	xorlw	1	; case 1
 14319  1043  1903               	skipnz
 14320  1044  281A               	goto	i1l3954
 14321  1045  3A03               	xorlw	3	; case 2
 14322  1046  1903               	skipnz
 14323  1047  2824               	goto	i1l3956
 14324  1048  3A01               	xorlw	1	; case 3
 14325  1049  1903               	skipnz
 14326  104A  283A               	goto	i1l434
 14327  104B  283D               	goto	i1l435
 14328                           
 14329                           ;UART.c: 254: }
 14330  104C  2856               	goto	i1l3964
 14331  104D                     i1l3962:	
 14332                           
 14333                           ;UART.c: 255: else
 14334                           ;UART.c: 256: {
 14335                           ;UART.c: 257: TXSTAbits.TX9D = (NinethBit_override_data & 0x01);
 14336  104D  3001               	movlw	1
 14337  104E  0579               	andwf	i1UARTchar@NinethBit_override_data,w
 14338  104F  00FA               	movwf	??i1_UARTchar
 14339  1050  0023               	movlb	3	; select bank3
 14340  1051  081E               	movf	30,w	;volatile
 14341  1052  067A               	xorwf	??i1_UARTchar,w
 14342  1053  39FE               	andlw	-2
 14343  1054  067A               	xorwf	??i1_UARTchar,w
 14344  1055                     L23:	
 14345  1055  009E               	movwf	30	;volatile
 14346  1056                     i1l3964:	
 14347                           
 14348                           ;UART.c: 258: }
 14349                           ;UART.c: 259: }
 14350                           ;UART.c: 261: if(data == '\n')
 14351  1056  0020               	movlb	0	; select bank0
 14352  1057  0820               	movf	i1UARTchar@data,w
 14353  1058  3A0A               	xorlw	10
 14354  1059  1D03               	skipz
 14355  105A  2867               	goto	i1l443
 14356                           
 14357                           ;UART.c: 262: {
 14358                           ;UART.c: 263: if(override)
 14359  105B  0878               	movf	i1UARTchar@override,w
 14360  105C  1903               	btfsc	3,2
 14361  105D  0008               	return
 14362  105E                     i1l439:	
 14363                           ;UART.c: 264: {
 14364                           ;UART.c: 265: while(!TXSTAbits.TRMT);
 14365                           
 14366  105E  0023               	movlb	3	; select bank3
 14367  105F  1C9E               	btfss	30,1	;volatile
 14368  1060  285E               	goto	i1l439
 14369                           
 14370                           ;UART.c: 266: TXREG = data;
 14371  1061  0020               	movlb	0	; select bank0
 14372  1062  0820               	movf	i1UARTchar@data,w
 14373  1063  0023               	movlb	3	; select bank3
 14374  1064  009A               	movwf	26	;volatile
 14375  1065  0020               	movlb	0	; select bank0
 14376  1066  0008               	return
 14377  1067                     i1l443:	
 14378                           ;UART.c: 269: else
 14379                           ;UART.c: 270: {
 14380                           ;UART.c: 271: while(!TXSTAbits.TRMT);
 14381                           
 14382                           ;UART.c: 267: }
 14383                           ;UART.c: 268: }
 14384                           
 14385  1067  0023               	movlb	3	; select bank3
 14386  1068  1C9E               	btfss	30,1	;volatile
 14387  1069  2867               	goto	i1l443
 14388                           
 14389                           ;UART.c: 272: TXREG = data;
 14390  106A  0020               	movlb	0	; select bank0
 14391  106B  0820               	movf	i1UARTchar@data,w
 14392  106C  0023               	movlb	3	; select bank3
 14393  106D  009A               	movwf	26	;volatile
 14394  106E  0020               	movlb	0	; select bank0
 14395  106F  0008               	return
 14396  1070                     __end_ofi1_UARTchar:	
 14397                           
 14398                           	psect	text51
 14399  1195                     __ptext51:	
 14400 ;; *************** function i1_ReadBaud *****************
 14401 ;; Defined at:
 14402 ;;		line 187 in file "FLASH.c"
 14403 ;; Parameters:    Size  Location     Type
 14404 ;;  row             2    4[BANK0 ] unsigned int 
 14405 ;;  column          1    6[BANK0 ] unsigned char 
 14406 ;; Auto vars:     Size  Location     Type
 14407 ;;  ReadBaud        4   16[BANK0 ] unsigned long 
 14408 ;; Return value:  Size  Location     Type
 14409 ;;                  4    4[BANK0 ] unsigned long 
 14410 ;; Registers used:
 14411 ;;		wreg, status,2, status,0, pclath, cstack
 14412 ;; Tracked objects:
 14413 ;;		On entry : 0/0
 14414 ;;		On exit  : 0/0
 14415 ;;		Unchanged: 0/0
 14416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14417 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14418 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14419 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14420 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14421 ;;Total ram usage:       16 bytes
 14422 ;; Hardware stack levels used:    1
 14423 ;; Hardware stack levels required when called:    2
 14424 ;; This function calls:
 14425 ;;		i1_ReadFlash_4Byte
 14426 ;; This function is called by:
 14427 ;;		_SetBaud
 14428 ;; This function uses a non-reentrant model
 14429 ;;
 14430                           
 14431                           
 14432                           ;psect for function i1_ReadBaud
 14433  1195                     i1_ReadBaud:	
 14434                           
 14435                           ;FLASH.c: 189: unsigned long temp;
 14436                           ;FLASH.c: 190: temp =(ReadFlash_4Byte(row, column));
 14437                           
 14438                           ;incstack = 0
 14439                           ; Regs used in i1_ReadBaud: [wreg+status,2+status,0+pclath+cstack]
 14440  1195  0020               	movlb	0	; select bank0
 14441  1196  0825               	movf	i1ReadBaud@row+1,w
 14442  1197  01F6               	clrf	i1ReadFlash_4Byte@row+1
 14443  1198  07F6               	addwf	i1ReadFlash_4Byte@row+1,f
 14444  1199  0824               	movf	i1ReadBaud@row,w
 14445  119A  01F5               	clrf	i1ReadFlash_4Byte@row
 14446  119B  07F5               	addwf	i1ReadFlash_4Byte@row,f
 14447  119C  0826               	movf	i1ReadBaud@column,w
 14448  119D  00A8               	movwf	??i1_ReadBaud
 14449  119E  0828               	movf	??i1_ReadBaud,w
 14450  119F  00F7               	movwf	i1ReadFlash_4Byte@column
 14451  11A0  319E  2665  3191   	fcall	i1_ReadFlash_4Byte
 14452  11A3  0878               	movf	?i1_ReadFlash_4Byte+3,w
 14453  11A4  0020               	movlb	0	; select bank0
 14454  11A5  00B3               	movwf	i1ReadBaud@temp+3
 14455  11A6  0877               	movf	?i1_ReadFlash_4Byte+2,w
 14456  11A7  00B2               	movwf	i1ReadBaud@temp+2
 14457  11A8  0876               	movf	?i1_ReadFlash_4Byte+1,w
 14458  11A9  00B1               	movwf	i1ReadBaud@temp+1
 14459  11AA  0875               	movf	?i1_ReadFlash_4Byte,w
 14460  11AB  00B0               	movwf	i1ReadBaud@temp
 14461                           
 14462                           ;FLASH.c: 191: MEM[1] = (unsigned int)(temp & 0x0003FFF);
 14463  11AC  30FF               	movlw	255
 14464  11AD  0530               	andwf	i1ReadBaud@temp,w
 14465  11AE  0021               	movlb	1	; select bank1
 14466  11AF  00E4               	movwf	(_MEM^(0+128)+2)
 14467  11B0  303F               	movlw	63
 14468  11B1  0020               	movlb	0	; select bank0
 14469  11B2  0531               	andwf	i1ReadBaud@temp+1,w
 14470  11B3  0021               	movlb	1	; select bank1
 14471  11B4  00E5               	movwf	((_MEM+1)^(0+128)+2)
 14472                           
 14473                           ;FLASH.c: 192: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
 14474  11B5  0020               	movlb	0	; select bank0
 14475  11B6  0830               	movf	i1ReadBaud@temp,w
 14476  11B7  00A8               	movwf	??i1_ReadBaud
 14477  11B8  0831               	movf	i1ReadBaud@temp+1,w
 14478  11B9  00A9               	movwf	??i1_ReadBaud+1
 14479  11BA  0832               	movf	i1ReadBaud@temp+2,w
 14480  11BB  00AA               	movwf	??i1_ReadBaud+2
 14481  11BC  0833               	movf	i1ReadBaud@temp+3,w
 14482  11BD  00AB               	movwf	??i1_ReadBaud+3
 14483  11BE  300E               	movlw	14
 14484  11BF                     u486_25:	
 14485  11BF  36AB               	lsrf	??i1_ReadBaud+3,f
 14486  11C0  0CAA               	rrf	??i1_ReadBaud+2,f
 14487  11C1  0CA9               	rrf	??i1_ReadBaud+1,f
 14488  11C2  0CA8               	rrf	??i1_ReadBaud,f
 14489  11C3  0B89               	decfsz	9,f
 14490  11C4  29BF               	goto	u486_25
 14491  11C5  30FF               	movlw	255
 14492  11C6  0528               	andwf	??i1_ReadBaud,w
 14493  11C7  0021               	movlb	1	; select bank1
 14494  11C8  00E2               	movwf	_MEM^(0+128)
 14495  11C9  303F               	movlw	63
 14496  11CA  0020               	movlb	0	; select bank0
 14497  11CB  0529               	andwf	??i1_ReadBaud+1,w
 14498  11CC  0021               	movlb	1	; select bank1
 14499  11CD  00E3               	movwf	(_MEM+1)^(0+128)
 14500                           
 14501                           ;FLASH.c: 193: return (((unsigned long)MEM[0] << 12) + (unsigned long)MEM[1]);
 14502  11CE  0864               	movf	(_MEM^(0+128)+2),w
 14503  11CF  0020               	movlb	0	; select bank0
 14504  11D0  00A8               	movwf	??i1_ReadBaud
 14505  11D1  0021               	movlb	1	; select bank1
 14506  11D2  0865               	movf	((_MEM+1)^(0+128)+2),w
 14507  11D3  0020               	movlb	0	; select bank0
 14508  11D4  00A9               	movwf	??i1_ReadBaud+1
 14509  11D5  01AA               	clrf	??i1_ReadBaud+2
 14510  11D6  01AB               	clrf	??i1_ReadBaud+3
 14511  11D7  0021               	movlb	1	; select bank1
 14512  11D8  0862               	movf	_MEM^(0+128),w
 14513  11D9  0020               	movlb	0	; select bank0
 14514  11DA  00AC               	movwf	??i1_ReadBaud+4
 14515  11DB  0021               	movlb	1	; select bank1
 14516  11DC  0863               	movf	(_MEM+1)^(0+128),w
 14517  11DD  0020               	movlb	0	; select bank0
 14518  11DE  00AD               	movwf	??i1_ReadBaud+5
 14519  11DF  01AE               	clrf	??i1_ReadBaud+6
 14520  11E0  01AF               	clrf	??i1_ReadBaud+7
 14521  11E1  300C               	movlw	12
 14522  11E2                     u487_25:	
 14523  11E2  35AC               	lslf	??i1_ReadBaud+4,f
 14524  11E3  0DAD               	rlf	??i1_ReadBaud+5,f
 14525  11E4  0DAE               	rlf	??i1_ReadBaud+6,f
 14526  11E5  0DAF               	rlf	??i1_ReadBaud+7,f
 14527  11E6  0B89               	decfsz	9,f
 14528  11E7  29E2               	goto	u487_25
 14529  11E8  082C               	movf	??i1_ReadBaud+4,w
 14530  11E9  07A8               	addwf	??i1_ReadBaud,f
 14531  11EA  082D               	movf	??i1_ReadBaud+5,w
 14532  11EB  3DA9               	addwfc	??i1_ReadBaud+1,f
 14533  11EC  082E               	movf	??i1_ReadBaud+6,w
 14534  11ED  3DAA               	addwfc	??i1_ReadBaud+2,f
 14535  11EE  082F               	movf	??i1_ReadBaud+7,w
 14536  11EF  3DAB               	addwfc	??i1_ReadBaud+3,f
 14537  11F0  082B               	movf	??i1_ReadBaud+3,w
 14538  11F1  00A7               	movwf	?i1_ReadBaud+3
 14539  11F2  082A               	movf	??i1_ReadBaud+2,w
 14540  11F3  00A6               	movwf	?i1_ReadBaud+2
 14541  11F4  0829               	movf	??i1_ReadBaud+1,w
 14542  11F5  00A5               	movwf	?i1_ReadBaud+1
 14543  11F6  0828               	movf	??i1_ReadBaud,w
 14544  11F7  00A4               	movwf	?i1_ReadBaud
 14545  11F8  0008               	return
 14546  11F9                     __end_ofi1_ReadBaud:	
 14547                           
 14548                           	psect	text52
 14549  1E65                     __ptext52:	
 14550 ;; *************** function i1_ReadFlash_4Byte *****************
 14551 ;; Defined at:
 14552 ;;		line 62 in file "FLASH.c"
 14553 ;; Parameters:    Size  Location     Type
 14554 ;;  row             2    5[COMMON] unsigned int 
 14555 ;;  column          1    7[COMMON] unsigned char 
 14556 ;; Auto vars:     Size  Location     Type
 14557 ;;  ReadFlash_4B    4    0[BANK0 ] unsigned long 
 14558 ;; Return value:  Size  Location     Type
 14559 ;;                  4    5[COMMON] unsigned long 
 14560 ;; Registers used:
 14561 ;;		wreg, status,2, status,0, pclath, cstack
 14562 ;; Tracked objects:
 14563 ;;		On entry : 0/0
 14564 ;;		On exit  : 0/0
 14565 ;;		Unchanged: 0/0
 14566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14567 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14568 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14569 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14570 ;;      Totals:         9       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14571 ;;Total ram usage:       13 bytes
 14572 ;; Hardware stack levels used:    1
 14573 ;; Hardware stack levels required when called:    1
 14574 ;; This function calls:
 14575 ;;		i1_ReadFlash_2Byte
 14576 ;; This function is called by:
 14577 ;;		i1_ReadBaud
 14578 ;; This function uses a non-reentrant model
 14579 ;;
 14580                           
 14581                           
 14582                           ;psect for function i1_ReadFlash_4Byte
 14583  1E65                     i1_ReadFlash_4Byte:	
 14584                           
 14585                           ;FLASH.c: 64: unsigned long temp =0;
 14586                           
 14587                           ;incstack = 0
 14588                           ; Regs used in i1_ReadFlash_4Byte: [wreg+status,2+status,0+pclath+cstack]
 14589  1E65  3000               	movlw	0
 14590  1E66  0020               	movlb	0	; select bank0
 14591  1E67  00A3               	movwf	i1ReadFlash_4Byte@temp+3
 14592  1E68  3000               	movlw	0
 14593  1E69  00A2               	movwf	i1ReadFlash_4Byte@temp+2
 14594  1E6A  3000               	movlw	0
 14595  1E6B  00A1               	movwf	i1ReadFlash_4Byte@temp+1
 14596  1E6C  3000               	movlw	0
 14597  1E6D  00A0               	movwf	i1ReadFlash_4Byte@temp
 14598                           
 14599                           ;FLASH.c: 65: temp = ((unsigned long)ReadFlash_2Byte(row, column) << 16);
 14600  1E6E  0876               	movf	i1ReadFlash_4Byte@row+1,w
 14601  1E6F  01F1               	clrf	i1ReadFlash_2Byte@row+1
 14602  1E70  07F1               	addwf	i1ReadFlash_2Byte@row+1,f
 14603  1E71  0875               	movf	i1ReadFlash_4Byte@row,w
 14604  1E72  01F0               	clrf	i1ReadFlash_2Byte@row
 14605  1E73  07F0               	addwf	i1ReadFlash_2Byte@row,f
 14606  1E74  0877               	movf	i1ReadFlash_4Byte@column,w
 14607  1E75  00F9               	movwf	??i1_ReadFlash_4Byte
 14608  1E76  0879               	movf	??i1_ReadFlash_4Byte,w
 14609  1E77  00F2               	movwf	i1ReadFlash_2Byte@column
 14610  1E78  319A  2284  319E   	fcall	i1_ReadFlash_2Byte
 14611  1E7B  0870               	movf	?i1_ReadFlash_2Byte,w
 14612  1E7C  00FA               	movwf	??i1_ReadFlash_4Byte+1
 14613  1E7D  0871               	movf	?i1_ReadFlash_2Byte+1,w
 14614  1E7E  00FB               	movwf	??i1_ReadFlash_4Byte+2
 14615  1E7F  01FC               	clrf	??i1_ReadFlash_4Byte+3
 14616  1E80  01FD               	clrf	??i1_ReadFlash_4Byte+4
 14617  1E81  3010               	movlw	16
 14618  1E82                     u418_25:	
 14619  1E82  35FA               	lslf	??i1_ReadFlash_4Byte+1,f
 14620  1E83  0DFB               	rlf	??i1_ReadFlash_4Byte+2,f
 14621  1E84  0DFC               	rlf	??i1_ReadFlash_4Byte+3,f
 14622  1E85  0DFD               	rlf	??i1_ReadFlash_4Byte+4,f
 14623  1E86  0B89               	decfsz	9,f
 14624  1E87  2E82               	goto	u418_25
 14625  1E88  087D               	movf	??i1_ReadFlash_4Byte+4,w
 14626  1E89  0020               	movlb	0	; select bank0
 14627  1E8A  00A3               	movwf	i1ReadFlash_4Byte@temp+3
 14628  1E8B  087C               	movf	??i1_ReadFlash_4Byte+3,w
 14629  1E8C  00A2               	movwf	i1ReadFlash_4Byte@temp+2
 14630  1E8D  087B               	movf	??i1_ReadFlash_4Byte+2,w
 14631  1E8E  00A1               	movwf	i1ReadFlash_4Byte@temp+1
 14632  1E8F  087A               	movf	??i1_ReadFlash_4Byte+1,w
 14633  1E90  00A0               	movwf	i1ReadFlash_4Byte@temp
 14634                           
 14635                           ;FLASH.c: 66: temp |= ((unsigned long)ReadFlash_2Byte(row, (column + 1)));
 14636  1E91  0876               	movf	i1ReadFlash_4Byte@row+1,w
 14637  1E92  01F1               	clrf	i1ReadFlash_2Byte@row+1
 14638  1E93  07F1               	addwf	i1ReadFlash_2Byte@row+1,f
 14639  1E94  0875               	movf	i1ReadFlash_4Byte@row,w
 14640  1E95  01F0               	clrf	i1ReadFlash_2Byte@row
 14641  1E96  07F0               	addwf	i1ReadFlash_2Byte@row,f
 14642  1E97  0877               	movf	i1ReadFlash_4Byte@column,w
 14643  1E98  3E01               	addlw	1
 14644  1E99  00F9               	movwf	??i1_ReadFlash_4Byte
 14645  1E9A  0879               	movf	??i1_ReadFlash_4Byte,w
 14646  1E9B  00F2               	movwf	i1ReadFlash_2Byte@column
 14647  1E9C  319A  2284         	fcall	i1_ReadFlash_2Byte
 14648  1E9E  0870               	movf	?i1_ReadFlash_2Byte,w
 14649  1E9F  00FA               	movwf	??i1_ReadFlash_4Byte+1
 14650  1EA0  0871               	movf	?i1_ReadFlash_2Byte+1,w
 14651  1EA1  00FB               	movwf	??i1_ReadFlash_4Byte+2
 14652  1EA2  01FC               	clrf	??i1_ReadFlash_4Byte+3
 14653  1EA3  01FD               	clrf	??i1_ReadFlash_4Byte+4
 14654  1EA4  087A               	movf	??i1_ReadFlash_4Byte+1,w
 14655  1EA5  0020               	movlb	0	; select bank0
 14656  1EA6  04A0               	iorwf	i1ReadFlash_4Byte@temp,f
 14657  1EA7  087B               	movf	??i1_ReadFlash_4Byte+2,w
 14658  1EA8  04A1               	iorwf	i1ReadFlash_4Byte@temp+1,f
 14659  1EA9  087C               	movf	??i1_ReadFlash_4Byte+3,w
 14660  1EAA  04A2               	iorwf	i1ReadFlash_4Byte@temp+2,f
 14661  1EAB  087D               	movf	??i1_ReadFlash_4Byte+4,w
 14662  1EAC  04A3               	iorwf	i1ReadFlash_4Byte@temp+3,f
 14663                           
 14664                           ;FLASH.c: 67: return temp;
 14665  1EAD  0823               	movf	i1ReadFlash_4Byte@temp+3,w
 14666  1EAE  00F8               	movwf	?i1_ReadFlash_4Byte+3
 14667  1EAF  0822               	movf	i1ReadFlash_4Byte@temp+2,w
 14668  1EB0  00F7               	movwf	?i1_ReadFlash_4Byte+2
 14669  1EB1  0821               	movf	i1ReadFlash_4Byte@temp+1,w
 14670  1EB2  00F6               	movwf	?i1_ReadFlash_4Byte+1
 14671  1EB3  0820               	movf	i1ReadFlash_4Byte@temp,w
 14672  1EB4  00F5               	movwf	?i1_ReadFlash_4Byte
 14673  1EB5  0008               	return
 14674  1EB6                     __end_ofi1_ReadFlash_4Byte:	
 14675                           
 14676                           	psect	text53
 14677  1525                     __ptext53:	
 14678 ;; *************** function i1_InitUART *****************
 14679 ;; Defined at:
 14680 ;;		line 75 in file "UART.c"
 14681 ;; Parameters:    Size  Location     Type
 14682 ;;  Baud            4    0[BANK0 ] unsigned long 
 14683 ;;  parity          1    4[BANK0 ] unsigned char 
 14684 ;; Auto vars:     Size  Location     Type
 14685 ;;  InitUART        4   17[BANK0 ] unsigned long 
 14686 ;;  InitUART        2   13[BANK0 ] unsigned int 
 14687 ;;  InitUART        1   16[BANK0 ] unsigned char 
 14688 ;;  InitUART        1   15[BANK0 ] unsigned char 
 14689 ;; Return value:  Size  Location     Type
 14690 ;;		None               void
 14691 ;; Registers used:
 14692 ;;		wreg, status,2, status,0, pclath, cstack
 14693 ;; Tracked objects:
 14694 ;;		On entry : 0/0
 14695 ;;		On exit  : 0/0
 14696 ;;		Unchanged: 0/0
 14697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14698 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14699 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14700 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14701 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14702 ;;Total ram usage:       21 bytes
 14703 ;; Hardware stack levels used:    1
 14704 ;; Hardware stack levels required when called:    1
 14705 ;; This function calls:
 14706 ;;		i1_CloseUSART
 14707 ;;		i1_OpenUSART
 14708 ;;		i1_ReadUSART
 14709 ;;		i1___lldiv
 14710 ;;		i1_baudUSART
 14711 ;; This function is called by:
 14712 ;;		_SetBaud
 14713 ;; This function uses a non-reentrant model
 14714 ;;
 14715                           
 14716                           
 14717                           ;psect for function i1_InitUART
 14718  1525                     i1_InitUART:	
 14719                           
 14720                           ;UART.c: 77: unsigned long temp;
 14721                           ;UART.c: 78: unsigned char config;
 14722                           ;UART.c: 79: unsigned int spbrg;
 14723                           ;UART.c: 80: unsigned char baudconfig;
 14724                           ;UART.c: 90: LATC |= 0b00000100;
 14725                           
 14726                           ;incstack = 0
 14727                           ; Regs used in i1_InitUART: [wreg+status,2+status,0+pclath+cstack]
 14728  1525  0022               	movlb	2	; select bank2
 14729  1526  150E               	bsf	14,2	;volatile
 14730                           
 14731                           ;UART.c: 91: PPSLOCK =0;
 14732  1527  003C               	movlb	28	; select bank28
 14733  1528  018F               	clrf	15	;volatile
 14734                           
 14735                           ;UART.c: 92: RC2PPS = 0b00000000;
 14736  1529  003D               	movlb	29	; select bank29
 14737  152A  01A2               	clrf	34	;volatile
 14738                           
 14739                           ;UART.c: 93: PPSLOCK =1;
 14740  152B  3001               	movlw	1
 14741  152C  003C               	movlb	28	; select bank28
 14742  152D  008F               	movwf	15	;volatile
 14743                           
 14744                           ;UART.c: 95: CloseUSART();
 14745  152E  3199  2164  3195   	fcall	i1_CloseUSART
 14746                           
 14747                           ;UART.c: 96: config =0;
 14748  1531  0020               	movlb	0	; select bank0
 14749  1532  01B0               	clrf	i1InitUART@config
 14750                           
 14751                           ;UART.c: 97: baudconfig =0;
 14752  1533  01AF               	clrf	i1InitUART@baudconfig
 14753                           
 14754                           ;UART.c: 102: config |= 0b00001000;
 14755  1534  15B0               	bsf	i1InitUART@config,3
 14756                           
 14757                           ;UART.c: 103: config |= 0b00010000;
 14758  1535  1630               	bsf	i1InitUART@config,4
 14759                           
 14760                           ;UART.c: 104: PARITY = parity;
 14761  1536  0824               	movf	i1InitUART@parity,w
 14762  1537  00A5               	movwf	??i1_InitUART
 14763  1538  0825               	movf	??i1_InitUART,w
 14764  1539  0024               	movlb	4	; select bank4
 14765  153A  00E0               	movwf	_PARITY^(0+512)
 14766                           
 14767                           ;UART.c: 105: BAUD = Baud;
 14768  153B  0020               	movlb	0	; select bank0
 14769  153C  0823               	movf	i1InitUART@Baud+3,w
 14770  153D  0024               	movlb	4	; select bank4
 14771  153E  00E4               	movwf	(_BAUD+3)^(0+512)
 14772  153F  0020               	movlb	0	; select bank0
 14773  1540  0822               	movf	i1InitUART@Baud+2,w
 14774  1541  0024               	movlb	4	; select bank4
 14775  1542  00E3               	movwf	(_BAUD+2)^(0+512)
 14776  1543  0020               	movlb	0	; select bank0
 14777  1544  0821               	movf	i1InitUART@Baud+1,w
 14778  1545  0024               	movlb	4	; select bank4
 14779  1546  00E2               	movwf	(_BAUD+1)^(0+512)
 14780  1547  0020               	movlb	0	; select bank0
 14781  1548  0820               	movf	i1InitUART@Baud,w
 14782  1549  0024               	movlb	4	; select bank4
 14783  154A  00E1               	movwf	_BAUD^(0+512)
 14784                           
 14785                           ;UART.c: 106: if(parity)
 14786  154B  0020               	movlb	0	; select bank0
 14787  154C  0824               	movf	i1InitUART@parity,w
 14788  154D  1903               	btfsc	3,2
 14789  154E  2D51               	goto	i1l4270
 14790                           
 14791                           ;UART.c: 107: {
 14792                           ;UART.c: 108: config |= 0b00000010;
 14793  154F  14B0               	bsf	i1InitUART@config,1
 14794                           
 14795                           ;UART.c: 109: }
 14796  1550  2D55               	goto	i1l4272
 14797  1551                     i1l4270:	
 14798                           
 14799                           ;UART.c: 110: else
 14800                           ;UART.c: 111: {
 14801                           ;UART.c: 112: config &= ~0b00000010;
 14802  1551  30FD               	movlw	253
 14803  1552  00A5               	movwf	??i1_InitUART
 14804  1553  0825               	movf	??i1_InitUART,w
 14805  1554  05B0               	andwf	i1InitUART@config,f
 14806  1555                     i1l4272:	
 14807                           
 14808                           ;UART.c: 113: }
 14809                           ;UART.c: 114: baudconfig |= 0b00001000;
 14810  1555  15AF               	bsf	i1InitUART@baudconfig,3
 14811                           
 14812                           ;UART.c: 117: temp = (32000000L / Baud) - 1;
 14813  1556  0823               	movf	i1InitUART@Baud+3,w
 14814  1557  00F3               	movwf	i1___lldiv@divisor+3
 14815  1558  0822               	movf	i1InitUART@Baud+2,w
 14816  1559  00F2               	movwf	i1___lldiv@divisor+2
 14817  155A  0821               	movf	i1InitUART@Baud+1,w
 14818  155B  00F1               	movwf	i1___lldiv@divisor+1
 14819  155C  0820               	movf	i1InitUART@Baud,w
 14820  155D  00F0               	movwf	i1___lldiv@divisor
 14821  155E  3001               	movlw	1
 14822  155F  00F7               	movwf	i1___lldiv@dividend+3
 14823  1560  30E8               	movlw	232
 14824  1561  00F6               	movwf	i1___lldiv@dividend+2
 14825  1562  3048               	movlw	72
 14826  1563  00F5               	movwf	i1___lldiv@dividend+1
 14827  1564  3000               	movlw	0
 14828  1565  00F4               	movwf	i1___lldiv@dividend
 14829  1566  319F  2707  3195   	fcall	i1___lldiv
 14830  1569  30FF               	movlw	255
 14831  156A  0770               	addwf	?i1___lldiv,w
 14832  156B  0020               	movlb	0	; select bank0
 14833  156C  00B1               	movwf	i1InitUART@temp
 14834  156D  30FF               	movlw	255
 14835  156E  3D71               	addwfc	?i1___lldiv+1,w
 14836  156F  00B2               	movwf	i1InitUART@temp+1
 14837  1570  30FF               	movlw	255
 14838  1571  3D72               	addwfc	?i1___lldiv+2,w
 14839  1572  00B3               	movwf	i1InitUART@temp+2
 14840  1573  30FF               	movlw	255
 14841  1574  3D73               	addwfc	?i1___lldiv+3,w
 14842  1575  00B4               	movwf	i1InitUART@temp+3
 14843                           
 14844                           ;UART.c: 118: temp = (temp >> 2) - 1;
 14845  1576  30FF               	movlw	255
 14846  1577  00A5               	movwf	??i1_InitUART
 14847  1578  30FF               	movlw	255
 14848  1579  00A6               	movwf	??i1_InitUART+1
 14849  157A  30FF               	movlw	255
 14850  157B  00A7               	movwf	??i1_InitUART+2
 14851  157C  30FF               	movlw	255
 14852  157D  00A8               	movwf	??i1_InitUART+3
 14853  157E  0831               	movf	i1InitUART@temp,w
 14854  157F  00A9               	movwf	??i1_InitUART+4
 14855  1580  0832               	movf	i1InitUART@temp+1,w
 14856  1581  00AA               	movwf	??i1_InitUART+5
 14857  1582  0833               	movf	i1InitUART@temp+2,w
 14858  1583  00AB               	movwf	??i1_InitUART+6
 14859  1584  0834               	movf	i1InitUART@temp+3,w
 14860  1585  00AC               	movwf	??i1_InitUART+7
 14861  1586  3002               	movlw	2
 14862  1587                     u480_25:	
 14863  1587  36AC               	lsrf	??i1_InitUART+7,f
 14864  1588  0CAB               	rrf	??i1_InitUART+6,f
 14865  1589  0CAA               	rrf	??i1_InitUART+5,f
 14866  158A  0CA9               	rrf	??i1_InitUART+4,f
 14867  158B  0B89               	decfsz	9,f
 14868  158C  2D87               	goto	u480_25
 14869  158D  0829               	movf	??i1_InitUART+4,w
 14870  158E  07A5               	addwf	??i1_InitUART,f
 14871  158F  082A               	movf	??i1_InitUART+5,w
 14872  1590  3DA6               	addwfc	??i1_InitUART+1,f
 14873  1591  082B               	movf	??i1_InitUART+6,w
 14874  1592  3DA7               	addwfc	??i1_InitUART+2,f
 14875  1593  082C               	movf	??i1_InitUART+7,w
 14876  1594  3DA8               	addwfc	??i1_InitUART+3,f
 14877  1595  0828               	movf	??i1_InitUART+3,w
 14878  1596  00B4               	movwf	i1InitUART@temp+3
 14879  1597  0827               	movf	??i1_InitUART+2,w
 14880  1598  00B3               	movwf	i1InitUART@temp+2
 14881  1599  0826               	movf	??i1_InitUART+1,w
 14882  159A  00B2               	movwf	i1InitUART@temp+1
 14883  159B  0825               	movf	??i1_InitUART,w
 14884  159C  00B1               	movwf	i1InitUART@temp
 14885                           
 14886                           ;UART.c: 119: spbrg = (unsigned int)temp;
 14887  159D  0832               	movf	i1InitUART@temp+1,w
 14888  159E  01AE               	clrf	i1InitUART@spbrg+1
 14889  159F  07AE               	addwf	i1InitUART@spbrg+1,f
 14890  15A0  0831               	movf	i1InitUART@temp,w
 14891  15A1  01AD               	clrf	i1InitUART@spbrg
 14892  15A2  07AD               	addwf	i1InitUART@spbrg,f
 14893                           
 14894                           ;UART.c: 121: RCSTAbits.CREN = 0;
 14895  15A3  0023               	movlb	3	; select bank3
 14896  15A4  121D               	bcf	29,4	;volatile
 14897                           
 14898                           ;UART.c: 122: OpenUSART(config, spbrg);
 14899  15A5  0020               	movlb	0	; select bank0
 14900  15A6  082E               	movf	i1InitUART@spbrg+1,w
 14901  15A7  01F1               	clrf	i1OpenUSART@spbrg+1
 14902  15A8  07F1               	addwf	i1OpenUSART@spbrg+1,f
 14903  15A9  082D               	movf	i1InitUART@spbrg,w
 14904  15AA  01F0               	clrf	i1OpenUSART@spbrg
 14905  15AB  07F0               	addwf	i1OpenUSART@spbrg,f
 14906  15AC  0830               	movf	i1InitUART@config,w
 14907  15AD  319B  2304  3195   	fcall	i1_OpenUSART
 14908                           
 14909                           ;UART.c: 123: baudUSART(baudconfig);
 14910  15B0  0020               	movlb	0	; select bank0
 14911  15B1  082F               	movf	i1InitUART@baudconfig,w
 14912  15B2  3198  20E0  3195   	fcall	i1_baudUSART
 14913                           
 14914                           ;UART.c: 124: temp = ReadUSART();
 14915  15B5  3199  2108  3195   	fcall	i1_ReadUSART
 14916  15B8  0020               	movlb	0	; select bank0
 14917  15B9  00A5               	movwf	??i1_InitUART
 14918  15BA  01A6               	clrf	??i1_InitUART+1
 14919  15BB  01A7               	clrf	??i1_InitUART+2
 14920  15BC  01A8               	clrf	??i1_InitUART+3
 14921  15BD  0828               	movf	??i1_InitUART+3,w
 14922  15BE  00B4               	movwf	i1InitUART@temp+3
 14923  15BF  0827               	movf	??i1_InitUART+2,w
 14924  15C0  00B3               	movwf	i1InitUART@temp+2
 14925  15C1  0826               	movf	??i1_InitUART+1,w
 14926  15C2  00B2               	movwf	i1InitUART@temp+1
 14927  15C3  0825               	movf	??i1_InitUART,w
 14928  15C4  00B1               	movwf	i1InitUART@temp
 14929                           
 14930                           ;UART.c: 125: temp = ReadUSART();
 14931  15C5  3199  2108  3195   	fcall	i1_ReadUSART
 14932  15C8  0020               	movlb	0	; select bank0
 14933  15C9  00A5               	movwf	??i1_InitUART
 14934  15CA  01A6               	clrf	??i1_InitUART+1
 14935  15CB  01A7               	clrf	??i1_InitUART+2
 14936  15CC  01A8               	clrf	??i1_InitUART+3
 14937  15CD  0828               	movf	??i1_InitUART+3,w
 14938  15CE  00B4               	movwf	i1InitUART@temp+3
 14939  15CF  0827               	movf	??i1_InitUART+2,w
 14940  15D0  00B3               	movwf	i1InitUART@temp+2
 14941  15D1  0826               	movf	??i1_InitUART+1,w
 14942  15D2  00B2               	movwf	i1InitUART@temp+1
 14943  15D3  0825               	movf	??i1_InitUART,w
 14944  15D4  00B1               	movwf	i1InitUART@temp
 14945                           
 14946                           ;UART.c: 126: temp = ReadUSART();
 14947  15D5  3199  2108  3195   	fcall	i1_ReadUSART
 14948  15D8  0020               	movlb	0	; select bank0
 14949  15D9  00A5               	movwf	??i1_InitUART
 14950  15DA  01A6               	clrf	??i1_InitUART+1
 14951  15DB  01A7               	clrf	??i1_InitUART+2
 14952  15DC  01A8               	clrf	??i1_InitUART+3
 14953  15DD  0828               	movf	??i1_InitUART+3,w
 14954  15DE  00B4               	movwf	i1InitUART@temp+3
 14955  15DF  0827               	movf	??i1_InitUART+2,w
 14956  15E0  00B3               	movwf	i1InitUART@temp+2
 14957  15E1  0826               	movf	??i1_InitUART+1,w
 14958  15E2  00B2               	movwf	i1InitUART@temp+1
 14959  15E3  0825               	movf	??i1_InitUART,w
 14960  15E4  00B1               	movwf	i1InitUART@temp
 14961                           
 14962                           ;UART.c: 127: temp = ReadUSART();
 14963  15E5  3199  2108  3195   	fcall	i1_ReadUSART
 14964  15E8  0020               	movlb	0	; select bank0
 14965  15E9  00A5               	movwf	??i1_InitUART
 14966  15EA  01A6               	clrf	??i1_InitUART+1
 14967  15EB  01A7               	clrf	??i1_InitUART+2
 14968  15EC  01A8               	clrf	??i1_InitUART+3
 14969  15ED  0828               	movf	??i1_InitUART+3,w
 14970  15EE  00B4               	movwf	i1InitUART@temp+3
 14971  15EF  0827               	movf	??i1_InitUART+2,w
 14972  15F0  00B3               	movwf	i1InitUART@temp+2
 14973  15F1  0826               	movf	??i1_InitUART+1,w
 14974  15F2  00B2               	movwf	i1InitUART@temp+1
 14975  15F3  0825               	movf	??i1_InitUART,w
 14976  15F4  00B1               	movwf	i1InitUART@temp
 14977                           
 14978                           ;UART.c: 128: temp = ReadUSART();
 14979  15F5  3199  2108         	fcall	i1_ReadUSART
 14980  15F7  0020               	movlb	0	; select bank0
 14981  15F8  00A5               	movwf	??i1_InitUART
 14982  15F9  01A6               	clrf	??i1_InitUART+1
 14983  15FA  01A7               	clrf	??i1_InitUART+2
 14984  15FB  01A8               	clrf	??i1_InitUART+3
 14985  15FC  0828               	movf	??i1_InitUART+3,w
 14986  15FD  00B4               	movwf	i1InitUART@temp+3
 14987  15FE  0827               	movf	??i1_InitUART+2,w
 14988  15FF  00B3               	movwf	i1InitUART@temp+2
 14989  1600  0826               	movf	??i1_InitUART+1,w
 14990  1601  00B2               	movwf	i1InitUART@temp+1
 14991  1602  0825               	movf	??i1_InitUART,w
 14992  1603  00B1               	movwf	i1InitUART@temp
 14993                           
 14994                           ;UART.c: 130: PPSLOCK =0;
 14995  1604  003C               	movlb	28	; select bank28
 14996  1605  018F               	clrf	15	;volatile
 14997                           
 14998                           ;UART.c: 131: RC2PPS = 0b00010100;
 14999  1606  3014               	movlw	20
 15000  1607  003D               	movlb	29	; select bank29
 15001  1608  00A2               	movwf	34	;volatile
 15002                           
 15003                           ;UART.c: 132: CKPPS = 0b00010010;
 15004  1609  3012               	movlw	18
 15005  160A  003C               	movlb	28	; select bank28
 15006  160B  00A5               	movwf	37	;volatile
 15007                           
 15008                           ;UART.c: 134: RXPPS = 0b00010101;
 15009  160C  3015               	movlw	21
 15010  160D  00A4               	movwf	36	;volatile
 15011                           
 15012                           ;UART.c: 136: PPSLOCK =1;
 15013  160E  3001               	movlw	1
 15014  160F  008F               	movwf	15	;volatile
 15015                           
 15016                           ;UART.c: 138: PIR1bits.RCIF = 0;
 15017  1610  0020               	movlb	0	; select bank0
 15018  1611  1291               	bcf	17,5	;volatile
 15019                           
 15020                           ;UART.c: 139: INTCONbits.PEIE = 1;
 15021  1612  170B               	bsf	11,6	;volatile
 15022  1613  0008               	return
 15023  1614                     __end_ofi1_InitUART:	
 15024                           
 15025                           	psect	text54
 15026  18E0                     __ptext54:	
 15027 ;; *************** function i1_baudUSART *****************
 15028 ;; Defined at:
 15029 ;;		line 147 in file "UART.c"
 15030 ;; Parameters:    Size  Location     Type
 15031 ;;  baudconfig      1    wreg     unsigned char 
 15032 ;; Auto vars:     Size  Location     Type
 15033 ;;  baudconfig      1    0[COMMON] unsigned char 
 15034 ;; Return value:  Size  Location     Type
 15035 ;;		None               void
 15036 ;; Registers used:
 15037 ;;		wreg, status,2
 15038 ;; Tracked objects:
 15039 ;;		On entry : 0/0
 15040 ;;		On exit  : 0/0
 15041 ;;		Unchanged: 0/0
 15042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15044 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15046 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15047 ;;Total ram usage:        1 bytes
 15048 ;; Hardware stack levels used:    1
 15049 ;; This function calls:
 15050 ;;		Nothing
 15051 ;; This function is called by:
 15052 ;;		i1_InitUART
 15053 ;; This function uses a non-reentrant model
 15054 ;;
 15055                           
 15056                           
 15057                           ;psect for function i1_baudUSART
 15058  18E0                     i1_baudUSART:	
 15059                           
 15060                           ;incstack = 0
 15061                           ; Regs used in i1_baudUSART: [wreg+status,2]
 15062                           ;i1baudUSART@baudconfig stored from wreg
 15063  18E0  00F0               	movwf	i1baudUSART@baudconfig
 15064                           
 15065                           ;UART.c: 149: BAUD1CON =0;
 15066  18E1  0023               	movlb	3	; select bank3
 15067  18E2  019F               	clrf	31	;volatile
 15068                           
 15069                           ;UART.c: 150: BAUD1CON = baudconfig;
 15070  18E3  0870               	movf	i1baudUSART@baudconfig,w
 15071  18E4  009F               	movwf	31	;volatile
 15072  18E5  0008               	return
 15073  18E6                     __end_ofi1_baudUSART:	
 15074                           
 15075                           	psect	text55
 15076  1F07                     __ptext55:	
 15077 ;; *************** function i1___lldiv *****************
 15078 ;; Defined at:
 15079 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
 15080 ;; Parameters:    Size  Location     Type
 15081 ;;  divisor         4    0[COMMON] unsigned long 
 15082 ;;  dividend        4    4[COMMON] unsigned long 
 15083 ;; Auto vars:     Size  Location     Type
 15084 ;;  __lldiv         4    9[COMMON] unsigned long 
 15085 ;;  __lldiv         1   13[COMMON] unsigned char 
 15086 ;; Return value:  Size  Location     Type
 15087 ;;                  4    0[COMMON] unsigned long 
 15088 ;; Registers used:
 15089 ;;		wreg, status,2, status,0
 15090 ;; Tracked objects:
 15091 ;;		On entry : 0/0
 15092 ;;		On exit  : 0/0
 15093 ;;		Unchanged: 0/0
 15094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15095 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15096 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15097 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15098 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15099 ;;Total ram usage:       14 bytes
 15100 ;; Hardware stack levels used:    1
 15101 ;; This function calls:
 15102 ;;		Nothing
 15103 ;; This function is called by:
 15104 ;;		i1_InitUART
 15105 ;;		i1_sprintf
 15106 ;; This function uses a non-reentrant model
 15107 ;;
 15108                           
 15109                           
 15110                           ;psect for function i1___lldiv
 15111  1F07                     i1___lldiv:	
 15112                           
 15113                           ;incstack = 0
 15114                           ; Regs used in i1___lldiv: [wreg+status,2+status,0]
 15115  1F07  3000               	movlw	0
 15116  1F08  00FC               	movwf	i1___lldiv@quotient+3
 15117  1F09  3000               	movlw	0
 15118  1F0A  00FB               	movwf	i1___lldiv@quotient+2
 15119  1F0B  3000               	movlw	0
 15120  1F0C  00FA               	movwf	i1___lldiv@quotient+1
 15121  1F0D  3000               	movlw	0
 15122  1F0E  00F9               	movwf	i1___lldiv@quotient
 15123  1F0F  0873               	movf	i1___lldiv@divisor+3,w
 15124  1F10  0472               	iorwf	i1___lldiv@divisor+2,w
 15125  1F11  0471               	iorwf	i1___lldiv@divisor+1,w
 15126  1F12  0470               	iorwf	i1___lldiv@divisor,w
 15127  1F13  1903               	skipnz
 15128  1F14  2F50               	goto	i1l4010
 15129  1F15  01FD               	clrf	i1___lldiv@counter
 15130  1F16  0AFD               	incf	i1___lldiv@counter,f
 15131  1F17                     i1l3996:	
 15132  1F17  1BF3               	btfsc	i1___lldiv@divisor+3,7
 15133  1F18  2F25               	goto	i1l3998
 15134  1F19  3001               	movlw	1
 15135  1F1A                     u420_25:	
 15136  1F1A  35F0               	lslf	i1___lldiv@divisor,f
 15137  1F1B  0DF1               	rlf	i1___lldiv@divisor+1,f
 15138  1F1C  0DF2               	rlf	i1___lldiv@divisor+2,f
 15139  1F1D  0DF3               	rlf	i1___lldiv@divisor+3,f
 15140  1F1E  0B89               	decfsz	9,f
 15141  1F1F  2F1A               	goto	u420_25
 15142  1F20  3001               	movlw	1
 15143  1F21  00F8               	movwf	??i1___lldiv
 15144  1F22  0878               	movf	??i1___lldiv,w
 15145  1F23  07FD               	addwf	i1___lldiv@counter,f
 15146  1F24  2F17               	goto	i1l3996
 15147  1F25                     i1l3998:	
 15148  1F25  3001               	movlw	1
 15149  1F26                     u422_25:	
 15150  1F26  35F9               	lslf	i1___lldiv@quotient,f
 15151  1F27  0DFA               	rlf	i1___lldiv@quotient+1,f
 15152  1F28  0DFB               	rlf	i1___lldiv@quotient+2,f
 15153  1F29  0DFC               	rlf	i1___lldiv@quotient+3,f
 15154  1F2A  0B89               	decfsz	9,f
 15155  1F2B  2F26               	goto	u422_25
 15156  1F2C  0873               	movf	i1___lldiv@divisor+3,w
 15157  1F2D  0277               	subwf	i1___lldiv@dividend+3,w
 15158  1F2E  1D03               	skipz
 15159  1F2F  2F3A               	goto	u423_25
 15160  1F30  0872               	movf	i1___lldiv@divisor+2,w
 15161  1F31  0276               	subwf	i1___lldiv@dividend+2,w
 15162  1F32  1D03               	skipz
 15163  1F33  2F3A               	goto	u423_25
 15164  1F34  0871               	movf	i1___lldiv@divisor+1,w
 15165  1F35  0275               	subwf	i1___lldiv@dividend+1,w
 15166  1F36  1D03               	skipz
 15167  1F37  2F3A               	goto	u423_25
 15168  1F38  0870               	movf	i1___lldiv@divisor,w
 15169  1F39  0274               	subwf	i1___lldiv@dividend,w
 15170  1F3A                     u423_25:	
 15171  1F3A  1C03               	skipc
 15172  1F3B  2F45               	goto	i1l4006
 15173  1F3C  0870               	movf	i1___lldiv@divisor,w
 15174  1F3D  02F4               	subwf	i1___lldiv@dividend,f
 15175  1F3E  0871               	movf	i1___lldiv@divisor+1,w
 15176  1F3F  3BF5               	subwfb	i1___lldiv@dividend+1,f
 15177  1F40  0872               	movf	i1___lldiv@divisor+2,w
 15178  1F41  3BF6               	subwfb	i1___lldiv@dividend+2,f
 15179  1F42  0873               	movf	i1___lldiv@divisor+3,w
 15180  1F43  3BF7               	subwfb	i1___lldiv@dividend+3,f
 15181  1F44  1479               	bsf	i1___lldiv@quotient,0
 15182  1F45                     i1l4006:	
 15183  1F45  3001               	movlw	1
 15184  1F46                     u424_25:	
 15185  1F46  36F3               	lsrf	i1___lldiv@divisor+3,f
 15186  1F47  0CF2               	rrf	i1___lldiv@divisor+2,f
 15187  1F48  0CF1               	rrf	i1___lldiv@divisor+1,f
 15188  1F49  0CF0               	rrf	i1___lldiv@divisor,f
 15189  1F4A  0B89               	decfsz	9,f
 15190  1F4B  2F46               	goto	u424_25
 15191  1F4C  3001               	movlw	1
 15192  1F4D  02FD               	subwf	i1___lldiv@counter,f
 15193  1F4E  1D03               	btfss	3,2
 15194  1F4F  2F25               	goto	i1l3998
 15195  1F50                     i1l4010:	
 15196  1F50  087C               	movf	i1___lldiv@quotient+3,w
 15197  1F51  00F3               	movwf	?i1___lldiv+3
 15198  1F52  087B               	movf	i1___lldiv@quotient+2,w
 15199  1F53  00F2               	movwf	?i1___lldiv+2
 15200  1F54  087A               	movf	i1___lldiv@quotient+1,w
 15201  1F55  00F1               	movwf	?i1___lldiv+1
 15202  1F56  0879               	movf	i1___lldiv@quotient,w
 15203  1F57  00F0               	movwf	?i1___lldiv
 15204  1F58  0008               	return
 15205  1F59                     __end_ofi1___lldiv:	
 15206                           
 15207                           	psect	text56
 15208  1908                     __ptext56:	
 15209 ;; *************** function i1_ReadUSART *****************
 15210 ;; Defined at:
 15211 ;;		line 302 in file "UART.c"
 15212 ;; Parameters:    Size  Location     Type
 15213 ;;		None
 15214 ;; Auto vars:     Size  Location     Type
 15215 ;;  ReadUSART       1    1[COMMON] unsigned char 
 15216 ;; Return value:  Size  Location     Type
 15217 ;;                  1    wreg      unsigned char 
 15218 ;; Registers used:
 15219 ;;		wreg
 15220 ;; Tracked objects:
 15221 ;;		On entry : 0/0
 15222 ;;		On exit  : 0/0
 15223 ;;		Unchanged: 0/0
 15224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15226 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15227 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15228 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15229 ;;Total ram usage:        2 bytes
 15230 ;; Hardware stack levels used:    1
 15231 ;; This function calls:
 15232 ;;		Nothing
 15233 ;; This function is called by:
 15234 ;;		_isr
 15235 ;;		i1_InitUART
 15236 ;; This function uses a non-reentrant model
 15237 ;;
 15238                           
 15239                           
 15240                           ;psect for function i1_ReadUSART
 15241  1908                     i1_ReadUSART:	
 15242                           
 15243                           ;UART.c: 304: char data;
 15244                           ;UART.c: 306: if(RCSTAbits.OERR)
 15245                           
 15246                           ;incstack = 0
 15247                           ; Regs used in i1_ReadUSART: [wreg]
 15248  1908  0023               	movlb	3	; select bank3
 15249  1909  189D               	btfsc	29,1	;volatile
 15250                           
 15251                           ;UART.c: 307: {
 15252                           ;UART.c: 308: RCSTAbits.CREN = 0;
 15253  190A  121D               	bcf	29,4	;volatile
 15254                           
 15255                           ;UART.c: 309: }
 15256                           ;UART.c: 311: data = RCREG;
 15257  190B  0819               	movf	25,w	;volatile
 15258  190C  00F0               	movwf	??i1_ReadUSART
 15259  190D  0870               	movf	??i1_ReadUSART,w
 15260  190E  00F1               	movwf	i1ReadUSART@data
 15261                           
 15262                           ;UART.c: 313: return (data);
 15263  190F  0871               	movf	i1ReadUSART@data,w
 15264  1910  0008               	return
 15265  1911                     __end_ofi1_ReadUSART:	
 15266                           
 15267                           	psect	text57
 15268  1B04                     __ptext57:	
 15269 ;; *************** function i1_OpenUSART *****************
 15270 ;; Defined at:
 15271 ;;		line 158 in file "UART.c"
 15272 ;; Parameters:    Size  Location     Type
 15273 ;;  config          1    wreg     unsigned char 
 15274 ;;  spbrg           2    0[COMMON] unsigned int 
 15275 ;; Auto vars:     Size  Location     Type
 15276 ;;  config          1    2[COMMON] unsigned char 
 15277 ;; Return value:  Size  Location     Type
 15278 ;;		None               void
 15279 ;; Registers used:
 15280 ;;		wreg, status,2
 15281 ;; Tracked objects:
 15282 ;;		On entry : 0/0
 15283 ;;		On exit  : 0/0
 15284 ;;		Unchanged: 0/0
 15285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15286 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15287 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15289 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15290 ;;Total ram usage:        3 bytes
 15291 ;; Hardware stack levels used:    1
 15292 ;; This function calls:
 15293 ;;		Nothing
 15294 ;; This function is called by:
 15295 ;;		i1_InitUART
 15296 ;; This function uses a non-reentrant model
 15297 ;;
 15298                           
 15299                           
 15300                           ;psect for function i1_OpenUSART
 15301  1B04                     i1_OpenUSART:	
 15302                           
 15303                           ;incstack = 0
 15304                           ; Regs used in i1_OpenUSART: [wreg+status,2]
 15305                           ;i1OpenUSART@config stored from wreg
 15306  1B04  00F2               	movwf	i1OpenUSART@config
 15307                           
 15308                           ;UART.c: 160: TX1STA = 0;
 15309  1B05  0023               	movlb	3	; select bank3
 15310  1B06  019E               	clrf	30	;volatile
 15311                           
 15312                           ;UART.c: 161: RC1STA = 0;
 15313  1B07  019D               	clrf	29	;volatile
 15314                           
 15315                           ;UART.c: 163: if(config&0x01)
 15316  1B08  1872               	btfsc	i1OpenUSART@config,0
 15317                           
 15318                           ;UART.c: 164: {
 15319                           ;UART.c: 165: TX1STAbits.SYNC = 1;
 15320  1B09  161E               	bsf	30,4	;volatile
 15321                           
 15322                           ;UART.c: 166: }
 15323                           ;UART.c: 168: if(config&0x02)
 15324  1B0A  1CF2               	btfss	i1OpenUSART@config,1
 15325  1B0B  2B0E               	goto	i1l3918
 15326                           
 15327                           ;UART.c: 169: {
 15328                           ;UART.c: 170: TX1STAbits.TX9 = 1;
 15329  1B0C  171E               	bsf	30,6	;volatile
 15330                           
 15331                           ;UART.c: 171: RC1STAbits.RX9 = 1;
 15332  1B0D  171D               	bsf	29,6	;volatile
 15333  1B0E                     i1l3918:	
 15334                           
 15335                           ;UART.c: 172: }
 15336                           ;UART.c: 174: if(config&0x04)
 15337  1B0E  1972               	btfsc	i1OpenUSART@config,2
 15338                           
 15339                           ;UART.c: 175: {
 15340                           ;UART.c: 176: TX1STAbits.CSRC = 1;
 15341  1B0F  179E               	bsf	30,7	;volatile
 15342                           
 15343                           ;UART.c: 177: }
 15344                           ;UART.c: 179: if(config&0x08)
 15345  1B10  1DF2               	btfss	i1OpenUSART@config,3
 15346  1B11  2B14               	goto	i1l417
 15347                           
 15348                           ;UART.c: 180: {
 15349                           ;UART.c: 181: RC1STAbits.CREN = 1;
 15350  1B12  161D               	bsf	29,4	;volatile
 15351                           
 15352                           ;UART.c: 182: }
 15353  1B13  2B15               	goto	i1l3926
 15354  1B14                     i1l417:	
 15355                           
 15356                           ;UART.c: 183: else
 15357                           ;UART.c: 184: {
 15358                           ;UART.c: 185: RC1STAbits.SREN = 1;
 15359  1B14  169D               	bsf	29,5	;volatile
 15360  1B15                     i1l3926:	
 15361                           
 15362                           ;UART.c: 186: }
 15363                           ;UART.c: 188: if(config&0x10)
 15364  1B15  1A72               	btfsc	i1OpenUSART@config,4
 15365                           
 15366                           ;UART.c: 189: {
 15367                           ;UART.c: 190: TX1STAbits.BRGH = 1;
 15368  1B16  151E               	bsf	30,2	;volatile
 15369                           
 15370                           ;UART.c: 196: }
 15371                           ;UART.c: 198: if(config&0x40)
 15372                           
 15373                           ;UART.c: 194: {
 15374  1B17  1F72               	btfss	i1OpenUSART@config,6
 15375  1B18  2B1E               	goto	i1l421
 15376                           
 15377                           ;UART.c: 199: {
 15378                           ;UART.c: 200: PIR1bits.RCIF = 0;
 15379  1B19  0020               	movlb	0	; select bank0
 15380  1B1A  1291               	bcf	17,5	;volatile
 15381                           
 15382                           ;UART.c: 201: PIE1bits.RCIE = 1;
 15383  1B1B  0021               	movlb	1	; select bank1
 15384  1B1C  1691               	bsf	17,5	;volatile
 15385                           
 15386                           ;UART.c: 203: }
 15387  1B1D  2B20               	goto	i1l3936
 15388  1B1E                     i1l421:	
 15389                           
 15390                           ;UART.c: 204: else
 15391                           ;UART.c: 205: {
 15392                           ;UART.c: 206: PIE1bits.RCIE = 0;
 15393  1B1E  0021               	movlb	1	; select bank1
 15394  1B1F  1291               	bcf	17,5	;volatile
 15395  1B20                     i1l3936:	
 15396                           
 15397                           ;UART.c: 207: }
 15398                           ;UART.c: 209: if(config&0x80)
 15399  1B20  1FF2               	btfss	i1OpenUSART@config,7
 15400  1B21  2B27               	goto	i1l423
 15401                           
 15402                           ;UART.c: 210: {
 15403                           ;UART.c: 211: PIR1bits.TXIF = 0;
 15404  1B22  0020               	movlb	0	; select bank0
 15405  1B23  1211               	bcf	17,4	;volatile
 15406                           
 15407                           ;UART.c: 212: PIE1bits.TXIE = 1;
 15408  1B24  0021               	movlb	1	; select bank1
 15409  1B25  1611               	bsf	17,4	;volatile
 15410                           
 15411                           ;UART.c: 213: }
 15412  1B26  2B28               	goto	i1l3940
 15413  1B27                     i1l423:	
 15414                           
 15415                           ;UART.c: 214: else
 15416                           ;UART.c: 215: {
 15417                           ;UART.c: 216: PIE1bits.TXIE = 0;
 15418  1B27  1211               	bcf	17,4	;volatile
 15419  1B28                     i1l3940:	
 15420                           
 15421                           ;UART.c: 217: }
 15422                           ;UART.c: 219: SPBRG = spbrg;
 15423  1B28  0870               	movf	i1OpenUSART@spbrg,w
 15424  1B29  0023               	movlb	3	; select bank3
 15425  1B2A  009B               	movwf	27	;volatile
 15426                           
 15427                           ;UART.c: 220: SPBRGH = spbrg >> 8;
 15428  1B2B  0871               	movf	i1OpenUSART@spbrg+1,w
 15429  1B2C  009C               	movwf	28	;volatile
 15430                           
 15431                           ;UART.c: 222: TX1STAbits.TXEN = 1;
 15432  1B2D  169E               	bsf	30,5	;volatile
 15433                           
 15434                           ;UART.c: 223: RC1STAbits.SPEN = 1;
 15435  1B2E  179D               	bsf	29,7	;volatile
 15436  1B2F  0008               	return
 15437  1B30                     __end_ofi1_OpenUSART:	
 15438                           
 15439                           	psect	text58
 15440  1964                     __ptext58:	
 15441 ;; *************** function i1_CloseUSART *****************
 15442 ;; Defined at:
 15443 ;;		line 62 in file "UART.c"
 15444 ;; Parameters:    Size  Location     Type
 15445 ;;		None
 15446 ;; Auto vars:     Size  Location     Type
 15447 ;;		None
 15448 ;; Return value:  Size  Location     Type
 15449 ;;		None               void
 15450 ;; Registers used:
 15451 ;;		wreg, status,2, status,0
 15452 ;; Tracked objects:
 15453 ;;		On entry : 0/0
 15454 ;;		On exit  : 0/0
 15455 ;;		Unchanged: 0/0
 15456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15459 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15460 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15461 ;;Total ram usage:        1 bytes
 15462 ;; Hardware stack levels used:    1
 15463 ;; This function calls:
 15464 ;;		Nothing
 15465 ;; This function is called by:
 15466 ;;		i1_InitUART
 15467 ;; This function uses a non-reentrant model
 15468 ;;
 15469                           
 15470                           
 15471                           ;psect for function i1_CloseUSART
 15472  1964                     i1_CloseUSART:	
 15473                           
 15474                           ;UART.c: 64: RCSTA&=0b01001111;
 15475                           
 15476                           ;incstack = 0
 15477                           ; Regs used in i1_CloseUSART: [wreg+status,2+status,0]
 15478  1964  304F               	movlw	79
 15479  1965  00F0               	movwf	??i1_CloseUSART
 15480  1966  0870               	movf	??i1_CloseUSART,w
 15481  1967  0023               	movlb	3	; select bank3
 15482  1968  059D               	andwf	29,f	;volatile
 15483                           
 15484                           ;UART.c: 65: TX1STAbits.TXEN=0;
 15485  1969  129E               	bcf	30,5	;volatile
 15486                           
 15487                           ;UART.c: 66: PIE1&=0b11001111;
 15488  196A  30CF               	movlw	207
 15489  196B  00F0               	movwf	??i1_CloseUSART
 15490  196C  0870               	movf	??i1_CloseUSART,w
 15491  196D  0021               	movlb	1	; select bank1
 15492  196E  0591               	andwf	17,f	;volatile
 15493  196F  0008               	return
 15494  1970                     __end_ofi1_CloseUSART:	
 15495                           
 15496                           	psect	text59
 15497  125D                     __ptext59:	
 15498 ;; *************** function _WriteBaud *****************
 15499 ;; Defined at:
 15500 ;;		line 171 in file "FLASH.c"
 15501 ;; Parameters:    Size  Location     Type
 15502 ;;  row             2    0[BANK1 ] unsigned int 
 15503 ;;  Baud            4    2[BANK1 ] unsigned long 
 15504 ;;  Parity          1    6[BANK1 ] unsigned char 
 15505 ;; Auto vars:     Size  Location     Type
 15506 ;;  temp            4   74[BANK0 ] unsigned long 
 15507 ;; Return value:  Size  Location     Type
 15508 ;;		None               void
 15509 ;; Registers used:
 15510 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15511 ;; Tracked objects:
 15512 ;;		On entry : 0/0
 15513 ;;		On exit  : 0/0
 15514 ;;		Unchanged: 0/0
 15515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15516 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 15517 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15518 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
 15519 ;;      Totals:         0       4      15       0       0       0       0       0       0       0       0       0       
      +0       0
 15520 ;;Total ram usage:       19 bytes
 15521 ;; Hardware stack levels used:    1
 15522 ;; Hardware stack levels required when called:    3
 15523 ;; This function calls:
 15524 ;;		_WriteFlash_Sequential
 15525 ;; This function is called by:
 15526 ;;		_SetBaud
 15527 ;; This function uses a non-reentrant model
 15528 ;;
 15529                           
 15530                           
 15531                           ;psect for function _WriteBaud
 15532  125D                     _WriteBaud:	
 15533                           
 15534                           ;FLASH.c: 173: unsigned long temp;
 15535                           ;FLASH.c: 174: temp = (Baud & 0x000FFFFF) + (((unsigned long) Parity & 0x7) << 20);
 15536                           
 15537                           ;incstack = 0
 15538                           ; Regs used in _WriteBaud: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15539  125D  0021               	movlb	1	; select bank1
 15540  125E  0826               	movf	WriteBaud@Parity^(0+128),w
 15541  125F  3907               	andlw	7
 15542  1260  00A7               	movwf	??_WriteBaud^(0+128)
 15543  1261  01A8               	clrf	(??_WriteBaud^(0+128)+1)
 15544  1262  01A9               	clrf	(??_WriteBaud^(0+128)+2)
 15545  1263  01AA               	clrf	(??_WriteBaud^(0+128)+3)
 15546  1264  3014               	movlw	20
 15547  1265                     u452_25:	
 15548  1265  35A7               	lslf	??_WriteBaud^(0+128),f
 15549  1266  0DA8               	rlf	(??_WriteBaud^(0+128)+1),f
 15550  1267  0DA9               	rlf	(??_WriteBaud^(0+128)+2),f
 15551  1268  0DAA               	rlf	(??_WriteBaud^(0+128)+3),f
 15552  1269  0B89               	decfsz	9,f
 15553  126A  2A65               	goto	u452_25
 15554  126B  30FF               	movlw	255
 15555  126C  0522               	andwf	WriteBaud@Baud^(0+128),w
 15556  126D  00AB               	movwf	(??_WriteBaud+4)^(0+128)
 15557  126E  30FF               	movlw	255
 15558  126F  0523               	andwf	(WriteBaud@Baud+1)^(0+128),w
 15559  1270  00AC               	movwf	((??_WriteBaud+4)^(0+128)+1)
 15560  1271  300F               	movlw	15
 15561  1272  0524               	andwf	(WriteBaud@Baud+2)^(0+128),w
 15562  1273  00AD               	movwf	((??_WriteBaud+4)^(0+128)+2)
 15563  1274  3000               	movlw	0
 15564  1275  0525               	andwf	(WriteBaud@Baud+3)^(0+128),w
 15565  1276  00AE               	movwf	((??_WriteBaud+4)^(0+128)+3)
 15566  1277  082B               	movf	(??_WriteBaud+4)^(0+128),w
 15567  1278  07A7               	addwf	??_WriteBaud^(0+128),f
 15568  1279  082C               	movf	(??_WriteBaud+5)^(0+128),w
 15569  127A  3DA8               	addwfc	(??_WriteBaud^(0+128)+1),f
 15570  127B  082D               	movf	(??_WriteBaud+6)^(0+128),w
 15571  127C  3DA9               	addwfc	(??_WriteBaud^(0+128)+2),f
 15572  127D  082E               	movf	(??_WriteBaud+7)^(0+128),w
 15573  127E  3DAA               	addwfc	(??_WriteBaud^(0+128)+3),f
 15574  127F  082A               	movf	(??_WriteBaud+3)^(0+128),w
 15575  1280  0020               	movlb	0	; select bank0
 15576  1281  00ED               	movwf	WriteBaud@temp+3
 15577  1282  0021               	movlb	1	; select bank1
 15578  1283  0829               	movf	(??_WriteBaud+2)^(0+128),w
 15579  1284  0020               	movlb	0	; select bank0
 15580  1285  00EC               	movwf	WriteBaud@temp+2
 15581  1286  0021               	movlb	1	; select bank1
 15582  1287  0828               	movf	(??_WriteBaud+1)^(0+128),w
 15583  1288  0020               	movlb	0	; select bank0
 15584  1289  00EB               	movwf	WriteBaud@temp+1
 15585  128A  0021               	movlb	1	; select bank1
 15586  128B  0827               	movf	??_WriteBaud^(0+128),w
 15587  128C  0020               	movlb	0	; select bank0
 15588  128D  00EA               	movwf	WriteBaud@temp
 15589                           
 15590                           ;FLASH.c: 175: MEM[1] = (unsigned int) (temp & 0x0003FFF);
 15591  128E  30FF               	movlw	255
 15592  128F  056A               	andwf	WriteBaud@temp,w
 15593  1290  0021               	movlb	1	; select bank1
 15594  1291  00E4               	movwf	(_MEM^(0+128)+2)
 15595  1292  303F               	movlw	63
 15596  1293  0020               	movlb	0	; select bank0
 15597  1294  056B               	andwf	WriteBaud@temp+1,w
 15598  1295  0021               	movlb	1	; select bank1
 15599  1296  00E5               	movwf	((_MEM+1)^(0+128)+2)
 15600                           
 15601                           ;FLASH.c: 176: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
 15602  1297  0020               	movlb	0	; select bank0
 15603  1298  086A               	movf	WriteBaud@temp,w
 15604  1299  0021               	movlb	1	; select bank1
 15605  129A  00A7               	movwf	??_WriteBaud^(0+128)
 15606  129B  0020               	movlb	0	; select bank0
 15607  129C  086B               	movf	WriteBaud@temp+1,w
 15608  129D  0021               	movlb	1	; select bank1
 15609  129E  00A8               	movwf	(??_WriteBaud^(0+128)+1)
 15610  129F  0020               	movlb	0	; select bank0
 15611  12A0  086C               	movf	WriteBaud@temp+2,w
 15612  12A1  0021               	movlb	1	; select bank1
 15613  12A2  00A9               	movwf	(??_WriteBaud^(0+128)+2)
 15614  12A3  0020               	movlb	0	; select bank0
 15615  12A4  086D               	movf	WriteBaud@temp+3,w
 15616  12A5  0021               	movlb	1	; select bank1
 15617  12A6  00AA               	movwf	(??_WriteBaud^(0+128)+3)
 15618  12A7  300E               	movlw	14
 15619  12A8                     u453_25:	
 15620  12A8  36AA               	lsrf	(??_WriteBaud^(0+128)+3),f
 15621  12A9  0CA9               	rrf	(??_WriteBaud^(0+128)+2),f
 15622  12AA  0CA8               	rrf	(??_WriteBaud^(0+128)+1),f
 15623  12AB  0CA7               	rrf	??_WriteBaud^(0+128),f
 15624  12AC  0B89               	decfsz	9,f
 15625  12AD  2AA8               	goto	u453_25
 15626  12AE  30FF               	movlw	255
 15627  12AF  0527               	andwf	??_WriteBaud^(0+128),w
 15628  12B0  00E2               	movwf	_MEM^(0+128)
 15629  12B1  303F               	movlw	63
 15630  12B2  0528               	andwf	(??_WriteBaud+1)^(0+128),w
 15631  12B3  00E3               	movwf	(_MEM+1)^(0+128)
 15632                           
 15633                           ;FLASH.c: 177: WriteFlash_Sequential(row, MEM, 2);
 15634  12B4  0821               	movf	(WriteBaud@row+1)^(0+128),w
 15635  12B5  01FB               	clrf	WriteFlash_Sequential@row+1
 15636  12B6  07FB               	addwf	WriteFlash_Sequential@row+1,f
 15637  12B7  0820               	movf	WriteBaud@row^(0+128),w
 15638  12B8  01FA               	clrf	WriteFlash_Sequential@row
 15639  12B9  07FA               	addwf	WriteFlash_Sequential@row,f
 15640  12BA  30E2               	movlw	_MEM& (0+255)
 15641  12BB  00A7               	movwf	??_WriteBaud^(0+128)
 15642  12BC  0827               	movf	??_WriteBaud^(0+128),w
 15643  12BD  00FC               	movwf	WriteFlash_Sequential@buffer
 15644  12BE  3002               	movlw	2
 15645  12BF  00A8               	movwf	(??_WriteBaud+1)^(0+128)
 15646  12C0  0828               	movf	(??_WriteBaud+1)^(0+128),w
 15647  12C1  00FD               	movwf	WriteFlash_Sequential@amount
 15648  12C2  3193  236E         	fcall	_WriteFlash_Sequential
 15649  12C4  0008               	return
 15650  12C5                     __end_of_WriteBaud:	
 15651                           
 15652                           	psect	text60
 15653  136E                     __ptext60:	
 15654 ;; *************** function _WriteFlash_Sequential *****************
 15655 ;; Defined at:
 15656 ;;		line 112 in file "FLASH.c"
 15657 ;; Parameters:    Size  Location     Type
 15658 ;;  row             2   10[COMMON] unsigned int 
 15659 ;;  buffer          1   12[COMMON] PTR unsigned int 
 15660 ;;		 -> MEM(4), 
 15661 ;;  amount          1   13[COMMON] unsigned char 
 15662 ;; Auto vars:     Size  Location     Type
 15663 ;;  TempBufL       32   35[BANK0 ] unsigned char [32]
 15664 ;;  TempBufH       32    3[BANK0 ] unsigned char [32]
 15665 ;;  temp            2   70[BANK0 ] unsigned int 
 15666 ;;  i               1   73[BANK0 ] unsigned char 
 15667 ;;  spaces          1   72[BANK0 ] unsigned char 
 15668 ;;  amountTemp      1   69[BANK0 ] unsigned char 
 15669 ;;  tempL           1   68[BANK0 ] unsigned char 
 15670 ;;  tempH           1   67[BANK0 ] unsigned char 
 15671 ;; Return value:  Size  Location     Type
 15672 ;;		None               void
 15673 ;; Registers used:
 15674 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15675 ;; Tracked objects:
 15676 ;;		On entry : 0/0
 15677 ;;		On exit  : 0/0
 15678 ;;		Unchanged: 0/0
 15679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15680 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15681 ;;      Locals:         0      71       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15682 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15683 ;;      Totals:         4      74       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15684 ;;Total ram usage:       78 bytes
 15685 ;; Hardware stack levels used:    1
 15686 ;; Hardware stack levels required when called:    2
 15687 ;; This function calls:
 15688 ;;		_BlockErase
 15689 ;;		_UNLOCK
 15690 ;;		i1_ReadFlash_2Byte
 15691 ;;		i1_delayUS
 15692 ;; This function is called by:
 15693 ;;		_WriteBaud
 15694 ;; This function uses a non-reentrant model
 15695 ;;
 15696                           
 15697                           
 15698                           ;psect for function _WriteFlash_Sequential
 15699  136E                     _WriteFlash_Sequential:	
 15700                           
 15701                           ;FLASH.c: 114: unsigned char spaces = 32;
 15702                           
 15703                           ;incstack = 0
 15704                           ; Regs used in _WriteFlash_Sequential: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15705  136E  3020               	movlw	32
 15706  136F  0020               	movlb	0	; select bank0
 15707  1370  00A0               	movwf	??_WriteFlash_Sequential
 15708  1371  0820               	movf	??_WriteFlash_Sequential,w
 15709  1372  00E8               	movwf	WriteFlash_Sequential@spaces
 15710                           
 15711                           ;FLASH.c: 115: unsigned char tempH;
 15712                           ;FLASH.c: 116: unsigned char tempL;
 15713                           ;FLASH.c: 117: unsigned char i;
 15714                           ;FLASH.c: 118: unsigned int temp;
 15715                           ;FLASH.c: 119: unsigned char amountTemp =0;
 15716  1373  01E5               	clrf	WriteFlash_Sequential@amountTemp
 15717                           
 15718                           ;FLASH.c: 120: unsigned char TempBufH[32];
 15719                           ;FLASH.c: 121: unsigned char TempBufL[32];
 15720                           ;FLASH.c: 123: for(i=0;i<spaces;i++)
 15721  1374  01E9               	clrf	WriteFlash_Sequential@i
 15722  1375                     i1l3862:	
 15723  1375  0868               	movf	WriteFlash_Sequential@spaces,w
 15724  1376  0269               	subwf	WriteFlash_Sequential@i,w
 15725  1377  1803               	btfsc	3,0
 15726  1378  2BCB               	goto	i1l3864
 15727                           
 15728                           ;FLASH.c: 124: {
 15729                           ;FLASH.c: 125: amountTemp++;
 15730  1379  3001               	movlw	1
 15731  137A  00A0               	movwf	??_WriteFlash_Sequential
 15732  137B  0820               	movf	??_WriteFlash_Sequential,w
 15733  137C  07E5               	addwf	WriteFlash_Sequential@amountTemp,f
 15734                           
 15735                           ;FLASH.c: 126: if(amountTemp <= amount)
 15736  137D  0865               	movf	WriteFlash_Sequential@amountTemp,w
 15737  137E  027D               	subwf	WriteFlash_Sequential@amount,w
 15738  137F  1C03               	skipc
 15739  1380  2B99               	goto	i1l3850
 15740                           
 15741                           ;FLASH.c: 127: {
 15742                           ;FLASH.c: 128: tempH = (unsigned char)((*buffer & 0x3F00) >> 8);
 15743  1381  087C               	movf	WriteFlash_Sequential@buffer,w
 15744  1382  0086               	movwf	6
 15745  1383  0187               	clrf	7
 15746  1384  3F40               	moviw [0]fsr1
 15747  1385  00A0               	movwf	??_WriteFlash_Sequential
 15748  1386  3F41               	moviw [1]fsr1
 15749  1387  00A1               	movwf	??_WriteFlash_Sequential+1
 15750  1388  0821               	movf	??_WriteFlash_Sequential+1,w
 15751  1389  393F               	andlw	63
 15752  138A  00A2               	movwf	??_WriteFlash_Sequential+2
 15753  138B  0822               	movf	??_WriteFlash_Sequential+2,w
 15754  138C  00E3               	movwf	WriteFlash_Sequential@tempH
 15755                           
 15756                           ;FLASH.c: 129: tempL = (unsigned char)(*buffer & 0x00FF);
 15757  138D  087C               	movf	WriteFlash_Sequential@buffer,w
 15758  138E  0086               	movwf	6
 15759  138F  0187               	clrf	7
 15760  1390  0801               	movf	1,w
 15761  1391  00A0               	movwf	??_WriteFlash_Sequential
 15762  1392  0820               	movf	??_WriteFlash_Sequential,w
 15763  1393  00E4               	movwf	WriteFlash_Sequential@tempL
 15764                           
 15765                           ;FLASH.c: 130: buffer++;
 15766  1394  3002               	movlw	2
 15767  1395  00A0               	movwf	??_WriteFlash_Sequential
 15768  1396  0820               	movf	??_WriteFlash_Sequential,w
 15769  1397  07FC               	addwf	WriteFlash_Sequential@buffer,f
 15770                           
 15771                           ;FLASH.c: 131: }
 15772  1398  2BB6               	goto	i1l3856
 15773  1399                     i1l3850:	
 15774                           
 15775                           ;FLASH.c: 132: else
 15776                           ;FLASH.c: 133: {
 15777                           ;FLASH.c: 135: temp = ReadFlash_2Byte(row, i);
 15778  1399  087B               	movf	WriteFlash_Sequential@row+1,w
 15779  139A  01F1               	clrf	i1ReadFlash_2Byte@row+1
 15780  139B  07F1               	addwf	i1ReadFlash_2Byte@row+1,f
 15781  139C  087A               	movf	WriteFlash_Sequential@row,w
 15782  139D  01F0               	clrf	i1ReadFlash_2Byte@row
 15783  139E  07F0               	addwf	i1ReadFlash_2Byte@row,f
 15784  139F  0869               	movf	WriteFlash_Sequential@i,w
 15785  13A0  00A0               	movwf	??_WriteFlash_Sequential
 15786  13A1  0820               	movf	??_WriteFlash_Sequential,w
 15787  13A2  00F2               	movwf	i1ReadFlash_2Byte@column
 15788  13A3  319A  2284  3193   	fcall	i1_ReadFlash_2Byte
 15789  13A6  0871               	movf	?i1_ReadFlash_2Byte+1,w
 15790  13A7  0020               	movlb	0	; select bank0
 15791  13A8  01E7               	clrf	WriteFlash_Sequential@temp+1
 15792  13A9  07E7               	addwf	WriteFlash_Sequential@temp+1,f
 15793  13AA  0870               	movf	?i1_ReadFlash_2Byte,w
 15794  13AB  01E6               	clrf	WriteFlash_Sequential@temp
 15795  13AC  07E6               	addwf	WriteFlash_Sequential@temp,f
 15796                           
 15797                           ;FLASH.c: 136: tempH = (unsigned char)((temp & 0x3F00) >>8);
 15798  13AD  0867               	movf	WriteFlash_Sequential@temp+1,w
 15799  13AE  393F               	andlw	63
 15800  13AF  00A0               	movwf	??_WriteFlash_Sequential
 15801  13B0  0820               	movf	??_WriteFlash_Sequential,w
 15802  13B1  00E3               	movwf	WriteFlash_Sequential@tempH
 15803                           
 15804                           ;FLASH.c: 137: tempL = (unsigned char)(temp & 0x00FF);
 15805  13B2  0866               	movf	WriteFlash_Sequential@temp,w
 15806  13B3  00A0               	movwf	??_WriteFlash_Sequential
 15807  13B4  0820               	movf	??_WriteFlash_Sequential,w
 15808  13B5  00E4               	movwf	WriteFlash_Sequential@tempL
 15809  13B6                     i1l3856:	
 15810                           
 15811                           ;FLASH.c: 138: }
 15812                           ;FLASH.c: 139: TempBufH[i] = tempH;
 15813  13B6  0863               	movf	WriteFlash_Sequential@tempH,w
 15814  13B7  00A0               	movwf	??_WriteFlash_Sequential
 15815  13B8  0869               	movf	WriteFlash_Sequential@i,w
 15816  13B9  3E23               	addlw	WriteFlash_Sequential@TempBufH& (0+255)
 15817  13BA  0086               	movwf	6
 15818  13BB  0187               	clrf	7
 15819  13BC  0820               	movf	??_WriteFlash_Sequential,w
 15820  13BD  0081               	movwf	1
 15821                           
 15822                           ;FLASH.c: 140: TempBufL[i] = tempL;
 15823  13BE  0864               	movf	WriteFlash_Sequential@tempL,w
 15824  13BF  00A0               	movwf	??_WriteFlash_Sequential
 15825  13C0  0869               	movf	WriteFlash_Sequential@i,w
 15826  13C1  3E43               	addlw	WriteFlash_Sequential@TempBufL& (0+255)
 15827  13C2  0086               	movwf	6
 15828  13C3  0187               	clrf	7
 15829  13C4  0820               	movf	??_WriteFlash_Sequential,w
 15830  13C5  0081               	movwf	1
 15831  13C6  3001               	movlw	1
 15832  13C7  00A0               	movwf	??_WriteFlash_Sequential
 15833  13C8  0820               	movf	??_WriteFlash_Sequential,w
 15834  13C9  07E9               	addwf	WriteFlash_Sequential@i,f
 15835  13CA  2B75               	goto	i1l3862
 15836  13CB                     i1l3864:	
 15837                           
 15838                           ;FLASH.c: 141: }
 15839                           ;FLASH.c: 142: BlockErase(row);
 15840  13CB  087B               	movf	WriteFlash_Sequential@row+1,w
 15841  13CC  01F1               	clrf	BlockErase@row+1
 15842  13CD  07F1               	addwf	BlockErase@row+1,f
 15843  13CE  087A               	movf	WriteFlash_Sequential@row,w
 15844  13CF  01F0               	clrf	BlockErase@row
 15845  13D0  07F0               	addwf	BlockErase@row,f
 15846  13D1  319A  22AE  3193   	fcall	_BlockErase
 15847                           
 15848                           ;FLASH.c: 143: delayUS(1000);
 15849  13D4  3000               	movlw	0
 15850  13D5  00F3               	movwf	i1delayUS@US+3
 15851  13D6  3000               	movlw	0
 15852  13D7  00F2               	movwf	i1delayUS@US+2
 15853  13D8  3003               	movlw	3
 15854  13D9  00F1               	movwf	i1delayUS@US+1
 15855  13DA  30E8               	movlw	232
 15856  13DB  00F0               	movwf	i1delayUS@US
 15857  13DC  319B  23F2  3193   	fcall	i1_delayUS
 15858                           
 15859                           ;FLASH.c: 144: INTCON &= ~0x80;
 15860  13DF  307F               	movlw	127
 15861  13E0  0020               	movlb	0	; select bank0
 15862  13E1  00A0               	movwf	??_WriteFlash_Sequential
 15863  13E2  0820               	movf	??_WriteFlash_Sequential,w
 15864  13E3  058B               	andwf	11,f	;volatile
 15865                           
 15866                           ;FLASH.c: 145: PMCON1 |= 0b00000100;
 15867  13E4  0023               	movlb	3	; select bank3
 15868  13E5  1515               	bsf	21,2	;volatile
 15869                           
 15870                           ;FLASH.c: 146: PMCON1 &= ~0b01000000;
 15871  13E6  30BF               	movlw	191
 15872  13E7  0020               	movlb	0	; select bank0
 15873  13E8  00A0               	movwf	??_WriteFlash_Sequential
 15874  13E9  0820               	movf	??_WriteFlash_Sequential,w
 15875  13EA  0023               	movlb	3	; select bank3
 15876  13EB  0595               	andwf	21,f	;volatile
 15877                           
 15878                           ;FLASH.c: 147: PMCON1 &= ~0b00100000;
 15879  13EC  30DF               	movlw	223
 15880  13ED  0020               	movlb	0	; select bank0
 15881  13EE  00A0               	movwf	??_WriteFlash_Sequential
 15882  13EF  0820               	movf	??_WriteFlash_Sequential,w
 15883  13F0  0023               	movlb	3	; select bank3
 15884  13F1  0595               	andwf	21,f	;volatile
 15885                           
 15886                           ;FLASH.c: 148: PMCON1 &= ~0b00010000;
 15887  13F2  30EF               	movlw	239
 15888  13F3  0020               	movlb	0	; select bank0
 15889  13F4  00A0               	movwf	??_WriteFlash_Sequential
 15890  13F5  0820               	movf	??_WriteFlash_Sequential,w
 15891  13F6  0023               	movlb	3	; select bank3
 15892  13F7  0595               	andwf	21,f	;volatile
 15893                           
 15894                           ;FLASH.c: 149: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 15895  13F8  087B               	movf	WriteFlash_Sequential@row+1,w
 15896  13F9  0020               	movlb	0	; select bank0
 15897  13FA  00A1               	movwf	??_WriteFlash_Sequential+1
 15898  13FB  087A               	movf	WriteFlash_Sequential@row,w
 15899  13FC  00A0               	movwf	??_WriteFlash_Sequential
 15900  13FD  36A1               	lsrf	??_WriteFlash_Sequential+1,f
 15901  13FE  0CA0               	rrf	??_WriteFlash_Sequential,f
 15902  13FF  36A1               	lsrf	??_WriteFlash_Sequential+1,f
 15903  1400  0CA0               	rrf	??_WriteFlash_Sequential,f
 15904  1401  36A1               	lsrf	??_WriteFlash_Sequential+1,f
 15905  1402  0CA0               	rrf	??_WriteFlash_Sequential,f
 15906  1403  0820               	movf	??_WriteFlash_Sequential,w
 15907  1404  397F               	andlw	127
 15908  1405  0023               	movlb	3	; select bank3
 15909  1406  0092               	movwf	18	;volatile
 15910                           
 15911                           ;FLASH.c: 150: PMADRL = (unsigned char)((row & 0x007) << 5);
 15912  1407  087A               	movf	WriteFlash_Sequential@row,w
 15913  1408  3907               	andlw	7
 15914  1409  0020               	movlb	0	; select bank0
 15915  140A  00A0               	movwf	??_WriteFlash_Sequential
 15916  140B  3004               	movlw	4
 15917  140C                     u402_25:	
 15918  140C  35A0               	lslf	??_WriteFlash_Sequential,f
 15919  140D  3EFF               	addlw	-1
 15920  140E  1D03               	skipz
 15921  140F  2C0C               	goto	u402_25
 15922  1410  3520               	lslf	??_WriteFlash_Sequential,w
 15923  1411  0023               	movlb	3	; select bank3
 15924  1412  0091               	movwf	17	;volatile
 15925                           
 15926                           ;FLASH.c: 152: for(i=0;i<spaces;i++)
 15927  1413  0020               	movlb	0	; select bank0
 15928  1414  01E9               	clrf	WriteFlash_Sequential@i
 15929  1415                     i1l3894:	
 15930  1415  0868               	movf	WriteFlash_Sequential@spaces,w
 15931  1416  0269               	subwf	WriteFlash_Sequential@i,w
 15932  1417  1803               	btfsc	3,0
 15933  1418  2C39               	goto	i1l3896
 15934                           
 15935                           ;FLASH.c: 153: {
 15936                           ;FLASH.c: 154: PMDATH = TempBufH[i];
 15937  1419  0869               	movf	WriteFlash_Sequential@i,w
 15938  141A  3E23               	addlw	WriteFlash_Sequential@TempBufH& (0+255)
 15939  141B  0086               	movwf	6
 15940  141C  0187               	clrf	7
 15941  141D  0801               	movf	1,w
 15942  141E  0023               	movlb	3	; select bank3
 15943  141F  0094               	movwf	20	;volatile
 15944                           
 15945                           ;FLASH.c: 155: PMDATL = TempBufL[i];
 15946  1420  0020               	movlb	0	; select bank0
 15947  1421  0869               	movf	WriteFlash_Sequential@i,w
 15948  1422  3E43               	addlw	WriteFlash_Sequential@TempBufL& (0+255)
 15949  1423  0086               	movwf	6
 15950  1424  0187               	clrf	7
 15951  1425  0801               	movf	1,w
 15952  1426  0023               	movlb	3	; select bank3
 15953  1427  0093               	movwf	19	;volatile
 15954                           
 15955                           ;FLASH.c: 156: __nop();
 15956  1428  0000               	nop
 15957                           
 15958                           ;FLASH.c: 157: __nop();
 15959  1429  0000               	nop
 15960                           
 15961                           ;FLASH.c: 158: UNLOCK();
 15962  142A  3199  2138  3193   	fcall	_UNLOCK
 15963                           
 15964                           ;FLASH.c: 159: PMADRL++;
 15965  142D  3001               	movlw	1
 15966  142E  0020               	movlb	0	; select bank0
 15967  142F  00A0               	movwf	??_WriteFlash_Sequential
 15968  1430  0820               	movf	??_WriteFlash_Sequential,w
 15969  1431  0023               	movlb	3	; select bank3
 15970  1432  0791               	addwf	17,f	;volatile
 15971  1433  3001               	movlw	1
 15972  1434  0020               	movlb	0	; select bank0
 15973  1435  00A0               	movwf	??_WriteFlash_Sequential
 15974  1436  0820               	movf	??_WriteFlash_Sequential,w
 15975  1437  07E9               	addwf	WriteFlash_Sequential@i,f
 15976  1438  2C15               	goto	i1l3894
 15977  1439                     i1l3896:	
 15978                           
 15979                           ;FLASH.c: 161: }
 15980                           ;FLASH.c: 162: PMCON1 &= ~0b00000100;
 15981  1439  30FB               	movlw	251
 15982  143A  00A0               	movwf	??_WriteFlash_Sequential
 15983  143B  0820               	movf	??_WriteFlash_Sequential,w
 15984  143C  0023               	movlb	3	; select bank3
 15985  143D  0595               	andwf	21,f	;volatile
 15986                           
 15987                           ;FLASH.c: 163: INTCON |= 0x80;
 15988  143E  178B               	bsf	11,7	;volatile
 15989  143F  0008               	return
 15990  1440                     __end_of_WriteFlash_Sequential:	
 15991                           
 15992                           	psect	text61
 15993  1A84                     __ptext61:	
 15994 ;; *************** function i1_ReadFlash_2Byte *****************
 15995 ;; Defined at:
 15996 ;;		line 43 in file "FLASH.c"
 15997 ;; Parameters:    Size  Location     Type
 15998 ;;  row             2    0[COMMON] unsigned int 
 15999 ;;  column          1    2[COMMON] unsigned char 
 16000 ;; Auto vars:     Size  Location     Type
 16001 ;;		None
 16002 ;; Return value:  Size  Location     Type
 16003 ;;                  2    0[COMMON] unsigned int 
 16004 ;; Registers used:
 16005 ;;		wreg, status,2, status,0
 16006 ;; Tracked objects:
 16007 ;;		On entry : 0/0
 16008 ;;		On exit  : 0/0
 16009 ;;		Unchanged: 0/0
 16010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16011 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16013 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16014 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16015 ;;Total ram usage:        5 bytes
 16016 ;; Hardware stack levels used:    1
 16017 ;; This function calls:
 16018 ;;		Nothing
 16019 ;; This function is called by:
 16020 ;;		_WriteFlash_Sequential
 16021 ;;		i1_ReadFlash_4Byte
 16022 ;; This function uses a non-reentrant model
 16023 ;;
 16024                           
 16025                           
 16026                           ;psect for function i1_ReadFlash_2Byte
 16027  1A84                     i1_ReadFlash_2Byte:	
 16028                           
 16029                           ;FLASH.c: 45: PMCON1 &= ~0b01000000;
 16030                           
 16031                           ;incstack = 0
 16032                           ; Regs used in i1_ReadFlash_2Byte: [wreg+status,2+status,0]
 16033  1A84  30BF               	movlw	191
 16034  1A85  00F3               	movwf	??i1_ReadFlash_2Byte
 16035  1A86  0873               	movf	??i1_ReadFlash_2Byte,w
 16036  1A87  0023               	movlb	3	; select bank3
 16037  1A88  0595               	andwf	21,f	;volatile
 16038                           
 16039                           ;FLASH.c: 46: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 16040  1A89  0871               	movf	i1ReadFlash_2Byte@row+1,w
 16041  1A8A  00F4               	movwf	??i1_ReadFlash_2Byte+1
 16042  1A8B  0870               	movf	i1ReadFlash_2Byte@row,w
 16043  1A8C  00F3               	movwf	??i1_ReadFlash_2Byte
 16044  1A8D  36F4               	lsrf	??i1_ReadFlash_2Byte+1,f
 16045  1A8E  0CF3               	rrf	??i1_ReadFlash_2Byte,f
 16046  1A8F  36F4               	lsrf	??i1_ReadFlash_2Byte+1,f
 16047  1A90  0CF3               	rrf	??i1_ReadFlash_2Byte,f
 16048  1A91  36F4               	lsrf	??i1_ReadFlash_2Byte+1,f
 16049  1A92  0CF3               	rrf	??i1_ReadFlash_2Byte,f
 16050  1A93  0873               	movf	??i1_ReadFlash_2Byte,w
 16051  1A94  397F               	andlw	127
 16052  1A95  0092               	movwf	18	;volatile
 16053                           
 16054                           ;FLASH.c: 47: PMADRL = (unsigned char)(((row & 0x007) << 5) + column);
 16055  1A96  0870               	movf	i1ReadFlash_2Byte@row,w
 16056  1A97  3907               	andlw	7
 16057  1A98  00F3               	movwf	??i1_ReadFlash_2Byte
 16058  1A99  3004               	movlw	4
 16059  1A9A                     u389_25:	
 16060  1A9A  35F3               	lslf	??i1_ReadFlash_2Byte,f
 16061  1A9B  3EFF               	addlw	-1
 16062  1A9C  1D03               	skipz
 16063  1A9D  2A9A               	goto	u389_25
 16064  1A9E  3573               	lslf	??i1_ReadFlash_2Byte,w
 16065  1A9F  0772               	addwf	i1ReadFlash_2Byte@column,w
 16066  1AA0  0091               	movwf	17	;volatile
 16067                           
 16068                           ;FLASH.c: 48: PMCON1 |= 0b00000001;
 16069  1AA1  1415               	bsf	21,0	;volatile
 16070  1AA2                     i1l945:	
 16071                           ;FLASH.c: 49: while(PMCON1 & 0b00000001);
 16072                           
 16073  1AA2  1815               	btfsc	21,0	;volatile
 16074  1AA3  2AA2               	goto	i1l945
 16075                           
 16076                           ;FLASH.c: 50: __nop();
 16077  1AA4  0000               	nop
 16078                           
 16079                           ;FLASH.c: 51: __nop();
 16080  1AA5  0000               	nop
 16081                           
 16082                           ;FLASH.c: 52: return (PMDATL | (PMDATH << 8));
 16083  1AA6  0023               	movlb	3	; select bank3
 16084  1AA7  0814               	movf	20,w	;volatile
 16085  1AA8  01F1               	clrf	?i1_ReadFlash_2Byte+1
 16086  1AA9  07F1               	addwf	?i1_ReadFlash_2Byte+1,f
 16087  1AAA  0813               	movf	19,w	;volatile
 16088  1AAB  01F0               	clrf	?i1_ReadFlash_2Byte
 16089  1AAC  07F0               	addwf	?i1_ReadFlash_2Byte,f
 16090  1AAD  0008               	return
 16091  1AAE                     __end_ofi1_ReadFlash_2Byte:	
 16092                           
 16093                           	psect	text62
 16094  1AAE                     __ptext62:	
 16095 ;; *************** function _BlockErase *****************
 16096 ;; Defined at:
 16097 ;;		line 91 in file "FLASH.c"
 16098 ;; Parameters:    Size  Location     Type
 16099 ;;  row             2    0[COMMON] unsigned int 
 16100 ;; Auto vars:     Size  Location     Type
 16101 ;;		None
 16102 ;; Return value:  Size  Location     Type
 16103 ;;		None               void
 16104 ;; Registers used:
 16105 ;;		wreg, status,2, status,0, pclath, cstack
 16106 ;; Tracked objects:
 16107 ;;		On entry : 0/0
 16108 ;;		On exit  : 0/0
 16109 ;;		Unchanged: 0/0
 16110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16111 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16113 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16114 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16115 ;;Total ram usage:        4 bytes
 16116 ;; Hardware stack levels used:    1
 16117 ;; Hardware stack levels required when called:    1
 16118 ;; This function calls:
 16119 ;;		_UNLOCK
 16120 ;; This function is called by:
 16121 ;;		_WriteFlash_Sequential
 16122 ;; This function uses a non-reentrant model
 16123 ;;
 16124                           
 16125                           
 16126                           ;psect for function _BlockErase
 16127  1AAE                     _BlockErase:	
 16128                           
 16129                           ;FLASH.c: 93: INTCON &= ~0x80;
 16130                           
 16131                           ;incstack = 0
 16132                           ; Regs used in _BlockErase: [wreg+status,2+status,0+pclath+cstack]
 16133  1AAE  307F               	movlw	127
 16134  1AAF  00F2               	movwf	??_BlockErase
 16135  1AB0  0872               	movf	??_BlockErase,w
 16136  1AB1  058B               	andwf	11,f	;volatile
 16137                           
 16138                           ;FLASH.c: 94: PMCON1 &= ~0b01000000;
 16139  1AB2  30BF               	movlw	191
 16140  1AB3  00F2               	movwf	??_BlockErase
 16141  1AB4  0872               	movf	??_BlockErase,w
 16142  1AB5  0023               	movlb	3	; select bank3
 16143  1AB6  0595               	andwf	21,f	;volatile
 16144                           
 16145                           ;FLASH.c: 95: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 16146  1AB7  0871               	movf	BlockErase@row+1,w
 16147  1AB8  00F3               	movwf	??_BlockErase+1
 16148  1AB9  0870               	movf	BlockErase@row,w
 16149  1ABA  00F2               	movwf	??_BlockErase
 16150  1ABB  36F3               	lsrf	??_BlockErase+1,f
 16151  1ABC  0CF2               	rrf	??_BlockErase,f
 16152  1ABD  36F3               	lsrf	??_BlockErase+1,f
 16153  1ABE  0CF2               	rrf	??_BlockErase,f
 16154  1ABF  36F3               	lsrf	??_BlockErase+1,f
 16155  1AC0  0CF2               	rrf	??_BlockErase,f
 16156  1AC1  0872               	movf	??_BlockErase,w
 16157  1AC2  397F               	andlw	127
 16158  1AC3  0092               	movwf	18	;volatile
 16159                           
 16160                           ;FLASH.c: 96: PMADRL = (unsigned char)((row & 0x007) << 5);
 16161  1AC4  0870               	movf	BlockErase@row,w
 16162  1AC5  3907               	andlw	7
 16163  1AC6  00F2               	movwf	??_BlockErase
 16164  1AC7  3004               	movlw	4
 16165  1AC8                     u378_25:	
 16166  1AC8  35F2               	lslf	??_BlockErase,f
 16167  1AC9  3EFF               	addlw	-1
 16168  1ACA  1D03               	skipz
 16169  1ACB  2AC8               	goto	u378_25
 16170  1ACC  3572               	lslf	??_BlockErase,w
 16171  1ACD  0091               	movwf	17	;volatile
 16172                           
 16173                           ;FLASH.c: 97: PMCON1 |= 0b00010000;
 16174  1ACE  1615               	bsf	21,4	;volatile
 16175                           
 16176                           ;FLASH.c: 98: PMCON1 |= 0b00000100;
 16177  1ACF  1515               	bsf	21,2	;volatile
 16178                           
 16179                           ;FLASH.c: 99: UNLOCK();
 16180  1AD0  3199  2138         	fcall	_UNLOCK
 16181                           
 16182                           ;FLASH.c: 100: PMCON1 &= ~0b00000100;
 16183  1AD2  30FB               	movlw	251
 16184  1AD3  00F2               	movwf	??_BlockErase
 16185  1AD4  0872               	movf	??_BlockErase,w
 16186  1AD5  0023               	movlb	3	; select bank3
 16187  1AD6  0595               	andwf	21,f	;volatile
 16188                           
 16189                           ;FLASH.c: 101: INTCON |= 0x80;
 16190  1AD7  178B               	bsf	11,7	;volatile
 16191  1AD8  0008               	return
 16192  1AD9                     __end_of_BlockErase:	
 16193                           
 16194                           	psect	text63
 16195  1938                     __ptext63:	
 16196 ;; *************** function _UNLOCK *****************
 16197 ;; Defined at:
 16198 ;;		line 76 in file "FLASH.c"
 16199 ;; Parameters:    Size  Location     Type
 16200 ;;		None
 16201 ;; Auto vars:     Size  Location     Type
 16202 ;;		None
 16203 ;; Return value:  Size  Location     Type
 16204 ;;		None               void
 16205 ;; Registers used:
 16206 ;;		wreg
 16207 ;; Tracked objects:
 16208 ;;		On entry : 0/0
 16209 ;;		On exit  : 0/0
 16210 ;;		Unchanged: 0/0
 16211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16215 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16216 ;;Total ram usage:        0 bytes
 16217 ;; Hardware stack levels used:    1
 16218 ;; This function calls:
 16219 ;;		Nothing
 16220 ;; This function is called by:
 16221 ;;		_BlockErase
 16222 ;;		_WriteFlash_Sequential
 16223 ;; This function uses a non-reentrant model
 16224 ;;
 16225                           
 16226                           
 16227                           ;psect for function _UNLOCK
 16228  1938                     _UNLOCK:	
 16229                           
 16230                           ;FLASH.c: 78: PMCON2 = 0x55;
 16231                           
 16232                           ;incstack = 0
 16233                           ; Regs used in _UNLOCK: [wreg]
 16234  1938  3055               	movlw	85
 16235  1939  0023               	movlb	3	; select bank3
 16236  193A  0096               	movwf	22	;volatile
 16237                           
 16238                           ;FLASH.c: 79: PMCON2 = 0xAA;
 16239  193B  30AA               	movlw	170
 16240  193C  0096               	movwf	22	;volatile
 16241                           
 16242                           ;FLASH.c: 80: PMCON1 |= 0b00000010;
 16243  193D  1495               	bsf	21,1	;volatile
 16244  193E                     i1l954:	
 16245                           ;FLASH.c: 81: while(PMCON1 & 0b00000010);
 16246                           
 16247  193E  1895               	btfsc	21,1	;volatile
 16248  193F  293E               	goto	i1l954
 16249                           
 16250                           ;FLASH.c: 82: __nop();
 16251  1940  0000               	nop
 16252                           
 16253                           ;FLASH.c: 83: __nop();
 16254  1941  0000               	nop
 16255  1942  0008               	return
 16256  1943                     __end_of_UNLOCK:	
 16257                           
 16258                           	psect	text64
 16259  0E72                     __ptext64:	
 16260 ;; *************** function _Send_PS2 *****************
 16261 ;; Defined at:
 16262 ;;		line 808 in file "PS_2.c"
 16263 ;; Parameters:    Size  Location     Type
 16264 ;;  command         1    wreg     unsigned char 
 16265 ;; Auto vars:     Size  Location     Type
 16266 ;;  command         1    1[BANK0 ] unsigned char 
 16267 ;;  timeout         2    3[BANK0 ] unsigned int 
 16268 ;;  i               1    2[BANK0 ] unsigned char 
 16269 ;;  oddparity       1    0[BANK0 ] unsigned char 
 16270 ;; Return value:  Size  Location     Type
 16271 ;;                  1    wreg      unsigned char 
 16272 ;; Registers used:
 16273 ;;		wreg, status,2, status,0, pclath, cstack
 16274 ;; Tracked objects:
 16275 ;;		On entry : 0/0
 16276 ;;		On exit  : 0/0
 16277 ;;		Unchanged: 0/0
 16278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16280 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16281 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16282 ;;      Totals:         4       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16283 ;;Total ram usage:        9 bytes
 16284 ;; Hardware stack levels used:    1
 16285 ;; Hardware stack levels required when called:    1
 16286 ;; This function calls:
 16287 ;;		_READ_PS_2_PIN
 16288 ;;		i1_CheckSum_byte
 16289 ;;		i1_Clock_TRIS
 16290 ;;		i1_Data_TRIS
 16291 ;;		i1_delayUS
 16292 ;; This function is called by:
 16293 ;;		_Process_PS2_ScanCode
 16294 ;;		_ResendLast
 16295 ;;		_Init_PS_2_Send
 16296 ;;		_Keyboard_Connected
 16297 ;; This function uses a non-reentrant model
 16298 ;;
 16299                           
 16300                           
 16301                           ;psect for function _Send_PS2
 16302  0E72                     _Send_PS2:	
 16303                           
 16304                           ;incstack = 0
 16305                           ; Regs used in _Send_PS2: [wreg+status,2+status,0+pclath+cstack]
 16306                           ;Send_PS2@command stored from wreg
 16307  0E72  0020               	movlb	0	; select bank0
 16308  0E73  00A1               	movwf	Send_PS2@command
 16309                           
 16310                           ;PS_2.c: 810: unsigned char i=0;
 16311  0E74  01A2               	clrf	Send_PS2@i
 16312                           
 16313                           ;PS_2.c: 811: unsigned char oddparity = CheckSum_byte((unsigned int)command , 3);
 16314  0E75  0821               	movf	Send_PS2@command,w
 16315  0E76  00FA               	movwf	??_Send_PS2
 16316  0E77  01FB               	clrf	??_Send_PS2+1
 16317  0E78  087A               	movf	??_Send_PS2,w
 16318  0E79  00F0               	movwf	i1CheckSum_byte@This
 16319  0E7A  087B               	movf	??_Send_PS2+1,w
 16320  0E7B  00F1               	movwf	i1CheckSum_byte@This+1
 16321  0E7C  3003               	movlw	3
 16322  0E7D  00FC               	movwf	??_Send_PS2+2
 16323  0E7E  087C               	movf	??_Send_PS2+2,w
 16324  0E7F  00F2               	movwf	i1CheckSum_byte@Odd_Even
 16325  0E80  319B  235F  318E   	fcall	i1_CheckSum_byte
 16326  0E83  00FD               	movwf	??_Send_PS2+3
 16327  0E84  087D               	movf	??_Send_PS2+3,w
 16328  0E85  0020               	movlb	0	; select bank0
 16329  0E86  00A0               	movwf	Send_PS2@oddparity
 16330                           
 16331                           ;PS_2.c: 812: unsigned int timeout =0;
 16332  0E87  01A3               	clrf	Send_PS2@timeout
 16333  0E88  01A4               	clrf	Send_PS2@timeout+1
 16334                           
 16335                           ;PS_2.c: 814: Clock_TRIS(0);
 16336  0E89  3000               	movlw	0
 16337  0E8A  3199  211A  318E   	fcall	i1_Clock_TRIS
 16338                           
 16339                           ;PS_2.c: 815: Data_TRIS(0);
 16340  0E8D  3000               	movlw	0
 16341  0E8E  3199  2124  318E   	fcall	i1_Data_TRIS
 16342                           
 16343                           ;PS_2.c: 816: LATA &= ~0b00100000;
 16344  0E91  30DF               	movlw	223
 16345  0E92  00FA               	movwf	??_Send_PS2
 16346  0E93  087A               	movf	??_Send_PS2,w
 16347  0E94  0022               	movlb	2	; select bank2
 16348  0E95  058C               	andwf	12,f	;volatile
 16349                           
 16350                           ;PS_2.c: 817: delayUS(300);
 16351  0E96  3000               	movlw	0
 16352  0E97  00F3               	movwf	i1delayUS@US+3
 16353  0E98  3000               	movlw	0
 16354  0E99  00F2               	movwf	i1delayUS@US+2
 16355  0E9A  3001               	movlw	1
 16356  0E9B  00F1               	movwf	i1delayUS@US+1
 16357  0E9C  302C               	movlw	44
 16358  0E9D  00F0               	movwf	i1delayUS@US
 16359  0E9E  319B  23F2  318E   	fcall	i1_delayUS
 16360                           
 16361                           ;PS_2.c: 818: LATA &= ~0b00010000;
 16362  0EA1  30EF               	movlw	239
 16363  0EA2  00FA               	movwf	??_Send_PS2
 16364  0EA3  087A               	movf	??_Send_PS2,w
 16365  0EA4  0022               	movlb	2	; select bank2
 16366  0EA5  058C               	andwf	12,f	;volatile
 16367                           
 16368                           ;PS_2.c: 819: delayUS(20);
 16369  0EA6  3000               	movlw	0
 16370  0EA7  00F3               	movwf	i1delayUS@US+3
 16371  0EA8  3000               	movlw	0
 16372  0EA9  00F2               	movwf	i1delayUS@US+2
 16373  0EAA  3000               	movlw	0
 16374  0EAB  00F1               	movwf	i1delayUS@US+1
 16375  0EAC  3014               	movlw	20
 16376  0EAD  00F0               	movwf	i1delayUS@US
 16377  0EAE  319B  23F2  318E   	fcall	i1_delayUS
 16378                           
 16379                           ;PS_2.c: 820: Clock_TRIS(1);
 16380  0EB1  3001               	movlw	1
 16381  0EB2  3199  211A  318E   	fcall	i1_Clock_TRIS
 16382                           
 16383                           ;PS_2.c: 821: timeout=0;
 16384  0EB5  0020               	movlb	0	; select bank0
 16385  0EB6  01A3               	clrf	Send_PS2@timeout
 16386  0EB7  01A4               	clrf	Send_PS2@timeout+1
 16387  0EB8                     i1l4726:	
 16388                           ;PS_2.c: 822: while(READ_PS_2_PIN(0b00100000))
 16389                           
 16390  0EB8  3020               	movlw	32
 16391  0EB9  3199  21FB  318E   	fcall	_READ_PS_2_PIN
 16392  0EBC  3800               	iorlw	0
 16393  0EBD  1903               	btfsc	3,2
 16394  0EBE  2ED5               	goto	i1l4728
 16395                           
 16396                           ;PS_2.c: 823: {
 16397                           ;PS_2.c: 824: __nop();
 16398  0EBF  0000               	nop
 16399                           
 16400                           ;PS_2.c: 825: timeout++;
 16401  0EC0  3001               	movlw	1
 16402  0EC1  0020               	movlb	0	; select bank0
 16403  0EC2  07A3               	addwf	Send_PS2@timeout,f
 16404  0EC3  3000               	movlw	0
 16405  0EC4  3DA4               	addwfc	Send_PS2@timeout+1,f
 16406                           
 16407                           ;PS_2.c: 826: if(timeout > 15000)
 16408  0EC5  303A               	movlw	58
 16409  0EC6  0224               	subwf	Send_PS2@timeout+1,w
 16410  0EC7  3099               	movlw	153
 16411  0EC8  1903               	skipnz
 16412  0EC9  0223               	subwf	Send_PS2@timeout,w
 16413  0ECA  1C03               	skipc
 16414  0ECB  2EB8               	goto	i1l4726
 16415                           
 16416                           ;PS_2.c: 827: {
 16417                           ;PS_2.c: 828: Clock_TRIS(1);
 16418  0ECC  3001               	movlw	1
 16419  0ECD  3199  211A  318E   	fcall	i1_Clock_TRIS
 16420                           
 16421                           ;PS_2.c: 829: Data_TRIS(1);
 16422  0ED0  3001               	movlw	1
 16423  0ED1  3199  2124         	fcall	i1_Data_TRIS
 16424                           
 16425                           ;PS_2.c: 830: return 1;
 16426  0ED3  3001               	movlw	1
 16427  0ED4  0008               	return
 16428  0ED5                     i1l4728:	
 16429                           
 16430                           ;PS_2.c: 831: }
 16431                           ;PS_2.c: 832: }
 16432                           ;PS_2.c: 833: for(i=0;i<8;i++)
 16433  0ED5  0020               	movlb	0	; select bank0
 16434  0ED6  01A2               	clrf	Send_PS2@i
 16435  0ED7  3008               	movlw	8
 16436  0ED8  0222               	subwf	Send_PS2@i,w
 16437  0ED9  1803               	btfsc	3,0
 16438  0EDA  2F2F               	goto	i1l853
 16439  0EDB                     i1l852:	
 16440                           
 16441                           ;PS_2.c: 834: {
 16442                           ;PS_2.c: 835: if(command & 0x1)
 16443  0EDB  1C21               	btfss	Send_PS2@command,0
 16444  0EDC  2EE0               	goto	i1l4736
 16445                           
 16446                           ;PS_2.c: 836: {
 16447                           ;PS_2.c: 837: LATA |= 0b00010000;
 16448  0EDD  0022               	movlb	2	; select bank2
 16449  0EDE  160C               	bsf	12,4	;volatile
 16450                           
 16451                           ;PS_2.c: 838: }
 16452  0EDF  2EE5               	goto	i1l4738
 16453  0EE0                     i1l4736:	
 16454                           
 16455                           ;PS_2.c: 839: else
 16456                           ;PS_2.c: 840: {
 16457                           ;PS_2.c: 841: LATA &= ~0b00010000;
 16458  0EE0  30EF               	movlw	239
 16459  0EE1  00FA               	movwf	??_Send_PS2
 16460  0EE2  087A               	movf	??_Send_PS2,w
 16461  0EE3  0022               	movlb	2	; select bank2
 16462  0EE4  058C               	andwf	12,f	;volatile
 16463  0EE5                     i1l4738:	
 16464                           
 16465                           ;PS_2.c: 842: }
 16466                           ;PS_2.c: 843: command >> = 1;
 16467  0EE5  1003               	clrc
 16468  0EE6  0020               	movlb	0	; select bank0
 16469  0EE7  0CA1               	rrf	Send_PS2@command,f
 16470                           
 16471                           ;PS_2.c: 844: timeout=0;
 16472  0EE8  01A3               	clrf	Send_PS2@timeout
 16473  0EE9  01A4               	clrf	Send_PS2@timeout+1
 16474  0EEA                     i1l4750:	
 16475                           ;PS_2.c: 845: while(!READ_PS_2_PIN(0b00100000))
 16476                           
 16477  0EEA  3020               	movlw	32
 16478  0EEB  3199  21FB  318E   	fcall	_READ_PS_2_PIN
 16479  0EEE  3A00               	xorlw	0
 16480  0EEF  1D03               	btfss	3,2
 16481  0EF0  2F06               	goto	i1l4752
 16482                           
 16483                           ;PS_2.c: 846: {
 16484                           ;PS_2.c: 847: timeout++;
 16485  0EF1  3001               	movlw	1
 16486  0EF2  0020               	movlb	0	; select bank0
 16487  0EF3  07A3               	addwf	Send_PS2@timeout,f
 16488  0EF4  3000               	movlw	0
 16489  0EF5  3DA4               	addwfc	Send_PS2@timeout+1,f
 16490                           
 16491                           ;PS_2.c: 848: if(timeout > 15000)
 16492  0EF6  303A               	movlw	58
 16493  0EF7  0224               	subwf	Send_PS2@timeout+1,w
 16494  0EF8  3099               	movlw	153
 16495  0EF9  1903               	skipnz
 16496  0EFA  0223               	subwf	Send_PS2@timeout,w
 16497  0EFB  1C03               	skipc
 16498  0EFC  2EEA               	goto	i1l4750
 16499                           
 16500                           ;PS_2.c: 849: {
 16501                           ;PS_2.c: 850: Clock_TRIS(1);
 16502  0EFD  3001               	movlw	1
 16503  0EFE  3199  211A  318E   	fcall	i1_Clock_TRIS
 16504                           
 16505                           ;PS_2.c: 851: Data_TRIS(1);
 16506  0F01  3001               	movlw	1
 16507  0F02  3199  2124         	fcall	i1_Data_TRIS
 16508                           
 16509                           ;PS_2.c: 852: return 1;
 16510  0F04  3001               	movlw	1
 16511  0F05  0008               	return
 16512  0F06                     i1l4752:	
 16513                           
 16514                           ;PS_2.c: 853: }
 16515                           ;PS_2.c: 854: }
 16516                           ;PS_2.c: 855: timeout=0;
 16517  0F06  0020               	movlb	0	; select bank0
 16518  0F07  01A3               	clrf	Send_PS2@timeout
 16519  0F08  01A4               	clrf	Send_PS2@timeout+1
 16520  0F09                     i1l4762:	
 16521                           ;PS_2.c: 856: while(READ_PS_2_PIN(0b00100000))
 16522                           
 16523  0F09  3020               	movlw	32
 16524  0F0A  3199  21FB  318E   	fcall	_READ_PS_2_PIN
 16525  0F0D  3800               	iorlw	0
 16526  0F0E  1903               	btfsc	3,2
 16527  0F0F  2F26               	goto	i1l4764
 16528                           
 16529                           ;PS_2.c: 857: {
 16530                           ;PS_2.c: 858: __nop();
 16531  0F10  0000               	nop
 16532                           
 16533                           ;PS_2.c: 859: timeout++;
 16534  0F11  3001               	movlw	1
 16535  0F12  0020               	movlb	0	; select bank0
 16536  0F13  07A3               	addwf	Send_PS2@timeout,f
 16537  0F14  3000               	movlw	0
 16538  0F15  3DA4               	addwfc	Send_PS2@timeout+1,f
 16539                           
 16540                           ;PS_2.c: 860: if(timeout > 15000)
 16541  0F16  303A               	movlw	58
 16542  0F17  0224               	subwf	Send_PS2@timeout+1,w
 16543  0F18  3099               	movlw	153
 16544  0F19  1903               	skipnz
 16545  0F1A  0223               	subwf	Send_PS2@timeout,w
 16546  0F1B  1C03               	skipc
 16547  0F1C  2F09               	goto	i1l4762
 16548                           
 16549                           ;PS_2.c: 861: {
 16550                           ;PS_2.c: 862: Clock_TRIS(1);
 16551  0F1D  3001               	movlw	1
 16552  0F1E  3199  211A  318E   	fcall	i1_Clock_TRIS
 16553                           
 16554                           ;PS_2.c: 863: Data_TRIS(1);
 16555  0F21  3001               	movlw	1
 16556  0F22  3199  2124         	fcall	i1_Data_TRIS
 16557                           
 16558                           ;PS_2.c: 864: return 1;
 16559  0F24  3001               	movlw	1
 16560  0F25  0008               	return
 16561  0F26                     i1l4764:	
 16562  0F26  3001               	movlw	1
 16563  0F27  00FA               	movwf	??_Send_PS2
 16564  0F28  087A               	movf	??_Send_PS2,w
 16565  0F29  0020               	movlb	0	; select bank0
 16566  0F2A  07A2               	addwf	Send_PS2@i,f
 16567  0F2B  3008               	movlw	8
 16568  0F2C  0222               	subwf	Send_PS2@i,w
 16569  0F2D  1C03               	skipc
 16570  0F2E  2EDB               	goto	i1l852
 16571  0F2F                     i1l853:	
 16572                           
 16573                           ;PS_2.c: 865: }
 16574                           ;PS_2.c: 866: }
 16575                           ;PS_2.c: 867: }
 16576                           ;PS_2.c: 869: if(oddparity & 0x1)
 16577  0F2F  1C20               	btfss	Send_PS2@oddparity,0
 16578  0F30  2F34               	goto	i1l4770
 16579                           
 16580                           ;PS_2.c: 870: {
 16581                           ;PS_2.c: 871: LATA |= 0b00010000;
 16582  0F31  0022               	movlb	2	; select bank2
 16583  0F32  160C               	bsf	12,4	;volatile
 16584                           
 16585                           ;PS_2.c: 872: }
 16586  0F33  2F39               	goto	i1l4772
 16587  0F34                     i1l4770:	
 16588                           
 16589                           ;PS_2.c: 873: else
 16590                           ;PS_2.c: 874: {
 16591                           ;PS_2.c: 875: LATA &= ~0b00010000;
 16592  0F34  30EF               	movlw	239
 16593  0F35  00FA               	movwf	??_Send_PS2
 16594  0F36  087A               	movf	??_Send_PS2,w
 16595  0F37  0022               	movlb	2	; select bank2
 16596  0F38  058C               	andwf	12,f	;volatile
 16597  0F39                     i1l4772:	
 16598                           
 16599                           ;PS_2.c: 876: }
 16600                           ;PS_2.c: 877: timeout=0;
 16601  0F39  0020               	movlb	0	; select bank0
 16602  0F3A  01A3               	clrf	Send_PS2@timeout
 16603  0F3B  01A4               	clrf	Send_PS2@timeout+1
 16604  0F3C                     i1l4782:	
 16605                           ;PS_2.c: 878: while(!READ_PS_2_PIN(0b00100000))
 16606                           
 16607  0F3C  3020               	movlw	32
 16608  0F3D  3199  21FB  318E   	fcall	_READ_PS_2_PIN
 16609  0F40  3A00               	xorlw	0
 16610  0F41  1D03               	btfss	3,2
 16611  0F42  2F58               	goto	i1l4784
 16612                           
 16613                           ;PS_2.c: 879: {
 16614                           ;PS_2.c: 880: timeout++;
 16615  0F43  3001               	movlw	1
 16616  0F44  0020               	movlb	0	; select bank0
 16617  0F45  07A3               	addwf	Send_PS2@timeout,f
 16618  0F46  3000               	movlw	0
 16619  0F47  3DA4               	addwfc	Send_PS2@timeout+1,f
 16620                           
 16621                           ;PS_2.c: 881: if(timeout > 15000)
 16622  0F48  303A               	movlw	58
 16623  0F49  0224               	subwf	Send_PS2@timeout+1,w
 16624  0F4A  3099               	movlw	153
 16625  0F4B  1903               	skipnz
 16626  0F4C  0223               	subwf	Send_PS2@timeout,w
 16627  0F4D  1C03               	skipc
 16628  0F4E  2F3C               	goto	i1l4782
 16629                           
 16630                           ;PS_2.c: 882: {
 16631                           ;PS_2.c: 883: Clock_TRIS(1);
 16632  0F4F  3001               	movlw	1
 16633  0F50  3199  211A  318E   	fcall	i1_Clock_TRIS
 16634                           
 16635                           ;PS_2.c: 884: Data_TRIS(1);
 16636  0F53  3001               	movlw	1
 16637  0F54  3199  2124         	fcall	i1_Data_TRIS
 16638                           
 16639                           ;PS_2.c: 885: return 1;
 16640  0F56  3001               	movlw	1
 16641  0F57  0008               	return
 16642  0F58                     i1l4784:	
 16643                           
 16644                           ;PS_2.c: 886: }
 16645                           ;PS_2.c: 887: }
 16646                           ;PS_2.c: 888: timeout=0;
 16647  0F58  0020               	movlb	0	; select bank0
 16648  0F59  01A3               	clrf	Send_PS2@timeout
 16649  0F5A  01A4               	clrf	Send_PS2@timeout+1
 16650  0F5B                     i1l4794:	
 16651                           ;PS_2.c: 889: while(READ_PS_2_PIN(0b00100000))
 16652                           
 16653  0F5B  3020               	movlw	32
 16654  0F5C  3199  21FB  318E   	fcall	_READ_PS_2_PIN
 16655  0F5F  3800               	iorlw	0
 16656  0F60  1903               	btfsc	3,2
 16657  0F61  2F77               	goto	i1l4796
 16658                           
 16659                           ;PS_2.c: 890: {
 16660                           ;PS_2.c: 891: timeout++;
 16661  0F62  3001               	movlw	1
 16662  0F63  0020               	movlb	0	; select bank0
 16663  0F64  07A3               	addwf	Send_PS2@timeout,f
 16664  0F65  3000               	movlw	0
 16665  0F66  3DA4               	addwfc	Send_PS2@timeout+1,f
 16666                           
 16667                           ;PS_2.c: 892: if(timeout > 15000)
 16668  0F67  303A               	movlw	58
 16669  0F68  0224               	subwf	Send_PS2@timeout+1,w
 16670  0F69  3099               	movlw	153
 16671  0F6A  1903               	skipnz
 16672  0F6B  0223               	subwf	Send_PS2@timeout,w
 16673  0F6C  1C03               	skipc
 16674  0F6D  2F5B               	goto	i1l4794
 16675                           
 16676                           ;PS_2.c: 893: {
 16677                           ;PS_2.c: 894: Clock_TRIS(1);
 16678  0F6E  3001               	movlw	1
 16679  0F6F  3199  211A  318E   	fcall	i1_Clock_TRIS
 16680                           
 16681                           ;PS_2.c: 895: Data_TRIS(1);
 16682  0F72  3001               	movlw	1
 16683  0F73  3199  2124         	fcall	i1_Data_TRIS
 16684                           
 16685                           ;PS_2.c: 896: return 1;
 16686  0F75  3001               	movlw	1
 16687  0F76  0008               	return
 16688  0F77                     i1l4796:	
 16689                           
 16690                           ;PS_2.c: 897: }
 16691                           ;PS_2.c: 898: }
 16692                           ;PS_2.c: 900: Data_TRIS(1);
 16693  0F77  3001               	movlw	1
 16694  0F78  3199  2124  318E   	fcall	i1_Data_TRIS
 16695                           
 16696                           ;PS_2.c: 902: timeout=0;
 16697  0F7B  0020               	movlb	0	; select bank0
 16698  0F7C  01A3               	clrf	Send_PS2@timeout
 16699  0F7D  01A4               	clrf	Send_PS2@timeout+1
 16700  0F7E                     i1l4808:	
 16701                           ;PS_2.c: 903: while(READ_PS_2_PIN(0b00010000))
 16702                           
 16703  0F7E  3010               	movlw	16
 16704  0F7F  3199  21FB  318E   	fcall	_READ_PS_2_PIN
 16705  0F82  3800               	iorlw	0
 16706  0F83  1903               	btfsc	3,2
 16707  0F84  2F9A               	goto	i1l4810
 16708                           
 16709                           ;PS_2.c: 904: {
 16710                           ;PS_2.c: 905: timeout++;
 16711  0F85  3001               	movlw	1
 16712  0F86  0020               	movlb	0	; select bank0
 16713  0F87  07A3               	addwf	Send_PS2@timeout,f
 16714  0F88  3000               	movlw	0
 16715  0F89  3DA4               	addwfc	Send_PS2@timeout+1,f
 16716                           
 16717                           ;PS_2.c: 906: if(timeout > 15000)
 16718  0F8A  303A               	movlw	58
 16719  0F8B  0224               	subwf	Send_PS2@timeout+1,w
 16720  0F8C  3099               	movlw	153
 16721  0F8D  1903               	skipnz
 16722  0F8E  0223               	subwf	Send_PS2@timeout,w
 16723  0F8F  1C03               	skipc
 16724  0F90  2F7E               	goto	i1l4808
 16725                           
 16726                           ;PS_2.c: 907: {
 16727                           ;PS_2.c: 908: Clock_TRIS(1);
 16728  0F91  3001               	movlw	1
 16729  0F92  3199  211A  318E   	fcall	i1_Clock_TRIS
 16730                           
 16731                           ;PS_2.c: 909: Data_TRIS(1);
 16732  0F95  3001               	movlw	1
 16733  0F96  3199  2124         	fcall	i1_Data_TRIS
 16734                           
 16735                           ;PS_2.c: 910: return 1;
 16736  0F98  3001               	movlw	1
 16737  0F99  0008               	return
 16738  0F9A                     i1l4810:	
 16739                           
 16740                           ;PS_2.c: 911: }
 16741                           ;PS_2.c: 912: }
 16742                           ;PS_2.c: 913: timeout=0;
 16743  0F9A  0020               	movlb	0	; select bank0
 16744  0F9B  01A3               	clrf	Send_PS2@timeout
 16745  0F9C  01A4               	clrf	Send_PS2@timeout+1
 16746  0F9D                     i1l4820:	
 16747                           ;PS_2.c: 914: while(READ_PS_2_PIN(0b00100000))
 16748                           
 16749  0F9D  3020               	movlw	32
 16750  0F9E  3199  21FB  318E   	fcall	_READ_PS_2_PIN
 16751  0FA1  3800               	iorlw	0
 16752  0FA2  1903               	btfsc	3,2
 16753  0FA3  2FB9               	goto	i1l4822
 16754                           
 16755                           ;PS_2.c: 915: {
 16756                           ;PS_2.c: 916: timeout++;
 16757  0FA4  3001               	movlw	1
 16758  0FA5  0020               	movlb	0	; select bank0
 16759  0FA6  07A3               	addwf	Send_PS2@timeout,f
 16760  0FA7  3000               	movlw	0
 16761  0FA8  3DA4               	addwfc	Send_PS2@timeout+1,f
 16762                           
 16763                           ;PS_2.c: 917: if(timeout > 15000)
 16764  0FA9  303A               	movlw	58
 16765  0FAA  0224               	subwf	Send_PS2@timeout+1,w
 16766  0FAB  3099               	movlw	153
 16767  0FAC  1903               	skipnz
 16768  0FAD  0223               	subwf	Send_PS2@timeout,w
 16769  0FAE  1C03               	skipc
 16770  0FAF  2F9D               	goto	i1l4820
 16771                           
 16772                           ;PS_2.c: 918: {
 16773                           ;PS_2.c: 919: Clock_TRIS(1);
 16774  0FB0  3001               	movlw	1
 16775  0FB1  3199  211A  318E   	fcall	i1_Clock_TRIS
 16776                           
 16777                           ;PS_2.c: 920: Data_TRIS(1);
 16778  0FB4  3001               	movlw	1
 16779  0FB5  3199  2124         	fcall	i1_Data_TRIS
 16780                           
 16781                           ;PS_2.c: 921: return 1;
 16782  0FB7  3001               	movlw	1
 16783  0FB8  0008               	return
 16784  0FB9                     i1l4822:	
 16785                           
 16786                           ;PS_2.c: 922: }
 16787                           ;PS_2.c: 923: }
 16788                           ;PS_2.c: 924: timeout=0;
 16789  0FB9  0020               	movlb	0	; select bank0
 16790  0FBA  01A3               	clrf	Send_PS2@timeout
 16791  0FBB  01A4               	clrf	Send_PS2@timeout+1
 16792  0FBC                     i1l4832:	
 16793                           ;PS_2.c: 925: while(!READ_PS_2_PIN(0b00010000))
 16794                           
 16795  0FBC  3010               	movlw	16
 16796  0FBD  3199  21FB  318E   	fcall	_READ_PS_2_PIN
 16797  0FC0  3A00               	xorlw	0
 16798  0FC1  1D03               	btfss	3,2
 16799  0FC2  2FD8               	goto	i1l4834
 16800                           
 16801                           ;PS_2.c: 926: {
 16802                           ;PS_2.c: 927: timeout++;
 16803  0FC3  3001               	movlw	1
 16804  0FC4  0020               	movlb	0	; select bank0
 16805  0FC5  07A3               	addwf	Send_PS2@timeout,f
 16806  0FC6  3000               	movlw	0
 16807  0FC7  3DA4               	addwfc	Send_PS2@timeout+1,f
 16808                           
 16809                           ;PS_2.c: 928: if(timeout > 15000)
 16810  0FC8  303A               	movlw	58
 16811  0FC9  0224               	subwf	Send_PS2@timeout+1,w
 16812  0FCA  3099               	movlw	153
 16813  0FCB  1903               	skipnz
 16814  0FCC  0223               	subwf	Send_PS2@timeout,w
 16815  0FCD  1C03               	skipc
 16816  0FCE  2FBC               	goto	i1l4832
 16817                           
 16818                           ;PS_2.c: 929: {
 16819                           ;PS_2.c: 930: Clock_TRIS(1);
 16820  0FCF  3001               	movlw	1
 16821  0FD0  3199  211A  318E   	fcall	i1_Clock_TRIS
 16822                           
 16823                           ;PS_2.c: 931: Data_TRIS(1);
 16824  0FD3  3001               	movlw	1
 16825  0FD4  3199  2124         	fcall	i1_Data_TRIS
 16826                           
 16827                           ;PS_2.c: 932: return 1;
 16828  0FD6  3001               	movlw	1
 16829  0FD7  0008               	return
 16830  0FD8                     i1l4834:	
 16831                           
 16832                           ;PS_2.c: 933: }
 16833                           ;PS_2.c: 934: }
 16834                           ;PS_2.c: 935: timeout=0;
 16835  0FD8  0020               	movlb	0	; select bank0
 16836  0FD9  01A3               	clrf	Send_PS2@timeout
 16837  0FDA  01A4               	clrf	Send_PS2@timeout+1
 16838  0FDB                     i1l4844:	
 16839                           ;PS_2.c: 936: while(!READ_PS_2_PIN(0b00100000))
 16840                           
 16841  0FDB  3020               	movlw	32
 16842  0FDC  3199  21FB  318E   	fcall	_READ_PS_2_PIN
 16843  0FDF  3A00               	xorlw	0
 16844  0FE0  1D03               	btfss	3,2
 16845  0FE1  2FF7               	goto	i1l4846
 16846                           
 16847                           ;PS_2.c: 937: {
 16848                           ;PS_2.c: 938: timeout++;
 16849  0FE2  3001               	movlw	1
 16850  0FE3  0020               	movlb	0	; select bank0
 16851  0FE4  07A3               	addwf	Send_PS2@timeout,f
 16852  0FE5  3000               	movlw	0
 16853  0FE6  3DA4               	addwfc	Send_PS2@timeout+1,f
 16854                           
 16855                           ;PS_2.c: 939: if(timeout > 15000)
 16856  0FE7  303A               	movlw	58
 16857  0FE8  0224               	subwf	Send_PS2@timeout+1,w
 16858  0FE9  3099               	movlw	153
 16859  0FEA  1903               	skipnz
 16860  0FEB  0223               	subwf	Send_PS2@timeout,w
 16861  0FEC  1C03               	skipc
 16862  0FED  2FDB               	goto	i1l4844
 16863                           
 16864                           ;PS_2.c: 940: {
 16865                           ;PS_2.c: 941: Clock_TRIS(1);
 16866  0FEE  3001               	movlw	1
 16867  0FEF  3199  211A  318E   	fcall	i1_Clock_TRIS
 16868                           
 16869                           ;PS_2.c: 942: Data_TRIS(1);
 16870  0FF2  3001               	movlw	1
 16871  0FF3  3199  2124         	fcall	i1_Data_TRIS
 16872                           
 16873                           ;PS_2.c: 943: return 1;
 16874  0FF5  3001               	movlw	1
 16875  0FF6  0008               	return
 16876  0FF7                     i1l4846:	
 16877                           
 16878                           ;PS_2.c: 944: }
 16879                           ;PS_2.c: 945: }
 16880                           ;PS_2.c: 948: Clock_TRIS(1);
 16881  0FF7  3001               	movlw	1
 16882  0FF8  3199  211A  318E   	fcall	i1_Clock_TRIS
 16883                           
 16884                           ;PS_2.c: 949: Data_TRIS(1);
 16885  0FFB  3001               	movlw	1
 16886  0FFC  3199  2124         	fcall	i1_Data_TRIS
 16887                           
 16888                           ;PS_2.c: 950: return 0;
 16889  0FFE  3000               	movlw	0
 16890  0FFF  0008               	return
 16891  1000                     __end_of_Send_PS2:	
 16892                           
 16893                           	psect	text65
 16894  1BF2                     __ptext65:	
 16895 ;; *************** function i1_delayUS *****************
 16896 ;; Defined at:
 16897 ;;		line 49 in file "MISC.c"
 16898 ;; Parameters:    Size  Location     Type
 16899 ;;  US              4    0[COMMON] long 
 16900 ;; Auto vars:     Size  Location     Type
 16901 ;;  delayUS         4    5[COMMON] long 
 16902 ;;  delayUS         1    9[COMMON] unsigned char 
 16903 ;; Return value:  Size  Location     Type
 16904 ;;		None               void
 16905 ;; Registers used:
 16906 ;;		wreg, status,2, status,0
 16907 ;; Tracked objects:
 16908 ;;		On entry : 0/0
 16909 ;;		On exit  : 0/0
 16910 ;;		Unchanged: 0/0
 16911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16912 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16913 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16914 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16915 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16916 ;;Total ram usage:       10 bytes
 16917 ;; Hardware stack levels used:    1
 16918 ;; This function calls:
 16919 ;;		Nothing
 16920 ;; This function is called by:
 16921 ;;		_UART_send_break_timed
 16922 ;;		_SetBaud
 16923 ;;		_Process_PS2_ScanCode
 16924 ;;		_Send_PS2
 16925 ;;		_WriteFlash_Sequential
 16926 ;;		i1_UARTstringWAIT
 16927 ;; This function uses a non-reentrant model
 16928 ;;
 16929                           
 16930                           
 16931                           ;psect for function i1_delayUS
 16932  1BF2                     i1_delayUS:	
 16933                           
 16934                           ;MISC.c: 51: long i;
 16935                           ;MISC.c: 52: unsigned char j;
 16936                           ;MISC.c: 53: for(i=0;i<US;i+=6)
 16937                           
 16938                           ;incstack = 0
 16939                           ; Regs used in i1_delayUS: [wreg+status,2+status,0]
 16940  1BF2  3000               	movlw	0
 16941  1BF3  00F8               	movwf	i1delayUS@i+3
 16942  1BF4  3000               	movlw	0
 16943  1BF5  00F7               	movwf	i1delayUS@i+2
 16944  1BF6  3000               	movlw	0
 16945  1BF7  00F6               	movwf	i1delayUS@i+1
 16946  1BF8  3000               	movlw	0
 16947  1BF9  00F5               	movwf	i1delayUS@i
 16948  1BFA                     i1l284:	
 16949  1BFA  0878               	movf	i1delayUS@i+3,w
 16950  1BFB  3A80               	xorlw	128
 16951  1BFC  00F4               	movwf	??i1_delayUS
 16952  1BFD  0873               	movf	i1delayUS@US+3,w
 16953  1BFE  3A80               	xorlw	128
 16954  1BFF  0274               	subwf	??i1_delayUS,w
 16955  1C00  1D03               	skipz
 16956  1C01  2C0C               	goto	u381_23
 16957  1C02  0872               	movf	i1delayUS@US+2,w
 16958  1C03  0277               	subwf	i1delayUS@i+2,w
 16959  1C04  1D03               	skipz
 16960  1C05  2C0C               	goto	u381_23
 16961  1C06  0871               	movf	i1delayUS@US+1,w
 16962  1C07  0276               	subwf	i1delayUS@i+1,w
 16963  1C08  1D03               	skipz
 16964  1C09  2C0C               	goto	u381_23
 16965  1C0A  0870               	movf	i1delayUS@US,w
 16966  1C0B  0275               	subwf	i1delayUS@i,w
 16967  1C0C                     u381_23:	
 16968  1C0C  1803               	btfsc	3,0
 16969  1C0D  0008               	return
 16970                           
 16971                           ;MISC.c: 54: {
 16972                           ;MISC.c: 55: for(j=0;j<32;j++)
 16973  1C0E  01F9               	clrf	i1delayUS@j
 16974  1C0F  3020               	movlw	32
 16975  1C10  0279               	subwf	i1delayUS@j,w
 16976  1C11  1803               	btfsc	3,0
 16977  1C12  2C1C               	goto	i1l3744
 16978  1C13                     i1l286:	
 16979                           
 16980                           ;MISC.c: 56: {
 16981                           ;MISC.c: 57: __nop();
 16982  1C13  0000               	nop
 16983  1C14  3001               	movlw	1
 16984  1C15  00F4               	movwf	??i1_delayUS
 16985  1C16  0874               	movf	??i1_delayUS,w
 16986  1C17  07F9               	addwf	i1delayUS@j,f
 16987  1C18  3020               	movlw	32
 16988  1C19  0279               	subwf	i1delayUS@j,w
 16989  1C1A  1C03               	skipc
 16990  1C1B  2C13               	goto	i1l286
 16991  1C1C                     i1l3744:	
 16992  1C1C  3006               	movlw	6
 16993  1C1D  07F5               	addwf	i1delayUS@i,f
 16994  1C1E  3000               	movlw	0
 16995  1C1F  3DF6               	addwfc	i1delayUS@i+1,f
 16996  1C20  3000               	movlw	0
 16997  1C21  3DF7               	addwfc	i1delayUS@i+2,f
 16998  1C22  3000               	movlw	0
 16999  1C23  3DF8               	addwfc	i1delayUS@i+3,f
 17000  1C24  2BFA               	goto	i1l284
 17001  1C25                     __end_ofi1_delayUS:	
 17002                           
 17003                           	psect	text66
 17004  1924                     __ptext66:	
 17005 ;; *************** function i1_Data_TRIS *****************
 17006 ;; Defined at:
 17007 ;;		line 130 in file "PS_2.c"
 17008 ;; Parameters:    Size  Location     Type
 17009 ;;  direction       1    wreg     unsigned char 
 17010 ;; Auto vars:     Size  Location     Type
 17011 ;;  direction       1    0[COMMON] unsigned char 
 17012 ;; Return value:  Size  Location     Type
 17013 ;;		None               void
 17014 ;; Registers used:
 17015 ;;		wreg, status,2, status,0
 17016 ;; Tracked objects:
 17017 ;;		On entry : 0/0
 17018 ;;		On exit  : 0/0
 17019 ;;		Unchanged: 0/0
 17020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17022 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17024 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17025 ;;Total ram usage:        1 bytes
 17026 ;; Hardware stack levels used:    1
 17027 ;; This function calls:
 17028 ;;		Nothing
 17029 ;; This function is called by:
 17030 ;;		_Send_PS2
 17031 ;; This function uses a non-reentrant model
 17032 ;;
 17033                           
 17034                           
 17035                           ;psect for function i1_Data_TRIS
 17036  1924                     i1_Data_TRIS:	
 17037                           
 17038                           ;incstack = 0
 17039                           ; Regs used in i1_Data_TRIS: [wreg+status,2+status,0]
 17040                           ;i1Data_TRIS@direction stored from wreg
 17041  1924  00F0               	movwf	i1Data_TRIS@direction
 17042                           
 17043                           ;PS_2.c: 132: if(direction == 0)
 17044  1925  08F0               	movf	i1Data_TRIS@direction,f
 17045  1926  1D03               	skipz
 17046  1927  292B               	goto	i1l627
 17047                           
 17048                           ;PS_2.c: 133: {
 17049                           ;PS_2.c: 134: TRISAbits.TRISA4 = 0;
 17050  1928  0021               	movlb	1	; select bank1
 17051  1929  120C               	bcf	12,4	;volatile
 17052                           
 17053                           ;PS_2.c: 135: }
 17054  192A  0008               	return
 17055  192B                     i1l627:	
 17056                           
 17057                           ;PS_2.c: 136: else
 17058                           ;PS_2.c: 137: {
 17059                           ;PS_2.c: 138: TRISAbits.TRISA4 = 1;
 17060  192B  0021               	movlb	1	; select bank1
 17061  192C  160C               	bsf	12,4	;volatile
 17062  192D  0008               	return
 17063  192E                     __end_ofi1_Data_TRIS:	
 17064                           
 17065                           	psect	text67
 17066  191A                     __ptext67:	
 17067 ;; *************** function i1_Clock_TRIS *****************
 17068 ;; Defined at:
 17069 ;;		line 113 in file "PS_2.c"
 17070 ;; Parameters:    Size  Location     Type
 17071 ;;  direction       1    wreg     unsigned char 
 17072 ;; Auto vars:     Size  Location     Type
 17073 ;;  direction       1    0[COMMON] unsigned char 
 17074 ;; Return value:  Size  Location     Type
 17075 ;;		None               void
 17076 ;; Registers used:
 17077 ;;		wreg, status,2, status,0
 17078 ;; Tracked objects:
 17079 ;;		On entry : 0/0
 17080 ;;		On exit  : 0/0
 17081 ;;		Unchanged: 0/0
 17082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17084 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17086 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17087 ;;Total ram usage:        1 bytes
 17088 ;; Hardware stack levels used:    1
 17089 ;; This function calls:
 17090 ;;		Nothing
 17091 ;; This function is called by:
 17092 ;;		_Send_PS2
 17093 ;; This function uses a non-reentrant model
 17094 ;;
 17095                           
 17096                           
 17097                           ;psect for function i1_Clock_TRIS
 17098  191A                     i1_Clock_TRIS:	
 17099                           
 17100                           ;incstack = 0
 17101                           ; Regs used in i1_Clock_TRIS: [wreg+status,2+status,0]
 17102                           ;i1Clock_TRIS@direction stored from wreg
 17103  191A  00F0               	movwf	i1Clock_TRIS@direction
 17104                           
 17105                           ;PS_2.c: 115: if(direction == 0)
 17106  191B  08F0               	movf	i1Clock_TRIS@direction,f
 17107  191C  1D03               	skipz
 17108  191D  2921               	goto	i1l622
 17109                           
 17110                           ;PS_2.c: 116: {
 17111                           ;PS_2.c: 117: TRISAbits.TRISA5 = 0;
 17112  191E  0021               	movlb	1	; select bank1
 17113  191F  128C               	bcf	12,5	;volatile
 17114                           
 17115                           ;PS_2.c: 118: }
 17116  1920  0008               	return
 17117  1921                     i1l622:	
 17118                           
 17119                           ;PS_2.c: 119: else
 17120                           ;PS_2.c: 120: {
 17121                           ;PS_2.c: 121: TRISAbits.TRISA5 = 1;
 17122  1921  0021               	movlb	1	; select bank1
 17123  1922  168C               	bsf	12,5	;volatile
 17124  1923  0008               	return
 17125  1924                     __end_ofi1_Clock_TRIS:	
 17126                           
 17127                           	psect	text68
 17128  19FB                     __ptext68:	
 17129 ;; *************** function _READ_PS_2_PIN *****************
 17130 ;; Defined at:
 17131 ;;		line 215 in file "PS_2.c"
 17132 ;; Parameters:    Size  Location     Type
 17133 ;;  DATA_CLK        1    wreg     unsigned char 
 17134 ;; Auto vars:     Size  Location     Type
 17135 ;;  DATA_CLK        1    0[COMMON] unsigned char 
 17136 ;; Return value:  Size  Location     Type
 17137 ;;                  1    wreg      unsigned char 
 17138 ;; Registers used:
 17139 ;;		wreg
 17140 ;; Tracked objects:
 17141 ;;		On entry : 0/0
 17142 ;;		On exit  : 0/0
 17143 ;;		Unchanged: 0/0
 17144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17146 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17148 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17149 ;;Total ram usage:        1 bytes
 17150 ;; Hardware stack levels used:    1
 17151 ;; This function calls:
 17152 ;;		Nothing
 17153 ;; This function is called by:
 17154 ;;		_isr
 17155 ;;		_Send_PS2
 17156 ;; This function uses a non-reentrant model
 17157 ;;
 17158                           
 17159                           
 17160                           ;psect for function _READ_PS_2_PIN
 17161  19FB                     _READ_PS_2_PIN:	
 17162                           
 17163                           ;incstack = 0
 17164                           ; Regs used in _READ_PS_2_PIN: [wreg]
 17165                           ;READ_PS_2_PIN@DATA_CLK stored from wreg
 17166  19FB  00F0               	movwf	READ_PS_2_PIN@DATA_CLK
 17167                           
 17168                           ;PS_2.c: 217: if(DATA_CLK == 0b00100000)
 17169  19FC  0870               	movf	READ_PS_2_PIN@DATA_CLK,w
 17170  19FD  3A20               	xorlw	32
 17171  19FE  1D03               	skipz
 17172  19FF  2A07               	goto	i1l647
 17173                           
 17174                           ;PS_2.c: 218: {
 17175                           ;PS_2.c: 220: if((PORTA & 0b00100000) == 0b00100000)
 17176  1A00  0020               	movlb	0	; select bank0
 17177  1A01  1E8C               	btfss	12,5	;volatile
 17178  1A02  2A05               	goto	i1l4044
 17179                           
 17180                           ;PS_2.c: 221: {
 17181                           ;PS_2.c: 222: return (1);
 17182  1A03  3001               	movlw	1
 17183                           
 17184                           ;PS_2.c: 223: }
 17185  1A04  0008               	return
 17186  1A05                     i1l4044:	
 17187                           
 17188                           ;PS_2.c: 224: else
 17189                           ;PS_2.c: 225: {
 17190                           ;PS_2.c: 226: return 0;
 17191  1A05  3000               	movlw	0
 17192                           
 17193                           ;PS_2.c: 227: }
 17194                           ;PS_2.c: 228: }
 17195  1A06  0008               	return
 17196  1A07                     i1l647:	
 17197                           
 17198                           ;PS_2.c: 229: else
 17199                           ;PS_2.c: 230: {
 17200                           ;PS_2.c: 232: if((PORTA & 0b00010000) == 0b00010000)
 17201  1A07  0020               	movlb	0	; select bank0
 17202  1A08  1E0C               	btfss	12,4	;volatile
 17203  1A09  2A0C               	goto	i1l4054
 17204                           
 17205                           ;PS_2.c: 233: {
 17206                           ;PS_2.c: 234: return (1);
 17207  1A0A  3001               	movlw	1
 17208                           
 17209                           ;PS_2.c: 235: }
 17210  1A0B  0008               	return
 17211  1A0C                     i1l4054:	
 17212                           
 17213                           ;PS_2.c: 236: else
 17214                           ;PS_2.c: 237: {
 17215                           ;PS_2.c: 238: return 0;
 17216  1A0C  3000               	movlw	0
 17217  1A0D  0008               	return
 17218  1A0E                     __end_of_READ_PS_2_PIN:	
 17219                           
 17220                           	psect	text69
 17221  1988                     __ptext69:	
 17222 ;; *************** function _ISNUMBER *****************
 17223 ;; Defined at:
 17224 ;;		line 127 in file "MISC.c"
 17225 ;; Parameters:    Size  Location     Type
 17226 ;;  ascii           1    wreg     unsigned char 
 17227 ;; Auto vars:     Size  Location     Type
 17228 ;;  ascii           1    0[COMMON] unsigned char 
 17229 ;; Return value:  Size  Location     Type
 17230 ;;                  1    wreg      unsigned char 
 17231 ;; Registers used:
 17232 ;;		wreg
 17233 ;; Tracked objects:
 17234 ;;		On entry : 0/0
 17235 ;;		On exit  : 0/0
 17236 ;;		Unchanged: 0/0
 17237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17239 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17241 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17242 ;;Total ram usage:        1 bytes
 17243 ;; Hardware stack levels used:    1
 17244 ;; This function calls:
 17245 ;;		Nothing
 17246 ;; This function is called by:
 17247 ;;		_Process_PS2_ScanCode
 17248 ;; This function uses a non-reentrant model
 17249 ;;
 17250                           
 17251                           
 17252                           ;psect for function _ISNUMBER
 17253  1988                     _ISNUMBER:	
 17254                           
 17255                           ;incstack = 0
 17256                           ; Regs used in _ISNUMBER: [wreg]
 17257                           ;ISNUMBER@ascii stored from wreg
 17258  1988  00F0               	movwf	ISNUMBER@ascii
 17259                           
 17260                           ;MISC.c: 129: if(ascii >= '0' && ascii <='9')
 17261  1989  3030               	movlw	48
 17262  198A  0270               	subwf	ISNUMBER@ascii,w
 17263  198B  1C03               	skipc
 17264  198C  2993               	goto	i1l4586
 17265  198D  303A               	movlw	58
 17266  198E  0270               	subwf	ISNUMBER@ascii,w
 17267  198F  1803               	skipnc
 17268  1990  2993               	goto	i1l4586
 17269                           
 17270                           ;MISC.c: 130: {
 17271                           ;MISC.c: 131: return 1;
 17272  1991  3001               	movlw	1
 17273                           
 17274                           ;MISC.c: 132: }
 17275  1992  0008               	return
 17276  1993                     i1l4586:	
 17277                           
 17278                           ;MISC.c: 133: else
 17279                           ;MISC.c: 134: {
 17280                           ;MISC.c: 135: return 0;
 17281  1993  3000               	movlw	0
 17282  1994  0008               	return
 17283  1995                     __end_of_ISNUMBER:	
 17284                           
 17285                           	psect	text70
 17286  19D7                     __ptext70:	
 17287 ;; *************** function _Decode_Scan_Code_Shift *****************
 17288 ;; Defined at:
 17289 ;;		line 753 in file "PS_2.c"
 17290 ;; Parameters:    Size  Location     Type
 17291 ;;  Code            1    wreg     unsigned char 
 17292 ;; Auto vars:     Size  Location     Type
 17293 ;;  Code            1    0[COMMON] unsigned char 
 17294 ;; Return value:  Size  Location     Type
 17295 ;;                  1    wreg      unsigned char 
 17296 ;; Registers used:
 17297 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 17298 ;; Tracked objects:
 17299 ;;		On entry : 0/0
 17300 ;;		On exit  : 0/0
 17301 ;;		Unchanged: 0/0
 17302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17304 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17306 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17307 ;;Total ram usage:        1 bytes
 17308 ;; Hardware stack levels used:    1
 17309 ;; This function calls:
 17310 ;;		Nothing
 17311 ;; This function is called by:
 17312 ;;		_Process_PS2_ScanCode
 17313 ;; This function uses a non-reentrant model
 17314 ;;
 17315                           
 17316                           
 17317                           ;psect for function _Decode_Scan_Code_Shift
 17318  19D7                     _Decode_Scan_Code_Shift:	
 17319                           
 17320                           ;incstack = 0
 17321                           ; Regs used in _Decode_Scan_Code_Shift: [wreg-fsr0h+status,2+status,0+pclath]
 17322                           ;Decode_Scan_Code_Shift@Code stored from wreg
 17323  19D7  00F0               	movwf	Decode_Scan_Code_Shift@Code
 17324                           
 17325                           ;PS_2.c: 755: Code -= 13;
 17326  19D8  300D               	movlw	13
 17327  19D9  02F0               	subwf	Decode_Scan_Code_Shift@Code,f
 17328                           
 17329                           ;PS_2.c: 756: if(Code <=112)
 17330  19DA  3071               	movlw	113
 17331  19DB  0270               	subwf	Decode_Scan_Code_Shift@Code,w
 17332  19DC  1803               	skipnc
 17333  19DD  29E7               	goto	i1l4872
 17334                           
 17335                           ;PS_2.c: 757: {
 17336                           ;PS_2.c: 758: return ScanCodeSHIFT[Code];
 17337  19DE  0870               	movf	Decode_Scan_Code_Shift@Code,w
 17338  19DF  3EF5               	addlw	low (_ScanCodeSHIFT| (0+32768))
 17339  19E0  0084               	movwf	4
 17340  19E1  3087               	movlw	high (_ScanCodeSHIFT| (0+32768))
 17341  19E2  1803               	skipnc
 17342  19E3  3E01               	addlw	1
 17343  19E4  0085               	movwf	5
 17344  19E5  0800               	movf	0,w	;code access
 17345                           
 17346                           ;PS_2.c: 759: }
 17347  19E6  0008               	return
 17348  19E7                     i1l4872:	
 17349                           
 17350                           ;PS_2.c: 760: else
 17351                           ;PS_2.c: 761: {
 17352                           ;PS_2.c: 762: return 0;
 17353  19E7  3000               	movlw	0
 17354  19E8  0008               	return
 17355  19E9                     __end_of_Decode_Scan_Code_Shift:	
 17356                           
 17357                           	psect	text71
 17358  19C5                     __ptext71:	
 17359 ;; *************** function _Decode_Scan_Code_FunctionE0 *****************
 17360 ;; Defined at:
 17361 ;;		line 772 in file "PS_2.c"
 17362 ;; Parameters:    Size  Location     Type
 17363 ;;  Code            1    wreg     unsigned char 
 17364 ;; Auto vars:     Size  Location     Type
 17365 ;;  Code            1    0[COMMON] unsigned char 
 17366 ;; Return value:  Size  Location     Type
 17367 ;;                  1    wreg      unsigned char 
 17368 ;; Registers used:
 17369 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 17370 ;; Tracked objects:
 17371 ;;		On entry : 0/0
 17372 ;;		On exit  : 0/0
 17373 ;;		Unchanged: 0/0
 17374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17376 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17378 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17379 ;;Total ram usage:        1 bytes
 17380 ;; Hardware stack levels used:    1
 17381 ;; This function calls:
 17382 ;;		Nothing
 17383 ;; This function is called by:
 17384 ;;		_Process_PS2_ScanCode
 17385 ;; This function uses a non-reentrant model
 17386 ;;
 17387                           
 17388                           
 17389                           ;psect for function _Decode_Scan_Code_FunctionE0
 17390  19C5                     _Decode_Scan_Code_FunctionE0:	
 17391                           
 17392                           ;incstack = 0
 17393                           ; Regs used in _Decode_Scan_Code_FunctionE0: [wreg-fsr0h+status,2+status,0+pclath]
 17394                           ;Decode_Scan_Code_FunctionE0@Code stored from wreg
 17395  19C5  00F0               	movwf	Decode_Scan_Code_FunctionE0@Code
 17396                           
 17397                           ;PS_2.c: 774: Code -= 17;
 17398  19C6  3011               	movlw	17
 17399  19C7  02F0               	subwf	Decode_Scan_Code_FunctionE0@Code,f
 17400                           
 17401                           ;PS_2.c: 775: if(Code <=108)
 17402  19C8  306D               	movlw	109
 17403  19C9  0270               	subwf	Decode_Scan_Code_FunctionE0@Code,w
 17404  19CA  1803               	skipnc
 17405  19CB  29D5               	goto	i1l4860
 17406                           
 17407                           ;PS_2.c: 776: {
 17408                           ;PS_2.c: 777: return ScanCodeFunctionE0[Code];
 17409  19CC  0870               	movf	Decode_Scan_Code_FunctionE0@Code,w
 17410  19CD  3E66               	addlw	low (_ScanCodeFunctionE0| (0+32768))
 17411  19CE  0084               	movwf	4
 17412  19CF  3088               	movlw	high (_ScanCodeFunctionE0| (0+32768))
 17413  19D0  1803               	skipnc
 17414  19D1  3E01               	addlw	1
 17415  19D2  0085               	movwf	5
 17416  19D3  0800               	movf	0,w	;code access
 17417                           
 17418                           ;PS_2.c: 778: }
 17419  19D4  0008               	return
 17420  19D5                     i1l4860:	
 17421                           
 17422                           ;PS_2.c: 779: else
 17423                           ;PS_2.c: 780: {
 17424                           ;PS_2.c: 781: return 0;
 17425  19D5  3000               	movlw	0
 17426  19D6  0008               	return
 17427  19D7                     __end_of_Decode_Scan_Code_FunctionE0:	
 17428                           
 17429                           	psect	text72
 17430  19A3                     __ptext72:	
 17431 ;; *************** function _Decode_Scan_Code_Function *****************
 17432 ;; Defined at:
 17433 ;;		line 791 in file "PS_2.c"
 17434 ;; Parameters:    Size  Location     Type
 17435 ;;  Code            1    wreg     unsigned char 
 17436 ;; Auto vars:     Size  Location     Type
 17437 ;;  Code            1    0[COMMON] unsigned char 
 17438 ;; Return value:  Size  Location     Type
 17439 ;;                  1    wreg      unsigned char 
 17440 ;; Registers used:
 17441 ;;		wreg, fsr0l, fsr0h, pclath
 17442 ;; Tracked objects:
 17443 ;;		On entry : 0/0
 17444 ;;		On exit  : 0/0
 17445 ;;		Unchanged: 0/0
 17446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17448 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17450 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17451 ;;Total ram usage:        1 bytes
 17452 ;; Hardware stack levels used:    1
 17453 ;; This function calls:
 17454 ;;		Nothing
 17455 ;; This function is called by:
 17456 ;;		_Process_PS2_ScanCode
 17457 ;; This function uses a non-reentrant model
 17458 ;;
 17459                           
 17460                           
 17461                           ;psect for function _Decode_Scan_Code_Function
 17462  19A3                     _Decode_Scan_Code_Function:	
 17463                           
 17464                           ;incstack = 0
 17465                           ; Regs used in _Decode_Scan_Code_Function: [wreg-fsr0h+pclath]
 17466                           ;Decode_Scan_Code_Function@Code stored from wreg
 17467  19A3  00F0               	movwf	Decode_Scan_Code_Function@Code
 17468                           
 17469                           ;PS_2.c: 793: if(Code <=131)
 17470  19A4  3084               	movlw	132
 17471  19A5  0270               	subwf	Decode_Scan_Code_Function@Code,w
 17472  19A6  1803               	skipnc
 17473  19A7  29B1               	goto	i1l4896
 17474                           
 17475                           ;PS_2.c: 794: {
 17476                           ;PS_2.c: 795: return ScanCodeFunctionNoE0[Code];
 17477  19A8  0870               	movf	Decode_Scan_Code_Function@Code,w
 17478  19A9  3E00               	addlw	low (_ScanCodeFunctionNoE0| (0+32768))
 17479  19AA  0084               	movwf	4
 17480  19AB  3087               	movlw	high (_ScanCodeFunctionNoE0| (0+32768))
 17481  19AC  1803               	skipnc
 17482  19AD  3E01               	addlw	1
 17483  19AE  0085               	movwf	5
 17484  19AF  0800               	movf	0,w	;code access
 17485                           
 17486                           ;PS_2.c: 796: }
 17487  19B0  0008               	return
 17488  19B1                     i1l4896:	
 17489                           
 17490                           ;PS_2.c: 797: else
 17491                           ;PS_2.c: 798: {
 17492                           ;PS_2.c: 799: return 0;
 17493  19B1  3000               	movlw	0
 17494  19B2  0008               	return
 17495  19B3                     __end_of_Decode_Scan_Code_Function:	
 17496                           
 17497                           	psect	text73
 17498  19B3                     __ptext73:	
 17499 ;; *************** function _Decode_Scan_Code *****************
 17500 ;; Defined at:
 17501 ;;		line 734 in file "PS_2.c"
 17502 ;; Parameters:    Size  Location     Type
 17503 ;;  Code            1    wreg     unsigned char 
 17504 ;; Auto vars:     Size  Location     Type
 17505 ;;  Code            1    0[COMMON] unsigned char 
 17506 ;; Return value:  Size  Location     Type
 17507 ;;                  1    wreg      unsigned char 
 17508 ;; Registers used:
 17509 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 17510 ;; Tracked objects:
 17511 ;;		On entry : 0/0
 17512 ;;		On exit  : 0/0
 17513 ;;		Unchanged: 0/0
 17514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17516 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17518 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17519 ;;Total ram usage:        1 bytes
 17520 ;; Hardware stack levels used:    1
 17521 ;; This function calls:
 17522 ;;		Nothing
 17523 ;; This function is called by:
 17524 ;;		_Process_PS2_ScanCode
 17525 ;; This function uses a non-reentrant model
 17526 ;;
 17527                           
 17528                           
 17529                           ;psect for function _Decode_Scan_Code
 17530  19B3                     _Decode_Scan_Code:	
 17531                           
 17532                           ;incstack = 0
 17533                           ; Regs used in _Decode_Scan_Code: [wreg-fsr0h+status,2+status,0+pclath]
 17534                           ;Decode_Scan_Code@Code stored from wreg
 17535  19B3  00F0               	movwf	Decode_Scan_Code@Code
 17536                           
 17537                           ;PS_2.c: 736: Code -= 13;
 17538  19B4  300D               	movlw	13
 17539  19B5  02F0               	subwf	Decode_Scan_Code@Code,f
 17540                           
 17541                           ;PS_2.c: 737: if(Code <=112)
 17542  19B6  3071               	movlw	113
 17543  19B7  0270               	subwf	Decode_Scan_Code@Code,w
 17544  19B8  1803               	skipnc
 17545  19B9  29C3               	goto	i1l4884
 17546                           
 17547                           ;PS_2.c: 738: {
 17548                           ;PS_2.c: 739: return ScanCode[Code];
 17549  19BA  0870               	movf	Decode_Scan_Code@Code,w
 17550  19BB  3E84               	addlw	low (_ScanCode| (0+32768))
 17551  19BC  0084               	movwf	4
 17552  19BD  3087               	movlw	high (_ScanCode| (0+32768))
 17553  19BE  1803               	skipnc
 17554  19BF  3E01               	addlw	1
 17555  19C0  0085               	movwf	5
 17556  19C1  0800               	movf	0,w	;code access
 17557                           
 17558                           ;PS_2.c: 740: }
 17559  19C2  0008               	return
 17560  19C3                     i1l4884:	
 17561                           
 17562                           ;PS_2.c: 741: else
 17563                           ;PS_2.c: 742: {
 17564                           ;PS_2.c: 743: return 0;
 17565  19C3  3000               	movlw	0
 17566  19C4  0008               	return
 17567  19C5                     __end_of_Decode_Scan_Code:	
 17568                           
 17569                           	psect	text74
 17570  1CC9                     __ptext74:	
 17571 ;; *************** function _BufferShiftBack *****************
 17572 ;; Defined at:
 17573 ;;		line 175 in file "MISC.c"
 17574 ;; Parameters:    Size  Location     Type
 17575 ;;  buffer          1    wreg     PTR unsigned char 
 17576 ;;		 -> PS_2_ScanCodes(12), 
 17577 ;;  shift           1    0[COMMON] unsigned char 
 17578 ;;  size            1    1[COMMON] unsigned char 
 17579 ;; Auto vars:     Size  Location     Type
 17580 ;;  buffer          1    6[COMMON] PTR unsigned char 
 17581 ;;		 -> PS_2_ScanCodes(12), 
 17582 ;;  i               1    7[COMMON] unsigned char 
 17583 ;; Return value:  Size  Location     Type
 17584 ;;                  1    wreg      unsigned char 
 17585 ;; Registers used:
 17586 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17587 ;; Tracked objects:
 17588 ;;		On entry : 0/0
 17589 ;;		On exit  : 0/0
 17590 ;;		Unchanged: 0/0
 17591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17592 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17593 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17594 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17595 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17596 ;;Total ram usage:        8 bytes
 17597 ;; Hardware stack levels used:    1
 17598 ;; This function calls:
 17599 ;;		Nothing
 17600 ;; This function is called by:
 17601 ;;		_Process_PS2_ScanCode
 17602 ;; This function uses a non-reentrant model
 17603 ;;
 17604                           
 17605                           
 17606                           ;psect for function _BufferShiftBack
 17607  1CC9                     _BufferShiftBack:	
 17608                           
 17609                           ;incstack = 0
 17610                           ; Regs used in _BufferShiftBack: [wreg+fsr1l+fsr1h+status,2+status,0]
 17611                           ;BufferShiftBack@buffer stored from wreg
 17612  1CC9  00F6               	movwf	BufferShiftBack@buffer
 17613                           
 17614                           ;MISC.c: 177: unsigned char i=0;
 17615  1CCA  01F7               	clrf	BufferShiftBack@i
 17616                           
 17617                           ;MISC.c: 178: if(shift > size)
 17618  1CCB  0870               	movf	BufferShiftBack@shift,w
 17619  1CCC  0271               	subwf	BufferShiftBack@size,w
 17620  1CCD  1C03               	btfss	3,0
 17621  1CCE  0008               	return
 17622                           
 17623                           ;MISC.c: 181: }
 17624                           ;MISC.c: 182: for(i = 0; i < size; i++)
 17625                           
 17626                           ;MISC.c: 179: {
 17627                           ;MISC.c: 180: return 0;
 17628                           ;	Return value of _BufferShiftBack is never used
 17629  1CCF  01F7               	clrf	BufferShiftBack@i
 17630  1CD0                     i1l4614:	
 17631  1CD0  0871               	movf	BufferShiftBack@size,w
 17632  1CD1  0277               	subwf	BufferShiftBack@i,w
 17633  1CD2  1803               	btfsc	3,0
 17634  1CD3  0008               	return
 17635                           
 17636                           ;MISC.c: 183: {
 17637                           ;MISC.c: 184: if(i < (size - shift))
 17638  1CD4  0870               	movf	BufferShiftBack@shift,w
 17639  1CD5  00F2               	movwf	??_BufferShiftBack
 17640  1CD6  01F3               	clrf	??_BufferShiftBack+1
 17641  1CD7  09F2               	comf	??_BufferShiftBack,f
 17642  1CD8  09F3               	comf	??_BufferShiftBack+1,f
 17643  1CD9  0AF2               	incf	??_BufferShiftBack,f
 17644  1CDA  1903               	skipnz
 17645  1CDB  0AF3               	incf	??_BufferShiftBack+1,f
 17646  1CDC  0871               	movf	BufferShiftBack@size,w
 17647  1CDD  0772               	addwf	??_BufferShiftBack,w
 17648  1CDE  00F4               	movwf	??_BufferShiftBack+2
 17649  1CDF  0873               	movf	??_BufferShiftBack+1,w
 17650  1CE0  1803               	skipnc
 17651  1CE1  0A73               	incf	??_BufferShiftBack+1,w
 17652  1CE2  00F5               	movwf	??_BufferShiftBack+3
 17653  1CE3  0875               	movf	??_BufferShiftBack+3,w
 17654  1CE4  3A80               	xorlw	128
 17655  1CE5  3C80               	sublw	128
 17656  1CE6  1D03               	skipz
 17657  1CE7  2CEA               	goto	u520_25
 17658  1CE8  0874               	movf	??_BufferShiftBack+2,w
 17659  1CE9  0277               	subwf	BufferShiftBack@i,w
 17660  1CEA                     u520_25:	
 17661  1CEA  1803               	skipnc
 17662  1CEB  2CFE               	goto	i1l4610
 17663                           
 17664                           ;MISC.c: 185: {
 17665                           ;MISC.c: 186: buffer[i] = buffer[i+shift];
 17666  1CEC  0877               	movf	BufferShiftBack@i,w
 17667  1CED  0770               	addwf	BufferShiftBack@shift,w
 17668  1CEE  0776               	addwf	BufferShiftBack@buffer,w
 17669  1CEF  00F2               	movwf	??_BufferShiftBack
 17670  1CF0  0872               	movf	??_BufferShiftBack,w
 17671  1CF1  0086               	movwf	6
 17672  1CF2  0187               	clrf	7
 17673  1CF3  0801               	movf	1,w
 17674  1CF4  00F3               	movwf	??_BufferShiftBack+1
 17675  1CF5  0877               	movf	BufferShiftBack@i,w
 17676  1CF6  0776               	addwf	BufferShiftBack@buffer,w
 17677  1CF7  00F4               	movwf	??_BufferShiftBack+2
 17678  1CF8  0874               	movf	??_BufferShiftBack+2,w
 17679  1CF9  0086               	movwf	6
 17680  1CFA  0187               	clrf	7
 17681  1CFB  0873               	movf	??_BufferShiftBack+1,w
 17682  1CFC  0081               	movwf	1
 17683                           
 17684                           ;MISC.c: 187: }
 17685  1CFD  2D05               	goto	i1l4612
 17686  1CFE                     i1l4610:	
 17687                           
 17688                           ;MISC.c: 188: else
 17689                           ;MISC.c: 189: {
 17690                           ;MISC.c: 190: buffer[i] = 0;
 17691  1CFE  0877               	movf	BufferShiftBack@i,w
 17692  1CFF  0776               	addwf	BufferShiftBack@buffer,w
 17693  1D00  00F2               	movwf	??_BufferShiftBack
 17694  1D01  0872               	movf	??_BufferShiftBack,w
 17695  1D02  0086               	movwf	6
 17696  1D03  0187               	clrf	7
 17697  1D04  0181               	clrf	1
 17698  1D05                     i1l4612:	
 17699  1D05  3001               	movlw	1
 17700  1D06  00F2               	movwf	??_BufferShiftBack
 17701  1D07  0872               	movf	??_BufferShiftBack,w
 17702  1D08  07F7               	addwf	BufferShiftBack@i,f
 17703  1D09  2CD0               	goto	i1l4614
 17704  1D0A                     __end_of_BufferShiftBack:	
 17705                           ;MISC.c: 191: }
 17706                           ;MISC.c: 192: }
 17707                           ;MISC.c: 193: return 1;
 17708                           ;	Return value of _BufferShiftBack is never used
 17709                           
 17710                           
 17711                           	psect	text75
 17712  1E15                     __ptext75:	
 17713 ;; *************** function _PS2RawToScan *****************
 17714 ;; Defined at:
 17715 ;;		line 1096 in file "PS_2.c"
 17716 ;; Parameters:    Size  Location     Type
 17717 ;;  Raw             2    8[COMMON] unsigned int 
 17718 ;; Auto vars:     Size  Location     Type
 17719 ;;  temp            2   10[COMMON] unsigned int 
 17720 ;; Return value:  Size  Location     Type
 17721 ;;                  2    8[COMMON] unsigned int 
 17722 ;; Registers used:
 17723 ;;		wreg, status,2, status,0, pclath, cstack
 17724 ;; Tracked objects:
 17725 ;;		On entry : 0/0
 17726 ;;		On exit  : 0/0
 17727 ;;		Unchanged: 0/0
 17728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17729 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17730 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17731 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17732 ;;      Totals:         4       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17733 ;;Total ram usage:       13 bytes
 17734 ;; Hardware stack levels used:    1
 17735 ;; Hardware stack levels required when called:    1
 17736 ;; This function calls:
 17737 ;;		_Reverse_Byte
 17738 ;;		i1_CheckSum_byte
 17739 ;; This function is called by:
 17740 ;;		_isr
 17741 ;; This function uses a non-reentrant model
 17742 ;;
 17743                           
 17744                           
 17745                           ;psect for function _PS2RawToScan
 17746  1E15                     _PS2RawToScan:	
 17747                           
 17748                           ;PS_2.c: 1098: unsigned int temp;
 17749                           ;PS_2.c: 1100: if(CheckSum_byte((Raw >> 2) & 0xFF , 3) == ((Raw & 0x02)>> 1))
 17750                           
 17751                           ;incstack = 0
 17752                           ; Regs used in _PS2RawToScan: [wreg+status,2+status,0+pclath+cstack]
 17753  1E15  0879               	movf	PS2RawToScan@Raw+1,w
 17754  1E16  0020               	movlb	0	; select bank0
 17755  1E17  00A1               	movwf	??_PS2RawToScan+1
 17756  1E18  0878               	movf	PS2RawToScan@Raw,w
 17757  1E19  00A0               	movwf	??_PS2RawToScan
 17758  1E1A  36A1               	lsrf	??_PS2RawToScan+1,f
 17759  1E1B  0CA0               	rrf	??_PS2RawToScan,f
 17760  1E1C  3001               	movlw	1
 17761  1E1D  0520               	andwf	??_PS2RawToScan,w
 17762  1E1E  00A2               	movwf	??_PS2RawToScan+2
 17763  1E1F  3000               	movlw	0
 17764  1E20  0521               	andwf	??_PS2RawToScan+1,w
 17765  1E21  00A3               	movwf	??_PS2RawToScan+3
 17766  1E22  0879               	movf	PS2RawToScan@Raw+1,w
 17767  1E23  00A5               	movwf	??_PS2RawToScan+5
 17768  1E24  0878               	movf	PS2RawToScan@Raw,w
 17769  1E25  00A4               	movwf	??_PS2RawToScan+4
 17770  1E26  36A5               	lsrf	??_PS2RawToScan+5,f
 17771  1E27  0CA4               	rrf	??_PS2RawToScan+4,f
 17772  1E28  36A5               	lsrf	??_PS2RawToScan+5,f
 17773  1E29  0CA4               	rrf	??_PS2RawToScan+4,f
 17774  1E2A  30FF               	movlw	255
 17775  1E2B  0524               	andwf	??_PS2RawToScan+4,w
 17776  1E2C  00F0               	movwf	i1CheckSum_byte@This
 17777  1E2D  3000               	movlw	0
 17778  1E2E  0525               	andwf	??_PS2RawToScan+5,w
 17779  1E2F  00F1               	movwf	i1CheckSum_byte@This+1
 17780  1E30  3003               	movlw	3
 17781  1E31  00A6               	movwf	??_PS2RawToScan+6
 17782  1E32  0826               	movf	??_PS2RawToScan+6,w
 17783  1E33  00F2               	movwf	i1CheckSum_byte@Odd_Even
 17784  1E34  319B  235F  319E   	fcall	i1_CheckSum_byte
 17785  1E37  0020               	movlb	0	; select bank0
 17786  1E38  00A7               	movwf	??_PS2RawToScan+7
 17787  1E39  01A8               	clrf	??_PS2RawToScan+8
 17788  1E3A  0823               	movf	??_PS2RawToScan+3,w
 17789  1E3B  0628               	xorwf	??_PS2RawToScan+8,w
 17790  1E3C  1D03               	skipz
 17791  1E3D  2E40               	goto	u584_25
 17792  1E3E  0822               	movf	??_PS2RawToScan+2,w
 17793  1E3F  0627               	xorwf	??_PS2RawToScan+7,w
 17794  1E40                     u584_25:	
 17795  1E40  1D03               	skipz
 17796  1E41  2E5C               	goto	i1l5040
 17797                           
 17798                           ;PS_2.c: 1101: {
 17799                           ;PS_2.c: 1103: temp = ((Raw >> 2) & 0xFF);
 17800  1E42  0879               	movf	PS2RawToScan@Raw+1,w
 17801  1E43  00A1               	movwf	??_PS2RawToScan+1
 17802  1E44  0878               	movf	PS2RawToScan@Raw,w
 17803  1E45  00A0               	movwf	??_PS2RawToScan
 17804  1E46  36A1               	lsrf	??_PS2RawToScan+1,f
 17805  1E47  0CA0               	rrf	??_PS2RawToScan,f
 17806  1E48  36A1               	lsrf	??_PS2RawToScan+1,f
 17807  1E49  0CA0               	rrf	??_PS2RawToScan,f
 17808  1E4A  30FF               	movlw	255
 17809  1E4B  0520               	andwf	??_PS2RawToScan,w
 17810  1E4C  00FA               	movwf	PS2RawToScan@temp
 17811  1E4D  3000               	movlw	0
 17812  1E4E  0521               	andwf	??_PS2RawToScan+1,w
 17813  1E4F  00FB               	movwf	PS2RawToScan@temp+1
 17814                           
 17815                           ;PS_2.c: 1104: temp = (unsigned int) Reverse_Byte((unsigned char) temp);
 17816  1E50  087A               	movf	PS2RawToScan@temp,w
 17817  1E51  319F  27AC  319E   	fcall	_Reverse_Byte
 17818  1E54  0020               	movlb	0	; select bank0
 17819  1E55  00A0               	movwf	??_PS2RawToScan
 17820  1E56  01A1               	clrf	??_PS2RawToScan+1
 17821  1E57  0820               	movf	??_PS2RawToScan,w
 17822  1E58  00FA               	movwf	PS2RawToScan@temp
 17823  1E59  0821               	movf	??_PS2RawToScan+1,w
 17824  1E5A  00FB               	movwf	PS2RawToScan@temp+1
 17825                           
 17826                           ;PS_2.c: 1106: }
 17827  1E5B  2E5E               	goto	i1l5042
 17828  1E5C                     i1l5040:	
 17829                           
 17830                           ;PS_2.c: 1107: else
 17831                           ;PS_2.c: 1108: {
 17832                           ;PS_2.c: 1110: temp = 0;
 17833  1E5C  01FA               	clrf	PS2RawToScan@temp
 17834  1E5D  01FB               	clrf	PS2RawToScan@temp+1
 17835  1E5E                     i1l5042:	
 17836                           
 17837                           ;PS_2.c: 1111: }
 17838                           ;PS_2.c: 1112: return temp;
 17839  1E5E  087B               	movf	PS2RawToScan@temp+1,w
 17840  1E5F  01F9               	clrf	?_PS2RawToScan+1
 17841  1E60  07F9               	addwf	?_PS2RawToScan+1,f
 17842  1E61  087A               	movf	PS2RawToScan@temp,w
 17843  1E62  01F8               	clrf	?_PS2RawToScan
 17844  1E63  07F8               	addwf	?_PS2RawToScan,f
 17845  1E64  0008               	return
 17846  1E65                     __end_of_PS2RawToScan:	
 17847                           
 17848                           	psect	text76
 17849  1B5F                     __ptext76:	
 17850 ;; *************** function i1_CheckSum_byte *****************
 17851 ;; Defined at:
 17852 ;;		line 69 in file "MISC.c"
 17853 ;; Parameters:    Size  Location     Type
 17854 ;;  This            2    0[COMMON] unsigned int 
 17855 ;;  Odd_Even        1    2[COMMON] unsigned char 
 17856 ;; Auto vars:     Size  Location     Type
 17857 ;;  CheckSum_byt    2    4[COMMON] unsigned int 
 17858 ;;  CheckSum_byt    1    7[COMMON] unsigned char 
 17859 ;;  CheckSum_byt    1    6[COMMON] unsigned char 
 17860 ;; Return value:  Size  Location     Type
 17861 ;;                  1    wreg      unsigned char 
 17862 ;; Registers used:
 17863 ;;		wreg, status,2, status,0
 17864 ;; Tracked objects:
 17865 ;;		On entry : 0/0
 17866 ;;		On exit  : 0/0
 17867 ;;		Unchanged: 0/0
 17868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17869 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17870 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17871 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17872 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17873 ;;Total ram usage:        8 bytes
 17874 ;; Hardware stack levels used:    1
 17875 ;; This function calls:
 17876 ;;		Nothing
 17877 ;; This function is called by:
 17878 ;;		_Send_PS2
 17879 ;;		_PS2RawToScan
 17880 ;;		i1_UARTchar
 17881 ;; This function uses a non-reentrant model
 17882 ;;
 17883                           
 17884                           
 17885                           ;psect for function i1_CheckSum_byte
 17886  1B5F                     i1_CheckSum_byte:	
 17887                           
 17888                           ;MISC.c: 71: char i = 0;
 17889                           
 17890                           ;incstack = 0
 17891                           ; Regs used in i1_CheckSum_byte: [wreg+status,2+status,0]
 17892  1B5F  01F7               	clrf	i1CheckSum_byte@i
 17893                           
 17894                           ;MISC.c: 72: unsigned char Parity = 0;
 17895  1B60  01F6               	clrf	i1CheckSum_byte@Parity
 17896                           
 17897                           ;MISC.c: 73: unsigned int ThisTemp = This;
 17898  1B61  0871               	movf	i1CheckSum_byte@This+1,w
 17899  1B62  01F5               	clrf	i1CheckSum_byte@ThisTemp+1
 17900  1B63  07F5               	addwf	i1CheckSum_byte@ThisTemp+1,f
 17901  1B64  0870               	movf	i1CheckSum_byte@This,w
 17902  1B65  01F4               	clrf	i1CheckSum_byte@ThisTemp
 17903  1B66  07F4               	addwf	i1CheckSum_byte@ThisTemp,f
 17904                           
 17905                           ;MISC.c: 75: for (i =0; i<8; i++)
 17906  1B67  01F7               	clrf	i1CheckSum_byte@i
 17907  1B68  3008               	movlw	8
 17908  1B69  0277               	subwf	i1CheckSum_byte@i,w
 17909  1B6A  1803               	btfsc	3,0
 17910  1B6B  2B7F               	goto	i1l3760
 17911  1B6C                     i1l292:	
 17912                           
 17913                           ;MISC.c: 76: {
 17914                           ;MISC.c: 77: if((ThisTemp & 0x01) == 1)
 17915  1B6C  1C74               	btfss	i1CheckSum_byte@ThisTemp,0
 17916  1B6D  2B72               	goto	i1l294
 17917                           
 17918                           ;MISC.c: 78: {
 17919                           ;MISC.c: 79: Parity++;
 17920  1B6E  3001               	movlw	1
 17921  1B6F  00F3               	movwf	??i1_CheckSum_byte
 17922  1B70  0873               	movf	??i1_CheckSum_byte,w
 17923  1B71  07F6               	addwf	i1CheckSum_byte@Parity,f
 17924  1B72                     i1l294:	
 17925                           
 17926                           ;MISC.c: 80: }
 17927                           ;MISC.c: 81: ThisTemp >>= 1;
 17928  1B72  3001               	movlw	1
 17929  1B73                     u384_25:	
 17930  1B73  36F5               	lsrf	i1CheckSum_byte@ThisTemp+1,f
 17931  1B74  0CF4               	rrf	i1CheckSum_byte@ThisTemp,f
 17932  1B75  0B89               	decfsz	9,f
 17933  1B76  2B73               	goto	u384_25
 17934  1B77  3001               	movlw	1
 17935  1B78  00F3               	movwf	??i1_CheckSum_byte
 17936  1B79  0873               	movf	??i1_CheckSum_byte,w
 17937  1B7A  07F7               	addwf	i1CheckSum_byte@i,f
 17938  1B7B  3008               	movlw	8
 17939  1B7C  0277               	subwf	i1CheckSum_byte@i,w
 17940  1B7D  1C03               	skipc
 17941  1B7E  2B6C               	goto	i1l292
 17942  1B7F                     i1l3760:	
 17943                           
 17944                           ;MISC.c: 82: }
 17945                           ;MISC.c: 83: if(Odd_Even == 3)
 17946  1B7F  0872               	movf	i1CheckSum_byte@Odd_Even,w
 17947  1B80  3A03               	xorlw	3
 17948  1B81  1D03               	skipz
 17949  1B82  2B89               	goto	i1l295
 17950                           
 17951                           ;MISC.c: 84: {
 17952                           ;MISC.c: 85: if(Parity % 2 == 0)
 17953  1B83  1876               	btfsc	i1CheckSum_byte@Parity,0
 17954  1B84  2B87               	goto	i1l3768
 17955                           
 17956                           ;MISC.c: 86: {
 17957                           ;MISC.c: 87: return 1;
 17958  1B85  3001               	movlw	1
 17959  1B86  0008               	return
 17960  1B87                     i1l3768:	
 17961                           
 17962                           ;MISC.c: 88: }
 17963                           ;MISC.c: 89: return 0;
 17964  1B87  3000               	movlw	0
 17965                           
 17966                           ;MISC.c: 90: }
 17967  1B88  0008               	return
 17968  1B89                     i1l295:	
 17969                           
 17970                           ;MISC.c: 91: else
 17971                           ;MISC.c: 92: {
 17972                           ;MISC.c: 93: if(Parity % 2 == 1)
 17973  1B89  1C76               	btfss	i1CheckSum_byte@Parity,0
 17974  1B8A  2B8D               	goto	i1l3778
 17975                           
 17976                           ;MISC.c: 94: {
 17977                           ;MISC.c: 95: return 1;
 17978  1B8B  3001               	movlw	1
 17979  1B8C  0008               	return
 17980  1B8D                     i1l3778:	
 17981                           
 17982                           ;MISC.c: 96: }
 17983                           ;MISC.c: 97: return 0;
 17984  1B8D  3000               	movlw	0
 17985  1B8E  0008               	return
 17986  1B8F                     __end_ofi1_CheckSum_byte:	
 17987                           
 17988                           	psect	text77
 17989  1FAC                     __ptext77:	
 17990 ;; *************** function _Reverse_Byte *****************
 17991 ;; Defined at:
 17992 ;;		line 106 in file "MISC.c"
 17993 ;; Parameters:    Size  Location     Type
 17994 ;;  This            1    wreg     unsigned char 
 17995 ;; Auto vars:     Size  Location     Type
 17996 ;;  This            1    3[COMMON] unsigned char 
 17997 ;;  temp            1    2[COMMON] unsigned char 
 17998 ;; Return value:  Size  Location     Type
 17999 ;;                  1    wreg      unsigned char 
 18000 ;; Registers used:
 18001 ;;		wreg, status,2, status,0
 18002 ;; Tracked objects:
 18003 ;;		On entry : 0/0
 18004 ;;		On exit  : 0/0
 18005 ;;		Unchanged: 0/0
 18006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18008 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18009 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18010 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18011 ;;Total ram usage:        4 bytes
 18012 ;; Hardware stack levels used:    1
 18013 ;; This function calls:
 18014 ;;		Nothing
 18015 ;; This function is called by:
 18016 ;;		_PS2RawToScan
 18017 ;; This function uses a non-reentrant model
 18018 ;;
 18019                           
 18020                           
 18021                           ;psect for function _Reverse_Byte
 18022  1FAC                     _Reverse_Byte:	
 18023                           
 18024                           ;incstack = 0
 18025                           ; Regs used in _Reverse_Byte: [wreg+status,2+status,0]
 18026                           ;Reverse_Byte@This stored from wreg
 18027  1FAC  00F3               	movwf	Reverse_Byte@This
 18028                           
 18029                           ;MISC.c: 108: unsigned char temp=0;
 18030  1FAD  01F2               	clrf	Reverse_Byte@temp
 18031                           
 18032                           ;MISC.c: 110: temp += (This & 0x01) << 7;
 18033  1FAE  0873               	movf	Reverse_Byte@This,w
 18034  1FAF  3901               	andlw	1
 18035  1FB0  00F0               	movwf	??_Reverse_Byte
 18036  1FB1  3006               	movlw	6
 18037  1FB2                     u510_25:	
 18038  1FB2  35F0               	lslf	??_Reverse_Byte,f
 18039  1FB3  3EFF               	addlw	-1
 18040  1FB4  1D03               	skipz
 18041  1FB5  2FB2               	goto	u510_25
 18042  1FB6  3570               	lslf	??_Reverse_Byte,w
 18043  1FB7  00F1               	movwf	??_Reverse_Byte+1
 18044  1FB8  0871               	movf	??_Reverse_Byte+1,w
 18045  1FB9  07F2               	addwf	Reverse_Byte@temp,f
 18046                           
 18047                           ;MISC.c: 111: temp += (This & 0x02) << 5;
 18048  1FBA  0873               	movf	Reverse_Byte@This,w
 18049  1FBB  3902               	andlw	2
 18050  1FBC  00F0               	movwf	??_Reverse_Byte
 18051  1FBD  3004               	movlw	4
 18052  1FBE                     u511_25:	
 18053  1FBE  35F0               	lslf	??_Reverse_Byte,f
 18054  1FBF  3EFF               	addlw	-1
 18055  1FC0  1D03               	skipz
 18056  1FC1  2FBE               	goto	u511_25
 18057  1FC2  3570               	lslf	??_Reverse_Byte,w
 18058  1FC3  00F1               	movwf	??_Reverse_Byte+1
 18059  1FC4  0871               	movf	??_Reverse_Byte+1,w
 18060  1FC5  07F2               	addwf	Reverse_Byte@temp,f
 18061                           
 18062                           ;MISC.c: 112: temp += (This & 0x04) << 3;
 18063  1FC6  0873               	movf	Reverse_Byte@This,w
 18064  1FC7  3904               	andlw	4
 18065  1FC8  00F0               	movwf	??_Reverse_Byte
 18066  1FC9  3002               	movlw	2
 18067  1FCA                     u512_25:	
 18068  1FCA  35F0               	lslf	??_Reverse_Byte,f
 18069  1FCB  3EFF               	addlw	-1
 18070  1FCC  1D03               	skipz
 18071  1FCD  2FCA               	goto	u512_25
 18072  1FCE  3570               	lslf	??_Reverse_Byte,w
 18073  1FCF  00F1               	movwf	??_Reverse_Byte+1
 18074  1FD0  0871               	movf	??_Reverse_Byte+1,w
 18075  1FD1  07F2               	addwf	Reverse_Byte@temp,f
 18076                           
 18077                           ;MISC.c: 113: temp += (This & 0x08) << 1;
 18078  1FD2  0873               	movf	Reverse_Byte@This,w
 18079  1FD3  3908               	andlw	8
 18080  1FD4  0709               	addwf	9,w
 18081  1FD5  00F0               	movwf	??_Reverse_Byte
 18082  1FD6  0870               	movf	??_Reverse_Byte,w
 18083  1FD7  07F2               	addwf	Reverse_Byte@temp,f
 18084                           
 18085                           ;MISC.c: 114: temp += (This & 0x10) >> 1;
 18086  1FD8  3673               	lsrf	Reverse_Byte@This,w
 18087  1FD9  3908               	andlw	8
 18088  1FDA  00F0               	movwf	??_Reverse_Byte
 18089  1FDB  0870               	movf	??_Reverse_Byte,w
 18090  1FDC  07F2               	addwf	Reverse_Byte@temp,f
 18091                           
 18092                           ;MISC.c: 115: temp += (This & 0x20) >> 3;
 18093  1FDD  0873               	movf	Reverse_Byte@This,w
 18094  1FDE  00F0               	movwf	??_Reverse_Byte
 18095  1FDF  3003               	movlw	3
 18096  1FE0                     u513_25:	
 18097  1FE0  36F0               	lsrf	??_Reverse_Byte,f
 18098  1FE1  0B89               	decfsz	9,f
 18099  1FE2  2FE0               	goto	u513_25
 18100  1FE3  0870               	movf	??_Reverse_Byte,w
 18101  1FE4  3904               	andlw	4
 18102  1FE5  00F1               	movwf	??_Reverse_Byte+1
 18103  1FE6  0871               	movf	??_Reverse_Byte+1,w
 18104  1FE7  07F2               	addwf	Reverse_Byte@temp,f
 18105                           
 18106                           ;MISC.c: 116: temp += (This & 0x40) >> 5;
 18107  1FE8  0873               	movf	Reverse_Byte@This,w
 18108  1FE9  00F0               	movwf	??_Reverse_Byte
 18109  1FEA  3005               	movlw	5
 18110  1FEB                     u514_25:	
 18111  1FEB  36F0               	lsrf	??_Reverse_Byte,f
 18112  1FEC  0B89               	decfsz	9,f
 18113  1FED  2FEB               	goto	u514_25
 18114  1FEE  0870               	movf	??_Reverse_Byte,w
 18115  1FEF  3902               	andlw	2
 18116  1FF0  00F1               	movwf	??_Reverse_Byte+1
 18117  1FF1  0871               	movf	??_Reverse_Byte+1,w
 18118  1FF2  07F2               	addwf	Reverse_Byte@temp,f
 18119                           
 18120                           ;MISC.c: 117: temp += (This & 0x80) >> 7;
 18121  1FF3  0873               	movf	Reverse_Byte@This,w
 18122  1FF4  00F0               	movwf	??_Reverse_Byte
 18123  1FF5  3007               	movlw	7
 18124  1FF6                     u515_25:	
 18125  1FF6  36F0               	lsrf	??_Reverse_Byte,f
 18126  1FF7  0B89               	decfsz	9,f
 18127  1FF8  2FF6               	goto	u515_25
 18128  1FF9  0870               	movf	??_Reverse_Byte,w
 18129  1FFA  3901               	andlw	1
 18130  1FFB  00F1               	movwf	??_Reverse_Byte+1
 18131  1FFC  0871               	movf	??_Reverse_Byte+1,w
 18132  1FFD  07F2               	addwf	Reverse_Byte@temp,f
 18133                           
 18134                           ;MISC.c: 119: return temp;
 18135  1FFE  0872               	movf	Reverse_Byte@temp,w
 18136  1FFF  0008               	return
 18137  2000                     __end_of_Reverse_Byte:	
 18138  007E                     btemp	set	126	;btemp
 18139  007E                     pic14e$flags	set	126
 18140  007E                     wtemp	set	126
 18141  007E                     wtemp0	set	126
 18142  0080                     wtemp1	set	128
 18143  0082                     wtemp2	set	130
 18144  0084                     wtemp3	set	132
 18145  0086                     wtemp4	set	134
 18146  0088                     wtemp5	set	136
 18147  007F                     wtemp6	set	127
 18148  007E                     ttemp	set	126
 18149  007E                     ttemp0	set	126
 18150  0081                     ttemp1	set	129
 18151  0084                     ttemp2	set	132
 18152  0087                     ttemp3	set	135
 18153  007F                     ttemp4	set	127
 18154  007E                     ltemp	set	126
 18155  007E                     ltemp0	set	126
 18156  0082                     ltemp1	set	130
 18157  0086                     ltemp2	set	134
 18158  0080                     ltemp3	set	128


Data Sizes:
    Strings     248
    Constant    622
    Data        8
    BSS         54
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     37      70
    BANK2            80     63      63
    BANK3            80     65      80
    BANK4            80     55      69
    BANK5            80     69      69
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_19(CODE[33]), STR_12(CODE[21]), STR_8(CODE[21]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 60
		 -> Process_PS2_ScanCode@buf(BANK3[60]), SetBaud@buf(BANK2[50]), Init_System@buf(BANK5[60]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i1_sprintf(BANK0[2]), ?_sprintf(BANK4[2]), 

    S1090$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    WriteFlash_Sequential@buffer	PTR unsigned int  size(1) Largest target is 4
		 -> MEM(BANK1[4]), 

    UARTstringWAIT@data	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_21(CODE[29]), STR_20(CODE[3]), Process_PS2_ScanCode@buf(BANK3[60]), STR_18(CODE[3]), 
		 -> STR_17(CODE[3]), STR_16(CODE[23]), STR_15(CODE[19]), STR_14(CODE[3]), 
		 -> STR_13(CODE[3]), SetBaud@buf(BANK2[50]), STR_11(CODE[24]), STR_10(CODE[3]), 
		 -> STR_9(CODE[3]), NoParityMSG(CODE[20]), SpaceParityMSG(CODE[16]), MarkParityMSG(CODE[15]), 
		 -> EvenParityMSG(CODE[22]), OddParityMSG(CODE[21]), Init_System@buf(BANK5[60]), STR_7(CODE[3]), 
		 -> STR_6(CODE[39]), STR_5(CODE[3]), Version(CODE[8]), STR_4(CODE[19]), 
		 -> STR_3(CODE[26]), STR_2(CODE[8]), STR_1(CODE[7]), VoltageMSG(CODE[13]), 

    BufferShiftBack@buffer	PTR unsigned char  size(1) Largest target is 12
		 -> PS_2_ScanCodes(BANK1[12]), 

    cleanBuffer@data	PTR unsigned char  size(1) Largest target is 12
		 -> PS_2_ScanCodes(BANK1[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_UARTchar
    _ResendLast->_Send_PS2
    _Process_PS2_ScanCode->_Send_PS2
    _Process_PS2_ScanCode->i1_UARTchar
    _UART_send_break_timed->i1_delayUS
    i1_sprintf->i1___lldiv
    i1___llmod->i1___lldiv
    i1_UARTstringWAIT->i1_UARTchar
    i1_UARTchar->i1_CheckSum_byte
    i1_ReadBaud->i1_ReadFlash_4Byte
    i1_ReadFlash_4Byte->i1_ReadFlash_2Byte
    i1_InitUART->i1___lldiv
    _WriteBaud->_WriteFlash_Sequential
    _WriteFlash_Sequential->i1_delayUS
    _Send_PS2->i1_delayUS
    _PS2RawToScan->i1_CheckSum_byte

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _ResendLast->_Send_PS2
    _SetBaud->_WriteBaud
    i1_sprintf->i1___llmod
    i1_UARTstringWAIT->i1_UARTchar
    i1_ReadBaud->i1_ReadFlash_4Byte
    _WriteBaud->_WriteFlash_Sequential

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    _isr->_Process_PS2_ScanCode
    _Process_PS2_ScanCode->_SetBaud
    _SetBaud->_WriteBaud

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    _Process_PS2_ScanCode->_SetBaud

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    _isr->_Process_PS2_ScanCode

Critical Paths under _main in BANK4

    _main->_Init_System
    _main->_ReadVoltage
    _ReadVoltage->___ftmul
    ___lwtoft->___ftpack
    ___ftmul->___ftdiv
    ___ftdiv->___lwtoft
    _InternalADC_Read->_delayUS
    _PS_2_INIT->_Timer2Init
    _Init_System->_sprintf
    _sprintf->___llmod
    ___llmod->___lldiv
    _UARTstringWAIT->_UARTchar
    _UARTchar->_CheckSum_byte
    _ReadBaud->_ReadFlash_4Byte
    _ReadFlash_4Byte->_ReadFlash_2Byte
    _InitUART->___lldiv

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    _main->_Init_System

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   35430
                                             53 BANK4      2     2      0
                _ConfigureOscillator
                            _InitApp
                        _Init_System
              _PS_2_ENABLE_INTERRUPT
                          _PS_2_INIT
                        _ReadVoltage
                     _UARTstringWAIT
                             ___ftge
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     814
                                              0 BANK4      9     3      6
 ---------------------------------------------------------------------------------
 (1) _ReadVoltage                                          9     6      3   10973
                                             44 BANK4      9     6      3
                 _DisableInternalADC
                   _InternalADC_Read
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             4     1      3    2481
                                              8 BANK4      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    3015
                                             28 BANK4     16    10      6
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2947
                                             12 BANK4     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2373
                                              0 BANK4      8     3      5
 ---------------------------------------------------------------------------------
 (2) _InternalADC_Read                                     5     3      2    2456
                                             10 BANK4      5     3      2
                            _delayUS
 ---------------------------------------------------------------------------------
 (2) _DisableInternalADC                                   1     1      0       0
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PS_2_INIT                                            0     0      0     161
                         _Clock_TRIS
                          _Data_TRIS
                         _Timer2Init
 ---------------------------------------------------------------------------------
 (2) _Timer2Init                                           5     5      0      99
                                              0 BANK4      5     5      0
                           _Timer2ON
 ---------------------------------------------------------------------------------
 (3) _Timer2ON                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Data_TRIS                                            1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Clock_TRIS                                           1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PS_2_ENABLE_INTERRUPT                                1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                         74    74      0   14136
                                             48 BANK4      5     5      0
                                              0 BANK5     69    69      0
                           _InitUART
                           _ReadBaud
                     _UARTstringWAIT
                            _delayUS
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             24    16      8    1742
                                             24 BANK4     24    16      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     287
                                             14 BANK4     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _UARTstringWAIT                                       4     2      2    6819
                                             15 BANK4      4     2      2
                           _UARTchar
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) _delayUS                                             10     6      4    2425
                                              0 BANK4     10     6      4
 ---------------------------------------------------------------------------------
 (2) _UARTchar                                             7     5      2    2026
                                              8 BANK4      7     5      2
                      _CheckSum_byte
 ---------------------------------------------------------------------------------
 (3) _CheckSum_byte                                        8     5      3     714
                                              0 BANK4      8     5      3
 ---------------------------------------------------------------------------------
 (2) _ReadBaud                                            16    12      4    1168
                                             18 BANK4     16    12      4
                    _ReadFlash_4Byte
 ---------------------------------------------------------------------------------
 (3) _ReadFlash_4Byte                                     13     9      4     803
                                              5 BANK4     13     9      4
                    _ReadFlash_2Byte
 ---------------------------------------------------------------------------------
 (4) _ReadFlash_2Byte                                      5     2      3     485
                                              0 BANK4      5     2      3
 ---------------------------------------------------------------------------------
 (2) _InitUART                                            21    16      5    1563
                                             14 BANK4     21    16      5
                         _CloseUSART
                          _OpenUSART
                          _ReadUSART
                            ___lldiv
                          _baudUSART
 ---------------------------------------------------------------------------------
 (3) _baudUSART                                            1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     549
                                              0 BANK4     14     6      8
 ---------------------------------------------------------------------------------
 (3) _ReadUSART                                            2     2      0      34
                                              0 BANK4      2     2      0
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     387
                                              0 BANK4      3     1      2
 ---------------------------------------------------------------------------------
 (3) _CloseUSART                                           1     1      0       0
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  1     1      0       0
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  5     5      0   20876
                                             78 BANK0      2     2      0
                                             34 BANK1      3     3      0
                       _PS2RawToScan
             _PS_2_DISABLE_INTERRUPT
               _Process_PS2_ScanCode
                    _READ_CONFIG_PIN
                      _READ_PS_2_PIN
                         _ResendLast
                          _Timer2OFF
                        _Timer2Reset
              _UART_send_break_timed
            i1_PS_2_ENABLE_INTERRUPT
                        i1_ReadUSART
                         i1_Timer2ON
                         i1_UARTchar
 ---------------------------------------------------------------------------------
 (6) i1_Timer2ON                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) i1_PS_2_ENABLE_INTERRUPT                              1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Timer2Reset                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Timer2OFF                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _ResendLast                                           0     0      0    1323
             _PS_2_DISABLE_INTERRUPT
                           _Send_PS2
 ---------------------------------------------------------------------------------
 (7) _PS_2_DISABLE_INTERRUPT                               2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _READ_CONFIG_PIN                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Process_PS2_ScanCode                                71    71      0   16847
                                             28 BANK1      6     6      0
                                              0 BANK3     65    65      0
                    _BufferShiftBack
                   _Decode_Scan_Code
          _Decode_Scan_Code_Function
        _Decode_Scan_Code_FunctionE0
             _Decode_Scan_Code_Shift
                           _ISNUMBER
                           _Send_PS2
                            _SetBaud
                    _UART_send_break
              _UART_send_break_timed
                             ___lmul
                        _cleanBuffer
                         i1_UARTchar
                   i1_UARTstringWAIT
                          i1_delayUS
                          i1_sprintf
 ---------------------------------------------------------------------------------
 (7) _cleanBuffer                                          5     3      2     193
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (7) ___lmul                                              12     4      8     220
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (6) _UART_send_break_timed                                3     1      2     684
                                             10 COMMON     3     1      2
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (7) _UART_send_break                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _SetBaud                                             76    71      5    7702
                                             15 BANK1     13     8      5
                                              0 BANK2     63    63      0
                          _WriteBaud
                         i1_InitUART
                         i1_ReadBaud
                   i1_UARTstringWAIT
                          i1_delayUS
                          i1_sprintf
 ---------------------------------------------------------------------------------
 (7) i1_sprintf                                           24    16      8     971
                                             10 BANK0     24    16      8
                          i1___lldiv
                          i1___llmod
 ---------------------------------------------------------------------------------
 (8) i1___llmod                                           10     2      8     211
                                              0 BANK0     10     2      8
                          i1___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i1_UARTstringWAIT                                     4     2      2    2263
                                              1 BANK0      4     2      2
                         i1_UARTchar
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (6) i1_UARTchar                                           7     5      2    1065
                                              8 COMMON     6     4      2
                                              0 BANK0      1     1      0
                    i1_CheckSum_byte
 ---------------------------------------------------------------------------------
 (8) i1_ReadBaud                                          16    12      4     528
                                              4 BANK0     16    12      4
                  i1_ReadFlash_4Byte
 ---------------------------------------------------------------------------------
 (9) i1_ReadFlash_4Byte                                   13     9      4     387
                                              5 COMMON     9     5      4
                                              0 BANK0      4     4      0
                  i1_ReadFlash_2Byte
 ---------------------------------------------------------------------------------
 (8) i1_InitUART                                          21    16      5     822
                                              0 BANK0     21    16      5
                       i1_CloseUSART
                        i1_OpenUSART
                        i1_ReadUSART
                          i1___lldiv
                        i1_baudUSART
 ---------------------------------------------------------------------------------
 (9) i1_baudUSART                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1___lldiv                                           14     6      8     266
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (6) i1_ReadUSART                                          2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) i1_OpenUSART                                          3     1      2     246
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (9) i1_CloseUSART                                         1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _WriteBaud                                           19    12      7    1928
                                             74 BANK0      4     4      0
                                              0 BANK1     15     8      7
              _WriteFlash_Sequential
 ---------------------------------------------------------------------------------
 (9) _WriteFlash_Sequential                               78    74      4    1625
                                             10 COMMON     4     0      4
                                              0 BANK0     74    74      0
                         _BlockErase
                             _UNLOCK
                  i1_ReadFlash_2Byte
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (10) i1_ReadFlash_2Byte                                   5     2      3     222
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (10) _BlockErase                                          4     2      2     108
                                              0 COMMON     4     2      2
                             _UNLOCK
 ---------------------------------------------------------------------------------
 (10) _UNLOCK                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Send_PS2                                             9     9      0    1301
                                             10 COMMON     4     4      0
                                              0 BANK0      5     5      0
                      _READ_PS_2_PIN
                    i1_CheckSum_byte
                       i1_Clock_TRIS
                        i1_Data_TRIS
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (7) i1_delayUS                                           10     6      4     534
                                              0 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (8) i1_Data_TRIS                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_Clock_TRIS                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _READ_PS_2_PIN                                        1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _ISNUMBER                                             1     1      0      44
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code_Shift                               1     1      0      45
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code_FunctionE0                          1     1      0      45
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code_Function                            1     1      0      44
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code                                     1     1      0      45
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _BufferShiftBack                                      8     6      2     975
                                              0 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 (6) _PS2RawToScan                                        13    11      2     753
                                              8 COMMON     4     2      2
                                              0 BANK0      9     9      0
                       _Reverse_Byte
                    i1_CheckSum_byte
 ---------------------------------------------------------------------------------
 (7) i1_CheckSum_byte                                      8     5      3     369
                                              0 COMMON     8     5      3
 ---------------------------------------------------------------------------------
 (7) _Reverse_Byte                                         4     4      0     207
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _Init_System
     _InitUART
       _CloseUSART
       _OpenUSART
       _ReadUSART
       ___lldiv
       _baudUSART
     _ReadBaud
       _ReadFlash_4Byte
         _ReadFlash_2Byte
     _UARTstringWAIT
       _UARTchar
         _CheckSum_byte
       _delayUS
     _delayUS
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
   _PS_2_ENABLE_INTERRUPT
   _PS_2_INIT
     _Clock_TRIS
     _Data_TRIS
     _Timer2Init
       _Timer2ON
   _ReadVoltage
     _DisableInternalADC
     _InternalADC_Read
       _delayUS
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _UARTstringWAIT
     _UARTchar
       _CheckSum_byte
     _delayUS
   ___ftge
   _delayUS

 _isr (ROOT)
   _PS2RawToScan
     _Reverse_Byte
     i1_CheckSum_byte
   _PS_2_DISABLE_INTERRUPT
   _Process_PS2_ScanCode
     _BufferShiftBack
     _Decode_Scan_Code
     _Decode_Scan_Code_Function
     _Decode_Scan_Code_FunctionE0
     _Decode_Scan_Code_Shift
     _ISNUMBER
     _Send_PS2
       _READ_PS_2_PIN
       i1_CheckSum_byte
       i1_Clock_TRIS
       i1_Data_TRIS
       i1_delayUS
     _SetBaud
       _WriteBaud
         _WriteFlash_Sequential
           _BlockErase
             _UNLOCK
           _UNLOCK
           i1_ReadFlash_2Byte
           i1_delayUS
       i1_InitUART
         i1_CloseUSART
         i1_OpenUSART
         i1_ReadUSART
         i1___lldiv
         i1_baudUSART
       i1_ReadBaud
         i1_ReadFlash_4Byte
           i1_ReadFlash_2Byte
       i1_UARTstringWAIT
         i1_UARTchar
           i1_CheckSum_byte
         i1_delayUS
       i1_delayUS
       i1_sprintf
         i1___lldiv
         i1___llmod
           i1___lldiv (ARG)
     _UART_send_break
     _UART_send_break_timed
       i1_delayUS
     ___lmul
     _cleanBuffer
     i1_UARTchar
       i1_CheckSum_byte
     i1_UARTstringWAIT
       i1_UARTchar
         i1_CheckSum_byte
       i1_delayUS
     i1_delayUS
     i1_sprintf
       i1___lldiv
       i1___llmod
         i1___lldiv (ARG)
   _READ_CONFIG_PIN
   _READ_PS_2_PIN
   _ResendLast
     _PS_2_DISABLE_INTERRUPT
     _Send_PS2
       _READ_PS_2_PIN
       i1_CheckSum_byte
       i1_Clock_TRIS
       i1_Data_TRIS
       i1_delayUS
   _Timer2OFF
   _Timer2Reset
   _UART_send_break_timed
     i1_delayUS
   i1_PS_2_ENABLE_INTERRUPT
   i1_ReadUSART
   i1_Timer2ON
   i1_UARTchar
     i1_CheckSum_byte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     25      46       7       87.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     3F      3F       9       78.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50     41      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50     37      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50     45      45      15       86.3%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     1BD      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     1BD      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Fri Feb 27 13:27:04 2015

                     _BufferShiftBack 1CC9                _PS_2_DISABLE_INTERRUPT 1000  
             Process_PS2_ScanCode@buf 01A0                            __CFG_CP$ON 0000  
                   ??_ReadFlash_2Byte 0223                     ??_ReadFlash_4Byte 0229  
                                   _i 00D5                        _ResendLastFlag 00D3  
            Process_PS2_ScanCode@temp 01E0                  i1InitUART@baudconfig 002F  
                  Data_TRIS@direction 0220                           __CFG_LVP$ON 0000  
                                 l171 0AAC                                   l421 1D34  
                                 l423 1D3E                                   l417 1D25  
                                 l434 115D                                   l443 118C  
                                 l435 1160                                   l179 0B5E  
                                 l292 1B9D                                   l284 1C61  
                                 l276 0CE0                                   l294 1BA3  
                                 l286 1C7A                                   l470 1C44  
                                 l622 1956                                   l295 1BBA  
                                 l439 1183                                   l642 1979  
                                 l627 1961                                   l468 1C25  
                                 l945 0A89                                   _MEM 00E2  
                                 _PR2 001B                                   _isr 0004  
                _Process_PS2_ScanCode 011B                           i1_baudUSART 18E0  
             i1ReadFlash_4Byte@column 0077                          __CFG_BORV$LO 0000  
                                 wreg 0009            __size_ofi1_ReadFlash_2Byte 002A  
          __size_ofi1_ReadFlash_4Byte 0051            __end_of_ScanCodeFunctionE0 08D3  
             UART_send_break_timed@US 007A                          ___ftdiv@cntr 0236  
                        ___ftdiv@sign 023B                                  l1022 1DE4  
                                l1025 1E09                                  l1076 1732  
                                l1260 10BA                                  l1254 10A3  
                                l1079 1750                                  l4232 1D97  
                                l6002 113C                                  l6010 1170  
                                l4234 1DA5                                  l4242 1DC8  
                                l6004 1145                                  l6012 117B  
                                l6100 1080                                  l4238 1DBD  
                                l6110 10A8                                  l6102 108A  
                                l6008 1163                                  l6112 10B0  
                                l6104 108F                                  l6050 1D1A  
                                l6130 1F78                                  l6034 1C84  
                                l6054 1D1F                                  l6046 1D14  
                                l6142 1FA3                                  l6072 1D40  
                                l6064 1D2C                                  l6128 1F6A  
                                l6152 1C47                                  l6058 1D27  
                                l6138 1F98                                  l6242 1739  
                                l6330 12DC                                  l6402 06CC  
                                l6068 1D36                                  l6236 1730  
                                l6190 1466                                  l6238 1734  
                                l6350 1333                                  l6406 06D4  
                                l6248 1760                                  l6520 0CC6  
                                l6096 1079                                  l6336 12F2  
                                l6600 0AFD                                  l6426 19EC  
                                l6274 17AA                                  l6266 17A5  
                                l6258 1778                                  l6514 0CB7  
                                l6428 19F2                                  l6188 1462  
                                l6276 170F                                  l6516 0CBC  
                                l6524 0CCB                                  l6372 065F  
                                l6620 0B66                                  l6604 0B1F  
                                l6278 17FA                                  l6518 0CC1  
                                l6526 0CD8                                  l6358 134C  
                                l6390 06B0                                  l6542 10EE  
                                l6560 1CBA                                  l6632 0B88  
                                l6616 0B62                                  l6608 0B25  
                                l6482 0C0A                                  l6394 06B8  
                                l6378 0675                                  l6546 10FC  
                                l6556 1CA4                                  l6628 0B7B  
                                ?_isr 0070        __size_of_PS_2_ENABLE_INTERRUPT 000C  
                                l6478 0C01                                  l5964 1BB8  
                                l5956 1BB0                                  l6596 0AD5  
                                l5974 1BBE                                  _BAUD 0261  
                 _PS_2_Read_Data_TEMP 00C9                                  _ECHO 025F  
                                STR_1 0A5F                                  STR_2 0A57  
                                STR_3 09D3                                  STR_4 0A44  
                                STR_5 0A41                                  STR_6 096E  
                                STR_7 0A41                                  STR_8 0A1C  
                                STR_9 0A41                                  _LATA 010C  
                                _LATC 010E                                  _LALT 01E9  
       __end_of_PS_2_ENABLE_INTERRUPT 197C                                  _PIE1 0091  
                                u8005 1223                                  u8015 1246  
                                u4745 1D9A                                  i1l90 0082  
                                i1l83 0075                                  u8035 1498  
                                i1l92 00BF                                  i1l84 002F  
                                u4765 1DB3                                  u8205 1314  
                                i1l87 005B                                  u4775 1DBE  
                                u8135 1AF0                                  u8215 1334  
                                _RALT 01EC                                  u8225 1343  
                                u8305 06B9                                  u8075 179B  
                                u8155 1DEA                                  u8235 134D  
                                u8315 06BF                                  u8405 0BD5  
                                u7703 1C73                                  u8095 17B4  
                                u8415 0BEF                                  u7545 1BA4  
                                u8425 0BFF                                  u8345 06D5  
                                u8195 1304                                  u8355 06DB  
                                u8275 0681                                  u8285 0691  
                                u7815 1085                                  u8455 10E9  
                                u7915 1F6D                                  u7595 0A80  
                                u7835 109E                                  u8475 10F8  
                                u7935 1F79                                  u7855 10AB  
                                u7945 1F8D                                  u7785 1ED4  
                                u7955 1F99                                  u7885 10C1  
                                _TMR2 001A                                  _WPUA 020C  
                                _WPUC 020E                            i1delayUS@i 0075  
                          i1delayUS@j 0079                          __CFG_WRT$OFF 0000  
    __size_ofi1_PS_2_ENABLE_INTERRUPT 000B                     i1___lldiv@divisor 0070  
                                _main 0A98                    UARTstringWAIT@data 022F  
                        ___ftpack@arg 0220                          ___ftpack@exp 0223  
                                fsr0h 0005                                  fsr1h 0007  
                                fsr0l 0004                                  indf0 0000  
                                indf1 0001                                  fsr1l 0006  
                                btemp 007E                     i1___lldiv@counter 007D  
                 baudUSART@baudconfig 0220                         __CFG_BOREN$ON 0000  
                                ltemp 007E                     SetBaud@Paritytemp 0156  
                    i1_UARTstringWAIT 1BC0                                  start 00E6  
                                ttemp 007E                                  wtemp 007E  
                       __CFG_IESO$OFF 0000                      Reverse_Byte@This 0073  
           WriteFlash_Sequential@temp 0066                      Reverse_Byte@temp 0072  
                       __CFG_MCLRE$ON 0000                            _BlockErase 1AAE  
                        ___ftmul@cntr 024A                           ?i1_UARTchar 0078  
             ?_Decode_Scan_Code_Shift 0070                          ___ftmul@sign 024B  
                     __end_of_InitApp 1A5F                       __end_of_SetBaud 0E72  
                          _Clock_TRIS 194E                         ??_Init_System 0250  
              __size_of_READ_PS_2_PIN 0013                                 ??_isr 006E  
                 _Right_Shift_Key_old 00D4     i1UARTchar@NinethBit_override_data 0079  
     UARTchar@NinethBit_override_data 0229             _Decode_Scan_Code_Function 19A3  
                         ReadBaud@row 0232       WriteFlash_Sequential@amountTemp 0065  
                     __end_of_Version 096E                         ??_ReadVoltage 024F  
                          _CloseUSART 1995                                 ?_main 0070  
            __size_ofi1_CheckSum_byte 0030                                 STR_10 0A41  
                               STR_11 09ED                                 STR_20 0A41  
                               STR_12 0A1C                                 STR_13 0A41  
                               STR_21 09B6                                 STR_14 0A41  
                               STR_15 0A31                                 STR_16 0A05  
                               STR_17 0A41                         __CFG_WDTE$OFF 0000  
                               STR_18 0A41                                 STR_19 0995  
                     __end_of___ftdiv 136E                      __end_of_ISNUMBER 1995  
                     __end_of___lldiv 1FAC                       __end_of___ftmul 06FC  
                               _CKPPS 0E25                       __end_of___llmod 1DD1  
                               _T2CON 001C                                 _IOCAF 0393  
                               _IOCAN 0392                                 _IOCAP 0391  
                               i1l102 00E1                                 i1l421 1B1E  
                               i1l423 1B27                                 i1l417 1B14  
                               i1l434 103A                                 i1l443 1067  
                               i1l435 103D                                 i1l292 1B6C  
                               i1l284 1BFA                                 i1l294 1B72  
                               i1l622 1921                                 i1l286 1C13  
                               i1l470 1BDE                                 i1l295 1B89  
                               i1l439 105E                                 i1l480 0DE6  
                               i1l642 194B                                 i1l627 192B  
                               i1l707 0256                                 i1l468 1BC0  
                               i1l820 05ED                                 i1l647 1A07  
                               i1l489 0E5F                                 i1l852 0EDB  
                               i1l853 0F2F                                 i1l945 1AA2  
                               i1l954 193E                                 i1l789 061D  
                               i1l797 0517        __size_of_UART_send_break_timed 0025  
                               _RCREG 0199                 ?_Process_PS2_ScanCode 0070  
                               _RCSTA 019D                                 _SPBRG 019B  
       __end_of_UART_send_break_timed 1A84                  _PS_2_Read_Data_First 01E1  
                               _PORTA 000C                                 _PORTC 000E  
                        InitUART@Baud 022E                                 _RXPPS 0E24  
                               _TXREG 019A                   _ConfigureOscillator 19E9  
                               _Alarm 025E                  _PS_2_Read_Data_Third 01E5  
                     __end_of_delayUS 1C8D                      _InternalADC_Read 1DD1  
                         i1delayUS@US 0070                   ___lmul@multiplicand 0074  
                      __CFG_FCMEN$OFF 0000                          InitUART@temp 023F  
               _WriteFlash_Sequential 136E                    i1___lldiv@dividend 0074  
               ReadFlash_2Byte@column 0222                      __end_of_UARTchar 1195  
                          SetBaud@buf 0120                       __end_of_dpowers 08FB  
                         ?i1_InitUART 0020                           ?i1_ReadBaud 0024  
                       ___ftpack@sign 0224                    __size_of_PS_2_INIT 000C  
                               main@i 0256                                 isr@rx 00C3  
                               ltemp0 007E                                 ltemp1 0082  
                               ltemp2 0086                                 ltemp3 0080  
             InternalADC_Read@channel 022E                                 ttemp0 007E  
                               ttemp1 0081                                 ttemp2 0084  
                               ttemp3 0087                                 ttemp4 007F  
                               status 0003               __end_of_BufferShiftBack 1D0A  
                               wtemp0 007E                                 wtemp1 0080  
                               wtemp2 0082                                 wtemp3 0084  
                               wtemp4 0086                                 wtemp5 0088  
                               wtemp6 007F                       __end_of_sprintf 1800  
                         isr@ScanTemp 00C4                    __size_ofi1___lldiv 0052  
                __size_of_cleanBuffer 0018                    __size_ofi1___llmod 0043  
                         ?i1_Timer2ON 0070                  ?_ConfigureOscillator 0070  
      __end_of_Decode_Scan_Code_Shift 19E9                         _ScanCodeSHIFT 07F5  
                  __size_ofi1_delayUS 0033                       _UART_send_break 18DB  
                     __initialization 00E8                   __end_of_NoParityMSG 093A  
                  __size_of_Data_TRIS 000B                          __end_of_main 0B8E  
                    __end_of_InitUART 1525                      ??_UARTstringWAIT 0231  
                         isr@Rx_fault 00C2                      __end_of_ReadBaud 125D  
                  i1___lldiv@quotient 0079            __end_of_DisableInternalADC 1900  
                      _SpaceParityMSG 093A                      __end_of_ScanCode 07F5  
                      __CFG_LPBOR$OFF 0000                            i1sprintf@c 0041  
                          i1sprintf@f 002C              __size_of_READ_CONFIG_PIN 0007  
                    __end_of_Send_PS2 1000                                ??_main 0255  
                  __size_ofi1_sprintf 00F6          __end_of_ScanCodeFunctionNoE0 0784  
                      __CFG_PLLEN$OFF 0000                      __end_of_Timer2ON 18D7  
                 __end_of_Init_System 0CF6                          ReadBaud@temp 023E  
                    i1CheckSum_byte@i 0077                        i1InitUART@Baud 0020  
                        ?i1_Data_TRIS 0070                      BufferShiftBack@i 0077  
       Decode_Scan_Code_Function@Code 0070                   __end_of_ReadVoltage 1132  
               ReadFlash_4Byte@column 0227                                _ADCON0 009D  
                              _ADCON1 009E                                _ADCON2 009F  
                 __size_ofi1_UARTchar 005F                      ___llmod@dividend 0232  
                              _ADRESH 009C                                _ADRESL 009B  
                      i1InitUART@temp 0031                         _READ_PS_2_PIN 19FB  
                      __CFG_ZCDDIS$ON 0000                                _ANSELA 018C  
                              _ANSELC 018E                      __end_of___ftpack 10D1  
                              _HFIOFS 04D0                                _RC1STA 019D  
                              _RC2PPS 0EA2                                i1l1076 163C  
                              i1l1079 165A                                i1l4010 1F50  
                              i1l4020 1D54                                i1l4006 1F45  
                              i1l4022 1D62                                i1l4030 1D85  
                   i1___llmod@divisor 0020                                i1l4026 1D7A  
                              i1l4044 1A05                                i1l4054 1A0C  
                              i1l5110 01A1                                i1l5040 1E5C  
                              i1l5042 1E5E                                i1l5210 026B  
                              i1l5202 0260                                i1l5130 01CA  
                              i1l5114 01A9                                i1l4316 1BE1  
                              i1l4270 1551                                i1l4350 1643  
                              i1l5310 035E                                i1l5142 01E0  
                              i1l5134 01D1                                i1l5126 01C3  
                              i1l5214 028B                                i1l5118 01B2  
                              i1l4272 1555                                i1l4344 163A  
                              i1l5320 0374                                i1l5304 0354  
                              i1l5232 02AF                                i1l5224 02A0  
                              i1l5152 01F6                                i1l4610 1CFE  
                              i1l4346 163E                                i1l5330 038E  
                              i1l5322 0362                                i1l5306 0357  
                              i1l5250 02C4                                i1l5162 020D  
                              i1l5138 01D6                                i1l5058 18F7  
                              i1l4612 1D05                                i1l4356 166A  
                              i1l5500 05CE                                i1l5412 047E  
                              i1l5332 0392                                i1l5324 037B  
                              i1l5308 0342                                i1l5260 02DF  
                              i1l5252 02DD                                i1l5236 02B8  
                              i1l5228 02A7                                i1l5164 01FB  
                              i1l4614 1CD0                                i1l4382 16B4  
                              i1l4374 16AF                                i1l4366 1682  
                              i1l5502 05D3                                i1l5422 0487  
                              i1l5334 037C                                i1l5262 02E5  
                              i1l5174 0227                                i1l5166 0214  
                              i1l5182 0236                                i1l3760 1B7F  
                              i1l3744 1C1C                                i1l4384 1619  
                              i1l5512 0608                                i1l5440 04C7  
                              i1l5336 0399                                i1l5272 030B  
                              i1l5248 02D6                                i1l5264 02FA  
                              i1l5192 024D                                i1l5176 0215  
                              i1l5096 017E                                i1l5088 0162  
                              i1l4810 0F9A                                i1l3850 1399  
                              i1l4386 1704                                i1l4642 0DCD  
                              i1l5506 05D8                                i1l5370 03E4  
                              i1l5258 02F7                                i1l5362 03DA  
                              i1l5178 022E                                i1l4394 100B  
                              i1l4820 0F9D                                i1l3940 1B28  
                              i1l4660 0E0D                                i1l5516 061B  
                              i1l5508 05E5                                i1l5428 049A  
                              i1l5348 03B8                                i1l5276 0314  
                              i1l5268 0303                                i1l5188 0244  
                              i1l4822 0FB9                                i1l4750 0EEA  
                              i1l4726 0EB8                                i1l3862 1375  
                              i1l3926 1B15                                i1l3918 1B0E  
                              i1l4670 0E3B                                i1l4646 0DE0  
                              i1l5470 054C                                i1l5462 0536  
                              i1l5454 0520                                i1l5518 061E  
                              i1l5358 03CE                                i1l5294 033A  
                              i1l5534 063D                                i1l3768 1B87  
                              i1l4832 0FBC                                i1l4808 0F7E  
                              i1l4752 0F06                                i1l4736 0EE0  
                              i1l4728 0ED5                                i1l3864 13CB  
                              i1l3856 13B6                                i1l3936 1B20  
                              i1l3960 1040                                i1l4672 0E40  
                              i1l4680 0E57                                i1l5448 050E  
                              i1l5296 0328                                i1l3778 1B8D  
                              i1l4586 1993                                i1l4834 0FD8  
                              i1l4770 0F34                                i1l4762 0F09  
                              i1l4738 0EE5                                i1l3954 101A  
                              i1l3962 104D                                i1l4674 0E45  
                              i1l4930 1B42                                i1l5474 0555  
                              i1l5466 053F                                i1l5458 0529  
                              i1l5378 03EF                                i1l5298 0341  
                              i1l5538 0121                                i1l4860 19D5  
                              i1l4844 0FDB                                i1l4772 0F39  
                              i1l4764 0F26                                i1l3956 1024  
                              i1l3964 1056                                i1l4668 0E36  
                              i1l4596 1A26                                i1l5724 005D  
                              i1l4846 0FF7                                i1l4782 0F3C  
                              i1l3894 1415                                i1l4678 0E4A  
                              i1l4926 1B38                                i1l5478 0562  
                              i1l5398 0443                                i1l5750 0092  
                              i1l5726 0060                                i1l4872 19E7  
                              i1l4784 0F58                                i1l3896 1439  
                              i1l5496 05C4                                i1l5760 00BC  
                              i1l4794 0F5B                                i1l5498 05C9  
                              i1l4884 19C3                                i1l4796 0F77  
                              i1l3996 1F17                                i1l3998 1F25  
                              i1l5758 00B0                                i1l4896 19B1  
                              i1l5776 00D7                                i1l5778 00DA  
                              _INTCON 000B                                u402_25 140C  
                              _FVRCON 0117                                u420_25 1F1A  
                              u510_25 1FB2                                u422_25 1F26  
                              u430_25 1D7B                                _PARITY 0260  
                              u511_25 1FBE                                u423_25 1F3A  
                              _PMADRH 0192                                u512_25 1FCA  
                              u520_25 1CEA                                u424_25 1F46  
                              _PMADRL 0191                                u513_25 1FE0  
                   i1___llmod@counter 0029                      __end_of___lwtoft 1A23  
                              _PMDATH 0194                                u514_25 1FEB  
                              u418_25 1E82                                u522_25 0D51  
                              _PMDATL 0193                                u515_25 1FF6  
                              u427_25 1D57                                u523_25 0DAE  
                              _PMCON1 0195                                _PMCON2 0196  
                              u452_25 1265                                u524_25 0DCB  
                              u381_23 1C0C                                u453_25 12A8  
                              u429_25 1D70                                u518_25 1A2D  
                  __size_of_ReadUSART 000A                                u711_25 001E  
                              u384_25 1B73                                u480_25 1587  
                              u561_25 1B43                                _OSCCON 0099  
                              u378_25 1AC8                                u562_25 1B4A  
                              u491_25 16A5                                u389_25 1A9A  
                              u493_25 16BE                                u486_25 11BF  
                              u487_25 11E2                                u584_25 1E40  
                              u692_25 0589                                u693_25 0599  
                              _SPBRGH 019C                                _TX1STA 019E  
                              _UNLOCK 1938                  __end_of_OddParityMSG 0926  
                          _ResendLast 1900                         i1sprintf@_val 003B  
               _PS_2_Read_Data_Second 01E3                         i1sprintf@flag 0038  
                       i1sprintf@prec 0039                             ??_InitApp 0220  
               ??_ConfigureOscillator 0220                                _Delete 00CE  
                    i1OpenUSART@spbrg 0070                        __CFG_PWRTE$OFF 0000  
                           ??_SetBaud 00B4                         ??_Timer2Reset 0070  
                          _Timer2Init 1AD9                           ?_BlockErase 0070  
                       InitUART@spbrg 023B                           SetBaud@Baud 00AF  
                  __size_of_OpenUSART 0041                                ___ftge 1C8D  
              __end_of_SpaceParityMSG 094A                     ?_Decode_Scan_Code 0070  
                              ___lmul 1B30                        __CFG_STVREN$ON 0000  
                           ??___ftdiv 0232                             ??___lldiv 0228  
                         ?_Clock_TRIS 0070                             ??___ftmul 0242  
                           ??___llmod 0236                           SetBaud@temp 015A  
                 __size_ofi1_InitUART 00EF                     __end_of_PS_2_INIT 1988  
                 __size_ofi1_ReadBaud 0064                    ??_Decode_Scan_Code 0070  
                        ?i1_ReadUSART 0070                             ??_delayUS 0224  
__size_of_Decode_Scan_Code_FunctionE0 0012                    __size_of_Timer2OFF 0003  
                         ?_CloseUSART 0070                ??_Process_PS2_ScanCode 00BC  
               ___ftmul@f3_as_product 0247                     __end_ofi1___lldiv 1F59  
                   __end_ofi1___llmod 1D8E                ?_WriteFlash_Sequential 007A  
                 __size_ofi1_Timer2ON 0003                     __end_ofi1_delayUS 1C25  
                     SetBaud@Baudtemp 0152                          ?i1_OpenUSART 0070  
              __size_of_CheckSum_byte 0031                     ??i1_CheckSum_byte 0073  
                      ?_READ_PS_2_PIN 0070                     __end_of_Data_TRIS 1964  
                           ??_sprintf 0240                        i1ReadBaud@temp 0030  
             i1_PS_2_ENABLE_INTERRUPT 1943               __end_of_UART_send_break 18E0  
                     _ReadFlash_2Byte 0A66                       _ReadFlash_4Byte 1EB6  
             __end_of__initialization 0117                   Timer2Init@prescaler 0224  
                         _NoParityMSG 0926                    __size_of_WriteBaud 0068  
                    ?_BufferShiftBack 0070                            ___ftge@ff1 0220  
                          ___ftge@ff2 0223                     __end_ofi1_sprintf 170A  
             ?_PS_2_DISABLE_INTERRUPT 0070                            ___ftdiv@f1 022F  
                          ___ftdiv@f2 022C                            ___ftdiv@f3 0237  
                          _VoltageMSG 0959                             ?_ISNUMBER 0070  
                  __size_of_baudUSART 0009                            ___ftmul@f1 023C  
                          ___ftmul@f2 023F                        __pcstackCOMMON 0070  
                        __pidataBANK1 06FC                          __pidataBANK4 18D7  
                           ?_UARTchar 0228                         ?_PS2RawToScan 0078  
                  InitUART@baudconfig 023D                           _Init_System 0B8E  
                 __end_of_Timer2Reset 18D1                     __end_of_ReadUSART 1938  
                          ___lwtoft@c 0228                           _ReadVoltage 10D1  
                     ReadVoltage@temp 0253                          WriteBaud@row 00A0  
            __end_ofi1_UARTstringWAIT 1BF2                        _OPTION_REGbits 0095  
                 ReadFlash_4Byte@temp 022E                          ?i1_baudUSART 0070  
                         i1sprintf@ap 003F                           i1sprintf@sp 002A  
                   ??_READ_CONFIG_PIN 0070                         ReadUSART@data 0221  
                         _SinLEDtimer 025A    __size_of_Decode_Scan_Code_Function 0010  
                   __end_of_OpenUSART 1D4B                   __size_of_BlockErase 002B  
                     WriteBaud@Parity 00A6                     Send_PS2@oddparity 0020  
                          __pbssBANK1 00C5                            __pbssBANK3 01E1  
                          __pbssBANK4 0257                   __size_of_Clock_TRIS 000B  
                           ?_InitUART 022E                             ?_ReadBaud 0232  
                   __end_of_Timer2OFF 18CE        __end_of_PS_2_DISABLE_INTERRUPT 1011  
                  ReadVoltage@voltage 0250                               ?_UNLOCK 0070  
                         ?_ResendLast 0070                   __size_of_CloseUSART 000E  
                           ?_Send_PS2 0070                            ??_ISNUMBER 0070  
                _ScanCodeFunctionNoE0 0700              __end_of_InternalADC_Read 1E15  
                         ?_Timer2Init 0070                    _ScanCodeFunctionE0 0866  
                           ?_Timer2ON 0070                         _CheckSum_byte 1B8F  
                          __pmaintext 0A98                          ??i1_UARTchar 007A  
                         _ParityTyped 01EB                         BlockErase@row 0070  
                             ?___ftge 0220                               ?___lmul 0070  
                 i1CheckSum_byte@This 0070                        ??_PS2RawToScan 0020  
                       _Caps_Lock_Key 00CC                         ?_Reverse_Byte 0070  
                          __pintentry 0004                            ??_UARTchar 022A  
                      ___lmul@product 0078                             ?___ftpack 0220  
                     i1InitUART@spbrg 002D                     _PS_2_Buffer_items 00D1  
               i1CheckSum_byte@Parity 0076                             ?___lwtoft 0228  
                   __end_of_WriteBaud 12C5                    i1___llmod@dividend 0024  
                     ??_READ_PS_2_PIN 0070                   BufferShiftBack@size 0071  
                   __end_of_baudUSART 191A               __end_of_ReadFlash_2Byte 0A98  
             __end_of_ReadFlash_4Byte 1F07                               _OSCSTAT 009A  
                 Clock_TRIS@direction 0220             ??i1_PS_2_ENABLE_INTERRUPT 0070  
                             _PPSLOCK 0E0F                          ??i1_InitUART 0025  
                i1ReadFlash_2Byte@row 0070                          ??i1_ReadBaud 0028  
                       ?i1_Clock_TRIS 0070                    __end_ofi1_UARTchar 1070  
                __size_ofi1_Data_TRIS 000A                     i1OpenUSART@config 0072  
                i1ReadFlash_4Byte@row 0075                            ??_InitUART 0233  
                          ??_ReadBaud 0236                 READ_PS_2_PIN@DATA_CLK 0070  
                    ?_UART_send_break 0070                         ?i1_CloseUSART 0070  
               _PS_2_ENABLE_INTERRUPT 1970                       __size_of_UNLOCK 000B  
                        ??i1_Timer2ON 0070                               _InitApp 1A3B  
                          ??_Send_PS2 007A                               _SetBaud 0CF6  
                      InitUART@config 023E                        ?_CheckSum_byte 0220  
                         _Timer2Reset 18CE       i1PS_2_ENABLE_INTERRUPT@DATA_CLK 0070  
                          ??_Timer2ON 0220                        InitUART@parity 0232  
             i1CheckSum_byte@Odd_Even 0072                        ??_Reverse_Byte 0070  
                             _Version 0966                       __size_of___ftge 003C  
                     __size_of___lmul 002F                               ___ftdiv 12C5  
                             ___lldiv 1F59                               ___ftmul 0648  
                             ___llmod 1D8E                    __end_ofi1_InitUART 1614  
                             _delayUS 1C58                    __end_ofi1_ReadBaud 11F9  
                          ??___ftpack 0225                               __ptext1 1C8D  
                             __ptext2 10D1                               __ptext3 1A0E  
                             __ptext4 0648                               __ptext5 12C5  
                             __ptext6 1070                               __ptext7 1DD1  
                             __ptext8 18F9                               __ptext9 197C  
                          ??___lwtoft 022B                  __size_ofi1_ReadUSART 0009  
                        _OddParityMSG 0911                               _dpowers 08D3  
                 __size_of_ResendLast 0008                             _T2CONbits 001C  
             i1CheckSum_byte@ThisTemp 0074                          __size_of_isr 00E2  
            _Process_PS2_ScanCode$850 01DC              _Process_PS2_ScanCode$851 01DD  
            _Process_PS2_ScanCode$852 01DE              _Process_PS2_ScanCode$853 01DF  
         WriteFlash_Sequential@amount 007D           WriteFlash_Sequential@buffer 007C  
                  __end_ofi1_Timer2ON 18D4                 _UART_send_break_timed 1A5F  
                 __size_of_Timer2Init 002B                    _DisableInternalADC 18F9  
         WriteFlash_Sequential@spaces 0068                        ??i1_Clock_TRIS 0070  
                             _sprintf 170A                               clrloop0 18ED  
                   _Caps_Lock_Key_old 00CD                  __size_ofi1_OpenUSART 002C  
                end_of_initialization 0117                         ??_cleanBuffer 0072  
                      ??i1_CloseUSART 0070                 BufferShiftBack@buffer 0076  
                     i1ReadUSART@data 0071                               init_ram 18E6  
                 ?_DisableInternalADC 0070                               initloop 18E7  
                    UARTchar@override 0228          ?_Decode_Scan_Code_FunctionE0 0070  
                     ___lldiv@divisor 0220                       ___lldiv@counter 022D  
                        ??_BlockErase 0072                             _RCSTAbits 019D  
                        ??_Clock_TRIS 0220                          __pstringtext 0700  
               __end_of_EvenParityMSG 0911                       i1_CheckSum_byte 1B5F  
             ??_WriteFlash_Sequential 0020                          ??_CloseUSART 0220  
                ??_DisableInternalADC 0220                             _PS_2_INIT 197C  
                    __CFG_FOSC$INTOSC 0000                             _PS_2_bits 00D2  
                           _TRISAbits 008C                             _TRISCbits 008E  
           __size_of_Decode_Scan_Code 0012                      ?_ReadFlash_2Byte 0220  
                    ?_ReadFlash_4Byte 0225                  __size_ofi1_baudUSART 0006  
                           i1___lldiv 1F07                 __end_of_MarkParityMSG 0959  
                           i1___llmod 1D4B                    __end_of_BlockErase 1AD9  
         __end_of_ConfigureOscillator 19FB                  __end_of_PS2RawToScan 1E65  
                           i1_delayUS 1BF2                ?_PS_2_ENABLE_INTERRUPT 0070  
                  __end_of_Clock_TRIS 1959                             _BaudTyped 00C5  
                           _Data_TRIS 1959                             _CapsCount 01E7  
               i1baudUSART@baudconfig 0070                           ___ftdiv@exp 023A  
                           _Caps_Lock 01E8                       ??_CheckSum_byte 0223  
                         _CCP2CONbits 029A                             _TXSTAbits 019E  
                      __end_of_UNLOCK 1943                    __end_of_CloseUSART 19A3  
                Timer2Init@postscaler 0223                   __end_of_cleanBuffer 1A3B  
       ??_Decode_Scan_Code_FunctionE0 0070                           ___ftmul@exp 0246  
                           i1_sprintf 1614                     __size_of_ISNUMBER 000D  
                      __end_of___ftge 1CC9                 CheckSum_byte@Odd_Even 0222  
                        ?_Init_System 0070                        __end_of___lmul 1B5F  
                     _READ_CONFIG_PIN 18F2                     __size_of_UARTchar 0063  
                        ?_ReadVoltage 024C                            ?_PS_2_INIT 0070  
                           Send_PS2@i 0022         __size_of_Process_PS2_ScanCode 052D  
              ?_UART_send_break_timed 007A                   start_initialization 00E8  
                   ?i1_UARTstringWAIT 0021                             _ReadUSART 192E  
             __size_of_UARTstringWAIT 0033                 CheckSum_byte@ThisTemp 0224  
                         __end_of_isr 00E6                            ?i1___lldiv 0070  
                  ??i1_UARTstringWAIT 0023                            ?i1___llmod 0020  
                       WriteBaud@Baud 00A2                  __end_of_Reverse_Byte 2000  
                          ?i1_delayUS 0070              ??_Decode_Scan_Code_Shift 0070  
                       WriteBaud@temp 006A                             _OpenUSART 1D0A  
                          ?_Data_TRIS 0070                              ??_UNLOCK 0070  
                        ??_ResendLast 007E                       ___llmod@divisor 022E  
                   __size_of_InitUART 00E5                       ___llmod@counter 0237  
                   __size_of_ReadBaud 0064                             _Shift_Key 01EF  
                        ??_Timer2Init 0220                             _Timer2OFF 18CB  
             __end_ofi1_CheckSum_byte 1B8F                     ?_InternalADC_Read 022A  
                   __size_of_Send_PS2 018E                            ?i1_sprintf 002A  
                            ??___ftge 0226                              ??___lmul 0078  
            __size_of_BufferShiftBack 0041                    ??_InternalADC_Read 022C  
                   __size_of_Timer2ON 0003                  __end_ofi1_Clock_TRIS 1924  
                         __pdataBANK1 00E2                           __pdataBANK4 0261  
                __end_ofi1_CloseUSART 1970                         i1ReadBaud@row 0024  
                   __size_of___ftpack 0061                      cleanBuffer@count 0070  
                  __end_of_ResendLast 1908                            ?_ReadUSART 0070  
                           ___latbits 0002                     __size_of___lwtoft 0015  
                       __pcstackBANK0 0020                         __pcstackBANK1 00A0  
                       __pcstackBANK2 0120                         __pcstackBANK3 01A0  
                       __pcstackBANK4 0220                         __pcstackBANK5 02A0  
                           _WriteBaud 125D                   __end_of__stringdata 0A66  
                  i1UARTchar@override 0078                    ReadFlash_2Byte@row 0220  
                  __end_of_Timer2Init 1B04                             _baudUSART 1911  
                  ReadFlash_4Byte@row 0225                           _cleanBuffer 1A23  
                          ?_OpenUSART 0220                           sprintf@_val 0249  
                         sprintf@flag 0246                           sprintf@prec 0247  
                            ?_InitApp 0070                 __end_of_ScanCodeSHIFT 0866  
     Decode_Scan_Code_FunctionE0@Code 0070                              ?_SetBaud 00AF  
             __end_of_READ_CONFIG_PIN 18F9                        ReadBaud@column 0234  
                          ?_Timer2OFF 0070                          ?_Timer2Reset 0070  
                            ?___ftdiv 022C                              ?___lldiv 0220  
                            ?___ftmul 023C                              ?___llmod 022E  
                    __CFG_PPS1WAY$OFF 0000         WriteFlash_Sequential@TempBufH 0023  
       WriteFlash_Sequential@TempBufL 0043                              ?_delayUS 0220  
              WriteFlash_Sequential@i 0069            Decode_Scan_Code_Shift@Code 0070  
                            _BAUD1CON 019F                           ??_PS_2_INIT 0225  
                    i1InitUART@config 0030                              _BAUDMODE 00CB  
               __size_of_PS2RawToScan 0050                      i1InitUART@parity 0024  
                       ??i1_Data_TRIS 0070                      _Decode_Scan_Code 19B3  
                  __end_of_VoltageMSG 0966                            ?_WriteBaud 00A0  
                         ??i1___lldiv 0078                 __end_of_READ_PS_2_PIN 1A0E  
                         ??i1___llmod 0028                              ?_sprintf 0238  
                          ?_baudUSART 0070                           ??i1_delayUS 0074  
                           delayUS@US 0220       __size_of_Decode_Scan_Code_Shift 0012  
          ?_Decode_Scan_Code_Function 0070                           ??_Data_TRIS 0220  
          WriteFlash_Sequential@tempH 0063            WriteFlash_Sequential@tempL 0064  
                           clear_ram0 18EC                              _PIE1bits 0091  
                        cleanBuffer@i 0074                  BufferShiftBack@shift 0070  
                            _ISNUMBER 1988                              _PIR1bits 0011  
                    ?i1_CheckSum_byte 0070                           ??i1_sprintf 0032  
            __size_of_UART_send_break 0005              WriteFlash_Sequential@row 007A  
                            _UARTchar 1132                  i1Data_TRIS@direction 0070  
                        _PS2RawToScan 1E15                         ??i1_ReadUSART 0070  
                            _LControl 00CF                           __stringdata 096E  
                __size_of_Init_System 0168              ?i1_PS_2_ENABLE_INTERRUPT 0070  
      __size_of_WriteFlash_Sequential 00D2                     ??_BufferShiftBack 0072  
               i1ReadFlash_4Byte@temp 0020         __end_of_WriteFlash_Sequential 1440  
               __size_of_Reverse_Byte 0054                        _UARTstringWAIT 1C25  
                         ??_ReadUSART 0220                  __size_of_ReadVoltage 0061  
                            _RControl 01ED                         ??i1_OpenUSART 0072  
            ??_PS_2_DISABLE_INTERRUPT 0070               ??_PS_2_ENABLE_INTERRUPT 0220  
                   ___lmul@multiplier 0070                              SetBaud@i 015E  
                            _InitUART 1440                              _ReadBaud 11F9  
                         ??_OpenUSART 0222                   __end_ofi1_Data_TRIS 192E  
                i1UARTstringWAIT@data 0021                              _ScanCode 0784  
                     OpenUSART@config 0222     __end_of_Decode_Scan_Code_Function 19B3  
                            _Send_PS2 0E72                 __size_ofi1_Clock_TRIS 000A  
                    __size_of_InitApp 0024                           ??_Timer2OFF 0070  
                    ?_READ_CONFIG_PIN 0070                              _Timer2ON 18D4  
                    __size_of_SetBaud 017C                 __size_ofi1_CloseUSART 000C  
                        _Reverse_Byte 1FAC                      __size_of___ftdiv 00A9  
                     cleanBuffer@data 0073                _Decode_Scan_Code_Shift 19D7  
                    __size_of___lldiv 0053                      __size_of___ftmul 00B4  
                    __size_of___llmod 0043                         SetBaud@Parity 00B3  
                            ___ftpack 1070                        _PS_2_ScanCodes 00D6  
             ??_UART_send_break_timed 007C                      __size_of_delayUS 0035  
         __size_of_DisableInternalADC 0007                __end_of_UARTstringWAIT 1C58  
                            ___lwtoft 1A0E                       Send_PS2@command 0021  
                       ??i1_baudUSART 0070                   __end_ofi1_ReadUSART 1911  
               i1Clock_TRIS@direction 0070                           ??_WriteBaud 00A7  
                     Send_PS2@timeout 0023                         ISNUMBER@ascii 0070  
                            __ptext10 1AD9                              __ptext11 18D4  
                            __ptext20 1132                              __ptext12 1959  
                            __ptext21 1B8F                              __ptext13 194E  
                            __ptext30 1995                              __ptext22 11F9  
                            __ptext14 1970                              __ptext31 1A3B  
                            __ptext23 1EB6                              __ptext15 0B8E  
                            __ptext40 18F2                              __ptext32 19E9  
                            __ptext24 0A66                              __ptext16 170A  
                            __ptext41 011B                              __ptext25 1440  
                            __ptext17 1D8E                              __ptext50 1011  
                            __ptext42 1A23                              __ptext34 18D1  
                            __ptext26 1911                              __ptext18 1C25  
                            __ptext51 1195                              __ptext43 1B30  
                            __ptext35 1943                              __ptext27 1F59  
                            __ptext19 1C58                              __ptext60 136E  
                            __ptext52 1E65                              __ptext44 1A5F  
                            __ptext36 18CE                              __ptext28 192E  
                            __ptext61 1A84                              __ptext53 1525  
                            __ptext45 18DB                              __ptext37 18CB  
                            __ptext29 1D0A                              __ptext70 19D7  
                            __ptext62 1AAE                              __ptext54 18E0  
                            __ptext46 0CF6                              __ptext38 1900  
                            __ptext71 19C5                              __ptext63 1938  
                            __ptext55 1F07                              __ptext47 1614  
                            __ptext39 1000                              __ptext72 19A3  
                            __ptext64 0E72                              __ptext56 1908  
                            __ptext48 1D4B                              __ptext73 19B3  
                            __ptext65 1BF2                              __ptext57 1B04  
                            __ptext49 1BC0                              __ptext74 1CC9  
                            __ptext66 1924                              __ptext58 1964  
                            __ptext75 1E15                              __ptext67 191A  
                            __ptext59 125D                              __ptext76 1B5F  
                            __ptext68 19FB                              __ptext77 1FAC  
                            __ptext69 1988         PS_2_ENABLE_INTERRUPT@DATA_CLK 0220  
                   i1_ReadFlash_2Byte 1A84                     i1_ReadFlash_4Byte 1E65  
                         ??_baudUSART 0220                          i1_Clock_TRIS 191A  
                    __size_of_sprintf 00F6                    ?i1_ReadFlash_2Byte 0070  
                  ?i1_ReadFlash_4Byte 0075                   __end_ofi1_OpenUSART 1B30  
                       __size_of_main 00F6                          i1_CloseUSART 1964  
            __size_of_ReadFlash_2Byte 0032              __size_of_ReadFlash_4Byte 0051  
        __end_of_Process_PS2_ScanCode 0648                              delayUS@i 0225  
                            delayUS@j 0229             __size_ofi1_UARTstringWAIT 0032  
                        _pwrLEDtoggle 025C          __size_of_ConfigureOscillator 0012  
               __end_of_CheckSum_byte 1BC0                   ??i1_ReadFlash_2Byte 0073  
                 ??i1_ReadFlash_4Byte 0079                            _RC1STAbits 019D  
                      CheckSum_byte@i 0227                        _Left_Shift_Key 01EA  
                __size_of_Timer2Reset 0003       __end_ofi1_PS_2_ENABLE_INTERRUPT 194E  
                      Timer2Init@time 0222                     ??_UART_send_break 0070  
                     ?_UARTstringWAIT 022F                   CheckSum_byte@Parity 0226  
                          _INTCONbits 000B             __size_of_InternalADC_Read 0044  
                      OpenUSART@spbrg 0220             __end_ofi1_ReadFlash_2Byte 1AAE  
           __end_ofi1_ReadFlash_4Byte 1EB6                          UARTchar@data 022E  
                         i1_Data_TRIS 1924                           pic14e$flags 007E  
     __size_of_PS_2_DISABLE_INTERRUPT 0011                   __end_ofi1_baudUSART 18E6  
                            intlevel1 0000                             sprintf@ap 024D  
                           sprintf@sp 0238                          ?_cleanBuffer 0070  
                    ___lldiv@dividend 0224   __end_of_Decode_Scan_Code_FunctionE0 19D7  
         _Decode_Scan_Code_FunctionE0 19C5                     __CFG_CLKOUTEN$OFF 0000  
                      _BatteryVoltage 0257              __end_of_Decode_Scan_Code 19C5  
                          i1_UARTchar 1011                       _Right_Shift_Key 01EE  
                         i1_ReadUSART 1908                         _EvenParityMSG 08FB  
                            sprintf@c 024F                              sprintf@f 023A  
                    i1ReadBaud@column 0026                      ___lldiv@quotient 0229  
             i1ReadFlash_2Byte@column 0072                  Decode_Scan_Code@Code 0070  
                         i1_OpenUSART 1B04                     Init_System@Parity 02E0  
                  _Left_Shift_Key_old 00D0                            _TX1STAbits 019E  
                          i1_InitUART 1525                     CheckSum_byte@This 0220  
                      i1UARTchar@data 0020                            i1_ReadBaud 1195  
                       _MarkParityMSG 094A           ??_Decode_Scan_Code_Function 0070  
                     Init_System@Baud 02E1                            i1_Timer2ON 18D1  
                     Init_System@temp 02DC                        Init_System@buf 02A0  
                     PS2RawToScan@Raw 0078        PS_2_DISABLE_INTERRUPT@DATA_CLK 0071  
                    PS2RawToScan@temp 007A  
