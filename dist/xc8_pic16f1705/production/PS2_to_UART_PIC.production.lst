

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Mar 11 18:19:09 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F1705
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK4,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    12                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	intentry,global,class=CODE,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	dabs	1,0x7E,2
   101  0000                     	;# 
   102  0001                     	;# 
   103  0002                     	;# 
   104  0003                     	;# 
   105  0004                     	;# 
   106  0005                     	;# 
   107  0006                     	;# 
   108  0007                     	;# 
   109  0008                     	;# 
   110  0009                     	;# 
   111  000A                     	;# 
   112  000B                     	;# 
   113  000C                     	;# 
   114  000E                     	;# 
   115  0011                     	;# 
   116  0012                     	;# 
   117  0013                     	;# 
   118  0015                     	;# 
   119  0016                     	;# 
   120  0016                     	;# 
   121  0017                     	;# 
   122  0018                     	;# 
   123  0019                     	;# 
   124  001A                     	;# 
   125  001B                     	;# 
   126  001C                     	;# 
   127  008C                     	;# 
   128  008E                     	;# 
   129  0091                     	;# 
   130  0092                     	;# 
   131  0093                     	;# 
   132  0095                     	;# 
   133  0096                     	;# 
   134  0097                     	;# 
   135  0098                     	;# 
   136  0099                     	;# 
   137  009A                     	;# 
   138  009B                     	;# 
   139  009B                     	;# 
   140  009C                     	;# 
   141  009D                     	;# 
   142  009E                     	;# 
   143  009F                     	;# 
   144  010C                     	;# 
   145  010E                     	;# 
   146  0111                     	;# 
   147  0112                     	;# 
   148  0113                     	;# 
   149  0114                     	;# 
   150  0115                     	;# 
   151  0116                     	;# 
   152  0117                     	;# 
   153  0118                     	;# 
   154  0119                     	;# 
   155  011C                     	;# 
   156  018C                     	;# 
   157  018E                     	;# 
   158  0191                     	;# 
   159  0191                     	;# 
   160  0192                     	;# 
   161  0193                     	;# 
   162  0193                     	;# 
   163  0194                     	;# 
   164  0195                     	;# 
   165  0196                     	;# 
   166  0197                     	;# 
   167  0199                     	;# 
   168  0199                     	;# 
   169  0199                     	;# 
   170  019A                     	;# 
   171  019A                     	;# 
   172  019A                     	;# 
   173  019B                     	;# 
   174  019B                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019C                     	;# 
   179  019C                     	;# 
   180  019C                     	;# 
   181  019D                     	;# 
   182  019D                     	;# 
   183  019D                     	;# 
   184  019E                     	;# 
   185  019E                     	;# 
   186  019E                     	;# 
   187  019F                     	;# 
   188  019F                     	;# 
   189  019F                     	;# 
   190  019F                     	;# 
   191  019F                     	;# 
   192  020C                     	;# 
   193  020E                     	;# 
   194  0211                     	;# 
   195  0211                     	;# 
   196  0212                     	;# 
   197  0212                     	;# 
   198  0213                     	;# 
   199  0213                     	;# 
   200  0214                     	;# 
   201  0214                     	;# 
   202  0215                     	;# 
   203  0215                     	;# 
   204  0215                     	;# 
   205  0215                     	;# 
   206  0216                     	;# 
   207  0216                     	;# 
   208  0217                     	;# 
   209  0217                     	;# 
   210  028C                     	;# 
   211  028E                     	;# 
   212  0291                     	;# 
   213  0291                     	;# 
   214  0292                     	;# 
   215  0293                     	;# 
   216  0293                     	;# 
   217  0298                     	;# 
   218  0298                     	;# 
   219  0299                     	;# 
   220  029A                     	;# 
   221  029A                     	;# 
   222  029E                     	;# 
   223  030C                     	;# 
   224  030E                     	;# 
   225  038C                     	;# 
   226  038E                     	;# 
   227  0391                     	;# 
   228  0392                     	;# 
   229  0393                     	;# 
   230  0397                     	;# 
   231  0398                     	;# 
   232  0399                     	;# 
   233  0415                     	;# 
   234  0416                     	;# 
   235  0417                     	;# 
   236  041C                     	;# 
   237  041D                     	;# 
   238  041E                     	;# 
   239  0511                     	;# 
   240  0515                     	;# 
   241  0617                     	;# 
   242  0618                     	;# 
   243  0619                     	;# 
   244  0619                     	;# 
   245  061A                     	;# 
   246  061B                     	;# 
   247  061C                     	;# 
   248  061C                     	;# 
   249  0691                     	;# 
   250  0692                     	;# 
   251  0693                     	;# 
   252  0694                     	;# 
   253  0695                     	;# 
   254  0696                     	;# 
   255  0697                     	;# 
   256  0698                     	;# 
   257  0699                     	;# 
   258  069A                     	;# 
   259  069B                     	;# 
   260  069C                     	;# 
   261  069D                     	;# 
   262  069E                     	;# 
   263  069F                     	;# 
   264  0E0F                     	;# 
   265  0E10                     	;# 
   266  0E11                     	;# 
   267  0E12                     	;# 
   268  0E13                     	;# 
   269  0E14                     	;# 
   270  0E15                     	;# 
   271  0E17                     	;# 
   272  0E20                     	;# 
   273  0E21                     	;# 
   274  0E22                     	;# 
   275  0E24                     	;# 
   276  0E25                     	;# 
   277  0E28                     	;# 
   278  0E29                     	;# 
   279  0E2A                     	;# 
   280  0E2B                     	;# 
   281  0E90                     	;# 
   282  0E91                     	;# 
   283  0E92                     	;# 
   284  0E94                     	;# 
   285  0E95                     	;# 
   286  0EA0                     	;# 
   287  0EA1                     	;# 
   288  0EA2                     	;# 
   289  0EA3                     	;# 
   290  0EA4                     	;# 
   291  0EA5                     	;# 
   292  0F0F                     	;# 
   293  0F10                     	;# 
   294  0F11                     	;# 
   295  0F12                     	;# 
   296  0F13                     	;# 
   297  0F14                     	;# 
   298  0F15                     	;# 
   299  0F16                     	;# 
   300  0F17                     	;# 
   301  0F18                     	;# 
   302  0F19                     	;# 
   303  0F1A                     	;# 
   304  0F1B                     	;# 
   305  0F1C                     	;# 
   306  0F1D                     	;# 
   307  0F1E                     	;# 
   308  0F1F                     	;# 
   309  0F20                     	;# 
   310  0F21                     	;# 
   311  0F22                     	;# 
   312  0F23                     	;# 
   313  0F24                     	;# 
   314  0F25                     	;# 
   315  0F26                     	;# 
   316  0F27                     	;# 
   317  0F28                     	;# 
   318  0F29                     	;# 
   319  0F2A                     	;# 
   320  0F2B                     	;# 
   321  0F2C                     	;# 
   322  0F2D                     	;# 
   323  0F9E                     	;# 
   324  0FE4                     	;# 
   325  0FE5                     	;# 
   326  0FE6                     	;# 
   327  0FE7                     	;# 
   328  0FE8                     	;# 
   329  0FE9                     	;# 
   330  0FEA                     	;# 
   331  0FEB                     	;# 
   332  0FED                     	;# 
   333  0FEE                     	;# 
   334  0FEF                     	;# 
   335  0000                     	;# 
   336  0001                     	;# 
   337  0002                     	;# 
   338  0003                     	;# 
   339  0004                     	;# 
   340  0005                     	;# 
   341  0006                     	;# 
   342  0007                     	;# 
   343  0008                     	;# 
   344  0009                     	;# 
   345  000A                     	;# 
   346  000B                     	;# 
   347  000C                     	;# 
   348  000E                     	;# 
   349  0011                     	;# 
   350  0012                     	;# 
   351  0013                     	;# 
   352  0015                     	;# 
   353  0016                     	;# 
   354  0016                     	;# 
   355  0017                     	;# 
   356  0018                     	;# 
   357  0019                     	;# 
   358  001A                     	;# 
   359  001B                     	;# 
   360  001C                     	;# 
   361  008C                     	;# 
   362  008E                     	;# 
   363  0091                     	;# 
   364  0092                     	;# 
   365  0093                     	;# 
   366  0095                     	;# 
   367  0096                     	;# 
   368  0097                     	;# 
   369  0098                     	;# 
   370  0099                     	;# 
   371  009A                     	;# 
   372  009B                     	;# 
   373  009B                     	;# 
   374  009C                     	;# 
   375  009D                     	;# 
   376  009E                     	;# 
   377  009F                     	;# 
   378  010C                     	;# 
   379  010E                     	;# 
   380  0111                     	;# 
   381  0112                     	;# 
   382  0113                     	;# 
   383  0114                     	;# 
   384  0115                     	;# 
   385  0116                     	;# 
   386  0117                     	;# 
   387  0118                     	;# 
   388  0119                     	;# 
   389  011C                     	;# 
   390  018C                     	;# 
   391  018E                     	;# 
   392  0191                     	;# 
   393  0191                     	;# 
   394  0192                     	;# 
   395  0193                     	;# 
   396  0193                     	;# 
   397  0194                     	;# 
   398  0195                     	;# 
   399  0196                     	;# 
   400  0197                     	;# 
   401  0199                     	;# 
   402  0199                     	;# 
   403  0199                     	;# 
   404  019A                     	;# 
   405  019A                     	;# 
   406  019A                     	;# 
   407  019B                     	;# 
   408  019B                     	;# 
   409  019B                     	;# 
   410  019B                     	;# 
   411  019B                     	;# 
   412  019C                     	;# 
   413  019C                     	;# 
   414  019C                     	;# 
   415  019D                     	;# 
   416  019D                     	;# 
   417  019D                     	;# 
   418  019E                     	;# 
   419  019E                     	;# 
   420  019E                     	;# 
   421  019F                     	;# 
   422  019F                     	;# 
   423  019F                     	;# 
   424  019F                     	;# 
   425  019F                     	;# 
   426  020C                     	;# 
   427  020E                     	;# 
   428  0211                     	;# 
   429  0211                     	;# 
   430  0212                     	;# 
   431  0212                     	;# 
   432  0213                     	;# 
   433  0213                     	;# 
   434  0214                     	;# 
   435  0214                     	;# 
   436  0215                     	;# 
   437  0215                     	;# 
   438  0215                     	;# 
   439  0215                     	;# 
   440  0216                     	;# 
   441  0216                     	;# 
   442  0217                     	;# 
   443  0217                     	;# 
   444  028C                     	;# 
   445  028E                     	;# 
   446  0291                     	;# 
   447  0291                     	;# 
   448  0292                     	;# 
   449  0293                     	;# 
   450  0293                     	;# 
   451  0298                     	;# 
   452  0298                     	;# 
   453  0299                     	;# 
   454  029A                     	;# 
   455  029A                     	;# 
   456  029E                     	;# 
   457  030C                     	;# 
   458  030E                     	;# 
   459  038C                     	;# 
   460  038E                     	;# 
   461  0391                     	;# 
   462  0392                     	;# 
   463  0393                     	;# 
   464  0397                     	;# 
   465  0398                     	;# 
   466  0399                     	;# 
   467  0415                     	;# 
   468  0416                     	;# 
   469  0417                     	;# 
   470  041C                     	;# 
   471  041D                     	;# 
   472  041E                     	;# 
   473  0511                     	;# 
   474  0515                     	;# 
   475  0617                     	;# 
   476  0618                     	;# 
   477  0619                     	;# 
   478  0619                     	;# 
   479  061A                     	;# 
   480  061B                     	;# 
   481  061C                     	;# 
   482  061C                     	;# 
   483  0691                     	;# 
   484  0692                     	;# 
   485  0693                     	;# 
   486  0694                     	;# 
   487  0695                     	;# 
   488  0696                     	;# 
   489  0697                     	;# 
   490  0698                     	;# 
   491  0699                     	;# 
   492  069A                     	;# 
   493  069B                     	;# 
   494  069C                     	;# 
   495  069D                     	;# 
   496  069E                     	;# 
   497  069F                     	;# 
   498  0E0F                     	;# 
   499  0E10                     	;# 
   500  0E11                     	;# 
   501  0E12                     	;# 
   502  0E13                     	;# 
   503  0E14                     	;# 
   504  0E15                     	;# 
   505  0E17                     	;# 
   506  0E20                     	;# 
   507  0E21                     	;# 
   508  0E22                     	;# 
   509  0E24                     	;# 
   510  0E25                     	;# 
   511  0E28                     	;# 
   512  0E29                     	;# 
   513  0E2A                     	;# 
   514  0E2B                     	;# 
   515  0E90                     	;# 
   516  0E91                     	;# 
   517  0E92                     	;# 
   518  0E94                     	;# 
   519  0E95                     	;# 
   520  0EA0                     	;# 
   521  0EA1                     	;# 
   522  0EA2                     	;# 
   523  0EA3                     	;# 
   524  0EA4                     	;# 
   525  0EA5                     	;# 
   526  0F0F                     	;# 
   527  0F10                     	;# 
   528  0F11                     	;# 
   529  0F12                     	;# 
   530  0F13                     	;# 
   531  0F14                     	;# 
   532  0F15                     	;# 
   533  0F16                     	;# 
   534  0F17                     	;# 
   535  0F18                     	;# 
   536  0F19                     	;# 
   537  0F1A                     	;# 
   538  0F1B                     	;# 
   539  0F1C                     	;# 
   540  0F1D                     	;# 
   541  0F1E                     	;# 
   542  0F1F                     	;# 
   543  0F20                     	;# 
   544  0F21                     	;# 
   545  0F22                     	;# 
   546  0F23                     	;# 
   547  0F24                     	;# 
   548  0F25                     	;# 
   549  0F26                     	;# 
   550  0F27                     	;# 
   551  0F28                     	;# 
   552  0F29                     	;# 
   553  0F2A                     	;# 
   554  0F2B                     	;# 
   555  0F2C                     	;# 
   556  0F2D                     	;# 
   557  0F9E                     	;# 
   558  0FE4                     	;# 
   559  0FE5                     	;# 
   560  0FE6                     	;# 
   561  0FE7                     	;# 
   562  0FE8                     	;# 
   563  0FE9                     	;# 
   564  0FEA                     	;# 
   565  0FEB                     	;# 
   566  0FED                     	;# 
   567  0FEE                     	;# 
   568  0FEF                     	;# 
   569  0000                     	;# 
   570  0001                     	;# 
   571  0002                     	;# 
   572  0003                     	;# 
   573  0004                     	;# 
   574  0005                     	;# 
   575  0006                     	;# 
   576  0007                     	;# 
   577  0008                     	;# 
   578  0009                     	;# 
   579  000A                     	;# 
   580  000B                     	;# 
   581  000C                     	;# 
   582  000E                     	;# 
   583  0011                     	;# 
   584  0012                     	;# 
   585  0013                     	;# 
   586  0015                     	;# 
   587  0016                     	;# 
   588  0016                     	;# 
   589  0017                     	;# 
   590  0018                     	;# 
   591  0019                     	;# 
   592  001A                     	;# 
   593  001B                     	;# 
   594  001C                     	;# 
   595  008C                     	;# 
   596  008E                     	;# 
   597  0091                     	;# 
   598  0092                     	;# 
   599  0093                     	;# 
   600  0095                     	;# 
   601  0096                     	;# 
   602  0097                     	;# 
   603  0098                     	;# 
   604  0099                     	;# 
   605  009A                     	;# 
   606  009B                     	;# 
   607  009B                     	;# 
   608  009C                     	;# 
   609  009D                     	;# 
   610  009E                     	;# 
   611  009F                     	;# 
   612  010C                     	;# 
   613  010E                     	;# 
   614  0111                     	;# 
   615  0112                     	;# 
   616  0113                     	;# 
   617  0114                     	;# 
   618  0115                     	;# 
   619  0116                     	;# 
   620  0117                     	;# 
   621  0118                     	;# 
   622  0119                     	;# 
   623  011C                     	;# 
   624  018C                     	;# 
   625  018E                     	;# 
   626  0191                     	;# 
   627  0191                     	;# 
   628  0192                     	;# 
   629  0193                     	;# 
   630  0193                     	;# 
   631  0194                     	;# 
   632  0195                     	;# 
   633  0196                     	;# 
   634  0197                     	;# 
   635  0199                     	;# 
   636  0199                     	;# 
   637  0199                     	;# 
   638  019A                     	;# 
   639  019A                     	;# 
   640  019A                     	;# 
   641  019B                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019C                     	;# 
   647  019C                     	;# 
   648  019C                     	;# 
   649  019D                     	;# 
   650  019D                     	;# 
   651  019D                     	;# 
   652  019E                     	;# 
   653  019E                     	;# 
   654  019E                     	;# 
   655  019F                     	;# 
   656  019F                     	;# 
   657  019F                     	;# 
   658  019F                     	;# 
   659  019F                     	;# 
   660  020C                     	;# 
   661  020E                     	;# 
   662  0211                     	;# 
   663  0211                     	;# 
   664  0212                     	;# 
   665  0212                     	;# 
   666  0213                     	;# 
   667  0213                     	;# 
   668  0214                     	;# 
   669  0214                     	;# 
   670  0215                     	;# 
   671  0215                     	;# 
   672  0215                     	;# 
   673  0215                     	;# 
   674  0216                     	;# 
   675  0216                     	;# 
   676  0217                     	;# 
   677  0217                     	;# 
   678  028C                     	;# 
   679  028E                     	;# 
   680  0291                     	;# 
   681  0291                     	;# 
   682  0292                     	;# 
   683  0293                     	;# 
   684  0293                     	;# 
   685  0298                     	;# 
   686  0298                     	;# 
   687  0299                     	;# 
   688  029A                     	;# 
   689  029A                     	;# 
   690  029E                     	;# 
   691  030C                     	;# 
   692  030E                     	;# 
   693  038C                     	;# 
   694  038E                     	;# 
   695  0391                     	;# 
   696  0392                     	;# 
   697  0393                     	;# 
   698  0397                     	;# 
   699  0398                     	;# 
   700  0399                     	;# 
   701  0415                     	;# 
   702  0416                     	;# 
   703  0417                     	;# 
   704  041C                     	;# 
   705  041D                     	;# 
   706  041E                     	;# 
   707  0511                     	;# 
   708  0515                     	;# 
   709  0617                     	;# 
   710  0618                     	;# 
   711  0619                     	;# 
   712  0619                     	;# 
   713  061A                     	;# 
   714  061B                     	;# 
   715  061C                     	;# 
   716  061C                     	;# 
   717  0691                     	;# 
   718  0692                     	;# 
   719  0693                     	;# 
   720  0694                     	;# 
   721  0695                     	;# 
   722  0696                     	;# 
   723  0697                     	;# 
   724  0698                     	;# 
   725  0699                     	;# 
   726  069A                     	;# 
   727  069B                     	;# 
   728  069C                     	;# 
   729  069D                     	;# 
   730  069E                     	;# 
   731  069F                     	;# 
   732  0E0F                     	;# 
   733  0E10                     	;# 
   734  0E11                     	;# 
   735  0E12                     	;# 
   736  0E13                     	;# 
   737  0E14                     	;# 
   738  0E15                     	;# 
   739  0E17                     	;# 
   740  0E20                     	;# 
   741  0E21                     	;# 
   742  0E22                     	;# 
   743  0E24                     	;# 
   744  0E25                     	;# 
   745  0E28                     	;# 
   746  0E29                     	;# 
   747  0E2A                     	;# 
   748  0E2B                     	;# 
   749  0E90                     	;# 
   750  0E91                     	;# 
   751  0E92                     	;# 
   752  0E94                     	;# 
   753  0E95                     	;# 
   754  0EA0                     	;# 
   755  0EA1                     	;# 
   756  0EA2                     	;# 
   757  0EA3                     	;# 
   758  0EA4                     	;# 
   759  0EA5                     	;# 
   760  0F0F                     	;# 
   761  0F10                     	;# 
   762  0F11                     	;# 
   763  0F12                     	;# 
   764  0F13                     	;# 
   765  0F14                     	;# 
   766  0F15                     	;# 
   767  0F16                     	;# 
   768  0F17                     	;# 
   769  0F18                     	;# 
   770  0F19                     	;# 
   771  0F1A                     	;# 
   772  0F1B                     	;# 
   773  0F1C                     	;# 
   774  0F1D                     	;# 
   775  0F1E                     	;# 
   776  0F1F                     	;# 
   777  0F20                     	;# 
   778  0F21                     	;# 
   779  0F22                     	;# 
   780  0F23                     	;# 
   781  0F24                     	;# 
   782  0F25                     	;# 
   783  0F26                     	;# 
   784  0F27                     	;# 
   785  0F28                     	;# 
   786  0F29                     	;# 
   787  0F2A                     	;# 
   788  0F2B                     	;# 
   789  0F2C                     	;# 
   790  0F2D                     	;# 
   791  0F9E                     	;# 
   792  0FE4                     	;# 
   793  0FE5                     	;# 
   794  0FE6                     	;# 
   795  0FE7                     	;# 
   796  0FE8                     	;# 
   797  0FE9                     	;# 
   798  0FEA                     	;# 
   799  0FEB                     	;# 
   800  0FED                     	;# 
   801  0FEE                     	;# 
   802  0FEF                     	;# 
   803  0000                     	;# 
   804  0001                     	;# 
   805  0002                     	;# 
   806  0003                     	;# 
   807  0004                     	;# 
   808  0005                     	;# 
   809  0006                     	;# 
   810  0007                     	;# 
   811  0008                     	;# 
   812  0009                     	;# 
   813  000A                     	;# 
   814  000B                     	;# 
   815  000C                     	;# 
   816  000E                     	;# 
   817  0011                     	;# 
   818  0012                     	;# 
   819  0013                     	;# 
   820  0015                     	;# 
   821  0016                     	;# 
   822  0016                     	;# 
   823  0017                     	;# 
   824  0018                     	;# 
   825  0019                     	;# 
   826  001A                     	;# 
   827  001B                     	;# 
   828  001C                     	;# 
   829  008C                     	;# 
   830  008E                     	;# 
   831  0091                     	;# 
   832  0092                     	;# 
   833  0093                     	;# 
   834  0095                     	;# 
   835  0096                     	;# 
   836  0097                     	;# 
   837  0098                     	;# 
   838  0099                     	;# 
   839  009A                     	;# 
   840  009B                     	;# 
   841  009B                     	;# 
   842  009C                     	;# 
   843  009D                     	;# 
   844  009E                     	;# 
   845  009F                     	;# 
   846  010C                     	;# 
   847  010E                     	;# 
   848  0111                     	;# 
   849  0112                     	;# 
   850  0113                     	;# 
   851  0114                     	;# 
   852  0115                     	;# 
   853  0116                     	;# 
   854  0117                     	;# 
   855  0118                     	;# 
   856  0119                     	;# 
   857  011C                     	;# 
   858  018C                     	;# 
   859  018E                     	;# 
   860  0191                     	;# 
   861  0191                     	;# 
   862  0192                     	;# 
   863  0193                     	;# 
   864  0193                     	;# 
   865  0194                     	;# 
   866  0195                     	;# 
   867  0196                     	;# 
   868  0197                     	;# 
   869  0199                     	;# 
   870  0199                     	;# 
   871  0199                     	;# 
   872  019A                     	;# 
   873  019A                     	;# 
   874  019A                     	;# 
   875  019B                     	;# 
   876  019B                     	;# 
   877  019B                     	;# 
   878  019B                     	;# 
   879  019B                     	;# 
   880  019C                     	;# 
   881  019C                     	;# 
   882  019C                     	;# 
   883  019D                     	;# 
   884  019D                     	;# 
   885  019D                     	;# 
   886  019E                     	;# 
   887  019E                     	;# 
   888  019E                     	;# 
   889  019F                     	;# 
   890  019F                     	;# 
   891  019F                     	;# 
   892  019F                     	;# 
   893  019F                     	;# 
   894  020C                     	;# 
   895  020E                     	;# 
   896  0211                     	;# 
   897  0211                     	;# 
   898  0212                     	;# 
   899  0212                     	;# 
   900  0213                     	;# 
   901  0213                     	;# 
   902  0214                     	;# 
   903  0214                     	;# 
   904  0215                     	;# 
   905  0215                     	;# 
   906  0215                     	;# 
   907  0215                     	;# 
   908  0216                     	;# 
   909  0216                     	;# 
   910  0217                     	;# 
   911  0217                     	;# 
   912  028C                     	;# 
   913  028E                     	;# 
   914  0291                     	;# 
   915  0291                     	;# 
   916  0292                     	;# 
   917  0293                     	;# 
   918  0293                     	;# 
   919  0298                     	;# 
   920  0298                     	;# 
   921  0299                     	;# 
   922  029A                     	;# 
   923  029A                     	;# 
   924  029E                     	;# 
   925  030C                     	;# 
   926  030E                     	;# 
   927  038C                     	;# 
   928  038E                     	;# 
   929  0391                     	;# 
   930  0392                     	;# 
   931  0393                     	;# 
   932  0397                     	;# 
   933  0398                     	;# 
   934  0399                     	;# 
   935  0415                     	;# 
   936  0416                     	;# 
   937  0417                     	;# 
   938  041C                     	;# 
   939  041D                     	;# 
   940  041E                     	;# 
   941  0511                     	;# 
   942  0515                     	;# 
   943  0617                     	;# 
   944  0618                     	;# 
   945  0619                     	;# 
   946  0619                     	;# 
   947  061A                     	;# 
   948  061B                     	;# 
   949  061C                     	;# 
   950  061C                     	;# 
   951  0691                     	;# 
   952  0692                     	;# 
   953  0693                     	;# 
   954  0694                     	;# 
   955  0695                     	;# 
   956  0696                     	;# 
   957  0697                     	;# 
   958  0698                     	;# 
   959  0699                     	;# 
   960  069A                     	;# 
   961  069B                     	;# 
   962  069C                     	;# 
   963  069D                     	;# 
   964  069E                     	;# 
   965  069F                     	;# 
   966  0E0F                     	;# 
   967  0E10                     	;# 
   968  0E11                     	;# 
   969  0E12                     	;# 
   970  0E13                     	;# 
   971  0E14                     	;# 
   972  0E15                     	;# 
   973  0E17                     	;# 
   974  0E20                     	;# 
   975  0E21                     	;# 
   976  0E22                     	;# 
   977  0E24                     	;# 
   978  0E25                     	;# 
   979  0E28                     	;# 
   980  0E29                     	;# 
   981  0E2A                     	;# 
   982  0E2B                     	;# 
   983  0E90                     	;# 
   984  0E91                     	;# 
   985  0E92                     	;# 
   986  0E94                     	;# 
   987  0E95                     	;# 
   988  0EA0                     	;# 
   989  0EA1                     	;# 
   990  0EA2                     	;# 
   991  0EA3                     	;# 
   992  0EA4                     	;# 
   993  0EA5                     	;# 
   994  0F0F                     	;# 
   995  0F10                     	;# 
   996  0F11                     	;# 
   997  0F12                     	;# 
   998  0F13                     	;# 
   999  0F14                     	;# 
  1000  0F15                     	;# 
  1001  0F16                     	;# 
  1002  0F17                     	;# 
  1003  0F18                     	;# 
  1004  0F19                     	;# 
  1005  0F1A                     	;# 
  1006  0F1B                     	;# 
  1007  0F1C                     	;# 
  1008  0F1D                     	;# 
  1009  0F1E                     	;# 
  1010  0F1F                     	;# 
  1011  0F20                     	;# 
  1012  0F21                     	;# 
  1013  0F22                     	;# 
  1014  0F23                     	;# 
  1015  0F24                     	;# 
  1016  0F25                     	;# 
  1017  0F26                     	;# 
  1018  0F27                     	;# 
  1019  0F28                     	;# 
  1020  0F29                     	;# 
  1021  0F2A                     	;# 
  1022  0F2B                     	;# 
  1023  0F2C                     	;# 
  1024  0F2D                     	;# 
  1025  0F9E                     	;# 
  1026  0FE4                     	;# 
  1027  0FE5                     	;# 
  1028  0FE6                     	;# 
  1029  0FE7                     	;# 
  1030  0FE8                     	;# 
  1031  0FE9                     	;# 
  1032  0FEA                     	;# 
  1033  0FEB                     	;# 
  1034  0FED                     	;# 
  1035  0FEE                     	;# 
  1036  0FEF                     	;# 
  1037  0000                     	;# 
  1038  0001                     	;# 
  1039  0002                     	;# 
  1040  0003                     	;# 
  1041  0004                     	;# 
  1042  0005                     	;# 
  1043  0006                     	;# 
  1044  0007                     	;# 
  1045  0008                     	;# 
  1046  0009                     	;# 
  1047  000A                     	;# 
  1048  000B                     	;# 
  1049  000C                     	;# 
  1050  000E                     	;# 
  1051  0011                     	;# 
  1052  0012                     	;# 
  1053  0013                     	;# 
  1054  0015                     	;# 
  1055  0016                     	;# 
  1056  0016                     	;# 
  1057  0017                     	;# 
  1058  0018                     	;# 
  1059  0019                     	;# 
  1060  001A                     	;# 
  1061  001B                     	;# 
  1062  001C                     	;# 
  1063  008C                     	;# 
  1064  008E                     	;# 
  1065  0091                     	;# 
  1066  0092                     	;# 
  1067  0093                     	;# 
  1068  0095                     	;# 
  1069  0096                     	;# 
  1070  0097                     	;# 
  1071  0098                     	;# 
  1072  0099                     	;# 
  1073  009A                     	;# 
  1074  009B                     	;# 
  1075  009B                     	;# 
  1076  009C                     	;# 
  1077  009D                     	;# 
  1078  009E                     	;# 
  1079  009F                     	;# 
  1080  010C                     	;# 
  1081  010E                     	;# 
  1082  0111                     	;# 
  1083  0112                     	;# 
  1084  0113                     	;# 
  1085  0114                     	;# 
  1086  0115                     	;# 
  1087  0116                     	;# 
  1088  0117                     	;# 
  1089  0118                     	;# 
  1090  0119                     	;# 
  1091  011C                     	;# 
  1092  018C                     	;# 
  1093  018E                     	;# 
  1094  0191                     	;# 
  1095  0191                     	;# 
  1096  0192                     	;# 
  1097  0193                     	;# 
  1098  0193                     	;# 
  1099  0194                     	;# 
  1100  0195                     	;# 
  1101  0196                     	;# 
  1102  0197                     	;# 
  1103  0199                     	;# 
  1104  0199                     	;# 
  1105  0199                     	;# 
  1106  019A                     	;# 
  1107  019A                     	;# 
  1108  019A                     	;# 
  1109  019B                     	;# 
  1110  019B                     	;# 
  1111  019B                     	;# 
  1112  019B                     	;# 
  1113  019B                     	;# 
  1114  019C                     	;# 
  1115  019C                     	;# 
  1116  019C                     	;# 
  1117  019D                     	;# 
  1118  019D                     	;# 
  1119  019D                     	;# 
  1120  019E                     	;# 
  1121  019E                     	;# 
  1122  019E                     	;# 
  1123  019F                     	;# 
  1124  019F                     	;# 
  1125  019F                     	;# 
  1126  019F                     	;# 
  1127  019F                     	;# 
  1128  020C                     	;# 
  1129  020E                     	;# 
  1130  0211                     	;# 
  1131  0211                     	;# 
  1132  0212                     	;# 
  1133  0212                     	;# 
  1134  0213                     	;# 
  1135  0213                     	;# 
  1136  0214                     	;# 
  1137  0214                     	;# 
  1138  0215                     	;# 
  1139  0215                     	;# 
  1140  0215                     	;# 
  1141  0215                     	;# 
  1142  0216                     	;# 
  1143  0216                     	;# 
  1144  0217                     	;# 
  1145  0217                     	;# 
  1146  028C                     	;# 
  1147  028E                     	;# 
  1148  0291                     	;# 
  1149  0291                     	;# 
  1150  0292                     	;# 
  1151  0293                     	;# 
  1152  0293                     	;# 
  1153  0298                     	;# 
  1154  0298                     	;# 
  1155  0299                     	;# 
  1156  029A                     	;# 
  1157  029A                     	;# 
  1158  029E                     	;# 
  1159  030C                     	;# 
  1160  030E                     	;# 
  1161  038C                     	;# 
  1162  038E                     	;# 
  1163  0391                     	;# 
  1164  0392                     	;# 
  1165  0393                     	;# 
  1166  0397                     	;# 
  1167  0398                     	;# 
  1168  0399                     	;# 
  1169  0415                     	;# 
  1170  0416                     	;# 
  1171  0417                     	;# 
  1172  041C                     	;# 
  1173  041D                     	;# 
  1174  041E                     	;# 
  1175  0511                     	;# 
  1176  0515                     	;# 
  1177  0617                     	;# 
  1178  0618                     	;# 
  1179  0619                     	;# 
  1180  0619                     	;# 
  1181  061A                     	;# 
  1182  061B                     	;# 
  1183  061C                     	;# 
  1184  061C                     	;# 
  1185  0691                     	;# 
  1186  0692                     	;# 
  1187  0693                     	;# 
  1188  0694                     	;# 
  1189  0695                     	;# 
  1190  0696                     	;# 
  1191  0697                     	;# 
  1192  0698                     	;# 
  1193  0699                     	;# 
  1194  069A                     	;# 
  1195  069B                     	;# 
  1196  069C                     	;# 
  1197  069D                     	;# 
  1198  069E                     	;# 
  1199  069F                     	;# 
  1200  0E0F                     	;# 
  1201  0E10                     	;# 
  1202  0E11                     	;# 
  1203  0E12                     	;# 
  1204  0E13                     	;# 
  1205  0E14                     	;# 
  1206  0E15                     	;# 
  1207  0E17                     	;# 
  1208  0E20                     	;# 
  1209  0E21                     	;# 
  1210  0E22                     	;# 
  1211  0E24                     	;# 
  1212  0E25                     	;# 
  1213  0E28                     	;# 
  1214  0E29                     	;# 
  1215  0E2A                     	;# 
  1216  0E2B                     	;# 
  1217  0E90                     	;# 
  1218  0E91                     	;# 
  1219  0E92                     	;# 
  1220  0E94                     	;# 
  1221  0E95                     	;# 
  1222  0EA0                     	;# 
  1223  0EA1                     	;# 
  1224  0EA2                     	;# 
  1225  0EA3                     	;# 
  1226  0EA4                     	;# 
  1227  0EA5                     	;# 
  1228  0F0F                     	;# 
  1229  0F10                     	;# 
  1230  0F11                     	;# 
  1231  0F12                     	;# 
  1232  0F13                     	;# 
  1233  0F14                     	;# 
  1234  0F15                     	;# 
  1235  0F16                     	;# 
  1236  0F17                     	;# 
  1237  0F18                     	;# 
  1238  0F19                     	;# 
  1239  0F1A                     	;# 
  1240  0F1B                     	;# 
  1241  0F1C                     	;# 
  1242  0F1D                     	;# 
  1243  0F1E                     	;# 
  1244  0F1F                     	;# 
  1245  0F20                     	;# 
  1246  0F21                     	;# 
  1247  0F22                     	;# 
  1248  0F23                     	;# 
  1249  0F24                     	;# 
  1250  0F25                     	;# 
  1251  0F26                     	;# 
  1252  0F27                     	;# 
  1253  0F28                     	;# 
  1254  0F29                     	;# 
  1255  0F2A                     	;# 
  1256  0F2B                     	;# 
  1257  0F2C                     	;# 
  1258  0F2D                     	;# 
  1259  0F9E                     	;# 
  1260  0FE4                     	;# 
  1261  0FE5                     	;# 
  1262  0FE6                     	;# 
  1263  0FE7                     	;# 
  1264  0FE8                     	;# 
  1265  0FE9                     	;# 
  1266  0FEA                     	;# 
  1267  0FEB                     	;# 
  1268  0FED                     	;# 
  1269  0FEE                     	;# 
  1270  0FEF                     	;# 
  1271  0000                     	;# 
  1272  0001                     	;# 
  1273  0002                     	;# 
  1274  0003                     	;# 
  1275  0004                     	;# 
  1276  0005                     	;# 
  1277  0006                     	;# 
  1278  0007                     	;# 
  1279  0008                     	;# 
  1280  0009                     	;# 
  1281  000A                     	;# 
  1282  000B                     	;# 
  1283  000C                     	;# 
  1284  000E                     	;# 
  1285  0011                     	;# 
  1286  0012                     	;# 
  1287  0013                     	;# 
  1288  0015                     	;# 
  1289  0016                     	;# 
  1290  0016                     	;# 
  1291  0017                     	;# 
  1292  0018                     	;# 
  1293  0019                     	;# 
  1294  001A                     	;# 
  1295  001B                     	;# 
  1296  001C                     	;# 
  1297  008C                     	;# 
  1298  008E                     	;# 
  1299  0091                     	;# 
  1300  0092                     	;# 
  1301  0093                     	;# 
  1302  0095                     	;# 
  1303  0096                     	;# 
  1304  0097                     	;# 
  1305  0098                     	;# 
  1306  0099                     	;# 
  1307  009A                     	;# 
  1308  009B                     	;# 
  1309  009B                     	;# 
  1310  009C                     	;# 
  1311  009D                     	;# 
  1312  009E                     	;# 
  1313  009F                     	;# 
  1314  010C                     	;# 
  1315  010E                     	;# 
  1316  0111                     	;# 
  1317  0112                     	;# 
  1318  0113                     	;# 
  1319  0114                     	;# 
  1320  0115                     	;# 
  1321  0116                     	;# 
  1322  0117                     	;# 
  1323  0118                     	;# 
  1324  0119                     	;# 
  1325  011C                     	;# 
  1326  018C                     	;# 
  1327  018E                     	;# 
  1328  0191                     	;# 
  1329  0191                     	;# 
  1330  0192                     	;# 
  1331  0193                     	;# 
  1332  0193                     	;# 
  1333  0194                     	;# 
  1334  0195                     	;# 
  1335  0196                     	;# 
  1336  0197                     	;# 
  1337  0199                     	;# 
  1338  0199                     	;# 
  1339  0199                     	;# 
  1340  019A                     	;# 
  1341  019A                     	;# 
  1342  019A                     	;# 
  1343  019B                     	;# 
  1344  019B                     	;# 
  1345  019B                     	;# 
  1346  019B                     	;# 
  1347  019B                     	;# 
  1348  019C                     	;# 
  1349  019C                     	;# 
  1350  019C                     	;# 
  1351  019D                     	;# 
  1352  019D                     	;# 
  1353  019D                     	;# 
  1354  019E                     	;# 
  1355  019E                     	;# 
  1356  019E                     	;# 
  1357  019F                     	;# 
  1358  019F                     	;# 
  1359  019F                     	;# 
  1360  019F                     	;# 
  1361  019F                     	;# 
  1362  020C                     	;# 
  1363  020E                     	;# 
  1364  0211                     	;# 
  1365  0211                     	;# 
  1366  0212                     	;# 
  1367  0212                     	;# 
  1368  0213                     	;# 
  1369  0213                     	;# 
  1370  0214                     	;# 
  1371  0214                     	;# 
  1372  0215                     	;# 
  1373  0215                     	;# 
  1374  0215                     	;# 
  1375  0215                     	;# 
  1376  0216                     	;# 
  1377  0216                     	;# 
  1378  0217                     	;# 
  1379  0217                     	;# 
  1380  028C                     	;# 
  1381  028E                     	;# 
  1382  0291                     	;# 
  1383  0291                     	;# 
  1384  0292                     	;# 
  1385  0293                     	;# 
  1386  0293                     	;# 
  1387  0298                     	;# 
  1388  0298                     	;# 
  1389  0299                     	;# 
  1390  029A                     	;# 
  1391  029A                     	;# 
  1392  029E                     	;# 
  1393  030C                     	;# 
  1394  030E                     	;# 
  1395  038C                     	;# 
  1396  038E                     	;# 
  1397  0391                     	;# 
  1398  0392                     	;# 
  1399  0393                     	;# 
  1400  0397                     	;# 
  1401  0398                     	;# 
  1402  0399                     	;# 
  1403  0415                     	;# 
  1404  0416                     	;# 
  1405  0417                     	;# 
  1406  041C                     	;# 
  1407  041D                     	;# 
  1408  041E                     	;# 
  1409  0511                     	;# 
  1410  0515                     	;# 
  1411  0617                     	;# 
  1412  0618                     	;# 
  1413  0619                     	;# 
  1414  0619                     	;# 
  1415  061A                     	;# 
  1416  061B                     	;# 
  1417  061C                     	;# 
  1418  061C                     	;# 
  1419  0691                     	;# 
  1420  0692                     	;# 
  1421  0693                     	;# 
  1422  0694                     	;# 
  1423  0695                     	;# 
  1424  0696                     	;# 
  1425  0697                     	;# 
  1426  0698                     	;# 
  1427  0699                     	;# 
  1428  069A                     	;# 
  1429  069B                     	;# 
  1430  069C                     	;# 
  1431  069D                     	;# 
  1432  069E                     	;# 
  1433  069F                     	;# 
  1434  0E0F                     	;# 
  1435  0E10                     	;# 
  1436  0E11                     	;# 
  1437  0E12                     	;# 
  1438  0E13                     	;# 
  1439  0E14                     	;# 
  1440  0E15                     	;# 
  1441  0E17                     	;# 
  1442  0E20                     	;# 
  1443  0E21                     	;# 
  1444  0E22                     	;# 
  1445  0E24                     	;# 
  1446  0E25                     	;# 
  1447  0E28                     	;# 
  1448  0E29                     	;# 
  1449  0E2A                     	;# 
  1450  0E2B                     	;# 
  1451  0E90                     	;# 
  1452  0E91                     	;# 
  1453  0E92                     	;# 
  1454  0E94                     	;# 
  1455  0E95                     	;# 
  1456  0EA0                     	;# 
  1457  0EA1                     	;# 
  1458  0EA2                     	;# 
  1459  0EA3                     	;# 
  1460  0EA4                     	;# 
  1461  0EA5                     	;# 
  1462  0F0F                     	;# 
  1463  0F10                     	;# 
  1464  0F11                     	;# 
  1465  0F12                     	;# 
  1466  0F13                     	;# 
  1467  0F14                     	;# 
  1468  0F15                     	;# 
  1469  0F16                     	;# 
  1470  0F17                     	;# 
  1471  0F18                     	;# 
  1472  0F19                     	;# 
  1473  0F1A                     	;# 
  1474  0F1B                     	;# 
  1475  0F1C                     	;# 
  1476  0F1D                     	;# 
  1477  0F1E                     	;# 
  1478  0F1F                     	;# 
  1479  0F20                     	;# 
  1480  0F21                     	;# 
  1481  0F22                     	;# 
  1482  0F23                     	;# 
  1483  0F24                     	;# 
  1484  0F25                     	;# 
  1485  0F26                     	;# 
  1486  0F27                     	;# 
  1487  0F28                     	;# 
  1488  0F29                     	;# 
  1489  0F2A                     	;# 
  1490  0F2B                     	;# 
  1491  0F2C                     	;# 
  1492  0F2D                     	;# 
  1493  0F9E                     	;# 
  1494  0FE4                     	;# 
  1495  0FE5                     	;# 
  1496  0FE6                     	;# 
  1497  0FE7                     	;# 
  1498  0FE8                     	;# 
  1499  0FE9                     	;# 
  1500  0FEA                     	;# 
  1501  0FEB                     	;# 
  1502  0FED                     	;# 
  1503  0FEE                     	;# 
  1504  0FEF                     	;# 
  1505  0000                     	;# 
  1506  0001                     	;# 
  1507  0002                     	;# 
  1508  0003                     	;# 
  1509  0004                     	;# 
  1510  0005                     	;# 
  1511  0006                     	;# 
  1512  0007                     	;# 
  1513  0008                     	;# 
  1514  0009                     	;# 
  1515  000A                     	;# 
  1516  000B                     	;# 
  1517  000C                     	;# 
  1518  000E                     	;# 
  1519  0011                     	;# 
  1520  0012                     	;# 
  1521  0013                     	;# 
  1522  0015                     	;# 
  1523  0016                     	;# 
  1524  0016                     	;# 
  1525  0017                     	;# 
  1526  0018                     	;# 
  1527  0019                     	;# 
  1528  001A                     	;# 
  1529  001B                     	;# 
  1530  001C                     	;# 
  1531  008C                     	;# 
  1532  008E                     	;# 
  1533  0091                     	;# 
  1534  0092                     	;# 
  1535  0093                     	;# 
  1536  0095                     	;# 
  1537  0096                     	;# 
  1538  0097                     	;# 
  1539  0098                     	;# 
  1540  0099                     	;# 
  1541  009A                     	;# 
  1542  009B                     	;# 
  1543  009B                     	;# 
  1544  009C                     	;# 
  1545  009D                     	;# 
  1546  009E                     	;# 
  1547  009F                     	;# 
  1548  010C                     	;# 
  1549  010E                     	;# 
  1550  0111                     	;# 
  1551  0112                     	;# 
  1552  0113                     	;# 
  1553  0114                     	;# 
  1554  0115                     	;# 
  1555  0116                     	;# 
  1556  0117                     	;# 
  1557  0118                     	;# 
  1558  0119                     	;# 
  1559  011C                     	;# 
  1560  018C                     	;# 
  1561  018E                     	;# 
  1562  0191                     	;# 
  1563  0191                     	;# 
  1564  0192                     	;# 
  1565  0193                     	;# 
  1566  0193                     	;# 
  1567  0194                     	;# 
  1568  0195                     	;# 
  1569  0196                     	;# 
  1570  0197                     	;# 
  1571  0199                     	;# 
  1572  0199                     	;# 
  1573  0199                     	;# 
  1574  019A                     	;# 
  1575  019A                     	;# 
  1576  019A                     	;# 
  1577  019B                     	;# 
  1578  019B                     	;# 
  1579  019B                     	;# 
  1580  019B                     	;# 
  1581  019B                     	;# 
  1582  019C                     	;# 
  1583  019C                     	;# 
  1584  019C                     	;# 
  1585  019D                     	;# 
  1586  019D                     	;# 
  1587  019D                     	;# 
  1588  019E                     	;# 
  1589  019E                     	;# 
  1590  019E                     	;# 
  1591  019F                     	;# 
  1592  019F                     	;# 
  1593  019F                     	;# 
  1594  019F                     	;# 
  1595  019F                     	;# 
  1596  020C                     	;# 
  1597  020E                     	;# 
  1598  0211                     	;# 
  1599  0211                     	;# 
  1600  0212                     	;# 
  1601  0212                     	;# 
  1602  0213                     	;# 
  1603  0213                     	;# 
  1604  0214                     	;# 
  1605  0214                     	;# 
  1606  0215                     	;# 
  1607  0215                     	;# 
  1608  0215                     	;# 
  1609  0215                     	;# 
  1610  0216                     	;# 
  1611  0216                     	;# 
  1612  0217                     	;# 
  1613  0217                     	;# 
  1614  028C                     	;# 
  1615  028E                     	;# 
  1616  0291                     	;# 
  1617  0291                     	;# 
  1618  0292                     	;# 
  1619  0293                     	;# 
  1620  0293                     	;# 
  1621  0298                     	;# 
  1622  0298                     	;# 
  1623  0299                     	;# 
  1624  029A                     	;# 
  1625  029A                     	;# 
  1626  029E                     	;# 
  1627  030C                     	;# 
  1628  030E                     	;# 
  1629  038C                     	;# 
  1630  038E                     	;# 
  1631  0391                     	;# 
  1632  0392                     	;# 
  1633  0393                     	;# 
  1634  0397                     	;# 
  1635  0398                     	;# 
  1636  0399                     	;# 
  1637  0415                     	;# 
  1638  0416                     	;# 
  1639  0417                     	;# 
  1640  041C                     	;# 
  1641  041D                     	;# 
  1642  041E                     	;# 
  1643  0511                     	;# 
  1644  0515                     	;# 
  1645  0617                     	;# 
  1646  0618                     	;# 
  1647  0619                     	;# 
  1648  0619                     	;# 
  1649  061A                     	;# 
  1650  061B                     	;# 
  1651  061C                     	;# 
  1652  061C                     	;# 
  1653  0691                     	;# 
  1654  0692                     	;# 
  1655  0693                     	;# 
  1656  0694                     	;# 
  1657  0695                     	;# 
  1658  0696                     	;# 
  1659  0697                     	;# 
  1660  0698                     	;# 
  1661  0699                     	;# 
  1662  069A                     	;# 
  1663  069B                     	;# 
  1664  069C                     	;# 
  1665  069D                     	;# 
  1666  069E                     	;# 
  1667  069F                     	;# 
  1668  0E0F                     	;# 
  1669  0E10                     	;# 
  1670  0E11                     	;# 
  1671  0E12                     	;# 
  1672  0E13                     	;# 
  1673  0E14                     	;# 
  1674  0E15                     	;# 
  1675  0E17                     	;# 
  1676  0E20                     	;# 
  1677  0E21                     	;# 
  1678  0E22                     	;# 
  1679  0E24                     	;# 
  1680  0E25                     	;# 
  1681  0E28                     	;# 
  1682  0E29                     	;# 
  1683  0E2A                     	;# 
  1684  0E2B                     	;# 
  1685  0E90                     	;# 
  1686  0E91                     	;# 
  1687  0E92                     	;# 
  1688  0E94                     	;# 
  1689  0E95                     	;# 
  1690  0EA0                     	;# 
  1691  0EA1                     	;# 
  1692  0EA2                     	;# 
  1693  0EA3                     	;# 
  1694  0EA4                     	;# 
  1695  0EA5                     	;# 
  1696  0F0F                     	;# 
  1697  0F10                     	;# 
  1698  0F11                     	;# 
  1699  0F12                     	;# 
  1700  0F13                     	;# 
  1701  0F14                     	;# 
  1702  0F15                     	;# 
  1703  0F16                     	;# 
  1704  0F17                     	;# 
  1705  0F18                     	;# 
  1706  0F19                     	;# 
  1707  0F1A                     	;# 
  1708  0F1B                     	;# 
  1709  0F1C                     	;# 
  1710  0F1D                     	;# 
  1711  0F1E                     	;# 
  1712  0F1F                     	;# 
  1713  0F20                     	;# 
  1714  0F21                     	;# 
  1715  0F22                     	;# 
  1716  0F23                     	;# 
  1717  0F24                     	;# 
  1718  0F25                     	;# 
  1719  0F26                     	;# 
  1720  0F27                     	;# 
  1721  0F28                     	;# 
  1722  0F29                     	;# 
  1723  0F2A                     	;# 
  1724  0F2B                     	;# 
  1725  0F2C                     	;# 
  1726  0F2D                     	;# 
  1727  0F9E                     	;# 
  1728  0FE4                     	;# 
  1729  0FE5                     	;# 
  1730  0FE6                     	;# 
  1731  0FE7                     	;# 
  1732  0FE8                     	;# 
  1733  0FE9                     	;# 
  1734  0FEA                     	;# 
  1735  0FEB                     	;# 
  1736  0FED                     	;# 
  1737  0FEE                     	;# 
  1738  0FEF                     	;# 
  1739  0000                     	;# 
  1740  0001                     	;# 
  1741  0002                     	;# 
  1742  0003                     	;# 
  1743  0004                     	;# 
  1744  0005                     	;# 
  1745  0006                     	;# 
  1746  0007                     	;# 
  1747  0008                     	;# 
  1748  0009                     	;# 
  1749  000A                     	;# 
  1750  000B                     	;# 
  1751  000C                     	;# 
  1752  000E                     	;# 
  1753  0011                     	;# 
  1754  0012                     	;# 
  1755  0013                     	;# 
  1756  0015                     	;# 
  1757  0016                     	;# 
  1758  0016                     	;# 
  1759  0017                     	;# 
  1760  0018                     	;# 
  1761  0019                     	;# 
  1762  001A                     	;# 
  1763  001B                     	;# 
  1764  001C                     	;# 
  1765  008C                     	;# 
  1766  008E                     	;# 
  1767  0091                     	;# 
  1768  0092                     	;# 
  1769  0093                     	;# 
  1770  0095                     	;# 
  1771  0096                     	;# 
  1772  0097                     	;# 
  1773  0098                     	;# 
  1774  0099                     	;# 
  1775  009A                     	;# 
  1776  009B                     	;# 
  1777  009B                     	;# 
  1778  009C                     	;# 
  1779  009D                     	;# 
  1780  009E                     	;# 
  1781  009F                     	;# 
  1782  010C                     	;# 
  1783  010E                     	;# 
  1784  0111                     	;# 
  1785  0112                     	;# 
  1786  0113                     	;# 
  1787  0114                     	;# 
  1788  0115                     	;# 
  1789  0116                     	;# 
  1790  0117                     	;# 
  1791  0118                     	;# 
  1792  0119                     	;# 
  1793  011C                     	;# 
  1794  018C                     	;# 
  1795  018E                     	;# 
  1796  0191                     	;# 
  1797  0191                     	;# 
  1798  0192                     	;# 
  1799  0193                     	;# 
  1800  0193                     	;# 
  1801  0194                     	;# 
  1802  0195                     	;# 
  1803  0196                     	;# 
  1804  0197                     	;# 
  1805  0199                     	;# 
  1806  0199                     	;# 
  1807  0199                     	;# 
  1808  019A                     	;# 
  1809  019A                     	;# 
  1810  019A                     	;# 
  1811  019B                     	;# 
  1812  019B                     	;# 
  1813  019B                     	;# 
  1814  019B                     	;# 
  1815  019B                     	;# 
  1816  019C                     	;# 
  1817  019C                     	;# 
  1818  019C                     	;# 
  1819  019D                     	;# 
  1820  019D                     	;# 
  1821  019D                     	;# 
  1822  019E                     	;# 
  1823  019E                     	;# 
  1824  019E                     	;# 
  1825  019F                     	;# 
  1826  019F                     	;# 
  1827  019F                     	;# 
  1828  019F                     	;# 
  1829  019F                     	;# 
  1830  020C                     	;# 
  1831  020E                     	;# 
  1832  0211                     	;# 
  1833  0211                     	;# 
  1834  0212                     	;# 
  1835  0212                     	;# 
  1836  0213                     	;# 
  1837  0213                     	;# 
  1838  0214                     	;# 
  1839  0214                     	;# 
  1840  0215                     	;# 
  1841  0215                     	;# 
  1842  0215                     	;# 
  1843  0215                     	;# 
  1844  0216                     	;# 
  1845  0216                     	;# 
  1846  0217                     	;# 
  1847  0217                     	;# 
  1848  028C                     	;# 
  1849  028E                     	;# 
  1850  0291                     	;# 
  1851  0291                     	;# 
  1852  0292                     	;# 
  1853  0293                     	;# 
  1854  0293                     	;# 
  1855  0298                     	;# 
  1856  0298                     	;# 
  1857  0299                     	;# 
  1858  029A                     	;# 
  1859  029A                     	;# 
  1860  029E                     	;# 
  1861  030C                     	;# 
  1862  030E                     	;# 
  1863  038C                     	;# 
  1864  038E                     	;# 
  1865  0391                     	;# 
  1866  0392                     	;# 
  1867  0393                     	;# 
  1868  0397                     	;# 
  1869  0398                     	;# 
  1870  0399                     	;# 
  1871  0415                     	;# 
  1872  0416                     	;# 
  1873  0417                     	;# 
  1874  041C                     	;# 
  1875  041D                     	;# 
  1876  041E                     	;# 
  1877  0511                     	;# 
  1878  0515                     	;# 
  1879  0617                     	;# 
  1880  0618                     	;# 
  1881  0619                     	;# 
  1882  0619                     	;# 
  1883  061A                     	;# 
  1884  061B                     	;# 
  1885  061C                     	;# 
  1886  061C                     	;# 
  1887  0691                     	;# 
  1888  0692                     	;# 
  1889  0693                     	;# 
  1890  0694                     	;# 
  1891  0695                     	;# 
  1892  0696                     	;# 
  1893  0697                     	;# 
  1894  0698                     	;# 
  1895  0699                     	;# 
  1896  069A                     	;# 
  1897  069B                     	;# 
  1898  069C                     	;# 
  1899  069D                     	;# 
  1900  069E                     	;# 
  1901  069F                     	;# 
  1902  0E0F                     	;# 
  1903  0E10                     	;# 
  1904  0E11                     	;# 
  1905  0E12                     	;# 
  1906  0E13                     	;# 
  1907  0E14                     	;# 
  1908  0E15                     	;# 
  1909  0E17                     	;# 
  1910  0E20                     	;# 
  1911  0E21                     	;# 
  1912  0E22                     	;# 
  1913  0E24                     	;# 
  1914  0E25                     	;# 
  1915  0E28                     	;# 
  1916  0E29                     	;# 
  1917  0E2A                     	;# 
  1918  0E2B                     	;# 
  1919  0E90                     	;# 
  1920  0E91                     	;# 
  1921  0E92                     	;# 
  1922  0E94                     	;# 
  1923  0E95                     	;# 
  1924  0EA0                     	;# 
  1925  0EA1                     	;# 
  1926  0EA2                     	;# 
  1927  0EA3                     	;# 
  1928  0EA4                     	;# 
  1929  0EA5                     	;# 
  1930  0F0F                     	;# 
  1931  0F10                     	;# 
  1932  0F11                     	;# 
  1933  0F12                     	;# 
  1934  0F13                     	;# 
  1935  0F14                     	;# 
  1936  0F15                     	;# 
  1937  0F16                     	;# 
  1938  0F17                     	;# 
  1939  0F18                     	;# 
  1940  0F19                     	;# 
  1941  0F1A                     	;# 
  1942  0F1B                     	;# 
  1943  0F1C                     	;# 
  1944  0F1D                     	;# 
  1945  0F1E                     	;# 
  1946  0F1F                     	;# 
  1947  0F20                     	;# 
  1948  0F21                     	;# 
  1949  0F22                     	;# 
  1950  0F23                     	;# 
  1951  0F24                     	;# 
  1952  0F25                     	;# 
  1953  0F26                     	;# 
  1954  0F27                     	;# 
  1955  0F28                     	;# 
  1956  0F29                     	;# 
  1957  0F2A                     	;# 
  1958  0F2B                     	;# 
  1959  0F2C                     	;# 
  1960  0F2D                     	;# 
  1961  0F9E                     	;# 
  1962  0FE4                     	;# 
  1963  0FE5                     	;# 
  1964  0FE6                     	;# 
  1965  0FE7                     	;# 
  1966  0FE8                     	;# 
  1967  0FE9                     	;# 
  1968  0FEA                     	;# 
  1969  0FEB                     	;# 
  1970  0FED                     	;# 
  1971  0FEE                     	;# 
  1972  0FEF                     	;# 
  1973  0000                     	;# 
  1974  0001                     	;# 
  1975  0002                     	;# 
  1976  0003                     	;# 
  1977  0004                     	;# 
  1978  0005                     	;# 
  1979  0006                     	;# 
  1980  0007                     	;# 
  1981  0008                     	;# 
  1982  0009                     	;# 
  1983  000A                     	;# 
  1984  000B                     	;# 
  1985  000C                     	;# 
  1986  000E                     	;# 
  1987  0011                     	;# 
  1988  0012                     	;# 
  1989  0013                     	;# 
  1990  0015                     	;# 
  1991  0016                     	;# 
  1992  0016                     	;# 
  1993  0017                     	;# 
  1994  0018                     	;# 
  1995  0019                     	;# 
  1996  001A                     	;# 
  1997  001B                     	;# 
  1998  001C                     	;# 
  1999  008C                     	;# 
  2000  008E                     	;# 
  2001  0091                     	;# 
  2002  0092                     	;# 
  2003  0093                     	;# 
  2004  0095                     	;# 
  2005  0096                     	;# 
  2006  0097                     	;# 
  2007  0098                     	;# 
  2008  0099                     	;# 
  2009  009A                     	;# 
  2010  009B                     	;# 
  2011  009B                     	;# 
  2012  009C                     	;# 
  2013  009D                     	;# 
  2014  009E                     	;# 
  2015  009F                     	;# 
  2016  010C                     	;# 
  2017  010E                     	;# 
  2018  0111                     	;# 
  2019  0112                     	;# 
  2020  0113                     	;# 
  2021  0114                     	;# 
  2022  0115                     	;# 
  2023  0116                     	;# 
  2024  0117                     	;# 
  2025  0118                     	;# 
  2026  0119                     	;# 
  2027  011C                     	;# 
  2028  018C                     	;# 
  2029  018E                     	;# 
  2030  0191                     	;# 
  2031  0191                     	;# 
  2032  0192                     	;# 
  2033  0193                     	;# 
  2034  0193                     	;# 
  2035  0194                     	;# 
  2036  0195                     	;# 
  2037  0196                     	;# 
  2038  0197                     	;# 
  2039  0199                     	;# 
  2040  0199                     	;# 
  2041  0199                     	;# 
  2042  019A                     	;# 
  2043  019A                     	;# 
  2044  019A                     	;# 
  2045  019B                     	;# 
  2046  019B                     	;# 
  2047  019B                     	;# 
  2048  019B                     	;# 
  2049  019B                     	;# 
  2050  019C                     	;# 
  2051  019C                     	;# 
  2052  019C                     	;# 
  2053  019D                     	;# 
  2054  019D                     	;# 
  2055  019D                     	;# 
  2056  019E                     	;# 
  2057  019E                     	;# 
  2058  019E                     	;# 
  2059  019F                     	;# 
  2060  019F                     	;# 
  2061  019F                     	;# 
  2062  019F                     	;# 
  2063  019F                     	;# 
  2064  020C                     	;# 
  2065  020E                     	;# 
  2066  0211                     	;# 
  2067  0211                     	;# 
  2068  0212                     	;# 
  2069  0212                     	;# 
  2070  0213                     	;# 
  2071  0213                     	;# 
  2072  0214                     	;# 
  2073  0214                     	;# 
  2074  0215                     	;# 
  2075  0215                     	;# 
  2076  0215                     	;# 
  2077  0215                     	;# 
  2078  0216                     	;# 
  2079  0216                     	;# 
  2080  0217                     	;# 
  2081  0217                     	;# 
  2082  028C                     	;# 
  2083  028E                     	;# 
  2084  0291                     	;# 
  2085  0291                     	;# 
  2086  0292                     	;# 
  2087  0293                     	;# 
  2088  0293                     	;# 
  2089  0298                     	;# 
  2090  0298                     	;# 
  2091  0299                     	;# 
  2092  029A                     	;# 
  2093  029A                     	;# 
  2094  029E                     	;# 
  2095  030C                     	;# 
  2096  030E                     	;# 
  2097  038C                     	;# 
  2098  038E                     	;# 
  2099  0391                     	;# 
  2100  0392                     	;# 
  2101  0393                     	;# 
  2102  0397                     	;# 
  2103  0398                     	;# 
  2104  0399                     	;# 
  2105  0415                     	;# 
  2106  0416                     	;# 
  2107  0417                     	;# 
  2108  041C                     	;# 
  2109  041D                     	;# 
  2110  041E                     	;# 
  2111  0511                     	;# 
  2112  0515                     	;# 
  2113  0617                     	;# 
  2114  0618                     	;# 
  2115  0619                     	;# 
  2116  0619                     	;# 
  2117  061A                     	;# 
  2118  061B                     	;# 
  2119  061C                     	;# 
  2120  061C                     	;# 
  2121  0691                     	;# 
  2122  0692                     	;# 
  2123  0693                     	;# 
  2124  0694                     	;# 
  2125  0695                     	;# 
  2126  0696                     	;# 
  2127  0697                     	;# 
  2128  0698                     	;# 
  2129  0699                     	;# 
  2130  069A                     	;# 
  2131  069B                     	;# 
  2132  069C                     	;# 
  2133  069D                     	;# 
  2134  069E                     	;# 
  2135  069F                     	;# 
  2136  0E0F                     	;# 
  2137  0E10                     	;# 
  2138  0E11                     	;# 
  2139  0E12                     	;# 
  2140  0E13                     	;# 
  2141  0E14                     	;# 
  2142  0E15                     	;# 
  2143  0E17                     	;# 
  2144  0E20                     	;# 
  2145  0E21                     	;# 
  2146  0E22                     	;# 
  2147  0E24                     	;# 
  2148  0E25                     	;# 
  2149  0E28                     	;# 
  2150  0E29                     	;# 
  2151  0E2A                     	;# 
  2152  0E2B                     	;# 
  2153  0E90                     	;# 
  2154  0E91                     	;# 
  2155  0E92                     	;# 
  2156  0E94                     	;# 
  2157  0E95                     	;# 
  2158  0EA0                     	;# 
  2159  0EA1                     	;# 
  2160  0EA2                     	;# 
  2161  0EA3                     	;# 
  2162  0EA4                     	;# 
  2163  0EA5                     	;# 
  2164  0F0F                     	;# 
  2165  0F10                     	;# 
  2166  0F11                     	;# 
  2167  0F12                     	;# 
  2168  0F13                     	;# 
  2169  0F14                     	;# 
  2170  0F15                     	;# 
  2171  0F16                     	;# 
  2172  0F17                     	;# 
  2173  0F18                     	;# 
  2174  0F19                     	;# 
  2175  0F1A                     	;# 
  2176  0F1B                     	;# 
  2177  0F1C                     	;# 
  2178  0F1D                     	;# 
  2179  0F1E                     	;# 
  2180  0F1F                     	;# 
  2181  0F20                     	;# 
  2182  0F21                     	;# 
  2183  0F22                     	;# 
  2184  0F23                     	;# 
  2185  0F24                     	;# 
  2186  0F25                     	;# 
  2187  0F26                     	;# 
  2188  0F27                     	;# 
  2189  0F28                     	;# 
  2190  0F29                     	;# 
  2191  0F2A                     	;# 
  2192  0F2B                     	;# 
  2193  0F2C                     	;# 
  2194  0F2D                     	;# 
  2195  0F9E                     	;# 
  2196  0FE4                     	;# 
  2197  0FE5                     	;# 
  2198  0FE6                     	;# 
  2199  0FE7                     	;# 
  2200  0FE8                     	;# 
  2201  0FE9                     	;# 
  2202  0FEA                     	;# 
  2203  0FEB                     	;# 
  2204  0FED                     	;# 
  2205  0FEE                     	;# 
  2206  0FEF                     	;# 
  2207  0000                     	;# 
  2208  0001                     	;# 
  2209  0002                     	;# 
  2210  0003                     	;# 
  2211  0004                     	;# 
  2212  0005                     	;# 
  2213  0006                     	;# 
  2214  0007                     	;# 
  2215  0008                     	;# 
  2216  0009                     	;# 
  2217  000A                     	;# 
  2218  000B                     	;# 
  2219  000C                     	;# 
  2220  000E                     	;# 
  2221  0011                     	;# 
  2222  0012                     	;# 
  2223  0013                     	;# 
  2224  0015                     	;# 
  2225  0016                     	;# 
  2226  0016                     	;# 
  2227  0017                     	;# 
  2228  0018                     	;# 
  2229  0019                     	;# 
  2230  001A                     	;# 
  2231  001B                     	;# 
  2232  001C                     	;# 
  2233  008C                     	;# 
  2234  008E                     	;# 
  2235  0091                     	;# 
  2236  0092                     	;# 
  2237  0093                     	;# 
  2238  0095                     	;# 
  2239  0096                     	;# 
  2240  0097                     	;# 
  2241  0098                     	;# 
  2242  0099                     	;# 
  2243  009A                     	;# 
  2244  009B                     	;# 
  2245  009B                     	;# 
  2246  009C                     	;# 
  2247  009D                     	;# 
  2248  009E                     	;# 
  2249  009F                     	;# 
  2250  010C                     	;# 
  2251  010E                     	;# 
  2252  0111                     	;# 
  2253  0112                     	;# 
  2254  0113                     	;# 
  2255  0114                     	;# 
  2256  0115                     	;# 
  2257  0116                     	;# 
  2258  0117                     	;# 
  2259  0118                     	;# 
  2260  0119                     	;# 
  2261  011C                     	;# 
  2262  018C                     	;# 
  2263  018E                     	;# 
  2264  0191                     	;# 
  2265  0191                     	;# 
  2266  0192                     	;# 
  2267  0193                     	;# 
  2268  0193                     	;# 
  2269  0194                     	;# 
  2270  0195                     	;# 
  2271  0196                     	;# 
  2272  0197                     	;# 
  2273  0199                     	;# 
  2274  0199                     	;# 
  2275  0199                     	;# 
  2276  019A                     	;# 
  2277  019A                     	;# 
  2278  019A                     	;# 
  2279  019B                     	;# 
  2280  019B                     	;# 
  2281  019B                     	;# 
  2282  019B                     	;# 
  2283  019B                     	;# 
  2284  019C                     	;# 
  2285  019C                     	;# 
  2286  019C                     	;# 
  2287  019D                     	;# 
  2288  019D                     	;# 
  2289  019D                     	;# 
  2290  019E                     	;# 
  2291  019E                     	;# 
  2292  019E                     	;# 
  2293  019F                     	;# 
  2294  019F                     	;# 
  2295  019F                     	;# 
  2296  019F                     	;# 
  2297  019F                     	;# 
  2298  020C                     	;# 
  2299  020E                     	;# 
  2300  0211                     	;# 
  2301  0211                     	;# 
  2302  0212                     	;# 
  2303  0212                     	;# 
  2304  0213                     	;# 
  2305  0213                     	;# 
  2306  0214                     	;# 
  2307  0214                     	;# 
  2308  0215                     	;# 
  2309  0215                     	;# 
  2310  0215                     	;# 
  2311  0215                     	;# 
  2312  0216                     	;# 
  2313  0216                     	;# 
  2314  0217                     	;# 
  2315  0217                     	;# 
  2316  028C                     	;# 
  2317  028E                     	;# 
  2318  0291                     	;# 
  2319  0291                     	;# 
  2320  0292                     	;# 
  2321  0293                     	;# 
  2322  0293                     	;# 
  2323  0298                     	;# 
  2324  0298                     	;# 
  2325  0299                     	;# 
  2326  029A                     	;# 
  2327  029A                     	;# 
  2328  029E                     	;# 
  2329  030C                     	;# 
  2330  030E                     	;# 
  2331  038C                     	;# 
  2332  038E                     	;# 
  2333  0391                     	;# 
  2334  0392                     	;# 
  2335  0393                     	;# 
  2336  0397                     	;# 
  2337  0398                     	;# 
  2338  0399                     	;# 
  2339  0415                     	;# 
  2340  0416                     	;# 
  2341  0417                     	;# 
  2342  041C                     	;# 
  2343  041D                     	;# 
  2344  041E                     	;# 
  2345  0511                     	;# 
  2346  0515                     	;# 
  2347  0617                     	;# 
  2348  0618                     	;# 
  2349  0619                     	;# 
  2350  0619                     	;# 
  2351  061A                     	;# 
  2352  061B                     	;# 
  2353  061C                     	;# 
  2354  061C                     	;# 
  2355  0691                     	;# 
  2356  0692                     	;# 
  2357  0693                     	;# 
  2358  0694                     	;# 
  2359  0695                     	;# 
  2360  0696                     	;# 
  2361  0697                     	;# 
  2362  0698                     	;# 
  2363  0699                     	;# 
  2364  069A                     	;# 
  2365  069B                     	;# 
  2366  069C                     	;# 
  2367  069D                     	;# 
  2368  069E                     	;# 
  2369  069F                     	;# 
  2370  0E0F                     	;# 
  2371  0E10                     	;# 
  2372  0E11                     	;# 
  2373  0E12                     	;# 
  2374  0E13                     	;# 
  2375  0E14                     	;# 
  2376  0E15                     	;# 
  2377  0E17                     	;# 
  2378  0E20                     	;# 
  2379  0E21                     	;# 
  2380  0E22                     	;# 
  2381  0E24                     	;# 
  2382  0E25                     	;# 
  2383  0E28                     	;# 
  2384  0E29                     	;# 
  2385  0E2A                     	;# 
  2386  0E2B                     	;# 
  2387  0E90                     	;# 
  2388  0E91                     	;# 
  2389  0E92                     	;# 
  2390  0E94                     	;# 
  2391  0E95                     	;# 
  2392  0EA0                     	;# 
  2393  0EA1                     	;# 
  2394  0EA2                     	;# 
  2395  0EA3                     	;# 
  2396  0EA4                     	;# 
  2397  0EA5                     	;# 
  2398  0F0F                     	;# 
  2399  0F10                     	;# 
  2400  0F11                     	;# 
  2401  0F12                     	;# 
  2402  0F13                     	;# 
  2403  0F14                     	;# 
  2404  0F15                     	;# 
  2405  0F16                     	;# 
  2406  0F17                     	;# 
  2407  0F18                     	;# 
  2408  0F19                     	;# 
  2409  0F1A                     	;# 
  2410  0F1B                     	;# 
  2411  0F1C                     	;# 
  2412  0F1D                     	;# 
  2413  0F1E                     	;# 
  2414  0F1F                     	;# 
  2415  0F20                     	;# 
  2416  0F21                     	;# 
  2417  0F22                     	;# 
  2418  0F23                     	;# 
  2419  0F24                     	;# 
  2420  0F25                     	;# 
  2421  0F26                     	;# 
  2422  0F27                     	;# 
  2423  0F28                     	;# 
  2424  0F29                     	;# 
  2425  0F2A                     	;# 
  2426  0F2B                     	;# 
  2427  0F2C                     	;# 
  2428  0F2D                     	;# 
  2429  0F9E                     	;# 
  2430  0FE4                     	;# 
  2431  0FE5                     	;# 
  2432  0FE6                     	;# 
  2433  0FE7                     	;# 
  2434  0FE8                     	;# 
  2435  0FE9                     	;# 
  2436  0FEA                     	;# 
  2437  0FEB                     	;# 
  2438  0FED                     	;# 
  2439  0FEE                     	;# 
  2440  0FEF                     	;# 
  2441  0000                     	;# 
  2442  0001                     	;# 
  2443  0002                     	;# 
  2444  0003                     	;# 
  2445  0004                     	;# 
  2446  0005                     	;# 
  2447  0006                     	;# 
  2448  0007                     	;# 
  2449  0008                     	;# 
  2450  0009                     	;# 
  2451  000A                     	;# 
  2452  000B                     	;# 
  2453  000C                     	;# 
  2454  000E                     	;# 
  2455  0011                     	;# 
  2456  0012                     	;# 
  2457  0013                     	;# 
  2458  0015                     	;# 
  2459  0016                     	;# 
  2460  0016                     	;# 
  2461  0017                     	;# 
  2462  0018                     	;# 
  2463  0019                     	;# 
  2464  001A                     	;# 
  2465  001B                     	;# 
  2466  001C                     	;# 
  2467  008C                     	;# 
  2468  008E                     	;# 
  2469  0091                     	;# 
  2470  0092                     	;# 
  2471  0093                     	;# 
  2472  0095                     	;# 
  2473  0096                     	;# 
  2474  0097                     	;# 
  2475  0098                     	;# 
  2476  0099                     	;# 
  2477  009A                     	;# 
  2478  009B                     	;# 
  2479  009B                     	;# 
  2480  009C                     	;# 
  2481  009D                     	;# 
  2482  009E                     	;# 
  2483  009F                     	;# 
  2484  010C                     	;# 
  2485  010E                     	;# 
  2486  0111                     	;# 
  2487  0112                     	;# 
  2488  0113                     	;# 
  2489  0114                     	;# 
  2490  0115                     	;# 
  2491  0116                     	;# 
  2492  0117                     	;# 
  2493  0118                     	;# 
  2494  0119                     	;# 
  2495  011C                     	;# 
  2496  018C                     	;# 
  2497  018E                     	;# 
  2498  0191                     	;# 
  2499  0191                     	;# 
  2500  0192                     	;# 
  2501  0193                     	;# 
  2502  0193                     	;# 
  2503  0194                     	;# 
  2504  0195                     	;# 
  2505  0196                     	;# 
  2506  0197                     	;# 
  2507  0199                     	;# 
  2508  0199                     	;# 
  2509  0199                     	;# 
  2510  019A                     	;# 
  2511  019A                     	;# 
  2512  019A                     	;# 
  2513  019B                     	;# 
  2514  019B                     	;# 
  2515  019B                     	;# 
  2516  019B                     	;# 
  2517  019B                     	;# 
  2518  019C                     	;# 
  2519  019C                     	;# 
  2520  019C                     	;# 
  2521  019D                     	;# 
  2522  019D                     	;# 
  2523  019D                     	;# 
  2524  019E                     	;# 
  2525  019E                     	;# 
  2526  019E                     	;# 
  2527  019F                     	;# 
  2528  019F                     	;# 
  2529  019F                     	;# 
  2530  019F                     	;# 
  2531  019F                     	;# 
  2532  020C                     	;# 
  2533  020E                     	;# 
  2534  0211                     	;# 
  2535  0211                     	;# 
  2536  0212                     	;# 
  2537  0212                     	;# 
  2538  0213                     	;# 
  2539  0213                     	;# 
  2540  0214                     	;# 
  2541  0214                     	;# 
  2542  0215                     	;# 
  2543  0215                     	;# 
  2544  0215                     	;# 
  2545  0215                     	;# 
  2546  0216                     	;# 
  2547  0216                     	;# 
  2548  0217                     	;# 
  2549  0217                     	;# 
  2550  028C                     	;# 
  2551  028E                     	;# 
  2552  0291                     	;# 
  2553  0291                     	;# 
  2554  0292                     	;# 
  2555  0293                     	;# 
  2556  0293                     	;# 
  2557  0298                     	;# 
  2558  0298                     	;# 
  2559  0299                     	;# 
  2560  029A                     	;# 
  2561  029A                     	;# 
  2562  029E                     	;# 
  2563  030C                     	;# 
  2564  030E                     	;# 
  2565  038C                     	;# 
  2566  038E                     	;# 
  2567  0391                     	;# 
  2568  0392                     	;# 
  2569  0393                     	;# 
  2570  0397                     	;# 
  2571  0398                     	;# 
  2572  0399                     	;# 
  2573  0415                     	;# 
  2574  0416                     	;# 
  2575  0417                     	;# 
  2576  041C                     	;# 
  2577  041D                     	;# 
  2578  041E                     	;# 
  2579  0511                     	;# 
  2580  0515                     	;# 
  2581  0617                     	;# 
  2582  0618                     	;# 
  2583  0619                     	;# 
  2584  0619                     	;# 
  2585  061A                     	;# 
  2586  061B                     	;# 
  2587  061C                     	;# 
  2588  061C                     	;# 
  2589  0691                     	;# 
  2590  0692                     	;# 
  2591  0693                     	;# 
  2592  0694                     	;# 
  2593  0695                     	;# 
  2594  0696                     	;# 
  2595  0697                     	;# 
  2596  0698                     	;# 
  2597  0699                     	;# 
  2598  069A                     	;# 
  2599  069B                     	;# 
  2600  069C                     	;# 
  2601  069D                     	;# 
  2602  069E                     	;# 
  2603  069F                     	;# 
  2604  0E0F                     	;# 
  2605  0E10                     	;# 
  2606  0E11                     	;# 
  2607  0E12                     	;# 
  2608  0E13                     	;# 
  2609  0E14                     	;# 
  2610  0E15                     	;# 
  2611  0E17                     	;# 
  2612  0E20                     	;# 
  2613  0E21                     	;# 
  2614  0E22                     	;# 
  2615  0E24                     	;# 
  2616  0E25                     	;# 
  2617  0E28                     	;# 
  2618  0E29                     	;# 
  2619  0E2A                     	;# 
  2620  0E2B                     	;# 
  2621  0E90                     	;# 
  2622  0E91                     	;# 
  2623  0E92                     	;# 
  2624  0E94                     	;# 
  2625  0E95                     	;# 
  2626  0EA0                     	;# 
  2627  0EA1                     	;# 
  2628  0EA2                     	;# 
  2629  0EA3                     	;# 
  2630  0EA4                     	;# 
  2631  0EA5                     	;# 
  2632  0F0F                     	;# 
  2633  0F10                     	;# 
  2634  0F11                     	;# 
  2635  0F12                     	;# 
  2636  0F13                     	;# 
  2637  0F14                     	;# 
  2638  0F15                     	;# 
  2639  0F16                     	;# 
  2640  0F17                     	;# 
  2641  0F18                     	;# 
  2642  0F19                     	;# 
  2643  0F1A                     	;# 
  2644  0F1B                     	;# 
  2645  0F1C                     	;# 
  2646  0F1D                     	;# 
  2647  0F1E                     	;# 
  2648  0F1F                     	;# 
  2649  0F20                     	;# 
  2650  0F21                     	;# 
  2651  0F22                     	;# 
  2652  0F23                     	;# 
  2653  0F24                     	;# 
  2654  0F25                     	;# 
  2655  0F26                     	;# 
  2656  0F27                     	;# 
  2657  0F28                     	;# 
  2658  0F29                     	;# 
  2659  0F2A                     	;# 
  2660  0F2B                     	;# 
  2661  0F2C                     	;# 
  2662  0F2D                     	;# 
  2663  0F9E                     	;# 
  2664  0FE4                     	;# 
  2665  0FE5                     	;# 
  2666  0FE6                     	;# 
  2667  0FE7                     	;# 
  2668  0FE8                     	;# 
  2669  0FE9                     	;# 
  2670  0FEA                     	;# 
  2671  0FEB                     	;# 
  2672  0FED                     	;# 
  2673  0FEE                     	;# 
  2674  0FEF                     	;# 
  2675                           
  2676                           	psect	idataBANK1
  2677  1876                     __pidataBANK1:	
  2678                           
  2679                           ;initializer for _MEM
  2680  1876  3400               	retlw	0
  2681  1877  3400               	retlw	0
  2682  1878  3480               	retlw	128
  2683  1879  3425               	retlw	37
  2684                           
  2685                           	psect	idataBANK4
  2686  1872                     __pidataBANK4:	
  2687                           
  2688                           ;initializer for _BAUD
  2689  1872  3480               	retlw	128
  2690  1873  3425               	retlw	37
  2691  1874  3400               	retlw	0
  2692  1875  3400               	retlw	0
  2693                           
  2694                           	psect	stringtext
  2695  0700                     __pstringtext:	
  2696  0700                     _ScanCodeFunctionNoE0:	
  2697  0700  3400               	retlw	0
  2698  0701  3411               	retlw	17
  2699  0702  3400               	retlw	0
  2700  0703  340C               	retlw	12
  2701  0704  340A               	retlw	10
  2702  0705  3406               	retlw	6
  2703  0706  3407               	retlw	7
  2704  0707  3414               	retlw	20
  2705  0708  3400               	retlw	0
  2706  0709  3412               	retlw	18
  2707  070A  3410               	retlw	16
  2708  070B  340E               	retlw	14
  2709  070C  340B               	retlw	11
  2710  070D  3400               	retlw	0
  2711  070E  3400               	retlw	0
  2712  070F  3400               	retlw	0
  2713  0710  3400               	retlw	0
  2714  0711  341C               	retlw	28
  2715  0712  3400               	retlw	0
  2716  0713  3400               	retlw	0
  2717  0714  341A               	retlw	26
  2718  0715  3400               	retlw	0
  2719  0716  3400               	retlw	0
  2720  0717  3400               	retlw	0
  2721  0718  3400               	retlw	0
  2722  0719  3400               	retlw	0
  2723  071A  3400               	retlw	0
  2724  071B  3400               	retlw	0
  2725  071C  3400               	retlw	0
  2726  071D  3400               	retlw	0
  2727  071E  3400               	retlw	0
  2728  071F  3400               	retlw	0
  2729  0720  3400               	retlw	0
  2730  0721  3400               	retlw	0
  2731  0722  3400               	retlw	0
  2732  0723  3400               	retlw	0
  2733  0724  3400               	retlw	0
  2734  0725  3400               	retlw	0
  2735  0726  3400               	retlw	0
  2736  0727  3400               	retlw	0
  2737  0728  3400               	retlw	0
  2738  0729  3400               	retlw	0
  2739  072A  3400               	retlw	0
  2740  072B  3400               	retlw	0
  2741  072C  3400               	retlw	0
  2742  072D  3400               	retlw	0
  2743  072E  3400               	retlw	0
  2744  072F  3400               	retlw	0
  2745  0730  3400               	retlw	0
  2746  0731  3400               	retlw	0
  2747  0732  3400               	retlw	0
  2748  0733  3400               	retlw	0
  2749  0734  3400               	retlw	0
  2750  0735  3400               	retlw	0
  2751  0736  3400               	retlw	0
  2752  0737  3400               	retlw	0
  2753  0738  3400               	retlw	0
  2754  0739  3400               	retlw	0
  2755  073A  3400               	retlw	0
  2756  073B  3400               	retlw	0
  2757  073C  3400               	retlw	0
  2758  073D  3400               	retlw	0
  2759  073E  3400               	retlw	0
  2760  073F  3400               	retlw	0
  2761  0740  3400               	retlw	0
  2762  0741  3400               	retlw	0
  2763  0742  3400               	retlw	0
  2764  0743  3400               	retlw	0
  2765  0744  3400               	retlw	0
  2766  0745  3400               	retlw	0
  2767  0746  3400               	retlw	0
  2768  0747  3400               	retlw	0
  2769  0748  3400               	retlw	0
  2770  0749  3400               	retlw	0
  2771  074A  3400               	retlw	0
  2772  074B  3400               	retlw	0
  2773  074C  3400               	retlw	0
  2774  074D  3400               	retlw	0
  2775  074E  3400               	retlw	0
  2776  074F  3400               	retlw	0
  2777  0750  3400               	retlw	0
  2778  0751  3400               	retlw	0
  2779  0752  3400               	retlw	0
  2780  0753  3400               	retlw	0
  2781  0754  3400               	retlw	0
  2782  0755  3400               	retlw	0
  2783  0756  3400               	retlw	0
  2784  0757  3400               	retlw	0
  2785  0758  3400               	retlw	0
  2786  0759  3400               	retlw	0
  2787  075A  3400               	retlw	0
  2788  075B  3400               	retlw	0
  2789  075C  3400               	retlw	0
  2790  075D  3400               	retlw	0
  2791  075E  3400               	retlw	0
  2792  075F  3400               	retlw	0
  2793  0760  3400               	retlw	0
  2794  0761  3400               	retlw	0
  2795  0762  3400               	retlw	0
  2796  0763  3400               	retlw	0
  2797  0764  3400               	retlw	0
  2798  0765  3400               	retlw	0
  2799  0766  3400               	retlw	0
  2800  0767  3400               	retlw	0
  2801  0768  3400               	retlw	0
  2802  0769  3400               	retlw	0
  2803  076A  3400               	retlw	0
  2804  076B  3400               	retlw	0
  2805  076C  3400               	retlw	0
  2806  076D  3400               	retlw	0
  2807  076E  3400               	retlw	0
  2808  076F  3400               	retlw	0
  2809  0770  3400               	retlw	0
  2810  0771  3400               	retlw	0
  2811  0772  3400               	retlw	0
  2812  0773  3400               	retlw	0
  2813  0774  3400               	retlw	0
  2814  0775  3400               	retlw	0
  2815  0776  3400               	retlw	0
  2816  0777  3400               	retlw	0
  2817  0778  3413               	retlw	19
  2818  0779  3400               	retlw	0
  2819  077A  3400               	retlw	0
  2820  077B  3400               	retlw	0
  2821  077C  3400               	retlw	0
  2822  077D  3400               	retlw	0
  2823  077E  3400               	retlw	0
  2824  077F  3400               	retlw	0
  2825  0780  3400               	retlw	0
  2826  0781  3400               	retlw	0
  2827  0782  3400               	retlw	0
  2828  0783  340F               	retlw	15
  2829  0784                     __end_of_ScanCodeFunctionNoE0:	
  2830  0784                     _ScanCode:	
  2831  0784  3409               	retlw	9
  2832  0785  3460               	retlw	96
  2833  0786  3400               	retlw	0
  2834  0787  3400               	retlw	0
  2835  0788  3400               	retlw	0
  2836  0789  3400               	retlw	0
  2837  078A  3400               	retlw	0
  2838  078B  3400               	retlw	0
  2839  078C  3471               	retlw	113
  2840  078D  3431               	retlw	49
  2841  078E  3400               	retlw	0
  2842  078F  3400               	retlw	0
  2843  0790  3400               	retlw	0
  2844  0791  347A               	retlw	122
  2845  0792  3473               	retlw	115
  2846  0793  3461               	retlw	97
  2847  0794  3477               	retlw	119
  2848  0795  3432               	retlw	50
  2849  0796  3400               	retlw	0
  2850  0797  3400               	retlw	0
  2851  0798  3463               	retlw	99
  2852  0799  3478               	retlw	120
  2853  079A  3464               	retlw	100
  2854  079B  3465               	retlw	101
  2855  079C  3434               	retlw	52
  2856  079D  3433               	retlw	51
  2857  079E  3400               	retlw	0
  2858  079F  3400               	retlw	0
  2859  07A0  3420               	retlw	32
  2860  07A1  3476               	retlw	118
  2861  07A2  3466               	retlw	102
  2862  07A3  3474               	retlw	116
  2863  07A4  3472               	retlw	114
  2864  07A5  3435               	retlw	53
  2865  07A6  3400               	retlw	0
  2866  07A7  3400               	retlw	0
  2867  07A8  346E               	retlw	110
  2868  07A9  3462               	retlw	98
  2869  07AA  3468               	retlw	104
  2870  07AB  3467               	retlw	103
  2871  07AC  3479               	retlw	121
  2872  07AD  3436               	retlw	54
  2873  07AE  3400               	retlw	0
  2874  07AF  3400               	retlw	0
  2875  07B0  3400               	retlw	0
  2876  07B1  346D               	retlw	109
  2877  07B2  346A               	retlw	106
  2878  07B3  3475               	retlw	117
  2879  07B4  3437               	retlw	55
  2880  07B5  3438               	retlw	56
  2881  07B6  3400               	retlw	0
  2882  07B7  3400               	retlw	0
  2883  07B8  342C               	retlw	44
  2884  07B9  346B               	retlw	107
  2885  07BA  3469               	retlw	105
  2886  07BB  346F               	retlw	111
  2887  07BC  3430               	retlw	48
  2888  07BD  3439               	retlw	57
  2889  07BE  3400               	retlw	0
  2890  07BF  3400               	retlw	0
  2891  07C0  342E               	retlw	46
  2892  07C1  342F               	retlw	47
  2893  07C2  346C               	retlw	108
  2894  07C3  343B               	retlw	59
  2895  07C4  3470               	retlw	112
  2896  07C5  342D               	retlw	45
  2897  07C6  3400               	retlw	0
  2898  07C7  3400               	retlw	0
  2899  07C8  3400               	retlw	0
  2900  07C9  3427               	retlw	39
  2901  07CA  3400               	retlw	0
  2902  07CB  345B               	retlw	91
  2903  07CC  343D               	retlw	61
  2904  07CD  3400               	retlw	0
  2905  07CE  3400               	retlw	0
  2906  07CF  3400               	retlw	0
  2907  07D0  3400               	retlw	0
  2908  07D1  340D               	retlw	13
  2909  07D2  345D               	retlw	93
  2910  07D3  3400               	retlw	0
  2911  07D4  345C               	retlw	92
  2912  07D5  3400               	retlw	0
  2913  07D6  3400               	retlw	0
  2914  07D7  3400               	retlw	0
  2915  07D8  3400               	retlw	0
  2916  07D9  3400               	retlw	0
  2917  07DA  3400               	retlw	0
  2918  07DB  3400               	retlw	0
  2919  07DC  3400               	retlw	0
  2920  07DD  3408               	retlw	8
  2921  07DE  3400               	retlw	0
  2922  07DF  3400               	retlw	0
  2923  07E0  3431               	retlw	49
  2924  07E1  3400               	retlw	0
  2925  07E2  3434               	retlw	52
  2926  07E3  3437               	retlw	55
  2927  07E4  3400               	retlw	0
  2928  07E5  3400               	retlw	0
  2929  07E6  3400               	retlw	0
  2930  07E7  3430               	retlw	48
  2931  07E8  342E               	retlw	46
  2932  07E9  3432               	retlw	50
  2933  07EA  3435               	retlw	53
  2934  07EB  3436               	retlw	54
  2935  07EC  3438               	retlw	56
  2936  07ED  341B               	retlw	27
  2937  07EE  3400               	retlw	0
  2938  07EF  3400               	retlw	0
  2939  07F0  342B               	retlw	43
  2940  07F1  3433               	retlw	51
  2941  07F2  342D               	retlw	45
  2942  07F3  342A               	retlw	42
  2943  07F4  3439               	retlw	57
  2944  07F5                     __end_of_ScanCode:	
  2945  07F5                     _ScanCodeSHIFT:	
  2946  07F5  3409               	retlw	9
  2947  07F6  347E               	retlw	126
  2948  07F7  3400               	retlw	0
  2949  07F8  3400               	retlw	0
  2950  07F9  3400               	retlw	0
  2951  07FA  3400               	retlw	0
  2952  07FB  3400               	retlw	0
  2953  07FC  3400               	retlw	0
  2954  07FD  3451               	retlw	81
  2955  07FE  3421               	retlw	33
  2956  07FF  3400               	retlw	0
  2957  0800  3400               	retlw	0
  2958  0801  3400               	retlw	0
  2959  0802  345A               	retlw	90
  2960  0803  3453               	retlw	83
  2961  0804  3441               	retlw	65
  2962  0805  3457               	retlw	87
  2963  0806  3440               	retlw	64
  2964  0807  3400               	retlw	0
  2965  0808  3400               	retlw	0
  2966  0809  3443               	retlw	67
  2967  080A  3458               	retlw	88
  2968  080B  3444               	retlw	68
  2969  080C  3445               	retlw	69
  2970  080D  3424               	retlw	36
  2971  080E  3423               	retlw	35
  2972  080F  3400               	retlw	0
  2973  0810  3400               	retlw	0
  2974  0811  3420               	retlw	32
  2975  0812  3456               	retlw	86
  2976  0813  3446               	retlw	70
  2977  0814  3454               	retlw	84
  2978  0815  3452               	retlw	82
  2979  0816  3425               	retlw	37
  2980  0817  3400               	retlw	0
  2981  0818  3400               	retlw	0
  2982  0819  344E               	retlw	78
  2983  081A  3442               	retlw	66
  2984  081B  3448               	retlw	72
  2985  081C  3447               	retlw	71
  2986  081D  3459               	retlw	89
  2987  081E  345E               	retlw	94
  2988  081F  3400               	retlw	0
  2989  0820  3400               	retlw	0
  2990  0821  3400               	retlw	0
  2991  0822  344D               	retlw	77
  2992  0823  344A               	retlw	74
  2993  0824  3455               	retlw	85
  2994  0825  3426               	retlw	38
  2995  0826  342A               	retlw	42
  2996  0827  3400               	retlw	0
  2997  0828  3400               	retlw	0
  2998  0829  343C               	retlw	60
  2999  082A  344B               	retlw	75
  3000  082B  3449               	retlw	73
  3001  082C  344F               	retlw	79
  3002  082D  3429               	retlw	41
  3003  082E  3428               	retlw	40
  3004  082F  3400               	retlw	0
  3005  0830  3400               	retlw	0
  3006  0831  343E               	retlw	62
  3007  0832  343F               	retlw	63
  3008  0833  344C               	retlw	76
  3009  0834  343A               	retlw	58
  3010  0835  3450               	retlw	80
  3011  0836  345F               	retlw	95
  3012  0837  3400               	retlw	0
  3013  0838  3400               	retlw	0
  3014  0839  3400               	retlw	0
  3015  083A  3422               	retlw	34
  3016  083B  3400               	retlw	0
  3017  083C  347B               	retlw	123
  3018  083D  342B               	retlw	43
  3019  083E  3400               	retlw	0
  3020  083F  3400               	retlw	0
  3021  0840  3400               	retlw	0
  3022  0841  3400               	retlw	0
  3023  0842  340D               	retlw	13
  3024  0843  347D               	retlw	125
  3025  0844  3400               	retlw	0
  3026  0845  347C               	retlw	124
  3027  0846  3400               	retlw	0
  3028  0847  3400               	retlw	0
  3029  0848  3400               	retlw	0
  3030  0849  3400               	retlw	0
  3031  084A  3400               	retlw	0
  3032  084B  3400               	retlw	0
  3033  084C  3400               	retlw	0
  3034  084D  3400               	retlw	0
  3035  084E  3408               	retlw	8
  3036  084F  3400               	retlw	0
  3037  0850  3400               	retlw	0
  3038  0851  3431               	retlw	49
  3039  0852  3400               	retlw	0
  3040  0853  3434               	retlw	52
  3041  0854  3437               	retlw	55
  3042  0855  3400               	retlw	0
  3043  0856  3400               	retlw	0
  3044  0857  3400               	retlw	0
  3045  0858  3430               	retlw	48
  3046  0859  342E               	retlw	46
  3047  085A  3432               	retlw	50
  3048  085B  3435               	retlw	53
  3049  085C  3436               	retlw	54
  3050  085D  3438               	retlw	56
  3051  085E  341B               	retlw	27
  3052  085F  3400               	retlw	0
  3053  0860  3400               	retlw	0
  3054  0861  342B               	retlw	43
  3055  0862  3433               	retlw	51
  3056  0863  342D               	retlw	45
  3057  0864  342A               	retlw	42
  3058  0865  3439               	retlw	57
  3059  0866                     __end_of_ScanCodeSHIFT:	
  3060  0866                     _ScanCodeFunctionE0:	
  3061  0866  341E               	retlw	30
  3062  0867  3400               	retlw	0
  3063  0868  3400               	retlw	0
  3064  0869  341F               	retlw	31
  3065  086A  3400               	retlw	0
  3066  086B  3400               	retlw	0
  3067  086C  3400               	retlw	0
  3068  086D  3400               	retlw	0
  3069  086E  3400               	retlw	0
  3070  086F  3400               	retlw	0
  3071  0870  3400               	retlw	0
  3072  0871  3400               	retlw	0
  3073  0872  3400               	retlw	0
  3074  0873  3400               	retlw	0
  3075  0874  3419               	retlw	25
  3076  0875  3400               	retlw	0
  3077  0876  3400               	retlw	0
  3078  0877  3400               	retlw	0
  3079  0878  3400               	retlw	0
  3080  0879  3400               	retlw	0
  3081  087A  3400               	retlw	0
  3082  087B  3400               	retlw	0
  3083  087C  341D               	retlw	29
  3084  087D  3400               	retlw	0
  3085  087E  3400               	retlw	0
  3086  087F  3400               	retlw	0
  3087  0880  3400               	retlw	0
  3088  0881  3400               	retlw	0
  3089  0882  3400               	retlw	0
  3090  0883  3400               	retlw	0
  3091  0884  3400               	retlw	0
  3092  0885  3400               	retlw	0
  3093  0886  3400               	retlw	0
  3094  0887  3400               	retlw	0
  3095  0888  3400               	retlw	0
  3096  0889  3400               	retlw	0
  3097  088A  3400               	retlw	0
  3098  088B  3400               	retlw	0
  3099  088C  3400               	retlw	0
  3100  088D  3400               	retlw	0
  3101  088E  3400               	retlw	0
  3102  088F  3400               	retlw	0
  3103  0890  3400               	retlw	0
  3104  0891  3400               	retlw	0
  3105  0892  3400               	retlw	0
  3106  0893  3400               	retlw	0
  3107  0894  3400               	retlw	0
  3108  0895  3400               	retlw	0
  3109  0896  3400               	retlw	0
  3110  0897  3400               	retlw	0
  3111  0898  3400               	retlw	0
  3112  0899  3400               	retlw	0
  3113  089A  3400               	retlw	0
  3114  089B  3400               	retlw	0
  3115  089C  3400               	retlw	0
  3116  089D  3400               	retlw	0
  3117  089E  3400               	retlw	0
  3118  089F  342F               	retlw	47
  3119  08A0  3400               	retlw	0
  3120  08A1  3400               	retlw	0
  3121  08A2  3400               	retlw	0
  3122  08A3  3400               	retlw	0
  3123  08A4  3400               	retlw	0
  3124  08A5  3400               	retlw	0
  3125  08A6  3400               	retlw	0
  3126  08A7  3400               	retlw	0
  3127  08A8  3400               	retlw	0
  3128  08A9  3400               	retlw	0
  3129  08AA  3400               	retlw	0
  3130  08AB  3400               	retlw	0
  3131  08AC  3400               	retlw	0
  3132  08AD  3400               	retlw	0
  3133  08AE  3400               	retlw	0
  3134  08AF  340D               	retlw	13
  3135  08B0  3400               	retlw	0
  3136  08B1  3400               	retlw	0
  3137  08B2  3400               	retlw	0
  3138  08B3  3400               	retlw	0
  3139  08B4  3400               	retlw	0
  3140  08B5  3400               	retlw	0
  3141  08B6  3400               	retlw	0
  3142  08B7  3400               	retlw	0
  3143  08B8  3400               	retlw	0
  3144  08B9  3400               	retlw	0
  3145  08BA  3400               	retlw	0
  3146  08BB  3400               	retlw	0
  3147  08BC  3400               	retlw	0
  3148  08BD  3400               	retlw	0
  3149  08BE  3401               	retlw	1
  3150  08BF  3400               	retlw	0
  3151  08C0  3403               	retlw	3
  3152  08C1  3416               	retlw	22
  3153  08C2  3400               	retlw	0
  3154  08C3  3400               	retlw	0
  3155  08C4  3400               	retlw	0
  3156  08C5  3415               	retlw	21
  3157  08C6  347F               	retlw	127
  3158  08C7  3404               	retlw	4
  3159  08C8  3400               	retlw	0
  3160  08C9  3405               	retlw	5
  3161  08CA  3402               	retlw	2
  3162  08CB  3400               	retlw	0
  3163  08CC  3400               	retlw	0
  3164  08CD  3400               	retlw	0
  3165  08CE  3400               	retlw	0
  3166  08CF  3418               	retlw	24
  3167  08D0  3400               	retlw	0
  3168  08D1  3400               	retlw	0
  3169  08D2  3417               	retlw	23
  3170  08D3                     __end_of_ScanCodeFunctionE0:	
  3171  08D3                     _dpowers:	
  3172  08D3  3401               	retlw	1
  3173  08D4  3400               	retlw	0
  3174  08D5  3400               	retlw	0
  3175  08D6  3400               	retlw	0
  3176  08D7  340A               	retlw	10
  3177  08D8  3400               	retlw	0
  3178  08D9  3400               	retlw	0
  3179  08DA  3400               	retlw	0
  3180  08DB  3464               	retlw	100
  3181  08DC  3400               	retlw	0
  3182  08DD  3400               	retlw	0
  3183  08DE  3400               	retlw	0
  3184  08DF  34E8               	retlw	232
  3185  08E0  3403               	retlw	3
  3186  08E1  3400               	retlw	0
  3187  08E2  3400               	retlw	0
  3188  08E3  3410               	retlw	16
  3189  08E4  3427               	retlw	39
  3190  08E5  3400               	retlw	0
  3191  08E6  3400               	retlw	0
  3192  08E7  34A0               	retlw	160
  3193  08E8  3486               	retlw	134
  3194  08E9  3401               	retlw	1
  3195  08EA  3400               	retlw	0
  3196  08EB  3440               	retlw	64
  3197  08EC  3442               	retlw	66
  3198  08ED  340F               	retlw	15
  3199  08EE  3400               	retlw	0
  3200  08EF  3480               	retlw	128
  3201  08F0  3496               	retlw	150
  3202  08F1  3498               	retlw	152
  3203  08F2  3400               	retlw	0
  3204  08F3  3400               	retlw	0
  3205  08F4  34E1               	retlw	225
  3206  08F5  34F5               	retlw	245
  3207  08F6  3405               	retlw	5
  3208  08F7  3400               	retlw	0
  3209  08F8  34CA               	retlw	202
  3210  08F9  349A               	retlw	154
  3211  08FA  343B               	retlw	59
  3212  08FB                     __end_of_dpowers:	
  3213  08FB                     _EvenParityMSG:	
  3214  08FB  3420               	retlw	32
  3215  08FC  3477               	retlw	119
  3216  08FD  3469               	retlw	105
  3217  08FE  3474               	retlw	116
  3218  08FF  3468               	retlw	104
  3219  0900  3420               	retlw	32
  3220  0901  3445               	retlw	69
  3221  0902  3476               	retlw	118
  3222  0903  3465               	retlw	101
  3223  0904  346E               	retlw	110
  3224  0905  3420               	retlw	32
  3225  0906  3470               	retlw	112
  3226  0907  3461               	retlw	97
  3227  0908  3472               	retlw	114
  3228  0909  3469               	retlw	105
  3229  090A  3474               	retlw	116
  3230  090B  3479               	retlw	121
  3231  090C  3420               	retlw	32
  3232  090D  3462               	retlw	98
  3233  090E  3469               	retlw	105
  3234  090F  3474               	retlw	116
  3235  0910  3400               	retlw	0
  3236  0911                     __end_of_EvenParityMSG:	
  3237  0911                     _OddParityMSG:	
  3238  0911  3420               	retlw	32
  3239  0912  3477               	retlw	119
  3240  0913  3469               	retlw	105
  3241  0914  3474               	retlw	116
  3242  0915  3468               	retlw	104
  3243  0916  3420               	retlw	32
  3244  0917  344F               	retlw	79
  3245  0918  3464               	retlw	100
  3246  0919  3464               	retlw	100
  3247  091A  3420               	retlw	32
  3248  091B  3470               	retlw	112
  3249  091C  3461               	retlw	97
  3250  091D  3472               	retlw	114
  3251  091E  3469               	retlw	105
  3252  091F  3474               	retlw	116
  3253  0920  3479               	retlw	121
  3254  0921  3420               	retlw	32
  3255  0922  3462               	retlw	98
  3256  0923  3469               	retlw	105
  3257  0924  3474               	retlw	116
  3258  0925  3400               	retlw	0
  3259  0926                     __end_of_OddParityMSG:	
  3260  0926                     _NoParityMSG:	
  3261  0926  3420               	retlw	32
  3262  0927  3477               	retlw	119
  3263  0928  3469               	retlw	105
  3264  0929  3474               	retlw	116
  3265  092A  3468               	retlw	104
  3266  092B  3420               	retlw	32
  3267  092C  344E               	retlw	78
  3268  092D  346F               	retlw	111
  3269  092E  3420               	retlw	32
  3270  092F  3470               	retlw	112
  3271  0930  3461               	retlw	97
  3272  0931  3472               	retlw	114
  3273  0932  3469               	retlw	105
  3274  0933  3474               	retlw	116
  3275  0934  3479               	retlw	121
  3276  0935  3420               	retlw	32
  3277  0936  3462               	retlw	98
  3278  0937  3469               	retlw	105
  3279  0938  3474               	retlw	116
  3280  0939  3400               	retlw	0
  3281  093A                     __end_of_NoParityMSG:	
  3282  093A                     _SpaceParityMSG:	
  3283  093A  3420               	retlw	32
  3284  093B  3477               	retlw	119
  3285  093C  3469               	retlw	105
  3286  093D  3474               	retlw	116
  3287  093E  3468               	retlw	104
  3288  093F  3420               	retlw	32
  3289  0940  3453               	retlw	83
  3290  0941  3470               	retlw	112
  3291  0942  3461               	retlw	97
  3292  0943  3463               	retlw	99
  3293  0944  3465               	retlw	101
  3294  0945  3420               	retlw	32
  3295  0946  3462               	retlw	98
  3296  0947  3469               	retlw	105
  3297  0948  3474               	retlw	116
  3298  0949  3400               	retlw	0
  3299  094A                     __end_of_SpaceParityMSG:	
  3300  094A                     _MarkParityMSG:	
  3301  094A  3420               	retlw	32
  3302  094B  3477               	retlw	119
  3303  094C  3469               	retlw	105
  3304  094D  3474               	retlw	116
  3305  094E  3468               	retlw	104
  3306  094F  3420               	retlw	32
  3307  0950  344D               	retlw	77
  3308  0951  3461               	retlw	97
  3309  0952  3472               	retlw	114
  3310  0953  346B               	retlw	107
  3311  0954  3420               	retlw	32
  3312  0955  3462               	retlw	98
  3313  0956  3469               	retlw	105
  3314  0957  3474               	retlw	116
  3315  0958  3400               	retlw	0
  3316  0959                     __end_of_MarkParityMSG:	
  3317  0959                     _VoltageMSG:	
  3318  0959  3456               	retlw	86
  3319  095A  346F               	retlw	111
  3320  095B  346C               	retlw	108
  3321  095C  3474               	retlw	116
  3322  095D  3461               	retlw	97
  3323  095E  3467               	retlw	103
  3324  095F  3465               	retlw	101
  3325  0960  3420               	retlw	32
  3326  0961  3474               	retlw	116
  3327  0962  346F               	retlw	111
  3328  0963  346F               	retlw	111
  3329  0964  3420               	retlw	32
  3330  0965  3400               	retlw	0
  3331  0966                     __end_of_VoltageMSG:	
  3332  0966                     _Version:	
  3333  0966  3431               	retlw	49
  3334  0967  342E               	retlw	46
  3335  0968  3433               	retlw	51
  3336  0969  345F               	retlw	95
  3337  096A  3444               	retlw	68
  3338  096B  3457               	retlw	87
  3339  096C  3430               	retlw	48
  3340  096D  3461               	retlw	97
  3341  096E  3400               	retlw	0
  3342  096F                     __end_of_Version:	
  3343  000B                     _INTCON	set	11
  3344  000B                     _INTCONbits	set	11
  3345  0011                     _PIR1bits	set	17
  3346  000C                     _PORTA	set	12
  3347  001B                     _PR2	set	27
  3348  001C                     _T2CON	set	28
  3349  001C                     _T2CONbits	set	28
  3350  001A                     _TMR2	set	26
  3351  009D                     _ADCON0	set	157
  3352  009E                     _ADCON1	set	158
  3353  009F                     _ADCON2	set	159
  3354  009C                     _ADRESH	set	156
  3355  009B                     _ADRESL	set	155
  3356  0095                     _OPTION_REGbits	set	149
  3357  0099                     _OSCCON	set	153
  3358  009A                     _OSCSTAT	set	154
  3359  0091                     _PIE1	set	145
  3360  0091                     _PIE1bits	set	145
  3361  008C                     _TRISAbits	set	140
  3362  008E                     _TRISCbits	set	142
  3363  04D0                     _HFIOFS	set	1232
  3364  0117                     _FVRCON	set	279
  3365  010C                     _LATA	set	268
  3366  010E                     _LATC	set	270
  3367  018C                     _ANSELA	set	396
  3368  018E                     _ANSELC	set	398
  3369  019F                     _BAUD1CON	set	415
  3370  0192                     _PMADRH	set	402
  3371  0191                     _PMADRL	set	401
  3372  0195                     _PMCON1	set	405
  3373  0196                     _PMCON2	set	406
  3374  0194                     _PMDATH	set	404
  3375  0193                     _PMDATL	set	403
  3376  019D                     _RC1STA	set	413
  3377  019D                     _RC1STAbits	set	413
  3378  0199                     _RCREG	set	409
  3379  019D                     _RCSTA	set	413
  3380  019D                     _RCSTAbits	set	413
  3381  019B                     _SPBRG	set	411
  3382  019C                     _SPBRGH	set	412
  3383  019E                     _TX1STA	set	414
  3384  019E                     _TX1STAbits	set	414
  3385  019A                     _TXREG	set	410
  3386  019E                     _TXSTAbits	set	414
  3387  020C                     _WPUA	set	524
  3388  020E                     _WPUC	set	526
  3389  029A                     _CCP2CONbits	set	666
  3390  0393                     _IOCAF	set	915
  3391  0392                     _IOCAN	set	914
  3392  0391                     _IOCAP	set	913
  3393  0E25                     _CKPPS	set	3621
  3394  0E0F                     _PPSLOCK	set	3599
  3395  0E24                     _RXPPS	set	3620
  3396  0EA2                     _RC2PPS	set	3746
  3397  096F                     STR_6:	
  3398  096F  3443               	retlw	67	;'C'
  3399  0970  3468               	retlw	104	;'h'
  3400  0971  3461               	retlw	97	;'a'
  3401  0972  346E               	retlw	110	;'n'
  3402  0973  3467               	retlw	103	;'g'
  3403  0974  3465               	retlw	101	;'e'
  3404  0975  3420               	retlw	32	;' '
  3405  0976  3442               	retlw	66	;'B'
  3406  0977  3441               	retlw	65	;'A'
  3407  0978  3455               	retlw	85	;'U'
  3408  0979  3444               	retlw	68	;'D'
  3409  097A  343A               	retlw	58	;':'
  3410  097B  3420               	retlw	32	;' '
  3411  097C  3422               	retlw	34	;'"'
  3412  097D  3443               	retlw	67	;'C'
  3413  097E  344E               	retlw	78	;'N'
  3414  097F  3454               	retlw	84	;'T'
  3415  0980  3420               	retlw	32	;' '
  3416  0981  342B               	retlw	43	;'+'
  3417  0982  3420               	retlw	32	;' '
  3418  0983  3441               	retlw	65	;'A'
  3419  0984  344C               	retlw	76	;'L'
  3420  0985  3454               	retlw	84	;'T'
  3421  0986  3420               	retlw	32	;' '
  3422  0987  342B               	retlw	43	;'+'
  3423  0988  3420               	retlw	32	;' '
  3424  0989  3444               	retlw	68	;'D'
  3425  098A  3445               	retlw	69	;'E'
  3426  098B  344C               	retlw	76	;'L'
  3427  098C  3422               	retlw	34	;'"'
  3428  098D  340D               	retlw	13
  3429  098E  340A               	retlw	10
  3430  098F  3400               	retlw	0
  3431  0990                     STR_3:	
  3432  0990  340D               	retlw	13
  3433  0991  340A               	retlw	10
  3434  0992  3450               	retlw	80	;'P'
  3435  0993  3453               	retlw	83	;'S'
  3436  0994  342F               	retlw	47	;'/'
  3437  0995  3432               	retlw	50	;'2'
  3438  0996  3420               	retlw	32	;' '
  3439  0997  344B               	retlw	75	;'K'
  3440  0998  3465               	retlw	101	;'e'
  3441  0999  3479               	retlw	121	;'y'
  3442  099A  3462               	retlw	98	;'b'
  3443  099B  346F               	retlw	111	;'o'
  3444  099C  3461               	retlw	97	;'a'
  3445  099D  3472               	retlw	114	;'r'
  3446  099E  3464               	retlw	100	;'d'
  3447  099F  3420               	retlw	32	;' '
  3448  09A0  3474               	retlw	116	;'t'
  3449  09A1  346F               	retlw	111	;'o'
  3450  09A2  3420               	retlw	32	;' '
  3451  09A3  3452               	retlw	82	;'R'
  3452  09A4  3453               	retlw	83	;'S'
  3453  09A5  342D               	retlw	45	;'-'
  3454  09A6  3432               	retlw	50	;'2'
  3455  09A7  3433               	retlw	51	;'3'
  3456  09A8  3432               	retlw	50	;'2'
  3457  09A9  340D               	retlw	13
  3458  09AA  340A               	retlw	10
  3459  09AB  3400               	retlw	0
  3460  09AC                     STR_18:	
  3461  09AC  3442               	retlw	66	;'B'
  3462  09AD  3461               	retlw	97	;'a'
  3463  09AE  3475               	retlw	117	;'u'
  3464  09AF  3464               	retlw	100	;'d'
  3465  09B0  3420               	retlw	32	;' '
  3466  09B1  3477               	retlw	119	;'w'
  3467  09B2  3469               	retlw	105	;'i'
  3468  09B3  346C               	retlw	108	;'l'
  3469  09B4  346C               	retlw	108	;'l'
  3470  09B5  3420               	retlw	32	;' '
  3471  09B6  3462               	retlw	98	;'b'
  3472  09B7  3465               	retlw	101	;'e'
  3473  09B8  3420               	retlw	32	;' '
  3474  09B9  3473               	retlw	115	;'s'
  3475  09BA  3465               	retlw	101	;'e'
  3476  09BB  3474               	retlw	116	;'t'
  3477  09BC  3420               	retlw	32	;' '
  3478  09BD  3474               	retlw	116	;'t'
  3479  09BE  346F               	retlw	111	;'o'
  3480  09BF  3420               	retlw	32	;' '
  3481  09C0  3425               	retlw	37	;'%'
  3482  09C1  346C               	retlw	108	;'l'
  3483  09C2  3475               	retlw	117	;'u'
  3484  09C3  3400               	retlw	0
  3485  09C4                     STR_10:	
  3486  09C4  3446               	retlw	70	;'F'
  3487  09C5  346C               	retlw	108	;'l'
  3488  09C6  3461               	retlw	97	;'a'
  3489  09C7  3473               	retlw	115	;'s'
  3490  09C8  3468               	retlw	104	;'h'
  3491  09C9  3420               	retlw	32	;' '
  3492  09CA  3450               	retlw	80	;'P'
  3493  09CB  3472               	retlw	114	;'r'
  3494  09CC  346F               	retlw	111	;'o'
  3495  09CD  3467               	retlw	103	;'g'
  3496  09CE  3472               	retlw	114	;'r'
  3497  09CF  3461               	retlw	97	;'a'
  3498  09D0  346D               	retlw	109	;'m'
  3499  09D1  3420               	retlw	32	;' '
  3500  09D2  3446               	retlw	70	;'F'
  3501  09D3  3461               	retlw	97	;'a'
  3502  09D4  3469               	retlw	105	;'i'
  3503  09D5  346C               	retlw	108	;'l'
  3504  09D6  340D               	retlw	13
  3505  09D7  340A               	retlw	10
  3506  09D8  3400               	retlw	0
  3507  09D9                     STR_20:	
  3508  09D9  3442               	retlw	66	;'B'
  3509  09DA  3461               	retlw	97	;'a'
  3510  09DB  3475               	retlw	117	;'u'
  3511  09DC  3464               	retlw	100	;'d'
  3512  09DD  3420               	retlw	32	;' '
  3513  09DE  344F               	retlw	79	;'O'
  3514  09DF  3475               	retlw	117	;'u'
  3515  09E0  3474               	retlw	116	;'t'
  3516  09E1  3420               	retlw	32	;' '
  3517  09E2  346F               	retlw	111	;'o'
  3518  09E3  3466               	retlw	102	;'f'
  3519  09E4  3420               	retlw	32	;' '
  3520  09E5  3452               	retlw	82	;'R'
  3521  09E6  3461               	retlw	97	;'a'
  3522  09E7  346E               	retlw	110	;'n'
  3523  09E8  3467               	retlw	103	;'g'
  3524  09E9  3465               	retlw	101	;'e'
  3525  09EA  340D               	retlw	13
  3526  09EB  340A               	retlw	10
  3527  09EC  3400               	retlw	0
  3528  09ED                     STR_14:	
  3529  09ED  3445               	retlw	69	;'E'
  3530  09EE  346E               	retlw	110	;'n'
  3531  09EF  3474               	retlw	116	;'t'
  3532  09F0  3465               	retlw	101	;'e'
  3533  09F1  3472               	retlw	114	;'r'
  3534  09F2  3420               	retlw	32	;' '
  3535  09F3  3442               	retlw	66	;'B'
  3536  09F4  3461               	retlw	97	;'a'
  3537  09F5  3475               	retlw	117	;'u'
  3538  09F6  3464               	retlw	100	;'d'
  3539  09F7  3420               	retlw	32	;' '
  3540  09F8  3472               	retlw	114	;'r'
  3541  09F9  3461               	retlw	97	;'a'
  3542  09FA  3474               	retlw	116	;'t'
  3543  09FB  3465               	retlw	101	;'e'
  3544  09FC  3420               	retlw	32	;' '
  3545  09FD  340D               	retlw	13
  3546  09FE  340A               	retlw	10
  3547  09FF  3400               	retlw	0
  3548  0A00                     STR_15:	
  3549  0A00  3442               	retlw	66	;'B'
  3550  0A01  3461               	retlw	97	;'a'
  3551  0A02  3475               	retlw	117	;'u'
  3552  0A03  3464               	retlw	100	;'d'
  3553  0A04  3420               	retlw	32	;' '
  3554  0A05  3452               	retlw	82	;'R'
  3555  0A06  3465               	retlw	101	;'e'
  3556  0A07  3473               	retlw	115	;'s'
  3557  0A08  3465               	retlw	101	;'e'
  3558  0A09  3474               	retlw	116	;'t'
  3559  0A0A  3420               	retlw	32	;' '
  3560  0A0B  3474               	retlw	116	;'t'
  3561  0A0C  346F               	retlw	111	;'o'
  3562  0A0D  3420               	retlw	32	;' '
  3563  0A0E  3439               	retlw	57	;'9'
  3564  0A0F  3436               	retlw	54	;'6'
  3565  0A10  3430               	retlw	48	;'0'
  3566  0A11  3430               	retlw	48	;'0'
  3567  0A12  3400               	retlw	0
  3568  0A13                     STR_4:	
  3569  0A13  3446               	retlw	70	;'F'
  3570  0A14  3469               	retlw	105	;'i'
  3571  0A15  3472               	retlw	114	;'r'
  3572  0A16  346D               	retlw	109	;'m'
  3573  0A17  3477               	retlw	119	;'w'
  3574  0A18  3461               	retlw	97	;'a'
  3575  0A19  3472               	retlw	114	;'r'
  3576  0A1A  3465               	retlw	101	;'e'
  3577  0A1B  3420               	retlw	32	;' '
  3578  0A1C  3456               	retlw	86	;'V'
  3579  0A1D  3465               	retlw	101	;'e'
  3580  0A1E  3472               	retlw	114	;'r'
  3581  0A1F  3473               	retlw	115	;'s'
  3582  0A20  3469               	retlw	105	;'i'
  3583  0A21  346F               	retlw	111	;'o'
  3584  0A22  346E               	retlw	110	;'n'
  3585  0A23  343A               	retlw	58	;':'
  3586  0A24  3420               	retlw	32	;' '
  3587  0A25  3400               	retlw	0
  3588  0A26                     STR_11:	
  3589  0A26  3442               	retlw	66	;'B'
  3590  0A27  3461               	retlw	97	;'a'
  3591  0A28  3475               	retlw	117	;'u'
  3592  0A29  3464               	retlw	100	;'d'
  3593  0A2A  3420               	retlw	32	;' '
  3594  0A2B  3469               	retlw	105	;'i'
  3595  0A2C  3473               	retlw	115	;'s'
  3596  0A2D  3420               	retlw	32	;' '
  3597  0A2E  3425               	retlw	37	;'%'
  3598  0A2F  346C               	retlw	108	;'l'
  3599  0A30  3475               	retlw	117	;'u'
  3600  0A31  3400               	retlw	0
  3601  0A32                     STR_2:	
  3602  0A32  3448               	retlw	72	;'H'
  3603  0A33  3469               	retlw	105	;'i'
  3604  0A34  3467               	retlw	103	;'g'
  3605  0A35  3468               	retlw	104	;'h'
  3606  0A36  3421               	retlw	33	;'!'
  3607  0A37  340D               	retlw	13
  3608  0A38  340A               	retlw	10
  3609  0A39  3400               	retlw	0
  3610  0A3A                     STR_1:	
  3611  0A3A  344C               	retlw	76	;'L'
  3612  0A3B  346F               	retlw	111	;'o'
  3613  0A3C  3477               	retlw	119	;'w'
  3614  0A3D  3421               	retlw	33	;'!'
  3615  0A3E  340D               	retlw	13
  3616  0A3F  340A               	retlw	10
  3617  0A40  3400               	retlw	0
  3618  09FD                     
  3619                           ; #config settings
  3620  0000                     
  3621                           	psect	cinit
  3622  00EF                     start_initialization:	
  3623  00EF                     __initialization:	
  3624                           
  3625                           ; Clear objects allocated to BANK1
  3626  00EF  30C6               	movlw	low __pbssBANK1
  3627  00F0  0084               	movwf	4
  3628  00F1  3000               	movlw	high __pbssBANK1
  3629  00F2  0085               	movwf	5
  3630  00F3  301F               	movlw	31
  3631  00F4  3198  208B  3180   	fcall	clear_ram0
  3632                           
  3633                           ; Clear objects allocated to BANK3
  3634  00F7  30E2               	movlw	low __pbssBANK3
  3635  00F8  0084               	movwf	4
  3636  00F9  3001               	movlw	high __pbssBANK3
  3637  00FA  0085               	movwf	5
  3638  00FB  300E               	movlw	14
  3639  00FC  3198  208B  3180   	fcall	clear_ram0
  3640                           
  3641                           ; Clear objects allocated to BANK4
  3642  00FF  3057               	movlw	low __pbssBANK4
  3643  0100  0084               	movwf	4
  3644  0101  3002               	movlw	high __pbssBANK4
  3645  0102  0085               	movwf	5
  3646  0103  300A               	movlw	10
  3647  0104  3198  208B  3180   	fcall	clear_ram0
  3648                           
  3649                           ; Initialize objects allocated to BANK1
  3650  0107  3076               	movlw	low __pidataBANK1
  3651  0108  0084               	movwf	4
  3652  0109  3098               	movlw	(high __pidataBANK1)| (0+128)
  3653  010A  0085               	movwf	5
  3654  010B  30E5               	movlw	low __pdataBANK1
  3655  010C  0086               	movwf	6
  3656  010D  3000               	movlw	high __pdataBANK1
  3657  010E  0087               	movwf	7
  3658  010F  3004               	movlw	4
  3659  0110  3198  2085  3180   	fcall	init_ram
  3660                           
  3661                           ; Initialize objects allocated to BANK4
  3662  0113  3072               	movlw	low __pidataBANK4
  3663  0114  0084               	movwf	4
  3664  0115  3098               	movlw	(high __pidataBANK4)| (0+128)
  3665  0116  0085               	movwf	5
  3666  0117  3061               	movlw	low __pdataBANK4
  3667  0118  0086               	movwf	6
  3668  0119  3002               	movlw	high __pdataBANK4
  3669  011A  0087               	movwf	7
  3670  011B  3004               	movlw	4
  3671  011C  3198  2085         	fcall	init_ram
  3672  011E                     end_of_initialization:	
  3673                           ;End of C runtime variable initialization code
  3674                           
  3675  011E                     __end_of__initialization:	
  3676  011E  0020               	movlb	0
  3677  011F  3196  2E15         	ljmp	_main	;jump to C main() function
  3678                           
  3679                           	psect	bssBANK1
  3680  00C6                     __pbssBANK1:	
  3681  00C6                     _BaudTyped:	
  3682  00C6                     	ds	4
  3683  00CA                     _PS_2_Read_Data_TEMP:	
  3684  00CA                     	ds	2
  3685  00CC                     _BAUDMODE:	
  3686  00CC                     	ds	1
  3687  00CD                     _Caps_Lock_Key:	
  3688  00CD                     	ds	1
  3689  00CE                     _Caps_Lock_Key_old:	
  3690  00CE                     	ds	1
  3691  00CF                     _Delete:	
  3692  00CF                     	ds	1
  3693  00D0                     _LControl:	
  3694  00D0                     	ds	1
  3695  00D1                     _Left_Shift_Key_old:	
  3696  00D1                     	ds	1
  3697  00D2                     _LineOverride:	
  3698  00D2                     	ds	1
  3699  00D3                     _PS_2_Buffer_items:	
  3700  00D3                     	ds	1
  3701  00D4                     _PS_2_bits:	
  3702  00D4                     	ds	1
  3703  00D5                     _RControl:	
  3704  00D5                     	ds	1
  3705  00D6                     _ResendLastFlag:	
  3706  00D6                     	ds	1
  3707  00D7                     _Right_Shift_Key_old:	
  3708  00D7                     	ds	1
  3709  00D8                     _i:	
  3710  00D8                     	ds	1
  3711  00D9                     _PS_2_ScanCodes:	
  3712  00D9                     	ds	12
  3713                           
  3714                           	psect	dataBANK1
  3715  00E5                     __pdataBANK1:	
  3716  00E5                     _MEM:	
  3717  00E5                     	ds	4
  3718                           
  3719                           	psect	bssBANK3
  3720  01E2                     __pbssBANK3:	
  3721  01E2                     _PS_2_Read_Data_First:	
  3722  01E2                     	ds	2
  3723  01E4                     _PS_2_Read_Data_Second:	
  3724  01E4                     	ds	2
  3725  01E6                     _PS_2_Read_Data_Third:	
  3726  01E6                     	ds	2
  3727  01E8                     _CapsCount:	
  3728  01E8                     	ds	1
  3729  01E9                     _Caps_Lock:	
  3730  01E9                     	ds	1
  3731  01EA                     _LALT:	
  3732  01EA                     	ds	1
  3733  01EB                     _Left_Shift_Key:	
  3734  01EB                     	ds	1
  3735  01EC                     _ParityTyped:	
  3736  01EC                     	ds	1
  3737  01ED                     _RALT:	
  3738  01ED                     	ds	1
  3739  01EE                     _Right_Shift_Key:	
  3740  01EE                     	ds	1
  3741  01EF                     _Shift_Key:	
  3742  01EF                     	ds	1
  3743                           
  3744                           	psect	bssBANK4
  3745  0257                     __pbssBANK4:	
  3746  0257                     _BatteryVoltage:	
  3747  0257                     	ds	3
  3748  025A                     _SinLEDtimer:	
  3749  025A                     	ds	2
  3750  025C                     _pwrLEDtoggle:	
  3751  025C                     	ds	2
  3752  025E                     _Alarm:	
  3753  025E                     	ds	1
  3754  025F                     _ECHO:	
  3755  025F                     	ds	1
  3756  0260                     _PARITY:	
  3757  0260                     	ds	1
  3758                           
  3759                           	psect	dataBANK4
  3760  0261                     __pdataBANK4:	
  3761  0261                     _BAUD:	
  3762  0261                     	ds	4
  3763                           
  3764                           	psect	clrtext
  3765  188B                     clear_ram0:	
  3766                           ;	Called with FSR0 containing the base address, and
  3767                           ;	WREG with the size to clear
  3768                           
  3769  188B  0064               	clrwdt	;clear the watchdog before getting into this loop
  3770  188C                     clrloop0:	
  3771  188C  0180               	clrf	0	;clear RAM location pointed to by FSR
  3772  188D  3101               	addfsr 0,1
  3773  188E  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3774  188F  288C               	goto	clrloop0	;have we reached the end yet?
  3775  1890  3400               	retlw	0	;all done for this memory range, return
  3776                           
  3777                           	psect	inittext
  3778  1885                     init_ram:	
  3779  1885  00FE               	movwf	126
  3780  1886                     initloop:	
  3781  1886  0012               	moviw fsr0++
  3782  1887  001E               	movwi fsr1++
  3783  1888  0BFE               	decfsz	126,f
  3784  1889  2886               	goto	initloop
  3785  188A  3400               	retlw	0
  3786                           
  3787                           	psect	cstackBANK4
  3788  0220                     __pcstackBANK4:	
  3789  0220                     ??_PS_2_DISABLE_INTERRUPT:	
  3790  0220                     ??_READ_PS_2_PIN:	
  3791                           ; 0 bytes @ 0x0
  3792                           
  3793  0220                     ??_Timer2ON:	
  3794                           ; 0 bytes @ 0x0
  3795                           
  3796  0220                     ??_PS_2_ENABLE_INTERRUPT:	
  3797                           ; 0 bytes @ 0x0
  3798                           
  3799  0220                     ??_ReadUSART:	
  3800                           ; 0 bytes @ 0x0
  3801                           
  3802  0220                     ??_ConfigureOscillator:	
  3803                           ; 0 bytes @ 0x0
  3804                           
  3805  0220                     ??_InitApp:	
  3806                           ; 0 bytes @ 0x0
  3807                           
  3808  0220                     ?_delayUS:	
  3809                           ; 0 bytes @ 0x0
  3810                           
  3811  0220                     ?_OpenUSART:	
  3812                           ; 0 bytes @ 0x0
  3813                           
  3814  0220                     ??_baudUSART:	
  3815                           ; 0 bytes @ 0x0
  3816                           
  3817  0220                     ??_Clock_TRIS:	
  3818                           ; 0 bytes @ 0x0
  3819                           
  3820  0220                     ??_Data_TRIS:	
  3821                           ; 0 bytes @ 0x0
  3822                           
  3823  0220                     ??_Timer2Init:	
  3824                           ; 0 bytes @ 0x0
  3825                           
  3826  0220                     ??_DisableInternalADC:	
  3827                           ; 0 bytes @ 0x0
  3828                           
  3829  0220                     ??_CloseUSART:	
  3830                           ; 0 bytes @ 0x0
  3831                           
  3832  0220                     ?___ftge:	
  3833                           ; 0 bytes @ 0x0
  3834                           
  3835  0220                     ?_CheckSum_byte:	
  3836                           ; 1 bit 
  3837                           
  3838  0220                     ?_ReadFlash_2Byte:	
  3839                           ; 1 bytes @ 0x0
  3840                           
  3841  0220                     ?___ftpack:	
  3842                           ; 2 bytes @ 0x0
  3843                           
  3844  0220                     ?___lldiv:	
  3845                           ; 3 bytes @ 0x0
  3846                           
  3847  0220                     baudUSART@baudconfig:	
  3848                           ; 4 bytes @ 0x0
  3849                           
  3850  0220                     Clock_TRIS@direction:	
  3851                           ; 1 bytes @ 0x0
  3852                           
  3853  0220                     Data_TRIS@direction:	
  3854                           ; 1 bytes @ 0x0
  3855                           
  3856  0220                     PS_2_ENABLE_INTERRUPT@DATA_CLK:	
  3857                           ; 1 bytes @ 0x0
  3858                           
  3859  0220                     READ_PS_2_PIN@DATA_CLK:	
  3860                           ; 1 bytes @ 0x0
  3861                           
  3862  0220                     CheckSum_byte@This:	
  3863                           ; 1 bytes @ 0x0
  3864                           
  3865  0220                     OpenUSART@spbrg:	
  3866                           ; 2 bytes @ 0x0
  3867                           
  3868  0220                     ReadFlash_2Byte@row:	
  3869                           ; 2 bytes @ 0x0
  3870                           
  3871  0220                     ___ftpack@arg:	
  3872                           ; 2 bytes @ 0x0
  3873                           
  3874  0220                     ___ftge@ff1:	
  3875                           ; 3 bytes @ 0x0
  3876                           
  3877  0220                     delayUS@US:	
  3878                           ; 3 bytes @ 0x0
  3879                           
  3880  0220                     ___lldiv@divisor:	
  3881                           ; 4 bytes @ 0x0
  3882                           
  3883                           
  3884                           ; 4 bytes @ 0x0
  3885  0220                     	ds	1
  3886  0221                     ReadUSART@data:	
  3887  0221                     PS_2_DISABLE_INTERRUPT@DATA_CLK:	
  3888                           ; 1 bytes @ 0x1
  3889                           
  3890                           
  3891                           ; 1 bytes @ 0x1
  3892  0221                     	ds	1
  3893  0222                     ??_OpenUSART:	
  3894  0222                     CheckSum_byte@Odd_Even:	
  3895                           ; 0 bytes @ 0x2
  3896                           
  3897  0222                     OpenUSART@config:	
  3898                           ; 1 bytes @ 0x2
  3899                           
  3900  0222                     ReadFlash_2Byte@column:	
  3901                           ; 1 bytes @ 0x2
  3902                           
  3903  0222                     Timer2Init@time:	
  3904                           ; 1 bytes @ 0x2
  3905                           
  3906                           
  3907                           ; 1 bytes @ 0x2
  3908  0222                     	ds	1
  3909  0223                     ??_CheckSum_byte:	
  3910  0223                     ??_ReadFlash_2Byte:	
  3911                           ; 0 bytes @ 0x3
  3912                           
  3913  0223                     Timer2Init@postscaler:	
  3914                           ; 0 bytes @ 0x3
  3915                           
  3916  0223                     ___ftpack@exp:	
  3917                           ; 1 bytes @ 0x3
  3918                           
  3919  0223                     ___ftge@ff2:	
  3920                           ; 1 bytes @ 0x3
  3921                           
  3922                           
  3923                           ; 3 bytes @ 0x3
  3924  0223                     	ds	1
  3925  0224                     ??_delayUS:	
  3926  0224                     Timer2Init@prescaler:	
  3927                           ; 0 bytes @ 0x4
  3928                           
  3929  0224                     ___ftpack@sign:	
  3930                           ; 1 bytes @ 0x4
  3931                           
  3932  0224                     CheckSum_byte@ThisTemp:	
  3933                           ; 1 bytes @ 0x4
  3934                           
  3935  0224                     ___lldiv@dividend:	
  3936                           ; 2 bytes @ 0x4
  3937                           
  3938                           
  3939                           ; 4 bytes @ 0x4
  3940  0224                     	ds	1
  3941  0225                     ??___ftpack:	
  3942  0225                     ?_ReadFlash_4Byte:	
  3943                           ; 0 bytes @ 0x5
  3944                           
  3945  0225                     ReadFlash_4Byte@row:	
  3946                           ; 4 bytes @ 0x5
  3947                           
  3948  0225                     delayUS@i:	
  3949                           ; 2 bytes @ 0x5
  3950                           
  3951                           
  3952                           ; 4 bytes @ 0x5
  3953  0225                     	ds	1
  3954  0226                     ??___ftge:	
  3955  0226                     CheckSum_byte@Parity:	
  3956                           ; 0 bytes @ 0x6
  3957                           
  3958                           
  3959                           ; 1 bytes @ 0x6
  3960  0226                     	ds	1
  3961  0227                     CheckSum_byte@i:	
  3962  0227                     ReadFlash_4Byte@column:	
  3963                           ; 1 bytes @ 0x7
  3964                           
  3965                           
  3966                           ; 1 bytes @ 0x7
  3967  0227                     	ds	1
  3968  0228                     ?_UARTchar:	
  3969  0228                     ??___lldiv:	
  3970                           ; 0 bytes @ 0x8
  3971                           
  3972  0228                     ?___lwtoft:	
  3973                           ; 0 bytes @ 0x8
  3974                           
  3975  0228                     UARTchar@override:	
  3976                           ; 3 bytes @ 0x8
  3977                           
  3978  0228                     ___lwtoft@c:	
  3979                           ; 1 bytes @ 0x8
  3980                           
  3981                           
  3982                           ; 2 bytes @ 0x8
  3983  0228                     	ds	1
  3984  0229                     ??_ReadFlash_4Byte:	
  3985  0229                     delayUS@j:	
  3986                           ; 0 bytes @ 0x9
  3987                           
  3988  0229                     UARTchar@NinethBit_override_data:	
  3989                           ; 1 bytes @ 0x9
  3990                           
  3991  0229                     ___lldiv@quotient:	
  3992                           ; 1 bytes @ 0x9
  3993                           
  3994                           
  3995                           ; 4 bytes @ 0x9
  3996  0229                     	ds	1
  3997  022A                     ??_UARTchar:	
  3998  022A                     ??_Send_PS2:	
  3999                           ; 0 bytes @ 0xA
  4000                           
  4001  022A                     ?_InternalADC_Read:	
  4002                           ; 0 bytes @ 0xA
  4003                           
  4004                           
  4005                           ; 2 bytes @ 0xA
  4006  022A                     	ds	1
  4007  022B                     ??___lwtoft:	
  4008                           
  4009                           ; 0 bytes @ 0xB
  4010  022B                     	ds	1
  4011  022C                     ??_InternalADC_Read:	
  4012  022C                     ?___ftdiv:	
  4013                           ; 0 bytes @ 0xC
  4014                           
  4015  022C                     ___ftdiv@f2:	
  4016                           ; 3 bytes @ 0xC
  4017                           
  4018                           
  4019                           ; 3 bytes @ 0xC
  4020  022C                     	ds	1
  4021  022D                     ___lldiv@counter:	
  4022                           
  4023                           ; 1 bytes @ 0xD
  4024  022D                     	ds	1
  4025  022E                     ?_InitUART:	
  4026  022E                     UARTchar@data:	
  4027                           ; 0 bytes @ 0xE
  4028                           
  4029  022E                     Send_PS2@oddparity:	
  4030                           ; 1 bytes @ 0xE
  4031                           
  4032  022E                     InternalADC_Read@channel:	
  4033                           ; 1 bytes @ 0xE
  4034                           
  4035  022E                     InitUART@Baud:	
  4036                           ; 1 bytes @ 0xE
  4037                           
  4038  022E                     ReadFlash_4Byte@temp:	
  4039                           ; 4 bytes @ 0xE
  4040                           
  4041                           
  4042                           ; 4 bytes @ 0xE
  4043  022E                     	ds	1
  4044  022F                     ?_UARTstringWAIT:	
  4045  022F                     Send_PS2@command:	
  4046                           ; 0 bytes @ 0xF
  4047                           
  4048  022F                     UARTstringWAIT@data:	
  4049                           ; 1 bytes @ 0xF
  4050                           
  4051  022F                     ___ftdiv@f1:	
  4052                           ; 2 bytes @ 0xF
  4053                           
  4054                           
  4055                           ; 3 bytes @ 0xF
  4056  022F                     	ds	1
  4057  0230                     Send_PS2@i:	
  4058                           
  4059                           ; 1 bytes @ 0x10
  4060  0230                     	ds	1
  4061  0231                     ??_UARTstringWAIT:	
  4062  0231                     Send_PS2@timeout:	
  4063                           ; 0 bytes @ 0x11
  4064                           
  4065                           
  4066                           ; 2 bytes @ 0x11
  4067  0231                     	ds	1
  4068  0232                     ??___ftdiv:	
  4069  0232                     ?_ReadBaud:	
  4070                           ; 0 bytes @ 0x12
  4071                           
  4072  0232                     InitUART@parity:	
  4073                           ; 4 bytes @ 0x12
  4074                           
  4075  0232                     ReadBaud@row:	
  4076                           ; 1 bytes @ 0x12
  4077                           
  4078                           
  4079                           ; 2 bytes @ 0x12
  4080  0232                     	ds	1
  4081  0233                     ??_PS_2_INIT:	
  4082  0233                     ??_InitUART:	
  4083                           ; 0 bytes @ 0x13
  4084                           
  4085  0233                     ??_Init_PS_2_Send:	
  4086                           ; 0 bytes @ 0x13
  4087                           
  4088                           
  4089                           ; 0 bytes @ 0x13
  4090  0233                     	ds	1
  4091  0234                     ReadBaud@column:	
  4092                           
  4093                           ; 1 bytes @ 0x14
  4094  0234                     	ds	2
  4095  0236                     ??_ReadBaud:	
  4096  0236                     ___ftdiv@cntr:	
  4097                           ; 0 bytes @ 0x16
  4098                           
  4099                           
  4100                           ; 1 bytes @ 0x16
  4101  0236                     	ds	1
  4102  0237                     ___ftdiv@f3:	
  4103                           
  4104                           ; 3 bytes @ 0x17
  4105  0237                     	ds	3
  4106  023A                     ___ftdiv@exp:	
  4107                           
  4108                           ; 1 bytes @ 0x1A
  4109  023A                     	ds	1
  4110  023B                     ___ftdiv@sign:	
  4111  023B                     InitUART@spbrg:	
  4112                           ; 1 bytes @ 0x1B
  4113                           
  4114                           
  4115                           ; 2 bytes @ 0x1B
  4116  023B                     	ds	1
  4117  023C                     ?___ftmul:	
  4118  023C                     ___ftmul@f1:	
  4119                           ; 3 bytes @ 0x1C
  4120                           
  4121                           
  4122                           ; 3 bytes @ 0x1C
  4123  023C                     	ds	1
  4124  023D                     InitUART@baudconfig:	
  4125                           
  4126                           ; 1 bytes @ 0x1D
  4127  023D                     	ds	1
  4128  023E                     InitUART@config:	
  4129  023E                     ReadBaud@temp:	
  4130                           ; 1 bytes @ 0x1E
  4131                           
  4132                           
  4133                           ; 4 bytes @ 0x1E
  4134  023E                     	ds	1
  4135  023F                     ___ftmul@f2:	
  4136  023F                     InitUART@temp:	
  4137                           ; 3 bytes @ 0x1F
  4138                           
  4139                           
  4140                           ; 4 bytes @ 0x1F
  4141  023F                     	ds	3
  4142  0242                     ??___ftmul:	
  4143                           
  4144                           ; 0 bytes @ 0x22
  4145  0242                     	ds	1
  4146  0243                     ??_Init_System:	
  4147                           
  4148                           ; 0 bytes @ 0x23
  4149  0243                     	ds	3
  4150  0246                     ___ftmul@exp:	
  4151                           
  4152                           ; 1 bytes @ 0x26
  4153  0246                     	ds	1
  4154  0247                     ___ftmul@f3_as_product:	
  4155                           
  4156                           ; 3 bytes @ 0x27
  4157  0247                     	ds	1
  4158  0248                     Init_System@temp:	
  4159                           
  4160                           ; 4 bytes @ 0x28
  4161  0248                     	ds	2
  4162  024A                     ___ftmul@cntr:	
  4163                           
  4164                           ; 1 bytes @ 0x2A
  4165  024A                     	ds	1
  4166  024B                     ___ftmul@sign:	
  4167                           
  4168                           ; 1 bytes @ 0x2B
  4169  024B                     	ds	1
  4170  024C                     ?_ReadVoltage:	
  4171  024C                     Init_System@Baud:	
  4172                           ; 3 bytes @ 0x2C
  4173                           
  4174                           
  4175                           ; 4 bytes @ 0x2C
  4176  024C                     	ds	3
  4177  024F                     ??_ReadVoltage:	
  4178                           
  4179                           ; 0 bytes @ 0x2F
  4180  024F                     	ds	1
  4181  0250                     Init_System@Parity:	
  4182  0250                     ReadVoltage@voltage:	
  4183                           ; 1 bytes @ 0x30
  4184                           
  4185                           
  4186                           ; 3 bytes @ 0x30
  4187  0250                     	ds	3
  4188  0253                     ReadVoltage@temp:	
  4189                           
  4190                           ; 2 bytes @ 0x33
  4191  0253                     	ds	2
  4192  0255                     ??_main:	
  4193                           
  4194                           ; 0 bytes @ 0x35
  4195  0255                     	ds	1
  4196  0256                     main@i:	
  4197                           
  4198                           ; 1 bytes @ 0x36
  4199  0256                     	ds	1
  4200                           
  4201                           	psect	cstackBANK3
  4202  01A0                     __pcstackBANK3:	
  4203  01A0                     Process_PS2_ScanCode@buf:	
  4204                           
  4205                           ; 60 bytes @ 0x0
  4206  01A0                     	ds	60
  4207  01DC                     _Process_PS2_ScanCode$849:	
  4208                           
  4209                           ; 1 bytes @ 0x3C
  4210  01DC                     	ds	1
  4211  01DD                     _Process_PS2_ScanCode$850:	
  4212                           
  4213                           ; 1 bytes @ 0x3D
  4214  01DD                     	ds	1
  4215  01DE                     _Process_PS2_ScanCode$851:	
  4216                           
  4217                           ; 1 bytes @ 0x3E
  4218  01DE                     	ds	1
  4219  01DF                     _Process_PS2_ScanCode$852:	
  4220                           
  4221                           ; 1 bytes @ 0x3F
  4222  01DF                     	ds	1
  4223  01E0                     Process_PS2_ScanCode@shortbreak:	
  4224                           
  4225                           ; 1 bytes @ 0x40
  4226  01E0                     	ds	1
  4227  01E1                     Process_PS2_ScanCode@temp:	
  4228                           
  4229                           ; 1 bytes @ 0x41
  4230  01E1                     	ds	1
  4231                           
  4232                           	psect	cstackBANK2
  4233  0120                     __pcstackBANK2:	
  4234  0120                     SetBaud@buf:	
  4235                           
  4236                           ; 50 bytes @ 0x0
  4237  0120                     	ds	50
  4238  0152                     SetBaud@Baudtemp:	
  4239                           
  4240                           ; 4 bytes @ 0x32
  4241  0152                     	ds	4
  4242  0156                     SetBaud@Paritytemp:	
  4243                           
  4244                           ; 4 bytes @ 0x36
  4245  0156                     	ds	4
  4246  015A                     SetBaud@temp:	
  4247                           
  4248                           ; 4 bytes @ 0x3A
  4249  015A                     	ds	4
  4250  015E                     SetBaud@i:	
  4251                           
  4252                           ; 1 bytes @ 0x3E
  4253  015E                     	ds	1
  4254                           
  4255                           	psect	cstackBANK1
  4256  00A0                     __pcstackBANK1:	
  4257  00A0                     ?_WriteBaud:	
  4258  00A0                     WriteBaud@row:	
  4259                           ; 0 bytes @ 0x0
  4260                           
  4261                           
  4262                           ; 2 bytes @ 0x0
  4263  00A0                     	ds	2
  4264  00A2                     WriteBaud@Baud:	
  4265                           
  4266                           ; 4 bytes @ 0x2
  4267  00A2                     	ds	4
  4268  00A6                     WriteBaud@Parity:	
  4269                           
  4270                           ; 1 bytes @ 0x6
  4271  00A6                     	ds	1
  4272  00A7                     ??_WriteBaud:	
  4273                           
  4274                           ; 0 bytes @ 0x7
  4275  00A7                     	ds	8
  4276  00AF                     ?_SetBaud:	
  4277  00AF                     SetBaud@Baud:	
  4278                           ; 0 bytes @ 0xF
  4279                           
  4280                           
  4281                           ; 4 bytes @ 0xF
  4282  00AF                     	ds	4
  4283  00B3                     SetBaud@Parity:	
  4284                           
  4285                           ; 1 bytes @ 0x13
  4286  00B3                     	ds	1
  4287  00B4                     ??_SetBaud:	
  4288                           
  4289                           ; 0 bytes @ 0x14
  4290  00B4                     	ds	8
  4291  00BC                     ??_Process_PS2_ScanCode:	
  4292                           
  4293                           ; 0 bytes @ 0x1C
  4294  00BC                     	ds	6
  4295  00C2                     isr@Rx_fault:	
  4296                           
  4297                           ; 1 bytes @ 0x22
  4298  00C2                     	ds	1
  4299  00C3                     isr@Rx_Overun:	
  4300                           
  4301                           ; 1 bytes @ 0x23
  4302  00C3                     	ds	1
  4303  00C4                     isr@rx:	
  4304                           
  4305                           ; 1 bytes @ 0x24
  4306  00C4                     	ds	1
  4307  00C5                     isr@ScanTemp:	
  4308                           
  4309                           ; 1 bytes @ 0x25
  4310  00C5                     	ds	1
  4311                           
  4312                           	psect	cstackCOMMON
  4313  0070                     __pcstackCOMMON:	
  4314  0070                     ?_PS_2_DISABLE_INTERRUPT:	
  4315  0070                     ?_Timer2Reset:	
  4316                           ; 0 bytes @ 0x0
  4317                           
  4318  0070                     ??_Timer2Reset:	
  4319                           ; 0 bytes @ 0x0
  4320                           
  4321  0070                     ?_Timer2ON:	
  4322                           ; 0 bytes @ 0x0
  4323                           
  4324  0070                     ?_PS_2_ENABLE_INTERRUPT:	
  4325                           ; 0 bytes @ 0x0
  4326                           
  4327  0070                     ?_Timer2OFF:	
  4328                           ; 0 bytes @ 0x0
  4329                           
  4330  0070                     ??_Timer2OFF:	
  4331                           ; 0 bytes @ 0x0
  4332                           
  4333  0070                     ?_ResendLast:	
  4334                           ; 0 bytes @ 0x0
  4335                           
  4336  0070                     ?_Process_PS2_ScanCode:	
  4337                           ; 0 bytes @ 0x0
  4338                           
  4339  0070                     ?_ConfigureOscillator:	
  4340                           ; 0 bytes @ 0x0
  4341                           
  4342  0070                     ?_InitApp:	
  4343                           ; 0 bytes @ 0x0
  4344                           
  4345  0070                     ?_Init_System:	
  4346                           ; 0 bytes @ 0x0
  4347                           
  4348  0070                     ?_PS_2_INIT:	
  4349                           ; 0 bytes @ 0x0
  4350                           
  4351  0070                     ?_baudUSART:	
  4352                           ; 0 bytes @ 0x0
  4353                           
  4354  0070                     ?_Clock_TRIS:	
  4355                           ; 0 bytes @ 0x0
  4356                           
  4357  0070                     ?_Data_TRIS:	
  4358                           ; 0 bytes @ 0x0
  4359                           
  4360  0070                     ?_Timer2Init:	
  4361                           ; 0 bytes @ 0x0
  4362                           
  4363  0070                     ??_Decode_Scan_Code_FunctionE0:	
  4364                           ; 0 bytes @ 0x0
  4365                           
  4366  0070                     ??_Decode_Scan_Code_Shift:	
  4367                           ; 0 bytes @ 0x0
  4368                           
  4369  0070                     ??_Decode_Scan_Code:	
  4370                           ; 0 bytes @ 0x0
  4371                           
  4372  0070                     ??_Decode_Scan_Code_Function:	
  4373                           ; 0 bytes @ 0x0
  4374                           
  4375  0070                     ?_DisableInternalADC:	
  4376                           ; 0 bytes @ 0x0
  4377                           
  4378  0070                     ?_isr:	
  4379                           ; 0 bytes @ 0x0
  4380                           
  4381  0070                     ?_main:	
  4382                           ; 0 bytes @ 0x0
  4383                           
  4384  0070                     ??_Reverse_Byte:	
  4385                           ; 0 bytes @ 0x0
  4386                           
  4387  0070                     ??_ISNUMBER:	
  4388                           ; 0 bytes @ 0x0
  4389                           
  4390  0070                     ?_cleanBuffer:	
  4391                           ; 0 bytes @ 0x0
  4392                           
  4393  0070                     ?_CloseUSART:	
  4394                           ; 0 bytes @ 0x0
  4395                           
  4396  0070                     ?_UART_send_break:	
  4397                           ; 0 bytes @ 0x0
  4398                           
  4399  0070                     ??_UART_send_break:	
  4400                           ; 0 bytes @ 0x0
  4401                           
  4402  0070                     ?_UNLOCK:	
  4403                           ; 0 bytes @ 0x0
  4404                           
  4405  0070                     ??_UNLOCK:	
  4406                           ; 0 bytes @ 0x0
  4407                           
  4408  0070                     ?_BlockErase:	
  4409                           ; 0 bytes @ 0x0
  4410                           
  4411  0070                     ?i1_delayUS:	
  4412                           ; 0 bytes @ 0x0
  4413                           
  4414  0070                     ?i1_CloseUSART:	
  4415                           ; 0 bytes @ 0x0
  4416                           
  4417  0070                     ??i1_CloseUSART:	
  4418                           ; 0 bytes @ 0x0
  4419                           
  4420  0070                     ?i1_baudUSART:	
  4421                           ; 0 bytes @ 0x0
  4422                           
  4423  0070                     ??i1_baudUSART:	
  4424                           ; 0 bytes @ 0x0
  4425                           
  4426  0070                     ?i1_OpenUSART:	
  4427                           ; 0 bytes @ 0x0
  4428                           
  4429  0070                     ??i1_ReadUSART:	
  4430                           ; 0 bytes @ 0x0
  4431                           
  4432  0070                     ?i1_Clock_TRIS:	
  4433                           ; 0 bytes @ 0x0
  4434                           
  4435  0070                     ??i1_Clock_TRIS:	
  4436                           ; 0 bytes @ 0x0
  4437                           
  4438  0070                     ?i1_Data_TRIS:	
  4439                           ; 0 bytes @ 0x0
  4440                           
  4441  0070                     ??i1_Data_TRIS:	
  4442                           ; 0 bytes @ 0x0
  4443                           
  4444  0070                     ?i1_PS_2_DISABLE_INTERRUPT:	
  4445                           ; 0 bytes @ 0x0
  4446                           
  4447  0070                     ??i1_PS_2_DISABLE_INTERRUPT:	
  4448                           ; 0 bytes @ 0x0
  4449                           
  4450  0070                     ?i1_PS_2_ENABLE_INTERRUPT:	
  4451                           ; 0 bytes @ 0x0
  4452                           
  4453  0070                     ??i1_PS_2_ENABLE_INTERRUPT:	
  4454                           ; 0 bytes @ 0x0
  4455                           
  4456  0070                     ??i1_READ_PS_2_PIN:	
  4457                           ; 0 bytes @ 0x0
  4458                           
  4459  0070                     ?i1_Timer2ON:	
  4460                           ; 0 bytes @ 0x0
  4461                           
  4462  0070                     ??i1_Timer2ON:	
  4463                           ; 0 bytes @ 0x0
  4464                           
  4465  0070                     ?_READ_PS_2_PIN:	
  4466                           ; 0 bytes @ 0x0
  4467                           
  4468  0070                     ?_ReadUSART:	
  4469                           ; 1 bytes @ 0x0
  4470                           
  4471  0070                     ?_Init_PS_2_Send:	
  4472                           ; 1 bytes @ 0x0
  4473                           
  4474  0070                     ?_Send_PS2:	
  4475                           ; 1 bytes @ 0x0
  4476                           
  4477  0070                     ?_Decode_Scan_Code_FunctionE0:	
  4478                           ; 1 bytes @ 0x0
  4479                           
  4480  0070                     ?_Decode_Scan_Code_Shift:	
  4481                           ; 1 bytes @ 0x0
  4482                           
  4483  0070                     ?_Decode_Scan_Code:	
  4484                           ; 1 bytes @ 0x0
  4485                           
  4486  0070                     ?_Decode_Scan_Code_Function:	
  4487                           ; 1 bytes @ 0x0
  4488                           
  4489  0070                     ?_Reverse_Byte:	
  4490                           ; 1 bytes @ 0x0
  4491                           
  4492  0070                     ?_ISNUMBER:	
  4493                           ; 1 bytes @ 0x0
  4494                           
  4495  0070                     ?_BufferShiftBack:	
  4496                           ; 1 bytes @ 0x0
  4497                           
  4498  0070                     ?i1_CheckSum_byte:	
  4499                           ; 1 bytes @ 0x0
  4500                           
  4501  0070                     ?i1_ReadUSART:	
  4502                           ; 1 bytes @ 0x0
  4503                           
  4504  0070                     ?i1_READ_PS_2_PIN:	
  4505                           ; 1 bytes @ 0x0
  4506                           
  4507  0070                     ?i1_Send_PS2:	
  4508                           ; 1 bytes @ 0x0
  4509                           
  4510  0070                     ?i1_ReadFlash_2Byte:	
  4511                           ; 1 bytes @ 0x0
  4512                           
  4513  0070                     ?___lmul:	
  4514                           ; 2 bytes @ 0x0
  4515                           
  4516  0070                     ?i1___lldiv:	
  4517                           ; 4 bytes @ 0x0
  4518                           
  4519  0070                     ISNUMBER@ascii:	
  4520                           ; 4 bytes @ 0x0
  4521                           
  4522  0070                     BufferShiftBack@shift:	
  4523                           ; 1 bytes @ 0x0
  4524                           
  4525  0070                     Decode_Scan_Code@Code:	
  4526                           ; 1 bytes @ 0x0
  4527                           
  4528  0070                     Decode_Scan_Code_Shift@Code:	
  4529                           ; 1 bytes @ 0x0
  4530                           
  4531  0070                     Decode_Scan_Code_FunctionE0@Code:	
  4532                           ; 1 bytes @ 0x0
  4533                           
  4534  0070                     Decode_Scan_Code_Function@Code:	
  4535                           ; 1 bytes @ 0x0
  4536                           
  4537  0070                     i1baudUSART@baudconfig:	
  4538                           ; 1 bytes @ 0x0
  4539                           
  4540  0070                     i1Clock_TRIS@direction:	
  4541                           ; 1 bytes @ 0x0
  4542                           
  4543  0070                     i1Data_TRIS@direction:	
  4544                           ; 1 bytes @ 0x0
  4545                           
  4546  0070                     i1PS_2_ENABLE_INTERRUPT@DATA_CLK:	
  4547                           ; 1 bytes @ 0x0
  4548                           
  4549  0070                     i1READ_PS_2_PIN@DATA_CLK:	
  4550                           ; 1 bytes @ 0x0
  4551                           
  4552  0070                     cleanBuffer@count:	
  4553                           ; 1 bytes @ 0x0
  4554                           
  4555  0070                     BlockErase@row:	
  4556                           ; 2 bytes @ 0x0
  4557                           
  4558  0070                     i1CheckSum_byte@This:	
  4559                           ; 2 bytes @ 0x0
  4560                           
  4561  0070                     i1OpenUSART@spbrg:	
  4562                           ; 2 bytes @ 0x0
  4563                           
  4564  0070                     i1ReadFlash_2Byte@row:	
  4565                           ; 2 bytes @ 0x0
  4566                           
  4567  0070                     ___lmul@multiplier:	
  4568                           ; 2 bytes @ 0x0
  4569                           
  4570  0070                     i1delayUS@US:	
  4571                           ; 4 bytes @ 0x0
  4572                           
  4573  0070                     i1___lldiv@divisor:	
  4574                           ; 4 bytes @ 0x0
  4575                           
  4576                           
  4577                           ; 4 bytes @ 0x0
  4578  0070                     	ds	1
  4579  0071                     BufferShiftBack@size:	
  4580  0071                     i1ReadUSART@data:	
  4581                           ; 1 bytes @ 0x1
  4582                           
  4583  0071                     i1PS_2_DISABLE_INTERRUPT@DATA_CLK:	
  4584                           ; 1 bytes @ 0x1
  4585                           
  4586                           
  4587                           ; 1 bytes @ 0x1
  4588  0071                     	ds	1
  4589  0072                     ??_cleanBuffer:	
  4590  0072                     ??_BufferShiftBack:	
  4591                           ; 0 bytes @ 0x2
  4592                           
  4593  0072                     ??_BlockErase:	
  4594                           ; 0 bytes @ 0x2
  4595                           
  4596  0072                     ??i1_OpenUSART:	
  4597                           ; 0 bytes @ 0x2
  4598                           
  4599  0072                     Reverse_Byte@temp:	
  4600                           ; 0 bytes @ 0x2
  4601                           
  4602  0072                     i1CheckSum_byte@Odd_Even:	
  4603                           ; 1 bytes @ 0x2
  4604                           
  4605  0072                     i1OpenUSART@config:	
  4606                           ; 1 bytes @ 0x2
  4607                           
  4608  0072                     i1ReadFlash_2Byte@column:	
  4609                           ; 1 bytes @ 0x2
  4610                           
  4611                           
  4612                           ; 1 bytes @ 0x2
  4613  0072                     	ds	1
  4614  0073                     ??i1_CheckSum_byte:	
  4615  0073                     ??i1_ReadFlash_2Byte:	
  4616                           ; 0 bytes @ 0x3
  4617                           
  4618  0073                     Reverse_Byte@This:	
  4619                           ; 0 bytes @ 0x3
  4620                           
  4621  0073                     cleanBuffer@data:	
  4622                           ; 1 bytes @ 0x3
  4623                           
  4624                           
  4625                           ; 1 bytes @ 0x3
  4626  0073                     	ds	1
  4627  0074                     ??i1_delayUS:	
  4628  0074                     cleanBuffer@i:	
  4629                           ; 0 bytes @ 0x4
  4630                           
  4631  0074                     i1CheckSum_byte@ThisTemp:	
  4632                           ; 1 bytes @ 0x4
  4633                           
  4634  0074                     ___lmul@multiplicand:	
  4635                           ; 2 bytes @ 0x4
  4636                           
  4637  0074                     i1___lldiv@dividend:	
  4638                           ; 4 bytes @ 0x4
  4639                           
  4640                           
  4641                           ; 4 bytes @ 0x4
  4642  0074                     	ds	1
  4643  0075                     ?i1_ReadFlash_4Byte:	
  4644  0075                     i1ReadFlash_4Byte@row:	
  4645                           ; 4 bytes @ 0x5
  4646                           
  4647  0075                     i1delayUS@i:	
  4648                           ; 2 bytes @ 0x5
  4649                           
  4650                           
  4651                           ; 4 bytes @ 0x5
  4652  0075                     	ds	1
  4653  0076                     BufferShiftBack@i:	
  4654  0076                     i1CheckSum_byte@Parity:	
  4655                           ; 1 bytes @ 0x6
  4656                           
  4657                           
  4658                           ; 1 bytes @ 0x6
  4659  0076                     	ds	1
  4660  0077                     BufferShiftBack@buffer:	
  4661  0077                     i1CheckSum_byte@i:	
  4662                           ; 1 bytes @ 0x7
  4663                           
  4664  0077                     i1ReadFlash_4Byte@column:	
  4665                           ; 1 bytes @ 0x7
  4666                           
  4667                           
  4668                           ; 1 bytes @ 0x7
  4669  0077                     	ds	1
  4670  0078                     ??___lmul:	
  4671  0078                     ?i1_UARTchar:	
  4672                           ; 0 bytes @ 0x8
  4673                           
  4674  0078                     ??i1___lldiv:	
  4675                           ; 0 bytes @ 0x8
  4676                           
  4677  0078                     ?_PS2RawToScan:	
  4678                           ; 0 bytes @ 0x8
  4679                           
  4680  0078                     i1UARTchar@override:	
  4681                           ; 2 bytes @ 0x8
  4682                           
  4683  0078                     PS2RawToScan@Raw:	
  4684                           ; 1 bytes @ 0x8
  4685                           
  4686  0078                     ___lmul@product:	
  4687                           ; 2 bytes @ 0x8
  4688                           
  4689                           
  4690                           ; 4 bytes @ 0x8
  4691  0078                     	ds	1
  4692  0079                     ??i1_ReadFlash_4Byte:	
  4693  0079                     i1delayUS@j:	
  4694                           ; 0 bytes @ 0x9
  4695                           
  4696  0079                     i1UARTchar@NinethBit_override_data:	
  4697                           ; 1 bytes @ 0x9
  4698                           
  4699  0079                     i1___lldiv@quotient:	
  4700                           ; 1 bytes @ 0x9
  4701                           
  4702                           
  4703                           ; 4 bytes @ 0x9
  4704  0079                     	ds	1
  4705  007A                     ?_UART_send_break_timed:	
  4706  007A                     ?_WriteFlash_Sequential:	
  4707                           ; 0 bytes @ 0xA
  4708                           
  4709  007A                     ??i1_UARTchar:	
  4710                           ; 0 bytes @ 0xA
  4711                           
  4712  007A                     ??i1_Send_PS2:	
  4713                           ; 0 bytes @ 0xA
  4714                           
  4715  007A                     UART_send_break_timed@US:	
  4716                           ; 0 bytes @ 0xA
  4717                           
  4718  007A                     PS2RawToScan@temp:	
  4719                           ; 2 bytes @ 0xA
  4720                           
  4721  007A                     WriteFlash_Sequential@row:	
  4722                           ; 2 bytes @ 0xA
  4723                           
  4724                           
  4725                           ; 2 bytes @ 0xA
  4726  007A                     	ds	2
  4727  007C                     ??_UART_send_break_timed:	
  4728  007C                     WriteFlash_Sequential@buffer:	
  4729                           ; 0 bytes @ 0xC
  4730                           
  4731                           
  4732                           ; 1 bytes @ 0xC
  4733  007C                     	ds	1
  4734  007D                     WriteFlash_Sequential@amount:	
  4735  007D                     i1___lldiv@counter:	
  4736                           ; 1 bytes @ 0xD
  4737                           
  4738                           
  4739                           ; 1 bytes @ 0xD
  4740  007D                     	ds	1
  4741  007E                     ??_ResendLast:	
  4742                           
  4743                           	psect	cstackBANK0
  4744  0020                     __pcstackBANK0:	
  4745                           ; 0 bytes @ 0xE
  4746                           
  4747  0020                     ??_PS2RawToScan:	
  4748  0020                     ??_WriteFlash_Sequential:	
  4749                           ; 0 bytes @ 0x0
  4750                           
  4751  0020                     ?i1_InitUART:	
  4752                           ; 0 bytes @ 0x0
  4753                           
  4754  0020                     ?___llmod:	
  4755                           ; 0 bytes @ 0x0
  4756                           
  4757  0020                     i1UARTchar@data:	
  4758                           ; 4 bytes @ 0x0
  4759                           
  4760  0020                     i1Send_PS2@oddparity:	
  4761                           ; 1 bytes @ 0x0
  4762                           
  4763  0020                     ___llmod@divisor:	
  4764                           ; 1 bytes @ 0x0
  4765                           
  4766  0020                     i1InitUART@Baud:	
  4767                           ; 4 bytes @ 0x0
  4768                           
  4769  0020                     i1ReadFlash_4Byte@temp:	
  4770                           ; 4 bytes @ 0x0
  4771                           
  4772                           
  4773                           ; 4 bytes @ 0x0
  4774  0020                     	ds	1
  4775  0021                     ?i1_UARTstringWAIT:	
  4776  0021                     i1Send_PS2@command:	
  4777                           ; 0 bytes @ 0x1
  4778                           
  4779  0021                     i1UARTstringWAIT@data:	
  4780                           ; 1 bytes @ 0x1
  4781                           
  4782                           
  4783                           ; 2 bytes @ 0x1
  4784  0021                     	ds	1
  4785  0022                     i1Send_PS2@i:	
  4786                           
  4787                           ; 1 bytes @ 0x2
  4788  0022                     	ds	1
  4789  0023                     ??i1_UARTstringWAIT:	
  4790  0023                     i1Send_PS2@timeout:	
  4791                           ; 0 bytes @ 0x3
  4792                           
  4793  0023                     WriteFlash_Sequential@TempBufH:	
  4794                           ; 2 bytes @ 0x3
  4795                           
  4796                           
  4797                           ; 32 bytes @ 0x3
  4798  0023                     	ds	1
  4799  0024                     ?i1_ReadBaud:	
  4800  0024                     i1InitUART@parity:	
  4801                           ; 4 bytes @ 0x4
  4802                           
  4803  0024                     i1ReadBaud@row:	
  4804                           ; 1 bytes @ 0x4
  4805                           
  4806  0024                     ___llmod@dividend:	
  4807                           ; 2 bytes @ 0x4
  4808                           
  4809                           
  4810                           ; 4 bytes @ 0x4
  4811  0024                     	ds	1
  4812  0025                     ??i1_InitUART:	
  4813                           
  4814                           ; 0 bytes @ 0x5
  4815  0025                     	ds	1
  4816  0026                     i1ReadBaud@column:	
  4817                           
  4818                           ; 1 bytes @ 0x6
  4819  0026                     	ds	2
  4820  0028                     ??___llmod:	
  4821  0028                     ??i1_ReadBaud:	
  4822                           ; 0 bytes @ 0x8
  4823                           
  4824                           
  4825                           ; 0 bytes @ 0x8
  4826  0028                     	ds	1
  4827  0029                     ___llmod@counter:	
  4828                           
  4829                           ; 1 bytes @ 0x9
  4830  0029                     	ds	1
  4831  002A                     ?_sprintf:	
  4832  002A                     sprintf@f:	
  4833                           ; 2 bytes @ 0xA
  4834                           
  4835                           
  4836                           ; 2 bytes @ 0xA
  4837  002A                     	ds	3
  4838  002D                     i1InitUART@spbrg:	
  4839                           
  4840                           ; 2 bytes @ 0xD
  4841  002D                     	ds	2
  4842  002F                     i1InitUART@baudconfig:	
  4843                           
  4844                           ; 1 bytes @ 0xF
  4845  002F                     	ds	1
  4846  0030                     ??_sprintf:	
  4847  0030                     i1InitUART@config:	
  4848                           ; 0 bytes @ 0x10
  4849                           
  4850  0030                     i1ReadBaud@temp:	
  4851                           ; 1 bytes @ 0x10
  4852                           
  4853                           
  4854                           ; 4 bytes @ 0x10
  4855  0030                     	ds	1
  4856  0031                     i1InitUART@temp:	
  4857                           
  4858                           ; 4 bytes @ 0x11
  4859  0031                     	ds	5
  4860  0036                     sprintf@flag:	
  4861                           
  4862                           ; 1 bytes @ 0x16
  4863  0036                     	ds	1
  4864  0037                     sprintf@prec:	
  4865                           
  4866                           ; 2 bytes @ 0x17
  4867  0037                     	ds	2
  4868  0039                     sprintf@val:	
  4869                           
  4870                           ; 4 bytes @ 0x19
  4871  0039                     	ds	4
  4872  003D                     sprintf@ap:	
  4873                           
  4874                           ; 1 bytes @ 0x1D
  4875  003D                     	ds	1
  4876  003E                     sprintf@sp:	
  4877                           
  4878                           ; 1 bytes @ 0x1E
  4879  003E                     	ds	1
  4880  003F                     sprintf@c:	
  4881                           
  4882                           ; 1 bytes @ 0x1F
  4883  003F                     	ds	4
  4884  0043                     WriteFlash_Sequential@TempBufL:	
  4885                           
  4886                           ; 32 bytes @ 0x23
  4887  0043                     	ds	32
  4888  0063                     WriteFlash_Sequential@tempH:	
  4889                           
  4890                           ; 1 bytes @ 0x43
  4891  0063                     	ds	1
  4892  0064                     WriteFlash_Sequential@tempL:	
  4893                           
  4894                           ; 1 bytes @ 0x44
  4895  0064                     	ds	1
  4896  0065                     WriteFlash_Sequential@amountTemp:	
  4897                           
  4898                           ; 1 bytes @ 0x45
  4899  0065                     	ds	1
  4900  0066                     WriteFlash_Sequential@temp:	
  4901                           
  4902                           ; 2 bytes @ 0x46
  4903  0066                     	ds	2
  4904  0068                     WriteFlash_Sequential@spaces:	
  4905                           
  4906                           ; 1 bytes @ 0x48
  4907  0068                     	ds	1
  4908  0069                     WriteFlash_Sequential@i:	
  4909                           
  4910                           ; 1 bytes @ 0x49
  4911  0069                     	ds	1
  4912  006A                     WriteBaud@temp:	
  4913                           
  4914                           ; 4 bytes @ 0x4A
  4915  006A                     	ds	4
  4916  006E                     ??_isr:	
  4917                           
  4918                           ; 0 bytes @ 0x4E
  4919  006E                     	ds	2
  4920                           
  4921                           	psect	maintext
  4922  1615                     __pmaintext:	
  4923 ;;
  4924 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  4925 ;;
  4926 ;; *************** function _main *****************
  4927 ;; Defined at:
  4928 ;;		line 121 in file "main.c"
  4929 ;; Parameters:    Size  Location     Type
  4930 ;;		None
  4931 ;; Auto vars:     Size  Location     Type
  4932 ;;  i               1   54[BANK4 ] unsigned char 
  4933 ;; Return value:  Size  Location     Type
  4934 ;;		None               void
  4935 ;; Registers used:
  4936 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4937 ;; Tracked objects:
  4938 ;;		On entry : B1F/0
  4939 ;;		On exit  : 0/0
  4940 ;;		Unchanged: 0/0
  4941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4943 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  4944 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  4945 ;;      Totals:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  4946 ;;Total ram usage:        2 bytes
  4947 ;; Hardware stack levels required when called:   11
  4948 ;; This function calls:
  4949 ;;		_ConfigureOscillator
  4950 ;;		_InitApp
  4951 ;;		_Init_System
  4952 ;;		_PS_2_ENABLE_INTERRUPT
  4953 ;;		_PS_2_INIT
  4954 ;;		_ReadVoltage
  4955 ;;		_UARTstringWAIT
  4956 ;;		___ftge
  4957 ;;		_delayUS
  4958 ;; This function is called by:
  4959 ;;		Startup code after reset
  4960 ;; This function uses a non-reentrant model
  4961 ;;
  4962                           
  4963                           
  4964                           ;psect for function _main
  4965  1615                     _main:	
  4966                           
  4967                           ;main.c: 123: unsigned char i=0;
  4968                           
  4969                           ;incstack = 0
  4970                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4971  1615  0024               	movlb	4	; select bank4
  4972  1616  01D6               	clrf	main@i^(0+512)
  4973                           
  4974                           ;main.c: 125: ConfigureOscillator();
  4975  1617  3199  2177  3196   	fcall	_ConfigureOscillator
  4976                           
  4977                           ;main.c: 126: InitApp();
  4978  161A  3199  21F0  3196   	fcall	_InitApp
  4979                           
  4980                           ;main.c: 127: Init_System();
  4981  161D  318A  2251  3196   	fcall	_Init_System
  4982                           
  4983                           ;main.c: 128: PS_2_INIT();
  4984  1620  3199  2121  3196   	fcall	_PS_2_INIT
  4985                           
  4986                           ;main.c: 131: for(i =0;i<10;i++)
  4987  1623  0024               	movlb	4	; select bank4
  4988  1624  01D6               	clrf	main@i^(0+512)
  4989  1625  300A               	movlw	10
  4990  1626  0256               	subwf	main@i^(0+512),w
  4991  1627  1803               	btfsc	3,0
  4992  1628  2E52               	goto	l6980
  4993  1629                     l170:	
  4994                           
  4995                           ;main.c: 132: {
  4996                           ;main.c: 133: LATC |= 0b00010000;
  4997  1629  0022               	movlb	2	; select bank2
  4998  162A  160E               	bsf	14,4	;volatile
  4999                           
  5000                           ;main.c: 134: delayUS(10000);
  5001  162B  3000               	movlw	0
  5002  162C  0024               	movlb	4	; select bank4
  5003  162D  00A3               	movwf	(delayUS@US+3)^(0+512)
  5004  162E  3000               	movlw	0
  5005  162F  00A2               	movwf	(delayUS@US+2)^(0+512)
  5006  1630  3027               	movlw	39
  5007  1631  00A1               	movwf	(delayUS@US+1)^(0+512)
  5008  1632  3010               	movlw	16
  5009  1633  00A0               	movwf	delayUS@US^(0+512)
  5010  1634  319C  240E  3196   	fcall	_delayUS
  5011                           
  5012                           ;main.c: 135: LATC &= ~0b00010000;
  5013  1637  30EF               	movlw	239
  5014  1638  0024               	movlb	4	; select bank4
  5015  1639  00D5               	movwf	??_main^(0+512)
  5016  163A  0855               	movf	??_main^(0+512),w
  5017  163B  0022               	movlb	2	; select bank2
  5018  163C  058E               	andwf	14,f	;volatile
  5019                           
  5020                           ;main.c: 136: delayUS(10000);
  5021  163D  3000               	movlw	0
  5022  163E  0024               	movlb	4	; select bank4
  5023  163F  00A3               	movwf	(delayUS@US+3)^(0+512)
  5024  1640  3000               	movlw	0
  5025  1641  00A2               	movwf	(delayUS@US+2)^(0+512)
  5026  1642  3027               	movlw	39
  5027  1643  00A1               	movwf	(delayUS@US+1)^(0+512)
  5028  1644  3010               	movlw	16
  5029  1645  00A0               	movwf	delayUS@US^(0+512)
  5030  1646  319C  240E  3196   	fcall	_delayUS
  5031  1649  3001               	movlw	1
  5032  164A  0024               	movlb	4	; select bank4
  5033  164B  00D5               	movwf	??_main^(0+512)
  5034  164C  0855               	movf	??_main^(0+512),w
  5035  164D  07D6               	addwf	main@i^(0+512),f
  5036  164E  300A               	movlw	10
  5037  164F  0256               	subwf	main@i^(0+512),w
  5038  1650  1C03               	skipc
  5039  1651  2E29               	goto	l170
  5040  1652                     l6980:	
  5041                           
  5042                           ;main.c: 137: }
  5043                           ;main.c: 139: BatteryVoltage = ReadVoltage();
  5044  1652  3190  20E9  3196   	fcall	_ReadVoltage
  5045  1655  0024               	movlb	4	; select bank4
  5046  1656  084C               	movf	?_ReadVoltage^(0+512),w
  5047  1657  00D7               	movwf	_BatteryVoltage^(0+512)
  5048  1658  084D               	movf	(?_ReadVoltage+1)^(0+512),w
  5049  1659  00D8               	movwf	(_BatteryVoltage+1)^(0+512)
  5050  165A  084E               	movf	(?_ReadVoltage+2)^(0+512),w
  5051  165B  00D9               	movwf	(_BatteryVoltage+2)^(0+512)
  5052                           
  5053                           ;main.c: 140: if(BatteryVoltage < 4.25 )
  5054  165C  0857               	movf	_BatteryVoltage^(0+512),w
  5055  165D  00A0               	movwf	___ftge@ff1^(0+512)
  5056  165E  0858               	movf	(_BatteryVoltage+1)^(0+512),w
  5057  165F  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5058  1660  0859               	movf	(_BatteryVoltage+2)^(0+512),w
  5059  1661  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5060  1662  3000               	movlw	0
  5061  1663  00A3               	movwf	___ftge@ff2^(0+512)
  5062  1664  3088               	movlw	136
  5063  1665  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5064  1666  3040               	movlw	64
  5065  1667  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5066  1668  319C  2443  3196   	fcall	___ftge
  5067  166B  1803               	btfsc	3,0
  5068  166C  2E7A               	goto	l6984
  5069                           
  5070                           ;main.c: 141: {
  5071                           ;main.c: 142: UARTstringWAIT(VoltageMSG);
  5072  166D  3059               	movlw	low (_VoltageMSG| (0+32768))
  5073  166E  0024               	movlb	4	; select bank4
  5074  166F  00AF               	movwf	UARTstringWAIT@data^(0+512)
  5075  1670  3089               	movlw	high (_VoltageMSG| (0+32768))
  5076  1671  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  5077  1672  319B  23AA  3196   	fcall	_UARTstringWAIT
  5078                           
  5079                           ;main.c: 143: UARTstringWAIT("Low!\r\n");
  5080  1675  303A               	movlw	low (STR_1| (0+32768))
  5081  1676  0024               	movlb	4	; select bank4
  5082  1677  00AF               	movwf	UARTstringWAIT@data^(0+512)
  5083  1678  308A               	movlw	high (STR_1| (0+32768))
  5084  1679  2E98               	goto	L1
  5085  167A                     l6984:	
  5086                           ;main.c: 144: }
  5087                           
  5088                           
  5089                           ;main.c: 145: else if (BatteryVoltage > 5.35)
  5090  167A  3033               	movlw	51
  5091  167B  0024               	movlb	4	; select bank4
  5092  167C  00A0               	movwf	___ftge@ff1^(0+512)
  5093  167D  30AB               	movlw	171
  5094  167E  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5095  167F  3040               	movlw	64
  5096  1680  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5097  1681  0857               	movf	_BatteryVoltage^(0+512),w
  5098  1682  00A3               	movwf	___ftge@ff2^(0+512)
  5099  1683  0858               	movf	(_BatteryVoltage+1)^(0+512),w
  5100  1684  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5101  1685  0859               	movf	(_BatteryVoltage+2)^(0+512),w
  5102  1686  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5103  1687  319C  2443  3196   	fcall	___ftge
  5104  168A  1803               	btfsc	3,0
  5105  168B  2E9C               	goto	l6988
  5106                           
  5107                           ;main.c: 146: {
  5108                           ;main.c: 147: UARTstringWAIT(VoltageMSG);
  5109  168C  3059               	movlw	low (_VoltageMSG| (0+32768))
  5110  168D  0024               	movlb	4	; select bank4
  5111  168E  00AF               	movwf	UARTstringWAIT@data^(0+512)
  5112  168F  3089               	movlw	high (_VoltageMSG| (0+32768))
  5113  1690  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  5114  1691  319B  23AA  3196   	fcall	_UARTstringWAIT
  5115                           
  5116                           ;main.c: 148: UARTstringWAIT("High!\r\n");
  5117  1694  3032               	movlw	low (STR_2| (0+32768))
  5118  1695  0024               	movlb	4	; select bank4
  5119  1696  00AF               	movwf	UARTstringWAIT@data^(0+512)
  5120  1697  308A               	movlw	high (STR_2| (0+32768))
  5121  1698                     L1:	
  5122  1698  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  5123  1699  319B  23AA  3196   	fcall	_UARTstringWAIT
  5124  169C                     l6988:	
  5125                           
  5126                           ;main.c: 149: }
  5127                           ;main.c: 151: PS_2_ENABLE_INTERRUPT(0b00100000);
  5128  169C  3020               	movlw	32
  5129  169D  3199  2108  3196   	fcall	_PS_2_ENABLE_INTERRUPT
  5130                           
  5131                           ;main.c: 153: PIE1bits.RCIE = 1;
  5132  16A0  0021               	movlb	1	; select bank1
  5133  16A1  1691               	bsf	17,5	;volatile
  5134  16A2                     l6992:	
  5135                           ;main.c: 156: while(1)
  5136                           
  5137                           
  5138                           ;main.c: 157: {
  5139                           ;main.c: 158: BatteryVoltage = ReadVoltage();
  5140  16A2  3190  20E9  3196   	fcall	_ReadVoltage
  5141  16A5  0024               	movlb	4	; select bank4
  5142  16A6  084C               	movf	?_ReadVoltage^(0+512),w
  5143  16A7  00D7               	movwf	_BatteryVoltage^(0+512)
  5144  16A8  084D               	movf	(?_ReadVoltage+1)^(0+512),w
  5145  16A9  00D8               	movwf	(_BatteryVoltage+1)^(0+512)
  5146  16AA  084E               	movf	(?_ReadVoltage+2)^(0+512),w
  5147  16AB  00D9               	movwf	(_BatteryVoltage+2)^(0+512)
  5148                           
  5149                           ;main.c: 159: delayUS(20);
  5150  16AC  3000               	movlw	0
  5151  16AD  00A3               	movwf	(delayUS@US+3)^(0+512)
  5152  16AE  3000               	movlw	0
  5153  16AF  00A2               	movwf	(delayUS@US+2)^(0+512)
  5154  16B0  3000               	movlw	0
  5155  16B1  00A1               	movwf	(delayUS@US+1)^(0+512)
  5156  16B2  3014               	movlw	20
  5157  16B3  00A0               	movwf	delayUS@US^(0+512)
  5158  16B4  319C  240E  3196   	fcall	_delayUS
  5159                           
  5160                           ;main.c: 160: if(BatteryVoltage < 4.25 || BatteryVoltage > 5.35)
  5161  16B7  0024               	movlb	4	; select bank4
  5162  16B8  0857               	movf	_BatteryVoltage^(0+512),w
  5163  16B9  00A0               	movwf	___ftge@ff1^(0+512)
  5164  16BA  0858               	movf	(_BatteryVoltage+1)^(0+512),w
  5165  16BB  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5166  16BC  0859               	movf	(_BatteryVoltage+2)^(0+512),w
  5167  16BD  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5168  16BE  3000               	movlw	0
  5169  16BF  00A3               	movwf	___ftge@ff2^(0+512)
  5170  16C0  3088               	movlw	136
  5171  16C1  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5172  16C2  3040               	movlw	64
  5173  16C3  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5174  16C4  319C  2443  3196   	fcall	___ftge
  5175  16C7  1C03               	btfss	3,0
  5176  16C8  2EDB               	goto	l178
  5177  16C9  3033               	movlw	51
  5178  16CA  0024               	movlb	4	; select bank4
  5179  16CB  00A0               	movwf	___ftge@ff1^(0+512)
  5180  16CC  30AB               	movlw	171
  5181  16CD  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5182  16CE  3040               	movlw	64
  5183  16CF  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5184  16D0  0857               	movf	_BatteryVoltage^(0+512),w
  5185  16D1  00A3               	movwf	___ftge@ff2^(0+512)
  5186  16D2  0858               	movf	(_BatteryVoltage+1)^(0+512),w
  5187  16D3  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5188  16D4  0859               	movf	(_BatteryVoltage+2)^(0+512),w
  5189  16D5  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5190  16D6  319C  2443  3196   	fcall	___ftge
  5191  16D9  1803               	btfsc	3,0
  5192  16DA  2EDF               	goto	l7000
  5193  16DB                     l178:	
  5194                           
  5195                           ;main.c: 161: {
  5196                           ;main.c: 162: Alarm = 1;
  5197  16DB  0024               	movlb	4	; select bank4
  5198  16DC  01DE               	clrf	_Alarm^(0+512)
  5199  16DD  0ADE               	incf	_Alarm^(0+512),f
  5200                           
  5201                           ;main.c: 163: }
  5202  16DE  2EE3               	goto	l7004
  5203  16DF                     l7000:	
  5204                           
  5205                           ;main.c: 164: else
  5206                           ;main.c: 165: {
  5207                           ;main.c: 166: Alarm = 0;
  5208  16DF  0024               	movlb	4	; select bank4
  5209  16E0  01DE               	clrf	_Alarm^(0+512)
  5210                           
  5211                           ;main.c: 167: LATC |= 0b00000010;
  5212  16E1  0022               	movlb	2	; select bank2
  5213  16E2  148E               	bsf	14,1	;volatile
  5214  16E3                     l7004:	
  5215                           
  5216                           ;main.c: 168: }
  5217                           ;main.c: 169: if(Alarm)
  5218  16E3  0024               	movlb	4	; select bank4
  5219  16E4  085E               	movf	_Alarm^(0+512),w
  5220  16E5  1903               	btfsc	3,2
  5221  16E6  2EF7               	goto	l7014
  5222                           
  5223                           ;main.c: 170: {
  5224                           ;main.c: 171: pwrLEDtoggle++;
  5225  16E7  3001               	movlw	1
  5226  16E8  07DC               	addwf	_pwrLEDtoggle^(0+512),f
  5227  16E9  3000               	movlw	0
  5228  16EA  3DDD               	addwfc	(_pwrLEDtoggle+1)^(0+512),f
  5229                           
  5230                           ;main.c: 172: if(pwrLEDtoggle == 100)
  5231  16EB  3064               	movlw	100
  5232  16EC  065C               	xorwf	_pwrLEDtoggle^(0+512),w
  5233  16ED  045D               	iorwf	(_pwrLEDtoggle+1)^(0+512),w
  5234  16EE  1D03               	btfss	3,2
  5235  16EF  2EF7               	goto	l7014
  5236                           
  5237                           ;main.c: 173: {
  5238                           ;main.c: 174: pwrLEDtoggle = 0;
  5239  16F0  01DC               	clrf	_pwrLEDtoggle^(0+512)
  5240  16F1  01DD               	clrf	(_pwrLEDtoggle+1)^(0+512)
  5241                           
  5242                           ;main.c: 175: LATC ^= 0b00000010;
  5243  16F2  3002               	movlw	2
  5244  16F3  00D5               	movwf	??_main^(0+512)
  5245  16F4  0855               	movf	??_main^(0+512),w
  5246  16F5  0022               	movlb	2	; select bank2
  5247  16F6  068E               	xorwf	14,f	;volatile
  5248  16F7                     l7014:	
  5249                           
  5250                           ;main.c: 176: }
  5251                           ;main.c: 177: }
  5252                           ;main.c: 179: if(SinLEDtimer < 100)
  5253  16F7  3000               	movlw	0
  5254  16F8  0024               	movlb	4	; select bank4
  5255  16F9  025B               	subwf	(_SinLEDtimer+1)^(0+512),w
  5256  16FA  3064               	movlw	100
  5257  16FB  1903               	skipnz
  5258  16FC  025A               	subwf	_SinLEDtimer^(0+512),w
  5259  16FD  1803               	skipnc
  5260  16FE  2F04               	goto	l7018
  5261                           
  5262                           ;main.c: 180: {
  5263                           ;main.c: 181: SinLEDtimer++;
  5264  16FF  3001               	movlw	1
  5265  1700  07DA               	addwf	_SinLEDtimer^(0+512),f
  5266  1701  3000               	movlw	0
  5267  1702  3DDB               	addwfc	(_SinLEDtimer+1)^(0+512),f
  5268                           
  5269                           ;main.c: 182: }
  5270  1703  2EA2               	goto	l6992
  5271  1704                     l7018:	
  5272                           
  5273                           ;main.c: 183: else
  5274                           ;main.c: 184: {
  5275                           ;main.c: 185: LATC &= ~0b00001000;
  5276  1704  30F7               	movlw	247
  5277  1705  00D5               	movwf	??_main^(0+512)
  5278  1706  0855               	movf	??_main^(0+512),w
  5279  1707  0022               	movlb	2	; select bank2
  5280  1708  058E               	andwf	14,f	;volatile
  5281  1709  2EA2               	goto	l6992
  5282  170A                     __end_of_main:	
  5283                           
  5284                           	psect	text1
  5285  1C43                     __ptext1:	
  5286 ;; *************** function ___ftge *****************
  5287 ;; Defined at:
  5288 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  5289 ;; Parameters:    Size  Location     Type
  5290 ;;  ff1             3    0[BANK4 ] float 
  5291 ;;  ff2             3    3[BANK4 ] float 
  5292 ;; Auto vars:     Size  Location     Type
  5293 ;;		None
  5294 ;; Return value:  Size  Location     Type
  5295 ;;		None               void
  5296 ;; Registers used:
  5297 ;;		wreg, status,2, status,0
  5298 ;; Tracked objects:
  5299 ;;		On entry : 0/0
  5300 ;;		On exit  : 0/0
  5301 ;;		Unchanged: 0/0
  5302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5303 ;;      Params:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5305 ;;      Temps:          0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  5306 ;;      Totals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0
  5307 ;;Total ram usage:        9 bytes
  5308 ;; Hardware stack levels used:    1
  5309 ;; Hardware stack levels required when called:    7
  5310 ;; This function calls:
  5311 ;;		Nothing
  5312 ;; This function is called by:
  5313 ;;		_main
  5314 ;; This function uses a non-reentrant model
  5315 ;;
  5316                           
  5317                           
  5318                           ;psect for function ___ftge
  5319  1C43                     ___ftge:	
  5320                           
  5321                           ;incstack = 0
  5322                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  5323  1C43  0024               	movlb	4	; select bank4
  5324  1C44  1FA2               	btfss	(___ftge@ff1+2)^(0+512),7
  5325  1C45  2C5A               	goto	l6940
  5326  1C46  0920               	comf	___ftge@ff1^(0+512),w
  5327  1C47  00A6               	movwf	??___ftge^(0+512)
  5328  1C48  0921               	comf	(___ftge@ff1+1)^(0+512),w
  5329  1C49  00A7               	movwf	(??___ftge^(0+512)+1)
  5330  1C4A  0922               	comf	(___ftge@ff1+2)^(0+512),w
  5331  1C4B  00A8               	movwf	(??___ftge^(0+512)+2)
  5332  1C4C  0AA6               	incf	??___ftge^(0+512),f
  5333  1C4D  1903               	skipnz
  5334  1C4E  0AA7               	incf	(??___ftge^(0+512)+1),f
  5335  1C4F  1903               	skipnz
  5336  1C50  0AA8               	incf	(??___ftge^(0+512)+2),f
  5337  1C51  3000               	movlw	0
  5338  1C52  0726               	addwf	??___ftge^(0+512),w
  5339  1C53  00A0               	movwf	___ftge@ff1^(0+512)
  5340  1C54  3000               	movlw	0
  5341  1C55  3D27               	addwfc	(??___ftge+1)^(0+512),w
  5342  1C56  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5343  1C57  3080               	movlw	128
  5344  1C58  3D28               	addwfc	(??___ftge+2)^(0+512),w
  5345  1C59  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5346  1C5A                     l6940:	
  5347  1C5A  1FA5               	btfss	(___ftge@ff2+2)^(0+512),7
  5348  1C5B  2C70               	goto	l6944
  5349  1C5C  0923               	comf	___ftge@ff2^(0+512),w
  5350  1C5D  00A6               	movwf	??___ftge^(0+512)
  5351  1C5E  0924               	comf	(___ftge@ff2+1)^(0+512),w
  5352  1C5F  00A7               	movwf	(??___ftge^(0+512)+1)
  5353  1C60  0925               	comf	(___ftge@ff2+2)^(0+512),w
  5354  1C61  00A8               	movwf	(??___ftge^(0+512)+2)
  5355  1C62  0AA6               	incf	??___ftge^(0+512),f
  5356  1C63  1903               	skipnz
  5357  1C64  0AA7               	incf	(??___ftge^(0+512)+1),f
  5358  1C65  1903               	skipnz
  5359  1C66  0AA8               	incf	(??___ftge^(0+512)+2),f
  5360  1C67  3000               	movlw	0
  5361  1C68  0726               	addwf	??___ftge^(0+512),w
  5362  1C69  00A3               	movwf	___ftge@ff2^(0+512)
  5363  1C6A  3000               	movlw	0
  5364  1C6B  3D27               	addwfc	(??___ftge+1)^(0+512),w
  5365  1C6C  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5366  1C6D  3080               	movlw	128
  5367  1C6E  3D28               	addwfc	(??___ftge+2)^(0+512),w
  5368  1C6F  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5369  1C70                     l6944:	
  5370  1C70  3080               	movlw	128
  5371  1C71  06A2               	xorwf	(___ftge@ff1+2)^(0+512),f
  5372  1C72  3080               	movlw	128
  5373  1C73  06A5               	xorwf	(___ftge@ff2+2)^(0+512),f
  5374  1C74  0825               	movf	(___ftge@ff2+2)^(0+512),w
  5375  1C75  0222               	subwf	(___ftge@ff1+2)^(0+512),w
  5376  1C76  1D03               	skipz
  5377  1C77  0008               	return
  5378  1C78  0824               	movf	(___ftge@ff2+1)^(0+512),w
  5379  1C79  0221               	subwf	(___ftge@ff1+1)^(0+512),w
  5380  1C7A  1D03               	skipz
  5381  1C7B  0008               	return
  5382  1C7C  0823               	movf	___ftge@ff2^(0+512),w
  5383  1C7D  0220               	subwf	___ftge@ff1^(0+512),w
  5384  1C7E  0008               	return
  5385  1C7F                     __end_of___ftge:	
  5386                           
  5387                           	psect	text2
  5388  10E9                     __ptext2:	
  5389 ;; *************** function _ReadVoltage *****************
  5390 ;; Defined at:
  5391 ;;		line 62 in file "ADC.c"
  5392 ;; Parameters:    Size  Location     Type
  5393 ;;		None
  5394 ;; Auto vars:     Size  Location     Type
  5395 ;;  voltage         3   48[BANK4 ] float 
  5396 ;;  temp            2   51[BANK4 ] unsigned int 
  5397 ;; Return value:  Size  Location     Type
  5398 ;;                  3   44[BANK4 ] unsigned int 
  5399 ;; Registers used:
  5400 ;;		wreg, status,2, status,0, pclath, cstack
  5401 ;; Tracked objects:
  5402 ;;		On entry : 0/0
  5403 ;;		On exit  : 0/0
  5404 ;;		Unchanged: 0/0
  5405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5406 ;;      Params:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  5407 ;;      Locals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  5408 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  5409 ;;      Totals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0
  5410 ;;Total ram usage:        9 bytes
  5411 ;; Hardware stack levels used:    1
  5412 ;; Hardware stack levels required when called:    9
  5413 ;; This function calls:
  5414 ;;		_DisableInternalADC
  5415 ;;		_InternalADC_Read
  5416 ;;		___ftdiv
  5417 ;;		___ftmul
  5418 ;;		___lwtoft
  5419 ;; This function is called by:
  5420 ;;		_main
  5421 ;; This function uses a non-reentrant model
  5422 ;;
  5423                           
  5424                           
  5425                           ;psect for function _ReadVoltage
  5426  10E9                     _ReadVoltage:	
  5427                           
  5428                           ;ADC.c: 64: unsigned int temp;
  5429                           ;ADC.c: 65: double voltage;
  5430                           ;ADC.c: 67: LATC &= ~0b00000001;
  5431                           
  5432                           ;incstack = 0
  5433                           ; Regs used in _ReadVoltage: [wreg+status,2+status,0+pclath+cstack]
  5434  10E9  30FE               	movlw	254
  5435  10EA  0024               	movlb	4	; select bank4
  5436  10EB  00CF               	movwf	??_ReadVoltage^(0+512)
  5437  10EC  084F               	movf	??_ReadVoltage^(0+512),w
  5438  10ED  0022               	movlb	2	; select bank2
  5439  10EE  058E               	andwf	14,f	;volatile
  5440                           
  5441                           ;ADC.c: 70: temp = InternalADC_Read(2);
  5442  10EF  3002               	movlw	2
  5443  10F0  319C  247F  3190   	fcall	_InternalADC_Read
  5444  10F3  0024               	movlb	4	; select bank4
  5445  10F4  082B               	movf	(?_InternalADC_Read+1)^(0+512),w
  5446  10F5  00D4               	movwf	(ReadVoltage@temp+1)^(0+512)
  5447  10F6  082A               	movf	?_InternalADC_Read^(0+512),w
  5448  10F7  00D3               	movwf	ReadVoltage@temp^(0+512)
  5449                           
  5450                           ;ADC.c: 71: DisableInternalADC();
  5451  10F8  3198  2091  3190   	fcall	_DisableInternalADC
  5452                           
  5453                           ;ADC.c: 73: LATC |= 0b00000001;
  5454  10FB  0022               	movlb	2	; select bank2
  5455  10FC  140E               	bsf	14,0	;volatile
  5456                           
  5457                           ;ADC.c: 78: if((FVRCON & 0x03) == 0x03)
  5458  10FD  3003               	movlw	3
  5459  10FE  0517               	andwf	23,w	;volatile
  5460  10FF  0024               	movlb	4	; select bank4
  5461  1100  00CF               	movwf	??_ReadVoltage^(0+512)
  5462  1101  3003               	movlw	3
  5463  1102  064F               	xorwf	??_ReadVoltage^(0+512),w
  5464  1103  1D03               	btfss	3,2
  5465  1104  290B               	goto	l6926
  5466                           
  5467                           ;ADC.c: 79: {
  5468                           ;ADC.c: 81: temp <<= 2;
  5469  1105  3002               	movlw	2
  5470  1106                     u8905:	
  5471  1106  35D3               	lslf	ReadVoltage@temp^(0+512),f
  5472  1107  0DD4               	rlf	(ReadVoltage@temp+1)^(0+512),f
  5473  1108  0B89               	decfsz	9,f
  5474  1109  2906               	goto	u8905
  5475                           
  5476                           ;ADC.c: 82: }
  5477  110A  2919               	goto	l6930
  5478  110B                     l6926:	
  5479                           
  5480                           ;ADC.c: 83: else if((FVRCON & 0x03) == 0x02)
  5481  110B  3003               	movlw	3
  5482  110C  0022               	movlb	2	; select bank2
  5483  110D  0517               	andwf	23,w	;volatile
  5484  110E  0024               	movlb	4	; select bank4
  5485  110F  00CF               	movwf	??_ReadVoltage^(0+512)
  5486  1110  3002               	movlw	2
  5487  1111  064F               	xorwf	??_ReadVoltage^(0+512),w
  5488  1112  1D03               	btfss	3,2
  5489  1113  2919               	goto	l6930
  5490                           
  5491                           ;ADC.c: 84: {
  5492                           ;ADC.c: 86: temp <<= 1;
  5493  1114  3001               	movlw	1
  5494  1115                     u8925:	
  5495  1115  35D3               	lslf	ReadVoltage@temp^(0+512),f
  5496  1116  0DD4               	rlf	(ReadVoltage@temp+1)^(0+512),f
  5497  1117  0B89               	decfsz	9,f
  5498  1118  2915               	goto	u8925
  5499  1119                     l6930:	
  5500                           
  5501                           ;ADC.c: 87: }
  5502                           ;ADC.c: 88: voltage = ((double)temp / 1000) * 5.7;
  5503  1119  3066               	movlw	102
  5504  111A  00BC               	movwf	___ftmul@f1^(0+512)
  5505  111B  30B6               	movlw	182
  5506  111C  00BD               	movwf	(___ftmul@f1+1)^(0+512)
  5507  111D  3040               	movlw	64
  5508  111E  00BE               	movwf	(___ftmul@f1+2)^(0+512)
  5509  111F  3000               	movlw	0
  5510  1120  00AC               	movwf	___ftdiv@f2^(0+512)
  5511  1121  307A               	movlw	122
  5512  1122  00AD               	movwf	(___ftdiv@f2+1)^(0+512)
  5513  1123  3044               	movlw	68
  5514  1124  00AE               	movwf	(___ftdiv@f2+2)^(0+512)
  5515  1125  0854               	movf	(ReadVoltage@temp+1)^(0+512),w
  5516  1126  00A9               	movwf	(___lwtoft@c+1)^(0+512)
  5517  1127  0853               	movf	ReadVoltage@temp^(0+512),w
  5518  1128  00A8               	movwf	___lwtoft@c^(0+512)
  5519  1129  3199  21C3  3190   	fcall	___lwtoft
  5520  112C  0024               	movlb	4	; select bank4
  5521  112D  0828               	movf	?___lwtoft^(0+512),w
  5522  112E  00AF               	movwf	___ftdiv@f1^(0+512)
  5523  112F  0829               	movf	(?___lwtoft+1)^(0+512),w
  5524  1130  00B0               	movwf	(___ftdiv@f1+1)^(0+512)
  5525  1131  082A               	movf	(?___lwtoft+2)^(0+512),w
  5526  1132  00B1               	movwf	(___ftdiv@f1+2)^(0+512)
  5527  1133  3192  2218  3190   	fcall	___ftdiv
  5528  1136  0024               	movlb	4	; select bank4
  5529  1137  082C               	movf	?___ftdiv^(0+512),w
  5530  1138  00BF               	movwf	___ftmul@f2^(0+512)
  5531  1139  082D               	movf	(?___ftdiv+1)^(0+512),w
  5532  113A  00C0               	movwf	(___ftmul@f2+1)^(0+512)
  5533  113B  082E               	movf	(?___ftdiv+2)^(0+512),w
  5534  113C  00C1               	movwf	(___ftmul@f2+2)^(0+512)
  5535  113D  3192  22C1         	fcall	___ftmul
  5536  113F  0024               	movlb	4	; select bank4
  5537  1140  083C               	movf	?___ftmul^(0+512),w
  5538  1141  00D0               	movwf	ReadVoltage@voltage^(0+512)
  5539  1142  083D               	movf	(?___ftmul+1)^(0+512),w
  5540  1143  00D1               	movwf	(ReadVoltage@voltage+1)^(0+512)
  5541  1144  083E               	movf	(?___ftmul+2)^(0+512),w
  5542  1145  00D2               	movwf	(ReadVoltage@voltage+2)^(0+512)
  5543                           
  5544                           ;ADC.c: 89: return voltage;
  5545  1146  0850               	movf	ReadVoltage@voltage^(0+512),w
  5546  1147  00CC               	movwf	?_ReadVoltage^(0+512)
  5547  1148  0851               	movf	(ReadVoltage@voltage+1)^(0+512),w
  5548  1149  00CD               	movwf	(?_ReadVoltage+1)^(0+512)
  5549  114A  0852               	movf	(ReadVoltage@voltage+2)^(0+512),w
  5550  114B  00CE               	movwf	(?_ReadVoltage+2)^(0+512)
  5551  114C  0008               	return
  5552  114D                     __end_of_ReadVoltage:	
  5553                           
  5554                           	psect	text3
  5555  19C3                     __ptext3:	
  5556 ;; *************** function ___lwtoft *****************
  5557 ;; Defined at:
  5558 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  5559 ;; Parameters:    Size  Location     Type
  5560 ;;  c               2    8[BANK4 ] unsigned int 
  5561 ;; Auto vars:     Size  Location     Type
  5562 ;;		None
  5563 ;; Return value:  Size  Location     Type
  5564 ;;                  3    8[BANK4 ] float 
  5565 ;; Registers used:
  5566 ;;		wreg, status,2, status,0, pclath, cstack
  5567 ;; Tracked objects:
  5568 ;;		On entry : 0/0
  5569 ;;		On exit  : 0/0
  5570 ;;		Unchanged: 0/0
  5571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5572 ;;      Params:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  5573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5574 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  5575 ;;      Totals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  5576 ;;Total ram usage:        4 bytes
  5577 ;; Hardware stack levels used:    1
  5578 ;; Hardware stack levels required when called:    8
  5579 ;; This function calls:
  5580 ;;		___ftpack
  5581 ;; This function is called by:
  5582 ;;		_ReadVoltage
  5583 ;; This function uses a non-reentrant model
  5584 ;;
  5585                           
  5586                           
  5587                           ;psect for function ___lwtoft
  5588  19C3                     ___lwtoft:	
  5589                           
  5590                           ;incstack = 0
  5591                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  5592  19C3  0024               	movlb	4	; select bank4
  5593  19C4  0828               	movf	___lwtoft@c^(0+512),w
  5594  19C5  00A0               	movwf	___ftpack@arg^(0+512)
  5595  19C6  0829               	movf	(___lwtoft@c+1)^(0+512),w
  5596  19C7  00A1               	movwf	(___ftpack@arg+1)^(0+512)
  5597  19C8  01A2               	clrf	(___ftpack@arg+2)^(0+512)
  5598  19C9  308E               	movlw	142
  5599  19CA  00AB               	movwf	??___lwtoft^(0+512)
  5600  19CB  082B               	movf	??___lwtoft^(0+512),w
  5601  19CC  00A3               	movwf	___ftpack@exp^(0+512)
  5602  19CD  01A4               	clrf	___ftpack@sign^(0+512)
  5603  19CE  3191  214D         	fcall	___ftpack
  5604  19D0  0024               	movlb	4	; select bank4
  5605  19D1  0820               	movf	?___ftpack^(0+512),w
  5606  19D2  00A8               	movwf	?___lwtoft^(0+512)
  5607  19D3  0821               	movf	(?___ftpack+1)^(0+512),w
  5608  19D4  00A9               	movwf	(?___lwtoft+1)^(0+512)
  5609  19D5  0822               	movf	(?___ftpack+2)^(0+512),w
  5610  19D6  00AA               	movwf	(?___lwtoft+2)^(0+512)
  5611  19D7  0008               	return
  5612  19D8                     __end_of___lwtoft:	
  5613                           
  5614                           	psect	text4
  5615  12C1                     __ptext4:	
  5616 ;; *************** function ___ftmul *****************
  5617 ;; Defined at:
  5618 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  5619 ;; Parameters:    Size  Location     Type
  5620 ;;  f1              3   28[BANK4 ] float 
  5621 ;;  f2              3   31[BANK4 ] float 
  5622 ;; Auto vars:     Size  Location     Type
  5623 ;;  f3_as_produc    3   39[BANK4 ] unsigned um
  5624 ;;  sign            1   43[BANK4 ] unsigned char 
  5625 ;;  cntr            1   42[BANK4 ] unsigned char 
  5626 ;;  exp             1   38[BANK4 ] unsigned char 
  5627 ;; Return value:  Size  Location     Type
  5628 ;;                  3   28[BANK4 ] float 
  5629 ;; Registers used:
  5630 ;;		wreg, status,2, status,0, pclath, cstack
  5631 ;; Tracked objects:
  5632 ;;		On entry : 0/0
  5633 ;;		On exit  : 0/0
  5634 ;;		Unchanged: 0/0
  5635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5636 ;;      Params:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5637 ;;      Locals:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5638 ;;      Temps:          0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  5639 ;;      Totals:         0       0       0       0       0      16       0       0       0       0       0       0       
      +0       0
  5640 ;;Total ram usage:       16 bytes
  5641 ;; Hardware stack levels used:    1
  5642 ;; Hardware stack levels required when called:    8
  5643 ;; This function calls:
  5644 ;;		___ftpack
  5645 ;; This function is called by:
  5646 ;;		_ReadVoltage
  5647 ;; This function uses a non-reentrant model
  5648 ;;
  5649                           
  5650                           
  5651                           ;psect for function ___ftmul
  5652  12C1                     ___ftmul:	
  5653                           
  5654                           ;incstack = 0
  5655                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  5656  12C1  0024               	movlb	4	; select bank4
  5657  12C2  083C               	movf	___ftmul@f1^(0+512),w
  5658  12C3  00C2               	movwf	??___ftmul^(0+512)
  5659  12C4  083D               	movf	(___ftmul@f1+1)^(0+512),w
  5660  12C5  00C3               	movwf	(??___ftmul^(0+512)+1)
  5661  12C6  083E               	movf	(___ftmul@f1+2)^(0+512),w
  5662  12C7  00C4               	movwf	(??___ftmul^(0+512)+2)
  5663  12C8  1003               	clrc
  5664  12C9  0D43               	rlf	(??___ftmul^(0+512)+1),w
  5665  12CA  0D44               	rlf	(??___ftmul^(0+512)+2),w
  5666  12CB  00C5               	movwf	(??___ftmul+3)^(0+512)
  5667  12CC  0845               	movf	(??___ftmul+3)^(0+512),w
  5668  12CD  00C6               	movwf	___ftmul@exp^(0+512)
  5669  12CE  0846               	movf	___ftmul@exp^(0+512),w
  5670  12CF  1D03               	btfss	3,2
  5671  12D0  2AD8               	goto	l6758
  5672  12D1  3000               	movlw	0
  5673  12D2  00BC               	movwf	?___ftmul^(0+512)
  5674  12D3  3000               	movlw	0
  5675  12D4  00BD               	movwf	(?___ftmul+1)^(0+512)
  5676  12D5  3000               	movlw	0
  5677  12D6  00BE               	movwf	(?___ftmul+2)^(0+512)
  5678  12D7  0008               	return
  5679  12D8                     l6758:	
  5680  12D8  083F               	movf	___ftmul@f2^(0+512),w
  5681  12D9  00C2               	movwf	??___ftmul^(0+512)
  5682  12DA  0840               	movf	(___ftmul@f2+1)^(0+512),w
  5683  12DB  00C3               	movwf	(??___ftmul^(0+512)+1)
  5684  12DC  0841               	movf	(___ftmul@f2+2)^(0+512),w
  5685  12DD  00C4               	movwf	(??___ftmul^(0+512)+2)
  5686  12DE  1003               	clrc
  5687  12DF  0D43               	rlf	(??___ftmul^(0+512)+1),w
  5688  12E0  0D44               	rlf	(??___ftmul^(0+512)+2),w
  5689  12E1  00C5               	movwf	(??___ftmul+3)^(0+512)
  5690  12E2  0845               	movf	(??___ftmul+3)^(0+512),w
  5691  12E3  00CB               	movwf	___ftmul@sign^(0+512)
  5692  12E4  084B               	movf	___ftmul@sign^(0+512),w
  5693  12E5  1D03               	btfss	3,2
  5694  12E6  2AEE               	goto	l6764
  5695  12E7  3000               	movlw	0
  5696  12E8  00BC               	movwf	?___ftmul^(0+512)
  5697  12E9  3000               	movlw	0
  5698  12EA  00BD               	movwf	(?___ftmul+1)^(0+512)
  5699  12EB  3000               	movlw	0
  5700  12EC  00BE               	movwf	(?___ftmul+2)^(0+512)
  5701  12ED  0008               	return
  5702  12EE                     l6764:	
  5703  12EE  084B               	movf	___ftmul@sign^(0+512),w
  5704  12EF  3E7B               	addlw	123
  5705  12F0  00C2               	movwf	??___ftmul^(0+512)
  5706  12F1  0842               	movf	??___ftmul^(0+512),w
  5707  12F2  07C6               	addwf	___ftmul@exp^(0+512),f
  5708  12F3  083C               	movf	___ftmul@f1^(0+512),w
  5709  12F4  00C2               	movwf	??___ftmul^(0+512)
  5710  12F5  083D               	movf	(___ftmul@f1+1)^(0+512),w
  5711  12F6  00C3               	movwf	(??___ftmul^(0+512)+1)
  5712  12F7  083E               	movf	(___ftmul@f1+2)^(0+512),w
  5713  12F8  00C4               	movwf	(??___ftmul^(0+512)+2)
  5714  12F9  3010               	movlw	16
  5715  12FA                     u8725:	
  5716  12FA  36C4               	lsrf	(??___ftmul^(0+512)+2),f
  5717  12FB  0CC3               	rrf	(??___ftmul^(0+512)+1),f
  5718  12FC  0CC2               	rrf	??___ftmul^(0+512),f
  5719  12FD  0B89               	decfsz	9,f
  5720  12FE  2AFA               	goto	u8725
  5721  12FF  0842               	movf	??___ftmul^(0+512),w
  5722  1300  00C5               	movwf	(??___ftmul+3)^(0+512)
  5723  1301  0845               	movf	(??___ftmul+3)^(0+512),w
  5724  1302  00CB               	movwf	___ftmul@sign^(0+512)
  5725  1303  083F               	movf	___ftmul@f2^(0+512),w
  5726  1304  00C2               	movwf	??___ftmul^(0+512)
  5727  1305  0840               	movf	(___ftmul@f2+1)^(0+512),w
  5728  1306  00C3               	movwf	(??___ftmul^(0+512)+1)
  5729  1307  0841               	movf	(___ftmul@f2+2)^(0+512),w
  5730  1308  00C4               	movwf	(??___ftmul^(0+512)+2)
  5731  1309  3010               	movlw	16
  5732  130A                     u8735:	
  5733  130A  36C4               	lsrf	(??___ftmul^(0+512)+2),f
  5734  130B  0CC3               	rrf	(??___ftmul^(0+512)+1),f
  5735  130C  0CC2               	rrf	??___ftmul^(0+512),f
  5736  130D  0B89               	decfsz	9,f
  5737  130E  2B0A               	goto	u8735
  5738  130F  0842               	movf	??___ftmul^(0+512),w
  5739  1310  00C5               	movwf	(??___ftmul+3)^(0+512)
  5740  1311  0845               	movf	(??___ftmul+3)^(0+512),w
  5741  1312  06CB               	xorwf	___ftmul@sign^(0+512),f
  5742  1313  3080               	movlw	128
  5743  1314  00C2               	movwf	??___ftmul^(0+512)
  5744  1315  0842               	movf	??___ftmul^(0+512),w
  5745  1316  05CB               	andwf	___ftmul@sign^(0+512),f
  5746  1317  17BD               	bsf	(___ftmul@f1^(0+512)+1),7
  5747  1318  17C0               	bsf	(___ftmul@f2^(0+512)+1),7
  5748  1319  30FF               	movlw	255
  5749  131A  05BF               	andwf	___ftmul@f2^(0+512),f
  5750  131B  30FF               	movlw	255
  5751  131C  05C0               	andwf	(___ftmul@f2+1)^(0+512),f
  5752  131D  3000               	movlw	0
  5753  131E  05C1               	andwf	(___ftmul@f2+2)^(0+512),f
  5754  131F  3000               	movlw	0
  5755  1320  00C7               	movwf	___ftmul@f3_as_product^(0+512)
  5756  1321  3000               	movlw	0
  5757  1322  00C8               	movwf	(___ftmul@f3_as_product+1)^(0+512)
  5758  1323  3000               	movlw	0
  5759  1324  00C9               	movwf	(___ftmul@f3_as_product+2)^(0+512)
  5760  1325  3007               	movlw	7
  5761  1326  00C2               	movwf	??___ftmul^(0+512)
  5762  1327  0842               	movf	??___ftmul^(0+512),w
  5763  1328  00CA               	movwf	___ftmul@cntr^(0+512)
  5764  1329                     l6776:	
  5765  1329  1C3C               	btfss	___ftmul@f1^(0+512),0
  5766  132A  2B31               	goto	l6780
  5767  132B  083F               	movf	___ftmul@f2^(0+512),w
  5768  132C  07C7               	addwf	___ftmul@f3_as_product^(0+512),f
  5769  132D  0840               	movf	(___ftmul@f2+1)^(0+512),w
  5770  132E  3DC8               	addwfc	(___ftmul@f3_as_product+1)^(0+512),f
  5771  132F  0841               	movf	(___ftmul@f2+2)^(0+512),w
  5772  1330  3DC9               	addwfc	(___ftmul@f3_as_product+2)^(0+512),f
  5773  1331                     l6780:	
  5774  1331  3001               	movlw	1
  5775  1332                     u8755:	
  5776  1332  36BE               	lsrf	(___ftmul@f1+2)^(0+512),f
  5777  1333  0CBD               	rrf	(___ftmul@f1+1)^(0+512),f
  5778  1334  0CBC               	rrf	___ftmul@f1^(0+512),f
  5779  1335  0B89               	decfsz	9,f
  5780  1336  2B32               	goto	u8755
  5781  1337  3001               	movlw	1
  5782  1338                     u8765:	
  5783  1338  35BF               	lslf	___ftmul@f2^(0+512),f
  5784  1339  0DC0               	rlf	(___ftmul@f2+1)^(0+512),f
  5785  133A  0DC1               	rlf	(___ftmul@f2+2)^(0+512),f
  5786  133B  0B89               	decfsz	9,f
  5787  133C  2B38               	goto	u8765
  5788  133D  3001               	movlw	1
  5789  133E  02CA               	subwf	___ftmul@cntr^(0+512),f
  5790  133F  1D03               	btfss	3,2
  5791  1340  2B29               	goto	l6776
  5792  1341  3009               	movlw	9
  5793  1342  00C2               	movwf	??___ftmul^(0+512)
  5794  1343  0842               	movf	??___ftmul^(0+512),w
  5795  1344  00CA               	movwf	___ftmul@cntr^(0+512)
  5796  1345                     l6788:	
  5797  1345  1C3C               	btfss	___ftmul@f1^(0+512),0
  5798  1346  2B4D               	goto	l6792
  5799  1347  083F               	movf	___ftmul@f2^(0+512),w
  5800  1348  07C7               	addwf	___ftmul@f3_as_product^(0+512),f
  5801  1349  0840               	movf	(___ftmul@f2+1)^(0+512),w
  5802  134A  3DC8               	addwfc	(___ftmul@f3_as_product+1)^(0+512),f
  5803  134B  0841               	movf	(___ftmul@f2+2)^(0+512),w
  5804  134C  3DC9               	addwfc	(___ftmul@f3_as_product+2)^(0+512),f
  5805  134D                     l6792:	
  5806  134D  3001               	movlw	1
  5807  134E                     u8795:	
  5808  134E  36BE               	lsrf	(___ftmul@f1+2)^(0+512),f
  5809  134F  0CBD               	rrf	(___ftmul@f1+1)^(0+512),f
  5810  1350  0CBC               	rrf	___ftmul@f1^(0+512),f
  5811  1351  0B89               	decfsz	9,f
  5812  1352  2B4E               	goto	u8795
  5813  1353  3001               	movlw	1
  5814  1354                     u8805:	
  5815  1354  36C9               	lsrf	(___ftmul@f3_as_product+2)^(0+512),f
  5816  1355  0CC8               	rrf	(___ftmul@f3_as_product+1)^(0+512),f
  5817  1356  0CC7               	rrf	___ftmul@f3_as_product^(0+512),f
  5818  1357  0B89               	decfsz	9,f
  5819  1358  2B54               	goto	u8805
  5820  1359  3001               	movlw	1
  5821  135A  02CA               	subwf	___ftmul@cntr^(0+512),f
  5822  135B  1D03               	btfss	3,2
  5823  135C  2B45               	goto	l6788
  5824  135D  0847               	movf	___ftmul@f3_as_product^(0+512),w
  5825  135E  00A0               	movwf	___ftpack@arg^(0+512)
  5826  135F  0848               	movf	(___ftmul@f3_as_product+1)^(0+512),w
  5827  1360  00A1               	movwf	(___ftpack@arg+1)^(0+512)
  5828  1361  0849               	movf	(___ftmul@f3_as_product+2)^(0+512),w
  5829  1362  00A2               	movwf	(___ftpack@arg+2)^(0+512)
  5830  1363  0846               	movf	___ftmul@exp^(0+512),w
  5831  1364  00C2               	movwf	??___ftmul^(0+512)
  5832  1365  0842               	movf	??___ftmul^(0+512),w
  5833  1366  00A3               	movwf	___ftpack@exp^(0+512)
  5834  1367  084B               	movf	___ftmul@sign^(0+512),w
  5835  1368  00C3               	movwf	(??___ftmul+1)^(0+512)
  5836  1369  0843               	movf	(??___ftmul+1)^(0+512),w
  5837  136A  00A4               	movwf	___ftpack@sign^(0+512)
  5838  136B  3191  214D         	fcall	___ftpack
  5839  136D  0024               	movlb	4	; select bank4
  5840  136E  0820               	movf	?___ftpack^(0+512),w
  5841  136F  00BC               	movwf	?___ftmul^(0+512)
  5842  1370  0821               	movf	(?___ftpack+1)^(0+512),w
  5843  1371  00BD               	movwf	(?___ftmul+1)^(0+512)
  5844  1372  0822               	movf	(?___ftpack+2)^(0+512),w
  5845  1373  00BE               	movwf	(?___ftmul+2)^(0+512)
  5846  1374  0008               	return
  5847  1375                     __end_of___ftmul:	
  5848                           
  5849                           	psect	text5
  5850  1218                     __ptext5:	
  5851 ;; *************** function ___ftdiv *****************
  5852 ;; Defined at:
  5853 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  5854 ;; Parameters:    Size  Location     Type
  5855 ;;  f2              3   12[BANK4 ] float 
  5856 ;;  f1              3   15[BANK4 ] float 
  5857 ;; Auto vars:     Size  Location     Type
  5858 ;;  f3              3   23[BANK4 ] float 
  5859 ;;  sign            1   27[BANK4 ] unsigned char 
  5860 ;;  exp             1   26[BANK4 ] unsigned char 
  5861 ;;  cntr            1   22[BANK4 ] unsigned char 
  5862 ;; Return value:  Size  Location     Type
  5863 ;;                  3   12[BANK4 ] float 
  5864 ;; Registers used:
  5865 ;;		wreg, status,2, status,0, pclath, cstack
  5866 ;; Tracked objects:
  5867 ;;		On entry : 0/0
  5868 ;;		On exit  : 0/0
  5869 ;;		Unchanged: 0/0
  5870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5871 ;;      Params:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5872 ;;      Locals:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5873 ;;      Temps:          0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  5874 ;;      Totals:         0       0       0       0       0      16       0       0       0       0       0       0       
      +0       0
  5875 ;;Total ram usage:       16 bytes
  5876 ;; Hardware stack levels used:    1
  5877 ;; Hardware stack levels required when called:    8
  5878 ;; This function calls:
  5879 ;;		___ftpack
  5880 ;; This function is called by:
  5881 ;;		_ReadVoltage
  5882 ;; This function uses a non-reentrant model
  5883 ;;
  5884                           
  5885                           
  5886                           ;psect for function ___ftdiv
  5887  1218                     ___ftdiv:	
  5888                           
  5889                           ;incstack = 0
  5890                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  5891  1218  0024               	movlb	4	; select bank4
  5892  1219  082F               	movf	___ftdiv@f1^(0+512),w
  5893  121A  00B2               	movwf	??___ftdiv^(0+512)
  5894  121B  0830               	movf	(___ftdiv@f1+1)^(0+512),w
  5895  121C  00B3               	movwf	(??___ftdiv^(0+512)+1)
  5896  121D  0831               	movf	(___ftdiv@f1+2)^(0+512),w
  5897  121E  00B4               	movwf	(??___ftdiv^(0+512)+2)
  5898  121F  1003               	clrc
  5899  1220  0D33               	rlf	(??___ftdiv^(0+512)+1),w
  5900  1221  0D34               	rlf	(??___ftdiv^(0+512)+2),w
  5901  1222  00B5               	movwf	(??___ftdiv+3)^(0+512)
  5902  1223  0835               	movf	(??___ftdiv+3)^(0+512),w
  5903  1224  00BA               	movwf	___ftdiv@exp^(0+512)
  5904  1225  083A               	movf	___ftdiv@exp^(0+512),w
  5905  1226  1D03               	btfss	3,2
  5906  1227  2A2F               	goto	l6716
  5907  1228  3000               	movlw	0
  5908  1229  00AC               	movwf	?___ftdiv^(0+512)
  5909  122A  3000               	movlw	0
  5910  122B  00AD               	movwf	(?___ftdiv+1)^(0+512)
  5911  122C  3000               	movlw	0
  5912  122D  00AE               	movwf	(?___ftdiv+2)^(0+512)
  5913  122E  0008               	return
  5914  122F                     l6716:	
  5915  122F  082C               	movf	___ftdiv@f2^(0+512),w
  5916  1230  00B2               	movwf	??___ftdiv^(0+512)
  5917  1231  082D               	movf	(___ftdiv@f2+1)^(0+512),w
  5918  1232  00B3               	movwf	(??___ftdiv^(0+512)+1)
  5919  1233  082E               	movf	(___ftdiv@f2+2)^(0+512),w
  5920  1234  00B4               	movwf	(??___ftdiv^(0+512)+2)
  5921  1235  1003               	clrc
  5922  1236  0D33               	rlf	(??___ftdiv^(0+512)+1),w
  5923  1237  0D34               	rlf	(??___ftdiv^(0+512)+2),w
  5924  1238  00B5               	movwf	(??___ftdiv+3)^(0+512)
  5925  1239  0835               	movf	(??___ftdiv+3)^(0+512),w
  5926  123A  00BB               	movwf	___ftdiv@sign^(0+512)
  5927  123B  083B               	movf	___ftdiv@sign^(0+512),w
  5928  123C  1D03               	btfss	3,2
  5929  123D  2A45               	goto	l6722
  5930  123E  3000               	movlw	0
  5931  123F  00AC               	movwf	?___ftdiv^(0+512)
  5932  1240  3000               	movlw	0
  5933  1241  00AD               	movwf	(?___ftdiv+1)^(0+512)
  5934  1242  3000               	movlw	0
  5935  1243  00AE               	movwf	(?___ftdiv+2)^(0+512)
  5936  1244  0008               	return
  5937  1245                     l6722:	
  5938  1245  3000               	movlw	0
  5939  1246  00B7               	movwf	___ftdiv@f3^(0+512)
  5940  1247  3000               	movlw	0
  5941  1248  00B8               	movwf	(___ftdiv@f3+1)^(0+512)
  5942  1249  3000               	movlw	0
  5943  124A  00B9               	movwf	(___ftdiv@f3+2)^(0+512)
  5944  124B  3089               	movlw	137
  5945  124C  073B               	addwf	___ftdiv@sign^(0+512),w
  5946  124D  00B2               	movwf	??___ftdiv^(0+512)
  5947  124E  0832               	movf	??___ftdiv^(0+512),w
  5948  124F  02BA               	subwf	___ftdiv@exp^(0+512),f
  5949  1250  082F               	movf	___ftdiv@f1^(0+512),w
  5950  1251  00B2               	movwf	??___ftdiv^(0+512)
  5951  1252  0830               	movf	(___ftdiv@f1+1)^(0+512),w
  5952  1253  00B3               	movwf	(??___ftdiv^(0+512)+1)
  5953  1254  0831               	movf	(___ftdiv@f1+2)^(0+512),w
  5954  1255  00B4               	movwf	(??___ftdiv^(0+512)+2)
  5955  1256  3010               	movlw	16
  5956  1257                     u8645:	
  5957  1257  36B4               	lsrf	(??___ftdiv^(0+512)+2),f
  5958  1258  0CB3               	rrf	(??___ftdiv^(0+512)+1),f
  5959  1259  0CB2               	rrf	??___ftdiv^(0+512),f
  5960  125A  0B89               	decfsz	9,f
  5961  125B  2A57               	goto	u8645
  5962  125C  0832               	movf	??___ftdiv^(0+512),w
  5963  125D  00B5               	movwf	(??___ftdiv+3)^(0+512)
  5964  125E  0835               	movf	(??___ftdiv+3)^(0+512),w
  5965  125F  00BB               	movwf	___ftdiv@sign^(0+512)
  5966  1260  082C               	movf	___ftdiv@f2^(0+512),w
  5967  1261  00B2               	movwf	??___ftdiv^(0+512)
  5968  1262  082D               	movf	(___ftdiv@f2+1)^(0+512),w
  5969  1263  00B3               	movwf	(??___ftdiv^(0+512)+1)
  5970  1264  082E               	movf	(___ftdiv@f2+2)^(0+512),w
  5971  1265  00B4               	movwf	(??___ftdiv^(0+512)+2)
  5972  1266  3010               	movlw	16
  5973  1267                     u8655:	
  5974  1267  36B4               	lsrf	(??___ftdiv^(0+512)+2),f
  5975  1268  0CB3               	rrf	(??___ftdiv^(0+512)+1),f
  5976  1269  0CB2               	rrf	??___ftdiv^(0+512),f
  5977  126A  0B89               	decfsz	9,f
  5978  126B  2A67               	goto	u8655
  5979  126C  0832               	movf	??___ftdiv^(0+512),w
  5980  126D  00B5               	movwf	(??___ftdiv+3)^(0+512)
  5981  126E  0835               	movf	(??___ftdiv+3)^(0+512),w
  5982  126F  06BB               	xorwf	___ftdiv@sign^(0+512),f
  5983  1270  3080               	movlw	128
  5984  1271  00B2               	movwf	??___ftdiv^(0+512)
  5985  1272  0832               	movf	??___ftdiv^(0+512),w
  5986  1273  05BB               	andwf	___ftdiv@sign^(0+512),f
  5987  1274  17B0               	bsf	(___ftdiv@f1^(0+512)+1),7
  5988  1275  30FF               	movlw	255
  5989  1276  05AF               	andwf	___ftdiv@f1^(0+512),f
  5990  1277  30FF               	movlw	255
  5991  1278  05B0               	andwf	(___ftdiv@f1+1)^(0+512),f
  5992  1279  3000               	movlw	0
  5993  127A  05B1               	andwf	(___ftdiv@f1+2)^(0+512),f
  5994  127B  17AD               	bsf	(___ftdiv@f2^(0+512)+1),7
  5995  127C  30FF               	movlw	255
  5996  127D  05AC               	andwf	___ftdiv@f2^(0+512),f
  5997  127E  30FF               	movlw	255
  5998  127F  05AD               	andwf	(___ftdiv@f2+1)^(0+512),f
  5999  1280  3000               	movlw	0
  6000  1281  05AE               	andwf	(___ftdiv@f2+2)^(0+512),f
  6001  1282  3018               	movlw	24
  6002  1283  00B2               	movwf	??___ftdiv^(0+512)
  6003  1284  0832               	movf	??___ftdiv^(0+512),w
  6004  1285  00B6               	movwf	___ftdiv@cntr^(0+512)
  6005  1286                     l6736:	
  6006  1286  3001               	movlw	1
  6007  1287                     u8665:	
  6008  1287  35B7               	lslf	___ftdiv@f3^(0+512),f
  6009  1288  0DB8               	rlf	(___ftdiv@f3+1)^(0+512),f
  6010  1289  0DB9               	rlf	(___ftdiv@f3+2)^(0+512),f
  6011  128A  0B89               	decfsz	9,f
  6012  128B  2A87               	goto	u8665
  6013  128C  082E               	movf	(___ftdiv@f2+2)^(0+512),w
  6014  128D  0231               	subwf	(___ftdiv@f1+2)^(0+512),w
  6015  128E  1D03               	skipz
  6016  128F  2A96               	goto	u8675
  6017  1290  082D               	movf	(___ftdiv@f2+1)^(0+512),w
  6018  1291  0230               	subwf	(___ftdiv@f1+1)^(0+512),w
  6019  1292  1D03               	skipz
  6020  1293  2A96               	goto	u8675
  6021  1294  082C               	movf	___ftdiv@f2^(0+512),w
  6022  1295  022F               	subwf	___ftdiv@f1^(0+512),w
  6023  1296                     u8675:	
  6024  1296  1C03               	skipc
  6025  1297  2A9F               	goto	l6744
  6026  1298  082C               	movf	___ftdiv@f2^(0+512),w
  6027  1299  02AF               	subwf	___ftdiv@f1^(0+512),f
  6028  129A  082D               	movf	(___ftdiv@f2+1)^(0+512),w
  6029  129B  3BB0               	subwfb	(___ftdiv@f1+1)^(0+512),f
  6030  129C  082E               	movf	(___ftdiv@f2+2)^(0+512),w
  6031  129D  3BB1               	subwfb	(___ftdiv@f1+2)^(0+512),f
  6032  129E  1437               	bsf	___ftdiv@f3^(0+512),0
  6033  129F                     l6744:	
  6034  129F  3001               	movlw	1
  6035  12A0                     u8685:	
  6036  12A0  35AF               	lslf	___ftdiv@f1^(0+512),f
  6037  12A1  0DB0               	rlf	(___ftdiv@f1+1)^(0+512),f
  6038  12A2  0DB1               	rlf	(___ftdiv@f1+2)^(0+512),f
  6039  12A3  0B89               	decfsz	9,f
  6040  12A4  2AA0               	goto	u8685
  6041  12A5  3001               	movlw	1
  6042  12A6  02B6               	subwf	___ftdiv@cntr^(0+512),f
  6043  12A7  1D03               	btfss	3,2
  6044  12A8  2A86               	goto	l6736
  6045  12A9  0837               	movf	___ftdiv@f3^(0+512),w
  6046  12AA  00A0               	movwf	___ftpack@arg^(0+512)
  6047  12AB  0838               	movf	(___ftdiv@f3+1)^(0+512),w
  6048  12AC  00A1               	movwf	(___ftpack@arg+1)^(0+512)
  6049  12AD  0839               	movf	(___ftdiv@f3+2)^(0+512),w
  6050  12AE  00A2               	movwf	(___ftpack@arg+2)^(0+512)
  6051  12AF  083A               	movf	___ftdiv@exp^(0+512),w
  6052  12B0  00B2               	movwf	??___ftdiv^(0+512)
  6053  12B1  0832               	movf	??___ftdiv^(0+512),w
  6054  12B2  00A3               	movwf	___ftpack@exp^(0+512)
  6055  12B3  083B               	movf	___ftdiv@sign^(0+512),w
  6056  12B4  00B3               	movwf	(??___ftdiv+1)^(0+512)
  6057  12B5  0833               	movf	(??___ftdiv+1)^(0+512),w
  6058  12B6  00A4               	movwf	___ftpack@sign^(0+512)
  6059  12B7  3191  214D         	fcall	___ftpack
  6060  12B9  0024               	movlb	4	; select bank4
  6061  12BA  0820               	movf	?___ftpack^(0+512),w
  6062  12BB  00AC               	movwf	?___ftdiv^(0+512)
  6063  12BC  0821               	movf	(?___ftpack+1)^(0+512),w
  6064  12BD  00AD               	movwf	(?___ftdiv+1)^(0+512)
  6065  12BE  0822               	movf	(?___ftpack+2)^(0+512),w
  6066  12BF  00AE               	movwf	(?___ftdiv+2)^(0+512)
  6067  12C0  0008               	return
  6068  12C1                     __end_of___ftdiv:	
  6069                           
  6070                           	psect	text6
  6071  114D                     __ptext6:	
  6072 ;; *************** function ___ftpack *****************
  6073 ;; Defined at:
  6074 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  6075 ;; Parameters:    Size  Location     Type
  6076 ;;  arg             3    0[BANK4 ] unsigned um
  6077 ;;  exp             1    3[BANK4 ] unsigned char 
  6078 ;;  sign            1    4[BANK4 ] unsigned char 
  6079 ;; Auto vars:     Size  Location     Type
  6080 ;;		None
  6081 ;; Return value:  Size  Location     Type
  6082 ;;                  3    0[BANK4 ] float 
  6083 ;; Registers used:
  6084 ;;		wreg, status,2, status,0
  6085 ;; Tracked objects:
  6086 ;;		On entry : 0/0
  6087 ;;		On exit  : 0/0
  6088 ;;		Unchanged: 0/0
  6089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6090 ;;      Params:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  6091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6092 ;;      Temps:          0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  6093 ;;      Totals:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  6094 ;;Total ram usage:        8 bytes
  6095 ;; Hardware stack levels used:    1
  6096 ;; Hardware stack levels required when called:    7
  6097 ;; This function calls:
  6098 ;;		Nothing
  6099 ;; This function is called by:
  6100 ;;		___ftdiv
  6101 ;;		___ftmul
  6102 ;;		___lwtoft
  6103 ;; This function uses a non-reentrant model
  6104 ;;
  6105                           
  6106                           
  6107                           ;psect for function ___ftpack
  6108  114D                     ___ftpack:	
  6109                           
  6110                           ;incstack = 0
  6111                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6112  114D  0024               	movlb	4	; select bank4
  6113  114E  0823               	movf	___ftpack@exp^(0+512),w
  6114  114F  1903               	btfsc	3,2
  6115  1150  2956               	goto	l6504
  6116  1151  0822               	movf	(___ftpack@arg+2)^(0+512),w
  6117  1152  0421               	iorwf	(___ftpack@arg+1)^(0+512),w
  6118  1153  0420               	iorwf	___ftpack@arg^(0+512),w
  6119  1154  1D03               	skipz
  6120  1155  2967               	goto	l6510
  6121  1156                     l6504:	
  6122  1156  3000               	movlw	0
  6123  1157  00A0               	movwf	?___ftpack^(0+512)
  6124  1158  3000               	movlw	0
  6125  1159  00A1               	movwf	(?___ftpack+1)^(0+512)
  6126  115A  3000               	movlw	0
  6127  115B  00A2               	movwf	(?___ftpack+2)^(0+512)
  6128  115C  0008               	return
  6129  115D                     l6508:	
  6130  115D  3001               	movlw	1
  6131  115E  00A5               	movwf	??___ftpack^(0+512)
  6132  115F  0825               	movf	??___ftpack^(0+512),w
  6133  1160  07A3               	addwf	___ftpack@exp^(0+512),f
  6134  1161  3001               	movlw	1
  6135  1162                     u8265:	
  6136  1162  36A2               	lsrf	(___ftpack@arg+2)^(0+512),f
  6137  1163  0CA1               	rrf	(___ftpack@arg+1)^(0+512),f
  6138  1164  0CA0               	rrf	___ftpack@arg^(0+512),f
  6139  1165  0B89               	decfsz	9,f
  6140  1166  2962               	goto	u8265
  6141  1167                     l6510:	
  6142  1167  30FE               	movlw	254
  6143  1168  0522               	andwf	(___ftpack@arg+2)^(0+512),w
  6144  1169  1903               	btfsc	3,2
  6145  116A  2980               	goto	l1251
  6146  116B  295D               	goto	l6508
  6147  116C                     l6512:	
  6148  116C  3001               	movlw	1
  6149  116D  00A5               	movwf	??___ftpack^(0+512)
  6150  116E  0825               	movf	??___ftpack^(0+512),w
  6151  116F  07A3               	addwf	___ftpack@exp^(0+512),f
  6152  1170  3001               	movlw	1
  6153  1171  07A0               	addwf	___ftpack@arg^(0+512),f
  6154  1172  3000               	movlw	0
  6155  1173  1803               	skipnc
  6156  1174  3001               	movlw	1
  6157  1175  07A1               	addwf	(___ftpack@arg+1)^(0+512),f
  6158  1176  3000               	movlw	0
  6159  1177  1803               	skipnc
  6160  1178  3001               	movlw	1
  6161  1179  07A2               	addwf	(___ftpack@arg+2)^(0+512),f
  6162  117A  3001               	movlw	1
  6163  117B                     u8285:	
  6164  117B  36A2               	lsrf	(___ftpack@arg+2)^(0+512),f
  6165  117C  0CA1               	rrf	(___ftpack@arg+1)^(0+512),f
  6166  117D  0CA0               	rrf	___ftpack@arg^(0+512),f
  6167  117E  0B89               	decfsz	9,f
  6168  117F  297B               	goto	u8285
  6169  1180                     l1251:	
  6170  1180  30FF               	movlw	255
  6171  1181  0522               	andwf	(___ftpack@arg+2)^(0+512),w
  6172  1182  1903               	btfsc	3,2
  6173  1183  2991               	goto	l6520
  6174  1184  296C               	goto	l6512
  6175  1185                     l6522:	
  6176  1185  3002               	movlw	2
  6177  1186  0223               	subwf	___ftpack@exp^(0+512),w
  6178  1187  1C03               	btfss	3,0
  6179  1188  2993               	goto	l1258
  6180  1189  3001               	movlw	1
  6181  118A  02A3               	subwf	___ftpack@exp^(0+512),f
  6182  118B  3001               	movlw	1
  6183  118C                     u8305:	
  6184  118C  35A0               	lslf	___ftpack@arg^(0+512),f
  6185  118D  0DA1               	rlf	(___ftpack@arg+1)^(0+512),f
  6186  118E  0DA2               	rlf	(___ftpack@arg+2)^(0+512),f
  6187  118F  0B89               	decfsz	9,f
  6188  1190  298C               	goto	u8305
  6189  1191                     l6520:	
  6190  1191  1FA1               	btfss	(___ftpack@arg+1)^(0+512),7
  6191  1192  2985               	goto	l6522
  6192  1193                     l1258:	
  6193  1193  1823               	btfsc	___ftpack@exp^(0+512),0
  6194  1194  299B               	goto	l1259
  6195  1195  30FF               	movlw	255
  6196  1196  05A0               	andwf	___ftpack@arg^(0+512),f
  6197  1197  307F               	movlw	127
  6198  1198  05A1               	andwf	(___ftpack@arg+1)^(0+512),f
  6199  1199  30FF               	movlw	255
  6200  119A  05A2               	andwf	(___ftpack@arg+2)^(0+512),f
  6201  119B                     l1259:	
  6202  119B  1003               	clrc
  6203  119C  0CA3               	rrf	___ftpack@exp^(0+512),f
  6204  119D  0823               	movf	___ftpack@exp^(0+512),w
  6205  119E  00A5               	movwf	??___ftpack^(0+512)
  6206  119F  01A6               	clrf	(??___ftpack^(0+512)+1)
  6207  11A0  01A7               	clrf	(??___ftpack^(0+512)+2)
  6208  11A1  3010               	movlw	16
  6209  11A2                     u8345:	
  6210  11A2  35A5               	lslf	??___ftpack^(0+512),f
  6211  11A3  0DA6               	rlf	(??___ftpack^(0+512)+1),f
  6212  11A4  0DA7               	rlf	(??___ftpack^(0+512)+2),f
  6213  11A5  0B89               	decfsz	9,f
  6214  11A6  29A2               	goto	u8345
  6215  11A7  0825               	movf	??___ftpack^(0+512),w
  6216  11A8  04A0               	iorwf	___ftpack@arg^(0+512),f
  6217  11A9  0826               	movf	(??___ftpack+1)^(0+512),w
  6218  11AA  04A1               	iorwf	(___ftpack@arg+1)^(0+512),f
  6219  11AB  0827               	movf	(??___ftpack+2)^(0+512),w
  6220  11AC  04A2               	iorwf	(___ftpack@arg+2)^(0+512),f
  6221  11AD  0824               	movf	___ftpack@sign^(0+512),w
  6222  11AE  1903               	btfsc	3,2
  6223  11AF  0008               	return
  6224  11B0  17A2               	bsf	(___ftpack@arg^(0+512)+2),7
  6225  11B1  0008               	return
  6226  11B2                     __end_of___ftpack:	
  6227                           
  6228                           	psect	text7
  6229  1C7F                     __ptext7:	
  6230 ;; *************** function _InternalADC_Read *****************
  6231 ;; Defined at:
  6232 ;;		line 97 in file "ADC.c"
  6233 ;; Parameters:    Size  Location     Type
  6234 ;;  channel         1    wreg     unsigned char 
  6235 ;; Auto vars:     Size  Location     Type
  6236 ;;  channel         1   14[BANK4 ] unsigned char 
  6237 ;; Return value:  Size  Location     Type
  6238 ;;                  2   10[BANK4 ] unsigned int 
  6239 ;; Registers used:
  6240 ;;		wreg, status,2, status,0, pclath, cstack
  6241 ;; Tracked objects:
  6242 ;;		On entry : 0/0
  6243 ;;		On exit  : 0/0
  6244 ;;		Unchanged: 0/0
  6245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6246 ;;      Params:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  6247 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6248 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  6249 ;;      Totals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  6250 ;;Total ram usage:        5 bytes
  6251 ;; Hardware stack levels used:    1
  6252 ;; Hardware stack levels required when called:    8
  6253 ;; This function calls:
  6254 ;;		_delayUS
  6255 ;; This function is called by:
  6256 ;;		_ReadVoltage
  6257 ;; This function uses a non-reentrant model
  6258 ;;
  6259                           
  6260                           
  6261                           ;psect for function _InternalADC_Read
  6262  1C7F                     _InternalADC_Read:	
  6263                           
  6264                           ;incstack = 0
  6265                           ; Regs used in _InternalADC_Read: [wreg+status,2+status,0+pclath+cstack]
  6266                           ;InternalADC_Read@channel stored from wreg
  6267  1C7F  0024               	movlb	4	; select bank4
  6268  1C80  00AE               	movwf	InternalADC_Read@channel^(0+512)
  6269                           
  6270                           ;ADC.c: 99: ADCON0 =0;
  6271  1C81  0021               	movlb	1	; select bank1
  6272  1C82  019D               	clrf	29	;volatile
  6273                           
  6274                           ;ADC.c: 100: ADCON1 =0;
  6275  1C83  019E               	clrf	30	;volatile
  6276                           
  6277                           ;ADC.c: 101: ADCON1 |= 0b01010000;
  6278  1C84  3050               	movlw	80
  6279  1C85  0024               	movlb	4	; select bank4
  6280  1C86  00AC               	movwf	??_InternalADC_Read^(0+512)
  6281  1C87  082C               	movf	??_InternalADC_Read^(0+512),w
  6282  1C88  0021               	movlb	1	; select bank1
  6283  1C89  049E               	iorwf	30,f	;volatile
  6284                           
  6285                           ;ADC.c: 102: FVRCON |= 0b10000000;
  6286  1C8A  0022               	movlb	2	; select bank2
  6287  1C8B  1797               	bsf	23,7	;volatile
  6288                           
  6289                           ;ADC.c: 103: FVRCON |= 0b00000001;
  6290  1C8C  1417               	bsf	23,0	;volatile
  6291  1C8D                     l1019:	
  6292                           ;ADC.c: 104: while(!(FVRCON & 0b01000000));
  6293                           
  6294  1C8D  1F17               	btfss	23,6	;volatile
  6295  1C8E  2C8D               	goto	l1019
  6296                           
  6297                           ;ADC.c: 105: ADCON0 |= (channel << 2);
  6298  1C8F  0024               	movlb	4	; select bank4
  6299  1C90  082E               	movf	InternalADC_Read@channel^(0+512),w
  6300  1C91  00AC               	movwf	??_InternalADC_Read^(0+512)
  6301  1C92  3001               	movlw	1
  6302  1C93                     u8605:	
  6303  1C93  35AC               	lslf	??_InternalADC_Read^(0+512),f
  6304  1C94  3EFF               	addlw	-1
  6305  1C95  1D03               	skipz
  6306  1C96  2C93               	goto	u8605
  6307  1C97  352C               	lslf	??_InternalADC_Read^(0+512),w
  6308  1C98  00AD               	movwf	(??_InternalADC_Read+1)^(0+512)
  6309  1C99  082D               	movf	(??_InternalADC_Read+1)^(0+512),w
  6310  1C9A  0021               	movlb	1	; select bank1
  6311  1C9B  049D               	iorwf	29,f	;volatile
  6312                           
  6313                           ;ADC.c: 106: ADCON1 |= 0b10000011;
  6314  1C9C  3083               	movlw	131
  6315  1C9D  0024               	movlb	4	; select bank4
  6316  1C9E  00AC               	movwf	??_InternalADC_Read^(0+512)
  6317  1C9F  082C               	movf	??_InternalADC_Read^(0+512),w
  6318  1CA0  0021               	movlb	1	; select bank1
  6319  1CA1  049E               	iorwf	30,f	;volatile
  6320                           
  6321                           ;ADC.c: 107: ADCON0 |= 0b00000001;
  6322  1CA2  141D               	bsf	29,0	;volatile
  6323                           
  6324                           ;ADC.c: 108: (PIE1bits.ADIE=0);
  6325  1CA3  1311               	bcf	17,6	;volatile
  6326                           
  6327                           ;ADC.c: 109: delayUS(5);
  6328  1CA4  3000               	movlw	0
  6329  1CA5  0024               	movlb	4	; select bank4
  6330  1CA6  00A3               	movwf	(delayUS@US+3)^(0+512)
  6331  1CA7  3000               	movlw	0
  6332  1CA8  00A2               	movwf	(delayUS@US+2)^(0+512)
  6333  1CA9  3000               	movlw	0
  6334  1CAA  00A1               	movwf	(delayUS@US+1)^(0+512)
  6335  1CAB  3005               	movlw	5
  6336  1CAC  00A0               	movwf	delayUS@US^(0+512)
  6337  1CAD  319C  240E  319C   	fcall	_delayUS
  6338                           
  6339                           ;ADC.c: 110: ADCON0 |= 0b00000010;
  6340  1CB0  0021               	movlb	1	; select bank1
  6341  1CB1  149D               	bsf	29,1	;volatile
  6342  1CB2                     l1022:	
  6343                           ;ADC.c: 111: while(ADCON0 & 0b00000010);
  6344                           
  6345  1CB2  189D               	btfsc	29,1	;volatile
  6346  1CB3  2CB2               	goto	l1022
  6347                           
  6348                           ;ADC.c: 112: return ((ADRESH << 8) + ADRESL);
  6349  1CB4  081C               	movf	28,w	;volatile
  6350  1CB5  0024               	movlb	4	; select bank4
  6351  1CB6  00AB               	movwf	(?_InternalADC_Read+1)^(0+512)
  6352  1CB7  0021               	movlb	1	; select bank1
  6353  1CB8  081B               	movf	27,w	;volatile
  6354  1CB9  0024               	movlb	4	; select bank4
  6355  1CBA  00AA               	movwf	?_InternalADC_Read^(0+512)
  6356  1CBB  0008               	return
  6357  1CBC                     __end_of_InternalADC_Read:	
  6358                           
  6359                           	psect	text8
  6360  1891                     __ptext8:	
  6361 ;; *************** function _DisableInternalADC *****************
  6362 ;; Defined at:
  6363 ;;		line 120 in file "ADC.c"
  6364 ;; Parameters:    Size  Location     Type
  6365 ;;		None
  6366 ;; Auto vars:     Size  Location     Type
  6367 ;;		None
  6368 ;; Return value:  Size  Location     Type
  6369 ;;		None               void
  6370 ;; Registers used:
  6371 ;;		wreg, status,2, status,0
  6372 ;; Tracked objects:
  6373 ;;		On entry : 0/0
  6374 ;;		On exit  : 0/0
  6375 ;;		Unchanged: 0/0
  6376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6379 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6380 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6381 ;;Total ram usage:        1 bytes
  6382 ;; Hardware stack levels used:    1
  6383 ;; Hardware stack levels required when called:    7
  6384 ;; This function calls:
  6385 ;;		Nothing
  6386 ;; This function is called by:
  6387 ;;		_ReadVoltage
  6388 ;; This function uses a non-reentrant model
  6389 ;;
  6390                           
  6391                           
  6392                           ;psect for function _DisableInternalADC
  6393  1891                     _DisableInternalADC:	
  6394                           
  6395                           ;ADC.c: 122: ADCON0 &= ~0b00000001;
  6396                           
  6397                           ;incstack = 0
  6398                           ; Regs used in _DisableInternalADC: [wreg+status,2+status,0]
  6399  1891  30FE               	movlw	254
  6400  1892  0024               	movlb	4	; select bank4
  6401  1893  00A0               	movwf	??_DisableInternalADC^(0+512)
  6402  1894  0820               	movf	??_DisableInternalADC^(0+512),w
  6403  1895  0021               	movlb	1	; select bank1
  6404  1896  059D               	andwf	29,f	;volatile
  6405  1897  0008               	return
  6406  1898                     __end_of_DisableInternalADC:	
  6407                           
  6408                           	psect	text9
  6409  1921                     __ptext9:	
  6410 ;; *************** function _PS_2_INIT *****************
  6411 ;; Defined at:
  6412 ;;		line 106 in file "PS_2.c"
  6413 ;; Parameters:    Size  Location     Type
  6414 ;;		None
  6415 ;; Auto vars:     Size  Location     Type
  6416 ;;		None
  6417 ;; Return value:  Size  Location     Type
  6418 ;;		None               void
  6419 ;; Registers used:
  6420 ;;		wreg, status,2, status,0, pclath, cstack
  6421 ;; Tracked objects:
  6422 ;;		On entry : 0/0
  6423 ;;		On exit  : 0/0
  6424 ;;		Unchanged: 0/0
  6425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6430 ;;Total ram usage:        0 bytes
  6431 ;; Hardware stack levels used:    1
  6432 ;; Hardware stack levels required when called:   10
  6433 ;; This function calls:
  6434 ;;		_Clock_TRIS
  6435 ;;		_Data_TRIS
  6436 ;;		_Init_PS_2_Send
  6437 ;;		_Timer2Init
  6438 ;; This function is called by:
  6439 ;;		_main
  6440 ;; This function uses a non-reentrant model
  6441 ;;
  6442                           
  6443                           
  6444                           ;psect for function _PS_2_INIT
  6445  1921                     _PS_2_INIT:	
  6446                           
  6447                           ;PS_2.c: 109: Clock_TRIS(1);
  6448                           
  6449                           ;incstack = 0
  6450                           ; Regs used in _PS_2_INIT: [wreg+status,2+status,0+pclath+cstack]
  6451  1921  3001               	movlw	1
  6452  1922  3198  20E6  3199   	fcall	_Clock_TRIS
  6453                           
  6454                           ;PS_2.c: 110: Data_TRIS(1);
  6455  1925  3001               	movlw	1
  6456  1926  3198  20F1  3199   	fcall	_Data_TRIS
  6457                           
  6458                           ;PS_2.c: 111: Timer2Init(50);
  6459  1929  3032               	movlw	50
  6460  192A  319A  2267  3199   	fcall	_Timer2Init
  6461                           
  6462                           ;PS_2.c: 112: Init_PS_2_Send();
  6463  192D  3186  2682         	fcall	_Init_PS_2_Send
  6464  192F  0008               	return
  6465  1930                     __end_of_PS_2_INIT:	
  6466                           
  6467                           	psect	text10
  6468  1A67                     __ptext10:	
  6469 ;; *************** function _Timer2Init *****************
  6470 ;; Defined at:
  6471 ;;		line 41 in file "Timer.c"
  6472 ;; Parameters:    Size  Location     Type
  6473 ;;  time            1    wreg     unsigned char 
  6474 ;; Auto vars:     Size  Location     Type
  6475 ;;  time            1    2[BANK4 ] unsigned char 
  6476 ;;  prescaler       1    4[BANK4 ] unsigned char 
  6477 ;;  postscaler      1    3[BANK4 ] unsigned char 
  6478 ;; Return value:  Size  Location     Type
  6479 ;;		None               void
  6480 ;; Registers used:
  6481 ;;		wreg, status,2, status,0, pclath, cstack
  6482 ;; Tracked objects:
  6483 ;;		On entry : 0/0
  6484 ;;		On exit  : 0/0
  6485 ;;		Unchanged: 0/0
  6486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6488 ;;      Locals:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  6489 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  6490 ;;      Totals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  6491 ;;Total ram usage:        5 bytes
  6492 ;; Hardware stack levels used:    1
  6493 ;; Hardware stack levels required when called:    8
  6494 ;; This function calls:
  6495 ;;		_Timer2ON
  6496 ;; This function is called by:
  6497 ;;		_PS_2_INIT
  6498 ;; This function uses a non-reentrant model
  6499 ;;
  6500                           
  6501                           
  6502                           ;psect for function _Timer2Init
  6503  1A67                     _Timer2Init:	
  6504                           
  6505                           ;incstack = 0
  6506                           ; Regs used in _Timer2Init: [wreg+status,2+status,0+pclath+cstack]
  6507                           ;Timer2Init@time stored from wreg
  6508  1A67  0024               	movlb	4	; select bank4
  6509  1A68  00A2               	movwf	Timer2Init@time^(0+512)
  6510                           
  6511                           ;Timer.c: 43: unsigned char postscaler =0xF;
  6512  1A69  300F               	movlw	15
  6513  1A6A  00A0               	movwf	??_Timer2Init^(0+512)
  6514  1A6B  0820               	movf	??_Timer2Init^(0+512),w
  6515  1A6C  00A3               	movwf	Timer2Init@postscaler^(0+512)
  6516                           
  6517                           ;Timer.c: 44: unsigned char prescaler =3;
  6518  1A6D  3003               	movlw	3
  6519  1A6E  00A0               	movwf	??_Timer2Init^(0+512)
  6520  1A6F  0820               	movf	??_Timer2Init^(0+512),w
  6521  1A70  00A4               	movwf	Timer2Init@prescaler^(0+512)
  6522                           
  6523                           ;Timer.c: 45: CCP2CONbits.CCP2M = 0b1010;
  6524  1A71  0025               	movlb	5	; select bank5
  6525  1A72  081A               	movf	26,w	;volatile
  6526  1A73  39F0               	andlw	-16
  6527  1A74  380A               	iorlw	10
  6528  1A75  009A               	movwf	26	;volatile
  6529                           
  6530                           ;Timer.c: 46: PR2 = time;
  6531  1A76  0024               	movlb	4	; select bank4
  6532  1A77  0822               	movf	Timer2Init@time^(0+512),w
  6533  1A78  0020               	movlb	0	; select bank0
  6534  1A79  009B               	movwf	27	;volatile
  6535                           
  6536                           ;Timer.c: 47: T2CON |= postscaler << 3;
  6537  1A7A  0024               	movlb	4	; select bank4
  6538  1A7B  0823               	movf	Timer2Init@postscaler^(0+512),w
  6539  1A7C  00A0               	movwf	??_Timer2Init^(0+512)
  6540  1A7D  3002               	movlw	2
  6541  1A7E                     u8505:	
  6542  1A7E  35A0               	lslf	??_Timer2Init^(0+512),f
  6543  1A7F  3EFF               	addlw	-1
  6544  1A80  1D03               	skipz
  6545  1A81  2A7E               	goto	u8505
  6546  1A82  3520               	lslf	??_Timer2Init^(0+512),w
  6547  1A83  00A1               	movwf	(??_Timer2Init+1)^(0+512)
  6548  1A84  0821               	movf	(??_Timer2Init+1)^(0+512),w
  6549  1A85  0020               	movlb	0	; select bank0
  6550  1A86  049C               	iorwf	28,f	;volatile
  6551                           
  6552                           ;Timer.c: 48: T2CON |= prescaler;
  6553  1A87  0024               	movlb	4	; select bank4
  6554  1A88  0824               	movf	Timer2Init@prescaler^(0+512),w
  6555  1A89  00A0               	movwf	??_Timer2Init^(0+512)
  6556  1A8A  0820               	movf	??_Timer2Init^(0+512),w
  6557  1A8B  0020               	movlb	0	; select bank0
  6558  1A8C  049C               	iorwf	28,f	;volatile
  6559                           
  6560                           ;Timer.c: 50: Timer2ON();
  6561  1A8D  3198  206F         	fcall	_Timer2ON
  6562                           
  6563                           ;Timer.c: 51: PIE1bits.TMR2IE = 0;
  6564  1A8F  0021               	movlb	1	; select bank1
  6565  1A90  1091               	bcf	17,1	;volatile
  6566  1A91  0008               	return
  6567  1A92                     __end_of_Timer2Init:	
  6568                           
  6569                           	psect	text11
  6570  186F                     __ptext11:	
  6571 ;; *************** function _Timer2ON *****************
  6572 ;; Defined at:
  6573 ;;		line 59 in file "Timer.c"
  6574 ;; Parameters:    Size  Location     Type
  6575 ;;		None
  6576 ;; Auto vars:     Size  Location     Type
  6577 ;;		None
  6578 ;; Return value:  Size  Location     Type
  6579 ;;		None               void
  6580 ;; Registers used:
  6581 ;;		None
  6582 ;; Tracked objects:
  6583 ;;		On entry : 0/0
  6584 ;;		On exit  : 0/0
  6585 ;;		Unchanged: 0/0
  6586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6590 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6591 ;;Total ram usage:        0 bytes
  6592 ;; Hardware stack levels used:    1
  6593 ;; Hardware stack levels required when called:    7
  6594 ;; This function calls:
  6595 ;;		Nothing
  6596 ;; This function is called by:
  6597 ;;		_Timer2Init
  6598 ;; This function uses a non-reentrant model
  6599 ;;
  6600                           
  6601                           
  6602                           ;psect for function _Timer2ON
  6603  186F                     _Timer2ON:	
  6604                           
  6605                           ;Timer.c: 61: T2CONbits.TMR2ON = 1;
  6606                           
  6607                           ;incstack = 0
  6608                           ; Regs used in _Timer2ON: []
  6609  186F  0020               	movlb	0	; select bank0
  6610  1870  151C               	bsf	28,2	;volatile
  6611  1871  0008               	return
  6612  1872                     __end_of_Timer2ON:	
  6613                           
  6614                           	psect	text12
  6615  0682                     __ptext12:	
  6616 ;; *************** function _Init_PS_2_Send *****************
  6617 ;; Defined at:
  6618 ;;		line 1021 in file "PS_2.c"
  6619 ;; Parameters:    Size  Location     Type
  6620 ;;		None
  6621 ;; Auto vars:     Size  Location     Type
  6622 ;;		None
  6623 ;; Return value:  Size  Location     Type
  6624 ;;                  1    wreg      unsigned char 
  6625 ;; Registers used:
  6626 ;;		wreg, status,2, status,0, pclath, cstack
  6627 ;; Tracked objects:
  6628 ;;		On entry : 0/0
  6629 ;;		On exit  : 0/0
  6630 ;;		Unchanged: 0/0
  6631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6635 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6636 ;;Total ram usage:        0 bytes
  6637 ;; Hardware stack levels used:    1
  6638 ;; Hardware stack levels required when called:    9
  6639 ;; This function calls:
  6640 ;;		_PS_2_DISABLE_INTERRUPT
  6641 ;;		_Send_PS2
  6642 ;;		_delayUS
  6643 ;; This function is called by:
  6644 ;;		_PS_2_INIT
  6645 ;; This function uses a non-reentrant model
  6646 ;;
  6647                           
  6648                           
  6649                           ;psect for function _Init_PS_2_Send
  6650  0682                     _Init_PS_2_Send:	
  6651                           
  6652                           ;PS_2.c: 1023: PS_2_DISABLE_INTERRUPT(0b00100000);
  6653                           
  6654                           ;incstack = 0
  6655                           ; Regs used in _Init_PS_2_Send: [wreg+status,2+status,0+pclath+cstack]
  6656  0682  3020               	movlw	32
  6657  0683  3199  219C  3186   	fcall	_PS_2_DISABLE_INTERRUPT
  6658                           
  6659                           ;PS_2.c: 1026: if(Send_PS2(0x07))
  6660  0686  3007               	movlw	7
  6661  0687  318E  266C  3186   	fcall	_Send_PS2
  6662  068A  3A00               	xorlw	0
  6663  068B  1D03               	btfss	3,2
  6664  068C  0008               	return
  6665                           
  6666                           ;PS_2.c: 1029: }
  6667                           ;PS_2.c: 1030: delayUS(5000);
  6668                           
  6669                           ;PS_2.c: 1027: {
  6670                           ;PS_2.c: 1028: return 0;
  6671                           ;	Return value of _Init_PS_2_Send is never used
  6672  068D  3000               	movlw	0
  6673  068E  0024               	movlb	4	; select bank4
  6674  068F  00A3               	movwf	(delayUS@US+3)^(0+512)
  6675  0690  3000               	movlw	0
  6676  0691  00A2               	movwf	(delayUS@US+2)^(0+512)
  6677  0692  3013               	movlw	19
  6678  0693  00A1               	movwf	(delayUS@US+1)^(0+512)
  6679  0694  3088               	movlw	136
  6680  0695  00A0               	movwf	delayUS@US^(0+512)
  6681  0696  319C  240E  3186   	fcall	_delayUS
  6682                           
  6683                           ;PS_2.c: 1033: if(Send_PS2(0xED))
  6684  0699  30ED               	movlw	237
  6685  069A  318E  266C  3186   	fcall	_Send_PS2
  6686  069D  3A00               	xorlw	0
  6687  069E  1D03               	btfss	3,2
  6688  069F  0008               	return
  6689                           
  6690                           ;PS_2.c: 1036: }
  6691                           ;PS_2.c: 1037: delayUS(5000);
  6692                           
  6693                           ;PS_2.c: 1034: {
  6694                           ;PS_2.c: 1035: return 0;
  6695                           ;	Return value of _Init_PS_2_Send is never used
  6696  06A0  3000               	movlw	0
  6697  06A1  0024               	movlb	4	; select bank4
  6698  06A2  00A3               	movwf	(delayUS@US+3)^(0+512)
  6699  06A3  3000               	movlw	0
  6700  06A4  00A2               	movwf	(delayUS@US+2)^(0+512)
  6701  06A5  3013               	movlw	19
  6702  06A6  00A1               	movwf	(delayUS@US+1)^(0+512)
  6703  06A7  3088               	movlw	136
  6704  06A8  00A0               	movwf	delayUS@US^(0+512)
  6705  06A9  319C  240E  3186   	fcall	_delayUS
  6706                           
  6707                           ;PS_2.c: 1038: if(Send_PS2(0x00))
  6708  06AC  3000               	movlw	0
  6709  06AD  318E  266C  3186   	fcall	_Send_PS2
  6710  06B0  3A00               	xorlw	0
  6711  06B1  1D03               	btfss	3,2
  6712  06B2  0008               	return
  6713                           
  6714                           ;PS_2.c: 1041: }
  6715                           ;PS_2.c: 1044: if(Send_PS2(0xf4))
  6716                           
  6717                           ;PS_2.c: 1039: {
  6718                           ;PS_2.c: 1040: return 0;
  6719                           ;	Return value of _Init_PS_2_Send is never used
  6720  06B3  30F4               	movlw	244
  6721  06B4  318E  266C  3186   	fcall	_Send_PS2
  6722  06B7  3A00               	xorlw	0
  6723  06B8  1D03               	btfss	3,2
  6724  06B9  0008               	return
  6725                           
  6726                           ;PS_2.c: 1047: }
  6727                           ;PS_2.c: 1050: if(Send_PS2(0xf4))
  6728                           
  6729                           ;PS_2.c: 1045: {
  6730                           ;PS_2.c: 1046: return 0;
  6731                           ;	Return value of _Init_PS_2_Send is never used
  6732  06BA  30F4               	movlw	244
  6733  06BB  318E  266C  3186   	fcall	_Send_PS2
  6734  06BE  3A00               	xorlw	0
  6735  06BF  1D03               	btfss	3,2
  6736  06C0  0008               	return
  6737                           
  6738                           ;PS_2.c: 1053: }
  6739                           ;PS_2.c: 1056: if(Send_PS2(0xf0))
  6740                           
  6741                           ;PS_2.c: 1051: {
  6742                           ;PS_2.c: 1052: return 0;
  6743                           ;	Return value of _Init_PS_2_Send is never used
  6744  06C1  30F0               	movlw	240
  6745  06C2  318E  266C  3186   	fcall	_Send_PS2
  6746  06C5  3A00               	xorlw	0
  6747  06C6  1D03               	btfss	3,2
  6748  06C7  0008               	return
  6749                           
  6750                           ;PS_2.c: 1059: }
  6751                           ;PS_2.c: 1060: delayUS(100);
  6752                           
  6753                           ;PS_2.c: 1057: {
  6754                           ;PS_2.c: 1058: return 0;
  6755                           ;	Return value of _Init_PS_2_Send is never used
  6756  06C8  3000               	movlw	0
  6757  06C9  0024               	movlb	4	; select bank4
  6758  06CA  00A3               	movwf	(delayUS@US+3)^(0+512)
  6759  06CB  3000               	movlw	0
  6760  06CC  00A2               	movwf	(delayUS@US+2)^(0+512)
  6761  06CD  3000               	movlw	0
  6762  06CE  00A1               	movwf	(delayUS@US+1)^(0+512)
  6763  06CF  3064               	movlw	100
  6764  06D0  00A0               	movwf	delayUS@US^(0+512)
  6765  06D1  319C  240E  3186   	fcall	_delayUS
  6766                           
  6767                           ;PS_2.c: 1061: if(Send_PS2(0x02))
  6768  06D4  3002               	movlw	2
  6769  06D5  318E  266C  3186   	fcall	_Send_PS2
  6770  06D8  3A00               	xorlw	0
  6771  06D9  1D03               	btfss	3,2
  6772  06DA  0008               	return
  6773                           
  6774                           ;PS_2.c: 1064: }
  6775                           ;PS_2.c: 1067: if(Send_PS2(0xf3))
  6776                           
  6777                           ;PS_2.c: 1062: {
  6778                           ;PS_2.c: 1063: return 0;
  6779                           ;	Return value of _Init_PS_2_Send is never used
  6780  06DB  30F3               	movlw	243
  6781  06DC  318E  266C  3186   	fcall	_Send_PS2
  6782  06DF  3A00               	xorlw	0
  6783  06E0  1D03               	btfss	3,2
  6784  06E1  0008               	return
  6785                           
  6786                           ;PS_2.c: 1070: }
  6787                           ;PS_2.c: 1071: delayUS(100);
  6788                           
  6789                           ;PS_2.c: 1068: {
  6790                           ;PS_2.c: 1069: return 0;
  6791                           ;	Return value of _Init_PS_2_Send is never used
  6792  06E2  3000               	movlw	0
  6793  06E3  0024               	movlb	4	; select bank4
  6794  06E4  00A3               	movwf	(delayUS@US+3)^(0+512)
  6795  06E5  3000               	movlw	0
  6796  06E6  00A2               	movwf	(delayUS@US+2)^(0+512)
  6797  06E7  3000               	movlw	0
  6798  06E8  00A1               	movwf	(delayUS@US+1)^(0+512)
  6799  06E9  3064               	movlw	100
  6800  06EA  00A0               	movwf	delayUS@US^(0+512)
  6801  06EB  319C  240E  3186   	fcall	_delayUS
  6802                           
  6803                           ;PS_2.c: 1072: if(Send_PS2(0x2F))
  6804  06EE  302F               	movlw	47
  6805  06EF  318E  266C         	fcall	_Send_PS2
  6806                           
  6807                           ;PS_2.c: 1073: {
  6808                           ;PS_2.c: 1074: return 0;
  6809                           ;	Return value of _Init_PS_2_Send is never used
  6810  06F1  0008               	return
  6811  06F2                     __end_of_Init_PS_2_Send:	
  6812                           ;PS_2.c: 1075: }
  6813                           ;PS_2.c: 1076: return 1;
  6814                           ;	Return value of _Init_PS_2_Send is never used
  6815                           
  6816                           
  6817                           	psect	text13
  6818  0E6C                     __ptext13:	
  6819 ;; *************** function _Send_PS2 *****************
  6820 ;; Defined at:
  6821 ;;		line 856 in file "PS_2.c"
  6822 ;; Parameters:    Size  Location     Type
  6823 ;;  command         1    wreg     unsigned char 
  6824 ;; Auto vars:     Size  Location     Type
  6825 ;;  command         1   15[BANK4 ] unsigned char 
  6826 ;;  timeout         2   17[BANK4 ] unsigned int 
  6827 ;;  i               1   16[BANK4 ] unsigned char 
  6828 ;;  oddparity       1   14[BANK4 ] unsigned char 
  6829 ;; Return value:  Size  Location     Type
  6830 ;;                  1    wreg      unsigned char 
  6831 ;; Registers used:
  6832 ;;		wreg, status,2, status,0, pclath, cstack
  6833 ;; Tracked objects:
  6834 ;;		On entry : 0/0
  6835 ;;		On exit  : 0/0
  6836 ;;		Unchanged: 0/0
  6837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6839 ;;      Locals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  6840 ;;      Temps:          0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  6841 ;;      Totals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0
  6842 ;;Total ram usage:        9 bytes
  6843 ;; Hardware stack levels used:    1
  6844 ;; Hardware stack levels required when called:    8
  6845 ;; This function calls:
  6846 ;;		_CheckSum_byte
  6847 ;;		_Clock_TRIS
  6848 ;;		_Data_TRIS
  6849 ;;		_READ_PS_2_PIN
  6850 ;;		_delayUS
  6851 ;; This function is called by:
  6852 ;;		_Init_PS_2_Send
  6853 ;;		_Keyboard_Connected
  6854 ;; This function uses a non-reentrant model
  6855 ;;
  6856                           
  6857                           
  6858                           ;psect for function _Send_PS2
  6859  0E6C                     _Send_PS2:	
  6860                           
  6861                           ;incstack = 0
  6862                           ; Regs used in _Send_PS2: [wreg+status,2+status,0+pclath+cstack]
  6863                           ;Send_PS2@command stored from wreg
  6864  0E6C  0024               	movlb	4	; select bank4
  6865  0E6D  00AF               	movwf	Send_PS2@command^(0+512)
  6866                           
  6867                           ;PS_2.c: 858: unsigned char i=0;
  6868  0E6E  01B0               	clrf	Send_PS2@i^(0+512)
  6869                           
  6870                           ;PS_2.c: 859: unsigned char oddparity = CheckSum_byte((unsigned int)command , 3);
  6871  0E6F  082F               	movf	Send_PS2@command^(0+512),w
  6872  0E70  00AA               	movwf	??_Send_PS2^(0+512)
  6873  0E71  01AB               	clrf	(??_Send_PS2^(0+512)+1)
  6874  0E72  082A               	movf	??_Send_PS2^(0+512),w
  6875  0E73  00A0               	movwf	CheckSum_byte@This^(0+512)
  6876  0E74  082B               	movf	(??_Send_PS2+1)^(0+512),w
  6877  0E75  00A1               	movwf	(CheckSum_byte@This+1)^(0+512)
  6878  0E76  3003               	movlw	3
  6879  0E77  00AC               	movwf	(??_Send_PS2+2)^(0+512)
  6880  0E78  082C               	movf	(??_Send_PS2+2)^(0+512),w
  6881  0E79  00A2               	movwf	CheckSum_byte@Odd_Even^(0+512)
  6882  0E7A  319B  231B  318E   	fcall	_CheckSum_byte
  6883  0E7D  0024               	movlb	4	; select bank4
  6884  0E7E  00AD               	movwf	(??_Send_PS2+3)^(0+512)
  6885  0E7F  082D               	movf	(??_Send_PS2+3)^(0+512),w
  6886  0E80  00AE               	movwf	Send_PS2@oddparity^(0+512)
  6887                           
  6888                           ;PS_2.c: 860: unsigned int timeout =0;
  6889  0E81  01B1               	clrf	Send_PS2@timeout^(0+512)
  6890  0E82  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  6891                           
  6892                           ;PS_2.c: 862: Clock_TRIS(0);
  6893  0E83  3000               	movlw	0
  6894  0E84  3198  20E6  318E   	fcall	_Clock_TRIS
  6895                           
  6896                           ;PS_2.c: 863: Data_TRIS(0);
  6897  0E87  3000               	movlw	0
  6898  0E88  3198  20F1  318E   	fcall	_Data_TRIS
  6899                           
  6900                           ;PS_2.c: 864: LATA &= ~0b00100000;
  6901  0E8B  30DF               	movlw	223
  6902  0E8C  0024               	movlb	4	; select bank4
  6903  0E8D  00AA               	movwf	??_Send_PS2^(0+512)
  6904  0E8E  082A               	movf	??_Send_PS2^(0+512),w
  6905  0E8F  0022               	movlb	2	; select bank2
  6906  0E90  058C               	andwf	12,f	;volatile
  6907                           
  6908                           ;PS_2.c: 865: delayUS(300);
  6909  0E91  3000               	movlw	0
  6910  0E92  0024               	movlb	4	; select bank4
  6911  0E93  00A3               	movwf	(delayUS@US+3)^(0+512)
  6912  0E94  3000               	movlw	0
  6913  0E95  00A2               	movwf	(delayUS@US+2)^(0+512)
  6914  0E96  3001               	movlw	1
  6915  0E97  00A1               	movwf	(delayUS@US+1)^(0+512)
  6916  0E98  302C               	movlw	44
  6917  0E99  00A0               	movwf	delayUS@US^(0+512)
  6918  0E9A  319C  240E  318E   	fcall	_delayUS
  6919                           
  6920                           ;PS_2.c: 866: LATA &= ~0b00010000;
  6921  0E9D  30EF               	movlw	239
  6922  0E9E  0024               	movlb	4	; select bank4
  6923  0E9F  00AA               	movwf	??_Send_PS2^(0+512)
  6924  0EA0  082A               	movf	??_Send_PS2^(0+512),w
  6925  0EA1  0022               	movlb	2	; select bank2
  6926  0EA2  058C               	andwf	12,f	;volatile
  6927                           
  6928                           ;PS_2.c: 867: delayUS(20);
  6929  0EA3  3000               	movlw	0
  6930  0EA4  0024               	movlb	4	; select bank4
  6931  0EA5  00A3               	movwf	(delayUS@US+3)^(0+512)
  6932  0EA6  3000               	movlw	0
  6933  0EA7  00A2               	movwf	(delayUS@US+2)^(0+512)
  6934  0EA8  3000               	movlw	0
  6935  0EA9  00A1               	movwf	(delayUS@US+1)^(0+512)
  6936  0EAA  3014               	movlw	20
  6937  0EAB  00A0               	movwf	delayUS@US^(0+512)
  6938  0EAC  319C  240E  318E   	fcall	_delayUS
  6939                           
  6940                           ;PS_2.c: 868: Clock_TRIS(1);
  6941  0EAF  3001               	movlw	1
  6942  0EB0  3198  20E6  318E   	fcall	_Clock_TRIS
  6943                           
  6944                           ;PS_2.c: 869: timeout=0;
  6945  0EB3  0024               	movlb	4	; select bank4
  6946  0EB4  01B1               	clrf	Send_PS2@timeout^(0+512)
  6947  0EB5  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  6948  0EB6                     l6366:	
  6949                           ;PS_2.c: 870: while(READ_PS_2_PIN(0b00100000))
  6950                           
  6951  0EB6  3020               	movlw	32
  6952  0EB7  3199  21AF  318E   	fcall	_READ_PS_2_PIN
  6953  0EBA  3A00               	xorlw	0
  6954  0EBB  1903               	btfsc	3,2
  6955  0EBC  2ED3               	goto	l6368
  6956                           
  6957                           ;PS_2.c: 871: {
  6958                           ;PS_2.c: 872: __nop();
  6959  0EBD  0000               	nop
  6960                           
  6961                           ;PS_2.c: 873: timeout++;
  6962  0EBE  3001               	movlw	1
  6963  0EBF  0024               	movlb	4	; select bank4
  6964  0EC0  07B1               	addwf	Send_PS2@timeout^(0+512),f
  6965  0EC1  3000               	movlw	0
  6966  0EC2  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  6967                           
  6968                           ;PS_2.c: 874: if(timeout > 15000)
  6969  0EC3  303A               	movlw	58
  6970  0EC4  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  6971  0EC5  3099               	movlw	153
  6972  0EC6  1903               	skipnz
  6973  0EC7  0231               	subwf	Send_PS2@timeout^(0+512),w
  6974  0EC8  1C03               	skipc
  6975  0EC9  2EB6               	goto	l6366
  6976                           
  6977                           ;PS_2.c: 875: {
  6978                           ;PS_2.c: 876: Clock_TRIS(1);
  6979  0ECA  3001               	movlw	1
  6980  0ECB  3198  20E6  318E   	fcall	_Clock_TRIS
  6981                           
  6982                           ;PS_2.c: 877: Data_TRIS(1);
  6983  0ECE  3001               	movlw	1
  6984  0ECF  3198  20F1         	fcall	_Data_TRIS
  6985                           
  6986                           ;PS_2.c: 878: return 1;
  6987  0ED1  3001               	movlw	1
  6988  0ED2  0008               	return
  6989  0ED3                     l6368:	
  6990                           
  6991                           ;PS_2.c: 879: }
  6992                           ;PS_2.c: 880: }
  6993                           ;PS_2.c: 881: for(i=0;i<8;i++)
  6994  0ED3  0024               	movlb	4	; select bank4
  6995  0ED4  01B0               	clrf	Send_PS2@i^(0+512)
  6996  0ED5  3008               	movlw	8
  6997  0ED6  0230               	subwf	Send_PS2@i^(0+512),w
  6998  0ED7  1803               	btfsc	3,0
  6999  0ED8  2F2E               	goto	l853
  7000  0ED9                     l852:	
  7001                           
  7002                           ;PS_2.c: 882: {
  7003                           ;PS_2.c: 883: if(command & 0x1)
  7004  0ED9  1C2F               	btfss	Send_PS2@command^(0+512),0
  7005  0EDA  2EDE               	goto	l6376
  7006                           
  7007                           ;PS_2.c: 884: {
  7008                           ;PS_2.c: 885: LATA |= 0b00010000;
  7009  0EDB  0022               	movlb	2	; select bank2
  7010  0EDC  160C               	bsf	12,4	;volatile
  7011                           
  7012                           ;PS_2.c: 886: }
  7013  0EDD  2EE4               	goto	l6378
  7014  0EDE                     l6376:	
  7015                           
  7016                           ;PS_2.c: 887: else
  7017                           ;PS_2.c: 888: {
  7018                           ;PS_2.c: 889: LATA &= ~0b00010000;
  7019  0EDE  30EF               	movlw	239
  7020  0EDF  0024               	movlb	4	; select bank4
  7021  0EE0  00AA               	movwf	??_Send_PS2^(0+512)
  7022  0EE1  082A               	movf	??_Send_PS2^(0+512),w
  7023  0EE2  0022               	movlb	2	; select bank2
  7024  0EE3  058C               	andwf	12,f	;volatile
  7025  0EE4                     l6378:	
  7026                           
  7027                           ;PS_2.c: 890: }
  7028                           ;PS_2.c: 891: command >> = 1;
  7029  0EE4  1003               	clrc
  7030  0EE5  0024               	movlb	4	; select bank4
  7031  0EE6  0CAF               	rrf	Send_PS2@command^(0+512),f
  7032                           
  7033                           ;PS_2.c: 892: timeout=0;
  7034  0EE7  01B1               	clrf	Send_PS2@timeout^(0+512)
  7035  0EE8  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7036  0EE9                     l6390:	
  7037                           ;PS_2.c: 893: while(!READ_PS_2_PIN(0b00100000))
  7038                           
  7039  0EE9  3020               	movlw	32
  7040  0EEA  3199  21AF  318E   	fcall	_READ_PS_2_PIN
  7041  0EED  3A00               	xorlw	0
  7042  0EEE  1D03               	btfss	3,2
  7043  0EEF  2F05               	goto	l6392
  7044                           
  7045                           ;PS_2.c: 894: {
  7046                           ;PS_2.c: 895: timeout++;
  7047  0EF0  3001               	movlw	1
  7048  0EF1  0024               	movlb	4	; select bank4
  7049  0EF2  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7050  0EF3  3000               	movlw	0
  7051  0EF4  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7052                           
  7053                           ;PS_2.c: 896: if(timeout > 15000)
  7054  0EF5  303A               	movlw	58
  7055  0EF6  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7056  0EF7  3099               	movlw	153
  7057  0EF8  1903               	skipnz
  7058  0EF9  0231               	subwf	Send_PS2@timeout^(0+512),w
  7059  0EFA  1C03               	skipc
  7060  0EFB  2EE9               	goto	l6390
  7061                           
  7062                           ;PS_2.c: 897: {
  7063                           ;PS_2.c: 898: Clock_TRIS(1);
  7064  0EFC  3001               	movlw	1
  7065  0EFD  3198  20E6  318E   	fcall	_Clock_TRIS
  7066                           
  7067                           ;PS_2.c: 899: Data_TRIS(1);
  7068  0F00  3001               	movlw	1
  7069  0F01  3198  20F1         	fcall	_Data_TRIS
  7070                           
  7071                           ;PS_2.c: 900: return 1;
  7072  0F03  3001               	movlw	1
  7073  0F04  0008               	return
  7074  0F05                     l6392:	
  7075                           
  7076                           ;PS_2.c: 901: }
  7077                           ;PS_2.c: 902: }
  7078                           ;PS_2.c: 903: timeout=0;
  7079  0F05  0024               	movlb	4	; select bank4
  7080  0F06  01B1               	clrf	Send_PS2@timeout^(0+512)
  7081  0F07  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7082  0F08                     l6402:	
  7083                           ;PS_2.c: 904: while(READ_PS_2_PIN(0b00100000))
  7084                           
  7085  0F08  3020               	movlw	32
  7086  0F09  3199  21AF  318E   	fcall	_READ_PS_2_PIN
  7087  0F0C  3A00               	xorlw	0
  7088  0F0D  1903               	btfsc	3,2
  7089  0F0E  2F25               	goto	l6404
  7090                           
  7091                           ;PS_2.c: 905: {
  7092                           ;PS_2.c: 906: __nop();
  7093  0F0F  0000               	nop
  7094                           
  7095                           ;PS_2.c: 907: timeout++;
  7096  0F10  3001               	movlw	1
  7097  0F11  0024               	movlb	4	; select bank4
  7098  0F12  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7099  0F13  3000               	movlw	0
  7100  0F14  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7101                           
  7102                           ;PS_2.c: 908: if(timeout > 15000)
  7103  0F15  303A               	movlw	58
  7104  0F16  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7105  0F17  3099               	movlw	153
  7106  0F18  1903               	skipnz
  7107  0F19  0231               	subwf	Send_PS2@timeout^(0+512),w
  7108  0F1A  1C03               	skipc
  7109  0F1B  2F08               	goto	l6402
  7110                           
  7111                           ;PS_2.c: 909: {
  7112                           ;PS_2.c: 910: Clock_TRIS(1);
  7113  0F1C  3001               	movlw	1
  7114  0F1D  3198  20E6  318E   	fcall	_Clock_TRIS
  7115                           
  7116                           ;PS_2.c: 911: Data_TRIS(1);
  7117  0F20  3001               	movlw	1
  7118  0F21  3198  20F1         	fcall	_Data_TRIS
  7119                           
  7120                           ;PS_2.c: 912: return 1;
  7121  0F23  3001               	movlw	1
  7122  0F24  0008               	return
  7123  0F25                     l6404:	
  7124  0F25  3001               	movlw	1
  7125  0F26  0024               	movlb	4	; select bank4
  7126  0F27  00AA               	movwf	??_Send_PS2^(0+512)
  7127  0F28  082A               	movf	??_Send_PS2^(0+512),w
  7128  0F29  07B0               	addwf	Send_PS2@i^(0+512),f
  7129  0F2A  3008               	movlw	8
  7130  0F2B  0230               	subwf	Send_PS2@i^(0+512),w
  7131  0F2C  1C03               	skipc
  7132  0F2D  2ED9               	goto	l852
  7133  0F2E                     l853:	
  7134                           
  7135                           ;PS_2.c: 913: }
  7136                           ;PS_2.c: 914: }
  7137                           ;PS_2.c: 915: }
  7138                           ;PS_2.c: 917: if(oddparity & 0x1)
  7139  0F2E  1C2E               	btfss	Send_PS2@oddparity^(0+512),0
  7140  0F2F  2F33               	goto	l6410
  7141                           
  7142                           ;PS_2.c: 918: {
  7143                           ;PS_2.c: 919: LATA |= 0b00010000;
  7144  0F30  0022               	movlb	2	; select bank2
  7145  0F31  160C               	bsf	12,4	;volatile
  7146                           
  7147                           ;PS_2.c: 920: }
  7148  0F32  2F39               	goto	l6412
  7149  0F33                     l6410:	
  7150                           
  7151                           ;PS_2.c: 921: else
  7152                           ;PS_2.c: 922: {
  7153                           ;PS_2.c: 923: LATA &= ~0b00010000;
  7154  0F33  30EF               	movlw	239
  7155  0F34  0024               	movlb	4	; select bank4
  7156  0F35  00AA               	movwf	??_Send_PS2^(0+512)
  7157  0F36  082A               	movf	??_Send_PS2^(0+512),w
  7158  0F37  0022               	movlb	2	; select bank2
  7159  0F38  058C               	andwf	12,f	;volatile
  7160  0F39                     l6412:	
  7161                           
  7162                           ;PS_2.c: 924: }
  7163                           ;PS_2.c: 925: timeout=0;
  7164  0F39  0024               	movlb	4	; select bank4
  7165  0F3A  01B1               	clrf	Send_PS2@timeout^(0+512)
  7166  0F3B  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7167  0F3C                     l6422:	
  7168                           ;PS_2.c: 926: while(!READ_PS_2_PIN(0b00100000))
  7169                           
  7170  0F3C  3020               	movlw	32
  7171  0F3D  3199  21AF  318E   	fcall	_READ_PS_2_PIN
  7172  0F40  3A00               	xorlw	0
  7173  0F41  1D03               	btfss	3,2
  7174  0F42  2F58               	goto	l6424
  7175                           
  7176                           ;PS_2.c: 927: {
  7177                           ;PS_2.c: 928: timeout++;
  7178  0F43  3001               	movlw	1
  7179  0F44  0024               	movlb	4	; select bank4
  7180  0F45  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7181  0F46  3000               	movlw	0
  7182  0F47  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7183                           
  7184                           ;PS_2.c: 929: if(timeout > 15000)
  7185  0F48  303A               	movlw	58
  7186  0F49  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7187  0F4A  3099               	movlw	153
  7188  0F4B  1903               	skipnz
  7189  0F4C  0231               	subwf	Send_PS2@timeout^(0+512),w
  7190  0F4D  1C03               	skipc
  7191  0F4E  2F3C               	goto	l6422
  7192                           
  7193                           ;PS_2.c: 930: {
  7194                           ;PS_2.c: 931: Clock_TRIS(1);
  7195  0F4F  3001               	movlw	1
  7196  0F50  3198  20E6  318E   	fcall	_Clock_TRIS
  7197                           
  7198                           ;PS_2.c: 932: Data_TRIS(1);
  7199  0F53  3001               	movlw	1
  7200  0F54  3198  20F1         	fcall	_Data_TRIS
  7201                           
  7202                           ;PS_2.c: 933: return 1;
  7203  0F56  3001               	movlw	1
  7204  0F57  0008               	return
  7205  0F58                     l6424:	
  7206                           
  7207                           ;PS_2.c: 934: }
  7208                           ;PS_2.c: 935: }
  7209                           ;PS_2.c: 936: timeout=0;
  7210  0F58  0024               	movlb	4	; select bank4
  7211  0F59  01B1               	clrf	Send_PS2@timeout^(0+512)
  7212  0F5A  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7213  0F5B                     l6434:	
  7214                           ;PS_2.c: 937: while(READ_PS_2_PIN(0b00100000))
  7215                           
  7216  0F5B  3020               	movlw	32
  7217  0F5C  3199  21AF  318E   	fcall	_READ_PS_2_PIN
  7218  0F5F  3A00               	xorlw	0
  7219  0F60  1903               	btfsc	3,2
  7220  0F61  2F77               	goto	l6436
  7221                           
  7222                           ;PS_2.c: 938: {
  7223                           ;PS_2.c: 939: timeout++;
  7224  0F62  3001               	movlw	1
  7225  0F63  0024               	movlb	4	; select bank4
  7226  0F64  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7227  0F65  3000               	movlw	0
  7228  0F66  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7229                           
  7230                           ;PS_2.c: 940: if(timeout > 15000)
  7231  0F67  303A               	movlw	58
  7232  0F68  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7233  0F69  3099               	movlw	153
  7234  0F6A  1903               	skipnz
  7235  0F6B  0231               	subwf	Send_PS2@timeout^(0+512),w
  7236  0F6C  1C03               	skipc
  7237  0F6D  2F5B               	goto	l6434
  7238                           
  7239                           ;PS_2.c: 941: {
  7240                           ;PS_2.c: 942: Clock_TRIS(1);
  7241  0F6E  3001               	movlw	1
  7242  0F6F  3198  20E6  318E   	fcall	_Clock_TRIS
  7243                           
  7244                           ;PS_2.c: 943: Data_TRIS(1);
  7245  0F72  3001               	movlw	1
  7246  0F73  3198  20F1         	fcall	_Data_TRIS
  7247                           
  7248                           ;PS_2.c: 944: return 1;
  7249  0F75  3001               	movlw	1
  7250  0F76  0008               	return
  7251  0F77                     l6436:	
  7252                           
  7253                           ;PS_2.c: 945: }
  7254                           ;PS_2.c: 946: }
  7255                           ;PS_2.c: 948: Data_TRIS(1);
  7256  0F77  3001               	movlw	1
  7257  0F78  3198  20F1  318E   	fcall	_Data_TRIS
  7258                           
  7259                           ;PS_2.c: 950: timeout=0;
  7260  0F7B  0024               	movlb	4	; select bank4
  7261  0F7C  01B1               	clrf	Send_PS2@timeout^(0+512)
  7262  0F7D  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7263  0F7E                     l6448:	
  7264                           ;PS_2.c: 951: while(READ_PS_2_PIN(0b00010000))
  7265                           
  7266  0F7E  3010               	movlw	16
  7267  0F7F  3199  21AF  318E   	fcall	_READ_PS_2_PIN
  7268  0F82  3A00               	xorlw	0
  7269  0F83  1903               	btfsc	3,2
  7270  0F84  2F9A               	goto	l6450
  7271                           
  7272                           ;PS_2.c: 952: {
  7273                           ;PS_2.c: 953: timeout++;
  7274  0F85  3001               	movlw	1
  7275  0F86  0024               	movlb	4	; select bank4
  7276  0F87  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7277  0F88  3000               	movlw	0
  7278  0F89  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7279                           
  7280                           ;PS_2.c: 954: if(timeout > 15000)
  7281  0F8A  303A               	movlw	58
  7282  0F8B  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7283  0F8C  3099               	movlw	153
  7284  0F8D  1903               	skipnz
  7285  0F8E  0231               	subwf	Send_PS2@timeout^(0+512),w
  7286  0F8F  1C03               	skipc
  7287  0F90  2F7E               	goto	l6448
  7288                           
  7289                           ;PS_2.c: 955: {
  7290                           ;PS_2.c: 956: Clock_TRIS(1);
  7291  0F91  3001               	movlw	1
  7292  0F92  3198  20E6  318E   	fcall	_Clock_TRIS
  7293                           
  7294                           ;PS_2.c: 957: Data_TRIS(1);
  7295  0F95  3001               	movlw	1
  7296  0F96  3198  20F1         	fcall	_Data_TRIS
  7297                           
  7298                           ;PS_2.c: 958: return 1;
  7299  0F98  3001               	movlw	1
  7300  0F99  0008               	return
  7301  0F9A                     l6450:	
  7302                           
  7303                           ;PS_2.c: 959: }
  7304                           ;PS_2.c: 960: }
  7305                           ;PS_2.c: 961: timeout=0;
  7306  0F9A  0024               	movlb	4	; select bank4
  7307  0F9B  01B1               	clrf	Send_PS2@timeout^(0+512)
  7308  0F9C  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7309  0F9D                     l6460:	
  7310                           ;PS_2.c: 962: while(READ_PS_2_PIN(0b00100000))
  7311                           
  7312  0F9D  3020               	movlw	32
  7313  0F9E  3199  21AF  318E   	fcall	_READ_PS_2_PIN
  7314  0FA1  3A00               	xorlw	0
  7315  0FA2  1903               	btfsc	3,2
  7316  0FA3  2FB9               	goto	l6462
  7317                           
  7318                           ;PS_2.c: 963: {
  7319                           ;PS_2.c: 964: timeout++;
  7320  0FA4  3001               	movlw	1
  7321  0FA5  0024               	movlb	4	; select bank4
  7322  0FA6  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7323  0FA7  3000               	movlw	0
  7324  0FA8  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7325                           
  7326                           ;PS_2.c: 965: if(timeout > 15000)
  7327  0FA9  303A               	movlw	58
  7328  0FAA  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7329  0FAB  3099               	movlw	153
  7330  0FAC  1903               	skipnz
  7331  0FAD  0231               	subwf	Send_PS2@timeout^(0+512),w
  7332  0FAE  1C03               	skipc
  7333  0FAF  2F9D               	goto	l6460
  7334                           
  7335                           ;PS_2.c: 966: {
  7336                           ;PS_2.c: 967: Clock_TRIS(1);
  7337  0FB0  3001               	movlw	1
  7338  0FB1  3198  20E6  318E   	fcall	_Clock_TRIS
  7339                           
  7340                           ;PS_2.c: 968: Data_TRIS(1);
  7341  0FB4  3001               	movlw	1
  7342  0FB5  3198  20F1         	fcall	_Data_TRIS
  7343                           
  7344                           ;PS_2.c: 969: return 1;
  7345  0FB7  3001               	movlw	1
  7346  0FB8  0008               	return
  7347  0FB9                     l6462:	
  7348                           
  7349                           ;PS_2.c: 970: }
  7350                           ;PS_2.c: 971: }
  7351                           ;PS_2.c: 972: timeout=0;
  7352  0FB9  0024               	movlb	4	; select bank4
  7353  0FBA  01B1               	clrf	Send_PS2@timeout^(0+512)
  7354  0FBB  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7355  0FBC                     l6472:	
  7356                           ;PS_2.c: 973: while(!READ_PS_2_PIN(0b00010000))
  7357                           
  7358  0FBC  3010               	movlw	16
  7359  0FBD  3199  21AF  318E   	fcall	_READ_PS_2_PIN
  7360  0FC0  3A00               	xorlw	0
  7361  0FC1  1D03               	btfss	3,2
  7362  0FC2  2FD8               	goto	l6474
  7363                           
  7364                           ;PS_2.c: 974: {
  7365                           ;PS_2.c: 975: timeout++;
  7366  0FC3  3001               	movlw	1
  7367  0FC4  0024               	movlb	4	; select bank4
  7368  0FC5  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7369  0FC6  3000               	movlw	0
  7370  0FC7  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7371                           
  7372                           ;PS_2.c: 976: if(timeout > 15000)
  7373  0FC8  303A               	movlw	58
  7374  0FC9  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7375  0FCA  3099               	movlw	153
  7376  0FCB  1903               	skipnz
  7377  0FCC  0231               	subwf	Send_PS2@timeout^(0+512),w
  7378  0FCD  1C03               	skipc
  7379  0FCE  2FBC               	goto	l6472
  7380                           
  7381                           ;PS_2.c: 977: {
  7382                           ;PS_2.c: 978: Clock_TRIS(1);
  7383  0FCF  3001               	movlw	1
  7384  0FD0  3198  20E6  318E   	fcall	_Clock_TRIS
  7385                           
  7386                           ;PS_2.c: 979: Data_TRIS(1);
  7387  0FD3  3001               	movlw	1
  7388  0FD4  3198  20F1         	fcall	_Data_TRIS
  7389                           
  7390                           ;PS_2.c: 980: return 1;
  7391  0FD6  3001               	movlw	1
  7392  0FD7  0008               	return
  7393  0FD8                     l6474:	
  7394                           
  7395                           ;PS_2.c: 981: }
  7396                           ;PS_2.c: 982: }
  7397                           ;PS_2.c: 983: timeout=0;
  7398  0FD8  0024               	movlb	4	; select bank4
  7399  0FD9  01B1               	clrf	Send_PS2@timeout^(0+512)
  7400  0FDA  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7401  0FDB                     l6484:	
  7402                           ;PS_2.c: 984: while(!READ_PS_2_PIN(0b00100000))
  7403                           
  7404  0FDB  3020               	movlw	32
  7405  0FDC  3199  21AF  318E   	fcall	_READ_PS_2_PIN
  7406  0FDF  3A00               	xorlw	0
  7407  0FE0  1D03               	btfss	3,2
  7408  0FE1  2FF7               	goto	l6486
  7409                           
  7410                           ;PS_2.c: 985: {
  7411                           ;PS_2.c: 986: timeout++;
  7412  0FE2  3001               	movlw	1
  7413  0FE3  0024               	movlb	4	; select bank4
  7414  0FE4  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7415  0FE5  3000               	movlw	0
  7416  0FE6  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7417                           
  7418                           ;PS_2.c: 987: if(timeout > 15000)
  7419  0FE7  303A               	movlw	58
  7420  0FE8  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7421  0FE9  3099               	movlw	153
  7422  0FEA  1903               	skipnz
  7423  0FEB  0231               	subwf	Send_PS2@timeout^(0+512),w
  7424  0FEC  1C03               	skipc
  7425  0FED  2FDB               	goto	l6484
  7426                           
  7427                           ;PS_2.c: 988: {
  7428                           ;PS_2.c: 989: Clock_TRIS(1);
  7429  0FEE  3001               	movlw	1
  7430  0FEF  3198  20E6  318E   	fcall	_Clock_TRIS
  7431                           
  7432                           ;PS_2.c: 990: Data_TRIS(1);
  7433  0FF2  3001               	movlw	1
  7434  0FF3  3198  20F1         	fcall	_Data_TRIS
  7435                           
  7436                           ;PS_2.c: 991: return 1;
  7437  0FF5  3001               	movlw	1
  7438  0FF6  0008               	return
  7439  0FF7                     l6486:	
  7440                           
  7441                           ;PS_2.c: 992: }
  7442                           ;PS_2.c: 993: }
  7443                           ;PS_2.c: 996: Clock_TRIS(1);
  7444  0FF7  3001               	movlw	1
  7445  0FF8  3198  20E6  318E   	fcall	_Clock_TRIS
  7446                           
  7447                           ;PS_2.c: 997: Data_TRIS(1);
  7448  0FFB  3001               	movlw	1
  7449  0FFC  3198  20F1         	fcall	_Data_TRIS
  7450                           
  7451                           ;PS_2.c: 998: return 0;
  7452  0FFE  3000               	movlw	0
  7453  0FFF  0008               	return
  7454  1000                     __end_of_Send_PS2:	
  7455                           
  7456                           	psect	text14
  7457  19AF                     __ptext14:	
  7458 ;; *************** function _READ_PS_2_PIN *****************
  7459 ;; Defined at:
  7460 ;;		line 222 in file "PS_2.c"
  7461 ;; Parameters:    Size  Location     Type
  7462 ;;  DATA_CLK        1    wreg     unsigned char 
  7463 ;; Auto vars:     Size  Location     Type
  7464 ;;  DATA_CLK        1    0[BANK4 ] unsigned char 
  7465 ;; Return value:  Size  Location     Type
  7466 ;;                  1    wreg      unsigned char 
  7467 ;; Registers used:
  7468 ;;		wreg, status,2, status,0
  7469 ;; Tracked objects:
  7470 ;;		On entry : 0/0
  7471 ;;		On exit  : 0/0
  7472 ;;		Unchanged: 0/0
  7473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7475 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7477 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7478 ;;Total ram usage:        1 bytes
  7479 ;; Hardware stack levels used:    1
  7480 ;; Hardware stack levels required when called:    7
  7481 ;; This function calls:
  7482 ;;		Nothing
  7483 ;; This function is called by:
  7484 ;;		_Send_PS2
  7485 ;; This function uses a non-reentrant model
  7486 ;;
  7487                           
  7488                           
  7489                           ;psect for function _READ_PS_2_PIN
  7490  19AF                     _READ_PS_2_PIN:	
  7491                           
  7492                           ;incstack = 0
  7493                           ; Regs used in _READ_PS_2_PIN: [wreg+status,2+status,0]
  7494                           ;READ_PS_2_PIN@DATA_CLK stored from wreg
  7495  19AF  0024               	movlb	4	; select bank4
  7496  19B0  00A0               	movwf	READ_PS_2_PIN@DATA_CLK^(0+512)
  7497                           
  7498                           ;PS_2.c: 224: if(DATA_CLK == 0b00100000)
  7499  19B1  3020               	movlw	32
  7500  19B2  0620               	xorwf	READ_PS_2_PIN@DATA_CLK^(0+512),w
  7501  19B3  1D03               	btfss	3,2
  7502  19B4  29BC               	goto	l639
  7503                           
  7504                           ;PS_2.c: 225: {
  7505                           ;PS_2.c: 227: if((PORTA & 0b00100000) == 0b00100000)
  7506  19B5  0020               	movlb	0	; select bank0
  7507  19B6  1E8C               	btfss	12,5	;volatile
  7508  19B7  29BA               	goto	l6182
  7509                           
  7510                           ;PS_2.c: 228: {
  7511                           ;PS_2.c: 229: return (1);
  7512  19B8  3001               	movlw	1
  7513                           
  7514                           ;PS_2.c: 230: }
  7515  19B9  0008               	return
  7516  19BA                     l6182:	
  7517                           
  7518                           ;PS_2.c: 231: else
  7519                           ;PS_2.c: 232: {
  7520                           ;PS_2.c: 233: return 0;
  7521  19BA  3000               	movlw	0
  7522                           
  7523                           ;PS_2.c: 234: }
  7524                           ;PS_2.c: 235: }
  7525  19BB  0008               	return
  7526  19BC                     l639:	
  7527                           
  7528                           ;PS_2.c: 236: else
  7529                           ;PS_2.c: 237: {
  7530                           ;PS_2.c: 239: if((PORTA & 0b00010000) == 0b00010000)
  7531  19BC  0020               	movlb	0	; select bank0
  7532  19BD  1E0C               	btfss	12,4	;volatile
  7533  19BE  29C1               	goto	l6192
  7534                           
  7535                           ;PS_2.c: 240: {
  7536                           ;PS_2.c: 241: return (1);
  7537  19BF  3001               	movlw	1
  7538                           
  7539                           ;PS_2.c: 242: }
  7540  19C0  0008               	return
  7541  19C1                     l6192:	
  7542                           
  7543                           ;PS_2.c: 243: else
  7544                           ;PS_2.c: 244: {
  7545                           ;PS_2.c: 245: return 0;
  7546  19C1  3000               	movlw	0
  7547  19C2  0008               	return
  7548  19C3                     __end_of_READ_PS_2_PIN:	
  7549                           
  7550                           	psect	text15
  7551  18F1                     __ptext15:	
  7552 ;; *************** function _Data_TRIS *****************
  7553 ;; Defined at:
  7554 ;;		line 137 in file "PS_2.c"
  7555 ;; Parameters:    Size  Location     Type
  7556 ;;  direction       1    wreg     unsigned char 
  7557 ;; Auto vars:     Size  Location     Type
  7558 ;;  direction       1    0[BANK4 ] unsigned char 
  7559 ;; Return value:  Size  Location     Type
  7560 ;;		None               void
  7561 ;; Registers used:
  7562 ;;		wreg, status,2, status,0
  7563 ;; Tracked objects:
  7564 ;;		On entry : 0/0
  7565 ;;		On exit  : 0/0
  7566 ;;		Unchanged: 0/0
  7567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7569 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7571 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7572 ;;Total ram usage:        1 bytes
  7573 ;; Hardware stack levels used:    1
  7574 ;; Hardware stack levels required when called:    7
  7575 ;; This function calls:
  7576 ;;		Nothing
  7577 ;; This function is called by:
  7578 ;;		_PS_2_INIT
  7579 ;;		_Send_PS2
  7580 ;; This function uses a non-reentrant model
  7581 ;;
  7582                           
  7583                           
  7584                           ;psect for function _Data_TRIS
  7585  18F1                     _Data_TRIS:	
  7586                           
  7587                           ;incstack = 0
  7588                           ; Regs used in _Data_TRIS: [wreg+status,2+status,0]
  7589                           ;Data_TRIS@direction stored from wreg
  7590  18F1  0024               	movlb	4	; select bank4
  7591  18F2  00A0               	movwf	Data_TRIS@direction^(0+512)
  7592                           
  7593                           ;PS_2.c: 139: if(direction == 0)
  7594  18F3  0820               	movf	Data_TRIS@direction^(0+512),w
  7595  18F4  1D03               	btfss	3,2
  7596  18F5  28F9               	goto	l619
  7597                           
  7598                           ;PS_2.c: 140: {
  7599                           ;PS_2.c: 141: TRISAbits.TRISA4 = 0;
  7600  18F6  0021               	movlb	1	; select bank1
  7601  18F7  120C               	bcf	12,4	;volatile
  7602                           
  7603                           ;PS_2.c: 142: }
  7604  18F8  0008               	return
  7605  18F9                     l619:	
  7606                           
  7607                           ;PS_2.c: 143: else
  7608                           ;PS_2.c: 144: {
  7609                           ;PS_2.c: 145: TRISAbits.TRISA4 = 1;
  7610  18F9  0021               	movlb	1	; select bank1
  7611  18FA  160C               	bsf	12,4	;volatile
  7612  18FB  0008               	return
  7613  18FC                     __end_of_Data_TRIS:	
  7614                           
  7615                           	psect	text16
  7616  18E6                     __ptext16:	
  7617 ;; *************** function _Clock_TRIS *****************
  7618 ;; Defined at:
  7619 ;;		line 120 in file "PS_2.c"
  7620 ;; Parameters:    Size  Location     Type
  7621 ;;  direction       1    wreg     unsigned char 
  7622 ;; Auto vars:     Size  Location     Type
  7623 ;;  direction       1    0[BANK4 ] unsigned char 
  7624 ;; Return value:  Size  Location     Type
  7625 ;;		None               void
  7626 ;; Registers used:
  7627 ;;		wreg, status,2, status,0
  7628 ;; Tracked objects:
  7629 ;;		On entry : 0/0
  7630 ;;		On exit  : 0/0
  7631 ;;		Unchanged: 0/0
  7632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7634 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7636 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7637 ;;Total ram usage:        1 bytes
  7638 ;; Hardware stack levels used:    1
  7639 ;; Hardware stack levels required when called:    7
  7640 ;; This function calls:
  7641 ;;		Nothing
  7642 ;; This function is called by:
  7643 ;;		_PS_2_INIT
  7644 ;;		_Send_PS2
  7645 ;; This function uses a non-reentrant model
  7646 ;;
  7647                           
  7648                           
  7649                           ;psect for function _Clock_TRIS
  7650  18E6                     _Clock_TRIS:	
  7651                           
  7652                           ;incstack = 0
  7653                           ; Regs used in _Clock_TRIS: [wreg+status,2+status,0]
  7654                           ;Clock_TRIS@direction stored from wreg
  7655  18E6  0024               	movlb	4	; select bank4
  7656  18E7  00A0               	movwf	Clock_TRIS@direction^(0+512)
  7657                           
  7658                           ;PS_2.c: 122: if(direction == 0)
  7659  18E8  0820               	movf	Clock_TRIS@direction^(0+512),w
  7660  18E9  1D03               	btfss	3,2
  7661  18EA  28EE               	goto	l614
  7662                           
  7663                           ;PS_2.c: 123: {
  7664                           ;PS_2.c: 124: TRISAbits.TRISA5 = 0;
  7665  18EB  0021               	movlb	1	; select bank1
  7666  18EC  128C               	bcf	12,5	;volatile
  7667                           
  7668                           ;PS_2.c: 125: }
  7669  18ED  0008               	return
  7670  18EE                     l614:	
  7671                           
  7672                           ;PS_2.c: 126: else
  7673                           ;PS_2.c: 127: {
  7674                           ;PS_2.c: 128: TRISAbits.TRISA5 = 1;
  7675  18EE  0021               	movlb	1	; select bank1
  7676  18EF  168C               	bsf	12,5	;volatile
  7677  18F0  0008               	return
  7678  18F1                     __end_of_Clock_TRIS:	
  7679                           
  7680                           	psect	text17
  7681  199C                     __ptext17:	
  7682 ;; *************** function _PS_2_DISABLE_INTERRUPT *****************
  7683 ;; Defined at:
  7684 ;;		line 178 in file "PS_2.c"
  7685 ;; Parameters:    Size  Location     Type
  7686 ;;  DATA_CLK        1    wreg     unsigned char 
  7687 ;; Auto vars:     Size  Location     Type
  7688 ;;  DATA_CLK        1    1[BANK4 ] unsigned char 
  7689 ;; Return value:  Size  Location     Type
  7690 ;;		None               void
  7691 ;; Registers used:
  7692 ;;		wreg, status,2, status,0
  7693 ;; Tracked objects:
  7694 ;;		On entry : 0/0
  7695 ;;		On exit  : 0/0
  7696 ;;		Unchanged: 0/0
  7697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7699 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7700 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7701 ;;      Totals:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  7702 ;;Total ram usage:        2 bytes
  7703 ;; Hardware stack levels used:    1
  7704 ;; Hardware stack levels required when called:    7
  7705 ;; This function calls:
  7706 ;;		Nothing
  7707 ;; This function is called by:
  7708 ;;		_Init_PS_2_Send
  7709 ;;		_Keyboard_Connected
  7710 ;; This function uses a non-reentrant model
  7711 ;;
  7712                           
  7713                           
  7714                           ;psect for function _PS_2_DISABLE_INTERRUPT
  7715  199C                     _PS_2_DISABLE_INTERRUPT:	
  7716                           
  7717                           ;incstack = 0
  7718                           ; Regs used in _PS_2_DISABLE_INTERRUPT: [wreg+status,2+status,0]
  7719                           ;PS_2_DISABLE_INTERRUPT@DATA_CLK stored from wreg
  7720  199C  0024               	movlb	4	; select bank4
  7721  199D  00A1               	movwf	PS_2_DISABLE_INTERRUPT@DATA_CLK^(0+512)
  7722                           
  7723                           ;PS_2.c: 180: if(DATA_CLK == 0b00100000)
  7724  199E  3020               	movlw	32
  7725  199F  0621               	xorwf	PS_2_DISABLE_INTERRUPT@DATA_CLK^(0+512),w
  7726  19A0  1D03               	btfss	3,2
  7727  19A1  29A8               	goto	l6264
  7728                           
  7729                           ;PS_2.c: 181: {
  7730                           ;PS_2.c: 184: IOCAN &= ~0b00100000;
  7731  19A2  30DF               	movlw	223
  7732  19A3  00A0               	movwf	??_PS_2_DISABLE_INTERRUPT^(0+512)
  7733  19A4  0820               	movf	??_PS_2_DISABLE_INTERRUPT^(0+512),w
  7734  19A5  0027               	movlb	7	; select bank7
  7735  19A6  0592               	andwf	18,f	;volatile
  7736                           
  7737                           ;PS_2.c: 185: }
  7738  19A7  0008               	return
  7739  19A8                     l6264:	
  7740                           
  7741                           ;PS_2.c: 186: else
  7742                           ;PS_2.c: 187: {
  7743                           ;PS_2.c: 190: IOCAN &= ~0b00010000;
  7744  19A8  30EF               	movlw	239
  7745  19A9  0024               	movlb	4	; select bank4
  7746  19AA  00A0               	movwf	??_PS_2_DISABLE_INTERRUPT^(0+512)
  7747  19AB  0820               	movf	??_PS_2_DISABLE_INTERRUPT^(0+512),w
  7748  19AC  0027               	movlb	7	; select bank7
  7749  19AD  0592               	andwf	18,f	;volatile
  7750  19AE  0008               	return
  7751  19AF                     __end_of_PS_2_DISABLE_INTERRUPT:	
  7752                           
  7753                           	psect	text18
  7754  1908                     __ptext18:	
  7755 ;; *************** function _PS_2_ENABLE_INTERRUPT *****************
  7756 ;; Defined at:
  7757 ;;		line 199 in file "PS_2.c"
  7758 ;; Parameters:    Size  Location     Type
  7759 ;;  DATA_CLK        1    wreg     unsigned char 
  7760 ;; Auto vars:     Size  Location     Type
  7761 ;;  DATA_CLK        1    0[BANK4 ] unsigned char 
  7762 ;; Return value:  Size  Location     Type
  7763 ;;		None               void
  7764 ;; Registers used:
  7765 ;;		wreg, status,2, status,0
  7766 ;; Tracked objects:
  7767 ;;		On entry : 0/0
  7768 ;;		On exit  : 0/0
  7769 ;;		Unchanged: 0/0
  7770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7772 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7774 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7775 ;;Total ram usage:        1 bytes
  7776 ;; Hardware stack levels used:    1
  7777 ;; Hardware stack levels required when called:    7
  7778 ;; This function calls:
  7779 ;;		Nothing
  7780 ;; This function is called by:
  7781 ;;		_main
  7782 ;;		_Keyboard_Connected
  7783 ;; This function uses a non-reentrant model
  7784 ;;
  7785                           
  7786                           
  7787                           ;psect for function _PS_2_ENABLE_INTERRUPT
  7788  1908                     _PS_2_ENABLE_INTERRUPT:	
  7789                           
  7790                           ;incstack = 0
  7791                           ; Regs used in _PS_2_ENABLE_INTERRUPT: [wreg+status,2+status,0]
  7792                           ;PS_2_ENABLE_INTERRUPT@DATA_CLK stored from wreg
  7793  1908  0024               	movlb	4	; select bank4
  7794  1909  00A0               	movwf	PS_2_ENABLE_INTERRUPT@DATA_CLK^(0+512)
  7795                           
  7796                           ;PS_2.c: 201: if(DATA_CLK == 0b00100000)
  7797  190A  3020               	movlw	32
  7798  190B  0620               	xorwf	PS_2_ENABLE_INTERRUPT@DATA_CLK^(0+512),w
  7799  190C  1D03               	btfss	3,2
  7800  190D  2911               	goto	l634
  7801                           
  7802                           ;PS_2.c: 202: {
  7803                           ;PS_2.c: 205: IOCAN |= 0b00100000;
  7804  190E  0027               	movlb	7	; select bank7
  7805  190F  1692               	bsf	18,5	;volatile
  7806                           
  7807                           ;PS_2.c: 207: }
  7808  1910  0008               	return
  7809  1911                     l634:	
  7810                           
  7811                           ;PS_2.c: 208: else
  7812                           ;PS_2.c: 209: {
  7813                           ;PS_2.c: 212: IOCAN |= 0b00010000;
  7814  1911  0027               	movlb	7	; select bank7
  7815  1912  1612               	bsf	18,4	;volatile
  7816  1913  0008               	return
  7817  1914                     __end_of_PS_2_ENABLE_INTERRUPT:	
  7818                           
  7819                           	psect	text19
  7820  0A51                     __ptext19:	
  7821 ;; *************** function _Init_System *****************
  7822 ;; Defined at:
  7823 ;;		line 103 in file "user.c"
  7824 ;; Parameters:    Size  Location     Type
  7825 ;;		None
  7826 ;; Auto vars:     Size  Location     Type
  7827 ;;  Baud            4   44[BANK4 ] unsigned long 
  7828 ;;  temp            4   40[BANK4 ] unsigned long 
  7829 ;;  Parity          1   48[BANK4 ] unsigned char 
  7830 ;; Return value:  Size  Location     Type
  7831 ;;		None               void
  7832 ;; Registers used:
  7833 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7834 ;; Tracked objects:
  7835 ;;		On entry : 0/0
  7836 ;;		On exit  : 0/0
  7837 ;;		Unchanged: 0/0
  7838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7840 ;;      Locals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0
  7841 ;;      Temps:          0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  7842 ;;      Totals:         0       0       0       0       0      14       0       0       0       0       0       0       
      +0       0
  7843 ;;Total ram usage:       14 bytes
  7844 ;; Hardware stack levels used:    1
  7845 ;; Hardware stack levels required when called:   10
  7846 ;; This function calls:
  7847 ;;		_InitUART
  7848 ;;		_ReadBaud
  7849 ;;		_UARTstringWAIT
  7850 ;;		_delayUS
  7851 ;; This function is called by:
  7852 ;;		_main
  7853 ;; This function uses a non-reentrant model
  7854 ;;
  7855                           
  7856                           
  7857                           ;psect for function _Init_System
  7858  0A51                     _Init_System:	
  7859                           
  7860                           ;user.c: 105: unsigned long temp =0;
  7861                           
  7862                           ;incstack = 0
  7863                           ; Regs used in _Init_System: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7864  0A51  3000               	movlw	0
  7865  0A52  0024               	movlb	4	; select bank4
  7866  0A53  00CB               	movwf	(Init_System@temp+3)^(0+512)
  7867  0A54  3000               	movlw	0
  7868  0A55  00CA               	movwf	(Init_System@temp+2)^(0+512)
  7869  0A56  3000               	movlw	0
  7870  0A57  00C9               	movwf	(Init_System@temp+1)^(0+512)
  7871  0A58  3000               	movlw	0
  7872  0A59  00C8               	movwf	Init_System@temp^(0+512)
  7873                           
  7874                           ;user.c: 106: unsigned long Baud =0;
  7875  0A5A  3000               	movlw	0
  7876  0A5B  00CF               	movwf	(Init_System@Baud+3)^(0+512)
  7877  0A5C  3000               	movlw	0
  7878  0A5D  00CE               	movwf	(Init_System@Baud+2)^(0+512)
  7879  0A5E  3000               	movlw	0
  7880  0A5F  00CD               	movwf	(Init_System@Baud+1)^(0+512)
  7881  0A60  3000               	movlw	0
  7882  0A61  00CC               	movwf	Init_System@Baud^(0+512)
  7883                           
  7884                           ;user.c: 107: unsigned char Parity =0;
  7885  0A62  01D0               	clrf	Init_System@Parity^(0+512)
  7886                           
  7887                           ;user.c: 109: temp = ReadBaud((0x1800 >> 5),0);
  7888  0A63  30C0               	movlw	192
  7889  0A64  00B2               	movwf	ReadBaud@row^(0+512)
  7890  0A65  3000               	movlw	0
  7891  0A66  00B3               	movwf	(ReadBaud@row^(0+512)+1)
  7892  0A67  01B4               	clrf	ReadBaud@column^(0+512)
  7893  0A68  3190  2087  318A   	fcall	_ReadBaud
  7894  0A6B  0024               	movlb	4	; select bank4
  7895  0A6C  0835               	movf	(?_ReadBaud+3)^(0+512),w
  7896  0A6D  00CB               	movwf	(Init_System@temp+3)^(0+512)
  7897  0A6E  0834               	movf	(?_ReadBaud+2)^(0+512),w
  7898  0A6F  00CA               	movwf	(Init_System@temp+2)^(0+512)
  7899  0A70  0833               	movf	(?_ReadBaud+1)^(0+512),w
  7900  0A71  00C9               	movwf	(Init_System@temp+1)^(0+512)
  7901  0A72  0832               	movf	?_ReadBaud^(0+512),w
  7902  0A73  00C8               	movwf	Init_System@temp^(0+512)
  7903                           
  7904                           ;user.c: 110: Baud = temp & 0x000FFFFF;
  7905  0A74  30FF               	movlw	255
  7906  0A75  0548               	andwf	Init_System@temp^(0+512),w
  7907  0A76  00CC               	movwf	Init_System@Baud^(0+512)
  7908  0A77  30FF               	movlw	255
  7909  0A78  0549               	andwf	(Init_System@temp+1)^(0+512),w
  7910  0A79  00CD               	movwf	(Init_System@Baud+1)^(0+512)
  7911  0A7A  300F               	movlw	15
  7912  0A7B  054A               	andwf	(Init_System@temp+2)^(0+512),w
  7913  0A7C  00CE               	movwf	(Init_System@Baud+2)^(0+512)
  7914  0A7D  3000               	movlw	0
  7915  0A7E  054B               	andwf	(Init_System@temp+3)^(0+512),w
  7916  0A7F  00CF               	movwf	(Init_System@Baud+3)^(0+512)
  7917                           
  7918                           ;user.c: 111: Parity = (unsigned char)((temp & 0x00F00000) >> 20);
  7919  0A80  0848               	movf	Init_System@temp^(0+512),w
  7920  0A81  00C3               	movwf	??_Init_System^(0+512)
  7921  0A82  0849               	movf	(Init_System@temp+1)^(0+512),w
  7922  0A83  00C4               	movwf	(??_Init_System^(0+512)+1)
  7923  0A84  084A               	movf	(Init_System@temp+2)^(0+512),w
  7924  0A85  00C5               	movwf	(??_Init_System^(0+512)+2)
  7925  0A86  084B               	movf	(Init_System@temp+3)^(0+512),w
  7926  0A87  00C6               	movwf	(??_Init_System^(0+512)+3)
  7927  0A88  3014               	movlw	20
  7928  0A89                     u8855:	
  7929  0A89  36C6               	lsrf	(??_Init_System^(0+512)+3),f
  7930  0A8A  0CC5               	rrf	(??_Init_System^(0+512)+2),f
  7931  0A8B  0CC4               	rrf	(??_Init_System^(0+512)+1),f
  7932  0A8C  0CC3               	rrf	??_Init_System^(0+512),f
  7933  0A8D  0B89               	decfsz	9,f
  7934  0A8E  2A89               	goto	u8855
  7935  0A8F  0843               	movf	??_Init_System^(0+512),w
  7936  0A90  390F               	andlw	15
  7937  0A91  00C7               	movwf	(??_Init_System+4)^(0+512)
  7938  0A92  0847               	movf	(??_Init_System+4)^(0+512),w
  7939  0A93  00D0               	movwf	Init_System@Parity^(0+512)
  7940                           
  7941                           ;user.c: 112: if(Baud <2400 || Baud > 115200)
  7942  0A94  084F               	movf	(Init_System@Baud+3)^(0+512),w
  7943  0A95  1D03               	btfss	3,2
  7944  0A96  2AA0               	goto	l6862
  7945  0A97  084E               	movf	(Init_System@Baud+2)^(0+512),w
  7946  0A98  1D03               	btfss	3,2
  7947  0A99  2AA0               	goto	l6862
  7948  0A9A  3060               	movlw	96
  7949  0A9B  024C               	subwf	Init_System@Baud^(0+512),w
  7950  0A9C  3009               	movlw	9
  7951  0A9D  3B4D               	subwfb	(Init_System@Baud+1)^(0+512),w
  7952  0A9E  1C03               	btfss	3,0
  7953  0A9F  2AAB               	goto	l6864
  7954  0AA0                     l6862:	
  7955  0AA0  084F               	movf	(Init_System@Baud+3)^(0+512),w
  7956  0AA1  1D03               	btfss	3,2
  7957  0AA2  2AAB               	goto	l6864
  7958  0AA3  3001               	movlw	1
  7959  0AA4  024C               	subwf	Init_System@Baud^(0+512),w
  7960  0AA5  30C2               	movlw	194
  7961  0AA6  3B4D               	subwfb	(Init_System@Baud+1)^(0+512),w
  7962  0AA7  3001               	movlw	1
  7963  0AA8  3B4E               	subwfb	(Init_System@Baud+2)^(0+512),w
  7964  0AA9  1C03               	btfss	3,0
  7965  0AAA  2AB4               	goto	l6868
  7966  0AAB                     l6864:	
  7967                           
  7968                           ;user.c: 113: {
  7969                           ;user.c: 115: Baud = 9600;
  7970  0AAB  3000               	movlw	0
  7971  0AAC  00CF               	movwf	(Init_System@Baud+3)^(0+512)
  7972  0AAD  3000               	movlw	0
  7973  0AAE  00CE               	movwf	(Init_System@Baud+2)^(0+512)
  7974  0AAF  3025               	movlw	37
  7975  0AB0  00CD               	movwf	(Init_System@Baud+1)^(0+512)
  7976  0AB1  3080               	movlw	128
  7977  0AB2  00CC               	movwf	Init_System@Baud^(0+512)
  7978                           
  7979                           ;user.c: 116: Parity = 0;
  7980  0AB3  01D0               	clrf	Init_System@Parity^(0+512)
  7981  0AB4                     l6868:	
  7982                           
  7983                           ;user.c: 117: }
  7984                           ;user.c: 118: InitUART(Baud, Parity);
  7985  0AB4  084F               	movf	(Init_System@Baud+3)^(0+512),w
  7986  0AB5  00B1               	movwf	(InitUART@Baud+3)^(0+512)
  7987  0AB6  084E               	movf	(Init_System@Baud+2)^(0+512),w
  7988  0AB7  00B0               	movwf	(InitUART@Baud+2)^(0+512)
  7989  0AB8  084D               	movf	(Init_System@Baud+1)^(0+512),w
  7990  0AB9  00AF               	movwf	(InitUART@Baud+1)^(0+512)
  7991  0ABA  084C               	movf	Init_System@Baud^(0+512),w
  7992  0ABB  00AE               	movwf	InitUART@Baud^(0+512)
  7993  0ABC  0850               	movf	Init_System@Parity^(0+512),w
  7994  0ABD  00C3               	movwf	??_Init_System^(0+512)
  7995  0ABE  0843               	movf	??_Init_System^(0+512),w
  7996  0ABF  00B2               	movwf	InitUART@parity^(0+512)
  7997  0AC0  3194  2441  318A   	fcall	_InitUART
  7998                           
  7999                           ;user.c: 121: delayUS(15000);
  8000  0AC3  3000               	movlw	0
  8001  0AC4  0024               	movlb	4	; select bank4
  8002  0AC5  00A3               	movwf	(delayUS@US+3)^(0+512)
  8003  0AC6  3000               	movlw	0
  8004  0AC7  00A2               	movwf	(delayUS@US+2)^(0+512)
  8005  0AC8  303A               	movlw	58
  8006  0AC9  00A1               	movwf	(delayUS@US+1)^(0+512)
  8007  0ACA  3098               	movlw	152
  8008  0ACB  00A0               	movwf	delayUS@US^(0+512)
  8009  0ACC  319C  240E  318A   	fcall	_delayUS
  8010                           
  8011                           ;user.c: 122: UARTstringWAIT("\r\nPS/2 Keyboard to RS-232\r\n");
  8012  0ACF  3090               	movlw	low (STR_3| (0+32768))
  8013  0AD0  0024               	movlb	4	; select bank4
  8014  0AD1  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8015  0AD2  3089               	movlw	high (STR_3| (0+32768))
  8016  0AD3  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8017  0AD4  319B  23AA  318A   	fcall	_UARTstringWAIT
  8018                           
  8019                           ;user.c: 123: delayUS(15000);
  8020  0AD7  3000               	movlw	0
  8021  0AD8  0024               	movlb	4	; select bank4
  8022  0AD9  00A3               	movwf	(delayUS@US+3)^(0+512)
  8023  0ADA  3000               	movlw	0
  8024  0ADB  00A2               	movwf	(delayUS@US+2)^(0+512)
  8025  0ADC  303A               	movlw	58
  8026  0ADD  00A1               	movwf	(delayUS@US+1)^(0+512)
  8027  0ADE  3098               	movlw	152
  8028  0ADF  00A0               	movwf	delayUS@US^(0+512)
  8029  0AE0  319C  240E  318A   	fcall	_delayUS
  8030                           
  8031                           ;user.c: 124: UARTstringWAIT("Firmware Version: ");
  8032  0AE3  3013               	movlw	low (STR_4| (0+32768))
  8033  0AE4  0024               	movlb	4	; select bank4
  8034  0AE5  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8035  0AE6  308A               	movlw	high (STR_4| (0+32768))
  8036  0AE7  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8037  0AE8  319B  23AA  318A   	fcall	_UARTstringWAIT
  8038                           
  8039                           ;user.c: 125: UARTstringWAIT(Version);
  8040  0AEB  3066               	movlw	low (_Version| (0+32768))
  8041  0AEC  0024               	movlb	4	; select bank4
  8042  0AED  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8043  0AEE  3089               	movlw	high (_Version| (0+32768))
  8044  0AEF  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8045  0AF0  319B  23AA  318A   	fcall	_UARTstringWAIT
  8046                           
  8047                           ;user.c: 126: UARTstringWAIT("\r\n");
  8048  0AF3  30FD               	movlw	low ((STR_14+16)| (0+32768))
  8049  0AF4  0024               	movlb	4	; select bank4
  8050  0AF5  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8051  0AF6  3089               	movlw	high ((STR_14+16)| (0+32768))
  8052  0AF7  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8053  0AF8  319B  23AA  318A   	fcall	_UARTstringWAIT
  8054                           
  8055                           ;user.c: 127: delayUS(15000);
  8056  0AFB  3000               	movlw	0
  8057  0AFC  0024               	movlb	4	; select bank4
  8058  0AFD  00A3               	movwf	(delayUS@US+3)^(0+512)
  8059  0AFE  3000               	movlw	0
  8060  0AFF  00A2               	movwf	(delayUS@US+2)^(0+512)
  8061  0B00  303A               	movlw	58
  8062  0B01  00A1               	movwf	(delayUS@US+1)^(0+512)
  8063  0B02  3098               	movlw	152
  8064  0B03  00A0               	movwf	delayUS@US^(0+512)
  8065  0B04  319C  240E  318A   	fcall	_delayUS
  8066                           
  8067                           ;user.c: 128: UARTstringWAIT("Change BAUD: \"CNT + ALT + DEL\"\r\n");
  8068  0B07  306F               	movlw	low (STR_6| (0+32768))
  8069  0B08  0024               	movlb	4	; select bank4
  8070  0B09  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8071  0B0A  3089               	movlw	high (STR_6| (0+32768))
  8072  0B0B  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8073  0B0C  319B  23AA  318A   	fcall	_UARTstringWAIT
  8074                           
  8075                           ;user.c: 129: delayUS(15000);
  8076  0B0F  3000               	movlw	0
  8077  0B10  0024               	movlb	4	; select bank4
  8078  0B11  00A3               	movwf	(delayUS@US+3)^(0+512)
  8079  0B12  3000               	movlw	0
  8080  0B13  00A2               	movwf	(delayUS@US+2)^(0+512)
  8081  0B14  303A               	movlw	58
  8082  0B15  00A1               	movwf	(delayUS@US+1)^(0+512)
  8083  0B16  3098               	movlw	152
  8084  0B17  00A0               	movwf	delayUS@US^(0+512)
  8085  0B18  319C  240E  318A   	fcall	_delayUS
  8086                           
  8087                           ;user.c: 130: UARTstringWAIT("\r\n");
  8088  0B1B  30FD               	movlw	low ((STR_14+16)| (0+32768))
  8089  0B1C  0024               	movlb	4	; select bank4
  8090  0B1D  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8091  0B1E  3089               	movlw	high ((STR_14+16)| (0+32768))
  8092  0B1F  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8093  0B20  319B  23AA  318A   	fcall	_UARTstringWAIT
  8094                           
  8095                           ;user.c: 132: if(Parity)
  8096  0B23  0024               	movlb	4	; select bank4
  8097  0B24  0850               	movf	Init_System@Parity^(0+512),w
  8098  0B25  1D03               	btfss	3,2
  8099  0B26  2B3B               	goto	l6904
  8100  0B27  2B48               	goto	l6906
  8101  0B28                     l6894:	
  8102                           ;user.c: 135: {
  8103                           ;user.c: 136: case 1:
  8104                           
  8105                           ;user.c: 133: {
  8106                           ;user.c: 134: switch (Parity)
  8107                           
  8108                           
  8109                           ;user.c: 137: UARTstringWAIT(OddParityMSG);
  8110  0B28  3011               	movlw	low (_OddParityMSG| (0+32768))
  8111  0B29  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8112  0B2A  3089               	movlw	high (_OddParityMSG| (0+32768))
  8113  0B2B  2B4B               	goto	L3
  8114  0B2C                     l6896:	
  8115                           ;user.c: 139: case 2:
  8116                           
  8117                           ;user.c: 138: break;
  8118                           
  8119                           
  8120                           ;user.c: 140: UARTstringWAIT(EvenParityMSG);
  8121  0B2C  30FB               	movlw	low (_EvenParityMSG| (0+32768))
  8122  0B2D  0024               	movlb	4	; select bank4
  8123  0B2E  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8124  0B2F  3088               	movlw	high (_EvenParityMSG| (0+32768))
  8125  0B30  2B4B               	goto	L3
  8126  0B31                     l6898:	
  8127                           ;user.c: 142: case 3:
  8128                           
  8129                           ;user.c: 141: break;
  8130                           
  8131                           
  8132                           ;user.c: 143: UARTstringWAIT(MarkParityMSG);
  8133  0B31  304A               	movlw	low (_MarkParityMSG| (0+32768))
  8134  0B32  0024               	movlb	4	; select bank4
  8135  0B33  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8136  0B34  3089               	movlw	high (_MarkParityMSG| (0+32768))
  8137  0B35  2B4B               	goto	L3
  8138  0B36                     l6900:	
  8139                           ;user.c: 145: default:
  8140                           
  8141                           ;user.c: 144: break;
  8142                           
  8143                           
  8144                           ;user.c: 146: UARTstringWAIT(SpaceParityMSG);
  8145  0B36  303A               	movlw	low (_SpaceParityMSG| (0+32768))
  8146  0B37  0024               	movlb	4	; select bank4
  8147  0B38  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8148  0B39  3089               	movlw	high (_SpaceParityMSG| (0+32768))
  8149  0B3A  2B4B               	goto	L3
  8150  0B3B                     l6904:	
  8151                           ;user.c: 148: }
  8152                           
  8153                           ;user.c: 147: break;
  8154                           
  8155  0B3B  0024               	movlb	4	; select bank4
  8156  0B3C  0850               	movf	Init_System@Parity^(0+512),w
  8157                           
  8158                           ; Switch size 1, requested type "space"
  8159                           ; Number of cases is 3, Range of values is 1 to 3
  8160                           ; switch strategies available:
  8161                           ; Name         Instructions Cycles
  8162                           ; simple_byte           10     6 (average)
  8163                           ; direct_byte           15     9 (fixed)
  8164                           ; jumptable            263     9 (fixed)
  8165                           ;	Chosen strategy is simple_byte
  8166  0B3D  3A01               	xorlw	1	; case 1
  8167  0B3E  1903               	skipnz
  8168  0B3F  2B28               	goto	l6894
  8169  0B40  3A03               	xorlw	3	; case 2
  8170  0B41  1903               	skipnz
  8171  0B42  2B2C               	goto	l6896
  8172  0B43  3A01               	xorlw	1	; case 3
  8173  0B44  1903               	skipnz
  8174  0B45  2B31               	goto	l6898
  8175  0B46  2B36               	goto	l6900
  8176                           
  8177                           ;user.c: 149: }
  8178  0B47  2B4F               	goto	l273
  8179  0B48                     l6906:	
  8180                           
  8181                           ;user.c: 150: else
  8182                           ;user.c: 151: {
  8183                           ;user.c: 152: UARTstringWAIT(NoParityMSG);
  8184  0B48  3026               	movlw	low (_NoParityMSG| (0+32768))
  8185  0B49  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8186  0B4A  3089               	movlw	high (_NoParityMSG| (0+32768))
  8187  0B4B                     L3:	
  8188  0B4B  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8189  0B4C  319B  23AA  318A   	fcall	_UARTstringWAIT
  8190  0B4F                     l273:	
  8191                           
  8192                           ;user.c: 153: }
  8193                           ;user.c: 154: UARTstringWAIT("\r\n");
  8194  0B4F  30FD               	movlw	low ((STR_14+16)| (0+32768))
  8195  0B50  0024               	movlb	4	; select bank4
  8196  0B51  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8197  0B52  3089               	movlw	high ((STR_14+16)| (0+32768))
  8198  0B53  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8199  0B54  319B  23AA  318A   	fcall	_UARTstringWAIT
  8200                           
  8201                           ;user.c: 155: delayUS(15000);
  8202  0B57  3000               	movlw	0
  8203  0B58  0024               	movlb	4	; select bank4
  8204  0B59  00A3               	movwf	(delayUS@US+3)^(0+512)
  8205  0B5A  3000               	movlw	0
  8206  0B5B  00A2               	movwf	(delayUS@US+2)^(0+512)
  8207  0B5C  303A               	movlw	58
  8208  0B5D  00A1               	movwf	(delayUS@US+1)^(0+512)
  8209  0B5E  3098               	movlw	152
  8210  0B5F  00A0               	movwf	delayUS@US^(0+512)
  8211  0B60  319C  240E         	fcall	_delayUS
  8212                           
  8213                           ;user.c: 156: INTCON |= 0x08;
  8214  0B62  158B               	bsf	11,3	;volatile
  8215                           
  8216                           ;user.c: 157: INTCONbits.GIE = 1;
  8217  0B63  178B               	bsf	11,7	;volatile
  8218  0B64  0008               	return
  8219  0B65                     __end_of_Init_System:	
  8220                           
  8221                           	psect	text20
  8222  1BAA                     __ptext20:	
  8223 ;; *************** function _UARTstringWAIT *****************
  8224 ;; Defined at:
  8225 ;;		line 366 in file "UART.c"
  8226 ;; Parameters:    Size  Location     Type
  8227 ;;  data            2   15[BANK4 ] PTR const unsigned char 
  8228 ;;		 -> STR_20(20), STR_19(3), Process_PS2_ScanCode@buf(60), STR_17(3), 
  8229 ;;		 -> STR_16(3), STR_15(19), STR_14(19), STR_13(3), 
  8230 ;;		 -> STR_12(3), SetBaud@buf(50), STR_10(21), STR_9(3), 
  8231 ;;		 -> STR_8(3), NoParityMSG(20), SpaceParityMSG(16), MarkParityMSG(15), 
  8232 ;;		 -> EvenParityMSG(22), OddParityMSG(21), STR_7(3), STR_6(33), 
  8233 ;;		 -> STR_5(3), Version(9), STR_4(19), STR_3(28), 
  8234 ;;		 -> STR_2(8), STR_1(7), VoltageMSG(13), 
  8235 ;; Auto vars:     Size  Location     Type
  8236 ;;		None
  8237 ;; Return value:  Size  Location     Type
  8238 ;;		None               void
  8239 ;; Registers used:
  8240 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8241 ;; Tracked objects:
  8242 ;;		On entry : 0/0
  8243 ;;		On exit  : 0/0
  8244 ;;		Unchanged: 0/0
  8245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8246 ;;      Params:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  8247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8248 ;;      Temps:          0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  8249 ;;      Totals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  8250 ;;Total ram usage:        5 bytes
  8251 ;; Hardware stack levels used:    1
  8252 ;; Hardware stack levels required when called:    9
  8253 ;; This function calls:
  8254 ;;		_UARTchar
  8255 ;;		_delayUS
  8256 ;; This function is called by:
  8257 ;;		_main
  8258 ;;		_Init_System
  8259 ;; This function uses a non-reentrant model
  8260 ;;
  8261                           
  8262                           
  8263                           ;psect for function _UARTstringWAIT
  8264  1BAA                     _UARTstringWAIT:	
  8265  1BAA                     l456:	
  8266                           ;incstack = 0
  8267                           ; Regs used in _UARTstringWAIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8268                           ;UART.c: 368: do
  8269                           
  8270                           
  8271                           ;UART.c: 369: {
  8272                           ;UART.c: 370: delayUS(5000);
  8273  1BAA  3000               	movlw	0
  8274  1BAB  0024               	movlb	4	; select bank4
  8275  1BAC  00A3               	movwf	(delayUS@US+3)^(0+512)
  8276  1BAD  3000               	movlw	0
  8277  1BAE  00A2               	movwf	(delayUS@US+2)^(0+512)
  8278  1BAF  3013               	movlw	19
  8279  1BB0  00A1               	movwf	(delayUS@US+1)^(0+512)
  8280  1BB1  3088               	movlw	136
  8281  1BB2  00A0               	movwf	delayUS@US^(0+512)
  8282  1BB3  319C  240E  319B   	fcall	_delayUS
  8283                           
  8284                           ;UART.c: 371: if(*data != 0)
  8285  1BB6  0024               	movlb	4	; select bank4
  8286  1BB7  082F               	movf	UARTstringWAIT@data^(0+512),w
  8287  1BB8  0084               	movwf	4
  8288  1BB9  0830               	movf	(UARTstringWAIT@data+1)^(0+512),w
  8289  1BBA  0085               	movwf	5
  8290  1BBB  0012               	moviw fsr0++
  8291  1BBC  1903               	btfsc	3,2
  8292  1BBD  2BCB               	goto	l6562
  8293                           
  8294                           ;UART.c: 372: {
  8295                           ;UART.c: 373: UARTchar(*data, 0, 0);
  8296  1BBE  01A8               	clrf	UARTchar@override^(0+512)
  8297  1BBF  01A9               	clrf	UARTchar@NinethBit_override_data^(0+512)
  8298  1BC0  082F               	movf	UARTstringWAIT@data^(0+512),w
  8299  1BC1  0084               	movwf	4
  8300  1BC2  0830               	movf	(UARTstringWAIT@data+1)^(0+512),w
  8301  1BC3  0085               	movwf	5
  8302  1BC4  0800               	movf	0,w	;code access
  8303  1BC5  319E  26B6  319B   	fcall	_UARTchar
  8304  1BC8                     l458:	
  8305                           ;UART.c: 374: while((!TX1STAbits.TRMT));
  8306                           
  8307  1BC8  0023               	movlb	3	; select bank3
  8308  1BC9  1C9E               	btfss	30,1	;volatile
  8309  1BCA  2BC8               	goto	l458
  8310  1BCB                     l6562:	
  8311                           
  8312                           ;UART.c: 375: }
  8313                           ;UART.c: 376: } while( *data++);
  8314  1BCB  0024               	movlb	4	; select bank4
  8315  1BCC  0830               	movf	(UARTstringWAIT@data+1)^(0+512),w
  8316  1BCD  00B2               	movwf	(??_UARTstringWAIT^(0+512)+1)
  8317  1BCE  082F               	movf	UARTstringWAIT@data^(0+512),w
  8318  1BCF  00B1               	movwf	??_UARTstringWAIT^(0+512)
  8319  1BD0  0AAF               	incf	UARTstringWAIT@data^(0+512),f
  8320  1BD1  1903               	skipnz
  8321  1BD2  0AB0               	incf	(UARTstringWAIT@data+1)^(0+512),f
  8322  1BD3  0831               	movf	??_UARTstringWAIT^(0+512),w
  8323  1BD4  0084               	movwf	4
  8324  1BD5  0832               	movf	(??_UARTstringWAIT+1)^(0+512),w
  8325  1BD6  0085               	movwf	5
  8326  1BD7  0012               	moviw fsr0++
  8327  1BD8  1903               	btfsc	3,2
  8328  1BD9  0008               	return
  8329  1BDA  2BAA               	goto	l456
  8330  1BDB                     __end_of_UARTstringWAIT:	
  8331                           
  8332                           	psect	text21
  8333  1C0E                     __ptext21:	
  8334 ;; *************** function _delayUS *****************
  8335 ;; Defined at:
  8336 ;;		line 51 in file "MISC.c"
  8337 ;; Parameters:    Size  Location     Type
  8338 ;;  US              4    0[BANK4 ] long 
  8339 ;; Auto vars:     Size  Location     Type
  8340 ;;  i               4    5[BANK4 ] long 
  8341 ;;  j               1    9[BANK4 ] unsigned char 
  8342 ;; Return value:  Size  Location     Type
  8343 ;;		None               void
  8344 ;; Registers used:
  8345 ;;		wreg, status,2, status,0
  8346 ;; Tracked objects:
  8347 ;;		On entry : 0/0
  8348 ;;		On exit  : 0/0
  8349 ;;		Unchanged: 0/0
  8350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8351 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8352 ;;      Locals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  8353 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  8354 ;;      Totals:         0       0       0       0       0      10       0       0       0       0       0       0       
      +0       0
  8355 ;;Total ram usage:       10 bytes
  8356 ;; Hardware stack levels used:    1
  8357 ;; Hardware stack levels required when called:    7
  8358 ;; This function calls:
  8359 ;;		Nothing
  8360 ;; This function is called by:
  8361 ;;		_main
  8362 ;;		_Init_System
  8363 ;;		_UARTstringWAIT
  8364 ;;		_Send_PS2
  8365 ;;		_Init_PS_2_Send
  8366 ;;		_InternalADC_Read
  8367 ;;		_Keyboard_Connected
  8368 ;; This function uses a non-reentrant model
  8369 ;;
  8370                           
  8371                           
  8372                           ;psect for function _delayUS
  8373  1C0E                     _delayUS:	
  8374                           
  8375                           ;MISC.c: 53: long i;
  8376                           ;MISC.c: 54: unsigned char j;
  8377                           ;MISC.c: 55: for(i=0;i<US;i+=6)
  8378                           
  8379                           ;incstack = 0
  8380                           ; Regs used in _delayUS: [wreg+status,2+status,0]
  8381  1C0E  3000               	movlw	0
  8382  1C0F  0024               	movlb	4	; select bank4
  8383  1C10  00A8               	movwf	(delayUS@i+3)^(0+512)
  8384  1C11  3000               	movlw	0
  8385  1C12  00A7               	movwf	(delayUS@i+2)^(0+512)
  8386  1C13  3000               	movlw	0
  8387  1C14  00A6               	movwf	(delayUS@i+1)^(0+512)
  8388  1C15  3000               	movlw	0
  8389  1C16  00A5               	movwf	delayUS@i^(0+512)
  8390  1C17                     l279:	
  8391  1C17  0828               	movf	(delayUS@i+3)^(0+512),w
  8392  1C18  3A80               	xorlw	128
  8393  1C19  00A4               	movwf	??_delayUS^(0+512)
  8394  1C1A  0823               	movf	(delayUS@US+3)^(0+512),w
  8395  1C1B  3A80               	xorlw	128
  8396  1C1C  0224               	subwf	??_delayUS^(0+512),w
  8397  1C1D  1D03               	skipz
  8398  1C1E  2C29               	goto	u7773
  8399  1C1F  0822               	movf	(delayUS@US+2)^(0+512),w
  8400  1C20  0227               	subwf	(delayUS@i+2)^(0+512),w
  8401  1C21  1D03               	skipz
  8402  1C22  2C29               	goto	u7773
  8403  1C23  0821               	movf	(delayUS@US+1)^(0+512),w
  8404  1C24  0226               	subwf	(delayUS@i+1)^(0+512),w
  8405  1C25  1D03               	skipz
  8406  1C26  2C29               	goto	u7773
  8407  1C27  0820               	movf	delayUS@US^(0+512),w
  8408  1C28  0225               	subwf	delayUS@i^(0+512),w
  8409  1C29                     u7773:	
  8410  1C29  1803               	btfsc	3,0
  8411  1C2A  0008               	return
  8412                           
  8413                           ;MISC.c: 56: {
  8414                           ;MISC.c: 57: for(j=0;j<32;j++)
  8415  1C2B  01A9               	clrf	delayUS@j^(0+512)
  8416  1C2C  3020               	movlw	32
  8417  1C2D  0229               	subwf	delayUS@j^(0+512),w
  8418  1C2E  1803               	btfsc	3,0
  8419  1C2F  2C3A               	goto	l6208
  8420  1C30                     l281:	
  8421                           
  8422                           ;MISC.c: 58: {
  8423                           ;MISC.c: 59: __nop();
  8424  1C30  0000               	nop
  8425  1C31  3001               	movlw	1
  8426  1C32  0024               	movlb	4	; select bank4
  8427  1C33  00A4               	movwf	??_delayUS^(0+512)
  8428  1C34  0824               	movf	??_delayUS^(0+512),w
  8429  1C35  07A9               	addwf	delayUS@j^(0+512),f
  8430  1C36  3020               	movlw	32
  8431  1C37  0229               	subwf	delayUS@j^(0+512),w
  8432  1C38  1C03               	skipc
  8433  1C39  2C30               	goto	l281
  8434  1C3A                     l6208:	
  8435  1C3A  3006               	movlw	6
  8436  1C3B  07A5               	addwf	delayUS@i^(0+512),f
  8437  1C3C  3000               	movlw	0
  8438  1C3D  3DA6               	addwfc	(delayUS@i+1)^(0+512),f
  8439  1C3E  3000               	movlw	0
  8440  1C3F  3DA7               	addwfc	(delayUS@i+2)^(0+512),f
  8441  1C40  3000               	movlw	0
  8442  1C41  3DA8               	addwfc	(delayUS@i+3)^(0+512),f
  8443  1C42  2C17               	goto	l279
  8444  1C43                     __end_of_delayUS:	
  8445                           
  8446                           	psect	text22
  8447  1EB6                     __ptext22:	
  8448 ;; *************** function _UARTchar *****************
  8449 ;; Defined at:
  8450 ;;		line 235 in file "UART.c"
  8451 ;; Parameters:    Size  Location     Type
  8452 ;;  data            1    wreg     unsigned char 
  8453 ;;  override        1    8[BANK4 ] unsigned char 
  8454 ;;  NinethBit_ov    1    9[BANK4 ] unsigned char 
  8455 ;; Auto vars:     Size  Location     Type
  8456 ;;  data            1   14[BANK4 ] unsigned char 
  8457 ;; Return value:  Size  Location     Type
  8458 ;;		None               void
  8459 ;; Registers used:
  8460 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8461 ;; Tracked objects:
  8462 ;;		On entry : 0/0
  8463 ;;		On exit  : 0/0
  8464 ;;		Unchanged: 0/0
  8465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8466 ;;      Params:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  8467 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  8468 ;;      Temps:          0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8469 ;;      Totals:         0       0       0       0       0       7       0       0       0       0       0       0       
      +0       0
  8470 ;;Total ram usage:        7 bytes
  8471 ;; Hardware stack levels used:    1
  8472 ;; Hardware stack levels required when called:    8
  8473 ;; This function calls:
  8474 ;;		_CheckSum_byte
  8475 ;; This function is called by:
  8476 ;;		_UARTstringWAIT
  8477 ;;		_UARTstring
  8478 ;; This function uses a non-reentrant model
  8479 ;;
  8480                           
  8481                           
  8482                           ;psect for function _UARTchar
  8483  1EB6                     _UARTchar:	
  8484                           
  8485                           ;incstack = 0
  8486                           ; Regs used in _UARTchar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8487                           ;UARTchar@data stored from wreg
  8488  1EB6  0024               	movlb	4	; select bank4
  8489  1EB7  00AE               	movwf	UARTchar@data^(0+512)
  8490                           
  8491                           ;UART.c: 237: if(TXSTAbits.TX9)
  8492  1EB8  0023               	movlb	3	; select bank3
  8493  1EB9  1F1E               	btfss	30,6	;volatile
  8494  1EBA  2EFF               	goto	l431
  8495                           
  8496                           ;UART.c: 238: {
  8497                           ;UART.c: 240: if(!override)
  8498  1EBB  0024               	movlb	4	; select bank4
  8499  1EBC  0828               	movf	UARTchar@override^(0+512),w
  8500  1EBD  1903               	btfsc	3,2
  8501  1EBE  2EE7               	goto	l6288
  8502  1EBF  2EF4               	goto	l6290
  8503  1EC0                     l6282:	
  8504                           ;UART.c: 244: {
  8505                           ;UART.c: 245: case 1:
  8506                           
  8507                           ;UART.c: 241: {
  8508                           ;UART.c: 243: switch (PARITY)
  8509                           
  8510                           
  8511                           ;UART.c: 246: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 3);
  8512  1EC0  082E               	movf	UARTchar@data^(0+512),w
  8513  1EC1  00AA               	movwf	??_UARTchar^(0+512)
  8514  1EC2  01AB               	clrf	(??_UARTchar^(0+512)+1)
  8515  1EC3  082A               	movf	??_UARTchar^(0+512),w
  8516  1EC4  00A0               	movwf	CheckSum_byte@This^(0+512)
  8517  1EC5  082B               	movf	(??_UARTchar+1)^(0+512),w
  8518  1EC6  00A1               	movwf	(CheckSum_byte@This+1)^(0+512)
  8519  1EC7  3003               	movlw	3
  8520  1EC8  2ED2               	goto	L6
  8521  1EC9                     l6284:	
  8522                           ;UART.c: 248: case 2:
  8523                           
  8524                           ;UART.c: 247: break;
  8525                           
  8526                           
  8527                           ;UART.c: 249: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 2);
  8528  1EC9  0024               	movlb	4	; select bank4
  8529  1ECA  082E               	movf	UARTchar@data^(0+512),w
  8530  1ECB  00AA               	movwf	??_UARTchar^(0+512)
  8531  1ECC  01AB               	clrf	(??_UARTchar^(0+512)+1)
  8532  1ECD  082A               	movf	??_UARTchar^(0+512),w
  8533  1ECE  00A0               	movwf	CheckSum_byte@This^(0+512)
  8534  1ECF  082B               	movf	(??_UARTchar+1)^(0+512),w
  8535  1ED0  00A1               	movwf	(CheckSum_byte@This+1)^(0+512)
  8536  1ED1  3002               	movlw	2
  8537  1ED2                     L6:	
  8538  1ED2  00AC               	movwf	(??_UARTchar+2)^(0+512)
  8539  1ED3  082C               	movf	(??_UARTchar+2)^(0+512),w
  8540  1ED4  00A2               	movwf	CheckSum_byte@Odd_Even^(0+512)
  8541  1ED5  319B  231B  319E   	fcall	_CheckSum_byte
  8542  1ED8  0024               	movlb	4	; select bank4
  8543  1ED9  00AD               	movwf	(??_UARTchar+3)^(0+512)
  8544  1EDA  0023               	movlb	3	; select bank3
  8545  1EDB  081E               	movf	30,w	;volatile
  8546  1EDC  0024               	movlb	4	; select bank4
  8547  1EDD  062D               	xorwf	(??_UARTchar+3)^(0+512),w
  8548  1EDE  39FE               	andlw	-2
  8549  1EDF  062D               	xorwf	(??_UARTchar+3)^(0+512),w
  8550  1EE0  2EFD               	goto	L5
  8551  1EE1                     l428:	
  8552                           ;UART.c: 251: case 3:
  8553                           
  8554                           ;UART.c: 250: break;
  8555                           
  8556                           
  8557                           ;UART.c: 252: TXSTAbits.TX9D = 1;
  8558  1EE1  0023               	movlb	3	; select bank3
  8559  1EE2  141E               	bsf	30,0	;volatile
  8560                           
  8561                           ;UART.c: 253: break;
  8562  1EE3  2EFF               	goto	l431
  8563  1EE4                     l429:	
  8564                           ;UART.c: 254: default:
  8565                           
  8566                           
  8567                           ;UART.c: 255: TXSTAbits.TX9D = 0;
  8568  1EE4  0023               	movlb	3	; select bank3
  8569  1EE5  101E               	bcf	30,0	;volatile
  8570                           
  8571                           ;UART.c: 257: }
  8572                           
  8573                           ;UART.c: 256: break;
  8574  1EE6  2EFF               	goto	l431
  8575  1EE7                     l6288:	
  8576  1EE7  0024               	movlb	4	; select bank4
  8577  1EE8  0860               	movf	_PARITY^(0+512),w
  8578                           
  8579                           ; Switch size 1, requested type "space"
  8580                           ; Number of cases is 3, Range of values is 1 to 3
  8581                           ; switch strategies available:
  8582                           ; Name         Instructions Cycles
  8583                           ; simple_byte           10     6 (average)
  8584                           ; direct_byte           15     9 (fixed)
  8585                           ; jumptable            263     9 (fixed)
  8586                           ;	Chosen strategy is simple_byte
  8587  1EE9  3A01               	xorlw	1	; case 1
  8588  1EEA  1903               	skipnz
  8589  1EEB  2EC0               	goto	l6282
  8590  1EEC  3A03               	xorlw	3	; case 2
  8591  1EED  1903               	skipnz
  8592  1EEE  2EC9               	goto	l6284
  8593  1EEF  3A01               	xorlw	1	; case 3
  8594  1EF0  1903               	skipnz
  8595  1EF1  2EE1               	goto	l428
  8596  1EF2  2EE4               	goto	l429
  8597                           
  8598                           ;UART.c: 258: }
  8599  1EF3  2EFF               	goto	l431
  8600  1EF4                     l6290:	
  8601                           
  8602                           ;UART.c: 259: else
  8603                           ;UART.c: 260: {
  8604                           ;UART.c: 261: TXSTAbits.TX9D = (NinethBit_override_data & 0x01);
  8605  1EF4  3001               	movlw	1
  8606  1EF5  0529               	andwf	UARTchar@NinethBit_override_data^(0+512),w
  8607  1EF6  00AA               	movwf	??_UARTchar^(0+512)
  8608  1EF7  0023               	movlb	3	; select bank3
  8609  1EF8  081E               	movf	30,w	;volatile
  8610  1EF9  0024               	movlb	4	; select bank4
  8611  1EFA  062A               	xorwf	??_UARTchar^(0+512),w
  8612  1EFB  39FE               	andlw	-2
  8613  1EFC  062A               	xorwf	??_UARTchar^(0+512),w
  8614  1EFD                     L5:	
  8615  1EFD  0023               	movlb	3	; select bank3
  8616  1EFE  009E               	movwf	30	;volatile
  8617  1EFF                     l431:	
  8618                           ;UART.c: 262: }
  8619                           ;UART.c: 263: }
  8620                           ;UART.c: 280: while(!TXSTAbits.TRMT);
  8621                           
  8622  1EFF  0023               	movlb	3	; select bank3
  8623  1F00  1C9E               	btfss	30,1	;volatile
  8624  1F01  2EFF               	goto	l431
  8625                           
  8626                           ;UART.c: 281: TXREG = data;
  8627  1F02  0024               	movlb	4	; select bank4
  8628  1F03  082E               	movf	UARTchar@data^(0+512),w
  8629  1F04  0023               	movlb	3	; select bank3
  8630  1F05  009A               	movwf	26	;volatile
  8631  1F06  0008               	return
  8632  1F07                     __end_of_UARTchar:	
  8633                           
  8634                           	psect	text23
  8635  1B1B                     __ptext23:	
  8636 ;; *************** function _CheckSum_byte *****************
  8637 ;; Defined at:
  8638 ;;		line 71 in file "MISC.c"
  8639 ;; Parameters:    Size  Location     Type
  8640 ;;  This            2    0[BANK4 ] unsigned int 
  8641 ;;  Odd_Even        1    2[BANK4 ] unsigned char 
  8642 ;; Auto vars:     Size  Location     Type
  8643 ;;  ThisTemp        2    4[BANK4 ] unsigned int 
  8644 ;;  i               1    7[BANK4 ] unsigned char 
  8645 ;;  Parity          1    6[BANK4 ] unsigned char 
  8646 ;; Return value:  Size  Location     Type
  8647 ;;                  1    wreg      unsigned char 
  8648 ;; Registers used:
  8649 ;;		wreg, status,2, status,0
  8650 ;; Tracked objects:
  8651 ;;		On entry : 0/0
  8652 ;;		On exit  : 0/0
  8653 ;;		Unchanged: 0/0
  8654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8655 ;;      Params:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  8656 ;;      Locals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8657 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  8658 ;;      Totals:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  8659 ;;Total ram usage:        8 bytes
  8660 ;; Hardware stack levels used:    1
  8661 ;; Hardware stack levels required when called:    7
  8662 ;; This function calls:
  8663 ;;		Nothing
  8664 ;; This function is called by:
  8665 ;;		_UARTchar
  8666 ;;		_Send_PS2
  8667 ;; This function uses a non-reentrant model
  8668 ;;
  8669                           
  8670                           
  8671                           ;psect for function _CheckSum_byte
  8672  1B1B                     _CheckSum_byte:	
  8673                           
  8674                           ;MISC.c: 73: char i = 0;
  8675                           
  8676                           ;incstack = 0
  8677                           ; Regs used in _CheckSum_byte: [wreg+status,2+status,0]
  8678  1B1B  0024               	movlb	4	; select bank4
  8679  1B1C  01A7               	clrf	CheckSum_byte@i^(0+512)
  8680                           
  8681                           ;MISC.c: 74: unsigned char Parity = 0;
  8682  1B1D  01A6               	clrf	CheckSum_byte@Parity^(0+512)
  8683                           
  8684                           ;MISC.c: 75: unsigned int ThisTemp = This;
  8685  1B1E  0821               	movf	(CheckSum_byte@This+1)^(0+512),w
  8686  1B1F  00A5               	movwf	(CheckSum_byte@ThisTemp+1)^(0+512)
  8687  1B20  0820               	movf	CheckSum_byte@This^(0+512),w
  8688  1B21  00A4               	movwf	CheckSum_byte@ThisTemp^(0+512)
  8689                           
  8690                           ;MISC.c: 77: for (i =0; i<8; i++)
  8691  1B22  01A7               	clrf	CheckSum_byte@i^(0+512)
  8692  1B23  3008               	movlw	8
  8693  1B24  0227               	subwf	CheckSum_byte@i^(0+512),w
  8694  1B25  1803               	btfsc	3,0
  8695  1B26  2B3A               	goto	l6222
  8696  1B27                     l287:	
  8697                           
  8698                           ;MISC.c: 78: {
  8699                           ;MISC.c: 79: if((ThisTemp & 0x01) == 1)
  8700  1B27  1C24               	btfss	CheckSum_byte@ThisTemp^(0+512),0
  8701  1B28  2B2D               	goto	l289
  8702                           
  8703                           ;MISC.c: 80: {
  8704                           ;MISC.c: 81: Parity++;
  8705  1B29  3001               	movlw	1
  8706  1B2A  00A3               	movwf	??_CheckSum_byte^(0+512)
  8707  1B2B  0823               	movf	??_CheckSum_byte^(0+512),w
  8708  1B2C  07A6               	addwf	CheckSum_byte@Parity^(0+512),f
  8709  1B2D                     l289:	
  8710                           
  8711                           ;MISC.c: 82: }
  8712                           ;MISC.c: 83: ThisTemp >>= 1;
  8713  1B2D  3001               	movlw	1
  8714  1B2E                     u7805:	
  8715  1B2E  36A5               	lsrf	(CheckSum_byte@ThisTemp+1)^(0+512),f
  8716  1B2F  0CA4               	rrf	CheckSum_byte@ThisTemp^(0+512),f
  8717  1B30  0B89               	decfsz	9,f
  8718  1B31  2B2E               	goto	u7805
  8719  1B32  3001               	movlw	1
  8720  1B33  00A3               	movwf	??_CheckSum_byte^(0+512)
  8721  1B34  0823               	movf	??_CheckSum_byte^(0+512),w
  8722  1B35  07A7               	addwf	CheckSum_byte@i^(0+512),f
  8723  1B36  3008               	movlw	8
  8724  1B37  0227               	subwf	CheckSum_byte@i^(0+512),w
  8725  1B38  1C03               	skipc
  8726  1B39  2B27               	goto	l287
  8727  1B3A                     l6222:	
  8728                           
  8729                           ;MISC.c: 84: }
  8730                           ;MISC.c: 85: if(Odd_Even == 3)
  8731  1B3A  3003               	movlw	3
  8732  1B3B  0622               	xorwf	CheckSum_byte@Odd_Even^(0+512),w
  8733  1B3C  1D03               	btfss	3,2
  8734  1B3D  2B44               	goto	l290
  8735                           
  8736                           ;MISC.c: 86: {
  8737                           ;MISC.c: 87: if(Parity % 2 == 0)
  8738  1B3E  1826               	btfsc	CheckSum_byte@Parity^(0+512),0
  8739  1B3F  2B42               	goto	l6230
  8740                           
  8741                           ;MISC.c: 88: {
  8742                           ;MISC.c: 89: return 1;
  8743  1B40  3001               	movlw	1
  8744  1B41  0008               	return
  8745  1B42                     l6230:	
  8746                           
  8747                           ;MISC.c: 90: }
  8748                           ;MISC.c: 91: return 0;
  8749  1B42  3000               	movlw	0
  8750                           
  8751                           ;MISC.c: 92: }
  8752  1B43  0008               	return
  8753  1B44                     l290:	
  8754                           
  8755                           ;MISC.c: 93: else
  8756                           ;MISC.c: 94: {
  8757                           ;MISC.c: 95: if(Parity % 2 == 1)
  8758  1B44  1C26               	btfss	CheckSum_byte@Parity^(0+512),0
  8759  1B45  2B48               	goto	l6240
  8760                           
  8761                           ;MISC.c: 96: {
  8762                           ;MISC.c: 97: return 1;
  8763  1B46  3001               	movlw	1
  8764  1B47  0008               	return
  8765  1B48                     l6240:	
  8766                           
  8767                           ;MISC.c: 98: }
  8768                           ;MISC.c: 99: return 0;
  8769  1B48  3000               	movlw	0
  8770  1B49  0008               	return
  8771  1B4A                     __end_of_CheckSum_byte:	
  8772                           
  8773                           	psect	text24
  8774  1087                     __ptext24:	
  8775 ;; *************** function _ReadBaud *****************
  8776 ;; Defined at:
  8777 ;;		line 187 in file "FLASH.c"
  8778 ;; Parameters:    Size  Location     Type
  8779 ;;  row             2   18[BANK4 ] unsigned int 
  8780 ;;  column          1   20[BANK4 ] unsigned char 
  8781 ;; Auto vars:     Size  Location     Type
  8782 ;;  temp            4   30[BANK4 ] unsigned long 
  8783 ;; Return value:  Size  Location     Type
  8784 ;;                  4   18[BANK4 ] unsigned long 
  8785 ;; Registers used:
  8786 ;;		wreg, status,2, status,0, pclath, cstack
  8787 ;; Tracked objects:
  8788 ;;		On entry : 0/0
  8789 ;;		On exit  : 0/0
  8790 ;;		Unchanged: 0/0
  8791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8792 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8793 ;;      Locals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8794 ;;      Temps:          0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  8795 ;;      Totals:         0       0       0       0       0      16       0       0       0       0       0       0       
      +0       0
  8796 ;;Total ram usage:       16 bytes
  8797 ;; Hardware stack levels used:    1
  8798 ;; Hardware stack levels required when called:    9
  8799 ;; This function calls:
  8800 ;;		_ReadFlash_4Byte
  8801 ;; This function is called by:
  8802 ;;		_Init_System
  8803 ;; This function uses a non-reentrant model
  8804 ;;
  8805                           
  8806                           
  8807                           ;psect for function _ReadBaud
  8808  1087                     _ReadBaud:	
  8809                           
  8810                           ;FLASH.c: 189: unsigned long temp;
  8811                           ;FLASH.c: 190: temp =(ReadFlash_4Byte(row, column));
  8812                           
  8813                           ;incstack = 0
  8814                           ; Regs used in _ReadBaud: [wreg+status,2+status,0+pclath+cstack]
  8815  1087  0024               	movlb	4	; select bank4
  8816  1088  0833               	movf	(ReadBaud@row+1)^(0+512),w
  8817  1089  00A6               	movwf	(ReadFlash_4Byte@row+1)^(0+512)
  8818  108A  0832               	movf	ReadBaud@row^(0+512),w
  8819  108B  00A5               	movwf	ReadFlash_4Byte@row^(0+512)
  8820  108C  0834               	movf	ReadBaud@column^(0+512),w
  8821  108D  00B6               	movwf	??_ReadBaud^(0+512)
  8822  108E  0836               	movf	??_ReadBaud^(0+512),w
  8823  108F  00A7               	movwf	ReadFlash_4Byte@column^(0+512)
  8824  1090  319E  261B  3190   	fcall	_ReadFlash_4Byte
  8825  1093  0024               	movlb	4	; select bank4
  8826  1094  0828               	movf	(?_ReadFlash_4Byte+3)^(0+512),w
  8827  1095  00C1               	movwf	(ReadBaud@temp+3)^(0+512)
  8828  1096  0827               	movf	(?_ReadFlash_4Byte+2)^(0+512),w
  8829  1097  00C0               	movwf	(ReadBaud@temp+2)^(0+512)
  8830  1098  0826               	movf	(?_ReadFlash_4Byte+1)^(0+512),w
  8831  1099  00BF               	movwf	(ReadBaud@temp+1)^(0+512)
  8832  109A  0825               	movf	?_ReadFlash_4Byte^(0+512),w
  8833  109B  00BE               	movwf	ReadBaud@temp^(0+512)
  8834                           
  8835                           ;FLASH.c: 191: MEM[1] = (unsigned int)(temp & 0x0003FFF);
  8836  109C  30FF               	movlw	255
  8837  109D  053E               	andwf	ReadBaud@temp^(0+512),w
  8838  109E  0021               	movlb	1	; select bank1
  8839  109F  00E7               	movwf	(_MEM^(0+128)+2)
  8840  10A0  303F               	movlw	63
  8841  10A1  0024               	movlb	4	; select bank4
  8842  10A2  053F               	andwf	(ReadBaud@temp+1)^(0+512),w
  8843  10A3  0021               	movlb	1	; select bank1
  8844  10A4  00E8               	movwf	((_MEM+1)^(0+128)+2)
  8845                           
  8846                           ;FLASH.c: 192: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
  8847  10A5  0024               	movlb	4	; select bank4
  8848  10A6  083E               	movf	ReadBaud@temp^(0+512),w
  8849  10A7  00B6               	movwf	??_ReadBaud^(0+512)
  8850  10A8  083F               	movf	(ReadBaud@temp+1)^(0+512),w
  8851  10A9  00B7               	movwf	(??_ReadBaud^(0+512)+1)
  8852  10AA  0840               	movf	(ReadBaud@temp+2)^(0+512),w
  8853  10AB  00B8               	movwf	(??_ReadBaud^(0+512)+2)
  8854  10AC  0841               	movf	(ReadBaud@temp+3)^(0+512),w
  8855  10AD  00B9               	movwf	(??_ReadBaud^(0+512)+3)
  8856  10AE  300E               	movlw	14
  8857  10AF                     u8465:	
  8858  10AF  36B9               	lsrf	(??_ReadBaud^(0+512)+3),f
  8859  10B0  0CB8               	rrf	(??_ReadBaud^(0+512)+2),f
  8860  10B1  0CB7               	rrf	(??_ReadBaud^(0+512)+1),f
  8861  10B2  0CB6               	rrf	??_ReadBaud^(0+512),f
  8862  10B3  0B89               	decfsz	9,f
  8863  10B4  28AF               	goto	u8465
  8864  10B5  30FF               	movlw	255
  8865  10B6  0536               	andwf	??_ReadBaud^(0+512),w
  8866  10B7  0021               	movlb	1	; select bank1
  8867  10B8  00E5               	movwf	_MEM^(0+128)
  8868  10B9  303F               	movlw	63
  8869  10BA  0024               	movlb	4	; select bank4
  8870  10BB  0537               	andwf	(??_ReadBaud+1)^(0+512),w
  8871  10BC  0021               	movlb	1	; select bank1
  8872  10BD  00E6               	movwf	(_MEM+1)^(0+128)
  8873                           
  8874                           ;FLASH.c: 193: return (((unsigned long)MEM[0] << 12) + (unsigned long)MEM[1]);
  8875  10BE  0867               	movf	(_MEM^(0+128)+2),w
  8876  10BF  0024               	movlb	4	; select bank4
  8877  10C0  00B6               	movwf	??_ReadBaud^(0+512)
  8878  10C1  0021               	movlb	1	; select bank1
  8879  10C2  0868               	movf	((_MEM+1)^(0+128)+2),w
  8880  10C3  0024               	movlb	4	; select bank4
  8881  10C4  00B7               	movwf	(??_ReadBaud^(0+512)+1)
  8882  10C5  01B8               	clrf	(??_ReadBaud^(0+512)+2)
  8883  10C6  01B9               	clrf	(??_ReadBaud^(0+512)+3)
  8884  10C7  0021               	movlb	1	; select bank1
  8885  10C8  0865               	movf	_MEM^(0+128),w
  8886  10C9  0024               	movlb	4	; select bank4
  8887  10CA  00BA               	movwf	(??_ReadBaud+4)^(0+512)
  8888  10CB  0021               	movlb	1	; select bank1
  8889  10CC  0866               	movf	(_MEM+1)^(0+128),w
  8890  10CD  0024               	movlb	4	; select bank4
  8891  10CE  00BB               	movwf	((??_ReadBaud+4)^(0+512)+1)
  8892  10CF  01BC               	clrf	((??_ReadBaud+4)^(0+512)+2)
  8893  10D0  01BD               	clrf	((??_ReadBaud+4)^(0+512)+3)
  8894  10D1  300C               	movlw	12
  8895  10D2                     u8475:	
  8896  10D2  35BA               	lslf	(??_ReadBaud+4)^(0+512),f
  8897  10D3  0DBB               	rlf	((??_ReadBaud+4)^(0+512)+1),f
  8898  10D4  0DBC               	rlf	((??_ReadBaud+4)^(0+512)+2),f
  8899  10D5  0DBD               	rlf	((??_ReadBaud+4)^(0+512)+3),f
  8900  10D6  0B89               	decfsz	9,f
  8901  10D7  28D2               	goto	u8475
  8902  10D8  083A               	movf	(??_ReadBaud+4)^(0+512),w
  8903  10D9  07B6               	addwf	??_ReadBaud^(0+512),f
  8904  10DA  083B               	movf	(??_ReadBaud+5)^(0+512),w
  8905  10DB  3DB7               	addwfc	(??_ReadBaud^(0+512)+1),f
  8906  10DC  083C               	movf	(??_ReadBaud+6)^(0+512),w
  8907  10DD  3DB8               	addwfc	(??_ReadBaud^(0+512)+2),f
  8908  10DE  083D               	movf	(??_ReadBaud+7)^(0+512),w
  8909  10DF  3DB9               	addwfc	(??_ReadBaud^(0+512)+3),f
  8910  10E0  0839               	movf	(??_ReadBaud+3)^(0+512),w
  8911  10E1  00B5               	movwf	(?_ReadBaud+3)^(0+512)
  8912  10E2  0838               	movf	(??_ReadBaud+2)^(0+512),w
  8913  10E3  00B4               	movwf	(?_ReadBaud+2)^(0+512)
  8914  10E4  0837               	movf	(??_ReadBaud+1)^(0+512),w
  8915  10E5  00B3               	movwf	(?_ReadBaud+1)^(0+512)
  8916  10E6  0836               	movf	??_ReadBaud^(0+512),w
  8917  10E7  00B2               	movwf	?_ReadBaud^(0+512)
  8918  10E8  0008               	return
  8919  10E9                     __end_of_ReadBaud:	
  8920                           
  8921                           	psect	text25
  8922  1E1B                     __ptext25:	
  8923 ;; *************** function _ReadFlash_4Byte *****************
  8924 ;; Defined at:
  8925 ;;		line 62 in file "FLASH.c"
  8926 ;; Parameters:    Size  Location     Type
  8927 ;;  row             2    5[BANK4 ] unsigned int 
  8928 ;;  column          1    7[BANK4 ] unsigned char 
  8929 ;; Auto vars:     Size  Location     Type
  8930 ;;  temp            4   14[BANK4 ] unsigned long 
  8931 ;; Return value:  Size  Location     Type
  8932 ;;                  4    5[BANK4 ] unsigned long 
  8933 ;; Registers used:
  8934 ;;		wreg, status,2, status,0, pclath, cstack
  8935 ;; Tracked objects:
  8936 ;;		On entry : 0/0
  8937 ;;		On exit  : 0/0
  8938 ;;		Unchanged: 0/0
  8939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8940 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8941 ;;      Locals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8942 ;;      Temps:          0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  8943 ;;      Totals:         0       0       0       0       0      13       0       0       0       0       0       0       
      +0       0
  8944 ;;Total ram usage:       13 bytes
  8945 ;; Hardware stack levels used:    1
  8946 ;; Hardware stack levels required when called:    8
  8947 ;; This function calls:
  8948 ;;		_ReadFlash_2Byte
  8949 ;; This function is called by:
  8950 ;;		_ReadBaud
  8951 ;; This function uses a non-reentrant model
  8952 ;;
  8953                           
  8954                           
  8955                           ;psect for function _ReadFlash_4Byte
  8956  1E1B                     _ReadFlash_4Byte:	
  8957                           
  8958                           ;FLASH.c: 64: unsigned long temp =0;
  8959                           
  8960                           ;incstack = 0
  8961                           ; Regs used in _ReadFlash_4Byte: [wreg+status,2+status,0+pclath+cstack]
  8962  1E1B  3000               	movlw	0
  8963  1E1C  0024               	movlb	4	; select bank4
  8964  1E1D  00B1               	movwf	(ReadFlash_4Byte@temp+3)^(0+512)
  8965  1E1E  3000               	movlw	0
  8966  1E1F  00B0               	movwf	(ReadFlash_4Byte@temp+2)^(0+512)
  8967  1E20  3000               	movlw	0
  8968  1E21  00AF               	movwf	(ReadFlash_4Byte@temp+1)^(0+512)
  8969  1E22  3000               	movlw	0
  8970  1E23  00AE               	movwf	ReadFlash_4Byte@temp^(0+512)
  8971                           
  8972                           ;FLASH.c: 65: temp = ((unsigned long)ReadFlash_2Byte(row, column) << 16);
  8973  1E24  0826               	movf	(ReadFlash_4Byte@row+1)^(0+512),w
  8974  1E25  00A1               	movwf	(ReadFlash_2Byte@row+1)^(0+512)
  8975  1E26  0825               	movf	ReadFlash_4Byte@row^(0+512),w
  8976  1E27  00A0               	movwf	ReadFlash_2Byte@row^(0+512)
  8977  1E28  0827               	movf	ReadFlash_4Byte@column^(0+512),w
  8978  1E29  00A9               	movwf	??_ReadFlash_4Byte^(0+512)
  8979  1E2A  0829               	movf	??_ReadFlash_4Byte^(0+512),w
  8980  1E2B  00A2               	movwf	ReadFlash_2Byte@column^(0+512)
  8981  1E2C  319B  237A  319E   	fcall	_ReadFlash_2Byte
  8982  1E2F  0024               	movlb	4	; select bank4
  8983  1E30  0820               	movf	?_ReadFlash_2Byte^(0+512),w
  8984  1E31  00AA               	movwf	(??_ReadFlash_4Byte+1)^(0+512)
  8985  1E32  0821               	movf	(?_ReadFlash_2Byte+1)^(0+512),w
  8986  1E33  00AB               	movwf	((??_ReadFlash_4Byte+1)^(0+512)+1)
  8987  1E34  01AC               	clrf	((??_ReadFlash_4Byte+1)^(0+512)+2)
  8988  1E35  01AD               	clrf	((??_ReadFlash_4Byte+1)^(0+512)+3)
  8989  1E36  3010               	movlw	16
  8990  1E37                     u8235:	
  8991  1E37  35AA               	lslf	(??_ReadFlash_4Byte+1)^(0+512),f
  8992  1E38  0DAB               	rlf	((??_ReadFlash_4Byte+1)^(0+512)+1),f
  8993  1E39  0DAC               	rlf	((??_ReadFlash_4Byte+1)^(0+512)+2),f
  8994  1E3A  0DAD               	rlf	((??_ReadFlash_4Byte+1)^(0+512)+3),f
  8995  1E3B  0B89               	decfsz	9,f
  8996  1E3C  2E37               	goto	u8235
  8997  1E3D  082D               	movf	(??_ReadFlash_4Byte+4)^(0+512),w
  8998  1E3E  00B1               	movwf	(ReadFlash_4Byte@temp+3)^(0+512)
  8999  1E3F  082C               	movf	(??_ReadFlash_4Byte+3)^(0+512),w
  9000  1E40  00B0               	movwf	(ReadFlash_4Byte@temp+2)^(0+512)
  9001  1E41  082B               	movf	(??_ReadFlash_4Byte+2)^(0+512),w
  9002  1E42  00AF               	movwf	(ReadFlash_4Byte@temp+1)^(0+512)
  9003  1E43  082A               	movf	(??_ReadFlash_4Byte+1)^(0+512),w
  9004  1E44  00AE               	movwf	ReadFlash_4Byte@temp^(0+512)
  9005                           
  9006                           ;FLASH.c: 66: temp |= ((unsigned long)ReadFlash_2Byte(row, (column + 1)));
  9007  1E45  0826               	movf	(ReadFlash_4Byte@row+1)^(0+512),w
  9008  1E46  00A1               	movwf	(ReadFlash_2Byte@row+1)^(0+512)
  9009  1E47  0825               	movf	ReadFlash_4Byte@row^(0+512),w
  9010  1E48  00A0               	movwf	ReadFlash_2Byte@row^(0+512)
  9011  1E49  0827               	movf	ReadFlash_4Byte@column^(0+512),w
  9012  1E4A  3E01               	addlw	1
  9013  1E4B  00A9               	movwf	??_ReadFlash_4Byte^(0+512)
  9014  1E4C  0829               	movf	??_ReadFlash_4Byte^(0+512),w
  9015  1E4D  00A2               	movwf	ReadFlash_2Byte@column^(0+512)
  9016  1E4E  319B  237A         	fcall	_ReadFlash_2Byte
  9017  1E50  0024               	movlb	4	; select bank4
  9018  1E51  0820               	movf	?_ReadFlash_2Byte^(0+512),w
  9019  1E52  00AA               	movwf	(??_ReadFlash_4Byte+1)^(0+512)
  9020  1E53  0821               	movf	(?_ReadFlash_2Byte+1)^(0+512),w
  9021  1E54  00AB               	movwf	((??_ReadFlash_4Byte+1)^(0+512)+1)
  9022  1E55  01AC               	clrf	((??_ReadFlash_4Byte+1)^(0+512)+2)
  9023  1E56  01AD               	clrf	((??_ReadFlash_4Byte+1)^(0+512)+3)
  9024  1E57  082A               	movf	(??_ReadFlash_4Byte+1)^(0+512),w
  9025  1E58  04AE               	iorwf	ReadFlash_4Byte@temp^(0+512),f
  9026  1E59  082B               	movf	(??_ReadFlash_4Byte+2)^(0+512),w
  9027  1E5A  04AF               	iorwf	(ReadFlash_4Byte@temp+1)^(0+512),f
  9028  1E5B  082C               	movf	(??_ReadFlash_4Byte+3)^(0+512),w
  9029  1E5C  04B0               	iorwf	(ReadFlash_4Byte@temp+2)^(0+512),f
  9030  1E5D  082D               	movf	(??_ReadFlash_4Byte+4)^(0+512),w
  9031  1E5E  04B1               	iorwf	(ReadFlash_4Byte@temp+3)^(0+512),f
  9032                           
  9033                           ;FLASH.c: 67: return temp;
  9034  1E5F  0831               	movf	(ReadFlash_4Byte@temp+3)^(0+512),w
  9035  1E60  00A8               	movwf	(?_ReadFlash_4Byte+3)^(0+512)
  9036  1E61  0830               	movf	(ReadFlash_4Byte@temp+2)^(0+512),w
  9037  1E62  00A7               	movwf	(?_ReadFlash_4Byte+2)^(0+512)
  9038  1E63  082F               	movf	(ReadFlash_4Byte@temp+1)^(0+512),w
  9039  1E64  00A6               	movwf	(?_ReadFlash_4Byte+1)^(0+512)
  9040  1E65  082E               	movf	ReadFlash_4Byte@temp^(0+512),w
  9041  1E66  00A5               	movwf	?_ReadFlash_4Byte^(0+512)
  9042  1E67  0008               	return
  9043  1E68                     __end_of_ReadFlash_4Byte:	
  9044                           
  9045                           	psect	text26
  9046  1B7A                     __ptext26:	
  9047 ;; *************** function _ReadFlash_2Byte *****************
  9048 ;; Defined at:
  9049 ;;		line 43 in file "FLASH.c"
  9050 ;; Parameters:    Size  Location     Type
  9051 ;;  row             2    0[BANK4 ] unsigned int 
  9052 ;;  column          1    2[BANK4 ] unsigned char 
  9053 ;; Auto vars:     Size  Location     Type
  9054 ;;		None
  9055 ;; Return value:  Size  Location     Type
  9056 ;;                  2    0[BANK4 ] unsigned int 
  9057 ;; Registers used:
  9058 ;;		wreg, status,2, status,0
  9059 ;; Tracked objects:
  9060 ;;		On entry : 0/0
  9061 ;;		On exit  : 0/0
  9062 ;;		Unchanged: 0/0
  9063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9064 ;;      Params:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  9065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9066 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  9067 ;;      Totals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  9068 ;;Total ram usage:        5 bytes
  9069 ;; Hardware stack levels used:    1
  9070 ;; Hardware stack levels required when called:    7
  9071 ;; This function calls:
  9072 ;;		Nothing
  9073 ;; This function is called by:
  9074 ;;		_ReadFlash_4Byte
  9075 ;; This function uses a non-reentrant model
  9076 ;;
  9077                           
  9078                           
  9079                           ;psect for function _ReadFlash_2Byte
  9080  1B7A                     _ReadFlash_2Byte:	
  9081                           
  9082                           ;FLASH.c: 45: PMCON1 &= ~0b01000000;
  9083                           
  9084                           ;incstack = 0
  9085                           ; Regs used in _ReadFlash_2Byte: [wreg+status,2+status,0]
  9086  1B7A  30BF               	movlw	191
  9087  1B7B  0024               	movlb	4	; select bank4
  9088  1B7C  00A3               	movwf	??_ReadFlash_2Byte^(0+512)
  9089  1B7D  0823               	movf	??_ReadFlash_2Byte^(0+512),w
  9090  1B7E  0023               	movlb	3	; select bank3
  9091  1B7F  0595               	andwf	21,f	;volatile
  9092                           
  9093                           ;FLASH.c: 46: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
  9094  1B80  0024               	movlb	4	; select bank4
  9095  1B81  0821               	movf	(ReadFlash_2Byte@row+1)^(0+512),w
  9096  1B82  00A4               	movwf	(??_ReadFlash_2Byte^(0+512)+1)
  9097  1B83  0820               	movf	ReadFlash_2Byte@row^(0+512),w
  9098  1B84  00A3               	movwf	??_ReadFlash_2Byte^(0+512)
  9099  1B85  36A4               	lsrf	(??_ReadFlash_2Byte^(0+512)+1),f
  9100  1B86  0CA3               	rrf	??_ReadFlash_2Byte^(0+512),f
  9101  1B87  36A4               	lsrf	(??_ReadFlash_2Byte^(0+512)+1),f
  9102  1B88  0CA3               	rrf	??_ReadFlash_2Byte^(0+512),f
  9103  1B89  36A4               	lsrf	(??_ReadFlash_2Byte^(0+512)+1),f
  9104  1B8A  0CA3               	rrf	??_ReadFlash_2Byte^(0+512),f
  9105  1B8B  0823               	movf	??_ReadFlash_2Byte^(0+512),w
  9106  1B8C  397F               	andlw	127
  9107  1B8D  0023               	movlb	3	; select bank3
  9108  1B8E  0092               	movwf	18	;volatile
  9109                           
  9110                           ;FLASH.c: 47: PMADRL = (unsigned char)(((row & 0x007) << 5) + column);
  9111  1B8F  0024               	movlb	4	; select bank4
  9112  1B90  0820               	movf	ReadFlash_2Byte@row^(0+512),w
  9113  1B91  3907               	andlw	7
  9114  1B92  00A3               	movwf	??_ReadFlash_2Byte^(0+512)
  9115  1B93  3004               	movlw	4
  9116  1B94                     u7875:	
  9117  1B94  35A3               	lslf	??_ReadFlash_2Byte^(0+512),f
  9118  1B95  3EFF               	addlw	-1
  9119  1B96  1D03               	skipz
  9120  1B97  2B94               	goto	u7875
  9121  1B98  3523               	lslf	??_ReadFlash_2Byte^(0+512),w
  9122  1B99  0722               	addwf	ReadFlash_2Byte@column^(0+512),w
  9123  1B9A  0023               	movlb	3	; select bank3
  9124  1B9B  0091               	movwf	17	;volatile
  9125                           
  9126                           ;FLASH.c: 48: PMCON1 |= 0b00000001;
  9127  1B9C  1415               	bsf	21,0	;volatile
  9128  1B9D                     l940:	
  9129                           ;FLASH.c: 49: while(PMCON1 & 0b00000001);
  9130                           
  9131  1B9D  1815               	btfsc	21,0	;volatile
  9132  1B9E  2B9D               	goto	l940
  9133                           
  9134                           ;FLASH.c: 50: __nop();
  9135  1B9F  0000               	nop
  9136                           
  9137                           ;FLASH.c: 51: __nop();
  9138  1BA0  0000               	nop
  9139                           
  9140                           ;FLASH.c: 52: return (PMDATL | (PMDATH << 8));
  9141  1BA1  0023               	movlb	3	; select bank3
  9142  1BA2  0814               	movf	20,w	;volatile
  9143  1BA3  0024               	movlb	4	; select bank4
  9144  1BA4  00A1               	movwf	(?_ReadFlash_2Byte+1)^(0+512)
  9145  1BA5  0023               	movlb	3	; select bank3
  9146  1BA6  0813               	movf	19,w	;volatile
  9147  1BA7  0024               	movlb	4	; select bank4
  9148  1BA8  00A0               	movwf	?_ReadFlash_2Byte^(0+512)
  9149  1BA9  0008               	return
  9150  1BAA                     __end_of_ReadFlash_2Byte:	
  9151                           
  9152                           	psect	text27
  9153  1441                     __ptext27:	
  9154 ;; *************** function _InitUART *****************
  9155 ;; Defined at:
  9156 ;;		line 78 in file "UART.c"
  9157 ;; Parameters:    Size  Location     Type
  9158 ;;  Baud            4   14[BANK4 ] unsigned long 
  9159 ;;  parity          1   18[BANK4 ] unsigned char 
  9160 ;; Auto vars:     Size  Location     Type
  9161 ;;  temp            4   31[BANK4 ] unsigned long 
  9162 ;;  spbrg           2   27[BANK4 ] unsigned int 
  9163 ;;  config          1   30[BANK4 ] unsigned char 
  9164 ;;  baudconfig      1   29[BANK4 ] unsigned char 
  9165 ;; Return value:  Size  Location     Type
  9166 ;;		None               void
  9167 ;; Registers used:
  9168 ;;		wreg, status,2, status,0, pclath, cstack
  9169 ;; Tracked objects:
  9170 ;;		On entry : 0/0
  9171 ;;		On exit  : 0/0
  9172 ;;		Unchanged: 0/0
  9173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9174 ;;      Params:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  9175 ;;      Locals:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  9176 ;;      Temps:          0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  9177 ;;      Totals:         0       0       0       0       0      21       0       0       0       0       0       0       
      +0       0
  9178 ;;Total ram usage:       21 bytes
  9179 ;; Hardware stack levels used:    1
  9180 ;; Hardware stack levels required when called:    8
  9181 ;; This function calls:
  9182 ;;		_CloseUSART
  9183 ;;		_OpenUSART
  9184 ;;		_ReadUSART
  9185 ;;		___lldiv
  9186 ;;		_baudUSART
  9187 ;; This function is called by:
  9188 ;;		_Init_System
  9189 ;; This function uses a non-reentrant model
  9190 ;;
  9191                           
  9192                           
  9193                           ;psect for function _InitUART
  9194  1441                     _InitUART:	
  9195                           
  9196                           ;UART.c: 80: unsigned long temp;
  9197                           ;UART.c: 81: unsigned char config;
  9198                           ;UART.c: 82: unsigned int spbrg;
  9199                           ;UART.c: 83: unsigned char baudconfig;
  9200                           ;UART.c: 92: PIE1bits.RCIE = 0;
  9201                           
  9202                           ;incstack = 0
  9203                           ; Regs used in _InitUART: [wreg+status,2+status,0+pclath+cstack]
  9204  1441  0021               	movlb	1	; select bank1
  9205  1442  1291               	bcf	17,5	;volatile
  9206                           
  9207                           ;UART.c: 93: LATC |= 0b00000100;
  9208  1443  0022               	movlb	2	; select bank2
  9209  1444  150E               	bsf	14,2	;volatile
  9210                           
  9211                           ;UART.c: 94: PPSLOCK =0;
  9212  1445  003C               	movlb	28	; select bank28
  9213  1446  018F               	clrf	15	;volatile
  9214                           
  9215                           ;UART.c: 95: RC2PPS = 0b00000000;
  9216  1447  003D               	movlb	29	; select bank29
  9217  1448  01A2               	clrf	34	;volatile
  9218                           
  9219                           ;UART.c: 96: PPSLOCK =1;
  9220  1449  3001               	movlw	1
  9221  144A  003C               	movlb	28	; select bank28
  9222  144B  008F               	movwf	15	;volatile
  9223                           
  9224                           ;UART.c: 98: CloseUSART();
  9225  144C  3186  26F2  3194   	fcall	_CloseUSART
  9226                           
  9227                           ;UART.c: 99: config =0;
  9228  144F  0024               	movlb	4	; select bank4
  9229  1450  01BE               	clrf	InitUART@config^(0+512)
  9230                           
  9231                           ;UART.c: 100: baudconfig =0;
  9232  1451  01BD               	clrf	InitUART@baudconfig^(0+512)
  9233                           
  9234                           ;UART.c: 105: config |= 0b00001000;
  9235  1452  15BE               	bsf	InitUART@config^(0+512),3
  9236                           
  9237                           ;UART.c: 106: config |= 0b00010000;
  9238  1453  163E               	bsf	InitUART@config^(0+512),4
  9239                           
  9240                           ;UART.c: 107: PARITY = parity;
  9241  1454  0832               	movf	InitUART@parity^(0+512),w
  9242  1455  00B3               	movwf	??_InitUART^(0+512)
  9243  1456  0833               	movf	??_InitUART^(0+512),w
  9244  1457  00E0               	movwf	_PARITY^(0+512)
  9245                           
  9246                           ;UART.c: 108: BAUD = Baud;
  9247  1458  0831               	movf	(InitUART@Baud+3)^(0+512),w
  9248  1459  00E4               	movwf	(_BAUD+3)^(0+512)
  9249  145A  0830               	movf	(InitUART@Baud+2)^(0+512),w
  9250  145B  00E3               	movwf	(_BAUD+2)^(0+512)
  9251  145C  082F               	movf	(InitUART@Baud+1)^(0+512),w
  9252  145D  00E2               	movwf	(_BAUD+1)^(0+512)
  9253  145E  082E               	movf	InitUART@Baud^(0+512),w
  9254  145F  00E1               	movwf	_BAUD^(0+512)
  9255                           
  9256                           ;UART.c: 109: if(parity)
  9257  1460  0832               	movf	InitUART@parity^(0+512),w
  9258  1461  1903               	btfsc	3,2
  9259  1462  2C65               	goto	l6598
  9260                           
  9261                           ;UART.c: 110: {
  9262                           ;UART.c: 111: config |= 0b00000010;
  9263  1463  14BE               	bsf	InitUART@config^(0+512),1
  9264                           
  9265                           ;UART.c: 112: }
  9266  1464  2C69               	goto	l6600
  9267  1465                     l6598:	
  9268                           
  9269                           ;UART.c: 113: else
  9270                           ;UART.c: 114: {
  9271                           ;UART.c: 115: config &= ~0b00000010;
  9272  1465  30FD               	movlw	253
  9273  1466  00B3               	movwf	??_InitUART^(0+512)
  9274  1467  0833               	movf	??_InitUART^(0+512),w
  9275  1468  05BE               	andwf	InitUART@config^(0+512),f
  9276  1469                     l6600:	
  9277                           
  9278                           ;UART.c: 116: }
  9279                           ;UART.c: 117: baudconfig |= 0b00001000;
  9280  1469  15BD               	bsf	InitUART@baudconfig^(0+512),3
  9281                           
  9282                           ;UART.c: 120: temp = (32000000L / Baud) - 1;
  9283  146A  0831               	movf	(InitUART@Baud+3)^(0+512),w
  9284  146B  00A3               	movwf	(___lldiv@divisor+3)^(0+512)
  9285  146C  0830               	movf	(InitUART@Baud+2)^(0+512),w
  9286  146D  00A2               	movwf	(___lldiv@divisor+2)^(0+512)
  9287  146E  082F               	movf	(InitUART@Baud+1)^(0+512),w
  9288  146F  00A1               	movwf	(___lldiv@divisor+1)^(0+512)
  9289  1470  082E               	movf	InitUART@Baud^(0+512),w
  9290  1471  00A0               	movwf	___lldiv@divisor^(0+512)
  9291  1472  3001               	movlw	1
  9292  1473  00A7               	movwf	(___lldiv@dividend+3)^(0+512)
  9293  1474  30E8               	movlw	232
  9294  1475  00A6               	movwf	(___lldiv@dividend+2)^(0+512)
  9295  1476  3048               	movlw	72
  9296  1477  00A5               	movwf	(___lldiv@dividend+1)^(0+512)
  9297  1478  3000               	movlw	0
  9298  1479  00A4               	movwf	___lldiv@dividend^(0+512)
  9299  147A  319F  2759  3194   	fcall	___lldiv
  9300  147D  30FF               	movlw	255
  9301  147E  0024               	movlb	4	; select bank4
  9302  147F  0720               	addwf	?___lldiv^(0+512),w
  9303  1480  00BF               	movwf	InitUART@temp^(0+512)
  9304  1481  30FF               	movlw	255
  9305  1482  3D21               	addwfc	(?___lldiv+1)^(0+512),w
  9306  1483  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9307  1484  30FF               	movlw	255
  9308  1485  3D22               	addwfc	(?___lldiv+2)^(0+512),w
  9309  1486  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9310  1487  30FF               	movlw	255
  9311  1488  3D23               	addwfc	(?___lldiv+3)^(0+512),w
  9312  1489  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9313                           
  9314                           ;UART.c: 121: temp = (temp >> 2) - 1;
  9315  148A  30FF               	movlw	255
  9316  148B  00B3               	movwf	??_InitUART^(0+512)
  9317  148C  30FF               	movlw	255
  9318  148D  00B4               	movwf	(??_InitUART^(0+512)+1)
  9319  148E  30FF               	movlw	255
  9320  148F  00B5               	movwf	(??_InitUART^(0+512)+2)
  9321  1490  30FF               	movlw	255
  9322  1491  00B6               	movwf	(??_InitUART^(0+512)+3)
  9323  1492  083F               	movf	InitUART@temp^(0+512),w
  9324  1493  00B7               	movwf	(??_InitUART+4)^(0+512)
  9325  1494  0840               	movf	(InitUART@temp+1)^(0+512),w
  9326  1495  00B8               	movwf	((??_InitUART+4)^(0+512)+1)
  9327  1496  0841               	movf	(InitUART@temp+2)^(0+512),w
  9328  1497  00B9               	movwf	((??_InitUART+4)^(0+512)+2)
  9329  1498  0842               	movf	(InitUART@temp+3)^(0+512),w
  9330  1499  00BA               	movwf	((??_InitUART+4)^(0+512)+3)
  9331  149A  3002               	movlw	2
  9332  149B                     u8495:	
  9333  149B  36BA               	lsrf	((??_InitUART+4)^(0+512)+3),f
  9334  149C  0CB9               	rrf	((??_InitUART+4)^(0+512)+2),f
  9335  149D  0CB8               	rrf	((??_InitUART+4)^(0+512)+1),f
  9336  149E  0CB7               	rrf	(??_InitUART+4)^(0+512),f
  9337  149F  0B89               	decfsz	9,f
  9338  14A0  2C9B               	goto	u8495
  9339  14A1  0837               	movf	(??_InitUART+4)^(0+512),w
  9340  14A2  07B3               	addwf	??_InitUART^(0+512),f
  9341  14A3  0838               	movf	(??_InitUART+5)^(0+512),w
  9342  14A4  3DB4               	addwfc	(??_InitUART^(0+512)+1),f
  9343  14A5  0839               	movf	(??_InitUART+6)^(0+512),w
  9344  14A6  3DB5               	addwfc	(??_InitUART^(0+512)+2),f
  9345  14A7  083A               	movf	(??_InitUART+7)^(0+512),w
  9346  14A8  3DB6               	addwfc	(??_InitUART^(0+512)+3),f
  9347  14A9  0836               	movf	(??_InitUART+3)^(0+512),w
  9348  14AA  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9349  14AB  0835               	movf	(??_InitUART+2)^(0+512),w
  9350  14AC  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9351  14AD  0834               	movf	(??_InitUART+1)^(0+512),w
  9352  14AE  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9353  14AF  0833               	movf	??_InitUART^(0+512),w
  9354  14B0  00BF               	movwf	InitUART@temp^(0+512)
  9355                           
  9356                           ;UART.c: 122: spbrg = (unsigned int)temp;
  9357  14B1  0840               	movf	(InitUART@temp+1)^(0+512),w
  9358  14B2  00BC               	movwf	(InitUART@spbrg+1)^(0+512)
  9359  14B3  083F               	movf	InitUART@temp^(0+512),w
  9360  14B4  00BB               	movwf	InitUART@spbrg^(0+512)
  9361                           
  9362                           ;UART.c: 124: RCSTAbits.CREN = 0;
  9363  14B5  0023               	movlb	3	; select bank3
  9364  14B6  121D               	bcf	29,4	;volatile
  9365                           
  9366                           ;UART.c: 125: OpenUSART(config, spbrg);
  9367  14B7  0024               	movlb	4	; select bank4
  9368  14B8  083C               	movf	(InitUART@spbrg+1)^(0+512),w
  9369  14B9  00A1               	movwf	(OpenUSART@spbrg+1)^(0+512)
  9370  14BA  083B               	movf	InitUART@spbrg^(0+512),w
  9371  14BB  00A0               	movwf	OpenUSART@spbrg^(0+512)
  9372  14BC  083E               	movf	InitUART@config^(0+512),w
  9373  14BD  319C  24FD  3194   	fcall	_OpenUSART
  9374                           
  9375                           ;UART.c: 126: baudUSART(baudconfig);
  9376  14C0  0024               	movlb	4	; select bank4
  9377  14C1  083D               	movf	InitUART@baudconfig^(0+512),w
  9378  14C2  3198  20A9  3194   	fcall	_baudUSART
  9379                           
  9380                           ;UART.c: 127: temp = ReadUSART();
  9381  14C5  3198  20C6  3194   	fcall	_ReadUSART
  9382  14C8  0024               	movlb	4	; select bank4
  9383  14C9  00B3               	movwf	??_InitUART^(0+512)
  9384  14CA  01B4               	clrf	(??_InitUART^(0+512)+1)
  9385  14CB  01B5               	clrf	(??_InitUART^(0+512)+2)
  9386  14CC  01B6               	clrf	(??_InitUART^(0+512)+3)
  9387  14CD  0836               	movf	(??_InitUART+3)^(0+512),w
  9388  14CE  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9389  14CF  0835               	movf	(??_InitUART+2)^(0+512),w
  9390  14D0  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9391  14D1  0834               	movf	(??_InitUART+1)^(0+512),w
  9392  14D2  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9393  14D3  0833               	movf	??_InitUART^(0+512),w
  9394  14D4  00BF               	movwf	InitUART@temp^(0+512)
  9395                           
  9396                           ;UART.c: 128: temp = ReadUSART();
  9397  14D5  3198  20C6  3194   	fcall	_ReadUSART
  9398  14D8  0024               	movlb	4	; select bank4
  9399  14D9  00B3               	movwf	??_InitUART^(0+512)
  9400  14DA  01B4               	clrf	(??_InitUART^(0+512)+1)
  9401  14DB  01B5               	clrf	(??_InitUART^(0+512)+2)
  9402  14DC  01B6               	clrf	(??_InitUART^(0+512)+3)
  9403  14DD  0836               	movf	(??_InitUART+3)^(0+512),w
  9404  14DE  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9405  14DF  0835               	movf	(??_InitUART+2)^(0+512),w
  9406  14E0  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9407  14E1  0834               	movf	(??_InitUART+1)^(0+512),w
  9408  14E2  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9409  14E3  0833               	movf	??_InitUART^(0+512),w
  9410  14E4  00BF               	movwf	InitUART@temp^(0+512)
  9411                           
  9412                           ;UART.c: 129: temp = ReadUSART();
  9413  14E5  3198  20C6  3194   	fcall	_ReadUSART
  9414  14E8  0024               	movlb	4	; select bank4
  9415  14E9  00B3               	movwf	??_InitUART^(0+512)
  9416  14EA  01B4               	clrf	(??_InitUART^(0+512)+1)
  9417  14EB  01B5               	clrf	(??_InitUART^(0+512)+2)
  9418  14EC  01B6               	clrf	(??_InitUART^(0+512)+3)
  9419  14ED  0836               	movf	(??_InitUART+3)^(0+512),w
  9420  14EE  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9421  14EF  0835               	movf	(??_InitUART+2)^(0+512),w
  9422  14F0  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9423  14F1  0834               	movf	(??_InitUART+1)^(0+512),w
  9424  14F2  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9425  14F3  0833               	movf	??_InitUART^(0+512),w
  9426  14F4  00BF               	movwf	InitUART@temp^(0+512)
  9427                           
  9428                           ;UART.c: 130: temp = ReadUSART();
  9429  14F5  3198  20C6  3194   	fcall	_ReadUSART
  9430  14F8  0024               	movlb	4	; select bank4
  9431  14F9  00B3               	movwf	??_InitUART^(0+512)
  9432  14FA  01B4               	clrf	(??_InitUART^(0+512)+1)
  9433  14FB  01B5               	clrf	(??_InitUART^(0+512)+2)
  9434  14FC  01B6               	clrf	(??_InitUART^(0+512)+3)
  9435  14FD  0836               	movf	(??_InitUART+3)^(0+512),w
  9436  14FE  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9437  14FF  0835               	movf	(??_InitUART+2)^(0+512),w
  9438  1500  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9439  1501  0834               	movf	(??_InitUART+1)^(0+512),w
  9440  1502  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9441  1503  0833               	movf	??_InitUART^(0+512),w
  9442  1504  00BF               	movwf	InitUART@temp^(0+512)
  9443                           
  9444                           ;UART.c: 131: temp = ReadUSART();
  9445  1505  3198  20C6         	fcall	_ReadUSART
  9446  1507  0024               	movlb	4	; select bank4
  9447  1508  00B3               	movwf	??_InitUART^(0+512)
  9448  1509  01B4               	clrf	(??_InitUART^(0+512)+1)
  9449  150A  01B5               	clrf	(??_InitUART^(0+512)+2)
  9450  150B  01B6               	clrf	(??_InitUART^(0+512)+3)
  9451  150C  0836               	movf	(??_InitUART+3)^(0+512),w
  9452  150D  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9453  150E  0835               	movf	(??_InitUART+2)^(0+512),w
  9454  150F  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9455  1510  0834               	movf	(??_InitUART+1)^(0+512),w
  9456  1511  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9457  1512  0833               	movf	??_InitUART^(0+512),w
  9458  1513  00BF               	movwf	InitUART@temp^(0+512)
  9459                           
  9460                           ;UART.c: 133: PPSLOCK =0;
  9461  1514  003C               	movlb	28	; select bank28
  9462  1515  018F               	clrf	15	;volatile
  9463                           
  9464                           ;UART.c: 134: RC2PPS = 0b00010100;
  9465  1516  3014               	movlw	20
  9466  1517  003D               	movlb	29	; select bank29
  9467  1518  00A2               	movwf	34	;volatile
  9468                           
  9469                           ;UART.c: 135: CKPPS = 0b00010010;
  9470  1519  3012               	movlw	18
  9471  151A  003C               	movlb	28	; select bank28
  9472  151B  00A5               	movwf	37	;volatile
  9473                           
  9474                           ;UART.c: 137: RXPPS = 0b00010101;
  9475  151C  3015               	movlw	21
  9476  151D  00A4               	movwf	36	;volatile
  9477                           
  9478                           ;UART.c: 139: PPSLOCK =1;
  9479  151E  3001               	movlw	1
  9480  151F  008F               	movwf	15	;volatile
  9481                           
  9482                           ;UART.c: 141: PIR1bits.RCIF = 0;
  9483  1520  0020               	movlb	0	; select bank0
  9484  1521  1291               	bcf	17,5	;volatile
  9485                           
  9486                           ;UART.c: 142: PIE1bits.RCIE = 1;
  9487  1522  0021               	movlb	1	; select bank1
  9488  1523  1691               	bsf	17,5	;volatile
  9489                           
  9490                           ;UART.c: 143: INTCONbits.PEIE = 1;
  9491  1524  170B               	bsf	11,6	;volatile
  9492  1525  0008               	return
  9493  1526                     __end_of_InitUART:	
  9494                           
  9495                           	psect	text28
  9496  18A9                     __ptext28:	
  9497 ;; *************** function _baudUSART *****************
  9498 ;; Defined at:
  9499 ;;		line 151 in file "UART.c"
  9500 ;; Parameters:    Size  Location     Type
  9501 ;;  baudconfig      1    wreg     unsigned char 
  9502 ;; Auto vars:     Size  Location     Type
  9503 ;;  baudconfig      1    0[BANK4 ] unsigned char 
  9504 ;; Return value:  Size  Location     Type
  9505 ;;		None               void
  9506 ;; Registers used:
  9507 ;;		wreg, status,2
  9508 ;; Tracked objects:
  9509 ;;		On entry : 0/0
  9510 ;;		On exit  : 0/0
  9511 ;;		Unchanged: 0/0
  9512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9514 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9516 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9517 ;;Total ram usage:        1 bytes
  9518 ;; Hardware stack levels used:    1
  9519 ;; Hardware stack levels required when called:    7
  9520 ;; This function calls:
  9521 ;;		Nothing
  9522 ;; This function is called by:
  9523 ;;		_InitUART
  9524 ;; This function uses a non-reentrant model
  9525 ;;
  9526                           
  9527                           
  9528                           ;psect for function _baudUSART
  9529  18A9                     _baudUSART:	
  9530                           
  9531                           ;incstack = 0
  9532                           ; Regs used in _baudUSART: [wreg+status,2]
  9533                           ;baudUSART@baudconfig stored from wreg
  9534  18A9  0024               	movlb	4	; select bank4
  9535  18AA  00A0               	movwf	baudUSART@baudconfig^(0+512)
  9536                           
  9537                           ;UART.c: 153: BAUD1CON =0;
  9538  18AB  0023               	movlb	3	; select bank3
  9539  18AC  019F               	clrf	31	;volatile
  9540                           
  9541                           ;UART.c: 154: BAUD1CON = baudconfig;
  9542  18AD  0024               	movlb	4	; select bank4
  9543  18AE  0820               	movf	baudUSART@baudconfig^(0+512),w
  9544  18AF  0023               	movlb	3	; select bank3
  9545  18B0  009F               	movwf	31	;volatile
  9546  18B1  0008               	return
  9547  18B2                     __end_of_baudUSART:	
  9548                           
  9549                           	psect	text29
  9550  1F59                     __ptext29:	
  9551 ;; *************** function ___lldiv *****************
  9552 ;; Defined at:
  9553 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  9554 ;; Parameters:    Size  Location     Type
  9555 ;;  divisor         4    0[BANK4 ] unsigned long 
  9556 ;;  dividend        4    4[BANK4 ] unsigned long 
  9557 ;; Auto vars:     Size  Location     Type
  9558 ;;  quotient        4    9[BANK4 ] unsigned long 
  9559 ;;  counter         1   13[BANK4 ] unsigned char 
  9560 ;; Return value:  Size  Location     Type
  9561 ;;                  4    0[BANK4 ] unsigned long 
  9562 ;; Registers used:
  9563 ;;		wreg, status,2, status,0
  9564 ;; Tracked objects:
  9565 ;;		On entry : 0/0
  9566 ;;		On exit  : 0/0
  9567 ;;		Unchanged: 0/0
  9568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9569 ;;      Params:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  9570 ;;      Locals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  9571 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9572 ;;      Totals:         0       0       0       0       0      14       0       0       0       0       0       0       
      +0       0
  9573 ;;Total ram usage:       14 bytes
  9574 ;; Hardware stack levels used:    1
  9575 ;; Hardware stack levels required when called:    7
  9576 ;; This function calls:
  9577 ;;		Nothing
  9578 ;; This function is called by:
  9579 ;;		_InitUART
  9580 ;; This function uses a non-reentrant model
  9581 ;;
  9582                           
  9583                           
  9584                           ;psect for function ___lldiv
  9585  1F59                     ___lldiv:	
  9586                           
  9587                           ;incstack = 0
  9588                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  9589  1F59  3000               	movlw	0
  9590  1F5A  0024               	movlb	4	; select bank4
  9591  1F5B  00AC               	movwf	(___lldiv@quotient+3)^(0+512)
  9592  1F5C  3000               	movlw	0
  9593  1F5D  00AB               	movwf	(___lldiv@quotient+2)^(0+512)
  9594  1F5E  3000               	movlw	0
  9595  1F5F  00AA               	movwf	(___lldiv@quotient+1)^(0+512)
  9596  1F60  3000               	movlw	0
  9597  1F61  00A9               	movwf	___lldiv@quotient^(0+512)
  9598  1F62  0823               	movf	(___lldiv@divisor+3)^(0+512),w
  9599  1F63  0422               	iorwf	(___lldiv@divisor+2)^(0+512),w
  9600  1F64  0421               	iorwf	(___lldiv@divisor+1)^(0+512),w
  9601  1F65  0420               	iorwf	___lldiv@divisor^(0+512),w
  9602  1F66  1903               	skipnz
  9603  1F67  2FA3               	goto	l6552
  9604  1F68  01AD               	clrf	___lldiv@counter^(0+512)
  9605  1F69  0AAD               	incf	___lldiv@counter^(0+512),f
  9606  1F6A                     l6538:	
  9607  1F6A  1BA3               	btfsc	(___lldiv@divisor+3)^(0+512),7
  9608  1F6B  2F78               	goto	l6540
  9609  1F6C  3001               	movlw	1
  9610  1F6D                     u8375:	
  9611  1F6D  35A0               	lslf	___lldiv@divisor^(0+512),f
  9612  1F6E  0DA1               	rlf	(___lldiv@divisor+1)^(0+512),f
  9613  1F6F  0DA2               	rlf	(___lldiv@divisor+2)^(0+512),f
  9614  1F70  0DA3               	rlf	(___lldiv@divisor+3)^(0+512),f
  9615  1F71  0B89               	decfsz	9,f
  9616  1F72  2F6D               	goto	u8375
  9617  1F73  3001               	movlw	1
  9618  1F74  00A8               	movwf	??___lldiv^(0+512)
  9619  1F75  0828               	movf	??___lldiv^(0+512),w
  9620  1F76  07AD               	addwf	___lldiv@counter^(0+512),f
  9621  1F77  2F6A               	goto	l6538
  9622  1F78                     l6540:	
  9623  1F78  3001               	movlw	1
  9624  1F79                     u8395:	
  9625  1F79  35A9               	lslf	___lldiv@quotient^(0+512),f
  9626  1F7A  0DAA               	rlf	(___lldiv@quotient+1)^(0+512),f
  9627  1F7B  0DAB               	rlf	(___lldiv@quotient+2)^(0+512),f
  9628  1F7C  0DAC               	rlf	(___lldiv@quotient+3)^(0+512),f
  9629  1F7D  0B89               	decfsz	9,f
  9630  1F7E  2F79               	goto	u8395
  9631  1F7F  0823               	movf	(___lldiv@divisor+3)^(0+512),w
  9632  1F80  0227               	subwf	(___lldiv@dividend+3)^(0+512),w
  9633  1F81  1D03               	skipz
  9634  1F82  2F8D               	goto	u8405
  9635  1F83  0822               	movf	(___lldiv@divisor+2)^(0+512),w
  9636  1F84  0226               	subwf	(___lldiv@dividend+2)^(0+512),w
  9637  1F85  1D03               	skipz
  9638  1F86  2F8D               	goto	u8405
  9639  1F87  0821               	movf	(___lldiv@divisor+1)^(0+512),w
  9640  1F88  0225               	subwf	(___lldiv@dividend+1)^(0+512),w
  9641  1F89  1D03               	skipz
  9642  1F8A  2F8D               	goto	u8405
  9643  1F8B  0820               	movf	___lldiv@divisor^(0+512),w
  9644  1F8C  0224               	subwf	___lldiv@dividend^(0+512),w
  9645  1F8D                     u8405:	
  9646  1F8D  1C03               	skipc
  9647  1F8E  2F98               	goto	l6548
  9648  1F8F  0820               	movf	___lldiv@divisor^(0+512),w
  9649  1F90  02A4               	subwf	___lldiv@dividend^(0+512),f
  9650  1F91  0821               	movf	(___lldiv@divisor+1)^(0+512),w
  9651  1F92  3BA5               	subwfb	(___lldiv@dividend+1)^(0+512),f
  9652  1F93  0822               	movf	(___lldiv@divisor+2)^(0+512),w
  9653  1F94  3BA6               	subwfb	(___lldiv@dividend+2)^(0+512),f
  9654  1F95  0823               	movf	(___lldiv@divisor+3)^(0+512),w
  9655  1F96  3BA7               	subwfb	(___lldiv@dividend+3)^(0+512),f
  9656  1F97  1429               	bsf	___lldiv@quotient^(0+512),0
  9657  1F98                     l6548:	
  9658  1F98  3001               	movlw	1
  9659  1F99                     u8415:	
  9660  1F99  36A3               	lsrf	(___lldiv@divisor+3)^(0+512),f
  9661  1F9A  0CA2               	rrf	(___lldiv@divisor+2)^(0+512),f
  9662  1F9B  0CA1               	rrf	(___lldiv@divisor+1)^(0+512),f
  9663  1F9C  0CA0               	rrf	___lldiv@divisor^(0+512),f
  9664  1F9D  0B89               	decfsz	9,f
  9665  1F9E  2F99               	goto	u8415
  9666  1F9F  3001               	movlw	1
  9667  1FA0  02AD               	subwf	___lldiv@counter^(0+512),f
  9668  1FA1  1D03               	btfss	3,2
  9669  1FA2  2F78               	goto	l6540
  9670  1FA3                     l6552:	
  9671  1FA3  082C               	movf	(___lldiv@quotient+3)^(0+512),w
  9672  1FA4  00A3               	movwf	(?___lldiv+3)^(0+512)
  9673  1FA5  082B               	movf	(___lldiv@quotient+2)^(0+512),w
  9674  1FA6  00A2               	movwf	(?___lldiv+2)^(0+512)
  9675  1FA7  082A               	movf	(___lldiv@quotient+1)^(0+512),w
  9676  1FA8  00A1               	movwf	(?___lldiv+1)^(0+512)
  9677  1FA9  0829               	movf	___lldiv@quotient^(0+512),w
  9678  1FAA  00A0               	movwf	?___lldiv^(0+512)
  9679  1FAB  0008               	return
  9680  1FAC                     __end_of___lldiv:	
  9681                           
  9682                           	psect	text30
  9683  18C6                     __ptext30:	
  9684 ;; *************** function _ReadUSART *****************
  9685 ;; Defined at:
  9686 ;;		line 307 in file "UART.c"
  9687 ;; Parameters:    Size  Location     Type
  9688 ;;		None
  9689 ;; Auto vars:     Size  Location     Type
  9690 ;;  data            1    1[BANK4 ] unsigned char 
  9691 ;; Return value:  Size  Location     Type
  9692 ;;                  1    wreg      unsigned char 
  9693 ;; Registers used:
  9694 ;;		wreg
  9695 ;; Tracked objects:
  9696 ;;		On entry : 0/0
  9697 ;;		On exit  : 0/0
  9698 ;;		Unchanged: 0/0
  9699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9701 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9702 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9703 ;;      Totals:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  9704 ;;Total ram usage:        2 bytes
  9705 ;; Hardware stack levels used:    1
  9706 ;; Hardware stack levels required when called:    7
  9707 ;; This function calls:
  9708 ;;		Nothing
  9709 ;; This function is called by:
  9710 ;;		_InitUART
  9711 ;; This function uses a non-reentrant model
  9712 ;;
  9713                           
  9714                           
  9715                           ;psect for function _ReadUSART
  9716  18C6                     _ReadUSART:	
  9717                           
  9718                           ;UART.c: 309: char data;
  9719                           ;UART.c: 311: if(RCSTAbits.OERR)
  9720                           
  9721                           ;incstack = 0
  9722                           ; Regs used in _ReadUSART: [wreg]
  9723  18C6  0023               	movlb	3	; select bank3
  9724  18C7  189D               	btfsc	29,1	;volatile
  9725                           
  9726                           ;UART.c: 312: {
  9727                           ;UART.c: 313: RCSTAbits.CREN = 0;
  9728  18C8  121D               	bcf	29,4	;volatile
  9729                           
  9730                           ;UART.c: 314: }
  9731                           ;UART.c: 316: data = RCREG;
  9732  18C9  0819               	movf	25,w	;volatile
  9733  18CA  0024               	movlb	4	; select bank4
  9734  18CB  00A0               	movwf	??_ReadUSART^(0+512)
  9735  18CC  0820               	movf	??_ReadUSART^(0+512),w
  9736  18CD  00A1               	movwf	ReadUSART@data^(0+512)
  9737                           
  9738                           ;UART.c: 318: return (data);
  9739  18CE  0821               	movf	ReadUSART@data^(0+512),w
  9740  18CF  0008               	return
  9741  18D0                     __end_of_ReadUSART:	
  9742                           
  9743                           	psect	text31
  9744  1CFD                     __ptext31:	
  9745 ;; *************** function _OpenUSART *****************
  9746 ;; Defined at:
  9747 ;;		line 162 in file "UART.c"
  9748 ;; Parameters:    Size  Location     Type
  9749 ;;  config          1    wreg     unsigned char 
  9750 ;;  spbrg           2    0[BANK4 ] unsigned int 
  9751 ;; Auto vars:     Size  Location     Type
  9752 ;;  config          1    2[BANK4 ] unsigned char 
  9753 ;; Return value:  Size  Location     Type
  9754 ;;		None               void
  9755 ;; Registers used:
  9756 ;;		wreg, status,2
  9757 ;; Tracked objects:
  9758 ;;		On entry : 0/0
  9759 ;;		On exit  : 0/0
  9760 ;;		Unchanged: 0/0
  9761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9762 ;;      Params:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  9763 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9765 ;;      Totals:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  9766 ;;Total ram usage:        3 bytes
  9767 ;; Hardware stack levels used:    1
  9768 ;; Hardware stack levels required when called:    7
  9769 ;; This function calls:
  9770 ;;		Nothing
  9771 ;; This function is called by:
  9772 ;;		_InitUART
  9773 ;; This function uses a non-reentrant model
  9774 ;;
  9775                           
  9776                           
  9777                           ;psect for function _OpenUSART
  9778  1CFD                     _OpenUSART:	
  9779                           
  9780                           ;incstack = 0
  9781                           ; Regs used in _OpenUSART: [wreg+status,2]
  9782                           ;OpenUSART@config stored from wreg
  9783  1CFD  0024               	movlb	4	; select bank4
  9784  1CFE  00A2               	movwf	OpenUSART@config^(0+512)
  9785                           
  9786                           ;UART.c: 164: TX1STA = 0;
  9787  1CFF  0023               	movlb	3	; select bank3
  9788  1D00  019E               	clrf	30	;volatile
  9789                           
  9790                           ;UART.c: 165: RC1STA = 0;
  9791  1D01  019D               	clrf	29	;volatile
  9792                           
  9793                           ;UART.c: 167: if(config&0x01)
  9794  1D02  0024               	movlb	4	; select bank4
  9795  1D03  1C22               	btfss	OpenUSART@config^(0+512),0
  9796  1D04  2D07               	goto	l6304
  9797                           
  9798                           ;UART.c: 168: {
  9799                           ;UART.c: 169: TX1STAbits.SYNC = 1;
  9800  1D05  0023               	movlb	3	; select bank3
  9801  1D06  161E               	bsf	30,4	;volatile
  9802  1D07                     l6304:	
  9803                           
  9804                           ;UART.c: 170: }
  9805                           ;UART.c: 172: if(config&0x02)
  9806  1D07  0024               	movlb	4	; select bank4
  9807  1D08  1CA2               	btfss	OpenUSART@config^(0+512),1
  9808  1D09  2D0D               	goto	l6308
  9809                           
  9810                           ;UART.c: 173: {
  9811                           ;UART.c: 174: TX1STAbits.TX9 = 1;
  9812  1D0A  0023               	movlb	3	; select bank3
  9813  1D0B  171E               	bsf	30,6	;volatile
  9814                           
  9815                           ;UART.c: 175: RC1STAbits.RX9 = 1;
  9816  1D0C  171D               	bsf	29,6	;volatile
  9817  1D0D                     l6308:	
  9818                           
  9819                           ;UART.c: 176: }
  9820                           ;UART.c: 178: if(config&0x04)
  9821  1D0D  0024               	movlb	4	; select bank4
  9822  1D0E  1D22               	btfss	OpenUSART@config^(0+512),2
  9823  1D0F  2D12               	goto	l6312
  9824                           
  9825                           ;UART.c: 179: {
  9826                           ;UART.c: 180: TX1STAbits.CSRC = 1;
  9827  1D10  0023               	movlb	3	; select bank3
  9828  1D11  179E               	bsf	30,7	;volatile
  9829  1D12                     l6312:	
  9830                           
  9831                           ;UART.c: 181: }
  9832                           ;UART.c: 183: if(config&0x08)
  9833  1D12  0024               	movlb	4	; select bank4
  9834  1D13  1DA2               	btfss	OpenUSART@config^(0+512),3
  9835  1D14  2D18               	goto	l411
  9836                           
  9837                           ;UART.c: 184: {
  9838                           ;UART.c: 185: RC1STAbits.CREN = 1;
  9839  1D15  0023               	movlb	3	; select bank3
  9840  1D16  161D               	bsf	29,4	;volatile
  9841                           
  9842                           ;UART.c: 186: }
  9843  1D17  2D1A               	goto	l6316
  9844  1D18                     l411:	
  9845                           
  9846                           ;UART.c: 187: else
  9847                           ;UART.c: 188: {
  9848                           ;UART.c: 189: RC1STAbits.SREN = 1;
  9849  1D18  0023               	movlb	3	; select bank3
  9850  1D19  169D               	bsf	29,5	;volatile
  9851  1D1A                     l6316:	
  9852                           
  9853                           ;UART.c: 190: }
  9854                           ;UART.c: 192: if(config&0x10)
  9855  1D1A  0024               	movlb	4	; select bank4
  9856  1D1B  1E22               	btfss	OpenUSART@config^(0+512),4
  9857  1D1C  2D1F               	goto	l6322
  9858                           
  9859                           ;UART.c: 193: {
  9860                           ;UART.c: 194: TX1STAbits.BRGH = 1;
  9861  1D1D  0023               	movlb	3	; select bank3
  9862  1D1E  151E               	bsf	30,2	;volatile
  9863  1D1F                     l6322:	
  9864                           ;UART.c: 198: {
  9865                           
  9866                           
  9867                           ;UART.c: 200: }
  9868                           ;UART.c: 202: if(config&0x40)
  9869  1D1F  0024               	movlb	4	; select bank4
  9870  1D20  1F22               	btfss	OpenUSART@config^(0+512),6
  9871  1D21  2D27               	goto	l415
  9872                           
  9873                           ;UART.c: 203: {
  9874                           ;UART.c: 204: PIR1bits.RCIF = 0;
  9875  1D22  0020               	movlb	0	; select bank0
  9876  1D23  1291               	bcf	17,5	;volatile
  9877                           
  9878                           ;UART.c: 205: PIE1bits.RCIE = 1;
  9879  1D24  0021               	movlb	1	; select bank1
  9880  1D25  1691               	bsf	17,5	;volatile
  9881                           
  9882                           ;UART.c: 207: }
  9883  1D26  2D29               	goto	l6326
  9884  1D27                     l415:	
  9885                           
  9886                           ;UART.c: 208: else
  9887                           ;UART.c: 209: {
  9888                           ;UART.c: 210: PIE1bits.RCIE = 0;
  9889  1D27  0021               	movlb	1	; select bank1
  9890  1D28  1291               	bcf	17,5	;volatile
  9891  1D29                     l6326:	
  9892                           
  9893                           ;UART.c: 211: }
  9894                           ;UART.c: 213: if(config&0x80)
  9895  1D29  0024               	movlb	4	; select bank4
  9896  1D2A  1FA2               	btfss	OpenUSART@config^(0+512),7
  9897  1D2B  2D31               	goto	l417
  9898                           
  9899                           ;UART.c: 214: {
  9900                           ;UART.c: 215: PIR1bits.TXIF = 0;
  9901  1D2C  0020               	movlb	0	; select bank0
  9902  1D2D  1211               	bcf	17,4	;volatile
  9903                           
  9904                           ;UART.c: 216: PIE1bits.TXIE = 1;
  9905  1D2E  0021               	movlb	1	; select bank1
  9906  1D2F  1611               	bsf	17,4	;volatile
  9907                           
  9908                           ;UART.c: 217: }
  9909  1D30  2D33               	goto	l6330
  9910  1D31                     l417:	
  9911                           
  9912                           ;UART.c: 218: else
  9913                           ;UART.c: 219: {
  9914                           ;UART.c: 220: PIE1bits.TXIE = 0;
  9915  1D31  0021               	movlb	1	; select bank1
  9916  1D32  1211               	bcf	17,4	;volatile
  9917  1D33                     l6330:	
  9918                           
  9919                           ;UART.c: 221: }
  9920                           ;UART.c: 223: SPBRG = spbrg;
  9921  1D33  0024               	movlb	4	; select bank4
  9922  1D34  0820               	movf	OpenUSART@spbrg^(0+512),w
  9923  1D35  0023               	movlb	3	; select bank3
  9924  1D36  009B               	movwf	27	;volatile
  9925                           
  9926                           ;UART.c: 224: SPBRGH = spbrg >> 8;
  9927  1D37  0024               	movlb	4	; select bank4
  9928  1D38  0821               	movf	(OpenUSART@spbrg+1)^(0+512),w
  9929  1D39  0023               	movlb	3	; select bank3
  9930  1D3A  009C               	movwf	28	;volatile
  9931                           
  9932                           ;UART.c: 226: TX1STAbits.TXEN = 1;
  9933  1D3B  169E               	bsf	30,5	;volatile
  9934                           
  9935                           ;UART.c: 227: RC1STAbits.SPEN = 1;
  9936  1D3C  179D               	bsf	29,7	;volatile
  9937  1D3D  0008               	return
  9938  1D3E                     __end_of_OpenUSART:	
  9939                           
  9940                           	psect	text32
  9941  06F2                     __ptext32:	
  9942 ;; *************** function _CloseUSART *****************
  9943 ;; Defined at:
  9944 ;;		line 65 in file "UART.c"
  9945 ;; Parameters:    Size  Location     Type
  9946 ;;		None
  9947 ;; Auto vars:     Size  Location     Type
  9948 ;;		None
  9949 ;; Return value:  Size  Location     Type
  9950 ;;		None               void
  9951 ;; Registers used:
  9952 ;;		wreg, status,2, status,0
  9953 ;; Tracked objects:
  9954 ;;		On entry : 0/0
  9955 ;;		On exit  : 0/0
  9956 ;;		Unchanged: 0/0
  9957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9960 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9961 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9962 ;;Total ram usage:        1 bytes
  9963 ;; Hardware stack levels used:    1
  9964 ;; Hardware stack levels required when called:    7
  9965 ;; This function calls:
  9966 ;;		Nothing
  9967 ;; This function is called by:
  9968 ;;		_InitUART
  9969 ;; This function uses a non-reentrant model
  9970 ;;
  9971                           
  9972                           
  9973                           ;psect for function _CloseUSART
  9974  06F2                     _CloseUSART:	
  9975                           
  9976                           ;UART.c: 67: RCSTA&=0b01001111;
  9977                           
  9978                           ;incstack = 0
  9979                           ; Regs used in _CloseUSART: [wreg+status,2+status,0]
  9980  06F2  304F               	movlw	79
  9981  06F3  0024               	movlb	4	; select bank4
  9982  06F4  00A0               	movwf	??_CloseUSART^(0+512)
  9983  06F5  0820               	movf	??_CloseUSART^(0+512),w
  9984  06F6  0023               	movlb	3	; select bank3
  9985  06F7  059D               	andwf	29,f	;volatile
  9986                           
  9987                           ;UART.c: 68: TX1STAbits.TXEN=0;
  9988  06F8  129E               	bcf	30,5	;volatile
  9989                           
  9990                           ;UART.c: 69: PIE1&=0b11001111;
  9991  06F9  30CF               	movlw	207
  9992  06FA  0024               	movlb	4	; select bank4
  9993  06FB  00A0               	movwf	??_CloseUSART^(0+512)
  9994  06FC  0820               	movf	??_CloseUSART^(0+512),w
  9995  06FD  0021               	movlb	1	; select bank1
  9996  06FE  0591               	andwf	17,f	;volatile
  9997  06FF  0008               	return
  9998  0700                     __end_of_CloseUSART:	
  9999                           
 10000                           	psect	text33
 10001  19F0                     __ptext33:	
 10002 ;; *************** function _InitApp *****************
 10003 ;; Defined at:
 10004 ;;		line 62 in file "user.c"
 10005 ;; Parameters:    Size  Location     Type
 10006 ;;		None
 10007 ;; Auto vars:     Size  Location     Type
 10008 ;;		None
 10009 ;; Return value:  Size  Location     Type
 10010 ;;		None               void
 10011 ;; Registers used:
 10012 ;;		wreg, status,2
 10013 ;; Tracked objects:
 10014 ;;		On entry : 0/0
 10015 ;;		On exit  : 0/0
 10016 ;;		Unchanged: 0/0
 10017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10021 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10022 ;;Total ram usage:        0 bytes
 10023 ;; Hardware stack levels used:    1
 10024 ;; Hardware stack levels required when called:    7
 10025 ;; This function calls:
 10026 ;;		Nothing
 10027 ;; This function is called by:
 10028 ;;		_main
 10029 ;; This function uses a non-reentrant model
 10030 ;;
 10031                           
 10032                           
 10033                           ;psect for function _InitApp
 10034  19F0                     _InitApp:	
 10035                           
 10036                           ;user.c: 64: LATC =0;
 10037                           
 10038                           ;incstack = 0
 10039                           ; Regs used in _InitApp: [wreg+status,2]
 10040  19F0  0022               	movlb	2	; select bank2
 10041  19F1  018E               	clrf	14	;volatile
 10042                           
 10043                           ;user.c: 65: LATA =0;
 10044  19F2  018C               	clrf	12	;volatile
 10045                           
 10046                           ;user.c: 66: TRISCbits.TRISC2 = 0;
 10047  19F3  0021               	movlb	1	; select bank1
 10048  19F4  110E               	bcf	14,2	;volatile
 10049                           
 10050                           ;user.c: 67: TRISCbits.TRISC1 = 0;
 10051  19F5  108E               	bcf	14,1	;volatile
 10052                           
 10053                           ;user.c: 68: TRISCbits.TRISC3 = 0;
 10054  19F6  118E               	bcf	14,3	;volatile
 10055                           
 10056                           ;user.c: 69: TRISCbits.TRISC4 = 0;
 10057  19F7  120E               	bcf	14,4	;volatile
 10058                           
 10059                           ;user.c: 70: TRISAbits.TRISA2 = 1;
 10060  19F8  150C               	bsf	12,2	;volatile
 10061                           
 10062                           ;user.c: 74: TRISCbits.TRISC0 = 0;
 10063  19F9  100E               	bcf	14,0	;volatile
 10064                           
 10065                           ;user.c: 77: TRISCbits.TRISC5 = 1;
 10066  19FA  168E               	bsf	14,5	;volatile
 10067                           
 10068                           ;user.c: 80: LATC |= 0b00000010;
 10069  19FB  0022               	movlb	2	; select bank2
 10070  19FC  148E               	bsf	14,1	;volatile
 10071                           
 10072                           ;user.c: 81: PPSLOCK =0;
 10073  19FD  003C               	movlb	28	; select bank28
 10074  19FE  018F               	clrf	15	;volatile
 10075                           
 10076                           ;user.c: 82: RC2PPS = 0b00010100;
 10077  19FF  3014               	movlw	20
 10078  1A00  003D               	movlb	29	; select bank29
 10079  1A01  00A2               	movwf	34	;volatile
 10080                           
 10081                           ;user.c: 83: CKPPS = 0b00010010;
 10082  1A02  3012               	movlw	18
 10083  1A03  003C               	movlb	28	; select bank28
 10084  1A04  00A5               	movwf	37	;volatile
 10085                           
 10086                           ;user.c: 85: RXPPS = 0b00010101;
 10087  1A05  3015               	movlw	21
 10088  1A06  00A4               	movwf	36	;volatile
 10089                           
 10090                           ;user.c: 87: PPSLOCK =1;
 10091  1A07  3001               	movlw	1
 10092  1A08  008F               	movwf	15	;volatile
 10093                           
 10094                           ;user.c: 89: ANSELA &= ~0xFF;
 10095  1A09  0023               	movlb	3	; select bank3
 10096  1A0A  018C               	clrf	12	;volatile
 10097                           
 10098                           ;user.c: 90: ANSELA |= 0b00000100;
 10099  1A0B  150C               	bsf	12,2	;volatile
 10100                           
 10101                           ;user.c: 91: ANSELC &= ~0xFF;
 10102  1A0C  018E               	clrf	14	;volatile
 10103                           
 10104                           ;user.c: 92: OPTION_REGbits.nWPUEN = 0;
 10105  1A0D  0021               	movlb	1	; select bank1
 10106  1A0E  1395               	bcf	21,7	;volatile
 10107                           
 10108                           ;user.c: 93: WPUC = 0b00100000;
 10109  1A0F  3020               	movlw	32
 10110  1A10  0024               	movlb	4	; select bank4
 10111  1A11  008E               	movwf	14	;volatile
 10112                           
 10113                           ;user.c: 94: WPUA = 0;
 10114  1A12  018C               	clrf	12	;volatile
 10115  1A13  0008               	return
 10116  1A14                     __end_of_InitApp:	
 10117                           
 10118                           	psect	text34
 10119  1977                     __ptext34:	
 10120 ;; *************** function _ConfigureOscillator *****************
 10121 ;; Defined at:
 10122 ;;		line 40 in file "system.c"
 10123 ;; Parameters:    Size  Location     Type
 10124 ;;		None
 10125 ;; Auto vars:     Size  Location     Type
 10126 ;;		None
 10127 ;; Return value:  Size  Location     Type
 10128 ;;		None               void
 10129 ;; Registers used:
 10130 ;;		wreg, status,2, status,0
 10131 ;; Tracked objects:
 10132 ;;		On entry : 0/0
 10133 ;;		On exit  : 0/0
 10134 ;;		Unchanged: 0/0
 10135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10138 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
 10139 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
 10140 ;;Total ram usage:        1 bytes
 10141 ;; Hardware stack levels used:    1
 10142 ;; Hardware stack levels required when called:    7
 10143 ;; This function calls:
 10144 ;;		Nothing
 10145 ;; This function is called by:
 10146 ;;		_main
 10147 ;; This function uses a non-reentrant model
 10148 ;;
 10149                           
 10150                           
 10151                           ;psect for function _ConfigureOscillator
 10152  1977                     _ConfigureOscillator:	
 10153                           
 10154                           ;system.c: 42: OSCCON= 0b11110000;
 10155                           
 10156                           ;incstack = 0
 10157                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 10158  1977  30F0               	movlw	240
 10159  1978  0021               	movlb	1	; select bank1
 10160  1979  0099               	movwf	25	;volatile
 10161  197A                     l6812:	
 10162                           ;system.c: 43: while(!(OSCSTAT & HFIOFS));
 10163                           
 10164  197A  3000               	movlw	0
 10165  197B  181A               	btfsc	26,0	;volatile
 10166  197C  3001               	movlw	1
 10167  197D  051A               	andwf	26,w	;volatile
 10168  197E  1903               	btfsc	3,2
 10169  197F  297A               	goto	l6812
 10170  1980                     l6814:	
 10171                           ;system.c: 44: while(!(OSCSTAT & = 0b01000000));
 10172                           
 10173  1980  3040               	movlw	64
 10174  1981  0024               	movlb	4	; select bank4
 10175  1982  00A0               	movwf	??_ConfigureOscillator^(0+512)
 10176  1983  0820               	movf	??_ConfigureOscillator^(0+512),w
 10177  1984  0021               	movlb	1	; select bank1
 10178  1985  059A               	andwf	26,f	;volatile
 10179  1986  1D03               	btfss	3,2
 10180  1987  0008               	return
 10181  1988  2980               	goto	l6814
 10182  1989                     __end_of_ConfigureOscillator:	
 10183                           
 10184                           	psect	intentry
 10185  0004                     __pintentry:	
 10186 ;; *************** function _isr *****************
 10187 ;; Defined at:
 10188 ;;		line 73 in file "interrupts.c"
 10189 ;; Parameters:    Size  Location     Type
 10190 ;;		None
 10191 ;; Auto vars:     Size  Location     Type
 10192 ;;  ScanTemp        1   37[BANK1 ] unsigned char 
 10193 ;;  rx              1   36[BANK1 ] unsigned char 
 10194 ;;  Rx_Overun       1   35[BANK1 ] unsigned char 
 10195 ;;  Rx_fault        1   34[BANK1 ] unsigned char 
 10196 ;; Return value:  Size  Location     Type
 10197 ;;		None               void
 10198 ;; Registers used:
 10199 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10200 ;; Tracked objects:
 10201 ;;		On entry : 0/0
 10202 ;;		On exit  : 0/0
 10203 ;;		Unchanged: 0/0
 10204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10206 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 10207 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10208 ;;      Totals:         0       2       4       0       0       0       0       0       0       0       0       0       
      +0       0
 10209 ;;Total ram usage:        6 bytes
 10210 ;; Hardware stack levels used:    1
 10211 ;; Hardware stack levels required when called:    6
 10212 ;; This function calls:
 10213 ;;		_PS2RawToScan
 10214 ;;		_Process_PS2_ScanCode
 10215 ;;		_ResendLast
 10216 ;;		_Timer2OFF
 10217 ;;		_Timer2Reset
 10218 ;;		_UART_send_break_timed
 10219 ;;		i1_PS_2_DISABLE_INTERRUPT
 10220 ;;		i1_PS_2_ENABLE_INTERRUPT
 10221 ;;		i1_READ_PS_2_PIN
 10222 ;;		i1_ReadUSART
 10223 ;;		i1_Timer2ON
 10224 ;;		i1_UARTchar
 10225 ;; This function is called by:
 10226 ;;		Interrupt level 1
 10227 ;; This function uses a non-reentrant model
 10228 ;;
 10229                           
 10230  0004                     _isr:	
 10231                           
 10232                           ;incstack = 0
 10233                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10234  0004  3180               	pagesel	$
 10235  0005  0020               	movlb	0	; select bank0
 10236  0006  087F               	movf	127,w
 10237  0007  00EF               	movwf	??_isr+1
 10238                           
 10239                           ;interrupts.c: 75: unsigned char rx;
 10240                           ;interrupts.c: 76: unsigned char Rx_fault =0;
 10241  0008  0021               	movlb	1	; select bank1
 10242  0009  01C2               	clrf	isr@Rx_fault^(0+128)
 10243                           
 10244                           ;interrupts.c: 77: unsigned char Rx_Overun = 0;
 10245  000A  01C3               	clrf	isr@Rx_Overun^(0+128)
 10246                           
 10247                           ;interrupts.c: 78: unsigned char ScanTemp;
 10248                           ;interrupts.c: 80: if(IOCAF & 0b00100000)
 10249  000B  0027               	movlb	7	; select bank7
 10250  000C  1E93               	btfss	19,5	;volatile
 10251  000D  2873               	goto	i1l81
 10252                           
 10253                           ;interrupts.c: 81: {
 10254                           ;interrupts.c: 83: PS_2_DISABLE_INTERRUPT(0b00100000);
 10255  000E  3020               	movlw	32
 10256  000F  3199  2130  3180   	fcall	i1_PS_2_DISABLE_INTERRUPT
 10257                           
 10258                           ;interrupts.c: 84: PIE1bits.TMR2IE = 0;
 10259  0012  0021               	movlb	1	; select bank1
 10260  0013  1091               	bcf	17,1	;volatile
 10261                           
 10262                           ;interrupts.c: 85: PIE1bits.RCIE = 0;
 10263  0014  1291               	bcf	17,5	;volatile
 10264                           
 10265                           ;interrupts.c: 86: LATC |= 0b00010000;
 10266  0015  0022               	movlb	2	; select bank2
 10267  0016  160E               	bsf	14,4	;volatile
 10268                           
 10269                           ;interrupts.c: 87: PS_2_bits++;
 10270  0017  3001               	movlw	1
 10271  0018  0020               	movlb	0	; select bank0
 10272  0019  00EE               	movwf	??_isr
 10273  001A  086E               	movf	??_isr,w
 10274  001B  0021               	movlb	1	; select bank1
 10275  001C  07D4               	addwf	_PS_2_bits^(0+128),f
 10276                           
 10277                           ;interrupts.c: 88: PS_2_Read_Data_TEMP <<= 1;
 10278  001D  3001               	movlw	1
 10279  001E                     u743_25:	
 10280  001E  35CA               	lslf	_PS_2_Read_Data_TEMP^(0+128),f
 10281  001F  0DCB               	rlf	(_PS_2_Read_Data_TEMP+1)^(0+128),f
 10282  0020  0B89               	decfsz	9,f
 10283  0021  281E               	goto	u743_25
 10284                           
 10285                           ;interrupts.c: 89: __nop();
 10286  0022  0000               	nop
 10287                           
 10288                           ;interrupts.c: 90: if(READ_PS_2_PIN(0b00010000))
 10289  0023  3010               	movlw	16
 10290  0024  3199  2189  3180   	fcall	i1_READ_PS_2_PIN
 10291  0027  3A00               	xorlw	0
 10292  0028  1903               	skipnz
 10293  0029  282F               	goto	i1l5984
 10294                           
 10295                           ;interrupts.c: 91: {
 10296                           ;interrupts.c: 92: PS_2_Read_Data_TEMP++;
 10297  002A  3001               	movlw	1
 10298  002B  0021               	movlb	1	; select bank1
 10299  002C  07CA               	addwf	_PS_2_Read_Data_TEMP^(0+128),f
 10300  002D  3000               	movlw	0
 10301  002E  3DCB               	addwfc	(_PS_2_Read_Data_TEMP+1)^(0+128),f
 10302  002F                     i1l5984:	
 10303                           
 10304                           ;interrupts.c: 93: }
 10305                           ;interrupts.c: 94: if(PS_2_bits == 11)
 10306  002F  300B               	movlw	11
 10307  0030  0021               	movlb	1	; select bank1
 10308  0031  0654               	xorwf	_PS_2_bits^(0+128),w
 10309  0032  1D03               	btfss	3,2
 10310  0033  285E               	goto	i1l5998
 10311                           
 10312                           ;interrupts.c: 95: {
 10313                           ;interrupts.c: 96: if(PS_2_Buffer_items < 12)
 10314  0034  300C               	movlw	12
 10315  0035  0253               	subwf	_PS_2_Buffer_items^(0+128),w
 10316  0036  1803               	skipnc
 10317  0037  285B               	goto	i1l5996
 10318                           
 10319                           ;interrupts.c: 97: {
 10320                           ;interrupts.c: 98: ScanTemp = (unsigned char) PS2RawToScan(PS_2_Read_Data_TEMP);
 10321  0038  084B               	movf	(_PS_2_Read_Data_TEMP+1)^(0+128),w
 10322  0039  00F9               	movwf	PS2RawToScan@Raw+1
 10323  003A  084A               	movf	_PS_2_Read_Data_TEMP^(0+128),w
 10324  003B  00F8               	movwf	PS2RawToScan@Raw
 10325  003C  319E  2668  3180   	fcall	_PS2RawToScan
 10326  003F  0878               	movf	?_PS2RawToScan,w
 10327  0040  0020               	movlb	0	; select bank0
 10328  0041  00EE               	movwf	??_isr
 10329  0042  086E               	movf	??_isr,w
 10330  0043  0021               	movlb	1	; select bank1
 10331  0044  00C5               	movwf	isr@ScanTemp^(0+128)
 10332                           
 10333                           ;interrupts.c: 99: if(ScanTemp)
 10334  0045  0845               	movf	isr@ScanTemp^(0+128),w
 10335  0046  1903               	btfsc	3,2
 10336  0047  2859               	goto	i1l85
 10337                           
 10338                           ;interrupts.c: 100: {
 10339                           ;interrupts.c: 102: PS_2_ScanCodes[PS_2_Buffer_items] = ScanTemp;
 10340  0048  0845               	movf	isr@ScanTemp^(0+128),w
 10341  0049  0020               	movlb	0	; select bank0
 10342  004A  00EE               	movwf	??_isr
 10343  004B  0021               	movlb	1	; select bank1
 10344  004C  0853               	movf	_PS_2_Buffer_items^(0+128),w
 10345  004D  3ED9               	addlw	(low (_PS_2_ScanCodes| 0))& (0+255)
 10346  004E  0086               	movwf	6
 10347  004F  0187               	clrf	7
 10348  0050  0020               	movlb	0	; select bank0
 10349  0051  086E               	movf	??_isr,w
 10350  0052  0081               	movwf	1
 10351                           
 10352                           ;interrupts.c: 103: PS_2_Buffer_items++;
 10353  0053  3001               	movlw	1
 10354  0054  00EE               	movwf	??_isr
 10355  0055  086E               	movf	??_isr,w
 10356  0056  0021               	movlb	1	; select bank1
 10357  0057  07D3               	addwf	_PS_2_Buffer_items^(0+128),f
 10358                           
 10359                           ;interrupts.c: 104: }
 10360  0058  285B               	goto	i1l5996
 10361  0059                     i1l85:	
 10362                           
 10363                           ;interrupts.c: 105: else
 10364                           ;interrupts.c: 106: {
 10365                           ;interrupts.c: 108: ResendLastFlag = 1;
 10366  0059  01D6               	clrf	_ResendLastFlag^(0+128)
 10367  005A  0AD6               	incf	_ResendLastFlag^(0+128),f
 10368  005B                     i1l5996:	
 10369                           
 10370                           ;interrupts.c: 109: }
 10371                           ;interrupts.c: 111: }
 10372                           ;interrupts.c: 112: PS_2_bits = 0;
 10373  005B  01D4               	clrf	_PS_2_bits^(0+128)
 10374                           
 10375                           ;interrupts.c: 113: PS_2_Read_Data_TEMP = 0;
 10376  005C  01CA               	clrf	_PS_2_Read_Data_TEMP^(0+128)
 10377  005D  01CB               	clrf	(_PS_2_Read_Data_TEMP+1)^(0+128)
 10378  005E                     i1l5998:	
 10379                           
 10380                           ;interrupts.c: 114: }
 10381                           ;interrupts.c: 115: Timer2Reset();
 10382  005E  3198  2069  3180   	fcall	_Timer2Reset
 10383                           
 10384                           ;interrupts.c: 116: PIR1bits.TMR2IF = 0;
 10385  0061  0020               	movlb	0	; select bank0
 10386  0062  1091               	bcf	17,1	;volatile
 10387                           
 10388                           ;interrupts.c: 117: PIE1bits.TMR2IE = 1;
 10389  0063  0021               	movlb	1	; select bank1
 10390  0064  1491               	bsf	17,1	;volatile
 10391                           
 10392                           ;interrupts.c: 118: Timer2ON();
 10393  0065  3198  206C  3180   	fcall	i1_Timer2ON
 10394                           
 10395                           ;interrupts.c: 119: IOCAF &= ~0b00100000;
 10396  0068  30DF               	movlw	223
 10397  0069  0020               	movlb	0	; select bank0
 10398  006A  00EE               	movwf	??_isr
 10399  006B  086E               	movf	??_isr,w
 10400  006C  0027               	movlb	7	; select bank7
 10401  006D  0593               	andwf	19,f	;volatile
 10402                           
 10403                           ;interrupts.c: 120: PS_2_ENABLE_INTERRUPT(0b00100000);
 10404  006E  3020               	movlw	32
 10405  006F  3198  20DB  3180   	fcall	i1_PS_2_ENABLE_INTERRUPT
 10406                           
 10407                           ;interrupts.c: 121: }
 10408  0072  28E9               	goto	i1l101
 10409  0073                     i1l81:	
 10410                           
 10411                           ;interrupts.c: 122: else if (IOCAF & 0b00010000)
 10412  0073  1E13               	btfss	19,4	;volatile
 10413  0074  2880               	goto	i1l88
 10414                           
 10415                           ;interrupts.c: 123: {
 10416                           ;interrupts.c: 124: PS_2_DISABLE_INTERRUPT(0b00010000);
 10417  0075  3010               	movlw	16
 10418  0076  3199  2130  3180   	fcall	i1_PS_2_DISABLE_INTERRUPT
 10419                           
 10420                           ;interrupts.c: 125: IOCAF &= ~0b00010000;
 10421  0079  30EF               	movlw	239
 10422  007A  0020               	movlb	0	; select bank0
 10423  007B  00EE               	movwf	??_isr
 10424  007C  086E               	movf	??_isr,w
 10425  007D  0027               	movlb	7	; select bank7
 10426  007E  0593               	andwf	19,f	;volatile
 10427                           
 10428                           ;interrupts.c: 126: }
 10429  007F  28E9               	goto	i1l101
 10430  0080                     i1l88:	
 10431                           
 10432                           ;interrupts.c: 127: else if (PIR1bits.RCIF)
 10433  0080  0020               	movlb	0	; select bank0
 10434  0081  1E91               	btfss	17,5	;volatile
 10435  0082  28C7               	goto	i1l90
 10436                           
 10437                           ;interrupts.c: 128: {
 10438                           ;interrupts.c: 130: PIE1bits.RCIE = 0;
 10439  0083  0021               	movlb	1	; select bank1
 10440  0084  1291               	bcf	17,5	;volatile
 10441                           
 10442                           ;interrupts.c: 132: LATC |= 0b00001000;
 10443  0085  0022               	movlb	2	; select bank2
 10444  0086  158E               	bsf	14,3	;volatile
 10445                           
 10446                           ;interrupts.c: 133: SinLEDtimer = 0;
 10447  0087  0024               	movlb	4	; select bank4
 10448  0088  01DA               	clrf	_SinLEDtimer^(0+512)
 10449  0089  01DB               	clrf	(_SinLEDtimer+1)^(0+512)
 10450                           
 10451                           ;interrupts.c: 134: Rx_fault = 0;
 10452  008A  0021               	movlb	1	; select bank1
 10453  008B  01C2               	clrf	isr@Rx_fault^(0+128)
 10454                           
 10455                           ;interrupts.c: 135: Rx_Overun = 0;
 10456  008C  01C3               	clrf	isr@Rx_Overun^(0+128)
 10457                           
 10458                           ;interrupts.c: 137: if(RC1STAbits.OERR)
 10459  008D  0023               	movlb	3	; select bank3
 10460  008E  1C9D               	btfss	29,1	;volatile
 10461  008F  2894               	goto	i1l91
 10462                           
 10463                           ;interrupts.c: 138: {
 10464                           ;interrupts.c: 139: RC1STAbits.CREN = 0;
 10465  0090  121D               	bcf	29,4	;volatile
 10466                           
 10467                           ;interrupts.c: 140: Rx_Overun = 1;
 10468  0091  0021               	movlb	1	; select bank1
 10469  0092  01C3               	clrf	isr@Rx_Overun^(0+128)
 10470  0093  0AC3               	incf	isr@Rx_Overun^(0+128),f
 10471  0094                     i1l91:	
 10472                           
 10473                           ;interrupts.c: 141: }
 10474                           ;interrupts.c: 143: if(RC1STAbits.FERR)
 10475  0094  0023               	movlb	3	; select bank3
 10476  0095  1D1D               	btfss	29,2	;volatile
 10477  0096  289A               	goto	i1l6024
 10478                           
 10479                           ;interrupts.c: 144: {
 10480                           ;interrupts.c: 145: Rx_fault = 1;
 10481  0097  0021               	movlb	1	; select bank1
 10482  0098  01C2               	clrf	isr@Rx_fault^(0+128)
 10483  0099  0AC2               	incf	isr@Rx_fault^(0+128),f
 10484  009A                     i1l6024:	
 10485                           
 10486                           ;interrupts.c: 146: }
 10487                           ;interrupts.c: 147: rx = ReadUSART();
 10488  009A  3198  20A0  3180   	fcall	i1_ReadUSART
 10489  009D  0020               	movlb	0	; select bank0
 10490  009E  00EE               	movwf	??_isr
 10491  009F  086E               	movf	??_isr,w
 10492  00A0  0021               	movlb	1	; select bank1
 10493  00A1  00C4               	movwf	isr@rx^(0+128)
 10494                           
 10495                           ;interrupts.c: 148: if(Rx_Overun)
 10496  00A2  0843               	movf	isr@Rx_Overun^(0+128),w
 10497  00A3  1903               	btfsc	3,2
 10498  00A4  28A7               	goto	i1l6030
 10499                           
 10500                           ;interrupts.c: 149: {
 10501                           ;interrupts.c: 150: RC1STAbits.CREN = 1;
 10502  00A5  0023               	movlb	3	; select bank3
 10503  00A6  161D               	bsf	29,4	;volatile
 10504  00A7                     i1l6030:	
 10505                           
 10506                           ;interrupts.c: 151: }
 10507                           ;interrupts.c: 169: if(Rx_fault == 1)
 10508  00A7  0021               	movlb	1	; select bank1
 10509  00A8  0342               	decf	isr@Rx_fault^(0+128),w
 10510  00A9  1D03               	btfss	3,2
 10511  00AA  28B6               	goto	i1l6036
 10512                           
 10513                           ;interrupts.c: 170: {
 10514                           ;interrupts.c: 171: if(rx == 0)
 10515  00AB  0844               	movf	isr@rx^(0+128),w
 10516  00AC  1D03               	btfss	3,2
 10517  00AD  28C2               	goto	i1l6038
 10518                           
 10519                           ;interrupts.c: 172: {
 10520                           ;interrupts.c: 174: UART_send_break_timed(100000);
 10521  00AE  30A0               	movlw	160
 10522  00AF  00FA               	movwf	UART_send_break_timed@US
 10523  00B0  3086               	movlw	134
 10524  00B1  00FB               	movwf	UART_send_break_timed@US+1
 10525  00B2  3190  2000  3180   	fcall	_UART_send_break_timed
 10526                           
 10527                           ;interrupts.c: 175: }
 10528                           ;interrupts.c: 176: }
 10529  00B5  28C2               	goto	i1l6038
 10530  00B6                     i1l6036:	
 10531                           
 10532                           ;interrupts.c: 177: else
 10533                           ;interrupts.c: 178: {
 10534                           ;interrupts.c: 179: UARTchar(rx, 1 ,RC1STAbits.RX9D);
 10535  00B6  01F8               	clrf	i1UARTchar@override
 10536  00B7  0AF8               	incf	i1UARTchar@override,f
 10537  00B8  3000               	movlw	0
 10538  00B9  0023               	movlb	3	; select bank3
 10539  00BA  181D               	btfsc	29,0	;volatile
 10540  00BB  3001               	movlw	1
 10541  00BC  00F9               	movwf	i1UARTchar@NinethBit_override_data
 10542  00BD  0021               	movlb	1	; select bank1
 10543  00BE  0844               	movf	isr@rx^(0+128),w
 10544  00BF  319D  25CE  3180   	fcall	i1_UARTchar
 10545  00C2                     i1l6038:	
 10546                           
 10547                           ;interrupts.c: 180: }
 10548                           ;interrupts.c: 183: PIR1bits.RCIF = 0;
 10549  00C2  0020               	movlb	0	; select bank0
 10550  00C3  1291               	bcf	17,5	;volatile
 10551                           
 10552                           ;interrupts.c: 184: PIE1bits.RCIE = 1;
 10553  00C4  0021               	movlb	1	; select bank1
 10554  00C5  1691               	bsf	17,5	;volatile
 10555                           
 10556                           ;interrupts.c: 185: }
 10557  00C6  28E9               	goto	i1l101
 10558  00C7                     i1l90:	
 10559                           
 10560                           ;interrupts.c: 186: else if(PIR1bits.TMR2IF)
 10561  00C7  1C91               	btfss	17,1	;volatile
 10562  00C8  28E9               	goto	i1l101
 10563                           
 10564                           ;interrupts.c: 187: {
 10565                           ;interrupts.c: 189: PIE1bits.TMR2IE = 0;
 10566  00C9  0021               	movlb	1	; select bank1
 10567  00CA  1091               	bcf	17,1	;volatile
 10568                           
 10569                           ;interrupts.c: 190: Timer2OFF();
 10570  00CB  3198  2066  3180   	fcall	_Timer2OFF
 10571                           
 10572                           ;interrupts.c: 191: PS_2_DISABLE_INTERRUPT(0b00100000);
 10573  00CE  3020               	movlw	32
 10574  00CF  3199  2130  3180   	fcall	i1_PS_2_DISABLE_INTERRUPT
 10575                           
 10576                           ;interrupts.c: 192: PS_2_bits = 0;
 10577  00D2  0021               	movlb	1	; select bank1
 10578  00D3  01D4               	clrf	_PS_2_bits^(0+128)
 10579                           
 10580                           ;interrupts.c: 193: PS_2_Read_Data_TEMP = 0;
 10581  00D4  01CA               	clrf	_PS_2_Read_Data_TEMP^(0+128)
 10582  00D5  01CB               	clrf	(_PS_2_Read_Data_TEMP+1)^(0+128)
 10583                           
 10584                           ;interrupts.c: 194: if(ResendLastFlag)
 10585  00D6  0856               	movf	_ResendLastFlag^(0+128),w
 10586  00D7  1903               	btfsc	3,2
 10587  00D8  28DF               	goto	i1l6058
 10588                           
 10589                           ;interrupts.c: 195: {
 10590                           ;interrupts.c: 197: ResendLast();
 10591  00D9  3198  2098  3180   	fcall	_ResendLast
 10592                           
 10593                           ;interrupts.c: 198: ResendLastFlag = 0;
 10594  00DC  0021               	movlb	1	; select bank1
 10595  00DD  01D6               	clrf	_ResendLastFlag^(0+128)
 10596                           
 10597                           ;interrupts.c: 199: }
 10598  00DE  28E2               	goto	i1l6060
 10599  00DF                     i1l6058:	
 10600                           
 10601                           ;interrupts.c: 200: else
 10602                           ;interrupts.c: 201: {
 10603                           ;interrupts.c: 202: Process_PS2_ScanCode();
 10604  00DF  3181  2121  3180   	fcall	_Process_PS2_ScanCode
 10605  00E2                     i1l6060:	
 10606                           
 10607                           ;interrupts.c: 203: }
 10608                           ;interrupts.c: 205: PIE1bits.RCIE = 1;
 10609  00E2  0021               	movlb	1	; select bank1
 10610  00E3  1691               	bsf	17,5	;volatile
 10611                           
 10612                           ;interrupts.c: 207: PS_2_ENABLE_INTERRUPT(0b00100000);
 10613  00E4  3020               	movlw	32
 10614  00E5  3198  20DB         	fcall	i1_PS_2_ENABLE_INTERRUPT
 10615                           
 10616                           ;interrupts.c: 208: PIR1bits.TMR2IF =0;
 10617  00E7  0020               	movlb	0	; select bank0
 10618  00E8  1091               	bcf	17,1	;volatile
 10619  00E9                     i1l101:	
 10620  00E9  0020               	movlb	0	; select bank0
 10621  00EA  086F               	movf	??_isr+1,w
 10622  00EB  00FF               	movwf	127
 10623  00EC  0009               	retfie
 10624  00ED                     __end_of_isr:	
 10625                           
 10626                           	psect	text36
 10627  186C                     __ptext36:	
 10628 ;; *************** function i1_Timer2ON *****************
 10629 ;; Defined at:
 10630 ;;		line 59 in file "Timer.c"
 10631 ;; Parameters:    Size  Location     Type
 10632 ;;		None
 10633 ;; Auto vars:     Size  Location     Type
 10634 ;;		None
 10635 ;; Return value:  Size  Location     Type
 10636 ;;		None               void
 10637 ;; Registers used:
 10638 ;;		None
 10639 ;; Tracked objects:
 10640 ;;		On entry : 0/0
 10641 ;;		On exit  : 0/0
 10642 ;;		Unchanged: 0/0
 10643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10647 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10648 ;;Total ram usage:        0 bytes
 10649 ;; Hardware stack levels used:    1
 10650 ;; This function calls:
 10651 ;;		Nothing
 10652 ;; This function is called by:
 10653 ;;		_isr
 10654 ;; This function uses a non-reentrant model
 10655 ;;
 10656                           
 10657                           
 10658                           ;psect for function i1_Timer2ON
 10659  186C                     i1_Timer2ON:	
 10660                           
 10661                           ;Timer.c: 61: T2CONbits.TMR2ON = 1;
 10662                           
 10663                           ;incstack = 0
 10664                           ; Regs used in i1_Timer2ON: []
 10665  186C  0020               	movlb	0	; select bank0
 10666  186D  151C               	bsf	28,2	;volatile
 10667  186E  0008               	return
 10668  186F                     __end_ofi1_Timer2ON:	
 10669                           
 10670                           	psect	text37
 10671  18DB                     __ptext37:	
 10672 ;; *************** function i1_PS_2_ENABLE_INTERRUPT *****************
 10673 ;; Defined at:
 10674 ;;		line 199 in file "PS_2.c"
 10675 ;; Parameters:    Size  Location     Type
 10676 ;;  DATA_CLK        1    wreg     unsigned char 
 10677 ;; Auto vars:     Size  Location     Type
 10678 ;;  DATA_CLK        1    0[COMMON] unsigned char 
 10679 ;; Return value:  Size  Location     Type
 10680 ;;		None               void
 10681 ;; Registers used:
 10682 ;;		wreg, status,2, status,0
 10683 ;; Tracked objects:
 10684 ;;		On entry : 0/0
 10685 ;;		On exit  : 0/0
 10686 ;;		Unchanged: 0/0
 10687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10689 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10691 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10692 ;;Total ram usage:        1 bytes
 10693 ;; Hardware stack levels used:    1
 10694 ;; This function calls:
 10695 ;;		Nothing
 10696 ;; This function is called by:
 10697 ;;		_isr
 10698 ;; This function uses a non-reentrant model
 10699 ;;
 10700                           
 10701                           
 10702                           ;psect for function i1_PS_2_ENABLE_INTERRUPT
 10703  18DB                     i1_PS_2_ENABLE_INTERRUPT:	
 10704                           
 10705                           ;incstack = 0
 10706                           ; Regs used in i1_PS_2_ENABLE_INTERRUPT: [wreg+status,2+status,0]
 10707                           ;i1PS_2_ENABLE_INTERRUPT@DATA_CLK stored from wreg
 10708  18DB  00F0               	movwf	i1PS_2_ENABLE_INTERRUPT@DATA_CLK
 10709                           
 10710                           ;PS_2.c: 201: if(DATA_CLK == 0b00100000)
 10711  18DC  3020               	movlw	32
 10712  18DD  0670               	xorwf	i1PS_2_ENABLE_INTERRUPT@DATA_CLK,w
 10713  18DE  1D03               	btfss	3,2
 10714  18DF  28E3               	goto	i1l634
 10715                           
 10716                           ;PS_2.c: 202: {
 10717                           ;PS_2.c: 205: IOCAN |= 0b00100000;
 10718  18E0  0027               	movlb	7	; select bank7
 10719  18E1  1692               	bsf	18,5	;volatile
 10720                           
 10721                           ;PS_2.c: 207: }
 10722  18E2  0008               	return
 10723  18E3                     i1l634:	
 10724                           
 10725                           ;PS_2.c: 208: else
 10726                           ;PS_2.c: 209: {
 10727                           ;PS_2.c: 212: IOCAN |= 0b00010000;
 10728  18E3  0027               	movlb	7	; select bank7
 10729  18E4  1612               	bsf	18,4	;volatile
 10730  18E5  0008               	return
 10731  18E6                     __end_ofi1_PS_2_ENABLE_INTERRUPT:	
 10732                           
 10733                           	psect	text38
 10734  1869                     __ptext38:	
 10735 ;; *************** function _Timer2Reset *****************
 10736 ;; Defined at:
 10737 ;;		line 81 in file "Timer.c"
 10738 ;; Parameters:    Size  Location     Type
 10739 ;;		None
 10740 ;; Auto vars:     Size  Location     Type
 10741 ;;		None
 10742 ;; Return value:  Size  Location     Type
 10743 ;;		None               void
 10744 ;; Registers used:
 10745 ;;		status,2
 10746 ;; Tracked objects:
 10747 ;;		On entry : 0/0
 10748 ;;		On exit  : 0/0
 10749 ;;		Unchanged: 0/0
 10750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10754 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10755 ;;Total ram usage:        0 bytes
 10756 ;; Hardware stack levels used:    1
 10757 ;; This function calls:
 10758 ;;		Nothing
 10759 ;; This function is called by:
 10760 ;;		_isr
 10761 ;; This function uses a non-reentrant model
 10762 ;;
 10763                           
 10764                           
 10765                           ;psect for function _Timer2Reset
 10766  1869                     _Timer2Reset:	
 10767                           
 10768                           ;Timer.c: 83: TMR2 = 0;
 10769                           
 10770                           ;incstack = 0
 10771                           ; Regs used in _Timer2Reset: [status,2]
 10772  1869  0020               	movlb	0	; select bank0
 10773  186A  019A               	clrf	26	;volatile
 10774  186B  0008               	return
 10775  186C                     __end_of_Timer2Reset:	
 10776                           
 10777                           	psect	text39
 10778  1866                     __ptext39:	
 10779 ;; *************** function _Timer2OFF *****************
 10780 ;; Defined at:
 10781 ;;		line 70 in file "Timer.c"
 10782 ;; Parameters:    Size  Location     Type
 10783 ;;		None
 10784 ;; Auto vars:     Size  Location     Type
 10785 ;;		None
 10786 ;; Return value:  Size  Location     Type
 10787 ;;		None               void
 10788 ;; Registers used:
 10789 ;;		None
 10790 ;; Tracked objects:
 10791 ;;		On entry : 0/0
 10792 ;;		On exit  : 0/0
 10793 ;;		Unchanged: 0/0
 10794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10798 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10799 ;;Total ram usage:        0 bytes
 10800 ;; Hardware stack levels used:    1
 10801 ;; This function calls:
 10802 ;;		Nothing
 10803 ;; This function is called by:
 10804 ;;		_isr
 10805 ;; This function uses a non-reentrant model
 10806 ;;
 10807                           
 10808                           
 10809                           ;psect for function _Timer2OFF
 10810  1866                     _Timer2OFF:	
 10811                           
 10812                           ;Timer.c: 72: T2CONbits.TMR2ON = 0;
 10813                           
 10814                           ;incstack = 0
 10815                           ; Regs used in _Timer2OFF: []
 10816  1866  0020               	movlb	0	; select bank0
 10817  1867  111C               	bcf	28,2	;volatile
 10818  1868  0008               	return
 10819  1869                     __end_of_Timer2OFF:	
 10820                           
 10821                           	psect	text40
 10822  1898                     __ptext40:	
 10823 ;; *************** function _ResendLast *****************
 10824 ;; Defined at:
 10825 ;;		line 1006 in file "PS_2.c"
 10826 ;; Parameters:    Size  Location     Type
 10827 ;;		None
 10828 ;; Auto vars:     Size  Location     Type
 10829 ;;		None
 10830 ;; Return value:  Size  Location     Type
 10831 ;;		None               void
 10832 ;; Registers used:
 10833 ;;		wreg, status,2, status,0, pclath, cstack
 10834 ;; Tracked objects:
 10835 ;;		On entry : 0/0
 10836 ;;		On exit  : 0/0
 10837 ;;		Unchanged: 0/0
 10838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10842 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10843 ;;Total ram usage:        0 bytes
 10844 ;; Hardware stack levels used:    1
 10845 ;; Hardware stack levels required when called:    2
 10846 ;; This function calls:
 10847 ;;		i1_PS_2_DISABLE_INTERRUPT
 10848 ;;		i1_Send_PS2
 10849 ;; This function is called by:
 10850 ;;		_isr
 10851 ;; This function uses a non-reentrant model
 10852 ;;
 10853                           
 10854                           
 10855                           ;psect for function _ResendLast
 10856  1898                     _ResendLast:	
 10857                           
 10858                           ;PS_2.c: 1008: PS_2_DISABLE_INTERRUPT(0b00100000);
 10859                           
 10860                           ;incstack = 0
 10861                           ; Regs used in _ResendLast: [wreg+status,2+status,0+pclath+cstack]
 10862  1898  3020               	movlw	32
 10863  1899  3199  2130  3198   	fcall	i1_PS_2_DISABLE_INTERRUPT
 10864                           
 10865                           ;PS_2.c: 1010: Send_PS2(0xFE);
 10866  189C  30FE               	movlw	254
 10867  189D  318C  24DE         	fcall	i1_Send_PS2
 10868  189F  0008               	return
 10869  18A0                     __end_of_ResendLast:	
 10870                           
 10871                           	psect	text41
 10872  1930                     __ptext41:	
 10873 ;; *************** function i1_PS_2_DISABLE_INTERRUPT *****************
 10874 ;; Defined at:
 10875 ;;		line 178 in file "PS_2.c"
 10876 ;; Parameters:    Size  Location     Type
 10877 ;;  DATA_CLK        1    wreg     unsigned char 
 10878 ;; Auto vars:     Size  Location     Type
 10879 ;;  DATA_CLK        1    1[COMMON] unsigned char 
 10880 ;; Return value:  Size  Location     Type
 10881 ;;		None               void
 10882 ;; Registers used:
 10883 ;;		wreg, status,2, status,0
 10884 ;; Tracked objects:
 10885 ;;		On entry : 0/0
 10886 ;;		On exit  : 0/0
 10887 ;;		Unchanged: 0/0
 10888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10890 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10891 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10892 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10893 ;;Total ram usage:        2 bytes
 10894 ;; Hardware stack levels used:    1
 10895 ;; This function calls:
 10896 ;;		Nothing
 10897 ;; This function is called by:
 10898 ;;		_isr
 10899 ;;		_ResendLast
 10900 ;; This function uses a non-reentrant model
 10901 ;;
 10902                           
 10903                           
 10904                           ;psect for function i1_PS_2_DISABLE_INTERRUPT
 10905  1930                     i1_PS_2_DISABLE_INTERRUPT:	
 10906                           
 10907                           ;incstack = 0
 10908                           ; Regs used in i1_PS_2_DISABLE_INTERRUPT: [wreg+status,2+status,0]
 10909                           ;i1PS_2_DISABLE_INTERRUPT@DATA_CLK stored from wreg
 10910  1930  00F1               	movwf	i1PS_2_DISABLE_INTERRUPT@DATA_CLK
 10911                           
 10912                           ;PS_2.c: 180: if(DATA_CLK == 0b00100000)
 10913  1931  3020               	movlw	32
 10914  1932  0671               	xorwf	i1PS_2_DISABLE_INTERRUPT@DATA_CLK,w
 10915  1933  1D03               	btfss	3,2
 10916  1934  293B               	goto	i1l5124
 10917                           
 10918                           ;PS_2.c: 181: {
 10919                           ;PS_2.c: 184: IOCAN &= ~0b00100000;
 10920  1935  30DF               	movlw	223
 10921  1936  00F0               	movwf	??i1_PS_2_DISABLE_INTERRUPT
 10922  1937  0870               	movf	??i1_PS_2_DISABLE_INTERRUPT,w
 10923  1938  0027               	movlb	7	; select bank7
 10924  1939  0592               	andwf	18,f	;volatile
 10925                           
 10926                           ;PS_2.c: 185: }
 10927  193A  0008               	return
 10928  193B                     i1l5124:	
 10929                           
 10930                           ;PS_2.c: 186: else
 10931                           ;PS_2.c: 187: {
 10932                           ;PS_2.c: 190: IOCAN &= ~0b00010000;
 10933  193B  30EF               	movlw	239
 10934  193C  00F0               	movwf	??i1_PS_2_DISABLE_INTERRUPT
 10935  193D  0870               	movf	??i1_PS_2_DISABLE_INTERRUPT,w
 10936  193E  0027               	movlb	7	; select bank7
 10937  193F  0592               	andwf	18,f	;volatile
 10938  1940  0008               	return
 10939  1941                     __end_ofi1_PS_2_DISABLE_INTERRUPT:	
 10940                           
 10941                           	psect	text42
 10942  0121                     __ptext42:	
 10943 ;; *************** function _Process_PS2_ScanCode *****************
 10944 ;; Defined at:
 10945 ;;		line 257 in file "PS_2.c"
 10946 ;; Parameters:    Size  Location     Type
 10947 ;;		None
 10948 ;; Auto vars:     Size  Location     Type
 10949 ;;  buf            60    0[BANK3 ] unsigned char [60]
 10950 ;;  temp            1   65[BANK3 ] unsigned char 
 10951 ;;  shortbreak      1   64[BANK3 ] unsigned char 
 10952 ;; Return value:  Size  Location     Type
 10953 ;;		None               void
 10954 ;; Registers used:
 10955 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10956 ;; Tracked objects:
 10957 ;;		On entry : 0/0
 10958 ;;		On exit  : 0/0
 10959 ;;		Unchanged: 0/0
 10960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10962 ;;      Locals:         0       0       0       0      66       0       0       0       0       0       0       0       
      +0       0
 10963 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 10964 ;;      Totals:         0       0       6       0      66       0       0       0       0       0       0       0       
      +0       0
 10965 ;;Total ram usage:       72 bytes
 10966 ;; Hardware stack levels used:    1
 10967 ;; Hardware stack levels required when called:    5
 10968 ;; This function calls:
 10969 ;;		_BufferShiftBack
 10970 ;;		_Decode_Scan_Code
 10971 ;;		_Decode_Scan_Code_Function
 10972 ;;		_Decode_Scan_Code_FunctionE0
 10973 ;;		_Decode_Scan_Code_Shift
 10974 ;;		_ISNUMBER
 10975 ;;		_SetBaud
 10976 ;;		_UART_send_break
 10977 ;;		_UART_send_break_timed
 10978 ;;		___lmul
 10979 ;;		_cleanBuffer
 10980 ;;		_sprintf
 10981 ;;		i1_Send_PS2
 10982 ;;		i1_UARTchar
 10983 ;;		i1_UARTstringWAIT
 10984 ;;		i1_delayUS
 10985 ;; This function is called by:
 10986 ;;		_isr
 10987 ;; This function uses a non-reentrant model
 10988 ;;
 10989                           
 10990                           
 10991                           ;psect for function _Process_PS2_ScanCode
 10992  0121                     _Process_PS2_ScanCode:	
 10993                           
 10994                           ;PS_2.c: 259: unsigned char temp = 0;
 10995                           
 10996                           ;incstack = 0
 10997                           ; Regs used in _Process_PS2_ScanCode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10998  0121  0023               	movlb	3	; select bank3
 10999  0122  01E1               	clrf	Process_PS2_ScanCode@temp^(0+384)
 11000                           
 11001                           ;PS_2.c: 260: unsigned char shortbreak = 0;
 11002  0123  01E0               	clrf	Process_PS2_ScanCode@shortbreak^(0+384)
 11003                           
 11004                           ;PS_2.c: 261: unsigned char buf[60];
 11005                           ;PS_2.c: 263: if(PS_2_Buffer_items != 0)
 11006  0124  0021               	movlb	1	; select bank1
 11007  0125  0853               	movf	_PS_2_Buffer_items^(0+128),w
 11008  0126  1903               	btfsc	3,2
 11009  0127  0008               	return
 11010  0128                     i1l5808:	
 11011  0128  0021               	movlb	1	; select bank1
 11012  0129  0853               	movf	_PS_2_Buffer_items^(0+128),w
 11013  012A  1903               	btfsc	3,2
 11014  012B  0008               	return
 11015                           
 11016                           ;PS_2.c: 267: {
 11017                           ;PS_2.c: 269: if(PS_2_ScanCodes[0])
 11018                           
 11019                           ;PS_2.c: 264: {
 11020                           ;PS_2.c: 266: while(PS_2_Buffer_items != 0)
 11021  012C  0859               	movf	_PS_2_ScanCodes^(0+128),w
 11022  012D  1903               	btfsc	3,2
 11023  012E  2E77               	goto	i1l5804
 11024                           
 11025                           ;PS_2.c: 270: {
 11026                           ;PS_2.c: 272: PS_2_Read_Data_First = PS_2_ScanCodes[0];
 11027  012F  0859               	movf	_PS_2_ScanCodes^(0+128),w
 11028  0130  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11029  0131  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11030  0132  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11031  0133  0023               	movlb	3	; select bank3
 11032  0134  00E2               	movwf	_PS_2_Read_Data_First^(0+384)
 11033  0135  0021               	movlb	1	; select bank1
 11034  0136  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11035  0137  0023               	movlb	3	; select bank3
 11036  0138  00E3               	movwf	(_PS_2_Read_Data_First+1)^(0+384)
 11037                           
 11038                           ;PS_2.c: 273: if(PS_2_Read_Data_First == 0xF0)
 11039  0139  30F0               	movlw	240
 11040  013A  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11041  013B  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11042  013C  1D03               	btfss	3,2
 11043  013D  2955               	goto	i1l5316
 11044                           
 11045                           ;PS_2.c: 274: {
 11046                           ;PS_2.c: 275: PS_2_Read_Data_First = PS_2_ScanCodes[0];
 11047  013E  0021               	movlb	1	; select bank1
 11048  013F  0859               	movf	_PS_2_ScanCodes^(0+128),w
 11049  0140  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11050  0141  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11051  0142  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11052  0143  0023               	movlb	3	; select bank3
 11053  0144  00E2               	movwf	_PS_2_Read_Data_First^(0+384)
 11054  0145  0021               	movlb	1	; select bank1
 11055  0146  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11056  0147  0023               	movlb	3	; select bank3
 11057  0148  00E3               	movwf	(_PS_2_Read_Data_First+1)^(0+384)
 11058                           
 11059                           ;PS_2.c: 276: PS_2_Read_Data_Second = PS_2_ScanCodes[1];
 11060  0149  0021               	movlb	1	; select bank1
 11061  014A  085A               	movf	(_PS_2_ScanCodes^(0+128)+1),w
 11062  014B  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11063  014C  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11064  014D  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11065  014E  0023               	movlb	3	; select bank3
 11066  014F  00E4               	movwf	_PS_2_Read_Data_Second^(0+384)
 11067  0150  0021               	movlb	1	; select bank1
 11068  0151  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11069  0152  0023               	movlb	3	; select bank3
 11070  0153  00E5               	movwf	(_PS_2_Read_Data_Second+1)^(0+384)
 11071  0154  29A4               	goto	i1l5344
 11072  0155                     i1l5316:	
 11073                           ;PS_2.c: 279: }
 11074                           
 11075                           ;PS_2.c: 278: BufferShiftBack(PS_2_ScanCodes,2,12);
 11076                           
 11077                           ;PS_2.c: 277: PS_2_Buffer_items -= 2;
 11078                           
 11079                           
 11080                           ;PS_2.c: 280: else if(PS_2_Read_Data_First == 0xE0)
 11081  0155  30E0               	movlw	224
 11082  0156  0023               	movlb	3	; select bank3
 11083  0157  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11084  0158  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11085  0159  1D03               	btfss	3,2
 11086  015A  29A9               	goto	i1l5348
 11087                           
 11088                           ;PS_2.c: 281: {
 11089                           ;PS_2.c: 282: PS_2_Read_Data_Second = PS_2_ScanCodes[1];
 11090  015B  0021               	movlb	1	; select bank1
 11091  015C  085A               	movf	(_PS_2_ScanCodes^(0+128)+1),w
 11092  015D  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11093  015E  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11094  015F  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11095  0160  0023               	movlb	3	; select bank3
 11096  0161  00E4               	movwf	_PS_2_Read_Data_Second^(0+384)
 11097  0162  0021               	movlb	1	; select bank1
 11098  0163  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11099  0164  0023               	movlb	3	; select bank3
 11100  0165  00E5               	movwf	(_PS_2_Read_Data_Second+1)^(0+384)
 11101                           
 11102                           ;PS_2.c: 283: if(PS_2_Read_Data_Second == 0x12)
 11103  0166  3012               	movlw	18
 11104  0167  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11105  0168  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11106  0169  1D03               	btfss	3,2
 11107  016A  297E               	goto	i1l5328
 11108                           
 11109                           ;PS_2.c: 284: {
 11110                           ;PS_2.c: 286: PS_2_Read_Data_First = 0;
 11111  016B  01E2               	clrf	_PS_2_Read_Data_First^(0+384)
 11112  016C  01E3               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
 11113                           
 11114                           ;PS_2.c: 287: PS_2_Read_Data_Second = 0;
 11115  016D  01E4               	clrf	_PS_2_Read_Data_Second^(0+384)
 11116  016E  01E5               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
 11117                           
 11118                           ;PS_2.c: 288: PS_2_Buffer_items -= 4;
 11119  016F  3004               	movlw	4
 11120  0170  0021               	movlb	1	; select bank1
 11121  0171  02D3               	subwf	_PS_2_Buffer_items^(0+128),f
 11122                           
 11123                           ;PS_2.c: 289: BufferShiftBack(PS_2_ScanCodes,4,12);
 11124  0172  3004               	movlw	4
 11125  0173  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11126  0174  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11127  0175  00F0               	movwf	BufferShiftBack@shift
 11128  0176  300C               	movlw	12
 11129  0177  00BD               	movwf	(??_Process_PS2_ScanCode+1)^(0+128)
 11130  0178  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11131  0179  00F1               	movwf	BufferShiftBack@size
 11132  017A  30D9               	movlw	(low (_PS_2_ScanCodes| 0))& (0+255)
 11133  017B  319C  24BC  3181   	fcall	_BufferShiftBack
 11134  017E                     i1l5328:	
 11135                           
 11136                           ;PS_2.c: 290: }
 11137                           ;PS_2.c: 291: if(PS_2_Read_Data_Second == 0xF0)
 11138  017E  30F0               	movlw	240
 11139  017F  0023               	movlb	3	; select bank3
 11140  0180  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11141  0181  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11142  0182  1D03               	btfss	3,2
 11143  0183  29A4               	goto	i1l5344
 11144                           
 11145                           ;PS_2.c: 292: {
 11146                           ;PS_2.c: 293: PS_2_Read_Data_Third = PS_2_ScanCodes[2];
 11147  0184  0021               	movlb	1	; select bank1
 11148  0185  085B               	movf	(_PS_2_ScanCodes^(0+128)+2),w
 11149  0186  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11150  0187  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11151  0188  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11152  0189  0023               	movlb	3	; select bank3
 11153  018A  00E6               	movwf	_PS_2_Read_Data_Third^(0+384)
 11154  018B  0021               	movlb	1	; select bank1
 11155  018C  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11156  018D  0023               	movlb	3	; select bank3
 11157  018E  00E7               	movwf	(_PS_2_Read_Data_Third+1)^(0+384)
 11158                           
 11159                           ;PS_2.c: 294: if(PS_2_Read_Data_Third == 0x7C)
 11160  018F  307C               	movlw	124
 11161  0190  0666               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 11162  0191  0467               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11163  0192  1D03               	btfss	3,2
 11164  0193  299F               	goto	i1l5340
 11165                           
 11166                           ;PS_2.c: 295: {
 11167                           ;PS_2.c: 297: PS_2_Read_Data_First = 0;
 11168  0194  01E2               	clrf	_PS_2_Read_Data_First^(0+384)
 11169  0195  01E3               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
 11170                           
 11171                           ;PS_2.c: 298: PS_2_Read_Data_Second = 0;
 11172  0196  01E4               	clrf	_PS_2_Read_Data_Second^(0+384)
 11173  0197  01E5               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
 11174                           
 11175                           ;PS_2.c: 299: PS_2_Read_Data_Third = 0;
 11176  0198  01E6               	clrf	_PS_2_Read_Data_Third^(0+384)
 11177  0199  01E7               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
 11178                           
 11179                           ;PS_2.c: 300: PS_2_Buffer_items -= 6;
 11180  019A  3006               	movlw	6
 11181  019B  0021               	movlb	1	; select bank1
 11182  019C  02D3               	subwf	_PS_2_Buffer_items^(0+128),f
 11183                           
 11184                           ;PS_2.c: 301: BufferShiftBack(PS_2_ScanCodes,6,12);
 11185  019D  3006               	movlw	6
 11186  019E  29BF               	goto	L12
 11187  019F                     i1l5340:	
 11188                           ;PS_2.c: 302: }
 11189                           
 11190                           
 11191                           ;PS_2.c: 303: else
 11192                           ;PS_2.c: 304: {
 11193                           ;PS_2.c: 305: PS_2_Buffer_items -= 3;
 11194  019F  3003               	movlw	3
 11195  01A0  0021               	movlb	1	; select bank1
 11196  01A1  02D3               	subwf	_PS_2_Buffer_items^(0+128),f
 11197                           
 11198                           ;PS_2.c: 306: BufferShiftBack(PS_2_ScanCodes,3,12);
 11199  01A2  3003               	movlw	3
 11200  01A3  29BF               	goto	L12
 11201  01A4                     i1l5344:	
 11202                           ;PS_2.c: 307: }
 11203                           ;PS_2.c: 308: }
 11204                           
 11205                           
 11206                           ;PS_2.c: 309: else
 11207                           ;PS_2.c: 310: {
 11208                           ;PS_2.c: 311: PS_2_Buffer_items -= 2;
 11209  01A4  3002               	movlw	2
 11210  01A5  0021               	movlb	1	; select bank1
 11211  01A6  02D3               	subwf	_PS_2_Buffer_items^(0+128),f
 11212                           
 11213                           ;PS_2.c: 312: BufferShiftBack(PS_2_ScanCodes,2,12);
 11214  01A7  3002               	movlw	2
 11215  01A8  29BF               	goto	L12
 11216  01A9                     i1l5348:	
 11217                           ;PS_2.c: 313: }
 11218                           ;PS_2.c: 314: }
 11219                           
 11220                           
 11221                           ;PS_2.c: 315: else if(PS_2_Read_Data_First == 0xE1)
 11222  01A9  30E1               	movlw	225
 11223  01AA  0023               	movlb	3	; select bank3
 11224  01AB  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11225  01AC  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11226  01AD  1D03               	btfss	3,2
 11227  01AE  29C6               	goto	i1l5358
 11228                           
 11229                           ;PS_2.c: 316: {
 11230                           ;PS_2.c: 321: PS_2_Read_Data_First = 0xE0;
 11231  01AF  30E0               	movlw	224
 11232  01B0  00E2               	movwf	_PS_2_Read_Data_First^(0+384)
 11233  01B1  3000               	movlw	0
 11234  01B2  00E3               	movwf	(_PS_2_Read_Data_First^(0+384)+1)
 11235                           
 11236                           ;PS_2.c: 322: PS_2_Read_Data_Second = 0x69;
 11237  01B3  3069               	movlw	105
 11238  01B4  00E4               	movwf	_PS_2_Read_Data_Second^(0+384)
 11239  01B5  3000               	movlw	0
 11240  01B6  00E5               	movwf	(_PS_2_Read_Data_Second^(0+384)+1)
 11241                           
 11242                           ;PS_2.c: 323: PS_2_Buffer_items -= 8;
 11243  01B7  3008               	movlw	8
 11244  01B8  0021               	movlb	1	; select bank1
 11245  01B9  02D3               	subwf	_PS_2_Buffer_items^(0+128),f
 11246                           
 11247                           ;PS_2.c: 324: shortbreak = 1;
 11248  01BA  0023               	movlb	3	; select bank3
 11249  01BB  01E0               	clrf	Process_PS2_ScanCode@shortbreak^(0+384)
 11250  01BC  0AE0               	incf	Process_PS2_ScanCode@shortbreak^(0+384),f
 11251                           
 11252                           ;PS_2.c: 325: BufferShiftBack(PS_2_ScanCodes,8,12);
 11253  01BD  3008               	movlw	8
 11254  01BE  0021               	movlb	1	; select bank1
 11255  01BF                     L12:	
 11256  01BF  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11257  01C0  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11258  01C1  00F0               	movwf	BufferShiftBack@shift
 11259  01C2  300C               	movlw	12
 11260  01C3  00BD               	movwf	(??_Process_PS2_ScanCode+1)^(0+128)
 11261  01C4  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11262  01C5  29CE               	goto	L8
 11263  01C6                     i1l5358:	
 11264                           ;PS_2.c: 326: }
 11265                           
 11266                           
 11267                           ;PS_2.c: 327: else
 11268                           ;PS_2.c: 328: {
 11269                           ;PS_2.c: 329: PS_2_Buffer_items -= 1;
 11270  01C6  3001               	movlw	1
 11271  01C7  0021               	movlb	1	; select bank1
 11272  01C8  02D3               	subwf	_PS_2_Buffer_items^(0+128),f
 11273                           
 11274                           ;PS_2.c: 330: BufferShiftBack(PS_2_ScanCodes,1,12);
 11275  01C9  01F0               	clrf	BufferShiftBack@shift
 11276  01CA  0AF0               	incf	BufferShiftBack@shift,f
 11277  01CB  300C               	movlw	12
 11278  01CC  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11279  01CD  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11280  01CE                     L8:	
 11281  01CE  00F1               	movwf	BufferShiftBack@size
 11282  01CF  30D9               	movlw	(low (_PS_2_ScanCodes| 0))& (0+255)
 11283  01D0  319C  24BC  3181   	fcall	_BufferShiftBack
 11284                           
 11285                           ;PS_2.c: 331: }
 11286                           ;PS_2.c: 334: if(PS_2_Read_Data_Third)
 11287  01D3  0023               	movlb	3	; select bank3
 11288  01D4  0866               	movf	_PS_2_Read_Data_Third^(0+384),w
 11289  01D5  0467               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11290  01D6  1903               	btfsc	3,2
 11291  01D7  29FA               	goto	i1l5380
 11292                           
 11293                           ;PS_2.c: 335: {
 11294                           ;PS_2.c: 337: if(PS_2_Read_Data_First == 0xE0)
 11295  01D8  30E0               	movlw	224
 11296  01D9  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11297  01DA  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11298  01DB  1D03               	btfss	3,2
 11299  01DC  2AD6               	goto	i1l5476
 11300                           
 11301                           ;PS_2.c: 338: {
 11302                           ;PS_2.c: 339: if(PS_2_Read_Data_Second == 0xF0)
 11303  01DD  30F0               	movlw	240
 11304  01DE  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11305  01DF  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11306  01E0  1D03               	btfss	3,2
 11307  01E1  2AD6               	goto	i1l5476
 11308                           
 11309                           ;PS_2.c: 340: {
 11310                           ;PS_2.c: 341: if(PS_2_Read_Data_Third == 0x11 )
 11311  01E2  3011               	movlw	17
 11312  01E3  0666               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 11313  01E4  0467               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11314  01E5  1D03               	btfss	3,2
 11315  01E6  29E9               	goto	i1l5372
 11316                           
 11317                           ;PS_2.c: 342: {
 11318                           ;PS_2.c: 343: LALT = 0;
 11319  01E7  01EA               	clrf	_LALT^(0+384)
 11320                           
 11321                           ;PS_2.c: 344: }
 11322  01E8  2AD6               	goto	i1l5476
 11323  01E9                     i1l5372:	
 11324                           
 11325                           ;PS_2.c: 345: else if(PS_2_Read_Data_Third == 0x14 )
 11326  01E9  3014               	movlw	20
 11327  01EA  0666               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 11328  01EB  0467               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11329  01EC  1D03               	btfss	3,2
 11330  01ED  29F1               	goto	i1l5376
 11331                           
 11332                           ;PS_2.c: 346: {
 11333                           ;PS_2.c: 347: LControl = 0;
 11334  01EE  0021               	movlb	1	; select bank1
 11335  01EF  01D0               	clrf	_LControl^(0+128)
 11336                           
 11337                           ;PS_2.c: 348: }
 11338  01F0  2AD6               	goto	i1l5476
 11339  01F1                     i1l5376:	
 11340                           
 11341                           ;PS_2.c: 349: else if(PS_2_Read_Data_Third == 0x71 )
 11342  01F1  3071               	movlw	113
 11343  01F2  0023               	movlb	3	; select bank3
 11344  01F3  0666               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 11345  01F4  0467               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11346  01F5  1D03               	btfss	3,2
 11347  01F6  2AD6               	goto	i1l5476
 11348                           
 11349                           ;PS_2.c: 350: {
 11350                           ;PS_2.c: 351: Delete = 0;
 11351  01F7  0021               	movlb	1	; select bank1
 11352  01F8  01CF               	clrf	_Delete^(0+128)
 11353                           
 11354                           ;PS_2.c: 352: }
 11355                           ;PS_2.c: 353: }
 11356                           ;PS_2.c: 354: }
 11357                           ;PS_2.c: 355: }
 11358  01F9  2AD6               	goto	i1l5476
 11359  01FA                     i1l5380:	
 11360                           
 11361                           ;PS_2.c: 356: else if(PS_2_Read_Data_Second)
 11362  01FA  0023               	movlb	3	; select bank3
 11363  01FB  0864               	movf	_PS_2_Read_Data_Second^(0+384),w
 11364  01FC  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11365  01FD  1903               	btfsc	3,2
 11366  01FE  2AD6               	goto	i1l5476
 11367                           
 11368                           ;PS_2.c: 357: {
 11369                           ;PS_2.c: 359: if(PS_2_Read_Data_First == 0xF0)
 11370  01FF  30F0               	movlw	240
 11371  0200  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11372  0201  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11373  0202  1D03               	btfss	3,2
 11374  0203  2A81               	goto	i1l5444
 11375                           
 11376                           ;PS_2.c: 360: {
 11377                           ;PS_2.c: 362: if(PS_2_Read_Data_Second == 0x12)
 11378  0204  3012               	movlw	18
 11379  0205  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11380  0206  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11381  0207  1D03               	btfss	3,2
 11382  0208  2A0B               	goto	i1l5388
 11383                           
 11384                           ;PS_2.c: 363: {
 11385                           ;PS_2.c: 364: Right_Shift_Key =0;
 11386  0209  01EE               	clrf	_Right_Shift_Key^(0+384)
 11387                           
 11388                           ;PS_2.c: 365: }
 11389  020A  2A20               	goto	i1l5400
 11390  020B                     i1l5388:	
 11391                           
 11392                           ;PS_2.c: 366: else if(PS_2_Read_Data_Second == 0x59)
 11393  020B  3059               	movlw	89
 11394  020C  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11395  020D  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11396  020E  1D03               	btfss	3,2
 11397  020F  2A12               	goto	i1l5392
 11398                           
 11399                           ;PS_2.c: 367: {
 11400                           ;PS_2.c: 368: Left_Shift_Key =0;
 11401  0210  01EB               	clrf	_Left_Shift_Key^(0+384)
 11402                           
 11403                           ;PS_2.c: 369: }
 11404  0211  2A20               	goto	i1l5400
 11405  0212                     i1l5392:	
 11406                           
 11407                           ;PS_2.c: 370: else if(PS_2_Read_Data_Second == 0x14)
 11408  0212  3014               	movlw	20
 11409  0213  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11410  0214  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11411  0215  1D03               	btfss	3,2
 11412  0216  2A1A               	goto	i1l5396
 11413                           
 11414                           ;PS_2.c: 371: {
 11415                           ;PS_2.c: 372: RControl =0;
 11416  0217  0021               	movlb	1	; select bank1
 11417  0218  01D5               	clrf	_RControl^(0+128)
 11418                           
 11419                           ;PS_2.c: 373: }
 11420  0219  2A20               	goto	i1l5400
 11421  021A                     i1l5396:	
 11422                           
 11423                           ;PS_2.c: 374: else if(PS_2_Read_Data_Second == 0x11 )
 11424  021A  3011               	movlw	17
 11425  021B  0023               	movlb	3	; select bank3
 11426  021C  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11427  021D  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11428  021E  1903               	btfsc	3,2
 11429                           
 11430                           ;PS_2.c: 375: {
 11431                           ;PS_2.c: 376: RALT =0;
 11432  021F  01ED               	clrf	_RALT^(0+384)
 11433  0220                     i1l5400:	
 11434                           
 11435                           ;PS_2.c: 377: }
 11436                           ;PS_2.c: 378: if(PS_2_Read_Data_Second == 0x59 || PS_2_Read_Data_Second == 0x12)
 11437  0220  3059               	movlw	89
 11438  0221  0023               	movlb	3	; select bank3
 11439  0222  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11440  0223  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11441  0224  1903               	btfsc	3,2
 11442  0225  2A2B               	goto	i1l5404
 11443  0226  3012               	movlw	18
 11444  0227  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11445  0228  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11446  0229  1D03               	btfss	3,2
 11447  022A  2A79               	goto	i1l5440
 11448  022B                     i1l5404:	
 11449                           
 11450                           ;PS_2.c: 379: {
 11451                           ;PS_2.c: 380: if(Right_Shift_Key == 0 && Left_Shift_Key == 0)
 11452  022B  086E               	movf	_Right_Shift_Key^(0+384),w
 11453  022C  1D03               	btfss	3,2
 11454  022D  2AD6               	goto	i1l5476
 11455  022E  086B               	movf	_Left_Shift_Key^(0+384),w
 11456  022F  1D03               	btfss	3,2
 11457  0230  2AD6               	goto	i1l5476
 11458                           
 11459                           ;PS_2.c: 381: {
 11460                           ;PS_2.c: 382: if(!Send_PS2(0xED))
 11461  0231  30ED               	movlw	237
 11462  0232  318C  24DE  3181   	fcall	i1_Send_PS2
 11463  0235  3A00               	xorlw	0
 11464  0236  1D03               	skipz
 11465  0237  2A41               	goto	i1l5414
 11466                           
 11467                           ;PS_2.c: 383: {
 11468                           ;PS_2.c: 384: if(!Send_PS2(0x00))
 11469  0238  3000               	movlw	0
 11470  0239  318C  24DE  3181   	fcall	i1_Send_PS2
 11471  023C  3A00               	xorlw	0
 11472  023D  1D03               	skipz
 11473  023E  2A41               	goto	i1l5414
 11474                           
 11475                           ;PS_2.c: 385: {
 11476                           ;PS_2.c: 386: Shift_Key = 0;
 11477  023F  0023               	movlb	3	; select bank3
 11478  0240  01EF               	clrf	_Shift_Key^(0+384)
 11479  0241                     i1l5414:	
 11480                           
 11481                           ;PS_2.c: 387: }
 11482                           ;PS_2.c: 388: }
 11483                           ;PS_2.c: 389: if(Caps_Lock)
 11484  0241  0023               	movlb	3	; select bank3
 11485  0242  0869               	movf	_Caps_Lock^(0+384),w
 11486  0243  1903               	btfsc	3,2
 11487  0244  2A5F               	goto	i1l5428
 11488                           
 11489                           ;PS_2.c: 390: {
 11490                           ;PS_2.c: 391: CapsCount=0;
 11491  0245  01E8               	clrf	_CapsCount^(0+384)
 11492  0246                     i1l5426:	
 11493                           ;PS_2.c: 392: while(CapsCount<10)
 11494                           
 11495  0246  300A               	movlw	10
 11496  0247  0268               	subwf	_CapsCount^(0+384),w
 11497  0248  1803               	btfsc	3,0
 11498  0249  2AD6               	goto	i1l5476
 11499                           
 11500                           ;PS_2.c: 393: {
 11501                           ;PS_2.c: 394: if(!Send_PS2(0xED))
 11502  024A  30ED               	movlw	237
 11503  024B  318C  24DE  3181   	fcall	i1_Send_PS2
 11504  024E  3A00               	xorlw	0
 11505  024F  1D03               	skipz
 11506  0250  2A58               	goto	i1l5424
 11507                           
 11508                           ;PS_2.c: 395: {
 11509                           ;PS_2.c: 396: if(!Send_PS2(0x04))
 11510  0251  3004               	movlw	4
 11511  0252  318C  24DE  3181   	fcall	i1_Send_PS2
 11512  0255  3A00               	xorlw	0
 11513  0256  1903               	btfsc	3,2
 11514  0257  2AD6               	goto	i1l5476
 11515  0258                     i1l5424:	
 11516                           ;PS_2.c: 397: {
 11517                           ;PS_2.c: 398: break;
 11518                           
 11519                           
 11520                           ;PS_2.c: 399: }
 11521                           ;PS_2.c: 400: }
 11522                           ;PS_2.c: 401: CapsCount++;
 11523  0258  3001               	movlw	1
 11524  0259  0021               	movlb	1	; select bank1
 11525  025A  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11526  025B  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11527  025C  0023               	movlb	3	; select bank3
 11528  025D  07E8               	addwf	_CapsCount^(0+384),f
 11529  025E  2A46               	goto	i1l5426
 11530  025F                     i1l5428:	
 11531                           ;PS_2.c: 402: }
 11532                           ;PS_2.c: 403: }
 11533                           
 11534                           
 11535                           ;PS_2.c: 404: else
 11536                           ;PS_2.c: 405: {
 11537                           ;PS_2.c: 406: CapsCount=0;
 11538  025F  01E8               	clrf	_CapsCount^(0+384)
 11539  0260                     i1l5438:	
 11540                           ;PS_2.c: 407: while(CapsCount<10)
 11541                           
 11542  0260  300A               	movlw	10
 11543  0261  0268               	subwf	_CapsCount^(0+384),w
 11544  0262  1803               	btfsc	3,0
 11545  0263  2AD6               	goto	i1l5476
 11546                           
 11547                           ;PS_2.c: 408: {
 11548                           ;PS_2.c: 409: if(!Send_PS2(0xED))
 11549  0264  30ED               	movlw	237
 11550  0265  318C  24DE  3181   	fcall	i1_Send_PS2
 11551  0268  3A00               	xorlw	0
 11552  0269  1D03               	skipz
 11553  026A  2A72               	goto	i1l5436
 11554                           
 11555                           ;PS_2.c: 410: {
 11556                           ;PS_2.c: 411: if(!Send_PS2(0x00))
 11557  026B  3000               	movlw	0
 11558  026C  318C  24DE  3181   	fcall	i1_Send_PS2
 11559  026F  3A00               	xorlw	0
 11560  0270  1903               	btfsc	3,2
 11561  0271  2AD6               	goto	i1l5476
 11562  0272                     i1l5436:	
 11563                           ;PS_2.c: 412: {
 11564                           ;PS_2.c: 413: break;
 11565                           
 11566                           
 11567                           ;PS_2.c: 414: }
 11568                           ;PS_2.c: 415: }
 11569                           ;PS_2.c: 416: CapsCount++;
 11570  0272  3001               	movlw	1
 11571  0273  0021               	movlb	1	; select bank1
 11572  0274  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11573  0275  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11574  0276  0023               	movlb	3	; select bank3
 11575  0277  07E8               	addwf	_CapsCount^(0+384),f
 11576  0278  2A60               	goto	i1l5438
 11577  0279                     i1l5440:	
 11578                           ;PS_2.c: 417: }
 11579                           ;PS_2.c: 418: }
 11580                           ;PS_2.c: 419: }
 11581                           ;PS_2.c: 420: }
 11582                           
 11583                           
 11584                           ;PS_2.c: 421: else if(PS_2_Read_Data_Second == 0x58)
 11585  0279  3058               	movlw	88
 11586  027A  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11587  027B  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11588  027C  1D03               	btfss	3,2
 11589  027D  2AD6               	goto	i1l5476
 11590                           
 11591                           ;PS_2.c: 422: {
 11592                           ;PS_2.c: 423: Caps_Lock_Key = 0;
 11593  027E  0021               	movlb	1	; select bank1
 11594  027F  01CD               	clrf	_Caps_Lock_Key^(0+128)
 11595                           
 11596                           ;PS_2.c: 424: }
 11597                           ;PS_2.c: 425: }
 11598  0280  2AD6               	goto	i1l5476
 11599  0281                     i1l5444:	
 11600                           
 11601                           ;PS_2.c: 426: else if(PS_2_Read_Data_First == 0xE0)
 11602  0281  30E0               	movlw	224
 11603  0282  0023               	movlb	3	; select bank3
 11604  0283  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11605  0284  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11606  0285  1D03               	btfss	3,2
 11607  0286  2AD6               	goto	i1l5476
 11608                           
 11609                           ;PS_2.c: 427: {
 11610                           ;PS_2.c: 429: if(PS_2_Read_Data_Second == 0x11 )
 11611  0287  3011               	movlw	17
 11612  0288  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11613  0289  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11614  028A  1D03               	btfss	3,2
 11615  028B  2A8F               	goto	i1l5450
 11616                           
 11617                           ;PS_2.c: 430: {
 11618                           ;PS_2.c: 431: LALT = 1;
 11619  028C  01EA               	clrf	_LALT^(0+384)
 11620  028D  0AEA               	incf	_LALT^(0+384),f
 11621                           
 11622                           ;PS_2.c: 432: }
 11623  028E  2AA1               	goto	i1l704
 11624  028F                     i1l5450:	
 11625                           
 11626                           ;PS_2.c: 433: else if(PS_2_Read_Data_Second == 0x14 )
 11627  028F  3014               	movlw	20
 11628  0290  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11629  0291  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11630  0292  1D03               	btfss	3,2
 11631  0293  2A98               	goto	i1l5454
 11632                           
 11633                           ;PS_2.c: 434: {
 11634                           ;PS_2.c: 435: LControl = 1;
 11635  0294  0021               	movlb	1	; select bank1
 11636  0295  01D0               	clrf	_LControl^(0+128)
 11637  0296  0AD0               	incf	_LControl^(0+128),f
 11638                           
 11639                           ;PS_2.c: 436: }
 11640  0297  2AA1               	goto	i1l704
 11641  0298                     i1l5454:	
 11642                           
 11643                           ;PS_2.c: 437: else if(PS_2_Read_Data_Second == 0x71 )
 11644  0298  3071               	movlw	113
 11645  0299  0023               	movlb	3	; select bank3
 11646  029A  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11647  029B  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11648  029C  1D03               	btfss	3,2
 11649  029D  2AA1               	goto	i1l704
 11650                           
 11651                           ;PS_2.c: 438: {
 11652                           ;PS_2.c: 439: Delete = 1;
 11653  029E  0021               	movlb	1	; select bank1
 11654  029F  01CF               	clrf	_Delete^(0+128)
 11655  02A0  0ACF               	incf	_Delete^(0+128),f
 11656  02A1                     i1l704:	
 11657                           
 11658                           ;PS_2.c: 440: }
 11659                           ;PS_2.c: 441: if(((RControl || LControl) + (LALT || RALT) + Delete) != 3)
 11660  02A1  0023               	movlb	3	; select bank3
 11661  02A2  01DC               	clrf	_Process_PS2_ScanCode$849^(0+384)
 11662  02A3  0ADC               	incf	_Process_PS2_ScanCode$849^(0+384),f
 11663  02A4  086A               	movf	_LALT^(0+384),w
 11664  02A5  1D03               	btfss	3,2
 11665  02A6  2AAB               	goto	i1l5464
 11666  02A7  086D               	movf	_RALT^(0+384),w
 11667  02A8  1D03               	btfss	3,2
 11668  02A9  2AAB               	goto	i1l5464
 11669  02AA  01DC               	clrf	_Process_PS2_ScanCode$849^(0+384)
 11670  02AB                     i1l5464:	
 11671  02AB  01DD               	clrf	_Process_PS2_ScanCode$850^(0+384)
 11672  02AC  0ADD               	incf	_Process_PS2_ScanCode$850^(0+384),f
 11673  02AD  0021               	movlb	1	; select bank1
 11674  02AE  0855               	movf	_RControl^(0+128),w
 11675  02AF  1D03               	btfss	3,2
 11676  02B0  2AB6               	goto	i1l5472
 11677  02B1  0850               	movf	_LControl^(0+128),w
 11678  02B2  1D03               	btfss	3,2
 11679  02B3  2AB6               	goto	i1l5472
 11680  02B4  0023               	movlb	3	; select bank3
 11681  02B5  01DD               	clrf	_Process_PS2_ScanCode$850^(0+384)
 11682  02B6                     i1l5472:	
 11683  02B6  0021               	movlb	1	; select bank1
 11684  02B7  084F               	movf	_Delete^(0+128),w
 11685  02B8  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11686  02B9  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11687  02BA  0023               	movlb	3	; select bank3
 11688  02BB  085D               	movf	_Process_PS2_ScanCode$850^(0+384),w
 11689  02BC  075C               	addwf	_Process_PS2_ScanCode$849^(0+384),w
 11690  02BD  0021               	movlb	1	; select bank1
 11691  02BE  00BE               	movwf	(??_Process_PS2_ScanCode+2)^(0+128)
 11692  02BF  01BF               	clrf	((??_Process_PS2_ScanCode+2)^(0+128)+1)
 11693  02C0  0DBF               	rlf	(??_Process_PS2_ScanCode+3)^(0+128),f
 11694  02C1  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11695  02C2  073E               	addwf	(??_Process_PS2_ScanCode+2)^(0+128),w
 11696  02C3  00C0               	movwf	(??_Process_PS2_ScanCode+4)^(0+128)
 11697  02C4  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11698  02C5  3D3F               	addwfc	(??_Process_PS2_ScanCode+3)^(0+128),w
 11699  02C6  00C1               	movwf	(??_Process_PS2_ScanCode+5)^(0+128)
 11700  02C7  3003               	movlw	3
 11701  02C8  0640               	xorwf	(??_Process_PS2_ScanCode+4)^(0+128),w
 11702  02C9  0441               	iorwf	((??_Process_PS2_ScanCode+4)^(0+128)+1),w
 11703  02CA  1903               	btfsc	3,2
 11704  02CB  2AD6               	goto	i1l5476
 11705                           
 11706                           ;PS_2.c: 442: {
 11707                           ;PS_2.c: 444: temp = Decode_Scan_Code_FunctionE0(PS_2_Read_Data_Second);
 11708  02CC  0023               	movlb	3	; select bank3
 11709  02CD  0864               	movf	_PS_2_Read_Data_Second^(0+384),w
 11710  02CE  3199  2153  3181   	fcall	_Decode_Scan_Code_FunctionE0
 11711  02D1  0021               	movlb	1	; select bank1
 11712  02D2  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11713  02D3  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11714  02D4  0023               	movlb	3	; select bank3
 11715  02D5  00E1               	movwf	Process_PS2_ScanCode@temp^(0+384)
 11716  02D6                     i1l5476:	
 11717                           
 11718                           ;PS_2.c: 445: }
 11719                           ;PS_2.c: 446: }
 11720                           ;PS_2.c: 447: }
 11721                           ;PS_2.c: 448: if(PS_2_Read_Data_First != 0 && PS_2_Read_Data_Second == 0 &&
 11722                           ;PS_2.c: 449: PS_2_Read_Data_Third == 0)
 11723  02D6  0023               	movlb	3	; select bank3
 11724  02D7  0862               	movf	_PS_2_Read_Data_First^(0+384),w
 11725  02D8  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11726  02D9  1903               	btfsc	3,2
 11727  02DA  2C25               	goto	i1l5622
 11728  02DB  0864               	movf	_PS_2_Read_Data_Second^(0+384),w
 11729  02DC  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11730  02DD  1D03               	btfss	3,2
 11731  02DE  2C25               	goto	i1l5622
 11732  02DF  0866               	movf	_PS_2_Read_Data_Third^(0+384),w
 11733  02E0  0467               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11734  02E1  1D03               	btfss	3,2
 11735  02E2  2C25               	goto	i1l5622
 11736                           
 11737                           ;PS_2.c: 450: {
 11738                           ;PS_2.c: 452: if(PS_2_Read_Data_First == 0x12)
 11739  02E3  3012               	movlw	18
 11740  02E4  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11741  02E5  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11742  02E6  1D03               	btfss	3,2
 11743  02E7  2AEB               	goto	i1l5486
 11744                           
 11745                           ;PS_2.c: 453: {
 11746                           ;PS_2.c: 454: Right_Shift_Key = 1;
 11747  02E8  01EE               	clrf	_Right_Shift_Key^(0+384)
 11748  02E9  0AEE               	incf	_Right_Shift_Key^(0+384),f
 11749                           
 11750                           ;PS_2.c: 455: }
 11751  02EA  2AF2               	goto	i1l5490
 11752  02EB                     i1l5486:	
 11753                           
 11754                           ;PS_2.c: 456: else if(PS_2_Read_Data_First == 0x59)
 11755  02EB  3059               	movlw	89
 11756  02EC  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11757  02ED  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11758  02EE  1D03               	btfss	3,2
 11759  02EF  2AF2               	goto	i1l5490
 11760                           
 11761                           ;PS_2.c: 457: {
 11762                           ;PS_2.c: 458: Left_Shift_Key = 1;
 11763  02F0  01EB               	clrf	_Left_Shift_Key^(0+384)
 11764  02F1  0AEB               	incf	_Left_Shift_Key^(0+384),f
 11765  02F2                     i1l5490:	
 11766                           
 11767                           ;PS_2.c: 459: }
 11768                           ;PS_2.c: 460: if((Right_Shift_Key == 1 && Right_Shift_Key_old == 0) || (Left_Shift_Key =
      +                          = 1 && Left_Shift_Key_old == 0))
 11769  02F2  036E               	decf	_Right_Shift_Key^(0+384),w
 11770  02F3  1D03               	btfss	3,2
 11771  02F4  2AF9               	goto	i1l5494
 11772  02F5  0021               	movlb	1	; select bank1
 11773  02F6  0857               	movf	_Right_Shift_Key_old^(0+128),w
 11774  02F7  1903               	btfsc	3,2
 11775  02F8  2B01               	goto	i1l5498
 11776  02F9                     i1l5494:	
 11777  02F9  0023               	movlb	3	; select bank3
 11778  02FA  036B               	decf	_Left_Shift_Key^(0+384),w
 11779  02FB  1D03               	btfss	3,2
 11780  02FC  2B43               	goto	i1l5526
 11781  02FD  0021               	movlb	1	; select bank1
 11782  02FE  0851               	movf	_Left_Shift_Key_old^(0+128),w
 11783  02FF  1D03               	btfss	3,2
 11784  0300  2B43               	goto	i1l5526
 11785  0301                     i1l5498:	
 11786                           
 11787                           ;PS_2.c: 461: {
 11788                           ;PS_2.c: 463: if(!Send_PS2(0xED))
 11789  0301  30ED               	movlw	237
 11790  0302  318C  24DE  3181   	fcall	i1_Send_PS2
 11791  0305  3A00               	xorlw	0
 11792  0306  1D03               	skipz
 11793  0307  2B43               	goto	i1l5526
 11794                           
 11795                           ;PS_2.c: 464: {
 11796                           ;PS_2.c: 465: if(Caps_Lock)
 11797  0308  0023               	movlb	3	; select bank3
 11798  0309  0869               	movf	_Caps_Lock^(0+384),w
 11799  030A  1903               	btfsc	3,2
 11800  030B  2B26               	goto	i1l5514
 11801                           
 11802                           ;PS_2.c: 466: {
 11803                           ;PS_2.c: 467: CapsCount=0;
 11804  030C  01E8               	clrf	_CapsCount^(0+384)
 11805  030D                     i1l5512:	
 11806                           ;PS_2.c: 468: while(CapsCount<10)
 11807                           
 11808  030D  300A               	movlw	10
 11809  030E  0268               	subwf	_CapsCount^(0+384),w
 11810  030F  1803               	btfsc	3,0
 11811  0310  2B43               	goto	i1l5526
 11812                           
 11813                           ;PS_2.c: 469: {
 11814                           ;PS_2.c: 470: if(!Send_PS2(0xED))
 11815  0311  30ED               	movlw	237
 11816  0312  318C  24DE  3181   	fcall	i1_Send_PS2
 11817  0315  3A00               	xorlw	0
 11818  0316  1D03               	skipz
 11819  0317  2B1F               	goto	i1l5510
 11820                           
 11821                           ;PS_2.c: 471: {
 11822                           ;PS_2.c: 472: if(!Send_PS2(0x05))
 11823  0318  3005               	movlw	5
 11824  0319  318C  24DE  3181   	fcall	i1_Send_PS2
 11825  031C  3A00               	xorlw	0
 11826  031D  1903               	btfsc	3,2
 11827  031E  2B40               	goto	i1l5520
 11828  031F                     i1l5510:	
 11829                           ;PS_2.c: 475: break;
 11830                           
 11831                           ;PS_2.c: 473: {
 11832                           ;PS_2.c: 474: Shift_Key = 1;
 11833                           
 11834                           
 11835                           ;PS_2.c: 476: }
 11836                           ;PS_2.c: 477: }
 11837                           ;PS_2.c: 478: CapsCount++;
 11838  031F  3001               	movlw	1
 11839  0320  0021               	movlb	1	; select bank1
 11840  0321  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11841  0322  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11842  0323  0023               	movlb	3	; select bank3
 11843  0324  07E8               	addwf	_CapsCount^(0+384),f
 11844  0325  2B0D               	goto	i1l5512
 11845  0326                     i1l5514:	
 11846                           ;PS_2.c: 479: }
 11847                           ;PS_2.c: 480: }
 11848                           
 11849                           
 11850                           ;PS_2.c: 481: else
 11851                           ;PS_2.c: 482: {
 11852                           ;PS_2.c: 483: CapsCount=0;
 11853  0326  01E8               	clrf	_CapsCount^(0+384)
 11854                           
 11855                           ;PS_2.c: 484: while(CapsCount<10)
 11856  0327  2B2E               	goto	i1l5524
 11857  0328                     i1l5522:	
 11858                           ;PS_2.c: 491: break;
 11859                           
 11860                           
 11861                           ;PS_2.c: 492: }
 11862                           ;PS_2.c: 493: }
 11863                           ;PS_2.c: 494: CapsCount++;
 11864  0328  3001               	movlw	1
 11865  0329  0021               	movlb	1	; select bank1
 11866  032A  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11867  032B  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11868  032C  0023               	movlb	3	; select bank3
 11869  032D  07E8               	addwf	_CapsCount^(0+384),f
 11870  032E                     i1l5524:	
 11871  032E  300A               	movlw	10
 11872  032F  0268               	subwf	_CapsCount^(0+384),w
 11873  0330  1803               	btfsc	3,0
 11874  0331  2B43               	goto	i1l5526
 11875                           
 11876                           ;PS_2.c: 485: {
 11877                           ;PS_2.c: 486: if(!Send_PS2(0xED))
 11878  0332  30ED               	movlw	237
 11879  0333  318C  24DE  3181   	fcall	i1_Send_PS2
 11880  0336  3A00               	xorlw	0
 11881  0337  1D03               	skipz
 11882  0338  2B28               	goto	i1l5522
 11883                           
 11884                           ;PS_2.c: 487: {
 11885                           ;PS_2.c: 488: if(!Send_PS2(0x01))
 11886  0339  3001               	movlw	1
 11887  033A  318C  24DE  3181   	fcall	i1_Send_PS2
 11888  033D  3A00               	xorlw	0
 11889  033E  1D03               	skipz
 11890  033F  2B28               	goto	i1l5522
 11891  0340                     i1l5520:	
 11892                           
 11893                           ;PS_2.c: 489: {
 11894                           ;PS_2.c: 490: Shift_Key = 1;
 11895  0340  0023               	movlb	3	; select bank3
 11896  0341  01EF               	clrf	_Shift_Key^(0+384)
 11897  0342  0AEF               	incf	_Shift_Key^(0+384),f
 11898  0343                     i1l5526:	
 11899                           
 11900                           ;PS_2.c: 495: }
 11901                           ;PS_2.c: 496: }
 11902                           ;PS_2.c: 497: }
 11903                           ;PS_2.c: 498: }
 11904                           ;PS_2.c: 499: if(PS_2_Read_Data_First == 0x14 )
 11905  0343  3014               	movlw	20
 11906  0344  0023               	movlb	3	; select bank3
 11907  0345  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11908  0346  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11909  0347  1D03               	btfss	3,2
 11910  0348  2B4D               	goto	i1l5530
 11911                           
 11912                           ;PS_2.c: 500: {
 11913                           ;PS_2.c: 501: RControl = 1;
 11914  0349  0021               	movlb	1	; select bank1
 11915  034A  01D5               	clrf	_RControl^(0+128)
 11916  034B  0AD5               	incf	_RControl^(0+128),f
 11917                           
 11918                           ;PS_2.c: 502: }
 11919  034C  2C18               	goto	i1l736
 11920  034D                     i1l5530:	
 11921                           
 11922                           ;PS_2.c: 503: else if(PS_2_Read_Data_First == 0x11 )
 11923  034D  3011               	movlw	17
 11924  034E  0023               	movlb	3	; select bank3
 11925  034F  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11926  0350  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11927  0351  1D03               	btfss	3,2
 11928  0352  2B56               	goto	i1l5534
 11929                           
 11930                           ;PS_2.c: 504: {
 11931                           ;PS_2.c: 505: RALT = 1;
 11932  0353  01ED               	clrf	_RALT^(0+384)
 11933  0354  0AED               	incf	_RALT^(0+384),f
 11934                           
 11935                           ;PS_2.c: 506: }
 11936  0355  2C18               	goto	i1l736
 11937  0356                     i1l5534:	
 11938                           
 11939                           ;PS_2.c: 507: else if(PS_2_Read_Data_First == 0xEE )
 11940  0356  30EE               	movlw	238
 11941  0357  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11942  0358  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11943  0359  1D03               	btfss	3,2
 11944  035A  2B5F               	goto	i1l5538
 11945                           
 11946                           ;PS_2.c: 508: {
 11947                           ;PS_2.c: 509: ECHO = 1;
 11948  035B  0024               	movlb	4	; select bank4
 11949  035C  01DF               	clrf	_ECHO^(0+512)
 11950  035D  0ADF               	incf	_ECHO^(0+512),f
 11951                           
 11952                           ;PS_2.c: 510: }
 11953  035E  2C18               	goto	i1l736
 11954  035F                     i1l5538:	
 11955                           
 11956                           ;PS_2.c: 511: else if(PS_2_Read_Data_First == 0x58)
 11957  035F  3058               	movlw	88
 11958  0360  0023               	movlb	3	; select bank3
 11959  0361  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11960  0362  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11961  0363  1D03               	btfss	3,2
 11962  0364  2BE4               	goto	i1l5598
 11963                           
 11964                           ;PS_2.c: 512: {
 11965                           ;PS_2.c: 513: Caps_Lock_Key = 1;
 11966  0365  0021               	movlb	1	; select bank1
 11967  0366  01CD               	clrf	_Caps_Lock_Key^(0+128)
 11968  0367  0ACD               	incf	_Caps_Lock_Key^(0+128),f
 11969                           
 11970                           ;PS_2.c: 514: if(Caps_Lock_Key_old == 0)
 11971  0368  084E               	movf	_Caps_Lock_Key_old^(0+128),w
 11972  0369  1D03               	btfss	3,2
 11973  036A  2C18               	goto	i1l736
 11974                           
 11975                           ;PS_2.c: 515: {
 11976                           ;PS_2.c: 516: if(Caps_Lock)
 11977  036B  0023               	movlb	3	; select bank3
 11978  036C  0869               	movf	_Caps_Lock^(0+384),w
 11979  036D  1903               	btfsc	3,2
 11980  036E  2BA9               	goto	i1l5572
 11981                           
 11982                           ;PS_2.c: 517: {
 11983                           ;PS_2.c: 518: if(Shift_Key)
 11984  036F  086F               	movf	_Shift_Key^(0+384),w
 11985  0370  1903               	btfsc	3,2
 11986  0371  2B8C               	goto	i1l5560
 11987                           
 11988                           ;PS_2.c: 519: {
 11989                           ;PS_2.c: 520: CapsCount=0;
 11990  0372  01E8               	clrf	_CapsCount^(0+384)
 11991  0373                     i1l5558:	
 11992                           ;PS_2.c: 521: while(CapsCount<10)
 11993                           
 11994  0373  300A               	movlw	10
 11995  0374  0268               	subwf	_CapsCount^(0+384),w
 11996  0375  1803               	btfsc	3,0
 11997  0376  2C18               	goto	i1l736
 11998                           
 11999                           ;PS_2.c: 522: {
 12000                           ;PS_2.c: 523: if(!Send_PS2(0xED))
 12001  0377  30ED               	movlw	237
 12002  0378  318C  24DE  3181   	fcall	i1_Send_PS2
 12003  037B  3A00               	xorlw	0
 12004  037C  1D03               	skipz
 12005  037D  2B85               	goto	i1l5556
 12006                           
 12007                           ;PS_2.c: 524: {
 12008                           ;PS_2.c: 525: if(!Send_PS2(0x01))
 12009  037E  3001               	movlw	1
 12010  037F  318C  24DE  3181   	fcall	i1_Send_PS2
 12011  0382  3A00               	xorlw	0
 12012  0383  1903               	btfsc	3,2
 12013  0384  2B9F               	goto	i1l5566
 12014  0385                     i1l5556:	
 12015                           ;PS_2.c: 528: break;
 12016                           
 12017                           ;PS_2.c: 526: {
 12018                           ;PS_2.c: 527: Caps_Lock =0;
 12019                           
 12020                           
 12021                           ;PS_2.c: 529: }
 12022                           ;PS_2.c: 530: }
 12023                           ;PS_2.c: 531: CapsCount++;
 12024  0385  3001               	movlw	1
 12025  0386  0021               	movlb	1	; select bank1
 12026  0387  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12027  0388  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12028  0389  0023               	movlb	3	; select bank3
 12029  038A  07E8               	addwf	_CapsCount^(0+384),f
 12030  038B  2B73               	goto	i1l5558
 12031  038C                     i1l5560:	
 12032                           ;PS_2.c: 532: }
 12033                           ;PS_2.c: 533: }
 12034                           
 12035                           
 12036                           ;PS_2.c: 534: else
 12037                           ;PS_2.c: 535: {
 12038                           ;PS_2.c: 536: CapsCount=0;
 12039  038C  01E8               	clrf	_CapsCount^(0+384)
 12040  038D                     i1l5570:	
 12041                           ;PS_2.c: 537: while(CapsCount<10)
 12042                           
 12043  038D  300A               	movlw	10
 12044  038E  0268               	subwf	_CapsCount^(0+384),w
 12045  038F  1803               	btfsc	3,0
 12046  0390  2C18               	goto	i1l736
 12047                           
 12048                           ;PS_2.c: 538: {
 12049                           ;PS_2.c: 539: if(!Send_PS2(0xED))
 12050  0391  30ED               	movlw	237
 12051  0392  318C  24DE  3181   	fcall	i1_Send_PS2
 12052  0395  3A00               	xorlw	0
 12053  0396  1D03               	skipz
 12054  0397  2BA2               	goto	i1l5568
 12055                           
 12056                           ;PS_2.c: 540: {
 12057                           ;PS_2.c: 541: if(!Send_PS2(0x00))
 12058  0398  3000               	movlw	0
 12059  0399  318C  24DE  3181   	fcall	i1_Send_PS2
 12060  039C  3A00               	xorlw	0
 12061  039D  1D03               	skipz
 12062  039E  2BA2               	goto	i1l5568
 12063  039F                     i1l5566:	
 12064                           
 12065                           ;PS_2.c: 542: {
 12066                           ;PS_2.c: 543: Caps_Lock =0;
 12067  039F  0023               	movlb	3	; select bank3
 12068  03A0  01E9               	clrf	_Caps_Lock^(0+384)
 12069                           
 12070                           ;PS_2.c: 544: break;
 12071  03A1  2C18               	goto	i1l736
 12072  03A2                     i1l5568:	
 12073                           
 12074                           ;PS_2.c: 545: }
 12075                           ;PS_2.c: 546: }
 12076                           ;PS_2.c: 547: CapsCount++;
 12077  03A2  3001               	movlw	1
 12078  03A3  0021               	movlb	1	; select bank1
 12079  03A4  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12080  03A5  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12081  03A6  0023               	movlb	3	; select bank3
 12082  03A7  07E8               	addwf	_CapsCount^(0+384),f
 12083  03A8  2B8D               	goto	i1l5570
 12084  03A9                     i1l5572:	
 12085                           ;PS_2.c: 548: }
 12086                           ;PS_2.c: 549: }
 12087                           ;PS_2.c: 550: }
 12088                           
 12089                           
 12090                           ;PS_2.c: 551: else
 12091                           ;PS_2.c: 552: {
 12092                           ;PS_2.c: 553: if(Shift_Key)
 12093  03A9  086F               	movf	_Shift_Key^(0+384),w
 12094  03AA  1903               	btfsc	3,2
 12095  03AB  2BC6               	goto	i1l5586
 12096                           
 12097                           ;PS_2.c: 554: {
 12098                           ;PS_2.c: 555: CapsCount=0;
 12099  03AC  01E8               	clrf	_CapsCount^(0+384)
 12100  03AD                     i1l5584:	
 12101                           ;PS_2.c: 556: while(CapsCount<10)
 12102                           
 12103  03AD  300A               	movlw	10
 12104  03AE  0268               	subwf	_CapsCount^(0+384),w
 12105  03AF  1803               	btfsc	3,0
 12106  03B0  2C18               	goto	i1l736
 12107                           
 12108                           ;PS_2.c: 557: {
 12109                           ;PS_2.c: 558: if(!Send_PS2(0xED))
 12110  03B1  30ED               	movlw	237
 12111  03B2  318C  24DE  3181   	fcall	i1_Send_PS2
 12112  03B5  3A00               	xorlw	0
 12113  03B6  1D03               	skipz
 12114  03B7  2BBF               	goto	i1l5582
 12115                           
 12116                           ;PS_2.c: 559: {
 12117                           ;PS_2.c: 560: if(!Send_PS2(0x05))
 12118  03B8  3005               	movlw	5
 12119  03B9  318C  24DE  3181   	fcall	i1_Send_PS2
 12120  03BC  3A00               	xorlw	0
 12121  03BD  1903               	btfsc	3,2
 12122  03BE  2BD9               	goto	i1l5592
 12123  03BF                     i1l5582:	
 12124                           ;PS_2.c: 563: break;
 12125                           
 12126                           ;PS_2.c: 561: {
 12127                           ;PS_2.c: 562: Caps_Lock =1;
 12128                           
 12129                           
 12130                           ;PS_2.c: 564: }
 12131                           ;PS_2.c: 565: }
 12132                           ;PS_2.c: 566: CapsCount++;
 12133  03BF  3001               	movlw	1
 12134  03C0  0021               	movlb	1	; select bank1
 12135  03C1  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12136  03C2  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12137  03C3  0023               	movlb	3	; select bank3
 12138  03C4  07E8               	addwf	_CapsCount^(0+384),f
 12139  03C5  2BAD               	goto	i1l5584
 12140  03C6                     i1l5586:	
 12141                           ;PS_2.c: 567: }
 12142                           ;PS_2.c: 568: }
 12143                           
 12144                           
 12145                           ;PS_2.c: 569: else
 12146                           ;PS_2.c: 570: {
 12147                           ;PS_2.c: 571: CapsCount=0;
 12148  03C6  01E8               	clrf	_CapsCount^(0+384)
 12149  03C7                     i1l5596:	
 12150                           ;PS_2.c: 572: while(CapsCount<10)
 12151                           
 12152  03C7  300A               	movlw	10
 12153  03C8  0268               	subwf	_CapsCount^(0+384),w
 12154  03C9  1803               	btfsc	3,0
 12155  03CA  2C18               	goto	i1l736
 12156                           
 12157                           ;PS_2.c: 573: {
 12158                           ;PS_2.c: 574: if(!Send_PS2(0xED))
 12159  03CB  30ED               	movlw	237
 12160  03CC  318C  24DE  3181   	fcall	i1_Send_PS2
 12161  03CF  3A00               	xorlw	0
 12162  03D0  1D03               	skipz
 12163  03D1  2BDD               	goto	i1l5594
 12164                           
 12165                           ;PS_2.c: 575: {
 12166                           ;PS_2.c: 576: if(!Send_PS2(0x04))
 12167  03D2  3004               	movlw	4
 12168  03D3  318C  24DE  3181   	fcall	i1_Send_PS2
 12169  03D6  3A00               	xorlw	0
 12170  03D7  1D03               	skipz
 12171  03D8  2BDD               	goto	i1l5594
 12172  03D9                     i1l5592:	
 12173                           
 12174                           ;PS_2.c: 577: {
 12175                           ;PS_2.c: 578: Caps_Lock =1;
 12176  03D9  0023               	movlb	3	; select bank3
 12177  03DA  01E9               	clrf	_Caps_Lock^(0+384)
 12178  03DB  0AE9               	incf	_Caps_Lock^(0+384),f
 12179                           
 12180                           ;PS_2.c: 579: break;
 12181  03DC  2C18               	goto	i1l736
 12182  03DD                     i1l5594:	
 12183                           
 12184                           ;PS_2.c: 580: }
 12185                           ;PS_2.c: 581: }
 12186                           ;PS_2.c: 582: CapsCount++;
 12187  03DD  3001               	movlw	1
 12188  03DE  0021               	movlb	1	; select bank1
 12189  03DF  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12190  03E0  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12191  03E1  0023               	movlb	3	; select bank3
 12192  03E2  07E8               	addwf	_CapsCount^(0+384),f
 12193  03E3  2BC7               	goto	i1l5596
 12194  03E4                     i1l5598:	
 12195                           ;PS_2.c: 583: }
 12196                           ;PS_2.c: 584: }
 12197                           ;PS_2.c: 585: }
 12198                           ;PS_2.c: 586: }
 12199                           ;PS_2.c: 588: }
 12200                           
 12201                           
 12202                           ;PS_2.c: 589: else
 12203                           ;PS_2.c: 590: {
 12204                           ;PS_2.c: 591: if(Shift_Key ==1)
 12205  03E4  036F               	decf	_Shift_Key^(0+384),w
 12206  03E5  1D03               	btfss	3,2
 12207  03E6  2C02               	goto	i1l5610
 12208                           
 12209                           ;PS_2.c: 592: {
 12210                           ;PS_2.c: 594: temp = Decode_Scan_Code_Shift(PS_2_Read_Data_First);
 12211  03E7  0862               	movf	_PS_2_Read_Data_First^(0+384),w
 12212  03E8  3199  2165  3181   	fcall	_Decode_Scan_Code_Shift
 12213  03EB  0021               	movlb	1	; select bank1
 12214  03EC  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12215  03ED  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12216  03EE  0023               	movlb	3	; select bank3
 12217  03EF  00E1               	movwf	Process_PS2_ScanCode@temp^(0+384)
 12218                           
 12219                           ;PS_2.c: 595: if(Caps_Lock)
 12220  03F0  0869               	movf	_Caps_Lock^(0+384),w
 12221  03F1  1903               	btfsc	3,2
 12222  03F2  2C18               	goto	i1l736
 12223                           
 12224                           ;PS_2.c: 596: {
 12225                           ;PS_2.c: 598: if(temp >= 'A' && temp <= 'Z')
 12226  03F3  3041               	movlw	65
 12227  03F4  0261               	subwf	Process_PS2_ScanCode@temp^(0+384),w
 12228  03F5  1C03               	skipc
 12229  03F6  2C18               	goto	i1l736
 12230  03F7  305B               	movlw	91
 12231  03F8  0261               	subwf	Process_PS2_ScanCode@temp^(0+384),w
 12232  03F9  1803               	skipnc
 12233  03FA  2C18               	goto	i1l736
 12234                           
 12235                           ;PS_2.c: 599: {
 12236                           ;PS_2.c: 600: temp += 32;
 12237  03FB  3020               	movlw	32
 12238  03FC  0021               	movlb	1	; select bank1
 12239  03FD  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12240  03FE  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12241  03FF  0023               	movlb	3	; select bank3
 12242  0400  07E1               	addwf	Process_PS2_ScanCode@temp^(0+384),f
 12243                           
 12244                           ;PS_2.c: 601: }
 12245                           ;PS_2.c: 602: }
 12246                           ;PS_2.c: 603: }
 12247  0401  2C18               	goto	i1l736
 12248  0402                     i1l5610:	
 12249                           
 12250                           ;PS_2.c: 604: else
 12251                           ;PS_2.c: 605: {
 12252                           ;PS_2.c: 606: temp = Decode_Scan_Code(PS_2_Read_Data_First);
 12253  0402  0862               	movf	_PS_2_Read_Data_First^(0+384),w
 12254  0403  3199  2141  3181   	fcall	_Decode_Scan_Code
 12255  0406  0021               	movlb	1	; select bank1
 12256  0407  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12257  0408  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12258  0409  0023               	movlb	3	; select bank3
 12259  040A  00E1               	movwf	Process_PS2_ScanCode@temp^(0+384)
 12260                           
 12261                           ;PS_2.c: 607: if(Caps_Lock)
 12262  040B  0869               	movf	_Caps_Lock^(0+384),w
 12263  040C  1903               	btfsc	3,2
 12264  040D  2C18               	goto	i1l736
 12265                           
 12266                           ;PS_2.c: 608: {
 12267                           ;PS_2.c: 610: if(temp >= 'a' && temp <= 'z')
 12268  040E  3061               	movlw	97
 12269  040F  0261               	subwf	Process_PS2_ScanCode@temp^(0+384),w
 12270  0410  1C03               	skipc
 12271  0411  2C18               	goto	i1l736
 12272  0412  307B               	movlw	123
 12273  0413  0261               	subwf	Process_PS2_ScanCode@temp^(0+384),w
 12274  0414  1803               	skipnc
 12275  0415  2C18               	goto	i1l736
 12276                           
 12277                           ;PS_2.c: 611: {
 12278                           ;PS_2.c: 612: temp -= 32;
 12279  0416  3020               	movlw	32
 12280  0417  02E1               	subwf	Process_PS2_ScanCode@temp^(0+384),f
 12281  0418                     i1l736:	
 12282                           
 12283                           ;PS_2.c: 613: }
 12284                           ;PS_2.c: 614: }
 12285                           ;PS_2.c: 615: }
 12286                           ;PS_2.c: 616: }
 12287                           ;PS_2.c: 617: if(!temp)
 12288  0418  0023               	movlb	3	; select bank3
 12289  0419  0861               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12290  041A  1D03               	btfss	3,2
 12291  041B  2C25               	goto	i1l5622
 12292                           
 12293                           ;PS_2.c: 618: {
 12294                           ;PS_2.c: 620: temp = Decode_Scan_Code_Function(PS_2_Read_Data_First);
 12295  041C  0862               	movf	_PS_2_Read_Data_First^(0+384),w
 12296  041D  318A  2241  3181   	fcall	_Decode_Scan_Code_Function
 12297  0420  0021               	movlb	1	; select bank1
 12298  0421  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12299  0422  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12300  0423  0023               	movlb	3	; select bank3
 12301  0424  00E1               	movwf	Process_PS2_ScanCode@temp^(0+384)
 12302  0425                     i1l5622:	
 12303                           
 12304                           ;PS_2.c: 621: }
 12305                           ;PS_2.c: 622: }
 12306                           ;PS_2.c: 624: if(((RControl || LControl) + (LALT || RALT) + Delete) == 3)
 12307  0425  01DE               	clrf	_Process_PS2_ScanCode$851^(0+384)
 12308  0426  0ADE               	incf	_Process_PS2_ScanCode$851^(0+384),f
 12309  0427  086A               	movf	_LALT^(0+384),w
 12310  0428  1D03               	btfss	3,2
 12311  0429  2C2E               	goto	i1l5630
 12312  042A  086D               	movf	_RALT^(0+384),w
 12313  042B  1D03               	btfss	3,2
 12314  042C  2C2E               	goto	i1l5630
 12315  042D  01DE               	clrf	_Process_PS2_ScanCode$851^(0+384)
 12316  042E                     i1l5630:	
 12317  042E  01DF               	clrf	_Process_PS2_ScanCode$852^(0+384)
 12318  042F  0ADF               	incf	_Process_PS2_ScanCode$852^(0+384),f
 12319  0430  0021               	movlb	1	; select bank1
 12320  0431  0855               	movf	_RControl^(0+128),w
 12321  0432  1D03               	btfss	3,2
 12322  0433  2C39               	goto	i1l5638
 12323  0434  0850               	movf	_LControl^(0+128),w
 12324  0435  1D03               	btfss	3,2
 12325  0436  2C39               	goto	i1l5638
 12326  0437  0023               	movlb	3	; select bank3
 12327  0438  01DF               	clrf	_Process_PS2_ScanCode$852^(0+384)
 12328  0439                     i1l5638:	
 12329  0439  0021               	movlb	1	; select bank1
 12330  043A  084F               	movf	_Delete^(0+128),w
 12331  043B  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12332  043C  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 12333  043D  0023               	movlb	3	; select bank3
 12334  043E  085F               	movf	_Process_PS2_ScanCode$852^(0+384),w
 12335  043F  075E               	addwf	_Process_PS2_ScanCode$851^(0+384),w
 12336  0440  0021               	movlb	1	; select bank1
 12337  0441  00BE               	movwf	(??_Process_PS2_ScanCode+2)^(0+128)
 12338  0442  01BF               	clrf	((??_Process_PS2_ScanCode+2)^(0+128)+1)
 12339  0443  0DBF               	rlf	(??_Process_PS2_ScanCode+3)^(0+128),f
 12340  0444  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12341  0445  073E               	addwf	(??_Process_PS2_ScanCode+2)^(0+128),w
 12342  0446  00C0               	movwf	(??_Process_PS2_ScanCode+4)^(0+128)
 12343  0447  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 12344  0448  3D3F               	addwfc	(??_Process_PS2_ScanCode+3)^(0+128),w
 12345  0449  00C1               	movwf	(??_Process_PS2_ScanCode+5)^(0+128)
 12346  044A  3003               	movlw	3
 12347  044B  0640               	xorwf	(??_Process_PS2_ScanCode+4)^(0+128),w
 12348  044C  0441               	iorwf	((??_Process_PS2_ScanCode+4)^(0+128)+1),w
 12349  044D  1D03               	btfss	3,2
 12350  044E  2CD0               	goto	i1l5682
 12351                           
 12352                           ;PS_2.c: 625: {
 12353                           ;PS_2.c: 627: UARTstringWAIT("\r\n");
 12354  044F  30FD               	movlw	low ((STR_14+16)| (0+32768))
 12355  0450  0020               	movlb	0	; select bank0
 12356  0451  00A1               	movwf	i1UARTstringWAIT@data
 12357  0452  3089               	movlw	high ((STR_14+16)| (0+32768))
 12358  0453  00A2               	movwf	i1UARTstringWAIT@data+1
 12359  0454  319B  234A  3181   	fcall	i1_UARTstringWAIT
 12360                           
 12361                           ;PS_2.c: 628: delayUS(15000);
 12362  0457  3000               	movlw	0
 12363  0458  00F3               	movwf	i1delayUS@US+3
 12364  0459  3000               	movlw	0
 12365  045A  00F2               	movwf	i1delayUS@US+2
 12366  045B  303A               	movlw	58
 12367  045C  00F1               	movwf	i1delayUS@US+1
 12368  045D  3098               	movlw	152
 12369  045E  00F0               	movwf	i1delayUS@US
 12370  045F  319B  23DB  3181   	fcall	i1_delayUS
 12371                           
 12372                           ;PS_2.c: 629: if(!BAUDMODE)
 12373  0462  0021               	movlb	1	; select bank1
 12374  0463  084C               	movf	_BAUDMODE^(0+128),w
 12375  0464  1D03               	btfss	3,2
 12376  0465  2C8D               	goto	i1l5658
 12377                           
 12378                           ;PS_2.c: 630: {
 12379                           ;PS_2.c: 631: BaudTyped =0;
 12380  0466  3000               	movlw	0
 12381  0467  00C9               	movwf	(_BaudTyped+3)^(0+128)
 12382  0468  3000               	movlw	0
 12383  0469  00C8               	movwf	(_BaudTyped+2)^(0+128)
 12384  046A  3000               	movlw	0
 12385  046B  00C7               	movwf	(_BaudTyped+1)^(0+128)
 12386  046C  3000               	movlw	0
 12387  046D  00C6               	movwf	_BaudTyped^(0+128)
 12388                           
 12389                           ;PS_2.c: 632: ParityTyped =0;
 12390  046E  0023               	movlb	3	; select bank3
 12391  046F  01EC               	clrf	_ParityTyped^(0+384)
 12392                           
 12393                           ;PS_2.c: 633: BAUDMODE = 1;
 12394  0470  0021               	movlb	1	; select bank1
 12395  0471  01CC               	clrf	_BAUDMODE^(0+128)
 12396  0472  0ACC               	incf	_BAUDMODE^(0+128),f
 12397                           
 12398                           ;PS_2.c: 634: UARTstringWAIT("Enter Baud rate \r\n");
 12399  0473  30ED               	movlw	low (STR_14| (0+32768))
 12400  0474  0020               	movlb	0	; select bank0
 12401  0475  00A1               	movwf	i1UARTstringWAIT@data
 12402  0476  3089               	movlw	high (STR_14| (0+32768))
 12403  0477  00A2               	movwf	i1UARTstringWAIT@data+1
 12404  0478  319B  234A  3181   	fcall	i1_UARTstringWAIT
 12405                           
 12406                           ;PS_2.c: 635: delayUS(15000);
 12407  047B  3000               	movlw	0
 12408  047C  00F3               	movwf	i1delayUS@US+3
 12409  047D  3000               	movlw	0
 12410  047E  00F2               	movwf	i1delayUS@US+2
 12411  047F  303A               	movlw	58
 12412  0480  00F1               	movwf	i1delayUS@US+1
 12413  0481  3098               	movlw	152
 12414  0482  00F0               	movwf	i1delayUS@US
 12415  0483  319B  23DB  3181   	fcall	i1_delayUS
 12416                           
 12417                           ;PS_2.c: 636: UARTchar('>' , 0, 0);
 12418  0486  01F8               	clrf	i1UARTchar@override
 12419  0487  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12420  0488  303E               	movlw	62
 12421  0489  319D  25CE  3181   	fcall	i1_UARTchar
 12422                           
 12423                           ;PS_2.c: 638: }
 12424  048C  2CC8               	goto	i1l5672
 12425  048D                     i1l5658:	
 12426                           
 12427                           ;PS_2.c: 639: else
 12428                           ;PS_2.c: 640: {
 12429                           ;PS_2.c: 641: BaudTyped = 9600;
 12430  048D  3000               	movlw	0
 12431  048E  0021               	movlb	1	; select bank1
 12432  048F  00C9               	movwf	(_BaudTyped+3)^(0+128)
 12433  0490  3000               	movlw	0
 12434  0491  00C8               	movwf	(_BaudTyped+2)^(0+128)
 12435  0492  3025               	movlw	37
 12436  0493  00C7               	movwf	(_BaudTyped+1)^(0+128)
 12437  0494  3080               	movlw	128
 12438  0495  00C6               	movwf	_BaudTyped^(0+128)
 12439                           
 12440                           ;PS_2.c: 642: UARTstringWAIT("Baud Reset to 9600");
 12441  0496  3000               	movlw	low (STR_15| (0+32768))
 12442  0497  0020               	movlb	0	; select bank0
 12443  0498  00A1               	movwf	i1UARTstringWAIT@data
 12444  0499  308A               	movlw	high (STR_15| (0+32768))
 12445  049A  00A2               	movwf	i1UARTstringWAIT@data+1
 12446  049B  319B  234A  3181   	fcall	i1_UARTstringWAIT
 12447                           
 12448                           ;PS_2.c: 643: UARTstringWAIT(NoParityMSG);
 12449  049E  3026               	movlw	low (_NoParityMSG| (0+32768))
 12450  049F  0020               	movlb	0	; select bank0
 12451  04A0  00A1               	movwf	i1UARTstringWAIT@data
 12452  04A1  3089               	movlw	high (_NoParityMSG| (0+32768))
 12453  04A2  00A2               	movwf	i1UARTstringWAIT@data+1
 12454  04A3  319B  234A  3181   	fcall	i1_UARTstringWAIT
 12455                           
 12456                           ;PS_2.c: 644: UARTstringWAIT("\r\n");
 12457  04A6  30FD               	movlw	low ((STR_14+16)| (0+32768))
 12458  04A7  0020               	movlb	0	; select bank0
 12459  04A8  00A1               	movwf	i1UARTstringWAIT@data
 12460  04A9  3089               	movlw	high ((STR_14+16)| (0+32768))
 12461  04AA  00A2               	movwf	i1UARTstringWAIT@data+1
 12462  04AB  319B  234A  3181   	fcall	i1_UARTstringWAIT
 12463                           
 12464                           ;PS_2.c: 645: delayUS(15000);
 12465  04AE  3000               	movlw	0
 12466  04AF  00F3               	movwf	i1delayUS@US+3
 12467  04B0  3000               	movlw	0
 12468  04B1  00F2               	movwf	i1delayUS@US+2
 12469  04B2  303A               	movlw	58
 12470  04B3  00F1               	movwf	i1delayUS@US+1
 12471  04B4  3098               	movlw	152
 12472  04B5  00F0               	movwf	i1delayUS@US
 12473  04B6  319B  23DB  3181   	fcall	i1_delayUS
 12474                           
 12475                           ;PS_2.c: 646: SetBaud(BaudTyped, 0);
 12476  04B9  0021               	movlb	1	; select bank1
 12477  04BA  0849               	movf	(_BaudTyped+3)^(0+128),w
 12478  04BB  00B2               	movwf	(SetBaud@Baud+3)^(0+128)
 12479  04BC  0848               	movf	(_BaudTyped+2)^(0+128),w
 12480  04BD  00B1               	movwf	(SetBaud@Baud+2)^(0+128)
 12481  04BE  0847               	movf	(_BaudTyped+1)^(0+128),w
 12482  04BF  00B0               	movwf	(SetBaud@Baud+1)^(0+128)
 12483  04C0  0846               	movf	_BaudTyped^(0+128),w
 12484  04C1  00AF               	movwf	SetBaud@Baud^(0+128)
 12485  04C2  01B3               	clrf	SetBaud@Parity^(0+128)
 12486  04C3  318B  2365  3181   	fcall	_SetBaud
 12487                           
 12488                           ;PS_2.c: 647: BAUDMODE = 0;
 12489  04C6  0021               	movlb	1	; select bank1
 12490  04C7  01CC               	clrf	_BAUDMODE^(0+128)
 12491  04C8                     i1l5672:	
 12492                           
 12493                           ;PS_2.c: 648: }
 12494                           ;PS_2.c: 649: RControl =0;
 12495  04C8  0021               	movlb	1	; select bank1
 12496  04C9  01D5               	clrf	_RControl^(0+128)
 12497                           
 12498                           ;PS_2.c: 650: LControl =0;
 12499  04CA  01D0               	clrf	_LControl^(0+128)
 12500                           
 12501                           ;PS_2.c: 651: LALT =0;
 12502  04CB  0023               	movlb	3	; select bank3
 12503  04CC  01EA               	clrf	_LALT^(0+384)
 12504                           
 12505                           ;PS_2.c: 652: RALT =0;
 12506  04CD  01ED               	clrf	_RALT^(0+384)
 12507                           
 12508                           ;PS_2.c: 653: Delete =0;
 12509  04CE  0021               	movlb	1	; select bank1
 12510  04CF  01CF               	clrf	_Delete^(0+128)
 12511  04D0                     i1l5682:	
 12512                           
 12513                           ;PS_2.c: 654: }
 12514                           ;PS_2.c: 656: if(temp)
 12515  04D0  0023               	movlb	3	; select bank3
 12516  04D1  0861               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12517  04D2  1903               	btfsc	3,2
 12518  04D3  2E58               	goto	i1l5788
 12519                           
 12520                           ;PS_2.c: 657: {
 12521                           ;PS_2.c: 659: if(temp == 0x01 && shortbreak == 0)
 12522  04D4  0361               	decf	Process_PS2_ScanCode@temp^(0+384),w
 12523  04D5  1D03               	btfss	3,2
 12524  04D6  2CE2               	goto	i1l5690
 12525  04D7  0860               	movf	Process_PS2_ScanCode@shortbreak^(0+384),w
 12526  04D8  1D03               	btfss	3,2
 12527  04D9  2CE2               	goto	i1l5690
 12528                           
 12529                           ;PS_2.c: 660: {
 12530                           ;PS_2.c: 662: UART_send_break_timed(100000);
 12531  04DA  30A0               	movlw	160
 12532  04DB  00FA               	movwf	UART_send_break_timed@US
 12533  04DC  3086               	movlw	134
 12534  04DD  00FB               	movwf	UART_send_break_timed@US+1
 12535  04DE  3190  2000  3181   	fcall	_UART_send_break_timed
 12536                           
 12537                           ;PS_2.c: 663: }
 12538  04E1  2E58               	goto	i1l5788
 12539  04E2                     i1l5690:	
 12540                           
 12541                           ;PS_2.c: 664: else if(temp == 0x01 && shortbreak == 1)
 12542  04E2  0023               	movlb	3	; select bank3
 12543  04E3  0361               	decf	Process_PS2_ScanCode@temp^(0+384),w
 12544  04E4  1D03               	btfss	3,2
 12545  04E5  2CEF               	goto	i1l5698
 12546  04E6  0360               	decf	Process_PS2_ScanCode@shortbreak^(0+384),w
 12547  04E7  1D03               	btfss	3,2
 12548  04E8  2CEF               	goto	i1l5698
 12549                           
 12550                           ;PS_2.c: 665: {
 12551                           ;PS_2.c: 667: UART_send_break();
 12552  04E9  3198  207A  3181   	fcall	_UART_send_break
 12553                           
 12554                           ;PS_2.c: 668: shortbreak = 0;
 12555  04EC  0023               	movlb	3	; select bank3
 12556  04ED  01E0               	clrf	Process_PS2_ScanCode@shortbreak^(0+384)
 12557                           
 12558                           ;PS_2.c: 669: }
 12559  04EE  2E58               	goto	i1l5788
 12560  04EF                     i1l5698:	
 12561                           
 12562                           ;PS_2.c: 670: else
 12563                           ;PS_2.c: 671: {
 12564                           ;PS_2.c: 672: if(!BAUDMODE)
 12565  04EF  0021               	movlb	1	; select bank1
 12566  04F0  084C               	movf	_BAUDMODE^(0+128),w
 12567  04F1  1D03               	btfss	3,2
 12568  04F2  2D0E               	goto	i1l5710
 12569                           
 12570                           ;PS_2.c: 673: {
 12571                           ;PS_2.c: 674: if(temp == '\n')
 12572  04F3  300A               	movlw	10
 12573  04F4  0023               	movlb	3	; select bank3
 12574  04F5  0661               	xorwf	Process_PS2_ScanCode@temp^(0+384),w
 12575  04F6  1D03               	btfss	3,2
 12576  04F7  2CFB               	goto	i1l5704
 12577                           
 12578                           ;PS_2.c: 675: {
 12579                           ;PS_2.c: 676: LineOverride = 1;
 12580  04F8  0021               	movlb	1	; select bank1
 12581  04F9  01D2               	clrf	_LineOverride^(0+128)
 12582  04FA  0AD2               	incf	_LineOverride^(0+128),f
 12583  04FB                     i1l5704:	
 12584                           
 12585                           ;PS_2.c: 677: }
 12586                           ;PS_2.c: 678: UARTchar(temp, 0, 0);
 12587  04FB  01F8               	clrf	i1UARTchar@override
 12588  04FC  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12589  04FD  0023               	movlb	3	; select bank3
 12590  04FE  0861               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12591  04FF  319D  25CE  3181   	fcall	i1_UARTchar
 12592                           
 12593                           ;PS_2.c: 679: if(temp == '\r')
 12594  0502  300D               	movlw	13
 12595  0503  0023               	movlb	3	; select bank3
 12596  0504  0661               	xorwf	Process_PS2_ScanCode@temp^(0+384),w
 12597  0505  1D03               	btfss	3,2
 12598  0506  2E58               	goto	i1l5788
 12599                           
 12600                           ;PS_2.c: 680: {
 12601                           ;PS_2.c: 681: UARTchar('\n', 0, 0);
 12602  0507  01F8               	clrf	i1UARTchar@override
 12603  0508  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12604  0509  300A               	movlw	10
 12605  050A  319D  25CE  3181   	fcall	i1_UARTchar
 12606                           
 12607                           ;PS_2.c: 682: }
 12608                           ;PS_2.c: 684: }
 12609  050D  2E58               	goto	i1l5788
 12610  050E                     i1l5710:	
 12611                           
 12612                           ;PS_2.c: 685: else
 12613                           ;PS_2.c: 686: {
 12614                           ;PS_2.c: 687: if(ISNUMBER(temp))
 12615  050E  0023               	movlb	3	; select bank3
 12616  050F  0861               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12617  0510  3199  2114  3181   	fcall	_ISNUMBER
 12618  0513  3A00               	xorlw	0
 12619  0514  1903               	skipnz
 12620  0515  2D55               	goto	i1l5718
 12621                           
 12622                           ;PS_2.c: 688: {
 12623                           ;PS_2.c: 689: BaudTyped*=10;
 12624  0516  3000               	movlw	0
 12625  0517  00F3               	movwf	___lmul@multiplier+3
 12626  0518  3000               	movlw	0
 12627  0519  00F2               	movwf	___lmul@multiplier+2
 12628  051A  3000               	movlw	0
 12629  051B  00F1               	movwf	___lmul@multiplier+1
 12630  051C  300A               	movlw	10
 12631  051D  00F0               	movwf	___lmul@multiplier
 12632  051E  0021               	movlb	1	; select bank1
 12633  051F  0849               	movf	(_BaudTyped+3)^(0+128),w
 12634  0520  00F7               	movwf	___lmul@multiplicand+3
 12635  0521  0848               	movf	(_BaudTyped+2)^(0+128),w
 12636  0522  00F6               	movwf	___lmul@multiplicand+2
 12637  0523  0847               	movf	(_BaudTyped+1)^(0+128),w
 12638  0524  00F5               	movwf	___lmul@multiplicand+1
 12639  0525  0846               	movf	_BaudTyped^(0+128),w
 12640  0526  00F4               	movwf	___lmul@multiplicand
 12641  0527  319A  22EC  3181   	fcall	___lmul
 12642  052A  0873               	movf	?___lmul+3,w
 12643  052B  0021               	movlb	1	; select bank1
 12644  052C  00C9               	movwf	(_BaudTyped+3)^(0+128)
 12645  052D  0872               	movf	?___lmul+2,w
 12646  052E  00C8               	movwf	(_BaudTyped+2)^(0+128)
 12647  052F  0871               	movf	?___lmul+1,w
 12648  0530  00C7               	movwf	(_BaudTyped+1)^(0+128)
 12649  0531  0870               	movf	?___lmul,w
 12650  0532  00C6               	movwf	_BaudTyped^(0+128)
 12651                           
 12652                           ;PS_2.c: 690: BaudTyped += temp - 48;
 12653  0533  0023               	movlb	3	; select bank3
 12654  0534  0861               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12655  0535  3ED0               	addlw	208
 12656  0536  0021               	movlb	1	; select bank1
 12657  0537  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12658  0538  30FF               	movlw	255
 12659  0539  1803               	skipnc
 12660  053A  3000               	movlw	0
 12661  053B  00BD               	movwf	(??_Process_PS2_ScanCode^(0+128)+1)
 12662  053C  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12663  053D  00BE               	movwf	(??_Process_PS2_ScanCode+2)^(0+128)
 12664  053E  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 12665  053F  00BF               	movwf	((??_Process_PS2_ScanCode+2)^(0+128)+1)
 12666  0540  3000               	movlw	0
 12667  0541  1BBF               	btfsc	((??_Process_PS2_ScanCode+2)^(0+128)+1),7
 12668  0542  30FF               	movlw	255
 12669  0543  00C0               	movwf	((??_Process_PS2_ScanCode+2)^(0+128)+2)
 12670  0544  00C1               	movwf	((??_Process_PS2_ScanCode+2)^(0+128)+3)
 12671  0545  083E               	movf	(??_Process_PS2_ScanCode+2)^(0+128),w
 12672  0546  07C6               	addwf	_BaudTyped^(0+128),f
 12673  0547  083F               	movf	(??_Process_PS2_ScanCode+3)^(0+128),w
 12674  0548  3DC7               	addwfc	(_BaudTyped+1)^(0+128),f
 12675  0549  0840               	movf	(??_Process_PS2_ScanCode+4)^(0+128),w
 12676  054A  3DC8               	addwfc	(_BaudTyped+2)^(0+128),f
 12677  054B  0841               	movf	(??_Process_PS2_ScanCode+5)^(0+128),w
 12678  054C  3DC9               	addwfc	(_BaudTyped+3)^(0+128),f
 12679                           
 12680                           ;PS_2.c: 691: UARTchar(temp, 0, 0);
 12681  054D  01F8               	clrf	i1UARTchar@override
 12682  054E  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12683  054F  0023               	movlb	3	; select bank3
 12684  0550  0861               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12685  0551  319D  25CE  3181   	fcall	i1_UARTchar
 12686                           
 12687                           ;PS_2.c: 692: }
 12688  0554  2E58               	goto	i1l5788
 12689  0555                     i1l5718:	
 12690                           
 12691                           ;PS_2.c: 693: else if(temp == 'o' || temp == 'O')
 12692  0555  306F               	movlw	111
 12693  0556  0023               	movlb	3	; select bank3
 12694  0557  0661               	xorwf	Process_PS2_ScanCode@temp^(0+384),w
 12695  0558  1903               	btfsc	3,2
 12696  0559  2D5E               	goto	i1l797
 12697  055A  304F               	movlw	79
 12698  055B  0661               	xorwf	Process_PS2_ScanCode@temp^(0+384),w
 12699  055C  1D03               	btfss	3,2
 12700  055D  2D67               	goto	i1l5724
 12701  055E                     i1l797:	
 12702                           
 12703                           ;PS_2.c: 694: {
 12704                           ;PS_2.c: 695: ParityTyped = 1;
 12705  055E  01EC               	clrf	_ParityTyped^(0+384)
 12706  055F  0AEC               	incf	_ParityTyped^(0+384),f
 12707                           
 12708                           ;PS_2.c: 696: UARTchar(temp, 0, 0);
 12709  0560  01F8               	clrf	i1UARTchar@override
 12710  0561  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12711  0562  0861               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12712  0563  319D  25CE  3181   	fcall	i1_UARTchar
 12713                           
 12714                           ;PS_2.c: 697: }
 12715  0566  2E58               	goto	i1l5788
 12716  0567                     i1l5724:	
 12717                           
 12718                           ;PS_2.c: 698: else if(temp == 'e' || temp == 'E')
 12719  0567  3065               	movlw	101
 12720  0568  0023               	movlb	3	; select bank3
 12721  0569  0661               	xorwf	Process_PS2_ScanCode@temp^(0+384),w
 12722  056A  1903               	btfsc	3,2
 12723  056B  2D70               	goto	i1l5728
 12724  056C  3045               	movlw	69
 12725  056D  0661               	xorwf	Process_PS2_ScanCode@temp^(0+384),w
 12726  056E  1D03               	btfss	3,2
 12727  056F  2D7D               	goto	i1l5732
 12728  0570                     i1l5728:	
 12729                           
 12730                           ;PS_2.c: 699: {
 12731                           ;PS_2.c: 700: ParityTyped = 2;
 12732  0570  3002               	movlw	2
 12733  0571  0021               	movlb	1	; select bank1
 12734  0572  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12735  0573  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12736  0574  0023               	movlb	3	; select bank3
 12737  0575  00EC               	movwf	_ParityTyped^(0+384)
 12738                           
 12739                           ;PS_2.c: 701: UARTchar(temp, 0, 0);
 12740  0576  01F8               	clrf	i1UARTchar@override
 12741  0577  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12742  0578  0861               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12743  0579  319D  25CE  3181   	fcall	i1_UARTchar
 12744                           
 12745                           ;PS_2.c: 702: }
 12746  057C  2E58               	goto	i1l5788
 12747  057D                     i1l5732:	
 12748                           
 12749                           ;PS_2.c: 703: else if(temp == 'm' || temp == 'M')
 12750  057D  306D               	movlw	109
 12751  057E  0023               	movlb	3	; select bank3
 12752  057F  0661               	xorwf	Process_PS2_ScanCode@temp^(0+384),w
 12753  0580  1903               	btfsc	3,2
 12754  0581  2D86               	goto	i1l5736
 12755  0582  304D               	movlw	77
 12756  0583  0661               	xorwf	Process_PS2_ScanCode@temp^(0+384),w
 12757  0584  1D03               	btfss	3,2
 12758  0585  2D93               	goto	i1l5740
 12759  0586                     i1l5736:	
 12760                           
 12761                           ;PS_2.c: 704: {
 12762                           ;PS_2.c: 705: ParityTyped = 3;
 12763  0586  3003               	movlw	3
 12764  0587  0021               	movlb	1	; select bank1
 12765  0588  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12766  0589  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12767  058A  0023               	movlb	3	; select bank3
 12768  058B  00EC               	movwf	_ParityTyped^(0+384)
 12769                           
 12770                           ;PS_2.c: 706: UARTchar(temp, 0, 0);
 12771  058C  01F8               	clrf	i1UARTchar@override
 12772  058D  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12773  058E  0861               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12774  058F  319D  25CE  3181   	fcall	i1_UARTchar
 12775                           
 12776                           ;PS_2.c: 707: }
 12777  0592  2E58               	goto	i1l5788
 12778  0593                     i1l5740:	
 12779                           
 12780                           ;PS_2.c: 708: else if(temp == 's' || temp == 'S')
 12781  0593  3073               	movlw	115
 12782  0594  0023               	movlb	3	; select bank3
 12783  0595  0661               	xorwf	Process_PS2_ScanCode@temp^(0+384),w
 12784  0596  1903               	btfsc	3,2
 12785  0597  2D9C               	goto	i1l5744
 12786  0598  3053               	movlw	83
 12787  0599  0661               	xorwf	Process_PS2_ScanCode@temp^(0+384),w
 12788  059A  1D03               	btfss	3,2
 12789  059B  2DA9               	goto	i1l5748
 12790  059C                     i1l5744:	
 12791                           
 12792                           ;PS_2.c: 709: {
 12793                           ;PS_2.c: 710: ParityTyped = 4;
 12794  059C  3004               	movlw	4
 12795  059D  0021               	movlb	1	; select bank1
 12796  059E  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12797  059F  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12798  05A0  0023               	movlb	3	; select bank3
 12799  05A1  00EC               	movwf	_ParityTyped^(0+384)
 12800                           
 12801                           ;PS_2.c: 711: UARTchar(temp, 0, 0);
 12802  05A2  01F8               	clrf	i1UARTchar@override
 12803  05A3  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12804  05A4  0861               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12805  05A5  319D  25CE  3181   	fcall	i1_UARTchar
 12806                           
 12807                           ;PS_2.c: 712: }
 12808  05A8  2E58               	goto	i1l5788
 12809  05A9                     i1l5748:	
 12810                           
 12811                           ;PS_2.c: 713: else if(temp == '\r')
 12812  05A9  300D               	movlw	13
 12813  05AA  0023               	movlb	3	; select bank3
 12814  05AB  0661               	xorwf	Process_PS2_ScanCode@temp^(0+384),w
 12815  05AC  1D03               	btfss	3,2
 12816  05AD  2E58               	goto	i1l5788
 12817                           
 12818                           ;PS_2.c: 714: {
 12819                           ;PS_2.c: 715: UARTstringWAIT("\r\n");
 12820  05AE  30FD               	movlw	low ((STR_14+16)| (0+32768))
 12821  05AF  0020               	movlb	0	; select bank0
 12822  05B0  00A1               	movwf	i1UARTstringWAIT@data
 12823  05B1  3089               	movlw	high ((STR_14+16)| (0+32768))
 12824  05B2  00A2               	movwf	i1UARTstringWAIT@data+1
 12825  05B3  319B  234A  3181   	fcall	i1_UARTstringWAIT
 12826                           
 12827                           ;PS_2.c: 716: delayUS(15000);
 12828  05B6  3000               	movlw	0
 12829  05B7  00F3               	movwf	i1delayUS@US+3
 12830  05B8  3000               	movlw	0
 12831  05B9  00F2               	movwf	i1delayUS@US+2
 12832  05BA  303A               	movlw	58
 12833  05BB  00F1               	movwf	i1delayUS@US+1
 12834  05BC  3098               	movlw	152
 12835  05BD  00F0               	movwf	i1delayUS@US
 12836  05BE  319B  23DB  3181   	fcall	i1_delayUS
 12837                           
 12838                           ;PS_2.c: 717: if(BaudTyped >=2400 && BaudTyped <= 115200)
 12839  05C1  0021               	movlb	1	; select bank1
 12840  05C2  0849               	movf	(_BaudTyped+3)^(0+128),w
 12841  05C3  1D03               	btfss	3,2
 12842  05C4  2DCE               	goto	i1l5756
 12843  05C5  0848               	movf	(_BaudTyped+2)^(0+128),w
 12844  05C6  1D03               	btfss	3,2
 12845  05C7  2DCE               	goto	i1l5756
 12846  05C8  3060               	movlw	96
 12847  05C9  0246               	subwf	_BaudTyped^(0+128),w
 12848  05CA  3009               	movlw	9
 12849  05CB  3B47               	subwfb	(_BaudTyped+1)^(0+128),w
 12850  05CC  1C03               	btfss	3,0
 12851  05CD  2E43               	goto	i1l5782
 12852  05CE                     i1l5756:	
 12853  05CE  0849               	movf	(_BaudTyped+3)^(0+128),w
 12854  05CF  1D03               	btfss	3,2
 12855  05D0  2E43               	goto	i1l5782
 12856  05D1  3001               	movlw	1
 12857  05D2  0246               	subwf	_BaudTyped^(0+128),w
 12858  05D3  30C2               	movlw	194
 12859  05D4  3B47               	subwfb	(_BaudTyped+1)^(0+128),w
 12860  05D5  3001               	movlw	1
 12861  05D6  3B48               	subwfb	(_BaudTyped+2)^(0+128),w
 12862  05D7  1803               	btfsc	3,0
 12863  05D8  2E43               	goto	i1l5782
 12864                           
 12865                           ;PS_2.c: 718: {
 12866                           ;PS_2.c: 719: sprintf(buf,"Baud will be set to %lu",BaudTyped);
 12867  05D9  30AC               	movlw	low (STR_18| (0+32768))
 12868  05DA  0020               	movlb	0	; select bank0
 12869  05DB  00AA               	movwf	sprintf@f
 12870  05DC  3089               	movlw	high (STR_18| (0+32768))
 12871  05DD  00AB               	movwf	sprintf@f+1
 12872  05DE  0021               	movlb	1	; select bank1
 12873  05DF  0849               	movf	(_BaudTyped+3)^(0+128),w
 12874  05E0  0020               	movlb	0	; select bank0
 12875  05E1  00AF               	movwf	?_sprintf+5
 12876  05E2  0021               	movlb	1	; select bank1
 12877  05E3  0848               	movf	(_BaudTyped+2)^(0+128),w
 12878  05E4  0020               	movlb	0	; select bank0
 12879  05E5  00AE               	movwf	?_sprintf+4
 12880  05E6  0021               	movlb	1	; select bank1
 12881  05E7  0847               	movf	(_BaudTyped+1)^(0+128),w
 12882  05E8  0020               	movlb	0	; select bank0
 12883  05E9  00AD               	movwf	?_sprintf+3
 12884  05EA  0021               	movlb	1	; select bank1
 12885  05EB  0846               	movf	_BaudTyped^(0+128),w
 12886  05EC  0020               	movlb	0	; select bank0
 12887  05ED  00AC               	movwf	?_sprintf+2
 12888  05EE  30A0               	movlw	(low (Process_PS2_ScanCode@buf| (0+256)))& (0+255)
 12889  05EF  3197  270A  3181   	fcall	_sprintf
 12890                           
 12891                           ;PS_2.c: 720: UARTstringWAIT(buf);
 12892  05F2  30A0               	movlw	low Process_PS2_ScanCode@buf
 12893  05F3  0020               	movlb	0	; select bank0
 12894  05F4  00A1               	movwf	i1UARTstringWAIT@data
 12895  05F5  3001               	movlw	high Process_PS2_ScanCode@buf
 12896  05F6  00A2               	movwf	i1UARTstringWAIT@data+1
 12897  05F7  319B  234A  3181   	fcall	i1_UARTstringWAIT
 12898                           
 12899                           ;PS_2.c: 721: if(ParityTyped)
 12900  05FA  0023               	movlb	3	; select bank3
 12901  05FB  086C               	movf	_ParityTyped^(0+384),w
 12902  05FC  1D03               	btfss	3,2
 12903  05FD  2E13               	goto	i1l5776
 12904  05FE  2E20               	goto	i1l5778
 12905  05FF                     i1l5766:	
 12906                           ;PS_2.c: 724: {
 12907                           ;PS_2.c: 725: case 1:
 12908                           
 12909                           ;PS_2.c: 722: {
 12910                           ;PS_2.c: 723: switch (ParityTyped)
 12911                           
 12912                           
 12913                           ;PS_2.c: 726: UARTstringWAIT(OddParityMSG);
 12914  05FF  3011               	movlw	low (_OddParityMSG| (0+32768))
 12915  0600  0020               	movlb	0	; select bank0
 12916  0601  00A1               	movwf	i1UARTstringWAIT@data
 12917  0602  3089               	movlw	high (_OddParityMSG| (0+32768))
 12918  0603  2E24               	goto	L7
 12919  0604                     i1l5768:	
 12920                           ;PS_2.c: 728: case 2:
 12921                           
 12922                           ;PS_2.c: 727: break;
 12923                           
 12924                           
 12925                           ;PS_2.c: 729: UARTstringWAIT(EvenParityMSG);
 12926  0604  30FB               	movlw	low (_EvenParityMSG| (0+32768))
 12927  0605  0020               	movlb	0	; select bank0
 12928  0606  00A1               	movwf	i1UARTstringWAIT@data
 12929  0607  3088               	movlw	high (_EvenParityMSG| (0+32768))
 12930  0608  2E24               	goto	L7
 12931  0609                     i1l5770:	
 12932                           ;PS_2.c: 731: case 3:
 12933                           
 12934                           ;PS_2.c: 730: break;
 12935                           
 12936                           
 12937                           ;PS_2.c: 732: UARTstringWAIT(MarkParityMSG);
 12938  0609  304A               	movlw	low (_MarkParityMSG| (0+32768))
 12939  060A  0020               	movlb	0	; select bank0
 12940  060B  00A1               	movwf	i1UARTstringWAIT@data
 12941  060C  3089               	movlw	high (_MarkParityMSG| (0+32768))
 12942  060D  2E24               	goto	L7
 12943  060E                     i1l5772:	
 12944                           ;PS_2.c: 734: default:
 12945                           
 12946                           ;PS_2.c: 733: break;
 12947                           
 12948                           
 12949                           ;PS_2.c: 735: UARTstringWAIT(SpaceParityMSG);
 12950  060E  303A               	movlw	low (_SpaceParityMSG| (0+32768))
 12951  060F  0020               	movlb	0	; select bank0
 12952  0610  00A1               	movwf	i1UARTstringWAIT@data
 12953  0611  3089               	movlw	high (_SpaceParityMSG| (0+32768))
 12954  0612  2E24               	goto	L7
 12955  0613                     i1l5776:	
 12956                           ;PS_2.c: 737: }
 12957                           
 12958                           ;PS_2.c: 736: break;
 12959                           
 12960  0613  0023               	movlb	3	; select bank3
 12961  0614  086C               	movf	_ParityTyped^(0+384),w
 12962                           
 12963                           ; Switch size 1, requested type "space"
 12964                           ; Number of cases is 3, Range of values is 1 to 3
 12965                           ; switch strategies available:
 12966                           ; Name         Instructions Cycles
 12967                           ; simple_byte           10     6 (average)
 12968                           ; direct_byte           15     9 (fixed)
 12969                           ; jumptable            263     9 (fixed)
 12970                           ;	Chosen strategy is simple_byte
 12971  0615  3A01               	xorlw	1	; case 1
 12972  0616  1903               	skipnz
 12973  0617  2DFF               	goto	i1l5766
 12974  0618  3A03               	xorlw	3	; case 2
 12975  0619  1903               	skipnz
 12976  061A  2E04               	goto	i1l5768
 12977  061B  3A01               	xorlw	1	; case 3
 12978  061C  1903               	skipnz
 12979  061D  2E09               	goto	i1l5770
 12980  061E  2E0E               	goto	i1l5772
 12981                           
 12982                           ;PS_2.c: 738: }
 12983  061F  2E28               	goto	i1l820
 12984  0620                     i1l5778:	
 12985                           
 12986                           ;PS_2.c: 739: else
 12987                           ;PS_2.c: 740: {
 12988                           ;PS_2.c: 741: UARTstringWAIT(NoParityMSG);
 12989  0620  3026               	movlw	low (_NoParityMSG| (0+32768))
 12990  0621  0020               	movlb	0	; select bank0
 12991  0622  00A1               	movwf	i1UARTstringWAIT@data
 12992  0623  3089               	movlw	high (_NoParityMSG| (0+32768))
 12993  0624                     L7:	
 12994  0624  00A2               	movwf	i1UARTstringWAIT@data+1
 12995  0625  319B  234A  3181   	fcall	i1_UARTstringWAIT
 12996  0628                     i1l820:	
 12997                           
 12998                           ;PS_2.c: 742: }
 12999                           ;PS_2.c: 743: UARTstringWAIT("\r\n");
 13000  0628  30FD               	movlw	low ((STR_14+16)| (0+32768))
 13001  0629  0020               	movlb	0	; select bank0
 13002  062A  00A1               	movwf	i1UARTstringWAIT@data
 13003  062B  3089               	movlw	high ((STR_14+16)| (0+32768))
 13004  062C  00A2               	movwf	i1UARTstringWAIT@data+1
 13005  062D  319B  234A  3181   	fcall	i1_UARTstringWAIT
 13006                           
 13007                           ;PS_2.c: 744: SetBaud(BaudTyped, ParityTyped);
 13008  0630  0021               	movlb	1	; select bank1
 13009  0631  0849               	movf	(_BaudTyped+3)^(0+128),w
 13010  0632  00B2               	movwf	(SetBaud@Baud+3)^(0+128)
 13011  0633  0848               	movf	(_BaudTyped+2)^(0+128),w
 13012  0634  00B1               	movwf	(SetBaud@Baud+2)^(0+128)
 13013  0635  0847               	movf	(_BaudTyped+1)^(0+128),w
 13014  0636  00B0               	movwf	(SetBaud@Baud+1)^(0+128)
 13015  0637  0846               	movf	_BaudTyped^(0+128),w
 13016  0638  00AF               	movwf	SetBaud@Baud^(0+128)
 13017  0639  0023               	movlb	3	; select bank3
 13018  063A  086C               	movf	_ParityTyped^(0+384),w
 13019  063B  0021               	movlb	1	; select bank1
 13020  063C  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 13021  063D  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 13022  063E  00B3               	movwf	SetBaud@Parity^(0+128)
 13023  063F  318B  2365  3181   	fcall	_SetBaud
 13024                           
 13025                           ;PS_2.c: 745: }
 13026  0642  2E56               	goto	i1l5786
 13027  0643                     i1l5782:	
 13028                           
 13029                           ;PS_2.c: 746: else
 13030                           ;PS_2.c: 747: {
 13031                           ;PS_2.c: 748: UARTstringWAIT("Baud Out of Range\r\n");
 13032  0643  30D9               	movlw	low (STR_20| (0+32768))
 13033  0644  0020               	movlb	0	; select bank0
 13034  0645  00A1               	movwf	i1UARTstringWAIT@data
 13035  0646  3089               	movlw	high (STR_20| (0+32768))
 13036  0647  00A2               	movwf	i1UARTstringWAIT@data+1
 13037  0648  319B  234A  3181   	fcall	i1_UARTstringWAIT
 13038                           
 13039                           ;PS_2.c: 749: delayUS(15000);
 13040  064B  3000               	movlw	0
 13041  064C  00F3               	movwf	i1delayUS@US+3
 13042  064D  3000               	movlw	0
 13043  064E  00F2               	movwf	i1delayUS@US+2
 13044  064F  303A               	movlw	58
 13045  0650  00F1               	movwf	i1delayUS@US+1
 13046  0651  3098               	movlw	152
 13047  0652  00F0               	movwf	i1delayUS@US
 13048  0653  319B  23DB  3181   	fcall	i1_delayUS
 13049  0656                     i1l5786:	
 13050                           
 13051                           ;PS_2.c: 750: }
 13052                           ;PS_2.c: 751: BAUDMODE=0;
 13053  0656  0021               	movlb	1	; select bank1
 13054  0657  01CC               	clrf	_BAUDMODE^(0+128)
 13055  0658                     i1l5788:	
 13056                           
 13057                           ;PS_2.c: 752: }
 13058                           ;PS_2.c: 753: }
 13059                           ;PS_2.c: 754: }
 13060                           ;PS_2.c: 755: }
 13061                           ;PS_2.c: 758: temp =0;
 13062  0658  0023               	movlb	3	; select bank3
 13063  0659  01E1               	clrf	Process_PS2_ScanCode@temp^(0+384)
 13064                           
 13065                           ;PS_2.c: 759: PS_2_Read_Data_First =0;
 13066  065A  01E2               	clrf	_PS_2_Read_Data_First^(0+384)
 13067  065B  01E3               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
 13068                           
 13069                           ;PS_2.c: 760: PS_2_Read_Data_Second =0;
 13070  065C  01E4               	clrf	_PS_2_Read_Data_Second^(0+384)
 13071  065D  01E5               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
 13072                           
 13073                           ;PS_2.c: 761: PS_2_Read_Data_Third =0;
 13074  065E  01E6               	clrf	_PS_2_Read_Data_Third^(0+384)
 13075  065F  01E7               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
 13076                           
 13077                           ;PS_2.c: 762: Caps_Lock_Key_old = Caps_Lock_Key;
 13078  0660  0021               	movlb	1	; select bank1
 13079  0661  084D               	movf	_Caps_Lock_Key^(0+128),w
 13080  0662  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 13081  0663  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 13082  0664  00CE               	movwf	_Caps_Lock_Key_old^(0+128)
 13083                           
 13084                           ;PS_2.c: 763: Right_Shift_Key_old = Right_Shift_Key;
 13085  0665  0023               	movlb	3	; select bank3
 13086  0666  086E               	movf	_Right_Shift_Key^(0+384),w
 13087  0667  0021               	movlb	1	; select bank1
 13088  0668  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 13089  0669  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 13090  066A  00D7               	movwf	_Right_Shift_Key_old^(0+128)
 13091                           
 13092                           ;PS_2.c: 764: Left_Shift_Key_old = Left_Shift_Key;
 13093  066B  0023               	movlb	3	; select bank3
 13094  066C  086B               	movf	_Left_Shift_Key^(0+384),w
 13095  066D  0021               	movlb	1	; select bank1
 13096  066E  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 13097  066F  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 13098  0670  00D1               	movwf	_Left_Shift_Key_old^(0+128)
 13099                           
 13100                           ;PS_2.c: 765: LATC &= ~0b00010000;
 13101  0671  30EF               	movlw	239
 13102  0672  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 13103  0673  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 13104  0674  0022               	movlb	2	; select bank2
 13105  0675  058E               	andwf	14,f	;volatile
 13106                           
 13107                           ;PS_2.c: 766: }
 13108  0676  2928               	goto	i1l5808
 13109  0677                     i1l5804:	
 13110                           
 13111                           ;PS_2.c: 767: else
 13112                           ;PS_2.c: 768: {
 13113                           ;PS_2.c: 770: cleanBuffer(PS_2_ScanCodes, 12);
 13114  0677  300C               	movlw	12
 13115  0678  00F0               	movwf	cleanBuffer@count
 13116  0679  3000               	movlw	0
 13117  067A  00F1               	movwf	cleanBuffer@count+1
 13118  067B  30D9               	movlw	(low (_PS_2_ScanCodes| 0))& (0+255)
 13119  067C  3199  21D8  3181   	fcall	_cleanBuffer
 13120                           
 13121                           ;PS_2.c: 771: PS_2_Buffer_items = 0;
 13122  067F  0021               	movlb	1	; select bank1
 13123  0680  01D3               	clrf	_PS_2_Buffer_items^(0+128)
 13124  0681  2928               	goto	i1l5808
 13125  0682                     __end_of_Process_PS2_ScanCode:	
 13126                           
 13127                           	psect	text43
 13128  0CDE                     __ptext43:	
 13129 ;; *************** function i1_Send_PS2 *****************
 13130 ;; Defined at:
 13131 ;;		line 856 in file "PS_2.c"
 13132 ;; Parameters:    Size  Location     Type
 13133 ;;  command         1    wreg     unsigned char 
 13134 ;; Auto vars:     Size  Location     Type
 13135 ;;  command         1    1[BANK0 ] unsigned char 
 13136 ;;  Send_PS2        2    3[BANK0 ] unsigned int 
 13137 ;;  Send_PS2        1    2[BANK0 ] unsigned char 
 13138 ;;  Send_PS2        1    0[BANK0 ] unsigned char 
 13139 ;; Return value:  Size  Location     Type
 13140 ;;                  1    wreg      unsigned char 
 13141 ;; Registers used:
 13142 ;;		wreg, status,2, status,0, pclath, cstack
 13143 ;; Tracked objects:
 13144 ;;		On entry : 0/0
 13145 ;;		On exit  : 0/0
 13146 ;;		Unchanged: 0/0
 13147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13149 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13150 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13151 ;;      Totals:         4       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13152 ;;Total ram usage:        9 bytes
 13153 ;; Hardware stack levels used:    1
 13154 ;; Hardware stack levels required when called:    1
 13155 ;; This function calls:
 13156 ;;		i1_CheckSum_byte
 13157 ;;		i1_Clock_TRIS
 13158 ;;		i1_Data_TRIS
 13159 ;;		i1_READ_PS_2_PIN
 13160 ;;		i1_delayUS
 13161 ;; This function is called by:
 13162 ;;		_Process_PS2_ScanCode
 13163 ;;		_ResendLast
 13164 ;; This function uses a non-reentrant model
 13165 ;;
 13166                           
 13167                           
 13168                           ;psect for function i1_Send_PS2
 13169  0CDE                     i1_Send_PS2:	
 13170                           
 13171                           ;incstack = 0
 13172                           ; Regs used in i1_Send_PS2: [wreg+status,2+status,0+pclath+cstack]
 13173                           ;i1Send_PS2@command stored from wreg
 13174  0CDE  0020               	movlb	0	; select bank0
 13175  0CDF  00A1               	movwf	i1Send_PS2@command
 13176                           
 13177                           ;PS_2.c: 858: unsigned char i=0;
 13178  0CE0  01A2               	clrf	i1Send_PS2@i
 13179                           
 13180                           ;PS_2.c: 859: unsigned char oddparity = CheckSum_byte((unsigned int)command , 3);
 13181  0CE1  0821               	movf	i1Send_PS2@command,w
 13182  0CE2  00FA               	movwf	??i1_Send_PS2
 13183  0CE3  01FB               	clrf	??i1_Send_PS2+1
 13184  0CE4  087A               	movf	??i1_Send_PS2,w
 13185  0CE5  00F0               	movwf	i1CheckSum_byte@This
 13186  0CE6  087B               	movf	??i1_Send_PS2+1,w
 13187  0CE7  00F1               	movwf	i1CheckSum_byte@This+1
 13188  0CE8  3003               	movlw	3
 13189  0CE9  00FC               	movwf	??i1_Send_PS2+2
 13190  0CEA  087C               	movf	??i1_Send_PS2+2,w
 13191  0CEB  00F2               	movwf	i1CheckSum_byte@Odd_Even
 13192  0CEC  319A  22BE  318C   	fcall	i1_CheckSum_byte
 13193  0CEF  00FD               	movwf	??i1_Send_PS2+3
 13194  0CF0  087D               	movf	??i1_Send_PS2+3,w
 13195  0CF1  0020               	movlb	0	; select bank0
 13196  0CF2  00A0               	movwf	i1Send_PS2@oddparity
 13197                           
 13198                           ;PS_2.c: 860: unsigned int timeout =0;
 13199  0CF3  01A3               	clrf	i1Send_PS2@timeout
 13200  0CF4  01A4               	clrf	i1Send_PS2@timeout+1
 13201                           
 13202                           ;PS_2.c: 862: Clock_TRIS(0);
 13203  0CF5  3000               	movlw	0
 13204  0CF6  3198  20B2  318C   	fcall	i1_Clock_TRIS
 13205                           
 13206                           ;PS_2.c: 863: Data_TRIS(0);
 13207  0CF9  3000               	movlw	0
 13208  0CFA  3198  20BC  318C   	fcall	i1_Data_TRIS
 13209                           
 13210                           ;PS_2.c: 864: LATA &= ~0b00100000;
 13211  0CFD  30DF               	movlw	223
 13212  0CFE  00FA               	movwf	??i1_Send_PS2
 13213  0CFF  087A               	movf	??i1_Send_PS2,w
 13214  0D00  0022               	movlb	2	; select bank2
 13215  0D01  058C               	andwf	12,f	;volatile
 13216                           
 13217                           ;PS_2.c: 865: delayUS(300);
 13218  0D02  3000               	movlw	0
 13219  0D03  00F3               	movwf	i1delayUS@US+3
 13220  0D04  3000               	movlw	0
 13221  0D05  00F2               	movwf	i1delayUS@US+2
 13222  0D06  3001               	movlw	1
 13223  0D07  00F1               	movwf	i1delayUS@US+1
 13224  0D08  302C               	movlw	44
 13225  0D09  00F0               	movwf	i1delayUS@US
 13226  0D0A  319B  23DB  318C   	fcall	i1_delayUS
 13227                           
 13228                           ;PS_2.c: 866: LATA &= ~0b00010000;
 13229  0D0D  30EF               	movlw	239
 13230  0D0E  00FA               	movwf	??i1_Send_PS2
 13231  0D0F  087A               	movf	??i1_Send_PS2,w
 13232  0D10  0022               	movlb	2	; select bank2
 13233  0D11  058C               	andwf	12,f	;volatile
 13234                           
 13235                           ;PS_2.c: 867: delayUS(20);
 13236  0D12  3000               	movlw	0
 13237  0D13  00F3               	movwf	i1delayUS@US+3
 13238  0D14  3000               	movlw	0
 13239  0D15  00F2               	movwf	i1delayUS@US+2
 13240  0D16  3000               	movlw	0
 13241  0D17  00F1               	movwf	i1delayUS@US+1
 13242  0D18  3014               	movlw	20
 13243  0D19  00F0               	movwf	i1delayUS@US
 13244  0D1A  319B  23DB  318C   	fcall	i1_delayUS
 13245                           
 13246                           ;PS_2.c: 868: Clock_TRIS(1);
 13247  0D1D  3001               	movlw	1
 13248  0D1E  3198  20B2  318C   	fcall	i1_Clock_TRIS
 13249                           
 13250                           ;PS_2.c: 869: timeout=0;
 13251  0D21  0020               	movlb	0	; select bank0
 13252  0D22  01A3               	clrf	i1Send_PS2@timeout
 13253  0D23  01A4               	clrf	i1Send_PS2@timeout+1
 13254  0D24                     i1l5150:	
 13255                           ;PS_2.c: 870: while(READ_PS_2_PIN(0b00100000))
 13256                           
 13257  0D24  3020               	movlw	32
 13258  0D25  3199  2189  318C   	fcall	i1_READ_PS_2_PIN
 13259  0D28  3A00               	xorlw	0
 13260  0D29  1903               	btfsc	3,2
 13261  0D2A  2D41               	goto	i1l5152
 13262                           
 13263                           ;PS_2.c: 871: {
 13264                           ;PS_2.c: 872: __nop();
 13265  0D2B  0000               	nop
 13266                           
 13267                           ;PS_2.c: 873: timeout++;
 13268  0D2C  3001               	movlw	1
 13269  0D2D  0020               	movlb	0	; select bank0
 13270  0D2E  07A3               	addwf	i1Send_PS2@timeout,f
 13271  0D2F  3000               	movlw	0
 13272  0D30  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13273                           
 13274                           ;PS_2.c: 874: if(timeout > 15000)
 13275  0D31  303A               	movlw	58
 13276  0D32  0224               	subwf	i1Send_PS2@timeout+1,w
 13277  0D33  3099               	movlw	153
 13278  0D34  1903               	skipnz
 13279  0D35  0223               	subwf	i1Send_PS2@timeout,w
 13280  0D36  1C03               	skipc
 13281  0D37  2D24               	goto	i1l5150
 13282                           
 13283                           ;PS_2.c: 875: {
 13284                           ;PS_2.c: 876: Clock_TRIS(1);
 13285  0D38  3001               	movlw	1
 13286  0D39  3198  20B2  318C   	fcall	i1_Clock_TRIS
 13287                           
 13288                           ;PS_2.c: 877: Data_TRIS(1);
 13289  0D3C  3001               	movlw	1
 13290  0D3D  3198  20BC         	fcall	i1_Data_TRIS
 13291                           
 13292                           ;PS_2.c: 878: return 1;
 13293  0D3F  3001               	movlw	1
 13294  0D40  0008               	return
 13295  0D41                     i1l5152:	
 13296                           
 13297                           ;PS_2.c: 879: }
 13298                           ;PS_2.c: 880: }
 13299                           ;PS_2.c: 881: for(i=0;i<8;i++)
 13300  0D41  0020               	movlb	0	; select bank0
 13301  0D42  01A2               	clrf	i1Send_PS2@i
 13302  0D43  3008               	movlw	8
 13303  0D44  0222               	subwf	i1Send_PS2@i,w
 13304  0D45  1803               	btfsc	3,0
 13305  0D46  2D9B               	goto	i1l853
 13306  0D47                     i1l852:	
 13307                           
 13308                           ;PS_2.c: 882: {
 13309                           ;PS_2.c: 883: if(command & 0x1)
 13310  0D47  1C21               	btfss	i1Send_PS2@command,0
 13311  0D48  2D4C               	goto	i1l5160
 13312                           
 13313                           ;PS_2.c: 884: {
 13314                           ;PS_2.c: 885: LATA |= 0b00010000;
 13315  0D49  0022               	movlb	2	; select bank2
 13316  0D4A  160C               	bsf	12,4	;volatile
 13317                           
 13318                           ;PS_2.c: 886: }
 13319  0D4B  2D51               	goto	i1l5162
 13320  0D4C                     i1l5160:	
 13321                           
 13322                           ;PS_2.c: 887: else
 13323                           ;PS_2.c: 888: {
 13324                           ;PS_2.c: 889: LATA &= ~0b00010000;
 13325  0D4C  30EF               	movlw	239
 13326  0D4D  00FA               	movwf	??i1_Send_PS2
 13327  0D4E  087A               	movf	??i1_Send_PS2,w
 13328  0D4F  0022               	movlb	2	; select bank2
 13329  0D50  058C               	andwf	12,f	;volatile
 13330  0D51                     i1l5162:	
 13331                           
 13332                           ;PS_2.c: 890: }
 13333                           ;PS_2.c: 891: command >> = 1;
 13334  0D51  1003               	clrc
 13335  0D52  0020               	movlb	0	; select bank0
 13336  0D53  0CA1               	rrf	i1Send_PS2@command,f
 13337                           
 13338                           ;PS_2.c: 892: timeout=0;
 13339  0D54  01A3               	clrf	i1Send_PS2@timeout
 13340  0D55  01A4               	clrf	i1Send_PS2@timeout+1
 13341  0D56                     i1l5174:	
 13342                           ;PS_2.c: 893: while(!READ_PS_2_PIN(0b00100000))
 13343                           
 13344  0D56  3020               	movlw	32
 13345  0D57  3199  2189  318C   	fcall	i1_READ_PS_2_PIN
 13346  0D5A  3A00               	xorlw	0
 13347  0D5B  1D03               	btfss	3,2
 13348  0D5C  2D72               	goto	i1l5176
 13349                           
 13350                           ;PS_2.c: 894: {
 13351                           ;PS_2.c: 895: timeout++;
 13352  0D5D  3001               	movlw	1
 13353  0D5E  0020               	movlb	0	; select bank0
 13354  0D5F  07A3               	addwf	i1Send_PS2@timeout,f
 13355  0D60  3000               	movlw	0
 13356  0D61  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13357                           
 13358                           ;PS_2.c: 896: if(timeout > 15000)
 13359  0D62  303A               	movlw	58
 13360  0D63  0224               	subwf	i1Send_PS2@timeout+1,w
 13361  0D64  3099               	movlw	153
 13362  0D65  1903               	skipnz
 13363  0D66  0223               	subwf	i1Send_PS2@timeout,w
 13364  0D67  1C03               	skipc
 13365  0D68  2D56               	goto	i1l5174
 13366                           
 13367                           ;PS_2.c: 897: {
 13368                           ;PS_2.c: 898: Clock_TRIS(1);
 13369  0D69  3001               	movlw	1
 13370  0D6A  3198  20B2  318C   	fcall	i1_Clock_TRIS
 13371                           
 13372                           ;PS_2.c: 899: Data_TRIS(1);
 13373  0D6D  3001               	movlw	1
 13374  0D6E  3198  20BC         	fcall	i1_Data_TRIS
 13375                           
 13376                           ;PS_2.c: 900: return 1;
 13377  0D70  3001               	movlw	1
 13378  0D71  0008               	return
 13379  0D72                     i1l5176:	
 13380                           
 13381                           ;PS_2.c: 901: }
 13382                           ;PS_2.c: 902: }
 13383                           ;PS_2.c: 903: timeout=0;
 13384  0D72  0020               	movlb	0	; select bank0
 13385  0D73  01A3               	clrf	i1Send_PS2@timeout
 13386  0D74  01A4               	clrf	i1Send_PS2@timeout+1
 13387  0D75                     i1l5186:	
 13388                           ;PS_2.c: 904: while(READ_PS_2_PIN(0b00100000))
 13389                           
 13390  0D75  3020               	movlw	32
 13391  0D76  3199  2189  318C   	fcall	i1_READ_PS_2_PIN
 13392  0D79  3A00               	xorlw	0
 13393  0D7A  1903               	btfsc	3,2
 13394  0D7B  2D92               	goto	i1l5188
 13395                           
 13396                           ;PS_2.c: 905: {
 13397                           ;PS_2.c: 906: __nop();
 13398  0D7C  0000               	nop
 13399                           
 13400                           ;PS_2.c: 907: timeout++;
 13401  0D7D  3001               	movlw	1
 13402  0D7E  0020               	movlb	0	; select bank0
 13403  0D7F  07A3               	addwf	i1Send_PS2@timeout,f
 13404  0D80  3000               	movlw	0
 13405  0D81  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13406                           
 13407                           ;PS_2.c: 908: if(timeout > 15000)
 13408  0D82  303A               	movlw	58
 13409  0D83  0224               	subwf	i1Send_PS2@timeout+1,w
 13410  0D84  3099               	movlw	153
 13411  0D85  1903               	skipnz
 13412  0D86  0223               	subwf	i1Send_PS2@timeout,w
 13413  0D87  1C03               	skipc
 13414  0D88  2D75               	goto	i1l5186
 13415                           
 13416                           ;PS_2.c: 909: {
 13417                           ;PS_2.c: 910: Clock_TRIS(1);
 13418  0D89  3001               	movlw	1
 13419  0D8A  3198  20B2  318C   	fcall	i1_Clock_TRIS
 13420                           
 13421                           ;PS_2.c: 911: Data_TRIS(1);
 13422  0D8D  3001               	movlw	1
 13423  0D8E  3198  20BC         	fcall	i1_Data_TRIS
 13424                           
 13425                           ;PS_2.c: 912: return 1;
 13426  0D90  3001               	movlw	1
 13427  0D91  0008               	return
 13428  0D92                     i1l5188:	
 13429  0D92  3001               	movlw	1
 13430  0D93  00FA               	movwf	??i1_Send_PS2
 13431  0D94  087A               	movf	??i1_Send_PS2,w
 13432  0D95  0020               	movlb	0	; select bank0
 13433  0D96  07A2               	addwf	i1Send_PS2@i,f
 13434  0D97  3008               	movlw	8
 13435  0D98  0222               	subwf	i1Send_PS2@i,w
 13436  0D99  1C03               	skipc
 13437  0D9A  2D47               	goto	i1l852
 13438  0D9B                     i1l853:	
 13439                           
 13440                           ;PS_2.c: 913: }
 13441                           ;PS_2.c: 914: }
 13442                           ;PS_2.c: 915: }
 13443                           ;PS_2.c: 917: if(oddparity & 0x1)
 13444  0D9B  1C20               	btfss	i1Send_PS2@oddparity,0
 13445  0D9C  2DA0               	goto	i1l5194
 13446                           
 13447                           ;PS_2.c: 918: {
 13448                           ;PS_2.c: 919: LATA |= 0b00010000;
 13449  0D9D  0022               	movlb	2	; select bank2
 13450  0D9E  160C               	bsf	12,4	;volatile
 13451                           
 13452                           ;PS_2.c: 920: }
 13453  0D9F  2DA5               	goto	i1l5196
 13454  0DA0                     i1l5194:	
 13455                           
 13456                           ;PS_2.c: 921: else
 13457                           ;PS_2.c: 922: {
 13458                           ;PS_2.c: 923: LATA &= ~0b00010000;
 13459  0DA0  30EF               	movlw	239
 13460  0DA1  00FA               	movwf	??i1_Send_PS2
 13461  0DA2  087A               	movf	??i1_Send_PS2,w
 13462  0DA3  0022               	movlb	2	; select bank2
 13463  0DA4  058C               	andwf	12,f	;volatile
 13464  0DA5                     i1l5196:	
 13465                           
 13466                           ;PS_2.c: 924: }
 13467                           ;PS_2.c: 925: timeout=0;
 13468  0DA5  0020               	movlb	0	; select bank0
 13469  0DA6  01A3               	clrf	i1Send_PS2@timeout
 13470  0DA7  01A4               	clrf	i1Send_PS2@timeout+1
 13471  0DA8                     i1l5206:	
 13472                           ;PS_2.c: 926: while(!READ_PS_2_PIN(0b00100000))
 13473                           
 13474  0DA8  3020               	movlw	32
 13475  0DA9  3199  2189  318C   	fcall	i1_READ_PS_2_PIN
 13476  0DAC  3A00               	xorlw	0
 13477  0DAD  1D03               	btfss	3,2
 13478  0DAE  2DC4               	goto	i1l5208
 13479                           
 13480                           ;PS_2.c: 927: {
 13481                           ;PS_2.c: 928: timeout++;
 13482  0DAF  3001               	movlw	1
 13483  0DB0  0020               	movlb	0	; select bank0
 13484  0DB1  07A3               	addwf	i1Send_PS2@timeout,f
 13485  0DB2  3000               	movlw	0
 13486  0DB3  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13487                           
 13488                           ;PS_2.c: 929: if(timeout > 15000)
 13489  0DB4  303A               	movlw	58
 13490  0DB5  0224               	subwf	i1Send_PS2@timeout+1,w
 13491  0DB6  3099               	movlw	153
 13492  0DB7  1903               	skipnz
 13493  0DB8  0223               	subwf	i1Send_PS2@timeout,w
 13494  0DB9  1C03               	skipc
 13495  0DBA  2DA8               	goto	i1l5206
 13496                           
 13497                           ;PS_2.c: 930: {
 13498                           ;PS_2.c: 931: Clock_TRIS(1);
 13499  0DBB  3001               	movlw	1
 13500  0DBC  3198  20B2  318C   	fcall	i1_Clock_TRIS
 13501                           
 13502                           ;PS_2.c: 932: Data_TRIS(1);
 13503  0DBF  3001               	movlw	1
 13504  0DC0  3198  20BC         	fcall	i1_Data_TRIS
 13505                           
 13506                           ;PS_2.c: 933: return 1;
 13507  0DC2  3001               	movlw	1
 13508  0DC3  0008               	return
 13509  0DC4                     i1l5208:	
 13510                           
 13511                           ;PS_2.c: 934: }
 13512                           ;PS_2.c: 935: }
 13513                           ;PS_2.c: 936: timeout=0;
 13514  0DC4  0020               	movlb	0	; select bank0
 13515  0DC5  01A3               	clrf	i1Send_PS2@timeout
 13516  0DC6  01A4               	clrf	i1Send_PS2@timeout+1
 13517  0DC7                     i1l5218:	
 13518                           ;PS_2.c: 937: while(READ_PS_2_PIN(0b00100000))
 13519                           
 13520  0DC7  3020               	movlw	32
 13521  0DC8  3199  2189  318C   	fcall	i1_READ_PS_2_PIN
 13522  0DCB  3A00               	xorlw	0
 13523  0DCC  1903               	btfsc	3,2
 13524  0DCD  2DE3               	goto	i1l5220
 13525                           
 13526                           ;PS_2.c: 938: {
 13527                           ;PS_2.c: 939: timeout++;
 13528  0DCE  3001               	movlw	1
 13529  0DCF  0020               	movlb	0	; select bank0
 13530  0DD0  07A3               	addwf	i1Send_PS2@timeout,f
 13531  0DD1  3000               	movlw	0
 13532  0DD2  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13533                           
 13534                           ;PS_2.c: 940: if(timeout > 15000)
 13535  0DD3  303A               	movlw	58
 13536  0DD4  0224               	subwf	i1Send_PS2@timeout+1,w
 13537  0DD5  3099               	movlw	153
 13538  0DD6  1903               	skipnz
 13539  0DD7  0223               	subwf	i1Send_PS2@timeout,w
 13540  0DD8  1C03               	skipc
 13541  0DD9  2DC7               	goto	i1l5218
 13542                           
 13543                           ;PS_2.c: 941: {
 13544                           ;PS_2.c: 942: Clock_TRIS(1);
 13545  0DDA  3001               	movlw	1
 13546  0DDB  3198  20B2  318C   	fcall	i1_Clock_TRIS
 13547                           
 13548                           ;PS_2.c: 943: Data_TRIS(1);
 13549  0DDE  3001               	movlw	1
 13550  0DDF  3198  20BC         	fcall	i1_Data_TRIS
 13551                           
 13552                           ;PS_2.c: 944: return 1;
 13553  0DE1  3001               	movlw	1
 13554  0DE2  0008               	return
 13555  0DE3                     i1l5220:	
 13556                           
 13557                           ;PS_2.c: 945: }
 13558                           ;PS_2.c: 946: }
 13559                           ;PS_2.c: 948: Data_TRIS(1);
 13560  0DE3  3001               	movlw	1
 13561  0DE4  3198  20BC  318C   	fcall	i1_Data_TRIS
 13562                           
 13563                           ;PS_2.c: 950: timeout=0;
 13564  0DE7  0020               	movlb	0	; select bank0
 13565  0DE8  01A3               	clrf	i1Send_PS2@timeout
 13566  0DE9  01A4               	clrf	i1Send_PS2@timeout+1
 13567  0DEA                     i1l5232:	
 13568                           ;PS_2.c: 951: while(READ_PS_2_PIN(0b00010000))
 13569                           
 13570  0DEA  3010               	movlw	16
 13571  0DEB  3199  2189  318C   	fcall	i1_READ_PS_2_PIN
 13572  0DEE  3A00               	xorlw	0
 13573  0DEF  1903               	btfsc	3,2
 13574  0DF0  2E06               	goto	i1l5234
 13575                           
 13576                           ;PS_2.c: 952: {
 13577                           ;PS_2.c: 953: timeout++;
 13578  0DF1  3001               	movlw	1
 13579  0DF2  0020               	movlb	0	; select bank0
 13580  0DF3  07A3               	addwf	i1Send_PS2@timeout,f
 13581  0DF4  3000               	movlw	0
 13582  0DF5  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13583                           
 13584                           ;PS_2.c: 954: if(timeout > 15000)
 13585  0DF6  303A               	movlw	58
 13586  0DF7  0224               	subwf	i1Send_PS2@timeout+1,w
 13587  0DF8  3099               	movlw	153
 13588  0DF9  1903               	skipnz
 13589  0DFA  0223               	subwf	i1Send_PS2@timeout,w
 13590  0DFB  1C03               	skipc
 13591  0DFC  2DEA               	goto	i1l5232
 13592                           
 13593                           ;PS_2.c: 955: {
 13594                           ;PS_2.c: 956: Clock_TRIS(1);
 13595  0DFD  3001               	movlw	1
 13596  0DFE  3198  20B2  318C   	fcall	i1_Clock_TRIS
 13597                           
 13598                           ;PS_2.c: 957: Data_TRIS(1);
 13599  0E01  3001               	movlw	1
 13600  0E02  3198  20BC         	fcall	i1_Data_TRIS
 13601                           
 13602                           ;PS_2.c: 958: return 1;
 13603  0E04  3001               	movlw	1
 13604  0E05  0008               	return
 13605  0E06                     i1l5234:	
 13606                           
 13607                           ;PS_2.c: 959: }
 13608                           ;PS_2.c: 960: }
 13609                           ;PS_2.c: 961: timeout=0;
 13610  0E06  0020               	movlb	0	; select bank0
 13611  0E07  01A3               	clrf	i1Send_PS2@timeout
 13612  0E08  01A4               	clrf	i1Send_PS2@timeout+1
 13613  0E09                     i1l5244:	
 13614                           ;PS_2.c: 962: while(READ_PS_2_PIN(0b00100000))
 13615                           
 13616  0E09  3020               	movlw	32
 13617  0E0A  3199  2189  318C   	fcall	i1_READ_PS_2_PIN
 13618  0E0D  3A00               	xorlw	0
 13619  0E0E  1903               	btfsc	3,2
 13620  0E0F  2E25               	goto	i1l5246
 13621                           
 13622                           ;PS_2.c: 963: {
 13623                           ;PS_2.c: 964: timeout++;
 13624  0E10  3001               	movlw	1
 13625  0E11  0020               	movlb	0	; select bank0
 13626  0E12  07A3               	addwf	i1Send_PS2@timeout,f
 13627  0E13  3000               	movlw	0
 13628  0E14  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13629                           
 13630                           ;PS_2.c: 965: if(timeout > 15000)
 13631  0E15  303A               	movlw	58
 13632  0E16  0224               	subwf	i1Send_PS2@timeout+1,w
 13633  0E17  3099               	movlw	153
 13634  0E18  1903               	skipnz
 13635  0E19  0223               	subwf	i1Send_PS2@timeout,w
 13636  0E1A  1C03               	skipc
 13637  0E1B  2E09               	goto	i1l5244
 13638                           
 13639                           ;PS_2.c: 966: {
 13640                           ;PS_2.c: 967: Clock_TRIS(1);
 13641  0E1C  3001               	movlw	1
 13642  0E1D  3198  20B2  318C   	fcall	i1_Clock_TRIS
 13643                           
 13644                           ;PS_2.c: 968: Data_TRIS(1);
 13645  0E20  3001               	movlw	1
 13646  0E21  3198  20BC         	fcall	i1_Data_TRIS
 13647                           
 13648                           ;PS_2.c: 969: return 1;
 13649  0E23  3001               	movlw	1
 13650  0E24  0008               	return
 13651  0E25                     i1l5246:	
 13652                           
 13653                           ;PS_2.c: 970: }
 13654                           ;PS_2.c: 971: }
 13655                           ;PS_2.c: 972: timeout=0;
 13656  0E25  0020               	movlb	0	; select bank0
 13657  0E26  01A3               	clrf	i1Send_PS2@timeout
 13658  0E27  01A4               	clrf	i1Send_PS2@timeout+1
 13659  0E28                     i1l5256:	
 13660                           ;PS_2.c: 973: while(!READ_PS_2_PIN(0b00010000))
 13661                           
 13662  0E28  3010               	movlw	16
 13663  0E29  3199  2189  318C   	fcall	i1_READ_PS_2_PIN
 13664  0E2C  3A00               	xorlw	0
 13665  0E2D  1D03               	btfss	3,2
 13666  0E2E  2E44               	goto	i1l5258
 13667                           
 13668                           ;PS_2.c: 974: {
 13669                           ;PS_2.c: 975: timeout++;
 13670  0E2F  3001               	movlw	1
 13671  0E30  0020               	movlb	0	; select bank0
 13672  0E31  07A3               	addwf	i1Send_PS2@timeout,f
 13673  0E32  3000               	movlw	0
 13674  0E33  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13675                           
 13676                           ;PS_2.c: 976: if(timeout > 15000)
 13677  0E34  303A               	movlw	58
 13678  0E35  0224               	subwf	i1Send_PS2@timeout+1,w
 13679  0E36  3099               	movlw	153
 13680  0E37  1903               	skipnz
 13681  0E38  0223               	subwf	i1Send_PS2@timeout,w
 13682  0E39  1C03               	skipc
 13683  0E3A  2E28               	goto	i1l5256
 13684                           
 13685                           ;PS_2.c: 977: {
 13686                           ;PS_2.c: 978: Clock_TRIS(1);
 13687  0E3B  3001               	movlw	1
 13688  0E3C  3198  20B2  318C   	fcall	i1_Clock_TRIS
 13689                           
 13690                           ;PS_2.c: 979: Data_TRIS(1);
 13691  0E3F  3001               	movlw	1
 13692  0E40  3198  20BC         	fcall	i1_Data_TRIS
 13693                           
 13694                           ;PS_2.c: 980: return 1;
 13695  0E42  3001               	movlw	1
 13696  0E43  0008               	return
 13697  0E44                     i1l5258:	
 13698                           
 13699                           ;PS_2.c: 981: }
 13700                           ;PS_2.c: 982: }
 13701                           ;PS_2.c: 983: timeout=0;
 13702  0E44  0020               	movlb	0	; select bank0
 13703  0E45  01A3               	clrf	i1Send_PS2@timeout
 13704  0E46  01A4               	clrf	i1Send_PS2@timeout+1
 13705  0E47                     i1l5268:	
 13706                           ;PS_2.c: 984: while(!READ_PS_2_PIN(0b00100000))
 13707                           
 13708  0E47  3020               	movlw	32
 13709  0E48  3199  2189  318C   	fcall	i1_READ_PS_2_PIN
 13710  0E4B  3A00               	xorlw	0
 13711  0E4C  1D03               	btfss	3,2
 13712  0E4D  2E63               	goto	i1l5270
 13713                           
 13714                           ;PS_2.c: 985: {
 13715                           ;PS_2.c: 986: timeout++;
 13716  0E4E  3001               	movlw	1
 13717  0E4F  0020               	movlb	0	; select bank0
 13718  0E50  07A3               	addwf	i1Send_PS2@timeout,f
 13719  0E51  3000               	movlw	0
 13720  0E52  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13721                           
 13722                           ;PS_2.c: 987: if(timeout > 15000)
 13723  0E53  303A               	movlw	58
 13724  0E54  0224               	subwf	i1Send_PS2@timeout+1,w
 13725  0E55  3099               	movlw	153
 13726  0E56  1903               	skipnz
 13727  0E57  0223               	subwf	i1Send_PS2@timeout,w
 13728  0E58  1C03               	skipc
 13729  0E59  2E47               	goto	i1l5268
 13730                           
 13731                           ;PS_2.c: 988: {
 13732                           ;PS_2.c: 989: Clock_TRIS(1);
 13733  0E5A  3001               	movlw	1
 13734  0E5B  3198  20B2  318C   	fcall	i1_Clock_TRIS
 13735                           
 13736                           ;PS_2.c: 990: Data_TRIS(1);
 13737  0E5E  3001               	movlw	1
 13738  0E5F  3198  20BC         	fcall	i1_Data_TRIS
 13739                           
 13740                           ;PS_2.c: 991: return 1;
 13741  0E61  3001               	movlw	1
 13742  0E62  0008               	return
 13743  0E63                     i1l5270:	
 13744                           
 13745                           ;PS_2.c: 992: }
 13746                           ;PS_2.c: 993: }
 13747                           ;PS_2.c: 996: Clock_TRIS(1);
 13748  0E63  3001               	movlw	1
 13749  0E64  3198  20B2  318C   	fcall	i1_Clock_TRIS
 13750                           
 13751                           ;PS_2.c: 997: Data_TRIS(1);
 13752  0E67  3001               	movlw	1
 13753  0E68  3198  20BC         	fcall	i1_Data_TRIS
 13754                           
 13755                           ;PS_2.c: 998: return 0;
 13756  0E6A  3000               	movlw	0
 13757  0E6B  0008               	return
 13758  0E6C                     __end_ofi1_Send_PS2:	
 13759                           
 13760                           	psect	text44
 13761  1989                     __ptext44:	
 13762 ;; *************** function i1_READ_PS_2_PIN *****************
 13763 ;; Defined at:
 13764 ;;		line 222 in file "PS_2.c"
 13765 ;; Parameters:    Size  Location     Type
 13766 ;;  DATA_CLK        1    wreg     unsigned char 
 13767 ;; Auto vars:     Size  Location     Type
 13768 ;;  DATA_CLK        1    0[COMMON] unsigned char 
 13769 ;; Return value:  Size  Location     Type
 13770 ;;                  1    wreg      unsigned char 
 13771 ;; Registers used:
 13772 ;;		wreg, status,2, status,0
 13773 ;; Tracked objects:
 13774 ;;		On entry : 0/0
 13775 ;;		On exit  : 0/0
 13776 ;;		Unchanged: 0/0
 13777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13779 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13781 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13782 ;;Total ram usage:        1 bytes
 13783 ;; Hardware stack levels used:    1
 13784 ;; This function calls:
 13785 ;;		Nothing
 13786 ;; This function is called by:
 13787 ;;		_isr
 13788 ;;		i1_Send_PS2
 13789 ;; This function uses a non-reentrant model
 13790 ;;
 13791                           
 13792                           
 13793                           ;psect for function i1_READ_PS_2_PIN
 13794  1989                     i1_READ_PS_2_PIN:	
 13795                           
 13796                           ;incstack = 0
 13797                           ; Regs used in i1_READ_PS_2_PIN: [wreg+status,2+status,0]
 13798                           ;i1READ_PS_2_PIN@DATA_CLK stored from wreg
 13799  1989  00F0               	movwf	i1READ_PS_2_PIN@DATA_CLK
 13800                           
 13801                           ;PS_2.c: 224: if(DATA_CLK == 0b00100000)
 13802  198A  3020               	movlw	32
 13803  198B  0670               	xorwf	i1READ_PS_2_PIN@DATA_CLK,w
 13804  198C  1D03               	btfss	3,2
 13805  198D  2995               	goto	i1l639
 13806                           
 13807                           ;PS_2.c: 225: {
 13808                           ;PS_2.c: 227: if((PORTA & 0b00100000) == 0b00100000)
 13809  198E  0020               	movlb	0	; select bank0
 13810  198F  1E8C               	btfss	12,5	;volatile
 13811  1990  2993               	goto	i1l4632
 13812                           
 13813                           ;PS_2.c: 228: {
 13814                           ;PS_2.c: 229: return (1);
 13815  1991  3001               	movlw	1
 13816                           
 13817                           ;PS_2.c: 230: }
 13818  1992  0008               	return
 13819  1993                     i1l4632:	
 13820                           
 13821                           ;PS_2.c: 231: else
 13822                           ;PS_2.c: 232: {
 13823                           ;PS_2.c: 233: return 0;
 13824  1993  3000               	movlw	0
 13825                           
 13826                           ;PS_2.c: 234: }
 13827                           ;PS_2.c: 235: }
 13828  1994  0008               	return
 13829  1995                     i1l639:	
 13830                           
 13831                           ;PS_2.c: 236: else
 13832                           ;PS_2.c: 237: {
 13833                           ;PS_2.c: 239: if((PORTA & 0b00010000) == 0b00010000)
 13834  1995  0020               	movlb	0	; select bank0
 13835  1996  1E0C               	btfss	12,4	;volatile
 13836  1997  299A               	goto	i1l4642
 13837                           
 13838                           ;PS_2.c: 240: {
 13839                           ;PS_2.c: 241: return (1);
 13840  1998  3001               	movlw	1
 13841                           
 13842                           ;PS_2.c: 242: }
 13843  1999  0008               	return
 13844  199A                     i1l4642:	
 13845                           
 13846                           ;PS_2.c: 243: else
 13847                           ;PS_2.c: 244: {
 13848                           ;PS_2.c: 245: return 0;
 13849  199A  3000               	movlw	0
 13850  199B  0008               	return
 13851  199C                     __end_ofi1_READ_PS_2_PIN:	
 13852                           
 13853                           	psect	text45
 13854  18BC                     __ptext45:	
 13855 ;; *************** function i1_Data_TRIS *****************
 13856 ;; Defined at:
 13857 ;;		line 137 in file "PS_2.c"
 13858 ;; Parameters:    Size  Location     Type
 13859 ;;  direction       1    wreg     unsigned char 
 13860 ;; Auto vars:     Size  Location     Type
 13861 ;;  direction       1    0[COMMON] unsigned char 
 13862 ;; Return value:  Size  Location     Type
 13863 ;;		None               void
 13864 ;; Registers used:
 13865 ;;		wreg, status,2, status,0
 13866 ;; Tracked objects:
 13867 ;;		On entry : 0/0
 13868 ;;		On exit  : 0/0
 13869 ;;		Unchanged: 0/0
 13870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13872 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13874 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13875 ;;Total ram usage:        1 bytes
 13876 ;; Hardware stack levels used:    1
 13877 ;; This function calls:
 13878 ;;		Nothing
 13879 ;; This function is called by:
 13880 ;;		i1_Send_PS2
 13881 ;; This function uses a non-reentrant model
 13882 ;;
 13883                           
 13884                           
 13885                           ;psect for function i1_Data_TRIS
 13886  18BC                     i1_Data_TRIS:	
 13887                           
 13888                           ;incstack = 0
 13889                           ; Regs used in i1_Data_TRIS: [wreg+status,2+status,0]
 13890                           ;i1Data_TRIS@direction stored from wreg
 13891  18BC  00F0               	movwf	i1Data_TRIS@direction
 13892                           
 13893                           ;PS_2.c: 139: if(direction == 0)
 13894  18BD  0870               	movf	i1Data_TRIS@direction,w
 13895  18BE  1D03               	btfss	3,2
 13896  18BF  28C3               	goto	i1l619
 13897                           
 13898                           ;PS_2.c: 140: {
 13899                           ;PS_2.c: 141: TRISAbits.TRISA4 = 0;
 13900  18C0  0021               	movlb	1	; select bank1
 13901  18C1  120C               	bcf	12,4	;volatile
 13902                           
 13903                           ;PS_2.c: 142: }
 13904  18C2  0008               	return
 13905  18C3                     i1l619:	
 13906                           
 13907                           ;PS_2.c: 143: else
 13908                           ;PS_2.c: 144: {
 13909                           ;PS_2.c: 145: TRISAbits.TRISA4 = 1;
 13910  18C3  0021               	movlb	1	; select bank1
 13911  18C4  160C               	bsf	12,4	;volatile
 13912  18C5  0008               	return
 13913  18C6                     __end_ofi1_Data_TRIS:	
 13914                           
 13915                           	psect	text46
 13916  18B2                     __ptext46:	
 13917 ;; *************** function i1_Clock_TRIS *****************
 13918 ;; Defined at:
 13919 ;;		line 120 in file "PS_2.c"
 13920 ;; Parameters:    Size  Location     Type
 13921 ;;  direction       1    wreg     unsigned char 
 13922 ;; Auto vars:     Size  Location     Type
 13923 ;;  direction       1    0[COMMON] unsigned char 
 13924 ;; Return value:  Size  Location     Type
 13925 ;;		None               void
 13926 ;; Registers used:
 13927 ;;		wreg, status,2, status,0
 13928 ;; Tracked objects:
 13929 ;;		On entry : 0/0
 13930 ;;		On exit  : 0/0
 13931 ;;		Unchanged: 0/0
 13932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13934 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13936 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13937 ;;Total ram usage:        1 bytes
 13938 ;; Hardware stack levels used:    1
 13939 ;; This function calls:
 13940 ;;		Nothing
 13941 ;; This function is called by:
 13942 ;;		i1_Send_PS2
 13943 ;; This function uses a non-reentrant model
 13944 ;;
 13945                           
 13946                           
 13947                           ;psect for function i1_Clock_TRIS
 13948  18B2                     i1_Clock_TRIS:	
 13949                           
 13950                           ;incstack = 0
 13951                           ; Regs used in i1_Clock_TRIS: [wreg+status,2+status,0]
 13952                           ;i1Clock_TRIS@direction stored from wreg
 13953  18B2  00F0               	movwf	i1Clock_TRIS@direction
 13954                           
 13955                           ;PS_2.c: 122: if(direction == 0)
 13956  18B3  0870               	movf	i1Clock_TRIS@direction,w
 13957  18B4  1D03               	btfss	3,2
 13958  18B5  28B9               	goto	i1l614
 13959                           
 13960                           ;PS_2.c: 123: {
 13961                           ;PS_2.c: 124: TRISAbits.TRISA5 = 0;
 13962  18B6  0021               	movlb	1	; select bank1
 13963  18B7  128C               	bcf	12,5	;volatile
 13964                           
 13965                           ;PS_2.c: 125: }
 13966  18B8  0008               	return
 13967  18B9                     i1l614:	
 13968                           
 13969                           ;PS_2.c: 126: else
 13970                           ;PS_2.c: 127: {
 13971                           ;PS_2.c: 128: TRISAbits.TRISA5 = 1;
 13972  18B9  0021               	movlb	1	; select bank1
 13973  18BA  168C               	bsf	12,5	;volatile
 13974  18BB  0008               	return
 13975  18BC                     __end_ofi1_Clock_TRIS:	
 13976                           
 13977                           	psect	text47
 13978  19D8                     __ptext47:	
 13979 ;; *************** function _cleanBuffer *****************
 13980 ;; Defined at:
 13981 ;;		line 163 in file "MISC.c"
 13982 ;; Parameters:    Size  Location     Type
 13983 ;;  data            1    wreg     PTR unsigned char 
 13984 ;;		 -> PS_2_ScanCodes(12), 
 13985 ;;  count           2    0[COMMON] int 
 13986 ;; Auto vars:     Size  Location     Type
 13987 ;;  data            1    3[COMMON] PTR unsigned char 
 13988 ;;		 -> PS_2_ScanCodes(12), 
 13989 ;;  i               1    4[COMMON] unsigned char 
 13990 ;; Return value:  Size  Location     Type
 13991 ;;		None               void
 13992 ;; Registers used:
 13993 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13994 ;; Tracked objects:
 13995 ;;		On entry : 0/0
 13996 ;;		On exit  : 0/0
 13997 ;;		Unchanged: 0/0
 13998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13999 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14000 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14001 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14002 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14003 ;;Total ram usage:        5 bytes
 14004 ;; Hardware stack levels used:    1
 14005 ;; This function calls:
 14006 ;;		Nothing
 14007 ;; This function is called by:
 14008 ;;		_Process_PS2_ScanCode
 14009 ;; This function uses a non-reentrant model
 14010 ;;
 14011                           
 14012                           
 14013                           ;psect for function _cleanBuffer
 14014  19D8                     _cleanBuffer:	
 14015                           
 14016                           ;incstack = 0
 14017                           ; Regs used in _cleanBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
 14018                           ;cleanBuffer@data stored from wreg
 14019  19D8  00F3               	movwf	cleanBuffer@data
 14020                           
 14021                           ;MISC.c: 165: unsigned char i=0;
 14022  19D9  01F4               	clrf	cleanBuffer@i
 14023                           
 14024                           ;MISC.c: 166: for(i=0; i<count;i++)
 14025  19DA  01F4               	clrf	cleanBuffer@i
 14026  19DB                     i1l4804:	
 14027  19DB  0871               	movf	cleanBuffer@count+1,w
 14028  19DC  3A80               	xorlw	128
 14029  19DD  3C80               	sublw	128
 14030  19DE  1D03               	skipz
 14031  19DF  29E2               	goto	u537_25
 14032  19E0  0870               	movf	cleanBuffer@count,w
 14033  19E1  0274               	subwf	cleanBuffer@i,w
 14034  19E2                     u537_25:	
 14035  19E2  1803               	btfsc	3,0
 14036  19E3  0008               	return
 14037                           
 14038                           ;MISC.c: 167: {
 14039                           ;MISC.c: 168: data[i]= 0;
 14040  19E4  0874               	movf	cleanBuffer@i,w
 14041  19E5  0773               	addwf	cleanBuffer@data,w
 14042  19E6  00F2               	movwf	??_cleanBuffer
 14043  19E7  0872               	movf	??_cleanBuffer,w
 14044  19E8  0086               	movwf	6
 14045  19E9  0187               	clrf	7
 14046  19EA  0181               	clrf	1
 14047  19EB  3001               	movlw	1
 14048  19EC  00F2               	movwf	??_cleanBuffer
 14049  19ED  0872               	movf	??_cleanBuffer,w
 14050  19EE  07F4               	addwf	cleanBuffer@i,f
 14051  19EF  29DB               	goto	i1l4804
 14052  19F0                     __end_of_cleanBuffer:	
 14053                           
 14054                           	psect	text48
 14055  1AEC                     __ptext48:	
 14056 ;; *************** function ___lmul *****************
 14057 ;; Defined at:
 14058 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul32.c"
 14059 ;; Parameters:    Size  Location     Type
 14060 ;;  multiplier      4    0[COMMON] unsigned long 
 14061 ;;  multiplicand    4    4[COMMON] unsigned long 
 14062 ;; Auto vars:     Size  Location     Type
 14063 ;;  product         4    8[COMMON] unsigned long 
 14064 ;; Return value:  Size  Location     Type
 14065 ;;                  4    0[COMMON] unsigned long 
 14066 ;; Registers used:
 14067 ;;		wreg, status,2, status,0
 14068 ;; Tracked objects:
 14069 ;;		On entry : 0/0
 14070 ;;		On exit  : 0/0
 14071 ;;		Unchanged: 0/0
 14072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14073 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14074 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14076 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14077 ;;Total ram usage:       12 bytes
 14078 ;; Hardware stack levels used:    1
 14079 ;; This function calls:
 14080 ;;		Nothing
 14081 ;; This function is called by:
 14082 ;;		_Process_PS2_ScanCode
 14083 ;; This function uses a non-reentrant model
 14084 ;;
 14085                           
 14086                           
 14087                           ;psect for function ___lmul
 14088  1AEC                     ___lmul:	
 14089                           
 14090                           ;incstack = 0
 14091                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 14092  1AEC  3000               	movlw	0
 14093  1AED  00FB               	movwf	___lmul@product+3
 14094  1AEE  3000               	movlw	0
 14095  1AEF  00FA               	movwf	___lmul@product+2
 14096  1AF0  3000               	movlw	0
 14097  1AF1  00F9               	movwf	___lmul@product+1
 14098  1AF2  3000               	movlw	0
 14099  1AF3  00F8               	movwf	___lmul@product
 14100  1AF4                     i1l5012:	
 14101  1AF4  1C70               	btfss	___lmul@multiplier,0
 14102  1AF5  2AFE               	goto	i1l5016
 14103  1AF6  0874               	movf	___lmul@multiplicand,w
 14104  1AF7  07F8               	addwf	___lmul@product,f
 14105  1AF8  0875               	movf	___lmul@multiplicand+1,w
 14106  1AF9  3DF9               	addwfc	___lmul@product+1,f
 14107  1AFA  0876               	movf	___lmul@multiplicand+2,w
 14108  1AFB  3DFA               	addwfc	___lmul@product+2,f
 14109  1AFC  0877               	movf	___lmul@multiplicand+3,w
 14110  1AFD  3DFB               	addwfc	___lmul@product+3,f
 14111  1AFE                     i1l5016:	
 14112  1AFE  3001               	movlw	1
 14113  1AFF                     u564_25:	
 14114  1AFF  35F4               	lslf	___lmul@multiplicand,f
 14115  1B00  0DF5               	rlf	___lmul@multiplicand+1,f
 14116  1B01  0DF6               	rlf	___lmul@multiplicand+2,f
 14117  1B02  0DF7               	rlf	___lmul@multiplicand+3,f
 14118  1B03  0B89               	decfsz	9,f
 14119  1B04  2AFF               	goto	u564_25
 14120  1B05  3001               	movlw	1
 14121  1B06                     u565_25:	
 14122  1B06  36F3               	lsrf	___lmul@multiplier+3,f
 14123  1B07  0CF2               	rrf	___lmul@multiplier+2,f
 14124  1B08  0CF1               	rrf	___lmul@multiplier+1,f
 14125  1B09  0CF0               	rrf	___lmul@multiplier,f
 14126  1B0A  0B89               	decfsz	9,f
 14127  1B0B  2B06               	goto	u565_25
 14128  1B0C  0873               	movf	___lmul@multiplier+3,w
 14129  1B0D  0472               	iorwf	___lmul@multiplier+2,w
 14130  1B0E  0471               	iorwf	___lmul@multiplier+1,w
 14131  1B0F  0470               	iorwf	___lmul@multiplier,w
 14132  1B10  1D03               	skipz
 14133  1B11  2AF4               	goto	i1l5012
 14134  1B12  087B               	movf	___lmul@product+3,w
 14135  1B13  00F3               	movwf	?___lmul+3
 14136  1B14  087A               	movf	___lmul@product+2,w
 14137  1B15  00F2               	movwf	?___lmul+2
 14138  1B16  0879               	movf	___lmul@product+1,w
 14139  1B17  00F1               	movwf	?___lmul+1
 14140  1B18  0878               	movf	___lmul@product,w
 14141  1B19  00F0               	movwf	?___lmul
 14142  1B1A  0008               	return
 14143  1B1B                     __end_of___lmul:	
 14144                           
 14145                           	psect	text49
 14146  1000                     __ptext49:	
 14147 ;; *************** function _UART_send_break_timed *****************
 14148 ;; Defined at:
 14149 ;;		line 339 in file "UART.c"
 14150 ;; Parameters:    Size  Location     Type
 14151 ;;  US              2   10[COMMON] unsigned int 
 14152 ;; Auto vars:     Size  Location     Type
 14153 ;;		None
 14154 ;; Return value:  Size  Location     Type
 14155 ;;		None               void
 14156 ;; Registers used:
 14157 ;;		wreg, status,2, status,0, pclath, cstack
 14158 ;; Tracked objects:
 14159 ;;		On entry : 0/0
 14160 ;;		On exit  : 0/0
 14161 ;;		Unchanged: 0/0
 14162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14163 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14165 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14166 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14167 ;;Total ram usage:        3 bytes
 14168 ;; Hardware stack levels used:    1
 14169 ;; Hardware stack levels required when called:    1
 14170 ;; This function calls:
 14171 ;;		i1_delayUS
 14172 ;; This function is called by:
 14173 ;;		_isr
 14174 ;;		_Process_PS2_ScanCode
 14175 ;; This function uses a non-reentrant model
 14176 ;;
 14177                           
 14178                           
 14179                           ;psect for function _UART_send_break_timed
 14180  1000                     _UART_send_break_timed:	
 14181                           
 14182                           ;UART.c: 342: LATC |= 0b00000100;
 14183                           
 14184                           ;incstack = 0
 14185                           ; Regs used in _UART_send_break_timed: [wreg+status,2+status,0+pclath+cstack]
 14186  1000  0022               	movlb	2	; select bank2
 14187  1001  150E               	bsf	14,2	;volatile
 14188                           
 14189                           ;UART.c: 343: PPSLOCK =0;
 14190  1002  003C               	movlb	28	; select bank28
 14191  1003  018F               	clrf	15	;volatile
 14192                           
 14193                           ;UART.c: 344: RC2PPS = 0b00000000;
 14194  1004  003D               	movlb	29	; select bank29
 14195  1005  01A2               	clrf	34	;volatile
 14196                           
 14197                           ;UART.c: 345: PPSLOCK =1;
 14198  1006  3001               	movlw	1
 14199  1007  003C               	movlb	28	; select bank28
 14200  1008  008F               	movwf	15	;volatile
 14201                           
 14202                           ;UART.c: 347: LATC &= ~0b00000100;
 14203  1009  30FB               	movlw	251
 14204  100A  00FC               	movwf	??_UART_send_break_timed
 14205  100B  087C               	movf	??_UART_send_break_timed,w
 14206  100C  0022               	movlb	2	; select bank2
 14207  100D  058E               	andwf	14,f	;volatile
 14208                           
 14209                           ;UART.c: 348: delayUS(US);
 14210  100E  087A               	movf	UART_send_break_timed@US,w
 14211  100F  00F0               	movwf	i1delayUS@US
 14212  1010  087B               	movf	UART_send_break_timed@US+1,w
 14213  1011  00F1               	movwf	i1delayUS@US+1
 14214  1012  01F2               	clrf	i1delayUS@US+2
 14215  1013  01F3               	clrf	i1delayUS@US+3
 14216  1014  319B  23DB         	fcall	i1_delayUS
 14217                           
 14218                           ;UART.c: 349: LATC |= 0b00000100;
 14219  1016  0022               	movlb	2	; select bank2
 14220  1017  150E               	bsf	14,2	;volatile
 14221                           
 14222                           ;UART.c: 351: PPSLOCK =0;
 14223  1018  003C               	movlb	28	; select bank28
 14224  1019  018F               	clrf	15	;volatile
 14225                           
 14226                           ;UART.c: 352: RC2PPS = 0b00010100;
 14227  101A  3014               	movlw	20
 14228  101B  003D               	movlb	29	; select bank29
 14229  101C  00A2               	movwf	34	;volatile
 14230                           
 14231                           ;UART.c: 353: CKPPS = 0b00010010;
 14232  101D  3012               	movlw	18
 14233  101E  003C               	movlb	28	; select bank28
 14234  101F  00A5               	movwf	37	;volatile
 14235                           
 14236                           ;UART.c: 355: RXPPS = 0b00010101;
 14237  1020  3015               	movlw	21
 14238  1021  00A4               	movwf	36	;volatile
 14239                           
 14240                           ;UART.c: 357: PPSLOCK =1;
 14241  1022  3001               	movlw	1
 14242  1023  008F               	movwf	15	;volatile
 14243  1024  0008               	return
 14244  1025                     __end_of_UART_send_break_timed:	
 14245                           
 14246                           	psect	text50
 14247  187A                     __ptext50:	
 14248 ;; *************** function _UART_send_break *****************
 14249 ;; Defined at:
 14250 ;;		line 327 in file "UART.c"
 14251 ;; Parameters:    Size  Location     Type
 14252 ;;		None
 14253 ;; Auto vars:     Size  Location     Type
 14254 ;;		None
 14255 ;; Return value:  Size  Location     Type
 14256 ;;		None               void
 14257 ;; Registers used:
 14258 ;;		wreg
 14259 ;; Tracked objects:
 14260 ;;		On entry : 0/0
 14261 ;;		On exit  : 0/0
 14262 ;;		Unchanged: 0/0
 14263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14268 ;;Total ram usage:        0 bytes
 14269 ;; Hardware stack levels used:    1
 14270 ;; This function calls:
 14271 ;;		Nothing
 14272 ;; This function is called by:
 14273 ;;		_Process_PS2_ScanCode
 14274 ;; This function uses a non-reentrant model
 14275 ;;
 14276                           
 14277                           
 14278                           ;psect for function _UART_send_break
 14279  187A                     _UART_send_break:	
 14280                           
 14281                           ;UART.c: 329: TX1STA |= 0b00001000;
 14282                           
 14283                           ;incstack = 0
 14284                           ; Regs used in _UART_send_break: [wreg]
 14285  187A  0023               	movlb	3	; select bank3
 14286  187B  159E               	bsf	30,3	;volatile
 14287                           
 14288                           ;UART.c: 330: TXREG = 'd';
 14289  187C  3064               	movlw	100
 14290  187D  009A               	movwf	26	;volatile
 14291  187E  0008               	return
 14292  187F                     __end_of_UART_send_break:	
 14293                           
 14294                           	psect	text51
 14295  0B65                     __ptext51:	
 14296 ;; *************** function _SetBaud *****************
 14297 ;; Defined at:
 14298 ;;		line 385 in file "UART.c"
 14299 ;; Parameters:    Size  Location     Type
 14300 ;;  Baud            4   15[BANK1 ] unsigned long 
 14301 ;;  Parity          1   19[BANK1 ] unsigned char 
 14302 ;; Auto vars:     Size  Location     Type
 14303 ;;  buf            50    0[BANK2 ] unsigned char [50]
 14304 ;;  temp            4   58[BANK2 ] unsigned long 
 14305 ;;  Paritytemp      4   54[BANK2 ] unsigned long 
 14306 ;;  Baudtemp        4   50[BANK2 ] unsigned long 
 14307 ;;  i               1   62[BANK2 ] unsigned char 
 14308 ;; Return value:  Size  Location     Type
 14309 ;;		None               void
 14310 ;; Registers used:
 14311 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14312 ;; Tracked objects:
 14313 ;;		On entry : 0/0
 14314 ;;		On exit  : 0/0
 14315 ;;		Unchanged: 0/0
 14316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14317 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 14318 ;;      Locals:         0       0       0      63       0       0       0       0       0       0       0       0       
      +0       0
 14319 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
 14320 ;;      Totals:         0       0      13      63       0       0       0       0       0       0       0       0       
      +0       0
 14321 ;;Total ram usage:       76 bytes
 14322 ;; Hardware stack levels used:    1
 14323 ;; Hardware stack levels required when called:    4
 14324 ;; This function calls:
 14325 ;;		_WriteBaud
 14326 ;;		_sprintf
 14327 ;;		i1_InitUART
 14328 ;;		i1_ReadBaud
 14329 ;;		i1_UARTstringWAIT
 14330 ;;		i1_delayUS
 14331 ;; This function is called by:
 14332 ;;		_Process_PS2_ScanCode
 14333 ;; This function uses a non-reentrant model
 14334 ;;
 14335                           
 14336                           
 14337                           ;psect for function _SetBaud
 14338  0B65                     _SetBaud:	
 14339                           
 14340                           ;UART.c: 387: unsigned char buf[50];
 14341                           ;UART.c: 388: unsigned long Baudtemp=0;
 14342                           
 14343                           ;incstack = 0
 14344                           ; Regs used in _SetBaud: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14345  0B65  3000               	movlw	0
 14346  0B66  0022               	movlb	2	; select bank2
 14347  0B67  00D5               	movwf	(SetBaud@Baudtemp+3)^(0+256)
 14348  0B68  3000               	movlw	0
 14349  0B69  00D4               	movwf	(SetBaud@Baudtemp+2)^(0+256)
 14350  0B6A  3000               	movlw	0
 14351  0B6B  00D3               	movwf	(SetBaud@Baudtemp+1)^(0+256)
 14352  0B6C  3000               	movlw	0
 14353  0B6D  00D2               	movwf	SetBaud@Baudtemp^(0+256)
 14354                           
 14355                           ;UART.c: 389: unsigned long Paritytemp=0;
 14356  0B6E  3000               	movlw	0
 14357  0B6F  00D9               	movwf	(SetBaud@Paritytemp+3)^(0+256)
 14358  0B70  3000               	movlw	0
 14359  0B71  00D8               	movwf	(SetBaud@Paritytemp+2)^(0+256)
 14360  0B72  3000               	movlw	0
 14361  0B73  00D7               	movwf	(SetBaud@Paritytemp+1)^(0+256)
 14362  0B74  3000               	movlw	0
 14363  0B75  00D6               	movwf	SetBaud@Paritytemp^(0+256)
 14364                           
 14365                           ;UART.c: 390: unsigned long temp;
 14366                           ;UART.c: 391: unsigned char i =0;
 14367  0B76  01DE               	clrf	SetBaud@i^(0+256)
 14368                           
 14369                           ;UART.c: 393: WriteBaud((0x1800 >> 5), Baud, Parity);
 14370  0B77  30C0               	movlw	192
 14371  0B78  0021               	movlb	1	; select bank1
 14372  0B79  00A0               	movwf	WriteBaud@row^(0+128)
 14373  0B7A  3000               	movlw	0
 14374  0B7B  00A1               	movwf	(WriteBaud@row^(0+128)+1)
 14375  0B7C  0832               	movf	(SetBaud@Baud+3)^(0+128),w
 14376  0B7D  00A5               	movwf	(WriteBaud@Baud+3)^(0+128)
 14377  0B7E  0831               	movf	(SetBaud@Baud+2)^(0+128),w
 14378  0B7F  00A4               	movwf	(WriteBaud@Baud+2)^(0+128)
 14379  0B80  0830               	movf	(SetBaud@Baud+1)^(0+128),w
 14380  0B81  00A3               	movwf	(WriteBaud@Baud+1)^(0+128)
 14381  0B82  082F               	movf	SetBaud@Baud^(0+128),w
 14382  0B83  00A2               	movwf	WriteBaud@Baud^(0+128)
 14383  0B84  0833               	movf	SetBaud@Parity^(0+128),w
 14384  0B85  00B4               	movwf	??_SetBaud^(0+128)
 14385  0B86  0834               	movf	??_SetBaud^(0+128),w
 14386  0B87  00A6               	movwf	WriteBaud@Parity^(0+128)
 14387  0B88  3191  21B2  318B   	fcall	_WriteBaud
 14388                           
 14389                           ;UART.c: 394: temp = ReadBaud((0x1800 >> 5), 0);
 14390  0B8B  30C0               	movlw	192
 14391  0B8C  0020               	movlb	0	; select bank0
 14392  0B8D  00A4               	movwf	i1ReadBaud@row
 14393  0B8E  3000               	movlw	0
 14394  0B8F  00A5               	movwf	i1ReadBaud@row+1
 14395  0B90  01A6               	clrf	i1ReadBaud@column
 14396  0B91  3190  2025  318B   	fcall	i1_ReadBaud
 14397  0B94  0020               	movlb	0	; select bank0
 14398  0B95  0827               	movf	?i1_ReadBaud+3,w
 14399  0B96  0022               	movlb	2	; select bank2
 14400  0B97  00DD               	movwf	(SetBaud@temp+3)^(0+256)
 14401  0B98  0020               	movlb	0	; select bank0
 14402  0B99  0826               	movf	?i1_ReadBaud+2,w
 14403  0B9A  0022               	movlb	2	; select bank2
 14404  0B9B  00DC               	movwf	(SetBaud@temp+2)^(0+256)
 14405  0B9C  0020               	movlb	0	; select bank0
 14406  0B9D  0825               	movf	?i1_ReadBaud+1,w
 14407  0B9E  0022               	movlb	2	; select bank2
 14408  0B9F  00DB               	movwf	(SetBaud@temp+1)^(0+256)
 14409  0BA0  0020               	movlb	0	; select bank0
 14410  0BA1  0824               	movf	?i1_ReadBaud,w
 14411  0BA2  0022               	movlb	2	; select bank2
 14412  0BA3  00DA               	movwf	SetBaud@temp^(0+256)
 14413                           
 14414                           ;UART.c: 395: Baudtemp = temp & 0x000FFFFF;
 14415  0BA4  30FF               	movlw	255
 14416  0BA5  055A               	andwf	SetBaud@temp^(0+256),w
 14417  0BA6  00D2               	movwf	SetBaud@Baudtemp^(0+256)
 14418  0BA7  30FF               	movlw	255
 14419  0BA8  055B               	andwf	(SetBaud@temp+1)^(0+256),w
 14420  0BA9  00D3               	movwf	(SetBaud@Baudtemp+1)^(0+256)
 14421  0BAA  300F               	movlw	15
 14422  0BAB  055C               	andwf	(SetBaud@temp+2)^(0+256),w
 14423  0BAC  00D4               	movwf	(SetBaud@Baudtemp+2)^(0+256)
 14424  0BAD  3000               	movlw	0
 14425  0BAE  055D               	andwf	(SetBaud@temp+3)^(0+256),w
 14426  0BAF  00D5               	movwf	(SetBaud@Baudtemp+3)^(0+256)
 14427                           
 14428                           ;UART.c: 396: Paritytemp = (unsigned char)((temp & 0x00F00000) >> 20);
 14429  0BB0  085A               	movf	SetBaud@temp^(0+256),w
 14430  0BB1  0021               	movlb	1	; select bank1
 14431  0BB2  00B4               	movwf	??_SetBaud^(0+128)
 14432  0BB3  0022               	movlb	2	; select bank2
 14433  0BB4  085B               	movf	(SetBaud@temp+1)^(0+256),w
 14434  0BB5  0021               	movlb	1	; select bank1
 14435  0BB6  00B5               	movwf	(??_SetBaud^(0+128)+1)
 14436  0BB7  0022               	movlb	2	; select bank2
 14437  0BB8  085C               	movf	(SetBaud@temp+2)^(0+256),w
 14438  0BB9  0021               	movlb	1	; select bank1
 14439  0BBA  00B6               	movwf	(??_SetBaud^(0+128)+2)
 14440  0BBB  0022               	movlb	2	; select bank2
 14441  0BBC  085D               	movf	(SetBaud@temp+3)^(0+256),w
 14442  0BBD  0021               	movlb	1	; select bank1
 14443  0BBE  00B7               	movwf	(??_SetBaud^(0+128)+3)
 14444  0BBF  3014               	movlw	20
 14445  0BC0                     u541_25:	
 14446  0BC0  36B7               	lsrf	(??_SetBaud^(0+128)+3),f
 14447  0BC1  0CB6               	rrf	(??_SetBaud^(0+128)+2),f
 14448  0BC2  0CB5               	rrf	(??_SetBaud^(0+128)+1),f
 14449  0BC3  0CB4               	rrf	??_SetBaud^(0+128),f
 14450  0BC4  0B89               	decfsz	9,f
 14451  0BC5  2BC0               	goto	u541_25
 14452  0BC6  0834               	movf	??_SetBaud^(0+128),w
 14453  0BC7  390F               	andlw	15
 14454  0BC8  00B8               	movwf	(??_SetBaud+4)^(0+128)
 14455  0BC9  01B9               	clrf	((??_SetBaud+4)^(0+128)+1)
 14456  0BCA  01BA               	clrf	((??_SetBaud+4)^(0+128)+2)
 14457  0BCB  01BB               	clrf	((??_SetBaud+4)^(0+128)+3)
 14458  0BCC  083B               	movf	(??_SetBaud+7)^(0+128),w
 14459  0BCD  0022               	movlb	2	; select bank2
 14460  0BCE  00D9               	movwf	(SetBaud@Paritytemp+3)^(0+256)
 14461  0BCF  0021               	movlb	1	; select bank1
 14462  0BD0  083A               	movf	(??_SetBaud+6)^(0+128),w
 14463  0BD1  0022               	movlb	2	; select bank2
 14464  0BD2  00D8               	movwf	(SetBaud@Paritytemp+2)^(0+256)
 14465  0BD3  0021               	movlb	1	; select bank1
 14466  0BD4  0839               	movf	(??_SetBaud+5)^(0+128),w
 14467  0BD5  0022               	movlb	2	; select bank2
 14468  0BD6  00D7               	movwf	(SetBaud@Paritytemp+1)^(0+256)
 14469  0BD7  0021               	movlb	1	; select bank1
 14470  0BD8  0838               	movf	(??_SetBaud+4)^(0+128),w
 14471  0BD9  0022               	movlb	2	; select bank2
 14472  0BDA  00D6               	movwf	SetBaud@Paritytemp^(0+256)
 14473                           
 14474                           ;UART.c: 398: InitUART(Baud, Parity);
 14475  0BDB  0021               	movlb	1	; select bank1
 14476  0BDC  0832               	movf	(SetBaud@Baud+3)^(0+128),w
 14477  0BDD  0020               	movlb	0	; select bank0
 14478  0BDE  00A3               	movwf	i1InitUART@Baud+3
 14479  0BDF  0021               	movlb	1	; select bank1
 14480  0BE0  0831               	movf	(SetBaud@Baud+2)^(0+128),w
 14481  0BE1  0020               	movlb	0	; select bank0
 14482  0BE2  00A2               	movwf	i1InitUART@Baud+2
 14483  0BE3  0021               	movlb	1	; select bank1
 14484  0BE4  0830               	movf	(SetBaud@Baud+1)^(0+128),w
 14485  0BE5  0020               	movlb	0	; select bank0
 14486  0BE6  00A1               	movwf	i1InitUART@Baud+1
 14487  0BE7  0021               	movlb	1	; select bank1
 14488  0BE8  082F               	movf	SetBaud@Baud^(0+128),w
 14489  0BE9  0020               	movlb	0	; select bank0
 14490  0BEA  00A0               	movwf	i1InitUART@Baud
 14491  0BEB  0021               	movlb	1	; select bank1
 14492  0BEC  0833               	movf	SetBaud@Parity^(0+128),w
 14493  0BED  00B4               	movwf	??_SetBaud^(0+128)
 14494  0BEE  0834               	movf	??_SetBaud^(0+128),w
 14495  0BEF  0020               	movlb	0	; select bank0
 14496  0BF0  00A4               	movwf	i1InitUART@parity
 14497  0BF1  3195  2526  318B   	fcall	i1_InitUART
 14498                           
 14499                           ;UART.c: 399: UARTstringWAIT("\r\n");
 14500  0BF4  30FD               	movlw	low ((STR_14+16)| (0+32768))
 14501  0BF5  0020               	movlb	0	; select bank0
 14502  0BF6  00A1               	movwf	i1UARTstringWAIT@data
 14503  0BF7  3089               	movlw	high ((STR_14+16)| (0+32768))
 14504  0BF8  00A2               	movwf	i1UARTstringWAIT@data+1
 14505  0BF9  319B  234A  318B   	fcall	i1_UARTstringWAIT
 14506                           
 14507                           ;UART.c: 400: delayUS(15000);
 14508  0BFC  3000               	movlw	0
 14509  0BFD  00F3               	movwf	i1delayUS@US+3
 14510  0BFE  3000               	movlw	0
 14511  0BFF  00F2               	movwf	i1delayUS@US+2
 14512  0C00  303A               	movlw	58
 14513  0C01  00F1               	movwf	i1delayUS@US+1
 14514  0C02  3098               	movlw	152
 14515  0C03  00F0               	movwf	i1delayUS@US
 14516  0C04  319B  23DB  318B   	fcall	i1_delayUS
 14517                           
 14518                           ;UART.c: 401: if((Baud != Baudtemp) || (Parity != Paritytemp))
 14519  0C07  0022               	movlb	2	; select bank2
 14520  0C08  0855               	movf	(SetBaud@Baudtemp+3)^(0+256),w
 14521  0C09  0021               	movlb	1	; select bank1
 14522  0C0A  0632               	xorwf	(SetBaud@Baud+3)^(0+128),w
 14523  0C0B  1D03               	skipz
 14524  0C0C  2C1D               	goto	u542_25
 14525  0C0D  0022               	movlb	2	; select bank2
 14526  0C0E  0854               	movf	(SetBaud@Baudtemp+2)^(0+256),w
 14527  0C0F  0021               	movlb	1	; select bank1
 14528  0C10  0631               	xorwf	(SetBaud@Baud+2)^(0+128),w
 14529  0C11  1D03               	skipz
 14530  0C12  2C1D               	goto	u542_25
 14531  0C13  0022               	movlb	2	; select bank2
 14532  0C14  0853               	movf	(SetBaud@Baudtemp+1)^(0+256),w
 14533  0C15  0021               	movlb	1	; select bank1
 14534  0C16  0630               	xorwf	(SetBaud@Baud+1)^(0+128),w
 14535  0C17  1D03               	skipz
 14536  0C18  2C1D               	goto	u542_25
 14537  0C19  0022               	movlb	2	; select bank2
 14538  0C1A  0852               	movf	SetBaud@Baudtemp^(0+256),w
 14539  0C1B  0021               	movlb	1	; select bank1
 14540  0C1C  062F               	xorwf	SetBaud@Baud^(0+128),w
 14541  0C1D                     u542_25:	
 14542  0C1D  1D03               	skipz
 14543  0C1E  2C3C               	goto	i1l4850
 14544  0C1F  0833               	movf	SetBaud@Parity^(0+128),w
 14545  0C20  00B4               	movwf	??_SetBaud^(0+128)
 14546  0C21  01B5               	clrf	(??_SetBaud^(0+128)+1)
 14547  0C22  01B6               	clrf	(??_SetBaud^(0+128)+2)
 14548  0C23  01B7               	clrf	(??_SetBaud^(0+128)+3)
 14549  0C24  0022               	movlb	2	; select bank2
 14550  0C25  0859               	movf	(SetBaud@Paritytemp+3)^(0+256),w
 14551  0C26  0021               	movlb	1	; select bank1
 14552  0C27  0637               	xorwf	(??_SetBaud+3)^(0+128),w
 14553  0C28  1D03               	skipz
 14554  0C29  2C3A               	goto	u543_25
 14555  0C2A  0022               	movlb	2	; select bank2
 14556  0C2B  0858               	movf	(SetBaud@Paritytemp+2)^(0+256),w
 14557  0C2C  0021               	movlb	1	; select bank1
 14558  0C2D  0636               	xorwf	(??_SetBaud+2)^(0+128),w
 14559  0C2E  1D03               	skipz
 14560  0C2F  2C3A               	goto	u543_25
 14561  0C30  0022               	movlb	2	; select bank2
 14562  0C31  0857               	movf	(SetBaud@Paritytemp+1)^(0+256),w
 14563  0C32  0021               	movlb	1	; select bank1
 14564  0C33  0635               	xorwf	(??_SetBaud+1)^(0+128),w
 14565  0C34  1D03               	skipz
 14566  0C35  2C3A               	goto	u543_25
 14567  0C36  0022               	movlb	2	; select bank2
 14568  0C37  0856               	movf	SetBaud@Paritytemp^(0+256),w
 14569  0C38  0021               	movlb	1	; select bank1
 14570  0C39  0634               	xorwf	??_SetBaud^(0+128),w
 14571  0C3A                     u543_25:	
 14572  0C3A  1903               	skipnz
 14573  0C3B  2C4F               	goto	i1l4854
 14574  0C3C                     i1l4850:	
 14575                           
 14576                           ;UART.c: 402: {
 14577                           ;UART.c: 403: UARTstringWAIT("Flash Program Fail\r\n");
 14578  0C3C  30C4               	movlw	low (STR_10| (0+32768))
 14579  0C3D  0020               	movlb	0	; select bank0
 14580  0C3E  00A1               	movwf	i1UARTstringWAIT@data
 14581  0C3F  3089               	movlw	high (STR_10| (0+32768))
 14582  0C40  00A2               	movwf	i1UARTstringWAIT@data+1
 14583  0C41  319B  234A  318B   	fcall	i1_UARTstringWAIT
 14584                           
 14585                           ;UART.c: 404: delayUS(15000);
 14586  0C44  3000               	movlw	0
 14587  0C45  00F3               	movwf	i1delayUS@US+3
 14588  0C46  3000               	movlw	0
 14589  0C47  00F2               	movwf	i1delayUS@US+2
 14590  0C48  303A               	movlw	58
 14591  0C49  00F1               	movwf	i1delayUS@US+1
 14592  0C4A  3098               	movlw	152
 14593  0C4B  00F0               	movwf	i1delayUS@US
 14594  0C4C  319B  23DB  318B   	fcall	i1_delayUS
 14595  0C4F                     i1l4854:	
 14596                           
 14597                           ;UART.c: 405: }
 14598                           ;UART.c: 408: for(i =0;i<10;i++)
 14599  0C4F  0022               	movlb	2	; select bank2
 14600  0C50  01DE               	clrf	SetBaud@i^(0+256)
 14601  0C51  300A               	movlw	10
 14602  0C52  025E               	subwf	SetBaud@i^(0+256),w
 14603  0C53  1803               	btfsc	3,0
 14604  0C54  2C7C               	goto	i1l4868
 14605  0C55                     i1l468:	
 14606                           
 14607                           ;UART.c: 409: {
 14608                           ;UART.c: 410: LATC |= 0b00010000;
 14609  0C55  160E               	bsf	14,4	;volatile
 14610                           
 14611                           ;UART.c: 411: delayUS(10000);
 14612  0C56  3000               	movlw	0
 14613  0C57  00F3               	movwf	i1delayUS@US+3
 14614  0C58  3000               	movlw	0
 14615  0C59  00F2               	movwf	i1delayUS@US+2
 14616  0C5A  3027               	movlw	39
 14617  0C5B  00F1               	movwf	i1delayUS@US+1
 14618  0C5C  3010               	movlw	16
 14619  0C5D  00F0               	movwf	i1delayUS@US
 14620  0C5E  319B  23DB  318B   	fcall	i1_delayUS
 14621                           
 14622                           ;UART.c: 412: LATC &= ~0b00010000;
 14623  0C61  30EF               	movlw	239
 14624  0C62  0021               	movlb	1	; select bank1
 14625  0C63  00B4               	movwf	??_SetBaud^(0+128)
 14626  0C64  0834               	movf	??_SetBaud^(0+128),w
 14627  0C65  0022               	movlb	2	; select bank2
 14628  0C66  058E               	andwf	14,f	;volatile
 14629                           
 14630                           ;UART.c: 413: delayUS(10000);
 14631  0C67  3000               	movlw	0
 14632  0C68  00F3               	movwf	i1delayUS@US+3
 14633  0C69  3000               	movlw	0
 14634  0C6A  00F2               	movwf	i1delayUS@US+2
 14635  0C6B  3027               	movlw	39
 14636  0C6C  00F1               	movwf	i1delayUS@US+1
 14637  0C6D  3010               	movlw	16
 14638  0C6E  00F0               	movwf	i1delayUS@US
 14639  0C6F  319B  23DB  318B   	fcall	i1_delayUS
 14640  0C72  3001               	movlw	1
 14641  0C73  0021               	movlb	1	; select bank1
 14642  0C74  00B4               	movwf	??_SetBaud^(0+128)
 14643  0C75  0834               	movf	??_SetBaud^(0+128),w
 14644  0C76  0022               	movlb	2	; select bank2
 14645  0C77  07DE               	addwf	SetBaud@i^(0+256),f
 14646  0C78  300A               	movlw	10
 14647  0C79  025E               	subwf	SetBaud@i^(0+256),w
 14648  0C7A  1C03               	skipc
 14649  0C7B  2C55               	goto	i1l468
 14650  0C7C                     i1l4868:	
 14651                           
 14652                           ;UART.c: 414: }
 14653                           ;UART.c: 416: sprintf(buf,"Baud is %lu",Baud);
 14654  0C7C  3026               	movlw	low (STR_11| (0+32768))
 14655  0C7D  0020               	movlb	0	; select bank0
 14656  0C7E  00AA               	movwf	sprintf@f
 14657  0C7F  308A               	movlw	high (STR_11| (0+32768))
 14658  0C80  00AB               	movwf	sprintf@f+1
 14659  0C81  0021               	movlb	1	; select bank1
 14660  0C82  0832               	movf	(SetBaud@Baud+3)^(0+128),w
 14661  0C83  0020               	movlb	0	; select bank0
 14662  0C84  00AF               	movwf	?_sprintf+5
 14663  0C85  0021               	movlb	1	; select bank1
 14664  0C86  0831               	movf	(SetBaud@Baud+2)^(0+128),w
 14665  0C87  0020               	movlb	0	; select bank0
 14666  0C88  00AE               	movwf	?_sprintf+4
 14667  0C89  0021               	movlb	1	; select bank1
 14668  0C8A  0830               	movf	(SetBaud@Baud+1)^(0+128),w
 14669  0C8B  0020               	movlb	0	; select bank0
 14670  0C8C  00AD               	movwf	?_sprintf+3
 14671  0C8D  0021               	movlb	1	; select bank1
 14672  0C8E  082F               	movf	SetBaud@Baud^(0+128),w
 14673  0C8F  0020               	movlb	0	; select bank0
 14674  0C90  00AC               	movwf	?_sprintf+2
 14675  0C91  3020               	movlw	(low (SetBaud@buf| (0+256)))& (0+255)
 14676  0C92  3197  270A  318B   	fcall	_sprintf
 14677                           
 14678                           ;UART.c: 417: UARTstringWAIT(buf);
 14679  0C95  3020               	movlw	low SetBaud@buf
 14680  0C96  0020               	movlb	0	; select bank0
 14681  0C97  00A1               	movwf	i1UARTstringWAIT@data
 14682  0C98  3001               	movlw	high SetBaud@buf
 14683  0C99  00A2               	movwf	i1UARTstringWAIT@data+1
 14684  0C9A  319B  234A  318B   	fcall	i1_UARTstringWAIT
 14685                           
 14686                           ;UART.c: 418: if(Parity)
 14687  0C9D  0021               	movlb	1	; select bank1
 14688  0C9E  0833               	movf	SetBaud@Parity^(0+128),w
 14689  0C9F  1D03               	btfss	3,2
 14690  0CA0  2CB6               	goto	i1l4886
 14691  0CA1  2CC3               	goto	i1l4888
 14692  0CA2                     i1l4876:	
 14693                           ;UART.c: 421: {
 14694                           ;UART.c: 422: case 1:
 14695                           
 14696                           ;UART.c: 419: {
 14697                           ;UART.c: 420: switch (Parity)
 14698                           
 14699                           
 14700                           ;UART.c: 423: UARTstringWAIT(OddParityMSG);
 14701  0CA2  3011               	movlw	low (_OddParityMSG| (0+32768))
 14702  0CA3  0020               	movlb	0	; select bank0
 14703  0CA4  00A1               	movwf	i1UARTstringWAIT@data
 14704  0CA5  3089               	movlw	high (_OddParityMSG| (0+32768))
 14705  0CA6  2CC7               	goto	L13
 14706  0CA7                     i1l4878:	
 14707                           ;UART.c: 425: case 2:
 14708                           
 14709                           ;UART.c: 424: break;
 14710                           
 14711                           
 14712                           ;UART.c: 426: UARTstringWAIT(EvenParityMSG);
 14713  0CA7  30FB               	movlw	low (_EvenParityMSG| (0+32768))
 14714  0CA8  0020               	movlb	0	; select bank0
 14715  0CA9  00A1               	movwf	i1UARTstringWAIT@data
 14716  0CAA  3088               	movlw	high (_EvenParityMSG| (0+32768))
 14717  0CAB  2CC7               	goto	L13
 14718  0CAC                     i1l4880:	
 14719                           ;UART.c: 428: case 3:
 14720                           
 14721                           ;UART.c: 427: break;
 14722                           
 14723                           
 14724                           ;UART.c: 429: UARTstringWAIT(MarkParityMSG);
 14725  0CAC  304A               	movlw	low (_MarkParityMSG| (0+32768))
 14726  0CAD  0020               	movlb	0	; select bank0
 14727  0CAE  00A1               	movwf	i1UARTstringWAIT@data
 14728  0CAF  3089               	movlw	high (_MarkParityMSG| (0+32768))
 14729  0CB0  2CC7               	goto	L13
 14730  0CB1                     i1l4882:	
 14731                           ;UART.c: 431: default:
 14732                           
 14733                           ;UART.c: 430: break;
 14734                           
 14735                           
 14736                           ;UART.c: 432: UARTstringWAIT(SpaceParityMSG);
 14737  0CB1  303A               	movlw	low (_SpaceParityMSG| (0+32768))
 14738  0CB2  0020               	movlb	0	; select bank0
 14739  0CB3  00A1               	movwf	i1UARTstringWAIT@data
 14740  0CB4  3089               	movlw	high (_SpaceParityMSG| (0+32768))
 14741  0CB5  2CC7               	goto	L13
 14742  0CB6                     i1l4886:	
 14743                           ;UART.c: 434: }
 14744                           
 14745                           ;UART.c: 433: break;
 14746                           
 14747  0CB6  0021               	movlb	1	; select bank1
 14748  0CB7  0833               	movf	SetBaud@Parity^(0+128),w
 14749                           
 14750                           ; Switch size 1, requested type "space"
 14751                           ; Number of cases is 3, Range of values is 1 to 3
 14752                           ; switch strategies available:
 14753                           ; Name         Instructions Cycles
 14754                           ; simple_byte           10     6 (average)
 14755                           ; direct_byte           15     9 (fixed)
 14756                           ; jumptable            263     9 (fixed)
 14757                           ;	Chosen strategy is simple_byte
 14758  0CB8  3A01               	xorlw	1	; case 1
 14759  0CB9  1903               	skipnz
 14760  0CBA  2CA2               	goto	i1l4876
 14761  0CBB  3A03               	xorlw	3	; case 2
 14762  0CBC  1903               	skipnz
 14763  0CBD  2CA7               	goto	i1l4878
 14764  0CBE  3A01               	xorlw	1	; case 3
 14765  0CBF  1903               	skipnz
 14766  0CC0  2CAC               	goto	i1l4880
 14767  0CC1  2CB1               	goto	i1l4882
 14768                           
 14769                           ;UART.c: 435: }
 14770  0CC2  2CCB               	goto	i1l477
 14771  0CC3                     i1l4888:	
 14772                           
 14773                           ;UART.c: 436: else
 14774                           ;UART.c: 437: {
 14775                           ;UART.c: 438: UARTstringWAIT(NoParityMSG);
 14776  0CC3  3026               	movlw	low (_NoParityMSG| (0+32768))
 14777  0CC4  0020               	movlb	0	; select bank0
 14778  0CC5  00A1               	movwf	i1UARTstringWAIT@data
 14779  0CC6  3089               	movlw	high (_NoParityMSG| (0+32768))
 14780  0CC7                     L13:	
 14781  0CC7  00A2               	movwf	i1UARTstringWAIT@data+1
 14782  0CC8  319B  234A  318B   	fcall	i1_UARTstringWAIT
 14783  0CCB                     i1l477:	
 14784                           
 14785                           ;UART.c: 439: }
 14786                           ;UART.c: 440: UARTstringWAIT("\r\n");
 14787  0CCB  30FD               	movlw	low ((STR_14+16)| (0+32768))
 14788  0CCC  0020               	movlb	0	; select bank0
 14789  0CCD  00A1               	movwf	i1UARTstringWAIT@data
 14790  0CCE  3089               	movlw	high ((STR_14+16)| (0+32768))
 14791  0CCF  00A2               	movwf	i1UARTstringWAIT@data+1
 14792  0CD0  319B  234A  318B   	fcall	i1_UARTstringWAIT
 14793                           
 14794                           ;UART.c: 441: delayUS(15000);
 14795  0CD3  3000               	movlw	0
 14796  0CD4  00F3               	movwf	i1delayUS@US+3
 14797  0CD5  3000               	movlw	0
 14798  0CD6  00F2               	movwf	i1delayUS@US+2
 14799  0CD7  303A               	movlw	58
 14800  0CD8  00F1               	movwf	i1delayUS@US+1
 14801  0CD9  3098               	movlw	152
 14802  0CDA  00F0               	movwf	i1delayUS@US
 14803  0CDB  319B  23DB         	fcall	i1_delayUS
 14804  0CDD  0008               	return
 14805  0CDE                     __end_of_SetBaud:	
 14806                           
 14807                           	psect	text52
 14808  1B4A                     __ptext52:	
 14809 ;; *************** function i1_UARTstringWAIT *****************
 14810 ;; Defined at:
 14811 ;;		line 366 in file "UART.c"
 14812 ;; Parameters:    Size  Location     Type
 14813 ;;  data            2    1[BANK0 ] PTR const unsigned char 
 14814 ;;		 -> STR_20(20), STR_19(3), Process_PS2_ScanCode@buf(60), STR_17(3), 
 14815 ;;		 -> STR_16(3), STR_15(19), STR_14(19), STR_13(3), 
 14816 ;;		 -> STR_12(3), SetBaud@buf(50), STR_10(21), STR_9(3), 
 14817 ;;		 -> STR_8(3), NoParityMSG(20), SpaceParityMSG(16), MarkParityMSG(15), 
 14818 ;;		 -> EvenParityMSG(22), OddParityMSG(21), STR_7(3), STR_6(33), 
 14819 ;;		 -> STR_5(3), Version(9), STR_4(19), STR_3(28), 
 14820 ;;		 -> STR_2(8), STR_1(7), VoltageMSG(13), 
 14821 ;; Auto vars:     Size  Location     Type
 14822 ;;		None
 14823 ;; Return value:  Size  Location     Type
 14824 ;;		None               void
 14825 ;; Registers used:
 14826 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14827 ;; Tracked objects:
 14828 ;;		On entry : 0/0
 14829 ;;		On exit  : 0/0
 14830 ;;		Unchanged: 0/0
 14831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14832 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14834 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14835 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14836 ;;Total ram usage:        5 bytes
 14837 ;; Hardware stack levels used:    1
 14838 ;; Hardware stack levels required when called:    2
 14839 ;; This function calls:
 14840 ;;		i1_UARTchar
 14841 ;;		i1_delayUS
 14842 ;; This function is called by:
 14843 ;;		_SetBaud
 14844 ;;		_Process_PS2_ScanCode
 14845 ;; This function uses a non-reentrant model
 14846 ;;
 14847                           
 14848                           
 14849                           ;psect for function i1_UARTstringWAIT
 14850  1B4A                     i1_UARTstringWAIT:	
 14851  1B4A                     i1l456:	
 14852                           ;incstack = 0
 14853                           ; Regs used in i1_UARTstringWAIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14854                           ;UART.c: 368: do
 14855                           
 14856                           
 14857                           ;UART.c: 369: {
 14858                           ;UART.c: 370: delayUS(5000);
 14859  1B4A  3000               	movlw	0
 14860  1B4B  00F3               	movwf	i1delayUS@US+3
 14861  1B4C  3000               	movlw	0
 14862  1B4D  00F2               	movwf	i1delayUS@US+2
 14863  1B4E  3013               	movlw	19
 14864  1B4F  00F1               	movwf	i1delayUS@US+1
 14865  1B50  3088               	movlw	136
 14866  1B51  00F0               	movwf	i1delayUS@US
 14867  1B52  319B  23DB  319B   	fcall	i1_delayUS
 14868                           
 14869                           ;UART.c: 371: if(*data != 0)
 14870  1B55  0020               	movlb	0	; select bank0
 14871  1B56  0821               	movf	i1UARTstringWAIT@data,w
 14872  1B57  0084               	movwf	4
 14873  1B58  0822               	movf	i1UARTstringWAIT@data+1,w
 14874  1B59  0085               	movwf	5
 14875  1B5A  0012               	moviw fsr0++
 14876  1B5B  1903               	btfsc	3,2
 14877  1B5C  2B6A               	goto	i1l4612
 14878                           
 14879                           ;UART.c: 372: {
 14880                           ;UART.c: 373: UARTchar(*data, 0, 0);
 14881  1B5D  01F8               	clrf	i1UARTchar@override
 14882  1B5E  01F9               	clrf	i1UARTchar@NinethBit_override_data
 14883  1B5F  0821               	movf	i1UARTstringWAIT@data,w
 14884  1B60  0084               	movwf	4
 14885  1B61  0822               	movf	i1UARTstringWAIT@data+1,w
 14886  1B62  0085               	movwf	5
 14887  1B63  0800               	movf	0,w	;code access
 14888  1B64  319D  25CE  319B   	fcall	i1_UARTchar
 14889  1B67                     i1l458:	
 14890                           ;UART.c: 374: while((!TX1STAbits.TRMT));
 14891                           
 14892  1B67  0023               	movlb	3	; select bank3
 14893  1B68  1C9E               	btfss	30,1	;volatile
 14894  1B69  2B67               	goto	i1l458
 14895  1B6A                     i1l4612:	
 14896                           
 14897                           ;UART.c: 375: }
 14898                           ;UART.c: 376: } while( *data++);
 14899  1B6A  0020               	movlb	0	; select bank0
 14900  1B6B  0822               	movf	i1UARTstringWAIT@data+1,w
 14901  1B6C  00A4               	movwf	??i1_UARTstringWAIT+1
 14902  1B6D  0821               	movf	i1UARTstringWAIT@data,w
 14903  1B6E  00A3               	movwf	??i1_UARTstringWAIT
 14904  1B6F  0AA1               	incf	i1UARTstringWAIT@data,f
 14905  1B70  1903               	skipnz
 14906  1B71  0AA2               	incf	i1UARTstringWAIT@data+1,f
 14907  1B72  0823               	movf	??i1_UARTstringWAIT,w
 14908  1B73  0084               	movwf	4
 14909  1B74  0824               	movf	??i1_UARTstringWAIT+1,w
 14910  1B75  0085               	movwf	5
 14911  1B76  0012               	moviw fsr0++
 14912  1B77  1903               	btfsc	3,2
 14913  1B78  0008               	return
 14914  1B79  2B4A               	goto	i1l456
 14915  1B7A                     __end_ofi1_UARTstringWAIT:	
 14916                           
 14917                           	psect	text53
 14918  1DCE                     __ptext53:	
 14919 ;; *************** function i1_UARTchar *****************
 14920 ;; Defined at:
 14921 ;;		line 235 in file "UART.c"
 14922 ;; Parameters:    Size  Location     Type
 14923 ;;  data            1    wreg     unsigned char 
 14924 ;;  override        1    8[COMMON] unsigned char 
 14925 ;;  NinethBit_ov    1    9[COMMON] unsigned char 
 14926 ;; Auto vars:     Size  Location     Type
 14927 ;;  data            1    0[BANK0 ] unsigned char 
 14928 ;; Return value:  Size  Location     Type
 14929 ;;		None               void
 14930 ;; Registers used:
 14931 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14932 ;; Tracked objects:
 14933 ;;		On entry : 0/0
 14934 ;;		On exit  : 0/0
 14935 ;;		Unchanged: 0/0
 14936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14937 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14938 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14939 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14940 ;;      Totals:         6       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14941 ;;Total ram usage:        7 bytes
 14942 ;; Hardware stack levels used:    1
 14943 ;; Hardware stack levels required when called:    1
 14944 ;; This function calls:
 14945 ;;		i1_CheckSum_byte
 14946 ;; This function is called by:
 14947 ;;		_isr
 14948 ;;		_Process_PS2_ScanCode
 14949 ;;		i1_UARTstringWAIT
 14950 ;; This function uses a non-reentrant model
 14951 ;;
 14952                           
 14953                           
 14954                           ;psect for function i1_UARTchar
 14955  1DCE                     i1_UARTchar:	
 14956                           
 14957                           ;incstack = 0
 14958                           ; Regs used in i1_UARTchar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14959                           ;i1UARTchar@data stored from wreg
 14960  1DCE  0020               	movlb	0	; select bank0
 14961  1DCF  00A0               	movwf	i1UARTchar@data
 14962                           
 14963                           ;UART.c: 237: if(TXSTAbits.TX9)
 14964  1DD0  0023               	movlb	3	; select bank3
 14965  1DD1  1F1E               	btfss	30,6	;volatile
 14966  1DD2  2E13               	goto	i1l431
 14967                           
 14968                           ;UART.c: 238: {
 14969                           ;UART.c: 240: if(!override)
 14970  1DD3  0878               	movf	i1UARTchar@override,w
 14971  1DD4  1903               	btfsc	3,2
 14972  1DD5  2DFD               	goto	i1l4138
 14973  1DD6  2E0A               	goto	i1l4140
 14974  1DD7                     i1l4132:	
 14975                           ;UART.c: 244: {
 14976                           ;UART.c: 245: case 1:
 14977                           
 14978                           ;UART.c: 241: {
 14979                           ;UART.c: 243: switch (PARITY)
 14980                           
 14981                           
 14982                           ;UART.c: 246: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 3);
 14983  1DD7  0020               	movlb	0	; select bank0
 14984  1DD8  0820               	movf	i1UARTchar@data,w
 14985  1DD9  00FA               	movwf	??i1_UARTchar
 14986  1DDA  01FB               	clrf	??i1_UARTchar+1
 14987  1DDB  087A               	movf	??i1_UARTchar,w
 14988  1DDC  00F0               	movwf	i1CheckSum_byte@This
 14989  1DDD  087B               	movf	??i1_UARTchar+1,w
 14990  1DDE  00F1               	movwf	i1CheckSum_byte@This+1
 14991  1DDF  3003               	movlw	3
 14992  1DE0  2DEA               	goto	L16
 14993  1DE1                     i1l4134:	
 14994                           ;UART.c: 248: case 2:
 14995                           
 14996                           ;UART.c: 247: break;
 14997                           
 14998                           
 14999                           ;UART.c: 249: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 2);
 15000  1DE1  0020               	movlb	0	; select bank0
 15001  1DE2  0820               	movf	i1UARTchar@data,w
 15002  1DE3  00FA               	movwf	??i1_UARTchar
 15003  1DE4  01FB               	clrf	??i1_UARTchar+1
 15004  1DE5  087A               	movf	??i1_UARTchar,w
 15005  1DE6  00F0               	movwf	i1CheckSum_byte@This
 15006  1DE7  087B               	movf	??i1_UARTchar+1,w
 15007  1DE8  00F1               	movwf	i1CheckSum_byte@This+1
 15008  1DE9  3002               	movlw	2
 15009  1DEA                     L16:	
 15010  1DEA  00FC               	movwf	??i1_UARTchar+2
 15011  1DEB  087C               	movf	??i1_UARTchar+2,w
 15012  1DEC  00F2               	movwf	i1CheckSum_byte@Odd_Even
 15013  1DED  319A  22BE  319D   	fcall	i1_CheckSum_byte
 15014  1DF0  00FD               	movwf	??i1_UARTchar+3
 15015  1DF1  0023               	movlb	3	; select bank3
 15016  1DF2  081E               	movf	30,w	;volatile
 15017  1DF3  067D               	xorwf	??i1_UARTchar+3,w
 15018  1DF4  39FE               	andlw	-2
 15019  1DF5  067D               	xorwf	??i1_UARTchar+3,w
 15020  1DF6  2E12               	goto	L15
 15021  1DF7                     i1l428:	
 15022                           ;UART.c: 251: case 3:
 15023                           
 15024                           ;UART.c: 250: break;
 15025                           
 15026                           
 15027                           ;UART.c: 252: TXSTAbits.TX9D = 1;
 15028  1DF7  0023               	movlb	3	; select bank3
 15029  1DF8  141E               	bsf	30,0	;volatile
 15030                           
 15031                           ;UART.c: 253: break;
 15032  1DF9  2E13               	goto	i1l431
 15033  1DFA                     i1l429:	
 15034                           ;UART.c: 254: default:
 15035                           
 15036                           
 15037                           ;UART.c: 255: TXSTAbits.TX9D = 0;
 15038  1DFA  0023               	movlb	3	; select bank3
 15039  1DFB  101E               	bcf	30,0	;volatile
 15040                           
 15041                           ;UART.c: 257: }
 15042                           
 15043                           ;UART.c: 256: break;
 15044  1DFC  2E13               	goto	i1l431
 15045  1DFD                     i1l4138:	
 15046  1DFD  0024               	movlb	4	; select bank4
 15047  1DFE  0860               	movf	_PARITY^(0+512),w
 15048                           
 15049                           ; Switch size 1, requested type "space"
 15050                           ; Number of cases is 3, Range of values is 1 to 3
 15051                           ; switch strategies available:
 15052                           ; Name         Instructions Cycles
 15053                           ; simple_byte           10     6 (average)
 15054                           ; direct_byte           15     9 (fixed)
 15055                           ; jumptable            263     9 (fixed)
 15056                           ;	Chosen strategy is simple_byte
 15057  1DFF  3A01               	xorlw	1	; case 1
 15058  1E00  1903               	skipnz
 15059  1E01  2DD7               	goto	i1l4132
 15060  1E02  3A03               	xorlw	3	; case 2
 15061  1E03  1903               	skipnz
 15062  1E04  2DE1               	goto	i1l4134
 15063  1E05  3A01               	xorlw	1	; case 3
 15064  1E06  1903               	skipnz
 15065  1E07  2DF7               	goto	i1l428
 15066  1E08  2DFA               	goto	i1l429
 15067                           
 15068                           ;UART.c: 258: }
 15069  1E09  2E13               	goto	i1l431
 15070  1E0A                     i1l4140:	
 15071                           
 15072                           ;UART.c: 259: else
 15073                           ;UART.c: 260: {
 15074                           ;UART.c: 261: TXSTAbits.TX9D = (NinethBit_override_data & 0x01);
 15075  1E0A  3001               	movlw	1
 15076  1E0B  0579               	andwf	i1UARTchar@NinethBit_override_data,w
 15077  1E0C  00FA               	movwf	??i1_UARTchar
 15078  1E0D  0023               	movlb	3	; select bank3
 15079  1E0E  081E               	movf	30,w	;volatile
 15080  1E0F  067A               	xorwf	??i1_UARTchar,w
 15081  1E10  39FE               	andlw	-2
 15082  1E11  067A               	xorwf	??i1_UARTchar,w
 15083  1E12                     L15:	
 15084  1E12  009E               	movwf	30	;volatile
 15085  1E13                     i1l431:	
 15086                           ;UART.c: 262: }
 15087                           ;UART.c: 263: }
 15088                           ;UART.c: 280: while(!TXSTAbits.TRMT);
 15089                           
 15090  1E13  0023               	movlb	3	; select bank3
 15091  1E14  1C9E               	btfss	30,1	;volatile
 15092  1E15  2E13               	goto	i1l431
 15093                           
 15094                           ;UART.c: 281: TXREG = data;
 15095  1E16  0020               	movlb	0	; select bank0
 15096  1E17  0820               	movf	i1UARTchar@data,w
 15097  1E18  0023               	movlb	3	; select bank3
 15098  1E19  009A               	movwf	26	;volatile
 15099  1E1A  0008               	return
 15100  1E1B                     __end_ofi1_UARTchar:	
 15101                           
 15102                           	psect	text54
 15103  1025                     __ptext54:	
 15104 ;; *************** function i1_ReadBaud *****************
 15105 ;; Defined at:
 15106 ;;		line 187 in file "FLASH.c"
 15107 ;; Parameters:    Size  Location     Type
 15108 ;;  row             2    4[BANK0 ] unsigned int 
 15109 ;;  column          1    6[BANK0 ] unsigned char 
 15110 ;; Auto vars:     Size  Location     Type
 15111 ;;  ReadBaud        4   16[BANK0 ] unsigned long 
 15112 ;; Return value:  Size  Location     Type
 15113 ;;                  4    4[BANK0 ] unsigned long 
 15114 ;; Registers used:
 15115 ;;		wreg, status,2, status,0, pclath, cstack
 15116 ;; Tracked objects:
 15117 ;;		On entry : 0/0
 15118 ;;		On exit  : 0/0
 15119 ;;		Unchanged: 0/0
 15120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15121 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15122 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15123 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15124 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15125 ;;Total ram usage:       16 bytes
 15126 ;; Hardware stack levels used:    1
 15127 ;; Hardware stack levels required when called:    2
 15128 ;; This function calls:
 15129 ;;		i1_ReadFlash_4Byte
 15130 ;; This function is called by:
 15131 ;;		_SetBaud
 15132 ;; This function uses a non-reentrant model
 15133 ;;
 15134                           
 15135                           
 15136                           ;psect for function i1_ReadBaud
 15137  1025                     i1_ReadBaud:	
 15138                           
 15139                           ;FLASH.c: 189: unsigned long temp;
 15140                           ;FLASH.c: 190: temp =(ReadFlash_4Byte(row, column));
 15141                           
 15142                           ;incstack = 0
 15143                           ; Regs used in i1_ReadBaud: [wreg+status,2+status,0+pclath+cstack]
 15144  1025  0020               	movlb	0	; select bank0
 15145  1026  0825               	movf	i1ReadBaud@row+1,w
 15146  1027  00F6               	movwf	i1ReadFlash_4Byte@row+1
 15147  1028  0824               	movf	i1ReadBaud@row,w
 15148  1029  00F5               	movwf	i1ReadFlash_4Byte@row
 15149  102A  0826               	movf	i1ReadBaud@column,w
 15150  102B  00A8               	movwf	??i1_ReadBaud
 15151  102C  0828               	movf	??i1_ReadBaud,w
 15152  102D  00F7               	movwf	i1ReadFlash_4Byte@column
 15153  102E  319D  2581  3190   	fcall	i1_ReadFlash_4Byte
 15154  1031  0878               	movf	?i1_ReadFlash_4Byte+3,w
 15155  1032  0020               	movlb	0	; select bank0
 15156  1033  00B3               	movwf	i1ReadBaud@temp+3
 15157  1034  0877               	movf	?i1_ReadFlash_4Byte+2,w
 15158  1035  00B2               	movwf	i1ReadBaud@temp+2
 15159  1036  0876               	movf	?i1_ReadFlash_4Byte+1,w
 15160  1037  00B1               	movwf	i1ReadBaud@temp+1
 15161  1038  0875               	movf	?i1_ReadFlash_4Byte,w
 15162  1039  00B0               	movwf	i1ReadBaud@temp
 15163                           
 15164                           ;FLASH.c: 191: MEM[1] = (unsigned int)(temp & 0x0003FFF);
 15165  103A  30FF               	movlw	255
 15166  103B  0530               	andwf	i1ReadBaud@temp,w
 15167  103C  0021               	movlb	1	; select bank1
 15168  103D  00E7               	movwf	(_MEM^(0+128)+2)
 15169  103E  303F               	movlw	63
 15170  103F  0020               	movlb	0	; select bank0
 15171  1040  0531               	andwf	i1ReadBaud@temp+1,w
 15172  1041  0021               	movlb	1	; select bank1
 15173  1042  00E8               	movwf	((_MEM+1)^(0+128)+2)
 15174                           
 15175                           ;FLASH.c: 192: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
 15176  1043  0020               	movlb	0	; select bank0
 15177  1044  0830               	movf	i1ReadBaud@temp,w
 15178  1045  00A8               	movwf	??i1_ReadBaud
 15179  1046  0831               	movf	i1ReadBaud@temp+1,w
 15180  1047  00A9               	movwf	??i1_ReadBaud+1
 15181  1048  0832               	movf	i1ReadBaud@temp+2,w
 15182  1049  00AA               	movwf	??i1_ReadBaud+2
 15183  104A  0833               	movf	i1ReadBaud@temp+3,w
 15184  104B  00AB               	movwf	??i1_ReadBaud+3
 15185  104C  300E               	movlw	14
 15186  104D                     u520_25:	
 15187  104D  36AB               	lsrf	??i1_ReadBaud+3,f
 15188  104E  0CAA               	rrf	??i1_ReadBaud+2,f
 15189  104F  0CA9               	rrf	??i1_ReadBaud+1,f
 15190  1050  0CA8               	rrf	??i1_ReadBaud,f
 15191  1051  0B89               	decfsz	9,f
 15192  1052  284D               	goto	u520_25
 15193  1053  30FF               	movlw	255
 15194  1054  0528               	andwf	??i1_ReadBaud,w
 15195  1055  0021               	movlb	1	; select bank1
 15196  1056  00E5               	movwf	_MEM^(0+128)
 15197  1057  303F               	movlw	63
 15198  1058  0020               	movlb	0	; select bank0
 15199  1059  0529               	andwf	??i1_ReadBaud+1,w
 15200  105A  0021               	movlb	1	; select bank1
 15201  105B  00E6               	movwf	(_MEM+1)^(0+128)
 15202                           
 15203                           ;FLASH.c: 193: return (((unsigned long)MEM[0] << 12) + (unsigned long)MEM[1]);
 15204  105C  0867               	movf	(_MEM^(0+128)+2),w
 15205  105D  0020               	movlb	0	; select bank0
 15206  105E  00A8               	movwf	??i1_ReadBaud
 15207  105F  0021               	movlb	1	; select bank1
 15208  1060  0868               	movf	((_MEM+1)^(0+128)+2),w
 15209  1061  0020               	movlb	0	; select bank0
 15210  1062  00A9               	movwf	??i1_ReadBaud+1
 15211  1063  01AA               	clrf	??i1_ReadBaud+2
 15212  1064  01AB               	clrf	??i1_ReadBaud+3
 15213  1065  0021               	movlb	1	; select bank1
 15214  1066  0865               	movf	_MEM^(0+128),w
 15215  1067  0020               	movlb	0	; select bank0
 15216  1068  00AC               	movwf	??i1_ReadBaud+4
 15217  1069  0021               	movlb	1	; select bank1
 15218  106A  0866               	movf	(_MEM+1)^(0+128),w
 15219  106B  0020               	movlb	0	; select bank0
 15220  106C  00AD               	movwf	??i1_ReadBaud+5
 15221  106D  01AE               	clrf	??i1_ReadBaud+6
 15222  106E  01AF               	clrf	??i1_ReadBaud+7
 15223  106F  300C               	movlw	12
 15224  1070                     u521_25:	
 15225  1070  35AC               	lslf	??i1_ReadBaud+4,f
 15226  1071  0DAD               	rlf	??i1_ReadBaud+5,f
 15227  1072  0DAE               	rlf	??i1_ReadBaud+6,f
 15228  1073  0DAF               	rlf	??i1_ReadBaud+7,f
 15229  1074  0B89               	decfsz	9,f
 15230  1075  2870               	goto	u521_25
 15231  1076  082C               	movf	??i1_ReadBaud+4,w
 15232  1077  07A8               	addwf	??i1_ReadBaud,f
 15233  1078  082D               	movf	??i1_ReadBaud+5,w
 15234  1079  3DA9               	addwfc	??i1_ReadBaud+1,f
 15235  107A  082E               	movf	??i1_ReadBaud+6,w
 15236  107B  3DAA               	addwfc	??i1_ReadBaud+2,f
 15237  107C  082F               	movf	??i1_ReadBaud+7,w
 15238  107D  3DAB               	addwfc	??i1_ReadBaud+3,f
 15239  107E  082B               	movf	??i1_ReadBaud+3,w
 15240  107F  00A7               	movwf	?i1_ReadBaud+3
 15241  1080  082A               	movf	??i1_ReadBaud+2,w
 15242  1081  00A6               	movwf	?i1_ReadBaud+2
 15243  1082  0829               	movf	??i1_ReadBaud+1,w
 15244  1083  00A5               	movwf	?i1_ReadBaud+1
 15245  1084  0828               	movf	??i1_ReadBaud,w
 15246  1085  00A4               	movwf	?i1_ReadBaud
 15247  1086  0008               	return
 15248  1087                     __end_ofi1_ReadBaud:	
 15249                           
 15250                           	psect	text55
 15251  1D81                     __ptext55:	
 15252 ;; *************** function i1_ReadFlash_4Byte *****************
 15253 ;; Defined at:
 15254 ;;		line 62 in file "FLASH.c"
 15255 ;; Parameters:    Size  Location     Type
 15256 ;;  row             2    5[COMMON] unsigned int 
 15257 ;;  column          1    7[COMMON] unsigned char 
 15258 ;; Auto vars:     Size  Location     Type
 15259 ;;  ReadFlash_4B    4    0[BANK0 ] unsigned long 
 15260 ;; Return value:  Size  Location     Type
 15261 ;;                  4    5[COMMON] unsigned long 
 15262 ;; Registers used:
 15263 ;;		wreg, status,2, status,0, pclath, cstack
 15264 ;; Tracked objects:
 15265 ;;		On entry : 0/0
 15266 ;;		On exit  : 0/0
 15267 ;;		Unchanged: 0/0
 15268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15269 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15270 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15271 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15272 ;;      Totals:         9       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15273 ;;Total ram usage:       13 bytes
 15274 ;; Hardware stack levels used:    1
 15275 ;; Hardware stack levels required when called:    1
 15276 ;; This function calls:
 15277 ;;		i1_ReadFlash_2Byte
 15278 ;; This function is called by:
 15279 ;;		i1_ReadBaud
 15280 ;; This function uses a non-reentrant model
 15281 ;;
 15282                           
 15283                           
 15284                           ;psect for function i1_ReadFlash_4Byte
 15285  1D81                     i1_ReadFlash_4Byte:	
 15286                           
 15287                           ;FLASH.c: 64: unsigned long temp =0;
 15288                           
 15289                           ;incstack = 0
 15290                           ; Regs used in i1_ReadFlash_4Byte: [wreg+status,2+status,0+pclath+cstack]
 15291  1D81  3000               	movlw	0
 15292  1D82  0020               	movlb	0	; select bank0
 15293  1D83  00A3               	movwf	i1ReadFlash_4Byte@temp+3
 15294  1D84  3000               	movlw	0
 15295  1D85  00A2               	movwf	i1ReadFlash_4Byte@temp+2
 15296  1D86  3000               	movlw	0
 15297  1D87  00A1               	movwf	i1ReadFlash_4Byte@temp+1
 15298  1D88  3000               	movlw	0
 15299  1D89  00A0               	movwf	i1ReadFlash_4Byte@temp
 15300                           
 15301                           ;FLASH.c: 65: temp = ((unsigned long)ReadFlash_2Byte(row, column) << 16);
 15302  1D8A  0876               	movf	i1ReadFlash_4Byte@row+1,w
 15303  1D8B  00F1               	movwf	i1ReadFlash_2Byte@row+1
 15304  1D8C  0875               	movf	i1ReadFlash_4Byte@row,w
 15305  1D8D  00F0               	movwf	i1ReadFlash_2Byte@row
 15306  1D8E  0877               	movf	i1ReadFlash_4Byte@column,w
 15307  1D8F  00F9               	movwf	??i1_ReadFlash_4Byte
 15308  1D90  0879               	movf	??i1_ReadFlash_4Byte,w
 15309  1D91  00F2               	movwf	i1ReadFlash_2Byte@column
 15310  1D92  319A  2214  319D   	fcall	i1_ReadFlash_2Byte
 15311  1D95  0870               	movf	?i1_ReadFlash_2Byte,w
 15312  1D96  00FA               	movwf	??i1_ReadFlash_4Byte+1
 15313  1D97  0871               	movf	?i1_ReadFlash_2Byte+1,w
 15314  1D98  00FB               	movwf	??i1_ReadFlash_4Byte+2
 15315  1D99  01FC               	clrf	??i1_ReadFlash_4Byte+3
 15316  1D9A  01FD               	clrf	??i1_ReadFlash_4Byte+4
 15317  1D9B  3010               	movlw	16
 15318  1D9C                     u439_25:	
 15319  1D9C  35FA               	lslf	??i1_ReadFlash_4Byte+1,f
 15320  1D9D  0DFB               	rlf	??i1_ReadFlash_4Byte+2,f
 15321  1D9E  0DFC               	rlf	??i1_ReadFlash_4Byte+3,f
 15322  1D9F  0DFD               	rlf	??i1_ReadFlash_4Byte+4,f
 15323  1DA0  0B89               	decfsz	9,f
 15324  1DA1  2D9C               	goto	u439_25
 15325  1DA2  087D               	movf	??i1_ReadFlash_4Byte+4,w
 15326  1DA3  0020               	movlb	0	; select bank0
 15327  1DA4  00A3               	movwf	i1ReadFlash_4Byte@temp+3
 15328  1DA5  087C               	movf	??i1_ReadFlash_4Byte+3,w
 15329  1DA6  00A2               	movwf	i1ReadFlash_4Byte@temp+2
 15330  1DA7  087B               	movf	??i1_ReadFlash_4Byte+2,w
 15331  1DA8  00A1               	movwf	i1ReadFlash_4Byte@temp+1
 15332  1DA9  087A               	movf	??i1_ReadFlash_4Byte+1,w
 15333  1DAA  00A0               	movwf	i1ReadFlash_4Byte@temp
 15334                           
 15335                           ;FLASH.c: 66: temp |= ((unsigned long)ReadFlash_2Byte(row, (column + 1)));
 15336  1DAB  0876               	movf	i1ReadFlash_4Byte@row+1,w
 15337  1DAC  00F1               	movwf	i1ReadFlash_2Byte@row+1
 15338  1DAD  0875               	movf	i1ReadFlash_4Byte@row,w
 15339  1DAE  00F0               	movwf	i1ReadFlash_2Byte@row
 15340  1DAF  0877               	movf	i1ReadFlash_4Byte@column,w
 15341  1DB0  3E01               	addlw	1
 15342  1DB1  00F9               	movwf	??i1_ReadFlash_4Byte
 15343  1DB2  0879               	movf	??i1_ReadFlash_4Byte,w
 15344  1DB3  00F2               	movwf	i1ReadFlash_2Byte@column
 15345  1DB4  319A  2214         	fcall	i1_ReadFlash_2Byte
 15346  1DB6  0870               	movf	?i1_ReadFlash_2Byte,w
 15347  1DB7  00FA               	movwf	??i1_ReadFlash_4Byte+1
 15348  1DB8  0871               	movf	?i1_ReadFlash_2Byte+1,w
 15349  1DB9  00FB               	movwf	??i1_ReadFlash_4Byte+2
 15350  1DBA  01FC               	clrf	??i1_ReadFlash_4Byte+3
 15351  1DBB  01FD               	clrf	??i1_ReadFlash_4Byte+4
 15352  1DBC  087A               	movf	??i1_ReadFlash_4Byte+1,w
 15353  1DBD  0020               	movlb	0	; select bank0
 15354  1DBE  04A0               	iorwf	i1ReadFlash_4Byte@temp,f
 15355  1DBF  087B               	movf	??i1_ReadFlash_4Byte+2,w
 15356  1DC0  04A1               	iorwf	i1ReadFlash_4Byte@temp+1,f
 15357  1DC1  087C               	movf	??i1_ReadFlash_4Byte+3,w
 15358  1DC2  04A2               	iorwf	i1ReadFlash_4Byte@temp+2,f
 15359  1DC3  087D               	movf	??i1_ReadFlash_4Byte+4,w
 15360  1DC4  04A3               	iorwf	i1ReadFlash_4Byte@temp+3,f
 15361                           
 15362                           ;FLASH.c: 67: return temp;
 15363  1DC5  0823               	movf	i1ReadFlash_4Byte@temp+3,w
 15364  1DC6  00F8               	movwf	?i1_ReadFlash_4Byte+3
 15365  1DC7  0822               	movf	i1ReadFlash_4Byte@temp+2,w
 15366  1DC8  00F7               	movwf	?i1_ReadFlash_4Byte+2
 15367  1DC9  0821               	movf	i1ReadFlash_4Byte@temp+1,w
 15368  1DCA  00F6               	movwf	?i1_ReadFlash_4Byte+1
 15369  1DCB  0820               	movf	i1ReadFlash_4Byte@temp,w
 15370  1DCC  00F5               	movwf	?i1_ReadFlash_4Byte
 15371  1DCD  0008               	return
 15372  1DCE                     __end_ofi1_ReadFlash_4Byte:	
 15373                           
 15374                           	psect	text56
 15375  1526                     __ptext56:	
 15376 ;; *************** function i1_InitUART *****************
 15377 ;; Defined at:
 15378 ;;		line 78 in file "UART.c"
 15379 ;; Parameters:    Size  Location     Type
 15380 ;;  Baud            4    0[BANK0 ] unsigned long 
 15381 ;;  parity          1    4[BANK0 ] unsigned char 
 15382 ;; Auto vars:     Size  Location     Type
 15383 ;;  InitUART        4   17[BANK0 ] unsigned long 
 15384 ;;  InitUART        2   13[BANK0 ] unsigned int 
 15385 ;;  InitUART        1   16[BANK0 ] unsigned char 
 15386 ;;  InitUART        1   15[BANK0 ] unsigned char 
 15387 ;; Return value:  Size  Location     Type
 15388 ;;		None               void
 15389 ;; Registers used:
 15390 ;;		wreg, status,2, status,0, pclath, cstack
 15391 ;; Tracked objects:
 15392 ;;		On entry : 0/0
 15393 ;;		On exit  : 0/0
 15394 ;;		Unchanged: 0/0
 15395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15396 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15397 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15398 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15399 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15400 ;;Total ram usage:       21 bytes
 15401 ;; Hardware stack levels used:    1
 15402 ;; Hardware stack levels required when called:    1
 15403 ;; This function calls:
 15404 ;;		i1_CloseUSART
 15405 ;;		i1_OpenUSART
 15406 ;;		i1_ReadUSART
 15407 ;;		i1___lldiv
 15408 ;;		i1_baudUSART
 15409 ;; This function is called by:
 15410 ;;		_SetBaud
 15411 ;; This function uses a non-reentrant model
 15412 ;;
 15413                           
 15414                           
 15415                           ;psect for function i1_InitUART
 15416  1526                     i1_InitUART:	
 15417                           
 15418                           ;UART.c: 80: unsigned long temp;
 15419                           ;UART.c: 81: unsigned char config;
 15420                           ;UART.c: 82: unsigned int spbrg;
 15421                           ;UART.c: 83: unsigned char baudconfig;
 15422                           ;UART.c: 92: PIE1bits.RCIE = 0;
 15423                           
 15424                           ;incstack = 0
 15425                           ; Regs used in i1_InitUART: [wreg+status,2+status,0+pclath+cstack]
 15426  1526  0021               	movlb	1	; select bank1
 15427  1527  1291               	bcf	17,5	;volatile
 15428                           
 15429                           ;UART.c: 93: LATC |= 0b00000100;
 15430  1528  0022               	movlb	2	; select bank2
 15431  1529  150E               	bsf	14,2	;volatile
 15432                           
 15433                           ;UART.c: 94: PPSLOCK =0;
 15434  152A  003C               	movlb	28	; select bank28
 15435  152B  018F               	clrf	15	;volatile
 15436                           
 15437                           ;UART.c: 95: RC2PPS = 0b00000000;
 15438  152C  003D               	movlb	29	; select bank29
 15439  152D  01A2               	clrf	34	;volatile
 15440                           
 15441                           ;UART.c: 96: PPSLOCK =1;
 15442  152E  3001               	movlw	1
 15443  152F  003C               	movlb	28	; select bank28
 15444  1530  008F               	movwf	15	;volatile
 15445                           
 15446                           ;UART.c: 98: CloseUSART();
 15447  1531  3198  20FC  3195   	fcall	i1_CloseUSART
 15448                           
 15449                           ;UART.c: 99: config =0;
 15450  1534  0020               	movlb	0	; select bank0
 15451  1535  01B0               	clrf	i1InitUART@config
 15452                           
 15453                           ;UART.c: 100: baudconfig =0;
 15454  1536  01AF               	clrf	i1InitUART@baudconfig
 15455                           
 15456                           ;UART.c: 105: config |= 0b00001000;
 15457  1537  15B0               	bsf	i1InitUART@config,3
 15458                           
 15459                           ;UART.c: 106: config |= 0b00010000;
 15460  1538  1630               	bsf	i1InitUART@config,4
 15461                           
 15462                           ;UART.c: 107: PARITY = parity;
 15463  1539  0824               	movf	i1InitUART@parity,w
 15464  153A  00A5               	movwf	??i1_InitUART
 15465  153B  0825               	movf	??i1_InitUART,w
 15466  153C  0024               	movlb	4	; select bank4
 15467  153D  00E0               	movwf	_PARITY^(0+512)
 15468                           
 15469                           ;UART.c: 108: BAUD = Baud;
 15470  153E  0020               	movlb	0	; select bank0
 15471  153F  0823               	movf	i1InitUART@Baud+3,w
 15472  1540  0024               	movlb	4	; select bank4
 15473  1541  00E4               	movwf	(_BAUD+3)^(0+512)
 15474  1542  0020               	movlb	0	; select bank0
 15475  1543  0822               	movf	i1InitUART@Baud+2,w
 15476  1544  0024               	movlb	4	; select bank4
 15477  1545  00E3               	movwf	(_BAUD+2)^(0+512)
 15478  1546  0020               	movlb	0	; select bank0
 15479  1547  0821               	movf	i1InitUART@Baud+1,w
 15480  1548  0024               	movlb	4	; select bank4
 15481  1549  00E2               	movwf	(_BAUD+1)^(0+512)
 15482  154A  0020               	movlb	0	; select bank0
 15483  154B  0820               	movf	i1InitUART@Baud,w
 15484  154C  0024               	movlb	4	; select bank4
 15485  154D  00E1               	movwf	_BAUD^(0+512)
 15486                           
 15487                           ;UART.c: 109: if(parity)
 15488  154E  0020               	movlb	0	; select bank0
 15489  154F  0824               	movf	i1InitUART@parity,w
 15490  1550  1903               	btfsc	3,2
 15491  1551  2D54               	goto	i1l4564
 15492                           
 15493                           ;UART.c: 110: {
 15494                           ;UART.c: 111: config |= 0b00000010;
 15495  1552  14B0               	bsf	i1InitUART@config,1
 15496                           
 15497                           ;UART.c: 112: }
 15498  1553  2D58               	goto	i1l4566
 15499  1554                     i1l4564:	
 15500                           
 15501                           ;UART.c: 113: else
 15502                           ;UART.c: 114: {
 15503                           ;UART.c: 115: config &= ~0b00000010;
 15504  1554  30FD               	movlw	253
 15505  1555  00A5               	movwf	??i1_InitUART
 15506  1556  0825               	movf	??i1_InitUART,w
 15507  1557  05B0               	andwf	i1InitUART@config,f
 15508  1558                     i1l4566:	
 15509                           
 15510                           ;UART.c: 116: }
 15511                           ;UART.c: 117: baudconfig |= 0b00001000;
 15512  1558  15AF               	bsf	i1InitUART@baudconfig,3
 15513                           
 15514                           ;UART.c: 120: temp = (32000000L / Baud) - 1;
 15515  1559  0823               	movf	i1InitUART@Baud+3,w
 15516  155A  00F3               	movwf	i1___lldiv@divisor+3
 15517  155B  0822               	movf	i1InitUART@Baud+2,w
 15518  155C  00F2               	movwf	i1___lldiv@divisor+2
 15519  155D  0821               	movf	i1InitUART@Baud+1,w
 15520  155E  00F1               	movwf	i1___lldiv@divisor+1
 15521  155F  0820               	movf	i1InitUART@Baud,w
 15522  1560  00F0               	movwf	i1___lldiv@divisor
 15523  1561  3001               	movlw	1
 15524  1562  00F7               	movwf	i1___lldiv@dividend+3
 15525  1563  30E8               	movlw	232
 15526  1564  00F6               	movwf	i1___lldiv@dividend+2
 15527  1565  3048               	movlw	72
 15528  1566  00F5               	movwf	i1___lldiv@dividend+1
 15529  1567  3000               	movlw	0
 15530  1568  00F4               	movwf	i1___lldiv@dividend
 15531  1569  319F  2707  3195   	fcall	i1___lldiv
 15532  156C  30FF               	movlw	255
 15533  156D  0770               	addwf	?i1___lldiv,w
 15534  156E  0020               	movlb	0	; select bank0
 15535  156F  00B1               	movwf	i1InitUART@temp
 15536  1570  30FF               	movlw	255
 15537  1571  3D71               	addwfc	?i1___lldiv+1,w
 15538  1572  00B2               	movwf	i1InitUART@temp+1
 15539  1573  30FF               	movlw	255
 15540  1574  3D72               	addwfc	?i1___lldiv+2,w
 15541  1575  00B3               	movwf	i1InitUART@temp+2
 15542  1576  30FF               	movlw	255
 15543  1577  3D73               	addwfc	?i1___lldiv+3,w
 15544  1578  00B4               	movwf	i1InitUART@temp+3
 15545                           
 15546                           ;UART.c: 121: temp = (temp >> 2) - 1;
 15547  1579  30FF               	movlw	255
 15548  157A  00A5               	movwf	??i1_InitUART
 15549  157B  30FF               	movlw	255
 15550  157C  00A6               	movwf	??i1_InitUART+1
 15551  157D  30FF               	movlw	255
 15552  157E  00A7               	movwf	??i1_InitUART+2
 15553  157F  30FF               	movlw	255
 15554  1580  00A8               	movwf	??i1_InitUART+3
 15555  1581  0831               	movf	i1InitUART@temp,w
 15556  1582  00A9               	movwf	??i1_InitUART+4
 15557  1583  0832               	movf	i1InitUART@temp+1,w
 15558  1584  00AA               	movwf	??i1_InitUART+5
 15559  1585  0833               	movf	i1InitUART@temp+2,w
 15560  1586  00AB               	movwf	??i1_InitUART+6
 15561  1587  0834               	movf	i1InitUART@temp+3,w
 15562  1588  00AC               	movwf	??i1_InitUART+7
 15563  1589  3002               	movlw	2
 15564  158A                     u511_25:	
 15565  158A  36AC               	lsrf	??i1_InitUART+7,f
 15566  158B  0CAB               	rrf	??i1_InitUART+6,f
 15567  158C  0CAA               	rrf	??i1_InitUART+5,f
 15568  158D  0CA9               	rrf	??i1_InitUART+4,f
 15569  158E  0B89               	decfsz	9,f
 15570  158F  2D8A               	goto	u511_25
 15571  1590  0829               	movf	??i1_InitUART+4,w
 15572  1591  07A5               	addwf	??i1_InitUART,f
 15573  1592  082A               	movf	??i1_InitUART+5,w
 15574  1593  3DA6               	addwfc	??i1_InitUART+1,f
 15575  1594  082B               	movf	??i1_InitUART+6,w
 15576  1595  3DA7               	addwfc	??i1_InitUART+2,f
 15577  1596  082C               	movf	??i1_InitUART+7,w
 15578  1597  3DA8               	addwfc	??i1_InitUART+3,f
 15579  1598  0828               	movf	??i1_InitUART+3,w
 15580  1599  00B4               	movwf	i1InitUART@temp+3
 15581  159A  0827               	movf	??i1_InitUART+2,w
 15582  159B  00B3               	movwf	i1InitUART@temp+2
 15583  159C  0826               	movf	??i1_InitUART+1,w
 15584  159D  00B2               	movwf	i1InitUART@temp+1
 15585  159E  0825               	movf	??i1_InitUART,w
 15586  159F  00B1               	movwf	i1InitUART@temp
 15587                           
 15588                           ;UART.c: 122: spbrg = (unsigned int)temp;
 15589  15A0  0832               	movf	i1InitUART@temp+1,w
 15590  15A1  00AE               	movwf	i1InitUART@spbrg+1
 15591  15A2  0831               	movf	i1InitUART@temp,w
 15592  15A3  00AD               	movwf	i1InitUART@spbrg
 15593                           
 15594                           ;UART.c: 124: RCSTAbits.CREN = 0;
 15595  15A4  0023               	movlb	3	; select bank3
 15596  15A5  121D               	bcf	29,4	;volatile
 15597                           
 15598                           ;UART.c: 125: OpenUSART(config, spbrg);
 15599  15A6  0020               	movlb	0	; select bank0
 15600  15A7  082E               	movf	i1InitUART@spbrg+1,w
 15601  15A8  00F1               	movwf	i1OpenUSART@spbrg+1
 15602  15A9  082D               	movf	i1InitUART@spbrg,w
 15603  15AA  00F0               	movwf	i1OpenUSART@spbrg
 15604  15AB  0830               	movf	i1InitUART@config,w
 15605  15AC  319A  2292  3195   	fcall	i1_OpenUSART
 15606                           
 15607                           ;UART.c: 126: baudUSART(baudconfig);
 15608  15AF  0020               	movlb	0	; select bank0
 15609  15B0  082F               	movf	i1InitUART@baudconfig,w
 15610  15B1  3198  207F  3195   	fcall	i1_baudUSART
 15611                           
 15612                           ;UART.c: 127: temp = ReadUSART();
 15613  15B4  3198  20A0  3195   	fcall	i1_ReadUSART
 15614  15B7  0020               	movlb	0	; select bank0
 15615  15B8  00A5               	movwf	??i1_InitUART
 15616  15B9  01A6               	clrf	??i1_InitUART+1
 15617  15BA  01A7               	clrf	??i1_InitUART+2
 15618  15BB  01A8               	clrf	??i1_InitUART+3
 15619  15BC  0828               	movf	??i1_InitUART+3,w
 15620  15BD  00B4               	movwf	i1InitUART@temp+3
 15621  15BE  0827               	movf	??i1_InitUART+2,w
 15622  15BF  00B3               	movwf	i1InitUART@temp+2
 15623  15C0  0826               	movf	??i1_InitUART+1,w
 15624  15C1  00B2               	movwf	i1InitUART@temp+1
 15625  15C2  0825               	movf	??i1_InitUART,w
 15626  15C3  00B1               	movwf	i1InitUART@temp
 15627                           
 15628                           ;UART.c: 128: temp = ReadUSART();
 15629  15C4  3198  20A0  3195   	fcall	i1_ReadUSART
 15630  15C7  0020               	movlb	0	; select bank0
 15631  15C8  00A5               	movwf	??i1_InitUART
 15632  15C9  01A6               	clrf	??i1_InitUART+1
 15633  15CA  01A7               	clrf	??i1_InitUART+2
 15634  15CB  01A8               	clrf	??i1_InitUART+3
 15635  15CC  0828               	movf	??i1_InitUART+3,w
 15636  15CD  00B4               	movwf	i1InitUART@temp+3
 15637  15CE  0827               	movf	??i1_InitUART+2,w
 15638  15CF  00B3               	movwf	i1InitUART@temp+2
 15639  15D0  0826               	movf	??i1_InitUART+1,w
 15640  15D1  00B2               	movwf	i1InitUART@temp+1
 15641  15D2  0825               	movf	??i1_InitUART,w
 15642  15D3  00B1               	movwf	i1InitUART@temp
 15643                           
 15644                           ;UART.c: 129: temp = ReadUSART();
 15645  15D4  3198  20A0  3195   	fcall	i1_ReadUSART
 15646  15D7  0020               	movlb	0	; select bank0
 15647  15D8  00A5               	movwf	??i1_InitUART
 15648  15D9  01A6               	clrf	??i1_InitUART+1
 15649  15DA  01A7               	clrf	??i1_InitUART+2
 15650  15DB  01A8               	clrf	??i1_InitUART+3
 15651  15DC  0828               	movf	??i1_InitUART+3,w
 15652  15DD  00B4               	movwf	i1InitUART@temp+3
 15653  15DE  0827               	movf	??i1_InitUART+2,w
 15654  15DF  00B3               	movwf	i1InitUART@temp+2
 15655  15E0  0826               	movf	??i1_InitUART+1,w
 15656  15E1  00B2               	movwf	i1InitUART@temp+1
 15657  15E2  0825               	movf	??i1_InitUART,w
 15658  15E3  00B1               	movwf	i1InitUART@temp
 15659                           
 15660                           ;UART.c: 130: temp = ReadUSART();
 15661  15E4  3198  20A0  3195   	fcall	i1_ReadUSART
 15662  15E7  0020               	movlb	0	; select bank0
 15663  15E8  00A5               	movwf	??i1_InitUART
 15664  15E9  01A6               	clrf	??i1_InitUART+1
 15665  15EA  01A7               	clrf	??i1_InitUART+2
 15666  15EB  01A8               	clrf	??i1_InitUART+3
 15667  15EC  0828               	movf	??i1_InitUART+3,w
 15668  15ED  00B4               	movwf	i1InitUART@temp+3
 15669  15EE  0827               	movf	??i1_InitUART+2,w
 15670  15EF  00B3               	movwf	i1InitUART@temp+2
 15671  15F0  0826               	movf	??i1_InitUART+1,w
 15672  15F1  00B2               	movwf	i1InitUART@temp+1
 15673  15F2  0825               	movf	??i1_InitUART,w
 15674  15F3  00B1               	movwf	i1InitUART@temp
 15675                           
 15676                           ;UART.c: 131: temp = ReadUSART();
 15677  15F4  3198  20A0         	fcall	i1_ReadUSART
 15678  15F6  0020               	movlb	0	; select bank0
 15679  15F7  00A5               	movwf	??i1_InitUART
 15680  15F8  01A6               	clrf	??i1_InitUART+1
 15681  15F9  01A7               	clrf	??i1_InitUART+2
 15682  15FA  01A8               	clrf	??i1_InitUART+3
 15683  15FB  0828               	movf	??i1_InitUART+3,w
 15684  15FC  00B4               	movwf	i1InitUART@temp+3
 15685  15FD  0827               	movf	??i1_InitUART+2,w
 15686  15FE  00B3               	movwf	i1InitUART@temp+2
 15687  15FF  0826               	movf	??i1_InitUART+1,w
 15688  1600  00B2               	movwf	i1InitUART@temp+1
 15689  1601  0825               	movf	??i1_InitUART,w
 15690  1602  00B1               	movwf	i1InitUART@temp
 15691                           
 15692                           ;UART.c: 133: PPSLOCK =0;
 15693  1603  003C               	movlb	28	; select bank28
 15694  1604  018F               	clrf	15	;volatile
 15695                           
 15696                           ;UART.c: 134: RC2PPS = 0b00010100;
 15697  1605  3014               	movlw	20
 15698  1606  003D               	movlb	29	; select bank29
 15699  1607  00A2               	movwf	34	;volatile
 15700                           
 15701                           ;UART.c: 135: CKPPS = 0b00010010;
 15702  1608  3012               	movlw	18
 15703  1609  003C               	movlb	28	; select bank28
 15704  160A  00A5               	movwf	37	;volatile
 15705                           
 15706                           ;UART.c: 137: RXPPS = 0b00010101;
 15707  160B  3015               	movlw	21
 15708  160C  00A4               	movwf	36	;volatile
 15709                           
 15710                           ;UART.c: 139: PPSLOCK =1;
 15711  160D  3001               	movlw	1
 15712  160E  008F               	movwf	15	;volatile
 15713                           
 15714                           ;UART.c: 141: PIR1bits.RCIF = 0;
 15715  160F  0020               	movlb	0	; select bank0
 15716  1610  1291               	bcf	17,5	;volatile
 15717                           
 15718                           ;UART.c: 142: PIE1bits.RCIE = 1;
 15719  1611  0021               	movlb	1	; select bank1
 15720  1612  1691               	bsf	17,5	;volatile
 15721                           
 15722                           ;UART.c: 143: INTCONbits.PEIE = 1;
 15723  1613  170B               	bsf	11,6	;volatile
 15724  1614  0008               	return
 15725  1615                     __end_ofi1_InitUART:	
 15726                           
 15727                           	psect	text57
 15728  187F                     __ptext57:	
 15729 ;; *************** function i1_baudUSART *****************
 15730 ;; Defined at:
 15731 ;;		line 151 in file "UART.c"
 15732 ;; Parameters:    Size  Location     Type
 15733 ;;  baudconfig      1    wreg     unsigned char 
 15734 ;; Auto vars:     Size  Location     Type
 15735 ;;  baudconfig      1    0[COMMON] unsigned char 
 15736 ;; Return value:  Size  Location     Type
 15737 ;;		None               void
 15738 ;; Registers used:
 15739 ;;		wreg, status,2
 15740 ;; Tracked objects:
 15741 ;;		On entry : 0/0
 15742 ;;		On exit  : 0/0
 15743 ;;		Unchanged: 0/0
 15744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15746 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15748 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15749 ;;Total ram usage:        1 bytes
 15750 ;; Hardware stack levels used:    1
 15751 ;; This function calls:
 15752 ;;		Nothing
 15753 ;; This function is called by:
 15754 ;;		i1_InitUART
 15755 ;; This function uses a non-reentrant model
 15756 ;;
 15757                           
 15758                           
 15759                           ;psect for function i1_baudUSART
 15760  187F                     i1_baudUSART:	
 15761                           
 15762                           ;incstack = 0
 15763                           ; Regs used in i1_baudUSART: [wreg+status,2]
 15764                           ;i1baudUSART@baudconfig stored from wreg
 15765  187F  00F0               	movwf	i1baudUSART@baudconfig
 15766                           
 15767                           ;UART.c: 153: BAUD1CON =0;
 15768  1880  0023               	movlb	3	; select bank3
 15769  1881  019F               	clrf	31	;volatile
 15770                           
 15771                           ;UART.c: 154: BAUD1CON = baudconfig;
 15772  1882  0870               	movf	i1baudUSART@baudconfig,w
 15773  1883  009F               	movwf	31	;volatile
 15774  1884  0008               	return
 15775  1885                     __end_ofi1_baudUSART:	
 15776                           
 15777                           	psect	text58
 15778  18A0                     __ptext58:	
 15779 ;; *************** function i1_ReadUSART *****************
 15780 ;; Defined at:
 15781 ;;		line 307 in file "UART.c"
 15782 ;; Parameters:    Size  Location     Type
 15783 ;;		None
 15784 ;; Auto vars:     Size  Location     Type
 15785 ;;  ReadUSART       1    1[COMMON] unsigned char 
 15786 ;; Return value:  Size  Location     Type
 15787 ;;                  1    wreg      unsigned char 
 15788 ;; Registers used:
 15789 ;;		wreg
 15790 ;; Tracked objects:
 15791 ;;		On entry : 0/0
 15792 ;;		On exit  : 0/0
 15793 ;;		Unchanged: 0/0
 15794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15796 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15797 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15798 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15799 ;;Total ram usage:        2 bytes
 15800 ;; Hardware stack levels used:    1
 15801 ;; This function calls:
 15802 ;;		Nothing
 15803 ;; This function is called by:
 15804 ;;		_isr
 15805 ;;		i1_InitUART
 15806 ;; This function uses a non-reentrant model
 15807 ;;
 15808                           
 15809                           
 15810                           ;psect for function i1_ReadUSART
 15811  18A0                     i1_ReadUSART:	
 15812                           
 15813                           ;UART.c: 309: char data;
 15814                           ;UART.c: 311: if(RCSTAbits.OERR)
 15815                           
 15816                           ;incstack = 0
 15817                           ; Regs used in i1_ReadUSART: [wreg]
 15818  18A0  0023               	movlb	3	; select bank3
 15819  18A1  189D               	btfsc	29,1	;volatile
 15820                           
 15821                           ;UART.c: 312: {
 15822                           ;UART.c: 313: RCSTAbits.CREN = 0;
 15823  18A2  121D               	bcf	29,4	;volatile
 15824                           
 15825                           ;UART.c: 314: }
 15826                           ;UART.c: 316: data = RCREG;
 15827  18A3  0819               	movf	25,w	;volatile
 15828  18A4  00F0               	movwf	??i1_ReadUSART
 15829  18A5  0870               	movf	??i1_ReadUSART,w
 15830  18A6  00F1               	movwf	i1ReadUSART@data
 15831                           
 15832                           ;UART.c: 318: return (data);
 15833  18A7  0871               	movf	i1ReadUSART@data,w
 15834  18A8  0008               	return
 15835  18A9                     __end_ofi1_ReadUSART:	
 15836                           
 15837                           	psect	text59
 15838  1A92                     __ptext59:	
 15839 ;; *************** function i1_OpenUSART *****************
 15840 ;; Defined at:
 15841 ;;		line 162 in file "UART.c"
 15842 ;; Parameters:    Size  Location     Type
 15843 ;;  config          1    wreg     unsigned char 
 15844 ;;  spbrg           2    0[COMMON] unsigned int 
 15845 ;; Auto vars:     Size  Location     Type
 15846 ;;  config          1    2[COMMON] unsigned char 
 15847 ;; Return value:  Size  Location     Type
 15848 ;;		None               void
 15849 ;; Registers used:
 15850 ;;		wreg, status,2
 15851 ;; Tracked objects:
 15852 ;;		On entry : 0/0
 15853 ;;		On exit  : 0/0
 15854 ;;		Unchanged: 0/0
 15855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15856 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15857 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15859 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15860 ;;Total ram usage:        3 bytes
 15861 ;; Hardware stack levels used:    1
 15862 ;; This function calls:
 15863 ;;		Nothing
 15864 ;; This function is called by:
 15865 ;;		i1_InitUART
 15866 ;; This function uses a non-reentrant model
 15867 ;;
 15868                           
 15869                           
 15870                           ;psect for function i1_OpenUSART
 15871  1A92                     i1_OpenUSART:	
 15872                           
 15873                           ;incstack = 0
 15874                           ; Regs used in i1_OpenUSART: [wreg+status,2]
 15875                           ;i1OpenUSART@config stored from wreg
 15876  1A92  00F2               	movwf	i1OpenUSART@config
 15877                           
 15878                           ;UART.c: 164: TX1STA = 0;
 15879  1A93  0023               	movlb	3	; select bank3
 15880  1A94  019E               	clrf	30	;volatile
 15881                           
 15882                           ;UART.c: 165: RC1STA = 0;
 15883  1A95  019D               	clrf	29	;volatile
 15884                           
 15885                           ;UART.c: 167: if(config&0x01)
 15886  1A96  1872               	btfsc	i1OpenUSART@config,0
 15887                           
 15888                           ;UART.c: 168: {
 15889                           ;UART.c: 169: TX1STAbits.SYNC = 1;
 15890  1A97  161E               	bsf	30,4	;volatile
 15891                           
 15892                           ;UART.c: 170: }
 15893                           ;UART.c: 172: if(config&0x02)
 15894  1A98  1CF2               	btfss	i1OpenUSART@config,1
 15895  1A99  2A9C               	goto	i1l4096
 15896                           
 15897                           ;UART.c: 173: {
 15898                           ;UART.c: 174: TX1STAbits.TX9 = 1;
 15899  1A9A  171E               	bsf	30,6	;volatile
 15900                           
 15901                           ;UART.c: 175: RC1STAbits.RX9 = 1;
 15902  1A9B  171D               	bsf	29,6	;volatile
 15903  1A9C                     i1l4096:	
 15904                           
 15905                           ;UART.c: 176: }
 15906                           ;UART.c: 178: if(config&0x04)
 15907  1A9C  1972               	btfsc	i1OpenUSART@config,2
 15908                           
 15909                           ;UART.c: 179: {
 15910                           ;UART.c: 180: TX1STAbits.CSRC = 1;
 15911  1A9D  179E               	bsf	30,7	;volatile
 15912                           
 15913                           ;UART.c: 181: }
 15914                           ;UART.c: 183: if(config&0x08)
 15915  1A9E  1DF2               	btfss	i1OpenUSART@config,3
 15916  1A9F  2AA2               	goto	i1l411
 15917                           
 15918                           ;UART.c: 184: {
 15919                           ;UART.c: 185: RC1STAbits.CREN = 1;
 15920  1AA0  161D               	bsf	29,4	;volatile
 15921                           
 15922                           ;UART.c: 186: }
 15923  1AA1  2AA3               	goto	i1l4104
 15924  1AA2                     i1l411:	
 15925                           
 15926                           ;UART.c: 187: else
 15927                           ;UART.c: 188: {
 15928                           ;UART.c: 189: RC1STAbits.SREN = 1;
 15929  1AA2  169D               	bsf	29,5	;volatile
 15930  1AA3                     i1l4104:	
 15931                           
 15932                           ;UART.c: 190: }
 15933                           ;UART.c: 192: if(config&0x10)
 15934  1AA3  1A72               	btfsc	i1OpenUSART@config,4
 15935                           
 15936                           ;UART.c: 193: {
 15937                           ;UART.c: 194: TX1STAbits.BRGH = 1;
 15938  1AA4  151E               	bsf	30,2	;volatile
 15939                           
 15940                           ;UART.c: 200: }
 15941                           ;UART.c: 202: if(config&0x40)
 15942                           
 15943                           ;UART.c: 198: {
 15944  1AA5  1F72               	btfss	i1OpenUSART@config,6
 15945  1AA6  2AAC               	goto	i1l415
 15946                           
 15947                           ;UART.c: 203: {
 15948                           ;UART.c: 204: PIR1bits.RCIF = 0;
 15949  1AA7  0020               	movlb	0	; select bank0
 15950  1AA8  1291               	bcf	17,5	;volatile
 15951                           
 15952                           ;UART.c: 205: PIE1bits.RCIE = 1;
 15953  1AA9  0021               	movlb	1	; select bank1
 15954  1AAA  1691               	bsf	17,5	;volatile
 15955                           
 15956                           ;UART.c: 207: }
 15957  1AAB  2AAE               	goto	i1l4114
 15958  1AAC                     i1l415:	
 15959                           
 15960                           ;UART.c: 208: else
 15961                           ;UART.c: 209: {
 15962                           ;UART.c: 210: PIE1bits.RCIE = 0;
 15963  1AAC  0021               	movlb	1	; select bank1
 15964  1AAD  1291               	bcf	17,5	;volatile
 15965  1AAE                     i1l4114:	
 15966                           
 15967                           ;UART.c: 211: }
 15968                           ;UART.c: 213: if(config&0x80)
 15969  1AAE  1FF2               	btfss	i1OpenUSART@config,7
 15970  1AAF  2AB5               	goto	i1l417
 15971                           
 15972                           ;UART.c: 214: {
 15973                           ;UART.c: 215: PIR1bits.TXIF = 0;
 15974  1AB0  0020               	movlb	0	; select bank0
 15975  1AB1  1211               	bcf	17,4	;volatile
 15976                           
 15977                           ;UART.c: 216: PIE1bits.TXIE = 1;
 15978  1AB2  0021               	movlb	1	; select bank1
 15979  1AB3  1611               	bsf	17,4	;volatile
 15980                           
 15981                           ;UART.c: 217: }
 15982  1AB4  2AB6               	goto	i1l4118
 15983  1AB5                     i1l417:	
 15984                           
 15985                           ;UART.c: 218: else
 15986                           ;UART.c: 219: {
 15987                           ;UART.c: 220: PIE1bits.TXIE = 0;
 15988  1AB5  1211               	bcf	17,4	;volatile
 15989  1AB6                     i1l4118:	
 15990                           
 15991                           ;UART.c: 221: }
 15992                           ;UART.c: 223: SPBRG = spbrg;
 15993  1AB6  0870               	movf	i1OpenUSART@spbrg,w
 15994  1AB7  0023               	movlb	3	; select bank3
 15995  1AB8  009B               	movwf	27	;volatile
 15996                           
 15997                           ;UART.c: 224: SPBRGH = spbrg >> 8;
 15998  1AB9  0871               	movf	i1OpenUSART@spbrg+1,w
 15999  1ABA  009C               	movwf	28	;volatile
 16000                           
 16001                           ;UART.c: 226: TX1STAbits.TXEN = 1;
 16002  1ABB  169E               	bsf	30,5	;volatile
 16003                           
 16004                           ;UART.c: 227: RC1STAbits.SPEN = 1;
 16005  1ABC  179D               	bsf	29,7	;volatile
 16006  1ABD  0008               	return
 16007  1ABE                     __end_ofi1_OpenUSART:	
 16008                           
 16009                           	psect	text60
 16010  18FC                     __ptext60:	
 16011 ;; *************** function i1_CloseUSART *****************
 16012 ;; Defined at:
 16013 ;;		line 65 in file "UART.c"
 16014 ;; Parameters:    Size  Location     Type
 16015 ;;		None
 16016 ;; Auto vars:     Size  Location     Type
 16017 ;;		None
 16018 ;; Return value:  Size  Location     Type
 16019 ;;		None               void
 16020 ;; Registers used:
 16021 ;;		wreg, status,2, status,0
 16022 ;; Tracked objects:
 16023 ;;		On entry : 0/0
 16024 ;;		On exit  : 0/0
 16025 ;;		Unchanged: 0/0
 16026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16029 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16030 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16031 ;;Total ram usage:        1 bytes
 16032 ;; Hardware stack levels used:    1
 16033 ;; This function calls:
 16034 ;;		Nothing
 16035 ;; This function is called by:
 16036 ;;		i1_InitUART
 16037 ;; This function uses a non-reentrant model
 16038 ;;
 16039                           
 16040                           
 16041                           ;psect for function i1_CloseUSART
 16042  18FC                     i1_CloseUSART:	
 16043                           
 16044                           ;UART.c: 67: RCSTA&=0b01001111;
 16045                           
 16046                           ;incstack = 0
 16047                           ; Regs used in i1_CloseUSART: [wreg+status,2+status,0]
 16048  18FC  304F               	movlw	79
 16049  18FD  00F0               	movwf	??i1_CloseUSART
 16050  18FE  0870               	movf	??i1_CloseUSART,w
 16051  18FF  0023               	movlb	3	; select bank3
 16052  1900  059D               	andwf	29,f	;volatile
 16053                           
 16054                           ;UART.c: 68: TX1STAbits.TXEN=0;
 16055  1901  129E               	bcf	30,5	;volatile
 16056                           
 16057                           ;UART.c: 69: PIE1&=0b11001111;
 16058  1902  30CF               	movlw	207
 16059  1903  00F0               	movwf	??i1_CloseUSART
 16060  1904  0870               	movf	??i1_CloseUSART,w
 16061  1905  0021               	movlb	1	; select bank1
 16062  1906  0591               	andwf	17,f	;volatile
 16063  1907  0008               	return
 16064  1908                     __end_ofi1_CloseUSART:	
 16065                           
 16066                           	psect	text61
 16067  170A                     __ptext61:	
 16068 ;; *************** function _sprintf *****************
 16069 ;; Defined at:
 16070 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 16071 ;; Parameters:    Size  Location     Type
 16072 ;;  sp              1    wreg     PTR unsigned char 
 16073 ;;		 -> Process_PS2_ScanCode@buf(60), SetBaud@buf(50), 
 16074 ;;  f               2   10[BANK0 ] PTR const unsigned char 
 16075 ;;		 -> STR_18(24), STR_11(12), 
 16076 ;; Auto vars:     Size  Location     Type
 16077 ;;  sp              1   30[BANK0 ] PTR unsigned char 
 16078 ;;		 -> Process_PS2_ScanCode@buf(60), SetBaud@buf(50), 
 16079 ;;  val             4   25[BANK0 ] unsigned long 
 16080 ;;  tmpval          4    0        struct .
 16081 ;;  prec            2   23[BANK0 ] int 
 16082 ;;  cp              2    0        PTR const unsigned char 
 16083 ;;  len             2    0        unsigned int 
 16084 ;;  c               1   31[BANK0 ] char 
 16085 ;;  ap              1   29[BANK0 ] PTR void [1]
 16086 ;;		 -> ?_sprintf(2), 
 16087 ;;  flag            1   22[BANK0 ] unsigned char 
 16088 ;; Return value:  Size  Location     Type
 16089 ;;                  2   10[BANK0 ] int 
 16090 ;; Registers used:
 16091 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16092 ;; Tracked objects:
 16093 ;;		On entry : 0/0
 16094 ;;		On exit  : 0/0
 16095 ;;		Unchanged: 0/0
 16096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16097 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16098 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16099 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16100 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16101 ;;Total ram usage:       22 bytes
 16102 ;; Hardware stack levels used:    1
 16103 ;; Hardware stack levels required when called:    1
 16104 ;; This function calls:
 16105 ;;		___llmod
 16106 ;;		i1___lldiv
 16107 ;; This function is called by:
 16108 ;;		_SetBaud
 16109 ;;		_Process_PS2_ScanCode
 16110 ;; This function uses a non-reentrant model
 16111 ;;
 16112                           
 16113                           
 16114                           ;psect for function _sprintf
 16115  170A                     _sprintf:	
 16116                           
 16117                           ;incstack = 0
 16118                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16119                           ;sprintf@sp stored from wreg
 16120  170A  0020               	movlb	0	; select bank0
 16121  170B  00BE               	movwf	sprintf@sp
 16122                           
 16123                           ;doprnt.c: 494: va_list ap;
 16124                           ;doprnt.c: 499: signed char c;
 16125                           ;doprnt.c: 504: int prec;
 16126                           ;doprnt.c: 508: unsigned char flag;
 16127                           ;doprnt.c: 523: union {
 16128                           ;doprnt.c: 524: unsigned long vd;
 16129                           ;doprnt.c: 525: double integ;
 16130                           ;doprnt.c: 526: } tmpval;
 16131                           ;doprnt.c: 528: unsigned long val;
 16132                           ;doprnt.c: 529: unsigned len;
 16133                           ;doprnt.c: 530: const char * cp;
 16134                           ;doprnt.c: 533: *ap = __va_start();
 16135  170C  302C               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
 16136  170D  00B0               	movwf	??_sprintf
 16137  170E  0830               	movf	??_sprintf,w
 16138  170F  00BD               	movwf	sprintf@ap
 16139  1710                     i1l4320:	
 16140                           ;doprnt.c: 536: while(c = *f++) {
 16141                           
 16142  1710  082B               	movf	sprintf@f+1,w
 16143  1711  00B1               	movwf	??_sprintf+1
 16144  1712  082A               	movf	sprintf@f,w
 16145  1713  00B0               	movwf	??_sprintf
 16146  1714  0AAA               	incf	sprintf@f,f
 16147  1715  1903               	skipnz
 16148  1716  0AAB               	incf	sprintf@f+1,f
 16149  1717  0830               	movf	??_sprintf,w
 16150  1718  0084               	movwf	4
 16151  1719  0831               	movf	??_sprintf+1,w
 16152  171A  0085               	movwf	5
 16153  171B  0800               	movf	0,w	;code access
 16154  171C  00B2               	movwf	??_sprintf+2
 16155  171D  0832               	movf	??_sprintf+2,w
 16156  171E  00BF               	movwf	sprintf@c
 16157  171F  083F               	movf	sprintf@c,w
 16158  1720  1903               	btfsc	3,2
 16159  1721  2FFA               	goto	i1l4322
 16160                           
 16161                           ;doprnt.c: 538: if(c != '%')
 16162  1722  3025               	movlw	37
 16163  1723  063F               	xorwf	sprintf@c,w
 16164  1724  1903               	btfsc	3,2
 16165  1725  2F33               	goto	i1l4282
 16166                           
 16167                           ;doprnt.c: 540: {
 16168                           ;doprnt.c: 541: ((*sp++ = (c)));
 16169  1726  083F               	movf	sprintf@c,w
 16170  1727  00B0               	movwf	??_sprintf
 16171  1728  083E               	movf	sprintf@sp,w
 16172  1729  0086               	movwf	6
 16173  172A  3001               	movlw	1	; select bank2/3
 16174  172B  0087               	movwf	7
 16175  172C  0830               	movf	??_sprintf,w
 16176  172D  0081               	movwf	1
 16177  172E  3001               	movlw	1
 16178  172F  00B0               	movwf	??_sprintf
 16179  1730  0830               	movf	??_sprintf,w
 16180  1731  07BE               	addwf	sprintf@sp,f
 16181                           
 16182                           ;doprnt.c: 542: continue;
 16183  1732  2F10               	goto	i1l4320
 16184  1733                     i1l4282:	
 16185                           
 16186                           ;doprnt.c: 543: }
 16187                           ;doprnt.c: 548: flag = 0;
 16188  1733  01B6               	clrf	sprintf@flag
 16189                           
 16190                           ;doprnt.c: 635: switch(c = *f++) {
 16191                           
 16192                           ;doprnt.c: 633: loop:
 16193  1734  2F3C               	goto	i1l4288
 16194  1735                     i1l1073:	
 16195                           ;doprnt.c: 641: case 'l':
 16196                           
 16197                           ;doprnt.c: 638: goto alldone;
 16198                           
 16199                           ;doprnt.c: 637: case 0:
 16200                           
 16201                           
 16202                           ;doprnt.c: 643: flag |= 0x10;
 16203  1735  1636               	bsf	sprintf@flag,4
 16204                           
 16205                           ;doprnt.c: 644: goto loop;
 16206  1736  2F3C               	goto	i1l4288
 16207  1737                     i1l4284:	
 16208                           ;doprnt.c: 817: case 'u':
 16209                           
 16210                           ;doprnt.c: 813: continue;
 16211                           
 16212                           ;doprnt.c: 802: default:
 16213                           
 16214                           
 16215                           ;doprnt.c: 818: flag |= 0xC0;
 16216  1737  30C0               	movlw	192
 16217  1738  00B0               	movwf	??_sprintf
 16218  1739  0830               	movf	??_sprintf,w
 16219  173A  04B6               	iorwf	sprintf@flag,f
 16220                           
 16221                           ;doprnt.c: 822: }
 16222                           
 16223                           ;doprnt.c: 819: break;
 16224  173B  2F53               	goto	i1l1076
 16225  173C                     i1l4288:	
 16226  173C  082B               	movf	sprintf@f+1,w
 16227  173D  00B1               	movwf	??_sprintf+1
 16228  173E  082A               	movf	sprintf@f,w
 16229  173F  00B0               	movwf	??_sprintf
 16230  1740  0AAA               	incf	sprintf@f,f
 16231  1741  1903               	skipnz
 16232  1742  0AAB               	incf	sprintf@f+1,f
 16233  1743  0830               	movf	??_sprintf,w
 16234  1744  0084               	movwf	4
 16235  1745  0831               	movf	??_sprintf+1,w
 16236  1746  0085               	movwf	5
 16237  1747  0800               	movf	0,w	;code access
 16238  1748  00BF               	movwf	sprintf@c
 16239                           
 16240                           ; Switch size 1, requested type "space"
 16241                           ; Number of cases is 3, Range of values is 0 to 117
 16242                           ; switch strategies available:
 16243                           ; Name         Instructions Cycles
 16244                           ; simple_byte           10     6 (average)
 16245                           ; direct_byte          242     6 (fixed)
 16246                           ; jumptable            260     6 (fixed)
 16247                           ;	Chosen strategy is simple_byte
 16248  1749  3A00               	xorlw	0	; case 0
 16249  174A  1903               	skipnz
 16250  174B  2FFA               	goto	i1l4322
 16251  174C  3A6C               	xorlw	108	; case 108
 16252  174D  1903               	skipnz
 16253  174E  2F35               	goto	i1l1073
 16254  174F  3A19               	xorlw	25	; case 117
 16255  1750  1903               	skipnz
 16256  1751  2F37               	goto	i1l4284
 16257  1752  2F10               	goto	i1l4320
 16258  1753                     i1l1076:	
 16259                           
 16260                           ;doprnt.c: 1273: {
 16261                           ;doprnt.c: 1281: if(flag & 0x10)
 16262  1753  1E36               	btfss	sprintf@flag,4
 16263  1754  2F62               	goto	i1l4294
 16264                           
 16265                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
 16266  1755  083D               	movf	sprintf@ap,w
 16267  1756  0086               	movwf	6
 16268  1757  0187               	clrf	7
 16269  1758  3F40               	moviw [0]fsr1
 16270  1759  00B9               	movwf	sprintf@val
 16271  175A  3F41               	moviw [1]fsr1
 16272  175B  00BA               	movwf	sprintf@val+1
 16273  175C  3F42               	moviw [2]fsr1
 16274  175D  00BB               	movwf	sprintf@val+2
 16275  175E  3F43               	moviw [3]fsr1
 16276  175F  00BC               	movwf	sprintf@val+3
 16277  1760  3004               	movlw	4
 16278  1761  2F70               	goto	L17
 16279  1762                     i1l4294:	
 16280                           
 16281                           ;doprnt.c: 1283: else
 16282                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 16283  1762  083D               	movf	sprintf@ap,w
 16284  1763  0086               	movwf	6
 16285  1764  0187               	clrf	7
 16286  1765  3F40               	moviw [0]fsr1
 16287  1766  00B0               	movwf	??_sprintf
 16288  1767  3F41               	moviw [1]fsr1
 16289  1768  00B1               	movwf	??_sprintf+1
 16290  1769  0830               	movf	??_sprintf,w
 16291  176A  00B9               	movwf	sprintf@val
 16292  176B  0831               	movf	??_sprintf+1,w
 16293  176C  00BA               	movwf	sprintf@val+1
 16294  176D  01BB               	clrf	sprintf@val+2
 16295  176E  01BC               	clrf	sprintf@val+3
 16296  176F  3002               	movlw	2
 16297  1770                     L17:	
 16298  1770  00B0               	movwf	??_sprintf
 16299  1771  0830               	movf	??_sprintf,w
 16300  1772  07BD               	addwf	sprintf@ap,f
 16301                           
 16302                           ;doprnt.c: 1287: }
 16303                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 16304  1773  01BF               	clrf	sprintf@c
 16305  1774  0ABF               	incf	sprintf@c,f
 16306  1775  300A               	movlw	10
 16307  1776  063F               	xorwf	sprintf@c,w
 16308  1777  1903               	btfsc	3,2
 16309  1778  2FA6               	goto	i1l4310
 16310  1779                     i1l4304:	
 16311                           
 16312                           ;doprnt.c: 1306: if(val < dpowers[c])
 16313  1779  083F               	movf	sprintf@c,w
 16314  177A  00B0               	movwf	??_sprintf
 16315  177B  01B1               	clrf	??_sprintf+1
 16316  177C  35B0               	lslf	??_sprintf,f
 16317  177D  0DB1               	rlf	??_sprintf+1,f
 16318  177E  35B0               	lslf	??_sprintf,f
 16319  177F  0DB1               	rlf	??_sprintf+1,f
 16320  1780  30D3               	movlw	low (_dpowers| (0+32768))
 16321  1781  0730               	addwf	??_sprintf,w
 16322  1782  0084               	movwf	4
 16323  1783  3088               	movlw	high (_dpowers| (0+32768))
 16324  1784  3D31               	addwfc	??_sprintf+1,w
 16325  1785  0085               	movwf	5
 16326  1786  3F00               	moviw [0]fsr0
 16327  1787  00B2               	movwf	??_sprintf+2
 16328  1788  3F01               	moviw [1]fsr0
 16329  1789  00B3               	movwf	??_sprintf+3
 16330  178A  3F02               	moviw [2]fsr0
 16331  178B  00B4               	movwf	??_sprintf+4
 16332  178C  3F03               	moviw [3]fsr0
 16333  178D  00B5               	movwf	??_sprintf+5
 16334  178E  0835               	movf	??_sprintf+5,w
 16335  178F  023C               	subwf	sprintf@val+3,w
 16336  1790  1D03               	skipz
 16337  1791  2F9C               	goto	u464_25
 16338  1792  0834               	movf	??_sprintf+4,w
 16339  1793  023B               	subwf	sprintf@val+2,w
 16340  1794  1D03               	skipz
 16341  1795  2F9C               	goto	u464_25
 16342  1796  0833               	movf	??_sprintf+3,w
 16343  1797  023A               	subwf	sprintf@val+1,w
 16344  1798  1D03               	skipz
 16345  1799  2F9C               	goto	u464_25
 16346  179A  0832               	movf	??_sprintf+2,w
 16347  179B  0239               	subwf	sprintf@val,w
 16348  179C                     u464_25:	
 16349  179C  1C03               	btfss	3,0
 16350  179D  2FA6               	goto	i1l4310
 16351                           
 16352                           ;doprnt.c: 1307: break;
 16353  179E  3001               	movlw	1
 16354  179F  00B0               	movwf	??_sprintf
 16355  17A0  0830               	movf	??_sprintf,w
 16356  17A1  07BF               	addwf	sprintf@c,f
 16357  17A2  300A               	movlw	10
 16358  17A3  063F               	xorwf	sprintf@c,w
 16359  17A4  1D03               	btfss	3,2
 16360  17A5  2F79               	goto	i1l4304
 16361  17A6                     i1l4310:	
 16362                           
 16363                           ;doprnt.c: 1422: {
 16364                           ;doprnt.c: 1469: }
 16365                           ;doprnt.c: 1472: prec = c;
 16366  17A6  083F               	movf	sprintf@c,w
 16367  17A7  00B7               	movwf	sprintf@prec
 16368  17A8  01B8               	clrf	sprintf@prec+1
 16369  17A9  1BB7               	btfsc	sprintf@prec,7
 16370  17AA  03B8               	decf	sprintf@prec+1,f
 16371  17AB                     i1l4318:	
 16372                           ;doprnt.c: 1474: while(prec--) {
 16373                           
 16374  17AB  30FF               	movlw	255
 16375  17AC  07B7               	addwf	sprintf@prec,f
 16376  17AD  30FF               	movlw	255
 16377  17AE  3DB8               	addwfc	sprintf@prec+1,f
 16378  17AF  0A37               	incf	sprintf@prec,w
 16379  17B0  1903               	btfsc	3,2
 16380  17B1  0A38               	incf	sprintf@prec+1,w
 16381  17B2  1903               	btfsc	3,2
 16382  17B3  2F10               	goto	i1l4320
 16383                           
 16384                           ;doprnt.c: 1478: {
 16385                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 16386  17B4  3000               	movlw	0
 16387  17B5  00A3               	movwf	___llmod@divisor+3
 16388  17B6  3000               	movlw	0
 16389  17B7  00A2               	movwf	___llmod@divisor+2
 16390  17B8  3000               	movlw	0
 16391  17B9  00A1               	movwf	___llmod@divisor+1
 16392  17BA  300A               	movlw	10
 16393  17BB  00A0               	movwf	___llmod@divisor
 16394  17BC  0838               	movf	sprintf@prec+1,w
 16395  17BD  0085               	movwf	5
 16396  17BE  0837               	movf	sprintf@prec,w
 16397  17BF  0084               	movwf	4
 16398  17C0  3584               	lslf	4,f
 16399  17C1  0D85               	rlf	5,f
 16400  17C2  3584               	lslf	4,f
 16401  17C3  0D85               	rlf	5,f
 16402  17C4  30D3               	movlw	low (_dpowers| (0+32768))
 16403  17C5  0784               	addwf	4,f
 16404  17C6  3088               	movlw	high (_dpowers| (0+32768))
 16405  17C7  3D85               	addwfc	5,f
 16406  17C8  3F00               	moviw [0]fsr0
 16407  17C9  00F0               	movwf	i1___lldiv@divisor
 16408  17CA  3F01               	moviw [1]fsr0
 16409  17CB  00F1               	movwf	i1___lldiv@divisor+1
 16410  17CC  3F02               	moviw [2]fsr0
 16411  17CD  00F2               	movwf	i1___lldiv@divisor+2
 16412  17CE  3F03               	moviw [3]fsr0
 16413  17CF  00F3               	movwf	i1___lldiv@divisor+3
 16414  17D0  083C               	movf	sprintf@val+3,w
 16415  17D1  00F7               	movwf	i1___lldiv@dividend+3
 16416  17D2  083B               	movf	sprintf@val+2,w
 16417  17D3  00F6               	movwf	i1___lldiv@dividend+2
 16418  17D4  083A               	movf	sprintf@val+1,w
 16419  17D5  00F5               	movwf	i1___lldiv@dividend+1
 16420  17D6  0839               	movf	sprintf@val,w
 16421  17D7  00F4               	movwf	i1___lldiv@dividend
 16422  17D8  319F  2707  3197   	fcall	i1___lldiv
 16423  17DB  0873               	movf	?i1___lldiv+3,w
 16424  17DC  0020               	movlb	0	; select bank0
 16425  17DD  00A7               	movwf	___llmod@dividend+3
 16426  17DE  0872               	movf	?i1___lldiv+2,w
 16427  17DF  00A6               	movwf	___llmod@dividend+2
 16428  17E0  0871               	movf	?i1___lldiv+1,w
 16429  17E1  00A5               	movwf	___llmod@dividend+1
 16430  17E2  0870               	movf	?i1___lldiv,w
 16431  17E3  00A4               	movwf	___llmod@dividend
 16432  17E4  319D  253E  3197   	fcall	___llmod
 16433  17E7  0020               	movlb	0	; select bank0
 16434  17E8  0820               	movf	?___llmod,w
 16435  17E9  3E30               	addlw	48
 16436  17EA  00B0               	movwf	??_sprintf
 16437  17EB  0830               	movf	??_sprintf,w
 16438  17EC  00BF               	movwf	sprintf@c
 16439                           
 16440                           ;doprnt.c: 1523: }
 16441                           ;doprnt.c: 1524: ((*sp++ = (c)));
 16442  17ED  083F               	movf	sprintf@c,w
 16443  17EE  00B0               	movwf	??_sprintf
 16444  17EF  083E               	movf	sprintf@sp,w
 16445  17F0  0086               	movwf	6
 16446  17F1  3001               	movlw	1	; select bank2/3
 16447  17F2  0087               	movwf	7
 16448  17F3  0830               	movf	??_sprintf,w
 16449  17F4  0081               	movwf	1
 16450  17F5  3001               	movlw	1
 16451  17F6  00B0               	movwf	??_sprintf
 16452  17F7  0830               	movf	??_sprintf,w
 16453  17F8  07BE               	addwf	sprintf@sp,f
 16454  17F9  2FAB               	goto	i1l4318
 16455  17FA                     i1l4322:	
 16456                           ;doprnt.c: 1525: }
 16457                           ;doprnt.c: 1533: }
 16458                           ;doprnt.c: 1535: alldone:
 16459                           
 16460                           
 16461                           ;doprnt.c: 1538: *sp = 0;
 16462  17FA  083E               	movf	sprintf@sp,w
 16463  17FB  0086               	movwf	6
 16464  17FC  3001               	movlw	1	; select bank2/3
 16465  17FD  0087               	movwf	7
 16466  17FE  0181               	clrf	1
 16467  17FF  0008               	return
 16468  1800                     __end_of_sprintf:	
 16469                           ;doprnt.c: 1540: return 0;
 16470                           ;	Return value of _sprintf is never used
 16471                           
 16472                           
 16473                           	psect	text62
 16474  1F07                     __ptext62:	
 16475 ;; *************** function i1___lldiv *****************
 16476 ;; Defined at:
 16477 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
 16478 ;; Parameters:    Size  Location     Type
 16479 ;;  divisor         4    0[COMMON] unsigned long 
 16480 ;;  dividend        4    4[COMMON] unsigned long 
 16481 ;; Auto vars:     Size  Location     Type
 16482 ;;  __lldiv         4    9[COMMON] unsigned long 
 16483 ;;  __lldiv         1   13[COMMON] unsigned char 
 16484 ;; Return value:  Size  Location     Type
 16485 ;;                  4    0[COMMON] unsigned long 
 16486 ;; Registers used:
 16487 ;;		wreg, status,2, status,0
 16488 ;; Tracked objects:
 16489 ;;		On entry : 0/0
 16490 ;;		On exit  : 0/0
 16491 ;;		Unchanged: 0/0
 16492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16493 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16494 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16495 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16496 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16497 ;;Total ram usage:       14 bytes
 16498 ;; Hardware stack levels used:    1
 16499 ;; This function calls:
 16500 ;;		Nothing
 16501 ;; This function is called by:
 16502 ;;		_sprintf
 16503 ;;		i1_InitUART
 16504 ;; This function uses a non-reentrant model
 16505 ;;
 16506                           
 16507                           
 16508                           ;psect for function i1___lldiv
 16509  1F07                     i1___lldiv:	
 16510                           
 16511                           ;incstack = 0
 16512                           ; Regs used in i1___lldiv: [wreg+status,2+status,0]
 16513  1F07  3000               	movlw	0
 16514  1F08  00FC               	movwf	i1___lldiv@quotient+3
 16515  1F09  3000               	movlw	0
 16516  1F0A  00FB               	movwf	i1___lldiv@quotient+2
 16517  1F0B  3000               	movlw	0
 16518  1F0C  00FA               	movwf	i1___lldiv@quotient+1
 16519  1F0D  3000               	movlw	0
 16520  1F0E  00F9               	movwf	i1___lldiv@quotient
 16521  1F0F  0873               	movf	i1___lldiv@divisor+3,w
 16522  1F10  0472               	iorwf	i1___lldiv@divisor+2,w
 16523  1F11  0471               	iorwf	i1___lldiv@divisor+1,w
 16524  1F12  0470               	iorwf	i1___lldiv@divisor,w
 16525  1F13  1903               	skipnz
 16526  1F14  2F50               	goto	i1l4180
 16527  1F15  01FD               	clrf	i1___lldiv@counter
 16528  1F16  0AFD               	incf	i1___lldiv@counter,f
 16529  1F17                     i1l4166:	
 16530  1F17  1BF3               	btfsc	i1___lldiv@divisor+3,7
 16531  1F18  2F25               	goto	i1l4168
 16532  1F19  3001               	movlw	1
 16533  1F1A                     u441_25:	
 16534  1F1A  35F0               	lslf	i1___lldiv@divisor,f
 16535  1F1B  0DF1               	rlf	i1___lldiv@divisor+1,f
 16536  1F1C  0DF2               	rlf	i1___lldiv@divisor+2,f
 16537  1F1D  0DF3               	rlf	i1___lldiv@divisor+3,f
 16538  1F1E  0B89               	decfsz	9,f
 16539  1F1F  2F1A               	goto	u441_25
 16540  1F20  3001               	movlw	1
 16541  1F21  00F8               	movwf	??i1___lldiv
 16542  1F22  0878               	movf	??i1___lldiv,w
 16543  1F23  07FD               	addwf	i1___lldiv@counter,f
 16544  1F24  2F17               	goto	i1l4166
 16545  1F25                     i1l4168:	
 16546  1F25  3001               	movlw	1
 16547  1F26                     u443_25:	
 16548  1F26  35F9               	lslf	i1___lldiv@quotient,f
 16549  1F27  0DFA               	rlf	i1___lldiv@quotient+1,f
 16550  1F28  0DFB               	rlf	i1___lldiv@quotient+2,f
 16551  1F29  0DFC               	rlf	i1___lldiv@quotient+3,f
 16552  1F2A  0B89               	decfsz	9,f
 16553  1F2B  2F26               	goto	u443_25
 16554  1F2C  0873               	movf	i1___lldiv@divisor+3,w
 16555  1F2D  0277               	subwf	i1___lldiv@dividend+3,w
 16556  1F2E  1D03               	skipz
 16557  1F2F  2F3A               	goto	u444_25
 16558  1F30  0872               	movf	i1___lldiv@divisor+2,w
 16559  1F31  0276               	subwf	i1___lldiv@dividend+2,w
 16560  1F32  1D03               	skipz
 16561  1F33  2F3A               	goto	u444_25
 16562  1F34  0871               	movf	i1___lldiv@divisor+1,w
 16563  1F35  0275               	subwf	i1___lldiv@dividend+1,w
 16564  1F36  1D03               	skipz
 16565  1F37  2F3A               	goto	u444_25
 16566  1F38  0870               	movf	i1___lldiv@divisor,w
 16567  1F39  0274               	subwf	i1___lldiv@dividend,w
 16568  1F3A                     u444_25:	
 16569  1F3A  1C03               	skipc
 16570  1F3B  2F45               	goto	i1l4176
 16571  1F3C  0870               	movf	i1___lldiv@divisor,w
 16572  1F3D  02F4               	subwf	i1___lldiv@dividend,f
 16573  1F3E  0871               	movf	i1___lldiv@divisor+1,w
 16574  1F3F  3BF5               	subwfb	i1___lldiv@dividend+1,f
 16575  1F40  0872               	movf	i1___lldiv@divisor+2,w
 16576  1F41  3BF6               	subwfb	i1___lldiv@dividend+2,f
 16577  1F42  0873               	movf	i1___lldiv@divisor+3,w
 16578  1F43  3BF7               	subwfb	i1___lldiv@dividend+3,f
 16579  1F44  1479               	bsf	i1___lldiv@quotient,0
 16580  1F45                     i1l4176:	
 16581  1F45  3001               	movlw	1
 16582  1F46                     u445_25:	
 16583  1F46  36F3               	lsrf	i1___lldiv@divisor+3,f
 16584  1F47  0CF2               	rrf	i1___lldiv@divisor+2,f
 16585  1F48  0CF1               	rrf	i1___lldiv@divisor+1,f
 16586  1F49  0CF0               	rrf	i1___lldiv@divisor,f
 16587  1F4A  0B89               	decfsz	9,f
 16588  1F4B  2F46               	goto	u445_25
 16589  1F4C  3001               	movlw	1
 16590  1F4D  02FD               	subwf	i1___lldiv@counter,f
 16591  1F4E  1D03               	btfss	3,2
 16592  1F4F  2F25               	goto	i1l4168
 16593  1F50                     i1l4180:	
 16594  1F50  087C               	movf	i1___lldiv@quotient+3,w
 16595  1F51  00F3               	movwf	?i1___lldiv+3
 16596  1F52  087B               	movf	i1___lldiv@quotient+2,w
 16597  1F53  00F2               	movwf	?i1___lldiv+2
 16598  1F54  087A               	movf	i1___lldiv@quotient+1,w
 16599  1F55  00F1               	movwf	?i1___lldiv+1
 16600  1F56  0879               	movf	i1___lldiv@quotient,w
 16601  1F57  00F0               	movwf	?i1___lldiv
 16602  1F58  0008               	return
 16603  1F59                     __end_ofi1___lldiv:	
 16604                           
 16605                           	psect	text63
 16606  1D3E                     __ptext63:	
 16607 ;; *************** function ___llmod *****************
 16608 ;; Defined at:
 16609 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
 16610 ;; Parameters:    Size  Location     Type
 16611 ;;  divisor         4    0[BANK0 ] unsigned long 
 16612 ;;  dividend        4    4[BANK0 ] unsigned long 
 16613 ;; Auto vars:     Size  Location     Type
 16614 ;;  counter         1    9[BANK0 ] unsigned char 
 16615 ;; Return value:  Size  Location     Type
 16616 ;;                  4    0[BANK0 ] unsigned long 
 16617 ;; Registers used:
 16618 ;;		wreg, status,2, status,0
 16619 ;; Tracked objects:
 16620 ;;		On entry : 0/0
 16621 ;;		On exit  : 0/0
 16622 ;;		Unchanged: 0/0
 16623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16624 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16625 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16626 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16627 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16628 ;;Total ram usage:       10 bytes
 16629 ;; Hardware stack levels used:    1
 16630 ;; This function calls:
 16631 ;;		Nothing
 16632 ;; This function is called by:
 16633 ;;		_sprintf
 16634 ;; This function uses a non-reentrant model
 16635 ;;
 16636                           
 16637                           
 16638                           ;psect for function ___llmod
 16639  1D3E                     ___llmod:	
 16640                           
 16641                           ;incstack = 0
 16642                           ; Regs used in ___llmod: [wreg+status,2+status,0]
 16643  1D3E  0020               	movlb	0	; select bank0
 16644  1D3F  0823               	movf	___llmod@divisor+3,w
 16645  1D40  0422               	iorwf	___llmod@divisor+2,w
 16646  1D41  0421               	iorwf	___llmod@divisor+1,w
 16647  1D42  0420               	iorwf	___llmod@divisor,w
 16648  1D43  1903               	skipnz
 16649  1D44  2D78               	goto	i1l4074
 16650  1D45  01A9               	clrf	___llmod@counter
 16651  1D46  0AA9               	incf	___llmod@counter,f
 16652  1D47                     i1l4064:	
 16653  1D47  1BA3               	btfsc	___llmod@divisor+3,7
 16654  1D48  2D55               	goto	i1l4066
 16655  1D49  3001               	movlw	1
 16656  1D4A                     u423_25:	
 16657  1D4A  35A0               	lslf	___llmod@divisor,f
 16658  1D4B  0DA1               	rlf	___llmod@divisor+1,f
 16659  1D4C  0DA2               	rlf	___llmod@divisor+2,f
 16660  1D4D  0DA3               	rlf	___llmod@divisor+3,f
 16661  1D4E  0B89               	decfsz	9,f
 16662  1D4F  2D4A               	goto	u423_25
 16663  1D50  3001               	movlw	1
 16664  1D51  00A8               	movwf	??___llmod
 16665  1D52  0828               	movf	??___llmod,w
 16666  1D53  07A9               	addwf	___llmod@counter,f
 16667  1D54  2D47               	goto	i1l4064
 16668  1D55                     i1l4066:	
 16669  1D55  0823               	movf	___llmod@divisor+3,w
 16670  1D56  0227               	subwf	___llmod@dividend+3,w
 16671  1D57  1D03               	skipz
 16672  1D58  2D63               	goto	u425_25
 16673  1D59  0822               	movf	___llmod@divisor+2,w
 16674  1D5A  0226               	subwf	___llmod@dividend+2,w
 16675  1D5B  1D03               	skipz
 16676  1D5C  2D63               	goto	u425_25
 16677  1D5D  0821               	movf	___llmod@divisor+1,w
 16678  1D5E  0225               	subwf	___llmod@dividend+1,w
 16679  1D5F  1D03               	skipz
 16680  1D60  2D63               	goto	u425_25
 16681  1D61  0820               	movf	___llmod@divisor,w
 16682  1D62  0224               	subwf	___llmod@dividend,w
 16683  1D63                     u425_25:	
 16684  1D63  1C03               	skipc
 16685  1D64  2D6D               	goto	i1l4070
 16686  1D65  0820               	movf	___llmod@divisor,w
 16687  1D66  02A4               	subwf	___llmod@dividend,f
 16688  1D67  0821               	movf	___llmod@divisor+1,w
 16689  1D68  3BA5               	subwfb	___llmod@dividend+1,f
 16690  1D69  0822               	movf	___llmod@divisor+2,w
 16691  1D6A  3BA6               	subwfb	___llmod@dividend+2,f
 16692  1D6B  0823               	movf	___llmod@divisor+3,w
 16693  1D6C  3BA7               	subwfb	___llmod@dividend+3,f
 16694  1D6D                     i1l4070:	
 16695  1D6D  3001               	movlw	1
 16696  1D6E                     u426_25:	
 16697  1D6E  36A3               	lsrf	___llmod@divisor+3,f
 16698  1D6F  0CA2               	rrf	___llmod@divisor+2,f
 16699  1D70  0CA1               	rrf	___llmod@divisor+1,f
 16700  1D71  0CA0               	rrf	___llmod@divisor,f
 16701  1D72  0B89               	decfsz	9,f
 16702  1D73  2D6E               	goto	u426_25
 16703  1D74  3001               	movlw	1
 16704  1D75  02A9               	subwf	___llmod@counter,f
 16705  1D76  1D03               	btfss	3,2
 16706  1D77  2D55               	goto	i1l4066
 16707  1D78                     i1l4074:	
 16708  1D78  0827               	movf	___llmod@dividend+3,w
 16709  1D79  00A3               	movwf	?___llmod+3
 16710  1D7A  0826               	movf	___llmod@dividend+2,w
 16711  1D7B  00A2               	movwf	?___llmod+2
 16712  1D7C  0825               	movf	___llmod@dividend+1,w
 16713  1D7D  00A1               	movwf	?___llmod+1
 16714  1D7E  0824               	movf	___llmod@dividend,w
 16715  1D7F  00A0               	movwf	?___llmod
 16716  1D80  0008               	return
 16717  1D81                     __end_of___llmod:	
 16718                           
 16719                           	psect	text64
 16720  11B2                     __ptext64:	
 16721 ;; *************** function _WriteBaud *****************
 16722 ;; Defined at:
 16723 ;;		line 171 in file "FLASH.c"
 16724 ;; Parameters:    Size  Location     Type
 16725 ;;  row             2    0[BANK1 ] unsigned int 
 16726 ;;  Baud            4    2[BANK1 ] unsigned long 
 16727 ;;  Parity          1    6[BANK1 ] unsigned char 
 16728 ;; Auto vars:     Size  Location     Type
 16729 ;;  temp            4   74[BANK0 ] unsigned long 
 16730 ;; Return value:  Size  Location     Type
 16731 ;;		None               void
 16732 ;; Registers used:
 16733 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16734 ;; Tracked objects:
 16735 ;;		On entry : 0/0
 16736 ;;		On exit  : 0/0
 16737 ;;		Unchanged: 0/0
 16738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16739 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 16740 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16741 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
 16742 ;;      Totals:         0       4      15       0       0       0       0       0       0       0       0       0       
      +0       0
 16743 ;;Total ram usage:       19 bytes
 16744 ;; Hardware stack levels used:    1
 16745 ;; Hardware stack levels required when called:    3
 16746 ;; This function calls:
 16747 ;;		_WriteFlash_Sequential
 16748 ;; This function is called by:
 16749 ;;		_SetBaud
 16750 ;; This function uses a non-reentrant model
 16751 ;;
 16752                           
 16753                           
 16754                           ;psect for function _WriteBaud
 16755  11B2                     _WriteBaud:	
 16756                           
 16757                           ;FLASH.c: 173: unsigned long temp;
 16758                           ;FLASH.c: 174: temp = (Baud & 0x000FFFFF) + (((unsigned long) Parity & 0x7) << 20);
 16759                           
 16760                           ;incstack = 0
 16761                           ; Regs used in _WriteBaud: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16762  11B2  0021               	movlb	1	; select bank1
 16763  11B3  0826               	movf	WriteBaud@Parity^(0+128),w
 16764  11B4  3907               	andlw	7
 16765  11B5  00A7               	movwf	??_WriteBaud^(0+128)
 16766  11B6  01A8               	clrf	(??_WriteBaud^(0+128)+1)
 16767  11B7  01A9               	clrf	(??_WriteBaud^(0+128)+2)
 16768  11B8  01AA               	clrf	(??_WriteBaud^(0+128)+3)
 16769  11B9  3014               	movlw	20
 16770  11BA                     u459_25:	
 16771  11BA  35A7               	lslf	??_WriteBaud^(0+128),f
 16772  11BB  0DA8               	rlf	(??_WriteBaud^(0+128)+1),f
 16773  11BC  0DA9               	rlf	(??_WriteBaud^(0+128)+2),f
 16774  11BD  0DAA               	rlf	(??_WriteBaud^(0+128)+3),f
 16775  11BE  0B89               	decfsz	9,f
 16776  11BF  29BA               	goto	u459_25
 16777  11C0  30FF               	movlw	255
 16778  11C1  0522               	andwf	WriteBaud@Baud^(0+128),w
 16779  11C2  00AB               	movwf	(??_WriteBaud+4)^(0+128)
 16780  11C3  30FF               	movlw	255
 16781  11C4  0523               	andwf	(WriteBaud@Baud+1)^(0+128),w
 16782  11C5  00AC               	movwf	((??_WriteBaud+4)^(0+128)+1)
 16783  11C6  300F               	movlw	15
 16784  11C7  0524               	andwf	(WriteBaud@Baud+2)^(0+128),w
 16785  11C8  00AD               	movwf	((??_WriteBaud+4)^(0+128)+2)
 16786  11C9  3000               	movlw	0
 16787  11CA  0525               	andwf	(WriteBaud@Baud+3)^(0+128),w
 16788  11CB  00AE               	movwf	((??_WriteBaud+4)^(0+128)+3)
 16789  11CC  082B               	movf	(??_WriteBaud+4)^(0+128),w
 16790  11CD  07A7               	addwf	??_WriteBaud^(0+128),f
 16791  11CE  082C               	movf	(??_WriteBaud+5)^(0+128),w
 16792  11CF  3DA8               	addwfc	(??_WriteBaud^(0+128)+1),f
 16793  11D0  082D               	movf	(??_WriteBaud+6)^(0+128),w
 16794  11D1  3DA9               	addwfc	(??_WriteBaud^(0+128)+2),f
 16795  11D2  082E               	movf	(??_WriteBaud+7)^(0+128),w
 16796  11D3  3DAA               	addwfc	(??_WriteBaud^(0+128)+3),f
 16797  11D4  082A               	movf	(??_WriteBaud+3)^(0+128),w
 16798  11D5  0020               	movlb	0	; select bank0
 16799  11D6  00ED               	movwf	WriteBaud@temp+3
 16800  11D7  0021               	movlb	1	; select bank1
 16801  11D8  0829               	movf	(??_WriteBaud+2)^(0+128),w
 16802  11D9  0020               	movlb	0	; select bank0
 16803  11DA  00EC               	movwf	WriteBaud@temp+2
 16804  11DB  0021               	movlb	1	; select bank1
 16805  11DC  0828               	movf	(??_WriteBaud+1)^(0+128),w
 16806  11DD  0020               	movlb	0	; select bank0
 16807  11DE  00EB               	movwf	WriteBaud@temp+1
 16808  11DF  0021               	movlb	1	; select bank1
 16809  11E0  0827               	movf	??_WriteBaud^(0+128),w
 16810  11E1  0020               	movlb	0	; select bank0
 16811  11E2  00EA               	movwf	WriteBaud@temp
 16812                           
 16813                           ;FLASH.c: 175: MEM[1] = (unsigned int) (temp & 0x0003FFF);
 16814  11E3  30FF               	movlw	255
 16815  11E4  056A               	andwf	WriteBaud@temp,w
 16816  11E5  0021               	movlb	1	; select bank1
 16817  11E6  00E7               	movwf	(_MEM^(0+128)+2)
 16818  11E7  303F               	movlw	63
 16819  11E8  0020               	movlb	0	; select bank0
 16820  11E9  056B               	andwf	WriteBaud@temp+1,w
 16821  11EA  0021               	movlb	1	; select bank1
 16822  11EB  00E8               	movwf	((_MEM+1)^(0+128)+2)
 16823                           
 16824                           ;FLASH.c: 176: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
 16825  11EC  0020               	movlb	0	; select bank0
 16826  11ED  086A               	movf	WriteBaud@temp,w
 16827  11EE  0021               	movlb	1	; select bank1
 16828  11EF  00A7               	movwf	??_WriteBaud^(0+128)
 16829  11F0  0020               	movlb	0	; select bank0
 16830  11F1  086B               	movf	WriteBaud@temp+1,w
 16831  11F2  0021               	movlb	1	; select bank1
 16832  11F3  00A8               	movwf	(??_WriteBaud^(0+128)+1)
 16833  11F4  0020               	movlb	0	; select bank0
 16834  11F5  086C               	movf	WriteBaud@temp+2,w
 16835  11F6  0021               	movlb	1	; select bank1
 16836  11F7  00A9               	movwf	(??_WriteBaud^(0+128)+2)
 16837  11F8  0020               	movlb	0	; select bank0
 16838  11F9  086D               	movf	WriteBaud@temp+3,w
 16839  11FA  0021               	movlb	1	; select bank1
 16840  11FB  00AA               	movwf	(??_WriteBaud^(0+128)+3)
 16841  11FC  300E               	movlw	14
 16842  11FD                     u460_25:	
 16843  11FD  36AA               	lsrf	(??_WriteBaud^(0+128)+3),f
 16844  11FE  0CA9               	rrf	(??_WriteBaud^(0+128)+2),f
 16845  11FF  0CA8               	rrf	(??_WriteBaud^(0+128)+1),f
 16846  1200  0CA7               	rrf	??_WriteBaud^(0+128),f
 16847  1201  0B89               	decfsz	9,f
 16848  1202  29FD               	goto	u460_25
 16849  1203  30FF               	movlw	255
 16850  1204  0527               	andwf	??_WriteBaud^(0+128),w
 16851  1205  00E5               	movwf	_MEM^(0+128)
 16852  1206  303F               	movlw	63
 16853  1207  0528               	andwf	(??_WriteBaud+1)^(0+128),w
 16854  1208  00E6               	movwf	(_MEM+1)^(0+128)
 16855                           
 16856                           ;FLASH.c: 177: WriteFlash_Sequential(row, MEM, 2);
 16857  1209  0821               	movf	(WriteBaud@row+1)^(0+128),w
 16858  120A  00FB               	movwf	WriteFlash_Sequential@row+1
 16859  120B  0820               	movf	WriteBaud@row^(0+128),w
 16860  120C  00FA               	movwf	WriteFlash_Sequential@row
 16861  120D  30E5               	movlw	(low (_MEM| 0))& (0+255)
 16862  120E  00A7               	movwf	??_WriteBaud^(0+128)
 16863  120F  0827               	movf	??_WriteBaud^(0+128),w
 16864  1210  00FC               	movwf	WriteFlash_Sequential@buffer
 16865  1211  3002               	movlw	2
 16866  1212  00A8               	movwf	(??_WriteBaud+1)^(0+128)
 16867  1213  0828               	movf	(??_WriteBaud+1)^(0+128),w
 16868  1214  00FD               	movwf	WriteFlash_Sequential@amount
 16869  1215  3193  2375         	fcall	_WriteFlash_Sequential
 16870  1217  0008               	return
 16871  1218                     __end_of_WriteBaud:	
 16872                           
 16873                           	psect	text65
 16874  1375                     __ptext65:	
 16875 ;; *************** function _WriteFlash_Sequential *****************
 16876 ;; Defined at:
 16877 ;;		line 112 in file "FLASH.c"
 16878 ;; Parameters:    Size  Location     Type
 16879 ;;  row             2   10[COMMON] unsigned int 
 16880 ;;  buffer          1   12[COMMON] PTR unsigned int 
 16881 ;;		 -> MEM(4), 
 16882 ;;  amount          1   13[COMMON] unsigned char 
 16883 ;; Auto vars:     Size  Location     Type
 16884 ;;  TempBufL       32   35[BANK0 ] unsigned char [32]
 16885 ;;  TempBufH       32    3[BANK0 ] unsigned char [32]
 16886 ;;  temp            2   70[BANK0 ] unsigned int 
 16887 ;;  i               1   73[BANK0 ] unsigned char 
 16888 ;;  spaces          1   72[BANK0 ] unsigned char 
 16889 ;;  amountTemp      1   69[BANK0 ] unsigned char 
 16890 ;;  tempL           1   68[BANK0 ] unsigned char 
 16891 ;;  tempH           1   67[BANK0 ] unsigned char 
 16892 ;; Return value:  Size  Location     Type
 16893 ;;		None               void
 16894 ;; Registers used:
 16895 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16896 ;; Tracked objects:
 16897 ;;		On entry : 0/0
 16898 ;;		On exit  : 0/0
 16899 ;;		Unchanged: 0/0
 16900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16901 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16902 ;;      Locals:         0      71       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16903 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16904 ;;      Totals:         4      74       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16905 ;;Total ram usage:       78 bytes
 16906 ;; Hardware stack levels used:    1
 16907 ;; Hardware stack levels required when called:    2
 16908 ;; This function calls:
 16909 ;;		_BlockErase
 16910 ;;		_UNLOCK
 16911 ;;		i1_ReadFlash_2Byte
 16912 ;;		i1_delayUS
 16913 ;; This function is called by:
 16914 ;;		_WriteBaud
 16915 ;; This function uses a non-reentrant model
 16916 ;;
 16917                           
 16918                           
 16919                           ;psect for function _WriteFlash_Sequential
 16920  1375                     _WriteFlash_Sequential:	
 16921                           
 16922                           ;FLASH.c: 114: unsigned char spaces = 32;
 16923                           
 16924                           ;incstack = 0
 16925                           ; Regs used in _WriteFlash_Sequential: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16926  1375  3020               	movlw	32
 16927  1376  0020               	movlb	0	; select bank0
 16928  1377  00A0               	movwf	??_WriteFlash_Sequential
 16929  1378  0820               	movf	??_WriteFlash_Sequential,w
 16930  1379  00E8               	movwf	WriteFlash_Sequential@spaces
 16931                           
 16932                           ;FLASH.c: 115: unsigned char tempH;
 16933                           ;FLASH.c: 116: unsigned char tempL;
 16934                           ;FLASH.c: 117: unsigned char i;
 16935                           ;FLASH.c: 118: unsigned int temp;
 16936                           ;FLASH.c: 119: unsigned char amountTemp =0;
 16937  137A  01E5               	clrf	WriteFlash_Sequential@amountTemp
 16938                           
 16939                           ;FLASH.c: 120: unsigned char TempBufH[32];
 16940                           ;FLASH.c: 121: unsigned char TempBufL[32];
 16941                           ;FLASH.c: 123: for(i=0;i<spaces;i++)
 16942  137B  01E9               	clrf	WriteFlash_Sequential@i
 16943  137C                     i1l4020:	
 16944  137C  0868               	movf	WriteFlash_Sequential@spaces,w
 16945  137D  0269               	subwf	WriteFlash_Sequential@i,w
 16946  137E  1803               	btfsc	3,0
 16947  137F  2BCE               	goto	i1l4022
 16948                           
 16949                           ;FLASH.c: 124: {
 16950                           ;FLASH.c: 125: amountTemp++;
 16951  1380  3001               	movlw	1
 16952  1381  00A0               	movwf	??_WriteFlash_Sequential
 16953  1382  0820               	movf	??_WriteFlash_Sequential,w
 16954  1383  07E5               	addwf	WriteFlash_Sequential@amountTemp,f
 16955                           
 16956                           ;FLASH.c: 126: if(amountTemp <= amount)
 16957  1384  0865               	movf	WriteFlash_Sequential@amountTemp,w
 16958  1385  027D               	subwf	WriteFlash_Sequential@amount,w
 16959  1386  1C03               	skipc
 16960  1387  2BA0               	goto	i1l4008
 16961                           
 16962                           ;FLASH.c: 127: {
 16963                           ;FLASH.c: 128: tempH = (unsigned char)((*buffer & 0x3F00) >> 8);
 16964  1388  087C               	movf	WriteFlash_Sequential@buffer,w
 16965  1389  0086               	movwf	6
 16966  138A  0187               	clrf	7
 16967  138B  3F40               	moviw [0]fsr1
 16968  138C  00A0               	movwf	??_WriteFlash_Sequential
 16969  138D  3F41               	moviw [1]fsr1
 16970  138E  00A1               	movwf	??_WriteFlash_Sequential+1
 16971  138F  0821               	movf	??_WriteFlash_Sequential+1,w
 16972  1390  393F               	andlw	63
 16973  1391  00A2               	movwf	??_WriteFlash_Sequential+2
 16974  1392  0822               	movf	??_WriteFlash_Sequential+2,w
 16975  1393  00E3               	movwf	WriteFlash_Sequential@tempH
 16976                           
 16977                           ;FLASH.c: 129: tempL = (unsigned char)(*buffer & 0x00FF);
 16978  1394  087C               	movf	WriteFlash_Sequential@buffer,w
 16979  1395  0086               	movwf	6
 16980  1396  0187               	clrf	7
 16981  1397  0801               	movf	1,w
 16982  1398  00A0               	movwf	??_WriteFlash_Sequential
 16983  1399  0820               	movf	??_WriteFlash_Sequential,w
 16984  139A  00E4               	movwf	WriteFlash_Sequential@tempL
 16985                           
 16986                           ;FLASH.c: 130: buffer++;
 16987  139B  3002               	movlw	2
 16988  139C  00A0               	movwf	??_WriteFlash_Sequential
 16989  139D  0820               	movf	??_WriteFlash_Sequential,w
 16990  139E  07FC               	addwf	WriteFlash_Sequential@buffer,f
 16991                           
 16992                           ;FLASH.c: 131: }
 16993  139F  2BB9               	goto	i1l4014
 16994  13A0                     i1l4008:	
 16995                           
 16996                           ;FLASH.c: 132: else
 16997                           ;FLASH.c: 133: {
 16998                           ;FLASH.c: 135: temp = ReadFlash_2Byte(row, i);
 16999  13A0  087B               	movf	WriteFlash_Sequential@row+1,w
 17000  13A1  00F1               	movwf	i1ReadFlash_2Byte@row+1
 17001  13A2  087A               	movf	WriteFlash_Sequential@row,w
 17002  13A3  00F0               	movwf	i1ReadFlash_2Byte@row
 17003  13A4  0869               	movf	WriteFlash_Sequential@i,w
 17004  13A5  00A0               	movwf	??_WriteFlash_Sequential
 17005  13A6  0820               	movf	??_WriteFlash_Sequential,w
 17006  13A7  00F2               	movwf	i1ReadFlash_2Byte@column
 17007  13A8  319A  2214  3193   	fcall	i1_ReadFlash_2Byte
 17008  13AB  0871               	movf	?i1_ReadFlash_2Byte+1,w
 17009  13AC  0020               	movlb	0	; select bank0
 17010  13AD  00E7               	movwf	WriteFlash_Sequential@temp+1
 17011  13AE  0870               	movf	?i1_ReadFlash_2Byte,w
 17012  13AF  00E6               	movwf	WriteFlash_Sequential@temp
 17013                           
 17014                           ;FLASH.c: 136: tempH = (unsigned char)((temp & 0x3F00) >>8);
 17015  13B0  0867               	movf	WriteFlash_Sequential@temp+1,w
 17016  13B1  393F               	andlw	63
 17017  13B2  00A0               	movwf	??_WriteFlash_Sequential
 17018  13B3  0820               	movf	??_WriteFlash_Sequential,w
 17019  13B4  00E3               	movwf	WriteFlash_Sequential@tempH
 17020                           
 17021                           ;FLASH.c: 137: tempL = (unsigned char)(temp & 0x00FF);
 17022  13B5  0866               	movf	WriteFlash_Sequential@temp,w
 17023  13B6  00A0               	movwf	??_WriteFlash_Sequential
 17024  13B7  0820               	movf	??_WriteFlash_Sequential,w
 17025  13B8  00E4               	movwf	WriteFlash_Sequential@tempL
 17026  13B9                     i1l4014:	
 17027                           
 17028                           ;FLASH.c: 138: }
 17029                           ;FLASH.c: 139: TempBufH[i] = tempH;
 17030  13B9  0863               	movf	WriteFlash_Sequential@tempH,w
 17031  13BA  00A0               	movwf	??_WriteFlash_Sequential
 17032  13BB  0869               	movf	WriteFlash_Sequential@i,w
 17033  13BC  3E23               	addlw	(low (WriteFlash_Sequential@TempBufH| 0))& (0+255)
 17034  13BD  0086               	movwf	6
 17035  13BE  0187               	clrf	7
 17036  13BF  0820               	movf	??_WriteFlash_Sequential,w
 17037  13C0  0081               	movwf	1
 17038                           
 17039                           ;FLASH.c: 140: TempBufL[i] = tempL;
 17040  13C1  0864               	movf	WriteFlash_Sequential@tempL,w
 17041  13C2  00A0               	movwf	??_WriteFlash_Sequential
 17042  13C3  0869               	movf	WriteFlash_Sequential@i,w
 17043  13C4  3E43               	addlw	(low (WriteFlash_Sequential@TempBufL| 0))& (0+255)
 17044  13C5  0086               	movwf	6
 17045  13C6  0187               	clrf	7
 17046  13C7  0820               	movf	??_WriteFlash_Sequential,w
 17047  13C8  0081               	movwf	1
 17048  13C9  3001               	movlw	1
 17049  13CA  00A0               	movwf	??_WriteFlash_Sequential
 17050  13CB  0820               	movf	??_WriteFlash_Sequential,w
 17051  13CC  07E9               	addwf	WriteFlash_Sequential@i,f
 17052  13CD  2B7C               	goto	i1l4020
 17053  13CE                     i1l4022:	
 17054                           
 17055                           ;FLASH.c: 141: }
 17056                           ;FLASH.c: 142: BlockErase(row);
 17057  13CE  087B               	movf	WriteFlash_Sequential@row+1,w
 17058  13CF  00F1               	movwf	BlockErase@row+1
 17059  13D0  087A               	movf	WriteFlash_Sequential@row,w
 17060  13D1  00F0               	movwf	BlockErase@row
 17061  13D2  319A  223C  3193   	fcall	_BlockErase
 17062                           
 17063                           ;FLASH.c: 143: delayUS(1000);
 17064  13D5  3000               	movlw	0
 17065  13D6  00F3               	movwf	i1delayUS@US+3
 17066  13D7  3000               	movlw	0
 17067  13D8  00F2               	movwf	i1delayUS@US+2
 17068  13D9  3003               	movlw	3
 17069  13DA  00F1               	movwf	i1delayUS@US+1
 17070  13DB  30E8               	movlw	232
 17071  13DC  00F0               	movwf	i1delayUS@US
 17072  13DD  319B  23DB  3193   	fcall	i1_delayUS
 17073                           
 17074                           ;FLASH.c: 144: INTCON &= ~0x80;
 17075  13E0  307F               	movlw	127
 17076  13E1  0020               	movlb	0	; select bank0
 17077  13E2  00A0               	movwf	??_WriteFlash_Sequential
 17078  13E3  0820               	movf	??_WriteFlash_Sequential,w
 17079  13E4  058B               	andwf	11,f	;volatile
 17080                           
 17081                           ;FLASH.c: 145: PMCON1 |= 0b00000100;
 17082  13E5  0023               	movlb	3	; select bank3
 17083  13E6  1515               	bsf	21,2	;volatile
 17084                           
 17085                           ;FLASH.c: 146: PMCON1 &= ~0b01000000;
 17086  13E7  30BF               	movlw	191
 17087  13E8  0020               	movlb	0	; select bank0
 17088  13E9  00A0               	movwf	??_WriteFlash_Sequential
 17089  13EA  0820               	movf	??_WriteFlash_Sequential,w
 17090  13EB  0023               	movlb	3	; select bank3
 17091  13EC  0595               	andwf	21,f	;volatile
 17092                           
 17093                           ;FLASH.c: 147: PMCON1 &= ~0b00100000;
 17094  13ED  30DF               	movlw	223
 17095  13EE  0020               	movlb	0	; select bank0
 17096  13EF  00A0               	movwf	??_WriteFlash_Sequential
 17097  13F0  0820               	movf	??_WriteFlash_Sequential,w
 17098  13F1  0023               	movlb	3	; select bank3
 17099  13F2  0595               	andwf	21,f	;volatile
 17100                           
 17101                           ;FLASH.c: 148: PMCON1 &= ~0b00010000;
 17102  13F3  30EF               	movlw	239
 17103  13F4  0020               	movlb	0	; select bank0
 17104  13F5  00A0               	movwf	??_WriteFlash_Sequential
 17105  13F6  0820               	movf	??_WriteFlash_Sequential,w
 17106  13F7  0023               	movlb	3	; select bank3
 17107  13F8  0595               	andwf	21,f	;volatile
 17108                           
 17109                           ;FLASH.c: 149: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 17110  13F9  087B               	movf	WriteFlash_Sequential@row+1,w
 17111  13FA  0020               	movlb	0	; select bank0
 17112  13FB  00A1               	movwf	??_WriteFlash_Sequential+1
 17113  13FC  087A               	movf	WriteFlash_Sequential@row,w
 17114  13FD  00A0               	movwf	??_WriteFlash_Sequential
 17115  13FE  36A1               	lsrf	??_WriteFlash_Sequential+1,f
 17116  13FF  0CA0               	rrf	??_WriteFlash_Sequential,f
 17117  1400  36A1               	lsrf	??_WriteFlash_Sequential+1,f
 17118  1401  0CA0               	rrf	??_WriteFlash_Sequential,f
 17119  1402  36A1               	lsrf	??_WriteFlash_Sequential+1,f
 17120  1403  0CA0               	rrf	??_WriteFlash_Sequential,f
 17121  1404  0820               	movf	??_WriteFlash_Sequential,w
 17122  1405  397F               	andlw	127
 17123  1406  0023               	movlb	3	; select bank3
 17124  1407  0092               	movwf	18	;volatile
 17125                           
 17126                           ;FLASH.c: 150: PMADRL = (unsigned char)((row & 0x007) << 5);
 17127  1408  087A               	movf	WriteFlash_Sequential@row,w
 17128  1409  3907               	andlw	7
 17129  140A  0020               	movlb	0	; select bank0
 17130  140B  00A0               	movwf	??_WriteFlash_Sequential
 17131  140C  3004               	movlw	4
 17132  140D                     u420_25:	
 17133  140D  35A0               	lslf	??_WriteFlash_Sequential,f
 17134  140E  3EFF               	addlw	-1
 17135  140F  1D03               	skipz
 17136  1410  2C0D               	goto	u420_25
 17137  1411  3520               	lslf	??_WriteFlash_Sequential,w
 17138  1412  0023               	movlb	3	; select bank3
 17139  1413  0091               	movwf	17	;volatile
 17140                           
 17141                           ;FLASH.c: 152: for(i=0;i<spaces;i++)
 17142  1414  0020               	movlb	0	; select bank0
 17143  1415  01E9               	clrf	WriteFlash_Sequential@i
 17144  1416                     i1l4052:	
 17145  1416  0868               	movf	WriteFlash_Sequential@spaces,w
 17146  1417  0269               	subwf	WriteFlash_Sequential@i,w
 17147  1418  1803               	btfsc	3,0
 17148  1419  2C3A               	goto	i1l4054
 17149                           
 17150                           ;FLASH.c: 153: {
 17151                           ;FLASH.c: 154: PMDATH = TempBufH[i];
 17152  141A  0869               	movf	WriteFlash_Sequential@i,w
 17153  141B  3E23               	addlw	(low (WriteFlash_Sequential@TempBufH| 0))& (0+255)
 17154  141C  0086               	movwf	6
 17155  141D  0187               	clrf	7
 17156  141E  0801               	movf	1,w
 17157  141F  0023               	movlb	3	; select bank3
 17158  1420  0094               	movwf	20	;volatile
 17159                           
 17160                           ;FLASH.c: 155: PMDATL = TempBufL[i];
 17161  1421  0020               	movlb	0	; select bank0
 17162  1422  0869               	movf	WriteFlash_Sequential@i,w
 17163  1423  3E43               	addlw	(low (WriteFlash_Sequential@TempBufL| 0))& (0+255)
 17164  1424  0086               	movwf	6
 17165  1425  0187               	clrf	7
 17166  1426  0801               	movf	1,w
 17167  1427  0023               	movlb	3	; select bank3
 17168  1428  0093               	movwf	19	;volatile
 17169                           
 17170                           ;FLASH.c: 156: __nop();
 17171  1429  0000               	nop
 17172                           
 17173                           ;FLASH.c: 157: __nop();
 17174  142A  0000               	nop
 17175                           
 17176                           ;FLASH.c: 158: UNLOCK();
 17177  142B  3198  20D0  3193   	fcall	_UNLOCK
 17178                           
 17179                           ;FLASH.c: 159: PMADRL++;
 17180  142E  3001               	movlw	1
 17181  142F  0020               	movlb	0	; select bank0
 17182  1430  00A0               	movwf	??_WriteFlash_Sequential
 17183  1431  0820               	movf	??_WriteFlash_Sequential,w
 17184  1432  0023               	movlb	3	; select bank3
 17185  1433  0791               	addwf	17,f	;volatile
 17186  1434  3001               	movlw	1
 17187  1435  0020               	movlb	0	; select bank0
 17188  1436  00A0               	movwf	??_WriteFlash_Sequential
 17189  1437  0820               	movf	??_WriteFlash_Sequential,w
 17190  1438  07E9               	addwf	WriteFlash_Sequential@i,f
 17191  1439  2C16               	goto	i1l4052
 17192  143A                     i1l4054:	
 17193                           
 17194                           ;FLASH.c: 161: }
 17195                           ;FLASH.c: 162: PMCON1 &= ~0b00000100;
 17196  143A  30FB               	movlw	251
 17197  143B  00A0               	movwf	??_WriteFlash_Sequential
 17198  143C  0820               	movf	??_WriteFlash_Sequential,w
 17199  143D  0023               	movlb	3	; select bank3
 17200  143E  0595               	andwf	21,f	;volatile
 17201                           
 17202                           ;FLASH.c: 163: INTCON |= 0x80;
 17203  143F  178B               	bsf	11,7	;volatile
 17204  1440  0008               	return
 17205  1441                     __end_of_WriteFlash_Sequential:	
 17206                           
 17207                           	psect	text66
 17208  1BDB                     __ptext66:	
 17209 ;; *************** function i1_delayUS *****************
 17210 ;; Defined at:
 17211 ;;		line 51 in file "MISC.c"
 17212 ;; Parameters:    Size  Location     Type
 17213 ;;  US              4    0[COMMON] long 
 17214 ;; Auto vars:     Size  Location     Type
 17215 ;;  delayUS         4    5[COMMON] long 
 17216 ;;  delayUS         1    9[COMMON] unsigned char 
 17217 ;; Return value:  Size  Location     Type
 17218 ;;		None               void
 17219 ;; Registers used:
 17220 ;;		wreg, status,2, status,0
 17221 ;; Tracked objects:
 17222 ;;		On entry : 0/0
 17223 ;;		On exit  : 0/0
 17224 ;;		Unchanged: 0/0
 17225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17226 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17227 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17228 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17229 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17230 ;;Total ram usage:       10 bytes
 17231 ;; Hardware stack levels used:    1
 17232 ;; This function calls:
 17233 ;;		Nothing
 17234 ;; This function is called by:
 17235 ;;		_UART_send_break_timed
 17236 ;;		_SetBaud
 17237 ;;		_Process_PS2_ScanCode
 17238 ;;		_WriteFlash_Sequential
 17239 ;;		i1_UARTstringWAIT
 17240 ;;		i1_Send_PS2
 17241 ;; This function uses a non-reentrant model
 17242 ;;
 17243                           
 17244                           
 17245                           ;psect for function i1_delayUS
 17246  1BDB                     i1_delayUS:	
 17247                           
 17248                           ;MISC.c: 53: long i;
 17249                           ;MISC.c: 54: unsigned char j;
 17250                           ;MISC.c: 55: for(i=0;i<US;i+=6)
 17251                           
 17252                           ;incstack = 0
 17253                           ; Regs used in i1_delayUS: [wreg+status,2+status,0]
 17254  1BDB  3000               	movlw	0
 17255  1BDC  00F8               	movwf	i1delayUS@i+3
 17256  1BDD  3000               	movlw	0
 17257  1BDE  00F7               	movwf	i1delayUS@i+2
 17258  1BDF  3000               	movlw	0
 17259  1BE0  00F6               	movwf	i1delayUS@i+1
 17260  1BE1  3000               	movlw	0
 17261  1BE2  00F5               	movwf	i1delayUS@i
 17262  1BE3                     i1l279:	
 17263  1BE3  0878               	movf	i1delayUS@i+3,w
 17264  1BE4  3A80               	xorlw	128
 17265  1BE5  00F4               	movwf	??i1_delayUS
 17266  1BE6  0873               	movf	i1delayUS@US+3,w
 17267  1BE7  3A80               	xorlw	128
 17268  1BE8  0274               	subwf	??i1_delayUS,w
 17269  1BE9  1D03               	skipz
 17270  1BEA  2BF5               	goto	u391_23
 17271  1BEB  0872               	movf	i1delayUS@US+2,w
 17272  1BEC  0277               	subwf	i1delayUS@i+2,w
 17273  1BED  1D03               	skipz
 17274  1BEE  2BF5               	goto	u391_23
 17275  1BEF  0871               	movf	i1delayUS@US+1,w
 17276  1BF0  0276               	subwf	i1delayUS@i+1,w
 17277  1BF1  1D03               	skipz
 17278  1BF2  2BF5               	goto	u391_23
 17279  1BF3  0870               	movf	i1delayUS@US,w
 17280  1BF4  0275               	subwf	i1delayUS@i,w
 17281  1BF5                     u391_23:	
 17282  1BF5  1803               	btfsc	3,0
 17283  1BF6  0008               	return
 17284                           
 17285                           ;MISC.c: 56: {
 17286                           ;MISC.c: 57: for(j=0;j<32;j++)
 17287  1BF7  01F9               	clrf	i1delayUS@j
 17288  1BF8  3020               	movlw	32
 17289  1BF9  0279               	subwf	i1delayUS@j,w
 17290  1BFA  1803               	btfsc	3,0
 17291  1BFB  2C05               	goto	i1l3860
 17292  1BFC                     i1l281:	
 17293                           
 17294                           ;MISC.c: 58: {
 17295                           ;MISC.c: 59: __nop();
 17296  1BFC  0000               	nop
 17297  1BFD  3001               	movlw	1
 17298  1BFE  00F4               	movwf	??i1_delayUS
 17299  1BFF  0874               	movf	??i1_delayUS,w
 17300  1C00  07F9               	addwf	i1delayUS@j,f
 17301  1C01  3020               	movlw	32
 17302  1C02  0279               	subwf	i1delayUS@j,w
 17303  1C03  1C03               	skipc
 17304  1C04  2BFC               	goto	i1l281
 17305  1C05                     i1l3860:	
 17306  1C05  3006               	movlw	6
 17307  1C06  07F5               	addwf	i1delayUS@i,f
 17308  1C07  3000               	movlw	0
 17309  1C08  3DF6               	addwfc	i1delayUS@i+1,f
 17310  1C09  3000               	movlw	0
 17311  1C0A  3DF7               	addwfc	i1delayUS@i+2,f
 17312  1C0B  3000               	movlw	0
 17313  1C0C  3DF8               	addwfc	i1delayUS@i+3,f
 17314  1C0D  2BE3               	goto	i1l279
 17315  1C0E                     __end_ofi1_delayUS:	
 17316                           
 17317                           	psect	text67
 17318  1A14                     __ptext67:	
 17319 ;; *************** function i1_ReadFlash_2Byte *****************
 17320 ;; Defined at:
 17321 ;;		line 43 in file "FLASH.c"
 17322 ;; Parameters:    Size  Location     Type
 17323 ;;  row             2    0[COMMON] unsigned int 
 17324 ;;  column          1    2[COMMON] unsigned char 
 17325 ;; Auto vars:     Size  Location     Type
 17326 ;;		None
 17327 ;; Return value:  Size  Location     Type
 17328 ;;                  2    0[COMMON] unsigned int 
 17329 ;; Registers used:
 17330 ;;		wreg, status,2, status,0
 17331 ;; Tracked objects:
 17332 ;;		On entry : 0/0
 17333 ;;		On exit  : 0/0
 17334 ;;		Unchanged: 0/0
 17335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17336 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17338 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17339 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17340 ;;Total ram usage:        5 bytes
 17341 ;; Hardware stack levels used:    1
 17342 ;; This function calls:
 17343 ;;		Nothing
 17344 ;; This function is called by:
 17345 ;;		_WriteFlash_Sequential
 17346 ;;		i1_ReadFlash_4Byte
 17347 ;; This function uses a non-reentrant model
 17348 ;;
 17349                           
 17350                           
 17351                           ;psect for function i1_ReadFlash_2Byte
 17352  1A14                     i1_ReadFlash_2Byte:	
 17353                           
 17354                           ;FLASH.c: 45: PMCON1 &= ~0b01000000;
 17355                           
 17356                           ;incstack = 0
 17357                           ; Regs used in i1_ReadFlash_2Byte: [wreg+status,2+status,0]
 17358  1A14  30BF               	movlw	191
 17359  1A15  00F3               	movwf	??i1_ReadFlash_2Byte
 17360  1A16  0873               	movf	??i1_ReadFlash_2Byte,w
 17361  1A17  0023               	movlb	3	; select bank3
 17362  1A18  0595               	andwf	21,f	;volatile
 17363                           
 17364                           ;FLASH.c: 46: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 17365  1A19  0871               	movf	i1ReadFlash_2Byte@row+1,w
 17366  1A1A  00F4               	movwf	??i1_ReadFlash_2Byte+1
 17367  1A1B  0870               	movf	i1ReadFlash_2Byte@row,w
 17368  1A1C  00F3               	movwf	??i1_ReadFlash_2Byte
 17369  1A1D  36F4               	lsrf	??i1_ReadFlash_2Byte+1,f
 17370  1A1E  0CF3               	rrf	??i1_ReadFlash_2Byte,f
 17371  1A1F  36F4               	lsrf	??i1_ReadFlash_2Byte+1,f
 17372  1A20  0CF3               	rrf	??i1_ReadFlash_2Byte,f
 17373  1A21  36F4               	lsrf	??i1_ReadFlash_2Byte+1,f
 17374  1A22  0CF3               	rrf	??i1_ReadFlash_2Byte,f
 17375  1A23  0873               	movf	??i1_ReadFlash_2Byte,w
 17376  1A24  397F               	andlw	127
 17377  1A25  0092               	movwf	18	;volatile
 17378                           
 17379                           ;FLASH.c: 47: PMADRL = (unsigned char)(((row & 0x007) << 5) + column);
 17380  1A26  0870               	movf	i1ReadFlash_2Byte@row,w
 17381  1A27  3907               	andlw	7
 17382  1A28  00F3               	movwf	??i1_ReadFlash_2Byte
 17383  1A29  3004               	movlw	4
 17384  1A2A                     u399_25:	
 17385  1A2A  35F3               	lslf	??i1_ReadFlash_2Byte,f
 17386  1A2B  3EFF               	addlw	-1
 17387  1A2C  1D03               	skipz
 17388  1A2D  2A2A               	goto	u399_25
 17389  1A2E  3573               	lslf	??i1_ReadFlash_2Byte,w
 17390  1A2F  0772               	addwf	i1ReadFlash_2Byte@column,w
 17391  1A30  0091               	movwf	17	;volatile
 17392                           
 17393                           ;FLASH.c: 48: PMCON1 |= 0b00000001;
 17394  1A31  1415               	bsf	21,0	;volatile
 17395  1A32                     i1l940:	
 17396                           ;FLASH.c: 49: while(PMCON1 & 0b00000001);
 17397                           
 17398  1A32  1815               	btfsc	21,0	;volatile
 17399  1A33  2A32               	goto	i1l940
 17400                           
 17401                           ;FLASH.c: 50: __nop();
 17402  1A34  0000               	nop
 17403                           
 17404                           ;FLASH.c: 51: __nop();
 17405  1A35  0000               	nop
 17406                           
 17407                           ;FLASH.c: 52: return (PMDATL | (PMDATH << 8));
 17408  1A36  0023               	movlb	3	; select bank3
 17409  1A37  0814               	movf	20,w	;volatile
 17410  1A38  00F1               	movwf	?i1_ReadFlash_2Byte+1
 17411  1A39  0813               	movf	19,w	;volatile
 17412  1A3A  00F0               	movwf	?i1_ReadFlash_2Byte
 17413  1A3B  0008               	return
 17414  1A3C                     __end_ofi1_ReadFlash_2Byte:	
 17415                           
 17416                           	psect	text68
 17417  1A3C                     __ptext68:	
 17418 ;; *************** function _BlockErase *****************
 17419 ;; Defined at:
 17420 ;;		line 91 in file "FLASH.c"
 17421 ;; Parameters:    Size  Location     Type
 17422 ;;  row             2    0[COMMON] unsigned int 
 17423 ;; Auto vars:     Size  Location     Type
 17424 ;;		None
 17425 ;; Return value:  Size  Location     Type
 17426 ;;		None               void
 17427 ;; Registers used:
 17428 ;;		wreg, status,2, status,0, pclath, cstack
 17429 ;; Tracked objects:
 17430 ;;		On entry : 0/0
 17431 ;;		On exit  : 0/0
 17432 ;;		Unchanged: 0/0
 17433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17434 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17436 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17437 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17438 ;;Total ram usage:        4 bytes
 17439 ;; Hardware stack levels used:    1
 17440 ;; Hardware stack levels required when called:    1
 17441 ;; This function calls:
 17442 ;;		_UNLOCK
 17443 ;; This function is called by:
 17444 ;;		_WriteFlash_Sequential
 17445 ;; This function uses a non-reentrant model
 17446 ;;
 17447                           
 17448                           
 17449                           ;psect for function _BlockErase
 17450  1A3C                     _BlockErase:	
 17451                           
 17452                           ;FLASH.c: 93: INTCON &= ~0x80;
 17453                           
 17454                           ;incstack = 0
 17455                           ; Regs used in _BlockErase: [wreg+status,2+status,0+pclath+cstack]
 17456  1A3C  307F               	movlw	127
 17457  1A3D  00F2               	movwf	??_BlockErase
 17458  1A3E  0872               	movf	??_BlockErase,w
 17459  1A3F  058B               	andwf	11,f	;volatile
 17460                           
 17461                           ;FLASH.c: 94: PMCON1 &= ~0b01000000;
 17462  1A40  30BF               	movlw	191
 17463  1A41  00F2               	movwf	??_BlockErase
 17464  1A42  0872               	movf	??_BlockErase,w
 17465  1A43  0023               	movlb	3	; select bank3
 17466  1A44  0595               	andwf	21,f	;volatile
 17467                           
 17468                           ;FLASH.c: 95: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 17469  1A45  0871               	movf	BlockErase@row+1,w
 17470  1A46  00F3               	movwf	??_BlockErase+1
 17471  1A47  0870               	movf	BlockErase@row,w
 17472  1A48  00F2               	movwf	??_BlockErase
 17473  1A49  36F3               	lsrf	??_BlockErase+1,f
 17474  1A4A  0CF2               	rrf	??_BlockErase,f
 17475  1A4B  36F3               	lsrf	??_BlockErase+1,f
 17476  1A4C  0CF2               	rrf	??_BlockErase,f
 17477  1A4D  36F3               	lsrf	??_BlockErase+1,f
 17478  1A4E  0CF2               	rrf	??_BlockErase,f
 17479  1A4F  0872               	movf	??_BlockErase,w
 17480  1A50  397F               	andlw	127
 17481  1A51  0092               	movwf	18	;volatile
 17482                           
 17483                           ;FLASH.c: 96: PMADRL = (unsigned char)((row & 0x007) << 5);
 17484  1A52  0870               	movf	BlockErase@row,w
 17485  1A53  3907               	andlw	7
 17486  1A54  00F2               	movwf	??_BlockErase
 17487  1A55  3004               	movlw	4
 17488  1A56                     u388_25:	
 17489  1A56  35F2               	lslf	??_BlockErase,f
 17490  1A57  3EFF               	addlw	-1
 17491  1A58  1D03               	skipz
 17492  1A59  2A56               	goto	u388_25
 17493  1A5A  3572               	lslf	??_BlockErase,w
 17494  1A5B  0091               	movwf	17	;volatile
 17495                           
 17496                           ;FLASH.c: 97: PMCON1 |= 0b00010000;
 17497  1A5C  1615               	bsf	21,4	;volatile
 17498                           
 17499                           ;FLASH.c: 98: PMCON1 |= 0b00000100;
 17500  1A5D  1515               	bsf	21,2	;volatile
 17501                           
 17502                           ;FLASH.c: 99: UNLOCK();
 17503  1A5E  3198  20D0         	fcall	_UNLOCK
 17504                           
 17505                           ;FLASH.c: 100: PMCON1 &= ~0b00000100;
 17506  1A60  30FB               	movlw	251
 17507  1A61  00F2               	movwf	??_BlockErase
 17508  1A62  0872               	movf	??_BlockErase,w
 17509  1A63  0023               	movlb	3	; select bank3
 17510  1A64  0595               	andwf	21,f	;volatile
 17511                           
 17512                           ;FLASH.c: 101: INTCON |= 0x80;
 17513  1A65  178B               	bsf	11,7	;volatile
 17514  1A66  0008               	return
 17515  1A67                     __end_of_BlockErase:	
 17516                           
 17517                           	psect	text69
 17518  18D0                     __ptext69:	
 17519 ;; *************** function _UNLOCK *****************
 17520 ;; Defined at:
 17521 ;;		line 76 in file "FLASH.c"
 17522 ;; Parameters:    Size  Location     Type
 17523 ;;		None
 17524 ;; Auto vars:     Size  Location     Type
 17525 ;;		None
 17526 ;; Return value:  Size  Location     Type
 17527 ;;		None               void
 17528 ;; Registers used:
 17529 ;;		wreg
 17530 ;; Tracked objects:
 17531 ;;		On entry : 0/0
 17532 ;;		On exit  : 0/0
 17533 ;;		Unchanged: 0/0
 17534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17538 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17539 ;;Total ram usage:        0 bytes
 17540 ;; Hardware stack levels used:    1
 17541 ;; This function calls:
 17542 ;;		Nothing
 17543 ;; This function is called by:
 17544 ;;		_BlockErase
 17545 ;;		_WriteFlash_Sequential
 17546 ;; This function uses a non-reentrant model
 17547 ;;
 17548                           
 17549                           
 17550                           ;psect for function _UNLOCK
 17551  18D0                     _UNLOCK:	
 17552                           
 17553                           ;FLASH.c: 78: PMCON2 = 0x55;
 17554                           
 17555                           ;incstack = 0
 17556                           ; Regs used in _UNLOCK: [wreg]
 17557  18D0  3055               	movlw	85
 17558  18D1  0023               	movlb	3	; select bank3
 17559  18D2  0096               	movwf	22	;volsfr
 17560                           
 17561                           ;FLASH.c: 79: PMCON2 = 0xAA;
 17562  18D3  30AA               	movlw	170
 17563  18D4  0096               	movwf	22	;volsfr
 17564                           
 17565                           ;FLASH.c: 80: PMCON1 |= 0b00000010;
 17566  18D5  1495               	bsf	21,1	;volatile
 17567  18D6                     i1l949:	
 17568                           ;FLASH.c: 81: while(PMCON1 & 0b00000010);
 17569                           
 17570  18D6  1895               	btfsc	21,1	;volatile
 17571  18D7  28D6               	goto	i1l949
 17572                           
 17573                           ;FLASH.c: 82: __nop();
 17574  18D8  0000               	nop
 17575                           
 17576                           ;FLASH.c: 83: __nop();
 17577  18D9  0000               	nop
 17578  18DA  0008               	return
 17579  18DB                     __end_of_UNLOCK:	
 17580                           
 17581                           	psect	text70
 17582  1914                     __ptext70:	
 17583 ;; *************** function _ISNUMBER *****************
 17584 ;; Defined at:
 17585 ;;		line 129 in file "MISC.c"
 17586 ;; Parameters:    Size  Location     Type
 17587 ;;  ascii           1    wreg     unsigned char 
 17588 ;; Auto vars:     Size  Location     Type
 17589 ;;  ascii           1    0[COMMON] unsigned char 
 17590 ;; Return value:  Size  Location     Type
 17591 ;;                  1    wreg      unsigned char 
 17592 ;; Registers used:
 17593 ;;		wreg
 17594 ;; Tracked objects:
 17595 ;;		On entry : 0/0
 17596 ;;		On exit  : 0/0
 17597 ;;		Unchanged: 0/0
 17598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17600 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17602 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17603 ;;Total ram usage:        1 bytes
 17604 ;; Hardware stack levels used:    1
 17605 ;; This function calls:
 17606 ;;		Nothing
 17607 ;; This function is called by:
 17608 ;;		_Process_PS2_ScanCode
 17609 ;; This function uses a non-reentrant model
 17610 ;;
 17611                           
 17612                           
 17613                           ;psect for function _ISNUMBER
 17614  1914                     _ISNUMBER:	
 17615                           
 17616                           ;incstack = 0
 17617                           ; Regs used in _ISNUMBER: [wreg]
 17618                           ;ISNUMBER@ascii stored from wreg
 17619  1914  00F0               	movwf	ISNUMBER@ascii
 17620                           
 17621                           ;MISC.c: 131: if(ascii >= '0' && ascii <='9')
 17622  1915  3030               	movlw	48
 17623  1916  0270               	subwf	ISNUMBER@ascii,w
 17624  1917  1C03               	skipc
 17625  1918  291F               	goto	i1l4794
 17626  1919  303A               	movlw	58
 17627  191A  0270               	subwf	ISNUMBER@ascii,w
 17628  191B  1803               	skipnc
 17629  191C  291F               	goto	i1l4794
 17630                           
 17631                           ;MISC.c: 132: {
 17632                           ;MISC.c: 133: return 1;
 17633  191D  3001               	movlw	1
 17634                           
 17635                           ;MISC.c: 134: }
 17636  191E  0008               	return
 17637  191F                     i1l4794:	
 17638                           
 17639                           ;MISC.c: 135: else
 17640                           ;MISC.c: 136: {
 17641                           ;MISC.c: 137: return 0;
 17642  191F  3000               	movlw	0
 17643  1920  0008               	return
 17644  1921                     __end_of_ISNUMBER:	
 17645                           
 17646                           	psect	text71
 17647  1965                     __ptext71:	
 17648 ;; *************** function _Decode_Scan_Code_Shift *****************
 17649 ;; Defined at:
 17650 ;;		line 801 in file "PS_2.c"
 17651 ;; Parameters:    Size  Location     Type
 17652 ;;  Code            1    wreg     unsigned char 
 17653 ;; Auto vars:     Size  Location     Type
 17654 ;;  Code            1    0[COMMON] unsigned char 
 17655 ;; Return value:  Size  Location     Type
 17656 ;;                  1    wreg      unsigned char 
 17657 ;; Registers used:
 17658 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 17659 ;; Tracked objects:
 17660 ;;		On entry : 0/0
 17661 ;;		On exit  : 0/0
 17662 ;;		Unchanged: 0/0
 17663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17665 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17667 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17668 ;;Total ram usage:        1 bytes
 17669 ;; Hardware stack levels used:    1
 17670 ;; This function calls:
 17671 ;;		Nothing
 17672 ;; This function is called by:
 17673 ;;		_Process_PS2_ScanCode
 17674 ;; This function uses a non-reentrant model
 17675 ;;
 17676                           
 17677                           
 17678                           ;psect for function _Decode_Scan_Code_Shift
 17679  1965                     _Decode_Scan_Code_Shift:	
 17680                           
 17681                           ;incstack = 0
 17682                           ; Regs used in _Decode_Scan_Code_Shift: [wreg-fsr0h+status,2+status,0+pclath]
 17683                           ;Decode_Scan_Code_Shift@Code stored from wreg
 17684  1965  00F0               	movwf	Decode_Scan_Code_Shift@Code
 17685                           
 17686                           ;PS_2.c: 803: Code -= 13;
 17687  1966  300D               	movlw	13
 17688  1967  02F0               	subwf	Decode_Scan_Code_Shift@Code,f
 17689                           
 17690                           ;PS_2.c: 804: if(Code <=112)
 17691  1968  3071               	movlw	113
 17692  1969  0270               	subwf	Decode_Scan_Code_Shift@Code,w
 17693  196A  1803               	skipnc
 17694  196B  2975               	goto	i1l4958
 17695                           
 17696                           ;PS_2.c: 805: {
 17697                           ;PS_2.c: 806: return ScanCodeSHIFT[Code];
 17698  196C  0870               	movf	Decode_Scan_Code_Shift@Code,w
 17699  196D  3EF5               	addlw	low (_ScanCodeSHIFT| (0+32768))
 17700  196E  0084               	movwf	4
 17701  196F  3087               	movlw	high (_ScanCodeSHIFT| (0+32768))
 17702  1970  1803               	skipnc
 17703  1971  3E01               	addlw	1
 17704  1972  0085               	movwf	5
 17705  1973  0800               	movf	0,w	;code access
 17706                           
 17707                           ;PS_2.c: 807: }
 17708  1974  0008               	return
 17709  1975                     i1l4958:	
 17710                           
 17711                           ;PS_2.c: 808: else
 17712                           ;PS_2.c: 809: {
 17713                           ;PS_2.c: 810: return 0;
 17714  1975  3000               	movlw	0
 17715  1976  0008               	return
 17716  1977                     __end_of_Decode_Scan_Code_Shift:	
 17717                           
 17718                           	psect	text72
 17719  1953                     __ptext72:	
 17720 ;; *************** function _Decode_Scan_Code_FunctionE0 *****************
 17721 ;; Defined at:
 17722 ;;		line 820 in file "PS_2.c"
 17723 ;; Parameters:    Size  Location     Type
 17724 ;;  Code            1    wreg     unsigned char 
 17725 ;; Auto vars:     Size  Location     Type
 17726 ;;  Code            1    0[COMMON] unsigned char 
 17727 ;; Return value:  Size  Location     Type
 17728 ;;                  1    wreg      unsigned char 
 17729 ;; Registers used:
 17730 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 17731 ;; Tracked objects:
 17732 ;;		On entry : 0/0
 17733 ;;		On exit  : 0/0
 17734 ;;		Unchanged: 0/0
 17735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17737 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17739 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17740 ;;Total ram usage:        1 bytes
 17741 ;; Hardware stack levels used:    1
 17742 ;; This function calls:
 17743 ;;		Nothing
 17744 ;; This function is called by:
 17745 ;;		_Process_PS2_ScanCode
 17746 ;; This function uses a non-reentrant model
 17747 ;;
 17748                           
 17749                           
 17750                           ;psect for function _Decode_Scan_Code_FunctionE0
 17751  1953                     _Decode_Scan_Code_FunctionE0:	
 17752                           
 17753                           ;incstack = 0
 17754                           ; Regs used in _Decode_Scan_Code_FunctionE0: [wreg-fsr0h+status,2+status,0+pclath]
 17755                           ;Decode_Scan_Code_FunctionE0@Code stored from wreg
 17756  1953  00F0               	movwf	Decode_Scan_Code_FunctionE0@Code
 17757                           
 17758                           ;PS_2.c: 822: Code -= 17;
 17759  1954  3011               	movlw	17
 17760  1955  02F0               	subwf	Decode_Scan_Code_FunctionE0@Code,f
 17761                           
 17762                           ;PS_2.c: 823: if(Code <=108)
 17763  1956  306D               	movlw	109
 17764  1957  0270               	subwf	Decode_Scan_Code_FunctionE0@Code,w
 17765  1958  1803               	skipnc
 17766  1959  2963               	goto	i1l4946
 17767                           
 17768                           ;PS_2.c: 824: {
 17769                           ;PS_2.c: 825: return ScanCodeFunctionE0[Code];
 17770  195A  0870               	movf	Decode_Scan_Code_FunctionE0@Code,w
 17771  195B  3E66               	addlw	low (_ScanCodeFunctionE0| (0+32768))
 17772  195C  0084               	movwf	4
 17773  195D  3088               	movlw	high (_ScanCodeFunctionE0| (0+32768))
 17774  195E  1803               	skipnc
 17775  195F  3E01               	addlw	1
 17776  1960  0085               	movwf	5
 17777  1961  0800               	movf	0,w	;code access
 17778                           
 17779                           ;PS_2.c: 826: }
 17780  1962  0008               	return
 17781  1963                     i1l4946:	
 17782                           
 17783                           ;PS_2.c: 827: else
 17784                           ;PS_2.c: 828: {
 17785                           ;PS_2.c: 829: return 0;
 17786  1963  3000               	movlw	0
 17787  1964  0008               	return
 17788  1965                     __end_of_Decode_Scan_Code_FunctionE0:	
 17789                           
 17790                           	psect	text73
 17791  0A41                     __ptext73:	
 17792 ;; *************** function _Decode_Scan_Code_Function *****************
 17793 ;; Defined at:
 17794 ;;		line 839 in file "PS_2.c"
 17795 ;; Parameters:    Size  Location     Type
 17796 ;;  Code            1    wreg     unsigned char 
 17797 ;; Auto vars:     Size  Location     Type
 17798 ;;  Code            1    0[COMMON] unsigned char 
 17799 ;; Return value:  Size  Location     Type
 17800 ;;                  1    wreg      unsigned char 
 17801 ;; Registers used:
 17802 ;;		wreg, fsr0l, fsr0h, pclath
 17803 ;; Tracked objects:
 17804 ;;		On entry : 0/0
 17805 ;;		On exit  : 0/0
 17806 ;;		Unchanged: 0/0
 17807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17809 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17811 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17812 ;;Total ram usage:        1 bytes
 17813 ;; Hardware stack levels used:    1
 17814 ;; This function calls:
 17815 ;;		Nothing
 17816 ;; This function is called by:
 17817 ;;		_Process_PS2_ScanCode
 17818 ;; This function uses a non-reentrant model
 17819 ;;
 17820                           
 17821                           
 17822                           ;psect for function _Decode_Scan_Code_Function
 17823  0A41                     _Decode_Scan_Code_Function:	
 17824                           
 17825                           ;incstack = 0
 17826                           ; Regs used in _Decode_Scan_Code_Function: [wreg-fsr0h+pclath]
 17827                           ;Decode_Scan_Code_Function@Code stored from wreg
 17828  0A41  00F0               	movwf	Decode_Scan_Code_Function@Code
 17829                           
 17830                           ;PS_2.c: 841: if(Code <=131)
 17831  0A42  3084               	movlw	132
 17832  0A43  0270               	subwf	Decode_Scan_Code_Function@Code,w
 17833  0A44  1803               	skipnc
 17834  0A45  2A4F               	goto	i1l4982
 17835                           
 17836                           ;PS_2.c: 842: {
 17837                           ;PS_2.c: 843: return ScanCodeFunctionNoE0[Code];
 17838  0A46  0870               	movf	Decode_Scan_Code_Function@Code,w
 17839  0A47  3E00               	addlw	low (_ScanCodeFunctionNoE0| (0+32768))
 17840  0A48  0084               	movwf	4
 17841  0A49  3087               	movlw	high (_ScanCodeFunctionNoE0| (0+32768))
 17842  0A4A  1803               	skipnc
 17843  0A4B  3E01               	addlw	1
 17844  0A4C  0085               	movwf	5
 17845  0A4D  0800               	movf	0,w	;code access
 17846                           
 17847                           ;PS_2.c: 844: }
 17848  0A4E  0008               	return
 17849  0A4F                     i1l4982:	
 17850                           
 17851                           ;PS_2.c: 845: else
 17852                           ;PS_2.c: 846: {
 17853                           ;PS_2.c: 847: return 0;
 17854  0A4F  3000               	movlw	0
 17855  0A50  0008               	return
 17856  0A51                     __end_of_Decode_Scan_Code_Function:	
 17857                           
 17858                           	psect	text74
 17859  1941                     __ptext74:	
 17860 ;; *************** function _Decode_Scan_Code *****************
 17861 ;; Defined at:
 17862 ;;		line 782 in file "PS_2.c"
 17863 ;; Parameters:    Size  Location     Type
 17864 ;;  Code            1    wreg     unsigned char 
 17865 ;; Auto vars:     Size  Location     Type
 17866 ;;  Code            1    0[COMMON] unsigned char 
 17867 ;; Return value:  Size  Location     Type
 17868 ;;                  1    wreg      unsigned char 
 17869 ;; Registers used:
 17870 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 17871 ;; Tracked objects:
 17872 ;;		On entry : 0/0
 17873 ;;		On exit  : 0/0
 17874 ;;		Unchanged: 0/0
 17875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17877 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17879 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17880 ;;Total ram usage:        1 bytes
 17881 ;; Hardware stack levels used:    1
 17882 ;; This function calls:
 17883 ;;		Nothing
 17884 ;; This function is called by:
 17885 ;;		_Process_PS2_ScanCode
 17886 ;; This function uses a non-reentrant model
 17887 ;;
 17888                           
 17889                           
 17890                           ;psect for function _Decode_Scan_Code
 17891  1941                     _Decode_Scan_Code:	
 17892                           
 17893                           ;incstack = 0
 17894                           ; Regs used in _Decode_Scan_Code: [wreg-fsr0h+status,2+status,0+pclath]
 17895                           ;Decode_Scan_Code@Code stored from wreg
 17896  1941  00F0               	movwf	Decode_Scan_Code@Code
 17897                           
 17898                           ;PS_2.c: 784: Code -= 13;
 17899  1942  300D               	movlw	13
 17900  1943  02F0               	subwf	Decode_Scan_Code@Code,f
 17901                           
 17902                           ;PS_2.c: 785: if(Code <=112)
 17903  1944  3071               	movlw	113
 17904  1945  0270               	subwf	Decode_Scan_Code@Code,w
 17905  1946  1803               	skipnc
 17906  1947  2951               	goto	i1l4970
 17907                           
 17908                           ;PS_2.c: 786: {
 17909                           ;PS_2.c: 787: return ScanCode[Code];
 17910  1948  0870               	movf	Decode_Scan_Code@Code,w
 17911  1949  3E84               	addlw	low (_ScanCode| (0+32768))
 17912  194A  0084               	movwf	4
 17913  194B  3087               	movlw	high (_ScanCode| (0+32768))
 17914  194C  1803               	skipnc
 17915  194D  3E01               	addlw	1
 17916  194E  0085               	movwf	5
 17917  194F  0800               	movf	0,w	;code access
 17918                           
 17919                           ;PS_2.c: 788: }
 17920  1950  0008               	return
 17921  1951                     i1l4970:	
 17922                           
 17923                           ;PS_2.c: 789: else
 17924                           ;PS_2.c: 790: {
 17925                           ;PS_2.c: 791: return 0;
 17926  1951  3000               	movlw	0
 17927  1952  0008               	return
 17928  1953                     __end_of_Decode_Scan_Code:	
 17929                           
 17930                           	psect	text75
 17931  1CBC                     __ptext75:	
 17932 ;; *************** function _BufferShiftBack *****************
 17933 ;; Defined at:
 17934 ;;		line 179 in file "MISC.c"
 17935 ;; Parameters:    Size  Location     Type
 17936 ;;  buffer          1    wreg     PTR unsigned char 
 17937 ;;		 -> PS_2_ScanCodes(12), 
 17938 ;;  shift           1    0[COMMON] unsigned char 
 17939 ;;  size            1    1[COMMON] unsigned char 
 17940 ;; Auto vars:     Size  Location     Type
 17941 ;;  buffer          1    7[COMMON] PTR unsigned char 
 17942 ;;		 -> PS_2_ScanCodes(12), 
 17943 ;;  i               1    6[COMMON] unsigned char 
 17944 ;; Return value:  Size  Location     Type
 17945 ;;                  1    wreg      unsigned char 
 17946 ;; Registers used:
 17947 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17948 ;; Tracked objects:
 17949 ;;		On entry : 0/0
 17950 ;;		On exit  : 0/0
 17951 ;;		Unchanged: 0/0
 17952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17953 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17954 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17955 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17956 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17957 ;;Total ram usage:        8 bytes
 17958 ;; Hardware stack levels used:    1
 17959 ;; This function calls:
 17960 ;;		Nothing
 17961 ;; This function is called by:
 17962 ;;		_Process_PS2_ScanCode
 17963 ;; This function uses a non-reentrant model
 17964 ;;
 17965                           
 17966                           
 17967                           ;psect for function _BufferShiftBack
 17968  1CBC                     _BufferShiftBack:	
 17969                           
 17970                           ;incstack = 0
 17971                           ; Regs used in _BufferShiftBack: [wreg+fsr1l+fsr1h+status,2+status,0]
 17972                           ;BufferShiftBack@buffer stored from wreg
 17973  1CBC  00F7               	movwf	BufferShiftBack@buffer
 17974                           
 17975                           ;MISC.c: 181: unsigned char i=0;
 17976  1CBD  01F6               	clrf	BufferShiftBack@i
 17977                           
 17978                           ;MISC.c: 182: if(shift > size)
 17979  1CBE  0870               	movf	BufferShiftBack@shift,w
 17980  1CBF  0271               	subwf	BufferShiftBack@size,w
 17981  1CC0  1C03               	btfss	3,0
 17982  1CC1  0008               	return
 17983                           
 17984                           ;MISC.c: 185: }
 17985                           ;MISC.c: 186: for(i = 0; i < size; i++)
 17986                           
 17987                           ;MISC.c: 183: {
 17988                           ;MISC.c: 184: return 0;
 17989                           ;	Return value of _BufferShiftBack is never used
 17990  1CC2  01F6               	clrf	BufferShiftBack@i
 17991  1CC3                     i1l4822:	
 17992  1CC3  0871               	movf	BufferShiftBack@size,w
 17993  1CC4  0276               	subwf	BufferShiftBack@i,w
 17994  1CC5  1803               	btfsc	3,0
 17995  1CC6  0008               	return
 17996                           
 17997                           ;MISC.c: 187: {
 17998                           ;MISC.c: 188: if(i < (size - shift))
 17999  1CC7  0870               	movf	BufferShiftBack@shift,w
 18000  1CC8  00F2               	movwf	??_BufferShiftBack
 18001  1CC9  01F3               	clrf	??_BufferShiftBack+1
 18002  1CCA  09F2               	comf	??_BufferShiftBack,f
 18003  1CCB  09F3               	comf	??_BufferShiftBack+1,f
 18004  1CCC  0AF2               	incf	??_BufferShiftBack,f
 18005  1CCD  1903               	skipnz
 18006  1CCE  0AF3               	incf	??_BufferShiftBack+1,f
 18007  1CCF  0871               	movf	BufferShiftBack@size,w
 18008  1CD0  0772               	addwf	??_BufferShiftBack,w
 18009  1CD1  00F4               	movwf	??_BufferShiftBack+2
 18010  1CD2  0873               	movf	??_BufferShiftBack+1,w
 18011  1CD3  1803               	skipnc
 18012  1CD4  0A73               	incf	??_BufferShiftBack+1,w
 18013  1CD5  00F5               	movwf	??_BufferShiftBack+3
 18014  1CD6  0875               	movf	??_BufferShiftBack+3,w
 18015  1CD7  3A80               	xorlw	128
 18016  1CD8  3C80               	sublw	128
 18017  1CD9  1D03               	skipz
 18018  1CDA  2CDD               	goto	u539_25
 18019  1CDB  0874               	movf	??_BufferShiftBack+2,w
 18020  1CDC  0276               	subwf	BufferShiftBack@i,w
 18021  1CDD                     u539_25:	
 18022  1CDD  1803               	skipnc
 18023  1CDE  2CF1               	goto	i1l4818
 18024                           
 18025                           ;MISC.c: 189: {
 18026                           ;MISC.c: 190: buffer[i] = buffer[i+shift];
 18027  1CDF  0876               	movf	BufferShiftBack@i,w
 18028  1CE0  0770               	addwf	BufferShiftBack@shift,w
 18029  1CE1  0777               	addwf	BufferShiftBack@buffer,w
 18030  1CE2  00F2               	movwf	??_BufferShiftBack
 18031  1CE3  0872               	movf	??_BufferShiftBack,w
 18032  1CE4  0086               	movwf	6
 18033  1CE5  0187               	clrf	7
 18034  1CE6  0801               	movf	1,w
 18035  1CE7  00F3               	movwf	??_BufferShiftBack+1
 18036  1CE8  0876               	movf	BufferShiftBack@i,w
 18037  1CE9  0777               	addwf	BufferShiftBack@buffer,w
 18038  1CEA  00F4               	movwf	??_BufferShiftBack+2
 18039  1CEB  0874               	movf	??_BufferShiftBack+2,w
 18040  1CEC  0086               	movwf	6
 18041  1CED  0187               	clrf	7
 18042  1CEE  0873               	movf	??_BufferShiftBack+1,w
 18043  1CEF  0081               	movwf	1
 18044                           
 18045                           ;MISC.c: 191: }
 18046  1CF0  2CF8               	goto	i1l4820
 18047  1CF1                     i1l4818:	
 18048                           
 18049                           ;MISC.c: 192: else
 18050                           ;MISC.c: 193: {
 18051                           ;MISC.c: 194: buffer[i] = 0;
 18052  1CF1  0876               	movf	BufferShiftBack@i,w
 18053  1CF2  0777               	addwf	BufferShiftBack@buffer,w
 18054  1CF3  00F2               	movwf	??_BufferShiftBack
 18055  1CF4  0872               	movf	??_BufferShiftBack,w
 18056  1CF5  0086               	movwf	6
 18057  1CF6  0187               	clrf	7
 18058  1CF7  0181               	clrf	1
 18059  1CF8                     i1l4820:	
 18060  1CF8  3001               	movlw	1
 18061  1CF9  00F2               	movwf	??_BufferShiftBack
 18062  1CFA  0872               	movf	??_BufferShiftBack,w
 18063  1CFB  07F6               	addwf	BufferShiftBack@i,f
 18064  1CFC  2CC3               	goto	i1l4822
 18065  1CFD                     __end_of_BufferShiftBack:	
 18066                           ;MISC.c: 195: }
 18067                           ;MISC.c: 196: }
 18068                           ;MISC.c: 197: return 1;
 18069                           ;	Return value of _BufferShiftBack is never used
 18070                           
 18071                           
 18072                           	psect	text76
 18073  1E68                     __ptext76:	
 18074 ;; *************** function _PS2RawToScan *****************
 18075 ;; Defined at:
 18076 ;;		line 1115 in file "PS_2.c"
 18077 ;; Parameters:    Size  Location     Type
 18078 ;;  Raw             2    8[COMMON] unsigned int 
 18079 ;; Auto vars:     Size  Location     Type
 18080 ;;  temp            2   10[COMMON] unsigned int 
 18081 ;; Return value:  Size  Location     Type
 18082 ;;                  2    8[COMMON] unsigned int 
 18083 ;; Registers used:
 18084 ;;		wreg, status,2, status,0, pclath, cstack
 18085 ;; Tracked objects:
 18086 ;;		On entry : 0/0
 18087 ;;		On exit  : 0/0
 18088 ;;		Unchanged: 0/0
 18089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18090 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18091 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18092 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18093 ;;      Totals:         4       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18094 ;;Total ram usage:       13 bytes
 18095 ;; Hardware stack levels used:    1
 18096 ;; Hardware stack levels required when called:    1
 18097 ;; This function calls:
 18098 ;;		_Reverse_Byte
 18099 ;;		i1_CheckSum_byte
 18100 ;; This function is called by:
 18101 ;;		_isr
 18102 ;; This function uses a non-reentrant model
 18103 ;;
 18104                           
 18105                           
 18106                           ;psect for function _PS2RawToScan
 18107  1E68                     _PS2RawToScan:	
 18108                           
 18109                           ;PS_2.c: 1117: unsigned int temp;
 18110                           ;PS_2.c: 1119: if(CheckSum_byte((Raw >> 2) & 0xFF , 3) == ((Raw & 0x02)>> 1))
 18111                           
 18112                           ;incstack = 0
 18113                           ; Regs used in _PS2RawToScan: [wreg+status,2+status,0+pclath+cstack]
 18114  1E68  0879               	movf	PS2RawToScan@Raw+1,w
 18115  1E69  0020               	movlb	0	; select bank0
 18116  1E6A  00A1               	movwf	??_PS2RawToScan+1
 18117  1E6B  0878               	movf	PS2RawToScan@Raw,w
 18118  1E6C  00A0               	movwf	??_PS2RawToScan
 18119  1E6D  36A1               	lsrf	??_PS2RawToScan+1,f
 18120  1E6E  0CA0               	rrf	??_PS2RawToScan,f
 18121  1E6F  3001               	movlw	1
 18122  1E70  0520               	andwf	??_PS2RawToScan,w
 18123  1E71  00A2               	movwf	??_PS2RawToScan+2
 18124  1E72  3000               	movlw	0
 18125  1E73  0521               	andwf	??_PS2RawToScan+1,w
 18126  1E74  00A3               	movwf	??_PS2RawToScan+3
 18127  1E75  0879               	movf	PS2RawToScan@Raw+1,w
 18128  1E76  00A5               	movwf	??_PS2RawToScan+5
 18129  1E77  0878               	movf	PS2RawToScan@Raw,w
 18130  1E78  00A4               	movwf	??_PS2RawToScan+4
 18131  1E79  36A5               	lsrf	??_PS2RawToScan+5,f
 18132  1E7A  0CA4               	rrf	??_PS2RawToScan+4,f
 18133  1E7B  36A5               	lsrf	??_PS2RawToScan+5,f
 18134  1E7C  0CA4               	rrf	??_PS2RawToScan+4,f
 18135  1E7D  30FF               	movlw	255
 18136  1E7E  0524               	andwf	??_PS2RawToScan+4,w
 18137  1E7F  00F0               	movwf	i1CheckSum_byte@This
 18138  1E80  3000               	movlw	0
 18139  1E81  0525               	andwf	??_PS2RawToScan+5,w
 18140  1E82  00F1               	movwf	i1CheckSum_byte@This+1
 18141  1E83  3003               	movlw	3
 18142  1E84  00A6               	movwf	??_PS2RawToScan+6
 18143  1E85  0826               	movf	??_PS2RawToScan+6,w
 18144  1E86  00F2               	movwf	i1CheckSum_byte@Odd_Even
 18145  1E87  319A  22BE  319E   	fcall	i1_CheckSum_byte
 18146  1E8A  0020               	movlb	0	; select bank0
 18147  1E8B  00A7               	movwf	??_PS2RawToScan+7
 18148  1E8C  01A8               	clrf	??_PS2RawToScan+8
 18149  1E8D  0823               	movf	??_PS2RawToScan+3,w
 18150  1E8E  0628               	xorwf	??_PS2RawToScan+8,w
 18151  1E8F  1D03               	skipz
 18152  1E90  2E93               	goto	u610_25
 18153  1E91  0822               	movf	??_PS2RawToScan+2,w
 18154  1E92  0627               	xorwf	??_PS2RawToScan+7,w
 18155  1E93                     u610_25:	
 18156  1E93  1D03               	skipz
 18157  1E94  2EAF               	goto	i1l5282
 18158                           
 18159                           ;PS_2.c: 1120: {
 18160                           ;PS_2.c: 1122: temp = ((Raw >> 2) & 0xFF);
 18161  1E95  0879               	movf	PS2RawToScan@Raw+1,w
 18162  1E96  00A1               	movwf	??_PS2RawToScan+1
 18163  1E97  0878               	movf	PS2RawToScan@Raw,w
 18164  1E98  00A0               	movwf	??_PS2RawToScan
 18165  1E99  36A1               	lsrf	??_PS2RawToScan+1,f
 18166  1E9A  0CA0               	rrf	??_PS2RawToScan,f
 18167  1E9B  36A1               	lsrf	??_PS2RawToScan+1,f
 18168  1E9C  0CA0               	rrf	??_PS2RawToScan,f
 18169  1E9D  30FF               	movlw	255
 18170  1E9E  0520               	andwf	??_PS2RawToScan,w
 18171  1E9F  00FA               	movwf	PS2RawToScan@temp
 18172  1EA0  3000               	movlw	0
 18173  1EA1  0521               	andwf	??_PS2RawToScan+1,w
 18174  1EA2  00FB               	movwf	PS2RawToScan@temp+1
 18175                           
 18176                           ;PS_2.c: 1123: temp = (unsigned int) Reverse_Byte((unsigned char) temp);
 18177  1EA3  087A               	movf	PS2RawToScan@temp,w
 18178  1EA4  319F  27AC  319E   	fcall	_Reverse_Byte
 18179  1EA7  0020               	movlb	0	; select bank0
 18180  1EA8  00A0               	movwf	??_PS2RawToScan
 18181  1EA9  01A1               	clrf	??_PS2RawToScan+1
 18182  1EAA  0820               	movf	??_PS2RawToScan,w
 18183  1EAB  00FA               	movwf	PS2RawToScan@temp
 18184  1EAC  0821               	movf	??_PS2RawToScan+1,w
 18185  1EAD  00FB               	movwf	PS2RawToScan@temp+1
 18186                           
 18187                           ;PS_2.c: 1125: }
 18188  1EAE  2EB1               	goto	i1l5284
 18189  1EAF                     i1l5282:	
 18190                           
 18191                           ;PS_2.c: 1126: else
 18192                           ;PS_2.c: 1127: {
 18193                           ;PS_2.c: 1129: temp = 0;
 18194  1EAF  01FA               	clrf	PS2RawToScan@temp
 18195  1EB0  01FB               	clrf	PS2RawToScan@temp+1
 18196  1EB1                     i1l5284:	
 18197                           
 18198                           ;PS_2.c: 1130: }
 18199                           ;PS_2.c: 1131: return temp;
 18200  1EB1  087B               	movf	PS2RawToScan@temp+1,w
 18201  1EB2  00F9               	movwf	?_PS2RawToScan+1
 18202  1EB3  087A               	movf	PS2RawToScan@temp,w
 18203  1EB4  00F8               	movwf	?_PS2RawToScan
 18204  1EB5  0008               	return
 18205  1EB6                     __end_of_PS2RawToScan:	
 18206                           
 18207                           	psect	text77
 18208  1ABE                     __ptext77:	
 18209 ;; *************** function i1_CheckSum_byte *****************
 18210 ;; Defined at:
 18211 ;;		line 71 in file "MISC.c"
 18212 ;; Parameters:    Size  Location     Type
 18213 ;;  This            2    0[COMMON] unsigned int 
 18214 ;;  Odd_Even        1    2[COMMON] unsigned char 
 18215 ;; Auto vars:     Size  Location     Type
 18216 ;;  CheckSum_byt    2    4[COMMON] unsigned int 
 18217 ;;  CheckSum_byt    1    7[COMMON] unsigned char 
 18218 ;;  CheckSum_byt    1    6[COMMON] unsigned char 
 18219 ;; Return value:  Size  Location     Type
 18220 ;;                  1    wreg      unsigned char 
 18221 ;; Registers used:
 18222 ;;		wreg, status,2, status,0
 18223 ;; Tracked objects:
 18224 ;;		On entry : 0/0
 18225 ;;		On exit  : 0/0
 18226 ;;		Unchanged: 0/0
 18227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18228 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18229 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18230 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18231 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18232 ;;Total ram usage:        8 bytes
 18233 ;; Hardware stack levels used:    1
 18234 ;; This function calls:
 18235 ;;		Nothing
 18236 ;; This function is called by:
 18237 ;;		_PS2RawToScan
 18238 ;;		i1_UARTchar
 18239 ;;		i1_Send_PS2
 18240 ;; This function uses a non-reentrant model
 18241 ;;
 18242                           
 18243                           
 18244                           ;psect for function i1_CheckSum_byte
 18245  1ABE                     i1_CheckSum_byte:	
 18246                           
 18247                           ;MISC.c: 73: char i = 0;
 18248                           
 18249                           ;incstack = 0
 18250                           ; Regs used in i1_CheckSum_byte: [wreg+status,2+status,0]
 18251  1ABE  01F7               	clrf	i1CheckSum_byte@i
 18252                           
 18253                           ;MISC.c: 74: unsigned char Parity = 0;
 18254  1ABF  01F6               	clrf	i1CheckSum_byte@Parity
 18255                           
 18256                           ;MISC.c: 75: unsigned int ThisTemp = This;
 18257  1AC0  0871               	movf	i1CheckSum_byte@This+1,w
 18258  1AC1  00F5               	movwf	i1CheckSum_byte@ThisTemp+1
 18259  1AC2  0870               	movf	i1CheckSum_byte@This,w
 18260  1AC3  00F4               	movwf	i1CheckSum_byte@ThisTemp
 18261                           
 18262                           ;MISC.c: 77: for (i =0; i<8; i++)
 18263  1AC4  01F7               	clrf	i1CheckSum_byte@i
 18264  1AC5  3008               	movlw	8
 18265  1AC6  0277               	subwf	i1CheckSum_byte@i,w
 18266  1AC7  1803               	btfsc	3,0
 18267  1AC8  2ADC               	goto	i1l3874
 18268  1AC9                     i1l287:	
 18269                           
 18270                           ;MISC.c: 78: {
 18271                           ;MISC.c: 79: if((ThisTemp & 0x01) == 1)
 18272  1AC9  1C74               	btfss	i1CheckSum_byte@ThisTemp,0
 18273  1ACA  2ACF               	goto	i1l289
 18274                           
 18275                           ;MISC.c: 80: {
 18276                           ;MISC.c: 81: Parity++;
 18277  1ACB  3001               	movlw	1
 18278  1ACC  00F3               	movwf	??i1_CheckSum_byte
 18279  1ACD  0873               	movf	??i1_CheckSum_byte,w
 18280  1ACE  07F6               	addwf	i1CheckSum_byte@Parity,f
 18281  1ACF                     i1l289:	
 18282                           
 18283                           ;MISC.c: 82: }
 18284                           ;MISC.c: 83: ThisTemp >>= 1;
 18285  1ACF  3001               	movlw	1
 18286  1AD0                     u394_25:	
 18287  1AD0  36F5               	lsrf	i1CheckSum_byte@ThisTemp+1,f
 18288  1AD1  0CF4               	rrf	i1CheckSum_byte@ThisTemp,f
 18289  1AD2  0B89               	decfsz	9,f
 18290  1AD3  2AD0               	goto	u394_25
 18291  1AD4  3001               	movlw	1
 18292  1AD5  00F3               	movwf	??i1_CheckSum_byte
 18293  1AD6  0873               	movf	??i1_CheckSum_byte,w
 18294  1AD7  07F7               	addwf	i1CheckSum_byte@i,f
 18295  1AD8  3008               	movlw	8
 18296  1AD9  0277               	subwf	i1CheckSum_byte@i,w
 18297  1ADA  1C03               	skipc
 18298  1ADB  2AC9               	goto	i1l287
 18299  1ADC                     i1l3874:	
 18300                           
 18301                           ;MISC.c: 84: }
 18302                           ;MISC.c: 85: if(Odd_Even == 3)
 18303  1ADC  3003               	movlw	3
 18304  1ADD  0672               	xorwf	i1CheckSum_byte@Odd_Even,w
 18305  1ADE  1D03               	btfss	3,2
 18306  1ADF  2AE6               	goto	i1l290
 18307                           
 18308                           ;MISC.c: 86: {
 18309                           ;MISC.c: 87: if(Parity % 2 == 0)
 18310  1AE0  1876               	btfsc	i1CheckSum_byte@Parity,0
 18311  1AE1  2AE4               	goto	i1l3882
 18312                           
 18313                           ;MISC.c: 88: {
 18314                           ;MISC.c: 89: return 1;
 18315  1AE2  3001               	movlw	1
 18316  1AE3  0008               	return
 18317  1AE4                     i1l3882:	
 18318                           
 18319                           ;MISC.c: 90: }
 18320                           ;MISC.c: 91: return 0;
 18321  1AE4  3000               	movlw	0
 18322                           
 18323                           ;MISC.c: 92: }
 18324  1AE5  0008               	return
 18325  1AE6                     i1l290:	
 18326                           
 18327                           ;MISC.c: 93: else
 18328                           ;MISC.c: 94: {
 18329                           ;MISC.c: 95: if(Parity % 2 == 1)
 18330  1AE6  1C76               	btfss	i1CheckSum_byte@Parity,0
 18331  1AE7  2AEA               	goto	i1l3892
 18332                           
 18333                           ;MISC.c: 96: {
 18334                           ;MISC.c: 97: return 1;
 18335  1AE8  3001               	movlw	1
 18336  1AE9  0008               	return
 18337  1AEA                     i1l3892:	
 18338                           
 18339                           ;MISC.c: 98: }
 18340                           ;MISC.c: 99: return 0;
 18341  1AEA  3000               	movlw	0
 18342  1AEB  0008               	return
 18343  1AEC                     __end_ofi1_CheckSum_byte:	
 18344                           
 18345                           	psect	text78
 18346  1FAC                     __ptext78:	
 18347 ;; *************** function _Reverse_Byte *****************
 18348 ;; Defined at:
 18349 ;;		line 108 in file "MISC.c"
 18350 ;; Parameters:    Size  Location     Type
 18351 ;;  This            1    wreg     unsigned char 
 18352 ;; Auto vars:     Size  Location     Type
 18353 ;;  This            1    3[COMMON] unsigned char 
 18354 ;;  temp            1    2[COMMON] unsigned char 
 18355 ;; Return value:  Size  Location     Type
 18356 ;;                  1    wreg      unsigned char 
 18357 ;; Registers used:
 18358 ;;		wreg, status,2, status,0
 18359 ;; Tracked objects:
 18360 ;;		On entry : 0/0
 18361 ;;		On exit  : 0/0
 18362 ;;		Unchanged: 0/0
 18363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18365 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18366 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18367 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18368 ;;Total ram usage:        4 bytes
 18369 ;; Hardware stack levels used:    1
 18370 ;; This function calls:
 18371 ;;		Nothing
 18372 ;; This function is called by:
 18373 ;;		_PS2RawToScan
 18374 ;; This function uses a non-reentrant model
 18375 ;;
 18376                           
 18377                           
 18378                           ;psect for function _Reverse_Byte
 18379  1FAC                     _Reverse_Byte:	
 18380                           
 18381                           ;incstack = 0
 18382                           ; Regs used in _Reverse_Byte: [wreg+status,2+status,0]
 18383                           ;Reverse_Byte@This stored from wreg
 18384  1FAC  00F3               	movwf	Reverse_Byte@This
 18385                           
 18386                           ;MISC.c: 110: unsigned char temp=0;
 18387  1FAD  01F2               	clrf	Reverse_Byte@temp
 18388                           
 18389                           ;MISC.c: 112: temp += (This & 0x01) << 7;
 18390  1FAE  0873               	movf	Reverse_Byte@This,w
 18391  1FAF  3901               	andlw	1
 18392  1FB0  00F0               	movwf	??_Reverse_Byte
 18393  1FB1  3006               	movlw	6
 18394  1FB2                     u529_25:	
 18395  1FB2  35F0               	lslf	??_Reverse_Byte,f
 18396  1FB3  3EFF               	addlw	-1
 18397  1FB4  1D03               	skipz
 18398  1FB5  2FB2               	goto	u529_25
 18399  1FB6  3570               	lslf	??_Reverse_Byte,w
 18400  1FB7  00F1               	movwf	??_Reverse_Byte+1
 18401  1FB8  0871               	movf	??_Reverse_Byte+1,w
 18402  1FB9  07F2               	addwf	Reverse_Byte@temp,f
 18403                           
 18404                           ;MISC.c: 113: temp += (This & 0x02) << 5;
 18405  1FBA  0873               	movf	Reverse_Byte@This,w
 18406  1FBB  3902               	andlw	2
 18407  1FBC  00F0               	movwf	??_Reverse_Byte
 18408  1FBD  3004               	movlw	4
 18409  1FBE                     u530_25:	
 18410  1FBE  35F0               	lslf	??_Reverse_Byte,f
 18411  1FBF  3EFF               	addlw	-1
 18412  1FC0  1D03               	skipz
 18413  1FC1  2FBE               	goto	u530_25
 18414  1FC2  3570               	lslf	??_Reverse_Byte,w
 18415  1FC3  00F1               	movwf	??_Reverse_Byte+1
 18416  1FC4  0871               	movf	??_Reverse_Byte+1,w
 18417  1FC5  07F2               	addwf	Reverse_Byte@temp,f
 18418                           
 18419                           ;MISC.c: 114: temp += (This & 0x04) << 3;
 18420  1FC6  0873               	movf	Reverse_Byte@This,w
 18421  1FC7  3904               	andlw	4
 18422  1FC8  00F0               	movwf	??_Reverse_Byte
 18423  1FC9  3002               	movlw	2
 18424  1FCA                     u531_25:	
 18425  1FCA  35F0               	lslf	??_Reverse_Byte,f
 18426  1FCB  3EFF               	addlw	-1
 18427  1FCC  1D03               	skipz
 18428  1FCD  2FCA               	goto	u531_25
 18429  1FCE  3570               	lslf	??_Reverse_Byte,w
 18430  1FCF  00F1               	movwf	??_Reverse_Byte+1
 18431  1FD0  0871               	movf	??_Reverse_Byte+1,w
 18432  1FD1  07F2               	addwf	Reverse_Byte@temp,f
 18433                           
 18434                           ;MISC.c: 115: temp += (This & 0x08) << 1;
 18435  1FD2  0873               	movf	Reverse_Byte@This,w
 18436  1FD3  3908               	andlw	8
 18437  1FD4  0709               	addwf	9,w
 18438  1FD5  00F0               	movwf	??_Reverse_Byte
 18439  1FD6  0870               	movf	??_Reverse_Byte,w
 18440  1FD7  07F2               	addwf	Reverse_Byte@temp,f
 18441                           
 18442                           ;MISC.c: 116: temp += (This & 0x10) >> 1;
 18443  1FD8  3673               	lsrf	Reverse_Byte@This,w
 18444  1FD9  3908               	andlw	8
 18445  1FDA  00F0               	movwf	??_Reverse_Byte
 18446  1FDB  0870               	movf	??_Reverse_Byte,w
 18447  1FDC  07F2               	addwf	Reverse_Byte@temp,f
 18448                           
 18449                           ;MISC.c: 117: temp += (This & 0x20) >> 3;
 18450  1FDD  0873               	movf	Reverse_Byte@This,w
 18451  1FDE  00F0               	movwf	??_Reverse_Byte
 18452  1FDF  3003               	movlw	3
 18453  1FE0                     u532_25:	
 18454  1FE0  36F0               	lsrf	??_Reverse_Byte,f
 18455  1FE1  0B89               	decfsz	9,f
 18456  1FE2  2FE0               	goto	u532_25
 18457  1FE3  0870               	movf	??_Reverse_Byte,w
 18458  1FE4  3904               	andlw	4
 18459  1FE5  00F1               	movwf	??_Reverse_Byte+1
 18460  1FE6  0871               	movf	??_Reverse_Byte+1,w
 18461  1FE7  07F2               	addwf	Reverse_Byte@temp,f
 18462                           
 18463                           ;MISC.c: 118: temp += (This & 0x40) >> 5;
 18464  1FE8  0873               	movf	Reverse_Byte@This,w
 18465  1FE9  00F0               	movwf	??_Reverse_Byte
 18466  1FEA  3005               	movlw	5
 18467  1FEB                     u533_25:	
 18468  1FEB  36F0               	lsrf	??_Reverse_Byte,f
 18469  1FEC  0B89               	decfsz	9,f
 18470  1FED  2FEB               	goto	u533_25
 18471  1FEE  0870               	movf	??_Reverse_Byte,w
 18472  1FEF  3902               	andlw	2
 18473  1FF0  00F1               	movwf	??_Reverse_Byte+1
 18474  1FF1  0871               	movf	??_Reverse_Byte+1,w
 18475  1FF2  07F2               	addwf	Reverse_Byte@temp,f
 18476                           
 18477                           ;MISC.c: 119: temp += (This & 0x80) >> 7;
 18478  1FF3  0873               	movf	Reverse_Byte@This,w
 18479  1FF4  00F0               	movwf	??_Reverse_Byte
 18480  1FF5  3007               	movlw	7
 18481  1FF6                     u534_25:	
 18482  1FF6  36F0               	lsrf	??_Reverse_Byte,f
 18483  1FF7  0B89               	decfsz	9,f
 18484  1FF8  2FF6               	goto	u534_25
 18485  1FF9  0870               	movf	??_Reverse_Byte,w
 18486  1FFA  3901               	andlw	1
 18487  1FFB  00F1               	movwf	??_Reverse_Byte+1
 18488  1FFC  0871               	movf	??_Reverse_Byte+1,w
 18489  1FFD  07F2               	addwf	Reverse_Byte@temp,f
 18490                           
 18491                           ;MISC.c: 121: return temp;
 18492  1FFE  0872               	movf	Reverse_Byte@temp,w
 18493  1FFF  0008               	return
 18494  2000                     __end_of_Reverse_Byte:	
 18495  007E                     btemp	set	126	;btemp
 18496  007E                     wtemp	set	126
 18497  007E                     wtemp0	set	126
 18498  0080                     wtemp1	set	128
 18499  0082                     wtemp2	set	130
 18500  0084                     wtemp3	set	132
 18501  0086                     wtemp4	set	134
 18502  0088                     wtemp5	set	136
 18503  007F                     wtemp6	set	127
 18504  007E                     ttemp	set	126
 18505  007E                     ttemp0	set	126
 18506  0081                     ttemp1	set	129
 18507  0084                     ttemp2	set	132
 18508  0087                     ttemp3	set	135
 18509  007F                     ttemp4	set	127
 18510  007E                     ltemp	set	126
 18511  007E                     ltemp0	set	126
 18512  0082                     ltemp1	set	130
 18513  0086                     ltemp2	set	134
 18514  0080                     ltemp3	set	128


Data Sizes:
    Strings     210
    Constant    623
    Data        8
    BSS         55
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     38      73
    BANK2            80     63      63
    BANK3            80     66      80
    BANK4            80     55      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_18(CODE[24]), STR_11(CODE[12]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 60
		 -> Process_PS2_ScanCode@buf(BANK3[60]), SetBaud@buf(BANK2[50]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    WriteFlash_Sequential@buffer	PTR unsigned int  size(1) Largest target is 4
		 -> MEM(BANK1[4]), 

    UARTstringWAIT@data	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_20(CODE[20]), STR_19(CODE[3]), Process_PS2_ScanCode@buf(BANK3[60]), STR_17(CODE[3]), 
		 -> STR_16(CODE[3]), STR_15(CODE[19]), STR_14(CODE[19]), STR_13(CODE[3]), 
		 -> STR_12(CODE[3]), SetBaud@buf(BANK2[50]), STR_10(CODE[21]), STR_9(CODE[3]), 
		 -> STR_8(CODE[3]), NoParityMSG(CODE[20]), SpaceParityMSG(CODE[16]), MarkParityMSG(CODE[15]), 
		 -> EvenParityMSG(CODE[22]), OddParityMSG(CODE[21]), STR_7(CODE[3]), STR_6(CODE[33]), 
		 -> STR_5(CODE[3]), Version(CODE[9]), STR_4(CODE[19]), STR_3(CODE[28]), 
		 -> STR_2(CODE[8]), STR_1(CODE[7]), VoltageMSG(CODE[13]), 

    BufferShiftBack@buffer	PTR unsigned char  size(1) Largest target is 12
		 -> PS_2_ScanCodes(BANK1[12]), 

    cleanBuffer@data	PTR unsigned char  size(1) Largest target is 12
		 -> PS_2_ScanCodes(BANK1[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_UARTchar
    _ResendLast->i1_Send_PS2
    _Process_PS2_ScanCode->i1_Send_PS2
    _Process_PS2_ScanCode->i1_UARTchar
    i1_Send_PS2->i1_delayUS
    _UART_send_break_timed->i1_delayUS
    i1_UARTstringWAIT->i1_UARTchar
    i1_UARTchar->i1_CheckSum_byte
    i1_ReadBaud->i1_ReadFlash_4Byte
    i1_ReadFlash_4Byte->i1_ReadFlash_2Byte
    i1_InitUART->i1___lldiv
    _sprintf->i1___lldiv
    ___llmod->i1___lldiv
    _WriteBaud->_WriteFlash_Sequential
    _WriteFlash_Sequential->i1_delayUS
    _PS2RawToScan->i1_CheckSum_byte

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _ResendLast->i1_Send_PS2
    _SetBaud->_WriteBaud
    i1_UARTstringWAIT->i1_UARTchar
    i1_ReadBaud->i1_ReadFlash_4Byte
    _sprintf->___llmod
    _WriteBaud->_WriteFlash_Sequential

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    _isr->_Process_PS2_ScanCode
    _Process_PS2_ScanCode->_SetBaud
    _SetBaud->_WriteBaud

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    _Process_PS2_ScanCode->_SetBaud

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    _isr->_Process_PS2_ScanCode

Critical Paths under _main in BANK4

    _main->_ReadVoltage
    _ReadVoltage->___ftmul
    ___lwtoft->___ftpack
    ___ftmul->___ftdiv
    ___ftdiv->___lwtoft
    _InternalADC_Read->_delayUS
    _Init_PS_2_Send->_Send_PS2
    _Send_PS2->_delayUS
    _Init_System->_InitUART
    _UARTstringWAIT->_UARTchar
    _UARTchar->_CheckSum_byte
    _ReadBaud->_ReadFlash_4Byte
    _ReadFlash_4Byte->_ReadFlash_2Byte
    _InitUART->___lldiv

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   36296
                                             53 BANK4      2     2      0
                _ConfigureOscillator
                            _InitApp
                        _Init_System
              _PS_2_ENABLE_INTERRUPT
                          _PS_2_INIT
                        _ReadVoltage
                     _UARTstringWAIT
                             ___ftge
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     814
                                              0 BANK4      9     3      6
 ---------------------------------------------------------------------------------
 (1) _ReadVoltage                                          9     6      3   10590
                                             44 BANK4      9     6      3
                 _DisableInternalADC
                   _InternalADC_Read
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             4     1      3    2512
                                              8 BANK4      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    3046
                                             28 BANK4     16    10      6
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2978
                                             12 BANK4     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2404
                                              0 BANK4      8     3      5
 ---------------------------------------------------------------------------------
 (2) _InternalADC_Read                                     5     3      2    1980
                                             10 BANK4      5     3      2
                            _delayUS
 ---------------------------------------------------------------------------------
 (2) _DisableInternalADC                                   1     1      0       0
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PS_2_INIT                                            0     0      0    5473
                         _Clock_TRIS
                          _Data_TRIS
                     _Init_PS_2_Send
                         _Timer2Init
 ---------------------------------------------------------------------------------
 (2) _Timer2Init                                           5     5      0      99
                                              0 BANK4      5     5      0
                           _Timer2ON
 ---------------------------------------------------------------------------------
 (3) _Timer2ON                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_PS_2_Send                                       0     0      0    5312
             _PS_2_DISABLE_INTERRUPT
                           _Send_PS2
                            _delayUS
 ---------------------------------------------------------------------------------
 (3) _Send_PS2                                             9     9      0    3332
                                             10 BANK4      9     9      0
                      _CheckSum_byte
                         _Clock_TRIS
                          _Data_TRIS
                      _READ_PS_2_PIN
                            _delayUS
 ---------------------------------------------------------------------------------
 (4) _READ_PS_2_PIN                                        1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Data_TRIS                                            1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Clock_TRIS                                           1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (3) _PS_2_DISABLE_INTERRUPT                               2     2      0      31
                                              0 BANK4      2     2      0
 ---------------------------------------------------------------------------------
 (1) _PS_2_ENABLE_INTERRUPT                                1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                         14    14      0   11125
                                             35 BANK4     14    14      0
                           _InitUART
                           _ReadBaud
                     _UARTstringWAIT
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) _UARTstringWAIT                                       5     3      2    6243
                                             15 BANK4      5     3      2
                           _UARTchar
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) _delayUS                                             10     6      4    1949
                                              0 BANK4     10     6      4
 ---------------------------------------------------------------------------------
 (2) _UARTchar                                             7     5      2    2003
                                              8 BANK4      7     5      2
                      _CheckSum_byte
 ---------------------------------------------------------------------------------
 (3) _CheckSum_byte                                        8     5      3     784
                                              0 BANK4      8     5      3
 ---------------------------------------------------------------------------------
 (2) _ReadBaud                                            16    12      4    1168
                                             18 BANK4     16    12      4
                    _ReadFlash_4Byte
 ---------------------------------------------------------------------------------
 (3) _ReadFlash_4Byte                                     13     9      4     803
                                              5 BANK4     13     9      4
                    _ReadFlash_2Byte
 ---------------------------------------------------------------------------------
 (4) _ReadFlash_2Byte                                      5     2      3     485
                                              0 BANK4      5     2      3
 ---------------------------------------------------------------------------------
 (2) _InitUART                                            21    16      5    1493
                                             14 BANK4     21    16      5
                         _CloseUSART
                          _OpenUSART
                          _ReadUSART
                            ___lldiv
                          _baudUSART
 ---------------------------------------------------------------------------------
 (3) _baudUSART                                            1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     479
                                              0 BANK4     14     6      8
 ---------------------------------------------------------------------------------
 (3) _ReadUSART                                            2     2      0      34
                                              0 BANK4      2     2      0
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     387
                                              0 BANK4      3     1      2
 ---------------------------------------------------------------------------------
 (3) _CloseUSART                                           1     1      0       0
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  1     1      0       0
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  6     6      0   21166
                                             78 BANK0      2     2      0
                                             34 BANK1      4     4      0
                       _PS2RawToScan
               _Process_PS2_ScanCode
                         _ResendLast
                          _Timer2OFF
                        _Timer2Reset
              _UART_send_break_timed
           i1_PS_2_DISABLE_INTERRUPT
            i1_PS_2_ENABLE_INTERRUPT
                    i1_READ_PS_2_PIN
                        i1_ReadUSART
                         i1_Timer2ON
                         i1_UARTchar
 ---------------------------------------------------------------------------------
 (6) i1_Timer2ON                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) i1_PS_2_ENABLE_INTERRUPT                              1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Timer2Reset                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Timer2OFF                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _ResendLast                                           0     0      0    1271
           i1_PS_2_DISABLE_INTERRUPT
                         i1_Send_PS2
 ---------------------------------------------------------------------------------
 (6) i1_PS_2_DISABLE_INTERRUPT                             2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _Process_PS2_ScanCode                                72    72      0   17282
                                             28 BANK1      6     6      0
                                              0 BANK3     66    66      0
                    _BufferShiftBack
                   _Decode_Scan_Code
          _Decode_Scan_Code_Function
        _Decode_Scan_Code_FunctionE0
             _Decode_Scan_Code_Shift
                           _ISNUMBER
                            _SetBaud
                    _UART_send_break
              _UART_send_break_timed
                             ___lmul
                        _cleanBuffer
                            _sprintf
                         i1_Send_PS2
                         i1_UARTchar
                   i1_UARTstringWAIT
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (7) i1_Send_PS2                                           9     9      0    1249
                                             10 COMMON     4     4      0
                                              0 BANK0      5     5      0
                    i1_CheckSum_byte
                       i1_Clock_TRIS
                        i1_Data_TRIS
                    i1_READ_PS_2_PIN
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (6) i1_READ_PS_2_PIN                                      1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_Data_TRIS                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_Clock_TRIS                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _cleanBuffer                                          5     3      2     193
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (7) ___lmul                                              12     4      8     220
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (6) _UART_send_break_timed                                3     1      2     632
                                             10 COMMON     3     1      2
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (7) _UART_send_break                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _SetBaud                                             76    71      5    7684
                                             15 BANK1     13     8      5
                                              0 BANK2     63    63      0
                          _WriteBaud
                            _sprintf
                         i1_InitUART
                         i1_ReadBaud
                   i1_UARTstringWAIT
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (7) i1_UARTstringWAIT                                     5     3      2    2145
                                              1 BANK0      5     3      2
                         i1_UARTchar
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (6) i1_UARTchar                                           7     5      2     999
                                              8 COMMON     6     4      2
                                              0 BANK0      1     1      0
                    i1_CheckSum_byte
 ---------------------------------------------------------------------------------
 (8) i1_ReadBaud                                          16    12      4     528
                                              4 BANK0     16    12      4
                  i1_ReadFlash_4Byte
 ---------------------------------------------------------------------------------
 (9) i1_ReadFlash_4Byte                                   13     9      4     387
                                              5 COMMON     9     5      4
                                              0 BANK0      4     4      0
                  i1_ReadFlash_2Byte
 ---------------------------------------------------------------------------------
 (8) i1_InitUART                                          21    16      5     822
                                              0 BANK0     21    16      5
                       i1_CloseUSART
                        i1_OpenUSART
                        i1_ReadUSART
                          i1___lldiv
                        i1_baudUSART
 ---------------------------------------------------------------------------------
 (9) i1_baudUSART                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) i1_ReadUSART                                          2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) i1_OpenUSART                                          3     1      2     246
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (9) i1_CloseUSART                                         1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _sprintf                                             30    24      6    1181
                                             10 BANK0     22    16      6
                            ___llmod
                          i1___lldiv
 ---------------------------------------------------------------------------------
 (8) i1___lldiv                                           14     6      8     266
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (8) ___llmod                                             10     2      8     287
                                              0 BANK0     10     2      8
                          i1___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (8) _WriteBaud                                           19    12      7    1876
                                             74 BANK0      4     4      0
                                              0 BANK1     15     8      7
              _WriteFlash_Sequential
 ---------------------------------------------------------------------------------
 (9) _WriteFlash_Sequential                               78    74      4    1573
                                             10 COMMON     4     0      4
                                              0 BANK0     74    74      0
                         _BlockErase
                             _UNLOCK
                  i1_ReadFlash_2Byte
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (7) i1_delayUS                                           10     6      4     482
                                              0 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (10) i1_ReadFlash_2Byte                                   5     2      3     222
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (10) _BlockErase                                          4     2      2     108
                                              0 COMMON     4     2      2
                             _UNLOCK
 ---------------------------------------------------------------------------------
 (10) _UNLOCK                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _ISNUMBER                                             1     1      0      44
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code_Shift                               1     1      0      45
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code_FunctionE0                          1     1      0      45
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code_Function                            1     1      0      44
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code                                     1     1      0      45
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _BufferShiftBack                                      8     6      2    1473
                                              0 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 (6) _PS2RawToScan                                        13    11      2     753
                                              8 COMMON     4     2      2
                                              0 BANK0      9     9      0
                       _Reverse_Byte
                    i1_CheckSum_byte
 ---------------------------------------------------------------------------------
 (7) i1_CheckSum_byte                                      8     5      3     369
                                              0 COMMON     8     5      3
 ---------------------------------------------------------------------------------
 (7) _Reverse_Byte                                         4     4      0     207
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _Init_System
     _InitUART
       _CloseUSART
       _OpenUSART
       _ReadUSART
       ___lldiv
       _baudUSART
     _ReadBaud
       _ReadFlash_4Byte
         _ReadFlash_2Byte
     _UARTstringWAIT
       _UARTchar
         _CheckSum_byte
       _delayUS
     _delayUS
   _PS_2_ENABLE_INTERRUPT
   _PS_2_INIT
     _Clock_TRIS
     _Data_TRIS
     _Init_PS_2_Send
       _PS_2_DISABLE_INTERRUPT
       _Send_PS2
         _CheckSum_byte
         _Clock_TRIS
         _Data_TRIS
         _READ_PS_2_PIN
         _delayUS
       _delayUS
     _Timer2Init
       _Timer2ON
   _ReadVoltage
     _DisableInternalADC
     _InternalADC_Read
       _delayUS
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _UARTstringWAIT
     _UARTchar
       _CheckSum_byte
     _delayUS
   ___ftge
   _delayUS

 _isr (ROOT)
   _PS2RawToScan
     _Reverse_Byte
     i1_CheckSum_byte
   _Process_PS2_ScanCode
     _BufferShiftBack
     _Decode_Scan_Code
     _Decode_Scan_Code_Function
     _Decode_Scan_Code_FunctionE0
     _Decode_Scan_Code_Shift
     _ISNUMBER
     _SetBaud
       _WriteBaud
         _WriteFlash_Sequential
           _BlockErase
             _UNLOCK
           _UNLOCK
           i1_ReadFlash_2Byte
           i1_delayUS
       _sprintf
         ___llmod
           i1___lldiv (ARG)
         i1___lldiv
       i1_InitUART
         i1_CloseUSART
         i1_OpenUSART
         i1_ReadUSART
         i1___lldiv
         i1_baudUSART
       i1_ReadBaud
         i1_ReadFlash_4Byte
           i1_ReadFlash_2Byte
       i1_UARTstringWAIT
         i1_UARTchar
           i1_CheckSum_byte
         i1_delayUS
       i1_delayUS
     _UART_send_break
     _UART_send_break_timed
       i1_delayUS
     ___lmul
     _cleanBuffer
     _sprintf
       ___llmod
         i1___lldiv (ARG)
       i1___lldiv
     i1_Send_PS2
       i1_CheckSum_byte
       i1_Clock_TRIS
       i1_Data_TRIS
       i1_READ_PS_2_PIN
       i1_delayUS
     i1_UARTchar
       i1_CheckSum_byte
     i1_UARTstringWAIT
       i1_UARTchar
         i1_CheckSum_byte
       i1_delayUS
     i1_delayUS
   _ResendLast
     i1_PS_2_DISABLE_INTERRUPT
     i1_Send_PS2
       i1_CheckSum_byte
       i1_Clock_TRIS
       i1_Data_TRIS
       i1_READ_PS_2_PIN
       i1_delayUS
   _Timer2OFF
   _Timer2Reset
   _UART_send_break_timed
     i1_delayUS
   i1_PS_2_DISABLE_INTERRUPT
   i1_PS_2_ENABLE_INTERRUPT
   i1_READ_PS_2_PIN
   i1_ReadUSART
   i1_Timer2ON
   i1_UARTchar
     i1_CheckSum_byte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     26      49       7       91.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     3F      3F       9       78.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50     42      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50     37      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     17B      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     17B      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Mar 11 18:19:09 2015

                     _BufferShiftBack 1CBC                _PS_2_DISABLE_INTERRUPT 199C  
             Process_PS2_ScanCode@buf 01A0                            __CFG_CP$ON 0000  
                   ??_ReadFlash_2Byte 0223                     ??_ReadFlash_4Byte 0229  
                                   _i 00D8                        _ResendLastFlag 00D6  
            Process_PS2_ScanCode@temp 01E1                  i1InitUART@baudconfig 002F  
                  Data_TRIS@direction 0220                           __CFG_LVP$ON 0000  
                                 l170 1629                                   l411 1D18  
                                 l415 1D27                                   l431 1EFF  
                                 l417 1D31                                   l281 1C30  
                                 l273 0B4F                                   l290 1B44  
                                 l178 16DB                                   l428 1EE1  
                                 l429 1EE4                                   l614 18EE  
                                 l287 1B27                                   l279 1C17  
                                 l456 1BAA                                   l289 1B2D  
                                 l458 1BC8                                   l634 1911  
                                 l619 18F9                                   l639 19BC  
                                 l940 1B9D                                   l852 0ED9  
                                 l853 0F2E                                   _MEM 00E5  
                                 _PR2 001B                                   _isr 0004  
                _Process_PS2_ScanCode 0121                           i1_baudUSART 187F  
             i1ReadFlash_4Byte@column 0077                          __CFG_BORV$LO 0000  
                                 wreg 0009            __size_ofi1_ReadFlash_2Byte 0028  
          __size_ofi1_ReadFlash_4Byte 004D            __end_of_ScanCodeFunctionE0 08D3  
             UART_send_break_timed@US 007A                          ___ftdiv@cntr 0236  
                        ___ftdiv@sign 023B                                  l1022 1CB2  
                                l1019 1C8D                                  l1251 1180  
                                l1258 1193                                  l1259 119B  
                                l7000 16DF                                  l7004 16E3  
                                l6230 1B42                                  l6222 1B3A  
                                l7014 16F7                                  l6312 1D12  
                                l6304 1D07                                  l6240 1B48  
                                l6208 1C3A                                  l6330 1D33  
                                l6322 1D1F                                  l6410 0F33  
                                l6402 0F08                                  l7018 1704  
                                l6316 1D1A                                  l6308 1D0D  
                                l6412 0F39                                  l6404 0F25  
                                l6326 1D29                                  l6182 19BA  
                                l6422 0F3C                                  l6510 1167  
                                l6600 1469                                  l6264 19A8  
                                l6192 19C1                                  l6424 0F58  
                                l6520 1191                                  l6512 116C  
                                l6504 1156                                  l6282 1EC0  
                                l6290 1EF4                                  l6450 0F9A  
                                l6434 0F5B                                  l6522 1185  
                                l6540 1F78                                  l6284 1EC9  
                                l6460 0F9D                                  l6436 0F77  
                                l6508 115D                                  l6462 0FB9  
                                l6390 0EE9                                  l6366 0EB6  
                                l6552 1FA3                                  l6288 1EE7  
                                l6472 0FBC                                  l6448 0F7E  
                                l6392 0F05                                  l6376 0EDE  
                                l6368 0ED3                                  l6538 1F6A  
                                l6562 1BCB                                  l6474 0FD8  
                                l6378 0EE4                                  l6722 1245  
                                l6812 197A                                  l6548 1F98  
                                l6900 0B36                                  l6484 0FDB  
                                l6716 122F                                  ?_isr 0070  
      __size_of_PS_2_ENABLE_INTERRUPT 000C                                  l6814 1980  
                                l6486 0FF7                                  l6904 0B3B  
                                l6744 129F                                  l6736 1286  
                                l6906 0B48                                  l6930 1119  
                                l6780 1331                                  l6764 12EE  
                                l6940 1C5A                                  l6598 1465  
                                l6862 0AA0                                  l6758 12D8  
                                l6926 110B                                  l6864 0AAB  
                                l6792 134D                                  l6776 1329  
                                l6944 1C70                                  _BAUD 0261  
                                l6868 0AB4                                  l6788 1345  
                                l6980 1652                                  l6894 0B28  
                                l6896 0B2C                                  l6992 16A2  
                                l6984 167A                                  l6898 0B31  
                                l6988 169C                   _PS_2_Read_Data_TEMP 00CA  
                                _ECHO 025F                                  STR_1 0A3A  
                                STR_2 0A32                                  STR_3 0990  
                                STR_4 0A13                                  STR_5 09FD  
                                STR_6 096F                                  STR_7 09FD  
                                STR_8 09FD                                  STR_9 09FD  
                                _LATA 010C                                  _LATC 010E  
                                _LALT 01EA         __end_of_PS_2_ENABLE_INTERRUPT 1914  
                                _PIE1 0091                                  i1l81 0073  
                                i1l90 00C7                                  i1l91 0094  
                                i1l85 0059                                  i1l88 0080  
                                _RALT 01ED                                  u8305 118C  
                                u8235 1E37                                  u8405 1F8D  
                                u8415 1F99                                  u8505 1A7E  
                                u8345 11A2                                  u8265 1162  
                                u7805 1B2E                                  u8605 1C93  
                                u8285 117B                                  u8375 1F6D  
                                u8465 10AF                                  u8395 1F79  
                                u8475 10D2                                  u7773 1C29  
                                u8645 1257                                  u8805 1354  
                                u8725 12FA                                  u8495 149B  
                                u8655 1267                                  u8735 130A  
                                u8665 1287                                  u8905 1106  
                                u7875 1B94                                  u8675 1296  
                                u8755 1332                                  u8685 12A0  
                                u8765 1338                                  u8925 1115  
                                u8855 0A89                                  u8795 134E  
                                _TMR2 001A                                  _WPUA 020C  
                                _WPUC 020E                            i1delayUS@i 0075  
                          i1delayUS@j 0079                          __CFG_WRT$OFF 0000  
    __size_ofi1_PS_2_ENABLE_INTERRUPT 000B                     i1___lldiv@divisor 0070  
                                _main 1615                    UARTstringWAIT@data 022F  
                        ___ftpack@arg 0220                          ___ftpack@exp 0223  
                                fsr0h 0005                                  fsr1h 0007  
                                fsr0l 0004                                  indf0 0000  
                                indf1 0001                                  fsr1l 0006  
                                btemp 007E                     i1___lldiv@counter 007D  
                 baudUSART@baudconfig 0220                         __CFG_BOREN$ON 0000  
                                ltemp 007E                     SetBaud@Paritytemp 0156  
                    i1_UARTstringWAIT 1B4A                                  start 00ED  
                                ttemp 007E                                  wtemp 007E  
                       __CFG_IESO$OFF 0000                      Reverse_Byte@This 0073  
           WriteFlash_Sequential@temp 0066                      Reverse_Byte@temp 0072  
                       __CFG_MCLRE$ON 0000                            _BlockErase 1A3C  
                        ___ftmul@cntr 024A                           ?i1_UARTchar 0078  
             ?_Decode_Scan_Code_Shift 0070                          ___ftmul@sign 024B  
                     __end_of_InitApp 1A14                       __end_of_SetBaud 0CDE  
                          _Clock_TRIS 18E6                         ??_Init_System 0243  
              __size_of_READ_PS_2_PIN 0014                                 ??_isr 006E  
                 _Right_Shift_Key_old 00D7                        _Init_PS_2_Send 0682  
                   ??i1_READ_PS_2_PIN 0070     i1UARTchar@NinethBit_override_data 0079  
     UARTchar@NinethBit_override_data 0229             _Decode_Scan_Code_Function 0A41  
                         ReadBaud@row 0232       WriteFlash_Sequential@amountTemp 0065  
                     __end_of_Version 096F                         ??_ReadVoltage 024F  
                          _CloseUSART 06F2                                 ?_main 0070  
            __size_ofi1_CheckSum_byte 002E                                 STR_10 09C4  
                               STR_11 0A26                                 STR_12 09FD  
                               STR_20 09D9                                 STR_13 09FD  
                               STR_14 09ED                                 STR_15 0A00  
                               STR_16 09FD                                 STR_17 09FD  
                       __CFG_WDTE$OFF 0000                                 STR_18 09AC  
                               STR_19 09FD                       __end_of___ftdiv 12C1  
                    __end_of_ISNUMBER 1921                       __end_of___lldiv 1FAC  
                     __end_of___ftmul 1375                                 _CKPPS 0E25  
                     __end_of___llmod 1D81                                 _T2CON 001C  
                               _IOCAF 0393                                 _IOCAN 0392  
                               _IOCAP 0391                                 i1l101 00E9  
                               i1l411 1AA2                                 i1l415 1AAC  
                               i1l431 1E13                                 i1l281 1BFC  
                               i1l417 1AB5                                 i1l290 1AE6  
                               i1l428 1DF7                                 i1l429 1DFA  
                               i1l614 18B9                                 i1l287 1AC9  
                               i1l279 1BE3                                 i1l456 1B4A  
                               i1l704 02A1                                 i1l289 1ACF  
                               i1l458 1B67                                 i1l634 18E3  
                               i1l619 18C3                                 i1l468 0C55  
                               i1l820 0628                                 i1l477 0CCB  
                               i1l639 1995                                 i1l736 0418  
                               i1l940 1A32                                 i1l852 0D47  
                               i1l853 0D9B                                 i1l949 18D6  
                               i1l797 055E        __size_of_UART_send_break_timed 0025  
                               _RCREG 0199                 ?_Process_PS2_ScanCode 0070  
                               _RCSTA 019D                                 _SPBRG 019B  
       __end_of_UART_send_break_timed 1025                  _PS_2_Read_Data_First 01E2  
                               _PORTA 000C                          InitUART@Baud 022E  
                               _RXPPS 0E24                                 _TXREG 019A  
                 _ConfigureOscillator 1977                                 _Alarm 025E  
                _PS_2_Read_Data_Third 01E6                       __end_of_delayUS 1C43  
                    _InternalADC_Read 1C7F                           i1delayUS@US 0070  
                 ___lmul@multiplicand 0074                        __CFG_FCMEN$OFF 0000  
                        InitUART@temp 023F                 _WriteFlash_Sequential 1375  
                  i1___lldiv@dividend 0074                 ReadFlash_2Byte@column 0222  
                    __end_of_UARTchar 1F07                            SetBaud@buf 0120  
                     __end_of_dpowers 08FB                           ?i1_InitUART 0020  
                         ?i1_ReadBaud 0024                         ___ftpack@sign 0224  
                  __size_of_PS_2_INIT 000F                                 main@i 0256  
                               isr@rx 00C4                                 ltemp0 007E  
                               ltemp1 0082                                 ltemp2 0086  
                               ltemp3 0080                           ?i1_Send_PS2 0070  
             InternalADC_Read@channel 022E                                 ttemp0 007E  
                               ttemp1 0081                                 ttemp2 0084  
                               ttemp3 0087                                 ttemp4 007F  
                               status 0003               __end_of_BufferShiftBack 1CFD  
                               wtemp0 007E                                 wtemp1 0080  
                               wtemp2 0082                                 wtemp3 0084  
                               wtemp4 0086                                 wtemp5 0088  
                               wtemp6 007F                       __end_of_sprintf 1800  
                         isr@ScanTemp 00C5                    __size_ofi1___lldiv 0052  
                __size_of_cleanBuffer 0018                           ?i1_Timer2ON 0070  
                ?_ConfigureOscillator 0070        __end_of_Decode_Scan_Code_Shift 1977  
                       _ScanCodeSHIFT 07F5                    __size_ofi1_delayUS 0033  
                     _UART_send_break 187A                       __initialization 00EF  
              __end_of_Init_PS_2_Send 06F2                   __end_of_NoParityMSG 093A  
                  __size_of_Data_TRIS 000B                          __end_of_main 170A  
                    __end_of_InitUART 1526                      ??_UARTstringWAIT 0231  
                         isr@Rx_fault 00C2                      __end_of_ReadBaud 10E9  
                  i1___lldiv@quotient 0079            __end_of_DisableInternalADC 1898  
                      _SpaceParityMSG 093A                      __end_of_ScanCode 07F5  
                      __CFG_LPBOR$OFF 0000                      __end_of_Send_PS2 1000  
                              ??_main 0255          __end_of_ScanCodeFunctionNoE0 0784  
                      __CFG_PLLEN$OFF 0000                      __end_of_Timer2ON 1872  
                 __end_of_Init_System 0B65                          ReadBaud@temp 023E  
                    i1CheckSum_byte@i 0077                        i1InitUART@Baud 0020  
                        ?i1_Data_TRIS 0070                      BufferShiftBack@i 0076  
       Decode_Scan_Code_Function@Code 0070                   __end_of_ReadVoltage 114D  
               ReadFlash_4Byte@column 0227                                _ADCON0 009D  
                              _ADCON1 009E                                _ADCON2 009F  
                 __size_ofi1_UARTchar 004D                      ___llmod@dividend 0024  
                              _ADRESH 009C                                _ADRESL 009B  
                      i1InitUART@temp 0031                         _READ_PS_2_PIN 19AF  
                      __CFG_ZCDDIS$ON 0000                                _ANSELA 018C  
                              _ANSELC 018E                      __end_of___ftpack 11B2  
                              _HFIOFS 04D0                                _RC1STA 019D  
                              _RC2PPS 0EA2                                i1l1073 1735  
                              i1l1076 1753                                i1l4020 137C  
                              i1l4022 13CE                                i1l4014 13B9  
                              i1l4008 13A0                                i1l4104 1AA3  
                              i1l4114 1AAE                                i1l4052 1416  
                              i1l4132 1DD7                                i1l4140 1E0A  
                              i1l5012 1AF4                                i1l4054 143A  
                              i1l4070 1D6D                                i1l4310 17A6  
                              i1l4118 1AB6                                i1l4134 1DE1  
                              i1l4064 1D47                                i1l4304 1779  
                              i1l4320 1710                                i1l5016 1AFE  
                              i1l4066 1D55                                i1l4074 1D78  
                              i1l4322 17FA                                i1l4138 1DFD  
                              i1l4180 1F50                                i1l5220 0DE3  
                              i1l5124 193B                                i1l4166 1F17  
                              i1l4318 17AB                                i1l5206 0DA8  
                              i1l5150 0D24                                i1l6030 00A7  
                              i1l4176 1F45                                i1l4168 1F25  
                              i1l4096 1A9C                                i1l5232 0DEA  
                              i1l5208 0DC4                                i1l5160 0D4C  
                              i1l5152 0D41                                i1l5400 0220  
                              i1l6024 009A                                i1l4282 1733  
                              i1l5234 0E06                                i1l5218 0DC7  
                              i1l5162 0D51                                i1l4284 1737  
                              i1l4612 1B6A                                i1l5244 0E09  
                              i1l5404 022B                                i1l5340 019F  
                              i1l5316 0155                                i1l6060 00E2  
                              i1l6036 00B6                                i1l4294 1762  
                              i1l5270 0E63                                i1l5246 0E25  
                              i1l5174 0D56                                i1l5510 031F  
                              i1l5414 0241                                i1l6038 00C2  
                              i1l4288 173C                                i1l4632 1993  
                              i1l5256 0E28                                i1l5176 0D72  
                              i1l5520 0340                                i1l5512 030D  
                              i1l5424 0258                                i1l5440 0279  
                              i1l5344 01A4                                i1l5328 017E  
                              i1l5282 1EAF                                i1l4642 199A  
                              i1l5258 0E44                                i1l5194 0DA0  
                              i1l5186 0D75                                i1l5610 0402  
                              i1l5530 034D                                i1l5522 0328  
                              i1l5514 0326                                i1l5450 028F  
                              i1l5426 0246                                i1l6058 00DF  
                              i1l5284 1EB1                                i1l4820 1CF8  
                              i1l3860 1C05                                i1l4564 1554  
                              i1l4804 19DB                                i1l5268 0E47  
                              i1l5196 0DA5                                i1l5188 0D92  
                              i1l5524 032E                                i1l5436 0272  
                              i1l5428 025F                                i1l5444 0281  
                              i1l5372 01E9                                i1l5380 01FA  
                              i1l5348 01A9                                i1l4822 1CC3  
                              i1l4566 1558                                i1l5710 050E  
                              i1l5630 042E                                i1l5534 0356  
                              i1l5526 0343                                i1l5622 0425  
                              i1l5454 0298                                i1l5438 0260  
                              i1l5358 01C6                                i1l5704 04FB  
                              i1l5560 038C                                i1l5472 02B6  
                              i1l5464 02AB                                i1l5392 0212  
                              i1l5376 01F1                                i1l3882 1AE4  
                              i1l3874 1ADC                                i1l4818 1CF1  
                              i1l4850 0C3C                                i1l5570 038D  
                              i1l5538 035F                                i1l5490 02F2  
                              i1l3892 1AEA                                i1l5740 0593  
                              i1l5732 057D                                i1l5724 0567  
                              i1l5556 0385                                i1l5572 03A9  
                              i1l5396 021A                                i1l5388 020B  
                              i1l5476 02D6                                i1l5804 0677  
                              i1l4854 0C4F                                i1l5718 0555  
                              i1l5638 0439                                i1l5582 03BF  
                              i1l5566 039F                                i1l5558 0373  
                              i1l5494 02F9                                i1l5486 02EB  
                              i1l4880 0CAC                                i1l5744 059C  
                              i1l5736 0586                                i1l5728 0570  
                              i1l5672 04C8                                i1l5592 03D9  
                              i1l5584 03AD                                i1l5568 03A2  
                              i1l5808 0128                                i1l4970 1951  
                              i1l4946 1963                                i1l4794 191F  
                              i1l4882 0CB1                                i1l5770 0609  
                              i1l5690 04E2                                i1l5658 048D  
                              i1l5682 04D0                                i1l5594 03DD  
                              i1l5586 03C6                                i1l5498 0301  
                              i1l4876 0CA2                                i1l4868 0C7C  
                              i1l5772 060E                                i1l5756 05CE  
                              i1l5748 05A9                                i1l5596 03C7  
                              i1l4982 0A4F                                i1l4958 1975  
                              i1l4878 0CA7                                i1l4886 0CB6  
                              i1l5766 05FF                                i1l5782 0643  
                              i1l5598 03E4                                i1l4888 0CC3  
                              i1l5768 0604                                i1l5776 0613  
                              i1l5786 0656                                i1l5778 0620  
                              i1l5698 04EF                                i1l5788 0658  
                              i1l5984 002F                                i1l5996 005B  
                              i1l5998 005E                                _INTCON 000B  
                              _FVRCON 0117                                u420_25 140D  
                              _PARITY 0260                                u423_25 1D4A  
                              u511_25 158A                                _PMADRH 0192  
                              u520_25 104D                                _PMADRL 0191  
                              u425_25 1D63                                u441_25 1F1A  
                              u521_25 1070                      __end_of___lwtoft 19D8  
                              _PMDATH 0194                                u530_25 1FBE  
                              u610_25 1E93                                u426_25 1D6E  
                              _PMDATL 0193                                u531_25 1FCA  
                              u443_25 1F26                                _PMCON1 0195  
                              _PMCON2 0196                                u532_25 1FE0  
                              u460_25 11FD                                u444_25 1F3A  
                              u533_25 1FEB                                u445_25 1F46  
                              u541_25 0BC0                                u534_25 1FF6  
                              u542_25 0C1D                    __size_of_ReadUSART 000A  
                              u391_23 1BF5                                u439_25 1D9C  
                              u543_25 0C3A                                u464_25 179C  
                              u529_25 1FB2                                u537_25 19E2  
                              _OSCCON 0099                                u394_25 1AD0  
                              u539_25 1CDD                                u459_25 11BA  
                              u388_25 1A56                                u564_25 1AFF  
                              u565_25 1B06                                u399_25 1A2A  
                              u743_25 001E                                _SPBRGH 019C  
                              _TX1STA 019E                                _UNLOCK 18D0  
                __end_of_OddParityMSG 0926                            _ResendLast 1898  
               _PS_2_Read_Data_Second 01E4                             ??_InitApp 0220  
               ??_ConfigureOscillator 0220                                _Delete 00CF  
                    i1OpenUSART@spbrg 0070                        __CFG_PWRTE$OFF 0000  
                           ??_SetBaud 00B4                         ??_Timer2Reset 0070  
                          _Timer2Init 1A67                           ?_BlockErase 0070  
                       InitUART@spbrg 023B                           SetBaud@Baud 00AF  
                  __size_of_OpenUSART 0041                       ?_Init_PS_2_Send 0070  
                              ___ftge 1C43                __end_of_SpaceParityMSG 094A  
                   ?_Decode_Scan_Code 0070                                ___lmul 1AEC  
                      __CFG_STVREN$ON 0000                             ??___ftdiv 0232  
                           ??___lldiv 0228                           ?_Clock_TRIS 0070  
                           ??___ftmul 0242                             ??___llmod 0028  
                         SetBaud@temp 015A                   __size_ofi1_InitUART 00EF  
                   __end_of_PS_2_INIT 1930                   __size_ofi1_ReadBaud 0062  
                  ??_Decode_Scan_Code 0070                          ?i1_ReadUSART 0070  
                           ??_delayUS 0224  __size_of_Decode_Scan_Code_FunctionE0 0012  
                  __size_of_Timer2OFF 0003                           ?_CloseUSART 0070  
              ??_Process_PS2_ScanCode 00BC                   __size_ofi1_Send_PS2 018E  
               ___ftmul@f3_as_product 0247                     __end_ofi1___lldiv 1F59  
              ?_WriteFlash_Sequential 007A                   __size_ofi1_Timer2ON 0003  
                   __end_ofi1_delayUS 1C0E                       SetBaud@Baudtemp 0152  
                        ?i1_OpenUSART 0070                __size_of_CheckSum_byte 002F  
                   ??i1_CheckSum_byte 0073                        ?_READ_PS_2_PIN 0070  
                   __end_of_Data_TRIS 18FC                             ??_sprintf 0030  
                      i1ReadBaud@temp 0030               i1READ_PS_2_PIN@DATA_CLK 0070  
             i1_PS_2_ENABLE_INTERRUPT 18DB               __end_of_UART_send_break 187F  
                     _ReadFlash_2Byte 1B7A                       _ReadFlash_4Byte 1E1B  
             __end_of__initialization 011E                   Timer2Init@prescaler 0224  
                         _NoParityMSG 0926                    __size_of_WriteBaud 0066  
                    ?_BufferShiftBack 0070                            ___ftge@ff1 0220  
                          ___ftge@ff2 0223               ?_PS_2_DISABLE_INTERRUPT 0070  
                          ___ftdiv@f1 022F                            ___ftdiv@f2 022C  
                          ___ftdiv@f3 0237                            _VoltageMSG 0959  
                           ?_ISNUMBER 0070                    __size_of_baudUSART 0009  
                          ___ftmul@f1 023C                            ___ftmul@f2 023F  
                      __pcstackCOMMON 0070                          __pidataBANK1 1876  
                        __pidataBANK4 1872                             ?_UARTchar 0228  
                       ?_PS2RawToScan 0078                          isr@Rx_Overun 00C3  
                  InitUART@baudconfig 023D                           _Init_System 0A51  
                 __end_of_Timer2Reset 186C                     __end_of_ReadUSART 18D0  
                          ___lwtoft@c 0228                           _ReadVoltage 10E9  
                     ReadVoltage@temp 0253                          WriteBaud@row 00A0  
            __end_ofi1_UARTstringWAIT 1B7A                        _OPTION_REGbits 0095  
                 ReadFlash_4Byte@temp 022E                          ?i1_baudUSART 0070  
      Process_PS2_ScanCode@shortbreak 01E0                         ReadUSART@data 0221  
                         _SinLEDtimer 025A    __size_of_Decode_Scan_Code_Function 0010  
                   __end_of_OpenUSART 1D3E                   __size_of_BlockErase 002B  
                     WriteBaud@Parity 00A6                     Send_PS2@oddparity 022E  
                          __pbssBANK1 00C6                            __pbssBANK3 01E2  
                          __pbssBANK4 0257                   __size_of_Clock_TRIS 000B  
                           ?_InitUART 022E                             ?_ReadBaud 0232  
                   __end_of_Timer2OFF 1869        __end_of_PS_2_DISABLE_INTERRUPT 19AF  
                  ReadVoltage@voltage 0250                               ?_UNLOCK 0070  
                         ?_ResendLast 0070                       i1_READ_PS_2_PIN 1989  
                 __size_of_CloseUSART 000E                             ?_Send_PS2 0070  
                          ??_ISNUMBER 0070                  _ScanCodeFunctionNoE0 0700  
            __end_of_InternalADC_Read 1CBC     __size_ofi1_PS_2_DISABLE_INTERRUPT 0011  
                         ?_Timer2Init 0070                    _ScanCodeFunctionE0 0866  
                           ?_Timer2ON 0070             ?i1_PS_2_DISABLE_INTERRUPT 0070  
                       _CheckSum_byte 1B1B                            __pmaintext 1615  
                        ??i1_UARTchar 007A                           _ParityTyped 01EC  
                       BlockErase@row 0070                               ?___ftge 0220  
                             ?___lmul 0070                   i1CheckSum_byte@This 0070  
                      ??_PS2RawToScan 0020                         _Caps_Lock_Key 00CD  
                       ?_Reverse_Byte 0070                            __pintentry 0004  
                          ??_UARTchar 022A                        ___lmul@product 0078  
                           ?___ftpack 0220                       i1InitUART@spbrg 002D  
                   _PS_2_Buffer_items 00D3                 i1CheckSum_byte@Parity 0076  
                           ?___lwtoft 0228                     __end_of_WriteBaud 1218  
                     ??_READ_PS_2_PIN 0220                   BufferShiftBack@size 0071  
                   __end_of_baudUSART 18B2               __end_of_ReadFlash_2Byte 1BAA  
             __end_of_ReadFlash_4Byte 1E68                               _OSCSTAT 009A  
                 Clock_TRIS@direction 0220             ??i1_PS_2_ENABLE_INTERRUPT 0070  
                             _PPSLOCK 0E0F                          ??i1_InitUART 0025  
                i1ReadFlash_2Byte@row 0070                          ??i1_ReadBaud 0028  
                       ?i1_Clock_TRIS 0070                    __end_ofi1_UARTchar 1E1B  
                __size_ofi1_Data_TRIS 000A                     i1OpenUSART@config 0072  
                i1ReadFlash_4Byte@row 0075                            ??_InitUART 0233  
                          ??_ReadBaud 0236                          ??i1_Send_PS2 007A  
               READ_PS_2_PIN@DATA_CLK 0220                      ?_UART_send_break 0070  
                       ?i1_CloseUSART 0070                 _PS_2_ENABLE_INTERRUPT 1908  
                     __size_of_UNLOCK 000B                          ??i1_Timer2ON 0070  
                             _InitApp 19F0                            ??_Send_PS2 022A  
                             _SetBaud 0B65                        InitUART@config 023E  
                      ?_CheckSum_byte 0220                           _Timer2Reset 1869  
     i1PS_2_ENABLE_INTERRUPT@DATA_CLK 0070                            ??_Timer2ON 0220  
                      InitUART@parity 0232               i1CheckSum_byte@Odd_Even 0072  
                      ??_Reverse_Byte 0070                               _Version 0966  
                     __size_of___ftge 003C                       __size_of___lmul 002F  
                             ___ftdiv 1218                               ___lldiv 1F59  
                             ___ftmul 12C1                               ___llmod 1D3E  
                   i1Send_PS2@command 0021                    __end_ofi1_InitUART 1615  
                             _delayUS 1C0E                    __end_ofi1_ReadBaud 1087  
                          ??___ftpack 0225                               __ptext1 1C43  
                             __ptext2 10E9                               __ptext3 19C3  
                             __ptext4 12C1                               __ptext5 1218  
                             __ptext6 114D                               __ptext7 1C7F  
                             __ptext8 1891                               __ptext9 1921  
                          ??___lwtoft 022B                  __size_ofi1_ReadUSART 0009  
                        _OddParityMSG 0911                               _dpowers 08D3  
                  __end_ofi1_Send_PS2 0E6C                   __size_of_ResendLast 0008  
                           _T2CONbits 001C               i1CheckSum_byte@ThisTemp 0074  
                        __size_of_isr 00E9                     i1Send_PS2@timeout 0023  
            _Process_PS2_ScanCode$850 01DD              _Process_PS2_ScanCode$851 01DE  
            _Process_PS2_ScanCode$852 01DF              _Process_PS2_ScanCode$849 01DC  
         WriteFlash_Sequential@amount 007D           WriteFlash_Sequential@buffer 007C  
                  __end_ofi1_Timer2ON 186F                 _UART_send_break_timed 1000  
                 __size_of_Timer2Init 002B                    _DisableInternalADC 1891  
         WriteFlash_Sequential@spaces 0068                        ??i1_Clock_TRIS 0070  
             __end_ofi1_READ_PS_2_PIN 199C                               _sprintf 170A  
                             clrloop0 188C                     _Caps_Lock_Key_old 00CE  
                __size_ofi1_OpenUSART 002C                  end_of_initialization 011E  
                       ??_cleanBuffer 0072                        ??i1_CloseUSART 0070  
               BufferShiftBack@buffer 0077                       i1ReadUSART@data 0071  
                             init_ram 1885                   ?_DisableInternalADC 0070  
                             initloop 1886                      UARTchar@override 0228  
                    ??_Init_PS_2_Send 0233          ?_Decode_Scan_Code_FunctionE0 0070  
                     ___lldiv@divisor 0220                       ___lldiv@counter 022D  
                        ??_BlockErase 0072                             _RCSTAbits 019D  
                        ??_Clock_TRIS 0220                          __pstringtext 0700  
               __end_of_EvenParityMSG 0911                       i1_CheckSum_byte 1ABE  
             ??_WriteFlash_Sequential 0020                          ??_CloseUSART 0220  
                ??_DisableInternalADC 0220                             _PS_2_INIT 1921  
                    __CFG_FOSC$INTOSC 0000                             _PS_2_bits 00D4  
                           _TRISAbits 008C                             _TRISCbits 008E  
           __size_of_Decode_Scan_Code 0012                      ?_ReadFlash_2Byte 0220  
                    ?_ReadFlash_4Byte 0225                  __size_ofi1_baudUSART 0006  
                           i1___lldiv 1F07                 __end_of_MarkParityMSG 0959  
                  __end_of_BlockErase 1A67           __end_of_ConfigureOscillator 1989  
                __end_of_PS2RawToScan 1EB6                             i1_delayUS 1BDB  
              ?_PS_2_ENABLE_INTERRUPT 0070                    __end_of_Clock_TRIS 18F1  
                           _BaudTyped 00C6                             _Data_TRIS 18F1  
                           _CapsCount 01E8                 i1baudUSART@baudconfig 0070  
                         ___ftdiv@exp 023A                             _Caps_Lock 01E9  
                     ??_CheckSum_byte 0223                           _CCP2CONbits 029A  
                           _TXSTAbits 019E                        __end_of_UNLOCK 18DB  
                  __end_of_CloseUSART 0700                  Timer2Init@postscaler 0223  
                 __end_of_cleanBuffer 19F0         ??_Decode_Scan_Code_FunctionE0 0070  
                         ___ftmul@exp 0246                     __size_of_ISNUMBER 000D  
                      __end_of___ftge 1C7F                 CheckSum_byte@Odd_Even 0222  
                        ?_Init_System 0070                        __end_of___lmul 1B1B  
                        _LineOverride 00D2                     __size_of_UARTchar 0051  
                        ?_ReadVoltage 024C                            ?_PS_2_INIT 0070  
                           Send_PS2@i 0230         __size_of_Process_PS2_ScanCode 0561  
              ?_UART_send_break_timed 007A                   start_initialization 00EF  
                   ?i1_UARTstringWAIT 0021                             _ReadUSART 18C6  
             __size_of_UARTstringWAIT 0031                 CheckSum_byte@ThisTemp 0224  
                         __end_of_isr 00ED                            ?i1___lldiv 0070  
                  ??i1_UARTstringWAIT 0023      __end_ofi1_PS_2_DISABLE_INTERRUPT 1941  
                       WriteBaud@Baud 00A2                  __end_of_Reverse_Byte 2000  
                    ?i1_READ_PS_2_PIN 0070                            ?i1_delayUS 0070  
            ??_Decode_Scan_Code_Shift 0070                         WriteBaud@temp 006A  
                           _OpenUSART 1CFD                            ?_Data_TRIS 0070  
                            ??_UNLOCK 0070                          ??_ResendLast 007E  
                     ___llmod@divisor 0020                     __size_of_InitUART 00E5  
                     ___llmod@counter 0029                     __size_of_ReadBaud 0062  
                           _Shift_Key 01EF                          ??_Timer2Init 0220  
                           _Timer2OFF 1866               __end_ofi1_CheckSum_byte 1AEC  
                   ?_InternalADC_Read 022A                     __size_of_Send_PS2 0194  
                            ??___ftge 0226                              ??___lmul 0078  
            __size_of_BufferShiftBack 0041                    ??_InternalADC_Read 022C  
                   __size_of_Timer2ON 0003                  __end_ofi1_Clock_TRIS 18BC  
                         __pdataBANK1 00E5                           __pdataBANK4 0261  
                __end_ofi1_CloseUSART 1908                         i1ReadBaud@row 0024  
                   __size_of___ftpack 0065                      cleanBuffer@count 0070  
                  __end_of_ResendLast 18A0                            ?_ReadUSART 0070  
                           ___latbits 0002                     __size_of___lwtoft 0015  
                       __pcstackBANK0 0020                         __pcstackBANK1 00A0  
                       __pcstackBANK2 0120                         __pcstackBANK3 01A0  
                       __pcstackBANK4 0220                             _WriteBaud 11B2  
                  i1UARTchar@override 0078                    ReadFlash_2Byte@row 0220  
                  __end_of_Timer2Init 1A92                             _baudUSART 18A9  
                  ReadFlash_4Byte@row 0225                           _cleanBuffer 19D8  
                          ?_OpenUSART 0220                           sprintf@flag 0036  
                         sprintf@prec 0037                              ?_InitApp 0070  
               __end_of_ScanCodeSHIFT 0866       Decode_Scan_Code_FunctionE0@Code 0070  
                            ?_SetBaud 00AF                        ReadBaud@column 0234  
                          ?_Timer2OFF 0070                          ?_Timer2Reset 0070  
                            ?___ftdiv 022C                              ?___lldiv 0220  
                 i1Send_PS2@oddparity 0020                              ?___ftmul 023C  
                            ?___llmod 0020                      __CFG_PPS1WAY$OFF 0000  
       WriteFlash_Sequential@TempBufH 0023         WriteFlash_Sequential@TempBufL 0043  
                            ?_delayUS 0220                WriteFlash_Sequential@i 0069  
          Decode_Scan_Code_Shift@Code 0070                              _BAUD1CON 019F  
                         ??_PS_2_INIT 0233                      i1InitUART@config 0030  
                            _BAUDMODE 00CC                 __size_of_PS2RawToScan 004E  
                    i1InitUART@parity 0024                         ??i1_Data_TRIS 0070  
                    _Decode_Scan_Code 1941                    __end_of_VoltageMSG 0966  
                          ?_WriteBaud 00A0      i1PS_2_DISABLE_INTERRUPT@DATA_CLK 0071  
                         ??i1___lldiv 0078                 __end_of_READ_PS_2_PIN 19C3  
                            ?_sprintf 002A                            ?_baudUSART 0070  
                         ??i1_delayUS 0074                             delayUS@US 0220  
     __size_of_Decode_Scan_Code_Shift 0012            ?_Decode_Scan_Code_Function 0070  
                         ??_Data_TRIS 0220            WriteFlash_Sequential@tempH 0063  
          WriteFlash_Sequential@tempL 0064              i1_PS_2_DISABLE_INTERRUPT 1930  
                           clear_ram0 188B                              _PIE1bits 0091  
                        cleanBuffer@i 0074                  BufferShiftBack@shift 0070  
                            _ISNUMBER 1914                              _PIR1bits 0011  
                    ?i1_CheckSum_byte 0070              __size_of_UART_send_break 0005  
            WriteFlash_Sequential@row 007A                              _UARTchar 1EB6  
                i1Data_TRIS@direction 0070                          _PS2RawToScan 1E68  
                       ??i1_ReadUSART 0070                              _LControl 00D0  
                __size_of_Init_System 0114              ?i1_PS_2_ENABLE_INTERRUPT 0070  
      __size_of_WriteFlash_Sequential 00CC                     ??_BufferShiftBack 0072  
               i1ReadFlash_4Byte@temp 0020         __end_of_WriteFlash_Sequential 1441  
               __size_of_Reverse_Byte 0054                        _UARTstringWAIT 1BAA  
                         ??_ReadUSART 0220                  __size_of_ReadVoltage 0064  
                            _RControl 00D5                         ??i1_OpenUSART 0072  
            ??_PS_2_DISABLE_INTERRUPT 0220               ??_PS_2_ENABLE_INTERRUPT 0220  
                   ___lmul@multiplier 0070                              SetBaud@i 015E  
                            _InitUART 1441                              _ReadBaud 1087  
                         ??_OpenUSART 0222                   __end_ofi1_Data_TRIS 18C6  
                i1UARTstringWAIT@data 0021                              _ScanCode 0784  
                     OpenUSART@config 0222     __end_of_Decode_Scan_Code_Function 0A51  
                            _Send_PS2 0E6C                 __size_ofi1_Clock_TRIS 000A  
                    __size_of_InitApp 0024                           ??_Timer2OFF 0070  
                            _Timer2ON 186F                      __size_of_SetBaud 0179  
               __size_ofi1_CloseUSART 000C                          _Reverse_Byte 1FAC  
                    __size_of___ftdiv 00A9                       cleanBuffer@data 0073  
              _Decode_Scan_Code_Shift 1965                      __size_of___lldiv 0053  
                    __size_of___ftmul 00B4                      __size_of___llmod 0043  
                       SetBaud@Parity 00B3                              ___ftpack 114D  
                      _PS_2_ScanCodes 00D9               ??_UART_send_break_timed 007C  
                    __size_of_delayUS 0035           __size_of_DisableInternalADC 0007  
              __end_of_UARTstringWAIT 1BDB                              ___lwtoft 19C3  
                     Send_PS2@command 022F                         ??i1_baudUSART 0070  
                          sprintf@val 0039                   __end_ofi1_ReadUSART 18A9  
               i1Clock_TRIS@direction 0070                           ??_WriteBaud 00A7  
                       ISNUMBER@ascii 0070                       Send_PS2@timeout 0231  
                            __ptext10 1A67                              __ptext11 186F  
                            __ptext20 1BAA                              __ptext12 0682  
                            __ptext21 1C0E                              __ptext13 0E6C  
                            __ptext30 18C6                              __ptext22 1EB6  
                            __ptext14 19AF                              __ptext31 1CFD  
                            __ptext23 1B1B                              __ptext15 18F1  
                            __ptext40 1898                              __ptext32 06F2  
                            __ptext24 1087                              __ptext16 18E6  
                            __ptext41 1930                              __ptext33 19F0  
                            __ptext25 1E1B                              __ptext17 199C  
                            __ptext50 187A                              __ptext42 0121  
                            __ptext34 1977                              __ptext26 1B7A  
                            __ptext18 1908                              __ptext51 0B65  
                            __ptext43 0CDE                              __ptext27 1441  
                            __ptext19 0A51                              __ptext60 18FC  
                            __ptext52 1B4A                              __ptext44 1989  
                            __ptext36 186C                              __ptext28 18A9  
                            __ptext61 170A                              __ptext53 1DCE  
                            __ptext45 18BC                              __ptext37 18DB  
                            __ptext29 1F59                              __ptext70 1914  
                            __ptext62 1F07                              __ptext54 1025  
                            __ptext46 18B2                              __ptext38 1869  
                            __ptext71 1965                              __ptext63 1D3E  
                            __ptext55 1D81                              __ptext47 19D8  
                            __ptext39 1866                              __ptext72 1953  
                            __ptext64 11B2                              __ptext56 1526  
                            __ptext48 1AEC                              __ptext73 0A41  
                            __ptext65 1375                              __ptext57 187F  
                            __ptext49 1000                              __ptext74 1941  
                            __ptext66 1BDB                              __ptext58 18A0  
                            __ptext75 1CBC                              __ptext67 1A14  
                            __ptext59 1A92                              __ptext76 1E68  
                            __ptext68 1A3C                              __ptext77 1ABE  
                            __ptext69 18D0                              __ptext78 1FAC  
       PS_2_ENABLE_INTERRUPT@DATA_CLK 0220                     i1_ReadFlash_2Byte 1A14  
                   i1_ReadFlash_4Byte 1D81                           ??_baudUSART 0220  
                        i1_Clock_TRIS 18B2                      __size_of_sprintf 00F6  
                  ?i1_ReadFlash_2Byte 0070                    ?i1_ReadFlash_4Byte 0075  
                 __end_ofi1_OpenUSART 1ABE                         __size_of_main 00F5  
                        i1_CloseUSART 18FC              __size_of_ReadFlash_2Byte 0030  
            __size_of_ReadFlash_4Byte 004D          __end_of_Process_PS2_ScanCode 0682  
                            delayUS@i 0225                              delayUS@j 0229  
           __size_ofi1_UARTstringWAIT 0030                          _pwrLEDtoggle 025C  
        __size_of_ConfigureOscillator 0012                 __end_of_CheckSum_byte 1B4A  
                 ??i1_ReadFlash_2Byte 0073                   ??i1_ReadFlash_4Byte 0079  
                          _RC1STAbits 019D                        CheckSum_byte@i 0227  
                      _Left_Shift_Key 01EB                  __size_of_Timer2Reset 0003  
     __end_ofi1_PS_2_ENABLE_INTERRUPT 18E6               __size_of_Init_PS_2_Send 0070  
                      Timer2Init@time 0222                     ??_UART_send_break 0070  
                     ?_UARTstringWAIT 022F                   CheckSum_byte@Parity 0226  
                          _INTCONbits 000B             __size_of_InternalADC_Read 003D  
                      OpenUSART@spbrg 0220             __end_ofi1_ReadFlash_2Byte 1A3C  
           __end_ofi1_ReadFlash_4Byte 1DCE                          UARTchar@data 022E  
                         i1_Data_TRIS 18BC       __size_of_PS_2_DISABLE_INTERRUPT 0013  
                 __end_ofi1_baudUSART 1885                              intlevel1 0000  
                           sprintf@ap 003D                             sprintf@sp 003E  
                        ?_cleanBuffer 0070                      ___lldiv@dividend 0224  
 __end_of_Decode_Scan_Code_FunctionE0 1965           _Decode_Scan_Code_FunctionE0 1953  
                   __CFG_CLKOUTEN$OFF 0000                        _BatteryVoltage 0257  
            __size_ofi1_READ_PS_2_PIN 0013              __end_of_Decode_Scan_Code 1953  
                          i1_UARTchar 1DCE                       _Right_Shift_Key 01EE  
                         i1Send_PS2@i 0022                           i1_ReadUSART 18A0  
                       _EvenParityMSG 08FB                              sprintf@c 003F  
                            sprintf@f 002A                      i1ReadBaud@column 0026  
                    ___lldiv@quotient 0229               i1ReadFlash_2Byte@column 0072  
                Decode_Scan_Code@Code 0070            ??i1_PS_2_DISABLE_INTERRUPT 0070  
                         i1_OpenUSART 1A92                     Init_System@Parity 0250  
                  _Left_Shift_Key_old 00D1                            _TX1STAbits 019E  
                          i1_InitUART 1526                     CheckSum_byte@This 0220  
                      i1UARTchar@data 0020                            i1_ReadBaud 1025  
                       _MarkParityMSG 094A                            i1_Send_PS2 0CDE  
         ??_Decode_Scan_Code_Function 0070                       Init_System@Baud 024C  
                          i1_Timer2ON 186C                       Init_System@temp 0248  
                     PS2RawToScan@Raw 0078        PS_2_DISABLE_INTERRUPT@DATA_CLK 0221  
                    PS2RawToScan@temp 007A  
