

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Mar 05 21:57:05 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F1705
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK4,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    12                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	intentry,global,class=CODE,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	dabs	1,0x7E,2
   102  0000                     	;# 
   103  0001                     	;# 
   104  0002                     	;# 
   105  0003                     	;# 
   106  0004                     	;# 
   107  0005                     	;# 
   108  0006                     	;# 
   109  0007                     	;# 
   110  0008                     	;# 
   111  0009                     	;# 
   112  000A                     	;# 
   113  000B                     	;# 
   114  000C                     	;# 
   115  000E                     	;# 
   116  0011                     	;# 
   117  0012                     	;# 
   118  0013                     	;# 
   119  0015                     	;# 
   120  0016                     	;# 
   121  0016                     	;# 
   122  0017                     	;# 
   123  0018                     	;# 
   124  0019                     	;# 
   125  001A                     	;# 
   126  001B                     	;# 
   127  001C                     	;# 
   128  008C                     	;# 
   129  008E                     	;# 
   130  0091                     	;# 
   131  0092                     	;# 
   132  0093                     	;# 
   133  0095                     	;# 
   134  0096                     	;# 
   135  0097                     	;# 
   136  0098                     	;# 
   137  0099                     	;# 
   138  009A                     	;# 
   139  009B                     	;# 
   140  009B                     	;# 
   141  009C                     	;# 
   142  009D                     	;# 
   143  009E                     	;# 
   144  009F                     	;# 
   145  010C                     	;# 
   146  010E                     	;# 
   147  0111                     	;# 
   148  0112                     	;# 
   149  0113                     	;# 
   150  0114                     	;# 
   151  0115                     	;# 
   152  0116                     	;# 
   153  0117                     	;# 
   154  0118                     	;# 
   155  0119                     	;# 
   156  011C                     	;# 
   157  018C                     	;# 
   158  018E                     	;# 
   159  0191                     	;# 
   160  0191                     	;# 
   161  0192                     	;# 
   162  0193                     	;# 
   163  0193                     	;# 
   164  0194                     	;# 
   165  0195                     	;# 
   166  0196                     	;# 
   167  0197                     	;# 
   168  0199                     	;# 
   169  0199                     	;# 
   170  0199                     	;# 
   171  019A                     	;# 
   172  019A                     	;# 
   173  019A                     	;# 
   174  019B                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019B                     	;# 
   179  019C                     	;# 
   180  019C                     	;# 
   181  019C                     	;# 
   182  019D                     	;# 
   183  019D                     	;# 
   184  019D                     	;# 
   185  019E                     	;# 
   186  019E                     	;# 
   187  019E                     	;# 
   188  019F                     	;# 
   189  019F                     	;# 
   190  019F                     	;# 
   191  019F                     	;# 
   192  019F                     	;# 
   193  020C                     	;# 
   194  020E                     	;# 
   195  0211                     	;# 
   196  0211                     	;# 
   197  0212                     	;# 
   198  0212                     	;# 
   199  0213                     	;# 
   200  0213                     	;# 
   201  0214                     	;# 
   202  0214                     	;# 
   203  0215                     	;# 
   204  0215                     	;# 
   205  0215                     	;# 
   206  0215                     	;# 
   207  0216                     	;# 
   208  0216                     	;# 
   209  0217                     	;# 
   210  0217                     	;# 
   211  028C                     	;# 
   212  028E                     	;# 
   213  0291                     	;# 
   214  0291                     	;# 
   215  0292                     	;# 
   216  0293                     	;# 
   217  0293                     	;# 
   218  0298                     	;# 
   219  0298                     	;# 
   220  0299                     	;# 
   221  029A                     	;# 
   222  029A                     	;# 
   223  029E                     	;# 
   224  030C                     	;# 
   225  030E                     	;# 
   226  038C                     	;# 
   227  038E                     	;# 
   228  0391                     	;# 
   229  0392                     	;# 
   230  0393                     	;# 
   231  0397                     	;# 
   232  0398                     	;# 
   233  0399                     	;# 
   234  0415                     	;# 
   235  0416                     	;# 
   236  0417                     	;# 
   237  041C                     	;# 
   238  041D                     	;# 
   239  041E                     	;# 
   240  0511                     	;# 
   241  0515                     	;# 
   242  0617                     	;# 
   243  0618                     	;# 
   244  0619                     	;# 
   245  0619                     	;# 
   246  061A                     	;# 
   247  061B                     	;# 
   248  061C                     	;# 
   249  061C                     	;# 
   250  0691                     	;# 
   251  0692                     	;# 
   252  0693                     	;# 
   253  0694                     	;# 
   254  0695                     	;# 
   255  0696                     	;# 
   256  0697                     	;# 
   257  0698                     	;# 
   258  0699                     	;# 
   259  069A                     	;# 
   260  069B                     	;# 
   261  069C                     	;# 
   262  069D                     	;# 
   263  069E                     	;# 
   264  069F                     	;# 
   265  0E0F                     	;# 
   266  0E10                     	;# 
   267  0E11                     	;# 
   268  0E12                     	;# 
   269  0E13                     	;# 
   270  0E14                     	;# 
   271  0E15                     	;# 
   272  0E17                     	;# 
   273  0E20                     	;# 
   274  0E21                     	;# 
   275  0E22                     	;# 
   276  0E24                     	;# 
   277  0E25                     	;# 
   278  0E28                     	;# 
   279  0E29                     	;# 
   280  0E2A                     	;# 
   281  0E2B                     	;# 
   282  0E90                     	;# 
   283  0E91                     	;# 
   284  0E92                     	;# 
   285  0E94                     	;# 
   286  0E95                     	;# 
   287  0EA0                     	;# 
   288  0EA1                     	;# 
   289  0EA2                     	;# 
   290  0EA3                     	;# 
   291  0EA4                     	;# 
   292  0EA5                     	;# 
   293  0F0F                     	;# 
   294  0F10                     	;# 
   295  0F11                     	;# 
   296  0F12                     	;# 
   297  0F13                     	;# 
   298  0F14                     	;# 
   299  0F15                     	;# 
   300  0F16                     	;# 
   301  0F17                     	;# 
   302  0F18                     	;# 
   303  0F19                     	;# 
   304  0F1A                     	;# 
   305  0F1B                     	;# 
   306  0F1C                     	;# 
   307  0F1D                     	;# 
   308  0F1E                     	;# 
   309  0F1F                     	;# 
   310  0F20                     	;# 
   311  0F21                     	;# 
   312  0F22                     	;# 
   313  0F23                     	;# 
   314  0F24                     	;# 
   315  0F25                     	;# 
   316  0F26                     	;# 
   317  0F27                     	;# 
   318  0F28                     	;# 
   319  0F29                     	;# 
   320  0F2A                     	;# 
   321  0F2B                     	;# 
   322  0F2C                     	;# 
   323  0F2D                     	;# 
   324  0F9E                     	;# 
   325  0FE4                     	;# 
   326  0FE5                     	;# 
   327  0FE6                     	;# 
   328  0FE7                     	;# 
   329  0FE8                     	;# 
   330  0FE9                     	;# 
   331  0FEA                     	;# 
   332  0FEB                     	;# 
   333  0FED                     	;# 
   334  0FEE                     	;# 
   335  0FEF                     	;# 
   336  0000                     	;# 
   337  0001                     	;# 
   338  0002                     	;# 
   339  0003                     	;# 
   340  0004                     	;# 
   341  0005                     	;# 
   342  0006                     	;# 
   343  0007                     	;# 
   344  0008                     	;# 
   345  0009                     	;# 
   346  000A                     	;# 
   347  000B                     	;# 
   348  000C                     	;# 
   349  000E                     	;# 
   350  0011                     	;# 
   351  0012                     	;# 
   352  0013                     	;# 
   353  0015                     	;# 
   354  0016                     	;# 
   355  0016                     	;# 
   356  0017                     	;# 
   357  0018                     	;# 
   358  0019                     	;# 
   359  001A                     	;# 
   360  001B                     	;# 
   361  001C                     	;# 
   362  008C                     	;# 
   363  008E                     	;# 
   364  0091                     	;# 
   365  0092                     	;# 
   366  0093                     	;# 
   367  0095                     	;# 
   368  0096                     	;# 
   369  0097                     	;# 
   370  0098                     	;# 
   371  0099                     	;# 
   372  009A                     	;# 
   373  009B                     	;# 
   374  009B                     	;# 
   375  009C                     	;# 
   376  009D                     	;# 
   377  009E                     	;# 
   378  009F                     	;# 
   379  010C                     	;# 
   380  010E                     	;# 
   381  0111                     	;# 
   382  0112                     	;# 
   383  0113                     	;# 
   384  0114                     	;# 
   385  0115                     	;# 
   386  0116                     	;# 
   387  0117                     	;# 
   388  0118                     	;# 
   389  0119                     	;# 
   390  011C                     	;# 
   391  018C                     	;# 
   392  018E                     	;# 
   393  0191                     	;# 
   394  0191                     	;# 
   395  0192                     	;# 
   396  0193                     	;# 
   397  0193                     	;# 
   398  0194                     	;# 
   399  0195                     	;# 
   400  0196                     	;# 
   401  0197                     	;# 
   402  0199                     	;# 
   403  0199                     	;# 
   404  0199                     	;# 
   405  019A                     	;# 
   406  019A                     	;# 
   407  019A                     	;# 
   408  019B                     	;# 
   409  019B                     	;# 
   410  019B                     	;# 
   411  019B                     	;# 
   412  019B                     	;# 
   413  019C                     	;# 
   414  019C                     	;# 
   415  019C                     	;# 
   416  019D                     	;# 
   417  019D                     	;# 
   418  019D                     	;# 
   419  019E                     	;# 
   420  019E                     	;# 
   421  019E                     	;# 
   422  019F                     	;# 
   423  019F                     	;# 
   424  019F                     	;# 
   425  019F                     	;# 
   426  019F                     	;# 
   427  020C                     	;# 
   428  020E                     	;# 
   429  0211                     	;# 
   430  0211                     	;# 
   431  0212                     	;# 
   432  0212                     	;# 
   433  0213                     	;# 
   434  0213                     	;# 
   435  0214                     	;# 
   436  0214                     	;# 
   437  0215                     	;# 
   438  0215                     	;# 
   439  0215                     	;# 
   440  0215                     	;# 
   441  0216                     	;# 
   442  0216                     	;# 
   443  0217                     	;# 
   444  0217                     	;# 
   445  028C                     	;# 
   446  028E                     	;# 
   447  0291                     	;# 
   448  0291                     	;# 
   449  0292                     	;# 
   450  0293                     	;# 
   451  0293                     	;# 
   452  0298                     	;# 
   453  0298                     	;# 
   454  0299                     	;# 
   455  029A                     	;# 
   456  029A                     	;# 
   457  029E                     	;# 
   458  030C                     	;# 
   459  030E                     	;# 
   460  038C                     	;# 
   461  038E                     	;# 
   462  0391                     	;# 
   463  0392                     	;# 
   464  0393                     	;# 
   465  0397                     	;# 
   466  0398                     	;# 
   467  0399                     	;# 
   468  0415                     	;# 
   469  0416                     	;# 
   470  0417                     	;# 
   471  041C                     	;# 
   472  041D                     	;# 
   473  041E                     	;# 
   474  0511                     	;# 
   475  0515                     	;# 
   476  0617                     	;# 
   477  0618                     	;# 
   478  0619                     	;# 
   479  0619                     	;# 
   480  061A                     	;# 
   481  061B                     	;# 
   482  061C                     	;# 
   483  061C                     	;# 
   484  0691                     	;# 
   485  0692                     	;# 
   486  0693                     	;# 
   487  0694                     	;# 
   488  0695                     	;# 
   489  0696                     	;# 
   490  0697                     	;# 
   491  0698                     	;# 
   492  0699                     	;# 
   493  069A                     	;# 
   494  069B                     	;# 
   495  069C                     	;# 
   496  069D                     	;# 
   497  069E                     	;# 
   498  069F                     	;# 
   499  0E0F                     	;# 
   500  0E10                     	;# 
   501  0E11                     	;# 
   502  0E12                     	;# 
   503  0E13                     	;# 
   504  0E14                     	;# 
   505  0E15                     	;# 
   506  0E17                     	;# 
   507  0E20                     	;# 
   508  0E21                     	;# 
   509  0E22                     	;# 
   510  0E24                     	;# 
   511  0E25                     	;# 
   512  0E28                     	;# 
   513  0E29                     	;# 
   514  0E2A                     	;# 
   515  0E2B                     	;# 
   516  0E90                     	;# 
   517  0E91                     	;# 
   518  0E92                     	;# 
   519  0E94                     	;# 
   520  0E95                     	;# 
   521  0EA0                     	;# 
   522  0EA1                     	;# 
   523  0EA2                     	;# 
   524  0EA3                     	;# 
   525  0EA4                     	;# 
   526  0EA5                     	;# 
   527  0F0F                     	;# 
   528  0F10                     	;# 
   529  0F11                     	;# 
   530  0F12                     	;# 
   531  0F13                     	;# 
   532  0F14                     	;# 
   533  0F15                     	;# 
   534  0F16                     	;# 
   535  0F17                     	;# 
   536  0F18                     	;# 
   537  0F19                     	;# 
   538  0F1A                     	;# 
   539  0F1B                     	;# 
   540  0F1C                     	;# 
   541  0F1D                     	;# 
   542  0F1E                     	;# 
   543  0F1F                     	;# 
   544  0F20                     	;# 
   545  0F21                     	;# 
   546  0F22                     	;# 
   547  0F23                     	;# 
   548  0F24                     	;# 
   549  0F25                     	;# 
   550  0F26                     	;# 
   551  0F27                     	;# 
   552  0F28                     	;# 
   553  0F29                     	;# 
   554  0F2A                     	;# 
   555  0F2B                     	;# 
   556  0F2C                     	;# 
   557  0F2D                     	;# 
   558  0F9E                     	;# 
   559  0FE4                     	;# 
   560  0FE5                     	;# 
   561  0FE6                     	;# 
   562  0FE7                     	;# 
   563  0FE8                     	;# 
   564  0FE9                     	;# 
   565  0FEA                     	;# 
   566  0FEB                     	;# 
   567  0FED                     	;# 
   568  0FEE                     	;# 
   569  0FEF                     	;# 
   570  0000                     	;# 
   571  0001                     	;# 
   572  0002                     	;# 
   573  0003                     	;# 
   574  0004                     	;# 
   575  0005                     	;# 
   576  0006                     	;# 
   577  0007                     	;# 
   578  0008                     	;# 
   579  0009                     	;# 
   580  000A                     	;# 
   581  000B                     	;# 
   582  000C                     	;# 
   583  000E                     	;# 
   584  0011                     	;# 
   585  0012                     	;# 
   586  0013                     	;# 
   587  0015                     	;# 
   588  0016                     	;# 
   589  0016                     	;# 
   590  0017                     	;# 
   591  0018                     	;# 
   592  0019                     	;# 
   593  001A                     	;# 
   594  001B                     	;# 
   595  001C                     	;# 
   596  008C                     	;# 
   597  008E                     	;# 
   598  0091                     	;# 
   599  0092                     	;# 
   600  0093                     	;# 
   601  0095                     	;# 
   602  0096                     	;# 
   603  0097                     	;# 
   604  0098                     	;# 
   605  0099                     	;# 
   606  009A                     	;# 
   607  009B                     	;# 
   608  009B                     	;# 
   609  009C                     	;# 
   610  009D                     	;# 
   611  009E                     	;# 
   612  009F                     	;# 
   613  010C                     	;# 
   614  010E                     	;# 
   615  0111                     	;# 
   616  0112                     	;# 
   617  0113                     	;# 
   618  0114                     	;# 
   619  0115                     	;# 
   620  0116                     	;# 
   621  0117                     	;# 
   622  0118                     	;# 
   623  0119                     	;# 
   624  011C                     	;# 
   625  018C                     	;# 
   626  018E                     	;# 
   627  0191                     	;# 
   628  0191                     	;# 
   629  0192                     	;# 
   630  0193                     	;# 
   631  0193                     	;# 
   632  0194                     	;# 
   633  0195                     	;# 
   634  0196                     	;# 
   635  0197                     	;# 
   636  0199                     	;# 
   637  0199                     	;# 
   638  0199                     	;# 
   639  019A                     	;# 
   640  019A                     	;# 
   641  019A                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019B                     	;# 
   647  019C                     	;# 
   648  019C                     	;# 
   649  019C                     	;# 
   650  019D                     	;# 
   651  019D                     	;# 
   652  019D                     	;# 
   653  019E                     	;# 
   654  019E                     	;# 
   655  019E                     	;# 
   656  019F                     	;# 
   657  019F                     	;# 
   658  019F                     	;# 
   659  019F                     	;# 
   660  019F                     	;# 
   661  020C                     	;# 
   662  020E                     	;# 
   663  0211                     	;# 
   664  0211                     	;# 
   665  0212                     	;# 
   666  0212                     	;# 
   667  0213                     	;# 
   668  0213                     	;# 
   669  0214                     	;# 
   670  0214                     	;# 
   671  0215                     	;# 
   672  0215                     	;# 
   673  0215                     	;# 
   674  0215                     	;# 
   675  0216                     	;# 
   676  0216                     	;# 
   677  0217                     	;# 
   678  0217                     	;# 
   679  028C                     	;# 
   680  028E                     	;# 
   681  0291                     	;# 
   682  0291                     	;# 
   683  0292                     	;# 
   684  0293                     	;# 
   685  0293                     	;# 
   686  0298                     	;# 
   687  0298                     	;# 
   688  0299                     	;# 
   689  029A                     	;# 
   690  029A                     	;# 
   691  029E                     	;# 
   692  030C                     	;# 
   693  030E                     	;# 
   694  038C                     	;# 
   695  038E                     	;# 
   696  0391                     	;# 
   697  0392                     	;# 
   698  0393                     	;# 
   699  0397                     	;# 
   700  0398                     	;# 
   701  0399                     	;# 
   702  0415                     	;# 
   703  0416                     	;# 
   704  0417                     	;# 
   705  041C                     	;# 
   706  041D                     	;# 
   707  041E                     	;# 
   708  0511                     	;# 
   709  0515                     	;# 
   710  0617                     	;# 
   711  0618                     	;# 
   712  0619                     	;# 
   713  0619                     	;# 
   714  061A                     	;# 
   715  061B                     	;# 
   716  061C                     	;# 
   717  061C                     	;# 
   718  0691                     	;# 
   719  0692                     	;# 
   720  0693                     	;# 
   721  0694                     	;# 
   722  0695                     	;# 
   723  0696                     	;# 
   724  0697                     	;# 
   725  0698                     	;# 
   726  0699                     	;# 
   727  069A                     	;# 
   728  069B                     	;# 
   729  069C                     	;# 
   730  069D                     	;# 
   731  069E                     	;# 
   732  069F                     	;# 
   733  0E0F                     	;# 
   734  0E10                     	;# 
   735  0E11                     	;# 
   736  0E12                     	;# 
   737  0E13                     	;# 
   738  0E14                     	;# 
   739  0E15                     	;# 
   740  0E17                     	;# 
   741  0E20                     	;# 
   742  0E21                     	;# 
   743  0E22                     	;# 
   744  0E24                     	;# 
   745  0E25                     	;# 
   746  0E28                     	;# 
   747  0E29                     	;# 
   748  0E2A                     	;# 
   749  0E2B                     	;# 
   750  0E90                     	;# 
   751  0E91                     	;# 
   752  0E92                     	;# 
   753  0E94                     	;# 
   754  0E95                     	;# 
   755  0EA0                     	;# 
   756  0EA1                     	;# 
   757  0EA2                     	;# 
   758  0EA3                     	;# 
   759  0EA4                     	;# 
   760  0EA5                     	;# 
   761  0F0F                     	;# 
   762  0F10                     	;# 
   763  0F11                     	;# 
   764  0F12                     	;# 
   765  0F13                     	;# 
   766  0F14                     	;# 
   767  0F15                     	;# 
   768  0F16                     	;# 
   769  0F17                     	;# 
   770  0F18                     	;# 
   771  0F19                     	;# 
   772  0F1A                     	;# 
   773  0F1B                     	;# 
   774  0F1C                     	;# 
   775  0F1D                     	;# 
   776  0F1E                     	;# 
   777  0F1F                     	;# 
   778  0F20                     	;# 
   779  0F21                     	;# 
   780  0F22                     	;# 
   781  0F23                     	;# 
   782  0F24                     	;# 
   783  0F25                     	;# 
   784  0F26                     	;# 
   785  0F27                     	;# 
   786  0F28                     	;# 
   787  0F29                     	;# 
   788  0F2A                     	;# 
   789  0F2B                     	;# 
   790  0F2C                     	;# 
   791  0F2D                     	;# 
   792  0F9E                     	;# 
   793  0FE4                     	;# 
   794  0FE5                     	;# 
   795  0FE6                     	;# 
   796  0FE7                     	;# 
   797  0FE8                     	;# 
   798  0FE9                     	;# 
   799  0FEA                     	;# 
   800  0FEB                     	;# 
   801  0FED                     	;# 
   802  0FEE                     	;# 
   803  0FEF                     	;# 
   804  0000                     	;# 
   805  0001                     	;# 
   806  0002                     	;# 
   807  0003                     	;# 
   808  0004                     	;# 
   809  0005                     	;# 
   810  0006                     	;# 
   811  0007                     	;# 
   812  0008                     	;# 
   813  0009                     	;# 
   814  000A                     	;# 
   815  000B                     	;# 
   816  000C                     	;# 
   817  000E                     	;# 
   818  0011                     	;# 
   819  0012                     	;# 
   820  0013                     	;# 
   821  0015                     	;# 
   822  0016                     	;# 
   823  0016                     	;# 
   824  0017                     	;# 
   825  0018                     	;# 
   826  0019                     	;# 
   827  001A                     	;# 
   828  001B                     	;# 
   829  001C                     	;# 
   830  008C                     	;# 
   831  008E                     	;# 
   832  0091                     	;# 
   833  0092                     	;# 
   834  0093                     	;# 
   835  0095                     	;# 
   836  0096                     	;# 
   837  0097                     	;# 
   838  0098                     	;# 
   839  0099                     	;# 
   840  009A                     	;# 
   841  009B                     	;# 
   842  009B                     	;# 
   843  009C                     	;# 
   844  009D                     	;# 
   845  009E                     	;# 
   846  009F                     	;# 
   847  010C                     	;# 
   848  010E                     	;# 
   849  0111                     	;# 
   850  0112                     	;# 
   851  0113                     	;# 
   852  0114                     	;# 
   853  0115                     	;# 
   854  0116                     	;# 
   855  0117                     	;# 
   856  0118                     	;# 
   857  0119                     	;# 
   858  011C                     	;# 
   859  018C                     	;# 
   860  018E                     	;# 
   861  0191                     	;# 
   862  0191                     	;# 
   863  0192                     	;# 
   864  0193                     	;# 
   865  0193                     	;# 
   866  0194                     	;# 
   867  0195                     	;# 
   868  0196                     	;# 
   869  0197                     	;# 
   870  0199                     	;# 
   871  0199                     	;# 
   872  0199                     	;# 
   873  019A                     	;# 
   874  019A                     	;# 
   875  019A                     	;# 
   876  019B                     	;# 
   877  019B                     	;# 
   878  019B                     	;# 
   879  019B                     	;# 
   880  019B                     	;# 
   881  019C                     	;# 
   882  019C                     	;# 
   883  019C                     	;# 
   884  019D                     	;# 
   885  019D                     	;# 
   886  019D                     	;# 
   887  019E                     	;# 
   888  019E                     	;# 
   889  019E                     	;# 
   890  019F                     	;# 
   891  019F                     	;# 
   892  019F                     	;# 
   893  019F                     	;# 
   894  019F                     	;# 
   895  020C                     	;# 
   896  020E                     	;# 
   897  0211                     	;# 
   898  0211                     	;# 
   899  0212                     	;# 
   900  0212                     	;# 
   901  0213                     	;# 
   902  0213                     	;# 
   903  0214                     	;# 
   904  0214                     	;# 
   905  0215                     	;# 
   906  0215                     	;# 
   907  0215                     	;# 
   908  0215                     	;# 
   909  0216                     	;# 
   910  0216                     	;# 
   911  0217                     	;# 
   912  0217                     	;# 
   913  028C                     	;# 
   914  028E                     	;# 
   915  0291                     	;# 
   916  0291                     	;# 
   917  0292                     	;# 
   918  0293                     	;# 
   919  0293                     	;# 
   920  0298                     	;# 
   921  0298                     	;# 
   922  0299                     	;# 
   923  029A                     	;# 
   924  029A                     	;# 
   925  029E                     	;# 
   926  030C                     	;# 
   927  030E                     	;# 
   928  038C                     	;# 
   929  038E                     	;# 
   930  0391                     	;# 
   931  0392                     	;# 
   932  0393                     	;# 
   933  0397                     	;# 
   934  0398                     	;# 
   935  0399                     	;# 
   936  0415                     	;# 
   937  0416                     	;# 
   938  0417                     	;# 
   939  041C                     	;# 
   940  041D                     	;# 
   941  041E                     	;# 
   942  0511                     	;# 
   943  0515                     	;# 
   944  0617                     	;# 
   945  0618                     	;# 
   946  0619                     	;# 
   947  0619                     	;# 
   948  061A                     	;# 
   949  061B                     	;# 
   950  061C                     	;# 
   951  061C                     	;# 
   952  0691                     	;# 
   953  0692                     	;# 
   954  0693                     	;# 
   955  0694                     	;# 
   956  0695                     	;# 
   957  0696                     	;# 
   958  0697                     	;# 
   959  0698                     	;# 
   960  0699                     	;# 
   961  069A                     	;# 
   962  069B                     	;# 
   963  069C                     	;# 
   964  069D                     	;# 
   965  069E                     	;# 
   966  069F                     	;# 
   967  0E0F                     	;# 
   968  0E10                     	;# 
   969  0E11                     	;# 
   970  0E12                     	;# 
   971  0E13                     	;# 
   972  0E14                     	;# 
   973  0E15                     	;# 
   974  0E17                     	;# 
   975  0E20                     	;# 
   976  0E21                     	;# 
   977  0E22                     	;# 
   978  0E24                     	;# 
   979  0E25                     	;# 
   980  0E28                     	;# 
   981  0E29                     	;# 
   982  0E2A                     	;# 
   983  0E2B                     	;# 
   984  0E90                     	;# 
   985  0E91                     	;# 
   986  0E92                     	;# 
   987  0E94                     	;# 
   988  0E95                     	;# 
   989  0EA0                     	;# 
   990  0EA1                     	;# 
   991  0EA2                     	;# 
   992  0EA3                     	;# 
   993  0EA4                     	;# 
   994  0EA5                     	;# 
   995  0F0F                     	;# 
   996  0F10                     	;# 
   997  0F11                     	;# 
   998  0F12                     	;# 
   999  0F13                     	;# 
  1000  0F14                     	;# 
  1001  0F15                     	;# 
  1002  0F16                     	;# 
  1003  0F17                     	;# 
  1004  0F18                     	;# 
  1005  0F19                     	;# 
  1006  0F1A                     	;# 
  1007  0F1B                     	;# 
  1008  0F1C                     	;# 
  1009  0F1D                     	;# 
  1010  0F1E                     	;# 
  1011  0F1F                     	;# 
  1012  0F20                     	;# 
  1013  0F21                     	;# 
  1014  0F22                     	;# 
  1015  0F23                     	;# 
  1016  0F24                     	;# 
  1017  0F25                     	;# 
  1018  0F26                     	;# 
  1019  0F27                     	;# 
  1020  0F28                     	;# 
  1021  0F29                     	;# 
  1022  0F2A                     	;# 
  1023  0F2B                     	;# 
  1024  0F2C                     	;# 
  1025  0F2D                     	;# 
  1026  0F9E                     	;# 
  1027  0FE4                     	;# 
  1028  0FE5                     	;# 
  1029  0FE6                     	;# 
  1030  0FE7                     	;# 
  1031  0FE8                     	;# 
  1032  0FE9                     	;# 
  1033  0FEA                     	;# 
  1034  0FEB                     	;# 
  1035  0FED                     	;# 
  1036  0FEE                     	;# 
  1037  0FEF                     	;# 
  1038  0000                     	;# 
  1039  0001                     	;# 
  1040  0002                     	;# 
  1041  0003                     	;# 
  1042  0004                     	;# 
  1043  0005                     	;# 
  1044  0006                     	;# 
  1045  0007                     	;# 
  1046  0008                     	;# 
  1047  0009                     	;# 
  1048  000A                     	;# 
  1049  000B                     	;# 
  1050  000C                     	;# 
  1051  000E                     	;# 
  1052  0011                     	;# 
  1053  0012                     	;# 
  1054  0013                     	;# 
  1055  0015                     	;# 
  1056  0016                     	;# 
  1057  0016                     	;# 
  1058  0017                     	;# 
  1059  0018                     	;# 
  1060  0019                     	;# 
  1061  001A                     	;# 
  1062  001B                     	;# 
  1063  001C                     	;# 
  1064  008C                     	;# 
  1065  008E                     	;# 
  1066  0091                     	;# 
  1067  0092                     	;# 
  1068  0093                     	;# 
  1069  0095                     	;# 
  1070  0096                     	;# 
  1071  0097                     	;# 
  1072  0098                     	;# 
  1073  0099                     	;# 
  1074  009A                     	;# 
  1075  009B                     	;# 
  1076  009B                     	;# 
  1077  009C                     	;# 
  1078  009D                     	;# 
  1079  009E                     	;# 
  1080  009F                     	;# 
  1081  010C                     	;# 
  1082  010E                     	;# 
  1083  0111                     	;# 
  1084  0112                     	;# 
  1085  0113                     	;# 
  1086  0114                     	;# 
  1087  0115                     	;# 
  1088  0116                     	;# 
  1089  0117                     	;# 
  1090  0118                     	;# 
  1091  0119                     	;# 
  1092  011C                     	;# 
  1093  018C                     	;# 
  1094  018E                     	;# 
  1095  0191                     	;# 
  1096  0191                     	;# 
  1097  0192                     	;# 
  1098  0193                     	;# 
  1099  0193                     	;# 
  1100  0194                     	;# 
  1101  0195                     	;# 
  1102  0196                     	;# 
  1103  0197                     	;# 
  1104  0199                     	;# 
  1105  0199                     	;# 
  1106  0199                     	;# 
  1107  019A                     	;# 
  1108  019A                     	;# 
  1109  019A                     	;# 
  1110  019B                     	;# 
  1111  019B                     	;# 
  1112  019B                     	;# 
  1113  019B                     	;# 
  1114  019B                     	;# 
  1115  019C                     	;# 
  1116  019C                     	;# 
  1117  019C                     	;# 
  1118  019D                     	;# 
  1119  019D                     	;# 
  1120  019D                     	;# 
  1121  019E                     	;# 
  1122  019E                     	;# 
  1123  019E                     	;# 
  1124  019F                     	;# 
  1125  019F                     	;# 
  1126  019F                     	;# 
  1127  019F                     	;# 
  1128  019F                     	;# 
  1129  020C                     	;# 
  1130  020E                     	;# 
  1131  0211                     	;# 
  1132  0211                     	;# 
  1133  0212                     	;# 
  1134  0212                     	;# 
  1135  0213                     	;# 
  1136  0213                     	;# 
  1137  0214                     	;# 
  1138  0214                     	;# 
  1139  0215                     	;# 
  1140  0215                     	;# 
  1141  0215                     	;# 
  1142  0215                     	;# 
  1143  0216                     	;# 
  1144  0216                     	;# 
  1145  0217                     	;# 
  1146  0217                     	;# 
  1147  028C                     	;# 
  1148  028E                     	;# 
  1149  0291                     	;# 
  1150  0291                     	;# 
  1151  0292                     	;# 
  1152  0293                     	;# 
  1153  0293                     	;# 
  1154  0298                     	;# 
  1155  0298                     	;# 
  1156  0299                     	;# 
  1157  029A                     	;# 
  1158  029A                     	;# 
  1159  029E                     	;# 
  1160  030C                     	;# 
  1161  030E                     	;# 
  1162  038C                     	;# 
  1163  038E                     	;# 
  1164  0391                     	;# 
  1165  0392                     	;# 
  1166  0393                     	;# 
  1167  0397                     	;# 
  1168  0398                     	;# 
  1169  0399                     	;# 
  1170  0415                     	;# 
  1171  0416                     	;# 
  1172  0417                     	;# 
  1173  041C                     	;# 
  1174  041D                     	;# 
  1175  041E                     	;# 
  1176  0511                     	;# 
  1177  0515                     	;# 
  1178  0617                     	;# 
  1179  0618                     	;# 
  1180  0619                     	;# 
  1181  0619                     	;# 
  1182  061A                     	;# 
  1183  061B                     	;# 
  1184  061C                     	;# 
  1185  061C                     	;# 
  1186  0691                     	;# 
  1187  0692                     	;# 
  1188  0693                     	;# 
  1189  0694                     	;# 
  1190  0695                     	;# 
  1191  0696                     	;# 
  1192  0697                     	;# 
  1193  0698                     	;# 
  1194  0699                     	;# 
  1195  069A                     	;# 
  1196  069B                     	;# 
  1197  069C                     	;# 
  1198  069D                     	;# 
  1199  069E                     	;# 
  1200  069F                     	;# 
  1201  0E0F                     	;# 
  1202  0E10                     	;# 
  1203  0E11                     	;# 
  1204  0E12                     	;# 
  1205  0E13                     	;# 
  1206  0E14                     	;# 
  1207  0E15                     	;# 
  1208  0E17                     	;# 
  1209  0E20                     	;# 
  1210  0E21                     	;# 
  1211  0E22                     	;# 
  1212  0E24                     	;# 
  1213  0E25                     	;# 
  1214  0E28                     	;# 
  1215  0E29                     	;# 
  1216  0E2A                     	;# 
  1217  0E2B                     	;# 
  1218  0E90                     	;# 
  1219  0E91                     	;# 
  1220  0E92                     	;# 
  1221  0E94                     	;# 
  1222  0E95                     	;# 
  1223  0EA0                     	;# 
  1224  0EA1                     	;# 
  1225  0EA2                     	;# 
  1226  0EA3                     	;# 
  1227  0EA4                     	;# 
  1228  0EA5                     	;# 
  1229  0F0F                     	;# 
  1230  0F10                     	;# 
  1231  0F11                     	;# 
  1232  0F12                     	;# 
  1233  0F13                     	;# 
  1234  0F14                     	;# 
  1235  0F15                     	;# 
  1236  0F16                     	;# 
  1237  0F17                     	;# 
  1238  0F18                     	;# 
  1239  0F19                     	;# 
  1240  0F1A                     	;# 
  1241  0F1B                     	;# 
  1242  0F1C                     	;# 
  1243  0F1D                     	;# 
  1244  0F1E                     	;# 
  1245  0F1F                     	;# 
  1246  0F20                     	;# 
  1247  0F21                     	;# 
  1248  0F22                     	;# 
  1249  0F23                     	;# 
  1250  0F24                     	;# 
  1251  0F25                     	;# 
  1252  0F26                     	;# 
  1253  0F27                     	;# 
  1254  0F28                     	;# 
  1255  0F29                     	;# 
  1256  0F2A                     	;# 
  1257  0F2B                     	;# 
  1258  0F2C                     	;# 
  1259  0F2D                     	;# 
  1260  0F9E                     	;# 
  1261  0FE4                     	;# 
  1262  0FE5                     	;# 
  1263  0FE6                     	;# 
  1264  0FE7                     	;# 
  1265  0FE8                     	;# 
  1266  0FE9                     	;# 
  1267  0FEA                     	;# 
  1268  0FEB                     	;# 
  1269  0FED                     	;# 
  1270  0FEE                     	;# 
  1271  0FEF                     	;# 
  1272  0000                     	;# 
  1273  0001                     	;# 
  1274  0002                     	;# 
  1275  0003                     	;# 
  1276  0004                     	;# 
  1277  0005                     	;# 
  1278  0006                     	;# 
  1279  0007                     	;# 
  1280  0008                     	;# 
  1281  0009                     	;# 
  1282  000A                     	;# 
  1283  000B                     	;# 
  1284  000C                     	;# 
  1285  000E                     	;# 
  1286  0011                     	;# 
  1287  0012                     	;# 
  1288  0013                     	;# 
  1289  0015                     	;# 
  1290  0016                     	;# 
  1291  0016                     	;# 
  1292  0017                     	;# 
  1293  0018                     	;# 
  1294  0019                     	;# 
  1295  001A                     	;# 
  1296  001B                     	;# 
  1297  001C                     	;# 
  1298  008C                     	;# 
  1299  008E                     	;# 
  1300  0091                     	;# 
  1301  0092                     	;# 
  1302  0093                     	;# 
  1303  0095                     	;# 
  1304  0096                     	;# 
  1305  0097                     	;# 
  1306  0098                     	;# 
  1307  0099                     	;# 
  1308  009A                     	;# 
  1309  009B                     	;# 
  1310  009B                     	;# 
  1311  009C                     	;# 
  1312  009D                     	;# 
  1313  009E                     	;# 
  1314  009F                     	;# 
  1315  010C                     	;# 
  1316  010E                     	;# 
  1317  0111                     	;# 
  1318  0112                     	;# 
  1319  0113                     	;# 
  1320  0114                     	;# 
  1321  0115                     	;# 
  1322  0116                     	;# 
  1323  0117                     	;# 
  1324  0118                     	;# 
  1325  0119                     	;# 
  1326  011C                     	;# 
  1327  018C                     	;# 
  1328  018E                     	;# 
  1329  0191                     	;# 
  1330  0191                     	;# 
  1331  0192                     	;# 
  1332  0193                     	;# 
  1333  0193                     	;# 
  1334  0194                     	;# 
  1335  0195                     	;# 
  1336  0196                     	;# 
  1337  0197                     	;# 
  1338  0199                     	;# 
  1339  0199                     	;# 
  1340  0199                     	;# 
  1341  019A                     	;# 
  1342  019A                     	;# 
  1343  019A                     	;# 
  1344  019B                     	;# 
  1345  019B                     	;# 
  1346  019B                     	;# 
  1347  019B                     	;# 
  1348  019B                     	;# 
  1349  019C                     	;# 
  1350  019C                     	;# 
  1351  019C                     	;# 
  1352  019D                     	;# 
  1353  019D                     	;# 
  1354  019D                     	;# 
  1355  019E                     	;# 
  1356  019E                     	;# 
  1357  019E                     	;# 
  1358  019F                     	;# 
  1359  019F                     	;# 
  1360  019F                     	;# 
  1361  019F                     	;# 
  1362  019F                     	;# 
  1363  020C                     	;# 
  1364  020E                     	;# 
  1365  0211                     	;# 
  1366  0211                     	;# 
  1367  0212                     	;# 
  1368  0212                     	;# 
  1369  0213                     	;# 
  1370  0213                     	;# 
  1371  0214                     	;# 
  1372  0214                     	;# 
  1373  0215                     	;# 
  1374  0215                     	;# 
  1375  0215                     	;# 
  1376  0215                     	;# 
  1377  0216                     	;# 
  1378  0216                     	;# 
  1379  0217                     	;# 
  1380  0217                     	;# 
  1381  028C                     	;# 
  1382  028E                     	;# 
  1383  0291                     	;# 
  1384  0291                     	;# 
  1385  0292                     	;# 
  1386  0293                     	;# 
  1387  0293                     	;# 
  1388  0298                     	;# 
  1389  0298                     	;# 
  1390  0299                     	;# 
  1391  029A                     	;# 
  1392  029A                     	;# 
  1393  029E                     	;# 
  1394  030C                     	;# 
  1395  030E                     	;# 
  1396  038C                     	;# 
  1397  038E                     	;# 
  1398  0391                     	;# 
  1399  0392                     	;# 
  1400  0393                     	;# 
  1401  0397                     	;# 
  1402  0398                     	;# 
  1403  0399                     	;# 
  1404  0415                     	;# 
  1405  0416                     	;# 
  1406  0417                     	;# 
  1407  041C                     	;# 
  1408  041D                     	;# 
  1409  041E                     	;# 
  1410  0511                     	;# 
  1411  0515                     	;# 
  1412  0617                     	;# 
  1413  0618                     	;# 
  1414  0619                     	;# 
  1415  0619                     	;# 
  1416  061A                     	;# 
  1417  061B                     	;# 
  1418  061C                     	;# 
  1419  061C                     	;# 
  1420  0691                     	;# 
  1421  0692                     	;# 
  1422  0693                     	;# 
  1423  0694                     	;# 
  1424  0695                     	;# 
  1425  0696                     	;# 
  1426  0697                     	;# 
  1427  0698                     	;# 
  1428  0699                     	;# 
  1429  069A                     	;# 
  1430  069B                     	;# 
  1431  069C                     	;# 
  1432  069D                     	;# 
  1433  069E                     	;# 
  1434  069F                     	;# 
  1435  0E0F                     	;# 
  1436  0E10                     	;# 
  1437  0E11                     	;# 
  1438  0E12                     	;# 
  1439  0E13                     	;# 
  1440  0E14                     	;# 
  1441  0E15                     	;# 
  1442  0E17                     	;# 
  1443  0E20                     	;# 
  1444  0E21                     	;# 
  1445  0E22                     	;# 
  1446  0E24                     	;# 
  1447  0E25                     	;# 
  1448  0E28                     	;# 
  1449  0E29                     	;# 
  1450  0E2A                     	;# 
  1451  0E2B                     	;# 
  1452  0E90                     	;# 
  1453  0E91                     	;# 
  1454  0E92                     	;# 
  1455  0E94                     	;# 
  1456  0E95                     	;# 
  1457  0EA0                     	;# 
  1458  0EA1                     	;# 
  1459  0EA2                     	;# 
  1460  0EA3                     	;# 
  1461  0EA4                     	;# 
  1462  0EA5                     	;# 
  1463  0F0F                     	;# 
  1464  0F10                     	;# 
  1465  0F11                     	;# 
  1466  0F12                     	;# 
  1467  0F13                     	;# 
  1468  0F14                     	;# 
  1469  0F15                     	;# 
  1470  0F16                     	;# 
  1471  0F17                     	;# 
  1472  0F18                     	;# 
  1473  0F19                     	;# 
  1474  0F1A                     	;# 
  1475  0F1B                     	;# 
  1476  0F1C                     	;# 
  1477  0F1D                     	;# 
  1478  0F1E                     	;# 
  1479  0F1F                     	;# 
  1480  0F20                     	;# 
  1481  0F21                     	;# 
  1482  0F22                     	;# 
  1483  0F23                     	;# 
  1484  0F24                     	;# 
  1485  0F25                     	;# 
  1486  0F26                     	;# 
  1487  0F27                     	;# 
  1488  0F28                     	;# 
  1489  0F29                     	;# 
  1490  0F2A                     	;# 
  1491  0F2B                     	;# 
  1492  0F2C                     	;# 
  1493  0F2D                     	;# 
  1494  0F9E                     	;# 
  1495  0FE4                     	;# 
  1496  0FE5                     	;# 
  1497  0FE6                     	;# 
  1498  0FE7                     	;# 
  1499  0FE8                     	;# 
  1500  0FE9                     	;# 
  1501  0FEA                     	;# 
  1502  0FEB                     	;# 
  1503  0FED                     	;# 
  1504  0FEE                     	;# 
  1505  0FEF                     	;# 
  1506  0000                     	;# 
  1507  0001                     	;# 
  1508  0002                     	;# 
  1509  0003                     	;# 
  1510  0004                     	;# 
  1511  0005                     	;# 
  1512  0006                     	;# 
  1513  0007                     	;# 
  1514  0008                     	;# 
  1515  0009                     	;# 
  1516  000A                     	;# 
  1517  000B                     	;# 
  1518  000C                     	;# 
  1519  000E                     	;# 
  1520  0011                     	;# 
  1521  0012                     	;# 
  1522  0013                     	;# 
  1523  0015                     	;# 
  1524  0016                     	;# 
  1525  0016                     	;# 
  1526  0017                     	;# 
  1527  0018                     	;# 
  1528  0019                     	;# 
  1529  001A                     	;# 
  1530  001B                     	;# 
  1531  001C                     	;# 
  1532  008C                     	;# 
  1533  008E                     	;# 
  1534  0091                     	;# 
  1535  0092                     	;# 
  1536  0093                     	;# 
  1537  0095                     	;# 
  1538  0096                     	;# 
  1539  0097                     	;# 
  1540  0098                     	;# 
  1541  0099                     	;# 
  1542  009A                     	;# 
  1543  009B                     	;# 
  1544  009B                     	;# 
  1545  009C                     	;# 
  1546  009D                     	;# 
  1547  009E                     	;# 
  1548  009F                     	;# 
  1549  010C                     	;# 
  1550  010E                     	;# 
  1551  0111                     	;# 
  1552  0112                     	;# 
  1553  0113                     	;# 
  1554  0114                     	;# 
  1555  0115                     	;# 
  1556  0116                     	;# 
  1557  0117                     	;# 
  1558  0118                     	;# 
  1559  0119                     	;# 
  1560  011C                     	;# 
  1561  018C                     	;# 
  1562  018E                     	;# 
  1563  0191                     	;# 
  1564  0191                     	;# 
  1565  0192                     	;# 
  1566  0193                     	;# 
  1567  0193                     	;# 
  1568  0194                     	;# 
  1569  0195                     	;# 
  1570  0196                     	;# 
  1571  0197                     	;# 
  1572  0199                     	;# 
  1573  0199                     	;# 
  1574  0199                     	;# 
  1575  019A                     	;# 
  1576  019A                     	;# 
  1577  019A                     	;# 
  1578  019B                     	;# 
  1579  019B                     	;# 
  1580  019B                     	;# 
  1581  019B                     	;# 
  1582  019B                     	;# 
  1583  019C                     	;# 
  1584  019C                     	;# 
  1585  019C                     	;# 
  1586  019D                     	;# 
  1587  019D                     	;# 
  1588  019D                     	;# 
  1589  019E                     	;# 
  1590  019E                     	;# 
  1591  019E                     	;# 
  1592  019F                     	;# 
  1593  019F                     	;# 
  1594  019F                     	;# 
  1595  019F                     	;# 
  1596  019F                     	;# 
  1597  020C                     	;# 
  1598  020E                     	;# 
  1599  0211                     	;# 
  1600  0211                     	;# 
  1601  0212                     	;# 
  1602  0212                     	;# 
  1603  0213                     	;# 
  1604  0213                     	;# 
  1605  0214                     	;# 
  1606  0214                     	;# 
  1607  0215                     	;# 
  1608  0215                     	;# 
  1609  0215                     	;# 
  1610  0215                     	;# 
  1611  0216                     	;# 
  1612  0216                     	;# 
  1613  0217                     	;# 
  1614  0217                     	;# 
  1615  028C                     	;# 
  1616  028E                     	;# 
  1617  0291                     	;# 
  1618  0291                     	;# 
  1619  0292                     	;# 
  1620  0293                     	;# 
  1621  0293                     	;# 
  1622  0298                     	;# 
  1623  0298                     	;# 
  1624  0299                     	;# 
  1625  029A                     	;# 
  1626  029A                     	;# 
  1627  029E                     	;# 
  1628  030C                     	;# 
  1629  030E                     	;# 
  1630  038C                     	;# 
  1631  038E                     	;# 
  1632  0391                     	;# 
  1633  0392                     	;# 
  1634  0393                     	;# 
  1635  0397                     	;# 
  1636  0398                     	;# 
  1637  0399                     	;# 
  1638  0415                     	;# 
  1639  0416                     	;# 
  1640  0417                     	;# 
  1641  041C                     	;# 
  1642  041D                     	;# 
  1643  041E                     	;# 
  1644  0511                     	;# 
  1645  0515                     	;# 
  1646  0617                     	;# 
  1647  0618                     	;# 
  1648  0619                     	;# 
  1649  0619                     	;# 
  1650  061A                     	;# 
  1651  061B                     	;# 
  1652  061C                     	;# 
  1653  061C                     	;# 
  1654  0691                     	;# 
  1655  0692                     	;# 
  1656  0693                     	;# 
  1657  0694                     	;# 
  1658  0695                     	;# 
  1659  0696                     	;# 
  1660  0697                     	;# 
  1661  0698                     	;# 
  1662  0699                     	;# 
  1663  069A                     	;# 
  1664  069B                     	;# 
  1665  069C                     	;# 
  1666  069D                     	;# 
  1667  069E                     	;# 
  1668  069F                     	;# 
  1669  0E0F                     	;# 
  1670  0E10                     	;# 
  1671  0E11                     	;# 
  1672  0E12                     	;# 
  1673  0E13                     	;# 
  1674  0E14                     	;# 
  1675  0E15                     	;# 
  1676  0E17                     	;# 
  1677  0E20                     	;# 
  1678  0E21                     	;# 
  1679  0E22                     	;# 
  1680  0E24                     	;# 
  1681  0E25                     	;# 
  1682  0E28                     	;# 
  1683  0E29                     	;# 
  1684  0E2A                     	;# 
  1685  0E2B                     	;# 
  1686  0E90                     	;# 
  1687  0E91                     	;# 
  1688  0E92                     	;# 
  1689  0E94                     	;# 
  1690  0E95                     	;# 
  1691  0EA0                     	;# 
  1692  0EA1                     	;# 
  1693  0EA2                     	;# 
  1694  0EA3                     	;# 
  1695  0EA4                     	;# 
  1696  0EA5                     	;# 
  1697  0F0F                     	;# 
  1698  0F10                     	;# 
  1699  0F11                     	;# 
  1700  0F12                     	;# 
  1701  0F13                     	;# 
  1702  0F14                     	;# 
  1703  0F15                     	;# 
  1704  0F16                     	;# 
  1705  0F17                     	;# 
  1706  0F18                     	;# 
  1707  0F19                     	;# 
  1708  0F1A                     	;# 
  1709  0F1B                     	;# 
  1710  0F1C                     	;# 
  1711  0F1D                     	;# 
  1712  0F1E                     	;# 
  1713  0F1F                     	;# 
  1714  0F20                     	;# 
  1715  0F21                     	;# 
  1716  0F22                     	;# 
  1717  0F23                     	;# 
  1718  0F24                     	;# 
  1719  0F25                     	;# 
  1720  0F26                     	;# 
  1721  0F27                     	;# 
  1722  0F28                     	;# 
  1723  0F29                     	;# 
  1724  0F2A                     	;# 
  1725  0F2B                     	;# 
  1726  0F2C                     	;# 
  1727  0F2D                     	;# 
  1728  0F9E                     	;# 
  1729  0FE4                     	;# 
  1730  0FE5                     	;# 
  1731  0FE6                     	;# 
  1732  0FE7                     	;# 
  1733  0FE8                     	;# 
  1734  0FE9                     	;# 
  1735  0FEA                     	;# 
  1736  0FEB                     	;# 
  1737  0FED                     	;# 
  1738  0FEE                     	;# 
  1739  0FEF                     	;# 
  1740  0000                     	;# 
  1741  0001                     	;# 
  1742  0002                     	;# 
  1743  0003                     	;# 
  1744  0004                     	;# 
  1745  0005                     	;# 
  1746  0006                     	;# 
  1747  0007                     	;# 
  1748  0008                     	;# 
  1749  0009                     	;# 
  1750  000A                     	;# 
  1751  000B                     	;# 
  1752  000C                     	;# 
  1753  000E                     	;# 
  1754  0011                     	;# 
  1755  0012                     	;# 
  1756  0013                     	;# 
  1757  0015                     	;# 
  1758  0016                     	;# 
  1759  0016                     	;# 
  1760  0017                     	;# 
  1761  0018                     	;# 
  1762  0019                     	;# 
  1763  001A                     	;# 
  1764  001B                     	;# 
  1765  001C                     	;# 
  1766  008C                     	;# 
  1767  008E                     	;# 
  1768  0091                     	;# 
  1769  0092                     	;# 
  1770  0093                     	;# 
  1771  0095                     	;# 
  1772  0096                     	;# 
  1773  0097                     	;# 
  1774  0098                     	;# 
  1775  0099                     	;# 
  1776  009A                     	;# 
  1777  009B                     	;# 
  1778  009B                     	;# 
  1779  009C                     	;# 
  1780  009D                     	;# 
  1781  009E                     	;# 
  1782  009F                     	;# 
  1783  010C                     	;# 
  1784  010E                     	;# 
  1785  0111                     	;# 
  1786  0112                     	;# 
  1787  0113                     	;# 
  1788  0114                     	;# 
  1789  0115                     	;# 
  1790  0116                     	;# 
  1791  0117                     	;# 
  1792  0118                     	;# 
  1793  0119                     	;# 
  1794  011C                     	;# 
  1795  018C                     	;# 
  1796  018E                     	;# 
  1797  0191                     	;# 
  1798  0191                     	;# 
  1799  0192                     	;# 
  1800  0193                     	;# 
  1801  0193                     	;# 
  1802  0194                     	;# 
  1803  0195                     	;# 
  1804  0196                     	;# 
  1805  0197                     	;# 
  1806  0199                     	;# 
  1807  0199                     	;# 
  1808  0199                     	;# 
  1809  019A                     	;# 
  1810  019A                     	;# 
  1811  019A                     	;# 
  1812  019B                     	;# 
  1813  019B                     	;# 
  1814  019B                     	;# 
  1815  019B                     	;# 
  1816  019B                     	;# 
  1817  019C                     	;# 
  1818  019C                     	;# 
  1819  019C                     	;# 
  1820  019D                     	;# 
  1821  019D                     	;# 
  1822  019D                     	;# 
  1823  019E                     	;# 
  1824  019E                     	;# 
  1825  019E                     	;# 
  1826  019F                     	;# 
  1827  019F                     	;# 
  1828  019F                     	;# 
  1829  019F                     	;# 
  1830  019F                     	;# 
  1831  020C                     	;# 
  1832  020E                     	;# 
  1833  0211                     	;# 
  1834  0211                     	;# 
  1835  0212                     	;# 
  1836  0212                     	;# 
  1837  0213                     	;# 
  1838  0213                     	;# 
  1839  0214                     	;# 
  1840  0214                     	;# 
  1841  0215                     	;# 
  1842  0215                     	;# 
  1843  0215                     	;# 
  1844  0215                     	;# 
  1845  0216                     	;# 
  1846  0216                     	;# 
  1847  0217                     	;# 
  1848  0217                     	;# 
  1849  028C                     	;# 
  1850  028E                     	;# 
  1851  0291                     	;# 
  1852  0291                     	;# 
  1853  0292                     	;# 
  1854  0293                     	;# 
  1855  0293                     	;# 
  1856  0298                     	;# 
  1857  0298                     	;# 
  1858  0299                     	;# 
  1859  029A                     	;# 
  1860  029A                     	;# 
  1861  029E                     	;# 
  1862  030C                     	;# 
  1863  030E                     	;# 
  1864  038C                     	;# 
  1865  038E                     	;# 
  1866  0391                     	;# 
  1867  0392                     	;# 
  1868  0393                     	;# 
  1869  0397                     	;# 
  1870  0398                     	;# 
  1871  0399                     	;# 
  1872  0415                     	;# 
  1873  0416                     	;# 
  1874  0417                     	;# 
  1875  041C                     	;# 
  1876  041D                     	;# 
  1877  041E                     	;# 
  1878  0511                     	;# 
  1879  0515                     	;# 
  1880  0617                     	;# 
  1881  0618                     	;# 
  1882  0619                     	;# 
  1883  0619                     	;# 
  1884  061A                     	;# 
  1885  061B                     	;# 
  1886  061C                     	;# 
  1887  061C                     	;# 
  1888  0691                     	;# 
  1889  0692                     	;# 
  1890  0693                     	;# 
  1891  0694                     	;# 
  1892  0695                     	;# 
  1893  0696                     	;# 
  1894  0697                     	;# 
  1895  0698                     	;# 
  1896  0699                     	;# 
  1897  069A                     	;# 
  1898  069B                     	;# 
  1899  069C                     	;# 
  1900  069D                     	;# 
  1901  069E                     	;# 
  1902  069F                     	;# 
  1903  0E0F                     	;# 
  1904  0E10                     	;# 
  1905  0E11                     	;# 
  1906  0E12                     	;# 
  1907  0E13                     	;# 
  1908  0E14                     	;# 
  1909  0E15                     	;# 
  1910  0E17                     	;# 
  1911  0E20                     	;# 
  1912  0E21                     	;# 
  1913  0E22                     	;# 
  1914  0E24                     	;# 
  1915  0E25                     	;# 
  1916  0E28                     	;# 
  1917  0E29                     	;# 
  1918  0E2A                     	;# 
  1919  0E2B                     	;# 
  1920  0E90                     	;# 
  1921  0E91                     	;# 
  1922  0E92                     	;# 
  1923  0E94                     	;# 
  1924  0E95                     	;# 
  1925  0EA0                     	;# 
  1926  0EA1                     	;# 
  1927  0EA2                     	;# 
  1928  0EA3                     	;# 
  1929  0EA4                     	;# 
  1930  0EA5                     	;# 
  1931  0F0F                     	;# 
  1932  0F10                     	;# 
  1933  0F11                     	;# 
  1934  0F12                     	;# 
  1935  0F13                     	;# 
  1936  0F14                     	;# 
  1937  0F15                     	;# 
  1938  0F16                     	;# 
  1939  0F17                     	;# 
  1940  0F18                     	;# 
  1941  0F19                     	;# 
  1942  0F1A                     	;# 
  1943  0F1B                     	;# 
  1944  0F1C                     	;# 
  1945  0F1D                     	;# 
  1946  0F1E                     	;# 
  1947  0F1F                     	;# 
  1948  0F20                     	;# 
  1949  0F21                     	;# 
  1950  0F22                     	;# 
  1951  0F23                     	;# 
  1952  0F24                     	;# 
  1953  0F25                     	;# 
  1954  0F26                     	;# 
  1955  0F27                     	;# 
  1956  0F28                     	;# 
  1957  0F29                     	;# 
  1958  0F2A                     	;# 
  1959  0F2B                     	;# 
  1960  0F2C                     	;# 
  1961  0F2D                     	;# 
  1962  0F9E                     	;# 
  1963  0FE4                     	;# 
  1964  0FE5                     	;# 
  1965  0FE6                     	;# 
  1966  0FE7                     	;# 
  1967  0FE8                     	;# 
  1968  0FE9                     	;# 
  1969  0FEA                     	;# 
  1970  0FEB                     	;# 
  1971  0FED                     	;# 
  1972  0FEE                     	;# 
  1973  0FEF                     	;# 
  1974  0000                     	;# 
  1975  0001                     	;# 
  1976  0002                     	;# 
  1977  0003                     	;# 
  1978  0004                     	;# 
  1979  0005                     	;# 
  1980  0006                     	;# 
  1981  0007                     	;# 
  1982  0008                     	;# 
  1983  0009                     	;# 
  1984  000A                     	;# 
  1985  000B                     	;# 
  1986  000C                     	;# 
  1987  000E                     	;# 
  1988  0011                     	;# 
  1989  0012                     	;# 
  1990  0013                     	;# 
  1991  0015                     	;# 
  1992  0016                     	;# 
  1993  0016                     	;# 
  1994  0017                     	;# 
  1995  0018                     	;# 
  1996  0019                     	;# 
  1997  001A                     	;# 
  1998  001B                     	;# 
  1999  001C                     	;# 
  2000  008C                     	;# 
  2001  008E                     	;# 
  2002  0091                     	;# 
  2003  0092                     	;# 
  2004  0093                     	;# 
  2005  0095                     	;# 
  2006  0096                     	;# 
  2007  0097                     	;# 
  2008  0098                     	;# 
  2009  0099                     	;# 
  2010  009A                     	;# 
  2011  009B                     	;# 
  2012  009B                     	;# 
  2013  009C                     	;# 
  2014  009D                     	;# 
  2015  009E                     	;# 
  2016  009F                     	;# 
  2017  010C                     	;# 
  2018  010E                     	;# 
  2019  0111                     	;# 
  2020  0112                     	;# 
  2021  0113                     	;# 
  2022  0114                     	;# 
  2023  0115                     	;# 
  2024  0116                     	;# 
  2025  0117                     	;# 
  2026  0118                     	;# 
  2027  0119                     	;# 
  2028  011C                     	;# 
  2029  018C                     	;# 
  2030  018E                     	;# 
  2031  0191                     	;# 
  2032  0191                     	;# 
  2033  0192                     	;# 
  2034  0193                     	;# 
  2035  0193                     	;# 
  2036  0194                     	;# 
  2037  0195                     	;# 
  2038  0196                     	;# 
  2039  0197                     	;# 
  2040  0199                     	;# 
  2041  0199                     	;# 
  2042  0199                     	;# 
  2043  019A                     	;# 
  2044  019A                     	;# 
  2045  019A                     	;# 
  2046  019B                     	;# 
  2047  019B                     	;# 
  2048  019B                     	;# 
  2049  019B                     	;# 
  2050  019B                     	;# 
  2051  019C                     	;# 
  2052  019C                     	;# 
  2053  019C                     	;# 
  2054  019D                     	;# 
  2055  019D                     	;# 
  2056  019D                     	;# 
  2057  019E                     	;# 
  2058  019E                     	;# 
  2059  019E                     	;# 
  2060  019F                     	;# 
  2061  019F                     	;# 
  2062  019F                     	;# 
  2063  019F                     	;# 
  2064  019F                     	;# 
  2065  020C                     	;# 
  2066  020E                     	;# 
  2067  0211                     	;# 
  2068  0211                     	;# 
  2069  0212                     	;# 
  2070  0212                     	;# 
  2071  0213                     	;# 
  2072  0213                     	;# 
  2073  0214                     	;# 
  2074  0214                     	;# 
  2075  0215                     	;# 
  2076  0215                     	;# 
  2077  0215                     	;# 
  2078  0215                     	;# 
  2079  0216                     	;# 
  2080  0216                     	;# 
  2081  0217                     	;# 
  2082  0217                     	;# 
  2083  028C                     	;# 
  2084  028E                     	;# 
  2085  0291                     	;# 
  2086  0291                     	;# 
  2087  0292                     	;# 
  2088  0293                     	;# 
  2089  0293                     	;# 
  2090  0298                     	;# 
  2091  0298                     	;# 
  2092  0299                     	;# 
  2093  029A                     	;# 
  2094  029A                     	;# 
  2095  029E                     	;# 
  2096  030C                     	;# 
  2097  030E                     	;# 
  2098  038C                     	;# 
  2099  038E                     	;# 
  2100  0391                     	;# 
  2101  0392                     	;# 
  2102  0393                     	;# 
  2103  0397                     	;# 
  2104  0398                     	;# 
  2105  0399                     	;# 
  2106  0415                     	;# 
  2107  0416                     	;# 
  2108  0417                     	;# 
  2109  041C                     	;# 
  2110  041D                     	;# 
  2111  041E                     	;# 
  2112  0511                     	;# 
  2113  0515                     	;# 
  2114  0617                     	;# 
  2115  0618                     	;# 
  2116  0619                     	;# 
  2117  0619                     	;# 
  2118  061A                     	;# 
  2119  061B                     	;# 
  2120  061C                     	;# 
  2121  061C                     	;# 
  2122  0691                     	;# 
  2123  0692                     	;# 
  2124  0693                     	;# 
  2125  0694                     	;# 
  2126  0695                     	;# 
  2127  0696                     	;# 
  2128  0697                     	;# 
  2129  0698                     	;# 
  2130  0699                     	;# 
  2131  069A                     	;# 
  2132  069B                     	;# 
  2133  069C                     	;# 
  2134  069D                     	;# 
  2135  069E                     	;# 
  2136  069F                     	;# 
  2137  0E0F                     	;# 
  2138  0E10                     	;# 
  2139  0E11                     	;# 
  2140  0E12                     	;# 
  2141  0E13                     	;# 
  2142  0E14                     	;# 
  2143  0E15                     	;# 
  2144  0E17                     	;# 
  2145  0E20                     	;# 
  2146  0E21                     	;# 
  2147  0E22                     	;# 
  2148  0E24                     	;# 
  2149  0E25                     	;# 
  2150  0E28                     	;# 
  2151  0E29                     	;# 
  2152  0E2A                     	;# 
  2153  0E2B                     	;# 
  2154  0E90                     	;# 
  2155  0E91                     	;# 
  2156  0E92                     	;# 
  2157  0E94                     	;# 
  2158  0E95                     	;# 
  2159  0EA0                     	;# 
  2160  0EA1                     	;# 
  2161  0EA2                     	;# 
  2162  0EA3                     	;# 
  2163  0EA4                     	;# 
  2164  0EA5                     	;# 
  2165  0F0F                     	;# 
  2166  0F10                     	;# 
  2167  0F11                     	;# 
  2168  0F12                     	;# 
  2169  0F13                     	;# 
  2170  0F14                     	;# 
  2171  0F15                     	;# 
  2172  0F16                     	;# 
  2173  0F17                     	;# 
  2174  0F18                     	;# 
  2175  0F19                     	;# 
  2176  0F1A                     	;# 
  2177  0F1B                     	;# 
  2178  0F1C                     	;# 
  2179  0F1D                     	;# 
  2180  0F1E                     	;# 
  2181  0F1F                     	;# 
  2182  0F20                     	;# 
  2183  0F21                     	;# 
  2184  0F22                     	;# 
  2185  0F23                     	;# 
  2186  0F24                     	;# 
  2187  0F25                     	;# 
  2188  0F26                     	;# 
  2189  0F27                     	;# 
  2190  0F28                     	;# 
  2191  0F29                     	;# 
  2192  0F2A                     	;# 
  2193  0F2B                     	;# 
  2194  0F2C                     	;# 
  2195  0F2D                     	;# 
  2196  0F9E                     	;# 
  2197  0FE4                     	;# 
  2198  0FE5                     	;# 
  2199  0FE6                     	;# 
  2200  0FE7                     	;# 
  2201  0FE8                     	;# 
  2202  0FE9                     	;# 
  2203  0FEA                     	;# 
  2204  0FEB                     	;# 
  2205  0FED                     	;# 
  2206  0FEE                     	;# 
  2207  0FEF                     	;# 
  2208  0000                     	;# 
  2209  0001                     	;# 
  2210  0002                     	;# 
  2211  0003                     	;# 
  2212  0004                     	;# 
  2213  0005                     	;# 
  2214  0006                     	;# 
  2215  0007                     	;# 
  2216  0008                     	;# 
  2217  0009                     	;# 
  2218  000A                     	;# 
  2219  000B                     	;# 
  2220  000C                     	;# 
  2221  000E                     	;# 
  2222  0011                     	;# 
  2223  0012                     	;# 
  2224  0013                     	;# 
  2225  0015                     	;# 
  2226  0016                     	;# 
  2227  0016                     	;# 
  2228  0017                     	;# 
  2229  0018                     	;# 
  2230  0019                     	;# 
  2231  001A                     	;# 
  2232  001B                     	;# 
  2233  001C                     	;# 
  2234  008C                     	;# 
  2235  008E                     	;# 
  2236  0091                     	;# 
  2237  0092                     	;# 
  2238  0093                     	;# 
  2239  0095                     	;# 
  2240  0096                     	;# 
  2241  0097                     	;# 
  2242  0098                     	;# 
  2243  0099                     	;# 
  2244  009A                     	;# 
  2245  009B                     	;# 
  2246  009B                     	;# 
  2247  009C                     	;# 
  2248  009D                     	;# 
  2249  009E                     	;# 
  2250  009F                     	;# 
  2251  010C                     	;# 
  2252  010E                     	;# 
  2253  0111                     	;# 
  2254  0112                     	;# 
  2255  0113                     	;# 
  2256  0114                     	;# 
  2257  0115                     	;# 
  2258  0116                     	;# 
  2259  0117                     	;# 
  2260  0118                     	;# 
  2261  0119                     	;# 
  2262  011C                     	;# 
  2263  018C                     	;# 
  2264  018E                     	;# 
  2265  0191                     	;# 
  2266  0191                     	;# 
  2267  0192                     	;# 
  2268  0193                     	;# 
  2269  0193                     	;# 
  2270  0194                     	;# 
  2271  0195                     	;# 
  2272  0196                     	;# 
  2273  0197                     	;# 
  2274  0199                     	;# 
  2275  0199                     	;# 
  2276  0199                     	;# 
  2277  019A                     	;# 
  2278  019A                     	;# 
  2279  019A                     	;# 
  2280  019B                     	;# 
  2281  019B                     	;# 
  2282  019B                     	;# 
  2283  019B                     	;# 
  2284  019B                     	;# 
  2285  019C                     	;# 
  2286  019C                     	;# 
  2287  019C                     	;# 
  2288  019D                     	;# 
  2289  019D                     	;# 
  2290  019D                     	;# 
  2291  019E                     	;# 
  2292  019E                     	;# 
  2293  019E                     	;# 
  2294  019F                     	;# 
  2295  019F                     	;# 
  2296  019F                     	;# 
  2297  019F                     	;# 
  2298  019F                     	;# 
  2299  020C                     	;# 
  2300  020E                     	;# 
  2301  0211                     	;# 
  2302  0211                     	;# 
  2303  0212                     	;# 
  2304  0212                     	;# 
  2305  0213                     	;# 
  2306  0213                     	;# 
  2307  0214                     	;# 
  2308  0214                     	;# 
  2309  0215                     	;# 
  2310  0215                     	;# 
  2311  0215                     	;# 
  2312  0215                     	;# 
  2313  0216                     	;# 
  2314  0216                     	;# 
  2315  0217                     	;# 
  2316  0217                     	;# 
  2317  028C                     	;# 
  2318  028E                     	;# 
  2319  0291                     	;# 
  2320  0291                     	;# 
  2321  0292                     	;# 
  2322  0293                     	;# 
  2323  0293                     	;# 
  2324  0298                     	;# 
  2325  0298                     	;# 
  2326  0299                     	;# 
  2327  029A                     	;# 
  2328  029A                     	;# 
  2329  029E                     	;# 
  2330  030C                     	;# 
  2331  030E                     	;# 
  2332  038C                     	;# 
  2333  038E                     	;# 
  2334  0391                     	;# 
  2335  0392                     	;# 
  2336  0393                     	;# 
  2337  0397                     	;# 
  2338  0398                     	;# 
  2339  0399                     	;# 
  2340  0415                     	;# 
  2341  0416                     	;# 
  2342  0417                     	;# 
  2343  041C                     	;# 
  2344  041D                     	;# 
  2345  041E                     	;# 
  2346  0511                     	;# 
  2347  0515                     	;# 
  2348  0617                     	;# 
  2349  0618                     	;# 
  2350  0619                     	;# 
  2351  0619                     	;# 
  2352  061A                     	;# 
  2353  061B                     	;# 
  2354  061C                     	;# 
  2355  061C                     	;# 
  2356  0691                     	;# 
  2357  0692                     	;# 
  2358  0693                     	;# 
  2359  0694                     	;# 
  2360  0695                     	;# 
  2361  0696                     	;# 
  2362  0697                     	;# 
  2363  0698                     	;# 
  2364  0699                     	;# 
  2365  069A                     	;# 
  2366  069B                     	;# 
  2367  069C                     	;# 
  2368  069D                     	;# 
  2369  069E                     	;# 
  2370  069F                     	;# 
  2371  0E0F                     	;# 
  2372  0E10                     	;# 
  2373  0E11                     	;# 
  2374  0E12                     	;# 
  2375  0E13                     	;# 
  2376  0E14                     	;# 
  2377  0E15                     	;# 
  2378  0E17                     	;# 
  2379  0E20                     	;# 
  2380  0E21                     	;# 
  2381  0E22                     	;# 
  2382  0E24                     	;# 
  2383  0E25                     	;# 
  2384  0E28                     	;# 
  2385  0E29                     	;# 
  2386  0E2A                     	;# 
  2387  0E2B                     	;# 
  2388  0E90                     	;# 
  2389  0E91                     	;# 
  2390  0E92                     	;# 
  2391  0E94                     	;# 
  2392  0E95                     	;# 
  2393  0EA0                     	;# 
  2394  0EA1                     	;# 
  2395  0EA2                     	;# 
  2396  0EA3                     	;# 
  2397  0EA4                     	;# 
  2398  0EA5                     	;# 
  2399  0F0F                     	;# 
  2400  0F10                     	;# 
  2401  0F11                     	;# 
  2402  0F12                     	;# 
  2403  0F13                     	;# 
  2404  0F14                     	;# 
  2405  0F15                     	;# 
  2406  0F16                     	;# 
  2407  0F17                     	;# 
  2408  0F18                     	;# 
  2409  0F19                     	;# 
  2410  0F1A                     	;# 
  2411  0F1B                     	;# 
  2412  0F1C                     	;# 
  2413  0F1D                     	;# 
  2414  0F1E                     	;# 
  2415  0F1F                     	;# 
  2416  0F20                     	;# 
  2417  0F21                     	;# 
  2418  0F22                     	;# 
  2419  0F23                     	;# 
  2420  0F24                     	;# 
  2421  0F25                     	;# 
  2422  0F26                     	;# 
  2423  0F27                     	;# 
  2424  0F28                     	;# 
  2425  0F29                     	;# 
  2426  0F2A                     	;# 
  2427  0F2B                     	;# 
  2428  0F2C                     	;# 
  2429  0F2D                     	;# 
  2430  0F9E                     	;# 
  2431  0FE4                     	;# 
  2432  0FE5                     	;# 
  2433  0FE6                     	;# 
  2434  0FE7                     	;# 
  2435  0FE8                     	;# 
  2436  0FE9                     	;# 
  2437  0FEA                     	;# 
  2438  0FEB                     	;# 
  2439  0FED                     	;# 
  2440  0FEE                     	;# 
  2441  0FEF                     	;# 
  2442  0000                     	;# 
  2443  0001                     	;# 
  2444  0002                     	;# 
  2445  0003                     	;# 
  2446  0004                     	;# 
  2447  0005                     	;# 
  2448  0006                     	;# 
  2449  0007                     	;# 
  2450  0008                     	;# 
  2451  0009                     	;# 
  2452  000A                     	;# 
  2453  000B                     	;# 
  2454  000C                     	;# 
  2455  000E                     	;# 
  2456  0011                     	;# 
  2457  0012                     	;# 
  2458  0013                     	;# 
  2459  0015                     	;# 
  2460  0016                     	;# 
  2461  0016                     	;# 
  2462  0017                     	;# 
  2463  0018                     	;# 
  2464  0019                     	;# 
  2465  001A                     	;# 
  2466  001B                     	;# 
  2467  001C                     	;# 
  2468  008C                     	;# 
  2469  008E                     	;# 
  2470  0091                     	;# 
  2471  0092                     	;# 
  2472  0093                     	;# 
  2473  0095                     	;# 
  2474  0096                     	;# 
  2475  0097                     	;# 
  2476  0098                     	;# 
  2477  0099                     	;# 
  2478  009A                     	;# 
  2479  009B                     	;# 
  2480  009B                     	;# 
  2481  009C                     	;# 
  2482  009D                     	;# 
  2483  009E                     	;# 
  2484  009F                     	;# 
  2485  010C                     	;# 
  2486  010E                     	;# 
  2487  0111                     	;# 
  2488  0112                     	;# 
  2489  0113                     	;# 
  2490  0114                     	;# 
  2491  0115                     	;# 
  2492  0116                     	;# 
  2493  0117                     	;# 
  2494  0118                     	;# 
  2495  0119                     	;# 
  2496  011C                     	;# 
  2497  018C                     	;# 
  2498  018E                     	;# 
  2499  0191                     	;# 
  2500  0191                     	;# 
  2501  0192                     	;# 
  2502  0193                     	;# 
  2503  0193                     	;# 
  2504  0194                     	;# 
  2505  0195                     	;# 
  2506  0196                     	;# 
  2507  0197                     	;# 
  2508  0199                     	;# 
  2509  0199                     	;# 
  2510  0199                     	;# 
  2511  019A                     	;# 
  2512  019A                     	;# 
  2513  019A                     	;# 
  2514  019B                     	;# 
  2515  019B                     	;# 
  2516  019B                     	;# 
  2517  019B                     	;# 
  2518  019B                     	;# 
  2519  019C                     	;# 
  2520  019C                     	;# 
  2521  019C                     	;# 
  2522  019D                     	;# 
  2523  019D                     	;# 
  2524  019D                     	;# 
  2525  019E                     	;# 
  2526  019E                     	;# 
  2527  019E                     	;# 
  2528  019F                     	;# 
  2529  019F                     	;# 
  2530  019F                     	;# 
  2531  019F                     	;# 
  2532  019F                     	;# 
  2533  020C                     	;# 
  2534  020E                     	;# 
  2535  0211                     	;# 
  2536  0211                     	;# 
  2537  0212                     	;# 
  2538  0212                     	;# 
  2539  0213                     	;# 
  2540  0213                     	;# 
  2541  0214                     	;# 
  2542  0214                     	;# 
  2543  0215                     	;# 
  2544  0215                     	;# 
  2545  0215                     	;# 
  2546  0215                     	;# 
  2547  0216                     	;# 
  2548  0216                     	;# 
  2549  0217                     	;# 
  2550  0217                     	;# 
  2551  028C                     	;# 
  2552  028E                     	;# 
  2553  0291                     	;# 
  2554  0291                     	;# 
  2555  0292                     	;# 
  2556  0293                     	;# 
  2557  0293                     	;# 
  2558  0298                     	;# 
  2559  0298                     	;# 
  2560  0299                     	;# 
  2561  029A                     	;# 
  2562  029A                     	;# 
  2563  029E                     	;# 
  2564  030C                     	;# 
  2565  030E                     	;# 
  2566  038C                     	;# 
  2567  038E                     	;# 
  2568  0391                     	;# 
  2569  0392                     	;# 
  2570  0393                     	;# 
  2571  0397                     	;# 
  2572  0398                     	;# 
  2573  0399                     	;# 
  2574  0415                     	;# 
  2575  0416                     	;# 
  2576  0417                     	;# 
  2577  041C                     	;# 
  2578  041D                     	;# 
  2579  041E                     	;# 
  2580  0511                     	;# 
  2581  0515                     	;# 
  2582  0617                     	;# 
  2583  0618                     	;# 
  2584  0619                     	;# 
  2585  0619                     	;# 
  2586  061A                     	;# 
  2587  061B                     	;# 
  2588  061C                     	;# 
  2589  061C                     	;# 
  2590  0691                     	;# 
  2591  0692                     	;# 
  2592  0693                     	;# 
  2593  0694                     	;# 
  2594  0695                     	;# 
  2595  0696                     	;# 
  2596  0697                     	;# 
  2597  0698                     	;# 
  2598  0699                     	;# 
  2599  069A                     	;# 
  2600  069B                     	;# 
  2601  069C                     	;# 
  2602  069D                     	;# 
  2603  069E                     	;# 
  2604  069F                     	;# 
  2605  0E0F                     	;# 
  2606  0E10                     	;# 
  2607  0E11                     	;# 
  2608  0E12                     	;# 
  2609  0E13                     	;# 
  2610  0E14                     	;# 
  2611  0E15                     	;# 
  2612  0E17                     	;# 
  2613  0E20                     	;# 
  2614  0E21                     	;# 
  2615  0E22                     	;# 
  2616  0E24                     	;# 
  2617  0E25                     	;# 
  2618  0E28                     	;# 
  2619  0E29                     	;# 
  2620  0E2A                     	;# 
  2621  0E2B                     	;# 
  2622  0E90                     	;# 
  2623  0E91                     	;# 
  2624  0E92                     	;# 
  2625  0E94                     	;# 
  2626  0E95                     	;# 
  2627  0EA0                     	;# 
  2628  0EA1                     	;# 
  2629  0EA2                     	;# 
  2630  0EA3                     	;# 
  2631  0EA4                     	;# 
  2632  0EA5                     	;# 
  2633  0F0F                     	;# 
  2634  0F10                     	;# 
  2635  0F11                     	;# 
  2636  0F12                     	;# 
  2637  0F13                     	;# 
  2638  0F14                     	;# 
  2639  0F15                     	;# 
  2640  0F16                     	;# 
  2641  0F17                     	;# 
  2642  0F18                     	;# 
  2643  0F19                     	;# 
  2644  0F1A                     	;# 
  2645  0F1B                     	;# 
  2646  0F1C                     	;# 
  2647  0F1D                     	;# 
  2648  0F1E                     	;# 
  2649  0F1F                     	;# 
  2650  0F20                     	;# 
  2651  0F21                     	;# 
  2652  0F22                     	;# 
  2653  0F23                     	;# 
  2654  0F24                     	;# 
  2655  0F25                     	;# 
  2656  0F26                     	;# 
  2657  0F27                     	;# 
  2658  0F28                     	;# 
  2659  0F29                     	;# 
  2660  0F2A                     	;# 
  2661  0F2B                     	;# 
  2662  0F2C                     	;# 
  2663  0F2D                     	;# 
  2664  0F9E                     	;# 
  2665  0FE4                     	;# 
  2666  0FE5                     	;# 
  2667  0FE6                     	;# 
  2668  0FE7                     	;# 
  2669  0FE8                     	;# 
  2670  0FE9                     	;# 
  2671  0FEA                     	;# 
  2672  0FEB                     	;# 
  2673  0FED                     	;# 
  2674  0FEE                     	;# 
  2675  0FEF                     	;# 
  2676                           
  2677                           	psect	idataBANK1
  2678  1859                     __pidataBANK1:	
  2679                           
  2680                           ;initializer for _MEM
  2681  1859  3400               	retlw	0
  2682  185A  3400               	retlw	0
  2683  185B  3480               	retlw	128
  2684  185C  3425               	retlw	37
  2685                           
  2686                           	psect	idataBANK4
  2687  1855                     __pidataBANK4:	
  2688                           
  2689                           ;initializer for _BAUD
  2690  1855  3480               	retlw	128
  2691  1856  3425               	retlw	37
  2692  1857  3400               	retlw	0
  2693  1858  3400               	retlw	0
  2694                           
  2695                           	psect	stringtext
  2696  0700                     __pstringtext:	
  2697  0700                     _ScanCodeFunctionNoE0:	
  2698  0700  3400               	retlw	0
  2699  0701  3411               	retlw	17
  2700  0702  3400               	retlw	0
  2701  0703  340C               	retlw	12
  2702  0704  340A               	retlw	10
  2703  0705  3406               	retlw	6
  2704  0706  3407               	retlw	7
  2705  0707  3414               	retlw	20
  2706  0708  3400               	retlw	0
  2707  0709  3412               	retlw	18
  2708  070A  3410               	retlw	16
  2709  070B  340E               	retlw	14
  2710  070C  340B               	retlw	11
  2711  070D  3400               	retlw	0
  2712  070E  3400               	retlw	0
  2713  070F  3400               	retlw	0
  2714  0710  3400               	retlw	0
  2715  0711  341C               	retlw	28
  2716  0712  3400               	retlw	0
  2717  0713  3400               	retlw	0
  2718  0714  341A               	retlw	26
  2719  0715  3400               	retlw	0
  2720  0716  3400               	retlw	0
  2721  0717  3400               	retlw	0
  2722  0718  3400               	retlw	0
  2723  0719  3400               	retlw	0
  2724  071A  3400               	retlw	0
  2725  071B  3400               	retlw	0
  2726  071C  3400               	retlw	0
  2727  071D  3400               	retlw	0
  2728  071E  3400               	retlw	0
  2729  071F  3400               	retlw	0
  2730  0720  3400               	retlw	0
  2731  0721  3400               	retlw	0
  2732  0722  3400               	retlw	0
  2733  0723  3400               	retlw	0
  2734  0724  3400               	retlw	0
  2735  0725  3400               	retlw	0
  2736  0726  3400               	retlw	0
  2737  0727  3400               	retlw	0
  2738  0728  3400               	retlw	0
  2739  0729  3400               	retlw	0
  2740  072A  3400               	retlw	0
  2741  072B  3400               	retlw	0
  2742  072C  3400               	retlw	0
  2743  072D  3400               	retlw	0
  2744  072E  3400               	retlw	0
  2745  072F  3400               	retlw	0
  2746  0730  3400               	retlw	0
  2747  0731  3400               	retlw	0
  2748  0732  3400               	retlw	0
  2749  0733  3400               	retlw	0
  2750  0734  3400               	retlw	0
  2751  0735  3400               	retlw	0
  2752  0736  3400               	retlw	0
  2753  0737  3400               	retlw	0
  2754  0738  3400               	retlw	0
  2755  0739  3400               	retlw	0
  2756  073A  3400               	retlw	0
  2757  073B  3400               	retlw	0
  2758  073C  3400               	retlw	0
  2759  073D  3400               	retlw	0
  2760  073E  3400               	retlw	0
  2761  073F  3400               	retlw	0
  2762  0740  3400               	retlw	0
  2763  0741  3400               	retlw	0
  2764  0742  3400               	retlw	0
  2765  0743  3400               	retlw	0
  2766  0744  3400               	retlw	0
  2767  0745  3400               	retlw	0
  2768  0746  3400               	retlw	0
  2769  0747  3400               	retlw	0
  2770  0748  3400               	retlw	0
  2771  0749  3400               	retlw	0
  2772  074A  3400               	retlw	0
  2773  074B  3400               	retlw	0
  2774  074C  3400               	retlw	0
  2775  074D  3400               	retlw	0
  2776  074E  3400               	retlw	0
  2777  074F  3400               	retlw	0
  2778  0750  3400               	retlw	0
  2779  0751  3400               	retlw	0
  2780  0752  3400               	retlw	0
  2781  0753  3400               	retlw	0
  2782  0754  3400               	retlw	0
  2783  0755  3400               	retlw	0
  2784  0756  3400               	retlw	0
  2785  0757  3400               	retlw	0
  2786  0758  3400               	retlw	0
  2787  0759  3400               	retlw	0
  2788  075A  3400               	retlw	0
  2789  075B  3400               	retlw	0
  2790  075C  3400               	retlw	0
  2791  075D  3400               	retlw	0
  2792  075E  3400               	retlw	0
  2793  075F  3400               	retlw	0
  2794  0760  3400               	retlw	0
  2795  0761  3400               	retlw	0
  2796  0762  3400               	retlw	0
  2797  0763  3400               	retlw	0
  2798  0764  3400               	retlw	0
  2799  0765  3400               	retlw	0
  2800  0766  3400               	retlw	0
  2801  0767  3400               	retlw	0
  2802  0768  3400               	retlw	0
  2803  0769  3400               	retlw	0
  2804  076A  3400               	retlw	0
  2805  076B  3400               	retlw	0
  2806  076C  3400               	retlw	0
  2807  076D  3400               	retlw	0
  2808  076E  3400               	retlw	0
  2809  076F  3400               	retlw	0
  2810  0770  3400               	retlw	0
  2811  0771  3400               	retlw	0
  2812  0772  3400               	retlw	0
  2813  0773  3400               	retlw	0
  2814  0774  3400               	retlw	0
  2815  0775  3400               	retlw	0
  2816  0776  3400               	retlw	0
  2817  0777  3400               	retlw	0
  2818  0778  3413               	retlw	19
  2819  0779  3400               	retlw	0
  2820  077A  3400               	retlw	0
  2821  077B  3400               	retlw	0
  2822  077C  3400               	retlw	0
  2823  077D  3400               	retlw	0
  2824  077E  3400               	retlw	0
  2825  077F  3400               	retlw	0
  2826  0780  3400               	retlw	0
  2827  0781  3400               	retlw	0
  2828  0782  3400               	retlw	0
  2829  0783  340F               	retlw	15
  2830  0784                     __end_of_ScanCodeFunctionNoE0:	
  2831  0784                     _ScanCode:	
  2832  0784  3409               	retlw	9
  2833  0785  3460               	retlw	96
  2834  0786  3400               	retlw	0
  2835  0787  3400               	retlw	0
  2836  0788  3400               	retlw	0
  2837  0789  3400               	retlw	0
  2838  078A  3400               	retlw	0
  2839  078B  3400               	retlw	0
  2840  078C  3471               	retlw	113
  2841  078D  3431               	retlw	49
  2842  078E  3400               	retlw	0
  2843  078F  3400               	retlw	0
  2844  0790  3400               	retlw	0
  2845  0791  347A               	retlw	122
  2846  0792  3473               	retlw	115
  2847  0793  3461               	retlw	97
  2848  0794  3477               	retlw	119
  2849  0795  3432               	retlw	50
  2850  0796  3400               	retlw	0
  2851  0797  3400               	retlw	0
  2852  0798  3463               	retlw	99
  2853  0799  3478               	retlw	120
  2854  079A  3464               	retlw	100
  2855  079B  3465               	retlw	101
  2856  079C  3434               	retlw	52
  2857  079D  3433               	retlw	51
  2858  079E  3400               	retlw	0
  2859  079F  3400               	retlw	0
  2860  07A0  3420               	retlw	32
  2861  07A1  3476               	retlw	118
  2862  07A2  3466               	retlw	102
  2863  07A3  3474               	retlw	116
  2864  07A4  3472               	retlw	114
  2865  07A5  3435               	retlw	53
  2866  07A6  3400               	retlw	0
  2867  07A7  3400               	retlw	0
  2868  07A8  346E               	retlw	110
  2869  07A9  3462               	retlw	98
  2870  07AA  3468               	retlw	104
  2871  07AB  3467               	retlw	103
  2872  07AC  3479               	retlw	121
  2873  07AD  3436               	retlw	54
  2874  07AE  3400               	retlw	0
  2875  07AF  3400               	retlw	0
  2876  07B0  3400               	retlw	0
  2877  07B1  346D               	retlw	109
  2878  07B2  346A               	retlw	106
  2879  07B3  3475               	retlw	117
  2880  07B4  3437               	retlw	55
  2881  07B5  3438               	retlw	56
  2882  07B6  3400               	retlw	0
  2883  07B7  3400               	retlw	0
  2884  07B8  342C               	retlw	44
  2885  07B9  346B               	retlw	107
  2886  07BA  3469               	retlw	105
  2887  07BB  346F               	retlw	111
  2888  07BC  3430               	retlw	48
  2889  07BD  3439               	retlw	57
  2890  07BE  3400               	retlw	0
  2891  07BF  3400               	retlw	0
  2892  07C0  342E               	retlw	46
  2893  07C1  342F               	retlw	47
  2894  07C2  346C               	retlw	108
  2895  07C3  343B               	retlw	59
  2896  07C4  3470               	retlw	112
  2897  07C5  342D               	retlw	45
  2898  07C6  3400               	retlw	0
  2899  07C7  3400               	retlw	0
  2900  07C8  3400               	retlw	0
  2901  07C9  3427               	retlw	39
  2902  07CA  3400               	retlw	0
  2903  07CB  345B               	retlw	91
  2904  07CC  343D               	retlw	61
  2905  07CD  3400               	retlw	0
  2906  07CE  3400               	retlw	0
  2907  07CF  3400               	retlw	0
  2908  07D0  3400               	retlw	0
  2909  07D1  340D               	retlw	13
  2910  07D2  345D               	retlw	93
  2911  07D3  3400               	retlw	0
  2912  07D4  345C               	retlw	92
  2913  07D5  3400               	retlw	0
  2914  07D6  3400               	retlw	0
  2915  07D7  3400               	retlw	0
  2916  07D8  3400               	retlw	0
  2917  07D9  3400               	retlw	0
  2918  07DA  3400               	retlw	0
  2919  07DB  3400               	retlw	0
  2920  07DC  3400               	retlw	0
  2921  07DD  3408               	retlw	8
  2922  07DE  3400               	retlw	0
  2923  07DF  3400               	retlw	0
  2924  07E0  3431               	retlw	49
  2925  07E1  3400               	retlw	0
  2926  07E2  3434               	retlw	52
  2927  07E3  3437               	retlw	55
  2928  07E4  3400               	retlw	0
  2929  07E5  3400               	retlw	0
  2930  07E6  3400               	retlw	0
  2931  07E7  3430               	retlw	48
  2932  07E8  342E               	retlw	46
  2933  07E9  3432               	retlw	50
  2934  07EA  3435               	retlw	53
  2935  07EB  3436               	retlw	54
  2936  07EC  3438               	retlw	56
  2937  07ED  341B               	retlw	27
  2938  07EE  3400               	retlw	0
  2939  07EF  3400               	retlw	0
  2940  07F0  342B               	retlw	43
  2941  07F1  3433               	retlw	51
  2942  07F2  342D               	retlw	45
  2943  07F3  342A               	retlw	42
  2944  07F4  3439               	retlw	57
  2945  07F5                     __end_of_ScanCode:	
  2946  07F5                     _ScanCodeSHIFT:	
  2947  07F5  3409               	retlw	9
  2948  07F6  347E               	retlw	126
  2949  07F7  3400               	retlw	0
  2950  07F8  3400               	retlw	0
  2951  07F9  3400               	retlw	0
  2952  07FA  3400               	retlw	0
  2953  07FB  3400               	retlw	0
  2954  07FC  3400               	retlw	0
  2955  07FD  3451               	retlw	81
  2956  07FE  3421               	retlw	33
  2957  07FF  3400               	retlw	0
  2958  0800  3400               	retlw	0
  2959  0801  3400               	retlw	0
  2960  0802  345A               	retlw	90
  2961  0803  3453               	retlw	83
  2962  0804  3441               	retlw	65
  2963  0805  3457               	retlw	87
  2964  0806  3440               	retlw	64
  2965  0807  3400               	retlw	0
  2966  0808  3400               	retlw	0
  2967  0809  3443               	retlw	67
  2968  080A  3458               	retlw	88
  2969  080B  3444               	retlw	68
  2970  080C  3445               	retlw	69
  2971  080D  3424               	retlw	36
  2972  080E  3423               	retlw	35
  2973  080F  3400               	retlw	0
  2974  0810  3400               	retlw	0
  2975  0811  3420               	retlw	32
  2976  0812  3456               	retlw	86
  2977  0813  3446               	retlw	70
  2978  0814  3454               	retlw	84
  2979  0815  3452               	retlw	82
  2980  0816  3425               	retlw	37
  2981  0817  3400               	retlw	0
  2982  0818  3400               	retlw	0
  2983  0819  344E               	retlw	78
  2984  081A  3442               	retlw	66
  2985  081B  3448               	retlw	72
  2986  081C  3447               	retlw	71
  2987  081D  3459               	retlw	89
  2988  081E  345E               	retlw	94
  2989  081F  3400               	retlw	0
  2990  0820  3400               	retlw	0
  2991  0821  3400               	retlw	0
  2992  0822  344D               	retlw	77
  2993  0823  344A               	retlw	74
  2994  0824  3455               	retlw	85
  2995  0825  3426               	retlw	38
  2996  0826  342A               	retlw	42
  2997  0827  3400               	retlw	0
  2998  0828  3400               	retlw	0
  2999  0829  343C               	retlw	60
  3000  082A  344B               	retlw	75
  3001  082B  3449               	retlw	73
  3002  082C  344F               	retlw	79
  3003  082D  3429               	retlw	41
  3004  082E  3428               	retlw	40
  3005  082F  3400               	retlw	0
  3006  0830  3400               	retlw	0
  3007  0831  343E               	retlw	62
  3008  0832  343F               	retlw	63
  3009  0833  344C               	retlw	76
  3010  0834  343A               	retlw	58
  3011  0835  3450               	retlw	80
  3012  0836  345F               	retlw	95
  3013  0837  3400               	retlw	0
  3014  0838  3400               	retlw	0
  3015  0839  3400               	retlw	0
  3016  083A  3422               	retlw	34
  3017  083B  3400               	retlw	0
  3018  083C  347B               	retlw	123
  3019  083D  342B               	retlw	43
  3020  083E  3400               	retlw	0
  3021  083F  3400               	retlw	0
  3022  0840  3400               	retlw	0
  3023  0841  3400               	retlw	0
  3024  0842  340D               	retlw	13
  3025  0843  347D               	retlw	125
  3026  0844  3400               	retlw	0
  3027  0845  347C               	retlw	124
  3028  0846  3400               	retlw	0
  3029  0847  3400               	retlw	0
  3030  0848  3400               	retlw	0
  3031  0849  3400               	retlw	0
  3032  084A  3400               	retlw	0
  3033  084B  3400               	retlw	0
  3034  084C  3400               	retlw	0
  3035  084D  3400               	retlw	0
  3036  084E  3408               	retlw	8
  3037  084F  3400               	retlw	0
  3038  0850  3400               	retlw	0
  3039  0851  3431               	retlw	49
  3040  0852  3400               	retlw	0
  3041  0853  3434               	retlw	52
  3042  0854  3437               	retlw	55
  3043  0855  3400               	retlw	0
  3044  0856  3400               	retlw	0
  3045  0857  3400               	retlw	0
  3046  0858  3430               	retlw	48
  3047  0859  342E               	retlw	46
  3048  085A  3432               	retlw	50
  3049  085B  3435               	retlw	53
  3050  085C  3436               	retlw	54
  3051  085D  3438               	retlw	56
  3052  085E  341B               	retlw	27
  3053  085F  3400               	retlw	0
  3054  0860  3400               	retlw	0
  3055  0861  342B               	retlw	43
  3056  0862  3433               	retlw	51
  3057  0863  342D               	retlw	45
  3058  0864  342A               	retlw	42
  3059  0865  3439               	retlw	57
  3060  0866                     __end_of_ScanCodeSHIFT:	
  3061  0866                     _ScanCodeFunctionE0:	
  3062  0866  341E               	retlw	30
  3063  0867  3400               	retlw	0
  3064  0868  3400               	retlw	0
  3065  0869  341F               	retlw	31
  3066  086A  3400               	retlw	0
  3067  086B  3400               	retlw	0
  3068  086C  3400               	retlw	0
  3069  086D  3400               	retlw	0
  3070  086E  3400               	retlw	0
  3071  086F  3400               	retlw	0
  3072  0870  3400               	retlw	0
  3073  0871  3400               	retlw	0
  3074  0872  3400               	retlw	0
  3075  0873  3400               	retlw	0
  3076  0874  3419               	retlw	25
  3077  0875  3400               	retlw	0
  3078  0876  3400               	retlw	0
  3079  0877  3400               	retlw	0
  3080  0878  3400               	retlw	0
  3081  0879  3400               	retlw	0
  3082  087A  3400               	retlw	0
  3083  087B  3400               	retlw	0
  3084  087C  341D               	retlw	29
  3085  087D  3400               	retlw	0
  3086  087E  3400               	retlw	0
  3087  087F  3400               	retlw	0
  3088  0880  3400               	retlw	0
  3089  0881  3400               	retlw	0
  3090  0882  3400               	retlw	0
  3091  0883  3400               	retlw	0
  3092  0884  3400               	retlw	0
  3093  0885  3400               	retlw	0
  3094  0886  3400               	retlw	0
  3095  0887  3400               	retlw	0
  3096  0888  3400               	retlw	0
  3097  0889  3400               	retlw	0
  3098  088A  3400               	retlw	0
  3099  088B  3400               	retlw	0
  3100  088C  3400               	retlw	0
  3101  088D  3400               	retlw	0
  3102  088E  3400               	retlw	0
  3103  088F  3400               	retlw	0
  3104  0890  3400               	retlw	0
  3105  0891  3400               	retlw	0
  3106  0892  3400               	retlw	0
  3107  0893  3400               	retlw	0
  3108  0894  3400               	retlw	0
  3109  0895  3400               	retlw	0
  3110  0896  3400               	retlw	0
  3111  0897  3400               	retlw	0
  3112  0898  3400               	retlw	0
  3113  0899  3400               	retlw	0
  3114  089A  3400               	retlw	0
  3115  089B  3400               	retlw	0
  3116  089C  3400               	retlw	0
  3117  089D  3400               	retlw	0
  3118  089E  3400               	retlw	0
  3119  089F  342F               	retlw	47
  3120  08A0  3400               	retlw	0
  3121  08A1  3400               	retlw	0
  3122  08A2  3400               	retlw	0
  3123  08A3  3400               	retlw	0
  3124  08A4  3400               	retlw	0
  3125  08A5  3400               	retlw	0
  3126  08A6  3400               	retlw	0
  3127  08A7  3400               	retlw	0
  3128  08A8  3400               	retlw	0
  3129  08A9  3400               	retlw	0
  3130  08AA  3400               	retlw	0
  3131  08AB  3400               	retlw	0
  3132  08AC  3400               	retlw	0
  3133  08AD  3400               	retlw	0
  3134  08AE  3400               	retlw	0
  3135  08AF  340D               	retlw	13
  3136  08B0  3400               	retlw	0
  3137  08B1  3400               	retlw	0
  3138  08B2  3400               	retlw	0
  3139  08B3  3400               	retlw	0
  3140  08B4  3400               	retlw	0
  3141  08B5  3400               	retlw	0
  3142  08B6  3400               	retlw	0
  3143  08B7  3400               	retlw	0
  3144  08B8  3400               	retlw	0
  3145  08B9  3400               	retlw	0
  3146  08BA  3400               	retlw	0
  3147  08BB  3400               	retlw	0
  3148  08BC  3400               	retlw	0
  3149  08BD  3400               	retlw	0
  3150  08BE  3401               	retlw	1
  3151  08BF  3400               	retlw	0
  3152  08C0  3403               	retlw	3
  3153  08C1  3416               	retlw	22
  3154  08C2  3400               	retlw	0
  3155  08C3  3400               	retlw	0
  3156  08C4  3400               	retlw	0
  3157  08C5  3415               	retlw	21
  3158  08C6  347F               	retlw	127
  3159  08C7  3404               	retlw	4
  3160  08C8  3400               	retlw	0
  3161  08C9  3405               	retlw	5
  3162  08CA  3402               	retlw	2
  3163  08CB  3400               	retlw	0
  3164  08CC  3400               	retlw	0
  3165  08CD  3400               	retlw	0
  3166  08CE  3400               	retlw	0
  3167  08CF  3418               	retlw	24
  3168  08D0  3400               	retlw	0
  3169  08D1  3400               	retlw	0
  3170  08D2  3417               	retlw	23
  3171  08D3                     __end_of_ScanCodeFunctionE0:	
  3172  08D3                     _dpowers:	
  3173  08D3  3401               	retlw	1
  3174  08D4  3400               	retlw	0
  3175  08D5  3400               	retlw	0
  3176  08D6  3400               	retlw	0
  3177  08D7  340A               	retlw	10
  3178  08D8  3400               	retlw	0
  3179  08D9  3400               	retlw	0
  3180  08DA  3400               	retlw	0
  3181  08DB  3464               	retlw	100
  3182  08DC  3400               	retlw	0
  3183  08DD  3400               	retlw	0
  3184  08DE  3400               	retlw	0
  3185  08DF  34E8               	retlw	232
  3186  08E0  3403               	retlw	3
  3187  08E1  3400               	retlw	0
  3188  08E2  3400               	retlw	0
  3189  08E3  3410               	retlw	16
  3190  08E4  3427               	retlw	39
  3191  08E5  3400               	retlw	0
  3192  08E6  3400               	retlw	0
  3193  08E7  34A0               	retlw	160
  3194  08E8  3486               	retlw	134
  3195  08E9  3401               	retlw	1
  3196  08EA  3400               	retlw	0
  3197  08EB  3440               	retlw	64
  3198  08EC  3442               	retlw	66
  3199  08ED  340F               	retlw	15
  3200  08EE  3400               	retlw	0
  3201  08EF  3480               	retlw	128
  3202  08F0  3496               	retlw	150
  3203  08F1  3498               	retlw	152
  3204  08F2  3400               	retlw	0
  3205  08F3  3400               	retlw	0
  3206  08F4  34E1               	retlw	225
  3207  08F5  34F5               	retlw	245
  3208  08F6  3405               	retlw	5
  3209  08F7  3400               	retlw	0
  3210  08F8  34CA               	retlw	202
  3211  08F9  349A               	retlw	154
  3212  08FA  343B               	retlw	59
  3213  08FB                     __end_of_dpowers:	
  3214  08FB                     _EvenParityMSG:	
  3215  08FB  3420               	retlw	32
  3216  08FC  3477               	retlw	119
  3217  08FD  3469               	retlw	105
  3218  08FE  3474               	retlw	116
  3219  08FF  3468               	retlw	104
  3220  0900  3420               	retlw	32
  3221  0901  3445               	retlw	69
  3222  0902  3476               	retlw	118
  3223  0903  3465               	retlw	101
  3224  0904  346E               	retlw	110
  3225  0905  3420               	retlw	32
  3226  0906  3470               	retlw	112
  3227  0907  3461               	retlw	97
  3228  0908  3472               	retlw	114
  3229  0909  3469               	retlw	105
  3230  090A  3474               	retlw	116
  3231  090B  3479               	retlw	121
  3232  090C  3420               	retlw	32
  3233  090D  3462               	retlw	98
  3234  090E  3469               	retlw	105
  3235  090F  3474               	retlw	116
  3236  0910  3400               	retlw	0
  3237  0911                     __end_of_EvenParityMSG:	
  3238  0911                     _OddParityMSG:	
  3239  0911  3420               	retlw	32
  3240  0912  3477               	retlw	119
  3241  0913  3469               	retlw	105
  3242  0914  3474               	retlw	116
  3243  0915  3468               	retlw	104
  3244  0916  3420               	retlw	32
  3245  0917  344F               	retlw	79
  3246  0918  3464               	retlw	100
  3247  0919  3464               	retlw	100
  3248  091A  3420               	retlw	32
  3249  091B  3470               	retlw	112
  3250  091C  3461               	retlw	97
  3251  091D  3472               	retlw	114
  3252  091E  3469               	retlw	105
  3253  091F  3474               	retlw	116
  3254  0920  3479               	retlw	121
  3255  0921  3420               	retlw	32
  3256  0922  3462               	retlw	98
  3257  0923  3469               	retlw	105
  3258  0924  3474               	retlw	116
  3259  0925  3400               	retlw	0
  3260  0926                     __end_of_OddParityMSG:	
  3261  0926                     _NoParityMSG:	
  3262  0926  3420               	retlw	32
  3263  0927  3477               	retlw	119
  3264  0928  3469               	retlw	105
  3265  0929  3474               	retlw	116
  3266  092A  3468               	retlw	104
  3267  092B  3420               	retlw	32
  3268  092C  344E               	retlw	78
  3269  092D  346F               	retlw	111
  3270  092E  3420               	retlw	32
  3271  092F  3470               	retlw	112
  3272  0930  3461               	retlw	97
  3273  0931  3472               	retlw	114
  3274  0932  3469               	retlw	105
  3275  0933  3474               	retlw	116
  3276  0934  3479               	retlw	121
  3277  0935  3420               	retlw	32
  3278  0936  3462               	retlw	98
  3279  0937  3469               	retlw	105
  3280  0938  3474               	retlw	116
  3281  0939  3400               	retlw	0
  3282  093A                     __end_of_NoParityMSG:	
  3283  093A                     _SpaceParityMSG:	
  3284  093A  3420               	retlw	32
  3285  093B  3477               	retlw	119
  3286  093C  3469               	retlw	105
  3287  093D  3474               	retlw	116
  3288  093E  3468               	retlw	104
  3289  093F  3420               	retlw	32
  3290  0940  3453               	retlw	83
  3291  0941  3470               	retlw	112
  3292  0942  3461               	retlw	97
  3293  0943  3463               	retlw	99
  3294  0944  3465               	retlw	101
  3295  0945  3420               	retlw	32
  3296  0946  3462               	retlw	98
  3297  0947  3469               	retlw	105
  3298  0948  3474               	retlw	116
  3299  0949  3400               	retlw	0
  3300  094A                     __end_of_SpaceParityMSG:	
  3301  094A                     _MarkParityMSG:	
  3302  094A  3420               	retlw	32
  3303  094B  3477               	retlw	119
  3304  094C  3469               	retlw	105
  3305  094D  3474               	retlw	116
  3306  094E  3468               	retlw	104
  3307  094F  3420               	retlw	32
  3308  0950  344D               	retlw	77
  3309  0951  3461               	retlw	97
  3310  0952  3472               	retlw	114
  3311  0953  346B               	retlw	107
  3312  0954  3420               	retlw	32
  3313  0955  3462               	retlw	98
  3314  0956  3469               	retlw	105
  3315  0957  3474               	retlw	116
  3316  0958  3400               	retlw	0
  3317  0959                     __end_of_MarkParityMSG:	
  3318  0959                     _VoltageMSG:	
  3319  0959  3456               	retlw	86
  3320  095A  346F               	retlw	111
  3321  095B  346C               	retlw	108
  3322  095C  3474               	retlw	116
  3323  095D  3461               	retlw	97
  3324  095E  3467               	retlw	103
  3325  095F  3465               	retlw	101
  3326  0960  3420               	retlw	32
  3327  0961  3474               	retlw	116
  3328  0962  346F               	retlw	111
  3329  0963  346F               	retlw	111
  3330  0964  3420               	retlw	32
  3331  0965  3400               	retlw	0
  3332  0966                     __end_of_VoltageMSG:	
  3333  0966                     _Version:	
  3334  0966  3431               	retlw	49
  3335  0967  342E               	retlw	46
  3336  0968  3433               	retlw	51
  3337  0969  345F               	retlw	95
  3338  096A  3444               	retlw	68
  3339  096B  3457               	retlw	87
  3340  096C  3430               	retlw	48
  3341  096D  3461               	retlw	97
  3342  096E  3400               	retlw	0
  3343  096F                     __end_of_Version:	
  3344  000B                     _INTCON	set	11
  3345  000B                     _INTCONbits	set	11
  3346  0011                     _PIR1bits	set	17
  3347  000C                     _PORTA	set	12
  3348  000E                     _PORTC	set	14
  3349  001B                     _PR2	set	27
  3350  001C                     _T2CON	set	28
  3351  001C                     _T2CONbits	set	28
  3352  001A                     _TMR2	set	26
  3353  009D                     _ADCON0	set	157
  3354  009E                     _ADCON1	set	158
  3355  009F                     _ADCON2	set	159
  3356  009C                     _ADRESH	set	156
  3357  009B                     _ADRESL	set	155
  3358  0095                     _OPTION_REGbits	set	149
  3359  0099                     _OSCCON	set	153
  3360  009A                     _OSCSTAT	set	154
  3361  0091                     _PIE1	set	145
  3362  0091                     _PIE1bits	set	145
  3363  008C                     _TRISAbits	set	140
  3364  008E                     _TRISCbits	set	142
  3365  04D0                     _HFIOFS	set	1232
  3366  0117                     _FVRCON	set	279
  3367  010C                     _LATA	set	268
  3368  010E                     _LATC	set	270
  3369  018C                     _ANSELA	set	396
  3370  018E                     _ANSELC	set	398
  3371  019F                     _BAUD1CON	set	415
  3372  0192                     _PMADRH	set	402
  3373  0191                     _PMADRL	set	401
  3374  0195                     _PMCON1	set	405
  3375  0196                     _PMCON2	set	406
  3376  0194                     _PMDATH	set	404
  3377  0193                     _PMDATL	set	403
  3378  019D                     _RC1STA	set	413
  3379  019D                     _RC1STAbits	set	413
  3380  0199                     _RCREG	set	409
  3381  019D                     _RCSTA	set	413
  3382  019D                     _RCSTAbits	set	413
  3383  019B                     _SPBRG	set	411
  3384  019C                     _SPBRGH	set	412
  3385  019E                     _TX1STA	set	414
  3386  019E                     _TX1STAbits	set	414
  3387  019A                     _TXREG	set	410
  3388  019E                     _TXSTAbits	set	414
  3389  020C                     _WPUA	set	524
  3390  020E                     _WPUC	set	526
  3391  029A                     _CCP2CONbits	set	666
  3392  0393                     _IOCAF	set	915
  3393  0392                     _IOCAN	set	914
  3394  0391                     _IOCAP	set	913
  3395  0E25                     _CKPPS	set	3621
  3396  0E0F                     _PPSLOCK	set	3599
  3397  0E24                     _RXPPS	set	3620
  3398  0EA2                     _RC2PPS	set	3746
  3399  096F                     STR_6:	
  3400  096F  3443               	retlw	67	;'C'
  3401  0970  3468               	retlw	104	;'h'
  3402  0971  3461               	retlw	97	;'a'
  3403  0972  346E               	retlw	110	;'n'
  3404  0973  3467               	retlw	103	;'g'
  3405  0974  3465               	retlw	101	;'e'
  3406  0975  3420               	retlw	32	;' '
  3407  0976  3442               	retlw	66	;'B'
  3408  0977  3441               	retlw	65	;'A'
  3409  0978  3455               	retlw	85	;'U'
  3410  0979  3444               	retlw	68	;'D'
  3411  097A  343A               	retlw	58	;':'
  3412  097B  3420               	retlw	32	;' '
  3413  097C  3422               	retlw	34	;'"'
  3414  097D  3443               	retlw	67	;'C'
  3415  097E  344E               	retlw	78	;'N'
  3416  097F  3454               	retlw	84	;'T'
  3417  0980  3420               	retlw	32	;' '
  3418  0981  342B               	retlw	43	;'+'
  3419  0982  3420               	retlw	32	;' '
  3420  0983  3441               	retlw	65	;'A'
  3421  0984  344C               	retlw	76	;'L'
  3422  0985  3454               	retlw	84	;'T'
  3423  0986  3420               	retlw	32	;' '
  3424  0987  342B               	retlw	43	;'+'
  3425  0988  3420               	retlw	32	;' '
  3426  0989  3444               	retlw	68	;'D'
  3427  098A  3445               	retlw	69	;'E'
  3428  098B  344C               	retlw	76	;'L'
  3429  098C  3422               	retlw	34	;'"'
  3430  098D  340D               	retlw	13
  3431  098E  340A               	retlw	10
  3432  098F  3400               	retlw	0
  3433  0990                     STR_3:	
  3434  0990  340D               	retlw	13
  3435  0991  340A               	retlw	10
  3436  0992  3450               	retlw	80	;'P'
  3437  0993  3453               	retlw	83	;'S'
  3438  0994  342F               	retlw	47	;'/'
  3439  0995  3432               	retlw	50	;'2'
  3440  0996  3420               	retlw	32	;' '
  3441  0997  344B               	retlw	75	;'K'
  3442  0998  3465               	retlw	101	;'e'
  3443  0999  3479               	retlw	121	;'y'
  3444  099A  3462               	retlw	98	;'b'
  3445  099B  346F               	retlw	111	;'o'
  3446  099C  3461               	retlw	97	;'a'
  3447  099D  3472               	retlw	114	;'r'
  3448  099E  3464               	retlw	100	;'d'
  3449  099F  3420               	retlw	32	;' '
  3450  09A0  3474               	retlw	116	;'t'
  3451  09A1  346F               	retlw	111	;'o'
  3452  09A2  3420               	retlw	32	;' '
  3453  09A3  3452               	retlw	82	;'R'
  3454  09A4  3453               	retlw	83	;'S'
  3455  09A5  342D               	retlw	45	;'-'
  3456  09A6  3432               	retlw	50	;'2'
  3457  09A7  3433               	retlw	51	;'3'
  3458  09A8  3432               	retlw	50	;'2'
  3459  09A9  340D               	retlw	13
  3460  09AA  340A               	retlw	10
  3461  09AB  3400               	retlw	0
  3462  09AC                     STR_18:	
  3463  09AC  3442               	retlw	66	;'B'
  3464  09AD  3461               	retlw	97	;'a'
  3465  09AE  3475               	retlw	117	;'u'
  3466  09AF  3464               	retlw	100	;'d'
  3467  09B0  3420               	retlw	32	;' '
  3468  09B1  3477               	retlw	119	;'w'
  3469  09B2  3469               	retlw	105	;'i'
  3470  09B3  346C               	retlw	108	;'l'
  3471  09B4  346C               	retlw	108	;'l'
  3472  09B5  3420               	retlw	32	;' '
  3473  09B6  3462               	retlw	98	;'b'
  3474  09B7  3465               	retlw	101	;'e'
  3475  09B8  3420               	retlw	32	;' '
  3476  09B9  3473               	retlw	115	;'s'
  3477  09BA  3465               	retlw	101	;'e'
  3478  09BB  3474               	retlw	116	;'t'
  3479  09BC  3420               	retlw	32	;' '
  3480  09BD  3474               	retlw	116	;'t'
  3481  09BE  346F               	retlw	111	;'o'
  3482  09BF  3420               	retlw	32	;' '
  3483  09C0  3425               	retlw	37	;'%'
  3484  09C1  346C               	retlw	108	;'l'
  3485  09C2  3475               	retlw	117	;'u'
  3486  09C3  3400               	retlw	0
  3487  09C4                     STR_10:	
  3488  09C4  3446               	retlw	70	;'F'
  3489  09C5  346C               	retlw	108	;'l'
  3490  09C6  3461               	retlw	97	;'a'
  3491  09C7  3473               	retlw	115	;'s'
  3492  09C8  3468               	retlw	104	;'h'
  3493  09C9  3420               	retlw	32	;' '
  3494  09CA  3450               	retlw	80	;'P'
  3495  09CB  3472               	retlw	114	;'r'
  3496  09CC  346F               	retlw	111	;'o'
  3497  09CD  3467               	retlw	103	;'g'
  3498  09CE  3472               	retlw	114	;'r'
  3499  09CF  3461               	retlw	97	;'a'
  3500  09D0  346D               	retlw	109	;'m'
  3501  09D1  3420               	retlw	32	;' '
  3502  09D2  3446               	retlw	70	;'F'
  3503  09D3  3461               	retlw	97	;'a'
  3504  09D4  3469               	retlw	105	;'i'
  3505  09D5  346C               	retlw	108	;'l'
  3506  09D6  340D               	retlw	13
  3507  09D7  340A               	retlw	10
  3508  09D8  3400               	retlw	0
  3509  09D9                     STR_20:	
  3510  09D9  3442               	retlw	66	;'B'
  3511  09DA  3461               	retlw	97	;'a'
  3512  09DB  3475               	retlw	117	;'u'
  3513  09DC  3464               	retlw	100	;'d'
  3514  09DD  3420               	retlw	32	;' '
  3515  09DE  344F               	retlw	79	;'O'
  3516  09DF  3475               	retlw	117	;'u'
  3517  09E0  3474               	retlw	116	;'t'
  3518  09E1  3420               	retlw	32	;' '
  3519  09E2  346F               	retlw	111	;'o'
  3520  09E3  3466               	retlw	102	;'f'
  3521  09E4  3420               	retlw	32	;' '
  3522  09E5  3452               	retlw	82	;'R'
  3523  09E6  3461               	retlw	97	;'a'
  3524  09E7  346E               	retlw	110	;'n'
  3525  09E8  3467               	retlw	103	;'g'
  3526  09E9  3465               	retlw	101	;'e'
  3527  09EA  340D               	retlw	13
  3528  09EB  340A               	retlw	10
  3529  09EC  3400               	retlw	0
  3530  09ED                     STR_14:	
  3531  09ED  3445               	retlw	69	;'E'
  3532  09EE  346E               	retlw	110	;'n'
  3533  09EF  3474               	retlw	116	;'t'
  3534  09F0  3465               	retlw	101	;'e'
  3535  09F1  3472               	retlw	114	;'r'
  3536  09F2  3420               	retlw	32	;' '
  3537  09F3  3442               	retlw	66	;'B'
  3538  09F4  3461               	retlw	97	;'a'
  3539  09F5  3475               	retlw	117	;'u'
  3540  09F6  3464               	retlw	100	;'d'
  3541  09F7  3420               	retlw	32	;' '
  3542  09F8  3472               	retlw	114	;'r'
  3543  09F9  3461               	retlw	97	;'a'
  3544  09FA  3474               	retlw	116	;'t'
  3545  09FB  3465               	retlw	101	;'e'
  3546  09FC  3420               	retlw	32	;' '
  3547  09FD  340D               	retlw	13
  3548  09FE  340A               	retlw	10
  3549  09FF  3400               	retlw	0
  3550  0A00                     STR_15:	
  3551  0A00  3442               	retlw	66	;'B'
  3552  0A01  3461               	retlw	97	;'a'
  3553  0A02  3475               	retlw	117	;'u'
  3554  0A03  3464               	retlw	100	;'d'
  3555  0A04  3420               	retlw	32	;' '
  3556  0A05  3452               	retlw	82	;'R'
  3557  0A06  3465               	retlw	101	;'e'
  3558  0A07  3473               	retlw	115	;'s'
  3559  0A08  3465               	retlw	101	;'e'
  3560  0A09  3474               	retlw	116	;'t'
  3561  0A0A  3420               	retlw	32	;' '
  3562  0A0B  3474               	retlw	116	;'t'
  3563  0A0C  346F               	retlw	111	;'o'
  3564  0A0D  3420               	retlw	32	;' '
  3565  0A0E  3439               	retlw	57	;'9'
  3566  0A0F  3436               	retlw	54	;'6'
  3567  0A10  3430               	retlw	48	;'0'
  3568  0A11  3430               	retlw	48	;'0'
  3569  0A12  3400               	retlw	0
  3570  0A13                     STR_4:	
  3571  0A13  3446               	retlw	70	;'F'
  3572  0A14  3469               	retlw	105	;'i'
  3573  0A15  3472               	retlw	114	;'r'
  3574  0A16  346D               	retlw	109	;'m'
  3575  0A17  3477               	retlw	119	;'w'
  3576  0A18  3461               	retlw	97	;'a'
  3577  0A19  3472               	retlw	114	;'r'
  3578  0A1A  3465               	retlw	101	;'e'
  3579  0A1B  3420               	retlw	32	;' '
  3580  0A1C  3456               	retlw	86	;'V'
  3581  0A1D  3465               	retlw	101	;'e'
  3582  0A1E  3472               	retlw	114	;'r'
  3583  0A1F  3473               	retlw	115	;'s'
  3584  0A20  3469               	retlw	105	;'i'
  3585  0A21  346F               	retlw	111	;'o'
  3586  0A22  346E               	retlw	110	;'n'
  3587  0A23  343A               	retlw	58	;':'
  3588  0A24  3420               	retlw	32	;' '
  3589  0A25  3400               	retlw	0
  3590  0A26                     STR_11:	
  3591  0A26  3442               	retlw	66	;'B'
  3592  0A27  3461               	retlw	97	;'a'
  3593  0A28  3475               	retlw	117	;'u'
  3594  0A29  3464               	retlw	100	;'d'
  3595  0A2A  3420               	retlw	32	;' '
  3596  0A2B  3469               	retlw	105	;'i'
  3597  0A2C  3473               	retlw	115	;'s'
  3598  0A2D  3420               	retlw	32	;' '
  3599  0A2E  3425               	retlw	37	;'%'
  3600  0A2F  346C               	retlw	108	;'l'
  3601  0A30  3475               	retlw	117	;'u'
  3602  0A31  3400               	retlw	0
  3603  0A32                     STR_2:	
  3604  0A32  3448               	retlw	72	;'H'
  3605  0A33  3469               	retlw	105	;'i'
  3606  0A34  3467               	retlw	103	;'g'
  3607  0A35  3468               	retlw	104	;'h'
  3608  0A36  3421               	retlw	33	;'!'
  3609  0A37  340D               	retlw	13
  3610  0A38  340A               	retlw	10
  3611  0A39  3400               	retlw	0
  3612  0A3A                     STR_1:	
  3613  0A3A  344C               	retlw	76	;'L'
  3614  0A3B  346F               	retlw	111	;'o'
  3615  0A3C  3477               	retlw	119	;'w'
  3616  0A3D  3421               	retlw	33	;'!'
  3617  0A3E  340D               	retlw	13
  3618  0A3F  340A               	retlw	10
  3619  0A40  3400               	retlw	0
  3620  09FD                     
  3621                           ; #config settings
  3622  0000                     
  3623                           	psect	cinit
  3624  00E3                     start_initialization:	
  3625  00E3                     __initialization:	
  3626                           
  3627                           ; Clear objects allocated to BANK1
  3628  00E3  30C5               	movlw	low __pbssBANK1
  3629  00E4  0084               	movwf	4
  3630  00E5  3000               	movlw	high __pbssBANK1
  3631  00E6  0085               	movwf	5
  3632  00E7  301E               	movlw	30
  3633  00E8  3198  206E  3180   	fcall	clear_ram0
  3634                           
  3635                           ; Clear objects allocated to BANK3
  3636  00EB  30E2               	movlw	low __pbssBANK3
  3637  00EC  0084               	movwf	4
  3638  00ED  3001               	movlw	high __pbssBANK3
  3639  00EE  0085               	movwf	5
  3640  00EF  300E               	movlw	14
  3641  00F0  3198  206E  3180   	fcall	clear_ram0
  3642                           
  3643                           ; Clear objects allocated to BANK4
  3644  00F3  3057               	movlw	low __pbssBANK4
  3645  00F4  0084               	movwf	4
  3646  00F5  3002               	movlw	high __pbssBANK4
  3647  00F6  0085               	movwf	5
  3648  00F7  300B               	movlw	11
  3649  00F8  3198  206E  3180   	fcall	clear_ram0
  3650                           
  3651                           ; Initialize objects allocated to BANK1
  3652  00FB  3059               	movlw	low __pidataBANK1
  3653  00FC  0084               	movwf	4
  3654  00FD  3098               	movlw	(high __pidataBANK1)| (0+128)
  3655  00FE  0085               	movwf	5
  3656  00FF  30E3               	movlw	low __pdataBANK1
  3657  0100  0086               	movwf	6
  3658  0101  3000               	movlw	high __pdataBANK1
  3659  0102  0087               	movwf	7
  3660  0103  3004               	movlw	4
  3661  0104  3198  2068  3180   	fcall	init_ram
  3662                           
  3663                           ; Initialize objects allocated to BANK4
  3664  0107  3055               	movlw	low __pidataBANK4
  3665  0108  0084               	movwf	4
  3666  0109  3098               	movlw	(high __pidataBANK4)| (0+128)
  3667  010A  0085               	movwf	5
  3668  010B  3062               	movlw	low __pdataBANK4
  3669  010C  0086               	movwf	6
  3670  010D  3002               	movlw	high __pdataBANK4
  3671  010E  0087               	movwf	7
  3672  010F  3004               	movlw	4
  3673  0110  3198  2068         	fcall	init_ram
  3674  0112                     end_of_initialization:	
  3675                           ;End of C runtime variable initialization code
  3676                           
  3677  0112                     __end_of__initialization:	
  3678  0112  0020               	movlb	0
  3679  0113  3196  2E15         	ljmp	_main	;jump to C main() function
  3680                           
  3681                           	psect	bssBANK1
  3682  00C5                     __pbssBANK1:	
  3683  00C5                     _BaudTyped:	
  3684  00C5                     	ds	4
  3685  00C9                     _PS_2_Read_Data_TEMP:	
  3686  00C9                     	ds	2
  3687  00CB                     _BAUDMODE:	
  3688  00CB                     	ds	1
  3689  00CC                     _Caps_Lock_Key:	
  3690  00CC                     	ds	1
  3691  00CD                     _Caps_Lock_Key_old:	
  3692  00CD                     	ds	1
  3693  00CE                     _Delete:	
  3694  00CE                     	ds	1
  3695  00CF                     _LControl:	
  3696  00CF                     	ds	1
  3697  00D0                     _Left_Shift_Key_old:	
  3698  00D0                     	ds	1
  3699  00D1                     _PS_2_Buffer_items:	
  3700  00D1                     	ds	1
  3701  00D2                     _PS_2_bits:	
  3702  00D2                     	ds	1
  3703  00D3                     _RControl:	
  3704  00D3                     	ds	1
  3705  00D4                     _ResendLastFlag:	
  3706  00D4                     	ds	1
  3707  00D5                     _Right_Shift_Key_old:	
  3708  00D5                     	ds	1
  3709  00D6                     _i:	
  3710  00D6                     	ds	1
  3711  00D7                     _PS_2_ScanCodes:	
  3712  00D7                     	ds	12
  3713                           
  3714                           	psect	dataBANK1
  3715  00E3                     __pdataBANK1:	
  3716  00E3                     _MEM:	
  3717  00E3                     	ds	4
  3718                           
  3719                           	psect	bssBANK3
  3720  01E2                     __pbssBANK3:	
  3721  01E2                     _PS_2_Read_Data_First:	
  3722  01E2                     	ds	2
  3723  01E4                     _PS_2_Read_Data_Second:	
  3724  01E4                     	ds	2
  3725  01E6                     _PS_2_Read_Data_Third:	
  3726  01E6                     	ds	2
  3727  01E8                     _CapsCount:	
  3728  01E8                     	ds	1
  3729  01E9                     _Caps_Lock:	
  3730  01E9                     	ds	1
  3731  01EA                     _LALT:	
  3732  01EA                     	ds	1
  3733  01EB                     _Left_Shift_Key:	
  3734  01EB                     	ds	1
  3735  01EC                     _ParityTyped:	
  3736  01EC                     	ds	1
  3737  01ED                     _RALT:	
  3738  01ED                     	ds	1
  3739  01EE                     _Right_Shift_Key:	
  3740  01EE                     	ds	1
  3741  01EF                     _Shift_Key:	
  3742  01EF                     	ds	1
  3743                           
  3744                           	psect	bssBANK4
  3745  0257                     __pbssBANK4:	
  3746  0257                     _BatteryVoltage:	
  3747  0257                     	ds	3
  3748  025A                     _SinLEDtimer:	
  3749  025A                     	ds	2
  3750  025C                     _pwrLEDtoggle:	
  3751  025C                     	ds	2
  3752  025E                     _Alarm:	
  3753  025E                     	ds	1
  3754  025F                     _ECHO:	
  3755  025F                     	ds	1
  3756  0260                     _LineOverride:	
  3757  0260                     	ds	1
  3758  0261                     _PARITY:	
  3759  0261                     	ds	1
  3760                           
  3761                           	psect	dataBANK4
  3762  0262                     __pdataBANK4:	
  3763  0262                     _BAUD:	
  3764  0262                     	ds	4
  3765                           
  3766                           	psect	clrtext
  3767  186E                     clear_ram0:	
  3768                           ;	Called with FSR0 containing the base address, and
  3769                           ;	WREG with the size to clear
  3770                           
  3771  186E  0064               	clrwdt	;clear the watchdog before getting into this loop
  3772  186F                     clrloop0:	
  3773  186F  0180               	clrf	0	;clear RAM location pointed to by FSR
  3774  1870  3101               	addfsr 0,1
  3775  1871  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3776  1872  286F               	goto	clrloop0	;have we reached the end yet?
  3777  1873  3400               	retlw	0	;all done for this memory range, return
  3778                           
  3779                           	psect	inittext
  3780  1868                     init_ram:	
  3781  1868  00FE               	movwf	126
  3782  1869                     initloop:	
  3783  1869  0012               	moviw fsr0++
  3784  186A  001E               	movwi fsr1++
  3785  186B  0BFE               	decfsz	126,f
  3786  186C  2869               	goto	initloop
  3787  186D  3400               	retlw	0
  3788                           
  3789                           	psect	cstackBANK4
  3790  0220                     __pcstackBANK4:	
  3791  0220                     ??_PS_2_DISABLE_INTERRUPT:	
  3792  0220                     ??_READ_PS_2_PIN:	
  3793                           ; 0 bytes @ 0x0
  3794                           
  3795  0220                     ??_Timer2ON:	
  3796                           ; 0 bytes @ 0x0
  3797                           
  3798  0220                     ??_PS_2_ENABLE_INTERRUPT:	
  3799                           ; 0 bytes @ 0x0
  3800                           
  3801  0220                     ??_ReadUSART:	
  3802                           ; 0 bytes @ 0x0
  3803                           
  3804  0220                     ??_ConfigureOscillator:	
  3805                           ; 0 bytes @ 0x0
  3806                           
  3807  0220                     ??_InitApp:	
  3808                           ; 0 bytes @ 0x0
  3809                           
  3810  0220                     ?_delayUS:	
  3811                           ; 0 bytes @ 0x0
  3812                           
  3813  0220                     ?_OpenUSART:	
  3814                           ; 0 bytes @ 0x0
  3815                           
  3816  0220                     ??_baudUSART:	
  3817                           ; 0 bytes @ 0x0
  3818                           
  3819  0220                     ??_Clock_TRIS:	
  3820                           ; 0 bytes @ 0x0
  3821                           
  3822  0220                     ??_Data_TRIS:	
  3823                           ; 0 bytes @ 0x0
  3824                           
  3825  0220                     ??_Timer2Init:	
  3826                           ; 0 bytes @ 0x0
  3827                           
  3828  0220                     ??_DisableInternalADC:	
  3829                           ; 0 bytes @ 0x0
  3830                           
  3831  0220                     ??_CloseUSART:	
  3832                           ; 0 bytes @ 0x0
  3833                           
  3834  0220                     ?___ftge:	
  3835                           ; 0 bytes @ 0x0
  3836                           
  3837  0220                     ?_CheckSum_byte:	
  3838                           ; 1 bit 
  3839                           
  3840  0220                     ?_ReadFlash_2Byte:	
  3841                           ; 1 bytes @ 0x0
  3842                           
  3843  0220                     ?___ftpack:	
  3844                           ; 2 bytes @ 0x0
  3845                           
  3846  0220                     ?___lldiv:	
  3847                           ; 3 bytes @ 0x0
  3848                           
  3849  0220                     baudUSART@baudconfig:	
  3850                           ; 4 bytes @ 0x0
  3851                           
  3852  0220                     Clock_TRIS@direction:	
  3853                           ; 1 bytes @ 0x0
  3854                           
  3855  0220                     Data_TRIS@direction:	
  3856                           ; 1 bytes @ 0x0
  3857                           
  3858  0220                     PS_2_ENABLE_INTERRUPT@DATA_CLK:	
  3859                           ; 1 bytes @ 0x0
  3860                           
  3861  0220                     READ_PS_2_PIN@DATA_CLK:	
  3862                           ; 1 bytes @ 0x0
  3863                           
  3864  0220                     CheckSum_byte@This:	
  3865                           ; 1 bytes @ 0x0
  3866                           
  3867  0220                     OpenUSART@spbrg:	
  3868                           ; 2 bytes @ 0x0
  3869                           
  3870  0220                     ReadFlash_2Byte@row:	
  3871                           ; 2 bytes @ 0x0
  3872                           
  3873  0220                     ___ftpack@arg:	
  3874                           ; 2 bytes @ 0x0
  3875                           
  3876  0220                     ___ftge@ff1:	
  3877                           ; 3 bytes @ 0x0
  3878                           
  3879  0220                     delayUS@US:	
  3880                           ; 3 bytes @ 0x0
  3881                           
  3882  0220                     ___lldiv@divisor:	
  3883                           ; 4 bytes @ 0x0
  3884                           
  3885                           
  3886                           ; 4 bytes @ 0x0
  3887  0220                     	ds	1
  3888  0221                     ReadUSART@data:	
  3889  0221                     PS_2_DISABLE_INTERRUPT@DATA_CLK:	
  3890                           ; 1 bytes @ 0x1
  3891                           
  3892                           
  3893                           ; 1 bytes @ 0x1
  3894  0221                     	ds	1
  3895  0222                     ??_OpenUSART:	
  3896  0222                     CheckSum_byte@Odd_Even:	
  3897                           ; 0 bytes @ 0x2
  3898                           
  3899  0222                     OpenUSART@config:	
  3900                           ; 1 bytes @ 0x2
  3901                           
  3902  0222                     ReadFlash_2Byte@column:	
  3903                           ; 1 bytes @ 0x2
  3904                           
  3905  0222                     Timer2Init@time:	
  3906                           ; 1 bytes @ 0x2
  3907                           
  3908                           
  3909                           ; 1 bytes @ 0x2
  3910  0222                     	ds	1
  3911  0223                     ??_CheckSum_byte:	
  3912  0223                     ??_ReadFlash_2Byte:	
  3913                           ; 0 bytes @ 0x3
  3914                           
  3915  0223                     Timer2Init@postscaler:	
  3916                           ; 0 bytes @ 0x3
  3917                           
  3918  0223                     ___ftpack@exp:	
  3919                           ; 1 bytes @ 0x3
  3920                           
  3921  0223                     ___ftge@ff2:	
  3922                           ; 1 bytes @ 0x3
  3923                           
  3924                           
  3925                           ; 3 bytes @ 0x3
  3926  0223                     	ds	1
  3927  0224                     ??_delayUS:	
  3928  0224                     Timer2Init@prescaler:	
  3929                           ; 0 bytes @ 0x4
  3930                           
  3931  0224                     ___ftpack@sign:	
  3932                           ; 1 bytes @ 0x4
  3933                           
  3934  0224                     CheckSum_byte@ThisTemp:	
  3935                           ; 1 bytes @ 0x4
  3936                           
  3937  0224                     ___lldiv@dividend:	
  3938                           ; 2 bytes @ 0x4
  3939                           
  3940                           
  3941                           ; 4 bytes @ 0x4
  3942  0224                     	ds	1
  3943  0225                     ??___ftpack:	
  3944  0225                     ?_ReadFlash_4Byte:	
  3945                           ; 0 bytes @ 0x5
  3946                           
  3947  0225                     ReadFlash_4Byte@row:	
  3948                           ; 4 bytes @ 0x5
  3949                           
  3950  0225                     delayUS@i:	
  3951                           ; 2 bytes @ 0x5
  3952                           
  3953                           
  3954                           ; 4 bytes @ 0x5
  3955  0225                     	ds	1
  3956  0226                     ??___ftge:	
  3957  0226                     CheckSum_byte@Parity:	
  3958                           ; 0 bytes @ 0x6
  3959                           
  3960                           
  3961                           ; 1 bytes @ 0x6
  3962  0226                     	ds	1
  3963  0227                     CheckSum_byte@i:	
  3964  0227                     ReadFlash_4Byte@column:	
  3965                           ; 1 bytes @ 0x7
  3966                           
  3967                           
  3968                           ; 1 bytes @ 0x7
  3969  0227                     	ds	1
  3970  0228                     ?_UARTchar:	
  3971  0228                     ??___lldiv:	
  3972                           ; 0 bytes @ 0x8
  3973                           
  3974  0228                     ?___lwtoft:	
  3975                           ; 0 bytes @ 0x8
  3976                           
  3977  0228                     UARTchar@override:	
  3978                           ; 3 bytes @ 0x8
  3979                           
  3980  0228                     ___lwtoft@c:	
  3981                           ; 1 bytes @ 0x8
  3982                           
  3983                           
  3984                           ; 2 bytes @ 0x8
  3985  0228                     	ds	1
  3986  0229                     ??_ReadFlash_4Byte:	
  3987  0229                     delayUS@j:	
  3988                           ; 0 bytes @ 0x9
  3989                           
  3990  0229                     UARTchar@NinethBit_override_data:	
  3991                           ; 1 bytes @ 0x9
  3992                           
  3993  0229                     ___lldiv@quotient:	
  3994                           ; 1 bytes @ 0x9
  3995                           
  3996                           
  3997                           ; 4 bytes @ 0x9
  3998  0229                     	ds	1
  3999  022A                     ??_UARTchar:	
  4000  022A                     ??_Send_PS2:	
  4001                           ; 0 bytes @ 0xA
  4002                           
  4003  022A                     ?_InternalADC_Read:	
  4004                           ; 0 bytes @ 0xA
  4005                           
  4006                           
  4007                           ; 2 bytes @ 0xA
  4008  022A                     	ds	1
  4009  022B                     ??___lwtoft:	
  4010                           
  4011                           ; 0 bytes @ 0xB
  4012  022B                     	ds	1
  4013  022C                     ??_InternalADC_Read:	
  4014  022C                     ?___ftdiv:	
  4015                           ; 0 bytes @ 0xC
  4016                           
  4017  022C                     ___ftdiv@f2:	
  4018                           ; 3 bytes @ 0xC
  4019                           
  4020                           
  4021                           ; 3 bytes @ 0xC
  4022  022C                     	ds	1
  4023  022D                     ___lldiv@counter:	
  4024                           
  4025                           ; 1 bytes @ 0xD
  4026  022D                     	ds	1
  4027  022E                     ?_InitUART:	
  4028  022E                     UARTchar@data:	
  4029                           ; 0 bytes @ 0xE
  4030                           
  4031  022E                     Send_PS2@oddparity:	
  4032                           ; 1 bytes @ 0xE
  4033                           
  4034  022E                     InternalADC_Read@channel:	
  4035                           ; 1 bytes @ 0xE
  4036                           
  4037  022E                     InitUART@Baud:	
  4038                           ; 1 bytes @ 0xE
  4039                           
  4040  022E                     ReadFlash_4Byte@temp:	
  4041                           ; 4 bytes @ 0xE
  4042                           
  4043                           
  4044                           ; 4 bytes @ 0xE
  4045  022E                     	ds	1
  4046  022F                     ?_UARTstringWAIT:	
  4047  022F                     Send_PS2@command:	
  4048                           ; 0 bytes @ 0xF
  4049                           
  4050  022F                     UARTstringWAIT@data:	
  4051                           ; 1 bytes @ 0xF
  4052                           
  4053  022F                     ___ftdiv@f1:	
  4054                           ; 2 bytes @ 0xF
  4055                           
  4056                           
  4057                           ; 3 bytes @ 0xF
  4058  022F                     	ds	1
  4059  0230                     Send_PS2@i:	
  4060                           
  4061                           ; 1 bytes @ 0x10
  4062  0230                     	ds	1
  4063  0231                     ??_UARTstringWAIT:	
  4064  0231                     Send_PS2@timeout:	
  4065                           ; 0 bytes @ 0x11
  4066                           
  4067                           
  4068                           ; 2 bytes @ 0x11
  4069  0231                     	ds	1
  4070  0232                     ??___ftdiv:	
  4071  0232                     ?_ReadBaud:	
  4072                           ; 0 bytes @ 0x12
  4073                           
  4074  0232                     InitUART@parity:	
  4075                           ; 4 bytes @ 0x12
  4076                           
  4077  0232                     ReadBaud@row:	
  4078                           ; 1 bytes @ 0x12
  4079                           
  4080                           
  4081                           ; 2 bytes @ 0x12
  4082  0232                     	ds	1
  4083  0233                     ??_PS_2_INIT:	
  4084  0233                     ??_InitUART:	
  4085                           ; 0 bytes @ 0x13
  4086                           
  4087  0233                     ??_Init_PS_2_Send:	
  4088                           ; 0 bytes @ 0x13
  4089                           
  4090                           
  4091                           ; 0 bytes @ 0x13
  4092  0233                     	ds	1
  4093  0234                     ReadBaud@column:	
  4094                           
  4095                           ; 1 bytes @ 0x14
  4096  0234                     	ds	2
  4097  0236                     ??_ReadBaud:	
  4098  0236                     ___ftdiv@cntr:	
  4099                           ; 0 bytes @ 0x16
  4100                           
  4101                           
  4102                           ; 1 bytes @ 0x16
  4103  0236                     	ds	1
  4104  0237                     ___ftdiv@f3:	
  4105                           
  4106                           ; 3 bytes @ 0x17
  4107  0237                     	ds	3
  4108  023A                     ___ftdiv@exp:	
  4109                           
  4110                           ; 1 bytes @ 0x1A
  4111  023A                     	ds	1
  4112  023B                     ___ftdiv@sign:	
  4113  023B                     InitUART@spbrg:	
  4114                           ; 1 bytes @ 0x1B
  4115                           
  4116                           
  4117                           ; 2 bytes @ 0x1B
  4118  023B                     	ds	1
  4119  023C                     ?___ftmul:	
  4120  023C                     ___ftmul@f1:	
  4121                           ; 3 bytes @ 0x1C
  4122                           
  4123                           
  4124                           ; 3 bytes @ 0x1C
  4125  023C                     	ds	1
  4126  023D                     InitUART@baudconfig:	
  4127                           
  4128                           ; 1 bytes @ 0x1D
  4129  023D                     	ds	1
  4130  023E                     InitUART@config:	
  4131  023E                     ReadBaud@temp:	
  4132                           ; 1 bytes @ 0x1E
  4133                           
  4134                           
  4135                           ; 4 bytes @ 0x1E
  4136  023E                     	ds	1
  4137  023F                     ___ftmul@f2:	
  4138  023F                     InitUART@temp:	
  4139                           ; 3 bytes @ 0x1F
  4140                           
  4141                           
  4142                           ; 4 bytes @ 0x1F
  4143  023F                     	ds	3
  4144  0242                     ??___ftmul:	
  4145                           
  4146                           ; 0 bytes @ 0x22
  4147  0242                     	ds	1
  4148  0243                     ??_Init_System:	
  4149                           
  4150                           ; 0 bytes @ 0x23
  4151  0243                     	ds	3
  4152  0246                     ___ftmul@exp:	
  4153                           
  4154                           ; 1 bytes @ 0x26
  4155  0246                     	ds	1
  4156  0247                     ___ftmul@f3_as_product:	
  4157                           
  4158                           ; 3 bytes @ 0x27
  4159  0247                     	ds	1
  4160  0248                     Init_System@temp:	
  4161                           
  4162                           ; 4 bytes @ 0x28
  4163  0248                     	ds	2
  4164  024A                     ___ftmul@cntr:	
  4165                           
  4166                           ; 1 bytes @ 0x2A
  4167  024A                     	ds	1
  4168  024B                     ___ftmul@sign:	
  4169                           
  4170                           ; 1 bytes @ 0x2B
  4171  024B                     	ds	1
  4172  024C                     ?_ReadVoltage:	
  4173  024C                     Init_System@Baud:	
  4174                           ; 3 bytes @ 0x2C
  4175                           
  4176                           
  4177                           ; 4 bytes @ 0x2C
  4178  024C                     	ds	3
  4179  024F                     ??_ReadVoltage:	
  4180                           
  4181                           ; 0 bytes @ 0x2F
  4182  024F                     	ds	1
  4183  0250                     Init_System@Parity:	
  4184  0250                     ReadVoltage@voltage:	
  4185                           ; 1 bytes @ 0x30
  4186                           
  4187                           
  4188                           ; 3 bytes @ 0x30
  4189  0250                     	ds	3
  4190  0253                     ReadVoltage@temp:	
  4191                           
  4192                           ; 2 bytes @ 0x33
  4193  0253                     	ds	2
  4194  0255                     ??_main:	
  4195                           
  4196                           ; 0 bytes @ 0x35
  4197  0255                     	ds	1
  4198  0256                     main@i:	
  4199                           
  4200                           ; 1 bytes @ 0x36
  4201  0256                     	ds	1
  4202                           
  4203                           	psect	cstackBANK3
  4204  01A0                     __pcstackBANK3:	
  4205  01A0                     Process_PS2_ScanCode@buf:	
  4206                           
  4207                           ; 60 bytes @ 0x0
  4208  01A0                     	ds	60
  4209  01DC                     _Process_PS2_ScanCode$854:	
  4210                           
  4211                           ; 1 bytes @ 0x3C
  4212  01DC                     	ds	1
  4213  01DD                     _Process_PS2_ScanCode$855:	
  4214                           
  4215                           ; 1 bytes @ 0x3D
  4216  01DD                     	ds	1
  4217  01DE                     _Process_PS2_ScanCode$856:	
  4218                           
  4219                           ; 1 bytes @ 0x3E
  4220  01DE                     	ds	1
  4221  01DF                     _Process_PS2_ScanCode$857:	
  4222                           
  4223                           ; 1 bytes @ 0x3F
  4224  01DF                     	ds	1
  4225  01E0                     Process_PS2_ScanCode@shortbreak:	
  4226                           
  4227                           ; 1 bytes @ 0x40
  4228  01E0                     	ds	1
  4229  01E1                     Process_PS2_ScanCode@temp:	
  4230                           
  4231                           ; 1 bytes @ 0x41
  4232  01E1                     	ds	1
  4233                           
  4234                           	psect	cstackBANK2
  4235  0120                     __pcstackBANK2:	
  4236  0120                     SetBaud@buf:	
  4237                           
  4238                           ; 50 bytes @ 0x0
  4239  0120                     	ds	50
  4240  0152                     SetBaud@Baudtemp:	
  4241                           
  4242                           ; 4 bytes @ 0x32
  4243  0152                     	ds	4
  4244  0156                     SetBaud@Paritytemp:	
  4245                           
  4246                           ; 4 bytes @ 0x36
  4247  0156                     	ds	4
  4248  015A                     SetBaud@temp:	
  4249                           
  4250                           ; 4 bytes @ 0x3A
  4251  015A                     	ds	4
  4252  015E                     SetBaud@i:	
  4253                           
  4254                           ; 1 bytes @ 0x3E
  4255  015E                     	ds	1
  4256                           
  4257                           	psect	cstackBANK1
  4258  00A0                     __pcstackBANK1:	
  4259  00A0                     ?_WriteBaud:	
  4260  00A0                     WriteBaud@row:	
  4261                           ; 0 bytes @ 0x0
  4262                           
  4263                           
  4264                           ; 2 bytes @ 0x0
  4265  00A0                     	ds	2
  4266  00A2                     WriteBaud@Baud:	
  4267                           
  4268                           ; 4 bytes @ 0x2
  4269  00A2                     	ds	4
  4270  00A6                     WriteBaud@Parity:	
  4271                           
  4272                           ; 1 bytes @ 0x6
  4273  00A6                     	ds	1
  4274  00A7                     ??_WriteBaud:	
  4275                           
  4276                           ; 0 bytes @ 0x7
  4277  00A7                     	ds	8
  4278  00AF                     ?_SetBaud:	
  4279  00AF                     SetBaud@Baud:	
  4280                           ; 0 bytes @ 0xF
  4281                           
  4282                           
  4283                           ; 4 bytes @ 0xF
  4284  00AF                     	ds	4
  4285  00B3                     SetBaud@Parity:	
  4286                           
  4287                           ; 1 bytes @ 0x13
  4288  00B3                     	ds	1
  4289  00B4                     ??_SetBaud:	
  4290                           
  4291                           ; 0 bytes @ 0x14
  4292  00B4                     	ds	8
  4293  00BC                     ??_Process_PS2_ScanCode:	
  4294                           
  4295                           ; 0 bytes @ 0x1C
  4296  00BC                     	ds	6
  4297  00C2                     isr@Rx_fault:	
  4298                           
  4299                           ; 1 bytes @ 0x22
  4300  00C2                     	ds	1
  4301  00C3                     isr@rx:	
  4302                           
  4303                           ; 1 bytes @ 0x23
  4304  00C3                     	ds	1
  4305  00C4                     isr@ScanTemp:	
  4306                           
  4307                           ; 1 bytes @ 0x24
  4308  00C4                     	ds	1
  4309                           
  4310                           	psect	cstackCOMMON
  4311  0070                     __pcstackCOMMON:	
  4312  0070                     ?_PS_2_DISABLE_INTERRUPT:	
  4313  0070                     ?_Timer2Reset:	
  4314                           ; 0 bytes @ 0x0
  4315                           
  4316  0070                     ??_Timer2Reset:	
  4317                           ; 0 bytes @ 0x0
  4318                           
  4319  0070                     ?_Timer2ON:	
  4320                           ; 0 bytes @ 0x0
  4321                           
  4322  0070                     ?_PS_2_ENABLE_INTERRUPT:	
  4323                           ; 0 bytes @ 0x0
  4324                           
  4325  0070                     ??_READ_CONFIG_PIN:	
  4326                           ; 0 bytes @ 0x0
  4327                           
  4328  0070                     ?_Timer2OFF:	
  4329                           ; 0 bytes @ 0x0
  4330                           
  4331  0070                     ??_Timer2OFF:	
  4332                           ; 0 bytes @ 0x0
  4333                           
  4334  0070                     ?_ResendLast:	
  4335                           ; 0 bytes @ 0x0
  4336                           
  4337  0070                     ?_Process_PS2_ScanCode:	
  4338                           ; 0 bytes @ 0x0
  4339                           
  4340  0070                     ?_ConfigureOscillator:	
  4341                           ; 0 bytes @ 0x0
  4342                           
  4343  0070                     ?_InitApp:	
  4344                           ; 0 bytes @ 0x0
  4345                           
  4346  0070                     ?_Init_System:	
  4347                           ; 0 bytes @ 0x0
  4348                           
  4349  0070                     ?_PS_2_INIT:	
  4350                           ; 0 bytes @ 0x0
  4351                           
  4352  0070                     ?_baudUSART:	
  4353                           ; 0 bytes @ 0x0
  4354                           
  4355  0070                     ?_Clock_TRIS:	
  4356                           ; 0 bytes @ 0x0
  4357                           
  4358  0070                     ?_Data_TRIS:	
  4359                           ; 0 bytes @ 0x0
  4360                           
  4361  0070                     ?_Timer2Init:	
  4362                           ; 0 bytes @ 0x0
  4363                           
  4364  0070                     ??_Decode_Scan_Code_FunctionE0:	
  4365                           ; 0 bytes @ 0x0
  4366                           
  4367  0070                     ??_Decode_Scan_Code_Shift:	
  4368                           ; 0 bytes @ 0x0
  4369                           
  4370  0070                     ??_Decode_Scan_Code:	
  4371                           ; 0 bytes @ 0x0
  4372                           
  4373  0070                     ??_Decode_Scan_Code_Function:	
  4374                           ; 0 bytes @ 0x0
  4375                           
  4376  0070                     ?_DisableInternalADC:	
  4377                           ; 0 bytes @ 0x0
  4378                           
  4379  0070                     ?_isr:	
  4380                           ; 0 bytes @ 0x0
  4381                           
  4382  0070                     ?_main:	
  4383                           ; 0 bytes @ 0x0
  4384                           
  4385  0070                     ??_Reverse_Byte:	
  4386                           ; 0 bytes @ 0x0
  4387                           
  4388  0070                     ??_ISNUMBER:	
  4389                           ; 0 bytes @ 0x0
  4390                           
  4391  0070                     ?_cleanBuffer:	
  4392                           ; 0 bytes @ 0x0
  4393                           
  4394  0070                     ?_CloseUSART:	
  4395                           ; 0 bytes @ 0x0
  4396                           
  4397  0070                     ?_UART_send_break:	
  4398                           ; 0 bytes @ 0x0
  4399                           
  4400  0070                     ??_UART_send_break:	
  4401                           ; 0 bytes @ 0x0
  4402                           
  4403  0070                     ?_UNLOCK:	
  4404                           ; 0 bytes @ 0x0
  4405                           
  4406  0070                     ??_UNLOCK:	
  4407                           ; 0 bytes @ 0x0
  4408                           
  4409  0070                     ?_BlockErase:	
  4410                           ; 0 bytes @ 0x0
  4411                           
  4412  0070                     ?i1_delayUS:	
  4413                           ; 0 bytes @ 0x0
  4414                           
  4415  0070                     ?i1_CloseUSART:	
  4416                           ; 0 bytes @ 0x0
  4417                           
  4418  0070                     ??i1_CloseUSART:	
  4419                           ; 0 bytes @ 0x0
  4420                           
  4421  0070                     ?i1_baudUSART:	
  4422                           ; 0 bytes @ 0x0
  4423                           
  4424  0070                     ??i1_baudUSART:	
  4425                           ; 0 bytes @ 0x0
  4426                           
  4427  0070                     ?i1_OpenUSART:	
  4428                           ; 0 bytes @ 0x0
  4429                           
  4430  0070                     ??i1_ReadUSART:	
  4431                           ; 0 bytes @ 0x0
  4432                           
  4433  0070                     ?i1_Clock_TRIS:	
  4434                           ; 0 bytes @ 0x0
  4435                           
  4436  0070                     ??i1_Clock_TRIS:	
  4437                           ; 0 bytes @ 0x0
  4438                           
  4439  0070                     ?i1_Data_TRIS:	
  4440                           ; 0 bytes @ 0x0
  4441                           
  4442  0070                     ??i1_Data_TRIS:	
  4443                           ; 0 bytes @ 0x0
  4444                           
  4445  0070                     ?i1_PS_2_DISABLE_INTERRUPT:	
  4446                           ; 0 bytes @ 0x0
  4447                           
  4448  0070                     ??i1_PS_2_DISABLE_INTERRUPT:	
  4449                           ; 0 bytes @ 0x0
  4450                           
  4451  0070                     ?i1_PS_2_ENABLE_INTERRUPT:	
  4452                           ; 0 bytes @ 0x0
  4453                           
  4454  0070                     ??i1_PS_2_ENABLE_INTERRUPT:	
  4455                           ; 0 bytes @ 0x0
  4456                           
  4457  0070                     ??i1_READ_PS_2_PIN:	
  4458                           ; 0 bytes @ 0x0
  4459                           
  4460  0070                     ?i1_Timer2ON:	
  4461                           ; 0 bytes @ 0x0
  4462                           
  4463  0070                     ??i1_Timer2ON:	
  4464                           ; 0 bytes @ 0x0
  4465                           
  4466  0070                     ?_READ_PS_2_PIN:	
  4467                           ; 0 bytes @ 0x0
  4468                           
  4469  0070                     ?_ReadUSART:	
  4470                           ; 1 bytes @ 0x0
  4471                           
  4472  0070                     ?_READ_CONFIG_PIN:	
  4473                           ; 1 bytes @ 0x0
  4474                           
  4475  0070                     ?_Init_PS_2_Send:	
  4476                           ; 1 bytes @ 0x0
  4477                           
  4478  0070                     ?_Send_PS2:	
  4479                           ; 1 bytes @ 0x0
  4480                           
  4481  0070                     ?_Decode_Scan_Code_FunctionE0:	
  4482                           ; 1 bytes @ 0x0
  4483                           
  4484  0070                     ?_Decode_Scan_Code_Shift:	
  4485                           ; 1 bytes @ 0x0
  4486                           
  4487  0070                     ?_Decode_Scan_Code:	
  4488                           ; 1 bytes @ 0x0
  4489                           
  4490  0070                     ?_Decode_Scan_Code_Function:	
  4491                           ; 1 bytes @ 0x0
  4492                           
  4493  0070                     ?_Reverse_Byte:	
  4494                           ; 1 bytes @ 0x0
  4495                           
  4496  0070                     ?_ISNUMBER:	
  4497                           ; 1 bytes @ 0x0
  4498                           
  4499  0070                     ?_BufferShiftBack:	
  4500                           ; 1 bytes @ 0x0
  4501                           
  4502  0070                     ?i1_CheckSum_byte:	
  4503                           ; 1 bytes @ 0x0
  4504                           
  4505  0070                     ?i1_ReadUSART:	
  4506                           ; 1 bytes @ 0x0
  4507                           
  4508  0070                     ?i1_READ_PS_2_PIN:	
  4509                           ; 1 bytes @ 0x0
  4510                           
  4511  0070                     ?i1_Send_PS2:	
  4512                           ; 1 bytes @ 0x0
  4513                           
  4514  0070                     ?i1_ReadFlash_2Byte:	
  4515                           ; 1 bytes @ 0x0
  4516                           
  4517  0070                     ?___lmul:	
  4518                           ; 2 bytes @ 0x0
  4519                           
  4520  0070                     ?i1___lldiv:	
  4521                           ; 4 bytes @ 0x0
  4522                           
  4523  0070                     ISNUMBER@ascii:	
  4524                           ; 4 bytes @ 0x0
  4525                           
  4526  0070                     BufferShiftBack@shift:	
  4527                           ; 1 bytes @ 0x0
  4528                           
  4529  0070                     Decode_Scan_Code@Code:	
  4530                           ; 1 bytes @ 0x0
  4531                           
  4532  0070                     Decode_Scan_Code_Shift@Code:	
  4533                           ; 1 bytes @ 0x0
  4534                           
  4535  0070                     Decode_Scan_Code_FunctionE0@Code:	
  4536                           ; 1 bytes @ 0x0
  4537                           
  4538  0070                     Decode_Scan_Code_Function@Code:	
  4539                           ; 1 bytes @ 0x0
  4540                           
  4541  0070                     i1baudUSART@baudconfig:	
  4542                           ; 1 bytes @ 0x0
  4543                           
  4544  0070                     i1Clock_TRIS@direction:	
  4545                           ; 1 bytes @ 0x0
  4546                           
  4547  0070                     i1Data_TRIS@direction:	
  4548                           ; 1 bytes @ 0x0
  4549                           
  4550  0070                     i1PS_2_ENABLE_INTERRUPT@DATA_CLK:	
  4551                           ; 1 bytes @ 0x0
  4552                           
  4553  0070                     i1READ_PS_2_PIN@DATA_CLK:	
  4554                           ; 1 bytes @ 0x0
  4555                           
  4556  0070                     cleanBuffer@count:	
  4557                           ; 1 bytes @ 0x0
  4558                           
  4559  0070                     BlockErase@row:	
  4560                           ; 2 bytes @ 0x0
  4561                           
  4562  0070                     i1CheckSum_byte@This:	
  4563                           ; 2 bytes @ 0x0
  4564                           
  4565  0070                     i1OpenUSART@spbrg:	
  4566                           ; 2 bytes @ 0x0
  4567                           
  4568  0070                     i1ReadFlash_2Byte@row:	
  4569                           ; 2 bytes @ 0x0
  4570                           
  4571  0070                     ___lmul@multiplier:	
  4572                           ; 2 bytes @ 0x0
  4573                           
  4574  0070                     i1delayUS@US:	
  4575                           ; 4 bytes @ 0x0
  4576                           
  4577  0070                     i1___lldiv@divisor:	
  4578                           ; 4 bytes @ 0x0
  4579                           
  4580                           
  4581                           ; 4 bytes @ 0x0
  4582  0070                     	ds	1
  4583  0071                     BufferShiftBack@size:	
  4584  0071                     i1ReadUSART@data:	
  4585                           ; 1 bytes @ 0x1
  4586                           
  4587  0071                     i1PS_2_DISABLE_INTERRUPT@DATA_CLK:	
  4588                           ; 1 bytes @ 0x1
  4589                           
  4590                           
  4591                           ; 1 bytes @ 0x1
  4592  0071                     	ds	1
  4593  0072                     ??_cleanBuffer:	
  4594  0072                     ??_BufferShiftBack:	
  4595                           ; 0 bytes @ 0x2
  4596                           
  4597  0072                     ??_BlockErase:	
  4598                           ; 0 bytes @ 0x2
  4599                           
  4600  0072                     ??i1_OpenUSART:	
  4601                           ; 0 bytes @ 0x2
  4602                           
  4603  0072                     Reverse_Byte@temp:	
  4604                           ; 0 bytes @ 0x2
  4605                           
  4606  0072                     i1CheckSum_byte@Odd_Even:	
  4607                           ; 1 bytes @ 0x2
  4608                           
  4609  0072                     i1OpenUSART@config:	
  4610                           ; 1 bytes @ 0x2
  4611                           
  4612  0072                     i1ReadFlash_2Byte@column:	
  4613                           ; 1 bytes @ 0x2
  4614                           
  4615                           
  4616                           ; 1 bytes @ 0x2
  4617  0072                     	ds	1
  4618  0073                     ??i1_CheckSum_byte:	
  4619  0073                     ??i1_ReadFlash_2Byte:	
  4620                           ; 0 bytes @ 0x3
  4621                           
  4622  0073                     Reverse_Byte@This:	
  4623                           ; 0 bytes @ 0x3
  4624                           
  4625  0073                     cleanBuffer@data:	
  4626                           ; 1 bytes @ 0x3
  4627                           
  4628                           
  4629                           ; 1 bytes @ 0x3
  4630  0073                     	ds	1
  4631  0074                     ??i1_delayUS:	
  4632  0074                     cleanBuffer@i:	
  4633                           ; 0 bytes @ 0x4
  4634                           
  4635  0074                     i1CheckSum_byte@ThisTemp:	
  4636                           ; 1 bytes @ 0x4
  4637                           
  4638  0074                     ___lmul@multiplicand:	
  4639                           ; 2 bytes @ 0x4
  4640                           
  4641  0074                     i1___lldiv@dividend:	
  4642                           ; 4 bytes @ 0x4
  4643                           
  4644                           
  4645                           ; 4 bytes @ 0x4
  4646  0074                     	ds	1
  4647  0075                     ?i1_ReadFlash_4Byte:	
  4648  0075                     i1ReadFlash_4Byte@row:	
  4649                           ; 4 bytes @ 0x5
  4650                           
  4651  0075                     i1delayUS@i:	
  4652                           ; 2 bytes @ 0x5
  4653                           
  4654                           
  4655                           ; 4 bytes @ 0x5
  4656  0075                     	ds	1
  4657  0076                     BufferShiftBack@i:	
  4658  0076                     i1CheckSum_byte@Parity:	
  4659                           ; 1 bytes @ 0x6
  4660                           
  4661                           
  4662                           ; 1 bytes @ 0x6
  4663  0076                     	ds	1
  4664  0077                     BufferShiftBack@buffer:	
  4665  0077                     i1CheckSum_byte@i:	
  4666                           ; 1 bytes @ 0x7
  4667                           
  4668  0077                     i1ReadFlash_4Byte@column:	
  4669                           ; 1 bytes @ 0x7
  4670                           
  4671                           
  4672                           ; 1 bytes @ 0x7
  4673  0077                     	ds	1
  4674  0078                     ??___lmul:	
  4675  0078                     ?i1_UARTchar:	
  4676                           ; 0 bytes @ 0x8
  4677                           
  4678  0078                     ??i1___lldiv:	
  4679                           ; 0 bytes @ 0x8
  4680                           
  4681  0078                     ?_PS2RawToScan:	
  4682                           ; 0 bytes @ 0x8
  4683                           
  4684  0078                     i1UARTchar@override:	
  4685                           ; 2 bytes @ 0x8
  4686                           
  4687  0078                     PS2RawToScan@Raw:	
  4688                           ; 1 bytes @ 0x8
  4689                           
  4690  0078                     ___lmul@product:	
  4691                           ; 2 bytes @ 0x8
  4692                           
  4693                           
  4694                           ; 4 bytes @ 0x8
  4695  0078                     	ds	1
  4696  0079                     ??i1_ReadFlash_4Byte:	
  4697  0079                     i1delayUS@j:	
  4698                           ; 0 bytes @ 0x9
  4699                           
  4700  0079                     i1UARTchar@NinethBit_override_data:	
  4701                           ; 1 bytes @ 0x9
  4702                           
  4703  0079                     i1___lldiv@quotient:	
  4704                           ; 1 bytes @ 0x9
  4705                           
  4706                           
  4707                           ; 4 bytes @ 0x9
  4708  0079                     	ds	1
  4709  007A                     ?_UART_send_break_timed:	
  4710  007A                     ?_WriteFlash_Sequential:	
  4711                           ; 0 bytes @ 0xA
  4712                           
  4713  007A                     ??i1_UARTchar:	
  4714                           ; 0 bytes @ 0xA
  4715                           
  4716  007A                     ??i1_Send_PS2:	
  4717                           ; 0 bytes @ 0xA
  4718                           
  4719  007A                     UART_send_break_timed@US:	
  4720                           ; 0 bytes @ 0xA
  4721                           
  4722  007A                     PS2RawToScan@temp:	
  4723                           ; 2 bytes @ 0xA
  4724                           
  4725  007A                     WriteFlash_Sequential@row:	
  4726                           ; 2 bytes @ 0xA
  4727                           
  4728                           
  4729                           ; 2 bytes @ 0xA
  4730  007A                     	ds	2
  4731  007C                     ??_UART_send_break_timed:	
  4732  007C                     WriteFlash_Sequential@buffer:	
  4733                           ; 0 bytes @ 0xC
  4734                           
  4735                           
  4736                           ; 1 bytes @ 0xC
  4737  007C                     	ds	1
  4738  007D                     WriteFlash_Sequential@amount:	
  4739  007D                     i1___lldiv@counter:	
  4740                           ; 1 bytes @ 0xD
  4741                           
  4742                           
  4743                           ; 1 bytes @ 0xD
  4744  007D                     	ds	1
  4745  007E                     ??_ResendLast:	
  4746                           
  4747                           	psect	cstackBANK0
  4748  0020                     __pcstackBANK0:	
  4749                           ; 0 bytes @ 0xE
  4750                           
  4751  0020                     ??_PS2RawToScan:	
  4752  0020                     ??_WriteFlash_Sequential:	
  4753                           ; 0 bytes @ 0x0
  4754                           
  4755  0020                     ?i1_InitUART:	
  4756                           ; 0 bytes @ 0x0
  4757                           
  4758  0020                     ?___llmod:	
  4759                           ; 0 bytes @ 0x0
  4760                           
  4761  0020                     i1UARTchar@data:	
  4762                           ; 4 bytes @ 0x0
  4763                           
  4764  0020                     i1Send_PS2@oddparity:	
  4765                           ; 1 bytes @ 0x0
  4766                           
  4767  0020                     ___llmod@divisor:	
  4768                           ; 1 bytes @ 0x0
  4769                           
  4770  0020                     i1InitUART@Baud:	
  4771                           ; 4 bytes @ 0x0
  4772                           
  4773  0020                     i1ReadFlash_4Byte@temp:	
  4774                           ; 4 bytes @ 0x0
  4775                           
  4776                           
  4777                           ; 4 bytes @ 0x0
  4778  0020                     	ds	1
  4779  0021                     ?i1_UARTstringWAIT:	
  4780  0021                     i1Send_PS2@command:	
  4781                           ; 0 bytes @ 0x1
  4782                           
  4783  0021                     i1UARTstringWAIT@data:	
  4784                           ; 1 bytes @ 0x1
  4785                           
  4786                           
  4787                           ; 2 bytes @ 0x1
  4788  0021                     	ds	1
  4789  0022                     i1Send_PS2@i:	
  4790                           
  4791                           ; 1 bytes @ 0x2
  4792  0022                     	ds	1
  4793  0023                     ??i1_UARTstringWAIT:	
  4794  0023                     i1Send_PS2@timeout:	
  4795                           ; 0 bytes @ 0x3
  4796                           
  4797  0023                     WriteFlash_Sequential@TempBufH:	
  4798                           ; 2 bytes @ 0x3
  4799                           
  4800                           
  4801                           ; 32 bytes @ 0x3
  4802  0023                     	ds	1
  4803  0024                     ?i1_ReadBaud:	
  4804  0024                     i1InitUART@parity:	
  4805                           ; 4 bytes @ 0x4
  4806                           
  4807  0024                     i1ReadBaud@row:	
  4808                           ; 1 bytes @ 0x4
  4809                           
  4810  0024                     ___llmod@dividend:	
  4811                           ; 2 bytes @ 0x4
  4812                           
  4813                           
  4814                           ; 4 bytes @ 0x4
  4815  0024                     	ds	1
  4816  0025                     ??i1_InitUART:	
  4817                           
  4818                           ; 0 bytes @ 0x5
  4819  0025                     	ds	1
  4820  0026                     i1ReadBaud@column:	
  4821                           
  4822                           ; 1 bytes @ 0x6
  4823  0026                     	ds	2
  4824  0028                     ??___llmod:	
  4825  0028                     ??i1_ReadBaud:	
  4826                           ; 0 bytes @ 0x8
  4827                           
  4828                           
  4829                           ; 0 bytes @ 0x8
  4830  0028                     	ds	1
  4831  0029                     ___llmod@counter:	
  4832                           
  4833                           ; 1 bytes @ 0x9
  4834  0029                     	ds	1
  4835  002A                     ?_sprintf:	
  4836  002A                     sprintf@f:	
  4837                           ; 2 bytes @ 0xA
  4838                           
  4839                           
  4840                           ; 2 bytes @ 0xA
  4841  002A                     	ds	3
  4842  002D                     i1InitUART@spbrg:	
  4843                           
  4844                           ; 2 bytes @ 0xD
  4845  002D                     	ds	2
  4846  002F                     i1InitUART@baudconfig:	
  4847                           
  4848                           ; 1 bytes @ 0xF
  4849  002F                     	ds	1
  4850  0030                     ??_sprintf:	
  4851  0030                     i1InitUART@config:	
  4852                           ; 0 bytes @ 0x10
  4853                           
  4854  0030                     i1ReadBaud@temp:	
  4855                           ; 1 bytes @ 0x10
  4856                           
  4857                           
  4858                           ; 4 bytes @ 0x10
  4859  0030                     	ds	1
  4860  0031                     i1InitUART@temp:	
  4861                           
  4862                           ; 4 bytes @ 0x11
  4863  0031                     	ds	5
  4864  0036                     sprintf@flag:	
  4865                           
  4866                           ; 1 bytes @ 0x16
  4867  0036                     	ds	1
  4868  0037                     sprintf@prec:	
  4869                           
  4870                           ; 2 bytes @ 0x17
  4871  0037                     	ds	2
  4872  0039                     sprintf@val:	
  4873                           
  4874                           ; 4 bytes @ 0x19
  4875  0039                     	ds	4
  4876  003D                     sprintf@ap:	
  4877                           
  4878                           ; 1 bytes @ 0x1D
  4879  003D                     	ds	1
  4880  003E                     sprintf@sp:	
  4881                           
  4882                           ; 1 bytes @ 0x1E
  4883  003E                     	ds	1
  4884  003F                     sprintf@c:	
  4885                           
  4886                           ; 1 bytes @ 0x1F
  4887  003F                     	ds	4
  4888  0043                     WriteFlash_Sequential@TempBufL:	
  4889                           
  4890                           ; 32 bytes @ 0x23
  4891  0043                     	ds	32
  4892  0063                     WriteFlash_Sequential@tempH:	
  4893                           
  4894                           ; 1 bytes @ 0x43
  4895  0063                     	ds	1
  4896  0064                     WriteFlash_Sequential@tempL:	
  4897                           
  4898                           ; 1 bytes @ 0x44
  4899  0064                     	ds	1
  4900  0065                     WriteFlash_Sequential@amountTemp:	
  4901                           
  4902                           ; 1 bytes @ 0x45
  4903  0065                     	ds	1
  4904  0066                     WriteFlash_Sequential@temp:	
  4905                           
  4906                           ; 2 bytes @ 0x46
  4907  0066                     	ds	2
  4908  0068                     WriteFlash_Sequential@spaces:	
  4909                           
  4910                           ; 1 bytes @ 0x48
  4911  0068                     	ds	1
  4912  0069                     WriteFlash_Sequential@i:	
  4913                           
  4914                           ; 1 bytes @ 0x49
  4915  0069                     	ds	1
  4916  006A                     WriteBaud@temp:	
  4917                           
  4918                           ; 4 bytes @ 0x4A
  4919  006A                     	ds	4
  4920  006E                     ??_isr:	
  4921                           
  4922                           ; 0 bytes @ 0x4E
  4923  006E                     	ds	2
  4924                           
  4925                           	psect	maintext
  4926  1615                     __pmaintext:	
  4927 ;;
  4928 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  4929 ;;
  4930 ;; *************** function _main *****************
  4931 ;; Defined at:
  4932 ;;		line 120 in file "main.c"
  4933 ;; Parameters:    Size  Location     Type
  4934 ;;		None
  4935 ;; Auto vars:     Size  Location     Type
  4936 ;;  i               1   54[BANK4 ] unsigned char 
  4937 ;; Return value:  Size  Location     Type
  4938 ;;		None               void
  4939 ;; Registers used:
  4940 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4941 ;; Tracked objects:
  4942 ;;		On entry : B1F/0
  4943 ;;		On exit  : 0/0
  4944 ;;		Unchanged: 0/0
  4945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4947 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  4948 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  4949 ;;      Totals:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  4950 ;;Total ram usage:        2 bytes
  4951 ;; Hardware stack levels required when called:   11
  4952 ;; This function calls:
  4953 ;;		_ConfigureOscillator
  4954 ;;		_InitApp
  4955 ;;		_Init_System
  4956 ;;		_PS_2_ENABLE_INTERRUPT
  4957 ;;		_PS_2_INIT
  4958 ;;		_ReadVoltage
  4959 ;;		_UARTstringWAIT
  4960 ;;		___ftge
  4961 ;;		_delayUS
  4962 ;; This function is called by:
  4963 ;;		Startup code after reset
  4964 ;; This function uses a non-reentrant model
  4965 ;;
  4966                           
  4967                           
  4968                           ;psect for function _main
  4969  1615                     _main:	
  4970                           
  4971                           ;main.c: 122: unsigned char i=0;
  4972                           
  4973                           ;incstack = 0
  4974                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4975  1615  0024               	movlb	4	; select bank4
  4976  1616  01D6               	clrf	main@i^(0+512)
  4977                           
  4978                           ;main.c: 124: ConfigureOscillator();
  4979  1617  3199  216F  3196   	fcall	_ConfigureOscillator
  4980                           
  4981                           ;main.c: 125: InitApp();
  4982  161A  3199  21D0  3196   	fcall	_InitApp
  4983                           
  4984                           ;main.c: 126: Init_System();
  4985  161D  318A  2251  3196   	fcall	_Init_System
  4986                           
  4987                           ;main.c: 127: PS_2_INIT();
  4988  1620  3199  2119  3196   	fcall	_PS_2_INIT
  4989                           
  4990                           ;main.c: 130: for(i =0;i<10;i++)
  4991  1623  0024               	movlb	4	; select bank4
  4992  1624  01D6               	clrf	main@i^(0+512)
  4993  1625  300A               	movlw	10
  4994  1626  0256               	subwf	main@i^(0+512),w
  4995  1627  1803               	btfsc	3,0
  4996  1628  2E52               	goto	l7012
  4997  1629                     l171:	
  4998                           
  4999                           ;main.c: 131: {
  5000                           ;main.c: 132: LATC |= 0b00010000;
  5001  1629  0022               	movlb	2	; select bank2
  5002  162A  160E               	bsf	14,4	;volatile
  5003                           
  5004                           ;main.c: 133: delayUS(10000);
  5005  162B  3000               	movlw	0
  5006  162C  0024               	movlb	4	; select bank4
  5007  162D  00A3               	movwf	(delayUS@US+3)^(0+512)
  5008  162E  3000               	movlw	0
  5009  162F  00A2               	movwf	(delayUS@US+2)^(0+512)
  5010  1630  3027               	movlw	39
  5011  1631  00A1               	movwf	(delayUS@US+1)^(0+512)
  5012  1632  3010               	movlw	16
  5013  1633  00A0               	movwf	delayUS@US^(0+512)
  5014  1634  319B  23E8  3196   	fcall	_delayUS
  5015                           
  5016                           ;main.c: 134: LATC &= ~0b00010000;
  5017  1637  30EF               	movlw	239
  5018  1638  0024               	movlb	4	; select bank4
  5019  1639  00D5               	movwf	??_main^(0+512)
  5020  163A  0855               	movf	??_main^(0+512),w
  5021  163B  0022               	movlb	2	; select bank2
  5022  163C  058E               	andwf	14,f	;volatile
  5023                           
  5024                           ;main.c: 135: delayUS(10000);
  5025  163D  3000               	movlw	0
  5026  163E  0024               	movlb	4	; select bank4
  5027  163F  00A3               	movwf	(delayUS@US+3)^(0+512)
  5028  1640  3000               	movlw	0
  5029  1641  00A2               	movwf	(delayUS@US+2)^(0+512)
  5030  1642  3027               	movlw	39
  5031  1643  00A1               	movwf	(delayUS@US+1)^(0+512)
  5032  1644  3010               	movlw	16
  5033  1645  00A0               	movwf	delayUS@US^(0+512)
  5034  1646  319B  23E8  3196   	fcall	_delayUS
  5035  1649  3001               	movlw	1
  5036  164A  0024               	movlb	4	; select bank4
  5037  164B  00D5               	movwf	??_main^(0+512)
  5038  164C  0855               	movf	??_main^(0+512),w
  5039  164D  07D6               	addwf	main@i^(0+512),f
  5040  164E  300A               	movlw	10
  5041  164F  0256               	subwf	main@i^(0+512),w
  5042  1650  1C03               	skipc
  5043  1651  2E29               	goto	l171
  5044  1652                     l7012:	
  5045                           
  5046                           ;main.c: 136: }
  5047                           ;main.c: 138: BatteryVoltage = ReadVoltage();
  5048  1652  319F  2741  3196   	fcall	_ReadVoltage
  5049  1655  0024               	movlb	4	; select bank4
  5050  1656  084C               	movf	?_ReadVoltage^(0+512),w
  5051  1657  00D7               	movwf	_BatteryVoltage^(0+512)
  5052  1658  084D               	movf	(?_ReadVoltage+1)^(0+512),w
  5053  1659  00D8               	movwf	(_BatteryVoltage+1)^(0+512)
  5054  165A  084E               	movf	(?_ReadVoltage+2)^(0+512),w
  5055  165B  00D9               	movwf	(_BatteryVoltage+2)^(0+512)
  5056                           
  5057                           ;main.c: 139: if(BatteryVoltage < 6.55 )
  5058  165C  0857               	movf	_BatteryVoltage^(0+512),w
  5059  165D  00A0               	movwf	___ftge@ff1^(0+512)
  5060  165E  0858               	movf	(_BatteryVoltage+1)^(0+512),w
  5061  165F  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5062  1660  0859               	movf	(_BatteryVoltage+2)^(0+512),w
  5063  1661  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5064  1662  309A               	movlw	154
  5065  1663  00A3               	movwf	___ftge@ff2^(0+512)
  5066  1664  30D1               	movlw	209
  5067  1665  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5068  1666  3040               	movlw	64
  5069  1667  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5070  1668  319C  241D  3196   	fcall	___ftge
  5071  166B  1803               	btfsc	3,0
  5072  166C  2E7A               	goto	l7016
  5073                           
  5074                           ;main.c: 140: {
  5075                           ;main.c: 141: UARTstringWAIT(VoltageMSG);
  5076  166D  3059               	movlw	low (_VoltageMSG| (0+32768))
  5077  166E  0024               	movlb	4	; select bank4
  5078  166F  00AF               	movwf	UARTstringWAIT@data^(0+512)
  5079  1670  3089               	movlw	high (_VoltageMSG| (0+32768))
  5080  1671  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  5081  1672  319B  2384  3196   	fcall	_UARTstringWAIT
  5082                           
  5083                           ;main.c: 142: UARTstringWAIT("Low!\r\n");
  5084  1675  303A               	movlw	low (STR_1| (0+32768))
  5085  1676  0024               	movlb	4	; select bank4
  5086  1677  00AF               	movwf	UARTstringWAIT@data^(0+512)
  5087  1678  308A               	movlw	high (STR_1| (0+32768))
  5088  1679  2E98               	goto	L1
  5089  167A                     l7016:	
  5090                           ;main.c: 143: }
  5091                           
  5092                           
  5093                           ;main.c: 144: else if (BatteryVoltage > 30.0)
  5094  167A  3000               	movlw	0
  5095  167B  0024               	movlb	4	; select bank4
  5096  167C  00A0               	movwf	___ftge@ff1^(0+512)
  5097  167D  30F0               	movlw	240
  5098  167E  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5099  167F  3041               	movlw	65
  5100  1680  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5101  1681  0857               	movf	_BatteryVoltage^(0+512),w
  5102  1682  00A3               	movwf	___ftge@ff2^(0+512)
  5103  1683  0858               	movf	(_BatteryVoltage+1)^(0+512),w
  5104  1684  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5105  1685  0859               	movf	(_BatteryVoltage+2)^(0+512),w
  5106  1686  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5107  1687  319C  241D  3196   	fcall	___ftge
  5108  168A  1803               	btfsc	3,0
  5109  168B  2E9C               	goto	l7020
  5110                           
  5111                           ;main.c: 145: {
  5112                           ;main.c: 146: UARTstringWAIT(VoltageMSG);
  5113  168C  3059               	movlw	low (_VoltageMSG| (0+32768))
  5114  168D  0024               	movlb	4	; select bank4
  5115  168E  00AF               	movwf	UARTstringWAIT@data^(0+512)
  5116  168F  3089               	movlw	high (_VoltageMSG| (0+32768))
  5117  1690  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  5118  1691  319B  2384  3196   	fcall	_UARTstringWAIT
  5119                           
  5120                           ;main.c: 147: UARTstringWAIT("High!\r\n");
  5121  1694  3032               	movlw	low (STR_2| (0+32768))
  5122  1695  0024               	movlb	4	; select bank4
  5123  1696  00AF               	movwf	UARTstringWAIT@data^(0+512)
  5124  1697  308A               	movlw	high (STR_2| (0+32768))
  5125  1698                     L1:	
  5126  1698  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  5127  1699  319B  2384  3196   	fcall	_UARTstringWAIT
  5128  169C                     l7020:	
  5129                           
  5130                           ;main.c: 148: }
  5131                           ;main.c: 150: PS_2_ENABLE_INTERRUPT(0b00100000);
  5132  169C  3020               	movlw	32
  5133  169D  3198  20F2  3196   	fcall	_PS_2_ENABLE_INTERRUPT
  5134                           
  5135                           ;main.c: 152: PIE1bits.RCIE = 1;
  5136  16A0  0021               	movlb	1	; select bank1
  5137  16A1  1691               	bsf	17,5	;volatile
  5138  16A2                     l7024:	
  5139                           ;main.c: 155: while(1)
  5140                           
  5141                           
  5142                           ;main.c: 156: {
  5143                           ;main.c: 157: BatteryVoltage = ReadVoltage();
  5144  16A2  319F  2741  3196   	fcall	_ReadVoltage
  5145  16A5  0024               	movlb	4	; select bank4
  5146  16A6  084C               	movf	?_ReadVoltage^(0+512),w
  5147  16A7  00D7               	movwf	_BatteryVoltage^(0+512)
  5148  16A8  084D               	movf	(?_ReadVoltage+1)^(0+512),w
  5149  16A9  00D8               	movwf	(_BatteryVoltage+1)^(0+512)
  5150  16AA  084E               	movf	(?_ReadVoltage+2)^(0+512),w
  5151  16AB  00D9               	movwf	(_BatteryVoltage+2)^(0+512)
  5152                           
  5153                           ;main.c: 158: delayUS(20);
  5154  16AC  3000               	movlw	0
  5155  16AD  00A3               	movwf	(delayUS@US+3)^(0+512)
  5156  16AE  3000               	movlw	0
  5157  16AF  00A2               	movwf	(delayUS@US+2)^(0+512)
  5158  16B0  3000               	movlw	0
  5159  16B1  00A1               	movwf	(delayUS@US+1)^(0+512)
  5160  16B2  3014               	movlw	20
  5161  16B3  00A0               	movwf	delayUS@US^(0+512)
  5162  16B4  319B  23E8  3196   	fcall	_delayUS
  5163                           
  5164                           ;main.c: 159: if(BatteryVoltage < 6.55 || BatteryVoltage > 30.0)
  5165  16B7  0024               	movlb	4	; select bank4
  5166  16B8  0857               	movf	_BatteryVoltage^(0+512),w
  5167  16B9  00A0               	movwf	___ftge@ff1^(0+512)
  5168  16BA  0858               	movf	(_BatteryVoltage+1)^(0+512),w
  5169  16BB  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5170  16BC  0859               	movf	(_BatteryVoltage+2)^(0+512),w
  5171  16BD  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5172  16BE  309A               	movlw	154
  5173  16BF  00A3               	movwf	___ftge@ff2^(0+512)
  5174  16C0  30D1               	movlw	209
  5175  16C1  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5176  16C2  3040               	movlw	64
  5177  16C3  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5178  16C4  319C  241D  3196   	fcall	___ftge
  5179  16C7  1C03               	btfss	3,0
  5180  16C8  2EDB               	goto	l179
  5181  16C9  3000               	movlw	0
  5182  16CA  0024               	movlb	4	; select bank4
  5183  16CB  00A0               	movwf	___ftge@ff1^(0+512)
  5184  16CC  30F0               	movlw	240
  5185  16CD  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5186  16CE  3041               	movlw	65
  5187  16CF  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5188  16D0  0857               	movf	_BatteryVoltage^(0+512),w
  5189  16D1  00A3               	movwf	___ftge@ff2^(0+512)
  5190  16D2  0858               	movf	(_BatteryVoltage+1)^(0+512),w
  5191  16D3  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5192  16D4  0859               	movf	(_BatteryVoltage+2)^(0+512),w
  5193  16D5  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5194  16D6  319C  241D  3196   	fcall	___ftge
  5195  16D9  1803               	btfsc	3,0
  5196  16DA  2EDF               	goto	l7032
  5197  16DB                     l179:	
  5198                           
  5199                           ;main.c: 160: {
  5200                           ;main.c: 161: Alarm = 1;
  5201  16DB  0024               	movlb	4	; select bank4
  5202  16DC  01DE               	clrf	_Alarm^(0+512)
  5203  16DD  0ADE               	incf	_Alarm^(0+512),f
  5204                           
  5205                           ;main.c: 162: }
  5206  16DE  2EE3               	goto	l7036
  5207  16DF                     l7032:	
  5208                           
  5209                           ;main.c: 163: else
  5210                           ;main.c: 164: {
  5211                           ;main.c: 165: Alarm = 0;
  5212  16DF  0024               	movlb	4	; select bank4
  5213  16E0  01DE               	clrf	_Alarm^(0+512)
  5214                           
  5215                           ;main.c: 166: LATC |= 0b00000010;
  5216  16E1  0022               	movlb	2	; select bank2
  5217  16E2  148E               	bsf	14,1	;volatile
  5218  16E3                     l7036:	
  5219                           
  5220                           ;main.c: 167: }
  5221                           ;main.c: 168: if(Alarm)
  5222  16E3  0024               	movlb	4	; select bank4
  5223  16E4  085E               	movf	_Alarm^(0+512),w
  5224  16E5  1903               	btfsc	3,2
  5225  16E6  2EF7               	goto	l7046
  5226                           
  5227                           ;main.c: 169: {
  5228                           ;main.c: 170: pwrLEDtoggle++;
  5229  16E7  3001               	movlw	1
  5230  16E8  07DC               	addwf	_pwrLEDtoggle^(0+512),f
  5231  16E9  3000               	movlw	0
  5232  16EA  3DDD               	addwfc	(_pwrLEDtoggle+1)^(0+512),f
  5233                           
  5234                           ;main.c: 171: if(pwrLEDtoggle == 100)
  5235  16EB  3064               	movlw	100
  5236  16EC  065C               	xorwf	_pwrLEDtoggle^(0+512),w
  5237  16ED  045D               	iorwf	(_pwrLEDtoggle+1)^(0+512),w
  5238  16EE  1D03               	btfss	3,2
  5239  16EF  2EF7               	goto	l7046
  5240                           
  5241                           ;main.c: 172: {
  5242                           ;main.c: 173: pwrLEDtoggle = 0;
  5243  16F0  01DC               	clrf	_pwrLEDtoggle^(0+512)
  5244  16F1  01DD               	clrf	(_pwrLEDtoggle+1)^(0+512)
  5245                           
  5246                           ;main.c: 174: LATC ^= 0b00000010;
  5247  16F2  3002               	movlw	2
  5248  16F3  00D5               	movwf	??_main^(0+512)
  5249  16F4  0855               	movf	??_main^(0+512),w
  5250  16F5  0022               	movlb	2	; select bank2
  5251  16F6  068E               	xorwf	14,f	;volatile
  5252  16F7                     l7046:	
  5253                           
  5254                           ;main.c: 175: }
  5255                           ;main.c: 176: }
  5256                           ;main.c: 178: if(SinLEDtimer < 100)
  5257  16F7  3000               	movlw	0
  5258  16F8  0024               	movlb	4	; select bank4
  5259  16F9  025B               	subwf	(_SinLEDtimer+1)^(0+512),w
  5260  16FA  3064               	movlw	100
  5261  16FB  1903               	skipnz
  5262  16FC  025A               	subwf	_SinLEDtimer^(0+512),w
  5263  16FD  1803               	skipnc
  5264  16FE  2F04               	goto	l7050
  5265                           
  5266                           ;main.c: 179: {
  5267                           ;main.c: 180: SinLEDtimer++;
  5268  16FF  3001               	movlw	1
  5269  1700  07DA               	addwf	_SinLEDtimer^(0+512),f
  5270  1701  3000               	movlw	0
  5271  1702  3DDB               	addwfc	(_SinLEDtimer+1)^(0+512),f
  5272                           
  5273                           ;main.c: 181: }
  5274  1703  2EA2               	goto	l7024
  5275  1704                     l7050:	
  5276                           
  5277                           ;main.c: 182: else
  5278                           ;main.c: 183: {
  5279                           ;main.c: 184: LATC &= ~0b00001000;
  5280  1704  30F7               	movlw	247
  5281  1705  00D5               	movwf	??_main^(0+512)
  5282  1706  0855               	movf	??_main^(0+512),w
  5283  1707  0022               	movlb	2	; select bank2
  5284  1708  058E               	andwf	14,f	;volatile
  5285  1709  2EA2               	goto	l7024
  5286  170A                     __end_of_main:	
  5287                           
  5288                           	psect	text1
  5289  1C1D                     __ptext1:	
  5290 ;; *************** function ___ftge *****************
  5291 ;; Defined at:
  5292 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  5293 ;; Parameters:    Size  Location     Type
  5294 ;;  ff1             3    0[BANK4 ] float 
  5295 ;;  ff2             3    3[BANK4 ] float 
  5296 ;; Auto vars:     Size  Location     Type
  5297 ;;		None
  5298 ;; Return value:  Size  Location     Type
  5299 ;;		None               void
  5300 ;; Registers used:
  5301 ;;		wreg, status,2, status,0
  5302 ;; Tracked objects:
  5303 ;;		On entry : 0/0
  5304 ;;		On exit  : 0/0
  5305 ;;		Unchanged: 0/0
  5306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5307 ;;      Params:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5309 ;;      Temps:          0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  5310 ;;      Totals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0
  5311 ;;Total ram usage:        9 bytes
  5312 ;; Hardware stack levels used:    1
  5313 ;; Hardware stack levels required when called:    7
  5314 ;; This function calls:
  5315 ;;		Nothing
  5316 ;; This function is called by:
  5317 ;;		_main
  5318 ;; This function uses a non-reentrant model
  5319 ;;
  5320                           
  5321                           
  5322                           ;psect for function ___ftge
  5323  1C1D                     ___ftge:	
  5324                           
  5325                           ;incstack = 0
  5326                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  5327  1C1D  0024               	movlb	4	; select bank4
  5328  1C1E  1FA2               	btfss	(___ftge@ff1+2)^(0+512),7
  5329  1C1F  2C34               	goto	l6972
  5330  1C20  0920               	comf	___ftge@ff1^(0+512),w
  5331  1C21  00A6               	movwf	??___ftge^(0+512)
  5332  1C22  0921               	comf	(___ftge@ff1+1)^(0+512),w
  5333  1C23  00A7               	movwf	(??___ftge^(0+512)+1)
  5334  1C24  0922               	comf	(___ftge@ff1+2)^(0+512),w
  5335  1C25  00A8               	movwf	(??___ftge^(0+512)+2)
  5336  1C26  0AA6               	incf	??___ftge^(0+512),f
  5337  1C27  1903               	skipnz
  5338  1C28  0AA7               	incf	(??___ftge^(0+512)+1),f
  5339  1C29  1903               	skipnz
  5340  1C2A  0AA8               	incf	(??___ftge^(0+512)+2),f
  5341  1C2B  3000               	movlw	0
  5342  1C2C  0726               	addwf	??___ftge^(0+512),w
  5343  1C2D  00A0               	movwf	___ftge@ff1^(0+512)
  5344  1C2E  3000               	movlw	0
  5345  1C2F  3D27               	addwfc	(??___ftge+1)^(0+512),w
  5346  1C30  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5347  1C31  3080               	movlw	128
  5348  1C32  3D28               	addwfc	(??___ftge+2)^(0+512),w
  5349  1C33  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5350  1C34                     l6972:	
  5351  1C34  1FA5               	btfss	(___ftge@ff2+2)^(0+512),7
  5352  1C35  2C4A               	goto	l6976
  5353  1C36  0923               	comf	___ftge@ff2^(0+512),w
  5354  1C37  00A6               	movwf	??___ftge^(0+512)
  5355  1C38  0924               	comf	(___ftge@ff2+1)^(0+512),w
  5356  1C39  00A7               	movwf	(??___ftge^(0+512)+1)
  5357  1C3A  0925               	comf	(___ftge@ff2+2)^(0+512),w
  5358  1C3B  00A8               	movwf	(??___ftge^(0+512)+2)
  5359  1C3C  0AA6               	incf	??___ftge^(0+512),f
  5360  1C3D  1903               	skipnz
  5361  1C3E  0AA7               	incf	(??___ftge^(0+512)+1),f
  5362  1C3F  1903               	skipnz
  5363  1C40  0AA8               	incf	(??___ftge^(0+512)+2),f
  5364  1C41  3000               	movlw	0
  5365  1C42  0726               	addwf	??___ftge^(0+512),w
  5366  1C43  00A3               	movwf	___ftge@ff2^(0+512)
  5367  1C44  3000               	movlw	0
  5368  1C45  3D27               	addwfc	(??___ftge+1)^(0+512),w
  5369  1C46  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5370  1C47  3080               	movlw	128
  5371  1C48  3D28               	addwfc	(??___ftge+2)^(0+512),w
  5372  1C49  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5373  1C4A                     l6976:	
  5374  1C4A  3080               	movlw	128
  5375  1C4B  06A2               	xorwf	(___ftge@ff1+2)^(0+512),f
  5376  1C4C  3080               	movlw	128
  5377  1C4D  06A5               	xorwf	(___ftge@ff2+2)^(0+512),f
  5378  1C4E  0825               	movf	(___ftge@ff2+2)^(0+512),w
  5379  1C4F  0222               	subwf	(___ftge@ff1+2)^(0+512),w
  5380  1C50  1D03               	skipz
  5381  1C51  0008               	return
  5382  1C52  0824               	movf	(___ftge@ff2+1)^(0+512),w
  5383  1C53  0221               	subwf	(___ftge@ff1+1)^(0+512),w
  5384  1C54  1D03               	skipz
  5385  1C55  0008               	return
  5386  1C56  0823               	movf	___ftge@ff2^(0+512),w
  5387  1C57  0220               	subwf	___ftge@ff1^(0+512),w
  5388  1C58  0008               	return
  5389  1C59                     __end_of___ftge:	
  5390                           
  5391                           	psect	text2
  5392  1F41                     __ptext2:	
  5393 ;; *************** function _ReadVoltage *****************
  5394 ;; Defined at:
  5395 ;;		line 62 in file "ADC.c"
  5396 ;; Parameters:    Size  Location     Type
  5397 ;;		None
  5398 ;; Auto vars:     Size  Location     Type
  5399 ;;  voltage         3   48[BANK4 ] float 
  5400 ;;  temp            2   51[BANK4 ] unsigned int 
  5401 ;; Return value:  Size  Location     Type
  5402 ;;                  3   44[BANK4 ] unsigned int 
  5403 ;; Registers used:
  5404 ;;		wreg, status,2, status,0, pclath, cstack
  5405 ;; Tracked objects:
  5406 ;;		On entry : 0/0
  5407 ;;		On exit  : 0/0
  5408 ;;		Unchanged: 0/0
  5409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5410 ;;      Params:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  5411 ;;      Locals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  5412 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  5413 ;;      Totals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0
  5414 ;;Total ram usage:        9 bytes
  5415 ;; Hardware stack levels used:    1
  5416 ;; Hardware stack levels required when called:    9
  5417 ;; This function calls:
  5418 ;;		_DisableInternalADC
  5419 ;;		_InternalADC_Read
  5420 ;;		___ftdiv
  5421 ;;		___ftmul
  5422 ;;		___lwtoft
  5423 ;; This function is called by:
  5424 ;;		_main
  5425 ;; This function uses a non-reentrant model
  5426 ;;
  5427                           
  5428                           
  5429                           ;psect for function _ReadVoltage
  5430  1F41                     _ReadVoltage:	
  5431                           
  5432                           ;ADC.c: 64: unsigned int temp;
  5433                           ;ADC.c: 65: double voltage;
  5434                           ;ADC.c: 70: temp = InternalADC_Read(2);
  5435                           
  5436                           ;incstack = 0
  5437                           ; Regs used in _ReadVoltage: [wreg+status,2+status,0+pclath+cstack]
  5438  1F41  3002               	movlw	2
  5439  1F42  319C  24DB  319F   	fcall	_InternalADC_Read
  5440  1F45  0024               	movlb	4	; select bank4
  5441  1F46  082B               	movf	(?_InternalADC_Read+1)^(0+512),w
  5442  1F47  00D4               	movwf	(ReadVoltage@temp+1)^(0+512)
  5443  1F48  082A               	movf	?_InternalADC_Read^(0+512),w
  5444  1F49  00D3               	movwf	ReadVoltage@temp^(0+512)
  5445                           
  5446                           ;ADC.c: 71: DisableInternalADC();
  5447  1F4A  3198  207B  319F   	fcall	_DisableInternalADC
  5448                           
  5449                           ;ADC.c: 78: if((FVRCON & 0x03) == 0x03)
  5450  1F4D  3003               	movlw	3
  5451  1F4E  0022               	movlb	2	; select bank2
  5452  1F4F  0517               	andwf	23,w	;volatile
  5453  1F50  0024               	movlb	4	; select bank4
  5454  1F51  00CF               	movwf	??_ReadVoltage^(0+512)
  5455  1F52  3003               	movlw	3
  5456  1F53  064F               	xorwf	??_ReadVoltage^(0+512),w
  5457  1F54  1D03               	btfss	3,2
  5458  1F55  2F5C               	goto	l6958
  5459                           
  5460                           ;ADC.c: 79: {
  5461                           ;ADC.c: 81: temp <<= 2;
  5462  1F56  3002               	movlw	2
  5463  1F57                     u9105:	
  5464  1F57  35D3               	lslf	ReadVoltage@temp^(0+512),f
  5465  1F58  0DD4               	rlf	(ReadVoltage@temp+1)^(0+512),f
  5466  1F59  0B89               	decfsz	9,f
  5467  1F5A  2F57               	goto	u9105
  5468                           
  5469                           ;ADC.c: 82: }
  5470  1F5B  2F6A               	goto	l6962
  5471  1F5C                     l6958:	
  5472                           
  5473                           ;ADC.c: 83: else if((FVRCON & 0x03) == 0x02)
  5474  1F5C  3003               	movlw	3
  5475  1F5D  0022               	movlb	2	; select bank2
  5476  1F5E  0517               	andwf	23,w	;volatile
  5477  1F5F  0024               	movlb	4	; select bank4
  5478  1F60  00CF               	movwf	??_ReadVoltage^(0+512)
  5479  1F61  3002               	movlw	2
  5480  1F62  064F               	xorwf	??_ReadVoltage^(0+512),w
  5481  1F63  1D03               	btfss	3,2
  5482  1F64  2F6A               	goto	l6962
  5483                           
  5484                           ;ADC.c: 84: {
  5485                           ;ADC.c: 86: temp <<= 1;
  5486  1F65  3001               	movlw	1
  5487  1F66                     u9125:	
  5488  1F66  35D3               	lslf	ReadVoltage@temp^(0+512),f
  5489  1F67  0DD4               	rlf	(ReadVoltage@temp+1)^(0+512),f
  5490  1F68  0B89               	decfsz	9,f
  5491  1F69  2F66               	goto	u9125
  5492  1F6A                     l6962:	
  5493                           
  5494                           ;ADC.c: 87: }
  5495                           ;ADC.c: 88: voltage = ((double)temp / 1000) * 5.7;
  5496  1F6A  3066               	movlw	102
  5497  1F6B  00BC               	movwf	___ftmul@f1^(0+512)
  5498  1F6C  30B6               	movlw	182
  5499  1F6D  00BD               	movwf	(___ftmul@f1+1)^(0+512)
  5500  1F6E  3040               	movlw	64
  5501  1F6F  00BE               	movwf	(___ftmul@f1+2)^(0+512)
  5502  1F70  3000               	movlw	0
  5503  1F71  00AC               	movwf	___ftdiv@f2^(0+512)
  5504  1F72  307A               	movlw	122
  5505  1F73  00AD               	movwf	(___ftdiv@f2+1)^(0+512)
  5506  1F74  3044               	movlw	68
  5507  1F75  00AE               	movwf	(___ftdiv@f2+2)^(0+512)
  5508  1F76  0854               	movf	(ReadVoltage@temp+1)^(0+512),w
  5509  1F77  00A9               	movwf	(___lwtoft@c+1)^(0+512)
  5510  1F78  0853               	movf	ReadVoltage@temp^(0+512),w
  5511  1F79  00A8               	movwf	___lwtoft@c^(0+512)
  5512  1F7A  3199  21BB  319F   	fcall	___lwtoft
  5513  1F7D  0024               	movlb	4	; select bank4
  5514  1F7E  0828               	movf	?___lwtoft^(0+512),w
  5515  1F7F  00AF               	movwf	___ftdiv@f1^(0+512)
  5516  1F80  0829               	movf	(?___lwtoft+1)^(0+512),w
  5517  1F81  00B0               	movwf	(___ftdiv@f1+1)^(0+512)
  5518  1F82  082A               	movf	(?___lwtoft+2)^(0+512),w
  5519  1F83  00B1               	movwf	(___ftdiv@f1+2)^(0+512)
  5520  1F84  3192  2220  319F   	fcall	___ftdiv
  5521  1F87  0024               	movlb	4	; select bank4
  5522  1F88  082C               	movf	?___ftdiv^(0+512),w
  5523  1F89  00BF               	movwf	___ftmul@f2^(0+512)
  5524  1F8A  082D               	movf	(?___ftdiv+1)^(0+512),w
  5525  1F8B  00C0               	movwf	(___ftmul@f2+1)^(0+512)
  5526  1F8C  082E               	movf	(?___ftdiv+2)^(0+512),w
  5527  1F8D  00C1               	movwf	(___ftmul@f2+2)^(0+512)
  5528  1F8E  3192  22C9         	fcall	___ftmul
  5529  1F90  0024               	movlb	4	; select bank4
  5530  1F91  083C               	movf	?___ftmul^(0+512),w
  5531  1F92  00D0               	movwf	ReadVoltage@voltage^(0+512)
  5532  1F93  083D               	movf	(?___ftmul+1)^(0+512),w
  5533  1F94  00D1               	movwf	(ReadVoltage@voltage+1)^(0+512)
  5534  1F95  083E               	movf	(?___ftmul+2)^(0+512),w
  5535  1F96  00D2               	movwf	(ReadVoltage@voltage+2)^(0+512)
  5536                           
  5537                           ;ADC.c: 89: return voltage;
  5538  1F97  0850               	movf	ReadVoltage@voltage^(0+512),w
  5539  1F98  00CC               	movwf	?_ReadVoltage^(0+512)
  5540  1F99  0851               	movf	(ReadVoltage@voltage+1)^(0+512),w
  5541  1F9A  00CD               	movwf	(?_ReadVoltage+1)^(0+512)
  5542  1F9B  0852               	movf	(ReadVoltage@voltage+2)^(0+512),w
  5543  1F9C  00CE               	movwf	(?_ReadVoltage+2)^(0+512)
  5544  1F9D  0008               	return
  5545  1F9E                     __end_of_ReadVoltage:	
  5546                           
  5547                           	psect	text3
  5548  19BB                     __ptext3:	
  5549 ;; *************** function ___lwtoft *****************
  5550 ;; Defined at:
  5551 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  5552 ;; Parameters:    Size  Location     Type
  5553 ;;  c               2    8[BANK4 ] unsigned int 
  5554 ;; Auto vars:     Size  Location     Type
  5555 ;;		None
  5556 ;; Return value:  Size  Location     Type
  5557 ;;                  3    8[BANK4 ] float 
  5558 ;; Registers used:
  5559 ;;		wreg, status,2, status,0, pclath, cstack
  5560 ;; Tracked objects:
  5561 ;;		On entry : 0/0
  5562 ;;		On exit  : 0/0
  5563 ;;		Unchanged: 0/0
  5564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5565 ;;      Params:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  5566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5567 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  5568 ;;      Totals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  5569 ;;Total ram usage:        4 bytes
  5570 ;; Hardware stack levels used:    1
  5571 ;; Hardware stack levels required when called:    8
  5572 ;; This function calls:
  5573 ;;		___ftpack
  5574 ;; This function is called by:
  5575 ;;		_ReadVoltage
  5576 ;; This function uses a non-reentrant model
  5577 ;;
  5578                           
  5579                           
  5580                           ;psect for function ___lwtoft
  5581  19BB                     ___lwtoft:	
  5582                           
  5583                           ;incstack = 0
  5584                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  5585  19BB  0024               	movlb	4	; select bank4
  5586  19BC  0828               	movf	___lwtoft@c^(0+512),w
  5587  19BD  00A0               	movwf	___ftpack@arg^(0+512)
  5588  19BE  0829               	movf	(___lwtoft@c+1)^(0+512),w
  5589  19BF  00A1               	movwf	(___ftpack@arg+1)^(0+512)
  5590  19C0  01A2               	clrf	(___ftpack@arg+2)^(0+512)
  5591  19C1  308E               	movlw	142
  5592  19C2  00AB               	movwf	??___lwtoft^(0+512)
  5593  19C3  082B               	movf	??___lwtoft^(0+512),w
  5594  19C4  00A3               	movwf	___ftpack@exp^(0+512)
  5595  19C5  01A4               	clrf	___ftpack@sign^(0+512)
  5596  19C6  3191  2155         	fcall	___ftpack
  5597  19C8  0024               	movlb	4	; select bank4
  5598  19C9  0820               	movf	?___ftpack^(0+512),w
  5599  19CA  00A8               	movwf	?___lwtoft^(0+512)
  5600  19CB  0821               	movf	(?___ftpack+1)^(0+512),w
  5601  19CC  00A9               	movwf	(?___lwtoft+1)^(0+512)
  5602  19CD  0822               	movf	(?___ftpack+2)^(0+512),w
  5603  19CE  00AA               	movwf	(?___lwtoft+2)^(0+512)
  5604  19CF  0008               	return
  5605  19D0                     __end_of___lwtoft:	
  5606                           
  5607                           	psect	text4
  5608  12C9                     __ptext4:	
  5609 ;; *************** function ___ftmul *****************
  5610 ;; Defined at:
  5611 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  5612 ;; Parameters:    Size  Location     Type
  5613 ;;  f1              3   28[BANK4 ] float 
  5614 ;;  f2              3   31[BANK4 ] float 
  5615 ;; Auto vars:     Size  Location     Type
  5616 ;;  f3_as_produc    3   39[BANK4 ] unsigned um
  5617 ;;  sign            1   43[BANK4 ] unsigned char 
  5618 ;;  cntr            1   42[BANK4 ] unsigned char 
  5619 ;;  exp             1   38[BANK4 ] unsigned char 
  5620 ;; Return value:  Size  Location     Type
  5621 ;;                  3   28[BANK4 ] float 
  5622 ;; Registers used:
  5623 ;;		wreg, status,2, status,0, pclath, cstack
  5624 ;; Tracked objects:
  5625 ;;		On entry : 0/0
  5626 ;;		On exit  : 0/0
  5627 ;;		Unchanged: 0/0
  5628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5629 ;;      Params:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5630 ;;      Locals:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5631 ;;      Temps:          0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  5632 ;;      Totals:         0       0       0       0       0      16       0       0       0       0       0       0       
      +0       0
  5633 ;;Total ram usage:       16 bytes
  5634 ;; Hardware stack levels used:    1
  5635 ;; Hardware stack levels required when called:    8
  5636 ;; This function calls:
  5637 ;;		___ftpack
  5638 ;; This function is called by:
  5639 ;;		_ReadVoltage
  5640 ;; This function uses a non-reentrant model
  5641 ;;
  5642                           
  5643                           
  5644                           ;psect for function ___ftmul
  5645  12C9                     ___ftmul:	
  5646                           
  5647                           ;incstack = 0
  5648                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  5649  12C9  0024               	movlb	4	; select bank4
  5650  12CA  083C               	movf	___ftmul@f1^(0+512),w
  5651  12CB  00C2               	movwf	??___ftmul^(0+512)
  5652  12CC  083D               	movf	(___ftmul@f1+1)^(0+512),w
  5653  12CD  00C3               	movwf	(??___ftmul^(0+512)+1)
  5654  12CE  083E               	movf	(___ftmul@f1+2)^(0+512),w
  5655  12CF  00C4               	movwf	(??___ftmul^(0+512)+2)
  5656  12D0  1003               	clrc
  5657  12D1  0D43               	rlf	(??___ftmul^(0+512)+1),w
  5658  12D2  0D44               	rlf	(??___ftmul^(0+512)+2),w
  5659  12D3  00C5               	movwf	(??___ftmul+3)^(0+512)
  5660  12D4  0845               	movf	(??___ftmul+3)^(0+512),w
  5661  12D5  00C6               	movwf	___ftmul@exp^(0+512)
  5662  12D6  0846               	movf	___ftmul@exp^(0+512),w
  5663  12D7  1D03               	btfss	3,2
  5664  12D8  2AE0               	goto	l6794
  5665  12D9  3000               	movlw	0
  5666  12DA  00BC               	movwf	?___ftmul^(0+512)
  5667  12DB  3000               	movlw	0
  5668  12DC  00BD               	movwf	(?___ftmul+1)^(0+512)
  5669  12DD  3000               	movlw	0
  5670  12DE  00BE               	movwf	(?___ftmul+2)^(0+512)
  5671  12DF  0008               	return
  5672  12E0                     l6794:	
  5673  12E0  083F               	movf	___ftmul@f2^(0+512),w
  5674  12E1  00C2               	movwf	??___ftmul^(0+512)
  5675  12E2  0840               	movf	(___ftmul@f2+1)^(0+512),w
  5676  12E3  00C3               	movwf	(??___ftmul^(0+512)+1)
  5677  12E4  0841               	movf	(___ftmul@f2+2)^(0+512),w
  5678  12E5  00C4               	movwf	(??___ftmul^(0+512)+2)
  5679  12E6  1003               	clrc
  5680  12E7  0D43               	rlf	(??___ftmul^(0+512)+1),w
  5681  12E8  0D44               	rlf	(??___ftmul^(0+512)+2),w
  5682  12E9  00C5               	movwf	(??___ftmul+3)^(0+512)
  5683  12EA  0845               	movf	(??___ftmul+3)^(0+512),w
  5684  12EB  00CB               	movwf	___ftmul@sign^(0+512)
  5685  12EC  084B               	movf	___ftmul@sign^(0+512),w
  5686  12ED  1D03               	btfss	3,2
  5687  12EE  2AF6               	goto	l6800
  5688  12EF  3000               	movlw	0
  5689  12F0  00BC               	movwf	?___ftmul^(0+512)
  5690  12F1  3000               	movlw	0
  5691  12F2  00BD               	movwf	(?___ftmul+1)^(0+512)
  5692  12F3  3000               	movlw	0
  5693  12F4  00BE               	movwf	(?___ftmul+2)^(0+512)
  5694  12F5  0008               	return
  5695  12F6                     l6800:	
  5696  12F6  084B               	movf	___ftmul@sign^(0+512),w
  5697  12F7  3E7B               	addlw	123
  5698  12F8  00C2               	movwf	??___ftmul^(0+512)
  5699  12F9  0842               	movf	??___ftmul^(0+512),w
  5700  12FA  07C6               	addwf	___ftmul@exp^(0+512),f
  5701  12FB  083C               	movf	___ftmul@f1^(0+512),w
  5702  12FC  00C2               	movwf	??___ftmul^(0+512)
  5703  12FD  083D               	movf	(___ftmul@f1+1)^(0+512),w
  5704  12FE  00C3               	movwf	(??___ftmul^(0+512)+1)
  5705  12FF  083E               	movf	(___ftmul@f1+2)^(0+512),w
  5706  1300  00C4               	movwf	(??___ftmul^(0+512)+2)
  5707  1301  3010               	movlw	16
  5708  1302                     u8925:	
  5709  1302  36C4               	lsrf	(??___ftmul^(0+512)+2),f
  5710  1303  0CC3               	rrf	(??___ftmul^(0+512)+1),f
  5711  1304  0CC2               	rrf	??___ftmul^(0+512),f
  5712  1305  0B89               	decfsz	9,f
  5713  1306  2B02               	goto	u8925
  5714  1307  0842               	movf	??___ftmul^(0+512),w
  5715  1308  00C5               	movwf	(??___ftmul+3)^(0+512)
  5716  1309  0845               	movf	(??___ftmul+3)^(0+512),w
  5717  130A  00CB               	movwf	___ftmul@sign^(0+512)
  5718  130B  083F               	movf	___ftmul@f2^(0+512),w
  5719  130C  00C2               	movwf	??___ftmul^(0+512)
  5720  130D  0840               	movf	(___ftmul@f2+1)^(0+512),w
  5721  130E  00C3               	movwf	(??___ftmul^(0+512)+1)
  5722  130F  0841               	movf	(___ftmul@f2+2)^(0+512),w
  5723  1310  00C4               	movwf	(??___ftmul^(0+512)+2)
  5724  1311  3010               	movlw	16
  5725  1312                     u8935:	
  5726  1312  36C4               	lsrf	(??___ftmul^(0+512)+2),f
  5727  1313  0CC3               	rrf	(??___ftmul^(0+512)+1),f
  5728  1314  0CC2               	rrf	??___ftmul^(0+512),f
  5729  1315  0B89               	decfsz	9,f
  5730  1316  2B12               	goto	u8935
  5731  1317  0842               	movf	??___ftmul^(0+512),w
  5732  1318  00C5               	movwf	(??___ftmul+3)^(0+512)
  5733  1319  0845               	movf	(??___ftmul+3)^(0+512),w
  5734  131A  06CB               	xorwf	___ftmul@sign^(0+512),f
  5735  131B  3080               	movlw	128
  5736  131C  00C2               	movwf	??___ftmul^(0+512)
  5737  131D  0842               	movf	??___ftmul^(0+512),w
  5738  131E  05CB               	andwf	___ftmul@sign^(0+512),f
  5739  131F  17BD               	bsf	(___ftmul@f1^(0+512)+1),7
  5740  1320  17C0               	bsf	(___ftmul@f2^(0+512)+1),7
  5741  1321  30FF               	movlw	255
  5742  1322  05BF               	andwf	___ftmul@f2^(0+512),f
  5743  1323  30FF               	movlw	255
  5744  1324  05C0               	andwf	(___ftmul@f2+1)^(0+512),f
  5745  1325  3000               	movlw	0
  5746  1326  05C1               	andwf	(___ftmul@f2+2)^(0+512),f
  5747  1327  3000               	movlw	0
  5748  1328  00C7               	movwf	___ftmul@f3_as_product^(0+512)
  5749  1329  3000               	movlw	0
  5750  132A  00C8               	movwf	(___ftmul@f3_as_product+1)^(0+512)
  5751  132B  3000               	movlw	0
  5752  132C  00C9               	movwf	(___ftmul@f3_as_product+2)^(0+512)
  5753  132D  3007               	movlw	7
  5754  132E  00C2               	movwf	??___ftmul^(0+512)
  5755  132F  0842               	movf	??___ftmul^(0+512),w
  5756  1330  00CA               	movwf	___ftmul@cntr^(0+512)
  5757  1331                     l6812:	
  5758  1331  1C3C               	btfss	___ftmul@f1^(0+512),0
  5759  1332  2B39               	goto	l6816
  5760  1333  083F               	movf	___ftmul@f2^(0+512),w
  5761  1334  07C7               	addwf	___ftmul@f3_as_product^(0+512),f
  5762  1335  0840               	movf	(___ftmul@f2+1)^(0+512),w
  5763  1336  3DC8               	addwfc	(___ftmul@f3_as_product+1)^(0+512),f
  5764  1337  0841               	movf	(___ftmul@f2+2)^(0+512),w
  5765  1338  3DC9               	addwfc	(___ftmul@f3_as_product+2)^(0+512),f
  5766  1339                     l6816:	
  5767  1339  3001               	movlw	1
  5768  133A                     u8955:	
  5769  133A  36BE               	lsrf	(___ftmul@f1+2)^(0+512),f
  5770  133B  0CBD               	rrf	(___ftmul@f1+1)^(0+512),f
  5771  133C  0CBC               	rrf	___ftmul@f1^(0+512),f
  5772  133D  0B89               	decfsz	9,f
  5773  133E  2B3A               	goto	u8955
  5774  133F  3001               	movlw	1
  5775  1340                     u8965:	
  5776  1340  35BF               	lslf	___ftmul@f2^(0+512),f
  5777  1341  0DC0               	rlf	(___ftmul@f2+1)^(0+512),f
  5778  1342  0DC1               	rlf	(___ftmul@f2+2)^(0+512),f
  5779  1343  0B89               	decfsz	9,f
  5780  1344  2B40               	goto	u8965
  5781  1345  3001               	movlw	1
  5782  1346  02CA               	subwf	___ftmul@cntr^(0+512),f
  5783  1347  1D03               	btfss	3,2
  5784  1348  2B31               	goto	l6812
  5785  1349  3009               	movlw	9
  5786  134A  00C2               	movwf	??___ftmul^(0+512)
  5787  134B  0842               	movf	??___ftmul^(0+512),w
  5788  134C  00CA               	movwf	___ftmul@cntr^(0+512)
  5789  134D                     l6824:	
  5790  134D  1C3C               	btfss	___ftmul@f1^(0+512),0
  5791  134E  2B55               	goto	l6828
  5792  134F  083F               	movf	___ftmul@f2^(0+512),w
  5793  1350  07C7               	addwf	___ftmul@f3_as_product^(0+512),f
  5794  1351  0840               	movf	(___ftmul@f2+1)^(0+512),w
  5795  1352  3DC8               	addwfc	(___ftmul@f3_as_product+1)^(0+512),f
  5796  1353  0841               	movf	(___ftmul@f2+2)^(0+512),w
  5797  1354  3DC9               	addwfc	(___ftmul@f3_as_product+2)^(0+512),f
  5798  1355                     l6828:	
  5799  1355  3001               	movlw	1
  5800  1356                     u8995:	
  5801  1356  36BE               	lsrf	(___ftmul@f1+2)^(0+512),f
  5802  1357  0CBD               	rrf	(___ftmul@f1+1)^(0+512),f
  5803  1358  0CBC               	rrf	___ftmul@f1^(0+512),f
  5804  1359  0B89               	decfsz	9,f
  5805  135A  2B56               	goto	u8995
  5806  135B  3001               	movlw	1
  5807  135C                     u9005:	
  5808  135C  36C9               	lsrf	(___ftmul@f3_as_product+2)^(0+512),f
  5809  135D  0CC8               	rrf	(___ftmul@f3_as_product+1)^(0+512),f
  5810  135E  0CC7               	rrf	___ftmul@f3_as_product^(0+512),f
  5811  135F  0B89               	decfsz	9,f
  5812  1360  2B5C               	goto	u9005
  5813  1361  3001               	movlw	1
  5814  1362  02CA               	subwf	___ftmul@cntr^(0+512),f
  5815  1363  1D03               	btfss	3,2
  5816  1364  2B4D               	goto	l6824
  5817  1365  0847               	movf	___ftmul@f3_as_product^(0+512),w
  5818  1366  00A0               	movwf	___ftpack@arg^(0+512)
  5819  1367  0848               	movf	(___ftmul@f3_as_product+1)^(0+512),w
  5820  1368  00A1               	movwf	(___ftpack@arg+1)^(0+512)
  5821  1369  0849               	movf	(___ftmul@f3_as_product+2)^(0+512),w
  5822  136A  00A2               	movwf	(___ftpack@arg+2)^(0+512)
  5823  136B  0846               	movf	___ftmul@exp^(0+512),w
  5824  136C  00C2               	movwf	??___ftmul^(0+512)
  5825  136D  0842               	movf	??___ftmul^(0+512),w
  5826  136E  00A3               	movwf	___ftpack@exp^(0+512)
  5827  136F  084B               	movf	___ftmul@sign^(0+512),w
  5828  1370  00C3               	movwf	(??___ftmul+1)^(0+512)
  5829  1371  0843               	movf	(??___ftmul+1)^(0+512),w
  5830  1372  00A4               	movwf	___ftpack@sign^(0+512)
  5831  1373  3191  2155         	fcall	___ftpack
  5832  1375  0024               	movlb	4	; select bank4
  5833  1376  0820               	movf	?___ftpack^(0+512),w
  5834  1377  00BC               	movwf	?___ftmul^(0+512)
  5835  1378  0821               	movf	(?___ftpack+1)^(0+512),w
  5836  1379  00BD               	movwf	(?___ftmul+1)^(0+512)
  5837  137A  0822               	movf	(?___ftpack+2)^(0+512),w
  5838  137B  00BE               	movwf	(?___ftmul+2)^(0+512)
  5839  137C  0008               	return
  5840  137D                     __end_of___ftmul:	
  5841                           
  5842                           	psect	text5
  5843  1220                     __ptext5:	
  5844 ;; *************** function ___ftdiv *****************
  5845 ;; Defined at:
  5846 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  5847 ;; Parameters:    Size  Location     Type
  5848 ;;  f2              3   12[BANK4 ] float 
  5849 ;;  f1              3   15[BANK4 ] float 
  5850 ;; Auto vars:     Size  Location     Type
  5851 ;;  f3              3   23[BANK4 ] float 
  5852 ;;  sign            1   27[BANK4 ] unsigned char 
  5853 ;;  exp             1   26[BANK4 ] unsigned char 
  5854 ;;  cntr            1   22[BANK4 ] unsigned char 
  5855 ;; Return value:  Size  Location     Type
  5856 ;;                  3   12[BANK4 ] float 
  5857 ;; Registers used:
  5858 ;;		wreg, status,2, status,0, pclath, cstack
  5859 ;; Tracked objects:
  5860 ;;		On entry : 0/0
  5861 ;;		On exit  : 0/0
  5862 ;;		Unchanged: 0/0
  5863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5864 ;;      Params:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5865 ;;      Locals:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5866 ;;      Temps:          0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  5867 ;;      Totals:         0       0       0       0       0      16       0       0       0       0       0       0       
      +0       0
  5868 ;;Total ram usage:       16 bytes
  5869 ;; Hardware stack levels used:    1
  5870 ;; Hardware stack levels required when called:    8
  5871 ;; This function calls:
  5872 ;;		___ftpack
  5873 ;; This function is called by:
  5874 ;;		_ReadVoltage
  5875 ;; This function uses a non-reentrant model
  5876 ;;
  5877                           
  5878                           
  5879                           ;psect for function ___ftdiv
  5880  1220                     ___ftdiv:	
  5881                           
  5882                           ;incstack = 0
  5883                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  5884  1220  0024               	movlb	4	; select bank4
  5885  1221  082F               	movf	___ftdiv@f1^(0+512),w
  5886  1222  00B2               	movwf	??___ftdiv^(0+512)
  5887  1223  0830               	movf	(___ftdiv@f1+1)^(0+512),w
  5888  1224  00B3               	movwf	(??___ftdiv^(0+512)+1)
  5889  1225  0831               	movf	(___ftdiv@f1+2)^(0+512),w
  5890  1226  00B4               	movwf	(??___ftdiv^(0+512)+2)
  5891  1227  1003               	clrc
  5892  1228  0D33               	rlf	(??___ftdiv^(0+512)+1),w
  5893  1229  0D34               	rlf	(??___ftdiv^(0+512)+2),w
  5894  122A  00B5               	movwf	(??___ftdiv+3)^(0+512)
  5895  122B  0835               	movf	(??___ftdiv+3)^(0+512),w
  5896  122C  00BA               	movwf	___ftdiv@exp^(0+512)
  5897  122D  083A               	movf	___ftdiv@exp^(0+512),w
  5898  122E  1D03               	btfss	3,2
  5899  122F  2A37               	goto	l6752
  5900  1230  3000               	movlw	0
  5901  1231  00AC               	movwf	?___ftdiv^(0+512)
  5902  1232  3000               	movlw	0
  5903  1233  00AD               	movwf	(?___ftdiv+1)^(0+512)
  5904  1234  3000               	movlw	0
  5905  1235  00AE               	movwf	(?___ftdiv+2)^(0+512)
  5906  1236  0008               	return
  5907  1237                     l6752:	
  5908  1237  082C               	movf	___ftdiv@f2^(0+512),w
  5909  1238  00B2               	movwf	??___ftdiv^(0+512)
  5910  1239  082D               	movf	(___ftdiv@f2+1)^(0+512),w
  5911  123A  00B3               	movwf	(??___ftdiv^(0+512)+1)
  5912  123B  082E               	movf	(___ftdiv@f2+2)^(0+512),w
  5913  123C  00B4               	movwf	(??___ftdiv^(0+512)+2)
  5914  123D  1003               	clrc
  5915  123E  0D33               	rlf	(??___ftdiv^(0+512)+1),w
  5916  123F  0D34               	rlf	(??___ftdiv^(0+512)+2),w
  5917  1240  00B5               	movwf	(??___ftdiv+3)^(0+512)
  5918  1241  0835               	movf	(??___ftdiv+3)^(0+512),w
  5919  1242  00BB               	movwf	___ftdiv@sign^(0+512)
  5920  1243  083B               	movf	___ftdiv@sign^(0+512),w
  5921  1244  1D03               	btfss	3,2
  5922  1245  2A4D               	goto	l6758
  5923  1246  3000               	movlw	0
  5924  1247  00AC               	movwf	?___ftdiv^(0+512)
  5925  1248  3000               	movlw	0
  5926  1249  00AD               	movwf	(?___ftdiv+1)^(0+512)
  5927  124A  3000               	movlw	0
  5928  124B  00AE               	movwf	(?___ftdiv+2)^(0+512)
  5929  124C  0008               	return
  5930  124D                     l6758:	
  5931  124D  3000               	movlw	0
  5932  124E  00B7               	movwf	___ftdiv@f3^(0+512)
  5933  124F  3000               	movlw	0
  5934  1250  00B8               	movwf	(___ftdiv@f3+1)^(0+512)
  5935  1251  3000               	movlw	0
  5936  1252  00B9               	movwf	(___ftdiv@f3+2)^(0+512)
  5937  1253  3089               	movlw	137
  5938  1254  073B               	addwf	___ftdiv@sign^(0+512),w
  5939  1255  00B2               	movwf	??___ftdiv^(0+512)
  5940  1256  0832               	movf	??___ftdiv^(0+512),w
  5941  1257  02BA               	subwf	___ftdiv@exp^(0+512),f
  5942  1258  082F               	movf	___ftdiv@f1^(0+512),w
  5943  1259  00B2               	movwf	??___ftdiv^(0+512)
  5944  125A  0830               	movf	(___ftdiv@f1+1)^(0+512),w
  5945  125B  00B3               	movwf	(??___ftdiv^(0+512)+1)
  5946  125C  0831               	movf	(___ftdiv@f1+2)^(0+512),w
  5947  125D  00B4               	movwf	(??___ftdiv^(0+512)+2)
  5948  125E  3010               	movlw	16
  5949  125F                     u8845:	
  5950  125F  36B4               	lsrf	(??___ftdiv^(0+512)+2),f
  5951  1260  0CB3               	rrf	(??___ftdiv^(0+512)+1),f
  5952  1261  0CB2               	rrf	??___ftdiv^(0+512),f
  5953  1262  0B89               	decfsz	9,f
  5954  1263  2A5F               	goto	u8845
  5955  1264  0832               	movf	??___ftdiv^(0+512),w
  5956  1265  00B5               	movwf	(??___ftdiv+3)^(0+512)
  5957  1266  0835               	movf	(??___ftdiv+3)^(0+512),w
  5958  1267  00BB               	movwf	___ftdiv@sign^(0+512)
  5959  1268  082C               	movf	___ftdiv@f2^(0+512),w
  5960  1269  00B2               	movwf	??___ftdiv^(0+512)
  5961  126A  082D               	movf	(___ftdiv@f2+1)^(0+512),w
  5962  126B  00B3               	movwf	(??___ftdiv^(0+512)+1)
  5963  126C  082E               	movf	(___ftdiv@f2+2)^(0+512),w
  5964  126D  00B4               	movwf	(??___ftdiv^(0+512)+2)
  5965  126E  3010               	movlw	16
  5966  126F                     u8855:	
  5967  126F  36B4               	lsrf	(??___ftdiv^(0+512)+2),f
  5968  1270  0CB3               	rrf	(??___ftdiv^(0+512)+1),f
  5969  1271  0CB2               	rrf	??___ftdiv^(0+512),f
  5970  1272  0B89               	decfsz	9,f
  5971  1273  2A6F               	goto	u8855
  5972  1274  0832               	movf	??___ftdiv^(0+512),w
  5973  1275  00B5               	movwf	(??___ftdiv+3)^(0+512)
  5974  1276  0835               	movf	(??___ftdiv+3)^(0+512),w
  5975  1277  06BB               	xorwf	___ftdiv@sign^(0+512),f
  5976  1278  3080               	movlw	128
  5977  1279  00B2               	movwf	??___ftdiv^(0+512)
  5978  127A  0832               	movf	??___ftdiv^(0+512),w
  5979  127B  05BB               	andwf	___ftdiv@sign^(0+512),f
  5980  127C  17B0               	bsf	(___ftdiv@f1^(0+512)+1),7
  5981  127D  30FF               	movlw	255
  5982  127E  05AF               	andwf	___ftdiv@f1^(0+512),f
  5983  127F  30FF               	movlw	255
  5984  1280  05B0               	andwf	(___ftdiv@f1+1)^(0+512),f
  5985  1281  3000               	movlw	0
  5986  1282  05B1               	andwf	(___ftdiv@f1+2)^(0+512),f
  5987  1283  17AD               	bsf	(___ftdiv@f2^(0+512)+1),7
  5988  1284  30FF               	movlw	255
  5989  1285  05AC               	andwf	___ftdiv@f2^(0+512),f
  5990  1286  30FF               	movlw	255
  5991  1287  05AD               	andwf	(___ftdiv@f2+1)^(0+512),f
  5992  1288  3000               	movlw	0
  5993  1289  05AE               	andwf	(___ftdiv@f2+2)^(0+512),f
  5994  128A  3018               	movlw	24
  5995  128B  00B2               	movwf	??___ftdiv^(0+512)
  5996  128C  0832               	movf	??___ftdiv^(0+512),w
  5997  128D  00B6               	movwf	___ftdiv@cntr^(0+512)
  5998  128E                     l6772:	
  5999  128E  3001               	movlw	1
  6000  128F                     u8865:	
  6001  128F  35B7               	lslf	___ftdiv@f3^(0+512),f
  6002  1290  0DB8               	rlf	(___ftdiv@f3+1)^(0+512),f
  6003  1291  0DB9               	rlf	(___ftdiv@f3+2)^(0+512),f
  6004  1292  0B89               	decfsz	9,f
  6005  1293  2A8F               	goto	u8865
  6006  1294  082E               	movf	(___ftdiv@f2+2)^(0+512),w
  6007  1295  0231               	subwf	(___ftdiv@f1+2)^(0+512),w
  6008  1296  1D03               	skipz
  6009  1297  2A9E               	goto	u8875
  6010  1298  082D               	movf	(___ftdiv@f2+1)^(0+512),w
  6011  1299  0230               	subwf	(___ftdiv@f1+1)^(0+512),w
  6012  129A  1D03               	skipz
  6013  129B  2A9E               	goto	u8875
  6014  129C  082C               	movf	___ftdiv@f2^(0+512),w
  6015  129D  022F               	subwf	___ftdiv@f1^(0+512),w
  6016  129E                     u8875:	
  6017  129E  1C03               	skipc
  6018  129F  2AA7               	goto	l6780
  6019  12A0  082C               	movf	___ftdiv@f2^(0+512),w
  6020  12A1  02AF               	subwf	___ftdiv@f1^(0+512),f
  6021  12A2  082D               	movf	(___ftdiv@f2+1)^(0+512),w
  6022  12A3  3BB0               	subwfb	(___ftdiv@f1+1)^(0+512),f
  6023  12A4  082E               	movf	(___ftdiv@f2+2)^(0+512),w
  6024  12A5  3BB1               	subwfb	(___ftdiv@f1+2)^(0+512),f
  6025  12A6  1437               	bsf	___ftdiv@f3^(0+512),0
  6026  12A7                     l6780:	
  6027  12A7  3001               	movlw	1
  6028  12A8                     u8885:	
  6029  12A8  35AF               	lslf	___ftdiv@f1^(0+512),f
  6030  12A9  0DB0               	rlf	(___ftdiv@f1+1)^(0+512),f
  6031  12AA  0DB1               	rlf	(___ftdiv@f1+2)^(0+512),f
  6032  12AB  0B89               	decfsz	9,f
  6033  12AC  2AA8               	goto	u8885
  6034  12AD  3001               	movlw	1
  6035  12AE  02B6               	subwf	___ftdiv@cntr^(0+512),f
  6036  12AF  1D03               	btfss	3,2
  6037  12B0  2A8E               	goto	l6772
  6038  12B1  0837               	movf	___ftdiv@f3^(0+512),w
  6039  12B2  00A0               	movwf	___ftpack@arg^(0+512)
  6040  12B3  0838               	movf	(___ftdiv@f3+1)^(0+512),w
  6041  12B4  00A1               	movwf	(___ftpack@arg+1)^(0+512)
  6042  12B5  0839               	movf	(___ftdiv@f3+2)^(0+512),w
  6043  12B6  00A2               	movwf	(___ftpack@arg+2)^(0+512)
  6044  12B7  083A               	movf	___ftdiv@exp^(0+512),w
  6045  12B8  00B2               	movwf	??___ftdiv^(0+512)
  6046  12B9  0832               	movf	??___ftdiv^(0+512),w
  6047  12BA  00A3               	movwf	___ftpack@exp^(0+512)
  6048  12BB  083B               	movf	___ftdiv@sign^(0+512),w
  6049  12BC  00B3               	movwf	(??___ftdiv+1)^(0+512)
  6050  12BD  0833               	movf	(??___ftdiv+1)^(0+512),w
  6051  12BE  00A4               	movwf	___ftpack@sign^(0+512)
  6052  12BF  3191  2155         	fcall	___ftpack
  6053  12C1  0024               	movlb	4	; select bank4
  6054  12C2  0820               	movf	?___ftpack^(0+512),w
  6055  12C3  00AC               	movwf	?___ftdiv^(0+512)
  6056  12C4  0821               	movf	(?___ftpack+1)^(0+512),w
  6057  12C5  00AD               	movwf	(?___ftdiv+1)^(0+512)
  6058  12C6  0822               	movf	(?___ftpack+2)^(0+512),w
  6059  12C7  00AE               	movwf	(?___ftdiv+2)^(0+512)
  6060  12C8  0008               	return
  6061  12C9                     __end_of___ftdiv:	
  6062                           
  6063                           	psect	text6
  6064  1155                     __ptext6:	
  6065 ;; *************** function ___ftpack *****************
  6066 ;; Defined at:
  6067 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  6068 ;; Parameters:    Size  Location     Type
  6069 ;;  arg             3    0[BANK4 ] unsigned um
  6070 ;;  exp             1    3[BANK4 ] unsigned char 
  6071 ;;  sign            1    4[BANK4 ] unsigned char 
  6072 ;; Auto vars:     Size  Location     Type
  6073 ;;		None
  6074 ;; Return value:  Size  Location     Type
  6075 ;;                  3    0[BANK4 ] float 
  6076 ;; Registers used:
  6077 ;;		wreg, status,2, status,0
  6078 ;; Tracked objects:
  6079 ;;		On entry : 0/0
  6080 ;;		On exit  : 0/0
  6081 ;;		Unchanged: 0/0
  6082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6083 ;;      Params:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  6084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6085 ;;      Temps:          0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  6086 ;;      Totals:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  6087 ;;Total ram usage:        8 bytes
  6088 ;; Hardware stack levels used:    1
  6089 ;; Hardware stack levels required when called:    7
  6090 ;; This function calls:
  6091 ;;		Nothing
  6092 ;; This function is called by:
  6093 ;;		___ftdiv
  6094 ;;		___ftmul
  6095 ;;		___lwtoft
  6096 ;; This function uses a non-reentrant model
  6097 ;;
  6098                           
  6099                           
  6100                           ;psect for function ___ftpack
  6101  1155                     ___ftpack:	
  6102                           
  6103                           ;incstack = 0
  6104                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6105  1155  0024               	movlb	4	; select bank4
  6106  1156  0823               	movf	___ftpack@exp^(0+512),w
  6107  1157  1903               	btfsc	3,2
  6108  1158  295E               	goto	l6542
  6109  1159  0822               	movf	(___ftpack@arg+2)^(0+512),w
  6110  115A  0421               	iorwf	(___ftpack@arg+1)^(0+512),w
  6111  115B  0420               	iorwf	___ftpack@arg^(0+512),w
  6112  115C  1D03               	skipz
  6113  115D  296F               	goto	l6548
  6114  115E                     l6542:	
  6115  115E  3000               	movlw	0
  6116  115F  00A0               	movwf	?___ftpack^(0+512)
  6117  1160  3000               	movlw	0
  6118  1161  00A1               	movwf	(?___ftpack+1)^(0+512)
  6119  1162  3000               	movlw	0
  6120  1163  00A2               	movwf	(?___ftpack+2)^(0+512)
  6121  1164  0008               	return
  6122  1165                     l6546:	
  6123  1165  3001               	movlw	1
  6124  1166  00A5               	movwf	??___ftpack^(0+512)
  6125  1167  0825               	movf	??___ftpack^(0+512),w
  6126  1168  07A3               	addwf	___ftpack@exp^(0+512),f
  6127  1169  3001               	movlw	1
  6128  116A                     u8465:	
  6129  116A  36A2               	lsrf	(___ftpack@arg+2)^(0+512),f
  6130  116B  0CA1               	rrf	(___ftpack@arg+1)^(0+512),f
  6131  116C  0CA0               	rrf	___ftpack@arg^(0+512),f
  6132  116D  0B89               	decfsz	9,f
  6133  116E  296A               	goto	u8465
  6134  116F                     l6548:	
  6135  116F  30FE               	movlw	254
  6136  1170  0522               	andwf	(___ftpack@arg+2)^(0+512),w
  6137  1171  1903               	btfsc	3,2
  6138  1172  2988               	goto	l1263
  6139  1173  2965               	goto	l6546
  6140  1174                     l6550:	
  6141  1174  3001               	movlw	1
  6142  1175  00A5               	movwf	??___ftpack^(0+512)
  6143  1176  0825               	movf	??___ftpack^(0+512),w
  6144  1177  07A3               	addwf	___ftpack@exp^(0+512),f
  6145  1178  3001               	movlw	1
  6146  1179  07A0               	addwf	___ftpack@arg^(0+512),f
  6147  117A  3000               	movlw	0
  6148  117B  1803               	skipnc
  6149  117C  3001               	movlw	1
  6150  117D  07A1               	addwf	(___ftpack@arg+1)^(0+512),f
  6151  117E  3000               	movlw	0
  6152  117F  1803               	skipnc
  6153  1180  3001               	movlw	1
  6154  1181  07A2               	addwf	(___ftpack@arg+2)^(0+512),f
  6155  1182  3001               	movlw	1
  6156  1183                     u8485:	
  6157  1183  36A2               	lsrf	(___ftpack@arg+2)^(0+512),f
  6158  1184  0CA1               	rrf	(___ftpack@arg+1)^(0+512),f
  6159  1185  0CA0               	rrf	___ftpack@arg^(0+512),f
  6160  1186  0B89               	decfsz	9,f
  6161  1187  2983               	goto	u8485
  6162  1188                     l1263:	
  6163  1188  30FF               	movlw	255
  6164  1189  0522               	andwf	(___ftpack@arg+2)^(0+512),w
  6165  118A  1903               	btfsc	3,2
  6166  118B  2999               	goto	l6558
  6167  118C  2974               	goto	l6550
  6168  118D                     l6560:	
  6169  118D  3002               	movlw	2
  6170  118E  0223               	subwf	___ftpack@exp^(0+512),w
  6171  118F  1C03               	btfss	3,0
  6172  1190  299B               	goto	l1270
  6173  1191  3001               	movlw	1
  6174  1192  02A3               	subwf	___ftpack@exp^(0+512),f
  6175  1193  3001               	movlw	1
  6176  1194                     u8505:	
  6177  1194  35A0               	lslf	___ftpack@arg^(0+512),f
  6178  1195  0DA1               	rlf	(___ftpack@arg+1)^(0+512),f
  6179  1196  0DA2               	rlf	(___ftpack@arg+2)^(0+512),f
  6180  1197  0B89               	decfsz	9,f
  6181  1198  2994               	goto	u8505
  6182  1199                     l6558:	
  6183  1199  1FA1               	btfss	(___ftpack@arg+1)^(0+512),7
  6184  119A  298D               	goto	l6560
  6185  119B                     l1270:	
  6186  119B  1823               	btfsc	___ftpack@exp^(0+512),0
  6187  119C  29A3               	goto	l1271
  6188  119D  30FF               	movlw	255
  6189  119E  05A0               	andwf	___ftpack@arg^(0+512),f
  6190  119F  307F               	movlw	127
  6191  11A0  05A1               	andwf	(___ftpack@arg+1)^(0+512),f
  6192  11A1  30FF               	movlw	255
  6193  11A2  05A2               	andwf	(___ftpack@arg+2)^(0+512),f
  6194  11A3                     l1271:	
  6195  11A3  1003               	clrc
  6196  11A4  0CA3               	rrf	___ftpack@exp^(0+512),f
  6197  11A5  0823               	movf	___ftpack@exp^(0+512),w
  6198  11A6  00A5               	movwf	??___ftpack^(0+512)
  6199  11A7  01A6               	clrf	(??___ftpack^(0+512)+1)
  6200  11A8  01A7               	clrf	(??___ftpack^(0+512)+2)
  6201  11A9  3010               	movlw	16
  6202  11AA                     u8545:	
  6203  11AA  35A5               	lslf	??___ftpack^(0+512),f
  6204  11AB  0DA6               	rlf	(??___ftpack^(0+512)+1),f
  6205  11AC  0DA7               	rlf	(??___ftpack^(0+512)+2),f
  6206  11AD  0B89               	decfsz	9,f
  6207  11AE  29AA               	goto	u8545
  6208  11AF  0825               	movf	??___ftpack^(0+512),w
  6209  11B0  04A0               	iorwf	___ftpack@arg^(0+512),f
  6210  11B1  0826               	movf	(??___ftpack+1)^(0+512),w
  6211  11B2  04A1               	iorwf	(___ftpack@arg+1)^(0+512),f
  6212  11B3  0827               	movf	(??___ftpack+2)^(0+512),w
  6213  11B4  04A2               	iorwf	(___ftpack@arg+2)^(0+512),f
  6214  11B5  0824               	movf	___ftpack@sign^(0+512),w
  6215  11B6  1903               	btfsc	3,2
  6216  11B7  0008               	return
  6217  11B8  17A2               	bsf	(___ftpack@arg^(0+512)+2),7
  6218  11B9  0008               	return
  6219  11BA                     __end_of___ftpack:	
  6220                           
  6221                           	psect	text7
  6222  1CDB                     __ptext7:	
  6223 ;; *************** function _InternalADC_Read *****************
  6224 ;; Defined at:
  6225 ;;		line 97 in file "ADC.c"
  6226 ;; Parameters:    Size  Location     Type
  6227 ;;  channel         1    wreg     unsigned char 
  6228 ;; Auto vars:     Size  Location     Type
  6229 ;;  channel         1   14[BANK4 ] unsigned char 
  6230 ;; Return value:  Size  Location     Type
  6231 ;;                  2   10[BANK4 ] unsigned int 
  6232 ;; Registers used:
  6233 ;;		wreg, status,2, status,0, pclath, cstack
  6234 ;; Tracked objects:
  6235 ;;		On entry : 0/0
  6236 ;;		On exit  : 0/0
  6237 ;;		Unchanged: 0/0
  6238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6239 ;;      Params:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  6240 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6241 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  6242 ;;      Totals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  6243 ;;Total ram usage:        5 bytes
  6244 ;; Hardware stack levels used:    1
  6245 ;; Hardware stack levels required when called:    8
  6246 ;; This function calls:
  6247 ;;		_delayUS
  6248 ;; This function is called by:
  6249 ;;		_ReadVoltage
  6250 ;; This function uses a non-reentrant model
  6251 ;;
  6252                           
  6253                           
  6254                           ;psect for function _InternalADC_Read
  6255  1CDB                     _InternalADC_Read:	
  6256                           
  6257                           ;incstack = 0
  6258                           ; Regs used in _InternalADC_Read: [wreg+status,2+status,0+pclath+cstack]
  6259                           ;InternalADC_Read@channel stored from wreg
  6260  1CDB  0024               	movlb	4	; select bank4
  6261  1CDC  00AE               	movwf	InternalADC_Read@channel^(0+512)
  6262                           
  6263                           ;ADC.c: 99: ADCON0 =0;
  6264  1CDD  0021               	movlb	1	; select bank1
  6265  1CDE  019D               	clrf	29	;volatile
  6266                           
  6267                           ;ADC.c: 100: ADCON1 =0;
  6268  1CDF  019E               	clrf	30	;volatile
  6269                           
  6270                           ;ADC.c: 101: ADCON1 |= 0b01010000;
  6271  1CE0  3050               	movlw	80
  6272  1CE1  0024               	movlb	4	; select bank4
  6273  1CE2  00AC               	movwf	??_InternalADC_Read^(0+512)
  6274  1CE3  082C               	movf	??_InternalADC_Read^(0+512),w
  6275  1CE4  0021               	movlb	1	; select bank1
  6276  1CE5  049E               	iorwf	30,f	;volatile
  6277                           
  6278                           ;ADC.c: 102: FVRCON |= 0b10000000;
  6279  1CE6  0022               	movlb	2	; select bank2
  6280  1CE7  1797               	bsf	23,7	;volatile
  6281                           
  6282                           ;ADC.c: 103: FVRCON |= 0b00000011;
  6283  1CE8  3003               	movlw	3
  6284  1CE9  0024               	movlb	4	; select bank4
  6285  1CEA  00AC               	movwf	??_InternalADC_Read^(0+512)
  6286  1CEB  082C               	movf	??_InternalADC_Read^(0+512),w
  6287  1CEC  0022               	movlb	2	; select bank2
  6288  1CED  0497               	iorwf	23,f	;volatile
  6289  1CEE                     l1031:	
  6290                           ;ADC.c: 104: while(!(FVRCON & 0b01000000));
  6291                           
  6292  1CEE  1F17               	btfss	23,6	;volatile
  6293  1CEF  2CEE               	goto	l1031
  6294                           
  6295                           ;ADC.c: 105: ADCON0 |= (channel << 2);
  6296  1CF0  0024               	movlb	4	; select bank4
  6297  1CF1  082E               	movf	InternalADC_Read@channel^(0+512),w
  6298  1CF2  00AC               	movwf	??_InternalADC_Read^(0+512)
  6299  1CF3  3001               	movlw	1
  6300  1CF4                     u8805:	
  6301  1CF4  35AC               	lslf	??_InternalADC_Read^(0+512),f
  6302  1CF5  3EFF               	addlw	-1
  6303  1CF6  1D03               	skipz
  6304  1CF7  2CF4               	goto	u8805
  6305  1CF8  352C               	lslf	??_InternalADC_Read^(0+512),w
  6306  1CF9  00AD               	movwf	(??_InternalADC_Read+1)^(0+512)
  6307  1CFA  082D               	movf	(??_InternalADC_Read+1)^(0+512),w
  6308  1CFB  0021               	movlb	1	; select bank1
  6309  1CFC  049D               	iorwf	29,f	;volatile
  6310                           
  6311                           ;ADC.c: 106: ADCON1 |= 0b10000011;
  6312  1CFD  3083               	movlw	131
  6313  1CFE  0024               	movlb	4	; select bank4
  6314  1CFF  00AC               	movwf	??_InternalADC_Read^(0+512)
  6315  1D00  082C               	movf	??_InternalADC_Read^(0+512),w
  6316  1D01  0021               	movlb	1	; select bank1
  6317  1D02  049E               	iorwf	30,f	;volatile
  6318                           
  6319                           ;ADC.c: 107: ADCON0 |= 0b00000001;
  6320  1D03  141D               	bsf	29,0	;volatile
  6321                           
  6322                           ;ADC.c: 108: (PIE1bits.ADIE=0);
  6323  1D04  1311               	bcf	17,6	;volatile
  6324                           
  6325                           ;ADC.c: 109: delayUS(5);
  6326  1D05  3000               	movlw	0
  6327  1D06  0024               	movlb	4	; select bank4
  6328  1D07  00A3               	movwf	(delayUS@US+3)^(0+512)
  6329  1D08  3000               	movlw	0
  6330  1D09  00A2               	movwf	(delayUS@US+2)^(0+512)
  6331  1D0A  3000               	movlw	0
  6332  1D0B  00A1               	movwf	(delayUS@US+1)^(0+512)
  6333  1D0C  3005               	movlw	5
  6334  1D0D  00A0               	movwf	delayUS@US^(0+512)
  6335  1D0E  319B  23E8  319C   	fcall	_delayUS
  6336                           
  6337                           ;ADC.c: 110: ADCON0 |= 0b00000010;
  6338  1D11  0021               	movlb	1	; select bank1
  6339  1D12  149D               	bsf	29,1	;volatile
  6340  1D13                     l1034:	
  6341                           ;ADC.c: 111: while(ADCON0 & 0b00000010);
  6342                           
  6343  1D13  189D               	btfsc	29,1	;volatile
  6344  1D14  2D13               	goto	l1034
  6345                           
  6346                           ;ADC.c: 112: return ((ADRESH << 8) + ADRESL);
  6347  1D15  081C               	movf	28,w	;volatile
  6348  1D16  0024               	movlb	4	; select bank4
  6349  1D17  00AB               	movwf	(?_InternalADC_Read+1)^(0+512)
  6350  1D18  0021               	movlb	1	; select bank1
  6351  1D19  081B               	movf	27,w	;volatile
  6352  1D1A  0024               	movlb	4	; select bank4
  6353  1D1B  00AA               	movwf	?_InternalADC_Read^(0+512)
  6354  1D1C  0008               	return
  6355  1D1D                     __end_of_InternalADC_Read:	
  6356                           
  6357                           	psect	text8
  6358  187B                     __ptext8:	
  6359 ;; *************** function _DisableInternalADC *****************
  6360 ;; Defined at:
  6361 ;;		line 120 in file "ADC.c"
  6362 ;; Parameters:    Size  Location     Type
  6363 ;;		None
  6364 ;; Auto vars:     Size  Location     Type
  6365 ;;		None
  6366 ;; Return value:  Size  Location     Type
  6367 ;;		None               void
  6368 ;; Registers used:
  6369 ;;		wreg, status,2, status,0
  6370 ;; Tracked objects:
  6371 ;;		On entry : 0/0
  6372 ;;		On exit  : 0/0
  6373 ;;		Unchanged: 0/0
  6374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6377 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6378 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6379 ;;Total ram usage:        1 bytes
  6380 ;; Hardware stack levels used:    1
  6381 ;; Hardware stack levels required when called:    7
  6382 ;; This function calls:
  6383 ;;		Nothing
  6384 ;; This function is called by:
  6385 ;;		_ReadVoltage
  6386 ;; This function uses a non-reentrant model
  6387 ;;
  6388                           
  6389                           
  6390                           ;psect for function _DisableInternalADC
  6391  187B                     _DisableInternalADC:	
  6392                           
  6393                           ;ADC.c: 122: ADCON0 &= ~0b00000001;
  6394                           
  6395                           ;incstack = 0
  6396                           ; Regs used in _DisableInternalADC: [wreg+status,2+status,0]
  6397  187B  30FE               	movlw	254
  6398  187C  0024               	movlb	4	; select bank4
  6399  187D  00A0               	movwf	??_DisableInternalADC^(0+512)
  6400  187E  0820               	movf	??_DisableInternalADC^(0+512),w
  6401  187F  0021               	movlb	1	; select bank1
  6402  1880  059D               	andwf	29,f	;volatile
  6403  1881  0008               	return
  6404  1882                     __end_of_DisableInternalADC:	
  6405                           
  6406                           	psect	text9
  6407  1919                     __ptext9:	
  6408 ;; *************** function _PS_2_INIT *****************
  6409 ;; Defined at:
  6410 ;;		line 106 in file "PS_2.c"
  6411 ;; Parameters:    Size  Location     Type
  6412 ;;		None
  6413 ;; Auto vars:     Size  Location     Type
  6414 ;;		None
  6415 ;; Return value:  Size  Location     Type
  6416 ;;		None               void
  6417 ;; Registers used:
  6418 ;;		wreg, status,2, status,0, pclath, cstack
  6419 ;; Tracked objects:
  6420 ;;		On entry : 0/0
  6421 ;;		On exit  : 0/0
  6422 ;;		Unchanged: 0/0
  6423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6427 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6428 ;;Total ram usage:        0 bytes
  6429 ;; Hardware stack levels used:    1
  6430 ;; Hardware stack levels required when called:   10
  6431 ;; This function calls:
  6432 ;;		_Clock_TRIS
  6433 ;;		_Data_TRIS
  6434 ;;		_Init_PS_2_Send
  6435 ;;		_Timer2Init
  6436 ;; This function is called by:
  6437 ;;		_main
  6438 ;; This function uses a non-reentrant model
  6439 ;;
  6440                           
  6441                           
  6442                           ;psect for function _PS_2_INIT
  6443  1919                     _PS_2_INIT:	
  6444                           
  6445                           ;PS_2.c: 109: Clock_TRIS(1);
  6446                           
  6447                           ;incstack = 0
  6448                           ; Regs used in _PS_2_INIT: [wreg+status,2+status,0+pclath+cstack]
  6449  1919  3001               	movlw	1
  6450  191A  3198  20D0  3199   	fcall	_Clock_TRIS
  6451                           
  6452                           ;PS_2.c: 110: Data_TRIS(1);
  6453  191D  3001               	movlw	1
  6454  191E  3198  20DB  3199   	fcall	_Data_TRIS
  6455                           
  6456                           ;PS_2.c: 111: Timer2Init(50);
  6457  1921  3032               	movlw	50
  6458  1922  3190  2000  3199   	fcall	_Timer2Init
  6459                           
  6460                           ;PS_2.c: 112: Init_PS_2_Send();
  6461  1925  3186  2676         	fcall	_Init_PS_2_Send
  6462  1927  0008               	return
  6463  1928                     __end_of_PS_2_INIT:	
  6464                           
  6465                           	psect	text10
  6466  1000                     __ptext10:	
  6467 ;; *************** function _Timer2Init *****************
  6468 ;; Defined at:
  6469 ;;		line 41 in file "Timer.c"
  6470 ;; Parameters:    Size  Location     Type
  6471 ;;  time            1    wreg     unsigned char 
  6472 ;; Auto vars:     Size  Location     Type
  6473 ;;  time            1    2[BANK4 ] unsigned char 
  6474 ;;  prescaler       1    4[BANK4 ] unsigned char 
  6475 ;;  postscaler      1    3[BANK4 ] unsigned char 
  6476 ;; Return value:  Size  Location     Type
  6477 ;;		None               void
  6478 ;; Registers used:
  6479 ;;		wreg, status,2, status,0, pclath, cstack
  6480 ;; Tracked objects:
  6481 ;;		On entry : 0/0
  6482 ;;		On exit  : 0/0
  6483 ;;		Unchanged: 0/0
  6484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6486 ;;      Locals:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  6487 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  6488 ;;      Totals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  6489 ;;Total ram usage:        5 bytes
  6490 ;; Hardware stack levels used:    1
  6491 ;; Hardware stack levels required when called:    8
  6492 ;; This function calls:
  6493 ;;		_Timer2ON
  6494 ;; This function is called by:
  6495 ;;		_PS_2_INIT
  6496 ;; This function uses a non-reentrant model
  6497 ;;
  6498                           
  6499                           
  6500                           ;psect for function _Timer2Init
  6501  1000                     _Timer2Init:	
  6502                           
  6503                           ;incstack = 0
  6504                           ; Regs used in _Timer2Init: [wreg+status,2+status,0+pclath+cstack]
  6505                           ;Timer2Init@time stored from wreg
  6506  1000  0024               	movlb	4	; select bank4
  6507  1001  00A2               	movwf	Timer2Init@time^(0+512)
  6508                           
  6509                           ;Timer.c: 43: unsigned char postscaler =0xF;
  6510  1002  300F               	movlw	15
  6511  1003  00A0               	movwf	??_Timer2Init^(0+512)
  6512  1004  0820               	movf	??_Timer2Init^(0+512),w
  6513  1005  00A3               	movwf	Timer2Init@postscaler^(0+512)
  6514                           
  6515                           ;Timer.c: 44: unsigned char prescaler =3;
  6516  1006  3003               	movlw	3
  6517  1007  00A0               	movwf	??_Timer2Init^(0+512)
  6518  1008  0820               	movf	??_Timer2Init^(0+512),w
  6519  1009  00A4               	movwf	Timer2Init@prescaler^(0+512)
  6520                           
  6521                           ;Timer.c: 45: CCP2CONbits.CCP2M = 0b1010;
  6522  100A  0025               	movlb	5	; select bank5
  6523  100B  081A               	movf	26,w	;volatile
  6524  100C  39F0               	andlw	-16
  6525  100D  380A               	iorlw	10
  6526  100E  009A               	movwf	26	;volatile
  6527                           
  6528                           ;Timer.c: 46: PR2 = time;
  6529  100F  0024               	movlb	4	; select bank4
  6530  1010  0822               	movf	Timer2Init@time^(0+512),w
  6531  1011  0020               	movlb	0	; select bank0
  6532  1012  009B               	movwf	27	;volatile
  6533                           
  6534                           ;Timer.c: 47: T2CON |= postscaler << 3;
  6535  1013  0024               	movlb	4	; select bank4
  6536  1014  0823               	movf	Timer2Init@postscaler^(0+512),w
  6537  1015  00A0               	movwf	??_Timer2Init^(0+512)
  6538  1016  3002               	movlw	2
  6539  1017                     u8705:	
  6540  1017  35A0               	lslf	??_Timer2Init^(0+512),f
  6541  1018  3EFF               	addlw	-1
  6542  1019  1D03               	skipz
  6543  101A  2817               	goto	u8705
  6544  101B  3520               	lslf	??_Timer2Init^(0+512),w
  6545  101C  00A1               	movwf	(??_Timer2Init+1)^(0+512)
  6546  101D  0821               	movf	(??_Timer2Init+1)^(0+512),w
  6547  101E  0020               	movlb	0	; select bank0
  6548  101F  049C               	iorwf	28,f	;volatile
  6549                           
  6550                           ;Timer.c: 48: T2CON |= prescaler;
  6551  1020  0024               	movlb	4	; select bank4
  6552  1021  0824               	movf	Timer2Init@prescaler^(0+512),w
  6553  1022  00A0               	movwf	??_Timer2Init^(0+512)
  6554  1023  0820               	movf	??_Timer2Init^(0+512),w
  6555  1024  0020               	movlb	0	; select bank0
  6556  1025  049C               	iorwf	28,f	;volatile
  6557                           
  6558                           ;Timer.c: 50: Timer2ON();
  6559  1026  3198  2052         	fcall	_Timer2ON
  6560                           
  6561                           ;Timer.c: 51: PIE1bits.TMR2IE = 0;
  6562  1028  0021               	movlb	1	; select bank1
  6563  1029  1091               	bcf	17,1	;volatile
  6564  102A  0008               	return
  6565  102B                     __end_of_Timer2Init:	
  6566                           
  6567                           	psect	text11
  6568  1852                     __ptext11:	
  6569 ;; *************** function _Timer2ON *****************
  6570 ;; Defined at:
  6571 ;;		line 59 in file "Timer.c"
  6572 ;; Parameters:    Size  Location     Type
  6573 ;;		None
  6574 ;; Auto vars:     Size  Location     Type
  6575 ;;		None
  6576 ;; Return value:  Size  Location     Type
  6577 ;;		None               void
  6578 ;; Registers used:
  6579 ;;		None
  6580 ;; Tracked objects:
  6581 ;;		On entry : 0/0
  6582 ;;		On exit  : 0/0
  6583 ;;		Unchanged: 0/0
  6584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6588 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6589 ;;Total ram usage:        0 bytes
  6590 ;; Hardware stack levels used:    1
  6591 ;; Hardware stack levels required when called:    7
  6592 ;; This function calls:
  6593 ;;		Nothing
  6594 ;; This function is called by:
  6595 ;;		_Timer2Init
  6596 ;; This function uses a non-reentrant model
  6597 ;;
  6598                           
  6599                           
  6600                           ;psect for function _Timer2ON
  6601  1852                     _Timer2ON:	
  6602                           
  6603                           ;Timer.c: 61: T2CONbits.TMR2ON = 1;
  6604                           
  6605                           ;incstack = 0
  6606                           ; Regs used in _Timer2ON: []
  6607  1852  0020               	movlb	0	; select bank0
  6608  1853  151C               	bsf	28,2	;volatile
  6609  1854  0008               	return
  6610  1855                     __end_of_Timer2ON:	
  6611                           
  6612                           	psect	text12
  6613  0676                     __ptext12:	
  6614 ;; *************** function _Init_PS_2_Send *****************
  6615 ;; Defined at:
  6616 ;;		line 1021 in file "PS_2.c"
  6617 ;; Parameters:    Size  Location     Type
  6618 ;;		None
  6619 ;; Auto vars:     Size  Location     Type
  6620 ;;		None
  6621 ;; Return value:  Size  Location     Type
  6622 ;;                  1    wreg      unsigned char 
  6623 ;; Registers used:
  6624 ;;		wreg, status,2, status,0, pclath, cstack
  6625 ;; Tracked objects:
  6626 ;;		On entry : 0/0
  6627 ;;		On exit  : 0/0
  6628 ;;		Unchanged: 0/0
  6629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6634 ;;Total ram usage:        0 bytes
  6635 ;; Hardware stack levels used:    1
  6636 ;; Hardware stack levels required when called:    9
  6637 ;; This function calls:
  6638 ;;		_PS_2_DISABLE_INTERRUPT
  6639 ;;		_Send_PS2
  6640 ;;		_delayUS
  6641 ;; This function is called by:
  6642 ;;		_PS_2_INIT
  6643 ;; This function uses a non-reentrant model
  6644 ;;
  6645                           
  6646                           
  6647                           ;psect for function _Init_PS_2_Send
  6648  0676                     _Init_PS_2_Send:	
  6649                           
  6650                           ;PS_2.c: 1023: PS_2_DISABLE_INTERRUPT(0b00100000);
  6651                           
  6652                           ;incstack = 0
  6653                           ; Regs used in _Init_PS_2_Send: [wreg+status,2+status,0+pclath+cstack]
  6654  0676  3020               	movlw	32
  6655  0677  3199  2194  3186   	fcall	_PS_2_DISABLE_INTERRUPT
  6656                           
  6657                           ;PS_2.c: 1026: if(Send_PS2(0x07))
  6658  067A  3007               	movlw	7
  6659  067B  318E  266C  3186   	fcall	_Send_PS2
  6660  067E  3A00               	xorlw	0
  6661  067F  1D03               	btfss	3,2
  6662  0680  0008               	return
  6663                           
  6664                           ;PS_2.c: 1029: }
  6665                           ;PS_2.c: 1030: delayUS(5000);
  6666                           
  6667                           ;PS_2.c: 1027: {
  6668                           ;PS_2.c: 1028: return 0;
  6669                           ;	Return value of _Init_PS_2_Send is never used
  6670  0681  3000               	movlw	0
  6671  0682  0024               	movlb	4	; select bank4
  6672  0683  00A3               	movwf	(delayUS@US+3)^(0+512)
  6673  0684  3000               	movlw	0
  6674  0685  00A2               	movwf	(delayUS@US+2)^(0+512)
  6675  0686  3013               	movlw	19
  6676  0687  00A1               	movwf	(delayUS@US+1)^(0+512)
  6677  0688  3088               	movlw	136
  6678  0689  00A0               	movwf	delayUS@US^(0+512)
  6679  068A  319B  23E8  3186   	fcall	_delayUS
  6680                           
  6681                           ;PS_2.c: 1033: if(Send_PS2(0xED))
  6682  068D  30ED               	movlw	237
  6683  068E  318E  266C  3186   	fcall	_Send_PS2
  6684  0691  3A00               	xorlw	0
  6685  0692  1D03               	btfss	3,2
  6686  0693  0008               	return
  6687                           
  6688                           ;PS_2.c: 1036: }
  6689                           ;PS_2.c: 1037: delayUS(5000);
  6690                           
  6691                           ;PS_2.c: 1034: {
  6692                           ;PS_2.c: 1035: return 0;
  6693                           ;	Return value of _Init_PS_2_Send is never used
  6694  0694  3000               	movlw	0
  6695  0695  0024               	movlb	4	; select bank4
  6696  0696  00A3               	movwf	(delayUS@US+3)^(0+512)
  6697  0697  3000               	movlw	0
  6698  0698  00A2               	movwf	(delayUS@US+2)^(0+512)
  6699  0699  3013               	movlw	19
  6700  069A  00A1               	movwf	(delayUS@US+1)^(0+512)
  6701  069B  3088               	movlw	136
  6702  069C  00A0               	movwf	delayUS@US^(0+512)
  6703  069D  319B  23E8  3186   	fcall	_delayUS
  6704                           
  6705                           ;PS_2.c: 1038: if(Send_PS2(0x00))
  6706  06A0  3000               	movlw	0
  6707  06A1  318E  266C  3186   	fcall	_Send_PS2
  6708  06A4  3A00               	xorlw	0
  6709  06A5  1D03               	btfss	3,2
  6710  06A6  0008               	return
  6711                           
  6712                           ;PS_2.c: 1041: }
  6713                           ;PS_2.c: 1044: if(Send_PS2(0xf4))
  6714                           
  6715                           ;PS_2.c: 1039: {
  6716                           ;PS_2.c: 1040: return 0;
  6717                           ;	Return value of _Init_PS_2_Send is never used
  6718  06A7  30F4               	movlw	244
  6719  06A8  318E  266C  3186   	fcall	_Send_PS2
  6720  06AB  3A00               	xorlw	0
  6721  06AC  1D03               	btfss	3,2
  6722  06AD  0008               	return
  6723                           
  6724                           ;PS_2.c: 1047: }
  6725                           ;PS_2.c: 1050: if(Send_PS2(0xf4))
  6726                           
  6727                           ;PS_2.c: 1045: {
  6728                           ;PS_2.c: 1046: return 0;
  6729                           ;	Return value of _Init_PS_2_Send is never used
  6730  06AE  30F4               	movlw	244
  6731  06AF  318E  266C  3186   	fcall	_Send_PS2
  6732  06B2  3A00               	xorlw	0
  6733  06B3  1D03               	btfss	3,2
  6734  06B4  0008               	return
  6735                           
  6736                           ;PS_2.c: 1053: }
  6737                           ;PS_2.c: 1056: if(Send_PS2(0xf0))
  6738                           
  6739                           ;PS_2.c: 1051: {
  6740                           ;PS_2.c: 1052: return 0;
  6741                           ;	Return value of _Init_PS_2_Send is never used
  6742  06B5  30F0               	movlw	240
  6743  06B6  318E  266C  3186   	fcall	_Send_PS2
  6744  06B9  3A00               	xorlw	0
  6745  06BA  1D03               	btfss	3,2
  6746  06BB  0008               	return
  6747                           
  6748                           ;PS_2.c: 1059: }
  6749                           ;PS_2.c: 1060: delayUS(100);
  6750                           
  6751                           ;PS_2.c: 1057: {
  6752                           ;PS_2.c: 1058: return 0;
  6753                           ;	Return value of _Init_PS_2_Send is never used
  6754  06BC  3000               	movlw	0
  6755  06BD  0024               	movlb	4	; select bank4
  6756  06BE  00A3               	movwf	(delayUS@US+3)^(0+512)
  6757  06BF  3000               	movlw	0
  6758  06C0  00A2               	movwf	(delayUS@US+2)^(0+512)
  6759  06C1  3000               	movlw	0
  6760  06C2  00A1               	movwf	(delayUS@US+1)^(0+512)
  6761  06C3  3064               	movlw	100
  6762  06C4  00A0               	movwf	delayUS@US^(0+512)
  6763  06C5  319B  23E8  3186   	fcall	_delayUS
  6764                           
  6765                           ;PS_2.c: 1061: if(Send_PS2(0x02))
  6766  06C8  3002               	movlw	2
  6767  06C9  318E  266C  3186   	fcall	_Send_PS2
  6768  06CC  3A00               	xorlw	0
  6769  06CD  1D03               	btfss	3,2
  6770  06CE  0008               	return
  6771                           
  6772                           ;PS_2.c: 1064: }
  6773                           ;PS_2.c: 1067: if(Send_PS2(0xf3))
  6774                           
  6775                           ;PS_2.c: 1062: {
  6776                           ;PS_2.c: 1063: return 0;
  6777                           ;	Return value of _Init_PS_2_Send is never used
  6778  06CF  30F3               	movlw	243
  6779  06D0  318E  266C  3186   	fcall	_Send_PS2
  6780  06D3  3A00               	xorlw	0
  6781  06D4  1D03               	btfss	3,2
  6782  06D5  0008               	return
  6783                           
  6784                           ;PS_2.c: 1070: }
  6785                           ;PS_2.c: 1071: delayUS(100);
  6786                           
  6787                           ;PS_2.c: 1068: {
  6788                           ;PS_2.c: 1069: return 0;
  6789                           ;	Return value of _Init_PS_2_Send is never used
  6790  06D6  3000               	movlw	0
  6791  06D7  0024               	movlb	4	; select bank4
  6792  06D8  00A3               	movwf	(delayUS@US+3)^(0+512)
  6793  06D9  3000               	movlw	0
  6794  06DA  00A2               	movwf	(delayUS@US+2)^(0+512)
  6795  06DB  3000               	movlw	0
  6796  06DC  00A1               	movwf	(delayUS@US+1)^(0+512)
  6797  06DD  3064               	movlw	100
  6798  06DE  00A0               	movwf	delayUS@US^(0+512)
  6799  06DF  319B  23E8  3186   	fcall	_delayUS
  6800                           
  6801                           ;PS_2.c: 1072: if(Send_PS2(0x2F))
  6802  06E2  302F               	movlw	47
  6803  06E3  318E  266C         	fcall	_Send_PS2
  6804                           
  6805                           ;PS_2.c: 1073: {
  6806                           ;PS_2.c: 1074: return 0;
  6807                           ;	Return value of _Init_PS_2_Send is never used
  6808  06E5  0008               	return
  6809  06E6                     __end_of_Init_PS_2_Send:	
  6810                           ;PS_2.c: 1075: }
  6811                           ;PS_2.c: 1076: return 1;
  6812                           ;	Return value of _Init_PS_2_Send is never used
  6813                           
  6814                           
  6815                           	psect	text13
  6816  0E6C                     __ptext13:	
  6817 ;; *************** function _Send_PS2 *****************
  6818 ;; Defined at:
  6819 ;;		line 856 in file "PS_2.c"
  6820 ;; Parameters:    Size  Location     Type
  6821 ;;  command         1    wreg     unsigned char 
  6822 ;; Auto vars:     Size  Location     Type
  6823 ;;  command         1   15[BANK4 ] unsigned char 
  6824 ;;  timeout         2   17[BANK4 ] unsigned int 
  6825 ;;  i               1   16[BANK4 ] unsigned char 
  6826 ;;  oddparity       1   14[BANK4 ] unsigned char 
  6827 ;; Return value:  Size  Location     Type
  6828 ;;                  1    wreg      unsigned char 
  6829 ;; Registers used:
  6830 ;;		wreg, status,2, status,0, pclath, cstack
  6831 ;; Tracked objects:
  6832 ;;		On entry : 0/0
  6833 ;;		On exit  : 0/0
  6834 ;;		Unchanged: 0/0
  6835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6837 ;;      Locals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  6838 ;;      Temps:          0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  6839 ;;      Totals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0
  6840 ;;Total ram usage:        9 bytes
  6841 ;; Hardware stack levels used:    1
  6842 ;; Hardware stack levels required when called:    8
  6843 ;; This function calls:
  6844 ;;		_CheckSum_byte
  6845 ;;		_Clock_TRIS
  6846 ;;		_Data_TRIS
  6847 ;;		_READ_PS_2_PIN
  6848 ;;		_delayUS
  6849 ;; This function is called by:
  6850 ;;		_Init_PS_2_Send
  6851 ;;		_Keyboard_Connected
  6852 ;; This function uses a non-reentrant model
  6853 ;;
  6854                           
  6855                           
  6856                           ;psect for function _Send_PS2
  6857  0E6C                     _Send_PS2:	
  6858                           
  6859                           ;incstack = 0
  6860                           ; Regs used in _Send_PS2: [wreg+status,2+status,0+pclath+cstack]
  6861                           ;Send_PS2@command stored from wreg
  6862  0E6C  0024               	movlb	4	; select bank4
  6863  0E6D  00AF               	movwf	Send_PS2@command^(0+512)
  6864                           
  6865                           ;PS_2.c: 858: unsigned char i=0;
  6866  0E6E  01B0               	clrf	Send_PS2@i^(0+512)
  6867                           
  6868                           ;PS_2.c: 859: unsigned char oddparity = CheckSum_byte((unsigned int)command , 3);
  6869  0E6F  082F               	movf	Send_PS2@command^(0+512),w
  6870  0E70  00AA               	movwf	??_Send_PS2^(0+512)
  6871  0E71  01AB               	clrf	(??_Send_PS2^(0+512)+1)
  6872  0E72  082A               	movf	??_Send_PS2^(0+512),w
  6873  0E73  00A0               	movwf	CheckSum_byte@This^(0+512)
  6874  0E74  082B               	movf	(??_Send_PS2+1)^(0+512),w
  6875  0E75  00A1               	movwf	(CheckSum_byte@This+1)^(0+512)
  6876  0E76  3003               	movlw	3
  6877  0E77  00AC               	movwf	(??_Send_PS2+2)^(0+512)
  6878  0E78  082C               	movf	(??_Send_PS2+2)^(0+512),w
  6879  0E79  00A2               	movwf	CheckSum_byte@Odd_Even^(0+512)
  6880  0E7A  319A  22F5  318E   	fcall	_CheckSum_byte
  6881  0E7D  0024               	movlb	4	; select bank4
  6882  0E7E  00AD               	movwf	(??_Send_PS2+3)^(0+512)
  6883  0E7F  082D               	movf	(??_Send_PS2+3)^(0+512),w
  6884  0E80  00AE               	movwf	Send_PS2@oddparity^(0+512)
  6885                           
  6886                           ;PS_2.c: 860: unsigned int timeout =0;
  6887  0E81  01B1               	clrf	Send_PS2@timeout^(0+512)
  6888  0E82  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  6889                           
  6890                           ;PS_2.c: 862: Clock_TRIS(0);
  6891  0E83  3000               	movlw	0
  6892  0E84  3198  20D0  318E   	fcall	_Clock_TRIS
  6893                           
  6894                           ;PS_2.c: 863: Data_TRIS(0);
  6895  0E87  3000               	movlw	0
  6896  0E88  3198  20DB  318E   	fcall	_Data_TRIS
  6897                           
  6898                           ;PS_2.c: 864: LATA &= ~0b00100000;
  6899  0E8B  30DF               	movlw	223
  6900  0E8C  0024               	movlb	4	; select bank4
  6901  0E8D  00AA               	movwf	??_Send_PS2^(0+512)
  6902  0E8E  082A               	movf	??_Send_PS2^(0+512),w
  6903  0E8F  0022               	movlb	2	; select bank2
  6904  0E90  058C               	andwf	12,f	;volatile
  6905                           
  6906                           ;PS_2.c: 865: delayUS(300);
  6907  0E91  3000               	movlw	0
  6908  0E92  0024               	movlb	4	; select bank4
  6909  0E93  00A3               	movwf	(delayUS@US+3)^(0+512)
  6910  0E94  3000               	movlw	0
  6911  0E95  00A2               	movwf	(delayUS@US+2)^(0+512)
  6912  0E96  3001               	movlw	1
  6913  0E97  00A1               	movwf	(delayUS@US+1)^(0+512)
  6914  0E98  302C               	movlw	44
  6915  0E99  00A0               	movwf	delayUS@US^(0+512)
  6916  0E9A  319B  23E8  318E   	fcall	_delayUS
  6917                           
  6918                           ;PS_2.c: 866: LATA &= ~0b00010000;
  6919  0E9D  30EF               	movlw	239
  6920  0E9E  0024               	movlb	4	; select bank4
  6921  0E9F  00AA               	movwf	??_Send_PS2^(0+512)
  6922  0EA0  082A               	movf	??_Send_PS2^(0+512),w
  6923  0EA1  0022               	movlb	2	; select bank2
  6924  0EA2  058C               	andwf	12,f	;volatile
  6925                           
  6926                           ;PS_2.c: 867: delayUS(20);
  6927  0EA3  3000               	movlw	0
  6928  0EA4  0024               	movlb	4	; select bank4
  6929  0EA5  00A3               	movwf	(delayUS@US+3)^(0+512)
  6930  0EA6  3000               	movlw	0
  6931  0EA7  00A2               	movwf	(delayUS@US+2)^(0+512)
  6932  0EA8  3000               	movlw	0
  6933  0EA9  00A1               	movwf	(delayUS@US+1)^(0+512)
  6934  0EAA  3014               	movlw	20
  6935  0EAB  00A0               	movwf	delayUS@US^(0+512)
  6936  0EAC  319B  23E8  318E   	fcall	_delayUS
  6937                           
  6938                           ;PS_2.c: 868: Clock_TRIS(1);
  6939  0EAF  3001               	movlw	1
  6940  0EB0  3198  20D0  318E   	fcall	_Clock_TRIS
  6941                           
  6942                           ;PS_2.c: 869: timeout=0;
  6943  0EB3  0024               	movlb	4	; select bank4
  6944  0EB4  01B1               	clrf	Send_PS2@timeout^(0+512)
  6945  0EB5  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  6946  0EB6                     l6404:	
  6947                           ;PS_2.c: 870: while(READ_PS_2_PIN(0b00100000))
  6948                           
  6949  0EB6  3020               	movlw	32
  6950  0EB7  3199  21A7  318E   	fcall	_READ_PS_2_PIN
  6951  0EBA  3A00               	xorlw	0
  6952  0EBB  1903               	btfsc	3,2
  6953  0EBC  2ED3               	goto	l6406
  6954                           
  6955                           ;PS_2.c: 871: {
  6956                           ;PS_2.c: 872: __nop();
  6957  0EBD  0000               	nop
  6958                           
  6959                           ;PS_2.c: 873: timeout++;
  6960  0EBE  3001               	movlw	1
  6961  0EBF  0024               	movlb	4	; select bank4
  6962  0EC0  07B1               	addwf	Send_PS2@timeout^(0+512),f
  6963  0EC1  3000               	movlw	0
  6964  0EC2  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  6965                           
  6966                           ;PS_2.c: 874: if(timeout > 15000)
  6967  0EC3  303A               	movlw	58
  6968  0EC4  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  6969  0EC5  3099               	movlw	153
  6970  0EC6  1903               	skipnz
  6971  0EC7  0231               	subwf	Send_PS2@timeout^(0+512),w
  6972  0EC8  1C03               	skipc
  6973  0EC9  2EB6               	goto	l6404
  6974                           
  6975                           ;PS_2.c: 875: {
  6976                           ;PS_2.c: 876: Clock_TRIS(1);
  6977  0ECA  3001               	movlw	1
  6978  0ECB  3198  20D0  318E   	fcall	_Clock_TRIS
  6979                           
  6980                           ;PS_2.c: 877: Data_TRIS(1);
  6981  0ECE  3001               	movlw	1
  6982  0ECF  3198  20DB         	fcall	_Data_TRIS
  6983                           
  6984                           ;PS_2.c: 878: return 1;
  6985  0ED1  3001               	movlw	1
  6986  0ED2  0008               	return
  6987  0ED3                     l6406:	
  6988                           
  6989                           ;PS_2.c: 879: }
  6990                           ;PS_2.c: 880: }
  6991                           ;PS_2.c: 881: for(i=0;i<8;i++)
  6992  0ED3  0024               	movlb	4	; select bank4
  6993  0ED4  01B0               	clrf	Send_PS2@i^(0+512)
  6994  0ED5  3008               	movlw	8
  6995  0ED6  0230               	subwf	Send_PS2@i^(0+512),w
  6996  0ED7  1803               	btfsc	3,0
  6997  0ED8  2F2E               	goto	l867
  6998  0ED9                     l866:	
  6999                           
  7000                           ;PS_2.c: 882: {
  7001                           ;PS_2.c: 883: if(command & 0x1)
  7002  0ED9  1C2F               	btfss	Send_PS2@command^(0+512),0
  7003  0EDA  2EDE               	goto	l6414
  7004                           
  7005                           ;PS_2.c: 884: {
  7006                           ;PS_2.c: 885: LATA |= 0b00010000;
  7007  0EDB  0022               	movlb	2	; select bank2
  7008  0EDC  160C               	bsf	12,4	;volatile
  7009                           
  7010                           ;PS_2.c: 886: }
  7011  0EDD  2EE4               	goto	l6416
  7012  0EDE                     l6414:	
  7013                           
  7014                           ;PS_2.c: 887: else
  7015                           ;PS_2.c: 888: {
  7016                           ;PS_2.c: 889: LATA &= ~0b00010000;
  7017  0EDE  30EF               	movlw	239
  7018  0EDF  0024               	movlb	4	; select bank4
  7019  0EE0  00AA               	movwf	??_Send_PS2^(0+512)
  7020  0EE1  082A               	movf	??_Send_PS2^(0+512),w
  7021  0EE2  0022               	movlb	2	; select bank2
  7022  0EE3  058C               	andwf	12,f	;volatile
  7023  0EE4                     l6416:	
  7024                           
  7025                           ;PS_2.c: 890: }
  7026                           ;PS_2.c: 891: command >> = 1;
  7027  0EE4  1003               	clrc
  7028  0EE5  0024               	movlb	4	; select bank4
  7029  0EE6  0CAF               	rrf	Send_PS2@command^(0+512),f
  7030                           
  7031                           ;PS_2.c: 892: timeout=0;
  7032  0EE7  01B1               	clrf	Send_PS2@timeout^(0+512)
  7033  0EE8  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7034  0EE9                     l6428:	
  7035                           ;PS_2.c: 893: while(!READ_PS_2_PIN(0b00100000))
  7036                           
  7037  0EE9  3020               	movlw	32
  7038  0EEA  3199  21A7  318E   	fcall	_READ_PS_2_PIN
  7039  0EED  3A00               	xorlw	0
  7040  0EEE  1D03               	btfss	3,2
  7041  0EEF  2F05               	goto	l6430
  7042                           
  7043                           ;PS_2.c: 894: {
  7044                           ;PS_2.c: 895: timeout++;
  7045  0EF0  3001               	movlw	1
  7046  0EF1  0024               	movlb	4	; select bank4
  7047  0EF2  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7048  0EF3  3000               	movlw	0
  7049  0EF4  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7050                           
  7051                           ;PS_2.c: 896: if(timeout > 15000)
  7052  0EF5  303A               	movlw	58
  7053  0EF6  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7054  0EF7  3099               	movlw	153
  7055  0EF8  1903               	skipnz
  7056  0EF9  0231               	subwf	Send_PS2@timeout^(0+512),w
  7057  0EFA  1C03               	skipc
  7058  0EFB  2EE9               	goto	l6428
  7059                           
  7060                           ;PS_2.c: 897: {
  7061                           ;PS_2.c: 898: Clock_TRIS(1);
  7062  0EFC  3001               	movlw	1
  7063  0EFD  3198  20D0  318E   	fcall	_Clock_TRIS
  7064                           
  7065                           ;PS_2.c: 899: Data_TRIS(1);
  7066  0F00  3001               	movlw	1
  7067  0F01  3198  20DB         	fcall	_Data_TRIS
  7068                           
  7069                           ;PS_2.c: 900: return 1;
  7070  0F03  3001               	movlw	1
  7071  0F04  0008               	return
  7072  0F05                     l6430:	
  7073                           
  7074                           ;PS_2.c: 901: }
  7075                           ;PS_2.c: 902: }
  7076                           ;PS_2.c: 903: timeout=0;
  7077  0F05  0024               	movlb	4	; select bank4
  7078  0F06  01B1               	clrf	Send_PS2@timeout^(0+512)
  7079  0F07  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7080  0F08                     l6440:	
  7081                           ;PS_2.c: 904: while(READ_PS_2_PIN(0b00100000))
  7082                           
  7083  0F08  3020               	movlw	32
  7084  0F09  3199  21A7  318E   	fcall	_READ_PS_2_PIN
  7085  0F0C  3A00               	xorlw	0
  7086  0F0D  1903               	btfsc	3,2
  7087  0F0E  2F25               	goto	l6442
  7088                           
  7089                           ;PS_2.c: 905: {
  7090                           ;PS_2.c: 906: __nop();
  7091  0F0F  0000               	nop
  7092                           
  7093                           ;PS_2.c: 907: timeout++;
  7094  0F10  3001               	movlw	1
  7095  0F11  0024               	movlb	4	; select bank4
  7096  0F12  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7097  0F13  3000               	movlw	0
  7098  0F14  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7099                           
  7100                           ;PS_2.c: 908: if(timeout > 15000)
  7101  0F15  303A               	movlw	58
  7102  0F16  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7103  0F17  3099               	movlw	153
  7104  0F18  1903               	skipnz
  7105  0F19  0231               	subwf	Send_PS2@timeout^(0+512),w
  7106  0F1A  1C03               	skipc
  7107  0F1B  2F08               	goto	l6440
  7108                           
  7109                           ;PS_2.c: 909: {
  7110                           ;PS_2.c: 910: Clock_TRIS(1);
  7111  0F1C  3001               	movlw	1
  7112  0F1D  3198  20D0  318E   	fcall	_Clock_TRIS
  7113                           
  7114                           ;PS_2.c: 911: Data_TRIS(1);
  7115  0F20  3001               	movlw	1
  7116  0F21  3198  20DB         	fcall	_Data_TRIS
  7117                           
  7118                           ;PS_2.c: 912: return 1;
  7119  0F23  3001               	movlw	1
  7120  0F24  0008               	return
  7121  0F25                     l6442:	
  7122  0F25  3001               	movlw	1
  7123  0F26  0024               	movlb	4	; select bank4
  7124  0F27  00AA               	movwf	??_Send_PS2^(0+512)
  7125  0F28  082A               	movf	??_Send_PS2^(0+512),w
  7126  0F29  07B0               	addwf	Send_PS2@i^(0+512),f
  7127  0F2A  3008               	movlw	8
  7128  0F2B  0230               	subwf	Send_PS2@i^(0+512),w
  7129  0F2C  1C03               	skipc
  7130  0F2D  2ED9               	goto	l866
  7131  0F2E                     l867:	
  7132                           
  7133                           ;PS_2.c: 913: }
  7134                           ;PS_2.c: 914: }
  7135                           ;PS_2.c: 915: }
  7136                           ;PS_2.c: 917: if(oddparity & 0x1)
  7137  0F2E  1C2E               	btfss	Send_PS2@oddparity^(0+512),0
  7138  0F2F  2F33               	goto	l6448
  7139                           
  7140                           ;PS_2.c: 918: {
  7141                           ;PS_2.c: 919: LATA |= 0b00010000;
  7142  0F30  0022               	movlb	2	; select bank2
  7143  0F31  160C               	bsf	12,4	;volatile
  7144                           
  7145                           ;PS_2.c: 920: }
  7146  0F32  2F39               	goto	l6450
  7147  0F33                     l6448:	
  7148                           
  7149                           ;PS_2.c: 921: else
  7150                           ;PS_2.c: 922: {
  7151                           ;PS_2.c: 923: LATA &= ~0b00010000;
  7152  0F33  30EF               	movlw	239
  7153  0F34  0024               	movlb	4	; select bank4
  7154  0F35  00AA               	movwf	??_Send_PS2^(0+512)
  7155  0F36  082A               	movf	??_Send_PS2^(0+512),w
  7156  0F37  0022               	movlb	2	; select bank2
  7157  0F38  058C               	andwf	12,f	;volatile
  7158  0F39                     l6450:	
  7159                           
  7160                           ;PS_2.c: 924: }
  7161                           ;PS_2.c: 925: timeout=0;
  7162  0F39  0024               	movlb	4	; select bank4
  7163  0F3A  01B1               	clrf	Send_PS2@timeout^(0+512)
  7164  0F3B  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7165  0F3C                     l6460:	
  7166                           ;PS_2.c: 926: while(!READ_PS_2_PIN(0b00100000))
  7167                           
  7168  0F3C  3020               	movlw	32
  7169  0F3D  3199  21A7  318E   	fcall	_READ_PS_2_PIN
  7170  0F40  3A00               	xorlw	0
  7171  0F41  1D03               	btfss	3,2
  7172  0F42  2F58               	goto	l6462
  7173                           
  7174                           ;PS_2.c: 927: {
  7175                           ;PS_2.c: 928: timeout++;
  7176  0F43  3001               	movlw	1
  7177  0F44  0024               	movlb	4	; select bank4
  7178  0F45  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7179  0F46  3000               	movlw	0
  7180  0F47  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7181                           
  7182                           ;PS_2.c: 929: if(timeout > 15000)
  7183  0F48  303A               	movlw	58
  7184  0F49  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7185  0F4A  3099               	movlw	153
  7186  0F4B  1903               	skipnz
  7187  0F4C  0231               	subwf	Send_PS2@timeout^(0+512),w
  7188  0F4D  1C03               	skipc
  7189  0F4E  2F3C               	goto	l6460
  7190                           
  7191                           ;PS_2.c: 930: {
  7192                           ;PS_2.c: 931: Clock_TRIS(1);
  7193  0F4F  3001               	movlw	1
  7194  0F50  3198  20D0  318E   	fcall	_Clock_TRIS
  7195                           
  7196                           ;PS_2.c: 932: Data_TRIS(1);
  7197  0F53  3001               	movlw	1
  7198  0F54  3198  20DB         	fcall	_Data_TRIS
  7199                           
  7200                           ;PS_2.c: 933: return 1;
  7201  0F56  3001               	movlw	1
  7202  0F57  0008               	return
  7203  0F58                     l6462:	
  7204                           
  7205                           ;PS_2.c: 934: }
  7206                           ;PS_2.c: 935: }
  7207                           ;PS_2.c: 936: timeout=0;
  7208  0F58  0024               	movlb	4	; select bank4
  7209  0F59  01B1               	clrf	Send_PS2@timeout^(0+512)
  7210  0F5A  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7211  0F5B                     l6472:	
  7212                           ;PS_2.c: 937: while(READ_PS_2_PIN(0b00100000))
  7213                           
  7214  0F5B  3020               	movlw	32
  7215  0F5C  3199  21A7  318E   	fcall	_READ_PS_2_PIN
  7216  0F5F  3A00               	xorlw	0
  7217  0F60  1903               	btfsc	3,2
  7218  0F61  2F77               	goto	l6474
  7219                           
  7220                           ;PS_2.c: 938: {
  7221                           ;PS_2.c: 939: timeout++;
  7222  0F62  3001               	movlw	1
  7223  0F63  0024               	movlb	4	; select bank4
  7224  0F64  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7225  0F65  3000               	movlw	0
  7226  0F66  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7227                           
  7228                           ;PS_2.c: 940: if(timeout > 15000)
  7229  0F67  303A               	movlw	58
  7230  0F68  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7231  0F69  3099               	movlw	153
  7232  0F6A  1903               	skipnz
  7233  0F6B  0231               	subwf	Send_PS2@timeout^(0+512),w
  7234  0F6C  1C03               	skipc
  7235  0F6D  2F5B               	goto	l6472
  7236                           
  7237                           ;PS_2.c: 941: {
  7238                           ;PS_2.c: 942: Clock_TRIS(1);
  7239  0F6E  3001               	movlw	1
  7240  0F6F  3198  20D0  318E   	fcall	_Clock_TRIS
  7241                           
  7242                           ;PS_2.c: 943: Data_TRIS(1);
  7243  0F72  3001               	movlw	1
  7244  0F73  3198  20DB         	fcall	_Data_TRIS
  7245                           
  7246                           ;PS_2.c: 944: return 1;
  7247  0F75  3001               	movlw	1
  7248  0F76  0008               	return
  7249  0F77                     l6474:	
  7250                           
  7251                           ;PS_2.c: 945: }
  7252                           ;PS_2.c: 946: }
  7253                           ;PS_2.c: 948: Data_TRIS(1);
  7254  0F77  3001               	movlw	1
  7255  0F78  3198  20DB  318E   	fcall	_Data_TRIS
  7256                           
  7257                           ;PS_2.c: 950: timeout=0;
  7258  0F7B  0024               	movlb	4	; select bank4
  7259  0F7C  01B1               	clrf	Send_PS2@timeout^(0+512)
  7260  0F7D  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7261  0F7E                     l6486:	
  7262                           ;PS_2.c: 951: while(READ_PS_2_PIN(0b00010000))
  7263                           
  7264  0F7E  3010               	movlw	16
  7265  0F7F  3199  21A7  318E   	fcall	_READ_PS_2_PIN
  7266  0F82  3A00               	xorlw	0
  7267  0F83  1903               	btfsc	3,2
  7268  0F84  2F9A               	goto	l6488
  7269                           
  7270                           ;PS_2.c: 952: {
  7271                           ;PS_2.c: 953: timeout++;
  7272  0F85  3001               	movlw	1
  7273  0F86  0024               	movlb	4	; select bank4
  7274  0F87  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7275  0F88  3000               	movlw	0
  7276  0F89  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7277                           
  7278                           ;PS_2.c: 954: if(timeout > 15000)
  7279  0F8A  303A               	movlw	58
  7280  0F8B  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7281  0F8C  3099               	movlw	153
  7282  0F8D  1903               	skipnz
  7283  0F8E  0231               	subwf	Send_PS2@timeout^(0+512),w
  7284  0F8F  1C03               	skipc
  7285  0F90  2F7E               	goto	l6486
  7286                           
  7287                           ;PS_2.c: 955: {
  7288                           ;PS_2.c: 956: Clock_TRIS(1);
  7289  0F91  3001               	movlw	1
  7290  0F92  3198  20D0  318E   	fcall	_Clock_TRIS
  7291                           
  7292                           ;PS_2.c: 957: Data_TRIS(1);
  7293  0F95  3001               	movlw	1
  7294  0F96  3198  20DB         	fcall	_Data_TRIS
  7295                           
  7296                           ;PS_2.c: 958: return 1;
  7297  0F98  3001               	movlw	1
  7298  0F99  0008               	return
  7299  0F9A                     l6488:	
  7300                           
  7301                           ;PS_2.c: 959: }
  7302                           ;PS_2.c: 960: }
  7303                           ;PS_2.c: 961: timeout=0;
  7304  0F9A  0024               	movlb	4	; select bank4
  7305  0F9B  01B1               	clrf	Send_PS2@timeout^(0+512)
  7306  0F9C  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7307  0F9D                     l6498:	
  7308                           ;PS_2.c: 962: while(READ_PS_2_PIN(0b00100000))
  7309                           
  7310  0F9D  3020               	movlw	32
  7311  0F9E  3199  21A7  318E   	fcall	_READ_PS_2_PIN
  7312  0FA1  3A00               	xorlw	0
  7313  0FA2  1903               	btfsc	3,2
  7314  0FA3  2FB9               	goto	l6500
  7315                           
  7316                           ;PS_2.c: 963: {
  7317                           ;PS_2.c: 964: timeout++;
  7318  0FA4  3001               	movlw	1
  7319  0FA5  0024               	movlb	4	; select bank4
  7320  0FA6  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7321  0FA7  3000               	movlw	0
  7322  0FA8  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7323                           
  7324                           ;PS_2.c: 965: if(timeout > 15000)
  7325  0FA9  303A               	movlw	58
  7326  0FAA  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7327  0FAB  3099               	movlw	153
  7328  0FAC  1903               	skipnz
  7329  0FAD  0231               	subwf	Send_PS2@timeout^(0+512),w
  7330  0FAE  1C03               	skipc
  7331  0FAF  2F9D               	goto	l6498
  7332                           
  7333                           ;PS_2.c: 966: {
  7334                           ;PS_2.c: 967: Clock_TRIS(1);
  7335  0FB0  3001               	movlw	1
  7336  0FB1  3198  20D0  318E   	fcall	_Clock_TRIS
  7337                           
  7338                           ;PS_2.c: 968: Data_TRIS(1);
  7339  0FB4  3001               	movlw	1
  7340  0FB5  3198  20DB         	fcall	_Data_TRIS
  7341                           
  7342                           ;PS_2.c: 969: return 1;
  7343  0FB7  3001               	movlw	1
  7344  0FB8  0008               	return
  7345  0FB9                     l6500:	
  7346                           
  7347                           ;PS_2.c: 970: }
  7348                           ;PS_2.c: 971: }
  7349                           ;PS_2.c: 972: timeout=0;
  7350  0FB9  0024               	movlb	4	; select bank4
  7351  0FBA  01B1               	clrf	Send_PS2@timeout^(0+512)
  7352  0FBB  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7353  0FBC                     l6510:	
  7354                           ;PS_2.c: 973: while(!READ_PS_2_PIN(0b00010000))
  7355                           
  7356  0FBC  3010               	movlw	16
  7357  0FBD  3199  21A7  318E   	fcall	_READ_PS_2_PIN
  7358  0FC0  3A00               	xorlw	0
  7359  0FC1  1D03               	btfss	3,2
  7360  0FC2  2FD8               	goto	l6512
  7361                           
  7362                           ;PS_2.c: 974: {
  7363                           ;PS_2.c: 975: timeout++;
  7364  0FC3  3001               	movlw	1
  7365  0FC4  0024               	movlb	4	; select bank4
  7366  0FC5  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7367  0FC6  3000               	movlw	0
  7368  0FC7  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7369                           
  7370                           ;PS_2.c: 976: if(timeout > 15000)
  7371  0FC8  303A               	movlw	58
  7372  0FC9  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7373  0FCA  3099               	movlw	153
  7374  0FCB  1903               	skipnz
  7375  0FCC  0231               	subwf	Send_PS2@timeout^(0+512),w
  7376  0FCD  1C03               	skipc
  7377  0FCE  2FBC               	goto	l6510
  7378                           
  7379                           ;PS_2.c: 977: {
  7380                           ;PS_2.c: 978: Clock_TRIS(1);
  7381  0FCF  3001               	movlw	1
  7382  0FD0  3198  20D0  318E   	fcall	_Clock_TRIS
  7383                           
  7384                           ;PS_2.c: 979: Data_TRIS(1);
  7385  0FD3  3001               	movlw	1
  7386  0FD4  3198  20DB         	fcall	_Data_TRIS
  7387                           
  7388                           ;PS_2.c: 980: return 1;
  7389  0FD6  3001               	movlw	1
  7390  0FD7  0008               	return
  7391  0FD8                     l6512:	
  7392                           
  7393                           ;PS_2.c: 981: }
  7394                           ;PS_2.c: 982: }
  7395                           ;PS_2.c: 983: timeout=0;
  7396  0FD8  0024               	movlb	4	; select bank4
  7397  0FD9  01B1               	clrf	Send_PS2@timeout^(0+512)
  7398  0FDA  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7399  0FDB                     l6522:	
  7400                           ;PS_2.c: 984: while(!READ_PS_2_PIN(0b00100000))
  7401                           
  7402  0FDB  3020               	movlw	32
  7403  0FDC  3199  21A7  318E   	fcall	_READ_PS_2_PIN
  7404  0FDF  3A00               	xorlw	0
  7405  0FE0  1D03               	btfss	3,2
  7406  0FE1  2FF7               	goto	l6524
  7407                           
  7408                           ;PS_2.c: 985: {
  7409                           ;PS_2.c: 986: timeout++;
  7410  0FE2  3001               	movlw	1
  7411  0FE3  0024               	movlb	4	; select bank4
  7412  0FE4  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7413  0FE5  3000               	movlw	0
  7414  0FE6  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7415                           
  7416                           ;PS_2.c: 987: if(timeout > 15000)
  7417  0FE7  303A               	movlw	58
  7418  0FE8  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7419  0FE9  3099               	movlw	153
  7420  0FEA  1903               	skipnz
  7421  0FEB  0231               	subwf	Send_PS2@timeout^(0+512),w
  7422  0FEC  1C03               	skipc
  7423  0FED  2FDB               	goto	l6522
  7424                           
  7425                           ;PS_2.c: 988: {
  7426                           ;PS_2.c: 989: Clock_TRIS(1);
  7427  0FEE  3001               	movlw	1
  7428  0FEF  3198  20D0  318E   	fcall	_Clock_TRIS
  7429                           
  7430                           ;PS_2.c: 990: Data_TRIS(1);
  7431  0FF2  3001               	movlw	1
  7432  0FF3  3198  20DB         	fcall	_Data_TRIS
  7433                           
  7434                           ;PS_2.c: 991: return 1;
  7435  0FF5  3001               	movlw	1
  7436  0FF6  0008               	return
  7437  0FF7                     l6524:	
  7438                           
  7439                           ;PS_2.c: 992: }
  7440                           ;PS_2.c: 993: }
  7441                           ;PS_2.c: 996: Clock_TRIS(1);
  7442  0FF7  3001               	movlw	1
  7443  0FF8  3198  20D0  318E   	fcall	_Clock_TRIS
  7444                           
  7445                           ;PS_2.c: 997: Data_TRIS(1);
  7446  0FFB  3001               	movlw	1
  7447  0FFC  3198  20DB         	fcall	_Data_TRIS
  7448                           
  7449                           ;PS_2.c: 998: return 0;
  7450  0FFE  3000               	movlw	0
  7451  0FFF  0008               	return
  7452  1000                     __end_of_Send_PS2:	
  7453                           
  7454                           	psect	text14
  7455  19A7                     __ptext14:	
  7456 ;; *************** function _READ_PS_2_PIN *****************
  7457 ;; Defined at:
  7458 ;;		line 222 in file "PS_2.c"
  7459 ;; Parameters:    Size  Location     Type
  7460 ;;  DATA_CLK        1    wreg     unsigned char 
  7461 ;; Auto vars:     Size  Location     Type
  7462 ;;  DATA_CLK        1    0[BANK4 ] unsigned char 
  7463 ;; Return value:  Size  Location     Type
  7464 ;;                  1    wreg      unsigned char 
  7465 ;; Registers used:
  7466 ;;		wreg, status,2, status,0
  7467 ;; Tracked objects:
  7468 ;;		On entry : 0/0
  7469 ;;		On exit  : 0/0
  7470 ;;		Unchanged: 0/0
  7471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7473 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7475 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7476 ;;Total ram usage:        1 bytes
  7477 ;; Hardware stack levels used:    1
  7478 ;; Hardware stack levels required when called:    7
  7479 ;; This function calls:
  7480 ;;		Nothing
  7481 ;; This function is called by:
  7482 ;;		_Send_PS2
  7483 ;; This function uses a non-reentrant model
  7484 ;;
  7485                           
  7486                           
  7487                           ;psect for function _READ_PS_2_PIN
  7488  19A7                     _READ_PS_2_PIN:	
  7489                           
  7490                           ;incstack = 0
  7491                           ; Regs used in _READ_PS_2_PIN: [wreg+status,2+status,0]
  7492                           ;READ_PS_2_PIN@DATA_CLK stored from wreg
  7493  19A7  0024               	movlb	4	; select bank4
  7494  19A8  00A0               	movwf	READ_PS_2_PIN@DATA_CLK^(0+512)
  7495                           
  7496                           ;PS_2.c: 224: if(DATA_CLK == 0b00100000)
  7497  19A9  3020               	movlw	32
  7498  19AA  0620               	xorwf	READ_PS_2_PIN@DATA_CLK^(0+512),w
  7499  19AB  1D03               	btfss	3,2
  7500  19AC  29B4               	goto	l653
  7501                           
  7502                           ;PS_2.c: 225: {
  7503                           ;PS_2.c: 227: if((PORTA & 0b00100000) == 0b00100000)
  7504  19AD  0020               	movlb	0	; select bank0
  7505  19AE  1E8C               	btfss	12,5	;volatile
  7506  19AF  29B2               	goto	l6212
  7507                           
  7508                           ;PS_2.c: 228: {
  7509                           ;PS_2.c: 229: return (1);
  7510  19B0  3001               	movlw	1
  7511                           
  7512                           ;PS_2.c: 230: }
  7513  19B1  0008               	return
  7514  19B2                     l6212:	
  7515                           
  7516                           ;PS_2.c: 231: else
  7517                           ;PS_2.c: 232: {
  7518                           ;PS_2.c: 233: return 0;
  7519  19B2  3000               	movlw	0
  7520                           
  7521                           ;PS_2.c: 234: }
  7522                           ;PS_2.c: 235: }
  7523  19B3  0008               	return
  7524  19B4                     l653:	
  7525                           
  7526                           ;PS_2.c: 236: else
  7527                           ;PS_2.c: 237: {
  7528                           ;PS_2.c: 239: if((PORTA & 0b00010000) == 0b00010000)
  7529  19B4  0020               	movlb	0	; select bank0
  7530  19B5  1E0C               	btfss	12,4	;volatile
  7531  19B6  29B9               	goto	l6222
  7532                           
  7533                           ;PS_2.c: 240: {
  7534                           ;PS_2.c: 241: return (1);
  7535  19B7  3001               	movlw	1
  7536                           
  7537                           ;PS_2.c: 242: }
  7538  19B8  0008               	return
  7539  19B9                     l6222:	
  7540                           
  7541                           ;PS_2.c: 243: else
  7542                           ;PS_2.c: 244: {
  7543                           ;PS_2.c: 245: return 0;
  7544  19B9  3000               	movlw	0
  7545  19BA  0008               	return
  7546  19BB                     __end_of_READ_PS_2_PIN:	
  7547                           
  7548                           	psect	text15
  7549  18DB                     __ptext15:	
  7550 ;; *************** function _Data_TRIS *****************
  7551 ;; Defined at:
  7552 ;;		line 137 in file "PS_2.c"
  7553 ;; Parameters:    Size  Location     Type
  7554 ;;  direction       1    wreg     unsigned char 
  7555 ;; Auto vars:     Size  Location     Type
  7556 ;;  direction       1    0[BANK4 ] unsigned char 
  7557 ;; Return value:  Size  Location     Type
  7558 ;;		None               void
  7559 ;; Registers used:
  7560 ;;		wreg, status,2, status,0
  7561 ;; Tracked objects:
  7562 ;;		On entry : 0/0
  7563 ;;		On exit  : 0/0
  7564 ;;		Unchanged: 0/0
  7565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7567 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7569 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7570 ;;Total ram usage:        1 bytes
  7571 ;; Hardware stack levels used:    1
  7572 ;; Hardware stack levels required when called:    7
  7573 ;; This function calls:
  7574 ;;		Nothing
  7575 ;; This function is called by:
  7576 ;;		_PS_2_INIT
  7577 ;;		_Send_PS2
  7578 ;; This function uses a non-reentrant model
  7579 ;;
  7580                           
  7581                           
  7582                           ;psect for function _Data_TRIS
  7583  18DB                     _Data_TRIS:	
  7584                           
  7585                           ;incstack = 0
  7586                           ; Regs used in _Data_TRIS: [wreg+status,2+status,0]
  7587                           ;Data_TRIS@direction stored from wreg
  7588  18DB  0024               	movlb	4	; select bank4
  7589  18DC  00A0               	movwf	Data_TRIS@direction^(0+512)
  7590                           
  7591                           ;PS_2.c: 139: if(direction == 0)
  7592  18DD  0820               	movf	Data_TRIS@direction^(0+512),w
  7593  18DE  1D03               	btfss	3,2
  7594  18DF  28E3               	goto	l633
  7595                           
  7596                           ;PS_2.c: 140: {
  7597                           ;PS_2.c: 141: TRISAbits.TRISA4 = 0;
  7598  18E0  0021               	movlb	1	; select bank1
  7599  18E1  120C               	bcf	12,4	;volatile
  7600                           
  7601                           ;PS_2.c: 142: }
  7602  18E2  0008               	return
  7603  18E3                     l633:	
  7604                           
  7605                           ;PS_2.c: 143: else
  7606                           ;PS_2.c: 144: {
  7607                           ;PS_2.c: 145: TRISAbits.TRISA4 = 1;
  7608  18E3  0021               	movlb	1	; select bank1
  7609  18E4  160C               	bsf	12,4	;volatile
  7610  18E5  0008               	return
  7611  18E6                     __end_of_Data_TRIS:	
  7612                           
  7613                           	psect	text16
  7614  18D0                     __ptext16:	
  7615 ;; *************** function _Clock_TRIS *****************
  7616 ;; Defined at:
  7617 ;;		line 120 in file "PS_2.c"
  7618 ;; Parameters:    Size  Location     Type
  7619 ;;  direction       1    wreg     unsigned char 
  7620 ;; Auto vars:     Size  Location     Type
  7621 ;;  direction       1    0[BANK4 ] unsigned char 
  7622 ;; Return value:  Size  Location     Type
  7623 ;;		None               void
  7624 ;; Registers used:
  7625 ;;		wreg, status,2, status,0
  7626 ;; Tracked objects:
  7627 ;;		On entry : 0/0
  7628 ;;		On exit  : 0/0
  7629 ;;		Unchanged: 0/0
  7630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7632 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7634 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7635 ;;Total ram usage:        1 bytes
  7636 ;; Hardware stack levels used:    1
  7637 ;; Hardware stack levels required when called:    7
  7638 ;; This function calls:
  7639 ;;		Nothing
  7640 ;; This function is called by:
  7641 ;;		_PS_2_INIT
  7642 ;;		_Send_PS2
  7643 ;; This function uses a non-reentrant model
  7644 ;;
  7645                           
  7646                           
  7647                           ;psect for function _Clock_TRIS
  7648  18D0                     _Clock_TRIS:	
  7649                           
  7650                           ;incstack = 0
  7651                           ; Regs used in _Clock_TRIS: [wreg+status,2+status,0]
  7652                           ;Clock_TRIS@direction stored from wreg
  7653  18D0  0024               	movlb	4	; select bank4
  7654  18D1  00A0               	movwf	Clock_TRIS@direction^(0+512)
  7655                           
  7656                           ;PS_2.c: 122: if(direction == 0)
  7657  18D2  0820               	movf	Clock_TRIS@direction^(0+512),w
  7658  18D3  1D03               	btfss	3,2
  7659  18D4  28D8               	goto	l628
  7660                           
  7661                           ;PS_2.c: 123: {
  7662                           ;PS_2.c: 124: TRISAbits.TRISA5 = 0;
  7663  18D5  0021               	movlb	1	; select bank1
  7664  18D6  128C               	bcf	12,5	;volatile
  7665                           
  7666                           ;PS_2.c: 125: }
  7667  18D7  0008               	return
  7668  18D8                     l628:	
  7669                           
  7670                           ;PS_2.c: 126: else
  7671                           ;PS_2.c: 127: {
  7672                           ;PS_2.c: 128: TRISAbits.TRISA5 = 1;
  7673  18D8  0021               	movlb	1	; select bank1
  7674  18D9  168C               	bsf	12,5	;volatile
  7675  18DA  0008               	return
  7676  18DB                     __end_of_Clock_TRIS:	
  7677                           
  7678                           	psect	text17
  7679  1994                     __ptext17:	
  7680 ;; *************** function _PS_2_DISABLE_INTERRUPT *****************
  7681 ;; Defined at:
  7682 ;;		line 178 in file "PS_2.c"
  7683 ;; Parameters:    Size  Location     Type
  7684 ;;  DATA_CLK        1    wreg     unsigned char 
  7685 ;; Auto vars:     Size  Location     Type
  7686 ;;  DATA_CLK        1    1[BANK4 ] unsigned char 
  7687 ;; Return value:  Size  Location     Type
  7688 ;;		None               void
  7689 ;; Registers used:
  7690 ;;		wreg, status,2, status,0
  7691 ;; Tracked objects:
  7692 ;;		On entry : 0/0
  7693 ;;		On exit  : 0/0
  7694 ;;		Unchanged: 0/0
  7695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7697 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7698 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7699 ;;      Totals:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  7700 ;;Total ram usage:        2 bytes
  7701 ;; Hardware stack levels used:    1
  7702 ;; Hardware stack levels required when called:    7
  7703 ;; This function calls:
  7704 ;;		Nothing
  7705 ;; This function is called by:
  7706 ;;		_Init_PS_2_Send
  7707 ;;		_Keyboard_Connected
  7708 ;; This function uses a non-reentrant model
  7709 ;;
  7710                           
  7711                           
  7712                           ;psect for function _PS_2_DISABLE_INTERRUPT
  7713  1994                     _PS_2_DISABLE_INTERRUPT:	
  7714                           
  7715                           ;incstack = 0
  7716                           ; Regs used in _PS_2_DISABLE_INTERRUPT: [wreg+status,2+status,0]
  7717                           ;PS_2_DISABLE_INTERRUPT@DATA_CLK stored from wreg
  7718  1994  0024               	movlb	4	; select bank4
  7719  1995  00A1               	movwf	PS_2_DISABLE_INTERRUPT@DATA_CLK^(0+512)
  7720                           
  7721                           ;PS_2.c: 180: if(DATA_CLK == 0b00100000)
  7722  1996  3020               	movlw	32
  7723  1997  0621               	xorwf	PS_2_DISABLE_INTERRUPT@DATA_CLK^(0+512),w
  7724  1998  1D03               	btfss	3,2
  7725  1999  29A0               	goto	l6294
  7726                           
  7727                           ;PS_2.c: 181: {
  7728                           ;PS_2.c: 184: IOCAN &= ~0b00100000;
  7729  199A  30DF               	movlw	223
  7730  199B  00A0               	movwf	??_PS_2_DISABLE_INTERRUPT^(0+512)
  7731  199C  0820               	movf	??_PS_2_DISABLE_INTERRUPT^(0+512),w
  7732  199D  0027               	movlb	7	; select bank7
  7733  199E  0592               	andwf	18,f	;volatile
  7734                           
  7735                           ;PS_2.c: 185: }
  7736  199F  0008               	return
  7737  19A0                     l6294:	
  7738                           
  7739                           ;PS_2.c: 186: else
  7740                           ;PS_2.c: 187: {
  7741                           ;PS_2.c: 190: IOCAN &= ~0b00010000;
  7742  19A0  30EF               	movlw	239
  7743  19A1  0024               	movlb	4	; select bank4
  7744  19A2  00A0               	movwf	??_PS_2_DISABLE_INTERRUPT^(0+512)
  7745  19A3  0820               	movf	??_PS_2_DISABLE_INTERRUPT^(0+512),w
  7746  19A4  0027               	movlb	7	; select bank7
  7747  19A5  0592               	andwf	18,f	;volatile
  7748  19A6  0008               	return
  7749  19A7                     __end_of_PS_2_DISABLE_INTERRUPT:	
  7750                           
  7751                           	psect	text18
  7752  18F2                     __ptext18:	
  7753 ;; *************** function _PS_2_ENABLE_INTERRUPT *****************
  7754 ;; Defined at:
  7755 ;;		line 199 in file "PS_2.c"
  7756 ;; Parameters:    Size  Location     Type
  7757 ;;  DATA_CLK        1    wreg     unsigned char 
  7758 ;; Auto vars:     Size  Location     Type
  7759 ;;  DATA_CLK        1    0[BANK4 ] unsigned char 
  7760 ;; Return value:  Size  Location     Type
  7761 ;;		None               void
  7762 ;; Registers used:
  7763 ;;		wreg, status,2, status,0
  7764 ;; Tracked objects:
  7765 ;;		On entry : 0/0
  7766 ;;		On exit  : 0/0
  7767 ;;		Unchanged: 0/0
  7768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7770 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7772 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7773 ;;Total ram usage:        1 bytes
  7774 ;; Hardware stack levels used:    1
  7775 ;; Hardware stack levels required when called:    7
  7776 ;; This function calls:
  7777 ;;		Nothing
  7778 ;; This function is called by:
  7779 ;;		_main
  7780 ;;		_Keyboard_Connected
  7781 ;; This function uses a non-reentrant model
  7782 ;;
  7783                           
  7784                           
  7785                           ;psect for function _PS_2_ENABLE_INTERRUPT
  7786  18F2                     _PS_2_ENABLE_INTERRUPT:	
  7787                           
  7788                           ;incstack = 0
  7789                           ; Regs used in _PS_2_ENABLE_INTERRUPT: [wreg+status,2+status,0]
  7790                           ;PS_2_ENABLE_INTERRUPT@DATA_CLK stored from wreg
  7791  18F2  0024               	movlb	4	; select bank4
  7792  18F3  00A0               	movwf	PS_2_ENABLE_INTERRUPT@DATA_CLK^(0+512)
  7793                           
  7794                           ;PS_2.c: 201: if(DATA_CLK == 0b00100000)
  7795  18F4  3020               	movlw	32
  7796  18F5  0620               	xorwf	PS_2_ENABLE_INTERRUPT@DATA_CLK^(0+512),w
  7797  18F6  1D03               	btfss	3,2
  7798  18F7  28FB               	goto	l648
  7799                           
  7800                           ;PS_2.c: 202: {
  7801                           ;PS_2.c: 205: IOCAN |= 0b00100000;
  7802  18F8  0027               	movlb	7	; select bank7
  7803  18F9  1692               	bsf	18,5	;volatile
  7804                           
  7805                           ;PS_2.c: 207: }
  7806  18FA  0008               	return
  7807  18FB                     l648:	
  7808                           
  7809                           ;PS_2.c: 208: else
  7810                           ;PS_2.c: 209: {
  7811                           ;PS_2.c: 212: IOCAN |= 0b00010000;
  7812  18FB  0027               	movlb	7	; select bank7
  7813  18FC  1612               	bsf	18,4	;volatile
  7814  18FD  0008               	return
  7815  18FE                     __end_of_PS_2_ENABLE_INTERRUPT:	
  7816                           
  7817                           	psect	text19
  7818  0A51                     __ptext19:	
  7819 ;; *************** function _Init_System *****************
  7820 ;; Defined at:
  7821 ;;		line 103 in file "user.c"
  7822 ;; Parameters:    Size  Location     Type
  7823 ;;		None
  7824 ;; Auto vars:     Size  Location     Type
  7825 ;;  Baud            4   44[BANK4 ] unsigned long 
  7826 ;;  temp            4   40[BANK4 ] unsigned long 
  7827 ;;  Parity          1   48[BANK4 ] unsigned char 
  7828 ;; Return value:  Size  Location     Type
  7829 ;;		None               void
  7830 ;; Registers used:
  7831 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7832 ;; Tracked objects:
  7833 ;;		On entry : 0/0
  7834 ;;		On exit  : 0/0
  7835 ;;		Unchanged: 0/0
  7836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7838 ;;      Locals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0
  7839 ;;      Temps:          0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  7840 ;;      Totals:         0       0       0       0       0      14       0       0       0       0       0       0       
      +0       0
  7841 ;;Total ram usage:       14 bytes
  7842 ;; Hardware stack levels used:    1
  7843 ;; Hardware stack levels required when called:   10
  7844 ;; This function calls:
  7845 ;;		_InitUART
  7846 ;;		_ReadBaud
  7847 ;;		_UARTstringWAIT
  7848 ;;		_delayUS
  7849 ;; This function is called by:
  7850 ;;		_main
  7851 ;; This function uses a non-reentrant model
  7852 ;;
  7853                           
  7854                           
  7855                           ;psect for function _Init_System
  7856  0A51                     _Init_System:	
  7857                           
  7858                           ;user.c: 105: unsigned long temp =0;
  7859                           
  7860                           ;incstack = 0
  7861                           ; Regs used in _Init_System: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7862  0A51  3000               	movlw	0
  7863  0A52  0024               	movlb	4	; select bank4
  7864  0A53  00CB               	movwf	(Init_System@temp+3)^(0+512)
  7865  0A54  3000               	movlw	0
  7866  0A55  00CA               	movwf	(Init_System@temp+2)^(0+512)
  7867  0A56  3000               	movlw	0
  7868  0A57  00C9               	movwf	(Init_System@temp+1)^(0+512)
  7869  0A58  3000               	movlw	0
  7870  0A59  00C8               	movwf	Init_System@temp^(0+512)
  7871                           
  7872                           ;user.c: 106: unsigned long Baud =0;
  7873  0A5A  3000               	movlw	0
  7874  0A5B  00CF               	movwf	(Init_System@Baud+3)^(0+512)
  7875  0A5C  3000               	movlw	0
  7876  0A5D  00CE               	movwf	(Init_System@Baud+2)^(0+512)
  7877  0A5E  3000               	movlw	0
  7878  0A5F  00CD               	movwf	(Init_System@Baud+1)^(0+512)
  7879  0A60  3000               	movlw	0
  7880  0A61  00CC               	movwf	Init_System@Baud^(0+512)
  7881                           
  7882                           ;user.c: 107: unsigned char Parity =0;
  7883  0A62  01D0               	clrf	Init_System@Parity^(0+512)
  7884                           
  7885                           ;user.c: 109: temp = ReadBaud((0x1800 >> 5),0);
  7886  0A63  30C0               	movlw	192
  7887  0A64  00B2               	movwf	ReadBaud@row^(0+512)
  7888  0A65  3000               	movlw	0
  7889  0A66  00B3               	movwf	(ReadBaud@row^(0+512)+1)
  7890  0A67  01B4               	clrf	ReadBaud@column^(0+512)
  7891  0A68  3190  202B  318A   	fcall	_ReadBaud
  7892  0A6B  0024               	movlb	4	; select bank4
  7893  0A6C  0835               	movf	(?_ReadBaud+3)^(0+512),w
  7894  0A6D  00CB               	movwf	(Init_System@temp+3)^(0+512)
  7895  0A6E  0834               	movf	(?_ReadBaud+2)^(0+512),w
  7896  0A6F  00CA               	movwf	(Init_System@temp+2)^(0+512)
  7897  0A70  0833               	movf	(?_ReadBaud+1)^(0+512),w
  7898  0A71  00C9               	movwf	(Init_System@temp+1)^(0+512)
  7899  0A72  0832               	movf	?_ReadBaud^(0+512),w
  7900  0A73  00C8               	movwf	Init_System@temp^(0+512)
  7901                           
  7902                           ;user.c: 110: Baud = temp & 0x000FFFFF;
  7903  0A74  30FF               	movlw	255
  7904  0A75  0548               	andwf	Init_System@temp^(0+512),w
  7905  0A76  00CC               	movwf	Init_System@Baud^(0+512)
  7906  0A77  30FF               	movlw	255
  7907  0A78  0549               	andwf	(Init_System@temp+1)^(0+512),w
  7908  0A79  00CD               	movwf	(Init_System@Baud+1)^(0+512)
  7909  0A7A  300F               	movlw	15
  7910  0A7B  054A               	andwf	(Init_System@temp+2)^(0+512),w
  7911  0A7C  00CE               	movwf	(Init_System@Baud+2)^(0+512)
  7912  0A7D  3000               	movlw	0
  7913  0A7E  054B               	andwf	(Init_System@temp+3)^(0+512),w
  7914  0A7F  00CF               	movwf	(Init_System@Baud+3)^(0+512)
  7915                           
  7916                           ;user.c: 111: Parity = (unsigned char)((temp & 0x00F00000) >> 20);
  7917  0A80  0848               	movf	Init_System@temp^(0+512),w
  7918  0A81  00C3               	movwf	??_Init_System^(0+512)
  7919  0A82  0849               	movf	(Init_System@temp+1)^(0+512),w
  7920  0A83  00C4               	movwf	(??_Init_System^(0+512)+1)
  7921  0A84  084A               	movf	(Init_System@temp+2)^(0+512),w
  7922  0A85  00C5               	movwf	(??_Init_System^(0+512)+2)
  7923  0A86  084B               	movf	(Init_System@temp+3)^(0+512),w
  7924  0A87  00C6               	movwf	(??_Init_System^(0+512)+3)
  7925  0A88  3014               	movlw	20
  7926  0A89                     u9055:	
  7927  0A89  36C6               	lsrf	(??_Init_System^(0+512)+3),f
  7928  0A8A  0CC5               	rrf	(??_Init_System^(0+512)+2),f
  7929  0A8B  0CC4               	rrf	(??_Init_System^(0+512)+1),f
  7930  0A8C  0CC3               	rrf	??_Init_System^(0+512),f
  7931  0A8D  0B89               	decfsz	9,f
  7932  0A8E  2A89               	goto	u9055
  7933  0A8F  0843               	movf	??_Init_System^(0+512),w
  7934  0A90  390F               	andlw	15
  7935  0A91  00C7               	movwf	(??_Init_System+4)^(0+512)
  7936  0A92  0847               	movf	(??_Init_System+4)^(0+512),w
  7937  0A93  00D0               	movwf	Init_System@Parity^(0+512)
  7938                           
  7939                           ;user.c: 112: if(Baud <2400 || Baud > 115200)
  7940  0A94  084F               	movf	(Init_System@Baud+3)^(0+512),w
  7941  0A95  1D03               	btfss	3,2
  7942  0A96  2AA0               	goto	l6898
  7943  0A97  084E               	movf	(Init_System@Baud+2)^(0+512),w
  7944  0A98  1D03               	btfss	3,2
  7945  0A99  2AA0               	goto	l6898
  7946  0A9A  3060               	movlw	96
  7947  0A9B  024C               	subwf	Init_System@Baud^(0+512),w
  7948  0A9C  3009               	movlw	9
  7949  0A9D  3B4D               	subwfb	(Init_System@Baud+1)^(0+512),w
  7950  0A9E  1C03               	btfss	3,0
  7951  0A9F  2AAB               	goto	l6900
  7952  0AA0                     l6898:	
  7953  0AA0  084F               	movf	(Init_System@Baud+3)^(0+512),w
  7954  0AA1  1D03               	btfss	3,2
  7955  0AA2  2AAB               	goto	l6900
  7956  0AA3  3001               	movlw	1
  7957  0AA4  024C               	subwf	Init_System@Baud^(0+512),w
  7958  0AA5  30C2               	movlw	194
  7959  0AA6  3B4D               	subwfb	(Init_System@Baud+1)^(0+512),w
  7960  0AA7  3001               	movlw	1
  7961  0AA8  3B4E               	subwfb	(Init_System@Baud+2)^(0+512),w
  7962  0AA9  1C03               	btfss	3,0
  7963  0AAA  2AB4               	goto	l6904
  7964  0AAB                     l6900:	
  7965                           
  7966                           ;user.c: 113: {
  7967                           ;user.c: 115: Baud = 9600;
  7968  0AAB  3000               	movlw	0
  7969  0AAC  00CF               	movwf	(Init_System@Baud+3)^(0+512)
  7970  0AAD  3000               	movlw	0
  7971  0AAE  00CE               	movwf	(Init_System@Baud+2)^(0+512)
  7972  0AAF  3025               	movlw	37
  7973  0AB0  00CD               	movwf	(Init_System@Baud+1)^(0+512)
  7974  0AB1  3080               	movlw	128
  7975  0AB2  00CC               	movwf	Init_System@Baud^(0+512)
  7976                           
  7977                           ;user.c: 116: Parity = 0;
  7978  0AB3  01D0               	clrf	Init_System@Parity^(0+512)
  7979  0AB4                     l6904:	
  7980                           
  7981                           ;user.c: 117: }
  7982                           ;user.c: 118: InitUART(Baud, Parity);
  7983  0AB4  084F               	movf	(Init_System@Baud+3)^(0+512),w
  7984  0AB5  00B1               	movwf	(InitUART@Baud+3)^(0+512)
  7985  0AB6  084E               	movf	(Init_System@Baud+2)^(0+512),w
  7986  0AB7  00B0               	movwf	(InitUART@Baud+2)^(0+512)
  7987  0AB8  084D               	movf	(Init_System@Baud+1)^(0+512),w
  7988  0AB9  00AF               	movwf	(InitUART@Baud+1)^(0+512)
  7989  0ABA  084C               	movf	Init_System@Baud^(0+512),w
  7990  0ABB  00AE               	movwf	InitUART@Baud^(0+512)
  7991  0ABC  0850               	movf	Init_System@Parity^(0+512),w
  7992  0ABD  00C3               	movwf	??_Init_System^(0+512)
  7993  0ABE  0843               	movf	??_Init_System^(0+512),w
  7994  0ABF  00B2               	movwf	InitUART@parity^(0+512)
  7995  0AC0  3194  2449  318A   	fcall	_InitUART
  7996                           
  7997                           ;user.c: 121: delayUS(15000);
  7998  0AC3  3000               	movlw	0
  7999  0AC4  0024               	movlb	4	; select bank4
  8000  0AC5  00A3               	movwf	(delayUS@US+3)^(0+512)
  8001  0AC6  3000               	movlw	0
  8002  0AC7  00A2               	movwf	(delayUS@US+2)^(0+512)
  8003  0AC8  303A               	movlw	58
  8004  0AC9  00A1               	movwf	(delayUS@US+1)^(0+512)
  8005  0ACA  3098               	movlw	152
  8006  0ACB  00A0               	movwf	delayUS@US^(0+512)
  8007  0ACC  319B  23E8  318A   	fcall	_delayUS
  8008                           
  8009                           ;user.c: 122: UARTstringWAIT("\r\nPS/2 Keyboard to RS-232\r\n");
  8010  0ACF  3090               	movlw	low (STR_3| (0+32768))
  8011  0AD0  0024               	movlb	4	; select bank4
  8012  0AD1  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8013  0AD2  3089               	movlw	high (STR_3| (0+32768))
  8014  0AD3  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8015  0AD4  319B  2384  318A   	fcall	_UARTstringWAIT
  8016                           
  8017                           ;user.c: 123: delayUS(15000);
  8018  0AD7  3000               	movlw	0
  8019  0AD8  0024               	movlb	4	; select bank4
  8020  0AD9  00A3               	movwf	(delayUS@US+3)^(0+512)
  8021  0ADA  3000               	movlw	0
  8022  0ADB  00A2               	movwf	(delayUS@US+2)^(0+512)
  8023  0ADC  303A               	movlw	58
  8024  0ADD  00A1               	movwf	(delayUS@US+1)^(0+512)
  8025  0ADE  3098               	movlw	152
  8026  0ADF  00A0               	movwf	delayUS@US^(0+512)
  8027  0AE0  319B  23E8  318A   	fcall	_delayUS
  8028                           
  8029                           ;user.c: 124: UARTstringWAIT("Firmware Version: ");
  8030  0AE3  3013               	movlw	low (STR_4| (0+32768))
  8031  0AE4  0024               	movlb	4	; select bank4
  8032  0AE5  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8033  0AE6  308A               	movlw	high (STR_4| (0+32768))
  8034  0AE7  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8035  0AE8  319B  2384  318A   	fcall	_UARTstringWAIT
  8036                           
  8037                           ;user.c: 125: UARTstringWAIT(Version);
  8038  0AEB  3066               	movlw	low (_Version| (0+32768))
  8039  0AEC  0024               	movlb	4	; select bank4
  8040  0AED  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8041  0AEE  3089               	movlw	high (_Version| (0+32768))
  8042  0AEF  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8043  0AF0  319B  2384  318A   	fcall	_UARTstringWAIT
  8044                           
  8045                           ;user.c: 126: UARTstringWAIT("\r\n");
  8046  0AF3  30FD               	movlw	low ((STR_14+16)| (0+32768))
  8047  0AF4  0024               	movlb	4	; select bank4
  8048  0AF5  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8049  0AF6  3089               	movlw	high ((STR_14+16)| (0+32768))
  8050  0AF7  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8051  0AF8  319B  2384  318A   	fcall	_UARTstringWAIT
  8052                           
  8053                           ;user.c: 127: delayUS(15000);
  8054  0AFB  3000               	movlw	0
  8055  0AFC  0024               	movlb	4	; select bank4
  8056  0AFD  00A3               	movwf	(delayUS@US+3)^(0+512)
  8057  0AFE  3000               	movlw	0
  8058  0AFF  00A2               	movwf	(delayUS@US+2)^(0+512)
  8059  0B00  303A               	movlw	58
  8060  0B01  00A1               	movwf	(delayUS@US+1)^(0+512)
  8061  0B02  3098               	movlw	152
  8062  0B03  00A0               	movwf	delayUS@US^(0+512)
  8063  0B04  319B  23E8  318A   	fcall	_delayUS
  8064                           
  8065                           ;user.c: 128: UARTstringWAIT("Change BAUD: \"CNT + ALT + DEL\"\r\n");
  8066  0B07  306F               	movlw	low (STR_6| (0+32768))
  8067  0B08  0024               	movlb	4	; select bank4
  8068  0B09  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8069  0B0A  3089               	movlw	high (STR_6| (0+32768))
  8070  0B0B  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8071  0B0C  319B  2384  318A   	fcall	_UARTstringWAIT
  8072                           
  8073                           ;user.c: 129: delayUS(15000);
  8074  0B0F  3000               	movlw	0
  8075  0B10  0024               	movlb	4	; select bank4
  8076  0B11  00A3               	movwf	(delayUS@US+3)^(0+512)
  8077  0B12  3000               	movlw	0
  8078  0B13  00A2               	movwf	(delayUS@US+2)^(0+512)
  8079  0B14  303A               	movlw	58
  8080  0B15  00A1               	movwf	(delayUS@US+1)^(0+512)
  8081  0B16  3098               	movlw	152
  8082  0B17  00A0               	movwf	delayUS@US^(0+512)
  8083  0B18  319B  23E8  318A   	fcall	_delayUS
  8084                           
  8085                           ;user.c: 130: UARTstringWAIT("\r\n");
  8086  0B1B  30FD               	movlw	low ((STR_14+16)| (0+32768))
  8087  0B1C  0024               	movlb	4	; select bank4
  8088  0B1D  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8089  0B1E  3089               	movlw	high ((STR_14+16)| (0+32768))
  8090  0B1F  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8091  0B20  319B  2384  318A   	fcall	_UARTstringWAIT
  8092                           
  8093                           ;user.c: 132: if(Parity)
  8094  0B23  0024               	movlb	4	; select bank4
  8095  0B24  0850               	movf	Init_System@Parity^(0+512),w
  8096  0B25  1D03               	btfss	3,2
  8097  0B26  2B3B               	goto	l6940
  8098  0B27  2B48               	goto	l6942
  8099  0B28                     l6930:	
  8100                           ;user.c: 135: {
  8101                           ;user.c: 136: case 1:
  8102                           
  8103                           ;user.c: 133: {
  8104                           ;user.c: 134: switch (Parity)
  8105                           
  8106                           
  8107                           ;user.c: 137: UARTstringWAIT(OddParityMSG);
  8108  0B28  3011               	movlw	low (_OddParityMSG| (0+32768))
  8109  0B29  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8110  0B2A  3089               	movlw	high (_OddParityMSG| (0+32768))
  8111  0B2B  2B4B               	goto	L3
  8112  0B2C                     l6932:	
  8113                           ;user.c: 139: case 2:
  8114                           
  8115                           ;user.c: 138: break;
  8116                           
  8117                           
  8118                           ;user.c: 140: UARTstringWAIT(EvenParityMSG);
  8119  0B2C  30FB               	movlw	low (_EvenParityMSG| (0+32768))
  8120  0B2D  0024               	movlb	4	; select bank4
  8121  0B2E  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8122  0B2F  3088               	movlw	high (_EvenParityMSG| (0+32768))
  8123  0B30  2B4B               	goto	L3
  8124  0B31                     l6934:	
  8125                           ;user.c: 142: case 3:
  8126                           
  8127                           ;user.c: 141: break;
  8128                           
  8129                           
  8130                           ;user.c: 143: UARTstringWAIT(MarkParityMSG);
  8131  0B31  304A               	movlw	low (_MarkParityMSG| (0+32768))
  8132  0B32  0024               	movlb	4	; select bank4
  8133  0B33  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8134  0B34  3089               	movlw	high (_MarkParityMSG| (0+32768))
  8135  0B35  2B4B               	goto	L3
  8136  0B36                     l6936:	
  8137                           ;user.c: 145: default:
  8138                           
  8139                           ;user.c: 144: break;
  8140                           
  8141                           
  8142                           ;user.c: 146: UARTstringWAIT(SpaceParityMSG);
  8143  0B36  303A               	movlw	low (_SpaceParityMSG| (0+32768))
  8144  0B37  0024               	movlb	4	; select bank4
  8145  0B38  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8146  0B39  3089               	movlw	high (_SpaceParityMSG| (0+32768))
  8147  0B3A  2B4B               	goto	L3
  8148  0B3B                     l6940:	
  8149                           ;user.c: 148: }
  8150                           
  8151                           ;user.c: 147: break;
  8152                           
  8153  0B3B  0024               	movlb	4	; select bank4
  8154  0B3C  0850               	movf	Init_System@Parity^(0+512),w
  8155                           
  8156                           ; Switch size 1, requested type "space"
  8157                           ; Number of cases is 3, Range of values is 1 to 3
  8158                           ; switch strategies available:
  8159                           ; Name         Instructions Cycles
  8160                           ; simple_byte           10     6 (average)
  8161                           ; direct_byte           15     9 (fixed)
  8162                           ; jumptable            263     9 (fixed)
  8163                           ;	Chosen strategy is simple_byte
  8164  0B3D  3A01               	xorlw	1	; case 1
  8165  0B3E  1903               	skipnz
  8166  0B3F  2B28               	goto	l6930
  8167  0B40  3A03               	xorlw	3	; case 2
  8168  0B41  1903               	skipnz
  8169  0B42  2B2C               	goto	l6932
  8170  0B43  3A01               	xorlw	1	; case 3
  8171  0B44  1903               	skipnz
  8172  0B45  2B31               	goto	l6934
  8173  0B46  2B36               	goto	l6936
  8174                           
  8175                           ;user.c: 149: }
  8176  0B47  2B4F               	goto	l274
  8177  0B48                     l6942:	
  8178                           
  8179                           ;user.c: 150: else
  8180                           ;user.c: 151: {
  8181                           ;user.c: 152: UARTstringWAIT(NoParityMSG);
  8182  0B48  3026               	movlw	low (_NoParityMSG| (0+32768))
  8183  0B49  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8184  0B4A  3089               	movlw	high (_NoParityMSG| (0+32768))
  8185  0B4B                     L3:	
  8186  0B4B  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8187  0B4C  319B  2384  318A   	fcall	_UARTstringWAIT
  8188  0B4F                     l274:	
  8189                           
  8190                           ;user.c: 153: }
  8191                           ;user.c: 154: UARTstringWAIT("\r\n");
  8192  0B4F  30FD               	movlw	low ((STR_14+16)| (0+32768))
  8193  0B50  0024               	movlb	4	; select bank4
  8194  0B51  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8195  0B52  3089               	movlw	high ((STR_14+16)| (0+32768))
  8196  0B53  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8197  0B54  319B  2384  318A   	fcall	_UARTstringWAIT
  8198                           
  8199                           ;user.c: 155: delayUS(15000);
  8200  0B57  3000               	movlw	0
  8201  0B58  0024               	movlb	4	; select bank4
  8202  0B59  00A3               	movwf	(delayUS@US+3)^(0+512)
  8203  0B5A  3000               	movlw	0
  8204  0B5B  00A2               	movwf	(delayUS@US+2)^(0+512)
  8205  0B5C  303A               	movlw	58
  8206  0B5D  00A1               	movwf	(delayUS@US+1)^(0+512)
  8207  0B5E  3098               	movlw	152
  8208  0B5F  00A0               	movwf	delayUS@US^(0+512)
  8209  0B60  319B  23E8         	fcall	_delayUS
  8210                           
  8211                           ;user.c: 156: INTCON |= 0x08;
  8212  0B62  158B               	bsf	11,3	;volatile
  8213                           
  8214                           ;user.c: 157: INTCONbits.GIE = 1;
  8215  0B63  178B               	bsf	11,7	;volatile
  8216  0B64  0008               	return
  8217  0B65                     __end_of_Init_System:	
  8218                           
  8219                           	psect	text20
  8220  1B84                     __ptext20:	
  8221 ;; *************** function _UARTstringWAIT *****************
  8222 ;; Defined at:
  8223 ;;		line 365 in file "UART.c"
  8224 ;; Parameters:    Size  Location     Type
  8225 ;;  data            2   15[BANK4 ] PTR const unsigned char 
  8226 ;;		 -> STR_20(20), STR_19(3), Process_PS2_ScanCode@buf(60), STR_17(3), 
  8227 ;;		 -> STR_16(3), STR_15(19), STR_14(19), STR_13(3), 
  8228 ;;		 -> STR_12(3), SetBaud@buf(50), STR_10(21), STR_9(3), 
  8229 ;;		 -> STR_8(3), NoParityMSG(20), SpaceParityMSG(16), MarkParityMSG(15), 
  8230 ;;		 -> EvenParityMSG(22), OddParityMSG(21), STR_7(3), STR_6(33), 
  8231 ;;		 -> STR_5(3), Version(9), STR_4(19), STR_3(28), 
  8232 ;;		 -> STR_2(8), STR_1(7), VoltageMSG(13), 
  8233 ;; Auto vars:     Size  Location     Type
  8234 ;;		None
  8235 ;; Return value:  Size  Location     Type
  8236 ;;		None               void
  8237 ;; Registers used:
  8238 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8239 ;; Tracked objects:
  8240 ;;		On entry : 0/0
  8241 ;;		On exit  : 0/0
  8242 ;;		Unchanged: 0/0
  8243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8244 ;;      Params:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  8245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8246 ;;      Temps:          0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  8247 ;;      Totals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  8248 ;;Total ram usage:        5 bytes
  8249 ;; Hardware stack levels used:    1
  8250 ;; Hardware stack levels required when called:    9
  8251 ;; This function calls:
  8252 ;;		_UARTchar
  8253 ;;		_delayUS
  8254 ;; This function is called by:
  8255 ;;		_main
  8256 ;;		_Init_System
  8257 ;; This function uses a non-reentrant model
  8258 ;;
  8259                           
  8260                           
  8261                           ;psect for function _UARTstringWAIT
  8262  1B84                     _UARTstringWAIT:	
  8263  1B84                     l470:	
  8264                           ;incstack = 0
  8265                           ; Regs used in _UARTstringWAIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8266                           ;UART.c: 367: do
  8267                           
  8268                           
  8269                           ;UART.c: 368: {
  8270                           ;UART.c: 369: delayUS(5000);
  8271  1B84  3000               	movlw	0
  8272  1B85  0024               	movlb	4	; select bank4
  8273  1B86  00A3               	movwf	(delayUS@US+3)^(0+512)
  8274  1B87  3000               	movlw	0
  8275  1B88  00A2               	movwf	(delayUS@US+2)^(0+512)
  8276  1B89  3013               	movlw	19
  8277  1B8A  00A1               	movwf	(delayUS@US+1)^(0+512)
  8278  1B8B  3088               	movlw	136
  8279  1B8C  00A0               	movwf	delayUS@US^(0+512)
  8280  1B8D  319B  23E8  319B   	fcall	_delayUS
  8281                           
  8282                           ;UART.c: 370: if(*data != 0)
  8283  1B90  0024               	movlb	4	; select bank4
  8284  1B91  082F               	movf	UARTstringWAIT@data^(0+512),w
  8285  1B92  0084               	movwf	4
  8286  1B93  0830               	movf	(UARTstringWAIT@data+1)^(0+512),w
  8287  1B94  0085               	movwf	5
  8288  1B95  0012               	moviw fsr0++
  8289  1B96  1903               	btfsc	3,2
  8290  1B97  2BA5               	goto	l6600
  8291                           
  8292                           ;UART.c: 371: {
  8293                           ;UART.c: 372: UARTchar(*data, 0, 0);
  8294  1B98  01A8               	clrf	UARTchar@override^(0+512)
  8295  1B99  01A9               	clrf	UARTchar@NinethBit_override_data^(0+512)
  8296  1B9A  082F               	movf	UARTstringWAIT@data^(0+512),w
  8297  1B9B  0084               	movwf	4
  8298  1B9C  0830               	movf	(UARTstringWAIT@data+1)^(0+512),w
  8299  1B9D  0085               	movwf	5
  8300  1B9E  0800               	movf	0,w	;code access
  8301  1B9F  3190  20F0  319B   	fcall	_UARTchar
  8302  1BA2                     l472:	
  8303                           ;UART.c: 373: while((!TX1STAbits.TRMT));
  8304                           
  8305  1BA2  0023               	movlb	3	; select bank3
  8306  1BA3  1C9E               	btfss	30,1	;volatile
  8307  1BA4  2BA2               	goto	l472
  8308  1BA5                     l6600:	
  8309                           
  8310                           ;UART.c: 374: }
  8311                           ;UART.c: 375: } while( *data++);
  8312  1BA5  0024               	movlb	4	; select bank4
  8313  1BA6  0830               	movf	(UARTstringWAIT@data+1)^(0+512),w
  8314  1BA7  00B2               	movwf	(??_UARTstringWAIT^(0+512)+1)
  8315  1BA8  082F               	movf	UARTstringWAIT@data^(0+512),w
  8316  1BA9  00B1               	movwf	??_UARTstringWAIT^(0+512)
  8317  1BAA  0AAF               	incf	UARTstringWAIT@data^(0+512),f
  8318  1BAB  1903               	skipnz
  8319  1BAC  0AB0               	incf	(UARTstringWAIT@data+1)^(0+512),f
  8320  1BAD  0831               	movf	??_UARTstringWAIT^(0+512),w
  8321  1BAE  0084               	movwf	4
  8322  1BAF  0832               	movf	(??_UARTstringWAIT+1)^(0+512),w
  8323  1BB0  0085               	movwf	5
  8324  1BB1  0012               	moviw fsr0++
  8325  1BB2  1903               	btfsc	3,2
  8326  1BB3  0008               	return
  8327  1BB4  2B84               	goto	l470
  8328  1BB5                     __end_of_UARTstringWAIT:	
  8329                           
  8330                           	psect	text21
  8331  1BE8                     __ptext21:	
  8332 ;; *************** function _delayUS *****************
  8333 ;; Defined at:
  8334 ;;		line 51 in file "MISC.c"
  8335 ;; Parameters:    Size  Location     Type
  8336 ;;  US              4    0[BANK4 ] long 
  8337 ;; Auto vars:     Size  Location     Type
  8338 ;;  i               4    5[BANK4 ] long 
  8339 ;;  j               1    9[BANK4 ] unsigned char 
  8340 ;; Return value:  Size  Location     Type
  8341 ;;		None               void
  8342 ;; Registers used:
  8343 ;;		wreg, status,2, status,0
  8344 ;; Tracked objects:
  8345 ;;		On entry : 0/0
  8346 ;;		On exit  : 0/0
  8347 ;;		Unchanged: 0/0
  8348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8349 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8350 ;;      Locals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  8351 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  8352 ;;      Totals:         0       0       0       0       0      10       0       0       0       0       0       0       
      +0       0
  8353 ;;Total ram usage:       10 bytes
  8354 ;; Hardware stack levels used:    1
  8355 ;; Hardware stack levels required when called:    7
  8356 ;; This function calls:
  8357 ;;		Nothing
  8358 ;; This function is called by:
  8359 ;;		_main
  8360 ;;		_Init_System
  8361 ;;		_UARTstringWAIT
  8362 ;;		_Send_PS2
  8363 ;;		_Init_PS_2_Send
  8364 ;;		_InternalADC_Read
  8365 ;;		_Keyboard_Connected
  8366 ;; This function uses a non-reentrant model
  8367 ;;
  8368                           
  8369                           
  8370                           ;psect for function _delayUS
  8371  1BE8                     _delayUS:	
  8372                           
  8373                           ;MISC.c: 53: long i;
  8374                           ;MISC.c: 54: unsigned char j;
  8375                           ;MISC.c: 55: for(i=0;i<US;i+=6)
  8376                           
  8377                           ;incstack = 0
  8378                           ; Regs used in _delayUS: [wreg+status,2+status,0]
  8379  1BE8  3000               	movlw	0
  8380  1BE9  0024               	movlb	4	; select bank4
  8381  1BEA  00A8               	movwf	(delayUS@i+3)^(0+512)
  8382  1BEB  3000               	movlw	0
  8383  1BEC  00A7               	movwf	(delayUS@i+2)^(0+512)
  8384  1BED  3000               	movlw	0
  8385  1BEE  00A6               	movwf	(delayUS@i+1)^(0+512)
  8386  1BEF  3000               	movlw	0
  8387  1BF0  00A5               	movwf	delayUS@i^(0+512)
  8388  1BF1                     l282:	
  8389  1BF1  0828               	movf	(delayUS@i+3)^(0+512),w
  8390  1BF2  3A80               	xorlw	128
  8391  1BF3  00A4               	movwf	??_delayUS^(0+512)
  8392  1BF4  0823               	movf	(delayUS@US+3)^(0+512),w
  8393  1BF5  3A80               	xorlw	128
  8394  1BF6  0224               	subwf	??_delayUS^(0+512),w
  8395  1BF7  1D03               	skipz
  8396  1BF8  2C03               	goto	u7933
  8397  1BF9  0822               	movf	(delayUS@US+2)^(0+512),w
  8398  1BFA  0227               	subwf	(delayUS@i+2)^(0+512),w
  8399  1BFB  1D03               	skipz
  8400  1BFC  2C03               	goto	u7933
  8401  1BFD  0821               	movf	(delayUS@US+1)^(0+512),w
  8402  1BFE  0226               	subwf	(delayUS@i+1)^(0+512),w
  8403  1BFF  1D03               	skipz
  8404  1C00  2C03               	goto	u7933
  8405  1C01  0820               	movf	delayUS@US^(0+512),w
  8406  1C02  0225               	subwf	delayUS@i^(0+512),w
  8407  1C03                     u7933:	
  8408  1C03  1803               	btfsc	3,0
  8409  1C04  0008               	return
  8410                           
  8411                           ;MISC.c: 56: {
  8412                           ;MISC.c: 57: for(j=0;j<32;j++)
  8413  1C05  01A9               	clrf	delayUS@j^(0+512)
  8414  1C06  3020               	movlw	32
  8415  1C07  0229               	subwf	delayUS@j^(0+512),w
  8416  1C08  1803               	btfsc	3,0
  8417  1C09  2C14               	goto	l6238
  8418  1C0A                     l284:	
  8419                           
  8420                           ;MISC.c: 58: {
  8421                           ;MISC.c: 59: __nop();
  8422  1C0A  0000               	nop
  8423  1C0B  3001               	movlw	1
  8424  1C0C  0024               	movlb	4	; select bank4
  8425  1C0D  00A4               	movwf	??_delayUS^(0+512)
  8426  1C0E  0824               	movf	??_delayUS^(0+512),w
  8427  1C0F  07A9               	addwf	delayUS@j^(0+512),f
  8428  1C10  3020               	movlw	32
  8429  1C11  0229               	subwf	delayUS@j^(0+512),w
  8430  1C12  1C03               	skipc
  8431  1C13  2C0A               	goto	l284
  8432  1C14                     l6238:	
  8433  1C14  3006               	movlw	6
  8434  1C15  07A5               	addwf	delayUS@i^(0+512),f
  8435  1C16  3000               	movlw	0
  8436  1C17  3DA6               	addwfc	(delayUS@i+1)^(0+512),f
  8437  1C18  3000               	movlw	0
  8438  1C19  3DA7               	addwfc	(delayUS@i+2)^(0+512),f
  8439  1C1A  3000               	movlw	0
  8440  1C1B  3DA8               	addwfc	(delayUS@i+3)^(0+512),f
  8441  1C1C  2BF1               	goto	l282
  8442  1C1D                     __end_of_delayUS:	
  8443                           
  8444                           	psect	text22
  8445  10F0                     __ptext22:	
  8446 ;; *************** function _UARTchar *****************
  8447 ;; Defined at:
  8448 ;;		line 234 in file "UART.c"
  8449 ;; Parameters:    Size  Location     Type
  8450 ;;  data            1    wreg     unsigned char 
  8451 ;;  override        1    8[BANK4 ] unsigned char 
  8452 ;;  NinethBit_ov    1    9[BANK4 ] unsigned char 
  8453 ;; Auto vars:     Size  Location     Type
  8454 ;;  data            1   14[BANK4 ] unsigned char 
  8455 ;; Return value:  Size  Location     Type
  8456 ;;		None               void
  8457 ;; Registers used:
  8458 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8459 ;; Tracked objects:
  8460 ;;		On entry : 0/0
  8461 ;;		On exit  : 0/0
  8462 ;;		Unchanged: 0/0
  8463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8464 ;;      Params:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  8465 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  8466 ;;      Temps:          0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8467 ;;      Totals:         0       0       0       0       0       7       0       0       0       0       0       0       
      +0       0
  8468 ;;Total ram usage:        7 bytes
  8469 ;; Hardware stack levels used:    1
  8470 ;; Hardware stack levels required when called:    8
  8471 ;; This function calls:
  8472 ;;		_CheckSum_byte
  8473 ;; This function is called by:
  8474 ;;		_UARTstringWAIT
  8475 ;;		_UARTstring
  8476 ;; This function uses a non-reentrant model
  8477 ;;
  8478                           
  8479                           
  8480                           ;psect for function _UARTchar
  8481  10F0                     _UARTchar:	
  8482                           
  8483                           ;incstack = 0
  8484                           ; Regs used in _UARTchar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8485                           ;UARTchar@data stored from wreg
  8486  10F0  0024               	movlb	4	; select bank4
  8487  10F1  00AE               	movwf	UARTchar@data^(0+512)
  8488                           
  8489                           ;UART.c: 236: if(TXSTAbits.TX9)
  8490  10F2  0023               	movlb	3	; select bank3
  8491  10F3  1F1E               	btfss	30,6	;volatile
  8492  10F4  2939               	goto	l428
  8493                           
  8494                           ;UART.c: 237: {
  8495                           ;UART.c: 239: if(!override)
  8496  10F5  0024               	movlb	4	; select bank4
  8497  10F6  0828               	movf	UARTchar@override^(0+512),w
  8498  10F7  1903               	btfsc	3,2
  8499  10F8  2921               	goto	l6318
  8500  10F9  292E               	goto	l6320
  8501  10FA                     l6312:	
  8502                           ;UART.c: 243: {
  8503                           ;UART.c: 244: case 1:
  8504                           
  8505                           ;UART.c: 240: {
  8506                           ;UART.c: 242: switch (PARITY)
  8507                           
  8508                           
  8509                           ;UART.c: 245: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 3);
  8510  10FA  082E               	movf	UARTchar@data^(0+512),w
  8511  10FB  00AA               	movwf	??_UARTchar^(0+512)
  8512  10FC  01AB               	clrf	(??_UARTchar^(0+512)+1)
  8513  10FD  082A               	movf	??_UARTchar^(0+512),w
  8514  10FE  00A0               	movwf	CheckSum_byte@This^(0+512)
  8515  10FF  082B               	movf	(??_UARTchar+1)^(0+512),w
  8516  1100  00A1               	movwf	(CheckSum_byte@This+1)^(0+512)
  8517  1101  3003               	movlw	3
  8518  1102  290C               	goto	L6
  8519  1103                     l6314:	
  8520                           ;UART.c: 247: case 2:
  8521                           
  8522                           ;UART.c: 246: break;
  8523                           
  8524                           
  8525                           ;UART.c: 248: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 2);
  8526  1103  0024               	movlb	4	; select bank4
  8527  1104  082E               	movf	UARTchar@data^(0+512),w
  8528  1105  00AA               	movwf	??_UARTchar^(0+512)
  8529  1106  01AB               	clrf	(??_UARTchar^(0+512)+1)
  8530  1107  082A               	movf	??_UARTchar^(0+512),w
  8531  1108  00A0               	movwf	CheckSum_byte@This^(0+512)
  8532  1109  082B               	movf	(??_UARTchar+1)^(0+512),w
  8533  110A  00A1               	movwf	(CheckSum_byte@This+1)^(0+512)
  8534  110B  3002               	movlw	2
  8535  110C                     L6:	
  8536  110C  00AC               	movwf	(??_UARTchar+2)^(0+512)
  8537  110D  082C               	movf	(??_UARTchar+2)^(0+512),w
  8538  110E  00A2               	movwf	CheckSum_byte@Odd_Even^(0+512)
  8539  110F  319A  22F5  3190   	fcall	_CheckSum_byte
  8540  1112  0024               	movlb	4	; select bank4
  8541  1113  00AD               	movwf	(??_UARTchar+3)^(0+512)
  8542  1114  0023               	movlb	3	; select bank3
  8543  1115  081E               	movf	30,w	;volatile
  8544  1116  0024               	movlb	4	; select bank4
  8545  1117  062D               	xorwf	(??_UARTchar+3)^(0+512),w
  8546  1118  39FE               	andlw	-2
  8547  1119  062D               	xorwf	(??_UARTchar+3)^(0+512),w
  8548  111A  2937               	goto	L5
  8549  111B                     l434:	
  8550                           ;UART.c: 250: case 3:
  8551                           
  8552                           ;UART.c: 249: break;
  8553                           
  8554                           
  8555                           ;UART.c: 251: TXSTAbits.TX9D = 1;
  8556  111B  0023               	movlb	3	; select bank3
  8557  111C  141E               	bsf	30,0	;volatile
  8558                           
  8559                           ;UART.c: 252: break;
  8560  111D  2939               	goto	l428
  8561  111E                     l435:	
  8562                           ;UART.c: 253: default:
  8563                           
  8564                           
  8565                           ;UART.c: 254: TXSTAbits.TX9D = 0;
  8566  111E  0023               	movlb	3	; select bank3
  8567  111F  101E               	bcf	30,0	;volatile
  8568                           
  8569                           ;UART.c: 256: }
  8570                           
  8571                           ;UART.c: 255: break;
  8572  1120  2939               	goto	l428
  8573  1121                     l6318:	
  8574  1121  0024               	movlb	4	; select bank4
  8575  1122  0861               	movf	_PARITY^(0+512),w
  8576                           
  8577                           ; Switch size 1, requested type "space"
  8578                           ; Number of cases is 3, Range of values is 1 to 3
  8579                           ; switch strategies available:
  8580                           ; Name         Instructions Cycles
  8581                           ; simple_byte           10     6 (average)
  8582                           ; direct_byte           15     9 (fixed)
  8583                           ; jumptable            263     9 (fixed)
  8584                           ;	Chosen strategy is simple_byte
  8585  1123  3A01               	xorlw	1	; case 1
  8586  1124  1903               	skipnz
  8587  1125  28FA               	goto	l6312
  8588  1126  3A03               	xorlw	3	; case 2
  8589  1127  1903               	skipnz
  8590  1128  2903               	goto	l6314
  8591  1129  3A01               	xorlw	1	; case 3
  8592  112A  1903               	skipnz
  8593  112B  291B               	goto	l434
  8594  112C  291E               	goto	l435
  8595                           
  8596                           ;UART.c: 257: }
  8597  112D  2939               	goto	l428
  8598  112E                     l6320:	
  8599                           
  8600                           ;UART.c: 258: else
  8601                           ;UART.c: 259: {
  8602                           ;UART.c: 260: TXSTAbits.TX9D = (NinethBit_override_data & 0x01);
  8603  112E  3001               	movlw	1
  8604  112F  0529               	andwf	UARTchar@NinethBit_override_data^(0+512),w
  8605  1130  00AA               	movwf	??_UARTchar^(0+512)
  8606  1131  0023               	movlb	3	; select bank3
  8607  1132  081E               	movf	30,w	;volatile
  8608  1133  0024               	movlb	4	; select bank4
  8609  1134  062A               	xorwf	??_UARTchar^(0+512),w
  8610  1135  39FE               	andlw	-2
  8611  1136  062A               	xorwf	??_UARTchar^(0+512),w
  8612  1137                     L5:	
  8613  1137  0023               	movlb	3	; select bank3
  8614  1138  009E               	movwf	30	;volatile
  8615  1139                     l428:	
  8616                           
  8617                           ;UART.c: 261: }
  8618                           ;UART.c: 262: }
  8619                           ;UART.c: 264: if(data == '\n')
  8620  1139  300A               	movlw	10
  8621  113A  0024               	movlb	4	; select bank4
  8622  113B  062E               	xorwf	UARTchar@data^(0+512),w
  8623  113C  1D03               	btfss	3,2
  8624  113D  294D               	goto	l445
  8625                           
  8626                           ;UART.c: 265: {
  8627                           ;UART.c: 266: if(override || LineOverride)
  8628  113E  0828               	movf	UARTchar@override^(0+512),w
  8629  113F  1903               	btfsc	3,2
  8630  1140  0860               	movf	_LineOverride^(0+512),w
  8631  1141  1903               	btfsc	3,2
  8632  1142  0008               	return
  8633  1143                     l441:	
  8634                           ;UART.c: 267: {
  8635                           ;UART.c: 268: while(!TXSTAbits.TRMT);
  8636                           
  8637  1143  0023               	movlb	3	; select bank3
  8638  1144  1C9E               	btfss	30,1	;volatile
  8639  1145  2943               	goto	l441
  8640                           
  8641                           ;UART.c: 269: TXREG = data;
  8642  1146  0024               	movlb	4	; select bank4
  8643  1147  082E               	movf	UARTchar@data^(0+512),w
  8644  1148  0023               	movlb	3	; select bank3
  8645  1149  009A               	movwf	26	;volatile
  8646                           
  8647                           ;UART.c: 270: LineOverride = 0;
  8648  114A  0024               	movlb	4	; select bank4
  8649  114B  01E0               	clrf	_LineOverride^(0+512)
  8650                           
  8651                           ;UART.c: 271: }
  8652                           ;UART.c: 272: }
  8653  114C  0008               	return
  8654  114D                     l445:	
  8655                           ;UART.c: 273: else
  8656                           ;UART.c: 274: {
  8657                           ;UART.c: 275: while(!TXSTAbits.TRMT);
  8658                           
  8659  114D  0023               	movlb	3	; select bank3
  8660  114E  1C9E               	btfss	30,1	;volatile
  8661  114F  294D               	goto	l445
  8662                           
  8663                           ;UART.c: 276: TXREG = data;
  8664  1150  0024               	movlb	4	; select bank4
  8665  1151  082E               	movf	UARTchar@data^(0+512),w
  8666  1152  0023               	movlb	3	; select bank3
  8667  1153  009A               	movwf	26	;volatile
  8668  1154  0008               	return
  8669  1155                     __end_of_UARTchar:	
  8670                           
  8671                           	psect	text23
  8672  1AF5                     __ptext23:	
  8673 ;; *************** function _CheckSum_byte *****************
  8674 ;; Defined at:
  8675 ;;		line 71 in file "MISC.c"
  8676 ;; Parameters:    Size  Location     Type
  8677 ;;  This            2    0[BANK4 ] unsigned int 
  8678 ;;  Odd_Even        1    2[BANK4 ] unsigned char 
  8679 ;; Auto vars:     Size  Location     Type
  8680 ;;  ThisTemp        2    4[BANK4 ] unsigned int 
  8681 ;;  i               1    7[BANK4 ] unsigned char 
  8682 ;;  Parity          1    6[BANK4 ] unsigned char 
  8683 ;; Return value:  Size  Location     Type
  8684 ;;                  1    wreg      unsigned char 
  8685 ;; Registers used:
  8686 ;;		wreg, status,2, status,0
  8687 ;; Tracked objects:
  8688 ;;		On entry : 0/0
  8689 ;;		On exit  : 0/0
  8690 ;;		Unchanged: 0/0
  8691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8692 ;;      Params:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  8693 ;;      Locals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8694 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  8695 ;;      Totals:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  8696 ;;Total ram usage:        8 bytes
  8697 ;; Hardware stack levels used:    1
  8698 ;; Hardware stack levels required when called:    7
  8699 ;; This function calls:
  8700 ;;		Nothing
  8701 ;; This function is called by:
  8702 ;;		_UARTchar
  8703 ;;		_Send_PS2
  8704 ;; This function uses a non-reentrant model
  8705 ;;
  8706                           
  8707                           
  8708                           ;psect for function _CheckSum_byte
  8709  1AF5                     _CheckSum_byte:	
  8710                           
  8711                           ;MISC.c: 73: char i = 0;
  8712                           
  8713                           ;incstack = 0
  8714                           ; Regs used in _CheckSum_byte: [wreg+status,2+status,0]
  8715  1AF5  0024               	movlb	4	; select bank4
  8716  1AF6  01A7               	clrf	CheckSum_byte@i^(0+512)
  8717                           
  8718                           ;MISC.c: 74: unsigned char Parity = 0;
  8719  1AF7  01A6               	clrf	CheckSum_byte@Parity^(0+512)
  8720                           
  8721                           ;MISC.c: 75: unsigned int ThisTemp = This;
  8722  1AF8  0821               	movf	(CheckSum_byte@This+1)^(0+512),w
  8723  1AF9  00A5               	movwf	(CheckSum_byte@ThisTemp+1)^(0+512)
  8724  1AFA  0820               	movf	CheckSum_byte@This^(0+512),w
  8725  1AFB  00A4               	movwf	CheckSum_byte@ThisTemp^(0+512)
  8726                           
  8727                           ;MISC.c: 77: for (i =0; i<8; i++)
  8728  1AFC  01A7               	clrf	CheckSum_byte@i^(0+512)
  8729  1AFD  3008               	movlw	8
  8730  1AFE  0227               	subwf	CheckSum_byte@i^(0+512),w
  8731  1AFF  1803               	btfsc	3,0
  8732  1B00  2B14               	goto	l6252
  8733  1B01                     l290:	
  8734                           
  8735                           ;MISC.c: 78: {
  8736                           ;MISC.c: 79: if((ThisTemp & 0x01) == 1)
  8737  1B01  1C24               	btfss	CheckSum_byte@ThisTemp^(0+512),0
  8738  1B02  2B07               	goto	l292
  8739                           
  8740                           ;MISC.c: 80: {
  8741                           ;MISC.c: 81: Parity++;
  8742  1B03  3001               	movlw	1
  8743  1B04  00A3               	movwf	??_CheckSum_byte^(0+512)
  8744  1B05  0823               	movf	??_CheckSum_byte^(0+512),w
  8745  1B06  07A6               	addwf	CheckSum_byte@Parity^(0+512),f
  8746  1B07                     l292:	
  8747                           
  8748                           ;MISC.c: 82: }
  8749                           ;MISC.c: 83: ThisTemp >>= 1;
  8750  1B07  3001               	movlw	1
  8751  1B08                     u7965:	
  8752  1B08  36A5               	lsrf	(CheckSum_byte@ThisTemp+1)^(0+512),f
  8753  1B09  0CA4               	rrf	CheckSum_byte@ThisTemp^(0+512),f
  8754  1B0A  0B89               	decfsz	9,f
  8755  1B0B  2B08               	goto	u7965
  8756  1B0C  3001               	movlw	1
  8757  1B0D  00A3               	movwf	??_CheckSum_byte^(0+512)
  8758  1B0E  0823               	movf	??_CheckSum_byte^(0+512),w
  8759  1B0F  07A7               	addwf	CheckSum_byte@i^(0+512),f
  8760  1B10  3008               	movlw	8
  8761  1B11  0227               	subwf	CheckSum_byte@i^(0+512),w
  8762  1B12  1C03               	skipc
  8763  1B13  2B01               	goto	l290
  8764  1B14                     l6252:	
  8765                           
  8766                           ;MISC.c: 84: }
  8767                           ;MISC.c: 85: if(Odd_Even == 3)
  8768  1B14  3003               	movlw	3
  8769  1B15  0622               	xorwf	CheckSum_byte@Odd_Even^(0+512),w
  8770  1B16  1D03               	btfss	3,2
  8771  1B17  2B1E               	goto	l293
  8772                           
  8773                           ;MISC.c: 86: {
  8774                           ;MISC.c: 87: if(Parity % 2 == 0)
  8775  1B18  1826               	btfsc	CheckSum_byte@Parity^(0+512),0
  8776  1B19  2B1C               	goto	l6260
  8777                           
  8778                           ;MISC.c: 88: {
  8779                           ;MISC.c: 89: return 1;
  8780  1B1A  3001               	movlw	1
  8781  1B1B  0008               	return
  8782  1B1C                     l6260:	
  8783                           
  8784                           ;MISC.c: 90: }
  8785                           ;MISC.c: 91: return 0;
  8786  1B1C  3000               	movlw	0
  8787                           
  8788                           ;MISC.c: 92: }
  8789  1B1D  0008               	return
  8790  1B1E                     l293:	
  8791                           
  8792                           ;MISC.c: 93: else
  8793                           ;MISC.c: 94: {
  8794                           ;MISC.c: 95: if(Parity % 2 == 1)
  8795  1B1E  1C26               	btfss	CheckSum_byte@Parity^(0+512),0
  8796  1B1F  2B22               	goto	l6270
  8797                           
  8798                           ;MISC.c: 96: {
  8799                           ;MISC.c: 97: return 1;
  8800  1B20  3001               	movlw	1
  8801  1B21  0008               	return
  8802  1B22                     l6270:	
  8803                           
  8804                           ;MISC.c: 98: }
  8805                           ;MISC.c: 99: return 0;
  8806  1B22  3000               	movlw	0
  8807  1B23  0008               	return
  8808  1B24                     __end_of_CheckSum_byte:	
  8809                           
  8810                           	psect	text24
  8811  102B                     __ptext24:	
  8812 ;; *************** function _ReadBaud *****************
  8813 ;; Defined at:
  8814 ;;		line 187 in file "FLASH.c"
  8815 ;; Parameters:    Size  Location     Type
  8816 ;;  row             2   18[BANK4 ] unsigned int 
  8817 ;;  column          1   20[BANK4 ] unsigned char 
  8818 ;; Auto vars:     Size  Location     Type
  8819 ;;  temp            4   30[BANK4 ] unsigned long 
  8820 ;; Return value:  Size  Location     Type
  8821 ;;                  4   18[BANK4 ] unsigned long 
  8822 ;; Registers used:
  8823 ;;		wreg, status,2, status,0, pclath, cstack
  8824 ;; Tracked objects:
  8825 ;;		On entry : 0/0
  8826 ;;		On exit  : 0/0
  8827 ;;		Unchanged: 0/0
  8828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8829 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8830 ;;      Locals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8831 ;;      Temps:          0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  8832 ;;      Totals:         0       0       0       0       0      16       0       0       0       0       0       0       
      +0       0
  8833 ;;Total ram usage:       16 bytes
  8834 ;; Hardware stack levels used:    1
  8835 ;; Hardware stack levels required when called:    9
  8836 ;; This function calls:
  8837 ;;		_ReadFlash_4Byte
  8838 ;; This function is called by:
  8839 ;;		_Init_System
  8840 ;; This function uses a non-reentrant model
  8841 ;;
  8842                           
  8843                           
  8844                           ;psect for function _ReadBaud
  8845  102B                     _ReadBaud:	
  8846                           
  8847                           ;FLASH.c: 189: unsigned long temp;
  8848                           ;FLASH.c: 190: temp =(ReadFlash_4Byte(row, column));
  8849                           
  8850                           ;incstack = 0
  8851                           ; Regs used in _ReadBaud: [wreg+status,2+status,0+pclath+cstack]
  8852  102B  0024               	movlb	4	; select bank4
  8853  102C  0833               	movf	(ReadBaud@row+1)^(0+512),w
  8854  102D  00A6               	movwf	(ReadFlash_4Byte@row+1)^(0+512)
  8855  102E  0832               	movf	ReadBaud@row^(0+512),w
  8856  102F  00A5               	movwf	ReadFlash_4Byte@row^(0+512)
  8857  1030  0834               	movf	ReadBaud@column^(0+512),w
  8858  1031  00B6               	movwf	??_ReadBaud^(0+512)
  8859  1032  0836               	movf	??_ReadBaud^(0+512),w
  8860  1033  00A7               	movwf	ReadFlash_4Byte@column^(0+512)
  8861  1034  319D  25AD  3190   	fcall	_ReadFlash_4Byte
  8862  1037  0024               	movlb	4	; select bank4
  8863  1038  0828               	movf	(?_ReadFlash_4Byte+3)^(0+512),w
  8864  1039  00C1               	movwf	(ReadBaud@temp+3)^(0+512)
  8865  103A  0827               	movf	(?_ReadFlash_4Byte+2)^(0+512),w
  8866  103B  00C0               	movwf	(ReadBaud@temp+2)^(0+512)
  8867  103C  0826               	movf	(?_ReadFlash_4Byte+1)^(0+512),w
  8868  103D  00BF               	movwf	(ReadBaud@temp+1)^(0+512)
  8869  103E  0825               	movf	?_ReadFlash_4Byte^(0+512),w
  8870  103F  00BE               	movwf	ReadBaud@temp^(0+512)
  8871                           
  8872                           ;FLASH.c: 191: MEM[1] = (unsigned int)(temp & 0x0003FFF);
  8873  1040  30FF               	movlw	255
  8874  1041  053E               	andwf	ReadBaud@temp^(0+512),w
  8875  1042  0021               	movlb	1	; select bank1
  8876  1043  00E5               	movwf	(_MEM^(0+128)+2)
  8877  1044  303F               	movlw	63
  8878  1045  0024               	movlb	4	; select bank4
  8879  1046  053F               	andwf	(ReadBaud@temp+1)^(0+512),w
  8880  1047  0021               	movlb	1	; select bank1
  8881  1048  00E6               	movwf	((_MEM+1)^(0+128)+2)
  8882                           
  8883                           ;FLASH.c: 192: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
  8884  1049  0024               	movlb	4	; select bank4
  8885  104A  083E               	movf	ReadBaud@temp^(0+512),w
  8886  104B  00B6               	movwf	??_ReadBaud^(0+512)
  8887  104C  083F               	movf	(ReadBaud@temp+1)^(0+512),w
  8888  104D  00B7               	movwf	(??_ReadBaud^(0+512)+1)
  8889  104E  0840               	movf	(ReadBaud@temp+2)^(0+512),w
  8890  104F  00B8               	movwf	(??_ReadBaud^(0+512)+2)
  8891  1050  0841               	movf	(ReadBaud@temp+3)^(0+512),w
  8892  1051  00B9               	movwf	(??_ReadBaud^(0+512)+3)
  8893  1052  300E               	movlw	14
  8894  1053                     u8665:	
  8895  1053  36B9               	lsrf	(??_ReadBaud^(0+512)+3),f
  8896  1054  0CB8               	rrf	(??_ReadBaud^(0+512)+2),f
  8897  1055  0CB7               	rrf	(??_ReadBaud^(0+512)+1),f
  8898  1056  0CB6               	rrf	??_ReadBaud^(0+512),f
  8899  1057  0B89               	decfsz	9,f
  8900  1058  2853               	goto	u8665
  8901  1059  30FF               	movlw	255
  8902  105A  0536               	andwf	??_ReadBaud^(0+512),w
  8903  105B  0021               	movlb	1	; select bank1
  8904  105C  00E3               	movwf	_MEM^(0+128)
  8905  105D  303F               	movlw	63
  8906  105E  0024               	movlb	4	; select bank4
  8907  105F  0537               	andwf	(??_ReadBaud+1)^(0+512),w
  8908  1060  0021               	movlb	1	; select bank1
  8909  1061  00E4               	movwf	(_MEM+1)^(0+128)
  8910                           
  8911                           ;FLASH.c: 193: return (((unsigned long)MEM[0] << 12) + (unsigned long)MEM[1]);
  8912  1062  0865               	movf	(_MEM^(0+128)+2),w
  8913  1063  0024               	movlb	4	; select bank4
  8914  1064  00B6               	movwf	??_ReadBaud^(0+512)
  8915  1065  0021               	movlb	1	; select bank1
  8916  1066  0866               	movf	((_MEM+1)^(0+128)+2),w
  8917  1067  0024               	movlb	4	; select bank4
  8918  1068  00B7               	movwf	(??_ReadBaud^(0+512)+1)
  8919  1069  01B8               	clrf	(??_ReadBaud^(0+512)+2)
  8920  106A  01B9               	clrf	(??_ReadBaud^(0+512)+3)
  8921  106B  0021               	movlb	1	; select bank1
  8922  106C  0863               	movf	_MEM^(0+128),w
  8923  106D  0024               	movlb	4	; select bank4
  8924  106E  00BA               	movwf	(??_ReadBaud+4)^(0+512)
  8925  106F  0021               	movlb	1	; select bank1
  8926  1070  0864               	movf	(_MEM+1)^(0+128),w
  8927  1071  0024               	movlb	4	; select bank4
  8928  1072  00BB               	movwf	((??_ReadBaud+4)^(0+512)+1)
  8929  1073  01BC               	clrf	((??_ReadBaud+4)^(0+512)+2)
  8930  1074  01BD               	clrf	((??_ReadBaud+4)^(0+512)+3)
  8931  1075  300C               	movlw	12
  8932  1076                     u8675:	
  8933  1076  35BA               	lslf	(??_ReadBaud+4)^(0+512),f
  8934  1077  0DBB               	rlf	((??_ReadBaud+4)^(0+512)+1),f
  8935  1078  0DBC               	rlf	((??_ReadBaud+4)^(0+512)+2),f
  8936  1079  0DBD               	rlf	((??_ReadBaud+4)^(0+512)+3),f
  8937  107A  0B89               	decfsz	9,f
  8938  107B  2876               	goto	u8675
  8939  107C  083A               	movf	(??_ReadBaud+4)^(0+512),w
  8940  107D  07B6               	addwf	??_ReadBaud^(0+512),f
  8941  107E  083B               	movf	(??_ReadBaud+5)^(0+512),w
  8942  107F  3DB7               	addwfc	(??_ReadBaud^(0+512)+1),f
  8943  1080  083C               	movf	(??_ReadBaud+6)^(0+512),w
  8944  1081  3DB8               	addwfc	(??_ReadBaud^(0+512)+2),f
  8945  1082  083D               	movf	(??_ReadBaud+7)^(0+512),w
  8946  1083  3DB9               	addwfc	(??_ReadBaud^(0+512)+3),f
  8947  1084  0839               	movf	(??_ReadBaud+3)^(0+512),w
  8948  1085  00B5               	movwf	(?_ReadBaud+3)^(0+512)
  8949  1086  0838               	movf	(??_ReadBaud+2)^(0+512),w
  8950  1087  00B4               	movwf	(?_ReadBaud+2)^(0+512)
  8951  1088  0837               	movf	(??_ReadBaud+1)^(0+512),w
  8952  1089  00B3               	movwf	(?_ReadBaud+1)^(0+512)
  8953  108A  0836               	movf	??_ReadBaud^(0+512),w
  8954  108B  00B2               	movwf	?_ReadBaud^(0+512)
  8955  108C  0008               	return
  8956  108D                     __end_of_ReadBaud:	
  8957                           
  8958                           	psect	text25
  8959  1DAD                     __ptext25:	
  8960 ;; *************** function _ReadFlash_4Byte *****************
  8961 ;; Defined at:
  8962 ;;		line 62 in file "FLASH.c"
  8963 ;; Parameters:    Size  Location     Type
  8964 ;;  row             2    5[BANK4 ] unsigned int 
  8965 ;;  column          1    7[BANK4 ] unsigned char 
  8966 ;; Auto vars:     Size  Location     Type
  8967 ;;  temp            4   14[BANK4 ] unsigned long 
  8968 ;; Return value:  Size  Location     Type
  8969 ;;                  4    5[BANK4 ] unsigned long 
  8970 ;; Registers used:
  8971 ;;		wreg, status,2, status,0, pclath, cstack
  8972 ;; Tracked objects:
  8973 ;;		On entry : 0/0
  8974 ;;		On exit  : 0/0
  8975 ;;		Unchanged: 0/0
  8976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8977 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8978 ;;      Locals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8979 ;;      Temps:          0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  8980 ;;      Totals:         0       0       0       0       0      13       0       0       0       0       0       0       
      +0       0
  8981 ;;Total ram usage:       13 bytes
  8982 ;; Hardware stack levels used:    1
  8983 ;; Hardware stack levels required when called:    8
  8984 ;; This function calls:
  8985 ;;		_ReadFlash_2Byte
  8986 ;; This function is called by:
  8987 ;;		_ReadBaud
  8988 ;; This function uses a non-reentrant model
  8989 ;;
  8990                           
  8991                           
  8992                           ;psect for function _ReadFlash_4Byte
  8993  1DAD                     _ReadFlash_4Byte:	
  8994                           
  8995                           ;FLASH.c: 64: unsigned long temp =0;
  8996                           
  8997                           ;incstack = 0
  8998                           ; Regs used in _ReadFlash_4Byte: [wreg+status,2+status,0+pclath+cstack]
  8999  1DAD  3000               	movlw	0
  9000  1DAE  0024               	movlb	4	; select bank4
  9001  1DAF  00B1               	movwf	(ReadFlash_4Byte@temp+3)^(0+512)
  9002  1DB0  3000               	movlw	0
  9003  1DB1  00B0               	movwf	(ReadFlash_4Byte@temp+2)^(0+512)
  9004  1DB2  3000               	movlw	0
  9005  1DB3  00AF               	movwf	(ReadFlash_4Byte@temp+1)^(0+512)
  9006  1DB4  3000               	movlw	0
  9007  1DB5  00AE               	movwf	ReadFlash_4Byte@temp^(0+512)
  9008                           
  9009                           ;FLASH.c: 65: temp = ((unsigned long)ReadFlash_2Byte(row, column) << 16);
  9010  1DB6  0826               	movf	(ReadFlash_4Byte@row+1)^(0+512),w
  9011  1DB7  00A1               	movwf	(ReadFlash_2Byte@row+1)^(0+512)
  9012  1DB8  0825               	movf	ReadFlash_4Byte@row^(0+512),w
  9013  1DB9  00A0               	movwf	ReadFlash_2Byte@row^(0+512)
  9014  1DBA  0827               	movf	ReadFlash_4Byte@column^(0+512),w
  9015  1DBB  00A9               	movwf	??_ReadFlash_4Byte^(0+512)
  9016  1DBC  0829               	movf	??_ReadFlash_4Byte^(0+512),w
  9017  1DBD  00A2               	movwf	ReadFlash_2Byte@column^(0+512)
  9018  1DBE  319B  2354  319D   	fcall	_ReadFlash_2Byte
  9019  1DC1  0024               	movlb	4	; select bank4
  9020  1DC2  0820               	movf	?_ReadFlash_2Byte^(0+512),w
  9021  1DC3  00AA               	movwf	(??_ReadFlash_4Byte+1)^(0+512)
  9022  1DC4  0821               	movf	(?_ReadFlash_2Byte+1)^(0+512),w
  9023  1DC5  00AB               	movwf	((??_ReadFlash_4Byte+1)^(0+512)+1)
  9024  1DC6  01AC               	clrf	((??_ReadFlash_4Byte+1)^(0+512)+2)
  9025  1DC7  01AD               	clrf	((??_ReadFlash_4Byte+1)^(0+512)+3)
  9026  1DC8  3010               	movlw	16
  9027  1DC9                     u8435:	
  9028  1DC9  35AA               	lslf	(??_ReadFlash_4Byte+1)^(0+512),f
  9029  1DCA  0DAB               	rlf	((??_ReadFlash_4Byte+1)^(0+512)+1),f
  9030  1DCB  0DAC               	rlf	((??_ReadFlash_4Byte+1)^(0+512)+2),f
  9031  1DCC  0DAD               	rlf	((??_ReadFlash_4Byte+1)^(0+512)+3),f
  9032  1DCD  0B89               	decfsz	9,f
  9033  1DCE  2DC9               	goto	u8435
  9034  1DCF  082D               	movf	(??_ReadFlash_4Byte+4)^(0+512),w
  9035  1DD0  00B1               	movwf	(ReadFlash_4Byte@temp+3)^(0+512)
  9036  1DD1  082C               	movf	(??_ReadFlash_4Byte+3)^(0+512),w
  9037  1DD2  00B0               	movwf	(ReadFlash_4Byte@temp+2)^(0+512)
  9038  1DD3  082B               	movf	(??_ReadFlash_4Byte+2)^(0+512),w
  9039  1DD4  00AF               	movwf	(ReadFlash_4Byte@temp+1)^(0+512)
  9040  1DD5  082A               	movf	(??_ReadFlash_4Byte+1)^(0+512),w
  9041  1DD6  00AE               	movwf	ReadFlash_4Byte@temp^(0+512)
  9042                           
  9043                           ;FLASH.c: 66: temp |= ((unsigned long)ReadFlash_2Byte(row, (column + 1)));
  9044  1DD7  0826               	movf	(ReadFlash_4Byte@row+1)^(0+512),w
  9045  1DD8  00A1               	movwf	(ReadFlash_2Byte@row+1)^(0+512)
  9046  1DD9  0825               	movf	ReadFlash_4Byte@row^(0+512),w
  9047  1DDA  00A0               	movwf	ReadFlash_2Byte@row^(0+512)
  9048  1DDB  0827               	movf	ReadFlash_4Byte@column^(0+512),w
  9049  1DDC  3E01               	addlw	1
  9050  1DDD  00A9               	movwf	??_ReadFlash_4Byte^(0+512)
  9051  1DDE  0829               	movf	??_ReadFlash_4Byte^(0+512),w
  9052  1DDF  00A2               	movwf	ReadFlash_2Byte@column^(0+512)
  9053  1DE0  319B  2354         	fcall	_ReadFlash_2Byte
  9054  1DE2  0024               	movlb	4	; select bank4
  9055  1DE3  0820               	movf	?_ReadFlash_2Byte^(0+512),w
  9056  1DE4  00AA               	movwf	(??_ReadFlash_4Byte+1)^(0+512)
  9057  1DE5  0821               	movf	(?_ReadFlash_2Byte+1)^(0+512),w
  9058  1DE6  00AB               	movwf	((??_ReadFlash_4Byte+1)^(0+512)+1)
  9059  1DE7  01AC               	clrf	((??_ReadFlash_4Byte+1)^(0+512)+2)
  9060  1DE8  01AD               	clrf	((??_ReadFlash_4Byte+1)^(0+512)+3)
  9061  1DE9  082A               	movf	(??_ReadFlash_4Byte+1)^(0+512),w
  9062  1DEA  04AE               	iorwf	ReadFlash_4Byte@temp^(0+512),f
  9063  1DEB  082B               	movf	(??_ReadFlash_4Byte+2)^(0+512),w
  9064  1DEC  04AF               	iorwf	(ReadFlash_4Byte@temp+1)^(0+512),f
  9065  1DED  082C               	movf	(??_ReadFlash_4Byte+3)^(0+512),w
  9066  1DEE  04B0               	iorwf	(ReadFlash_4Byte@temp+2)^(0+512),f
  9067  1DEF  082D               	movf	(??_ReadFlash_4Byte+4)^(0+512),w
  9068  1DF0  04B1               	iorwf	(ReadFlash_4Byte@temp+3)^(0+512),f
  9069                           
  9070                           ;FLASH.c: 67: return temp;
  9071  1DF1  0831               	movf	(ReadFlash_4Byte@temp+3)^(0+512),w
  9072  1DF2  00A8               	movwf	(?_ReadFlash_4Byte+3)^(0+512)
  9073  1DF3  0830               	movf	(ReadFlash_4Byte@temp+2)^(0+512),w
  9074  1DF4  00A7               	movwf	(?_ReadFlash_4Byte+2)^(0+512)
  9075  1DF5  082F               	movf	(ReadFlash_4Byte@temp+1)^(0+512),w
  9076  1DF6  00A6               	movwf	(?_ReadFlash_4Byte+1)^(0+512)
  9077  1DF7  082E               	movf	ReadFlash_4Byte@temp^(0+512),w
  9078  1DF8  00A5               	movwf	?_ReadFlash_4Byte^(0+512)
  9079  1DF9  0008               	return
  9080  1DFA                     __end_of_ReadFlash_4Byte:	
  9081                           
  9082                           	psect	text26
  9083  1B54                     __ptext26:	
  9084 ;; *************** function _ReadFlash_2Byte *****************
  9085 ;; Defined at:
  9086 ;;		line 43 in file "FLASH.c"
  9087 ;; Parameters:    Size  Location     Type
  9088 ;;  row             2    0[BANK4 ] unsigned int 
  9089 ;;  column          1    2[BANK4 ] unsigned char 
  9090 ;; Auto vars:     Size  Location     Type
  9091 ;;		None
  9092 ;; Return value:  Size  Location     Type
  9093 ;;                  2    0[BANK4 ] unsigned int 
  9094 ;; Registers used:
  9095 ;;		wreg, status,2, status,0
  9096 ;; Tracked objects:
  9097 ;;		On entry : 0/0
  9098 ;;		On exit  : 0/0
  9099 ;;		Unchanged: 0/0
  9100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9101 ;;      Params:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  9102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9103 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  9104 ;;      Totals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  9105 ;;Total ram usage:        5 bytes
  9106 ;; Hardware stack levels used:    1
  9107 ;; Hardware stack levels required when called:    7
  9108 ;; This function calls:
  9109 ;;		Nothing
  9110 ;; This function is called by:
  9111 ;;		_ReadFlash_4Byte
  9112 ;; This function uses a non-reentrant model
  9113 ;;
  9114                           
  9115                           
  9116                           ;psect for function _ReadFlash_2Byte
  9117  1B54                     _ReadFlash_2Byte:	
  9118                           
  9119                           ;FLASH.c: 45: PMCON1 &= ~0b01000000;
  9120                           
  9121                           ;incstack = 0
  9122                           ; Regs used in _ReadFlash_2Byte: [wreg+status,2+status,0]
  9123  1B54  30BF               	movlw	191
  9124  1B55  0024               	movlb	4	; select bank4
  9125  1B56  00A3               	movwf	??_ReadFlash_2Byte^(0+512)
  9126  1B57  0823               	movf	??_ReadFlash_2Byte^(0+512),w
  9127  1B58  0023               	movlb	3	; select bank3
  9128  1B59  0595               	andwf	21,f	;volatile
  9129                           
  9130                           ;FLASH.c: 46: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
  9131  1B5A  0024               	movlb	4	; select bank4
  9132  1B5B  0821               	movf	(ReadFlash_2Byte@row+1)^(0+512),w
  9133  1B5C  00A4               	movwf	(??_ReadFlash_2Byte^(0+512)+1)
  9134  1B5D  0820               	movf	ReadFlash_2Byte@row^(0+512),w
  9135  1B5E  00A3               	movwf	??_ReadFlash_2Byte^(0+512)
  9136  1B5F  36A4               	lsrf	(??_ReadFlash_2Byte^(0+512)+1),f
  9137  1B60  0CA3               	rrf	??_ReadFlash_2Byte^(0+512),f
  9138  1B61  36A4               	lsrf	(??_ReadFlash_2Byte^(0+512)+1),f
  9139  1B62  0CA3               	rrf	??_ReadFlash_2Byte^(0+512),f
  9140  1B63  36A4               	lsrf	(??_ReadFlash_2Byte^(0+512)+1),f
  9141  1B64  0CA3               	rrf	??_ReadFlash_2Byte^(0+512),f
  9142  1B65  0823               	movf	??_ReadFlash_2Byte^(0+512),w
  9143  1B66  397F               	andlw	127
  9144  1B67  0023               	movlb	3	; select bank3
  9145  1B68  0092               	movwf	18	;volatile
  9146                           
  9147                           ;FLASH.c: 47: PMADRL = (unsigned char)(((row & 0x007) << 5) + column);
  9148  1B69  0024               	movlb	4	; select bank4
  9149  1B6A  0820               	movf	ReadFlash_2Byte@row^(0+512),w
  9150  1B6B  3907               	andlw	7
  9151  1B6C  00A3               	movwf	??_ReadFlash_2Byte^(0+512)
  9152  1B6D  3004               	movlw	4
  9153  1B6E                     u8035:	
  9154  1B6E  35A3               	lslf	??_ReadFlash_2Byte^(0+512),f
  9155  1B6F  3EFF               	addlw	-1
  9156  1B70  1D03               	skipz
  9157  1B71  2B6E               	goto	u8035
  9158  1B72  3523               	lslf	??_ReadFlash_2Byte^(0+512),w
  9159  1B73  0722               	addwf	ReadFlash_2Byte@column^(0+512),w
  9160  1B74  0023               	movlb	3	; select bank3
  9161  1B75  0091               	movwf	17	;volatile
  9162                           
  9163                           ;FLASH.c: 48: PMCON1 |= 0b00000001;
  9164  1B76  1415               	bsf	21,0	;volatile
  9165  1B77                     l954:	
  9166                           ;FLASH.c: 49: while(PMCON1 & 0b00000001);
  9167                           
  9168  1B77  1815               	btfsc	21,0	;volatile
  9169  1B78  2B77               	goto	l954
  9170                           
  9171                           ;FLASH.c: 50: __nop();
  9172  1B79  0000               	nop
  9173                           
  9174                           ;FLASH.c: 51: __nop();
  9175  1B7A  0000               	nop
  9176                           
  9177                           ;FLASH.c: 52: return (PMDATL | (PMDATH << 8));
  9178  1B7B  0023               	movlb	3	; select bank3
  9179  1B7C  0814               	movf	20,w	;volatile
  9180  1B7D  0024               	movlb	4	; select bank4
  9181  1B7E  00A1               	movwf	(?_ReadFlash_2Byte+1)^(0+512)
  9182  1B7F  0023               	movlb	3	; select bank3
  9183  1B80  0813               	movf	19,w	;volatile
  9184  1B81  0024               	movlb	4	; select bank4
  9185  1B82  00A0               	movwf	?_ReadFlash_2Byte^(0+512)
  9186  1B83  0008               	return
  9187  1B84                     __end_of_ReadFlash_2Byte:	
  9188                           
  9189                           	psect	text27
  9190  1449                     __ptext27:	
  9191 ;; *************** function _InitUART *****************
  9192 ;; Defined at:
  9193 ;;		line 78 in file "UART.c"
  9194 ;; Parameters:    Size  Location     Type
  9195 ;;  Baud            4   14[BANK4 ] unsigned long 
  9196 ;;  parity          1   18[BANK4 ] unsigned char 
  9197 ;; Auto vars:     Size  Location     Type
  9198 ;;  temp            4   31[BANK4 ] unsigned long 
  9199 ;;  spbrg           2   27[BANK4 ] unsigned int 
  9200 ;;  config          1   30[BANK4 ] unsigned char 
  9201 ;;  baudconfig      1   29[BANK4 ] unsigned char 
  9202 ;; Return value:  Size  Location     Type
  9203 ;;		None               void
  9204 ;; Registers used:
  9205 ;;		wreg, status,2, status,0, pclath, cstack
  9206 ;; Tracked objects:
  9207 ;;		On entry : 0/0
  9208 ;;		On exit  : 0/0
  9209 ;;		Unchanged: 0/0
  9210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9211 ;;      Params:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  9212 ;;      Locals:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  9213 ;;      Temps:          0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  9214 ;;      Totals:         0       0       0       0       0      21       0       0       0       0       0       0       
      +0       0
  9215 ;;Total ram usage:       21 bytes
  9216 ;; Hardware stack levels used:    1
  9217 ;; Hardware stack levels required when called:    8
  9218 ;; This function calls:
  9219 ;;		_CloseUSART
  9220 ;;		_OpenUSART
  9221 ;;		_ReadUSART
  9222 ;;		___lldiv
  9223 ;;		_baudUSART
  9224 ;; This function is called by:
  9225 ;;		_Init_System
  9226 ;; This function uses a non-reentrant model
  9227 ;;
  9228                           
  9229                           
  9230                           ;psect for function _InitUART
  9231  1449                     _InitUART:	
  9232                           
  9233                           ;UART.c: 80: unsigned long temp;
  9234                           ;UART.c: 81: unsigned char config;
  9235                           ;UART.c: 82: unsigned int spbrg;
  9236                           ;UART.c: 83: unsigned char baudconfig;
  9237                           ;UART.c: 93: LATC |= 0b00000100;
  9238                           
  9239                           ;incstack = 0
  9240                           ; Regs used in _InitUART: [wreg+status,2+status,0+pclath+cstack]
  9241  1449  0022               	movlb	2	; select bank2
  9242  144A  150E               	bsf	14,2	;volatile
  9243                           
  9244                           ;UART.c: 94: PPSLOCK =0;
  9245  144B  003C               	movlb	28	; select bank28
  9246  144C  018F               	clrf	15	;volatile
  9247                           
  9248                           ;UART.c: 95: RC2PPS = 0b00000000;
  9249  144D  003D               	movlb	29	; select bank29
  9250  144E  01A2               	clrf	34	;volatile
  9251                           
  9252                           ;UART.c: 96: PPSLOCK =1;
  9253  144F  3001               	movlw	1
  9254  1450  003C               	movlb	28	; select bank28
  9255  1451  008F               	movwf	15	;volatile
  9256                           
  9257                           ;UART.c: 98: CloseUSART();
  9258  1452  3199  210B  3194   	fcall	_CloseUSART
  9259                           
  9260                           ;UART.c: 99: config =0;
  9261  1455  0024               	movlb	4	; select bank4
  9262  1456  01BE               	clrf	InitUART@config^(0+512)
  9263                           
  9264                           ;UART.c: 100: baudconfig =0;
  9265  1457  01BD               	clrf	InitUART@baudconfig^(0+512)
  9266                           
  9267                           ;UART.c: 105: config |= 0b00001000;
  9268  1458  15BE               	bsf	InitUART@config^(0+512),3
  9269                           
  9270                           ;UART.c: 106: config |= 0b00010000;
  9271  1459  163E               	bsf	InitUART@config^(0+512),4
  9272                           
  9273                           ;UART.c: 107: PARITY = parity;
  9274  145A  0832               	movf	InitUART@parity^(0+512),w
  9275  145B  00B3               	movwf	??_InitUART^(0+512)
  9276  145C  0833               	movf	??_InitUART^(0+512),w
  9277  145D  00E1               	movwf	_PARITY^(0+512)
  9278                           
  9279                           ;UART.c: 108: BAUD = Baud;
  9280  145E  0831               	movf	(InitUART@Baud+3)^(0+512),w
  9281  145F  00E5               	movwf	(_BAUD+3)^(0+512)
  9282  1460  0830               	movf	(InitUART@Baud+2)^(0+512),w
  9283  1461  00E4               	movwf	(_BAUD+2)^(0+512)
  9284  1462  082F               	movf	(InitUART@Baud+1)^(0+512),w
  9285  1463  00E3               	movwf	(_BAUD+1)^(0+512)
  9286  1464  082E               	movf	InitUART@Baud^(0+512),w
  9287  1465  00E2               	movwf	_BAUD^(0+512)
  9288                           
  9289                           ;UART.c: 109: if(parity)
  9290  1466  0832               	movf	InitUART@parity^(0+512),w
  9291  1467  1903               	btfsc	3,2
  9292  1468  2C6B               	goto	l6636
  9293                           
  9294                           ;UART.c: 110: {
  9295                           ;UART.c: 111: config |= 0b00000010;
  9296  1469  14BE               	bsf	InitUART@config^(0+512),1
  9297                           
  9298                           ;UART.c: 112: }
  9299  146A  2C6F               	goto	l6638
  9300  146B                     l6636:	
  9301                           
  9302                           ;UART.c: 113: else
  9303                           ;UART.c: 114: {
  9304                           ;UART.c: 115: config &= ~0b00000010;
  9305  146B  30FD               	movlw	253
  9306  146C  00B3               	movwf	??_InitUART^(0+512)
  9307  146D  0833               	movf	??_InitUART^(0+512),w
  9308  146E  05BE               	andwf	InitUART@config^(0+512),f
  9309  146F                     l6638:	
  9310                           
  9311                           ;UART.c: 116: }
  9312                           ;UART.c: 117: baudconfig |= 0b00001000;
  9313  146F  15BD               	bsf	InitUART@baudconfig^(0+512),3
  9314                           
  9315                           ;UART.c: 120: temp = (32000000L / Baud) - 1;
  9316  1470  0831               	movf	(InitUART@Baud+3)^(0+512),w
  9317  1471  00A3               	movwf	(___lldiv@divisor+3)^(0+512)
  9318  1472  0830               	movf	(InitUART@Baud+2)^(0+512),w
  9319  1473  00A2               	movwf	(___lldiv@divisor+2)^(0+512)
  9320  1474  082F               	movf	(InitUART@Baud+1)^(0+512),w
  9321  1475  00A1               	movwf	(___lldiv@divisor+1)^(0+512)
  9322  1476  082E               	movf	InitUART@Baud^(0+512),w
  9323  1477  00A0               	movwf	___lldiv@divisor^(0+512)
  9324  1478  3001               	movlw	1
  9325  1479  00A7               	movwf	(___lldiv@dividend+3)^(0+512)
  9326  147A  30E8               	movlw	232
  9327  147B  00A6               	movwf	(___lldiv@dividend+2)^(0+512)
  9328  147C  3048               	movlw	72
  9329  147D  00A5               	movwf	(___lldiv@dividend+1)^(0+512)
  9330  147E  3000               	movlw	0
  9331  147F  00A4               	movwf	___lldiv@dividend^(0+512)
  9332  1480  319E  269A  3194   	fcall	___lldiv
  9333  1483  30FF               	movlw	255
  9334  1484  0024               	movlb	4	; select bank4
  9335  1485  0720               	addwf	?___lldiv^(0+512),w
  9336  1486  00BF               	movwf	InitUART@temp^(0+512)
  9337  1487  30FF               	movlw	255
  9338  1488  3D21               	addwfc	(?___lldiv+1)^(0+512),w
  9339  1489  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9340  148A  30FF               	movlw	255
  9341  148B  3D22               	addwfc	(?___lldiv+2)^(0+512),w
  9342  148C  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9343  148D  30FF               	movlw	255
  9344  148E  3D23               	addwfc	(?___lldiv+3)^(0+512),w
  9345  148F  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9346                           
  9347                           ;UART.c: 121: temp = (temp >> 2) - 1;
  9348  1490  30FF               	movlw	255
  9349  1491  00B3               	movwf	??_InitUART^(0+512)
  9350  1492  30FF               	movlw	255
  9351  1493  00B4               	movwf	(??_InitUART^(0+512)+1)
  9352  1494  30FF               	movlw	255
  9353  1495  00B5               	movwf	(??_InitUART^(0+512)+2)
  9354  1496  30FF               	movlw	255
  9355  1497  00B6               	movwf	(??_InitUART^(0+512)+3)
  9356  1498  083F               	movf	InitUART@temp^(0+512),w
  9357  1499  00B7               	movwf	(??_InitUART+4)^(0+512)
  9358  149A  0840               	movf	(InitUART@temp+1)^(0+512),w
  9359  149B  00B8               	movwf	((??_InitUART+4)^(0+512)+1)
  9360  149C  0841               	movf	(InitUART@temp+2)^(0+512),w
  9361  149D  00B9               	movwf	((??_InitUART+4)^(0+512)+2)
  9362  149E  0842               	movf	(InitUART@temp+3)^(0+512),w
  9363  149F  00BA               	movwf	((??_InitUART+4)^(0+512)+3)
  9364  14A0  3002               	movlw	2
  9365  14A1                     u8695:	
  9366  14A1  36BA               	lsrf	((??_InitUART+4)^(0+512)+3),f
  9367  14A2  0CB9               	rrf	((??_InitUART+4)^(0+512)+2),f
  9368  14A3  0CB8               	rrf	((??_InitUART+4)^(0+512)+1),f
  9369  14A4  0CB7               	rrf	(??_InitUART+4)^(0+512),f
  9370  14A5  0B89               	decfsz	9,f
  9371  14A6  2CA1               	goto	u8695
  9372  14A7  0837               	movf	(??_InitUART+4)^(0+512),w
  9373  14A8  07B3               	addwf	??_InitUART^(0+512),f
  9374  14A9  0838               	movf	(??_InitUART+5)^(0+512),w
  9375  14AA  3DB4               	addwfc	(??_InitUART^(0+512)+1),f
  9376  14AB  0839               	movf	(??_InitUART+6)^(0+512),w
  9377  14AC  3DB5               	addwfc	(??_InitUART^(0+512)+2),f
  9378  14AD  083A               	movf	(??_InitUART+7)^(0+512),w
  9379  14AE  3DB6               	addwfc	(??_InitUART^(0+512)+3),f
  9380  14AF  0836               	movf	(??_InitUART+3)^(0+512),w
  9381  14B0  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9382  14B1  0835               	movf	(??_InitUART+2)^(0+512),w
  9383  14B2  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9384  14B3  0834               	movf	(??_InitUART+1)^(0+512),w
  9385  14B4  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9386  14B5  0833               	movf	??_InitUART^(0+512),w
  9387  14B6  00BF               	movwf	InitUART@temp^(0+512)
  9388                           
  9389                           ;UART.c: 122: spbrg = (unsigned int)temp;
  9390  14B7  0840               	movf	(InitUART@temp+1)^(0+512),w
  9391  14B8  00BC               	movwf	(InitUART@spbrg+1)^(0+512)
  9392  14B9  083F               	movf	InitUART@temp^(0+512),w
  9393  14BA  00BB               	movwf	InitUART@spbrg^(0+512)
  9394                           
  9395                           ;UART.c: 124: RCSTAbits.CREN = 0;
  9396  14BB  0023               	movlb	3	; select bank3
  9397  14BC  121D               	bcf	29,4	;volatile
  9398                           
  9399                           ;UART.c: 125: OpenUSART(config, spbrg);
  9400  14BD  0024               	movlb	4	; select bank4
  9401  14BE  083C               	movf	(InitUART@spbrg+1)^(0+512),w
  9402  14BF  00A1               	movwf	(OpenUSART@spbrg+1)^(0+512)
  9403  14C0  083B               	movf	InitUART@spbrg^(0+512),w
  9404  14C1  00A0               	movwf	OpenUSART@spbrg^(0+512)
  9405  14C2  083E               	movf	InitUART@config^(0+512),w
  9406  14C3  319C  249A  3194   	fcall	_OpenUSART
  9407                           
  9408                           ;UART.c: 126: baudUSART(baudconfig);
  9409  14C6  0024               	movlb	4	; select bank4
  9410  14C7  083D               	movf	InitUART@baudconfig^(0+512),w
  9411  14C8  3198  2093  3194   	fcall	_baudUSART
  9412                           
  9413                           ;UART.c: 127: temp = ReadUSART();
  9414  14CB  3198  20B0  3194   	fcall	_ReadUSART
  9415  14CE  0024               	movlb	4	; select bank4
  9416  14CF  00B3               	movwf	??_InitUART^(0+512)
  9417  14D0  01B4               	clrf	(??_InitUART^(0+512)+1)
  9418  14D1  01B5               	clrf	(??_InitUART^(0+512)+2)
  9419  14D2  01B6               	clrf	(??_InitUART^(0+512)+3)
  9420  14D3  0836               	movf	(??_InitUART+3)^(0+512),w
  9421  14D4  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9422  14D5  0835               	movf	(??_InitUART+2)^(0+512),w
  9423  14D6  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9424  14D7  0834               	movf	(??_InitUART+1)^(0+512),w
  9425  14D8  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9426  14D9  0833               	movf	??_InitUART^(0+512),w
  9427  14DA  00BF               	movwf	InitUART@temp^(0+512)
  9428                           
  9429                           ;UART.c: 128: temp = ReadUSART();
  9430  14DB  3198  20B0  3194   	fcall	_ReadUSART
  9431  14DE  0024               	movlb	4	; select bank4
  9432  14DF  00B3               	movwf	??_InitUART^(0+512)
  9433  14E0  01B4               	clrf	(??_InitUART^(0+512)+1)
  9434  14E1  01B5               	clrf	(??_InitUART^(0+512)+2)
  9435  14E2  01B6               	clrf	(??_InitUART^(0+512)+3)
  9436  14E3  0836               	movf	(??_InitUART+3)^(0+512),w
  9437  14E4  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9438  14E5  0835               	movf	(??_InitUART+2)^(0+512),w
  9439  14E6  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9440  14E7  0834               	movf	(??_InitUART+1)^(0+512),w
  9441  14E8  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9442  14E9  0833               	movf	??_InitUART^(0+512),w
  9443  14EA  00BF               	movwf	InitUART@temp^(0+512)
  9444                           
  9445                           ;UART.c: 129: temp = ReadUSART();
  9446  14EB  3198  20B0  3194   	fcall	_ReadUSART
  9447  14EE  0024               	movlb	4	; select bank4
  9448  14EF  00B3               	movwf	??_InitUART^(0+512)
  9449  14F0  01B4               	clrf	(??_InitUART^(0+512)+1)
  9450  14F1  01B5               	clrf	(??_InitUART^(0+512)+2)
  9451  14F2  01B6               	clrf	(??_InitUART^(0+512)+3)
  9452  14F3  0836               	movf	(??_InitUART+3)^(0+512),w
  9453  14F4  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9454  14F5  0835               	movf	(??_InitUART+2)^(0+512),w
  9455  14F6  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9456  14F7  0834               	movf	(??_InitUART+1)^(0+512),w
  9457  14F8  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9458  14F9  0833               	movf	??_InitUART^(0+512),w
  9459  14FA  00BF               	movwf	InitUART@temp^(0+512)
  9460                           
  9461                           ;UART.c: 130: temp = ReadUSART();
  9462  14FB  3198  20B0  3194   	fcall	_ReadUSART
  9463  14FE  0024               	movlb	4	; select bank4
  9464  14FF  00B3               	movwf	??_InitUART^(0+512)
  9465  1500  01B4               	clrf	(??_InitUART^(0+512)+1)
  9466  1501  01B5               	clrf	(??_InitUART^(0+512)+2)
  9467  1502  01B6               	clrf	(??_InitUART^(0+512)+3)
  9468  1503  0836               	movf	(??_InitUART+3)^(0+512),w
  9469  1504  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9470  1505  0835               	movf	(??_InitUART+2)^(0+512),w
  9471  1506  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9472  1507  0834               	movf	(??_InitUART+1)^(0+512),w
  9473  1508  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9474  1509  0833               	movf	??_InitUART^(0+512),w
  9475  150A  00BF               	movwf	InitUART@temp^(0+512)
  9476                           
  9477                           ;UART.c: 131: temp = ReadUSART();
  9478  150B  3198  20B0         	fcall	_ReadUSART
  9479  150D  0024               	movlb	4	; select bank4
  9480  150E  00B3               	movwf	??_InitUART^(0+512)
  9481  150F  01B4               	clrf	(??_InitUART^(0+512)+1)
  9482  1510  01B5               	clrf	(??_InitUART^(0+512)+2)
  9483  1511  01B6               	clrf	(??_InitUART^(0+512)+3)
  9484  1512  0836               	movf	(??_InitUART+3)^(0+512),w
  9485  1513  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9486  1514  0835               	movf	(??_InitUART+2)^(0+512),w
  9487  1515  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9488  1516  0834               	movf	(??_InitUART+1)^(0+512),w
  9489  1517  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9490  1518  0833               	movf	??_InitUART^(0+512),w
  9491  1519  00BF               	movwf	InitUART@temp^(0+512)
  9492                           
  9493                           ;UART.c: 133: PPSLOCK =0;
  9494  151A  003C               	movlb	28	; select bank28
  9495  151B  018F               	clrf	15	;volatile
  9496                           
  9497                           ;UART.c: 134: RC2PPS = 0b00010100;
  9498  151C  3014               	movlw	20
  9499  151D  003D               	movlb	29	; select bank29
  9500  151E  00A2               	movwf	34	;volatile
  9501                           
  9502                           ;UART.c: 135: CKPPS = 0b00010010;
  9503  151F  3012               	movlw	18
  9504  1520  003C               	movlb	28	; select bank28
  9505  1521  00A5               	movwf	37	;volatile
  9506                           
  9507                           ;UART.c: 137: RXPPS = 0b00010101;
  9508  1522  3015               	movlw	21
  9509  1523  00A4               	movwf	36	;volatile
  9510                           
  9511                           ;UART.c: 139: PPSLOCK =1;
  9512  1524  3001               	movlw	1
  9513  1525  008F               	movwf	15	;volatile
  9514                           
  9515                           ;UART.c: 141: PIR1bits.RCIF = 0;
  9516  1526  0020               	movlb	0	; select bank0
  9517  1527  1291               	bcf	17,5	;volatile
  9518                           
  9519                           ;UART.c: 142: INTCONbits.PEIE = 1;
  9520  1528  170B               	bsf	11,6	;volatile
  9521  1529  0008               	return
  9522  152A                     __end_of_InitUART:	
  9523                           
  9524                           	psect	text28
  9525  1893                     __ptext28:	
  9526 ;; *************** function _baudUSART *****************
  9527 ;; Defined at:
  9528 ;;		line 150 in file "UART.c"
  9529 ;; Parameters:    Size  Location     Type
  9530 ;;  baudconfig      1    wreg     unsigned char 
  9531 ;; Auto vars:     Size  Location     Type
  9532 ;;  baudconfig      1    0[BANK4 ] unsigned char 
  9533 ;; Return value:  Size  Location     Type
  9534 ;;		None               void
  9535 ;; Registers used:
  9536 ;;		wreg, status,2
  9537 ;; Tracked objects:
  9538 ;;		On entry : 0/0
  9539 ;;		On exit  : 0/0
  9540 ;;		Unchanged: 0/0
  9541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9543 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9545 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9546 ;;Total ram usage:        1 bytes
  9547 ;; Hardware stack levels used:    1
  9548 ;; Hardware stack levels required when called:    7
  9549 ;; This function calls:
  9550 ;;		Nothing
  9551 ;; This function is called by:
  9552 ;;		_InitUART
  9553 ;; This function uses a non-reentrant model
  9554 ;;
  9555                           
  9556                           
  9557                           ;psect for function _baudUSART
  9558  1893                     _baudUSART:	
  9559                           
  9560                           ;incstack = 0
  9561                           ; Regs used in _baudUSART: [wreg+status,2]
  9562                           ;baudUSART@baudconfig stored from wreg
  9563  1893  0024               	movlb	4	; select bank4
  9564  1894  00A0               	movwf	baudUSART@baudconfig^(0+512)
  9565                           
  9566                           ;UART.c: 152: BAUD1CON =0;
  9567  1895  0023               	movlb	3	; select bank3
  9568  1896  019F               	clrf	31	;volatile
  9569                           
  9570                           ;UART.c: 153: BAUD1CON = baudconfig;
  9571  1897  0024               	movlb	4	; select bank4
  9572  1898  0820               	movf	baudUSART@baudconfig^(0+512),w
  9573  1899  0023               	movlb	3	; select bank3
  9574  189A  009F               	movwf	31	;volatile
  9575  189B  0008               	return
  9576  189C                     __end_of_baudUSART:	
  9577                           
  9578                           	psect	text29
  9579  1E9A                     __ptext29:	
  9580 ;; *************** function ___lldiv *****************
  9581 ;; Defined at:
  9582 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  9583 ;; Parameters:    Size  Location     Type
  9584 ;;  divisor         4    0[BANK4 ] unsigned long 
  9585 ;;  dividend        4    4[BANK4 ] unsigned long 
  9586 ;; Auto vars:     Size  Location     Type
  9587 ;;  quotient        4    9[BANK4 ] unsigned long 
  9588 ;;  counter         1   13[BANK4 ] unsigned char 
  9589 ;; Return value:  Size  Location     Type
  9590 ;;                  4    0[BANK4 ] unsigned long 
  9591 ;; Registers used:
  9592 ;;		wreg, status,2, status,0
  9593 ;; Tracked objects:
  9594 ;;		On entry : 0/0
  9595 ;;		On exit  : 0/0
  9596 ;;		Unchanged: 0/0
  9597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9598 ;;      Params:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  9599 ;;      Locals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  9600 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9601 ;;      Totals:         0       0       0       0       0      14       0       0       0       0       0       0       
      +0       0
  9602 ;;Total ram usage:       14 bytes
  9603 ;; Hardware stack levels used:    1
  9604 ;; Hardware stack levels required when called:    7
  9605 ;; This function calls:
  9606 ;;		Nothing
  9607 ;; This function is called by:
  9608 ;;		_InitUART
  9609 ;; This function uses a non-reentrant model
  9610 ;;
  9611                           
  9612                           
  9613                           ;psect for function ___lldiv
  9614  1E9A                     ___lldiv:	
  9615                           
  9616                           ;incstack = 0
  9617                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  9618  1E9A  3000               	movlw	0
  9619  1E9B  0024               	movlb	4	; select bank4
  9620  1E9C  00AC               	movwf	(___lldiv@quotient+3)^(0+512)
  9621  1E9D  3000               	movlw	0
  9622  1E9E  00AB               	movwf	(___lldiv@quotient+2)^(0+512)
  9623  1E9F  3000               	movlw	0
  9624  1EA0  00AA               	movwf	(___lldiv@quotient+1)^(0+512)
  9625  1EA1  3000               	movlw	0
  9626  1EA2  00A9               	movwf	___lldiv@quotient^(0+512)
  9627  1EA3  0823               	movf	(___lldiv@divisor+3)^(0+512),w
  9628  1EA4  0422               	iorwf	(___lldiv@divisor+2)^(0+512),w
  9629  1EA5  0421               	iorwf	(___lldiv@divisor+1)^(0+512),w
  9630  1EA6  0420               	iorwf	___lldiv@divisor^(0+512),w
  9631  1EA7  1903               	skipnz
  9632  1EA8  2EE4               	goto	l6590
  9633  1EA9  01AD               	clrf	___lldiv@counter^(0+512)
  9634  1EAA  0AAD               	incf	___lldiv@counter^(0+512),f
  9635  1EAB                     l6576:	
  9636  1EAB  1BA3               	btfsc	(___lldiv@divisor+3)^(0+512),7
  9637  1EAC  2EB9               	goto	l6578
  9638  1EAD  3001               	movlw	1
  9639  1EAE                     u8575:	
  9640  1EAE  35A0               	lslf	___lldiv@divisor^(0+512),f
  9641  1EAF  0DA1               	rlf	(___lldiv@divisor+1)^(0+512),f
  9642  1EB0  0DA2               	rlf	(___lldiv@divisor+2)^(0+512),f
  9643  1EB1  0DA3               	rlf	(___lldiv@divisor+3)^(0+512),f
  9644  1EB2  0B89               	decfsz	9,f
  9645  1EB3  2EAE               	goto	u8575
  9646  1EB4  3001               	movlw	1
  9647  1EB5  00A8               	movwf	??___lldiv^(0+512)
  9648  1EB6  0828               	movf	??___lldiv^(0+512),w
  9649  1EB7  07AD               	addwf	___lldiv@counter^(0+512),f
  9650  1EB8  2EAB               	goto	l6576
  9651  1EB9                     l6578:	
  9652  1EB9  3001               	movlw	1
  9653  1EBA                     u8595:	
  9654  1EBA  35A9               	lslf	___lldiv@quotient^(0+512),f
  9655  1EBB  0DAA               	rlf	(___lldiv@quotient+1)^(0+512),f
  9656  1EBC  0DAB               	rlf	(___lldiv@quotient+2)^(0+512),f
  9657  1EBD  0DAC               	rlf	(___lldiv@quotient+3)^(0+512),f
  9658  1EBE  0B89               	decfsz	9,f
  9659  1EBF  2EBA               	goto	u8595
  9660  1EC0  0823               	movf	(___lldiv@divisor+3)^(0+512),w
  9661  1EC1  0227               	subwf	(___lldiv@dividend+3)^(0+512),w
  9662  1EC2  1D03               	skipz
  9663  1EC3  2ECE               	goto	u8605
  9664  1EC4  0822               	movf	(___lldiv@divisor+2)^(0+512),w
  9665  1EC5  0226               	subwf	(___lldiv@dividend+2)^(0+512),w
  9666  1EC6  1D03               	skipz
  9667  1EC7  2ECE               	goto	u8605
  9668  1EC8  0821               	movf	(___lldiv@divisor+1)^(0+512),w
  9669  1EC9  0225               	subwf	(___lldiv@dividend+1)^(0+512),w
  9670  1ECA  1D03               	skipz
  9671  1ECB  2ECE               	goto	u8605
  9672  1ECC  0820               	movf	___lldiv@divisor^(0+512),w
  9673  1ECD  0224               	subwf	___lldiv@dividend^(0+512),w
  9674  1ECE                     u8605:	
  9675  1ECE  1C03               	skipc
  9676  1ECF  2ED9               	goto	l6586
  9677  1ED0  0820               	movf	___lldiv@divisor^(0+512),w
  9678  1ED1  02A4               	subwf	___lldiv@dividend^(0+512),f
  9679  1ED2  0821               	movf	(___lldiv@divisor+1)^(0+512),w
  9680  1ED3  3BA5               	subwfb	(___lldiv@dividend+1)^(0+512),f
  9681  1ED4  0822               	movf	(___lldiv@divisor+2)^(0+512),w
  9682  1ED5  3BA6               	subwfb	(___lldiv@dividend+2)^(0+512),f
  9683  1ED6  0823               	movf	(___lldiv@divisor+3)^(0+512),w
  9684  1ED7  3BA7               	subwfb	(___lldiv@dividend+3)^(0+512),f
  9685  1ED8  1429               	bsf	___lldiv@quotient^(0+512),0
  9686  1ED9                     l6586:	
  9687  1ED9  3001               	movlw	1
  9688  1EDA                     u8615:	
  9689  1EDA  36A3               	lsrf	(___lldiv@divisor+3)^(0+512),f
  9690  1EDB  0CA2               	rrf	(___lldiv@divisor+2)^(0+512),f
  9691  1EDC  0CA1               	rrf	(___lldiv@divisor+1)^(0+512),f
  9692  1EDD  0CA0               	rrf	___lldiv@divisor^(0+512),f
  9693  1EDE  0B89               	decfsz	9,f
  9694  1EDF  2EDA               	goto	u8615
  9695  1EE0  3001               	movlw	1
  9696  1EE1  02AD               	subwf	___lldiv@counter^(0+512),f
  9697  1EE2  1D03               	btfss	3,2
  9698  1EE3  2EB9               	goto	l6578
  9699  1EE4                     l6590:	
  9700  1EE4  082C               	movf	(___lldiv@quotient+3)^(0+512),w
  9701  1EE5  00A3               	movwf	(?___lldiv+3)^(0+512)
  9702  1EE6  082B               	movf	(___lldiv@quotient+2)^(0+512),w
  9703  1EE7  00A2               	movwf	(?___lldiv+2)^(0+512)
  9704  1EE8  082A               	movf	(___lldiv@quotient+1)^(0+512),w
  9705  1EE9  00A1               	movwf	(?___lldiv+1)^(0+512)
  9706  1EEA  0829               	movf	___lldiv@quotient^(0+512),w
  9707  1EEB  00A0               	movwf	?___lldiv^(0+512)
  9708  1EEC  0008               	return
  9709  1EED                     __end_of___lldiv:	
  9710                           
  9711                           	psect	text30
  9712  18B0                     __ptext30:	
  9713 ;; *************** function _ReadUSART *****************
  9714 ;; Defined at:
  9715 ;;		line 306 in file "UART.c"
  9716 ;; Parameters:    Size  Location     Type
  9717 ;;		None
  9718 ;; Auto vars:     Size  Location     Type
  9719 ;;  data            1    1[BANK4 ] unsigned char 
  9720 ;; Return value:  Size  Location     Type
  9721 ;;                  1    wreg      unsigned char 
  9722 ;; Registers used:
  9723 ;;		wreg
  9724 ;; Tracked objects:
  9725 ;;		On entry : 0/0
  9726 ;;		On exit  : 0/0
  9727 ;;		Unchanged: 0/0
  9728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9730 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9731 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9732 ;;      Totals:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  9733 ;;Total ram usage:        2 bytes
  9734 ;; Hardware stack levels used:    1
  9735 ;; Hardware stack levels required when called:    7
  9736 ;; This function calls:
  9737 ;;		Nothing
  9738 ;; This function is called by:
  9739 ;;		_InitUART
  9740 ;; This function uses a non-reentrant model
  9741 ;;
  9742                           
  9743                           
  9744                           ;psect for function _ReadUSART
  9745  18B0                     _ReadUSART:	
  9746                           
  9747                           ;UART.c: 308: char data;
  9748                           ;UART.c: 310: if(RCSTAbits.OERR)
  9749                           
  9750                           ;incstack = 0
  9751                           ; Regs used in _ReadUSART: [wreg]
  9752  18B0  0023               	movlb	3	; select bank3
  9753  18B1  189D               	btfsc	29,1	;volatile
  9754                           
  9755                           ;UART.c: 311: {
  9756                           ;UART.c: 312: RCSTAbits.CREN = 0;
  9757  18B2  121D               	bcf	29,4	;volatile
  9758                           
  9759                           ;UART.c: 313: }
  9760                           ;UART.c: 315: data = RCREG;
  9761  18B3  0819               	movf	25,w	;volatile
  9762  18B4  0024               	movlb	4	; select bank4
  9763  18B5  00A0               	movwf	??_ReadUSART^(0+512)
  9764  18B6  0820               	movf	??_ReadUSART^(0+512),w
  9765  18B7  00A1               	movwf	ReadUSART@data^(0+512)
  9766                           
  9767                           ;UART.c: 317: return (data);
  9768  18B8  0821               	movf	ReadUSART@data^(0+512),w
  9769  18B9  0008               	return
  9770  18BA                     __end_of_ReadUSART:	
  9771                           
  9772                           	psect	text31
  9773  1C9A                     __ptext31:	
  9774 ;; *************** function _OpenUSART *****************
  9775 ;; Defined at:
  9776 ;;		line 161 in file "UART.c"
  9777 ;; Parameters:    Size  Location     Type
  9778 ;;  config          1    wreg     unsigned char 
  9779 ;;  spbrg           2    0[BANK4 ] unsigned int 
  9780 ;; Auto vars:     Size  Location     Type
  9781 ;;  config          1    2[BANK4 ] unsigned char 
  9782 ;; Return value:  Size  Location     Type
  9783 ;;		None               void
  9784 ;; Registers used:
  9785 ;;		wreg, status,2
  9786 ;; Tracked objects:
  9787 ;;		On entry : 0/0
  9788 ;;		On exit  : 0/0
  9789 ;;		Unchanged: 0/0
  9790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9791 ;;      Params:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  9792 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9794 ;;      Totals:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  9795 ;;Total ram usage:        3 bytes
  9796 ;; Hardware stack levels used:    1
  9797 ;; Hardware stack levels required when called:    7
  9798 ;; This function calls:
  9799 ;;		Nothing
  9800 ;; This function is called by:
  9801 ;;		_InitUART
  9802 ;; This function uses a non-reentrant model
  9803 ;;
  9804                           
  9805                           
  9806                           ;psect for function _OpenUSART
  9807  1C9A                     _OpenUSART:	
  9808                           
  9809                           ;incstack = 0
  9810                           ; Regs used in _OpenUSART: [wreg+status,2]
  9811                           ;OpenUSART@config stored from wreg
  9812  1C9A  0024               	movlb	4	; select bank4
  9813  1C9B  00A2               	movwf	OpenUSART@config^(0+512)
  9814                           
  9815                           ;UART.c: 163: TX1STA = 0;
  9816  1C9C  0023               	movlb	3	; select bank3
  9817  1C9D  019E               	clrf	30	;volatile
  9818                           
  9819                           ;UART.c: 164: RC1STA = 0;
  9820  1C9E  019D               	clrf	29	;volatile
  9821                           
  9822                           ;UART.c: 166: if(config&0x01)
  9823  1C9F  0024               	movlb	4	; select bank4
  9824  1CA0  1C22               	btfss	OpenUSART@config^(0+512),0
  9825  1CA1  2CA4               	goto	l6342
  9826                           
  9827                           ;UART.c: 167: {
  9828                           ;UART.c: 168: TX1STAbits.SYNC = 1;
  9829  1CA2  0023               	movlb	3	; select bank3
  9830  1CA3  161E               	bsf	30,4	;volatile
  9831  1CA4                     l6342:	
  9832                           
  9833                           ;UART.c: 169: }
  9834                           ;UART.c: 171: if(config&0x02)
  9835  1CA4  0024               	movlb	4	; select bank4
  9836  1CA5  1CA2               	btfss	OpenUSART@config^(0+512),1
  9837  1CA6  2CAA               	goto	l6346
  9838                           
  9839                           ;UART.c: 172: {
  9840                           ;UART.c: 173: TX1STAbits.TX9 = 1;
  9841  1CA7  0023               	movlb	3	; select bank3
  9842  1CA8  171E               	bsf	30,6	;volatile
  9843                           
  9844                           ;UART.c: 174: RC1STAbits.RX9 = 1;
  9845  1CA9  171D               	bsf	29,6	;volatile
  9846  1CAA                     l6346:	
  9847                           
  9848                           ;UART.c: 175: }
  9849                           ;UART.c: 177: if(config&0x04)
  9850  1CAA  0024               	movlb	4	; select bank4
  9851  1CAB  1D22               	btfss	OpenUSART@config^(0+512),2
  9852  1CAC  2CAF               	goto	l6350
  9853                           
  9854                           ;UART.c: 178: {
  9855                           ;UART.c: 179: TX1STAbits.CSRC = 1;
  9856  1CAD  0023               	movlb	3	; select bank3
  9857  1CAE  179E               	bsf	30,7	;volatile
  9858  1CAF                     l6350:	
  9859                           
  9860                           ;UART.c: 180: }
  9861                           ;UART.c: 182: if(config&0x08)
  9862  1CAF  0024               	movlb	4	; select bank4
  9863  1CB0  1DA2               	btfss	OpenUSART@config^(0+512),3
  9864  1CB1  2CB5               	goto	l417
  9865                           
  9866                           ;UART.c: 183: {
  9867                           ;UART.c: 184: RC1STAbits.CREN = 1;
  9868  1CB2  0023               	movlb	3	; select bank3
  9869  1CB3  161D               	bsf	29,4	;volatile
  9870                           
  9871                           ;UART.c: 185: }
  9872  1CB4  2CB7               	goto	l6354
  9873  1CB5                     l417:	
  9874                           
  9875                           ;UART.c: 186: else
  9876                           ;UART.c: 187: {
  9877                           ;UART.c: 188: RC1STAbits.SREN = 1;
  9878  1CB5  0023               	movlb	3	; select bank3
  9879  1CB6  169D               	bsf	29,5	;volatile
  9880  1CB7                     l6354:	
  9881                           
  9882                           ;UART.c: 189: }
  9883                           ;UART.c: 191: if(config&0x10)
  9884  1CB7  0024               	movlb	4	; select bank4
  9885  1CB8  1E22               	btfss	OpenUSART@config^(0+512),4
  9886  1CB9  2CBC               	goto	l6360
  9887                           
  9888                           ;UART.c: 192: {
  9889                           ;UART.c: 193: TX1STAbits.BRGH = 1;
  9890  1CBA  0023               	movlb	3	; select bank3
  9891  1CBB  151E               	bsf	30,2	;volatile
  9892  1CBC                     l6360:	
  9893                           ;UART.c: 197: {
  9894                           
  9895                           
  9896                           ;UART.c: 199: }
  9897                           ;UART.c: 201: if(config&0x40)
  9898  1CBC  0024               	movlb	4	; select bank4
  9899  1CBD  1F22               	btfss	OpenUSART@config^(0+512),6
  9900  1CBE  2CC4               	goto	l421
  9901                           
  9902                           ;UART.c: 202: {
  9903                           ;UART.c: 203: PIR1bits.RCIF = 0;
  9904  1CBF  0020               	movlb	0	; select bank0
  9905  1CC0  1291               	bcf	17,5	;volatile
  9906                           
  9907                           ;UART.c: 204: PIE1bits.RCIE = 1;
  9908  1CC1  0021               	movlb	1	; select bank1
  9909  1CC2  1691               	bsf	17,5	;volatile
  9910                           
  9911                           ;UART.c: 206: }
  9912  1CC3  2CC6               	goto	l6364
  9913  1CC4                     l421:	
  9914                           
  9915                           ;UART.c: 207: else
  9916                           ;UART.c: 208: {
  9917                           ;UART.c: 209: PIE1bits.RCIE = 0;
  9918  1CC4  0021               	movlb	1	; select bank1
  9919  1CC5  1291               	bcf	17,5	;volatile
  9920  1CC6                     l6364:	
  9921                           
  9922                           ;UART.c: 210: }
  9923                           ;UART.c: 212: if(config&0x80)
  9924  1CC6  0024               	movlb	4	; select bank4
  9925  1CC7  1FA2               	btfss	OpenUSART@config^(0+512),7
  9926  1CC8  2CCE               	goto	l423
  9927                           
  9928                           ;UART.c: 213: {
  9929                           ;UART.c: 214: PIR1bits.TXIF = 0;
  9930  1CC9  0020               	movlb	0	; select bank0
  9931  1CCA  1211               	bcf	17,4	;volatile
  9932                           
  9933                           ;UART.c: 215: PIE1bits.TXIE = 1;
  9934  1CCB  0021               	movlb	1	; select bank1
  9935  1CCC  1611               	bsf	17,4	;volatile
  9936                           
  9937                           ;UART.c: 216: }
  9938  1CCD  2CD0               	goto	l6368
  9939  1CCE                     l423:	
  9940                           
  9941                           ;UART.c: 217: else
  9942                           ;UART.c: 218: {
  9943                           ;UART.c: 219: PIE1bits.TXIE = 0;
  9944  1CCE  0021               	movlb	1	; select bank1
  9945  1CCF  1211               	bcf	17,4	;volatile
  9946  1CD0                     l6368:	
  9947                           
  9948                           ;UART.c: 220: }
  9949                           ;UART.c: 222: SPBRG = spbrg;
  9950  1CD0  0024               	movlb	4	; select bank4
  9951  1CD1  0820               	movf	OpenUSART@spbrg^(0+512),w
  9952  1CD2  0023               	movlb	3	; select bank3
  9953  1CD3  009B               	movwf	27	;volatile
  9954                           
  9955                           ;UART.c: 223: SPBRGH = spbrg >> 8;
  9956  1CD4  0024               	movlb	4	; select bank4
  9957  1CD5  0821               	movf	(OpenUSART@spbrg+1)^(0+512),w
  9958  1CD6  0023               	movlb	3	; select bank3
  9959  1CD7  009C               	movwf	28	;volatile
  9960                           
  9961                           ;UART.c: 225: TX1STAbits.TXEN = 1;
  9962  1CD8  169E               	bsf	30,5	;volatile
  9963                           
  9964                           ;UART.c: 226: RC1STAbits.SPEN = 1;
  9965  1CD9  179D               	bsf	29,7	;volatile
  9966  1CDA  0008               	return
  9967  1CDB                     __end_of_OpenUSART:	
  9968                           
  9969                           	psect	text32
  9970  190B                     __ptext32:	
  9971 ;; *************** function _CloseUSART *****************
  9972 ;; Defined at:
  9973 ;;		line 65 in file "UART.c"
  9974 ;; Parameters:    Size  Location     Type
  9975 ;;		None
  9976 ;; Auto vars:     Size  Location     Type
  9977 ;;		None
  9978 ;; Return value:  Size  Location     Type
  9979 ;;		None               void
  9980 ;; Registers used:
  9981 ;;		wreg, status,2, status,0
  9982 ;; Tracked objects:
  9983 ;;		On entry : 0/0
  9984 ;;		On exit  : 0/0
  9985 ;;		Unchanged: 0/0
  9986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9989 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9990 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9991 ;;Total ram usage:        1 bytes
  9992 ;; Hardware stack levels used:    1
  9993 ;; Hardware stack levels required when called:    7
  9994 ;; This function calls:
  9995 ;;		Nothing
  9996 ;; This function is called by:
  9997 ;;		_InitUART
  9998 ;; This function uses a non-reentrant model
  9999 ;;
 10000                           
 10001                           
 10002                           ;psect for function _CloseUSART
 10003  190B                     _CloseUSART:	
 10004                           
 10005                           ;UART.c: 67: RCSTA&=0b01001111;
 10006                           
 10007                           ;incstack = 0
 10008                           ; Regs used in _CloseUSART: [wreg+status,2+status,0]
 10009  190B  304F               	movlw	79
 10010  190C  0024               	movlb	4	; select bank4
 10011  190D  00A0               	movwf	??_CloseUSART^(0+512)
 10012  190E  0820               	movf	??_CloseUSART^(0+512),w
 10013  190F  0023               	movlb	3	; select bank3
 10014  1910  059D               	andwf	29,f	;volatile
 10015                           
 10016                           ;UART.c: 68: TX1STAbits.TXEN=0;
 10017  1911  129E               	bcf	30,5	;volatile
 10018                           
 10019                           ;UART.c: 69: PIE1&=0b11001111;
 10020  1912  30CF               	movlw	207
 10021  1913  0024               	movlb	4	; select bank4
 10022  1914  00A0               	movwf	??_CloseUSART^(0+512)
 10023  1915  0820               	movf	??_CloseUSART^(0+512),w
 10024  1916  0021               	movlb	1	; select bank1
 10025  1917  0591               	andwf	17,f	;volatile
 10026  1918  0008               	return
 10027  1919                     __end_of_CloseUSART:	
 10028                           
 10029                           	psect	text33
 10030  19D0                     __ptext33:	
 10031 ;; *************** function _InitApp *****************
 10032 ;; Defined at:
 10033 ;;		line 62 in file "user.c"
 10034 ;; Parameters:    Size  Location     Type
 10035 ;;		None
 10036 ;; Auto vars:     Size  Location     Type
 10037 ;;		None
 10038 ;; Return value:  Size  Location     Type
 10039 ;;		None               void
 10040 ;; Registers used:
 10041 ;;		wreg, status,2
 10042 ;; Tracked objects:
 10043 ;;		On entry : 0/0
 10044 ;;		On exit  : 0/0
 10045 ;;		Unchanged: 0/0
 10046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10050 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10051 ;;Total ram usage:        0 bytes
 10052 ;; Hardware stack levels used:    1
 10053 ;; Hardware stack levels required when called:    7
 10054 ;; This function calls:
 10055 ;;		Nothing
 10056 ;; This function is called by:
 10057 ;;		_main
 10058 ;; This function uses a non-reentrant model
 10059 ;;
 10060                           
 10061                           
 10062                           ;psect for function _InitApp
 10063  19D0                     _InitApp:	
 10064                           
 10065                           ;user.c: 64: LATC =0;
 10066                           
 10067                           ;incstack = 0
 10068                           ; Regs used in _InitApp: [wreg+status,2]
 10069  19D0  0022               	movlb	2	; select bank2
 10070  19D1  018E               	clrf	14	;volatile
 10071                           
 10072                           ;user.c: 65: LATA =0;
 10073  19D2  018C               	clrf	12	;volatile
 10074                           
 10075                           ;user.c: 66: TRISCbits.TRISC2 = 0;
 10076  19D3  0021               	movlb	1	; select bank1
 10077  19D4  110E               	bcf	14,2	;volatile
 10078                           
 10079                           ;user.c: 67: TRISCbits.TRISC1 = 0;
 10080  19D5  108E               	bcf	14,1	;volatile
 10081                           
 10082                           ;user.c: 68: TRISCbits.TRISC3 = 0;
 10083  19D6  118E               	bcf	14,3	;volatile
 10084                           
 10085                           ;user.c: 69: TRISCbits.TRISC4 = 0;
 10086  19D7  120E               	bcf	14,4	;volatile
 10087                           
 10088                           ;user.c: 70: TRISAbits.TRISA2 = 1;
 10089  19D8  150C               	bsf	12,2	;volatile
 10090                           
 10091                           ;user.c: 72: TRISCbits.TRISC0 = 1;
 10092  19D9  140E               	bsf	14,0	;volatile
 10093                           
 10094                           ;user.c: 77: TRISCbits.TRISC5 = 1;
 10095  19DA  168E               	bsf	14,5	;volatile
 10096                           
 10097                           ;user.c: 80: LATC |= 0b00000010;
 10098  19DB  0022               	movlb	2	; select bank2
 10099  19DC  148E               	bsf	14,1	;volatile
 10100                           
 10101                           ;user.c: 81: PPSLOCK =0;
 10102  19DD  003C               	movlb	28	; select bank28
 10103  19DE  018F               	clrf	15	;volatile
 10104                           
 10105                           ;user.c: 82: RC2PPS = 0b00010100;
 10106  19DF  3014               	movlw	20
 10107  19E0  003D               	movlb	29	; select bank29
 10108  19E1  00A2               	movwf	34	;volatile
 10109                           
 10110                           ;user.c: 83: CKPPS = 0b00010010;
 10111  19E2  3012               	movlw	18
 10112  19E3  003C               	movlb	28	; select bank28
 10113  19E4  00A5               	movwf	37	;volatile
 10114                           
 10115                           ;user.c: 85: RXPPS = 0b00010101;
 10116  19E5  3015               	movlw	21
 10117  19E6  00A4               	movwf	36	;volatile
 10118                           
 10119                           ;user.c: 87: PPSLOCK =1;
 10120  19E7  3001               	movlw	1
 10121  19E8  008F               	movwf	15	;volatile
 10122                           
 10123                           ;user.c: 89: ANSELA &= ~0xFF;
 10124  19E9  0023               	movlb	3	; select bank3
 10125  19EA  018C               	clrf	12	;volatile
 10126                           
 10127                           ;user.c: 90: ANSELA |= 0b00000100;
 10128  19EB  150C               	bsf	12,2	;volatile
 10129                           
 10130                           ;user.c: 91: ANSELC &= ~0xFF;
 10131  19EC  018E               	clrf	14	;volatile
 10132                           
 10133                           ;user.c: 92: OPTION_REGbits.nWPUEN = 0;
 10134  19ED  0021               	movlb	1	; select bank1
 10135  19EE  1395               	bcf	21,7	;volatile
 10136                           
 10137                           ;user.c: 93: WPUC = 0b00100000;
 10138  19EF  3020               	movlw	32
 10139  19F0  0024               	movlb	4	; select bank4
 10140  19F1  008E               	movwf	14	;volatile
 10141                           
 10142                           ;user.c: 94: WPUA = 0;
 10143  19F2  018C               	clrf	12	;volatile
 10144  19F3  0008               	return
 10145  19F4                     __end_of_InitApp:	
 10146                           
 10147                           	psect	text34
 10148  196F                     __ptext34:	
 10149 ;; *************** function _ConfigureOscillator *****************
 10150 ;; Defined at:
 10151 ;;		line 40 in file "system.c"
 10152 ;; Parameters:    Size  Location     Type
 10153 ;;		None
 10154 ;; Auto vars:     Size  Location     Type
 10155 ;;		None
 10156 ;; Return value:  Size  Location     Type
 10157 ;;		None               void
 10158 ;; Registers used:
 10159 ;;		wreg, status,2, status,0
 10160 ;; Tracked objects:
 10161 ;;		On entry : 0/0
 10162 ;;		On exit  : 0/0
 10163 ;;		Unchanged: 0/0
 10164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10167 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
 10168 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
 10169 ;;Total ram usage:        1 bytes
 10170 ;; Hardware stack levels used:    1
 10171 ;; Hardware stack levels required when called:    7
 10172 ;; This function calls:
 10173 ;;		Nothing
 10174 ;; This function is called by:
 10175 ;;		_main
 10176 ;; This function uses a non-reentrant model
 10177 ;;
 10178                           
 10179                           
 10180                           ;psect for function _ConfigureOscillator
 10181  196F                     _ConfigureOscillator:	
 10182                           
 10183                           ;system.c: 42: OSCCON= 0b11110000;
 10184                           
 10185                           ;incstack = 0
 10186                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 10187  196F  30F0               	movlw	240
 10188  1970  0021               	movlb	1	; select bank1
 10189  1971  0099               	movwf	25	;volatile
 10190  1972                     l6848:	
 10191                           ;system.c: 43: while(!(OSCSTAT & HFIOFS));
 10192                           
 10193  1972  3000               	movlw	0
 10194  1973  181A               	btfsc	26,0	;volatile
 10195  1974  3001               	movlw	1
 10196  1975  051A               	andwf	26,w	;volatile
 10197  1976  1903               	btfsc	3,2
 10198  1977  2972               	goto	l6848
 10199  1978                     l6850:	
 10200                           ;system.c: 44: while(!(OSCSTAT & = 0b01000000));
 10201                           
 10202  1978  3040               	movlw	64
 10203  1979  0024               	movlb	4	; select bank4
 10204  197A  00A0               	movwf	??_ConfigureOscillator^(0+512)
 10205  197B  0820               	movf	??_ConfigureOscillator^(0+512),w
 10206  197C  0021               	movlb	1	; select bank1
 10207  197D  059A               	andwf	26,f	;volatile
 10208  197E  1D03               	btfss	3,2
 10209  197F  0008               	return
 10210  1980  2978               	goto	l6850
 10211  1981                     __end_of_ConfigureOscillator:	
 10212                           
 10213                           	psect	intentry
 10214  0004                     __pintentry:	
 10215 ;; *************** function _isr *****************
 10216 ;; Defined at:
 10217 ;;		line 72 in file "interrupts.c"
 10218 ;; Parameters:    Size  Location     Type
 10219 ;;		None
 10220 ;; Auto vars:     Size  Location     Type
 10221 ;;  ScanTemp        1   36[BANK1 ] unsigned char 
 10222 ;;  rx              1   35[BANK1 ] unsigned char 
 10223 ;;  Rx_fault        1   34[BANK1 ] unsigned char 
 10224 ;; Return value:  Size  Location     Type
 10225 ;;		None               void
 10226 ;; Registers used:
 10227 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10228 ;; Tracked objects:
 10229 ;;		On entry : 0/0
 10230 ;;		On exit  : 0/0
 10231 ;;		Unchanged: 0/0
 10232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10234 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 10235 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10236 ;;      Totals:         0       2       3       0       0       0       0       0       0       0       0       0       
      +0       0
 10237 ;;Total ram usage:        5 bytes
 10238 ;; Hardware stack levels used:    1
 10239 ;; Hardware stack levels required when called:    6
 10240 ;; This function calls:
 10241 ;;		_PS2RawToScan
 10242 ;;		_Process_PS2_ScanCode
 10243 ;;		_READ_CONFIG_PIN
 10244 ;;		_ResendLast
 10245 ;;		_Timer2OFF
 10246 ;;		_Timer2Reset
 10247 ;;		_UART_send_break_timed
 10248 ;;		i1_PS_2_DISABLE_INTERRUPT
 10249 ;;		i1_PS_2_ENABLE_INTERRUPT
 10250 ;;		i1_READ_PS_2_PIN
 10251 ;;		i1_ReadUSART
 10252 ;;		i1_Timer2ON
 10253 ;;		i1_UARTchar
 10254 ;; This function is called by:
 10255 ;;		Interrupt level 1
 10256 ;; This function uses a non-reentrant model
 10257 ;;
 10258                           
 10259  0004                     _isr:	
 10260                           
 10261                           ;incstack = 0
 10262                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10263  0004  3180               	pagesel	$
 10264  0005  0020               	movlb	0	; select bank0
 10265  0006  087F               	movf	127,w
 10266  0007  00EF               	movwf	??_isr+1
 10267                           
 10268                           ;interrupts.c: 74: unsigned char rx;
 10269                           ;interrupts.c: 75: unsigned char Rx_fault =0;
 10270  0008  0021               	movlb	1	; select bank1
 10271  0009  01C2               	clrf	isr@Rx_fault^(0+128)
 10272                           
 10273                           ;interrupts.c: 76: unsigned char ScanTemp;
 10274                           ;interrupts.c: 78: if(IOCAF & 0b00100000)
 10275  000A  0027               	movlb	7	; select bank7
 10276  000B  1E93               	btfss	19,5	;volatile
 10277  000C  2872               	goto	i1l83
 10278                           
 10279                           ;interrupts.c: 79: {
 10280                           ;interrupts.c: 81: PS_2_DISABLE_INTERRUPT(0b00100000);
 10281  000D  3020               	movlw	32
 10282  000E  3199  2128  3180   	fcall	i1_PS_2_DISABLE_INTERRUPT
 10283                           
 10284                           ;interrupts.c: 82: PIE1bits.TMR2IE = 0;
 10285  0011  0021               	movlb	1	; select bank1
 10286  0012  1091               	bcf	17,1	;volatile
 10287                           
 10288                           ;interrupts.c: 83: PIE1bits.RCIE = 0;
 10289  0013  1291               	bcf	17,5	;volatile
 10290                           
 10291                           ;interrupts.c: 84: LATC |= 0b00010000;
 10292  0014  0022               	movlb	2	; select bank2
 10293  0015  160E               	bsf	14,4	;volatile
 10294                           
 10295                           ;interrupts.c: 85: PS_2_bits++;
 10296  0016  3001               	movlw	1
 10297  0017  0020               	movlb	0	; select bank0
 10298  0018  00EE               	movwf	??_isr
 10299  0019  086E               	movf	??_isr,w
 10300  001A  0021               	movlb	1	; select bank1
 10301  001B  07D2               	addwf	_PS_2_bits^(0+128),f
 10302                           
 10303                           ;interrupts.c: 86: PS_2_Read_Data_TEMP <<= 1;
 10304  001C  3001               	movlw	1
 10305  001D                     u760_25:	
 10306  001D  35C9               	lslf	_PS_2_Read_Data_TEMP^(0+128),f
 10307  001E  0DCA               	rlf	(_PS_2_Read_Data_TEMP+1)^(0+128),f
 10308  001F  0B89               	decfsz	9,f
 10309  0020  281D               	goto	u760_25
 10310                           
 10311                           ;interrupts.c: 87: __nop();
 10312  0021  0000               	nop
 10313                           
 10314                           ;interrupts.c: 88: if(READ_PS_2_PIN(0b00010000))
 10315  0022  3010               	movlw	16
 10316  0023  3199  2181  3180   	fcall	i1_READ_PS_2_PIN
 10317  0026  3A00               	xorlw	0
 10318  0027  1903               	skipnz
 10319  0028  282E               	goto	i1l6022
 10320                           
 10321                           ;interrupts.c: 89: {
 10322                           ;interrupts.c: 90: PS_2_Read_Data_TEMP++;
 10323  0029  3001               	movlw	1
 10324  002A  0021               	movlb	1	; select bank1
 10325  002B  07C9               	addwf	_PS_2_Read_Data_TEMP^(0+128),f
 10326  002C  3000               	movlw	0
 10327  002D  3DCA               	addwfc	(_PS_2_Read_Data_TEMP+1)^(0+128),f
 10328  002E                     i1l6022:	
 10329                           
 10330                           ;interrupts.c: 91: }
 10331                           ;interrupts.c: 92: if(PS_2_bits == 11)
 10332  002E  300B               	movlw	11
 10333  002F  0021               	movlb	1	; select bank1
 10334  0030  0652               	xorwf	_PS_2_bits^(0+128),w
 10335  0031  1D03               	btfss	3,2
 10336  0032  285D               	goto	i1l6036
 10337                           
 10338                           ;interrupts.c: 93: {
 10339                           ;interrupts.c: 94: if(PS_2_Buffer_items < 12)
 10340  0033  300C               	movlw	12
 10341  0034  0251               	subwf	_PS_2_Buffer_items^(0+128),w
 10342  0035  1803               	skipnc
 10343  0036  285A               	goto	i1l6034
 10344                           
 10345                           ;interrupts.c: 95: {
 10346                           ;interrupts.c: 96: ScanTemp = (unsigned char) PS2RawToScan(PS_2_Read_Data_TEMP);
 10347  0037  084A               	movf	(_PS_2_Read_Data_TEMP+1)^(0+128),w
 10348  0038  00F9               	movwf	PS2RawToScan@Raw+1
 10349  0039  0849               	movf	_PS_2_Read_Data_TEMP^(0+128),w
 10350  003A  00F8               	movwf	PS2RawToScan@Raw
 10351  003B  319D  25FA  3180   	fcall	_PS2RawToScan
 10352  003E  0878               	movf	?_PS2RawToScan,w
 10353  003F  0020               	movlb	0	; select bank0
 10354  0040  00EE               	movwf	??_isr
 10355  0041  086E               	movf	??_isr,w
 10356  0042  0021               	movlb	1	; select bank1
 10357  0043  00C4               	movwf	isr@ScanTemp^(0+128)
 10358                           
 10359                           ;interrupts.c: 97: if(ScanTemp)
 10360  0044  0844               	movf	isr@ScanTemp^(0+128),w
 10361  0045  1903               	btfsc	3,2
 10362  0046  2858               	goto	i1l87
 10363                           
 10364                           ;interrupts.c: 98: {
 10365                           ;interrupts.c: 100: PS_2_ScanCodes[PS_2_Buffer_items] = ScanTemp;
 10366  0047  0844               	movf	isr@ScanTemp^(0+128),w
 10367  0048  0020               	movlb	0	; select bank0
 10368  0049  00EE               	movwf	??_isr
 10369  004A  0021               	movlb	1	; select bank1
 10370  004B  0851               	movf	_PS_2_Buffer_items^(0+128),w
 10371  004C  3ED7               	addlw	(low (_PS_2_ScanCodes| 0))& (0+255)
 10372  004D  0086               	movwf	6
 10373  004E  0187               	clrf	7
 10374  004F  0020               	movlb	0	; select bank0
 10375  0050  086E               	movf	??_isr,w
 10376  0051  0081               	movwf	1
 10377                           
 10378                           ;interrupts.c: 101: PS_2_Buffer_items++;
 10379  0052  3001               	movlw	1
 10380  0053  00EE               	movwf	??_isr
 10381  0054  086E               	movf	??_isr,w
 10382  0055  0021               	movlb	1	; select bank1
 10383  0056  07D1               	addwf	_PS_2_Buffer_items^(0+128),f
 10384                           
 10385                           ;interrupts.c: 102: }
 10386  0057  285A               	goto	i1l6034
 10387  0058                     i1l87:	
 10388                           
 10389                           ;interrupts.c: 103: else
 10390                           ;interrupts.c: 104: {
 10391                           ;interrupts.c: 106: ResendLastFlag = 1;
 10392  0058  01D4               	clrf	_ResendLastFlag^(0+128)
 10393  0059  0AD4               	incf	_ResendLastFlag^(0+128),f
 10394  005A                     i1l6034:	
 10395                           
 10396                           ;interrupts.c: 107: }
 10397                           ;interrupts.c: 109: }
 10398                           ;interrupts.c: 110: PS_2_bits = 0;
 10399  005A  01D2               	clrf	_PS_2_bits^(0+128)
 10400                           
 10401                           ;interrupts.c: 111: PS_2_Read_Data_TEMP = 0;
 10402  005B  01C9               	clrf	_PS_2_Read_Data_TEMP^(0+128)
 10403  005C  01CA               	clrf	(_PS_2_Read_Data_TEMP+1)^(0+128)
 10404  005D                     i1l6036:	
 10405                           
 10406                           ;interrupts.c: 112: }
 10407                           ;interrupts.c: 113: Timer2Reset();
 10408  005D  3198  204C  3180   	fcall	_Timer2Reset
 10409                           
 10410                           ;interrupts.c: 114: PIR1bits.TMR2IF = 0;
 10411  0060  0020               	movlb	0	; select bank0
 10412  0061  1091               	bcf	17,1	;volatile
 10413                           
 10414                           ;interrupts.c: 115: PIE1bits.TMR2IE = 1;
 10415  0062  0021               	movlb	1	; select bank1
 10416  0063  1491               	bsf	17,1	;volatile
 10417                           
 10418                           ;interrupts.c: 116: Timer2ON();
 10419  0064  3198  204F  3180   	fcall	i1_Timer2ON
 10420                           
 10421                           ;interrupts.c: 117: IOCAF &= ~0b00100000;
 10422  0067  30DF               	movlw	223
 10423  0068  0020               	movlb	0	; select bank0
 10424  0069  00EE               	movwf	??_isr
 10425  006A  086E               	movf	??_isr,w
 10426  006B  0027               	movlb	7	; select bank7
 10427  006C  0593               	andwf	19,f	;volatile
 10428                           
 10429                           ;interrupts.c: 118: PS_2_ENABLE_INTERRUPT(0b00100000);
 10430  006D  3020               	movlw	32
 10431  006E  3198  20C5  3180   	fcall	i1_PS_2_ENABLE_INTERRUPT
 10432                           
 10433                           ;interrupts.c: 119: }
 10434  0071  28DD               	goto	i1l102
 10435  0072                     i1l83:	
 10436                           
 10437                           ;interrupts.c: 120: else if (IOCAF & 0b00010000)
 10438  0072  1E13               	btfss	19,4	;volatile
 10439  0073  287F               	goto	i1l90
 10440                           
 10441                           ;interrupts.c: 121: {
 10442                           ;interrupts.c: 122: PS_2_DISABLE_INTERRUPT(0b00010000);
 10443  0074  3010               	movlw	16
 10444  0075  3199  2128  3180   	fcall	i1_PS_2_DISABLE_INTERRUPT
 10445                           
 10446                           ;interrupts.c: 123: IOCAF &= ~0b00010000;
 10447  0078  30EF               	movlw	239
 10448  0079  0020               	movlb	0	; select bank0
 10449  007A  00EE               	movwf	??_isr
 10450  007B  086E               	movf	??_isr,w
 10451  007C  0027               	movlb	7	; select bank7
 10452  007D  0593               	andwf	19,f	;volatile
 10453                           
 10454                           ;interrupts.c: 124: }
 10455  007E  28DD               	goto	i1l102
 10456  007F                     i1l90:	
 10457                           
 10458                           ;interrupts.c: 125: else if (PIR1bits.RCIF)
 10459  007F  0020               	movlb	0	; select bank0
 10460  0080  1E91               	btfss	17,5	;volatile
 10461  0081  28BB               	goto	i1l92
 10462                           
 10463                           ;interrupts.c: 126: {
 10464                           ;interrupts.c: 129: LATC |= 0b00001000;
 10465  0082  0022               	movlb	2	; select bank2
 10466  0083  158E               	bsf	14,3	;volatile
 10467                           
 10468                           ;interrupts.c: 130: SinLEDtimer = 0;
 10469  0084  0024               	movlb	4	; select bank4
 10470  0085  01DA               	clrf	_SinLEDtimer^(0+512)
 10471  0086  01DB               	clrf	(_SinLEDtimer+1)^(0+512)
 10472                           
 10473                           ;interrupts.c: 131: Rx_fault = 0;
 10474  0087  0021               	movlb	1	; select bank1
 10475  0088  01C2               	clrf	isr@Rx_fault^(0+128)
 10476                           
 10477                           ;interrupts.c: 132: if(RC1STAbits.FERR)
 10478  0089  0023               	movlb	3	; select bank3
 10479  008A  1D1D               	btfss	29,2	;volatile
 10480  008B  288F               	goto	i1l6060
 10481                           
 10482                           ;interrupts.c: 133: {
 10483                           ;interrupts.c: 134: Rx_fault =1;
 10484  008C  0021               	movlb	1	; select bank1
 10485  008D  01C2               	clrf	isr@Rx_fault^(0+128)
 10486  008E  0AC2               	incf	isr@Rx_fault^(0+128),f
 10487  008F                     i1l6060:	
 10488                           
 10489                           ;interrupts.c: 135: }
 10490                           ;interrupts.c: 136: rx = ReadUSART();
 10491  008F  3198  208A  3180   	fcall	i1_ReadUSART
 10492  0092  0020               	movlb	0	; select bank0
 10493  0093  00EE               	movwf	??_isr
 10494  0094  086E               	movf	??_isr,w
 10495  0095  0021               	movlb	1	; select bank1
 10496  0096  00C3               	movwf	isr@rx^(0+128)
 10497                           
 10498                           ;interrupts.c: 138: if(READ_CONFIG_PIN())
 10499  0097  3198  2074  3180   	fcall	_READ_CONFIG_PIN
 10500  009A  3A00               	xorlw	0
 10501  009B  1903               	skipnz
 10502  009C  28B8               	goto	i1l6070
 10503                           
 10504                           ;interrupts.c: 139: {
 10505                           ;interrupts.c: 140: if(Rx_fault == 1)
 10506  009D  0021               	movlb	1	; select bank1
 10507  009E  0342               	decf	isr@Rx_fault^(0+128),w
 10508  009F  1D03               	btfss	3,2
 10509  00A0  28AC               	goto	i1l6068
 10510                           
 10511                           ;interrupts.c: 141: {
 10512                           ;interrupts.c: 142: if(rx == 0)
 10513  00A1  0843               	movf	isr@rx^(0+128),w
 10514  00A2  1D03               	btfss	3,2
 10515  00A3  28B8               	goto	i1l6070
 10516                           
 10517                           ;interrupts.c: 143: {
 10518                           ;interrupts.c: 145: UART_send_break_timed(100000);
 10519  00A4  30A0               	movlw	160
 10520  00A5  00FA               	movwf	UART_send_break_timed@US
 10521  00A6  3086               	movlw	134
 10522  00A7  00FB               	movwf	UART_send_break_timed@US+1
 10523  00A8  3199  21F4  3180   	fcall	_UART_send_break_timed
 10524                           
 10525                           ;interrupts.c: 146: }
 10526                           ;interrupts.c: 147: }
 10527  00AB  28B8               	goto	i1l6070
 10528  00AC                     i1l6068:	
 10529                           
 10530                           ;interrupts.c: 148: else
 10531                           ;interrupts.c: 149: {
 10532                           ;interrupts.c: 150: UARTchar(rx, 1 ,RC1STAbits.RX9D);
 10533  00AC  01F8               	clrf	i1UARTchar@override
 10534  00AD  0AF8               	incf	i1UARTchar@override,f
 10535  00AE  3000               	movlw	0
 10536  00AF  0023               	movlb	3	; select bank3
 10537  00B0  181D               	btfsc	29,0	;volatile
 10538  00B1  3001               	movlw	1
 10539  00B2  00F9               	movwf	i1UARTchar@NinethBit_override_data
 10540  00B3  0021               	movlb	1	; select bank1
 10541  00B4  0843               	movf	isr@rx^(0+128),w
 10542  00B5  3190  208D  3180   	fcall	i1_UARTchar
 10543  00B8                     i1l6070:	
 10544                           
 10545                           ;interrupts.c: 151: }
 10546                           ;interrupts.c: 152: }
 10547                           ;interrupts.c: 168: PIR1bits.RCIF = 0;
 10548  00B8  0020               	movlb	0	; select bank0
 10549  00B9  1291               	bcf	17,5	;volatile
 10550                           
 10551                           ;interrupts.c: 169: }
 10552  00BA  28DD               	goto	i1l102
 10553  00BB                     i1l92:	
 10554                           
 10555                           ;interrupts.c: 170: else if(PIR1bits.TMR2IF)
 10556  00BB  1C91               	btfss	17,1	;volatile
 10557  00BC  28DD               	goto	i1l102
 10558                           
 10559                           ;interrupts.c: 171: {
 10560                           ;interrupts.c: 173: PIE1bits.TMR2IE = 0;
 10561  00BD  0021               	movlb	1	; select bank1
 10562  00BE  1091               	bcf	17,1	;volatile
 10563                           
 10564                           ;interrupts.c: 174: Timer2OFF();
 10565  00BF  3198  2049  3180   	fcall	_Timer2OFF
 10566                           
 10567                           ;interrupts.c: 175: PS_2_DISABLE_INTERRUPT(0b00100000);
 10568  00C2  3020               	movlw	32
 10569  00C3  3199  2128  3180   	fcall	i1_PS_2_DISABLE_INTERRUPT
 10570                           
 10571                           ;interrupts.c: 176: PS_2_bits = 0;
 10572  00C6  0021               	movlb	1	; select bank1
 10573  00C7  01D2               	clrf	_PS_2_bits^(0+128)
 10574                           
 10575                           ;interrupts.c: 177: PS_2_Read_Data_TEMP = 0;
 10576  00C8  01C9               	clrf	_PS_2_Read_Data_TEMP^(0+128)
 10577  00C9  01CA               	clrf	(_PS_2_Read_Data_TEMP+1)^(0+128)
 10578                           
 10579                           ;interrupts.c: 178: if(ResendLastFlag)
 10580  00CA  0854               	movf	_ResendLastFlag^(0+128),w
 10581  00CB  1903               	btfsc	3,2
 10582  00CC  28D3               	goto	i1l6088
 10583                           
 10584                           ;interrupts.c: 179: {
 10585                           ;interrupts.c: 181: ResendLast();
 10586  00CD  3198  2082  3180   	fcall	_ResendLast
 10587                           
 10588                           ;interrupts.c: 182: ResendLastFlag = 0;
 10589  00D0  0021               	movlb	1	; select bank1
 10590  00D1  01D4               	clrf	_ResendLastFlag^(0+128)
 10591                           
 10592                           ;interrupts.c: 183: }
 10593  00D2  28D6               	goto	i1l6090
 10594  00D3                     i1l6088:	
 10595                           
 10596                           ;interrupts.c: 184: else
 10597                           ;interrupts.c: 185: {
 10598                           ;interrupts.c: 186: Process_PS2_ScanCode();
 10599  00D3  3181  2115  3180   	fcall	_Process_PS2_ScanCode
 10600  00D6                     i1l6090:	
 10601                           
 10602                           ;interrupts.c: 187: }
 10603                           ;interrupts.c: 189: PIE1bits.RCIE = 1;
 10604  00D6  0021               	movlb	1	; select bank1
 10605  00D7  1691               	bsf	17,5	;volatile
 10606                           
 10607                           ;interrupts.c: 191: PS_2_ENABLE_INTERRUPT(0b00100000);
 10608  00D8  3020               	movlw	32
 10609  00D9  3198  20C5         	fcall	i1_PS_2_ENABLE_INTERRUPT
 10610                           
 10611                           ;interrupts.c: 192: PIR1bits.TMR2IF =0;
 10612  00DB  0020               	movlb	0	; select bank0
 10613  00DC  1091               	bcf	17,1	;volatile
 10614  00DD                     i1l102:	
 10615  00DD  0020               	movlb	0	; select bank0
 10616  00DE  086F               	movf	??_isr+1,w
 10617  00DF  00FF               	movwf	127
 10618  00E0  0009               	retfie
 10619  00E1                     __end_of_isr:	
 10620                           
 10621                           	psect	text36
 10622  184F                     __ptext36:	
 10623 ;; *************** function i1_Timer2ON *****************
 10624 ;; Defined at:
 10625 ;;		line 59 in file "Timer.c"
 10626 ;; Parameters:    Size  Location     Type
 10627 ;;		None
 10628 ;; Auto vars:     Size  Location     Type
 10629 ;;		None
 10630 ;; Return value:  Size  Location     Type
 10631 ;;		None               void
 10632 ;; Registers used:
 10633 ;;		None
 10634 ;; Tracked objects:
 10635 ;;		On entry : 0/0
 10636 ;;		On exit  : 0/0
 10637 ;;		Unchanged: 0/0
 10638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10643 ;;Total ram usage:        0 bytes
 10644 ;; Hardware stack levels used:    1
 10645 ;; This function calls:
 10646 ;;		Nothing
 10647 ;; This function is called by:
 10648 ;;		_isr
 10649 ;; This function uses a non-reentrant model
 10650 ;;
 10651                           
 10652                           
 10653                           ;psect for function i1_Timer2ON
 10654  184F                     i1_Timer2ON:	
 10655                           
 10656                           ;Timer.c: 61: T2CONbits.TMR2ON = 1;
 10657                           
 10658                           ;incstack = 0
 10659                           ; Regs used in i1_Timer2ON: []
 10660  184F  0020               	movlb	0	; select bank0
 10661  1850  151C               	bsf	28,2	;volatile
 10662  1851  0008               	return
 10663  1852                     __end_ofi1_Timer2ON:	
 10664                           
 10665                           	psect	text37
 10666  18C5                     __ptext37:	
 10667 ;; *************** function i1_PS_2_ENABLE_INTERRUPT *****************
 10668 ;; Defined at:
 10669 ;;		line 199 in file "PS_2.c"
 10670 ;; Parameters:    Size  Location     Type
 10671 ;;  DATA_CLK        1    wreg     unsigned char 
 10672 ;; Auto vars:     Size  Location     Type
 10673 ;;  DATA_CLK        1    0[COMMON] unsigned char 
 10674 ;; Return value:  Size  Location     Type
 10675 ;;		None               void
 10676 ;; Registers used:
 10677 ;;		wreg, status,2, status,0
 10678 ;; Tracked objects:
 10679 ;;		On entry : 0/0
 10680 ;;		On exit  : 0/0
 10681 ;;		Unchanged: 0/0
 10682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10684 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10686 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10687 ;;Total ram usage:        1 bytes
 10688 ;; Hardware stack levels used:    1
 10689 ;; This function calls:
 10690 ;;		Nothing
 10691 ;; This function is called by:
 10692 ;;		_isr
 10693 ;; This function uses a non-reentrant model
 10694 ;;
 10695                           
 10696                           
 10697                           ;psect for function i1_PS_2_ENABLE_INTERRUPT
 10698  18C5                     i1_PS_2_ENABLE_INTERRUPT:	
 10699                           
 10700                           ;incstack = 0
 10701                           ; Regs used in i1_PS_2_ENABLE_INTERRUPT: [wreg+status,2+status,0]
 10702                           ;i1PS_2_ENABLE_INTERRUPT@DATA_CLK stored from wreg
 10703  18C5  00F0               	movwf	i1PS_2_ENABLE_INTERRUPT@DATA_CLK
 10704                           
 10705                           ;PS_2.c: 201: if(DATA_CLK == 0b00100000)
 10706  18C6  3020               	movlw	32
 10707  18C7  0670               	xorwf	i1PS_2_ENABLE_INTERRUPT@DATA_CLK,w
 10708  18C8  1D03               	btfss	3,2
 10709  18C9  28CD               	goto	i1l648
 10710                           
 10711                           ;PS_2.c: 202: {
 10712                           ;PS_2.c: 205: IOCAN |= 0b00100000;
 10713  18CA  0027               	movlb	7	; select bank7
 10714  18CB  1692               	bsf	18,5	;volatile
 10715                           
 10716                           ;PS_2.c: 207: }
 10717  18CC  0008               	return
 10718  18CD                     i1l648:	
 10719                           
 10720                           ;PS_2.c: 208: else
 10721                           ;PS_2.c: 209: {
 10722                           ;PS_2.c: 212: IOCAN |= 0b00010000;
 10723  18CD  0027               	movlb	7	; select bank7
 10724  18CE  1612               	bsf	18,4	;volatile
 10725  18CF  0008               	return
 10726  18D0                     __end_ofi1_PS_2_ENABLE_INTERRUPT:	
 10727                           
 10728                           	psect	text38
 10729  184C                     __ptext38:	
 10730 ;; *************** function _Timer2Reset *****************
 10731 ;; Defined at:
 10732 ;;		line 81 in file "Timer.c"
 10733 ;; Parameters:    Size  Location     Type
 10734 ;;		None
 10735 ;; Auto vars:     Size  Location     Type
 10736 ;;		None
 10737 ;; Return value:  Size  Location     Type
 10738 ;;		None               void
 10739 ;; Registers used:
 10740 ;;		status,2
 10741 ;; Tracked objects:
 10742 ;;		On entry : 0/0
 10743 ;;		On exit  : 0/0
 10744 ;;		Unchanged: 0/0
 10745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10750 ;;Total ram usage:        0 bytes
 10751 ;; Hardware stack levels used:    1
 10752 ;; This function calls:
 10753 ;;		Nothing
 10754 ;; This function is called by:
 10755 ;;		_isr
 10756 ;; This function uses a non-reentrant model
 10757 ;;
 10758                           
 10759                           
 10760                           ;psect for function _Timer2Reset
 10761  184C                     _Timer2Reset:	
 10762                           
 10763                           ;Timer.c: 83: TMR2 = 0;
 10764                           
 10765                           ;incstack = 0
 10766                           ; Regs used in _Timer2Reset: [status,2]
 10767  184C  0020               	movlb	0	; select bank0
 10768  184D  019A               	clrf	26	;volatile
 10769  184E  0008               	return
 10770  184F                     __end_of_Timer2Reset:	
 10771                           
 10772                           	psect	text39
 10773  1849                     __ptext39:	
 10774 ;; *************** function _Timer2OFF *****************
 10775 ;; Defined at:
 10776 ;;		line 70 in file "Timer.c"
 10777 ;; Parameters:    Size  Location     Type
 10778 ;;		None
 10779 ;; Auto vars:     Size  Location     Type
 10780 ;;		None
 10781 ;; Return value:  Size  Location     Type
 10782 ;;		None               void
 10783 ;; Registers used:
 10784 ;;		None
 10785 ;; Tracked objects:
 10786 ;;		On entry : 0/0
 10787 ;;		On exit  : 0/0
 10788 ;;		Unchanged: 0/0
 10789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10794 ;;Total ram usage:        0 bytes
 10795 ;; Hardware stack levels used:    1
 10796 ;; This function calls:
 10797 ;;		Nothing
 10798 ;; This function is called by:
 10799 ;;		_isr
 10800 ;; This function uses a non-reentrant model
 10801 ;;
 10802                           
 10803                           
 10804                           ;psect for function _Timer2OFF
 10805  1849                     _Timer2OFF:	
 10806                           
 10807                           ;Timer.c: 72: T2CONbits.TMR2ON = 0;
 10808                           
 10809                           ;incstack = 0
 10810                           ; Regs used in _Timer2OFF: []
 10811  1849  0020               	movlb	0	; select bank0
 10812  184A  111C               	bcf	28,2	;volatile
 10813  184B  0008               	return
 10814  184C                     __end_of_Timer2OFF:	
 10815                           
 10816                           	psect	text40
 10817  1882                     __ptext40:	
 10818 ;; *************** function _ResendLast *****************
 10819 ;; Defined at:
 10820 ;;		line 1006 in file "PS_2.c"
 10821 ;; Parameters:    Size  Location     Type
 10822 ;;		None
 10823 ;; Auto vars:     Size  Location     Type
 10824 ;;		None
 10825 ;; Return value:  Size  Location     Type
 10826 ;;		None               void
 10827 ;; Registers used:
 10828 ;;		wreg, status,2, status,0, pclath, cstack
 10829 ;; Tracked objects:
 10830 ;;		On entry : 0/0
 10831 ;;		On exit  : 0/0
 10832 ;;		Unchanged: 0/0
 10833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10837 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10838 ;;Total ram usage:        0 bytes
 10839 ;; Hardware stack levels used:    1
 10840 ;; Hardware stack levels required when called:    2
 10841 ;; This function calls:
 10842 ;;		i1_PS_2_DISABLE_INTERRUPT
 10843 ;;		i1_Send_PS2
 10844 ;; This function is called by:
 10845 ;;		_isr
 10846 ;; This function uses a non-reentrant model
 10847 ;;
 10848                           
 10849                           
 10850                           ;psect for function _ResendLast
 10851  1882                     _ResendLast:	
 10852                           
 10853                           ;PS_2.c: 1008: PS_2_DISABLE_INTERRUPT(0b00100000);
 10854                           
 10855                           ;incstack = 0
 10856                           ; Regs used in _ResendLast: [wreg+status,2+status,0+pclath+cstack]
 10857  1882  3020               	movlw	32
 10858  1883  3199  2128  3198   	fcall	i1_PS_2_DISABLE_INTERRUPT
 10859                           
 10860                           ;PS_2.c: 1010: Send_PS2(0xFE);
 10861  1886  30FE               	movlw	254
 10862  1887  318C  24DE         	fcall	i1_Send_PS2
 10863  1889  0008               	return
 10864  188A                     __end_of_ResendLast:	
 10865                           
 10866                           	psect	text41
 10867  1928                     __ptext41:	
 10868 ;; *************** function i1_PS_2_DISABLE_INTERRUPT *****************
 10869 ;; Defined at:
 10870 ;;		line 178 in file "PS_2.c"
 10871 ;; Parameters:    Size  Location     Type
 10872 ;;  DATA_CLK        1    wreg     unsigned char 
 10873 ;; Auto vars:     Size  Location     Type
 10874 ;;  DATA_CLK        1    1[COMMON] unsigned char 
 10875 ;; Return value:  Size  Location     Type
 10876 ;;		None               void
 10877 ;; Registers used:
 10878 ;;		wreg, status,2, status,0
 10879 ;; Tracked objects:
 10880 ;;		On entry : 0/0
 10881 ;;		On exit  : 0/0
 10882 ;;		Unchanged: 0/0
 10883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10885 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10886 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10887 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10888 ;;Total ram usage:        2 bytes
 10889 ;; Hardware stack levels used:    1
 10890 ;; This function calls:
 10891 ;;		Nothing
 10892 ;; This function is called by:
 10893 ;;		_isr
 10894 ;;		_ResendLast
 10895 ;; This function uses a non-reentrant model
 10896 ;;
 10897                           
 10898                           
 10899                           ;psect for function i1_PS_2_DISABLE_INTERRUPT
 10900  1928                     i1_PS_2_DISABLE_INTERRUPT:	
 10901                           
 10902                           ;incstack = 0
 10903                           ; Regs used in i1_PS_2_DISABLE_INTERRUPT: [wreg+status,2+status,0]
 10904                           ;i1PS_2_DISABLE_INTERRUPT@DATA_CLK stored from wreg
 10905  1928  00F1               	movwf	i1PS_2_DISABLE_INTERRUPT@DATA_CLK
 10906                           
 10907                           ;PS_2.c: 180: if(DATA_CLK == 0b00100000)
 10908  1929  3020               	movlw	32
 10909  192A  0671               	xorwf	i1PS_2_DISABLE_INTERRUPT@DATA_CLK,w
 10910  192B  1D03               	btfss	3,2
 10911  192C  2933               	goto	i1l5156
 10912                           
 10913                           ;PS_2.c: 181: {
 10914                           ;PS_2.c: 184: IOCAN &= ~0b00100000;
 10915  192D  30DF               	movlw	223
 10916  192E  00F0               	movwf	??i1_PS_2_DISABLE_INTERRUPT
 10917  192F  0870               	movf	??i1_PS_2_DISABLE_INTERRUPT,w
 10918  1930  0027               	movlb	7	; select bank7
 10919  1931  0592               	andwf	18,f	;volatile
 10920                           
 10921                           ;PS_2.c: 185: }
 10922  1932  0008               	return
 10923  1933                     i1l5156:	
 10924                           
 10925                           ;PS_2.c: 186: else
 10926                           ;PS_2.c: 187: {
 10927                           ;PS_2.c: 190: IOCAN &= ~0b00010000;
 10928  1933  30EF               	movlw	239
 10929  1934  00F0               	movwf	??i1_PS_2_DISABLE_INTERRUPT
 10930  1935  0870               	movf	??i1_PS_2_DISABLE_INTERRUPT,w
 10931  1936  0027               	movlb	7	; select bank7
 10932  1937  0592               	andwf	18,f	;volatile
 10933  1938  0008               	return
 10934  1939                     __end_ofi1_PS_2_DISABLE_INTERRUPT:	
 10935                           
 10936                           	psect	text42
 10937  1874                     __ptext42:	
 10938 ;; *************** function _READ_CONFIG_PIN *****************
 10939 ;; Defined at:
 10940 ;;		line 146 in file "MISC.c"
 10941 ;; Parameters:    Size  Location     Type
 10942 ;;		None
 10943 ;; Auto vars:     Size  Location     Type
 10944 ;;		None
 10945 ;; Return value:  Size  Location     Type
 10946 ;;                  1    wreg      unsigned char 
 10947 ;; Registers used:
 10948 ;;		wreg
 10949 ;; Tracked objects:
 10950 ;;		On entry : 0/0
 10951 ;;		On exit  : 0/0
 10952 ;;		Unchanged: 0/0
 10953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10958 ;;Total ram usage:        0 bytes
 10959 ;; Hardware stack levels used:    1
 10960 ;; This function calls:
 10961 ;;		Nothing
 10962 ;; This function is called by:
 10963 ;;		_isr
 10964 ;; This function uses a non-reentrant model
 10965 ;;
 10966                           
 10967                           
 10968                           ;psect for function _READ_CONFIG_PIN
 10969  1874                     _READ_CONFIG_PIN:	
 10970                           
 10971                           ;MISC.c: 150: if((PORTC & 0b00000001) == 0b00000001)
 10972                           
 10973                           ;incstack = 0
 10974                           ; Regs used in _READ_CONFIG_PIN: [wreg]
 10975  1874  0020               	movlb	0	; select bank0
 10976  1875  1C0E               	btfss	14,0	;volatile
 10977  1876  2879               	goto	i1l5332
 10978                           
 10979                           ;MISC.c: 151: {
 10980                           ;MISC.c: 152: return (1);
 10981  1877  3001               	movlw	1
 10982  1878  0008               	return
 10983  1879                     i1l5332:	
 10984                           
 10985                           ;MISC.c: 153: }
 10986                           ;MISC.c: 155: return 0;
 10987  1879  3000               	movlw	0
 10988  187A  0008               	return
 10989  187B                     __end_of_READ_CONFIG_PIN:	
 10990                           
 10991                           	psect	text43
 10992  0115                     __ptext43:	
 10993 ;; *************** function _Process_PS2_ScanCode *****************
 10994 ;; Defined at:
 10995 ;;		line 257 in file "PS_2.c"
 10996 ;; Parameters:    Size  Location     Type
 10997 ;;		None
 10998 ;; Auto vars:     Size  Location     Type
 10999 ;;  buf            60    0[BANK3 ] unsigned char [60]
 11000 ;;  temp            1   65[BANK3 ] unsigned char 
 11001 ;;  shortbreak      1   64[BANK3 ] unsigned char 
 11002 ;; Return value:  Size  Location     Type
 11003 ;;		None               void
 11004 ;; Registers used:
 11005 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11006 ;; Tracked objects:
 11007 ;;		On entry : 0/0
 11008 ;;		On exit  : 0/0
 11009 ;;		Unchanged: 0/0
 11010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11012 ;;      Locals:         0       0       0       0      66       0       0       0       0       0       0       0       
      +0       0
 11013 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 11014 ;;      Totals:         0       0       6       0      66       0       0       0       0       0       0       0       
      +0       0
 11015 ;;Total ram usage:       72 bytes
 11016 ;; Hardware stack levels used:    1
 11017 ;; Hardware stack levels required when called:    5
 11018 ;; This function calls:
 11019 ;;		_BufferShiftBack
 11020 ;;		_Decode_Scan_Code
 11021 ;;		_Decode_Scan_Code_Function
 11022 ;;		_Decode_Scan_Code_FunctionE0
 11023 ;;		_Decode_Scan_Code_Shift
 11024 ;;		_ISNUMBER
 11025 ;;		_SetBaud
 11026 ;;		_UART_send_break
 11027 ;;		_UART_send_break_timed
 11028 ;;		___lmul
 11029 ;;		_cleanBuffer
 11030 ;;		_sprintf
 11031 ;;		i1_Send_PS2
 11032 ;;		i1_UARTchar
 11033 ;;		i1_UARTstringWAIT
 11034 ;;		i1_delayUS
 11035 ;; This function is called by:
 11036 ;;		_isr
 11037 ;; This function uses a non-reentrant model
 11038 ;;
 11039                           
 11040                           
 11041                           ;psect for function _Process_PS2_ScanCode
 11042  0115                     _Process_PS2_ScanCode:	
 11043                           
 11044                           ;PS_2.c: 259: unsigned char temp = 0;
 11045                           
 11046                           ;incstack = 0
 11047                           ; Regs used in _Process_PS2_ScanCode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11048  0115  0023               	movlb	3	; select bank3
 11049  0116  01E1               	clrf	Process_PS2_ScanCode@temp^(0+384)
 11050                           
 11051                           ;PS_2.c: 260: unsigned char shortbreak = 0;
 11052  0117  01E0               	clrf	Process_PS2_ScanCode@shortbreak^(0+384)
 11053                           
 11054                           ;PS_2.c: 261: unsigned char buf[60];
 11055                           ;PS_2.c: 263: if(PS_2_Buffer_items != 0)
 11056  0118  0021               	movlb	1	; select bank1
 11057  0119  0851               	movf	_PS_2_Buffer_items^(0+128),w
 11058  011A  1903               	btfsc	3,2
 11059  011B  0008               	return
 11060  011C                     i1l5850:	
 11061  011C  0021               	movlb	1	; select bank1
 11062  011D  0851               	movf	_PS_2_Buffer_items^(0+128),w
 11063  011E  1903               	btfsc	3,2
 11064  011F  0008               	return
 11065                           
 11066                           ;PS_2.c: 267: {
 11067                           ;PS_2.c: 269: if(PS_2_ScanCodes[0])
 11068                           
 11069                           ;PS_2.c: 264: {
 11070                           ;PS_2.c: 266: while(PS_2_Buffer_items != 0)
 11071  0120  0857               	movf	_PS_2_ScanCodes^(0+128),w
 11072  0121  1903               	btfsc	3,2
 11073  0122  2E6B               	goto	i1l5846
 11074                           
 11075                           ;PS_2.c: 270: {
 11076                           ;PS_2.c: 272: PS_2_Read_Data_First = PS_2_ScanCodes[0];
 11077  0123  0857               	movf	_PS_2_ScanCodes^(0+128),w
 11078  0124  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11079  0125  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11080  0126  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11081  0127  0023               	movlb	3	; select bank3
 11082  0128  00E2               	movwf	_PS_2_Read_Data_First^(0+384)
 11083  0129  0021               	movlb	1	; select bank1
 11084  012A  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11085  012B  0023               	movlb	3	; select bank3
 11086  012C  00E3               	movwf	(_PS_2_Read_Data_First+1)^(0+384)
 11087                           
 11088                           ;PS_2.c: 273: if(PS_2_Read_Data_First == 0xF0)
 11089  012D  30F0               	movlw	240
 11090  012E  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11091  012F  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11092  0130  1D03               	btfss	3,2
 11093  0131  2949               	goto	i1l5358
 11094                           
 11095                           ;PS_2.c: 274: {
 11096                           ;PS_2.c: 275: PS_2_Read_Data_First = PS_2_ScanCodes[0];
 11097  0132  0021               	movlb	1	; select bank1
 11098  0133  0857               	movf	_PS_2_ScanCodes^(0+128),w
 11099  0134  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11100  0135  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11101  0136  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11102  0137  0023               	movlb	3	; select bank3
 11103  0138  00E2               	movwf	_PS_2_Read_Data_First^(0+384)
 11104  0139  0021               	movlb	1	; select bank1
 11105  013A  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11106  013B  0023               	movlb	3	; select bank3
 11107  013C  00E3               	movwf	(_PS_2_Read_Data_First+1)^(0+384)
 11108                           
 11109                           ;PS_2.c: 276: PS_2_Read_Data_Second = PS_2_ScanCodes[1];
 11110  013D  0021               	movlb	1	; select bank1
 11111  013E  0858               	movf	(_PS_2_ScanCodes^(0+128)+1),w
 11112  013F  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11113  0140  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11114  0141  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11115  0142  0023               	movlb	3	; select bank3
 11116  0143  00E4               	movwf	_PS_2_Read_Data_Second^(0+384)
 11117  0144  0021               	movlb	1	; select bank1
 11118  0145  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11119  0146  0023               	movlb	3	; select bank3
 11120  0147  00E5               	movwf	(_PS_2_Read_Data_Second+1)^(0+384)
 11121  0148  2998               	goto	i1l5386
 11122  0149                     i1l5358:	
 11123                           ;PS_2.c: 279: }
 11124                           
 11125                           ;PS_2.c: 278: BufferShiftBack(PS_2_ScanCodes,2,12);
 11126                           
 11127                           ;PS_2.c: 277: PS_2_Buffer_items -= 2;
 11128                           
 11129                           
 11130                           ;PS_2.c: 280: else if(PS_2_Read_Data_First == 0xE0)
 11131  0149  30E0               	movlw	224
 11132  014A  0023               	movlb	3	; select bank3
 11133  014B  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11134  014C  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11135  014D  1D03               	btfss	3,2
 11136  014E  299D               	goto	i1l5390
 11137                           
 11138                           ;PS_2.c: 281: {
 11139                           ;PS_2.c: 282: PS_2_Read_Data_Second = PS_2_ScanCodes[1];
 11140  014F  0021               	movlb	1	; select bank1
 11141  0150  0858               	movf	(_PS_2_ScanCodes^(0+128)+1),w
 11142  0151  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11143  0152  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11144  0153  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11145  0154  0023               	movlb	3	; select bank3
 11146  0155  00E4               	movwf	_PS_2_Read_Data_Second^(0+384)
 11147  0156  0021               	movlb	1	; select bank1
 11148  0157  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11149  0158  0023               	movlb	3	; select bank3
 11150  0159  00E5               	movwf	(_PS_2_Read_Data_Second+1)^(0+384)
 11151                           
 11152                           ;PS_2.c: 283: if(PS_2_Read_Data_Second == 0x12)
 11153  015A  3012               	movlw	18
 11154  015B  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11155  015C  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11156  015D  1D03               	btfss	3,2
 11157  015E  2972               	goto	i1l5370
 11158                           
 11159                           ;PS_2.c: 284: {
 11160                           ;PS_2.c: 286: PS_2_Read_Data_First = 0;
 11161  015F  01E2               	clrf	_PS_2_Read_Data_First^(0+384)
 11162  0160  01E3               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
 11163                           
 11164                           ;PS_2.c: 287: PS_2_Read_Data_Second = 0;
 11165  0161  01E4               	clrf	_PS_2_Read_Data_Second^(0+384)
 11166  0162  01E5               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
 11167                           
 11168                           ;PS_2.c: 288: PS_2_Buffer_items -= 4;
 11169  0163  3004               	movlw	4
 11170  0164  0021               	movlb	1	; select bank1
 11171  0165  02D1               	subwf	_PS_2_Buffer_items^(0+128),f
 11172                           
 11173                           ;PS_2.c: 289: BufferShiftBack(PS_2_ScanCodes,4,12);
 11174  0166  3004               	movlw	4
 11175  0167  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11176  0168  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11177  0169  00F0               	movwf	BufferShiftBack@shift
 11178  016A  300C               	movlw	12
 11179  016B  00BD               	movwf	(??_Process_PS2_ScanCode+1)^(0+128)
 11180  016C  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11181  016D  00F1               	movwf	BufferShiftBack@size
 11182  016E  30D7               	movlw	(low (_PS_2_ScanCodes| 0))& (0+255)
 11183  016F  319C  2459  3181   	fcall	_BufferShiftBack
 11184  0172                     i1l5370:	
 11185                           
 11186                           ;PS_2.c: 290: }
 11187                           ;PS_2.c: 291: if(PS_2_Read_Data_Second == 0xF0)
 11188  0172  30F0               	movlw	240
 11189  0173  0023               	movlb	3	; select bank3
 11190  0174  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11191  0175  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11192  0176  1D03               	btfss	3,2
 11193  0177  2998               	goto	i1l5386
 11194                           
 11195                           ;PS_2.c: 292: {
 11196                           ;PS_2.c: 293: PS_2_Read_Data_Third = PS_2_ScanCodes[2];
 11197  0178  0021               	movlb	1	; select bank1
 11198  0179  0859               	movf	(_PS_2_ScanCodes^(0+128)+2),w
 11199  017A  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11200  017B  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11201  017C  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11202  017D  0023               	movlb	3	; select bank3
 11203  017E  00E6               	movwf	_PS_2_Read_Data_Third^(0+384)
 11204  017F  0021               	movlb	1	; select bank1
 11205  0180  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11206  0181  0023               	movlb	3	; select bank3
 11207  0182  00E7               	movwf	(_PS_2_Read_Data_Third+1)^(0+384)
 11208                           
 11209                           ;PS_2.c: 294: if(PS_2_Read_Data_Third == 0x7C)
 11210  0183  307C               	movlw	124
 11211  0184  0666               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 11212  0185  0467               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11213  0186  1D03               	btfss	3,2
 11214  0187  2993               	goto	i1l5382
 11215                           
 11216                           ;PS_2.c: 295: {
 11217                           ;PS_2.c: 297: PS_2_Read_Data_First = 0;
 11218  0188  01E2               	clrf	_PS_2_Read_Data_First^(0+384)
 11219  0189  01E3               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
 11220                           
 11221                           ;PS_2.c: 298: PS_2_Read_Data_Second = 0;
 11222  018A  01E4               	clrf	_PS_2_Read_Data_Second^(0+384)
 11223  018B  01E5               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
 11224                           
 11225                           ;PS_2.c: 299: PS_2_Read_Data_Third = 0;
 11226  018C  01E6               	clrf	_PS_2_Read_Data_Third^(0+384)
 11227  018D  01E7               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
 11228                           
 11229                           ;PS_2.c: 300: PS_2_Buffer_items -= 6;
 11230  018E  3006               	movlw	6
 11231  018F  0021               	movlb	1	; select bank1
 11232  0190  02D1               	subwf	_PS_2_Buffer_items^(0+128),f
 11233                           
 11234                           ;PS_2.c: 301: BufferShiftBack(PS_2_ScanCodes,6,12);
 11235  0191  3006               	movlw	6
 11236  0192  29B3               	goto	L12
 11237  0193                     i1l5382:	
 11238                           ;PS_2.c: 302: }
 11239                           
 11240                           
 11241                           ;PS_2.c: 303: else
 11242                           ;PS_2.c: 304: {
 11243                           ;PS_2.c: 305: PS_2_Buffer_items -= 3;
 11244  0193  3003               	movlw	3
 11245  0194  0021               	movlb	1	; select bank1
 11246  0195  02D1               	subwf	_PS_2_Buffer_items^(0+128),f
 11247                           
 11248                           ;PS_2.c: 306: BufferShiftBack(PS_2_ScanCodes,3,12);
 11249  0196  3003               	movlw	3
 11250  0197  29B3               	goto	L12
 11251  0198                     i1l5386:	
 11252                           ;PS_2.c: 307: }
 11253                           ;PS_2.c: 308: }
 11254                           
 11255                           
 11256                           ;PS_2.c: 309: else
 11257                           ;PS_2.c: 310: {
 11258                           ;PS_2.c: 311: PS_2_Buffer_items -= 2;
 11259  0198  3002               	movlw	2
 11260  0199  0021               	movlb	1	; select bank1
 11261  019A  02D1               	subwf	_PS_2_Buffer_items^(0+128),f
 11262                           
 11263                           ;PS_2.c: 312: BufferShiftBack(PS_2_ScanCodes,2,12);
 11264  019B  3002               	movlw	2
 11265  019C  29B3               	goto	L12
 11266  019D                     i1l5390:	
 11267                           ;PS_2.c: 313: }
 11268                           ;PS_2.c: 314: }
 11269                           
 11270                           
 11271                           ;PS_2.c: 315: else if(PS_2_Read_Data_First == 0xE1)
 11272  019D  30E1               	movlw	225
 11273  019E  0023               	movlb	3	; select bank3
 11274  019F  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11275  01A0  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11276  01A1  1D03               	btfss	3,2
 11277  01A2  29BA               	goto	i1l5400
 11278                           
 11279                           ;PS_2.c: 316: {
 11280                           ;PS_2.c: 321: PS_2_Read_Data_First = 0xE0;
 11281  01A3  30E0               	movlw	224
 11282  01A4  00E2               	movwf	_PS_2_Read_Data_First^(0+384)
 11283  01A5  3000               	movlw	0
 11284  01A6  00E3               	movwf	(_PS_2_Read_Data_First^(0+384)+1)
 11285                           
 11286                           ;PS_2.c: 322: PS_2_Read_Data_Second = 0x69;
 11287  01A7  3069               	movlw	105
 11288  01A8  00E4               	movwf	_PS_2_Read_Data_Second^(0+384)
 11289  01A9  3000               	movlw	0
 11290  01AA  00E5               	movwf	(_PS_2_Read_Data_Second^(0+384)+1)
 11291                           
 11292                           ;PS_2.c: 323: PS_2_Buffer_items -= 8;
 11293  01AB  3008               	movlw	8
 11294  01AC  0021               	movlb	1	; select bank1
 11295  01AD  02D1               	subwf	_PS_2_Buffer_items^(0+128),f
 11296                           
 11297                           ;PS_2.c: 324: shortbreak = 1;
 11298  01AE  0023               	movlb	3	; select bank3
 11299  01AF  01E0               	clrf	Process_PS2_ScanCode@shortbreak^(0+384)
 11300  01B0  0AE0               	incf	Process_PS2_ScanCode@shortbreak^(0+384),f
 11301                           
 11302                           ;PS_2.c: 325: BufferShiftBack(PS_2_ScanCodes,8,12);
 11303  01B1  3008               	movlw	8
 11304  01B2  0021               	movlb	1	; select bank1
 11305  01B3                     L12:	
 11306  01B3  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11307  01B4  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11308  01B5  00F0               	movwf	BufferShiftBack@shift
 11309  01B6  300C               	movlw	12
 11310  01B7  00BD               	movwf	(??_Process_PS2_ScanCode+1)^(0+128)
 11311  01B8  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11312  01B9  29C2               	goto	L8
 11313  01BA                     i1l5400:	
 11314                           ;PS_2.c: 326: }
 11315                           
 11316                           
 11317                           ;PS_2.c: 327: else
 11318                           ;PS_2.c: 328: {
 11319                           ;PS_2.c: 329: PS_2_Buffer_items -= 1;
 11320  01BA  3001               	movlw	1
 11321  01BB  0021               	movlb	1	; select bank1
 11322  01BC  02D1               	subwf	_PS_2_Buffer_items^(0+128),f
 11323                           
 11324                           ;PS_2.c: 330: BufferShiftBack(PS_2_ScanCodes,1,12);
 11325  01BD  01F0               	clrf	BufferShiftBack@shift
 11326  01BE  0AF0               	incf	BufferShiftBack@shift,f
 11327  01BF  300C               	movlw	12
 11328  01C0  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11329  01C1  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11330  01C2                     L8:	
 11331  01C2  00F1               	movwf	BufferShiftBack@size
 11332  01C3  30D7               	movlw	(low (_PS_2_ScanCodes| 0))& (0+255)
 11333  01C4  319C  2459  3181   	fcall	_BufferShiftBack
 11334                           
 11335                           ;PS_2.c: 331: }
 11336                           ;PS_2.c: 334: if(PS_2_Read_Data_Third)
 11337  01C7  0023               	movlb	3	; select bank3
 11338  01C8  0866               	movf	_PS_2_Read_Data_Third^(0+384),w
 11339  01C9  0467               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11340  01CA  1903               	btfsc	3,2
 11341  01CB  29EE               	goto	i1l5422
 11342                           
 11343                           ;PS_2.c: 335: {
 11344                           ;PS_2.c: 337: if(PS_2_Read_Data_First == 0xE0)
 11345  01CC  30E0               	movlw	224
 11346  01CD  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11347  01CE  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11348  01CF  1D03               	btfss	3,2
 11349  01D0  2ACA               	goto	i1l5518
 11350                           
 11351                           ;PS_2.c: 338: {
 11352                           ;PS_2.c: 339: if(PS_2_Read_Data_Second == 0xF0)
 11353  01D1  30F0               	movlw	240
 11354  01D2  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11355  01D3  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11356  01D4  1D03               	btfss	3,2
 11357  01D5  2ACA               	goto	i1l5518
 11358                           
 11359                           ;PS_2.c: 340: {
 11360                           ;PS_2.c: 341: if(PS_2_Read_Data_Third == 0x11 )
 11361  01D6  3011               	movlw	17
 11362  01D7  0666               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 11363  01D8  0467               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11364  01D9  1D03               	btfss	3,2
 11365  01DA  29DD               	goto	i1l5414
 11366                           
 11367                           ;PS_2.c: 342: {
 11368                           ;PS_2.c: 343: LALT = 0;
 11369  01DB  01EA               	clrf	_LALT^(0+384)
 11370                           
 11371                           ;PS_2.c: 344: }
 11372  01DC  2ACA               	goto	i1l5518
 11373  01DD                     i1l5414:	
 11374                           
 11375                           ;PS_2.c: 345: else if(PS_2_Read_Data_Third == 0x14 )
 11376  01DD  3014               	movlw	20
 11377  01DE  0666               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 11378  01DF  0467               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11379  01E0  1D03               	btfss	3,2
 11380  01E1  29E5               	goto	i1l5418
 11381                           
 11382                           ;PS_2.c: 346: {
 11383                           ;PS_2.c: 347: LControl = 0;
 11384  01E2  0021               	movlb	1	; select bank1
 11385  01E3  01CF               	clrf	_LControl^(0+128)
 11386                           
 11387                           ;PS_2.c: 348: }
 11388  01E4  2ACA               	goto	i1l5518
 11389  01E5                     i1l5418:	
 11390                           
 11391                           ;PS_2.c: 349: else if(PS_2_Read_Data_Third == 0x71 )
 11392  01E5  3071               	movlw	113
 11393  01E6  0023               	movlb	3	; select bank3
 11394  01E7  0666               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 11395  01E8  0467               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11396  01E9  1D03               	btfss	3,2
 11397  01EA  2ACA               	goto	i1l5518
 11398                           
 11399                           ;PS_2.c: 350: {
 11400                           ;PS_2.c: 351: Delete = 0;
 11401  01EB  0021               	movlb	1	; select bank1
 11402  01EC  01CE               	clrf	_Delete^(0+128)
 11403                           
 11404                           ;PS_2.c: 352: }
 11405                           ;PS_2.c: 353: }
 11406                           ;PS_2.c: 354: }
 11407                           ;PS_2.c: 355: }
 11408  01ED  2ACA               	goto	i1l5518
 11409  01EE                     i1l5422:	
 11410                           
 11411                           ;PS_2.c: 356: else if(PS_2_Read_Data_Second)
 11412  01EE  0023               	movlb	3	; select bank3
 11413  01EF  0864               	movf	_PS_2_Read_Data_Second^(0+384),w
 11414  01F0  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11415  01F1  1903               	btfsc	3,2
 11416  01F2  2ACA               	goto	i1l5518
 11417                           
 11418                           ;PS_2.c: 357: {
 11419                           ;PS_2.c: 359: if(PS_2_Read_Data_First == 0xF0)
 11420  01F3  30F0               	movlw	240
 11421  01F4  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11422  01F5  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11423  01F6  1D03               	btfss	3,2
 11424  01F7  2A75               	goto	i1l5486
 11425                           
 11426                           ;PS_2.c: 360: {
 11427                           ;PS_2.c: 362: if(PS_2_Read_Data_Second == 0x12)
 11428  01F8  3012               	movlw	18
 11429  01F9  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11430  01FA  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11431  01FB  1D03               	btfss	3,2
 11432  01FC  29FF               	goto	i1l5430
 11433                           
 11434                           ;PS_2.c: 363: {
 11435                           ;PS_2.c: 364: Right_Shift_Key =0;
 11436  01FD  01EE               	clrf	_Right_Shift_Key^(0+384)
 11437                           
 11438                           ;PS_2.c: 365: }
 11439  01FE  2A14               	goto	i1l5442
 11440  01FF                     i1l5430:	
 11441                           
 11442                           ;PS_2.c: 366: else if(PS_2_Read_Data_Second == 0x59)
 11443  01FF  3059               	movlw	89
 11444  0200  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11445  0201  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11446  0202  1D03               	btfss	3,2
 11447  0203  2A06               	goto	i1l5434
 11448                           
 11449                           ;PS_2.c: 367: {
 11450                           ;PS_2.c: 368: Left_Shift_Key =0;
 11451  0204  01EB               	clrf	_Left_Shift_Key^(0+384)
 11452                           
 11453                           ;PS_2.c: 369: }
 11454  0205  2A14               	goto	i1l5442
 11455  0206                     i1l5434:	
 11456                           
 11457                           ;PS_2.c: 370: else if(PS_2_Read_Data_Second == 0x14)
 11458  0206  3014               	movlw	20
 11459  0207  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11460  0208  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11461  0209  1D03               	btfss	3,2
 11462  020A  2A0E               	goto	i1l5438
 11463                           
 11464                           ;PS_2.c: 371: {
 11465                           ;PS_2.c: 372: RControl =0;
 11466  020B  0021               	movlb	1	; select bank1
 11467  020C  01D3               	clrf	_RControl^(0+128)
 11468                           
 11469                           ;PS_2.c: 373: }
 11470  020D  2A14               	goto	i1l5442
 11471  020E                     i1l5438:	
 11472                           
 11473                           ;PS_2.c: 374: else if(PS_2_Read_Data_Second == 0x11 )
 11474  020E  3011               	movlw	17
 11475  020F  0023               	movlb	3	; select bank3
 11476  0210  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11477  0211  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11478  0212  1903               	btfsc	3,2
 11479                           
 11480                           ;PS_2.c: 375: {
 11481                           ;PS_2.c: 376: RALT =0;
 11482  0213  01ED               	clrf	_RALT^(0+384)
 11483  0214                     i1l5442:	
 11484                           
 11485                           ;PS_2.c: 377: }
 11486                           ;PS_2.c: 378: if(PS_2_Read_Data_Second == 0x59 || PS_2_Read_Data_Second == 0x12)
 11487  0214  3059               	movlw	89
 11488  0215  0023               	movlb	3	; select bank3
 11489  0216  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11490  0217  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11491  0218  1903               	btfsc	3,2
 11492  0219  2A1F               	goto	i1l5446
 11493  021A  3012               	movlw	18
 11494  021B  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11495  021C  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11496  021D  1D03               	btfss	3,2
 11497  021E  2A6D               	goto	i1l5482
 11498  021F                     i1l5446:	
 11499                           
 11500                           ;PS_2.c: 379: {
 11501                           ;PS_2.c: 380: if(Right_Shift_Key == 0 && Left_Shift_Key == 0)
 11502  021F  086E               	movf	_Right_Shift_Key^(0+384),w
 11503  0220  1D03               	btfss	3,2
 11504  0221  2ACA               	goto	i1l5518
 11505  0222  086B               	movf	_Left_Shift_Key^(0+384),w
 11506  0223  1D03               	btfss	3,2
 11507  0224  2ACA               	goto	i1l5518
 11508                           
 11509                           ;PS_2.c: 381: {
 11510                           ;PS_2.c: 382: if(!Send_PS2(0xED))
 11511  0225  30ED               	movlw	237
 11512  0226  318C  24DE  3181   	fcall	i1_Send_PS2
 11513  0229  3A00               	xorlw	0
 11514  022A  1D03               	skipz
 11515  022B  2A35               	goto	i1l5456
 11516                           
 11517                           ;PS_2.c: 383: {
 11518                           ;PS_2.c: 384: if(!Send_PS2(0x00))
 11519  022C  3000               	movlw	0
 11520  022D  318C  24DE  3181   	fcall	i1_Send_PS2
 11521  0230  3A00               	xorlw	0
 11522  0231  1D03               	skipz
 11523  0232  2A35               	goto	i1l5456
 11524                           
 11525                           ;PS_2.c: 385: {
 11526                           ;PS_2.c: 386: Shift_Key = 0;
 11527  0233  0023               	movlb	3	; select bank3
 11528  0234  01EF               	clrf	_Shift_Key^(0+384)
 11529  0235                     i1l5456:	
 11530                           
 11531                           ;PS_2.c: 387: }
 11532                           ;PS_2.c: 388: }
 11533                           ;PS_2.c: 389: if(Caps_Lock)
 11534  0235  0023               	movlb	3	; select bank3
 11535  0236  0869               	movf	_Caps_Lock^(0+384),w
 11536  0237  1903               	btfsc	3,2
 11537  0238  2A53               	goto	i1l5470
 11538                           
 11539                           ;PS_2.c: 390: {
 11540                           ;PS_2.c: 391: CapsCount=0;
 11541  0239  01E8               	clrf	_CapsCount^(0+384)
 11542  023A                     i1l5468:	
 11543                           ;PS_2.c: 392: while(CapsCount<10)
 11544                           
 11545  023A  300A               	movlw	10
 11546  023B  0268               	subwf	_CapsCount^(0+384),w
 11547  023C  1803               	btfsc	3,0
 11548  023D  2ACA               	goto	i1l5518
 11549                           
 11550                           ;PS_2.c: 393: {
 11551                           ;PS_2.c: 394: if(!Send_PS2(0xED))
 11552  023E  30ED               	movlw	237
 11553  023F  318C  24DE  3181   	fcall	i1_Send_PS2
 11554  0242  3A00               	xorlw	0
 11555  0243  1D03               	skipz
 11556  0244  2A4C               	goto	i1l5466
 11557                           
 11558                           ;PS_2.c: 395: {
 11559                           ;PS_2.c: 396: if(!Send_PS2(0x04))
 11560  0245  3004               	movlw	4
 11561  0246  318C  24DE  3181   	fcall	i1_Send_PS2
 11562  0249  3A00               	xorlw	0
 11563  024A  1903               	btfsc	3,2
 11564  024B  2ACA               	goto	i1l5518
 11565  024C                     i1l5466:	
 11566                           ;PS_2.c: 397: {
 11567                           ;PS_2.c: 398: break;
 11568                           
 11569                           
 11570                           ;PS_2.c: 399: }
 11571                           ;PS_2.c: 400: }
 11572                           ;PS_2.c: 401: CapsCount++;
 11573  024C  3001               	movlw	1
 11574  024D  0021               	movlb	1	; select bank1
 11575  024E  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11576  024F  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11577  0250  0023               	movlb	3	; select bank3
 11578  0251  07E8               	addwf	_CapsCount^(0+384),f
 11579  0252  2A3A               	goto	i1l5468
 11580  0253                     i1l5470:	
 11581                           ;PS_2.c: 402: }
 11582                           ;PS_2.c: 403: }
 11583                           
 11584                           
 11585                           ;PS_2.c: 404: else
 11586                           ;PS_2.c: 405: {
 11587                           ;PS_2.c: 406: CapsCount=0;
 11588  0253  01E8               	clrf	_CapsCount^(0+384)
 11589  0254                     i1l5480:	
 11590                           ;PS_2.c: 407: while(CapsCount<10)
 11591                           
 11592  0254  300A               	movlw	10
 11593  0255  0268               	subwf	_CapsCount^(0+384),w
 11594  0256  1803               	btfsc	3,0
 11595  0257  2ACA               	goto	i1l5518
 11596                           
 11597                           ;PS_2.c: 408: {
 11598                           ;PS_2.c: 409: if(!Send_PS2(0xED))
 11599  0258  30ED               	movlw	237
 11600  0259  318C  24DE  3181   	fcall	i1_Send_PS2
 11601  025C  3A00               	xorlw	0
 11602  025D  1D03               	skipz
 11603  025E  2A66               	goto	i1l5478
 11604                           
 11605                           ;PS_2.c: 410: {
 11606                           ;PS_2.c: 411: if(!Send_PS2(0x00))
 11607  025F  3000               	movlw	0
 11608  0260  318C  24DE  3181   	fcall	i1_Send_PS2
 11609  0263  3A00               	xorlw	0
 11610  0264  1903               	btfsc	3,2
 11611  0265  2ACA               	goto	i1l5518
 11612  0266                     i1l5478:	
 11613                           ;PS_2.c: 412: {
 11614                           ;PS_2.c: 413: break;
 11615                           
 11616                           
 11617                           ;PS_2.c: 414: }
 11618                           ;PS_2.c: 415: }
 11619                           ;PS_2.c: 416: CapsCount++;
 11620  0266  3001               	movlw	1
 11621  0267  0021               	movlb	1	; select bank1
 11622  0268  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11623  0269  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11624  026A  0023               	movlb	3	; select bank3
 11625  026B  07E8               	addwf	_CapsCount^(0+384),f
 11626  026C  2A54               	goto	i1l5480
 11627  026D                     i1l5482:	
 11628                           ;PS_2.c: 417: }
 11629                           ;PS_2.c: 418: }
 11630                           ;PS_2.c: 419: }
 11631                           ;PS_2.c: 420: }
 11632                           
 11633                           
 11634                           ;PS_2.c: 421: else if(PS_2_Read_Data_Second == 0x58)
 11635  026D  3058               	movlw	88
 11636  026E  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11637  026F  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11638  0270  1D03               	btfss	3,2
 11639  0271  2ACA               	goto	i1l5518
 11640                           
 11641                           ;PS_2.c: 422: {
 11642                           ;PS_2.c: 423: Caps_Lock_Key = 0;
 11643  0272  0021               	movlb	1	; select bank1
 11644  0273  01CC               	clrf	_Caps_Lock_Key^(0+128)
 11645                           
 11646                           ;PS_2.c: 424: }
 11647                           ;PS_2.c: 425: }
 11648  0274  2ACA               	goto	i1l5518
 11649  0275                     i1l5486:	
 11650                           
 11651                           ;PS_2.c: 426: else if(PS_2_Read_Data_First == 0xE0)
 11652  0275  30E0               	movlw	224
 11653  0276  0023               	movlb	3	; select bank3
 11654  0277  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11655  0278  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11656  0279  1D03               	btfss	3,2
 11657  027A  2ACA               	goto	i1l5518
 11658                           
 11659                           ;PS_2.c: 427: {
 11660                           ;PS_2.c: 429: if(PS_2_Read_Data_Second == 0x11 )
 11661  027B  3011               	movlw	17
 11662  027C  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11663  027D  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11664  027E  1D03               	btfss	3,2
 11665  027F  2A83               	goto	i1l5492
 11666                           
 11667                           ;PS_2.c: 430: {
 11668                           ;PS_2.c: 431: LALT = 1;
 11669  0280  01EA               	clrf	_LALT^(0+384)
 11670  0281  0AEA               	incf	_LALT^(0+384),f
 11671                           
 11672                           ;PS_2.c: 432: }
 11673  0282  2A95               	goto	i1l718
 11674  0283                     i1l5492:	
 11675                           
 11676                           ;PS_2.c: 433: else if(PS_2_Read_Data_Second == 0x14 )
 11677  0283  3014               	movlw	20
 11678  0284  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11679  0285  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11680  0286  1D03               	btfss	3,2
 11681  0287  2A8C               	goto	i1l5496
 11682                           
 11683                           ;PS_2.c: 434: {
 11684                           ;PS_2.c: 435: LControl = 1;
 11685  0288  0021               	movlb	1	; select bank1
 11686  0289  01CF               	clrf	_LControl^(0+128)
 11687  028A  0ACF               	incf	_LControl^(0+128),f
 11688                           
 11689                           ;PS_2.c: 436: }
 11690  028B  2A95               	goto	i1l718
 11691  028C                     i1l5496:	
 11692                           
 11693                           ;PS_2.c: 437: else if(PS_2_Read_Data_Second == 0x71 )
 11694  028C  3071               	movlw	113
 11695  028D  0023               	movlb	3	; select bank3
 11696  028E  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11697  028F  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11698  0290  1D03               	btfss	3,2
 11699  0291  2A95               	goto	i1l718
 11700                           
 11701                           ;PS_2.c: 438: {
 11702                           ;PS_2.c: 439: Delete = 1;
 11703  0292  0021               	movlb	1	; select bank1
 11704  0293  01CE               	clrf	_Delete^(0+128)
 11705  0294  0ACE               	incf	_Delete^(0+128),f
 11706  0295                     i1l718:	
 11707                           
 11708                           ;PS_2.c: 440: }
 11709                           ;PS_2.c: 441: if(((RControl || LControl) + (LALT || RALT) + Delete) != 3)
 11710  0295  0023               	movlb	3	; select bank3
 11711  0296  01DC               	clrf	_Process_PS2_ScanCode$854^(0+384)
 11712  0297  0ADC               	incf	_Process_PS2_ScanCode$854^(0+384),f
 11713  0298  086A               	movf	_LALT^(0+384),w
 11714  0299  1D03               	btfss	3,2
 11715  029A  2A9F               	goto	i1l5506
 11716  029B  086D               	movf	_RALT^(0+384),w
 11717  029C  1D03               	btfss	3,2
 11718  029D  2A9F               	goto	i1l5506
 11719  029E  01DC               	clrf	_Process_PS2_ScanCode$854^(0+384)
 11720  029F                     i1l5506:	
 11721  029F  01DD               	clrf	_Process_PS2_ScanCode$855^(0+384)
 11722  02A0  0ADD               	incf	_Process_PS2_ScanCode$855^(0+384),f
 11723  02A1  0021               	movlb	1	; select bank1
 11724  02A2  0853               	movf	_RControl^(0+128),w
 11725  02A3  1D03               	btfss	3,2
 11726  02A4  2AAA               	goto	i1l5514
 11727  02A5  084F               	movf	_LControl^(0+128),w
 11728  02A6  1D03               	btfss	3,2
 11729  02A7  2AAA               	goto	i1l5514
 11730  02A8  0023               	movlb	3	; select bank3
 11731  02A9  01DD               	clrf	_Process_PS2_ScanCode$855^(0+384)
 11732  02AA                     i1l5514:	
 11733  02AA  0021               	movlb	1	; select bank1
 11734  02AB  084E               	movf	_Delete^(0+128),w
 11735  02AC  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11736  02AD  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11737  02AE  0023               	movlb	3	; select bank3
 11738  02AF  085D               	movf	_Process_PS2_ScanCode$855^(0+384),w
 11739  02B0  075C               	addwf	_Process_PS2_ScanCode$854^(0+384),w
 11740  02B1  0021               	movlb	1	; select bank1
 11741  02B2  00BE               	movwf	(??_Process_PS2_ScanCode+2)^(0+128)
 11742  02B3  01BF               	clrf	((??_Process_PS2_ScanCode+2)^(0+128)+1)
 11743  02B4  0DBF               	rlf	(??_Process_PS2_ScanCode+3)^(0+128),f
 11744  02B5  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11745  02B6  073E               	addwf	(??_Process_PS2_ScanCode+2)^(0+128),w
 11746  02B7  00C0               	movwf	(??_Process_PS2_ScanCode+4)^(0+128)
 11747  02B8  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11748  02B9  3D3F               	addwfc	(??_Process_PS2_ScanCode+3)^(0+128),w
 11749  02BA  00C1               	movwf	(??_Process_PS2_ScanCode+5)^(0+128)
 11750  02BB  3003               	movlw	3
 11751  02BC  0640               	xorwf	(??_Process_PS2_ScanCode+4)^(0+128),w
 11752  02BD  0441               	iorwf	((??_Process_PS2_ScanCode+4)^(0+128)+1),w
 11753  02BE  1903               	btfsc	3,2
 11754  02BF  2ACA               	goto	i1l5518
 11755                           
 11756                           ;PS_2.c: 442: {
 11757                           ;PS_2.c: 444: temp = Decode_Scan_Code_FunctionE0(PS_2_Read_Data_Second);
 11758  02C0  0023               	movlb	3	; select bank3
 11759  02C1  0864               	movf	_PS_2_Read_Data_Second^(0+384),w
 11760  02C2  3199  214B  3181   	fcall	_Decode_Scan_Code_FunctionE0
 11761  02C5  0021               	movlb	1	; select bank1
 11762  02C6  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11763  02C7  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11764  02C8  0023               	movlb	3	; select bank3
 11765  02C9  00E1               	movwf	Process_PS2_ScanCode@temp^(0+384)
 11766  02CA                     i1l5518:	
 11767                           
 11768                           ;PS_2.c: 445: }
 11769                           ;PS_2.c: 446: }
 11770                           ;PS_2.c: 447: }
 11771                           ;PS_2.c: 448: if(PS_2_Read_Data_First != 0 && PS_2_Read_Data_Second == 0 &&
 11772                           ;PS_2.c: 449: PS_2_Read_Data_Third == 0)
 11773  02CA  0023               	movlb	3	; select bank3
 11774  02CB  0862               	movf	_PS_2_Read_Data_First^(0+384),w
 11775  02CC  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11776  02CD  1903               	btfsc	3,2
 11777  02CE  2C19               	goto	i1l5664
 11778  02CF  0864               	movf	_PS_2_Read_Data_Second^(0+384),w
 11779  02D0  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11780  02D1  1D03               	btfss	3,2
 11781  02D2  2C19               	goto	i1l5664
 11782  02D3  0866               	movf	_PS_2_Read_Data_Third^(0+384),w
 11783  02D4  0467               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11784  02D5  1D03               	btfss	3,2
 11785  02D6  2C19               	goto	i1l5664
 11786                           
 11787                           ;PS_2.c: 450: {
 11788                           ;PS_2.c: 452: if(PS_2_Read_Data_First == 0x12)
 11789  02D7  3012               	movlw	18
 11790  02D8  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11791  02D9  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11792  02DA  1D03               	btfss	3,2
 11793  02DB  2ADF               	goto	i1l5528
 11794                           
 11795                           ;PS_2.c: 453: {
 11796                           ;PS_2.c: 454: Right_Shift_Key = 1;
 11797  02DC  01EE               	clrf	_Right_Shift_Key^(0+384)
 11798  02DD  0AEE               	incf	_Right_Shift_Key^(0+384),f
 11799                           
 11800                           ;PS_2.c: 455: }
 11801  02DE  2AE6               	goto	i1l5532
 11802  02DF                     i1l5528:	
 11803                           
 11804                           ;PS_2.c: 456: else if(PS_2_Read_Data_First == 0x59)
 11805  02DF  3059               	movlw	89
 11806  02E0  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11807  02E1  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11808  02E2  1D03               	btfss	3,2
 11809  02E3  2AE6               	goto	i1l5532
 11810                           
 11811                           ;PS_2.c: 457: {
 11812                           ;PS_2.c: 458: Left_Shift_Key = 1;
 11813  02E4  01EB               	clrf	_Left_Shift_Key^(0+384)
 11814  02E5  0AEB               	incf	_Left_Shift_Key^(0+384),f
 11815  02E6                     i1l5532:	
 11816                           
 11817                           ;PS_2.c: 459: }
 11818                           ;PS_2.c: 460: if((Right_Shift_Key == 1 && Right_Shift_Key_old == 0) || (Left_Shift_Key =
      +                          = 1 && Left_Shift_Key_old == 0))
 11819  02E6  036E               	decf	_Right_Shift_Key^(0+384),w
 11820  02E7  1D03               	btfss	3,2
 11821  02E8  2AED               	goto	i1l5536
 11822  02E9  0021               	movlb	1	; select bank1
 11823  02EA  0855               	movf	_Right_Shift_Key_old^(0+128),w
 11824  02EB  1903               	btfsc	3,2
 11825  02EC  2AF5               	goto	i1l5540
 11826  02ED                     i1l5536:	
 11827  02ED  0023               	movlb	3	; select bank3
 11828  02EE  036B               	decf	_Left_Shift_Key^(0+384),w
 11829  02EF  1D03               	btfss	3,2
 11830  02F0  2B37               	goto	i1l5568
 11831  02F1  0021               	movlb	1	; select bank1
 11832  02F2  0850               	movf	_Left_Shift_Key_old^(0+128),w
 11833  02F3  1D03               	btfss	3,2
 11834  02F4  2B37               	goto	i1l5568
 11835  02F5                     i1l5540:	
 11836                           
 11837                           ;PS_2.c: 461: {
 11838                           ;PS_2.c: 463: if(!Send_PS2(0xED))
 11839  02F5  30ED               	movlw	237
 11840  02F6  318C  24DE  3181   	fcall	i1_Send_PS2
 11841  02F9  3A00               	xorlw	0
 11842  02FA  1D03               	skipz
 11843  02FB  2B37               	goto	i1l5568
 11844                           
 11845                           ;PS_2.c: 464: {
 11846                           ;PS_2.c: 465: if(Caps_Lock)
 11847  02FC  0023               	movlb	3	; select bank3
 11848  02FD  0869               	movf	_Caps_Lock^(0+384),w
 11849  02FE  1903               	btfsc	3,2
 11850  02FF  2B1A               	goto	i1l5556
 11851                           
 11852                           ;PS_2.c: 466: {
 11853                           ;PS_2.c: 467: CapsCount=0;
 11854  0300  01E8               	clrf	_CapsCount^(0+384)
 11855  0301                     i1l5554:	
 11856                           ;PS_2.c: 468: while(CapsCount<10)
 11857                           
 11858  0301  300A               	movlw	10
 11859  0302  0268               	subwf	_CapsCount^(0+384),w
 11860  0303  1803               	btfsc	3,0
 11861  0304  2B37               	goto	i1l5568
 11862                           
 11863                           ;PS_2.c: 469: {
 11864                           ;PS_2.c: 470: if(!Send_PS2(0xED))
 11865  0305  30ED               	movlw	237
 11866  0306  318C  24DE  3181   	fcall	i1_Send_PS2
 11867  0309  3A00               	xorlw	0
 11868  030A  1D03               	skipz
 11869  030B  2B13               	goto	i1l5552
 11870                           
 11871                           ;PS_2.c: 471: {
 11872                           ;PS_2.c: 472: if(!Send_PS2(0x05))
 11873  030C  3005               	movlw	5
 11874  030D  318C  24DE  3181   	fcall	i1_Send_PS2
 11875  0310  3A00               	xorlw	0
 11876  0311  1903               	btfsc	3,2
 11877  0312  2B34               	goto	i1l5562
 11878  0313                     i1l5552:	
 11879                           ;PS_2.c: 475: break;
 11880                           
 11881                           ;PS_2.c: 473: {
 11882                           ;PS_2.c: 474: Shift_Key = 1;
 11883                           
 11884                           
 11885                           ;PS_2.c: 476: }
 11886                           ;PS_2.c: 477: }
 11887                           ;PS_2.c: 478: CapsCount++;
 11888  0313  3001               	movlw	1
 11889  0314  0021               	movlb	1	; select bank1
 11890  0315  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11891  0316  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11892  0317  0023               	movlb	3	; select bank3
 11893  0318  07E8               	addwf	_CapsCount^(0+384),f
 11894  0319  2B01               	goto	i1l5554
 11895  031A                     i1l5556:	
 11896                           ;PS_2.c: 479: }
 11897                           ;PS_2.c: 480: }
 11898                           
 11899                           
 11900                           ;PS_2.c: 481: else
 11901                           ;PS_2.c: 482: {
 11902                           ;PS_2.c: 483: CapsCount=0;
 11903  031A  01E8               	clrf	_CapsCount^(0+384)
 11904                           
 11905                           ;PS_2.c: 484: while(CapsCount<10)
 11906  031B  2B22               	goto	i1l5566
 11907  031C                     i1l5564:	
 11908                           ;PS_2.c: 491: break;
 11909                           
 11910                           
 11911                           ;PS_2.c: 492: }
 11912                           ;PS_2.c: 493: }
 11913                           ;PS_2.c: 494: CapsCount++;
 11914  031C  3001               	movlw	1
 11915  031D  0021               	movlb	1	; select bank1
 11916  031E  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11917  031F  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11918  0320  0023               	movlb	3	; select bank3
 11919  0321  07E8               	addwf	_CapsCount^(0+384),f
 11920  0322                     i1l5566:	
 11921  0322  300A               	movlw	10
 11922  0323  0268               	subwf	_CapsCount^(0+384),w
 11923  0324  1803               	btfsc	3,0
 11924  0325  2B37               	goto	i1l5568
 11925                           
 11926                           ;PS_2.c: 485: {
 11927                           ;PS_2.c: 486: if(!Send_PS2(0xED))
 11928  0326  30ED               	movlw	237
 11929  0327  318C  24DE  3181   	fcall	i1_Send_PS2
 11930  032A  3A00               	xorlw	0
 11931  032B  1D03               	skipz
 11932  032C  2B1C               	goto	i1l5564
 11933                           
 11934                           ;PS_2.c: 487: {
 11935                           ;PS_2.c: 488: if(!Send_PS2(0x01))
 11936  032D  3001               	movlw	1
 11937  032E  318C  24DE  3181   	fcall	i1_Send_PS2
 11938  0331  3A00               	xorlw	0
 11939  0332  1D03               	skipz
 11940  0333  2B1C               	goto	i1l5564
 11941  0334                     i1l5562:	
 11942                           
 11943                           ;PS_2.c: 489: {
 11944                           ;PS_2.c: 490: Shift_Key = 1;
 11945  0334  0023               	movlb	3	; select bank3
 11946  0335  01EF               	clrf	_Shift_Key^(0+384)
 11947  0336  0AEF               	incf	_Shift_Key^(0+384),f
 11948  0337                     i1l5568:	
 11949                           
 11950                           ;PS_2.c: 495: }
 11951                           ;PS_2.c: 496: }
 11952                           ;PS_2.c: 497: }
 11953                           ;PS_2.c: 498: }
 11954                           ;PS_2.c: 499: if(PS_2_Read_Data_First == 0x14 )
 11955  0337  3014               	movlw	20
 11956  0338  0023               	movlb	3	; select bank3
 11957  0339  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11958  033A  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11959  033B  1D03               	btfss	3,2
 11960  033C  2B41               	goto	i1l5572
 11961                           
 11962                           ;PS_2.c: 500: {
 11963                           ;PS_2.c: 501: RControl = 1;
 11964  033D  0021               	movlb	1	; select bank1
 11965  033E  01D3               	clrf	_RControl^(0+128)
 11966  033F  0AD3               	incf	_RControl^(0+128),f
 11967                           
 11968                           ;PS_2.c: 502: }
 11969  0340  2C0C               	goto	i1l750
 11970  0341                     i1l5572:	
 11971                           
 11972                           ;PS_2.c: 503: else if(PS_2_Read_Data_First == 0x11 )
 11973  0341  3011               	movlw	17
 11974  0342  0023               	movlb	3	; select bank3
 11975  0343  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11976  0344  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11977  0345  1D03               	btfss	3,2
 11978  0346  2B4A               	goto	i1l5576
 11979                           
 11980                           ;PS_2.c: 504: {
 11981                           ;PS_2.c: 505: RALT = 1;
 11982  0347  01ED               	clrf	_RALT^(0+384)
 11983  0348  0AED               	incf	_RALT^(0+384),f
 11984                           
 11985                           ;PS_2.c: 506: }
 11986  0349  2C0C               	goto	i1l750
 11987  034A                     i1l5576:	
 11988                           
 11989                           ;PS_2.c: 507: else if(PS_2_Read_Data_First == 0xEE )
 11990  034A  30EE               	movlw	238
 11991  034B  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11992  034C  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11993  034D  1D03               	btfss	3,2
 11994  034E  2B53               	goto	i1l5580
 11995                           
 11996                           ;PS_2.c: 508: {
 11997                           ;PS_2.c: 509: ECHO = 1;
 11998  034F  0024               	movlb	4	; select bank4
 11999  0350  01DF               	clrf	_ECHO^(0+512)
 12000  0351  0ADF               	incf	_ECHO^(0+512),f
 12001                           
 12002                           ;PS_2.c: 510: }
 12003  0352  2C0C               	goto	i1l750
 12004  0353                     i1l5580:	
 12005                           
 12006                           ;PS_2.c: 511: else if(PS_2_Read_Data_First == 0x58)
 12007  0353  3058               	movlw	88
 12008  0354  0023               	movlb	3	; select bank3
 12009  0355  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 12010  0356  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 12011  0357  1D03               	btfss	3,2
 12012  0358  2BD8               	goto	i1l5640
 12013                           
 12014                           ;PS_2.c: 512: {
 12015                           ;PS_2.c: 513: Caps_Lock_Key = 1;
 12016  0359  0021               	movlb	1	; select bank1
 12017  035A  01CC               	clrf	_Caps_Lock_Key^(0+128)
 12018  035B  0ACC               	incf	_Caps_Lock_Key^(0+128),f
 12019                           
 12020                           ;PS_2.c: 514: if(Caps_Lock_Key_old == 0)
 12021  035C  084D               	movf	_Caps_Lock_Key_old^(0+128),w
 12022  035D  1D03               	btfss	3,2
 12023  035E  2C0C               	goto	i1l750
 12024                           
 12025                           ;PS_2.c: 515: {
 12026                           ;PS_2.c: 516: if(Caps_Lock)
 12027  035F  0023               	movlb	3	; select bank3
 12028  0360  0869               	movf	_Caps_Lock^(0+384),w
 12029  0361  1903               	btfsc	3,2
 12030  0362  2B9D               	goto	i1l5614
 12031                           
 12032                           ;PS_2.c: 517: {
 12033                           ;PS_2.c: 518: if(Shift_Key)
 12034  0363  086F               	movf	_Shift_Key^(0+384),w
 12035  0364  1903               	btfsc	3,2
 12036  0365  2B80               	goto	i1l5602
 12037                           
 12038                           ;PS_2.c: 519: {
 12039                           ;PS_2.c: 520: CapsCount=0;
 12040  0366  01E8               	clrf	_CapsCount^(0+384)
 12041  0367                     i1l5600:	
 12042                           ;PS_2.c: 521: while(CapsCount<10)
 12043                           
 12044  0367  300A               	movlw	10
 12045  0368  0268               	subwf	_CapsCount^(0+384),w
 12046  0369  1803               	btfsc	3,0
 12047  036A  2C0C               	goto	i1l750
 12048                           
 12049                           ;PS_2.c: 522: {
 12050                           ;PS_2.c: 523: if(!Send_PS2(0xED))
 12051  036B  30ED               	movlw	237
 12052  036C  318C  24DE  3181   	fcall	i1_Send_PS2
 12053  036F  3A00               	xorlw	0
 12054  0370  1D03               	skipz
 12055  0371  2B79               	goto	i1l5598
 12056                           
 12057                           ;PS_2.c: 524: {
 12058                           ;PS_2.c: 525: if(!Send_PS2(0x01))
 12059  0372  3001               	movlw	1
 12060  0373  318C  24DE  3181   	fcall	i1_Send_PS2
 12061  0376  3A00               	xorlw	0
 12062  0377  1903               	btfsc	3,2
 12063  0378  2B93               	goto	i1l5608
 12064  0379                     i1l5598:	
 12065                           ;PS_2.c: 528: break;
 12066                           
 12067                           ;PS_2.c: 526: {
 12068                           ;PS_2.c: 527: Caps_Lock =0;
 12069                           
 12070                           
 12071                           ;PS_2.c: 529: }
 12072                           ;PS_2.c: 530: }
 12073                           ;PS_2.c: 531: CapsCount++;
 12074  0379  3001               	movlw	1
 12075  037A  0021               	movlb	1	; select bank1
 12076  037B  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12077  037C  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12078  037D  0023               	movlb	3	; select bank3
 12079  037E  07E8               	addwf	_CapsCount^(0+384),f
 12080  037F  2B67               	goto	i1l5600
 12081  0380                     i1l5602:	
 12082                           ;PS_2.c: 532: }
 12083                           ;PS_2.c: 533: }
 12084                           
 12085                           
 12086                           ;PS_2.c: 534: else
 12087                           ;PS_2.c: 535: {
 12088                           ;PS_2.c: 536: CapsCount=0;
 12089  0380  01E8               	clrf	_CapsCount^(0+384)
 12090  0381                     i1l5612:	
 12091                           ;PS_2.c: 537: while(CapsCount<10)
 12092                           
 12093  0381  300A               	movlw	10
 12094  0382  0268               	subwf	_CapsCount^(0+384),w
 12095  0383  1803               	btfsc	3,0
 12096  0384  2C0C               	goto	i1l750
 12097                           
 12098                           ;PS_2.c: 538: {
 12099                           ;PS_2.c: 539: if(!Send_PS2(0xED))
 12100  0385  30ED               	movlw	237
 12101  0386  318C  24DE  3181   	fcall	i1_Send_PS2
 12102  0389  3A00               	xorlw	0
 12103  038A  1D03               	skipz
 12104  038B  2B96               	goto	i1l5610
 12105                           
 12106                           ;PS_2.c: 540: {
 12107                           ;PS_2.c: 541: if(!Send_PS2(0x00))
 12108  038C  3000               	movlw	0
 12109  038D  318C  24DE  3181   	fcall	i1_Send_PS2
 12110  0390  3A00               	xorlw	0
 12111  0391  1D03               	skipz
 12112  0392  2B96               	goto	i1l5610
 12113  0393                     i1l5608:	
 12114                           
 12115                           ;PS_2.c: 542: {
 12116                           ;PS_2.c: 543: Caps_Lock =0;
 12117  0393  0023               	movlb	3	; select bank3
 12118  0394  01E9               	clrf	_Caps_Lock^(0+384)
 12119                           
 12120                           ;PS_2.c: 544: break;
 12121  0395  2C0C               	goto	i1l750
 12122  0396                     i1l5610:	
 12123                           
 12124                           ;PS_2.c: 545: }
 12125                           ;PS_2.c: 546: }
 12126                           ;PS_2.c: 547: CapsCount++;
 12127  0396  3001               	movlw	1
 12128  0397  0021               	movlb	1	; select bank1
 12129  0398  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12130  0399  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12131  039A  0023               	movlb	3	; select bank3
 12132  039B  07E8               	addwf	_CapsCount^(0+384),f
 12133  039C  2B81               	goto	i1l5612
 12134  039D                     i1l5614:	
 12135                           ;PS_2.c: 548: }
 12136                           ;PS_2.c: 549: }
 12137                           ;PS_2.c: 550: }
 12138                           
 12139                           
 12140                           ;PS_2.c: 551: else
 12141                           ;PS_2.c: 552: {
 12142                           ;PS_2.c: 553: if(Shift_Key)
 12143  039D  086F               	movf	_Shift_Key^(0+384),w
 12144  039E  1903               	btfsc	3,2
 12145  039F  2BBA               	goto	i1l5628
 12146                           
 12147                           ;PS_2.c: 554: {
 12148                           ;PS_2.c: 555: CapsCount=0;
 12149  03A0  01E8               	clrf	_CapsCount^(0+384)
 12150  03A1                     i1l5626:	
 12151                           ;PS_2.c: 556: while(CapsCount<10)
 12152                           
 12153  03A1  300A               	movlw	10
 12154  03A2  0268               	subwf	_CapsCount^(0+384),w
 12155  03A3  1803               	btfsc	3,0
 12156  03A4  2C0C               	goto	i1l750
 12157                           
 12158                           ;PS_2.c: 557: {
 12159                           ;PS_2.c: 558: if(!Send_PS2(0xED))
 12160  03A5  30ED               	movlw	237
 12161  03A6  318C  24DE  3181   	fcall	i1_Send_PS2
 12162  03A9  3A00               	xorlw	0
 12163  03AA  1D03               	skipz
 12164  03AB  2BB3               	goto	i1l5624
 12165                           
 12166                           ;PS_2.c: 559: {
 12167                           ;PS_2.c: 560: if(!Send_PS2(0x05))
 12168  03AC  3005               	movlw	5
 12169  03AD  318C  24DE  3181   	fcall	i1_Send_PS2
 12170  03B0  3A00               	xorlw	0
 12171  03B1  1903               	btfsc	3,2
 12172  03B2  2BCD               	goto	i1l5634
 12173  03B3                     i1l5624:	
 12174                           ;PS_2.c: 563: break;
 12175                           
 12176                           ;PS_2.c: 561: {
 12177                           ;PS_2.c: 562: Caps_Lock =1;
 12178                           
 12179                           
 12180                           ;PS_2.c: 564: }
 12181                           ;PS_2.c: 565: }
 12182                           ;PS_2.c: 566: CapsCount++;
 12183  03B3  3001               	movlw	1
 12184  03B4  0021               	movlb	1	; select bank1
 12185  03B5  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12186  03B6  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12187  03B7  0023               	movlb	3	; select bank3
 12188  03B8  07E8               	addwf	_CapsCount^(0+384),f
 12189  03B9  2BA1               	goto	i1l5626
 12190  03BA                     i1l5628:	
 12191                           ;PS_2.c: 567: }
 12192                           ;PS_2.c: 568: }
 12193                           
 12194                           
 12195                           ;PS_2.c: 569: else
 12196                           ;PS_2.c: 570: {
 12197                           ;PS_2.c: 571: CapsCount=0;
 12198  03BA  01E8               	clrf	_CapsCount^(0+384)
 12199  03BB                     i1l5638:	
 12200                           ;PS_2.c: 572: while(CapsCount<10)
 12201                           
 12202  03BB  300A               	movlw	10
 12203  03BC  0268               	subwf	_CapsCount^(0+384),w
 12204  03BD  1803               	btfsc	3,0
 12205  03BE  2C0C               	goto	i1l750
 12206                           
 12207                           ;PS_2.c: 573: {
 12208                           ;PS_2.c: 574: if(!Send_PS2(0xED))
 12209  03BF  30ED               	movlw	237
 12210  03C0  318C  24DE  3181   	fcall	i1_Send_PS2
 12211  03C3  3A00               	xorlw	0
 12212  03C4  1D03               	skipz
 12213  03C5  2BD1               	goto	i1l5636
 12214                           
 12215                           ;PS_2.c: 575: {
 12216                           ;PS_2.c: 576: if(!Send_PS2(0x04))
 12217  03C6  3004               	movlw	4
 12218  03C7  318C  24DE  3181   	fcall	i1_Send_PS2
 12219  03CA  3A00               	xorlw	0
 12220  03CB  1D03               	skipz
 12221  03CC  2BD1               	goto	i1l5636
 12222  03CD                     i1l5634:	
 12223                           
 12224                           ;PS_2.c: 577: {
 12225                           ;PS_2.c: 578: Caps_Lock =1;
 12226  03CD  0023               	movlb	3	; select bank3
 12227  03CE  01E9               	clrf	_Caps_Lock^(0+384)
 12228  03CF  0AE9               	incf	_Caps_Lock^(0+384),f
 12229                           
 12230                           ;PS_2.c: 579: break;
 12231  03D0  2C0C               	goto	i1l750
 12232  03D1                     i1l5636:	
 12233                           
 12234                           ;PS_2.c: 580: }
 12235                           ;PS_2.c: 581: }
 12236                           ;PS_2.c: 582: CapsCount++;
 12237  03D1  3001               	movlw	1
 12238  03D2  0021               	movlb	1	; select bank1
 12239  03D3  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12240  03D4  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12241  03D5  0023               	movlb	3	; select bank3
 12242  03D6  07E8               	addwf	_CapsCount^(0+384),f
 12243  03D7  2BBB               	goto	i1l5638
 12244  03D8                     i1l5640:	
 12245                           ;PS_2.c: 583: }
 12246                           ;PS_2.c: 584: }
 12247                           ;PS_2.c: 585: }
 12248                           ;PS_2.c: 586: }
 12249                           ;PS_2.c: 588: }
 12250                           
 12251                           
 12252                           ;PS_2.c: 589: else
 12253                           ;PS_2.c: 590: {
 12254                           ;PS_2.c: 591: if(Shift_Key ==1)
 12255  03D8  036F               	decf	_Shift_Key^(0+384),w
 12256  03D9  1D03               	btfss	3,2
 12257  03DA  2BF6               	goto	i1l5652
 12258                           
 12259                           ;PS_2.c: 592: {
 12260                           ;PS_2.c: 594: temp = Decode_Scan_Code_Shift(PS_2_Read_Data_First);
 12261  03DB  0862               	movf	_PS_2_Read_Data_First^(0+384),w
 12262  03DC  3199  215D  3181   	fcall	_Decode_Scan_Code_Shift
 12263  03DF  0021               	movlb	1	; select bank1
 12264  03E0  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12265  03E1  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12266  03E2  0023               	movlb	3	; select bank3
 12267  03E3  00E1               	movwf	Process_PS2_ScanCode@temp^(0+384)
 12268                           
 12269                           ;PS_2.c: 595: if(Caps_Lock)
 12270  03E4  0869               	movf	_Caps_Lock^(0+384),w
 12271  03E5  1903               	btfsc	3,2
 12272  03E6  2C0C               	goto	i1l750
 12273                           
 12274                           ;PS_2.c: 596: {
 12275                           ;PS_2.c: 598: if(temp >= 'A' && temp <= 'Z')
 12276  03E7  3041               	movlw	65
 12277  03E8  0261               	subwf	Process_PS2_ScanCode@temp^(0+384),w
 12278  03E9  1C03               	skipc
 12279  03EA  2C0C               	goto	i1l750
 12280  03EB  305B               	movlw	91
 12281  03EC  0261               	subwf	Process_PS2_ScanCode@temp^(0+384),w
 12282  03ED  1803               	skipnc
 12283  03EE  2C0C               	goto	i1l750
 12284                           
 12285                           ;PS_2.c: 599: {
 12286                           ;PS_2.c: 600: temp += 32;
 12287  03EF  3020               	movlw	32
 12288  03F0  0021               	movlb	1	; select bank1
 12289  03F1  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12290  03F2  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12291  03F3  0023               	movlb	3	; select bank3
 12292  03F4  07E1               	addwf	Process_PS2_ScanCode@temp^(0+384),f
 12293                           
 12294                           ;PS_2.c: 601: }
 12295                           ;PS_2.c: 602: }
 12296                           ;PS_2.c: 603: }
 12297  03F5  2C0C               	goto	i1l750
 12298  03F6                     i1l5652:	
 12299                           
 12300                           ;PS_2.c: 604: else
 12301                           ;PS_2.c: 605: {
 12302                           ;PS_2.c: 606: temp = Decode_Scan_Code(PS_2_Read_Data_First);
 12303  03F6  0862               	movf	_PS_2_Read_Data_First^(0+384),w
 12304  03F7  3199  2139  3181   	fcall	_Decode_Scan_Code
 12305  03FA  0021               	movlb	1	; select bank1
 12306  03FB  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12307  03FC  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12308  03FD  0023               	movlb	3	; select bank3
 12309  03FE  00E1               	movwf	Process_PS2_ScanCode@temp^(0+384)
 12310                           
 12311                           ;PS_2.c: 607: if(Caps_Lock)
 12312  03FF  0869               	movf	_Caps_Lock^(0+384),w
 12313  0400  1903               	btfsc	3,2
 12314  0401  2C0C               	goto	i1l750
 12315                           
 12316                           ;PS_2.c: 608: {
 12317                           ;PS_2.c: 610: if(temp >= 'a' && temp <= 'z')
 12318  0402  3061               	movlw	97
 12319  0403  0261               	subwf	Process_PS2_ScanCode@temp^(0+384),w
 12320  0404  1C03               	skipc
 12321  0405  2C0C               	goto	i1l750
 12322  0406  307B               	movlw	123
 12323  0407  0261               	subwf	Process_PS2_ScanCode@temp^(0+384),w
 12324  0408  1803               	skipnc
 12325  0409  2C0C               	goto	i1l750
 12326                           
 12327                           ;PS_2.c: 611: {
 12328                           ;PS_2.c: 612: temp -= 32;
 12329  040A  3020               	movlw	32
 12330  040B  02E1               	subwf	Process_PS2_ScanCode@temp^(0+384),f
 12331  040C                     i1l750:	
 12332                           
 12333                           ;PS_2.c: 613: }
 12334                           ;PS_2.c: 614: }
 12335                           ;PS_2.c: 615: }
 12336                           ;PS_2.c: 616: }
 12337                           ;PS_2.c: 617: if(!temp)
 12338  040C  0023               	movlb	3	; select bank3
 12339  040D  0861               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12340  040E  1D03               	btfss	3,2
 12341  040F  2C19               	goto	i1l5664
 12342                           
 12343                           ;PS_2.c: 618: {
 12344                           ;PS_2.c: 620: temp = Decode_Scan_Code_Function(PS_2_Read_Data_First);
 12345  0410  0862               	movf	_PS_2_Read_Data_First^(0+384),w
 12346  0411  318A  2241  3181   	fcall	_Decode_Scan_Code_Function
 12347  0414  0021               	movlb	1	; select bank1
 12348  0415  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12349  0416  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12350  0417  0023               	movlb	3	; select bank3
 12351  0418  00E1               	movwf	Process_PS2_ScanCode@temp^(0+384)
 12352  0419                     i1l5664:	
 12353                           
 12354                           ;PS_2.c: 621: }
 12355                           ;PS_2.c: 622: }
 12356                           ;PS_2.c: 624: if(((RControl || LControl) + (LALT || RALT) + Delete) == 3)
 12357  0419  01DE               	clrf	_Process_PS2_ScanCode$856^(0+384)
 12358  041A  0ADE               	incf	_Process_PS2_ScanCode$856^(0+384),f
 12359  041B  086A               	movf	_LALT^(0+384),w
 12360  041C  1D03               	btfss	3,2
 12361  041D  2C22               	goto	i1l5672
 12362  041E  086D               	movf	_RALT^(0+384),w
 12363  041F  1D03               	btfss	3,2
 12364  0420  2C22               	goto	i1l5672
 12365  0421  01DE               	clrf	_Process_PS2_ScanCode$856^(0+384)
 12366  0422                     i1l5672:	
 12367  0422  01DF               	clrf	_Process_PS2_ScanCode$857^(0+384)
 12368  0423  0ADF               	incf	_Process_PS2_ScanCode$857^(0+384),f
 12369  0424  0021               	movlb	1	; select bank1
 12370  0425  0853               	movf	_RControl^(0+128),w
 12371  0426  1D03               	btfss	3,2
 12372  0427  2C2D               	goto	i1l5680
 12373  0428  084F               	movf	_LControl^(0+128),w
 12374  0429  1D03               	btfss	3,2
 12375  042A  2C2D               	goto	i1l5680
 12376  042B  0023               	movlb	3	; select bank3
 12377  042C  01DF               	clrf	_Process_PS2_ScanCode$857^(0+384)
 12378  042D                     i1l5680:	
 12379  042D  0021               	movlb	1	; select bank1
 12380  042E  084E               	movf	_Delete^(0+128),w
 12381  042F  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12382  0430  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 12383  0431  0023               	movlb	3	; select bank3
 12384  0432  085F               	movf	_Process_PS2_ScanCode$857^(0+384),w
 12385  0433  075E               	addwf	_Process_PS2_ScanCode$856^(0+384),w
 12386  0434  0021               	movlb	1	; select bank1
 12387  0435  00BE               	movwf	(??_Process_PS2_ScanCode+2)^(0+128)
 12388  0436  01BF               	clrf	((??_Process_PS2_ScanCode+2)^(0+128)+1)
 12389  0437  0DBF               	rlf	(??_Process_PS2_ScanCode+3)^(0+128),f
 12390  0438  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12391  0439  073E               	addwf	(??_Process_PS2_ScanCode+2)^(0+128),w
 12392  043A  00C0               	movwf	(??_Process_PS2_ScanCode+4)^(0+128)
 12393  043B  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 12394  043C  3D3F               	addwfc	(??_Process_PS2_ScanCode+3)^(0+128),w
 12395  043D  00C1               	movwf	(??_Process_PS2_ScanCode+5)^(0+128)
 12396  043E  3003               	movlw	3
 12397  043F  0640               	xorwf	(??_Process_PS2_ScanCode+4)^(0+128),w
 12398  0440  0441               	iorwf	((??_Process_PS2_ScanCode+4)^(0+128)+1),w
 12399  0441  1D03               	btfss	3,2
 12400  0442  2CC4               	goto	i1l5724
 12401                           
 12402                           ;PS_2.c: 625: {
 12403                           ;PS_2.c: 627: UARTstringWAIT("\r\n");
 12404  0443  30FD               	movlw	low ((STR_14+16)| (0+32768))
 12405  0444  0020               	movlb	0	; select bank0
 12406  0445  00A1               	movwf	i1UARTstringWAIT@data
 12407  0446  3089               	movlw	high ((STR_14+16)| (0+32768))
 12408  0447  00A2               	movwf	i1UARTstringWAIT@data+1
 12409  0448  319B  2324  3181   	fcall	i1_UARTstringWAIT
 12410                           
 12411                           ;PS_2.c: 628: delayUS(15000);
 12412  044B  3000               	movlw	0
 12413  044C  00F3               	movwf	i1delayUS@US+3
 12414  044D  3000               	movlw	0
 12415  044E  00F2               	movwf	i1delayUS@US+2
 12416  044F  303A               	movlw	58
 12417  0450  00F1               	movwf	i1delayUS@US+1
 12418  0451  3098               	movlw	152
 12419  0452  00F0               	movwf	i1delayUS@US
 12420  0453  319B  23B5  3181   	fcall	i1_delayUS
 12421                           
 12422                           ;PS_2.c: 629: if(!BAUDMODE)
 12423  0456  0021               	movlb	1	; select bank1
 12424  0457  084B               	movf	_BAUDMODE^(0+128),w
 12425  0458  1D03               	btfss	3,2
 12426  0459  2C81               	goto	i1l5700
 12427                           
 12428                           ;PS_2.c: 630: {
 12429                           ;PS_2.c: 631: BaudTyped =0;
 12430  045A  3000               	movlw	0
 12431  045B  00C8               	movwf	(_BaudTyped+3)^(0+128)
 12432  045C  3000               	movlw	0
 12433  045D  00C7               	movwf	(_BaudTyped+2)^(0+128)
 12434  045E  3000               	movlw	0
 12435  045F  00C6               	movwf	(_BaudTyped+1)^(0+128)
 12436  0460  3000               	movlw	0
 12437  0461  00C5               	movwf	_BaudTyped^(0+128)
 12438                           
 12439                           ;PS_2.c: 632: ParityTyped =0;
 12440  0462  0023               	movlb	3	; select bank3
 12441  0463  01EC               	clrf	_ParityTyped^(0+384)
 12442                           
 12443                           ;PS_2.c: 633: BAUDMODE = 1;
 12444  0464  0021               	movlb	1	; select bank1
 12445  0465  01CB               	clrf	_BAUDMODE^(0+128)
 12446  0466  0ACB               	incf	_BAUDMODE^(0+128),f
 12447                           
 12448                           ;PS_2.c: 634: UARTstringWAIT("Enter Baud rate \r\n");
 12449  0467  30ED               	movlw	low (STR_14| (0+32768))
 12450  0468  0020               	movlb	0	; select bank0
 12451  0469  00A1               	movwf	i1UARTstringWAIT@data
 12452  046A  3089               	movlw	high (STR_14| (0+32768))
 12453  046B  00A2               	movwf	i1UARTstringWAIT@data+1
 12454  046C  319B  2324  3181   	fcall	i1_UARTstringWAIT
 12455                           
 12456                           ;PS_2.c: 635: delayUS(15000);
 12457  046F  3000               	movlw	0
 12458  0470  00F3               	movwf	i1delayUS@US+3
 12459  0471  3000               	movlw	0
 12460  0472  00F2               	movwf	i1delayUS@US+2
 12461  0473  303A               	movlw	58
 12462  0474  00F1               	movwf	i1delayUS@US+1
 12463  0475  3098               	movlw	152
 12464  0476  00F0               	movwf	i1delayUS@US
 12465  0477  319B  23B5  3181   	fcall	i1_delayUS
 12466                           
 12467                           ;PS_2.c: 636: UARTchar('>' , 0, 0);
 12468  047A  01F8               	clrf	i1UARTchar@override
 12469  047B  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12470  047C  303E               	movlw	62
 12471  047D  3190  208D  3181   	fcall	i1_UARTchar
 12472                           
 12473                           ;PS_2.c: 638: }
 12474  0480  2CBC               	goto	i1l5714
 12475  0481                     i1l5700:	
 12476                           
 12477                           ;PS_2.c: 639: else
 12478                           ;PS_2.c: 640: {
 12479                           ;PS_2.c: 641: BaudTyped = 9600;
 12480  0481  3000               	movlw	0
 12481  0482  0021               	movlb	1	; select bank1
 12482  0483  00C8               	movwf	(_BaudTyped+3)^(0+128)
 12483  0484  3000               	movlw	0
 12484  0485  00C7               	movwf	(_BaudTyped+2)^(0+128)
 12485  0486  3025               	movlw	37
 12486  0487  00C6               	movwf	(_BaudTyped+1)^(0+128)
 12487  0488  3080               	movlw	128
 12488  0489  00C5               	movwf	_BaudTyped^(0+128)
 12489                           
 12490                           ;PS_2.c: 642: UARTstringWAIT("Baud Reset to 9600");
 12491  048A  3000               	movlw	low (STR_15| (0+32768))
 12492  048B  0020               	movlb	0	; select bank0
 12493  048C  00A1               	movwf	i1UARTstringWAIT@data
 12494  048D  308A               	movlw	high (STR_15| (0+32768))
 12495  048E  00A2               	movwf	i1UARTstringWAIT@data+1
 12496  048F  319B  2324  3181   	fcall	i1_UARTstringWAIT
 12497                           
 12498                           ;PS_2.c: 643: UARTstringWAIT(NoParityMSG);
 12499  0492  3026               	movlw	low (_NoParityMSG| (0+32768))
 12500  0493  0020               	movlb	0	; select bank0
 12501  0494  00A1               	movwf	i1UARTstringWAIT@data
 12502  0495  3089               	movlw	high (_NoParityMSG| (0+32768))
 12503  0496  00A2               	movwf	i1UARTstringWAIT@data+1
 12504  0497  319B  2324  3181   	fcall	i1_UARTstringWAIT
 12505                           
 12506                           ;PS_2.c: 644: UARTstringWAIT("\r\n");
 12507  049A  30FD               	movlw	low ((STR_14+16)| (0+32768))
 12508  049B  0020               	movlb	0	; select bank0
 12509  049C  00A1               	movwf	i1UARTstringWAIT@data
 12510  049D  3089               	movlw	high ((STR_14+16)| (0+32768))
 12511  049E  00A2               	movwf	i1UARTstringWAIT@data+1
 12512  049F  319B  2324  3181   	fcall	i1_UARTstringWAIT
 12513                           
 12514                           ;PS_2.c: 645: delayUS(15000);
 12515  04A2  3000               	movlw	0
 12516  04A3  00F3               	movwf	i1delayUS@US+3
 12517  04A4  3000               	movlw	0
 12518  04A5  00F2               	movwf	i1delayUS@US+2
 12519  04A6  303A               	movlw	58
 12520  04A7  00F1               	movwf	i1delayUS@US+1
 12521  04A8  3098               	movlw	152
 12522  04A9  00F0               	movwf	i1delayUS@US
 12523  04AA  319B  23B5  3181   	fcall	i1_delayUS
 12524                           
 12525                           ;PS_2.c: 646: SetBaud(BaudTyped, 0);
 12526  04AD  0021               	movlb	1	; select bank1
 12527  04AE  0848               	movf	(_BaudTyped+3)^(0+128),w
 12528  04AF  00B2               	movwf	(SetBaud@Baud+3)^(0+128)
 12529  04B0  0847               	movf	(_BaudTyped+2)^(0+128),w
 12530  04B1  00B1               	movwf	(SetBaud@Baud+2)^(0+128)
 12531  04B2  0846               	movf	(_BaudTyped+1)^(0+128),w
 12532  04B3  00B0               	movwf	(SetBaud@Baud+1)^(0+128)
 12533  04B4  0845               	movf	_BaudTyped^(0+128),w
 12534  04B5  00AF               	movwf	SetBaud@Baud^(0+128)
 12535  04B6  01B3               	clrf	SetBaud@Parity^(0+128)
 12536  04B7  318B  2365  3181   	fcall	_SetBaud
 12537                           
 12538                           ;PS_2.c: 647: BAUDMODE = 0;
 12539  04BA  0021               	movlb	1	; select bank1
 12540  04BB  01CB               	clrf	_BAUDMODE^(0+128)
 12541  04BC                     i1l5714:	
 12542                           
 12543                           ;PS_2.c: 648: }
 12544                           ;PS_2.c: 649: RControl =0;
 12545  04BC  0021               	movlb	1	; select bank1
 12546  04BD  01D3               	clrf	_RControl^(0+128)
 12547                           
 12548                           ;PS_2.c: 650: LControl =0;
 12549  04BE  01CF               	clrf	_LControl^(0+128)
 12550                           
 12551                           ;PS_2.c: 651: LALT =0;
 12552  04BF  0023               	movlb	3	; select bank3
 12553  04C0  01EA               	clrf	_LALT^(0+384)
 12554                           
 12555                           ;PS_2.c: 652: RALT =0;
 12556  04C1  01ED               	clrf	_RALT^(0+384)
 12557                           
 12558                           ;PS_2.c: 653: Delete =0;
 12559  04C2  0021               	movlb	1	; select bank1
 12560  04C3  01CE               	clrf	_Delete^(0+128)
 12561  04C4                     i1l5724:	
 12562                           
 12563                           ;PS_2.c: 654: }
 12564                           ;PS_2.c: 656: if(temp)
 12565  04C4  0023               	movlb	3	; select bank3
 12566  04C5  0861               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12567  04C6  1903               	btfsc	3,2
 12568  04C7  2E4C               	goto	i1l5830
 12569                           
 12570                           ;PS_2.c: 657: {
 12571                           ;PS_2.c: 659: if(temp == 0x01 && shortbreak == 0)
 12572  04C8  0361               	decf	Process_PS2_ScanCode@temp^(0+384),w
 12573  04C9  1D03               	btfss	3,2
 12574  04CA  2CD6               	goto	i1l5732
 12575  04CB  0860               	movf	Process_PS2_ScanCode@shortbreak^(0+384),w
 12576  04CC  1D03               	btfss	3,2
 12577  04CD  2CD6               	goto	i1l5732
 12578                           
 12579                           ;PS_2.c: 660: {
 12580                           ;PS_2.c: 662: UART_send_break_timed(100000);
 12581  04CE  30A0               	movlw	160
 12582  04CF  00FA               	movwf	UART_send_break_timed@US
 12583  04D0  3086               	movlw	134
 12584  04D1  00FB               	movwf	UART_send_break_timed@US+1
 12585  04D2  3199  21F4  3181   	fcall	_UART_send_break_timed
 12586                           
 12587                           ;PS_2.c: 663: }
 12588  04D5  2E4C               	goto	i1l5830
 12589  04D6                     i1l5732:	
 12590                           
 12591                           ;PS_2.c: 664: else if(temp == 0x01 && shortbreak == 1)
 12592  04D6  0023               	movlb	3	; select bank3
 12593  04D7  0361               	decf	Process_PS2_ScanCode@temp^(0+384),w
 12594  04D8  1D03               	btfss	3,2
 12595  04D9  2CE3               	goto	i1l5740
 12596  04DA  0360               	decf	Process_PS2_ScanCode@shortbreak^(0+384),w
 12597  04DB  1D03               	btfss	3,2
 12598  04DC  2CE3               	goto	i1l5740
 12599                           
 12600                           ;PS_2.c: 665: {
 12601                           ;PS_2.c: 667: UART_send_break();
 12602  04DD  3198  205D  3181   	fcall	_UART_send_break
 12603                           
 12604                           ;PS_2.c: 668: shortbreak = 0;
 12605  04E0  0023               	movlb	3	; select bank3
 12606  04E1  01E0               	clrf	Process_PS2_ScanCode@shortbreak^(0+384)
 12607                           
 12608                           ;PS_2.c: 669: }
 12609  04E2  2E4C               	goto	i1l5830
 12610  04E3                     i1l5740:	
 12611                           
 12612                           ;PS_2.c: 670: else
 12613                           ;PS_2.c: 671: {
 12614                           ;PS_2.c: 672: if(!BAUDMODE)
 12615  04E3  0021               	movlb	1	; select bank1
 12616  04E4  084B               	movf	_BAUDMODE^(0+128),w
 12617  04E5  1D03               	btfss	3,2
 12618  04E6  2D02               	goto	i1l5752
 12619                           
 12620                           ;PS_2.c: 673: {
 12621                           ;PS_2.c: 674: if(temp == '\n')
 12622  04E7  300A               	movlw	10
 12623  04E8  0023               	movlb	3	; select bank3
 12624  04E9  0661               	xorwf	Process_PS2_ScanCode@temp^(0+384),w
 12625  04EA  1D03               	btfss	3,2
 12626  04EB  2CEF               	goto	i1l5746
 12627                           
 12628                           ;PS_2.c: 675: {
 12629                           ;PS_2.c: 676: LineOverride = 1;
 12630  04EC  0024               	movlb	4	; select bank4
 12631  04ED  01E0               	clrf	_LineOverride^(0+512)
 12632  04EE  0AE0               	incf	_LineOverride^(0+512),f
 12633  04EF                     i1l5746:	
 12634                           
 12635                           ;PS_2.c: 677: }
 12636                           ;PS_2.c: 678: UARTchar(temp, 0, 0);
 12637  04EF  01F8               	clrf	i1UARTchar@override
 12638  04F0  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12639  04F1  0023               	movlb	3	; select bank3
 12640  04F2  0861               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12641  04F3  3190  208D  3181   	fcall	i1_UARTchar
 12642                           
 12643                           ;PS_2.c: 679: if(temp == '\r')
 12644  04F6  300D               	movlw	13
 12645  04F7  0023               	movlb	3	; select bank3
 12646  04F8  0661               	xorwf	Process_PS2_ScanCode@temp^(0+384),w
 12647  04F9  1D03               	btfss	3,2
 12648  04FA  2E4C               	goto	i1l5830
 12649                           
 12650                           ;PS_2.c: 680: {
 12651                           ;PS_2.c: 681: UARTchar('\n', 0, 0);
 12652  04FB  01F8               	clrf	i1UARTchar@override
 12653  04FC  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12654  04FD  300A               	movlw	10
 12655  04FE  3190  208D  3181   	fcall	i1_UARTchar
 12656                           
 12657                           ;PS_2.c: 682: }
 12658                           ;PS_2.c: 684: }
 12659  0501  2E4C               	goto	i1l5830
 12660  0502                     i1l5752:	
 12661                           
 12662                           ;PS_2.c: 685: else
 12663                           ;PS_2.c: 686: {
 12664                           ;PS_2.c: 687: if(ISNUMBER(temp))
 12665  0502  0023               	movlb	3	; select bank3
 12666  0503  0861               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12667  0504  3198  20FE  3181   	fcall	_ISNUMBER
 12668  0507  3A00               	xorlw	0
 12669  0508  1903               	skipnz
 12670  0509  2D49               	goto	i1l5760
 12671                           
 12672                           ;PS_2.c: 688: {
 12673                           ;PS_2.c: 689: BaudTyped*=10;
 12674  050A  3000               	movlw	0
 12675  050B  00F3               	movwf	___lmul@multiplier+3
 12676  050C  3000               	movlw	0
 12677  050D  00F2               	movwf	___lmul@multiplier+2
 12678  050E  3000               	movlw	0
 12679  050F  00F1               	movwf	___lmul@multiplier+1
 12680  0510  300A               	movlw	10
 12681  0511  00F0               	movwf	___lmul@multiplier
 12682  0512  0021               	movlb	1	; select bank1
 12683  0513  0848               	movf	(_BaudTyped+3)^(0+128),w
 12684  0514  00F7               	movwf	___lmul@multiplicand+3
 12685  0515  0847               	movf	(_BaudTyped+2)^(0+128),w
 12686  0516  00F6               	movwf	___lmul@multiplicand+2
 12687  0517  0846               	movf	(_BaudTyped+1)^(0+128),w
 12688  0518  00F5               	movwf	___lmul@multiplicand+1
 12689  0519  0845               	movf	_BaudTyped^(0+128),w
 12690  051A  00F4               	movwf	___lmul@multiplicand
 12691  051B  319A  22C6  3181   	fcall	___lmul
 12692  051E  0873               	movf	?___lmul+3,w
 12693  051F  0021               	movlb	1	; select bank1
 12694  0520  00C8               	movwf	(_BaudTyped+3)^(0+128)
 12695  0521  0872               	movf	?___lmul+2,w
 12696  0522  00C7               	movwf	(_BaudTyped+2)^(0+128)
 12697  0523  0871               	movf	?___lmul+1,w
 12698  0524  00C6               	movwf	(_BaudTyped+1)^(0+128)
 12699  0525  0870               	movf	?___lmul,w
 12700  0526  00C5               	movwf	_BaudTyped^(0+128)
 12701                           
 12702                           ;PS_2.c: 690: BaudTyped += temp - 48;
 12703  0527  0023               	movlb	3	; select bank3
 12704  0528  0861               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12705  0529  3ED0               	addlw	208
 12706  052A  0021               	movlb	1	; select bank1
 12707  052B  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12708  052C  30FF               	movlw	255
 12709  052D  1803               	skipnc
 12710  052E  3000               	movlw	0
 12711  052F  00BD               	movwf	(??_Process_PS2_ScanCode^(0+128)+1)
 12712  0530  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12713  0531  00BE               	movwf	(??_Process_PS2_ScanCode+2)^(0+128)
 12714  0532  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 12715  0533  00BF               	movwf	((??_Process_PS2_ScanCode+2)^(0+128)+1)
 12716  0534  3000               	movlw	0
 12717  0535  1BBF               	btfsc	((??_Process_PS2_ScanCode+2)^(0+128)+1),7
 12718  0536  30FF               	movlw	255
 12719  0537  00C0               	movwf	((??_Process_PS2_ScanCode+2)^(0+128)+2)
 12720  0538  00C1               	movwf	((??_Process_PS2_ScanCode+2)^(0+128)+3)
 12721  0539  083E               	movf	(??_Process_PS2_ScanCode+2)^(0+128),w
 12722  053A  07C5               	addwf	_BaudTyped^(0+128),f
 12723  053B  083F               	movf	(??_Process_PS2_ScanCode+3)^(0+128),w
 12724  053C  3DC6               	addwfc	(_BaudTyped+1)^(0+128),f
 12725  053D  0840               	movf	(??_Process_PS2_ScanCode+4)^(0+128),w
 12726  053E  3DC7               	addwfc	(_BaudTyped+2)^(0+128),f
 12727  053F  0841               	movf	(??_Process_PS2_ScanCode+5)^(0+128),w
 12728  0540  3DC8               	addwfc	(_BaudTyped+3)^(0+128),f
 12729                           
 12730                           ;PS_2.c: 691: UARTchar(temp, 0, 0);
 12731  0541  01F8               	clrf	i1UARTchar@override
 12732  0542  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12733  0543  0023               	movlb	3	; select bank3
 12734  0544  0861               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12735  0545  3190  208D  3181   	fcall	i1_UARTchar
 12736                           
 12737                           ;PS_2.c: 692: }
 12738  0548  2E4C               	goto	i1l5830
 12739  0549                     i1l5760:	
 12740                           
 12741                           ;PS_2.c: 693: else if(temp == 'o' || temp == 'O')
 12742  0549  306F               	movlw	111
 12743  054A  0023               	movlb	3	; select bank3
 12744  054B  0661               	xorwf	Process_PS2_ScanCode@temp^(0+384),w
 12745  054C  1903               	btfsc	3,2
 12746  054D  2D52               	goto	i1l811
 12747  054E  304F               	movlw	79
 12748  054F  0661               	xorwf	Process_PS2_ScanCode@temp^(0+384),w
 12749  0550  1D03               	btfss	3,2
 12750  0551  2D5B               	goto	i1l5766
 12751  0552                     i1l811:	
 12752                           
 12753                           ;PS_2.c: 694: {
 12754                           ;PS_2.c: 695: ParityTyped = 1;
 12755  0552  01EC               	clrf	_ParityTyped^(0+384)
 12756  0553  0AEC               	incf	_ParityTyped^(0+384),f
 12757                           
 12758                           ;PS_2.c: 696: UARTchar(temp, 0, 0);
 12759  0554  01F8               	clrf	i1UARTchar@override
 12760  0555  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12761  0556  0861               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12762  0557  3190  208D  3181   	fcall	i1_UARTchar
 12763                           
 12764                           ;PS_2.c: 697: }
 12765  055A  2E4C               	goto	i1l5830
 12766  055B                     i1l5766:	
 12767                           
 12768                           ;PS_2.c: 698: else if(temp == 'e' || temp == 'E')
 12769  055B  3065               	movlw	101
 12770  055C  0023               	movlb	3	; select bank3
 12771  055D  0661               	xorwf	Process_PS2_ScanCode@temp^(0+384),w
 12772  055E  1903               	btfsc	3,2
 12773  055F  2D64               	goto	i1l5770
 12774  0560  3045               	movlw	69
 12775  0561  0661               	xorwf	Process_PS2_ScanCode@temp^(0+384),w
 12776  0562  1D03               	btfss	3,2
 12777  0563  2D71               	goto	i1l5774
 12778  0564                     i1l5770:	
 12779                           
 12780                           ;PS_2.c: 699: {
 12781                           ;PS_2.c: 700: ParityTyped = 2;
 12782  0564  3002               	movlw	2
 12783  0565  0021               	movlb	1	; select bank1
 12784  0566  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12785  0567  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12786  0568  0023               	movlb	3	; select bank3
 12787  0569  00EC               	movwf	_ParityTyped^(0+384)
 12788                           
 12789                           ;PS_2.c: 701: UARTchar(temp, 0, 0);
 12790  056A  01F8               	clrf	i1UARTchar@override
 12791  056B  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12792  056C  0861               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12793  056D  3190  208D  3181   	fcall	i1_UARTchar
 12794                           
 12795                           ;PS_2.c: 702: }
 12796  0570  2E4C               	goto	i1l5830
 12797  0571                     i1l5774:	
 12798                           
 12799                           ;PS_2.c: 703: else if(temp == 'm' || temp == 'M')
 12800  0571  306D               	movlw	109
 12801  0572  0023               	movlb	3	; select bank3
 12802  0573  0661               	xorwf	Process_PS2_ScanCode@temp^(0+384),w
 12803  0574  1903               	btfsc	3,2
 12804  0575  2D7A               	goto	i1l5778
 12805  0576  304D               	movlw	77
 12806  0577  0661               	xorwf	Process_PS2_ScanCode@temp^(0+384),w
 12807  0578  1D03               	btfss	3,2
 12808  0579  2D87               	goto	i1l5782
 12809  057A                     i1l5778:	
 12810                           
 12811                           ;PS_2.c: 704: {
 12812                           ;PS_2.c: 705: ParityTyped = 3;
 12813  057A  3003               	movlw	3
 12814  057B  0021               	movlb	1	; select bank1
 12815  057C  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12816  057D  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12817  057E  0023               	movlb	3	; select bank3
 12818  057F  00EC               	movwf	_ParityTyped^(0+384)
 12819                           
 12820                           ;PS_2.c: 706: UARTchar(temp, 0, 0);
 12821  0580  01F8               	clrf	i1UARTchar@override
 12822  0581  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12823  0582  0861               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12824  0583  3190  208D  3181   	fcall	i1_UARTchar
 12825                           
 12826                           ;PS_2.c: 707: }
 12827  0586  2E4C               	goto	i1l5830
 12828  0587                     i1l5782:	
 12829                           
 12830                           ;PS_2.c: 708: else if(temp == 's' || temp == 'S')
 12831  0587  3073               	movlw	115
 12832  0588  0023               	movlb	3	; select bank3
 12833  0589  0661               	xorwf	Process_PS2_ScanCode@temp^(0+384),w
 12834  058A  1903               	btfsc	3,2
 12835  058B  2D90               	goto	i1l5786
 12836  058C  3053               	movlw	83
 12837  058D  0661               	xorwf	Process_PS2_ScanCode@temp^(0+384),w
 12838  058E  1D03               	btfss	3,2
 12839  058F  2D9D               	goto	i1l5790
 12840  0590                     i1l5786:	
 12841                           
 12842                           ;PS_2.c: 709: {
 12843                           ;PS_2.c: 710: ParityTyped = 4;
 12844  0590  3004               	movlw	4
 12845  0591  0021               	movlb	1	; select bank1
 12846  0592  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12847  0593  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12848  0594  0023               	movlb	3	; select bank3
 12849  0595  00EC               	movwf	_ParityTyped^(0+384)
 12850                           
 12851                           ;PS_2.c: 711: UARTchar(temp, 0, 0);
 12852  0596  01F8               	clrf	i1UARTchar@override
 12853  0597  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12854  0598  0861               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12855  0599  3190  208D  3181   	fcall	i1_UARTchar
 12856                           
 12857                           ;PS_2.c: 712: }
 12858  059C  2E4C               	goto	i1l5830
 12859  059D                     i1l5790:	
 12860                           
 12861                           ;PS_2.c: 713: else if(temp == '\r')
 12862  059D  300D               	movlw	13
 12863  059E  0023               	movlb	3	; select bank3
 12864  059F  0661               	xorwf	Process_PS2_ScanCode@temp^(0+384),w
 12865  05A0  1D03               	btfss	3,2
 12866  05A1  2E4C               	goto	i1l5830
 12867                           
 12868                           ;PS_2.c: 714: {
 12869                           ;PS_2.c: 715: UARTstringWAIT("\r\n");
 12870  05A2  30FD               	movlw	low ((STR_14+16)| (0+32768))
 12871  05A3  0020               	movlb	0	; select bank0
 12872  05A4  00A1               	movwf	i1UARTstringWAIT@data
 12873  05A5  3089               	movlw	high ((STR_14+16)| (0+32768))
 12874  05A6  00A2               	movwf	i1UARTstringWAIT@data+1
 12875  05A7  319B  2324  3181   	fcall	i1_UARTstringWAIT
 12876                           
 12877                           ;PS_2.c: 716: delayUS(15000);
 12878  05AA  3000               	movlw	0
 12879  05AB  00F3               	movwf	i1delayUS@US+3
 12880  05AC  3000               	movlw	0
 12881  05AD  00F2               	movwf	i1delayUS@US+2
 12882  05AE  303A               	movlw	58
 12883  05AF  00F1               	movwf	i1delayUS@US+1
 12884  05B0  3098               	movlw	152
 12885  05B1  00F0               	movwf	i1delayUS@US
 12886  05B2  319B  23B5  3181   	fcall	i1_delayUS
 12887                           
 12888                           ;PS_2.c: 717: if(BaudTyped >=2400 && BaudTyped <= 115200)
 12889  05B5  0021               	movlb	1	; select bank1
 12890  05B6  0848               	movf	(_BaudTyped+3)^(0+128),w
 12891  05B7  1D03               	btfss	3,2
 12892  05B8  2DC2               	goto	i1l5798
 12893  05B9  0847               	movf	(_BaudTyped+2)^(0+128),w
 12894  05BA  1D03               	btfss	3,2
 12895  05BB  2DC2               	goto	i1l5798
 12896  05BC  3060               	movlw	96
 12897  05BD  0245               	subwf	_BaudTyped^(0+128),w
 12898  05BE  3009               	movlw	9
 12899  05BF  3B46               	subwfb	(_BaudTyped+1)^(0+128),w
 12900  05C0  1C03               	btfss	3,0
 12901  05C1  2E37               	goto	i1l5824
 12902  05C2                     i1l5798:	
 12903  05C2  0848               	movf	(_BaudTyped+3)^(0+128),w
 12904  05C3  1D03               	btfss	3,2
 12905  05C4  2E37               	goto	i1l5824
 12906  05C5  3001               	movlw	1
 12907  05C6  0245               	subwf	_BaudTyped^(0+128),w
 12908  05C7  30C2               	movlw	194
 12909  05C8  3B46               	subwfb	(_BaudTyped+1)^(0+128),w
 12910  05C9  3001               	movlw	1
 12911  05CA  3B47               	subwfb	(_BaudTyped+2)^(0+128),w
 12912  05CB  1803               	btfsc	3,0
 12913  05CC  2E37               	goto	i1l5824
 12914                           
 12915                           ;PS_2.c: 718: {
 12916                           ;PS_2.c: 719: sprintf(buf,"Baud will be set to %lu",BaudTyped);
 12917  05CD  30AC               	movlw	low (STR_18| (0+32768))
 12918  05CE  0020               	movlb	0	; select bank0
 12919  05CF  00AA               	movwf	sprintf@f
 12920  05D0  3089               	movlw	high (STR_18| (0+32768))
 12921  05D1  00AB               	movwf	sprintf@f+1
 12922  05D2  0021               	movlb	1	; select bank1
 12923  05D3  0848               	movf	(_BaudTyped+3)^(0+128),w
 12924  05D4  0020               	movlb	0	; select bank0
 12925  05D5  00AF               	movwf	?_sprintf+5
 12926  05D6  0021               	movlb	1	; select bank1
 12927  05D7  0847               	movf	(_BaudTyped+2)^(0+128),w
 12928  05D8  0020               	movlb	0	; select bank0
 12929  05D9  00AE               	movwf	?_sprintf+4
 12930  05DA  0021               	movlb	1	; select bank1
 12931  05DB  0846               	movf	(_BaudTyped+1)^(0+128),w
 12932  05DC  0020               	movlb	0	; select bank0
 12933  05DD  00AD               	movwf	?_sprintf+3
 12934  05DE  0021               	movlb	1	; select bank1
 12935  05DF  0845               	movf	_BaudTyped^(0+128),w
 12936  05E0  0020               	movlb	0	; select bank0
 12937  05E1  00AC               	movwf	?_sprintf+2
 12938  05E2  30A0               	movlw	(low (Process_PS2_ScanCode@buf| (0+256)))& (0+255)
 12939  05E3  3197  270A  3181   	fcall	_sprintf
 12940                           
 12941                           ;PS_2.c: 720: UARTstringWAIT(buf);
 12942  05E6  30A0               	movlw	low Process_PS2_ScanCode@buf
 12943  05E7  0020               	movlb	0	; select bank0
 12944  05E8  00A1               	movwf	i1UARTstringWAIT@data
 12945  05E9  3001               	movlw	high Process_PS2_ScanCode@buf
 12946  05EA  00A2               	movwf	i1UARTstringWAIT@data+1
 12947  05EB  319B  2324  3181   	fcall	i1_UARTstringWAIT
 12948                           
 12949                           ;PS_2.c: 721: if(ParityTyped)
 12950  05EE  0023               	movlb	3	; select bank3
 12951  05EF  086C               	movf	_ParityTyped^(0+384),w
 12952  05F0  1D03               	btfss	3,2
 12953  05F1  2E07               	goto	i1l5818
 12954  05F2  2E14               	goto	i1l5820
 12955  05F3                     i1l5808:	
 12956                           ;PS_2.c: 724: {
 12957                           ;PS_2.c: 725: case 1:
 12958                           
 12959                           ;PS_2.c: 722: {
 12960                           ;PS_2.c: 723: switch (ParityTyped)
 12961                           
 12962                           
 12963                           ;PS_2.c: 726: UARTstringWAIT(OddParityMSG);
 12964  05F3  3011               	movlw	low (_OddParityMSG| (0+32768))
 12965  05F4  0020               	movlb	0	; select bank0
 12966  05F5  00A1               	movwf	i1UARTstringWAIT@data
 12967  05F6  3089               	movlw	high (_OddParityMSG| (0+32768))
 12968  05F7  2E18               	goto	L7
 12969  05F8                     i1l5810:	
 12970                           ;PS_2.c: 728: case 2:
 12971                           
 12972                           ;PS_2.c: 727: break;
 12973                           
 12974                           
 12975                           ;PS_2.c: 729: UARTstringWAIT(EvenParityMSG);
 12976  05F8  30FB               	movlw	low (_EvenParityMSG| (0+32768))
 12977  05F9  0020               	movlb	0	; select bank0
 12978  05FA  00A1               	movwf	i1UARTstringWAIT@data
 12979  05FB  3088               	movlw	high (_EvenParityMSG| (0+32768))
 12980  05FC  2E18               	goto	L7
 12981  05FD                     i1l5812:	
 12982                           ;PS_2.c: 731: case 3:
 12983                           
 12984                           ;PS_2.c: 730: break;
 12985                           
 12986                           
 12987                           ;PS_2.c: 732: UARTstringWAIT(MarkParityMSG);
 12988  05FD  304A               	movlw	low (_MarkParityMSG| (0+32768))
 12989  05FE  0020               	movlb	0	; select bank0
 12990  05FF  00A1               	movwf	i1UARTstringWAIT@data
 12991  0600  3089               	movlw	high (_MarkParityMSG| (0+32768))
 12992  0601  2E18               	goto	L7
 12993  0602                     i1l5814:	
 12994                           ;PS_2.c: 734: default:
 12995                           
 12996                           ;PS_2.c: 733: break;
 12997                           
 12998                           
 12999                           ;PS_2.c: 735: UARTstringWAIT(SpaceParityMSG);
 13000  0602  303A               	movlw	low (_SpaceParityMSG| (0+32768))
 13001  0603  0020               	movlb	0	; select bank0
 13002  0604  00A1               	movwf	i1UARTstringWAIT@data
 13003  0605  3089               	movlw	high (_SpaceParityMSG| (0+32768))
 13004  0606  2E18               	goto	L7
 13005  0607                     i1l5818:	
 13006                           ;PS_2.c: 737: }
 13007                           
 13008                           ;PS_2.c: 736: break;
 13009                           
 13010  0607  0023               	movlb	3	; select bank3
 13011  0608  086C               	movf	_ParityTyped^(0+384),w
 13012                           
 13013                           ; Switch size 1, requested type "space"
 13014                           ; Number of cases is 3, Range of values is 1 to 3
 13015                           ; switch strategies available:
 13016                           ; Name         Instructions Cycles
 13017                           ; simple_byte           10     6 (average)
 13018                           ; direct_byte           15     9 (fixed)
 13019                           ; jumptable            263     9 (fixed)
 13020                           ;	Chosen strategy is simple_byte
 13021  0609  3A01               	xorlw	1	; case 1
 13022  060A  1903               	skipnz
 13023  060B  2DF3               	goto	i1l5808
 13024  060C  3A03               	xorlw	3	; case 2
 13025  060D  1903               	skipnz
 13026  060E  2DF8               	goto	i1l5810
 13027  060F  3A01               	xorlw	1	; case 3
 13028  0610  1903               	skipnz
 13029  0611  2DFD               	goto	i1l5812
 13030  0612  2E02               	goto	i1l5814
 13031                           
 13032                           ;PS_2.c: 738: }
 13033  0613  2E1C               	goto	i1l834
 13034  0614                     i1l5820:	
 13035                           
 13036                           ;PS_2.c: 739: else
 13037                           ;PS_2.c: 740: {
 13038                           ;PS_2.c: 741: UARTstringWAIT(NoParityMSG);
 13039  0614  3026               	movlw	low (_NoParityMSG| (0+32768))
 13040  0615  0020               	movlb	0	; select bank0
 13041  0616  00A1               	movwf	i1UARTstringWAIT@data
 13042  0617  3089               	movlw	high (_NoParityMSG| (0+32768))
 13043  0618                     L7:	
 13044  0618  00A2               	movwf	i1UARTstringWAIT@data+1
 13045  0619  319B  2324  3181   	fcall	i1_UARTstringWAIT
 13046  061C                     i1l834:	
 13047                           
 13048                           ;PS_2.c: 742: }
 13049                           ;PS_2.c: 743: UARTstringWAIT("\r\n");
 13050  061C  30FD               	movlw	low ((STR_14+16)| (0+32768))
 13051  061D  0020               	movlb	0	; select bank0
 13052  061E  00A1               	movwf	i1UARTstringWAIT@data
 13053  061F  3089               	movlw	high ((STR_14+16)| (0+32768))
 13054  0620  00A2               	movwf	i1UARTstringWAIT@data+1
 13055  0621  319B  2324  3181   	fcall	i1_UARTstringWAIT
 13056                           
 13057                           ;PS_2.c: 744: SetBaud(BaudTyped, ParityTyped);
 13058  0624  0021               	movlb	1	; select bank1
 13059  0625  0848               	movf	(_BaudTyped+3)^(0+128),w
 13060  0626  00B2               	movwf	(SetBaud@Baud+3)^(0+128)
 13061  0627  0847               	movf	(_BaudTyped+2)^(0+128),w
 13062  0628  00B1               	movwf	(SetBaud@Baud+2)^(0+128)
 13063  0629  0846               	movf	(_BaudTyped+1)^(0+128),w
 13064  062A  00B0               	movwf	(SetBaud@Baud+1)^(0+128)
 13065  062B  0845               	movf	_BaudTyped^(0+128),w
 13066  062C  00AF               	movwf	SetBaud@Baud^(0+128)
 13067  062D  0023               	movlb	3	; select bank3
 13068  062E  086C               	movf	_ParityTyped^(0+384),w
 13069  062F  0021               	movlb	1	; select bank1
 13070  0630  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 13071  0631  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 13072  0632  00B3               	movwf	SetBaud@Parity^(0+128)
 13073  0633  318B  2365  3181   	fcall	_SetBaud
 13074                           
 13075                           ;PS_2.c: 745: }
 13076  0636  2E4A               	goto	i1l5828
 13077  0637                     i1l5824:	
 13078                           
 13079                           ;PS_2.c: 746: else
 13080                           ;PS_2.c: 747: {
 13081                           ;PS_2.c: 748: UARTstringWAIT("Baud Out of Range\r\n");
 13082  0637  30D9               	movlw	low (STR_20| (0+32768))
 13083  0638  0020               	movlb	0	; select bank0
 13084  0639  00A1               	movwf	i1UARTstringWAIT@data
 13085  063A  3089               	movlw	high (STR_20| (0+32768))
 13086  063B  00A2               	movwf	i1UARTstringWAIT@data+1
 13087  063C  319B  2324  3181   	fcall	i1_UARTstringWAIT
 13088                           
 13089                           ;PS_2.c: 749: delayUS(15000);
 13090  063F  3000               	movlw	0
 13091  0640  00F3               	movwf	i1delayUS@US+3
 13092  0641  3000               	movlw	0
 13093  0642  00F2               	movwf	i1delayUS@US+2
 13094  0643  303A               	movlw	58
 13095  0644  00F1               	movwf	i1delayUS@US+1
 13096  0645  3098               	movlw	152
 13097  0646  00F0               	movwf	i1delayUS@US
 13098  0647  319B  23B5  3181   	fcall	i1_delayUS
 13099  064A                     i1l5828:	
 13100                           
 13101                           ;PS_2.c: 750: }
 13102                           ;PS_2.c: 751: BAUDMODE=0;
 13103  064A  0021               	movlb	1	; select bank1
 13104  064B  01CB               	clrf	_BAUDMODE^(0+128)
 13105  064C                     i1l5830:	
 13106                           
 13107                           ;PS_2.c: 752: }
 13108                           ;PS_2.c: 753: }
 13109                           ;PS_2.c: 754: }
 13110                           ;PS_2.c: 755: }
 13111                           ;PS_2.c: 758: temp =0;
 13112  064C  0023               	movlb	3	; select bank3
 13113  064D  01E1               	clrf	Process_PS2_ScanCode@temp^(0+384)
 13114                           
 13115                           ;PS_2.c: 759: PS_2_Read_Data_First =0;
 13116  064E  01E2               	clrf	_PS_2_Read_Data_First^(0+384)
 13117  064F  01E3               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
 13118                           
 13119                           ;PS_2.c: 760: PS_2_Read_Data_Second =0;
 13120  0650  01E4               	clrf	_PS_2_Read_Data_Second^(0+384)
 13121  0651  01E5               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
 13122                           
 13123                           ;PS_2.c: 761: PS_2_Read_Data_Third =0;
 13124  0652  01E6               	clrf	_PS_2_Read_Data_Third^(0+384)
 13125  0653  01E7               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
 13126                           
 13127                           ;PS_2.c: 762: Caps_Lock_Key_old = Caps_Lock_Key;
 13128  0654  0021               	movlb	1	; select bank1
 13129  0655  084C               	movf	_Caps_Lock_Key^(0+128),w
 13130  0656  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 13131  0657  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 13132  0658  00CD               	movwf	_Caps_Lock_Key_old^(0+128)
 13133                           
 13134                           ;PS_2.c: 763: Right_Shift_Key_old = Right_Shift_Key;
 13135  0659  0023               	movlb	3	; select bank3
 13136  065A  086E               	movf	_Right_Shift_Key^(0+384),w
 13137  065B  0021               	movlb	1	; select bank1
 13138  065C  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 13139  065D  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 13140  065E  00D5               	movwf	_Right_Shift_Key_old^(0+128)
 13141                           
 13142                           ;PS_2.c: 764: Left_Shift_Key_old = Left_Shift_Key;
 13143  065F  0023               	movlb	3	; select bank3
 13144  0660  086B               	movf	_Left_Shift_Key^(0+384),w
 13145  0661  0021               	movlb	1	; select bank1
 13146  0662  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 13147  0663  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 13148  0664  00D0               	movwf	_Left_Shift_Key_old^(0+128)
 13149                           
 13150                           ;PS_2.c: 765: LATC &= ~0b00010000;
 13151  0665  30EF               	movlw	239
 13152  0666  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 13153  0667  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 13154  0668  0022               	movlb	2	; select bank2
 13155  0669  058E               	andwf	14,f	;volatile
 13156                           
 13157                           ;PS_2.c: 766: }
 13158  066A  291C               	goto	i1l5850
 13159  066B                     i1l5846:	
 13160                           
 13161                           ;PS_2.c: 767: else
 13162                           ;PS_2.c: 768: {
 13163                           ;PS_2.c: 770: cleanBuffer(PS_2_ScanCodes, 12);
 13164  066B  300C               	movlw	12
 13165  066C  00F0               	movwf	cleanBuffer@count
 13166  066D  3000               	movlw	0
 13167  066E  00F1               	movwf	cleanBuffer@count+1
 13168  066F  30D7               	movlw	(low (_PS_2_ScanCodes| 0))& (0+255)
 13169  0670  3186  26E6  3181   	fcall	_cleanBuffer
 13170                           
 13171                           ;PS_2.c: 771: PS_2_Buffer_items = 0;
 13172  0673  0021               	movlb	1	; select bank1
 13173  0674  01D1               	clrf	_PS_2_Buffer_items^(0+128)
 13174  0675  291C               	goto	i1l5850
 13175  0676                     __end_of_Process_PS2_ScanCode:	
 13176                           
 13177                           	psect	text44
 13178  0CDE                     __ptext44:	
 13179 ;; *************** function i1_Send_PS2 *****************
 13180 ;; Defined at:
 13181 ;;		line 856 in file "PS_2.c"
 13182 ;; Parameters:    Size  Location     Type
 13183 ;;  command         1    wreg     unsigned char 
 13184 ;; Auto vars:     Size  Location     Type
 13185 ;;  command         1    1[BANK0 ] unsigned char 
 13186 ;;  Send_PS2        2    3[BANK0 ] unsigned int 
 13187 ;;  Send_PS2        1    2[BANK0 ] unsigned char 
 13188 ;;  Send_PS2        1    0[BANK0 ] unsigned char 
 13189 ;; Return value:  Size  Location     Type
 13190 ;;                  1    wreg      unsigned char 
 13191 ;; Registers used:
 13192 ;;		wreg, status,2, status,0, pclath, cstack
 13193 ;; Tracked objects:
 13194 ;;		On entry : 0/0
 13195 ;;		On exit  : 0/0
 13196 ;;		Unchanged: 0/0
 13197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13199 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13200 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13201 ;;      Totals:         4       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13202 ;;Total ram usage:        9 bytes
 13203 ;; Hardware stack levels used:    1
 13204 ;; Hardware stack levels required when called:    1
 13205 ;; This function calls:
 13206 ;;		i1_CheckSum_byte
 13207 ;;		i1_Clock_TRIS
 13208 ;;		i1_Data_TRIS
 13209 ;;		i1_READ_PS_2_PIN
 13210 ;;		i1_delayUS
 13211 ;; This function is called by:
 13212 ;;		_Process_PS2_ScanCode
 13213 ;;		_ResendLast
 13214 ;; This function uses a non-reentrant model
 13215 ;;
 13216                           
 13217                           
 13218                           ;psect for function i1_Send_PS2
 13219  0CDE                     i1_Send_PS2:	
 13220                           
 13221                           ;incstack = 0
 13222                           ; Regs used in i1_Send_PS2: [wreg+status,2+status,0+pclath+cstack]
 13223                           ;i1Send_PS2@command stored from wreg
 13224  0CDE  0020               	movlb	0	; select bank0
 13225  0CDF  00A1               	movwf	i1Send_PS2@command
 13226                           
 13227                           ;PS_2.c: 858: unsigned char i=0;
 13228  0CE0  01A2               	clrf	i1Send_PS2@i
 13229                           
 13230                           ;PS_2.c: 859: unsigned char oddparity = CheckSum_byte((unsigned int)command , 3);
 13231  0CE1  0821               	movf	i1Send_PS2@command,w
 13232  0CE2  00FA               	movwf	??i1_Send_PS2
 13233  0CE3  01FB               	clrf	??i1_Send_PS2+1
 13234  0CE4  087A               	movf	??i1_Send_PS2,w
 13235  0CE5  00F0               	movwf	i1CheckSum_byte@This
 13236  0CE6  087B               	movf	??i1_Send_PS2+1,w
 13237  0CE7  00F1               	movwf	i1CheckSum_byte@This+1
 13238  0CE8  3003               	movlw	3
 13239  0CE9  00FC               	movwf	??i1_Send_PS2+2
 13240  0CEA  087C               	movf	??i1_Send_PS2+2,w
 13241  0CEB  00F2               	movwf	i1CheckSum_byte@Odd_Even
 13242  0CEC  319A  2298  318C   	fcall	i1_CheckSum_byte
 13243  0CEF  00FD               	movwf	??i1_Send_PS2+3
 13244  0CF0  087D               	movf	??i1_Send_PS2+3,w
 13245  0CF1  0020               	movlb	0	; select bank0
 13246  0CF2  00A0               	movwf	i1Send_PS2@oddparity
 13247                           
 13248                           ;PS_2.c: 860: unsigned int timeout =0;
 13249  0CF3  01A3               	clrf	i1Send_PS2@timeout
 13250  0CF4  01A4               	clrf	i1Send_PS2@timeout+1
 13251                           
 13252                           ;PS_2.c: 862: Clock_TRIS(0);
 13253  0CF5  3000               	movlw	0
 13254  0CF6  3198  209C  318C   	fcall	i1_Clock_TRIS
 13255                           
 13256                           ;PS_2.c: 863: Data_TRIS(0);
 13257  0CF9  3000               	movlw	0
 13258  0CFA  3198  20A6  318C   	fcall	i1_Data_TRIS
 13259                           
 13260                           ;PS_2.c: 864: LATA &= ~0b00100000;
 13261  0CFD  30DF               	movlw	223
 13262  0CFE  00FA               	movwf	??i1_Send_PS2
 13263  0CFF  087A               	movf	??i1_Send_PS2,w
 13264  0D00  0022               	movlb	2	; select bank2
 13265  0D01  058C               	andwf	12,f	;volatile
 13266                           
 13267                           ;PS_2.c: 865: delayUS(300);
 13268  0D02  3000               	movlw	0
 13269  0D03  00F3               	movwf	i1delayUS@US+3
 13270  0D04  3000               	movlw	0
 13271  0D05  00F2               	movwf	i1delayUS@US+2
 13272  0D06  3001               	movlw	1
 13273  0D07  00F1               	movwf	i1delayUS@US+1
 13274  0D08  302C               	movlw	44
 13275  0D09  00F0               	movwf	i1delayUS@US
 13276  0D0A  319B  23B5  318C   	fcall	i1_delayUS
 13277                           
 13278                           ;PS_2.c: 866: LATA &= ~0b00010000;
 13279  0D0D  30EF               	movlw	239
 13280  0D0E  00FA               	movwf	??i1_Send_PS2
 13281  0D0F  087A               	movf	??i1_Send_PS2,w
 13282  0D10  0022               	movlb	2	; select bank2
 13283  0D11  058C               	andwf	12,f	;volatile
 13284                           
 13285                           ;PS_2.c: 867: delayUS(20);
 13286  0D12  3000               	movlw	0
 13287  0D13  00F3               	movwf	i1delayUS@US+3
 13288  0D14  3000               	movlw	0
 13289  0D15  00F2               	movwf	i1delayUS@US+2
 13290  0D16  3000               	movlw	0
 13291  0D17  00F1               	movwf	i1delayUS@US+1
 13292  0D18  3014               	movlw	20
 13293  0D19  00F0               	movwf	i1delayUS@US
 13294  0D1A  319B  23B5  318C   	fcall	i1_delayUS
 13295                           
 13296                           ;PS_2.c: 868: Clock_TRIS(1);
 13297  0D1D  3001               	movlw	1
 13298  0D1E  3198  209C  318C   	fcall	i1_Clock_TRIS
 13299                           
 13300                           ;PS_2.c: 869: timeout=0;
 13301  0D21  0020               	movlb	0	; select bank0
 13302  0D22  01A3               	clrf	i1Send_PS2@timeout
 13303  0D23  01A4               	clrf	i1Send_PS2@timeout+1
 13304  0D24                     i1l5182:	
 13305                           ;PS_2.c: 870: while(READ_PS_2_PIN(0b00100000))
 13306                           
 13307  0D24  3020               	movlw	32
 13308  0D25  3199  2181  318C   	fcall	i1_READ_PS_2_PIN
 13309  0D28  3A00               	xorlw	0
 13310  0D29  1903               	btfsc	3,2
 13311  0D2A  2D41               	goto	i1l5184
 13312                           
 13313                           ;PS_2.c: 871: {
 13314                           ;PS_2.c: 872: __nop();
 13315  0D2B  0000               	nop
 13316                           
 13317                           ;PS_2.c: 873: timeout++;
 13318  0D2C  3001               	movlw	1
 13319  0D2D  0020               	movlb	0	; select bank0
 13320  0D2E  07A3               	addwf	i1Send_PS2@timeout,f
 13321  0D2F  3000               	movlw	0
 13322  0D30  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13323                           
 13324                           ;PS_2.c: 874: if(timeout > 15000)
 13325  0D31  303A               	movlw	58
 13326  0D32  0224               	subwf	i1Send_PS2@timeout+1,w
 13327  0D33  3099               	movlw	153
 13328  0D34  1903               	skipnz
 13329  0D35  0223               	subwf	i1Send_PS2@timeout,w
 13330  0D36  1C03               	skipc
 13331  0D37  2D24               	goto	i1l5182
 13332                           
 13333                           ;PS_2.c: 875: {
 13334                           ;PS_2.c: 876: Clock_TRIS(1);
 13335  0D38  3001               	movlw	1
 13336  0D39  3198  209C  318C   	fcall	i1_Clock_TRIS
 13337                           
 13338                           ;PS_2.c: 877: Data_TRIS(1);
 13339  0D3C  3001               	movlw	1
 13340  0D3D  3198  20A6         	fcall	i1_Data_TRIS
 13341                           
 13342                           ;PS_2.c: 878: return 1;
 13343  0D3F  3001               	movlw	1
 13344  0D40  0008               	return
 13345  0D41                     i1l5184:	
 13346                           
 13347                           ;PS_2.c: 879: }
 13348                           ;PS_2.c: 880: }
 13349                           ;PS_2.c: 881: for(i=0;i<8;i++)
 13350  0D41  0020               	movlb	0	; select bank0
 13351  0D42  01A2               	clrf	i1Send_PS2@i
 13352  0D43  3008               	movlw	8
 13353  0D44  0222               	subwf	i1Send_PS2@i,w
 13354  0D45  1803               	btfsc	3,0
 13355  0D46  2D9B               	goto	i1l867
 13356  0D47                     i1l866:	
 13357                           
 13358                           ;PS_2.c: 882: {
 13359                           ;PS_2.c: 883: if(command & 0x1)
 13360  0D47  1C21               	btfss	i1Send_PS2@command,0
 13361  0D48  2D4C               	goto	i1l5192
 13362                           
 13363                           ;PS_2.c: 884: {
 13364                           ;PS_2.c: 885: LATA |= 0b00010000;
 13365  0D49  0022               	movlb	2	; select bank2
 13366  0D4A  160C               	bsf	12,4	;volatile
 13367                           
 13368                           ;PS_2.c: 886: }
 13369  0D4B  2D51               	goto	i1l5194
 13370  0D4C                     i1l5192:	
 13371                           
 13372                           ;PS_2.c: 887: else
 13373                           ;PS_2.c: 888: {
 13374                           ;PS_2.c: 889: LATA &= ~0b00010000;
 13375  0D4C  30EF               	movlw	239
 13376  0D4D  00FA               	movwf	??i1_Send_PS2
 13377  0D4E  087A               	movf	??i1_Send_PS2,w
 13378  0D4F  0022               	movlb	2	; select bank2
 13379  0D50  058C               	andwf	12,f	;volatile
 13380  0D51                     i1l5194:	
 13381                           
 13382                           ;PS_2.c: 890: }
 13383                           ;PS_2.c: 891: command >> = 1;
 13384  0D51  1003               	clrc
 13385  0D52  0020               	movlb	0	; select bank0
 13386  0D53  0CA1               	rrf	i1Send_PS2@command,f
 13387                           
 13388                           ;PS_2.c: 892: timeout=0;
 13389  0D54  01A3               	clrf	i1Send_PS2@timeout
 13390  0D55  01A4               	clrf	i1Send_PS2@timeout+1
 13391  0D56                     i1l5206:	
 13392                           ;PS_2.c: 893: while(!READ_PS_2_PIN(0b00100000))
 13393                           
 13394  0D56  3020               	movlw	32
 13395  0D57  3199  2181  318C   	fcall	i1_READ_PS_2_PIN
 13396  0D5A  3A00               	xorlw	0
 13397  0D5B  1D03               	btfss	3,2
 13398  0D5C  2D72               	goto	i1l5208
 13399                           
 13400                           ;PS_2.c: 894: {
 13401                           ;PS_2.c: 895: timeout++;
 13402  0D5D  3001               	movlw	1
 13403  0D5E  0020               	movlb	0	; select bank0
 13404  0D5F  07A3               	addwf	i1Send_PS2@timeout,f
 13405  0D60  3000               	movlw	0
 13406  0D61  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13407                           
 13408                           ;PS_2.c: 896: if(timeout > 15000)
 13409  0D62  303A               	movlw	58
 13410  0D63  0224               	subwf	i1Send_PS2@timeout+1,w
 13411  0D64  3099               	movlw	153
 13412  0D65  1903               	skipnz
 13413  0D66  0223               	subwf	i1Send_PS2@timeout,w
 13414  0D67  1C03               	skipc
 13415  0D68  2D56               	goto	i1l5206
 13416                           
 13417                           ;PS_2.c: 897: {
 13418                           ;PS_2.c: 898: Clock_TRIS(1);
 13419  0D69  3001               	movlw	1
 13420  0D6A  3198  209C  318C   	fcall	i1_Clock_TRIS
 13421                           
 13422                           ;PS_2.c: 899: Data_TRIS(1);
 13423  0D6D  3001               	movlw	1
 13424  0D6E  3198  20A6         	fcall	i1_Data_TRIS
 13425                           
 13426                           ;PS_2.c: 900: return 1;
 13427  0D70  3001               	movlw	1
 13428  0D71  0008               	return
 13429  0D72                     i1l5208:	
 13430                           
 13431                           ;PS_2.c: 901: }
 13432                           ;PS_2.c: 902: }
 13433                           ;PS_2.c: 903: timeout=0;
 13434  0D72  0020               	movlb	0	; select bank0
 13435  0D73  01A3               	clrf	i1Send_PS2@timeout
 13436  0D74  01A4               	clrf	i1Send_PS2@timeout+1
 13437  0D75                     i1l5218:	
 13438                           ;PS_2.c: 904: while(READ_PS_2_PIN(0b00100000))
 13439                           
 13440  0D75  3020               	movlw	32
 13441  0D76  3199  2181  318C   	fcall	i1_READ_PS_2_PIN
 13442  0D79  3A00               	xorlw	0
 13443  0D7A  1903               	btfsc	3,2
 13444  0D7B  2D92               	goto	i1l5220
 13445                           
 13446                           ;PS_2.c: 905: {
 13447                           ;PS_2.c: 906: __nop();
 13448  0D7C  0000               	nop
 13449                           
 13450                           ;PS_2.c: 907: timeout++;
 13451  0D7D  3001               	movlw	1
 13452  0D7E  0020               	movlb	0	; select bank0
 13453  0D7F  07A3               	addwf	i1Send_PS2@timeout,f
 13454  0D80  3000               	movlw	0
 13455  0D81  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13456                           
 13457                           ;PS_2.c: 908: if(timeout > 15000)
 13458  0D82  303A               	movlw	58
 13459  0D83  0224               	subwf	i1Send_PS2@timeout+1,w
 13460  0D84  3099               	movlw	153
 13461  0D85  1903               	skipnz
 13462  0D86  0223               	subwf	i1Send_PS2@timeout,w
 13463  0D87  1C03               	skipc
 13464  0D88  2D75               	goto	i1l5218
 13465                           
 13466                           ;PS_2.c: 909: {
 13467                           ;PS_2.c: 910: Clock_TRIS(1);
 13468  0D89  3001               	movlw	1
 13469  0D8A  3198  209C  318C   	fcall	i1_Clock_TRIS
 13470                           
 13471                           ;PS_2.c: 911: Data_TRIS(1);
 13472  0D8D  3001               	movlw	1
 13473  0D8E  3198  20A6         	fcall	i1_Data_TRIS
 13474                           
 13475                           ;PS_2.c: 912: return 1;
 13476  0D90  3001               	movlw	1
 13477  0D91  0008               	return
 13478  0D92                     i1l5220:	
 13479  0D92  3001               	movlw	1
 13480  0D93  00FA               	movwf	??i1_Send_PS2
 13481  0D94  087A               	movf	??i1_Send_PS2,w
 13482  0D95  0020               	movlb	0	; select bank0
 13483  0D96  07A2               	addwf	i1Send_PS2@i,f
 13484  0D97  3008               	movlw	8
 13485  0D98  0222               	subwf	i1Send_PS2@i,w
 13486  0D99  1C03               	skipc
 13487  0D9A  2D47               	goto	i1l866
 13488  0D9B                     i1l867:	
 13489                           
 13490                           ;PS_2.c: 913: }
 13491                           ;PS_2.c: 914: }
 13492                           ;PS_2.c: 915: }
 13493                           ;PS_2.c: 917: if(oddparity & 0x1)
 13494  0D9B  1C20               	btfss	i1Send_PS2@oddparity,0
 13495  0D9C  2DA0               	goto	i1l5226
 13496                           
 13497                           ;PS_2.c: 918: {
 13498                           ;PS_2.c: 919: LATA |= 0b00010000;
 13499  0D9D  0022               	movlb	2	; select bank2
 13500  0D9E  160C               	bsf	12,4	;volatile
 13501                           
 13502                           ;PS_2.c: 920: }
 13503  0D9F  2DA5               	goto	i1l5228
 13504  0DA0                     i1l5226:	
 13505                           
 13506                           ;PS_2.c: 921: else
 13507                           ;PS_2.c: 922: {
 13508                           ;PS_2.c: 923: LATA &= ~0b00010000;
 13509  0DA0  30EF               	movlw	239
 13510  0DA1  00FA               	movwf	??i1_Send_PS2
 13511  0DA2  087A               	movf	??i1_Send_PS2,w
 13512  0DA3  0022               	movlb	2	; select bank2
 13513  0DA4  058C               	andwf	12,f	;volatile
 13514  0DA5                     i1l5228:	
 13515                           
 13516                           ;PS_2.c: 924: }
 13517                           ;PS_2.c: 925: timeout=0;
 13518  0DA5  0020               	movlb	0	; select bank0
 13519  0DA6  01A3               	clrf	i1Send_PS2@timeout
 13520  0DA7  01A4               	clrf	i1Send_PS2@timeout+1
 13521  0DA8                     i1l5238:	
 13522                           ;PS_2.c: 926: while(!READ_PS_2_PIN(0b00100000))
 13523                           
 13524  0DA8  3020               	movlw	32
 13525  0DA9  3199  2181  318C   	fcall	i1_READ_PS_2_PIN
 13526  0DAC  3A00               	xorlw	0
 13527  0DAD  1D03               	btfss	3,2
 13528  0DAE  2DC4               	goto	i1l5240
 13529                           
 13530                           ;PS_2.c: 927: {
 13531                           ;PS_2.c: 928: timeout++;
 13532  0DAF  3001               	movlw	1
 13533  0DB0  0020               	movlb	0	; select bank0
 13534  0DB1  07A3               	addwf	i1Send_PS2@timeout,f
 13535  0DB2  3000               	movlw	0
 13536  0DB3  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13537                           
 13538                           ;PS_2.c: 929: if(timeout > 15000)
 13539  0DB4  303A               	movlw	58
 13540  0DB5  0224               	subwf	i1Send_PS2@timeout+1,w
 13541  0DB6  3099               	movlw	153
 13542  0DB7  1903               	skipnz
 13543  0DB8  0223               	subwf	i1Send_PS2@timeout,w
 13544  0DB9  1C03               	skipc
 13545  0DBA  2DA8               	goto	i1l5238
 13546                           
 13547                           ;PS_2.c: 930: {
 13548                           ;PS_2.c: 931: Clock_TRIS(1);
 13549  0DBB  3001               	movlw	1
 13550  0DBC  3198  209C  318C   	fcall	i1_Clock_TRIS
 13551                           
 13552                           ;PS_2.c: 932: Data_TRIS(1);
 13553  0DBF  3001               	movlw	1
 13554  0DC0  3198  20A6         	fcall	i1_Data_TRIS
 13555                           
 13556                           ;PS_2.c: 933: return 1;
 13557  0DC2  3001               	movlw	1
 13558  0DC3  0008               	return
 13559  0DC4                     i1l5240:	
 13560                           
 13561                           ;PS_2.c: 934: }
 13562                           ;PS_2.c: 935: }
 13563                           ;PS_2.c: 936: timeout=0;
 13564  0DC4  0020               	movlb	0	; select bank0
 13565  0DC5  01A3               	clrf	i1Send_PS2@timeout
 13566  0DC6  01A4               	clrf	i1Send_PS2@timeout+1
 13567  0DC7                     i1l5250:	
 13568                           ;PS_2.c: 937: while(READ_PS_2_PIN(0b00100000))
 13569                           
 13570  0DC7  3020               	movlw	32
 13571  0DC8  3199  2181  318C   	fcall	i1_READ_PS_2_PIN
 13572  0DCB  3A00               	xorlw	0
 13573  0DCC  1903               	btfsc	3,2
 13574  0DCD  2DE3               	goto	i1l5252
 13575                           
 13576                           ;PS_2.c: 938: {
 13577                           ;PS_2.c: 939: timeout++;
 13578  0DCE  3001               	movlw	1
 13579  0DCF  0020               	movlb	0	; select bank0
 13580  0DD0  07A3               	addwf	i1Send_PS2@timeout,f
 13581  0DD1  3000               	movlw	0
 13582  0DD2  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13583                           
 13584                           ;PS_2.c: 940: if(timeout > 15000)
 13585  0DD3  303A               	movlw	58
 13586  0DD4  0224               	subwf	i1Send_PS2@timeout+1,w
 13587  0DD5  3099               	movlw	153
 13588  0DD6  1903               	skipnz
 13589  0DD7  0223               	subwf	i1Send_PS2@timeout,w
 13590  0DD8  1C03               	skipc
 13591  0DD9  2DC7               	goto	i1l5250
 13592                           
 13593                           ;PS_2.c: 941: {
 13594                           ;PS_2.c: 942: Clock_TRIS(1);
 13595  0DDA  3001               	movlw	1
 13596  0DDB  3198  209C  318C   	fcall	i1_Clock_TRIS
 13597                           
 13598                           ;PS_2.c: 943: Data_TRIS(1);
 13599  0DDE  3001               	movlw	1
 13600  0DDF  3198  20A6         	fcall	i1_Data_TRIS
 13601                           
 13602                           ;PS_2.c: 944: return 1;
 13603  0DE1  3001               	movlw	1
 13604  0DE2  0008               	return
 13605  0DE3                     i1l5252:	
 13606                           
 13607                           ;PS_2.c: 945: }
 13608                           ;PS_2.c: 946: }
 13609                           ;PS_2.c: 948: Data_TRIS(1);
 13610  0DE3  3001               	movlw	1
 13611  0DE4  3198  20A6  318C   	fcall	i1_Data_TRIS
 13612                           
 13613                           ;PS_2.c: 950: timeout=0;
 13614  0DE7  0020               	movlb	0	; select bank0
 13615  0DE8  01A3               	clrf	i1Send_PS2@timeout
 13616  0DE9  01A4               	clrf	i1Send_PS2@timeout+1
 13617  0DEA                     i1l5264:	
 13618                           ;PS_2.c: 951: while(READ_PS_2_PIN(0b00010000))
 13619                           
 13620  0DEA  3010               	movlw	16
 13621  0DEB  3199  2181  318C   	fcall	i1_READ_PS_2_PIN
 13622  0DEE  3A00               	xorlw	0
 13623  0DEF  1903               	btfsc	3,2
 13624  0DF0  2E06               	goto	i1l5266
 13625                           
 13626                           ;PS_2.c: 952: {
 13627                           ;PS_2.c: 953: timeout++;
 13628  0DF1  3001               	movlw	1
 13629  0DF2  0020               	movlb	0	; select bank0
 13630  0DF3  07A3               	addwf	i1Send_PS2@timeout,f
 13631  0DF4  3000               	movlw	0
 13632  0DF5  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13633                           
 13634                           ;PS_2.c: 954: if(timeout > 15000)
 13635  0DF6  303A               	movlw	58
 13636  0DF7  0224               	subwf	i1Send_PS2@timeout+1,w
 13637  0DF8  3099               	movlw	153
 13638  0DF9  1903               	skipnz
 13639  0DFA  0223               	subwf	i1Send_PS2@timeout,w
 13640  0DFB  1C03               	skipc
 13641  0DFC  2DEA               	goto	i1l5264
 13642                           
 13643                           ;PS_2.c: 955: {
 13644                           ;PS_2.c: 956: Clock_TRIS(1);
 13645  0DFD  3001               	movlw	1
 13646  0DFE  3198  209C  318C   	fcall	i1_Clock_TRIS
 13647                           
 13648                           ;PS_2.c: 957: Data_TRIS(1);
 13649  0E01  3001               	movlw	1
 13650  0E02  3198  20A6         	fcall	i1_Data_TRIS
 13651                           
 13652                           ;PS_2.c: 958: return 1;
 13653  0E04  3001               	movlw	1
 13654  0E05  0008               	return
 13655  0E06                     i1l5266:	
 13656                           
 13657                           ;PS_2.c: 959: }
 13658                           ;PS_2.c: 960: }
 13659                           ;PS_2.c: 961: timeout=0;
 13660  0E06  0020               	movlb	0	; select bank0
 13661  0E07  01A3               	clrf	i1Send_PS2@timeout
 13662  0E08  01A4               	clrf	i1Send_PS2@timeout+1
 13663  0E09                     i1l5276:	
 13664                           ;PS_2.c: 962: while(READ_PS_2_PIN(0b00100000))
 13665                           
 13666  0E09  3020               	movlw	32
 13667  0E0A  3199  2181  318C   	fcall	i1_READ_PS_2_PIN
 13668  0E0D  3A00               	xorlw	0
 13669  0E0E  1903               	btfsc	3,2
 13670  0E0F  2E25               	goto	i1l5278
 13671                           
 13672                           ;PS_2.c: 963: {
 13673                           ;PS_2.c: 964: timeout++;
 13674  0E10  3001               	movlw	1
 13675  0E11  0020               	movlb	0	; select bank0
 13676  0E12  07A3               	addwf	i1Send_PS2@timeout,f
 13677  0E13  3000               	movlw	0
 13678  0E14  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13679                           
 13680                           ;PS_2.c: 965: if(timeout > 15000)
 13681  0E15  303A               	movlw	58
 13682  0E16  0224               	subwf	i1Send_PS2@timeout+1,w
 13683  0E17  3099               	movlw	153
 13684  0E18  1903               	skipnz
 13685  0E19  0223               	subwf	i1Send_PS2@timeout,w
 13686  0E1A  1C03               	skipc
 13687  0E1B  2E09               	goto	i1l5276
 13688                           
 13689                           ;PS_2.c: 966: {
 13690                           ;PS_2.c: 967: Clock_TRIS(1);
 13691  0E1C  3001               	movlw	1
 13692  0E1D  3198  209C  318C   	fcall	i1_Clock_TRIS
 13693                           
 13694                           ;PS_2.c: 968: Data_TRIS(1);
 13695  0E20  3001               	movlw	1
 13696  0E21  3198  20A6         	fcall	i1_Data_TRIS
 13697                           
 13698                           ;PS_2.c: 969: return 1;
 13699  0E23  3001               	movlw	1
 13700  0E24  0008               	return
 13701  0E25                     i1l5278:	
 13702                           
 13703                           ;PS_2.c: 970: }
 13704                           ;PS_2.c: 971: }
 13705                           ;PS_2.c: 972: timeout=0;
 13706  0E25  0020               	movlb	0	; select bank0
 13707  0E26  01A3               	clrf	i1Send_PS2@timeout
 13708  0E27  01A4               	clrf	i1Send_PS2@timeout+1
 13709  0E28                     i1l5288:	
 13710                           ;PS_2.c: 973: while(!READ_PS_2_PIN(0b00010000))
 13711                           
 13712  0E28  3010               	movlw	16
 13713  0E29  3199  2181  318C   	fcall	i1_READ_PS_2_PIN
 13714  0E2C  3A00               	xorlw	0
 13715  0E2D  1D03               	btfss	3,2
 13716  0E2E  2E44               	goto	i1l5290
 13717                           
 13718                           ;PS_2.c: 974: {
 13719                           ;PS_2.c: 975: timeout++;
 13720  0E2F  3001               	movlw	1
 13721  0E30  0020               	movlb	0	; select bank0
 13722  0E31  07A3               	addwf	i1Send_PS2@timeout,f
 13723  0E32  3000               	movlw	0
 13724  0E33  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13725                           
 13726                           ;PS_2.c: 976: if(timeout > 15000)
 13727  0E34  303A               	movlw	58
 13728  0E35  0224               	subwf	i1Send_PS2@timeout+1,w
 13729  0E36  3099               	movlw	153
 13730  0E37  1903               	skipnz
 13731  0E38  0223               	subwf	i1Send_PS2@timeout,w
 13732  0E39  1C03               	skipc
 13733  0E3A  2E28               	goto	i1l5288
 13734                           
 13735                           ;PS_2.c: 977: {
 13736                           ;PS_2.c: 978: Clock_TRIS(1);
 13737  0E3B  3001               	movlw	1
 13738  0E3C  3198  209C  318C   	fcall	i1_Clock_TRIS
 13739                           
 13740                           ;PS_2.c: 979: Data_TRIS(1);
 13741  0E3F  3001               	movlw	1
 13742  0E40  3198  20A6         	fcall	i1_Data_TRIS
 13743                           
 13744                           ;PS_2.c: 980: return 1;
 13745  0E42  3001               	movlw	1
 13746  0E43  0008               	return
 13747  0E44                     i1l5290:	
 13748                           
 13749                           ;PS_2.c: 981: }
 13750                           ;PS_2.c: 982: }
 13751                           ;PS_2.c: 983: timeout=0;
 13752  0E44  0020               	movlb	0	; select bank0
 13753  0E45  01A3               	clrf	i1Send_PS2@timeout
 13754  0E46  01A4               	clrf	i1Send_PS2@timeout+1
 13755  0E47                     i1l5300:	
 13756                           ;PS_2.c: 984: while(!READ_PS_2_PIN(0b00100000))
 13757                           
 13758  0E47  3020               	movlw	32
 13759  0E48  3199  2181  318C   	fcall	i1_READ_PS_2_PIN
 13760  0E4B  3A00               	xorlw	0
 13761  0E4C  1D03               	btfss	3,2
 13762  0E4D  2E63               	goto	i1l5302
 13763                           
 13764                           ;PS_2.c: 985: {
 13765                           ;PS_2.c: 986: timeout++;
 13766  0E4E  3001               	movlw	1
 13767  0E4F  0020               	movlb	0	; select bank0
 13768  0E50  07A3               	addwf	i1Send_PS2@timeout,f
 13769  0E51  3000               	movlw	0
 13770  0E52  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13771                           
 13772                           ;PS_2.c: 987: if(timeout > 15000)
 13773  0E53  303A               	movlw	58
 13774  0E54  0224               	subwf	i1Send_PS2@timeout+1,w
 13775  0E55  3099               	movlw	153
 13776  0E56  1903               	skipnz
 13777  0E57  0223               	subwf	i1Send_PS2@timeout,w
 13778  0E58  1C03               	skipc
 13779  0E59  2E47               	goto	i1l5300
 13780                           
 13781                           ;PS_2.c: 988: {
 13782                           ;PS_2.c: 989: Clock_TRIS(1);
 13783  0E5A  3001               	movlw	1
 13784  0E5B  3198  209C  318C   	fcall	i1_Clock_TRIS
 13785                           
 13786                           ;PS_2.c: 990: Data_TRIS(1);
 13787  0E5E  3001               	movlw	1
 13788  0E5F  3198  20A6         	fcall	i1_Data_TRIS
 13789                           
 13790                           ;PS_2.c: 991: return 1;
 13791  0E61  3001               	movlw	1
 13792  0E62  0008               	return
 13793  0E63                     i1l5302:	
 13794                           
 13795                           ;PS_2.c: 992: }
 13796                           ;PS_2.c: 993: }
 13797                           ;PS_2.c: 996: Clock_TRIS(1);
 13798  0E63  3001               	movlw	1
 13799  0E64  3198  209C  318C   	fcall	i1_Clock_TRIS
 13800                           
 13801                           ;PS_2.c: 997: Data_TRIS(1);
 13802  0E67  3001               	movlw	1
 13803  0E68  3198  20A6         	fcall	i1_Data_TRIS
 13804                           
 13805                           ;PS_2.c: 998: return 0;
 13806  0E6A  3000               	movlw	0
 13807  0E6B  0008               	return
 13808  0E6C                     __end_ofi1_Send_PS2:	
 13809                           
 13810                           	psect	text45
 13811  1981                     __ptext45:	
 13812 ;; *************** function i1_READ_PS_2_PIN *****************
 13813 ;; Defined at:
 13814 ;;		line 222 in file "PS_2.c"
 13815 ;; Parameters:    Size  Location     Type
 13816 ;;  DATA_CLK        1    wreg     unsigned char 
 13817 ;; Auto vars:     Size  Location     Type
 13818 ;;  DATA_CLK        1    0[COMMON] unsigned char 
 13819 ;; Return value:  Size  Location     Type
 13820 ;;                  1    wreg      unsigned char 
 13821 ;; Registers used:
 13822 ;;		wreg, status,2, status,0
 13823 ;; Tracked objects:
 13824 ;;		On entry : 0/0
 13825 ;;		On exit  : 0/0
 13826 ;;		Unchanged: 0/0
 13827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13829 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13831 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13832 ;;Total ram usage:        1 bytes
 13833 ;; Hardware stack levels used:    1
 13834 ;; This function calls:
 13835 ;;		Nothing
 13836 ;; This function is called by:
 13837 ;;		_isr
 13838 ;;		i1_Send_PS2
 13839 ;; This function uses a non-reentrant model
 13840 ;;
 13841                           
 13842                           
 13843                           ;psect for function i1_READ_PS_2_PIN
 13844  1981                     i1_READ_PS_2_PIN:	
 13845                           
 13846                           ;incstack = 0
 13847                           ; Regs used in i1_READ_PS_2_PIN: [wreg+status,2+status,0]
 13848                           ;i1READ_PS_2_PIN@DATA_CLK stored from wreg
 13849  1981  00F0               	movwf	i1READ_PS_2_PIN@DATA_CLK
 13850                           
 13851                           ;PS_2.c: 224: if(DATA_CLK == 0b00100000)
 13852  1982  3020               	movlw	32
 13853  1983  0670               	xorwf	i1READ_PS_2_PIN@DATA_CLK,w
 13854  1984  1D03               	btfss	3,2
 13855  1985  298D               	goto	i1l653
 13856                           
 13857                           ;PS_2.c: 225: {
 13858                           ;PS_2.c: 227: if((PORTA & 0b00100000) == 0b00100000)
 13859  1986  0020               	movlb	0	; select bank0
 13860  1987  1E8C               	btfss	12,5	;volatile
 13861  1988  298B               	goto	i1l4666
 13862                           
 13863                           ;PS_2.c: 228: {
 13864                           ;PS_2.c: 229: return (1);
 13865  1989  3001               	movlw	1
 13866                           
 13867                           ;PS_2.c: 230: }
 13868  198A  0008               	return
 13869  198B                     i1l4666:	
 13870                           
 13871                           ;PS_2.c: 231: else
 13872                           ;PS_2.c: 232: {
 13873                           ;PS_2.c: 233: return 0;
 13874  198B  3000               	movlw	0
 13875                           
 13876                           ;PS_2.c: 234: }
 13877                           ;PS_2.c: 235: }
 13878  198C  0008               	return
 13879  198D                     i1l653:	
 13880                           
 13881                           ;PS_2.c: 236: else
 13882                           ;PS_2.c: 237: {
 13883                           ;PS_2.c: 239: if((PORTA & 0b00010000) == 0b00010000)
 13884  198D  0020               	movlb	0	; select bank0
 13885  198E  1E0C               	btfss	12,4	;volatile
 13886  198F  2992               	goto	i1l4676
 13887                           
 13888                           ;PS_2.c: 240: {
 13889                           ;PS_2.c: 241: return (1);
 13890  1990  3001               	movlw	1
 13891                           
 13892                           ;PS_2.c: 242: }
 13893  1991  0008               	return
 13894  1992                     i1l4676:	
 13895                           
 13896                           ;PS_2.c: 243: else
 13897                           ;PS_2.c: 244: {
 13898                           ;PS_2.c: 245: return 0;
 13899  1992  3000               	movlw	0
 13900  1993  0008               	return
 13901  1994                     __end_ofi1_READ_PS_2_PIN:	
 13902                           
 13903                           	psect	text46
 13904  18A6                     __ptext46:	
 13905 ;; *************** function i1_Data_TRIS *****************
 13906 ;; Defined at:
 13907 ;;		line 137 in file "PS_2.c"
 13908 ;; Parameters:    Size  Location     Type
 13909 ;;  direction       1    wreg     unsigned char 
 13910 ;; Auto vars:     Size  Location     Type
 13911 ;;  direction       1    0[COMMON] unsigned char 
 13912 ;; Return value:  Size  Location     Type
 13913 ;;		None               void
 13914 ;; Registers used:
 13915 ;;		wreg, status,2, status,0
 13916 ;; Tracked objects:
 13917 ;;		On entry : 0/0
 13918 ;;		On exit  : 0/0
 13919 ;;		Unchanged: 0/0
 13920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13922 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13924 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13925 ;;Total ram usage:        1 bytes
 13926 ;; Hardware stack levels used:    1
 13927 ;; This function calls:
 13928 ;;		Nothing
 13929 ;; This function is called by:
 13930 ;;		i1_Send_PS2
 13931 ;; This function uses a non-reentrant model
 13932 ;;
 13933                           
 13934                           
 13935                           ;psect for function i1_Data_TRIS
 13936  18A6                     i1_Data_TRIS:	
 13937                           
 13938                           ;incstack = 0
 13939                           ; Regs used in i1_Data_TRIS: [wreg+status,2+status,0]
 13940                           ;i1Data_TRIS@direction stored from wreg
 13941  18A6  00F0               	movwf	i1Data_TRIS@direction
 13942                           
 13943                           ;PS_2.c: 139: if(direction == 0)
 13944  18A7  0870               	movf	i1Data_TRIS@direction,w
 13945  18A8  1D03               	btfss	3,2
 13946  18A9  28AD               	goto	i1l633
 13947                           
 13948                           ;PS_2.c: 140: {
 13949                           ;PS_2.c: 141: TRISAbits.TRISA4 = 0;
 13950  18AA  0021               	movlb	1	; select bank1
 13951  18AB  120C               	bcf	12,4	;volatile
 13952                           
 13953                           ;PS_2.c: 142: }
 13954  18AC  0008               	return
 13955  18AD                     i1l633:	
 13956                           
 13957                           ;PS_2.c: 143: else
 13958                           ;PS_2.c: 144: {
 13959                           ;PS_2.c: 145: TRISAbits.TRISA4 = 1;
 13960  18AD  0021               	movlb	1	; select bank1
 13961  18AE  160C               	bsf	12,4	;volatile
 13962  18AF  0008               	return
 13963  18B0                     __end_ofi1_Data_TRIS:	
 13964                           
 13965                           	psect	text47
 13966  189C                     __ptext47:	
 13967 ;; *************** function i1_Clock_TRIS *****************
 13968 ;; Defined at:
 13969 ;;		line 120 in file "PS_2.c"
 13970 ;; Parameters:    Size  Location     Type
 13971 ;;  direction       1    wreg     unsigned char 
 13972 ;; Auto vars:     Size  Location     Type
 13973 ;;  direction       1    0[COMMON] unsigned char 
 13974 ;; Return value:  Size  Location     Type
 13975 ;;		None               void
 13976 ;; Registers used:
 13977 ;;		wreg, status,2, status,0
 13978 ;; Tracked objects:
 13979 ;;		On entry : 0/0
 13980 ;;		On exit  : 0/0
 13981 ;;		Unchanged: 0/0
 13982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13984 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13986 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13987 ;;Total ram usage:        1 bytes
 13988 ;; Hardware stack levels used:    1
 13989 ;; This function calls:
 13990 ;;		Nothing
 13991 ;; This function is called by:
 13992 ;;		i1_Send_PS2
 13993 ;; This function uses a non-reentrant model
 13994 ;;
 13995                           
 13996                           
 13997                           ;psect for function i1_Clock_TRIS
 13998  189C                     i1_Clock_TRIS:	
 13999                           
 14000                           ;incstack = 0
 14001                           ; Regs used in i1_Clock_TRIS: [wreg+status,2+status,0]
 14002                           ;i1Clock_TRIS@direction stored from wreg
 14003  189C  00F0               	movwf	i1Clock_TRIS@direction
 14004                           
 14005                           ;PS_2.c: 122: if(direction == 0)
 14006  189D  0870               	movf	i1Clock_TRIS@direction,w
 14007  189E  1D03               	btfss	3,2
 14008  189F  28A3               	goto	i1l628
 14009                           
 14010                           ;PS_2.c: 123: {
 14011                           ;PS_2.c: 124: TRISAbits.TRISA5 = 0;
 14012  18A0  0021               	movlb	1	; select bank1
 14013  18A1  128C               	bcf	12,5	;volatile
 14014                           
 14015                           ;PS_2.c: 125: }
 14016  18A2  0008               	return
 14017  18A3                     i1l628:	
 14018                           
 14019                           ;PS_2.c: 126: else
 14020                           ;PS_2.c: 127: {
 14021                           ;PS_2.c: 128: TRISAbits.TRISA5 = 1;
 14022  18A3  0021               	movlb	1	; select bank1
 14023  18A4  168C               	bsf	12,5	;volatile
 14024  18A5  0008               	return
 14025  18A6                     __end_ofi1_Clock_TRIS:	
 14026                           
 14027                           	psect	text48
 14028  06E6                     __ptext48:	
 14029 ;; *************** function _cleanBuffer *****************
 14030 ;; Defined at:
 14031 ;;		line 163 in file "MISC.c"
 14032 ;; Parameters:    Size  Location     Type
 14033 ;;  data            1    wreg     PTR unsigned char 
 14034 ;;		 -> PS_2_ScanCodes(12), 
 14035 ;;  count           2    0[COMMON] int 
 14036 ;; Auto vars:     Size  Location     Type
 14037 ;;  data            1    3[COMMON] PTR unsigned char 
 14038 ;;		 -> PS_2_ScanCodes(12), 
 14039 ;;  i               1    4[COMMON] unsigned char 
 14040 ;; Return value:  Size  Location     Type
 14041 ;;		None               void
 14042 ;; Registers used:
 14043 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14044 ;; Tracked objects:
 14045 ;;		On entry : 0/0
 14046 ;;		On exit  : 0/0
 14047 ;;		Unchanged: 0/0
 14048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14049 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14050 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14051 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14052 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14053 ;;Total ram usage:        5 bytes
 14054 ;; Hardware stack levels used:    1
 14055 ;; This function calls:
 14056 ;;		Nothing
 14057 ;; This function is called by:
 14058 ;;		_Process_PS2_ScanCode
 14059 ;; This function uses a non-reentrant model
 14060 ;;
 14061                           
 14062                           
 14063                           ;psect for function _cleanBuffer
 14064  06E6                     _cleanBuffer:	
 14065                           
 14066                           ;incstack = 0
 14067                           ; Regs used in _cleanBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
 14068                           ;cleanBuffer@data stored from wreg
 14069  06E6  00F3               	movwf	cleanBuffer@data
 14070                           
 14071                           ;MISC.c: 165: unsigned char i=0;
 14072  06E7  01F4               	clrf	cleanBuffer@i
 14073                           
 14074                           ;MISC.c: 166: for(i=0; i<count;i++)
 14075  06E8  01F4               	clrf	cleanBuffer@i
 14076  06E9                     i1l4836:	
 14077  06E9  0871               	movf	cleanBuffer@count+1,w
 14078  06EA  3A80               	xorlw	128
 14079  06EB  3C80               	sublw	128
 14080  06EC  1D03               	skipz
 14081  06ED  2EF0               	goto	u553_25
 14082  06EE  0870               	movf	cleanBuffer@count,w
 14083  06EF  0274               	subwf	cleanBuffer@i,w
 14084  06F0                     u553_25:	
 14085  06F0  1803               	btfsc	3,0
 14086  06F1  0008               	return
 14087                           
 14088                           ;MISC.c: 167: {
 14089                           ;MISC.c: 168: data[i]= 0;
 14090  06F2  0874               	movf	cleanBuffer@i,w
 14091  06F3  0773               	addwf	cleanBuffer@data,w
 14092  06F4  00F2               	movwf	??_cleanBuffer
 14093  06F5  0872               	movf	??_cleanBuffer,w
 14094  06F6  0086               	movwf	6
 14095  06F7  0187               	clrf	7
 14096  06F8  0181               	clrf	1
 14097  06F9  3001               	movlw	1
 14098  06FA  00F2               	movwf	??_cleanBuffer
 14099  06FB  0872               	movf	??_cleanBuffer,w
 14100  06FC  07F4               	addwf	cleanBuffer@i,f
 14101  06FD  2EE9               	goto	i1l4836
 14102  06FE                     __end_of_cleanBuffer:	
 14103                           
 14104                           	psect	text49
 14105  1AC6                     __ptext49:	
 14106 ;; *************** function ___lmul *****************
 14107 ;; Defined at:
 14108 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul32.c"
 14109 ;; Parameters:    Size  Location     Type
 14110 ;;  multiplier      4    0[COMMON] unsigned long 
 14111 ;;  multiplicand    4    4[COMMON] unsigned long 
 14112 ;; Auto vars:     Size  Location     Type
 14113 ;;  product         4    8[COMMON] unsigned long 
 14114 ;; Return value:  Size  Location     Type
 14115 ;;                  4    0[COMMON] unsigned long 
 14116 ;; Registers used:
 14117 ;;		wreg, status,2, status,0
 14118 ;; Tracked objects:
 14119 ;;		On entry : 0/0
 14120 ;;		On exit  : 0/0
 14121 ;;		Unchanged: 0/0
 14122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14123 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14124 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14126 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14127 ;;Total ram usage:       12 bytes
 14128 ;; Hardware stack levels used:    1
 14129 ;; This function calls:
 14130 ;;		Nothing
 14131 ;; This function is called by:
 14132 ;;		_Process_PS2_ScanCode
 14133 ;; This function uses a non-reentrant model
 14134 ;;
 14135                           
 14136                           
 14137                           ;psect for function ___lmul
 14138  1AC6                     ___lmul:	
 14139                           
 14140                           ;incstack = 0
 14141                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 14142  1AC6  3000               	movlw	0
 14143  1AC7  00FB               	movwf	___lmul@product+3
 14144  1AC8  3000               	movlw	0
 14145  1AC9  00FA               	movwf	___lmul@product+2
 14146  1ACA  3000               	movlw	0
 14147  1ACB  00F9               	movwf	___lmul@product+1
 14148  1ACC  3000               	movlw	0
 14149  1ACD  00F8               	movwf	___lmul@product
 14150  1ACE                     i1l5044:	
 14151  1ACE  1C70               	btfss	___lmul@multiplier,0
 14152  1ACF  2AD8               	goto	i1l5048
 14153  1AD0  0874               	movf	___lmul@multiplicand,w
 14154  1AD1  07F8               	addwf	___lmul@product,f
 14155  1AD2  0875               	movf	___lmul@multiplicand+1,w
 14156  1AD3  3DF9               	addwfc	___lmul@product+1,f
 14157  1AD4  0876               	movf	___lmul@multiplicand+2,w
 14158  1AD5  3DFA               	addwfc	___lmul@product+2,f
 14159  1AD6  0877               	movf	___lmul@multiplicand+3,w
 14160  1AD7  3DFB               	addwfc	___lmul@product+3,f
 14161  1AD8                     i1l5048:	
 14162  1AD8  3001               	movlw	1
 14163  1AD9                     u580_25:	
 14164  1AD9  35F4               	lslf	___lmul@multiplicand,f
 14165  1ADA  0DF5               	rlf	___lmul@multiplicand+1,f
 14166  1ADB  0DF6               	rlf	___lmul@multiplicand+2,f
 14167  1ADC  0DF7               	rlf	___lmul@multiplicand+3,f
 14168  1ADD  0B89               	decfsz	9,f
 14169  1ADE  2AD9               	goto	u580_25
 14170  1ADF  3001               	movlw	1
 14171  1AE0                     u581_25:	
 14172  1AE0  36F3               	lsrf	___lmul@multiplier+3,f
 14173  1AE1  0CF2               	rrf	___lmul@multiplier+2,f
 14174  1AE2  0CF1               	rrf	___lmul@multiplier+1,f
 14175  1AE3  0CF0               	rrf	___lmul@multiplier,f
 14176  1AE4  0B89               	decfsz	9,f
 14177  1AE5  2AE0               	goto	u581_25
 14178  1AE6  0873               	movf	___lmul@multiplier+3,w
 14179  1AE7  0472               	iorwf	___lmul@multiplier+2,w
 14180  1AE8  0471               	iorwf	___lmul@multiplier+1,w
 14181  1AE9  0470               	iorwf	___lmul@multiplier,w
 14182  1AEA  1D03               	skipz
 14183  1AEB  2ACE               	goto	i1l5044
 14184  1AEC  087B               	movf	___lmul@product+3,w
 14185  1AED  00F3               	movwf	?___lmul+3
 14186  1AEE  087A               	movf	___lmul@product+2,w
 14187  1AEF  00F2               	movwf	?___lmul+2
 14188  1AF0  0879               	movf	___lmul@product+1,w
 14189  1AF1  00F1               	movwf	?___lmul+1
 14190  1AF2  0878               	movf	___lmul@product,w
 14191  1AF3  00F0               	movwf	?___lmul
 14192  1AF4  0008               	return
 14193  1AF5                     __end_of___lmul:	
 14194                           
 14195                           	psect	text50
 14196  19F4                     __ptext50:	
 14197 ;; *************** function _UART_send_break_timed *****************
 14198 ;; Defined at:
 14199 ;;		line 338 in file "UART.c"
 14200 ;; Parameters:    Size  Location     Type
 14201 ;;  US              2   10[COMMON] unsigned int 
 14202 ;; Auto vars:     Size  Location     Type
 14203 ;;		None
 14204 ;; Return value:  Size  Location     Type
 14205 ;;		None               void
 14206 ;; Registers used:
 14207 ;;		wreg, status,2, status,0, pclath, cstack
 14208 ;; Tracked objects:
 14209 ;;		On entry : 0/0
 14210 ;;		On exit  : 0/0
 14211 ;;		Unchanged: 0/0
 14212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14213 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14215 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14216 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14217 ;;Total ram usage:        3 bytes
 14218 ;; Hardware stack levels used:    1
 14219 ;; Hardware stack levels required when called:    1
 14220 ;; This function calls:
 14221 ;;		i1_delayUS
 14222 ;; This function is called by:
 14223 ;;		_isr
 14224 ;;		_Process_PS2_ScanCode
 14225 ;; This function uses a non-reentrant model
 14226 ;;
 14227                           
 14228                           
 14229                           ;psect for function _UART_send_break_timed
 14230  19F4                     _UART_send_break_timed:	
 14231                           
 14232                           ;UART.c: 341: LATC |= 0b00000100;
 14233                           
 14234                           ;incstack = 0
 14235                           ; Regs used in _UART_send_break_timed: [wreg+status,2+status,0+pclath+cstack]
 14236  19F4  0022               	movlb	2	; select bank2
 14237  19F5  150E               	bsf	14,2	;volatile
 14238                           
 14239                           ;UART.c: 342: PPSLOCK =0;
 14240  19F6  003C               	movlb	28	; select bank28
 14241  19F7  018F               	clrf	15	;volatile
 14242                           
 14243                           ;UART.c: 343: RC2PPS = 0b00000000;
 14244  19F8  003D               	movlb	29	; select bank29
 14245  19F9  01A2               	clrf	34	;volatile
 14246                           
 14247                           ;UART.c: 344: PPSLOCK =1;
 14248  19FA  3001               	movlw	1
 14249  19FB  003C               	movlb	28	; select bank28
 14250  19FC  008F               	movwf	15	;volatile
 14251                           
 14252                           ;UART.c: 346: LATC &= ~0b00000100;
 14253  19FD  30FB               	movlw	251
 14254  19FE  00FC               	movwf	??_UART_send_break_timed
 14255  19FF  087C               	movf	??_UART_send_break_timed,w
 14256  1A00  0022               	movlb	2	; select bank2
 14257  1A01  058E               	andwf	14,f	;volatile
 14258                           
 14259                           ;UART.c: 347: delayUS(US);
 14260  1A02  087A               	movf	UART_send_break_timed@US,w
 14261  1A03  00F0               	movwf	i1delayUS@US
 14262  1A04  087B               	movf	UART_send_break_timed@US+1,w
 14263  1A05  00F1               	movwf	i1delayUS@US+1
 14264  1A06  01F2               	clrf	i1delayUS@US+2
 14265  1A07  01F3               	clrf	i1delayUS@US+3
 14266  1A08  319B  23B5         	fcall	i1_delayUS
 14267                           
 14268                           ;UART.c: 348: LATC |= 0b00000100;
 14269  1A0A  0022               	movlb	2	; select bank2
 14270  1A0B  150E               	bsf	14,2	;volatile
 14271                           
 14272                           ;UART.c: 350: PPSLOCK =0;
 14273  1A0C  003C               	movlb	28	; select bank28
 14274  1A0D  018F               	clrf	15	;volatile
 14275                           
 14276                           ;UART.c: 351: RC2PPS = 0b00010100;
 14277  1A0E  3014               	movlw	20
 14278  1A0F  003D               	movlb	29	; select bank29
 14279  1A10  00A2               	movwf	34	;volatile
 14280                           
 14281                           ;UART.c: 352: CKPPS = 0b00010010;
 14282  1A11  3012               	movlw	18
 14283  1A12  003C               	movlb	28	; select bank28
 14284  1A13  00A5               	movwf	37	;volatile
 14285                           
 14286                           ;UART.c: 354: RXPPS = 0b00010101;
 14287  1A14  3015               	movlw	21
 14288  1A15  00A4               	movwf	36	;volatile
 14289                           
 14290                           ;UART.c: 356: PPSLOCK =1;
 14291  1A16  3001               	movlw	1
 14292  1A17  008F               	movwf	15	;volatile
 14293  1A18  0008               	return
 14294  1A19                     __end_of_UART_send_break_timed:	
 14295                           
 14296                           	psect	text51
 14297  185D                     __ptext51:	
 14298 ;; *************** function _UART_send_break *****************
 14299 ;; Defined at:
 14300 ;;		line 326 in file "UART.c"
 14301 ;; Parameters:    Size  Location     Type
 14302 ;;		None
 14303 ;; Auto vars:     Size  Location     Type
 14304 ;;		None
 14305 ;; Return value:  Size  Location     Type
 14306 ;;		None               void
 14307 ;; Registers used:
 14308 ;;		wreg
 14309 ;; Tracked objects:
 14310 ;;		On entry : 0/0
 14311 ;;		On exit  : 0/0
 14312 ;;		Unchanged: 0/0
 14313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14317 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14318 ;;Total ram usage:        0 bytes
 14319 ;; Hardware stack levels used:    1
 14320 ;; This function calls:
 14321 ;;		Nothing
 14322 ;; This function is called by:
 14323 ;;		_Process_PS2_ScanCode
 14324 ;; This function uses a non-reentrant model
 14325 ;;
 14326                           
 14327                           
 14328                           ;psect for function _UART_send_break
 14329  185D                     _UART_send_break:	
 14330                           
 14331                           ;UART.c: 328: TX1STA |= 0b00001000;
 14332                           
 14333                           ;incstack = 0
 14334                           ; Regs used in _UART_send_break: [wreg]
 14335  185D  0023               	movlb	3	; select bank3
 14336  185E  159E               	bsf	30,3	;volatile
 14337                           
 14338                           ;UART.c: 329: TXREG = 'd';
 14339  185F  3064               	movlw	100
 14340  1860  009A               	movwf	26	;volatile
 14341  1861  0008               	return
 14342  1862                     __end_of_UART_send_break:	
 14343                           
 14344                           	psect	text52
 14345  0B65                     __ptext52:	
 14346 ;; *************** function _SetBaud *****************
 14347 ;; Defined at:
 14348 ;;		line 384 in file "UART.c"
 14349 ;; Parameters:    Size  Location     Type
 14350 ;;  Baud            4   15[BANK1 ] unsigned long 
 14351 ;;  Parity          1   19[BANK1 ] unsigned char 
 14352 ;; Auto vars:     Size  Location     Type
 14353 ;;  buf            50    0[BANK2 ] unsigned char [50]
 14354 ;;  temp            4   58[BANK2 ] unsigned long 
 14355 ;;  Paritytemp      4   54[BANK2 ] unsigned long 
 14356 ;;  Baudtemp        4   50[BANK2 ] unsigned long 
 14357 ;;  i               1   62[BANK2 ] unsigned char 
 14358 ;; Return value:  Size  Location     Type
 14359 ;;		None               void
 14360 ;; Registers used:
 14361 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14362 ;; Tracked objects:
 14363 ;;		On entry : 0/0
 14364 ;;		On exit  : 0/0
 14365 ;;		Unchanged: 0/0
 14366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14367 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 14368 ;;      Locals:         0       0       0      63       0       0       0       0       0       0       0       0       
      +0       0
 14369 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
 14370 ;;      Totals:         0       0      13      63       0       0       0       0       0       0       0       0       
      +0       0
 14371 ;;Total ram usage:       76 bytes
 14372 ;; Hardware stack levels used:    1
 14373 ;; Hardware stack levels required when called:    4
 14374 ;; This function calls:
 14375 ;;		_WriteBaud
 14376 ;;		_sprintf
 14377 ;;		i1_InitUART
 14378 ;;		i1_ReadBaud
 14379 ;;		i1_UARTstringWAIT
 14380 ;;		i1_delayUS
 14381 ;; This function is called by:
 14382 ;;		_Process_PS2_ScanCode
 14383 ;; This function uses a non-reentrant model
 14384 ;;
 14385                           
 14386                           
 14387                           ;psect for function _SetBaud
 14388  0B65                     _SetBaud:	
 14389                           
 14390                           ;UART.c: 386: unsigned char buf[50];
 14391                           ;UART.c: 387: unsigned long Baudtemp=0;
 14392                           
 14393                           ;incstack = 0
 14394                           ; Regs used in _SetBaud: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14395  0B65  3000               	movlw	0
 14396  0B66  0022               	movlb	2	; select bank2
 14397  0B67  00D5               	movwf	(SetBaud@Baudtemp+3)^(0+256)
 14398  0B68  3000               	movlw	0
 14399  0B69  00D4               	movwf	(SetBaud@Baudtemp+2)^(0+256)
 14400  0B6A  3000               	movlw	0
 14401  0B6B  00D3               	movwf	(SetBaud@Baudtemp+1)^(0+256)
 14402  0B6C  3000               	movlw	0
 14403  0B6D  00D2               	movwf	SetBaud@Baudtemp^(0+256)
 14404                           
 14405                           ;UART.c: 388: unsigned long Paritytemp=0;
 14406  0B6E  3000               	movlw	0
 14407  0B6F  00D9               	movwf	(SetBaud@Paritytemp+3)^(0+256)
 14408  0B70  3000               	movlw	0
 14409  0B71  00D8               	movwf	(SetBaud@Paritytemp+2)^(0+256)
 14410  0B72  3000               	movlw	0
 14411  0B73  00D7               	movwf	(SetBaud@Paritytemp+1)^(0+256)
 14412  0B74  3000               	movlw	0
 14413  0B75  00D6               	movwf	SetBaud@Paritytemp^(0+256)
 14414                           
 14415                           ;UART.c: 389: unsigned long temp;
 14416                           ;UART.c: 390: unsigned char i =0;
 14417  0B76  01DE               	clrf	SetBaud@i^(0+256)
 14418                           
 14419                           ;UART.c: 392: WriteBaud((0x1800 >> 5), Baud, Parity);
 14420  0B77  30C0               	movlw	192
 14421  0B78  0021               	movlb	1	; select bank1
 14422  0B79  00A0               	movwf	WriteBaud@row^(0+128)
 14423  0B7A  3000               	movlw	0
 14424  0B7B  00A1               	movwf	(WriteBaud@row^(0+128)+1)
 14425  0B7C  0832               	movf	(SetBaud@Baud+3)^(0+128),w
 14426  0B7D  00A5               	movwf	(WriteBaud@Baud+3)^(0+128)
 14427  0B7E  0831               	movf	(SetBaud@Baud+2)^(0+128),w
 14428  0B7F  00A4               	movwf	(WriteBaud@Baud+2)^(0+128)
 14429  0B80  0830               	movf	(SetBaud@Baud+1)^(0+128),w
 14430  0B81  00A3               	movwf	(WriteBaud@Baud+1)^(0+128)
 14431  0B82  082F               	movf	SetBaud@Baud^(0+128),w
 14432  0B83  00A2               	movwf	WriteBaud@Baud^(0+128)
 14433  0B84  0833               	movf	SetBaud@Parity^(0+128),w
 14434  0B85  00B4               	movwf	??_SetBaud^(0+128)
 14435  0B86  0834               	movf	??_SetBaud^(0+128),w
 14436  0B87  00A6               	movwf	WriteBaud@Parity^(0+128)
 14437  0B88  3191  21BA  318B   	fcall	_WriteBaud
 14438                           
 14439                           ;UART.c: 393: temp = ReadBaud((0x1800 >> 5), 0);
 14440  0B8B  30C0               	movlw	192
 14441  0B8C  0020               	movlb	0	; select bank0
 14442  0B8D  00A4               	movwf	i1ReadBaud@row
 14443  0B8E  3000               	movlw	0
 14444  0B8F  00A5               	movwf	i1ReadBaud@row+1
 14445  0B90  01A6               	clrf	i1ReadBaud@column
 14446  0B91  319F  279E  318B   	fcall	i1_ReadBaud
 14447  0B94  0020               	movlb	0	; select bank0
 14448  0B95  0827               	movf	?i1_ReadBaud+3,w
 14449  0B96  0022               	movlb	2	; select bank2
 14450  0B97  00DD               	movwf	(SetBaud@temp+3)^(0+256)
 14451  0B98  0020               	movlb	0	; select bank0
 14452  0B99  0826               	movf	?i1_ReadBaud+2,w
 14453  0B9A  0022               	movlb	2	; select bank2
 14454  0B9B  00DC               	movwf	(SetBaud@temp+2)^(0+256)
 14455  0B9C  0020               	movlb	0	; select bank0
 14456  0B9D  0825               	movf	?i1_ReadBaud+1,w
 14457  0B9E  0022               	movlb	2	; select bank2
 14458  0B9F  00DB               	movwf	(SetBaud@temp+1)^(0+256)
 14459  0BA0  0020               	movlb	0	; select bank0
 14460  0BA1  0824               	movf	?i1_ReadBaud,w
 14461  0BA2  0022               	movlb	2	; select bank2
 14462  0BA3  00DA               	movwf	SetBaud@temp^(0+256)
 14463                           
 14464                           ;UART.c: 394: Baudtemp = temp & 0x000FFFFF;
 14465  0BA4  30FF               	movlw	255
 14466  0BA5  055A               	andwf	SetBaud@temp^(0+256),w
 14467  0BA6  00D2               	movwf	SetBaud@Baudtemp^(0+256)
 14468  0BA7  30FF               	movlw	255
 14469  0BA8  055B               	andwf	(SetBaud@temp+1)^(0+256),w
 14470  0BA9  00D3               	movwf	(SetBaud@Baudtemp+1)^(0+256)
 14471  0BAA  300F               	movlw	15
 14472  0BAB  055C               	andwf	(SetBaud@temp+2)^(0+256),w
 14473  0BAC  00D4               	movwf	(SetBaud@Baudtemp+2)^(0+256)
 14474  0BAD  3000               	movlw	0
 14475  0BAE  055D               	andwf	(SetBaud@temp+3)^(0+256),w
 14476  0BAF  00D5               	movwf	(SetBaud@Baudtemp+3)^(0+256)
 14477                           
 14478                           ;UART.c: 395: Paritytemp = (unsigned char)((temp & 0x00F00000) >> 20);
 14479  0BB0  085A               	movf	SetBaud@temp^(0+256),w
 14480  0BB1  0021               	movlb	1	; select bank1
 14481  0BB2  00B4               	movwf	??_SetBaud^(0+128)
 14482  0BB3  0022               	movlb	2	; select bank2
 14483  0BB4  085B               	movf	(SetBaud@temp+1)^(0+256),w
 14484  0BB5  0021               	movlb	1	; select bank1
 14485  0BB6  00B5               	movwf	(??_SetBaud^(0+128)+1)
 14486  0BB7  0022               	movlb	2	; select bank2
 14487  0BB8  085C               	movf	(SetBaud@temp+2)^(0+256),w
 14488  0BB9  0021               	movlb	1	; select bank1
 14489  0BBA  00B6               	movwf	(??_SetBaud^(0+128)+2)
 14490  0BBB  0022               	movlb	2	; select bank2
 14491  0BBC  085D               	movf	(SetBaud@temp+3)^(0+256),w
 14492  0BBD  0021               	movlb	1	; select bank1
 14493  0BBE  00B7               	movwf	(??_SetBaud^(0+128)+3)
 14494  0BBF  3014               	movlw	20
 14495  0BC0                     u557_25:	
 14496  0BC0  36B7               	lsrf	(??_SetBaud^(0+128)+3),f
 14497  0BC1  0CB6               	rrf	(??_SetBaud^(0+128)+2),f
 14498  0BC2  0CB5               	rrf	(??_SetBaud^(0+128)+1),f
 14499  0BC3  0CB4               	rrf	??_SetBaud^(0+128),f
 14500  0BC4  0B89               	decfsz	9,f
 14501  0BC5  2BC0               	goto	u557_25
 14502  0BC6  0834               	movf	??_SetBaud^(0+128),w
 14503  0BC7  390F               	andlw	15
 14504  0BC8  00B8               	movwf	(??_SetBaud+4)^(0+128)
 14505  0BC9  01B9               	clrf	((??_SetBaud+4)^(0+128)+1)
 14506  0BCA  01BA               	clrf	((??_SetBaud+4)^(0+128)+2)
 14507  0BCB  01BB               	clrf	((??_SetBaud+4)^(0+128)+3)
 14508  0BCC  083B               	movf	(??_SetBaud+7)^(0+128),w
 14509  0BCD  0022               	movlb	2	; select bank2
 14510  0BCE  00D9               	movwf	(SetBaud@Paritytemp+3)^(0+256)
 14511  0BCF  0021               	movlb	1	; select bank1
 14512  0BD0  083A               	movf	(??_SetBaud+6)^(0+128),w
 14513  0BD1  0022               	movlb	2	; select bank2
 14514  0BD2  00D8               	movwf	(SetBaud@Paritytemp+2)^(0+256)
 14515  0BD3  0021               	movlb	1	; select bank1
 14516  0BD4  0839               	movf	(??_SetBaud+5)^(0+128),w
 14517  0BD5  0022               	movlb	2	; select bank2
 14518  0BD6  00D7               	movwf	(SetBaud@Paritytemp+1)^(0+256)
 14519  0BD7  0021               	movlb	1	; select bank1
 14520  0BD8  0838               	movf	(??_SetBaud+4)^(0+128),w
 14521  0BD9  0022               	movlb	2	; select bank2
 14522  0BDA  00D6               	movwf	SetBaud@Paritytemp^(0+256)
 14523                           
 14524                           ;UART.c: 397: InitUART(Baud, Parity);
 14525  0BDB  0021               	movlb	1	; select bank1
 14526  0BDC  0832               	movf	(SetBaud@Baud+3)^(0+128),w
 14527  0BDD  0020               	movlb	0	; select bank0
 14528  0BDE  00A3               	movwf	i1InitUART@Baud+3
 14529  0BDF  0021               	movlb	1	; select bank1
 14530  0BE0  0831               	movf	(SetBaud@Baud+2)^(0+128),w
 14531  0BE1  0020               	movlb	0	; select bank0
 14532  0BE2  00A2               	movwf	i1InitUART@Baud+2
 14533  0BE3  0021               	movlb	1	; select bank1
 14534  0BE4  0830               	movf	(SetBaud@Baud+1)^(0+128),w
 14535  0BE5  0020               	movlb	0	; select bank0
 14536  0BE6  00A1               	movwf	i1InitUART@Baud+1
 14537  0BE7  0021               	movlb	1	; select bank1
 14538  0BE8  082F               	movf	SetBaud@Baud^(0+128),w
 14539  0BE9  0020               	movlb	0	; select bank0
 14540  0BEA  00A0               	movwf	i1InitUART@Baud
 14541  0BEB  0021               	movlb	1	; select bank1
 14542  0BEC  0833               	movf	SetBaud@Parity^(0+128),w
 14543  0BED  00B4               	movwf	??_SetBaud^(0+128)
 14544  0BEE  0834               	movf	??_SetBaud^(0+128),w
 14545  0BEF  0020               	movlb	0	; select bank0
 14546  0BF0  00A4               	movwf	i1InitUART@parity
 14547  0BF1  3195  252A  318B   	fcall	i1_InitUART
 14548                           
 14549                           ;UART.c: 398: UARTstringWAIT("\r\n");
 14550  0BF4  30FD               	movlw	low ((STR_14+16)| (0+32768))
 14551  0BF5  0020               	movlb	0	; select bank0
 14552  0BF6  00A1               	movwf	i1UARTstringWAIT@data
 14553  0BF7  3089               	movlw	high ((STR_14+16)| (0+32768))
 14554  0BF8  00A2               	movwf	i1UARTstringWAIT@data+1
 14555  0BF9  319B  2324  318B   	fcall	i1_UARTstringWAIT
 14556                           
 14557                           ;UART.c: 399: delayUS(15000);
 14558  0BFC  3000               	movlw	0
 14559  0BFD  00F3               	movwf	i1delayUS@US+3
 14560  0BFE  3000               	movlw	0
 14561  0BFF  00F2               	movwf	i1delayUS@US+2
 14562  0C00  303A               	movlw	58
 14563  0C01  00F1               	movwf	i1delayUS@US+1
 14564  0C02  3098               	movlw	152
 14565  0C03  00F0               	movwf	i1delayUS@US
 14566  0C04  319B  23B5  318B   	fcall	i1_delayUS
 14567                           
 14568                           ;UART.c: 400: if((Baud != Baudtemp) || (Parity != Paritytemp))
 14569  0C07  0022               	movlb	2	; select bank2
 14570  0C08  0855               	movf	(SetBaud@Baudtemp+3)^(0+256),w
 14571  0C09  0021               	movlb	1	; select bank1
 14572  0C0A  0632               	xorwf	(SetBaud@Baud+3)^(0+128),w
 14573  0C0B  1D03               	skipz
 14574  0C0C  2C1D               	goto	u558_25
 14575  0C0D  0022               	movlb	2	; select bank2
 14576  0C0E  0854               	movf	(SetBaud@Baudtemp+2)^(0+256),w
 14577  0C0F  0021               	movlb	1	; select bank1
 14578  0C10  0631               	xorwf	(SetBaud@Baud+2)^(0+128),w
 14579  0C11  1D03               	skipz
 14580  0C12  2C1D               	goto	u558_25
 14581  0C13  0022               	movlb	2	; select bank2
 14582  0C14  0853               	movf	(SetBaud@Baudtemp+1)^(0+256),w
 14583  0C15  0021               	movlb	1	; select bank1
 14584  0C16  0630               	xorwf	(SetBaud@Baud+1)^(0+128),w
 14585  0C17  1D03               	skipz
 14586  0C18  2C1D               	goto	u558_25
 14587  0C19  0022               	movlb	2	; select bank2
 14588  0C1A  0852               	movf	SetBaud@Baudtemp^(0+256),w
 14589  0C1B  0021               	movlb	1	; select bank1
 14590  0C1C  062F               	xorwf	SetBaud@Baud^(0+128),w
 14591  0C1D                     u558_25:	
 14592  0C1D  1D03               	skipz
 14593  0C1E  2C3C               	goto	i1l4882
 14594  0C1F  0833               	movf	SetBaud@Parity^(0+128),w
 14595  0C20  00B4               	movwf	??_SetBaud^(0+128)
 14596  0C21  01B5               	clrf	(??_SetBaud^(0+128)+1)
 14597  0C22  01B6               	clrf	(??_SetBaud^(0+128)+2)
 14598  0C23  01B7               	clrf	(??_SetBaud^(0+128)+3)
 14599  0C24  0022               	movlb	2	; select bank2
 14600  0C25  0859               	movf	(SetBaud@Paritytemp+3)^(0+256),w
 14601  0C26  0021               	movlb	1	; select bank1
 14602  0C27  0637               	xorwf	(??_SetBaud+3)^(0+128),w
 14603  0C28  1D03               	skipz
 14604  0C29  2C3A               	goto	u559_25
 14605  0C2A  0022               	movlb	2	; select bank2
 14606  0C2B  0858               	movf	(SetBaud@Paritytemp+2)^(0+256),w
 14607  0C2C  0021               	movlb	1	; select bank1
 14608  0C2D  0636               	xorwf	(??_SetBaud+2)^(0+128),w
 14609  0C2E  1D03               	skipz
 14610  0C2F  2C3A               	goto	u559_25
 14611  0C30  0022               	movlb	2	; select bank2
 14612  0C31  0857               	movf	(SetBaud@Paritytemp+1)^(0+256),w
 14613  0C32  0021               	movlb	1	; select bank1
 14614  0C33  0635               	xorwf	(??_SetBaud+1)^(0+128),w
 14615  0C34  1D03               	skipz
 14616  0C35  2C3A               	goto	u559_25
 14617  0C36  0022               	movlb	2	; select bank2
 14618  0C37  0856               	movf	SetBaud@Paritytemp^(0+256),w
 14619  0C38  0021               	movlb	1	; select bank1
 14620  0C39  0634               	xorwf	??_SetBaud^(0+128),w
 14621  0C3A                     u559_25:	
 14622  0C3A  1903               	skipnz
 14623  0C3B  2C4F               	goto	i1l4886
 14624  0C3C                     i1l4882:	
 14625                           
 14626                           ;UART.c: 401: {
 14627                           ;UART.c: 402: UARTstringWAIT("Flash Program Fail\r\n");
 14628  0C3C  30C4               	movlw	low (STR_10| (0+32768))
 14629  0C3D  0020               	movlb	0	; select bank0
 14630  0C3E  00A1               	movwf	i1UARTstringWAIT@data
 14631  0C3F  3089               	movlw	high (STR_10| (0+32768))
 14632  0C40  00A2               	movwf	i1UARTstringWAIT@data+1
 14633  0C41  319B  2324  318B   	fcall	i1_UARTstringWAIT
 14634                           
 14635                           ;UART.c: 403: delayUS(15000);
 14636  0C44  3000               	movlw	0
 14637  0C45  00F3               	movwf	i1delayUS@US+3
 14638  0C46  3000               	movlw	0
 14639  0C47  00F2               	movwf	i1delayUS@US+2
 14640  0C48  303A               	movlw	58
 14641  0C49  00F1               	movwf	i1delayUS@US+1
 14642  0C4A  3098               	movlw	152
 14643  0C4B  00F0               	movwf	i1delayUS@US
 14644  0C4C  319B  23B5  318B   	fcall	i1_delayUS
 14645  0C4F                     i1l4886:	
 14646                           
 14647                           ;UART.c: 404: }
 14648                           ;UART.c: 407: for(i =0;i<10;i++)
 14649  0C4F  0022               	movlb	2	; select bank2
 14650  0C50  01DE               	clrf	SetBaud@i^(0+256)
 14651  0C51  300A               	movlw	10
 14652  0C52  025E               	subwf	SetBaud@i^(0+256),w
 14653  0C53  1803               	btfsc	3,0
 14654  0C54  2C7C               	goto	i1l4900
 14655  0C55                     i1l482:	
 14656                           
 14657                           ;UART.c: 408: {
 14658                           ;UART.c: 409: LATC |= 0b00010000;
 14659  0C55  160E               	bsf	14,4	;volatile
 14660                           
 14661                           ;UART.c: 410: delayUS(10000);
 14662  0C56  3000               	movlw	0
 14663  0C57  00F3               	movwf	i1delayUS@US+3
 14664  0C58  3000               	movlw	0
 14665  0C59  00F2               	movwf	i1delayUS@US+2
 14666  0C5A  3027               	movlw	39
 14667  0C5B  00F1               	movwf	i1delayUS@US+1
 14668  0C5C  3010               	movlw	16
 14669  0C5D  00F0               	movwf	i1delayUS@US
 14670  0C5E  319B  23B5  318B   	fcall	i1_delayUS
 14671                           
 14672                           ;UART.c: 411: LATC &= ~0b00010000;
 14673  0C61  30EF               	movlw	239
 14674  0C62  0021               	movlb	1	; select bank1
 14675  0C63  00B4               	movwf	??_SetBaud^(0+128)
 14676  0C64  0834               	movf	??_SetBaud^(0+128),w
 14677  0C65  0022               	movlb	2	; select bank2
 14678  0C66  058E               	andwf	14,f	;volatile
 14679                           
 14680                           ;UART.c: 412: delayUS(10000);
 14681  0C67  3000               	movlw	0
 14682  0C68  00F3               	movwf	i1delayUS@US+3
 14683  0C69  3000               	movlw	0
 14684  0C6A  00F2               	movwf	i1delayUS@US+2
 14685  0C6B  3027               	movlw	39
 14686  0C6C  00F1               	movwf	i1delayUS@US+1
 14687  0C6D  3010               	movlw	16
 14688  0C6E  00F0               	movwf	i1delayUS@US
 14689  0C6F  319B  23B5  318B   	fcall	i1_delayUS
 14690  0C72  3001               	movlw	1
 14691  0C73  0021               	movlb	1	; select bank1
 14692  0C74  00B4               	movwf	??_SetBaud^(0+128)
 14693  0C75  0834               	movf	??_SetBaud^(0+128),w
 14694  0C76  0022               	movlb	2	; select bank2
 14695  0C77  07DE               	addwf	SetBaud@i^(0+256),f
 14696  0C78  300A               	movlw	10
 14697  0C79  025E               	subwf	SetBaud@i^(0+256),w
 14698  0C7A  1C03               	skipc
 14699  0C7B  2C55               	goto	i1l482
 14700  0C7C                     i1l4900:	
 14701                           
 14702                           ;UART.c: 413: }
 14703                           ;UART.c: 415: sprintf(buf,"Baud is %lu",Baud);
 14704  0C7C  3026               	movlw	low (STR_11| (0+32768))
 14705  0C7D  0020               	movlb	0	; select bank0
 14706  0C7E  00AA               	movwf	sprintf@f
 14707  0C7F  308A               	movlw	high (STR_11| (0+32768))
 14708  0C80  00AB               	movwf	sprintf@f+1
 14709  0C81  0021               	movlb	1	; select bank1
 14710  0C82  0832               	movf	(SetBaud@Baud+3)^(0+128),w
 14711  0C83  0020               	movlb	0	; select bank0
 14712  0C84  00AF               	movwf	?_sprintf+5
 14713  0C85  0021               	movlb	1	; select bank1
 14714  0C86  0831               	movf	(SetBaud@Baud+2)^(0+128),w
 14715  0C87  0020               	movlb	0	; select bank0
 14716  0C88  00AE               	movwf	?_sprintf+4
 14717  0C89  0021               	movlb	1	; select bank1
 14718  0C8A  0830               	movf	(SetBaud@Baud+1)^(0+128),w
 14719  0C8B  0020               	movlb	0	; select bank0
 14720  0C8C  00AD               	movwf	?_sprintf+3
 14721  0C8D  0021               	movlb	1	; select bank1
 14722  0C8E  082F               	movf	SetBaud@Baud^(0+128),w
 14723  0C8F  0020               	movlb	0	; select bank0
 14724  0C90  00AC               	movwf	?_sprintf+2
 14725  0C91  3020               	movlw	(low (SetBaud@buf| (0+256)))& (0+255)
 14726  0C92  3197  270A  318B   	fcall	_sprintf
 14727                           
 14728                           ;UART.c: 416: UARTstringWAIT(buf);
 14729  0C95  3020               	movlw	low SetBaud@buf
 14730  0C96  0020               	movlb	0	; select bank0
 14731  0C97  00A1               	movwf	i1UARTstringWAIT@data
 14732  0C98  3001               	movlw	high SetBaud@buf
 14733  0C99  00A2               	movwf	i1UARTstringWAIT@data+1
 14734  0C9A  319B  2324  318B   	fcall	i1_UARTstringWAIT
 14735                           
 14736                           ;UART.c: 417: if(Parity)
 14737  0C9D  0021               	movlb	1	; select bank1
 14738  0C9E  0833               	movf	SetBaud@Parity^(0+128),w
 14739  0C9F  1D03               	btfss	3,2
 14740  0CA0  2CB6               	goto	i1l4918
 14741  0CA1  2CC3               	goto	i1l4920
 14742  0CA2                     i1l4908:	
 14743                           ;UART.c: 420: {
 14744                           ;UART.c: 421: case 1:
 14745                           
 14746                           ;UART.c: 418: {
 14747                           ;UART.c: 419: switch (Parity)
 14748                           
 14749                           
 14750                           ;UART.c: 422: UARTstringWAIT(OddParityMSG);
 14751  0CA2  3011               	movlw	low (_OddParityMSG| (0+32768))
 14752  0CA3  0020               	movlb	0	; select bank0
 14753  0CA4  00A1               	movwf	i1UARTstringWAIT@data
 14754  0CA5  3089               	movlw	high (_OddParityMSG| (0+32768))
 14755  0CA6  2CC7               	goto	L13
 14756  0CA7                     i1l4910:	
 14757                           ;UART.c: 424: case 2:
 14758                           
 14759                           ;UART.c: 423: break;
 14760                           
 14761                           
 14762                           ;UART.c: 425: UARTstringWAIT(EvenParityMSG);
 14763  0CA7  30FB               	movlw	low (_EvenParityMSG| (0+32768))
 14764  0CA8  0020               	movlb	0	; select bank0
 14765  0CA9  00A1               	movwf	i1UARTstringWAIT@data
 14766  0CAA  3088               	movlw	high (_EvenParityMSG| (0+32768))
 14767  0CAB  2CC7               	goto	L13
 14768  0CAC                     i1l4912:	
 14769                           ;UART.c: 427: case 3:
 14770                           
 14771                           ;UART.c: 426: break;
 14772                           
 14773                           
 14774                           ;UART.c: 428: UARTstringWAIT(MarkParityMSG);
 14775  0CAC  304A               	movlw	low (_MarkParityMSG| (0+32768))
 14776  0CAD  0020               	movlb	0	; select bank0
 14777  0CAE  00A1               	movwf	i1UARTstringWAIT@data
 14778  0CAF  3089               	movlw	high (_MarkParityMSG| (0+32768))
 14779  0CB0  2CC7               	goto	L13
 14780  0CB1                     i1l4914:	
 14781                           ;UART.c: 430: default:
 14782                           
 14783                           ;UART.c: 429: break;
 14784                           
 14785                           
 14786                           ;UART.c: 431: UARTstringWAIT(SpaceParityMSG);
 14787  0CB1  303A               	movlw	low (_SpaceParityMSG| (0+32768))
 14788  0CB2  0020               	movlb	0	; select bank0
 14789  0CB3  00A1               	movwf	i1UARTstringWAIT@data
 14790  0CB4  3089               	movlw	high (_SpaceParityMSG| (0+32768))
 14791  0CB5  2CC7               	goto	L13
 14792  0CB6                     i1l4918:	
 14793                           ;UART.c: 433: }
 14794                           
 14795                           ;UART.c: 432: break;
 14796                           
 14797  0CB6  0021               	movlb	1	; select bank1
 14798  0CB7  0833               	movf	SetBaud@Parity^(0+128),w
 14799                           
 14800                           ; Switch size 1, requested type "space"
 14801                           ; Number of cases is 3, Range of values is 1 to 3
 14802                           ; switch strategies available:
 14803                           ; Name         Instructions Cycles
 14804                           ; simple_byte           10     6 (average)
 14805                           ; direct_byte           15     9 (fixed)
 14806                           ; jumptable            263     9 (fixed)
 14807                           ;	Chosen strategy is simple_byte
 14808  0CB8  3A01               	xorlw	1	; case 1
 14809  0CB9  1903               	skipnz
 14810  0CBA  2CA2               	goto	i1l4908
 14811  0CBB  3A03               	xorlw	3	; case 2
 14812  0CBC  1903               	skipnz
 14813  0CBD  2CA7               	goto	i1l4910
 14814  0CBE  3A01               	xorlw	1	; case 3
 14815  0CBF  1903               	skipnz
 14816  0CC0  2CAC               	goto	i1l4912
 14817  0CC1  2CB1               	goto	i1l4914
 14818                           
 14819                           ;UART.c: 434: }
 14820  0CC2  2CCB               	goto	i1l491
 14821  0CC3                     i1l4920:	
 14822                           
 14823                           ;UART.c: 435: else
 14824                           ;UART.c: 436: {
 14825                           ;UART.c: 437: UARTstringWAIT(NoParityMSG);
 14826  0CC3  3026               	movlw	low (_NoParityMSG| (0+32768))
 14827  0CC4  0020               	movlb	0	; select bank0
 14828  0CC5  00A1               	movwf	i1UARTstringWAIT@data
 14829  0CC6  3089               	movlw	high (_NoParityMSG| (0+32768))
 14830  0CC7                     L13:	
 14831  0CC7  00A2               	movwf	i1UARTstringWAIT@data+1
 14832  0CC8  319B  2324  318B   	fcall	i1_UARTstringWAIT
 14833  0CCB                     i1l491:	
 14834                           
 14835                           ;UART.c: 438: }
 14836                           ;UART.c: 439: UARTstringWAIT("\r\n");
 14837  0CCB  30FD               	movlw	low ((STR_14+16)| (0+32768))
 14838  0CCC  0020               	movlb	0	; select bank0
 14839  0CCD  00A1               	movwf	i1UARTstringWAIT@data
 14840  0CCE  3089               	movlw	high ((STR_14+16)| (0+32768))
 14841  0CCF  00A2               	movwf	i1UARTstringWAIT@data+1
 14842  0CD0  319B  2324  318B   	fcall	i1_UARTstringWAIT
 14843                           
 14844                           ;UART.c: 440: delayUS(15000);
 14845  0CD3  3000               	movlw	0
 14846  0CD4  00F3               	movwf	i1delayUS@US+3
 14847  0CD5  3000               	movlw	0
 14848  0CD6  00F2               	movwf	i1delayUS@US+2
 14849  0CD7  303A               	movlw	58
 14850  0CD8  00F1               	movwf	i1delayUS@US+1
 14851  0CD9  3098               	movlw	152
 14852  0CDA  00F0               	movwf	i1delayUS@US
 14853  0CDB  319B  23B5         	fcall	i1_delayUS
 14854  0CDD  0008               	return
 14855  0CDE                     __end_of_SetBaud:	
 14856                           
 14857                           	psect	text53
 14858  1B24                     __ptext53:	
 14859 ;; *************** function i1_UARTstringWAIT *****************
 14860 ;; Defined at:
 14861 ;;		line 365 in file "UART.c"
 14862 ;; Parameters:    Size  Location     Type
 14863 ;;  data            2    1[BANK0 ] PTR const unsigned char 
 14864 ;;		 -> STR_20(20), STR_19(3), Process_PS2_ScanCode@buf(60), STR_17(3), 
 14865 ;;		 -> STR_16(3), STR_15(19), STR_14(19), STR_13(3), 
 14866 ;;		 -> STR_12(3), SetBaud@buf(50), STR_10(21), STR_9(3), 
 14867 ;;		 -> STR_8(3), NoParityMSG(20), SpaceParityMSG(16), MarkParityMSG(15), 
 14868 ;;		 -> EvenParityMSG(22), OddParityMSG(21), STR_7(3), STR_6(33), 
 14869 ;;		 -> STR_5(3), Version(9), STR_4(19), STR_3(28), 
 14870 ;;		 -> STR_2(8), STR_1(7), VoltageMSG(13), 
 14871 ;; Auto vars:     Size  Location     Type
 14872 ;;		None
 14873 ;; Return value:  Size  Location     Type
 14874 ;;		None               void
 14875 ;; Registers used:
 14876 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14877 ;; Tracked objects:
 14878 ;;		On entry : 0/0
 14879 ;;		On exit  : 0/0
 14880 ;;		Unchanged: 0/0
 14881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14882 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14884 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14885 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14886 ;;Total ram usage:        5 bytes
 14887 ;; Hardware stack levels used:    1
 14888 ;; Hardware stack levels required when called:    2
 14889 ;; This function calls:
 14890 ;;		i1_UARTchar
 14891 ;;		i1_delayUS
 14892 ;; This function is called by:
 14893 ;;		_SetBaud
 14894 ;;		_Process_PS2_ScanCode
 14895 ;; This function uses a non-reentrant model
 14896 ;;
 14897                           
 14898                           
 14899                           ;psect for function i1_UARTstringWAIT
 14900  1B24                     i1_UARTstringWAIT:	
 14901  1B24                     i1l470:	
 14902                           ;incstack = 0
 14903                           ; Regs used in i1_UARTstringWAIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14904                           ;UART.c: 367: do
 14905                           
 14906                           
 14907                           ;UART.c: 368: {
 14908                           ;UART.c: 369: delayUS(5000);
 14909  1B24  3000               	movlw	0
 14910  1B25  00F3               	movwf	i1delayUS@US+3
 14911  1B26  3000               	movlw	0
 14912  1B27  00F2               	movwf	i1delayUS@US+2
 14913  1B28  3013               	movlw	19
 14914  1B29  00F1               	movwf	i1delayUS@US+1
 14915  1B2A  3088               	movlw	136
 14916  1B2B  00F0               	movwf	i1delayUS@US
 14917  1B2C  319B  23B5  319B   	fcall	i1_delayUS
 14918                           
 14919                           ;UART.c: 370: if(*data != 0)
 14920  1B2F  0020               	movlb	0	; select bank0
 14921  1B30  0821               	movf	i1UARTstringWAIT@data,w
 14922  1B31  0084               	movwf	4
 14923  1B32  0822               	movf	i1UARTstringWAIT@data+1,w
 14924  1B33  0085               	movwf	5
 14925  1B34  0012               	moviw fsr0++
 14926  1B35  1903               	btfsc	3,2
 14927  1B36  2B44               	goto	i1l4646
 14928                           
 14929                           ;UART.c: 371: {
 14930                           ;UART.c: 372: UARTchar(*data, 0, 0);
 14931  1B37  01F8               	clrf	i1UARTchar@override
 14932  1B38  01F9               	clrf	i1UARTchar@NinethBit_override_data
 14933  1B39  0821               	movf	i1UARTstringWAIT@data,w
 14934  1B3A  0084               	movwf	4
 14935  1B3B  0822               	movf	i1UARTstringWAIT@data+1,w
 14936  1B3C  0085               	movwf	5
 14937  1B3D  0800               	movf	0,w	;code access
 14938  1B3E  3190  208D  319B   	fcall	i1_UARTchar
 14939  1B41                     i1l472:	
 14940                           ;UART.c: 373: while((!TX1STAbits.TRMT));
 14941                           
 14942  1B41  0023               	movlb	3	; select bank3
 14943  1B42  1C9E               	btfss	30,1	;volatile
 14944  1B43  2B41               	goto	i1l472
 14945  1B44                     i1l4646:	
 14946                           
 14947                           ;UART.c: 374: }
 14948                           ;UART.c: 375: } while( *data++);
 14949  1B44  0020               	movlb	0	; select bank0
 14950  1B45  0822               	movf	i1UARTstringWAIT@data+1,w
 14951  1B46  00A4               	movwf	??i1_UARTstringWAIT+1
 14952  1B47  0821               	movf	i1UARTstringWAIT@data,w
 14953  1B48  00A3               	movwf	??i1_UARTstringWAIT
 14954  1B49  0AA1               	incf	i1UARTstringWAIT@data,f
 14955  1B4A  1903               	skipnz
 14956  1B4B  0AA2               	incf	i1UARTstringWAIT@data+1,f
 14957  1B4C  0823               	movf	??i1_UARTstringWAIT,w
 14958  1B4D  0084               	movwf	4
 14959  1B4E  0824               	movf	??i1_UARTstringWAIT+1,w
 14960  1B4F  0085               	movwf	5
 14961  1B50  0012               	moviw fsr0++
 14962  1B51  1903               	btfsc	3,2
 14963  1B52  0008               	return
 14964  1B53  2B24               	goto	i1l470
 14965  1B54                     __end_ofi1_UARTstringWAIT:	
 14966                           
 14967                           	psect	text54
 14968  108D                     __ptext54:	
 14969 ;; *************** function i1_UARTchar *****************
 14970 ;; Defined at:
 14971 ;;		line 234 in file "UART.c"
 14972 ;; Parameters:    Size  Location     Type
 14973 ;;  data            1    wreg     unsigned char 
 14974 ;;  override        1    8[COMMON] unsigned char 
 14975 ;;  NinethBit_ov    1    9[COMMON] unsigned char 
 14976 ;; Auto vars:     Size  Location     Type
 14977 ;;  data            1    0[BANK0 ] unsigned char 
 14978 ;; Return value:  Size  Location     Type
 14979 ;;		None               void
 14980 ;; Registers used:
 14981 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14982 ;; Tracked objects:
 14983 ;;		On entry : 0/0
 14984 ;;		On exit  : 0/0
 14985 ;;		Unchanged: 0/0
 14986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14987 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14988 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14989 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14990 ;;      Totals:         6       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14991 ;;Total ram usage:        7 bytes
 14992 ;; Hardware stack levels used:    1
 14993 ;; Hardware stack levels required when called:    1
 14994 ;; This function calls:
 14995 ;;		i1_CheckSum_byte
 14996 ;; This function is called by:
 14997 ;;		_isr
 14998 ;;		_Process_PS2_ScanCode
 14999 ;;		i1_UARTstringWAIT
 15000 ;; This function uses a non-reentrant model
 15001 ;;
 15002                           
 15003                           
 15004                           ;psect for function i1_UARTchar
 15005  108D                     i1_UARTchar:	
 15006                           
 15007                           ;incstack = 0
 15008                           ; Regs used in i1_UARTchar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 15009                           ;i1UARTchar@data stored from wreg
 15010  108D  0020               	movlb	0	; select bank0
 15011  108E  00A0               	movwf	i1UARTchar@data
 15012                           
 15013                           ;UART.c: 236: if(TXSTAbits.TX9)
 15014  108F  0023               	movlb	3	; select bank3
 15015  1090  1F1E               	btfss	30,6	;volatile
 15016  1091  28D2               	goto	i1l428
 15017                           
 15018                           ;UART.c: 237: {
 15019                           ;UART.c: 239: if(!override)
 15020  1092  0878               	movf	i1UARTchar@override,w
 15021  1093  1903               	btfsc	3,2
 15022  1094  28BC               	goto	i1l4158
 15023  1095  28C9               	goto	i1l4160
 15024  1096                     i1l4152:	
 15025                           ;UART.c: 243: {
 15026                           ;UART.c: 244: case 1:
 15027                           
 15028                           ;UART.c: 240: {
 15029                           ;UART.c: 242: switch (PARITY)
 15030                           
 15031                           
 15032                           ;UART.c: 245: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 3);
 15033  1096  0020               	movlb	0	; select bank0
 15034  1097  0820               	movf	i1UARTchar@data,w
 15035  1098  00FA               	movwf	??i1_UARTchar
 15036  1099  01FB               	clrf	??i1_UARTchar+1
 15037  109A  087A               	movf	??i1_UARTchar,w
 15038  109B  00F0               	movwf	i1CheckSum_byte@This
 15039  109C  087B               	movf	??i1_UARTchar+1,w
 15040  109D  00F1               	movwf	i1CheckSum_byte@This+1
 15041  109E  3003               	movlw	3
 15042  109F  28A9               	goto	L16
 15043  10A0                     i1l4154:	
 15044                           ;UART.c: 247: case 2:
 15045                           
 15046                           ;UART.c: 246: break;
 15047                           
 15048                           
 15049                           ;UART.c: 248: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 2);
 15050  10A0  0020               	movlb	0	; select bank0
 15051  10A1  0820               	movf	i1UARTchar@data,w
 15052  10A2  00FA               	movwf	??i1_UARTchar
 15053  10A3  01FB               	clrf	??i1_UARTchar+1
 15054  10A4  087A               	movf	??i1_UARTchar,w
 15055  10A5  00F0               	movwf	i1CheckSum_byte@This
 15056  10A6  087B               	movf	??i1_UARTchar+1,w
 15057  10A7  00F1               	movwf	i1CheckSum_byte@This+1
 15058  10A8  3002               	movlw	2
 15059  10A9                     L16:	
 15060  10A9  00FC               	movwf	??i1_UARTchar+2
 15061  10AA  087C               	movf	??i1_UARTchar+2,w
 15062  10AB  00F2               	movwf	i1CheckSum_byte@Odd_Even
 15063  10AC  319A  2298  3190   	fcall	i1_CheckSum_byte
 15064  10AF  00FD               	movwf	??i1_UARTchar+3
 15065  10B0  0023               	movlb	3	; select bank3
 15066  10B1  081E               	movf	30,w	;volatile
 15067  10B2  067D               	xorwf	??i1_UARTchar+3,w
 15068  10B3  39FE               	andlw	-2
 15069  10B4  067D               	xorwf	??i1_UARTchar+3,w
 15070  10B5  28D1               	goto	L15
 15071  10B6                     i1l434:	
 15072                           ;UART.c: 250: case 3:
 15073                           
 15074                           ;UART.c: 249: break;
 15075                           
 15076                           
 15077                           ;UART.c: 251: TXSTAbits.TX9D = 1;
 15078  10B6  0023               	movlb	3	; select bank3
 15079  10B7  141E               	bsf	30,0	;volatile
 15080                           
 15081                           ;UART.c: 252: break;
 15082  10B8  28D2               	goto	i1l428
 15083  10B9                     i1l435:	
 15084                           ;UART.c: 253: default:
 15085                           
 15086                           
 15087                           ;UART.c: 254: TXSTAbits.TX9D = 0;
 15088  10B9  0023               	movlb	3	; select bank3
 15089  10BA  101E               	bcf	30,0	;volatile
 15090                           
 15091                           ;UART.c: 256: }
 15092                           
 15093                           ;UART.c: 255: break;
 15094  10BB  28D2               	goto	i1l428
 15095  10BC                     i1l4158:	
 15096  10BC  0024               	movlb	4	; select bank4
 15097  10BD  0861               	movf	_PARITY^(0+512),w
 15098                           
 15099                           ; Switch size 1, requested type "space"
 15100                           ; Number of cases is 3, Range of values is 1 to 3
 15101                           ; switch strategies available:
 15102                           ; Name         Instructions Cycles
 15103                           ; simple_byte           10     6 (average)
 15104                           ; direct_byte           15     9 (fixed)
 15105                           ; jumptable            263     9 (fixed)
 15106                           ;	Chosen strategy is simple_byte
 15107  10BE  3A01               	xorlw	1	; case 1
 15108  10BF  1903               	skipnz
 15109  10C0  2896               	goto	i1l4152
 15110  10C1  3A03               	xorlw	3	; case 2
 15111  10C2  1903               	skipnz
 15112  10C3  28A0               	goto	i1l4154
 15113  10C4  3A01               	xorlw	1	; case 3
 15114  10C5  1903               	skipnz
 15115  10C6  28B6               	goto	i1l434
 15116  10C7  28B9               	goto	i1l435
 15117                           
 15118                           ;UART.c: 257: }
 15119  10C8  28D2               	goto	i1l428
 15120  10C9                     i1l4160:	
 15121                           
 15122                           ;UART.c: 258: else
 15123                           ;UART.c: 259: {
 15124                           ;UART.c: 260: TXSTAbits.TX9D = (NinethBit_override_data & 0x01);
 15125  10C9  3001               	movlw	1
 15126  10CA  0579               	andwf	i1UARTchar@NinethBit_override_data,w
 15127  10CB  00FA               	movwf	??i1_UARTchar
 15128  10CC  0023               	movlb	3	; select bank3
 15129  10CD  081E               	movf	30,w	;volatile
 15130  10CE  067A               	xorwf	??i1_UARTchar,w
 15131  10CF  39FE               	andlw	-2
 15132  10D0  067A               	xorwf	??i1_UARTchar,w
 15133  10D1                     L15:	
 15134  10D1  009E               	movwf	30	;volatile
 15135  10D2                     i1l428:	
 15136                           
 15137                           ;UART.c: 261: }
 15138                           ;UART.c: 262: }
 15139                           ;UART.c: 264: if(data == '\n')
 15140  10D2  300A               	movlw	10
 15141  10D3  0020               	movlb	0	; select bank0
 15142  10D4  0620               	xorwf	i1UARTchar@data,w
 15143  10D5  1D03               	btfss	3,2
 15144  10D6  28E8               	goto	i1l445
 15145                           
 15146                           ;UART.c: 265: {
 15147                           ;UART.c: 266: if(override || LineOverride)
 15148  10D7  0878               	movf	i1UARTchar@override,w
 15149  10D8  1D03               	btfss	3,2
 15150  10D9  28DE               	goto	i1l441
 15151  10DA  0024               	movlb	4	; select bank4
 15152  10DB  0860               	movf	_LineOverride^(0+512),w
 15153  10DC  1903               	btfsc	3,2
 15154  10DD  0008               	return
 15155  10DE                     i1l441:	
 15156                           ;UART.c: 267: {
 15157                           ;UART.c: 268: while(!TXSTAbits.TRMT);
 15158                           
 15159  10DE  0023               	movlb	3	; select bank3
 15160  10DF  1C9E               	btfss	30,1	;volatile
 15161  10E0  28DE               	goto	i1l441
 15162                           
 15163                           ;UART.c: 269: TXREG = data;
 15164  10E1  0020               	movlb	0	; select bank0
 15165  10E2  0820               	movf	i1UARTchar@data,w
 15166  10E3  0023               	movlb	3	; select bank3
 15167  10E4  009A               	movwf	26	;volatile
 15168                           
 15169                           ;UART.c: 270: LineOverride = 0;
 15170  10E5  0024               	movlb	4	; select bank4
 15171  10E6  01E0               	clrf	_LineOverride^(0+512)
 15172                           
 15173                           ;UART.c: 271: }
 15174                           ;UART.c: 272: }
 15175  10E7  0008               	return
 15176  10E8                     i1l445:	
 15177                           ;UART.c: 273: else
 15178                           ;UART.c: 274: {
 15179                           ;UART.c: 275: while(!TXSTAbits.TRMT);
 15180                           
 15181  10E8  0023               	movlb	3	; select bank3
 15182  10E9  1C9E               	btfss	30,1	;volatile
 15183  10EA  28E8               	goto	i1l445
 15184                           
 15185                           ;UART.c: 276: TXREG = data;
 15186  10EB  0020               	movlb	0	; select bank0
 15187  10EC  0820               	movf	i1UARTchar@data,w
 15188  10ED  0023               	movlb	3	; select bank3
 15189  10EE  009A               	movwf	26	;volatile
 15190  10EF  0008               	return
 15191  10F0                     __end_ofi1_UARTchar:	
 15192                           
 15193                           	psect	text55
 15194  1F9E                     __ptext55:	
 15195 ;; *************** function i1_ReadBaud *****************
 15196 ;; Defined at:
 15197 ;;		line 187 in file "FLASH.c"
 15198 ;; Parameters:    Size  Location     Type
 15199 ;;  row             2    4[BANK0 ] unsigned int 
 15200 ;;  column          1    6[BANK0 ] unsigned char 
 15201 ;; Auto vars:     Size  Location     Type
 15202 ;;  ReadBaud        4   16[BANK0 ] unsigned long 
 15203 ;; Return value:  Size  Location     Type
 15204 ;;                  4    4[BANK0 ] unsigned long 
 15205 ;; Registers used:
 15206 ;;		wreg, status,2, status,0, pclath, cstack
 15207 ;; Tracked objects:
 15208 ;;		On entry : 0/0
 15209 ;;		On exit  : 0/0
 15210 ;;		Unchanged: 0/0
 15211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15212 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15213 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15214 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15215 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15216 ;;Total ram usage:       16 bytes
 15217 ;; Hardware stack levels used:    1
 15218 ;; Hardware stack levels required when called:    2
 15219 ;; This function calls:
 15220 ;;		i1_ReadFlash_4Byte
 15221 ;; This function is called by:
 15222 ;;		_SetBaud
 15223 ;; This function uses a non-reentrant model
 15224 ;;
 15225                           
 15226                           
 15227                           ;psect for function i1_ReadBaud
 15228  1F9E                     i1_ReadBaud:	
 15229                           
 15230                           ;FLASH.c: 189: unsigned long temp;
 15231                           ;FLASH.c: 190: temp =(ReadFlash_4Byte(row, column));
 15232                           
 15233                           ;incstack = 0
 15234                           ; Regs used in i1_ReadBaud: [wreg+status,2+status,0+pclath+cstack]
 15235  1F9E  0020               	movlb	0	; select bank0
 15236  1F9F  0825               	movf	i1ReadBaud@row+1,w
 15237  1FA0  00F6               	movwf	i1ReadFlash_4Byte@row+1
 15238  1FA1  0824               	movf	i1ReadBaud@row,w
 15239  1FA2  00F5               	movwf	i1ReadFlash_4Byte@row
 15240  1FA3  0826               	movf	i1ReadBaud@column,w
 15241  1FA4  00A8               	movwf	??i1_ReadBaud
 15242  1FA5  0828               	movf	??i1_ReadBaud,w
 15243  1FA6  00F7               	movwf	i1ReadFlash_4Byte@column
 15244  1FA7  319D  2560  319F   	fcall	i1_ReadFlash_4Byte
 15245  1FAA  0878               	movf	?i1_ReadFlash_4Byte+3,w
 15246  1FAB  0020               	movlb	0	; select bank0
 15247  1FAC  00B3               	movwf	i1ReadBaud@temp+3
 15248  1FAD  0877               	movf	?i1_ReadFlash_4Byte+2,w
 15249  1FAE  00B2               	movwf	i1ReadBaud@temp+2
 15250  1FAF  0876               	movf	?i1_ReadFlash_4Byte+1,w
 15251  1FB0  00B1               	movwf	i1ReadBaud@temp+1
 15252  1FB1  0875               	movf	?i1_ReadFlash_4Byte,w
 15253  1FB2  00B0               	movwf	i1ReadBaud@temp
 15254                           
 15255                           ;FLASH.c: 191: MEM[1] = (unsigned int)(temp & 0x0003FFF);
 15256  1FB3  30FF               	movlw	255
 15257  1FB4  0530               	andwf	i1ReadBaud@temp,w
 15258  1FB5  0021               	movlb	1	; select bank1
 15259  1FB6  00E5               	movwf	(_MEM^(0+128)+2)
 15260  1FB7  303F               	movlw	63
 15261  1FB8  0020               	movlb	0	; select bank0
 15262  1FB9  0531               	andwf	i1ReadBaud@temp+1,w
 15263  1FBA  0021               	movlb	1	; select bank1
 15264  1FBB  00E6               	movwf	((_MEM+1)^(0+128)+2)
 15265                           
 15266                           ;FLASH.c: 192: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
 15267  1FBC  0020               	movlb	0	; select bank0
 15268  1FBD  0830               	movf	i1ReadBaud@temp,w
 15269  1FBE  00A8               	movwf	??i1_ReadBaud
 15270  1FBF  0831               	movf	i1ReadBaud@temp+1,w
 15271  1FC0  00A9               	movwf	??i1_ReadBaud+1
 15272  1FC1  0832               	movf	i1ReadBaud@temp+2,w
 15273  1FC2  00AA               	movwf	??i1_ReadBaud+2
 15274  1FC3  0833               	movf	i1ReadBaud@temp+3,w
 15275  1FC4  00AB               	movwf	??i1_ReadBaud+3
 15276  1FC5  300E               	movlw	14
 15277  1FC6                     u536_25:	
 15278  1FC6  36AB               	lsrf	??i1_ReadBaud+3,f
 15279  1FC7  0CAA               	rrf	??i1_ReadBaud+2,f
 15280  1FC8  0CA9               	rrf	??i1_ReadBaud+1,f
 15281  1FC9  0CA8               	rrf	??i1_ReadBaud,f
 15282  1FCA  0B89               	decfsz	9,f
 15283  1FCB  2FC6               	goto	u536_25
 15284  1FCC  30FF               	movlw	255
 15285  1FCD  0528               	andwf	??i1_ReadBaud,w
 15286  1FCE  0021               	movlb	1	; select bank1
 15287  1FCF  00E3               	movwf	_MEM^(0+128)
 15288  1FD0  303F               	movlw	63
 15289  1FD1  0020               	movlb	0	; select bank0
 15290  1FD2  0529               	andwf	??i1_ReadBaud+1,w
 15291  1FD3  0021               	movlb	1	; select bank1
 15292  1FD4  00E4               	movwf	(_MEM+1)^(0+128)
 15293                           
 15294                           ;FLASH.c: 193: return (((unsigned long)MEM[0] << 12) + (unsigned long)MEM[1]);
 15295  1FD5  0865               	movf	(_MEM^(0+128)+2),w
 15296  1FD6  0020               	movlb	0	; select bank0
 15297  1FD7  00A8               	movwf	??i1_ReadBaud
 15298  1FD8  0021               	movlb	1	; select bank1
 15299  1FD9  0866               	movf	((_MEM+1)^(0+128)+2),w
 15300  1FDA  0020               	movlb	0	; select bank0
 15301  1FDB  00A9               	movwf	??i1_ReadBaud+1
 15302  1FDC  01AA               	clrf	??i1_ReadBaud+2
 15303  1FDD  01AB               	clrf	??i1_ReadBaud+3
 15304  1FDE  0021               	movlb	1	; select bank1
 15305  1FDF  0863               	movf	_MEM^(0+128),w
 15306  1FE0  0020               	movlb	0	; select bank0
 15307  1FE1  00AC               	movwf	??i1_ReadBaud+4
 15308  1FE2  0021               	movlb	1	; select bank1
 15309  1FE3  0864               	movf	(_MEM+1)^(0+128),w
 15310  1FE4  0020               	movlb	0	; select bank0
 15311  1FE5  00AD               	movwf	??i1_ReadBaud+5
 15312  1FE6  01AE               	clrf	??i1_ReadBaud+6
 15313  1FE7  01AF               	clrf	??i1_ReadBaud+7
 15314  1FE8  300C               	movlw	12
 15315  1FE9                     u537_25:	
 15316  1FE9  35AC               	lslf	??i1_ReadBaud+4,f
 15317  1FEA  0DAD               	rlf	??i1_ReadBaud+5,f
 15318  1FEB  0DAE               	rlf	??i1_ReadBaud+6,f
 15319  1FEC  0DAF               	rlf	??i1_ReadBaud+7,f
 15320  1FED  0B89               	decfsz	9,f
 15321  1FEE  2FE9               	goto	u537_25
 15322  1FEF  082C               	movf	??i1_ReadBaud+4,w
 15323  1FF0  07A8               	addwf	??i1_ReadBaud,f
 15324  1FF1  082D               	movf	??i1_ReadBaud+5,w
 15325  1FF2  3DA9               	addwfc	??i1_ReadBaud+1,f
 15326  1FF3  082E               	movf	??i1_ReadBaud+6,w
 15327  1FF4  3DAA               	addwfc	??i1_ReadBaud+2,f
 15328  1FF5  082F               	movf	??i1_ReadBaud+7,w
 15329  1FF6  3DAB               	addwfc	??i1_ReadBaud+3,f
 15330  1FF7  082B               	movf	??i1_ReadBaud+3,w
 15331  1FF8  00A7               	movwf	?i1_ReadBaud+3
 15332  1FF9  082A               	movf	??i1_ReadBaud+2,w
 15333  1FFA  00A6               	movwf	?i1_ReadBaud+2
 15334  1FFB  0829               	movf	??i1_ReadBaud+1,w
 15335  1FFC  00A5               	movwf	?i1_ReadBaud+1
 15336  1FFD  0828               	movf	??i1_ReadBaud,w
 15337  1FFE  00A4               	movwf	?i1_ReadBaud
 15338  1FFF  0008               	return
 15339  2000                     __end_ofi1_ReadBaud:	
 15340                           
 15341                           	psect	text56
 15342  1D60                     __ptext56:	
 15343 ;; *************** function i1_ReadFlash_4Byte *****************
 15344 ;; Defined at:
 15345 ;;		line 62 in file "FLASH.c"
 15346 ;; Parameters:    Size  Location     Type
 15347 ;;  row             2    5[COMMON] unsigned int 
 15348 ;;  column          1    7[COMMON] unsigned char 
 15349 ;; Auto vars:     Size  Location     Type
 15350 ;;  ReadFlash_4B    4    0[BANK0 ] unsigned long 
 15351 ;; Return value:  Size  Location     Type
 15352 ;;                  4    5[COMMON] unsigned long 
 15353 ;; Registers used:
 15354 ;;		wreg, status,2, status,0, pclath, cstack
 15355 ;; Tracked objects:
 15356 ;;		On entry : 0/0
 15357 ;;		On exit  : 0/0
 15358 ;;		Unchanged: 0/0
 15359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15360 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15361 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15362 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15363 ;;      Totals:         9       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15364 ;;Total ram usage:       13 bytes
 15365 ;; Hardware stack levels used:    1
 15366 ;; Hardware stack levels required when called:    1
 15367 ;; This function calls:
 15368 ;;		i1_ReadFlash_2Byte
 15369 ;; This function is called by:
 15370 ;;		i1_ReadBaud
 15371 ;; This function uses a non-reentrant model
 15372 ;;
 15373                           
 15374                           
 15375                           ;psect for function i1_ReadFlash_4Byte
 15376  1D60                     i1_ReadFlash_4Byte:	
 15377                           
 15378                           ;FLASH.c: 64: unsigned long temp =0;
 15379                           
 15380                           ;incstack = 0
 15381                           ; Regs used in i1_ReadFlash_4Byte: [wreg+status,2+status,0+pclath+cstack]
 15382  1D60  3000               	movlw	0
 15383  1D61  0020               	movlb	0	; select bank0
 15384  1D62  00A3               	movwf	i1ReadFlash_4Byte@temp+3
 15385  1D63  3000               	movlw	0
 15386  1D64  00A2               	movwf	i1ReadFlash_4Byte@temp+2
 15387  1D65  3000               	movlw	0
 15388  1D66  00A1               	movwf	i1ReadFlash_4Byte@temp+1
 15389  1D67  3000               	movlw	0
 15390  1D68  00A0               	movwf	i1ReadFlash_4Byte@temp
 15391                           
 15392                           ;FLASH.c: 65: temp = ((unsigned long)ReadFlash_2Byte(row, column) << 16);
 15393  1D69  0876               	movf	i1ReadFlash_4Byte@row+1,w
 15394  1D6A  00F1               	movwf	i1ReadFlash_2Byte@row+1
 15395  1D6B  0875               	movf	i1ReadFlash_4Byte@row,w
 15396  1D6C  00F0               	movwf	i1ReadFlash_2Byte@row
 15397  1D6D  0877               	movf	i1ReadFlash_4Byte@column,w
 15398  1D6E  00F9               	movwf	??i1_ReadFlash_4Byte
 15399  1D6F  0879               	movf	??i1_ReadFlash_4Byte,w
 15400  1D70  00F2               	movwf	i1ReadFlash_2Byte@column
 15401  1D71  319A  2219  319D   	fcall	i1_ReadFlash_2Byte
 15402  1D74  0870               	movf	?i1_ReadFlash_2Byte,w
 15403  1D75  00FA               	movwf	??i1_ReadFlash_4Byte+1
 15404  1D76  0871               	movf	?i1_ReadFlash_2Byte+1,w
 15405  1D77  00FB               	movwf	??i1_ReadFlash_4Byte+2
 15406  1D78  01FC               	clrf	??i1_ReadFlash_4Byte+3
 15407  1D79  01FD               	clrf	??i1_ReadFlash_4Byte+4
 15408  1D7A  3010               	movlw	16
 15409  1D7B                     u451_25:	
 15410  1D7B  35FA               	lslf	??i1_ReadFlash_4Byte+1,f
 15411  1D7C  0DFB               	rlf	??i1_ReadFlash_4Byte+2,f
 15412  1D7D  0DFC               	rlf	??i1_ReadFlash_4Byte+3,f
 15413  1D7E  0DFD               	rlf	??i1_ReadFlash_4Byte+4,f
 15414  1D7F  0B89               	decfsz	9,f
 15415  1D80  2D7B               	goto	u451_25
 15416  1D81  087D               	movf	??i1_ReadFlash_4Byte+4,w
 15417  1D82  0020               	movlb	0	; select bank0
 15418  1D83  00A3               	movwf	i1ReadFlash_4Byte@temp+3
 15419  1D84  087C               	movf	??i1_ReadFlash_4Byte+3,w
 15420  1D85  00A2               	movwf	i1ReadFlash_4Byte@temp+2
 15421  1D86  087B               	movf	??i1_ReadFlash_4Byte+2,w
 15422  1D87  00A1               	movwf	i1ReadFlash_4Byte@temp+1
 15423  1D88  087A               	movf	??i1_ReadFlash_4Byte+1,w
 15424  1D89  00A0               	movwf	i1ReadFlash_4Byte@temp
 15425                           
 15426                           ;FLASH.c: 66: temp |= ((unsigned long)ReadFlash_2Byte(row, (column + 1)));
 15427  1D8A  0876               	movf	i1ReadFlash_4Byte@row+1,w
 15428  1D8B  00F1               	movwf	i1ReadFlash_2Byte@row+1
 15429  1D8C  0875               	movf	i1ReadFlash_4Byte@row,w
 15430  1D8D  00F0               	movwf	i1ReadFlash_2Byte@row
 15431  1D8E  0877               	movf	i1ReadFlash_4Byte@column,w
 15432  1D8F  3E01               	addlw	1
 15433  1D90  00F9               	movwf	??i1_ReadFlash_4Byte
 15434  1D91  0879               	movf	??i1_ReadFlash_4Byte,w
 15435  1D92  00F2               	movwf	i1ReadFlash_2Byte@column
 15436  1D93  319A  2219         	fcall	i1_ReadFlash_2Byte
 15437  1D95  0870               	movf	?i1_ReadFlash_2Byte,w
 15438  1D96  00FA               	movwf	??i1_ReadFlash_4Byte+1
 15439  1D97  0871               	movf	?i1_ReadFlash_2Byte+1,w
 15440  1D98  00FB               	movwf	??i1_ReadFlash_4Byte+2
 15441  1D99  01FC               	clrf	??i1_ReadFlash_4Byte+3
 15442  1D9A  01FD               	clrf	??i1_ReadFlash_4Byte+4
 15443  1D9B  087A               	movf	??i1_ReadFlash_4Byte+1,w
 15444  1D9C  0020               	movlb	0	; select bank0
 15445  1D9D  04A0               	iorwf	i1ReadFlash_4Byte@temp,f
 15446  1D9E  087B               	movf	??i1_ReadFlash_4Byte+2,w
 15447  1D9F  04A1               	iorwf	i1ReadFlash_4Byte@temp+1,f
 15448  1DA0  087C               	movf	??i1_ReadFlash_4Byte+3,w
 15449  1DA1  04A2               	iorwf	i1ReadFlash_4Byte@temp+2,f
 15450  1DA2  087D               	movf	??i1_ReadFlash_4Byte+4,w
 15451  1DA3  04A3               	iorwf	i1ReadFlash_4Byte@temp+3,f
 15452                           
 15453                           ;FLASH.c: 67: return temp;
 15454  1DA4  0823               	movf	i1ReadFlash_4Byte@temp+3,w
 15455  1DA5  00F8               	movwf	?i1_ReadFlash_4Byte+3
 15456  1DA6  0822               	movf	i1ReadFlash_4Byte@temp+2,w
 15457  1DA7  00F7               	movwf	?i1_ReadFlash_4Byte+2
 15458  1DA8  0821               	movf	i1ReadFlash_4Byte@temp+1,w
 15459  1DA9  00F6               	movwf	?i1_ReadFlash_4Byte+1
 15460  1DAA  0820               	movf	i1ReadFlash_4Byte@temp,w
 15461  1DAB  00F5               	movwf	?i1_ReadFlash_4Byte
 15462  1DAC  0008               	return
 15463  1DAD                     __end_ofi1_ReadFlash_4Byte:	
 15464                           
 15465                           	psect	text57
 15466  152A                     __ptext57:	
 15467 ;; *************** function i1_InitUART *****************
 15468 ;; Defined at:
 15469 ;;		line 78 in file "UART.c"
 15470 ;; Parameters:    Size  Location     Type
 15471 ;;  Baud            4    0[BANK0 ] unsigned long 
 15472 ;;  parity          1    4[BANK0 ] unsigned char 
 15473 ;; Auto vars:     Size  Location     Type
 15474 ;;  InitUART        4   17[BANK0 ] unsigned long 
 15475 ;;  InitUART        2   13[BANK0 ] unsigned int 
 15476 ;;  InitUART        1   16[BANK0 ] unsigned char 
 15477 ;;  InitUART        1   15[BANK0 ] unsigned char 
 15478 ;; Return value:  Size  Location     Type
 15479 ;;		None               void
 15480 ;; Registers used:
 15481 ;;		wreg, status,2, status,0, pclath, cstack
 15482 ;; Tracked objects:
 15483 ;;		On entry : 0/0
 15484 ;;		On exit  : 0/0
 15485 ;;		Unchanged: 0/0
 15486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15487 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15488 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15489 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15490 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15491 ;;Total ram usage:       21 bytes
 15492 ;; Hardware stack levels used:    1
 15493 ;; Hardware stack levels required when called:    1
 15494 ;; This function calls:
 15495 ;;		i1_CloseUSART
 15496 ;;		i1_OpenUSART
 15497 ;;		i1_ReadUSART
 15498 ;;		i1___lldiv
 15499 ;;		i1_baudUSART
 15500 ;; This function is called by:
 15501 ;;		_SetBaud
 15502 ;; This function uses a non-reentrant model
 15503 ;;
 15504                           
 15505                           
 15506                           ;psect for function i1_InitUART
 15507  152A                     i1_InitUART:	
 15508                           
 15509                           ;UART.c: 80: unsigned long temp;
 15510                           ;UART.c: 81: unsigned char config;
 15511                           ;UART.c: 82: unsigned int spbrg;
 15512                           ;UART.c: 83: unsigned char baudconfig;
 15513                           ;UART.c: 93: LATC |= 0b00000100;
 15514                           
 15515                           ;incstack = 0
 15516                           ; Regs used in i1_InitUART: [wreg+status,2+status,0+pclath+cstack]
 15517  152A  0022               	movlb	2	; select bank2
 15518  152B  150E               	bsf	14,2	;volatile
 15519                           
 15520                           ;UART.c: 94: PPSLOCK =0;
 15521  152C  003C               	movlb	28	; select bank28
 15522  152D  018F               	clrf	15	;volatile
 15523                           
 15524                           ;UART.c: 95: RC2PPS = 0b00000000;
 15525  152E  003D               	movlb	29	; select bank29
 15526  152F  01A2               	clrf	34	;volatile
 15527                           
 15528                           ;UART.c: 96: PPSLOCK =1;
 15529  1530  3001               	movlw	1
 15530  1531  003C               	movlb	28	; select bank28
 15531  1532  008F               	movwf	15	;volatile
 15532                           
 15533                           ;UART.c: 98: CloseUSART();
 15534  1533  3198  20E6  3195   	fcall	i1_CloseUSART
 15535                           
 15536                           ;UART.c: 99: config =0;
 15537  1536  0020               	movlb	0	; select bank0
 15538  1537  01B0               	clrf	i1InitUART@config
 15539                           
 15540                           ;UART.c: 100: baudconfig =0;
 15541  1538  01AF               	clrf	i1InitUART@baudconfig
 15542                           
 15543                           ;UART.c: 105: config |= 0b00001000;
 15544  1539  15B0               	bsf	i1InitUART@config,3
 15545                           
 15546                           ;UART.c: 106: config |= 0b00010000;
 15547  153A  1630               	bsf	i1InitUART@config,4
 15548                           
 15549                           ;UART.c: 107: PARITY = parity;
 15550  153B  0824               	movf	i1InitUART@parity,w
 15551  153C  00A5               	movwf	??i1_InitUART
 15552  153D  0825               	movf	??i1_InitUART,w
 15553  153E  0024               	movlb	4	; select bank4
 15554  153F  00E1               	movwf	_PARITY^(0+512)
 15555                           
 15556                           ;UART.c: 108: BAUD = Baud;
 15557  1540  0020               	movlb	0	; select bank0
 15558  1541  0823               	movf	i1InitUART@Baud+3,w
 15559  1542  0024               	movlb	4	; select bank4
 15560  1543  00E5               	movwf	(_BAUD+3)^(0+512)
 15561  1544  0020               	movlb	0	; select bank0
 15562  1545  0822               	movf	i1InitUART@Baud+2,w
 15563  1546  0024               	movlb	4	; select bank4
 15564  1547  00E4               	movwf	(_BAUD+2)^(0+512)
 15565  1548  0020               	movlb	0	; select bank0
 15566  1549  0821               	movf	i1InitUART@Baud+1,w
 15567  154A  0024               	movlb	4	; select bank4
 15568  154B  00E3               	movwf	(_BAUD+1)^(0+512)
 15569  154C  0020               	movlb	0	; select bank0
 15570  154D  0820               	movf	i1InitUART@Baud,w
 15571  154E  0024               	movlb	4	; select bank4
 15572  154F  00E2               	movwf	_BAUD^(0+512)
 15573                           
 15574                           ;UART.c: 109: if(parity)
 15575  1550  0020               	movlb	0	; select bank0
 15576  1551  0824               	movf	i1InitUART@parity,w
 15577  1552  1903               	btfsc	3,2
 15578  1553  2D56               	goto	i1l4600
 15579                           
 15580                           ;UART.c: 110: {
 15581                           ;UART.c: 111: config |= 0b00000010;
 15582  1554  14B0               	bsf	i1InitUART@config,1
 15583                           
 15584                           ;UART.c: 112: }
 15585  1555  2D5A               	goto	i1l4602
 15586  1556                     i1l4600:	
 15587                           
 15588                           ;UART.c: 113: else
 15589                           ;UART.c: 114: {
 15590                           ;UART.c: 115: config &= ~0b00000010;
 15591  1556  30FD               	movlw	253
 15592  1557  00A5               	movwf	??i1_InitUART
 15593  1558  0825               	movf	??i1_InitUART,w
 15594  1559  05B0               	andwf	i1InitUART@config,f
 15595  155A                     i1l4602:	
 15596                           
 15597                           ;UART.c: 116: }
 15598                           ;UART.c: 117: baudconfig |= 0b00001000;
 15599  155A  15AF               	bsf	i1InitUART@baudconfig,3
 15600                           
 15601                           ;UART.c: 120: temp = (32000000L / Baud) - 1;
 15602  155B  0823               	movf	i1InitUART@Baud+3,w
 15603  155C  00F3               	movwf	i1___lldiv@divisor+3
 15604  155D  0822               	movf	i1InitUART@Baud+2,w
 15605  155E  00F2               	movwf	i1___lldiv@divisor+2
 15606  155F  0821               	movf	i1InitUART@Baud+1,w
 15607  1560  00F1               	movwf	i1___lldiv@divisor+1
 15608  1561  0820               	movf	i1InitUART@Baud,w
 15609  1562  00F0               	movwf	i1___lldiv@divisor
 15610  1563  3001               	movlw	1
 15611  1564  00F7               	movwf	i1___lldiv@dividend+3
 15612  1565  30E8               	movlw	232
 15613  1566  00F6               	movwf	i1___lldiv@dividend+2
 15614  1567  3048               	movlw	72
 15615  1568  00F5               	movwf	i1___lldiv@dividend+1
 15616  1569  3000               	movlw	0
 15617  156A  00F4               	movwf	i1___lldiv@dividend
 15618  156B  319E  2648  3195   	fcall	i1___lldiv
 15619  156E  30FF               	movlw	255
 15620  156F  0770               	addwf	?i1___lldiv,w
 15621  1570  0020               	movlb	0	; select bank0
 15622  1571  00B1               	movwf	i1InitUART@temp
 15623  1572  30FF               	movlw	255
 15624  1573  3D71               	addwfc	?i1___lldiv+1,w
 15625  1574  00B2               	movwf	i1InitUART@temp+1
 15626  1575  30FF               	movlw	255
 15627  1576  3D72               	addwfc	?i1___lldiv+2,w
 15628  1577  00B3               	movwf	i1InitUART@temp+2
 15629  1578  30FF               	movlw	255
 15630  1579  3D73               	addwfc	?i1___lldiv+3,w
 15631  157A  00B4               	movwf	i1InitUART@temp+3
 15632                           
 15633                           ;UART.c: 121: temp = (temp >> 2) - 1;
 15634  157B  30FF               	movlw	255
 15635  157C  00A5               	movwf	??i1_InitUART
 15636  157D  30FF               	movlw	255
 15637  157E  00A6               	movwf	??i1_InitUART+1
 15638  157F  30FF               	movlw	255
 15639  1580  00A7               	movwf	??i1_InitUART+2
 15640  1581  30FF               	movlw	255
 15641  1582  00A8               	movwf	??i1_InitUART+3
 15642  1583  0831               	movf	i1InitUART@temp,w
 15643  1584  00A9               	movwf	??i1_InitUART+4
 15644  1585  0832               	movf	i1InitUART@temp+1,w
 15645  1586  00AA               	movwf	??i1_InitUART+5
 15646  1587  0833               	movf	i1InitUART@temp+2,w
 15647  1588  00AB               	movwf	??i1_InitUART+6
 15648  1589  0834               	movf	i1InitUART@temp+3,w
 15649  158A  00AC               	movwf	??i1_InitUART+7
 15650  158B  3002               	movlw	2
 15651  158C                     u527_25:	
 15652  158C  36AC               	lsrf	??i1_InitUART+7,f
 15653  158D  0CAB               	rrf	??i1_InitUART+6,f
 15654  158E  0CAA               	rrf	??i1_InitUART+5,f
 15655  158F  0CA9               	rrf	??i1_InitUART+4,f
 15656  1590  0B89               	decfsz	9,f
 15657  1591  2D8C               	goto	u527_25
 15658  1592  0829               	movf	??i1_InitUART+4,w
 15659  1593  07A5               	addwf	??i1_InitUART,f
 15660  1594  082A               	movf	??i1_InitUART+5,w
 15661  1595  3DA6               	addwfc	??i1_InitUART+1,f
 15662  1596  082B               	movf	??i1_InitUART+6,w
 15663  1597  3DA7               	addwfc	??i1_InitUART+2,f
 15664  1598  082C               	movf	??i1_InitUART+7,w
 15665  1599  3DA8               	addwfc	??i1_InitUART+3,f
 15666  159A  0828               	movf	??i1_InitUART+3,w
 15667  159B  00B4               	movwf	i1InitUART@temp+3
 15668  159C  0827               	movf	??i1_InitUART+2,w
 15669  159D  00B3               	movwf	i1InitUART@temp+2
 15670  159E  0826               	movf	??i1_InitUART+1,w
 15671  159F  00B2               	movwf	i1InitUART@temp+1
 15672  15A0  0825               	movf	??i1_InitUART,w
 15673  15A1  00B1               	movwf	i1InitUART@temp
 15674                           
 15675                           ;UART.c: 122: spbrg = (unsigned int)temp;
 15676  15A2  0832               	movf	i1InitUART@temp+1,w
 15677  15A3  00AE               	movwf	i1InitUART@spbrg+1
 15678  15A4  0831               	movf	i1InitUART@temp,w
 15679  15A5  00AD               	movwf	i1InitUART@spbrg
 15680                           
 15681                           ;UART.c: 124: RCSTAbits.CREN = 0;
 15682  15A6  0023               	movlb	3	; select bank3
 15683  15A7  121D               	bcf	29,4	;volatile
 15684                           
 15685                           ;UART.c: 125: OpenUSART(config, spbrg);
 15686  15A8  0020               	movlb	0	; select bank0
 15687  15A9  082E               	movf	i1InitUART@spbrg+1,w
 15688  15AA  00F1               	movwf	i1OpenUSART@spbrg+1
 15689  15AB  082D               	movf	i1InitUART@spbrg,w
 15690  15AC  00F0               	movwf	i1OpenUSART@spbrg
 15691  15AD  0830               	movf	i1InitUART@config,w
 15692  15AE  319A  226C  3195   	fcall	i1_OpenUSART
 15693                           
 15694                           ;UART.c: 126: baudUSART(baudconfig);
 15695  15B1  0020               	movlb	0	; select bank0
 15696  15B2  082F               	movf	i1InitUART@baudconfig,w
 15697  15B3  3198  2062  3195   	fcall	i1_baudUSART
 15698                           
 15699                           ;UART.c: 127: temp = ReadUSART();
 15700  15B6  3198  208A  3195   	fcall	i1_ReadUSART
 15701  15B9  0020               	movlb	0	; select bank0
 15702  15BA  00A5               	movwf	??i1_InitUART
 15703  15BB  01A6               	clrf	??i1_InitUART+1
 15704  15BC  01A7               	clrf	??i1_InitUART+2
 15705  15BD  01A8               	clrf	??i1_InitUART+3
 15706  15BE  0828               	movf	??i1_InitUART+3,w
 15707  15BF  00B4               	movwf	i1InitUART@temp+3
 15708  15C0  0827               	movf	??i1_InitUART+2,w
 15709  15C1  00B3               	movwf	i1InitUART@temp+2
 15710  15C2  0826               	movf	??i1_InitUART+1,w
 15711  15C3  00B2               	movwf	i1InitUART@temp+1
 15712  15C4  0825               	movf	??i1_InitUART,w
 15713  15C5  00B1               	movwf	i1InitUART@temp
 15714                           
 15715                           ;UART.c: 128: temp = ReadUSART();
 15716  15C6  3198  208A  3195   	fcall	i1_ReadUSART
 15717  15C9  0020               	movlb	0	; select bank0
 15718  15CA  00A5               	movwf	??i1_InitUART
 15719  15CB  01A6               	clrf	??i1_InitUART+1
 15720  15CC  01A7               	clrf	??i1_InitUART+2
 15721  15CD  01A8               	clrf	??i1_InitUART+3
 15722  15CE  0828               	movf	??i1_InitUART+3,w
 15723  15CF  00B4               	movwf	i1InitUART@temp+3
 15724  15D0  0827               	movf	??i1_InitUART+2,w
 15725  15D1  00B3               	movwf	i1InitUART@temp+2
 15726  15D2  0826               	movf	??i1_InitUART+1,w
 15727  15D3  00B2               	movwf	i1InitUART@temp+1
 15728  15D4  0825               	movf	??i1_InitUART,w
 15729  15D5  00B1               	movwf	i1InitUART@temp
 15730                           
 15731                           ;UART.c: 129: temp = ReadUSART();
 15732  15D6  3198  208A  3195   	fcall	i1_ReadUSART
 15733  15D9  0020               	movlb	0	; select bank0
 15734  15DA  00A5               	movwf	??i1_InitUART
 15735  15DB  01A6               	clrf	??i1_InitUART+1
 15736  15DC  01A7               	clrf	??i1_InitUART+2
 15737  15DD  01A8               	clrf	??i1_InitUART+3
 15738  15DE  0828               	movf	??i1_InitUART+3,w
 15739  15DF  00B4               	movwf	i1InitUART@temp+3
 15740  15E0  0827               	movf	??i1_InitUART+2,w
 15741  15E1  00B3               	movwf	i1InitUART@temp+2
 15742  15E2  0826               	movf	??i1_InitUART+1,w
 15743  15E3  00B2               	movwf	i1InitUART@temp+1
 15744  15E4  0825               	movf	??i1_InitUART,w
 15745  15E5  00B1               	movwf	i1InitUART@temp
 15746                           
 15747                           ;UART.c: 130: temp = ReadUSART();
 15748  15E6  3198  208A  3195   	fcall	i1_ReadUSART
 15749  15E9  0020               	movlb	0	; select bank0
 15750  15EA  00A5               	movwf	??i1_InitUART
 15751  15EB  01A6               	clrf	??i1_InitUART+1
 15752  15EC  01A7               	clrf	??i1_InitUART+2
 15753  15ED  01A8               	clrf	??i1_InitUART+3
 15754  15EE  0828               	movf	??i1_InitUART+3,w
 15755  15EF  00B4               	movwf	i1InitUART@temp+3
 15756  15F0  0827               	movf	??i1_InitUART+2,w
 15757  15F1  00B3               	movwf	i1InitUART@temp+2
 15758  15F2  0826               	movf	??i1_InitUART+1,w
 15759  15F3  00B2               	movwf	i1InitUART@temp+1
 15760  15F4  0825               	movf	??i1_InitUART,w
 15761  15F5  00B1               	movwf	i1InitUART@temp
 15762                           
 15763                           ;UART.c: 131: temp = ReadUSART();
 15764  15F6  3198  208A         	fcall	i1_ReadUSART
 15765  15F8  0020               	movlb	0	; select bank0
 15766  15F9  00A5               	movwf	??i1_InitUART
 15767  15FA  01A6               	clrf	??i1_InitUART+1
 15768  15FB  01A7               	clrf	??i1_InitUART+2
 15769  15FC  01A8               	clrf	??i1_InitUART+3
 15770  15FD  0828               	movf	??i1_InitUART+3,w
 15771  15FE  00B4               	movwf	i1InitUART@temp+3
 15772  15FF  0827               	movf	??i1_InitUART+2,w
 15773  1600  00B3               	movwf	i1InitUART@temp+2
 15774  1601  0826               	movf	??i1_InitUART+1,w
 15775  1602  00B2               	movwf	i1InitUART@temp+1
 15776  1603  0825               	movf	??i1_InitUART,w
 15777  1604  00B1               	movwf	i1InitUART@temp
 15778                           
 15779                           ;UART.c: 133: PPSLOCK =0;
 15780  1605  003C               	movlb	28	; select bank28
 15781  1606  018F               	clrf	15	;volatile
 15782                           
 15783                           ;UART.c: 134: RC2PPS = 0b00010100;
 15784  1607  3014               	movlw	20
 15785  1608  003D               	movlb	29	; select bank29
 15786  1609  00A2               	movwf	34	;volatile
 15787                           
 15788                           ;UART.c: 135: CKPPS = 0b00010010;
 15789  160A  3012               	movlw	18
 15790  160B  003C               	movlb	28	; select bank28
 15791  160C  00A5               	movwf	37	;volatile
 15792                           
 15793                           ;UART.c: 137: RXPPS = 0b00010101;
 15794  160D  3015               	movlw	21
 15795  160E  00A4               	movwf	36	;volatile
 15796                           
 15797                           ;UART.c: 139: PPSLOCK =1;
 15798  160F  3001               	movlw	1
 15799  1610  008F               	movwf	15	;volatile
 15800                           
 15801                           ;UART.c: 141: PIR1bits.RCIF = 0;
 15802  1611  0020               	movlb	0	; select bank0
 15803  1612  1291               	bcf	17,5	;volatile
 15804                           
 15805                           ;UART.c: 142: INTCONbits.PEIE = 1;
 15806  1613  170B               	bsf	11,6	;volatile
 15807  1614  0008               	return
 15808  1615                     __end_ofi1_InitUART:	
 15809                           
 15810                           	psect	text58
 15811  1862                     __ptext58:	
 15812 ;; *************** function i1_baudUSART *****************
 15813 ;; Defined at:
 15814 ;;		line 150 in file "UART.c"
 15815 ;; Parameters:    Size  Location     Type
 15816 ;;  baudconfig      1    wreg     unsigned char 
 15817 ;; Auto vars:     Size  Location     Type
 15818 ;;  baudconfig      1    0[COMMON] unsigned char 
 15819 ;; Return value:  Size  Location     Type
 15820 ;;		None               void
 15821 ;; Registers used:
 15822 ;;		wreg, status,2
 15823 ;; Tracked objects:
 15824 ;;		On entry : 0/0
 15825 ;;		On exit  : 0/0
 15826 ;;		Unchanged: 0/0
 15827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15829 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15831 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15832 ;;Total ram usage:        1 bytes
 15833 ;; Hardware stack levels used:    1
 15834 ;; This function calls:
 15835 ;;		Nothing
 15836 ;; This function is called by:
 15837 ;;		i1_InitUART
 15838 ;; This function uses a non-reentrant model
 15839 ;;
 15840                           
 15841                           
 15842                           ;psect for function i1_baudUSART
 15843  1862                     i1_baudUSART:	
 15844                           
 15845                           ;incstack = 0
 15846                           ; Regs used in i1_baudUSART: [wreg+status,2]
 15847                           ;i1baudUSART@baudconfig stored from wreg
 15848  1862  00F0               	movwf	i1baudUSART@baudconfig
 15849                           
 15850                           ;UART.c: 152: BAUD1CON =0;
 15851  1863  0023               	movlb	3	; select bank3
 15852  1864  019F               	clrf	31	;volatile
 15853                           
 15854                           ;UART.c: 153: BAUD1CON = baudconfig;
 15855  1865  0870               	movf	i1baudUSART@baudconfig,w
 15856  1866  009F               	movwf	31	;volatile
 15857  1867  0008               	return
 15858  1868                     __end_ofi1_baudUSART:	
 15859                           
 15860                           	psect	text59
 15861  188A                     __ptext59:	
 15862 ;; *************** function i1_ReadUSART *****************
 15863 ;; Defined at:
 15864 ;;		line 306 in file "UART.c"
 15865 ;; Parameters:    Size  Location     Type
 15866 ;;		None
 15867 ;; Auto vars:     Size  Location     Type
 15868 ;;  ReadUSART       1    1[COMMON] unsigned char 
 15869 ;; Return value:  Size  Location     Type
 15870 ;;                  1    wreg      unsigned char 
 15871 ;; Registers used:
 15872 ;;		wreg
 15873 ;; Tracked objects:
 15874 ;;		On entry : 0/0
 15875 ;;		On exit  : 0/0
 15876 ;;		Unchanged: 0/0
 15877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15879 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15880 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15881 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15882 ;;Total ram usage:        2 bytes
 15883 ;; Hardware stack levels used:    1
 15884 ;; This function calls:
 15885 ;;		Nothing
 15886 ;; This function is called by:
 15887 ;;		_isr
 15888 ;;		i1_InitUART
 15889 ;; This function uses a non-reentrant model
 15890 ;;
 15891                           
 15892                           
 15893                           ;psect for function i1_ReadUSART
 15894  188A                     i1_ReadUSART:	
 15895                           
 15896                           ;UART.c: 308: char data;
 15897                           ;UART.c: 310: if(RCSTAbits.OERR)
 15898                           
 15899                           ;incstack = 0
 15900                           ; Regs used in i1_ReadUSART: [wreg]
 15901  188A  0023               	movlb	3	; select bank3
 15902  188B  189D               	btfsc	29,1	;volatile
 15903                           
 15904                           ;UART.c: 311: {
 15905                           ;UART.c: 312: RCSTAbits.CREN = 0;
 15906  188C  121D               	bcf	29,4	;volatile
 15907                           
 15908                           ;UART.c: 313: }
 15909                           ;UART.c: 315: data = RCREG;
 15910  188D  0819               	movf	25,w	;volatile
 15911  188E  00F0               	movwf	??i1_ReadUSART
 15912  188F  0870               	movf	??i1_ReadUSART,w
 15913  1890  00F1               	movwf	i1ReadUSART@data
 15914                           
 15915                           ;UART.c: 317: return (data);
 15916  1891  0871               	movf	i1ReadUSART@data,w
 15917  1892  0008               	return
 15918  1893                     __end_ofi1_ReadUSART:	
 15919                           
 15920                           	psect	text60
 15921  1A6C                     __ptext60:	
 15922 ;; *************** function i1_OpenUSART *****************
 15923 ;; Defined at:
 15924 ;;		line 161 in file "UART.c"
 15925 ;; Parameters:    Size  Location     Type
 15926 ;;  config          1    wreg     unsigned char 
 15927 ;;  spbrg           2    0[COMMON] unsigned int 
 15928 ;; Auto vars:     Size  Location     Type
 15929 ;;  config          1    2[COMMON] unsigned char 
 15930 ;; Return value:  Size  Location     Type
 15931 ;;		None               void
 15932 ;; Registers used:
 15933 ;;		wreg, status,2
 15934 ;; Tracked objects:
 15935 ;;		On entry : 0/0
 15936 ;;		On exit  : 0/0
 15937 ;;		Unchanged: 0/0
 15938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15939 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15940 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15942 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15943 ;;Total ram usage:        3 bytes
 15944 ;; Hardware stack levels used:    1
 15945 ;; This function calls:
 15946 ;;		Nothing
 15947 ;; This function is called by:
 15948 ;;		i1_InitUART
 15949 ;; This function uses a non-reentrant model
 15950 ;;
 15951                           
 15952                           
 15953                           ;psect for function i1_OpenUSART
 15954  1A6C                     i1_OpenUSART:	
 15955                           
 15956                           ;incstack = 0
 15957                           ; Regs used in i1_OpenUSART: [wreg+status,2]
 15958                           ;i1OpenUSART@config stored from wreg
 15959  1A6C  00F2               	movwf	i1OpenUSART@config
 15960                           
 15961                           ;UART.c: 163: TX1STA = 0;
 15962  1A6D  0023               	movlb	3	; select bank3
 15963  1A6E  019E               	clrf	30	;volatile
 15964                           
 15965                           ;UART.c: 164: RC1STA = 0;
 15966  1A6F  019D               	clrf	29	;volatile
 15967                           
 15968                           ;UART.c: 166: if(config&0x01)
 15969  1A70  1872               	btfsc	i1OpenUSART@config,0
 15970                           
 15971                           ;UART.c: 167: {
 15972                           ;UART.c: 168: TX1STAbits.SYNC = 1;
 15973  1A71  161E               	bsf	30,4	;volatile
 15974                           
 15975                           ;UART.c: 169: }
 15976                           ;UART.c: 171: if(config&0x02)
 15977  1A72  1CF2               	btfss	i1OpenUSART@config,1
 15978  1A73  2A76               	goto	i1l4116
 15979                           
 15980                           ;UART.c: 172: {
 15981                           ;UART.c: 173: TX1STAbits.TX9 = 1;
 15982  1A74  171E               	bsf	30,6	;volatile
 15983                           
 15984                           ;UART.c: 174: RC1STAbits.RX9 = 1;
 15985  1A75  171D               	bsf	29,6	;volatile
 15986  1A76                     i1l4116:	
 15987                           
 15988                           ;UART.c: 175: }
 15989                           ;UART.c: 177: if(config&0x04)
 15990  1A76  1972               	btfsc	i1OpenUSART@config,2
 15991                           
 15992                           ;UART.c: 178: {
 15993                           ;UART.c: 179: TX1STAbits.CSRC = 1;
 15994  1A77  179E               	bsf	30,7	;volatile
 15995                           
 15996                           ;UART.c: 180: }
 15997                           ;UART.c: 182: if(config&0x08)
 15998  1A78  1DF2               	btfss	i1OpenUSART@config,3
 15999  1A79  2A7C               	goto	i1l417
 16000                           
 16001                           ;UART.c: 183: {
 16002                           ;UART.c: 184: RC1STAbits.CREN = 1;
 16003  1A7A  161D               	bsf	29,4	;volatile
 16004                           
 16005                           ;UART.c: 185: }
 16006  1A7B  2A7D               	goto	i1l4124
 16007  1A7C                     i1l417:	
 16008                           
 16009                           ;UART.c: 186: else
 16010                           ;UART.c: 187: {
 16011                           ;UART.c: 188: RC1STAbits.SREN = 1;
 16012  1A7C  169D               	bsf	29,5	;volatile
 16013  1A7D                     i1l4124:	
 16014                           
 16015                           ;UART.c: 189: }
 16016                           ;UART.c: 191: if(config&0x10)
 16017  1A7D  1A72               	btfsc	i1OpenUSART@config,4
 16018                           
 16019                           ;UART.c: 192: {
 16020                           ;UART.c: 193: TX1STAbits.BRGH = 1;
 16021  1A7E  151E               	bsf	30,2	;volatile
 16022                           
 16023                           ;UART.c: 199: }
 16024                           ;UART.c: 201: if(config&0x40)
 16025                           
 16026                           ;UART.c: 197: {
 16027  1A7F  1F72               	btfss	i1OpenUSART@config,6
 16028  1A80  2A86               	goto	i1l421
 16029                           
 16030                           ;UART.c: 202: {
 16031                           ;UART.c: 203: PIR1bits.RCIF = 0;
 16032  1A81  0020               	movlb	0	; select bank0
 16033  1A82  1291               	bcf	17,5	;volatile
 16034                           
 16035                           ;UART.c: 204: PIE1bits.RCIE = 1;
 16036  1A83  0021               	movlb	1	; select bank1
 16037  1A84  1691               	bsf	17,5	;volatile
 16038                           
 16039                           ;UART.c: 206: }
 16040  1A85  2A88               	goto	i1l4134
 16041  1A86                     i1l421:	
 16042                           
 16043                           ;UART.c: 207: else
 16044                           ;UART.c: 208: {
 16045                           ;UART.c: 209: PIE1bits.RCIE = 0;
 16046  1A86  0021               	movlb	1	; select bank1
 16047  1A87  1291               	bcf	17,5	;volatile
 16048  1A88                     i1l4134:	
 16049                           
 16050                           ;UART.c: 210: }
 16051                           ;UART.c: 212: if(config&0x80)
 16052  1A88  1FF2               	btfss	i1OpenUSART@config,7
 16053  1A89  2A8F               	goto	i1l423
 16054                           
 16055                           ;UART.c: 213: {
 16056                           ;UART.c: 214: PIR1bits.TXIF = 0;
 16057  1A8A  0020               	movlb	0	; select bank0
 16058  1A8B  1211               	bcf	17,4	;volatile
 16059                           
 16060                           ;UART.c: 215: PIE1bits.TXIE = 1;
 16061  1A8C  0021               	movlb	1	; select bank1
 16062  1A8D  1611               	bsf	17,4	;volatile
 16063                           
 16064                           ;UART.c: 216: }
 16065  1A8E  2A90               	goto	i1l4138
 16066  1A8F                     i1l423:	
 16067                           
 16068                           ;UART.c: 217: else
 16069                           ;UART.c: 218: {
 16070                           ;UART.c: 219: PIE1bits.TXIE = 0;
 16071  1A8F  1211               	bcf	17,4	;volatile
 16072  1A90                     i1l4138:	
 16073                           
 16074                           ;UART.c: 220: }
 16075                           ;UART.c: 222: SPBRG = spbrg;
 16076  1A90  0870               	movf	i1OpenUSART@spbrg,w
 16077  1A91  0023               	movlb	3	; select bank3
 16078  1A92  009B               	movwf	27	;volatile
 16079                           
 16080                           ;UART.c: 223: SPBRGH = spbrg >> 8;
 16081  1A93  0871               	movf	i1OpenUSART@spbrg+1,w
 16082  1A94  009C               	movwf	28	;volatile
 16083                           
 16084                           ;UART.c: 225: TX1STAbits.TXEN = 1;
 16085  1A95  169E               	bsf	30,5	;volatile
 16086                           
 16087                           ;UART.c: 226: RC1STAbits.SPEN = 1;
 16088  1A96  179D               	bsf	29,7	;volatile
 16089  1A97  0008               	return
 16090  1A98                     __end_ofi1_OpenUSART:	
 16091                           
 16092                           	psect	text61
 16093  18E6                     __ptext61:	
 16094 ;; *************** function i1_CloseUSART *****************
 16095 ;; Defined at:
 16096 ;;		line 65 in file "UART.c"
 16097 ;; Parameters:    Size  Location     Type
 16098 ;;		None
 16099 ;; Auto vars:     Size  Location     Type
 16100 ;;		None
 16101 ;; Return value:  Size  Location     Type
 16102 ;;		None               void
 16103 ;; Registers used:
 16104 ;;		wreg, status,2, status,0
 16105 ;; Tracked objects:
 16106 ;;		On entry : 0/0
 16107 ;;		On exit  : 0/0
 16108 ;;		Unchanged: 0/0
 16109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16112 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16113 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16114 ;;Total ram usage:        1 bytes
 16115 ;; Hardware stack levels used:    1
 16116 ;; This function calls:
 16117 ;;		Nothing
 16118 ;; This function is called by:
 16119 ;;		i1_InitUART
 16120 ;; This function uses a non-reentrant model
 16121 ;;
 16122                           
 16123                           
 16124                           ;psect for function i1_CloseUSART
 16125  18E6                     i1_CloseUSART:	
 16126                           
 16127                           ;UART.c: 67: RCSTA&=0b01001111;
 16128                           
 16129                           ;incstack = 0
 16130                           ; Regs used in i1_CloseUSART: [wreg+status,2+status,0]
 16131  18E6  304F               	movlw	79
 16132  18E7  00F0               	movwf	??i1_CloseUSART
 16133  18E8  0870               	movf	??i1_CloseUSART,w
 16134  18E9  0023               	movlb	3	; select bank3
 16135  18EA  059D               	andwf	29,f	;volatile
 16136                           
 16137                           ;UART.c: 68: TX1STAbits.TXEN=0;
 16138  18EB  129E               	bcf	30,5	;volatile
 16139                           
 16140                           ;UART.c: 69: PIE1&=0b11001111;
 16141  18EC  30CF               	movlw	207
 16142  18ED  00F0               	movwf	??i1_CloseUSART
 16143  18EE  0870               	movf	??i1_CloseUSART,w
 16144  18EF  0021               	movlb	1	; select bank1
 16145  18F0  0591               	andwf	17,f	;volatile
 16146  18F1  0008               	return
 16147  18F2                     __end_ofi1_CloseUSART:	
 16148                           
 16149                           	psect	text62
 16150  170A                     __ptext62:	
 16151 ;; *************** function _sprintf *****************
 16152 ;; Defined at:
 16153 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 16154 ;; Parameters:    Size  Location     Type
 16155 ;;  sp              1    wreg     PTR unsigned char 
 16156 ;;		 -> Process_PS2_ScanCode@buf(60), SetBaud@buf(50), 
 16157 ;;  f               2   10[BANK0 ] PTR const unsigned char 
 16158 ;;		 -> STR_18(24), STR_11(12), 
 16159 ;; Auto vars:     Size  Location     Type
 16160 ;;  sp              1   30[BANK0 ] PTR unsigned char 
 16161 ;;		 -> Process_PS2_ScanCode@buf(60), SetBaud@buf(50), 
 16162 ;;  val             4   25[BANK0 ] unsigned long 
 16163 ;;  tmpval          4    0        struct .
 16164 ;;  prec            2   23[BANK0 ] int 
 16165 ;;  cp              2    0        PTR const unsigned char 
 16166 ;;  len             2    0        unsigned int 
 16167 ;;  c               1   31[BANK0 ] char 
 16168 ;;  ap              1   29[BANK0 ] PTR void [1]
 16169 ;;		 -> ?_sprintf(2), 
 16170 ;;  flag            1   22[BANK0 ] unsigned char 
 16171 ;; Return value:  Size  Location     Type
 16172 ;;                  2   10[BANK0 ] int 
 16173 ;; Registers used:
 16174 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16175 ;; Tracked objects:
 16176 ;;		On entry : 0/0
 16177 ;;		On exit  : 0/0
 16178 ;;		Unchanged: 0/0
 16179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16180 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16181 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16182 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16183 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16184 ;;Total ram usage:       22 bytes
 16185 ;; Hardware stack levels used:    1
 16186 ;; Hardware stack levels required when called:    1
 16187 ;; This function calls:
 16188 ;;		___llmod
 16189 ;;		i1___lldiv
 16190 ;; This function is called by:
 16191 ;;		_SetBaud
 16192 ;;		_Process_PS2_ScanCode
 16193 ;; This function uses a non-reentrant model
 16194 ;;
 16195                           
 16196                           
 16197                           ;psect for function _sprintf
 16198  170A                     _sprintf:	
 16199                           
 16200                           ;incstack = 0
 16201                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16202                           ;sprintf@sp stored from wreg
 16203  170A  0020               	movlb	0	; select bank0
 16204  170B  00BE               	movwf	sprintf@sp
 16205                           
 16206                           ;doprnt.c: 494: va_list ap;
 16207                           ;doprnt.c: 499: signed char c;
 16208                           ;doprnt.c: 504: int prec;
 16209                           ;doprnt.c: 508: unsigned char flag;
 16210                           ;doprnt.c: 523: union {
 16211                           ;doprnt.c: 524: unsigned long vd;
 16212                           ;doprnt.c: 525: double integ;
 16213                           ;doprnt.c: 526: } tmpval;
 16214                           ;doprnt.c: 528: unsigned long val;
 16215                           ;doprnt.c: 529: unsigned len;
 16216                           ;doprnt.c: 530: const char * cp;
 16217                           ;doprnt.c: 533: *ap = __va_start();
 16218  170C  302C               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
 16219  170D  00B0               	movwf	??_sprintf
 16220  170E  0830               	movf	??_sprintf,w
 16221  170F  00BD               	movwf	sprintf@ap
 16222  1710                     i1l4356:	
 16223                           ;doprnt.c: 536: while(c = *f++) {
 16224                           
 16225  1710  082B               	movf	sprintf@f+1,w
 16226  1711  00B1               	movwf	??_sprintf+1
 16227  1712  082A               	movf	sprintf@f,w
 16228  1713  00B0               	movwf	??_sprintf
 16229  1714  0AAA               	incf	sprintf@f,f
 16230  1715  1903               	skipnz
 16231  1716  0AAB               	incf	sprintf@f+1,f
 16232  1717  0830               	movf	??_sprintf,w
 16233  1718  0084               	movwf	4
 16234  1719  0831               	movf	??_sprintf+1,w
 16235  171A  0085               	movwf	5
 16236  171B  0800               	movf	0,w	;code access
 16237  171C  00B2               	movwf	??_sprintf+2
 16238  171D  0832               	movf	??_sprintf+2,w
 16239  171E  00BF               	movwf	sprintf@c
 16240  171F  083F               	movf	sprintf@c,w
 16241  1720  1903               	btfsc	3,2
 16242  1721  2FFA               	goto	i1l4358
 16243                           
 16244                           ;doprnt.c: 538: if(c != '%')
 16245  1722  3025               	movlw	37
 16246  1723  063F               	xorwf	sprintf@c,w
 16247  1724  1903               	btfsc	3,2
 16248  1725  2F33               	goto	i1l4318
 16249                           
 16250                           ;doprnt.c: 540: {
 16251                           ;doprnt.c: 541: ((*sp++ = (c)));
 16252  1726  083F               	movf	sprintf@c,w
 16253  1727  00B0               	movwf	??_sprintf
 16254  1728  083E               	movf	sprintf@sp,w
 16255  1729  0086               	movwf	6
 16256  172A  3001               	movlw	1	; select bank2/3
 16257  172B  0087               	movwf	7
 16258  172C  0830               	movf	??_sprintf,w
 16259  172D  0081               	movwf	1
 16260  172E  3001               	movlw	1
 16261  172F  00B0               	movwf	??_sprintf
 16262  1730  0830               	movf	??_sprintf,w
 16263  1731  07BE               	addwf	sprintf@sp,f
 16264                           
 16265                           ;doprnt.c: 542: continue;
 16266  1732  2F10               	goto	i1l4356
 16267  1733                     i1l4318:	
 16268                           
 16269                           ;doprnt.c: 543: }
 16270                           ;doprnt.c: 548: flag = 0;
 16271  1733  01B6               	clrf	sprintf@flag
 16272                           
 16273                           ;doprnt.c: 635: switch(c = *f++) {
 16274                           
 16275                           ;doprnt.c: 633: loop:
 16276  1734  2F3C               	goto	i1l4324
 16277  1735                     i1l1085:	
 16278                           ;doprnt.c: 641: case 'l':
 16279                           
 16280                           ;doprnt.c: 638: goto alldone;
 16281                           
 16282                           ;doprnt.c: 637: case 0:
 16283                           
 16284                           
 16285                           ;doprnt.c: 643: flag |= 0x10;
 16286  1735  1636               	bsf	sprintf@flag,4
 16287                           
 16288                           ;doprnt.c: 644: goto loop;
 16289  1736  2F3C               	goto	i1l4324
 16290  1737                     i1l4320:	
 16291                           ;doprnt.c: 817: case 'u':
 16292                           
 16293                           ;doprnt.c: 813: continue;
 16294                           
 16295                           ;doprnt.c: 802: default:
 16296                           
 16297                           
 16298                           ;doprnt.c: 818: flag |= 0xC0;
 16299  1737  30C0               	movlw	192
 16300  1738  00B0               	movwf	??_sprintf
 16301  1739  0830               	movf	??_sprintf,w
 16302  173A  04B6               	iorwf	sprintf@flag,f
 16303                           
 16304                           ;doprnt.c: 822: }
 16305                           
 16306                           ;doprnt.c: 819: break;
 16307  173B  2F53               	goto	i1l1088
 16308  173C                     i1l4324:	
 16309  173C  082B               	movf	sprintf@f+1,w
 16310  173D  00B1               	movwf	??_sprintf+1
 16311  173E  082A               	movf	sprintf@f,w
 16312  173F  00B0               	movwf	??_sprintf
 16313  1740  0AAA               	incf	sprintf@f,f
 16314  1741  1903               	skipnz
 16315  1742  0AAB               	incf	sprintf@f+1,f
 16316  1743  0830               	movf	??_sprintf,w
 16317  1744  0084               	movwf	4
 16318  1745  0831               	movf	??_sprintf+1,w
 16319  1746  0085               	movwf	5
 16320  1747  0800               	movf	0,w	;code access
 16321  1748  00BF               	movwf	sprintf@c
 16322                           
 16323                           ; Switch size 1, requested type "space"
 16324                           ; Number of cases is 3, Range of values is 0 to 117
 16325                           ; switch strategies available:
 16326                           ; Name         Instructions Cycles
 16327                           ; simple_byte           10     6 (average)
 16328                           ; direct_byte          242     6 (fixed)
 16329                           ; jumptable            260     6 (fixed)
 16330                           ;	Chosen strategy is simple_byte
 16331  1749  3A00               	xorlw	0	; case 0
 16332  174A  1903               	skipnz
 16333  174B  2FFA               	goto	i1l4358
 16334  174C  3A6C               	xorlw	108	; case 108
 16335  174D  1903               	skipnz
 16336  174E  2F35               	goto	i1l1085
 16337  174F  3A19               	xorlw	25	; case 117
 16338  1750  1903               	skipnz
 16339  1751  2F37               	goto	i1l4320
 16340  1752  2F10               	goto	i1l4356
 16341  1753                     i1l1088:	
 16342                           
 16343                           ;doprnt.c: 1273: {
 16344                           ;doprnt.c: 1281: if(flag & 0x10)
 16345  1753  1E36               	btfss	sprintf@flag,4
 16346  1754  2F62               	goto	i1l4330
 16347                           
 16348                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
 16349  1755  083D               	movf	sprintf@ap,w
 16350  1756  0086               	movwf	6
 16351  1757  0187               	clrf	7
 16352  1758  3F40               	moviw [0]fsr1
 16353  1759  00B9               	movwf	sprintf@val
 16354  175A  3F41               	moviw [1]fsr1
 16355  175B  00BA               	movwf	sprintf@val+1
 16356  175C  3F42               	moviw [2]fsr1
 16357  175D  00BB               	movwf	sprintf@val+2
 16358  175E  3F43               	moviw [3]fsr1
 16359  175F  00BC               	movwf	sprintf@val+3
 16360  1760  3004               	movlw	4
 16361  1761  2F70               	goto	L17
 16362  1762                     i1l4330:	
 16363                           
 16364                           ;doprnt.c: 1283: else
 16365                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 16366  1762  083D               	movf	sprintf@ap,w
 16367  1763  0086               	movwf	6
 16368  1764  0187               	clrf	7
 16369  1765  3F40               	moviw [0]fsr1
 16370  1766  00B0               	movwf	??_sprintf
 16371  1767  3F41               	moviw [1]fsr1
 16372  1768  00B1               	movwf	??_sprintf+1
 16373  1769  0830               	movf	??_sprintf,w
 16374  176A  00B9               	movwf	sprintf@val
 16375  176B  0831               	movf	??_sprintf+1,w
 16376  176C  00BA               	movwf	sprintf@val+1
 16377  176D  01BB               	clrf	sprintf@val+2
 16378  176E  01BC               	clrf	sprintf@val+3
 16379  176F  3002               	movlw	2
 16380  1770                     L17:	
 16381  1770  00B0               	movwf	??_sprintf
 16382  1771  0830               	movf	??_sprintf,w
 16383  1772  07BD               	addwf	sprintf@ap,f
 16384                           
 16385                           ;doprnt.c: 1287: }
 16386                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 16387  1773  01BF               	clrf	sprintf@c
 16388  1774  0ABF               	incf	sprintf@c,f
 16389  1775  300A               	movlw	10
 16390  1776  063F               	xorwf	sprintf@c,w
 16391  1777  1903               	btfsc	3,2
 16392  1778  2FA6               	goto	i1l4346
 16393  1779                     i1l4340:	
 16394                           
 16395                           ;doprnt.c: 1306: if(val < dpowers[c])
 16396  1779  083F               	movf	sprintf@c,w
 16397  177A  00B0               	movwf	??_sprintf
 16398  177B  01B1               	clrf	??_sprintf+1
 16399  177C  35B0               	lslf	??_sprintf,f
 16400  177D  0DB1               	rlf	??_sprintf+1,f
 16401  177E  35B0               	lslf	??_sprintf,f
 16402  177F  0DB1               	rlf	??_sprintf+1,f
 16403  1780  30D3               	movlw	low (_dpowers| (0+32768))
 16404  1781  0730               	addwf	??_sprintf,w
 16405  1782  0084               	movwf	4
 16406  1783  3088               	movlw	high (_dpowers| (0+32768))
 16407  1784  3D31               	addwfc	??_sprintf+1,w
 16408  1785  0085               	movwf	5
 16409  1786  3F00               	moviw [0]fsr0
 16410  1787  00B2               	movwf	??_sprintf+2
 16411  1788  3F01               	moviw [1]fsr0
 16412  1789  00B3               	movwf	??_sprintf+3
 16413  178A  3F02               	moviw [2]fsr0
 16414  178B  00B4               	movwf	??_sprintf+4
 16415  178C  3F03               	moviw [3]fsr0
 16416  178D  00B5               	movwf	??_sprintf+5
 16417  178E  0835               	movf	??_sprintf+5,w
 16418  178F  023C               	subwf	sprintf@val+3,w
 16419  1790  1D03               	skipz
 16420  1791  2F9C               	goto	u480_25
 16421  1792  0834               	movf	??_sprintf+4,w
 16422  1793  023B               	subwf	sprintf@val+2,w
 16423  1794  1D03               	skipz
 16424  1795  2F9C               	goto	u480_25
 16425  1796  0833               	movf	??_sprintf+3,w
 16426  1797  023A               	subwf	sprintf@val+1,w
 16427  1798  1D03               	skipz
 16428  1799  2F9C               	goto	u480_25
 16429  179A  0832               	movf	??_sprintf+2,w
 16430  179B  0239               	subwf	sprintf@val,w
 16431  179C                     u480_25:	
 16432  179C  1C03               	btfss	3,0
 16433  179D  2FA6               	goto	i1l4346
 16434                           
 16435                           ;doprnt.c: 1307: break;
 16436  179E  3001               	movlw	1
 16437  179F  00B0               	movwf	??_sprintf
 16438  17A0  0830               	movf	??_sprintf,w
 16439  17A1  07BF               	addwf	sprintf@c,f
 16440  17A2  300A               	movlw	10
 16441  17A3  063F               	xorwf	sprintf@c,w
 16442  17A4  1D03               	btfss	3,2
 16443  17A5  2F79               	goto	i1l4340
 16444  17A6                     i1l4346:	
 16445                           
 16446                           ;doprnt.c: 1422: {
 16447                           ;doprnt.c: 1469: }
 16448                           ;doprnt.c: 1472: prec = c;
 16449  17A6  083F               	movf	sprintf@c,w
 16450  17A7  00B7               	movwf	sprintf@prec
 16451  17A8  01B8               	clrf	sprintf@prec+1
 16452  17A9  1BB7               	btfsc	sprintf@prec,7
 16453  17AA  03B8               	decf	sprintf@prec+1,f
 16454  17AB                     i1l4354:	
 16455                           ;doprnt.c: 1474: while(prec--) {
 16456                           
 16457  17AB  30FF               	movlw	255
 16458  17AC  07B7               	addwf	sprintf@prec,f
 16459  17AD  30FF               	movlw	255
 16460  17AE  3DB8               	addwfc	sprintf@prec+1,f
 16461  17AF  0A37               	incf	sprintf@prec,w
 16462  17B0  1903               	btfsc	3,2
 16463  17B1  0A38               	incf	sprintf@prec+1,w
 16464  17B2  1903               	btfsc	3,2
 16465  17B3  2F10               	goto	i1l4356
 16466                           
 16467                           ;doprnt.c: 1478: {
 16468                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 16469  17B4  3000               	movlw	0
 16470  17B5  00A3               	movwf	___llmod@divisor+3
 16471  17B6  3000               	movlw	0
 16472  17B7  00A2               	movwf	___llmod@divisor+2
 16473  17B8  3000               	movlw	0
 16474  17B9  00A1               	movwf	___llmod@divisor+1
 16475  17BA  300A               	movlw	10
 16476  17BB  00A0               	movwf	___llmod@divisor
 16477  17BC  0838               	movf	sprintf@prec+1,w
 16478  17BD  0085               	movwf	5
 16479  17BE  0837               	movf	sprintf@prec,w
 16480  17BF  0084               	movwf	4
 16481  17C0  3584               	lslf	4,f
 16482  17C1  0D85               	rlf	5,f
 16483  17C2  3584               	lslf	4,f
 16484  17C3  0D85               	rlf	5,f
 16485  17C4  30D3               	movlw	low (_dpowers| (0+32768))
 16486  17C5  0784               	addwf	4,f
 16487  17C6  3088               	movlw	high (_dpowers| (0+32768))
 16488  17C7  3D85               	addwfc	5,f
 16489  17C8  3F00               	moviw [0]fsr0
 16490  17C9  00F0               	movwf	i1___lldiv@divisor
 16491  17CA  3F01               	moviw [1]fsr0
 16492  17CB  00F1               	movwf	i1___lldiv@divisor+1
 16493  17CC  3F02               	moviw [2]fsr0
 16494  17CD  00F2               	movwf	i1___lldiv@divisor+2
 16495  17CE  3F03               	moviw [3]fsr0
 16496  17CF  00F3               	movwf	i1___lldiv@divisor+3
 16497  17D0  083C               	movf	sprintf@val+3,w
 16498  17D1  00F7               	movwf	i1___lldiv@dividend+3
 16499  17D2  083B               	movf	sprintf@val+2,w
 16500  17D3  00F6               	movwf	i1___lldiv@dividend+2
 16501  17D4  083A               	movf	sprintf@val+1,w
 16502  17D5  00F5               	movwf	i1___lldiv@dividend+1
 16503  17D6  0839               	movf	sprintf@val,w
 16504  17D7  00F4               	movwf	i1___lldiv@dividend
 16505  17D8  319E  2648  3197   	fcall	i1___lldiv
 16506  17DB  0873               	movf	?i1___lldiv+3,w
 16507  17DC  0020               	movlb	0	; select bank0
 16508  17DD  00A7               	movwf	___llmod@dividend+3
 16509  17DE  0872               	movf	?i1___lldiv+2,w
 16510  17DF  00A6               	movwf	___llmod@dividend+2
 16511  17E0  0871               	movf	?i1___lldiv+1,w
 16512  17E1  00A5               	movwf	___llmod@dividend+1
 16513  17E2  0870               	movf	?i1___lldiv,w
 16514  17E3  00A4               	movwf	___llmod@dividend
 16515  17E4  319D  251D  3197   	fcall	___llmod
 16516  17E7  0020               	movlb	0	; select bank0
 16517  17E8  0820               	movf	?___llmod,w
 16518  17E9  3E30               	addlw	48
 16519  17EA  00B0               	movwf	??_sprintf
 16520  17EB  0830               	movf	??_sprintf,w
 16521  17EC  00BF               	movwf	sprintf@c
 16522                           
 16523                           ;doprnt.c: 1523: }
 16524                           ;doprnt.c: 1524: ((*sp++ = (c)));
 16525  17ED  083F               	movf	sprintf@c,w
 16526  17EE  00B0               	movwf	??_sprintf
 16527  17EF  083E               	movf	sprintf@sp,w
 16528  17F0  0086               	movwf	6
 16529  17F1  3001               	movlw	1	; select bank2/3
 16530  17F2  0087               	movwf	7
 16531  17F3  0830               	movf	??_sprintf,w
 16532  17F4  0081               	movwf	1
 16533  17F5  3001               	movlw	1
 16534  17F6  00B0               	movwf	??_sprintf
 16535  17F7  0830               	movf	??_sprintf,w
 16536  17F8  07BE               	addwf	sprintf@sp,f
 16537  17F9  2FAB               	goto	i1l4354
 16538  17FA                     i1l4358:	
 16539                           ;doprnt.c: 1525: }
 16540                           ;doprnt.c: 1533: }
 16541                           ;doprnt.c: 1535: alldone:
 16542                           
 16543                           
 16544                           ;doprnt.c: 1538: *sp = 0;
 16545  17FA  083E               	movf	sprintf@sp,w
 16546  17FB  0086               	movwf	6
 16547  17FC  3001               	movlw	1	; select bank2/3
 16548  17FD  0087               	movwf	7
 16549  17FE  0181               	clrf	1
 16550  17FF  0008               	return
 16551  1800                     __end_of_sprintf:	
 16552                           ;doprnt.c: 1540: return 0;
 16553                           ;	Return value of _sprintf is never used
 16554                           
 16555                           
 16556                           	psect	text63
 16557  1E48                     __ptext63:	
 16558 ;; *************** function i1___lldiv *****************
 16559 ;; Defined at:
 16560 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
 16561 ;; Parameters:    Size  Location     Type
 16562 ;;  divisor         4    0[COMMON] unsigned long 
 16563 ;;  dividend        4    4[COMMON] unsigned long 
 16564 ;; Auto vars:     Size  Location     Type
 16565 ;;  __lldiv         4    9[COMMON] unsigned long 
 16566 ;;  __lldiv         1   13[COMMON] unsigned char 
 16567 ;; Return value:  Size  Location     Type
 16568 ;;                  4    0[COMMON] unsigned long 
 16569 ;; Registers used:
 16570 ;;		wreg, status,2, status,0
 16571 ;; Tracked objects:
 16572 ;;		On entry : 0/0
 16573 ;;		On exit  : 0/0
 16574 ;;		Unchanged: 0/0
 16575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16576 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16577 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16578 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16579 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16580 ;;Total ram usage:       14 bytes
 16581 ;; Hardware stack levels used:    1
 16582 ;; This function calls:
 16583 ;;		Nothing
 16584 ;; This function is called by:
 16585 ;;		_sprintf
 16586 ;;		i1_InitUART
 16587 ;; This function uses a non-reentrant model
 16588 ;;
 16589                           
 16590                           
 16591                           ;psect for function i1___lldiv
 16592  1E48                     i1___lldiv:	
 16593                           
 16594                           ;incstack = 0
 16595                           ; Regs used in i1___lldiv: [wreg+status,2+status,0]
 16596  1E48  3000               	movlw	0
 16597  1E49  00FC               	movwf	i1___lldiv@quotient+3
 16598  1E4A  3000               	movlw	0
 16599  1E4B  00FB               	movwf	i1___lldiv@quotient+2
 16600  1E4C  3000               	movlw	0
 16601  1E4D  00FA               	movwf	i1___lldiv@quotient+1
 16602  1E4E  3000               	movlw	0
 16603  1E4F  00F9               	movwf	i1___lldiv@quotient
 16604  1E50  0873               	movf	i1___lldiv@divisor+3,w
 16605  1E51  0472               	iorwf	i1___lldiv@divisor+2,w
 16606  1E52  0471               	iorwf	i1___lldiv@divisor+1,w
 16607  1E53  0470               	iorwf	i1___lldiv@divisor,w
 16608  1E54  1903               	skipnz
 16609  1E55  2E91               	goto	i1l4208
 16610  1E56  01FD               	clrf	i1___lldiv@counter
 16611  1E57  0AFD               	incf	i1___lldiv@counter,f
 16612  1E58                     i1l4194:	
 16613  1E58  1BF3               	btfsc	i1___lldiv@divisor+3,7
 16614  1E59  2E66               	goto	i1l4196
 16615  1E5A  3001               	movlw	1
 16616  1E5B                     u453_25:	
 16617  1E5B  35F0               	lslf	i1___lldiv@divisor,f
 16618  1E5C  0DF1               	rlf	i1___lldiv@divisor+1,f
 16619  1E5D  0DF2               	rlf	i1___lldiv@divisor+2,f
 16620  1E5E  0DF3               	rlf	i1___lldiv@divisor+3,f
 16621  1E5F  0B89               	decfsz	9,f
 16622  1E60  2E5B               	goto	u453_25
 16623  1E61  3001               	movlw	1
 16624  1E62  00F8               	movwf	??i1___lldiv
 16625  1E63  0878               	movf	??i1___lldiv,w
 16626  1E64  07FD               	addwf	i1___lldiv@counter,f
 16627  1E65  2E58               	goto	i1l4194
 16628  1E66                     i1l4196:	
 16629  1E66  3001               	movlw	1
 16630  1E67                     u455_25:	
 16631  1E67  35F9               	lslf	i1___lldiv@quotient,f
 16632  1E68  0DFA               	rlf	i1___lldiv@quotient+1,f
 16633  1E69  0DFB               	rlf	i1___lldiv@quotient+2,f
 16634  1E6A  0DFC               	rlf	i1___lldiv@quotient+3,f
 16635  1E6B  0B89               	decfsz	9,f
 16636  1E6C  2E67               	goto	u455_25
 16637  1E6D  0873               	movf	i1___lldiv@divisor+3,w
 16638  1E6E  0277               	subwf	i1___lldiv@dividend+3,w
 16639  1E6F  1D03               	skipz
 16640  1E70  2E7B               	goto	u456_25
 16641  1E71  0872               	movf	i1___lldiv@divisor+2,w
 16642  1E72  0276               	subwf	i1___lldiv@dividend+2,w
 16643  1E73  1D03               	skipz
 16644  1E74  2E7B               	goto	u456_25
 16645  1E75  0871               	movf	i1___lldiv@divisor+1,w
 16646  1E76  0275               	subwf	i1___lldiv@dividend+1,w
 16647  1E77  1D03               	skipz
 16648  1E78  2E7B               	goto	u456_25
 16649  1E79  0870               	movf	i1___lldiv@divisor,w
 16650  1E7A  0274               	subwf	i1___lldiv@dividend,w
 16651  1E7B                     u456_25:	
 16652  1E7B  1C03               	skipc
 16653  1E7C  2E86               	goto	i1l4204
 16654  1E7D  0870               	movf	i1___lldiv@divisor,w
 16655  1E7E  02F4               	subwf	i1___lldiv@dividend,f
 16656  1E7F  0871               	movf	i1___lldiv@divisor+1,w
 16657  1E80  3BF5               	subwfb	i1___lldiv@dividend+1,f
 16658  1E81  0872               	movf	i1___lldiv@divisor+2,w
 16659  1E82  3BF6               	subwfb	i1___lldiv@dividend+2,f
 16660  1E83  0873               	movf	i1___lldiv@divisor+3,w
 16661  1E84  3BF7               	subwfb	i1___lldiv@dividend+3,f
 16662  1E85  1479               	bsf	i1___lldiv@quotient,0
 16663  1E86                     i1l4204:	
 16664  1E86  3001               	movlw	1
 16665  1E87                     u457_25:	
 16666  1E87  36F3               	lsrf	i1___lldiv@divisor+3,f
 16667  1E88  0CF2               	rrf	i1___lldiv@divisor+2,f
 16668  1E89  0CF1               	rrf	i1___lldiv@divisor+1,f
 16669  1E8A  0CF0               	rrf	i1___lldiv@divisor,f
 16670  1E8B  0B89               	decfsz	9,f
 16671  1E8C  2E87               	goto	u457_25
 16672  1E8D  3001               	movlw	1
 16673  1E8E  02FD               	subwf	i1___lldiv@counter,f
 16674  1E8F  1D03               	btfss	3,2
 16675  1E90  2E66               	goto	i1l4196
 16676  1E91                     i1l4208:	
 16677  1E91  087C               	movf	i1___lldiv@quotient+3,w
 16678  1E92  00F3               	movwf	?i1___lldiv+3
 16679  1E93  087B               	movf	i1___lldiv@quotient+2,w
 16680  1E94  00F2               	movwf	?i1___lldiv+2
 16681  1E95  087A               	movf	i1___lldiv@quotient+1,w
 16682  1E96  00F1               	movwf	?i1___lldiv+1
 16683  1E97  0879               	movf	i1___lldiv@quotient,w
 16684  1E98  00F0               	movwf	?i1___lldiv
 16685  1E99  0008               	return
 16686  1E9A                     __end_ofi1___lldiv:	
 16687                           
 16688                           	psect	text64
 16689  1D1D                     __ptext64:	
 16690 ;; *************** function ___llmod *****************
 16691 ;; Defined at:
 16692 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
 16693 ;; Parameters:    Size  Location     Type
 16694 ;;  divisor         4    0[BANK0 ] unsigned long 
 16695 ;;  dividend        4    4[BANK0 ] unsigned long 
 16696 ;; Auto vars:     Size  Location     Type
 16697 ;;  counter         1    9[BANK0 ] unsigned char 
 16698 ;; Return value:  Size  Location     Type
 16699 ;;                  4    0[BANK0 ] unsigned long 
 16700 ;; Registers used:
 16701 ;;		wreg, status,2, status,0
 16702 ;; Tracked objects:
 16703 ;;		On entry : 0/0
 16704 ;;		On exit  : 0/0
 16705 ;;		Unchanged: 0/0
 16706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16707 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16708 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16709 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16710 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16711 ;;Total ram usage:       10 bytes
 16712 ;; Hardware stack levels used:    1
 16713 ;; This function calls:
 16714 ;;		Nothing
 16715 ;; This function is called by:
 16716 ;;		_sprintf
 16717 ;; This function uses a non-reentrant model
 16718 ;;
 16719                           
 16720                           
 16721                           ;psect for function ___llmod
 16722  1D1D                     ___llmod:	
 16723                           
 16724                           ;incstack = 0
 16725                           ; Regs used in ___llmod: [wreg+status,2+status,0]
 16726  1D1D  0020               	movlb	0	; select bank0
 16727  1D1E  0823               	movf	___llmod@divisor+3,w
 16728  1D1F  0422               	iorwf	___llmod@divisor+2,w
 16729  1D20  0421               	iorwf	___llmod@divisor+1,w
 16730  1D21  0420               	iorwf	___llmod@divisor,w
 16731  1D22  1903               	skipnz
 16732  1D23  2D57               	goto	i1l4094
 16733  1D24  01A9               	clrf	___llmod@counter
 16734  1D25  0AA9               	incf	___llmod@counter,f
 16735  1D26                     i1l4084:	
 16736  1D26  1BA3               	btfsc	___llmod@divisor+3,7
 16737  1D27  2D34               	goto	i1l4086
 16738  1D28  3001               	movlw	1
 16739  1D29                     u431_25:	
 16740  1D29  35A0               	lslf	___llmod@divisor,f
 16741  1D2A  0DA1               	rlf	___llmod@divisor+1,f
 16742  1D2B  0DA2               	rlf	___llmod@divisor+2,f
 16743  1D2C  0DA3               	rlf	___llmod@divisor+3,f
 16744  1D2D  0B89               	decfsz	9,f
 16745  1D2E  2D29               	goto	u431_25
 16746  1D2F  3001               	movlw	1
 16747  1D30  00A8               	movwf	??___llmod
 16748  1D31  0828               	movf	??___llmod,w
 16749  1D32  07A9               	addwf	___llmod@counter,f
 16750  1D33  2D26               	goto	i1l4084
 16751  1D34                     i1l4086:	
 16752  1D34  0823               	movf	___llmod@divisor+3,w
 16753  1D35  0227               	subwf	___llmod@dividend+3,w
 16754  1D36  1D03               	skipz
 16755  1D37  2D42               	goto	u433_25
 16756  1D38  0822               	movf	___llmod@divisor+2,w
 16757  1D39  0226               	subwf	___llmod@dividend+2,w
 16758  1D3A  1D03               	skipz
 16759  1D3B  2D42               	goto	u433_25
 16760  1D3C  0821               	movf	___llmod@divisor+1,w
 16761  1D3D  0225               	subwf	___llmod@dividend+1,w
 16762  1D3E  1D03               	skipz
 16763  1D3F  2D42               	goto	u433_25
 16764  1D40  0820               	movf	___llmod@divisor,w
 16765  1D41  0224               	subwf	___llmod@dividend,w
 16766  1D42                     u433_25:	
 16767  1D42  1C03               	skipc
 16768  1D43  2D4C               	goto	i1l4090
 16769  1D44  0820               	movf	___llmod@divisor,w
 16770  1D45  02A4               	subwf	___llmod@dividend,f
 16771  1D46  0821               	movf	___llmod@divisor+1,w
 16772  1D47  3BA5               	subwfb	___llmod@dividend+1,f
 16773  1D48  0822               	movf	___llmod@divisor+2,w
 16774  1D49  3BA6               	subwfb	___llmod@dividend+2,f
 16775  1D4A  0823               	movf	___llmod@divisor+3,w
 16776  1D4B  3BA7               	subwfb	___llmod@dividend+3,f
 16777  1D4C                     i1l4090:	
 16778  1D4C  3001               	movlw	1
 16779  1D4D                     u434_25:	
 16780  1D4D  36A3               	lsrf	___llmod@divisor+3,f
 16781  1D4E  0CA2               	rrf	___llmod@divisor+2,f
 16782  1D4F  0CA1               	rrf	___llmod@divisor+1,f
 16783  1D50  0CA0               	rrf	___llmod@divisor,f
 16784  1D51  0B89               	decfsz	9,f
 16785  1D52  2D4D               	goto	u434_25
 16786  1D53  3001               	movlw	1
 16787  1D54  02A9               	subwf	___llmod@counter,f
 16788  1D55  1D03               	btfss	3,2
 16789  1D56  2D34               	goto	i1l4086
 16790  1D57                     i1l4094:	
 16791  1D57  0827               	movf	___llmod@dividend+3,w
 16792  1D58  00A3               	movwf	?___llmod+3
 16793  1D59  0826               	movf	___llmod@dividend+2,w
 16794  1D5A  00A2               	movwf	?___llmod+2
 16795  1D5B  0825               	movf	___llmod@dividend+1,w
 16796  1D5C  00A1               	movwf	?___llmod+1
 16797  1D5D  0824               	movf	___llmod@dividend,w
 16798  1D5E  00A0               	movwf	?___llmod
 16799  1D5F  0008               	return
 16800  1D60                     __end_of___llmod:	
 16801                           
 16802                           	psect	text65
 16803  11BA                     __ptext65:	
 16804 ;; *************** function _WriteBaud *****************
 16805 ;; Defined at:
 16806 ;;		line 171 in file "FLASH.c"
 16807 ;; Parameters:    Size  Location     Type
 16808 ;;  row             2    0[BANK1 ] unsigned int 
 16809 ;;  Baud            4    2[BANK1 ] unsigned long 
 16810 ;;  Parity          1    6[BANK1 ] unsigned char 
 16811 ;; Auto vars:     Size  Location     Type
 16812 ;;  temp            4   74[BANK0 ] unsigned long 
 16813 ;; Return value:  Size  Location     Type
 16814 ;;		None               void
 16815 ;; Registers used:
 16816 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16817 ;; Tracked objects:
 16818 ;;		On entry : 0/0
 16819 ;;		On exit  : 0/0
 16820 ;;		Unchanged: 0/0
 16821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16822 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 16823 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16824 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
 16825 ;;      Totals:         0       4      15       0       0       0       0       0       0       0       0       0       
      +0       0
 16826 ;;Total ram usage:       19 bytes
 16827 ;; Hardware stack levels used:    1
 16828 ;; Hardware stack levels required when called:    3
 16829 ;; This function calls:
 16830 ;;		_WriteFlash_Sequential
 16831 ;; This function is called by:
 16832 ;;		_SetBaud
 16833 ;; This function uses a non-reentrant model
 16834 ;;
 16835                           
 16836                           
 16837                           ;psect for function _WriteBaud
 16838  11BA                     _WriteBaud:	
 16839                           
 16840                           ;FLASH.c: 173: unsigned long temp;
 16841                           ;FLASH.c: 174: temp = (Baud & 0x000FFFFF) + (((unsigned long) Parity & 0x7) << 20);
 16842                           
 16843                           ;incstack = 0
 16844                           ; Regs used in _WriteBaud: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16845  11BA  0021               	movlb	1	; select bank1
 16846  11BB  0826               	movf	WriteBaud@Parity^(0+128),w
 16847  11BC  3907               	andlw	7
 16848  11BD  00A7               	movwf	??_WriteBaud^(0+128)
 16849  11BE  01A8               	clrf	(??_WriteBaud^(0+128)+1)
 16850  11BF  01A9               	clrf	(??_WriteBaud^(0+128)+2)
 16851  11C0  01AA               	clrf	(??_WriteBaud^(0+128)+3)
 16852  11C1  3014               	movlw	20
 16853  11C2                     u475_25:	
 16854  11C2  35A7               	lslf	??_WriteBaud^(0+128),f
 16855  11C3  0DA8               	rlf	(??_WriteBaud^(0+128)+1),f
 16856  11C4  0DA9               	rlf	(??_WriteBaud^(0+128)+2),f
 16857  11C5  0DAA               	rlf	(??_WriteBaud^(0+128)+3),f
 16858  11C6  0B89               	decfsz	9,f
 16859  11C7  29C2               	goto	u475_25
 16860  11C8  30FF               	movlw	255
 16861  11C9  0522               	andwf	WriteBaud@Baud^(0+128),w
 16862  11CA  00AB               	movwf	(??_WriteBaud+4)^(0+128)
 16863  11CB  30FF               	movlw	255
 16864  11CC  0523               	andwf	(WriteBaud@Baud+1)^(0+128),w
 16865  11CD  00AC               	movwf	((??_WriteBaud+4)^(0+128)+1)
 16866  11CE  300F               	movlw	15
 16867  11CF  0524               	andwf	(WriteBaud@Baud+2)^(0+128),w
 16868  11D0  00AD               	movwf	((??_WriteBaud+4)^(0+128)+2)
 16869  11D1  3000               	movlw	0
 16870  11D2  0525               	andwf	(WriteBaud@Baud+3)^(0+128),w
 16871  11D3  00AE               	movwf	((??_WriteBaud+4)^(0+128)+3)
 16872  11D4  082B               	movf	(??_WriteBaud+4)^(0+128),w
 16873  11D5  07A7               	addwf	??_WriteBaud^(0+128),f
 16874  11D6  082C               	movf	(??_WriteBaud+5)^(0+128),w
 16875  11D7  3DA8               	addwfc	(??_WriteBaud^(0+128)+1),f
 16876  11D8  082D               	movf	(??_WriteBaud+6)^(0+128),w
 16877  11D9  3DA9               	addwfc	(??_WriteBaud^(0+128)+2),f
 16878  11DA  082E               	movf	(??_WriteBaud+7)^(0+128),w
 16879  11DB  3DAA               	addwfc	(??_WriteBaud^(0+128)+3),f
 16880  11DC  082A               	movf	(??_WriteBaud+3)^(0+128),w
 16881  11DD  0020               	movlb	0	; select bank0
 16882  11DE  00ED               	movwf	WriteBaud@temp+3
 16883  11DF  0021               	movlb	1	; select bank1
 16884  11E0  0829               	movf	(??_WriteBaud+2)^(0+128),w
 16885  11E1  0020               	movlb	0	; select bank0
 16886  11E2  00EC               	movwf	WriteBaud@temp+2
 16887  11E3  0021               	movlb	1	; select bank1
 16888  11E4  0828               	movf	(??_WriteBaud+1)^(0+128),w
 16889  11E5  0020               	movlb	0	; select bank0
 16890  11E6  00EB               	movwf	WriteBaud@temp+1
 16891  11E7  0021               	movlb	1	; select bank1
 16892  11E8  0827               	movf	??_WriteBaud^(0+128),w
 16893  11E9  0020               	movlb	0	; select bank0
 16894  11EA  00EA               	movwf	WriteBaud@temp
 16895                           
 16896                           ;FLASH.c: 175: MEM[1] = (unsigned int) (temp & 0x0003FFF);
 16897  11EB  30FF               	movlw	255
 16898  11EC  056A               	andwf	WriteBaud@temp,w
 16899  11ED  0021               	movlb	1	; select bank1
 16900  11EE  00E5               	movwf	(_MEM^(0+128)+2)
 16901  11EF  303F               	movlw	63
 16902  11F0  0020               	movlb	0	; select bank0
 16903  11F1  056B               	andwf	WriteBaud@temp+1,w
 16904  11F2  0021               	movlb	1	; select bank1
 16905  11F3  00E6               	movwf	((_MEM+1)^(0+128)+2)
 16906                           
 16907                           ;FLASH.c: 176: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
 16908  11F4  0020               	movlb	0	; select bank0
 16909  11F5  086A               	movf	WriteBaud@temp,w
 16910  11F6  0021               	movlb	1	; select bank1
 16911  11F7  00A7               	movwf	??_WriteBaud^(0+128)
 16912  11F8  0020               	movlb	0	; select bank0
 16913  11F9  086B               	movf	WriteBaud@temp+1,w
 16914  11FA  0021               	movlb	1	; select bank1
 16915  11FB  00A8               	movwf	(??_WriteBaud^(0+128)+1)
 16916  11FC  0020               	movlb	0	; select bank0
 16917  11FD  086C               	movf	WriteBaud@temp+2,w
 16918  11FE  0021               	movlb	1	; select bank1
 16919  11FF  00A9               	movwf	(??_WriteBaud^(0+128)+2)
 16920  1200  0020               	movlb	0	; select bank0
 16921  1201  086D               	movf	WriteBaud@temp+3,w
 16922  1202  0021               	movlb	1	; select bank1
 16923  1203  00AA               	movwf	(??_WriteBaud^(0+128)+3)
 16924  1204  300E               	movlw	14
 16925  1205                     u476_25:	
 16926  1205  36AA               	lsrf	(??_WriteBaud^(0+128)+3),f
 16927  1206  0CA9               	rrf	(??_WriteBaud^(0+128)+2),f
 16928  1207  0CA8               	rrf	(??_WriteBaud^(0+128)+1),f
 16929  1208  0CA7               	rrf	??_WriteBaud^(0+128),f
 16930  1209  0B89               	decfsz	9,f
 16931  120A  2A05               	goto	u476_25
 16932  120B  30FF               	movlw	255
 16933  120C  0527               	andwf	??_WriteBaud^(0+128),w
 16934  120D  00E3               	movwf	_MEM^(0+128)
 16935  120E  303F               	movlw	63
 16936  120F  0528               	andwf	(??_WriteBaud+1)^(0+128),w
 16937  1210  00E4               	movwf	(_MEM+1)^(0+128)
 16938                           
 16939                           ;FLASH.c: 177: WriteFlash_Sequential(row, MEM, 2);
 16940  1211  0821               	movf	(WriteBaud@row+1)^(0+128),w
 16941  1212  00FB               	movwf	WriteFlash_Sequential@row+1
 16942  1213  0820               	movf	WriteBaud@row^(0+128),w
 16943  1214  00FA               	movwf	WriteFlash_Sequential@row
 16944  1215  30E3               	movlw	(low (_MEM| 0))& (0+255)
 16945  1216  00A7               	movwf	??_WriteBaud^(0+128)
 16946  1217  0827               	movf	??_WriteBaud^(0+128),w
 16947  1218  00FC               	movwf	WriteFlash_Sequential@buffer
 16948  1219  3002               	movlw	2
 16949  121A  00A8               	movwf	(??_WriteBaud+1)^(0+128)
 16950  121B  0828               	movf	(??_WriteBaud+1)^(0+128),w
 16951  121C  00FD               	movwf	WriteFlash_Sequential@amount
 16952  121D  3193  237D         	fcall	_WriteFlash_Sequential
 16953  121F  0008               	return
 16954  1220                     __end_of_WriteBaud:	
 16955                           
 16956                           	psect	text66
 16957  137D                     __ptext66:	
 16958 ;; *************** function _WriteFlash_Sequential *****************
 16959 ;; Defined at:
 16960 ;;		line 112 in file "FLASH.c"
 16961 ;; Parameters:    Size  Location     Type
 16962 ;;  row             2   10[COMMON] unsigned int 
 16963 ;;  buffer          1   12[COMMON] PTR unsigned int 
 16964 ;;		 -> MEM(4), 
 16965 ;;  amount          1   13[COMMON] unsigned char 
 16966 ;; Auto vars:     Size  Location     Type
 16967 ;;  TempBufL       32   35[BANK0 ] unsigned char [32]
 16968 ;;  TempBufH       32    3[BANK0 ] unsigned char [32]
 16969 ;;  temp            2   70[BANK0 ] unsigned int 
 16970 ;;  i               1   73[BANK0 ] unsigned char 
 16971 ;;  spaces          1   72[BANK0 ] unsigned char 
 16972 ;;  amountTemp      1   69[BANK0 ] unsigned char 
 16973 ;;  tempL           1   68[BANK0 ] unsigned char 
 16974 ;;  tempH           1   67[BANK0 ] unsigned char 
 16975 ;; Return value:  Size  Location     Type
 16976 ;;		None               void
 16977 ;; Registers used:
 16978 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16979 ;; Tracked objects:
 16980 ;;		On entry : 0/0
 16981 ;;		On exit  : 0/0
 16982 ;;		Unchanged: 0/0
 16983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16984 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16985 ;;      Locals:         0      71       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16986 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16987 ;;      Totals:         4      74       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16988 ;;Total ram usage:       78 bytes
 16989 ;; Hardware stack levels used:    1
 16990 ;; Hardware stack levels required when called:    2
 16991 ;; This function calls:
 16992 ;;		_BlockErase
 16993 ;;		_UNLOCK
 16994 ;;		i1_ReadFlash_2Byte
 16995 ;;		i1_delayUS
 16996 ;; This function is called by:
 16997 ;;		_WriteBaud
 16998 ;; This function uses a non-reentrant model
 16999 ;;
 17000                           
 17001                           
 17002                           ;psect for function _WriteFlash_Sequential
 17003  137D                     _WriteFlash_Sequential:	
 17004                           
 17005                           ;FLASH.c: 114: unsigned char spaces = 32;
 17006                           
 17007                           ;incstack = 0
 17008                           ; Regs used in _WriteFlash_Sequential: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 17009  137D  3020               	movlw	32
 17010  137E  0020               	movlb	0	; select bank0
 17011  137F  00A0               	movwf	??_WriteFlash_Sequential
 17012  1380  0820               	movf	??_WriteFlash_Sequential,w
 17013  1381  00E8               	movwf	WriteFlash_Sequential@spaces
 17014                           
 17015                           ;FLASH.c: 115: unsigned char tempH;
 17016                           ;FLASH.c: 116: unsigned char tempL;
 17017                           ;FLASH.c: 117: unsigned char i;
 17018                           ;FLASH.c: 118: unsigned int temp;
 17019                           ;FLASH.c: 119: unsigned char amountTemp =0;
 17020  1382  01E5               	clrf	WriteFlash_Sequential@amountTemp
 17021                           
 17022                           ;FLASH.c: 120: unsigned char TempBufH[32];
 17023                           ;FLASH.c: 121: unsigned char TempBufL[32];
 17024                           ;FLASH.c: 123: for(i=0;i<spaces;i++)
 17025  1383  01E9               	clrf	WriteFlash_Sequential@i
 17026  1384                     i1l4040:	
 17027  1384  0868               	movf	WriteFlash_Sequential@spaces,w
 17028  1385  0269               	subwf	WriteFlash_Sequential@i,w
 17029  1386  1803               	btfsc	3,0
 17030  1387  2BD6               	goto	i1l4042
 17031                           
 17032                           ;FLASH.c: 124: {
 17033                           ;FLASH.c: 125: amountTemp++;
 17034  1388  3001               	movlw	1
 17035  1389  00A0               	movwf	??_WriteFlash_Sequential
 17036  138A  0820               	movf	??_WriteFlash_Sequential,w
 17037  138B  07E5               	addwf	WriteFlash_Sequential@amountTemp,f
 17038                           
 17039                           ;FLASH.c: 126: if(amountTemp <= amount)
 17040  138C  0865               	movf	WriteFlash_Sequential@amountTemp,w
 17041  138D  027D               	subwf	WriteFlash_Sequential@amount,w
 17042  138E  1C03               	skipc
 17043  138F  2BA8               	goto	i1l4028
 17044                           
 17045                           ;FLASH.c: 127: {
 17046                           ;FLASH.c: 128: tempH = (unsigned char)((*buffer & 0x3F00) >> 8);
 17047  1390  087C               	movf	WriteFlash_Sequential@buffer,w
 17048  1391  0086               	movwf	6
 17049  1392  0187               	clrf	7
 17050  1393  3F40               	moviw [0]fsr1
 17051  1394  00A0               	movwf	??_WriteFlash_Sequential
 17052  1395  3F41               	moviw [1]fsr1
 17053  1396  00A1               	movwf	??_WriteFlash_Sequential+1
 17054  1397  0821               	movf	??_WriteFlash_Sequential+1,w
 17055  1398  393F               	andlw	63
 17056  1399  00A2               	movwf	??_WriteFlash_Sequential+2
 17057  139A  0822               	movf	??_WriteFlash_Sequential+2,w
 17058  139B  00E3               	movwf	WriteFlash_Sequential@tempH
 17059                           
 17060                           ;FLASH.c: 129: tempL = (unsigned char)(*buffer & 0x00FF);
 17061  139C  087C               	movf	WriteFlash_Sequential@buffer,w
 17062  139D  0086               	movwf	6
 17063  139E  0187               	clrf	7
 17064  139F  0801               	movf	1,w
 17065  13A0  00A0               	movwf	??_WriteFlash_Sequential
 17066  13A1  0820               	movf	??_WriteFlash_Sequential,w
 17067  13A2  00E4               	movwf	WriteFlash_Sequential@tempL
 17068                           
 17069                           ;FLASH.c: 130: buffer++;
 17070  13A3  3002               	movlw	2
 17071  13A4  00A0               	movwf	??_WriteFlash_Sequential
 17072  13A5  0820               	movf	??_WriteFlash_Sequential,w
 17073  13A6  07FC               	addwf	WriteFlash_Sequential@buffer,f
 17074                           
 17075                           ;FLASH.c: 131: }
 17076  13A7  2BC1               	goto	i1l4034
 17077  13A8                     i1l4028:	
 17078                           
 17079                           ;FLASH.c: 132: else
 17080                           ;FLASH.c: 133: {
 17081                           ;FLASH.c: 135: temp = ReadFlash_2Byte(row, i);
 17082  13A8  087B               	movf	WriteFlash_Sequential@row+1,w
 17083  13A9  00F1               	movwf	i1ReadFlash_2Byte@row+1
 17084  13AA  087A               	movf	WriteFlash_Sequential@row,w
 17085  13AB  00F0               	movwf	i1ReadFlash_2Byte@row
 17086  13AC  0869               	movf	WriteFlash_Sequential@i,w
 17087  13AD  00A0               	movwf	??_WriteFlash_Sequential
 17088  13AE  0820               	movf	??_WriteFlash_Sequential,w
 17089  13AF  00F2               	movwf	i1ReadFlash_2Byte@column
 17090  13B0  319A  2219  3193   	fcall	i1_ReadFlash_2Byte
 17091  13B3  0871               	movf	?i1_ReadFlash_2Byte+1,w
 17092  13B4  0020               	movlb	0	; select bank0
 17093  13B5  00E7               	movwf	WriteFlash_Sequential@temp+1
 17094  13B6  0870               	movf	?i1_ReadFlash_2Byte,w
 17095  13B7  00E6               	movwf	WriteFlash_Sequential@temp
 17096                           
 17097                           ;FLASH.c: 136: tempH = (unsigned char)((temp & 0x3F00) >>8);
 17098  13B8  0867               	movf	WriteFlash_Sequential@temp+1,w
 17099  13B9  393F               	andlw	63
 17100  13BA  00A0               	movwf	??_WriteFlash_Sequential
 17101  13BB  0820               	movf	??_WriteFlash_Sequential,w
 17102  13BC  00E3               	movwf	WriteFlash_Sequential@tempH
 17103                           
 17104                           ;FLASH.c: 137: tempL = (unsigned char)(temp & 0x00FF);
 17105  13BD  0866               	movf	WriteFlash_Sequential@temp,w
 17106  13BE  00A0               	movwf	??_WriteFlash_Sequential
 17107  13BF  0820               	movf	??_WriteFlash_Sequential,w
 17108  13C0  00E4               	movwf	WriteFlash_Sequential@tempL
 17109  13C1                     i1l4034:	
 17110                           
 17111                           ;FLASH.c: 138: }
 17112                           ;FLASH.c: 139: TempBufH[i] = tempH;
 17113  13C1  0863               	movf	WriteFlash_Sequential@tempH,w
 17114  13C2  00A0               	movwf	??_WriteFlash_Sequential
 17115  13C3  0869               	movf	WriteFlash_Sequential@i,w
 17116  13C4  3E23               	addlw	(low (WriteFlash_Sequential@TempBufH| 0))& (0+255)
 17117  13C5  0086               	movwf	6
 17118  13C6  0187               	clrf	7
 17119  13C7  0820               	movf	??_WriteFlash_Sequential,w
 17120  13C8  0081               	movwf	1
 17121                           
 17122                           ;FLASH.c: 140: TempBufL[i] = tempL;
 17123  13C9  0864               	movf	WriteFlash_Sequential@tempL,w
 17124  13CA  00A0               	movwf	??_WriteFlash_Sequential
 17125  13CB  0869               	movf	WriteFlash_Sequential@i,w
 17126  13CC  3E43               	addlw	(low (WriteFlash_Sequential@TempBufL| 0))& (0+255)
 17127  13CD  0086               	movwf	6
 17128  13CE  0187               	clrf	7
 17129  13CF  0820               	movf	??_WriteFlash_Sequential,w
 17130  13D0  0081               	movwf	1
 17131  13D1  3001               	movlw	1
 17132  13D2  00A0               	movwf	??_WriteFlash_Sequential
 17133  13D3  0820               	movf	??_WriteFlash_Sequential,w
 17134  13D4  07E9               	addwf	WriteFlash_Sequential@i,f
 17135  13D5  2B84               	goto	i1l4040
 17136  13D6                     i1l4042:	
 17137                           
 17138                           ;FLASH.c: 141: }
 17139                           ;FLASH.c: 142: BlockErase(row);
 17140  13D6  087B               	movf	WriteFlash_Sequential@row+1,w
 17141  13D7  00F1               	movwf	BlockErase@row+1
 17142  13D8  087A               	movf	WriteFlash_Sequential@row,w
 17143  13D9  00F0               	movwf	BlockErase@row
 17144  13DA  319A  2241  3193   	fcall	_BlockErase
 17145                           
 17146                           ;FLASH.c: 143: delayUS(1000);
 17147  13DD  3000               	movlw	0
 17148  13DE  00F3               	movwf	i1delayUS@US+3
 17149  13DF  3000               	movlw	0
 17150  13E0  00F2               	movwf	i1delayUS@US+2
 17151  13E1  3003               	movlw	3
 17152  13E2  00F1               	movwf	i1delayUS@US+1
 17153  13E3  30E8               	movlw	232
 17154  13E4  00F0               	movwf	i1delayUS@US
 17155  13E5  319B  23B5  3193   	fcall	i1_delayUS
 17156                           
 17157                           ;FLASH.c: 144: INTCON &= ~0x80;
 17158  13E8  307F               	movlw	127
 17159  13E9  0020               	movlb	0	; select bank0
 17160  13EA  00A0               	movwf	??_WriteFlash_Sequential
 17161  13EB  0820               	movf	??_WriteFlash_Sequential,w
 17162  13EC  058B               	andwf	11,f	;volatile
 17163                           
 17164                           ;FLASH.c: 145: PMCON1 |= 0b00000100;
 17165  13ED  0023               	movlb	3	; select bank3
 17166  13EE  1515               	bsf	21,2	;volatile
 17167                           
 17168                           ;FLASH.c: 146: PMCON1 &= ~0b01000000;
 17169  13EF  30BF               	movlw	191
 17170  13F0  0020               	movlb	0	; select bank0
 17171  13F1  00A0               	movwf	??_WriteFlash_Sequential
 17172  13F2  0820               	movf	??_WriteFlash_Sequential,w
 17173  13F3  0023               	movlb	3	; select bank3
 17174  13F4  0595               	andwf	21,f	;volatile
 17175                           
 17176                           ;FLASH.c: 147: PMCON1 &= ~0b00100000;
 17177  13F5  30DF               	movlw	223
 17178  13F6  0020               	movlb	0	; select bank0
 17179  13F7  00A0               	movwf	??_WriteFlash_Sequential
 17180  13F8  0820               	movf	??_WriteFlash_Sequential,w
 17181  13F9  0023               	movlb	3	; select bank3
 17182  13FA  0595               	andwf	21,f	;volatile
 17183                           
 17184                           ;FLASH.c: 148: PMCON1 &= ~0b00010000;
 17185  13FB  30EF               	movlw	239
 17186  13FC  0020               	movlb	0	; select bank0
 17187  13FD  00A0               	movwf	??_WriteFlash_Sequential
 17188  13FE  0820               	movf	??_WriteFlash_Sequential,w
 17189  13FF  0023               	movlb	3	; select bank3
 17190  1400  0595               	andwf	21,f	;volatile
 17191                           
 17192                           ;FLASH.c: 149: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 17193  1401  087B               	movf	WriteFlash_Sequential@row+1,w
 17194  1402  0020               	movlb	0	; select bank0
 17195  1403  00A1               	movwf	??_WriteFlash_Sequential+1
 17196  1404  087A               	movf	WriteFlash_Sequential@row,w
 17197  1405  00A0               	movwf	??_WriteFlash_Sequential
 17198  1406  36A1               	lsrf	??_WriteFlash_Sequential+1,f
 17199  1407  0CA0               	rrf	??_WriteFlash_Sequential,f
 17200  1408  36A1               	lsrf	??_WriteFlash_Sequential+1,f
 17201  1409  0CA0               	rrf	??_WriteFlash_Sequential,f
 17202  140A  36A1               	lsrf	??_WriteFlash_Sequential+1,f
 17203  140B  0CA0               	rrf	??_WriteFlash_Sequential,f
 17204  140C  0820               	movf	??_WriteFlash_Sequential,w
 17205  140D  397F               	andlw	127
 17206  140E  0023               	movlb	3	; select bank3
 17207  140F  0092               	movwf	18	;volatile
 17208                           
 17209                           ;FLASH.c: 150: PMADRL = (unsigned char)((row & 0x007) << 5);
 17210  1410  087A               	movf	WriteFlash_Sequential@row,w
 17211  1411  3907               	andlw	7
 17212  1412  0020               	movlb	0	; select bank0
 17213  1413  00A0               	movwf	??_WriteFlash_Sequential
 17214  1414  3004               	movlw	4
 17215  1415                     u428_25:	
 17216  1415  35A0               	lslf	??_WriteFlash_Sequential,f
 17217  1416  3EFF               	addlw	-1
 17218  1417  1D03               	skipz
 17219  1418  2C15               	goto	u428_25
 17220  1419  3520               	lslf	??_WriteFlash_Sequential,w
 17221  141A  0023               	movlb	3	; select bank3
 17222  141B  0091               	movwf	17	;volatile
 17223                           
 17224                           ;FLASH.c: 152: for(i=0;i<spaces;i++)
 17225  141C  0020               	movlb	0	; select bank0
 17226  141D  01E9               	clrf	WriteFlash_Sequential@i
 17227  141E                     i1l4072:	
 17228  141E  0868               	movf	WriteFlash_Sequential@spaces,w
 17229  141F  0269               	subwf	WriteFlash_Sequential@i,w
 17230  1420  1803               	btfsc	3,0
 17231  1421  2C42               	goto	i1l4074
 17232                           
 17233                           ;FLASH.c: 153: {
 17234                           ;FLASH.c: 154: PMDATH = TempBufH[i];
 17235  1422  0869               	movf	WriteFlash_Sequential@i,w
 17236  1423  3E23               	addlw	(low (WriteFlash_Sequential@TempBufH| 0))& (0+255)
 17237  1424  0086               	movwf	6
 17238  1425  0187               	clrf	7
 17239  1426  0801               	movf	1,w
 17240  1427  0023               	movlb	3	; select bank3
 17241  1428  0094               	movwf	20	;volatile
 17242                           
 17243                           ;FLASH.c: 155: PMDATL = TempBufL[i];
 17244  1429  0020               	movlb	0	; select bank0
 17245  142A  0869               	movf	WriteFlash_Sequential@i,w
 17246  142B  3E43               	addlw	(low (WriteFlash_Sequential@TempBufL| 0))& (0+255)
 17247  142C  0086               	movwf	6
 17248  142D  0187               	clrf	7
 17249  142E  0801               	movf	1,w
 17250  142F  0023               	movlb	3	; select bank3
 17251  1430  0093               	movwf	19	;volatile
 17252                           
 17253                           ;FLASH.c: 156: __nop();
 17254  1431  0000               	nop
 17255                           
 17256                           ;FLASH.c: 157: __nop();
 17257  1432  0000               	nop
 17258                           
 17259                           ;FLASH.c: 158: UNLOCK();
 17260  1433  3198  20BA  3193   	fcall	_UNLOCK
 17261                           
 17262                           ;FLASH.c: 159: PMADRL++;
 17263  1436  3001               	movlw	1
 17264  1437  0020               	movlb	0	; select bank0
 17265  1438  00A0               	movwf	??_WriteFlash_Sequential
 17266  1439  0820               	movf	??_WriteFlash_Sequential,w
 17267  143A  0023               	movlb	3	; select bank3
 17268  143B  0791               	addwf	17,f	;volatile
 17269  143C  3001               	movlw	1
 17270  143D  0020               	movlb	0	; select bank0
 17271  143E  00A0               	movwf	??_WriteFlash_Sequential
 17272  143F  0820               	movf	??_WriteFlash_Sequential,w
 17273  1440  07E9               	addwf	WriteFlash_Sequential@i,f
 17274  1441  2C1E               	goto	i1l4072
 17275  1442                     i1l4074:	
 17276                           
 17277                           ;FLASH.c: 161: }
 17278                           ;FLASH.c: 162: PMCON1 &= ~0b00000100;
 17279  1442  30FB               	movlw	251
 17280  1443  00A0               	movwf	??_WriteFlash_Sequential
 17281  1444  0820               	movf	??_WriteFlash_Sequential,w
 17282  1445  0023               	movlb	3	; select bank3
 17283  1446  0595               	andwf	21,f	;volatile
 17284                           
 17285                           ;FLASH.c: 163: INTCON |= 0x80;
 17286  1447  178B               	bsf	11,7	;volatile
 17287  1448  0008               	return
 17288  1449                     __end_of_WriteFlash_Sequential:	
 17289                           
 17290                           	psect	text67
 17291  1BB5                     __ptext67:	
 17292 ;; *************** function i1_delayUS *****************
 17293 ;; Defined at:
 17294 ;;		line 51 in file "MISC.c"
 17295 ;; Parameters:    Size  Location     Type
 17296 ;;  US              4    0[COMMON] long 
 17297 ;; Auto vars:     Size  Location     Type
 17298 ;;  delayUS         4    5[COMMON] long 
 17299 ;;  delayUS         1    9[COMMON] unsigned char 
 17300 ;; Return value:  Size  Location     Type
 17301 ;;		None               void
 17302 ;; Registers used:
 17303 ;;		wreg, status,2, status,0
 17304 ;; Tracked objects:
 17305 ;;		On entry : 0/0
 17306 ;;		On exit  : 0/0
 17307 ;;		Unchanged: 0/0
 17308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17309 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17310 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17311 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17312 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17313 ;;Total ram usage:       10 bytes
 17314 ;; Hardware stack levels used:    1
 17315 ;; This function calls:
 17316 ;;		Nothing
 17317 ;; This function is called by:
 17318 ;;		_UART_send_break_timed
 17319 ;;		_SetBaud
 17320 ;;		_Process_PS2_ScanCode
 17321 ;;		_WriteFlash_Sequential
 17322 ;;		i1_UARTstringWAIT
 17323 ;;		i1_Send_PS2
 17324 ;; This function uses a non-reentrant model
 17325 ;;
 17326                           
 17327                           
 17328                           ;psect for function i1_delayUS
 17329  1BB5                     i1_delayUS:	
 17330                           
 17331                           ;MISC.c: 53: long i;
 17332                           ;MISC.c: 54: unsigned char j;
 17333                           ;MISC.c: 55: for(i=0;i<US;i+=6)
 17334                           
 17335                           ;incstack = 0
 17336                           ; Regs used in i1_delayUS: [wreg+status,2+status,0]
 17337  1BB5  3000               	movlw	0
 17338  1BB6  00F8               	movwf	i1delayUS@i+3
 17339  1BB7  3000               	movlw	0
 17340  1BB8  00F7               	movwf	i1delayUS@i+2
 17341  1BB9  3000               	movlw	0
 17342  1BBA  00F6               	movwf	i1delayUS@i+1
 17343  1BBB  3000               	movlw	0
 17344  1BBC  00F5               	movwf	i1delayUS@i
 17345  1BBD                     i1l282:	
 17346  1BBD  0878               	movf	i1delayUS@i+3,w
 17347  1BBE  3A80               	xorlw	128
 17348  1BBF  00F4               	movwf	??i1_delayUS
 17349  1BC0  0873               	movf	i1delayUS@US+3,w
 17350  1BC1  3A80               	xorlw	128
 17351  1BC2  0274               	subwf	??i1_delayUS,w
 17352  1BC3  1D03               	skipz
 17353  1BC4  2BCF               	goto	u399_23
 17354  1BC5  0872               	movf	i1delayUS@US+2,w
 17355  1BC6  0277               	subwf	i1delayUS@i+2,w
 17356  1BC7  1D03               	skipz
 17357  1BC8  2BCF               	goto	u399_23
 17358  1BC9  0871               	movf	i1delayUS@US+1,w
 17359  1BCA  0276               	subwf	i1delayUS@i+1,w
 17360  1BCB  1D03               	skipz
 17361  1BCC  2BCF               	goto	u399_23
 17362  1BCD  0870               	movf	i1delayUS@US,w
 17363  1BCE  0275               	subwf	i1delayUS@i,w
 17364  1BCF                     u399_23:	
 17365  1BCF  1803               	btfsc	3,0
 17366  1BD0  0008               	return
 17367                           
 17368                           ;MISC.c: 56: {
 17369                           ;MISC.c: 57: for(j=0;j<32;j++)
 17370  1BD1  01F9               	clrf	i1delayUS@j
 17371  1BD2  3020               	movlw	32
 17372  1BD3  0279               	subwf	i1delayUS@j,w
 17373  1BD4  1803               	btfsc	3,0
 17374  1BD5  2BDF               	goto	i1l3880
 17375  1BD6                     i1l284:	
 17376                           
 17377                           ;MISC.c: 58: {
 17378                           ;MISC.c: 59: __nop();
 17379  1BD6  0000               	nop
 17380  1BD7  3001               	movlw	1
 17381  1BD8  00F4               	movwf	??i1_delayUS
 17382  1BD9  0874               	movf	??i1_delayUS,w
 17383  1BDA  07F9               	addwf	i1delayUS@j,f
 17384  1BDB  3020               	movlw	32
 17385  1BDC  0279               	subwf	i1delayUS@j,w
 17386  1BDD  1C03               	skipc
 17387  1BDE  2BD6               	goto	i1l284
 17388  1BDF                     i1l3880:	
 17389  1BDF  3006               	movlw	6
 17390  1BE0  07F5               	addwf	i1delayUS@i,f
 17391  1BE1  3000               	movlw	0
 17392  1BE2  3DF6               	addwfc	i1delayUS@i+1,f
 17393  1BE3  3000               	movlw	0
 17394  1BE4  3DF7               	addwfc	i1delayUS@i+2,f
 17395  1BE5  3000               	movlw	0
 17396  1BE6  3DF8               	addwfc	i1delayUS@i+3,f
 17397  1BE7  2BBD               	goto	i1l282
 17398  1BE8                     __end_ofi1_delayUS:	
 17399                           
 17400                           	psect	text68
 17401  1A19                     __ptext68:	
 17402 ;; *************** function i1_ReadFlash_2Byte *****************
 17403 ;; Defined at:
 17404 ;;		line 43 in file "FLASH.c"
 17405 ;; Parameters:    Size  Location     Type
 17406 ;;  row             2    0[COMMON] unsigned int 
 17407 ;;  column          1    2[COMMON] unsigned char 
 17408 ;; Auto vars:     Size  Location     Type
 17409 ;;		None
 17410 ;; Return value:  Size  Location     Type
 17411 ;;                  2    0[COMMON] unsigned int 
 17412 ;; Registers used:
 17413 ;;		wreg, status,2, status,0
 17414 ;; Tracked objects:
 17415 ;;		On entry : 0/0
 17416 ;;		On exit  : 0/0
 17417 ;;		Unchanged: 0/0
 17418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17419 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17421 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17422 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17423 ;;Total ram usage:        5 bytes
 17424 ;; Hardware stack levels used:    1
 17425 ;; This function calls:
 17426 ;;		Nothing
 17427 ;; This function is called by:
 17428 ;;		_WriteFlash_Sequential
 17429 ;;		i1_ReadFlash_4Byte
 17430 ;; This function uses a non-reentrant model
 17431 ;;
 17432                           
 17433                           
 17434                           ;psect for function i1_ReadFlash_2Byte
 17435  1A19                     i1_ReadFlash_2Byte:	
 17436                           
 17437                           ;FLASH.c: 45: PMCON1 &= ~0b01000000;
 17438                           
 17439                           ;incstack = 0
 17440                           ; Regs used in i1_ReadFlash_2Byte: [wreg+status,2+status,0]
 17441  1A19  30BF               	movlw	191
 17442  1A1A  00F3               	movwf	??i1_ReadFlash_2Byte
 17443  1A1B  0873               	movf	??i1_ReadFlash_2Byte,w
 17444  1A1C  0023               	movlb	3	; select bank3
 17445  1A1D  0595               	andwf	21,f	;volatile
 17446                           
 17447                           ;FLASH.c: 46: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 17448  1A1E  0871               	movf	i1ReadFlash_2Byte@row+1,w
 17449  1A1F  00F4               	movwf	??i1_ReadFlash_2Byte+1
 17450  1A20  0870               	movf	i1ReadFlash_2Byte@row,w
 17451  1A21  00F3               	movwf	??i1_ReadFlash_2Byte
 17452  1A22  36F4               	lsrf	??i1_ReadFlash_2Byte+1,f
 17453  1A23  0CF3               	rrf	??i1_ReadFlash_2Byte,f
 17454  1A24  36F4               	lsrf	??i1_ReadFlash_2Byte+1,f
 17455  1A25  0CF3               	rrf	??i1_ReadFlash_2Byte,f
 17456  1A26  36F4               	lsrf	??i1_ReadFlash_2Byte+1,f
 17457  1A27  0CF3               	rrf	??i1_ReadFlash_2Byte,f
 17458  1A28  0873               	movf	??i1_ReadFlash_2Byte,w
 17459  1A29  397F               	andlw	127
 17460  1A2A  0092               	movwf	18	;volatile
 17461                           
 17462                           ;FLASH.c: 47: PMADRL = (unsigned char)(((row & 0x007) << 5) + column);
 17463  1A2B  0870               	movf	i1ReadFlash_2Byte@row,w
 17464  1A2C  3907               	andlw	7
 17465  1A2D  00F3               	movwf	??i1_ReadFlash_2Byte
 17466  1A2E  3004               	movlw	4
 17467  1A2F                     u407_25:	
 17468  1A2F  35F3               	lslf	??i1_ReadFlash_2Byte,f
 17469  1A30  3EFF               	addlw	-1
 17470  1A31  1D03               	skipz
 17471  1A32  2A2F               	goto	u407_25
 17472  1A33  3573               	lslf	??i1_ReadFlash_2Byte,w
 17473  1A34  0772               	addwf	i1ReadFlash_2Byte@column,w
 17474  1A35  0091               	movwf	17	;volatile
 17475                           
 17476                           ;FLASH.c: 48: PMCON1 |= 0b00000001;
 17477  1A36  1415               	bsf	21,0	;volatile
 17478  1A37                     i1l954:	
 17479                           ;FLASH.c: 49: while(PMCON1 & 0b00000001);
 17480                           
 17481  1A37  1815               	btfsc	21,0	;volatile
 17482  1A38  2A37               	goto	i1l954
 17483                           
 17484                           ;FLASH.c: 50: __nop();
 17485  1A39  0000               	nop
 17486                           
 17487                           ;FLASH.c: 51: __nop();
 17488  1A3A  0000               	nop
 17489                           
 17490                           ;FLASH.c: 52: return (PMDATL | (PMDATH << 8));
 17491  1A3B  0023               	movlb	3	; select bank3
 17492  1A3C  0814               	movf	20,w	;volatile
 17493  1A3D  00F1               	movwf	?i1_ReadFlash_2Byte+1
 17494  1A3E  0813               	movf	19,w	;volatile
 17495  1A3F  00F0               	movwf	?i1_ReadFlash_2Byte
 17496  1A40  0008               	return
 17497  1A41                     __end_ofi1_ReadFlash_2Byte:	
 17498                           
 17499                           	psect	text69
 17500  1A41                     __ptext69:	
 17501 ;; *************** function _BlockErase *****************
 17502 ;; Defined at:
 17503 ;;		line 91 in file "FLASH.c"
 17504 ;; Parameters:    Size  Location     Type
 17505 ;;  row             2    0[COMMON] unsigned int 
 17506 ;; Auto vars:     Size  Location     Type
 17507 ;;		None
 17508 ;; Return value:  Size  Location     Type
 17509 ;;		None               void
 17510 ;; Registers used:
 17511 ;;		wreg, status,2, status,0, pclath, cstack
 17512 ;; Tracked objects:
 17513 ;;		On entry : 0/0
 17514 ;;		On exit  : 0/0
 17515 ;;		Unchanged: 0/0
 17516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17517 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17519 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17520 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17521 ;;Total ram usage:        4 bytes
 17522 ;; Hardware stack levels used:    1
 17523 ;; Hardware stack levels required when called:    1
 17524 ;; This function calls:
 17525 ;;		_UNLOCK
 17526 ;; This function is called by:
 17527 ;;		_WriteFlash_Sequential
 17528 ;; This function uses a non-reentrant model
 17529 ;;
 17530                           
 17531                           
 17532                           ;psect for function _BlockErase
 17533  1A41                     _BlockErase:	
 17534                           
 17535                           ;FLASH.c: 93: INTCON &= ~0x80;
 17536                           
 17537                           ;incstack = 0
 17538                           ; Regs used in _BlockErase: [wreg+status,2+status,0+pclath+cstack]
 17539  1A41  307F               	movlw	127
 17540  1A42  00F2               	movwf	??_BlockErase
 17541  1A43  0872               	movf	??_BlockErase,w
 17542  1A44  058B               	andwf	11,f	;volatile
 17543                           
 17544                           ;FLASH.c: 94: PMCON1 &= ~0b01000000;
 17545  1A45  30BF               	movlw	191
 17546  1A46  00F2               	movwf	??_BlockErase
 17547  1A47  0872               	movf	??_BlockErase,w
 17548  1A48  0023               	movlb	3	; select bank3
 17549  1A49  0595               	andwf	21,f	;volatile
 17550                           
 17551                           ;FLASH.c: 95: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 17552  1A4A  0871               	movf	BlockErase@row+1,w
 17553  1A4B  00F3               	movwf	??_BlockErase+1
 17554  1A4C  0870               	movf	BlockErase@row,w
 17555  1A4D  00F2               	movwf	??_BlockErase
 17556  1A4E  36F3               	lsrf	??_BlockErase+1,f
 17557  1A4F  0CF2               	rrf	??_BlockErase,f
 17558  1A50  36F3               	lsrf	??_BlockErase+1,f
 17559  1A51  0CF2               	rrf	??_BlockErase,f
 17560  1A52  36F3               	lsrf	??_BlockErase+1,f
 17561  1A53  0CF2               	rrf	??_BlockErase,f
 17562  1A54  0872               	movf	??_BlockErase,w
 17563  1A55  397F               	andlw	127
 17564  1A56  0092               	movwf	18	;volatile
 17565                           
 17566                           ;FLASH.c: 96: PMADRL = (unsigned char)((row & 0x007) << 5);
 17567  1A57  0870               	movf	BlockErase@row,w
 17568  1A58  3907               	andlw	7
 17569  1A59  00F2               	movwf	??_BlockErase
 17570  1A5A  3004               	movlw	4
 17571  1A5B                     u396_25:	
 17572  1A5B  35F2               	lslf	??_BlockErase,f
 17573  1A5C  3EFF               	addlw	-1
 17574  1A5D  1D03               	skipz
 17575  1A5E  2A5B               	goto	u396_25
 17576  1A5F  3572               	lslf	??_BlockErase,w
 17577  1A60  0091               	movwf	17	;volatile
 17578                           
 17579                           ;FLASH.c: 97: PMCON1 |= 0b00010000;
 17580  1A61  1615               	bsf	21,4	;volatile
 17581                           
 17582                           ;FLASH.c: 98: PMCON1 |= 0b00000100;
 17583  1A62  1515               	bsf	21,2	;volatile
 17584                           
 17585                           ;FLASH.c: 99: UNLOCK();
 17586  1A63  3198  20BA         	fcall	_UNLOCK
 17587                           
 17588                           ;FLASH.c: 100: PMCON1 &= ~0b00000100;
 17589  1A65  30FB               	movlw	251
 17590  1A66  00F2               	movwf	??_BlockErase
 17591  1A67  0872               	movf	??_BlockErase,w
 17592  1A68  0023               	movlb	3	; select bank3
 17593  1A69  0595               	andwf	21,f	;volatile
 17594                           
 17595                           ;FLASH.c: 101: INTCON |= 0x80;
 17596  1A6A  178B               	bsf	11,7	;volatile
 17597  1A6B  0008               	return
 17598  1A6C                     __end_of_BlockErase:	
 17599                           
 17600                           	psect	text70
 17601  18BA                     __ptext70:	
 17602 ;; *************** function _UNLOCK *****************
 17603 ;; Defined at:
 17604 ;;		line 76 in file "FLASH.c"
 17605 ;; Parameters:    Size  Location     Type
 17606 ;;		None
 17607 ;; Auto vars:     Size  Location     Type
 17608 ;;		None
 17609 ;; Return value:  Size  Location     Type
 17610 ;;		None               void
 17611 ;; Registers used:
 17612 ;;		wreg
 17613 ;; Tracked objects:
 17614 ;;		On entry : 0/0
 17615 ;;		On exit  : 0/0
 17616 ;;		Unchanged: 0/0
 17617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17621 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17622 ;;Total ram usage:        0 bytes
 17623 ;; Hardware stack levels used:    1
 17624 ;; This function calls:
 17625 ;;		Nothing
 17626 ;; This function is called by:
 17627 ;;		_BlockErase
 17628 ;;		_WriteFlash_Sequential
 17629 ;; This function uses a non-reentrant model
 17630 ;;
 17631                           
 17632                           
 17633                           ;psect for function _UNLOCK
 17634  18BA                     _UNLOCK:	
 17635                           
 17636                           ;FLASH.c: 78: PMCON2 = 0x55;
 17637                           
 17638                           ;incstack = 0
 17639                           ; Regs used in _UNLOCK: [wreg]
 17640  18BA  3055               	movlw	85
 17641  18BB  0023               	movlb	3	; select bank3
 17642  18BC  0096               	movwf	22	;volsfr
 17643                           
 17644                           ;FLASH.c: 79: PMCON2 = 0xAA;
 17645  18BD  30AA               	movlw	170
 17646  18BE  0096               	movwf	22	;volsfr
 17647                           
 17648                           ;FLASH.c: 80: PMCON1 |= 0b00000010;
 17649  18BF  1495               	bsf	21,1	;volatile
 17650  18C0                     i1l963:	
 17651                           ;FLASH.c: 81: while(PMCON1 & 0b00000010);
 17652                           
 17653  18C0  1895               	btfsc	21,1	;volatile
 17654  18C1  28C0               	goto	i1l963
 17655                           
 17656                           ;FLASH.c: 82: __nop();
 17657  18C2  0000               	nop
 17658                           
 17659                           ;FLASH.c: 83: __nop();
 17660  18C3  0000               	nop
 17661  18C4  0008               	return
 17662  18C5                     __end_of_UNLOCK:	
 17663                           
 17664                           	psect	text71
 17665  18FE                     __ptext71:	
 17666 ;; *************** function _ISNUMBER *****************
 17667 ;; Defined at:
 17668 ;;		line 129 in file "MISC.c"
 17669 ;; Parameters:    Size  Location     Type
 17670 ;;  ascii           1    wreg     unsigned char 
 17671 ;; Auto vars:     Size  Location     Type
 17672 ;;  ascii           1    0[COMMON] unsigned char 
 17673 ;; Return value:  Size  Location     Type
 17674 ;;                  1    wreg      unsigned char 
 17675 ;; Registers used:
 17676 ;;		wreg
 17677 ;; Tracked objects:
 17678 ;;		On entry : 0/0
 17679 ;;		On exit  : 0/0
 17680 ;;		Unchanged: 0/0
 17681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17683 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17685 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17686 ;;Total ram usage:        1 bytes
 17687 ;; Hardware stack levels used:    1
 17688 ;; This function calls:
 17689 ;;		Nothing
 17690 ;; This function is called by:
 17691 ;;		_Process_PS2_ScanCode
 17692 ;; This function uses a non-reentrant model
 17693 ;;
 17694                           
 17695                           
 17696                           ;psect for function _ISNUMBER
 17697  18FE                     _ISNUMBER:	
 17698                           
 17699                           ;incstack = 0
 17700                           ; Regs used in _ISNUMBER: [wreg]
 17701                           ;ISNUMBER@ascii stored from wreg
 17702  18FE  00F0               	movwf	ISNUMBER@ascii
 17703                           
 17704                           ;MISC.c: 131: if(ascii >= '0' && ascii <='9')
 17705  18FF  3030               	movlw	48
 17706  1900  0270               	subwf	ISNUMBER@ascii,w
 17707  1901  1C03               	skipc
 17708  1902  2909               	goto	i1l4826
 17709  1903  303A               	movlw	58
 17710  1904  0270               	subwf	ISNUMBER@ascii,w
 17711  1905  1803               	skipnc
 17712  1906  2909               	goto	i1l4826
 17713                           
 17714                           ;MISC.c: 132: {
 17715                           ;MISC.c: 133: return 1;
 17716  1907  3001               	movlw	1
 17717                           
 17718                           ;MISC.c: 134: }
 17719  1908  0008               	return
 17720  1909                     i1l4826:	
 17721                           
 17722                           ;MISC.c: 135: else
 17723                           ;MISC.c: 136: {
 17724                           ;MISC.c: 137: return 0;
 17725  1909  3000               	movlw	0
 17726  190A  0008               	return
 17727  190B                     __end_of_ISNUMBER:	
 17728                           
 17729                           	psect	text72
 17730  195D                     __ptext72:	
 17731 ;; *************** function _Decode_Scan_Code_Shift *****************
 17732 ;; Defined at:
 17733 ;;		line 801 in file "PS_2.c"
 17734 ;; Parameters:    Size  Location     Type
 17735 ;;  Code            1    wreg     unsigned char 
 17736 ;; Auto vars:     Size  Location     Type
 17737 ;;  Code            1    0[COMMON] unsigned char 
 17738 ;; Return value:  Size  Location     Type
 17739 ;;                  1    wreg      unsigned char 
 17740 ;; Registers used:
 17741 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 17742 ;; Tracked objects:
 17743 ;;		On entry : 0/0
 17744 ;;		On exit  : 0/0
 17745 ;;		Unchanged: 0/0
 17746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17748 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17750 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17751 ;;Total ram usage:        1 bytes
 17752 ;; Hardware stack levels used:    1
 17753 ;; This function calls:
 17754 ;;		Nothing
 17755 ;; This function is called by:
 17756 ;;		_Process_PS2_ScanCode
 17757 ;; This function uses a non-reentrant model
 17758 ;;
 17759                           
 17760                           
 17761                           ;psect for function _Decode_Scan_Code_Shift
 17762  195D                     _Decode_Scan_Code_Shift:	
 17763                           
 17764                           ;incstack = 0
 17765                           ; Regs used in _Decode_Scan_Code_Shift: [wreg-fsr0h+status,2+status,0+pclath]
 17766                           ;Decode_Scan_Code_Shift@Code stored from wreg
 17767  195D  00F0               	movwf	Decode_Scan_Code_Shift@Code
 17768                           
 17769                           ;PS_2.c: 803: Code -= 13;
 17770  195E  300D               	movlw	13
 17771  195F  02F0               	subwf	Decode_Scan_Code_Shift@Code,f
 17772                           
 17773                           ;PS_2.c: 804: if(Code <=112)
 17774  1960  3071               	movlw	113
 17775  1961  0270               	subwf	Decode_Scan_Code_Shift@Code,w
 17776  1962  1803               	skipnc
 17777  1963  296D               	goto	i1l4990
 17778                           
 17779                           ;PS_2.c: 805: {
 17780                           ;PS_2.c: 806: return ScanCodeSHIFT[Code];
 17781  1964  0870               	movf	Decode_Scan_Code_Shift@Code,w
 17782  1965  3EF5               	addlw	low (_ScanCodeSHIFT| (0+32768))
 17783  1966  0084               	movwf	4
 17784  1967  3087               	movlw	high (_ScanCodeSHIFT| (0+32768))
 17785  1968  1803               	skipnc
 17786  1969  3E01               	addlw	1
 17787  196A  0085               	movwf	5
 17788  196B  0800               	movf	0,w	;code access
 17789                           
 17790                           ;PS_2.c: 807: }
 17791  196C  0008               	return
 17792  196D                     i1l4990:	
 17793                           
 17794                           ;PS_2.c: 808: else
 17795                           ;PS_2.c: 809: {
 17796                           ;PS_2.c: 810: return 0;
 17797  196D  3000               	movlw	0
 17798  196E  0008               	return
 17799  196F                     __end_of_Decode_Scan_Code_Shift:	
 17800                           
 17801                           	psect	text73
 17802  194B                     __ptext73:	
 17803 ;; *************** function _Decode_Scan_Code_FunctionE0 *****************
 17804 ;; Defined at:
 17805 ;;		line 820 in file "PS_2.c"
 17806 ;; Parameters:    Size  Location     Type
 17807 ;;  Code            1    wreg     unsigned char 
 17808 ;; Auto vars:     Size  Location     Type
 17809 ;;  Code            1    0[COMMON] unsigned char 
 17810 ;; Return value:  Size  Location     Type
 17811 ;;                  1    wreg      unsigned char 
 17812 ;; Registers used:
 17813 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 17814 ;; Tracked objects:
 17815 ;;		On entry : 0/0
 17816 ;;		On exit  : 0/0
 17817 ;;		Unchanged: 0/0
 17818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17820 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17822 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17823 ;;Total ram usage:        1 bytes
 17824 ;; Hardware stack levels used:    1
 17825 ;; This function calls:
 17826 ;;		Nothing
 17827 ;; This function is called by:
 17828 ;;		_Process_PS2_ScanCode
 17829 ;; This function uses a non-reentrant model
 17830 ;;
 17831                           
 17832                           
 17833                           ;psect for function _Decode_Scan_Code_FunctionE0
 17834  194B                     _Decode_Scan_Code_FunctionE0:	
 17835                           
 17836                           ;incstack = 0
 17837                           ; Regs used in _Decode_Scan_Code_FunctionE0: [wreg-fsr0h+status,2+status,0+pclath]
 17838                           ;Decode_Scan_Code_FunctionE0@Code stored from wreg
 17839  194B  00F0               	movwf	Decode_Scan_Code_FunctionE0@Code
 17840                           
 17841                           ;PS_2.c: 822: Code -= 17;
 17842  194C  3011               	movlw	17
 17843  194D  02F0               	subwf	Decode_Scan_Code_FunctionE0@Code,f
 17844                           
 17845                           ;PS_2.c: 823: if(Code <=108)
 17846  194E  306D               	movlw	109
 17847  194F  0270               	subwf	Decode_Scan_Code_FunctionE0@Code,w
 17848  1950  1803               	skipnc
 17849  1951  295B               	goto	i1l4978
 17850                           
 17851                           ;PS_2.c: 824: {
 17852                           ;PS_2.c: 825: return ScanCodeFunctionE0[Code];
 17853  1952  0870               	movf	Decode_Scan_Code_FunctionE0@Code,w
 17854  1953  3E66               	addlw	low (_ScanCodeFunctionE0| (0+32768))
 17855  1954  0084               	movwf	4
 17856  1955  3088               	movlw	high (_ScanCodeFunctionE0| (0+32768))
 17857  1956  1803               	skipnc
 17858  1957  3E01               	addlw	1
 17859  1958  0085               	movwf	5
 17860  1959  0800               	movf	0,w	;code access
 17861                           
 17862                           ;PS_2.c: 826: }
 17863  195A  0008               	return
 17864  195B                     i1l4978:	
 17865                           
 17866                           ;PS_2.c: 827: else
 17867                           ;PS_2.c: 828: {
 17868                           ;PS_2.c: 829: return 0;
 17869  195B  3000               	movlw	0
 17870  195C  0008               	return
 17871  195D                     __end_of_Decode_Scan_Code_FunctionE0:	
 17872                           
 17873                           	psect	text74
 17874  0A41                     __ptext74:	
 17875 ;; *************** function _Decode_Scan_Code_Function *****************
 17876 ;; Defined at:
 17877 ;;		line 839 in file "PS_2.c"
 17878 ;; Parameters:    Size  Location     Type
 17879 ;;  Code            1    wreg     unsigned char 
 17880 ;; Auto vars:     Size  Location     Type
 17881 ;;  Code            1    0[COMMON] unsigned char 
 17882 ;; Return value:  Size  Location     Type
 17883 ;;                  1    wreg      unsigned char 
 17884 ;; Registers used:
 17885 ;;		wreg, fsr0l, fsr0h, pclath
 17886 ;; Tracked objects:
 17887 ;;		On entry : 0/0
 17888 ;;		On exit  : 0/0
 17889 ;;		Unchanged: 0/0
 17890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17892 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17894 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17895 ;;Total ram usage:        1 bytes
 17896 ;; Hardware stack levels used:    1
 17897 ;; This function calls:
 17898 ;;		Nothing
 17899 ;; This function is called by:
 17900 ;;		_Process_PS2_ScanCode
 17901 ;; This function uses a non-reentrant model
 17902 ;;
 17903                           
 17904                           
 17905                           ;psect for function _Decode_Scan_Code_Function
 17906  0A41                     _Decode_Scan_Code_Function:	
 17907                           
 17908                           ;incstack = 0
 17909                           ; Regs used in _Decode_Scan_Code_Function: [wreg-fsr0h+pclath]
 17910                           ;Decode_Scan_Code_Function@Code stored from wreg
 17911  0A41  00F0               	movwf	Decode_Scan_Code_Function@Code
 17912                           
 17913                           ;PS_2.c: 841: if(Code <=131)
 17914  0A42  3084               	movlw	132
 17915  0A43  0270               	subwf	Decode_Scan_Code_Function@Code,w
 17916  0A44  1803               	skipnc
 17917  0A45  2A4F               	goto	i1l5014
 17918                           
 17919                           ;PS_2.c: 842: {
 17920                           ;PS_2.c: 843: return ScanCodeFunctionNoE0[Code];
 17921  0A46  0870               	movf	Decode_Scan_Code_Function@Code,w
 17922  0A47  3E00               	addlw	low (_ScanCodeFunctionNoE0| (0+32768))
 17923  0A48  0084               	movwf	4
 17924  0A49  3087               	movlw	high (_ScanCodeFunctionNoE0| (0+32768))
 17925  0A4A  1803               	skipnc
 17926  0A4B  3E01               	addlw	1
 17927  0A4C  0085               	movwf	5
 17928  0A4D  0800               	movf	0,w	;code access
 17929                           
 17930                           ;PS_2.c: 844: }
 17931  0A4E  0008               	return
 17932  0A4F                     i1l5014:	
 17933                           
 17934                           ;PS_2.c: 845: else
 17935                           ;PS_2.c: 846: {
 17936                           ;PS_2.c: 847: return 0;
 17937  0A4F  3000               	movlw	0
 17938  0A50  0008               	return
 17939  0A51                     __end_of_Decode_Scan_Code_Function:	
 17940                           
 17941                           	psect	text75
 17942  1939                     __ptext75:	
 17943 ;; *************** function _Decode_Scan_Code *****************
 17944 ;; Defined at:
 17945 ;;		line 782 in file "PS_2.c"
 17946 ;; Parameters:    Size  Location     Type
 17947 ;;  Code            1    wreg     unsigned char 
 17948 ;; Auto vars:     Size  Location     Type
 17949 ;;  Code            1    0[COMMON] unsigned char 
 17950 ;; Return value:  Size  Location     Type
 17951 ;;                  1    wreg      unsigned char 
 17952 ;; Registers used:
 17953 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 17954 ;; Tracked objects:
 17955 ;;		On entry : 0/0
 17956 ;;		On exit  : 0/0
 17957 ;;		Unchanged: 0/0
 17958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17960 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17962 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17963 ;;Total ram usage:        1 bytes
 17964 ;; Hardware stack levels used:    1
 17965 ;; This function calls:
 17966 ;;		Nothing
 17967 ;; This function is called by:
 17968 ;;		_Process_PS2_ScanCode
 17969 ;; This function uses a non-reentrant model
 17970 ;;
 17971                           
 17972                           
 17973                           ;psect for function _Decode_Scan_Code
 17974  1939                     _Decode_Scan_Code:	
 17975                           
 17976                           ;incstack = 0
 17977                           ; Regs used in _Decode_Scan_Code: [wreg-fsr0h+status,2+status,0+pclath]
 17978                           ;Decode_Scan_Code@Code stored from wreg
 17979  1939  00F0               	movwf	Decode_Scan_Code@Code
 17980                           
 17981                           ;PS_2.c: 784: Code -= 13;
 17982  193A  300D               	movlw	13
 17983  193B  02F0               	subwf	Decode_Scan_Code@Code,f
 17984                           
 17985                           ;PS_2.c: 785: if(Code <=112)
 17986  193C  3071               	movlw	113
 17987  193D  0270               	subwf	Decode_Scan_Code@Code,w
 17988  193E  1803               	skipnc
 17989  193F  2949               	goto	i1l5002
 17990                           
 17991                           ;PS_2.c: 786: {
 17992                           ;PS_2.c: 787: return ScanCode[Code];
 17993  1940  0870               	movf	Decode_Scan_Code@Code,w
 17994  1941  3E84               	addlw	low (_ScanCode| (0+32768))
 17995  1942  0084               	movwf	4
 17996  1943  3087               	movlw	high (_ScanCode| (0+32768))
 17997  1944  1803               	skipnc
 17998  1945  3E01               	addlw	1
 17999  1946  0085               	movwf	5
 18000  1947  0800               	movf	0,w	;code access
 18001                           
 18002                           ;PS_2.c: 788: }
 18003  1948  0008               	return
 18004  1949                     i1l5002:	
 18005                           
 18006                           ;PS_2.c: 789: else
 18007                           ;PS_2.c: 790: {
 18008                           ;PS_2.c: 791: return 0;
 18009  1949  3000               	movlw	0
 18010  194A  0008               	return
 18011  194B                     __end_of_Decode_Scan_Code:	
 18012                           
 18013                           	psect	text76
 18014  1C59                     __ptext76:	
 18015 ;; *************** function _BufferShiftBack *****************
 18016 ;; Defined at:
 18017 ;;		line 179 in file "MISC.c"
 18018 ;; Parameters:    Size  Location     Type
 18019 ;;  buffer          1    wreg     PTR unsigned char 
 18020 ;;		 -> PS_2_ScanCodes(12), 
 18021 ;;  shift           1    0[COMMON] unsigned char 
 18022 ;;  size            1    1[COMMON] unsigned char 
 18023 ;; Auto vars:     Size  Location     Type
 18024 ;;  buffer          1    7[COMMON] PTR unsigned char 
 18025 ;;		 -> PS_2_ScanCodes(12), 
 18026 ;;  i               1    6[COMMON] unsigned char 
 18027 ;; Return value:  Size  Location     Type
 18028 ;;                  1    wreg      unsigned char 
 18029 ;; Registers used:
 18030 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18031 ;; Tracked objects:
 18032 ;;		On entry : 0/0
 18033 ;;		On exit  : 0/0
 18034 ;;		Unchanged: 0/0
 18035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18036 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18037 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18038 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18039 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18040 ;;Total ram usage:        8 bytes
 18041 ;; Hardware stack levels used:    1
 18042 ;; This function calls:
 18043 ;;		Nothing
 18044 ;; This function is called by:
 18045 ;;		_Process_PS2_ScanCode
 18046 ;; This function uses a non-reentrant model
 18047 ;;
 18048                           
 18049                           
 18050                           ;psect for function _BufferShiftBack
 18051  1C59                     _BufferShiftBack:	
 18052                           
 18053                           ;incstack = 0
 18054                           ; Regs used in _BufferShiftBack: [wreg+fsr1l+fsr1h+status,2+status,0]
 18055                           ;BufferShiftBack@buffer stored from wreg
 18056  1C59  00F7               	movwf	BufferShiftBack@buffer
 18057                           
 18058                           ;MISC.c: 181: unsigned char i=0;
 18059  1C5A  01F6               	clrf	BufferShiftBack@i
 18060                           
 18061                           ;MISC.c: 182: if(shift > size)
 18062  1C5B  0870               	movf	BufferShiftBack@shift,w
 18063  1C5C  0271               	subwf	BufferShiftBack@size,w
 18064  1C5D  1C03               	btfss	3,0
 18065  1C5E  0008               	return
 18066                           
 18067                           ;MISC.c: 185: }
 18068                           ;MISC.c: 186: for(i = 0; i < size; i++)
 18069                           
 18070                           ;MISC.c: 183: {
 18071                           ;MISC.c: 184: return 0;
 18072                           ;	Return value of _BufferShiftBack is never used
 18073  1C5F  01F6               	clrf	BufferShiftBack@i
 18074  1C60                     i1l4854:	
 18075  1C60  0871               	movf	BufferShiftBack@size,w
 18076  1C61  0276               	subwf	BufferShiftBack@i,w
 18077  1C62  1803               	btfsc	3,0
 18078  1C63  0008               	return
 18079                           
 18080                           ;MISC.c: 187: {
 18081                           ;MISC.c: 188: if(i < (size - shift))
 18082  1C64  0870               	movf	BufferShiftBack@shift,w
 18083  1C65  00F2               	movwf	??_BufferShiftBack
 18084  1C66  01F3               	clrf	??_BufferShiftBack+1
 18085  1C67  09F2               	comf	??_BufferShiftBack,f
 18086  1C68  09F3               	comf	??_BufferShiftBack+1,f
 18087  1C69  0AF2               	incf	??_BufferShiftBack,f
 18088  1C6A  1903               	skipnz
 18089  1C6B  0AF3               	incf	??_BufferShiftBack+1,f
 18090  1C6C  0871               	movf	BufferShiftBack@size,w
 18091  1C6D  0772               	addwf	??_BufferShiftBack,w
 18092  1C6E  00F4               	movwf	??_BufferShiftBack+2
 18093  1C6F  0873               	movf	??_BufferShiftBack+1,w
 18094  1C70  1803               	skipnc
 18095  1C71  0A73               	incf	??_BufferShiftBack+1,w
 18096  1C72  00F5               	movwf	??_BufferShiftBack+3
 18097  1C73  0875               	movf	??_BufferShiftBack+3,w
 18098  1C74  3A80               	xorlw	128
 18099  1C75  3C80               	sublw	128
 18100  1C76  1D03               	skipz
 18101  1C77  2C7A               	goto	u555_25
 18102  1C78  0874               	movf	??_BufferShiftBack+2,w
 18103  1C79  0276               	subwf	BufferShiftBack@i,w
 18104  1C7A                     u555_25:	
 18105  1C7A  1803               	skipnc
 18106  1C7B  2C8E               	goto	i1l4850
 18107                           
 18108                           ;MISC.c: 189: {
 18109                           ;MISC.c: 190: buffer[i] = buffer[i+shift];
 18110  1C7C  0876               	movf	BufferShiftBack@i,w
 18111  1C7D  0770               	addwf	BufferShiftBack@shift,w
 18112  1C7E  0777               	addwf	BufferShiftBack@buffer,w
 18113  1C7F  00F2               	movwf	??_BufferShiftBack
 18114  1C80  0872               	movf	??_BufferShiftBack,w
 18115  1C81  0086               	movwf	6
 18116  1C82  0187               	clrf	7
 18117  1C83  0801               	movf	1,w
 18118  1C84  00F3               	movwf	??_BufferShiftBack+1
 18119  1C85  0876               	movf	BufferShiftBack@i,w
 18120  1C86  0777               	addwf	BufferShiftBack@buffer,w
 18121  1C87  00F4               	movwf	??_BufferShiftBack+2
 18122  1C88  0874               	movf	??_BufferShiftBack+2,w
 18123  1C89  0086               	movwf	6
 18124  1C8A  0187               	clrf	7
 18125  1C8B  0873               	movf	??_BufferShiftBack+1,w
 18126  1C8C  0081               	movwf	1
 18127                           
 18128                           ;MISC.c: 191: }
 18129  1C8D  2C95               	goto	i1l4852
 18130  1C8E                     i1l4850:	
 18131                           
 18132                           ;MISC.c: 192: else
 18133                           ;MISC.c: 193: {
 18134                           ;MISC.c: 194: buffer[i] = 0;
 18135  1C8E  0876               	movf	BufferShiftBack@i,w
 18136  1C8F  0777               	addwf	BufferShiftBack@buffer,w
 18137  1C90  00F2               	movwf	??_BufferShiftBack
 18138  1C91  0872               	movf	??_BufferShiftBack,w
 18139  1C92  0086               	movwf	6
 18140  1C93  0187               	clrf	7
 18141  1C94  0181               	clrf	1
 18142  1C95                     i1l4852:	
 18143  1C95  3001               	movlw	1
 18144  1C96  00F2               	movwf	??_BufferShiftBack
 18145  1C97  0872               	movf	??_BufferShiftBack,w
 18146  1C98  07F6               	addwf	BufferShiftBack@i,f
 18147  1C99  2C60               	goto	i1l4854
 18148  1C9A                     __end_of_BufferShiftBack:	
 18149                           ;MISC.c: 195: }
 18150                           ;MISC.c: 196: }
 18151                           ;MISC.c: 197: return 1;
 18152                           ;	Return value of _BufferShiftBack is never used
 18153                           
 18154                           
 18155                           	psect	text77
 18156  1DFA                     __ptext77:	
 18157 ;; *************** function _PS2RawToScan *****************
 18158 ;; Defined at:
 18159 ;;		line 1115 in file "PS_2.c"
 18160 ;; Parameters:    Size  Location     Type
 18161 ;;  Raw             2    8[COMMON] unsigned int 
 18162 ;; Auto vars:     Size  Location     Type
 18163 ;;  temp            2   10[COMMON] unsigned int 
 18164 ;; Return value:  Size  Location     Type
 18165 ;;                  2    8[COMMON] unsigned int 
 18166 ;; Registers used:
 18167 ;;		wreg, status,2, status,0, pclath, cstack
 18168 ;; Tracked objects:
 18169 ;;		On entry : 0/0
 18170 ;;		On exit  : 0/0
 18171 ;;		Unchanged: 0/0
 18172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18173 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18174 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18175 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18176 ;;      Totals:         4       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18177 ;;Total ram usage:       13 bytes
 18178 ;; Hardware stack levels used:    1
 18179 ;; Hardware stack levels required when called:    1
 18180 ;; This function calls:
 18181 ;;		_Reverse_Byte
 18182 ;;		i1_CheckSum_byte
 18183 ;; This function is called by:
 18184 ;;		_isr
 18185 ;; This function uses a non-reentrant model
 18186 ;;
 18187                           
 18188                           
 18189                           ;psect for function _PS2RawToScan
 18190  1DFA                     _PS2RawToScan:	
 18191                           
 18192                           ;PS_2.c: 1117: unsigned int temp;
 18193                           ;PS_2.c: 1119: if(CheckSum_byte((Raw >> 2) & 0xFF , 3) == ((Raw & 0x02)>> 1))
 18194                           
 18195                           ;incstack = 0
 18196                           ; Regs used in _PS2RawToScan: [wreg+status,2+status,0+pclath+cstack]
 18197  1DFA  0879               	movf	PS2RawToScan@Raw+1,w
 18198  1DFB  0020               	movlb	0	; select bank0
 18199  1DFC  00A1               	movwf	??_PS2RawToScan+1
 18200  1DFD  0878               	movf	PS2RawToScan@Raw,w
 18201  1DFE  00A0               	movwf	??_PS2RawToScan
 18202  1DFF  36A1               	lsrf	??_PS2RawToScan+1,f
 18203  1E00  0CA0               	rrf	??_PS2RawToScan,f
 18204  1E01  3001               	movlw	1
 18205  1E02  0520               	andwf	??_PS2RawToScan,w
 18206  1E03  00A2               	movwf	??_PS2RawToScan+2
 18207  1E04  3000               	movlw	0
 18208  1E05  0521               	andwf	??_PS2RawToScan+1,w
 18209  1E06  00A3               	movwf	??_PS2RawToScan+3
 18210  1E07  0879               	movf	PS2RawToScan@Raw+1,w
 18211  1E08  00A5               	movwf	??_PS2RawToScan+5
 18212  1E09  0878               	movf	PS2RawToScan@Raw,w
 18213  1E0A  00A4               	movwf	??_PS2RawToScan+4
 18214  1E0B  36A5               	lsrf	??_PS2RawToScan+5,f
 18215  1E0C  0CA4               	rrf	??_PS2RawToScan+4,f
 18216  1E0D  36A5               	lsrf	??_PS2RawToScan+5,f
 18217  1E0E  0CA4               	rrf	??_PS2RawToScan+4,f
 18218  1E0F  30FF               	movlw	255
 18219  1E10  0524               	andwf	??_PS2RawToScan+4,w
 18220  1E11  00F0               	movwf	i1CheckSum_byte@This
 18221  1E12  3000               	movlw	0
 18222  1E13  0525               	andwf	??_PS2RawToScan+5,w
 18223  1E14  00F1               	movwf	i1CheckSum_byte@This+1
 18224  1E15  3003               	movlw	3
 18225  1E16  00A6               	movwf	??_PS2RawToScan+6
 18226  1E17  0826               	movf	??_PS2RawToScan+6,w
 18227  1E18  00F2               	movwf	i1CheckSum_byte@Odd_Even
 18228  1E19  319A  2298  319D   	fcall	i1_CheckSum_byte
 18229  1E1C  0020               	movlb	0	; select bank0
 18230  1E1D  00A7               	movwf	??_PS2RawToScan+7
 18231  1E1E  01A8               	clrf	??_PS2RawToScan+8
 18232  1E1F  0823               	movf	??_PS2RawToScan+3,w
 18233  1E20  0628               	xorwf	??_PS2RawToScan+8,w
 18234  1E21  1D03               	skipz
 18235  1E22  2E25               	goto	u626_25
 18236  1E23  0822               	movf	??_PS2RawToScan+2,w
 18237  1E24  0627               	xorwf	??_PS2RawToScan+7,w
 18238  1E25                     u626_25:	
 18239  1E25  1D03               	skipz
 18240  1E26  2E41               	goto	i1l5314
 18241                           
 18242                           ;PS_2.c: 1120: {
 18243                           ;PS_2.c: 1122: temp = ((Raw >> 2) & 0xFF);
 18244  1E27  0879               	movf	PS2RawToScan@Raw+1,w
 18245  1E28  00A1               	movwf	??_PS2RawToScan+1
 18246  1E29  0878               	movf	PS2RawToScan@Raw,w
 18247  1E2A  00A0               	movwf	??_PS2RawToScan
 18248  1E2B  36A1               	lsrf	??_PS2RawToScan+1,f
 18249  1E2C  0CA0               	rrf	??_PS2RawToScan,f
 18250  1E2D  36A1               	lsrf	??_PS2RawToScan+1,f
 18251  1E2E  0CA0               	rrf	??_PS2RawToScan,f
 18252  1E2F  30FF               	movlw	255
 18253  1E30  0520               	andwf	??_PS2RawToScan,w
 18254  1E31  00FA               	movwf	PS2RawToScan@temp
 18255  1E32  3000               	movlw	0
 18256  1E33  0521               	andwf	??_PS2RawToScan+1,w
 18257  1E34  00FB               	movwf	PS2RawToScan@temp+1
 18258                           
 18259                           ;PS_2.c: 1123: temp = (unsigned int) Reverse_Byte((unsigned char) temp);
 18260  1E35  087A               	movf	PS2RawToScan@temp,w
 18261  1E36  319E  26ED  319D   	fcall	_Reverse_Byte
 18262  1E39  0020               	movlb	0	; select bank0
 18263  1E3A  00A0               	movwf	??_PS2RawToScan
 18264  1E3B  01A1               	clrf	??_PS2RawToScan+1
 18265  1E3C  0820               	movf	??_PS2RawToScan,w
 18266  1E3D  00FA               	movwf	PS2RawToScan@temp
 18267  1E3E  0821               	movf	??_PS2RawToScan+1,w
 18268  1E3F  00FB               	movwf	PS2RawToScan@temp+1
 18269                           
 18270                           ;PS_2.c: 1125: }
 18271  1E40  2E43               	goto	i1l5316
 18272  1E41                     i1l5314:	
 18273                           
 18274                           ;PS_2.c: 1126: else
 18275                           ;PS_2.c: 1127: {
 18276                           ;PS_2.c: 1129: temp = 0;
 18277  1E41  01FA               	clrf	PS2RawToScan@temp
 18278  1E42  01FB               	clrf	PS2RawToScan@temp+1
 18279  1E43                     i1l5316:	
 18280                           
 18281                           ;PS_2.c: 1130: }
 18282                           ;PS_2.c: 1131: return temp;
 18283  1E43  087B               	movf	PS2RawToScan@temp+1,w
 18284  1E44  00F9               	movwf	?_PS2RawToScan+1
 18285  1E45  087A               	movf	PS2RawToScan@temp,w
 18286  1E46  00F8               	movwf	?_PS2RawToScan
 18287  1E47  0008               	return
 18288  1E48                     __end_of_PS2RawToScan:	
 18289                           
 18290                           	psect	text78
 18291  1A98                     __ptext78:	
 18292 ;; *************** function i1_CheckSum_byte *****************
 18293 ;; Defined at:
 18294 ;;		line 71 in file "MISC.c"
 18295 ;; Parameters:    Size  Location     Type
 18296 ;;  This            2    0[COMMON] unsigned int 
 18297 ;;  Odd_Even        1    2[COMMON] unsigned char 
 18298 ;; Auto vars:     Size  Location     Type
 18299 ;;  CheckSum_byt    2    4[COMMON] unsigned int 
 18300 ;;  CheckSum_byt    1    7[COMMON] unsigned char 
 18301 ;;  CheckSum_byt    1    6[COMMON] unsigned char 
 18302 ;; Return value:  Size  Location     Type
 18303 ;;                  1    wreg      unsigned char 
 18304 ;; Registers used:
 18305 ;;		wreg, status,2, status,0
 18306 ;; Tracked objects:
 18307 ;;		On entry : 0/0
 18308 ;;		On exit  : 0/0
 18309 ;;		Unchanged: 0/0
 18310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18311 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18312 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18313 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18314 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18315 ;;Total ram usage:        8 bytes
 18316 ;; Hardware stack levels used:    1
 18317 ;; This function calls:
 18318 ;;		Nothing
 18319 ;; This function is called by:
 18320 ;;		_PS2RawToScan
 18321 ;;		i1_UARTchar
 18322 ;;		i1_Send_PS2
 18323 ;; This function uses a non-reentrant model
 18324 ;;
 18325                           
 18326                           
 18327                           ;psect for function i1_CheckSum_byte
 18328  1A98                     i1_CheckSum_byte:	
 18329                           
 18330                           ;MISC.c: 73: char i = 0;
 18331                           
 18332                           ;incstack = 0
 18333                           ; Regs used in i1_CheckSum_byte: [wreg+status,2+status,0]
 18334  1A98  01F7               	clrf	i1CheckSum_byte@i
 18335                           
 18336                           ;MISC.c: 74: unsigned char Parity = 0;
 18337  1A99  01F6               	clrf	i1CheckSum_byte@Parity
 18338                           
 18339                           ;MISC.c: 75: unsigned int ThisTemp = This;
 18340  1A9A  0871               	movf	i1CheckSum_byte@This+1,w
 18341  1A9B  00F5               	movwf	i1CheckSum_byte@ThisTemp+1
 18342  1A9C  0870               	movf	i1CheckSum_byte@This,w
 18343  1A9D  00F4               	movwf	i1CheckSum_byte@ThisTemp
 18344                           
 18345                           ;MISC.c: 77: for (i =0; i<8; i++)
 18346  1A9E  01F7               	clrf	i1CheckSum_byte@i
 18347  1A9F  3008               	movlw	8
 18348  1AA0  0277               	subwf	i1CheckSum_byte@i,w
 18349  1AA1  1803               	btfsc	3,0
 18350  1AA2  2AB6               	goto	i1l3894
 18351  1AA3                     i1l290:	
 18352                           
 18353                           ;MISC.c: 78: {
 18354                           ;MISC.c: 79: if((ThisTemp & 0x01) == 1)
 18355  1AA3  1C74               	btfss	i1CheckSum_byte@ThisTemp,0
 18356  1AA4  2AA9               	goto	i1l292
 18357                           
 18358                           ;MISC.c: 80: {
 18359                           ;MISC.c: 81: Parity++;
 18360  1AA5  3001               	movlw	1
 18361  1AA6  00F3               	movwf	??i1_CheckSum_byte
 18362  1AA7  0873               	movf	??i1_CheckSum_byte,w
 18363  1AA8  07F6               	addwf	i1CheckSum_byte@Parity,f
 18364  1AA9                     i1l292:	
 18365                           
 18366                           ;MISC.c: 82: }
 18367                           ;MISC.c: 83: ThisTemp >>= 1;
 18368  1AA9  3001               	movlw	1
 18369  1AAA                     u402_25:	
 18370  1AAA  36F5               	lsrf	i1CheckSum_byte@ThisTemp+1,f
 18371  1AAB  0CF4               	rrf	i1CheckSum_byte@ThisTemp,f
 18372  1AAC  0B89               	decfsz	9,f
 18373  1AAD  2AAA               	goto	u402_25
 18374  1AAE  3001               	movlw	1
 18375  1AAF  00F3               	movwf	??i1_CheckSum_byte
 18376  1AB0  0873               	movf	??i1_CheckSum_byte,w
 18377  1AB1  07F7               	addwf	i1CheckSum_byte@i,f
 18378  1AB2  3008               	movlw	8
 18379  1AB3  0277               	subwf	i1CheckSum_byte@i,w
 18380  1AB4  1C03               	skipc
 18381  1AB5  2AA3               	goto	i1l290
 18382  1AB6                     i1l3894:	
 18383                           
 18384                           ;MISC.c: 84: }
 18385                           ;MISC.c: 85: if(Odd_Even == 3)
 18386  1AB6  3003               	movlw	3
 18387  1AB7  0672               	xorwf	i1CheckSum_byte@Odd_Even,w
 18388  1AB8  1D03               	btfss	3,2
 18389  1AB9  2AC0               	goto	i1l293
 18390                           
 18391                           ;MISC.c: 86: {
 18392                           ;MISC.c: 87: if(Parity % 2 == 0)
 18393  1ABA  1876               	btfsc	i1CheckSum_byte@Parity,0
 18394  1ABB  2ABE               	goto	i1l3902
 18395                           
 18396                           ;MISC.c: 88: {
 18397                           ;MISC.c: 89: return 1;
 18398  1ABC  3001               	movlw	1
 18399  1ABD  0008               	return
 18400  1ABE                     i1l3902:	
 18401                           
 18402                           ;MISC.c: 90: }
 18403                           ;MISC.c: 91: return 0;
 18404  1ABE  3000               	movlw	0
 18405                           
 18406                           ;MISC.c: 92: }
 18407  1ABF  0008               	return
 18408  1AC0                     i1l293:	
 18409                           
 18410                           ;MISC.c: 93: else
 18411                           ;MISC.c: 94: {
 18412                           ;MISC.c: 95: if(Parity % 2 == 1)
 18413  1AC0  1C76               	btfss	i1CheckSum_byte@Parity,0
 18414  1AC1  2AC4               	goto	i1l3912
 18415                           
 18416                           ;MISC.c: 96: {
 18417                           ;MISC.c: 97: return 1;
 18418  1AC2  3001               	movlw	1
 18419  1AC3  0008               	return
 18420  1AC4                     i1l3912:	
 18421                           
 18422                           ;MISC.c: 98: }
 18423                           ;MISC.c: 99: return 0;
 18424  1AC4  3000               	movlw	0
 18425  1AC5  0008               	return
 18426  1AC6                     __end_ofi1_CheckSum_byte:	
 18427                           
 18428                           	psect	text79
 18429  1EED                     __ptext79:	
 18430 ;; *************** function _Reverse_Byte *****************
 18431 ;; Defined at:
 18432 ;;		line 108 in file "MISC.c"
 18433 ;; Parameters:    Size  Location     Type
 18434 ;;  This            1    wreg     unsigned char 
 18435 ;; Auto vars:     Size  Location     Type
 18436 ;;  This            1    3[COMMON] unsigned char 
 18437 ;;  temp            1    2[COMMON] unsigned char 
 18438 ;; Return value:  Size  Location     Type
 18439 ;;                  1    wreg      unsigned char 
 18440 ;; Registers used:
 18441 ;;		wreg, status,2, status,0
 18442 ;; Tracked objects:
 18443 ;;		On entry : 0/0
 18444 ;;		On exit  : 0/0
 18445 ;;		Unchanged: 0/0
 18446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18448 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18449 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18450 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18451 ;;Total ram usage:        4 bytes
 18452 ;; Hardware stack levels used:    1
 18453 ;; This function calls:
 18454 ;;		Nothing
 18455 ;; This function is called by:
 18456 ;;		_PS2RawToScan
 18457 ;; This function uses a non-reentrant model
 18458 ;;
 18459                           
 18460                           
 18461                           ;psect for function _Reverse_Byte
 18462  1EED                     _Reverse_Byte:	
 18463                           
 18464                           ;incstack = 0
 18465                           ; Regs used in _Reverse_Byte: [wreg+status,2+status,0]
 18466                           ;Reverse_Byte@This stored from wreg
 18467  1EED  00F3               	movwf	Reverse_Byte@This
 18468                           
 18469                           ;MISC.c: 110: unsigned char temp=0;
 18470  1EEE  01F2               	clrf	Reverse_Byte@temp
 18471                           
 18472                           ;MISC.c: 112: temp += (This & 0x01) << 7;
 18473  1EEF  0873               	movf	Reverse_Byte@This,w
 18474  1EF0  3901               	andlw	1
 18475  1EF1  00F0               	movwf	??_Reverse_Byte
 18476  1EF2  3006               	movlw	6
 18477  1EF3                     u545_25:	
 18478  1EF3  35F0               	lslf	??_Reverse_Byte,f
 18479  1EF4  3EFF               	addlw	-1
 18480  1EF5  1D03               	skipz
 18481  1EF6  2EF3               	goto	u545_25
 18482  1EF7  3570               	lslf	??_Reverse_Byte,w
 18483  1EF8  00F1               	movwf	??_Reverse_Byte+1
 18484  1EF9  0871               	movf	??_Reverse_Byte+1,w
 18485  1EFA  07F2               	addwf	Reverse_Byte@temp,f
 18486                           
 18487                           ;MISC.c: 113: temp += (This & 0x02) << 5;
 18488  1EFB  0873               	movf	Reverse_Byte@This,w
 18489  1EFC  3902               	andlw	2
 18490  1EFD  00F0               	movwf	??_Reverse_Byte
 18491  1EFE  3004               	movlw	4
 18492  1EFF                     u546_25:	
 18493  1EFF  35F0               	lslf	??_Reverse_Byte,f
 18494  1F00  3EFF               	addlw	-1
 18495  1F01  1D03               	skipz
 18496  1F02  2EFF               	goto	u546_25
 18497  1F03  3570               	lslf	??_Reverse_Byte,w
 18498  1F04  00F1               	movwf	??_Reverse_Byte+1
 18499  1F05  0871               	movf	??_Reverse_Byte+1,w
 18500  1F06  07F2               	addwf	Reverse_Byte@temp,f
 18501                           
 18502                           ;MISC.c: 114: temp += (This & 0x04) << 3;
 18503  1F07  0873               	movf	Reverse_Byte@This,w
 18504  1F08  3904               	andlw	4
 18505  1F09  00F0               	movwf	??_Reverse_Byte
 18506  1F0A  3002               	movlw	2
 18507  1F0B                     u547_25:	
 18508  1F0B  35F0               	lslf	??_Reverse_Byte,f
 18509  1F0C  3EFF               	addlw	-1
 18510  1F0D  1D03               	skipz
 18511  1F0E  2F0B               	goto	u547_25
 18512  1F0F  3570               	lslf	??_Reverse_Byte,w
 18513  1F10  00F1               	movwf	??_Reverse_Byte+1
 18514  1F11  0871               	movf	??_Reverse_Byte+1,w
 18515  1F12  07F2               	addwf	Reverse_Byte@temp,f
 18516                           
 18517                           ;MISC.c: 115: temp += (This & 0x08) << 1;
 18518  1F13  0873               	movf	Reverse_Byte@This,w
 18519  1F14  3908               	andlw	8
 18520  1F15  0709               	addwf	9,w
 18521  1F16  00F0               	movwf	??_Reverse_Byte
 18522  1F17  0870               	movf	??_Reverse_Byte,w
 18523  1F18  07F2               	addwf	Reverse_Byte@temp,f
 18524                           
 18525                           ;MISC.c: 116: temp += (This & 0x10) >> 1;
 18526  1F19  3673               	lsrf	Reverse_Byte@This,w
 18527  1F1A  3908               	andlw	8
 18528  1F1B  00F0               	movwf	??_Reverse_Byte
 18529  1F1C  0870               	movf	??_Reverse_Byte,w
 18530  1F1D  07F2               	addwf	Reverse_Byte@temp,f
 18531                           
 18532                           ;MISC.c: 117: temp += (This & 0x20) >> 3;
 18533  1F1E  0873               	movf	Reverse_Byte@This,w
 18534  1F1F  00F0               	movwf	??_Reverse_Byte
 18535  1F20  3003               	movlw	3
 18536  1F21                     u548_25:	
 18537  1F21  36F0               	lsrf	??_Reverse_Byte,f
 18538  1F22  0B89               	decfsz	9,f
 18539  1F23  2F21               	goto	u548_25
 18540  1F24  0870               	movf	??_Reverse_Byte,w
 18541  1F25  3904               	andlw	4
 18542  1F26  00F1               	movwf	??_Reverse_Byte+1
 18543  1F27  0871               	movf	??_Reverse_Byte+1,w
 18544  1F28  07F2               	addwf	Reverse_Byte@temp,f
 18545                           
 18546                           ;MISC.c: 118: temp += (This & 0x40) >> 5;
 18547  1F29  0873               	movf	Reverse_Byte@This,w
 18548  1F2A  00F0               	movwf	??_Reverse_Byte
 18549  1F2B  3005               	movlw	5
 18550  1F2C                     u549_25:	
 18551  1F2C  36F0               	lsrf	??_Reverse_Byte,f
 18552  1F2D  0B89               	decfsz	9,f
 18553  1F2E  2F2C               	goto	u549_25
 18554  1F2F  0870               	movf	??_Reverse_Byte,w
 18555  1F30  3902               	andlw	2
 18556  1F31  00F1               	movwf	??_Reverse_Byte+1
 18557  1F32  0871               	movf	??_Reverse_Byte+1,w
 18558  1F33  07F2               	addwf	Reverse_Byte@temp,f
 18559                           
 18560                           ;MISC.c: 119: temp += (This & 0x80) >> 7;
 18561  1F34  0873               	movf	Reverse_Byte@This,w
 18562  1F35  00F0               	movwf	??_Reverse_Byte
 18563  1F36  3007               	movlw	7
 18564  1F37                     u550_25:	
 18565  1F37  36F0               	lsrf	??_Reverse_Byte,f
 18566  1F38  0B89               	decfsz	9,f
 18567  1F39  2F37               	goto	u550_25
 18568  1F3A  0870               	movf	??_Reverse_Byte,w
 18569  1F3B  3901               	andlw	1
 18570  1F3C  00F1               	movwf	??_Reverse_Byte+1
 18571  1F3D  0871               	movf	??_Reverse_Byte+1,w
 18572  1F3E  07F2               	addwf	Reverse_Byte@temp,f
 18573                           
 18574                           ;MISC.c: 121: return temp;
 18575  1F3F  0872               	movf	Reverse_Byte@temp,w
 18576  1F40  0008               	return
 18577  1F41                     __end_of_Reverse_Byte:	
 18578  007E                     btemp	set	126	;btemp
 18579  007E                     wtemp	set	126
 18580  007E                     wtemp0	set	126
 18581  0080                     wtemp1	set	128
 18582  0082                     wtemp2	set	130
 18583  0084                     wtemp3	set	132
 18584  0086                     wtemp4	set	134
 18585  0088                     wtemp5	set	136
 18586  007F                     wtemp6	set	127
 18587  007E                     ttemp	set	126
 18588  007E                     ttemp0	set	126
 18589  0081                     ttemp1	set	129
 18590  0084                     ttemp2	set	132
 18591  0087                     ttemp3	set	135
 18592  007F                     ttemp4	set	127
 18593  007E                     ltemp	set	126
 18594  007E                     ltemp0	set	126
 18595  0082                     ltemp1	set	130
 18596  0086                     ltemp2	set	134
 18597  0080                     ltemp3	set	128


Data Sizes:
    Strings     210
    Constant    623
    Data        8
    BSS         55
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     37      71
    BANK2            80     63      63
    BANK3            80     66      80
    BANK4            80     55      70
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_18(CODE[24]), STR_11(CODE[12]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 60
		 -> Process_PS2_ScanCode@buf(BANK3[60]), SetBaud@buf(BANK2[50]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    WriteFlash_Sequential@buffer	PTR unsigned int  size(1) Largest target is 4
		 -> MEM(BANK1[4]), 

    UARTstringWAIT@data	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_20(CODE[20]), STR_19(CODE[3]), Process_PS2_ScanCode@buf(BANK3[60]), STR_17(CODE[3]), 
		 -> STR_16(CODE[3]), STR_15(CODE[19]), STR_14(CODE[19]), STR_13(CODE[3]), 
		 -> STR_12(CODE[3]), SetBaud@buf(BANK2[50]), STR_10(CODE[21]), STR_9(CODE[3]), 
		 -> STR_8(CODE[3]), NoParityMSG(CODE[20]), SpaceParityMSG(CODE[16]), MarkParityMSG(CODE[15]), 
		 -> EvenParityMSG(CODE[22]), OddParityMSG(CODE[21]), STR_7(CODE[3]), STR_6(CODE[33]), 
		 -> STR_5(CODE[3]), Version(CODE[9]), STR_4(CODE[19]), STR_3(CODE[28]), 
		 -> STR_2(CODE[8]), STR_1(CODE[7]), VoltageMSG(CODE[13]), 

    BufferShiftBack@buffer	PTR unsigned char  size(1) Largest target is 12
		 -> PS_2_ScanCodes(BANK1[12]), 

    cleanBuffer@data	PTR unsigned char  size(1) Largest target is 12
		 -> PS_2_ScanCodes(BANK1[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_UARTchar
    _ResendLast->i1_Send_PS2
    _Process_PS2_ScanCode->i1_Send_PS2
    _Process_PS2_ScanCode->i1_UARTchar
    i1_Send_PS2->i1_delayUS
    _UART_send_break_timed->i1_delayUS
    i1_UARTstringWAIT->i1_UARTchar
    i1_UARTchar->i1_CheckSum_byte
    i1_ReadBaud->i1_ReadFlash_4Byte
    i1_ReadFlash_4Byte->i1_ReadFlash_2Byte
    i1_InitUART->i1___lldiv
    _sprintf->i1___lldiv
    ___llmod->i1___lldiv
    _WriteBaud->_WriteFlash_Sequential
    _WriteFlash_Sequential->i1_delayUS
    _PS2RawToScan->i1_CheckSum_byte

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _ResendLast->i1_Send_PS2
    _SetBaud->_WriteBaud
    i1_UARTstringWAIT->i1_UARTchar
    i1_ReadBaud->i1_ReadFlash_4Byte
    _sprintf->___llmod
    _WriteBaud->_WriteFlash_Sequential

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    _isr->_Process_PS2_ScanCode
    _Process_PS2_ScanCode->_SetBaud
    _SetBaud->_WriteBaud

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    _Process_PS2_ScanCode->_SetBaud

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    _isr->_Process_PS2_ScanCode

Critical Paths under _main in BANK4

    _main->_ReadVoltage
    _ReadVoltage->___ftmul
    ___lwtoft->___ftpack
    ___ftmul->___ftdiv
    ___ftdiv->___lwtoft
    _InternalADC_Read->_delayUS
    _Init_PS_2_Send->_Send_PS2
    _Send_PS2->_delayUS
    _Init_System->_InitUART
    _UARTstringWAIT->_UARTchar
    _UARTchar->_CheckSum_byte
    _ReadBaud->_ReadFlash_4Byte
    _ReadFlash_4Byte->_ReadFlash_2Byte
    _InitUART->___lldiv

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   36482
                                             53 BANK4      2     2      0
                _ConfigureOscillator
                            _InitApp
                        _Init_System
              _PS_2_ENABLE_INTERRUPT
                          _PS_2_INIT
                        _ReadVoltage
                     _UARTstringWAIT
                             ___ftge
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     814
                                              0 BANK4      9     3      6
 ---------------------------------------------------------------------------------
 (1) _ReadVoltage                                          9     6      3   10590
                                             44 BANK4      9     6      3
                 _DisableInternalADC
                   _InternalADC_Read
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             4     1      3    2512
                                              8 BANK4      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    3046
                                             28 BANK4     16    10      6
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2978
                                             12 BANK4     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2404
                                              0 BANK4      8     3      5
 ---------------------------------------------------------------------------------
 (2) _InternalADC_Read                                     5     3      2    1980
                                             10 BANK4      5     3      2
                            _delayUS
 ---------------------------------------------------------------------------------
 (2) _DisableInternalADC                                   1     1      0       0
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PS_2_INIT                                            0     0      0    5473
                         _Clock_TRIS
                          _Data_TRIS
                     _Init_PS_2_Send
                         _Timer2Init
 ---------------------------------------------------------------------------------
 (2) _Timer2Init                                           5     5      0      99
                                              0 BANK4      5     5      0
                           _Timer2ON
 ---------------------------------------------------------------------------------
 (3) _Timer2ON                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_PS_2_Send                                       0     0      0    5312
             _PS_2_DISABLE_INTERRUPT
                           _Send_PS2
                            _delayUS
 ---------------------------------------------------------------------------------
 (3) _Send_PS2                                             9     9      0    3332
                                             10 BANK4      9     9      0
                      _CheckSum_byte
                         _Clock_TRIS
                          _Data_TRIS
                      _READ_PS_2_PIN
                            _delayUS
 ---------------------------------------------------------------------------------
 (4) _READ_PS_2_PIN                                        1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Data_TRIS                                            1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Clock_TRIS                                           1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (3) _PS_2_DISABLE_INTERRUPT                               2     2      0      31
                                              0 BANK4      2     2      0
 ---------------------------------------------------------------------------------
 (1) _PS_2_ENABLE_INTERRUPT                                1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                         14    14      0   11218
                                             35 BANK4     14    14      0
                           _InitUART
                           _ReadBaud
                     _UARTstringWAIT
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) _UARTstringWAIT                                       5     3      2    6336
                                             15 BANK4      5     3      2
                           _UARTchar
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) _delayUS                                             10     6      4    1949
                                              0 BANK4     10     6      4
 ---------------------------------------------------------------------------------
 (2) _UARTchar                                             7     5      2    2096
                                              8 BANK4      7     5      2
                      _CheckSum_byte
 ---------------------------------------------------------------------------------
 (3) _CheckSum_byte                                        8     5      3     784
                                              0 BANK4      8     5      3
 ---------------------------------------------------------------------------------
 (2) _ReadBaud                                            16    12      4    1168
                                             18 BANK4     16    12      4
                    _ReadFlash_4Byte
 ---------------------------------------------------------------------------------
 (3) _ReadFlash_4Byte                                     13     9      4     803
                                              5 BANK4     13     9      4
                    _ReadFlash_2Byte
 ---------------------------------------------------------------------------------
 (4) _ReadFlash_2Byte                                      5     2      3     485
                                              0 BANK4      5     2      3
 ---------------------------------------------------------------------------------
 (2) _InitUART                                            21    16      5    1493
                                             14 BANK4     21    16      5
                         _CloseUSART
                          _OpenUSART
                          _ReadUSART
                            ___lldiv
                          _baudUSART
 ---------------------------------------------------------------------------------
 (3) _baudUSART                                            1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     479
                                              0 BANK4     14     6      8
 ---------------------------------------------------------------------------------
 (3) _ReadUSART                                            2     2      0      34
                                              0 BANK4      2     2      0
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     387
                                              0 BANK4      3     1      2
 ---------------------------------------------------------------------------------
 (3) _CloseUSART                                           1     1      0       0
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  1     1      0       0
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  5     5      0   21405
                                             78 BANK0      2     2      0
                                             34 BANK1      3     3      0
                       _PS2RawToScan
               _Process_PS2_ScanCode
                    _READ_CONFIG_PIN
                         _ResendLast
                          _Timer2OFF
                        _Timer2Reset
              _UART_send_break_timed
           i1_PS_2_DISABLE_INTERRUPT
            i1_PS_2_ENABLE_INTERRUPT
                    i1_READ_PS_2_PIN
                        i1_ReadUSART
                         i1_Timer2ON
                         i1_UARTchar
 ---------------------------------------------------------------------------------
 (6) i1_Timer2ON                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) i1_PS_2_ENABLE_INTERRUPT                              1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Timer2Reset                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Timer2OFF                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _ResendLast                                           0     0      0    1271
           i1_PS_2_DISABLE_INTERRUPT
                         i1_Send_PS2
 ---------------------------------------------------------------------------------
 (6) i1_PS_2_DISABLE_INTERRUPT                             2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _READ_CONFIG_PIN                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Process_PS2_ScanCode                                72    72      0   17480
                                             28 BANK1      6     6      0
                                              0 BANK3     66    66      0
                    _BufferShiftBack
                   _Decode_Scan_Code
          _Decode_Scan_Code_Function
        _Decode_Scan_Code_FunctionE0
             _Decode_Scan_Code_Shift
                           _ISNUMBER
                            _SetBaud
                    _UART_send_break
              _UART_send_break_timed
                             ___lmul
                        _cleanBuffer
                            _sprintf
                         i1_Send_PS2
                         i1_UARTchar
                   i1_UARTstringWAIT
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (7) i1_Send_PS2                                           9     9      0    1249
                                             10 COMMON     4     4      0
                                              0 BANK0      5     5      0
                    i1_CheckSum_byte
                       i1_Clock_TRIS
                        i1_Data_TRIS
                    i1_READ_PS_2_PIN
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (6) i1_READ_PS_2_PIN                                      1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_Data_TRIS                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_Clock_TRIS                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _cleanBuffer                                          5     3      2     193
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (7) ___lmul                                              12     4      8     220
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (6) _UART_send_break_timed                                3     1      2     632
                                             10 COMMON     3     1      2
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (7) _UART_send_break                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _SetBaud                                             76    71      5    7750
                                             15 BANK1     13     8      5
                                              0 BANK2     63    63      0
                          _WriteBaud
                            _sprintf
                         i1_InitUART
                         i1_ReadBaud
                   i1_UARTstringWAIT
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (7) i1_UARTstringWAIT                                     5     3      2    2211
                                              1 BANK0      5     3      2
                         i1_UARTchar
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (6) i1_UARTchar                                           7     5      2    1065
                                              8 COMMON     6     4      2
                                              0 BANK0      1     1      0
                    i1_CheckSum_byte
 ---------------------------------------------------------------------------------
 (8) i1_ReadBaud                                          16    12      4     528
                                              4 BANK0     16    12      4
                  i1_ReadFlash_4Byte
 ---------------------------------------------------------------------------------
 (9) i1_ReadFlash_4Byte                                   13     9      4     387
                                              5 COMMON     9     5      4
                                              0 BANK0      4     4      0
                  i1_ReadFlash_2Byte
 ---------------------------------------------------------------------------------
 (8) i1_InitUART                                          21    16      5     822
                                              0 BANK0     21    16      5
                       i1_CloseUSART
                        i1_OpenUSART
                        i1_ReadUSART
                          i1___lldiv
                        i1_baudUSART
 ---------------------------------------------------------------------------------
 (9) i1_baudUSART                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) i1_ReadUSART                                          2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) i1_OpenUSART                                          3     1      2     246
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (9) i1_CloseUSART                                         1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _sprintf                                             30    24      6    1181
                                             10 BANK0     22    16      6
                            ___llmod
                          i1___lldiv
 ---------------------------------------------------------------------------------
 (8) i1___lldiv                                           14     6      8     266
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (8) ___llmod                                             10     2      8     287
                                              0 BANK0     10     2      8
                          i1___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (8) _WriteBaud                                           19    12      7    1876
                                             74 BANK0      4     4      0
                                              0 BANK1     15     8      7
              _WriteFlash_Sequential
 ---------------------------------------------------------------------------------
 (9) _WriteFlash_Sequential                               78    74      4    1573
                                             10 COMMON     4     0      4
                                              0 BANK0     74    74      0
                         _BlockErase
                             _UNLOCK
                  i1_ReadFlash_2Byte
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (7) i1_delayUS                                           10     6      4     482
                                              0 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (10) i1_ReadFlash_2Byte                                   5     2      3     222
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (10) _BlockErase                                          4     2      2     108
                                              0 COMMON     4     2      2
                             _UNLOCK
 ---------------------------------------------------------------------------------
 (10) _UNLOCK                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _ISNUMBER                                             1     1      0      44
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code_Shift                               1     1      0      45
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code_FunctionE0                          1     1      0      45
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code_Function                            1     1      0      44
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code                                     1     1      0      45
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _BufferShiftBack                                      8     6      2    1473
                                              0 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 (6) _PS2RawToScan                                        13    11      2     753
                                              8 COMMON     4     2      2
                                              0 BANK0      9     9      0
                       _Reverse_Byte
                    i1_CheckSum_byte
 ---------------------------------------------------------------------------------
 (7) i1_CheckSum_byte                                      8     5      3     369
                                              0 COMMON     8     5      3
 ---------------------------------------------------------------------------------
 (7) _Reverse_Byte                                         4     4      0     207
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _Init_System
     _InitUART
       _CloseUSART
       _OpenUSART
       _ReadUSART
       ___lldiv
       _baudUSART
     _ReadBaud
       _ReadFlash_4Byte
         _ReadFlash_2Byte
     _UARTstringWAIT
       _UARTchar
         _CheckSum_byte
       _delayUS
     _delayUS
   _PS_2_ENABLE_INTERRUPT
   _PS_2_INIT
     _Clock_TRIS
     _Data_TRIS
     _Init_PS_2_Send
       _PS_2_DISABLE_INTERRUPT
       _Send_PS2
         _CheckSum_byte
         _Clock_TRIS
         _Data_TRIS
         _READ_PS_2_PIN
         _delayUS
       _delayUS
     _Timer2Init
       _Timer2ON
   _ReadVoltage
     _DisableInternalADC
     _InternalADC_Read
       _delayUS
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _UARTstringWAIT
     _UARTchar
       _CheckSum_byte
     _delayUS
   ___ftge
   _delayUS

 _isr (ROOT)
   _PS2RawToScan
     _Reverse_Byte
     i1_CheckSum_byte
   _Process_PS2_ScanCode
     _BufferShiftBack
     _Decode_Scan_Code
     _Decode_Scan_Code_Function
     _Decode_Scan_Code_FunctionE0
     _Decode_Scan_Code_Shift
     _ISNUMBER
     _SetBaud
       _WriteBaud
         _WriteFlash_Sequential
           _BlockErase
             _UNLOCK
           _UNLOCK
           i1_ReadFlash_2Byte
           i1_delayUS
       _sprintf
         ___llmod
           i1___lldiv (ARG)
         i1___lldiv
       i1_InitUART
         i1_CloseUSART
         i1_OpenUSART
         i1_ReadUSART
         i1___lldiv
         i1_baudUSART
       i1_ReadBaud
         i1_ReadFlash_4Byte
           i1_ReadFlash_2Byte
       i1_UARTstringWAIT
         i1_UARTchar
           i1_CheckSum_byte
         i1_delayUS
       i1_delayUS
     _UART_send_break
     _UART_send_break_timed
       i1_delayUS
     ___lmul
     _cleanBuffer
     _sprintf
       ___llmod
         i1___lldiv (ARG)
       i1___lldiv
     i1_Send_PS2
       i1_CheckSum_byte
       i1_Clock_TRIS
       i1_Data_TRIS
       i1_READ_PS_2_PIN
       i1_delayUS
     i1_UARTchar
       i1_CheckSum_byte
     i1_UARTstringWAIT
       i1_UARTchar
         i1_CheckSum_byte
       i1_delayUS
     i1_delayUS
   _READ_CONFIG_PIN
   _ResendLast
     i1_PS_2_DISABLE_INTERRUPT
     i1_Send_PS2
       i1_CheckSum_byte
       i1_Clock_TRIS
       i1_Data_TRIS
       i1_READ_PS_2_PIN
       i1_delayUS
   _Timer2OFF
   _Timer2Reset
   _UART_send_break_timed
     i1_delayUS
   i1_PS_2_DISABLE_INTERRUPT
   i1_PS_2_ENABLE_INTERRUPT
   i1_READ_PS_2_PIN
   i1_ReadUSART
   i1_Timer2ON
   i1_UARTchar
     i1_CheckSum_byte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     25      47       7       88.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     3F      3F       9       78.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50     42      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50     37      46      13       87.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     17A      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     17A      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Mar 05 21:57:05 2015

                     _BufferShiftBack 1C59                _PS_2_DISABLE_INTERRUPT 1994  
             Process_PS2_ScanCode@buf 01A0                            __CFG_CP$ON 0000  
                   ??_ReadFlash_2Byte 0223                     ??_ReadFlash_4Byte 0229  
                                   _i 00D6                        _ResendLastFlag 00D4  
            Process_PS2_ScanCode@temp 01E1                  i1InitUART@baudconfig 002F  
                  Data_TRIS@direction 0220                           __CFG_LVP$ON 0000  
                                 l171 1629                                   l421 1CC4  
                                 l423 1CCE                                   l417 1CB5  
                                 l441 1143                                   l290 1B01  
                                 l434 111B                                   l282 1BF1  
                                 l274 0B4F                                   l435 111E  
                                 l179 16DB                                   l292 1B07  
                                 l428 1139                                   l284 1C0A  
                                 l293 1B1E                                   l445 114D  
                                 l470 1B84                                   l472 1BA2  
                                 l633 18E3                                   l628 18D8  
                                 l653 19B4                                   l648 18FB  
                                 l954 1B77                                   l866 0ED9  
                                 l867 0F2E                                   _MEM 00E3  
                                 _PR2 001B                                   _isr 0004  
                _Process_PS2_ScanCode 0115                           i1_baudUSART 1862  
             i1ReadFlash_4Byte@column 0077                          __CFG_BORV$LO 0000  
                                 wreg 0009            __size_ofi1_ReadFlash_2Byte 0028  
          __size_ofi1_ReadFlash_4Byte 004D            __end_of_ScanCodeFunctionE0 08D3  
             UART_send_break_timed@US 007A                          ___ftdiv@cntr 0236  
                        ___ftdiv@sign 023B                                  l1031 1CEE  
                                l1034 1D13                                  l1270 119B  
                                l1271 11A3                                  l1263 1188  
                                l6212 19B2                                  l7020 169C  
                                l7012 1652                                  l6222 19B9  
                                l6312 10FA                                  l6320 112E  
                                l7032 16DF                                  l7024 16A2  
                                l7016 167A                                  l6314 1103  
                                l7050 1704                                  l6260 1B1C  
                                l6252 1B14                                  l6500 0FB9  
                                l6404 0EB6                                  l7036 16E3  
                                l6350 1CAF                                  l6342 1CA4  
                                l6270 1B22                                  l6318 1121  
                                l6238 1C14                                  l6510 0FBC  
                                l6430 0F05                                  l6414 0EDE  
                                l6406 0ED3                                  l7046 16F7  
                                l6360 1CBC                                  l6600 1BA5  
                                l6512 0FD8                                  l6440 0F08  
                                l6416 0EE4                                  l6354 1CB7  
                                l6346 1CAA                                  l6522 0FDB  
                                l6450 0F39                                  l6442 0F25  
                                l6364 1CC6                                  l6524 0FF7  
                                l6460 0F3C                                  l6428 0EE9  
                                l6294 19A0                                  l6462 0F58  
                                l6550 1174                                  l6542 115E  
                                l6368 1CD0                                  l6472 0F5B  
                                l6448 0F33                                  l6560 118D  
                                l6800 12F6                                  l6474 0F77  
                                l6546 1165                                  l6636 146B  
                                l6900 0AAB                                  l6548 116F  
                                l6812 1331                                  ?_isr 0070  
      __size_of_PS_2_ENABLE_INTERRUPT 000C                                  l6590 1EE4  
                                l6638 146F                                  l6486 0F7E  
                                l6558 1199                                  l6576 1EAB  
                                l6904 0AB4                                  l6488 0F9A  
                                l6752 1237                                  l6824 134D  
                                l6816 1339                                  l6850 1978  
                                l6586 1ED9                                  l6578 1EB9  
                                l6930 0B28                                  l6498 0F9D  
                                l6932 0B2C                                  l6940 0B3B  
                                l6780 12A7                                  l6772 128E  
                                l6828 1355                                  l6934 0B31  
                                l6942 0B48                                  l6758 124D  
                                l6848 1972                                  l6936 0B36  
                                l6794 12E0                                  l6962 1F6A  
                                _BAUD 0262                                  l6972 1C34  
                                l6958 1F5C                                  l6976 1C4A  
                                l6898 0AA0                   _PS_2_Read_Data_TEMP 00C9  
                                _ECHO 025F                                  STR_1 0A3A  
                                STR_2 0A32                                  STR_3 0990  
                                STR_4 0A13                                  STR_5 09FD  
                                STR_6 096F                                  STR_7 09FD  
                                STR_8 09FD                                  STR_9 09FD  
                                _LATA 010C                                  _LATC 010E  
                                _LALT 01EA         __end_of_PS_2_ENABLE_INTERRUPT 18FE  
                                _PIE1 0091                                  i1l90 007F  
                                i1l83 0072                                  u8035 1B6E  
                                i1l92 00BB                                  u9005 135C  
                                i1l87 0058                                  _RALT 01ED  
                                u9105 1F57                                  u9125 1F66  
                                u9055 0A89                                  u8505 1194  
                                u8435 1DC9                                  u8605 1ECE  
                                u8615 1EDA                                  u8705 1017  
                                u8545 11AA                                  u8465 116A  
                                u7933 1C03                                  u8805 1CF4  
                                u8485 1183                                  u8575 1EAE  
                                u8665 1053                                  u8595 1EBA  
                                u8675 1076                                  u7965 1B08  
                                u8845 125F                                  u8925 1302  
                                u8695 14A1                                  u8855 126F  
                                u8935 1312                                  u8865 128F  
                                u8875 129E                                  u8955 133A  
                                u8885 12A8                                  u8965 1340  
                                _TMR2 001A                                  u8995 1356  
                                _WPUA 020C                                  _WPUC 020E  
                          i1delayUS@i 0075                            i1delayUS@j 0079  
                        __CFG_WRT$OFF 0000      __size_ofi1_PS_2_ENABLE_INTERRUPT 000B  
                   i1___lldiv@divisor 0070                                  _main 1615  
                  UARTstringWAIT@data 022F                          ___ftpack@arg 0220  
                        ___ftpack@exp 0223                                  fsr0h 0005  
                                fsr1h 0007                                  fsr0l 0004  
                                indf0 0000                                  indf1 0001  
                                fsr1l 0006                                  btemp 007E  
                   i1___lldiv@counter 007D                   baudUSART@baudconfig 0220  
                       __CFG_BOREN$ON 0000                                  ltemp 007E  
                   SetBaud@Paritytemp 0156                      i1_UARTstringWAIT 1B24  
                                start 00E1                                  ttemp 007E  
                                wtemp 007E                         __CFG_IESO$OFF 0000  
                    Reverse_Byte@This 0073             WriteFlash_Sequential@temp 0066  
                    Reverse_Byte@temp 0072                         __CFG_MCLRE$ON 0000  
                          _BlockErase 1A41                          ___ftmul@cntr 024A  
                         ?i1_UARTchar 0078               ?_Decode_Scan_Code_Shift 0070  
                        ___ftmul@sign 024B                       __end_of_InitApp 19F4  
                     __end_of_SetBaud 0CDE                            _Clock_TRIS 18D0  
                       ??_Init_System 0243                __size_of_READ_PS_2_PIN 0014  
                               ??_isr 006E                   _Right_Shift_Key_old 00D5  
                      _Init_PS_2_Send 0676                     ??i1_READ_PS_2_PIN 0070  
   i1UARTchar@NinethBit_override_data 0079       UARTchar@NinethBit_override_data 0229  
           _Decode_Scan_Code_Function 0A41                           ReadBaud@row 0232  
     WriteFlash_Sequential@amountTemp 0065                       __end_of_Version 096F  
                       ??_ReadVoltage 024F                            _CloseUSART 190B  
                               ?_main 0070              __size_ofi1_CheckSum_byte 002E  
                               STR_10 09C4                                 STR_11 0A26  
                               STR_12 09FD                                 STR_20 09D9  
                               STR_13 09FD                                 STR_14 09ED  
                               STR_15 0A00                                 STR_16 09FD  
                               STR_17 09FD                         __CFG_WDTE$OFF 0000  
                               STR_18 09AC                                 STR_19 09FD  
                     __end_of___ftdiv 12C9                      __end_of_ISNUMBER 190B  
                     __end_of___lldiv 1EED                       __end_of___ftmul 137D  
                               _CKPPS 0E25                       __end_of___llmod 1D60  
                               _T2CON 001C                                 _IOCAF 0393  
                               _IOCAN 0392                                 _IOCAP 0391  
                               i1l102 00DD                                 i1l421 1A86  
                               i1l423 1A8F                                 i1l417 1A7C  
                               i1l441 10DE                                 i1l290 1AA3  
                               i1l282 1BBD                                 i1l434 10B6  
                               i1l435 10B9                                 i1l292 1AA9  
                               i1l284 1BD6                                 i1l428 10D2  
                               i1l293 1AC0                                 i1l445 10E8  
                               i1l470 1B24                                 i1l472 1B41  
                               i1l633 18AD                                 i1l482 0C55  
                               i1l491 0CCB                                 i1l811 0552  
                               i1l628 18A3                                 i1l653 198D  
                               i1l750 040C                                 i1l718 0295  
                               i1l648 18CD                                 i1l834 061C  
                               i1l954 1A37                                 i1l866 0D47  
                               i1l963 18C0                                 i1l867 0D9B  
      __size_of_UART_send_break_timed 0025                                 _RCREG 0199  
               ?_Process_PS2_ScanCode 0070                                 _RCSTA 019D  
                               _SPBRG 019B         __end_of_UART_send_break_timed 1A19  
                _PS_2_Read_Data_First 01E2                                 _PORTA 000C  
                               _PORTC 000E                          InitUART@Baud 022E  
                               _RXPPS 0E24                                 _TXREG 019A  
                 _ConfigureOscillator 196F                                 _Alarm 025E  
                _PS_2_Read_Data_Third 01E6                       __end_of_delayUS 1C1D  
                    _InternalADC_Read 1CDB                           i1delayUS@US 0070  
                 ___lmul@multiplicand 0074                        __CFG_FCMEN$OFF 0000  
                        InitUART@temp 023F                 _WriteFlash_Sequential 137D  
                  i1___lldiv@dividend 0074                 ReadFlash_2Byte@column 0222  
                    __end_of_UARTchar 1155                            SetBaud@buf 0120  
                     __end_of_dpowers 08FB                           ?i1_InitUART 0020  
                         ?i1_ReadBaud 0024                         ___ftpack@sign 0224  
                  __size_of_PS_2_INIT 000F                                 main@i 0256  
                               isr@rx 00C3                                 ltemp0 007E  
                               ltemp1 0082                                 ltemp2 0086  
                               ltemp3 0080                           ?i1_Send_PS2 0070  
             InternalADC_Read@channel 022E                                 ttemp0 007E  
                               ttemp1 0081                                 ttemp2 0084  
                               ttemp3 0087                                 ttemp4 007F  
                               status 0003               __end_of_BufferShiftBack 1C9A  
                               wtemp0 007E                                 wtemp1 0080  
                               wtemp2 0082                                 wtemp3 0084  
                               wtemp4 0086                                 wtemp5 0088  
                               wtemp6 007F                       __end_of_sprintf 1800  
                         isr@ScanTemp 00C4                    __size_ofi1___lldiv 0052  
                __size_of_cleanBuffer 0018                           ?i1_Timer2ON 0070  
                ?_ConfigureOscillator 0070        __end_of_Decode_Scan_Code_Shift 196F  
                       _ScanCodeSHIFT 07F5                    __size_ofi1_delayUS 0033  
                     _UART_send_break 185D                       __initialization 00E3  
              __end_of_Init_PS_2_Send 06E6                   __end_of_NoParityMSG 093A  
                  __size_of_Data_TRIS 000B                          __end_of_main 170A  
                    __end_of_InitUART 152A                      ??_UARTstringWAIT 0231  
                         isr@Rx_fault 00C2                      __end_of_ReadBaud 108D  
                  i1___lldiv@quotient 0079            __end_of_DisableInternalADC 1882  
                      _SpaceParityMSG 093A                      __end_of_ScanCode 07F5  
                      __CFG_LPBOR$OFF 0000              __size_of_READ_CONFIG_PIN 0007  
                    __end_of_Send_PS2 1000                                ??_main 0255  
        __end_of_ScanCodeFunctionNoE0 0784                        __CFG_PLLEN$OFF 0000  
                    __end_of_Timer2ON 1855                   __end_of_Init_System 0B65  
                        ReadBaud@temp 023E                      i1CheckSum_byte@i 0077  
                      i1InitUART@Baud 0020                          ?i1_Data_TRIS 0070  
                    BufferShiftBack@i 0076         Decode_Scan_Code_Function@Code 0070  
                 __end_of_ReadVoltage 1F9E                 ReadFlash_4Byte@column 0227  
                              _ADCON0 009D                                _ADCON1 009E  
                              _ADCON2 009F                   __size_ofi1_UARTchar 0063  
                    ___llmod@dividend 0024                                _ADRESH 009C  
                              _ADRESL 009B                        i1InitUART@temp 0031  
                       _READ_PS_2_PIN 19A7                        __CFG_ZCDDIS$ON 0000  
                              _ANSELA 018C                                _ANSELC 018E  
                    __end_of___ftpack 11BA                                _HFIOFS 04D0  
                              _RC1STA 019D                                _RC2PPS 0EA2  
                              i1l1085 1735                                i1l1088 1753  
                              i1l4040 1384                                i1l5002 1949  
                              i1l4042 13D6                                i1l4034 13C1  
                              i1l4028 13A8                                i1l4204 1E86  
                              i1l4124 1A7D                                i1l4116 1A76  
                              i1l5014 0A4F                                i1l4134 1A88  
                              i1l4072 141E                                i1l4208 1E91  
                              i1l4320 1737                                i1l4152 1096  
                              i1l4160 10C9                                i1l4074 1442  
                              i1l4090 1D4C                                i1l4330 1762  
                              i1l4138 1A90                                i1l4154 10A0  
                              i1l4084 1D26                                i1l4340 1779  
                              i1l4324 173C                                i1l5044 1ACE  
                              i1l5300 0E47                                i1l5220 0D92  
                              i1l4086 1D34                                i1l4094 1D57  
                              i1l4318 1733                                i1l4158 10BC  
                              i1l5302 0E63                                i1l5206 0D56  
                              i1l6022 002E                                i1l4600 1556  
                              i1l5048 1AD8                                i1l5240 0DC4  
                              i1l5208 0D72                                i1l5400 01BA  
                              i1l5314 1E41                                i1l4194 1E58  
                              i1l4354 17AB                                i1l4346 17A6  
                              i1l4602 155A                                i1l5250 0DC7  
                              i1l5226 0DA0                                i1l5218 0D75  
                              i1l6034 005A                                i1l5316 1E43  
                              i1l4196 1E66                                i1l4356 1710  
                              i1l5252 0DE3                                i1l5228 0DA5  
                              i1l5332 1879                                i1l5156 1933  
                              i1l6060 008F                                i1l6036 005D  
                              i1l3902 1ABE                                i1l4358 17FA  
                              i1l5238 0DA8                                i1l5182 0D24  
                              i1l5430 01FF                                i1l5414 01DD  
                              i1l5422 01EE                                i1l6070 00B8  
                              i1l3912 1AC4                                i1l5264 0DEA  
                              i1l5192 0D4C                                i1l5184 0D41  
                              i1l5600 0367                                i1l5290 0E44  
                              i1l5266 0E06                                i1l5194 0D51  
                              i1l5610 0396                                i1l5602 0380  
                              i1l5514 02AA                                i1l5506 029F  
                              i1l5434 0206                                i1l5442 0214  
                              i1l5418 01E5                                i1l5370 0172  
                              i1l6090 00D6                                i1l4900 0C7C  
                              i1l5276 0E09                                i1l5700 0481  
                              i1l5612 0381                                i1l5540 02F5  
                              i1l5532 02E6                                i1l6068 00AC  
                              i1l4646 1B44                                i1l4910 0CA7  
                              i1l5278 0E25                                i1l5614 039D  
                              i1l5470 0253                                i1l5446 021F  
                              i1l5438 020E                                i1l5518 02CA  
                              i1l5382 0193                                i1l5390 019D  
                              i1l5358 0149                                i1l3880 1BDF  
                              i1l4912 0CAC                                i1l4920 0CC3  
                              i1l5288 0E28                                i1l5624 03B3  
                              i1l5608 0393                                i1l5640 03D8  
                              i1l5552 0313                                i1l5536 02ED  
                              i1l5528 02DF                                i1l5480 0254  
                              i1l5456 0235                                i1l6088 00D3  
                              i1l4850 1C8E                                i1l4826 1909  
                              i1l4914 0CB1                                i1l4666 198B  
                              i1l5810 05F8                                i1l5714 04BC  
                              i1l5634 03CD                                i1l5626 03A1  
                              i1l5562 0334                                i1l5554 0301  
                              i1l5466 024C                                i1l5482 026D  
                              i1l5386 0198                                i1l4852 1C95  
                              i1l4908 0CA2                                i1l4836 06E9  
                              i1l4676 1992                                i1l5812 05FD  
                              i1l5820 0614                                i1l5740 04E3  
                              i1l5732 04D6                                i1l5724 04C4  
                              i1l5652 03F6                                i1l5636 03D1  
                              i1l5628 03BA                                i1l5580 0353  
                              i1l5572 0341                                i1l5564 031C  
                              i1l5556 031A                                i1l5492 0283  
                              i1l5468 023A                                i1l3894 1AB6  
                              i1l4854 1C60                                i1l4918 0CB6  
                              i1l5814 0602                                i1l5830 064C  
                              i1l5638 03BB                                i1l5566 0322  
                              i1l5478 0266                                i1l5486 0275  
                              i1l5808 05F3                                i1l5824 0637  
                              i1l5760 0549                                i1l5752 0502  
                              i1l5680 042D                                i1l5672 0422  
                              i1l5576 034A                                i1l5568 0337  
                              i1l5664 0419                                i1l5496 028C  
                              i1l4882 0C3C                                i1l5818 0607  
                              i1l5770 0564                                i1l5746 04EF  
                              i1l5850 011C                                i1l5828 064A  
                              i1l4990 196D                                i1l4886 0C4F  
                              i1l5790 059D                                i1l5782 0587  
                              i1l5774 0571                                i1l5766 055B  
                              i1l5598 0379                                i1l5846 066B  
                              i1l4978 195B                                i1l5786 0590  
                              i1l5778 057A                                i1l5798 05C2  
                              _INTCON 000B                                u402_25 1AAA  
                              _FVRCON 0117                                _PARITY 0261  
                              u407_25 1A2F                                u431_25 1D29  
                              _PMADRH 0192                                _PMADRL 0191  
                              u433_25 1D42                      __end_of___lwtoft 19D0  
                              _PMDATH 0194                                u434_25 1D4D  
                              _PMDATL 0193                                u451_25 1D7B  
                              _PMCON1 0195                                _PMCON2 0196  
                              u428_25 1415                                u453_25 1E5B  
                              u550_25 1F37                    __size_of_ReadUSART 000A  
                              u455_25 1E67                                u527_25 158C  
                              u456_25 1E7B                                u480_25 179C  
                              u536_25 1FC6                                u545_25 1EF3  
                              u457_25 1E87                                u537_25 1FE9  
                              u553_25 06F0                                _OSCCON 0099  
                              u546_25 1EFF                                u626_25 1E25  
                              u547_25 1F0B                                u555_25 1C7A  
                              u475_25 11C2                                u548_25 1F21  
                              u396_25 1A5B                                u476_25 1205  
                              u580_25 1AD9                                u549_25 1F2C  
                              u557_25 0BC0                                u581_25 1AE0  
                              u558_25 0C1D                                u399_23 1BCF  
                              u559_25 0C3A                                u760_25 001D  
                              _SPBRGH 019C                                _TX1STA 019E  
                              _UNLOCK 18BA                  __end_of_OddParityMSG 0926  
                          _ResendLast 1882                 _PS_2_Read_Data_Second 01E4  
                           ??_InitApp 0220                 ??_ConfigureOscillator 0220  
                              _Delete 00CE                      i1OpenUSART@spbrg 0070  
                      __CFG_PWRTE$OFF 0000                             ??_SetBaud 00B4  
                       ??_Timer2Reset 0070                            _Timer2Init 1000  
                         ?_BlockErase 0070                         InitUART@spbrg 023B  
                         SetBaud@Baud 00AF                    __size_of_OpenUSART 0041  
                     ?_Init_PS_2_Send 0070                                ___ftge 1C1D  
              __end_of_SpaceParityMSG 094A                     ?_Decode_Scan_Code 0070  
                              ___lmul 1AC6                        __CFG_STVREN$ON 0000  
                           ??___ftdiv 0232                             ??___lldiv 0228  
                         ?_Clock_TRIS 0070                             ??___ftmul 0242  
                           ??___llmod 0028                           SetBaud@temp 015A  
                 __size_ofi1_InitUART 00EB                     __end_of_PS_2_INIT 1928  
                 __size_ofi1_ReadBaud 0062                    ??_Decode_Scan_Code 0070  
                        ?i1_ReadUSART 0070                             ??_delayUS 0224  
__size_of_Decode_Scan_Code_FunctionE0 0012                    __size_of_Timer2OFF 0003  
                         ?_CloseUSART 0070                ??_Process_PS2_ScanCode 00BC  
                 __size_ofi1_Send_PS2 018E                 ___ftmul@f3_as_product 0247  
                   __end_ofi1___lldiv 1E9A                ?_WriteFlash_Sequential 007A  
                 __size_ofi1_Timer2ON 0003                     __end_ofi1_delayUS 1BE8  
                     SetBaud@Baudtemp 0152                          ?i1_OpenUSART 0070  
              __size_of_CheckSum_byte 002F                     ??i1_CheckSum_byte 0073  
                      ?_READ_PS_2_PIN 0070                     __end_of_Data_TRIS 18E6  
                           ??_sprintf 0030                        i1ReadBaud@temp 0030  
             i1READ_PS_2_PIN@DATA_CLK 0070               i1_PS_2_ENABLE_INTERRUPT 18C5  
             __end_of_UART_send_break 1862                       _ReadFlash_2Byte 1B54  
                     _ReadFlash_4Byte 1DAD               __end_of__initialization 0112  
                 Timer2Init@prescaler 0224                           _NoParityMSG 0926  
                  __size_of_WriteBaud 0066                      ?_BufferShiftBack 0070  
                          ___ftge@ff1 0220                            ___ftge@ff2 0223  
             ?_PS_2_DISABLE_INTERRUPT 0070                            ___ftdiv@f1 022F  
                          ___ftdiv@f2 022C                            ___ftdiv@f3 0237  
                          _VoltageMSG 0959                             ?_ISNUMBER 0070  
                  __size_of_baudUSART 0009                            ___ftmul@f1 023C  
                          ___ftmul@f2 023F                        __pcstackCOMMON 0070  
                        __pidataBANK1 1859                          __pidataBANK4 1855  
                           ?_UARTchar 0228                         ?_PS2RawToScan 0078  
                  InitUART@baudconfig 023D                           _Init_System 0A51  
                 __end_of_Timer2Reset 184F                     __end_of_ReadUSART 18BA  
                          ___lwtoft@c 0228                           _ReadVoltage 1F41  
                     ReadVoltage@temp 0253                          WriteBaud@row 00A0  
            __end_ofi1_UARTstringWAIT 1B54                        _OPTION_REGbits 0095  
                 ReadFlash_4Byte@temp 022E                          ?i1_baudUSART 0070  
                   ??_READ_CONFIG_PIN 0070        Process_PS2_ScanCode@shortbreak 01E0  
                       ReadUSART@data 0221                           _SinLEDtimer 025A  
  __size_of_Decode_Scan_Code_Function 0010                     __end_of_OpenUSART 1CDB  
                 __size_of_BlockErase 002B                       WriteBaud@Parity 00A6  
                   Send_PS2@oddparity 022E                            __pbssBANK1 00C5  
                          __pbssBANK3 01E2                            __pbssBANK4 0257  
                 __size_of_Clock_TRIS 000B                             ?_InitUART 022E  
                           ?_ReadBaud 0232                     __end_of_Timer2OFF 184C  
      __end_of_PS_2_DISABLE_INTERRUPT 19A7                    ReadVoltage@voltage 0250  
                             ?_UNLOCK 0070                           ?_ResendLast 0070  
                     i1_READ_PS_2_PIN 1981                   __size_of_CloseUSART 000E  
                           ?_Send_PS2 0070                            ??_ISNUMBER 0070  
                _ScanCodeFunctionNoE0 0700              __end_of_InternalADC_Read 1D1D  
   __size_ofi1_PS_2_DISABLE_INTERRUPT 0011                           ?_Timer2Init 0070  
                  _ScanCodeFunctionE0 0866                             ?_Timer2ON 0070  
           ?i1_PS_2_DISABLE_INTERRUPT 0070                         _CheckSum_byte 1AF5  
                          __pmaintext 1615                          ??i1_UARTchar 007A  
                         _ParityTyped 01EC                         BlockErase@row 0070  
                             ?___ftge 0220                               ?___lmul 0070  
                 i1CheckSum_byte@This 0070                        ??_PS2RawToScan 0020  
                       _Caps_Lock_Key 00CC                         ?_Reverse_Byte 0070  
                          __pintentry 0004                            ??_UARTchar 022A  
                      ___lmul@product 0078                             ?___ftpack 0220  
                     i1InitUART@spbrg 002D                     _PS_2_Buffer_items 00D1  
               i1CheckSum_byte@Parity 0076                             ?___lwtoft 0228  
                   __end_of_WriteBaud 1220                       ??_READ_PS_2_PIN 0220  
                 BufferShiftBack@size 0071                     __end_of_baudUSART 189C  
             __end_of_ReadFlash_2Byte 1B84               __end_of_ReadFlash_4Byte 1DFA  
                             _OSCSTAT 009A                   Clock_TRIS@direction 0220  
           ??i1_PS_2_ENABLE_INTERRUPT 0070                               _PPSLOCK 0E0F  
                        ??i1_InitUART 0025                  i1ReadFlash_2Byte@row 0070  
                        ??i1_ReadBaud 0028                         ?i1_Clock_TRIS 0070  
                  __end_ofi1_UARTchar 10F0                  __size_ofi1_Data_TRIS 000A  
                   i1OpenUSART@config 0072                  i1ReadFlash_4Byte@row 0075  
                          ??_InitUART 0233                            ??_ReadBaud 0236  
                        ??i1_Send_PS2 007A                 READ_PS_2_PIN@DATA_CLK 0220  
                    ?_UART_send_break 0070                         ?i1_CloseUSART 0070  
               _PS_2_ENABLE_INTERRUPT 18F2                       __size_of_UNLOCK 000B  
                        ??i1_Timer2ON 0070                               _InitApp 19D0  
                          ??_Send_PS2 022A                               _SetBaud 0B65  
                      InitUART@config 023E                        ?_CheckSum_byte 0220  
                         _Timer2Reset 184C       i1PS_2_ENABLE_INTERRUPT@DATA_CLK 0070  
                          ??_Timer2ON 0220                        InitUART@parity 0232  
             i1CheckSum_byte@Odd_Even 0072                        ??_Reverse_Byte 0070  
                             _Version 0966                       __size_of___ftge 003C  
                     __size_of___lmul 002F                               ___ftdiv 1220  
                             ___lldiv 1E9A                               ___ftmul 12C9  
                             ___llmod 1D1D                     i1Send_PS2@command 0021  
                  __end_ofi1_InitUART 1615                               _delayUS 1BE8  
                  __end_ofi1_ReadBaud 2000                            ??___ftpack 0225  
                             __ptext1 1C1D                               __ptext2 1F41  
                             __ptext3 19BB                               __ptext4 12C9  
                             __ptext5 1220                               __ptext6 1155  
                             __ptext7 1CDB                               __ptext8 187B  
                             __ptext9 1919                            ??___lwtoft 022B  
                __size_ofi1_ReadUSART 0009                          _OddParityMSG 0911  
                             _dpowers 08D3                    __end_ofi1_Send_PS2 0E6C  
                 __size_of_ResendLast 0008                             _T2CONbits 001C  
             i1CheckSum_byte@ThisTemp 0074                          __size_of_isr 00DD  
                   i1Send_PS2@timeout 0023              _Process_PS2_ScanCode$854 01DC  
            _Process_PS2_ScanCode$855 01DD              _Process_PS2_ScanCode$856 01DE  
            _Process_PS2_ScanCode$857 01DF           WriteFlash_Sequential@amount 007D  
         WriteFlash_Sequential@buffer 007C                    __end_ofi1_Timer2ON 1852  
               _UART_send_break_timed 19F4                   __size_of_Timer2Init 002B  
                  _DisableInternalADC 187B           WriteFlash_Sequential@spaces 0068  
                      ??i1_Clock_TRIS 0070               __end_ofi1_READ_PS_2_PIN 1994  
                             _sprintf 170A                               clrloop0 186F  
                   _Caps_Lock_Key_old 00CD                  __size_ofi1_OpenUSART 002C  
                end_of_initialization 0112                         ??_cleanBuffer 0072  
                      ??i1_CloseUSART 0070                 BufferShiftBack@buffer 0077  
                     i1ReadUSART@data 0071                               init_ram 1868  
                 ?_DisableInternalADC 0070                               initloop 1869  
                    UARTchar@override 0228                      ??_Init_PS_2_Send 0233  
        ?_Decode_Scan_Code_FunctionE0 0070                       ___lldiv@divisor 0220  
                     ___lldiv@counter 022D                          ??_BlockErase 0072  
                           _RCSTAbits 019D                          ??_Clock_TRIS 0220  
                        __pstringtext 0700                 __end_of_EvenParityMSG 0911  
                     i1_CheckSum_byte 1A98               ??_WriteFlash_Sequential 0020  
                        ??_CloseUSART 0220                  ??_DisableInternalADC 0220  
                           _PS_2_INIT 1919                      __CFG_FOSC$INTOSC 0000  
                           _PS_2_bits 00D2                             _TRISAbits 008C  
                           _TRISCbits 008E             __size_of_Decode_Scan_Code 0012  
                    ?_ReadFlash_2Byte 0220                      ?_ReadFlash_4Byte 0225  
                __size_ofi1_baudUSART 0006                             i1___lldiv 1E48  
               __end_of_MarkParityMSG 0959                    __end_of_BlockErase 1A6C  
         __end_of_ConfigureOscillator 1981                  __end_of_PS2RawToScan 1E48  
                           i1_delayUS 1BB5                ?_PS_2_ENABLE_INTERRUPT 0070  
                  __end_of_Clock_TRIS 18DB                             _BaudTyped 00C5  
                           _Data_TRIS 18DB                             _CapsCount 01E8  
               i1baudUSART@baudconfig 0070                           ___ftdiv@exp 023A  
                           _Caps_Lock 01E9                       ??_CheckSum_byte 0223  
                         _CCP2CONbits 029A                             _TXSTAbits 019E  
                      __end_of_UNLOCK 18C5                    __end_of_CloseUSART 1919  
                Timer2Init@postscaler 0223                   __end_of_cleanBuffer 06FE  
       ??_Decode_Scan_Code_FunctionE0 0070                           ___ftmul@exp 0246  
                   __size_of_ISNUMBER 000D                        __end_of___ftge 1C59  
               CheckSum_byte@Odd_Even 0222                          ?_Init_System 0070  
                      __end_of___lmul 1AF5                       _READ_CONFIG_PIN 1874  
                        _LineOverride 0260                     __size_of_UARTchar 0065  
                        ?_ReadVoltage 024C                            ?_PS_2_INIT 0070  
                           Send_PS2@i 0230         __size_of_Process_PS2_ScanCode 0561  
              ?_UART_send_break_timed 007A                   start_initialization 00E3  
                   ?i1_UARTstringWAIT 0021                             _ReadUSART 18B0  
             __size_of_UARTstringWAIT 0031                 CheckSum_byte@ThisTemp 0224  
                         __end_of_isr 00E1                            ?i1___lldiv 0070  
                  ??i1_UARTstringWAIT 0023      __end_ofi1_PS_2_DISABLE_INTERRUPT 1939  
                       WriteBaud@Baud 00A2                  __end_of_Reverse_Byte 1F41  
                    ?i1_READ_PS_2_PIN 0070                            ?i1_delayUS 0070  
            ??_Decode_Scan_Code_Shift 0070                         WriteBaud@temp 006A  
                           _OpenUSART 1C9A                            ?_Data_TRIS 0070  
                            ??_UNLOCK 0070                          ??_ResendLast 007E  
                     ___llmod@divisor 0020                     __size_of_InitUART 00E1  
                     ___llmod@counter 0029                     __size_of_ReadBaud 0062  
                           _Shift_Key 01EF                          ??_Timer2Init 0220  
                           _Timer2OFF 1849               __end_ofi1_CheckSum_byte 1AC6  
                   ?_InternalADC_Read 022A                     __size_of_Send_PS2 0194  
                            ??___ftge 0226                              ??___lmul 0078  
            __size_of_BufferShiftBack 0041                    ??_InternalADC_Read 022C  
                   __size_of_Timer2ON 0003                  __end_ofi1_Clock_TRIS 18A6  
                         __pdataBANK1 00E3                           __pdataBANK4 0262  
                __end_ofi1_CloseUSART 18F2                         i1ReadBaud@row 0024  
                   __size_of___ftpack 0065                      cleanBuffer@count 0070  
                  __end_of_ResendLast 188A                            ?_ReadUSART 0070  
                           ___latbits 0002                     __size_of___lwtoft 0015  
                       __pcstackBANK0 0020                         __pcstackBANK1 00A0  
                       __pcstackBANK2 0120                         __pcstackBANK3 01A0  
                       __pcstackBANK4 0220                             _WriteBaud 11BA  
                  i1UARTchar@override 0078                    ReadFlash_2Byte@row 0220  
                  __end_of_Timer2Init 102B                             _baudUSART 1893  
                  ReadFlash_4Byte@row 0225                           _cleanBuffer 06E6  
                          ?_OpenUSART 0220                           sprintf@flag 0036  
                         sprintf@prec 0037                              ?_InitApp 0070  
               __end_of_ScanCodeSHIFT 0866       Decode_Scan_Code_FunctionE0@Code 0070  
                            ?_SetBaud 00AF               __end_of_READ_CONFIG_PIN 187B  
                      ReadBaud@column 0234                            ?_Timer2OFF 0070  
                        ?_Timer2Reset 0070                              ?___ftdiv 022C  
                            ?___lldiv 0220                   i1Send_PS2@oddparity 0020  
                            ?___ftmul 023C                              ?___llmod 0020  
                    __CFG_PPS1WAY$OFF 0000         WriteFlash_Sequential@TempBufH 0023  
       WriteFlash_Sequential@TempBufL 0043                              ?_delayUS 0220  
              WriteFlash_Sequential@i 0069            Decode_Scan_Code_Shift@Code 0070  
                            _BAUD1CON 019F                           ??_PS_2_INIT 0233  
                    i1InitUART@config 0030                              _BAUDMODE 00CB  
               __size_of_PS2RawToScan 004E                      i1InitUART@parity 0024  
                       ??i1_Data_TRIS 0070                      _Decode_Scan_Code 1939  
                  __end_of_VoltageMSG 0966                            ?_WriteBaud 00A0  
    i1PS_2_DISABLE_INTERRUPT@DATA_CLK 0071                           ??i1___lldiv 0078  
               __end_of_READ_PS_2_PIN 19BB                              ?_sprintf 002A  
                          ?_baudUSART 0070                           ??i1_delayUS 0074  
                           delayUS@US 0220       __size_of_Decode_Scan_Code_Shift 0012  
          ?_Decode_Scan_Code_Function 0070                           ??_Data_TRIS 0220  
          WriteFlash_Sequential@tempH 0063            WriteFlash_Sequential@tempL 0064  
            i1_PS_2_DISABLE_INTERRUPT 1928                             clear_ram0 186E  
                            _PIE1bits 0091                          cleanBuffer@i 0074  
                BufferShiftBack@shift 0070                              _ISNUMBER 18FE  
                            _PIR1bits 0011                      ?i1_CheckSum_byte 0070  
            __size_of_UART_send_break 0005              WriteFlash_Sequential@row 007A  
                            _UARTchar 10F0                  i1Data_TRIS@direction 0070  
                        _PS2RawToScan 1DFA                         ??i1_ReadUSART 0070  
                            _LControl 00CF                  __size_of_Init_System 0114  
            ?i1_PS_2_ENABLE_INTERRUPT 0070        __size_of_WriteFlash_Sequential 00CC  
                   ??_BufferShiftBack 0072                 i1ReadFlash_4Byte@temp 0020  
       __end_of_WriteFlash_Sequential 1449                 __size_of_Reverse_Byte 0054  
                      _UARTstringWAIT 1B84                           ??_ReadUSART 0220  
                __size_of_ReadVoltage 005D                              _RControl 00D3  
                       ??i1_OpenUSART 0072              ??_PS_2_DISABLE_INTERRUPT 0220  
             ??_PS_2_ENABLE_INTERRUPT 0220                     ___lmul@multiplier 0070  
                            SetBaud@i 015E                              _InitUART 1449  
                            _ReadBaud 102B                           ??_OpenUSART 0222  
                 __end_ofi1_Data_TRIS 18B0                  i1UARTstringWAIT@data 0021  
                            _ScanCode 0784                       OpenUSART@config 0222  
   __end_of_Decode_Scan_Code_Function 0A51                              _Send_PS2 0E6C  
               __size_ofi1_Clock_TRIS 000A                      __size_of_InitApp 0024  
                         ??_Timer2OFF 0070                      ?_READ_CONFIG_PIN 0070  
                            _Timer2ON 1852                      __size_of_SetBaud 0179  
               __size_ofi1_CloseUSART 000C                          _Reverse_Byte 1EED  
                    __size_of___ftdiv 00A9                       cleanBuffer@data 0073  
              _Decode_Scan_Code_Shift 195D                      __size_of___lldiv 0053  
                    __size_of___ftmul 00B4                      __size_of___llmod 0043  
                       SetBaud@Parity 00B3                              ___ftpack 1155  
                      _PS_2_ScanCodes 00D7               ??_UART_send_break_timed 007C  
                    __size_of_delayUS 0035           __size_of_DisableInternalADC 0007  
              __end_of_UARTstringWAIT 1BB5                              ___lwtoft 19BB  
                     Send_PS2@command 022F                         ??i1_baudUSART 0070  
                          sprintf@val 0039                   __end_ofi1_ReadUSART 1893  
               i1Clock_TRIS@direction 0070                           ??_WriteBaud 00A7  
                       ISNUMBER@ascii 0070                       Send_PS2@timeout 0231  
                            __ptext10 1000                              __ptext11 1852  
                            __ptext20 1B84                              __ptext12 0676  
                            __ptext21 1BE8                              __ptext13 0E6C  
                            __ptext30 18B0                              __ptext22 10F0  
                            __ptext14 19A7                              __ptext31 1C9A  
                            __ptext23 1AF5                              __ptext15 18DB  
                            __ptext40 1882                              __ptext32 190B  
                            __ptext24 102B                              __ptext16 18D0  
                            __ptext41 1928                              __ptext33 19D0  
                            __ptext25 1DAD                              __ptext17 1994  
                            __ptext50 19F4                              __ptext42 1874  
                            __ptext34 196F                              __ptext26 1B54  
                            __ptext18 18F2                              __ptext51 185D  
                            __ptext43 0115                              __ptext27 1449  
                            __ptext19 0A51                              __ptext60 1A6C  
                            __ptext52 0B65                              __ptext44 0CDE  
                            __ptext36 184F                              __ptext28 1893  
                            __ptext61 18E6                              __ptext53 1B24  
                            __ptext45 1981                              __ptext37 18C5  
                            __ptext29 1E9A                              __ptext70 18BA  
                            __ptext62 170A                              __ptext54 108D  
                            __ptext46 18A6                              __ptext38 184C  
                            __ptext71 18FE                              __ptext63 1E48  
                            __ptext55 1F9E                              __ptext47 189C  
                            __ptext39 1849                              __ptext72 195D  
                            __ptext64 1D1D                              __ptext56 1D60  
                            __ptext48 06E6                              __ptext73 194B  
                            __ptext65 11BA                              __ptext57 152A  
                            __ptext49 1AC6                              __ptext74 0A41  
                            __ptext66 137D                              __ptext58 1862  
                            __ptext75 1939                              __ptext67 1BB5  
                            __ptext59 188A                              __ptext76 1C59  
                            __ptext68 1A19                              __ptext77 1DFA  
                            __ptext69 1A41                              __ptext78 1A98  
                            __ptext79 1EED         PS_2_ENABLE_INTERRUPT@DATA_CLK 0220  
                   i1_ReadFlash_2Byte 1A19                     i1_ReadFlash_4Byte 1D60  
                         ??_baudUSART 0220                          i1_Clock_TRIS 189C  
                    __size_of_sprintf 00F6                    ?i1_ReadFlash_2Byte 0070  
                  ?i1_ReadFlash_4Byte 0075                   __end_ofi1_OpenUSART 1A98  
                       __size_of_main 00F5                          i1_CloseUSART 18E6  
            __size_of_ReadFlash_2Byte 0030              __size_of_ReadFlash_4Byte 004D  
        __end_of_Process_PS2_ScanCode 0676                              delayUS@i 0225  
                            delayUS@j 0229             __size_ofi1_UARTstringWAIT 0030  
                        _pwrLEDtoggle 025C          __size_of_ConfigureOscillator 0012  
               __end_of_CheckSum_byte 1B24                   ??i1_ReadFlash_2Byte 0073  
                 ??i1_ReadFlash_4Byte 0079                            _RC1STAbits 019D  
                      CheckSum_byte@i 0227                        _Left_Shift_Key 01EB  
                __size_of_Timer2Reset 0003       __end_ofi1_PS_2_ENABLE_INTERRUPT 18D0  
             __size_of_Init_PS_2_Send 0070                        Timer2Init@time 0222  
                   ??_UART_send_break 0070                       ?_UARTstringWAIT 022F  
                 CheckSum_byte@Parity 0226                            _INTCONbits 000B  
           __size_of_InternalADC_Read 0042                        OpenUSART@spbrg 0220  
           __end_ofi1_ReadFlash_2Byte 1A41             __end_ofi1_ReadFlash_4Byte 1DAD  
                        UARTchar@data 022E                           i1_Data_TRIS 18A6  
     __size_of_PS_2_DISABLE_INTERRUPT 0013                   __end_ofi1_baudUSART 1868  
                            intlevel1 0000                             sprintf@ap 003D  
                           sprintf@sp 003E                          ?_cleanBuffer 0070  
                    ___lldiv@dividend 0224   __end_of_Decode_Scan_Code_FunctionE0 195D  
         _Decode_Scan_Code_FunctionE0 194B                     __CFG_CLKOUTEN$OFF 0000  
                      _BatteryVoltage 0257              __size_ofi1_READ_PS_2_PIN 0013  
            __end_of_Decode_Scan_Code 194B                            i1_UARTchar 108D  
                     _Right_Shift_Key 01EE                           i1Send_PS2@i 0022  
                         i1_ReadUSART 188A                         _EvenParityMSG 08FB  
                            sprintf@c 003F                              sprintf@f 002A  
                    i1ReadBaud@column 0026                      ___lldiv@quotient 0229  
             i1ReadFlash_2Byte@column 0072                  Decode_Scan_Code@Code 0070  
          ??i1_PS_2_DISABLE_INTERRUPT 0070                           i1_OpenUSART 1A6C  
                   Init_System@Parity 0250                    _Left_Shift_Key_old 00D0  
                          _TX1STAbits 019E                            i1_InitUART 152A  
                   CheckSum_byte@This 0220                        i1UARTchar@data 0020  
                          i1_ReadBaud 1F9E                         _MarkParityMSG 094A  
                          i1_Send_PS2 0CDE           ??_Decode_Scan_Code_Function 0070  
                     Init_System@Baud 024C                            i1_Timer2ON 184F  
                     Init_System@temp 0248                       PS2RawToScan@Raw 0078  
      PS_2_DISABLE_INTERRUPT@DATA_CLK 0221                      PS2RawToScan@temp 007A  
