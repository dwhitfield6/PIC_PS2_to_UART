

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Mon Mar 02 10:12:53 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F1705
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK4,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    12                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	intentry,global,class=CODE,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	dabs	1,0x7E,2
   102  0000                     	;# 
   103  0001                     	;# 
   104  0002                     	;# 
   105  0003                     	;# 
   106  0004                     	;# 
   107  0005                     	;# 
   108  0006                     	;# 
   109  0007                     	;# 
   110  0008                     	;# 
   111  0009                     	;# 
   112  000A                     	;# 
   113  000B                     	;# 
   114  000C                     	;# 
   115  000E                     	;# 
   116  0011                     	;# 
   117  0012                     	;# 
   118  0013                     	;# 
   119  0015                     	;# 
   120  0016                     	;# 
   121  0016                     	;# 
   122  0017                     	;# 
   123  0018                     	;# 
   124  0019                     	;# 
   125  001A                     	;# 
   126  001B                     	;# 
   127  001C                     	;# 
   128  008C                     	;# 
   129  008E                     	;# 
   130  0091                     	;# 
   131  0092                     	;# 
   132  0093                     	;# 
   133  0095                     	;# 
   134  0096                     	;# 
   135  0097                     	;# 
   136  0098                     	;# 
   137  0099                     	;# 
   138  009A                     	;# 
   139  009B                     	;# 
   140  009B                     	;# 
   141  009C                     	;# 
   142  009D                     	;# 
   143  009E                     	;# 
   144  009F                     	;# 
   145  010C                     	;# 
   146  010E                     	;# 
   147  0111                     	;# 
   148  0112                     	;# 
   149  0113                     	;# 
   150  0114                     	;# 
   151  0115                     	;# 
   152  0116                     	;# 
   153  0117                     	;# 
   154  0118                     	;# 
   155  0119                     	;# 
   156  011C                     	;# 
   157  018C                     	;# 
   158  018E                     	;# 
   159  0191                     	;# 
   160  0191                     	;# 
   161  0192                     	;# 
   162  0193                     	;# 
   163  0193                     	;# 
   164  0194                     	;# 
   165  0195                     	;# 
   166  0196                     	;# 
   167  0197                     	;# 
   168  0199                     	;# 
   169  0199                     	;# 
   170  0199                     	;# 
   171  019A                     	;# 
   172  019A                     	;# 
   173  019A                     	;# 
   174  019B                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019B                     	;# 
   179  019C                     	;# 
   180  019C                     	;# 
   181  019C                     	;# 
   182  019D                     	;# 
   183  019D                     	;# 
   184  019D                     	;# 
   185  019E                     	;# 
   186  019E                     	;# 
   187  019E                     	;# 
   188  019F                     	;# 
   189  019F                     	;# 
   190  019F                     	;# 
   191  019F                     	;# 
   192  019F                     	;# 
   193  020C                     	;# 
   194  020E                     	;# 
   195  0211                     	;# 
   196  0211                     	;# 
   197  0212                     	;# 
   198  0212                     	;# 
   199  0213                     	;# 
   200  0213                     	;# 
   201  0214                     	;# 
   202  0214                     	;# 
   203  0215                     	;# 
   204  0215                     	;# 
   205  0215                     	;# 
   206  0215                     	;# 
   207  0216                     	;# 
   208  0216                     	;# 
   209  0217                     	;# 
   210  0217                     	;# 
   211  028C                     	;# 
   212  028E                     	;# 
   213  0291                     	;# 
   214  0291                     	;# 
   215  0292                     	;# 
   216  0293                     	;# 
   217  0293                     	;# 
   218  0298                     	;# 
   219  0298                     	;# 
   220  0299                     	;# 
   221  029A                     	;# 
   222  029A                     	;# 
   223  029E                     	;# 
   224  030C                     	;# 
   225  030E                     	;# 
   226  038C                     	;# 
   227  038E                     	;# 
   228  0391                     	;# 
   229  0392                     	;# 
   230  0393                     	;# 
   231  0397                     	;# 
   232  0398                     	;# 
   233  0399                     	;# 
   234  0415                     	;# 
   235  0416                     	;# 
   236  0417                     	;# 
   237  041C                     	;# 
   238  041D                     	;# 
   239  041E                     	;# 
   240  0511                     	;# 
   241  0515                     	;# 
   242  0617                     	;# 
   243  0618                     	;# 
   244  0619                     	;# 
   245  0619                     	;# 
   246  061A                     	;# 
   247  061B                     	;# 
   248  061C                     	;# 
   249  061C                     	;# 
   250  0691                     	;# 
   251  0692                     	;# 
   252  0693                     	;# 
   253  0694                     	;# 
   254  0695                     	;# 
   255  0696                     	;# 
   256  0697                     	;# 
   257  0698                     	;# 
   258  0699                     	;# 
   259  069A                     	;# 
   260  069B                     	;# 
   261  069C                     	;# 
   262  069D                     	;# 
   263  069E                     	;# 
   264  069F                     	;# 
   265  0E0F                     	;# 
   266  0E10                     	;# 
   267  0E11                     	;# 
   268  0E12                     	;# 
   269  0E13                     	;# 
   270  0E14                     	;# 
   271  0E15                     	;# 
   272  0E17                     	;# 
   273  0E20                     	;# 
   274  0E21                     	;# 
   275  0E22                     	;# 
   276  0E24                     	;# 
   277  0E25                     	;# 
   278  0E28                     	;# 
   279  0E29                     	;# 
   280  0E2A                     	;# 
   281  0E2B                     	;# 
   282  0E90                     	;# 
   283  0E91                     	;# 
   284  0E92                     	;# 
   285  0E94                     	;# 
   286  0E95                     	;# 
   287  0EA0                     	;# 
   288  0EA1                     	;# 
   289  0EA2                     	;# 
   290  0EA3                     	;# 
   291  0EA4                     	;# 
   292  0EA5                     	;# 
   293  0F0F                     	;# 
   294  0F10                     	;# 
   295  0F11                     	;# 
   296  0F12                     	;# 
   297  0F13                     	;# 
   298  0F14                     	;# 
   299  0F15                     	;# 
   300  0F16                     	;# 
   301  0F17                     	;# 
   302  0F18                     	;# 
   303  0F19                     	;# 
   304  0F1A                     	;# 
   305  0F1B                     	;# 
   306  0F1C                     	;# 
   307  0F1D                     	;# 
   308  0F1E                     	;# 
   309  0F1F                     	;# 
   310  0F20                     	;# 
   311  0F21                     	;# 
   312  0F22                     	;# 
   313  0F23                     	;# 
   314  0F24                     	;# 
   315  0F25                     	;# 
   316  0F26                     	;# 
   317  0F27                     	;# 
   318  0F28                     	;# 
   319  0F29                     	;# 
   320  0F2A                     	;# 
   321  0F2B                     	;# 
   322  0F2C                     	;# 
   323  0F2D                     	;# 
   324  0F9E                     	;# 
   325  0FE4                     	;# 
   326  0FE5                     	;# 
   327  0FE6                     	;# 
   328  0FE7                     	;# 
   329  0FE8                     	;# 
   330  0FE9                     	;# 
   331  0FEA                     	;# 
   332  0FEB                     	;# 
   333  0FED                     	;# 
   334  0FEE                     	;# 
   335  0FEF                     	;# 
   336  0000                     	;# 
   337  0001                     	;# 
   338  0002                     	;# 
   339  0003                     	;# 
   340  0004                     	;# 
   341  0005                     	;# 
   342  0006                     	;# 
   343  0007                     	;# 
   344  0008                     	;# 
   345  0009                     	;# 
   346  000A                     	;# 
   347  000B                     	;# 
   348  000C                     	;# 
   349  000E                     	;# 
   350  0011                     	;# 
   351  0012                     	;# 
   352  0013                     	;# 
   353  0015                     	;# 
   354  0016                     	;# 
   355  0016                     	;# 
   356  0017                     	;# 
   357  0018                     	;# 
   358  0019                     	;# 
   359  001A                     	;# 
   360  001B                     	;# 
   361  001C                     	;# 
   362  008C                     	;# 
   363  008E                     	;# 
   364  0091                     	;# 
   365  0092                     	;# 
   366  0093                     	;# 
   367  0095                     	;# 
   368  0096                     	;# 
   369  0097                     	;# 
   370  0098                     	;# 
   371  0099                     	;# 
   372  009A                     	;# 
   373  009B                     	;# 
   374  009B                     	;# 
   375  009C                     	;# 
   376  009D                     	;# 
   377  009E                     	;# 
   378  009F                     	;# 
   379  010C                     	;# 
   380  010E                     	;# 
   381  0111                     	;# 
   382  0112                     	;# 
   383  0113                     	;# 
   384  0114                     	;# 
   385  0115                     	;# 
   386  0116                     	;# 
   387  0117                     	;# 
   388  0118                     	;# 
   389  0119                     	;# 
   390  011C                     	;# 
   391  018C                     	;# 
   392  018E                     	;# 
   393  0191                     	;# 
   394  0191                     	;# 
   395  0192                     	;# 
   396  0193                     	;# 
   397  0193                     	;# 
   398  0194                     	;# 
   399  0195                     	;# 
   400  0196                     	;# 
   401  0197                     	;# 
   402  0199                     	;# 
   403  0199                     	;# 
   404  0199                     	;# 
   405  019A                     	;# 
   406  019A                     	;# 
   407  019A                     	;# 
   408  019B                     	;# 
   409  019B                     	;# 
   410  019B                     	;# 
   411  019B                     	;# 
   412  019B                     	;# 
   413  019C                     	;# 
   414  019C                     	;# 
   415  019C                     	;# 
   416  019D                     	;# 
   417  019D                     	;# 
   418  019D                     	;# 
   419  019E                     	;# 
   420  019E                     	;# 
   421  019E                     	;# 
   422  019F                     	;# 
   423  019F                     	;# 
   424  019F                     	;# 
   425  019F                     	;# 
   426  019F                     	;# 
   427  020C                     	;# 
   428  020E                     	;# 
   429  0211                     	;# 
   430  0211                     	;# 
   431  0212                     	;# 
   432  0212                     	;# 
   433  0213                     	;# 
   434  0213                     	;# 
   435  0214                     	;# 
   436  0214                     	;# 
   437  0215                     	;# 
   438  0215                     	;# 
   439  0215                     	;# 
   440  0215                     	;# 
   441  0216                     	;# 
   442  0216                     	;# 
   443  0217                     	;# 
   444  0217                     	;# 
   445  028C                     	;# 
   446  028E                     	;# 
   447  0291                     	;# 
   448  0291                     	;# 
   449  0292                     	;# 
   450  0293                     	;# 
   451  0293                     	;# 
   452  0298                     	;# 
   453  0298                     	;# 
   454  0299                     	;# 
   455  029A                     	;# 
   456  029A                     	;# 
   457  029E                     	;# 
   458  030C                     	;# 
   459  030E                     	;# 
   460  038C                     	;# 
   461  038E                     	;# 
   462  0391                     	;# 
   463  0392                     	;# 
   464  0393                     	;# 
   465  0397                     	;# 
   466  0398                     	;# 
   467  0399                     	;# 
   468  0415                     	;# 
   469  0416                     	;# 
   470  0417                     	;# 
   471  041C                     	;# 
   472  041D                     	;# 
   473  041E                     	;# 
   474  0511                     	;# 
   475  0515                     	;# 
   476  0617                     	;# 
   477  0618                     	;# 
   478  0619                     	;# 
   479  0619                     	;# 
   480  061A                     	;# 
   481  061B                     	;# 
   482  061C                     	;# 
   483  061C                     	;# 
   484  0691                     	;# 
   485  0692                     	;# 
   486  0693                     	;# 
   487  0694                     	;# 
   488  0695                     	;# 
   489  0696                     	;# 
   490  0697                     	;# 
   491  0698                     	;# 
   492  0699                     	;# 
   493  069A                     	;# 
   494  069B                     	;# 
   495  069C                     	;# 
   496  069D                     	;# 
   497  069E                     	;# 
   498  069F                     	;# 
   499  0E0F                     	;# 
   500  0E10                     	;# 
   501  0E11                     	;# 
   502  0E12                     	;# 
   503  0E13                     	;# 
   504  0E14                     	;# 
   505  0E15                     	;# 
   506  0E17                     	;# 
   507  0E20                     	;# 
   508  0E21                     	;# 
   509  0E22                     	;# 
   510  0E24                     	;# 
   511  0E25                     	;# 
   512  0E28                     	;# 
   513  0E29                     	;# 
   514  0E2A                     	;# 
   515  0E2B                     	;# 
   516  0E90                     	;# 
   517  0E91                     	;# 
   518  0E92                     	;# 
   519  0E94                     	;# 
   520  0E95                     	;# 
   521  0EA0                     	;# 
   522  0EA1                     	;# 
   523  0EA2                     	;# 
   524  0EA3                     	;# 
   525  0EA4                     	;# 
   526  0EA5                     	;# 
   527  0F0F                     	;# 
   528  0F10                     	;# 
   529  0F11                     	;# 
   530  0F12                     	;# 
   531  0F13                     	;# 
   532  0F14                     	;# 
   533  0F15                     	;# 
   534  0F16                     	;# 
   535  0F17                     	;# 
   536  0F18                     	;# 
   537  0F19                     	;# 
   538  0F1A                     	;# 
   539  0F1B                     	;# 
   540  0F1C                     	;# 
   541  0F1D                     	;# 
   542  0F1E                     	;# 
   543  0F1F                     	;# 
   544  0F20                     	;# 
   545  0F21                     	;# 
   546  0F22                     	;# 
   547  0F23                     	;# 
   548  0F24                     	;# 
   549  0F25                     	;# 
   550  0F26                     	;# 
   551  0F27                     	;# 
   552  0F28                     	;# 
   553  0F29                     	;# 
   554  0F2A                     	;# 
   555  0F2B                     	;# 
   556  0F2C                     	;# 
   557  0F2D                     	;# 
   558  0F9E                     	;# 
   559  0FE4                     	;# 
   560  0FE5                     	;# 
   561  0FE6                     	;# 
   562  0FE7                     	;# 
   563  0FE8                     	;# 
   564  0FE9                     	;# 
   565  0FEA                     	;# 
   566  0FEB                     	;# 
   567  0FED                     	;# 
   568  0FEE                     	;# 
   569  0FEF                     	;# 
   570  0000                     	;# 
   571  0001                     	;# 
   572  0002                     	;# 
   573  0003                     	;# 
   574  0004                     	;# 
   575  0005                     	;# 
   576  0006                     	;# 
   577  0007                     	;# 
   578  0008                     	;# 
   579  0009                     	;# 
   580  000A                     	;# 
   581  000B                     	;# 
   582  000C                     	;# 
   583  000E                     	;# 
   584  0011                     	;# 
   585  0012                     	;# 
   586  0013                     	;# 
   587  0015                     	;# 
   588  0016                     	;# 
   589  0016                     	;# 
   590  0017                     	;# 
   591  0018                     	;# 
   592  0019                     	;# 
   593  001A                     	;# 
   594  001B                     	;# 
   595  001C                     	;# 
   596  008C                     	;# 
   597  008E                     	;# 
   598  0091                     	;# 
   599  0092                     	;# 
   600  0093                     	;# 
   601  0095                     	;# 
   602  0096                     	;# 
   603  0097                     	;# 
   604  0098                     	;# 
   605  0099                     	;# 
   606  009A                     	;# 
   607  009B                     	;# 
   608  009B                     	;# 
   609  009C                     	;# 
   610  009D                     	;# 
   611  009E                     	;# 
   612  009F                     	;# 
   613  010C                     	;# 
   614  010E                     	;# 
   615  0111                     	;# 
   616  0112                     	;# 
   617  0113                     	;# 
   618  0114                     	;# 
   619  0115                     	;# 
   620  0116                     	;# 
   621  0117                     	;# 
   622  0118                     	;# 
   623  0119                     	;# 
   624  011C                     	;# 
   625  018C                     	;# 
   626  018E                     	;# 
   627  0191                     	;# 
   628  0191                     	;# 
   629  0192                     	;# 
   630  0193                     	;# 
   631  0193                     	;# 
   632  0194                     	;# 
   633  0195                     	;# 
   634  0196                     	;# 
   635  0197                     	;# 
   636  0199                     	;# 
   637  0199                     	;# 
   638  0199                     	;# 
   639  019A                     	;# 
   640  019A                     	;# 
   641  019A                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019B                     	;# 
   647  019C                     	;# 
   648  019C                     	;# 
   649  019C                     	;# 
   650  019D                     	;# 
   651  019D                     	;# 
   652  019D                     	;# 
   653  019E                     	;# 
   654  019E                     	;# 
   655  019E                     	;# 
   656  019F                     	;# 
   657  019F                     	;# 
   658  019F                     	;# 
   659  019F                     	;# 
   660  019F                     	;# 
   661  020C                     	;# 
   662  020E                     	;# 
   663  0211                     	;# 
   664  0211                     	;# 
   665  0212                     	;# 
   666  0212                     	;# 
   667  0213                     	;# 
   668  0213                     	;# 
   669  0214                     	;# 
   670  0214                     	;# 
   671  0215                     	;# 
   672  0215                     	;# 
   673  0215                     	;# 
   674  0215                     	;# 
   675  0216                     	;# 
   676  0216                     	;# 
   677  0217                     	;# 
   678  0217                     	;# 
   679  028C                     	;# 
   680  028E                     	;# 
   681  0291                     	;# 
   682  0291                     	;# 
   683  0292                     	;# 
   684  0293                     	;# 
   685  0293                     	;# 
   686  0298                     	;# 
   687  0298                     	;# 
   688  0299                     	;# 
   689  029A                     	;# 
   690  029A                     	;# 
   691  029E                     	;# 
   692  030C                     	;# 
   693  030E                     	;# 
   694  038C                     	;# 
   695  038E                     	;# 
   696  0391                     	;# 
   697  0392                     	;# 
   698  0393                     	;# 
   699  0397                     	;# 
   700  0398                     	;# 
   701  0399                     	;# 
   702  0415                     	;# 
   703  0416                     	;# 
   704  0417                     	;# 
   705  041C                     	;# 
   706  041D                     	;# 
   707  041E                     	;# 
   708  0511                     	;# 
   709  0515                     	;# 
   710  0617                     	;# 
   711  0618                     	;# 
   712  0619                     	;# 
   713  0619                     	;# 
   714  061A                     	;# 
   715  061B                     	;# 
   716  061C                     	;# 
   717  061C                     	;# 
   718  0691                     	;# 
   719  0692                     	;# 
   720  0693                     	;# 
   721  0694                     	;# 
   722  0695                     	;# 
   723  0696                     	;# 
   724  0697                     	;# 
   725  0698                     	;# 
   726  0699                     	;# 
   727  069A                     	;# 
   728  069B                     	;# 
   729  069C                     	;# 
   730  069D                     	;# 
   731  069E                     	;# 
   732  069F                     	;# 
   733  0E0F                     	;# 
   734  0E10                     	;# 
   735  0E11                     	;# 
   736  0E12                     	;# 
   737  0E13                     	;# 
   738  0E14                     	;# 
   739  0E15                     	;# 
   740  0E17                     	;# 
   741  0E20                     	;# 
   742  0E21                     	;# 
   743  0E22                     	;# 
   744  0E24                     	;# 
   745  0E25                     	;# 
   746  0E28                     	;# 
   747  0E29                     	;# 
   748  0E2A                     	;# 
   749  0E2B                     	;# 
   750  0E90                     	;# 
   751  0E91                     	;# 
   752  0E92                     	;# 
   753  0E94                     	;# 
   754  0E95                     	;# 
   755  0EA0                     	;# 
   756  0EA1                     	;# 
   757  0EA2                     	;# 
   758  0EA3                     	;# 
   759  0EA4                     	;# 
   760  0EA5                     	;# 
   761  0F0F                     	;# 
   762  0F10                     	;# 
   763  0F11                     	;# 
   764  0F12                     	;# 
   765  0F13                     	;# 
   766  0F14                     	;# 
   767  0F15                     	;# 
   768  0F16                     	;# 
   769  0F17                     	;# 
   770  0F18                     	;# 
   771  0F19                     	;# 
   772  0F1A                     	;# 
   773  0F1B                     	;# 
   774  0F1C                     	;# 
   775  0F1D                     	;# 
   776  0F1E                     	;# 
   777  0F1F                     	;# 
   778  0F20                     	;# 
   779  0F21                     	;# 
   780  0F22                     	;# 
   781  0F23                     	;# 
   782  0F24                     	;# 
   783  0F25                     	;# 
   784  0F26                     	;# 
   785  0F27                     	;# 
   786  0F28                     	;# 
   787  0F29                     	;# 
   788  0F2A                     	;# 
   789  0F2B                     	;# 
   790  0F2C                     	;# 
   791  0F2D                     	;# 
   792  0F9E                     	;# 
   793  0FE4                     	;# 
   794  0FE5                     	;# 
   795  0FE6                     	;# 
   796  0FE7                     	;# 
   797  0FE8                     	;# 
   798  0FE9                     	;# 
   799  0FEA                     	;# 
   800  0FEB                     	;# 
   801  0FED                     	;# 
   802  0FEE                     	;# 
   803  0FEF                     	;# 
   804  0000                     	;# 
   805  0001                     	;# 
   806  0002                     	;# 
   807  0003                     	;# 
   808  0004                     	;# 
   809  0005                     	;# 
   810  0006                     	;# 
   811  0007                     	;# 
   812  0008                     	;# 
   813  0009                     	;# 
   814  000A                     	;# 
   815  000B                     	;# 
   816  000C                     	;# 
   817  000E                     	;# 
   818  0011                     	;# 
   819  0012                     	;# 
   820  0013                     	;# 
   821  0015                     	;# 
   822  0016                     	;# 
   823  0016                     	;# 
   824  0017                     	;# 
   825  0018                     	;# 
   826  0019                     	;# 
   827  001A                     	;# 
   828  001B                     	;# 
   829  001C                     	;# 
   830  008C                     	;# 
   831  008E                     	;# 
   832  0091                     	;# 
   833  0092                     	;# 
   834  0093                     	;# 
   835  0095                     	;# 
   836  0096                     	;# 
   837  0097                     	;# 
   838  0098                     	;# 
   839  0099                     	;# 
   840  009A                     	;# 
   841  009B                     	;# 
   842  009B                     	;# 
   843  009C                     	;# 
   844  009D                     	;# 
   845  009E                     	;# 
   846  009F                     	;# 
   847  010C                     	;# 
   848  010E                     	;# 
   849  0111                     	;# 
   850  0112                     	;# 
   851  0113                     	;# 
   852  0114                     	;# 
   853  0115                     	;# 
   854  0116                     	;# 
   855  0117                     	;# 
   856  0118                     	;# 
   857  0119                     	;# 
   858  011C                     	;# 
   859  018C                     	;# 
   860  018E                     	;# 
   861  0191                     	;# 
   862  0191                     	;# 
   863  0192                     	;# 
   864  0193                     	;# 
   865  0193                     	;# 
   866  0194                     	;# 
   867  0195                     	;# 
   868  0196                     	;# 
   869  0197                     	;# 
   870  0199                     	;# 
   871  0199                     	;# 
   872  0199                     	;# 
   873  019A                     	;# 
   874  019A                     	;# 
   875  019A                     	;# 
   876  019B                     	;# 
   877  019B                     	;# 
   878  019B                     	;# 
   879  019B                     	;# 
   880  019B                     	;# 
   881  019C                     	;# 
   882  019C                     	;# 
   883  019C                     	;# 
   884  019D                     	;# 
   885  019D                     	;# 
   886  019D                     	;# 
   887  019E                     	;# 
   888  019E                     	;# 
   889  019E                     	;# 
   890  019F                     	;# 
   891  019F                     	;# 
   892  019F                     	;# 
   893  019F                     	;# 
   894  019F                     	;# 
   895  020C                     	;# 
   896  020E                     	;# 
   897  0211                     	;# 
   898  0211                     	;# 
   899  0212                     	;# 
   900  0212                     	;# 
   901  0213                     	;# 
   902  0213                     	;# 
   903  0214                     	;# 
   904  0214                     	;# 
   905  0215                     	;# 
   906  0215                     	;# 
   907  0215                     	;# 
   908  0215                     	;# 
   909  0216                     	;# 
   910  0216                     	;# 
   911  0217                     	;# 
   912  0217                     	;# 
   913  028C                     	;# 
   914  028E                     	;# 
   915  0291                     	;# 
   916  0291                     	;# 
   917  0292                     	;# 
   918  0293                     	;# 
   919  0293                     	;# 
   920  0298                     	;# 
   921  0298                     	;# 
   922  0299                     	;# 
   923  029A                     	;# 
   924  029A                     	;# 
   925  029E                     	;# 
   926  030C                     	;# 
   927  030E                     	;# 
   928  038C                     	;# 
   929  038E                     	;# 
   930  0391                     	;# 
   931  0392                     	;# 
   932  0393                     	;# 
   933  0397                     	;# 
   934  0398                     	;# 
   935  0399                     	;# 
   936  0415                     	;# 
   937  0416                     	;# 
   938  0417                     	;# 
   939  041C                     	;# 
   940  041D                     	;# 
   941  041E                     	;# 
   942  0511                     	;# 
   943  0515                     	;# 
   944  0617                     	;# 
   945  0618                     	;# 
   946  0619                     	;# 
   947  0619                     	;# 
   948  061A                     	;# 
   949  061B                     	;# 
   950  061C                     	;# 
   951  061C                     	;# 
   952  0691                     	;# 
   953  0692                     	;# 
   954  0693                     	;# 
   955  0694                     	;# 
   956  0695                     	;# 
   957  0696                     	;# 
   958  0697                     	;# 
   959  0698                     	;# 
   960  0699                     	;# 
   961  069A                     	;# 
   962  069B                     	;# 
   963  069C                     	;# 
   964  069D                     	;# 
   965  069E                     	;# 
   966  069F                     	;# 
   967  0E0F                     	;# 
   968  0E10                     	;# 
   969  0E11                     	;# 
   970  0E12                     	;# 
   971  0E13                     	;# 
   972  0E14                     	;# 
   973  0E15                     	;# 
   974  0E17                     	;# 
   975  0E20                     	;# 
   976  0E21                     	;# 
   977  0E22                     	;# 
   978  0E24                     	;# 
   979  0E25                     	;# 
   980  0E28                     	;# 
   981  0E29                     	;# 
   982  0E2A                     	;# 
   983  0E2B                     	;# 
   984  0E90                     	;# 
   985  0E91                     	;# 
   986  0E92                     	;# 
   987  0E94                     	;# 
   988  0E95                     	;# 
   989  0EA0                     	;# 
   990  0EA1                     	;# 
   991  0EA2                     	;# 
   992  0EA3                     	;# 
   993  0EA4                     	;# 
   994  0EA5                     	;# 
   995  0F0F                     	;# 
   996  0F10                     	;# 
   997  0F11                     	;# 
   998  0F12                     	;# 
   999  0F13                     	;# 
  1000  0F14                     	;# 
  1001  0F15                     	;# 
  1002  0F16                     	;# 
  1003  0F17                     	;# 
  1004  0F18                     	;# 
  1005  0F19                     	;# 
  1006  0F1A                     	;# 
  1007  0F1B                     	;# 
  1008  0F1C                     	;# 
  1009  0F1D                     	;# 
  1010  0F1E                     	;# 
  1011  0F1F                     	;# 
  1012  0F20                     	;# 
  1013  0F21                     	;# 
  1014  0F22                     	;# 
  1015  0F23                     	;# 
  1016  0F24                     	;# 
  1017  0F25                     	;# 
  1018  0F26                     	;# 
  1019  0F27                     	;# 
  1020  0F28                     	;# 
  1021  0F29                     	;# 
  1022  0F2A                     	;# 
  1023  0F2B                     	;# 
  1024  0F2C                     	;# 
  1025  0F2D                     	;# 
  1026  0F9E                     	;# 
  1027  0FE4                     	;# 
  1028  0FE5                     	;# 
  1029  0FE6                     	;# 
  1030  0FE7                     	;# 
  1031  0FE8                     	;# 
  1032  0FE9                     	;# 
  1033  0FEA                     	;# 
  1034  0FEB                     	;# 
  1035  0FED                     	;# 
  1036  0FEE                     	;# 
  1037  0FEF                     	;# 
  1038  0000                     	;# 
  1039  0001                     	;# 
  1040  0002                     	;# 
  1041  0003                     	;# 
  1042  0004                     	;# 
  1043  0005                     	;# 
  1044  0006                     	;# 
  1045  0007                     	;# 
  1046  0008                     	;# 
  1047  0009                     	;# 
  1048  000A                     	;# 
  1049  000B                     	;# 
  1050  000C                     	;# 
  1051  000E                     	;# 
  1052  0011                     	;# 
  1053  0012                     	;# 
  1054  0013                     	;# 
  1055  0015                     	;# 
  1056  0016                     	;# 
  1057  0016                     	;# 
  1058  0017                     	;# 
  1059  0018                     	;# 
  1060  0019                     	;# 
  1061  001A                     	;# 
  1062  001B                     	;# 
  1063  001C                     	;# 
  1064  008C                     	;# 
  1065  008E                     	;# 
  1066  0091                     	;# 
  1067  0092                     	;# 
  1068  0093                     	;# 
  1069  0095                     	;# 
  1070  0096                     	;# 
  1071  0097                     	;# 
  1072  0098                     	;# 
  1073  0099                     	;# 
  1074  009A                     	;# 
  1075  009B                     	;# 
  1076  009B                     	;# 
  1077  009C                     	;# 
  1078  009D                     	;# 
  1079  009E                     	;# 
  1080  009F                     	;# 
  1081  010C                     	;# 
  1082  010E                     	;# 
  1083  0111                     	;# 
  1084  0112                     	;# 
  1085  0113                     	;# 
  1086  0114                     	;# 
  1087  0115                     	;# 
  1088  0116                     	;# 
  1089  0117                     	;# 
  1090  0118                     	;# 
  1091  0119                     	;# 
  1092  011C                     	;# 
  1093  018C                     	;# 
  1094  018E                     	;# 
  1095  0191                     	;# 
  1096  0191                     	;# 
  1097  0192                     	;# 
  1098  0193                     	;# 
  1099  0193                     	;# 
  1100  0194                     	;# 
  1101  0195                     	;# 
  1102  0196                     	;# 
  1103  0197                     	;# 
  1104  0199                     	;# 
  1105  0199                     	;# 
  1106  0199                     	;# 
  1107  019A                     	;# 
  1108  019A                     	;# 
  1109  019A                     	;# 
  1110  019B                     	;# 
  1111  019B                     	;# 
  1112  019B                     	;# 
  1113  019B                     	;# 
  1114  019B                     	;# 
  1115  019C                     	;# 
  1116  019C                     	;# 
  1117  019C                     	;# 
  1118  019D                     	;# 
  1119  019D                     	;# 
  1120  019D                     	;# 
  1121  019E                     	;# 
  1122  019E                     	;# 
  1123  019E                     	;# 
  1124  019F                     	;# 
  1125  019F                     	;# 
  1126  019F                     	;# 
  1127  019F                     	;# 
  1128  019F                     	;# 
  1129  020C                     	;# 
  1130  020E                     	;# 
  1131  0211                     	;# 
  1132  0211                     	;# 
  1133  0212                     	;# 
  1134  0212                     	;# 
  1135  0213                     	;# 
  1136  0213                     	;# 
  1137  0214                     	;# 
  1138  0214                     	;# 
  1139  0215                     	;# 
  1140  0215                     	;# 
  1141  0215                     	;# 
  1142  0215                     	;# 
  1143  0216                     	;# 
  1144  0216                     	;# 
  1145  0217                     	;# 
  1146  0217                     	;# 
  1147  028C                     	;# 
  1148  028E                     	;# 
  1149  0291                     	;# 
  1150  0291                     	;# 
  1151  0292                     	;# 
  1152  0293                     	;# 
  1153  0293                     	;# 
  1154  0298                     	;# 
  1155  0298                     	;# 
  1156  0299                     	;# 
  1157  029A                     	;# 
  1158  029A                     	;# 
  1159  029E                     	;# 
  1160  030C                     	;# 
  1161  030E                     	;# 
  1162  038C                     	;# 
  1163  038E                     	;# 
  1164  0391                     	;# 
  1165  0392                     	;# 
  1166  0393                     	;# 
  1167  0397                     	;# 
  1168  0398                     	;# 
  1169  0399                     	;# 
  1170  0415                     	;# 
  1171  0416                     	;# 
  1172  0417                     	;# 
  1173  041C                     	;# 
  1174  041D                     	;# 
  1175  041E                     	;# 
  1176  0511                     	;# 
  1177  0515                     	;# 
  1178  0617                     	;# 
  1179  0618                     	;# 
  1180  0619                     	;# 
  1181  0619                     	;# 
  1182  061A                     	;# 
  1183  061B                     	;# 
  1184  061C                     	;# 
  1185  061C                     	;# 
  1186  0691                     	;# 
  1187  0692                     	;# 
  1188  0693                     	;# 
  1189  0694                     	;# 
  1190  0695                     	;# 
  1191  0696                     	;# 
  1192  0697                     	;# 
  1193  0698                     	;# 
  1194  0699                     	;# 
  1195  069A                     	;# 
  1196  069B                     	;# 
  1197  069C                     	;# 
  1198  069D                     	;# 
  1199  069E                     	;# 
  1200  069F                     	;# 
  1201  0E0F                     	;# 
  1202  0E10                     	;# 
  1203  0E11                     	;# 
  1204  0E12                     	;# 
  1205  0E13                     	;# 
  1206  0E14                     	;# 
  1207  0E15                     	;# 
  1208  0E17                     	;# 
  1209  0E20                     	;# 
  1210  0E21                     	;# 
  1211  0E22                     	;# 
  1212  0E24                     	;# 
  1213  0E25                     	;# 
  1214  0E28                     	;# 
  1215  0E29                     	;# 
  1216  0E2A                     	;# 
  1217  0E2B                     	;# 
  1218  0E90                     	;# 
  1219  0E91                     	;# 
  1220  0E92                     	;# 
  1221  0E94                     	;# 
  1222  0E95                     	;# 
  1223  0EA0                     	;# 
  1224  0EA1                     	;# 
  1225  0EA2                     	;# 
  1226  0EA3                     	;# 
  1227  0EA4                     	;# 
  1228  0EA5                     	;# 
  1229  0F0F                     	;# 
  1230  0F10                     	;# 
  1231  0F11                     	;# 
  1232  0F12                     	;# 
  1233  0F13                     	;# 
  1234  0F14                     	;# 
  1235  0F15                     	;# 
  1236  0F16                     	;# 
  1237  0F17                     	;# 
  1238  0F18                     	;# 
  1239  0F19                     	;# 
  1240  0F1A                     	;# 
  1241  0F1B                     	;# 
  1242  0F1C                     	;# 
  1243  0F1D                     	;# 
  1244  0F1E                     	;# 
  1245  0F1F                     	;# 
  1246  0F20                     	;# 
  1247  0F21                     	;# 
  1248  0F22                     	;# 
  1249  0F23                     	;# 
  1250  0F24                     	;# 
  1251  0F25                     	;# 
  1252  0F26                     	;# 
  1253  0F27                     	;# 
  1254  0F28                     	;# 
  1255  0F29                     	;# 
  1256  0F2A                     	;# 
  1257  0F2B                     	;# 
  1258  0F2C                     	;# 
  1259  0F2D                     	;# 
  1260  0F9E                     	;# 
  1261  0FE4                     	;# 
  1262  0FE5                     	;# 
  1263  0FE6                     	;# 
  1264  0FE7                     	;# 
  1265  0FE8                     	;# 
  1266  0FE9                     	;# 
  1267  0FEA                     	;# 
  1268  0FEB                     	;# 
  1269  0FED                     	;# 
  1270  0FEE                     	;# 
  1271  0FEF                     	;# 
  1272  0000                     	;# 
  1273  0001                     	;# 
  1274  0002                     	;# 
  1275  0003                     	;# 
  1276  0004                     	;# 
  1277  0005                     	;# 
  1278  0006                     	;# 
  1279  0007                     	;# 
  1280  0008                     	;# 
  1281  0009                     	;# 
  1282  000A                     	;# 
  1283  000B                     	;# 
  1284  000C                     	;# 
  1285  000E                     	;# 
  1286  0011                     	;# 
  1287  0012                     	;# 
  1288  0013                     	;# 
  1289  0015                     	;# 
  1290  0016                     	;# 
  1291  0016                     	;# 
  1292  0017                     	;# 
  1293  0018                     	;# 
  1294  0019                     	;# 
  1295  001A                     	;# 
  1296  001B                     	;# 
  1297  001C                     	;# 
  1298  008C                     	;# 
  1299  008E                     	;# 
  1300  0091                     	;# 
  1301  0092                     	;# 
  1302  0093                     	;# 
  1303  0095                     	;# 
  1304  0096                     	;# 
  1305  0097                     	;# 
  1306  0098                     	;# 
  1307  0099                     	;# 
  1308  009A                     	;# 
  1309  009B                     	;# 
  1310  009B                     	;# 
  1311  009C                     	;# 
  1312  009D                     	;# 
  1313  009E                     	;# 
  1314  009F                     	;# 
  1315  010C                     	;# 
  1316  010E                     	;# 
  1317  0111                     	;# 
  1318  0112                     	;# 
  1319  0113                     	;# 
  1320  0114                     	;# 
  1321  0115                     	;# 
  1322  0116                     	;# 
  1323  0117                     	;# 
  1324  0118                     	;# 
  1325  0119                     	;# 
  1326  011C                     	;# 
  1327  018C                     	;# 
  1328  018E                     	;# 
  1329  0191                     	;# 
  1330  0191                     	;# 
  1331  0192                     	;# 
  1332  0193                     	;# 
  1333  0193                     	;# 
  1334  0194                     	;# 
  1335  0195                     	;# 
  1336  0196                     	;# 
  1337  0197                     	;# 
  1338  0199                     	;# 
  1339  0199                     	;# 
  1340  0199                     	;# 
  1341  019A                     	;# 
  1342  019A                     	;# 
  1343  019A                     	;# 
  1344  019B                     	;# 
  1345  019B                     	;# 
  1346  019B                     	;# 
  1347  019B                     	;# 
  1348  019B                     	;# 
  1349  019C                     	;# 
  1350  019C                     	;# 
  1351  019C                     	;# 
  1352  019D                     	;# 
  1353  019D                     	;# 
  1354  019D                     	;# 
  1355  019E                     	;# 
  1356  019E                     	;# 
  1357  019E                     	;# 
  1358  019F                     	;# 
  1359  019F                     	;# 
  1360  019F                     	;# 
  1361  019F                     	;# 
  1362  019F                     	;# 
  1363  020C                     	;# 
  1364  020E                     	;# 
  1365  0211                     	;# 
  1366  0211                     	;# 
  1367  0212                     	;# 
  1368  0212                     	;# 
  1369  0213                     	;# 
  1370  0213                     	;# 
  1371  0214                     	;# 
  1372  0214                     	;# 
  1373  0215                     	;# 
  1374  0215                     	;# 
  1375  0215                     	;# 
  1376  0215                     	;# 
  1377  0216                     	;# 
  1378  0216                     	;# 
  1379  0217                     	;# 
  1380  0217                     	;# 
  1381  028C                     	;# 
  1382  028E                     	;# 
  1383  0291                     	;# 
  1384  0291                     	;# 
  1385  0292                     	;# 
  1386  0293                     	;# 
  1387  0293                     	;# 
  1388  0298                     	;# 
  1389  0298                     	;# 
  1390  0299                     	;# 
  1391  029A                     	;# 
  1392  029A                     	;# 
  1393  029E                     	;# 
  1394  030C                     	;# 
  1395  030E                     	;# 
  1396  038C                     	;# 
  1397  038E                     	;# 
  1398  0391                     	;# 
  1399  0392                     	;# 
  1400  0393                     	;# 
  1401  0397                     	;# 
  1402  0398                     	;# 
  1403  0399                     	;# 
  1404  0415                     	;# 
  1405  0416                     	;# 
  1406  0417                     	;# 
  1407  041C                     	;# 
  1408  041D                     	;# 
  1409  041E                     	;# 
  1410  0511                     	;# 
  1411  0515                     	;# 
  1412  0617                     	;# 
  1413  0618                     	;# 
  1414  0619                     	;# 
  1415  0619                     	;# 
  1416  061A                     	;# 
  1417  061B                     	;# 
  1418  061C                     	;# 
  1419  061C                     	;# 
  1420  0691                     	;# 
  1421  0692                     	;# 
  1422  0693                     	;# 
  1423  0694                     	;# 
  1424  0695                     	;# 
  1425  0696                     	;# 
  1426  0697                     	;# 
  1427  0698                     	;# 
  1428  0699                     	;# 
  1429  069A                     	;# 
  1430  069B                     	;# 
  1431  069C                     	;# 
  1432  069D                     	;# 
  1433  069E                     	;# 
  1434  069F                     	;# 
  1435  0E0F                     	;# 
  1436  0E10                     	;# 
  1437  0E11                     	;# 
  1438  0E12                     	;# 
  1439  0E13                     	;# 
  1440  0E14                     	;# 
  1441  0E15                     	;# 
  1442  0E17                     	;# 
  1443  0E20                     	;# 
  1444  0E21                     	;# 
  1445  0E22                     	;# 
  1446  0E24                     	;# 
  1447  0E25                     	;# 
  1448  0E28                     	;# 
  1449  0E29                     	;# 
  1450  0E2A                     	;# 
  1451  0E2B                     	;# 
  1452  0E90                     	;# 
  1453  0E91                     	;# 
  1454  0E92                     	;# 
  1455  0E94                     	;# 
  1456  0E95                     	;# 
  1457  0EA0                     	;# 
  1458  0EA1                     	;# 
  1459  0EA2                     	;# 
  1460  0EA3                     	;# 
  1461  0EA4                     	;# 
  1462  0EA5                     	;# 
  1463  0F0F                     	;# 
  1464  0F10                     	;# 
  1465  0F11                     	;# 
  1466  0F12                     	;# 
  1467  0F13                     	;# 
  1468  0F14                     	;# 
  1469  0F15                     	;# 
  1470  0F16                     	;# 
  1471  0F17                     	;# 
  1472  0F18                     	;# 
  1473  0F19                     	;# 
  1474  0F1A                     	;# 
  1475  0F1B                     	;# 
  1476  0F1C                     	;# 
  1477  0F1D                     	;# 
  1478  0F1E                     	;# 
  1479  0F1F                     	;# 
  1480  0F20                     	;# 
  1481  0F21                     	;# 
  1482  0F22                     	;# 
  1483  0F23                     	;# 
  1484  0F24                     	;# 
  1485  0F25                     	;# 
  1486  0F26                     	;# 
  1487  0F27                     	;# 
  1488  0F28                     	;# 
  1489  0F29                     	;# 
  1490  0F2A                     	;# 
  1491  0F2B                     	;# 
  1492  0F2C                     	;# 
  1493  0F2D                     	;# 
  1494  0F9E                     	;# 
  1495  0FE4                     	;# 
  1496  0FE5                     	;# 
  1497  0FE6                     	;# 
  1498  0FE7                     	;# 
  1499  0FE8                     	;# 
  1500  0FE9                     	;# 
  1501  0FEA                     	;# 
  1502  0FEB                     	;# 
  1503  0FED                     	;# 
  1504  0FEE                     	;# 
  1505  0FEF                     	;# 
  1506  0000                     	;# 
  1507  0001                     	;# 
  1508  0002                     	;# 
  1509  0003                     	;# 
  1510  0004                     	;# 
  1511  0005                     	;# 
  1512  0006                     	;# 
  1513  0007                     	;# 
  1514  0008                     	;# 
  1515  0009                     	;# 
  1516  000A                     	;# 
  1517  000B                     	;# 
  1518  000C                     	;# 
  1519  000E                     	;# 
  1520  0011                     	;# 
  1521  0012                     	;# 
  1522  0013                     	;# 
  1523  0015                     	;# 
  1524  0016                     	;# 
  1525  0016                     	;# 
  1526  0017                     	;# 
  1527  0018                     	;# 
  1528  0019                     	;# 
  1529  001A                     	;# 
  1530  001B                     	;# 
  1531  001C                     	;# 
  1532  008C                     	;# 
  1533  008E                     	;# 
  1534  0091                     	;# 
  1535  0092                     	;# 
  1536  0093                     	;# 
  1537  0095                     	;# 
  1538  0096                     	;# 
  1539  0097                     	;# 
  1540  0098                     	;# 
  1541  0099                     	;# 
  1542  009A                     	;# 
  1543  009B                     	;# 
  1544  009B                     	;# 
  1545  009C                     	;# 
  1546  009D                     	;# 
  1547  009E                     	;# 
  1548  009F                     	;# 
  1549  010C                     	;# 
  1550  010E                     	;# 
  1551  0111                     	;# 
  1552  0112                     	;# 
  1553  0113                     	;# 
  1554  0114                     	;# 
  1555  0115                     	;# 
  1556  0116                     	;# 
  1557  0117                     	;# 
  1558  0118                     	;# 
  1559  0119                     	;# 
  1560  011C                     	;# 
  1561  018C                     	;# 
  1562  018E                     	;# 
  1563  0191                     	;# 
  1564  0191                     	;# 
  1565  0192                     	;# 
  1566  0193                     	;# 
  1567  0193                     	;# 
  1568  0194                     	;# 
  1569  0195                     	;# 
  1570  0196                     	;# 
  1571  0197                     	;# 
  1572  0199                     	;# 
  1573  0199                     	;# 
  1574  0199                     	;# 
  1575  019A                     	;# 
  1576  019A                     	;# 
  1577  019A                     	;# 
  1578  019B                     	;# 
  1579  019B                     	;# 
  1580  019B                     	;# 
  1581  019B                     	;# 
  1582  019B                     	;# 
  1583  019C                     	;# 
  1584  019C                     	;# 
  1585  019C                     	;# 
  1586  019D                     	;# 
  1587  019D                     	;# 
  1588  019D                     	;# 
  1589  019E                     	;# 
  1590  019E                     	;# 
  1591  019E                     	;# 
  1592  019F                     	;# 
  1593  019F                     	;# 
  1594  019F                     	;# 
  1595  019F                     	;# 
  1596  019F                     	;# 
  1597  020C                     	;# 
  1598  020E                     	;# 
  1599  0211                     	;# 
  1600  0211                     	;# 
  1601  0212                     	;# 
  1602  0212                     	;# 
  1603  0213                     	;# 
  1604  0213                     	;# 
  1605  0214                     	;# 
  1606  0214                     	;# 
  1607  0215                     	;# 
  1608  0215                     	;# 
  1609  0215                     	;# 
  1610  0215                     	;# 
  1611  0216                     	;# 
  1612  0216                     	;# 
  1613  0217                     	;# 
  1614  0217                     	;# 
  1615  028C                     	;# 
  1616  028E                     	;# 
  1617  0291                     	;# 
  1618  0291                     	;# 
  1619  0292                     	;# 
  1620  0293                     	;# 
  1621  0293                     	;# 
  1622  0298                     	;# 
  1623  0298                     	;# 
  1624  0299                     	;# 
  1625  029A                     	;# 
  1626  029A                     	;# 
  1627  029E                     	;# 
  1628  030C                     	;# 
  1629  030E                     	;# 
  1630  038C                     	;# 
  1631  038E                     	;# 
  1632  0391                     	;# 
  1633  0392                     	;# 
  1634  0393                     	;# 
  1635  0397                     	;# 
  1636  0398                     	;# 
  1637  0399                     	;# 
  1638  0415                     	;# 
  1639  0416                     	;# 
  1640  0417                     	;# 
  1641  041C                     	;# 
  1642  041D                     	;# 
  1643  041E                     	;# 
  1644  0511                     	;# 
  1645  0515                     	;# 
  1646  0617                     	;# 
  1647  0618                     	;# 
  1648  0619                     	;# 
  1649  0619                     	;# 
  1650  061A                     	;# 
  1651  061B                     	;# 
  1652  061C                     	;# 
  1653  061C                     	;# 
  1654  0691                     	;# 
  1655  0692                     	;# 
  1656  0693                     	;# 
  1657  0694                     	;# 
  1658  0695                     	;# 
  1659  0696                     	;# 
  1660  0697                     	;# 
  1661  0698                     	;# 
  1662  0699                     	;# 
  1663  069A                     	;# 
  1664  069B                     	;# 
  1665  069C                     	;# 
  1666  069D                     	;# 
  1667  069E                     	;# 
  1668  069F                     	;# 
  1669  0E0F                     	;# 
  1670  0E10                     	;# 
  1671  0E11                     	;# 
  1672  0E12                     	;# 
  1673  0E13                     	;# 
  1674  0E14                     	;# 
  1675  0E15                     	;# 
  1676  0E17                     	;# 
  1677  0E20                     	;# 
  1678  0E21                     	;# 
  1679  0E22                     	;# 
  1680  0E24                     	;# 
  1681  0E25                     	;# 
  1682  0E28                     	;# 
  1683  0E29                     	;# 
  1684  0E2A                     	;# 
  1685  0E2B                     	;# 
  1686  0E90                     	;# 
  1687  0E91                     	;# 
  1688  0E92                     	;# 
  1689  0E94                     	;# 
  1690  0E95                     	;# 
  1691  0EA0                     	;# 
  1692  0EA1                     	;# 
  1693  0EA2                     	;# 
  1694  0EA3                     	;# 
  1695  0EA4                     	;# 
  1696  0EA5                     	;# 
  1697  0F0F                     	;# 
  1698  0F10                     	;# 
  1699  0F11                     	;# 
  1700  0F12                     	;# 
  1701  0F13                     	;# 
  1702  0F14                     	;# 
  1703  0F15                     	;# 
  1704  0F16                     	;# 
  1705  0F17                     	;# 
  1706  0F18                     	;# 
  1707  0F19                     	;# 
  1708  0F1A                     	;# 
  1709  0F1B                     	;# 
  1710  0F1C                     	;# 
  1711  0F1D                     	;# 
  1712  0F1E                     	;# 
  1713  0F1F                     	;# 
  1714  0F20                     	;# 
  1715  0F21                     	;# 
  1716  0F22                     	;# 
  1717  0F23                     	;# 
  1718  0F24                     	;# 
  1719  0F25                     	;# 
  1720  0F26                     	;# 
  1721  0F27                     	;# 
  1722  0F28                     	;# 
  1723  0F29                     	;# 
  1724  0F2A                     	;# 
  1725  0F2B                     	;# 
  1726  0F2C                     	;# 
  1727  0F2D                     	;# 
  1728  0F9E                     	;# 
  1729  0FE4                     	;# 
  1730  0FE5                     	;# 
  1731  0FE6                     	;# 
  1732  0FE7                     	;# 
  1733  0FE8                     	;# 
  1734  0FE9                     	;# 
  1735  0FEA                     	;# 
  1736  0FEB                     	;# 
  1737  0FED                     	;# 
  1738  0FEE                     	;# 
  1739  0FEF                     	;# 
  1740  0000                     	;# 
  1741  0001                     	;# 
  1742  0002                     	;# 
  1743  0003                     	;# 
  1744  0004                     	;# 
  1745  0005                     	;# 
  1746  0006                     	;# 
  1747  0007                     	;# 
  1748  0008                     	;# 
  1749  0009                     	;# 
  1750  000A                     	;# 
  1751  000B                     	;# 
  1752  000C                     	;# 
  1753  000E                     	;# 
  1754  0011                     	;# 
  1755  0012                     	;# 
  1756  0013                     	;# 
  1757  0015                     	;# 
  1758  0016                     	;# 
  1759  0016                     	;# 
  1760  0017                     	;# 
  1761  0018                     	;# 
  1762  0019                     	;# 
  1763  001A                     	;# 
  1764  001B                     	;# 
  1765  001C                     	;# 
  1766  008C                     	;# 
  1767  008E                     	;# 
  1768  0091                     	;# 
  1769  0092                     	;# 
  1770  0093                     	;# 
  1771  0095                     	;# 
  1772  0096                     	;# 
  1773  0097                     	;# 
  1774  0098                     	;# 
  1775  0099                     	;# 
  1776  009A                     	;# 
  1777  009B                     	;# 
  1778  009B                     	;# 
  1779  009C                     	;# 
  1780  009D                     	;# 
  1781  009E                     	;# 
  1782  009F                     	;# 
  1783  010C                     	;# 
  1784  010E                     	;# 
  1785  0111                     	;# 
  1786  0112                     	;# 
  1787  0113                     	;# 
  1788  0114                     	;# 
  1789  0115                     	;# 
  1790  0116                     	;# 
  1791  0117                     	;# 
  1792  0118                     	;# 
  1793  0119                     	;# 
  1794  011C                     	;# 
  1795  018C                     	;# 
  1796  018E                     	;# 
  1797  0191                     	;# 
  1798  0191                     	;# 
  1799  0192                     	;# 
  1800  0193                     	;# 
  1801  0193                     	;# 
  1802  0194                     	;# 
  1803  0195                     	;# 
  1804  0196                     	;# 
  1805  0197                     	;# 
  1806  0199                     	;# 
  1807  0199                     	;# 
  1808  0199                     	;# 
  1809  019A                     	;# 
  1810  019A                     	;# 
  1811  019A                     	;# 
  1812  019B                     	;# 
  1813  019B                     	;# 
  1814  019B                     	;# 
  1815  019B                     	;# 
  1816  019B                     	;# 
  1817  019C                     	;# 
  1818  019C                     	;# 
  1819  019C                     	;# 
  1820  019D                     	;# 
  1821  019D                     	;# 
  1822  019D                     	;# 
  1823  019E                     	;# 
  1824  019E                     	;# 
  1825  019E                     	;# 
  1826  019F                     	;# 
  1827  019F                     	;# 
  1828  019F                     	;# 
  1829  019F                     	;# 
  1830  019F                     	;# 
  1831  020C                     	;# 
  1832  020E                     	;# 
  1833  0211                     	;# 
  1834  0211                     	;# 
  1835  0212                     	;# 
  1836  0212                     	;# 
  1837  0213                     	;# 
  1838  0213                     	;# 
  1839  0214                     	;# 
  1840  0214                     	;# 
  1841  0215                     	;# 
  1842  0215                     	;# 
  1843  0215                     	;# 
  1844  0215                     	;# 
  1845  0216                     	;# 
  1846  0216                     	;# 
  1847  0217                     	;# 
  1848  0217                     	;# 
  1849  028C                     	;# 
  1850  028E                     	;# 
  1851  0291                     	;# 
  1852  0291                     	;# 
  1853  0292                     	;# 
  1854  0293                     	;# 
  1855  0293                     	;# 
  1856  0298                     	;# 
  1857  0298                     	;# 
  1858  0299                     	;# 
  1859  029A                     	;# 
  1860  029A                     	;# 
  1861  029E                     	;# 
  1862  030C                     	;# 
  1863  030E                     	;# 
  1864  038C                     	;# 
  1865  038E                     	;# 
  1866  0391                     	;# 
  1867  0392                     	;# 
  1868  0393                     	;# 
  1869  0397                     	;# 
  1870  0398                     	;# 
  1871  0399                     	;# 
  1872  0415                     	;# 
  1873  0416                     	;# 
  1874  0417                     	;# 
  1875  041C                     	;# 
  1876  041D                     	;# 
  1877  041E                     	;# 
  1878  0511                     	;# 
  1879  0515                     	;# 
  1880  0617                     	;# 
  1881  0618                     	;# 
  1882  0619                     	;# 
  1883  0619                     	;# 
  1884  061A                     	;# 
  1885  061B                     	;# 
  1886  061C                     	;# 
  1887  061C                     	;# 
  1888  0691                     	;# 
  1889  0692                     	;# 
  1890  0693                     	;# 
  1891  0694                     	;# 
  1892  0695                     	;# 
  1893  0696                     	;# 
  1894  0697                     	;# 
  1895  0698                     	;# 
  1896  0699                     	;# 
  1897  069A                     	;# 
  1898  069B                     	;# 
  1899  069C                     	;# 
  1900  069D                     	;# 
  1901  069E                     	;# 
  1902  069F                     	;# 
  1903  0E0F                     	;# 
  1904  0E10                     	;# 
  1905  0E11                     	;# 
  1906  0E12                     	;# 
  1907  0E13                     	;# 
  1908  0E14                     	;# 
  1909  0E15                     	;# 
  1910  0E17                     	;# 
  1911  0E20                     	;# 
  1912  0E21                     	;# 
  1913  0E22                     	;# 
  1914  0E24                     	;# 
  1915  0E25                     	;# 
  1916  0E28                     	;# 
  1917  0E29                     	;# 
  1918  0E2A                     	;# 
  1919  0E2B                     	;# 
  1920  0E90                     	;# 
  1921  0E91                     	;# 
  1922  0E92                     	;# 
  1923  0E94                     	;# 
  1924  0E95                     	;# 
  1925  0EA0                     	;# 
  1926  0EA1                     	;# 
  1927  0EA2                     	;# 
  1928  0EA3                     	;# 
  1929  0EA4                     	;# 
  1930  0EA5                     	;# 
  1931  0F0F                     	;# 
  1932  0F10                     	;# 
  1933  0F11                     	;# 
  1934  0F12                     	;# 
  1935  0F13                     	;# 
  1936  0F14                     	;# 
  1937  0F15                     	;# 
  1938  0F16                     	;# 
  1939  0F17                     	;# 
  1940  0F18                     	;# 
  1941  0F19                     	;# 
  1942  0F1A                     	;# 
  1943  0F1B                     	;# 
  1944  0F1C                     	;# 
  1945  0F1D                     	;# 
  1946  0F1E                     	;# 
  1947  0F1F                     	;# 
  1948  0F20                     	;# 
  1949  0F21                     	;# 
  1950  0F22                     	;# 
  1951  0F23                     	;# 
  1952  0F24                     	;# 
  1953  0F25                     	;# 
  1954  0F26                     	;# 
  1955  0F27                     	;# 
  1956  0F28                     	;# 
  1957  0F29                     	;# 
  1958  0F2A                     	;# 
  1959  0F2B                     	;# 
  1960  0F2C                     	;# 
  1961  0F2D                     	;# 
  1962  0F9E                     	;# 
  1963  0FE4                     	;# 
  1964  0FE5                     	;# 
  1965  0FE6                     	;# 
  1966  0FE7                     	;# 
  1967  0FE8                     	;# 
  1968  0FE9                     	;# 
  1969  0FEA                     	;# 
  1970  0FEB                     	;# 
  1971  0FED                     	;# 
  1972  0FEE                     	;# 
  1973  0FEF                     	;# 
  1974  0000                     	;# 
  1975  0001                     	;# 
  1976  0002                     	;# 
  1977  0003                     	;# 
  1978  0004                     	;# 
  1979  0005                     	;# 
  1980  0006                     	;# 
  1981  0007                     	;# 
  1982  0008                     	;# 
  1983  0009                     	;# 
  1984  000A                     	;# 
  1985  000B                     	;# 
  1986  000C                     	;# 
  1987  000E                     	;# 
  1988  0011                     	;# 
  1989  0012                     	;# 
  1990  0013                     	;# 
  1991  0015                     	;# 
  1992  0016                     	;# 
  1993  0016                     	;# 
  1994  0017                     	;# 
  1995  0018                     	;# 
  1996  0019                     	;# 
  1997  001A                     	;# 
  1998  001B                     	;# 
  1999  001C                     	;# 
  2000  008C                     	;# 
  2001  008E                     	;# 
  2002  0091                     	;# 
  2003  0092                     	;# 
  2004  0093                     	;# 
  2005  0095                     	;# 
  2006  0096                     	;# 
  2007  0097                     	;# 
  2008  0098                     	;# 
  2009  0099                     	;# 
  2010  009A                     	;# 
  2011  009B                     	;# 
  2012  009B                     	;# 
  2013  009C                     	;# 
  2014  009D                     	;# 
  2015  009E                     	;# 
  2016  009F                     	;# 
  2017  010C                     	;# 
  2018  010E                     	;# 
  2019  0111                     	;# 
  2020  0112                     	;# 
  2021  0113                     	;# 
  2022  0114                     	;# 
  2023  0115                     	;# 
  2024  0116                     	;# 
  2025  0117                     	;# 
  2026  0118                     	;# 
  2027  0119                     	;# 
  2028  011C                     	;# 
  2029  018C                     	;# 
  2030  018E                     	;# 
  2031  0191                     	;# 
  2032  0191                     	;# 
  2033  0192                     	;# 
  2034  0193                     	;# 
  2035  0193                     	;# 
  2036  0194                     	;# 
  2037  0195                     	;# 
  2038  0196                     	;# 
  2039  0197                     	;# 
  2040  0199                     	;# 
  2041  0199                     	;# 
  2042  0199                     	;# 
  2043  019A                     	;# 
  2044  019A                     	;# 
  2045  019A                     	;# 
  2046  019B                     	;# 
  2047  019B                     	;# 
  2048  019B                     	;# 
  2049  019B                     	;# 
  2050  019B                     	;# 
  2051  019C                     	;# 
  2052  019C                     	;# 
  2053  019C                     	;# 
  2054  019D                     	;# 
  2055  019D                     	;# 
  2056  019D                     	;# 
  2057  019E                     	;# 
  2058  019E                     	;# 
  2059  019E                     	;# 
  2060  019F                     	;# 
  2061  019F                     	;# 
  2062  019F                     	;# 
  2063  019F                     	;# 
  2064  019F                     	;# 
  2065  020C                     	;# 
  2066  020E                     	;# 
  2067  0211                     	;# 
  2068  0211                     	;# 
  2069  0212                     	;# 
  2070  0212                     	;# 
  2071  0213                     	;# 
  2072  0213                     	;# 
  2073  0214                     	;# 
  2074  0214                     	;# 
  2075  0215                     	;# 
  2076  0215                     	;# 
  2077  0215                     	;# 
  2078  0215                     	;# 
  2079  0216                     	;# 
  2080  0216                     	;# 
  2081  0217                     	;# 
  2082  0217                     	;# 
  2083  028C                     	;# 
  2084  028E                     	;# 
  2085  0291                     	;# 
  2086  0291                     	;# 
  2087  0292                     	;# 
  2088  0293                     	;# 
  2089  0293                     	;# 
  2090  0298                     	;# 
  2091  0298                     	;# 
  2092  0299                     	;# 
  2093  029A                     	;# 
  2094  029A                     	;# 
  2095  029E                     	;# 
  2096  030C                     	;# 
  2097  030E                     	;# 
  2098  038C                     	;# 
  2099  038E                     	;# 
  2100  0391                     	;# 
  2101  0392                     	;# 
  2102  0393                     	;# 
  2103  0397                     	;# 
  2104  0398                     	;# 
  2105  0399                     	;# 
  2106  0415                     	;# 
  2107  0416                     	;# 
  2108  0417                     	;# 
  2109  041C                     	;# 
  2110  041D                     	;# 
  2111  041E                     	;# 
  2112  0511                     	;# 
  2113  0515                     	;# 
  2114  0617                     	;# 
  2115  0618                     	;# 
  2116  0619                     	;# 
  2117  0619                     	;# 
  2118  061A                     	;# 
  2119  061B                     	;# 
  2120  061C                     	;# 
  2121  061C                     	;# 
  2122  0691                     	;# 
  2123  0692                     	;# 
  2124  0693                     	;# 
  2125  0694                     	;# 
  2126  0695                     	;# 
  2127  0696                     	;# 
  2128  0697                     	;# 
  2129  0698                     	;# 
  2130  0699                     	;# 
  2131  069A                     	;# 
  2132  069B                     	;# 
  2133  069C                     	;# 
  2134  069D                     	;# 
  2135  069E                     	;# 
  2136  069F                     	;# 
  2137  0E0F                     	;# 
  2138  0E10                     	;# 
  2139  0E11                     	;# 
  2140  0E12                     	;# 
  2141  0E13                     	;# 
  2142  0E14                     	;# 
  2143  0E15                     	;# 
  2144  0E17                     	;# 
  2145  0E20                     	;# 
  2146  0E21                     	;# 
  2147  0E22                     	;# 
  2148  0E24                     	;# 
  2149  0E25                     	;# 
  2150  0E28                     	;# 
  2151  0E29                     	;# 
  2152  0E2A                     	;# 
  2153  0E2B                     	;# 
  2154  0E90                     	;# 
  2155  0E91                     	;# 
  2156  0E92                     	;# 
  2157  0E94                     	;# 
  2158  0E95                     	;# 
  2159  0EA0                     	;# 
  2160  0EA1                     	;# 
  2161  0EA2                     	;# 
  2162  0EA3                     	;# 
  2163  0EA4                     	;# 
  2164  0EA5                     	;# 
  2165  0F0F                     	;# 
  2166  0F10                     	;# 
  2167  0F11                     	;# 
  2168  0F12                     	;# 
  2169  0F13                     	;# 
  2170  0F14                     	;# 
  2171  0F15                     	;# 
  2172  0F16                     	;# 
  2173  0F17                     	;# 
  2174  0F18                     	;# 
  2175  0F19                     	;# 
  2176  0F1A                     	;# 
  2177  0F1B                     	;# 
  2178  0F1C                     	;# 
  2179  0F1D                     	;# 
  2180  0F1E                     	;# 
  2181  0F1F                     	;# 
  2182  0F20                     	;# 
  2183  0F21                     	;# 
  2184  0F22                     	;# 
  2185  0F23                     	;# 
  2186  0F24                     	;# 
  2187  0F25                     	;# 
  2188  0F26                     	;# 
  2189  0F27                     	;# 
  2190  0F28                     	;# 
  2191  0F29                     	;# 
  2192  0F2A                     	;# 
  2193  0F2B                     	;# 
  2194  0F2C                     	;# 
  2195  0F2D                     	;# 
  2196  0F9E                     	;# 
  2197  0FE4                     	;# 
  2198  0FE5                     	;# 
  2199  0FE6                     	;# 
  2200  0FE7                     	;# 
  2201  0FE8                     	;# 
  2202  0FE9                     	;# 
  2203  0FEA                     	;# 
  2204  0FEB                     	;# 
  2205  0FED                     	;# 
  2206  0FEE                     	;# 
  2207  0FEF                     	;# 
  2208  0000                     	;# 
  2209  0001                     	;# 
  2210  0002                     	;# 
  2211  0003                     	;# 
  2212  0004                     	;# 
  2213  0005                     	;# 
  2214  0006                     	;# 
  2215  0007                     	;# 
  2216  0008                     	;# 
  2217  0009                     	;# 
  2218  000A                     	;# 
  2219  000B                     	;# 
  2220  000C                     	;# 
  2221  000E                     	;# 
  2222  0011                     	;# 
  2223  0012                     	;# 
  2224  0013                     	;# 
  2225  0015                     	;# 
  2226  0016                     	;# 
  2227  0016                     	;# 
  2228  0017                     	;# 
  2229  0018                     	;# 
  2230  0019                     	;# 
  2231  001A                     	;# 
  2232  001B                     	;# 
  2233  001C                     	;# 
  2234  008C                     	;# 
  2235  008E                     	;# 
  2236  0091                     	;# 
  2237  0092                     	;# 
  2238  0093                     	;# 
  2239  0095                     	;# 
  2240  0096                     	;# 
  2241  0097                     	;# 
  2242  0098                     	;# 
  2243  0099                     	;# 
  2244  009A                     	;# 
  2245  009B                     	;# 
  2246  009B                     	;# 
  2247  009C                     	;# 
  2248  009D                     	;# 
  2249  009E                     	;# 
  2250  009F                     	;# 
  2251  010C                     	;# 
  2252  010E                     	;# 
  2253  0111                     	;# 
  2254  0112                     	;# 
  2255  0113                     	;# 
  2256  0114                     	;# 
  2257  0115                     	;# 
  2258  0116                     	;# 
  2259  0117                     	;# 
  2260  0118                     	;# 
  2261  0119                     	;# 
  2262  011C                     	;# 
  2263  018C                     	;# 
  2264  018E                     	;# 
  2265  0191                     	;# 
  2266  0191                     	;# 
  2267  0192                     	;# 
  2268  0193                     	;# 
  2269  0193                     	;# 
  2270  0194                     	;# 
  2271  0195                     	;# 
  2272  0196                     	;# 
  2273  0197                     	;# 
  2274  0199                     	;# 
  2275  0199                     	;# 
  2276  0199                     	;# 
  2277  019A                     	;# 
  2278  019A                     	;# 
  2279  019A                     	;# 
  2280  019B                     	;# 
  2281  019B                     	;# 
  2282  019B                     	;# 
  2283  019B                     	;# 
  2284  019B                     	;# 
  2285  019C                     	;# 
  2286  019C                     	;# 
  2287  019C                     	;# 
  2288  019D                     	;# 
  2289  019D                     	;# 
  2290  019D                     	;# 
  2291  019E                     	;# 
  2292  019E                     	;# 
  2293  019E                     	;# 
  2294  019F                     	;# 
  2295  019F                     	;# 
  2296  019F                     	;# 
  2297  019F                     	;# 
  2298  019F                     	;# 
  2299  020C                     	;# 
  2300  020E                     	;# 
  2301  0211                     	;# 
  2302  0211                     	;# 
  2303  0212                     	;# 
  2304  0212                     	;# 
  2305  0213                     	;# 
  2306  0213                     	;# 
  2307  0214                     	;# 
  2308  0214                     	;# 
  2309  0215                     	;# 
  2310  0215                     	;# 
  2311  0215                     	;# 
  2312  0215                     	;# 
  2313  0216                     	;# 
  2314  0216                     	;# 
  2315  0217                     	;# 
  2316  0217                     	;# 
  2317  028C                     	;# 
  2318  028E                     	;# 
  2319  0291                     	;# 
  2320  0291                     	;# 
  2321  0292                     	;# 
  2322  0293                     	;# 
  2323  0293                     	;# 
  2324  0298                     	;# 
  2325  0298                     	;# 
  2326  0299                     	;# 
  2327  029A                     	;# 
  2328  029A                     	;# 
  2329  029E                     	;# 
  2330  030C                     	;# 
  2331  030E                     	;# 
  2332  038C                     	;# 
  2333  038E                     	;# 
  2334  0391                     	;# 
  2335  0392                     	;# 
  2336  0393                     	;# 
  2337  0397                     	;# 
  2338  0398                     	;# 
  2339  0399                     	;# 
  2340  0415                     	;# 
  2341  0416                     	;# 
  2342  0417                     	;# 
  2343  041C                     	;# 
  2344  041D                     	;# 
  2345  041E                     	;# 
  2346  0511                     	;# 
  2347  0515                     	;# 
  2348  0617                     	;# 
  2349  0618                     	;# 
  2350  0619                     	;# 
  2351  0619                     	;# 
  2352  061A                     	;# 
  2353  061B                     	;# 
  2354  061C                     	;# 
  2355  061C                     	;# 
  2356  0691                     	;# 
  2357  0692                     	;# 
  2358  0693                     	;# 
  2359  0694                     	;# 
  2360  0695                     	;# 
  2361  0696                     	;# 
  2362  0697                     	;# 
  2363  0698                     	;# 
  2364  0699                     	;# 
  2365  069A                     	;# 
  2366  069B                     	;# 
  2367  069C                     	;# 
  2368  069D                     	;# 
  2369  069E                     	;# 
  2370  069F                     	;# 
  2371  0E0F                     	;# 
  2372  0E10                     	;# 
  2373  0E11                     	;# 
  2374  0E12                     	;# 
  2375  0E13                     	;# 
  2376  0E14                     	;# 
  2377  0E15                     	;# 
  2378  0E17                     	;# 
  2379  0E20                     	;# 
  2380  0E21                     	;# 
  2381  0E22                     	;# 
  2382  0E24                     	;# 
  2383  0E25                     	;# 
  2384  0E28                     	;# 
  2385  0E29                     	;# 
  2386  0E2A                     	;# 
  2387  0E2B                     	;# 
  2388  0E90                     	;# 
  2389  0E91                     	;# 
  2390  0E92                     	;# 
  2391  0E94                     	;# 
  2392  0E95                     	;# 
  2393  0EA0                     	;# 
  2394  0EA1                     	;# 
  2395  0EA2                     	;# 
  2396  0EA3                     	;# 
  2397  0EA4                     	;# 
  2398  0EA5                     	;# 
  2399  0F0F                     	;# 
  2400  0F10                     	;# 
  2401  0F11                     	;# 
  2402  0F12                     	;# 
  2403  0F13                     	;# 
  2404  0F14                     	;# 
  2405  0F15                     	;# 
  2406  0F16                     	;# 
  2407  0F17                     	;# 
  2408  0F18                     	;# 
  2409  0F19                     	;# 
  2410  0F1A                     	;# 
  2411  0F1B                     	;# 
  2412  0F1C                     	;# 
  2413  0F1D                     	;# 
  2414  0F1E                     	;# 
  2415  0F1F                     	;# 
  2416  0F20                     	;# 
  2417  0F21                     	;# 
  2418  0F22                     	;# 
  2419  0F23                     	;# 
  2420  0F24                     	;# 
  2421  0F25                     	;# 
  2422  0F26                     	;# 
  2423  0F27                     	;# 
  2424  0F28                     	;# 
  2425  0F29                     	;# 
  2426  0F2A                     	;# 
  2427  0F2B                     	;# 
  2428  0F2C                     	;# 
  2429  0F2D                     	;# 
  2430  0F9E                     	;# 
  2431  0FE4                     	;# 
  2432  0FE5                     	;# 
  2433  0FE6                     	;# 
  2434  0FE7                     	;# 
  2435  0FE8                     	;# 
  2436  0FE9                     	;# 
  2437  0FEA                     	;# 
  2438  0FEB                     	;# 
  2439  0FED                     	;# 
  2440  0FEE                     	;# 
  2441  0FEF                     	;# 
  2442  0000                     	;# 
  2443  0001                     	;# 
  2444  0002                     	;# 
  2445  0003                     	;# 
  2446  0004                     	;# 
  2447  0005                     	;# 
  2448  0006                     	;# 
  2449  0007                     	;# 
  2450  0008                     	;# 
  2451  0009                     	;# 
  2452  000A                     	;# 
  2453  000B                     	;# 
  2454  000C                     	;# 
  2455  000E                     	;# 
  2456  0011                     	;# 
  2457  0012                     	;# 
  2458  0013                     	;# 
  2459  0015                     	;# 
  2460  0016                     	;# 
  2461  0016                     	;# 
  2462  0017                     	;# 
  2463  0018                     	;# 
  2464  0019                     	;# 
  2465  001A                     	;# 
  2466  001B                     	;# 
  2467  001C                     	;# 
  2468  008C                     	;# 
  2469  008E                     	;# 
  2470  0091                     	;# 
  2471  0092                     	;# 
  2472  0093                     	;# 
  2473  0095                     	;# 
  2474  0096                     	;# 
  2475  0097                     	;# 
  2476  0098                     	;# 
  2477  0099                     	;# 
  2478  009A                     	;# 
  2479  009B                     	;# 
  2480  009B                     	;# 
  2481  009C                     	;# 
  2482  009D                     	;# 
  2483  009E                     	;# 
  2484  009F                     	;# 
  2485  010C                     	;# 
  2486  010E                     	;# 
  2487  0111                     	;# 
  2488  0112                     	;# 
  2489  0113                     	;# 
  2490  0114                     	;# 
  2491  0115                     	;# 
  2492  0116                     	;# 
  2493  0117                     	;# 
  2494  0118                     	;# 
  2495  0119                     	;# 
  2496  011C                     	;# 
  2497  018C                     	;# 
  2498  018E                     	;# 
  2499  0191                     	;# 
  2500  0191                     	;# 
  2501  0192                     	;# 
  2502  0193                     	;# 
  2503  0193                     	;# 
  2504  0194                     	;# 
  2505  0195                     	;# 
  2506  0196                     	;# 
  2507  0197                     	;# 
  2508  0199                     	;# 
  2509  0199                     	;# 
  2510  0199                     	;# 
  2511  019A                     	;# 
  2512  019A                     	;# 
  2513  019A                     	;# 
  2514  019B                     	;# 
  2515  019B                     	;# 
  2516  019B                     	;# 
  2517  019B                     	;# 
  2518  019B                     	;# 
  2519  019C                     	;# 
  2520  019C                     	;# 
  2521  019C                     	;# 
  2522  019D                     	;# 
  2523  019D                     	;# 
  2524  019D                     	;# 
  2525  019E                     	;# 
  2526  019E                     	;# 
  2527  019E                     	;# 
  2528  019F                     	;# 
  2529  019F                     	;# 
  2530  019F                     	;# 
  2531  019F                     	;# 
  2532  019F                     	;# 
  2533  020C                     	;# 
  2534  020E                     	;# 
  2535  0211                     	;# 
  2536  0211                     	;# 
  2537  0212                     	;# 
  2538  0212                     	;# 
  2539  0213                     	;# 
  2540  0213                     	;# 
  2541  0214                     	;# 
  2542  0214                     	;# 
  2543  0215                     	;# 
  2544  0215                     	;# 
  2545  0215                     	;# 
  2546  0215                     	;# 
  2547  0216                     	;# 
  2548  0216                     	;# 
  2549  0217                     	;# 
  2550  0217                     	;# 
  2551  028C                     	;# 
  2552  028E                     	;# 
  2553  0291                     	;# 
  2554  0291                     	;# 
  2555  0292                     	;# 
  2556  0293                     	;# 
  2557  0293                     	;# 
  2558  0298                     	;# 
  2559  0298                     	;# 
  2560  0299                     	;# 
  2561  029A                     	;# 
  2562  029A                     	;# 
  2563  029E                     	;# 
  2564  030C                     	;# 
  2565  030E                     	;# 
  2566  038C                     	;# 
  2567  038E                     	;# 
  2568  0391                     	;# 
  2569  0392                     	;# 
  2570  0393                     	;# 
  2571  0397                     	;# 
  2572  0398                     	;# 
  2573  0399                     	;# 
  2574  0415                     	;# 
  2575  0416                     	;# 
  2576  0417                     	;# 
  2577  041C                     	;# 
  2578  041D                     	;# 
  2579  041E                     	;# 
  2580  0511                     	;# 
  2581  0515                     	;# 
  2582  0617                     	;# 
  2583  0618                     	;# 
  2584  0619                     	;# 
  2585  0619                     	;# 
  2586  061A                     	;# 
  2587  061B                     	;# 
  2588  061C                     	;# 
  2589  061C                     	;# 
  2590  0691                     	;# 
  2591  0692                     	;# 
  2592  0693                     	;# 
  2593  0694                     	;# 
  2594  0695                     	;# 
  2595  0696                     	;# 
  2596  0697                     	;# 
  2597  0698                     	;# 
  2598  0699                     	;# 
  2599  069A                     	;# 
  2600  069B                     	;# 
  2601  069C                     	;# 
  2602  069D                     	;# 
  2603  069E                     	;# 
  2604  069F                     	;# 
  2605  0E0F                     	;# 
  2606  0E10                     	;# 
  2607  0E11                     	;# 
  2608  0E12                     	;# 
  2609  0E13                     	;# 
  2610  0E14                     	;# 
  2611  0E15                     	;# 
  2612  0E17                     	;# 
  2613  0E20                     	;# 
  2614  0E21                     	;# 
  2615  0E22                     	;# 
  2616  0E24                     	;# 
  2617  0E25                     	;# 
  2618  0E28                     	;# 
  2619  0E29                     	;# 
  2620  0E2A                     	;# 
  2621  0E2B                     	;# 
  2622  0E90                     	;# 
  2623  0E91                     	;# 
  2624  0E92                     	;# 
  2625  0E94                     	;# 
  2626  0E95                     	;# 
  2627  0EA0                     	;# 
  2628  0EA1                     	;# 
  2629  0EA2                     	;# 
  2630  0EA3                     	;# 
  2631  0EA4                     	;# 
  2632  0EA5                     	;# 
  2633  0F0F                     	;# 
  2634  0F10                     	;# 
  2635  0F11                     	;# 
  2636  0F12                     	;# 
  2637  0F13                     	;# 
  2638  0F14                     	;# 
  2639  0F15                     	;# 
  2640  0F16                     	;# 
  2641  0F17                     	;# 
  2642  0F18                     	;# 
  2643  0F19                     	;# 
  2644  0F1A                     	;# 
  2645  0F1B                     	;# 
  2646  0F1C                     	;# 
  2647  0F1D                     	;# 
  2648  0F1E                     	;# 
  2649  0F1F                     	;# 
  2650  0F20                     	;# 
  2651  0F21                     	;# 
  2652  0F22                     	;# 
  2653  0F23                     	;# 
  2654  0F24                     	;# 
  2655  0F25                     	;# 
  2656  0F26                     	;# 
  2657  0F27                     	;# 
  2658  0F28                     	;# 
  2659  0F29                     	;# 
  2660  0F2A                     	;# 
  2661  0F2B                     	;# 
  2662  0F2C                     	;# 
  2663  0F2D                     	;# 
  2664  0F9E                     	;# 
  2665  0FE4                     	;# 
  2666  0FE5                     	;# 
  2667  0FE6                     	;# 
  2668  0FE7                     	;# 
  2669  0FE8                     	;# 
  2670  0FE9                     	;# 
  2671  0FEA                     	;# 
  2672  0FEB                     	;# 
  2673  0FED                     	;# 
  2674  0FEE                     	;# 
  2675  0FEF                     	;# 
  2676                           
  2677                           	psect	idataBANK1
  2678  182F                     __pidataBANK1:	
  2679                           
  2680                           ;initializer for _MEM
  2681  182F  3400               	retlw	0
  2682  1830  3400               	retlw	0
  2683  1831  3480               	retlw	128
  2684  1832  3425               	retlw	37
  2685                           
  2686                           	psect	idataBANK4
  2687  182B                     __pidataBANK4:	
  2688                           
  2689                           ;initializer for _BAUD
  2690  182B  3480               	retlw	128
  2691  182C  3425               	retlw	37
  2692  182D  3400               	retlw	0
  2693  182E  3400               	retlw	0
  2694                           
  2695                           	psect	stringtext
  2696  0700                     __pstringtext:	
  2697  0700                     _ScanCodeFunctionNoE0:	
  2698  0700  3400               	retlw	0
  2699  0701  3411               	retlw	17
  2700  0702  3400               	retlw	0
  2701  0703  340C               	retlw	12
  2702  0704  340A               	retlw	10
  2703  0705  3406               	retlw	6
  2704  0706  3407               	retlw	7
  2705  0707  3414               	retlw	20
  2706  0708  3400               	retlw	0
  2707  0709  3412               	retlw	18
  2708  070A  3410               	retlw	16
  2709  070B  340E               	retlw	14
  2710  070C  340B               	retlw	11
  2711  070D  3400               	retlw	0
  2712  070E  3400               	retlw	0
  2713  070F  3400               	retlw	0
  2714  0710  3400               	retlw	0
  2715  0711  341C               	retlw	28
  2716  0712  3400               	retlw	0
  2717  0713  3400               	retlw	0
  2718  0714  341A               	retlw	26
  2719  0715  3400               	retlw	0
  2720  0716  3400               	retlw	0
  2721  0717  3400               	retlw	0
  2722  0718  3400               	retlw	0
  2723  0719  3400               	retlw	0
  2724  071A  3400               	retlw	0
  2725  071B  3400               	retlw	0
  2726  071C  3400               	retlw	0
  2727  071D  3400               	retlw	0
  2728  071E  3400               	retlw	0
  2729  071F  3400               	retlw	0
  2730  0720  3400               	retlw	0
  2731  0721  3400               	retlw	0
  2732  0722  3400               	retlw	0
  2733  0723  3400               	retlw	0
  2734  0724  3400               	retlw	0
  2735  0725  3400               	retlw	0
  2736  0726  3400               	retlw	0
  2737  0727  3400               	retlw	0
  2738  0728  3400               	retlw	0
  2739  0729  3400               	retlw	0
  2740  072A  3400               	retlw	0
  2741  072B  3400               	retlw	0
  2742  072C  3400               	retlw	0
  2743  072D  3400               	retlw	0
  2744  072E  3400               	retlw	0
  2745  072F  3400               	retlw	0
  2746  0730  3400               	retlw	0
  2747  0731  3400               	retlw	0
  2748  0732  3400               	retlw	0
  2749  0733  3400               	retlw	0
  2750  0734  3400               	retlw	0
  2751  0735  3400               	retlw	0
  2752  0736  3400               	retlw	0
  2753  0737  3400               	retlw	0
  2754  0738  3400               	retlw	0
  2755  0739  3400               	retlw	0
  2756  073A  3400               	retlw	0
  2757  073B  3400               	retlw	0
  2758  073C  3400               	retlw	0
  2759  073D  3400               	retlw	0
  2760  073E  3400               	retlw	0
  2761  073F  3400               	retlw	0
  2762  0740  3400               	retlw	0
  2763  0741  3400               	retlw	0
  2764  0742  3400               	retlw	0
  2765  0743  3400               	retlw	0
  2766  0744  3400               	retlw	0
  2767  0745  3400               	retlw	0
  2768  0746  3400               	retlw	0
  2769  0747  3400               	retlw	0
  2770  0748  3400               	retlw	0
  2771  0749  3400               	retlw	0
  2772  074A  3400               	retlw	0
  2773  074B  3400               	retlw	0
  2774  074C  3400               	retlw	0
  2775  074D  3400               	retlw	0
  2776  074E  3400               	retlw	0
  2777  074F  3400               	retlw	0
  2778  0750  3400               	retlw	0
  2779  0751  3400               	retlw	0
  2780  0752  3400               	retlw	0
  2781  0753  3400               	retlw	0
  2782  0754  3400               	retlw	0
  2783  0755  3400               	retlw	0
  2784  0756  3400               	retlw	0
  2785  0757  3400               	retlw	0
  2786  0758  3400               	retlw	0
  2787  0759  3400               	retlw	0
  2788  075A  3400               	retlw	0
  2789  075B  3400               	retlw	0
  2790  075C  3400               	retlw	0
  2791  075D  3400               	retlw	0
  2792  075E  3400               	retlw	0
  2793  075F  3400               	retlw	0
  2794  0760  3400               	retlw	0
  2795  0761  3400               	retlw	0
  2796  0762  3400               	retlw	0
  2797  0763  3400               	retlw	0
  2798  0764  3400               	retlw	0
  2799  0765  3400               	retlw	0
  2800  0766  3400               	retlw	0
  2801  0767  3400               	retlw	0
  2802  0768  3400               	retlw	0
  2803  0769  3400               	retlw	0
  2804  076A  3400               	retlw	0
  2805  076B  3400               	retlw	0
  2806  076C  3400               	retlw	0
  2807  076D  3400               	retlw	0
  2808  076E  3400               	retlw	0
  2809  076F  3400               	retlw	0
  2810  0770  3400               	retlw	0
  2811  0771  3400               	retlw	0
  2812  0772  3400               	retlw	0
  2813  0773  3400               	retlw	0
  2814  0774  3400               	retlw	0
  2815  0775  3400               	retlw	0
  2816  0776  3400               	retlw	0
  2817  0777  3400               	retlw	0
  2818  0778  3413               	retlw	19
  2819  0779  3400               	retlw	0
  2820  077A  3400               	retlw	0
  2821  077B  3400               	retlw	0
  2822  077C  3400               	retlw	0
  2823  077D  3400               	retlw	0
  2824  077E  3400               	retlw	0
  2825  077F  3400               	retlw	0
  2826  0780  3400               	retlw	0
  2827  0781  3400               	retlw	0
  2828  0782  3400               	retlw	0
  2829  0783  340F               	retlw	15
  2830  0784                     __end_of_ScanCodeFunctionNoE0:	
  2831  0784                     _ScanCode:	
  2832  0784  3409               	retlw	9
  2833  0785  3460               	retlw	96
  2834  0786  3400               	retlw	0
  2835  0787  3400               	retlw	0
  2836  0788  3400               	retlw	0
  2837  0789  3400               	retlw	0
  2838  078A  3400               	retlw	0
  2839  078B  3400               	retlw	0
  2840  078C  3471               	retlw	113
  2841  078D  3431               	retlw	49
  2842  078E  3400               	retlw	0
  2843  078F  3400               	retlw	0
  2844  0790  3400               	retlw	0
  2845  0791  347A               	retlw	122
  2846  0792  3473               	retlw	115
  2847  0793  3461               	retlw	97
  2848  0794  3477               	retlw	119
  2849  0795  3432               	retlw	50
  2850  0796  3400               	retlw	0
  2851  0797  3400               	retlw	0
  2852  0798  3463               	retlw	99
  2853  0799  3478               	retlw	120
  2854  079A  3464               	retlw	100
  2855  079B  3465               	retlw	101
  2856  079C  3434               	retlw	52
  2857  079D  3433               	retlw	51
  2858  079E  3400               	retlw	0
  2859  079F  3400               	retlw	0
  2860  07A0  3420               	retlw	32
  2861  07A1  3476               	retlw	118
  2862  07A2  3466               	retlw	102
  2863  07A3  3474               	retlw	116
  2864  07A4  3472               	retlw	114
  2865  07A5  3435               	retlw	53
  2866  07A6  3400               	retlw	0
  2867  07A7  3400               	retlw	0
  2868  07A8  346E               	retlw	110
  2869  07A9  3462               	retlw	98
  2870  07AA  3468               	retlw	104
  2871  07AB  3467               	retlw	103
  2872  07AC  3479               	retlw	121
  2873  07AD  3436               	retlw	54
  2874  07AE  3400               	retlw	0
  2875  07AF  3400               	retlw	0
  2876  07B0  3400               	retlw	0
  2877  07B1  346D               	retlw	109
  2878  07B2  346A               	retlw	106
  2879  07B3  3475               	retlw	117
  2880  07B4  3437               	retlw	55
  2881  07B5  3438               	retlw	56
  2882  07B6  3400               	retlw	0
  2883  07B7  3400               	retlw	0
  2884  07B8  342C               	retlw	44
  2885  07B9  346B               	retlw	107
  2886  07BA  3469               	retlw	105
  2887  07BB  346F               	retlw	111
  2888  07BC  3430               	retlw	48
  2889  07BD  3439               	retlw	57
  2890  07BE  3400               	retlw	0
  2891  07BF  3400               	retlw	0
  2892  07C0  342E               	retlw	46
  2893  07C1  342F               	retlw	47
  2894  07C2  346C               	retlw	108
  2895  07C3  343B               	retlw	59
  2896  07C4  3470               	retlw	112
  2897  07C5  342D               	retlw	45
  2898  07C6  3400               	retlw	0
  2899  07C7  3400               	retlw	0
  2900  07C8  3400               	retlw	0
  2901  07C9  3427               	retlw	39
  2902  07CA  3400               	retlw	0
  2903  07CB  345B               	retlw	91
  2904  07CC  343D               	retlw	61
  2905  07CD  3400               	retlw	0
  2906  07CE  3400               	retlw	0
  2907  07CF  3400               	retlw	0
  2908  07D0  3400               	retlw	0
  2909  07D1  340D               	retlw	13
  2910  07D2  345D               	retlw	93
  2911  07D3  3400               	retlw	0
  2912  07D4  345C               	retlw	92
  2913  07D5  3400               	retlw	0
  2914  07D6  3400               	retlw	0
  2915  07D7  3400               	retlw	0
  2916  07D8  3400               	retlw	0
  2917  07D9  3400               	retlw	0
  2918  07DA  3400               	retlw	0
  2919  07DB  3400               	retlw	0
  2920  07DC  3400               	retlw	0
  2921  07DD  3408               	retlw	8
  2922  07DE  3400               	retlw	0
  2923  07DF  3400               	retlw	0
  2924  07E0  3431               	retlw	49
  2925  07E1  3400               	retlw	0
  2926  07E2  3434               	retlw	52
  2927  07E3  3437               	retlw	55
  2928  07E4  3400               	retlw	0
  2929  07E5  3400               	retlw	0
  2930  07E6  3400               	retlw	0
  2931  07E7  3430               	retlw	48
  2932  07E8  342E               	retlw	46
  2933  07E9  3432               	retlw	50
  2934  07EA  3435               	retlw	53
  2935  07EB  3436               	retlw	54
  2936  07EC  3438               	retlw	56
  2937  07ED  341B               	retlw	27
  2938  07EE  3400               	retlw	0
  2939  07EF  3400               	retlw	0
  2940  07F0  342B               	retlw	43
  2941  07F1  3433               	retlw	51
  2942  07F2  342D               	retlw	45
  2943  07F3  342A               	retlw	42
  2944  07F4  3439               	retlw	57
  2945  07F5                     __end_of_ScanCode:	
  2946  07F5                     _ScanCodeSHIFT:	
  2947  07F5  3409               	retlw	9
  2948  07F6  347E               	retlw	126
  2949  07F7  3400               	retlw	0
  2950  07F8  3400               	retlw	0
  2951  07F9  3400               	retlw	0
  2952  07FA  3400               	retlw	0
  2953  07FB  3400               	retlw	0
  2954  07FC  3400               	retlw	0
  2955  07FD  3451               	retlw	81
  2956  07FE  3421               	retlw	33
  2957  07FF  3400               	retlw	0
  2958  0800  3400               	retlw	0
  2959  0801  3400               	retlw	0
  2960  0802  345A               	retlw	90
  2961  0803  3453               	retlw	83
  2962  0804  3441               	retlw	65
  2963  0805  3457               	retlw	87
  2964  0806  3440               	retlw	64
  2965  0807  3400               	retlw	0
  2966  0808  3400               	retlw	0
  2967  0809  3443               	retlw	67
  2968  080A  3458               	retlw	88
  2969  080B  3444               	retlw	68
  2970  080C  3445               	retlw	69
  2971  080D  3424               	retlw	36
  2972  080E  3423               	retlw	35
  2973  080F  3400               	retlw	0
  2974  0810  3400               	retlw	0
  2975  0811  3420               	retlw	32
  2976  0812  3456               	retlw	86
  2977  0813  3446               	retlw	70
  2978  0814  3454               	retlw	84
  2979  0815  3452               	retlw	82
  2980  0816  3425               	retlw	37
  2981  0817  3400               	retlw	0
  2982  0818  3400               	retlw	0
  2983  0819  344E               	retlw	78
  2984  081A  3442               	retlw	66
  2985  081B  3448               	retlw	72
  2986  081C  3447               	retlw	71
  2987  081D  3459               	retlw	89
  2988  081E  345E               	retlw	94
  2989  081F  3400               	retlw	0
  2990  0820  3400               	retlw	0
  2991  0821  3400               	retlw	0
  2992  0822  344D               	retlw	77
  2993  0823  344A               	retlw	74
  2994  0824  3455               	retlw	85
  2995  0825  3426               	retlw	38
  2996  0826  342A               	retlw	42
  2997  0827  3400               	retlw	0
  2998  0828  3400               	retlw	0
  2999  0829  343C               	retlw	60
  3000  082A  344B               	retlw	75
  3001  082B  3449               	retlw	73
  3002  082C  344F               	retlw	79
  3003  082D  3429               	retlw	41
  3004  082E  3428               	retlw	40
  3005  082F  3400               	retlw	0
  3006  0830  3400               	retlw	0
  3007  0831  343E               	retlw	62
  3008  0832  343F               	retlw	63
  3009  0833  344C               	retlw	76
  3010  0834  343A               	retlw	58
  3011  0835  3450               	retlw	80
  3012  0836  345F               	retlw	95
  3013  0837  3400               	retlw	0
  3014  0838  3400               	retlw	0
  3015  0839  3400               	retlw	0
  3016  083A  3422               	retlw	34
  3017  083B  3400               	retlw	0
  3018  083C  347B               	retlw	123
  3019  083D  342B               	retlw	43
  3020  083E  3400               	retlw	0
  3021  083F  3400               	retlw	0
  3022  0840  3400               	retlw	0
  3023  0841  3400               	retlw	0
  3024  0842  340D               	retlw	13
  3025  0843  347D               	retlw	125
  3026  0844  3400               	retlw	0
  3027  0845  347C               	retlw	124
  3028  0846  3400               	retlw	0
  3029  0847  3400               	retlw	0
  3030  0848  3400               	retlw	0
  3031  0849  3400               	retlw	0
  3032  084A  3400               	retlw	0
  3033  084B  3400               	retlw	0
  3034  084C  3400               	retlw	0
  3035  084D  3400               	retlw	0
  3036  084E  3408               	retlw	8
  3037  084F  3400               	retlw	0
  3038  0850  3400               	retlw	0
  3039  0851  3431               	retlw	49
  3040  0852  3400               	retlw	0
  3041  0853  3434               	retlw	52
  3042  0854  3437               	retlw	55
  3043  0855  3400               	retlw	0
  3044  0856  3400               	retlw	0
  3045  0857  3400               	retlw	0
  3046  0858  3430               	retlw	48
  3047  0859  342E               	retlw	46
  3048  085A  3432               	retlw	50
  3049  085B  3435               	retlw	53
  3050  085C  3436               	retlw	54
  3051  085D  3438               	retlw	56
  3052  085E  341B               	retlw	27
  3053  085F  3400               	retlw	0
  3054  0860  3400               	retlw	0
  3055  0861  342B               	retlw	43
  3056  0862  3433               	retlw	51
  3057  0863  342D               	retlw	45
  3058  0864  342A               	retlw	42
  3059  0865  3439               	retlw	57
  3060  0866                     __end_of_ScanCodeSHIFT:	
  3061  0866                     _ScanCodeFunctionE0:	
  3062  0866  341E               	retlw	30
  3063  0867  3400               	retlw	0
  3064  0868  3400               	retlw	0
  3065  0869  341F               	retlw	31
  3066  086A  3400               	retlw	0
  3067  086B  3400               	retlw	0
  3068  086C  3400               	retlw	0
  3069  086D  3400               	retlw	0
  3070  086E  3400               	retlw	0
  3071  086F  3400               	retlw	0
  3072  0870  3400               	retlw	0
  3073  0871  3400               	retlw	0
  3074  0872  3400               	retlw	0
  3075  0873  3400               	retlw	0
  3076  0874  3419               	retlw	25
  3077  0875  3400               	retlw	0
  3078  0876  3400               	retlw	0
  3079  0877  3400               	retlw	0
  3080  0878  3400               	retlw	0
  3081  0879  3400               	retlw	0
  3082  087A  3400               	retlw	0
  3083  087B  3400               	retlw	0
  3084  087C  341D               	retlw	29
  3085  087D  3400               	retlw	0
  3086  087E  3400               	retlw	0
  3087  087F  3400               	retlw	0
  3088  0880  3400               	retlw	0
  3089  0881  3400               	retlw	0
  3090  0882  3400               	retlw	0
  3091  0883  3400               	retlw	0
  3092  0884  3400               	retlw	0
  3093  0885  3400               	retlw	0
  3094  0886  3400               	retlw	0
  3095  0887  3400               	retlw	0
  3096  0888  3400               	retlw	0
  3097  0889  3400               	retlw	0
  3098  088A  3400               	retlw	0
  3099  088B  3400               	retlw	0
  3100  088C  3400               	retlw	0
  3101  088D  3400               	retlw	0
  3102  088E  3400               	retlw	0
  3103  088F  3400               	retlw	0
  3104  0890  3400               	retlw	0
  3105  0891  3400               	retlw	0
  3106  0892  3400               	retlw	0
  3107  0893  3400               	retlw	0
  3108  0894  3400               	retlw	0
  3109  0895  3400               	retlw	0
  3110  0896  3400               	retlw	0
  3111  0897  3400               	retlw	0
  3112  0898  3400               	retlw	0
  3113  0899  3400               	retlw	0
  3114  089A  3400               	retlw	0
  3115  089B  3400               	retlw	0
  3116  089C  3400               	retlw	0
  3117  089D  3400               	retlw	0
  3118  089E  3400               	retlw	0
  3119  089F  342F               	retlw	47
  3120  08A0  3400               	retlw	0
  3121  08A1  3400               	retlw	0
  3122  08A2  3400               	retlw	0
  3123  08A3  3400               	retlw	0
  3124  08A4  3400               	retlw	0
  3125  08A5  3400               	retlw	0
  3126  08A6  3400               	retlw	0
  3127  08A7  3400               	retlw	0
  3128  08A8  3400               	retlw	0
  3129  08A9  3400               	retlw	0
  3130  08AA  3400               	retlw	0
  3131  08AB  3400               	retlw	0
  3132  08AC  3400               	retlw	0
  3133  08AD  3400               	retlw	0
  3134  08AE  3400               	retlw	0
  3135  08AF  340D               	retlw	13
  3136  08B0  3400               	retlw	0
  3137  08B1  3400               	retlw	0
  3138  08B2  3400               	retlw	0
  3139  08B3  3400               	retlw	0
  3140  08B4  3400               	retlw	0
  3141  08B5  3400               	retlw	0
  3142  08B6  3400               	retlw	0
  3143  08B7  3400               	retlw	0
  3144  08B8  3400               	retlw	0
  3145  08B9  3400               	retlw	0
  3146  08BA  3400               	retlw	0
  3147  08BB  3400               	retlw	0
  3148  08BC  3400               	retlw	0
  3149  08BD  3400               	retlw	0
  3150  08BE  3401               	retlw	1
  3151  08BF  3400               	retlw	0
  3152  08C0  3403               	retlw	3
  3153  08C1  3416               	retlw	22
  3154  08C2  3400               	retlw	0
  3155  08C3  3400               	retlw	0
  3156  08C4  3400               	retlw	0
  3157  08C5  3415               	retlw	21
  3158  08C6  347F               	retlw	127
  3159  08C7  3404               	retlw	4
  3160  08C8  3400               	retlw	0
  3161  08C9  3405               	retlw	5
  3162  08CA  3402               	retlw	2
  3163  08CB  3400               	retlw	0
  3164  08CC  3400               	retlw	0
  3165  08CD  3400               	retlw	0
  3166  08CE  3400               	retlw	0
  3167  08CF  3418               	retlw	24
  3168  08D0  3400               	retlw	0
  3169  08D1  3400               	retlw	0
  3170  08D2  3417               	retlw	23
  3171  08D3                     __end_of_ScanCodeFunctionE0:	
  3172  08D3                     _dpowers:	
  3173  08D3  3401               	retlw	1
  3174  08D4  3400               	retlw	0
  3175  08D5  3400               	retlw	0
  3176  08D6  3400               	retlw	0
  3177  08D7  340A               	retlw	10
  3178  08D8  3400               	retlw	0
  3179  08D9  3400               	retlw	0
  3180  08DA  3400               	retlw	0
  3181  08DB  3464               	retlw	100
  3182  08DC  3400               	retlw	0
  3183  08DD  3400               	retlw	0
  3184  08DE  3400               	retlw	0
  3185  08DF  34E8               	retlw	232
  3186  08E0  3403               	retlw	3
  3187  08E1  3400               	retlw	0
  3188  08E2  3400               	retlw	0
  3189  08E3  3410               	retlw	16
  3190  08E4  3427               	retlw	39
  3191  08E5  3400               	retlw	0
  3192  08E6  3400               	retlw	0
  3193  08E7  34A0               	retlw	160
  3194  08E8  3486               	retlw	134
  3195  08E9  3401               	retlw	1
  3196  08EA  3400               	retlw	0
  3197  08EB  3440               	retlw	64
  3198  08EC  3442               	retlw	66
  3199  08ED  340F               	retlw	15
  3200  08EE  3400               	retlw	0
  3201  08EF  3480               	retlw	128
  3202  08F0  3496               	retlw	150
  3203  08F1  3498               	retlw	152
  3204  08F2  3400               	retlw	0
  3205  08F3  3400               	retlw	0
  3206  08F4  34E1               	retlw	225
  3207  08F5  34F5               	retlw	245
  3208  08F6  3405               	retlw	5
  3209  08F7  3400               	retlw	0
  3210  08F8  34CA               	retlw	202
  3211  08F9  349A               	retlw	154
  3212  08FA  343B               	retlw	59
  3213  08FB                     __end_of_dpowers:	
  3214  08FB                     _EvenParityMSG:	
  3215  08FB  3420               	retlw	32
  3216  08FC  3477               	retlw	119
  3217  08FD  3469               	retlw	105
  3218  08FE  3474               	retlw	116
  3219  08FF  3468               	retlw	104
  3220  0900  3420               	retlw	32
  3221  0901  3445               	retlw	69
  3222  0902  3476               	retlw	118
  3223  0903  3465               	retlw	101
  3224  0904  346E               	retlw	110
  3225  0905  3420               	retlw	32
  3226  0906  3470               	retlw	112
  3227  0907  3461               	retlw	97
  3228  0908  3472               	retlw	114
  3229  0909  3469               	retlw	105
  3230  090A  3474               	retlw	116
  3231  090B  3479               	retlw	121
  3232  090C  3420               	retlw	32
  3233  090D  3462               	retlw	98
  3234  090E  3469               	retlw	105
  3235  090F  3474               	retlw	116
  3236  0910  3400               	retlw	0
  3237  0911                     __end_of_EvenParityMSG:	
  3238  0911                     _OddParityMSG:	
  3239  0911  3420               	retlw	32
  3240  0912  3477               	retlw	119
  3241  0913  3469               	retlw	105
  3242  0914  3474               	retlw	116
  3243  0915  3468               	retlw	104
  3244  0916  3420               	retlw	32
  3245  0917  344F               	retlw	79
  3246  0918  3464               	retlw	100
  3247  0919  3464               	retlw	100
  3248  091A  3420               	retlw	32
  3249  091B  3470               	retlw	112
  3250  091C  3461               	retlw	97
  3251  091D  3472               	retlw	114
  3252  091E  3469               	retlw	105
  3253  091F  3474               	retlw	116
  3254  0920  3479               	retlw	121
  3255  0921  3420               	retlw	32
  3256  0922  3462               	retlw	98
  3257  0923  3469               	retlw	105
  3258  0924  3474               	retlw	116
  3259  0925  3400               	retlw	0
  3260  0926                     __end_of_OddParityMSG:	
  3261  0926                     _NoParityMSG:	
  3262  0926  3420               	retlw	32
  3263  0927  3477               	retlw	119
  3264  0928  3469               	retlw	105
  3265  0929  3474               	retlw	116
  3266  092A  3468               	retlw	104
  3267  092B  3420               	retlw	32
  3268  092C  344E               	retlw	78
  3269  092D  346F               	retlw	111
  3270  092E  3420               	retlw	32
  3271  092F  3470               	retlw	112
  3272  0930  3461               	retlw	97
  3273  0931  3472               	retlw	114
  3274  0932  3469               	retlw	105
  3275  0933  3474               	retlw	116
  3276  0934  3479               	retlw	121
  3277  0935  3420               	retlw	32
  3278  0936  3462               	retlw	98
  3279  0937  3469               	retlw	105
  3280  0938  3474               	retlw	116
  3281  0939  3400               	retlw	0
  3282  093A                     __end_of_NoParityMSG:	
  3283  093A                     _SpaceParityMSG:	
  3284  093A  3420               	retlw	32
  3285  093B  3477               	retlw	119
  3286  093C  3469               	retlw	105
  3287  093D  3474               	retlw	116
  3288  093E  3468               	retlw	104
  3289  093F  3420               	retlw	32
  3290  0940  3453               	retlw	83
  3291  0941  3470               	retlw	112
  3292  0942  3461               	retlw	97
  3293  0943  3463               	retlw	99
  3294  0944  3465               	retlw	101
  3295  0945  3420               	retlw	32
  3296  0946  3462               	retlw	98
  3297  0947  3469               	retlw	105
  3298  0948  3474               	retlw	116
  3299  0949  3400               	retlw	0
  3300  094A                     __end_of_SpaceParityMSG:	
  3301  094A                     _MarkParityMSG:	
  3302  094A  3420               	retlw	32
  3303  094B  3477               	retlw	119
  3304  094C  3469               	retlw	105
  3305  094D  3474               	retlw	116
  3306  094E  3468               	retlw	104
  3307  094F  3420               	retlw	32
  3308  0950  344D               	retlw	77
  3309  0951  3461               	retlw	97
  3310  0952  3472               	retlw	114
  3311  0953  346B               	retlw	107
  3312  0954  3420               	retlw	32
  3313  0955  3462               	retlw	98
  3314  0956  3469               	retlw	105
  3315  0957  3474               	retlw	116
  3316  0958  3400               	retlw	0
  3317  0959                     __end_of_MarkParityMSG:	
  3318  0959                     _VoltageMSG:	
  3319  0959  3456               	retlw	86
  3320  095A  346F               	retlw	111
  3321  095B  346C               	retlw	108
  3322  095C  3474               	retlw	116
  3323  095D  3461               	retlw	97
  3324  095E  3467               	retlw	103
  3325  095F  3465               	retlw	101
  3326  0960  3420               	retlw	32
  3327  0961  3474               	retlw	116
  3328  0962  346F               	retlw	111
  3329  0963  346F               	retlw	111
  3330  0964  3420               	retlw	32
  3331  0965  3400               	retlw	0
  3332  0966                     __end_of_VoltageMSG:	
  3333  0966                     _Version:	
  3334  0966  3431               	retlw	49
  3335  0967  342E               	retlw	46
  3336  0968  3433               	retlw	51
  3337  0969  345F               	retlw	95
  3338  096A  3444               	retlw	68
  3339  096B  3457               	retlw	87
  3340  096C  3430               	retlw	48
  3341  096D  3461               	retlw	97
  3342  096E  3400               	retlw	0
  3343  096F                     __end_of_Version:	
  3344  000B                     _INTCON	set	11
  3345  000B                     _INTCONbits	set	11
  3346  0011                     _PIR1bits	set	17
  3347  000C                     _PORTA	set	12
  3348  000E                     _PORTC	set	14
  3349  001B                     _PR2	set	27
  3350  001C                     _T2CON	set	28
  3351  001C                     _T2CONbits	set	28
  3352  001A                     _TMR2	set	26
  3353  009D                     _ADCON0	set	157
  3354  009E                     _ADCON1	set	158
  3355  009F                     _ADCON2	set	159
  3356  009C                     _ADRESH	set	156
  3357  009B                     _ADRESL	set	155
  3358  0095                     _OPTION_REGbits	set	149
  3359  0099                     _OSCCON	set	153
  3360  009A                     _OSCSTAT	set	154
  3361  0091                     _PIE1	set	145
  3362  0091                     _PIE1bits	set	145
  3363  008C                     _TRISAbits	set	140
  3364  008E                     _TRISCbits	set	142
  3365  04D0                     _HFIOFS	set	1232
  3366  0117                     _FVRCON	set	279
  3367  010C                     _LATA	set	268
  3368  010E                     _LATC	set	270
  3369  018C                     _ANSELA	set	396
  3370  018E                     _ANSELC	set	398
  3371  019F                     _BAUD1CON	set	415
  3372  0192                     _PMADRH	set	402
  3373  0191                     _PMADRL	set	401
  3374  0195                     _PMCON1	set	405
  3375  0196                     _PMCON2	set	406
  3376  0194                     _PMDATH	set	404
  3377  0193                     _PMDATL	set	403
  3378  019D                     _RC1STA	set	413
  3379  019D                     _RC1STAbits	set	413
  3380  0199                     _RCREG	set	409
  3381  019D                     _RCSTA	set	413
  3382  019D                     _RCSTAbits	set	413
  3383  019B                     _SPBRG	set	411
  3384  019C                     _SPBRGH	set	412
  3385  019E                     _TX1STA	set	414
  3386  019E                     _TX1STAbits	set	414
  3387  019A                     _TXREG	set	410
  3388  019E                     _TXSTAbits	set	414
  3389  020C                     _WPUA	set	524
  3390  020E                     _WPUC	set	526
  3391  029A                     _CCP2CONbits	set	666
  3392  0393                     _IOCAF	set	915
  3393  0392                     _IOCAN	set	914
  3394  0391                     _IOCAP	set	913
  3395  0E25                     _CKPPS	set	3621
  3396  0E0F                     _PPSLOCK	set	3599
  3397  0E24                     _RXPPS	set	3620
  3398  0EA2                     _RC2PPS	set	3746
  3399  096F                     __stringdata:	
  3400  096F                     STR_6:	
  3401  096F  3443               	retlw	67	;'C'
  3402  0970  3468               	retlw	104	;'h'
  3403  0971  3461               	retlw	97	;'a'
  3404  0972  346E               	retlw	110	;'n'
  3405  0973  3467               	retlw	103	;'g'
  3406  0974  3465               	retlw	101	;'e'
  3407  0975  3420               	retlw	32	;' '
  3408  0976  3442               	retlw	66	;'B'
  3409  0977  3441               	retlw	65	;'A'
  3410  0978  3455               	retlw	85	;'U'
  3411  0979  3444               	retlw	68	;'D'
  3412  097A  343A               	retlw	58	;':'
  3413  097B  3420               	retlw	32	;' '
  3414  097C  3422               	retlw	34	;'"'
  3415  097D  3443               	retlw	67	;'C'
  3416  097E  344E               	retlw	78	;'N'
  3417  097F  3454               	retlw	84	;'T'
  3418  0980  3420               	retlw	32	;' '
  3419  0981  342B               	retlw	43	;'+'
  3420  0982  3420               	retlw	32	;' '
  3421  0983  3441               	retlw	65	;'A'
  3422  0984  344C               	retlw	76	;'L'
  3423  0985  3454               	retlw	84	;'T'
  3424  0986  3420               	retlw	32	;' '
  3425  0987  342B               	retlw	43	;'+'
  3426  0988  3420               	retlw	32	;' '
  3427  0989  3444               	retlw	68	;'D'
  3428  098A  3445               	retlw	69	;'E'
  3429  098B  344C               	retlw	76	;'L'
  3430  098C  3422               	retlw	34	;'"'
  3431  098D  340D               	retlw	13
  3432  098E  340A               	retlw	10
  3433  098F  3400               	retlw	0
  3434  0990                     STR_3:	
  3435  0990  340D               	retlw	13
  3436  0991  340A               	retlw	10
  3437  0992  3450               	retlw	80	;'P'
  3438  0993  3453               	retlw	83	;'S'
  3439  0994  342F               	retlw	47	;'/'
  3440  0995  3432               	retlw	50	;'2'
  3441  0996  3420               	retlw	32	;' '
  3442  0997  344B               	retlw	75	;'K'
  3443  0998  3465               	retlw	101	;'e'
  3444  0999  3479               	retlw	121	;'y'
  3445  099A  3462               	retlw	98	;'b'
  3446  099B  346F               	retlw	111	;'o'
  3447  099C  3461               	retlw	97	;'a'
  3448  099D  3472               	retlw	114	;'r'
  3449  099E  3464               	retlw	100	;'d'
  3450  099F  3420               	retlw	32	;' '
  3451  09A0  3474               	retlw	116	;'t'
  3452  09A1  346F               	retlw	111	;'o'
  3453  09A2  3420               	retlw	32	;' '
  3454  09A3  3452               	retlw	82	;'R'
  3455  09A4  3453               	retlw	83	;'S'
  3456  09A5  342D               	retlw	45	;'-'
  3457  09A6  3432               	retlw	50	;'2'
  3458  09A7  3433               	retlw	51	;'3'
  3459  09A8  3432               	retlw	50	;'2'
  3460  09A9  340D               	retlw	13
  3461  09AA  340A               	retlw	10
  3462  09AB  3400               	retlw	0
  3463  09AC                     STR_18:	
  3464  09AC  3442               	retlw	66	;'B'
  3465  09AD  3461               	retlw	97	;'a'
  3466  09AE  3475               	retlw	117	;'u'
  3467  09AF  3464               	retlw	100	;'d'
  3468  09B0  3420               	retlw	32	;' '
  3469  09B1  3477               	retlw	119	;'w'
  3470  09B2  3469               	retlw	105	;'i'
  3471  09B3  346C               	retlw	108	;'l'
  3472  09B4  346C               	retlw	108	;'l'
  3473  09B5  3420               	retlw	32	;' '
  3474  09B6  3462               	retlw	98	;'b'
  3475  09B7  3465               	retlw	101	;'e'
  3476  09B8  3420               	retlw	32	;' '
  3477  09B9  3473               	retlw	115	;'s'
  3478  09BA  3465               	retlw	101	;'e'
  3479  09BB  3474               	retlw	116	;'t'
  3480  09BC  3420               	retlw	32	;' '
  3481  09BD  3474               	retlw	116	;'t'
  3482  09BE  346F               	retlw	111	;'o'
  3483  09BF  3420               	retlw	32	;' '
  3484  09C0  3425               	retlw	37	;'%'
  3485  09C1  346C               	retlw	108	;'l'
  3486  09C2  3475               	retlw	117	;'u'
  3487  09C3  3400               	retlw	0
  3488  09C4                     STR_10:	
  3489  09C4  3446               	retlw	70	;'F'
  3490  09C5  346C               	retlw	108	;'l'
  3491  09C6  3461               	retlw	97	;'a'
  3492  09C7  3473               	retlw	115	;'s'
  3493  09C8  3468               	retlw	104	;'h'
  3494  09C9  3420               	retlw	32	;' '
  3495  09CA  3450               	retlw	80	;'P'
  3496  09CB  3472               	retlw	114	;'r'
  3497  09CC  346F               	retlw	111	;'o'
  3498  09CD  3467               	retlw	103	;'g'
  3499  09CE  3472               	retlw	114	;'r'
  3500  09CF  3461               	retlw	97	;'a'
  3501  09D0  346D               	retlw	109	;'m'
  3502  09D1  3420               	retlw	32	;' '
  3503  09D2  3446               	retlw	70	;'F'
  3504  09D3  3461               	retlw	97	;'a'
  3505  09D4  3469               	retlw	105	;'i'
  3506  09D5  346C               	retlw	108	;'l'
  3507  09D6  340D               	retlw	13
  3508  09D7  340A               	retlw	10
  3509  09D8  3400               	retlw	0
  3510  09D9                     STR_20:	
  3511  09D9  3442               	retlw	66	;'B'
  3512  09DA  3461               	retlw	97	;'a'
  3513  09DB  3475               	retlw	117	;'u'
  3514  09DC  3464               	retlw	100	;'d'
  3515  09DD  3420               	retlw	32	;' '
  3516  09DE  344F               	retlw	79	;'O'
  3517  09DF  3475               	retlw	117	;'u'
  3518  09E0  3474               	retlw	116	;'t'
  3519  09E1  3420               	retlw	32	;' '
  3520  09E2  346F               	retlw	111	;'o'
  3521  09E3  3466               	retlw	102	;'f'
  3522  09E4  3420               	retlw	32	;' '
  3523  09E5  3452               	retlw	82	;'R'
  3524  09E6  3461               	retlw	97	;'a'
  3525  09E7  346E               	retlw	110	;'n'
  3526  09E8  3467               	retlw	103	;'g'
  3527  09E9  3465               	retlw	101	;'e'
  3528  09EA  340D               	retlw	13
  3529  09EB  340A               	retlw	10
  3530  09EC  3400               	retlw	0
  3531  09ED                     STR_14:	
  3532  09ED  3445               	retlw	69	;'E'
  3533  09EE  346E               	retlw	110	;'n'
  3534  09EF  3474               	retlw	116	;'t'
  3535  09F0  3465               	retlw	101	;'e'
  3536  09F1  3472               	retlw	114	;'r'
  3537  09F2  3420               	retlw	32	;' '
  3538  09F3  3442               	retlw	66	;'B'
  3539  09F4  3461               	retlw	97	;'a'
  3540  09F5  3475               	retlw	117	;'u'
  3541  09F6  3464               	retlw	100	;'d'
  3542  09F7  3420               	retlw	32	;' '
  3543  09F8  3472               	retlw	114	;'r'
  3544  09F9  3461               	retlw	97	;'a'
  3545  09FA  3474               	retlw	116	;'t'
  3546  09FB  3465               	retlw	101	;'e'
  3547  09FC  3420               	retlw	32	;' '
  3548  09FD  340D               	retlw	13
  3549  09FE  340A               	retlw	10
  3550  09FF  3400               	retlw	0
  3551  0A00                     STR_15:	
  3552  0A00  3442               	retlw	66	;'B'
  3553  0A01  3461               	retlw	97	;'a'
  3554  0A02  3475               	retlw	117	;'u'
  3555  0A03  3464               	retlw	100	;'d'
  3556  0A04  3420               	retlw	32	;' '
  3557  0A05  3452               	retlw	82	;'R'
  3558  0A06  3465               	retlw	101	;'e'
  3559  0A07  3473               	retlw	115	;'s'
  3560  0A08  3465               	retlw	101	;'e'
  3561  0A09  3474               	retlw	116	;'t'
  3562  0A0A  3420               	retlw	32	;' '
  3563  0A0B  3474               	retlw	116	;'t'
  3564  0A0C  346F               	retlw	111	;'o'
  3565  0A0D  3420               	retlw	32	;' '
  3566  0A0E  3439               	retlw	57	;'9'
  3567  0A0F  3436               	retlw	54	;'6'
  3568  0A10  3430               	retlw	48	;'0'
  3569  0A11  3430               	retlw	48	;'0'
  3570  0A12  3400               	retlw	0
  3571  0A13                     STR_4:	
  3572  0A13  3446               	retlw	70	;'F'
  3573  0A14  3469               	retlw	105	;'i'
  3574  0A15  3472               	retlw	114	;'r'
  3575  0A16  346D               	retlw	109	;'m'
  3576  0A17  3477               	retlw	119	;'w'
  3577  0A18  3461               	retlw	97	;'a'
  3578  0A19  3472               	retlw	114	;'r'
  3579  0A1A  3465               	retlw	101	;'e'
  3580  0A1B  3420               	retlw	32	;' '
  3581  0A1C  3456               	retlw	86	;'V'
  3582  0A1D  3465               	retlw	101	;'e'
  3583  0A1E  3472               	retlw	114	;'r'
  3584  0A1F  3473               	retlw	115	;'s'
  3585  0A20  3469               	retlw	105	;'i'
  3586  0A21  346F               	retlw	111	;'o'
  3587  0A22  346E               	retlw	110	;'n'
  3588  0A23  343A               	retlw	58	;':'
  3589  0A24  3420               	retlw	32	;' '
  3590  0A25  3400               	retlw	0
  3591  0A26                     STR_11:	
  3592  0A26  3442               	retlw	66	;'B'
  3593  0A27  3461               	retlw	97	;'a'
  3594  0A28  3475               	retlw	117	;'u'
  3595  0A29  3464               	retlw	100	;'d'
  3596  0A2A  3420               	retlw	32	;' '
  3597  0A2B  3469               	retlw	105	;'i'
  3598  0A2C  3473               	retlw	115	;'s'
  3599  0A2D  3420               	retlw	32	;' '
  3600  0A2E  3425               	retlw	37	;'%'
  3601  0A2F  346C               	retlw	108	;'l'
  3602  0A30  3475               	retlw	117	;'u'
  3603  0A31  3400               	retlw	0
  3604  0A32                     STR_2:	
  3605  0A32  3448               	retlw	72	;'H'
  3606  0A33  3469               	retlw	105	;'i'
  3607  0A34  3467               	retlw	103	;'g'
  3608  0A35  3468               	retlw	104	;'h'
  3609  0A36  3421               	retlw	33	;'!'
  3610  0A37  340D               	retlw	13
  3611  0A38  340A               	retlw	10
  3612  0A39  3400               	retlw	0
  3613  0A3A                     STR_1:	
  3614  0A3A  344C               	retlw	76	;'L'
  3615  0A3B  346F               	retlw	111	;'o'
  3616  0A3C  3477               	retlw	119	;'w'
  3617  0A3D  3421               	retlw	33	;'!'
  3618  0A3E  340D               	retlw	13
  3619  0A3F  340A               	retlw	10
  3620  0A40  3400               	retlw	0
  3621  0A41                     __end_of__stringdata:	
  3622                           
  3623                           ; #config settings
  3624  0000                     
  3625                           	psect	cinit
  3626  00E8                     start_initialization:	
  3627  00E8                     __initialization:	
  3628                           
  3629                           ; Clear objects allocated to BANK1
  3630  00E8  30C5               	movlw	low __pbssBANK1
  3631  00E9  0084               	movwf	4
  3632  00EA  3000               	movlw	high __pbssBANK1
  3633  00EB  0085               	movwf	5
  3634  00EC  301D               	movlw	29
  3635  00ED  3198  203F  3180   	fcall	clear_ram0
  3636                           
  3637                           ; Clear objects allocated to BANK3
  3638  00F0  30E1               	movlw	low __pbssBANK3
  3639  00F1  0084               	movwf	4
  3640  00F2  3001               	movlw	high __pbssBANK3
  3641  00F3  0085               	movwf	5
  3642  00F4  300F               	movlw	15
  3643  00F5  3198  203F  3180   	fcall	clear_ram0
  3644                           
  3645                           ; Clear objects allocated to BANK4
  3646  00F8  3057               	movlw	low __pbssBANK4
  3647  00F9  0084               	movwf	4
  3648  00FA  3002               	movlw	high __pbssBANK4
  3649  00FB  0085               	movwf	5
  3650  00FC  300A               	movlw	10
  3651  00FD  3198  203F  3180   	fcall	clear_ram0
  3652                           
  3653                           ; Initialize objects allocated to BANK1
  3654  0100  302F               	movlw	low __pidataBANK1
  3655  0101  0084               	movwf	4
  3656  0102  3098               	movlw	(high __pidataBANK1)| (0+128)
  3657  0103  0085               	movwf	5
  3658  0104  30E2               	movlw	low __pdataBANK1
  3659  0105  0086               	movwf	6
  3660  0106  3000               	movlw	high __pdataBANK1
  3661  0107  0087               	movwf	7
  3662  0108  3004               	movlw	4
  3663  0109  3198  2039  3180   	fcall	init_ram
  3664                           
  3665                           ; Initialize objects allocated to BANK4
  3666  010C  302B               	movlw	low __pidataBANK4
  3667  010D  0084               	movwf	4
  3668  010E  3098               	movlw	(high __pidataBANK4)| (0+128)
  3669  010F  0085               	movwf	5
  3670  0110  3061               	movlw	low __pdataBANK4
  3671  0111  0086               	movwf	6
  3672  0112  3002               	movlw	high __pdataBANK4
  3673  0113  0087               	movwf	7
  3674  0114  3004               	movlw	4
  3675  0115  3198  2039         	fcall	init_ram
  3676  0117                     end_of_initialization:	
  3677                           ;End of C runtime variable initialization code
  3678                           
  3679  0117                     __end_of__initialization:	
  3680  0117  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  3681  0118  0020               	movlb	0
  3682  0119  3196  2E11         	ljmp	_main	;jump to C main() function
  3683                           
  3684                           	psect	bssBANK1
  3685  00C5                     __pbssBANK1:	
  3686  00C5                     _BaudTyped:	
  3687  00C5                     	ds	4
  3688  00C9                     _PS_2_Read_Data_TEMP:	
  3689  00C9                     	ds	2
  3690  00CB                     _BAUDMODE:	
  3691  00CB                     	ds	1
  3692  00CC                     _Caps_Lock_Key:	
  3693  00CC                     	ds	1
  3694  00CD                     _Caps_Lock_Key_old:	
  3695  00CD                     	ds	1
  3696  00CE                     _Delete:	
  3697  00CE                     	ds	1
  3698  00CF                     _LControl:	
  3699  00CF                     	ds	1
  3700  00D0                     _Left_Shift_Key_old:	
  3701  00D0                     	ds	1
  3702  00D1                     _PS_2_Buffer_items:	
  3703  00D1                     	ds	1
  3704  00D2                     _PS_2_bits:	
  3705  00D2                     	ds	1
  3706  00D3                     _ResendLastFlag:	
  3707  00D3                     	ds	1
  3708  00D4                     _Right_Shift_Key_old:	
  3709  00D4                     	ds	1
  3710  00D5                     _i:	
  3711  00D5                     	ds	1
  3712  00D6                     _PS_2_ScanCodes:	
  3713  00D6                     	ds	12
  3714                           
  3715                           	psect	dataBANK1
  3716  00E2                     __pdataBANK1:	
  3717  00E2                     _MEM:	
  3718  00E2                     	ds	4
  3719                           
  3720                           	psect	bssBANK3
  3721  01E1                     __pbssBANK3:	
  3722  01E1                     _PS_2_Read_Data_First:	
  3723  01E1                     	ds	2
  3724  01E3                     _PS_2_Read_Data_Second:	
  3725  01E3                     	ds	2
  3726  01E5                     _PS_2_Read_Data_Third:	
  3727  01E5                     	ds	2
  3728  01E7                     _CapsCount:	
  3729  01E7                     	ds	1
  3730  01E8                     _Caps_Lock:	
  3731  01E8                     	ds	1
  3732  01E9                     _LALT:	
  3733  01E9                     	ds	1
  3734  01EA                     _Left_Shift_Key:	
  3735  01EA                     	ds	1
  3736  01EB                     _ParityTyped:	
  3737  01EB                     	ds	1
  3738  01EC                     _RALT:	
  3739  01EC                     	ds	1
  3740  01ED                     _RControl:	
  3741  01ED                     	ds	1
  3742  01EE                     _Right_Shift_Key:	
  3743  01EE                     	ds	1
  3744  01EF                     _Shift_Key:	
  3745  01EF                     	ds	1
  3746                           
  3747                           	psect	bssBANK4
  3748  0257                     __pbssBANK4:	
  3749  0257                     _BatteryVoltage:	
  3750  0257                     	ds	3
  3751  025A                     _SinLEDtimer:	
  3752  025A                     	ds	2
  3753  025C                     _pwrLEDtoggle:	
  3754  025C                     	ds	2
  3755  025E                     _Alarm:	
  3756  025E                     	ds	1
  3757  025F                     _ECHO:	
  3758  025F                     	ds	1
  3759  0260                     _PARITY:	
  3760  0260                     	ds	1
  3761                           
  3762                           	psect	dataBANK4
  3763  0261                     __pdataBANK4:	
  3764  0261                     _BAUD:	
  3765  0261                     	ds	4
  3766                           
  3767                           	psect	clrtext
  3768  183F                     clear_ram0:	
  3769                           ;	Called with FSR0 containing the base address, and
  3770                           ;	WREG with the size to clear
  3771                           
  3772  183F  0064               	clrwdt	;clear the watchdog before getting into this loop
  3773  1840                     clrloop0:	
  3774  1840  0180               	clrf	0	;clear RAM location pointed to by FSR
  3775  1841  3101               	addfsr 0,1
  3776  1842  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3777  1843  2840               	goto	clrloop0	;have we reached the end yet?
  3778  1844  3400               	retlw	0	;all done for this memory range, return
  3779                           
  3780                           	psect	inittext
  3781  1839                     init_ram:	
  3782  1839  00FE               	movwf	126
  3783  183A                     initloop:	
  3784  183A  0012               	moviw fsr0++
  3785  183B  001E               	movwi fsr1++
  3786  183C  0BFE               	decfsz	126,f
  3787  183D  283A               	goto	initloop
  3788  183E  3400               	retlw	0
  3789                           
  3790                           	psect	cstackBANK4
  3791  0220                     __pcstackBANK4:	
  3792  0220                     ??_PS_2_DISABLE_INTERRUPT:	
  3793  0220                     ??_READ_PS_2_PIN:	
  3794                           ; 0 bytes @ 0x0
  3795                           
  3796  0220                     ??_Timer2ON:	
  3797                           ; 0 bytes @ 0x0
  3798                           
  3799  0220                     ??_PS_2_ENABLE_INTERRUPT:	
  3800                           ; 0 bytes @ 0x0
  3801                           
  3802  0220                     ??_ReadUSART:	
  3803                           ; 0 bytes @ 0x0
  3804                           
  3805  0220                     ??_ConfigureOscillator:	
  3806                           ; 0 bytes @ 0x0
  3807                           
  3808  0220                     ??_InitApp:	
  3809                           ; 0 bytes @ 0x0
  3810                           
  3811  0220                     ?_delayUS:	
  3812                           ; 0 bytes @ 0x0
  3813                           
  3814  0220                     ?_OpenUSART:	
  3815                           ; 0 bytes @ 0x0
  3816                           
  3817  0220                     ??_baudUSART:	
  3818                           ; 0 bytes @ 0x0
  3819                           
  3820  0220                     ??_Clock_TRIS:	
  3821                           ; 0 bytes @ 0x0
  3822                           
  3823  0220                     ??_Data_TRIS:	
  3824                           ; 0 bytes @ 0x0
  3825                           
  3826  0220                     ??_Timer2Init:	
  3827                           ; 0 bytes @ 0x0
  3828                           
  3829  0220                     ??_DisableInternalADC:	
  3830                           ; 0 bytes @ 0x0
  3831                           
  3832  0220                     ??_CloseUSART:	
  3833                           ; 0 bytes @ 0x0
  3834                           
  3835  0220                     ?___ftge:	
  3836                           ; 0 bytes @ 0x0
  3837                           
  3838  0220                     ?_CheckSum_byte:	
  3839                           ; 1 bit 
  3840                           
  3841  0220                     ?_ReadFlash_2Byte:	
  3842                           ; 1 bytes @ 0x0
  3843                           
  3844  0220                     ?___ftpack:	
  3845                           ; 2 bytes @ 0x0
  3846                           
  3847  0220                     ?___lldiv:	
  3848                           ; 3 bytes @ 0x0
  3849                           
  3850  0220                     baudUSART@baudconfig:	
  3851                           ; 4 bytes @ 0x0
  3852                           
  3853  0220                     Clock_TRIS@direction:	
  3854                           ; 1 bytes @ 0x0
  3855                           
  3856  0220                     Data_TRIS@direction:	
  3857                           ; 1 bytes @ 0x0
  3858                           
  3859  0220                     PS_2_ENABLE_INTERRUPT@DATA_CLK:	
  3860                           ; 1 bytes @ 0x0
  3861                           
  3862  0220                     READ_PS_2_PIN@DATA_CLK:	
  3863                           ; 1 bytes @ 0x0
  3864                           
  3865  0220                     CheckSum_byte@This:	
  3866                           ; 1 bytes @ 0x0
  3867                           
  3868  0220                     OpenUSART@spbrg:	
  3869                           ; 2 bytes @ 0x0
  3870                           
  3871  0220                     ReadFlash_2Byte@row:	
  3872                           ; 2 bytes @ 0x0
  3873                           
  3874  0220                     ___ftpack@arg:	
  3875                           ; 2 bytes @ 0x0
  3876                           
  3877  0220                     ___ftge@ff1:	
  3878                           ; 3 bytes @ 0x0
  3879                           
  3880  0220                     delayUS@US:	
  3881                           ; 3 bytes @ 0x0
  3882                           
  3883  0220                     ___lldiv@divisor:	
  3884                           ; 4 bytes @ 0x0
  3885                           
  3886                           
  3887                           ; 4 bytes @ 0x0
  3888  0220                     	ds	1
  3889  0221                     ReadUSART@data:	
  3890  0221                     PS_2_DISABLE_INTERRUPT@DATA_CLK:	
  3891                           ; 1 bytes @ 0x1
  3892                           
  3893                           
  3894                           ; 1 bytes @ 0x1
  3895  0221                     	ds	1
  3896  0222                     ??_OpenUSART:	
  3897  0222                     CheckSum_byte@Odd_Even:	
  3898                           ; 0 bytes @ 0x2
  3899                           
  3900  0222                     OpenUSART@config:	
  3901                           ; 1 bytes @ 0x2
  3902                           
  3903  0222                     ReadFlash_2Byte@column:	
  3904                           ; 1 bytes @ 0x2
  3905                           
  3906  0222                     Timer2Init@time:	
  3907                           ; 1 bytes @ 0x2
  3908                           
  3909                           
  3910                           ; 1 bytes @ 0x2
  3911  0222                     	ds	1
  3912  0223                     ??_CheckSum_byte:	
  3913  0223                     ??_ReadFlash_2Byte:	
  3914                           ; 0 bytes @ 0x3
  3915                           
  3916  0223                     Timer2Init@postscaler:	
  3917                           ; 0 bytes @ 0x3
  3918                           
  3919  0223                     ___ftpack@exp:	
  3920                           ; 1 bytes @ 0x3
  3921                           
  3922  0223                     ___ftge@ff2:	
  3923                           ; 1 bytes @ 0x3
  3924                           
  3925                           
  3926                           ; 3 bytes @ 0x3
  3927  0223                     	ds	1
  3928  0224                     ??_delayUS:	
  3929  0224                     Timer2Init@prescaler:	
  3930                           ; 0 bytes @ 0x4
  3931                           
  3932  0224                     ___ftpack@sign:	
  3933                           ; 1 bytes @ 0x4
  3934                           
  3935  0224                     CheckSum_byte@ThisTemp:	
  3936                           ; 1 bytes @ 0x4
  3937                           
  3938  0224                     ___lldiv@dividend:	
  3939                           ; 2 bytes @ 0x4
  3940                           
  3941                           
  3942                           ; 4 bytes @ 0x4
  3943  0224                     	ds	1
  3944  0225                     ??___ftpack:	
  3945  0225                     ?_ReadFlash_4Byte:	
  3946                           ; 0 bytes @ 0x5
  3947                           
  3948  0225                     ReadFlash_4Byte@row:	
  3949                           ; 4 bytes @ 0x5
  3950                           
  3951  0225                     delayUS@i:	
  3952                           ; 2 bytes @ 0x5
  3953                           
  3954                           
  3955                           ; 4 bytes @ 0x5
  3956  0225                     	ds	1
  3957  0226                     ??___ftge:	
  3958  0226                     CheckSum_byte@Parity:	
  3959                           ; 0 bytes @ 0x6
  3960                           
  3961                           
  3962                           ; 1 bytes @ 0x6
  3963  0226                     	ds	1
  3964  0227                     CheckSum_byte@i:	
  3965  0227                     ReadFlash_4Byte@column:	
  3966                           ; 1 bytes @ 0x7
  3967                           
  3968                           
  3969                           ; 1 bytes @ 0x7
  3970  0227                     	ds	1
  3971  0228                     ?_UARTchar:	
  3972  0228                     ??___lldiv:	
  3973                           ; 0 bytes @ 0x8
  3974                           
  3975  0228                     ?___lwtoft:	
  3976                           ; 0 bytes @ 0x8
  3977                           
  3978  0228                     UARTchar@override:	
  3979                           ; 3 bytes @ 0x8
  3980                           
  3981  0228                     ___lwtoft@c:	
  3982                           ; 1 bytes @ 0x8
  3983                           
  3984                           
  3985                           ; 2 bytes @ 0x8
  3986  0228                     	ds	1
  3987  0229                     ??_ReadFlash_4Byte:	
  3988  0229                     delayUS@j:	
  3989                           ; 0 bytes @ 0x9
  3990                           
  3991  0229                     UARTchar@NinethBit_override_data:	
  3992                           ; 1 bytes @ 0x9
  3993                           
  3994  0229                     ___lldiv@quotient:	
  3995                           ; 1 bytes @ 0x9
  3996                           
  3997                           
  3998                           ; 4 bytes @ 0x9
  3999  0229                     	ds	1
  4000  022A                     ??_UARTchar:	
  4001  022A                     ??_Send_PS2:	
  4002                           ; 0 bytes @ 0xA
  4003                           
  4004  022A                     ?_InternalADC_Read:	
  4005                           ; 0 bytes @ 0xA
  4006                           
  4007                           
  4008                           ; 2 bytes @ 0xA
  4009  022A                     	ds	1
  4010  022B                     ??___lwtoft:	
  4011                           
  4012                           ; 0 bytes @ 0xB
  4013  022B                     	ds	1
  4014  022C                     ??_InternalADC_Read:	
  4015  022C                     ?___ftdiv:	
  4016                           ; 0 bytes @ 0xC
  4017                           
  4018  022C                     ___ftdiv@f2:	
  4019                           ; 3 bytes @ 0xC
  4020                           
  4021                           
  4022                           ; 3 bytes @ 0xC
  4023  022C                     	ds	1
  4024  022D                     ___lldiv@counter:	
  4025                           
  4026                           ; 1 bytes @ 0xD
  4027  022D                     	ds	1
  4028  022E                     ?_InitUART:	
  4029  022E                     UARTchar@data:	
  4030                           ; 0 bytes @ 0xE
  4031                           
  4032  022E                     Send_PS2@oddparity:	
  4033                           ; 1 bytes @ 0xE
  4034                           
  4035  022E                     InternalADC_Read@channel:	
  4036                           ; 1 bytes @ 0xE
  4037                           
  4038  022E                     InitUART@Baud:	
  4039                           ; 1 bytes @ 0xE
  4040                           
  4041  022E                     ReadFlash_4Byte@temp:	
  4042                           ; 4 bytes @ 0xE
  4043                           
  4044                           
  4045                           ; 4 bytes @ 0xE
  4046  022E                     	ds	1
  4047  022F                     ?_UARTstringWAIT:	
  4048  022F                     Send_PS2@command:	
  4049                           ; 0 bytes @ 0xF
  4050                           
  4051  022F                     UARTstringWAIT@data:	
  4052                           ; 1 bytes @ 0xF
  4053                           
  4054  022F                     ___ftdiv@f1:	
  4055                           ; 2 bytes @ 0xF
  4056                           
  4057                           
  4058                           ; 3 bytes @ 0xF
  4059  022F                     	ds	1
  4060  0230                     Send_PS2@i:	
  4061                           
  4062                           ; 1 bytes @ 0x10
  4063  0230                     	ds	1
  4064  0231                     ??_UARTstringWAIT:	
  4065  0231                     Send_PS2@timeout:	
  4066                           ; 0 bytes @ 0x11
  4067                           
  4068                           
  4069                           ; 2 bytes @ 0x11
  4070  0231                     	ds	1
  4071  0232                     ??___ftdiv:	
  4072  0232                     ?_ReadBaud:	
  4073                           ; 0 bytes @ 0x12
  4074                           
  4075  0232                     InitUART@parity:	
  4076                           ; 4 bytes @ 0x12
  4077                           
  4078  0232                     ReadBaud@row:	
  4079                           ; 1 bytes @ 0x12
  4080                           
  4081                           
  4082                           ; 2 bytes @ 0x12
  4083  0232                     	ds	1
  4084  0233                     ??_PS_2_INIT:	
  4085  0233                     ??_InitUART:	
  4086                           ; 0 bytes @ 0x13
  4087                           
  4088  0233                     ??_Init_PS_2_Send:	
  4089                           ; 0 bytes @ 0x13
  4090                           
  4091                           
  4092                           ; 0 bytes @ 0x13
  4093  0233                     	ds	1
  4094  0234                     ReadBaud@column:	
  4095                           
  4096                           ; 1 bytes @ 0x14
  4097  0234                     	ds	2
  4098  0236                     ??_ReadBaud:	
  4099  0236                     ___ftdiv@cntr:	
  4100                           ; 0 bytes @ 0x16
  4101                           
  4102                           
  4103                           ; 1 bytes @ 0x16
  4104  0236                     	ds	1
  4105  0237                     ___ftdiv@f3:	
  4106                           
  4107                           ; 3 bytes @ 0x17
  4108  0237                     	ds	3
  4109  023A                     ___ftdiv@exp:	
  4110                           
  4111                           ; 1 bytes @ 0x1A
  4112  023A                     	ds	1
  4113  023B                     ___ftdiv@sign:	
  4114  023B                     InitUART@spbrg:	
  4115                           ; 1 bytes @ 0x1B
  4116                           
  4117                           
  4118                           ; 2 bytes @ 0x1B
  4119  023B                     	ds	1
  4120  023C                     ?___ftmul:	
  4121  023C                     ___ftmul@f1:	
  4122                           ; 3 bytes @ 0x1C
  4123                           
  4124                           
  4125                           ; 3 bytes @ 0x1C
  4126  023C                     	ds	1
  4127  023D                     InitUART@baudconfig:	
  4128                           
  4129                           ; 1 bytes @ 0x1D
  4130  023D                     	ds	1
  4131  023E                     InitUART@config:	
  4132  023E                     ReadBaud@temp:	
  4133                           ; 1 bytes @ 0x1E
  4134                           
  4135                           
  4136                           ; 4 bytes @ 0x1E
  4137  023E                     	ds	1
  4138  023F                     ___ftmul@f2:	
  4139  023F                     InitUART@temp:	
  4140                           ; 3 bytes @ 0x1F
  4141                           
  4142                           
  4143                           ; 4 bytes @ 0x1F
  4144  023F                     	ds	3
  4145  0242                     ??___ftmul:	
  4146                           
  4147                           ; 0 bytes @ 0x22
  4148  0242                     	ds	1
  4149  0243                     ??_Init_System:	
  4150                           
  4151                           ; 0 bytes @ 0x23
  4152  0243                     	ds	3
  4153  0246                     ___ftmul@exp:	
  4154                           
  4155                           ; 1 bytes @ 0x26
  4156  0246                     	ds	1
  4157  0247                     ___ftmul@f3_as_product:	
  4158                           
  4159                           ; 3 bytes @ 0x27
  4160  0247                     	ds	1
  4161  0248                     Init_System@temp:	
  4162                           
  4163                           ; 4 bytes @ 0x28
  4164  0248                     	ds	2
  4165  024A                     ___ftmul@cntr:	
  4166                           
  4167                           ; 1 bytes @ 0x2A
  4168  024A                     	ds	1
  4169  024B                     ___ftmul@sign:	
  4170                           
  4171                           ; 1 bytes @ 0x2B
  4172  024B                     	ds	1
  4173  024C                     ?_ReadVoltage:	
  4174  024C                     Init_System@Baud:	
  4175                           ; 3 bytes @ 0x2C
  4176                           
  4177                           
  4178                           ; 4 bytes @ 0x2C
  4179  024C                     	ds	3
  4180  024F                     ??_ReadVoltage:	
  4181                           
  4182                           ; 0 bytes @ 0x2F
  4183  024F                     	ds	1
  4184  0250                     Init_System@Parity:	
  4185  0250                     ReadVoltage@voltage:	
  4186                           ; 1 bytes @ 0x30
  4187                           
  4188                           
  4189                           ; 3 bytes @ 0x30
  4190  0250                     	ds	3
  4191  0253                     ReadVoltage@temp:	
  4192                           
  4193                           ; 2 bytes @ 0x33
  4194  0253                     	ds	2
  4195  0255                     ??_main:	
  4196                           
  4197                           ; 0 bytes @ 0x35
  4198  0255                     	ds	1
  4199  0256                     main@i:	
  4200                           
  4201                           ; 1 bytes @ 0x36
  4202  0256                     	ds	1
  4203                           
  4204                           	psect	cstackBANK3
  4205  01A0                     __pcstackBANK3:	
  4206  01A0                     Process_PS2_ScanCode@buf:	
  4207                           
  4208                           ; 60 bytes @ 0x0
  4209  01A0                     	ds	60
  4210  01DC                     _Process_PS2_ScanCode$851:	
  4211                           
  4212                           ; 1 bytes @ 0x3C
  4213  01DC                     	ds	1
  4214  01DD                     _Process_PS2_ScanCode$852:	
  4215                           
  4216                           ; 1 bytes @ 0x3D
  4217  01DD                     	ds	1
  4218  01DE                     _Process_PS2_ScanCode$853:	
  4219                           
  4220                           ; 1 bytes @ 0x3E
  4221  01DE                     	ds	1
  4222  01DF                     _Process_PS2_ScanCode$854:	
  4223                           
  4224                           ; 1 bytes @ 0x3F
  4225  01DF                     	ds	1
  4226  01E0                     Process_PS2_ScanCode@temp:	
  4227                           
  4228                           ; 1 bytes @ 0x40
  4229  01E0                     	ds	1
  4230                           
  4231                           	psect	cstackBANK2
  4232  0120                     __pcstackBANK2:	
  4233  0120                     SetBaud@buf:	
  4234                           
  4235                           ; 50 bytes @ 0x0
  4236  0120                     	ds	50
  4237  0152                     SetBaud@Baudtemp:	
  4238                           
  4239                           ; 4 bytes @ 0x32
  4240  0152                     	ds	4
  4241  0156                     SetBaud@Paritytemp:	
  4242                           
  4243                           ; 4 bytes @ 0x36
  4244  0156                     	ds	4
  4245  015A                     SetBaud@temp:	
  4246                           
  4247                           ; 4 bytes @ 0x3A
  4248  015A                     	ds	4
  4249  015E                     SetBaud@i:	
  4250                           
  4251                           ; 1 bytes @ 0x3E
  4252  015E                     	ds	1
  4253                           
  4254                           	psect	cstackBANK1
  4255  00A0                     __pcstackBANK1:	
  4256  00A0                     ?_WriteBaud:	
  4257  00A0                     WriteBaud@row:	
  4258                           ; 0 bytes @ 0x0
  4259                           
  4260                           
  4261                           ; 2 bytes @ 0x0
  4262  00A0                     	ds	2
  4263  00A2                     WriteBaud@Baud:	
  4264                           
  4265                           ; 4 bytes @ 0x2
  4266  00A2                     	ds	4
  4267  00A6                     WriteBaud@Parity:	
  4268                           
  4269                           ; 1 bytes @ 0x6
  4270  00A6                     	ds	1
  4271  00A7                     ??_WriteBaud:	
  4272                           
  4273                           ; 0 bytes @ 0x7
  4274  00A7                     	ds	8
  4275  00AF                     ?_SetBaud:	
  4276  00AF                     SetBaud@Baud:	
  4277                           ; 0 bytes @ 0xF
  4278                           
  4279                           
  4280                           ; 4 bytes @ 0xF
  4281  00AF                     	ds	4
  4282  00B3                     SetBaud@Parity:	
  4283                           
  4284                           ; 1 bytes @ 0x13
  4285  00B3                     	ds	1
  4286  00B4                     ??_SetBaud:	
  4287                           
  4288                           ; 0 bytes @ 0x14
  4289  00B4                     	ds	8
  4290  00BC                     ??_Process_PS2_ScanCode:	
  4291                           
  4292                           ; 0 bytes @ 0x1C
  4293  00BC                     	ds	6
  4294  00C2                     isr@Rx_fault:	
  4295                           
  4296                           ; 1 bytes @ 0x22
  4297  00C2                     	ds	1
  4298  00C3                     isr@rx:	
  4299                           
  4300                           ; 1 bytes @ 0x23
  4301  00C3                     	ds	1
  4302  00C4                     isr@ScanTemp:	
  4303                           
  4304                           ; 1 bytes @ 0x24
  4305  00C4                     	ds	1
  4306                           
  4307                           	psect	cstackCOMMON
  4308  0070                     __pcstackCOMMON:	
  4309  0070                     ?_PS_2_DISABLE_INTERRUPT:	
  4310  0070                     ?_Timer2Reset:	
  4311                           ; 0 bytes @ 0x0
  4312                           
  4313  0070                     ??_Timer2Reset:	
  4314                           ; 0 bytes @ 0x0
  4315                           
  4316  0070                     ?_Timer2ON:	
  4317                           ; 0 bytes @ 0x0
  4318                           
  4319  0070                     ?_PS_2_ENABLE_INTERRUPT:	
  4320                           ; 0 bytes @ 0x0
  4321                           
  4322  0070                     ??_READ_CONFIG_PIN:	
  4323                           ; 0 bytes @ 0x0
  4324                           
  4325  0070                     ?_Timer2OFF:	
  4326                           ; 0 bytes @ 0x0
  4327                           
  4328  0070                     ??_Timer2OFF:	
  4329                           ; 0 bytes @ 0x0
  4330                           
  4331  0070                     ?_ResendLast:	
  4332                           ; 0 bytes @ 0x0
  4333                           
  4334  0070                     ?_Process_PS2_ScanCode:	
  4335                           ; 0 bytes @ 0x0
  4336                           
  4337  0070                     ?_ConfigureOscillator:	
  4338                           ; 0 bytes @ 0x0
  4339                           
  4340  0070                     ?_InitApp:	
  4341                           ; 0 bytes @ 0x0
  4342                           
  4343  0070                     ?_Init_System:	
  4344                           ; 0 bytes @ 0x0
  4345                           
  4346  0070                     ?_PS_2_INIT:	
  4347                           ; 0 bytes @ 0x0
  4348                           
  4349  0070                     ?_baudUSART:	
  4350                           ; 0 bytes @ 0x0
  4351                           
  4352  0070                     ?_Clock_TRIS:	
  4353                           ; 0 bytes @ 0x0
  4354                           
  4355  0070                     ?_Data_TRIS:	
  4356                           ; 0 bytes @ 0x0
  4357                           
  4358  0070                     ?_Timer2Init:	
  4359                           ; 0 bytes @ 0x0
  4360                           
  4361  0070                     ??_Decode_Scan_Code_FunctionE0:	
  4362                           ; 0 bytes @ 0x0
  4363                           
  4364  0070                     ??_Decode_Scan_Code_Shift:	
  4365                           ; 0 bytes @ 0x0
  4366                           
  4367  0070                     ??_Decode_Scan_Code:	
  4368                           ; 0 bytes @ 0x0
  4369                           
  4370  0070                     ??_Decode_Scan_Code_Function:	
  4371                           ; 0 bytes @ 0x0
  4372                           
  4373  0070                     ?_DisableInternalADC:	
  4374                           ; 0 bytes @ 0x0
  4375                           
  4376  0070                     ?_isr:	
  4377                           ; 0 bytes @ 0x0
  4378                           
  4379  0070                     ?_main:	
  4380                           ; 0 bytes @ 0x0
  4381                           
  4382  0070                     ??_Reverse_Byte:	
  4383                           ; 0 bytes @ 0x0
  4384                           
  4385  0070                     ??_ISNUMBER:	
  4386                           ; 0 bytes @ 0x0
  4387                           
  4388  0070                     ?_cleanBuffer:	
  4389                           ; 0 bytes @ 0x0
  4390                           
  4391  0070                     ?_CloseUSART:	
  4392                           ; 0 bytes @ 0x0
  4393                           
  4394  0070                     ?_UART_send_break:	
  4395                           ; 0 bytes @ 0x0
  4396                           
  4397  0070                     ??_UART_send_break:	
  4398                           ; 0 bytes @ 0x0
  4399                           
  4400  0070                     ?_UNLOCK:	
  4401                           ; 0 bytes @ 0x0
  4402                           
  4403  0070                     ??_UNLOCK:	
  4404                           ; 0 bytes @ 0x0
  4405                           
  4406  0070                     ?_BlockErase:	
  4407                           ; 0 bytes @ 0x0
  4408                           
  4409  0070                     ?i1_delayUS:	
  4410                           ; 0 bytes @ 0x0
  4411                           
  4412  0070                     ?i1_CloseUSART:	
  4413                           ; 0 bytes @ 0x0
  4414                           
  4415  0070                     ??i1_CloseUSART:	
  4416                           ; 0 bytes @ 0x0
  4417                           
  4418  0070                     ?i1_baudUSART:	
  4419                           ; 0 bytes @ 0x0
  4420                           
  4421  0070                     ??i1_baudUSART:	
  4422                           ; 0 bytes @ 0x0
  4423                           
  4424  0070                     ?i1_OpenUSART:	
  4425                           ; 0 bytes @ 0x0
  4426                           
  4427  0070                     ??i1_ReadUSART:	
  4428                           ; 0 bytes @ 0x0
  4429                           
  4430  0070                     ?i1_Clock_TRIS:	
  4431                           ; 0 bytes @ 0x0
  4432                           
  4433  0070                     ??i1_Clock_TRIS:	
  4434                           ; 0 bytes @ 0x0
  4435                           
  4436  0070                     ?i1_Data_TRIS:	
  4437                           ; 0 bytes @ 0x0
  4438                           
  4439  0070                     ??i1_Data_TRIS:	
  4440                           ; 0 bytes @ 0x0
  4441                           
  4442  0070                     ?i1_PS_2_DISABLE_INTERRUPT:	
  4443                           ; 0 bytes @ 0x0
  4444                           
  4445  0070                     ??i1_PS_2_DISABLE_INTERRUPT:	
  4446                           ; 0 bytes @ 0x0
  4447                           
  4448  0070                     ?i1_PS_2_ENABLE_INTERRUPT:	
  4449                           ; 0 bytes @ 0x0
  4450                           
  4451  0070                     ??i1_PS_2_ENABLE_INTERRUPT:	
  4452                           ; 0 bytes @ 0x0
  4453                           
  4454  0070                     ??i1_READ_PS_2_PIN:	
  4455                           ; 0 bytes @ 0x0
  4456                           
  4457  0070                     ?i1_Timer2ON:	
  4458                           ; 0 bytes @ 0x0
  4459                           
  4460  0070                     ??i1_Timer2ON:	
  4461                           ; 0 bytes @ 0x0
  4462                           
  4463  0070                     ?_READ_PS_2_PIN:	
  4464                           ; 0 bytes @ 0x0
  4465                           
  4466  0070                     ?_ReadUSART:	
  4467                           ; 1 bytes @ 0x0
  4468                           
  4469  0070                     ?_READ_CONFIG_PIN:	
  4470                           ; 1 bytes @ 0x0
  4471                           
  4472  0070                     ?_Init_PS_2_Send:	
  4473                           ; 1 bytes @ 0x0
  4474                           
  4475  0070                     ?_Send_PS2:	
  4476                           ; 1 bytes @ 0x0
  4477                           
  4478  0070                     ?_Decode_Scan_Code_FunctionE0:	
  4479                           ; 1 bytes @ 0x0
  4480                           
  4481  0070                     ?_Decode_Scan_Code_Shift:	
  4482                           ; 1 bytes @ 0x0
  4483                           
  4484  0070                     ?_Decode_Scan_Code:	
  4485                           ; 1 bytes @ 0x0
  4486                           
  4487  0070                     ?_Decode_Scan_Code_Function:	
  4488                           ; 1 bytes @ 0x0
  4489                           
  4490  0070                     ?_Reverse_Byte:	
  4491                           ; 1 bytes @ 0x0
  4492                           
  4493  0070                     ?_ISNUMBER:	
  4494                           ; 1 bytes @ 0x0
  4495                           
  4496  0070                     ?_BufferShiftBack:	
  4497                           ; 1 bytes @ 0x0
  4498                           
  4499  0070                     ?i1_CheckSum_byte:	
  4500                           ; 1 bytes @ 0x0
  4501                           
  4502  0070                     ?i1_ReadUSART:	
  4503                           ; 1 bytes @ 0x0
  4504                           
  4505  0070                     ?i1_READ_PS_2_PIN:	
  4506                           ; 1 bytes @ 0x0
  4507                           
  4508  0070                     ?i1_Send_PS2:	
  4509                           ; 1 bytes @ 0x0
  4510                           
  4511  0070                     ?i1_ReadFlash_2Byte:	
  4512                           ; 1 bytes @ 0x0
  4513                           
  4514  0070                     ?___lmul:	
  4515                           ; 2 bytes @ 0x0
  4516                           
  4517  0070                     ?i1___lldiv:	
  4518                           ; 4 bytes @ 0x0
  4519                           
  4520  0070                     ISNUMBER@ascii:	
  4521                           ; 4 bytes @ 0x0
  4522                           
  4523  0070                     BufferShiftBack@shift:	
  4524                           ; 1 bytes @ 0x0
  4525                           
  4526  0070                     Decode_Scan_Code@Code:	
  4527                           ; 1 bytes @ 0x0
  4528                           
  4529  0070                     Decode_Scan_Code_Shift@Code:	
  4530                           ; 1 bytes @ 0x0
  4531                           
  4532  0070                     Decode_Scan_Code_FunctionE0@Code:	
  4533                           ; 1 bytes @ 0x0
  4534                           
  4535  0070                     Decode_Scan_Code_Function@Code:	
  4536                           ; 1 bytes @ 0x0
  4537                           
  4538  0070                     i1baudUSART@baudconfig:	
  4539                           ; 1 bytes @ 0x0
  4540                           
  4541  0070                     i1Clock_TRIS@direction:	
  4542                           ; 1 bytes @ 0x0
  4543                           
  4544  0070                     i1Data_TRIS@direction:	
  4545                           ; 1 bytes @ 0x0
  4546                           
  4547  0070                     i1PS_2_ENABLE_INTERRUPT@DATA_CLK:	
  4548                           ; 1 bytes @ 0x0
  4549                           
  4550  0070                     i1READ_PS_2_PIN@DATA_CLK:	
  4551                           ; 1 bytes @ 0x0
  4552                           
  4553  0070                     cleanBuffer@count:	
  4554                           ; 1 bytes @ 0x0
  4555                           
  4556  0070                     BlockErase@row:	
  4557                           ; 2 bytes @ 0x0
  4558                           
  4559  0070                     i1CheckSum_byte@This:	
  4560                           ; 2 bytes @ 0x0
  4561                           
  4562  0070                     i1OpenUSART@spbrg:	
  4563                           ; 2 bytes @ 0x0
  4564                           
  4565  0070                     i1ReadFlash_2Byte@row:	
  4566                           ; 2 bytes @ 0x0
  4567                           
  4568  0070                     ___lmul@multiplier:	
  4569                           ; 2 bytes @ 0x0
  4570                           
  4571  0070                     i1delayUS@US:	
  4572                           ; 4 bytes @ 0x0
  4573                           
  4574  0070                     i1___lldiv@divisor:	
  4575                           ; 4 bytes @ 0x0
  4576                           
  4577                           
  4578                           ; 4 bytes @ 0x0
  4579  0070                     	ds	1
  4580  0071                     BufferShiftBack@size:	
  4581  0071                     i1ReadUSART@data:	
  4582                           ; 1 bytes @ 0x1
  4583                           
  4584  0071                     i1PS_2_DISABLE_INTERRUPT@DATA_CLK:	
  4585                           ; 1 bytes @ 0x1
  4586                           
  4587                           
  4588                           ; 1 bytes @ 0x1
  4589  0071                     	ds	1
  4590  0072                     ??_cleanBuffer:	
  4591  0072                     ??_BufferShiftBack:	
  4592                           ; 0 bytes @ 0x2
  4593                           
  4594  0072                     ??_BlockErase:	
  4595                           ; 0 bytes @ 0x2
  4596                           
  4597  0072                     ??i1_OpenUSART:	
  4598                           ; 0 bytes @ 0x2
  4599                           
  4600  0072                     Reverse_Byte@temp:	
  4601                           ; 0 bytes @ 0x2
  4602                           
  4603  0072                     i1CheckSum_byte@Odd_Even:	
  4604                           ; 1 bytes @ 0x2
  4605                           
  4606  0072                     i1OpenUSART@config:	
  4607                           ; 1 bytes @ 0x2
  4608                           
  4609  0072                     i1ReadFlash_2Byte@column:	
  4610                           ; 1 bytes @ 0x2
  4611                           
  4612                           
  4613                           ; 1 bytes @ 0x2
  4614  0072                     	ds	1
  4615  0073                     ??i1_CheckSum_byte:	
  4616  0073                     ??i1_ReadFlash_2Byte:	
  4617                           ; 0 bytes @ 0x3
  4618                           
  4619  0073                     Reverse_Byte@This:	
  4620                           ; 0 bytes @ 0x3
  4621                           
  4622  0073                     cleanBuffer@data:	
  4623                           ; 1 bytes @ 0x3
  4624                           
  4625                           
  4626                           ; 1 bytes @ 0x3
  4627  0073                     	ds	1
  4628  0074                     ??i1_delayUS:	
  4629  0074                     cleanBuffer@i:	
  4630                           ; 0 bytes @ 0x4
  4631                           
  4632  0074                     i1CheckSum_byte@ThisTemp:	
  4633                           ; 1 bytes @ 0x4
  4634                           
  4635  0074                     ___lmul@multiplicand:	
  4636                           ; 2 bytes @ 0x4
  4637                           
  4638  0074                     i1___lldiv@dividend:	
  4639                           ; 4 bytes @ 0x4
  4640                           
  4641                           
  4642                           ; 4 bytes @ 0x4
  4643  0074                     	ds	1
  4644  0075                     ?i1_ReadFlash_4Byte:	
  4645  0075                     i1ReadFlash_4Byte@row:	
  4646                           ; 4 bytes @ 0x5
  4647                           
  4648  0075                     i1delayUS@i:	
  4649                           ; 2 bytes @ 0x5
  4650                           
  4651                           
  4652                           ; 4 bytes @ 0x5
  4653  0075                     	ds	1
  4654  0076                     BufferShiftBack@i:	
  4655  0076                     i1CheckSum_byte@Parity:	
  4656                           ; 1 bytes @ 0x6
  4657                           
  4658                           
  4659                           ; 1 bytes @ 0x6
  4660  0076                     	ds	1
  4661  0077                     BufferShiftBack@buffer:	
  4662  0077                     i1CheckSum_byte@i:	
  4663                           ; 1 bytes @ 0x7
  4664                           
  4665  0077                     i1ReadFlash_4Byte@column:	
  4666                           ; 1 bytes @ 0x7
  4667                           
  4668                           
  4669                           ; 1 bytes @ 0x7
  4670  0077                     	ds	1
  4671  0078                     ??___lmul:	
  4672  0078                     ?i1_UARTchar:	
  4673                           ; 0 bytes @ 0x8
  4674                           
  4675  0078                     ??i1___lldiv:	
  4676                           ; 0 bytes @ 0x8
  4677                           
  4678  0078                     ?_PS2RawToScan:	
  4679                           ; 0 bytes @ 0x8
  4680                           
  4681  0078                     i1UARTchar@override:	
  4682                           ; 2 bytes @ 0x8
  4683                           
  4684  0078                     PS2RawToScan@Raw:	
  4685                           ; 1 bytes @ 0x8
  4686                           
  4687  0078                     ___lmul@product:	
  4688                           ; 2 bytes @ 0x8
  4689                           
  4690                           
  4691                           ; 4 bytes @ 0x8
  4692  0078                     	ds	1
  4693  0079                     ??i1_ReadFlash_4Byte:	
  4694  0079                     i1delayUS@j:	
  4695                           ; 0 bytes @ 0x9
  4696                           
  4697  0079                     i1UARTchar@NinethBit_override_data:	
  4698                           ; 1 bytes @ 0x9
  4699                           
  4700  0079                     i1___lldiv@quotient:	
  4701                           ; 1 bytes @ 0x9
  4702                           
  4703                           
  4704                           ; 4 bytes @ 0x9
  4705  0079                     	ds	1
  4706  007A                     ?_UART_send_break_timed:	
  4707  007A                     ?_WriteFlash_Sequential:	
  4708                           ; 0 bytes @ 0xA
  4709                           
  4710  007A                     ??i1_UARTchar:	
  4711                           ; 0 bytes @ 0xA
  4712                           
  4713  007A                     ??i1_Send_PS2:	
  4714                           ; 0 bytes @ 0xA
  4715                           
  4716  007A                     UART_send_break_timed@US:	
  4717                           ; 0 bytes @ 0xA
  4718                           
  4719  007A                     PS2RawToScan@temp:	
  4720                           ; 2 bytes @ 0xA
  4721                           
  4722  007A                     WriteFlash_Sequential@row:	
  4723                           ; 2 bytes @ 0xA
  4724                           
  4725                           
  4726                           ; 2 bytes @ 0xA
  4727  007A                     	ds	2
  4728  007C                     ??_UART_send_break_timed:	
  4729  007C                     WriteFlash_Sequential@buffer:	
  4730                           ; 0 bytes @ 0xC
  4731                           
  4732                           
  4733                           ; 1 bytes @ 0xC
  4734  007C                     	ds	1
  4735  007D                     WriteFlash_Sequential@amount:	
  4736  007D                     i1___lldiv@counter:	
  4737                           ; 1 bytes @ 0xD
  4738                           
  4739                           
  4740                           ; 1 bytes @ 0xD
  4741  007D                     	ds	1
  4742  007E                     ??_ResendLast:	
  4743                           
  4744                           	psect	cstackBANK0
  4745  0020                     __pcstackBANK0:	
  4746                           ; 0 bytes @ 0xE
  4747                           
  4748  0020                     ??_PS2RawToScan:	
  4749  0020                     ??_WriteFlash_Sequential:	
  4750                           ; 0 bytes @ 0x0
  4751                           
  4752  0020                     ?i1_InitUART:	
  4753                           ; 0 bytes @ 0x0
  4754                           
  4755  0020                     ?___llmod:	
  4756                           ; 0 bytes @ 0x0
  4757                           
  4758  0020                     i1UARTchar@data:	
  4759                           ; 4 bytes @ 0x0
  4760                           
  4761  0020                     i1Send_PS2@oddparity:	
  4762                           ; 1 bytes @ 0x0
  4763                           
  4764  0020                     ___llmod@divisor:	
  4765                           ; 1 bytes @ 0x0
  4766                           
  4767  0020                     i1InitUART@Baud:	
  4768                           ; 4 bytes @ 0x0
  4769                           
  4770  0020                     i1ReadFlash_4Byte@temp:	
  4771                           ; 4 bytes @ 0x0
  4772                           
  4773                           
  4774                           ; 4 bytes @ 0x0
  4775  0020                     	ds	1
  4776  0021                     ?i1_UARTstringWAIT:	
  4777  0021                     i1Send_PS2@command:	
  4778                           ; 0 bytes @ 0x1
  4779                           
  4780  0021                     i1UARTstringWAIT@data:	
  4781                           ; 1 bytes @ 0x1
  4782                           
  4783                           
  4784                           ; 2 bytes @ 0x1
  4785  0021                     	ds	1
  4786  0022                     i1Send_PS2@i:	
  4787                           
  4788                           ; 1 bytes @ 0x2
  4789  0022                     	ds	1
  4790  0023                     ??i1_UARTstringWAIT:	
  4791  0023                     i1Send_PS2@timeout:	
  4792                           ; 0 bytes @ 0x3
  4793                           
  4794  0023                     WriteFlash_Sequential@TempBufH:	
  4795                           ; 2 bytes @ 0x3
  4796                           
  4797                           
  4798                           ; 32 bytes @ 0x3
  4799  0023                     	ds	1
  4800  0024                     ?i1_ReadBaud:	
  4801  0024                     i1InitUART@parity:	
  4802                           ; 4 bytes @ 0x4
  4803                           
  4804  0024                     i1ReadBaud@row:	
  4805                           ; 1 bytes @ 0x4
  4806                           
  4807  0024                     ___llmod@dividend:	
  4808                           ; 2 bytes @ 0x4
  4809                           
  4810                           
  4811                           ; 4 bytes @ 0x4
  4812  0024                     	ds	1
  4813  0025                     ??i1_InitUART:	
  4814                           
  4815                           ; 0 bytes @ 0x5
  4816  0025                     	ds	1
  4817  0026                     i1ReadBaud@column:	
  4818                           
  4819                           ; 1 bytes @ 0x6
  4820  0026                     	ds	2
  4821  0028                     ??___llmod:	
  4822  0028                     ??i1_ReadBaud:	
  4823                           ; 0 bytes @ 0x8
  4824                           
  4825                           
  4826                           ; 0 bytes @ 0x8
  4827  0028                     	ds	1
  4828  0029                     ___llmod@counter:	
  4829                           
  4830                           ; 1 bytes @ 0x9
  4831  0029                     	ds	1
  4832  002A                     ?_sprintf:	
  4833  002A                     sprintf@f:	
  4834                           ; 2 bytes @ 0xA
  4835                           
  4836                           
  4837                           ; 2 bytes @ 0xA
  4838  002A                     	ds	3
  4839  002D                     i1InitUART@spbrg:	
  4840                           
  4841                           ; 2 bytes @ 0xD
  4842  002D                     	ds	2
  4843  002F                     i1InitUART@baudconfig:	
  4844                           
  4845                           ; 1 bytes @ 0xF
  4846  002F                     	ds	1
  4847  0030                     ??_sprintf:	
  4848  0030                     i1InitUART@config:	
  4849                           ; 0 bytes @ 0x10
  4850                           
  4851  0030                     i1ReadBaud@temp:	
  4852                           ; 1 bytes @ 0x10
  4853                           
  4854                           
  4855                           ; 4 bytes @ 0x10
  4856  0030                     	ds	1
  4857  0031                     i1InitUART@temp:	
  4858                           
  4859                           ; 4 bytes @ 0x11
  4860  0031                     	ds	5
  4861  0036                     sprintf@flag:	
  4862                           
  4863                           ; 1 bytes @ 0x16
  4864  0036                     	ds	1
  4865  0037                     sprintf@prec:	
  4866                           
  4867                           ; 2 bytes @ 0x17
  4868  0037                     	ds	2
  4869  0039                     sprintf@_val:	
  4870                           
  4871                           ; 4 bytes @ 0x19
  4872  0039                     	ds	4
  4873  003D                     sprintf@ap:	
  4874                           
  4875                           ; 1 bytes @ 0x1D
  4876  003D                     	ds	1
  4877  003E                     sprintf@sp:	
  4878                           
  4879                           ; 1 bytes @ 0x1E
  4880  003E                     	ds	1
  4881  003F                     sprintf@c:	
  4882                           
  4883                           ; 1 bytes @ 0x1F
  4884  003F                     	ds	4
  4885  0043                     WriteFlash_Sequential@TempBufL:	
  4886                           
  4887                           ; 32 bytes @ 0x23
  4888  0043                     	ds	32
  4889  0063                     WriteFlash_Sequential@tempH:	
  4890                           
  4891                           ; 1 bytes @ 0x43
  4892  0063                     	ds	1
  4893  0064                     WriteFlash_Sequential@tempL:	
  4894                           
  4895                           ; 1 bytes @ 0x44
  4896  0064                     	ds	1
  4897  0065                     WriteFlash_Sequential@amountTemp:	
  4898                           
  4899                           ; 1 bytes @ 0x45
  4900  0065                     	ds	1
  4901  0066                     WriteFlash_Sequential@temp:	
  4902                           
  4903                           ; 2 bytes @ 0x46
  4904  0066                     	ds	2
  4905  0068                     WriteFlash_Sequential@spaces:	
  4906                           
  4907                           ; 1 bytes @ 0x48
  4908  0068                     	ds	1
  4909  0069                     WriteFlash_Sequential@i:	
  4910                           
  4911                           ; 1 bytes @ 0x49
  4912  0069                     	ds	1
  4913  006A                     WriteBaud@temp:	
  4914                           
  4915                           ; 4 bytes @ 0x4A
  4916  006A                     	ds	4
  4917  006E                     ??_isr:	
  4918                           
  4919                           ; 0 bytes @ 0x4E
  4920  006E                     	ds	2
  4921                           
  4922                           	psect	maintext
  4923  1611                     __pmaintext:	
  4924 ;;
  4925 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  4926 ;;
  4927 ;; *************** function _main *****************
  4928 ;; Defined at:
  4929 ;;		line 110 in file "main.c"
  4930 ;; Parameters:    Size  Location     Type
  4931 ;;		None
  4932 ;; Auto vars:     Size  Location     Type
  4933 ;;  i               1   54[BANK4 ] unsigned char 
  4934 ;; Return value:  Size  Location     Type
  4935 ;;		None               void
  4936 ;; Registers used:
  4937 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4938 ;; Tracked objects:
  4939 ;;		On entry : 17F/0
  4940 ;;		On exit  : 0/0
  4941 ;;		Unchanged: 0/0
  4942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4944 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  4945 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  4946 ;;      Totals:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  4947 ;;Total ram usage:        2 bytes
  4948 ;; Hardware stack levels required when called:   11
  4949 ;; This function calls:
  4950 ;;		_ConfigureOscillator
  4951 ;;		_InitApp
  4952 ;;		_Init_System
  4953 ;;		_PS_2_ENABLE_INTERRUPT
  4954 ;;		_PS_2_INIT
  4955 ;;		_ReadVoltage
  4956 ;;		_UARTstringWAIT
  4957 ;;		___ftge
  4958 ;;		_delayUS
  4959 ;; This function is called by:
  4960 ;;		Startup code after reset
  4961 ;; This function uses a non-reentrant model
  4962 ;;
  4963                           
  4964                           
  4965                           ;psect for function _main
  4966  1611                     _main:	
  4967                           
  4968                           ;main.c: 112: unsigned char i=0;
  4969                           
  4970                           ;incstack = 0
  4971                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4972  1611  0024               	movlb	4	; select bank4
  4973  1612  01D6               	clrf	main@i^(0+512)
  4974                           
  4975                           ;main.c: 114: ConfigureOscillator();
  4976  1613  3199  2140  3196   	fcall	_ConfigureOscillator
  4977                           
  4978                           ;main.c: 115: InitApp();
  4979  1616  3199  218C  3196   	fcall	_InitApp
  4980                           
  4981                           ;main.c: 116: Init_System();
  4982  1619  318A  2248  3196   	fcall	_Init_System
  4983                           
  4984                           ;main.c: 117: PS_2_INIT();
  4985  161C  3198  20DA  3196   	fcall	_PS_2_INIT
  4986                           
  4987                           ;main.c: 120: for(i =0;i<10;i++)
  4988  161F  0024               	movlb	4	; select bank4
  4989  1620  01D6               	clrf	main@i^(0+512)
  4990  1621  300A               	movlw	10
  4991  1622  0256               	subwf	main@i^(0+512),w
  4992  1623  1803               	btfsc	3,0
  4993  1624  2E4E               	goto	l6938
  4994  1625                     l171:	
  4995                           
  4996                           ;main.c: 121: {
  4997                           ;main.c: 122: LATC |= 0b00010000;
  4998  1625  0022               	movlb	2	; select bank2
  4999  1626  160E               	bsf	14,4	;volatile
  5000                           
  5001                           ;main.c: 123: delayUS(10000);
  5002  1627  3000               	movlw	0
  5003  1628  0024               	movlb	4	; select bank4
  5004  1629  00A3               	movwf	(delayUS@US+3)^(0+512)
  5005  162A  3000               	movlw	0
  5006  162B  00A2               	movwf	(delayUS@US+2)^(0+512)
  5007  162C  3027               	movlw	39
  5008  162D  00A1               	movwf	(delayUS@US+1)^(0+512)
  5009  162E  3010               	movlw	16
  5010  162F  00A0               	movwf	delayUS@US^(0+512)
  5011  1630  319B  23DB  3196   	fcall	_delayUS
  5012                           
  5013                           ;main.c: 124: LATC &= ~0b00010000;
  5014  1633  30EF               	movlw	239
  5015  1634  0024               	movlb	4	; select bank4
  5016  1635  00D5               	movwf	??_main^(0+512)
  5017  1636  0855               	movf	??_main^(0+512),w
  5018  1637  0022               	movlb	2	; select bank2
  5019  1638  058E               	andwf	14,f	;volatile
  5020                           
  5021                           ;main.c: 125: delayUS(10000);
  5022  1639  3000               	movlw	0
  5023  163A  0024               	movlb	4	; select bank4
  5024  163B  00A3               	movwf	(delayUS@US+3)^(0+512)
  5025  163C  3000               	movlw	0
  5026  163D  00A2               	movwf	(delayUS@US+2)^(0+512)
  5027  163E  3027               	movlw	39
  5028  163F  00A1               	movwf	(delayUS@US+1)^(0+512)
  5029  1640  3010               	movlw	16
  5030  1641  00A0               	movwf	delayUS@US^(0+512)
  5031  1642  319B  23DB  3196   	fcall	_delayUS
  5032  1645  3001               	movlw	1
  5033  1646  0024               	movlb	4	; select bank4
  5034  1647  00D5               	movwf	??_main^(0+512)
  5035  1648  0855               	movf	??_main^(0+512),w
  5036  1649  07D6               	addwf	main@i^(0+512),f
  5037  164A  300A               	movlw	10
  5038  164B  0256               	subwf	main@i^(0+512),w
  5039  164C  1C03               	skipc
  5040  164D  2E25               	goto	l171
  5041  164E                     l6938:	
  5042                           
  5043                           ;main.c: 126: }
  5044                           ;main.c: 128: BatteryVoltage = ReadVoltage();
  5045  164E  3190  201A  3196   	fcall	_ReadVoltage
  5046  1651  0024               	movlb	4	; select bank4
  5047  1652  084C               	movf	?_ReadVoltage^(0+512),w
  5048  1653  00D7               	movwf	_BatteryVoltage^(0+512)
  5049  1654  084D               	movf	(?_ReadVoltage+1)^(0+512),w
  5050  1655  00D8               	movwf	(_BatteryVoltage+1)^(0+512)
  5051  1656  084E               	movf	(?_ReadVoltage+2)^(0+512),w
  5052  1657  00D9               	movwf	(_BatteryVoltage+2)^(0+512)
  5053                           
  5054                           ;main.c: 129: if(BatteryVoltage < 6.55 )
  5055  1658  0857               	movf	_BatteryVoltage^(0+512),w
  5056  1659  00A0               	movwf	___ftge@ff1^(0+512)
  5057  165A  0858               	movf	(_BatteryVoltage+1)^(0+512),w
  5058  165B  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5059  165C  0859               	movf	(_BatteryVoltage+2)^(0+512),w
  5060  165D  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5061  165E  309A               	movlw	154
  5062  165F  00A3               	movwf	___ftge@ff2^(0+512)
  5063  1660  30D1               	movlw	209
  5064  1661  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5065  1662  3040               	movlw	64
  5066  1663  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5067  1664  319C  2410  3196   	fcall	___ftge
  5068  1667  1803               	btfsc	3,0
  5069  1668  2E76               	goto	l6942
  5070                           
  5071                           ;main.c: 130: {
  5072                           ;main.c: 131: UARTstringWAIT(VoltageMSG);
  5073  1669  3059               	movlw	low (_VoltageMSG| (0+32768))
  5074  166A  0024               	movlb	4	; select bank4
  5075  166B  00AF               	movwf	UARTstringWAIT@data^(0+512)
  5076  166C  3089               	movlw	high (_VoltageMSG| (0+32768))
  5077  166D  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  5078  166E  319B  23A8  3196   	fcall	_UARTstringWAIT
  5079                           
  5080                           ;main.c: 132: UARTstringWAIT("Low!\r\n");
  5081  1671  303A               	movlw	low (STR_1| (0+32768))
  5082  1672  0024               	movlb	4	; select bank4
  5083  1673  00AF               	movwf	UARTstringWAIT@data^(0+512)
  5084  1674  308A               	movlw	high (STR_1| (0+32768))
  5085  1675  2E94               	goto	L1
  5086  1676                     l6942:	
  5087                           ;main.c: 133: }
  5088                           
  5089                           
  5090                           ;main.c: 134: else if (BatteryVoltage > 30.0)
  5091  1676  3000               	movlw	0
  5092  1677  0024               	movlb	4	; select bank4
  5093  1678  00A0               	movwf	___ftge@ff1^(0+512)
  5094  1679  30F0               	movlw	240
  5095  167A  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5096  167B  3041               	movlw	65
  5097  167C  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5098  167D  0857               	movf	_BatteryVoltage^(0+512),w
  5099  167E  00A3               	movwf	___ftge@ff2^(0+512)
  5100  167F  0858               	movf	(_BatteryVoltage+1)^(0+512),w
  5101  1680  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5102  1681  0859               	movf	(_BatteryVoltage+2)^(0+512),w
  5103  1682  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5104  1683  319C  2410  3196   	fcall	___ftge
  5105  1686  1803               	btfsc	3,0
  5106  1687  2E98               	goto	l6946
  5107                           
  5108                           ;main.c: 135: {
  5109                           ;main.c: 136: UARTstringWAIT(VoltageMSG);
  5110  1688  3059               	movlw	low (_VoltageMSG| (0+32768))
  5111  1689  0024               	movlb	4	; select bank4
  5112  168A  00AF               	movwf	UARTstringWAIT@data^(0+512)
  5113  168B  3089               	movlw	high (_VoltageMSG| (0+32768))
  5114  168C  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  5115  168D  319B  23A8  3196   	fcall	_UARTstringWAIT
  5116                           
  5117                           ;main.c: 137: UARTstringWAIT("High!\r\n");
  5118  1690  3032               	movlw	low (STR_2| (0+32768))
  5119  1691  0024               	movlb	4	; select bank4
  5120  1692  00AF               	movwf	UARTstringWAIT@data^(0+512)
  5121  1693  308A               	movlw	high (STR_2| (0+32768))
  5122  1694                     L1:	
  5123  1694  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  5124  1695  319B  23A8  3196   	fcall	_UARTstringWAIT
  5125  1698                     l6946:	
  5126                           
  5127                           ;main.c: 138: }
  5128                           ;main.c: 140: PS_2_ENABLE_INTERRUPT(0b00100000);
  5129  1698  3020               	movlw	32
  5130  1699  3198  20B3  3196   	fcall	_PS_2_ENABLE_INTERRUPT
  5131                           
  5132                           ;main.c: 142: PIE1bits.RCIE = 1;
  5133  169C  0021               	movlb	1	; select bank1
  5134  169D  1691               	bsf	17,5	;volatile
  5135  169E                     l6950:	
  5136                           ;main.c: 145: while(1)
  5137                           
  5138                           
  5139                           ;main.c: 146: {
  5140                           ;main.c: 147: BatteryVoltage = ReadVoltage();
  5141  169E  3190  201A  3196   	fcall	_ReadVoltage
  5142  16A1  0024               	movlb	4	; select bank4
  5143  16A2  084C               	movf	?_ReadVoltage^(0+512),w
  5144  16A3  00D7               	movwf	_BatteryVoltage^(0+512)
  5145  16A4  084D               	movf	(?_ReadVoltage+1)^(0+512),w
  5146  16A5  00D8               	movwf	(_BatteryVoltage+1)^(0+512)
  5147  16A6  084E               	movf	(?_ReadVoltage+2)^(0+512),w
  5148  16A7  00D9               	movwf	(_BatteryVoltage+2)^(0+512)
  5149                           
  5150                           ;main.c: 148: delayUS(20);
  5151  16A8  3000               	movlw	0
  5152  16A9  00A3               	movwf	(delayUS@US+3)^(0+512)
  5153  16AA  3000               	movlw	0
  5154  16AB  00A2               	movwf	(delayUS@US+2)^(0+512)
  5155  16AC  3000               	movlw	0
  5156  16AD  00A1               	movwf	(delayUS@US+1)^(0+512)
  5157  16AE  3014               	movlw	20
  5158  16AF  00A0               	movwf	delayUS@US^(0+512)
  5159  16B0  319B  23DB  3196   	fcall	_delayUS
  5160                           
  5161                           ;main.c: 149: if(BatteryVoltage < 6.55 || BatteryVoltage > 30.0)
  5162  16B3  0024               	movlb	4	; select bank4
  5163  16B4  0857               	movf	_BatteryVoltage^(0+512),w
  5164  16B5  00A0               	movwf	___ftge@ff1^(0+512)
  5165  16B6  0858               	movf	(_BatteryVoltage+1)^(0+512),w
  5166  16B7  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5167  16B8  0859               	movf	(_BatteryVoltage+2)^(0+512),w
  5168  16B9  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5169  16BA  309A               	movlw	154
  5170  16BB  00A3               	movwf	___ftge@ff2^(0+512)
  5171  16BC  30D1               	movlw	209
  5172  16BD  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5173  16BE  3040               	movlw	64
  5174  16BF  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5175  16C0  319C  2410  3196   	fcall	___ftge
  5176  16C3  1C03               	btfss	3,0
  5177  16C4  2ED7               	goto	l179
  5178  16C5  3000               	movlw	0
  5179  16C6  0024               	movlb	4	; select bank4
  5180  16C7  00A0               	movwf	___ftge@ff1^(0+512)
  5181  16C8  30F0               	movlw	240
  5182  16C9  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5183  16CA  3041               	movlw	65
  5184  16CB  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5185  16CC  0857               	movf	_BatteryVoltage^(0+512),w
  5186  16CD  00A3               	movwf	___ftge@ff2^(0+512)
  5187  16CE  0858               	movf	(_BatteryVoltage+1)^(0+512),w
  5188  16CF  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5189  16D0  0859               	movf	(_BatteryVoltage+2)^(0+512),w
  5190  16D1  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5191  16D2  319C  2410  3196   	fcall	___ftge
  5192  16D5  1803               	btfsc	3,0
  5193  16D6  2EDB               	goto	l6958
  5194  16D7                     l179:	
  5195                           
  5196                           ;main.c: 150: {
  5197                           ;main.c: 151: Alarm = 1;
  5198  16D7  0024               	movlb	4	; select bank4
  5199  16D8  01DE               	clrf	_Alarm^(0+512)
  5200  16D9  0ADE               	incf	_Alarm^(0+512),f
  5201                           
  5202                           ;main.c: 152: }
  5203  16DA  2EDF               	goto	l6962
  5204  16DB                     l6958:	
  5205                           
  5206                           ;main.c: 153: else
  5207                           ;main.c: 154: {
  5208                           ;main.c: 155: Alarm = 0;
  5209  16DB  0024               	movlb	4	; select bank4
  5210  16DC  01DE               	clrf	_Alarm^(0+512)
  5211                           
  5212                           ;main.c: 156: LATC |= 0b00000010;
  5213  16DD  0022               	movlb	2	; select bank2
  5214  16DE  148E               	bsf	14,1	;volatile
  5215  16DF                     l6962:	
  5216                           
  5217                           ;main.c: 157: }
  5218                           ;main.c: 158: if(Alarm)
  5219  16DF  0024               	movlb	4	; select bank4
  5220  16E0  085E               	movf	_Alarm^(0+512),w
  5221  16E1  1903               	btfsc	3,2
  5222  16E2  2EF4               	goto	l6970
  5223                           
  5224                           ;main.c: 159: {
  5225                           ;main.c: 160: pwrLEDtoggle++;
  5226  16E3  3001               	movlw	1
  5227  16E4  07DC               	addwf	_pwrLEDtoggle^(0+512),f
  5228  16E5  3000               	movlw	0
  5229  16E6  3DDD               	addwfc	(_pwrLEDtoggle+1)^(0+512),f
  5230                           
  5231                           ;main.c: 161: if(pwrLEDtoggle == 100)
  5232  16E7  3064               	movlw	100
  5233  16E8  065C               	xorwf	_pwrLEDtoggle^(0+512),w
  5234  16E9  045D               	iorwf	(_pwrLEDtoggle+1)^(0+512),w
  5235  16EA  1D03               	skipz
  5236  16EB  2EF4               	goto	l6970
  5237                           
  5238                           ;main.c: 162: {
  5239                           ;main.c: 163: pwrLEDtoggle = 0;
  5240  16EC  01DC               	clrf	_pwrLEDtoggle^(0+512)
  5241  16ED  01DD               	clrf	(_pwrLEDtoggle+1)^(0+512)
  5242                           
  5243                           ;main.c: 164: LATC ^= 0b00000010;
  5244  16EE  3002               	movlw	2
  5245  16EF  00D5               	movwf	??_main^(0+512)
  5246  16F0  0855               	movf	??_main^(0+512),w
  5247  16F1  0022               	movlb	2	; select bank2
  5248  16F2  068E               	xorwf	14,f	;volatile
  5249  16F3  0024               	movlb	4	; select bank4
  5250  16F4                     l6970:	
  5251                           
  5252                           ;main.c: 165: }
  5253                           ;main.c: 166: }
  5254                           ;main.c: 168: if(SinLEDtimer < 100)
  5255  16F4  3000               	movlw	0
  5256  16F5  0024               	movlb	4	; select bank4
  5257  16F6  025B               	subwf	(_SinLEDtimer+1)^(0+512),w
  5258  16F7  3064               	movlw	100
  5259  16F8  1903               	skipnz
  5260  16F9  025A               	subwf	_SinLEDtimer^(0+512),w
  5261  16FA  1803               	skipnc
  5262  16FB  2F01               	goto	l6974
  5263                           
  5264                           ;main.c: 169: {
  5265                           ;main.c: 170: SinLEDtimer++;
  5266  16FC  3001               	movlw	1
  5267  16FD  07DA               	addwf	_SinLEDtimer^(0+512),f
  5268  16FE  3000               	movlw	0
  5269  16FF  3DDB               	addwfc	(_SinLEDtimer+1)^(0+512),f
  5270                           
  5271                           ;main.c: 171: }
  5272  1700  2E9E               	goto	l6950
  5273  1701                     l6974:	
  5274                           
  5275                           ;main.c: 172: else
  5276                           ;main.c: 173: {
  5277                           ;main.c: 174: LATC &= ~0b00001000;
  5278  1701  30F7               	movlw	247
  5279  1702  00D5               	movwf	??_main^(0+512)
  5280  1703  0855               	movf	??_main^(0+512),w
  5281  1704  0022               	movlb	2	; select bank2
  5282  1705  058E               	andwf	14,f	;volatile
  5283  1706  2E9E               	goto	l6950
  5284  1707                     __end_of_main:	
  5285                           
  5286                           	psect	text1
  5287  1C10                     __ptext1:	
  5288 ;; *************** function ___ftge *****************
  5289 ;; Defined at:
  5290 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  5291 ;; Parameters:    Size  Location     Type
  5292 ;;  ff1             3    0[BANK4 ] float 
  5293 ;;  ff2             3    3[BANK4 ] float 
  5294 ;; Auto vars:     Size  Location     Type
  5295 ;;		None
  5296 ;; Return value:  Size  Location     Type
  5297 ;;		None               void
  5298 ;; Registers used:
  5299 ;;		wreg, status,2, status,0
  5300 ;; Tracked objects:
  5301 ;;		On entry : 0/0
  5302 ;;		On exit  : 0/0
  5303 ;;		Unchanged: 0/0
  5304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5305 ;;      Params:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5307 ;;      Temps:          0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  5308 ;;      Totals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0
  5309 ;;Total ram usage:        9 bytes
  5310 ;; Hardware stack levels used:    1
  5311 ;; Hardware stack levels required when called:    7
  5312 ;; This function calls:
  5313 ;;		Nothing
  5314 ;; This function is called by:
  5315 ;;		_main
  5316 ;; This function uses a non-reentrant model
  5317 ;;
  5318                           
  5319                           
  5320                           ;psect for function ___ftge
  5321  1C10                     ___ftge:	
  5322                           
  5323                           ;incstack = 0
  5324                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  5325  1C10  0024               	movlb	4	; select bank4
  5326  1C11  1FA2               	btfss	(___ftge@ff1+2)^(0+512),7
  5327  1C12  2C27               	goto	l6898
  5328  1C13  0920               	comf	___ftge@ff1^(0+512),w
  5329  1C14  00A6               	movwf	??___ftge^(0+512)
  5330  1C15  0921               	comf	(___ftge@ff1+1)^(0+512),w
  5331  1C16  00A7               	movwf	(??___ftge^(0+512)+1)
  5332  1C17  0922               	comf	(___ftge@ff1+2)^(0+512),w
  5333  1C18  00A8               	movwf	(??___ftge^(0+512)+2)
  5334  1C19  0AA6               	incf	??___ftge^(0+512),f
  5335  1C1A  1903               	skipnz
  5336  1C1B  0AA7               	incf	(??___ftge^(0+512)+1),f
  5337  1C1C  1903               	skipnz
  5338  1C1D  0AA8               	incf	(??___ftge^(0+512)+2),f
  5339  1C1E  3000               	movlw	0
  5340  1C1F  0726               	addwf	??___ftge^(0+512),w
  5341  1C20  00A0               	movwf	___ftge@ff1^(0+512)
  5342  1C21  3000               	movlw	0
  5343  1C22  3D27               	addwfc	(??___ftge+1)^(0+512),w
  5344  1C23  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5345  1C24  3080               	movlw	128
  5346  1C25  3D28               	addwfc	(??___ftge+2)^(0+512),w
  5347  1C26  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5348  1C27                     l6898:	
  5349  1C27  1FA5               	btfss	(___ftge@ff2+2)^(0+512),7
  5350  1C28  2C3D               	goto	l6902
  5351  1C29  0923               	comf	___ftge@ff2^(0+512),w
  5352  1C2A  00A6               	movwf	??___ftge^(0+512)
  5353  1C2B  0924               	comf	(___ftge@ff2+1)^(0+512),w
  5354  1C2C  00A7               	movwf	(??___ftge^(0+512)+1)
  5355  1C2D  0925               	comf	(___ftge@ff2+2)^(0+512),w
  5356  1C2E  00A8               	movwf	(??___ftge^(0+512)+2)
  5357  1C2F  0AA6               	incf	??___ftge^(0+512),f
  5358  1C30  1903               	skipnz
  5359  1C31  0AA7               	incf	(??___ftge^(0+512)+1),f
  5360  1C32  1903               	skipnz
  5361  1C33  0AA8               	incf	(??___ftge^(0+512)+2),f
  5362  1C34  3000               	movlw	0
  5363  1C35  0726               	addwf	??___ftge^(0+512),w
  5364  1C36  00A3               	movwf	___ftge@ff2^(0+512)
  5365  1C37  3000               	movlw	0
  5366  1C38  3D27               	addwfc	(??___ftge+1)^(0+512),w
  5367  1C39  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5368  1C3A  3080               	movlw	128
  5369  1C3B  3D28               	addwfc	(??___ftge+2)^(0+512),w
  5370  1C3C  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5371  1C3D                     l6902:	
  5372  1C3D  3080               	movlw	128
  5373  1C3E  06A2               	xorwf	(___ftge@ff1+2)^(0+512),f
  5374  1C3F  3080               	movlw	128
  5375  1C40  06A5               	xorwf	(___ftge@ff2+2)^(0+512),f
  5376  1C41  0825               	movf	(___ftge@ff2+2)^(0+512),w
  5377  1C42  0222               	subwf	(___ftge@ff1+2)^(0+512),w
  5378  1C43  1D03               	skipz
  5379  1C44  0008               	return
  5380  1C45  0824               	movf	(___ftge@ff2+1)^(0+512),w
  5381  1C46  0221               	subwf	(___ftge@ff1+1)^(0+512),w
  5382  1C47  1D03               	skipz
  5383  1C48  0008               	return
  5384  1C49  0823               	movf	___ftge@ff2^(0+512),w
  5385  1C4A  0220               	subwf	___ftge@ff1^(0+512),w
  5386  1C4B  0008               	return
  5387  1C4C                     __end_of___ftge:	
  5388                           
  5389                           	psect	text2
  5390  101A                     __ptext2:	
  5391 ;; *************** function _ReadVoltage *****************
  5392 ;; Defined at:
  5393 ;;		line 62 in file "ADC.c"
  5394 ;; Parameters:    Size  Location     Type
  5395 ;;		None
  5396 ;; Auto vars:     Size  Location     Type
  5397 ;;  voltage         3   48[BANK4 ] float 
  5398 ;;  temp            2   51[BANK4 ] unsigned int 
  5399 ;; Return value:  Size  Location     Type
  5400 ;;                  3   44[BANK4 ] unsigned int 
  5401 ;; Registers used:
  5402 ;;		wreg, status,2, status,0, pclath, cstack
  5403 ;; Tracked objects:
  5404 ;;		On entry : 0/0
  5405 ;;		On exit  : 0/0
  5406 ;;		Unchanged: 0/0
  5407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5408 ;;      Params:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  5409 ;;      Locals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  5410 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  5411 ;;      Totals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0
  5412 ;;Total ram usage:        9 bytes
  5413 ;; Hardware stack levels used:    1
  5414 ;; Hardware stack levels required when called:    9
  5415 ;; This function calls:
  5416 ;;		_DisableInternalADC
  5417 ;;		_InternalADC_Read
  5418 ;;		___ftdiv
  5419 ;;		___ftmul
  5420 ;;		___lwtoft
  5421 ;; This function is called by:
  5422 ;;		_main
  5423 ;; This function uses a non-reentrant model
  5424 ;;
  5425                           
  5426                           
  5427                           ;psect for function _ReadVoltage
  5428  101A                     _ReadVoltage:	
  5429                           
  5430                           ;ADC.c: 64: unsigned int temp;
  5431                           ;ADC.c: 65: double voltage;
  5432                           ;ADC.c: 70: temp = InternalADC_Read(2);
  5433                           
  5434                           ;incstack = 0
  5435                           ; Regs used in _ReadVoltage: [wreg+status,2+status,0+pclath+cstack]
  5436  101A  3002               	movlw	2
  5437  101B  319D  2511  3190   	fcall	_InternalADC_Read
  5438  101E  0024               	movlb	4	; select bank4
  5439  101F  082B               	movf	(?_InternalADC_Read+1)^(0+512),w
  5440  1020  01D4               	clrf	(ReadVoltage@temp+1)^(0+512)
  5441  1021  07D4               	addwf	(ReadVoltage@temp+1)^(0+512),f
  5442  1022  082A               	movf	?_InternalADC_Read^(0+512),w
  5443  1023  01D3               	clrf	ReadVoltage@temp^(0+512)
  5444  1024  07D3               	addwf	ReadVoltage@temp^(0+512),f
  5445                           
  5446                           ;ADC.c: 71: DisableInternalADC();
  5447  1025  318A  2241  3190   	fcall	_DisableInternalADC
  5448                           
  5449                           ;ADC.c: 78: if((FVRCON & 0x03) == 0x03)
  5450  1028  3003               	movlw	3
  5451  1029  0022               	movlb	2	; select bank2
  5452  102A  0517               	andwf	23,w	;volatile
  5453  102B  0024               	movlb	4	; select bank4
  5454  102C  00CF               	movwf	??_ReadVoltage^(0+512)
  5455  102D  084F               	movf	??_ReadVoltage^(0+512),w
  5456  102E  3A03               	xorlw	3
  5457  102F  1D03               	skipz
  5458  1030  2837               	goto	l6884
  5459                           
  5460                           ;ADC.c: 79: {
  5461                           ;ADC.c: 81: temp <<= 2;
  5462  1031  3002               	movlw	2
  5463  1032                     u8925:	
  5464  1032  35D3               	lslf	ReadVoltage@temp^(0+512),f
  5465  1033  0DD4               	rlf	(ReadVoltage@temp+1)^(0+512),f
  5466  1034  0B89               	decfsz	9,f
  5467  1035  2832               	goto	u8925
  5468                           
  5469                           ;ADC.c: 82: }
  5470  1036  2845               	goto	l6888
  5471  1037                     l6884:	
  5472                           
  5473                           ;ADC.c: 83: else if((FVRCON & 0x03) == 0x02)
  5474  1037  3003               	movlw	3
  5475  1038  0022               	movlb	2	; select bank2
  5476  1039  0517               	andwf	23,w	;volatile
  5477  103A  0024               	movlb	4	; select bank4
  5478  103B  00CF               	movwf	??_ReadVoltage^(0+512)
  5479  103C  084F               	movf	??_ReadVoltage^(0+512),w
  5480  103D  3A02               	xorlw	2
  5481  103E  1D03               	skipz
  5482  103F  2845               	goto	l6888
  5483                           
  5484                           ;ADC.c: 84: {
  5485                           ;ADC.c: 86: temp <<= 1;
  5486  1040  3001               	movlw	1
  5487  1041                     u8945:	
  5488  1041  35D3               	lslf	ReadVoltage@temp^(0+512),f
  5489  1042  0DD4               	rlf	(ReadVoltage@temp+1)^(0+512),f
  5490  1043  0B89               	decfsz	9,f
  5491  1044  2841               	goto	u8945
  5492  1045                     l6888:	
  5493                           
  5494                           ;ADC.c: 87: }
  5495                           ;ADC.c: 88: voltage = ((double)temp / 1000) * 5.7;
  5496  1045  3066               	movlw	102
  5497  1046  00BC               	movwf	___ftmul@f1^(0+512)
  5498  1047  30B6               	movlw	182
  5499  1048  00BD               	movwf	(___ftmul@f1+1)^(0+512)
  5500  1049  3040               	movlw	64
  5501  104A  00BE               	movwf	(___ftmul@f1+2)^(0+512)
  5502  104B  3000               	movlw	0
  5503  104C  00AC               	movwf	___ftdiv@f2^(0+512)
  5504  104D  307A               	movlw	122
  5505  104E  00AD               	movwf	(___ftdiv@f2+1)^(0+512)
  5506  104F  3044               	movlw	68
  5507  1050  00AE               	movwf	(___ftdiv@f2+2)^(0+512)
  5508  1051  0854               	movf	(ReadVoltage@temp+1)^(0+512),w
  5509  1052  01A9               	clrf	(___lwtoft@c+1)^(0+512)
  5510  1053  07A9               	addwf	(___lwtoft@c+1)^(0+512),f
  5511  1054  0853               	movf	ReadVoltage@temp^(0+512),w
  5512  1055  01A8               	clrf	___lwtoft@c^(0+512)
  5513  1056  07A8               	addwf	___lwtoft@c^(0+512),f
  5514  1057  3190  2005  3190   	fcall	___lwtoft
  5515  105A  0024               	movlb	4	; select bank4
  5516  105B  0828               	movf	?___lwtoft^(0+512),w
  5517  105C  00AF               	movwf	___ftdiv@f1^(0+512)
  5518  105D  0829               	movf	(?___lwtoft+1)^(0+512),w
  5519  105E  00B0               	movwf	(___ftdiv@f1+1)^(0+512)
  5520  105F  082A               	movf	(?___lwtoft+2)^(0+512),w
  5521  1060  00B1               	movwf	(___ftdiv@f1+2)^(0+512)
  5522  1061  3192  220E  3190   	fcall	___ftdiv
  5523  1064  0024               	movlb	4	; select bank4
  5524  1065  082C               	movf	?___ftdiv^(0+512),w
  5525  1066  00BF               	movwf	___ftmul@f2^(0+512)
  5526  1067  082D               	movf	(?___ftdiv+1)^(0+512),w
  5527  1068  00C0               	movwf	(___ftmul@f2+1)^(0+512)
  5528  1069  082E               	movf	(?___ftdiv+2)^(0+512),w
  5529  106A  00C1               	movwf	(___ftmul@f2+2)^(0+512)
  5530  106B  3192  22B7         	fcall	___ftmul
  5531  106D  0024               	movlb	4	; select bank4
  5532  106E  083C               	movf	?___ftmul^(0+512),w
  5533  106F  00D0               	movwf	ReadVoltage@voltage^(0+512)
  5534  1070  083D               	movf	(?___ftmul+1)^(0+512),w
  5535  1071  00D1               	movwf	(ReadVoltage@voltage+1)^(0+512)
  5536  1072  083E               	movf	(?___ftmul+2)^(0+512),w
  5537  1073  00D2               	movwf	(ReadVoltage@voltage+2)^(0+512)
  5538                           
  5539                           ;ADC.c: 89: return voltage;
  5540  1074  0850               	movf	ReadVoltage@voltage^(0+512),w
  5541  1075  00CC               	movwf	?_ReadVoltage^(0+512)
  5542  1076  0851               	movf	(ReadVoltage@voltage+1)^(0+512),w
  5543  1077  00CD               	movwf	(?_ReadVoltage+1)^(0+512)
  5544  1078  0852               	movf	(ReadVoltage@voltage+2)^(0+512),w
  5545  1079  00CE               	movwf	(?_ReadVoltage+2)^(0+512)
  5546  107A  0008               	return
  5547  107B                     __end_of_ReadVoltage:	
  5548                           
  5549                           	psect	text3
  5550  1005                     __ptext3:	
  5551 ;; *************** function ___lwtoft *****************
  5552 ;; Defined at:
  5553 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwtoft.c"
  5554 ;; Parameters:    Size  Location     Type
  5555 ;;  c               2    8[BANK4 ] unsigned int 
  5556 ;; Auto vars:     Size  Location     Type
  5557 ;;		None
  5558 ;; Return value:  Size  Location     Type
  5559 ;;                  3    8[BANK4 ] float 
  5560 ;; Registers used:
  5561 ;;		wreg, status,2, status,0, pclath, cstack
  5562 ;; Tracked objects:
  5563 ;;		On entry : 0/0
  5564 ;;		On exit  : 0/0
  5565 ;;		Unchanged: 0/0
  5566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5567 ;;      Params:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  5568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5569 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  5570 ;;      Totals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  5571 ;;Total ram usage:        4 bytes
  5572 ;; Hardware stack levels used:    1
  5573 ;; Hardware stack levels required when called:    8
  5574 ;; This function calls:
  5575 ;;		___ftpack
  5576 ;; This function is called by:
  5577 ;;		_ReadVoltage
  5578 ;; This function uses a non-reentrant model
  5579 ;;
  5580                           
  5581                           
  5582                           ;psect for function ___lwtoft
  5583  1005                     ___lwtoft:	
  5584                           
  5585                           ;incstack = 0
  5586                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  5587  1005  0024               	movlb	4	; select bank4
  5588  1006  0828               	movf	___lwtoft@c^(0+512),w
  5589  1007  00A0               	movwf	___ftpack@arg^(0+512)
  5590  1008  0829               	movf	(___lwtoft@c+1)^(0+512),w
  5591  1009  00A1               	movwf	(___ftpack@arg+1)^(0+512)
  5592  100A  01A2               	clrf	(___ftpack@arg+2)^(0+512)
  5593  100B  308E               	movlw	142
  5594  100C  00AB               	movwf	??___lwtoft^(0+512)
  5595  100D  082B               	movf	??___lwtoft^(0+512),w
  5596  100E  00A3               	movwf	___ftpack@exp^(0+512)
  5597  100F  01A4               	clrf	___ftpack@sign^(0+512)
  5598  1010  319F  279F         	fcall	___ftpack
  5599  1012  0024               	movlb	4	; select bank4
  5600  1013  0820               	movf	?___ftpack^(0+512),w
  5601  1014  00A8               	movwf	?___lwtoft^(0+512)
  5602  1015  0821               	movf	(?___ftpack+1)^(0+512),w
  5603  1016  00A9               	movwf	(?___lwtoft+1)^(0+512)
  5604  1017  0822               	movf	(?___ftpack+2)^(0+512),w
  5605  1018  00AA               	movwf	(?___lwtoft+2)^(0+512)
  5606  1019  0008               	return
  5607  101A                     __end_of___lwtoft:	
  5608                           
  5609                           	psect	text4
  5610  12B7                     __ptext4:	
  5611 ;; *************** function ___ftmul *****************
  5612 ;; Defined at:
  5613 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  5614 ;; Parameters:    Size  Location     Type
  5615 ;;  f1              3   28[BANK4 ] float 
  5616 ;;  f2              3   31[BANK4 ] float 
  5617 ;; Auto vars:     Size  Location     Type
  5618 ;;  f3_as_produc    3   39[BANK4 ] unsigned um
  5619 ;;  sign            1   43[BANK4 ] unsigned char 
  5620 ;;  cntr            1   42[BANK4 ] unsigned char 
  5621 ;;  exp             1   38[BANK4 ] unsigned char 
  5622 ;; Return value:  Size  Location     Type
  5623 ;;                  3   28[BANK4 ] float 
  5624 ;; Registers used:
  5625 ;;		wreg, status,2, status,0, pclath, cstack
  5626 ;; Tracked objects:
  5627 ;;		On entry : 0/0
  5628 ;;		On exit  : 0/0
  5629 ;;		Unchanged: 0/0
  5630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5631 ;;      Params:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5632 ;;      Locals:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5633 ;;      Temps:          0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  5634 ;;      Totals:         0       0       0       0       0      16       0       0       0       0       0       0       
      +0       0
  5635 ;;Total ram usage:       16 bytes
  5636 ;; Hardware stack levels used:    1
  5637 ;; Hardware stack levels required when called:    8
  5638 ;; This function calls:
  5639 ;;		___ftpack
  5640 ;; This function is called by:
  5641 ;;		_ReadVoltage
  5642 ;; This function uses a non-reentrant model
  5643 ;;
  5644                           
  5645                           
  5646                           ;psect for function ___ftmul
  5647  12B7                     ___ftmul:	
  5648                           
  5649                           ;incstack = 0
  5650                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  5651  12B7  0024               	movlb	4	; select bank4
  5652  12B8  083C               	movf	___ftmul@f1^(0+512),w
  5653  12B9  00C2               	movwf	??___ftmul^(0+512)
  5654  12BA  083D               	movf	(___ftmul@f1+1)^(0+512),w
  5655  12BB  00C3               	movwf	(??___ftmul^(0+512)+1)
  5656  12BC  083E               	movf	(___ftmul@f1+2)^(0+512),w
  5657  12BD  00C4               	movwf	(??___ftmul^(0+512)+2)
  5658  12BE  1003               	clrc
  5659  12BF  0D43               	rlf	(??___ftmul^(0+512)+1),w
  5660  12C0  0D44               	rlf	(??___ftmul^(0+512)+2),w
  5661  12C1  00C5               	movwf	(??___ftmul+3)^(0+512)
  5662  12C2  0845               	movf	(??___ftmul+3)^(0+512),w
  5663  12C3  00C6               	movwf	___ftmul@exp^(0+512)
  5664  12C4  08C6               	movf	___ftmul@exp^(0+512),f
  5665  12C5  1D03               	skipz
  5666  12C6  2ACE               	goto	l6720
  5667  12C7  3000               	movlw	0
  5668  12C8  00BC               	movwf	?___ftmul^(0+512)
  5669  12C9  3000               	movlw	0
  5670  12CA  00BD               	movwf	(?___ftmul+1)^(0+512)
  5671  12CB  3000               	movlw	0
  5672  12CC  00BE               	movwf	(?___ftmul+2)^(0+512)
  5673  12CD  0008               	return
  5674  12CE                     l6720:	
  5675  12CE  083F               	movf	___ftmul@f2^(0+512),w
  5676  12CF  00C2               	movwf	??___ftmul^(0+512)
  5677  12D0  0840               	movf	(___ftmul@f2+1)^(0+512),w
  5678  12D1  00C3               	movwf	(??___ftmul^(0+512)+1)
  5679  12D2  0841               	movf	(___ftmul@f2+2)^(0+512),w
  5680  12D3  00C4               	movwf	(??___ftmul^(0+512)+2)
  5681  12D4  1003               	clrc
  5682  12D5  0D43               	rlf	(??___ftmul^(0+512)+1),w
  5683  12D6  0D44               	rlf	(??___ftmul^(0+512)+2),w
  5684  12D7  00C5               	movwf	(??___ftmul+3)^(0+512)
  5685  12D8  0845               	movf	(??___ftmul+3)^(0+512),w
  5686  12D9  00CB               	movwf	___ftmul@sign^(0+512)
  5687  12DA  08CB               	movf	___ftmul@sign^(0+512),f
  5688  12DB  1D03               	skipz
  5689  12DC  2AE4               	goto	l6726
  5690  12DD  3000               	movlw	0
  5691  12DE  00BC               	movwf	?___ftmul^(0+512)
  5692  12DF  3000               	movlw	0
  5693  12E0  00BD               	movwf	(?___ftmul+1)^(0+512)
  5694  12E1  3000               	movlw	0
  5695  12E2  00BE               	movwf	(?___ftmul+2)^(0+512)
  5696  12E3  0008               	return
  5697  12E4                     l6726:	
  5698  12E4  084B               	movf	___ftmul@sign^(0+512),w
  5699  12E5  3E7B               	addlw	123
  5700  12E6  00C2               	movwf	??___ftmul^(0+512)
  5701  12E7  0842               	movf	??___ftmul^(0+512),w
  5702  12E8  07C6               	addwf	___ftmul@exp^(0+512),f
  5703  12E9  083C               	movf	___ftmul@f1^(0+512),w
  5704  12EA  00C2               	movwf	??___ftmul^(0+512)
  5705  12EB  083D               	movf	(___ftmul@f1+1)^(0+512),w
  5706  12EC  00C3               	movwf	(??___ftmul^(0+512)+1)
  5707  12ED  083E               	movf	(___ftmul@f1+2)^(0+512),w
  5708  12EE  00C4               	movwf	(??___ftmul^(0+512)+2)
  5709  12EF  3010               	movlw	16
  5710  12F0                     u8745:	
  5711  12F0  36C4               	lsrf	(??___ftmul^(0+512)+2),f
  5712  12F1  0CC3               	rrf	(??___ftmul^(0+512)+1),f
  5713  12F2  0CC2               	rrf	??___ftmul^(0+512),f
  5714  12F3  0B89               	decfsz	9,f
  5715  12F4  2AF0               	goto	u8745
  5716  12F5  0842               	movf	??___ftmul^(0+512),w
  5717  12F6  00C5               	movwf	(??___ftmul+3)^(0+512)
  5718  12F7  0845               	movf	(??___ftmul+3)^(0+512),w
  5719  12F8  00CB               	movwf	___ftmul@sign^(0+512)
  5720  12F9  083F               	movf	___ftmul@f2^(0+512),w
  5721  12FA  00C2               	movwf	??___ftmul^(0+512)
  5722  12FB  0840               	movf	(___ftmul@f2+1)^(0+512),w
  5723  12FC  00C3               	movwf	(??___ftmul^(0+512)+1)
  5724  12FD  0841               	movf	(___ftmul@f2+2)^(0+512),w
  5725  12FE  00C4               	movwf	(??___ftmul^(0+512)+2)
  5726  12FF  3010               	movlw	16
  5727  1300                     u8755:	
  5728  1300  36C4               	lsrf	(??___ftmul^(0+512)+2),f
  5729  1301  0CC3               	rrf	(??___ftmul^(0+512)+1),f
  5730  1302  0CC2               	rrf	??___ftmul^(0+512),f
  5731  1303  0B89               	decfsz	9,f
  5732  1304  2B00               	goto	u8755
  5733  1305  0842               	movf	??___ftmul^(0+512),w
  5734  1306  00C5               	movwf	(??___ftmul+3)^(0+512)
  5735  1307  0845               	movf	(??___ftmul+3)^(0+512),w
  5736  1308  06CB               	xorwf	___ftmul@sign^(0+512),f
  5737  1309  3080               	movlw	128
  5738  130A  00C2               	movwf	??___ftmul^(0+512)
  5739  130B  0842               	movf	??___ftmul^(0+512),w
  5740  130C  05CB               	andwf	___ftmul@sign^(0+512),f
  5741  130D  17BD               	bsf	(___ftmul@f1^(0+512)+1),7
  5742  130E  17C0               	bsf	(___ftmul@f2^(0+512)+1),7
  5743  130F  30FF               	movlw	255
  5744  1310  05BF               	andwf	___ftmul@f2^(0+512),f
  5745  1311  30FF               	movlw	255
  5746  1312  05C0               	andwf	(___ftmul@f2+1)^(0+512),f
  5747  1313  3000               	movlw	0
  5748  1314  05C1               	andwf	(___ftmul@f2+2)^(0+512),f
  5749  1315  3000               	movlw	0
  5750  1316  00C7               	movwf	___ftmul@f3_as_product^(0+512)
  5751  1317  3000               	movlw	0
  5752  1318  00C8               	movwf	(___ftmul@f3_as_product+1)^(0+512)
  5753  1319  3000               	movlw	0
  5754  131A  00C9               	movwf	(___ftmul@f3_as_product+2)^(0+512)
  5755  131B  3007               	movlw	7
  5756  131C  00C2               	movwf	??___ftmul^(0+512)
  5757  131D  0842               	movf	??___ftmul^(0+512),w
  5758  131E  00CA               	movwf	___ftmul@cntr^(0+512)
  5759  131F                     l6738:	
  5760  131F  1C3C               	btfss	___ftmul@f1^(0+512),0
  5761  1320  2B27               	goto	l6742
  5762  1321  083F               	movf	___ftmul@f2^(0+512),w
  5763  1322  07C7               	addwf	___ftmul@f3_as_product^(0+512),f
  5764  1323  0840               	movf	(___ftmul@f2+1)^(0+512),w
  5765  1324  3DC8               	addwfc	(___ftmul@f3_as_product+1)^(0+512),f
  5766  1325  0841               	movf	(___ftmul@f2+2)^(0+512),w
  5767  1326  3DC9               	addwfc	(___ftmul@f3_as_product+2)^(0+512),f
  5768  1327                     l6742:	
  5769  1327  3001               	movlw	1
  5770  1328                     u8775:	
  5771  1328  36BE               	lsrf	(___ftmul@f1+2)^(0+512),f
  5772  1329  0CBD               	rrf	(___ftmul@f1+1)^(0+512),f
  5773  132A  0CBC               	rrf	___ftmul@f1^(0+512),f
  5774  132B  0B89               	decfsz	9,f
  5775  132C  2B28               	goto	u8775
  5776  132D  3001               	movlw	1
  5777  132E                     u8785:	
  5778  132E  35BF               	lslf	___ftmul@f2^(0+512),f
  5779  132F  0DC0               	rlf	(___ftmul@f2+1)^(0+512),f
  5780  1330  0DC1               	rlf	(___ftmul@f2+2)^(0+512),f
  5781  1331  0B89               	decfsz	9,f
  5782  1332  2B2E               	goto	u8785
  5783  1333  3001               	movlw	1
  5784  1334  02CA               	subwf	___ftmul@cntr^(0+512),f
  5785  1335  1D03               	btfss	3,2
  5786  1336  2B1F               	goto	l6738
  5787  1337  3009               	movlw	9
  5788  1338  00C2               	movwf	??___ftmul^(0+512)
  5789  1339  0842               	movf	??___ftmul^(0+512),w
  5790  133A  00CA               	movwf	___ftmul@cntr^(0+512)
  5791  133B                     l6750:	
  5792  133B  1C3C               	btfss	___ftmul@f1^(0+512),0
  5793  133C  2B43               	goto	l6754
  5794  133D  083F               	movf	___ftmul@f2^(0+512),w
  5795  133E  07C7               	addwf	___ftmul@f3_as_product^(0+512),f
  5796  133F  0840               	movf	(___ftmul@f2+1)^(0+512),w
  5797  1340  3DC8               	addwfc	(___ftmul@f3_as_product+1)^(0+512),f
  5798  1341  0841               	movf	(___ftmul@f2+2)^(0+512),w
  5799  1342  3DC9               	addwfc	(___ftmul@f3_as_product+2)^(0+512),f
  5800  1343                     l6754:	
  5801  1343  3001               	movlw	1
  5802  1344                     u8815:	
  5803  1344  36BE               	lsrf	(___ftmul@f1+2)^(0+512),f
  5804  1345  0CBD               	rrf	(___ftmul@f1+1)^(0+512),f
  5805  1346  0CBC               	rrf	___ftmul@f1^(0+512),f
  5806  1347  0B89               	decfsz	9,f
  5807  1348  2B44               	goto	u8815
  5808  1349  3001               	movlw	1
  5809  134A                     u8825:	
  5810  134A  36C9               	lsrf	(___ftmul@f3_as_product+2)^(0+512),f
  5811  134B  0CC8               	rrf	(___ftmul@f3_as_product+1)^(0+512),f
  5812  134C  0CC7               	rrf	___ftmul@f3_as_product^(0+512),f
  5813  134D  0B89               	decfsz	9,f
  5814  134E  2B4A               	goto	u8825
  5815  134F  3001               	movlw	1
  5816  1350  02CA               	subwf	___ftmul@cntr^(0+512),f
  5817  1351  1D03               	btfss	3,2
  5818  1352  2B3B               	goto	l6750
  5819  1353  0847               	movf	___ftmul@f3_as_product^(0+512),w
  5820  1354  00A0               	movwf	___ftpack@arg^(0+512)
  5821  1355  0848               	movf	(___ftmul@f3_as_product+1)^(0+512),w
  5822  1356  00A1               	movwf	(___ftpack@arg+1)^(0+512)
  5823  1357  0849               	movf	(___ftmul@f3_as_product+2)^(0+512),w
  5824  1358  00A2               	movwf	(___ftpack@arg+2)^(0+512)
  5825  1359  0846               	movf	___ftmul@exp^(0+512),w
  5826  135A  00C2               	movwf	??___ftmul^(0+512)
  5827  135B  0842               	movf	??___ftmul^(0+512),w
  5828  135C  00A3               	movwf	___ftpack@exp^(0+512)
  5829  135D  084B               	movf	___ftmul@sign^(0+512),w
  5830  135E  00C3               	movwf	(??___ftmul+1)^(0+512)
  5831  135F  0843               	movf	(??___ftmul+1)^(0+512),w
  5832  1360  00A4               	movwf	___ftpack@sign^(0+512)
  5833  1361  319F  279F         	fcall	___ftpack
  5834  1363  0024               	movlb	4	; select bank4
  5835  1364  0820               	movf	?___ftpack^(0+512),w
  5836  1365  00BC               	movwf	?___ftmul^(0+512)
  5837  1366  0821               	movf	(?___ftpack+1)^(0+512),w
  5838  1367  00BD               	movwf	(?___ftmul+1)^(0+512)
  5839  1368  0822               	movf	(?___ftpack+2)^(0+512),w
  5840  1369  00BE               	movwf	(?___ftmul+2)^(0+512)
  5841  136A  0008               	return
  5842  136B                     __end_of___ftmul:	
  5843                           
  5844                           	psect	text5
  5845  120E                     __ptext5:	
  5846 ;; *************** function ___ftdiv *****************
  5847 ;; Defined at:
  5848 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic\ftdiv.c"
  5849 ;; Parameters:    Size  Location     Type
  5850 ;;  f2              3   12[BANK4 ] float 
  5851 ;;  f1              3   15[BANK4 ] float 
  5852 ;; Auto vars:     Size  Location     Type
  5853 ;;  f3              3   23[BANK4 ] float 
  5854 ;;  sign            1   27[BANK4 ] unsigned char 
  5855 ;;  exp             1   26[BANK4 ] unsigned char 
  5856 ;;  cntr            1   22[BANK4 ] unsigned char 
  5857 ;; Return value:  Size  Location     Type
  5858 ;;                  3   12[BANK4 ] float 
  5859 ;; Registers used:
  5860 ;;		wreg, status,2, status,0, pclath, cstack
  5861 ;; Tracked objects:
  5862 ;;		On entry : 0/0
  5863 ;;		On exit  : 0/0
  5864 ;;		Unchanged: 0/0
  5865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5866 ;;      Params:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5867 ;;      Locals:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5868 ;;      Temps:          0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  5869 ;;      Totals:         0       0       0       0       0      16       0       0       0       0       0       0       
      +0       0
  5870 ;;Total ram usage:       16 bytes
  5871 ;; Hardware stack levels used:    1
  5872 ;; Hardware stack levels required when called:    8
  5873 ;; This function calls:
  5874 ;;		___ftpack
  5875 ;; This function is called by:
  5876 ;;		_ReadVoltage
  5877 ;; This function uses a non-reentrant model
  5878 ;;
  5879                           
  5880                           
  5881                           ;psect for function ___ftdiv
  5882  120E                     ___ftdiv:	
  5883                           
  5884                           ;incstack = 0
  5885                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  5886  120E  0024               	movlb	4	; select bank4
  5887  120F  082F               	movf	___ftdiv@f1^(0+512),w
  5888  1210  00B2               	movwf	??___ftdiv^(0+512)
  5889  1211  0830               	movf	(___ftdiv@f1+1)^(0+512),w
  5890  1212  00B3               	movwf	(??___ftdiv^(0+512)+1)
  5891  1213  0831               	movf	(___ftdiv@f1+2)^(0+512),w
  5892  1214  00B4               	movwf	(??___ftdiv^(0+512)+2)
  5893  1215  1003               	clrc
  5894  1216  0D33               	rlf	(??___ftdiv^(0+512)+1),w
  5895  1217  0D34               	rlf	(??___ftdiv^(0+512)+2),w
  5896  1218  00B5               	movwf	(??___ftdiv+3)^(0+512)
  5897  1219  0835               	movf	(??___ftdiv+3)^(0+512),w
  5898  121A  00BA               	movwf	___ftdiv@exp^(0+512)
  5899  121B  08BA               	movf	___ftdiv@exp^(0+512),f
  5900  121C  1D03               	skipz
  5901  121D  2A25               	goto	l6678
  5902  121E  3000               	movlw	0
  5903  121F  00AC               	movwf	?___ftdiv^(0+512)
  5904  1220  3000               	movlw	0
  5905  1221  00AD               	movwf	(?___ftdiv+1)^(0+512)
  5906  1222  3000               	movlw	0
  5907  1223  00AE               	movwf	(?___ftdiv+2)^(0+512)
  5908  1224  0008               	return
  5909  1225                     l6678:	
  5910  1225  082C               	movf	___ftdiv@f2^(0+512),w
  5911  1226  00B2               	movwf	??___ftdiv^(0+512)
  5912  1227  082D               	movf	(___ftdiv@f2+1)^(0+512),w
  5913  1228  00B3               	movwf	(??___ftdiv^(0+512)+1)
  5914  1229  082E               	movf	(___ftdiv@f2+2)^(0+512),w
  5915  122A  00B4               	movwf	(??___ftdiv^(0+512)+2)
  5916  122B  1003               	clrc
  5917  122C  0D33               	rlf	(??___ftdiv^(0+512)+1),w
  5918  122D  0D34               	rlf	(??___ftdiv^(0+512)+2),w
  5919  122E  00B5               	movwf	(??___ftdiv+3)^(0+512)
  5920  122F  0835               	movf	(??___ftdiv+3)^(0+512),w
  5921  1230  00BB               	movwf	___ftdiv@sign^(0+512)
  5922  1231  08BB               	movf	___ftdiv@sign^(0+512),f
  5923  1232  1D03               	skipz
  5924  1233  2A3B               	goto	l6684
  5925  1234  3000               	movlw	0
  5926  1235  00AC               	movwf	?___ftdiv^(0+512)
  5927  1236  3000               	movlw	0
  5928  1237  00AD               	movwf	(?___ftdiv+1)^(0+512)
  5929  1238  3000               	movlw	0
  5930  1239  00AE               	movwf	(?___ftdiv+2)^(0+512)
  5931  123A  0008               	return
  5932  123B                     l6684:	
  5933  123B  3000               	movlw	0
  5934  123C  00B7               	movwf	___ftdiv@f3^(0+512)
  5935  123D  3000               	movlw	0
  5936  123E  00B8               	movwf	(___ftdiv@f3+1)^(0+512)
  5937  123F  3000               	movlw	0
  5938  1240  00B9               	movwf	(___ftdiv@f3+2)^(0+512)
  5939  1241  3089               	movlw	137
  5940  1242  073B               	addwf	___ftdiv@sign^(0+512),w
  5941  1243  00B2               	movwf	??___ftdiv^(0+512)
  5942  1244  0832               	movf	??___ftdiv^(0+512),w
  5943  1245  02BA               	subwf	___ftdiv@exp^(0+512),f
  5944  1246  082F               	movf	___ftdiv@f1^(0+512),w
  5945  1247  00B2               	movwf	??___ftdiv^(0+512)
  5946  1248  0830               	movf	(___ftdiv@f1+1)^(0+512),w
  5947  1249  00B3               	movwf	(??___ftdiv^(0+512)+1)
  5948  124A  0831               	movf	(___ftdiv@f1+2)^(0+512),w
  5949  124B  00B4               	movwf	(??___ftdiv^(0+512)+2)
  5950  124C  3010               	movlw	16
  5951  124D                     u8665:	
  5952  124D  36B4               	lsrf	(??___ftdiv^(0+512)+2),f
  5953  124E  0CB3               	rrf	(??___ftdiv^(0+512)+1),f
  5954  124F  0CB2               	rrf	??___ftdiv^(0+512),f
  5955  1250  0B89               	decfsz	9,f
  5956  1251  2A4D               	goto	u8665
  5957  1252  0832               	movf	??___ftdiv^(0+512),w
  5958  1253  00B5               	movwf	(??___ftdiv+3)^(0+512)
  5959  1254  0835               	movf	(??___ftdiv+3)^(0+512),w
  5960  1255  00BB               	movwf	___ftdiv@sign^(0+512)
  5961  1256  082C               	movf	___ftdiv@f2^(0+512),w
  5962  1257  00B2               	movwf	??___ftdiv^(0+512)
  5963  1258  082D               	movf	(___ftdiv@f2+1)^(0+512),w
  5964  1259  00B3               	movwf	(??___ftdiv^(0+512)+1)
  5965  125A  082E               	movf	(___ftdiv@f2+2)^(0+512),w
  5966  125B  00B4               	movwf	(??___ftdiv^(0+512)+2)
  5967  125C  3010               	movlw	16
  5968  125D                     u8675:	
  5969  125D  36B4               	lsrf	(??___ftdiv^(0+512)+2),f
  5970  125E  0CB3               	rrf	(??___ftdiv^(0+512)+1),f
  5971  125F  0CB2               	rrf	??___ftdiv^(0+512),f
  5972  1260  0B89               	decfsz	9,f
  5973  1261  2A5D               	goto	u8675
  5974  1262  0832               	movf	??___ftdiv^(0+512),w
  5975  1263  00B5               	movwf	(??___ftdiv+3)^(0+512)
  5976  1264  0835               	movf	(??___ftdiv+3)^(0+512),w
  5977  1265  06BB               	xorwf	___ftdiv@sign^(0+512),f
  5978  1266  3080               	movlw	128
  5979  1267  00B2               	movwf	??___ftdiv^(0+512)
  5980  1268  0832               	movf	??___ftdiv^(0+512),w
  5981  1269  05BB               	andwf	___ftdiv@sign^(0+512),f
  5982  126A  17B0               	bsf	(___ftdiv@f1^(0+512)+1),7
  5983  126B  30FF               	movlw	255
  5984  126C  05AF               	andwf	___ftdiv@f1^(0+512),f
  5985  126D  30FF               	movlw	255
  5986  126E  05B0               	andwf	(___ftdiv@f1+1)^(0+512),f
  5987  126F  3000               	movlw	0
  5988  1270  05B1               	andwf	(___ftdiv@f1+2)^(0+512),f
  5989  1271  17AD               	bsf	(___ftdiv@f2^(0+512)+1),7
  5990  1272  30FF               	movlw	255
  5991  1273  05AC               	andwf	___ftdiv@f2^(0+512),f
  5992  1274  30FF               	movlw	255
  5993  1275  05AD               	andwf	(___ftdiv@f2+1)^(0+512),f
  5994  1276  3000               	movlw	0
  5995  1277  05AE               	andwf	(___ftdiv@f2+2)^(0+512),f
  5996  1278  3018               	movlw	24
  5997  1279  00B2               	movwf	??___ftdiv^(0+512)
  5998  127A  0832               	movf	??___ftdiv^(0+512),w
  5999  127B  00B6               	movwf	___ftdiv@cntr^(0+512)
  6000  127C                     l6698:	
  6001  127C  3001               	movlw	1
  6002  127D                     u8685:	
  6003  127D  35B7               	lslf	___ftdiv@f3^(0+512),f
  6004  127E  0DB8               	rlf	(___ftdiv@f3+1)^(0+512),f
  6005  127F  0DB9               	rlf	(___ftdiv@f3+2)^(0+512),f
  6006  1280  0B89               	decfsz	9,f
  6007  1281  2A7D               	goto	u8685
  6008  1282  082E               	movf	(___ftdiv@f2+2)^(0+512),w
  6009  1283  0231               	subwf	(___ftdiv@f1+2)^(0+512),w
  6010  1284  1D03               	skipz
  6011  1285  2A8C               	goto	u8695
  6012  1286  082D               	movf	(___ftdiv@f2+1)^(0+512),w
  6013  1287  0230               	subwf	(___ftdiv@f1+1)^(0+512),w
  6014  1288  1D03               	skipz
  6015  1289  2A8C               	goto	u8695
  6016  128A  082C               	movf	___ftdiv@f2^(0+512),w
  6017  128B  022F               	subwf	___ftdiv@f1^(0+512),w
  6018  128C                     u8695:	
  6019  128C  1C03               	skipc
  6020  128D  2A95               	goto	l6706
  6021  128E  082C               	movf	___ftdiv@f2^(0+512),w
  6022  128F  02AF               	subwf	___ftdiv@f1^(0+512),f
  6023  1290  082D               	movf	(___ftdiv@f2+1)^(0+512),w
  6024  1291  3BB0               	subwfb	(___ftdiv@f1+1)^(0+512),f
  6025  1292  082E               	movf	(___ftdiv@f2+2)^(0+512),w
  6026  1293  3BB1               	subwfb	(___ftdiv@f1+2)^(0+512),f
  6027  1294  1437               	bsf	___ftdiv@f3^(0+512),0
  6028  1295                     l6706:	
  6029  1295  3001               	movlw	1
  6030  1296                     u8705:	
  6031  1296  35AF               	lslf	___ftdiv@f1^(0+512),f
  6032  1297  0DB0               	rlf	(___ftdiv@f1+1)^(0+512),f
  6033  1298  0DB1               	rlf	(___ftdiv@f1+2)^(0+512),f
  6034  1299  0B89               	decfsz	9,f
  6035  129A  2A96               	goto	u8705
  6036  129B  3001               	movlw	1
  6037  129C  02B6               	subwf	___ftdiv@cntr^(0+512),f
  6038  129D  1D03               	btfss	3,2
  6039  129E  2A7C               	goto	l6698
  6040  129F  0837               	movf	___ftdiv@f3^(0+512),w
  6041  12A0  00A0               	movwf	___ftpack@arg^(0+512)
  6042  12A1  0838               	movf	(___ftdiv@f3+1)^(0+512),w
  6043  12A2  00A1               	movwf	(___ftpack@arg+1)^(0+512)
  6044  12A3  0839               	movf	(___ftdiv@f3+2)^(0+512),w
  6045  12A4  00A2               	movwf	(___ftpack@arg+2)^(0+512)
  6046  12A5  083A               	movf	___ftdiv@exp^(0+512),w
  6047  12A6  00B2               	movwf	??___ftdiv^(0+512)
  6048  12A7  0832               	movf	??___ftdiv^(0+512),w
  6049  12A8  00A3               	movwf	___ftpack@exp^(0+512)
  6050  12A9  083B               	movf	___ftdiv@sign^(0+512),w
  6051  12AA  00B3               	movwf	(??___ftdiv+1)^(0+512)
  6052  12AB  0833               	movf	(??___ftdiv+1)^(0+512),w
  6053  12AC  00A4               	movwf	___ftpack@sign^(0+512)
  6054  12AD  319F  279F         	fcall	___ftpack
  6055  12AF  0024               	movlb	4	; select bank4
  6056  12B0  0820               	movf	?___ftpack^(0+512),w
  6057  12B1  00AC               	movwf	?___ftdiv^(0+512)
  6058  12B2  0821               	movf	(?___ftpack+1)^(0+512),w
  6059  12B3  00AD               	movwf	(?___ftdiv+1)^(0+512)
  6060  12B4  0822               	movf	(?___ftpack+2)^(0+512),w
  6061  12B5  00AE               	movwf	(?___ftdiv+2)^(0+512)
  6062  12B6  0008               	return
  6063  12B7                     __end_of___ftdiv:	
  6064                           
  6065                           	psect	text6
  6066  1F9F                     __ptext6:	
  6067 ;; *************** function ___ftpack *****************
  6068 ;; Defined at:
  6069 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  6070 ;; Parameters:    Size  Location     Type
  6071 ;;  arg             3    0[BANK4 ] unsigned um
  6072 ;;  exp             1    3[BANK4 ] unsigned char 
  6073 ;;  sign            1    4[BANK4 ] unsigned char 
  6074 ;; Auto vars:     Size  Location     Type
  6075 ;;		None
  6076 ;; Return value:  Size  Location     Type
  6077 ;;                  3    0[BANK4 ] float 
  6078 ;; Registers used:
  6079 ;;		wreg, status,2, status,0
  6080 ;; Tracked objects:
  6081 ;;		On entry : 0/0
  6082 ;;		On exit  : 0/0
  6083 ;;		Unchanged: 0/0
  6084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6085 ;;      Params:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  6086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6087 ;;      Temps:          0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  6088 ;;      Totals:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  6089 ;;Total ram usage:        8 bytes
  6090 ;; Hardware stack levels used:    1
  6091 ;; Hardware stack levels required when called:    7
  6092 ;; This function calls:
  6093 ;;		Nothing
  6094 ;; This function is called by:
  6095 ;;		___ftdiv
  6096 ;;		___ftmul
  6097 ;;		___lwtoft
  6098 ;; This function uses a non-reentrant model
  6099 ;;
  6100                           
  6101                           
  6102                           ;psect for function ___ftpack
  6103  1F9F                     ___ftpack:	
  6104                           
  6105                           ;incstack = 0
  6106                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6107  1F9F  0024               	movlb	4	; select bank4
  6108  1FA0  0823               	movf	___ftpack@exp^(0+512),w
  6109  1FA1  1903               	btfsc	3,2
  6110  1FA2  2FA8               	goto	l6470
  6111  1FA3  0822               	movf	(___ftpack@arg+2)^(0+512),w
  6112  1FA4  0421               	iorwf	(___ftpack@arg+1)^(0+512),w
  6113  1FA5  0420               	iorwf	___ftpack@arg^(0+512),w
  6114  1FA6  1D03               	skipz
  6115  1FA7  2FB9               	goto	l6476
  6116  1FA8                     l6470:	
  6117  1FA8  3000               	movlw	0
  6118  1FA9  00A0               	movwf	?___ftpack^(0+512)
  6119  1FAA  3000               	movlw	0
  6120  1FAB  00A1               	movwf	(?___ftpack+1)^(0+512)
  6121  1FAC  3000               	movlw	0
  6122  1FAD  00A2               	movwf	(?___ftpack+2)^(0+512)
  6123  1FAE  0008               	return
  6124  1FAF                     l6474:	
  6125  1FAF  3001               	movlw	1
  6126  1FB0  00A5               	movwf	??___ftpack^(0+512)
  6127  1FB1  0825               	movf	??___ftpack^(0+512),w
  6128  1FB2  07A3               	addwf	___ftpack@exp^(0+512),f
  6129  1FB3  3001               	movlw	1
  6130  1FB4                     u8295:	
  6131  1FB4  36A2               	lsrf	(___ftpack@arg+2)^(0+512),f
  6132  1FB5  0CA1               	rrf	(___ftpack@arg+1)^(0+512),f
  6133  1FB6  0CA0               	rrf	___ftpack@arg^(0+512),f
  6134  1FB7  0B89               	decfsz	9,f
  6135  1FB8  2FB4               	goto	u8295
  6136  1FB9                     l6476:	
  6137  1FB9  30FE               	movlw	254
  6138  1FBA  0522               	andwf	(___ftpack@arg+2)^(0+512),w
  6139  1FBB  1903               	btfsc	3,2
  6140  1FBC  2FD2               	goto	l1252
  6141  1FBD  2FAF               	goto	l6474
  6142  1FBE                     l6478:	
  6143  1FBE  3001               	movlw	1
  6144  1FBF  00A5               	movwf	??___ftpack^(0+512)
  6145  1FC0  0825               	movf	??___ftpack^(0+512),w
  6146  1FC1  07A3               	addwf	___ftpack@exp^(0+512),f
  6147  1FC2  3001               	movlw	1
  6148  1FC3  07A0               	addwf	___ftpack@arg^(0+512),f
  6149  1FC4  3000               	movlw	0
  6150  1FC5  1803               	skipnc
  6151  1FC6  3001               	movlw	1
  6152  1FC7  07A1               	addwf	(___ftpack@arg+1)^(0+512),f
  6153  1FC8  3000               	movlw	0
  6154  1FC9  1803               	skipnc
  6155  1FCA  3001               	movlw	1
  6156  1FCB  07A2               	addwf	(___ftpack@arg+2)^(0+512),f
  6157  1FCC  3001               	movlw	1
  6158  1FCD                     u8315:	
  6159  1FCD  36A2               	lsrf	(___ftpack@arg+2)^(0+512),f
  6160  1FCE  0CA1               	rrf	(___ftpack@arg+1)^(0+512),f
  6161  1FCF  0CA0               	rrf	___ftpack@arg^(0+512),f
  6162  1FD0  0B89               	decfsz	9,f
  6163  1FD1  2FCD               	goto	u8315
  6164  1FD2                     l1252:	
  6165  1FD2  30FF               	movlw	255
  6166  1FD3  0522               	andwf	(___ftpack@arg+2)^(0+512),w
  6167  1FD4  1903               	btfsc	3,2
  6168  1FD5  2FDF               	goto	l6486
  6169  1FD6  2FBE               	goto	l6478
  6170  1FD7                     l6484:	
  6171  1FD7  3001               	movlw	1
  6172  1FD8  02A3               	subwf	___ftpack@exp^(0+512),f
  6173  1FD9  3001               	movlw	1
  6174  1FDA                     u8335:	
  6175  1FDA  35A0               	lslf	___ftpack@arg^(0+512),f
  6176  1FDB  0DA1               	rlf	(___ftpack@arg+1)^(0+512),f
  6177  1FDC  0DA2               	rlf	(___ftpack@arg+2)^(0+512),f
  6178  1FDD  0B89               	decfsz	9,f
  6179  1FDE  2FDA               	goto	u8335
  6180  1FDF                     l6486:	
  6181  1FDF  1FA1               	btfss	(___ftpack@arg+1)^(0+512),7
  6182  1FE0  2FD7               	goto	l6484
  6183  1FE1  1823               	btfsc	___ftpack@exp^(0+512),0
  6184  1FE2  2FE9               	goto	l1258
  6185  1FE3  30FF               	movlw	255
  6186  1FE4  05A0               	andwf	___ftpack@arg^(0+512),f
  6187  1FE5  307F               	movlw	127
  6188  1FE6  05A1               	andwf	(___ftpack@arg+1)^(0+512),f
  6189  1FE7  30FF               	movlw	255
  6190  1FE8  05A2               	andwf	(___ftpack@arg+2)^(0+512),f
  6191  1FE9                     l1258:	
  6192  1FE9  1003               	clrc
  6193  1FEA  0CA3               	rrf	___ftpack@exp^(0+512),f
  6194  1FEB  0823               	movf	___ftpack@exp^(0+512),w
  6195  1FEC  00A5               	movwf	??___ftpack^(0+512)
  6196  1FED  01A6               	clrf	(??___ftpack^(0+512)+1)
  6197  1FEE  01A7               	clrf	(??___ftpack^(0+512)+2)
  6198  1FEF  3010               	movlw	16
  6199  1FF0                     u8365:	
  6200  1FF0  35A5               	lslf	??___ftpack^(0+512),f
  6201  1FF1  0DA6               	rlf	(??___ftpack^(0+512)+1),f
  6202  1FF2  0DA7               	rlf	(??___ftpack^(0+512)+2),f
  6203  1FF3  0B89               	decfsz	9,f
  6204  1FF4  2FF0               	goto	u8365
  6205  1FF5  0825               	movf	??___ftpack^(0+512),w
  6206  1FF6  04A0               	iorwf	___ftpack@arg^(0+512),f
  6207  1FF7  0826               	movf	(??___ftpack+1)^(0+512),w
  6208  1FF8  04A1               	iorwf	(___ftpack@arg+1)^(0+512),f
  6209  1FF9  0827               	movf	(??___ftpack+2)^(0+512),w
  6210  1FFA  04A2               	iorwf	(___ftpack@arg+2)^(0+512),f
  6211  1FFB  0824               	movf	___ftpack@sign^(0+512),w
  6212  1FFC  1903               	btfsc	3,2
  6213  1FFD  0008               	return
  6214  1FFE  17A2               	bsf	(___ftpack@arg^(0+512)+2),7
  6215  1FFF  0008               	return
  6216  2000                     __end_of___ftpack:	
  6217                           
  6218                           	psect	text7
  6219  1D11                     __ptext7:	
  6220 ;; *************** function _InternalADC_Read *****************
  6221 ;; Defined at:
  6222 ;;		line 97 in file "ADC.c"
  6223 ;; Parameters:    Size  Location     Type
  6224 ;;  channel         1    wreg     unsigned char 
  6225 ;; Auto vars:     Size  Location     Type
  6226 ;;  channel         1   14[BANK4 ] unsigned char 
  6227 ;; Return value:  Size  Location     Type
  6228 ;;                  2   10[BANK4 ] unsigned int 
  6229 ;; Registers used:
  6230 ;;		wreg, status,2, status,0, pclath, cstack
  6231 ;; Tracked objects:
  6232 ;;		On entry : 0/0
  6233 ;;		On exit  : 0/0
  6234 ;;		Unchanged: 0/0
  6235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6236 ;;      Params:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  6237 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6238 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  6239 ;;      Totals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  6240 ;;Total ram usage:        5 bytes
  6241 ;; Hardware stack levels used:    1
  6242 ;; Hardware stack levels required when called:    8
  6243 ;; This function calls:
  6244 ;;		_delayUS
  6245 ;; This function is called by:
  6246 ;;		_ReadVoltage
  6247 ;; This function uses a non-reentrant model
  6248 ;;
  6249                           
  6250                           
  6251                           ;psect for function _InternalADC_Read
  6252  1D11                     _InternalADC_Read:	
  6253                           
  6254                           ;incstack = 0
  6255                           ; Regs used in _InternalADC_Read: [wreg+status,2+status,0+pclath+cstack]
  6256                           ;InternalADC_Read@channel stored from wreg
  6257  1D11  0024               	movlb	4	; select bank4
  6258  1D12  00AE               	movwf	InternalADC_Read@channel^(0+512)
  6259                           
  6260                           ;ADC.c: 99: ADCON0 =0;
  6261  1D13  0021               	movlb	1	; select bank1
  6262  1D14  019D               	clrf	29	;volatile
  6263                           
  6264                           ;ADC.c: 100: ADCON1 =0;
  6265  1D15  019E               	clrf	30	;volatile
  6266                           
  6267                           ;ADC.c: 101: ADCON1 |= 0b01010000;
  6268  1D16  3050               	movlw	80
  6269  1D17  0024               	movlb	4	; select bank4
  6270  1D18  00AC               	movwf	??_InternalADC_Read^(0+512)
  6271  1D19  082C               	movf	??_InternalADC_Read^(0+512),w
  6272  1D1A  0021               	movlb	1	; select bank1
  6273  1D1B  049E               	iorwf	30,f	;volatile
  6274                           
  6275                           ;ADC.c: 102: FVRCON |= 0b10000000;
  6276  1D1C  0022               	movlb	2	; select bank2
  6277  1D1D  1797               	bsf	23,7	;volatile
  6278                           
  6279                           ;ADC.c: 103: FVRCON |= 0b00000011;
  6280  1D1E  3003               	movlw	3
  6281  1D1F  0024               	movlb	4	; select bank4
  6282  1D20  00AC               	movwf	??_InternalADC_Read^(0+512)
  6283  1D21  082C               	movf	??_InternalADC_Read^(0+512),w
  6284  1D22  0022               	movlb	2	; select bank2
  6285  1D23  0497               	iorwf	23,f	;volatile
  6286  1D24                     l1020:	
  6287                           ;ADC.c: 104: while(!(FVRCON & 0b01000000));
  6288                           
  6289  1D24  1F17               	btfss	23,6	;volatile
  6290  1D25  2D24               	goto	l1020
  6291                           
  6292                           ;ADC.c: 105: ADCON0 |= (channel << 2);
  6293  1D26  0024               	movlb	4	; select bank4
  6294  1D27  082E               	movf	InternalADC_Read@channel^(0+512),w
  6295  1D28  00AC               	movwf	??_InternalADC_Read^(0+512)
  6296  1D29  3001               	movlw	1
  6297  1D2A                     u8625:	
  6298  1D2A  35AC               	lslf	??_InternalADC_Read^(0+512),f
  6299  1D2B  3EFF               	addlw	-1
  6300  1D2C  1D03               	skipz
  6301  1D2D  2D2A               	goto	u8625
  6302  1D2E  352C               	lslf	??_InternalADC_Read^(0+512),w
  6303  1D2F  00AD               	movwf	(??_InternalADC_Read+1)^(0+512)
  6304  1D30  082D               	movf	(??_InternalADC_Read+1)^(0+512),w
  6305  1D31  0021               	movlb	1	; select bank1
  6306  1D32  049D               	iorwf	29,f	;volatile
  6307                           
  6308                           ;ADC.c: 106: ADCON1 |= 0b10000011;
  6309  1D33  3083               	movlw	131
  6310  1D34  0024               	movlb	4	; select bank4
  6311  1D35  00AC               	movwf	??_InternalADC_Read^(0+512)
  6312  1D36  082C               	movf	??_InternalADC_Read^(0+512),w
  6313  1D37  0021               	movlb	1	; select bank1
  6314  1D38  049E               	iorwf	30,f	;volatile
  6315                           
  6316                           ;ADC.c: 107: ADCON0 |= 0b00000001;
  6317  1D39  141D               	bsf	29,0	;volatile
  6318                           
  6319                           ;ADC.c: 108: (PIE1bits.ADIE=0);
  6320  1D3A  1311               	bcf	17,6	;volatile
  6321                           
  6322                           ;ADC.c: 109: delayUS(5);
  6323  1D3B  3000               	movlw	0
  6324  1D3C  0024               	movlb	4	; select bank4
  6325  1D3D  00A3               	movwf	(delayUS@US+3)^(0+512)
  6326  1D3E  3000               	movlw	0
  6327  1D3F  00A2               	movwf	(delayUS@US+2)^(0+512)
  6328  1D40  3000               	movlw	0
  6329  1D41  00A1               	movwf	(delayUS@US+1)^(0+512)
  6330  1D42  3005               	movlw	5
  6331  1D43  00A0               	movwf	delayUS@US^(0+512)
  6332  1D44  319B  23DB  319D   	fcall	_delayUS
  6333                           
  6334                           ;ADC.c: 110: ADCON0 |= 0b00000010;
  6335  1D47  0021               	movlb	1	; select bank1
  6336  1D48  149D               	bsf	29,1	;volatile
  6337  1D49                     l1023:	
  6338                           ;ADC.c: 111: while(ADCON0 & 0b00000010);
  6339                           
  6340  1D49  189D               	btfsc	29,1	;volatile
  6341  1D4A  2D49               	goto	l1023
  6342                           
  6343                           ;ADC.c: 112: return ((ADRESH << 8) + ADRESL);
  6344  1D4B  081C               	movf	28,w	;volatile
  6345  1D4C  0024               	movlb	4	; select bank4
  6346  1D4D  01AB               	clrf	(?_InternalADC_Read+1)^(0+512)
  6347  1D4E  07AB               	addwf	(?_InternalADC_Read+1)^(0+512),f
  6348  1D4F  0021               	movlb	1	; select bank1
  6349  1D50  081B               	movf	27,w	;volatile
  6350  1D51  0024               	movlb	4	; select bank4
  6351  1D52  01AA               	clrf	?_InternalADC_Read^(0+512)
  6352  1D53  07AA               	addwf	?_InternalADC_Read^(0+512),f
  6353  1D54  0008               	return
  6354  1D55                     __end_of_InternalADC_Read:	
  6355                           
  6356                           	psect	text8
  6357  0A41                     __ptext8:	
  6358 ;; *************** function _DisableInternalADC *****************
  6359 ;; Defined at:
  6360 ;;		line 120 in file "ADC.c"
  6361 ;; Parameters:    Size  Location     Type
  6362 ;;		None
  6363 ;; Auto vars:     Size  Location     Type
  6364 ;;		None
  6365 ;; Return value:  Size  Location     Type
  6366 ;;		None               void
  6367 ;; Registers used:
  6368 ;;		wreg, status,2, status,0
  6369 ;; Tracked objects:
  6370 ;;		On entry : 0/0
  6371 ;;		On exit  : 0/0
  6372 ;;		Unchanged: 0/0
  6373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6376 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6377 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6378 ;;Total ram usage:        1 bytes
  6379 ;; Hardware stack levels used:    1
  6380 ;; Hardware stack levels required when called:    7
  6381 ;; This function calls:
  6382 ;;		Nothing
  6383 ;; This function is called by:
  6384 ;;		_ReadVoltage
  6385 ;; This function uses a non-reentrant model
  6386 ;;
  6387                           
  6388                           
  6389                           ;psect for function _DisableInternalADC
  6390  0A41                     _DisableInternalADC:	
  6391                           
  6392                           ;ADC.c: 122: ADCON0 &= ~0b00000001;
  6393                           
  6394                           ;incstack = 0
  6395                           ; Regs used in _DisableInternalADC: [wreg+status,2+status,0]
  6396  0A41  30FE               	movlw	254
  6397  0A42  0024               	movlb	4	; select bank4
  6398  0A43  00A0               	movwf	??_DisableInternalADC^(0+512)
  6399  0A44  0820               	movf	??_DisableInternalADC^(0+512),w
  6400  0A45  0021               	movlb	1	; select bank1
  6401  0A46  059D               	andwf	29,f	;volatile
  6402  0A47  0008               	return
  6403  0A48                     __end_of_DisableInternalADC:	
  6404                           
  6405                           	psect	text9
  6406  18DA                     __ptext9:	
  6407 ;; *************** function _PS_2_INIT *****************
  6408 ;; Defined at:
  6409 ;;		line 101 in file "PS_2.c"
  6410 ;; Parameters:    Size  Location     Type
  6411 ;;		None
  6412 ;; Auto vars:     Size  Location     Type
  6413 ;;		None
  6414 ;; Return value:  Size  Location     Type
  6415 ;;		None               void
  6416 ;; Registers used:
  6417 ;;		wreg, status,2, status,0, pclath, cstack
  6418 ;; Tracked objects:
  6419 ;;		On entry : 0/0
  6420 ;;		On exit  : 0/0
  6421 ;;		Unchanged: 0/0
  6422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6426 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6427 ;;Total ram usage:        0 bytes
  6428 ;; Hardware stack levels used:    1
  6429 ;; Hardware stack levels required when called:   10
  6430 ;; This function calls:
  6431 ;;		_Clock_TRIS
  6432 ;;		_Data_TRIS
  6433 ;;		_Init_PS_2_Send
  6434 ;;		_Timer2Init
  6435 ;; This function is called by:
  6436 ;;		_main
  6437 ;; This function uses a non-reentrant model
  6438 ;;
  6439                           
  6440                           
  6441                           ;psect for function _PS_2_INIT
  6442  18DA                     _PS_2_INIT:	
  6443                           
  6444                           ;PS_2.c: 104: Clock_TRIS(1);
  6445                           
  6446                           ;incstack = 0
  6447                           ; Regs used in _PS_2_INIT: [wreg+status,2+status,0+pclath+cstack]
  6448  18DA  3001               	movlw	1
  6449  18DB  3198  2091  3198   	fcall	_Clock_TRIS
  6450                           
  6451                           ;PS_2.c: 105: Data_TRIS(1);
  6452  18DE  3001               	movlw	1
  6453  18DF  3198  209C  3198   	fcall	_Data_TRIS
  6454                           
  6455                           ;PS_2.c: 106: Timer2Init(255);
  6456  18E2  30FF               	movlw	255
  6457  18E3  319A  222A  3198   	fcall	_Timer2Init
  6458                           
  6459                           ;PS_2.c: 107: Init_PS_2_Send();
  6460  18E6  3186  266F         	fcall	_Init_PS_2_Send
  6461  18E8  0008               	return
  6462  18E9                     __end_of_PS_2_INIT:	
  6463                           
  6464                           	psect	text10
  6465  1A2A                     __ptext10:	
  6466 ;; *************** function _Timer2Init *****************
  6467 ;; Defined at:
  6468 ;;		line 41 in file "Timer.c"
  6469 ;; Parameters:    Size  Location     Type
  6470 ;;  time            1    wreg     unsigned char 
  6471 ;; Auto vars:     Size  Location     Type
  6472 ;;  time            1    2[BANK4 ] unsigned char 
  6473 ;;  prescaler       1    4[BANK4 ] unsigned char 
  6474 ;;  postscaler      1    3[BANK4 ] unsigned char 
  6475 ;; Return value:  Size  Location     Type
  6476 ;;		None               void
  6477 ;; Registers used:
  6478 ;;		wreg, status,2, status,0, pclath, cstack
  6479 ;; Tracked objects:
  6480 ;;		On entry : 0/0
  6481 ;;		On exit  : 0/0
  6482 ;;		Unchanged: 0/0
  6483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6485 ;;      Locals:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  6486 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  6487 ;;      Totals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  6488 ;;Total ram usage:        5 bytes
  6489 ;; Hardware stack levels used:    1
  6490 ;; Hardware stack levels required when called:    8
  6491 ;; This function calls:
  6492 ;;		_Timer2ON
  6493 ;; This function is called by:
  6494 ;;		_PS_2_INIT
  6495 ;; This function uses a non-reentrant model
  6496 ;;
  6497                           
  6498                           
  6499                           ;psect for function _Timer2Init
  6500  1A2A                     _Timer2Init:	
  6501                           
  6502                           ;incstack = 0
  6503                           ; Regs used in _Timer2Init: [wreg+status,2+status,0+pclath+cstack]
  6504                           ;Timer2Init@time stored from wreg
  6505  1A2A  0024               	movlb	4	; select bank4
  6506  1A2B  00A2               	movwf	Timer2Init@time^(0+512)
  6507                           
  6508                           ;Timer.c: 43: unsigned char postscaler =0xF;
  6509  1A2C  300F               	movlw	15
  6510  1A2D  00A0               	movwf	??_Timer2Init^(0+512)
  6511  1A2E  0820               	movf	??_Timer2Init^(0+512),w
  6512  1A2F  00A3               	movwf	Timer2Init@postscaler^(0+512)
  6513                           
  6514                           ;Timer.c: 44: unsigned char prescaler =3;
  6515  1A30  3003               	movlw	3
  6516  1A31  00A0               	movwf	??_Timer2Init^(0+512)
  6517  1A32  0820               	movf	??_Timer2Init^(0+512),w
  6518  1A33  00A4               	movwf	Timer2Init@prescaler^(0+512)
  6519                           
  6520                           ;Timer.c: 45: CCP2CONbits.CCP2M = 0b1010;
  6521  1A34  0025               	movlb	5	; select bank5
  6522  1A35  081A               	movf	26,w	;volatile
  6523  1A36  39F0               	andlw	-16
  6524  1A37  380A               	iorlw	10
  6525  1A38  009A               	movwf	26	;volatile
  6526                           
  6527                           ;Timer.c: 46: PR2 = time;
  6528  1A39  0024               	movlb	4	; select bank4
  6529  1A3A  0822               	movf	Timer2Init@time^(0+512),w
  6530  1A3B  0020               	movlb	0	; select bank0
  6531  1A3C  009B               	movwf	27	;volatile
  6532                           
  6533                           ;Timer.c: 47: T2CON |= postscaler << 3;
  6534  1A3D  0024               	movlb	4	; select bank4
  6535  1A3E  0823               	movf	Timer2Init@postscaler^(0+512),w
  6536  1A3F  00A0               	movwf	??_Timer2Init^(0+512)
  6537  1A40  3002               	movlw	2
  6538  1A41                     u8525:	
  6539  1A41  35A0               	lslf	??_Timer2Init^(0+512),f
  6540  1A42  3EFF               	addlw	-1
  6541  1A43  1D03               	skipz
  6542  1A44  2A41               	goto	u8525
  6543  1A45  3520               	lslf	??_Timer2Init^(0+512),w
  6544  1A46  00A1               	movwf	(??_Timer2Init+1)^(0+512)
  6545  1A47  0821               	movf	(??_Timer2Init+1)^(0+512),w
  6546  1A48  0020               	movlb	0	; select bank0
  6547  1A49  049C               	iorwf	28,f	;volatile
  6548                           
  6549                           ;Timer.c: 48: T2CON |= prescaler;
  6550  1A4A  0024               	movlb	4	; select bank4
  6551  1A4B  0824               	movf	Timer2Init@prescaler^(0+512),w
  6552  1A4C  00A0               	movwf	??_Timer2Init^(0+512)
  6553  1A4D  0820               	movf	??_Timer2Init^(0+512),w
  6554  1A4E  0020               	movlb	0	; select bank0
  6555  1A4F  049C               	iorwf	28,f	;volatile
  6556                           
  6557                           ;Timer.c: 50: Timer2ON();
  6558  1A50  3198  2028         	fcall	_Timer2ON
  6559                           
  6560                           ;Timer.c: 51: PIE1bits.TMR2IE = 0;
  6561  1A52  0021               	movlb	1	; select bank1
  6562  1A53  1091               	bcf	17,1	;volatile
  6563  1A54  0008               	return
  6564  1A55                     __end_of_Timer2Init:	
  6565                           
  6566                           	psect	text11
  6567  1828                     __ptext11:	
  6568 ;; *************** function _Timer2ON *****************
  6569 ;; Defined at:
  6570 ;;		line 59 in file "Timer.c"
  6571 ;; Parameters:    Size  Location     Type
  6572 ;;		None
  6573 ;; Auto vars:     Size  Location     Type
  6574 ;;		None
  6575 ;; Return value:  Size  Location     Type
  6576 ;;		None               void
  6577 ;; Registers used:
  6578 ;;		None
  6579 ;; Tracked objects:
  6580 ;;		On entry : 0/0
  6581 ;;		On exit  : 0/0
  6582 ;;		Unchanged: 0/0
  6583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6587 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6588 ;;Total ram usage:        0 bytes
  6589 ;; Hardware stack levels used:    1
  6590 ;; Hardware stack levels required when called:    7
  6591 ;; This function calls:
  6592 ;;		Nothing
  6593 ;; This function is called by:
  6594 ;;		_Timer2Init
  6595 ;; This function uses a non-reentrant model
  6596 ;;
  6597                           
  6598                           
  6599                           ;psect for function _Timer2ON
  6600  1828                     _Timer2ON:	
  6601                           
  6602                           ;Timer.c: 61: T2CONbits.TMR2ON = 1;
  6603                           
  6604                           ;incstack = 0
  6605                           ; Regs used in _Timer2ON: []
  6606  1828  0020               	movlb	0	; select bank0
  6607  1829  151C               	bsf	28,2	;volatile
  6608  182A  0008               	return
  6609  182B                     __end_of_Timer2ON:	
  6610                           
  6611                           	psect	text12
  6612  066F                     __ptext12:	
  6613 ;; *************** function _Init_PS_2_Send *****************
  6614 ;; Defined at:
  6615 ;;		line 995 in file "PS_2.c"
  6616 ;; Parameters:    Size  Location     Type
  6617 ;;		None
  6618 ;; Auto vars:     Size  Location     Type
  6619 ;;		None
  6620 ;; Return value:  Size  Location     Type
  6621 ;;                  1    wreg      unsigned char 
  6622 ;; Registers used:
  6623 ;;		wreg, status,2, status,0, pclath, cstack
  6624 ;; Tracked objects:
  6625 ;;		On entry : 0/0
  6626 ;;		On exit  : 0/0
  6627 ;;		Unchanged: 0/0
  6628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6633 ;;Total ram usage:        0 bytes
  6634 ;; Hardware stack levels used:    1
  6635 ;; Hardware stack levels required when called:    9
  6636 ;; This function calls:
  6637 ;;		_PS_2_DISABLE_INTERRUPT
  6638 ;;		_Send_PS2
  6639 ;;		_delayUS
  6640 ;; This function is called by:
  6641 ;;		_PS_2_INIT
  6642 ;; This function uses a non-reentrant model
  6643 ;;
  6644                           
  6645                           
  6646                           ;psect for function _Init_PS_2_Send
  6647  066F                     _Init_PS_2_Send:	
  6648                           
  6649                           ;PS_2.c: 997: PS_2_DISABLE_INTERRUPT(0b00100000);
  6650                           
  6651                           ;incstack = 0
  6652                           ; Regs used in _Init_PS_2_Send: [wreg+status,2+status,0+pclath+cstack]
  6653  066F  3020               	movlw	32
  6654  0670  3199  2165  3186   	fcall	_PS_2_DISABLE_INTERRUPT
  6655                           
  6656                           ;PS_2.c: 1000: if(Send_PS2(0x07))
  6657  0673  3007               	movlw	7
  6658  0674  318E  266C  3186   	fcall	_Send_PS2
  6659  0677  3A00               	xorlw	0
  6660  0678  1D03               	btfss	3,2
  6661  0679  0008               	return
  6662                           
  6663                           ;PS_2.c: 1003: }
  6664                           ;PS_2.c: 1004: delayUS(5000);
  6665                           
  6666                           ;PS_2.c: 1001: {
  6667                           ;PS_2.c: 1002: return 0;
  6668                           ;	Return value of _Init_PS_2_Send is never used
  6669  067A  3000               	movlw	0
  6670  067B  0024               	movlb	4	; select bank4
  6671  067C  00A3               	movwf	(delayUS@US+3)^(0+512)
  6672  067D  3000               	movlw	0
  6673  067E  00A2               	movwf	(delayUS@US+2)^(0+512)
  6674  067F  3013               	movlw	19
  6675  0680  00A1               	movwf	(delayUS@US+1)^(0+512)
  6676  0681  3088               	movlw	136
  6677  0682  00A0               	movwf	delayUS@US^(0+512)
  6678  0683  319B  23DB  3186   	fcall	_delayUS
  6679                           
  6680                           ;PS_2.c: 1007: if(Send_PS2(0xED))
  6681  0686  30ED               	movlw	237
  6682  0687  318E  266C  3186   	fcall	_Send_PS2
  6683  068A  3A00               	xorlw	0
  6684  068B  1D03               	btfss	3,2
  6685  068C  0008               	return
  6686                           
  6687                           ;PS_2.c: 1010: }
  6688                           ;PS_2.c: 1011: delayUS(5000);
  6689                           
  6690                           ;PS_2.c: 1008: {
  6691                           ;PS_2.c: 1009: return 0;
  6692                           ;	Return value of _Init_PS_2_Send is never used
  6693  068D  3000               	movlw	0
  6694  068E  0024               	movlb	4	; select bank4
  6695  068F  00A3               	movwf	(delayUS@US+3)^(0+512)
  6696  0690  3000               	movlw	0
  6697  0691  00A2               	movwf	(delayUS@US+2)^(0+512)
  6698  0692  3013               	movlw	19
  6699  0693  00A1               	movwf	(delayUS@US+1)^(0+512)
  6700  0694  3088               	movlw	136
  6701  0695  00A0               	movwf	delayUS@US^(0+512)
  6702  0696  319B  23DB  3186   	fcall	_delayUS
  6703                           
  6704                           ;PS_2.c: 1012: if(Send_PS2(0x00))
  6705  0699  3000               	movlw	0
  6706  069A  318E  266C  3186   	fcall	_Send_PS2
  6707  069D  3A00               	xorlw	0
  6708  069E  1D03               	btfss	3,2
  6709  069F  0008               	return
  6710                           
  6711                           ;PS_2.c: 1015: }
  6712                           ;PS_2.c: 1018: if(Send_PS2(0xf4))
  6713                           
  6714                           ;PS_2.c: 1013: {
  6715                           ;PS_2.c: 1014: return 0;
  6716                           ;	Return value of _Init_PS_2_Send is never used
  6717  06A0  30F4               	movlw	244
  6718  06A1  318E  266C  3186   	fcall	_Send_PS2
  6719  06A4  3A00               	xorlw	0
  6720  06A5  1D03               	btfss	3,2
  6721  06A6  0008               	return
  6722                           
  6723                           ;PS_2.c: 1021: }
  6724                           ;PS_2.c: 1024: if(Send_PS2(0xf4))
  6725                           
  6726                           ;PS_2.c: 1019: {
  6727                           ;PS_2.c: 1020: return 0;
  6728                           ;	Return value of _Init_PS_2_Send is never used
  6729  06A7  30F4               	movlw	244
  6730  06A8  318E  266C  3186   	fcall	_Send_PS2
  6731  06AB  3A00               	xorlw	0
  6732  06AC  1D03               	btfss	3,2
  6733  06AD  0008               	return
  6734                           
  6735                           ;PS_2.c: 1027: }
  6736                           ;PS_2.c: 1030: if(Send_PS2(0xf0))
  6737                           
  6738                           ;PS_2.c: 1025: {
  6739                           ;PS_2.c: 1026: return 0;
  6740                           ;	Return value of _Init_PS_2_Send is never used
  6741  06AE  30F0               	movlw	240
  6742  06AF  318E  266C  3186   	fcall	_Send_PS2
  6743  06B2  3A00               	xorlw	0
  6744  06B3  1D03               	btfss	3,2
  6745  06B4  0008               	return
  6746                           
  6747                           ;PS_2.c: 1033: }
  6748                           ;PS_2.c: 1034: delayUS(100);
  6749                           
  6750                           ;PS_2.c: 1031: {
  6751                           ;PS_2.c: 1032: return 0;
  6752                           ;	Return value of _Init_PS_2_Send is never used
  6753  06B5  3000               	movlw	0
  6754  06B6  0024               	movlb	4	; select bank4
  6755  06B7  00A3               	movwf	(delayUS@US+3)^(0+512)
  6756  06B8  3000               	movlw	0
  6757  06B9  00A2               	movwf	(delayUS@US+2)^(0+512)
  6758  06BA  3000               	movlw	0
  6759  06BB  00A1               	movwf	(delayUS@US+1)^(0+512)
  6760  06BC  3064               	movlw	100
  6761  06BD  00A0               	movwf	delayUS@US^(0+512)
  6762  06BE  319B  23DB  3186   	fcall	_delayUS
  6763                           
  6764                           ;PS_2.c: 1035: if(Send_PS2(0x02))
  6765  06C1  3002               	movlw	2
  6766  06C2  318E  266C  3186   	fcall	_Send_PS2
  6767  06C5  3A00               	xorlw	0
  6768  06C6  1D03               	btfss	3,2
  6769  06C7  0008               	return
  6770                           
  6771                           ;PS_2.c: 1038: }
  6772                           ;PS_2.c: 1041: if(Send_PS2(0xf3))
  6773                           
  6774                           ;PS_2.c: 1036: {
  6775                           ;PS_2.c: 1037: return 0;
  6776                           ;	Return value of _Init_PS_2_Send is never used
  6777  06C8  30F3               	movlw	243
  6778  06C9  318E  266C  3186   	fcall	_Send_PS2
  6779  06CC  3A00               	xorlw	0
  6780  06CD  1D03               	btfss	3,2
  6781  06CE  0008               	return
  6782                           
  6783                           ;PS_2.c: 1044: }
  6784                           ;PS_2.c: 1045: delayUS(100);
  6785                           
  6786                           ;PS_2.c: 1042: {
  6787                           ;PS_2.c: 1043: return 0;
  6788                           ;	Return value of _Init_PS_2_Send is never used
  6789  06CF  3000               	movlw	0
  6790  06D0  0024               	movlb	4	; select bank4
  6791  06D1  00A3               	movwf	(delayUS@US+3)^(0+512)
  6792  06D2  3000               	movlw	0
  6793  06D3  00A2               	movwf	(delayUS@US+2)^(0+512)
  6794  06D4  3000               	movlw	0
  6795  06D5  00A1               	movwf	(delayUS@US+1)^(0+512)
  6796  06D6  3064               	movlw	100
  6797  06D7  00A0               	movwf	delayUS@US^(0+512)
  6798  06D8  319B  23DB  3186   	fcall	_delayUS
  6799                           
  6800                           ;PS_2.c: 1046: if(Send_PS2(0x2F))
  6801  06DB  302F               	movlw	47
  6802  06DC  318E  266C         	fcall	_Send_PS2
  6803                           
  6804                           ;PS_2.c: 1047: {
  6805                           ;PS_2.c: 1048: return 0;
  6806                           ;	Return value of _Init_PS_2_Send is never used
  6807  06DE  0008               	return
  6808  06DF                     __end_of_Init_PS_2_Send:	
  6809                           ;PS_2.c: 1049: }
  6810                           ;PS_2.c: 1050: return 1;
  6811                           ;	Return value of _Init_PS_2_Send is never used
  6812                           
  6813                           
  6814                           	psect	text13
  6815  0E6C                     __ptext13:	
  6816 ;; *************** function _Send_PS2 *****************
  6817 ;; Defined at:
  6818 ;;		line 830 in file "PS_2.c"
  6819 ;; Parameters:    Size  Location     Type
  6820 ;;  command         1    wreg     unsigned char 
  6821 ;; Auto vars:     Size  Location     Type
  6822 ;;  command         1   15[BANK4 ] unsigned char 
  6823 ;;  timeout         2   17[BANK4 ] unsigned int 
  6824 ;;  i               1   16[BANK4 ] unsigned char 
  6825 ;;  oddparity       1   14[BANK4 ] unsigned char 
  6826 ;; Return value:  Size  Location     Type
  6827 ;;                  1    wreg      unsigned char 
  6828 ;; Registers used:
  6829 ;;		wreg, status,2, status,0, pclath, cstack
  6830 ;; Tracked objects:
  6831 ;;		On entry : 0/0
  6832 ;;		On exit  : 0/0
  6833 ;;		Unchanged: 0/0
  6834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6836 ;;      Locals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  6837 ;;      Temps:          0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  6838 ;;      Totals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0
  6839 ;;Total ram usage:        9 bytes
  6840 ;; Hardware stack levels used:    1
  6841 ;; Hardware stack levels required when called:    8
  6842 ;; This function calls:
  6843 ;;		_CheckSum_byte
  6844 ;;		_Clock_TRIS
  6845 ;;		_Data_TRIS
  6846 ;;		_READ_PS_2_PIN
  6847 ;;		_delayUS
  6848 ;; This function is called by:
  6849 ;;		_Init_PS_2_Send
  6850 ;;		_Keyboard_Connected
  6851 ;; This function uses a non-reentrant model
  6852 ;;
  6853                           
  6854                           
  6855                           ;psect for function _Send_PS2
  6856  0E6C                     _Send_PS2:	
  6857                           
  6858                           ;incstack = 0
  6859                           ; Regs used in _Send_PS2: [wreg+status,2+status,0+pclath+cstack]
  6860                           ;Send_PS2@command stored from wreg
  6861  0E6C  0024               	movlb	4	; select bank4
  6862  0E6D  00AF               	movwf	Send_PS2@command^(0+512)
  6863                           
  6864                           ;PS_2.c: 832: unsigned char i=0;
  6865  0E6E  01B0               	clrf	Send_PS2@i^(0+512)
  6866                           
  6867                           ;PS_2.c: 833: unsigned char oddparity = CheckSum_byte((unsigned int)command , 3);
  6868  0E6F  082F               	movf	Send_PS2@command^(0+512),w
  6869  0E70  00AA               	movwf	??_Send_PS2^(0+512)
  6870  0E71  01AB               	clrf	(??_Send_PS2^(0+512)+1)
  6871  0E72  082A               	movf	??_Send_PS2^(0+512),w
  6872  0E73  00A0               	movwf	CheckSum_byte@This^(0+512)
  6873  0E74  082B               	movf	(??_Send_PS2+1)^(0+512),w
  6874  0E75  00A1               	movwf	(CheckSum_byte@This+1)^(0+512)
  6875  0E76  3003               	movlw	3
  6876  0E77  00AC               	movwf	(??_Send_PS2+2)^(0+512)
  6877  0E78  082C               	movf	(??_Send_PS2+2)^(0+512),w
  6878  0E79  00A2               	movwf	CheckSum_byte@Odd_Even^(0+512)
  6879  0E7A  319A  22E0  318E   	fcall	_CheckSum_byte
  6880  0E7D  0024               	movlb	4	; select bank4
  6881  0E7E  00AD               	movwf	(??_Send_PS2+3)^(0+512)
  6882  0E7F  082D               	movf	(??_Send_PS2+3)^(0+512),w
  6883  0E80  00AE               	movwf	Send_PS2@oddparity^(0+512)
  6884                           
  6885                           ;PS_2.c: 834: unsigned int timeout =0;
  6886  0E81  01B1               	clrf	Send_PS2@timeout^(0+512)
  6887  0E82  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  6888                           
  6889                           ;PS_2.c: 836: Clock_TRIS(0);
  6890  0E83  3000               	movlw	0
  6891  0E84  3198  2091  318E   	fcall	_Clock_TRIS
  6892                           
  6893                           ;PS_2.c: 837: Data_TRIS(0);
  6894  0E87  3000               	movlw	0
  6895  0E88  3198  209C  318E   	fcall	_Data_TRIS
  6896                           
  6897                           ;PS_2.c: 838: LATA &= ~0b00100000;
  6898  0E8B  30DF               	movlw	223
  6899  0E8C  0024               	movlb	4	; select bank4
  6900  0E8D  00AA               	movwf	??_Send_PS2^(0+512)
  6901  0E8E  082A               	movf	??_Send_PS2^(0+512),w
  6902  0E8F  0022               	movlb	2	; select bank2
  6903  0E90  058C               	andwf	12,f	;volatile
  6904                           
  6905                           ;PS_2.c: 839: delayUS(300);
  6906  0E91  3000               	movlw	0
  6907  0E92  0024               	movlb	4	; select bank4
  6908  0E93  00A3               	movwf	(delayUS@US+3)^(0+512)
  6909  0E94  3000               	movlw	0
  6910  0E95  00A2               	movwf	(delayUS@US+2)^(0+512)
  6911  0E96  3001               	movlw	1
  6912  0E97  00A1               	movwf	(delayUS@US+1)^(0+512)
  6913  0E98  302C               	movlw	44
  6914  0E99  00A0               	movwf	delayUS@US^(0+512)
  6915  0E9A  319B  23DB  318E   	fcall	_delayUS
  6916                           
  6917                           ;PS_2.c: 840: LATA &= ~0b00010000;
  6918  0E9D  30EF               	movlw	239
  6919  0E9E  0024               	movlb	4	; select bank4
  6920  0E9F  00AA               	movwf	??_Send_PS2^(0+512)
  6921  0EA0  082A               	movf	??_Send_PS2^(0+512),w
  6922  0EA1  0022               	movlb	2	; select bank2
  6923  0EA2  058C               	andwf	12,f	;volatile
  6924                           
  6925                           ;PS_2.c: 841: delayUS(20);
  6926  0EA3  3000               	movlw	0
  6927  0EA4  0024               	movlb	4	; select bank4
  6928  0EA5  00A3               	movwf	(delayUS@US+3)^(0+512)
  6929  0EA6  3000               	movlw	0
  6930  0EA7  00A2               	movwf	(delayUS@US+2)^(0+512)
  6931  0EA8  3000               	movlw	0
  6932  0EA9  00A1               	movwf	(delayUS@US+1)^(0+512)
  6933  0EAA  3014               	movlw	20
  6934  0EAB  00A0               	movwf	delayUS@US^(0+512)
  6935  0EAC  319B  23DB  318E   	fcall	_delayUS
  6936                           
  6937                           ;PS_2.c: 842: Clock_TRIS(1);
  6938  0EAF  3001               	movlw	1
  6939  0EB0  3198  2091  318E   	fcall	_Clock_TRIS
  6940                           
  6941                           ;PS_2.c: 843: timeout=0;
  6942  0EB3  0024               	movlb	4	; select bank4
  6943  0EB4  01B1               	clrf	Send_PS2@timeout^(0+512)
  6944  0EB5  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  6945  0EB6                     l6332:	
  6946                           ;PS_2.c: 844: while(READ_PS_2_PIN(0b00100000))
  6947                           
  6948  0EB6  3020               	movlw	32
  6949  0EB7  3199  2178  318E   	fcall	_READ_PS_2_PIN
  6950  0EBA  3800               	iorlw	0
  6951  0EBB  1903               	btfsc	3,2
  6952  0EBC  2ED3               	goto	l6334
  6953                           
  6954                           ;PS_2.c: 845: {
  6955                           ;PS_2.c: 846: __nop();
  6956  0EBD  0000               	nop
  6957                           
  6958                           ;PS_2.c: 847: timeout++;
  6959  0EBE  3001               	movlw	1
  6960  0EBF  0024               	movlb	4	; select bank4
  6961  0EC0  07B1               	addwf	Send_PS2@timeout^(0+512),f
  6962  0EC1  3000               	movlw	0
  6963  0EC2  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  6964                           
  6965                           ;PS_2.c: 848: if(timeout > 15000)
  6966  0EC3  303A               	movlw	58
  6967  0EC4  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  6968  0EC5  3099               	movlw	153
  6969  0EC6  1903               	skipnz
  6970  0EC7  0231               	subwf	Send_PS2@timeout^(0+512),w
  6971  0EC8  1C03               	skipc
  6972  0EC9  2EB6               	goto	l6332
  6973                           
  6974                           ;PS_2.c: 849: {
  6975                           ;PS_2.c: 850: Clock_TRIS(1);
  6976  0ECA  3001               	movlw	1
  6977  0ECB  3198  2091  318E   	fcall	_Clock_TRIS
  6978                           
  6979                           ;PS_2.c: 851: Data_TRIS(1);
  6980  0ECE  3001               	movlw	1
  6981  0ECF  3198  209C         	fcall	_Data_TRIS
  6982                           
  6983                           ;PS_2.c: 852: return 1;
  6984  0ED1  3001               	movlw	1
  6985  0ED2  0008               	return
  6986  0ED3                     l6334:	
  6987                           
  6988                           ;PS_2.c: 853: }
  6989                           ;PS_2.c: 854: }
  6990                           ;PS_2.c: 855: for(i=0;i<8;i++)
  6991  0ED3  0024               	movlb	4	; select bank4
  6992  0ED4  01B0               	clrf	Send_PS2@i^(0+512)
  6993  0ED5  3008               	movlw	8
  6994  0ED6  0230               	subwf	Send_PS2@i^(0+512),w
  6995  0ED7  1803               	btfsc	3,0
  6996  0ED8  2F2E               	goto	l856
  6997  0ED9                     l855:	
  6998                           
  6999                           ;PS_2.c: 856: {
  7000                           ;PS_2.c: 857: if(command & 0x1)
  7001  0ED9  1C2F               	btfss	Send_PS2@command^(0+512),0
  7002  0EDA  2EDE               	goto	l6342
  7003                           
  7004                           ;PS_2.c: 858: {
  7005                           ;PS_2.c: 859: LATA |= 0b00010000;
  7006  0EDB  0022               	movlb	2	; select bank2
  7007  0EDC  160C               	bsf	12,4	;volatile
  7008                           
  7009                           ;PS_2.c: 860: }
  7010  0EDD  2EE4               	goto	l6344
  7011  0EDE                     l6342:	
  7012                           
  7013                           ;PS_2.c: 861: else
  7014                           ;PS_2.c: 862: {
  7015                           ;PS_2.c: 863: LATA &= ~0b00010000;
  7016  0EDE  30EF               	movlw	239
  7017  0EDF  0024               	movlb	4	; select bank4
  7018  0EE0  00AA               	movwf	??_Send_PS2^(0+512)
  7019  0EE1  082A               	movf	??_Send_PS2^(0+512),w
  7020  0EE2  0022               	movlb	2	; select bank2
  7021  0EE3  058C               	andwf	12,f	;volatile
  7022  0EE4                     l6344:	
  7023                           
  7024                           ;PS_2.c: 864: }
  7025                           ;PS_2.c: 865: command >> = 1;
  7026  0EE4  1003               	clrc
  7027  0EE5  0024               	movlb	4	; select bank4
  7028  0EE6  0CAF               	rrf	Send_PS2@command^(0+512),f
  7029                           
  7030                           ;PS_2.c: 866: timeout=0;
  7031  0EE7  01B1               	clrf	Send_PS2@timeout^(0+512)
  7032  0EE8  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7033  0EE9                     l6356:	
  7034                           ;PS_2.c: 867: while(!READ_PS_2_PIN(0b00100000))
  7035                           
  7036  0EE9  3020               	movlw	32
  7037  0EEA  3199  2178  318E   	fcall	_READ_PS_2_PIN
  7038  0EED  3A00               	xorlw	0
  7039  0EEE  1D03               	btfss	3,2
  7040  0EEF  2F05               	goto	l6358
  7041                           
  7042                           ;PS_2.c: 868: {
  7043                           ;PS_2.c: 869: timeout++;
  7044  0EF0  3001               	movlw	1
  7045  0EF1  0024               	movlb	4	; select bank4
  7046  0EF2  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7047  0EF3  3000               	movlw	0
  7048  0EF4  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7049                           
  7050                           ;PS_2.c: 870: if(timeout > 15000)
  7051  0EF5  303A               	movlw	58
  7052  0EF6  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7053  0EF7  3099               	movlw	153
  7054  0EF8  1903               	skipnz
  7055  0EF9  0231               	subwf	Send_PS2@timeout^(0+512),w
  7056  0EFA  1C03               	skipc
  7057  0EFB  2EE9               	goto	l6356
  7058                           
  7059                           ;PS_2.c: 871: {
  7060                           ;PS_2.c: 872: Clock_TRIS(1);
  7061  0EFC  3001               	movlw	1
  7062  0EFD  3198  2091  318E   	fcall	_Clock_TRIS
  7063                           
  7064                           ;PS_2.c: 873: Data_TRIS(1);
  7065  0F00  3001               	movlw	1
  7066  0F01  3198  209C         	fcall	_Data_TRIS
  7067                           
  7068                           ;PS_2.c: 874: return 1;
  7069  0F03  3001               	movlw	1
  7070  0F04  0008               	return
  7071  0F05                     l6358:	
  7072                           
  7073                           ;PS_2.c: 875: }
  7074                           ;PS_2.c: 876: }
  7075                           ;PS_2.c: 877: timeout=0;
  7076  0F05  0024               	movlb	4	; select bank4
  7077  0F06  01B1               	clrf	Send_PS2@timeout^(0+512)
  7078  0F07  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7079  0F08                     l6368:	
  7080                           ;PS_2.c: 878: while(READ_PS_2_PIN(0b00100000))
  7081                           
  7082  0F08  3020               	movlw	32
  7083  0F09  3199  2178  318E   	fcall	_READ_PS_2_PIN
  7084  0F0C  3800               	iorlw	0
  7085  0F0D  1903               	btfsc	3,2
  7086  0F0E  2F25               	goto	l6370
  7087                           
  7088                           ;PS_2.c: 879: {
  7089                           ;PS_2.c: 880: __nop();
  7090  0F0F  0000               	nop
  7091                           
  7092                           ;PS_2.c: 881: timeout++;
  7093  0F10  3001               	movlw	1
  7094  0F11  0024               	movlb	4	; select bank4
  7095  0F12  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7096  0F13  3000               	movlw	0
  7097  0F14  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7098                           
  7099                           ;PS_2.c: 882: if(timeout > 15000)
  7100  0F15  303A               	movlw	58
  7101  0F16  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7102  0F17  3099               	movlw	153
  7103  0F18  1903               	skipnz
  7104  0F19  0231               	subwf	Send_PS2@timeout^(0+512),w
  7105  0F1A  1C03               	skipc
  7106  0F1B  2F08               	goto	l6368
  7107                           
  7108                           ;PS_2.c: 883: {
  7109                           ;PS_2.c: 884: Clock_TRIS(1);
  7110  0F1C  3001               	movlw	1
  7111  0F1D  3198  2091  318E   	fcall	_Clock_TRIS
  7112                           
  7113                           ;PS_2.c: 885: Data_TRIS(1);
  7114  0F20  3001               	movlw	1
  7115  0F21  3198  209C         	fcall	_Data_TRIS
  7116                           
  7117                           ;PS_2.c: 886: return 1;
  7118  0F23  3001               	movlw	1
  7119  0F24  0008               	return
  7120  0F25                     l6370:	
  7121  0F25  3001               	movlw	1
  7122  0F26  0024               	movlb	4	; select bank4
  7123  0F27  00AA               	movwf	??_Send_PS2^(0+512)
  7124  0F28  082A               	movf	??_Send_PS2^(0+512),w
  7125  0F29  07B0               	addwf	Send_PS2@i^(0+512),f
  7126  0F2A  3008               	movlw	8
  7127  0F2B  0230               	subwf	Send_PS2@i^(0+512),w
  7128  0F2C  1C03               	skipc
  7129  0F2D  2ED9               	goto	l855
  7130  0F2E                     l856:	
  7131                           
  7132                           ;PS_2.c: 887: }
  7133                           ;PS_2.c: 888: }
  7134                           ;PS_2.c: 889: }
  7135                           ;PS_2.c: 891: if(oddparity & 0x1)
  7136  0F2E  1C2E               	btfss	Send_PS2@oddparity^(0+512),0
  7137  0F2F  2F33               	goto	l6376
  7138                           
  7139                           ;PS_2.c: 892: {
  7140                           ;PS_2.c: 893: LATA |= 0b00010000;
  7141  0F30  0022               	movlb	2	; select bank2
  7142  0F31  160C               	bsf	12,4	;volatile
  7143                           
  7144                           ;PS_2.c: 894: }
  7145  0F32  2F39               	goto	l6378
  7146  0F33                     l6376:	
  7147                           
  7148                           ;PS_2.c: 895: else
  7149                           ;PS_2.c: 896: {
  7150                           ;PS_2.c: 897: LATA &= ~0b00010000;
  7151  0F33  30EF               	movlw	239
  7152  0F34  0024               	movlb	4	; select bank4
  7153  0F35  00AA               	movwf	??_Send_PS2^(0+512)
  7154  0F36  082A               	movf	??_Send_PS2^(0+512),w
  7155  0F37  0022               	movlb	2	; select bank2
  7156  0F38  058C               	andwf	12,f	;volatile
  7157  0F39                     l6378:	
  7158                           
  7159                           ;PS_2.c: 898: }
  7160                           ;PS_2.c: 899: timeout=0;
  7161  0F39  0024               	movlb	4	; select bank4
  7162  0F3A  01B1               	clrf	Send_PS2@timeout^(0+512)
  7163  0F3B  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7164  0F3C                     l6388:	
  7165                           ;PS_2.c: 900: while(!READ_PS_2_PIN(0b00100000))
  7166                           
  7167  0F3C  3020               	movlw	32
  7168  0F3D  3199  2178  318E   	fcall	_READ_PS_2_PIN
  7169  0F40  3A00               	xorlw	0
  7170  0F41  1D03               	btfss	3,2
  7171  0F42  2F58               	goto	l6390
  7172                           
  7173                           ;PS_2.c: 901: {
  7174                           ;PS_2.c: 902: timeout++;
  7175  0F43  3001               	movlw	1
  7176  0F44  0024               	movlb	4	; select bank4
  7177  0F45  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7178  0F46  3000               	movlw	0
  7179  0F47  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7180                           
  7181                           ;PS_2.c: 903: if(timeout > 15000)
  7182  0F48  303A               	movlw	58
  7183  0F49  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7184  0F4A  3099               	movlw	153
  7185  0F4B  1903               	skipnz
  7186  0F4C  0231               	subwf	Send_PS2@timeout^(0+512),w
  7187  0F4D  1C03               	skipc
  7188  0F4E  2F3C               	goto	l6388
  7189                           
  7190                           ;PS_2.c: 904: {
  7191                           ;PS_2.c: 905: Clock_TRIS(1);
  7192  0F4F  3001               	movlw	1
  7193  0F50  3198  2091  318E   	fcall	_Clock_TRIS
  7194                           
  7195                           ;PS_2.c: 906: Data_TRIS(1);
  7196  0F53  3001               	movlw	1
  7197  0F54  3198  209C         	fcall	_Data_TRIS
  7198                           
  7199                           ;PS_2.c: 907: return 1;
  7200  0F56  3001               	movlw	1
  7201  0F57  0008               	return
  7202  0F58                     l6390:	
  7203                           
  7204                           ;PS_2.c: 908: }
  7205                           ;PS_2.c: 909: }
  7206                           ;PS_2.c: 910: timeout=0;
  7207  0F58  0024               	movlb	4	; select bank4
  7208  0F59  01B1               	clrf	Send_PS2@timeout^(0+512)
  7209  0F5A  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7210  0F5B                     l6400:	
  7211                           ;PS_2.c: 911: while(READ_PS_2_PIN(0b00100000))
  7212                           
  7213  0F5B  3020               	movlw	32
  7214  0F5C  3199  2178  318E   	fcall	_READ_PS_2_PIN
  7215  0F5F  3800               	iorlw	0
  7216  0F60  1903               	btfsc	3,2
  7217  0F61  2F77               	goto	l6402
  7218                           
  7219                           ;PS_2.c: 912: {
  7220                           ;PS_2.c: 913: timeout++;
  7221  0F62  3001               	movlw	1
  7222  0F63  0024               	movlb	4	; select bank4
  7223  0F64  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7224  0F65  3000               	movlw	0
  7225  0F66  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7226                           
  7227                           ;PS_2.c: 914: if(timeout > 15000)
  7228  0F67  303A               	movlw	58
  7229  0F68  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7230  0F69  3099               	movlw	153
  7231  0F6A  1903               	skipnz
  7232  0F6B  0231               	subwf	Send_PS2@timeout^(0+512),w
  7233  0F6C  1C03               	skipc
  7234  0F6D  2F5B               	goto	l6400
  7235                           
  7236                           ;PS_2.c: 915: {
  7237                           ;PS_2.c: 916: Clock_TRIS(1);
  7238  0F6E  3001               	movlw	1
  7239  0F6F  3198  2091  318E   	fcall	_Clock_TRIS
  7240                           
  7241                           ;PS_2.c: 917: Data_TRIS(1);
  7242  0F72  3001               	movlw	1
  7243  0F73  3198  209C         	fcall	_Data_TRIS
  7244                           
  7245                           ;PS_2.c: 918: return 1;
  7246  0F75  3001               	movlw	1
  7247  0F76  0008               	return
  7248  0F77                     l6402:	
  7249                           
  7250                           ;PS_2.c: 919: }
  7251                           ;PS_2.c: 920: }
  7252                           ;PS_2.c: 922: Data_TRIS(1);
  7253  0F77  3001               	movlw	1
  7254  0F78  3198  209C  318E   	fcall	_Data_TRIS
  7255                           
  7256                           ;PS_2.c: 924: timeout=0;
  7257  0F7B  0024               	movlb	4	; select bank4
  7258  0F7C  01B1               	clrf	Send_PS2@timeout^(0+512)
  7259  0F7D  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7260  0F7E                     l6414:	
  7261                           ;PS_2.c: 925: while(READ_PS_2_PIN(0b00010000))
  7262                           
  7263  0F7E  3010               	movlw	16
  7264  0F7F  3199  2178  318E   	fcall	_READ_PS_2_PIN
  7265  0F82  3800               	iorlw	0
  7266  0F83  1903               	btfsc	3,2
  7267  0F84  2F9A               	goto	l6416
  7268                           
  7269                           ;PS_2.c: 926: {
  7270                           ;PS_2.c: 927: timeout++;
  7271  0F85  3001               	movlw	1
  7272  0F86  0024               	movlb	4	; select bank4
  7273  0F87  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7274  0F88  3000               	movlw	0
  7275  0F89  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7276                           
  7277                           ;PS_2.c: 928: if(timeout > 15000)
  7278  0F8A  303A               	movlw	58
  7279  0F8B  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7280  0F8C  3099               	movlw	153
  7281  0F8D  1903               	skipnz
  7282  0F8E  0231               	subwf	Send_PS2@timeout^(0+512),w
  7283  0F8F  1C03               	skipc
  7284  0F90  2F7E               	goto	l6414
  7285                           
  7286                           ;PS_2.c: 929: {
  7287                           ;PS_2.c: 930: Clock_TRIS(1);
  7288  0F91  3001               	movlw	1
  7289  0F92  3198  2091  318E   	fcall	_Clock_TRIS
  7290                           
  7291                           ;PS_2.c: 931: Data_TRIS(1);
  7292  0F95  3001               	movlw	1
  7293  0F96  3198  209C         	fcall	_Data_TRIS
  7294                           
  7295                           ;PS_2.c: 932: return 1;
  7296  0F98  3001               	movlw	1
  7297  0F99  0008               	return
  7298  0F9A                     l6416:	
  7299                           
  7300                           ;PS_2.c: 933: }
  7301                           ;PS_2.c: 934: }
  7302                           ;PS_2.c: 935: timeout=0;
  7303  0F9A  0024               	movlb	4	; select bank4
  7304  0F9B  01B1               	clrf	Send_PS2@timeout^(0+512)
  7305  0F9C  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7306  0F9D                     l6426:	
  7307                           ;PS_2.c: 936: while(READ_PS_2_PIN(0b00100000))
  7308                           
  7309  0F9D  3020               	movlw	32
  7310  0F9E  3199  2178  318E   	fcall	_READ_PS_2_PIN
  7311  0FA1  3800               	iorlw	0
  7312  0FA2  1903               	btfsc	3,2
  7313  0FA3  2FB9               	goto	l6428
  7314                           
  7315                           ;PS_2.c: 937: {
  7316                           ;PS_2.c: 938: timeout++;
  7317  0FA4  3001               	movlw	1
  7318  0FA5  0024               	movlb	4	; select bank4
  7319  0FA6  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7320  0FA7  3000               	movlw	0
  7321  0FA8  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7322                           
  7323                           ;PS_2.c: 939: if(timeout > 15000)
  7324  0FA9  303A               	movlw	58
  7325  0FAA  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7326  0FAB  3099               	movlw	153
  7327  0FAC  1903               	skipnz
  7328  0FAD  0231               	subwf	Send_PS2@timeout^(0+512),w
  7329  0FAE  1C03               	skipc
  7330  0FAF  2F9D               	goto	l6426
  7331                           
  7332                           ;PS_2.c: 940: {
  7333                           ;PS_2.c: 941: Clock_TRIS(1);
  7334  0FB0  3001               	movlw	1
  7335  0FB1  3198  2091  318E   	fcall	_Clock_TRIS
  7336                           
  7337                           ;PS_2.c: 942: Data_TRIS(1);
  7338  0FB4  3001               	movlw	1
  7339  0FB5  3198  209C         	fcall	_Data_TRIS
  7340                           
  7341                           ;PS_2.c: 943: return 1;
  7342  0FB7  3001               	movlw	1
  7343  0FB8  0008               	return
  7344  0FB9                     l6428:	
  7345                           
  7346                           ;PS_2.c: 944: }
  7347                           ;PS_2.c: 945: }
  7348                           ;PS_2.c: 946: timeout=0;
  7349  0FB9  0024               	movlb	4	; select bank4
  7350  0FBA  01B1               	clrf	Send_PS2@timeout^(0+512)
  7351  0FBB  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7352  0FBC                     l6438:	
  7353                           ;PS_2.c: 947: while(!READ_PS_2_PIN(0b00010000))
  7354                           
  7355  0FBC  3010               	movlw	16
  7356  0FBD  3199  2178  318E   	fcall	_READ_PS_2_PIN
  7357  0FC0  3A00               	xorlw	0
  7358  0FC1  1D03               	btfss	3,2
  7359  0FC2  2FD8               	goto	l6440
  7360                           
  7361                           ;PS_2.c: 948: {
  7362                           ;PS_2.c: 949: timeout++;
  7363  0FC3  3001               	movlw	1
  7364  0FC4  0024               	movlb	4	; select bank4
  7365  0FC5  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7366  0FC6  3000               	movlw	0
  7367  0FC7  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7368                           
  7369                           ;PS_2.c: 950: if(timeout > 15000)
  7370  0FC8  303A               	movlw	58
  7371  0FC9  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7372  0FCA  3099               	movlw	153
  7373  0FCB  1903               	skipnz
  7374  0FCC  0231               	subwf	Send_PS2@timeout^(0+512),w
  7375  0FCD  1C03               	skipc
  7376  0FCE  2FBC               	goto	l6438
  7377                           
  7378                           ;PS_2.c: 951: {
  7379                           ;PS_2.c: 952: Clock_TRIS(1);
  7380  0FCF  3001               	movlw	1
  7381  0FD0  3198  2091  318E   	fcall	_Clock_TRIS
  7382                           
  7383                           ;PS_2.c: 953: Data_TRIS(1);
  7384  0FD3  3001               	movlw	1
  7385  0FD4  3198  209C         	fcall	_Data_TRIS
  7386                           
  7387                           ;PS_2.c: 954: return 1;
  7388  0FD6  3001               	movlw	1
  7389  0FD7  0008               	return
  7390  0FD8                     l6440:	
  7391                           
  7392                           ;PS_2.c: 955: }
  7393                           ;PS_2.c: 956: }
  7394                           ;PS_2.c: 957: timeout=0;
  7395  0FD8  0024               	movlb	4	; select bank4
  7396  0FD9  01B1               	clrf	Send_PS2@timeout^(0+512)
  7397  0FDA  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7398  0FDB                     l6450:	
  7399                           ;PS_2.c: 958: while(!READ_PS_2_PIN(0b00100000))
  7400                           
  7401  0FDB  3020               	movlw	32
  7402  0FDC  3199  2178  318E   	fcall	_READ_PS_2_PIN
  7403  0FDF  3A00               	xorlw	0
  7404  0FE0  1D03               	btfss	3,2
  7405  0FE1  2FF7               	goto	l6452
  7406                           
  7407                           ;PS_2.c: 959: {
  7408                           ;PS_2.c: 960: timeout++;
  7409  0FE2  3001               	movlw	1
  7410  0FE3  0024               	movlb	4	; select bank4
  7411  0FE4  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7412  0FE5  3000               	movlw	0
  7413  0FE6  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7414                           
  7415                           ;PS_2.c: 961: if(timeout > 15000)
  7416  0FE7  303A               	movlw	58
  7417  0FE8  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7418  0FE9  3099               	movlw	153
  7419  0FEA  1903               	skipnz
  7420  0FEB  0231               	subwf	Send_PS2@timeout^(0+512),w
  7421  0FEC  1C03               	skipc
  7422  0FED  2FDB               	goto	l6450
  7423                           
  7424                           ;PS_2.c: 962: {
  7425                           ;PS_2.c: 963: Clock_TRIS(1);
  7426  0FEE  3001               	movlw	1
  7427  0FEF  3198  2091  318E   	fcall	_Clock_TRIS
  7428                           
  7429                           ;PS_2.c: 964: Data_TRIS(1);
  7430  0FF2  3001               	movlw	1
  7431  0FF3  3198  209C         	fcall	_Data_TRIS
  7432                           
  7433                           ;PS_2.c: 965: return 1;
  7434  0FF5  3001               	movlw	1
  7435  0FF6  0008               	return
  7436  0FF7                     l6452:	
  7437                           
  7438                           ;PS_2.c: 966: }
  7439                           ;PS_2.c: 967: }
  7440                           ;PS_2.c: 970: Clock_TRIS(1);
  7441  0FF7  3001               	movlw	1
  7442  0FF8  3198  2091  318E   	fcall	_Clock_TRIS
  7443                           
  7444                           ;PS_2.c: 971: Data_TRIS(1);
  7445  0FFB  3001               	movlw	1
  7446  0FFC  3198  209C         	fcall	_Data_TRIS
  7447                           
  7448                           ;PS_2.c: 972: return 0;
  7449  0FFE  3000               	movlw	0
  7450  0FFF  0008               	return
  7451  1000                     __end_of_Send_PS2:	
  7452                           
  7453                           	psect	text14
  7454  1978                     __ptext14:	
  7455 ;; *************** function _READ_PS_2_PIN *****************
  7456 ;; Defined at:
  7457 ;;		line 217 in file "PS_2.c"
  7458 ;; Parameters:    Size  Location     Type
  7459 ;;  DATA_CLK        1    wreg     unsigned char 
  7460 ;; Auto vars:     Size  Location     Type
  7461 ;;  DATA_CLK        1    0[BANK4 ] unsigned char 
  7462 ;; Return value:  Size  Location     Type
  7463 ;;                  1    wreg      unsigned char 
  7464 ;; Registers used:
  7465 ;;		wreg
  7466 ;; Tracked objects:
  7467 ;;		On entry : 0/0
  7468 ;;		On exit  : 0/0
  7469 ;;		Unchanged: 0/0
  7470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7472 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7474 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7475 ;;Total ram usage:        1 bytes
  7476 ;; Hardware stack levels used:    1
  7477 ;; Hardware stack levels required when called:    7
  7478 ;; This function calls:
  7479 ;;		Nothing
  7480 ;; This function is called by:
  7481 ;;		_Send_PS2
  7482 ;; This function uses a non-reentrant model
  7483 ;;
  7484                           
  7485                           
  7486                           ;psect for function _READ_PS_2_PIN
  7487  1978                     _READ_PS_2_PIN:	
  7488                           
  7489                           ;incstack = 0
  7490                           ; Regs used in _READ_PS_2_PIN: [wreg]
  7491                           ;READ_PS_2_PIN@DATA_CLK stored from wreg
  7492  1978  0024               	movlb	4	; select bank4
  7493  1979  00A0               	movwf	READ_PS_2_PIN@DATA_CLK^(0+512)
  7494                           
  7495                           ;PS_2.c: 219: if(DATA_CLK == 0b00100000)
  7496  197A  0820               	movf	READ_PS_2_PIN@DATA_CLK^(0+512),w
  7497  197B  3A20               	xorlw	32
  7498  197C  1D03               	skipz
  7499  197D  2985               	goto	l647
  7500                           
  7501                           ;PS_2.c: 220: {
  7502                           ;PS_2.c: 222: if((PORTA & 0b00100000) == 0b00100000)
  7503  197E  0020               	movlb	0	; select bank0
  7504  197F  1E8C               	btfss	12,5	;volatile
  7505  1980  2983               	goto	l6138
  7506                           
  7507                           ;PS_2.c: 223: {
  7508                           ;PS_2.c: 224: return (1);
  7509  1981  3001               	movlw	1
  7510                           
  7511                           ;PS_2.c: 225: }
  7512  1982  0008               	return
  7513  1983                     l6138:	
  7514                           
  7515                           ;PS_2.c: 226: else
  7516                           ;PS_2.c: 227: {
  7517                           ;PS_2.c: 228: return 0;
  7518  1983  3000               	movlw	0
  7519                           
  7520                           ;PS_2.c: 229: }
  7521                           ;PS_2.c: 230: }
  7522  1984  0008               	return
  7523  1985                     l647:	
  7524                           
  7525                           ;PS_2.c: 231: else
  7526                           ;PS_2.c: 232: {
  7527                           ;PS_2.c: 234: if((PORTA & 0b00010000) == 0b00010000)
  7528  1985  0020               	movlb	0	; select bank0
  7529  1986  1E0C               	btfss	12,4	;volatile
  7530  1987  298A               	goto	l6148
  7531                           
  7532                           ;PS_2.c: 235: {
  7533                           ;PS_2.c: 236: return (1);
  7534  1988  3001               	movlw	1
  7535                           
  7536                           ;PS_2.c: 237: }
  7537  1989  0008               	return
  7538  198A                     l6148:	
  7539                           
  7540                           ;PS_2.c: 238: else
  7541                           ;PS_2.c: 239: {
  7542                           ;PS_2.c: 240: return 0;
  7543  198A  3000               	movlw	0
  7544  198B  0008               	return
  7545  198C                     __end_of_READ_PS_2_PIN:	
  7546                           
  7547                           	psect	text15
  7548  189C                     __ptext15:	
  7549 ;; *************** function _Data_TRIS *****************
  7550 ;; Defined at:
  7551 ;;		line 132 in file "PS_2.c"
  7552 ;; Parameters:    Size  Location     Type
  7553 ;;  direction       1    wreg     unsigned char 
  7554 ;; Auto vars:     Size  Location     Type
  7555 ;;  direction       1    0[BANK4 ] unsigned char 
  7556 ;; Return value:  Size  Location     Type
  7557 ;;		None               void
  7558 ;; Registers used:
  7559 ;;		wreg, status,2, status,0
  7560 ;; Tracked objects:
  7561 ;;		On entry : 0/0
  7562 ;;		On exit  : 0/0
  7563 ;;		Unchanged: 0/0
  7564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7566 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7568 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7569 ;;Total ram usage:        1 bytes
  7570 ;; Hardware stack levels used:    1
  7571 ;; Hardware stack levels required when called:    7
  7572 ;; This function calls:
  7573 ;;		Nothing
  7574 ;; This function is called by:
  7575 ;;		_PS_2_INIT
  7576 ;;		_Send_PS2
  7577 ;; This function uses a non-reentrant model
  7578 ;;
  7579                           
  7580                           
  7581                           ;psect for function _Data_TRIS
  7582  189C                     _Data_TRIS:	
  7583                           
  7584                           ;incstack = 0
  7585                           ; Regs used in _Data_TRIS: [wreg+status,2+status,0]
  7586                           ;Data_TRIS@direction stored from wreg
  7587  189C  0024               	movlb	4	; select bank4
  7588  189D  00A0               	movwf	Data_TRIS@direction^(0+512)
  7589                           
  7590                           ;PS_2.c: 134: if(direction == 0)
  7591  189E  08A0               	movf	Data_TRIS@direction^(0+512),f
  7592  189F  1D03               	skipz
  7593  18A0  28A4               	goto	l627
  7594                           
  7595                           ;PS_2.c: 135: {
  7596                           ;PS_2.c: 136: TRISAbits.TRISA4 = 0;
  7597  18A1  0021               	movlb	1	; select bank1
  7598  18A2  120C               	bcf	12,4	;volatile
  7599                           
  7600                           ;PS_2.c: 137: }
  7601  18A3  0008               	return
  7602  18A4                     l627:	
  7603                           
  7604                           ;PS_2.c: 138: else
  7605                           ;PS_2.c: 139: {
  7606                           ;PS_2.c: 140: TRISAbits.TRISA4 = 1;
  7607  18A4  0021               	movlb	1	; select bank1
  7608  18A5  160C               	bsf	12,4	;volatile
  7609  18A6  0008               	return
  7610  18A7                     __end_of_Data_TRIS:	
  7611                           
  7612                           	psect	text16
  7613  1891                     __ptext16:	
  7614 ;; *************** function _Clock_TRIS *****************
  7615 ;; Defined at:
  7616 ;;		line 115 in file "PS_2.c"
  7617 ;; Parameters:    Size  Location     Type
  7618 ;;  direction       1    wreg     unsigned char 
  7619 ;; Auto vars:     Size  Location     Type
  7620 ;;  direction       1    0[BANK4 ] unsigned char 
  7621 ;; Return value:  Size  Location     Type
  7622 ;;		None               void
  7623 ;; Registers used:
  7624 ;;		wreg, status,2, status,0
  7625 ;; Tracked objects:
  7626 ;;		On entry : 0/0
  7627 ;;		On exit  : 0/0
  7628 ;;		Unchanged: 0/0
  7629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7631 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7633 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7634 ;;Total ram usage:        1 bytes
  7635 ;; Hardware stack levels used:    1
  7636 ;; Hardware stack levels required when called:    7
  7637 ;; This function calls:
  7638 ;;		Nothing
  7639 ;; This function is called by:
  7640 ;;		_PS_2_INIT
  7641 ;;		_Send_PS2
  7642 ;; This function uses a non-reentrant model
  7643 ;;
  7644                           
  7645                           
  7646                           ;psect for function _Clock_TRIS
  7647  1891                     _Clock_TRIS:	
  7648                           
  7649                           ;incstack = 0
  7650                           ; Regs used in _Clock_TRIS: [wreg+status,2+status,0]
  7651                           ;Clock_TRIS@direction stored from wreg
  7652  1891  0024               	movlb	4	; select bank4
  7653  1892  00A0               	movwf	Clock_TRIS@direction^(0+512)
  7654                           
  7655                           ;PS_2.c: 117: if(direction == 0)
  7656  1893  08A0               	movf	Clock_TRIS@direction^(0+512),f
  7657  1894  1D03               	skipz
  7658  1895  2899               	goto	l622
  7659                           
  7660                           ;PS_2.c: 118: {
  7661                           ;PS_2.c: 119: TRISAbits.TRISA5 = 0;
  7662  1896  0021               	movlb	1	; select bank1
  7663  1897  128C               	bcf	12,5	;volatile
  7664                           
  7665                           ;PS_2.c: 120: }
  7666  1898  0008               	return
  7667  1899                     l622:	
  7668                           
  7669                           ;PS_2.c: 121: else
  7670                           ;PS_2.c: 122: {
  7671                           ;PS_2.c: 123: TRISAbits.TRISA5 = 1;
  7672  1899  0021               	movlb	1	; select bank1
  7673  189A  168C               	bsf	12,5	;volatile
  7674  189B  0008               	return
  7675  189C                     __end_of_Clock_TRIS:	
  7676                           
  7677                           	psect	text17
  7678  1965                     __ptext17:	
  7679 ;; *************** function _PS_2_DISABLE_INTERRUPT *****************
  7680 ;; Defined at:
  7681 ;;		line 173 in file "PS_2.c"
  7682 ;; Parameters:    Size  Location     Type
  7683 ;;  DATA_CLK        1    wreg     unsigned char 
  7684 ;; Auto vars:     Size  Location     Type
  7685 ;;  DATA_CLK        1    1[BANK4 ] unsigned char 
  7686 ;; Return value:  Size  Location     Type
  7687 ;;		None               void
  7688 ;; Registers used:
  7689 ;;		wreg, status,2, status,0
  7690 ;; Tracked objects:
  7691 ;;		On entry : 0/0
  7692 ;;		On exit  : 0/0
  7693 ;;		Unchanged: 0/0
  7694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7696 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7697 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7698 ;;      Totals:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  7699 ;;Total ram usage:        2 bytes
  7700 ;; Hardware stack levels used:    1
  7701 ;; Hardware stack levels required when called:    7
  7702 ;; This function calls:
  7703 ;;		Nothing
  7704 ;; This function is called by:
  7705 ;;		_Init_PS_2_Send
  7706 ;;		_Keyboard_Connected
  7707 ;; This function uses a non-reentrant model
  7708 ;;
  7709                           
  7710                           
  7711                           ;psect for function _PS_2_DISABLE_INTERRUPT
  7712  1965                     _PS_2_DISABLE_INTERRUPT:	
  7713                           
  7714                           ;incstack = 0
  7715                           ; Regs used in _PS_2_DISABLE_INTERRUPT: [wreg+status,2+status,0]
  7716                           ;PS_2_DISABLE_INTERRUPT@DATA_CLK stored from wreg
  7717  1965  0024               	movlb	4	; select bank4
  7718  1966  00A1               	movwf	PS_2_DISABLE_INTERRUPT@DATA_CLK^(0+512)
  7719                           
  7720                           ;PS_2.c: 175: if(DATA_CLK == 0b00100000)
  7721  1967  0821               	movf	PS_2_DISABLE_INTERRUPT@DATA_CLK^(0+512),w
  7722  1968  3A20               	xorlw	32
  7723  1969  1D03               	skipz
  7724  196A  2971               	goto	l6222
  7725                           
  7726                           ;PS_2.c: 176: {
  7727                           ;PS_2.c: 179: IOCAN &= ~0b00100000;
  7728  196B  30DF               	movlw	223
  7729  196C  00A0               	movwf	??_PS_2_DISABLE_INTERRUPT^(0+512)
  7730  196D  0820               	movf	??_PS_2_DISABLE_INTERRUPT^(0+512),w
  7731  196E  0027               	movlb	7	; select bank7
  7732  196F  0592               	andwf	18,f	;volatile
  7733                           
  7734                           ;PS_2.c: 180: }
  7735  1970  0008               	return
  7736  1971                     l6222:	
  7737                           
  7738                           ;PS_2.c: 181: else
  7739                           ;PS_2.c: 182: {
  7740                           ;PS_2.c: 185: IOCAN &= ~0b00010000;
  7741  1971  30EF               	movlw	239
  7742  1972  0024               	movlb	4	; select bank4
  7743  1973  00A0               	movwf	??_PS_2_DISABLE_INTERRUPT^(0+512)
  7744  1974  0820               	movf	??_PS_2_DISABLE_INTERRUPT^(0+512),w
  7745  1975  0027               	movlb	7	; select bank7
  7746  1976  0592               	andwf	18,f	;volatile
  7747  1977  0008               	return
  7748  1978                     __end_of_PS_2_DISABLE_INTERRUPT:	
  7749                           
  7750                           	psect	text18
  7751  18B3                     __ptext18:	
  7752 ;; *************** function _PS_2_ENABLE_INTERRUPT *****************
  7753 ;; Defined at:
  7754 ;;		line 194 in file "PS_2.c"
  7755 ;; Parameters:    Size  Location     Type
  7756 ;;  DATA_CLK        1    wreg     unsigned char 
  7757 ;; Auto vars:     Size  Location     Type
  7758 ;;  DATA_CLK        1    0[BANK4 ] unsigned char 
  7759 ;; Return value:  Size  Location     Type
  7760 ;;		None               void
  7761 ;; Registers used:
  7762 ;;		wreg
  7763 ;; Tracked objects:
  7764 ;;		On entry : 0/0
  7765 ;;		On exit  : 0/0
  7766 ;;		Unchanged: 0/0
  7767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7769 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7771 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7772 ;;Total ram usage:        1 bytes
  7773 ;; Hardware stack levels used:    1
  7774 ;; Hardware stack levels required when called:    7
  7775 ;; This function calls:
  7776 ;;		Nothing
  7777 ;; This function is called by:
  7778 ;;		_main
  7779 ;;		_Keyboard_Connected
  7780 ;; This function uses a non-reentrant model
  7781 ;;
  7782                           
  7783                           
  7784                           ;psect for function _PS_2_ENABLE_INTERRUPT
  7785  18B3                     _PS_2_ENABLE_INTERRUPT:	
  7786                           
  7787                           ;incstack = 0
  7788                           ; Regs used in _PS_2_ENABLE_INTERRUPT: [wreg]
  7789                           ;PS_2_ENABLE_INTERRUPT@DATA_CLK stored from wreg
  7790  18B3  0024               	movlb	4	; select bank4
  7791  18B4  00A0               	movwf	PS_2_ENABLE_INTERRUPT@DATA_CLK^(0+512)
  7792                           
  7793                           ;PS_2.c: 196: if(DATA_CLK == 0b00100000)
  7794  18B5  0820               	movf	PS_2_ENABLE_INTERRUPT@DATA_CLK^(0+512),w
  7795  18B6  3A20               	xorlw	32
  7796  18B7  1D03               	skipz
  7797  18B8  28BC               	goto	l642
  7798                           
  7799                           ;PS_2.c: 197: {
  7800                           ;PS_2.c: 200: IOCAN |= 0b00100000;
  7801  18B9  0027               	movlb	7	; select bank7
  7802  18BA  1692               	bsf	18,5	;volatile
  7803                           
  7804                           ;PS_2.c: 202: }
  7805  18BB  0008               	return
  7806  18BC                     l642:	
  7807                           
  7808                           ;PS_2.c: 203: else
  7809                           ;PS_2.c: 204: {
  7810                           ;PS_2.c: 207: IOCAN |= 0b00010000;
  7811  18BC  0027               	movlb	7	; select bank7
  7812  18BD  1612               	bsf	18,4	;volatile
  7813  18BE  0008               	return
  7814  18BF                     __end_of_PS_2_ENABLE_INTERRUPT:	
  7815                           
  7816                           	psect	text19
  7817  0A48                     __ptext19:	
  7818 ;; *************** function _Init_System *****************
  7819 ;; Defined at:
  7820 ;;		line 103 in file "user.c"
  7821 ;; Parameters:    Size  Location     Type
  7822 ;;		None
  7823 ;; Auto vars:     Size  Location     Type
  7824 ;;  Baud            4   44[BANK4 ] unsigned long 
  7825 ;;  temp            4   40[BANK4 ] unsigned long 
  7826 ;;  Parity          1   48[BANK4 ] unsigned char 
  7827 ;; Return value:  Size  Location     Type
  7828 ;;		None               void
  7829 ;; Registers used:
  7830 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7831 ;; Tracked objects:
  7832 ;;		On entry : 0/0
  7833 ;;		On exit  : 0/0
  7834 ;;		Unchanged: 0/0
  7835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7837 ;;      Locals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0
  7838 ;;      Temps:          0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  7839 ;;      Totals:         0       0       0       0       0      14       0       0       0       0       0       0       
      +0       0
  7840 ;;Total ram usage:       14 bytes
  7841 ;; Hardware stack levels used:    1
  7842 ;; Hardware stack levels required when called:   10
  7843 ;; This function calls:
  7844 ;;		_InitUART
  7845 ;;		_ReadBaud
  7846 ;;		_UARTstringWAIT
  7847 ;;		_delayUS
  7848 ;; This function is called by:
  7849 ;;		_main
  7850 ;; This function uses a non-reentrant model
  7851 ;;
  7852                           
  7853                           
  7854                           ;psect for function _Init_System
  7855  0A48                     _Init_System:	
  7856                           
  7857                           ;user.c: 105: unsigned long temp =0;
  7858                           
  7859                           ;incstack = 0
  7860                           ; Regs used in _Init_System: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7861  0A48  3000               	movlw	0
  7862  0A49  0024               	movlb	4	; select bank4
  7863  0A4A  00CB               	movwf	(Init_System@temp+3)^(0+512)
  7864  0A4B  3000               	movlw	0
  7865  0A4C  00CA               	movwf	(Init_System@temp+2)^(0+512)
  7866  0A4D  3000               	movlw	0
  7867  0A4E  00C9               	movwf	(Init_System@temp+1)^(0+512)
  7868  0A4F  3000               	movlw	0
  7869  0A50  00C8               	movwf	Init_System@temp^(0+512)
  7870                           
  7871                           ;user.c: 106: unsigned long Baud =0;
  7872  0A51  3000               	movlw	0
  7873  0A52  00CF               	movwf	(Init_System@Baud+3)^(0+512)
  7874  0A53  3000               	movlw	0
  7875  0A54  00CE               	movwf	(Init_System@Baud+2)^(0+512)
  7876  0A55  3000               	movlw	0
  7877  0A56  00CD               	movwf	(Init_System@Baud+1)^(0+512)
  7878  0A57  3000               	movlw	0
  7879  0A58  00CC               	movwf	Init_System@Baud^(0+512)
  7880                           
  7881                           ;user.c: 107: unsigned char Parity =0;
  7882  0A59  01D0               	clrf	Init_System@Parity^(0+512)
  7883                           
  7884                           ;user.c: 109: temp = ReadBaud((0x1800 >> 5),0);
  7885  0A5A  30C0               	movlw	192
  7886  0A5B  00B2               	movwf	ReadBaud@row^(0+512)
  7887  0A5C  3000               	movlw	0
  7888  0A5D  00B3               	movwf	(ReadBaud@row^(0+512)+1)
  7889  0A5E  01B4               	clrf	ReadBaud@column^(0+512)
  7890  0A5F  3191  2142  318A   	fcall	_ReadBaud
  7891  0A62  0024               	movlb	4	; select bank4
  7892  0A63  0835               	movf	(?_ReadBaud+3)^(0+512),w
  7893  0A64  00CB               	movwf	(Init_System@temp+3)^(0+512)
  7894  0A65  0834               	movf	(?_ReadBaud+2)^(0+512),w
  7895  0A66  00CA               	movwf	(Init_System@temp+2)^(0+512)
  7896  0A67  0833               	movf	(?_ReadBaud+1)^(0+512),w
  7897  0A68  00C9               	movwf	(Init_System@temp+1)^(0+512)
  7898  0A69  0832               	movf	?_ReadBaud^(0+512),w
  7899  0A6A  00C8               	movwf	Init_System@temp^(0+512)
  7900                           
  7901                           ;user.c: 110: Baud = temp & 0x000FFFFF;
  7902  0A6B  30FF               	movlw	255
  7903  0A6C  0548               	andwf	Init_System@temp^(0+512),w
  7904  0A6D  00CC               	movwf	Init_System@Baud^(0+512)
  7905  0A6E  30FF               	movlw	255
  7906  0A6F  0549               	andwf	(Init_System@temp+1)^(0+512),w
  7907  0A70  00CD               	movwf	(Init_System@Baud+1)^(0+512)
  7908  0A71  300F               	movlw	15
  7909  0A72  054A               	andwf	(Init_System@temp+2)^(0+512),w
  7910  0A73  00CE               	movwf	(Init_System@Baud+2)^(0+512)
  7911  0A74  3000               	movlw	0
  7912  0A75  054B               	andwf	(Init_System@temp+3)^(0+512),w
  7913  0A76  00CF               	movwf	(Init_System@Baud+3)^(0+512)
  7914                           
  7915                           ;user.c: 111: Parity = (unsigned char)((temp & 0x00F00000) >> 20);
  7916  0A77  0848               	movf	Init_System@temp^(0+512),w
  7917  0A78  00C3               	movwf	??_Init_System^(0+512)
  7918  0A79  0849               	movf	(Init_System@temp+1)^(0+512),w
  7919  0A7A  00C4               	movwf	(??_Init_System^(0+512)+1)
  7920  0A7B  084A               	movf	(Init_System@temp+2)^(0+512),w
  7921  0A7C  00C5               	movwf	(??_Init_System^(0+512)+2)
  7922  0A7D  084B               	movf	(Init_System@temp+3)^(0+512),w
  7923  0A7E  00C6               	movwf	(??_Init_System^(0+512)+3)
  7924  0A7F  3014               	movlw	20
  7925  0A80                     u8875:	
  7926  0A80  36C6               	lsrf	(??_Init_System^(0+512)+3),f
  7927  0A81  0CC5               	rrf	(??_Init_System^(0+512)+2),f
  7928  0A82  0CC4               	rrf	(??_Init_System^(0+512)+1),f
  7929  0A83  0CC3               	rrf	??_Init_System^(0+512),f
  7930  0A84  0B89               	decfsz	9,f
  7931  0A85  2A80               	goto	u8875
  7932  0A86  0843               	movf	??_Init_System^(0+512),w
  7933  0A87  390F               	andlw	15
  7934  0A88  00C7               	movwf	(??_Init_System+4)^(0+512)
  7935  0A89  0847               	movf	(??_Init_System+4)^(0+512),w
  7936  0A8A  00D0               	movwf	Init_System@Parity^(0+512)
  7937                           
  7938                           ;user.c: 112: if(Baud <2400 || Baud > 115200)
  7939  0A8B  3000               	movlw	0
  7940  0A8C  024F               	subwf	(Init_System@Baud+3)^(0+512),w
  7941  0A8D  1D03               	skipz
  7942  0A8E  2A99               	goto	u8885
  7943  0A8F  3000               	movlw	0
  7944  0A90  024E               	subwf	(Init_System@Baud+2)^(0+512),w
  7945  0A91  1D03               	skipz
  7946  0A92  2A99               	goto	u8885
  7947  0A93  3009               	movlw	9
  7948  0A94  024D               	subwf	(Init_System@Baud+1)^(0+512),w
  7949  0A95  1D03               	skipz
  7950  0A96  2A99               	goto	u8885
  7951  0A97  3060               	movlw	96
  7952  0A98  024C               	subwf	Init_System@Baud^(0+512),w
  7953  0A99                     u8885:	
  7954  0A99  1C03               	skipc
  7955  0A9A  2AAB               	goto	l6826
  7956  0A9B  3000               	movlw	0
  7957  0A9C  024F               	subwf	(Init_System@Baud+3)^(0+512),w
  7958  0A9D  1D03               	skipz
  7959  0A9E  2AA9               	goto	u8895
  7960  0A9F  3001               	movlw	1
  7961  0AA0  024E               	subwf	(Init_System@Baud+2)^(0+512),w
  7962  0AA1  1D03               	skipz
  7963  0AA2  2AA9               	goto	u8895
  7964  0AA3  30C2               	movlw	194
  7965  0AA4  024D               	subwf	(Init_System@Baud+1)^(0+512),w
  7966  0AA5  1D03               	skipz
  7967  0AA6  2AA9               	goto	u8895
  7968  0AA7  3001               	movlw	1
  7969  0AA8  024C               	subwf	Init_System@Baud^(0+512),w
  7970  0AA9                     u8895:	
  7971  0AA9  1C03               	skipc
  7972  0AAA  2AB4               	goto	l6830
  7973  0AAB                     l6826:	
  7974                           
  7975                           ;user.c: 113: {
  7976                           ;user.c: 115: Baud = 9600;
  7977  0AAB  3000               	movlw	0
  7978  0AAC  00CF               	movwf	(Init_System@Baud+3)^(0+512)
  7979  0AAD  3000               	movlw	0
  7980  0AAE  00CE               	movwf	(Init_System@Baud+2)^(0+512)
  7981  0AAF  3025               	movlw	37
  7982  0AB0  00CD               	movwf	(Init_System@Baud+1)^(0+512)
  7983  0AB1  3080               	movlw	128
  7984  0AB2  00CC               	movwf	Init_System@Baud^(0+512)
  7985                           
  7986                           ;user.c: 116: Parity = 0;
  7987  0AB3  01D0               	clrf	Init_System@Parity^(0+512)
  7988  0AB4                     l6830:	
  7989                           
  7990                           ;user.c: 117: }
  7991                           ;user.c: 118: InitUART(Baud, Parity);
  7992  0AB4  084F               	movf	(Init_System@Baud+3)^(0+512),w
  7993  0AB5  00B1               	movwf	(InitUART@Baud+3)^(0+512)
  7994  0AB6  084E               	movf	(Init_System@Baud+2)^(0+512),w
  7995  0AB7  00B0               	movwf	(InitUART@Baud+2)^(0+512)
  7996  0AB8  084D               	movf	(Init_System@Baud+1)^(0+512),w
  7997  0AB9  00AF               	movwf	(InitUART@Baud+1)^(0+512)
  7998  0ABA  084C               	movf	Init_System@Baud^(0+512),w
  7999  0ABB  00AE               	movwf	InitUART@Baud^(0+512)
  8000  0ABC  0850               	movf	Init_System@Parity^(0+512),w
  8001  0ABD  00C3               	movwf	??_Init_System^(0+512)
  8002  0ABE  0843               	movf	??_Init_System^(0+512),w
  8003  0ABF  00B2               	movwf	InitUART@parity^(0+512)
  8004  0AC0  3194  243D  318A   	fcall	_InitUART
  8005                           
  8006                           ;user.c: 121: delayUS(15000);
  8007  0AC3  3000               	movlw	0
  8008  0AC4  0024               	movlb	4	; select bank4
  8009  0AC5  00A3               	movwf	(delayUS@US+3)^(0+512)
  8010  0AC6  3000               	movlw	0
  8011  0AC7  00A2               	movwf	(delayUS@US+2)^(0+512)
  8012  0AC8  303A               	movlw	58
  8013  0AC9  00A1               	movwf	(delayUS@US+1)^(0+512)
  8014  0ACA  3098               	movlw	152
  8015  0ACB  00A0               	movwf	delayUS@US^(0+512)
  8016  0ACC  319B  23DB  318A   	fcall	_delayUS
  8017                           
  8018                           ;user.c: 122: UARTstringWAIT("\r\nPS/2 Keyboard to RS-232\r\n");
  8019  0ACF  3090               	movlw	low (STR_3| (0+32768))
  8020  0AD0  0024               	movlb	4	; select bank4
  8021  0AD1  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8022  0AD2  3089               	movlw	high (STR_3| (0+32768))
  8023  0AD3  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8024  0AD4  319B  23A8  318A   	fcall	_UARTstringWAIT
  8025                           
  8026                           ;user.c: 123: delayUS(15000);
  8027  0AD7  3000               	movlw	0
  8028  0AD8  0024               	movlb	4	; select bank4
  8029  0AD9  00A3               	movwf	(delayUS@US+3)^(0+512)
  8030  0ADA  3000               	movlw	0
  8031  0ADB  00A2               	movwf	(delayUS@US+2)^(0+512)
  8032  0ADC  303A               	movlw	58
  8033  0ADD  00A1               	movwf	(delayUS@US+1)^(0+512)
  8034  0ADE  3098               	movlw	152
  8035  0ADF  00A0               	movwf	delayUS@US^(0+512)
  8036  0AE0  319B  23DB  318A   	fcall	_delayUS
  8037                           
  8038                           ;user.c: 124: UARTstringWAIT("Firmware Version: ");
  8039  0AE3  3013               	movlw	low (STR_4| (0+32768))
  8040  0AE4  0024               	movlb	4	; select bank4
  8041  0AE5  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8042  0AE6  308A               	movlw	high (STR_4| (0+32768))
  8043  0AE7  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8044  0AE8  319B  23A8  318A   	fcall	_UARTstringWAIT
  8045                           
  8046                           ;user.c: 125: UARTstringWAIT(Version);
  8047  0AEB  3066               	movlw	low (_Version| (0+32768))
  8048  0AEC  0024               	movlb	4	; select bank4
  8049  0AED  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8050  0AEE  3089               	movlw	high (_Version| (0+32768))
  8051  0AEF  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8052  0AF0  319B  23A8  318A   	fcall	_UARTstringWAIT
  8053                           
  8054                           ;user.c: 126: UARTstringWAIT("\r\n");
  8055  0AF3  30FD               	movlw	low ((STR_14+16)| (0+32768))
  8056  0AF4  0024               	movlb	4	; select bank4
  8057  0AF5  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8058  0AF6  3089               	movlw	high ((STR_14+16)| (0+32768))
  8059  0AF7  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8060  0AF8  319B  23A8  318A   	fcall	_UARTstringWAIT
  8061                           
  8062                           ;user.c: 127: delayUS(15000);
  8063  0AFB  3000               	movlw	0
  8064  0AFC  0024               	movlb	4	; select bank4
  8065  0AFD  00A3               	movwf	(delayUS@US+3)^(0+512)
  8066  0AFE  3000               	movlw	0
  8067  0AFF  00A2               	movwf	(delayUS@US+2)^(0+512)
  8068  0B00  303A               	movlw	58
  8069  0B01  00A1               	movwf	(delayUS@US+1)^(0+512)
  8070  0B02  3098               	movlw	152
  8071  0B03  00A0               	movwf	delayUS@US^(0+512)
  8072  0B04  319B  23DB  318A   	fcall	_delayUS
  8073                           
  8074                           ;user.c: 128: UARTstringWAIT("Change BAUD: \"CNT + ALT + DEL\"\r\n");
  8075  0B07  306F               	movlw	low (STR_6| (0+32768))
  8076  0B08  0024               	movlb	4	; select bank4
  8077  0B09  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8078  0B0A  3089               	movlw	high (STR_6| (0+32768))
  8079  0B0B  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8080  0B0C  319B  23A8  318A   	fcall	_UARTstringWAIT
  8081                           
  8082                           ;user.c: 129: delayUS(15000);
  8083  0B0F  3000               	movlw	0
  8084  0B10  0024               	movlb	4	; select bank4
  8085  0B11  00A3               	movwf	(delayUS@US+3)^(0+512)
  8086  0B12  3000               	movlw	0
  8087  0B13  00A2               	movwf	(delayUS@US+2)^(0+512)
  8088  0B14  303A               	movlw	58
  8089  0B15  00A1               	movwf	(delayUS@US+1)^(0+512)
  8090  0B16  3098               	movlw	152
  8091  0B17  00A0               	movwf	delayUS@US^(0+512)
  8092  0B18  319B  23DB  318A   	fcall	_delayUS
  8093                           
  8094                           ;user.c: 130: UARTstringWAIT("\r\n");
  8095  0B1B  30FD               	movlw	low ((STR_14+16)| (0+32768))
  8096  0B1C  0024               	movlb	4	; select bank4
  8097  0B1D  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8098  0B1E  3089               	movlw	high ((STR_14+16)| (0+32768))
  8099  0B1F  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8100  0B20  319B  23A8  318A   	fcall	_UARTstringWAIT
  8101                           
  8102                           ;user.c: 132: if(Parity)
  8103  0B23  0024               	movlb	4	; select bank4
  8104  0B24  0850               	movf	Init_System@Parity^(0+512),w
  8105  0B25  1903               	btfsc	3,2
  8106  0B26  2B48               	goto	l6868
  8107                           
  8108                           ;user.c: 133: {
  8109                           ;user.c: 134: switch (Parity)
  8110  0B27  2B3B               	goto	l6866
  8111  0B28                     l6856:	
  8112                           ;user.c: 135: {
  8113                           ;user.c: 136: case 1:
  8114                           
  8115                           
  8116                           ;user.c: 137: UARTstringWAIT(OddParityMSG);
  8117  0B28  3011               	movlw	low (_OddParityMSG| (0+32768))
  8118  0B29  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8119  0B2A  3089               	movlw	high (_OddParityMSG| (0+32768))
  8120  0B2B  2B4B               	goto	L3
  8121  0B2C                     l6858:	
  8122                           ;user.c: 139: case 2:
  8123                           
  8124                           ;user.c: 138: break;
  8125                           
  8126                           
  8127                           ;user.c: 140: UARTstringWAIT(EvenParityMSG);
  8128  0B2C  30FB               	movlw	low (_EvenParityMSG| (0+32768))
  8129  0B2D  0024               	movlb	4	; select bank4
  8130  0B2E  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8131  0B2F  3088               	movlw	high (_EvenParityMSG| (0+32768))
  8132  0B30  2B4B               	goto	L3
  8133  0B31                     l6860:	
  8134                           ;user.c: 142: case 3:
  8135                           
  8136                           ;user.c: 141: break;
  8137                           
  8138                           
  8139                           ;user.c: 143: UARTstringWAIT(MarkParityMSG);
  8140  0B31  304A               	movlw	low (_MarkParityMSG| (0+32768))
  8141  0B32  0024               	movlb	4	; select bank4
  8142  0B33  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8143  0B34  3089               	movlw	high (_MarkParityMSG| (0+32768))
  8144  0B35  2B4B               	goto	L3
  8145  0B36                     l6862:	
  8146                           ;user.c: 145: default:
  8147                           
  8148                           ;user.c: 144: break;
  8149                           
  8150                           
  8151                           ;user.c: 146: UARTstringWAIT(SpaceParityMSG);
  8152  0B36  303A               	movlw	low (_SpaceParityMSG| (0+32768))
  8153  0B37  0024               	movlb	4	; select bank4
  8154  0B38  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8155  0B39  3089               	movlw	high (_SpaceParityMSG| (0+32768))
  8156  0B3A  2B4B               	goto	L3
  8157  0B3B                     l6866:	
  8158                           ;user.c: 148: }
  8159                           
  8160                           ;user.c: 147: break;
  8161                           
  8162  0B3B  0024               	movlb	4	; select bank4
  8163  0B3C  0850               	movf	Init_System@Parity^(0+512),w
  8164                           
  8165                           ; Switch size 1, requested type "space"
  8166                           ; Number of cases is 3, Range of values is 1 to 3
  8167                           ; switch strategies available:
  8168                           ; Name         Instructions Cycles
  8169                           ; simple_byte           10     6 (average)
  8170                           ; direct_byte           15     9 (fixed)
  8171                           ; jumptable            263     9 (fixed)
  8172                           ;	Chosen strategy is simple_byte
  8173  0B3D  3A01               	xorlw	1	; case 1
  8174  0B3E  1903               	skipnz
  8175  0B3F  2B28               	goto	l6856
  8176  0B40  3A03               	xorlw	3	; case 2
  8177  0B41  1903               	skipnz
  8178  0B42  2B2C               	goto	l6858
  8179  0B43  3A01               	xorlw	1	; case 3
  8180  0B44  1903               	skipnz
  8181  0B45  2B31               	goto	l6860
  8182  0B46  2B36               	goto	l6862
  8183                           
  8184                           ;user.c: 149: }
  8185  0B47  2B4F               	goto	l274
  8186  0B48                     l6868:	
  8187                           
  8188                           ;user.c: 150: else
  8189                           ;user.c: 151: {
  8190                           ;user.c: 152: UARTstringWAIT(NoParityMSG);
  8191  0B48  3026               	movlw	low (_NoParityMSG| (0+32768))
  8192  0B49  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8193  0B4A  3089               	movlw	high (_NoParityMSG| (0+32768))
  8194  0B4B                     L3:	
  8195  0B4B  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8196  0B4C  319B  23A8  318A   	fcall	_UARTstringWAIT
  8197  0B4F                     l274:	
  8198                           
  8199                           ;user.c: 153: }
  8200                           ;user.c: 154: UARTstringWAIT("\r\n");
  8201  0B4F  30FD               	movlw	low ((STR_14+16)| (0+32768))
  8202  0B50  0024               	movlb	4	; select bank4
  8203  0B51  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8204  0B52  3089               	movlw	high ((STR_14+16)| (0+32768))
  8205  0B53  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8206  0B54  319B  23A8  318A   	fcall	_UARTstringWAIT
  8207                           
  8208                           ;user.c: 155: delayUS(15000);
  8209  0B57  3000               	movlw	0
  8210  0B58  0024               	movlb	4	; select bank4
  8211  0B59  00A3               	movwf	(delayUS@US+3)^(0+512)
  8212  0B5A  3000               	movlw	0
  8213  0B5B  00A2               	movwf	(delayUS@US+2)^(0+512)
  8214  0B5C  303A               	movlw	58
  8215  0B5D  00A1               	movwf	(delayUS@US+1)^(0+512)
  8216  0B5E  3098               	movlw	152
  8217  0B5F  00A0               	movwf	delayUS@US^(0+512)
  8218  0B60  319B  23DB         	fcall	_delayUS
  8219                           
  8220                           ;user.c: 156: INTCON |= 0x08;
  8221  0B62  158B               	bsf	11,3	;volatile
  8222                           
  8223                           ;user.c: 157: INTCONbits.GIE = 1;
  8224  0B63  178B               	bsf	11,7	;volatile
  8225  0B64  0008               	return
  8226  0B65                     __end_of_Init_System:	
  8227                           
  8228                           	psect	text20
  8229  1BA8                     __ptext20:	
  8230 ;; *************** function _UARTstringWAIT *****************
  8231 ;; Defined at:
  8232 ;;		line 361 in file "UART.c"
  8233 ;; Parameters:    Size  Location     Type
  8234 ;;  data            2   15[BANK4 ] PTR const unsigned char 
  8235 ;;		 -> STR_20(20), STR_19(3), Process_PS2_ScanCode@buf(60), STR_17(3), 
  8236 ;;		 -> STR_16(3), STR_15(19), STR_14(19), STR_13(3), 
  8237 ;;		 -> STR_12(3), SetBaud@buf(50), STR_10(21), STR_9(3), 
  8238 ;;		 -> STR_8(3), NoParityMSG(20), SpaceParityMSG(16), MarkParityMSG(15), 
  8239 ;;		 -> EvenParityMSG(22), OddParityMSG(21), STR_7(3), STR_6(33), 
  8240 ;;		 -> STR_5(3), Version(9), STR_4(19), STR_3(28), 
  8241 ;;		 -> STR_2(8), STR_1(7), VoltageMSG(13), 
  8242 ;; Auto vars:     Size  Location     Type
  8243 ;;		None
  8244 ;; Return value:  Size  Location     Type
  8245 ;;		None               void
  8246 ;; Registers used:
  8247 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8248 ;; Tracked objects:
  8249 ;;		On entry : 0/0
  8250 ;;		On exit  : 0/0
  8251 ;;		Unchanged: 0/0
  8252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8253 ;;      Params:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  8254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8255 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  8256 ;;      Totals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8257 ;;Total ram usage:        4 bytes
  8258 ;; Hardware stack levels used:    1
  8259 ;; Hardware stack levels required when called:    9
  8260 ;; This function calls:
  8261 ;;		_UARTchar
  8262 ;;		_delayUS
  8263 ;; This function is called by:
  8264 ;;		_main
  8265 ;;		_Init_System
  8266 ;; This function uses a non-reentrant model
  8267 ;;
  8268                           
  8269                           
  8270                           ;psect for function _UARTstringWAIT
  8271  1BA8                     _UARTstringWAIT:	
  8272  1BA8                     l466:	
  8273                           ;incstack = 0
  8274                           ; Regs used in _UARTstringWAIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8275                           ;UART.c: 363: do
  8276                           
  8277                           
  8278                           ;UART.c: 364: {
  8279                           ;UART.c: 365: delayUS(5000);
  8280  1BA8  3000               	movlw	0
  8281  1BA9  0024               	movlb	4	; select bank4
  8282  1BAA  00A3               	movwf	(delayUS@US+3)^(0+512)
  8283  1BAB  3000               	movlw	0
  8284  1BAC  00A2               	movwf	(delayUS@US+2)^(0+512)
  8285  1BAD  3013               	movlw	19
  8286  1BAE  00A1               	movwf	(delayUS@US+1)^(0+512)
  8287  1BAF  3088               	movlw	136
  8288  1BB0  00A0               	movwf	delayUS@US^(0+512)
  8289  1BB1  319B  23DB  319B   	fcall	_delayUS
  8290                           
  8291                           ;UART.c: 366: if(*data != 0)
  8292  1BB4  0024               	movlb	4	; select bank4
  8293  1BB5  082F               	movf	UARTstringWAIT@data^(0+512),w
  8294  1BB6  0084               	movwf	4
  8295  1BB7  0830               	movf	(UARTstringWAIT@data+1)^(0+512),w
  8296  1BB8  0085               	movwf	5
  8297  1BB9  0800               	movf	0,w	;code access
  8298  1BBA  3A00               	xorlw	0
  8299  1BBB  1903               	skipnz
  8300  1BBC  2BCA               	goto	l6526
  8301                           
  8302                           ;UART.c: 367: {
  8303                           ;UART.c: 368: UARTchar(*data, 0, 0);
  8304  1BBD  01A8               	clrf	UARTchar@override^(0+512)
  8305  1BBE  01A9               	clrf	UARTchar@NinethBit_override_data^(0+512)
  8306  1BBF  082F               	movf	UARTstringWAIT@data^(0+512),w
  8307  1BC0  0084               	movwf	4
  8308  1BC1  0830               	movf	(UARTstringWAIT@data+1)^(0+512),w
  8309  1BC2  0085               	movwf	5
  8310  1BC3  0800               	movf	0,w	;code access
  8311  1BC4  3190  207B  319B   	fcall	_UARTchar
  8312  1BC7                     l468:	
  8313                           ;UART.c: 369: while((!TX1STAbits.TRMT));
  8314                           
  8315  1BC7  0023               	movlb	3	; select bank3
  8316  1BC8  1C9E               	btfss	30,1	;volatile
  8317  1BC9  2BC7               	goto	l468
  8318  1BCA                     l6526:	
  8319                           
  8320                           ;UART.c: 370: }
  8321                           ;UART.c: 371: } while( *data++);
  8322  1BCA  0024               	movlb	4	; select bank4
  8323  1BCB  0830               	movf	(UARTstringWAIT@data+1)^(0+512),w
  8324  1BCC  00B2               	movwf	(??_UARTstringWAIT^(0+512)+1)
  8325  1BCD  082F               	movf	UARTstringWAIT@data^(0+512),w
  8326  1BCE  00B1               	movwf	??_UARTstringWAIT^(0+512)
  8327  1BCF  0AAF               	incf	UARTstringWAIT@data^(0+512),f
  8328  1BD0  1903               	skipnz
  8329  1BD1  0AB0               	incf	(UARTstringWAIT@data+1)^(0+512),f
  8330  1BD2  0831               	movf	??_UARTstringWAIT^(0+512),w
  8331  1BD3  0084               	movwf	4
  8332  1BD4  0832               	movf	(??_UARTstringWAIT+1)^(0+512),w
  8333  1BD5  0085               	movwf	5
  8334  1BD6  0800               	movf	0,w	;code access
  8335  1BD7  3800               	iorlw	0
  8336  1BD8  1903               	btfsc	3,2
  8337  1BD9  0008               	return
  8338  1BDA  2BA8               	goto	l466
  8339  1BDB                     __end_of_UARTstringWAIT:	
  8340                           
  8341                           	psect	text21
  8342  1BDB                     __ptext21:	
  8343 ;; *************** function _delayUS *****************
  8344 ;; Defined at:
  8345 ;;		line 49 in file "MISC.c"
  8346 ;; Parameters:    Size  Location     Type
  8347 ;;  US              4    0[BANK4 ] long 
  8348 ;; Auto vars:     Size  Location     Type
  8349 ;;  i               4    5[BANK4 ] long 
  8350 ;;  j               1    9[BANK4 ] unsigned char 
  8351 ;; Return value:  Size  Location     Type
  8352 ;;		None               void
  8353 ;; Registers used:
  8354 ;;		wreg, status,2, status,0
  8355 ;; Tracked objects:
  8356 ;;		On entry : 0/0
  8357 ;;		On exit  : 0/0
  8358 ;;		Unchanged: 0/0
  8359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8360 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8361 ;;      Locals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  8362 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  8363 ;;      Totals:         0       0       0       0       0      10       0       0       0       0       0       0       
      +0       0
  8364 ;;Total ram usage:       10 bytes
  8365 ;; Hardware stack levels used:    1
  8366 ;; Hardware stack levels required when called:    7
  8367 ;; This function calls:
  8368 ;;		Nothing
  8369 ;; This function is called by:
  8370 ;;		_main
  8371 ;;		_Init_System
  8372 ;;		_UARTstringWAIT
  8373 ;;		_Send_PS2
  8374 ;;		_Init_PS_2_Send
  8375 ;;		_InternalADC_Read
  8376 ;;		_Keyboard_Connected
  8377 ;; This function uses a non-reentrant model
  8378 ;;
  8379                           
  8380                           
  8381                           ;psect for function _delayUS
  8382  1BDB                     _delayUS:	
  8383                           
  8384                           ;MISC.c: 51: long i;
  8385                           ;MISC.c: 52: unsigned char j;
  8386                           ;MISC.c: 53: for(i=0;i<US;i+=6)
  8387                           
  8388                           ;incstack = 0
  8389                           ; Regs used in _delayUS: [wreg+status,2+status,0]
  8390  1BDB  3000               	movlw	0
  8391  1BDC  0024               	movlb	4	; select bank4
  8392  1BDD  00A8               	movwf	(delayUS@i+3)^(0+512)
  8393  1BDE  3000               	movlw	0
  8394  1BDF  00A7               	movwf	(delayUS@i+2)^(0+512)
  8395  1BE0  3000               	movlw	0
  8396  1BE1  00A6               	movwf	(delayUS@i+1)^(0+512)
  8397  1BE2  3000               	movlw	0
  8398  1BE3  00A5               	movwf	delayUS@i^(0+512)
  8399  1BE4                     l282:	
  8400  1BE4  0828               	movf	(delayUS@i+3)^(0+512),w
  8401  1BE5  3A80               	xorlw	128
  8402  1BE6  00A4               	movwf	??_delayUS^(0+512)
  8403  1BE7  0823               	movf	(delayUS@US+3)^(0+512),w
  8404  1BE8  3A80               	xorlw	128
  8405  1BE9  0224               	subwf	??_delayUS^(0+512),w
  8406  1BEA  1D03               	skipz
  8407  1BEB  2BF6               	goto	u7773
  8408  1BEC  0822               	movf	(delayUS@US+2)^(0+512),w
  8409  1BED  0227               	subwf	(delayUS@i+2)^(0+512),w
  8410  1BEE  1D03               	skipz
  8411  1BEF  2BF6               	goto	u7773
  8412  1BF0  0821               	movf	(delayUS@US+1)^(0+512),w
  8413  1BF1  0226               	subwf	(delayUS@i+1)^(0+512),w
  8414  1BF2  1D03               	skipz
  8415  1BF3  2BF6               	goto	u7773
  8416  1BF4  0820               	movf	delayUS@US^(0+512),w
  8417  1BF5  0225               	subwf	delayUS@i^(0+512),w
  8418  1BF6                     u7773:	
  8419  1BF6  1803               	btfsc	3,0
  8420  1BF7  0008               	return
  8421                           
  8422                           ;MISC.c: 54: {
  8423                           ;MISC.c: 55: for(j=0;j<32;j++)
  8424  1BF8  01A9               	clrf	delayUS@j^(0+512)
  8425  1BF9  3020               	movlw	32
  8426  1BFA  0229               	subwf	delayUS@j^(0+512),w
  8427  1BFB  1803               	btfsc	3,0
  8428  1BFC  2C07               	goto	l6164
  8429  1BFD                     l284:	
  8430                           
  8431                           ;MISC.c: 56: {
  8432                           ;MISC.c: 57: __nop();
  8433  1BFD  0000               	nop
  8434  1BFE  3001               	movlw	1
  8435  1BFF  0024               	movlb	4	; select bank4
  8436  1C00  00A4               	movwf	??_delayUS^(0+512)
  8437  1C01  0824               	movf	??_delayUS^(0+512),w
  8438  1C02  07A9               	addwf	delayUS@j^(0+512),f
  8439  1C03  3020               	movlw	32
  8440  1C04  0229               	subwf	delayUS@j^(0+512),w
  8441  1C05  1C03               	skipc
  8442  1C06  2BFD               	goto	l284
  8443  1C07                     l6164:	
  8444  1C07  3006               	movlw	6
  8445  1C08  07A5               	addwf	delayUS@i^(0+512),f
  8446  1C09  3000               	movlw	0
  8447  1C0A  3DA6               	addwfc	(delayUS@i+1)^(0+512),f
  8448  1C0B  3000               	movlw	0
  8449  1C0C  3DA7               	addwfc	(delayUS@i+2)^(0+512),f
  8450  1C0D  3000               	movlw	0
  8451  1C0E  3DA8               	addwfc	(delayUS@i+3)^(0+512),f
  8452  1C0F  2BE4               	goto	l282
  8453  1C10                     __end_of_delayUS:	
  8454                           
  8455                           	psect	text22
  8456  107B                     __ptext22:	
  8457 ;; *************** function _UARTchar *****************
  8458 ;; Defined at:
  8459 ;;		line 231 in file "UART.c"
  8460 ;; Parameters:    Size  Location     Type
  8461 ;;  data            1    wreg     unsigned char 
  8462 ;;  override        1    8[BANK4 ] unsigned char 
  8463 ;;  NinethBit_ov    1    9[BANK4 ] unsigned char 
  8464 ;; Auto vars:     Size  Location     Type
  8465 ;;  data            1   14[BANK4 ] unsigned char 
  8466 ;; Return value:  Size  Location     Type
  8467 ;;		None               void
  8468 ;; Registers used:
  8469 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8470 ;; Tracked objects:
  8471 ;;		On entry : 0/0
  8472 ;;		On exit  : 0/0
  8473 ;;		Unchanged: 0/0
  8474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8475 ;;      Params:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  8476 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  8477 ;;      Temps:          0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8478 ;;      Totals:         0       0       0       0       0       7       0       0       0       0       0       0       
      +0       0
  8479 ;;Total ram usage:        7 bytes
  8480 ;; Hardware stack levels used:    1
  8481 ;; Hardware stack levels required when called:    8
  8482 ;; This function calls:
  8483 ;;		_CheckSum_byte
  8484 ;; This function is called by:
  8485 ;;		_UARTstringWAIT
  8486 ;;		_UARTstring
  8487 ;; This function uses a non-reentrant model
  8488 ;;
  8489                           
  8490                           
  8491                           ;psect for function _UARTchar
  8492  107B                     _UARTchar:	
  8493                           
  8494                           ;incstack = 0
  8495                           ; Regs used in _UARTchar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8496                           ;UARTchar@data stored from wreg
  8497  107B  0024               	movlb	4	; select bank4
  8498  107C  00AE               	movwf	UARTchar@data^(0+512)
  8499                           
  8500                           ;UART.c: 233: if(TXSTAbits.TX9)
  8501  107D  0023               	movlb	3	; select bank3
  8502  107E  1F1E               	btfss	30,6	;volatile
  8503  107F  28C4               	goto	l6250
  8504                           
  8505                           ;UART.c: 234: {
  8506                           ;UART.c: 236: if(!override)
  8507  1080  0024               	movlb	4	; select bank4
  8508  1081  08A8               	movf	UARTchar@override^(0+512),f
  8509  1082  1903               	btfsc	3,2
  8510  1083  28AC               	goto	l6246
  8511  1084  28B9               	goto	l6248
  8512  1085                     l6240:	
  8513                           ;UART.c: 240: {
  8514                           ;UART.c: 241: case 1:
  8515                           
  8516                           ;UART.c: 237: {
  8517                           ;UART.c: 239: switch (PARITY)
  8518                           
  8519                           
  8520                           ;UART.c: 242: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 3);
  8521  1085  082E               	movf	UARTchar@data^(0+512),w
  8522  1086  00AA               	movwf	??_UARTchar^(0+512)
  8523  1087  01AB               	clrf	(??_UARTchar^(0+512)+1)
  8524  1088  082A               	movf	??_UARTchar^(0+512),w
  8525  1089  00A0               	movwf	CheckSum_byte@This^(0+512)
  8526  108A  082B               	movf	(??_UARTchar+1)^(0+512),w
  8527  108B  00A1               	movwf	(CheckSum_byte@This+1)^(0+512)
  8528  108C  3003               	movlw	3
  8529  108D  2897               	goto	L6
  8530  108E                     l6242:	
  8531                           ;UART.c: 244: case 2:
  8532                           
  8533                           ;UART.c: 243: break;
  8534                           
  8535                           
  8536                           ;UART.c: 245: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 2);
  8537  108E  0024               	movlb	4	; select bank4
  8538  108F  082E               	movf	UARTchar@data^(0+512),w
  8539  1090  00AA               	movwf	??_UARTchar^(0+512)
  8540  1091  01AB               	clrf	(??_UARTchar^(0+512)+1)
  8541  1092  082A               	movf	??_UARTchar^(0+512),w
  8542  1093  00A0               	movwf	CheckSum_byte@This^(0+512)
  8543  1094  082B               	movf	(??_UARTchar+1)^(0+512),w
  8544  1095  00A1               	movwf	(CheckSum_byte@This+1)^(0+512)
  8545  1096  3002               	movlw	2
  8546  1097                     L6:	
  8547  1097  00AC               	movwf	(??_UARTchar+2)^(0+512)
  8548  1098  082C               	movf	(??_UARTchar+2)^(0+512),w
  8549  1099  00A2               	movwf	CheckSum_byte@Odd_Even^(0+512)
  8550  109A  319A  22E0  3190   	fcall	_CheckSum_byte
  8551  109D  0024               	movlb	4	; select bank4
  8552  109E  00AD               	movwf	(??_UARTchar+3)^(0+512)
  8553  109F  0023               	movlb	3	; select bank3
  8554  10A0  081E               	movf	30,w	;volatile
  8555  10A1  0024               	movlb	4	; select bank4
  8556  10A2  062D               	xorwf	(??_UARTchar+3)^(0+512),w
  8557  10A3  39FE               	andlw	-2
  8558  10A4  062D               	xorwf	(??_UARTchar+3)^(0+512),w
  8559  10A5  28C2               	goto	L5
  8560  10A6                     l432:	
  8561                           ;UART.c: 247: case 3:
  8562                           
  8563                           ;UART.c: 246: break;
  8564                           
  8565                           
  8566                           ;UART.c: 248: TXSTAbits.TX9D = 1;
  8567  10A6  0023               	movlb	3	; select bank3
  8568  10A7  141E               	bsf	30,0	;volatile
  8569                           
  8570                           ;UART.c: 249: break;
  8571  10A8  28C4               	goto	l6250
  8572  10A9                     l433:	
  8573                           ;UART.c: 250: default:
  8574                           
  8575                           
  8576                           ;UART.c: 251: TXSTAbits.TX9D = 0;
  8577  10A9  0023               	movlb	3	; select bank3
  8578  10AA  101E               	bcf	30,0	;volatile
  8579                           
  8580                           ;UART.c: 253: }
  8581                           
  8582                           ;UART.c: 252: break;
  8583  10AB  28C4               	goto	l6250
  8584  10AC                     l6246:	
  8585  10AC  0024               	movlb	4	; select bank4
  8586  10AD  0860               	movf	_PARITY^(0+512),w
  8587                           
  8588                           ; Switch size 1, requested type "space"
  8589                           ; Number of cases is 3, Range of values is 1 to 3
  8590                           ; switch strategies available:
  8591                           ; Name         Instructions Cycles
  8592                           ; simple_byte           10     6 (average)
  8593                           ; direct_byte           15     9 (fixed)
  8594                           ; jumptable            263     9 (fixed)
  8595                           ;	Chosen strategy is simple_byte
  8596  10AE  3A01               	xorlw	1	; case 1
  8597  10AF  1903               	skipnz
  8598  10B0  2885               	goto	l6240
  8599  10B1  3A03               	xorlw	3	; case 2
  8600  10B2  1903               	skipnz
  8601  10B3  288E               	goto	l6242
  8602  10B4  3A01               	xorlw	1	; case 3
  8603  10B5  1903               	skipnz
  8604  10B6  28A6               	goto	l432
  8605  10B7  28A9               	goto	l433
  8606                           
  8607                           ;UART.c: 254: }
  8608  10B8  28C4               	goto	l6250
  8609  10B9                     l6248:	
  8610                           
  8611                           ;UART.c: 255: else
  8612                           ;UART.c: 256: {
  8613                           ;UART.c: 257: TXSTAbits.TX9D = (NinethBit_override_data & 0x01);
  8614  10B9  3001               	movlw	1
  8615  10BA  0529               	andwf	UARTchar@NinethBit_override_data^(0+512),w
  8616  10BB  00AA               	movwf	??_UARTchar^(0+512)
  8617  10BC  0023               	movlb	3	; select bank3
  8618  10BD  081E               	movf	30,w	;volatile
  8619  10BE  0024               	movlb	4	; select bank4
  8620  10BF  062A               	xorwf	??_UARTchar^(0+512),w
  8621  10C0  39FE               	andlw	-2
  8622  10C1  062A               	xorwf	??_UARTchar^(0+512),w
  8623  10C2                     L5:	
  8624  10C2  0023               	movlb	3	; select bank3
  8625  10C3  009E               	movwf	30	;volatile
  8626  10C4                     l6250:	
  8627                           
  8628                           ;UART.c: 258: }
  8629                           ;UART.c: 259: }
  8630                           ;UART.c: 261: if(data == '\n')
  8631  10C4  0024               	movlb	4	; select bank4
  8632  10C5  082E               	movf	UARTchar@data^(0+512),w
  8633  10C6  3A0A               	xorlw	10
  8634  10C7  1D03               	skipz
  8635  10C8  28D5               	goto	l441
  8636                           
  8637                           ;UART.c: 262: {
  8638                           ;UART.c: 263: if(override)
  8639  10C9  0828               	movf	UARTchar@override^(0+512),w
  8640  10CA  1903               	btfsc	3,2
  8641  10CB  0008               	return
  8642  10CC                     l437:	
  8643                           ;UART.c: 264: {
  8644                           ;UART.c: 265: while(!TXSTAbits.TRMT);
  8645                           
  8646  10CC  0023               	movlb	3	; select bank3
  8647  10CD  1C9E               	btfss	30,1	;volatile
  8648  10CE  28CC               	goto	l437
  8649                           
  8650                           ;UART.c: 266: TXREG = data;
  8651  10CF  0024               	movlb	4	; select bank4
  8652  10D0  082E               	movf	UARTchar@data^(0+512),w
  8653  10D1  0023               	movlb	3	; select bank3
  8654  10D2  009A               	movwf	26	;volatile
  8655  10D3  0024               	movlb	4	; select bank4
  8656  10D4  0008               	return
  8657  10D5                     l441:	
  8658                           ;UART.c: 269: else
  8659                           ;UART.c: 270: {
  8660                           ;UART.c: 271: while(!TXSTAbits.TRMT);
  8661                           
  8662                           ;UART.c: 267: }
  8663                           ;UART.c: 268: }
  8664                           
  8665  10D5  0023               	movlb	3	; select bank3
  8666  10D6  1C9E               	btfss	30,1	;volatile
  8667  10D7  28D5               	goto	l441
  8668                           
  8669                           ;UART.c: 272: TXREG = data;
  8670  10D8  0024               	movlb	4	; select bank4
  8671  10D9  082E               	movf	UARTchar@data^(0+512),w
  8672  10DA  0023               	movlb	3	; select bank3
  8673  10DB  009A               	movwf	26	;volatile
  8674  10DC  0024               	movlb	4	; select bank4
  8675  10DD  0008               	return
  8676  10DE                     __end_of_UARTchar:	
  8677                           
  8678                           	psect	text23
  8679  1AE0                     __ptext23:	
  8680 ;; *************** function _CheckSum_byte *****************
  8681 ;; Defined at:
  8682 ;;		line 69 in file "MISC.c"
  8683 ;; Parameters:    Size  Location     Type
  8684 ;;  This            2    0[BANK4 ] unsigned int 
  8685 ;;  Odd_Even        1    2[BANK4 ] unsigned char 
  8686 ;; Auto vars:     Size  Location     Type
  8687 ;;  ThisTemp        2    4[BANK4 ] unsigned int 
  8688 ;;  i               1    7[BANK4 ] unsigned char 
  8689 ;;  Parity          1    6[BANK4 ] unsigned char 
  8690 ;; Return value:  Size  Location     Type
  8691 ;;                  1    wreg      unsigned char 
  8692 ;; Registers used:
  8693 ;;		wreg, status,2, status,0
  8694 ;; Tracked objects:
  8695 ;;		On entry : 0/0
  8696 ;;		On exit  : 0/0
  8697 ;;		Unchanged: 0/0
  8698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8699 ;;      Params:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  8700 ;;      Locals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8701 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  8702 ;;      Totals:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  8703 ;;Total ram usage:        8 bytes
  8704 ;; Hardware stack levels used:    1
  8705 ;; Hardware stack levels required when called:    7
  8706 ;; This function calls:
  8707 ;;		Nothing
  8708 ;; This function is called by:
  8709 ;;		_UARTchar
  8710 ;;		_Send_PS2
  8711 ;; This function uses a non-reentrant model
  8712 ;;
  8713                           
  8714                           
  8715                           ;psect for function _CheckSum_byte
  8716  1AE0                     _CheckSum_byte:	
  8717                           
  8718                           ;MISC.c: 71: char i = 0;
  8719                           
  8720                           ;incstack = 0
  8721                           ; Regs used in _CheckSum_byte: [wreg+status,2+status,0]
  8722  1AE0  0024               	movlb	4	; select bank4
  8723  1AE1  01A7               	clrf	CheckSum_byte@i^(0+512)
  8724                           
  8725                           ;MISC.c: 72: unsigned char Parity = 0;
  8726  1AE2  01A6               	clrf	CheckSum_byte@Parity^(0+512)
  8727                           
  8728                           ;MISC.c: 73: unsigned int ThisTemp = This;
  8729  1AE3  0821               	movf	(CheckSum_byte@This+1)^(0+512),w
  8730  1AE4  01A5               	clrf	(CheckSum_byte@ThisTemp+1)^(0+512)
  8731  1AE5  07A5               	addwf	(CheckSum_byte@ThisTemp+1)^(0+512),f
  8732  1AE6  0820               	movf	CheckSum_byte@This^(0+512),w
  8733  1AE7  01A4               	clrf	CheckSum_byte@ThisTemp^(0+512)
  8734  1AE8  07A4               	addwf	CheckSum_byte@ThisTemp^(0+512),f
  8735                           
  8736                           ;MISC.c: 75: for (i =0; i<8; i++)
  8737  1AE9  01A7               	clrf	CheckSum_byte@i^(0+512)
  8738  1AEA  3008               	movlw	8
  8739  1AEB  0227               	subwf	CheckSum_byte@i^(0+512),w
  8740  1AEC  1803               	btfsc	3,0
  8741  1AED  2B01               	goto	l6180
  8742  1AEE                     l290:	
  8743                           
  8744                           ;MISC.c: 76: {
  8745                           ;MISC.c: 77: if((ThisTemp & 0x01) == 1)
  8746  1AEE  1C24               	btfss	CheckSum_byte@ThisTemp^(0+512),0
  8747  1AEF  2AF4               	goto	l292
  8748                           
  8749                           ;MISC.c: 78: {
  8750                           ;MISC.c: 79: Parity++;
  8751  1AF0  3001               	movlw	1
  8752  1AF1  00A3               	movwf	??_CheckSum_byte^(0+512)
  8753  1AF2  0823               	movf	??_CheckSum_byte^(0+512),w
  8754  1AF3  07A6               	addwf	CheckSum_byte@Parity^(0+512),f
  8755  1AF4                     l292:	
  8756                           
  8757                           ;MISC.c: 80: }
  8758                           ;MISC.c: 81: ThisTemp >>= 1;
  8759  1AF4  3001               	movlw	1
  8760  1AF5                     u7805:	
  8761  1AF5  36A5               	lsrf	(CheckSum_byte@ThisTemp+1)^(0+512),f
  8762  1AF6  0CA4               	rrf	CheckSum_byte@ThisTemp^(0+512),f
  8763  1AF7  0B89               	decfsz	9,f
  8764  1AF8  2AF5               	goto	u7805
  8765  1AF9  3001               	movlw	1
  8766  1AFA  00A3               	movwf	??_CheckSum_byte^(0+512)
  8767  1AFB  0823               	movf	??_CheckSum_byte^(0+512),w
  8768  1AFC  07A7               	addwf	CheckSum_byte@i^(0+512),f
  8769  1AFD  3008               	movlw	8
  8770  1AFE  0227               	subwf	CheckSum_byte@i^(0+512),w
  8771  1AFF  1C03               	skipc
  8772  1B00  2AEE               	goto	l290
  8773  1B01                     l6180:	
  8774                           
  8775                           ;MISC.c: 82: }
  8776                           ;MISC.c: 83: if(Odd_Even == 3)
  8777  1B01  0822               	movf	CheckSum_byte@Odd_Even^(0+512),w
  8778  1B02  3A03               	xorlw	3
  8779  1B03  1D03               	skipz
  8780  1B04  2B0B               	goto	l293
  8781                           
  8782                           ;MISC.c: 84: {
  8783                           ;MISC.c: 85: if(Parity % 2 == 0)
  8784  1B05  1826               	btfsc	CheckSum_byte@Parity^(0+512),0
  8785  1B06  2B09               	goto	l6188
  8786                           
  8787                           ;MISC.c: 86: {
  8788                           ;MISC.c: 87: return 1;
  8789  1B07  3001               	movlw	1
  8790  1B08  0008               	return
  8791  1B09                     l6188:	
  8792                           
  8793                           ;MISC.c: 88: }
  8794                           ;MISC.c: 89: return 0;
  8795  1B09  3000               	movlw	0
  8796                           
  8797                           ;MISC.c: 90: }
  8798  1B0A  0008               	return
  8799  1B0B                     l293:	
  8800                           
  8801                           ;MISC.c: 91: else
  8802                           ;MISC.c: 92: {
  8803                           ;MISC.c: 93: if(Parity % 2 == 1)
  8804  1B0B  1C26               	btfss	CheckSum_byte@Parity^(0+512),0
  8805  1B0C  2B0F               	goto	l6198
  8806                           
  8807                           ;MISC.c: 94: {
  8808                           ;MISC.c: 95: return 1;
  8809  1B0D  3001               	movlw	1
  8810  1B0E  0008               	return
  8811  1B0F                     l6198:	
  8812                           
  8813                           ;MISC.c: 96: }
  8814                           ;MISC.c: 97: return 0;
  8815  1B0F  3000               	movlw	0
  8816  1B10  0008               	return
  8817  1B11                     __end_of_CheckSum_byte:	
  8818                           
  8819                           	psect	text24
  8820  1142                     __ptext24:	
  8821 ;; *************** function _ReadBaud *****************
  8822 ;; Defined at:
  8823 ;;		line 187 in file "FLASH.c"
  8824 ;; Parameters:    Size  Location     Type
  8825 ;;  row             2   18[BANK4 ] unsigned int 
  8826 ;;  column          1   20[BANK4 ] unsigned char 
  8827 ;; Auto vars:     Size  Location     Type
  8828 ;;  temp            4   30[BANK4 ] unsigned long 
  8829 ;; Return value:  Size  Location     Type
  8830 ;;                  4   18[BANK4 ] unsigned long 
  8831 ;; Registers used:
  8832 ;;		wreg, status,2, status,0, pclath, cstack
  8833 ;; Tracked objects:
  8834 ;;		On entry : 0/0
  8835 ;;		On exit  : 0/0
  8836 ;;		Unchanged: 0/0
  8837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8838 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8839 ;;      Locals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8840 ;;      Temps:          0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  8841 ;;      Totals:         0       0       0       0       0      16       0       0       0       0       0       0       
      +0       0
  8842 ;;Total ram usage:       16 bytes
  8843 ;; Hardware stack levels used:    1
  8844 ;; Hardware stack levels required when called:    9
  8845 ;; This function calls:
  8846 ;;		_ReadFlash_4Byte
  8847 ;; This function is called by:
  8848 ;;		_Init_System
  8849 ;; This function uses a non-reentrant model
  8850 ;;
  8851                           
  8852                           
  8853                           ;psect for function _ReadBaud
  8854  1142                     _ReadBaud:	
  8855                           
  8856                           ;FLASH.c: 189: unsigned long temp;
  8857                           ;FLASH.c: 190: temp =(ReadFlash_4Byte(row, column));
  8858                           
  8859                           ;incstack = 0
  8860                           ; Regs used in _ReadBaud: [wreg+status,2+status,0+pclath+cstack]
  8861  1142  0024               	movlb	4	; select bank4
  8862  1143  0833               	movf	(ReadBaud@row+1)^(0+512),w
  8863  1144  01A6               	clrf	(ReadFlash_4Byte@row+1)^(0+512)
  8864  1145  07A6               	addwf	(ReadFlash_4Byte@row+1)^(0+512),f
  8865  1146  0832               	movf	ReadBaud@row^(0+512),w
  8866  1147  01A5               	clrf	ReadFlash_4Byte@row^(0+512)
  8867  1148  07A5               	addwf	ReadFlash_4Byte@row^(0+512),f
  8868  1149  0834               	movf	ReadBaud@column^(0+512),w
  8869  114A  00B6               	movwf	??_ReadBaud^(0+512)
  8870  114B  0836               	movf	??_ReadBaud^(0+512),w
  8871  114C  00A7               	movwf	ReadFlash_4Byte@column^(0+512)
  8872  114D  319D  25F6  3191   	fcall	_ReadFlash_4Byte
  8873  1150  0024               	movlb	4	; select bank4
  8874  1151  0828               	movf	(?_ReadFlash_4Byte+3)^(0+512),w
  8875  1152  00C1               	movwf	(ReadBaud@temp+3)^(0+512)
  8876  1153  0827               	movf	(?_ReadFlash_4Byte+2)^(0+512),w
  8877  1154  00C0               	movwf	(ReadBaud@temp+2)^(0+512)
  8878  1155  0826               	movf	(?_ReadFlash_4Byte+1)^(0+512),w
  8879  1156  00BF               	movwf	(ReadBaud@temp+1)^(0+512)
  8880  1157  0825               	movf	?_ReadFlash_4Byte^(0+512),w
  8881  1158  00BE               	movwf	ReadBaud@temp^(0+512)
  8882                           
  8883                           ;FLASH.c: 191: MEM[1] = (unsigned int)(temp & 0x0003FFF);
  8884  1159  30FF               	movlw	255
  8885  115A  053E               	andwf	ReadBaud@temp^(0+512),w
  8886  115B  0021               	movlb	1	; select bank1
  8887  115C  00E4               	movwf	(_MEM^(0+128)+2)
  8888  115D  303F               	movlw	63
  8889  115E  0024               	movlb	4	; select bank4
  8890  115F  053F               	andwf	(ReadBaud@temp+1)^(0+512),w
  8891  1160  0021               	movlb	1	; select bank1
  8892  1161  00E5               	movwf	((_MEM+1)^(0+128)+2)
  8893                           
  8894                           ;FLASH.c: 192: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
  8895  1162  0024               	movlb	4	; select bank4
  8896  1163  083E               	movf	ReadBaud@temp^(0+512),w
  8897  1164  00B6               	movwf	??_ReadBaud^(0+512)
  8898  1165  083F               	movf	(ReadBaud@temp+1)^(0+512),w
  8899  1166  00B7               	movwf	(??_ReadBaud^(0+512)+1)
  8900  1167  0840               	movf	(ReadBaud@temp+2)^(0+512),w
  8901  1168  00B8               	movwf	(??_ReadBaud^(0+512)+2)
  8902  1169  0841               	movf	(ReadBaud@temp+3)^(0+512),w
  8903  116A  00B9               	movwf	(??_ReadBaud^(0+512)+3)
  8904  116B  300E               	movlw	14
  8905  116C                     u8485:	
  8906  116C  36B9               	lsrf	(??_ReadBaud^(0+512)+3),f
  8907  116D  0CB8               	rrf	(??_ReadBaud^(0+512)+2),f
  8908  116E  0CB7               	rrf	(??_ReadBaud^(0+512)+1),f
  8909  116F  0CB6               	rrf	??_ReadBaud^(0+512),f
  8910  1170  0B89               	decfsz	9,f
  8911  1171  296C               	goto	u8485
  8912  1172  30FF               	movlw	255
  8913  1173  0536               	andwf	??_ReadBaud^(0+512),w
  8914  1174  0021               	movlb	1	; select bank1
  8915  1175  00E2               	movwf	_MEM^(0+128)
  8916  1176  303F               	movlw	63
  8917  1177  0024               	movlb	4	; select bank4
  8918  1178  0537               	andwf	(??_ReadBaud+1)^(0+512),w
  8919  1179  0021               	movlb	1	; select bank1
  8920  117A  00E3               	movwf	(_MEM+1)^(0+128)
  8921                           
  8922                           ;FLASH.c: 193: return (((unsigned long)MEM[0] << 12) + (unsigned long)MEM[1]);
  8923  117B  0864               	movf	(_MEM^(0+128)+2),w
  8924  117C  0024               	movlb	4	; select bank4
  8925  117D  00B6               	movwf	??_ReadBaud^(0+512)
  8926  117E  0021               	movlb	1	; select bank1
  8927  117F  0865               	movf	((_MEM+1)^(0+128)+2),w
  8928  1180  0024               	movlb	4	; select bank4
  8929  1181  00B7               	movwf	(??_ReadBaud^(0+512)+1)
  8930  1182  01B8               	clrf	(??_ReadBaud^(0+512)+2)
  8931  1183  01B9               	clrf	(??_ReadBaud^(0+512)+3)
  8932  1184  0021               	movlb	1	; select bank1
  8933  1185  0862               	movf	_MEM^(0+128),w
  8934  1186  0024               	movlb	4	; select bank4
  8935  1187  00BA               	movwf	(??_ReadBaud+4)^(0+512)
  8936  1188  0021               	movlb	1	; select bank1
  8937  1189  0863               	movf	(_MEM+1)^(0+128),w
  8938  118A  0024               	movlb	4	; select bank4
  8939  118B  00BB               	movwf	((??_ReadBaud+4)^(0+512)+1)
  8940  118C  01BC               	clrf	((??_ReadBaud+4)^(0+512)+2)
  8941  118D  01BD               	clrf	((??_ReadBaud+4)^(0+512)+3)
  8942  118E  300C               	movlw	12
  8943  118F                     u8495:	
  8944  118F  35BA               	lslf	(??_ReadBaud+4)^(0+512),f
  8945  1190  0DBB               	rlf	((??_ReadBaud+4)^(0+512)+1),f
  8946  1191  0DBC               	rlf	((??_ReadBaud+4)^(0+512)+2),f
  8947  1192  0DBD               	rlf	((??_ReadBaud+4)^(0+512)+3),f
  8948  1193  0B89               	decfsz	9,f
  8949  1194  298F               	goto	u8495
  8950  1195  083A               	movf	(??_ReadBaud+4)^(0+512),w
  8951  1196  07B6               	addwf	??_ReadBaud^(0+512),f
  8952  1197  083B               	movf	(??_ReadBaud+5)^(0+512),w
  8953  1198  3DB7               	addwfc	(??_ReadBaud^(0+512)+1),f
  8954  1199  083C               	movf	(??_ReadBaud+6)^(0+512),w
  8955  119A  3DB8               	addwfc	(??_ReadBaud^(0+512)+2),f
  8956  119B  083D               	movf	(??_ReadBaud+7)^(0+512),w
  8957  119C  3DB9               	addwfc	(??_ReadBaud^(0+512)+3),f
  8958  119D  0839               	movf	(??_ReadBaud+3)^(0+512),w
  8959  119E  00B5               	movwf	(?_ReadBaud+3)^(0+512)
  8960  119F  0838               	movf	(??_ReadBaud+2)^(0+512),w
  8961  11A0  00B4               	movwf	(?_ReadBaud+2)^(0+512)
  8962  11A1  0837               	movf	(??_ReadBaud+1)^(0+512),w
  8963  11A2  00B3               	movwf	(?_ReadBaud+1)^(0+512)
  8964  11A3  0836               	movf	??_ReadBaud^(0+512),w
  8965  11A4  00B2               	movwf	?_ReadBaud^(0+512)
  8966  11A5  0008               	return
  8967  11A6                     __end_of_ReadBaud:	
  8968                           
  8969                           	psect	text25
  8970  1DF6                     __ptext25:	
  8971 ;; *************** function _ReadFlash_4Byte *****************
  8972 ;; Defined at:
  8973 ;;		line 62 in file "FLASH.c"
  8974 ;; Parameters:    Size  Location     Type
  8975 ;;  row             2    5[BANK4 ] unsigned int 
  8976 ;;  column          1    7[BANK4 ] unsigned char 
  8977 ;; Auto vars:     Size  Location     Type
  8978 ;;  temp            4   14[BANK4 ] unsigned long 
  8979 ;; Return value:  Size  Location     Type
  8980 ;;                  4    5[BANK4 ] unsigned long 
  8981 ;; Registers used:
  8982 ;;		wreg, status,2, status,0, pclath, cstack
  8983 ;; Tracked objects:
  8984 ;;		On entry : 0/0
  8985 ;;		On exit  : 0/0
  8986 ;;		Unchanged: 0/0
  8987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8988 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8989 ;;      Locals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8990 ;;      Temps:          0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  8991 ;;      Totals:         0       0       0       0       0      13       0       0       0       0       0       0       
      +0       0
  8992 ;;Total ram usage:       13 bytes
  8993 ;; Hardware stack levels used:    1
  8994 ;; Hardware stack levels required when called:    8
  8995 ;; This function calls:
  8996 ;;		_ReadFlash_2Byte
  8997 ;; This function is called by:
  8998 ;;		_ReadBaud
  8999 ;; This function uses a non-reentrant model
  9000 ;;
  9001                           
  9002                           
  9003                           ;psect for function _ReadFlash_4Byte
  9004  1DF6                     _ReadFlash_4Byte:	
  9005                           
  9006                           ;FLASH.c: 64: unsigned long temp =0;
  9007                           
  9008                           ;incstack = 0
  9009                           ; Regs used in _ReadFlash_4Byte: [wreg+status,2+status,0+pclath+cstack]
  9010  1DF6  3000               	movlw	0
  9011  1DF7  0024               	movlb	4	; select bank4
  9012  1DF8  00B1               	movwf	(ReadFlash_4Byte@temp+3)^(0+512)
  9013  1DF9  3000               	movlw	0
  9014  1DFA  00B0               	movwf	(ReadFlash_4Byte@temp+2)^(0+512)
  9015  1DFB  3000               	movlw	0
  9016  1DFC  00AF               	movwf	(ReadFlash_4Byte@temp+1)^(0+512)
  9017  1DFD  3000               	movlw	0
  9018  1DFE  00AE               	movwf	ReadFlash_4Byte@temp^(0+512)
  9019                           
  9020                           ;FLASH.c: 65: temp = ((unsigned long)ReadFlash_2Byte(row, column) << 16);
  9021  1DFF  0826               	movf	(ReadFlash_4Byte@row+1)^(0+512),w
  9022  1E00  01A1               	clrf	(ReadFlash_2Byte@row+1)^(0+512)
  9023  1E01  07A1               	addwf	(ReadFlash_2Byte@row+1)^(0+512),f
  9024  1E02  0825               	movf	ReadFlash_4Byte@row^(0+512),w
  9025  1E03  01A0               	clrf	ReadFlash_2Byte@row^(0+512)
  9026  1E04  07A0               	addwf	ReadFlash_2Byte@row^(0+512),f
  9027  1E05  0827               	movf	ReadFlash_4Byte@column^(0+512),w
  9028  1E06  00A9               	movwf	??_ReadFlash_4Byte^(0+512)
  9029  1E07  0829               	movf	??_ReadFlash_4Byte^(0+512),w
  9030  1E08  00A2               	movwf	ReadFlash_2Byte@column^(0+512)
  9031  1E09  319B  2343  319D   	fcall	_ReadFlash_2Byte
  9032  1E0C  0024               	movlb	4	; select bank4
  9033  1E0D  0820               	movf	?_ReadFlash_2Byte^(0+512),w
  9034  1E0E  00AA               	movwf	(??_ReadFlash_4Byte+1)^(0+512)
  9035  1E0F  0821               	movf	(?_ReadFlash_2Byte+1)^(0+512),w
  9036  1E10  00AB               	movwf	((??_ReadFlash_4Byte+1)^(0+512)+1)
  9037  1E11  01AC               	clrf	((??_ReadFlash_4Byte+1)^(0+512)+2)
  9038  1E12  01AD               	clrf	((??_ReadFlash_4Byte+1)^(0+512)+3)
  9039  1E13  3010               	movlw	16
  9040  1E14                     u8265:	
  9041  1E14  35AA               	lslf	(??_ReadFlash_4Byte+1)^(0+512),f
  9042  1E15  0DAB               	rlf	((??_ReadFlash_4Byte+1)^(0+512)+1),f
  9043  1E16  0DAC               	rlf	((??_ReadFlash_4Byte+1)^(0+512)+2),f
  9044  1E17  0DAD               	rlf	((??_ReadFlash_4Byte+1)^(0+512)+3),f
  9045  1E18  0B89               	decfsz	9,f
  9046  1E19  2E14               	goto	u8265
  9047  1E1A  082D               	movf	(??_ReadFlash_4Byte+4)^(0+512),w
  9048  1E1B  00B1               	movwf	(ReadFlash_4Byte@temp+3)^(0+512)
  9049  1E1C  082C               	movf	(??_ReadFlash_4Byte+3)^(0+512),w
  9050  1E1D  00B0               	movwf	(ReadFlash_4Byte@temp+2)^(0+512)
  9051  1E1E  082B               	movf	(??_ReadFlash_4Byte+2)^(0+512),w
  9052  1E1F  00AF               	movwf	(ReadFlash_4Byte@temp+1)^(0+512)
  9053  1E20  082A               	movf	(??_ReadFlash_4Byte+1)^(0+512),w
  9054  1E21  00AE               	movwf	ReadFlash_4Byte@temp^(0+512)
  9055                           
  9056                           ;FLASH.c: 66: temp |= ((unsigned long)ReadFlash_2Byte(row, (column + 1)));
  9057  1E22  0826               	movf	(ReadFlash_4Byte@row+1)^(0+512),w
  9058  1E23  01A1               	clrf	(ReadFlash_2Byte@row+1)^(0+512)
  9059  1E24  07A1               	addwf	(ReadFlash_2Byte@row+1)^(0+512),f
  9060  1E25  0825               	movf	ReadFlash_4Byte@row^(0+512),w
  9061  1E26  01A0               	clrf	ReadFlash_2Byte@row^(0+512)
  9062  1E27  07A0               	addwf	ReadFlash_2Byte@row^(0+512),f
  9063  1E28  0827               	movf	ReadFlash_4Byte@column^(0+512),w
  9064  1E29  3E01               	addlw	1
  9065  1E2A  00A9               	movwf	??_ReadFlash_4Byte^(0+512)
  9066  1E2B  0829               	movf	??_ReadFlash_4Byte^(0+512),w
  9067  1E2C  00A2               	movwf	ReadFlash_2Byte@column^(0+512)
  9068  1E2D  319B  2343         	fcall	_ReadFlash_2Byte
  9069  1E2F  0024               	movlb	4	; select bank4
  9070  1E30  0820               	movf	?_ReadFlash_2Byte^(0+512),w
  9071  1E31  00AA               	movwf	(??_ReadFlash_4Byte+1)^(0+512)
  9072  1E32  0821               	movf	(?_ReadFlash_2Byte+1)^(0+512),w
  9073  1E33  00AB               	movwf	((??_ReadFlash_4Byte+1)^(0+512)+1)
  9074  1E34  01AC               	clrf	((??_ReadFlash_4Byte+1)^(0+512)+2)
  9075  1E35  01AD               	clrf	((??_ReadFlash_4Byte+1)^(0+512)+3)
  9076  1E36  082A               	movf	(??_ReadFlash_4Byte+1)^(0+512),w
  9077  1E37  04AE               	iorwf	ReadFlash_4Byte@temp^(0+512),f
  9078  1E38  082B               	movf	(??_ReadFlash_4Byte+2)^(0+512),w
  9079  1E39  04AF               	iorwf	(ReadFlash_4Byte@temp+1)^(0+512),f
  9080  1E3A  082C               	movf	(??_ReadFlash_4Byte+3)^(0+512),w
  9081  1E3B  04B0               	iorwf	(ReadFlash_4Byte@temp+2)^(0+512),f
  9082  1E3C  082D               	movf	(??_ReadFlash_4Byte+4)^(0+512),w
  9083  1E3D  04B1               	iorwf	(ReadFlash_4Byte@temp+3)^(0+512),f
  9084                           
  9085                           ;FLASH.c: 67: return temp;
  9086  1E3E  0831               	movf	(ReadFlash_4Byte@temp+3)^(0+512),w
  9087  1E3F  00A8               	movwf	(?_ReadFlash_4Byte+3)^(0+512)
  9088  1E40  0830               	movf	(ReadFlash_4Byte@temp+2)^(0+512),w
  9089  1E41  00A7               	movwf	(?_ReadFlash_4Byte+2)^(0+512)
  9090  1E42  082F               	movf	(ReadFlash_4Byte@temp+1)^(0+512),w
  9091  1E43  00A6               	movwf	(?_ReadFlash_4Byte+1)^(0+512)
  9092  1E44  082E               	movf	ReadFlash_4Byte@temp^(0+512),w
  9093  1E45  00A5               	movwf	?_ReadFlash_4Byte^(0+512)
  9094  1E46  0008               	return
  9095  1E47                     __end_of_ReadFlash_4Byte:	
  9096                           
  9097                           	psect	text26
  9098  1B43                     __ptext26:	
  9099 ;; *************** function _ReadFlash_2Byte *****************
  9100 ;; Defined at:
  9101 ;;		line 43 in file "FLASH.c"
  9102 ;; Parameters:    Size  Location     Type
  9103 ;;  row             2    0[BANK4 ] unsigned int 
  9104 ;;  column          1    2[BANK4 ] unsigned char 
  9105 ;; Auto vars:     Size  Location     Type
  9106 ;;		None
  9107 ;; Return value:  Size  Location     Type
  9108 ;;                  2    0[BANK4 ] unsigned int 
  9109 ;; Registers used:
  9110 ;;		wreg, status,2, status,0
  9111 ;; Tracked objects:
  9112 ;;		On entry : 0/0
  9113 ;;		On exit  : 0/0
  9114 ;;		Unchanged: 0/0
  9115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9116 ;;      Params:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  9117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9118 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  9119 ;;      Totals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  9120 ;;Total ram usage:        5 bytes
  9121 ;; Hardware stack levels used:    1
  9122 ;; Hardware stack levels required when called:    7
  9123 ;; This function calls:
  9124 ;;		Nothing
  9125 ;; This function is called by:
  9126 ;;		_ReadFlash_4Byte
  9127 ;; This function uses a non-reentrant model
  9128 ;;
  9129                           
  9130                           
  9131                           ;psect for function _ReadFlash_2Byte
  9132  1B43                     _ReadFlash_2Byte:	
  9133                           
  9134                           ;FLASH.c: 45: PMCON1 &= ~0b01000000;
  9135                           
  9136                           ;incstack = 0
  9137                           ; Regs used in _ReadFlash_2Byte: [wreg+status,2+status,0]
  9138  1B43  30BF               	movlw	191
  9139  1B44  0024               	movlb	4	; select bank4
  9140  1B45  00A3               	movwf	??_ReadFlash_2Byte^(0+512)
  9141  1B46  0823               	movf	??_ReadFlash_2Byte^(0+512),w
  9142  1B47  0023               	movlb	3	; select bank3
  9143  1B48  0595               	andwf	21,f	;volatile
  9144                           
  9145                           ;FLASH.c: 46: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
  9146  1B49  0024               	movlb	4	; select bank4
  9147  1B4A  0821               	movf	(ReadFlash_2Byte@row+1)^(0+512),w
  9148  1B4B  00A4               	movwf	(??_ReadFlash_2Byte^(0+512)+1)
  9149  1B4C  0820               	movf	ReadFlash_2Byte@row^(0+512),w
  9150  1B4D  00A3               	movwf	??_ReadFlash_2Byte^(0+512)
  9151  1B4E  36A4               	lsrf	(??_ReadFlash_2Byte^(0+512)+1),f
  9152  1B4F  0CA3               	rrf	??_ReadFlash_2Byte^(0+512),f
  9153  1B50  36A4               	lsrf	(??_ReadFlash_2Byte^(0+512)+1),f
  9154  1B51  0CA3               	rrf	??_ReadFlash_2Byte^(0+512),f
  9155  1B52  36A4               	lsrf	(??_ReadFlash_2Byte^(0+512)+1),f
  9156  1B53  0CA3               	rrf	??_ReadFlash_2Byte^(0+512),f
  9157  1B54  0823               	movf	??_ReadFlash_2Byte^(0+512),w
  9158  1B55  397F               	andlw	127
  9159  1B56  0023               	movlb	3	; select bank3
  9160  1B57  0092               	movwf	18	;volatile
  9161                           
  9162                           ;FLASH.c: 47: PMADRL = (unsigned char)(((row & 0x007) << 5) + column);
  9163  1B58  0024               	movlb	4	; select bank4
  9164  1B59  0820               	movf	ReadFlash_2Byte@row^(0+512),w
  9165  1B5A  3907               	andlw	7
  9166  1B5B  00A3               	movwf	??_ReadFlash_2Byte^(0+512)
  9167  1B5C  3004               	movlw	4
  9168  1B5D                     u7875:	
  9169  1B5D  35A3               	lslf	??_ReadFlash_2Byte^(0+512),f
  9170  1B5E  3EFF               	addlw	-1
  9171  1B5F  1D03               	skipz
  9172  1B60  2B5D               	goto	u7875
  9173  1B61  3523               	lslf	??_ReadFlash_2Byte^(0+512),w
  9174  1B62  0722               	addwf	ReadFlash_2Byte@column^(0+512),w
  9175  1B63  0023               	movlb	3	; select bank3
  9176  1B64  0091               	movwf	17	;volatile
  9177                           
  9178                           ;FLASH.c: 48: PMCON1 |= 0b00000001;
  9179  1B65  1415               	bsf	21,0	;volatile
  9180  1B66                     l943:	
  9181                           ;FLASH.c: 49: while(PMCON1 & 0b00000001);
  9182                           
  9183  1B66  1815               	btfsc	21,0	;volatile
  9184  1B67  2B66               	goto	l943
  9185                           
  9186                           ;FLASH.c: 50: __nop();
  9187  1B68  0000               	nop
  9188                           
  9189                           ;FLASH.c: 51: __nop();
  9190  1B69  0000               	nop
  9191                           
  9192                           ;FLASH.c: 52: return (PMDATL | (PMDATH << 8));
  9193  1B6A  0023               	movlb	3	; select bank3
  9194  1B6B  0814               	movf	20,w	;volatile
  9195  1B6C  0024               	movlb	4	; select bank4
  9196  1B6D  01A1               	clrf	(?_ReadFlash_2Byte+1)^(0+512)
  9197  1B6E  07A1               	addwf	(?_ReadFlash_2Byte+1)^(0+512),f
  9198  1B6F  0023               	movlb	3	; select bank3
  9199  1B70  0813               	movf	19,w	;volatile
  9200  1B71  0024               	movlb	4	; select bank4
  9201  1B72  01A0               	clrf	?_ReadFlash_2Byte^(0+512)
  9202  1B73  07A0               	addwf	?_ReadFlash_2Byte^(0+512),f
  9203  1B74  0008               	return
  9204  1B75                     __end_of_ReadFlash_2Byte:	
  9205                           
  9206                           	psect	text27
  9207  143D                     __ptext27:	
  9208 ;; *************** function _InitUART *****************
  9209 ;; Defined at:
  9210 ;;		line 75 in file "UART.c"
  9211 ;; Parameters:    Size  Location     Type
  9212 ;;  Baud            4   14[BANK4 ] unsigned long 
  9213 ;;  parity          1   18[BANK4 ] unsigned char 
  9214 ;; Auto vars:     Size  Location     Type
  9215 ;;  temp            4   31[BANK4 ] unsigned long 
  9216 ;;  spbrg           2   27[BANK4 ] unsigned int 
  9217 ;;  config          1   30[BANK4 ] unsigned char 
  9218 ;;  baudconfig      1   29[BANK4 ] unsigned char 
  9219 ;; Return value:  Size  Location     Type
  9220 ;;		None               void
  9221 ;; Registers used:
  9222 ;;		wreg, status,2, status,0, pclath, cstack
  9223 ;; Tracked objects:
  9224 ;;		On entry : 0/0
  9225 ;;		On exit  : 0/0
  9226 ;;		Unchanged: 0/0
  9227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9228 ;;      Params:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  9229 ;;      Locals:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  9230 ;;      Temps:          0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  9231 ;;      Totals:         0       0       0       0       0      21       0       0       0       0       0       0       
      +0       0
  9232 ;;Total ram usage:       21 bytes
  9233 ;; Hardware stack levels used:    1
  9234 ;; Hardware stack levels required when called:    8
  9235 ;; This function calls:
  9236 ;;		_CloseUSART
  9237 ;;		_OpenUSART
  9238 ;;		_ReadUSART
  9239 ;;		___lldiv
  9240 ;;		_baudUSART
  9241 ;; This function is called by:
  9242 ;;		_Init_System
  9243 ;; This function uses a non-reentrant model
  9244 ;;
  9245                           
  9246                           
  9247                           ;psect for function _InitUART
  9248  143D                     _InitUART:	
  9249                           
  9250                           ;UART.c: 77: unsigned long temp;
  9251                           ;UART.c: 78: unsigned char config;
  9252                           ;UART.c: 79: unsigned int spbrg;
  9253                           ;UART.c: 80: unsigned char baudconfig;
  9254                           ;UART.c: 90: LATC |= 0b00000100;
  9255                           
  9256                           ;incstack = 0
  9257                           ; Regs used in _InitUART: [wreg+status,2+status,0+pclath+cstack]
  9258  143D  0022               	movlb	2	; select bank2
  9259  143E  150E               	bsf	14,2	;volatile
  9260                           
  9261                           ;UART.c: 91: PPSLOCK =0;
  9262  143F  003C               	movlb	28	; select bank28
  9263  1440  018F               	clrf	15	;volatile
  9264                           
  9265                           ;UART.c: 92: RC2PPS = 0b00000000;
  9266  1441  003D               	movlb	29	; select bank29
  9267  1442  01A2               	clrf	34	;volatile
  9268                           
  9269                           ;UART.c: 93: PPSLOCK =1;
  9270  1443  3001               	movlw	1
  9271  1444  003C               	movlb	28	; select bank28
  9272  1445  008F               	movwf	15	;volatile
  9273                           
  9274                           ;UART.c: 95: CloseUSART();
  9275  1446  3198  20CC  3194   	fcall	_CloseUSART
  9276                           
  9277                           ;UART.c: 96: config =0;
  9278  1449  0024               	movlb	4	; select bank4
  9279  144A  01BE               	clrf	InitUART@config^(0+512)
  9280                           
  9281                           ;UART.c: 97: baudconfig =0;
  9282  144B  01BD               	clrf	InitUART@baudconfig^(0+512)
  9283                           
  9284                           ;UART.c: 102: config |= 0b00001000;
  9285  144C  15BE               	bsf	InitUART@config^(0+512),3
  9286                           
  9287                           ;UART.c: 103: config |= 0b00010000;
  9288  144D  163E               	bsf	InitUART@config^(0+512),4
  9289                           
  9290                           ;UART.c: 104: PARITY = parity;
  9291  144E  0832               	movf	InitUART@parity^(0+512),w
  9292  144F  00B3               	movwf	??_InitUART^(0+512)
  9293  1450  0833               	movf	??_InitUART^(0+512),w
  9294  1451  00E0               	movwf	_PARITY^(0+512)
  9295                           
  9296                           ;UART.c: 105: BAUD = Baud;
  9297  1452  0831               	movf	(InitUART@Baud+3)^(0+512),w
  9298  1453  00E4               	movwf	(_BAUD+3)^(0+512)
  9299  1454  0830               	movf	(InitUART@Baud+2)^(0+512),w
  9300  1455  00E3               	movwf	(_BAUD+2)^(0+512)
  9301  1456  082F               	movf	(InitUART@Baud+1)^(0+512),w
  9302  1457  00E2               	movwf	(_BAUD+1)^(0+512)
  9303  1458  082E               	movf	InitUART@Baud^(0+512),w
  9304  1459  00E1               	movwf	_BAUD^(0+512)
  9305                           
  9306                           ;UART.c: 106: if(parity)
  9307  145A  0832               	movf	InitUART@parity^(0+512),w
  9308  145B  1903               	btfsc	3,2
  9309  145C  2C5F               	goto	l6562
  9310                           
  9311                           ;UART.c: 107: {
  9312                           ;UART.c: 108: config |= 0b00000010;
  9313  145D  14BE               	bsf	InitUART@config^(0+512),1
  9314                           
  9315                           ;UART.c: 109: }
  9316  145E  2C63               	goto	l6564
  9317  145F                     l6562:	
  9318                           
  9319                           ;UART.c: 110: else
  9320                           ;UART.c: 111: {
  9321                           ;UART.c: 112: config &= ~0b00000010;
  9322  145F  30FD               	movlw	253
  9323  1460  00B3               	movwf	??_InitUART^(0+512)
  9324  1461  0833               	movf	??_InitUART^(0+512),w
  9325  1462  05BE               	andwf	InitUART@config^(0+512),f
  9326  1463                     l6564:	
  9327                           
  9328                           ;UART.c: 113: }
  9329                           ;UART.c: 114: baudconfig |= 0b00001000;
  9330  1463  15BD               	bsf	InitUART@baudconfig^(0+512),3
  9331                           
  9332                           ;UART.c: 117: temp = (32000000L / Baud) - 1;
  9333  1464  0831               	movf	(InitUART@Baud+3)^(0+512),w
  9334  1465  00A3               	movwf	(___lldiv@divisor+3)^(0+512)
  9335  1466  0830               	movf	(InitUART@Baud+2)^(0+512),w
  9336  1467  00A2               	movwf	(___lldiv@divisor+2)^(0+512)
  9337  1468  082F               	movf	(InitUART@Baud+1)^(0+512),w
  9338  1469  00A1               	movwf	(___lldiv@divisor+1)^(0+512)
  9339  146A  082E               	movf	InitUART@Baud^(0+512),w
  9340  146B  00A0               	movwf	___lldiv@divisor^(0+512)
  9341  146C  3001               	movlw	1
  9342  146D  00A7               	movwf	(___lldiv@dividend+3)^(0+512)
  9343  146E  30E8               	movlw	232
  9344  146F  00A6               	movwf	(___lldiv@dividend+2)^(0+512)
  9345  1470  3048               	movlw	72
  9346  1471  00A5               	movwf	(___lldiv@dividend+1)^(0+512)
  9347  1472  3000               	movlw	0
  9348  1473  00A4               	movwf	___lldiv@dividend^(0+512)
  9349  1474  319E  2699  3194   	fcall	___lldiv
  9350  1477  30FF               	movlw	255
  9351  1478  0024               	movlb	4	; select bank4
  9352  1479  0720               	addwf	?___lldiv^(0+512),w
  9353  147A  00BF               	movwf	InitUART@temp^(0+512)
  9354  147B  30FF               	movlw	255
  9355  147C  3D21               	addwfc	(?___lldiv+1)^(0+512),w
  9356  147D  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9357  147E  30FF               	movlw	255
  9358  147F  3D22               	addwfc	(?___lldiv+2)^(0+512),w
  9359  1480  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9360  1481  30FF               	movlw	255
  9361  1482  3D23               	addwfc	(?___lldiv+3)^(0+512),w
  9362  1483  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9363                           
  9364                           ;UART.c: 118: temp = (temp >> 2) - 1;
  9365  1484  30FF               	movlw	255
  9366  1485  00B3               	movwf	??_InitUART^(0+512)
  9367  1486  30FF               	movlw	255
  9368  1487  00B4               	movwf	(??_InitUART^(0+512)+1)
  9369  1488  30FF               	movlw	255
  9370  1489  00B5               	movwf	(??_InitUART^(0+512)+2)
  9371  148A  30FF               	movlw	255
  9372  148B  00B6               	movwf	(??_InitUART^(0+512)+3)
  9373  148C  083F               	movf	InitUART@temp^(0+512),w
  9374  148D  00B7               	movwf	(??_InitUART+4)^(0+512)
  9375  148E  0840               	movf	(InitUART@temp+1)^(0+512),w
  9376  148F  00B8               	movwf	((??_InitUART+4)^(0+512)+1)
  9377  1490  0841               	movf	(InitUART@temp+2)^(0+512),w
  9378  1491  00B9               	movwf	((??_InitUART+4)^(0+512)+2)
  9379  1492  0842               	movf	(InitUART@temp+3)^(0+512),w
  9380  1493  00BA               	movwf	((??_InitUART+4)^(0+512)+3)
  9381  1494  3002               	movlw	2
  9382  1495                     u8515:	
  9383  1495  36BA               	lsrf	((??_InitUART+4)^(0+512)+3),f
  9384  1496  0CB9               	rrf	((??_InitUART+4)^(0+512)+2),f
  9385  1497  0CB8               	rrf	((??_InitUART+4)^(0+512)+1),f
  9386  1498  0CB7               	rrf	(??_InitUART+4)^(0+512),f
  9387  1499  0B89               	decfsz	9,f
  9388  149A  2C95               	goto	u8515
  9389  149B  0837               	movf	(??_InitUART+4)^(0+512),w
  9390  149C  07B3               	addwf	??_InitUART^(0+512),f
  9391  149D  0838               	movf	(??_InitUART+5)^(0+512),w
  9392  149E  3DB4               	addwfc	(??_InitUART^(0+512)+1),f
  9393  149F  0839               	movf	(??_InitUART+6)^(0+512),w
  9394  14A0  3DB5               	addwfc	(??_InitUART^(0+512)+2),f
  9395  14A1  083A               	movf	(??_InitUART+7)^(0+512),w
  9396  14A2  3DB6               	addwfc	(??_InitUART^(0+512)+3),f
  9397  14A3  0836               	movf	(??_InitUART+3)^(0+512),w
  9398  14A4  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9399  14A5  0835               	movf	(??_InitUART+2)^(0+512),w
  9400  14A6  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9401  14A7  0834               	movf	(??_InitUART+1)^(0+512),w
  9402  14A8  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9403  14A9  0833               	movf	??_InitUART^(0+512),w
  9404  14AA  00BF               	movwf	InitUART@temp^(0+512)
  9405                           
  9406                           ;UART.c: 119: spbrg = (unsigned int)temp;
  9407  14AB  0840               	movf	(InitUART@temp+1)^(0+512),w
  9408  14AC  01BC               	clrf	(InitUART@spbrg+1)^(0+512)
  9409  14AD  07BC               	addwf	(InitUART@spbrg+1)^(0+512),f
  9410  14AE  083F               	movf	InitUART@temp^(0+512),w
  9411  14AF  01BB               	clrf	InitUART@spbrg^(0+512)
  9412  14B0  07BB               	addwf	InitUART@spbrg^(0+512),f
  9413                           
  9414                           ;UART.c: 121: RCSTAbits.CREN = 0;
  9415  14B1  0023               	movlb	3	; select bank3
  9416  14B2  121D               	bcf	29,4	;volatile
  9417                           
  9418                           ;UART.c: 122: OpenUSART(config, spbrg);
  9419  14B3  0024               	movlb	4	; select bank4
  9420  14B4  083C               	movf	(InitUART@spbrg+1)^(0+512),w
  9421  14B5  01A1               	clrf	(OpenUSART@spbrg+1)^(0+512)
  9422  14B6  07A1               	addwf	(OpenUSART@spbrg+1)^(0+512),f
  9423  14B7  083B               	movf	InitUART@spbrg^(0+512),w
  9424  14B8  01A0               	clrf	OpenUSART@spbrg^(0+512)
  9425  14B9  07A0               	addwf	OpenUSART@spbrg^(0+512),f
  9426  14BA  083E               	movf	InitUART@config^(0+512),w
  9427  14BB  319C  248D  3194   	fcall	_OpenUSART
  9428                           
  9429                           ;UART.c: 123: baudUSART(baudconfig);
  9430  14BE  0024               	movlb	4	; select bank4
  9431  14BF  083D               	movf	InitUART@baudconfig^(0+512),w
  9432  14C0  3186  26F7  3194   	fcall	_baudUSART
  9433                           
  9434                           ;UART.c: 124: temp = ReadUSART();
  9435  14C3  3198  2071  3194   	fcall	_ReadUSART
  9436  14C6  0024               	movlb	4	; select bank4
  9437  14C7  00B3               	movwf	??_InitUART^(0+512)
  9438  14C8  01B4               	clrf	(??_InitUART^(0+512)+1)
  9439  14C9  01B5               	clrf	(??_InitUART^(0+512)+2)
  9440  14CA  01B6               	clrf	(??_InitUART^(0+512)+3)
  9441  14CB  0836               	movf	(??_InitUART+3)^(0+512),w
  9442  14CC  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9443  14CD  0835               	movf	(??_InitUART+2)^(0+512),w
  9444  14CE  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9445  14CF  0834               	movf	(??_InitUART+1)^(0+512),w
  9446  14D0  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9447  14D1  0833               	movf	??_InitUART^(0+512),w
  9448  14D2  00BF               	movwf	InitUART@temp^(0+512)
  9449                           
  9450                           ;UART.c: 125: temp = ReadUSART();
  9451  14D3  3198  2071  3194   	fcall	_ReadUSART
  9452  14D6  0024               	movlb	4	; select bank4
  9453  14D7  00B3               	movwf	??_InitUART^(0+512)
  9454  14D8  01B4               	clrf	(??_InitUART^(0+512)+1)
  9455  14D9  01B5               	clrf	(??_InitUART^(0+512)+2)
  9456  14DA  01B6               	clrf	(??_InitUART^(0+512)+3)
  9457  14DB  0836               	movf	(??_InitUART+3)^(0+512),w
  9458  14DC  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9459  14DD  0835               	movf	(??_InitUART+2)^(0+512),w
  9460  14DE  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9461  14DF  0834               	movf	(??_InitUART+1)^(0+512),w
  9462  14E0  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9463  14E1  0833               	movf	??_InitUART^(0+512),w
  9464  14E2  00BF               	movwf	InitUART@temp^(0+512)
  9465                           
  9466                           ;UART.c: 126: temp = ReadUSART();
  9467  14E3  3198  2071  3194   	fcall	_ReadUSART
  9468  14E6  0024               	movlb	4	; select bank4
  9469  14E7  00B3               	movwf	??_InitUART^(0+512)
  9470  14E8  01B4               	clrf	(??_InitUART^(0+512)+1)
  9471  14E9  01B5               	clrf	(??_InitUART^(0+512)+2)
  9472  14EA  01B6               	clrf	(??_InitUART^(0+512)+3)
  9473  14EB  0836               	movf	(??_InitUART+3)^(0+512),w
  9474  14EC  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9475  14ED  0835               	movf	(??_InitUART+2)^(0+512),w
  9476  14EE  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9477  14EF  0834               	movf	(??_InitUART+1)^(0+512),w
  9478  14F0  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9479  14F1  0833               	movf	??_InitUART^(0+512),w
  9480  14F2  00BF               	movwf	InitUART@temp^(0+512)
  9481                           
  9482                           ;UART.c: 127: temp = ReadUSART();
  9483  14F3  3198  2071  3194   	fcall	_ReadUSART
  9484  14F6  0024               	movlb	4	; select bank4
  9485  14F7  00B3               	movwf	??_InitUART^(0+512)
  9486  14F8  01B4               	clrf	(??_InitUART^(0+512)+1)
  9487  14F9  01B5               	clrf	(??_InitUART^(0+512)+2)
  9488  14FA  01B6               	clrf	(??_InitUART^(0+512)+3)
  9489  14FB  0836               	movf	(??_InitUART+3)^(0+512),w
  9490  14FC  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9491  14FD  0835               	movf	(??_InitUART+2)^(0+512),w
  9492  14FE  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9493  14FF  0834               	movf	(??_InitUART+1)^(0+512),w
  9494  1500  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9495  1501  0833               	movf	??_InitUART^(0+512),w
  9496  1502  00BF               	movwf	InitUART@temp^(0+512)
  9497                           
  9498                           ;UART.c: 128: temp = ReadUSART();
  9499  1503  3198  2071         	fcall	_ReadUSART
  9500  1505  0024               	movlb	4	; select bank4
  9501  1506  00B3               	movwf	??_InitUART^(0+512)
  9502  1507  01B4               	clrf	(??_InitUART^(0+512)+1)
  9503  1508  01B5               	clrf	(??_InitUART^(0+512)+2)
  9504  1509  01B6               	clrf	(??_InitUART^(0+512)+3)
  9505  150A  0836               	movf	(??_InitUART+3)^(0+512),w
  9506  150B  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9507  150C  0835               	movf	(??_InitUART+2)^(0+512),w
  9508  150D  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9509  150E  0834               	movf	(??_InitUART+1)^(0+512),w
  9510  150F  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9511  1510  0833               	movf	??_InitUART^(0+512),w
  9512  1511  00BF               	movwf	InitUART@temp^(0+512)
  9513                           
  9514                           ;UART.c: 130: PPSLOCK =0;
  9515  1512  003C               	movlb	28	; select bank28
  9516  1513  018F               	clrf	15	;volatile
  9517                           
  9518                           ;UART.c: 131: RC2PPS = 0b00010100;
  9519  1514  3014               	movlw	20
  9520  1515  003D               	movlb	29	; select bank29
  9521  1516  00A2               	movwf	34	;volatile
  9522                           
  9523                           ;UART.c: 132: CKPPS = 0b00010010;
  9524  1517  3012               	movlw	18
  9525  1518  003C               	movlb	28	; select bank28
  9526  1519  00A5               	movwf	37	;volatile
  9527                           
  9528                           ;UART.c: 134: RXPPS = 0b00010101;
  9529  151A  3015               	movlw	21
  9530  151B  00A4               	movwf	36	;volatile
  9531                           
  9532                           ;UART.c: 136: PPSLOCK =1;
  9533  151C  3001               	movlw	1
  9534  151D  008F               	movwf	15	;volatile
  9535                           
  9536                           ;UART.c: 138: PIR1bits.RCIF = 0;
  9537  151E  0020               	movlb	0	; select bank0
  9538  151F  1291               	bcf	17,5	;volatile
  9539                           
  9540                           ;UART.c: 139: INTCONbits.PEIE = 1;
  9541  1520  170B               	bsf	11,6	;volatile
  9542  1521  0008               	return
  9543  1522                     __end_of_InitUART:	
  9544                           
  9545                           	psect	text28
  9546  06F7                     __ptext28:	
  9547 ;; *************** function _baudUSART *****************
  9548 ;; Defined at:
  9549 ;;		line 147 in file "UART.c"
  9550 ;; Parameters:    Size  Location     Type
  9551 ;;  baudconfig      1    wreg     unsigned char 
  9552 ;; Auto vars:     Size  Location     Type
  9553 ;;  baudconfig      1    0[BANK4 ] unsigned char 
  9554 ;; Return value:  Size  Location     Type
  9555 ;;		None               void
  9556 ;; Registers used:
  9557 ;;		wreg, status,2
  9558 ;; Tracked objects:
  9559 ;;		On entry : 0/0
  9560 ;;		On exit  : 0/0
  9561 ;;		Unchanged: 0/0
  9562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9564 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9566 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9567 ;;Total ram usage:        1 bytes
  9568 ;; Hardware stack levels used:    1
  9569 ;; Hardware stack levels required when called:    7
  9570 ;; This function calls:
  9571 ;;		Nothing
  9572 ;; This function is called by:
  9573 ;;		_InitUART
  9574 ;; This function uses a non-reentrant model
  9575 ;;
  9576                           
  9577                           
  9578                           ;psect for function _baudUSART
  9579  06F7                     _baudUSART:	
  9580                           
  9581                           ;incstack = 0
  9582                           ; Regs used in _baudUSART: [wreg+status,2]
  9583                           ;baudUSART@baudconfig stored from wreg
  9584  06F7  0024               	movlb	4	; select bank4
  9585  06F8  00A0               	movwf	baudUSART@baudconfig^(0+512)
  9586                           
  9587                           ;UART.c: 149: BAUD1CON =0;
  9588  06F9  0023               	movlb	3	; select bank3
  9589  06FA  019F               	clrf	31	;volatile
  9590                           
  9591                           ;UART.c: 150: BAUD1CON = baudconfig;
  9592  06FB  0024               	movlb	4	; select bank4
  9593  06FC  0820               	movf	baudUSART@baudconfig^(0+512),w
  9594  06FD  0023               	movlb	3	; select bank3
  9595  06FE  009F               	movwf	31	;volatile
  9596  06FF  0008               	return
  9597  0700                     __end_of_baudUSART:	
  9598                           
  9599                           	psect	text29
  9600  1E99                     __ptext29:	
  9601 ;; *************** function ___lldiv *****************
  9602 ;; Defined at:
  9603 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
  9604 ;; Parameters:    Size  Location     Type
  9605 ;;  divisor         4    0[BANK4 ] unsigned long 
  9606 ;;  dividend        4    4[BANK4 ] unsigned long 
  9607 ;; Auto vars:     Size  Location     Type
  9608 ;;  quotient        4    9[BANK4 ] unsigned long 
  9609 ;;  counter         1   13[BANK4 ] unsigned char 
  9610 ;; Return value:  Size  Location     Type
  9611 ;;                  4    0[BANK4 ] unsigned long 
  9612 ;; Registers used:
  9613 ;;		wreg, status,2, status,0
  9614 ;; Tracked objects:
  9615 ;;		On entry : 0/0
  9616 ;;		On exit  : 0/0
  9617 ;;		Unchanged: 0/0
  9618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9619 ;;      Params:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  9620 ;;      Locals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  9621 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9622 ;;      Totals:         0       0       0       0       0      14       0       0       0       0       0       0       
      +0       0
  9623 ;;Total ram usage:       14 bytes
  9624 ;; Hardware stack levels used:    1
  9625 ;; Hardware stack levels required when called:    7
  9626 ;; This function calls:
  9627 ;;		Nothing
  9628 ;; This function is called by:
  9629 ;;		_InitUART
  9630 ;; This function uses a non-reentrant model
  9631 ;;
  9632                           
  9633                           
  9634                           ;psect for function ___lldiv
  9635  1E99                     ___lldiv:	
  9636                           
  9637                           ;incstack = 0
  9638                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  9639  1E99  3000               	movlw	0
  9640  1E9A  0024               	movlb	4	; select bank4
  9641  1E9B  00AC               	movwf	(___lldiv@quotient+3)^(0+512)
  9642  1E9C  3000               	movlw	0
  9643  1E9D  00AB               	movwf	(___lldiv@quotient+2)^(0+512)
  9644  1E9E  3000               	movlw	0
  9645  1E9F  00AA               	movwf	(___lldiv@quotient+1)^(0+512)
  9646  1EA0  3000               	movlw	0
  9647  1EA1  00A9               	movwf	___lldiv@quotient^(0+512)
  9648  1EA2  0823               	movf	(___lldiv@divisor+3)^(0+512),w
  9649  1EA3  0422               	iorwf	(___lldiv@divisor+2)^(0+512),w
  9650  1EA4  0421               	iorwf	(___lldiv@divisor+1)^(0+512),w
  9651  1EA5  0420               	iorwf	___lldiv@divisor^(0+512),w
  9652  1EA6  1903               	skipnz
  9653  1EA7  2EE3               	goto	l6516
  9654  1EA8  01AD               	clrf	___lldiv@counter^(0+512)
  9655  1EA9  0AAD               	incf	___lldiv@counter^(0+512),f
  9656  1EAA                     l6502:	
  9657  1EAA  1BA3               	btfsc	(___lldiv@divisor+3)^(0+512),7
  9658  1EAB  2EB8               	goto	l6504
  9659  1EAC  3001               	movlw	1
  9660  1EAD                     u8395:	
  9661  1EAD  35A0               	lslf	___lldiv@divisor^(0+512),f
  9662  1EAE  0DA1               	rlf	(___lldiv@divisor+1)^(0+512),f
  9663  1EAF  0DA2               	rlf	(___lldiv@divisor+2)^(0+512),f
  9664  1EB0  0DA3               	rlf	(___lldiv@divisor+3)^(0+512),f
  9665  1EB1  0B89               	decfsz	9,f
  9666  1EB2  2EAD               	goto	u8395
  9667  1EB3  3001               	movlw	1
  9668  1EB4  00A8               	movwf	??___lldiv^(0+512)
  9669  1EB5  0828               	movf	??___lldiv^(0+512),w
  9670  1EB6  07AD               	addwf	___lldiv@counter^(0+512),f
  9671  1EB7  2EAA               	goto	l6502
  9672  1EB8                     l6504:	
  9673  1EB8  3001               	movlw	1
  9674  1EB9                     u8415:	
  9675  1EB9  35A9               	lslf	___lldiv@quotient^(0+512),f
  9676  1EBA  0DAA               	rlf	(___lldiv@quotient+1)^(0+512),f
  9677  1EBB  0DAB               	rlf	(___lldiv@quotient+2)^(0+512),f
  9678  1EBC  0DAC               	rlf	(___lldiv@quotient+3)^(0+512),f
  9679  1EBD  0B89               	decfsz	9,f
  9680  1EBE  2EB9               	goto	u8415
  9681  1EBF  0823               	movf	(___lldiv@divisor+3)^(0+512),w
  9682  1EC0  0227               	subwf	(___lldiv@dividend+3)^(0+512),w
  9683  1EC1  1D03               	skipz
  9684  1EC2  2ECD               	goto	u8425
  9685  1EC3  0822               	movf	(___lldiv@divisor+2)^(0+512),w
  9686  1EC4  0226               	subwf	(___lldiv@dividend+2)^(0+512),w
  9687  1EC5  1D03               	skipz
  9688  1EC6  2ECD               	goto	u8425
  9689  1EC7  0821               	movf	(___lldiv@divisor+1)^(0+512),w
  9690  1EC8  0225               	subwf	(___lldiv@dividend+1)^(0+512),w
  9691  1EC9  1D03               	skipz
  9692  1ECA  2ECD               	goto	u8425
  9693  1ECB  0820               	movf	___lldiv@divisor^(0+512),w
  9694  1ECC  0224               	subwf	___lldiv@dividend^(0+512),w
  9695  1ECD                     u8425:	
  9696  1ECD  1C03               	skipc
  9697  1ECE  2ED8               	goto	l6512
  9698  1ECF  0820               	movf	___lldiv@divisor^(0+512),w
  9699  1ED0  02A4               	subwf	___lldiv@dividend^(0+512),f
  9700  1ED1  0821               	movf	(___lldiv@divisor+1)^(0+512),w
  9701  1ED2  3BA5               	subwfb	(___lldiv@dividend+1)^(0+512),f
  9702  1ED3  0822               	movf	(___lldiv@divisor+2)^(0+512),w
  9703  1ED4  3BA6               	subwfb	(___lldiv@dividend+2)^(0+512),f
  9704  1ED5  0823               	movf	(___lldiv@divisor+3)^(0+512),w
  9705  1ED6  3BA7               	subwfb	(___lldiv@dividend+3)^(0+512),f
  9706  1ED7  1429               	bsf	___lldiv@quotient^(0+512),0
  9707  1ED8                     l6512:	
  9708  1ED8  3001               	movlw	1
  9709  1ED9                     u8435:	
  9710  1ED9  36A3               	lsrf	(___lldiv@divisor+3)^(0+512),f
  9711  1EDA  0CA2               	rrf	(___lldiv@divisor+2)^(0+512),f
  9712  1EDB  0CA1               	rrf	(___lldiv@divisor+1)^(0+512),f
  9713  1EDC  0CA0               	rrf	___lldiv@divisor^(0+512),f
  9714  1EDD  0B89               	decfsz	9,f
  9715  1EDE  2ED9               	goto	u8435
  9716  1EDF  3001               	movlw	1
  9717  1EE0  02AD               	subwf	___lldiv@counter^(0+512),f
  9718  1EE1  1D03               	btfss	3,2
  9719  1EE2  2EB8               	goto	l6504
  9720  1EE3                     l6516:	
  9721  1EE3  082C               	movf	(___lldiv@quotient+3)^(0+512),w
  9722  1EE4  00A3               	movwf	(?___lldiv+3)^(0+512)
  9723  1EE5  082B               	movf	(___lldiv@quotient+2)^(0+512),w
  9724  1EE6  00A2               	movwf	(?___lldiv+2)^(0+512)
  9725  1EE7  082A               	movf	(___lldiv@quotient+1)^(0+512),w
  9726  1EE8  00A1               	movwf	(?___lldiv+1)^(0+512)
  9727  1EE9  0829               	movf	___lldiv@quotient^(0+512),w
  9728  1EEA  00A0               	movwf	?___lldiv^(0+512)
  9729  1EEB  0008               	return
  9730  1EEC                     __end_of___lldiv:	
  9731                           
  9732                           	psect	text30
  9733  1871                     __ptext30:	
  9734 ;; *************** function _ReadUSART *****************
  9735 ;; Defined at:
  9736 ;;		line 302 in file "UART.c"
  9737 ;; Parameters:    Size  Location     Type
  9738 ;;		None
  9739 ;; Auto vars:     Size  Location     Type
  9740 ;;  data            1    1[BANK4 ] unsigned char 
  9741 ;; Return value:  Size  Location     Type
  9742 ;;                  1    wreg      unsigned char 
  9743 ;; Registers used:
  9744 ;;		wreg
  9745 ;; Tracked objects:
  9746 ;;		On entry : 0/0
  9747 ;;		On exit  : 0/0
  9748 ;;		Unchanged: 0/0
  9749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9751 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9752 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9753 ;;      Totals:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  9754 ;;Total ram usage:        2 bytes
  9755 ;; Hardware stack levels used:    1
  9756 ;; Hardware stack levels required when called:    7
  9757 ;; This function calls:
  9758 ;;		Nothing
  9759 ;; This function is called by:
  9760 ;;		_InitUART
  9761 ;; This function uses a non-reentrant model
  9762 ;;
  9763                           
  9764                           
  9765                           ;psect for function _ReadUSART
  9766  1871                     _ReadUSART:	
  9767                           
  9768                           ;UART.c: 304: char data;
  9769                           ;UART.c: 306: if(RCSTAbits.OERR)
  9770                           
  9771                           ;incstack = 0
  9772                           ; Regs used in _ReadUSART: [wreg]
  9773  1871  0023               	movlb	3	; select bank3
  9774  1872  189D               	btfsc	29,1	;volatile
  9775                           
  9776                           ;UART.c: 307: {
  9777                           ;UART.c: 308: RCSTAbits.CREN = 0;
  9778  1873  121D               	bcf	29,4	;volatile
  9779                           
  9780                           ;UART.c: 309: }
  9781                           ;UART.c: 311: data = RCREG;
  9782  1874  0819               	movf	25,w	;volatile
  9783  1875  0024               	movlb	4	; select bank4
  9784  1876  00A0               	movwf	??_ReadUSART^(0+512)
  9785  1877  0820               	movf	??_ReadUSART^(0+512),w
  9786  1878  00A1               	movwf	ReadUSART@data^(0+512)
  9787                           
  9788                           ;UART.c: 313: return (data);
  9789  1879  0821               	movf	ReadUSART@data^(0+512),w
  9790  187A  0008               	return
  9791  187B                     __end_of_ReadUSART:	
  9792                           
  9793                           	psect	text31
  9794  1C8D                     __ptext31:	
  9795 ;; *************** function _OpenUSART *****************
  9796 ;; Defined at:
  9797 ;;		line 158 in file "UART.c"
  9798 ;; Parameters:    Size  Location     Type
  9799 ;;  config          1    wreg     unsigned char 
  9800 ;;  spbrg           2    0[BANK4 ] unsigned int 
  9801 ;; Auto vars:     Size  Location     Type
  9802 ;;  config          1    2[BANK4 ] unsigned char 
  9803 ;; Return value:  Size  Location     Type
  9804 ;;		None               void
  9805 ;; Registers used:
  9806 ;;		wreg, status,2
  9807 ;; Tracked objects:
  9808 ;;		On entry : 0/0
  9809 ;;		On exit  : 0/0
  9810 ;;		Unchanged: 0/0
  9811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9812 ;;      Params:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  9813 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9815 ;;      Totals:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  9816 ;;Total ram usage:        3 bytes
  9817 ;; Hardware stack levels used:    1
  9818 ;; Hardware stack levels required when called:    7
  9819 ;; This function calls:
  9820 ;;		Nothing
  9821 ;; This function is called by:
  9822 ;;		_InitUART
  9823 ;; This function uses a non-reentrant model
  9824 ;;
  9825                           
  9826                           
  9827                           ;psect for function _OpenUSART
  9828  1C8D                     _OpenUSART:	
  9829                           
  9830                           ;incstack = 0
  9831                           ; Regs used in _OpenUSART: [wreg+status,2]
  9832                           ;OpenUSART@config stored from wreg
  9833  1C8D  0024               	movlb	4	; select bank4
  9834  1C8E  00A2               	movwf	OpenUSART@config^(0+512)
  9835                           
  9836                           ;UART.c: 160: TX1STA = 0;
  9837  1C8F  0023               	movlb	3	; select bank3
  9838  1C90  019E               	clrf	30	;volatile
  9839                           
  9840                           ;UART.c: 161: RC1STA = 0;
  9841  1C91  019D               	clrf	29	;volatile
  9842                           
  9843                           ;UART.c: 163: if(config&0x01)
  9844  1C92  0024               	movlb	4	; select bank4
  9845  1C93  1C22               	btfss	OpenUSART@config^(0+512),0
  9846  1C94  2C97               	goto	l6270
  9847                           
  9848                           ;UART.c: 164: {
  9849                           ;UART.c: 165: TX1STAbits.SYNC = 1;
  9850  1C95  0023               	movlb	3	; select bank3
  9851  1C96  161E               	bsf	30,4	;volatile
  9852  1C97                     l6270:	
  9853                           
  9854                           ;UART.c: 166: }
  9855                           ;UART.c: 168: if(config&0x02)
  9856  1C97  0024               	movlb	4	; select bank4
  9857  1C98  1CA2               	btfss	OpenUSART@config^(0+512),1
  9858  1C99  2C9D               	goto	l6274
  9859                           
  9860                           ;UART.c: 169: {
  9861                           ;UART.c: 170: TX1STAbits.TX9 = 1;
  9862  1C9A  0023               	movlb	3	; select bank3
  9863  1C9B  171E               	bsf	30,6	;volatile
  9864                           
  9865                           ;UART.c: 171: RC1STAbits.RX9 = 1;
  9866  1C9C  171D               	bsf	29,6	;volatile
  9867  1C9D                     l6274:	
  9868                           
  9869                           ;UART.c: 172: }
  9870                           ;UART.c: 174: if(config&0x04)
  9871  1C9D  0024               	movlb	4	; select bank4
  9872  1C9E  1D22               	btfss	OpenUSART@config^(0+512),2
  9873  1C9F  2CA2               	goto	l6278
  9874                           
  9875                           ;UART.c: 175: {
  9876                           ;UART.c: 176: TX1STAbits.CSRC = 1;
  9877  1CA0  0023               	movlb	3	; select bank3
  9878  1CA1  179E               	bsf	30,7	;volatile
  9879  1CA2                     l6278:	
  9880                           
  9881                           ;UART.c: 177: }
  9882                           ;UART.c: 179: if(config&0x08)
  9883  1CA2  0024               	movlb	4	; select bank4
  9884  1CA3  1DA2               	btfss	OpenUSART@config^(0+512),3
  9885  1CA4  2CA8               	goto	l415
  9886                           
  9887                           ;UART.c: 180: {
  9888                           ;UART.c: 181: RC1STAbits.CREN = 1;
  9889  1CA5  0023               	movlb	3	; select bank3
  9890  1CA6  161D               	bsf	29,4	;volatile
  9891                           
  9892                           ;UART.c: 182: }
  9893  1CA7  2CAA               	goto	l6282
  9894  1CA8                     l415:	
  9895                           
  9896                           ;UART.c: 183: else
  9897                           ;UART.c: 184: {
  9898                           ;UART.c: 185: RC1STAbits.SREN = 1;
  9899  1CA8  0023               	movlb	3	; select bank3
  9900  1CA9  169D               	bsf	29,5	;volatile
  9901  1CAA                     l6282:	
  9902                           
  9903                           ;UART.c: 186: }
  9904                           ;UART.c: 188: if(config&0x10)
  9905  1CAA  0024               	movlb	4	; select bank4
  9906  1CAB  1E22               	btfss	OpenUSART@config^(0+512),4
  9907  1CAC  2CAF               	goto	l6288
  9908                           
  9909                           ;UART.c: 189: {
  9910                           ;UART.c: 190: TX1STAbits.BRGH = 1;
  9911  1CAD  0023               	movlb	3	; select bank3
  9912  1CAE  151E               	bsf	30,2	;volatile
  9913  1CAF                     l6288:	
  9914                           ;UART.c: 194: {
  9915                           
  9916                           
  9917                           ;UART.c: 196: }
  9918                           ;UART.c: 198: if(config&0x40)
  9919  1CAF  0024               	movlb	4	; select bank4
  9920  1CB0  1F22               	btfss	OpenUSART@config^(0+512),6
  9921  1CB1  2CB7               	goto	l419
  9922                           
  9923                           ;UART.c: 199: {
  9924                           ;UART.c: 200: PIR1bits.RCIF = 0;
  9925  1CB2  0020               	movlb	0	; select bank0
  9926  1CB3  1291               	bcf	17,5	;volatile
  9927                           
  9928                           ;UART.c: 201: PIE1bits.RCIE = 1;
  9929  1CB4  0021               	movlb	1	; select bank1
  9930  1CB5  1691               	bsf	17,5	;volatile
  9931                           
  9932                           ;UART.c: 203: }
  9933  1CB6  2CB9               	goto	l6292
  9934  1CB7                     l419:	
  9935                           
  9936                           ;UART.c: 204: else
  9937                           ;UART.c: 205: {
  9938                           ;UART.c: 206: PIE1bits.RCIE = 0;
  9939  1CB7  0021               	movlb	1	; select bank1
  9940  1CB8  1291               	bcf	17,5	;volatile
  9941  1CB9                     l6292:	
  9942                           
  9943                           ;UART.c: 207: }
  9944                           ;UART.c: 209: if(config&0x80)
  9945  1CB9  0024               	movlb	4	; select bank4
  9946  1CBA  1FA2               	btfss	OpenUSART@config^(0+512),7
  9947  1CBB  2CC1               	goto	l421
  9948                           
  9949                           ;UART.c: 210: {
  9950                           ;UART.c: 211: PIR1bits.TXIF = 0;
  9951  1CBC  0020               	movlb	0	; select bank0
  9952  1CBD  1211               	bcf	17,4	;volatile
  9953                           
  9954                           ;UART.c: 212: PIE1bits.TXIE = 1;
  9955  1CBE  0021               	movlb	1	; select bank1
  9956  1CBF  1611               	bsf	17,4	;volatile
  9957                           
  9958                           ;UART.c: 213: }
  9959  1CC0  2CC3               	goto	l6296
  9960  1CC1                     l421:	
  9961                           
  9962                           ;UART.c: 214: else
  9963                           ;UART.c: 215: {
  9964                           ;UART.c: 216: PIE1bits.TXIE = 0;
  9965  1CC1  0021               	movlb	1	; select bank1
  9966  1CC2  1211               	bcf	17,4	;volatile
  9967  1CC3                     l6296:	
  9968                           
  9969                           ;UART.c: 217: }
  9970                           ;UART.c: 219: SPBRG = spbrg;
  9971  1CC3  0024               	movlb	4	; select bank4
  9972  1CC4  0820               	movf	OpenUSART@spbrg^(0+512),w
  9973  1CC5  0023               	movlb	3	; select bank3
  9974  1CC6  009B               	movwf	27	;volatile
  9975                           
  9976                           ;UART.c: 220: SPBRGH = spbrg >> 8;
  9977  1CC7  0024               	movlb	4	; select bank4
  9978  1CC8  0821               	movf	(OpenUSART@spbrg+1)^(0+512),w
  9979  1CC9  0023               	movlb	3	; select bank3
  9980  1CCA  009C               	movwf	28	;volatile
  9981                           
  9982                           ;UART.c: 222: TX1STAbits.TXEN = 1;
  9983  1CCB  169E               	bsf	30,5	;volatile
  9984                           
  9985                           ;UART.c: 223: RC1STAbits.SPEN = 1;
  9986  1CCC  179D               	bsf	29,7	;volatile
  9987  1CCD  0008               	return
  9988  1CCE                     __end_of_OpenUSART:	
  9989                           
  9990                           	psect	text32
  9991  18CC                     __ptext32:	
  9992 ;; *************** function _CloseUSART *****************
  9993 ;; Defined at:
  9994 ;;		line 62 in file "UART.c"
  9995 ;; Parameters:    Size  Location     Type
  9996 ;;		None
  9997 ;; Auto vars:     Size  Location     Type
  9998 ;;		None
  9999 ;; Return value:  Size  Location     Type
 10000 ;;		None               void
 10001 ;; Registers used:
 10002 ;;		wreg, status,2, status,0
 10003 ;; Tracked objects:
 10004 ;;		On entry : 0/0
 10005 ;;		On exit  : 0/0
 10006 ;;		Unchanged: 0/0
 10007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10010 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
 10011 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
 10012 ;;Total ram usage:        1 bytes
 10013 ;; Hardware stack levels used:    1
 10014 ;; Hardware stack levels required when called:    7
 10015 ;; This function calls:
 10016 ;;		Nothing
 10017 ;; This function is called by:
 10018 ;;		_InitUART
 10019 ;; This function uses a non-reentrant model
 10020 ;;
 10021                           
 10022                           
 10023                           ;psect for function _CloseUSART
 10024  18CC                     _CloseUSART:	
 10025                           
 10026                           ;UART.c: 64: RCSTA&=0b01001111;
 10027                           
 10028                           ;incstack = 0
 10029                           ; Regs used in _CloseUSART: [wreg+status,2+status,0]
 10030  18CC  304F               	movlw	79
 10031  18CD  0024               	movlb	4	; select bank4
 10032  18CE  00A0               	movwf	??_CloseUSART^(0+512)
 10033  18CF  0820               	movf	??_CloseUSART^(0+512),w
 10034  18D0  0023               	movlb	3	; select bank3
 10035  18D1  059D               	andwf	29,f	;volatile
 10036                           
 10037                           ;UART.c: 65: TX1STAbits.TXEN=0;
 10038  18D2  129E               	bcf	30,5	;volatile
 10039                           
 10040                           ;UART.c: 66: PIE1&=0b11001111;
 10041  18D3  30CF               	movlw	207
 10042  18D4  0024               	movlb	4	; select bank4
 10043  18D5  00A0               	movwf	??_CloseUSART^(0+512)
 10044  18D6  0820               	movf	??_CloseUSART^(0+512),w
 10045  18D7  0021               	movlb	1	; select bank1
 10046  18D8  0591               	andwf	17,f	;volatile
 10047  18D9  0008               	return
 10048  18DA                     __end_of_CloseUSART:	
 10049                           
 10050                           	psect	text33
 10051  198C                     __ptext33:	
 10052 ;; *************** function _InitApp *****************
 10053 ;; Defined at:
 10054 ;;		line 62 in file "user.c"
 10055 ;; Parameters:    Size  Location     Type
 10056 ;;		None
 10057 ;; Auto vars:     Size  Location     Type
 10058 ;;		None
 10059 ;; Return value:  Size  Location     Type
 10060 ;;		None               void
 10061 ;; Registers used:
 10062 ;;		wreg, status,2
 10063 ;; Tracked objects:
 10064 ;;		On entry : 0/0
 10065 ;;		On exit  : 0/0
 10066 ;;		Unchanged: 0/0
 10067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10071 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10072 ;;Total ram usage:        0 bytes
 10073 ;; Hardware stack levels used:    1
 10074 ;; Hardware stack levels required when called:    7
 10075 ;; This function calls:
 10076 ;;		Nothing
 10077 ;; This function is called by:
 10078 ;;		_main
 10079 ;; This function uses a non-reentrant model
 10080 ;;
 10081                           
 10082                           
 10083                           ;psect for function _InitApp
 10084  198C                     _InitApp:	
 10085                           
 10086                           ;user.c: 64: LATC =0;
 10087                           
 10088                           ;incstack = 0
 10089                           ; Regs used in _InitApp: [wreg+status,2]
 10090  198C  0022               	movlb	2	; select bank2
 10091  198D  018E               	clrf	14	;volatile
 10092                           
 10093                           ;user.c: 65: LATA =0;
 10094  198E  018C               	clrf	12	;volatile
 10095                           
 10096                           ;user.c: 66: TRISCbits.TRISC2 = 0;
 10097  198F  0021               	movlb	1	; select bank1
 10098  1990  110E               	bcf	14,2	;volatile
 10099                           
 10100                           ;user.c: 67: TRISCbits.TRISC1 = 0;
 10101  1991  108E               	bcf	14,1	;volatile
 10102                           
 10103                           ;user.c: 68: TRISCbits.TRISC3 = 0;
 10104  1992  118E               	bcf	14,3	;volatile
 10105                           
 10106                           ;user.c: 69: TRISCbits.TRISC4 = 0;
 10107  1993  120E               	bcf	14,4	;volatile
 10108                           
 10109                           ;user.c: 70: TRISAbits.TRISA2 = 1;
 10110  1994  150C               	bsf	12,2	;volatile
 10111                           
 10112                           ;user.c: 72: TRISCbits.TRISC0 = 1;
 10113  1995  140E               	bsf	14,0	;volatile
 10114                           
 10115                           ;user.c: 77: TRISCbits.TRISC5 = 1;
 10116  1996  168E               	bsf	14,5	;volatile
 10117                           
 10118                           ;user.c: 80: LATC |= 0b00000010;
 10119  1997  0022               	movlb	2	; select bank2
 10120  1998  148E               	bsf	14,1	;volatile
 10121                           
 10122                           ;user.c: 81: PPSLOCK =0;
 10123  1999  003C               	movlb	28	; select bank28
 10124  199A  018F               	clrf	15	;volatile
 10125                           
 10126                           ;user.c: 82: RC2PPS = 0b00010100;
 10127  199B  3014               	movlw	20
 10128  199C  003D               	movlb	29	; select bank29
 10129  199D  00A2               	movwf	34	;volatile
 10130                           
 10131                           ;user.c: 83: CKPPS = 0b00010010;
 10132  199E  3012               	movlw	18
 10133  199F  003C               	movlb	28	; select bank28
 10134  19A0  00A5               	movwf	37	;volatile
 10135                           
 10136                           ;user.c: 85: RXPPS = 0b00010101;
 10137  19A1  3015               	movlw	21
 10138  19A2  00A4               	movwf	36	;volatile
 10139                           
 10140                           ;user.c: 87: PPSLOCK =1;
 10141  19A3  3001               	movlw	1
 10142  19A4  008F               	movwf	15	;volatile
 10143                           
 10144                           ;user.c: 89: ANSELA &= ~0xFF;
 10145  19A5  0023               	movlb	3	; select bank3
 10146  19A6  018C               	clrf	12	;volatile
 10147                           
 10148                           ;user.c: 90: ANSELA |= 0b00000100;
 10149  19A7  150C               	bsf	12,2	;volatile
 10150                           
 10151                           ;user.c: 91: ANSELC &= ~0xFF;
 10152  19A8  018E               	clrf	14	;volatile
 10153                           
 10154                           ;user.c: 92: OPTION_REGbits.nWPUEN = 0;
 10155  19A9  0021               	movlb	1	; select bank1
 10156  19AA  1395               	bcf	21,7	;volatile
 10157                           
 10158                           ;user.c: 93: WPUC = 0b00100000;
 10159  19AB  3020               	movlw	32
 10160  19AC  0024               	movlb	4	; select bank4
 10161  19AD  008E               	movwf	14	;volatile
 10162                           
 10163                           ;user.c: 94: WPUA = 0;
 10164  19AE  018C               	clrf	12	;volatile
 10165  19AF  0008               	return
 10166  19B0                     __end_of_InitApp:	
 10167                           
 10168                           	psect	text34
 10169  1940                     __ptext34:	
 10170 ;; *************** function _ConfigureOscillator *****************
 10171 ;; Defined at:
 10172 ;;		line 40 in file "system.c"
 10173 ;; Parameters:    Size  Location     Type
 10174 ;;		None
 10175 ;; Auto vars:     Size  Location     Type
 10176 ;;		None
 10177 ;; Return value:  Size  Location     Type
 10178 ;;		None               void
 10179 ;; Registers used:
 10180 ;;		wreg, status,2, status,0
 10181 ;; Tracked objects:
 10182 ;;		On entry : 0/0
 10183 ;;		On exit  : 0/0
 10184 ;;		Unchanged: 0/0
 10185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10188 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
 10189 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
 10190 ;;Total ram usage:        1 bytes
 10191 ;; Hardware stack levels used:    1
 10192 ;; Hardware stack levels required when called:    7
 10193 ;; This function calls:
 10194 ;;		Nothing
 10195 ;; This function is called by:
 10196 ;;		_main
 10197 ;; This function uses a non-reentrant model
 10198 ;;
 10199                           
 10200                           
 10201                           ;psect for function _ConfigureOscillator
 10202  1940                     _ConfigureOscillator:	
 10203                           
 10204                           ;system.c: 42: OSCCON= 0b11110000;
 10205                           
 10206                           ;incstack = 0
 10207                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 10208  1940  30F0               	movlw	240
 10209  1941  0021               	movlb	1	; select bank1
 10210  1942  0099               	movwf	25	;volatile
 10211  1943                     l6774:	
 10212                           ;system.c: 43: while(!(OSCSTAT & HFIOFS));
 10213                           
 10214  1943  3000               	movlw	0
 10215  1944  181A               	btfsc	26,0	;volatile
 10216  1945  3001               	movlw	1
 10217  1946  051A               	andwf	26,w	;volatile
 10218  1947  1903               	btfsc	3,2
 10219  1948  2943               	goto	l6774
 10220  1949                     l6776:	
 10221                           ;system.c: 44: while(!(OSCSTAT & = 0b01000000));
 10222                           
 10223  1949  3040               	movlw	64
 10224  194A  0024               	movlb	4	; select bank4
 10225  194B  00A0               	movwf	??_ConfigureOscillator^(0+512)
 10226  194C  0820               	movf	??_ConfigureOscillator^(0+512),w
 10227  194D  0021               	movlb	1	; select bank1
 10228  194E  059A               	andwf	26,f	;volatile
 10229  194F  1D03               	btfss	3,2
 10230  1950  0008               	return
 10231  1951  2949               	goto	l6776
 10232  1952                     __end_of_ConfigureOscillator:	
 10233                           
 10234                           	psect	intentry
 10235  0004                     __pintentry:	
 10236 ;; *************** function _isr *****************
 10237 ;; Defined at:
 10238 ;;		line 72 in file "interrupts.c"
 10239 ;; Parameters:    Size  Location     Type
 10240 ;;		None
 10241 ;; Auto vars:     Size  Location     Type
 10242 ;;  ScanTemp        1   36[BANK1 ] unsigned char 
 10243 ;;  rx              1   35[BANK1 ] unsigned char 
 10244 ;;  Rx_fault        1   34[BANK1 ] unsigned char 
 10245 ;; Return value:  Size  Location     Type
 10246 ;;		None               void
 10247 ;; Registers used:
 10248 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10249 ;; Tracked objects:
 10250 ;;		On entry : 0/0
 10251 ;;		On exit  : 0/0
 10252 ;;		Unchanged: 0/0
 10253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10255 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 10256 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10257 ;;      Totals:         0       2       3       0       0       0       0       0       0       0       0       0       
      +0       0
 10258 ;;Total ram usage:        5 bytes
 10259 ;; Hardware stack levels used:    1
 10260 ;; Hardware stack levels required when called:    6
 10261 ;; This function calls:
 10262 ;;		_PS2RawToScan
 10263 ;;		_Process_PS2_ScanCode
 10264 ;;		_READ_CONFIG_PIN
 10265 ;;		_ResendLast
 10266 ;;		_Timer2OFF
 10267 ;;		_Timer2Reset
 10268 ;;		_UART_send_break_timed
 10269 ;;		i1_PS_2_DISABLE_INTERRUPT
 10270 ;;		i1_PS_2_ENABLE_INTERRUPT
 10271 ;;		i1_READ_PS_2_PIN
 10272 ;;		i1_ReadUSART
 10273 ;;		i1_Timer2ON
 10274 ;;		i1_UARTchar
 10275 ;; This function is called by:
 10276 ;;		Interrupt level 1
 10277 ;; This function uses a non-reentrant model
 10278 ;;
 10279                           
 10280  0004                     _isr:	
 10281                           
 10282                           ;incstack = 0
 10283                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10284  0004  147E               	bsf	126,0	;set compiler interrupt flag
 10285  0005  3180               	pagesel	$
 10286  0006  0020               	movlb	0	; select bank0
 10287  0007  087F               	movf	127,w
 10288  0008  00EF               	movwf	??_isr+1
 10289                           
 10290                           ;interrupts.c: 74: unsigned char rx;
 10291                           ;interrupts.c: 75: unsigned char Rx_fault =0;
 10292  0009  0021               	movlb	1	; select bank1
 10293  000A  01C2               	clrf	isr@Rx_fault^(0+128)
 10294                           
 10295                           ;interrupts.c: 76: unsigned char ScanTemp;
 10296                           ;interrupts.c: 78: if(IOCAF & 0b00100000)
 10297  000B  0027               	movlb	7	; select bank7
 10298  000C  1E93               	btfss	19,5	;volatile
 10299  000D  2875               	goto	i1l83
 10300                           
 10301                           ;interrupts.c: 79: {
 10302                           ;interrupts.c: 81: PS_2_DISABLE_INTERRUPT(0b00100000);
 10303  000E  3020               	movlw	32
 10304  000F  3198  20F9  3180   	fcall	i1_PS_2_DISABLE_INTERRUPT
 10305                           
 10306                           ;interrupts.c: 82: PIE1bits.TMR2IE = 0;
 10307  0012  0021               	movlb	1	; select bank1
 10308  0013  1091               	bcf	17,1	;volatile
 10309                           
 10310                           ;interrupts.c: 83: PIE1bits.RCIE = 0;
 10311  0014  1291               	bcf	17,5	;volatile
 10312                           
 10313                           ;interrupts.c: 84: LATC |= 0b00010000;
 10314  0015  0022               	movlb	2	; select bank2
 10315  0016  160E               	bsf	14,4	;volatile
 10316                           
 10317                           ;interrupts.c: 85: PS_2_bits++;
 10318  0017  3001               	movlw	1
 10319  0018  0020               	movlb	0	; select bank0
 10320  0019  00EE               	movwf	??_isr
 10321  001A  086E               	movf	??_isr,w
 10322  001B  0021               	movlb	1	; select bank1
 10323  001C  07D2               	addwf	_PS_2_bits^(0+128),f
 10324                           
 10325                           ;interrupts.c: 86: PS_2_Read_Data_TEMP <<= 1;
 10326  001D  3001               	movlw	1
 10327  001E                     u744_25:	
 10328  001E  35C9               	lslf	_PS_2_Read_Data_TEMP^(0+128),f
 10329  001F  0DCA               	rlf	(_PS_2_Read_Data_TEMP+1)^(0+128),f
 10330  0020  0B89               	decfsz	9,f
 10331  0021  281E               	goto	u744_25
 10332                           
 10333                           ;interrupts.c: 87: __nop();
 10334  0022  0000               	nop
 10335                           
 10336                           ;interrupts.c: 88: if(READ_PS_2_PIN(0b00010000))
 10337  0023  3010               	movlw	16
 10338  0024  3199  2152  3180   	fcall	i1_READ_PS_2_PIN
 10339  0027  3A00               	xorlw	0
 10340  0028  1903               	skipnz
 10341  0029  282F               	goto	i1l84
 10342                           
 10343                           ;interrupts.c: 89: {
 10344                           ;interrupts.c: 90: PS_2_Read_Data_TEMP++;
 10345  002A  3001               	movlw	1
 10346  002B  0021               	movlb	1	; select bank1
 10347  002C  07C9               	addwf	_PS_2_Read_Data_TEMP^(0+128),f
 10348  002D  3000               	movlw	0
 10349  002E  3DCA               	addwfc	(_PS_2_Read_Data_TEMP+1)^(0+128),f
 10350  002F                     i1l84:	
 10351                           
 10352                           ;interrupts.c: 91: }
 10353                           ;interrupts.c: 92: if(PS_2_bits == 11)
 10354  002F  0021               	movlb	1	; select bank1
 10355  0030  0852               	movf	_PS_2_bits^(0+128),w
 10356  0031  3A0B               	xorlw	11
 10357  0032  1D03               	skipz
 10358  0033  2860               	goto	i1l5968
 10359                           
 10360                           ;interrupts.c: 93: {
 10361                           ;interrupts.c: 94: if(PS_2_Buffer_items < 12)
 10362  0034  300C               	movlw	12
 10363  0035  0251               	subwf	_PS_2_Buffer_items^(0+128),w
 10364  0036  1803               	skipnc
 10365  0037  285D               	goto	i1l5966
 10366                           
 10367                           ;interrupts.c: 95: {
 10368                           ;interrupts.c: 96: ScanTemp = (unsigned char) PS2RawToScan(PS_2_Read_Data_TEMP);
 10369  0038  084A               	movf	(_PS_2_Read_Data_TEMP+1)^(0+128),w
 10370  0039  01F9               	clrf	PS2RawToScan@Raw+1
 10371  003A  07F9               	addwf	PS2RawToScan@Raw+1,f
 10372  003B  0849               	movf	_PS_2_Read_Data_TEMP^(0+128),w
 10373  003C  01F8               	clrf	PS2RawToScan@Raw
 10374  003D  07F8               	addwf	PS2RawToScan@Raw,f
 10375  003E  319D  2555  3180   	fcall	_PS2RawToScan
 10376  0041  0878               	movf	?_PS2RawToScan,w
 10377  0042  0020               	movlb	0	; select bank0
 10378  0043  00EE               	movwf	??_isr
 10379  0044  086E               	movf	??_isr,w
 10380  0045  0021               	movlb	1	; select bank1
 10381  0046  00C4               	movwf	isr@ScanTemp^(0+128)
 10382                           
 10383                           ;interrupts.c: 97: if(ScanTemp)
 10384  0047  0844               	movf	isr@ScanTemp^(0+128),w
 10385  0048  1903               	btfsc	3,2
 10386  0049  285B               	goto	i1l87
 10387                           
 10388                           ;interrupts.c: 98: {
 10389                           ;interrupts.c: 100: PS_2_ScanCodes[PS_2_Buffer_items] = ScanTemp;
 10390  004A  0844               	movf	isr@ScanTemp^(0+128),w
 10391  004B  0020               	movlb	0	; select bank0
 10392  004C  00EE               	movwf	??_isr
 10393  004D  0021               	movlb	1	; select bank1
 10394  004E  0851               	movf	_PS_2_Buffer_items^(0+128),w
 10395  004F  3ED6               	addlw	_PS_2_ScanCodes& (0+255)
 10396  0050  0086               	movwf	6
 10397  0051  0187               	clrf	7
 10398  0052  0020               	movlb	0	; select bank0
 10399  0053  086E               	movf	??_isr,w
 10400  0054  0081               	movwf	1
 10401                           
 10402                           ;interrupts.c: 101: PS_2_Buffer_items++;
 10403  0055  3001               	movlw	1
 10404  0056  00EE               	movwf	??_isr
 10405  0057  086E               	movf	??_isr,w
 10406  0058  0021               	movlb	1	; select bank1
 10407  0059  07D1               	addwf	_PS_2_Buffer_items^(0+128),f
 10408                           
 10409                           ;interrupts.c: 102: }
 10410  005A  285D               	goto	i1l5966
 10411  005B                     i1l87:	
 10412                           
 10413                           ;interrupts.c: 103: else
 10414                           ;interrupts.c: 104: {
 10415                           ;interrupts.c: 106: ResendLastFlag = 1;
 10416  005B  01D3               	clrf	_ResendLastFlag^(0+128)
 10417  005C  0AD3               	incf	_ResendLastFlag^(0+128),f
 10418  005D                     i1l5966:	
 10419                           
 10420                           ;interrupts.c: 107: }
 10421                           ;interrupts.c: 109: }
 10422                           ;interrupts.c: 110: PS_2_bits = 0;
 10423  005D  01D2               	clrf	_PS_2_bits^(0+128)
 10424                           
 10425                           ;interrupts.c: 111: PS_2_Read_Data_TEMP = 0;
 10426  005E  01C9               	clrf	_PS_2_Read_Data_TEMP^(0+128)
 10427  005F  01CA               	clrf	(_PS_2_Read_Data_TEMP+1)^(0+128)
 10428  0060                     i1l5968:	
 10429                           
 10430                           ;interrupts.c: 112: }
 10431                           ;interrupts.c: 113: Timer2Reset();
 10432  0060  3198  2022  3180   	fcall	_Timer2Reset
 10433                           
 10434                           ;interrupts.c: 114: PIR1bits.TMR2IF = 0;
 10435  0063  0020               	movlb	0	; select bank0
 10436  0064  1091               	bcf	17,1	;volatile
 10437                           
 10438                           ;interrupts.c: 115: PIE1bits.TMR2IE = 1;
 10439  0065  0021               	movlb	1	; select bank1
 10440  0066  1491               	bsf	17,1	;volatile
 10441                           
 10442                           ;interrupts.c: 116: Timer2ON();
 10443  0067  3198  2025  3180   	fcall	i1_Timer2ON
 10444                           
 10445                           ;interrupts.c: 117: IOCAF &= ~0b00100000;
 10446  006A  30DF               	movlw	223
 10447  006B  0020               	movlb	0	; select bank0
 10448  006C  00EE               	movwf	??_isr
 10449  006D  086E               	movf	??_isr,w
 10450  006E  0027               	movlb	7	; select bank7
 10451  006F  0593               	andwf	19,f	;volatile
 10452                           
 10453                           ;interrupts.c: 118: PS_2_ENABLE_INTERRUPT(0b00100000);
 10454  0070  3020               	movlw	32
 10455  0071  3198  2086  3180   	fcall	i1_PS_2_ENABLE_INTERRUPT
 10456                           
 10457                           ;interrupts.c: 119: }
 10458  0074  28E1               	goto	i1l102
 10459  0075                     i1l83:	
 10460                           
 10461                           ;interrupts.c: 120: else if (IOCAF & 0b00010000)
 10462  0075  1E13               	btfss	19,4	;volatile
 10463  0076  2882               	goto	i1l90
 10464                           
 10465                           ;interrupts.c: 121: {
 10466                           ;interrupts.c: 122: PS_2_DISABLE_INTERRUPT(0b00010000);
 10467  0077  3010               	movlw	16
 10468  0078  3198  20F9  3180   	fcall	i1_PS_2_DISABLE_INTERRUPT
 10469                           
 10470                           ;interrupts.c: 123: IOCAF &= ~0b00010000;
 10471  007B  30EF               	movlw	239
 10472  007C  0020               	movlb	0	; select bank0
 10473  007D  00EE               	movwf	??_isr
 10474  007E  086E               	movf	??_isr,w
 10475  007F  0027               	movlb	7	; select bank7
 10476  0080  0593               	andwf	19,f	;volatile
 10477                           
 10478                           ;interrupts.c: 124: }
 10479  0081  28E1               	goto	i1l102
 10480  0082                     i1l90:	
 10481                           
 10482                           ;interrupts.c: 125: else if (PIR1bits.RCIF)
 10483  0082  0020               	movlb	0	; select bank0
 10484  0083  1E91               	btfss	17,5	;volatile
 10485  0084  28BF               	goto	i1l92
 10486                           
 10487                           ;interrupts.c: 126: {
 10488                           ;interrupts.c: 129: LATC |= 0b00001000;
 10489  0085  0022               	movlb	2	; select bank2
 10490  0086  158E               	bsf	14,3	;volatile
 10491                           
 10492                           ;interrupts.c: 130: SinLEDtimer = 0;
 10493  0087  0024               	movlb	4	; select bank4
 10494  0088  01DA               	clrf	_SinLEDtimer^(0+512)
 10495  0089  01DB               	clrf	(_SinLEDtimer+1)^(0+512)
 10496                           
 10497                           ;interrupts.c: 131: Rx_fault = 0;
 10498  008A  0021               	movlb	1	; select bank1
 10499  008B  01C2               	clrf	isr@Rx_fault^(0+128)
 10500                           
 10501                           ;interrupts.c: 132: if(RC1STAbits.FERR)
 10502  008C  0023               	movlb	3	; select bank3
 10503  008D  1D1D               	btfss	29,2	;volatile
 10504  008E  2892               	goto	i1l5992
 10505                           
 10506                           ;interrupts.c: 133: {
 10507                           ;interrupts.c: 134: Rx_fault =1;
 10508  008F  0021               	movlb	1	; select bank1
 10509  0090  01C2               	clrf	isr@Rx_fault^(0+128)
 10510  0091  0AC2               	incf	isr@Rx_fault^(0+128),f
 10511  0092                     i1l5992:	
 10512                           
 10513                           ;interrupts.c: 135: }
 10514                           ;interrupts.c: 136: rx = ReadUSART();
 10515  0092  3198  2054  3180   	fcall	i1_ReadUSART
 10516  0095  0020               	movlb	0	; select bank0
 10517  0096  00EE               	movwf	??_isr
 10518  0097  086E               	movf	??_isr,w
 10519  0098  0021               	movlb	1	; select bank1
 10520  0099  00C3               	movwf	isr@rx^(0+128)
 10521                           
 10522                           ;interrupts.c: 138: if(READ_CONFIG_PIN())
 10523  009A  3198  2045  3180   	fcall	_READ_CONFIG_PIN
 10524  009D  3A00               	xorlw	0
 10525  009E  1903               	skipnz
 10526  009F  28BC               	goto	i1l6002
 10527                           
 10528                           ;interrupts.c: 139: {
 10529                           ;interrupts.c: 140: if(Rx_fault == 1)
 10530  00A0  0021               	movlb	1	; select bank1
 10531  00A1  0842               	movf	isr@Rx_fault^(0+128),w
 10532  00A2  3A01               	xorlw	1
 10533  00A3  1D03               	skipz
 10534  00A4  28B0               	goto	i1l6000
 10535                           
 10536                           ;interrupts.c: 141: {
 10537                           ;interrupts.c: 142: if(rx == 0)
 10538  00A5  08C3               	movf	isr@rx^(0+128),f
 10539  00A6  1D03               	skipz
 10540  00A7  28BC               	goto	i1l6002
 10541                           
 10542                           ;interrupts.c: 143: {
 10543                           ;interrupts.c: 145: UART_send_break_timed(100000);
 10544  00A8  30A0               	movlw	160
 10545  00A9  00FA               	movwf	UART_send_break_timed@US
 10546  00AA  3086               	movlw	134
 10547  00AB  00FB               	movwf	UART_send_break_timed@US+1
 10548  00AC  3199  21B0  3180   	fcall	_UART_send_break_timed
 10549                           
 10550                           ;interrupts.c: 146: }
 10551                           ;interrupts.c: 147: }
 10552  00AF  28BC               	goto	i1l6002
 10553  00B0                     i1l6000:	
 10554                           
 10555                           ;interrupts.c: 148: else
 10556                           ;interrupts.c: 149: {
 10557                           ;interrupts.c: 150: UARTchar(rx, 1 ,RC1STAbits.RX9D);
 10558  00B0  01F8               	clrf	i1UARTchar@override
 10559  00B1  0AF8               	incf	i1UARTchar@override,f
 10560  00B2  3000               	movlw	0
 10561  00B3  0023               	movlb	3	; select bank3
 10562  00B4  181D               	btfsc	29,0	;volatile
 10563  00B5  3001               	movlw	1
 10564  00B6  00F9               	movwf	i1UARTchar@NinethBit_override_data
 10565  00B7  0021               	movlb	1	; select bank1
 10566  00B8  0843               	movf	isr@rx^(0+128),w
 10567  00B9  319F  2740  3180   	fcall	i1_UARTchar
 10568  00BC                     i1l6002:	
 10569                           
 10570                           ;interrupts.c: 151: }
 10571                           ;interrupts.c: 152: }
 10572                           ;interrupts.c: 168: PIR1bits.RCIF = 0;
 10573  00BC  0020               	movlb	0	; select bank0
 10574  00BD  1291               	bcf	17,5	;volatile
 10575                           
 10576                           ;interrupts.c: 169: }
 10577  00BE  28E1               	goto	i1l102
 10578  00BF                     i1l92:	
 10579                           
 10580                           ;interrupts.c: 170: else if(PIR1bits.TMR2IF)
 10581  00BF  1C91               	btfss	17,1	;volatile
 10582  00C0  28E1               	goto	i1l102
 10583                           
 10584                           ;interrupts.c: 171: {
 10585                           ;interrupts.c: 173: PIE1bits.TMR2IE = 0;
 10586  00C1  0021               	movlb	1	; select bank1
 10587  00C2  1091               	bcf	17,1	;volatile
 10588                           
 10589                           ;interrupts.c: 174: Timer2OFF();
 10590  00C3  3198  201F  3180   	fcall	_Timer2OFF
 10591                           
 10592                           ;interrupts.c: 175: PS_2_DISABLE_INTERRUPT(0b00100000);
 10593  00C6  3020               	movlw	32
 10594  00C7  3198  20F9  3180   	fcall	i1_PS_2_DISABLE_INTERRUPT
 10595                           
 10596                           ;interrupts.c: 176: PS_2_bits = 0;
 10597  00CA  0021               	movlb	1	; select bank1
 10598  00CB  01D2               	clrf	_PS_2_bits^(0+128)
 10599                           
 10600                           ;interrupts.c: 177: PS_2_Read_Data_TEMP = 0;
 10601  00CC  01C9               	clrf	_PS_2_Read_Data_TEMP^(0+128)
 10602  00CD  01CA               	clrf	(_PS_2_Read_Data_TEMP+1)^(0+128)
 10603                           
 10604                           ;interrupts.c: 178: if(ResendLastFlag)
 10605  00CE  0853               	movf	_ResendLastFlag^(0+128),w
 10606  00CF  1903               	btfsc	3,2
 10607  00D0  28D7               	goto	i1l6018
 10608                           
 10609                           ;interrupts.c: 179: {
 10610                           ;interrupts.c: 181: ResendLast();
 10611  00D1  3198  204C  3180   	fcall	_ResendLast
 10612                           
 10613                           ;interrupts.c: 182: ResendLastFlag = 0;
 10614  00D4  0021               	movlb	1	; select bank1
 10615  00D5  01D3               	clrf	_ResendLastFlag^(0+128)
 10616                           
 10617                           ;interrupts.c: 183: }
 10618  00D6  28DA               	goto	i1l6020
 10619  00D7                     i1l6018:	
 10620                           
 10621                           ;interrupts.c: 184: else
 10622                           ;interrupts.c: 185: {
 10623                           ;interrupts.c: 186: Process_PS2_ScanCode();
 10624  00D7  3181  211B  3180   	fcall	_Process_PS2_ScanCode
 10625  00DA                     i1l6020:	
 10626                           
 10627                           ;interrupts.c: 187: }
 10628                           ;interrupts.c: 189: PIE1bits.RCIE = 1;
 10629  00DA  0021               	movlb	1	; select bank1
 10630  00DB  1691               	bsf	17,5	;volatile
 10631                           
 10632                           ;interrupts.c: 191: PS_2_ENABLE_INTERRUPT(0b00100000);
 10633  00DC  3020               	movlw	32
 10634  00DD  3198  2086         	fcall	i1_PS_2_ENABLE_INTERRUPT
 10635                           
 10636                           ;interrupts.c: 192: PIR1bits.TMR2IF =0;
 10637  00DF  0020               	movlb	0	; select bank0
 10638  00E0  1091               	bcf	17,1	;volatile
 10639  00E1                     i1l102:	
 10640  00E1  0020               	movlb	0	; select bank0
 10641  00E2  086F               	movf	??_isr+1,w
 10642  00E3  00FF               	movwf	127
 10643  00E4  107E               	bcf	126,0	;clear compiler interrupt flag
 10644  00E5  0009               	retfie
 10645  00E6                     __end_of_isr:	
 10646                           
 10647                           	psect	text36
 10648  1825                     __ptext36:	
 10649 ;; *************** function i1_Timer2ON *****************
 10650 ;; Defined at:
 10651 ;;		line 59 in file "Timer.c"
 10652 ;; Parameters:    Size  Location     Type
 10653 ;;		None
 10654 ;; Auto vars:     Size  Location     Type
 10655 ;;		None
 10656 ;; Return value:  Size  Location     Type
 10657 ;;		None               void
 10658 ;; Registers used:
 10659 ;;		None
 10660 ;; Tracked objects:
 10661 ;;		On entry : 0/0
 10662 ;;		On exit  : 0/0
 10663 ;;		Unchanged: 0/0
 10664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10668 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10669 ;;Total ram usage:        0 bytes
 10670 ;; Hardware stack levels used:    1
 10671 ;; This function calls:
 10672 ;;		Nothing
 10673 ;; This function is called by:
 10674 ;;		_isr
 10675 ;; This function uses a non-reentrant model
 10676 ;;
 10677                           
 10678                           
 10679                           ;psect for function i1_Timer2ON
 10680  1825                     i1_Timer2ON:	
 10681                           
 10682                           ;Timer.c: 61: T2CONbits.TMR2ON = 1;
 10683                           
 10684                           ;incstack = 0
 10685                           ; Regs used in i1_Timer2ON: []
 10686  1825  0020               	movlb	0	; select bank0
 10687  1826  151C               	bsf	28,2	;volatile
 10688  1827  0008               	return
 10689  1828                     __end_ofi1_Timer2ON:	
 10690                           
 10691                           	psect	text37
 10692  1886                     __ptext37:	
 10693 ;; *************** function i1_PS_2_ENABLE_INTERRUPT *****************
 10694 ;; Defined at:
 10695 ;;		line 194 in file "PS_2.c"
 10696 ;; Parameters:    Size  Location     Type
 10697 ;;  DATA_CLK        1    wreg     unsigned char 
 10698 ;; Auto vars:     Size  Location     Type
 10699 ;;  DATA_CLK        1    0[COMMON] unsigned char 
 10700 ;; Return value:  Size  Location     Type
 10701 ;;		None               void
 10702 ;; Registers used:
 10703 ;;		wreg
 10704 ;; Tracked objects:
 10705 ;;		On entry : 0/0
 10706 ;;		On exit  : 0/0
 10707 ;;		Unchanged: 0/0
 10708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10710 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10712 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10713 ;;Total ram usage:        1 bytes
 10714 ;; Hardware stack levels used:    1
 10715 ;; This function calls:
 10716 ;;		Nothing
 10717 ;; This function is called by:
 10718 ;;		_isr
 10719 ;; This function uses a non-reentrant model
 10720 ;;
 10721                           
 10722                           
 10723                           ;psect for function i1_PS_2_ENABLE_INTERRUPT
 10724  1886                     i1_PS_2_ENABLE_INTERRUPT:	
 10725                           
 10726                           ;incstack = 0
 10727                           ; Regs used in i1_PS_2_ENABLE_INTERRUPT: [wreg]
 10728                           ;i1PS_2_ENABLE_INTERRUPT@DATA_CLK stored from wreg
 10729  1886  00F0               	movwf	i1PS_2_ENABLE_INTERRUPT@DATA_CLK
 10730                           
 10731                           ;PS_2.c: 196: if(DATA_CLK == 0b00100000)
 10732  1887  0870               	movf	i1PS_2_ENABLE_INTERRUPT@DATA_CLK,w
 10733  1888  3A20               	xorlw	32
 10734  1889  1D03               	skipz
 10735  188A  288E               	goto	i1l642
 10736                           
 10737                           ;PS_2.c: 197: {
 10738                           ;PS_2.c: 200: IOCAN |= 0b00100000;
 10739  188B  0027               	movlb	7	; select bank7
 10740  188C  1692               	bsf	18,5	;volatile
 10741                           
 10742                           ;PS_2.c: 202: }
 10743  188D  0008               	return
 10744  188E                     i1l642:	
 10745                           
 10746                           ;PS_2.c: 203: else
 10747                           ;PS_2.c: 204: {
 10748                           ;PS_2.c: 207: IOCAN |= 0b00010000;
 10749  188E  0027               	movlb	7	; select bank7
 10750  188F  1612               	bsf	18,4	;volatile
 10751  1890  0008               	return
 10752  1891                     __end_ofi1_PS_2_ENABLE_INTERRUPT:	
 10753                           
 10754                           	psect	text38
 10755  1822                     __ptext38:	
 10756 ;; *************** function _Timer2Reset *****************
 10757 ;; Defined at:
 10758 ;;		line 81 in file "Timer.c"
 10759 ;; Parameters:    Size  Location     Type
 10760 ;;		None
 10761 ;; Auto vars:     Size  Location     Type
 10762 ;;		None
 10763 ;; Return value:  Size  Location     Type
 10764 ;;		None               void
 10765 ;; Registers used:
 10766 ;;		status,2
 10767 ;; Tracked objects:
 10768 ;;		On entry : 0/0
 10769 ;;		On exit  : 0/0
 10770 ;;		Unchanged: 0/0
 10771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10775 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10776 ;;Total ram usage:        0 bytes
 10777 ;; Hardware stack levels used:    1
 10778 ;; This function calls:
 10779 ;;		Nothing
 10780 ;; This function is called by:
 10781 ;;		_isr
 10782 ;; This function uses a non-reentrant model
 10783 ;;
 10784                           
 10785                           
 10786                           ;psect for function _Timer2Reset
 10787  1822                     _Timer2Reset:	
 10788                           
 10789                           ;Timer.c: 83: TMR2 = 0;
 10790                           
 10791                           ;incstack = 0
 10792                           ; Regs used in _Timer2Reset: [status,2]
 10793  1822  0020               	movlb	0	; select bank0
 10794  1823  019A               	clrf	26	;volatile
 10795  1824  0008               	return
 10796  1825                     __end_of_Timer2Reset:	
 10797                           
 10798                           	psect	text39
 10799  181F                     __ptext39:	
 10800 ;; *************** function _Timer2OFF *****************
 10801 ;; Defined at:
 10802 ;;		line 70 in file "Timer.c"
 10803 ;; Parameters:    Size  Location     Type
 10804 ;;		None
 10805 ;; Auto vars:     Size  Location     Type
 10806 ;;		None
 10807 ;; Return value:  Size  Location     Type
 10808 ;;		None               void
 10809 ;; Registers used:
 10810 ;;		None
 10811 ;; Tracked objects:
 10812 ;;		On entry : 0/0
 10813 ;;		On exit  : 0/0
 10814 ;;		Unchanged: 0/0
 10815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10819 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10820 ;;Total ram usage:        0 bytes
 10821 ;; Hardware stack levels used:    1
 10822 ;; This function calls:
 10823 ;;		Nothing
 10824 ;; This function is called by:
 10825 ;;		_isr
 10826 ;; This function uses a non-reentrant model
 10827 ;;
 10828                           
 10829                           
 10830                           ;psect for function _Timer2OFF
 10831  181F                     _Timer2OFF:	
 10832                           
 10833                           ;Timer.c: 72: T2CONbits.TMR2ON = 0;
 10834                           
 10835                           ;incstack = 0
 10836                           ; Regs used in _Timer2OFF: []
 10837  181F  0020               	movlb	0	; select bank0
 10838  1820  111C               	bcf	28,2	;volatile
 10839  1821  0008               	return
 10840  1822                     __end_of_Timer2OFF:	
 10841                           
 10842                           	psect	text40
 10843  184C                     __ptext40:	
 10844 ;; *************** function _ResendLast *****************
 10845 ;; Defined at:
 10846 ;;		line 980 in file "PS_2.c"
 10847 ;; Parameters:    Size  Location     Type
 10848 ;;		None
 10849 ;; Auto vars:     Size  Location     Type
 10850 ;;		None
 10851 ;; Return value:  Size  Location     Type
 10852 ;;		None               void
 10853 ;; Registers used:
 10854 ;;		wreg, status,2, status,0, pclath, cstack
 10855 ;; Tracked objects:
 10856 ;;		On entry : 0/0
 10857 ;;		On exit  : 0/0
 10858 ;;		Unchanged: 0/0
 10859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10863 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10864 ;;Total ram usage:        0 bytes
 10865 ;; Hardware stack levels used:    1
 10866 ;; Hardware stack levels required when called:    2
 10867 ;; This function calls:
 10868 ;;		i1_PS_2_DISABLE_INTERRUPT
 10869 ;;		i1_Send_PS2
 10870 ;; This function is called by:
 10871 ;;		_isr
 10872 ;; This function uses a non-reentrant model
 10873 ;;
 10874                           
 10875                           
 10876                           ;psect for function _ResendLast
 10877  184C                     _ResendLast:	
 10878                           
 10879                           ;PS_2.c: 982: PS_2_DISABLE_INTERRUPT(0b00100000);
 10880                           
 10881                           ;incstack = 0
 10882                           ; Regs used in _ResendLast: [wreg+status,2+status,0+pclath+cstack]
 10883  184C  3020               	movlw	32
 10884  184D  3198  20F9  3198   	fcall	i1_PS_2_DISABLE_INTERRUPT
 10885                           
 10886                           ;PS_2.c: 984: Send_PS2(0xFE);
 10887  1850  30FE               	movlw	254
 10888  1851  318C  24DE         	fcall	i1_Send_PS2
 10889  1853  0008               	return
 10890  1854                     __end_of_ResendLast:	
 10891                           
 10892                           	psect	text41
 10893  18F9                     __ptext41:	
 10894 ;; *************** function i1_PS_2_DISABLE_INTERRUPT *****************
 10895 ;; Defined at:
 10896 ;;		line 173 in file "PS_2.c"
 10897 ;; Parameters:    Size  Location     Type
 10898 ;;  DATA_CLK        1    wreg     unsigned char 
 10899 ;; Auto vars:     Size  Location     Type
 10900 ;;  DATA_CLK        1    1[COMMON] unsigned char 
 10901 ;; Return value:  Size  Location     Type
 10902 ;;		None               void
 10903 ;; Registers used:
 10904 ;;		wreg, status,2, status,0
 10905 ;; Tracked objects:
 10906 ;;		On entry : 0/0
 10907 ;;		On exit  : 0/0
 10908 ;;		Unchanged: 0/0
 10909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10911 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10912 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10913 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10914 ;;Total ram usage:        2 bytes
 10915 ;; Hardware stack levels used:    1
 10916 ;; This function calls:
 10917 ;;		Nothing
 10918 ;; This function is called by:
 10919 ;;		_isr
 10920 ;;		_ResendLast
 10921 ;; This function uses a non-reentrant model
 10922 ;;
 10923                           
 10924                           
 10925                           ;psect for function i1_PS_2_DISABLE_INTERRUPT
 10926  18F9                     i1_PS_2_DISABLE_INTERRUPT:	
 10927                           
 10928                           ;incstack = 0
 10929                           ; Regs used in i1_PS_2_DISABLE_INTERRUPT: [wreg+status,2+status,0]
 10930                           ;i1PS_2_DISABLE_INTERRUPT@DATA_CLK stored from wreg
 10931  18F9  00F1               	movwf	i1PS_2_DISABLE_INTERRUPT@DATA_CLK
 10932                           
 10933                           ;PS_2.c: 175: if(DATA_CLK == 0b00100000)
 10934  18FA  0871               	movf	i1PS_2_DISABLE_INTERRUPT@DATA_CLK,w
 10935  18FB  3A20               	xorlw	32
 10936  18FC  1D03               	skipz
 10937  18FD  2904               	goto	i1l5116
 10938                           
 10939                           ;PS_2.c: 176: {
 10940                           ;PS_2.c: 179: IOCAN &= ~0b00100000;
 10941  18FE  30DF               	movlw	223
 10942  18FF  00F0               	movwf	??i1_PS_2_DISABLE_INTERRUPT
 10943  1900  0870               	movf	??i1_PS_2_DISABLE_INTERRUPT,w
 10944  1901  0027               	movlb	7	; select bank7
 10945  1902  0592               	andwf	18,f	;volatile
 10946                           
 10947                           ;PS_2.c: 180: }
 10948  1903  0008               	return
 10949  1904                     i1l5116:	
 10950                           
 10951                           ;PS_2.c: 181: else
 10952                           ;PS_2.c: 182: {
 10953                           ;PS_2.c: 185: IOCAN &= ~0b00010000;
 10954  1904  30EF               	movlw	239
 10955  1905  00F0               	movwf	??i1_PS_2_DISABLE_INTERRUPT
 10956  1906  0870               	movf	??i1_PS_2_DISABLE_INTERRUPT,w
 10957  1907  0027               	movlb	7	; select bank7
 10958  1908  0592               	andwf	18,f	;volatile
 10959  1909  0008               	return
 10960  190A                     __end_ofi1_PS_2_DISABLE_INTERRUPT:	
 10961                           
 10962                           	psect	text42
 10963  1845                     __ptext42:	
 10964 ;; *************** function _READ_CONFIG_PIN *****************
 10965 ;; Defined at:
 10966 ;;		line 144 in file "MISC.c"
 10967 ;; Parameters:    Size  Location     Type
 10968 ;;		None
 10969 ;; Auto vars:     Size  Location     Type
 10970 ;;		None
 10971 ;; Return value:  Size  Location     Type
 10972 ;;                  1    wreg      unsigned char 
 10973 ;; Registers used:
 10974 ;;		wreg
 10975 ;; Tracked objects:
 10976 ;;		On entry : 0/0
 10977 ;;		On exit  : 0/0
 10978 ;;		Unchanged: 0/0
 10979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10984 ;;Total ram usage:        0 bytes
 10985 ;; Hardware stack levels used:    1
 10986 ;; This function calls:
 10987 ;;		Nothing
 10988 ;; This function is called by:
 10989 ;;		_isr
 10990 ;; This function uses a non-reentrant model
 10991 ;;
 10992                           
 10993                           
 10994                           ;psect for function _READ_CONFIG_PIN
 10995  1845                     _READ_CONFIG_PIN:	
 10996                           
 10997                           ;MISC.c: 147: if((PORTC & 0b00000001) == 0b00000001)
 10998                           
 10999                           ;incstack = 0
 11000                           ; Regs used in _READ_CONFIG_PIN: [wreg]
 11001  1845  0020               	movlb	0	; select bank0
 11002  1846  1C0E               	btfss	14,0	;volatile
 11003  1847  284A               	goto	i1l5292
 11004                           
 11005                           ;MISC.c: 148: {
 11006                           ;MISC.c: 149: return (1);
 11007  1848  3001               	movlw	1
 11008  1849  0008               	return
 11009  184A                     i1l5292:	
 11010                           
 11011                           ;MISC.c: 150: }
 11012                           ;MISC.c: 151: return 0;
 11013  184A  3000               	movlw	0
 11014  184B  0008               	return
 11015  184C                     __end_of_READ_CONFIG_PIN:	
 11016                           
 11017                           	psect	text43
 11018  011B                     __ptext43:	
 11019 ;; *************** function _Process_PS2_ScanCode *****************
 11020 ;; Defined at:
 11021 ;;		line 252 in file "PS_2.c"
 11022 ;; Parameters:    Size  Location     Type
 11023 ;;		None
 11024 ;; Auto vars:     Size  Location     Type
 11025 ;;  buf            60    0[BANK3 ] unsigned char [60]
 11026 ;;  temp            1   64[BANK3 ] unsigned char 
 11027 ;; Return value:  Size  Location     Type
 11028 ;;		None               void
 11029 ;; Registers used:
 11030 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11031 ;; Tracked objects:
 11032 ;;		On entry : 0/0
 11033 ;;		On exit  : 0/0
 11034 ;;		Unchanged: 0/0
 11035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11037 ;;      Locals:         0       0       0       0      65       0       0       0       0       0       0       0       
      +0       0
 11038 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 11039 ;;      Totals:         0       0       6       0      65       0       0       0       0       0       0       0       
      +0       0
 11040 ;;Total ram usage:       71 bytes
 11041 ;; Hardware stack levels used:    1
 11042 ;; Hardware stack levels required when called:    5
 11043 ;; This function calls:
 11044 ;;		_BufferShiftBack
 11045 ;;		_Decode_Scan_Code
 11046 ;;		_Decode_Scan_Code_Function
 11047 ;;		_Decode_Scan_Code_FunctionE0
 11048 ;;		_Decode_Scan_Code_Shift
 11049 ;;		_ISNUMBER
 11050 ;;		_SetBaud
 11051 ;;		_UART_send_break
 11052 ;;		_UART_send_break_timed
 11053 ;;		___lmul
 11054 ;;		_cleanBuffer
 11055 ;;		_sprintf
 11056 ;;		i1_Send_PS2
 11057 ;;		i1_UARTchar
 11058 ;;		i1_UARTstringWAIT
 11059 ;;		i1_delayUS
 11060 ;; This function is called by:
 11061 ;;		_isr
 11062 ;; This function uses a non-reentrant model
 11063 ;;
 11064                           
 11065                           
 11066                           ;psect for function _Process_PS2_ScanCode
 11067  011B                     _Process_PS2_ScanCode:	
 11068                           
 11069                           ;PS_2.c: 254: unsigned char temp =0;
 11070                           
 11071                           ;incstack = 0
 11072                           ; Regs used in _Process_PS2_ScanCode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11073  011B  0023               	movlb	3	; select bank3
 11074  011C  01E0               	clrf	Process_PS2_ScanCode@temp^(0+384)
 11075                           
 11076                           ;PS_2.c: 255: unsigned char buf[60];
 11077                           ;PS_2.c: 257: if(PS_2_Buffer_items != 0)
 11078  011D  0021               	movlb	1	; select bank1
 11079  011E  0851               	movf	_PS_2_Buffer_items^(0+128),w
 11080  011F  1903               	btfsc	3,2
 11081  0120  0008               	return
 11082  0121                     i1l5786:	
 11083                           ;PS_2.c: 258: {
 11084                           ;PS_2.c: 260: while(PS_2_Buffer_items != 0)
 11085                           
 11086  0121  0021               	movlb	1	; select bank1
 11087  0122  08D1               	movf	_PS_2_Buffer_items^(0+128),f
 11088  0123  1903               	btfsc	3,2
 11089  0124  0008               	return
 11090                           
 11091                           ;PS_2.c: 261: {
 11092                           ;PS_2.c: 263: if(PS_2_ScanCodes[0])
 11093  0125  0856               	movf	_PS_2_ScanCodes^(0+128),w
 11094  0126  1903               	btfsc	3,2
 11095  0127  2E64               	goto	i1l5782
 11096                           
 11097                           ;PS_2.c: 264: {
 11098                           ;PS_2.c: 266: PS_2_Read_Data_First = PS_2_ScanCodes[0];
 11099  0128  0856               	movf	_PS_2_ScanCodes^(0+128),w
 11100  0129  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11101  012A  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11102  012B  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11103  012C  0023               	movlb	3	; select bank3
 11104  012D  00E1               	movwf	_PS_2_Read_Data_First^(0+384)
 11105  012E  0021               	movlb	1	; select bank1
 11106  012F  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11107  0130  0023               	movlb	3	; select bank3
 11108  0131  00E2               	movwf	(_PS_2_Read_Data_First+1)^(0+384)
 11109                           
 11110                           ;PS_2.c: 267: if(PS_2_Read_Data_First == 0xF0)
 11111  0132  30F0               	movlw	240
 11112  0133  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11113  0134  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11114  0135  1D03               	skipz
 11115  0136  294E               	goto	i1l5316
 11116                           
 11117                           ;PS_2.c: 268: {
 11118                           ;PS_2.c: 269: PS_2_Read_Data_First = PS_2_ScanCodes[0];
 11119  0137  0021               	movlb	1	; select bank1
 11120  0138  0856               	movf	_PS_2_ScanCodes^(0+128),w
 11121  0139  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11122  013A  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11123  013B  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11124  013C  0023               	movlb	3	; select bank3
 11125  013D  00E1               	movwf	_PS_2_Read_Data_First^(0+384)
 11126  013E  0021               	movlb	1	; select bank1
 11127  013F  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11128  0140  0023               	movlb	3	; select bank3
 11129  0141  00E2               	movwf	(_PS_2_Read_Data_First+1)^(0+384)
 11130                           
 11131                           ;PS_2.c: 270: PS_2_Read_Data_Second = PS_2_ScanCodes[1];
 11132  0142  0021               	movlb	1	; select bank1
 11133  0143  0857               	movf	(_PS_2_ScanCodes^(0+128)+1),w
 11134  0144  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11135  0145  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11136  0146  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11137  0147  0023               	movlb	3	; select bank3
 11138  0148  00E3               	movwf	_PS_2_Read_Data_Second^(0+384)
 11139  0149  0021               	movlb	1	; select bank1
 11140  014A  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11141  014B  0023               	movlb	3	; select bank3
 11142  014C  00E4               	movwf	(_PS_2_Read_Data_Second+1)^(0+384)
 11143  014D  299D               	goto	i1l5340
 11144  014E                     i1l5316:	
 11145                           ;PS_2.c: 273: }
 11146                           
 11147                           ;PS_2.c: 272: BufferShiftBack(PS_2_ScanCodes,2,12);
 11148                           
 11149                           ;PS_2.c: 271: PS_2_Buffer_items -= 2;
 11150                           
 11151                           
 11152                           ;PS_2.c: 274: else if(PS_2_Read_Data_First == 0xE0)
 11153  014E  30E0               	movlw	224
 11154  014F  0023               	movlb	3	; select bank3
 11155  0150  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11156  0151  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11157  0152  1D03               	skipz
 11158  0153  29A8               	goto	i1l5344
 11159                           
 11160                           ;PS_2.c: 275: {
 11161                           ;PS_2.c: 276: PS_2_Read_Data_Second = PS_2_ScanCodes[1];
 11162  0154  0021               	movlb	1	; select bank1
 11163  0155  0857               	movf	(_PS_2_ScanCodes^(0+128)+1),w
 11164  0156  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11165  0157  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11166  0158  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11167  0159  0023               	movlb	3	; select bank3
 11168  015A  00E3               	movwf	_PS_2_Read_Data_Second^(0+384)
 11169  015B  0021               	movlb	1	; select bank1
 11170  015C  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11171  015D  0023               	movlb	3	; select bank3
 11172  015E  00E4               	movwf	(_PS_2_Read_Data_Second+1)^(0+384)
 11173                           
 11174                           ;PS_2.c: 277: if(PS_2_Read_Data_Second == 0x12)
 11175  015F  3012               	movlw	18
 11176  0160  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11177  0161  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11178  0162  1D03               	skipz
 11179  0163  2977               	goto	i1l5326
 11180                           
 11181                           ;PS_2.c: 278: {
 11182                           ;PS_2.c: 280: PS_2_Read_Data_First = 0;
 11183  0164  01E1               	clrf	_PS_2_Read_Data_First^(0+384)
 11184  0165  01E2               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
 11185                           
 11186                           ;PS_2.c: 281: PS_2_Read_Data_Second = 0;
 11187  0166  01E3               	clrf	_PS_2_Read_Data_Second^(0+384)
 11188  0167  01E4               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
 11189                           
 11190                           ;PS_2.c: 282: PS_2_Buffer_items -= 4;
 11191  0168  3004               	movlw	4
 11192  0169  0021               	movlb	1	; select bank1
 11193  016A  02D1               	subwf	_PS_2_Buffer_items^(0+128),f
 11194                           
 11195                           ;PS_2.c: 283: BufferShiftBack(PS_2_ScanCodes,4,12);
 11196  016B  3004               	movlw	4
 11197  016C  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11198  016D  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11199  016E  00F0               	movwf	BufferShiftBack@shift
 11200  016F  300C               	movlw	12
 11201  0170  00BD               	movwf	(??_Process_PS2_ScanCode+1)^(0+128)
 11202  0171  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11203  0172  00F1               	movwf	BufferShiftBack@size
 11204  0173  30D6               	movlw	_PS_2_ScanCodes& (0+255)
 11205  0174  319C  244C  3181   	fcall	_BufferShiftBack
 11206  0177                     i1l5326:	
 11207                           
 11208                           ;PS_2.c: 284: }
 11209                           ;PS_2.c: 285: if(PS_2_Read_Data_Second == 0xF0)
 11210  0177  30F0               	movlw	240
 11211  0178  0023               	movlb	3	; select bank3
 11212  0179  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11213  017A  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11214  017B  1D03               	skipz
 11215  017C  299D               	goto	i1l5340
 11216                           
 11217                           ;PS_2.c: 286: {
 11218                           ;PS_2.c: 287: PS_2_Read_Data_Third = PS_2_ScanCodes[2];
 11219  017D  0021               	movlb	1	; select bank1
 11220  017E  0858               	movf	(_PS_2_ScanCodes^(0+128)+2),w
 11221  017F  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11222  0180  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11223  0181  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11224  0182  0023               	movlb	3	; select bank3
 11225  0183  00E5               	movwf	_PS_2_Read_Data_Third^(0+384)
 11226  0184  0021               	movlb	1	; select bank1
 11227  0185  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11228  0186  0023               	movlb	3	; select bank3
 11229  0187  00E6               	movwf	(_PS_2_Read_Data_Third+1)^(0+384)
 11230                           
 11231                           ;PS_2.c: 288: if(PS_2_Read_Data_Third == 0x7C)
 11232  0188  307C               	movlw	124
 11233  0189  0665               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 11234  018A  0466               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11235  018B  1D03               	skipz
 11236  018C  2998               	goto	i1l5336
 11237                           
 11238                           ;PS_2.c: 289: {
 11239                           ;PS_2.c: 291: PS_2_Read_Data_First = 0;
 11240  018D  01E1               	clrf	_PS_2_Read_Data_First^(0+384)
 11241  018E  01E2               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
 11242                           
 11243                           ;PS_2.c: 292: PS_2_Read_Data_Second = 0;
 11244  018F  01E3               	clrf	_PS_2_Read_Data_Second^(0+384)
 11245  0190  01E4               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
 11246                           
 11247                           ;PS_2.c: 293: PS_2_Read_Data_Third = 0;
 11248  0191  01E5               	clrf	_PS_2_Read_Data_Third^(0+384)
 11249  0192  01E6               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
 11250                           
 11251                           ;PS_2.c: 294: PS_2_Buffer_items -= 6;
 11252  0193  3006               	movlw	6
 11253  0194  0021               	movlb	1	; select bank1
 11254  0195  02D1               	subwf	_PS_2_Buffer_items^(0+128),f
 11255                           
 11256                           ;PS_2.c: 295: BufferShiftBack(PS_2_ScanCodes,6,12);
 11257  0196  3006               	movlw	6
 11258  0197  29A1               	goto	L18
 11259  0198                     i1l5336:	
 11260                           ;PS_2.c: 296: }
 11261                           
 11262                           
 11263                           ;PS_2.c: 297: else
 11264                           ;PS_2.c: 298: {
 11265                           ;PS_2.c: 299: PS_2_Buffer_items -= 3;
 11266  0198  3003               	movlw	3
 11267  0199  0021               	movlb	1	; select bank1
 11268  019A  02D1               	subwf	_PS_2_Buffer_items^(0+128),f
 11269                           
 11270                           ;PS_2.c: 300: BufferShiftBack(PS_2_ScanCodes,3,12);
 11271  019B  3003               	movlw	3
 11272  019C  29A1               	goto	L18
 11273  019D                     i1l5340:	
 11274                           ;PS_2.c: 301: }
 11275                           ;PS_2.c: 302: }
 11276                           
 11277                           
 11278                           ;PS_2.c: 303: else
 11279                           ;PS_2.c: 304: {
 11280                           ;PS_2.c: 305: PS_2_Buffer_items -= 2;
 11281  019D  3002               	movlw	2
 11282  019E  0021               	movlb	1	; select bank1
 11283  019F  02D1               	subwf	_PS_2_Buffer_items^(0+128),f
 11284                           
 11285                           ;PS_2.c: 306: BufferShiftBack(PS_2_ScanCodes,2,12);
 11286  01A0  3002               	movlw	2
 11287  01A1                     L18:	
 11288  01A1  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11289  01A2  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11290  01A3  00F0               	movwf	BufferShiftBack@shift
 11291  01A4  300C               	movlw	12
 11292  01A5  00BD               	movwf	(??_Process_PS2_ScanCode+1)^(0+128)
 11293  01A6  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11294  01A7  29B0               	goto	L15
 11295  01A8                     i1l5344:	
 11296                           ;PS_2.c: 307: }
 11297                           ;PS_2.c: 308: }
 11298                           
 11299                           
 11300                           ;PS_2.c: 309: else
 11301                           ;PS_2.c: 310: {
 11302                           ;PS_2.c: 311: PS_2_Buffer_items -= 1;
 11303  01A8  3001               	movlw	1
 11304  01A9  0021               	movlb	1	; select bank1
 11305  01AA  02D1               	subwf	_PS_2_Buffer_items^(0+128),f
 11306                           
 11307                           ;PS_2.c: 312: BufferShiftBack(PS_2_ScanCodes,1,12);
 11308  01AB  01F0               	clrf	BufferShiftBack@shift
 11309  01AC  0AF0               	incf	BufferShiftBack@shift,f
 11310  01AD  300C               	movlw	12
 11311  01AE  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11312  01AF  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11313  01B0                     L15:	
 11314  01B0  00F1               	movwf	BufferShiftBack@size
 11315  01B1  30D6               	movlw	_PS_2_ScanCodes& (0+255)
 11316  01B2  319C  244C  3181   	fcall	_BufferShiftBack
 11317                           
 11318                           ;PS_2.c: 313: }
 11319                           ;PS_2.c: 316: if(PS_2_Read_Data_Third)
 11320  01B5  0023               	movlb	3	; select bank3
 11321  01B6  0866               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11322  01B7  0465               	iorwf	_PS_2_Read_Data_Third^(0+384),w
 11323  01B8  1903               	skipnz
 11324  01B9  29DC               	goto	i1l5366
 11325                           
 11326                           ;PS_2.c: 317: {
 11327                           ;PS_2.c: 319: if(PS_2_Read_Data_First == 0xE0)
 11328  01BA  30E0               	movlw	224
 11329  01BB  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11330  01BC  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11331  01BD  1D03               	skipz
 11332  01BE  2AB5               	goto	i1l5462
 11333                           
 11334                           ;PS_2.c: 320: {
 11335                           ;PS_2.c: 321: if(PS_2_Read_Data_Second == 0xF0)
 11336  01BF  30F0               	movlw	240
 11337  01C0  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11338  01C1  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11339  01C2  1D03               	skipz
 11340  01C3  2AB5               	goto	i1l5462
 11341                           
 11342                           ;PS_2.c: 322: {
 11343                           ;PS_2.c: 323: if(PS_2_Read_Data_Third == 0x11 )
 11344  01C4  3011               	movlw	17
 11345  01C5  0665               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 11346  01C6  0466               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11347  01C7  1D03               	skipz
 11348  01C8  29CB               	goto	i1l5358
 11349                           
 11350                           ;PS_2.c: 324: {
 11351                           ;PS_2.c: 325: LALT = 0;
 11352  01C9  01E9               	clrf	_LALT^(0+384)
 11353                           
 11354                           ;PS_2.c: 326: }
 11355  01CA  2AB5               	goto	i1l5462
 11356  01CB                     i1l5358:	
 11357                           
 11358                           ;PS_2.c: 327: else if(PS_2_Read_Data_Third == 0x14 )
 11359  01CB  3014               	movlw	20
 11360  01CC  0665               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 11361  01CD  0466               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11362  01CE  1D03               	skipz
 11363  01CF  29D3               	goto	i1l5362
 11364                           
 11365                           ;PS_2.c: 328: {
 11366                           ;PS_2.c: 329: LControl = 0;
 11367  01D0  0021               	movlb	1	; select bank1
 11368  01D1  01CF               	clrf	_LControl^(0+128)
 11369                           
 11370                           ;PS_2.c: 330: }
 11371  01D2  2AB5               	goto	i1l5462
 11372  01D3                     i1l5362:	
 11373                           
 11374                           ;PS_2.c: 331: else if(PS_2_Read_Data_Third == 0x71 )
 11375  01D3  3071               	movlw	113
 11376  01D4  0023               	movlb	3	; select bank3
 11377  01D5  0665               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 11378  01D6  0466               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11379  01D7  1D03               	skipz
 11380  01D8  2AB5               	goto	i1l5462
 11381                           
 11382                           ;PS_2.c: 332: {
 11383                           ;PS_2.c: 333: Delete = 0;
 11384  01D9  0021               	movlb	1	; select bank1
 11385  01DA  01CE               	clrf	_Delete^(0+128)
 11386                           
 11387                           ;PS_2.c: 334: }
 11388                           ;PS_2.c: 335: }
 11389                           ;PS_2.c: 336: }
 11390                           ;PS_2.c: 337: }
 11391  01DB  2AB5               	goto	i1l5462
 11392  01DC                     i1l5366:	
 11393                           
 11394                           ;PS_2.c: 338: else if(PS_2_Read_Data_Second)
 11395  01DC  0023               	movlb	3	; select bank3
 11396  01DD  0864               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11397  01DE  0463               	iorwf	_PS_2_Read_Data_Second^(0+384),w
 11398  01DF  1903               	skipnz
 11399  01E0  2AB5               	goto	i1l5462
 11400                           
 11401                           ;PS_2.c: 339: {
 11402                           ;PS_2.c: 341: if(PS_2_Read_Data_First == 0xF0)
 11403  01E1  30F0               	movlw	240
 11404  01E2  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11405  01E3  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11406  01E4  1D03               	skipz
 11407  01E5  2A60               	goto	i1l5430
 11408                           
 11409                           ;PS_2.c: 342: {
 11410                           ;PS_2.c: 344: if(PS_2_Read_Data_Second == 0x12)
 11411  01E6  3012               	movlw	18
 11412  01E7  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11413  01E8  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11414  01E9  1D03               	skipz
 11415  01EA  29ED               	goto	i1l5374
 11416                           
 11417                           ;PS_2.c: 345: {
 11418                           ;PS_2.c: 346: Right_Shift_Key =0;
 11419  01EB  01EE               	clrf	_Right_Shift_Key^(0+384)
 11420                           
 11421                           ;PS_2.c: 347: }
 11422  01EC  2A00               	goto	i1l5386
 11423  01ED                     i1l5374:	
 11424                           
 11425                           ;PS_2.c: 348: else if(PS_2_Read_Data_Second == 0x59)
 11426  01ED  3059               	movlw	89
 11427  01EE  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11428  01EF  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11429  01F0  1D03               	skipz
 11430  01F1  29F4               	goto	i1l5378
 11431                           
 11432                           ;PS_2.c: 349: {
 11433                           ;PS_2.c: 350: Left_Shift_Key =0;
 11434  01F2  01EA               	clrf	_Left_Shift_Key^(0+384)
 11435                           
 11436                           ;PS_2.c: 351: }
 11437  01F3  2A00               	goto	i1l5386
 11438  01F4                     i1l5378:	
 11439                           
 11440                           ;PS_2.c: 352: else if(PS_2_Read_Data_Second == 0x14)
 11441  01F4  3014               	movlw	20
 11442  01F5  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11443  01F6  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11444  01F7  1D03               	skipz
 11445  01F8  29FB               	goto	i1l5382
 11446                           
 11447                           ;PS_2.c: 353: {
 11448                           ;PS_2.c: 354: RControl =0;
 11449  01F9  01ED               	clrf	_RControl^(0+384)
 11450                           
 11451                           ;PS_2.c: 355: }
 11452  01FA  2A00               	goto	i1l5386
 11453  01FB                     i1l5382:	
 11454                           
 11455                           ;PS_2.c: 356: else if(PS_2_Read_Data_Second == 0x11 )
 11456  01FB  3011               	movlw	17
 11457  01FC  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11458  01FD  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11459  01FE  1903               	btfsc	3,2
 11460                           
 11461                           ;PS_2.c: 357: {
 11462                           ;PS_2.c: 358: RALT =0;
 11463  01FF  01EC               	clrf	_RALT^(0+384)
 11464  0200                     i1l5386:	
 11465                           
 11466                           ;PS_2.c: 359: }
 11467                           ;PS_2.c: 360: if(PS_2_Read_Data_Second == 0x59 || PS_2_Read_Data_Second == 0x12)
 11468  0200  3059               	movlw	89
 11469  0201  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11470  0202  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11471  0203  1903               	skipnz
 11472  0204  2A0A               	goto	i1l5390
 11473  0205  3012               	movlw	18
 11474  0206  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11475  0207  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11476  0208  1D03               	skipz
 11477  0209  2A58               	goto	i1l5426
 11478  020A                     i1l5390:	
 11479                           
 11480                           ;PS_2.c: 361: {
 11481                           ;PS_2.c: 362: if(Right_Shift_Key == 0 && Left_Shift_Key == 0)
 11482  020A  08EE               	movf	_Right_Shift_Key^(0+384),f
 11483  020B  1D03               	skipz
 11484  020C  2AB5               	goto	i1l5462
 11485  020D  08EA               	movf	_Left_Shift_Key^(0+384),f
 11486  020E  1D03               	skipz
 11487  020F  2AB5               	goto	i1l5462
 11488                           
 11489                           ;PS_2.c: 363: {
 11490                           ;PS_2.c: 364: if(!Send_PS2(0xED))
 11491  0210  30ED               	movlw	237
 11492  0211  318C  24DE  3181   	fcall	i1_Send_PS2
 11493  0214  3800               	iorlw	0
 11494  0215  1D03               	skipz
 11495  0216  2A20               	goto	i1l5400
 11496                           
 11497                           ;PS_2.c: 365: {
 11498                           ;PS_2.c: 366: if(!Send_PS2(0x00))
 11499  0217  3000               	movlw	0
 11500  0218  318C  24DE  3181   	fcall	i1_Send_PS2
 11501  021B  3800               	iorlw	0
 11502  021C  1D03               	skipz
 11503  021D  2A20               	goto	i1l5400
 11504                           
 11505                           ;PS_2.c: 367: {
 11506                           ;PS_2.c: 368: Shift_Key = 0;
 11507  021E  0023               	movlb	3	; select bank3
 11508  021F  01EF               	clrf	_Shift_Key^(0+384)
 11509  0220                     i1l5400:	
 11510                           
 11511                           ;PS_2.c: 369: }
 11512                           ;PS_2.c: 370: }
 11513                           ;PS_2.c: 371: if(Caps_Lock)
 11514  0220  0023               	movlb	3	; select bank3
 11515  0221  0868               	movf	_Caps_Lock^(0+384),w
 11516  0222  1903               	btfsc	3,2
 11517  0223  2A3E               	goto	i1l5414
 11518                           
 11519                           ;PS_2.c: 372: {
 11520                           ;PS_2.c: 373: CapsCount=0;
 11521  0224  01E7               	clrf	_CapsCount^(0+384)
 11522  0225                     i1l5412:	
 11523                           ;PS_2.c: 374: while(CapsCount<10)
 11524                           
 11525  0225  300A               	movlw	10
 11526  0226  0267               	subwf	_CapsCount^(0+384),w
 11527  0227  1803               	btfsc	3,0
 11528  0228  2AB5               	goto	i1l5462
 11529                           
 11530                           ;PS_2.c: 375: {
 11531                           ;PS_2.c: 376: if(!Send_PS2(0xED))
 11532  0229  30ED               	movlw	237
 11533  022A  318C  24DE  3181   	fcall	i1_Send_PS2
 11534  022D  3800               	iorlw	0
 11535  022E  1D03               	skipz
 11536  022F  2A37               	goto	i1l5410
 11537                           
 11538                           ;PS_2.c: 377: {
 11539                           ;PS_2.c: 378: if(!Send_PS2(0x04))
 11540  0230  3004               	movlw	4
 11541  0231  318C  24DE  3181   	fcall	i1_Send_PS2
 11542  0234  3800               	iorlw	0
 11543  0235  1903               	btfsc	3,2
 11544  0236  2AB5               	goto	i1l5462
 11545  0237                     i1l5410:	
 11546                           ;PS_2.c: 379: {
 11547                           ;PS_2.c: 380: break;
 11548                           
 11549                           
 11550                           ;PS_2.c: 381: }
 11551                           ;PS_2.c: 382: }
 11552                           ;PS_2.c: 383: CapsCount++;
 11553  0237  3001               	movlw	1
 11554  0238  0021               	movlb	1	; select bank1
 11555  0239  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11556  023A  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11557  023B  0023               	movlb	3	; select bank3
 11558  023C  07E7               	addwf	_CapsCount^(0+384),f
 11559  023D  2A25               	goto	i1l5412
 11560  023E                     i1l5414:	
 11561                           ;PS_2.c: 384: }
 11562                           ;PS_2.c: 385: }
 11563                           
 11564                           
 11565                           ;PS_2.c: 386: else
 11566                           ;PS_2.c: 387: {
 11567                           ;PS_2.c: 388: CapsCount=0;
 11568  023E  01E7               	clrf	_CapsCount^(0+384)
 11569  023F                     i1l5424:	
 11570                           ;PS_2.c: 389: while(CapsCount<10)
 11571                           
 11572  023F  300A               	movlw	10
 11573  0240  0267               	subwf	_CapsCount^(0+384),w
 11574  0241  1803               	btfsc	3,0
 11575  0242  2AB5               	goto	i1l5462
 11576                           
 11577                           ;PS_2.c: 390: {
 11578                           ;PS_2.c: 391: if(!Send_PS2(0xED))
 11579  0243  30ED               	movlw	237
 11580  0244  318C  24DE  3181   	fcall	i1_Send_PS2
 11581  0247  3800               	iorlw	0
 11582  0248  1D03               	skipz
 11583  0249  2A51               	goto	i1l5422
 11584                           
 11585                           ;PS_2.c: 392: {
 11586                           ;PS_2.c: 393: if(!Send_PS2(0x00))
 11587  024A  3000               	movlw	0
 11588  024B  318C  24DE  3181   	fcall	i1_Send_PS2
 11589  024E  3800               	iorlw	0
 11590  024F  1903               	btfsc	3,2
 11591  0250  2AB5               	goto	i1l5462
 11592  0251                     i1l5422:	
 11593                           ;PS_2.c: 394: {
 11594                           ;PS_2.c: 395: break;
 11595                           
 11596                           
 11597                           ;PS_2.c: 396: }
 11598                           ;PS_2.c: 397: }
 11599                           ;PS_2.c: 398: CapsCount++;
 11600  0251  3001               	movlw	1
 11601  0252  0021               	movlb	1	; select bank1
 11602  0253  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11603  0254  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11604  0255  0023               	movlb	3	; select bank3
 11605  0256  07E7               	addwf	_CapsCount^(0+384),f
 11606  0257  2A3F               	goto	i1l5424
 11607  0258                     i1l5426:	
 11608                           ;PS_2.c: 399: }
 11609                           ;PS_2.c: 400: }
 11610                           ;PS_2.c: 401: }
 11611                           ;PS_2.c: 402: }
 11612                           
 11613                           
 11614                           ;PS_2.c: 403: else if(PS_2_Read_Data_Second == 0x58)
 11615  0258  3058               	movlw	88
 11616  0259  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11617  025A  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11618  025B  1D03               	skipz
 11619  025C  2AB5               	goto	i1l5462
 11620                           
 11621                           ;PS_2.c: 404: {
 11622                           ;PS_2.c: 405: Caps_Lock_Key = 0;
 11623  025D  0021               	movlb	1	; select bank1
 11624  025E  01CC               	clrf	_Caps_Lock_Key^(0+128)
 11625                           
 11626                           ;PS_2.c: 406: }
 11627                           ;PS_2.c: 407: }
 11628  025F  2AB5               	goto	i1l5462
 11629  0260                     i1l5430:	
 11630                           
 11631                           ;PS_2.c: 408: else if(PS_2_Read_Data_First == 0xE0)
 11632  0260  30E0               	movlw	224
 11633  0261  0023               	movlb	3	; select bank3
 11634  0262  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11635  0263  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11636  0264  1D03               	skipz
 11637  0265  2AB5               	goto	i1l5462
 11638                           
 11639                           ;PS_2.c: 409: {
 11640                           ;PS_2.c: 411: if(PS_2_Read_Data_Second == 0x11 )
 11641  0266  3011               	movlw	17
 11642  0267  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11643  0268  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11644  0269  1D03               	skipz
 11645  026A  2A6E               	goto	i1l5436
 11646                           
 11647                           ;PS_2.c: 412: {
 11648                           ;PS_2.c: 413: LALT = 1;
 11649  026B  01E9               	clrf	_LALT^(0+384)
 11650  026C  0AE9               	incf	_LALT^(0+384),f
 11651                           
 11652                           ;PS_2.c: 414: }
 11653  026D  2A80               	goto	i1l710
 11654  026E                     i1l5436:	
 11655                           
 11656                           ;PS_2.c: 415: else if(PS_2_Read_Data_Second == 0x14 )
 11657  026E  3014               	movlw	20
 11658  026F  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11659  0270  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11660  0271  1D03               	skipz
 11661  0272  2A77               	goto	i1l5440
 11662                           
 11663                           ;PS_2.c: 416: {
 11664                           ;PS_2.c: 417: LControl = 1;
 11665  0273  0021               	movlb	1	; select bank1
 11666  0274  01CF               	clrf	_LControl^(0+128)
 11667  0275  0ACF               	incf	_LControl^(0+128),f
 11668                           
 11669                           ;PS_2.c: 418: }
 11670  0276  2A80               	goto	i1l710
 11671  0277                     i1l5440:	
 11672                           
 11673                           ;PS_2.c: 419: else if(PS_2_Read_Data_Second == 0x71 )
 11674  0277  3071               	movlw	113
 11675  0278  0023               	movlb	3	; select bank3
 11676  0279  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11677  027A  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11678  027B  1D03               	skipz
 11679  027C  2A80               	goto	i1l710
 11680                           
 11681                           ;PS_2.c: 420: {
 11682                           ;PS_2.c: 421: Delete = 1;
 11683  027D  0021               	movlb	1	; select bank1
 11684  027E  01CE               	clrf	_Delete^(0+128)
 11685  027F  0ACE               	incf	_Delete^(0+128),f
 11686  0280                     i1l710:	
 11687                           
 11688                           ;PS_2.c: 422: }
 11689                           ;PS_2.c: 423: if(((RControl || LControl) + (LALT || RALT) + Delete) != 3)
 11690  0280  0023               	movlb	3	; select bank3
 11691  0281  01DC               	clrf	_Process_PS2_ScanCode$851^(0+384)
 11692  0282  0ADC               	incf	_Process_PS2_ScanCode$851^(0+384),f
 11693  0283  08E9               	movf	_LALT^(0+384),f
 11694  0284  1D03               	skipz
 11695  0285  2A8A               	goto	i1l5450
 11696  0286  08EC               	movf	_RALT^(0+384),f
 11697  0287  1D03               	skipz
 11698  0288  2A8A               	goto	i1l5450
 11699  0289  01DC               	clrf	_Process_PS2_ScanCode$851^(0+384)
 11700  028A                     i1l5450:	
 11701  028A  01DD               	clrf	_Process_PS2_ScanCode$852^(0+384)
 11702  028B  0ADD               	incf	_Process_PS2_ScanCode$852^(0+384),f
 11703  028C  08ED               	movf	_RControl^(0+384),f
 11704  028D  1D03               	skipz
 11705  028E  2A95               	goto	i1l5458
 11706  028F  0021               	movlb	1	; select bank1
 11707  0290  08CF               	movf	_LControl^(0+128),f
 11708  0291  1D03               	skipz
 11709  0292  2A95               	goto	i1l5458
 11710  0293  0023               	movlb	3	; select bank3
 11711  0294  01DD               	clrf	_Process_PS2_ScanCode$852^(0+384)
 11712  0295                     i1l5458:	
 11713  0295  0021               	movlb	1	; select bank1
 11714  0296  084E               	movf	_Delete^(0+128),w
 11715  0297  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11716  0298  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11717  0299  0023               	movlb	3	; select bank3
 11718  029A  085D               	movf	_Process_PS2_ScanCode$852^(0+384),w
 11719  029B  075C               	addwf	_Process_PS2_ScanCode$851^(0+384),w
 11720  029C  0021               	movlb	1	; select bank1
 11721  029D  00BE               	movwf	(??_Process_PS2_ScanCode+2)^(0+128)
 11722  029E  01BF               	clrf	((??_Process_PS2_ScanCode+2)^(0+128)+1)
 11723  029F  0DBF               	rlf	(??_Process_PS2_ScanCode+3)^(0+128),f
 11724  02A0  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11725  02A1  073E               	addwf	(??_Process_PS2_ScanCode+2)^(0+128),w
 11726  02A2  00C0               	movwf	(??_Process_PS2_ScanCode+4)^(0+128)
 11727  02A3  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11728  02A4  3D3F               	addwfc	(??_Process_PS2_ScanCode+3)^(0+128),w
 11729  02A5  00C1               	movwf	(??_Process_PS2_ScanCode+5)^(0+128)
 11730  02A6  3003               	movlw	3
 11731  02A7  0640               	xorwf	(??_Process_PS2_ScanCode+4)^(0+128),w
 11732  02A8  0441               	iorwf	(??_Process_PS2_ScanCode+5)^(0+128),w
 11733  02A9  1903               	skipnz
 11734  02AA  2AB5               	goto	i1l5462
 11735                           
 11736                           ;PS_2.c: 424: {
 11737                           ;PS_2.c: 426: temp = Decode_Scan_Code_FunctionE0(PS_2_Read_Data_Second);
 11738  02AB  0023               	movlb	3	; select bank3
 11739  02AC  0863               	movf	_PS_2_Read_Data_Second^(0+384),w
 11740  02AD  3199  211C  3181   	fcall	_Decode_Scan_Code_FunctionE0
 11741  02B0  0021               	movlb	1	; select bank1
 11742  02B1  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11743  02B2  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11744  02B3  0023               	movlb	3	; select bank3
 11745  02B4  00E0               	movwf	Process_PS2_ScanCode@temp^(0+384)
 11746  02B5                     i1l5462:	
 11747                           
 11748                           ;PS_2.c: 427: }
 11749                           ;PS_2.c: 428: }
 11750                           ;PS_2.c: 429: }
 11751                           ;PS_2.c: 430: if(PS_2_Read_Data_First != 0 && PS_2_Read_Data_Second == 0 &&
 11752                           ;PS_2.c: 431: PS_2_Read_Data_Third == 0)
 11753  02B5  0023               	movlb	3	; select bank3
 11754  02B6  0862               	movf	(_PS_2_Read_Data_First+1)^(0+384),w
 11755  02B7  0461               	iorwf	_PS_2_Read_Data_First^(0+384),w
 11756  02B8  1903               	skipnz
 11757  02B9  2C04               	goto	i1l5610
 11758  02BA  0864               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11759  02BB  0463               	iorwf	_PS_2_Read_Data_Second^(0+384),w
 11760  02BC  1D03               	skipz
 11761  02BD  2C04               	goto	i1l5610
 11762  02BE  0866               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11763  02BF  0465               	iorwf	_PS_2_Read_Data_Third^(0+384),w
 11764  02C0  1D03               	skipz
 11765  02C1  2C04               	goto	i1l5610
 11766                           
 11767                           ;PS_2.c: 432: {
 11768                           ;PS_2.c: 434: if(PS_2_Read_Data_First == 0x12)
 11769  02C2  3012               	movlw	18
 11770  02C3  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11771  02C4  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11772  02C5  1D03               	skipz
 11773  02C6  2ACA               	goto	i1l5472
 11774                           
 11775                           ;PS_2.c: 435: {
 11776                           ;PS_2.c: 436: Right_Shift_Key = 1;
 11777  02C7  01EE               	clrf	_Right_Shift_Key^(0+384)
 11778  02C8  0AEE               	incf	_Right_Shift_Key^(0+384),f
 11779                           
 11780                           ;PS_2.c: 437: }
 11781  02C9  2AD1               	goto	i1l5476
 11782  02CA                     i1l5472:	
 11783                           
 11784                           ;PS_2.c: 438: else if(PS_2_Read_Data_First == 0x59)
 11785  02CA  3059               	movlw	89
 11786  02CB  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11787  02CC  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11788  02CD  1D03               	skipz
 11789  02CE  2AD1               	goto	i1l5476
 11790                           
 11791                           ;PS_2.c: 439: {
 11792                           ;PS_2.c: 440: Left_Shift_Key = 1;
 11793  02CF  01EA               	clrf	_Left_Shift_Key^(0+384)
 11794  02D0  0AEA               	incf	_Left_Shift_Key^(0+384),f
 11795  02D1                     i1l5476:	
 11796                           
 11797                           ;PS_2.c: 441: }
 11798                           ;PS_2.c: 442: if((Right_Shift_Key == 1 && Right_Shift_Key_old == 0) || (Left_Shift_Key =
      +                          = 1 && Left_Shift_Key_old == 0))
 11799  02D1  086E               	movf	_Right_Shift_Key^(0+384),w
 11800  02D2  3A01               	xorlw	1
 11801  02D3  1D03               	skipz
 11802  02D4  2AD9               	goto	i1l5480
 11803  02D5  0021               	movlb	1	; select bank1
 11804  02D6  0854               	movf	_Right_Shift_Key_old^(0+128),w
 11805  02D7  1903               	btfsc	3,2
 11806  02D8  2AE2               	goto	i1l5484
 11807  02D9                     i1l5480:	
 11808  02D9  0023               	movlb	3	; select bank3
 11809  02DA  086A               	movf	_Left_Shift_Key^(0+384),w
 11810  02DB  3A01               	xorlw	1
 11811  02DC  1D03               	skipz
 11812  02DD  2B24               	goto	i1l5512
 11813  02DE  0021               	movlb	1	; select bank1
 11814  02DF  08D0               	movf	_Left_Shift_Key_old^(0+128),f
 11815  02E0  1D03               	skipz
 11816  02E1  2B24               	goto	i1l5512
 11817  02E2                     i1l5484:	
 11818                           
 11819                           ;PS_2.c: 443: {
 11820                           ;PS_2.c: 445: if(!Send_PS2(0xED))
 11821  02E2  30ED               	movlw	237
 11822  02E3  318C  24DE  3181   	fcall	i1_Send_PS2
 11823  02E6  3800               	iorlw	0
 11824  02E7  1D03               	skipz
 11825  02E8  2B24               	goto	i1l5512
 11826                           
 11827                           ;PS_2.c: 446: {
 11828                           ;PS_2.c: 447: if(Caps_Lock)
 11829  02E9  0023               	movlb	3	; select bank3
 11830  02EA  0868               	movf	_Caps_Lock^(0+384),w
 11831  02EB  1903               	btfsc	3,2
 11832  02EC  2B07               	goto	i1l5500
 11833                           
 11834                           ;PS_2.c: 448: {
 11835                           ;PS_2.c: 449: CapsCount=0;
 11836  02ED  01E7               	clrf	_CapsCount^(0+384)
 11837  02EE                     i1l5498:	
 11838                           ;PS_2.c: 450: while(CapsCount<10)
 11839                           
 11840  02EE  300A               	movlw	10
 11841  02EF  0267               	subwf	_CapsCount^(0+384),w
 11842  02F0  1803               	btfsc	3,0
 11843  02F1  2B24               	goto	i1l5512
 11844                           
 11845                           ;PS_2.c: 451: {
 11846                           ;PS_2.c: 452: if(!Send_PS2(0xED))
 11847  02F2  30ED               	movlw	237
 11848  02F3  318C  24DE  3181   	fcall	i1_Send_PS2
 11849  02F6  3800               	iorlw	0
 11850  02F7  1D03               	skipz
 11851  02F8  2B00               	goto	i1l5496
 11852                           
 11853                           ;PS_2.c: 453: {
 11854                           ;PS_2.c: 454: if(!Send_PS2(0x05))
 11855  02F9  3005               	movlw	5
 11856  02FA  318C  24DE  3181   	fcall	i1_Send_PS2
 11857  02FD  3800               	iorlw	0
 11858  02FE  1903               	btfsc	3,2
 11859  02FF  2B21               	goto	i1l5506
 11860  0300                     i1l5496:	
 11861                           ;PS_2.c: 457: break;
 11862                           
 11863                           ;PS_2.c: 455: {
 11864                           ;PS_2.c: 456: Shift_Key = 1;
 11865                           
 11866                           
 11867                           ;PS_2.c: 458: }
 11868                           ;PS_2.c: 459: }
 11869                           ;PS_2.c: 460: CapsCount++;
 11870  0300  3001               	movlw	1
 11871  0301  0021               	movlb	1	; select bank1
 11872  0302  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11873  0303  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11874  0304  0023               	movlb	3	; select bank3
 11875  0305  07E7               	addwf	_CapsCount^(0+384),f
 11876  0306  2AEE               	goto	i1l5498
 11877  0307                     i1l5500:	
 11878                           ;PS_2.c: 461: }
 11879                           ;PS_2.c: 462: }
 11880                           
 11881                           
 11882                           ;PS_2.c: 463: else
 11883                           ;PS_2.c: 464: {
 11884                           ;PS_2.c: 465: CapsCount=0;
 11885  0307  01E7               	clrf	_CapsCount^(0+384)
 11886                           
 11887                           ;PS_2.c: 466: while(CapsCount<10)
 11888  0308  2B0F               	goto	i1l5510
 11889  0309                     i1l5508:	
 11890                           ;PS_2.c: 473: break;
 11891                           
 11892                           
 11893                           ;PS_2.c: 474: }
 11894                           ;PS_2.c: 475: }
 11895                           ;PS_2.c: 476: CapsCount++;
 11896  0309  3001               	movlw	1
 11897  030A  0021               	movlb	1	; select bank1
 11898  030B  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11899  030C  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11900  030D  0023               	movlb	3	; select bank3
 11901  030E  07E7               	addwf	_CapsCount^(0+384),f
 11902  030F                     i1l5510:	
 11903  030F  300A               	movlw	10
 11904  0310  0267               	subwf	_CapsCount^(0+384),w
 11905  0311  1803               	btfsc	3,0
 11906  0312  2B24               	goto	i1l5512
 11907                           
 11908                           ;PS_2.c: 467: {
 11909                           ;PS_2.c: 468: if(!Send_PS2(0xED))
 11910  0313  30ED               	movlw	237
 11911  0314  318C  24DE  3181   	fcall	i1_Send_PS2
 11912  0317  3800               	iorlw	0
 11913  0318  1D03               	skipz
 11914  0319  2B09               	goto	i1l5508
 11915                           
 11916                           ;PS_2.c: 469: {
 11917                           ;PS_2.c: 470: if(!Send_PS2(0x01))
 11918  031A  3001               	movlw	1
 11919  031B  318C  24DE  3181   	fcall	i1_Send_PS2
 11920  031E  3800               	iorlw	0
 11921  031F  1D03               	skipz
 11922  0320  2B09               	goto	i1l5508
 11923  0321                     i1l5506:	
 11924                           
 11925                           ;PS_2.c: 471: {
 11926                           ;PS_2.c: 472: Shift_Key = 1;
 11927  0321  0023               	movlb	3	; select bank3
 11928  0322  01EF               	clrf	_Shift_Key^(0+384)
 11929  0323  0AEF               	incf	_Shift_Key^(0+384),f
 11930  0324                     i1l5512:	
 11931                           
 11932                           ;PS_2.c: 477: }
 11933                           ;PS_2.c: 478: }
 11934                           ;PS_2.c: 479: }
 11935                           ;PS_2.c: 480: }
 11936                           ;PS_2.c: 481: if(PS_2_Read_Data_First == 0x14 )
 11937  0324  3014               	movlw	20
 11938  0325  0023               	movlb	3	; select bank3
 11939  0326  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11940  0327  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11941  0328  1D03               	skipz
 11942  0329  2B2D               	goto	i1l5516
 11943                           
 11944                           ;PS_2.c: 482: {
 11945                           ;PS_2.c: 483: RControl = 1;
 11946  032A  01ED               	clrf	_RControl^(0+384)
 11947  032B  0AED               	incf	_RControl^(0+384),f
 11948                           
 11949                           ;PS_2.c: 484: }
 11950  032C  2C04               	goto	i1l5610
 11951  032D                     i1l5516:	
 11952                           
 11953                           ;PS_2.c: 485: else if(PS_2_Read_Data_First == 0x11 )
 11954  032D  3011               	movlw	17
 11955  032E  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11956  032F  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11957  0330  1D03               	skipz
 11958  0331  2B35               	goto	i1l5520
 11959                           
 11960                           ;PS_2.c: 486: {
 11961                           ;PS_2.c: 487: RALT = 1;
 11962  0332  01EC               	clrf	_RALT^(0+384)
 11963  0333  0AEC               	incf	_RALT^(0+384),f
 11964                           
 11965                           ;PS_2.c: 488: }
 11966  0334  2C04               	goto	i1l5610
 11967  0335                     i1l5520:	
 11968                           
 11969                           ;PS_2.c: 489: else if(PS_2_Read_Data_First == 0xEE )
 11970  0335  30EE               	movlw	238
 11971  0336  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11972  0337  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11973  0338  1D03               	skipz
 11974  0339  2B3E               	goto	i1l5524
 11975                           
 11976                           ;PS_2.c: 490: {
 11977                           ;PS_2.c: 491: ECHO = 1;
 11978  033A  0024               	movlb	4	; select bank4
 11979  033B  01DF               	clrf	_ECHO^(0+512)
 11980  033C  0ADF               	incf	_ECHO^(0+512),f
 11981                           
 11982                           ;PS_2.c: 492: }
 11983  033D  2C04               	goto	i1l5610
 11984  033E                     i1l5524:	
 11985                           
 11986                           ;PS_2.c: 493: else if(PS_2_Read_Data_First == 0x58)
 11987  033E  3058               	movlw	88
 11988  033F  0023               	movlb	3	; select bank3
 11989  0340  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11990  0341  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11991  0342  1D03               	skipz
 11992  0343  2BC3               	goto	i1l5584
 11993                           
 11994                           ;PS_2.c: 494: {
 11995                           ;PS_2.c: 495: Caps_Lock_Key = 1;
 11996  0344  0021               	movlb	1	; select bank1
 11997  0345  01CC               	clrf	_Caps_Lock_Key^(0+128)
 11998  0346  0ACC               	incf	_Caps_Lock_Key^(0+128),f
 11999                           
 12000                           ;PS_2.c: 496: if(Caps_Lock_Key_old == 0)
 12001  0347  08CD               	movf	_Caps_Lock_Key_old^(0+128),f
 12002  0348  1D03               	skipz
 12003  0349  2C04               	goto	i1l5610
 12004                           
 12005                           ;PS_2.c: 497: {
 12006                           ;PS_2.c: 498: if(Caps_Lock)
 12007  034A  0023               	movlb	3	; select bank3
 12008  034B  0868               	movf	_Caps_Lock^(0+384),w
 12009  034C  1903               	btfsc	3,2
 12010  034D  2B88               	goto	i1l5558
 12011                           
 12012                           ;PS_2.c: 499: {
 12013                           ;PS_2.c: 500: if(Shift_Key)
 12014  034E  086F               	movf	_Shift_Key^(0+384),w
 12015  034F  1903               	btfsc	3,2
 12016  0350  2B6B               	goto	i1l5546
 12017                           
 12018                           ;PS_2.c: 501: {
 12019                           ;PS_2.c: 502: CapsCount=0;
 12020  0351  01E7               	clrf	_CapsCount^(0+384)
 12021  0352                     i1l5544:	
 12022                           ;PS_2.c: 503: while(CapsCount<10)
 12023                           
 12024  0352  300A               	movlw	10
 12025  0353  0267               	subwf	_CapsCount^(0+384),w
 12026  0354  1803               	btfsc	3,0
 12027  0355  2C04               	goto	i1l5610
 12028                           
 12029                           ;PS_2.c: 504: {
 12030                           ;PS_2.c: 505: if(!Send_PS2(0xED))
 12031  0356  30ED               	movlw	237
 12032  0357  318C  24DE  3181   	fcall	i1_Send_PS2
 12033  035A  3800               	iorlw	0
 12034  035B  1D03               	skipz
 12035  035C  2B64               	goto	i1l5542
 12036                           
 12037                           ;PS_2.c: 506: {
 12038                           ;PS_2.c: 507: if(!Send_PS2(0x01))
 12039  035D  3001               	movlw	1
 12040  035E  318C  24DE  3181   	fcall	i1_Send_PS2
 12041  0361  3800               	iorlw	0
 12042  0362  1903               	btfsc	3,2
 12043  0363  2B7E               	goto	i1l5552
 12044  0364                     i1l5542:	
 12045                           ;PS_2.c: 510: break;
 12046                           
 12047                           ;PS_2.c: 508: {
 12048                           ;PS_2.c: 509: Caps_Lock =0;
 12049                           
 12050                           
 12051                           ;PS_2.c: 511: }
 12052                           ;PS_2.c: 512: }
 12053                           ;PS_2.c: 513: CapsCount++;
 12054  0364  3001               	movlw	1
 12055  0365  0021               	movlb	1	; select bank1
 12056  0366  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12057  0367  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12058  0368  0023               	movlb	3	; select bank3
 12059  0369  07E7               	addwf	_CapsCount^(0+384),f
 12060  036A  2B52               	goto	i1l5544
 12061  036B                     i1l5546:	
 12062                           ;PS_2.c: 514: }
 12063                           ;PS_2.c: 515: }
 12064                           
 12065                           
 12066                           ;PS_2.c: 516: else
 12067                           ;PS_2.c: 517: {
 12068                           ;PS_2.c: 518: CapsCount=0;
 12069  036B  01E7               	clrf	_CapsCount^(0+384)
 12070  036C                     i1l5556:	
 12071                           ;PS_2.c: 519: while(CapsCount<10)
 12072                           
 12073  036C  300A               	movlw	10
 12074  036D  0267               	subwf	_CapsCount^(0+384),w
 12075  036E  1803               	btfsc	3,0
 12076  036F  2C04               	goto	i1l5610
 12077                           
 12078                           ;PS_2.c: 520: {
 12079                           ;PS_2.c: 521: if(!Send_PS2(0xED))
 12080  0370  30ED               	movlw	237
 12081  0371  318C  24DE  3181   	fcall	i1_Send_PS2
 12082  0374  3800               	iorlw	0
 12083  0375  1D03               	skipz
 12084  0376  2B81               	goto	i1l5554
 12085                           
 12086                           ;PS_2.c: 522: {
 12087                           ;PS_2.c: 523: if(!Send_PS2(0x00))
 12088  0377  3000               	movlw	0
 12089  0378  318C  24DE  3181   	fcall	i1_Send_PS2
 12090  037B  3800               	iorlw	0
 12091  037C  1D03               	skipz
 12092  037D  2B81               	goto	i1l5554
 12093  037E                     i1l5552:	
 12094                           
 12095                           ;PS_2.c: 524: {
 12096                           ;PS_2.c: 525: Caps_Lock =0;
 12097  037E  0023               	movlb	3	; select bank3
 12098  037F  01E8               	clrf	_Caps_Lock^(0+384)
 12099                           
 12100                           ;PS_2.c: 526: break;
 12101  0380  2C04               	goto	i1l5610
 12102  0381                     i1l5554:	
 12103                           
 12104                           ;PS_2.c: 527: }
 12105                           ;PS_2.c: 528: }
 12106                           ;PS_2.c: 529: CapsCount++;
 12107  0381  3001               	movlw	1
 12108  0382  0021               	movlb	1	; select bank1
 12109  0383  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12110  0384  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12111  0385  0023               	movlb	3	; select bank3
 12112  0386  07E7               	addwf	_CapsCount^(0+384),f
 12113  0387  2B6C               	goto	i1l5556
 12114  0388                     i1l5558:	
 12115                           ;PS_2.c: 530: }
 12116                           ;PS_2.c: 531: }
 12117                           ;PS_2.c: 532: }
 12118                           
 12119                           
 12120                           ;PS_2.c: 533: else
 12121                           ;PS_2.c: 534: {
 12122                           ;PS_2.c: 535: if(Shift_Key)
 12123  0388  086F               	movf	_Shift_Key^(0+384),w
 12124  0389  1903               	btfsc	3,2
 12125  038A  2BA5               	goto	i1l5572
 12126                           
 12127                           ;PS_2.c: 536: {
 12128                           ;PS_2.c: 537: CapsCount=0;
 12129  038B  01E7               	clrf	_CapsCount^(0+384)
 12130  038C                     i1l5570:	
 12131                           ;PS_2.c: 538: while(CapsCount<10)
 12132                           
 12133  038C  300A               	movlw	10
 12134  038D  0267               	subwf	_CapsCount^(0+384),w
 12135  038E  1803               	btfsc	3,0
 12136  038F  2C04               	goto	i1l5610
 12137                           
 12138                           ;PS_2.c: 539: {
 12139                           ;PS_2.c: 540: if(!Send_PS2(0xED))
 12140  0390  30ED               	movlw	237
 12141  0391  318C  24DE  3181   	fcall	i1_Send_PS2
 12142  0394  3800               	iorlw	0
 12143  0395  1D03               	skipz
 12144  0396  2B9E               	goto	i1l5568
 12145                           
 12146                           ;PS_2.c: 541: {
 12147                           ;PS_2.c: 542: if(!Send_PS2(0x05))
 12148  0397  3005               	movlw	5
 12149  0398  318C  24DE  3181   	fcall	i1_Send_PS2
 12150  039B  3800               	iorlw	0
 12151  039C  1903               	btfsc	3,2
 12152  039D  2BB8               	goto	i1l5578
 12153  039E                     i1l5568:	
 12154                           ;PS_2.c: 545: break;
 12155                           
 12156                           ;PS_2.c: 543: {
 12157                           ;PS_2.c: 544: Caps_Lock =1;
 12158                           
 12159                           
 12160                           ;PS_2.c: 546: }
 12161                           ;PS_2.c: 547: }
 12162                           ;PS_2.c: 548: CapsCount++;
 12163  039E  3001               	movlw	1
 12164  039F  0021               	movlb	1	; select bank1
 12165  03A0  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12166  03A1  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12167  03A2  0023               	movlb	3	; select bank3
 12168  03A3  07E7               	addwf	_CapsCount^(0+384),f
 12169  03A4  2B8C               	goto	i1l5570
 12170  03A5                     i1l5572:	
 12171                           ;PS_2.c: 549: }
 12172                           ;PS_2.c: 550: }
 12173                           
 12174                           
 12175                           ;PS_2.c: 551: else
 12176                           ;PS_2.c: 552: {
 12177                           ;PS_2.c: 553: CapsCount=0;
 12178  03A5  01E7               	clrf	_CapsCount^(0+384)
 12179  03A6                     i1l5582:	
 12180                           ;PS_2.c: 554: while(CapsCount<10)
 12181                           
 12182  03A6  300A               	movlw	10
 12183  03A7  0267               	subwf	_CapsCount^(0+384),w
 12184  03A8  1803               	btfsc	3,0
 12185  03A9  2C04               	goto	i1l5610
 12186                           
 12187                           ;PS_2.c: 555: {
 12188                           ;PS_2.c: 556: if(!Send_PS2(0xED))
 12189  03AA  30ED               	movlw	237
 12190  03AB  318C  24DE  3181   	fcall	i1_Send_PS2
 12191  03AE  3800               	iorlw	0
 12192  03AF  1D03               	skipz
 12193  03B0  2BBC               	goto	i1l5580
 12194                           
 12195                           ;PS_2.c: 557: {
 12196                           ;PS_2.c: 558: if(!Send_PS2(0x04))
 12197  03B1  3004               	movlw	4
 12198  03B2  318C  24DE  3181   	fcall	i1_Send_PS2
 12199  03B5  3800               	iorlw	0
 12200  03B6  1D03               	skipz
 12201  03B7  2BBC               	goto	i1l5580
 12202  03B8                     i1l5578:	
 12203                           
 12204                           ;PS_2.c: 559: {
 12205                           ;PS_2.c: 560: Caps_Lock =1;
 12206  03B8  0023               	movlb	3	; select bank3
 12207  03B9  01E8               	clrf	_Caps_Lock^(0+384)
 12208  03BA  0AE8               	incf	_Caps_Lock^(0+384),f
 12209                           
 12210                           ;PS_2.c: 561: break;
 12211  03BB  2C04               	goto	i1l5610
 12212  03BC                     i1l5580:	
 12213                           
 12214                           ;PS_2.c: 562: }
 12215                           ;PS_2.c: 563: }
 12216                           ;PS_2.c: 564: CapsCount++;
 12217  03BC  3001               	movlw	1
 12218  03BD  0021               	movlb	1	; select bank1
 12219  03BE  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12220  03BF  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12221  03C0  0023               	movlb	3	; select bank3
 12222  03C1  07E7               	addwf	_CapsCount^(0+384),f
 12223  03C2  2BA6               	goto	i1l5582
 12224  03C3                     i1l5584:	
 12225                           ;PS_2.c: 565: }
 12226                           ;PS_2.c: 566: }
 12227                           ;PS_2.c: 567: }
 12228                           ;PS_2.c: 568: }
 12229                           ;PS_2.c: 570: }
 12230                           
 12231                           
 12232                           ;PS_2.c: 571: else
 12233                           ;PS_2.c: 572: {
 12234                           ;PS_2.c: 573: if(Shift_Key ==1)
 12235  03C3  086F               	movf	_Shift_Key^(0+384),w
 12236  03C4  3A01               	xorlw	1
 12237  03C5  1D03               	skipz
 12238  03C6  2BE2               	goto	i1l5596
 12239                           
 12240                           ;PS_2.c: 574: {
 12241                           ;PS_2.c: 576: temp = Decode_Scan_Code_Shift(PS_2_Read_Data_First);
 12242  03C7  0861               	movf	_PS_2_Read_Data_First^(0+384),w
 12243  03C8  3199  212E  3181   	fcall	_Decode_Scan_Code_Shift
 12244  03CB  0021               	movlb	1	; select bank1
 12245  03CC  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12246  03CD  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12247  03CE  0023               	movlb	3	; select bank3
 12248  03CF  00E0               	movwf	Process_PS2_ScanCode@temp^(0+384)
 12249                           
 12250                           ;PS_2.c: 577: if(Caps_Lock)
 12251  03D0  0868               	movf	_Caps_Lock^(0+384),w
 12252  03D1  1903               	btfsc	3,2
 12253  03D2  2BF8               	goto	i1l5606
 12254                           
 12255                           ;PS_2.c: 578: {
 12256                           ;PS_2.c: 580: if(temp >= 'A' && temp <= 'Z')
 12257  03D3  3041               	movlw	65
 12258  03D4  0260               	subwf	Process_PS2_ScanCode@temp^(0+384),w
 12259  03D5  1C03               	skipc
 12260  03D6  2BF8               	goto	i1l5606
 12261  03D7  305B               	movlw	91
 12262  03D8  0260               	subwf	Process_PS2_ScanCode@temp^(0+384),w
 12263  03D9  1803               	skipnc
 12264  03DA  2BF8               	goto	i1l5606
 12265                           
 12266                           ;PS_2.c: 581: {
 12267                           ;PS_2.c: 582: temp += 32;
 12268  03DB  3020               	movlw	32
 12269  03DC  0021               	movlb	1	; select bank1
 12270  03DD  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12271  03DE  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12272  03DF  0023               	movlb	3	; select bank3
 12273  03E0  07E0               	addwf	Process_PS2_ScanCode@temp^(0+384),f
 12274                           
 12275                           ;PS_2.c: 583: }
 12276                           ;PS_2.c: 584: }
 12277                           ;PS_2.c: 585: }
 12278  03E1  2BF8               	goto	i1l5606
 12279  03E2                     i1l5596:	
 12280                           
 12281                           ;PS_2.c: 586: else
 12282                           ;PS_2.c: 587: {
 12283                           ;PS_2.c: 588: temp = Decode_Scan_Code(PS_2_Read_Data_First);
 12284  03E2  0861               	movf	_PS_2_Read_Data_First^(0+384),w
 12285  03E3  3199  210A  3181   	fcall	_Decode_Scan_Code
 12286  03E6  0021               	movlb	1	; select bank1
 12287  03E7  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12288  03E8  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12289  03E9  0023               	movlb	3	; select bank3
 12290  03EA  00E0               	movwf	Process_PS2_ScanCode@temp^(0+384)
 12291                           
 12292                           ;PS_2.c: 589: if(Caps_Lock)
 12293  03EB  0868               	movf	_Caps_Lock^(0+384),w
 12294  03EC  1903               	btfsc	3,2
 12295  03ED  2BF8               	goto	i1l5606
 12296                           
 12297                           ;PS_2.c: 590: {
 12298                           ;PS_2.c: 592: if(temp >= 'a' && temp <= 'z')
 12299  03EE  3061               	movlw	97
 12300  03EF  0260               	subwf	Process_PS2_ScanCode@temp^(0+384),w
 12301  03F0  1C03               	skipc
 12302  03F1  2BF8               	goto	i1l5606
 12303  03F2  307B               	movlw	123
 12304  03F3  0260               	subwf	Process_PS2_ScanCode@temp^(0+384),w
 12305  03F4  1803               	skipnc
 12306  03F5  2BF8               	goto	i1l5606
 12307                           
 12308                           ;PS_2.c: 593: {
 12309                           ;PS_2.c: 594: temp -= 32;
 12310  03F6  3020               	movlw	32
 12311  03F7  02E0               	subwf	Process_PS2_ScanCode@temp^(0+384),f
 12312  03F8                     i1l5606:	
 12313                           
 12314                           ;PS_2.c: 595: }
 12315                           ;PS_2.c: 596: }
 12316                           ;PS_2.c: 597: }
 12317                           ;PS_2.c: 598: if(!temp)
 12318  03F8  08E0               	movf	Process_PS2_ScanCode@temp^(0+384),f
 12319  03F9  1D03               	skipz
 12320  03FA  2C04               	goto	i1l5610
 12321                           
 12322                           ;PS_2.c: 599: {
 12323                           ;PS_2.c: 601: temp = Decode_Scan_Code_Function(PS_2_Read_Data_First);
 12324  03FB  0861               	movf	_PS_2_Read_Data_First^(0+384),w
 12325  03FC  3198  20E9  3181   	fcall	_Decode_Scan_Code_Function
 12326  03FF  0021               	movlb	1	; select bank1
 12327  0400  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12328  0401  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12329  0402  0023               	movlb	3	; select bank3
 12330  0403  00E0               	movwf	Process_PS2_ScanCode@temp^(0+384)
 12331  0404                     i1l5610:	
 12332                           
 12333                           ;PS_2.c: 602: }
 12334                           ;PS_2.c: 603: }
 12335                           ;PS_2.c: 604: }
 12336                           ;PS_2.c: 606: if(((RControl || LControl) + (LALT || RALT) + Delete) == 3)
 12337  0404  0023               	movlb	3	; select bank3
 12338  0405  01DE               	clrf	_Process_PS2_ScanCode$853^(0+384)
 12339  0406  0ADE               	incf	_Process_PS2_ScanCode$853^(0+384),f
 12340  0407  08E9               	movf	_LALT^(0+384),f
 12341  0408  1D03               	skipz
 12342  0409  2C0E               	goto	i1l5618
 12343  040A  08EC               	movf	_RALT^(0+384),f
 12344  040B  1D03               	skipz
 12345  040C  2C0E               	goto	i1l5618
 12346  040D  01DE               	clrf	_Process_PS2_ScanCode$853^(0+384)
 12347  040E                     i1l5618:	
 12348  040E  01DF               	clrf	_Process_PS2_ScanCode$854^(0+384)
 12349  040F  0ADF               	incf	_Process_PS2_ScanCode$854^(0+384),f
 12350  0410  08ED               	movf	_RControl^(0+384),f
 12351  0411  1D03               	skipz
 12352  0412  2C19               	goto	i1l5626
 12353  0413  0021               	movlb	1	; select bank1
 12354  0414  08CF               	movf	_LControl^(0+128),f
 12355  0415  1D03               	skipz
 12356  0416  2C19               	goto	i1l5626
 12357  0417  0023               	movlb	3	; select bank3
 12358  0418  01DF               	clrf	_Process_PS2_ScanCode$854^(0+384)
 12359  0419                     i1l5626:	
 12360  0419  0021               	movlb	1	; select bank1
 12361  041A  084E               	movf	_Delete^(0+128),w
 12362  041B  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12363  041C  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 12364  041D  0023               	movlb	3	; select bank3
 12365  041E  085F               	movf	_Process_PS2_ScanCode$854^(0+384),w
 12366  041F  075E               	addwf	_Process_PS2_ScanCode$853^(0+384),w
 12367  0420  0021               	movlb	1	; select bank1
 12368  0421  00BE               	movwf	(??_Process_PS2_ScanCode+2)^(0+128)
 12369  0422  01BF               	clrf	((??_Process_PS2_ScanCode+2)^(0+128)+1)
 12370  0423  0DBF               	rlf	(??_Process_PS2_ScanCode+3)^(0+128),f
 12371  0424  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12372  0425  073E               	addwf	(??_Process_PS2_ScanCode+2)^(0+128),w
 12373  0426  00C0               	movwf	(??_Process_PS2_ScanCode+4)^(0+128)
 12374  0427  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 12375  0428  3D3F               	addwfc	(??_Process_PS2_ScanCode+3)^(0+128),w
 12376  0429  00C1               	movwf	(??_Process_PS2_ScanCode+5)^(0+128)
 12377  042A  3003               	movlw	3
 12378  042B  0640               	xorwf	(??_Process_PS2_ScanCode+4)^(0+128),w
 12379  042C  0441               	iorwf	(??_Process_PS2_ScanCode+5)^(0+128),w
 12380  042D  1D03               	skipz
 12381  042E  2CB1               	goto	i1l5670
 12382                           
 12383                           ;PS_2.c: 607: {
 12384                           ;PS_2.c: 609: UARTstringWAIT("\r\n");
 12385  042F  30FD               	movlw	low ((STR_14+16)| (0+32768))
 12386  0430  0020               	movlb	0	; select bank0
 12387  0431  00A1               	movwf	i1UARTstringWAIT@data
 12388  0432  3089               	movlw	high ((STR_14+16)| (0+32768))
 12389  0433  00A2               	movwf	i1UARTstringWAIT@data+1
 12390  0434  319B  2311  3181   	fcall	i1_UARTstringWAIT
 12391                           
 12392                           ;PS_2.c: 610: delayUS(15000);
 12393  0437  3000               	movlw	0
 12394  0438  00F3               	movwf	i1delayUS@US+3
 12395  0439  3000               	movlw	0
 12396  043A  00F2               	movwf	i1delayUS@US+2
 12397  043B  303A               	movlw	58
 12398  043C  00F1               	movwf	i1delayUS@US+1
 12399  043D  3098               	movlw	152
 12400  043E  00F0               	movwf	i1delayUS@US
 12401  043F  319B  2375  3181   	fcall	i1_delayUS
 12402                           
 12403                           ;PS_2.c: 611: if(!BAUDMODE)
 12404  0442  0021               	movlb	1	; select bank1
 12405  0443  08CB               	movf	_BAUDMODE^(0+128),f
 12406  0444  1D03               	skipz
 12407  0445  2C6D               	goto	i1l5646
 12408                           
 12409                           ;PS_2.c: 612: {
 12410                           ;PS_2.c: 613: BaudTyped =0;
 12411  0446  3000               	movlw	0
 12412  0447  00C8               	movwf	(_BaudTyped+3)^(0+128)
 12413  0448  3000               	movlw	0
 12414  0449  00C7               	movwf	(_BaudTyped+2)^(0+128)
 12415  044A  3000               	movlw	0
 12416  044B  00C6               	movwf	(_BaudTyped+1)^(0+128)
 12417  044C  3000               	movlw	0
 12418  044D  00C5               	movwf	_BaudTyped^(0+128)
 12419                           
 12420                           ;PS_2.c: 614: ParityTyped =0;
 12421  044E  0023               	movlb	3	; select bank3
 12422  044F  01EB               	clrf	_ParityTyped^(0+384)
 12423                           
 12424                           ;PS_2.c: 615: BAUDMODE = 1;
 12425  0450  0021               	movlb	1	; select bank1
 12426  0451  01CB               	clrf	_BAUDMODE^(0+128)
 12427  0452  0ACB               	incf	_BAUDMODE^(0+128),f
 12428                           
 12429                           ;PS_2.c: 616: UARTstringWAIT("Enter Baud rate \r\n");
 12430  0453  30ED               	movlw	low (STR_14| (0+32768))
 12431  0454  0020               	movlb	0	; select bank0
 12432  0455  00A1               	movwf	i1UARTstringWAIT@data
 12433  0456  3089               	movlw	high (STR_14| (0+32768))
 12434  0457  00A2               	movwf	i1UARTstringWAIT@data+1
 12435  0458  319B  2311  3181   	fcall	i1_UARTstringWAIT
 12436                           
 12437                           ;PS_2.c: 617: delayUS(15000);
 12438  045B  3000               	movlw	0
 12439  045C  00F3               	movwf	i1delayUS@US+3
 12440  045D  3000               	movlw	0
 12441  045E  00F2               	movwf	i1delayUS@US+2
 12442  045F  303A               	movlw	58
 12443  0460  00F1               	movwf	i1delayUS@US+1
 12444  0461  3098               	movlw	152
 12445  0462  00F0               	movwf	i1delayUS@US
 12446  0463  319B  2375  3181   	fcall	i1_delayUS
 12447                           
 12448                           ;PS_2.c: 618: UARTchar('>' , 0, 0);
 12449  0466  01F8               	clrf	i1UARTchar@override
 12450  0467  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12451  0468  303E               	movlw	62
 12452  0469  319F  2740  3181   	fcall	i1_UARTchar
 12453                           
 12454                           ;PS_2.c: 620: }
 12455  046C  2CA8               	goto	i1l5660
 12456  046D                     i1l5646:	
 12457                           
 12458                           ;PS_2.c: 621: else
 12459                           ;PS_2.c: 622: {
 12460                           ;PS_2.c: 623: BaudTyped = 9600;
 12461  046D  3000               	movlw	0
 12462  046E  0021               	movlb	1	; select bank1
 12463  046F  00C8               	movwf	(_BaudTyped+3)^(0+128)
 12464  0470  3000               	movlw	0
 12465  0471  00C7               	movwf	(_BaudTyped+2)^(0+128)
 12466  0472  3025               	movlw	37
 12467  0473  00C6               	movwf	(_BaudTyped+1)^(0+128)
 12468  0474  3080               	movlw	128
 12469  0475  00C5               	movwf	_BaudTyped^(0+128)
 12470                           
 12471                           ;PS_2.c: 624: UARTstringWAIT("Baud Reset to 9600");
 12472  0476  3000               	movlw	low (STR_15| (0+32768))
 12473  0477  0020               	movlb	0	; select bank0
 12474  0478  00A1               	movwf	i1UARTstringWAIT@data
 12475  0479  308A               	movlw	high (STR_15| (0+32768))
 12476  047A  00A2               	movwf	i1UARTstringWAIT@data+1
 12477  047B  319B  2311  3181   	fcall	i1_UARTstringWAIT
 12478                           
 12479                           ;PS_2.c: 625: UARTstringWAIT(NoParityMSG);
 12480  047E  3026               	movlw	low (_NoParityMSG| (0+32768))
 12481  047F  0020               	movlb	0	; select bank0
 12482  0480  00A1               	movwf	i1UARTstringWAIT@data
 12483  0481  3089               	movlw	high (_NoParityMSG| (0+32768))
 12484  0482  00A2               	movwf	i1UARTstringWAIT@data+1
 12485  0483  319B  2311  3181   	fcall	i1_UARTstringWAIT
 12486                           
 12487                           ;PS_2.c: 626: UARTstringWAIT("\r\n");
 12488  0486  30FD               	movlw	low ((STR_14+16)| (0+32768))
 12489  0487  0020               	movlb	0	; select bank0
 12490  0488  00A1               	movwf	i1UARTstringWAIT@data
 12491  0489  3089               	movlw	high ((STR_14+16)| (0+32768))
 12492  048A  00A2               	movwf	i1UARTstringWAIT@data+1
 12493  048B  319B  2311  3181   	fcall	i1_UARTstringWAIT
 12494                           
 12495                           ;PS_2.c: 627: delayUS(15000);
 12496  048E  3000               	movlw	0
 12497  048F  00F3               	movwf	i1delayUS@US+3
 12498  0490  3000               	movlw	0
 12499  0491  00F2               	movwf	i1delayUS@US+2
 12500  0492  303A               	movlw	58
 12501  0493  00F1               	movwf	i1delayUS@US+1
 12502  0494  3098               	movlw	152
 12503  0495  00F0               	movwf	i1delayUS@US
 12504  0496  319B  2375  3181   	fcall	i1_delayUS
 12505                           
 12506                           ;PS_2.c: 628: SetBaud(BaudTyped, 0);
 12507  0499  0021               	movlb	1	; select bank1
 12508  049A  0848               	movf	(_BaudTyped+3)^(0+128),w
 12509  049B  00B2               	movwf	(SetBaud@Baud+3)^(0+128)
 12510  049C  0847               	movf	(_BaudTyped+2)^(0+128),w
 12511  049D  00B1               	movwf	(SetBaud@Baud+2)^(0+128)
 12512  049E  0846               	movf	(_BaudTyped+1)^(0+128),w
 12513  049F  00B0               	movwf	(SetBaud@Baud+1)^(0+128)
 12514  04A0  0845               	movf	_BaudTyped^(0+128),w
 12515  04A1  00AF               	movwf	SetBaud@Baud^(0+128)
 12516  04A2  01B3               	clrf	SetBaud@Parity^(0+128)
 12517  04A3  318B  2365  3181   	fcall	_SetBaud
 12518                           
 12519                           ;PS_2.c: 629: BAUDMODE = 0;
 12520  04A6  0021               	movlb	1	; select bank1
 12521  04A7  01CB               	clrf	_BAUDMODE^(0+128)
 12522  04A8                     i1l5660:	
 12523                           
 12524                           ;PS_2.c: 630: }
 12525                           ;PS_2.c: 631: RControl =0;
 12526  04A8  0023               	movlb	3	; select bank3
 12527  04A9  01ED               	clrf	_RControl^(0+384)
 12528                           
 12529                           ;PS_2.c: 632: LControl =0;
 12530  04AA  0021               	movlb	1	; select bank1
 12531  04AB  01CF               	clrf	_LControl^(0+128)
 12532                           
 12533                           ;PS_2.c: 633: LALT =0;
 12534  04AC  0023               	movlb	3	; select bank3
 12535  04AD  01E9               	clrf	_LALT^(0+384)
 12536                           
 12537                           ;PS_2.c: 634: RALT =0;
 12538  04AE  01EC               	clrf	_RALT^(0+384)
 12539                           
 12540                           ;PS_2.c: 635: Delete =0;
 12541  04AF  0021               	movlb	1	; select bank1
 12542  04B0  01CE               	clrf	_Delete^(0+128)
 12543  04B1                     i1l5670:	
 12544                           
 12545                           ;PS_2.c: 636: }
 12546                           ;PS_2.c: 638: if(temp)
 12547  04B1  0023               	movlb	3	; select bank3
 12548  04B2  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12549  04B3  1903               	btfsc	3,2
 12550  04B4  2E45               	goto	i1l5766
 12551                           
 12552                           ;PS_2.c: 639: {
 12553                           ;PS_2.c: 641: if(temp == 0x01)
 12554  04B5  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12555  04B6  3A01               	xorlw	1
 12556  04B7  1D03               	skipz
 12557  04B8  2CC4               	goto	i1l5676
 12558                           
 12559                           ;PS_2.c: 642: {
 12560                           ;PS_2.c: 644: UART_send_break();
 12561  04B9  3190  2000  3181   	fcall	_UART_send_break
 12562                           
 12563                           ;PS_2.c: 645: UART_send_break_timed(100000);
 12564  04BC  30A0               	movlw	160
 12565  04BD  00FA               	movwf	UART_send_break_timed@US
 12566  04BE  3086               	movlw	134
 12567  04BF  00FB               	movwf	UART_send_break_timed@US+1
 12568  04C0  3199  21B0  3181   	fcall	_UART_send_break_timed
 12569  04C3  2E44               	goto	i1l792
 12570  04C4                     i1l5676:	
 12571                           ;PS_2.c: 646: }
 12572                           
 12573                           
 12574                           ;PS_2.c: 647: else
 12575                           ;PS_2.c: 648: {
 12576                           ;PS_2.c: 649: if(!BAUDMODE)
 12577  04C4  0021               	movlb	1	; select bank1
 12578  04C5  08CB               	movf	_BAUDMODE^(0+128),f
 12579  04C6  1D03               	skipz
 12580  04C7  2CF1               	goto	i1l5688
 12581                           
 12582                           ;PS_2.c: 650: {
 12583                           ;PS_2.c: 651: UARTchar(temp, 0, 0);
 12584  04C8  01F8               	clrf	i1UARTchar@override
 12585  04C9  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12586  04CA  0023               	movlb	3	; select bank3
 12587  04CB  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12588  04CC  319F  2740  3181   	fcall	i1_UARTchar
 12589                           
 12590                           ;PS_2.c: 652: if(temp == '\r')
 12591  04CF  0023               	movlb	3	; select bank3
 12592  04D0  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12593  04D1  3A0D               	xorlw	13
 12594  04D2  1D03               	skipz
 12595  04D3  2E45               	goto	i1l5766
 12596                           
 12597                           ;PS_2.c: 653: {
 12598                           ;PS_2.c: 654: delayUS(5000);
 12599  04D4  3000               	movlw	0
 12600  04D5  00F3               	movwf	i1delayUS@US+3
 12601  04D6  3000               	movlw	0
 12602  04D7  00F2               	movwf	i1delayUS@US+2
 12603  04D8  3013               	movlw	19
 12604  04D9  00F1               	movwf	i1delayUS@US+1
 12605  04DA  3088               	movlw	136
 12606  04DB  00F0               	movwf	i1delayUS@US
 12607  04DC  319B  2375  3181   	fcall	i1_delayUS
 12608                           
 12609                           ;PS_2.c: 655: UARTchar('\n', 0, 0);
 12610  04DF  01F8               	clrf	i1UARTchar@override
 12611  04E0  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12612  04E1  300A               	movlw	10
 12613  04E2  319F  2740  3181   	fcall	i1_UARTchar
 12614                           
 12615                           ;PS_2.c: 656: delayUS(15000);
 12616  04E5  3000               	movlw	0
 12617  04E6  00F3               	movwf	i1delayUS@US+3
 12618  04E7  3000               	movlw	0
 12619  04E8  00F2               	movwf	i1delayUS@US+2
 12620  04E9  303A               	movlw	58
 12621  04EA  00F1               	movwf	i1delayUS@US+1
 12622  04EB  3098               	movlw	152
 12623  04EC  00F0               	movwf	i1delayUS@US
 12624  04ED  319B  2375  3181   	fcall	i1_delayUS
 12625  04F0  2E44               	goto	i1l792
 12626  04F1                     i1l5688:	
 12627                           ;PS_2.c: 657: }
 12628                           ;PS_2.c: 658: }
 12629                           
 12630                           
 12631                           ;PS_2.c: 659: else
 12632                           ;PS_2.c: 660: {
 12633                           ;PS_2.c: 661: if(ISNUMBER(temp))
 12634  04F1  0023               	movlb	3	; select bank3
 12635  04F2  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12636  04F3  3198  20BF  3181   	fcall	_ISNUMBER
 12637  04F6  3A00               	xorlw	0
 12638  04F7  1903               	skipnz
 12639  04F8  2D38               	goto	i1l5696
 12640                           
 12641                           ;PS_2.c: 662: {
 12642                           ;PS_2.c: 663: BaudTyped*=10;
 12643  04F9  3000               	movlw	0
 12644  04FA  00F3               	movwf	___lmul@multiplier+3
 12645  04FB  3000               	movlw	0
 12646  04FC  00F2               	movwf	___lmul@multiplier+2
 12647  04FD  3000               	movlw	0
 12648  04FE  00F1               	movwf	___lmul@multiplier+1
 12649  04FF  300A               	movlw	10
 12650  0500  00F0               	movwf	___lmul@multiplier
 12651  0501  0021               	movlb	1	; select bank1
 12652  0502  0848               	movf	(_BaudTyped+3)^(0+128),w
 12653  0503  00F7               	movwf	___lmul@multiplicand+3
 12654  0504  0847               	movf	(_BaudTyped+2)^(0+128),w
 12655  0505  00F6               	movwf	___lmul@multiplicand+2
 12656  0506  0846               	movf	(_BaudTyped+1)^(0+128),w
 12657  0507  00F5               	movwf	___lmul@multiplicand+1
 12658  0508  0845               	movf	_BaudTyped^(0+128),w
 12659  0509  00F4               	movwf	___lmul@multiplicand
 12660  050A  319A  2281  3181   	fcall	___lmul
 12661  050D  0873               	movf	?___lmul+3,w
 12662  050E  0021               	movlb	1	; select bank1
 12663  050F  00C8               	movwf	(_BaudTyped+3)^(0+128)
 12664  0510  0872               	movf	?___lmul+2,w
 12665  0511  00C7               	movwf	(_BaudTyped+2)^(0+128)
 12666  0512  0871               	movf	?___lmul+1,w
 12667  0513  00C6               	movwf	(_BaudTyped+1)^(0+128)
 12668  0514  0870               	movf	?___lmul,w
 12669  0515  00C5               	movwf	_BaudTyped^(0+128)
 12670                           
 12671                           ;PS_2.c: 664: BaudTyped += temp - 48;
 12672  0516  0023               	movlb	3	; select bank3
 12673  0517  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12674  0518  3ED0               	addlw	208
 12675  0519  0021               	movlb	1	; select bank1
 12676  051A  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12677  051B  30FF               	movlw	255
 12678  051C  1803               	skipnc
 12679  051D  3000               	movlw	0
 12680  051E  00BD               	movwf	(??_Process_PS2_ScanCode^(0+128)+1)
 12681  051F  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12682  0520  00BE               	movwf	(??_Process_PS2_ScanCode+2)^(0+128)
 12683  0521  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 12684  0522  00BF               	movwf	((??_Process_PS2_ScanCode+2)^(0+128)+1)
 12685  0523  3000               	movlw	0
 12686  0524  1BBF               	btfsc	((??_Process_PS2_ScanCode+2)^(0+128)+1),7
 12687  0525  30FF               	movlw	255
 12688  0526  00C0               	movwf	((??_Process_PS2_ScanCode+2)^(0+128)+2)
 12689  0527  00C1               	movwf	((??_Process_PS2_ScanCode+2)^(0+128)+3)
 12690  0528  083E               	movf	(??_Process_PS2_ScanCode+2)^(0+128),w
 12691  0529  07C5               	addwf	_BaudTyped^(0+128),f
 12692  052A  083F               	movf	(??_Process_PS2_ScanCode+3)^(0+128),w
 12693  052B  3DC6               	addwfc	(_BaudTyped+1)^(0+128),f
 12694  052C  0840               	movf	(??_Process_PS2_ScanCode+4)^(0+128),w
 12695  052D  3DC7               	addwfc	(_BaudTyped+2)^(0+128),f
 12696  052E  0841               	movf	(??_Process_PS2_ScanCode+5)^(0+128),w
 12697  052F  3DC8               	addwfc	(_BaudTyped+3)^(0+128),f
 12698                           
 12699                           ;PS_2.c: 665: UARTchar(temp, 0, 0);
 12700  0530  01F8               	clrf	i1UARTchar@override
 12701  0531  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12702  0532  0023               	movlb	3	; select bank3
 12703  0533  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12704  0534  319F  2740  3181   	fcall	i1_UARTchar
 12705  0537  2E44               	goto	i1l792
 12706  0538                     i1l5696:	
 12707                           ;PS_2.c: 666: }
 12708                           
 12709                           
 12710                           ;PS_2.c: 667: else if(temp == 'o' || temp == 'O')
 12711  0538  0023               	movlb	3	; select bank3
 12712  0539  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12713  053A  3A6F               	xorlw	111
 12714  053B  1903               	skipnz
 12715  053C  2D41               	goto	i1l800
 12716  053D  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12717  053E  3A4F               	xorlw	79
 12718  053F  1D03               	skipz
 12719  0540  2D4A               	goto	i1l5702
 12720  0541                     i1l800:	
 12721                           
 12722                           ;PS_2.c: 668: {
 12723                           ;PS_2.c: 669: ParityTyped = 1;
 12724  0541  01EB               	clrf	_ParityTyped^(0+384)
 12725  0542  0AEB               	incf	_ParityTyped^(0+384),f
 12726                           
 12727                           ;PS_2.c: 670: UARTchar(temp, 0, 0);
 12728  0543  01F8               	clrf	i1UARTchar@override
 12729  0544  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12730  0545  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12731  0546  319F  2740  3181   	fcall	i1_UARTchar
 12732  0549  2E44               	goto	i1l792
 12733  054A                     i1l5702:	
 12734                           ;PS_2.c: 671: }
 12735                           
 12736                           
 12737                           ;PS_2.c: 672: else if(temp == 'e' || temp == 'E')
 12738  054A  0023               	movlb	3	; select bank3
 12739  054B  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12740  054C  3A65               	xorlw	101
 12741  054D  1903               	skipnz
 12742  054E  2D53               	goto	i1l5706
 12743  054F  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12744  0550  3A45               	xorlw	69
 12745  0551  1D03               	skipz
 12746  0552  2D60               	goto	i1l5710
 12747  0553                     i1l5706:	
 12748                           
 12749                           ;PS_2.c: 673: {
 12750                           ;PS_2.c: 674: ParityTyped = 2;
 12751  0553  3002               	movlw	2
 12752  0554  0021               	movlb	1	; select bank1
 12753  0555  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12754  0556  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12755  0557  0023               	movlb	3	; select bank3
 12756  0558  00EB               	movwf	_ParityTyped^(0+384)
 12757                           
 12758                           ;PS_2.c: 675: UARTchar(temp, 0, 0);
 12759  0559  01F8               	clrf	i1UARTchar@override
 12760  055A  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12761  055B  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12762  055C  319F  2740  3181   	fcall	i1_UARTchar
 12763  055F  2E44               	goto	i1l792
 12764  0560                     i1l5710:	
 12765                           ;PS_2.c: 676: }
 12766                           
 12767                           
 12768                           ;PS_2.c: 677: else if(temp == 'm' || temp == 'M')
 12769  0560  0023               	movlb	3	; select bank3
 12770  0561  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12771  0562  3A6D               	xorlw	109
 12772  0563  1903               	skipnz
 12773  0564  2D69               	goto	i1l5714
 12774  0565  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12775  0566  3A4D               	xorlw	77
 12776  0567  1D03               	skipz
 12777  0568  2D76               	goto	i1l5718
 12778  0569                     i1l5714:	
 12779                           
 12780                           ;PS_2.c: 678: {
 12781                           ;PS_2.c: 679: ParityTyped = 3;
 12782  0569  3003               	movlw	3
 12783  056A  0021               	movlb	1	; select bank1
 12784  056B  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12785  056C  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12786  056D  0023               	movlb	3	; select bank3
 12787  056E  00EB               	movwf	_ParityTyped^(0+384)
 12788                           
 12789                           ;PS_2.c: 680: UARTchar(temp, 0, 0);
 12790  056F  01F8               	clrf	i1UARTchar@override
 12791  0570  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12792  0571  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12793  0572  319F  2740  3181   	fcall	i1_UARTchar
 12794  0575  2E44               	goto	i1l792
 12795  0576                     i1l5718:	
 12796                           ;PS_2.c: 681: }
 12797                           
 12798                           
 12799                           ;PS_2.c: 682: else if(temp == 's' || temp == 'S')
 12800  0576  0023               	movlb	3	; select bank3
 12801  0577  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12802  0578  3A73               	xorlw	115
 12803  0579  1903               	skipnz
 12804  057A  2D7F               	goto	i1l5722
 12805  057B  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12806  057C  3A53               	xorlw	83
 12807  057D  1D03               	skipz
 12808  057E  2D8C               	goto	i1l5726
 12809  057F                     i1l5722:	
 12810                           
 12811                           ;PS_2.c: 683: {
 12812                           ;PS_2.c: 684: ParityTyped = 4;
 12813  057F  3004               	movlw	4
 12814  0580  0021               	movlb	1	; select bank1
 12815  0581  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12816  0582  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12817  0583  0023               	movlb	3	; select bank3
 12818  0584  00EB               	movwf	_ParityTyped^(0+384)
 12819                           
 12820                           ;PS_2.c: 685: UARTchar(temp, 0, 0);
 12821  0585  01F8               	clrf	i1UARTchar@override
 12822  0586  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12823  0587  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12824  0588  319F  2740  3181   	fcall	i1_UARTchar
 12825  058B  2E44               	goto	i1l792
 12826  058C                     i1l5726:	
 12827                           ;PS_2.c: 686: }
 12828                           
 12829                           
 12830                           ;PS_2.c: 687: else if(temp == '\r')
 12831  058C  0023               	movlb	3	; select bank3
 12832  058D  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12833  058E  3A0D               	xorlw	13
 12834  058F  1D03               	skipz
 12835  0590  2E45               	goto	i1l5766
 12836                           
 12837                           ;PS_2.c: 688: {
 12838                           ;PS_2.c: 689: UARTstringWAIT("\r\n");
 12839  0591  30FD               	movlw	low ((STR_14+16)| (0+32768))
 12840  0592  0020               	movlb	0	; select bank0
 12841  0593  00A1               	movwf	i1UARTstringWAIT@data
 12842  0594  3089               	movlw	high ((STR_14+16)| (0+32768))
 12843  0595  00A2               	movwf	i1UARTstringWAIT@data+1
 12844  0596  319B  2311  3181   	fcall	i1_UARTstringWAIT
 12845                           
 12846                           ;PS_2.c: 690: delayUS(15000);
 12847  0599  3000               	movlw	0
 12848  059A  00F3               	movwf	i1delayUS@US+3
 12849  059B  3000               	movlw	0
 12850  059C  00F2               	movwf	i1delayUS@US+2
 12851  059D  303A               	movlw	58
 12852  059E  00F1               	movwf	i1delayUS@US+1
 12853  059F  3098               	movlw	152
 12854  05A0  00F0               	movwf	i1delayUS@US
 12855  05A1  319B  2375  3181   	fcall	i1_delayUS
 12856                           
 12857                           ;PS_2.c: 691: if(BaudTyped >=2400 && BaudTyped <= 115200)
 12858  05A4  3000               	movlw	0
 12859  05A5  0021               	movlb	1	; select bank1
 12860  05A6  0248               	subwf	(_BaudTyped+3)^(0+128),w
 12861  05A7  1D03               	skipz
 12862  05A8  2DB3               	goto	u725_25
 12863  05A9  3000               	movlw	0
 12864  05AA  0247               	subwf	(_BaudTyped+2)^(0+128),w
 12865  05AB  1D03               	skipz
 12866  05AC  2DB3               	goto	u725_25
 12867  05AD  3009               	movlw	9
 12868  05AE  0246               	subwf	(_BaudTyped+1)^(0+128),w
 12869  05AF  1D03               	skipz
 12870  05B0  2DB3               	goto	u725_25
 12871  05B1  3060               	movlw	96
 12872  05B2  0245               	subwf	_BaudTyped^(0+128),w
 12873  05B3                     u725_25:	
 12874  05B3  1C03               	skipc
 12875  05B4  2E2F               	goto	i1l5760
 12876  05B5  3000               	movlw	0
 12877  05B6  0248               	subwf	(_BaudTyped+3)^(0+128),w
 12878  05B7  1D03               	skipz
 12879  05B8  2DC3               	goto	u726_25
 12880  05B9  3001               	movlw	1
 12881  05BA  0247               	subwf	(_BaudTyped+2)^(0+128),w
 12882  05BB  1D03               	skipz
 12883  05BC  2DC3               	goto	u726_25
 12884  05BD  30C2               	movlw	194
 12885  05BE  0246               	subwf	(_BaudTyped+1)^(0+128),w
 12886  05BF  1D03               	skipz
 12887  05C0  2DC3               	goto	u726_25
 12888  05C1  3001               	movlw	1
 12889  05C2  0245               	subwf	_BaudTyped^(0+128),w
 12890  05C3                     u726_25:	
 12891  05C3  1803               	skipnc
 12892  05C4  2E2F               	goto	i1l5760
 12893                           
 12894                           ;PS_2.c: 692: {
 12895                           ;PS_2.c: 693: sprintf(buf,"Baud will be set to %lu",BaudTyped);
 12896  05C5  30AC               	movlw	low (STR_18| (0+32768))
 12897  05C6  0020               	movlb	0	; select bank0
 12898  05C7  00AA               	movwf	sprintf@f
 12899  05C8  3089               	movlw	high (STR_18| (0+32768))
 12900  05C9  00AB               	movwf	sprintf@f+1
 12901  05CA  0021               	movlb	1	; select bank1
 12902  05CB  0848               	movf	(_BaudTyped+3)^(0+128),w
 12903  05CC  0020               	movlb	0	; select bank0
 12904  05CD  00AF               	movwf	?_sprintf+5
 12905  05CE  0021               	movlb	1	; select bank1
 12906  05CF  0847               	movf	(_BaudTyped+2)^(0+128),w
 12907  05D0  0020               	movlb	0	; select bank0
 12908  05D1  00AE               	movwf	?_sprintf+4
 12909  05D2  0021               	movlb	1	; select bank1
 12910  05D3  0846               	movf	(_BaudTyped+1)^(0+128),w
 12911  05D4  0020               	movlb	0	; select bank0
 12912  05D5  00AD               	movwf	?_sprintf+3
 12913  05D6  0021               	movlb	1	; select bank1
 12914  05D7  0845               	movf	_BaudTyped^(0+128),w
 12915  05D8  0020               	movlb	0	; select bank0
 12916  05D9  00AC               	movwf	?_sprintf+2
 12917  05DA  30A0               	movlw	Process_PS2_ScanCode@buf& (0+255)
 12918  05DB  3197  2707  3181   	fcall	_sprintf
 12919                           
 12920                           ;PS_2.c: 694: UARTstringWAIT(buf);
 12921  05DE  30A0               	movlw	low Process_PS2_ScanCode@buf
 12922  05DF  0020               	movlb	0	; select bank0
 12923  05E0  00A1               	movwf	i1UARTstringWAIT@data
 12924  05E1  3001               	movlw	high Process_PS2_ScanCode@buf
 12925  05E2  00A2               	movwf	i1UARTstringWAIT@data+1
 12926  05E3  319B  2311  3181   	fcall	i1_UARTstringWAIT
 12927                           
 12928                           ;PS_2.c: 695: if(ParityTyped)
 12929  05E6  0023               	movlb	3	; select bank3
 12930  05E7  086B               	movf	_ParityTyped^(0+384),w
 12931  05E8  1903               	btfsc	3,2
 12932  05E9  2E0C               	goto	i1l5756
 12933                           
 12934                           ;PS_2.c: 696: {
 12935                           ;PS_2.c: 697: switch (ParityTyped)
 12936  05EA  2DFF               	goto	i1l5754
 12937  05EB                     i1l5744:	
 12938                           ;PS_2.c: 698: {
 12939                           ;PS_2.c: 699: case 1:
 12940                           
 12941                           
 12942                           ;PS_2.c: 700: UARTstringWAIT(OddParityMSG);
 12943  05EB  3011               	movlw	low (_OddParityMSG| (0+32768))
 12944  05EC  0020               	movlb	0	; select bank0
 12945  05ED  00A1               	movwf	i1UARTstringWAIT@data
 12946  05EE  3089               	movlw	high (_OddParityMSG| (0+32768))
 12947  05EF  2E10               	goto	L14
 12948  05F0                     i1l5746:	
 12949                           ;PS_2.c: 702: case 2:
 12950                           
 12951                           ;PS_2.c: 701: break;
 12952                           
 12953                           
 12954                           ;PS_2.c: 703: UARTstringWAIT(EvenParityMSG);
 12955  05F0  30FB               	movlw	low (_EvenParityMSG| (0+32768))
 12956  05F1  0020               	movlb	0	; select bank0
 12957  05F2  00A1               	movwf	i1UARTstringWAIT@data
 12958  05F3  3088               	movlw	high (_EvenParityMSG| (0+32768))
 12959  05F4  2E10               	goto	L14
 12960  05F5                     i1l5748:	
 12961                           ;PS_2.c: 705: case 3:
 12962                           
 12963                           ;PS_2.c: 704: break;
 12964                           
 12965                           
 12966                           ;PS_2.c: 706: UARTstringWAIT(MarkParityMSG);
 12967  05F5  304A               	movlw	low (_MarkParityMSG| (0+32768))
 12968  05F6  0020               	movlb	0	; select bank0
 12969  05F7  00A1               	movwf	i1UARTstringWAIT@data
 12970  05F8  3089               	movlw	high (_MarkParityMSG| (0+32768))
 12971  05F9  2E10               	goto	L14
 12972  05FA                     i1l5750:	
 12973                           ;PS_2.c: 708: default:
 12974                           
 12975                           ;PS_2.c: 707: break;
 12976                           
 12977                           
 12978                           ;PS_2.c: 709: UARTstringWAIT(SpaceParityMSG);
 12979  05FA  303A               	movlw	low (_SpaceParityMSG| (0+32768))
 12980  05FB  0020               	movlb	0	; select bank0
 12981  05FC  00A1               	movwf	i1UARTstringWAIT@data
 12982  05FD  3089               	movlw	high (_SpaceParityMSG| (0+32768))
 12983  05FE  2E10               	goto	L14
 12984  05FF                     i1l5754:	
 12985                           ;PS_2.c: 711: }
 12986                           
 12987                           ;PS_2.c: 710: break;
 12988                           
 12989  05FF  0023               	movlb	3	; select bank3
 12990  0600  086B               	movf	_ParityTyped^(0+384),w
 12991                           
 12992                           ; Switch size 1, requested type "space"
 12993                           ; Number of cases is 3, Range of values is 1 to 3
 12994                           ; switch strategies available:
 12995                           ; Name         Instructions Cycles
 12996                           ; simple_byte           10     6 (average)
 12997                           ; direct_byte           15     9 (fixed)
 12998                           ; jumptable            263     9 (fixed)
 12999                           ;	Chosen strategy is simple_byte
 13000  0601  3A01               	xorlw	1	; case 1
 13001  0602  1903               	skipnz
 13002  0603  2DEB               	goto	i1l5744
 13003  0604  3A03               	xorlw	3	; case 2
 13004  0605  1903               	skipnz
 13005  0606  2DF0               	goto	i1l5746
 13006  0607  3A01               	xorlw	1	; case 3
 13007  0608  1903               	skipnz
 13008  0609  2DF5               	goto	i1l5748
 13009  060A  2DFA               	goto	i1l5750
 13010                           
 13011                           ;PS_2.c: 712: }
 13012  060B  2E14               	goto	i1l823
 13013  060C                     i1l5756:	
 13014                           
 13015                           ;PS_2.c: 713: else
 13016                           ;PS_2.c: 714: {
 13017                           ;PS_2.c: 715: UARTstringWAIT(NoParityMSG);
 13018  060C  3026               	movlw	low (_NoParityMSG| (0+32768))
 13019  060D  0020               	movlb	0	; select bank0
 13020  060E  00A1               	movwf	i1UARTstringWAIT@data
 13021  060F  3089               	movlw	high (_NoParityMSG| (0+32768))
 13022  0610                     L14:	
 13023  0610  00A2               	movwf	i1UARTstringWAIT@data+1
 13024  0611  319B  2311  3181   	fcall	i1_UARTstringWAIT
 13025  0614                     i1l823:	
 13026                           
 13027                           ;PS_2.c: 716: }
 13028                           ;PS_2.c: 717: UARTstringWAIT("\r\n");
 13029  0614  30FD               	movlw	low ((STR_14+16)| (0+32768))
 13030  0615  0020               	movlb	0	; select bank0
 13031  0616  00A1               	movwf	i1UARTstringWAIT@data
 13032  0617  3089               	movlw	high ((STR_14+16)| (0+32768))
 13033  0618  00A2               	movwf	i1UARTstringWAIT@data+1
 13034  0619  319B  2311  3181   	fcall	i1_UARTstringWAIT
 13035                           
 13036                           ;PS_2.c: 718: SetBaud(BaudTyped, ParityTyped);
 13037  061C  0021               	movlb	1	; select bank1
 13038  061D  0848               	movf	(_BaudTyped+3)^(0+128),w
 13039  061E  00B2               	movwf	(SetBaud@Baud+3)^(0+128)
 13040  061F  0847               	movf	(_BaudTyped+2)^(0+128),w
 13041  0620  00B1               	movwf	(SetBaud@Baud+2)^(0+128)
 13042  0621  0846               	movf	(_BaudTyped+1)^(0+128),w
 13043  0622  00B0               	movwf	(SetBaud@Baud+1)^(0+128)
 13044  0623  0845               	movf	_BaudTyped^(0+128),w
 13045  0624  00AF               	movwf	SetBaud@Baud^(0+128)
 13046  0625  0023               	movlb	3	; select bank3
 13047  0626  086B               	movf	_ParityTyped^(0+384),w
 13048  0627  0021               	movlb	1	; select bank1
 13049  0628  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 13050  0629  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 13051  062A  00B3               	movwf	SetBaud@Parity^(0+128)
 13052  062B  318B  2365  3181   	fcall	_SetBaud
 13053                           
 13054                           ;PS_2.c: 719: }
 13055  062E  2E42               	goto	i1l5764
 13056  062F                     i1l5760:	
 13057                           
 13058                           ;PS_2.c: 720: else
 13059                           ;PS_2.c: 721: {
 13060                           ;PS_2.c: 722: UARTstringWAIT("Baud Out of Range\r\n");
 13061  062F  30D9               	movlw	low (STR_20| (0+32768))
 13062  0630  0020               	movlb	0	; select bank0
 13063  0631  00A1               	movwf	i1UARTstringWAIT@data
 13064  0632  3089               	movlw	high (STR_20| (0+32768))
 13065  0633  00A2               	movwf	i1UARTstringWAIT@data+1
 13066  0634  319B  2311  3181   	fcall	i1_UARTstringWAIT
 13067                           
 13068                           ;PS_2.c: 723: delayUS(15000);
 13069  0637  3000               	movlw	0
 13070  0638  00F3               	movwf	i1delayUS@US+3
 13071  0639  3000               	movlw	0
 13072  063A  00F2               	movwf	i1delayUS@US+2
 13073  063B  303A               	movlw	58
 13074  063C  00F1               	movwf	i1delayUS@US+1
 13075  063D  3098               	movlw	152
 13076  063E  00F0               	movwf	i1delayUS@US
 13077  063F  319B  2375  3181   	fcall	i1_delayUS
 13078  0642                     i1l5764:	
 13079                           
 13080                           ;PS_2.c: 724: }
 13081                           ;PS_2.c: 725: BAUDMODE=0;
 13082  0642  0021               	movlb	1	; select bank1
 13083  0643  01CB               	clrf	_BAUDMODE^(0+128)
 13084  0644                     i1l792:	
 13085  0644  0023               	movlb	3	; select bank3
 13086  0645                     i1l5766:	
 13087                           
 13088                           ;PS_2.c: 726: }
 13089                           ;PS_2.c: 727: }
 13090                           ;PS_2.c: 728: }
 13091                           ;PS_2.c: 729: }
 13092                           ;PS_2.c: 732: temp =0;
 13093  0645  0023               	movlb	3	; select bank3
 13094  0646  01E0               	clrf	Process_PS2_ScanCode@temp^(0+384)
 13095                           
 13096                           ;PS_2.c: 733: PS_2_Read_Data_First =0;
 13097  0647  01E1               	clrf	_PS_2_Read_Data_First^(0+384)
 13098  0648  01E2               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
 13099                           
 13100                           ;PS_2.c: 734: PS_2_Read_Data_Second =0;
 13101  0649  01E3               	clrf	_PS_2_Read_Data_Second^(0+384)
 13102  064A  01E4               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
 13103                           
 13104                           ;PS_2.c: 735: PS_2_Read_Data_Third =0;
 13105  064B  01E5               	clrf	_PS_2_Read_Data_Third^(0+384)
 13106  064C  01E6               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
 13107                           
 13108                           ;PS_2.c: 736: Caps_Lock_Key_old = Caps_Lock_Key;
 13109  064D  0021               	movlb	1	; select bank1
 13110  064E  084C               	movf	_Caps_Lock_Key^(0+128),w
 13111  064F  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 13112  0650  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 13113  0651  00CD               	movwf	_Caps_Lock_Key_old^(0+128)
 13114                           
 13115                           ;PS_2.c: 737: Right_Shift_Key_old = Right_Shift_Key;
 13116  0652  0023               	movlb	3	; select bank3
 13117  0653  086E               	movf	_Right_Shift_Key^(0+384),w
 13118  0654  0021               	movlb	1	; select bank1
 13119  0655  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 13120  0656  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 13121  0657  00D4               	movwf	_Right_Shift_Key_old^(0+128)
 13122                           
 13123                           ;PS_2.c: 738: Left_Shift_Key_old = Left_Shift_Key;
 13124  0658  0023               	movlb	3	; select bank3
 13125  0659  086A               	movf	_Left_Shift_Key^(0+384),w
 13126  065A  0021               	movlb	1	; select bank1
 13127  065B  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 13128  065C  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 13129  065D  00D0               	movwf	_Left_Shift_Key_old^(0+128)
 13130                           
 13131                           ;PS_2.c: 739: LATC &= ~0b00010000;
 13132  065E  30EF               	movlw	239
 13133  065F  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 13134  0660  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 13135  0661  0022               	movlb	2	; select bank2
 13136  0662  058E               	andwf	14,f	;volatile
 13137                           
 13138                           ;PS_2.c: 740: }
 13139  0663  2921               	goto	i1l5786
 13140  0664                     i1l5782:	
 13141                           
 13142                           ;PS_2.c: 741: else
 13143                           ;PS_2.c: 742: {
 13144                           ;PS_2.c: 744: cleanBuffer(PS_2_ScanCodes, 12);
 13145  0664  300C               	movlw	12
 13146  0665  00F0               	movwf	cleanBuffer@count
 13147  0666  3000               	movlw	0
 13148  0667  00F1               	movwf	cleanBuffer@count+1
 13149  0668  30D6               	movlw	_PS_2_ScanCodes& (0+255)
 13150  0669  3186  26DF  3181   	fcall	_cleanBuffer
 13151                           
 13152                           ;PS_2.c: 745: PS_2_Buffer_items = 0;
 13153  066C  0021               	movlb	1	; select bank1
 13154  066D  01D1               	clrf	_PS_2_Buffer_items^(0+128)
 13155  066E  2921               	goto	i1l5786
 13156  066F                     __end_of_Process_PS2_ScanCode:	
 13157                           
 13158                           	psect	text44
 13159  0CDE                     __ptext44:	
 13160 ;; *************** function i1_Send_PS2 *****************
 13161 ;; Defined at:
 13162 ;;		line 830 in file "PS_2.c"
 13163 ;; Parameters:    Size  Location     Type
 13164 ;;  command         1    wreg     unsigned char 
 13165 ;; Auto vars:     Size  Location     Type
 13166 ;;  command         1    1[BANK0 ] unsigned char 
 13167 ;;  Send_PS2        2    3[BANK0 ] unsigned int 
 13168 ;;  Send_PS2        1    2[BANK0 ] unsigned char 
 13169 ;;  Send_PS2        1    0[BANK0 ] unsigned char 
 13170 ;; Return value:  Size  Location     Type
 13171 ;;                  1    wreg      unsigned char 
 13172 ;; Registers used:
 13173 ;;		wreg, status,2, status,0, pclath, cstack
 13174 ;; Tracked objects:
 13175 ;;		On entry : 0/0
 13176 ;;		On exit  : 0/0
 13177 ;;		Unchanged: 0/0
 13178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13180 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13181 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13182 ;;      Totals:         4       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13183 ;;Total ram usage:        9 bytes
 13184 ;; Hardware stack levels used:    1
 13185 ;; Hardware stack levels required when called:    1
 13186 ;; This function calls:
 13187 ;;		i1_CheckSum_byte
 13188 ;;		i1_Clock_TRIS
 13189 ;;		i1_Data_TRIS
 13190 ;;		i1_READ_PS_2_PIN
 13191 ;;		i1_delayUS
 13192 ;; This function is called by:
 13193 ;;		_Process_PS2_ScanCode
 13194 ;;		_ResendLast
 13195 ;; This function uses a non-reentrant model
 13196 ;;
 13197                           
 13198                           
 13199                           ;psect for function i1_Send_PS2
 13200  0CDE                     i1_Send_PS2:	
 13201                           
 13202                           ;incstack = 0
 13203                           ; Regs used in i1_Send_PS2: [wreg+status,2+status,0+pclath+cstack]
 13204                           ;i1Send_PS2@command stored from wreg
 13205  0CDE  0020               	movlb	0	; select bank0
 13206  0CDF  00A1               	movwf	i1Send_PS2@command
 13207                           
 13208                           ;PS_2.c: 832: unsigned char i=0;
 13209  0CE0  01A2               	clrf	i1Send_PS2@i
 13210                           
 13211                           ;PS_2.c: 833: unsigned char oddparity = CheckSum_byte((unsigned int)command , 3);
 13212  0CE1  0821               	movf	i1Send_PS2@command,w
 13213  0CE2  00FA               	movwf	??i1_Send_PS2
 13214  0CE3  01FB               	clrf	??i1_Send_PS2+1
 13215  0CE4  087A               	movf	??i1_Send_PS2,w
 13216  0CE5  00F0               	movwf	i1CheckSum_byte@This
 13217  0CE6  087B               	movf	??i1_Send_PS2+1,w
 13218  0CE7  00F1               	movwf	i1CheckSum_byte@This+1
 13219  0CE8  3003               	movlw	3
 13220  0CE9  00FC               	movwf	??i1_Send_PS2+2
 13221  0CEA  087C               	movf	??i1_Send_PS2+2,w
 13222  0CEB  00F2               	movwf	i1CheckSum_byte@Odd_Even
 13223  0CEC  319A  22B0  318C   	fcall	i1_CheckSum_byte
 13224  0CEF  00FD               	movwf	??i1_Send_PS2+3
 13225  0CF0  087D               	movf	??i1_Send_PS2+3,w
 13226  0CF1  0020               	movlb	0	; select bank0
 13227  0CF2  00A0               	movwf	i1Send_PS2@oddparity
 13228                           
 13229                           ;PS_2.c: 834: unsigned int timeout =0;
 13230  0CF3  01A3               	clrf	i1Send_PS2@timeout
 13231  0CF4  01A4               	clrf	i1Send_PS2@timeout+1
 13232                           
 13233                           ;PS_2.c: 836: Clock_TRIS(0);
 13234  0CF5  3000               	movlw	0
 13235  0CF6  3198  205D  318C   	fcall	i1_Clock_TRIS
 13236                           
 13237                           ;PS_2.c: 837: Data_TRIS(0);
 13238  0CF9  3000               	movlw	0
 13239  0CFA  3198  2067  318C   	fcall	i1_Data_TRIS
 13240                           
 13241                           ;PS_2.c: 838: LATA &= ~0b00100000;
 13242  0CFD  30DF               	movlw	223
 13243  0CFE  00FA               	movwf	??i1_Send_PS2
 13244  0CFF  087A               	movf	??i1_Send_PS2,w
 13245  0D00  0022               	movlb	2	; select bank2
 13246  0D01  058C               	andwf	12,f	;volatile
 13247                           
 13248                           ;PS_2.c: 839: delayUS(300);
 13249  0D02  3000               	movlw	0
 13250  0D03  00F3               	movwf	i1delayUS@US+3
 13251  0D04  3000               	movlw	0
 13252  0D05  00F2               	movwf	i1delayUS@US+2
 13253  0D06  3001               	movlw	1
 13254  0D07  00F1               	movwf	i1delayUS@US+1
 13255  0D08  302C               	movlw	44
 13256  0D09  00F0               	movwf	i1delayUS@US
 13257  0D0A  319B  2375  318C   	fcall	i1_delayUS
 13258                           
 13259                           ;PS_2.c: 840: LATA &= ~0b00010000;
 13260  0D0D  30EF               	movlw	239
 13261  0D0E  00FA               	movwf	??i1_Send_PS2
 13262  0D0F  087A               	movf	??i1_Send_PS2,w
 13263  0D10  0022               	movlb	2	; select bank2
 13264  0D11  058C               	andwf	12,f	;volatile
 13265                           
 13266                           ;PS_2.c: 841: delayUS(20);
 13267  0D12  3000               	movlw	0
 13268  0D13  00F3               	movwf	i1delayUS@US+3
 13269  0D14  3000               	movlw	0
 13270  0D15  00F2               	movwf	i1delayUS@US+2
 13271  0D16  3000               	movlw	0
 13272  0D17  00F1               	movwf	i1delayUS@US+1
 13273  0D18  3014               	movlw	20
 13274  0D19  00F0               	movwf	i1delayUS@US
 13275  0D1A  319B  2375  318C   	fcall	i1_delayUS
 13276                           
 13277                           ;PS_2.c: 842: Clock_TRIS(1);
 13278  0D1D  3001               	movlw	1
 13279  0D1E  3198  205D  318C   	fcall	i1_Clock_TRIS
 13280                           
 13281                           ;PS_2.c: 843: timeout=0;
 13282  0D21  0020               	movlb	0	; select bank0
 13283  0D22  01A3               	clrf	i1Send_PS2@timeout
 13284  0D23  01A4               	clrf	i1Send_PS2@timeout+1
 13285  0D24                     i1l5142:	
 13286                           ;PS_2.c: 844: while(READ_PS_2_PIN(0b00100000))
 13287                           
 13288  0D24  3020               	movlw	32
 13289  0D25  3199  2152  318C   	fcall	i1_READ_PS_2_PIN
 13290  0D28  3800               	iorlw	0
 13291  0D29  1903               	btfsc	3,2
 13292  0D2A  2D41               	goto	i1l5144
 13293                           
 13294                           ;PS_2.c: 845: {
 13295                           ;PS_2.c: 846: __nop();
 13296  0D2B  0000               	nop
 13297                           
 13298                           ;PS_2.c: 847: timeout++;
 13299  0D2C  3001               	movlw	1
 13300  0D2D  0020               	movlb	0	; select bank0
 13301  0D2E  07A3               	addwf	i1Send_PS2@timeout,f
 13302  0D2F  3000               	movlw	0
 13303  0D30  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13304                           
 13305                           ;PS_2.c: 848: if(timeout > 15000)
 13306  0D31  303A               	movlw	58
 13307  0D32  0224               	subwf	i1Send_PS2@timeout+1,w
 13308  0D33  3099               	movlw	153
 13309  0D34  1903               	skipnz
 13310  0D35  0223               	subwf	i1Send_PS2@timeout,w
 13311  0D36  1C03               	skipc
 13312  0D37  2D24               	goto	i1l5142
 13313                           
 13314                           ;PS_2.c: 849: {
 13315                           ;PS_2.c: 850: Clock_TRIS(1);
 13316  0D38  3001               	movlw	1
 13317  0D39  3198  205D  318C   	fcall	i1_Clock_TRIS
 13318                           
 13319                           ;PS_2.c: 851: Data_TRIS(1);
 13320  0D3C  3001               	movlw	1
 13321  0D3D  3198  2067         	fcall	i1_Data_TRIS
 13322                           
 13323                           ;PS_2.c: 852: return 1;
 13324  0D3F  3001               	movlw	1
 13325  0D40  0008               	return
 13326  0D41                     i1l5144:	
 13327                           
 13328                           ;PS_2.c: 853: }
 13329                           ;PS_2.c: 854: }
 13330                           ;PS_2.c: 855: for(i=0;i<8;i++)
 13331  0D41  0020               	movlb	0	; select bank0
 13332  0D42  01A2               	clrf	i1Send_PS2@i
 13333  0D43  3008               	movlw	8
 13334  0D44  0222               	subwf	i1Send_PS2@i,w
 13335  0D45  1803               	btfsc	3,0
 13336  0D46  2D9B               	goto	i1l856
 13337  0D47                     i1l855:	
 13338                           
 13339                           ;PS_2.c: 856: {
 13340                           ;PS_2.c: 857: if(command & 0x1)
 13341  0D47  1C21               	btfss	i1Send_PS2@command,0
 13342  0D48  2D4C               	goto	i1l5152
 13343                           
 13344                           ;PS_2.c: 858: {
 13345                           ;PS_2.c: 859: LATA |= 0b00010000;
 13346  0D49  0022               	movlb	2	; select bank2
 13347  0D4A  160C               	bsf	12,4	;volatile
 13348                           
 13349                           ;PS_2.c: 860: }
 13350  0D4B  2D51               	goto	i1l5154
 13351  0D4C                     i1l5152:	
 13352                           
 13353                           ;PS_2.c: 861: else
 13354                           ;PS_2.c: 862: {
 13355                           ;PS_2.c: 863: LATA &= ~0b00010000;
 13356  0D4C  30EF               	movlw	239
 13357  0D4D  00FA               	movwf	??i1_Send_PS2
 13358  0D4E  087A               	movf	??i1_Send_PS2,w
 13359  0D4F  0022               	movlb	2	; select bank2
 13360  0D50  058C               	andwf	12,f	;volatile
 13361  0D51                     i1l5154:	
 13362                           
 13363                           ;PS_2.c: 864: }
 13364                           ;PS_2.c: 865: command >> = 1;
 13365  0D51  1003               	clrc
 13366  0D52  0020               	movlb	0	; select bank0
 13367  0D53  0CA1               	rrf	i1Send_PS2@command,f
 13368                           
 13369                           ;PS_2.c: 866: timeout=0;
 13370  0D54  01A3               	clrf	i1Send_PS2@timeout
 13371  0D55  01A4               	clrf	i1Send_PS2@timeout+1
 13372  0D56                     i1l5166:	
 13373                           ;PS_2.c: 867: while(!READ_PS_2_PIN(0b00100000))
 13374                           
 13375  0D56  3020               	movlw	32
 13376  0D57  3199  2152  318C   	fcall	i1_READ_PS_2_PIN
 13377  0D5A  3A00               	xorlw	0
 13378  0D5B  1D03               	btfss	3,2
 13379  0D5C  2D72               	goto	i1l5168
 13380                           
 13381                           ;PS_2.c: 868: {
 13382                           ;PS_2.c: 869: timeout++;
 13383  0D5D  3001               	movlw	1
 13384  0D5E  0020               	movlb	0	; select bank0
 13385  0D5F  07A3               	addwf	i1Send_PS2@timeout,f
 13386  0D60  3000               	movlw	0
 13387  0D61  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13388                           
 13389                           ;PS_2.c: 870: if(timeout > 15000)
 13390  0D62  303A               	movlw	58
 13391  0D63  0224               	subwf	i1Send_PS2@timeout+1,w
 13392  0D64  3099               	movlw	153
 13393  0D65  1903               	skipnz
 13394  0D66  0223               	subwf	i1Send_PS2@timeout,w
 13395  0D67  1C03               	skipc
 13396  0D68  2D56               	goto	i1l5166
 13397                           
 13398                           ;PS_2.c: 871: {
 13399                           ;PS_2.c: 872: Clock_TRIS(1);
 13400  0D69  3001               	movlw	1
 13401  0D6A  3198  205D  318C   	fcall	i1_Clock_TRIS
 13402                           
 13403                           ;PS_2.c: 873: Data_TRIS(1);
 13404  0D6D  3001               	movlw	1
 13405  0D6E  3198  2067         	fcall	i1_Data_TRIS
 13406                           
 13407                           ;PS_2.c: 874: return 1;
 13408  0D70  3001               	movlw	1
 13409  0D71  0008               	return
 13410  0D72                     i1l5168:	
 13411                           
 13412                           ;PS_2.c: 875: }
 13413                           ;PS_2.c: 876: }
 13414                           ;PS_2.c: 877: timeout=0;
 13415  0D72  0020               	movlb	0	; select bank0
 13416  0D73  01A3               	clrf	i1Send_PS2@timeout
 13417  0D74  01A4               	clrf	i1Send_PS2@timeout+1
 13418  0D75                     i1l5178:	
 13419                           ;PS_2.c: 878: while(READ_PS_2_PIN(0b00100000))
 13420                           
 13421  0D75  3020               	movlw	32
 13422  0D76  3199  2152  318C   	fcall	i1_READ_PS_2_PIN
 13423  0D79  3800               	iorlw	0
 13424  0D7A  1903               	btfsc	3,2
 13425  0D7B  2D92               	goto	i1l5180
 13426                           
 13427                           ;PS_2.c: 879: {
 13428                           ;PS_2.c: 880: __nop();
 13429  0D7C  0000               	nop
 13430                           
 13431                           ;PS_2.c: 881: timeout++;
 13432  0D7D  3001               	movlw	1
 13433  0D7E  0020               	movlb	0	; select bank0
 13434  0D7F  07A3               	addwf	i1Send_PS2@timeout,f
 13435  0D80  3000               	movlw	0
 13436  0D81  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13437                           
 13438                           ;PS_2.c: 882: if(timeout > 15000)
 13439  0D82  303A               	movlw	58
 13440  0D83  0224               	subwf	i1Send_PS2@timeout+1,w
 13441  0D84  3099               	movlw	153
 13442  0D85  1903               	skipnz
 13443  0D86  0223               	subwf	i1Send_PS2@timeout,w
 13444  0D87  1C03               	skipc
 13445  0D88  2D75               	goto	i1l5178
 13446                           
 13447                           ;PS_2.c: 883: {
 13448                           ;PS_2.c: 884: Clock_TRIS(1);
 13449  0D89  3001               	movlw	1
 13450  0D8A  3198  205D  318C   	fcall	i1_Clock_TRIS
 13451                           
 13452                           ;PS_2.c: 885: Data_TRIS(1);
 13453  0D8D  3001               	movlw	1
 13454  0D8E  3198  2067         	fcall	i1_Data_TRIS
 13455                           
 13456                           ;PS_2.c: 886: return 1;
 13457  0D90  3001               	movlw	1
 13458  0D91  0008               	return
 13459  0D92                     i1l5180:	
 13460  0D92  3001               	movlw	1
 13461  0D93  00FA               	movwf	??i1_Send_PS2
 13462  0D94  087A               	movf	??i1_Send_PS2,w
 13463  0D95  0020               	movlb	0	; select bank0
 13464  0D96  07A2               	addwf	i1Send_PS2@i,f
 13465  0D97  3008               	movlw	8
 13466  0D98  0222               	subwf	i1Send_PS2@i,w
 13467  0D99  1C03               	skipc
 13468  0D9A  2D47               	goto	i1l855
 13469  0D9B                     i1l856:	
 13470                           
 13471                           ;PS_2.c: 887: }
 13472                           ;PS_2.c: 888: }
 13473                           ;PS_2.c: 889: }
 13474                           ;PS_2.c: 891: if(oddparity & 0x1)
 13475  0D9B  1C20               	btfss	i1Send_PS2@oddparity,0
 13476  0D9C  2DA0               	goto	i1l5186
 13477                           
 13478                           ;PS_2.c: 892: {
 13479                           ;PS_2.c: 893: LATA |= 0b00010000;
 13480  0D9D  0022               	movlb	2	; select bank2
 13481  0D9E  160C               	bsf	12,4	;volatile
 13482                           
 13483                           ;PS_2.c: 894: }
 13484  0D9F  2DA5               	goto	i1l5188
 13485  0DA0                     i1l5186:	
 13486                           
 13487                           ;PS_2.c: 895: else
 13488                           ;PS_2.c: 896: {
 13489                           ;PS_2.c: 897: LATA &= ~0b00010000;
 13490  0DA0  30EF               	movlw	239
 13491  0DA1  00FA               	movwf	??i1_Send_PS2
 13492  0DA2  087A               	movf	??i1_Send_PS2,w
 13493  0DA3  0022               	movlb	2	; select bank2
 13494  0DA4  058C               	andwf	12,f	;volatile
 13495  0DA5                     i1l5188:	
 13496                           
 13497                           ;PS_2.c: 898: }
 13498                           ;PS_2.c: 899: timeout=0;
 13499  0DA5  0020               	movlb	0	; select bank0
 13500  0DA6  01A3               	clrf	i1Send_PS2@timeout
 13501  0DA7  01A4               	clrf	i1Send_PS2@timeout+1
 13502  0DA8                     i1l5198:	
 13503                           ;PS_2.c: 900: while(!READ_PS_2_PIN(0b00100000))
 13504                           
 13505  0DA8  3020               	movlw	32
 13506  0DA9  3199  2152  318C   	fcall	i1_READ_PS_2_PIN
 13507  0DAC  3A00               	xorlw	0
 13508  0DAD  1D03               	btfss	3,2
 13509  0DAE  2DC4               	goto	i1l5200
 13510                           
 13511                           ;PS_2.c: 901: {
 13512                           ;PS_2.c: 902: timeout++;
 13513  0DAF  3001               	movlw	1
 13514  0DB0  0020               	movlb	0	; select bank0
 13515  0DB1  07A3               	addwf	i1Send_PS2@timeout,f
 13516  0DB2  3000               	movlw	0
 13517  0DB3  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13518                           
 13519                           ;PS_2.c: 903: if(timeout > 15000)
 13520  0DB4  303A               	movlw	58
 13521  0DB5  0224               	subwf	i1Send_PS2@timeout+1,w
 13522  0DB6  3099               	movlw	153
 13523  0DB7  1903               	skipnz
 13524  0DB8  0223               	subwf	i1Send_PS2@timeout,w
 13525  0DB9  1C03               	skipc
 13526  0DBA  2DA8               	goto	i1l5198
 13527                           
 13528                           ;PS_2.c: 904: {
 13529                           ;PS_2.c: 905: Clock_TRIS(1);
 13530  0DBB  3001               	movlw	1
 13531  0DBC  3198  205D  318C   	fcall	i1_Clock_TRIS
 13532                           
 13533                           ;PS_2.c: 906: Data_TRIS(1);
 13534  0DBF  3001               	movlw	1
 13535  0DC0  3198  2067         	fcall	i1_Data_TRIS
 13536                           
 13537                           ;PS_2.c: 907: return 1;
 13538  0DC2  3001               	movlw	1
 13539  0DC3  0008               	return
 13540  0DC4                     i1l5200:	
 13541                           
 13542                           ;PS_2.c: 908: }
 13543                           ;PS_2.c: 909: }
 13544                           ;PS_2.c: 910: timeout=0;
 13545  0DC4  0020               	movlb	0	; select bank0
 13546  0DC5  01A3               	clrf	i1Send_PS2@timeout
 13547  0DC6  01A4               	clrf	i1Send_PS2@timeout+1
 13548  0DC7                     i1l5210:	
 13549                           ;PS_2.c: 911: while(READ_PS_2_PIN(0b00100000))
 13550                           
 13551  0DC7  3020               	movlw	32
 13552  0DC8  3199  2152  318C   	fcall	i1_READ_PS_2_PIN
 13553  0DCB  3800               	iorlw	0
 13554  0DCC  1903               	btfsc	3,2
 13555  0DCD  2DE3               	goto	i1l5212
 13556                           
 13557                           ;PS_2.c: 912: {
 13558                           ;PS_2.c: 913: timeout++;
 13559  0DCE  3001               	movlw	1
 13560  0DCF  0020               	movlb	0	; select bank0
 13561  0DD0  07A3               	addwf	i1Send_PS2@timeout,f
 13562  0DD1  3000               	movlw	0
 13563  0DD2  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13564                           
 13565                           ;PS_2.c: 914: if(timeout > 15000)
 13566  0DD3  303A               	movlw	58
 13567  0DD4  0224               	subwf	i1Send_PS2@timeout+1,w
 13568  0DD5  3099               	movlw	153
 13569  0DD6  1903               	skipnz
 13570  0DD7  0223               	subwf	i1Send_PS2@timeout,w
 13571  0DD8  1C03               	skipc
 13572  0DD9  2DC7               	goto	i1l5210
 13573                           
 13574                           ;PS_2.c: 915: {
 13575                           ;PS_2.c: 916: Clock_TRIS(1);
 13576  0DDA  3001               	movlw	1
 13577  0DDB  3198  205D  318C   	fcall	i1_Clock_TRIS
 13578                           
 13579                           ;PS_2.c: 917: Data_TRIS(1);
 13580  0DDE  3001               	movlw	1
 13581  0DDF  3198  2067         	fcall	i1_Data_TRIS
 13582                           
 13583                           ;PS_2.c: 918: return 1;
 13584  0DE1  3001               	movlw	1
 13585  0DE2  0008               	return
 13586  0DE3                     i1l5212:	
 13587                           
 13588                           ;PS_2.c: 919: }
 13589                           ;PS_2.c: 920: }
 13590                           ;PS_2.c: 922: Data_TRIS(1);
 13591  0DE3  3001               	movlw	1
 13592  0DE4  3198  2067  318C   	fcall	i1_Data_TRIS
 13593                           
 13594                           ;PS_2.c: 924: timeout=0;
 13595  0DE7  0020               	movlb	0	; select bank0
 13596  0DE8  01A3               	clrf	i1Send_PS2@timeout
 13597  0DE9  01A4               	clrf	i1Send_PS2@timeout+1
 13598  0DEA                     i1l5224:	
 13599                           ;PS_2.c: 925: while(READ_PS_2_PIN(0b00010000))
 13600                           
 13601  0DEA  3010               	movlw	16
 13602  0DEB  3199  2152  318C   	fcall	i1_READ_PS_2_PIN
 13603  0DEE  3800               	iorlw	0
 13604  0DEF  1903               	btfsc	3,2
 13605  0DF0  2E06               	goto	i1l5226
 13606                           
 13607                           ;PS_2.c: 926: {
 13608                           ;PS_2.c: 927: timeout++;
 13609  0DF1  3001               	movlw	1
 13610  0DF2  0020               	movlb	0	; select bank0
 13611  0DF3  07A3               	addwf	i1Send_PS2@timeout,f
 13612  0DF4  3000               	movlw	0
 13613  0DF5  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13614                           
 13615                           ;PS_2.c: 928: if(timeout > 15000)
 13616  0DF6  303A               	movlw	58
 13617  0DF7  0224               	subwf	i1Send_PS2@timeout+1,w
 13618  0DF8  3099               	movlw	153
 13619  0DF9  1903               	skipnz
 13620  0DFA  0223               	subwf	i1Send_PS2@timeout,w
 13621  0DFB  1C03               	skipc
 13622  0DFC  2DEA               	goto	i1l5224
 13623                           
 13624                           ;PS_2.c: 929: {
 13625                           ;PS_2.c: 930: Clock_TRIS(1);
 13626  0DFD  3001               	movlw	1
 13627  0DFE  3198  205D  318C   	fcall	i1_Clock_TRIS
 13628                           
 13629                           ;PS_2.c: 931: Data_TRIS(1);
 13630  0E01  3001               	movlw	1
 13631  0E02  3198  2067         	fcall	i1_Data_TRIS
 13632                           
 13633                           ;PS_2.c: 932: return 1;
 13634  0E04  3001               	movlw	1
 13635  0E05  0008               	return
 13636  0E06                     i1l5226:	
 13637                           
 13638                           ;PS_2.c: 933: }
 13639                           ;PS_2.c: 934: }
 13640                           ;PS_2.c: 935: timeout=0;
 13641  0E06  0020               	movlb	0	; select bank0
 13642  0E07  01A3               	clrf	i1Send_PS2@timeout
 13643  0E08  01A4               	clrf	i1Send_PS2@timeout+1
 13644  0E09                     i1l5236:	
 13645                           ;PS_2.c: 936: while(READ_PS_2_PIN(0b00100000))
 13646                           
 13647  0E09  3020               	movlw	32
 13648  0E0A  3199  2152  318C   	fcall	i1_READ_PS_2_PIN
 13649  0E0D  3800               	iorlw	0
 13650  0E0E  1903               	btfsc	3,2
 13651  0E0F  2E25               	goto	i1l5238
 13652                           
 13653                           ;PS_2.c: 937: {
 13654                           ;PS_2.c: 938: timeout++;
 13655  0E10  3001               	movlw	1
 13656  0E11  0020               	movlb	0	; select bank0
 13657  0E12  07A3               	addwf	i1Send_PS2@timeout,f
 13658  0E13  3000               	movlw	0
 13659  0E14  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13660                           
 13661                           ;PS_2.c: 939: if(timeout > 15000)
 13662  0E15  303A               	movlw	58
 13663  0E16  0224               	subwf	i1Send_PS2@timeout+1,w
 13664  0E17  3099               	movlw	153
 13665  0E18  1903               	skipnz
 13666  0E19  0223               	subwf	i1Send_PS2@timeout,w
 13667  0E1A  1C03               	skipc
 13668  0E1B  2E09               	goto	i1l5236
 13669                           
 13670                           ;PS_2.c: 940: {
 13671                           ;PS_2.c: 941: Clock_TRIS(1);
 13672  0E1C  3001               	movlw	1
 13673  0E1D  3198  205D  318C   	fcall	i1_Clock_TRIS
 13674                           
 13675                           ;PS_2.c: 942: Data_TRIS(1);
 13676  0E20  3001               	movlw	1
 13677  0E21  3198  2067         	fcall	i1_Data_TRIS
 13678                           
 13679                           ;PS_2.c: 943: return 1;
 13680  0E23  3001               	movlw	1
 13681  0E24  0008               	return
 13682  0E25                     i1l5238:	
 13683                           
 13684                           ;PS_2.c: 944: }
 13685                           ;PS_2.c: 945: }
 13686                           ;PS_2.c: 946: timeout=0;
 13687  0E25  0020               	movlb	0	; select bank0
 13688  0E26  01A3               	clrf	i1Send_PS2@timeout
 13689  0E27  01A4               	clrf	i1Send_PS2@timeout+1
 13690  0E28                     i1l5248:	
 13691                           ;PS_2.c: 947: while(!READ_PS_2_PIN(0b00010000))
 13692                           
 13693  0E28  3010               	movlw	16
 13694  0E29  3199  2152  318C   	fcall	i1_READ_PS_2_PIN
 13695  0E2C  3A00               	xorlw	0
 13696  0E2D  1D03               	btfss	3,2
 13697  0E2E  2E44               	goto	i1l5250
 13698                           
 13699                           ;PS_2.c: 948: {
 13700                           ;PS_2.c: 949: timeout++;
 13701  0E2F  3001               	movlw	1
 13702  0E30  0020               	movlb	0	; select bank0
 13703  0E31  07A3               	addwf	i1Send_PS2@timeout,f
 13704  0E32  3000               	movlw	0
 13705  0E33  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13706                           
 13707                           ;PS_2.c: 950: if(timeout > 15000)
 13708  0E34  303A               	movlw	58
 13709  0E35  0224               	subwf	i1Send_PS2@timeout+1,w
 13710  0E36  3099               	movlw	153
 13711  0E37  1903               	skipnz
 13712  0E38  0223               	subwf	i1Send_PS2@timeout,w
 13713  0E39  1C03               	skipc
 13714  0E3A  2E28               	goto	i1l5248
 13715                           
 13716                           ;PS_2.c: 951: {
 13717                           ;PS_2.c: 952: Clock_TRIS(1);
 13718  0E3B  3001               	movlw	1
 13719  0E3C  3198  205D  318C   	fcall	i1_Clock_TRIS
 13720                           
 13721                           ;PS_2.c: 953: Data_TRIS(1);
 13722  0E3F  3001               	movlw	1
 13723  0E40  3198  2067         	fcall	i1_Data_TRIS
 13724                           
 13725                           ;PS_2.c: 954: return 1;
 13726  0E42  3001               	movlw	1
 13727  0E43  0008               	return
 13728  0E44                     i1l5250:	
 13729                           
 13730                           ;PS_2.c: 955: }
 13731                           ;PS_2.c: 956: }
 13732                           ;PS_2.c: 957: timeout=0;
 13733  0E44  0020               	movlb	0	; select bank0
 13734  0E45  01A3               	clrf	i1Send_PS2@timeout
 13735  0E46  01A4               	clrf	i1Send_PS2@timeout+1
 13736  0E47                     i1l5260:	
 13737                           ;PS_2.c: 958: while(!READ_PS_2_PIN(0b00100000))
 13738                           
 13739  0E47  3020               	movlw	32
 13740  0E48  3199  2152  318C   	fcall	i1_READ_PS_2_PIN
 13741  0E4B  3A00               	xorlw	0
 13742  0E4C  1D03               	btfss	3,2
 13743  0E4D  2E63               	goto	i1l5262
 13744                           
 13745                           ;PS_2.c: 959: {
 13746                           ;PS_2.c: 960: timeout++;
 13747  0E4E  3001               	movlw	1
 13748  0E4F  0020               	movlb	0	; select bank0
 13749  0E50  07A3               	addwf	i1Send_PS2@timeout,f
 13750  0E51  3000               	movlw	0
 13751  0E52  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13752                           
 13753                           ;PS_2.c: 961: if(timeout > 15000)
 13754  0E53  303A               	movlw	58
 13755  0E54  0224               	subwf	i1Send_PS2@timeout+1,w
 13756  0E55  3099               	movlw	153
 13757  0E56  1903               	skipnz
 13758  0E57  0223               	subwf	i1Send_PS2@timeout,w
 13759  0E58  1C03               	skipc
 13760  0E59  2E47               	goto	i1l5260
 13761                           
 13762                           ;PS_2.c: 962: {
 13763                           ;PS_2.c: 963: Clock_TRIS(1);
 13764  0E5A  3001               	movlw	1
 13765  0E5B  3198  205D  318C   	fcall	i1_Clock_TRIS
 13766                           
 13767                           ;PS_2.c: 964: Data_TRIS(1);
 13768  0E5E  3001               	movlw	1
 13769  0E5F  3198  2067         	fcall	i1_Data_TRIS
 13770                           
 13771                           ;PS_2.c: 965: return 1;
 13772  0E61  3001               	movlw	1
 13773  0E62  0008               	return
 13774  0E63                     i1l5262:	
 13775                           
 13776                           ;PS_2.c: 966: }
 13777                           ;PS_2.c: 967: }
 13778                           ;PS_2.c: 970: Clock_TRIS(1);
 13779  0E63  3001               	movlw	1
 13780  0E64  3198  205D  318C   	fcall	i1_Clock_TRIS
 13781                           
 13782                           ;PS_2.c: 971: Data_TRIS(1);
 13783  0E67  3001               	movlw	1
 13784  0E68  3198  2067         	fcall	i1_Data_TRIS
 13785                           
 13786                           ;PS_2.c: 972: return 0;
 13787  0E6A  3000               	movlw	0
 13788  0E6B  0008               	return
 13789  0E6C                     __end_ofi1_Send_PS2:	
 13790                           
 13791                           	psect	text45
 13792  1952                     __ptext45:	
 13793 ;; *************** function i1_READ_PS_2_PIN *****************
 13794 ;; Defined at:
 13795 ;;		line 217 in file "PS_2.c"
 13796 ;; Parameters:    Size  Location     Type
 13797 ;;  DATA_CLK        1    wreg     unsigned char 
 13798 ;; Auto vars:     Size  Location     Type
 13799 ;;  DATA_CLK        1    0[COMMON] unsigned char 
 13800 ;; Return value:  Size  Location     Type
 13801 ;;                  1    wreg      unsigned char 
 13802 ;; Registers used:
 13803 ;;		wreg
 13804 ;; Tracked objects:
 13805 ;;		On entry : 0/0
 13806 ;;		On exit  : 0/0
 13807 ;;		Unchanged: 0/0
 13808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13810 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13812 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13813 ;;Total ram usage:        1 bytes
 13814 ;; Hardware stack levels used:    1
 13815 ;; This function calls:
 13816 ;;		Nothing
 13817 ;; This function is called by:
 13818 ;;		_isr
 13819 ;;		i1_Send_PS2
 13820 ;; This function uses a non-reentrant model
 13821 ;;
 13822                           
 13823                           
 13824                           ;psect for function i1_READ_PS_2_PIN
 13825  1952                     i1_READ_PS_2_PIN:	
 13826                           
 13827                           ;incstack = 0
 13828                           ; Regs used in i1_READ_PS_2_PIN: [wreg]
 13829                           ;i1READ_PS_2_PIN@DATA_CLK stored from wreg
 13830  1952  00F0               	movwf	i1READ_PS_2_PIN@DATA_CLK
 13831                           
 13832                           ;PS_2.c: 219: if(DATA_CLK == 0b00100000)
 13833  1953  0870               	movf	i1READ_PS_2_PIN@DATA_CLK,w
 13834  1954  3A20               	xorlw	32
 13835  1955  1D03               	skipz
 13836  1956  295E               	goto	i1l647
 13837                           
 13838                           ;PS_2.c: 220: {
 13839                           ;PS_2.c: 222: if((PORTA & 0b00100000) == 0b00100000)
 13840  1957  0020               	movlb	0	; select bank0
 13841  1958  1E8C               	btfss	12,5	;volatile
 13842  1959  295C               	goto	i1l4626
 13843                           
 13844                           ;PS_2.c: 223: {
 13845                           ;PS_2.c: 224: return (1);
 13846  195A  3001               	movlw	1
 13847                           
 13848                           ;PS_2.c: 225: }
 13849  195B  0008               	return
 13850  195C                     i1l4626:	
 13851                           
 13852                           ;PS_2.c: 226: else
 13853                           ;PS_2.c: 227: {
 13854                           ;PS_2.c: 228: return 0;
 13855  195C  3000               	movlw	0
 13856                           
 13857                           ;PS_2.c: 229: }
 13858                           ;PS_2.c: 230: }
 13859  195D  0008               	return
 13860  195E                     i1l647:	
 13861                           
 13862                           ;PS_2.c: 231: else
 13863                           ;PS_2.c: 232: {
 13864                           ;PS_2.c: 234: if((PORTA & 0b00010000) == 0b00010000)
 13865  195E  0020               	movlb	0	; select bank0
 13866  195F  1E0C               	btfss	12,4	;volatile
 13867  1960  2963               	goto	i1l4636
 13868                           
 13869                           ;PS_2.c: 235: {
 13870                           ;PS_2.c: 236: return (1);
 13871  1961  3001               	movlw	1
 13872                           
 13873                           ;PS_2.c: 237: }
 13874  1962  0008               	return
 13875  1963                     i1l4636:	
 13876                           
 13877                           ;PS_2.c: 238: else
 13878                           ;PS_2.c: 239: {
 13879                           ;PS_2.c: 240: return 0;
 13880  1963  3000               	movlw	0
 13881  1964  0008               	return
 13882  1965                     __end_ofi1_READ_PS_2_PIN:	
 13883                           
 13884                           	psect	text46
 13885  1867                     __ptext46:	
 13886 ;; *************** function i1_Data_TRIS *****************
 13887 ;; Defined at:
 13888 ;;		line 132 in file "PS_2.c"
 13889 ;; Parameters:    Size  Location     Type
 13890 ;;  direction       1    wreg     unsigned char 
 13891 ;; Auto vars:     Size  Location     Type
 13892 ;;  direction       1    0[COMMON] unsigned char 
 13893 ;; Return value:  Size  Location     Type
 13894 ;;		None               void
 13895 ;; Registers used:
 13896 ;;		wreg, status,2, status,0
 13897 ;; Tracked objects:
 13898 ;;		On entry : 0/0
 13899 ;;		On exit  : 0/0
 13900 ;;		Unchanged: 0/0
 13901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13903 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13905 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13906 ;;Total ram usage:        1 bytes
 13907 ;; Hardware stack levels used:    1
 13908 ;; This function calls:
 13909 ;;		Nothing
 13910 ;; This function is called by:
 13911 ;;		i1_Send_PS2
 13912 ;; This function uses a non-reentrant model
 13913 ;;
 13914                           
 13915                           
 13916                           ;psect for function i1_Data_TRIS
 13917  1867                     i1_Data_TRIS:	
 13918                           
 13919                           ;incstack = 0
 13920                           ; Regs used in i1_Data_TRIS: [wreg+status,2+status,0]
 13921                           ;i1Data_TRIS@direction stored from wreg
 13922  1867  00F0               	movwf	i1Data_TRIS@direction
 13923                           
 13924                           ;PS_2.c: 134: if(direction == 0)
 13925  1868  08F0               	movf	i1Data_TRIS@direction,f
 13926  1869  1D03               	skipz
 13927  186A  286E               	goto	i1l627
 13928                           
 13929                           ;PS_2.c: 135: {
 13930                           ;PS_2.c: 136: TRISAbits.TRISA4 = 0;
 13931  186B  0021               	movlb	1	; select bank1
 13932  186C  120C               	bcf	12,4	;volatile
 13933                           
 13934                           ;PS_2.c: 137: }
 13935  186D  0008               	return
 13936  186E                     i1l627:	
 13937                           
 13938                           ;PS_2.c: 138: else
 13939                           ;PS_2.c: 139: {
 13940                           ;PS_2.c: 140: TRISAbits.TRISA4 = 1;
 13941  186E  0021               	movlb	1	; select bank1
 13942  186F  160C               	bsf	12,4	;volatile
 13943  1870  0008               	return
 13944  1871                     __end_ofi1_Data_TRIS:	
 13945                           
 13946                           	psect	text47
 13947  185D                     __ptext47:	
 13948 ;; *************** function i1_Clock_TRIS *****************
 13949 ;; Defined at:
 13950 ;;		line 115 in file "PS_2.c"
 13951 ;; Parameters:    Size  Location     Type
 13952 ;;  direction       1    wreg     unsigned char 
 13953 ;; Auto vars:     Size  Location     Type
 13954 ;;  direction       1    0[COMMON] unsigned char 
 13955 ;; Return value:  Size  Location     Type
 13956 ;;		None               void
 13957 ;; Registers used:
 13958 ;;		wreg, status,2, status,0
 13959 ;; Tracked objects:
 13960 ;;		On entry : 0/0
 13961 ;;		On exit  : 0/0
 13962 ;;		Unchanged: 0/0
 13963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13965 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13967 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13968 ;;Total ram usage:        1 bytes
 13969 ;; Hardware stack levels used:    1
 13970 ;; This function calls:
 13971 ;;		Nothing
 13972 ;; This function is called by:
 13973 ;;		i1_Send_PS2
 13974 ;; This function uses a non-reentrant model
 13975 ;;
 13976                           
 13977                           
 13978                           ;psect for function i1_Clock_TRIS
 13979  185D                     i1_Clock_TRIS:	
 13980                           
 13981                           ;incstack = 0
 13982                           ; Regs used in i1_Clock_TRIS: [wreg+status,2+status,0]
 13983                           ;i1Clock_TRIS@direction stored from wreg
 13984  185D  00F0               	movwf	i1Clock_TRIS@direction
 13985                           
 13986                           ;PS_2.c: 117: if(direction == 0)
 13987  185E  08F0               	movf	i1Clock_TRIS@direction,f
 13988  185F  1D03               	skipz
 13989  1860  2864               	goto	i1l622
 13990                           
 13991                           ;PS_2.c: 118: {
 13992                           ;PS_2.c: 119: TRISAbits.TRISA5 = 0;
 13993  1861  0021               	movlb	1	; select bank1
 13994  1862  128C               	bcf	12,5	;volatile
 13995                           
 13996                           ;PS_2.c: 120: }
 13997  1863  0008               	return
 13998  1864                     i1l622:	
 13999                           
 14000                           ;PS_2.c: 121: else
 14001                           ;PS_2.c: 122: {
 14002                           ;PS_2.c: 123: TRISAbits.TRISA5 = 1;
 14003  1864  0021               	movlb	1	; select bank1
 14004  1865  168C               	bsf	12,5	;volatile
 14005  1866  0008               	return
 14006  1867                     __end_ofi1_Clock_TRIS:	
 14007                           
 14008                           	psect	text48
 14009  06DF                     __ptext48:	
 14010 ;; *************** function _cleanBuffer *****************
 14011 ;; Defined at:
 14012 ;;		line 159 in file "MISC.c"
 14013 ;; Parameters:    Size  Location     Type
 14014 ;;  data            1    wreg     PTR unsigned char 
 14015 ;;		 -> PS_2_ScanCodes(12), 
 14016 ;;  count           2    0[COMMON] int 
 14017 ;; Auto vars:     Size  Location     Type
 14018 ;;  data            1    3[COMMON] PTR unsigned char 
 14019 ;;		 -> PS_2_ScanCodes(12), 
 14020 ;;  i               1    4[COMMON] unsigned char 
 14021 ;; Return value:  Size  Location     Type
 14022 ;;		None               void
 14023 ;; Registers used:
 14024 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14025 ;; Tracked objects:
 14026 ;;		On entry : 0/0
 14027 ;;		On exit  : 0/0
 14028 ;;		Unchanged: 0/0
 14029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14030 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14031 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14032 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14033 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14034 ;;Total ram usage:        5 bytes
 14035 ;; Hardware stack levels used:    1
 14036 ;; This function calls:
 14037 ;;		Nothing
 14038 ;; This function is called by:
 14039 ;;		_Process_PS2_ScanCode
 14040 ;; This function uses a non-reentrant model
 14041 ;;
 14042                           
 14043                           
 14044                           ;psect for function _cleanBuffer
 14045  06DF                     _cleanBuffer:	
 14046                           
 14047                           ;incstack = 0
 14048                           ; Regs used in _cleanBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
 14049                           ;cleanBuffer@data stored from wreg
 14050  06DF  00F3               	movwf	cleanBuffer@data
 14051                           
 14052                           ;MISC.c: 161: unsigned char i=0;
 14053  06E0  01F4               	clrf	cleanBuffer@i
 14054                           
 14055                           ;MISC.c: 162: for(i=0; i<count;i++)
 14056  06E1  01F4               	clrf	cleanBuffer@i
 14057  06E2                     i1l4796:	
 14058  06E2  0871               	movf	cleanBuffer@count+1,w
 14059  06E3  3A80               	xorlw	128
 14060  06E4  3C80               	sublw	128
 14061  06E5  1D03               	skipz
 14062  06E6  2EE9               	goto	u542_25
 14063  06E7  0870               	movf	cleanBuffer@count,w
 14064  06E8  0274               	subwf	cleanBuffer@i,w
 14065  06E9                     u542_25:	
 14066  06E9  1803               	btfsc	3,0
 14067  06EA  0008               	return
 14068                           
 14069                           ;MISC.c: 163: {
 14070                           ;MISC.c: 164: data[i]= 0;
 14071  06EB  0874               	movf	cleanBuffer@i,w
 14072  06EC  0773               	addwf	cleanBuffer@data,w
 14073  06ED  00F2               	movwf	??_cleanBuffer
 14074  06EE  0872               	movf	??_cleanBuffer,w
 14075  06EF  0086               	movwf	6
 14076  06F0  0187               	clrf	7
 14077  06F1  0181               	clrf	1
 14078  06F2  3001               	movlw	1
 14079  06F3  00F2               	movwf	??_cleanBuffer
 14080  06F4  0872               	movf	??_cleanBuffer,w
 14081  06F5  07F4               	addwf	cleanBuffer@i,f
 14082  06F6  2EE2               	goto	i1l4796
 14083  06F7                     __end_of_cleanBuffer:	
 14084                           
 14085                           	psect	text49
 14086  1A81                     __ptext49:	
 14087 ;; *************** function ___lmul *****************
 14088 ;; Defined at:
 14089 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul32.c"
 14090 ;; Parameters:    Size  Location     Type
 14091 ;;  multiplier      4    0[COMMON] unsigned long 
 14092 ;;  multiplicand    4    4[COMMON] unsigned long 
 14093 ;; Auto vars:     Size  Location     Type
 14094 ;;  product         4    8[COMMON] unsigned long 
 14095 ;; Return value:  Size  Location     Type
 14096 ;;                  4    0[COMMON] unsigned long 
 14097 ;; Registers used:
 14098 ;;		wreg, status,2, status,0
 14099 ;; Tracked objects:
 14100 ;;		On entry : 0/0
 14101 ;;		On exit  : 0/0
 14102 ;;		Unchanged: 0/0
 14103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14104 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14105 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14107 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14108 ;;Total ram usage:       12 bytes
 14109 ;; Hardware stack levels used:    1
 14110 ;; This function calls:
 14111 ;;		Nothing
 14112 ;; This function is called by:
 14113 ;;		_Process_PS2_ScanCode
 14114 ;; This function uses a non-reentrant model
 14115 ;;
 14116                           
 14117                           
 14118                           ;psect for function ___lmul
 14119  1A81                     ___lmul:	
 14120                           
 14121                           ;incstack = 0
 14122                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 14123  1A81  3000               	movlw	0
 14124  1A82  00FB               	movwf	___lmul@product+3
 14125  1A83  3000               	movlw	0
 14126  1A84  00FA               	movwf	___lmul@product+2
 14127  1A85  3000               	movlw	0
 14128  1A86  00F9               	movwf	___lmul@product+1
 14129  1A87  3000               	movlw	0
 14130  1A88  00F8               	movwf	___lmul@product
 14131  1A89                     i1l5004:	
 14132  1A89  1C70               	btfss	___lmul@multiplier,0
 14133  1A8A  2A93               	goto	i1l5008
 14134  1A8B  0874               	movf	___lmul@multiplicand,w
 14135  1A8C  07F8               	addwf	___lmul@product,f
 14136  1A8D  0875               	movf	___lmul@multiplicand+1,w
 14137  1A8E  3DF9               	addwfc	___lmul@product+1,f
 14138  1A8F  0876               	movf	___lmul@multiplicand+2,w
 14139  1A90  3DFA               	addwfc	___lmul@product+2,f
 14140  1A91  0877               	movf	___lmul@multiplicand+3,w
 14141  1A92  3DFB               	addwfc	___lmul@product+3,f
 14142  1A93                     i1l5008:	
 14143  1A93  3001               	movlw	1
 14144  1A94                     u569_25:	
 14145  1A94  35F4               	lslf	___lmul@multiplicand,f
 14146  1A95  0DF5               	rlf	___lmul@multiplicand+1,f
 14147  1A96  0DF6               	rlf	___lmul@multiplicand+2,f
 14148  1A97  0DF7               	rlf	___lmul@multiplicand+3,f
 14149  1A98  0B89               	decfsz	9,f
 14150  1A99  2A94               	goto	u569_25
 14151  1A9A  3001               	movlw	1
 14152  1A9B                     u570_25:	
 14153  1A9B  36F3               	lsrf	___lmul@multiplier+3,f
 14154  1A9C  0CF2               	rrf	___lmul@multiplier+2,f
 14155  1A9D  0CF1               	rrf	___lmul@multiplier+1,f
 14156  1A9E  0CF0               	rrf	___lmul@multiplier,f
 14157  1A9F  0B89               	decfsz	9,f
 14158  1AA0  2A9B               	goto	u570_25
 14159  1AA1  0873               	movf	___lmul@multiplier+3,w
 14160  1AA2  0472               	iorwf	___lmul@multiplier+2,w
 14161  1AA3  0471               	iorwf	___lmul@multiplier+1,w
 14162  1AA4  0470               	iorwf	___lmul@multiplier,w
 14163  1AA5  1D03               	skipz
 14164  1AA6  2A89               	goto	i1l5004
 14165  1AA7  087B               	movf	___lmul@product+3,w
 14166  1AA8  00F3               	movwf	?___lmul+3
 14167  1AA9  087A               	movf	___lmul@product+2,w
 14168  1AAA  00F2               	movwf	?___lmul+2
 14169  1AAB  0879               	movf	___lmul@product+1,w
 14170  1AAC  00F1               	movwf	?___lmul+1
 14171  1AAD  0878               	movf	___lmul@product,w
 14172  1AAE  00F0               	movwf	?___lmul
 14173  1AAF  0008               	return
 14174  1AB0                     __end_of___lmul:	
 14175                           
 14176                           	psect	text50
 14177  19B0                     __ptext50:	
 14178 ;; *************** function _UART_send_break_timed *****************
 14179 ;; Defined at:
 14180 ;;		line 334 in file "UART.c"
 14181 ;; Parameters:    Size  Location     Type
 14182 ;;  US              2   10[COMMON] unsigned int 
 14183 ;; Auto vars:     Size  Location     Type
 14184 ;;		None
 14185 ;; Return value:  Size  Location     Type
 14186 ;;		None               void
 14187 ;; Registers used:
 14188 ;;		wreg, status,2, status,0, pclath, cstack
 14189 ;; Tracked objects:
 14190 ;;		On entry : 0/0
 14191 ;;		On exit  : 0/0
 14192 ;;		Unchanged: 0/0
 14193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14194 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14196 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14197 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14198 ;;Total ram usage:        3 bytes
 14199 ;; Hardware stack levels used:    1
 14200 ;; Hardware stack levels required when called:    1
 14201 ;; This function calls:
 14202 ;;		i1_delayUS
 14203 ;; This function is called by:
 14204 ;;		_isr
 14205 ;;		_Process_PS2_ScanCode
 14206 ;; This function uses a non-reentrant model
 14207 ;;
 14208                           
 14209                           
 14210                           ;psect for function _UART_send_break_timed
 14211  19B0                     _UART_send_break_timed:	
 14212                           
 14213                           ;UART.c: 337: LATC |= 0b00000100;
 14214                           
 14215                           ;incstack = 0
 14216                           ; Regs used in _UART_send_break_timed: [wreg+status,2+status,0+pclath+cstack]
 14217  19B0  0022               	movlb	2	; select bank2
 14218  19B1  150E               	bsf	14,2	;volatile
 14219                           
 14220                           ;UART.c: 338: PPSLOCK =0;
 14221  19B2  003C               	movlb	28	; select bank28
 14222  19B3  018F               	clrf	15	;volatile
 14223                           
 14224                           ;UART.c: 339: RC2PPS = 0b00000000;
 14225  19B4  003D               	movlb	29	; select bank29
 14226  19B5  01A2               	clrf	34	;volatile
 14227                           
 14228                           ;UART.c: 340: PPSLOCK =1;
 14229  19B6  3001               	movlw	1
 14230  19B7  003C               	movlb	28	; select bank28
 14231  19B8  008F               	movwf	15	;volatile
 14232                           
 14233                           ;UART.c: 342: LATC &= ~0b00000100;
 14234  19B9  30FB               	movlw	251
 14235  19BA  00FC               	movwf	??_UART_send_break_timed
 14236  19BB  087C               	movf	??_UART_send_break_timed,w
 14237  19BC  0022               	movlb	2	; select bank2
 14238  19BD  058E               	andwf	14,f	;volatile
 14239                           
 14240                           ;UART.c: 343: delayUS(US);
 14241  19BE  087A               	movf	UART_send_break_timed@US,w
 14242  19BF  00F0               	movwf	i1delayUS@US
 14243  19C0  087B               	movf	UART_send_break_timed@US+1,w
 14244  19C1  00F1               	movwf	i1delayUS@US+1
 14245  19C2  01F2               	clrf	i1delayUS@US+2
 14246  19C3  01F3               	clrf	i1delayUS@US+3
 14247  19C4  319B  2375         	fcall	i1_delayUS
 14248                           
 14249                           ;UART.c: 344: LATC |= 0b00000100;
 14250  19C6  0022               	movlb	2	; select bank2
 14251  19C7  150E               	bsf	14,2	;volatile
 14252                           
 14253                           ;UART.c: 346: PPSLOCK =0;
 14254  19C8  003C               	movlb	28	; select bank28
 14255  19C9  018F               	clrf	15	;volatile
 14256                           
 14257                           ;UART.c: 347: RC2PPS = 0b00010100;
 14258  19CA  3014               	movlw	20
 14259  19CB  003D               	movlb	29	; select bank29
 14260  19CC  00A2               	movwf	34	;volatile
 14261                           
 14262                           ;UART.c: 348: CKPPS = 0b00010010;
 14263  19CD  3012               	movlw	18
 14264  19CE  003C               	movlb	28	; select bank28
 14265  19CF  00A5               	movwf	37	;volatile
 14266                           
 14267                           ;UART.c: 350: RXPPS = 0b00010101;
 14268  19D0  3015               	movlw	21
 14269  19D1  00A4               	movwf	36	;volatile
 14270                           
 14271                           ;UART.c: 352: PPSLOCK =1;
 14272  19D2  3001               	movlw	1
 14273  19D3  008F               	movwf	15	;volatile
 14274  19D4  0008               	return
 14275  19D5                     __end_of_UART_send_break_timed:	
 14276                           
 14277                           	psect	text51
 14278  1000                     __ptext51:	
 14279 ;; *************** function _UART_send_break *****************
 14280 ;; Defined at:
 14281 ;;		line 322 in file "UART.c"
 14282 ;; Parameters:    Size  Location     Type
 14283 ;;		None
 14284 ;; Auto vars:     Size  Location     Type
 14285 ;;		None
 14286 ;; Return value:  Size  Location     Type
 14287 ;;		None               void
 14288 ;; Registers used:
 14289 ;;		wreg
 14290 ;; Tracked objects:
 14291 ;;		On entry : 0/0
 14292 ;;		On exit  : 0/0
 14293 ;;		Unchanged: 0/0
 14294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14298 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14299 ;;Total ram usage:        0 bytes
 14300 ;; Hardware stack levels used:    1
 14301 ;; This function calls:
 14302 ;;		Nothing
 14303 ;; This function is called by:
 14304 ;;		_Process_PS2_ScanCode
 14305 ;; This function uses a non-reentrant model
 14306 ;;
 14307                           
 14308                           
 14309                           ;psect for function _UART_send_break
 14310  1000                     _UART_send_break:	
 14311                           
 14312                           ;UART.c: 324: TX1STA |= 0b00001000;
 14313                           
 14314                           ;incstack = 0
 14315                           ; Regs used in _UART_send_break: [wreg]
 14316  1000  0023               	movlb	3	; select bank3
 14317  1001  159E               	bsf	30,3	;volatile
 14318                           
 14319                           ;UART.c: 325: TXREG = 'd';
 14320  1002  3064               	movlw	100
 14321  1003  009A               	movwf	26	;volatile
 14322  1004  0008               	return
 14323  1005                     __end_of_UART_send_break:	
 14324                           
 14325                           	psect	text52
 14326  0B65                     __ptext52:	
 14327 ;; *************** function _SetBaud *****************
 14328 ;; Defined at:
 14329 ;;		line 380 in file "UART.c"
 14330 ;; Parameters:    Size  Location     Type
 14331 ;;  Baud            4   15[BANK1 ] unsigned long 
 14332 ;;  Parity          1   19[BANK1 ] unsigned char 
 14333 ;; Auto vars:     Size  Location     Type
 14334 ;;  buf            50    0[BANK2 ] unsigned char [50]
 14335 ;;  temp            4   58[BANK2 ] unsigned long 
 14336 ;;  Paritytemp      4   54[BANK2 ] unsigned long 
 14337 ;;  Baudtemp        4   50[BANK2 ] unsigned long 
 14338 ;;  i               1   62[BANK2 ] unsigned char 
 14339 ;; Return value:  Size  Location     Type
 14340 ;;		None               void
 14341 ;; Registers used:
 14342 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14343 ;; Tracked objects:
 14344 ;;		On entry : 0/0
 14345 ;;		On exit  : 0/0
 14346 ;;		Unchanged: 0/0
 14347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14348 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 14349 ;;      Locals:         0       0       0      63       0       0       0       0       0       0       0       0       
      +0       0
 14350 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
 14351 ;;      Totals:         0       0      13      63       0       0       0       0       0       0       0       0       
      +0       0
 14352 ;;Total ram usage:       76 bytes
 14353 ;; Hardware stack levels used:    1
 14354 ;; Hardware stack levels required when called:    4
 14355 ;; This function calls:
 14356 ;;		_WriteBaud
 14357 ;;		_sprintf
 14358 ;;		i1_InitUART
 14359 ;;		i1_ReadBaud
 14360 ;;		i1_UARTstringWAIT
 14361 ;;		i1_delayUS
 14362 ;; This function is called by:
 14363 ;;		_Process_PS2_ScanCode
 14364 ;; This function uses a non-reentrant model
 14365 ;;
 14366                           
 14367                           
 14368                           ;psect for function _SetBaud
 14369  0B65                     _SetBaud:	
 14370                           
 14371                           ;UART.c: 382: unsigned char buf[50];
 14372                           ;UART.c: 383: unsigned long Baudtemp=0;
 14373                           
 14374                           ;incstack = 0
 14375                           ; Regs used in _SetBaud: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14376  0B65  3000               	movlw	0
 14377  0B66  0022               	movlb	2	; select bank2
 14378  0B67  00D5               	movwf	(SetBaud@Baudtemp+3)^(0+256)
 14379  0B68  3000               	movlw	0
 14380  0B69  00D4               	movwf	(SetBaud@Baudtemp+2)^(0+256)
 14381  0B6A  3000               	movlw	0
 14382  0B6B  00D3               	movwf	(SetBaud@Baudtemp+1)^(0+256)
 14383  0B6C  3000               	movlw	0
 14384  0B6D  00D2               	movwf	SetBaud@Baudtemp^(0+256)
 14385                           
 14386                           ;UART.c: 384: unsigned long Paritytemp=0;
 14387  0B6E  3000               	movlw	0
 14388  0B6F  00D9               	movwf	(SetBaud@Paritytemp+3)^(0+256)
 14389  0B70  3000               	movlw	0
 14390  0B71  00D8               	movwf	(SetBaud@Paritytemp+2)^(0+256)
 14391  0B72  3000               	movlw	0
 14392  0B73  00D7               	movwf	(SetBaud@Paritytemp+1)^(0+256)
 14393  0B74  3000               	movlw	0
 14394  0B75  00D6               	movwf	SetBaud@Paritytemp^(0+256)
 14395                           
 14396                           ;UART.c: 385: unsigned long temp;
 14397                           ;UART.c: 386: unsigned char i =0;
 14398  0B76  01DE               	clrf	SetBaud@i^(0+256)
 14399                           
 14400                           ;UART.c: 388: WriteBaud((0x1800 >> 5), Baud, Parity);
 14401  0B77  30C0               	movlw	192
 14402  0B78  0021               	movlb	1	; select bank1
 14403  0B79  00A0               	movwf	WriteBaud@row^(0+128)
 14404  0B7A  3000               	movlw	0
 14405  0B7B  00A1               	movwf	(WriteBaud@row^(0+128)+1)
 14406  0B7C  0832               	movf	(SetBaud@Baud+3)^(0+128),w
 14407  0B7D  00A5               	movwf	(WriteBaud@Baud+3)^(0+128)
 14408  0B7E  0831               	movf	(SetBaud@Baud+2)^(0+128),w
 14409  0B7F  00A4               	movwf	(WriteBaud@Baud+2)^(0+128)
 14410  0B80  0830               	movf	(SetBaud@Baud+1)^(0+128),w
 14411  0B81  00A3               	movwf	(WriteBaud@Baud+1)^(0+128)
 14412  0B82  082F               	movf	SetBaud@Baud^(0+128),w
 14413  0B83  00A2               	movwf	WriteBaud@Baud^(0+128)
 14414  0B84  0833               	movf	SetBaud@Parity^(0+128),w
 14415  0B85  00B4               	movwf	??_SetBaud^(0+128)
 14416  0B86  0834               	movf	??_SetBaud^(0+128),w
 14417  0B87  00A6               	movwf	WriteBaud@Parity^(0+128)
 14418  0B88  3191  21A6  318B   	fcall	_WriteBaud
 14419                           
 14420                           ;UART.c: 389: temp = ReadBaud((0x1800 >> 5), 0);
 14421  0B8B  30C0               	movlw	192
 14422  0B8C  0020               	movlb	0	; select bank0
 14423  0B8D  00A4               	movwf	i1ReadBaud@row
 14424  0B8E  3000               	movlw	0
 14425  0B8F  00A5               	movwf	i1ReadBaud@row+1
 14426  0B90  01A6               	clrf	i1ReadBaud@column
 14427  0B91  3190  20DE  318B   	fcall	i1_ReadBaud
 14428  0B94  0020               	movlb	0	; select bank0
 14429  0B95  0827               	movf	?i1_ReadBaud+3,w
 14430  0B96  0022               	movlb	2	; select bank2
 14431  0B97  00DD               	movwf	(SetBaud@temp+3)^(0+256)
 14432  0B98  0020               	movlb	0	; select bank0
 14433  0B99  0826               	movf	?i1_ReadBaud+2,w
 14434  0B9A  0022               	movlb	2	; select bank2
 14435  0B9B  00DC               	movwf	(SetBaud@temp+2)^(0+256)
 14436  0B9C  0020               	movlb	0	; select bank0
 14437  0B9D  0825               	movf	?i1_ReadBaud+1,w
 14438  0B9E  0022               	movlb	2	; select bank2
 14439  0B9F  00DB               	movwf	(SetBaud@temp+1)^(0+256)
 14440  0BA0  0020               	movlb	0	; select bank0
 14441  0BA1  0824               	movf	?i1_ReadBaud,w
 14442  0BA2  0022               	movlb	2	; select bank2
 14443  0BA3  00DA               	movwf	SetBaud@temp^(0+256)
 14444                           
 14445                           ;UART.c: 390: Baudtemp = temp & 0x000FFFFF;
 14446  0BA4  30FF               	movlw	255
 14447  0BA5  055A               	andwf	SetBaud@temp^(0+256),w
 14448  0BA6  00D2               	movwf	SetBaud@Baudtemp^(0+256)
 14449  0BA7  30FF               	movlw	255
 14450  0BA8  055B               	andwf	(SetBaud@temp+1)^(0+256),w
 14451  0BA9  00D3               	movwf	(SetBaud@Baudtemp+1)^(0+256)
 14452  0BAA  300F               	movlw	15
 14453  0BAB  055C               	andwf	(SetBaud@temp+2)^(0+256),w
 14454  0BAC  00D4               	movwf	(SetBaud@Baudtemp+2)^(0+256)
 14455  0BAD  3000               	movlw	0
 14456  0BAE  055D               	andwf	(SetBaud@temp+3)^(0+256),w
 14457  0BAF  00D5               	movwf	(SetBaud@Baudtemp+3)^(0+256)
 14458                           
 14459                           ;UART.c: 391: Paritytemp = (unsigned char)((temp & 0x00F00000) >> 20);
 14460  0BB0  085A               	movf	SetBaud@temp^(0+256),w
 14461  0BB1  0021               	movlb	1	; select bank1
 14462  0BB2  00B4               	movwf	??_SetBaud^(0+128)
 14463  0BB3  0022               	movlb	2	; select bank2
 14464  0BB4  085B               	movf	(SetBaud@temp+1)^(0+256),w
 14465  0BB5  0021               	movlb	1	; select bank1
 14466  0BB6  00B5               	movwf	(??_SetBaud^(0+128)+1)
 14467  0BB7  0022               	movlb	2	; select bank2
 14468  0BB8  085C               	movf	(SetBaud@temp+2)^(0+256),w
 14469  0BB9  0021               	movlb	1	; select bank1
 14470  0BBA  00B6               	movwf	(??_SetBaud^(0+128)+2)
 14471  0BBB  0022               	movlb	2	; select bank2
 14472  0BBC  085D               	movf	(SetBaud@temp+3)^(0+256),w
 14473  0BBD  0021               	movlb	1	; select bank1
 14474  0BBE  00B7               	movwf	(??_SetBaud^(0+128)+3)
 14475  0BBF  3014               	movlw	20
 14476  0BC0                     u546_25:	
 14477  0BC0  36B7               	lsrf	(??_SetBaud^(0+128)+3),f
 14478  0BC1  0CB6               	rrf	(??_SetBaud^(0+128)+2),f
 14479  0BC2  0CB5               	rrf	(??_SetBaud^(0+128)+1),f
 14480  0BC3  0CB4               	rrf	??_SetBaud^(0+128),f
 14481  0BC4  0B89               	decfsz	9,f
 14482  0BC5  2BC0               	goto	u546_25
 14483  0BC6  0834               	movf	??_SetBaud^(0+128),w
 14484  0BC7  390F               	andlw	15
 14485  0BC8  00B8               	movwf	(??_SetBaud+4)^(0+128)
 14486  0BC9  01B9               	clrf	((??_SetBaud+4)^(0+128)+1)
 14487  0BCA  01BA               	clrf	((??_SetBaud+4)^(0+128)+2)
 14488  0BCB  01BB               	clrf	((??_SetBaud+4)^(0+128)+3)
 14489  0BCC  083B               	movf	(??_SetBaud+7)^(0+128),w
 14490  0BCD  0022               	movlb	2	; select bank2
 14491  0BCE  00D9               	movwf	(SetBaud@Paritytemp+3)^(0+256)
 14492  0BCF  0021               	movlb	1	; select bank1
 14493  0BD0  083A               	movf	(??_SetBaud+6)^(0+128),w
 14494  0BD1  0022               	movlb	2	; select bank2
 14495  0BD2  00D8               	movwf	(SetBaud@Paritytemp+2)^(0+256)
 14496  0BD3  0021               	movlb	1	; select bank1
 14497  0BD4  0839               	movf	(??_SetBaud+5)^(0+128),w
 14498  0BD5  0022               	movlb	2	; select bank2
 14499  0BD6  00D7               	movwf	(SetBaud@Paritytemp+1)^(0+256)
 14500  0BD7  0021               	movlb	1	; select bank1
 14501  0BD8  0838               	movf	(??_SetBaud+4)^(0+128),w
 14502  0BD9  0022               	movlb	2	; select bank2
 14503  0BDA  00D6               	movwf	SetBaud@Paritytemp^(0+256)
 14504                           
 14505                           ;UART.c: 393: InitUART(Baud, Parity);
 14506  0BDB  0021               	movlb	1	; select bank1
 14507  0BDC  0832               	movf	(SetBaud@Baud+3)^(0+128),w
 14508  0BDD  0020               	movlb	0	; select bank0
 14509  0BDE  00A3               	movwf	i1InitUART@Baud+3
 14510  0BDF  0021               	movlb	1	; select bank1
 14511  0BE0  0831               	movf	(SetBaud@Baud+2)^(0+128),w
 14512  0BE1  0020               	movlb	0	; select bank0
 14513  0BE2  00A2               	movwf	i1InitUART@Baud+2
 14514  0BE3  0021               	movlb	1	; select bank1
 14515  0BE4  0830               	movf	(SetBaud@Baud+1)^(0+128),w
 14516  0BE5  0020               	movlb	0	; select bank0
 14517  0BE6  00A1               	movwf	i1InitUART@Baud+1
 14518  0BE7  0021               	movlb	1	; select bank1
 14519  0BE8  082F               	movf	SetBaud@Baud^(0+128),w
 14520  0BE9  0020               	movlb	0	; select bank0
 14521  0BEA  00A0               	movwf	i1InitUART@Baud
 14522  0BEB  0021               	movlb	1	; select bank1
 14523  0BEC  0833               	movf	SetBaud@Parity^(0+128),w
 14524  0BED  00B4               	movwf	??_SetBaud^(0+128)
 14525  0BEE  0834               	movf	??_SetBaud^(0+128),w
 14526  0BEF  0020               	movlb	0	; select bank0
 14527  0BF0  00A4               	movwf	i1InitUART@parity
 14528  0BF1  3195  2522  318B   	fcall	i1_InitUART
 14529                           
 14530                           ;UART.c: 394: UARTstringWAIT("\r\n");
 14531  0BF4  30FD               	movlw	low ((STR_14+16)| (0+32768))
 14532  0BF5  0020               	movlb	0	; select bank0
 14533  0BF6  00A1               	movwf	i1UARTstringWAIT@data
 14534  0BF7  3089               	movlw	high ((STR_14+16)| (0+32768))
 14535  0BF8  00A2               	movwf	i1UARTstringWAIT@data+1
 14536  0BF9  319B  2311  318B   	fcall	i1_UARTstringWAIT
 14537                           
 14538                           ;UART.c: 395: delayUS(15000);
 14539  0BFC  3000               	movlw	0
 14540  0BFD  00F3               	movwf	i1delayUS@US+3
 14541  0BFE  3000               	movlw	0
 14542  0BFF  00F2               	movwf	i1delayUS@US+2
 14543  0C00  303A               	movlw	58
 14544  0C01  00F1               	movwf	i1delayUS@US+1
 14545  0C02  3098               	movlw	152
 14546  0C03  00F0               	movwf	i1delayUS@US
 14547  0C04  319B  2375  318B   	fcall	i1_delayUS
 14548                           
 14549                           ;UART.c: 396: if((Baud != Baudtemp) || (Parity != Paritytemp))
 14550  0C07  0022               	movlb	2	; select bank2
 14551  0C08  0855               	movf	(SetBaud@Baudtemp+3)^(0+256),w
 14552  0C09  0021               	movlb	1	; select bank1
 14553  0C0A  0632               	xorwf	(SetBaud@Baud+3)^(0+128),w
 14554  0C0B  1D03               	skipz
 14555  0C0C  2C1D               	goto	u547_25
 14556  0C0D  0022               	movlb	2	; select bank2
 14557  0C0E  0854               	movf	(SetBaud@Baudtemp+2)^(0+256),w
 14558  0C0F  0021               	movlb	1	; select bank1
 14559  0C10  0631               	xorwf	(SetBaud@Baud+2)^(0+128),w
 14560  0C11  1D03               	skipz
 14561  0C12  2C1D               	goto	u547_25
 14562  0C13  0022               	movlb	2	; select bank2
 14563  0C14  0853               	movf	(SetBaud@Baudtemp+1)^(0+256),w
 14564  0C15  0021               	movlb	1	; select bank1
 14565  0C16  0630               	xorwf	(SetBaud@Baud+1)^(0+128),w
 14566  0C17  1D03               	skipz
 14567  0C18  2C1D               	goto	u547_25
 14568  0C19  0022               	movlb	2	; select bank2
 14569  0C1A  0852               	movf	SetBaud@Baudtemp^(0+256),w
 14570  0C1B  0021               	movlb	1	; select bank1
 14571  0C1C  062F               	xorwf	SetBaud@Baud^(0+128),w
 14572  0C1D                     u547_25:	
 14573  0C1D  1D03               	skipz
 14574  0C1E  2C3C               	goto	i1l4842
 14575  0C1F  0833               	movf	SetBaud@Parity^(0+128),w
 14576  0C20  00B4               	movwf	??_SetBaud^(0+128)
 14577  0C21  01B5               	clrf	(??_SetBaud^(0+128)+1)
 14578  0C22  01B6               	clrf	(??_SetBaud^(0+128)+2)
 14579  0C23  01B7               	clrf	(??_SetBaud^(0+128)+3)
 14580  0C24  0022               	movlb	2	; select bank2
 14581  0C25  0859               	movf	(SetBaud@Paritytemp+3)^(0+256),w
 14582  0C26  0021               	movlb	1	; select bank1
 14583  0C27  0637               	xorwf	(??_SetBaud+3)^(0+128),w
 14584  0C28  1D03               	skipz
 14585  0C29  2C3A               	goto	u548_25
 14586  0C2A  0022               	movlb	2	; select bank2
 14587  0C2B  0858               	movf	(SetBaud@Paritytemp+2)^(0+256),w
 14588  0C2C  0021               	movlb	1	; select bank1
 14589  0C2D  0636               	xorwf	(??_SetBaud+2)^(0+128),w
 14590  0C2E  1D03               	skipz
 14591  0C2F  2C3A               	goto	u548_25
 14592  0C30  0022               	movlb	2	; select bank2
 14593  0C31  0857               	movf	(SetBaud@Paritytemp+1)^(0+256),w
 14594  0C32  0021               	movlb	1	; select bank1
 14595  0C33  0635               	xorwf	(??_SetBaud+1)^(0+128),w
 14596  0C34  1D03               	skipz
 14597  0C35  2C3A               	goto	u548_25
 14598  0C36  0022               	movlb	2	; select bank2
 14599  0C37  0856               	movf	SetBaud@Paritytemp^(0+256),w
 14600  0C38  0021               	movlb	1	; select bank1
 14601  0C39  0634               	xorwf	??_SetBaud^(0+128),w
 14602  0C3A                     u548_25:	
 14603  0C3A  1903               	skipnz
 14604  0C3B  2C4F               	goto	i1l4846
 14605  0C3C                     i1l4842:	
 14606                           
 14607                           ;UART.c: 397: {
 14608                           ;UART.c: 398: UARTstringWAIT("Flash Program Fail\r\n");
 14609  0C3C  30C4               	movlw	low (STR_10| (0+32768))
 14610  0C3D  0020               	movlb	0	; select bank0
 14611  0C3E  00A1               	movwf	i1UARTstringWAIT@data
 14612  0C3F  3089               	movlw	high (STR_10| (0+32768))
 14613  0C40  00A2               	movwf	i1UARTstringWAIT@data+1
 14614  0C41  319B  2311  318B   	fcall	i1_UARTstringWAIT
 14615                           
 14616                           ;UART.c: 399: delayUS(15000);
 14617  0C44  3000               	movlw	0
 14618  0C45  00F3               	movwf	i1delayUS@US+3
 14619  0C46  3000               	movlw	0
 14620  0C47  00F2               	movwf	i1delayUS@US+2
 14621  0C48  303A               	movlw	58
 14622  0C49  00F1               	movwf	i1delayUS@US+1
 14623  0C4A  3098               	movlw	152
 14624  0C4B  00F0               	movwf	i1delayUS@US
 14625  0C4C  319B  2375  318B   	fcall	i1_delayUS
 14626  0C4F                     i1l4846:	
 14627                           
 14628                           ;UART.c: 400: }
 14629                           ;UART.c: 403: for(i =0;i<10;i++)
 14630  0C4F  0022               	movlb	2	; select bank2
 14631  0C50  01DE               	clrf	SetBaud@i^(0+256)
 14632  0C51  300A               	movlw	10
 14633  0C52  025E               	subwf	SetBaud@i^(0+256),w
 14634  0C53  1803               	btfsc	3,0
 14635  0C54  2C7C               	goto	i1l4860
 14636  0C55                     i1l478:	
 14637                           
 14638                           ;UART.c: 404: {
 14639                           ;UART.c: 405: LATC |= 0b00010000;
 14640  0C55  160E               	bsf	14,4	;volatile
 14641                           
 14642                           ;UART.c: 406: delayUS(10000);
 14643  0C56  3000               	movlw	0
 14644  0C57  00F3               	movwf	i1delayUS@US+3
 14645  0C58  3000               	movlw	0
 14646  0C59  00F2               	movwf	i1delayUS@US+2
 14647  0C5A  3027               	movlw	39
 14648  0C5B  00F1               	movwf	i1delayUS@US+1
 14649  0C5C  3010               	movlw	16
 14650  0C5D  00F0               	movwf	i1delayUS@US
 14651  0C5E  319B  2375  318B   	fcall	i1_delayUS
 14652                           
 14653                           ;UART.c: 407: LATC &= ~0b00010000;
 14654  0C61  30EF               	movlw	239
 14655  0C62  0021               	movlb	1	; select bank1
 14656  0C63  00B4               	movwf	??_SetBaud^(0+128)
 14657  0C64  0834               	movf	??_SetBaud^(0+128),w
 14658  0C65  0022               	movlb	2	; select bank2
 14659  0C66  058E               	andwf	14,f	;volatile
 14660                           
 14661                           ;UART.c: 408: delayUS(10000);
 14662  0C67  3000               	movlw	0
 14663  0C68  00F3               	movwf	i1delayUS@US+3
 14664  0C69  3000               	movlw	0
 14665  0C6A  00F2               	movwf	i1delayUS@US+2
 14666  0C6B  3027               	movlw	39
 14667  0C6C  00F1               	movwf	i1delayUS@US+1
 14668  0C6D  3010               	movlw	16
 14669  0C6E  00F0               	movwf	i1delayUS@US
 14670  0C6F  319B  2375  318B   	fcall	i1_delayUS
 14671  0C72  3001               	movlw	1
 14672  0C73  0021               	movlb	1	; select bank1
 14673  0C74  00B4               	movwf	??_SetBaud^(0+128)
 14674  0C75  0834               	movf	??_SetBaud^(0+128),w
 14675  0C76  0022               	movlb	2	; select bank2
 14676  0C77  07DE               	addwf	SetBaud@i^(0+256),f
 14677  0C78  300A               	movlw	10
 14678  0C79  025E               	subwf	SetBaud@i^(0+256),w
 14679  0C7A  1C03               	skipc
 14680  0C7B  2C55               	goto	i1l478
 14681  0C7C                     i1l4860:	
 14682                           
 14683                           ;UART.c: 409: }
 14684                           ;UART.c: 411: sprintf(buf,"Baud is %lu",Baud);
 14685  0C7C  3026               	movlw	low (STR_11| (0+32768))
 14686  0C7D  0020               	movlb	0	; select bank0
 14687  0C7E  00AA               	movwf	sprintf@f
 14688  0C7F  308A               	movlw	high (STR_11| (0+32768))
 14689  0C80  00AB               	movwf	sprintf@f+1
 14690  0C81  0021               	movlb	1	; select bank1
 14691  0C82  0832               	movf	(SetBaud@Baud+3)^(0+128),w
 14692  0C83  0020               	movlb	0	; select bank0
 14693  0C84  00AF               	movwf	?_sprintf+5
 14694  0C85  0021               	movlb	1	; select bank1
 14695  0C86  0831               	movf	(SetBaud@Baud+2)^(0+128),w
 14696  0C87  0020               	movlb	0	; select bank0
 14697  0C88  00AE               	movwf	?_sprintf+4
 14698  0C89  0021               	movlb	1	; select bank1
 14699  0C8A  0830               	movf	(SetBaud@Baud+1)^(0+128),w
 14700  0C8B  0020               	movlb	0	; select bank0
 14701  0C8C  00AD               	movwf	?_sprintf+3
 14702  0C8D  0021               	movlb	1	; select bank1
 14703  0C8E  082F               	movf	SetBaud@Baud^(0+128),w
 14704  0C8F  0020               	movlb	0	; select bank0
 14705  0C90  00AC               	movwf	?_sprintf+2
 14706  0C91  3020               	movlw	SetBaud@buf& (0+255)
 14707  0C92  3197  2707  318B   	fcall	_sprintf
 14708                           
 14709                           ;UART.c: 412: UARTstringWAIT(buf);
 14710  0C95  3020               	movlw	low SetBaud@buf
 14711  0C96  0020               	movlb	0	; select bank0
 14712  0C97  00A1               	movwf	i1UARTstringWAIT@data
 14713  0C98  3001               	movlw	high SetBaud@buf
 14714  0C99  00A2               	movwf	i1UARTstringWAIT@data+1
 14715  0C9A  319B  2311  318B   	fcall	i1_UARTstringWAIT
 14716                           
 14717                           ;UART.c: 413: if(Parity)
 14718  0C9D  0021               	movlb	1	; select bank1
 14719  0C9E  0833               	movf	SetBaud@Parity^(0+128),w
 14720  0C9F  1903               	btfsc	3,2
 14721  0CA0  2CC3               	goto	i1l4880
 14722                           
 14723                           ;UART.c: 414: {
 14724                           ;UART.c: 415: switch (Parity)
 14725  0CA1  2CB6               	goto	i1l4878
 14726  0CA2                     i1l4868:	
 14727                           ;UART.c: 416: {
 14728                           ;UART.c: 417: case 1:
 14729                           
 14730                           
 14731                           ;UART.c: 418: UARTstringWAIT(OddParityMSG);
 14732  0CA2  3011               	movlw	low (_OddParityMSG| (0+32768))
 14733  0CA3  0020               	movlb	0	; select bank0
 14734  0CA4  00A1               	movwf	i1UARTstringWAIT@data
 14735  0CA5  3089               	movlw	high (_OddParityMSG| (0+32768))
 14736  0CA6  2CC7               	goto	L19
 14737  0CA7                     i1l4870:	
 14738                           ;UART.c: 420: case 2:
 14739                           
 14740                           ;UART.c: 419: break;
 14741                           
 14742                           
 14743                           ;UART.c: 421: UARTstringWAIT(EvenParityMSG);
 14744  0CA7  30FB               	movlw	low (_EvenParityMSG| (0+32768))
 14745  0CA8  0020               	movlb	0	; select bank0
 14746  0CA9  00A1               	movwf	i1UARTstringWAIT@data
 14747  0CAA  3088               	movlw	high (_EvenParityMSG| (0+32768))
 14748  0CAB  2CC7               	goto	L19
 14749  0CAC                     i1l4872:	
 14750                           ;UART.c: 423: case 3:
 14751                           
 14752                           ;UART.c: 422: break;
 14753                           
 14754                           
 14755                           ;UART.c: 424: UARTstringWAIT(MarkParityMSG);
 14756  0CAC  304A               	movlw	low (_MarkParityMSG| (0+32768))
 14757  0CAD  0020               	movlb	0	; select bank0
 14758  0CAE  00A1               	movwf	i1UARTstringWAIT@data
 14759  0CAF  3089               	movlw	high (_MarkParityMSG| (0+32768))
 14760  0CB0  2CC7               	goto	L19
 14761  0CB1                     i1l4874:	
 14762                           ;UART.c: 426: default:
 14763                           
 14764                           ;UART.c: 425: break;
 14765                           
 14766                           
 14767                           ;UART.c: 427: UARTstringWAIT(SpaceParityMSG);
 14768  0CB1  303A               	movlw	low (_SpaceParityMSG| (0+32768))
 14769  0CB2  0020               	movlb	0	; select bank0
 14770  0CB3  00A1               	movwf	i1UARTstringWAIT@data
 14771  0CB4  3089               	movlw	high (_SpaceParityMSG| (0+32768))
 14772  0CB5  2CC7               	goto	L19
 14773  0CB6                     i1l4878:	
 14774                           ;UART.c: 429: }
 14775                           
 14776                           ;UART.c: 428: break;
 14777                           
 14778  0CB6  0021               	movlb	1	; select bank1
 14779  0CB7  0833               	movf	SetBaud@Parity^(0+128),w
 14780                           
 14781                           ; Switch size 1, requested type "space"
 14782                           ; Number of cases is 3, Range of values is 1 to 3
 14783                           ; switch strategies available:
 14784                           ; Name         Instructions Cycles
 14785                           ; simple_byte           10     6 (average)
 14786                           ; direct_byte           15     9 (fixed)
 14787                           ; jumptable            263     9 (fixed)
 14788                           ;	Chosen strategy is simple_byte
 14789  0CB8  3A01               	xorlw	1	; case 1
 14790  0CB9  1903               	skipnz
 14791  0CBA  2CA2               	goto	i1l4868
 14792  0CBB  3A03               	xorlw	3	; case 2
 14793  0CBC  1903               	skipnz
 14794  0CBD  2CA7               	goto	i1l4870
 14795  0CBE  3A01               	xorlw	1	; case 3
 14796  0CBF  1903               	skipnz
 14797  0CC0  2CAC               	goto	i1l4872
 14798  0CC1  2CB1               	goto	i1l4874
 14799                           
 14800                           ;UART.c: 430: }
 14801  0CC2  2CCB               	goto	i1l487
 14802  0CC3                     i1l4880:	
 14803                           
 14804                           ;UART.c: 431: else
 14805                           ;UART.c: 432: {
 14806                           ;UART.c: 433: UARTstringWAIT(NoParityMSG);
 14807  0CC3  3026               	movlw	low (_NoParityMSG| (0+32768))
 14808  0CC4  0020               	movlb	0	; select bank0
 14809  0CC5  00A1               	movwf	i1UARTstringWAIT@data
 14810  0CC6  3089               	movlw	high (_NoParityMSG| (0+32768))
 14811  0CC7                     L19:	
 14812  0CC7  00A2               	movwf	i1UARTstringWAIT@data+1
 14813  0CC8  319B  2311  318B   	fcall	i1_UARTstringWAIT
 14814  0CCB                     i1l487:	
 14815                           
 14816                           ;UART.c: 434: }
 14817                           ;UART.c: 435: UARTstringWAIT("\r\n");
 14818  0CCB  30FD               	movlw	low ((STR_14+16)| (0+32768))
 14819  0CCC  0020               	movlb	0	; select bank0
 14820  0CCD  00A1               	movwf	i1UARTstringWAIT@data
 14821  0CCE  3089               	movlw	high ((STR_14+16)| (0+32768))
 14822  0CCF  00A2               	movwf	i1UARTstringWAIT@data+1
 14823  0CD0  319B  2311  318B   	fcall	i1_UARTstringWAIT
 14824                           
 14825                           ;UART.c: 436: delayUS(15000);
 14826  0CD3  3000               	movlw	0
 14827  0CD4  00F3               	movwf	i1delayUS@US+3
 14828  0CD5  3000               	movlw	0
 14829  0CD6  00F2               	movwf	i1delayUS@US+2
 14830  0CD7  303A               	movlw	58
 14831  0CD8  00F1               	movwf	i1delayUS@US+1
 14832  0CD9  3098               	movlw	152
 14833  0CDA  00F0               	movwf	i1delayUS@US
 14834  0CDB  319B  2375         	fcall	i1_delayUS
 14835  0CDD  0008               	return
 14836  0CDE                     __end_of_SetBaud:	
 14837                           
 14838                           	psect	text53
 14839  1B11                     __ptext53:	
 14840 ;; *************** function i1_UARTstringWAIT *****************
 14841 ;; Defined at:
 14842 ;;		line 361 in file "UART.c"
 14843 ;; Parameters:    Size  Location     Type
 14844 ;;  data            2    1[BANK0 ] PTR const unsigned char 
 14845 ;;		 -> STR_20(20), STR_19(3), Process_PS2_ScanCode@buf(60), STR_17(3), 
 14846 ;;		 -> STR_16(3), STR_15(19), STR_14(19), STR_13(3), 
 14847 ;;		 -> STR_12(3), SetBaud@buf(50), STR_10(21), STR_9(3), 
 14848 ;;		 -> STR_8(3), NoParityMSG(20), SpaceParityMSG(16), MarkParityMSG(15), 
 14849 ;;		 -> EvenParityMSG(22), OddParityMSG(21), STR_7(3), STR_6(33), 
 14850 ;;		 -> STR_5(3), Version(9), STR_4(19), STR_3(28), 
 14851 ;;		 -> STR_2(8), STR_1(7), VoltageMSG(13), 
 14852 ;; Auto vars:     Size  Location     Type
 14853 ;;		None
 14854 ;; Return value:  Size  Location     Type
 14855 ;;		None               void
 14856 ;; Registers used:
 14857 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14858 ;; Tracked objects:
 14859 ;;		On entry : 0/0
 14860 ;;		On exit  : 0/0
 14861 ;;		Unchanged: 0/0
 14862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14863 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14865 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14866 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14867 ;;Total ram usage:        4 bytes
 14868 ;; Hardware stack levels used:    1
 14869 ;; Hardware stack levels required when called:    2
 14870 ;; This function calls:
 14871 ;;		i1_UARTchar
 14872 ;;		i1_delayUS
 14873 ;; This function is called by:
 14874 ;;		_SetBaud
 14875 ;;		_Process_PS2_ScanCode
 14876 ;; This function uses a non-reentrant model
 14877 ;;
 14878                           
 14879                           
 14880                           ;psect for function i1_UARTstringWAIT
 14881  1B11                     i1_UARTstringWAIT:	
 14882  1B11                     i1l466:	
 14883                           ;incstack = 0
 14884                           ; Regs used in i1_UARTstringWAIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14885                           ;UART.c: 363: do
 14886                           
 14887                           
 14888                           ;UART.c: 364: {
 14889                           ;UART.c: 365: delayUS(5000);
 14890  1B11  3000               	movlw	0
 14891  1B12  00F3               	movwf	i1delayUS@US+3
 14892  1B13  3000               	movlw	0
 14893  1B14  00F2               	movwf	i1delayUS@US+2
 14894  1B15  3013               	movlw	19
 14895  1B16  00F1               	movwf	i1delayUS@US+1
 14896  1B17  3088               	movlw	136
 14897  1B18  00F0               	movwf	i1delayUS@US
 14898  1B19  319B  2375  319B   	fcall	i1_delayUS
 14899                           
 14900                           ;UART.c: 366: if(*data != 0)
 14901  1B1C  0020               	movlb	0	; select bank0
 14902  1B1D  0821               	movf	i1UARTstringWAIT@data,w
 14903  1B1E  0084               	movwf	4
 14904  1B1F  0822               	movf	i1UARTstringWAIT@data+1,w
 14905  1B20  0085               	movwf	5
 14906  1B21  0800               	movf	0,w	;code access
 14907  1B22  3A00               	xorlw	0
 14908  1B23  1903               	skipnz
 14909  1B24  2B32               	goto	i1l4606
 14910                           
 14911                           ;UART.c: 367: {
 14912                           ;UART.c: 368: UARTchar(*data, 0, 0);
 14913  1B25  01F8               	clrf	i1UARTchar@override
 14914  1B26  01F9               	clrf	i1UARTchar@NinethBit_override_data
 14915  1B27  0821               	movf	i1UARTstringWAIT@data,w
 14916  1B28  0084               	movwf	4
 14917  1B29  0822               	movf	i1UARTstringWAIT@data+1,w
 14918  1B2A  0085               	movwf	5
 14919  1B2B  0800               	movf	0,w	;code access
 14920  1B2C  319F  2740  319B   	fcall	i1_UARTchar
 14921  1B2F                     i1l468:	
 14922                           ;UART.c: 369: while((!TX1STAbits.TRMT));
 14923                           
 14924  1B2F  0023               	movlb	3	; select bank3
 14925  1B30  1C9E               	btfss	30,1	;volatile
 14926  1B31  2B2F               	goto	i1l468
 14927  1B32                     i1l4606:	
 14928                           
 14929                           ;UART.c: 370: }
 14930                           ;UART.c: 371: } while( *data++);
 14931  1B32  0020               	movlb	0	; select bank0
 14932  1B33  0822               	movf	i1UARTstringWAIT@data+1,w
 14933  1B34  00A4               	movwf	??i1_UARTstringWAIT+1
 14934  1B35  0821               	movf	i1UARTstringWAIT@data,w
 14935  1B36  00A3               	movwf	??i1_UARTstringWAIT
 14936  1B37  0AA1               	incf	i1UARTstringWAIT@data,f
 14937  1B38  1903               	skipnz
 14938  1B39  0AA2               	incf	i1UARTstringWAIT@data+1,f
 14939  1B3A  0823               	movf	??i1_UARTstringWAIT,w
 14940  1B3B  0084               	movwf	4
 14941  1B3C  0824               	movf	??i1_UARTstringWAIT+1,w
 14942  1B3D  0085               	movwf	5
 14943  1B3E  0800               	movf	0,w	;code access
 14944  1B3F  3800               	iorlw	0
 14945  1B40  1903               	btfsc	3,2
 14946  1B41  0008               	return
 14947  1B42  2B11               	goto	i1l466
 14948  1B43                     __end_ofi1_UARTstringWAIT:	
 14949                           
 14950                           	psect	text54
 14951  1F40                     __ptext54:	
 14952 ;; *************** function i1_UARTchar *****************
 14953 ;; Defined at:
 14954 ;;		line 231 in file "UART.c"
 14955 ;; Parameters:    Size  Location     Type
 14956 ;;  data            1    wreg     unsigned char 
 14957 ;;  override        1    8[COMMON] unsigned char 
 14958 ;;  NinethBit_ov    1    9[COMMON] unsigned char 
 14959 ;; Auto vars:     Size  Location     Type
 14960 ;;  data            1    0[BANK0 ] unsigned char 
 14961 ;; Return value:  Size  Location     Type
 14962 ;;		None               void
 14963 ;; Registers used:
 14964 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14965 ;; Tracked objects:
 14966 ;;		On entry : 0/0
 14967 ;;		On exit  : 0/0
 14968 ;;		Unchanged: 0/0
 14969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14970 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14971 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14972 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14973 ;;      Totals:         6       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14974 ;;Total ram usage:        7 bytes
 14975 ;; Hardware stack levels used:    1
 14976 ;; Hardware stack levels required when called:    1
 14977 ;; This function calls:
 14978 ;;		i1_CheckSum_byte
 14979 ;; This function is called by:
 14980 ;;		_isr
 14981 ;;		_Process_PS2_ScanCode
 14982 ;;		i1_UARTstringWAIT
 14983 ;; This function uses a non-reentrant model
 14984 ;;
 14985                           
 14986                           
 14987                           ;psect for function i1_UARTchar
 14988  1F40                     i1_UARTchar:	
 14989                           
 14990                           ;incstack = 0
 14991                           ; Regs used in i1_UARTchar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14992                           ;i1UARTchar@data stored from wreg
 14993  1F40  0020               	movlb	0	; select bank0
 14994  1F41  00A0               	movwf	i1UARTchar@data
 14995                           
 14996                           ;UART.c: 233: if(TXSTAbits.TX9)
 14997  1F42  0023               	movlb	3	; select bank3
 14998  1F43  1F1E               	btfss	30,6	;volatile
 14999  1F44  2F85               	goto	i1l4122
 15000                           
 15001                           ;UART.c: 234: {
 15002                           ;UART.c: 236: if(!override)
 15003  1F45  08F8               	movf	i1UARTchar@override,f
 15004  1F46  1903               	btfsc	3,2
 15005  1F47  2F6F               	goto	i1l4118
 15006  1F48  2F7C               	goto	i1l4120
 15007  1F49                     i1l4112:	
 15008                           ;UART.c: 240: {
 15009                           ;UART.c: 241: case 1:
 15010                           
 15011                           ;UART.c: 237: {
 15012                           ;UART.c: 239: switch (PARITY)
 15013                           
 15014                           
 15015                           ;UART.c: 242: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 3);
 15016  1F49  0020               	movlb	0	; select bank0
 15017  1F4A  0820               	movf	i1UARTchar@data,w
 15018  1F4B  00FA               	movwf	??i1_UARTchar
 15019  1F4C  01FB               	clrf	??i1_UARTchar+1
 15020  1F4D  087A               	movf	??i1_UARTchar,w
 15021  1F4E  00F0               	movwf	i1CheckSum_byte@This
 15022  1F4F  087B               	movf	??i1_UARTchar+1,w
 15023  1F50  00F1               	movwf	i1CheckSum_byte@This+1
 15024  1F51  3003               	movlw	3
 15025  1F52  2F5C               	goto	L22
 15026  1F53                     i1l4114:	
 15027                           ;UART.c: 244: case 2:
 15028                           
 15029                           ;UART.c: 243: break;
 15030                           
 15031                           
 15032                           ;UART.c: 245: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 2);
 15033  1F53  0020               	movlb	0	; select bank0
 15034  1F54  0820               	movf	i1UARTchar@data,w
 15035  1F55  00FA               	movwf	??i1_UARTchar
 15036  1F56  01FB               	clrf	??i1_UARTchar+1
 15037  1F57  087A               	movf	??i1_UARTchar,w
 15038  1F58  00F0               	movwf	i1CheckSum_byte@This
 15039  1F59  087B               	movf	??i1_UARTchar+1,w
 15040  1F5A  00F1               	movwf	i1CheckSum_byte@This+1
 15041  1F5B  3002               	movlw	2
 15042  1F5C                     L22:	
 15043  1F5C  00FC               	movwf	??i1_UARTchar+2
 15044  1F5D  087C               	movf	??i1_UARTchar+2,w
 15045  1F5E  00F2               	movwf	i1CheckSum_byte@Odd_Even
 15046  1F5F  319A  22B0  319F   	fcall	i1_CheckSum_byte
 15047  1F62  00FD               	movwf	??i1_UARTchar+3
 15048  1F63  0023               	movlb	3	; select bank3
 15049  1F64  081E               	movf	30,w	;volatile
 15050  1F65  067D               	xorwf	??i1_UARTchar+3,w
 15051  1F66  39FE               	andlw	-2
 15052  1F67  067D               	xorwf	??i1_UARTchar+3,w
 15053  1F68  2F84               	goto	L21
 15054  1F69                     i1l432:	
 15055                           ;UART.c: 247: case 3:
 15056                           
 15057                           ;UART.c: 246: break;
 15058                           
 15059                           
 15060                           ;UART.c: 248: TXSTAbits.TX9D = 1;
 15061  1F69  0023               	movlb	3	; select bank3
 15062  1F6A  141E               	bsf	30,0	;volatile
 15063                           
 15064                           ;UART.c: 249: break;
 15065  1F6B  2F85               	goto	i1l4122
 15066  1F6C                     i1l433:	
 15067                           ;UART.c: 250: default:
 15068                           
 15069                           
 15070                           ;UART.c: 251: TXSTAbits.TX9D = 0;
 15071  1F6C  0023               	movlb	3	; select bank3
 15072  1F6D  101E               	bcf	30,0	;volatile
 15073                           
 15074                           ;UART.c: 253: }
 15075                           
 15076                           ;UART.c: 252: break;
 15077  1F6E  2F85               	goto	i1l4122
 15078  1F6F                     i1l4118:	
 15079  1F6F  0024               	movlb	4	; select bank4
 15080  1F70  0860               	movf	_PARITY^(0+512),w
 15081                           
 15082                           ; Switch size 1, requested type "space"
 15083                           ; Number of cases is 3, Range of values is 1 to 3
 15084                           ; switch strategies available:
 15085                           ; Name         Instructions Cycles
 15086                           ; simple_byte           10     6 (average)
 15087                           ; direct_byte           15     9 (fixed)
 15088                           ; jumptable            263     9 (fixed)
 15089                           ;	Chosen strategy is simple_byte
 15090  1F71  3A01               	xorlw	1	; case 1
 15091  1F72  1903               	skipnz
 15092  1F73  2F49               	goto	i1l4112
 15093  1F74  3A03               	xorlw	3	; case 2
 15094  1F75  1903               	skipnz
 15095  1F76  2F53               	goto	i1l4114
 15096  1F77  3A01               	xorlw	1	; case 3
 15097  1F78  1903               	skipnz
 15098  1F79  2F69               	goto	i1l432
 15099  1F7A  2F6C               	goto	i1l433
 15100                           
 15101                           ;UART.c: 254: }
 15102  1F7B  2F85               	goto	i1l4122
 15103  1F7C                     i1l4120:	
 15104                           
 15105                           ;UART.c: 255: else
 15106                           ;UART.c: 256: {
 15107                           ;UART.c: 257: TXSTAbits.TX9D = (NinethBit_override_data & 0x01);
 15108  1F7C  3001               	movlw	1
 15109  1F7D  0579               	andwf	i1UARTchar@NinethBit_override_data,w
 15110  1F7E  00FA               	movwf	??i1_UARTchar
 15111  1F7F  0023               	movlb	3	; select bank3
 15112  1F80  081E               	movf	30,w	;volatile
 15113  1F81  067A               	xorwf	??i1_UARTchar,w
 15114  1F82  39FE               	andlw	-2
 15115  1F83  067A               	xorwf	??i1_UARTchar,w
 15116  1F84                     L21:	
 15117  1F84  009E               	movwf	30	;volatile
 15118  1F85                     i1l4122:	
 15119                           
 15120                           ;UART.c: 258: }
 15121                           ;UART.c: 259: }
 15122                           ;UART.c: 261: if(data == '\n')
 15123  1F85  0020               	movlb	0	; select bank0
 15124  1F86  0820               	movf	i1UARTchar@data,w
 15125  1F87  3A0A               	xorlw	10
 15126  1F88  1D03               	skipz
 15127  1F89  2F96               	goto	i1l441
 15128                           
 15129                           ;UART.c: 262: {
 15130                           ;UART.c: 263: if(override)
 15131  1F8A  0878               	movf	i1UARTchar@override,w
 15132  1F8B  1903               	btfsc	3,2
 15133  1F8C  0008               	return
 15134  1F8D                     i1l437:	
 15135                           ;UART.c: 264: {
 15136                           ;UART.c: 265: while(!TXSTAbits.TRMT);
 15137                           
 15138  1F8D  0023               	movlb	3	; select bank3
 15139  1F8E  1C9E               	btfss	30,1	;volatile
 15140  1F8F  2F8D               	goto	i1l437
 15141                           
 15142                           ;UART.c: 266: TXREG = data;
 15143  1F90  0020               	movlb	0	; select bank0
 15144  1F91  0820               	movf	i1UARTchar@data,w
 15145  1F92  0023               	movlb	3	; select bank3
 15146  1F93  009A               	movwf	26	;volatile
 15147  1F94  0020               	movlb	0	; select bank0
 15148  1F95  0008               	return
 15149  1F96                     i1l441:	
 15150                           ;UART.c: 269: else
 15151                           ;UART.c: 270: {
 15152                           ;UART.c: 271: while(!TXSTAbits.TRMT);
 15153                           
 15154                           ;UART.c: 267: }
 15155                           ;UART.c: 268: }
 15156                           
 15157  1F96  0023               	movlb	3	; select bank3
 15158  1F97  1C9E               	btfss	30,1	;volatile
 15159  1F98  2F96               	goto	i1l441
 15160                           
 15161                           ;UART.c: 272: TXREG = data;
 15162  1F99  0020               	movlb	0	; select bank0
 15163  1F9A  0820               	movf	i1UARTchar@data,w
 15164  1F9B  0023               	movlb	3	; select bank3
 15165  1F9C  009A               	movwf	26	;volatile
 15166  1F9D  0020               	movlb	0	; select bank0
 15167  1F9E  0008               	return
 15168  1F9F                     __end_ofi1_UARTchar:	
 15169                           
 15170                           	psect	text55
 15171  10DE                     __ptext55:	
 15172 ;; *************** function i1_ReadBaud *****************
 15173 ;; Defined at:
 15174 ;;		line 187 in file "FLASH.c"
 15175 ;; Parameters:    Size  Location     Type
 15176 ;;  row             2    4[BANK0 ] unsigned int 
 15177 ;;  column          1    6[BANK0 ] unsigned char 
 15178 ;; Auto vars:     Size  Location     Type
 15179 ;;  ReadBaud        4   16[BANK0 ] unsigned long 
 15180 ;; Return value:  Size  Location     Type
 15181 ;;                  4    4[BANK0 ] unsigned long 
 15182 ;; Registers used:
 15183 ;;		wreg, status,2, status,0, pclath, cstack
 15184 ;; Tracked objects:
 15185 ;;		On entry : 0/0
 15186 ;;		On exit  : 0/0
 15187 ;;		Unchanged: 0/0
 15188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15189 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15190 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15191 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15192 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15193 ;;Total ram usage:       16 bytes
 15194 ;; Hardware stack levels used:    1
 15195 ;; Hardware stack levels required when called:    2
 15196 ;; This function calls:
 15197 ;;		i1_ReadFlash_4Byte
 15198 ;; This function is called by:
 15199 ;;		_SetBaud
 15200 ;; This function uses a non-reentrant model
 15201 ;;
 15202                           
 15203                           
 15204                           ;psect for function i1_ReadBaud
 15205  10DE                     i1_ReadBaud:	
 15206                           
 15207                           ;FLASH.c: 189: unsigned long temp;
 15208                           ;FLASH.c: 190: temp =(ReadFlash_4Byte(row, column));
 15209                           
 15210                           ;incstack = 0
 15211                           ; Regs used in i1_ReadBaud: [wreg+status,2+status,0+pclath+cstack]
 15212  10DE  0020               	movlb	0	; select bank0
 15213  10DF  0825               	movf	i1ReadBaud@row+1,w
 15214  10E0  01F6               	clrf	i1ReadFlash_4Byte@row+1
 15215  10E1  07F6               	addwf	i1ReadFlash_4Byte@row+1,f
 15216  10E2  0824               	movf	i1ReadBaud@row,w
 15217  10E3  01F5               	clrf	i1ReadFlash_4Byte@row
 15218  10E4  07F5               	addwf	i1ReadFlash_4Byte@row,f
 15219  10E5  0826               	movf	i1ReadBaud@column,w
 15220  10E6  00A8               	movwf	??i1_ReadBaud
 15221  10E7  0828               	movf	??i1_ReadBaud,w
 15222  10E8  00F7               	movwf	i1ReadFlash_4Byte@column
 15223  10E9  319D  25A5  3190   	fcall	i1_ReadFlash_4Byte
 15224  10EC  0878               	movf	?i1_ReadFlash_4Byte+3,w
 15225  10ED  0020               	movlb	0	; select bank0
 15226  10EE  00B3               	movwf	i1ReadBaud@temp+3
 15227  10EF  0877               	movf	?i1_ReadFlash_4Byte+2,w
 15228  10F0  00B2               	movwf	i1ReadBaud@temp+2
 15229  10F1  0876               	movf	?i1_ReadFlash_4Byte+1,w
 15230  10F2  00B1               	movwf	i1ReadBaud@temp+1
 15231  10F3  0875               	movf	?i1_ReadFlash_4Byte,w
 15232  10F4  00B0               	movwf	i1ReadBaud@temp
 15233                           
 15234                           ;FLASH.c: 191: MEM[1] = (unsigned int)(temp & 0x0003FFF);
 15235  10F5  30FF               	movlw	255
 15236  10F6  0530               	andwf	i1ReadBaud@temp,w
 15237  10F7  0021               	movlb	1	; select bank1
 15238  10F8  00E4               	movwf	(_MEM^(0+128)+2)
 15239  10F9  303F               	movlw	63
 15240  10FA  0020               	movlb	0	; select bank0
 15241  10FB  0531               	andwf	i1ReadBaud@temp+1,w
 15242  10FC  0021               	movlb	1	; select bank1
 15243  10FD  00E5               	movwf	((_MEM+1)^(0+128)+2)
 15244                           
 15245                           ;FLASH.c: 192: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
 15246  10FE  0020               	movlb	0	; select bank0
 15247  10FF  0830               	movf	i1ReadBaud@temp,w
 15248  1100  00A8               	movwf	??i1_ReadBaud
 15249  1101  0831               	movf	i1ReadBaud@temp+1,w
 15250  1102  00A9               	movwf	??i1_ReadBaud+1
 15251  1103  0832               	movf	i1ReadBaud@temp+2,w
 15252  1104  00AA               	movwf	??i1_ReadBaud+2
 15253  1105  0833               	movf	i1ReadBaud@temp+3,w
 15254  1106  00AB               	movwf	??i1_ReadBaud+3
 15255  1107  300E               	movlw	14
 15256  1108                     u525_25:	
 15257  1108  36AB               	lsrf	??i1_ReadBaud+3,f
 15258  1109  0CAA               	rrf	??i1_ReadBaud+2,f
 15259  110A  0CA9               	rrf	??i1_ReadBaud+1,f
 15260  110B  0CA8               	rrf	??i1_ReadBaud,f
 15261  110C  0B89               	decfsz	9,f
 15262  110D  2908               	goto	u525_25
 15263  110E  30FF               	movlw	255
 15264  110F  0528               	andwf	??i1_ReadBaud,w
 15265  1110  0021               	movlb	1	; select bank1
 15266  1111  00E2               	movwf	_MEM^(0+128)
 15267  1112  303F               	movlw	63
 15268  1113  0020               	movlb	0	; select bank0
 15269  1114  0529               	andwf	??i1_ReadBaud+1,w
 15270  1115  0021               	movlb	1	; select bank1
 15271  1116  00E3               	movwf	(_MEM+1)^(0+128)
 15272                           
 15273                           ;FLASH.c: 193: return (((unsigned long)MEM[0] << 12) + (unsigned long)MEM[1]);
 15274  1117  0864               	movf	(_MEM^(0+128)+2),w
 15275  1118  0020               	movlb	0	; select bank0
 15276  1119  00A8               	movwf	??i1_ReadBaud
 15277  111A  0021               	movlb	1	; select bank1
 15278  111B  0865               	movf	((_MEM+1)^(0+128)+2),w
 15279  111C  0020               	movlb	0	; select bank0
 15280  111D  00A9               	movwf	??i1_ReadBaud+1
 15281  111E  01AA               	clrf	??i1_ReadBaud+2
 15282  111F  01AB               	clrf	??i1_ReadBaud+3
 15283  1120  0021               	movlb	1	; select bank1
 15284  1121  0862               	movf	_MEM^(0+128),w
 15285  1122  0020               	movlb	0	; select bank0
 15286  1123  00AC               	movwf	??i1_ReadBaud+4
 15287  1124  0021               	movlb	1	; select bank1
 15288  1125  0863               	movf	(_MEM+1)^(0+128),w
 15289  1126  0020               	movlb	0	; select bank0
 15290  1127  00AD               	movwf	??i1_ReadBaud+5
 15291  1128  01AE               	clrf	??i1_ReadBaud+6
 15292  1129  01AF               	clrf	??i1_ReadBaud+7
 15293  112A  300C               	movlw	12
 15294  112B                     u526_25:	
 15295  112B  35AC               	lslf	??i1_ReadBaud+4,f
 15296  112C  0DAD               	rlf	??i1_ReadBaud+5,f
 15297  112D  0DAE               	rlf	??i1_ReadBaud+6,f
 15298  112E  0DAF               	rlf	??i1_ReadBaud+7,f
 15299  112F  0B89               	decfsz	9,f
 15300  1130  292B               	goto	u526_25
 15301  1131  082C               	movf	??i1_ReadBaud+4,w
 15302  1132  07A8               	addwf	??i1_ReadBaud,f
 15303  1133  082D               	movf	??i1_ReadBaud+5,w
 15304  1134  3DA9               	addwfc	??i1_ReadBaud+1,f
 15305  1135  082E               	movf	??i1_ReadBaud+6,w
 15306  1136  3DAA               	addwfc	??i1_ReadBaud+2,f
 15307  1137  082F               	movf	??i1_ReadBaud+7,w
 15308  1138  3DAB               	addwfc	??i1_ReadBaud+3,f
 15309  1139  082B               	movf	??i1_ReadBaud+3,w
 15310  113A  00A7               	movwf	?i1_ReadBaud+3
 15311  113B  082A               	movf	??i1_ReadBaud+2,w
 15312  113C  00A6               	movwf	?i1_ReadBaud+2
 15313  113D  0829               	movf	??i1_ReadBaud+1,w
 15314  113E  00A5               	movwf	?i1_ReadBaud+1
 15315  113F  0828               	movf	??i1_ReadBaud,w
 15316  1140  00A4               	movwf	?i1_ReadBaud
 15317  1141  0008               	return
 15318  1142                     __end_ofi1_ReadBaud:	
 15319                           
 15320                           	psect	text56
 15321  1DA5                     __ptext56:	
 15322 ;; *************** function i1_ReadFlash_4Byte *****************
 15323 ;; Defined at:
 15324 ;;		line 62 in file "FLASH.c"
 15325 ;; Parameters:    Size  Location     Type
 15326 ;;  row             2    5[COMMON] unsigned int 
 15327 ;;  column          1    7[COMMON] unsigned char 
 15328 ;; Auto vars:     Size  Location     Type
 15329 ;;  ReadFlash_4B    4    0[BANK0 ] unsigned long 
 15330 ;; Return value:  Size  Location     Type
 15331 ;;                  4    5[COMMON] unsigned long 
 15332 ;; Registers used:
 15333 ;;		wreg, status,2, status,0, pclath, cstack
 15334 ;; Tracked objects:
 15335 ;;		On entry : 0/0
 15336 ;;		On exit  : 0/0
 15337 ;;		Unchanged: 0/0
 15338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15339 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15340 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15341 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15342 ;;      Totals:         9       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15343 ;;Total ram usage:       13 bytes
 15344 ;; Hardware stack levels used:    1
 15345 ;; Hardware stack levels required when called:    1
 15346 ;; This function calls:
 15347 ;;		i1_ReadFlash_2Byte
 15348 ;; This function is called by:
 15349 ;;		i1_ReadBaud
 15350 ;; This function uses a non-reentrant model
 15351 ;;
 15352                           
 15353                           
 15354                           ;psect for function i1_ReadFlash_4Byte
 15355  1DA5                     i1_ReadFlash_4Byte:	
 15356                           
 15357                           ;FLASH.c: 64: unsigned long temp =0;
 15358                           
 15359                           ;incstack = 0
 15360                           ; Regs used in i1_ReadFlash_4Byte: [wreg+status,2+status,0+pclath+cstack]
 15361  1DA5  3000               	movlw	0
 15362  1DA6  0020               	movlb	0	; select bank0
 15363  1DA7  00A3               	movwf	i1ReadFlash_4Byte@temp+3
 15364  1DA8  3000               	movlw	0
 15365  1DA9  00A2               	movwf	i1ReadFlash_4Byte@temp+2
 15366  1DAA  3000               	movlw	0
 15367  1DAB  00A1               	movwf	i1ReadFlash_4Byte@temp+1
 15368  1DAC  3000               	movlw	0
 15369  1DAD  00A0               	movwf	i1ReadFlash_4Byte@temp
 15370                           
 15371                           ;FLASH.c: 65: temp = ((unsigned long)ReadFlash_2Byte(row, column) << 16);
 15372  1DAE  0876               	movf	i1ReadFlash_4Byte@row+1,w
 15373  1DAF  01F1               	clrf	i1ReadFlash_2Byte@row+1
 15374  1DB0  07F1               	addwf	i1ReadFlash_2Byte@row+1,f
 15375  1DB1  0875               	movf	i1ReadFlash_4Byte@row,w
 15376  1DB2  01F0               	clrf	i1ReadFlash_2Byte@row
 15377  1DB3  07F0               	addwf	i1ReadFlash_2Byte@row,f
 15378  1DB4  0877               	movf	i1ReadFlash_4Byte@column,w
 15379  1DB5  00F9               	movwf	??i1_ReadFlash_4Byte
 15380  1DB6  0879               	movf	??i1_ReadFlash_4Byte,w
 15381  1DB7  00F2               	movwf	i1ReadFlash_2Byte@column
 15382  1DB8  3199  21D5  319D   	fcall	i1_ReadFlash_2Byte
 15383  1DBB  0870               	movf	?i1_ReadFlash_2Byte,w
 15384  1DBC  00FA               	movwf	??i1_ReadFlash_4Byte+1
 15385  1DBD  0871               	movf	?i1_ReadFlash_2Byte+1,w
 15386  1DBE  00FB               	movwf	??i1_ReadFlash_4Byte+2
 15387  1DBF  01FC               	clrf	??i1_ReadFlash_4Byte+3
 15388  1DC0  01FD               	clrf	??i1_ReadFlash_4Byte+4
 15389  1DC1  3010               	movlw	16
 15390  1DC2                     u442_25:	
 15391  1DC2  35FA               	lslf	??i1_ReadFlash_4Byte+1,f
 15392  1DC3  0DFB               	rlf	??i1_ReadFlash_4Byte+2,f
 15393  1DC4  0DFC               	rlf	??i1_ReadFlash_4Byte+3,f
 15394  1DC5  0DFD               	rlf	??i1_ReadFlash_4Byte+4,f
 15395  1DC6  0B89               	decfsz	9,f
 15396  1DC7  2DC2               	goto	u442_25
 15397  1DC8  087D               	movf	??i1_ReadFlash_4Byte+4,w
 15398  1DC9  0020               	movlb	0	; select bank0
 15399  1DCA  00A3               	movwf	i1ReadFlash_4Byte@temp+3
 15400  1DCB  087C               	movf	??i1_ReadFlash_4Byte+3,w
 15401  1DCC  00A2               	movwf	i1ReadFlash_4Byte@temp+2
 15402  1DCD  087B               	movf	??i1_ReadFlash_4Byte+2,w
 15403  1DCE  00A1               	movwf	i1ReadFlash_4Byte@temp+1
 15404  1DCF  087A               	movf	??i1_ReadFlash_4Byte+1,w
 15405  1DD0  00A0               	movwf	i1ReadFlash_4Byte@temp
 15406                           
 15407                           ;FLASH.c: 66: temp |= ((unsigned long)ReadFlash_2Byte(row, (column + 1)));
 15408  1DD1  0876               	movf	i1ReadFlash_4Byte@row+1,w
 15409  1DD2  01F1               	clrf	i1ReadFlash_2Byte@row+1
 15410  1DD3  07F1               	addwf	i1ReadFlash_2Byte@row+1,f
 15411  1DD4  0875               	movf	i1ReadFlash_4Byte@row,w
 15412  1DD5  01F0               	clrf	i1ReadFlash_2Byte@row
 15413  1DD6  07F0               	addwf	i1ReadFlash_2Byte@row,f
 15414  1DD7  0877               	movf	i1ReadFlash_4Byte@column,w
 15415  1DD8  3E01               	addlw	1
 15416  1DD9  00F9               	movwf	??i1_ReadFlash_4Byte
 15417  1DDA  0879               	movf	??i1_ReadFlash_4Byte,w
 15418  1DDB  00F2               	movwf	i1ReadFlash_2Byte@column
 15419  1DDC  3199  21D5         	fcall	i1_ReadFlash_2Byte
 15420  1DDE  0870               	movf	?i1_ReadFlash_2Byte,w
 15421  1DDF  00FA               	movwf	??i1_ReadFlash_4Byte+1
 15422  1DE0  0871               	movf	?i1_ReadFlash_2Byte+1,w
 15423  1DE1  00FB               	movwf	??i1_ReadFlash_4Byte+2
 15424  1DE2  01FC               	clrf	??i1_ReadFlash_4Byte+3
 15425  1DE3  01FD               	clrf	??i1_ReadFlash_4Byte+4
 15426  1DE4  087A               	movf	??i1_ReadFlash_4Byte+1,w
 15427  1DE5  0020               	movlb	0	; select bank0
 15428  1DE6  04A0               	iorwf	i1ReadFlash_4Byte@temp,f
 15429  1DE7  087B               	movf	??i1_ReadFlash_4Byte+2,w
 15430  1DE8  04A1               	iorwf	i1ReadFlash_4Byte@temp+1,f
 15431  1DE9  087C               	movf	??i1_ReadFlash_4Byte+3,w
 15432  1DEA  04A2               	iorwf	i1ReadFlash_4Byte@temp+2,f
 15433  1DEB  087D               	movf	??i1_ReadFlash_4Byte+4,w
 15434  1DEC  04A3               	iorwf	i1ReadFlash_4Byte@temp+3,f
 15435                           
 15436                           ;FLASH.c: 67: return temp;
 15437  1DED  0823               	movf	i1ReadFlash_4Byte@temp+3,w
 15438  1DEE  00F8               	movwf	?i1_ReadFlash_4Byte+3
 15439  1DEF  0822               	movf	i1ReadFlash_4Byte@temp+2,w
 15440  1DF0  00F7               	movwf	?i1_ReadFlash_4Byte+2
 15441  1DF1  0821               	movf	i1ReadFlash_4Byte@temp+1,w
 15442  1DF2  00F6               	movwf	?i1_ReadFlash_4Byte+1
 15443  1DF3  0820               	movf	i1ReadFlash_4Byte@temp,w
 15444  1DF4  00F5               	movwf	?i1_ReadFlash_4Byte
 15445  1DF5  0008               	return
 15446  1DF6                     __end_ofi1_ReadFlash_4Byte:	
 15447                           
 15448                           	psect	text57
 15449  1522                     __ptext57:	
 15450 ;; *************** function i1_InitUART *****************
 15451 ;; Defined at:
 15452 ;;		line 75 in file "UART.c"
 15453 ;; Parameters:    Size  Location     Type
 15454 ;;  Baud            4    0[BANK0 ] unsigned long 
 15455 ;;  parity          1    4[BANK0 ] unsigned char 
 15456 ;; Auto vars:     Size  Location     Type
 15457 ;;  InitUART        4   17[BANK0 ] unsigned long 
 15458 ;;  InitUART        2   13[BANK0 ] unsigned int 
 15459 ;;  InitUART        1   16[BANK0 ] unsigned char 
 15460 ;;  InitUART        1   15[BANK0 ] unsigned char 
 15461 ;; Return value:  Size  Location     Type
 15462 ;;		None               void
 15463 ;; Registers used:
 15464 ;;		wreg, status,2, status,0, pclath, cstack
 15465 ;; Tracked objects:
 15466 ;;		On entry : 0/0
 15467 ;;		On exit  : 0/0
 15468 ;;		Unchanged: 0/0
 15469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15470 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15471 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15472 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15473 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15474 ;;Total ram usage:       21 bytes
 15475 ;; Hardware stack levels used:    1
 15476 ;; Hardware stack levels required when called:    1
 15477 ;; This function calls:
 15478 ;;		i1_CloseUSART
 15479 ;;		i1_OpenUSART
 15480 ;;		i1_ReadUSART
 15481 ;;		i1___lldiv
 15482 ;;		i1_baudUSART
 15483 ;; This function is called by:
 15484 ;;		_SetBaud
 15485 ;; This function uses a non-reentrant model
 15486 ;;
 15487                           
 15488                           
 15489                           ;psect for function i1_InitUART
 15490  1522                     i1_InitUART:	
 15491                           
 15492                           ;UART.c: 77: unsigned long temp;
 15493                           ;UART.c: 78: unsigned char config;
 15494                           ;UART.c: 79: unsigned int spbrg;
 15495                           ;UART.c: 80: unsigned char baudconfig;
 15496                           ;UART.c: 90: LATC |= 0b00000100;
 15497                           
 15498                           ;incstack = 0
 15499                           ; Regs used in i1_InitUART: [wreg+status,2+status,0+pclath+cstack]
 15500  1522  0022               	movlb	2	; select bank2
 15501  1523  150E               	bsf	14,2	;volatile
 15502                           
 15503                           ;UART.c: 91: PPSLOCK =0;
 15504  1524  003C               	movlb	28	; select bank28
 15505  1525  018F               	clrf	15	;volatile
 15506                           
 15507                           ;UART.c: 92: RC2PPS = 0b00000000;
 15508  1526  003D               	movlb	29	; select bank29
 15509  1527  01A2               	clrf	34	;volatile
 15510                           
 15511                           ;UART.c: 93: PPSLOCK =1;
 15512  1528  3001               	movlw	1
 15513  1529  003C               	movlb	28	; select bank28
 15514  152A  008F               	movwf	15	;volatile
 15515                           
 15516                           ;UART.c: 95: CloseUSART();
 15517  152B  3198  20A7  3195   	fcall	i1_CloseUSART
 15518                           
 15519                           ;UART.c: 96: config =0;
 15520  152E  0020               	movlb	0	; select bank0
 15521  152F  01B0               	clrf	i1InitUART@config
 15522                           
 15523                           ;UART.c: 97: baudconfig =0;
 15524  1530  01AF               	clrf	i1InitUART@baudconfig
 15525                           
 15526                           ;UART.c: 102: config |= 0b00001000;
 15527  1531  15B0               	bsf	i1InitUART@config,3
 15528                           
 15529                           ;UART.c: 103: config |= 0b00010000;
 15530  1532  1630               	bsf	i1InitUART@config,4
 15531                           
 15532                           ;UART.c: 104: PARITY = parity;
 15533  1533  0824               	movf	i1InitUART@parity,w
 15534  1534  00A5               	movwf	??i1_InitUART
 15535  1535  0825               	movf	??i1_InitUART,w
 15536  1536  0024               	movlb	4	; select bank4
 15537  1537  00E0               	movwf	_PARITY^(0+512)
 15538                           
 15539                           ;UART.c: 105: BAUD = Baud;
 15540  1538  0020               	movlb	0	; select bank0
 15541  1539  0823               	movf	i1InitUART@Baud+3,w
 15542  153A  0024               	movlb	4	; select bank4
 15543  153B  00E4               	movwf	(_BAUD+3)^(0+512)
 15544  153C  0020               	movlb	0	; select bank0
 15545  153D  0822               	movf	i1InitUART@Baud+2,w
 15546  153E  0024               	movlb	4	; select bank4
 15547  153F  00E3               	movwf	(_BAUD+2)^(0+512)
 15548  1540  0020               	movlb	0	; select bank0
 15549  1541  0821               	movf	i1InitUART@Baud+1,w
 15550  1542  0024               	movlb	4	; select bank4
 15551  1543  00E2               	movwf	(_BAUD+1)^(0+512)
 15552  1544  0020               	movlb	0	; select bank0
 15553  1545  0820               	movf	i1InitUART@Baud,w
 15554  1546  0024               	movlb	4	; select bank4
 15555  1547  00E1               	movwf	_BAUD^(0+512)
 15556                           
 15557                           ;UART.c: 106: if(parity)
 15558  1548  0020               	movlb	0	; select bank0
 15559  1549  0824               	movf	i1InitUART@parity,w
 15560  154A  1903               	btfsc	3,2
 15561  154B  2D4E               	goto	i1l4560
 15562                           
 15563                           ;UART.c: 107: {
 15564                           ;UART.c: 108: config |= 0b00000010;
 15565  154C  14B0               	bsf	i1InitUART@config,1
 15566                           
 15567                           ;UART.c: 109: }
 15568  154D  2D52               	goto	i1l4562
 15569  154E                     i1l4560:	
 15570                           
 15571                           ;UART.c: 110: else
 15572                           ;UART.c: 111: {
 15573                           ;UART.c: 112: config &= ~0b00000010;
 15574  154E  30FD               	movlw	253
 15575  154F  00A5               	movwf	??i1_InitUART
 15576  1550  0825               	movf	??i1_InitUART,w
 15577  1551  05B0               	andwf	i1InitUART@config,f
 15578  1552                     i1l4562:	
 15579                           
 15580                           ;UART.c: 113: }
 15581                           ;UART.c: 114: baudconfig |= 0b00001000;
 15582  1552  15AF               	bsf	i1InitUART@baudconfig,3
 15583                           
 15584                           ;UART.c: 117: temp = (32000000L / Baud) - 1;
 15585  1553  0823               	movf	i1InitUART@Baud+3,w
 15586  1554  00F3               	movwf	i1___lldiv@divisor+3
 15587  1555  0822               	movf	i1InitUART@Baud+2,w
 15588  1556  00F2               	movwf	i1___lldiv@divisor+2
 15589  1557  0821               	movf	i1InitUART@Baud+1,w
 15590  1558  00F1               	movwf	i1___lldiv@divisor+1
 15591  1559  0820               	movf	i1InitUART@Baud,w
 15592  155A  00F0               	movwf	i1___lldiv@divisor
 15593  155B  3001               	movlw	1
 15594  155C  00F7               	movwf	i1___lldiv@dividend+3
 15595  155D  30E8               	movlw	232
 15596  155E  00F6               	movwf	i1___lldiv@dividend+2
 15597  155F  3048               	movlw	72
 15598  1560  00F5               	movwf	i1___lldiv@dividend+1
 15599  1561  3000               	movlw	0
 15600  1562  00F4               	movwf	i1___lldiv@dividend
 15601  1563  319E  2647  3195   	fcall	i1___lldiv
 15602  1566  30FF               	movlw	255
 15603  1567  0770               	addwf	?i1___lldiv,w
 15604  1568  0020               	movlb	0	; select bank0
 15605  1569  00B1               	movwf	i1InitUART@temp
 15606  156A  30FF               	movlw	255
 15607  156B  3D71               	addwfc	?i1___lldiv+1,w
 15608  156C  00B2               	movwf	i1InitUART@temp+1
 15609  156D  30FF               	movlw	255
 15610  156E  3D72               	addwfc	?i1___lldiv+2,w
 15611  156F  00B3               	movwf	i1InitUART@temp+2
 15612  1570  30FF               	movlw	255
 15613  1571  3D73               	addwfc	?i1___lldiv+3,w
 15614  1572  00B4               	movwf	i1InitUART@temp+3
 15615                           
 15616                           ;UART.c: 118: temp = (temp >> 2) - 1;
 15617  1573  30FF               	movlw	255
 15618  1574  00A5               	movwf	??i1_InitUART
 15619  1575  30FF               	movlw	255
 15620  1576  00A6               	movwf	??i1_InitUART+1
 15621  1577  30FF               	movlw	255
 15622  1578  00A7               	movwf	??i1_InitUART+2
 15623  1579  30FF               	movlw	255
 15624  157A  00A8               	movwf	??i1_InitUART+3
 15625  157B  0831               	movf	i1InitUART@temp,w
 15626  157C  00A9               	movwf	??i1_InitUART+4
 15627  157D  0832               	movf	i1InitUART@temp+1,w
 15628  157E  00AA               	movwf	??i1_InitUART+5
 15629  157F  0833               	movf	i1InitUART@temp+2,w
 15630  1580  00AB               	movwf	??i1_InitUART+6
 15631  1581  0834               	movf	i1InitUART@temp+3,w
 15632  1582  00AC               	movwf	??i1_InitUART+7
 15633  1583  3002               	movlw	2
 15634  1584                     u516_25:	
 15635  1584  36AC               	lsrf	??i1_InitUART+7,f
 15636  1585  0CAB               	rrf	??i1_InitUART+6,f
 15637  1586  0CAA               	rrf	??i1_InitUART+5,f
 15638  1587  0CA9               	rrf	??i1_InitUART+4,f
 15639  1588  0B89               	decfsz	9,f
 15640  1589  2D84               	goto	u516_25
 15641  158A  0829               	movf	??i1_InitUART+4,w
 15642  158B  07A5               	addwf	??i1_InitUART,f
 15643  158C  082A               	movf	??i1_InitUART+5,w
 15644  158D  3DA6               	addwfc	??i1_InitUART+1,f
 15645  158E  082B               	movf	??i1_InitUART+6,w
 15646  158F  3DA7               	addwfc	??i1_InitUART+2,f
 15647  1590  082C               	movf	??i1_InitUART+7,w
 15648  1591  3DA8               	addwfc	??i1_InitUART+3,f
 15649  1592  0828               	movf	??i1_InitUART+3,w
 15650  1593  00B4               	movwf	i1InitUART@temp+3
 15651  1594  0827               	movf	??i1_InitUART+2,w
 15652  1595  00B3               	movwf	i1InitUART@temp+2
 15653  1596  0826               	movf	??i1_InitUART+1,w
 15654  1597  00B2               	movwf	i1InitUART@temp+1
 15655  1598  0825               	movf	??i1_InitUART,w
 15656  1599  00B1               	movwf	i1InitUART@temp
 15657                           
 15658                           ;UART.c: 119: spbrg = (unsigned int)temp;
 15659  159A  0832               	movf	i1InitUART@temp+1,w
 15660  159B  01AE               	clrf	i1InitUART@spbrg+1
 15661  159C  07AE               	addwf	i1InitUART@spbrg+1,f
 15662  159D  0831               	movf	i1InitUART@temp,w
 15663  159E  01AD               	clrf	i1InitUART@spbrg
 15664  159F  07AD               	addwf	i1InitUART@spbrg,f
 15665                           
 15666                           ;UART.c: 121: RCSTAbits.CREN = 0;
 15667  15A0  0023               	movlb	3	; select bank3
 15668  15A1  121D               	bcf	29,4	;volatile
 15669                           
 15670                           ;UART.c: 122: OpenUSART(config, spbrg);
 15671  15A2  0020               	movlb	0	; select bank0
 15672  15A3  082E               	movf	i1InitUART@spbrg+1,w
 15673  15A4  01F1               	clrf	i1OpenUSART@spbrg+1
 15674  15A5  07F1               	addwf	i1OpenUSART@spbrg+1,f
 15675  15A6  082D               	movf	i1InitUART@spbrg,w
 15676  15A7  01F0               	clrf	i1OpenUSART@spbrg
 15677  15A8  07F0               	addwf	i1OpenUSART@spbrg,f
 15678  15A9  0830               	movf	i1InitUART@config,w
 15679  15AA  319A  2255  3195   	fcall	i1_OpenUSART
 15680                           
 15681                           ;UART.c: 123: baudUSART(baudconfig);
 15682  15AD  0020               	movlb	0	; select bank0
 15683  15AE  082F               	movf	i1InitUART@baudconfig,w
 15684  15AF  3198  2033  3195   	fcall	i1_baudUSART
 15685                           
 15686                           ;UART.c: 124: temp = ReadUSART();
 15687  15B2  3198  2054  3195   	fcall	i1_ReadUSART
 15688  15B5  0020               	movlb	0	; select bank0
 15689  15B6  00A5               	movwf	??i1_InitUART
 15690  15B7  01A6               	clrf	??i1_InitUART+1
 15691  15B8  01A7               	clrf	??i1_InitUART+2
 15692  15B9  01A8               	clrf	??i1_InitUART+3
 15693  15BA  0828               	movf	??i1_InitUART+3,w
 15694  15BB  00B4               	movwf	i1InitUART@temp+3
 15695  15BC  0827               	movf	??i1_InitUART+2,w
 15696  15BD  00B3               	movwf	i1InitUART@temp+2
 15697  15BE  0826               	movf	??i1_InitUART+1,w
 15698  15BF  00B2               	movwf	i1InitUART@temp+1
 15699  15C0  0825               	movf	??i1_InitUART,w
 15700  15C1  00B1               	movwf	i1InitUART@temp
 15701                           
 15702                           ;UART.c: 125: temp = ReadUSART();
 15703  15C2  3198  2054  3195   	fcall	i1_ReadUSART
 15704  15C5  0020               	movlb	0	; select bank0
 15705  15C6  00A5               	movwf	??i1_InitUART
 15706  15C7  01A6               	clrf	??i1_InitUART+1
 15707  15C8  01A7               	clrf	??i1_InitUART+2
 15708  15C9  01A8               	clrf	??i1_InitUART+3
 15709  15CA  0828               	movf	??i1_InitUART+3,w
 15710  15CB  00B4               	movwf	i1InitUART@temp+3
 15711  15CC  0827               	movf	??i1_InitUART+2,w
 15712  15CD  00B3               	movwf	i1InitUART@temp+2
 15713  15CE  0826               	movf	??i1_InitUART+1,w
 15714  15CF  00B2               	movwf	i1InitUART@temp+1
 15715  15D0  0825               	movf	??i1_InitUART,w
 15716  15D1  00B1               	movwf	i1InitUART@temp
 15717                           
 15718                           ;UART.c: 126: temp = ReadUSART();
 15719  15D2  3198  2054  3195   	fcall	i1_ReadUSART
 15720  15D5  0020               	movlb	0	; select bank0
 15721  15D6  00A5               	movwf	??i1_InitUART
 15722  15D7  01A6               	clrf	??i1_InitUART+1
 15723  15D8  01A7               	clrf	??i1_InitUART+2
 15724  15D9  01A8               	clrf	??i1_InitUART+3
 15725  15DA  0828               	movf	??i1_InitUART+3,w
 15726  15DB  00B4               	movwf	i1InitUART@temp+3
 15727  15DC  0827               	movf	??i1_InitUART+2,w
 15728  15DD  00B3               	movwf	i1InitUART@temp+2
 15729  15DE  0826               	movf	??i1_InitUART+1,w
 15730  15DF  00B2               	movwf	i1InitUART@temp+1
 15731  15E0  0825               	movf	??i1_InitUART,w
 15732  15E1  00B1               	movwf	i1InitUART@temp
 15733                           
 15734                           ;UART.c: 127: temp = ReadUSART();
 15735  15E2  3198  2054  3195   	fcall	i1_ReadUSART
 15736  15E5  0020               	movlb	0	; select bank0
 15737  15E6  00A5               	movwf	??i1_InitUART
 15738  15E7  01A6               	clrf	??i1_InitUART+1
 15739  15E8  01A7               	clrf	??i1_InitUART+2
 15740  15E9  01A8               	clrf	??i1_InitUART+3
 15741  15EA  0828               	movf	??i1_InitUART+3,w
 15742  15EB  00B4               	movwf	i1InitUART@temp+3
 15743  15EC  0827               	movf	??i1_InitUART+2,w
 15744  15ED  00B3               	movwf	i1InitUART@temp+2
 15745  15EE  0826               	movf	??i1_InitUART+1,w
 15746  15EF  00B2               	movwf	i1InitUART@temp+1
 15747  15F0  0825               	movf	??i1_InitUART,w
 15748  15F1  00B1               	movwf	i1InitUART@temp
 15749                           
 15750                           ;UART.c: 128: temp = ReadUSART();
 15751  15F2  3198  2054         	fcall	i1_ReadUSART
 15752  15F4  0020               	movlb	0	; select bank0
 15753  15F5  00A5               	movwf	??i1_InitUART
 15754  15F6  01A6               	clrf	??i1_InitUART+1
 15755  15F7  01A7               	clrf	??i1_InitUART+2
 15756  15F8  01A8               	clrf	??i1_InitUART+3
 15757  15F9  0828               	movf	??i1_InitUART+3,w
 15758  15FA  00B4               	movwf	i1InitUART@temp+3
 15759  15FB  0827               	movf	??i1_InitUART+2,w
 15760  15FC  00B3               	movwf	i1InitUART@temp+2
 15761  15FD  0826               	movf	??i1_InitUART+1,w
 15762  15FE  00B2               	movwf	i1InitUART@temp+1
 15763  15FF  0825               	movf	??i1_InitUART,w
 15764  1600  00B1               	movwf	i1InitUART@temp
 15765                           
 15766                           ;UART.c: 130: PPSLOCK =0;
 15767  1601  003C               	movlb	28	; select bank28
 15768  1602  018F               	clrf	15	;volatile
 15769                           
 15770                           ;UART.c: 131: RC2PPS = 0b00010100;
 15771  1603  3014               	movlw	20
 15772  1604  003D               	movlb	29	; select bank29
 15773  1605  00A2               	movwf	34	;volatile
 15774                           
 15775                           ;UART.c: 132: CKPPS = 0b00010010;
 15776  1606  3012               	movlw	18
 15777  1607  003C               	movlb	28	; select bank28
 15778  1608  00A5               	movwf	37	;volatile
 15779                           
 15780                           ;UART.c: 134: RXPPS = 0b00010101;
 15781  1609  3015               	movlw	21
 15782  160A  00A4               	movwf	36	;volatile
 15783                           
 15784                           ;UART.c: 136: PPSLOCK =1;
 15785  160B  3001               	movlw	1
 15786  160C  008F               	movwf	15	;volatile
 15787                           
 15788                           ;UART.c: 138: PIR1bits.RCIF = 0;
 15789  160D  0020               	movlb	0	; select bank0
 15790  160E  1291               	bcf	17,5	;volatile
 15791                           
 15792                           ;UART.c: 139: INTCONbits.PEIE = 1;
 15793  160F  170B               	bsf	11,6	;volatile
 15794  1610  0008               	return
 15795  1611                     __end_ofi1_InitUART:	
 15796                           
 15797                           	psect	text58
 15798  1833                     __ptext58:	
 15799 ;; *************** function i1_baudUSART *****************
 15800 ;; Defined at:
 15801 ;;		line 147 in file "UART.c"
 15802 ;; Parameters:    Size  Location     Type
 15803 ;;  baudconfig      1    wreg     unsigned char 
 15804 ;; Auto vars:     Size  Location     Type
 15805 ;;  baudconfig      1    0[COMMON] unsigned char 
 15806 ;; Return value:  Size  Location     Type
 15807 ;;		None               void
 15808 ;; Registers used:
 15809 ;;		wreg, status,2
 15810 ;; Tracked objects:
 15811 ;;		On entry : 0/0
 15812 ;;		On exit  : 0/0
 15813 ;;		Unchanged: 0/0
 15814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15816 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15818 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15819 ;;Total ram usage:        1 bytes
 15820 ;; Hardware stack levels used:    1
 15821 ;; This function calls:
 15822 ;;		Nothing
 15823 ;; This function is called by:
 15824 ;;		i1_InitUART
 15825 ;; This function uses a non-reentrant model
 15826 ;;
 15827                           
 15828                           
 15829                           ;psect for function i1_baudUSART
 15830  1833                     i1_baudUSART:	
 15831                           
 15832                           ;incstack = 0
 15833                           ; Regs used in i1_baudUSART: [wreg+status,2]
 15834                           ;i1baudUSART@baudconfig stored from wreg
 15835  1833  00F0               	movwf	i1baudUSART@baudconfig
 15836                           
 15837                           ;UART.c: 149: BAUD1CON =0;
 15838  1834  0023               	movlb	3	; select bank3
 15839  1835  019F               	clrf	31	;volatile
 15840                           
 15841                           ;UART.c: 150: BAUD1CON = baudconfig;
 15842  1836  0870               	movf	i1baudUSART@baudconfig,w
 15843  1837  009F               	movwf	31	;volatile
 15844  1838  0008               	return
 15845  1839                     __end_ofi1_baudUSART:	
 15846                           
 15847                           	psect	text59
 15848  1854                     __ptext59:	
 15849 ;; *************** function i1_ReadUSART *****************
 15850 ;; Defined at:
 15851 ;;		line 302 in file "UART.c"
 15852 ;; Parameters:    Size  Location     Type
 15853 ;;		None
 15854 ;; Auto vars:     Size  Location     Type
 15855 ;;  ReadUSART       1    1[COMMON] unsigned char 
 15856 ;; Return value:  Size  Location     Type
 15857 ;;                  1    wreg      unsigned char 
 15858 ;; Registers used:
 15859 ;;		wreg
 15860 ;; Tracked objects:
 15861 ;;		On entry : 0/0
 15862 ;;		On exit  : 0/0
 15863 ;;		Unchanged: 0/0
 15864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15866 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15867 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15868 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15869 ;;Total ram usage:        2 bytes
 15870 ;; Hardware stack levels used:    1
 15871 ;; This function calls:
 15872 ;;		Nothing
 15873 ;; This function is called by:
 15874 ;;		_isr
 15875 ;;		i1_InitUART
 15876 ;; This function uses a non-reentrant model
 15877 ;;
 15878                           
 15879                           
 15880                           ;psect for function i1_ReadUSART
 15881  1854                     i1_ReadUSART:	
 15882                           
 15883                           ;UART.c: 304: char data;
 15884                           ;UART.c: 306: if(RCSTAbits.OERR)
 15885                           
 15886                           ;incstack = 0
 15887                           ; Regs used in i1_ReadUSART: [wreg]
 15888  1854  0023               	movlb	3	; select bank3
 15889  1855  189D               	btfsc	29,1	;volatile
 15890                           
 15891                           ;UART.c: 307: {
 15892                           ;UART.c: 308: RCSTAbits.CREN = 0;
 15893  1856  121D               	bcf	29,4	;volatile
 15894                           
 15895                           ;UART.c: 309: }
 15896                           ;UART.c: 311: data = RCREG;
 15897  1857  0819               	movf	25,w	;volatile
 15898  1858  00F0               	movwf	??i1_ReadUSART
 15899  1859  0870               	movf	??i1_ReadUSART,w
 15900  185A  00F1               	movwf	i1ReadUSART@data
 15901                           
 15902                           ;UART.c: 313: return (data);
 15903  185B  0871               	movf	i1ReadUSART@data,w
 15904  185C  0008               	return
 15905  185D                     __end_ofi1_ReadUSART:	
 15906                           
 15907                           	psect	text60
 15908  1A55                     __ptext60:	
 15909 ;; *************** function i1_OpenUSART *****************
 15910 ;; Defined at:
 15911 ;;		line 158 in file "UART.c"
 15912 ;; Parameters:    Size  Location     Type
 15913 ;;  config          1    wreg     unsigned char 
 15914 ;;  spbrg           2    0[COMMON] unsigned int 
 15915 ;; Auto vars:     Size  Location     Type
 15916 ;;  config          1    2[COMMON] unsigned char 
 15917 ;; Return value:  Size  Location     Type
 15918 ;;		None               void
 15919 ;; Registers used:
 15920 ;;		wreg, status,2
 15921 ;; Tracked objects:
 15922 ;;		On entry : 0/0
 15923 ;;		On exit  : 0/0
 15924 ;;		Unchanged: 0/0
 15925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15926 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15927 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15929 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15930 ;;Total ram usage:        3 bytes
 15931 ;; Hardware stack levels used:    1
 15932 ;; This function calls:
 15933 ;;		Nothing
 15934 ;; This function is called by:
 15935 ;;		i1_InitUART
 15936 ;; This function uses a non-reentrant model
 15937 ;;
 15938                           
 15939                           
 15940                           ;psect for function i1_OpenUSART
 15941  1A55                     i1_OpenUSART:	
 15942                           
 15943                           ;incstack = 0
 15944                           ; Regs used in i1_OpenUSART: [wreg+status,2]
 15945                           ;i1OpenUSART@config stored from wreg
 15946  1A55  00F2               	movwf	i1OpenUSART@config
 15947                           
 15948                           ;UART.c: 160: TX1STA = 0;
 15949  1A56  0023               	movlb	3	; select bank3
 15950  1A57  019E               	clrf	30	;volatile
 15951                           
 15952                           ;UART.c: 161: RC1STA = 0;
 15953  1A58  019D               	clrf	29	;volatile
 15954                           
 15955                           ;UART.c: 163: if(config&0x01)
 15956  1A59  1872               	btfsc	i1OpenUSART@config,0
 15957                           
 15958                           ;UART.c: 164: {
 15959                           ;UART.c: 165: TX1STAbits.SYNC = 1;
 15960  1A5A  161E               	bsf	30,4	;volatile
 15961                           
 15962                           ;UART.c: 166: }
 15963                           ;UART.c: 168: if(config&0x02)
 15964  1A5B  1CF2               	btfss	i1OpenUSART@config,1
 15965  1A5C  2A5F               	goto	i1l4076
 15966                           
 15967                           ;UART.c: 169: {
 15968                           ;UART.c: 170: TX1STAbits.TX9 = 1;
 15969  1A5D  171E               	bsf	30,6	;volatile
 15970                           
 15971                           ;UART.c: 171: RC1STAbits.RX9 = 1;
 15972  1A5E  171D               	bsf	29,6	;volatile
 15973  1A5F                     i1l4076:	
 15974                           
 15975                           ;UART.c: 172: }
 15976                           ;UART.c: 174: if(config&0x04)
 15977  1A5F  1972               	btfsc	i1OpenUSART@config,2
 15978                           
 15979                           ;UART.c: 175: {
 15980                           ;UART.c: 176: TX1STAbits.CSRC = 1;
 15981  1A60  179E               	bsf	30,7	;volatile
 15982                           
 15983                           ;UART.c: 177: }
 15984                           ;UART.c: 179: if(config&0x08)
 15985  1A61  1DF2               	btfss	i1OpenUSART@config,3
 15986  1A62  2A65               	goto	i1l415
 15987                           
 15988                           ;UART.c: 180: {
 15989                           ;UART.c: 181: RC1STAbits.CREN = 1;
 15990  1A63  161D               	bsf	29,4	;volatile
 15991                           
 15992                           ;UART.c: 182: }
 15993  1A64  2A66               	goto	i1l4084
 15994  1A65                     i1l415:	
 15995                           
 15996                           ;UART.c: 183: else
 15997                           ;UART.c: 184: {
 15998                           ;UART.c: 185: RC1STAbits.SREN = 1;
 15999  1A65  169D               	bsf	29,5	;volatile
 16000  1A66                     i1l4084:	
 16001                           
 16002                           ;UART.c: 186: }
 16003                           ;UART.c: 188: if(config&0x10)
 16004  1A66  1A72               	btfsc	i1OpenUSART@config,4
 16005                           
 16006                           ;UART.c: 189: {
 16007                           ;UART.c: 190: TX1STAbits.BRGH = 1;
 16008  1A67  151E               	bsf	30,2	;volatile
 16009                           
 16010                           ;UART.c: 196: }
 16011                           ;UART.c: 198: if(config&0x40)
 16012                           
 16013                           ;UART.c: 194: {
 16014  1A68  1F72               	btfss	i1OpenUSART@config,6
 16015  1A69  2A6F               	goto	i1l419
 16016                           
 16017                           ;UART.c: 199: {
 16018                           ;UART.c: 200: PIR1bits.RCIF = 0;
 16019  1A6A  0020               	movlb	0	; select bank0
 16020  1A6B  1291               	bcf	17,5	;volatile
 16021                           
 16022                           ;UART.c: 201: PIE1bits.RCIE = 1;
 16023  1A6C  0021               	movlb	1	; select bank1
 16024  1A6D  1691               	bsf	17,5	;volatile
 16025                           
 16026                           ;UART.c: 203: }
 16027  1A6E  2A71               	goto	i1l4094
 16028  1A6F                     i1l419:	
 16029                           
 16030                           ;UART.c: 204: else
 16031                           ;UART.c: 205: {
 16032                           ;UART.c: 206: PIE1bits.RCIE = 0;
 16033  1A6F  0021               	movlb	1	; select bank1
 16034  1A70  1291               	bcf	17,5	;volatile
 16035  1A71                     i1l4094:	
 16036                           
 16037                           ;UART.c: 207: }
 16038                           ;UART.c: 209: if(config&0x80)
 16039  1A71  1FF2               	btfss	i1OpenUSART@config,7
 16040  1A72  2A78               	goto	i1l421
 16041                           
 16042                           ;UART.c: 210: {
 16043                           ;UART.c: 211: PIR1bits.TXIF = 0;
 16044  1A73  0020               	movlb	0	; select bank0
 16045  1A74  1211               	bcf	17,4	;volatile
 16046                           
 16047                           ;UART.c: 212: PIE1bits.TXIE = 1;
 16048  1A75  0021               	movlb	1	; select bank1
 16049  1A76  1611               	bsf	17,4	;volatile
 16050                           
 16051                           ;UART.c: 213: }
 16052  1A77  2A79               	goto	i1l4098
 16053  1A78                     i1l421:	
 16054                           
 16055                           ;UART.c: 214: else
 16056                           ;UART.c: 215: {
 16057                           ;UART.c: 216: PIE1bits.TXIE = 0;
 16058  1A78  1211               	bcf	17,4	;volatile
 16059  1A79                     i1l4098:	
 16060                           
 16061                           ;UART.c: 217: }
 16062                           ;UART.c: 219: SPBRG = spbrg;
 16063  1A79  0870               	movf	i1OpenUSART@spbrg,w
 16064  1A7A  0023               	movlb	3	; select bank3
 16065  1A7B  009B               	movwf	27	;volatile
 16066                           
 16067                           ;UART.c: 220: SPBRGH = spbrg >> 8;
 16068  1A7C  0871               	movf	i1OpenUSART@spbrg+1,w
 16069  1A7D  009C               	movwf	28	;volatile
 16070                           
 16071                           ;UART.c: 222: TX1STAbits.TXEN = 1;
 16072  1A7E  169E               	bsf	30,5	;volatile
 16073                           
 16074                           ;UART.c: 223: RC1STAbits.SPEN = 1;
 16075  1A7F  179D               	bsf	29,7	;volatile
 16076  1A80  0008               	return
 16077  1A81                     __end_ofi1_OpenUSART:	
 16078                           
 16079                           	psect	text61
 16080  18A7                     __ptext61:	
 16081 ;; *************** function i1_CloseUSART *****************
 16082 ;; Defined at:
 16083 ;;		line 62 in file "UART.c"
 16084 ;; Parameters:    Size  Location     Type
 16085 ;;		None
 16086 ;; Auto vars:     Size  Location     Type
 16087 ;;		None
 16088 ;; Return value:  Size  Location     Type
 16089 ;;		None               void
 16090 ;; Registers used:
 16091 ;;		wreg, status,2, status,0
 16092 ;; Tracked objects:
 16093 ;;		On entry : 0/0
 16094 ;;		On exit  : 0/0
 16095 ;;		Unchanged: 0/0
 16096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16099 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16100 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16101 ;;Total ram usage:        1 bytes
 16102 ;; Hardware stack levels used:    1
 16103 ;; This function calls:
 16104 ;;		Nothing
 16105 ;; This function is called by:
 16106 ;;		i1_InitUART
 16107 ;; This function uses a non-reentrant model
 16108 ;;
 16109                           
 16110                           
 16111                           ;psect for function i1_CloseUSART
 16112  18A7                     i1_CloseUSART:	
 16113                           
 16114                           ;UART.c: 64: RCSTA&=0b01001111;
 16115                           
 16116                           ;incstack = 0
 16117                           ; Regs used in i1_CloseUSART: [wreg+status,2+status,0]
 16118  18A7  304F               	movlw	79
 16119  18A8  00F0               	movwf	??i1_CloseUSART
 16120  18A9  0870               	movf	??i1_CloseUSART,w
 16121  18AA  0023               	movlb	3	; select bank3
 16122  18AB  059D               	andwf	29,f	;volatile
 16123                           
 16124                           ;UART.c: 65: TX1STAbits.TXEN=0;
 16125  18AC  129E               	bcf	30,5	;volatile
 16126                           
 16127                           ;UART.c: 66: PIE1&=0b11001111;
 16128  18AD  30CF               	movlw	207
 16129  18AE  00F0               	movwf	??i1_CloseUSART
 16130  18AF  0870               	movf	??i1_CloseUSART,w
 16131  18B0  0021               	movlb	1	; select bank1
 16132  18B1  0591               	andwf	17,f	;volatile
 16133  18B2  0008               	return
 16134  18B3                     __end_ofi1_CloseUSART:	
 16135                           
 16136                           	psect	text62
 16137  1707                     __ptext62:	
 16138 ;; *************** function _sprintf *****************
 16139 ;; Defined at:
 16140 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
 16141 ;; Parameters:    Size  Location     Type
 16142 ;;  sp              1    wreg     PTR unsigned char 
 16143 ;;		 -> Process_PS2_ScanCode@buf(60), SetBaud@buf(50), 
 16144 ;;  f               2   10[BANK0 ] PTR const unsigned char 
 16145 ;;		 -> STR_18(24), STR_11(12), 
 16146 ;; Auto vars:     Size  Location     Type
 16147 ;;  sp              1   30[BANK0 ] PTR unsigned char 
 16148 ;;		 -> Process_PS2_ScanCode@buf(60), SetBaud@buf(50), 
 16149 ;;  _val            4   25[BANK0 ] struct .
 16150 ;;  prec            2   23[BANK0 ] int 
 16151 ;;  c               1   31[BANK0 ] char 
 16152 ;;  ap              1   29[BANK0 ] PTR void [1]
 16153 ;;		 -> ?_sprintf(2), 
 16154 ;;  flag            1   22[BANK0 ] unsigned char 
 16155 ;; Return value:  Size  Location     Type
 16156 ;;                  2   10[BANK0 ] int 
 16157 ;; Registers used:
 16158 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16159 ;; Tracked objects:
 16160 ;;		On entry : 0/0
 16161 ;;		On exit  : 0/0
 16162 ;;		Unchanged: 0/0
 16163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16164 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16165 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16166 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16167 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16168 ;;Total ram usage:       22 bytes
 16169 ;; Hardware stack levels used:    1
 16170 ;; Hardware stack levels required when called:    1
 16171 ;; This function calls:
 16172 ;;		___llmod
 16173 ;;		i1___lldiv
 16174 ;; This function is called by:
 16175 ;;		_SetBaud
 16176 ;;		_Process_PS2_ScanCode
 16177 ;; This function uses a non-reentrant model
 16178 ;;
 16179                           
 16180                           
 16181                           ;psect for function _sprintf
 16182  1707                     _sprintf:	
 16183                           
 16184                           ;incstack = 0
 16185                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16186                           ;sprintf@sp stored from wreg
 16187  1707  0020               	movlb	0	; select bank0
 16188  1708  00BE               	movwf	sprintf@sp
 16189                           
 16190                           ;doprnt.c: 494: va_list ap;
 16191                           ;doprnt.c: 499: signed char c;
 16192                           ;doprnt.c: 504: int prec;
 16193                           ;doprnt.c: 508: unsigned char flag;
 16194                           ;doprnt.c: 527: union {
 16195                           ;doprnt.c: 528: unsigned long _val;
 16196                           ;doprnt.c: 529: struct {
 16197                           ;doprnt.c: 530: const char * _cp;
 16198                           ;doprnt.c: 531: unsigned _len;
 16199                           ;doprnt.c: 532: } _str;
 16200                           ;doprnt.c: 533: } _val;
 16201                           ;doprnt.c: 542: *ap = __va_start();
 16202  1709  302C               	movlw	(?_sprintf+2)& (0+255)
 16203  170A  00B0               	movwf	??_sprintf
 16204  170B  0830               	movf	??_sprintf,w
 16205  170C  00BD               	movwf	sprintf@ap
 16206  170D                     i1l4318:	
 16207                           ;doprnt.c: 545: while(c = *f++) {
 16208                           
 16209  170D  082B               	movf	sprintf@f+1,w
 16210  170E  00B1               	movwf	??_sprintf+1
 16211  170F  082A               	movf	sprintf@f,w
 16212  1710  00B0               	movwf	??_sprintf
 16213  1711  0AAA               	incf	sprintf@f,f
 16214  1712  1903               	skipnz
 16215  1713  0AAB               	incf	sprintf@f+1,f
 16216  1714  0830               	movf	??_sprintf,w
 16217  1715  0084               	movwf	4
 16218  1716  0831               	movf	??_sprintf+1,w
 16219  1717  0085               	movwf	5
 16220  1718  0800               	movf	0,w	;code access
 16221  1719  00B2               	movwf	??_sprintf+2
 16222  171A  0832               	movf	??_sprintf+2,w
 16223  171B  00BF               	movwf	sprintf@c
 16224  171C  08BF               	movf	sprintf@c,f
 16225  171D  1903               	btfsc	3,2
 16226  171E  2FFA               	goto	i1l4320
 16227                           
 16228                           ;doprnt.c: 547: if(c != '%')
 16229  171F  083F               	movf	sprintf@c,w
 16230  1720  3A25               	xorlw	37
 16231  1721  1903               	skipnz
 16232  1722  2F30               	goto	i1l4278
 16233                           
 16234                           ;doprnt.c: 549: {
 16235                           ;doprnt.c: 550: ((*sp++ = (c)));
 16236  1723  083F               	movf	sprintf@c,w
 16237  1724  00B0               	movwf	??_sprintf
 16238  1725  083E               	movf	sprintf@sp,w
 16239  1726  0086               	movwf	6
 16240  1727  3001               	movlw	1	; select bank2/3
 16241  1728  0087               	movwf	7
 16242  1729  0830               	movf	??_sprintf,w
 16243  172A  0081               	movwf	1
 16244  172B  3001               	movlw	1
 16245  172C  00B0               	movwf	??_sprintf
 16246  172D  0830               	movf	??_sprintf,w
 16247  172E  07BE               	addwf	sprintf@sp,f
 16248                           
 16249                           ;doprnt.c: 551: continue;
 16250  172F  2F0D               	goto	i1l4318
 16251  1730                     i1l4278:	
 16252                           
 16253                           ;doprnt.c: 552: }
 16254                           ;doprnt.c: 557: flag = 0;
 16255  1730  01B6               	clrf	sprintf@flag
 16256                           
 16257                           ;doprnt.c: 644: switch(c = *f++) {
 16258                           
 16259                           ;doprnt.c: 642: loop:
 16260  1731  2F39               	goto	i1l4284
 16261  1732                     i1l1074:	
 16262                           ;doprnt.c: 650: case 'l':
 16263                           
 16264                           ;doprnt.c: 647: goto alldone;
 16265                           
 16266                           ;doprnt.c: 646: case 0:
 16267                           
 16268                           
 16269                           ;doprnt.c: 652: flag |= 0x10;
 16270  1732  1636               	bsf	sprintf@flag,4
 16271                           
 16272                           ;doprnt.c: 653: goto loop;
 16273  1733  2F39               	goto	i1l4284
 16274  1734                     i1l4280:	
 16275                           ;doprnt.c: 826: case 'u':
 16276                           
 16277                           ;doprnt.c: 822: continue;
 16278                           
 16279                           ;doprnt.c: 811: default:
 16280                           
 16281                           
 16282                           ;doprnt.c: 827: flag |= 0xC0;
 16283  1734  30C0               	movlw	192
 16284  1735  00B0               	movwf	??_sprintf
 16285  1736  0830               	movf	??_sprintf,w
 16286  1737  04B6               	iorwf	sprintf@flag,f
 16287                           
 16288                           ;doprnt.c: 831: }
 16289                           
 16290                           ;doprnt.c: 828: break;
 16291  1738  2F50               	goto	i1l1077
 16292  1739                     i1l4284:	
 16293  1739  082B               	movf	sprintf@f+1,w
 16294  173A  00B1               	movwf	??_sprintf+1
 16295  173B  082A               	movf	sprintf@f,w
 16296  173C  00B0               	movwf	??_sprintf
 16297  173D  0AAA               	incf	sprintf@f,f
 16298  173E  1903               	skipnz
 16299  173F  0AAB               	incf	sprintf@f+1,f
 16300  1740  0830               	movf	??_sprintf,w
 16301  1741  0084               	movwf	4
 16302  1742  0831               	movf	??_sprintf+1,w
 16303  1743  0085               	movwf	5
 16304  1744  0800               	movf	0,w	;code access
 16305  1745  00BF               	movwf	sprintf@c
 16306                           
 16307                           ; Switch size 1, requested type "space"
 16308                           ; Number of cases is 3, Range of values is 0 to 117
 16309                           ; switch strategies available:
 16310                           ; Name         Instructions Cycles
 16311                           ; simple_byte           10     6 (average)
 16312                           ; direct_byte          242     6 (fixed)
 16313                           ; jumptable            260     6 (fixed)
 16314                           ;	Chosen strategy is simple_byte
 16315  1746  3A00               	xorlw	0	; case 0
 16316  1747  1903               	skipnz
 16317  1748  2FFA               	goto	i1l4320
 16318  1749  3A6C               	xorlw	108	; case 108
 16319  174A  1903               	skipnz
 16320  174B  2F32               	goto	i1l1074
 16321  174C  3A19               	xorlw	25	; case 117
 16322  174D  1903               	skipnz
 16323  174E  2F34               	goto	i1l4280
 16324  174F  2F0D               	goto	i1l4318
 16325  1750                     i1l1077:	
 16326                           
 16327                           ;doprnt.c: 1282: {
 16328                           ;doprnt.c: 1290: if(flag & 0x10)
 16329  1750  1E36               	btfss	sprintf@flag,4
 16330  1751  2F5F               	goto	i1l4290
 16331                           
 16332                           ;doprnt.c: 1291: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 16333  1752  083D               	movf	sprintf@ap,w
 16334  1753  0086               	movwf	6
 16335  1754  0187               	clrf	7
 16336  1755  3F40               	moviw [0]fsr1
 16337  1756  00B9               	movwf	sprintf@_val
 16338  1757  3F41               	moviw [1]fsr1
 16339  1758  00BA               	movwf	sprintf@_val+1
 16340  1759  3F42               	moviw [2]fsr1
 16341  175A  00BB               	movwf	sprintf@_val+2
 16342  175B  3F43               	moviw [3]fsr1
 16343  175C  00BC               	movwf	sprintf@_val+3
 16344  175D  3004               	movlw	4
 16345  175E  2F6D               	goto	L23
 16346  175F                     i1l4290:	
 16347                           
 16348                           ;doprnt.c: 1292: else
 16349                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 16350  175F  083D               	movf	sprintf@ap,w
 16351  1760  0086               	movwf	6
 16352  1761  0187               	clrf	7
 16353  1762  3F40               	moviw [0]fsr1
 16354  1763  00B0               	movwf	??_sprintf
 16355  1764  3F41               	moviw [1]fsr1
 16356  1765  00B1               	movwf	??_sprintf+1
 16357  1766  0830               	movf	??_sprintf,w
 16358  1767  00B9               	movwf	sprintf@_val
 16359  1768  0831               	movf	??_sprintf+1,w
 16360  1769  00BA               	movwf	sprintf@_val+1
 16361  176A  01BB               	clrf	sprintf@_val+2
 16362  176B  01BC               	clrf	sprintf@_val+3
 16363  176C  3002               	movlw	2
 16364  176D                     L23:	
 16365  176D  00B0               	movwf	??_sprintf
 16366  176E  0830               	movf	??_sprintf,w
 16367  176F  07BD               	addwf	sprintf@ap,f
 16368                           
 16369                           ;doprnt.c: 1296: }
 16370                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 16371  1770  01BF               	clrf	sprintf@c
 16372  1771  0ABF               	incf	sprintf@c,f
 16373  1772  083F               	movf	sprintf@c,w
 16374  1773  3A0A               	xorlw	10
 16375  1774  1903               	btfsc	3,2
 16376  1775  2FA3               	goto	i1l4308
 16377  1776                     i1l4300:	
 16378                           
 16379                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
 16380  1776  083F               	movf	sprintf@c,w
 16381  1777  00B0               	movwf	??_sprintf
 16382  1778  01B1               	clrf	??_sprintf+1
 16383  1779  35B0               	lslf	??_sprintf,f
 16384  177A  0DB1               	rlf	??_sprintf+1,f
 16385  177B  35B0               	lslf	??_sprintf,f
 16386  177C  0DB1               	rlf	??_sprintf+1,f
 16387  177D  30D3               	movlw	low (_dpowers| (0+32768))
 16388  177E  0730               	addwf	??_sprintf,w
 16389  177F  0084               	movwf	4
 16390  1780  3088               	movlw	high (_dpowers| (0+32768))
 16391  1781  3D31               	addwfc	??_sprintf+1,w
 16392  1782  0085               	movwf	5
 16393  1783  3F00               	moviw [0]fsr0
 16394  1784  00B2               	movwf	??_sprintf+2
 16395  1785  3F01               	moviw [1]fsr0
 16396  1786  00B3               	movwf	??_sprintf+3
 16397  1787  3F02               	moviw [2]fsr0
 16398  1788  00B4               	movwf	??_sprintf+4
 16399  1789  3F03               	moviw [3]fsr0
 16400  178A  00B5               	movwf	??_sprintf+5
 16401  178B  0835               	movf	??_sprintf+5,w
 16402  178C  023C               	subwf	sprintf@_val+3,w
 16403  178D  1D03               	skipz
 16404  178E  2F99               	goto	u470_25
 16405  178F  0834               	movf	??_sprintf+4,w
 16406  1790  023B               	subwf	sprintf@_val+2,w
 16407  1791  1D03               	skipz
 16408  1792  2F99               	goto	u470_25
 16409  1793  0833               	movf	??_sprintf+3,w
 16410  1794  023A               	subwf	sprintf@_val+1,w
 16411  1795  1D03               	skipz
 16412  1796  2F99               	goto	u470_25
 16413  1797  0832               	movf	??_sprintf+2,w
 16414  1798  0239               	subwf	sprintf@_val,w
 16415  1799                     u470_25:	
 16416  1799  1C03               	btfss	3,0
 16417  179A  2FA3               	goto	i1l4308
 16418                           
 16419                           ;doprnt.c: 1316: break;
 16420  179B  3001               	movlw	1
 16421  179C  00B0               	movwf	??_sprintf
 16422  179D  0830               	movf	??_sprintf,w
 16423  179E  07BF               	addwf	sprintf@c,f
 16424  179F  083F               	movf	sprintf@c,w
 16425  17A0  3A0A               	xorlw	10
 16426  17A1  1D03               	skipz
 16427  17A2  2F76               	goto	i1l4300
 16428  17A3                     i1l4308:	
 16429                           
 16430                           ;doprnt.c: 1431: {
 16431                           ;doprnt.c: 1478: }
 16432                           ;doprnt.c: 1481: prec = c;
 16433  17A3  083F               	movf	sprintf@c,w
 16434  17A4  00B7               	movwf	sprintf@prec
 16435  17A5  01B8               	clrf	sprintf@prec+1
 16436  17A6  1BB7               	btfsc	sprintf@prec,7
 16437  17A7  03B8               	decf	sprintf@prec+1,f
 16438  17A8                     i1l4316:	
 16439                           ;doprnt.c: 1483: while(prec--) {
 16440                           
 16441  17A8  30FF               	movlw	255
 16442  17A9  07B7               	addwf	sprintf@prec,f
 16443  17AA  30FF               	movlw	255
 16444  17AB  3DB8               	addwfc	sprintf@prec+1,f
 16445  17AC  30FF               	movlw	255
 16446  17AD  0638               	xorwf	sprintf@prec+1,w
 16447  17AE  1D03               	skipz
 16448  17AF  2FB2               	goto	u472_25
 16449  17B0  30FF               	movlw	255
 16450  17B1  0637               	xorwf	sprintf@prec,w
 16451  17B2                     u472_25:	
 16452  17B2  1903               	btfsc	3,2
 16453  17B3  2F0D               	goto	i1l4318
 16454                           
 16455                           ;doprnt.c: 1487: {
 16456                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
 16457  17B4  3000               	movlw	0
 16458  17B5  00A3               	movwf	___llmod@divisor+3
 16459  17B6  3000               	movlw	0
 16460  17B7  00A2               	movwf	___llmod@divisor+2
 16461  17B8  3000               	movlw	0
 16462  17B9  00A1               	movwf	___llmod@divisor+1
 16463  17BA  300A               	movlw	10
 16464  17BB  00A0               	movwf	___llmod@divisor
 16465  17BC  0838               	movf	sprintf@prec+1,w
 16466  17BD  0085               	movwf	5
 16467  17BE  0837               	movf	sprintf@prec,w
 16468  17BF  0084               	movwf	4
 16469  17C0  3584               	lslf	4,f
 16470  17C1  0D85               	rlf	5,f
 16471  17C2  3584               	lslf	4,f
 16472  17C3  0D85               	rlf	5,f
 16473  17C4  30D3               	movlw	low (_dpowers| (0+32768))
 16474  17C5  0784               	addwf	4,f
 16475  17C6  3088               	movlw	high (_dpowers| (0+32768))
 16476  17C7  3D85               	addwfc	5,f
 16477  17C8  3F00               	moviw [0]fsr0
 16478  17C9  00F0               	movwf	i1___lldiv@divisor
 16479  17CA  3F01               	moviw [1]fsr0
 16480  17CB  00F1               	movwf	i1___lldiv@divisor+1
 16481  17CC  3F02               	moviw [2]fsr0
 16482  17CD  00F2               	movwf	i1___lldiv@divisor+2
 16483  17CE  3F03               	moviw [3]fsr0
 16484  17CF  00F3               	movwf	i1___lldiv@divisor+3
 16485  17D0  083C               	movf	sprintf@_val+3,w
 16486  17D1  00F7               	movwf	i1___lldiv@dividend+3
 16487  17D2  083B               	movf	sprintf@_val+2,w
 16488  17D3  00F6               	movwf	i1___lldiv@dividend+2
 16489  17D4  083A               	movf	sprintf@_val+1,w
 16490  17D5  00F5               	movwf	i1___lldiv@dividend+1
 16491  17D6  0839               	movf	sprintf@_val,w
 16492  17D7  00F4               	movwf	i1___lldiv@dividend
 16493  17D8  319E  2647  3197   	fcall	i1___lldiv
 16494  17DB  0873               	movf	?i1___lldiv+3,w
 16495  17DC  0020               	movlb	0	; select bank0
 16496  17DD  00A7               	movwf	___llmod@dividend+3
 16497  17DE  0872               	movf	?i1___lldiv+2,w
 16498  17DF  00A6               	movwf	___llmod@dividend+2
 16499  17E0  0871               	movf	?i1___lldiv+1,w
 16500  17E1  00A5               	movwf	___llmod@dividend+1
 16501  17E2  0870               	movf	?i1___lldiv,w
 16502  17E3  00A4               	movwf	___llmod@dividend
 16503  17E4  319C  24CE  3197   	fcall	___llmod
 16504  17E7  0020               	movlb	0	; select bank0
 16505  17E8  0820               	movf	?___llmod,w
 16506  17E9  3E30               	addlw	48
 16507  17EA  00B0               	movwf	??_sprintf
 16508  17EB  0830               	movf	??_sprintf,w
 16509  17EC  00BF               	movwf	sprintf@c
 16510                           
 16511                           ;doprnt.c: 1532: }
 16512                           ;doprnt.c: 1533: ((*sp++ = (c)));
 16513  17ED  083F               	movf	sprintf@c,w
 16514  17EE  00B0               	movwf	??_sprintf
 16515  17EF  083E               	movf	sprintf@sp,w
 16516  17F0  0086               	movwf	6
 16517  17F1  3001               	movlw	1	; select bank2/3
 16518  17F2  0087               	movwf	7
 16519  17F3  0830               	movf	??_sprintf,w
 16520  17F4  0081               	movwf	1
 16521  17F5  3001               	movlw	1
 16522  17F6  00B0               	movwf	??_sprintf
 16523  17F7  0830               	movf	??_sprintf,w
 16524  17F8  07BE               	addwf	sprintf@sp,f
 16525  17F9  2FA8               	goto	i1l4316
 16526  17FA                     i1l4320:	
 16527                           ;doprnt.c: 1534: }
 16528                           ;doprnt.c: 1542: }
 16529                           ;doprnt.c: 1544: alldone:
 16530                           
 16531                           
 16532                           ;doprnt.c: 1547: *sp = 0;
 16533  17FA  083E               	movf	sprintf@sp,w
 16534  17FB  0086               	movwf	6
 16535  17FC  3001               	movlw	1	; select bank2/3
 16536  17FD  0087               	movwf	7
 16537  17FE  0181               	clrf	1
 16538  17FF  0008               	return
 16539  1800                     __end_of_sprintf:	
 16540                           ;doprnt.c: 1549: return 0;
 16541                           ;	Return value of _sprintf is never used
 16542                           
 16543                           
 16544                           	psect	text63
 16545  1E47                     __ptext63:	
 16546 ;; *************** function i1___lldiv *****************
 16547 ;; Defined at:
 16548 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
 16549 ;; Parameters:    Size  Location     Type
 16550 ;;  divisor         4    0[COMMON] unsigned long 
 16551 ;;  dividend        4    4[COMMON] unsigned long 
 16552 ;; Auto vars:     Size  Location     Type
 16553 ;;  __lldiv         4    9[COMMON] unsigned long 
 16554 ;;  __lldiv         1   13[COMMON] unsigned char 
 16555 ;; Return value:  Size  Location     Type
 16556 ;;                  4    0[COMMON] unsigned long 
 16557 ;; Registers used:
 16558 ;;		wreg, status,2, status,0
 16559 ;; Tracked objects:
 16560 ;;		On entry : 0/0
 16561 ;;		On exit  : 0/0
 16562 ;;		Unchanged: 0/0
 16563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16564 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16565 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16566 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16567 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16568 ;;Total ram usage:       14 bytes
 16569 ;; Hardware stack levels used:    1
 16570 ;; This function calls:
 16571 ;;		Nothing
 16572 ;; This function is called by:
 16573 ;;		_sprintf
 16574 ;;		i1_InitUART
 16575 ;; This function uses a non-reentrant model
 16576 ;;
 16577                           
 16578                           
 16579                           ;psect for function i1___lldiv
 16580  1E47                     i1___lldiv:	
 16581                           
 16582                           ;incstack = 0
 16583                           ; Regs used in i1___lldiv: [wreg+status,2+status,0]
 16584  1E47  3000               	movlw	0
 16585  1E48  00FC               	movwf	i1___lldiv@quotient+3
 16586  1E49  3000               	movlw	0
 16587  1E4A  00FB               	movwf	i1___lldiv@quotient+2
 16588  1E4B  3000               	movlw	0
 16589  1E4C  00FA               	movwf	i1___lldiv@quotient+1
 16590  1E4D  3000               	movlw	0
 16591  1E4E  00F9               	movwf	i1___lldiv@quotient
 16592  1E4F  0873               	movf	i1___lldiv@divisor+3,w
 16593  1E50  0472               	iorwf	i1___lldiv@divisor+2,w
 16594  1E51  0471               	iorwf	i1___lldiv@divisor+1,w
 16595  1E52  0470               	iorwf	i1___lldiv@divisor,w
 16596  1E53  1903               	skipnz
 16597  1E54  2E90               	goto	i1l4168
 16598  1E55  01FD               	clrf	i1___lldiv@counter
 16599  1E56  0AFD               	incf	i1___lldiv@counter,f
 16600  1E57                     i1l4154:	
 16601  1E57  1BF3               	btfsc	i1___lldiv@divisor+3,7
 16602  1E58  2E65               	goto	i1l4156
 16603  1E59  3001               	movlw	1
 16604  1E5A                     u444_25:	
 16605  1E5A  35F0               	lslf	i1___lldiv@divisor,f
 16606  1E5B  0DF1               	rlf	i1___lldiv@divisor+1,f
 16607  1E5C  0DF2               	rlf	i1___lldiv@divisor+2,f
 16608  1E5D  0DF3               	rlf	i1___lldiv@divisor+3,f
 16609  1E5E  0B89               	decfsz	9,f
 16610  1E5F  2E5A               	goto	u444_25
 16611  1E60  3001               	movlw	1
 16612  1E61  00F8               	movwf	??i1___lldiv
 16613  1E62  0878               	movf	??i1___lldiv,w
 16614  1E63  07FD               	addwf	i1___lldiv@counter,f
 16615  1E64  2E57               	goto	i1l4154
 16616  1E65                     i1l4156:	
 16617  1E65  3001               	movlw	1
 16618  1E66                     u446_25:	
 16619  1E66  35F9               	lslf	i1___lldiv@quotient,f
 16620  1E67  0DFA               	rlf	i1___lldiv@quotient+1,f
 16621  1E68  0DFB               	rlf	i1___lldiv@quotient+2,f
 16622  1E69  0DFC               	rlf	i1___lldiv@quotient+3,f
 16623  1E6A  0B89               	decfsz	9,f
 16624  1E6B  2E66               	goto	u446_25
 16625  1E6C  0873               	movf	i1___lldiv@divisor+3,w
 16626  1E6D  0277               	subwf	i1___lldiv@dividend+3,w
 16627  1E6E  1D03               	skipz
 16628  1E6F  2E7A               	goto	u447_25
 16629  1E70  0872               	movf	i1___lldiv@divisor+2,w
 16630  1E71  0276               	subwf	i1___lldiv@dividend+2,w
 16631  1E72  1D03               	skipz
 16632  1E73  2E7A               	goto	u447_25
 16633  1E74  0871               	movf	i1___lldiv@divisor+1,w
 16634  1E75  0275               	subwf	i1___lldiv@dividend+1,w
 16635  1E76  1D03               	skipz
 16636  1E77  2E7A               	goto	u447_25
 16637  1E78  0870               	movf	i1___lldiv@divisor,w
 16638  1E79  0274               	subwf	i1___lldiv@dividend,w
 16639  1E7A                     u447_25:	
 16640  1E7A  1C03               	skipc
 16641  1E7B  2E85               	goto	i1l4164
 16642  1E7C  0870               	movf	i1___lldiv@divisor,w
 16643  1E7D  02F4               	subwf	i1___lldiv@dividend,f
 16644  1E7E  0871               	movf	i1___lldiv@divisor+1,w
 16645  1E7F  3BF5               	subwfb	i1___lldiv@dividend+1,f
 16646  1E80  0872               	movf	i1___lldiv@divisor+2,w
 16647  1E81  3BF6               	subwfb	i1___lldiv@dividend+2,f
 16648  1E82  0873               	movf	i1___lldiv@divisor+3,w
 16649  1E83  3BF7               	subwfb	i1___lldiv@dividend+3,f
 16650  1E84  1479               	bsf	i1___lldiv@quotient,0
 16651  1E85                     i1l4164:	
 16652  1E85  3001               	movlw	1
 16653  1E86                     u448_25:	
 16654  1E86  36F3               	lsrf	i1___lldiv@divisor+3,f
 16655  1E87  0CF2               	rrf	i1___lldiv@divisor+2,f
 16656  1E88  0CF1               	rrf	i1___lldiv@divisor+1,f
 16657  1E89  0CF0               	rrf	i1___lldiv@divisor,f
 16658  1E8A  0B89               	decfsz	9,f
 16659  1E8B  2E86               	goto	u448_25
 16660  1E8C  3001               	movlw	1
 16661  1E8D  02FD               	subwf	i1___lldiv@counter,f
 16662  1E8E  1D03               	btfss	3,2
 16663  1E8F  2E65               	goto	i1l4156
 16664  1E90                     i1l4168:	
 16665  1E90  087C               	movf	i1___lldiv@quotient+3,w
 16666  1E91  00F3               	movwf	?i1___lldiv+3
 16667  1E92  087B               	movf	i1___lldiv@quotient+2,w
 16668  1E93  00F2               	movwf	?i1___lldiv+2
 16669  1E94  087A               	movf	i1___lldiv@quotient+1,w
 16670  1E95  00F1               	movwf	?i1___lldiv+1
 16671  1E96  0879               	movf	i1___lldiv@quotient,w
 16672  1E97  00F0               	movwf	?i1___lldiv
 16673  1E98  0008               	return
 16674  1E99                     __end_ofi1___lldiv:	
 16675                           
 16676                           	psect	text64
 16677  1CCE                     __ptext64:	
 16678 ;; *************** function ___llmod *****************
 16679 ;; Defined at:
 16680 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\llmod.c"
 16681 ;; Parameters:    Size  Location     Type
 16682 ;;  divisor         4    0[BANK0 ] unsigned long 
 16683 ;;  dividend        4    4[BANK0 ] unsigned long 
 16684 ;; Auto vars:     Size  Location     Type
 16685 ;;  counter         1    9[BANK0 ] unsigned char 
 16686 ;; Return value:  Size  Location     Type
 16687 ;;                  4    0[BANK0 ] unsigned long 
 16688 ;; Registers used:
 16689 ;;		wreg, status,2, status,0
 16690 ;; Tracked objects:
 16691 ;;		On entry : 0/0
 16692 ;;		On exit  : 0/0
 16693 ;;		Unchanged: 0/0
 16694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16695 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16696 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16697 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16698 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16699 ;;Total ram usage:       10 bytes
 16700 ;; Hardware stack levels used:    1
 16701 ;; This function calls:
 16702 ;;		Nothing
 16703 ;; This function is called by:
 16704 ;;		_sprintf
 16705 ;; This function uses a non-reentrant model
 16706 ;;
 16707                           
 16708                           
 16709                           ;psect for function ___llmod
 16710  1CCE                     ___llmod:	
 16711                           
 16712                           ;incstack = 0
 16713                           ; Regs used in ___llmod: [wreg+status,2+status,0]
 16714  1CCE  0020               	movlb	0	; select bank0
 16715  1CCF  0823               	movf	___llmod@divisor+3,w
 16716  1CD0  0422               	iorwf	___llmod@divisor+2,w
 16717  1CD1  0421               	iorwf	___llmod@divisor+1,w
 16718  1CD2  0420               	iorwf	___llmod@divisor,w
 16719  1CD3  1903               	skipnz
 16720  1CD4  2D08               	goto	i1l4054
 16721  1CD5  01A9               	clrf	___llmod@counter
 16722  1CD6  0AA9               	incf	___llmod@counter,f
 16723  1CD7                     i1l4044:	
 16724  1CD7  1BA3               	btfsc	___llmod@divisor+3,7
 16725  1CD8  2CE5               	goto	i1l4046
 16726  1CD9  3001               	movlw	1
 16727  1CDA                     u423_25:	
 16728  1CDA  35A0               	lslf	___llmod@divisor,f
 16729  1CDB  0DA1               	rlf	___llmod@divisor+1,f
 16730  1CDC  0DA2               	rlf	___llmod@divisor+2,f
 16731  1CDD  0DA3               	rlf	___llmod@divisor+3,f
 16732  1CDE  0B89               	decfsz	9,f
 16733  1CDF  2CDA               	goto	u423_25
 16734  1CE0  3001               	movlw	1
 16735  1CE1  00A8               	movwf	??___llmod
 16736  1CE2  0828               	movf	??___llmod,w
 16737  1CE3  07A9               	addwf	___llmod@counter,f
 16738  1CE4  2CD7               	goto	i1l4044
 16739  1CE5                     i1l4046:	
 16740  1CE5  0823               	movf	___llmod@divisor+3,w
 16741  1CE6  0227               	subwf	___llmod@dividend+3,w
 16742  1CE7  1D03               	skipz
 16743  1CE8  2CF3               	goto	u425_25
 16744  1CE9  0822               	movf	___llmod@divisor+2,w
 16745  1CEA  0226               	subwf	___llmod@dividend+2,w
 16746  1CEB  1D03               	skipz
 16747  1CEC  2CF3               	goto	u425_25
 16748  1CED  0821               	movf	___llmod@divisor+1,w
 16749  1CEE  0225               	subwf	___llmod@dividend+1,w
 16750  1CEF  1D03               	skipz
 16751  1CF0  2CF3               	goto	u425_25
 16752  1CF1  0820               	movf	___llmod@divisor,w
 16753  1CF2  0224               	subwf	___llmod@dividend,w
 16754  1CF3                     u425_25:	
 16755  1CF3  1C03               	skipc
 16756  1CF4  2CFD               	goto	i1l4050
 16757  1CF5  0820               	movf	___llmod@divisor,w
 16758  1CF6  02A4               	subwf	___llmod@dividend,f
 16759  1CF7  0821               	movf	___llmod@divisor+1,w
 16760  1CF8  3BA5               	subwfb	___llmod@dividend+1,f
 16761  1CF9  0822               	movf	___llmod@divisor+2,w
 16762  1CFA  3BA6               	subwfb	___llmod@dividend+2,f
 16763  1CFB  0823               	movf	___llmod@divisor+3,w
 16764  1CFC  3BA7               	subwfb	___llmod@dividend+3,f
 16765  1CFD                     i1l4050:	
 16766  1CFD  3001               	movlw	1
 16767  1CFE                     u426_25:	
 16768  1CFE  36A3               	lsrf	___llmod@divisor+3,f
 16769  1CFF  0CA2               	rrf	___llmod@divisor+2,f
 16770  1D00  0CA1               	rrf	___llmod@divisor+1,f
 16771  1D01  0CA0               	rrf	___llmod@divisor,f
 16772  1D02  0B89               	decfsz	9,f
 16773  1D03  2CFE               	goto	u426_25
 16774  1D04  3001               	movlw	1
 16775  1D05  02A9               	subwf	___llmod@counter,f
 16776  1D06  1D03               	btfss	3,2
 16777  1D07  2CE5               	goto	i1l4046
 16778  1D08                     i1l4054:	
 16779  1D08  0827               	movf	___llmod@dividend+3,w
 16780  1D09  00A3               	movwf	?___llmod+3
 16781  1D0A  0826               	movf	___llmod@dividend+2,w
 16782  1D0B  00A2               	movwf	?___llmod+2
 16783  1D0C  0825               	movf	___llmod@dividend+1,w
 16784  1D0D  00A1               	movwf	?___llmod+1
 16785  1D0E  0824               	movf	___llmod@dividend,w
 16786  1D0F  00A0               	movwf	?___llmod
 16787  1D10  0008               	return
 16788  1D11                     __end_of___llmod:	
 16789                           
 16790                           	psect	text65
 16791  11A6                     __ptext65:	
 16792 ;; *************** function _WriteBaud *****************
 16793 ;; Defined at:
 16794 ;;		line 171 in file "FLASH.c"
 16795 ;; Parameters:    Size  Location     Type
 16796 ;;  row             2    0[BANK1 ] unsigned int 
 16797 ;;  Baud            4    2[BANK1 ] unsigned long 
 16798 ;;  Parity          1    6[BANK1 ] unsigned char 
 16799 ;; Auto vars:     Size  Location     Type
 16800 ;;  temp            4   74[BANK0 ] unsigned long 
 16801 ;; Return value:  Size  Location     Type
 16802 ;;		None               void
 16803 ;; Registers used:
 16804 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16805 ;; Tracked objects:
 16806 ;;		On entry : 0/0
 16807 ;;		On exit  : 0/0
 16808 ;;		Unchanged: 0/0
 16809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16810 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 16811 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16812 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
 16813 ;;      Totals:         0       4      15       0       0       0       0       0       0       0       0       0       
      +0       0
 16814 ;;Total ram usage:       19 bytes
 16815 ;; Hardware stack levels used:    1
 16816 ;; Hardware stack levels required when called:    3
 16817 ;; This function calls:
 16818 ;;		_WriteFlash_Sequential
 16819 ;; This function is called by:
 16820 ;;		_SetBaud
 16821 ;; This function uses a non-reentrant model
 16822 ;;
 16823                           
 16824                           
 16825                           ;psect for function _WriteBaud
 16826  11A6                     _WriteBaud:	
 16827                           
 16828                           ;FLASH.c: 173: unsigned long temp;
 16829                           ;FLASH.c: 174: temp = (Baud & 0x000FFFFF) + (((unsigned long) Parity & 0x7) << 20);
 16830                           
 16831                           ;incstack = 0
 16832                           ; Regs used in _WriteBaud: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16833  11A6  0021               	movlb	1	; select bank1
 16834  11A7  0826               	movf	WriteBaud@Parity^(0+128),w
 16835  11A8  3907               	andlw	7
 16836  11A9  00A7               	movwf	??_WriteBaud^(0+128)
 16837  11AA  01A8               	clrf	(??_WriteBaud^(0+128)+1)
 16838  11AB  01A9               	clrf	(??_WriteBaud^(0+128)+2)
 16839  11AC  01AA               	clrf	(??_WriteBaud^(0+128)+3)
 16840  11AD  3014               	movlw	20
 16841  11AE                     u465_25:	
 16842  11AE  35A7               	lslf	??_WriteBaud^(0+128),f
 16843  11AF  0DA8               	rlf	(??_WriteBaud^(0+128)+1),f
 16844  11B0  0DA9               	rlf	(??_WriteBaud^(0+128)+2),f
 16845  11B1  0DAA               	rlf	(??_WriteBaud^(0+128)+3),f
 16846  11B2  0B89               	decfsz	9,f
 16847  11B3  29AE               	goto	u465_25
 16848  11B4  30FF               	movlw	255
 16849  11B5  0522               	andwf	WriteBaud@Baud^(0+128),w
 16850  11B6  00AB               	movwf	(??_WriteBaud+4)^(0+128)
 16851  11B7  30FF               	movlw	255
 16852  11B8  0523               	andwf	(WriteBaud@Baud+1)^(0+128),w
 16853  11B9  00AC               	movwf	((??_WriteBaud+4)^(0+128)+1)
 16854  11BA  300F               	movlw	15
 16855  11BB  0524               	andwf	(WriteBaud@Baud+2)^(0+128),w
 16856  11BC  00AD               	movwf	((??_WriteBaud+4)^(0+128)+2)
 16857  11BD  3000               	movlw	0
 16858  11BE  0525               	andwf	(WriteBaud@Baud+3)^(0+128),w
 16859  11BF  00AE               	movwf	((??_WriteBaud+4)^(0+128)+3)
 16860  11C0  082B               	movf	(??_WriteBaud+4)^(0+128),w
 16861  11C1  07A7               	addwf	??_WriteBaud^(0+128),f
 16862  11C2  082C               	movf	(??_WriteBaud+5)^(0+128),w
 16863  11C3  3DA8               	addwfc	(??_WriteBaud^(0+128)+1),f
 16864  11C4  082D               	movf	(??_WriteBaud+6)^(0+128),w
 16865  11C5  3DA9               	addwfc	(??_WriteBaud^(0+128)+2),f
 16866  11C6  082E               	movf	(??_WriteBaud+7)^(0+128),w
 16867  11C7  3DAA               	addwfc	(??_WriteBaud^(0+128)+3),f
 16868  11C8  082A               	movf	(??_WriteBaud+3)^(0+128),w
 16869  11C9  0020               	movlb	0	; select bank0
 16870  11CA  00ED               	movwf	WriteBaud@temp+3
 16871  11CB  0021               	movlb	1	; select bank1
 16872  11CC  0829               	movf	(??_WriteBaud+2)^(0+128),w
 16873  11CD  0020               	movlb	0	; select bank0
 16874  11CE  00EC               	movwf	WriteBaud@temp+2
 16875  11CF  0021               	movlb	1	; select bank1
 16876  11D0  0828               	movf	(??_WriteBaud+1)^(0+128),w
 16877  11D1  0020               	movlb	0	; select bank0
 16878  11D2  00EB               	movwf	WriteBaud@temp+1
 16879  11D3  0021               	movlb	1	; select bank1
 16880  11D4  0827               	movf	??_WriteBaud^(0+128),w
 16881  11D5  0020               	movlb	0	; select bank0
 16882  11D6  00EA               	movwf	WriteBaud@temp
 16883                           
 16884                           ;FLASH.c: 175: MEM[1] = (unsigned int) (temp & 0x0003FFF);
 16885  11D7  30FF               	movlw	255
 16886  11D8  056A               	andwf	WriteBaud@temp,w
 16887  11D9  0021               	movlb	1	; select bank1
 16888  11DA  00E4               	movwf	(_MEM^(0+128)+2)
 16889  11DB  303F               	movlw	63
 16890  11DC  0020               	movlb	0	; select bank0
 16891  11DD  056B               	andwf	WriteBaud@temp+1,w
 16892  11DE  0021               	movlb	1	; select bank1
 16893  11DF  00E5               	movwf	((_MEM+1)^(0+128)+2)
 16894                           
 16895                           ;FLASH.c: 176: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
 16896  11E0  0020               	movlb	0	; select bank0
 16897  11E1  086A               	movf	WriteBaud@temp,w
 16898  11E2  0021               	movlb	1	; select bank1
 16899  11E3  00A7               	movwf	??_WriteBaud^(0+128)
 16900  11E4  0020               	movlb	0	; select bank0
 16901  11E5  086B               	movf	WriteBaud@temp+1,w
 16902  11E6  0021               	movlb	1	; select bank1
 16903  11E7  00A8               	movwf	(??_WriteBaud^(0+128)+1)
 16904  11E8  0020               	movlb	0	; select bank0
 16905  11E9  086C               	movf	WriteBaud@temp+2,w
 16906  11EA  0021               	movlb	1	; select bank1
 16907  11EB  00A9               	movwf	(??_WriteBaud^(0+128)+2)
 16908  11EC  0020               	movlb	0	; select bank0
 16909  11ED  086D               	movf	WriteBaud@temp+3,w
 16910  11EE  0021               	movlb	1	; select bank1
 16911  11EF  00AA               	movwf	(??_WriteBaud^(0+128)+3)
 16912  11F0  300E               	movlw	14
 16913  11F1                     u466_25:	
 16914  11F1  36AA               	lsrf	(??_WriteBaud^(0+128)+3),f
 16915  11F2  0CA9               	rrf	(??_WriteBaud^(0+128)+2),f
 16916  11F3  0CA8               	rrf	(??_WriteBaud^(0+128)+1),f
 16917  11F4  0CA7               	rrf	??_WriteBaud^(0+128),f
 16918  11F5  0B89               	decfsz	9,f
 16919  11F6  29F1               	goto	u466_25
 16920  11F7  30FF               	movlw	255
 16921  11F8  0527               	andwf	??_WriteBaud^(0+128),w
 16922  11F9  00E2               	movwf	_MEM^(0+128)
 16923  11FA  303F               	movlw	63
 16924  11FB  0528               	andwf	(??_WriteBaud+1)^(0+128),w
 16925  11FC  00E3               	movwf	(_MEM+1)^(0+128)
 16926                           
 16927                           ;FLASH.c: 177: WriteFlash_Sequential(row, MEM, 2);
 16928  11FD  0821               	movf	(WriteBaud@row+1)^(0+128),w
 16929  11FE  01FB               	clrf	WriteFlash_Sequential@row+1
 16930  11FF  07FB               	addwf	WriteFlash_Sequential@row+1,f
 16931  1200  0820               	movf	WriteBaud@row^(0+128),w
 16932  1201  01FA               	clrf	WriteFlash_Sequential@row
 16933  1202  07FA               	addwf	WriteFlash_Sequential@row,f
 16934  1203  30E2               	movlw	_MEM& (0+255)
 16935  1204  00A7               	movwf	??_WriteBaud^(0+128)
 16936  1205  0827               	movf	??_WriteBaud^(0+128),w
 16937  1206  00FC               	movwf	WriteFlash_Sequential@buffer
 16938  1207  3002               	movlw	2
 16939  1208  00A8               	movwf	(??_WriteBaud+1)^(0+128)
 16940  1209  0828               	movf	(??_WriteBaud+1)^(0+128),w
 16941  120A  00FD               	movwf	WriteFlash_Sequential@amount
 16942  120B  3193  236B         	fcall	_WriteFlash_Sequential
 16943  120D  0008               	return
 16944  120E                     __end_of_WriteBaud:	
 16945                           
 16946                           	psect	text66
 16947  136B                     __ptext66:	
 16948 ;; *************** function _WriteFlash_Sequential *****************
 16949 ;; Defined at:
 16950 ;;		line 112 in file "FLASH.c"
 16951 ;; Parameters:    Size  Location     Type
 16952 ;;  row             2   10[COMMON] unsigned int 
 16953 ;;  buffer          1   12[COMMON] PTR unsigned int 
 16954 ;;		 -> MEM(4), 
 16955 ;;  amount          1   13[COMMON] unsigned char 
 16956 ;; Auto vars:     Size  Location     Type
 16957 ;;  TempBufL       32   35[BANK0 ] unsigned char [32]
 16958 ;;  TempBufH       32    3[BANK0 ] unsigned char [32]
 16959 ;;  temp            2   70[BANK0 ] unsigned int 
 16960 ;;  i               1   73[BANK0 ] unsigned char 
 16961 ;;  spaces          1   72[BANK0 ] unsigned char 
 16962 ;;  amountTemp      1   69[BANK0 ] unsigned char 
 16963 ;;  tempL           1   68[BANK0 ] unsigned char 
 16964 ;;  tempH           1   67[BANK0 ] unsigned char 
 16965 ;; Return value:  Size  Location     Type
 16966 ;;		None               void
 16967 ;; Registers used:
 16968 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16969 ;; Tracked objects:
 16970 ;;		On entry : 0/0
 16971 ;;		On exit  : 0/0
 16972 ;;		Unchanged: 0/0
 16973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16974 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16975 ;;      Locals:         0      71       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16976 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16977 ;;      Totals:         4      74       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16978 ;;Total ram usage:       78 bytes
 16979 ;; Hardware stack levels used:    1
 16980 ;; Hardware stack levels required when called:    2
 16981 ;; This function calls:
 16982 ;;		_BlockErase
 16983 ;;		_UNLOCK
 16984 ;;		i1_ReadFlash_2Byte
 16985 ;;		i1_delayUS
 16986 ;; This function is called by:
 16987 ;;		_WriteBaud
 16988 ;; This function uses a non-reentrant model
 16989 ;;
 16990                           
 16991                           
 16992                           ;psect for function _WriteFlash_Sequential
 16993  136B                     _WriteFlash_Sequential:	
 16994                           
 16995                           ;FLASH.c: 114: unsigned char spaces = 32;
 16996                           
 16997                           ;incstack = 0
 16998                           ; Regs used in _WriteFlash_Sequential: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16999  136B  3020               	movlw	32
 17000  136C  0020               	movlb	0	; select bank0
 17001  136D  00A0               	movwf	??_WriteFlash_Sequential
 17002  136E  0820               	movf	??_WriteFlash_Sequential,w
 17003  136F  00E8               	movwf	WriteFlash_Sequential@spaces
 17004                           
 17005                           ;FLASH.c: 115: unsigned char tempH;
 17006                           ;FLASH.c: 116: unsigned char tempL;
 17007                           ;FLASH.c: 117: unsigned char i;
 17008                           ;FLASH.c: 118: unsigned int temp;
 17009                           ;FLASH.c: 119: unsigned char amountTemp =0;
 17010  1370  01E5               	clrf	WriteFlash_Sequential@amountTemp
 17011                           
 17012                           ;FLASH.c: 120: unsigned char TempBufH[32];
 17013                           ;FLASH.c: 121: unsigned char TempBufL[32];
 17014                           ;FLASH.c: 123: for(i=0;i<spaces;i++)
 17015  1371  01E9               	clrf	WriteFlash_Sequential@i
 17016  1372                     i1l4000:	
 17017  1372  0868               	movf	WriteFlash_Sequential@spaces,w
 17018  1373  0269               	subwf	WriteFlash_Sequential@i,w
 17019  1374  1803               	btfsc	3,0
 17020  1375  2BC8               	goto	i1l4002
 17021                           
 17022                           ;FLASH.c: 124: {
 17023                           ;FLASH.c: 125: amountTemp++;
 17024  1376  3001               	movlw	1
 17025  1377  00A0               	movwf	??_WriteFlash_Sequential
 17026  1378  0820               	movf	??_WriteFlash_Sequential,w
 17027  1379  07E5               	addwf	WriteFlash_Sequential@amountTemp,f
 17028                           
 17029                           ;FLASH.c: 126: if(amountTemp <= amount)
 17030  137A  0865               	movf	WriteFlash_Sequential@amountTemp,w
 17031  137B  027D               	subwf	WriteFlash_Sequential@amount,w
 17032  137C  1C03               	skipc
 17033  137D  2B96               	goto	i1l3988
 17034                           
 17035                           ;FLASH.c: 127: {
 17036                           ;FLASH.c: 128: tempH = (unsigned char)((*buffer & 0x3F00) >> 8);
 17037  137E  087C               	movf	WriteFlash_Sequential@buffer,w
 17038  137F  0086               	movwf	6
 17039  1380  0187               	clrf	7
 17040  1381  3F40               	moviw [0]fsr1
 17041  1382  00A0               	movwf	??_WriteFlash_Sequential
 17042  1383  3F41               	moviw [1]fsr1
 17043  1384  00A1               	movwf	??_WriteFlash_Sequential+1
 17044  1385  0821               	movf	??_WriteFlash_Sequential+1,w
 17045  1386  393F               	andlw	63
 17046  1387  00A2               	movwf	??_WriteFlash_Sequential+2
 17047  1388  0822               	movf	??_WriteFlash_Sequential+2,w
 17048  1389  00E3               	movwf	WriteFlash_Sequential@tempH
 17049                           
 17050                           ;FLASH.c: 129: tempL = (unsigned char)(*buffer & 0x00FF);
 17051  138A  087C               	movf	WriteFlash_Sequential@buffer,w
 17052  138B  0086               	movwf	6
 17053  138C  0187               	clrf	7
 17054  138D  0801               	movf	1,w
 17055  138E  00A0               	movwf	??_WriteFlash_Sequential
 17056  138F  0820               	movf	??_WriteFlash_Sequential,w
 17057  1390  00E4               	movwf	WriteFlash_Sequential@tempL
 17058                           
 17059                           ;FLASH.c: 130: buffer++;
 17060  1391  3002               	movlw	2
 17061  1392  00A0               	movwf	??_WriteFlash_Sequential
 17062  1393  0820               	movf	??_WriteFlash_Sequential,w
 17063  1394  07FC               	addwf	WriteFlash_Sequential@buffer,f
 17064                           
 17065                           ;FLASH.c: 131: }
 17066  1395  2BB3               	goto	i1l3994
 17067  1396                     i1l3988:	
 17068                           
 17069                           ;FLASH.c: 132: else
 17070                           ;FLASH.c: 133: {
 17071                           ;FLASH.c: 135: temp = ReadFlash_2Byte(row, i);
 17072  1396  087B               	movf	WriteFlash_Sequential@row+1,w
 17073  1397  01F1               	clrf	i1ReadFlash_2Byte@row+1
 17074  1398  07F1               	addwf	i1ReadFlash_2Byte@row+1,f
 17075  1399  087A               	movf	WriteFlash_Sequential@row,w
 17076  139A  01F0               	clrf	i1ReadFlash_2Byte@row
 17077  139B  07F0               	addwf	i1ReadFlash_2Byte@row,f
 17078  139C  0869               	movf	WriteFlash_Sequential@i,w
 17079  139D  00A0               	movwf	??_WriteFlash_Sequential
 17080  139E  0820               	movf	??_WriteFlash_Sequential,w
 17081  139F  00F2               	movwf	i1ReadFlash_2Byte@column
 17082  13A0  3199  21D5  3193   	fcall	i1_ReadFlash_2Byte
 17083  13A3  0871               	movf	?i1_ReadFlash_2Byte+1,w
 17084  13A4  0020               	movlb	0	; select bank0
 17085  13A5  01E7               	clrf	WriteFlash_Sequential@temp+1
 17086  13A6  07E7               	addwf	WriteFlash_Sequential@temp+1,f
 17087  13A7  0870               	movf	?i1_ReadFlash_2Byte,w
 17088  13A8  01E6               	clrf	WriteFlash_Sequential@temp
 17089  13A9  07E6               	addwf	WriteFlash_Sequential@temp,f
 17090                           
 17091                           ;FLASH.c: 136: tempH = (unsigned char)((temp & 0x3F00) >>8);
 17092  13AA  0867               	movf	WriteFlash_Sequential@temp+1,w
 17093  13AB  393F               	andlw	63
 17094  13AC  00A0               	movwf	??_WriteFlash_Sequential
 17095  13AD  0820               	movf	??_WriteFlash_Sequential,w
 17096  13AE  00E3               	movwf	WriteFlash_Sequential@tempH
 17097                           
 17098                           ;FLASH.c: 137: tempL = (unsigned char)(temp & 0x00FF);
 17099  13AF  0866               	movf	WriteFlash_Sequential@temp,w
 17100  13B0  00A0               	movwf	??_WriteFlash_Sequential
 17101  13B1  0820               	movf	??_WriteFlash_Sequential,w
 17102  13B2  00E4               	movwf	WriteFlash_Sequential@tempL
 17103  13B3                     i1l3994:	
 17104                           
 17105                           ;FLASH.c: 138: }
 17106                           ;FLASH.c: 139: TempBufH[i] = tempH;
 17107  13B3  0863               	movf	WriteFlash_Sequential@tempH,w
 17108  13B4  00A0               	movwf	??_WriteFlash_Sequential
 17109  13B5  0869               	movf	WriteFlash_Sequential@i,w
 17110  13B6  3E23               	addlw	WriteFlash_Sequential@TempBufH& (0+255)
 17111  13B7  0086               	movwf	6
 17112  13B8  0187               	clrf	7
 17113  13B9  0820               	movf	??_WriteFlash_Sequential,w
 17114  13BA  0081               	movwf	1
 17115                           
 17116                           ;FLASH.c: 140: TempBufL[i] = tempL;
 17117  13BB  0864               	movf	WriteFlash_Sequential@tempL,w
 17118  13BC  00A0               	movwf	??_WriteFlash_Sequential
 17119  13BD  0869               	movf	WriteFlash_Sequential@i,w
 17120  13BE  3E43               	addlw	WriteFlash_Sequential@TempBufL& (0+255)
 17121  13BF  0086               	movwf	6
 17122  13C0  0187               	clrf	7
 17123  13C1  0820               	movf	??_WriteFlash_Sequential,w
 17124  13C2  0081               	movwf	1
 17125  13C3  3001               	movlw	1
 17126  13C4  00A0               	movwf	??_WriteFlash_Sequential
 17127  13C5  0820               	movf	??_WriteFlash_Sequential,w
 17128  13C6  07E9               	addwf	WriteFlash_Sequential@i,f
 17129  13C7  2B72               	goto	i1l4000
 17130  13C8                     i1l4002:	
 17131                           
 17132                           ;FLASH.c: 141: }
 17133                           ;FLASH.c: 142: BlockErase(row);
 17134  13C8  087B               	movf	WriteFlash_Sequential@row+1,w
 17135  13C9  01F1               	clrf	BlockErase@row+1
 17136  13CA  07F1               	addwf	BlockErase@row+1,f
 17137  13CB  087A               	movf	WriteFlash_Sequential@row,w
 17138  13CC  01F0               	clrf	BlockErase@row
 17139  13CD  07F0               	addwf	BlockErase@row,f
 17140  13CE  3199  21FF  3193   	fcall	_BlockErase
 17141                           
 17142                           ;FLASH.c: 143: delayUS(1000);
 17143  13D1  3000               	movlw	0
 17144  13D2  00F3               	movwf	i1delayUS@US+3
 17145  13D3  3000               	movlw	0
 17146  13D4  00F2               	movwf	i1delayUS@US+2
 17147  13D5  3003               	movlw	3
 17148  13D6  00F1               	movwf	i1delayUS@US+1
 17149  13D7  30E8               	movlw	232
 17150  13D8  00F0               	movwf	i1delayUS@US
 17151  13D9  319B  2375  3193   	fcall	i1_delayUS
 17152                           
 17153                           ;FLASH.c: 144: INTCON &= ~0x80;
 17154  13DC  307F               	movlw	127
 17155  13DD  0020               	movlb	0	; select bank0
 17156  13DE  00A0               	movwf	??_WriteFlash_Sequential
 17157  13DF  0820               	movf	??_WriteFlash_Sequential,w
 17158  13E0  058B               	andwf	11,f	;volatile
 17159                           
 17160                           ;FLASH.c: 145: PMCON1 |= 0b00000100;
 17161  13E1  0023               	movlb	3	; select bank3
 17162  13E2  1515               	bsf	21,2	;volatile
 17163                           
 17164                           ;FLASH.c: 146: PMCON1 &= ~0b01000000;
 17165  13E3  30BF               	movlw	191
 17166  13E4  0020               	movlb	0	; select bank0
 17167  13E5  00A0               	movwf	??_WriteFlash_Sequential
 17168  13E6  0820               	movf	??_WriteFlash_Sequential,w
 17169  13E7  0023               	movlb	3	; select bank3
 17170  13E8  0595               	andwf	21,f	;volatile
 17171                           
 17172                           ;FLASH.c: 147: PMCON1 &= ~0b00100000;
 17173  13E9  30DF               	movlw	223
 17174  13EA  0020               	movlb	0	; select bank0
 17175  13EB  00A0               	movwf	??_WriteFlash_Sequential
 17176  13EC  0820               	movf	??_WriteFlash_Sequential,w
 17177  13ED  0023               	movlb	3	; select bank3
 17178  13EE  0595               	andwf	21,f	;volatile
 17179                           
 17180                           ;FLASH.c: 148: PMCON1 &= ~0b00010000;
 17181  13EF  30EF               	movlw	239
 17182  13F0  0020               	movlb	0	; select bank0
 17183  13F1  00A0               	movwf	??_WriteFlash_Sequential
 17184  13F2  0820               	movf	??_WriteFlash_Sequential,w
 17185  13F3  0023               	movlb	3	; select bank3
 17186  13F4  0595               	andwf	21,f	;volatile
 17187                           
 17188                           ;FLASH.c: 149: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 17189  13F5  087B               	movf	WriteFlash_Sequential@row+1,w
 17190  13F6  0020               	movlb	0	; select bank0
 17191  13F7  00A1               	movwf	??_WriteFlash_Sequential+1
 17192  13F8  087A               	movf	WriteFlash_Sequential@row,w
 17193  13F9  00A0               	movwf	??_WriteFlash_Sequential
 17194  13FA  36A1               	lsrf	??_WriteFlash_Sequential+1,f
 17195  13FB  0CA0               	rrf	??_WriteFlash_Sequential,f
 17196  13FC  36A1               	lsrf	??_WriteFlash_Sequential+1,f
 17197  13FD  0CA0               	rrf	??_WriteFlash_Sequential,f
 17198  13FE  36A1               	lsrf	??_WriteFlash_Sequential+1,f
 17199  13FF  0CA0               	rrf	??_WriteFlash_Sequential,f
 17200  1400  0820               	movf	??_WriteFlash_Sequential,w
 17201  1401  397F               	andlw	127
 17202  1402  0023               	movlb	3	; select bank3
 17203  1403  0092               	movwf	18	;volatile
 17204                           
 17205                           ;FLASH.c: 150: PMADRL = (unsigned char)((row & 0x007) << 5);
 17206  1404  087A               	movf	WriteFlash_Sequential@row,w
 17207  1405  3907               	andlw	7
 17208  1406  0020               	movlb	0	; select bank0
 17209  1407  00A0               	movwf	??_WriteFlash_Sequential
 17210  1408  3004               	movlw	4
 17211  1409                     u420_25:	
 17212  1409  35A0               	lslf	??_WriteFlash_Sequential,f
 17213  140A  3EFF               	addlw	-1
 17214  140B  1D03               	skipz
 17215  140C  2C09               	goto	u420_25
 17216  140D  3520               	lslf	??_WriteFlash_Sequential,w
 17217  140E  0023               	movlb	3	; select bank3
 17218  140F  0091               	movwf	17	;volatile
 17219                           
 17220                           ;FLASH.c: 152: for(i=0;i<spaces;i++)
 17221  1410  0020               	movlb	0	; select bank0
 17222  1411  01E9               	clrf	WriteFlash_Sequential@i
 17223  1412                     i1l4032:	
 17224  1412  0868               	movf	WriteFlash_Sequential@spaces,w
 17225  1413  0269               	subwf	WriteFlash_Sequential@i,w
 17226  1414  1803               	btfsc	3,0
 17227  1415  2C36               	goto	i1l4034
 17228                           
 17229                           ;FLASH.c: 153: {
 17230                           ;FLASH.c: 154: PMDATH = TempBufH[i];
 17231  1416  0869               	movf	WriteFlash_Sequential@i,w
 17232  1417  3E23               	addlw	WriteFlash_Sequential@TempBufH& (0+255)
 17233  1418  0086               	movwf	6
 17234  1419  0187               	clrf	7
 17235  141A  0801               	movf	1,w
 17236  141B  0023               	movlb	3	; select bank3
 17237  141C  0094               	movwf	20	;volatile
 17238                           
 17239                           ;FLASH.c: 155: PMDATL = TempBufL[i];
 17240  141D  0020               	movlb	0	; select bank0
 17241  141E  0869               	movf	WriteFlash_Sequential@i,w
 17242  141F  3E43               	addlw	WriteFlash_Sequential@TempBufL& (0+255)
 17243  1420  0086               	movwf	6
 17244  1421  0187               	clrf	7
 17245  1422  0801               	movf	1,w
 17246  1423  0023               	movlb	3	; select bank3
 17247  1424  0093               	movwf	19	;volatile
 17248                           
 17249                           ;FLASH.c: 156: __nop();
 17250  1425  0000               	nop
 17251                           
 17252                           ;FLASH.c: 157: __nop();
 17253  1426  0000               	nop
 17254                           
 17255                           ;FLASH.c: 158: UNLOCK();
 17256  1427  3198  207B  3193   	fcall	_UNLOCK
 17257                           
 17258                           ;FLASH.c: 159: PMADRL++;
 17259  142A  3001               	movlw	1
 17260  142B  0020               	movlb	0	; select bank0
 17261  142C  00A0               	movwf	??_WriteFlash_Sequential
 17262  142D  0820               	movf	??_WriteFlash_Sequential,w
 17263  142E  0023               	movlb	3	; select bank3
 17264  142F  0791               	addwf	17,f	;volatile
 17265  1430  3001               	movlw	1
 17266  1431  0020               	movlb	0	; select bank0
 17267  1432  00A0               	movwf	??_WriteFlash_Sequential
 17268  1433  0820               	movf	??_WriteFlash_Sequential,w
 17269  1434  07E9               	addwf	WriteFlash_Sequential@i,f
 17270  1435  2C12               	goto	i1l4032
 17271  1436                     i1l4034:	
 17272                           
 17273                           ;FLASH.c: 161: }
 17274                           ;FLASH.c: 162: PMCON1 &= ~0b00000100;
 17275  1436  30FB               	movlw	251
 17276  1437  00A0               	movwf	??_WriteFlash_Sequential
 17277  1438  0820               	movf	??_WriteFlash_Sequential,w
 17278  1439  0023               	movlb	3	; select bank3
 17279  143A  0595               	andwf	21,f	;volatile
 17280                           
 17281                           ;FLASH.c: 163: INTCON |= 0x80;
 17282  143B  178B               	bsf	11,7	;volatile
 17283  143C  0008               	return
 17284  143D                     __end_of_WriteFlash_Sequential:	
 17285                           
 17286                           	psect	text67
 17287  1B75                     __ptext67:	
 17288 ;; *************** function i1_delayUS *****************
 17289 ;; Defined at:
 17290 ;;		line 49 in file "MISC.c"
 17291 ;; Parameters:    Size  Location     Type
 17292 ;;  US              4    0[COMMON] long 
 17293 ;; Auto vars:     Size  Location     Type
 17294 ;;  delayUS         4    5[COMMON] long 
 17295 ;;  delayUS         1    9[COMMON] unsigned char 
 17296 ;; Return value:  Size  Location     Type
 17297 ;;		None               void
 17298 ;; Registers used:
 17299 ;;		wreg, status,2, status,0
 17300 ;; Tracked objects:
 17301 ;;		On entry : 0/0
 17302 ;;		On exit  : 0/0
 17303 ;;		Unchanged: 0/0
 17304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17305 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17306 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17307 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17308 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17309 ;;Total ram usage:       10 bytes
 17310 ;; Hardware stack levels used:    1
 17311 ;; This function calls:
 17312 ;;		Nothing
 17313 ;; This function is called by:
 17314 ;;		_UART_send_break_timed
 17315 ;;		_SetBaud
 17316 ;;		_Process_PS2_ScanCode
 17317 ;;		_WriteFlash_Sequential
 17318 ;;		i1_UARTstringWAIT
 17319 ;;		i1_Send_PS2
 17320 ;; This function uses a non-reentrant model
 17321 ;;
 17322                           
 17323                           
 17324                           ;psect for function i1_delayUS
 17325  1B75                     i1_delayUS:	
 17326                           
 17327                           ;MISC.c: 51: long i;
 17328                           ;MISC.c: 52: unsigned char j;
 17329                           ;MISC.c: 53: for(i=0;i<US;i+=6)
 17330                           
 17331                           ;incstack = 0
 17332                           ; Regs used in i1_delayUS: [wreg+status,2+status,0]
 17333  1B75  3000               	movlw	0
 17334  1B76  00F8               	movwf	i1delayUS@i+3
 17335  1B77  3000               	movlw	0
 17336  1B78  00F7               	movwf	i1delayUS@i+2
 17337  1B79  3000               	movlw	0
 17338  1B7A  00F6               	movwf	i1delayUS@i+1
 17339  1B7B  3000               	movlw	0
 17340  1B7C  00F5               	movwf	i1delayUS@i
 17341  1B7D                     i1l282:	
 17342  1B7D  0878               	movf	i1delayUS@i+3,w
 17343  1B7E  3A80               	xorlw	128
 17344  1B7F  00F4               	movwf	??i1_delayUS
 17345  1B80  0873               	movf	i1delayUS@US+3,w
 17346  1B81  3A80               	xorlw	128
 17347  1B82  0274               	subwf	??i1_delayUS,w
 17348  1B83  1D03               	skipz
 17349  1B84  2B8F               	goto	u391_23
 17350  1B85  0872               	movf	i1delayUS@US+2,w
 17351  1B86  0277               	subwf	i1delayUS@i+2,w
 17352  1B87  1D03               	skipz
 17353  1B88  2B8F               	goto	u391_23
 17354  1B89  0871               	movf	i1delayUS@US+1,w
 17355  1B8A  0276               	subwf	i1delayUS@i+1,w
 17356  1B8B  1D03               	skipz
 17357  1B8C  2B8F               	goto	u391_23
 17358  1B8D  0870               	movf	i1delayUS@US,w
 17359  1B8E  0275               	subwf	i1delayUS@i,w
 17360  1B8F                     u391_23:	
 17361  1B8F  1803               	btfsc	3,0
 17362  1B90  0008               	return
 17363                           
 17364                           ;MISC.c: 54: {
 17365                           ;MISC.c: 55: for(j=0;j<32;j++)
 17366  1B91  01F9               	clrf	i1delayUS@j
 17367  1B92  3020               	movlw	32
 17368  1B93  0279               	subwf	i1delayUS@j,w
 17369  1B94  1803               	btfsc	3,0
 17370  1B95  2B9F               	goto	i1l3836
 17371  1B96                     i1l284:	
 17372                           
 17373                           ;MISC.c: 56: {
 17374                           ;MISC.c: 57: __nop();
 17375  1B96  0000               	nop
 17376  1B97  3001               	movlw	1
 17377  1B98  00F4               	movwf	??i1_delayUS
 17378  1B99  0874               	movf	??i1_delayUS,w
 17379  1B9A  07F9               	addwf	i1delayUS@j,f
 17380  1B9B  3020               	movlw	32
 17381  1B9C  0279               	subwf	i1delayUS@j,w
 17382  1B9D  1C03               	skipc
 17383  1B9E  2B96               	goto	i1l284
 17384  1B9F                     i1l3836:	
 17385  1B9F  3006               	movlw	6
 17386  1BA0  07F5               	addwf	i1delayUS@i,f
 17387  1BA1  3000               	movlw	0
 17388  1BA2  3DF6               	addwfc	i1delayUS@i+1,f
 17389  1BA3  3000               	movlw	0
 17390  1BA4  3DF7               	addwfc	i1delayUS@i+2,f
 17391  1BA5  3000               	movlw	0
 17392  1BA6  3DF8               	addwfc	i1delayUS@i+3,f
 17393  1BA7  2B7D               	goto	i1l282
 17394  1BA8                     __end_ofi1_delayUS:	
 17395                           
 17396                           	psect	text68
 17397  19D5                     __ptext68:	
 17398 ;; *************** function i1_ReadFlash_2Byte *****************
 17399 ;; Defined at:
 17400 ;;		line 43 in file "FLASH.c"
 17401 ;; Parameters:    Size  Location     Type
 17402 ;;  row             2    0[COMMON] unsigned int 
 17403 ;;  column          1    2[COMMON] unsigned char 
 17404 ;; Auto vars:     Size  Location     Type
 17405 ;;		None
 17406 ;; Return value:  Size  Location     Type
 17407 ;;                  2    0[COMMON] unsigned int 
 17408 ;; Registers used:
 17409 ;;		wreg, status,2, status,0
 17410 ;; Tracked objects:
 17411 ;;		On entry : 0/0
 17412 ;;		On exit  : 0/0
 17413 ;;		Unchanged: 0/0
 17414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17415 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17417 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17418 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17419 ;;Total ram usage:        5 bytes
 17420 ;; Hardware stack levels used:    1
 17421 ;; This function calls:
 17422 ;;		Nothing
 17423 ;; This function is called by:
 17424 ;;		_WriteFlash_Sequential
 17425 ;;		i1_ReadFlash_4Byte
 17426 ;; This function uses a non-reentrant model
 17427 ;;
 17428                           
 17429                           
 17430                           ;psect for function i1_ReadFlash_2Byte
 17431  19D5                     i1_ReadFlash_2Byte:	
 17432                           
 17433                           ;FLASH.c: 45: PMCON1 &= ~0b01000000;
 17434                           
 17435                           ;incstack = 0
 17436                           ; Regs used in i1_ReadFlash_2Byte: [wreg+status,2+status,0]
 17437  19D5  30BF               	movlw	191
 17438  19D6  00F3               	movwf	??i1_ReadFlash_2Byte
 17439  19D7  0873               	movf	??i1_ReadFlash_2Byte,w
 17440  19D8  0023               	movlb	3	; select bank3
 17441  19D9  0595               	andwf	21,f	;volatile
 17442                           
 17443                           ;FLASH.c: 46: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 17444  19DA  0871               	movf	i1ReadFlash_2Byte@row+1,w
 17445  19DB  00F4               	movwf	??i1_ReadFlash_2Byte+1
 17446  19DC  0870               	movf	i1ReadFlash_2Byte@row,w
 17447  19DD  00F3               	movwf	??i1_ReadFlash_2Byte
 17448  19DE  36F4               	lsrf	??i1_ReadFlash_2Byte+1,f
 17449  19DF  0CF3               	rrf	??i1_ReadFlash_2Byte,f
 17450  19E0  36F4               	lsrf	??i1_ReadFlash_2Byte+1,f
 17451  19E1  0CF3               	rrf	??i1_ReadFlash_2Byte,f
 17452  19E2  36F4               	lsrf	??i1_ReadFlash_2Byte+1,f
 17453  19E3  0CF3               	rrf	??i1_ReadFlash_2Byte,f
 17454  19E4  0873               	movf	??i1_ReadFlash_2Byte,w
 17455  19E5  397F               	andlw	127
 17456  19E6  0092               	movwf	18	;volatile
 17457                           
 17458                           ;FLASH.c: 47: PMADRL = (unsigned char)(((row & 0x007) << 5) + column);
 17459  19E7  0870               	movf	i1ReadFlash_2Byte@row,w
 17460  19E8  3907               	andlw	7
 17461  19E9  00F3               	movwf	??i1_ReadFlash_2Byte
 17462  19EA  3004               	movlw	4
 17463  19EB                     u399_25:	
 17464  19EB  35F3               	lslf	??i1_ReadFlash_2Byte,f
 17465  19EC  3EFF               	addlw	-1
 17466  19ED  1D03               	skipz
 17467  19EE  29EB               	goto	u399_25
 17468  19EF  3573               	lslf	??i1_ReadFlash_2Byte,w
 17469  19F0  0772               	addwf	i1ReadFlash_2Byte@column,w
 17470  19F1  0091               	movwf	17	;volatile
 17471                           
 17472                           ;FLASH.c: 48: PMCON1 |= 0b00000001;
 17473  19F2  1415               	bsf	21,0	;volatile
 17474  19F3                     i1l943:	
 17475                           ;FLASH.c: 49: while(PMCON1 & 0b00000001);
 17476                           
 17477  19F3  1815               	btfsc	21,0	;volatile
 17478  19F4  29F3               	goto	i1l943
 17479                           
 17480                           ;FLASH.c: 50: __nop();
 17481  19F5  0000               	nop
 17482                           
 17483                           ;FLASH.c: 51: __nop();
 17484  19F6  0000               	nop
 17485                           
 17486                           ;FLASH.c: 52: return (PMDATL | (PMDATH << 8));
 17487  19F7  0023               	movlb	3	; select bank3
 17488  19F8  0814               	movf	20,w	;volatile
 17489  19F9  01F1               	clrf	?i1_ReadFlash_2Byte+1
 17490  19FA  07F1               	addwf	?i1_ReadFlash_2Byte+1,f
 17491  19FB  0813               	movf	19,w	;volatile
 17492  19FC  01F0               	clrf	?i1_ReadFlash_2Byte
 17493  19FD  07F0               	addwf	?i1_ReadFlash_2Byte,f
 17494  19FE  0008               	return
 17495  19FF                     __end_ofi1_ReadFlash_2Byte:	
 17496                           
 17497                           	psect	text69
 17498  19FF                     __ptext69:	
 17499 ;; *************** function _BlockErase *****************
 17500 ;; Defined at:
 17501 ;;		line 91 in file "FLASH.c"
 17502 ;; Parameters:    Size  Location     Type
 17503 ;;  row             2    0[COMMON] unsigned int 
 17504 ;; Auto vars:     Size  Location     Type
 17505 ;;		None
 17506 ;; Return value:  Size  Location     Type
 17507 ;;		None               void
 17508 ;; Registers used:
 17509 ;;		wreg, status,2, status,0, pclath, cstack
 17510 ;; Tracked objects:
 17511 ;;		On entry : 0/0
 17512 ;;		On exit  : 0/0
 17513 ;;		Unchanged: 0/0
 17514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17515 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17517 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17518 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17519 ;;Total ram usage:        4 bytes
 17520 ;; Hardware stack levels used:    1
 17521 ;; Hardware stack levels required when called:    1
 17522 ;; This function calls:
 17523 ;;		_UNLOCK
 17524 ;; This function is called by:
 17525 ;;		_WriteFlash_Sequential
 17526 ;; This function uses a non-reentrant model
 17527 ;;
 17528                           
 17529                           
 17530                           ;psect for function _BlockErase
 17531  19FF                     _BlockErase:	
 17532                           
 17533                           ;FLASH.c: 93: INTCON &= ~0x80;
 17534                           
 17535                           ;incstack = 0
 17536                           ; Regs used in _BlockErase: [wreg+status,2+status,0+pclath+cstack]
 17537  19FF  307F               	movlw	127
 17538  1A00  00F2               	movwf	??_BlockErase
 17539  1A01  0872               	movf	??_BlockErase,w
 17540  1A02  058B               	andwf	11,f	;volatile
 17541                           
 17542                           ;FLASH.c: 94: PMCON1 &= ~0b01000000;
 17543  1A03  30BF               	movlw	191
 17544  1A04  00F2               	movwf	??_BlockErase
 17545  1A05  0872               	movf	??_BlockErase,w
 17546  1A06  0023               	movlb	3	; select bank3
 17547  1A07  0595               	andwf	21,f	;volatile
 17548                           
 17549                           ;FLASH.c: 95: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 17550  1A08  0871               	movf	BlockErase@row+1,w
 17551  1A09  00F3               	movwf	??_BlockErase+1
 17552  1A0A  0870               	movf	BlockErase@row,w
 17553  1A0B  00F2               	movwf	??_BlockErase
 17554  1A0C  36F3               	lsrf	??_BlockErase+1,f
 17555  1A0D  0CF2               	rrf	??_BlockErase,f
 17556  1A0E  36F3               	lsrf	??_BlockErase+1,f
 17557  1A0F  0CF2               	rrf	??_BlockErase,f
 17558  1A10  36F3               	lsrf	??_BlockErase+1,f
 17559  1A11  0CF2               	rrf	??_BlockErase,f
 17560  1A12  0872               	movf	??_BlockErase,w
 17561  1A13  397F               	andlw	127
 17562  1A14  0092               	movwf	18	;volatile
 17563                           
 17564                           ;FLASH.c: 96: PMADRL = (unsigned char)((row & 0x007) << 5);
 17565  1A15  0870               	movf	BlockErase@row,w
 17566  1A16  3907               	andlw	7
 17567  1A17  00F2               	movwf	??_BlockErase
 17568  1A18  3004               	movlw	4
 17569  1A19                     u388_25:	
 17570  1A19  35F2               	lslf	??_BlockErase,f
 17571  1A1A  3EFF               	addlw	-1
 17572  1A1B  1D03               	skipz
 17573  1A1C  2A19               	goto	u388_25
 17574  1A1D  3572               	lslf	??_BlockErase,w
 17575  1A1E  0091               	movwf	17	;volatile
 17576                           
 17577                           ;FLASH.c: 97: PMCON1 |= 0b00010000;
 17578  1A1F  1615               	bsf	21,4	;volatile
 17579                           
 17580                           ;FLASH.c: 98: PMCON1 |= 0b00000100;
 17581  1A20  1515               	bsf	21,2	;volatile
 17582                           
 17583                           ;FLASH.c: 99: UNLOCK();
 17584  1A21  3198  207B         	fcall	_UNLOCK
 17585                           
 17586                           ;FLASH.c: 100: PMCON1 &= ~0b00000100;
 17587  1A23  30FB               	movlw	251
 17588  1A24  00F2               	movwf	??_BlockErase
 17589  1A25  0872               	movf	??_BlockErase,w
 17590  1A26  0023               	movlb	3	; select bank3
 17591  1A27  0595               	andwf	21,f	;volatile
 17592                           
 17593                           ;FLASH.c: 101: INTCON |= 0x80;
 17594  1A28  178B               	bsf	11,7	;volatile
 17595  1A29  0008               	return
 17596  1A2A                     __end_of_BlockErase:	
 17597                           
 17598                           	psect	text70
 17599  187B                     __ptext70:	
 17600 ;; *************** function _UNLOCK *****************
 17601 ;; Defined at:
 17602 ;;		line 76 in file "FLASH.c"
 17603 ;; Parameters:    Size  Location     Type
 17604 ;;		None
 17605 ;; Auto vars:     Size  Location     Type
 17606 ;;		None
 17607 ;; Return value:  Size  Location     Type
 17608 ;;		None               void
 17609 ;; Registers used:
 17610 ;;		wreg
 17611 ;; Tracked objects:
 17612 ;;		On entry : 0/0
 17613 ;;		On exit  : 0/0
 17614 ;;		Unchanged: 0/0
 17615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17620 ;;Total ram usage:        0 bytes
 17621 ;; Hardware stack levels used:    1
 17622 ;; This function calls:
 17623 ;;		Nothing
 17624 ;; This function is called by:
 17625 ;;		_BlockErase
 17626 ;;		_WriteFlash_Sequential
 17627 ;; This function uses a non-reentrant model
 17628 ;;
 17629                           
 17630                           
 17631                           ;psect for function _UNLOCK
 17632  187B                     _UNLOCK:	
 17633                           
 17634                           ;FLASH.c: 78: PMCON2 = 0x55;
 17635                           
 17636                           ;incstack = 0
 17637                           ; Regs used in _UNLOCK: [wreg]
 17638  187B  3055               	movlw	85
 17639  187C  0023               	movlb	3	; select bank3
 17640  187D  0096               	movwf	22	;volatile
 17641                           
 17642                           ;FLASH.c: 79: PMCON2 = 0xAA;
 17643  187E  30AA               	movlw	170
 17644  187F  0096               	movwf	22	;volatile
 17645                           
 17646                           ;FLASH.c: 80: PMCON1 |= 0b00000010;
 17647  1880  1495               	bsf	21,1	;volatile
 17648  1881                     i1l952:	
 17649                           ;FLASH.c: 81: while(PMCON1 & 0b00000010);
 17650                           
 17651  1881  1895               	btfsc	21,1	;volatile
 17652  1882  2881               	goto	i1l952
 17653                           
 17654                           ;FLASH.c: 82: __nop();
 17655  1883  0000               	nop
 17656                           
 17657                           ;FLASH.c: 83: __nop();
 17658  1884  0000               	nop
 17659  1885  0008               	return
 17660  1886                     __end_of_UNLOCK:	
 17661                           
 17662                           	psect	text71
 17663  18BF                     __ptext71:	
 17664 ;; *************** function _ISNUMBER *****************
 17665 ;; Defined at:
 17666 ;;		line 127 in file "MISC.c"
 17667 ;; Parameters:    Size  Location     Type
 17668 ;;  ascii           1    wreg     unsigned char 
 17669 ;; Auto vars:     Size  Location     Type
 17670 ;;  ascii           1    0[COMMON] unsigned char 
 17671 ;; Return value:  Size  Location     Type
 17672 ;;                  1    wreg      unsigned char 
 17673 ;; Registers used:
 17674 ;;		wreg
 17675 ;; Tracked objects:
 17676 ;;		On entry : 0/0
 17677 ;;		On exit  : 0/0
 17678 ;;		Unchanged: 0/0
 17679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17681 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17683 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17684 ;;Total ram usage:        1 bytes
 17685 ;; Hardware stack levels used:    1
 17686 ;; This function calls:
 17687 ;;		Nothing
 17688 ;; This function is called by:
 17689 ;;		_Process_PS2_ScanCode
 17690 ;; This function uses a non-reentrant model
 17691 ;;
 17692                           
 17693                           
 17694                           ;psect for function _ISNUMBER
 17695  18BF                     _ISNUMBER:	
 17696                           
 17697                           ;incstack = 0
 17698                           ; Regs used in _ISNUMBER: [wreg]
 17699                           ;ISNUMBER@ascii stored from wreg
 17700  18BF  00F0               	movwf	ISNUMBER@ascii
 17701                           
 17702                           ;MISC.c: 129: if(ascii >= '0' && ascii <='9')
 17703  18C0  3030               	movlw	48
 17704  18C1  0270               	subwf	ISNUMBER@ascii,w
 17705  18C2  1C03               	skipc
 17706  18C3  28CA               	goto	i1l4786
 17707  18C4  303A               	movlw	58
 17708  18C5  0270               	subwf	ISNUMBER@ascii,w
 17709  18C6  1803               	skipnc
 17710  18C7  28CA               	goto	i1l4786
 17711                           
 17712                           ;MISC.c: 130: {
 17713                           ;MISC.c: 131: return 1;
 17714  18C8  3001               	movlw	1
 17715                           
 17716                           ;MISC.c: 132: }
 17717  18C9  0008               	return
 17718  18CA                     i1l4786:	
 17719                           
 17720                           ;MISC.c: 133: else
 17721                           ;MISC.c: 134: {
 17722                           ;MISC.c: 135: return 0;
 17723  18CA  3000               	movlw	0
 17724  18CB  0008               	return
 17725  18CC                     __end_of_ISNUMBER:	
 17726                           
 17727                           	psect	text72
 17728  192E                     __ptext72:	
 17729 ;; *************** function _Decode_Scan_Code_Shift *****************
 17730 ;; Defined at:
 17731 ;;		line 775 in file "PS_2.c"
 17732 ;; Parameters:    Size  Location     Type
 17733 ;;  Code            1    wreg     unsigned char 
 17734 ;; Auto vars:     Size  Location     Type
 17735 ;;  Code            1    0[COMMON] unsigned char 
 17736 ;; Return value:  Size  Location     Type
 17737 ;;                  1    wreg      unsigned char 
 17738 ;; Registers used:
 17739 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 17740 ;; Tracked objects:
 17741 ;;		On entry : 0/0
 17742 ;;		On exit  : 0/0
 17743 ;;		Unchanged: 0/0
 17744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17746 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17748 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17749 ;;Total ram usage:        1 bytes
 17750 ;; Hardware stack levels used:    1
 17751 ;; This function calls:
 17752 ;;		Nothing
 17753 ;; This function is called by:
 17754 ;;		_Process_PS2_ScanCode
 17755 ;; This function uses a non-reentrant model
 17756 ;;
 17757                           
 17758                           
 17759                           ;psect for function _Decode_Scan_Code_Shift
 17760  192E                     _Decode_Scan_Code_Shift:	
 17761                           
 17762                           ;incstack = 0
 17763                           ; Regs used in _Decode_Scan_Code_Shift: [wreg-fsr0h+status,2+status,0+pclath]
 17764                           ;Decode_Scan_Code_Shift@Code stored from wreg
 17765  192E  00F0               	movwf	Decode_Scan_Code_Shift@Code
 17766                           
 17767                           ;PS_2.c: 777: Code -= 13;
 17768  192F  300D               	movlw	13
 17769  1930  02F0               	subwf	Decode_Scan_Code_Shift@Code,f
 17770                           
 17771                           ;PS_2.c: 778: if(Code <=112)
 17772  1931  3071               	movlw	113
 17773  1932  0270               	subwf	Decode_Scan_Code_Shift@Code,w
 17774  1933  1803               	skipnc
 17775  1934  293E               	goto	i1l4950
 17776                           
 17777                           ;PS_2.c: 779: {
 17778                           ;PS_2.c: 780: return ScanCodeSHIFT[Code];
 17779  1935  0870               	movf	Decode_Scan_Code_Shift@Code,w
 17780  1936  3EF5               	addlw	low (_ScanCodeSHIFT| (0+32768))
 17781  1937  0084               	movwf	4
 17782  1938  3087               	movlw	high (_ScanCodeSHIFT| (0+32768))
 17783  1939  1803               	skipnc
 17784  193A  3E01               	addlw	1
 17785  193B  0085               	movwf	5
 17786  193C  0800               	movf	0,w	;code access
 17787                           
 17788                           ;PS_2.c: 781: }
 17789  193D  0008               	return
 17790  193E                     i1l4950:	
 17791                           
 17792                           ;PS_2.c: 782: else
 17793                           ;PS_2.c: 783: {
 17794                           ;PS_2.c: 784: return 0;
 17795  193E  3000               	movlw	0
 17796  193F  0008               	return
 17797  1940                     __end_of_Decode_Scan_Code_Shift:	
 17798                           
 17799                           	psect	text73
 17800  191C                     __ptext73:	
 17801 ;; *************** function _Decode_Scan_Code_FunctionE0 *****************
 17802 ;; Defined at:
 17803 ;;		line 794 in file "PS_2.c"
 17804 ;; Parameters:    Size  Location     Type
 17805 ;;  Code            1    wreg     unsigned char 
 17806 ;; Auto vars:     Size  Location     Type
 17807 ;;  Code            1    0[COMMON] unsigned char 
 17808 ;; Return value:  Size  Location     Type
 17809 ;;                  1    wreg      unsigned char 
 17810 ;; Registers used:
 17811 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 17812 ;; Tracked objects:
 17813 ;;		On entry : 0/0
 17814 ;;		On exit  : 0/0
 17815 ;;		Unchanged: 0/0
 17816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17818 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17820 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17821 ;;Total ram usage:        1 bytes
 17822 ;; Hardware stack levels used:    1
 17823 ;; This function calls:
 17824 ;;		Nothing
 17825 ;; This function is called by:
 17826 ;;		_Process_PS2_ScanCode
 17827 ;; This function uses a non-reentrant model
 17828 ;;
 17829                           
 17830                           
 17831                           ;psect for function _Decode_Scan_Code_FunctionE0
 17832  191C                     _Decode_Scan_Code_FunctionE0:	
 17833                           
 17834                           ;incstack = 0
 17835                           ; Regs used in _Decode_Scan_Code_FunctionE0: [wreg-fsr0h+status,2+status,0+pclath]
 17836                           ;Decode_Scan_Code_FunctionE0@Code stored from wreg
 17837  191C  00F0               	movwf	Decode_Scan_Code_FunctionE0@Code
 17838                           
 17839                           ;PS_2.c: 796: Code -= 17;
 17840  191D  3011               	movlw	17
 17841  191E  02F0               	subwf	Decode_Scan_Code_FunctionE0@Code,f
 17842                           
 17843                           ;PS_2.c: 797: if(Code <=108)
 17844  191F  306D               	movlw	109
 17845  1920  0270               	subwf	Decode_Scan_Code_FunctionE0@Code,w
 17846  1921  1803               	skipnc
 17847  1922  292C               	goto	i1l4938
 17848                           
 17849                           ;PS_2.c: 798: {
 17850                           ;PS_2.c: 799: return ScanCodeFunctionE0[Code];
 17851  1923  0870               	movf	Decode_Scan_Code_FunctionE0@Code,w
 17852  1924  3E66               	addlw	low (_ScanCodeFunctionE0| (0+32768))
 17853  1925  0084               	movwf	4
 17854  1926  3088               	movlw	high (_ScanCodeFunctionE0| (0+32768))
 17855  1927  1803               	skipnc
 17856  1928  3E01               	addlw	1
 17857  1929  0085               	movwf	5
 17858  192A  0800               	movf	0,w	;code access
 17859                           
 17860                           ;PS_2.c: 800: }
 17861  192B  0008               	return
 17862  192C                     i1l4938:	
 17863                           
 17864                           ;PS_2.c: 801: else
 17865                           ;PS_2.c: 802: {
 17866                           ;PS_2.c: 803: return 0;
 17867  192C  3000               	movlw	0
 17868  192D  0008               	return
 17869  192E                     __end_of_Decode_Scan_Code_FunctionE0:	
 17870                           
 17871                           	psect	text74
 17872  18E9                     __ptext74:	
 17873 ;; *************** function _Decode_Scan_Code_Function *****************
 17874 ;; Defined at:
 17875 ;;		line 813 in file "PS_2.c"
 17876 ;; Parameters:    Size  Location     Type
 17877 ;;  Code            1    wreg     unsigned char 
 17878 ;; Auto vars:     Size  Location     Type
 17879 ;;  Code            1    0[COMMON] unsigned char 
 17880 ;; Return value:  Size  Location     Type
 17881 ;;                  1    wreg      unsigned char 
 17882 ;; Registers used:
 17883 ;;		wreg, fsr0l, fsr0h, pclath
 17884 ;; Tracked objects:
 17885 ;;		On entry : 0/0
 17886 ;;		On exit  : 0/0
 17887 ;;		Unchanged: 0/0
 17888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17890 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17892 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17893 ;;Total ram usage:        1 bytes
 17894 ;; Hardware stack levels used:    1
 17895 ;; This function calls:
 17896 ;;		Nothing
 17897 ;; This function is called by:
 17898 ;;		_Process_PS2_ScanCode
 17899 ;; This function uses a non-reentrant model
 17900 ;;
 17901                           
 17902                           
 17903                           ;psect for function _Decode_Scan_Code_Function
 17904  18E9                     _Decode_Scan_Code_Function:	
 17905                           
 17906                           ;incstack = 0
 17907                           ; Regs used in _Decode_Scan_Code_Function: [wreg-fsr0h+pclath]
 17908                           ;Decode_Scan_Code_Function@Code stored from wreg
 17909  18E9  00F0               	movwf	Decode_Scan_Code_Function@Code
 17910                           
 17911                           ;PS_2.c: 815: if(Code <=131)
 17912  18EA  3084               	movlw	132
 17913  18EB  0270               	subwf	Decode_Scan_Code_Function@Code,w
 17914  18EC  1803               	skipnc
 17915  18ED  28F7               	goto	i1l4974
 17916                           
 17917                           ;PS_2.c: 816: {
 17918                           ;PS_2.c: 817: return ScanCodeFunctionNoE0[Code];
 17919  18EE  0870               	movf	Decode_Scan_Code_Function@Code,w
 17920  18EF  3E00               	addlw	low (_ScanCodeFunctionNoE0| (0+32768))
 17921  18F0  0084               	movwf	4
 17922  18F1  3087               	movlw	high (_ScanCodeFunctionNoE0| (0+32768))
 17923  18F2  1803               	skipnc
 17924  18F3  3E01               	addlw	1
 17925  18F4  0085               	movwf	5
 17926  18F5  0800               	movf	0,w	;code access
 17927                           
 17928                           ;PS_2.c: 818: }
 17929  18F6  0008               	return
 17930  18F7                     i1l4974:	
 17931                           
 17932                           ;PS_2.c: 819: else
 17933                           ;PS_2.c: 820: {
 17934                           ;PS_2.c: 821: return 0;
 17935  18F7  3000               	movlw	0
 17936  18F8  0008               	return
 17937  18F9                     __end_of_Decode_Scan_Code_Function:	
 17938                           
 17939                           	psect	text75
 17940  190A                     __ptext75:	
 17941 ;; *************** function _Decode_Scan_Code *****************
 17942 ;; Defined at:
 17943 ;;		line 756 in file "PS_2.c"
 17944 ;; Parameters:    Size  Location     Type
 17945 ;;  Code            1    wreg     unsigned char 
 17946 ;; Auto vars:     Size  Location     Type
 17947 ;;  Code            1    0[COMMON] unsigned char 
 17948 ;; Return value:  Size  Location     Type
 17949 ;;                  1    wreg      unsigned char 
 17950 ;; Registers used:
 17951 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 17952 ;; Tracked objects:
 17953 ;;		On entry : 0/0
 17954 ;;		On exit  : 0/0
 17955 ;;		Unchanged: 0/0
 17956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17958 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17960 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17961 ;;Total ram usage:        1 bytes
 17962 ;; Hardware stack levels used:    1
 17963 ;; This function calls:
 17964 ;;		Nothing
 17965 ;; This function is called by:
 17966 ;;		_Process_PS2_ScanCode
 17967 ;; This function uses a non-reentrant model
 17968 ;;
 17969                           
 17970                           
 17971                           ;psect for function _Decode_Scan_Code
 17972  190A                     _Decode_Scan_Code:	
 17973                           
 17974                           ;incstack = 0
 17975                           ; Regs used in _Decode_Scan_Code: [wreg-fsr0h+status,2+status,0+pclath]
 17976                           ;Decode_Scan_Code@Code stored from wreg
 17977  190A  00F0               	movwf	Decode_Scan_Code@Code
 17978                           
 17979                           ;PS_2.c: 758: Code -= 13;
 17980  190B  300D               	movlw	13
 17981  190C  02F0               	subwf	Decode_Scan_Code@Code,f
 17982                           
 17983                           ;PS_2.c: 759: if(Code <=112)
 17984  190D  3071               	movlw	113
 17985  190E  0270               	subwf	Decode_Scan_Code@Code,w
 17986  190F  1803               	skipnc
 17987  1910  291A               	goto	i1l4962
 17988                           
 17989                           ;PS_2.c: 760: {
 17990                           ;PS_2.c: 761: return ScanCode[Code];
 17991  1911  0870               	movf	Decode_Scan_Code@Code,w
 17992  1912  3E84               	addlw	low (_ScanCode| (0+32768))
 17993  1913  0084               	movwf	4
 17994  1914  3087               	movlw	high (_ScanCode| (0+32768))
 17995  1915  1803               	skipnc
 17996  1916  3E01               	addlw	1
 17997  1917  0085               	movwf	5
 17998  1918  0800               	movf	0,w	;code access
 17999                           
 18000                           ;PS_2.c: 762: }
 18001  1919  0008               	return
 18002  191A                     i1l4962:	
 18003                           
 18004                           ;PS_2.c: 763: else
 18005                           ;PS_2.c: 764: {
 18006                           ;PS_2.c: 765: return 0;
 18007  191A  3000               	movlw	0
 18008  191B  0008               	return
 18009  191C                     __end_of_Decode_Scan_Code:	
 18010                           
 18011                           	psect	text76
 18012  1C4C                     __ptext76:	
 18013 ;; *************** function _BufferShiftBack *****************
 18014 ;; Defined at:
 18015 ;;		line 175 in file "MISC.c"
 18016 ;; Parameters:    Size  Location     Type
 18017 ;;  buffer          1    wreg     PTR unsigned char 
 18018 ;;		 -> PS_2_ScanCodes(12), 
 18019 ;;  shift           1    0[COMMON] unsigned char 
 18020 ;;  size            1    1[COMMON] unsigned char 
 18021 ;; Auto vars:     Size  Location     Type
 18022 ;;  buffer          1    7[COMMON] PTR unsigned char 
 18023 ;;		 -> PS_2_ScanCodes(12), 
 18024 ;;  i               1    6[COMMON] unsigned char 
 18025 ;; Return value:  Size  Location     Type
 18026 ;;                  1    wreg      unsigned char 
 18027 ;; Registers used:
 18028 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18029 ;; Tracked objects:
 18030 ;;		On entry : 0/0
 18031 ;;		On exit  : 0/0
 18032 ;;		Unchanged: 0/0
 18033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18034 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18035 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18036 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18037 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18038 ;;Total ram usage:        8 bytes
 18039 ;; Hardware stack levels used:    1
 18040 ;; This function calls:
 18041 ;;		Nothing
 18042 ;; This function is called by:
 18043 ;;		_Process_PS2_ScanCode
 18044 ;; This function uses a non-reentrant model
 18045 ;;
 18046                           
 18047                           
 18048                           ;psect for function _BufferShiftBack
 18049  1C4C                     _BufferShiftBack:	
 18050                           
 18051                           ;incstack = 0
 18052                           ; Regs used in _BufferShiftBack: [wreg+fsr1l+fsr1h+status,2+status,0]
 18053                           ;BufferShiftBack@buffer stored from wreg
 18054  1C4C  00F7               	movwf	BufferShiftBack@buffer
 18055                           
 18056                           ;MISC.c: 177: unsigned char i=0;
 18057  1C4D  01F6               	clrf	BufferShiftBack@i
 18058                           
 18059                           ;MISC.c: 178: if(shift > size)
 18060  1C4E  0870               	movf	BufferShiftBack@shift,w
 18061  1C4F  0271               	subwf	BufferShiftBack@size,w
 18062  1C50  1C03               	btfss	3,0
 18063  1C51  0008               	return
 18064                           
 18065                           ;MISC.c: 181: }
 18066                           ;MISC.c: 182: for(i = 0; i < size; i++)
 18067                           
 18068                           ;MISC.c: 179: {
 18069                           ;MISC.c: 180: return 0;
 18070                           ;	Return value of _BufferShiftBack is never used
 18071  1C52  01F6               	clrf	BufferShiftBack@i
 18072  1C53                     i1l4814:	
 18073  1C53  0871               	movf	BufferShiftBack@size,w
 18074  1C54  0276               	subwf	BufferShiftBack@i,w
 18075  1C55  1803               	btfsc	3,0
 18076  1C56  0008               	return
 18077                           
 18078                           ;MISC.c: 183: {
 18079                           ;MISC.c: 184: if(i < (size - shift))
 18080  1C57  0870               	movf	BufferShiftBack@shift,w
 18081  1C58  00F2               	movwf	??_BufferShiftBack
 18082  1C59  01F3               	clrf	??_BufferShiftBack+1
 18083  1C5A  09F2               	comf	??_BufferShiftBack,f
 18084  1C5B  09F3               	comf	??_BufferShiftBack+1,f
 18085  1C5C  0AF2               	incf	??_BufferShiftBack,f
 18086  1C5D  1903               	skipnz
 18087  1C5E  0AF3               	incf	??_BufferShiftBack+1,f
 18088  1C5F  0871               	movf	BufferShiftBack@size,w
 18089  1C60  0772               	addwf	??_BufferShiftBack,w
 18090  1C61  00F4               	movwf	??_BufferShiftBack+2
 18091  1C62  0873               	movf	??_BufferShiftBack+1,w
 18092  1C63  1803               	skipnc
 18093  1C64  0A73               	incf	??_BufferShiftBack+1,w
 18094  1C65  00F5               	movwf	??_BufferShiftBack+3
 18095  1C66  0875               	movf	??_BufferShiftBack+3,w
 18096  1C67  3A80               	xorlw	128
 18097  1C68  3C80               	sublw	128
 18098  1C69  1D03               	skipz
 18099  1C6A  2C6D               	goto	u544_25
 18100  1C6B  0874               	movf	??_BufferShiftBack+2,w
 18101  1C6C  0276               	subwf	BufferShiftBack@i,w
 18102  1C6D                     u544_25:	
 18103  1C6D  1803               	skipnc
 18104  1C6E  2C81               	goto	i1l4810
 18105                           
 18106                           ;MISC.c: 185: {
 18107                           ;MISC.c: 186: buffer[i] = buffer[i+shift];
 18108  1C6F  0876               	movf	BufferShiftBack@i,w
 18109  1C70  0770               	addwf	BufferShiftBack@shift,w
 18110  1C71  0777               	addwf	BufferShiftBack@buffer,w
 18111  1C72  00F2               	movwf	??_BufferShiftBack
 18112  1C73  0872               	movf	??_BufferShiftBack,w
 18113  1C74  0086               	movwf	6
 18114  1C75  0187               	clrf	7
 18115  1C76  0801               	movf	1,w
 18116  1C77  00F3               	movwf	??_BufferShiftBack+1
 18117  1C78  0876               	movf	BufferShiftBack@i,w
 18118  1C79  0777               	addwf	BufferShiftBack@buffer,w
 18119  1C7A  00F4               	movwf	??_BufferShiftBack+2
 18120  1C7B  0874               	movf	??_BufferShiftBack+2,w
 18121  1C7C  0086               	movwf	6
 18122  1C7D  0187               	clrf	7
 18123  1C7E  0873               	movf	??_BufferShiftBack+1,w
 18124  1C7F  0081               	movwf	1
 18125                           
 18126                           ;MISC.c: 187: }
 18127  1C80  2C88               	goto	i1l4812
 18128  1C81                     i1l4810:	
 18129                           
 18130                           ;MISC.c: 188: else
 18131                           ;MISC.c: 189: {
 18132                           ;MISC.c: 190: buffer[i] = 0;
 18133  1C81  0876               	movf	BufferShiftBack@i,w
 18134  1C82  0777               	addwf	BufferShiftBack@buffer,w
 18135  1C83  00F2               	movwf	??_BufferShiftBack
 18136  1C84  0872               	movf	??_BufferShiftBack,w
 18137  1C85  0086               	movwf	6
 18138  1C86  0187               	clrf	7
 18139  1C87  0181               	clrf	1
 18140  1C88                     i1l4812:	
 18141  1C88  3001               	movlw	1
 18142  1C89  00F2               	movwf	??_BufferShiftBack
 18143  1C8A  0872               	movf	??_BufferShiftBack,w
 18144  1C8B  07F6               	addwf	BufferShiftBack@i,f
 18145  1C8C  2C53               	goto	i1l4814
 18146  1C8D                     __end_of_BufferShiftBack:	
 18147                           ;MISC.c: 191: }
 18148                           ;MISC.c: 192: }
 18149                           ;MISC.c: 193: return 1;
 18150                           ;	Return value of _BufferShiftBack is never used
 18151                           
 18152                           
 18153                           	psect	text77
 18154  1D55                     __ptext77:	
 18155 ;; *************** function _PS2RawToScan *****************
 18156 ;; Defined at:
 18157 ;;		line 1089 in file "PS_2.c"
 18158 ;; Parameters:    Size  Location     Type
 18159 ;;  Raw             2    8[COMMON] unsigned int 
 18160 ;; Auto vars:     Size  Location     Type
 18161 ;;  temp            2   10[COMMON] unsigned int 
 18162 ;; Return value:  Size  Location     Type
 18163 ;;                  2    8[COMMON] unsigned int 
 18164 ;; Registers used:
 18165 ;;		wreg, status,2, status,0, pclath, cstack
 18166 ;; Tracked objects:
 18167 ;;		On entry : 0/0
 18168 ;;		On exit  : 0/0
 18169 ;;		Unchanged: 0/0
 18170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18171 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18172 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18173 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18174 ;;      Totals:         4       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18175 ;;Total ram usage:       13 bytes
 18176 ;; Hardware stack levels used:    1
 18177 ;; Hardware stack levels required when called:    1
 18178 ;; This function calls:
 18179 ;;		_Reverse_Byte
 18180 ;;		i1_CheckSum_byte
 18181 ;; This function is called by:
 18182 ;;		_isr
 18183 ;; This function uses a non-reentrant model
 18184 ;;
 18185                           
 18186                           
 18187                           ;psect for function _PS2RawToScan
 18188  1D55                     _PS2RawToScan:	
 18189                           
 18190                           ;PS_2.c: 1091: unsigned int temp;
 18191                           ;PS_2.c: 1093: if(CheckSum_byte((Raw >> 2) & 0xFF , 3) == ((Raw & 0x02)>> 1))
 18192                           
 18193                           ;incstack = 0
 18194                           ; Regs used in _PS2RawToScan: [wreg+status,2+status,0+pclath+cstack]
 18195  1D55  0879               	movf	PS2RawToScan@Raw+1,w
 18196  1D56  0020               	movlb	0	; select bank0
 18197  1D57  00A1               	movwf	??_PS2RawToScan+1
 18198  1D58  0878               	movf	PS2RawToScan@Raw,w
 18199  1D59  00A0               	movwf	??_PS2RawToScan
 18200  1D5A  36A1               	lsrf	??_PS2RawToScan+1,f
 18201  1D5B  0CA0               	rrf	??_PS2RawToScan,f
 18202  1D5C  3001               	movlw	1
 18203  1D5D  0520               	andwf	??_PS2RawToScan,w
 18204  1D5E  00A2               	movwf	??_PS2RawToScan+2
 18205  1D5F  3000               	movlw	0
 18206  1D60  0521               	andwf	??_PS2RawToScan+1,w
 18207  1D61  00A3               	movwf	??_PS2RawToScan+3
 18208  1D62  0879               	movf	PS2RawToScan@Raw+1,w
 18209  1D63  00A5               	movwf	??_PS2RawToScan+5
 18210  1D64  0878               	movf	PS2RawToScan@Raw,w
 18211  1D65  00A4               	movwf	??_PS2RawToScan+4
 18212  1D66  36A5               	lsrf	??_PS2RawToScan+5,f
 18213  1D67  0CA4               	rrf	??_PS2RawToScan+4,f
 18214  1D68  36A5               	lsrf	??_PS2RawToScan+5,f
 18215  1D69  0CA4               	rrf	??_PS2RawToScan+4,f
 18216  1D6A  30FF               	movlw	255
 18217  1D6B  0524               	andwf	??_PS2RawToScan+4,w
 18218  1D6C  00F0               	movwf	i1CheckSum_byte@This
 18219  1D6D  3000               	movlw	0
 18220  1D6E  0525               	andwf	??_PS2RawToScan+5,w
 18221  1D6F  00F1               	movwf	i1CheckSum_byte@This+1
 18222  1D70  3003               	movlw	3
 18223  1D71  00A6               	movwf	??_PS2RawToScan+6
 18224  1D72  0826               	movf	??_PS2RawToScan+6,w
 18225  1D73  00F2               	movwf	i1CheckSum_byte@Odd_Even
 18226  1D74  319A  22B0  319D   	fcall	i1_CheckSum_byte
 18227  1D77  0020               	movlb	0	; select bank0
 18228  1D78  00A7               	movwf	??_PS2RawToScan+7
 18229  1D79  01A8               	clrf	??_PS2RawToScan+8
 18230  1D7A  0823               	movf	??_PS2RawToScan+3,w
 18231  1D7B  0628               	xorwf	??_PS2RawToScan+8,w
 18232  1D7C  1D03               	skipz
 18233  1D7D  2D80               	goto	u615_25
 18234  1D7E  0822               	movf	??_PS2RawToScan+2,w
 18235  1D7F  0627               	xorwf	??_PS2RawToScan+7,w
 18236  1D80                     u615_25:	
 18237  1D80  1D03               	skipz
 18238  1D81  2D9C               	goto	i1l5274
 18239                           
 18240                           ;PS_2.c: 1094: {
 18241                           ;PS_2.c: 1096: temp = ((Raw >> 2) & 0xFF);
 18242  1D82  0879               	movf	PS2RawToScan@Raw+1,w
 18243  1D83  00A1               	movwf	??_PS2RawToScan+1
 18244  1D84  0878               	movf	PS2RawToScan@Raw,w
 18245  1D85  00A0               	movwf	??_PS2RawToScan
 18246  1D86  36A1               	lsrf	??_PS2RawToScan+1,f
 18247  1D87  0CA0               	rrf	??_PS2RawToScan,f
 18248  1D88  36A1               	lsrf	??_PS2RawToScan+1,f
 18249  1D89  0CA0               	rrf	??_PS2RawToScan,f
 18250  1D8A  30FF               	movlw	255
 18251  1D8B  0520               	andwf	??_PS2RawToScan,w
 18252  1D8C  00FA               	movwf	PS2RawToScan@temp
 18253  1D8D  3000               	movlw	0
 18254  1D8E  0521               	andwf	??_PS2RawToScan+1,w
 18255  1D8F  00FB               	movwf	PS2RawToScan@temp+1
 18256                           
 18257                           ;PS_2.c: 1097: temp = (unsigned int) Reverse_Byte((unsigned char) temp);
 18258  1D90  087A               	movf	PS2RawToScan@temp,w
 18259  1D91  319E  26EC  319D   	fcall	_Reverse_Byte
 18260  1D94  0020               	movlb	0	; select bank0
 18261  1D95  00A0               	movwf	??_PS2RawToScan
 18262  1D96  01A1               	clrf	??_PS2RawToScan+1
 18263  1D97  0820               	movf	??_PS2RawToScan,w
 18264  1D98  00FA               	movwf	PS2RawToScan@temp
 18265  1D99  0821               	movf	??_PS2RawToScan+1,w
 18266  1D9A  00FB               	movwf	PS2RawToScan@temp+1
 18267                           
 18268                           ;PS_2.c: 1099: }
 18269  1D9B  2D9E               	goto	i1l5276
 18270  1D9C                     i1l5274:	
 18271                           
 18272                           ;PS_2.c: 1100: else
 18273                           ;PS_2.c: 1101: {
 18274                           ;PS_2.c: 1103: temp = 0;
 18275  1D9C  01FA               	clrf	PS2RawToScan@temp
 18276  1D9D  01FB               	clrf	PS2RawToScan@temp+1
 18277  1D9E                     i1l5276:	
 18278                           
 18279                           ;PS_2.c: 1104: }
 18280                           ;PS_2.c: 1105: return temp;
 18281  1D9E  087B               	movf	PS2RawToScan@temp+1,w
 18282  1D9F  01F9               	clrf	?_PS2RawToScan+1
 18283  1DA0  07F9               	addwf	?_PS2RawToScan+1,f
 18284  1DA1  087A               	movf	PS2RawToScan@temp,w
 18285  1DA2  01F8               	clrf	?_PS2RawToScan
 18286  1DA3  07F8               	addwf	?_PS2RawToScan,f
 18287  1DA4  0008               	return
 18288  1DA5                     __end_of_PS2RawToScan:	
 18289                           
 18290                           	psect	text78
 18291  1AB0                     __ptext78:	
 18292 ;; *************** function i1_CheckSum_byte *****************
 18293 ;; Defined at:
 18294 ;;		line 69 in file "MISC.c"
 18295 ;; Parameters:    Size  Location     Type
 18296 ;;  This            2    0[COMMON] unsigned int 
 18297 ;;  Odd_Even        1    2[COMMON] unsigned char 
 18298 ;; Auto vars:     Size  Location     Type
 18299 ;;  CheckSum_byt    2    4[COMMON] unsigned int 
 18300 ;;  CheckSum_byt    1    7[COMMON] unsigned char 
 18301 ;;  CheckSum_byt    1    6[COMMON] unsigned char 
 18302 ;; Return value:  Size  Location     Type
 18303 ;;                  1    wreg      unsigned char 
 18304 ;; Registers used:
 18305 ;;		wreg, status,2, status,0
 18306 ;; Tracked objects:
 18307 ;;		On entry : 0/0
 18308 ;;		On exit  : 0/0
 18309 ;;		Unchanged: 0/0
 18310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18311 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18312 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18313 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18314 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18315 ;;Total ram usage:        8 bytes
 18316 ;; Hardware stack levels used:    1
 18317 ;; This function calls:
 18318 ;;		Nothing
 18319 ;; This function is called by:
 18320 ;;		_PS2RawToScan
 18321 ;;		i1_UARTchar
 18322 ;;		i1_Send_PS2
 18323 ;; This function uses a non-reentrant model
 18324 ;;
 18325                           
 18326                           
 18327                           ;psect for function i1_CheckSum_byte
 18328  1AB0                     i1_CheckSum_byte:	
 18329                           
 18330                           ;MISC.c: 71: char i = 0;
 18331                           
 18332                           ;incstack = 0
 18333                           ; Regs used in i1_CheckSum_byte: [wreg+status,2+status,0]
 18334  1AB0  01F7               	clrf	i1CheckSum_byte@i
 18335                           
 18336                           ;MISC.c: 72: unsigned char Parity = 0;
 18337  1AB1  01F6               	clrf	i1CheckSum_byte@Parity
 18338                           
 18339                           ;MISC.c: 73: unsigned int ThisTemp = This;
 18340  1AB2  0871               	movf	i1CheckSum_byte@This+1,w
 18341  1AB3  01F5               	clrf	i1CheckSum_byte@ThisTemp+1
 18342  1AB4  07F5               	addwf	i1CheckSum_byte@ThisTemp+1,f
 18343  1AB5  0870               	movf	i1CheckSum_byte@This,w
 18344  1AB6  01F4               	clrf	i1CheckSum_byte@ThisTemp
 18345  1AB7  07F4               	addwf	i1CheckSum_byte@ThisTemp,f
 18346                           
 18347                           ;MISC.c: 75: for (i =0; i<8; i++)
 18348  1AB8  01F7               	clrf	i1CheckSum_byte@i
 18349  1AB9  3008               	movlw	8
 18350  1ABA  0277               	subwf	i1CheckSum_byte@i,w
 18351  1ABB  1803               	btfsc	3,0
 18352  1ABC  2AD0               	goto	i1l3852
 18353  1ABD                     i1l290:	
 18354                           
 18355                           ;MISC.c: 76: {
 18356                           ;MISC.c: 77: if((ThisTemp & 0x01) == 1)
 18357  1ABD  1C74               	btfss	i1CheckSum_byte@ThisTemp,0
 18358  1ABE  2AC3               	goto	i1l292
 18359                           
 18360                           ;MISC.c: 78: {
 18361                           ;MISC.c: 79: Parity++;
 18362  1ABF  3001               	movlw	1
 18363  1AC0  00F3               	movwf	??i1_CheckSum_byte
 18364  1AC1  0873               	movf	??i1_CheckSum_byte,w
 18365  1AC2  07F6               	addwf	i1CheckSum_byte@Parity,f
 18366  1AC3                     i1l292:	
 18367                           
 18368                           ;MISC.c: 80: }
 18369                           ;MISC.c: 81: ThisTemp >>= 1;
 18370  1AC3  3001               	movlw	1
 18371  1AC4                     u394_25:	
 18372  1AC4  36F5               	lsrf	i1CheckSum_byte@ThisTemp+1,f
 18373  1AC5  0CF4               	rrf	i1CheckSum_byte@ThisTemp,f
 18374  1AC6  0B89               	decfsz	9,f
 18375  1AC7  2AC4               	goto	u394_25
 18376  1AC8  3001               	movlw	1
 18377  1AC9  00F3               	movwf	??i1_CheckSum_byte
 18378  1ACA  0873               	movf	??i1_CheckSum_byte,w
 18379  1ACB  07F7               	addwf	i1CheckSum_byte@i,f
 18380  1ACC  3008               	movlw	8
 18381  1ACD  0277               	subwf	i1CheckSum_byte@i,w
 18382  1ACE  1C03               	skipc
 18383  1ACF  2ABD               	goto	i1l290
 18384  1AD0                     i1l3852:	
 18385                           
 18386                           ;MISC.c: 82: }
 18387                           ;MISC.c: 83: if(Odd_Even == 3)
 18388  1AD0  0872               	movf	i1CheckSum_byte@Odd_Even,w
 18389  1AD1  3A03               	xorlw	3
 18390  1AD2  1D03               	skipz
 18391  1AD3  2ADA               	goto	i1l293
 18392                           
 18393                           ;MISC.c: 84: {
 18394                           ;MISC.c: 85: if(Parity % 2 == 0)
 18395  1AD4  1876               	btfsc	i1CheckSum_byte@Parity,0
 18396  1AD5  2AD8               	goto	i1l3860
 18397                           
 18398                           ;MISC.c: 86: {
 18399                           ;MISC.c: 87: return 1;
 18400  1AD6  3001               	movlw	1
 18401  1AD7  0008               	return
 18402  1AD8                     i1l3860:	
 18403                           
 18404                           ;MISC.c: 88: }
 18405                           ;MISC.c: 89: return 0;
 18406  1AD8  3000               	movlw	0
 18407                           
 18408                           ;MISC.c: 90: }
 18409  1AD9  0008               	return
 18410  1ADA                     i1l293:	
 18411                           
 18412                           ;MISC.c: 91: else
 18413                           ;MISC.c: 92: {
 18414                           ;MISC.c: 93: if(Parity % 2 == 1)
 18415  1ADA  1C76               	btfss	i1CheckSum_byte@Parity,0
 18416  1ADB  2ADE               	goto	i1l3870
 18417                           
 18418                           ;MISC.c: 94: {
 18419                           ;MISC.c: 95: return 1;
 18420  1ADC  3001               	movlw	1
 18421  1ADD  0008               	return
 18422  1ADE                     i1l3870:	
 18423                           
 18424                           ;MISC.c: 96: }
 18425                           ;MISC.c: 97: return 0;
 18426  1ADE  3000               	movlw	0
 18427  1ADF  0008               	return
 18428  1AE0                     __end_ofi1_CheckSum_byte:	
 18429                           
 18430                           	psect	text79
 18431  1EEC                     __ptext79:	
 18432 ;; *************** function _Reverse_Byte *****************
 18433 ;; Defined at:
 18434 ;;		line 106 in file "MISC.c"
 18435 ;; Parameters:    Size  Location     Type
 18436 ;;  This            1    wreg     unsigned char 
 18437 ;; Auto vars:     Size  Location     Type
 18438 ;;  This            1    3[COMMON] unsigned char 
 18439 ;;  temp            1    2[COMMON] unsigned char 
 18440 ;; Return value:  Size  Location     Type
 18441 ;;                  1    wreg      unsigned char 
 18442 ;; Registers used:
 18443 ;;		wreg, status,2, status,0
 18444 ;; Tracked objects:
 18445 ;;		On entry : 0/0
 18446 ;;		On exit  : 0/0
 18447 ;;		Unchanged: 0/0
 18448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18450 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18451 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18452 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18453 ;;Total ram usage:        4 bytes
 18454 ;; Hardware stack levels used:    1
 18455 ;; This function calls:
 18456 ;;		Nothing
 18457 ;; This function is called by:
 18458 ;;		_PS2RawToScan
 18459 ;; This function uses a non-reentrant model
 18460 ;;
 18461                           
 18462                           
 18463                           ;psect for function _Reverse_Byte
 18464  1EEC                     _Reverse_Byte:	
 18465                           
 18466                           ;incstack = 0
 18467                           ; Regs used in _Reverse_Byte: [wreg+status,2+status,0]
 18468                           ;Reverse_Byte@This stored from wreg
 18469  1EEC  00F3               	movwf	Reverse_Byte@This
 18470                           
 18471                           ;MISC.c: 108: unsigned char temp=0;
 18472  1EED  01F2               	clrf	Reverse_Byte@temp
 18473                           
 18474                           ;MISC.c: 110: temp += (This & 0x01) << 7;
 18475  1EEE  0873               	movf	Reverse_Byte@This,w
 18476  1EEF  3901               	andlw	1
 18477  1EF0  00F0               	movwf	??_Reverse_Byte
 18478  1EF1  3006               	movlw	6
 18479  1EF2                     u534_25:	
 18480  1EF2  35F0               	lslf	??_Reverse_Byte,f
 18481  1EF3  3EFF               	addlw	-1
 18482  1EF4  1D03               	skipz
 18483  1EF5  2EF2               	goto	u534_25
 18484  1EF6  3570               	lslf	??_Reverse_Byte,w
 18485  1EF7  00F1               	movwf	??_Reverse_Byte+1
 18486  1EF8  0871               	movf	??_Reverse_Byte+1,w
 18487  1EF9  07F2               	addwf	Reverse_Byte@temp,f
 18488                           
 18489                           ;MISC.c: 111: temp += (This & 0x02) << 5;
 18490  1EFA  0873               	movf	Reverse_Byte@This,w
 18491  1EFB  3902               	andlw	2
 18492  1EFC  00F0               	movwf	??_Reverse_Byte
 18493  1EFD  3004               	movlw	4
 18494  1EFE                     u535_25:	
 18495  1EFE  35F0               	lslf	??_Reverse_Byte,f
 18496  1EFF  3EFF               	addlw	-1
 18497  1F00  1D03               	skipz
 18498  1F01  2EFE               	goto	u535_25
 18499  1F02  3570               	lslf	??_Reverse_Byte,w
 18500  1F03  00F1               	movwf	??_Reverse_Byte+1
 18501  1F04  0871               	movf	??_Reverse_Byte+1,w
 18502  1F05  07F2               	addwf	Reverse_Byte@temp,f
 18503                           
 18504                           ;MISC.c: 112: temp += (This & 0x04) << 3;
 18505  1F06  0873               	movf	Reverse_Byte@This,w
 18506  1F07  3904               	andlw	4
 18507  1F08  00F0               	movwf	??_Reverse_Byte
 18508  1F09  3002               	movlw	2
 18509  1F0A                     u536_25:	
 18510  1F0A  35F0               	lslf	??_Reverse_Byte,f
 18511  1F0B  3EFF               	addlw	-1
 18512  1F0C  1D03               	skipz
 18513  1F0D  2F0A               	goto	u536_25
 18514  1F0E  3570               	lslf	??_Reverse_Byte,w
 18515  1F0F  00F1               	movwf	??_Reverse_Byte+1
 18516  1F10  0871               	movf	??_Reverse_Byte+1,w
 18517  1F11  07F2               	addwf	Reverse_Byte@temp,f
 18518                           
 18519                           ;MISC.c: 113: temp += (This & 0x08) << 1;
 18520  1F12  0873               	movf	Reverse_Byte@This,w
 18521  1F13  3908               	andlw	8
 18522  1F14  0709               	addwf	9,w
 18523  1F15  00F0               	movwf	??_Reverse_Byte
 18524  1F16  0870               	movf	??_Reverse_Byte,w
 18525  1F17  07F2               	addwf	Reverse_Byte@temp,f
 18526                           
 18527                           ;MISC.c: 114: temp += (This & 0x10) >> 1;
 18528  1F18  3673               	lsrf	Reverse_Byte@This,w
 18529  1F19  3908               	andlw	8
 18530  1F1A  00F0               	movwf	??_Reverse_Byte
 18531  1F1B  0870               	movf	??_Reverse_Byte,w
 18532  1F1C  07F2               	addwf	Reverse_Byte@temp,f
 18533                           
 18534                           ;MISC.c: 115: temp += (This & 0x20) >> 3;
 18535  1F1D  0873               	movf	Reverse_Byte@This,w
 18536  1F1E  00F0               	movwf	??_Reverse_Byte
 18537  1F1F  3003               	movlw	3
 18538  1F20                     u537_25:	
 18539  1F20  36F0               	lsrf	??_Reverse_Byte,f
 18540  1F21  0B89               	decfsz	9,f
 18541  1F22  2F20               	goto	u537_25
 18542  1F23  0870               	movf	??_Reverse_Byte,w
 18543  1F24  3904               	andlw	4
 18544  1F25  00F1               	movwf	??_Reverse_Byte+1
 18545  1F26  0871               	movf	??_Reverse_Byte+1,w
 18546  1F27  07F2               	addwf	Reverse_Byte@temp,f
 18547                           
 18548                           ;MISC.c: 116: temp += (This & 0x40) >> 5;
 18549  1F28  0873               	movf	Reverse_Byte@This,w
 18550  1F29  00F0               	movwf	??_Reverse_Byte
 18551  1F2A  3005               	movlw	5
 18552  1F2B                     u538_25:	
 18553  1F2B  36F0               	lsrf	??_Reverse_Byte,f
 18554  1F2C  0B89               	decfsz	9,f
 18555  1F2D  2F2B               	goto	u538_25
 18556  1F2E  0870               	movf	??_Reverse_Byte,w
 18557  1F2F  3902               	andlw	2
 18558  1F30  00F1               	movwf	??_Reverse_Byte+1
 18559  1F31  0871               	movf	??_Reverse_Byte+1,w
 18560  1F32  07F2               	addwf	Reverse_Byte@temp,f
 18561                           
 18562                           ;MISC.c: 117: temp += (This & 0x80) >> 7;
 18563  1F33  0873               	movf	Reverse_Byte@This,w
 18564  1F34  00F0               	movwf	??_Reverse_Byte
 18565  1F35  3007               	movlw	7
 18566  1F36                     u539_25:	
 18567  1F36  36F0               	lsrf	??_Reverse_Byte,f
 18568  1F37  0B89               	decfsz	9,f
 18569  1F38  2F36               	goto	u539_25
 18570  1F39  0870               	movf	??_Reverse_Byte,w
 18571  1F3A  3901               	andlw	1
 18572  1F3B  00F1               	movwf	??_Reverse_Byte+1
 18573  1F3C  0871               	movf	??_Reverse_Byte+1,w
 18574  1F3D  07F2               	addwf	Reverse_Byte@temp,f
 18575                           
 18576                           ;MISC.c: 119: return temp;
 18577  1F3E  0872               	movf	Reverse_Byte@temp,w
 18578  1F3F  0008               	return
 18579  1F40                     __end_of_Reverse_Byte:	
 18580  007E                     btemp	set	126	;btemp
 18581  007E                     pic14e$flags	set	126
 18582  007E                     wtemp	set	126
 18583  007E                     wtemp0	set	126
 18584  0080                     wtemp1	set	128
 18585  0082                     wtemp2	set	130
 18586  0084                     wtemp3	set	132
 18587  0086                     wtemp4	set	134
 18588  0088                     wtemp5	set	136
 18589  007F                     wtemp6	set	127
 18590  007E                     ttemp	set	126
 18591  007E                     ttemp0	set	126
 18592  0081                     ttemp1	set	129
 18593  0084                     ttemp2	set	132
 18594  0087                     ttemp3	set	135
 18595  007F                     ttemp4	set	127
 18596  007E                     ltemp	set	126
 18597  007E                     ltemp0	set	126
 18598  0082                     ltemp1	set	130
 18599  0086                     ltemp2	set	134
 18600  0080                     ltemp3	set	128


Data Sizes:
    Strings     210
    Constant    623
    Data        8
    BSS         54
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     37      70
    BANK2            80     63      63
    BANK3            80     65      80
    BANK4            80     55      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_18(CODE[24]), STR_11(CODE[12]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 60
		 -> Process_PS2_ScanCode@buf(BANK3[60]), SetBaud@buf(BANK2[50]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1091$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    WriteFlash_Sequential@buffer	PTR unsigned int  size(1) Largest target is 4
		 -> MEM(BANK1[4]), 

    UARTstringWAIT@data	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_20(CODE[20]), STR_19(CODE[3]), Process_PS2_ScanCode@buf(BANK3[60]), STR_17(CODE[3]), 
		 -> STR_16(CODE[3]), STR_15(CODE[19]), STR_14(CODE[19]), STR_13(CODE[3]), 
		 -> STR_12(CODE[3]), SetBaud@buf(BANK2[50]), STR_10(CODE[21]), STR_9(CODE[3]), 
		 -> STR_8(CODE[3]), NoParityMSG(CODE[20]), SpaceParityMSG(CODE[16]), MarkParityMSG(CODE[15]), 
		 -> EvenParityMSG(CODE[22]), OddParityMSG(CODE[21]), STR_7(CODE[3]), STR_6(CODE[33]), 
		 -> STR_5(CODE[3]), Version(CODE[9]), STR_4(CODE[19]), STR_3(CODE[28]), 
		 -> STR_2(CODE[8]), STR_1(CODE[7]), VoltageMSG(CODE[13]), 

    BufferShiftBack@buffer	PTR unsigned char  size(1) Largest target is 12
		 -> PS_2_ScanCodes(BANK1[12]), 

    cleanBuffer@data	PTR unsigned char  size(1) Largest target is 12
		 -> PS_2_ScanCodes(BANK1[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_UARTchar
    _ResendLast->i1_Send_PS2
    _Process_PS2_ScanCode->i1_Send_PS2
    _Process_PS2_ScanCode->i1_UARTchar
    i1_Send_PS2->i1_delayUS
    _UART_send_break_timed->i1_delayUS
    i1_UARTstringWAIT->i1_UARTchar
    i1_UARTchar->i1_CheckSum_byte
    i1_ReadBaud->i1_ReadFlash_4Byte
    i1_ReadFlash_4Byte->i1_ReadFlash_2Byte
    i1_InitUART->i1___lldiv
    _sprintf->i1___lldiv
    ___llmod->i1___lldiv
    _WriteBaud->_WriteFlash_Sequential
    _WriteFlash_Sequential->i1_delayUS
    _PS2RawToScan->i1_CheckSum_byte

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _ResendLast->i1_Send_PS2
    _SetBaud->_WriteBaud
    i1_UARTstringWAIT->i1_UARTchar
    i1_ReadBaud->i1_ReadFlash_4Byte
    _sprintf->___llmod
    _WriteBaud->_WriteFlash_Sequential

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    _isr->_Process_PS2_ScanCode
    _Process_PS2_ScanCode->_SetBaud
    _SetBaud->_WriteBaud

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    _Process_PS2_ScanCode->_SetBaud

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    _isr->_Process_PS2_ScanCode

Critical Paths under _main in BANK4

    _main->_ReadVoltage
    _ReadVoltage->___ftmul
    ___lwtoft->___ftpack
    ___ftmul->___ftdiv
    ___ftdiv->___lwtoft
    _InternalADC_Read->_delayUS
    _Init_PS_2_Send->_Send_PS2
    _Send_PS2->_delayUS
    _Init_System->_InitUART
    _UARTstringWAIT->_UARTchar
    _UARTchar->_CheckSum_byte
    _ReadBaud->_ReadFlash_4Byte
    _ReadFlash_4Byte->_ReadFlash_2Byte
    _InitUART->___lldiv

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   36977
                                             53 BANK4      2     2      0
                _ConfigureOscillator
                            _InitApp
                        _Init_System
              _PS_2_ENABLE_INTERRUPT
                          _PS_2_INIT
                        _ReadVoltage
                     _UARTstringWAIT
                             ___ftge
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     814
                                              0 BANK4      9     3      6
 ---------------------------------------------------------------------------------
 (1) _ReadVoltage                                          9     6      3   10581
                                             44 BANK4      9     6      3
                 _DisableInternalADC
                   _InternalADC_Read
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             4     1      3    2481
                                              8 BANK4      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    3015
                                             28 BANK4     16    10      6
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2947
                                             12 BANK4     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2373
                                              0 BANK4      8     3      5
 ---------------------------------------------------------------------------------
 (2) _InternalADC_Read                                     5     3      2    2064
                                             10 BANK4      5     3      2
                            _delayUS
 ---------------------------------------------------------------------------------
 (2) _DisableInternalADC                                   1     1      0       0
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PS_2_INIT                                            0     0      0    5641
                         _Clock_TRIS
                          _Data_TRIS
                     _Init_PS_2_Send
                         _Timer2Init
 ---------------------------------------------------------------------------------
 (2) _Timer2Init                                           5     5      0      99
                                              0 BANK4      5     5      0
                           _Timer2ON
 ---------------------------------------------------------------------------------
 (3) _Timer2ON                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_PS_2_Send                                       0     0      0    5480
             _PS_2_DISABLE_INTERRUPT
                           _Send_PS2
                            _delayUS
 ---------------------------------------------------------------------------------
 (3) _Send_PS2                                             9     9      0    3416
                                             10 BANK4      9     9      0
                      _CheckSum_byte
                         _Clock_TRIS
                          _Data_TRIS
                      _READ_PS_2_PIN
                            _delayUS
 ---------------------------------------------------------------------------------
 (4) _READ_PS_2_PIN                                        1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Data_TRIS                                            1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Clock_TRIS                                           1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (3) _PS_2_DISABLE_INTERRUPT                               2     2      0      31
                                              0 BANK4      2     2      0
 ---------------------------------------------------------------------------------
 (1) _PS_2_ENABLE_INTERRUPT                                1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                         14    14      0   11386
                                             35 BANK4     14    14      0
                           _InitUART
                           _ReadBaud
                     _UARTstringWAIT
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) _UARTstringWAIT                                       4     2      2    6420
                                             15 BANK4      4     2      2
                           _UARTchar
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) _delayUS                                             10     6      4    2033
                                              0 BANK4     10     6      4
 ---------------------------------------------------------------------------------
 (2) _UARTchar                                             7     5      2    2096
                                              8 BANK4      7     5      2
                      _CheckSum_byte
 ---------------------------------------------------------------------------------
 (3) _CheckSum_byte                                        8     5      3     784
                                              0 BANK4      8     5      3
 ---------------------------------------------------------------------------------
 (2) _ReadBaud                                            16    12      4    1168
                                             18 BANK4     16    12      4
                    _ReadFlash_4Byte
 ---------------------------------------------------------------------------------
 (3) _ReadFlash_4Byte                                     13     9      4     803
                                              5 BANK4     13     9      4
                    _ReadFlash_2Byte
 ---------------------------------------------------------------------------------
 (4) _ReadFlash_2Byte                                      5     2      3     485
                                              0 BANK4      5     2      3
 ---------------------------------------------------------------------------------
 (2) _InitUART                                            21    16      5    1493
                                             14 BANK4     21    16      5
                         _CloseUSART
                          _OpenUSART
                          _ReadUSART
                            ___lldiv
                          _baudUSART
 ---------------------------------------------------------------------------------
 (3) _baudUSART                                            1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     479
                                              0 BANK4     14     6      8
 ---------------------------------------------------------------------------------
 (3) _ReadUSART                                            2     2      0      34
                                              0 BANK4      2     2      0
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     387
                                              0 BANK4      3     1      2
 ---------------------------------------------------------------------------------
 (3) _CloseUSART                                           1     1      0       0
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  1     1      0       0
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  5     5      0   21616
                                             78 BANK0      2     2      0
                                             34 BANK1      3     3      0
                       _PS2RawToScan
               _Process_PS2_ScanCode
                    _READ_CONFIG_PIN
                         _ResendLast
                          _Timer2OFF
                        _Timer2Reset
              _UART_send_break_timed
           i1_PS_2_DISABLE_INTERRUPT
            i1_PS_2_ENABLE_INTERRUPT
                    i1_READ_PS_2_PIN
                        i1_ReadUSART
                         i1_Timer2ON
                         i1_UARTchar
 ---------------------------------------------------------------------------------
 (6) i1_Timer2ON                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) i1_PS_2_ENABLE_INTERRUPT                              1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Timer2Reset                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Timer2OFF                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _ResendLast                                           0     0      0    1323
           i1_PS_2_DISABLE_INTERRUPT
                         i1_Send_PS2
 ---------------------------------------------------------------------------------
 (6) i1_PS_2_DISABLE_INTERRUPT                             2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _READ_CONFIG_PIN                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Process_PS2_ScanCode                                71    71      0   17587
                                             28 BANK1      6     6      0
                                              0 BANK3     65    65      0
                    _BufferShiftBack
                   _Decode_Scan_Code
          _Decode_Scan_Code_Function
        _Decode_Scan_Code_FunctionE0
             _Decode_Scan_Code_Shift
                           _ISNUMBER
                            _SetBaud
                    _UART_send_break
              _UART_send_break_timed
                             ___lmul
                        _cleanBuffer
                            _sprintf
                         i1_Send_PS2
                         i1_UARTchar
                   i1_UARTstringWAIT
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (7) i1_Send_PS2                                           9     9      0    1301
                                             10 COMMON     4     4      0
                                              0 BANK0      5     5      0
                    i1_CheckSum_byte
                       i1_Clock_TRIS
                        i1_Data_TRIS
                    i1_READ_PS_2_PIN
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (6) i1_READ_PS_2_PIN                                      1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_Data_TRIS                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_Clock_TRIS                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _cleanBuffer                                          5     3      2     193
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (7) ___lmul                                              12     4      8     220
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (6) _UART_send_break_timed                                3     1      2     684
                                             10 COMMON     3     1      2
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (7) _UART_send_break                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _SetBaud                                             76    71      5    7906
                                             15 BANK1     13     8      5
                                              0 BANK2     63    63      0
                          _WriteBaud
                            _sprintf
                         i1_InitUART
                         i1_ReadBaud
                   i1_UARTstringWAIT
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (7) i1_UARTstringWAIT                                     4     2      2    2263
                                              1 BANK0      4     2      2
                         i1_UARTchar
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (6) i1_UARTchar                                           7     5      2    1065
                                              8 COMMON     6     4      2
                                              0 BANK0      1     1      0
                    i1_CheckSum_byte
 ---------------------------------------------------------------------------------
 (8) i1_ReadBaud                                          16    12      4     528
                                              4 BANK0     16    12      4
                  i1_ReadFlash_4Byte
 ---------------------------------------------------------------------------------
 (9) i1_ReadFlash_4Byte                                   13     9      4     387
                                              5 COMMON     9     5      4
                                              0 BANK0      4     4      0
                  i1_ReadFlash_2Byte
 ---------------------------------------------------------------------------------
 (8) i1_InitUART                                          21    16      5     822
                                              0 BANK0     21    16      5
                       i1_CloseUSART
                        i1_OpenUSART
                        i1_ReadUSART
                          i1___lldiv
                        i1_baudUSART
 ---------------------------------------------------------------------------------
 (9) i1_baudUSART                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) i1_ReadUSART                                          2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) i1_OpenUSART                                          3     1      2     246
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (9) i1_CloseUSART                                         1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _sprintf                                             22    16      6    1181
                                             10 BANK0     22    16      6
                            ___llmod
                          i1___lldiv
 ---------------------------------------------------------------------------------
 (8) i1___lldiv                                           14     6      8     266
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (8) ___llmod                                             10     2      8     287
                                              0 BANK0     10     2      8
                          i1___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (8) _WriteBaud                                           19    12      7    1928
                                             74 BANK0      4     4      0
                                              0 BANK1     15     8      7
              _WriteFlash_Sequential
 ---------------------------------------------------------------------------------
 (9) _WriteFlash_Sequential                               78    74      4    1625
                                             10 COMMON     4     0      4
                                              0 BANK0     74    74      0
                         _BlockErase
                             _UNLOCK
                  i1_ReadFlash_2Byte
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (7) i1_delayUS                                           10     6      4     534
                                              0 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (10) i1_ReadFlash_2Byte                                   5     2      3     222
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (10) _BlockErase                                          4     2      2     108
                                              0 COMMON     4     2      2
                             _UNLOCK
 ---------------------------------------------------------------------------------
 (10) _UNLOCK                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _ISNUMBER                                             1     1      0      44
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code_Shift                               1     1      0      45
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code_FunctionE0                          1     1      0      45
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code_Function                            1     1      0      44
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code                                     1     1      0      45
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _BufferShiftBack                                      8     6      2    1307
                                              0 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 (6) _PS2RawToScan                                        13    11      2     753
                                              8 COMMON     4     2      2
                                              0 BANK0      9     9      0
                       _Reverse_Byte
                    i1_CheckSum_byte
 ---------------------------------------------------------------------------------
 (7) i1_CheckSum_byte                                      8     5      3     369
                                              0 COMMON     8     5      3
 ---------------------------------------------------------------------------------
 (7) _Reverse_Byte                                         4     4      0     207
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _Init_System
     _InitUART
       _CloseUSART
       _OpenUSART
       _ReadUSART
       ___lldiv
       _baudUSART
     _ReadBaud
       _ReadFlash_4Byte
         _ReadFlash_2Byte
     _UARTstringWAIT
       _UARTchar
         _CheckSum_byte
       _delayUS
     _delayUS
   _PS_2_ENABLE_INTERRUPT
   _PS_2_INIT
     _Clock_TRIS
     _Data_TRIS
     _Init_PS_2_Send
       _PS_2_DISABLE_INTERRUPT
       _Send_PS2
         _CheckSum_byte
         _Clock_TRIS
         _Data_TRIS
         _READ_PS_2_PIN
         _delayUS
       _delayUS
     _Timer2Init
       _Timer2ON
   _ReadVoltage
     _DisableInternalADC
     _InternalADC_Read
       _delayUS
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _UARTstringWAIT
     _UARTchar
       _CheckSum_byte
     _delayUS
   ___ftge
   _delayUS

 _isr (ROOT)
   _PS2RawToScan
     _Reverse_Byte
     i1_CheckSum_byte
   _Process_PS2_ScanCode
     _BufferShiftBack
     _Decode_Scan_Code
     _Decode_Scan_Code_Function
     _Decode_Scan_Code_FunctionE0
     _Decode_Scan_Code_Shift
     _ISNUMBER
     _SetBaud
       _WriteBaud
         _WriteFlash_Sequential
           _BlockErase
             _UNLOCK
           _UNLOCK
           i1_ReadFlash_2Byte
           i1_delayUS
       _sprintf
         ___llmod
           i1___lldiv (ARG)
         i1___lldiv
       i1_InitUART
         i1_CloseUSART
         i1_OpenUSART
         i1_ReadUSART
         i1___lldiv
         i1_baudUSART
       i1_ReadBaud
         i1_ReadFlash_4Byte
           i1_ReadFlash_2Byte
       i1_UARTstringWAIT
         i1_UARTchar
           i1_CheckSum_byte
         i1_delayUS
       i1_delayUS
     _UART_send_break
     _UART_send_break_timed
       i1_delayUS
     ___lmul
     _cleanBuffer
     _sprintf
       ___llmod
         i1___lldiv (ARG)
       i1___lldiv
     i1_Send_PS2
       i1_CheckSum_byte
       i1_Clock_TRIS
       i1_Data_TRIS
       i1_READ_PS_2_PIN
       i1_delayUS
     i1_UARTchar
       i1_CheckSum_byte
     i1_UARTstringWAIT
       i1_UARTchar
         i1_CheckSum_byte
       i1_delayUS
     i1_delayUS
   _READ_CONFIG_PIN
   _ResendLast
     i1_PS_2_DISABLE_INTERRUPT
     i1_Send_PS2
       i1_CheckSum_byte
       i1_Clock_TRIS
       i1_Data_TRIS
       i1_READ_PS_2_PIN
       i1_delayUS
   _Timer2OFF
   _Timer2Reset
   _UART_send_break_timed
     i1_delayUS
   i1_PS_2_DISABLE_INTERRUPT
   i1_PS_2_ENABLE_INTERRUPT
   i1_READ_PS_2_PIN
   i1_ReadUSART
   i1_Timer2ON
   i1_UARTchar
     i1_CheckSum_byte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     25      46       7       87.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     3F      3F       9       78.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50     41      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50     37      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     178      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     178      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Mon Mar 02 10:12:53 2015

                     _BufferShiftBack 1C4C                _PS_2_DISABLE_INTERRUPT 1965  
             Process_PS2_ScanCode@buf 01A0                            __CFG_CP$ON 0000  
                   ??_ReadFlash_2Byte 0223                     ??_ReadFlash_4Byte 0229  
                                   _i 00D5                        _ResendLastFlag 00D3  
            Process_PS2_ScanCode@temp 01E0                  i1InitUART@baudconfig 002F  
                  Data_TRIS@direction 0220                           __CFG_LVP$ON 0000  
                                 l171 1625                                   l421 1CC1  
                                 l415 1CA8                                   l432 10A6  
                                 l441 10D5                                   l433 10A9  
                                 l290 1AEE                                   l282 1BE4  
                                 l274 0B4F                                   l419 1CB7  
                                 l179 16D7                                   l292 1AF4  
                                 l284 1BFD                                   l293 1B0B  
                                 l437 10CC                                   l622 1899  
                                 l466 1BA8                                   l642 18BC  
                                 l627 18A4                                   l468 1BC7  
                                 l647 1985                                   l943 1B66  
                                 l855 0ED9                                   l856 0F2E  
                                 _MEM 00E2                                   _PR2 001B  
                                 _isr 0004                  _Process_PS2_ScanCode 011B  
                         i1_baudUSART 1833               i1ReadFlash_4Byte@column 0077  
                        __CFG_BORV$LO 0000                                   wreg 0009  
          __size_ofi1_ReadFlash_2Byte 002A            __size_ofi1_ReadFlash_4Byte 0051  
          __end_of_ScanCodeFunctionE0 08D3               UART_send_break_timed@US 007A  
                        ___ftdiv@cntr 0236                          ___ftdiv@sign 023B  
                                l1020 1D24                                  l1023 1D49  
                                l1252 1FD2                                  l1258 1FE9  
                                l6222 1971                                  l6240 1085  
                                l6400 0F5B                                  l6242 108E  
                                l6250 10C4                                  l6138 1983  
                                l6402 0F77                                  l6180 1B01  
                                l6164 1C07                                  l6148 198A  
                                l6332 0EB6                                  l6270 1C97  
                                l6502 1EAA                                  l6246 10AC  
                                l6414 0F7E                                  l6342 0EDE  
                                l6334 0ED3                                  l6512 1ED8  
                                l6504 1EB8                                  l6248 10B9  
                                l6440 0FD8                                  l6416 0F9A  
                                l6344 0EE4                                  l6282 1CAA  
                                l6274 1C9D                                  l6450 0FDB  
                                l6426 0F9D                                  l6370 0F25  
                                l6292 1CB9                                  l6516 1EE3  
                                l6188 1B09                                  l6452 0FF7  
                                l6428 0FB9                                  l6356 0EE9  
                                l6278 1CA2                                  l6198 1B0F  
                                l6526 1BCA                                  l6438 0FBC  
                                l6390 0F58                                  l6358 0F05  
                                l6470 1FA8                                  l6296 1CC3  
                                l6288 1CAF                                  l6376 0F33  
                                l6368 0F08                                  l6720 12CE  
                                l6562 145F                                  l6378 0F39  
                                l6474 1FAF                                  l6706 1295  
                                l6564 1463                                  l6388 0F3C  
                                l6484 1FD7                                  l6476 1FB9  
                                ?_isr 0070        __size_of_PS_2_ENABLE_INTERRUPT 000C  
                                l6830 0AB4                                  l6486 1FDF  
                                l6478 1FBE                                  l6750 133B  
                                l6742 1327                                  l6726 12E4  
                                l6902 1C3D                                  l6826 0AAB  
                                l6754 1343                                  l6738 131F  
                                l6860 0B31                                  l6684 123B  
                                l6774 1943                                  l6862 0B36  
                                l6678 1225                                  l6950 169E  
                                l6942 1676                                  l6776 1949  
                                l6856 0B28                                  l6858 0B2C  
                                l6866 0B3B                                  l6698 127C  
                                l6970 16F4                                  l6962 16DF  
                                l6946 1698                                  l6938 164E  
                                _BAUD 0261                                  l6868 0B48  
                                l6884 1037                                  l6974 1701  
                                l6958 16DB                                  l6888 1045  
                                l6898 1C27                   _PS_2_Read_Data_TEMP 00C9  
                                _ECHO 025F                                  STR_1 0A3A  
                                STR_2 0A32                                  STR_3 0990  
                                STR_4 0A13                                  STR_5 09FD  
                                STR_6 096F                                  STR_7 09FD  
                                STR_8 09FD                                  STR_9 09FD  
                                _LATA 010C                                  _LATC 010E  
                                _LALT 01E9         __end_of_PS_2_ENABLE_INTERRUPT 18BF  
                                _PIE1 0091                                  i1l90 0082  
                                i1l83 0075                                  i1l92 00BF  
                                i1l84 002F                                  i1l87 005B  
                                _RALT 01EC                                  u8315 1FCD  
                                u8415 1EB9                                  u8335 1FDA  
                                u8425 1ECD                                  u8265 1E14  
                                u8435 1ED9                                  u8515 1495  
                                u7805 1AF5                                  u8525 1A41  
                                u8365 1FF0                                  u8295 1FB4  
                                u8625 1D2A                                  u8705 1296  
                                u8395 1EAD                                  u8485 116C  
                                u7773 1BF6                                  u8495 118F  
                                u8815 1344                                  u8665 124D  
                                u8825 134A                                  u8745 12F0  
                                u7875 1B5D                                  u8675 125D  
                                u8755 1300                                  u8685 127D  
                                u8925 1032                                  u8695 128C  
                                u8775 1328                                  u8785 132E  
                                u8945 1041                                  u8875 0A80  
                                u8885 0A99                                  u8895 0AA9  
                                _TMR2 001A                                  _WPUA 020C  
                                _WPUC 020E                            i1delayUS@i 0075  
                          i1delayUS@j 0079                          __CFG_WRT$OFF 0000  
    __size_ofi1_PS_2_ENABLE_INTERRUPT 000B                     i1___lldiv@divisor 0070  
                                _main 1611                    UARTstringWAIT@data 022F  
                        ___ftpack@arg 0220                          ___ftpack@exp 0223  
                                fsr0h 0005                                  fsr1h 0007  
                                fsr0l 0004                                  indf0 0000  
                                indf1 0001                                  fsr1l 0006  
                                btemp 007E                     i1___lldiv@counter 007D  
                 baudUSART@baudconfig 0220                         __CFG_BOREN$ON 0000  
                                ltemp 007E                     SetBaud@Paritytemp 0156  
                    i1_UARTstringWAIT 1B11                                  start 00E6  
                                ttemp 007E                                  wtemp 007E  
                       __CFG_IESO$OFF 0000                      Reverse_Byte@This 0073  
           WriteFlash_Sequential@temp 0066                      Reverse_Byte@temp 0072  
                       __CFG_MCLRE$ON 0000                            _BlockErase 19FF  
                        ___ftmul@cntr 024A                           ?i1_UARTchar 0078  
             ?_Decode_Scan_Code_Shift 0070                          ___ftmul@sign 024B  
                     __end_of_InitApp 19B0                       __end_of_SetBaud 0CDE  
                          _Clock_TRIS 1891                         ??_Init_System 0243  
              __size_of_READ_PS_2_PIN 0014                                 ??_isr 006E  
                 _Right_Shift_Key_old 00D4                        _Init_PS_2_Send 066F  
                   ??i1_READ_PS_2_PIN 0070     i1UARTchar@NinethBit_override_data 0079  
     UARTchar@NinethBit_override_data 0229             _Decode_Scan_Code_Function 18E9  
                         ReadBaud@row 0232       WriteFlash_Sequential@amountTemp 0065  
                     __end_of_Version 096F                         ??_ReadVoltage 024F  
                          _CloseUSART 18CC                                 ?_main 0070  
            __size_ofi1_CheckSum_byte 0030                                 STR_10 09C4  
                               STR_11 0A26                                 STR_12 09FD  
                               STR_20 09D9                                 STR_13 09FD  
                               STR_14 09ED                                 STR_15 0A00  
                               STR_16 09FD                                 STR_17 09FD  
                       __CFG_WDTE$OFF 0000                                 STR_18 09AC  
                               STR_19 09FD                       __end_of___ftdiv 12B7  
                    __end_of_ISNUMBER 18CC                       __end_of___lldiv 1EEC  
                     __end_of___ftmul 136B                                 _CKPPS 0E25  
                     __end_of___llmod 1D11                                 _T2CON 001C  
                               _IOCAF 0393                                 _IOCAN 0392  
                               _IOCAP 0391                                 i1l102 00E1  
                               i1l421 1A78                                 i1l415 1A65  
                               i1l432 1F69                                 i1l441 1F96  
                               i1l433 1F6C                                 i1l290 1ABD  
                               i1l282 1B7D                                 i1l419 1A6F  
                               i1l292 1AC3                                 i1l284 1B96  
                               i1l293 1ADA                                 i1l437 1F8D  
                               i1l622 1864                                 i1l710 0280  
                               i1l800 0541                                 i1l466 1B11  
                               i1l642 188E                                 i1l627 186E  
                               i1l468 1B2F                                 i1l478 0C55  
                               i1l487 0CCB                                 i1l647 195E  
                               i1l823 0614                                 i1l943 19F3  
                               i1l855 0D47                                 i1l952 1881  
                               i1l856 0D9B                                 i1l792 0644  
      __size_of_UART_send_break_timed 0025                                 _RCREG 0199  
               ?_Process_PS2_ScanCode 0070                                 _RCSTA 019D  
                               _SPBRG 019B         __end_of_UART_send_break_timed 19D5  
                _PS_2_Read_Data_First 01E1                                 _PORTA 000C  
                               _PORTC 000E                          InitUART@Baud 022E  
                               _RXPPS 0E24                                 _TXREG 019A  
                 _ConfigureOscillator 1940                                 _Alarm 025E  
                _PS_2_Read_Data_Third 01E5                       __end_of_delayUS 1C10  
                    _InternalADC_Read 1D11                           i1delayUS@US 0070  
                 ___lmul@multiplicand 0074                        __CFG_FCMEN$OFF 0000  
                        InitUART@temp 023F                 _WriteFlash_Sequential 136B  
                  i1___lldiv@dividend 0074                 ReadFlash_2Byte@column 0222  
                    __end_of_UARTchar 10DE                            SetBaud@buf 0120  
                     __end_of_dpowers 08FB                           ?i1_InitUART 0020  
                         ?i1_ReadBaud 0024                         ___ftpack@sign 0224  
                  __size_of_PS_2_INIT 000F                                 main@i 0256  
                               isr@rx 00C3                                 ltemp0 007E  
                               ltemp1 0082                                 ltemp2 0086  
                               ltemp3 0080                           ?i1_Send_PS2 0070  
             InternalADC_Read@channel 022E                                 ttemp0 007E  
                               ttemp1 0081                                 ttemp2 0084  
                               ttemp3 0087                                 ttemp4 007F  
                               status 0003               __end_of_BufferShiftBack 1C8D  
                               wtemp0 007E                                 wtemp1 0080  
                               wtemp2 0082                                 wtemp3 0084  
                               wtemp4 0086                                 wtemp5 0088  
                               wtemp6 007F                       __end_of_sprintf 1800  
                         isr@ScanTemp 00C4                    __size_ofi1___lldiv 0052  
                __size_of_cleanBuffer 0018                           ?i1_Timer2ON 0070  
                ?_ConfigureOscillator 0070        __end_of_Decode_Scan_Code_Shift 1940  
                       _ScanCodeSHIFT 07F5                    __size_ofi1_delayUS 0033  
                     _UART_send_break 1000                       __initialization 00E8  
              __end_of_Init_PS_2_Send 06DF                   __end_of_NoParityMSG 093A  
                  __size_of_Data_TRIS 000B                          __end_of_main 1707  
                    __end_of_InitUART 1522                      ??_UARTstringWAIT 0231  
                         isr@Rx_fault 00C2                      __end_of_ReadBaud 11A6  
                  i1___lldiv@quotient 0079            __end_of_DisableInternalADC 0A48  
                      _SpaceParityMSG 093A                      __end_of_ScanCode 07F5  
                      __CFG_LPBOR$OFF 0000              __size_of_READ_CONFIG_PIN 0007  
                    __end_of_Send_PS2 1000                                ??_main 0255  
        __end_of_ScanCodeFunctionNoE0 0784                        __CFG_PLLEN$OFF 0000  
                    __end_of_Timer2ON 182B                   __end_of_Init_System 0B65  
                        ReadBaud@temp 023E                      i1CheckSum_byte@i 0077  
                      i1InitUART@Baud 0020                          ?i1_Data_TRIS 0070  
                    BufferShiftBack@i 0076         Decode_Scan_Code_Function@Code 0070  
                 __end_of_ReadVoltage 107B                 ReadFlash_4Byte@column 0227  
                              _ADCON0 009D                                _ADCON1 009E  
                              _ADCON2 009F                   __size_ofi1_UARTchar 005F  
                    ___llmod@dividend 0024                                _ADRESH 009C  
                              _ADRESL 009B                        i1InitUART@temp 0031  
                       _READ_PS_2_PIN 1978                        __CFG_ZCDDIS$ON 0000  
                              _ANSELA 018C                                _ANSELC 018E  
                    __end_of___ftpack 2000                                _HFIOFS 04D0  
                              _RC1STA 019D                                _RC2PPS 0EA2  
                              i1l1074 1732                                i1l1077 1750  
                              i1l4000 1372                                i1l4002 13C8  
                              i1l4032 1412                                i1l4112 1F49  
                              i1l4120 1F7C                                i1l4034 1436  
                              i1l4050 1CFD                                i1l4114 1F53  
                              i1l4122 1F85                                i1l4044 1CD7  
                              i1l4300 1776                                i1l5004 1A89  
                              i1l4046 1CE5                                i1l4054 1D08  
                              i1l4118 1F6F                                i1l4320 17FA  
                              i1l5008 1A93                                i1l5200 0DC4  
                              i1l6000 00B0                                i1l4154 1E57  
                              i1l5210 0DC7                                i1l6002 00BC  
                              i1l4164 1E85                                i1l4156 1E65  
                              i1l4316 17A8                                i1l4308 17A3  
                              i1l4084 1A66                                i1l4076 1A5F  
                              i1l5212 0DE3                                i1l5116 1904  
                              i1l6020 00DA                                i1l4318 170D  
                              i1l4094 1A71                                i1l5142 0D24  
                              i1l4168 1E90                                i1l4280 1734  
                              i1l5224 0DEA                                i1l5152 0D4C  
                              i1l5144 0D41                                i1l5400 0220  
                              i1l4290 175F                                i1l4098 1A79  
                              i1l5250 0E44                                i1l5226 0E06  
                              i1l5154 0D51                                i1l5410 0237  
                              i1l6018 00D7                                i1l4284 1739  
                              i1l5260 0E47                                i1l5236 0E09  
                              i1l5180 0D92                                i1l5500 0307  
                              i1l5412 0225                                i1l5340 019D  
                              i1l5316 014E                                i1l4278 1730  
                              i1l4606 1B32                                i1l5262 0E63  
                              i1l5238 0E25                                i1l5166 0D56  
                              i1l5510 030F                                i1l5422 0251  
                              i1l5414 023E                                i1l5430 0260  
                              i1l5326 0177                                i1l4560 154E  
                              i1l5248 0E28                                i1l5168 0D72  
                              i1l5520 0335                                i1l5512 0324  
                              i1l5440 0277                                i1l5424 023F  
                              i1l5336 0198                                i1l5344 01A8  
                              i1l5274 1D9C                                i1l4810 1C81  
                              i1l4562 1552                                i1l4626 195C  
                              i1l5186 0DA0                                i1l5178 0D75  
                              i1l5506 0321                                i1l5610 0404  
                              i1l5450 028A                                i1l5426 0258  
                              i1l5362 01D3                                i1l3860 1AD8  
                              i1l3852 1AD0                                i1l5276 1D9E  
                              i1l4812 1C88                                i1l3836 1B9F  
                              i1l4636 1963                                i1l5188 0DA5  
                              i1l5524 033E                                i1l5516 032D  
                              i1l5508 0309                                i1l5436 026E  
                              i1l5292 184A                                i1l3870 1ADE  
                              i1l4814 1C53                                i1l5198 0DA8  
                              i1l5710 0560                                i1l5702 054A  
                              i1l5606 03F8                                i1l5542 0364  
                              i1l5390 020A                                i1l5382 01FB  
                              i1l5374 01ED                                i1l5358 01CB  
                              i1l5462 02B5                                i1l5366 01DC  
                              i1l5552 037E                                i1l5544 0352  
                              i1l5480 02D9                                i1l5472 02CA  
                              i1l4842 0C3C                                i1l5722 057F  
                              i1l5714 0569                                i1l5706 0553  
                              i1l5626 0419                                i1l5618 040E  
                              i1l5570 038C                                i1l5554 0381  
                              i1l5546 036B                                i1l5458 0295  
                              i1l5378 01F4                                i1l5386 0200  
                              i1l4860 0C7C                                i1l5660 04A8  
                              i1l5580 03BC                                i1l5572 03A5  
                              i1l5556 036C                                i1l5484 02E2  
                              i1l5476 02D1                                i1l4950 193E  
                              i1l4870 0CA7                                i1l4846 0C4F  
                              i1l5750 05FA                                i1l5726 058C  
                              i1l5718 0576                                i1l5646 046D  
                              i1l5670 04B1                                i1l5582 03A6  
                              i1l5558 0388                                i1l4872 0CAC  
                              i1l4880 0CC3                                i1l5744 05EB  
                              i1l5760 062F                                i1l5568 039E  
                              i1l5584 03C3                                i1l5496 0300  
                              i1l4962 191A                                i1l4938 192C  
                              i1l4786 18CA                                i1l3994 13B3  
                              i1l4874 0CB1                                i1l5746 05F0  
                              i1l5754 05FF                                i1l5578 03B8  
                              i1l5498 02EE                                i1l3988 1396  
                              i1l4868 0CA2                                i1l4796 06E2  
                              i1l5764 0642                                i1l5748 05F5  
                              i1l5756 060C                                i1l5676 04C4  
                              i1l5596 03E2                                i1l4974 18F7  
                              i1l4878 0CB6                                i1l5766 0645  
                              i1l5782 0664                                i1l5696 0538  
                              i1l5688 04F1                                i1l5786 0121  
                              i1l5966 005D                                i1l5992 0092  
                              i1l5968 0060                                _INTCON 000B  
                              _FVRCON 0117                                u420_25 1409  
                              _PARITY 0260                                u423_25 1CDA  
                              _PMADRH 0192                                _PMADRL 0191  
                              u425_25 1CF3                      __end_of___lwtoft 101A  
                              _PMDATH 0194                                u426_25 1CFE  
                              u442_25 1DC2                                _PMDATL 0193  
                              _PMCON1 0195                                _PMCON2 0196  
                              u444_25 1E5A                                u516_25 1584  
                              u525_25 1108                                u534_25 1EF2  
                              u446_25 1E66                                u470_25 1799  
                              u526_25 112B                                u542_25 06E9  
                  __size_of_ReadUSART 000A                                u391_23 1B8F  
                              u535_25 1EFE                                u615_25 1D80  
                              u447_25 1E7A                                u536_25 1F0A  
                              u544_25 1C6D                                u448_25 1E86  
                              u472_25 17B2                                u537_25 1F20  
                              u465_25 11AE                                _OSCCON 0099  
                              u538_25 1F2B                                u394_25 1AC4  
                              u466_25 11F1                                u546_25 0BC0  
                              u570_25 1A9B                                u539_25 1F36  
                              u547_25 0C1D                                u388_25 1A19  
                              u548_25 0C3A                                u725_25 05B3  
                              u726_25 05C3                                u399_25 19EB  
                              u744_25 001E                                u569_25 1A94  
                              _SPBRGH 019C                                _TX1STA 019E  
                              _UNLOCK 187B                  __end_of_OddParityMSG 0926  
                          _ResendLast 184C                 _PS_2_Read_Data_Second 01E3  
                           ??_InitApp 0220                 ??_ConfigureOscillator 0220  
                              _Delete 00CE                      i1OpenUSART@spbrg 0070  
                      __CFG_PWRTE$OFF 0000                             ??_SetBaud 00B4  
                       ??_Timer2Reset 0070                            _Timer2Init 1A2A  
                         ?_BlockErase 0070                         InitUART@spbrg 023B  
                         SetBaud@Baud 00AF                    __size_of_OpenUSART 0041  
                     ?_Init_PS_2_Send 0070                                ___ftge 1C10  
              __end_of_SpaceParityMSG 094A                     ?_Decode_Scan_Code 0070  
                              ___lmul 1A81                        __CFG_STVREN$ON 0000  
                           ??___ftdiv 0232                             ??___lldiv 0228  
                         ?_Clock_TRIS 0070                             ??___ftmul 0242  
                           ??___llmod 0028                           SetBaud@temp 015A  
                 __size_ofi1_InitUART 00EF                     __end_of_PS_2_INIT 18E9  
                 __size_ofi1_ReadBaud 0064                    ??_Decode_Scan_Code 0070  
                        ?i1_ReadUSART 0070                             ??_delayUS 0224  
__size_of_Decode_Scan_Code_FunctionE0 0012                    __size_of_Timer2OFF 0003  
                         ?_CloseUSART 0070                ??_Process_PS2_ScanCode 00BC  
                 __size_ofi1_Send_PS2 018E                 ___ftmul@f3_as_product 0247  
                   __end_ofi1___lldiv 1E99                ?_WriteFlash_Sequential 007A  
                 __size_ofi1_Timer2ON 0003                     __end_ofi1_delayUS 1BA8  
                     SetBaud@Baudtemp 0152                          ?i1_OpenUSART 0070  
              __size_of_CheckSum_byte 0031                     ??i1_CheckSum_byte 0073  
                      ?_READ_PS_2_PIN 0070                     __end_of_Data_TRIS 18A7  
                           ??_sprintf 0030                        i1ReadBaud@temp 0030  
             i1READ_PS_2_PIN@DATA_CLK 0070               i1_PS_2_ENABLE_INTERRUPT 1886  
             __end_of_UART_send_break 1005                       _ReadFlash_2Byte 1B43  
                     _ReadFlash_4Byte 1DF6               __end_of__initialization 0117  
                 Timer2Init@prescaler 0224                           _NoParityMSG 0926  
                  __size_of_WriteBaud 0068                      ?_BufferShiftBack 0070  
                          ___ftge@ff1 0220                            ___ftge@ff2 0223  
             ?_PS_2_DISABLE_INTERRUPT 0070                            ___ftdiv@f1 022F  
                          ___ftdiv@f2 022C                            ___ftdiv@f3 0237  
                          _VoltageMSG 0959                             ?_ISNUMBER 0070  
                  __size_of_baudUSART 0009                            ___ftmul@f1 023C  
                          ___ftmul@f2 023F                        __pcstackCOMMON 0070  
                        __pidataBANK1 182F                          __pidataBANK4 182B  
                           ?_UARTchar 0228                         ?_PS2RawToScan 0078  
                  InitUART@baudconfig 023D                           _Init_System 0A48  
                 __end_of_Timer2Reset 1825                     __end_of_ReadUSART 187B  
                          ___lwtoft@c 0228                           _ReadVoltage 101A  
                     ReadVoltage@temp 0253                          WriteBaud@row 00A0  
            __end_ofi1_UARTstringWAIT 1B43                        _OPTION_REGbits 0095  
                 ReadFlash_4Byte@temp 022E                          ?i1_baudUSART 0070  
                   ??_READ_CONFIG_PIN 0070                         ReadUSART@data 0221  
                         _SinLEDtimer 025A    __size_of_Decode_Scan_Code_Function 0010  
                   __end_of_OpenUSART 1CCE                   __size_of_BlockErase 002B  
                     WriteBaud@Parity 00A6                     Send_PS2@oddparity 022E  
                          __pbssBANK1 00C5                            __pbssBANK3 01E1  
                          __pbssBANK4 0257                   __size_of_Clock_TRIS 000B  
                           ?_InitUART 022E                             ?_ReadBaud 0232  
                   __end_of_Timer2OFF 1822        __end_of_PS_2_DISABLE_INTERRUPT 1978  
                  ReadVoltage@voltage 0250                               ?_UNLOCK 0070  
                         ?_ResendLast 0070                       i1_READ_PS_2_PIN 1952  
                 __size_of_CloseUSART 000E                             ?_Send_PS2 0070  
                          ??_ISNUMBER 0070                  _ScanCodeFunctionNoE0 0700  
            __end_of_InternalADC_Read 1D55     __size_ofi1_PS_2_DISABLE_INTERRUPT 0011  
                         ?_Timer2Init 0070                    _ScanCodeFunctionE0 0866  
                           ?_Timer2ON 0070             ?i1_PS_2_DISABLE_INTERRUPT 0070  
                       _CheckSum_byte 1AE0                            __pmaintext 1611  
                        ??i1_UARTchar 007A                           _ParityTyped 01EB  
                       BlockErase@row 0070                               ?___ftge 0220  
                             ?___lmul 0070                   i1CheckSum_byte@This 0070  
                      ??_PS2RawToScan 0020                         _Caps_Lock_Key 00CC  
                       ?_Reverse_Byte 0070                            __pintentry 0004  
                          ??_UARTchar 022A                        ___lmul@product 0078  
                           ?___ftpack 0220                       i1InitUART@spbrg 002D  
                   _PS_2_Buffer_items 00D1                 i1CheckSum_byte@Parity 0076  
                           ?___lwtoft 0228                     __end_of_WriteBaud 120E  
                     ??_READ_PS_2_PIN 0220                   BufferShiftBack@size 0071  
                   __end_of_baudUSART 0700               __end_of_ReadFlash_2Byte 1B75  
             __end_of_ReadFlash_4Byte 1E47                               _OSCSTAT 009A  
                 Clock_TRIS@direction 0220             ??i1_PS_2_ENABLE_INTERRUPT 0070  
                             _PPSLOCK 0E0F                          ??i1_InitUART 0025  
                i1ReadFlash_2Byte@row 0070                          ??i1_ReadBaud 0028  
                       ?i1_Clock_TRIS 0070                    __end_ofi1_UARTchar 1F9F  
                __size_ofi1_Data_TRIS 000A                     i1OpenUSART@config 0072  
                i1ReadFlash_4Byte@row 0075                            ??_InitUART 0233  
                          ??_ReadBaud 0236                          ??i1_Send_PS2 007A  
               READ_PS_2_PIN@DATA_CLK 0220                      ?_UART_send_break 0070  
                       ?i1_CloseUSART 0070                 _PS_2_ENABLE_INTERRUPT 18B3  
                     __size_of_UNLOCK 000B                          ??i1_Timer2ON 0070  
                             _InitApp 198C                            ??_Send_PS2 022A  
                             _SetBaud 0B65                        InitUART@config 023E  
                      ?_CheckSum_byte 0220                           _Timer2Reset 1822  
     i1PS_2_ENABLE_INTERRUPT@DATA_CLK 0070                            ??_Timer2ON 0220  
                      InitUART@parity 0232               i1CheckSum_byte@Odd_Even 0072  
                      ??_Reverse_Byte 0070                               _Version 0966  
                     __size_of___ftge 003C                       __size_of___lmul 002F  
                             ___ftdiv 120E                               ___lldiv 1E99  
                             ___ftmul 12B7                               ___llmod 1CCE  
                   i1Send_PS2@command 0021                    __end_ofi1_InitUART 1611  
                             _delayUS 1BDB                    __end_ofi1_ReadBaud 1142  
                          ??___ftpack 0225                               __ptext1 1C10  
                             __ptext2 101A                               __ptext3 1005  
                             __ptext4 12B7                               __ptext5 120E  
                             __ptext6 1F9F                               __ptext7 1D11  
                             __ptext8 0A41                               __ptext9 18DA  
                          ??___lwtoft 022B                  __size_ofi1_ReadUSART 0009  
                        _OddParityMSG 0911                               _dpowers 08D3  
                  __end_ofi1_Send_PS2 0E6C                   __size_of_ResendLast 0008  
                           _T2CONbits 001C               i1CheckSum_byte@ThisTemp 0074  
                        __size_of_isr 00E2                     i1Send_PS2@timeout 0023  
            _Process_PS2_ScanCode$851 01DC              _Process_PS2_ScanCode$852 01DD  
            _Process_PS2_ScanCode$853 01DE              _Process_PS2_ScanCode$854 01DF  
         WriteFlash_Sequential@amount 007D           WriteFlash_Sequential@buffer 007C  
                  __end_ofi1_Timer2ON 1828                 _UART_send_break_timed 19B0  
                 __size_of_Timer2Init 002B                    _DisableInternalADC 0A41  
         WriteFlash_Sequential@spaces 0068                        ??i1_Clock_TRIS 0070  
             __end_ofi1_READ_PS_2_PIN 1965                               _sprintf 1707  
                             clrloop0 1840                     _Caps_Lock_Key_old 00CD  
                __size_ofi1_OpenUSART 002C                  end_of_initialization 0117  
                       ??_cleanBuffer 0072                        ??i1_CloseUSART 0070  
               BufferShiftBack@buffer 0077                       i1ReadUSART@data 0071  
                             init_ram 1839                   ?_DisableInternalADC 0070  
                             initloop 183A                      UARTchar@override 0228  
                    ??_Init_PS_2_Send 0233          ?_Decode_Scan_Code_FunctionE0 0070  
                     ___lldiv@divisor 0220                       ___lldiv@counter 022D  
                        ??_BlockErase 0072                             _RCSTAbits 019D  
                        ??_Clock_TRIS 0220                          __pstringtext 0700  
               __end_of_EvenParityMSG 0911                       i1_CheckSum_byte 1AB0  
             ??_WriteFlash_Sequential 0020                          ??_CloseUSART 0220  
                ??_DisableInternalADC 0220                             _PS_2_INIT 18DA  
                    __CFG_FOSC$INTOSC 0000                             _PS_2_bits 00D2  
                           _TRISAbits 008C                             _TRISCbits 008E  
           __size_of_Decode_Scan_Code 0012                      ?_ReadFlash_2Byte 0220  
                    ?_ReadFlash_4Byte 0225                  __size_ofi1_baudUSART 0006  
                           i1___lldiv 1E47                 __end_of_MarkParityMSG 0959  
                  __end_of_BlockErase 1A2A           __end_of_ConfigureOscillator 1952  
                __end_of_PS2RawToScan 1DA5                             i1_delayUS 1B75  
              ?_PS_2_ENABLE_INTERRUPT 0070                    __end_of_Clock_TRIS 189C  
                           _BaudTyped 00C5                             _Data_TRIS 189C  
                           _CapsCount 01E7                 i1baudUSART@baudconfig 0070  
                         ___ftdiv@exp 023A                             _Caps_Lock 01E8  
                     ??_CheckSum_byte 0223                           _CCP2CONbits 029A  
                           _TXSTAbits 019E                        __end_of_UNLOCK 1886  
                  __end_of_CloseUSART 18DA                  Timer2Init@postscaler 0223  
                 __end_of_cleanBuffer 06F7         ??_Decode_Scan_Code_FunctionE0 0070  
                         ___ftmul@exp 0246                     __size_of_ISNUMBER 000D  
                      __end_of___ftge 1C4C                 CheckSum_byte@Odd_Even 0222  
                        ?_Init_System 0070                        __end_of___lmul 1AB0  
                     _READ_CONFIG_PIN 1845                     __size_of_UARTchar 0063  
                        ?_ReadVoltage 024C                            ?_PS_2_INIT 0070  
                           Send_PS2@i 0230         __size_of_Process_PS2_ScanCode 0554  
              ?_UART_send_break_timed 007A                   start_initialization 00E8  
                   ?i1_UARTstringWAIT 0021                             _ReadUSART 1871  
             __size_of_UARTstringWAIT 0033                 CheckSum_byte@ThisTemp 0224  
                         __end_of_isr 00E6                            ?i1___lldiv 0070  
                  ??i1_UARTstringWAIT 0023      __end_ofi1_PS_2_DISABLE_INTERRUPT 190A  
                       WriteBaud@Baud 00A2                  __end_of_Reverse_Byte 1F40  
                    ?i1_READ_PS_2_PIN 0070                            ?i1_delayUS 0070  
            ??_Decode_Scan_Code_Shift 0070                         WriteBaud@temp 006A  
                           _OpenUSART 1C8D                            ?_Data_TRIS 0070  
                            ??_UNLOCK 0070                          ??_ResendLast 007E  
                     ___llmod@divisor 0020                     __size_of_InitUART 00E5  
                     ___llmod@counter 0029                     __size_of_ReadBaud 0064  
                           _Shift_Key 01EF                          ??_Timer2Init 0220  
                           _Timer2OFF 181F               __end_ofi1_CheckSum_byte 1AE0  
                   ?_InternalADC_Read 022A                     __size_of_Send_PS2 0194  
                            ??___ftge 0226                              ??___lmul 0078  
            __size_of_BufferShiftBack 0041                    ??_InternalADC_Read 022C  
                   __size_of_Timer2ON 0003                  __end_ofi1_Clock_TRIS 1867  
                         __pdataBANK1 00E2                           __pdataBANK4 0261  
                __end_ofi1_CloseUSART 18B3                         i1ReadBaud@row 0024  
                   __size_of___ftpack 0061                      cleanBuffer@count 0070  
                  __end_of_ResendLast 1854                            ?_ReadUSART 0070  
                           ___latbits 0002                     __size_of___lwtoft 0015  
                       __pcstackBANK0 0020                         __pcstackBANK1 00A0  
                       __pcstackBANK2 0120                         __pcstackBANK3 01A0  
                       __pcstackBANK4 0220                             _WriteBaud 11A6  
                 __end_of__stringdata 0A41                    i1UARTchar@override 0078  
                  ReadFlash_2Byte@row 0220                    __end_of_Timer2Init 1A55  
                           _baudUSART 06F7                    ReadFlash_4Byte@row 0225  
                         _cleanBuffer 06DF                            ?_OpenUSART 0220  
                         sprintf@_val 0039                           sprintf@flag 0036  
                         sprintf@prec 0037                              ?_InitApp 0070  
               __end_of_ScanCodeSHIFT 0866       Decode_Scan_Code_FunctionE0@Code 0070  
                            ?_SetBaud 00AF               __end_of_READ_CONFIG_PIN 184C  
                      ReadBaud@column 0234                            ?_Timer2OFF 0070  
                        ?_Timer2Reset 0070                              ?___ftdiv 022C  
                            ?___lldiv 0220                   i1Send_PS2@oddparity 0020  
                            ?___ftmul 023C                              ?___llmod 0020  
                    __CFG_PPS1WAY$OFF 0000         WriteFlash_Sequential@TempBufH 0023  
       WriteFlash_Sequential@TempBufL 0043                              ?_delayUS 0220  
              WriteFlash_Sequential@i 0069            Decode_Scan_Code_Shift@Code 0070  
                            _BAUD1CON 019F                           ??_PS_2_INIT 0233  
                    i1InitUART@config 0030                              _BAUDMODE 00CB  
               __size_of_PS2RawToScan 0050                      i1InitUART@parity 0024  
                       ??i1_Data_TRIS 0070                      _Decode_Scan_Code 190A  
                  __end_of_VoltageMSG 0966                            ?_WriteBaud 00A0  
    i1PS_2_DISABLE_INTERRUPT@DATA_CLK 0071                           ??i1___lldiv 0078  
               __end_of_READ_PS_2_PIN 198C                              ?_sprintf 002A  
                          ?_baudUSART 0070                           ??i1_delayUS 0074  
                           delayUS@US 0220       __size_of_Decode_Scan_Code_Shift 0012  
          ?_Decode_Scan_Code_Function 0070                           ??_Data_TRIS 0220  
          WriteFlash_Sequential@tempH 0063            WriteFlash_Sequential@tempL 0064  
            i1_PS_2_DISABLE_INTERRUPT 18F9                             clear_ram0 183F  
                            _PIE1bits 0091                          cleanBuffer@i 0074  
                BufferShiftBack@shift 0070                              _ISNUMBER 18BF  
                            _PIR1bits 0011                      ?i1_CheckSum_byte 0070  
            __size_of_UART_send_break 0005              WriteFlash_Sequential@row 007A  
                            _UARTchar 107B                  i1Data_TRIS@direction 0070  
                        _PS2RawToScan 1D55                         ??i1_ReadUSART 0070  
                            _LControl 00CF                           __stringdata 096F  
                __size_of_Init_System 011D              ?i1_PS_2_ENABLE_INTERRUPT 0070  
      __size_of_WriteFlash_Sequential 00D2                     ??_BufferShiftBack 0072  
               i1ReadFlash_4Byte@temp 0020         __end_of_WriteFlash_Sequential 143D  
               __size_of_Reverse_Byte 0054                        _UARTstringWAIT 1BA8  
                         ??_ReadUSART 0220                  __size_of_ReadVoltage 0061  
                            _RControl 01ED                         ??i1_OpenUSART 0072  
            ??_PS_2_DISABLE_INTERRUPT 0220               ??_PS_2_ENABLE_INTERRUPT 0220  
                   ___lmul@multiplier 0070                              SetBaud@i 015E  
                            _InitUART 143D                              _ReadBaud 1142  
                         ??_OpenUSART 0222                   __end_ofi1_Data_TRIS 1871  
                i1UARTstringWAIT@data 0021                              _ScanCode 0784  
                     OpenUSART@config 0222     __end_of_Decode_Scan_Code_Function 18F9  
                            _Send_PS2 0E6C                 __size_ofi1_Clock_TRIS 000A  
                    __size_of_InitApp 0024                           ??_Timer2OFF 0070  
                    ?_READ_CONFIG_PIN 0070                              _Timer2ON 1828  
                    __size_of_SetBaud 0179                 __size_ofi1_CloseUSART 000C  
                        _Reverse_Byte 1EEC                      __size_of___ftdiv 00A9  
                     cleanBuffer@data 0073                _Decode_Scan_Code_Shift 192E  
                    __size_of___lldiv 0053                      __size_of___ftmul 00B4  
                    __size_of___llmod 0043                         SetBaud@Parity 00B3  
                            ___ftpack 1F9F                        _PS_2_ScanCodes 00D6  
             ??_UART_send_break_timed 007C                      __size_of_delayUS 0035  
         __size_of_DisableInternalADC 0007                __end_of_UARTstringWAIT 1BDB  
                            ___lwtoft 1005                       Send_PS2@command 022F  
                       ??i1_baudUSART 0070                   __end_ofi1_ReadUSART 185D  
               i1Clock_TRIS@direction 0070                           ??_WriteBaud 00A7  
                       ISNUMBER@ascii 0070                       Send_PS2@timeout 0231  
                            __ptext10 1A2A                              __ptext11 1828  
                            __ptext20 1BA8                              __ptext12 066F  
                            __ptext21 1BDB                              __ptext13 0E6C  
                            __ptext30 1871                              __ptext22 107B  
                            __ptext14 1978                              __ptext31 1C8D  
                            __ptext23 1AE0                              __ptext15 189C  
                            __ptext40 184C                              __ptext32 18CC  
                            __ptext24 1142                              __ptext16 1891  
                            __ptext41 18F9                              __ptext33 198C  
                            __ptext25 1DF6                              __ptext17 1965  
                            __ptext50 19B0                              __ptext42 1845  
                            __ptext34 1940                              __ptext26 1B43  
                            __ptext18 18B3                              __ptext51 1000  
                            __ptext43 011B                              __ptext27 143D  
                            __ptext19 0A48                              __ptext60 1A55  
                            __ptext52 0B65                              __ptext44 0CDE  
                            __ptext36 1825                              __ptext28 06F7  
                            __ptext61 18A7                              __ptext53 1B11  
                            __ptext45 1952                              __ptext37 1886  
                            __ptext29 1E99                              __ptext70 187B  
                            __ptext62 1707                              __ptext54 1F40  
                            __ptext46 1867                              __ptext38 1822  
                            __ptext71 18BF                              __ptext63 1E47  
                            __ptext55 10DE                              __ptext47 185D  
                            __ptext39 181F                              __ptext72 192E  
                            __ptext64 1CCE                              __ptext56 1DA5  
                            __ptext48 06DF                              __ptext73 191C  
                            __ptext65 11A6                              __ptext57 1522  
                            __ptext49 1A81                              __ptext74 18E9  
                            __ptext66 136B                              __ptext58 1833  
                            __ptext75 190A                              __ptext67 1B75  
                            __ptext59 1854                              __ptext76 1C4C  
                            __ptext68 19D5                              __ptext77 1D55  
                            __ptext69 19FF                              __ptext78 1AB0  
                            __ptext79 1EEC         PS_2_ENABLE_INTERRUPT@DATA_CLK 0220  
                   i1_ReadFlash_2Byte 19D5                     i1_ReadFlash_4Byte 1DA5  
                         ??_baudUSART 0220                          i1_Clock_TRIS 185D  
                    __size_of_sprintf 00F9                    ?i1_ReadFlash_2Byte 0070  
                  ?i1_ReadFlash_4Byte 0075                   __end_ofi1_OpenUSART 1A81  
                       __size_of_main 00F6                          i1_CloseUSART 18A7  
            __size_of_ReadFlash_2Byte 0032              __size_of_ReadFlash_4Byte 0051  
        __end_of_Process_PS2_ScanCode 066F                              delayUS@i 0225  
                            delayUS@j 0229             __size_ofi1_UARTstringWAIT 0032  
                        _pwrLEDtoggle 025C          __size_of_ConfigureOscillator 0012  
               __end_of_CheckSum_byte 1B11                   ??i1_ReadFlash_2Byte 0073  
                 ??i1_ReadFlash_4Byte 0079                            _RC1STAbits 019D  
                      CheckSum_byte@i 0227                        _Left_Shift_Key 01EA  
                __size_of_Timer2Reset 0003       __end_ofi1_PS_2_ENABLE_INTERRUPT 1891  
             __size_of_Init_PS_2_Send 0070                        Timer2Init@time 0222  
                   ??_UART_send_break 0070                       ?_UARTstringWAIT 022F  
                 CheckSum_byte@Parity 0226                            _INTCONbits 000B  
           __size_of_InternalADC_Read 0044                        OpenUSART@spbrg 0220  
           __end_ofi1_ReadFlash_2Byte 19FF             __end_ofi1_ReadFlash_4Byte 1DF6  
                        UARTchar@data 022E                           i1_Data_TRIS 1867  
                         pic14e$flags 007E       __size_of_PS_2_DISABLE_INTERRUPT 0013  
                 __end_ofi1_baudUSART 1839                              intlevel1 0000  
                           sprintf@ap 003D                             sprintf@sp 003E  
                        ?_cleanBuffer 0070                      ___lldiv@dividend 0224  
 __end_of_Decode_Scan_Code_FunctionE0 192E           _Decode_Scan_Code_FunctionE0 191C  
                   __CFG_CLKOUTEN$OFF 0000                        _BatteryVoltage 0257  
            __size_ofi1_READ_PS_2_PIN 0013              __end_of_Decode_Scan_Code 191C  
                          i1_UARTchar 1F40                       _Right_Shift_Key 01EE  
                         i1Send_PS2@i 0022                           i1_ReadUSART 1854  
                       _EvenParityMSG 08FB                              sprintf@c 003F  
                            sprintf@f 002A                      i1ReadBaud@column 0026  
                    ___lldiv@quotient 0229               i1ReadFlash_2Byte@column 0072  
                Decode_Scan_Code@Code 0070            ??i1_PS_2_DISABLE_INTERRUPT 0070  
                         i1_OpenUSART 1A55                     Init_System@Parity 0250  
                  _Left_Shift_Key_old 00D0                            _TX1STAbits 019E  
                          i1_InitUART 1522                     CheckSum_byte@This 0220  
                      i1UARTchar@data 0020                            i1_ReadBaud 10DE  
                       _MarkParityMSG 094A                            i1_Send_PS2 0CDE  
         ??_Decode_Scan_Code_Function 0070                       Init_System@Baud 024C  
                          i1_Timer2ON 1825                       Init_System@temp 0248  
                     PS2RawToScan@Raw 0078        PS_2_DISABLE_INTERRUPT@DATA_CLK 0221  
                    PS2RawToScan@temp 007A  
