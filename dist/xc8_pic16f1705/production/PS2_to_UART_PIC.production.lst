

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri Mar 06 10:11:09 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F1705
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK4,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    12                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	intentry,global,class=CODE,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	dabs	1,0x7E,2
   102  0000                     	;# 
   103  0001                     	;# 
   104  0002                     	;# 
   105  0003                     	;# 
   106  0004                     	;# 
   107  0005                     	;# 
   108  0006                     	;# 
   109  0007                     	;# 
   110  0008                     	;# 
   111  0009                     	;# 
   112  000A                     	;# 
   113  000B                     	;# 
   114  000C                     	;# 
   115  000E                     	;# 
   116  0011                     	;# 
   117  0012                     	;# 
   118  0013                     	;# 
   119  0015                     	;# 
   120  0016                     	;# 
   121  0016                     	;# 
   122  0017                     	;# 
   123  0018                     	;# 
   124  0019                     	;# 
   125  001A                     	;# 
   126  001B                     	;# 
   127  001C                     	;# 
   128  008C                     	;# 
   129  008E                     	;# 
   130  0091                     	;# 
   131  0092                     	;# 
   132  0093                     	;# 
   133  0095                     	;# 
   134  0096                     	;# 
   135  0097                     	;# 
   136  0098                     	;# 
   137  0099                     	;# 
   138  009A                     	;# 
   139  009B                     	;# 
   140  009B                     	;# 
   141  009C                     	;# 
   142  009D                     	;# 
   143  009E                     	;# 
   144  009F                     	;# 
   145  010C                     	;# 
   146  010E                     	;# 
   147  0111                     	;# 
   148  0112                     	;# 
   149  0113                     	;# 
   150  0114                     	;# 
   151  0115                     	;# 
   152  0116                     	;# 
   153  0117                     	;# 
   154  0118                     	;# 
   155  0119                     	;# 
   156  011C                     	;# 
   157  018C                     	;# 
   158  018E                     	;# 
   159  0191                     	;# 
   160  0191                     	;# 
   161  0192                     	;# 
   162  0193                     	;# 
   163  0193                     	;# 
   164  0194                     	;# 
   165  0195                     	;# 
   166  0196                     	;# 
   167  0197                     	;# 
   168  0199                     	;# 
   169  0199                     	;# 
   170  0199                     	;# 
   171  019A                     	;# 
   172  019A                     	;# 
   173  019A                     	;# 
   174  019B                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019B                     	;# 
   179  019C                     	;# 
   180  019C                     	;# 
   181  019C                     	;# 
   182  019D                     	;# 
   183  019D                     	;# 
   184  019D                     	;# 
   185  019E                     	;# 
   186  019E                     	;# 
   187  019E                     	;# 
   188  019F                     	;# 
   189  019F                     	;# 
   190  019F                     	;# 
   191  019F                     	;# 
   192  019F                     	;# 
   193  020C                     	;# 
   194  020E                     	;# 
   195  0211                     	;# 
   196  0211                     	;# 
   197  0212                     	;# 
   198  0212                     	;# 
   199  0213                     	;# 
   200  0213                     	;# 
   201  0214                     	;# 
   202  0214                     	;# 
   203  0215                     	;# 
   204  0215                     	;# 
   205  0215                     	;# 
   206  0215                     	;# 
   207  0216                     	;# 
   208  0216                     	;# 
   209  0217                     	;# 
   210  0217                     	;# 
   211  028C                     	;# 
   212  028E                     	;# 
   213  0291                     	;# 
   214  0291                     	;# 
   215  0292                     	;# 
   216  0293                     	;# 
   217  0293                     	;# 
   218  0298                     	;# 
   219  0298                     	;# 
   220  0299                     	;# 
   221  029A                     	;# 
   222  029A                     	;# 
   223  029E                     	;# 
   224  030C                     	;# 
   225  030E                     	;# 
   226  038C                     	;# 
   227  038E                     	;# 
   228  0391                     	;# 
   229  0392                     	;# 
   230  0393                     	;# 
   231  0397                     	;# 
   232  0398                     	;# 
   233  0399                     	;# 
   234  0415                     	;# 
   235  0416                     	;# 
   236  0417                     	;# 
   237  041C                     	;# 
   238  041D                     	;# 
   239  041E                     	;# 
   240  0511                     	;# 
   241  0515                     	;# 
   242  0617                     	;# 
   243  0618                     	;# 
   244  0619                     	;# 
   245  0619                     	;# 
   246  061A                     	;# 
   247  061B                     	;# 
   248  061C                     	;# 
   249  061C                     	;# 
   250  0691                     	;# 
   251  0692                     	;# 
   252  0693                     	;# 
   253  0694                     	;# 
   254  0695                     	;# 
   255  0696                     	;# 
   256  0697                     	;# 
   257  0698                     	;# 
   258  0699                     	;# 
   259  069A                     	;# 
   260  069B                     	;# 
   261  069C                     	;# 
   262  069D                     	;# 
   263  069E                     	;# 
   264  069F                     	;# 
   265  0E0F                     	;# 
   266  0E10                     	;# 
   267  0E11                     	;# 
   268  0E12                     	;# 
   269  0E13                     	;# 
   270  0E14                     	;# 
   271  0E15                     	;# 
   272  0E17                     	;# 
   273  0E20                     	;# 
   274  0E21                     	;# 
   275  0E22                     	;# 
   276  0E24                     	;# 
   277  0E25                     	;# 
   278  0E28                     	;# 
   279  0E29                     	;# 
   280  0E2A                     	;# 
   281  0E2B                     	;# 
   282  0E90                     	;# 
   283  0E91                     	;# 
   284  0E92                     	;# 
   285  0E94                     	;# 
   286  0E95                     	;# 
   287  0EA0                     	;# 
   288  0EA1                     	;# 
   289  0EA2                     	;# 
   290  0EA3                     	;# 
   291  0EA4                     	;# 
   292  0EA5                     	;# 
   293  0F0F                     	;# 
   294  0F10                     	;# 
   295  0F11                     	;# 
   296  0F12                     	;# 
   297  0F13                     	;# 
   298  0F14                     	;# 
   299  0F15                     	;# 
   300  0F16                     	;# 
   301  0F17                     	;# 
   302  0F18                     	;# 
   303  0F19                     	;# 
   304  0F1A                     	;# 
   305  0F1B                     	;# 
   306  0F1C                     	;# 
   307  0F1D                     	;# 
   308  0F1E                     	;# 
   309  0F1F                     	;# 
   310  0F20                     	;# 
   311  0F21                     	;# 
   312  0F22                     	;# 
   313  0F23                     	;# 
   314  0F24                     	;# 
   315  0F25                     	;# 
   316  0F26                     	;# 
   317  0F27                     	;# 
   318  0F28                     	;# 
   319  0F29                     	;# 
   320  0F2A                     	;# 
   321  0F2B                     	;# 
   322  0F2C                     	;# 
   323  0F2D                     	;# 
   324  0F9E                     	;# 
   325  0FE4                     	;# 
   326  0FE5                     	;# 
   327  0FE6                     	;# 
   328  0FE7                     	;# 
   329  0FE8                     	;# 
   330  0FE9                     	;# 
   331  0FEA                     	;# 
   332  0FEB                     	;# 
   333  0FED                     	;# 
   334  0FEE                     	;# 
   335  0FEF                     	;# 
   336  0000                     	;# 
   337  0001                     	;# 
   338  0002                     	;# 
   339  0003                     	;# 
   340  0004                     	;# 
   341  0005                     	;# 
   342  0006                     	;# 
   343  0007                     	;# 
   344  0008                     	;# 
   345  0009                     	;# 
   346  000A                     	;# 
   347  000B                     	;# 
   348  000C                     	;# 
   349  000E                     	;# 
   350  0011                     	;# 
   351  0012                     	;# 
   352  0013                     	;# 
   353  0015                     	;# 
   354  0016                     	;# 
   355  0016                     	;# 
   356  0017                     	;# 
   357  0018                     	;# 
   358  0019                     	;# 
   359  001A                     	;# 
   360  001B                     	;# 
   361  001C                     	;# 
   362  008C                     	;# 
   363  008E                     	;# 
   364  0091                     	;# 
   365  0092                     	;# 
   366  0093                     	;# 
   367  0095                     	;# 
   368  0096                     	;# 
   369  0097                     	;# 
   370  0098                     	;# 
   371  0099                     	;# 
   372  009A                     	;# 
   373  009B                     	;# 
   374  009B                     	;# 
   375  009C                     	;# 
   376  009D                     	;# 
   377  009E                     	;# 
   378  009F                     	;# 
   379  010C                     	;# 
   380  010E                     	;# 
   381  0111                     	;# 
   382  0112                     	;# 
   383  0113                     	;# 
   384  0114                     	;# 
   385  0115                     	;# 
   386  0116                     	;# 
   387  0117                     	;# 
   388  0118                     	;# 
   389  0119                     	;# 
   390  011C                     	;# 
   391  018C                     	;# 
   392  018E                     	;# 
   393  0191                     	;# 
   394  0191                     	;# 
   395  0192                     	;# 
   396  0193                     	;# 
   397  0193                     	;# 
   398  0194                     	;# 
   399  0195                     	;# 
   400  0196                     	;# 
   401  0197                     	;# 
   402  0199                     	;# 
   403  0199                     	;# 
   404  0199                     	;# 
   405  019A                     	;# 
   406  019A                     	;# 
   407  019A                     	;# 
   408  019B                     	;# 
   409  019B                     	;# 
   410  019B                     	;# 
   411  019B                     	;# 
   412  019B                     	;# 
   413  019C                     	;# 
   414  019C                     	;# 
   415  019C                     	;# 
   416  019D                     	;# 
   417  019D                     	;# 
   418  019D                     	;# 
   419  019E                     	;# 
   420  019E                     	;# 
   421  019E                     	;# 
   422  019F                     	;# 
   423  019F                     	;# 
   424  019F                     	;# 
   425  019F                     	;# 
   426  019F                     	;# 
   427  020C                     	;# 
   428  020E                     	;# 
   429  0211                     	;# 
   430  0211                     	;# 
   431  0212                     	;# 
   432  0212                     	;# 
   433  0213                     	;# 
   434  0213                     	;# 
   435  0214                     	;# 
   436  0214                     	;# 
   437  0215                     	;# 
   438  0215                     	;# 
   439  0215                     	;# 
   440  0215                     	;# 
   441  0216                     	;# 
   442  0216                     	;# 
   443  0217                     	;# 
   444  0217                     	;# 
   445  028C                     	;# 
   446  028E                     	;# 
   447  0291                     	;# 
   448  0291                     	;# 
   449  0292                     	;# 
   450  0293                     	;# 
   451  0293                     	;# 
   452  0298                     	;# 
   453  0298                     	;# 
   454  0299                     	;# 
   455  029A                     	;# 
   456  029A                     	;# 
   457  029E                     	;# 
   458  030C                     	;# 
   459  030E                     	;# 
   460  038C                     	;# 
   461  038E                     	;# 
   462  0391                     	;# 
   463  0392                     	;# 
   464  0393                     	;# 
   465  0397                     	;# 
   466  0398                     	;# 
   467  0399                     	;# 
   468  0415                     	;# 
   469  0416                     	;# 
   470  0417                     	;# 
   471  041C                     	;# 
   472  041D                     	;# 
   473  041E                     	;# 
   474  0511                     	;# 
   475  0515                     	;# 
   476  0617                     	;# 
   477  0618                     	;# 
   478  0619                     	;# 
   479  0619                     	;# 
   480  061A                     	;# 
   481  061B                     	;# 
   482  061C                     	;# 
   483  061C                     	;# 
   484  0691                     	;# 
   485  0692                     	;# 
   486  0693                     	;# 
   487  0694                     	;# 
   488  0695                     	;# 
   489  0696                     	;# 
   490  0697                     	;# 
   491  0698                     	;# 
   492  0699                     	;# 
   493  069A                     	;# 
   494  069B                     	;# 
   495  069C                     	;# 
   496  069D                     	;# 
   497  069E                     	;# 
   498  069F                     	;# 
   499  0E0F                     	;# 
   500  0E10                     	;# 
   501  0E11                     	;# 
   502  0E12                     	;# 
   503  0E13                     	;# 
   504  0E14                     	;# 
   505  0E15                     	;# 
   506  0E17                     	;# 
   507  0E20                     	;# 
   508  0E21                     	;# 
   509  0E22                     	;# 
   510  0E24                     	;# 
   511  0E25                     	;# 
   512  0E28                     	;# 
   513  0E29                     	;# 
   514  0E2A                     	;# 
   515  0E2B                     	;# 
   516  0E90                     	;# 
   517  0E91                     	;# 
   518  0E92                     	;# 
   519  0E94                     	;# 
   520  0E95                     	;# 
   521  0EA0                     	;# 
   522  0EA1                     	;# 
   523  0EA2                     	;# 
   524  0EA3                     	;# 
   525  0EA4                     	;# 
   526  0EA5                     	;# 
   527  0F0F                     	;# 
   528  0F10                     	;# 
   529  0F11                     	;# 
   530  0F12                     	;# 
   531  0F13                     	;# 
   532  0F14                     	;# 
   533  0F15                     	;# 
   534  0F16                     	;# 
   535  0F17                     	;# 
   536  0F18                     	;# 
   537  0F19                     	;# 
   538  0F1A                     	;# 
   539  0F1B                     	;# 
   540  0F1C                     	;# 
   541  0F1D                     	;# 
   542  0F1E                     	;# 
   543  0F1F                     	;# 
   544  0F20                     	;# 
   545  0F21                     	;# 
   546  0F22                     	;# 
   547  0F23                     	;# 
   548  0F24                     	;# 
   549  0F25                     	;# 
   550  0F26                     	;# 
   551  0F27                     	;# 
   552  0F28                     	;# 
   553  0F29                     	;# 
   554  0F2A                     	;# 
   555  0F2B                     	;# 
   556  0F2C                     	;# 
   557  0F2D                     	;# 
   558  0F9E                     	;# 
   559  0FE4                     	;# 
   560  0FE5                     	;# 
   561  0FE6                     	;# 
   562  0FE7                     	;# 
   563  0FE8                     	;# 
   564  0FE9                     	;# 
   565  0FEA                     	;# 
   566  0FEB                     	;# 
   567  0FED                     	;# 
   568  0FEE                     	;# 
   569  0FEF                     	;# 
   570  0000                     	;# 
   571  0001                     	;# 
   572  0002                     	;# 
   573  0003                     	;# 
   574  0004                     	;# 
   575  0005                     	;# 
   576  0006                     	;# 
   577  0007                     	;# 
   578  0008                     	;# 
   579  0009                     	;# 
   580  000A                     	;# 
   581  000B                     	;# 
   582  000C                     	;# 
   583  000E                     	;# 
   584  0011                     	;# 
   585  0012                     	;# 
   586  0013                     	;# 
   587  0015                     	;# 
   588  0016                     	;# 
   589  0016                     	;# 
   590  0017                     	;# 
   591  0018                     	;# 
   592  0019                     	;# 
   593  001A                     	;# 
   594  001B                     	;# 
   595  001C                     	;# 
   596  008C                     	;# 
   597  008E                     	;# 
   598  0091                     	;# 
   599  0092                     	;# 
   600  0093                     	;# 
   601  0095                     	;# 
   602  0096                     	;# 
   603  0097                     	;# 
   604  0098                     	;# 
   605  0099                     	;# 
   606  009A                     	;# 
   607  009B                     	;# 
   608  009B                     	;# 
   609  009C                     	;# 
   610  009D                     	;# 
   611  009E                     	;# 
   612  009F                     	;# 
   613  010C                     	;# 
   614  010E                     	;# 
   615  0111                     	;# 
   616  0112                     	;# 
   617  0113                     	;# 
   618  0114                     	;# 
   619  0115                     	;# 
   620  0116                     	;# 
   621  0117                     	;# 
   622  0118                     	;# 
   623  0119                     	;# 
   624  011C                     	;# 
   625  018C                     	;# 
   626  018E                     	;# 
   627  0191                     	;# 
   628  0191                     	;# 
   629  0192                     	;# 
   630  0193                     	;# 
   631  0193                     	;# 
   632  0194                     	;# 
   633  0195                     	;# 
   634  0196                     	;# 
   635  0197                     	;# 
   636  0199                     	;# 
   637  0199                     	;# 
   638  0199                     	;# 
   639  019A                     	;# 
   640  019A                     	;# 
   641  019A                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019B                     	;# 
   647  019C                     	;# 
   648  019C                     	;# 
   649  019C                     	;# 
   650  019D                     	;# 
   651  019D                     	;# 
   652  019D                     	;# 
   653  019E                     	;# 
   654  019E                     	;# 
   655  019E                     	;# 
   656  019F                     	;# 
   657  019F                     	;# 
   658  019F                     	;# 
   659  019F                     	;# 
   660  019F                     	;# 
   661  020C                     	;# 
   662  020E                     	;# 
   663  0211                     	;# 
   664  0211                     	;# 
   665  0212                     	;# 
   666  0212                     	;# 
   667  0213                     	;# 
   668  0213                     	;# 
   669  0214                     	;# 
   670  0214                     	;# 
   671  0215                     	;# 
   672  0215                     	;# 
   673  0215                     	;# 
   674  0215                     	;# 
   675  0216                     	;# 
   676  0216                     	;# 
   677  0217                     	;# 
   678  0217                     	;# 
   679  028C                     	;# 
   680  028E                     	;# 
   681  0291                     	;# 
   682  0291                     	;# 
   683  0292                     	;# 
   684  0293                     	;# 
   685  0293                     	;# 
   686  0298                     	;# 
   687  0298                     	;# 
   688  0299                     	;# 
   689  029A                     	;# 
   690  029A                     	;# 
   691  029E                     	;# 
   692  030C                     	;# 
   693  030E                     	;# 
   694  038C                     	;# 
   695  038E                     	;# 
   696  0391                     	;# 
   697  0392                     	;# 
   698  0393                     	;# 
   699  0397                     	;# 
   700  0398                     	;# 
   701  0399                     	;# 
   702  0415                     	;# 
   703  0416                     	;# 
   704  0417                     	;# 
   705  041C                     	;# 
   706  041D                     	;# 
   707  041E                     	;# 
   708  0511                     	;# 
   709  0515                     	;# 
   710  0617                     	;# 
   711  0618                     	;# 
   712  0619                     	;# 
   713  0619                     	;# 
   714  061A                     	;# 
   715  061B                     	;# 
   716  061C                     	;# 
   717  061C                     	;# 
   718  0691                     	;# 
   719  0692                     	;# 
   720  0693                     	;# 
   721  0694                     	;# 
   722  0695                     	;# 
   723  0696                     	;# 
   724  0697                     	;# 
   725  0698                     	;# 
   726  0699                     	;# 
   727  069A                     	;# 
   728  069B                     	;# 
   729  069C                     	;# 
   730  069D                     	;# 
   731  069E                     	;# 
   732  069F                     	;# 
   733  0E0F                     	;# 
   734  0E10                     	;# 
   735  0E11                     	;# 
   736  0E12                     	;# 
   737  0E13                     	;# 
   738  0E14                     	;# 
   739  0E15                     	;# 
   740  0E17                     	;# 
   741  0E20                     	;# 
   742  0E21                     	;# 
   743  0E22                     	;# 
   744  0E24                     	;# 
   745  0E25                     	;# 
   746  0E28                     	;# 
   747  0E29                     	;# 
   748  0E2A                     	;# 
   749  0E2B                     	;# 
   750  0E90                     	;# 
   751  0E91                     	;# 
   752  0E92                     	;# 
   753  0E94                     	;# 
   754  0E95                     	;# 
   755  0EA0                     	;# 
   756  0EA1                     	;# 
   757  0EA2                     	;# 
   758  0EA3                     	;# 
   759  0EA4                     	;# 
   760  0EA5                     	;# 
   761  0F0F                     	;# 
   762  0F10                     	;# 
   763  0F11                     	;# 
   764  0F12                     	;# 
   765  0F13                     	;# 
   766  0F14                     	;# 
   767  0F15                     	;# 
   768  0F16                     	;# 
   769  0F17                     	;# 
   770  0F18                     	;# 
   771  0F19                     	;# 
   772  0F1A                     	;# 
   773  0F1B                     	;# 
   774  0F1C                     	;# 
   775  0F1D                     	;# 
   776  0F1E                     	;# 
   777  0F1F                     	;# 
   778  0F20                     	;# 
   779  0F21                     	;# 
   780  0F22                     	;# 
   781  0F23                     	;# 
   782  0F24                     	;# 
   783  0F25                     	;# 
   784  0F26                     	;# 
   785  0F27                     	;# 
   786  0F28                     	;# 
   787  0F29                     	;# 
   788  0F2A                     	;# 
   789  0F2B                     	;# 
   790  0F2C                     	;# 
   791  0F2D                     	;# 
   792  0F9E                     	;# 
   793  0FE4                     	;# 
   794  0FE5                     	;# 
   795  0FE6                     	;# 
   796  0FE7                     	;# 
   797  0FE8                     	;# 
   798  0FE9                     	;# 
   799  0FEA                     	;# 
   800  0FEB                     	;# 
   801  0FED                     	;# 
   802  0FEE                     	;# 
   803  0FEF                     	;# 
   804  0000                     	;# 
   805  0001                     	;# 
   806  0002                     	;# 
   807  0003                     	;# 
   808  0004                     	;# 
   809  0005                     	;# 
   810  0006                     	;# 
   811  0007                     	;# 
   812  0008                     	;# 
   813  0009                     	;# 
   814  000A                     	;# 
   815  000B                     	;# 
   816  000C                     	;# 
   817  000E                     	;# 
   818  0011                     	;# 
   819  0012                     	;# 
   820  0013                     	;# 
   821  0015                     	;# 
   822  0016                     	;# 
   823  0016                     	;# 
   824  0017                     	;# 
   825  0018                     	;# 
   826  0019                     	;# 
   827  001A                     	;# 
   828  001B                     	;# 
   829  001C                     	;# 
   830  008C                     	;# 
   831  008E                     	;# 
   832  0091                     	;# 
   833  0092                     	;# 
   834  0093                     	;# 
   835  0095                     	;# 
   836  0096                     	;# 
   837  0097                     	;# 
   838  0098                     	;# 
   839  0099                     	;# 
   840  009A                     	;# 
   841  009B                     	;# 
   842  009B                     	;# 
   843  009C                     	;# 
   844  009D                     	;# 
   845  009E                     	;# 
   846  009F                     	;# 
   847  010C                     	;# 
   848  010E                     	;# 
   849  0111                     	;# 
   850  0112                     	;# 
   851  0113                     	;# 
   852  0114                     	;# 
   853  0115                     	;# 
   854  0116                     	;# 
   855  0117                     	;# 
   856  0118                     	;# 
   857  0119                     	;# 
   858  011C                     	;# 
   859  018C                     	;# 
   860  018E                     	;# 
   861  0191                     	;# 
   862  0191                     	;# 
   863  0192                     	;# 
   864  0193                     	;# 
   865  0193                     	;# 
   866  0194                     	;# 
   867  0195                     	;# 
   868  0196                     	;# 
   869  0197                     	;# 
   870  0199                     	;# 
   871  0199                     	;# 
   872  0199                     	;# 
   873  019A                     	;# 
   874  019A                     	;# 
   875  019A                     	;# 
   876  019B                     	;# 
   877  019B                     	;# 
   878  019B                     	;# 
   879  019B                     	;# 
   880  019B                     	;# 
   881  019C                     	;# 
   882  019C                     	;# 
   883  019C                     	;# 
   884  019D                     	;# 
   885  019D                     	;# 
   886  019D                     	;# 
   887  019E                     	;# 
   888  019E                     	;# 
   889  019E                     	;# 
   890  019F                     	;# 
   891  019F                     	;# 
   892  019F                     	;# 
   893  019F                     	;# 
   894  019F                     	;# 
   895  020C                     	;# 
   896  020E                     	;# 
   897  0211                     	;# 
   898  0211                     	;# 
   899  0212                     	;# 
   900  0212                     	;# 
   901  0213                     	;# 
   902  0213                     	;# 
   903  0214                     	;# 
   904  0214                     	;# 
   905  0215                     	;# 
   906  0215                     	;# 
   907  0215                     	;# 
   908  0215                     	;# 
   909  0216                     	;# 
   910  0216                     	;# 
   911  0217                     	;# 
   912  0217                     	;# 
   913  028C                     	;# 
   914  028E                     	;# 
   915  0291                     	;# 
   916  0291                     	;# 
   917  0292                     	;# 
   918  0293                     	;# 
   919  0293                     	;# 
   920  0298                     	;# 
   921  0298                     	;# 
   922  0299                     	;# 
   923  029A                     	;# 
   924  029A                     	;# 
   925  029E                     	;# 
   926  030C                     	;# 
   927  030E                     	;# 
   928  038C                     	;# 
   929  038E                     	;# 
   930  0391                     	;# 
   931  0392                     	;# 
   932  0393                     	;# 
   933  0397                     	;# 
   934  0398                     	;# 
   935  0399                     	;# 
   936  0415                     	;# 
   937  0416                     	;# 
   938  0417                     	;# 
   939  041C                     	;# 
   940  041D                     	;# 
   941  041E                     	;# 
   942  0511                     	;# 
   943  0515                     	;# 
   944  0617                     	;# 
   945  0618                     	;# 
   946  0619                     	;# 
   947  0619                     	;# 
   948  061A                     	;# 
   949  061B                     	;# 
   950  061C                     	;# 
   951  061C                     	;# 
   952  0691                     	;# 
   953  0692                     	;# 
   954  0693                     	;# 
   955  0694                     	;# 
   956  0695                     	;# 
   957  0696                     	;# 
   958  0697                     	;# 
   959  0698                     	;# 
   960  0699                     	;# 
   961  069A                     	;# 
   962  069B                     	;# 
   963  069C                     	;# 
   964  069D                     	;# 
   965  069E                     	;# 
   966  069F                     	;# 
   967  0E0F                     	;# 
   968  0E10                     	;# 
   969  0E11                     	;# 
   970  0E12                     	;# 
   971  0E13                     	;# 
   972  0E14                     	;# 
   973  0E15                     	;# 
   974  0E17                     	;# 
   975  0E20                     	;# 
   976  0E21                     	;# 
   977  0E22                     	;# 
   978  0E24                     	;# 
   979  0E25                     	;# 
   980  0E28                     	;# 
   981  0E29                     	;# 
   982  0E2A                     	;# 
   983  0E2B                     	;# 
   984  0E90                     	;# 
   985  0E91                     	;# 
   986  0E92                     	;# 
   987  0E94                     	;# 
   988  0E95                     	;# 
   989  0EA0                     	;# 
   990  0EA1                     	;# 
   991  0EA2                     	;# 
   992  0EA3                     	;# 
   993  0EA4                     	;# 
   994  0EA5                     	;# 
   995  0F0F                     	;# 
   996  0F10                     	;# 
   997  0F11                     	;# 
   998  0F12                     	;# 
   999  0F13                     	;# 
  1000  0F14                     	;# 
  1001  0F15                     	;# 
  1002  0F16                     	;# 
  1003  0F17                     	;# 
  1004  0F18                     	;# 
  1005  0F19                     	;# 
  1006  0F1A                     	;# 
  1007  0F1B                     	;# 
  1008  0F1C                     	;# 
  1009  0F1D                     	;# 
  1010  0F1E                     	;# 
  1011  0F1F                     	;# 
  1012  0F20                     	;# 
  1013  0F21                     	;# 
  1014  0F22                     	;# 
  1015  0F23                     	;# 
  1016  0F24                     	;# 
  1017  0F25                     	;# 
  1018  0F26                     	;# 
  1019  0F27                     	;# 
  1020  0F28                     	;# 
  1021  0F29                     	;# 
  1022  0F2A                     	;# 
  1023  0F2B                     	;# 
  1024  0F2C                     	;# 
  1025  0F2D                     	;# 
  1026  0F9E                     	;# 
  1027  0FE4                     	;# 
  1028  0FE5                     	;# 
  1029  0FE6                     	;# 
  1030  0FE7                     	;# 
  1031  0FE8                     	;# 
  1032  0FE9                     	;# 
  1033  0FEA                     	;# 
  1034  0FEB                     	;# 
  1035  0FED                     	;# 
  1036  0FEE                     	;# 
  1037  0FEF                     	;# 
  1038  0000                     	;# 
  1039  0001                     	;# 
  1040  0002                     	;# 
  1041  0003                     	;# 
  1042  0004                     	;# 
  1043  0005                     	;# 
  1044  0006                     	;# 
  1045  0007                     	;# 
  1046  0008                     	;# 
  1047  0009                     	;# 
  1048  000A                     	;# 
  1049  000B                     	;# 
  1050  000C                     	;# 
  1051  000E                     	;# 
  1052  0011                     	;# 
  1053  0012                     	;# 
  1054  0013                     	;# 
  1055  0015                     	;# 
  1056  0016                     	;# 
  1057  0016                     	;# 
  1058  0017                     	;# 
  1059  0018                     	;# 
  1060  0019                     	;# 
  1061  001A                     	;# 
  1062  001B                     	;# 
  1063  001C                     	;# 
  1064  008C                     	;# 
  1065  008E                     	;# 
  1066  0091                     	;# 
  1067  0092                     	;# 
  1068  0093                     	;# 
  1069  0095                     	;# 
  1070  0096                     	;# 
  1071  0097                     	;# 
  1072  0098                     	;# 
  1073  0099                     	;# 
  1074  009A                     	;# 
  1075  009B                     	;# 
  1076  009B                     	;# 
  1077  009C                     	;# 
  1078  009D                     	;# 
  1079  009E                     	;# 
  1080  009F                     	;# 
  1081  010C                     	;# 
  1082  010E                     	;# 
  1083  0111                     	;# 
  1084  0112                     	;# 
  1085  0113                     	;# 
  1086  0114                     	;# 
  1087  0115                     	;# 
  1088  0116                     	;# 
  1089  0117                     	;# 
  1090  0118                     	;# 
  1091  0119                     	;# 
  1092  011C                     	;# 
  1093  018C                     	;# 
  1094  018E                     	;# 
  1095  0191                     	;# 
  1096  0191                     	;# 
  1097  0192                     	;# 
  1098  0193                     	;# 
  1099  0193                     	;# 
  1100  0194                     	;# 
  1101  0195                     	;# 
  1102  0196                     	;# 
  1103  0197                     	;# 
  1104  0199                     	;# 
  1105  0199                     	;# 
  1106  0199                     	;# 
  1107  019A                     	;# 
  1108  019A                     	;# 
  1109  019A                     	;# 
  1110  019B                     	;# 
  1111  019B                     	;# 
  1112  019B                     	;# 
  1113  019B                     	;# 
  1114  019B                     	;# 
  1115  019C                     	;# 
  1116  019C                     	;# 
  1117  019C                     	;# 
  1118  019D                     	;# 
  1119  019D                     	;# 
  1120  019D                     	;# 
  1121  019E                     	;# 
  1122  019E                     	;# 
  1123  019E                     	;# 
  1124  019F                     	;# 
  1125  019F                     	;# 
  1126  019F                     	;# 
  1127  019F                     	;# 
  1128  019F                     	;# 
  1129  020C                     	;# 
  1130  020E                     	;# 
  1131  0211                     	;# 
  1132  0211                     	;# 
  1133  0212                     	;# 
  1134  0212                     	;# 
  1135  0213                     	;# 
  1136  0213                     	;# 
  1137  0214                     	;# 
  1138  0214                     	;# 
  1139  0215                     	;# 
  1140  0215                     	;# 
  1141  0215                     	;# 
  1142  0215                     	;# 
  1143  0216                     	;# 
  1144  0216                     	;# 
  1145  0217                     	;# 
  1146  0217                     	;# 
  1147  028C                     	;# 
  1148  028E                     	;# 
  1149  0291                     	;# 
  1150  0291                     	;# 
  1151  0292                     	;# 
  1152  0293                     	;# 
  1153  0293                     	;# 
  1154  0298                     	;# 
  1155  0298                     	;# 
  1156  0299                     	;# 
  1157  029A                     	;# 
  1158  029A                     	;# 
  1159  029E                     	;# 
  1160  030C                     	;# 
  1161  030E                     	;# 
  1162  038C                     	;# 
  1163  038E                     	;# 
  1164  0391                     	;# 
  1165  0392                     	;# 
  1166  0393                     	;# 
  1167  0397                     	;# 
  1168  0398                     	;# 
  1169  0399                     	;# 
  1170  0415                     	;# 
  1171  0416                     	;# 
  1172  0417                     	;# 
  1173  041C                     	;# 
  1174  041D                     	;# 
  1175  041E                     	;# 
  1176  0511                     	;# 
  1177  0515                     	;# 
  1178  0617                     	;# 
  1179  0618                     	;# 
  1180  0619                     	;# 
  1181  0619                     	;# 
  1182  061A                     	;# 
  1183  061B                     	;# 
  1184  061C                     	;# 
  1185  061C                     	;# 
  1186  0691                     	;# 
  1187  0692                     	;# 
  1188  0693                     	;# 
  1189  0694                     	;# 
  1190  0695                     	;# 
  1191  0696                     	;# 
  1192  0697                     	;# 
  1193  0698                     	;# 
  1194  0699                     	;# 
  1195  069A                     	;# 
  1196  069B                     	;# 
  1197  069C                     	;# 
  1198  069D                     	;# 
  1199  069E                     	;# 
  1200  069F                     	;# 
  1201  0E0F                     	;# 
  1202  0E10                     	;# 
  1203  0E11                     	;# 
  1204  0E12                     	;# 
  1205  0E13                     	;# 
  1206  0E14                     	;# 
  1207  0E15                     	;# 
  1208  0E17                     	;# 
  1209  0E20                     	;# 
  1210  0E21                     	;# 
  1211  0E22                     	;# 
  1212  0E24                     	;# 
  1213  0E25                     	;# 
  1214  0E28                     	;# 
  1215  0E29                     	;# 
  1216  0E2A                     	;# 
  1217  0E2B                     	;# 
  1218  0E90                     	;# 
  1219  0E91                     	;# 
  1220  0E92                     	;# 
  1221  0E94                     	;# 
  1222  0E95                     	;# 
  1223  0EA0                     	;# 
  1224  0EA1                     	;# 
  1225  0EA2                     	;# 
  1226  0EA3                     	;# 
  1227  0EA4                     	;# 
  1228  0EA5                     	;# 
  1229  0F0F                     	;# 
  1230  0F10                     	;# 
  1231  0F11                     	;# 
  1232  0F12                     	;# 
  1233  0F13                     	;# 
  1234  0F14                     	;# 
  1235  0F15                     	;# 
  1236  0F16                     	;# 
  1237  0F17                     	;# 
  1238  0F18                     	;# 
  1239  0F19                     	;# 
  1240  0F1A                     	;# 
  1241  0F1B                     	;# 
  1242  0F1C                     	;# 
  1243  0F1D                     	;# 
  1244  0F1E                     	;# 
  1245  0F1F                     	;# 
  1246  0F20                     	;# 
  1247  0F21                     	;# 
  1248  0F22                     	;# 
  1249  0F23                     	;# 
  1250  0F24                     	;# 
  1251  0F25                     	;# 
  1252  0F26                     	;# 
  1253  0F27                     	;# 
  1254  0F28                     	;# 
  1255  0F29                     	;# 
  1256  0F2A                     	;# 
  1257  0F2B                     	;# 
  1258  0F2C                     	;# 
  1259  0F2D                     	;# 
  1260  0F9E                     	;# 
  1261  0FE4                     	;# 
  1262  0FE5                     	;# 
  1263  0FE6                     	;# 
  1264  0FE7                     	;# 
  1265  0FE8                     	;# 
  1266  0FE9                     	;# 
  1267  0FEA                     	;# 
  1268  0FEB                     	;# 
  1269  0FED                     	;# 
  1270  0FEE                     	;# 
  1271  0FEF                     	;# 
  1272  0000                     	;# 
  1273  0001                     	;# 
  1274  0002                     	;# 
  1275  0003                     	;# 
  1276  0004                     	;# 
  1277  0005                     	;# 
  1278  0006                     	;# 
  1279  0007                     	;# 
  1280  0008                     	;# 
  1281  0009                     	;# 
  1282  000A                     	;# 
  1283  000B                     	;# 
  1284  000C                     	;# 
  1285  000E                     	;# 
  1286  0011                     	;# 
  1287  0012                     	;# 
  1288  0013                     	;# 
  1289  0015                     	;# 
  1290  0016                     	;# 
  1291  0016                     	;# 
  1292  0017                     	;# 
  1293  0018                     	;# 
  1294  0019                     	;# 
  1295  001A                     	;# 
  1296  001B                     	;# 
  1297  001C                     	;# 
  1298  008C                     	;# 
  1299  008E                     	;# 
  1300  0091                     	;# 
  1301  0092                     	;# 
  1302  0093                     	;# 
  1303  0095                     	;# 
  1304  0096                     	;# 
  1305  0097                     	;# 
  1306  0098                     	;# 
  1307  0099                     	;# 
  1308  009A                     	;# 
  1309  009B                     	;# 
  1310  009B                     	;# 
  1311  009C                     	;# 
  1312  009D                     	;# 
  1313  009E                     	;# 
  1314  009F                     	;# 
  1315  010C                     	;# 
  1316  010E                     	;# 
  1317  0111                     	;# 
  1318  0112                     	;# 
  1319  0113                     	;# 
  1320  0114                     	;# 
  1321  0115                     	;# 
  1322  0116                     	;# 
  1323  0117                     	;# 
  1324  0118                     	;# 
  1325  0119                     	;# 
  1326  011C                     	;# 
  1327  018C                     	;# 
  1328  018E                     	;# 
  1329  0191                     	;# 
  1330  0191                     	;# 
  1331  0192                     	;# 
  1332  0193                     	;# 
  1333  0193                     	;# 
  1334  0194                     	;# 
  1335  0195                     	;# 
  1336  0196                     	;# 
  1337  0197                     	;# 
  1338  0199                     	;# 
  1339  0199                     	;# 
  1340  0199                     	;# 
  1341  019A                     	;# 
  1342  019A                     	;# 
  1343  019A                     	;# 
  1344  019B                     	;# 
  1345  019B                     	;# 
  1346  019B                     	;# 
  1347  019B                     	;# 
  1348  019B                     	;# 
  1349  019C                     	;# 
  1350  019C                     	;# 
  1351  019C                     	;# 
  1352  019D                     	;# 
  1353  019D                     	;# 
  1354  019D                     	;# 
  1355  019E                     	;# 
  1356  019E                     	;# 
  1357  019E                     	;# 
  1358  019F                     	;# 
  1359  019F                     	;# 
  1360  019F                     	;# 
  1361  019F                     	;# 
  1362  019F                     	;# 
  1363  020C                     	;# 
  1364  020E                     	;# 
  1365  0211                     	;# 
  1366  0211                     	;# 
  1367  0212                     	;# 
  1368  0212                     	;# 
  1369  0213                     	;# 
  1370  0213                     	;# 
  1371  0214                     	;# 
  1372  0214                     	;# 
  1373  0215                     	;# 
  1374  0215                     	;# 
  1375  0215                     	;# 
  1376  0215                     	;# 
  1377  0216                     	;# 
  1378  0216                     	;# 
  1379  0217                     	;# 
  1380  0217                     	;# 
  1381  028C                     	;# 
  1382  028E                     	;# 
  1383  0291                     	;# 
  1384  0291                     	;# 
  1385  0292                     	;# 
  1386  0293                     	;# 
  1387  0293                     	;# 
  1388  0298                     	;# 
  1389  0298                     	;# 
  1390  0299                     	;# 
  1391  029A                     	;# 
  1392  029A                     	;# 
  1393  029E                     	;# 
  1394  030C                     	;# 
  1395  030E                     	;# 
  1396  038C                     	;# 
  1397  038E                     	;# 
  1398  0391                     	;# 
  1399  0392                     	;# 
  1400  0393                     	;# 
  1401  0397                     	;# 
  1402  0398                     	;# 
  1403  0399                     	;# 
  1404  0415                     	;# 
  1405  0416                     	;# 
  1406  0417                     	;# 
  1407  041C                     	;# 
  1408  041D                     	;# 
  1409  041E                     	;# 
  1410  0511                     	;# 
  1411  0515                     	;# 
  1412  0617                     	;# 
  1413  0618                     	;# 
  1414  0619                     	;# 
  1415  0619                     	;# 
  1416  061A                     	;# 
  1417  061B                     	;# 
  1418  061C                     	;# 
  1419  061C                     	;# 
  1420  0691                     	;# 
  1421  0692                     	;# 
  1422  0693                     	;# 
  1423  0694                     	;# 
  1424  0695                     	;# 
  1425  0696                     	;# 
  1426  0697                     	;# 
  1427  0698                     	;# 
  1428  0699                     	;# 
  1429  069A                     	;# 
  1430  069B                     	;# 
  1431  069C                     	;# 
  1432  069D                     	;# 
  1433  069E                     	;# 
  1434  069F                     	;# 
  1435  0E0F                     	;# 
  1436  0E10                     	;# 
  1437  0E11                     	;# 
  1438  0E12                     	;# 
  1439  0E13                     	;# 
  1440  0E14                     	;# 
  1441  0E15                     	;# 
  1442  0E17                     	;# 
  1443  0E20                     	;# 
  1444  0E21                     	;# 
  1445  0E22                     	;# 
  1446  0E24                     	;# 
  1447  0E25                     	;# 
  1448  0E28                     	;# 
  1449  0E29                     	;# 
  1450  0E2A                     	;# 
  1451  0E2B                     	;# 
  1452  0E90                     	;# 
  1453  0E91                     	;# 
  1454  0E92                     	;# 
  1455  0E94                     	;# 
  1456  0E95                     	;# 
  1457  0EA0                     	;# 
  1458  0EA1                     	;# 
  1459  0EA2                     	;# 
  1460  0EA3                     	;# 
  1461  0EA4                     	;# 
  1462  0EA5                     	;# 
  1463  0F0F                     	;# 
  1464  0F10                     	;# 
  1465  0F11                     	;# 
  1466  0F12                     	;# 
  1467  0F13                     	;# 
  1468  0F14                     	;# 
  1469  0F15                     	;# 
  1470  0F16                     	;# 
  1471  0F17                     	;# 
  1472  0F18                     	;# 
  1473  0F19                     	;# 
  1474  0F1A                     	;# 
  1475  0F1B                     	;# 
  1476  0F1C                     	;# 
  1477  0F1D                     	;# 
  1478  0F1E                     	;# 
  1479  0F1F                     	;# 
  1480  0F20                     	;# 
  1481  0F21                     	;# 
  1482  0F22                     	;# 
  1483  0F23                     	;# 
  1484  0F24                     	;# 
  1485  0F25                     	;# 
  1486  0F26                     	;# 
  1487  0F27                     	;# 
  1488  0F28                     	;# 
  1489  0F29                     	;# 
  1490  0F2A                     	;# 
  1491  0F2B                     	;# 
  1492  0F2C                     	;# 
  1493  0F2D                     	;# 
  1494  0F9E                     	;# 
  1495  0FE4                     	;# 
  1496  0FE5                     	;# 
  1497  0FE6                     	;# 
  1498  0FE7                     	;# 
  1499  0FE8                     	;# 
  1500  0FE9                     	;# 
  1501  0FEA                     	;# 
  1502  0FEB                     	;# 
  1503  0FED                     	;# 
  1504  0FEE                     	;# 
  1505  0FEF                     	;# 
  1506  0000                     	;# 
  1507  0001                     	;# 
  1508  0002                     	;# 
  1509  0003                     	;# 
  1510  0004                     	;# 
  1511  0005                     	;# 
  1512  0006                     	;# 
  1513  0007                     	;# 
  1514  0008                     	;# 
  1515  0009                     	;# 
  1516  000A                     	;# 
  1517  000B                     	;# 
  1518  000C                     	;# 
  1519  000E                     	;# 
  1520  0011                     	;# 
  1521  0012                     	;# 
  1522  0013                     	;# 
  1523  0015                     	;# 
  1524  0016                     	;# 
  1525  0016                     	;# 
  1526  0017                     	;# 
  1527  0018                     	;# 
  1528  0019                     	;# 
  1529  001A                     	;# 
  1530  001B                     	;# 
  1531  001C                     	;# 
  1532  008C                     	;# 
  1533  008E                     	;# 
  1534  0091                     	;# 
  1535  0092                     	;# 
  1536  0093                     	;# 
  1537  0095                     	;# 
  1538  0096                     	;# 
  1539  0097                     	;# 
  1540  0098                     	;# 
  1541  0099                     	;# 
  1542  009A                     	;# 
  1543  009B                     	;# 
  1544  009B                     	;# 
  1545  009C                     	;# 
  1546  009D                     	;# 
  1547  009E                     	;# 
  1548  009F                     	;# 
  1549  010C                     	;# 
  1550  010E                     	;# 
  1551  0111                     	;# 
  1552  0112                     	;# 
  1553  0113                     	;# 
  1554  0114                     	;# 
  1555  0115                     	;# 
  1556  0116                     	;# 
  1557  0117                     	;# 
  1558  0118                     	;# 
  1559  0119                     	;# 
  1560  011C                     	;# 
  1561  018C                     	;# 
  1562  018E                     	;# 
  1563  0191                     	;# 
  1564  0191                     	;# 
  1565  0192                     	;# 
  1566  0193                     	;# 
  1567  0193                     	;# 
  1568  0194                     	;# 
  1569  0195                     	;# 
  1570  0196                     	;# 
  1571  0197                     	;# 
  1572  0199                     	;# 
  1573  0199                     	;# 
  1574  0199                     	;# 
  1575  019A                     	;# 
  1576  019A                     	;# 
  1577  019A                     	;# 
  1578  019B                     	;# 
  1579  019B                     	;# 
  1580  019B                     	;# 
  1581  019B                     	;# 
  1582  019B                     	;# 
  1583  019C                     	;# 
  1584  019C                     	;# 
  1585  019C                     	;# 
  1586  019D                     	;# 
  1587  019D                     	;# 
  1588  019D                     	;# 
  1589  019E                     	;# 
  1590  019E                     	;# 
  1591  019E                     	;# 
  1592  019F                     	;# 
  1593  019F                     	;# 
  1594  019F                     	;# 
  1595  019F                     	;# 
  1596  019F                     	;# 
  1597  020C                     	;# 
  1598  020E                     	;# 
  1599  0211                     	;# 
  1600  0211                     	;# 
  1601  0212                     	;# 
  1602  0212                     	;# 
  1603  0213                     	;# 
  1604  0213                     	;# 
  1605  0214                     	;# 
  1606  0214                     	;# 
  1607  0215                     	;# 
  1608  0215                     	;# 
  1609  0215                     	;# 
  1610  0215                     	;# 
  1611  0216                     	;# 
  1612  0216                     	;# 
  1613  0217                     	;# 
  1614  0217                     	;# 
  1615  028C                     	;# 
  1616  028E                     	;# 
  1617  0291                     	;# 
  1618  0291                     	;# 
  1619  0292                     	;# 
  1620  0293                     	;# 
  1621  0293                     	;# 
  1622  0298                     	;# 
  1623  0298                     	;# 
  1624  0299                     	;# 
  1625  029A                     	;# 
  1626  029A                     	;# 
  1627  029E                     	;# 
  1628  030C                     	;# 
  1629  030E                     	;# 
  1630  038C                     	;# 
  1631  038E                     	;# 
  1632  0391                     	;# 
  1633  0392                     	;# 
  1634  0393                     	;# 
  1635  0397                     	;# 
  1636  0398                     	;# 
  1637  0399                     	;# 
  1638  0415                     	;# 
  1639  0416                     	;# 
  1640  0417                     	;# 
  1641  041C                     	;# 
  1642  041D                     	;# 
  1643  041E                     	;# 
  1644  0511                     	;# 
  1645  0515                     	;# 
  1646  0617                     	;# 
  1647  0618                     	;# 
  1648  0619                     	;# 
  1649  0619                     	;# 
  1650  061A                     	;# 
  1651  061B                     	;# 
  1652  061C                     	;# 
  1653  061C                     	;# 
  1654  0691                     	;# 
  1655  0692                     	;# 
  1656  0693                     	;# 
  1657  0694                     	;# 
  1658  0695                     	;# 
  1659  0696                     	;# 
  1660  0697                     	;# 
  1661  0698                     	;# 
  1662  0699                     	;# 
  1663  069A                     	;# 
  1664  069B                     	;# 
  1665  069C                     	;# 
  1666  069D                     	;# 
  1667  069E                     	;# 
  1668  069F                     	;# 
  1669  0E0F                     	;# 
  1670  0E10                     	;# 
  1671  0E11                     	;# 
  1672  0E12                     	;# 
  1673  0E13                     	;# 
  1674  0E14                     	;# 
  1675  0E15                     	;# 
  1676  0E17                     	;# 
  1677  0E20                     	;# 
  1678  0E21                     	;# 
  1679  0E22                     	;# 
  1680  0E24                     	;# 
  1681  0E25                     	;# 
  1682  0E28                     	;# 
  1683  0E29                     	;# 
  1684  0E2A                     	;# 
  1685  0E2B                     	;# 
  1686  0E90                     	;# 
  1687  0E91                     	;# 
  1688  0E92                     	;# 
  1689  0E94                     	;# 
  1690  0E95                     	;# 
  1691  0EA0                     	;# 
  1692  0EA1                     	;# 
  1693  0EA2                     	;# 
  1694  0EA3                     	;# 
  1695  0EA4                     	;# 
  1696  0EA5                     	;# 
  1697  0F0F                     	;# 
  1698  0F10                     	;# 
  1699  0F11                     	;# 
  1700  0F12                     	;# 
  1701  0F13                     	;# 
  1702  0F14                     	;# 
  1703  0F15                     	;# 
  1704  0F16                     	;# 
  1705  0F17                     	;# 
  1706  0F18                     	;# 
  1707  0F19                     	;# 
  1708  0F1A                     	;# 
  1709  0F1B                     	;# 
  1710  0F1C                     	;# 
  1711  0F1D                     	;# 
  1712  0F1E                     	;# 
  1713  0F1F                     	;# 
  1714  0F20                     	;# 
  1715  0F21                     	;# 
  1716  0F22                     	;# 
  1717  0F23                     	;# 
  1718  0F24                     	;# 
  1719  0F25                     	;# 
  1720  0F26                     	;# 
  1721  0F27                     	;# 
  1722  0F28                     	;# 
  1723  0F29                     	;# 
  1724  0F2A                     	;# 
  1725  0F2B                     	;# 
  1726  0F2C                     	;# 
  1727  0F2D                     	;# 
  1728  0F9E                     	;# 
  1729  0FE4                     	;# 
  1730  0FE5                     	;# 
  1731  0FE6                     	;# 
  1732  0FE7                     	;# 
  1733  0FE8                     	;# 
  1734  0FE9                     	;# 
  1735  0FEA                     	;# 
  1736  0FEB                     	;# 
  1737  0FED                     	;# 
  1738  0FEE                     	;# 
  1739  0FEF                     	;# 
  1740  0000                     	;# 
  1741  0001                     	;# 
  1742  0002                     	;# 
  1743  0003                     	;# 
  1744  0004                     	;# 
  1745  0005                     	;# 
  1746  0006                     	;# 
  1747  0007                     	;# 
  1748  0008                     	;# 
  1749  0009                     	;# 
  1750  000A                     	;# 
  1751  000B                     	;# 
  1752  000C                     	;# 
  1753  000E                     	;# 
  1754  0011                     	;# 
  1755  0012                     	;# 
  1756  0013                     	;# 
  1757  0015                     	;# 
  1758  0016                     	;# 
  1759  0016                     	;# 
  1760  0017                     	;# 
  1761  0018                     	;# 
  1762  0019                     	;# 
  1763  001A                     	;# 
  1764  001B                     	;# 
  1765  001C                     	;# 
  1766  008C                     	;# 
  1767  008E                     	;# 
  1768  0091                     	;# 
  1769  0092                     	;# 
  1770  0093                     	;# 
  1771  0095                     	;# 
  1772  0096                     	;# 
  1773  0097                     	;# 
  1774  0098                     	;# 
  1775  0099                     	;# 
  1776  009A                     	;# 
  1777  009B                     	;# 
  1778  009B                     	;# 
  1779  009C                     	;# 
  1780  009D                     	;# 
  1781  009E                     	;# 
  1782  009F                     	;# 
  1783  010C                     	;# 
  1784  010E                     	;# 
  1785  0111                     	;# 
  1786  0112                     	;# 
  1787  0113                     	;# 
  1788  0114                     	;# 
  1789  0115                     	;# 
  1790  0116                     	;# 
  1791  0117                     	;# 
  1792  0118                     	;# 
  1793  0119                     	;# 
  1794  011C                     	;# 
  1795  018C                     	;# 
  1796  018E                     	;# 
  1797  0191                     	;# 
  1798  0191                     	;# 
  1799  0192                     	;# 
  1800  0193                     	;# 
  1801  0193                     	;# 
  1802  0194                     	;# 
  1803  0195                     	;# 
  1804  0196                     	;# 
  1805  0197                     	;# 
  1806  0199                     	;# 
  1807  0199                     	;# 
  1808  0199                     	;# 
  1809  019A                     	;# 
  1810  019A                     	;# 
  1811  019A                     	;# 
  1812  019B                     	;# 
  1813  019B                     	;# 
  1814  019B                     	;# 
  1815  019B                     	;# 
  1816  019B                     	;# 
  1817  019C                     	;# 
  1818  019C                     	;# 
  1819  019C                     	;# 
  1820  019D                     	;# 
  1821  019D                     	;# 
  1822  019D                     	;# 
  1823  019E                     	;# 
  1824  019E                     	;# 
  1825  019E                     	;# 
  1826  019F                     	;# 
  1827  019F                     	;# 
  1828  019F                     	;# 
  1829  019F                     	;# 
  1830  019F                     	;# 
  1831  020C                     	;# 
  1832  020E                     	;# 
  1833  0211                     	;# 
  1834  0211                     	;# 
  1835  0212                     	;# 
  1836  0212                     	;# 
  1837  0213                     	;# 
  1838  0213                     	;# 
  1839  0214                     	;# 
  1840  0214                     	;# 
  1841  0215                     	;# 
  1842  0215                     	;# 
  1843  0215                     	;# 
  1844  0215                     	;# 
  1845  0216                     	;# 
  1846  0216                     	;# 
  1847  0217                     	;# 
  1848  0217                     	;# 
  1849  028C                     	;# 
  1850  028E                     	;# 
  1851  0291                     	;# 
  1852  0291                     	;# 
  1853  0292                     	;# 
  1854  0293                     	;# 
  1855  0293                     	;# 
  1856  0298                     	;# 
  1857  0298                     	;# 
  1858  0299                     	;# 
  1859  029A                     	;# 
  1860  029A                     	;# 
  1861  029E                     	;# 
  1862  030C                     	;# 
  1863  030E                     	;# 
  1864  038C                     	;# 
  1865  038E                     	;# 
  1866  0391                     	;# 
  1867  0392                     	;# 
  1868  0393                     	;# 
  1869  0397                     	;# 
  1870  0398                     	;# 
  1871  0399                     	;# 
  1872  0415                     	;# 
  1873  0416                     	;# 
  1874  0417                     	;# 
  1875  041C                     	;# 
  1876  041D                     	;# 
  1877  041E                     	;# 
  1878  0511                     	;# 
  1879  0515                     	;# 
  1880  0617                     	;# 
  1881  0618                     	;# 
  1882  0619                     	;# 
  1883  0619                     	;# 
  1884  061A                     	;# 
  1885  061B                     	;# 
  1886  061C                     	;# 
  1887  061C                     	;# 
  1888  0691                     	;# 
  1889  0692                     	;# 
  1890  0693                     	;# 
  1891  0694                     	;# 
  1892  0695                     	;# 
  1893  0696                     	;# 
  1894  0697                     	;# 
  1895  0698                     	;# 
  1896  0699                     	;# 
  1897  069A                     	;# 
  1898  069B                     	;# 
  1899  069C                     	;# 
  1900  069D                     	;# 
  1901  069E                     	;# 
  1902  069F                     	;# 
  1903  0E0F                     	;# 
  1904  0E10                     	;# 
  1905  0E11                     	;# 
  1906  0E12                     	;# 
  1907  0E13                     	;# 
  1908  0E14                     	;# 
  1909  0E15                     	;# 
  1910  0E17                     	;# 
  1911  0E20                     	;# 
  1912  0E21                     	;# 
  1913  0E22                     	;# 
  1914  0E24                     	;# 
  1915  0E25                     	;# 
  1916  0E28                     	;# 
  1917  0E29                     	;# 
  1918  0E2A                     	;# 
  1919  0E2B                     	;# 
  1920  0E90                     	;# 
  1921  0E91                     	;# 
  1922  0E92                     	;# 
  1923  0E94                     	;# 
  1924  0E95                     	;# 
  1925  0EA0                     	;# 
  1926  0EA1                     	;# 
  1927  0EA2                     	;# 
  1928  0EA3                     	;# 
  1929  0EA4                     	;# 
  1930  0EA5                     	;# 
  1931  0F0F                     	;# 
  1932  0F10                     	;# 
  1933  0F11                     	;# 
  1934  0F12                     	;# 
  1935  0F13                     	;# 
  1936  0F14                     	;# 
  1937  0F15                     	;# 
  1938  0F16                     	;# 
  1939  0F17                     	;# 
  1940  0F18                     	;# 
  1941  0F19                     	;# 
  1942  0F1A                     	;# 
  1943  0F1B                     	;# 
  1944  0F1C                     	;# 
  1945  0F1D                     	;# 
  1946  0F1E                     	;# 
  1947  0F1F                     	;# 
  1948  0F20                     	;# 
  1949  0F21                     	;# 
  1950  0F22                     	;# 
  1951  0F23                     	;# 
  1952  0F24                     	;# 
  1953  0F25                     	;# 
  1954  0F26                     	;# 
  1955  0F27                     	;# 
  1956  0F28                     	;# 
  1957  0F29                     	;# 
  1958  0F2A                     	;# 
  1959  0F2B                     	;# 
  1960  0F2C                     	;# 
  1961  0F2D                     	;# 
  1962  0F9E                     	;# 
  1963  0FE4                     	;# 
  1964  0FE5                     	;# 
  1965  0FE6                     	;# 
  1966  0FE7                     	;# 
  1967  0FE8                     	;# 
  1968  0FE9                     	;# 
  1969  0FEA                     	;# 
  1970  0FEB                     	;# 
  1971  0FED                     	;# 
  1972  0FEE                     	;# 
  1973  0FEF                     	;# 
  1974  0000                     	;# 
  1975  0001                     	;# 
  1976  0002                     	;# 
  1977  0003                     	;# 
  1978  0004                     	;# 
  1979  0005                     	;# 
  1980  0006                     	;# 
  1981  0007                     	;# 
  1982  0008                     	;# 
  1983  0009                     	;# 
  1984  000A                     	;# 
  1985  000B                     	;# 
  1986  000C                     	;# 
  1987  000E                     	;# 
  1988  0011                     	;# 
  1989  0012                     	;# 
  1990  0013                     	;# 
  1991  0015                     	;# 
  1992  0016                     	;# 
  1993  0016                     	;# 
  1994  0017                     	;# 
  1995  0018                     	;# 
  1996  0019                     	;# 
  1997  001A                     	;# 
  1998  001B                     	;# 
  1999  001C                     	;# 
  2000  008C                     	;# 
  2001  008E                     	;# 
  2002  0091                     	;# 
  2003  0092                     	;# 
  2004  0093                     	;# 
  2005  0095                     	;# 
  2006  0096                     	;# 
  2007  0097                     	;# 
  2008  0098                     	;# 
  2009  0099                     	;# 
  2010  009A                     	;# 
  2011  009B                     	;# 
  2012  009B                     	;# 
  2013  009C                     	;# 
  2014  009D                     	;# 
  2015  009E                     	;# 
  2016  009F                     	;# 
  2017  010C                     	;# 
  2018  010E                     	;# 
  2019  0111                     	;# 
  2020  0112                     	;# 
  2021  0113                     	;# 
  2022  0114                     	;# 
  2023  0115                     	;# 
  2024  0116                     	;# 
  2025  0117                     	;# 
  2026  0118                     	;# 
  2027  0119                     	;# 
  2028  011C                     	;# 
  2029  018C                     	;# 
  2030  018E                     	;# 
  2031  0191                     	;# 
  2032  0191                     	;# 
  2033  0192                     	;# 
  2034  0193                     	;# 
  2035  0193                     	;# 
  2036  0194                     	;# 
  2037  0195                     	;# 
  2038  0196                     	;# 
  2039  0197                     	;# 
  2040  0199                     	;# 
  2041  0199                     	;# 
  2042  0199                     	;# 
  2043  019A                     	;# 
  2044  019A                     	;# 
  2045  019A                     	;# 
  2046  019B                     	;# 
  2047  019B                     	;# 
  2048  019B                     	;# 
  2049  019B                     	;# 
  2050  019B                     	;# 
  2051  019C                     	;# 
  2052  019C                     	;# 
  2053  019C                     	;# 
  2054  019D                     	;# 
  2055  019D                     	;# 
  2056  019D                     	;# 
  2057  019E                     	;# 
  2058  019E                     	;# 
  2059  019E                     	;# 
  2060  019F                     	;# 
  2061  019F                     	;# 
  2062  019F                     	;# 
  2063  019F                     	;# 
  2064  019F                     	;# 
  2065  020C                     	;# 
  2066  020E                     	;# 
  2067  0211                     	;# 
  2068  0211                     	;# 
  2069  0212                     	;# 
  2070  0212                     	;# 
  2071  0213                     	;# 
  2072  0213                     	;# 
  2073  0214                     	;# 
  2074  0214                     	;# 
  2075  0215                     	;# 
  2076  0215                     	;# 
  2077  0215                     	;# 
  2078  0215                     	;# 
  2079  0216                     	;# 
  2080  0216                     	;# 
  2081  0217                     	;# 
  2082  0217                     	;# 
  2083  028C                     	;# 
  2084  028E                     	;# 
  2085  0291                     	;# 
  2086  0291                     	;# 
  2087  0292                     	;# 
  2088  0293                     	;# 
  2089  0293                     	;# 
  2090  0298                     	;# 
  2091  0298                     	;# 
  2092  0299                     	;# 
  2093  029A                     	;# 
  2094  029A                     	;# 
  2095  029E                     	;# 
  2096  030C                     	;# 
  2097  030E                     	;# 
  2098  038C                     	;# 
  2099  038E                     	;# 
  2100  0391                     	;# 
  2101  0392                     	;# 
  2102  0393                     	;# 
  2103  0397                     	;# 
  2104  0398                     	;# 
  2105  0399                     	;# 
  2106  0415                     	;# 
  2107  0416                     	;# 
  2108  0417                     	;# 
  2109  041C                     	;# 
  2110  041D                     	;# 
  2111  041E                     	;# 
  2112  0511                     	;# 
  2113  0515                     	;# 
  2114  0617                     	;# 
  2115  0618                     	;# 
  2116  0619                     	;# 
  2117  0619                     	;# 
  2118  061A                     	;# 
  2119  061B                     	;# 
  2120  061C                     	;# 
  2121  061C                     	;# 
  2122  0691                     	;# 
  2123  0692                     	;# 
  2124  0693                     	;# 
  2125  0694                     	;# 
  2126  0695                     	;# 
  2127  0696                     	;# 
  2128  0697                     	;# 
  2129  0698                     	;# 
  2130  0699                     	;# 
  2131  069A                     	;# 
  2132  069B                     	;# 
  2133  069C                     	;# 
  2134  069D                     	;# 
  2135  069E                     	;# 
  2136  069F                     	;# 
  2137  0E0F                     	;# 
  2138  0E10                     	;# 
  2139  0E11                     	;# 
  2140  0E12                     	;# 
  2141  0E13                     	;# 
  2142  0E14                     	;# 
  2143  0E15                     	;# 
  2144  0E17                     	;# 
  2145  0E20                     	;# 
  2146  0E21                     	;# 
  2147  0E22                     	;# 
  2148  0E24                     	;# 
  2149  0E25                     	;# 
  2150  0E28                     	;# 
  2151  0E29                     	;# 
  2152  0E2A                     	;# 
  2153  0E2B                     	;# 
  2154  0E90                     	;# 
  2155  0E91                     	;# 
  2156  0E92                     	;# 
  2157  0E94                     	;# 
  2158  0E95                     	;# 
  2159  0EA0                     	;# 
  2160  0EA1                     	;# 
  2161  0EA2                     	;# 
  2162  0EA3                     	;# 
  2163  0EA4                     	;# 
  2164  0EA5                     	;# 
  2165  0F0F                     	;# 
  2166  0F10                     	;# 
  2167  0F11                     	;# 
  2168  0F12                     	;# 
  2169  0F13                     	;# 
  2170  0F14                     	;# 
  2171  0F15                     	;# 
  2172  0F16                     	;# 
  2173  0F17                     	;# 
  2174  0F18                     	;# 
  2175  0F19                     	;# 
  2176  0F1A                     	;# 
  2177  0F1B                     	;# 
  2178  0F1C                     	;# 
  2179  0F1D                     	;# 
  2180  0F1E                     	;# 
  2181  0F1F                     	;# 
  2182  0F20                     	;# 
  2183  0F21                     	;# 
  2184  0F22                     	;# 
  2185  0F23                     	;# 
  2186  0F24                     	;# 
  2187  0F25                     	;# 
  2188  0F26                     	;# 
  2189  0F27                     	;# 
  2190  0F28                     	;# 
  2191  0F29                     	;# 
  2192  0F2A                     	;# 
  2193  0F2B                     	;# 
  2194  0F2C                     	;# 
  2195  0F2D                     	;# 
  2196  0F9E                     	;# 
  2197  0FE4                     	;# 
  2198  0FE5                     	;# 
  2199  0FE6                     	;# 
  2200  0FE7                     	;# 
  2201  0FE8                     	;# 
  2202  0FE9                     	;# 
  2203  0FEA                     	;# 
  2204  0FEB                     	;# 
  2205  0FED                     	;# 
  2206  0FEE                     	;# 
  2207  0FEF                     	;# 
  2208  0000                     	;# 
  2209  0001                     	;# 
  2210  0002                     	;# 
  2211  0003                     	;# 
  2212  0004                     	;# 
  2213  0005                     	;# 
  2214  0006                     	;# 
  2215  0007                     	;# 
  2216  0008                     	;# 
  2217  0009                     	;# 
  2218  000A                     	;# 
  2219  000B                     	;# 
  2220  000C                     	;# 
  2221  000E                     	;# 
  2222  0011                     	;# 
  2223  0012                     	;# 
  2224  0013                     	;# 
  2225  0015                     	;# 
  2226  0016                     	;# 
  2227  0016                     	;# 
  2228  0017                     	;# 
  2229  0018                     	;# 
  2230  0019                     	;# 
  2231  001A                     	;# 
  2232  001B                     	;# 
  2233  001C                     	;# 
  2234  008C                     	;# 
  2235  008E                     	;# 
  2236  0091                     	;# 
  2237  0092                     	;# 
  2238  0093                     	;# 
  2239  0095                     	;# 
  2240  0096                     	;# 
  2241  0097                     	;# 
  2242  0098                     	;# 
  2243  0099                     	;# 
  2244  009A                     	;# 
  2245  009B                     	;# 
  2246  009B                     	;# 
  2247  009C                     	;# 
  2248  009D                     	;# 
  2249  009E                     	;# 
  2250  009F                     	;# 
  2251  010C                     	;# 
  2252  010E                     	;# 
  2253  0111                     	;# 
  2254  0112                     	;# 
  2255  0113                     	;# 
  2256  0114                     	;# 
  2257  0115                     	;# 
  2258  0116                     	;# 
  2259  0117                     	;# 
  2260  0118                     	;# 
  2261  0119                     	;# 
  2262  011C                     	;# 
  2263  018C                     	;# 
  2264  018E                     	;# 
  2265  0191                     	;# 
  2266  0191                     	;# 
  2267  0192                     	;# 
  2268  0193                     	;# 
  2269  0193                     	;# 
  2270  0194                     	;# 
  2271  0195                     	;# 
  2272  0196                     	;# 
  2273  0197                     	;# 
  2274  0199                     	;# 
  2275  0199                     	;# 
  2276  0199                     	;# 
  2277  019A                     	;# 
  2278  019A                     	;# 
  2279  019A                     	;# 
  2280  019B                     	;# 
  2281  019B                     	;# 
  2282  019B                     	;# 
  2283  019B                     	;# 
  2284  019B                     	;# 
  2285  019C                     	;# 
  2286  019C                     	;# 
  2287  019C                     	;# 
  2288  019D                     	;# 
  2289  019D                     	;# 
  2290  019D                     	;# 
  2291  019E                     	;# 
  2292  019E                     	;# 
  2293  019E                     	;# 
  2294  019F                     	;# 
  2295  019F                     	;# 
  2296  019F                     	;# 
  2297  019F                     	;# 
  2298  019F                     	;# 
  2299  020C                     	;# 
  2300  020E                     	;# 
  2301  0211                     	;# 
  2302  0211                     	;# 
  2303  0212                     	;# 
  2304  0212                     	;# 
  2305  0213                     	;# 
  2306  0213                     	;# 
  2307  0214                     	;# 
  2308  0214                     	;# 
  2309  0215                     	;# 
  2310  0215                     	;# 
  2311  0215                     	;# 
  2312  0215                     	;# 
  2313  0216                     	;# 
  2314  0216                     	;# 
  2315  0217                     	;# 
  2316  0217                     	;# 
  2317  028C                     	;# 
  2318  028E                     	;# 
  2319  0291                     	;# 
  2320  0291                     	;# 
  2321  0292                     	;# 
  2322  0293                     	;# 
  2323  0293                     	;# 
  2324  0298                     	;# 
  2325  0298                     	;# 
  2326  0299                     	;# 
  2327  029A                     	;# 
  2328  029A                     	;# 
  2329  029E                     	;# 
  2330  030C                     	;# 
  2331  030E                     	;# 
  2332  038C                     	;# 
  2333  038E                     	;# 
  2334  0391                     	;# 
  2335  0392                     	;# 
  2336  0393                     	;# 
  2337  0397                     	;# 
  2338  0398                     	;# 
  2339  0399                     	;# 
  2340  0415                     	;# 
  2341  0416                     	;# 
  2342  0417                     	;# 
  2343  041C                     	;# 
  2344  041D                     	;# 
  2345  041E                     	;# 
  2346  0511                     	;# 
  2347  0515                     	;# 
  2348  0617                     	;# 
  2349  0618                     	;# 
  2350  0619                     	;# 
  2351  0619                     	;# 
  2352  061A                     	;# 
  2353  061B                     	;# 
  2354  061C                     	;# 
  2355  061C                     	;# 
  2356  0691                     	;# 
  2357  0692                     	;# 
  2358  0693                     	;# 
  2359  0694                     	;# 
  2360  0695                     	;# 
  2361  0696                     	;# 
  2362  0697                     	;# 
  2363  0698                     	;# 
  2364  0699                     	;# 
  2365  069A                     	;# 
  2366  069B                     	;# 
  2367  069C                     	;# 
  2368  069D                     	;# 
  2369  069E                     	;# 
  2370  069F                     	;# 
  2371  0E0F                     	;# 
  2372  0E10                     	;# 
  2373  0E11                     	;# 
  2374  0E12                     	;# 
  2375  0E13                     	;# 
  2376  0E14                     	;# 
  2377  0E15                     	;# 
  2378  0E17                     	;# 
  2379  0E20                     	;# 
  2380  0E21                     	;# 
  2381  0E22                     	;# 
  2382  0E24                     	;# 
  2383  0E25                     	;# 
  2384  0E28                     	;# 
  2385  0E29                     	;# 
  2386  0E2A                     	;# 
  2387  0E2B                     	;# 
  2388  0E90                     	;# 
  2389  0E91                     	;# 
  2390  0E92                     	;# 
  2391  0E94                     	;# 
  2392  0E95                     	;# 
  2393  0EA0                     	;# 
  2394  0EA1                     	;# 
  2395  0EA2                     	;# 
  2396  0EA3                     	;# 
  2397  0EA4                     	;# 
  2398  0EA5                     	;# 
  2399  0F0F                     	;# 
  2400  0F10                     	;# 
  2401  0F11                     	;# 
  2402  0F12                     	;# 
  2403  0F13                     	;# 
  2404  0F14                     	;# 
  2405  0F15                     	;# 
  2406  0F16                     	;# 
  2407  0F17                     	;# 
  2408  0F18                     	;# 
  2409  0F19                     	;# 
  2410  0F1A                     	;# 
  2411  0F1B                     	;# 
  2412  0F1C                     	;# 
  2413  0F1D                     	;# 
  2414  0F1E                     	;# 
  2415  0F1F                     	;# 
  2416  0F20                     	;# 
  2417  0F21                     	;# 
  2418  0F22                     	;# 
  2419  0F23                     	;# 
  2420  0F24                     	;# 
  2421  0F25                     	;# 
  2422  0F26                     	;# 
  2423  0F27                     	;# 
  2424  0F28                     	;# 
  2425  0F29                     	;# 
  2426  0F2A                     	;# 
  2427  0F2B                     	;# 
  2428  0F2C                     	;# 
  2429  0F2D                     	;# 
  2430  0F9E                     	;# 
  2431  0FE4                     	;# 
  2432  0FE5                     	;# 
  2433  0FE6                     	;# 
  2434  0FE7                     	;# 
  2435  0FE8                     	;# 
  2436  0FE9                     	;# 
  2437  0FEA                     	;# 
  2438  0FEB                     	;# 
  2439  0FED                     	;# 
  2440  0FEE                     	;# 
  2441  0FEF                     	;# 
  2442  0000                     	;# 
  2443  0001                     	;# 
  2444  0002                     	;# 
  2445  0003                     	;# 
  2446  0004                     	;# 
  2447  0005                     	;# 
  2448  0006                     	;# 
  2449  0007                     	;# 
  2450  0008                     	;# 
  2451  0009                     	;# 
  2452  000A                     	;# 
  2453  000B                     	;# 
  2454  000C                     	;# 
  2455  000E                     	;# 
  2456  0011                     	;# 
  2457  0012                     	;# 
  2458  0013                     	;# 
  2459  0015                     	;# 
  2460  0016                     	;# 
  2461  0016                     	;# 
  2462  0017                     	;# 
  2463  0018                     	;# 
  2464  0019                     	;# 
  2465  001A                     	;# 
  2466  001B                     	;# 
  2467  001C                     	;# 
  2468  008C                     	;# 
  2469  008E                     	;# 
  2470  0091                     	;# 
  2471  0092                     	;# 
  2472  0093                     	;# 
  2473  0095                     	;# 
  2474  0096                     	;# 
  2475  0097                     	;# 
  2476  0098                     	;# 
  2477  0099                     	;# 
  2478  009A                     	;# 
  2479  009B                     	;# 
  2480  009B                     	;# 
  2481  009C                     	;# 
  2482  009D                     	;# 
  2483  009E                     	;# 
  2484  009F                     	;# 
  2485  010C                     	;# 
  2486  010E                     	;# 
  2487  0111                     	;# 
  2488  0112                     	;# 
  2489  0113                     	;# 
  2490  0114                     	;# 
  2491  0115                     	;# 
  2492  0116                     	;# 
  2493  0117                     	;# 
  2494  0118                     	;# 
  2495  0119                     	;# 
  2496  011C                     	;# 
  2497  018C                     	;# 
  2498  018E                     	;# 
  2499  0191                     	;# 
  2500  0191                     	;# 
  2501  0192                     	;# 
  2502  0193                     	;# 
  2503  0193                     	;# 
  2504  0194                     	;# 
  2505  0195                     	;# 
  2506  0196                     	;# 
  2507  0197                     	;# 
  2508  0199                     	;# 
  2509  0199                     	;# 
  2510  0199                     	;# 
  2511  019A                     	;# 
  2512  019A                     	;# 
  2513  019A                     	;# 
  2514  019B                     	;# 
  2515  019B                     	;# 
  2516  019B                     	;# 
  2517  019B                     	;# 
  2518  019B                     	;# 
  2519  019C                     	;# 
  2520  019C                     	;# 
  2521  019C                     	;# 
  2522  019D                     	;# 
  2523  019D                     	;# 
  2524  019D                     	;# 
  2525  019E                     	;# 
  2526  019E                     	;# 
  2527  019E                     	;# 
  2528  019F                     	;# 
  2529  019F                     	;# 
  2530  019F                     	;# 
  2531  019F                     	;# 
  2532  019F                     	;# 
  2533  020C                     	;# 
  2534  020E                     	;# 
  2535  0211                     	;# 
  2536  0211                     	;# 
  2537  0212                     	;# 
  2538  0212                     	;# 
  2539  0213                     	;# 
  2540  0213                     	;# 
  2541  0214                     	;# 
  2542  0214                     	;# 
  2543  0215                     	;# 
  2544  0215                     	;# 
  2545  0215                     	;# 
  2546  0215                     	;# 
  2547  0216                     	;# 
  2548  0216                     	;# 
  2549  0217                     	;# 
  2550  0217                     	;# 
  2551  028C                     	;# 
  2552  028E                     	;# 
  2553  0291                     	;# 
  2554  0291                     	;# 
  2555  0292                     	;# 
  2556  0293                     	;# 
  2557  0293                     	;# 
  2558  0298                     	;# 
  2559  0298                     	;# 
  2560  0299                     	;# 
  2561  029A                     	;# 
  2562  029A                     	;# 
  2563  029E                     	;# 
  2564  030C                     	;# 
  2565  030E                     	;# 
  2566  038C                     	;# 
  2567  038E                     	;# 
  2568  0391                     	;# 
  2569  0392                     	;# 
  2570  0393                     	;# 
  2571  0397                     	;# 
  2572  0398                     	;# 
  2573  0399                     	;# 
  2574  0415                     	;# 
  2575  0416                     	;# 
  2576  0417                     	;# 
  2577  041C                     	;# 
  2578  041D                     	;# 
  2579  041E                     	;# 
  2580  0511                     	;# 
  2581  0515                     	;# 
  2582  0617                     	;# 
  2583  0618                     	;# 
  2584  0619                     	;# 
  2585  0619                     	;# 
  2586  061A                     	;# 
  2587  061B                     	;# 
  2588  061C                     	;# 
  2589  061C                     	;# 
  2590  0691                     	;# 
  2591  0692                     	;# 
  2592  0693                     	;# 
  2593  0694                     	;# 
  2594  0695                     	;# 
  2595  0696                     	;# 
  2596  0697                     	;# 
  2597  0698                     	;# 
  2598  0699                     	;# 
  2599  069A                     	;# 
  2600  069B                     	;# 
  2601  069C                     	;# 
  2602  069D                     	;# 
  2603  069E                     	;# 
  2604  069F                     	;# 
  2605  0E0F                     	;# 
  2606  0E10                     	;# 
  2607  0E11                     	;# 
  2608  0E12                     	;# 
  2609  0E13                     	;# 
  2610  0E14                     	;# 
  2611  0E15                     	;# 
  2612  0E17                     	;# 
  2613  0E20                     	;# 
  2614  0E21                     	;# 
  2615  0E22                     	;# 
  2616  0E24                     	;# 
  2617  0E25                     	;# 
  2618  0E28                     	;# 
  2619  0E29                     	;# 
  2620  0E2A                     	;# 
  2621  0E2B                     	;# 
  2622  0E90                     	;# 
  2623  0E91                     	;# 
  2624  0E92                     	;# 
  2625  0E94                     	;# 
  2626  0E95                     	;# 
  2627  0EA0                     	;# 
  2628  0EA1                     	;# 
  2629  0EA2                     	;# 
  2630  0EA3                     	;# 
  2631  0EA4                     	;# 
  2632  0EA5                     	;# 
  2633  0F0F                     	;# 
  2634  0F10                     	;# 
  2635  0F11                     	;# 
  2636  0F12                     	;# 
  2637  0F13                     	;# 
  2638  0F14                     	;# 
  2639  0F15                     	;# 
  2640  0F16                     	;# 
  2641  0F17                     	;# 
  2642  0F18                     	;# 
  2643  0F19                     	;# 
  2644  0F1A                     	;# 
  2645  0F1B                     	;# 
  2646  0F1C                     	;# 
  2647  0F1D                     	;# 
  2648  0F1E                     	;# 
  2649  0F1F                     	;# 
  2650  0F20                     	;# 
  2651  0F21                     	;# 
  2652  0F22                     	;# 
  2653  0F23                     	;# 
  2654  0F24                     	;# 
  2655  0F25                     	;# 
  2656  0F26                     	;# 
  2657  0F27                     	;# 
  2658  0F28                     	;# 
  2659  0F29                     	;# 
  2660  0F2A                     	;# 
  2661  0F2B                     	;# 
  2662  0F2C                     	;# 
  2663  0F2D                     	;# 
  2664  0F9E                     	;# 
  2665  0FE4                     	;# 
  2666  0FE5                     	;# 
  2667  0FE6                     	;# 
  2668  0FE7                     	;# 
  2669  0FE8                     	;# 
  2670  0FE9                     	;# 
  2671  0FEA                     	;# 
  2672  0FEB                     	;# 
  2673  0FED                     	;# 
  2674  0FEE                     	;# 
  2675  0FEF                     	;# 
  2676                           
  2677                           	psect	idataBANK1
  2678  1841                     __pidataBANK1:	
  2679                           
  2680                           ;initializer for _MEM
  2681  1841  3400               	retlw	0
  2682  1842  3400               	retlw	0
  2683  1843  3480               	retlw	128
  2684  1844  3425               	retlw	37
  2685                           
  2686                           	psect	idataBANK4
  2687  183D                     __pidataBANK4:	
  2688                           
  2689                           ;initializer for _BAUD
  2690  183D  3480               	retlw	128
  2691  183E  3425               	retlw	37
  2692  183F  3400               	retlw	0
  2693  1840  3400               	retlw	0
  2694                           
  2695                           	psect	stringtext
  2696  0700                     __pstringtext:	
  2697  0700                     _ScanCodeFunctionNoE0:	
  2698  0700  3400               	retlw	0
  2699  0701  3411               	retlw	17
  2700  0702  3400               	retlw	0
  2701  0703  340C               	retlw	12
  2702  0704  340A               	retlw	10
  2703  0705  3406               	retlw	6
  2704  0706  3407               	retlw	7
  2705  0707  3414               	retlw	20
  2706  0708  3400               	retlw	0
  2707  0709  3412               	retlw	18
  2708  070A  3410               	retlw	16
  2709  070B  340E               	retlw	14
  2710  070C  340B               	retlw	11
  2711  070D  3400               	retlw	0
  2712  070E  3400               	retlw	0
  2713  070F  3400               	retlw	0
  2714  0710  3400               	retlw	0
  2715  0711  341C               	retlw	28
  2716  0712  3400               	retlw	0
  2717  0713  3400               	retlw	0
  2718  0714  341A               	retlw	26
  2719  0715  3400               	retlw	0
  2720  0716  3400               	retlw	0
  2721  0717  3400               	retlw	0
  2722  0718  3400               	retlw	0
  2723  0719  3400               	retlw	0
  2724  071A  3400               	retlw	0
  2725  071B  3400               	retlw	0
  2726  071C  3400               	retlw	0
  2727  071D  3400               	retlw	0
  2728  071E  3400               	retlw	0
  2729  071F  3400               	retlw	0
  2730  0720  3400               	retlw	0
  2731  0721  3400               	retlw	0
  2732  0722  3400               	retlw	0
  2733  0723  3400               	retlw	0
  2734  0724  3400               	retlw	0
  2735  0725  3400               	retlw	0
  2736  0726  3400               	retlw	0
  2737  0727  3400               	retlw	0
  2738  0728  3400               	retlw	0
  2739  0729  3400               	retlw	0
  2740  072A  3400               	retlw	0
  2741  072B  3400               	retlw	0
  2742  072C  3400               	retlw	0
  2743  072D  3400               	retlw	0
  2744  072E  3400               	retlw	0
  2745  072F  3400               	retlw	0
  2746  0730  3400               	retlw	0
  2747  0731  3400               	retlw	0
  2748  0732  3400               	retlw	0
  2749  0733  3400               	retlw	0
  2750  0734  3400               	retlw	0
  2751  0735  3400               	retlw	0
  2752  0736  3400               	retlw	0
  2753  0737  3400               	retlw	0
  2754  0738  3400               	retlw	0
  2755  0739  3400               	retlw	0
  2756  073A  3400               	retlw	0
  2757  073B  3400               	retlw	0
  2758  073C  3400               	retlw	0
  2759  073D  3400               	retlw	0
  2760  073E  3400               	retlw	0
  2761  073F  3400               	retlw	0
  2762  0740  3400               	retlw	0
  2763  0741  3400               	retlw	0
  2764  0742  3400               	retlw	0
  2765  0743  3400               	retlw	0
  2766  0744  3400               	retlw	0
  2767  0745  3400               	retlw	0
  2768  0746  3400               	retlw	0
  2769  0747  3400               	retlw	0
  2770  0748  3400               	retlw	0
  2771  0749  3400               	retlw	0
  2772  074A  3400               	retlw	0
  2773  074B  3400               	retlw	0
  2774  074C  3400               	retlw	0
  2775  074D  3400               	retlw	0
  2776  074E  3400               	retlw	0
  2777  074F  3400               	retlw	0
  2778  0750  3400               	retlw	0
  2779  0751  3400               	retlw	0
  2780  0752  3400               	retlw	0
  2781  0753  3400               	retlw	0
  2782  0754  3400               	retlw	0
  2783  0755  3400               	retlw	0
  2784  0756  3400               	retlw	0
  2785  0757  3400               	retlw	0
  2786  0758  3400               	retlw	0
  2787  0759  3400               	retlw	0
  2788  075A  3400               	retlw	0
  2789  075B  3400               	retlw	0
  2790  075C  3400               	retlw	0
  2791  075D  3400               	retlw	0
  2792  075E  3400               	retlw	0
  2793  075F  3400               	retlw	0
  2794  0760  3400               	retlw	0
  2795  0761  3400               	retlw	0
  2796  0762  3400               	retlw	0
  2797  0763  3400               	retlw	0
  2798  0764  3400               	retlw	0
  2799  0765  3400               	retlw	0
  2800  0766  3400               	retlw	0
  2801  0767  3400               	retlw	0
  2802  0768  3400               	retlw	0
  2803  0769  3400               	retlw	0
  2804  076A  3400               	retlw	0
  2805  076B  3400               	retlw	0
  2806  076C  3400               	retlw	0
  2807  076D  3400               	retlw	0
  2808  076E  3400               	retlw	0
  2809  076F  3400               	retlw	0
  2810  0770  3400               	retlw	0
  2811  0771  3400               	retlw	0
  2812  0772  3400               	retlw	0
  2813  0773  3400               	retlw	0
  2814  0774  3400               	retlw	0
  2815  0775  3400               	retlw	0
  2816  0776  3400               	retlw	0
  2817  0777  3400               	retlw	0
  2818  0778  3413               	retlw	19
  2819  0779  3400               	retlw	0
  2820  077A  3400               	retlw	0
  2821  077B  3400               	retlw	0
  2822  077C  3400               	retlw	0
  2823  077D  3400               	retlw	0
  2824  077E  3400               	retlw	0
  2825  077F  3400               	retlw	0
  2826  0780  3400               	retlw	0
  2827  0781  3400               	retlw	0
  2828  0782  3400               	retlw	0
  2829  0783  340F               	retlw	15
  2830  0784                     __end_of_ScanCodeFunctionNoE0:	
  2831  0784                     _ScanCode:	
  2832  0784  3409               	retlw	9
  2833  0785  3460               	retlw	96
  2834  0786  3400               	retlw	0
  2835  0787  3400               	retlw	0
  2836  0788  3400               	retlw	0
  2837  0789  3400               	retlw	0
  2838  078A  3400               	retlw	0
  2839  078B  3400               	retlw	0
  2840  078C  3471               	retlw	113
  2841  078D  3431               	retlw	49
  2842  078E  3400               	retlw	0
  2843  078F  3400               	retlw	0
  2844  0790  3400               	retlw	0
  2845  0791  347A               	retlw	122
  2846  0792  3473               	retlw	115
  2847  0793  3461               	retlw	97
  2848  0794  3477               	retlw	119
  2849  0795  3432               	retlw	50
  2850  0796  3400               	retlw	0
  2851  0797  3400               	retlw	0
  2852  0798  3463               	retlw	99
  2853  0799  3478               	retlw	120
  2854  079A  3464               	retlw	100
  2855  079B  3465               	retlw	101
  2856  079C  3434               	retlw	52
  2857  079D  3433               	retlw	51
  2858  079E  3400               	retlw	0
  2859  079F  3400               	retlw	0
  2860  07A0  3420               	retlw	32
  2861  07A1  3476               	retlw	118
  2862  07A2  3466               	retlw	102
  2863  07A3  3474               	retlw	116
  2864  07A4  3472               	retlw	114
  2865  07A5  3435               	retlw	53
  2866  07A6  3400               	retlw	0
  2867  07A7  3400               	retlw	0
  2868  07A8  346E               	retlw	110
  2869  07A9  3462               	retlw	98
  2870  07AA  3468               	retlw	104
  2871  07AB  3467               	retlw	103
  2872  07AC  3479               	retlw	121
  2873  07AD  3436               	retlw	54
  2874  07AE  3400               	retlw	0
  2875  07AF  3400               	retlw	0
  2876  07B0  3400               	retlw	0
  2877  07B1  346D               	retlw	109
  2878  07B2  346A               	retlw	106
  2879  07B3  3475               	retlw	117
  2880  07B4  3437               	retlw	55
  2881  07B5  3438               	retlw	56
  2882  07B6  3400               	retlw	0
  2883  07B7  3400               	retlw	0
  2884  07B8  342C               	retlw	44
  2885  07B9  346B               	retlw	107
  2886  07BA  3469               	retlw	105
  2887  07BB  346F               	retlw	111
  2888  07BC  3430               	retlw	48
  2889  07BD  3439               	retlw	57
  2890  07BE  3400               	retlw	0
  2891  07BF  3400               	retlw	0
  2892  07C0  342E               	retlw	46
  2893  07C1  342F               	retlw	47
  2894  07C2  346C               	retlw	108
  2895  07C3  343B               	retlw	59
  2896  07C4  3470               	retlw	112
  2897  07C5  342D               	retlw	45
  2898  07C6  3400               	retlw	0
  2899  07C7  3400               	retlw	0
  2900  07C8  3400               	retlw	0
  2901  07C9  3427               	retlw	39
  2902  07CA  3400               	retlw	0
  2903  07CB  345B               	retlw	91
  2904  07CC  343D               	retlw	61
  2905  07CD  3400               	retlw	0
  2906  07CE  3400               	retlw	0
  2907  07CF  3400               	retlw	0
  2908  07D0  3400               	retlw	0
  2909  07D1  340D               	retlw	13
  2910  07D2  345D               	retlw	93
  2911  07D3  3400               	retlw	0
  2912  07D4  345C               	retlw	92
  2913  07D5  3400               	retlw	0
  2914  07D6  3400               	retlw	0
  2915  07D7  3400               	retlw	0
  2916  07D8  3400               	retlw	0
  2917  07D9  3400               	retlw	0
  2918  07DA  3400               	retlw	0
  2919  07DB  3400               	retlw	0
  2920  07DC  3400               	retlw	0
  2921  07DD  3408               	retlw	8
  2922  07DE  3400               	retlw	0
  2923  07DF  3400               	retlw	0
  2924  07E0  3431               	retlw	49
  2925  07E1  3400               	retlw	0
  2926  07E2  3434               	retlw	52
  2927  07E3  3437               	retlw	55
  2928  07E4  3400               	retlw	0
  2929  07E5  3400               	retlw	0
  2930  07E6  3400               	retlw	0
  2931  07E7  3430               	retlw	48
  2932  07E8  342E               	retlw	46
  2933  07E9  3432               	retlw	50
  2934  07EA  3435               	retlw	53
  2935  07EB  3436               	retlw	54
  2936  07EC  3438               	retlw	56
  2937  07ED  341B               	retlw	27
  2938  07EE  3400               	retlw	0
  2939  07EF  3400               	retlw	0
  2940  07F0  342B               	retlw	43
  2941  07F1  3433               	retlw	51
  2942  07F2  342D               	retlw	45
  2943  07F3  342A               	retlw	42
  2944  07F4  3439               	retlw	57
  2945  07F5                     __end_of_ScanCode:	
  2946  07F5                     _ScanCodeSHIFT:	
  2947  07F5  3409               	retlw	9
  2948  07F6  347E               	retlw	126
  2949  07F7  3400               	retlw	0
  2950  07F8  3400               	retlw	0
  2951  07F9  3400               	retlw	0
  2952  07FA  3400               	retlw	0
  2953  07FB  3400               	retlw	0
  2954  07FC  3400               	retlw	0
  2955  07FD  3451               	retlw	81
  2956  07FE  3421               	retlw	33
  2957  07FF  3400               	retlw	0
  2958  0800  3400               	retlw	0
  2959  0801  3400               	retlw	0
  2960  0802  345A               	retlw	90
  2961  0803  3453               	retlw	83
  2962  0804  3441               	retlw	65
  2963  0805  3457               	retlw	87
  2964  0806  3440               	retlw	64
  2965  0807  3400               	retlw	0
  2966  0808  3400               	retlw	0
  2967  0809  3443               	retlw	67
  2968  080A  3458               	retlw	88
  2969  080B  3444               	retlw	68
  2970  080C  3445               	retlw	69
  2971  080D  3424               	retlw	36
  2972  080E  3423               	retlw	35
  2973  080F  3400               	retlw	0
  2974  0810  3400               	retlw	0
  2975  0811  3420               	retlw	32
  2976  0812  3456               	retlw	86
  2977  0813  3446               	retlw	70
  2978  0814  3454               	retlw	84
  2979  0815  3452               	retlw	82
  2980  0816  3425               	retlw	37
  2981  0817  3400               	retlw	0
  2982  0818  3400               	retlw	0
  2983  0819  344E               	retlw	78
  2984  081A  3442               	retlw	66
  2985  081B  3448               	retlw	72
  2986  081C  3447               	retlw	71
  2987  081D  3459               	retlw	89
  2988  081E  345E               	retlw	94
  2989  081F  3400               	retlw	0
  2990  0820  3400               	retlw	0
  2991  0821  3400               	retlw	0
  2992  0822  344D               	retlw	77
  2993  0823  344A               	retlw	74
  2994  0824  3455               	retlw	85
  2995  0825  3426               	retlw	38
  2996  0826  342A               	retlw	42
  2997  0827  3400               	retlw	0
  2998  0828  3400               	retlw	0
  2999  0829  343C               	retlw	60
  3000  082A  344B               	retlw	75
  3001  082B  3449               	retlw	73
  3002  082C  344F               	retlw	79
  3003  082D  3429               	retlw	41
  3004  082E  3428               	retlw	40
  3005  082F  3400               	retlw	0
  3006  0830  3400               	retlw	0
  3007  0831  343E               	retlw	62
  3008  0832  343F               	retlw	63
  3009  0833  344C               	retlw	76
  3010  0834  343A               	retlw	58
  3011  0835  3450               	retlw	80
  3012  0836  345F               	retlw	95
  3013  0837  3400               	retlw	0
  3014  0838  3400               	retlw	0
  3015  0839  3400               	retlw	0
  3016  083A  3422               	retlw	34
  3017  083B  3400               	retlw	0
  3018  083C  347B               	retlw	123
  3019  083D  342B               	retlw	43
  3020  083E  3400               	retlw	0
  3021  083F  3400               	retlw	0
  3022  0840  3400               	retlw	0
  3023  0841  3400               	retlw	0
  3024  0842  340D               	retlw	13
  3025  0843  347D               	retlw	125
  3026  0844  3400               	retlw	0
  3027  0845  347C               	retlw	124
  3028  0846  3400               	retlw	0
  3029  0847  3400               	retlw	0
  3030  0848  3400               	retlw	0
  3031  0849  3400               	retlw	0
  3032  084A  3400               	retlw	0
  3033  084B  3400               	retlw	0
  3034  084C  3400               	retlw	0
  3035  084D  3400               	retlw	0
  3036  084E  3408               	retlw	8
  3037  084F  3400               	retlw	0
  3038  0850  3400               	retlw	0
  3039  0851  3431               	retlw	49
  3040  0852  3400               	retlw	0
  3041  0853  3434               	retlw	52
  3042  0854  3437               	retlw	55
  3043  0855  3400               	retlw	0
  3044  0856  3400               	retlw	0
  3045  0857  3400               	retlw	0
  3046  0858  3430               	retlw	48
  3047  0859  342E               	retlw	46
  3048  085A  3432               	retlw	50
  3049  085B  3435               	retlw	53
  3050  085C  3436               	retlw	54
  3051  085D  3438               	retlw	56
  3052  085E  341B               	retlw	27
  3053  085F  3400               	retlw	0
  3054  0860  3400               	retlw	0
  3055  0861  342B               	retlw	43
  3056  0862  3433               	retlw	51
  3057  0863  342D               	retlw	45
  3058  0864  342A               	retlw	42
  3059  0865  3439               	retlw	57
  3060  0866                     __end_of_ScanCodeSHIFT:	
  3061  0866                     _ScanCodeFunctionE0:	
  3062  0866  341E               	retlw	30
  3063  0867  3400               	retlw	0
  3064  0868  3400               	retlw	0
  3065  0869  341F               	retlw	31
  3066  086A  3400               	retlw	0
  3067  086B  3400               	retlw	0
  3068  086C  3400               	retlw	0
  3069  086D  3400               	retlw	0
  3070  086E  3400               	retlw	0
  3071  086F  3400               	retlw	0
  3072  0870  3400               	retlw	0
  3073  0871  3400               	retlw	0
  3074  0872  3400               	retlw	0
  3075  0873  3400               	retlw	0
  3076  0874  3419               	retlw	25
  3077  0875  3400               	retlw	0
  3078  0876  3400               	retlw	0
  3079  0877  3400               	retlw	0
  3080  0878  3400               	retlw	0
  3081  0879  3400               	retlw	0
  3082  087A  3400               	retlw	0
  3083  087B  3400               	retlw	0
  3084  087C  341D               	retlw	29
  3085  087D  3400               	retlw	0
  3086  087E  3400               	retlw	0
  3087  087F  3400               	retlw	0
  3088  0880  3400               	retlw	0
  3089  0881  3400               	retlw	0
  3090  0882  3400               	retlw	0
  3091  0883  3400               	retlw	0
  3092  0884  3400               	retlw	0
  3093  0885  3400               	retlw	0
  3094  0886  3400               	retlw	0
  3095  0887  3400               	retlw	0
  3096  0888  3400               	retlw	0
  3097  0889  3400               	retlw	0
  3098  088A  3400               	retlw	0
  3099  088B  3400               	retlw	0
  3100  088C  3400               	retlw	0
  3101  088D  3400               	retlw	0
  3102  088E  3400               	retlw	0
  3103  088F  3400               	retlw	0
  3104  0890  3400               	retlw	0
  3105  0891  3400               	retlw	0
  3106  0892  3400               	retlw	0
  3107  0893  3400               	retlw	0
  3108  0894  3400               	retlw	0
  3109  0895  3400               	retlw	0
  3110  0896  3400               	retlw	0
  3111  0897  3400               	retlw	0
  3112  0898  3400               	retlw	0
  3113  0899  3400               	retlw	0
  3114  089A  3400               	retlw	0
  3115  089B  3400               	retlw	0
  3116  089C  3400               	retlw	0
  3117  089D  3400               	retlw	0
  3118  089E  3400               	retlw	0
  3119  089F  342F               	retlw	47
  3120  08A0  3400               	retlw	0
  3121  08A1  3400               	retlw	0
  3122  08A2  3400               	retlw	0
  3123  08A3  3400               	retlw	0
  3124  08A4  3400               	retlw	0
  3125  08A5  3400               	retlw	0
  3126  08A6  3400               	retlw	0
  3127  08A7  3400               	retlw	0
  3128  08A8  3400               	retlw	0
  3129  08A9  3400               	retlw	0
  3130  08AA  3400               	retlw	0
  3131  08AB  3400               	retlw	0
  3132  08AC  3400               	retlw	0
  3133  08AD  3400               	retlw	0
  3134  08AE  3400               	retlw	0
  3135  08AF  340D               	retlw	13
  3136  08B0  3400               	retlw	0
  3137  08B1  3400               	retlw	0
  3138  08B2  3400               	retlw	0
  3139  08B3  3400               	retlw	0
  3140  08B4  3400               	retlw	0
  3141  08B5  3400               	retlw	0
  3142  08B6  3400               	retlw	0
  3143  08B7  3400               	retlw	0
  3144  08B8  3400               	retlw	0
  3145  08B9  3400               	retlw	0
  3146  08BA  3400               	retlw	0
  3147  08BB  3400               	retlw	0
  3148  08BC  3400               	retlw	0
  3149  08BD  3400               	retlw	0
  3150  08BE  3401               	retlw	1
  3151  08BF  3400               	retlw	0
  3152  08C0  3403               	retlw	3
  3153  08C1  3416               	retlw	22
  3154  08C2  3400               	retlw	0
  3155  08C3  3400               	retlw	0
  3156  08C4  3400               	retlw	0
  3157  08C5  3415               	retlw	21
  3158  08C6  347F               	retlw	127
  3159  08C7  3404               	retlw	4
  3160  08C8  3400               	retlw	0
  3161  08C9  3405               	retlw	5
  3162  08CA  3402               	retlw	2
  3163  08CB  3400               	retlw	0
  3164  08CC  3400               	retlw	0
  3165  08CD  3400               	retlw	0
  3166  08CE  3400               	retlw	0
  3167  08CF  3418               	retlw	24
  3168  08D0  3400               	retlw	0
  3169  08D1  3400               	retlw	0
  3170  08D2  3417               	retlw	23
  3171  08D3                     __end_of_ScanCodeFunctionE0:	
  3172  08D3                     _dpowers:	
  3173  08D3  3401               	retlw	1
  3174  08D4  3400               	retlw	0
  3175  08D5  3400               	retlw	0
  3176  08D6  3400               	retlw	0
  3177  08D7  340A               	retlw	10
  3178  08D8  3400               	retlw	0
  3179  08D9  3400               	retlw	0
  3180  08DA  3400               	retlw	0
  3181  08DB  3464               	retlw	100
  3182  08DC  3400               	retlw	0
  3183  08DD  3400               	retlw	0
  3184  08DE  3400               	retlw	0
  3185  08DF  34E8               	retlw	232
  3186  08E0  3403               	retlw	3
  3187  08E1  3400               	retlw	0
  3188  08E2  3400               	retlw	0
  3189  08E3  3410               	retlw	16
  3190  08E4  3427               	retlw	39
  3191  08E5  3400               	retlw	0
  3192  08E6  3400               	retlw	0
  3193  08E7  34A0               	retlw	160
  3194  08E8  3486               	retlw	134
  3195  08E9  3401               	retlw	1
  3196  08EA  3400               	retlw	0
  3197  08EB  3440               	retlw	64
  3198  08EC  3442               	retlw	66
  3199  08ED  340F               	retlw	15
  3200  08EE  3400               	retlw	0
  3201  08EF  3480               	retlw	128
  3202  08F0  3496               	retlw	150
  3203  08F1  3498               	retlw	152
  3204  08F2  3400               	retlw	0
  3205  08F3  3400               	retlw	0
  3206  08F4  34E1               	retlw	225
  3207  08F5  34F5               	retlw	245
  3208  08F6  3405               	retlw	5
  3209  08F7  3400               	retlw	0
  3210  08F8  34CA               	retlw	202
  3211  08F9  349A               	retlw	154
  3212  08FA  343B               	retlw	59
  3213  08FB                     __end_of_dpowers:	
  3214  08FB                     _EvenParityMSG:	
  3215  08FB  3420               	retlw	32
  3216  08FC  3477               	retlw	119
  3217  08FD  3469               	retlw	105
  3218  08FE  3474               	retlw	116
  3219  08FF  3468               	retlw	104
  3220  0900  3420               	retlw	32
  3221  0901  3445               	retlw	69
  3222  0902  3476               	retlw	118
  3223  0903  3465               	retlw	101
  3224  0904  346E               	retlw	110
  3225  0905  3420               	retlw	32
  3226  0906  3470               	retlw	112
  3227  0907  3461               	retlw	97
  3228  0908  3472               	retlw	114
  3229  0909  3469               	retlw	105
  3230  090A  3474               	retlw	116
  3231  090B  3479               	retlw	121
  3232  090C  3420               	retlw	32
  3233  090D  3462               	retlw	98
  3234  090E  3469               	retlw	105
  3235  090F  3474               	retlw	116
  3236  0910  3400               	retlw	0
  3237  0911                     __end_of_EvenParityMSG:	
  3238  0911                     _OddParityMSG:	
  3239  0911  3420               	retlw	32
  3240  0912  3477               	retlw	119
  3241  0913  3469               	retlw	105
  3242  0914  3474               	retlw	116
  3243  0915  3468               	retlw	104
  3244  0916  3420               	retlw	32
  3245  0917  344F               	retlw	79
  3246  0918  3464               	retlw	100
  3247  0919  3464               	retlw	100
  3248  091A  3420               	retlw	32
  3249  091B  3470               	retlw	112
  3250  091C  3461               	retlw	97
  3251  091D  3472               	retlw	114
  3252  091E  3469               	retlw	105
  3253  091F  3474               	retlw	116
  3254  0920  3479               	retlw	121
  3255  0921  3420               	retlw	32
  3256  0922  3462               	retlw	98
  3257  0923  3469               	retlw	105
  3258  0924  3474               	retlw	116
  3259  0925  3400               	retlw	0
  3260  0926                     __end_of_OddParityMSG:	
  3261  0926                     _NoParityMSG:	
  3262  0926  3420               	retlw	32
  3263  0927  3477               	retlw	119
  3264  0928  3469               	retlw	105
  3265  0929  3474               	retlw	116
  3266  092A  3468               	retlw	104
  3267  092B  3420               	retlw	32
  3268  092C  344E               	retlw	78
  3269  092D  346F               	retlw	111
  3270  092E  3420               	retlw	32
  3271  092F  3470               	retlw	112
  3272  0930  3461               	retlw	97
  3273  0931  3472               	retlw	114
  3274  0932  3469               	retlw	105
  3275  0933  3474               	retlw	116
  3276  0934  3479               	retlw	121
  3277  0935  3420               	retlw	32
  3278  0936  3462               	retlw	98
  3279  0937  3469               	retlw	105
  3280  0938  3474               	retlw	116
  3281  0939  3400               	retlw	0
  3282  093A                     __end_of_NoParityMSG:	
  3283  093A                     _SpaceParityMSG:	
  3284  093A  3420               	retlw	32
  3285  093B  3477               	retlw	119
  3286  093C  3469               	retlw	105
  3287  093D  3474               	retlw	116
  3288  093E  3468               	retlw	104
  3289  093F  3420               	retlw	32
  3290  0940  3453               	retlw	83
  3291  0941  3470               	retlw	112
  3292  0942  3461               	retlw	97
  3293  0943  3463               	retlw	99
  3294  0944  3465               	retlw	101
  3295  0945  3420               	retlw	32
  3296  0946  3462               	retlw	98
  3297  0947  3469               	retlw	105
  3298  0948  3474               	retlw	116
  3299  0949  3400               	retlw	0
  3300  094A                     __end_of_SpaceParityMSG:	
  3301  094A                     _MarkParityMSG:	
  3302  094A  3420               	retlw	32
  3303  094B  3477               	retlw	119
  3304  094C  3469               	retlw	105
  3305  094D  3474               	retlw	116
  3306  094E  3468               	retlw	104
  3307  094F  3420               	retlw	32
  3308  0950  344D               	retlw	77
  3309  0951  3461               	retlw	97
  3310  0952  3472               	retlw	114
  3311  0953  346B               	retlw	107
  3312  0954  3420               	retlw	32
  3313  0955  3462               	retlw	98
  3314  0956  3469               	retlw	105
  3315  0957  3474               	retlw	116
  3316  0958  3400               	retlw	0
  3317  0959                     __end_of_MarkParityMSG:	
  3318  0959                     _VoltageMSG:	
  3319  0959  3456               	retlw	86
  3320  095A  346F               	retlw	111
  3321  095B  346C               	retlw	108
  3322  095C  3474               	retlw	116
  3323  095D  3461               	retlw	97
  3324  095E  3467               	retlw	103
  3325  095F  3465               	retlw	101
  3326  0960  3420               	retlw	32
  3327  0961  3474               	retlw	116
  3328  0962  346F               	retlw	111
  3329  0963  346F               	retlw	111
  3330  0964  3420               	retlw	32
  3331  0965  3400               	retlw	0
  3332  0966                     __end_of_VoltageMSG:	
  3333  0966                     _Version:	
  3334  0966  3431               	retlw	49
  3335  0967  342E               	retlw	46
  3336  0968  3433               	retlw	51
  3337  0969  345F               	retlw	95
  3338  096A  3444               	retlw	68
  3339  096B  3457               	retlw	87
  3340  096C  3430               	retlw	48
  3341  096D  3461               	retlw	97
  3342  096E  3400               	retlw	0
  3343  096F                     __end_of_Version:	
  3344  000B                     _INTCON	set	11
  3345  000B                     _INTCONbits	set	11
  3346  0011                     _PIR1bits	set	17
  3347  000C                     _PORTA	set	12
  3348  000E                     _PORTC	set	14
  3349  001B                     _PR2	set	27
  3350  001C                     _T2CON	set	28
  3351  001C                     _T2CONbits	set	28
  3352  001A                     _TMR2	set	26
  3353  009D                     _ADCON0	set	157
  3354  009E                     _ADCON1	set	158
  3355  009F                     _ADCON2	set	159
  3356  009C                     _ADRESH	set	156
  3357  009B                     _ADRESL	set	155
  3358  0095                     _OPTION_REGbits	set	149
  3359  0099                     _OSCCON	set	153
  3360  009A                     _OSCSTAT	set	154
  3361  0091                     _PIE1	set	145
  3362  0091                     _PIE1bits	set	145
  3363  008C                     _TRISAbits	set	140
  3364  008E                     _TRISCbits	set	142
  3365  04D0                     _HFIOFS	set	1232
  3366  0117                     _FVRCON	set	279
  3367  010C                     _LATA	set	268
  3368  010E                     _LATC	set	270
  3369  018C                     _ANSELA	set	396
  3370  018E                     _ANSELC	set	398
  3371  019F                     _BAUD1CON	set	415
  3372  0192                     _PMADRH	set	402
  3373  0191                     _PMADRL	set	401
  3374  0195                     _PMCON1	set	405
  3375  0196                     _PMCON2	set	406
  3376  0194                     _PMDATH	set	404
  3377  0193                     _PMDATL	set	403
  3378  019D                     _RC1STA	set	413
  3379  019D                     _RC1STAbits	set	413
  3380  0199                     _RCREG	set	409
  3381  019D                     _RCSTA	set	413
  3382  019D                     _RCSTAbits	set	413
  3383  019B                     _SPBRG	set	411
  3384  019C                     _SPBRGH	set	412
  3385  019E                     _TX1STA	set	414
  3386  019E                     _TX1STAbits	set	414
  3387  019A                     _TXREG	set	410
  3388  019E                     _TXSTAbits	set	414
  3389  020C                     _WPUA	set	524
  3390  020E                     _WPUC	set	526
  3391  029A                     _CCP2CONbits	set	666
  3392  0393                     _IOCAF	set	915
  3393  0392                     _IOCAN	set	914
  3394  0391                     _IOCAP	set	913
  3395  0E25                     _CKPPS	set	3621
  3396  0E0F                     _PPSLOCK	set	3599
  3397  0E24                     _RXPPS	set	3620
  3398  0EA2                     _RC2PPS	set	3746
  3399  096F                     STR_6:	
  3400  096F  3443               	retlw	67	;'C'
  3401  0970  3468               	retlw	104	;'h'
  3402  0971  3461               	retlw	97	;'a'
  3403  0972  346E               	retlw	110	;'n'
  3404  0973  3467               	retlw	103	;'g'
  3405  0974  3465               	retlw	101	;'e'
  3406  0975  3420               	retlw	32	;' '
  3407  0976  3442               	retlw	66	;'B'
  3408  0977  3441               	retlw	65	;'A'
  3409  0978  3455               	retlw	85	;'U'
  3410  0979  3444               	retlw	68	;'D'
  3411  097A  343A               	retlw	58	;':'
  3412  097B  3420               	retlw	32	;' '
  3413  097C  3422               	retlw	34	;'"'
  3414  097D  3443               	retlw	67	;'C'
  3415  097E  344E               	retlw	78	;'N'
  3416  097F  3454               	retlw	84	;'T'
  3417  0980  3420               	retlw	32	;' '
  3418  0981  342B               	retlw	43	;'+'
  3419  0982  3420               	retlw	32	;' '
  3420  0983  3441               	retlw	65	;'A'
  3421  0984  344C               	retlw	76	;'L'
  3422  0985  3454               	retlw	84	;'T'
  3423  0986  3420               	retlw	32	;' '
  3424  0987  342B               	retlw	43	;'+'
  3425  0988  3420               	retlw	32	;' '
  3426  0989  3444               	retlw	68	;'D'
  3427  098A  3445               	retlw	69	;'E'
  3428  098B  344C               	retlw	76	;'L'
  3429  098C  3422               	retlw	34	;'"'
  3430  098D  340D               	retlw	13
  3431  098E  340A               	retlw	10
  3432  098F  3400               	retlw	0
  3433  0990                     STR_3:	
  3434  0990  340D               	retlw	13
  3435  0991  340A               	retlw	10
  3436  0992  3450               	retlw	80	;'P'
  3437  0993  3453               	retlw	83	;'S'
  3438  0994  342F               	retlw	47	;'/'
  3439  0995  3432               	retlw	50	;'2'
  3440  0996  3420               	retlw	32	;' '
  3441  0997  344B               	retlw	75	;'K'
  3442  0998  3465               	retlw	101	;'e'
  3443  0999  3479               	retlw	121	;'y'
  3444  099A  3462               	retlw	98	;'b'
  3445  099B  346F               	retlw	111	;'o'
  3446  099C  3461               	retlw	97	;'a'
  3447  099D  3472               	retlw	114	;'r'
  3448  099E  3464               	retlw	100	;'d'
  3449  099F  3420               	retlw	32	;' '
  3450  09A0  3474               	retlw	116	;'t'
  3451  09A1  346F               	retlw	111	;'o'
  3452  09A2  3420               	retlw	32	;' '
  3453  09A3  3452               	retlw	82	;'R'
  3454  09A4  3453               	retlw	83	;'S'
  3455  09A5  342D               	retlw	45	;'-'
  3456  09A6  3432               	retlw	50	;'2'
  3457  09A7  3433               	retlw	51	;'3'
  3458  09A8  3432               	retlw	50	;'2'
  3459  09A9  340D               	retlw	13
  3460  09AA  340A               	retlw	10
  3461  09AB  3400               	retlw	0
  3462  09AC                     STR_18:	
  3463  09AC  3442               	retlw	66	;'B'
  3464  09AD  3461               	retlw	97	;'a'
  3465  09AE  3475               	retlw	117	;'u'
  3466  09AF  3464               	retlw	100	;'d'
  3467  09B0  3420               	retlw	32	;' '
  3468  09B1  3477               	retlw	119	;'w'
  3469  09B2  3469               	retlw	105	;'i'
  3470  09B3  346C               	retlw	108	;'l'
  3471  09B4  346C               	retlw	108	;'l'
  3472  09B5  3420               	retlw	32	;' '
  3473  09B6  3462               	retlw	98	;'b'
  3474  09B7  3465               	retlw	101	;'e'
  3475  09B8  3420               	retlw	32	;' '
  3476  09B9  3473               	retlw	115	;'s'
  3477  09BA  3465               	retlw	101	;'e'
  3478  09BB  3474               	retlw	116	;'t'
  3479  09BC  3420               	retlw	32	;' '
  3480  09BD  3474               	retlw	116	;'t'
  3481  09BE  346F               	retlw	111	;'o'
  3482  09BF  3420               	retlw	32	;' '
  3483  09C0  3425               	retlw	37	;'%'
  3484  09C1  346C               	retlw	108	;'l'
  3485  09C2  3475               	retlw	117	;'u'
  3486  09C3  3400               	retlw	0
  3487  09C4                     STR_10:	
  3488  09C4  3446               	retlw	70	;'F'
  3489  09C5  346C               	retlw	108	;'l'
  3490  09C6  3461               	retlw	97	;'a'
  3491  09C7  3473               	retlw	115	;'s'
  3492  09C8  3468               	retlw	104	;'h'
  3493  09C9  3420               	retlw	32	;' '
  3494  09CA  3450               	retlw	80	;'P'
  3495  09CB  3472               	retlw	114	;'r'
  3496  09CC  346F               	retlw	111	;'o'
  3497  09CD  3467               	retlw	103	;'g'
  3498  09CE  3472               	retlw	114	;'r'
  3499  09CF  3461               	retlw	97	;'a'
  3500  09D0  346D               	retlw	109	;'m'
  3501  09D1  3420               	retlw	32	;' '
  3502  09D2  3446               	retlw	70	;'F'
  3503  09D3  3461               	retlw	97	;'a'
  3504  09D4  3469               	retlw	105	;'i'
  3505  09D5  346C               	retlw	108	;'l'
  3506  09D6  340D               	retlw	13
  3507  09D7  340A               	retlw	10
  3508  09D8  3400               	retlw	0
  3509  09D9                     STR_20:	
  3510  09D9  3442               	retlw	66	;'B'
  3511  09DA  3461               	retlw	97	;'a'
  3512  09DB  3475               	retlw	117	;'u'
  3513  09DC  3464               	retlw	100	;'d'
  3514  09DD  3420               	retlw	32	;' '
  3515  09DE  344F               	retlw	79	;'O'
  3516  09DF  3475               	retlw	117	;'u'
  3517  09E0  3474               	retlw	116	;'t'
  3518  09E1  3420               	retlw	32	;' '
  3519  09E2  346F               	retlw	111	;'o'
  3520  09E3  3466               	retlw	102	;'f'
  3521  09E4  3420               	retlw	32	;' '
  3522  09E5  3452               	retlw	82	;'R'
  3523  09E6  3461               	retlw	97	;'a'
  3524  09E7  346E               	retlw	110	;'n'
  3525  09E8  3467               	retlw	103	;'g'
  3526  09E9  3465               	retlw	101	;'e'
  3527  09EA  340D               	retlw	13
  3528  09EB  340A               	retlw	10
  3529  09EC  3400               	retlw	0
  3530  09ED                     STR_14:	
  3531  09ED  3445               	retlw	69	;'E'
  3532  09EE  346E               	retlw	110	;'n'
  3533  09EF  3474               	retlw	116	;'t'
  3534  09F0  3465               	retlw	101	;'e'
  3535  09F1  3472               	retlw	114	;'r'
  3536  09F2  3420               	retlw	32	;' '
  3537  09F3  3442               	retlw	66	;'B'
  3538  09F4  3461               	retlw	97	;'a'
  3539  09F5  3475               	retlw	117	;'u'
  3540  09F6  3464               	retlw	100	;'d'
  3541  09F7  3420               	retlw	32	;' '
  3542  09F8  3472               	retlw	114	;'r'
  3543  09F9  3461               	retlw	97	;'a'
  3544  09FA  3474               	retlw	116	;'t'
  3545  09FB  3465               	retlw	101	;'e'
  3546  09FC  3420               	retlw	32	;' '
  3547  09FD  340D               	retlw	13
  3548  09FE  340A               	retlw	10
  3549  09FF  3400               	retlw	0
  3550  0A00                     STR_15:	
  3551  0A00  3442               	retlw	66	;'B'
  3552  0A01  3461               	retlw	97	;'a'
  3553  0A02  3475               	retlw	117	;'u'
  3554  0A03  3464               	retlw	100	;'d'
  3555  0A04  3420               	retlw	32	;' '
  3556  0A05  3452               	retlw	82	;'R'
  3557  0A06  3465               	retlw	101	;'e'
  3558  0A07  3473               	retlw	115	;'s'
  3559  0A08  3465               	retlw	101	;'e'
  3560  0A09  3474               	retlw	116	;'t'
  3561  0A0A  3420               	retlw	32	;' '
  3562  0A0B  3474               	retlw	116	;'t'
  3563  0A0C  346F               	retlw	111	;'o'
  3564  0A0D  3420               	retlw	32	;' '
  3565  0A0E  3439               	retlw	57	;'9'
  3566  0A0F  3436               	retlw	54	;'6'
  3567  0A10  3430               	retlw	48	;'0'
  3568  0A11  3430               	retlw	48	;'0'
  3569  0A12  3400               	retlw	0
  3570  0A13                     STR_4:	
  3571  0A13  3446               	retlw	70	;'F'
  3572  0A14  3469               	retlw	105	;'i'
  3573  0A15  3472               	retlw	114	;'r'
  3574  0A16  346D               	retlw	109	;'m'
  3575  0A17  3477               	retlw	119	;'w'
  3576  0A18  3461               	retlw	97	;'a'
  3577  0A19  3472               	retlw	114	;'r'
  3578  0A1A  3465               	retlw	101	;'e'
  3579  0A1B  3420               	retlw	32	;' '
  3580  0A1C  3456               	retlw	86	;'V'
  3581  0A1D  3465               	retlw	101	;'e'
  3582  0A1E  3472               	retlw	114	;'r'
  3583  0A1F  3473               	retlw	115	;'s'
  3584  0A20  3469               	retlw	105	;'i'
  3585  0A21  346F               	retlw	111	;'o'
  3586  0A22  346E               	retlw	110	;'n'
  3587  0A23  343A               	retlw	58	;':'
  3588  0A24  3420               	retlw	32	;' '
  3589  0A25  3400               	retlw	0
  3590  0A26                     STR_11:	
  3591  0A26  3442               	retlw	66	;'B'
  3592  0A27  3461               	retlw	97	;'a'
  3593  0A28  3475               	retlw	117	;'u'
  3594  0A29  3464               	retlw	100	;'d'
  3595  0A2A  3420               	retlw	32	;' '
  3596  0A2B  3469               	retlw	105	;'i'
  3597  0A2C  3473               	retlw	115	;'s'
  3598  0A2D  3420               	retlw	32	;' '
  3599  0A2E  3425               	retlw	37	;'%'
  3600  0A2F  346C               	retlw	108	;'l'
  3601  0A30  3475               	retlw	117	;'u'
  3602  0A31  3400               	retlw	0
  3603  0A32                     STR_2:	
  3604  0A32  3448               	retlw	72	;'H'
  3605  0A33  3469               	retlw	105	;'i'
  3606  0A34  3467               	retlw	103	;'g'
  3607  0A35  3468               	retlw	104	;'h'
  3608  0A36  3421               	retlw	33	;'!'
  3609  0A37  340D               	retlw	13
  3610  0A38  340A               	retlw	10
  3611  0A39  3400               	retlw	0
  3612  0A3A                     STR_1:	
  3613  0A3A  344C               	retlw	76	;'L'
  3614  0A3B  346F               	retlw	111	;'o'
  3615  0A3C  3477               	retlw	119	;'w'
  3616  0A3D  3421               	retlw	33	;'!'
  3617  0A3E  340D               	retlw	13
  3618  0A3F  340A               	retlw	10
  3619  0A40  3400               	retlw	0
  3620  09FD                     
  3621                           ; #config settings
  3622  0000                     
  3623                           	psect	cinit
  3624  00F5                     start_initialization:	
  3625  00F5                     __initialization:	
  3626                           
  3627                           ; Clear objects allocated to BANK1
  3628  00F5  30C6               	movlw	low __pbssBANK1
  3629  00F6  0084               	movwf	4
  3630  00F7  3000               	movlw	high __pbssBANK1
  3631  00F8  0085               	movwf	5
  3632  00F9  301E               	movlw	30
  3633  00FA  3198  2056  3180   	fcall	clear_ram0
  3634                           
  3635                           ; Clear objects allocated to BANK3
  3636  00FD  30E2               	movlw	low __pbssBANK3
  3637  00FE  0084               	movwf	4
  3638  00FF  3001               	movlw	high __pbssBANK3
  3639  0100  0085               	movwf	5
  3640  0101  300E               	movlw	14
  3641  0102  3198  2056  3180   	fcall	clear_ram0
  3642                           
  3643                           ; Clear objects allocated to BANK4
  3644  0105  3057               	movlw	low __pbssBANK4
  3645  0106  0084               	movwf	4
  3646  0107  3002               	movlw	high __pbssBANK4
  3647  0108  0085               	movwf	5
  3648  0109  300B               	movlw	11
  3649  010A  3198  2056  3180   	fcall	clear_ram0
  3650                           
  3651                           ; Initialize objects allocated to BANK1
  3652  010D  3041               	movlw	low __pidataBANK1
  3653  010E  0084               	movwf	4
  3654  010F  3098               	movlw	(high __pidataBANK1)| (0+128)
  3655  0110  0085               	movwf	5
  3656  0111  30E4               	movlw	low __pdataBANK1
  3657  0112  0086               	movwf	6
  3658  0113  3000               	movlw	high __pdataBANK1
  3659  0114  0087               	movwf	7
  3660  0115  3004               	movlw	4
  3661  0116  3198  2050  3180   	fcall	init_ram
  3662                           
  3663                           ; Initialize objects allocated to BANK4
  3664  0119  303D               	movlw	low __pidataBANK4
  3665  011A  0084               	movwf	4
  3666  011B  3098               	movlw	(high __pidataBANK4)| (0+128)
  3667  011C  0085               	movwf	5
  3668  011D  3062               	movlw	low __pdataBANK4
  3669  011E  0086               	movwf	6
  3670  011F  3002               	movlw	high __pdataBANK4
  3671  0120  0087               	movwf	7
  3672  0121  3004               	movlw	4
  3673  0122  3198  2050         	fcall	init_ram
  3674  0124                     end_of_initialization:	
  3675                           ;End of C runtime variable initialization code
  3676                           
  3677  0124                     __end_of__initialization:	
  3678  0124  0020               	movlb	0
  3679  0125  3196  2E15         	ljmp	_main	;jump to C main() function
  3680                           
  3681                           	psect	bssBANK1
  3682  00C6                     __pbssBANK1:	
  3683  00C6                     _BaudTyped:	
  3684  00C6                     	ds	4
  3685  00CA                     _PS_2_Read_Data_TEMP:	
  3686  00CA                     	ds	2
  3687  00CC                     _BAUDMODE:	
  3688  00CC                     	ds	1
  3689  00CD                     _Caps_Lock_Key:	
  3690  00CD                     	ds	1
  3691  00CE                     _Caps_Lock_Key_old:	
  3692  00CE                     	ds	1
  3693  00CF                     _Delete:	
  3694  00CF                     	ds	1
  3695  00D0                     _LControl:	
  3696  00D0                     	ds	1
  3697  00D1                     _Left_Shift_Key_old:	
  3698  00D1                     	ds	1
  3699  00D2                     _PS_2_Buffer_items:	
  3700  00D2                     	ds	1
  3701  00D3                     _PS_2_bits:	
  3702  00D3                     	ds	1
  3703  00D4                     _RControl:	
  3704  00D4                     	ds	1
  3705  00D5                     _ResendLastFlag:	
  3706  00D5                     	ds	1
  3707  00D6                     _Right_Shift_Key_old:	
  3708  00D6                     	ds	1
  3709  00D7                     _i:	
  3710  00D7                     	ds	1
  3711  00D8                     _PS_2_ScanCodes:	
  3712  00D8                     	ds	12
  3713                           
  3714                           	psect	dataBANK1
  3715  00E4                     __pdataBANK1:	
  3716  00E4                     _MEM:	
  3717  00E4                     	ds	4
  3718                           
  3719                           	psect	bssBANK3
  3720  01E2                     __pbssBANK3:	
  3721  01E2                     _PS_2_Read_Data_First:	
  3722  01E2                     	ds	2
  3723  01E4                     _PS_2_Read_Data_Second:	
  3724  01E4                     	ds	2
  3725  01E6                     _PS_2_Read_Data_Third:	
  3726  01E6                     	ds	2
  3727  01E8                     _CapsCount:	
  3728  01E8                     	ds	1
  3729  01E9                     _Caps_Lock:	
  3730  01E9                     	ds	1
  3731  01EA                     _LALT:	
  3732  01EA                     	ds	1
  3733  01EB                     _Left_Shift_Key:	
  3734  01EB                     	ds	1
  3735  01EC                     _ParityTyped:	
  3736  01EC                     	ds	1
  3737  01ED                     _RALT:	
  3738  01ED                     	ds	1
  3739  01EE                     _Right_Shift_Key:	
  3740  01EE                     	ds	1
  3741  01EF                     _Shift_Key:	
  3742  01EF                     	ds	1
  3743                           
  3744                           	psect	bssBANK4
  3745  0257                     __pbssBANK4:	
  3746  0257                     _BatteryVoltage:	
  3747  0257                     	ds	3
  3748  025A                     _SinLEDtimer:	
  3749  025A                     	ds	2
  3750  025C                     _pwrLEDtoggle:	
  3751  025C                     	ds	2
  3752  025E                     _Alarm:	
  3753  025E                     	ds	1
  3754  025F                     _ECHO:	
  3755  025F                     	ds	1
  3756  0260                     _LineOverride:	
  3757  0260                     	ds	1
  3758  0261                     _PARITY:	
  3759  0261                     	ds	1
  3760                           
  3761                           	psect	dataBANK4
  3762  0262                     __pdataBANK4:	
  3763  0262                     _BAUD:	
  3764  0262                     	ds	4
  3765                           
  3766                           	psect	clrtext
  3767  1856                     clear_ram0:	
  3768                           ;	Called with FSR0 containing the base address, and
  3769                           ;	WREG with the size to clear
  3770                           
  3771  1856  0064               	clrwdt	;clear the watchdog before getting into this loop
  3772  1857                     clrloop0:	
  3773  1857  0180               	clrf	0	;clear RAM location pointed to by FSR
  3774  1858  3101               	addfsr 0,1
  3775  1859  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3776  185A  2857               	goto	clrloop0	;have we reached the end yet?
  3777  185B  3400               	retlw	0	;all done for this memory range, return
  3778                           
  3779                           	psect	inittext
  3780  1850                     init_ram:	
  3781  1850  00FE               	movwf	126
  3782  1851                     initloop:	
  3783  1851  0012               	moviw fsr0++
  3784  1852  001E               	movwi fsr1++
  3785  1853  0BFE               	decfsz	126,f
  3786  1854  2851               	goto	initloop
  3787  1855  3400               	retlw	0
  3788                           
  3789                           	psect	cstackBANK4
  3790  0220                     __pcstackBANK4:	
  3791  0220                     ??_PS_2_DISABLE_INTERRUPT:	
  3792  0220                     ??_READ_PS_2_PIN:	
  3793                           ; 0 bytes @ 0x0
  3794                           
  3795  0220                     ??_Timer2ON:	
  3796                           ; 0 bytes @ 0x0
  3797                           
  3798  0220                     ??_PS_2_ENABLE_INTERRUPT:	
  3799                           ; 0 bytes @ 0x0
  3800                           
  3801  0220                     ??_ReadUSART:	
  3802                           ; 0 bytes @ 0x0
  3803                           
  3804  0220                     ??_ConfigureOscillator:	
  3805                           ; 0 bytes @ 0x0
  3806                           
  3807  0220                     ??_InitApp:	
  3808                           ; 0 bytes @ 0x0
  3809                           
  3810  0220                     ?_delayUS:	
  3811                           ; 0 bytes @ 0x0
  3812                           
  3813  0220                     ?_OpenUSART:	
  3814                           ; 0 bytes @ 0x0
  3815                           
  3816  0220                     ??_baudUSART:	
  3817                           ; 0 bytes @ 0x0
  3818                           
  3819  0220                     ??_Clock_TRIS:	
  3820                           ; 0 bytes @ 0x0
  3821                           
  3822  0220                     ??_Data_TRIS:	
  3823                           ; 0 bytes @ 0x0
  3824                           
  3825  0220                     ??_Timer2Init:	
  3826                           ; 0 bytes @ 0x0
  3827                           
  3828  0220                     ??_DisableInternalADC:	
  3829                           ; 0 bytes @ 0x0
  3830                           
  3831  0220                     ??_CloseUSART:	
  3832                           ; 0 bytes @ 0x0
  3833                           
  3834  0220                     ?___ftge:	
  3835                           ; 0 bytes @ 0x0
  3836                           
  3837  0220                     ?_CheckSum_byte:	
  3838                           ; 1 bit 
  3839                           
  3840  0220                     ?_ReadFlash_2Byte:	
  3841                           ; 1 bytes @ 0x0
  3842                           
  3843  0220                     ?___ftpack:	
  3844                           ; 2 bytes @ 0x0
  3845                           
  3846  0220                     ?___lldiv:	
  3847                           ; 3 bytes @ 0x0
  3848                           
  3849  0220                     baudUSART@baudconfig:	
  3850                           ; 4 bytes @ 0x0
  3851                           
  3852  0220                     Clock_TRIS@direction:	
  3853                           ; 1 bytes @ 0x0
  3854                           
  3855  0220                     Data_TRIS@direction:	
  3856                           ; 1 bytes @ 0x0
  3857                           
  3858  0220                     PS_2_ENABLE_INTERRUPT@DATA_CLK:	
  3859                           ; 1 bytes @ 0x0
  3860                           
  3861  0220                     READ_PS_2_PIN@DATA_CLK:	
  3862                           ; 1 bytes @ 0x0
  3863                           
  3864  0220                     CheckSum_byte@This:	
  3865                           ; 1 bytes @ 0x0
  3866                           
  3867  0220                     OpenUSART@spbrg:	
  3868                           ; 2 bytes @ 0x0
  3869                           
  3870  0220                     ReadFlash_2Byte@row:	
  3871                           ; 2 bytes @ 0x0
  3872                           
  3873  0220                     ___ftpack@arg:	
  3874                           ; 2 bytes @ 0x0
  3875                           
  3876  0220                     ___ftge@ff1:	
  3877                           ; 3 bytes @ 0x0
  3878                           
  3879  0220                     delayUS@US:	
  3880                           ; 3 bytes @ 0x0
  3881                           
  3882  0220                     ___lldiv@divisor:	
  3883                           ; 4 bytes @ 0x0
  3884                           
  3885                           
  3886                           ; 4 bytes @ 0x0
  3887  0220                     	ds	1
  3888  0221                     ReadUSART@data:	
  3889  0221                     PS_2_DISABLE_INTERRUPT@DATA_CLK:	
  3890                           ; 1 bytes @ 0x1
  3891                           
  3892                           
  3893                           ; 1 bytes @ 0x1
  3894  0221                     	ds	1
  3895  0222                     ??_OpenUSART:	
  3896  0222                     CheckSum_byte@Odd_Even:	
  3897                           ; 0 bytes @ 0x2
  3898                           
  3899  0222                     OpenUSART@config:	
  3900                           ; 1 bytes @ 0x2
  3901                           
  3902  0222                     ReadFlash_2Byte@column:	
  3903                           ; 1 bytes @ 0x2
  3904                           
  3905  0222                     Timer2Init@time:	
  3906                           ; 1 bytes @ 0x2
  3907                           
  3908                           
  3909                           ; 1 bytes @ 0x2
  3910  0222                     	ds	1
  3911  0223                     ??_CheckSum_byte:	
  3912  0223                     ??_ReadFlash_2Byte:	
  3913                           ; 0 bytes @ 0x3
  3914                           
  3915  0223                     Timer2Init@postscaler:	
  3916                           ; 0 bytes @ 0x3
  3917                           
  3918  0223                     ___ftpack@exp:	
  3919                           ; 1 bytes @ 0x3
  3920                           
  3921  0223                     ___ftge@ff2:	
  3922                           ; 1 bytes @ 0x3
  3923                           
  3924                           
  3925                           ; 3 bytes @ 0x3
  3926  0223                     	ds	1
  3927  0224                     ??_delayUS:	
  3928  0224                     Timer2Init@prescaler:	
  3929                           ; 0 bytes @ 0x4
  3930                           
  3931  0224                     ___ftpack@sign:	
  3932                           ; 1 bytes @ 0x4
  3933                           
  3934  0224                     CheckSum_byte@ThisTemp:	
  3935                           ; 1 bytes @ 0x4
  3936                           
  3937  0224                     ___lldiv@dividend:	
  3938                           ; 2 bytes @ 0x4
  3939                           
  3940                           
  3941                           ; 4 bytes @ 0x4
  3942  0224                     	ds	1
  3943  0225                     ??___ftpack:	
  3944  0225                     ?_ReadFlash_4Byte:	
  3945                           ; 0 bytes @ 0x5
  3946                           
  3947  0225                     ReadFlash_4Byte@row:	
  3948                           ; 4 bytes @ 0x5
  3949                           
  3950  0225                     delayUS@i:	
  3951                           ; 2 bytes @ 0x5
  3952                           
  3953                           
  3954                           ; 4 bytes @ 0x5
  3955  0225                     	ds	1
  3956  0226                     ??___ftge:	
  3957  0226                     CheckSum_byte@Parity:	
  3958                           ; 0 bytes @ 0x6
  3959                           
  3960                           
  3961                           ; 1 bytes @ 0x6
  3962  0226                     	ds	1
  3963  0227                     CheckSum_byte@i:	
  3964  0227                     ReadFlash_4Byte@column:	
  3965                           ; 1 bytes @ 0x7
  3966                           
  3967                           
  3968                           ; 1 bytes @ 0x7
  3969  0227                     	ds	1
  3970  0228                     ?_UARTchar:	
  3971  0228                     ??___lldiv:	
  3972                           ; 0 bytes @ 0x8
  3973                           
  3974  0228                     ?___lwtoft:	
  3975                           ; 0 bytes @ 0x8
  3976                           
  3977  0228                     UARTchar@override:	
  3978                           ; 3 bytes @ 0x8
  3979                           
  3980  0228                     ___lwtoft@c:	
  3981                           ; 1 bytes @ 0x8
  3982                           
  3983                           
  3984                           ; 2 bytes @ 0x8
  3985  0228                     	ds	1
  3986  0229                     ??_ReadFlash_4Byte:	
  3987  0229                     delayUS@j:	
  3988                           ; 0 bytes @ 0x9
  3989                           
  3990  0229                     UARTchar@NinethBit_override_data:	
  3991                           ; 1 bytes @ 0x9
  3992                           
  3993  0229                     ___lldiv@quotient:	
  3994                           ; 1 bytes @ 0x9
  3995                           
  3996                           
  3997                           ; 4 bytes @ 0x9
  3998  0229                     	ds	1
  3999  022A                     ??_UARTchar:	
  4000  022A                     ??_Send_PS2:	
  4001                           ; 0 bytes @ 0xA
  4002                           
  4003  022A                     ?_InternalADC_Read:	
  4004                           ; 0 bytes @ 0xA
  4005                           
  4006                           
  4007                           ; 2 bytes @ 0xA
  4008  022A                     	ds	1
  4009  022B                     ??___lwtoft:	
  4010                           
  4011                           ; 0 bytes @ 0xB
  4012  022B                     	ds	1
  4013  022C                     ??_InternalADC_Read:	
  4014  022C                     ?___ftdiv:	
  4015                           ; 0 bytes @ 0xC
  4016                           
  4017  022C                     ___ftdiv@f2:	
  4018                           ; 3 bytes @ 0xC
  4019                           
  4020                           
  4021                           ; 3 bytes @ 0xC
  4022  022C                     	ds	1
  4023  022D                     ___lldiv@counter:	
  4024                           
  4025                           ; 1 bytes @ 0xD
  4026  022D                     	ds	1
  4027  022E                     ?_InitUART:	
  4028  022E                     UARTchar@data:	
  4029                           ; 0 bytes @ 0xE
  4030                           
  4031  022E                     Send_PS2@oddparity:	
  4032                           ; 1 bytes @ 0xE
  4033                           
  4034  022E                     InternalADC_Read@channel:	
  4035                           ; 1 bytes @ 0xE
  4036                           
  4037  022E                     InitUART@Baud:	
  4038                           ; 1 bytes @ 0xE
  4039                           
  4040  022E                     ReadFlash_4Byte@temp:	
  4041                           ; 4 bytes @ 0xE
  4042                           
  4043                           
  4044                           ; 4 bytes @ 0xE
  4045  022E                     	ds	1
  4046  022F                     ?_UARTstringWAIT:	
  4047  022F                     Send_PS2@command:	
  4048                           ; 0 bytes @ 0xF
  4049                           
  4050  022F                     UARTstringWAIT@data:	
  4051                           ; 1 bytes @ 0xF
  4052                           
  4053  022F                     ___ftdiv@f1:	
  4054                           ; 2 bytes @ 0xF
  4055                           
  4056                           
  4057                           ; 3 bytes @ 0xF
  4058  022F                     	ds	1
  4059  0230                     Send_PS2@i:	
  4060                           
  4061                           ; 1 bytes @ 0x10
  4062  0230                     	ds	1
  4063  0231                     ??_UARTstringWAIT:	
  4064  0231                     Send_PS2@timeout:	
  4065                           ; 0 bytes @ 0x11
  4066                           
  4067                           
  4068                           ; 2 bytes @ 0x11
  4069  0231                     	ds	1
  4070  0232                     ??___ftdiv:	
  4071  0232                     ?_ReadBaud:	
  4072                           ; 0 bytes @ 0x12
  4073                           
  4074  0232                     InitUART@parity:	
  4075                           ; 4 bytes @ 0x12
  4076                           
  4077  0232                     ReadBaud@row:	
  4078                           ; 1 bytes @ 0x12
  4079                           
  4080                           
  4081                           ; 2 bytes @ 0x12
  4082  0232                     	ds	1
  4083  0233                     ??_PS_2_INIT:	
  4084  0233                     ??_InitUART:	
  4085                           ; 0 bytes @ 0x13
  4086                           
  4087  0233                     ??_Init_PS_2_Send:	
  4088                           ; 0 bytes @ 0x13
  4089                           
  4090                           
  4091                           ; 0 bytes @ 0x13
  4092  0233                     	ds	1
  4093  0234                     ReadBaud@column:	
  4094                           
  4095                           ; 1 bytes @ 0x14
  4096  0234                     	ds	2
  4097  0236                     ??_ReadBaud:	
  4098  0236                     ___ftdiv@cntr:	
  4099                           ; 0 bytes @ 0x16
  4100                           
  4101                           
  4102                           ; 1 bytes @ 0x16
  4103  0236                     	ds	1
  4104  0237                     ___ftdiv@f3:	
  4105                           
  4106                           ; 3 bytes @ 0x17
  4107  0237                     	ds	3
  4108  023A                     ___ftdiv@exp:	
  4109                           
  4110                           ; 1 bytes @ 0x1A
  4111  023A                     	ds	1
  4112  023B                     ___ftdiv@sign:	
  4113  023B                     InitUART@spbrg:	
  4114                           ; 1 bytes @ 0x1B
  4115                           
  4116                           
  4117                           ; 2 bytes @ 0x1B
  4118  023B                     	ds	1
  4119  023C                     ?___ftmul:	
  4120  023C                     ___ftmul@f1:	
  4121                           ; 3 bytes @ 0x1C
  4122                           
  4123                           
  4124                           ; 3 bytes @ 0x1C
  4125  023C                     	ds	1
  4126  023D                     InitUART@baudconfig:	
  4127                           
  4128                           ; 1 bytes @ 0x1D
  4129  023D                     	ds	1
  4130  023E                     InitUART@config:	
  4131  023E                     ReadBaud@temp:	
  4132                           ; 1 bytes @ 0x1E
  4133                           
  4134                           
  4135                           ; 4 bytes @ 0x1E
  4136  023E                     	ds	1
  4137  023F                     ___ftmul@f2:	
  4138  023F                     InitUART@temp:	
  4139                           ; 3 bytes @ 0x1F
  4140                           
  4141                           
  4142                           ; 4 bytes @ 0x1F
  4143  023F                     	ds	3
  4144  0242                     ??___ftmul:	
  4145                           
  4146                           ; 0 bytes @ 0x22
  4147  0242                     	ds	1
  4148  0243                     ??_Init_System:	
  4149                           
  4150                           ; 0 bytes @ 0x23
  4151  0243                     	ds	3
  4152  0246                     ___ftmul@exp:	
  4153                           
  4154                           ; 1 bytes @ 0x26
  4155  0246                     	ds	1
  4156  0247                     ___ftmul@f3_as_product:	
  4157                           
  4158                           ; 3 bytes @ 0x27
  4159  0247                     	ds	1
  4160  0248                     Init_System@temp:	
  4161                           
  4162                           ; 4 bytes @ 0x28
  4163  0248                     	ds	2
  4164  024A                     ___ftmul@cntr:	
  4165                           
  4166                           ; 1 bytes @ 0x2A
  4167  024A                     	ds	1
  4168  024B                     ___ftmul@sign:	
  4169                           
  4170                           ; 1 bytes @ 0x2B
  4171  024B                     	ds	1
  4172  024C                     ?_ReadVoltage:	
  4173  024C                     Init_System@Baud:	
  4174                           ; 3 bytes @ 0x2C
  4175                           
  4176                           
  4177                           ; 4 bytes @ 0x2C
  4178  024C                     	ds	3
  4179  024F                     ??_ReadVoltage:	
  4180                           
  4181                           ; 0 bytes @ 0x2F
  4182  024F                     	ds	1
  4183  0250                     Init_System@Parity:	
  4184  0250                     ReadVoltage@voltage:	
  4185                           ; 1 bytes @ 0x30
  4186                           
  4187                           
  4188                           ; 3 bytes @ 0x30
  4189  0250                     	ds	3
  4190  0253                     ReadVoltage@temp:	
  4191                           
  4192                           ; 2 bytes @ 0x33
  4193  0253                     	ds	2
  4194  0255                     ??_main:	
  4195                           
  4196                           ; 0 bytes @ 0x35
  4197  0255                     	ds	1
  4198  0256                     main@i:	
  4199                           
  4200                           ; 1 bytes @ 0x36
  4201  0256                     	ds	1
  4202                           
  4203                           	psect	cstackBANK3
  4204  01A0                     __pcstackBANK3:	
  4205  01A0                     Process_PS2_ScanCode@buf:	
  4206                           
  4207                           ; 60 bytes @ 0x0
  4208  01A0                     	ds	60
  4209  01DC                     _Process_PS2_ScanCode$855:	
  4210                           
  4211                           ; 1 bytes @ 0x3C
  4212  01DC                     	ds	1
  4213  01DD                     _Process_PS2_ScanCode$856:	
  4214                           
  4215                           ; 1 bytes @ 0x3D
  4216  01DD                     	ds	1
  4217  01DE                     _Process_PS2_ScanCode$857:	
  4218                           
  4219                           ; 1 bytes @ 0x3E
  4220  01DE                     	ds	1
  4221  01DF                     _Process_PS2_ScanCode$858:	
  4222                           
  4223                           ; 1 bytes @ 0x3F
  4224  01DF                     	ds	1
  4225  01E0                     Process_PS2_ScanCode@shortbreak:	
  4226                           
  4227                           ; 1 bytes @ 0x40
  4228  01E0                     	ds	1
  4229  01E1                     Process_PS2_ScanCode@temp:	
  4230                           
  4231                           ; 1 bytes @ 0x41
  4232  01E1                     	ds	1
  4233                           
  4234                           	psect	cstackBANK2
  4235  0120                     __pcstackBANK2:	
  4236  0120                     SetBaud@buf:	
  4237                           
  4238                           ; 50 bytes @ 0x0
  4239  0120                     	ds	50
  4240  0152                     SetBaud@Baudtemp:	
  4241                           
  4242                           ; 4 bytes @ 0x32
  4243  0152                     	ds	4
  4244  0156                     SetBaud@Paritytemp:	
  4245                           
  4246                           ; 4 bytes @ 0x36
  4247  0156                     	ds	4
  4248  015A                     SetBaud@temp:	
  4249                           
  4250                           ; 4 bytes @ 0x3A
  4251  015A                     	ds	4
  4252  015E                     SetBaud@i:	
  4253                           
  4254                           ; 1 bytes @ 0x3E
  4255  015E                     	ds	1
  4256                           
  4257                           	psect	cstackBANK1
  4258  00A0                     __pcstackBANK1:	
  4259  00A0                     ?_WriteBaud:	
  4260  00A0                     WriteBaud@row:	
  4261                           ; 0 bytes @ 0x0
  4262                           
  4263                           
  4264                           ; 2 bytes @ 0x0
  4265  00A0                     	ds	2
  4266  00A2                     WriteBaud@Baud:	
  4267                           
  4268                           ; 4 bytes @ 0x2
  4269  00A2                     	ds	4
  4270  00A6                     WriteBaud@Parity:	
  4271                           
  4272                           ; 1 bytes @ 0x6
  4273  00A6                     	ds	1
  4274  00A7                     ??_WriteBaud:	
  4275                           
  4276                           ; 0 bytes @ 0x7
  4277  00A7                     	ds	8
  4278  00AF                     ?_SetBaud:	
  4279  00AF                     SetBaud@Baud:	
  4280                           ; 0 bytes @ 0xF
  4281                           
  4282                           
  4283                           ; 4 bytes @ 0xF
  4284  00AF                     	ds	4
  4285  00B3                     SetBaud@Parity:	
  4286                           
  4287                           ; 1 bytes @ 0x13
  4288  00B3                     	ds	1
  4289  00B4                     ??_SetBaud:	
  4290                           
  4291                           ; 0 bytes @ 0x14
  4292  00B4                     	ds	8
  4293  00BC                     ??_Process_PS2_ScanCode:	
  4294                           
  4295                           ; 0 bytes @ 0x1C
  4296  00BC                     	ds	6
  4297  00C2                     isr@Rx_fault:	
  4298                           
  4299                           ; 1 bytes @ 0x22
  4300  00C2                     	ds	1
  4301  00C3                     isr@Rx_Overun:	
  4302                           
  4303                           ; 1 bytes @ 0x23
  4304  00C3                     	ds	1
  4305  00C4                     isr@rx:	
  4306                           
  4307                           ; 1 bytes @ 0x24
  4308  00C4                     	ds	1
  4309  00C5                     isr@ScanTemp:	
  4310                           
  4311                           ; 1 bytes @ 0x25
  4312  00C5                     	ds	1
  4313                           
  4314                           	psect	cstackCOMMON
  4315  0070                     __pcstackCOMMON:	
  4316  0070                     ?_PS_2_DISABLE_INTERRUPT:	
  4317  0070                     ?_Timer2Reset:	
  4318                           ; 0 bytes @ 0x0
  4319                           
  4320  0070                     ??_Timer2Reset:	
  4321                           ; 0 bytes @ 0x0
  4322                           
  4323  0070                     ?_Timer2ON:	
  4324                           ; 0 bytes @ 0x0
  4325                           
  4326  0070                     ?_PS_2_ENABLE_INTERRUPT:	
  4327                           ; 0 bytes @ 0x0
  4328                           
  4329  0070                     ??_READ_CONFIG_PIN:	
  4330                           ; 0 bytes @ 0x0
  4331                           
  4332  0070                     ?_Timer2OFF:	
  4333                           ; 0 bytes @ 0x0
  4334                           
  4335  0070                     ??_Timer2OFF:	
  4336                           ; 0 bytes @ 0x0
  4337                           
  4338  0070                     ?_ResendLast:	
  4339                           ; 0 bytes @ 0x0
  4340                           
  4341  0070                     ?_Process_PS2_ScanCode:	
  4342                           ; 0 bytes @ 0x0
  4343                           
  4344  0070                     ?_ConfigureOscillator:	
  4345                           ; 0 bytes @ 0x0
  4346                           
  4347  0070                     ?_InitApp:	
  4348                           ; 0 bytes @ 0x0
  4349                           
  4350  0070                     ?_Init_System:	
  4351                           ; 0 bytes @ 0x0
  4352                           
  4353  0070                     ?_PS_2_INIT:	
  4354                           ; 0 bytes @ 0x0
  4355                           
  4356  0070                     ?_baudUSART:	
  4357                           ; 0 bytes @ 0x0
  4358                           
  4359  0070                     ?_Clock_TRIS:	
  4360                           ; 0 bytes @ 0x0
  4361                           
  4362  0070                     ?_Data_TRIS:	
  4363                           ; 0 bytes @ 0x0
  4364                           
  4365  0070                     ?_Timer2Init:	
  4366                           ; 0 bytes @ 0x0
  4367                           
  4368  0070                     ??_Decode_Scan_Code_FunctionE0:	
  4369                           ; 0 bytes @ 0x0
  4370                           
  4371  0070                     ??_Decode_Scan_Code_Shift:	
  4372                           ; 0 bytes @ 0x0
  4373                           
  4374  0070                     ??_Decode_Scan_Code:	
  4375                           ; 0 bytes @ 0x0
  4376                           
  4377  0070                     ??_Decode_Scan_Code_Function:	
  4378                           ; 0 bytes @ 0x0
  4379                           
  4380  0070                     ?_DisableInternalADC:	
  4381                           ; 0 bytes @ 0x0
  4382                           
  4383  0070                     ?_isr:	
  4384                           ; 0 bytes @ 0x0
  4385                           
  4386  0070                     ?_main:	
  4387                           ; 0 bytes @ 0x0
  4388                           
  4389  0070                     ??_Reverse_Byte:	
  4390                           ; 0 bytes @ 0x0
  4391                           
  4392  0070                     ??_ISNUMBER:	
  4393                           ; 0 bytes @ 0x0
  4394                           
  4395  0070                     ?_cleanBuffer:	
  4396                           ; 0 bytes @ 0x0
  4397                           
  4398  0070                     ?_CloseUSART:	
  4399                           ; 0 bytes @ 0x0
  4400                           
  4401  0070                     ?_UART_send_break:	
  4402                           ; 0 bytes @ 0x0
  4403                           
  4404  0070                     ??_UART_send_break:	
  4405                           ; 0 bytes @ 0x0
  4406                           
  4407  0070                     ?_UNLOCK:	
  4408                           ; 0 bytes @ 0x0
  4409                           
  4410  0070                     ??_UNLOCK:	
  4411                           ; 0 bytes @ 0x0
  4412                           
  4413  0070                     ?_BlockErase:	
  4414                           ; 0 bytes @ 0x0
  4415                           
  4416  0070                     ?i1_delayUS:	
  4417                           ; 0 bytes @ 0x0
  4418                           
  4419  0070                     ?i1_CloseUSART:	
  4420                           ; 0 bytes @ 0x0
  4421                           
  4422  0070                     ??i1_CloseUSART:	
  4423                           ; 0 bytes @ 0x0
  4424                           
  4425  0070                     ?i1_baudUSART:	
  4426                           ; 0 bytes @ 0x0
  4427                           
  4428  0070                     ??i1_baudUSART:	
  4429                           ; 0 bytes @ 0x0
  4430                           
  4431  0070                     ?i1_OpenUSART:	
  4432                           ; 0 bytes @ 0x0
  4433                           
  4434  0070                     ??i1_ReadUSART:	
  4435                           ; 0 bytes @ 0x0
  4436                           
  4437  0070                     ?i1_Clock_TRIS:	
  4438                           ; 0 bytes @ 0x0
  4439                           
  4440  0070                     ??i1_Clock_TRIS:	
  4441                           ; 0 bytes @ 0x0
  4442                           
  4443  0070                     ?i1_Data_TRIS:	
  4444                           ; 0 bytes @ 0x0
  4445                           
  4446  0070                     ??i1_Data_TRIS:	
  4447                           ; 0 bytes @ 0x0
  4448                           
  4449  0070                     ?i1_PS_2_DISABLE_INTERRUPT:	
  4450                           ; 0 bytes @ 0x0
  4451                           
  4452  0070                     ??i1_PS_2_DISABLE_INTERRUPT:	
  4453                           ; 0 bytes @ 0x0
  4454                           
  4455  0070                     ?i1_PS_2_ENABLE_INTERRUPT:	
  4456                           ; 0 bytes @ 0x0
  4457                           
  4458  0070                     ??i1_PS_2_ENABLE_INTERRUPT:	
  4459                           ; 0 bytes @ 0x0
  4460                           
  4461  0070                     ??i1_READ_PS_2_PIN:	
  4462                           ; 0 bytes @ 0x0
  4463                           
  4464  0070                     ?i1_Timer2ON:	
  4465                           ; 0 bytes @ 0x0
  4466                           
  4467  0070                     ??i1_Timer2ON:	
  4468                           ; 0 bytes @ 0x0
  4469                           
  4470  0070                     ?_READ_PS_2_PIN:	
  4471                           ; 0 bytes @ 0x0
  4472                           
  4473  0070                     ?_ReadUSART:	
  4474                           ; 1 bytes @ 0x0
  4475                           
  4476  0070                     ?_READ_CONFIG_PIN:	
  4477                           ; 1 bytes @ 0x0
  4478                           
  4479  0070                     ?_Init_PS_2_Send:	
  4480                           ; 1 bytes @ 0x0
  4481                           
  4482  0070                     ?_Send_PS2:	
  4483                           ; 1 bytes @ 0x0
  4484                           
  4485  0070                     ?_Decode_Scan_Code_FunctionE0:	
  4486                           ; 1 bytes @ 0x0
  4487                           
  4488  0070                     ?_Decode_Scan_Code_Shift:	
  4489                           ; 1 bytes @ 0x0
  4490                           
  4491  0070                     ?_Decode_Scan_Code:	
  4492                           ; 1 bytes @ 0x0
  4493                           
  4494  0070                     ?_Decode_Scan_Code_Function:	
  4495                           ; 1 bytes @ 0x0
  4496                           
  4497  0070                     ?_Reverse_Byte:	
  4498                           ; 1 bytes @ 0x0
  4499                           
  4500  0070                     ?_ISNUMBER:	
  4501                           ; 1 bytes @ 0x0
  4502                           
  4503  0070                     ?_BufferShiftBack:	
  4504                           ; 1 bytes @ 0x0
  4505                           
  4506  0070                     ?i1_CheckSum_byte:	
  4507                           ; 1 bytes @ 0x0
  4508                           
  4509  0070                     ?i1_ReadUSART:	
  4510                           ; 1 bytes @ 0x0
  4511                           
  4512  0070                     ?i1_READ_PS_2_PIN:	
  4513                           ; 1 bytes @ 0x0
  4514                           
  4515  0070                     ?i1_Send_PS2:	
  4516                           ; 1 bytes @ 0x0
  4517                           
  4518  0070                     ?i1_ReadFlash_2Byte:	
  4519                           ; 1 bytes @ 0x0
  4520                           
  4521  0070                     ?___lmul:	
  4522                           ; 2 bytes @ 0x0
  4523                           
  4524  0070                     ?i1___lldiv:	
  4525                           ; 4 bytes @ 0x0
  4526                           
  4527  0070                     ISNUMBER@ascii:	
  4528                           ; 4 bytes @ 0x0
  4529                           
  4530  0070                     BufferShiftBack@shift:	
  4531                           ; 1 bytes @ 0x0
  4532                           
  4533  0070                     Decode_Scan_Code@Code:	
  4534                           ; 1 bytes @ 0x0
  4535                           
  4536  0070                     Decode_Scan_Code_Shift@Code:	
  4537                           ; 1 bytes @ 0x0
  4538                           
  4539  0070                     Decode_Scan_Code_FunctionE0@Code:	
  4540                           ; 1 bytes @ 0x0
  4541                           
  4542  0070                     Decode_Scan_Code_Function@Code:	
  4543                           ; 1 bytes @ 0x0
  4544                           
  4545  0070                     i1baudUSART@baudconfig:	
  4546                           ; 1 bytes @ 0x0
  4547                           
  4548  0070                     i1Clock_TRIS@direction:	
  4549                           ; 1 bytes @ 0x0
  4550                           
  4551  0070                     i1Data_TRIS@direction:	
  4552                           ; 1 bytes @ 0x0
  4553                           
  4554  0070                     i1PS_2_ENABLE_INTERRUPT@DATA_CLK:	
  4555                           ; 1 bytes @ 0x0
  4556                           
  4557  0070                     i1READ_PS_2_PIN@DATA_CLK:	
  4558                           ; 1 bytes @ 0x0
  4559                           
  4560  0070                     cleanBuffer@count:	
  4561                           ; 1 bytes @ 0x0
  4562                           
  4563  0070                     BlockErase@row:	
  4564                           ; 2 bytes @ 0x0
  4565                           
  4566  0070                     i1CheckSum_byte@This:	
  4567                           ; 2 bytes @ 0x0
  4568                           
  4569  0070                     i1OpenUSART@spbrg:	
  4570                           ; 2 bytes @ 0x0
  4571                           
  4572  0070                     i1ReadFlash_2Byte@row:	
  4573                           ; 2 bytes @ 0x0
  4574                           
  4575  0070                     ___lmul@multiplier:	
  4576                           ; 2 bytes @ 0x0
  4577                           
  4578  0070                     i1delayUS@US:	
  4579                           ; 4 bytes @ 0x0
  4580                           
  4581  0070                     i1___lldiv@divisor:	
  4582                           ; 4 bytes @ 0x0
  4583                           
  4584                           
  4585                           ; 4 bytes @ 0x0
  4586  0070                     	ds	1
  4587  0071                     BufferShiftBack@size:	
  4588  0071                     i1ReadUSART@data:	
  4589                           ; 1 bytes @ 0x1
  4590                           
  4591  0071                     i1PS_2_DISABLE_INTERRUPT@DATA_CLK:	
  4592                           ; 1 bytes @ 0x1
  4593                           
  4594                           
  4595                           ; 1 bytes @ 0x1
  4596  0071                     	ds	1
  4597  0072                     ??_cleanBuffer:	
  4598  0072                     ??_BufferShiftBack:	
  4599                           ; 0 bytes @ 0x2
  4600                           
  4601  0072                     ??_BlockErase:	
  4602                           ; 0 bytes @ 0x2
  4603                           
  4604  0072                     ??i1_OpenUSART:	
  4605                           ; 0 bytes @ 0x2
  4606                           
  4607  0072                     Reverse_Byte@temp:	
  4608                           ; 0 bytes @ 0x2
  4609                           
  4610  0072                     i1CheckSum_byte@Odd_Even:	
  4611                           ; 1 bytes @ 0x2
  4612                           
  4613  0072                     i1OpenUSART@config:	
  4614                           ; 1 bytes @ 0x2
  4615                           
  4616  0072                     i1ReadFlash_2Byte@column:	
  4617                           ; 1 bytes @ 0x2
  4618                           
  4619                           
  4620                           ; 1 bytes @ 0x2
  4621  0072                     	ds	1
  4622  0073                     ??i1_CheckSum_byte:	
  4623  0073                     ??i1_ReadFlash_2Byte:	
  4624                           ; 0 bytes @ 0x3
  4625                           
  4626  0073                     Reverse_Byte@This:	
  4627                           ; 0 bytes @ 0x3
  4628                           
  4629  0073                     cleanBuffer@data:	
  4630                           ; 1 bytes @ 0x3
  4631                           
  4632                           
  4633                           ; 1 bytes @ 0x3
  4634  0073                     	ds	1
  4635  0074                     ??i1_delayUS:	
  4636  0074                     cleanBuffer@i:	
  4637                           ; 0 bytes @ 0x4
  4638                           
  4639  0074                     i1CheckSum_byte@ThisTemp:	
  4640                           ; 1 bytes @ 0x4
  4641                           
  4642  0074                     ___lmul@multiplicand:	
  4643                           ; 2 bytes @ 0x4
  4644                           
  4645  0074                     i1___lldiv@dividend:	
  4646                           ; 4 bytes @ 0x4
  4647                           
  4648                           
  4649                           ; 4 bytes @ 0x4
  4650  0074                     	ds	1
  4651  0075                     ?i1_ReadFlash_4Byte:	
  4652  0075                     i1ReadFlash_4Byte@row:	
  4653                           ; 4 bytes @ 0x5
  4654                           
  4655  0075                     i1delayUS@i:	
  4656                           ; 2 bytes @ 0x5
  4657                           
  4658                           
  4659                           ; 4 bytes @ 0x5
  4660  0075                     	ds	1
  4661  0076                     BufferShiftBack@i:	
  4662  0076                     i1CheckSum_byte@Parity:	
  4663                           ; 1 bytes @ 0x6
  4664                           
  4665                           
  4666                           ; 1 bytes @ 0x6
  4667  0076                     	ds	1
  4668  0077                     BufferShiftBack@buffer:	
  4669  0077                     i1CheckSum_byte@i:	
  4670                           ; 1 bytes @ 0x7
  4671                           
  4672  0077                     i1ReadFlash_4Byte@column:	
  4673                           ; 1 bytes @ 0x7
  4674                           
  4675                           
  4676                           ; 1 bytes @ 0x7
  4677  0077                     	ds	1
  4678  0078                     ??___lmul:	
  4679  0078                     ?i1_UARTchar:	
  4680                           ; 0 bytes @ 0x8
  4681                           
  4682  0078                     ??i1___lldiv:	
  4683                           ; 0 bytes @ 0x8
  4684                           
  4685  0078                     ?_PS2RawToScan:	
  4686                           ; 0 bytes @ 0x8
  4687                           
  4688  0078                     i1UARTchar@override:	
  4689                           ; 2 bytes @ 0x8
  4690                           
  4691  0078                     PS2RawToScan@Raw:	
  4692                           ; 1 bytes @ 0x8
  4693                           
  4694  0078                     ___lmul@product:	
  4695                           ; 2 bytes @ 0x8
  4696                           
  4697                           
  4698                           ; 4 bytes @ 0x8
  4699  0078                     	ds	1
  4700  0079                     ??i1_ReadFlash_4Byte:	
  4701  0079                     i1delayUS@j:	
  4702                           ; 0 bytes @ 0x9
  4703                           
  4704  0079                     i1UARTchar@NinethBit_override_data:	
  4705                           ; 1 bytes @ 0x9
  4706                           
  4707  0079                     i1___lldiv@quotient:	
  4708                           ; 1 bytes @ 0x9
  4709                           
  4710                           
  4711                           ; 4 bytes @ 0x9
  4712  0079                     	ds	1
  4713  007A                     ?_UART_send_break_timed:	
  4714  007A                     ?_WriteFlash_Sequential:	
  4715                           ; 0 bytes @ 0xA
  4716                           
  4717  007A                     ??i1_UARTchar:	
  4718                           ; 0 bytes @ 0xA
  4719                           
  4720  007A                     ??i1_Send_PS2:	
  4721                           ; 0 bytes @ 0xA
  4722                           
  4723  007A                     UART_send_break_timed@US:	
  4724                           ; 0 bytes @ 0xA
  4725                           
  4726  007A                     PS2RawToScan@temp:	
  4727                           ; 2 bytes @ 0xA
  4728                           
  4729  007A                     WriteFlash_Sequential@row:	
  4730                           ; 2 bytes @ 0xA
  4731                           
  4732                           
  4733                           ; 2 bytes @ 0xA
  4734  007A                     	ds	2
  4735  007C                     ??_UART_send_break_timed:	
  4736  007C                     WriteFlash_Sequential@buffer:	
  4737                           ; 0 bytes @ 0xC
  4738                           
  4739                           
  4740                           ; 1 bytes @ 0xC
  4741  007C                     	ds	1
  4742  007D                     WriteFlash_Sequential@amount:	
  4743  007D                     i1___lldiv@counter:	
  4744                           ; 1 bytes @ 0xD
  4745                           
  4746                           
  4747                           ; 1 bytes @ 0xD
  4748  007D                     	ds	1
  4749  007E                     ??_ResendLast:	
  4750                           
  4751                           	psect	cstackBANK0
  4752  0020                     __pcstackBANK0:	
  4753                           ; 0 bytes @ 0xE
  4754                           
  4755  0020                     ??_PS2RawToScan:	
  4756  0020                     ??_WriteFlash_Sequential:	
  4757                           ; 0 bytes @ 0x0
  4758                           
  4759  0020                     ?i1_InitUART:	
  4760                           ; 0 bytes @ 0x0
  4761                           
  4762  0020                     ?___llmod:	
  4763                           ; 0 bytes @ 0x0
  4764                           
  4765  0020                     i1UARTchar@data:	
  4766                           ; 4 bytes @ 0x0
  4767                           
  4768  0020                     i1Send_PS2@oddparity:	
  4769                           ; 1 bytes @ 0x0
  4770                           
  4771  0020                     ___llmod@divisor:	
  4772                           ; 1 bytes @ 0x0
  4773                           
  4774  0020                     i1InitUART@Baud:	
  4775                           ; 4 bytes @ 0x0
  4776                           
  4777  0020                     i1ReadFlash_4Byte@temp:	
  4778                           ; 4 bytes @ 0x0
  4779                           
  4780                           
  4781                           ; 4 bytes @ 0x0
  4782  0020                     	ds	1
  4783  0021                     ?i1_UARTstringWAIT:	
  4784  0021                     i1Send_PS2@command:	
  4785                           ; 0 bytes @ 0x1
  4786                           
  4787  0021                     i1UARTstringWAIT@data:	
  4788                           ; 1 bytes @ 0x1
  4789                           
  4790                           
  4791                           ; 2 bytes @ 0x1
  4792  0021                     	ds	1
  4793  0022                     i1Send_PS2@i:	
  4794                           
  4795                           ; 1 bytes @ 0x2
  4796  0022                     	ds	1
  4797  0023                     ??i1_UARTstringWAIT:	
  4798  0023                     i1Send_PS2@timeout:	
  4799                           ; 0 bytes @ 0x3
  4800                           
  4801  0023                     WriteFlash_Sequential@TempBufH:	
  4802                           ; 2 bytes @ 0x3
  4803                           
  4804                           
  4805                           ; 32 bytes @ 0x3
  4806  0023                     	ds	1
  4807  0024                     ?i1_ReadBaud:	
  4808  0024                     i1InitUART@parity:	
  4809                           ; 4 bytes @ 0x4
  4810                           
  4811  0024                     i1ReadBaud@row:	
  4812                           ; 1 bytes @ 0x4
  4813                           
  4814  0024                     ___llmod@dividend:	
  4815                           ; 2 bytes @ 0x4
  4816                           
  4817                           
  4818                           ; 4 bytes @ 0x4
  4819  0024                     	ds	1
  4820  0025                     ??i1_InitUART:	
  4821                           
  4822                           ; 0 bytes @ 0x5
  4823  0025                     	ds	1
  4824  0026                     i1ReadBaud@column:	
  4825                           
  4826                           ; 1 bytes @ 0x6
  4827  0026                     	ds	2
  4828  0028                     ??___llmod:	
  4829  0028                     ??i1_ReadBaud:	
  4830                           ; 0 bytes @ 0x8
  4831                           
  4832                           
  4833                           ; 0 bytes @ 0x8
  4834  0028                     	ds	1
  4835  0029                     ___llmod@counter:	
  4836                           
  4837                           ; 1 bytes @ 0x9
  4838  0029                     	ds	1
  4839  002A                     ?_sprintf:	
  4840  002A                     sprintf@f:	
  4841                           ; 2 bytes @ 0xA
  4842                           
  4843                           
  4844                           ; 2 bytes @ 0xA
  4845  002A                     	ds	3
  4846  002D                     i1InitUART@spbrg:	
  4847                           
  4848                           ; 2 bytes @ 0xD
  4849  002D                     	ds	2
  4850  002F                     i1InitUART@baudconfig:	
  4851                           
  4852                           ; 1 bytes @ 0xF
  4853  002F                     	ds	1
  4854  0030                     ??_sprintf:	
  4855  0030                     i1InitUART@config:	
  4856                           ; 0 bytes @ 0x10
  4857                           
  4858  0030                     i1ReadBaud@temp:	
  4859                           ; 1 bytes @ 0x10
  4860                           
  4861                           
  4862                           ; 4 bytes @ 0x10
  4863  0030                     	ds	1
  4864  0031                     i1InitUART@temp:	
  4865                           
  4866                           ; 4 bytes @ 0x11
  4867  0031                     	ds	5
  4868  0036                     sprintf@flag:	
  4869                           
  4870                           ; 1 bytes @ 0x16
  4871  0036                     	ds	1
  4872  0037                     sprintf@prec:	
  4873                           
  4874                           ; 2 bytes @ 0x17
  4875  0037                     	ds	2
  4876  0039                     sprintf@val:	
  4877                           
  4878                           ; 4 bytes @ 0x19
  4879  0039                     	ds	4
  4880  003D                     sprintf@ap:	
  4881                           
  4882                           ; 1 bytes @ 0x1D
  4883  003D                     	ds	1
  4884  003E                     sprintf@sp:	
  4885                           
  4886                           ; 1 bytes @ 0x1E
  4887  003E                     	ds	1
  4888  003F                     sprintf@c:	
  4889                           
  4890                           ; 1 bytes @ 0x1F
  4891  003F                     	ds	4
  4892  0043                     WriteFlash_Sequential@TempBufL:	
  4893                           
  4894                           ; 32 bytes @ 0x23
  4895  0043                     	ds	32
  4896  0063                     WriteFlash_Sequential@tempH:	
  4897                           
  4898                           ; 1 bytes @ 0x43
  4899  0063                     	ds	1
  4900  0064                     WriteFlash_Sequential@tempL:	
  4901                           
  4902                           ; 1 bytes @ 0x44
  4903  0064                     	ds	1
  4904  0065                     WriteFlash_Sequential@amountTemp:	
  4905                           
  4906                           ; 1 bytes @ 0x45
  4907  0065                     	ds	1
  4908  0066                     WriteFlash_Sequential@temp:	
  4909                           
  4910                           ; 2 bytes @ 0x46
  4911  0066                     	ds	2
  4912  0068                     WriteFlash_Sequential@spaces:	
  4913                           
  4914                           ; 1 bytes @ 0x48
  4915  0068                     	ds	1
  4916  0069                     WriteFlash_Sequential@i:	
  4917                           
  4918                           ; 1 bytes @ 0x49
  4919  0069                     	ds	1
  4920  006A                     WriteBaud@temp:	
  4921                           
  4922                           ; 4 bytes @ 0x4A
  4923  006A                     	ds	4
  4924  006E                     ??_isr:	
  4925                           
  4926                           ; 0 bytes @ 0x4E
  4927  006E                     	ds	2
  4928                           
  4929                           	psect	maintext
  4930  1615                     __pmaintext:	
  4931 ;;
  4932 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  4933 ;;
  4934 ;; *************** function _main *****************
  4935 ;; Defined at:
  4936 ;;		line 121 in file "main.c"
  4937 ;; Parameters:    Size  Location     Type
  4938 ;;		None
  4939 ;; Auto vars:     Size  Location     Type
  4940 ;;  i               1   54[BANK4 ] unsigned char 
  4941 ;; Return value:  Size  Location     Type
  4942 ;;		None               void
  4943 ;; Registers used:
  4944 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4945 ;; Tracked objects:
  4946 ;;		On entry : B1F/0
  4947 ;;		On exit  : 0/0
  4948 ;;		Unchanged: 0/0
  4949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4951 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  4952 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  4953 ;;      Totals:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  4954 ;;Total ram usage:        2 bytes
  4955 ;; Hardware stack levels required when called:   11
  4956 ;; This function calls:
  4957 ;;		_ConfigureOscillator
  4958 ;;		_InitApp
  4959 ;;		_Init_System
  4960 ;;		_PS_2_ENABLE_INTERRUPT
  4961 ;;		_PS_2_INIT
  4962 ;;		_ReadVoltage
  4963 ;;		_UARTstringWAIT
  4964 ;;		___ftge
  4965 ;;		_delayUS
  4966 ;; This function is called by:
  4967 ;;		Startup code after reset
  4968 ;; This function uses a non-reentrant model
  4969 ;;
  4970                           
  4971                           
  4972                           ;psect for function _main
  4973  1615                     _main:	
  4974                           
  4975                           ;main.c: 123: unsigned char i=0;
  4976                           
  4977                           ;incstack = 0
  4978                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4979  1615  0024               	movlb	4	; select bank4
  4980  1616  01D6               	clrf	main@i^(0+512)
  4981                           
  4982                           ;main.c: 125: ConfigureOscillator();
  4983  1617  3199  2144  3196   	fcall	_ConfigureOscillator
  4984                           
  4985                           ;main.c: 126: InitApp();
  4986  161A  3199  21A5  3196   	fcall	_InitApp
  4987                           
  4988                           ;main.c: 127: Init_System();
  4989  161D  318A  2251  3196   	fcall	_Init_System
  4990                           
  4991                           ;main.c: 128: PS_2_INIT();
  4992  1620  3198  20EE  3196   	fcall	_PS_2_INIT
  4993                           
  4994                           ;main.c: 131: for(i =0;i<10;i++)
  4995  1623  0024               	movlb	4	; select bank4
  4996  1624  01D6               	clrf	main@i^(0+512)
  4997  1625  300A               	movlw	10
  4998  1626  0256               	subwf	main@i^(0+512),w
  4999  1627  1803               	btfsc	3,0
  5000  1628  2E52               	goto	l7044
  5001  1629                     l173:	
  5002                           
  5003                           ;main.c: 132: {
  5004                           ;main.c: 133: LATC |= 0b00010000;
  5005  1629  0022               	movlb	2	; select bank2
  5006  162A  160E               	bsf	14,4	;volatile
  5007                           
  5008                           ;main.c: 134: delayUS(10000);
  5009  162B  3000               	movlw	0
  5010  162C  0024               	movlb	4	; select bank4
  5011  162D  00A3               	movwf	(delayUS@US+3)^(0+512)
  5012  162E  3000               	movlw	0
  5013  162F  00A2               	movwf	(delayUS@US+2)^(0+512)
  5014  1630  3027               	movlw	39
  5015  1631  00A1               	movwf	(delayUS@US+1)^(0+512)
  5016  1632  3010               	movlw	16
  5017  1633  00A0               	movwf	delayUS@US^(0+512)
  5018  1634  319B  23E8  3196   	fcall	_delayUS
  5019                           
  5020                           ;main.c: 135: LATC &= ~0b00010000;
  5021  1637  30EF               	movlw	239
  5022  1638  0024               	movlb	4	; select bank4
  5023  1639  00D5               	movwf	??_main^(0+512)
  5024  163A  0855               	movf	??_main^(0+512),w
  5025  163B  0022               	movlb	2	; select bank2
  5026  163C  058E               	andwf	14,f	;volatile
  5027                           
  5028                           ;main.c: 136: delayUS(10000);
  5029  163D  3000               	movlw	0
  5030  163E  0024               	movlb	4	; select bank4
  5031  163F  00A3               	movwf	(delayUS@US+3)^(0+512)
  5032  1640  3000               	movlw	0
  5033  1641  00A2               	movwf	(delayUS@US+2)^(0+512)
  5034  1642  3027               	movlw	39
  5035  1643  00A1               	movwf	(delayUS@US+1)^(0+512)
  5036  1644  3010               	movlw	16
  5037  1645  00A0               	movwf	delayUS@US^(0+512)
  5038  1646  319B  23E8  3196   	fcall	_delayUS
  5039  1649  3001               	movlw	1
  5040  164A  0024               	movlb	4	; select bank4
  5041  164B  00D5               	movwf	??_main^(0+512)
  5042  164C  0855               	movf	??_main^(0+512),w
  5043  164D  07D6               	addwf	main@i^(0+512),f
  5044  164E  300A               	movlw	10
  5045  164F  0256               	subwf	main@i^(0+512),w
  5046  1650  1C03               	skipc
  5047  1651  2E29               	goto	l173
  5048  1652                     l7044:	
  5049                           
  5050                           ;main.c: 137: }
  5051                           ;main.c: 139: BatteryVoltage = ReadVoltage();
  5052  1652  319F  2741  3196   	fcall	_ReadVoltage
  5053  1655  0024               	movlb	4	; select bank4
  5054  1656  084C               	movf	?_ReadVoltage^(0+512),w
  5055  1657  00D7               	movwf	_BatteryVoltage^(0+512)
  5056  1658  084D               	movf	(?_ReadVoltage+1)^(0+512),w
  5057  1659  00D8               	movwf	(_BatteryVoltage+1)^(0+512)
  5058  165A  084E               	movf	(?_ReadVoltage+2)^(0+512),w
  5059  165B  00D9               	movwf	(_BatteryVoltage+2)^(0+512)
  5060                           
  5061                           ;main.c: 140: if(BatteryVoltage < 6.55 )
  5062  165C  0857               	movf	_BatteryVoltage^(0+512),w
  5063  165D  00A0               	movwf	___ftge@ff1^(0+512)
  5064  165E  0858               	movf	(_BatteryVoltage+1)^(0+512),w
  5065  165F  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5066  1660  0859               	movf	(_BatteryVoltage+2)^(0+512),w
  5067  1661  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5068  1662  309A               	movlw	154
  5069  1663  00A3               	movwf	___ftge@ff2^(0+512)
  5070  1664  30D1               	movlw	209
  5071  1665  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5072  1666  3040               	movlw	64
  5073  1667  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5074  1668  319C  241D  3196   	fcall	___ftge
  5075  166B  1803               	btfsc	3,0
  5076  166C  2E7A               	goto	l7048
  5077                           
  5078                           ;main.c: 141: {
  5079                           ;main.c: 142: UARTstringWAIT(VoltageMSG);
  5080  166D  3059               	movlw	low (_VoltageMSG| (0+32768))
  5081  166E  0024               	movlb	4	; select bank4
  5082  166F  00AF               	movwf	UARTstringWAIT@data^(0+512)
  5083  1670  3089               	movlw	high (_VoltageMSG| (0+32768))
  5084  1671  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  5085  1672  319B  2384  3196   	fcall	_UARTstringWAIT
  5086                           
  5087                           ;main.c: 143: UARTstringWAIT("Low!\r\n");
  5088  1675  303A               	movlw	low (STR_1| (0+32768))
  5089  1676  0024               	movlb	4	; select bank4
  5090  1677  00AF               	movwf	UARTstringWAIT@data^(0+512)
  5091  1678  308A               	movlw	high (STR_1| (0+32768))
  5092  1679  2E98               	goto	L1
  5093  167A                     l7048:	
  5094                           ;main.c: 144: }
  5095                           
  5096                           
  5097                           ;main.c: 145: else if (BatteryVoltage > 30.0)
  5098  167A  3000               	movlw	0
  5099  167B  0024               	movlb	4	; select bank4
  5100  167C  00A0               	movwf	___ftge@ff1^(0+512)
  5101  167D  30F0               	movlw	240
  5102  167E  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5103  167F  3041               	movlw	65
  5104  1680  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5105  1681  0857               	movf	_BatteryVoltage^(0+512),w
  5106  1682  00A3               	movwf	___ftge@ff2^(0+512)
  5107  1683  0858               	movf	(_BatteryVoltage+1)^(0+512),w
  5108  1684  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5109  1685  0859               	movf	(_BatteryVoltage+2)^(0+512),w
  5110  1686  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5111  1687  319C  241D  3196   	fcall	___ftge
  5112  168A  1803               	btfsc	3,0
  5113  168B  2E9C               	goto	l7052
  5114                           
  5115                           ;main.c: 146: {
  5116                           ;main.c: 147: UARTstringWAIT(VoltageMSG);
  5117  168C  3059               	movlw	low (_VoltageMSG| (0+32768))
  5118  168D  0024               	movlb	4	; select bank4
  5119  168E  00AF               	movwf	UARTstringWAIT@data^(0+512)
  5120  168F  3089               	movlw	high (_VoltageMSG| (0+32768))
  5121  1690  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  5122  1691  319B  2384  3196   	fcall	_UARTstringWAIT
  5123                           
  5124                           ;main.c: 148: UARTstringWAIT("High!\r\n");
  5125  1694  3032               	movlw	low (STR_2| (0+32768))
  5126  1695  0024               	movlb	4	; select bank4
  5127  1696  00AF               	movwf	UARTstringWAIT@data^(0+512)
  5128  1697  308A               	movlw	high (STR_2| (0+32768))
  5129  1698                     L1:	
  5130  1698  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  5131  1699  319B  2384  3196   	fcall	_UARTstringWAIT
  5132  169C                     l7052:	
  5133                           
  5134                           ;main.c: 149: }
  5135                           ;main.c: 151: PS_2_ENABLE_INTERRUPT(0b00100000);
  5136  169C  3020               	movlw	32
  5137  169D  3198  20C7  3196   	fcall	_PS_2_ENABLE_INTERRUPT
  5138                           
  5139                           ;main.c: 153: PIE1bits.RCIE = 1;
  5140  16A0  0021               	movlb	1	; select bank1
  5141  16A1  1691               	bsf	17,5	;volatile
  5142  16A2                     l7056:	
  5143                           ;main.c: 156: while(1)
  5144                           
  5145                           
  5146                           ;main.c: 157: {
  5147                           ;main.c: 158: BatteryVoltage = ReadVoltage();
  5148  16A2  319F  2741  3196   	fcall	_ReadVoltage
  5149  16A5  0024               	movlb	4	; select bank4
  5150  16A6  084C               	movf	?_ReadVoltage^(0+512),w
  5151  16A7  00D7               	movwf	_BatteryVoltage^(0+512)
  5152  16A8  084D               	movf	(?_ReadVoltage+1)^(0+512),w
  5153  16A9  00D8               	movwf	(_BatteryVoltage+1)^(0+512)
  5154  16AA  084E               	movf	(?_ReadVoltage+2)^(0+512),w
  5155  16AB  00D9               	movwf	(_BatteryVoltage+2)^(0+512)
  5156                           
  5157                           ;main.c: 159: delayUS(20);
  5158  16AC  3000               	movlw	0
  5159  16AD  00A3               	movwf	(delayUS@US+3)^(0+512)
  5160  16AE  3000               	movlw	0
  5161  16AF  00A2               	movwf	(delayUS@US+2)^(0+512)
  5162  16B0  3000               	movlw	0
  5163  16B1  00A1               	movwf	(delayUS@US+1)^(0+512)
  5164  16B2  3014               	movlw	20
  5165  16B3  00A0               	movwf	delayUS@US^(0+512)
  5166  16B4  319B  23E8  3196   	fcall	_delayUS
  5167                           
  5168                           ;main.c: 160: if(BatteryVoltage < 6.55 || BatteryVoltage > 30.0)
  5169  16B7  0024               	movlb	4	; select bank4
  5170  16B8  0857               	movf	_BatteryVoltage^(0+512),w
  5171  16B9  00A0               	movwf	___ftge@ff1^(0+512)
  5172  16BA  0858               	movf	(_BatteryVoltage+1)^(0+512),w
  5173  16BB  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5174  16BC  0859               	movf	(_BatteryVoltage+2)^(0+512),w
  5175  16BD  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5176  16BE  309A               	movlw	154
  5177  16BF  00A3               	movwf	___ftge@ff2^(0+512)
  5178  16C0  30D1               	movlw	209
  5179  16C1  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5180  16C2  3040               	movlw	64
  5181  16C3  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5182  16C4  319C  241D  3196   	fcall	___ftge
  5183  16C7  1C03               	btfss	3,0
  5184  16C8  2EDB               	goto	l181
  5185  16C9  3000               	movlw	0
  5186  16CA  0024               	movlb	4	; select bank4
  5187  16CB  00A0               	movwf	___ftge@ff1^(0+512)
  5188  16CC  30F0               	movlw	240
  5189  16CD  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5190  16CE  3041               	movlw	65
  5191  16CF  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5192  16D0  0857               	movf	_BatteryVoltage^(0+512),w
  5193  16D1  00A3               	movwf	___ftge@ff2^(0+512)
  5194  16D2  0858               	movf	(_BatteryVoltage+1)^(0+512),w
  5195  16D3  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5196  16D4  0859               	movf	(_BatteryVoltage+2)^(0+512),w
  5197  16D5  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5198  16D6  319C  241D  3196   	fcall	___ftge
  5199  16D9  1803               	btfsc	3,0
  5200  16DA  2EDF               	goto	l7064
  5201  16DB                     l181:	
  5202                           
  5203                           ;main.c: 161: {
  5204                           ;main.c: 162: Alarm = 1;
  5205  16DB  0024               	movlb	4	; select bank4
  5206  16DC  01DE               	clrf	_Alarm^(0+512)
  5207  16DD  0ADE               	incf	_Alarm^(0+512),f
  5208                           
  5209                           ;main.c: 163: }
  5210  16DE  2EE3               	goto	l7068
  5211  16DF                     l7064:	
  5212                           
  5213                           ;main.c: 164: else
  5214                           ;main.c: 165: {
  5215                           ;main.c: 166: Alarm = 0;
  5216  16DF  0024               	movlb	4	; select bank4
  5217  16E0  01DE               	clrf	_Alarm^(0+512)
  5218                           
  5219                           ;main.c: 167: LATC |= 0b00000010;
  5220  16E1  0022               	movlb	2	; select bank2
  5221  16E2  148E               	bsf	14,1	;volatile
  5222  16E3                     l7068:	
  5223                           
  5224                           ;main.c: 168: }
  5225                           ;main.c: 169: if(Alarm)
  5226  16E3  0024               	movlb	4	; select bank4
  5227  16E4  085E               	movf	_Alarm^(0+512),w
  5228  16E5  1903               	btfsc	3,2
  5229  16E6  2EF7               	goto	l7078
  5230                           
  5231                           ;main.c: 170: {
  5232                           ;main.c: 171: pwrLEDtoggle++;
  5233  16E7  3001               	movlw	1
  5234  16E8  07DC               	addwf	_pwrLEDtoggle^(0+512),f
  5235  16E9  3000               	movlw	0
  5236  16EA  3DDD               	addwfc	(_pwrLEDtoggle+1)^(0+512),f
  5237                           
  5238                           ;main.c: 172: if(pwrLEDtoggle == 100)
  5239  16EB  3064               	movlw	100
  5240  16EC  065C               	xorwf	_pwrLEDtoggle^(0+512),w
  5241  16ED  045D               	iorwf	(_pwrLEDtoggle+1)^(0+512),w
  5242  16EE  1D03               	btfss	3,2
  5243  16EF  2EF7               	goto	l7078
  5244                           
  5245                           ;main.c: 173: {
  5246                           ;main.c: 174: pwrLEDtoggle = 0;
  5247  16F0  01DC               	clrf	_pwrLEDtoggle^(0+512)
  5248  16F1  01DD               	clrf	(_pwrLEDtoggle+1)^(0+512)
  5249                           
  5250                           ;main.c: 175: LATC ^= 0b00000010;
  5251  16F2  3002               	movlw	2
  5252  16F3  00D5               	movwf	??_main^(0+512)
  5253  16F4  0855               	movf	??_main^(0+512),w
  5254  16F5  0022               	movlb	2	; select bank2
  5255  16F6  068E               	xorwf	14,f	;volatile
  5256  16F7                     l7078:	
  5257                           
  5258                           ;main.c: 176: }
  5259                           ;main.c: 177: }
  5260                           ;main.c: 179: if(SinLEDtimer < 100)
  5261  16F7  3000               	movlw	0
  5262  16F8  0024               	movlb	4	; select bank4
  5263  16F9  025B               	subwf	(_SinLEDtimer+1)^(0+512),w
  5264  16FA  3064               	movlw	100
  5265  16FB  1903               	skipnz
  5266  16FC  025A               	subwf	_SinLEDtimer^(0+512),w
  5267  16FD  1803               	skipnc
  5268  16FE  2F04               	goto	l7082
  5269                           
  5270                           ;main.c: 180: {
  5271                           ;main.c: 181: SinLEDtimer++;
  5272  16FF  3001               	movlw	1
  5273  1700  07DA               	addwf	_SinLEDtimer^(0+512),f
  5274  1701  3000               	movlw	0
  5275  1702  3DDB               	addwfc	(_SinLEDtimer+1)^(0+512),f
  5276                           
  5277                           ;main.c: 182: }
  5278  1703  2EA2               	goto	l7056
  5279  1704                     l7082:	
  5280                           
  5281                           ;main.c: 183: else
  5282                           ;main.c: 184: {
  5283                           ;main.c: 185: LATC &= ~0b00001000;
  5284  1704  30F7               	movlw	247
  5285  1705  00D5               	movwf	??_main^(0+512)
  5286  1706  0855               	movf	??_main^(0+512),w
  5287  1707  0022               	movlb	2	; select bank2
  5288  1708  058E               	andwf	14,f	;volatile
  5289  1709  2EA2               	goto	l7056
  5290  170A                     __end_of_main:	
  5291                           
  5292                           	psect	text1
  5293  1C1D                     __ptext1:	
  5294 ;; *************** function ___ftge *****************
  5295 ;; Defined at:
  5296 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  5297 ;; Parameters:    Size  Location     Type
  5298 ;;  ff1             3    0[BANK4 ] float 
  5299 ;;  ff2             3    3[BANK4 ] float 
  5300 ;; Auto vars:     Size  Location     Type
  5301 ;;		None
  5302 ;; Return value:  Size  Location     Type
  5303 ;;		None               void
  5304 ;; Registers used:
  5305 ;;		wreg, status,2, status,0
  5306 ;; Tracked objects:
  5307 ;;		On entry : 0/0
  5308 ;;		On exit  : 0/0
  5309 ;;		Unchanged: 0/0
  5310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5311 ;;      Params:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5313 ;;      Temps:          0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  5314 ;;      Totals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0
  5315 ;;Total ram usage:        9 bytes
  5316 ;; Hardware stack levels used:    1
  5317 ;; Hardware stack levels required when called:    7
  5318 ;; This function calls:
  5319 ;;		Nothing
  5320 ;; This function is called by:
  5321 ;;		_main
  5322 ;; This function uses a non-reentrant model
  5323 ;;
  5324                           
  5325                           
  5326                           ;psect for function ___ftge
  5327  1C1D                     ___ftge:	
  5328                           
  5329                           ;incstack = 0
  5330                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  5331  1C1D  0024               	movlb	4	; select bank4
  5332  1C1E  1FA2               	btfss	(___ftge@ff1+2)^(0+512),7
  5333  1C1F  2C34               	goto	l7004
  5334  1C20  0920               	comf	___ftge@ff1^(0+512),w
  5335  1C21  00A6               	movwf	??___ftge^(0+512)
  5336  1C22  0921               	comf	(___ftge@ff1+1)^(0+512),w
  5337  1C23  00A7               	movwf	(??___ftge^(0+512)+1)
  5338  1C24  0922               	comf	(___ftge@ff1+2)^(0+512),w
  5339  1C25  00A8               	movwf	(??___ftge^(0+512)+2)
  5340  1C26  0AA6               	incf	??___ftge^(0+512),f
  5341  1C27  1903               	skipnz
  5342  1C28  0AA7               	incf	(??___ftge^(0+512)+1),f
  5343  1C29  1903               	skipnz
  5344  1C2A  0AA8               	incf	(??___ftge^(0+512)+2),f
  5345  1C2B  3000               	movlw	0
  5346  1C2C  0726               	addwf	??___ftge^(0+512),w
  5347  1C2D  00A0               	movwf	___ftge@ff1^(0+512)
  5348  1C2E  3000               	movlw	0
  5349  1C2F  3D27               	addwfc	(??___ftge+1)^(0+512),w
  5350  1C30  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5351  1C31  3080               	movlw	128
  5352  1C32  3D28               	addwfc	(??___ftge+2)^(0+512),w
  5353  1C33  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5354  1C34                     l7004:	
  5355  1C34  1FA5               	btfss	(___ftge@ff2+2)^(0+512),7
  5356  1C35  2C4A               	goto	l7008
  5357  1C36  0923               	comf	___ftge@ff2^(0+512),w
  5358  1C37  00A6               	movwf	??___ftge^(0+512)
  5359  1C38  0924               	comf	(___ftge@ff2+1)^(0+512),w
  5360  1C39  00A7               	movwf	(??___ftge^(0+512)+1)
  5361  1C3A  0925               	comf	(___ftge@ff2+2)^(0+512),w
  5362  1C3B  00A8               	movwf	(??___ftge^(0+512)+2)
  5363  1C3C  0AA6               	incf	??___ftge^(0+512),f
  5364  1C3D  1903               	skipnz
  5365  1C3E  0AA7               	incf	(??___ftge^(0+512)+1),f
  5366  1C3F  1903               	skipnz
  5367  1C40  0AA8               	incf	(??___ftge^(0+512)+2),f
  5368  1C41  3000               	movlw	0
  5369  1C42  0726               	addwf	??___ftge^(0+512),w
  5370  1C43  00A3               	movwf	___ftge@ff2^(0+512)
  5371  1C44  3000               	movlw	0
  5372  1C45  3D27               	addwfc	(??___ftge+1)^(0+512),w
  5373  1C46  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5374  1C47  3080               	movlw	128
  5375  1C48  3D28               	addwfc	(??___ftge+2)^(0+512),w
  5376  1C49  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5377  1C4A                     l7008:	
  5378  1C4A  3080               	movlw	128
  5379  1C4B  06A2               	xorwf	(___ftge@ff1+2)^(0+512),f
  5380  1C4C  3080               	movlw	128
  5381  1C4D  06A5               	xorwf	(___ftge@ff2+2)^(0+512),f
  5382  1C4E  0825               	movf	(___ftge@ff2+2)^(0+512),w
  5383  1C4F  0222               	subwf	(___ftge@ff1+2)^(0+512),w
  5384  1C50  1D03               	skipz
  5385  1C51  0008               	return
  5386  1C52  0824               	movf	(___ftge@ff2+1)^(0+512),w
  5387  1C53  0221               	subwf	(___ftge@ff1+1)^(0+512),w
  5388  1C54  1D03               	skipz
  5389  1C55  0008               	return
  5390  1C56  0823               	movf	___ftge@ff2^(0+512),w
  5391  1C57  0220               	subwf	___ftge@ff1^(0+512),w
  5392  1C58  0008               	return
  5393  1C59                     __end_of___ftge:	
  5394                           
  5395                           	psect	text2
  5396  1F41                     __ptext2:	
  5397 ;; *************** function _ReadVoltage *****************
  5398 ;; Defined at:
  5399 ;;		line 62 in file "ADC.c"
  5400 ;; Parameters:    Size  Location     Type
  5401 ;;		None
  5402 ;; Auto vars:     Size  Location     Type
  5403 ;;  voltage         3   48[BANK4 ] float 
  5404 ;;  temp            2   51[BANK4 ] unsigned int 
  5405 ;; Return value:  Size  Location     Type
  5406 ;;                  3   44[BANK4 ] unsigned int 
  5407 ;; Registers used:
  5408 ;;		wreg, status,2, status,0, pclath, cstack
  5409 ;; Tracked objects:
  5410 ;;		On entry : 0/0
  5411 ;;		On exit  : 0/0
  5412 ;;		Unchanged: 0/0
  5413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5414 ;;      Params:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  5415 ;;      Locals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  5416 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  5417 ;;      Totals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0
  5418 ;;Total ram usage:        9 bytes
  5419 ;; Hardware stack levels used:    1
  5420 ;; Hardware stack levels required when called:    9
  5421 ;; This function calls:
  5422 ;;		_DisableInternalADC
  5423 ;;		_InternalADC_Read
  5424 ;;		___ftdiv
  5425 ;;		___ftmul
  5426 ;;		___lwtoft
  5427 ;; This function is called by:
  5428 ;;		_main
  5429 ;; This function uses a non-reentrant model
  5430 ;;
  5431                           
  5432                           
  5433                           ;psect for function _ReadVoltage
  5434  1F41                     _ReadVoltage:	
  5435                           
  5436                           ;ADC.c: 64: unsigned int temp;
  5437                           ;ADC.c: 65: double voltage;
  5438                           ;ADC.c: 70: temp = InternalADC_Read(2);
  5439                           
  5440                           ;incstack = 0
  5441                           ; Regs used in _ReadVoltage: [wreg+status,2+status,0+pclath+cstack]
  5442  1F41  3002               	movlw	2
  5443  1F42  319C  24DB  319F   	fcall	_InternalADC_Read
  5444  1F45  0024               	movlb	4	; select bank4
  5445  1F46  082B               	movf	(?_InternalADC_Read+1)^(0+512),w
  5446  1F47  00D4               	movwf	(ReadVoltage@temp+1)^(0+512)
  5447  1F48  082A               	movf	?_InternalADC_Read^(0+512),w
  5448  1F49  00D3               	movwf	ReadVoltage@temp^(0+512)
  5449                           
  5450                           ;ADC.c: 71: DisableInternalADC();
  5451  1F4A  3198  2063  319F   	fcall	_DisableInternalADC
  5452                           
  5453                           ;ADC.c: 78: if((FVRCON & 0x03) == 0x03)
  5454  1F4D  3003               	movlw	3
  5455  1F4E  0022               	movlb	2	; select bank2
  5456  1F4F  0517               	andwf	23,w	;volatile
  5457  1F50  0024               	movlb	4	; select bank4
  5458  1F51  00CF               	movwf	??_ReadVoltage^(0+512)
  5459  1F52  3003               	movlw	3
  5460  1F53  064F               	xorwf	??_ReadVoltage^(0+512),w
  5461  1F54  1D03               	btfss	3,2
  5462  1F55  2F5C               	goto	l6990
  5463                           
  5464                           ;ADC.c: 79: {
  5465                           ;ADC.c: 81: temp <<= 2;
  5466  1F56  3002               	movlw	2
  5467  1F57                     u9145:	
  5468  1F57  35D3               	lslf	ReadVoltage@temp^(0+512),f
  5469  1F58  0DD4               	rlf	(ReadVoltage@temp+1)^(0+512),f
  5470  1F59  0B89               	decfsz	9,f
  5471  1F5A  2F57               	goto	u9145
  5472                           
  5473                           ;ADC.c: 82: }
  5474  1F5B  2F6A               	goto	l6994
  5475  1F5C                     l6990:	
  5476                           
  5477                           ;ADC.c: 83: else if((FVRCON & 0x03) == 0x02)
  5478  1F5C  3003               	movlw	3
  5479  1F5D  0022               	movlb	2	; select bank2
  5480  1F5E  0517               	andwf	23,w	;volatile
  5481  1F5F  0024               	movlb	4	; select bank4
  5482  1F60  00CF               	movwf	??_ReadVoltage^(0+512)
  5483  1F61  3002               	movlw	2
  5484  1F62  064F               	xorwf	??_ReadVoltage^(0+512),w
  5485  1F63  1D03               	btfss	3,2
  5486  1F64  2F6A               	goto	l6994
  5487                           
  5488                           ;ADC.c: 84: {
  5489                           ;ADC.c: 86: temp <<= 1;
  5490  1F65  3001               	movlw	1
  5491  1F66                     u9165:	
  5492  1F66  35D3               	lslf	ReadVoltage@temp^(0+512),f
  5493  1F67  0DD4               	rlf	(ReadVoltage@temp+1)^(0+512),f
  5494  1F68  0B89               	decfsz	9,f
  5495  1F69  2F66               	goto	u9165
  5496  1F6A                     l6994:	
  5497                           
  5498                           ;ADC.c: 87: }
  5499                           ;ADC.c: 88: voltage = ((double)temp / 1000) * 5.7;
  5500  1F6A  3066               	movlw	102
  5501  1F6B  00BC               	movwf	___ftmul@f1^(0+512)
  5502  1F6C  30B6               	movlw	182
  5503  1F6D  00BD               	movwf	(___ftmul@f1+1)^(0+512)
  5504  1F6E  3040               	movlw	64
  5505  1F6F  00BE               	movwf	(___ftmul@f1+2)^(0+512)
  5506  1F70  3000               	movlw	0
  5507  1F71  00AC               	movwf	___ftdiv@f2^(0+512)
  5508  1F72  307A               	movlw	122
  5509  1F73  00AD               	movwf	(___ftdiv@f2+1)^(0+512)
  5510  1F74  3044               	movlw	68
  5511  1F75  00AE               	movwf	(___ftdiv@f2+2)^(0+512)
  5512  1F76  0854               	movf	(ReadVoltage@temp+1)^(0+512),w
  5513  1F77  00A9               	movwf	(___lwtoft@c+1)^(0+512)
  5514  1F78  0853               	movf	ReadVoltage@temp^(0+512),w
  5515  1F79  00A8               	movwf	___lwtoft@c^(0+512)
  5516  1F7A  3199  2190  319F   	fcall	___lwtoft
  5517  1F7D  0024               	movlb	4	; select bank4
  5518  1F7E  0828               	movf	?___lwtoft^(0+512),w
  5519  1F7F  00AF               	movwf	___ftdiv@f1^(0+512)
  5520  1F80  0829               	movf	(?___lwtoft+1)^(0+512),w
  5521  1F81  00B0               	movwf	(___ftdiv@f1+1)^(0+512)
  5522  1F82  082A               	movf	(?___lwtoft+2)^(0+512),w
  5523  1F83  00B1               	movwf	(___ftdiv@f1+2)^(0+512)
  5524  1F84  3192  2218  319F   	fcall	___ftdiv
  5525  1F87  0024               	movlb	4	; select bank4
  5526  1F88  082C               	movf	?___ftdiv^(0+512),w
  5527  1F89  00BF               	movwf	___ftmul@f2^(0+512)
  5528  1F8A  082D               	movf	(?___ftdiv+1)^(0+512),w
  5529  1F8B  00C0               	movwf	(___ftmul@f2+1)^(0+512)
  5530  1F8C  082E               	movf	(?___ftdiv+2)^(0+512),w
  5531  1F8D  00C1               	movwf	(___ftmul@f2+2)^(0+512)
  5532  1F8E  3192  22C1         	fcall	___ftmul
  5533  1F90  0024               	movlb	4	; select bank4
  5534  1F91  083C               	movf	?___ftmul^(0+512),w
  5535  1F92  00D0               	movwf	ReadVoltage@voltage^(0+512)
  5536  1F93  083D               	movf	(?___ftmul+1)^(0+512),w
  5537  1F94  00D1               	movwf	(ReadVoltage@voltage+1)^(0+512)
  5538  1F95  083E               	movf	(?___ftmul+2)^(0+512),w
  5539  1F96  00D2               	movwf	(ReadVoltage@voltage+2)^(0+512)
  5540                           
  5541                           ;ADC.c: 89: return voltage;
  5542  1F97  0850               	movf	ReadVoltage@voltage^(0+512),w
  5543  1F98  00CC               	movwf	?_ReadVoltage^(0+512)
  5544  1F99  0851               	movf	(ReadVoltage@voltage+1)^(0+512),w
  5545  1F9A  00CD               	movwf	(?_ReadVoltage+1)^(0+512)
  5546  1F9B  0852               	movf	(ReadVoltage@voltage+2)^(0+512),w
  5547  1F9C  00CE               	movwf	(?_ReadVoltage+2)^(0+512)
  5548  1F9D  0008               	return
  5549  1F9E                     __end_of_ReadVoltage:	
  5550                           
  5551                           	psect	text3
  5552  1990                     __ptext3:	
  5553 ;; *************** function ___lwtoft *****************
  5554 ;; Defined at:
  5555 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  5556 ;; Parameters:    Size  Location     Type
  5557 ;;  c               2    8[BANK4 ] unsigned int 
  5558 ;; Auto vars:     Size  Location     Type
  5559 ;;		None
  5560 ;; Return value:  Size  Location     Type
  5561 ;;                  3    8[BANK4 ] float 
  5562 ;; Registers used:
  5563 ;;		wreg, status,2, status,0, pclath, cstack
  5564 ;; Tracked objects:
  5565 ;;		On entry : 0/0
  5566 ;;		On exit  : 0/0
  5567 ;;		Unchanged: 0/0
  5568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5569 ;;      Params:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  5570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5571 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  5572 ;;      Totals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  5573 ;;Total ram usage:        4 bytes
  5574 ;; Hardware stack levels used:    1
  5575 ;; Hardware stack levels required when called:    8
  5576 ;; This function calls:
  5577 ;;		___ftpack
  5578 ;; This function is called by:
  5579 ;;		_ReadVoltage
  5580 ;; This function uses a non-reentrant model
  5581 ;;
  5582                           
  5583                           
  5584                           ;psect for function ___lwtoft
  5585  1990                     ___lwtoft:	
  5586                           
  5587                           ;incstack = 0
  5588                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  5589  1990  0024               	movlb	4	; select bank4
  5590  1991  0828               	movf	___lwtoft@c^(0+512),w
  5591  1992  00A0               	movwf	___ftpack@arg^(0+512)
  5592  1993  0829               	movf	(___lwtoft@c+1)^(0+512),w
  5593  1994  00A1               	movwf	(___ftpack@arg+1)^(0+512)
  5594  1995  01A2               	clrf	(___ftpack@arg+2)^(0+512)
  5595  1996  308E               	movlw	142
  5596  1997  00AB               	movwf	??___lwtoft^(0+512)
  5597  1998  082B               	movf	??___lwtoft^(0+512),w
  5598  1999  00A3               	movwf	___ftpack@exp^(0+512)
  5599  199A  01A4               	clrf	___ftpack@sign^(0+512)
  5600  199B  3191  214D         	fcall	___ftpack
  5601  199D  0024               	movlb	4	; select bank4
  5602  199E  0820               	movf	?___ftpack^(0+512),w
  5603  199F  00A8               	movwf	?___lwtoft^(0+512)
  5604  19A0  0821               	movf	(?___ftpack+1)^(0+512),w
  5605  19A1  00A9               	movwf	(?___lwtoft+1)^(0+512)
  5606  19A2  0822               	movf	(?___ftpack+2)^(0+512),w
  5607  19A3  00AA               	movwf	(?___lwtoft+2)^(0+512)
  5608  19A4  0008               	return
  5609  19A5                     __end_of___lwtoft:	
  5610                           
  5611                           	psect	text4
  5612  12C1                     __ptext4:	
  5613 ;; *************** function ___ftmul *****************
  5614 ;; Defined at:
  5615 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  5616 ;; Parameters:    Size  Location     Type
  5617 ;;  f1              3   28[BANK4 ] float 
  5618 ;;  f2              3   31[BANK4 ] float 
  5619 ;; Auto vars:     Size  Location     Type
  5620 ;;  f3_as_produc    3   39[BANK4 ] unsigned um
  5621 ;;  sign            1   43[BANK4 ] unsigned char 
  5622 ;;  cntr            1   42[BANK4 ] unsigned char 
  5623 ;;  exp             1   38[BANK4 ] unsigned char 
  5624 ;; Return value:  Size  Location     Type
  5625 ;;                  3   28[BANK4 ] float 
  5626 ;; Registers used:
  5627 ;;		wreg, status,2, status,0, pclath, cstack
  5628 ;; Tracked objects:
  5629 ;;		On entry : 0/0
  5630 ;;		On exit  : 0/0
  5631 ;;		Unchanged: 0/0
  5632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5633 ;;      Params:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5634 ;;      Locals:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5635 ;;      Temps:          0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  5636 ;;      Totals:         0       0       0       0       0      16       0       0       0       0       0       0       
      +0       0
  5637 ;;Total ram usage:       16 bytes
  5638 ;; Hardware stack levels used:    1
  5639 ;; Hardware stack levels required when called:    8
  5640 ;; This function calls:
  5641 ;;		___ftpack
  5642 ;; This function is called by:
  5643 ;;		_ReadVoltage
  5644 ;; This function uses a non-reentrant model
  5645 ;;
  5646                           
  5647                           
  5648                           ;psect for function ___ftmul
  5649  12C1                     ___ftmul:	
  5650                           
  5651                           ;incstack = 0
  5652                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  5653  12C1  0024               	movlb	4	; select bank4
  5654  12C2  083C               	movf	___ftmul@f1^(0+512),w
  5655  12C3  00C2               	movwf	??___ftmul^(0+512)
  5656  12C4  083D               	movf	(___ftmul@f1+1)^(0+512),w
  5657  12C5  00C3               	movwf	(??___ftmul^(0+512)+1)
  5658  12C6  083E               	movf	(___ftmul@f1+2)^(0+512),w
  5659  12C7  00C4               	movwf	(??___ftmul^(0+512)+2)
  5660  12C8  1003               	clrc
  5661  12C9  0D43               	rlf	(??___ftmul^(0+512)+1),w
  5662  12CA  0D44               	rlf	(??___ftmul^(0+512)+2),w
  5663  12CB  00C5               	movwf	(??___ftmul+3)^(0+512)
  5664  12CC  0845               	movf	(??___ftmul+3)^(0+512),w
  5665  12CD  00C6               	movwf	___ftmul@exp^(0+512)
  5666  12CE  0846               	movf	___ftmul@exp^(0+512),w
  5667  12CF  1D03               	btfss	3,2
  5668  12D0  2AD8               	goto	l6826
  5669  12D1  3000               	movlw	0
  5670  12D2  00BC               	movwf	?___ftmul^(0+512)
  5671  12D3  3000               	movlw	0
  5672  12D4  00BD               	movwf	(?___ftmul+1)^(0+512)
  5673  12D5  3000               	movlw	0
  5674  12D6  00BE               	movwf	(?___ftmul+2)^(0+512)
  5675  12D7  0008               	return
  5676  12D8                     l6826:	
  5677  12D8  083F               	movf	___ftmul@f2^(0+512),w
  5678  12D9  00C2               	movwf	??___ftmul^(0+512)
  5679  12DA  0840               	movf	(___ftmul@f2+1)^(0+512),w
  5680  12DB  00C3               	movwf	(??___ftmul^(0+512)+1)
  5681  12DC  0841               	movf	(___ftmul@f2+2)^(0+512),w
  5682  12DD  00C4               	movwf	(??___ftmul^(0+512)+2)
  5683  12DE  1003               	clrc
  5684  12DF  0D43               	rlf	(??___ftmul^(0+512)+1),w
  5685  12E0  0D44               	rlf	(??___ftmul^(0+512)+2),w
  5686  12E1  00C5               	movwf	(??___ftmul+3)^(0+512)
  5687  12E2  0845               	movf	(??___ftmul+3)^(0+512),w
  5688  12E3  00CB               	movwf	___ftmul@sign^(0+512)
  5689  12E4  084B               	movf	___ftmul@sign^(0+512),w
  5690  12E5  1D03               	btfss	3,2
  5691  12E6  2AEE               	goto	l6832
  5692  12E7  3000               	movlw	0
  5693  12E8  00BC               	movwf	?___ftmul^(0+512)
  5694  12E9  3000               	movlw	0
  5695  12EA  00BD               	movwf	(?___ftmul+1)^(0+512)
  5696  12EB  3000               	movlw	0
  5697  12EC  00BE               	movwf	(?___ftmul+2)^(0+512)
  5698  12ED  0008               	return
  5699  12EE                     l6832:	
  5700  12EE  084B               	movf	___ftmul@sign^(0+512),w
  5701  12EF  3E7B               	addlw	123
  5702  12F0  00C2               	movwf	??___ftmul^(0+512)
  5703  12F1  0842               	movf	??___ftmul^(0+512),w
  5704  12F2  07C6               	addwf	___ftmul@exp^(0+512),f
  5705  12F3  083C               	movf	___ftmul@f1^(0+512),w
  5706  12F4  00C2               	movwf	??___ftmul^(0+512)
  5707  12F5  083D               	movf	(___ftmul@f1+1)^(0+512),w
  5708  12F6  00C3               	movwf	(??___ftmul^(0+512)+1)
  5709  12F7  083E               	movf	(___ftmul@f1+2)^(0+512),w
  5710  12F8  00C4               	movwf	(??___ftmul^(0+512)+2)
  5711  12F9  3010               	movlw	16
  5712  12FA                     u8965:	
  5713  12FA  36C4               	lsrf	(??___ftmul^(0+512)+2),f
  5714  12FB  0CC3               	rrf	(??___ftmul^(0+512)+1),f
  5715  12FC  0CC2               	rrf	??___ftmul^(0+512),f
  5716  12FD  0B89               	decfsz	9,f
  5717  12FE  2AFA               	goto	u8965
  5718  12FF  0842               	movf	??___ftmul^(0+512),w
  5719  1300  00C5               	movwf	(??___ftmul+3)^(0+512)
  5720  1301  0845               	movf	(??___ftmul+3)^(0+512),w
  5721  1302  00CB               	movwf	___ftmul@sign^(0+512)
  5722  1303  083F               	movf	___ftmul@f2^(0+512),w
  5723  1304  00C2               	movwf	??___ftmul^(0+512)
  5724  1305  0840               	movf	(___ftmul@f2+1)^(0+512),w
  5725  1306  00C3               	movwf	(??___ftmul^(0+512)+1)
  5726  1307  0841               	movf	(___ftmul@f2+2)^(0+512),w
  5727  1308  00C4               	movwf	(??___ftmul^(0+512)+2)
  5728  1309  3010               	movlw	16
  5729  130A                     u8975:	
  5730  130A  36C4               	lsrf	(??___ftmul^(0+512)+2),f
  5731  130B  0CC3               	rrf	(??___ftmul^(0+512)+1),f
  5732  130C  0CC2               	rrf	??___ftmul^(0+512),f
  5733  130D  0B89               	decfsz	9,f
  5734  130E  2B0A               	goto	u8975
  5735  130F  0842               	movf	??___ftmul^(0+512),w
  5736  1310  00C5               	movwf	(??___ftmul+3)^(0+512)
  5737  1311  0845               	movf	(??___ftmul+3)^(0+512),w
  5738  1312  06CB               	xorwf	___ftmul@sign^(0+512),f
  5739  1313  3080               	movlw	128
  5740  1314  00C2               	movwf	??___ftmul^(0+512)
  5741  1315  0842               	movf	??___ftmul^(0+512),w
  5742  1316  05CB               	andwf	___ftmul@sign^(0+512),f
  5743  1317  17BD               	bsf	(___ftmul@f1^(0+512)+1),7
  5744  1318  17C0               	bsf	(___ftmul@f2^(0+512)+1),7
  5745  1319  30FF               	movlw	255
  5746  131A  05BF               	andwf	___ftmul@f2^(0+512),f
  5747  131B  30FF               	movlw	255
  5748  131C  05C0               	andwf	(___ftmul@f2+1)^(0+512),f
  5749  131D  3000               	movlw	0
  5750  131E  05C1               	andwf	(___ftmul@f2+2)^(0+512),f
  5751  131F  3000               	movlw	0
  5752  1320  00C7               	movwf	___ftmul@f3_as_product^(0+512)
  5753  1321  3000               	movlw	0
  5754  1322  00C8               	movwf	(___ftmul@f3_as_product+1)^(0+512)
  5755  1323  3000               	movlw	0
  5756  1324  00C9               	movwf	(___ftmul@f3_as_product+2)^(0+512)
  5757  1325  3007               	movlw	7
  5758  1326  00C2               	movwf	??___ftmul^(0+512)
  5759  1327  0842               	movf	??___ftmul^(0+512),w
  5760  1328  00CA               	movwf	___ftmul@cntr^(0+512)
  5761  1329                     l6844:	
  5762  1329  1C3C               	btfss	___ftmul@f1^(0+512),0
  5763  132A  2B31               	goto	l6848
  5764  132B  083F               	movf	___ftmul@f2^(0+512),w
  5765  132C  07C7               	addwf	___ftmul@f3_as_product^(0+512),f
  5766  132D  0840               	movf	(___ftmul@f2+1)^(0+512),w
  5767  132E  3DC8               	addwfc	(___ftmul@f3_as_product+1)^(0+512),f
  5768  132F  0841               	movf	(___ftmul@f2+2)^(0+512),w
  5769  1330  3DC9               	addwfc	(___ftmul@f3_as_product+2)^(0+512),f
  5770  1331                     l6848:	
  5771  1331  3001               	movlw	1
  5772  1332                     u8995:	
  5773  1332  36BE               	lsrf	(___ftmul@f1+2)^(0+512),f
  5774  1333  0CBD               	rrf	(___ftmul@f1+1)^(0+512),f
  5775  1334  0CBC               	rrf	___ftmul@f1^(0+512),f
  5776  1335  0B89               	decfsz	9,f
  5777  1336  2B32               	goto	u8995
  5778  1337  3001               	movlw	1
  5779  1338                     u9005:	
  5780  1338  35BF               	lslf	___ftmul@f2^(0+512),f
  5781  1339  0DC0               	rlf	(___ftmul@f2+1)^(0+512),f
  5782  133A  0DC1               	rlf	(___ftmul@f2+2)^(0+512),f
  5783  133B  0B89               	decfsz	9,f
  5784  133C  2B38               	goto	u9005
  5785  133D  3001               	movlw	1
  5786  133E  02CA               	subwf	___ftmul@cntr^(0+512),f
  5787  133F  1D03               	btfss	3,2
  5788  1340  2B29               	goto	l6844
  5789  1341  3009               	movlw	9
  5790  1342  00C2               	movwf	??___ftmul^(0+512)
  5791  1343  0842               	movf	??___ftmul^(0+512),w
  5792  1344  00CA               	movwf	___ftmul@cntr^(0+512)
  5793  1345                     l6856:	
  5794  1345  1C3C               	btfss	___ftmul@f1^(0+512),0
  5795  1346  2B4D               	goto	l6860
  5796  1347  083F               	movf	___ftmul@f2^(0+512),w
  5797  1348  07C7               	addwf	___ftmul@f3_as_product^(0+512),f
  5798  1349  0840               	movf	(___ftmul@f2+1)^(0+512),w
  5799  134A  3DC8               	addwfc	(___ftmul@f3_as_product+1)^(0+512),f
  5800  134B  0841               	movf	(___ftmul@f2+2)^(0+512),w
  5801  134C  3DC9               	addwfc	(___ftmul@f3_as_product+2)^(0+512),f
  5802  134D                     l6860:	
  5803  134D  3001               	movlw	1
  5804  134E                     u9035:	
  5805  134E  36BE               	lsrf	(___ftmul@f1+2)^(0+512),f
  5806  134F  0CBD               	rrf	(___ftmul@f1+1)^(0+512),f
  5807  1350  0CBC               	rrf	___ftmul@f1^(0+512),f
  5808  1351  0B89               	decfsz	9,f
  5809  1352  2B4E               	goto	u9035
  5810  1353  3001               	movlw	1
  5811  1354                     u9045:	
  5812  1354  36C9               	lsrf	(___ftmul@f3_as_product+2)^(0+512),f
  5813  1355  0CC8               	rrf	(___ftmul@f3_as_product+1)^(0+512),f
  5814  1356  0CC7               	rrf	___ftmul@f3_as_product^(0+512),f
  5815  1357  0B89               	decfsz	9,f
  5816  1358  2B54               	goto	u9045
  5817  1359  3001               	movlw	1
  5818  135A  02CA               	subwf	___ftmul@cntr^(0+512),f
  5819  135B  1D03               	btfss	3,2
  5820  135C  2B45               	goto	l6856
  5821  135D  0847               	movf	___ftmul@f3_as_product^(0+512),w
  5822  135E  00A0               	movwf	___ftpack@arg^(0+512)
  5823  135F  0848               	movf	(___ftmul@f3_as_product+1)^(0+512),w
  5824  1360  00A1               	movwf	(___ftpack@arg+1)^(0+512)
  5825  1361  0849               	movf	(___ftmul@f3_as_product+2)^(0+512),w
  5826  1362  00A2               	movwf	(___ftpack@arg+2)^(0+512)
  5827  1363  0846               	movf	___ftmul@exp^(0+512),w
  5828  1364  00C2               	movwf	??___ftmul^(0+512)
  5829  1365  0842               	movf	??___ftmul^(0+512),w
  5830  1366  00A3               	movwf	___ftpack@exp^(0+512)
  5831  1367  084B               	movf	___ftmul@sign^(0+512),w
  5832  1368  00C3               	movwf	(??___ftmul+1)^(0+512)
  5833  1369  0843               	movf	(??___ftmul+1)^(0+512),w
  5834  136A  00A4               	movwf	___ftpack@sign^(0+512)
  5835  136B  3191  214D         	fcall	___ftpack
  5836  136D  0024               	movlb	4	; select bank4
  5837  136E  0820               	movf	?___ftpack^(0+512),w
  5838  136F  00BC               	movwf	?___ftmul^(0+512)
  5839  1370  0821               	movf	(?___ftpack+1)^(0+512),w
  5840  1371  00BD               	movwf	(?___ftmul+1)^(0+512)
  5841  1372  0822               	movf	(?___ftpack+2)^(0+512),w
  5842  1373  00BE               	movwf	(?___ftmul+2)^(0+512)
  5843  1374  0008               	return
  5844  1375                     __end_of___ftmul:	
  5845                           
  5846                           	psect	text5
  5847  1218                     __ptext5:	
  5848 ;; *************** function ___ftdiv *****************
  5849 ;; Defined at:
  5850 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  5851 ;; Parameters:    Size  Location     Type
  5852 ;;  f2              3   12[BANK4 ] float 
  5853 ;;  f1              3   15[BANK4 ] float 
  5854 ;; Auto vars:     Size  Location     Type
  5855 ;;  f3              3   23[BANK4 ] float 
  5856 ;;  sign            1   27[BANK4 ] unsigned char 
  5857 ;;  exp             1   26[BANK4 ] unsigned char 
  5858 ;;  cntr            1   22[BANK4 ] unsigned char 
  5859 ;; Return value:  Size  Location     Type
  5860 ;;                  3   12[BANK4 ] float 
  5861 ;; Registers used:
  5862 ;;		wreg, status,2, status,0, pclath, cstack
  5863 ;; Tracked objects:
  5864 ;;		On entry : 0/0
  5865 ;;		On exit  : 0/0
  5866 ;;		Unchanged: 0/0
  5867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5868 ;;      Params:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5869 ;;      Locals:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5870 ;;      Temps:          0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  5871 ;;      Totals:         0       0       0       0       0      16       0       0       0       0       0       0       
      +0       0
  5872 ;;Total ram usage:       16 bytes
  5873 ;; Hardware stack levels used:    1
  5874 ;; Hardware stack levels required when called:    8
  5875 ;; This function calls:
  5876 ;;		___ftpack
  5877 ;; This function is called by:
  5878 ;;		_ReadVoltage
  5879 ;; This function uses a non-reentrant model
  5880 ;;
  5881                           
  5882                           
  5883                           ;psect for function ___ftdiv
  5884  1218                     ___ftdiv:	
  5885                           
  5886                           ;incstack = 0
  5887                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  5888  1218  0024               	movlb	4	; select bank4
  5889  1219  082F               	movf	___ftdiv@f1^(0+512),w
  5890  121A  00B2               	movwf	??___ftdiv^(0+512)
  5891  121B  0830               	movf	(___ftdiv@f1+1)^(0+512),w
  5892  121C  00B3               	movwf	(??___ftdiv^(0+512)+1)
  5893  121D  0831               	movf	(___ftdiv@f1+2)^(0+512),w
  5894  121E  00B4               	movwf	(??___ftdiv^(0+512)+2)
  5895  121F  1003               	clrc
  5896  1220  0D33               	rlf	(??___ftdiv^(0+512)+1),w
  5897  1221  0D34               	rlf	(??___ftdiv^(0+512)+2),w
  5898  1222  00B5               	movwf	(??___ftdiv+3)^(0+512)
  5899  1223  0835               	movf	(??___ftdiv+3)^(0+512),w
  5900  1224  00BA               	movwf	___ftdiv@exp^(0+512)
  5901  1225  083A               	movf	___ftdiv@exp^(0+512),w
  5902  1226  1D03               	btfss	3,2
  5903  1227  2A2F               	goto	l6784
  5904  1228  3000               	movlw	0
  5905  1229  00AC               	movwf	?___ftdiv^(0+512)
  5906  122A  3000               	movlw	0
  5907  122B  00AD               	movwf	(?___ftdiv+1)^(0+512)
  5908  122C  3000               	movlw	0
  5909  122D  00AE               	movwf	(?___ftdiv+2)^(0+512)
  5910  122E  0008               	return
  5911  122F                     l6784:	
  5912  122F  082C               	movf	___ftdiv@f2^(0+512),w
  5913  1230  00B2               	movwf	??___ftdiv^(0+512)
  5914  1231  082D               	movf	(___ftdiv@f2+1)^(0+512),w
  5915  1232  00B3               	movwf	(??___ftdiv^(0+512)+1)
  5916  1233  082E               	movf	(___ftdiv@f2+2)^(0+512),w
  5917  1234  00B4               	movwf	(??___ftdiv^(0+512)+2)
  5918  1235  1003               	clrc
  5919  1236  0D33               	rlf	(??___ftdiv^(0+512)+1),w
  5920  1237  0D34               	rlf	(??___ftdiv^(0+512)+2),w
  5921  1238  00B5               	movwf	(??___ftdiv+3)^(0+512)
  5922  1239  0835               	movf	(??___ftdiv+3)^(0+512),w
  5923  123A  00BB               	movwf	___ftdiv@sign^(0+512)
  5924  123B  083B               	movf	___ftdiv@sign^(0+512),w
  5925  123C  1D03               	btfss	3,2
  5926  123D  2A45               	goto	l6790
  5927  123E  3000               	movlw	0
  5928  123F  00AC               	movwf	?___ftdiv^(0+512)
  5929  1240  3000               	movlw	0
  5930  1241  00AD               	movwf	(?___ftdiv+1)^(0+512)
  5931  1242  3000               	movlw	0
  5932  1243  00AE               	movwf	(?___ftdiv+2)^(0+512)
  5933  1244  0008               	return
  5934  1245                     l6790:	
  5935  1245  3000               	movlw	0
  5936  1246  00B7               	movwf	___ftdiv@f3^(0+512)
  5937  1247  3000               	movlw	0
  5938  1248  00B8               	movwf	(___ftdiv@f3+1)^(0+512)
  5939  1249  3000               	movlw	0
  5940  124A  00B9               	movwf	(___ftdiv@f3+2)^(0+512)
  5941  124B  3089               	movlw	137
  5942  124C  073B               	addwf	___ftdiv@sign^(0+512),w
  5943  124D  00B2               	movwf	??___ftdiv^(0+512)
  5944  124E  0832               	movf	??___ftdiv^(0+512),w
  5945  124F  02BA               	subwf	___ftdiv@exp^(0+512),f
  5946  1250  082F               	movf	___ftdiv@f1^(0+512),w
  5947  1251  00B2               	movwf	??___ftdiv^(0+512)
  5948  1252  0830               	movf	(___ftdiv@f1+1)^(0+512),w
  5949  1253  00B3               	movwf	(??___ftdiv^(0+512)+1)
  5950  1254  0831               	movf	(___ftdiv@f1+2)^(0+512),w
  5951  1255  00B4               	movwf	(??___ftdiv^(0+512)+2)
  5952  1256  3010               	movlw	16
  5953  1257                     u8885:	
  5954  1257  36B4               	lsrf	(??___ftdiv^(0+512)+2),f
  5955  1258  0CB3               	rrf	(??___ftdiv^(0+512)+1),f
  5956  1259  0CB2               	rrf	??___ftdiv^(0+512),f
  5957  125A  0B89               	decfsz	9,f
  5958  125B  2A57               	goto	u8885
  5959  125C  0832               	movf	??___ftdiv^(0+512),w
  5960  125D  00B5               	movwf	(??___ftdiv+3)^(0+512)
  5961  125E  0835               	movf	(??___ftdiv+3)^(0+512),w
  5962  125F  00BB               	movwf	___ftdiv@sign^(0+512)
  5963  1260  082C               	movf	___ftdiv@f2^(0+512),w
  5964  1261  00B2               	movwf	??___ftdiv^(0+512)
  5965  1262  082D               	movf	(___ftdiv@f2+1)^(0+512),w
  5966  1263  00B3               	movwf	(??___ftdiv^(0+512)+1)
  5967  1264  082E               	movf	(___ftdiv@f2+2)^(0+512),w
  5968  1265  00B4               	movwf	(??___ftdiv^(0+512)+2)
  5969  1266  3010               	movlw	16
  5970  1267                     u8895:	
  5971  1267  36B4               	lsrf	(??___ftdiv^(0+512)+2),f
  5972  1268  0CB3               	rrf	(??___ftdiv^(0+512)+1),f
  5973  1269  0CB2               	rrf	??___ftdiv^(0+512),f
  5974  126A  0B89               	decfsz	9,f
  5975  126B  2A67               	goto	u8895
  5976  126C  0832               	movf	??___ftdiv^(0+512),w
  5977  126D  00B5               	movwf	(??___ftdiv+3)^(0+512)
  5978  126E  0835               	movf	(??___ftdiv+3)^(0+512),w
  5979  126F  06BB               	xorwf	___ftdiv@sign^(0+512),f
  5980  1270  3080               	movlw	128
  5981  1271  00B2               	movwf	??___ftdiv^(0+512)
  5982  1272  0832               	movf	??___ftdiv^(0+512),w
  5983  1273  05BB               	andwf	___ftdiv@sign^(0+512),f
  5984  1274  17B0               	bsf	(___ftdiv@f1^(0+512)+1),7
  5985  1275  30FF               	movlw	255
  5986  1276  05AF               	andwf	___ftdiv@f1^(0+512),f
  5987  1277  30FF               	movlw	255
  5988  1278  05B0               	andwf	(___ftdiv@f1+1)^(0+512),f
  5989  1279  3000               	movlw	0
  5990  127A  05B1               	andwf	(___ftdiv@f1+2)^(0+512),f
  5991  127B  17AD               	bsf	(___ftdiv@f2^(0+512)+1),7
  5992  127C  30FF               	movlw	255
  5993  127D  05AC               	andwf	___ftdiv@f2^(0+512),f
  5994  127E  30FF               	movlw	255
  5995  127F  05AD               	andwf	(___ftdiv@f2+1)^(0+512),f
  5996  1280  3000               	movlw	0
  5997  1281  05AE               	andwf	(___ftdiv@f2+2)^(0+512),f
  5998  1282  3018               	movlw	24
  5999  1283  00B2               	movwf	??___ftdiv^(0+512)
  6000  1284  0832               	movf	??___ftdiv^(0+512),w
  6001  1285  00B6               	movwf	___ftdiv@cntr^(0+512)
  6002  1286                     l6804:	
  6003  1286  3001               	movlw	1
  6004  1287                     u8905:	
  6005  1287  35B7               	lslf	___ftdiv@f3^(0+512),f
  6006  1288  0DB8               	rlf	(___ftdiv@f3+1)^(0+512),f
  6007  1289  0DB9               	rlf	(___ftdiv@f3+2)^(0+512),f
  6008  128A  0B89               	decfsz	9,f
  6009  128B  2A87               	goto	u8905
  6010  128C  082E               	movf	(___ftdiv@f2+2)^(0+512),w
  6011  128D  0231               	subwf	(___ftdiv@f1+2)^(0+512),w
  6012  128E  1D03               	skipz
  6013  128F  2A96               	goto	u8915
  6014  1290  082D               	movf	(___ftdiv@f2+1)^(0+512),w
  6015  1291  0230               	subwf	(___ftdiv@f1+1)^(0+512),w
  6016  1292  1D03               	skipz
  6017  1293  2A96               	goto	u8915
  6018  1294  082C               	movf	___ftdiv@f2^(0+512),w
  6019  1295  022F               	subwf	___ftdiv@f1^(0+512),w
  6020  1296                     u8915:	
  6021  1296  1C03               	skipc
  6022  1297  2A9F               	goto	l6812
  6023  1298  082C               	movf	___ftdiv@f2^(0+512),w
  6024  1299  02AF               	subwf	___ftdiv@f1^(0+512),f
  6025  129A  082D               	movf	(___ftdiv@f2+1)^(0+512),w
  6026  129B  3BB0               	subwfb	(___ftdiv@f1+1)^(0+512),f
  6027  129C  082E               	movf	(___ftdiv@f2+2)^(0+512),w
  6028  129D  3BB1               	subwfb	(___ftdiv@f1+2)^(0+512),f
  6029  129E  1437               	bsf	___ftdiv@f3^(0+512),0
  6030  129F                     l6812:	
  6031  129F  3001               	movlw	1
  6032  12A0                     u8925:	
  6033  12A0  35AF               	lslf	___ftdiv@f1^(0+512),f
  6034  12A1  0DB0               	rlf	(___ftdiv@f1+1)^(0+512),f
  6035  12A2  0DB1               	rlf	(___ftdiv@f1+2)^(0+512),f
  6036  12A3  0B89               	decfsz	9,f
  6037  12A4  2AA0               	goto	u8925
  6038  12A5  3001               	movlw	1
  6039  12A6  02B6               	subwf	___ftdiv@cntr^(0+512),f
  6040  12A7  1D03               	btfss	3,2
  6041  12A8  2A86               	goto	l6804
  6042  12A9  0837               	movf	___ftdiv@f3^(0+512),w
  6043  12AA  00A0               	movwf	___ftpack@arg^(0+512)
  6044  12AB  0838               	movf	(___ftdiv@f3+1)^(0+512),w
  6045  12AC  00A1               	movwf	(___ftpack@arg+1)^(0+512)
  6046  12AD  0839               	movf	(___ftdiv@f3+2)^(0+512),w
  6047  12AE  00A2               	movwf	(___ftpack@arg+2)^(0+512)
  6048  12AF  083A               	movf	___ftdiv@exp^(0+512),w
  6049  12B0  00B2               	movwf	??___ftdiv^(0+512)
  6050  12B1  0832               	movf	??___ftdiv^(0+512),w
  6051  12B2  00A3               	movwf	___ftpack@exp^(0+512)
  6052  12B3  083B               	movf	___ftdiv@sign^(0+512),w
  6053  12B4  00B3               	movwf	(??___ftdiv+1)^(0+512)
  6054  12B5  0833               	movf	(??___ftdiv+1)^(0+512),w
  6055  12B6  00A4               	movwf	___ftpack@sign^(0+512)
  6056  12B7  3191  214D         	fcall	___ftpack
  6057  12B9  0024               	movlb	4	; select bank4
  6058  12BA  0820               	movf	?___ftpack^(0+512),w
  6059  12BB  00AC               	movwf	?___ftdiv^(0+512)
  6060  12BC  0821               	movf	(?___ftpack+1)^(0+512),w
  6061  12BD  00AD               	movwf	(?___ftdiv+1)^(0+512)
  6062  12BE  0822               	movf	(?___ftpack+2)^(0+512),w
  6063  12BF  00AE               	movwf	(?___ftdiv+2)^(0+512)
  6064  12C0  0008               	return
  6065  12C1                     __end_of___ftdiv:	
  6066                           
  6067                           	psect	text6
  6068  114D                     __ptext6:	
  6069 ;; *************** function ___ftpack *****************
  6070 ;; Defined at:
  6071 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  6072 ;; Parameters:    Size  Location     Type
  6073 ;;  arg             3    0[BANK4 ] unsigned um
  6074 ;;  exp             1    3[BANK4 ] unsigned char 
  6075 ;;  sign            1    4[BANK4 ] unsigned char 
  6076 ;; Auto vars:     Size  Location     Type
  6077 ;;		None
  6078 ;; Return value:  Size  Location     Type
  6079 ;;                  3    0[BANK4 ] float 
  6080 ;; Registers used:
  6081 ;;		wreg, status,2, status,0
  6082 ;; Tracked objects:
  6083 ;;		On entry : 0/0
  6084 ;;		On exit  : 0/0
  6085 ;;		Unchanged: 0/0
  6086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6087 ;;      Params:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  6088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6089 ;;      Temps:          0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  6090 ;;      Totals:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  6091 ;;Total ram usage:        8 bytes
  6092 ;; Hardware stack levels used:    1
  6093 ;; Hardware stack levels required when called:    7
  6094 ;; This function calls:
  6095 ;;		Nothing
  6096 ;; This function is called by:
  6097 ;;		___ftdiv
  6098 ;;		___ftmul
  6099 ;;		___lwtoft
  6100 ;; This function uses a non-reentrant model
  6101 ;;
  6102                           
  6103                           
  6104                           ;psect for function ___ftpack
  6105  114D                     ___ftpack:	
  6106                           
  6107                           ;incstack = 0
  6108                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6109  114D  0024               	movlb	4	; select bank4
  6110  114E  0823               	movf	___ftpack@exp^(0+512),w
  6111  114F  1903               	btfsc	3,2
  6112  1150  2956               	goto	l6572
  6113  1151  0822               	movf	(___ftpack@arg+2)^(0+512),w
  6114  1152  0421               	iorwf	(___ftpack@arg+1)^(0+512),w
  6115  1153  0420               	iorwf	___ftpack@arg^(0+512),w
  6116  1154  1D03               	skipz
  6117  1155  2967               	goto	l6578
  6118  1156                     l6572:	
  6119  1156  3000               	movlw	0
  6120  1157  00A0               	movwf	?___ftpack^(0+512)
  6121  1158  3000               	movlw	0
  6122  1159  00A1               	movwf	(?___ftpack+1)^(0+512)
  6123  115A  3000               	movlw	0
  6124  115B  00A2               	movwf	(?___ftpack+2)^(0+512)
  6125  115C  0008               	return
  6126  115D                     l6576:	
  6127  115D  3001               	movlw	1
  6128  115E  00A5               	movwf	??___ftpack^(0+512)
  6129  115F  0825               	movf	??___ftpack^(0+512),w
  6130  1160  07A3               	addwf	___ftpack@exp^(0+512),f
  6131  1161  3001               	movlw	1
  6132  1162                     u8505:	
  6133  1162  36A2               	lsrf	(___ftpack@arg+2)^(0+512),f
  6134  1163  0CA1               	rrf	(___ftpack@arg+1)^(0+512),f
  6135  1164  0CA0               	rrf	___ftpack@arg^(0+512),f
  6136  1165  0B89               	decfsz	9,f
  6137  1166  2962               	goto	u8505
  6138  1167                     l6578:	
  6139  1167  30FE               	movlw	254
  6140  1168  0522               	andwf	(___ftpack@arg+2)^(0+512),w
  6141  1169  1903               	btfsc	3,2
  6142  116A  2980               	goto	l1265
  6143  116B  295D               	goto	l6576
  6144  116C                     l6580:	
  6145  116C  3001               	movlw	1
  6146  116D  00A5               	movwf	??___ftpack^(0+512)
  6147  116E  0825               	movf	??___ftpack^(0+512),w
  6148  116F  07A3               	addwf	___ftpack@exp^(0+512),f
  6149  1170  3001               	movlw	1
  6150  1171  07A0               	addwf	___ftpack@arg^(0+512),f
  6151  1172  3000               	movlw	0
  6152  1173  1803               	skipnc
  6153  1174  3001               	movlw	1
  6154  1175  07A1               	addwf	(___ftpack@arg+1)^(0+512),f
  6155  1176  3000               	movlw	0
  6156  1177  1803               	skipnc
  6157  1178  3001               	movlw	1
  6158  1179  07A2               	addwf	(___ftpack@arg+2)^(0+512),f
  6159  117A  3001               	movlw	1
  6160  117B                     u8525:	
  6161  117B  36A2               	lsrf	(___ftpack@arg+2)^(0+512),f
  6162  117C  0CA1               	rrf	(___ftpack@arg+1)^(0+512),f
  6163  117D  0CA0               	rrf	___ftpack@arg^(0+512),f
  6164  117E  0B89               	decfsz	9,f
  6165  117F  297B               	goto	u8525
  6166  1180                     l1265:	
  6167  1180  30FF               	movlw	255
  6168  1181  0522               	andwf	(___ftpack@arg+2)^(0+512),w
  6169  1182  1903               	btfsc	3,2
  6170  1183  2991               	goto	l6588
  6171  1184  296C               	goto	l6580
  6172  1185                     l6590:	
  6173  1185  3002               	movlw	2
  6174  1186  0223               	subwf	___ftpack@exp^(0+512),w
  6175  1187  1C03               	btfss	3,0
  6176  1188  2993               	goto	l1272
  6177  1189  3001               	movlw	1
  6178  118A  02A3               	subwf	___ftpack@exp^(0+512),f
  6179  118B  3001               	movlw	1
  6180  118C                     u8545:	
  6181  118C  35A0               	lslf	___ftpack@arg^(0+512),f
  6182  118D  0DA1               	rlf	(___ftpack@arg+1)^(0+512),f
  6183  118E  0DA2               	rlf	(___ftpack@arg+2)^(0+512),f
  6184  118F  0B89               	decfsz	9,f
  6185  1190  298C               	goto	u8545
  6186  1191                     l6588:	
  6187  1191  1FA1               	btfss	(___ftpack@arg+1)^(0+512),7
  6188  1192  2985               	goto	l6590
  6189  1193                     l1272:	
  6190  1193  1823               	btfsc	___ftpack@exp^(0+512),0
  6191  1194  299B               	goto	l1273
  6192  1195  30FF               	movlw	255
  6193  1196  05A0               	andwf	___ftpack@arg^(0+512),f
  6194  1197  307F               	movlw	127
  6195  1198  05A1               	andwf	(___ftpack@arg+1)^(0+512),f
  6196  1199  30FF               	movlw	255
  6197  119A  05A2               	andwf	(___ftpack@arg+2)^(0+512),f
  6198  119B                     l1273:	
  6199  119B  1003               	clrc
  6200  119C  0CA3               	rrf	___ftpack@exp^(0+512),f
  6201  119D  0823               	movf	___ftpack@exp^(0+512),w
  6202  119E  00A5               	movwf	??___ftpack^(0+512)
  6203  119F  01A6               	clrf	(??___ftpack^(0+512)+1)
  6204  11A0  01A7               	clrf	(??___ftpack^(0+512)+2)
  6205  11A1  3010               	movlw	16
  6206  11A2                     u8585:	
  6207  11A2  35A5               	lslf	??___ftpack^(0+512),f
  6208  11A3  0DA6               	rlf	(??___ftpack^(0+512)+1),f
  6209  11A4  0DA7               	rlf	(??___ftpack^(0+512)+2),f
  6210  11A5  0B89               	decfsz	9,f
  6211  11A6  29A2               	goto	u8585
  6212  11A7  0825               	movf	??___ftpack^(0+512),w
  6213  11A8  04A0               	iorwf	___ftpack@arg^(0+512),f
  6214  11A9  0826               	movf	(??___ftpack+1)^(0+512),w
  6215  11AA  04A1               	iorwf	(___ftpack@arg+1)^(0+512),f
  6216  11AB  0827               	movf	(??___ftpack+2)^(0+512),w
  6217  11AC  04A2               	iorwf	(___ftpack@arg+2)^(0+512),f
  6218  11AD  0824               	movf	___ftpack@sign^(0+512),w
  6219  11AE  1903               	btfsc	3,2
  6220  11AF  0008               	return
  6221  11B0  17A2               	bsf	(___ftpack@arg^(0+512)+2),7
  6222  11B1  0008               	return
  6223  11B2                     __end_of___ftpack:	
  6224                           
  6225                           	psect	text7
  6226  1CDB                     __ptext7:	
  6227 ;; *************** function _InternalADC_Read *****************
  6228 ;; Defined at:
  6229 ;;		line 97 in file "ADC.c"
  6230 ;; Parameters:    Size  Location     Type
  6231 ;;  channel         1    wreg     unsigned char 
  6232 ;; Auto vars:     Size  Location     Type
  6233 ;;  channel         1   14[BANK4 ] unsigned char 
  6234 ;; Return value:  Size  Location     Type
  6235 ;;                  2   10[BANK4 ] unsigned int 
  6236 ;; Registers used:
  6237 ;;		wreg, status,2, status,0, pclath, cstack
  6238 ;; Tracked objects:
  6239 ;;		On entry : 0/0
  6240 ;;		On exit  : 0/0
  6241 ;;		Unchanged: 0/0
  6242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6243 ;;      Params:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  6244 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6245 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  6246 ;;      Totals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  6247 ;;Total ram usage:        5 bytes
  6248 ;; Hardware stack levels used:    1
  6249 ;; Hardware stack levels required when called:    8
  6250 ;; This function calls:
  6251 ;;		_delayUS
  6252 ;; This function is called by:
  6253 ;;		_ReadVoltage
  6254 ;; This function uses a non-reentrant model
  6255 ;;
  6256                           
  6257                           
  6258                           ;psect for function _InternalADC_Read
  6259  1CDB                     _InternalADC_Read:	
  6260                           
  6261                           ;incstack = 0
  6262                           ; Regs used in _InternalADC_Read: [wreg+status,2+status,0+pclath+cstack]
  6263                           ;InternalADC_Read@channel stored from wreg
  6264  1CDB  0024               	movlb	4	; select bank4
  6265  1CDC  00AE               	movwf	InternalADC_Read@channel^(0+512)
  6266                           
  6267                           ;ADC.c: 99: ADCON0 =0;
  6268  1CDD  0021               	movlb	1	; select bank1
  6269  1CDE  019D               	clrf	29	;volatile
  6270                           
  6271                           ;ADC.c: 100: ADCON1 =0;
  6272  1CDF  019E               	clrf	30	;volatile
  6273                           
  6274                           ;ADC.c: 101: ADCON1 |= 0b01010000;
  6275  1CE0  3050               	movlw	80
  6276  1CE1  0024               	movlb	4	; select bank4
  6277  1CE2  00AC               	movwf	??_InternalADC_Read^(0+512)
  6278  1CE3  082C               	movf	??_InternalADC_Read^(0+512),w
  6279  1CE4  0021               	movlb	1	; select bank1
  6280  1CE5  049E               	iorwf	30,f	;volatile
  6281                           
  6282                           ;ADC.c: 102: FVRCON |= 0b10000000;
  6283  1CE6  0022               	movlb	2	; select bank2
  6284  1CE7  1797               	bsf	23,7	;volatile
  6285                           
  6286                           ;ADC.c: 103: FVRCON |= 0b00000011;
  6287  1CE8  3003               	movlw	3
  6288  1CE9  0024               	movlb	4	; select bank4
  6289  1CEA  00AC               	movwf	??_InternalADC_Read^(0+512)
  6290  1CEB  082C               	movf	??_InternalADC_Read^(0+512),w
  6291  1CEC  0022               	movlb	2	; select bank2
  6292  1CED  0497               	iorwf	23,f	;volatile
  6293  1CEE                     l1033:	
  6294                           ;ADC.c: 104: while(!(FVRCON & 0b01000000));
  6295                           
  6296  1CEE  1F17               	btfss	23,6	;volatile
  6297  1CEF  2CEE               	goto	l1033
  6298                           
  6299                           ;ADC.c: 105: ADCON0 |= (channel << 2);
  6300  1CF0  0024               	movlb	4	; select bank4
  6301  1CF1  082E               	movf	InternalADC_Read@channel^(0+512),w
  6302  1CF2  00AC               	movwf	??_InternalADC_Read^(0+512)
  6303  1CF3  3001               	movlw	1
  6304  1CF4                     u8845:	
  6305  1CF4  35AC               	lslf	??_InternalADC_Read^(0+512),f
  6306  1CF5  3EFF               	addlw	-1
  6307  1CF6  1D03               	skipz
  6308  1CF7  2CF4               	goto	u8845
  6309  1CF8  352C               	lslf	??_InternalADC_Read^(0+512),w
  6310  1CF9  00AD               	movwf	(??_InternalADC_Read+1)^(0+512)
  6311  1CFA  082D               	movf	(??_InternalADC_Read+1)^(0+512),w
  6312  1CFB  0021               	movlb	1	; select bank1
  6313  1CFC  049D               	iorwf	29,f	;volatile
  6314                           
  6315                           ;ADC.c: 106: ADCON1 |= 0b10000011;
  6316  1CFD  3083               	movlw	131
  6317  1CFE  0024               	movlb	4	; select bank4
  6318  1CFF  00AC               	movwf	??_InternalADC_Read^(0+512)
  6319  1D00  082C               	movf	??_InternalADC_Read^(0+512),w
  6320  1D01  0021               	movlb	1	; select bank1
  6321  1D02  049E               	iorwf	30,f	;volatile
  6322                           
  6323                           ;ADC.c: 107: ADCON0 |= 0b00000001;
  6324  1D03  141D               	bsf	29,0	;volatile
  6325                           
  6326                           ;ADC.c: 108: (PIE1bits.ADIE=0);
  6327  1D04  1311               	bcf	17,6	;volatile
  6328                           
  6329                           ;ADC.c: 109: delayUS(5);
  6330  1D05  3000               	movlw	0
  6331  1D06  0024               	movlb	4	; select bank4
  6332  1D07  00A3               	movwf	(delayUS@US+3)^(0+512)
  6333  1D08  3000               	movlw	0
  6334  1D09  00A2               	movwf	(delayUS@US+2)^(0+512)
  6335  1D0A  3000               	movlw	0
  6336  1D0B  00A1               	movwf	(delayUS@US+1)^(0+512)
  6337  1D0C  3005               	movlw	5
  6338  1D0D  00A0               	movwf	delayUS@US^(0+512)
  6339  1D0E  319B  23E8  319C   	fcall	_delayUS
  6340                           
  6341                           ;ADC.c: 110: ADCON0 |= 0b00000010;
  6342  1D11  0021               	movlb	1	; select bank1
  6343  1D12  149D               	bsf	29,1	;volatile
  6344  1D13                     l1036:	
  6345                           ;ADC.c: 111: while(ADCON0 & 0b00000010);
  6346                           
  6347  1D13  189D               	btfsc	29,1	;volatile
  6348  1D14  2D13               	goto	l1036
  6349                           
  6350                           ;ADC.c: 112: return ((ADRESH << 8) + ADRESL);
  6351  1D15  081C               	movf	28,w	;volatile
  6352  1D16  0024               	movlb	4	; select bank4
  6353  1D17  00AB               	movwf	(?_InternalADC_Read+1)^(0+512)
  6354  1D18  0021               	movlb	1	; select bank1
  6355  1D19  081B               	movf	27,w	;volatile
  6356  1D1A  0024               	movlb	4	; select bank4
  6357  1D1B  00AA               	movwf	?_InternalADC_Read^(0+512)
  6358  1D1C  0008               	return
  6359  1D1D                     __end_of_InternalADC_Read:	
  6360                           
  6361                           	psect	text8
  6362  1863                     __ptext8:	
  6363 ;; *************** function _DisableInternalADC *****************
  6364 ;; Defined at:
  6365 ;;		line 120 in file "ADC.c"
  6366 ;; Parameters:    Size  Location     Type
  6367 ;;		None
  6368 ;; Auto vars:     Size  Location     Type
  6369 ;;		None
  6370 ;; Return value:  Size  Location     Type
  6371 ;;		None               void
  6372 ;; Registers used:
  6373 ;;		wreg, status,2, status,0
  6374 ;; Tracked objects:
  6375 ;;		On entry : 0/0
  6376 ;;		On exit  : 0/0
  6377 ;;		Unchanged: 0/0
  6378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6381 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6382 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6383 ;;Total ram usage:        1 bytes
  6384 ;; Hardware stack levels used:    1
  6385 ;; Hardware stack levels required when called:    7
  6386 ;; This function calls:
  6387 ;;		Nothing
  6388 ;; This function is called by:
  6389 ;;		_ReadVoltage
  6390 ;; This function uses a non-reentrant model
  6391 ;;
  6392                           
  6393                           
  6394                           ;psect for function _DisableInternalADC
  6395  1863                     _DisableInternalADC:	
  6396                           
  6397                           ;ADC.c: 122: ADCON0 &= ~0b00000001;
  6398                           
  6399                           ;incstack = 0
  6400                           ; Regs used in _DisableInternalADC: [wreg+status,2+status,0]
  6401  1863  30FE               	movlw	254
  6402  1864  0024               	movlb	4	; select bank4
  6403  1865  00A0               	movwf	??_DisableInternalADC^(0+512)
  6404  1866  0820               	movf	??_DisableInternalADC^(0+512),w
  6405  1867  0021               	movlb	1	; select bank1
  6406  1868  059D               	andwf	29,f	;volatile
  6407  1869  0008               	return
  6408  186A                     __end_of_DisableInternalADC:	
  6409                           
  6410                           	psect	text9
  6411  18EE                     __ptext9:	
  6412 ;; *************** function _PS_2_INIT *****************
  6413 ;; Defined at:
  6414 ;;		line 106 in file "PS_2.c"
  6415 ;; Parameters:    Size  Location     Type
  6416 ;;		None
  6417 ;; Auto vars:     Size  Location     Type
  6418 ;;		None
  6419 ;; Return value:  Size  Location     Type
  6420 ;;		None               void
  6421 ;; Registers used:
  6422 ;;		wreg, status,2, status,0, pclath, cstack
  6423 ;; Tracked objects:
  6424 ;;		On entry : 0/0
  6425 ;;		On exit  : 0/0
  6426 ;;		Unchanged: 0/0
  6427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6431 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6432 ;;Total ram usage:        0 bytes
  6433 ;; Hardware stack levels used:    1
  6434 ;; Hardware stack levels required when called:   10
  6435 ;; This function calls:
  6436 ;;		_Clock_TRIS
  6437 ;;		_Data_TRIS
  6438 ;;		_Init_PS_2_Send
  6439 ;;		_Timer2Init
  6440 ;; This function is called by:
  6441 ;;		_main
  6442 ;; This function uses a non-reentrant model
  6443 ;;
  6444                           
  6445                           
  6446                           ;psect for function _PS_2_INIT
  6447  18EE                     _PS_2_INIT:	
  6448                           
  6449                           ;PS_2.c: 109: Clock_TRIS(1);
  6450                           
  6451                           ;incstack = 0
  6452                           ; Regs used in _PS_2_INIT: [wreg+status,2+status,0+pclath+cstack]
  6453  18EE  3001               	movlw	1
  6454  18EF  3198  20B0  3198   	fcall	_Clock_TRIS
  6455                           
  6456                           ;PS_2.c: 110: Data_TRIS(1);
  6457  18F2  3001               	movlw	1
  6458  18F3  3190  2000  3198   	fcall	_Data_TRIS
  6459                           
  6460                           ;PS_2.c: 111: Timer2Init(50);
  6461  18F6  3032               	movlw	50
  6462  18F7  319A  2241  3198   	fcall	_Timer2Init
  6463                           
  6464                           ;PS_2.c: 112: Init_PS_2_Send();
  6465  18FA  3186  2688         	fcall	_Init_PS_2_Send
  6466  18FC  0008               	return
  6467  18FD                     __end_of_PS_2_INIT:	
  6468                           
  6469                           	psect	text10
  6470  1A41                     __ptext10:	
  6471 ;; *************** function _Timer2Init *****************
  6472 ;; Defined at:
  6473 ;;		line 41 in file "Timer.c"
  6474 ;; Parameters:    Size  Location     Type
  6475 ;;  time            1    wreg     unsigned char 
  6476 ;; Auto vars:     Size  Location     Type
  6477 ;;  time            1    2[BANK4 ] unsigned char 
  6478 ;;  prescaler       1    4[BANK4 ] unsigned char 
  6479 ;;  postscaler      1    3[BANK4 ] unsigned char 
  6480 ;; Return value:  Size  Location     Type
  6481 ;;		None               void
  6482 ;; Registers used:
  6483 ;;		wreg, status,2, status,0, pclath, cstack
  6484 ;; Tracked objects:
  6485 ;;		On entry : 0/0
  6486 ;;		On exit  : 0/0
  6487 ;;		Unchanged: 0/0
  6488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6490 ;;      Locals:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  6491 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  6492 ;;      Totals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  6493 ;;Total ram usage:        5 bytes
  6494 ;; Hardware stack levels used:    1
  6495 ;; Hardware stack levels required when called:    8
  6496 ;; This function calls:
  6497 ;;		_Timer2ON
  6498 ;; This function is called by:
  6499 ;;		_PS_2_INIT
  6500 ;; This function uses a non-reentrant model
  6501 ;;
  6502                           
  6503                           
  6504                           ;psect for function _Timer2Init
  6505  1A41                     _Timer2Init:	
  6506                           
  6507                           ;incstack = 0
  6508                           ; Regs used in _Timer2Init: [wreg+status,2+status,0+pclath+cstack]
  6509                           ;Timer2Init@time stored from wreg
  6510  1A41  0024               	movlb	4	; select bank4
  6511  1A42  00A2               	movwf	Timer2Init@time^(0+512)
  6512                           
  6513                           ;Timer.c: 43: unsigned char postscaler =0xF;
  6514  1A43  300F               	movlw	15
  6515  1A44  00A0               	movwf	??_Timer2Init^(0+512)
  6516  1A45  0820               	movf	??_Timer2Init^(0+512),w
  6517  1A46  00A3               	movwf	Timer2Init@postscaler^(0+512)
  6518                           
  6519                           ;Timer.c: 44: unsigned char prescaler =3;
  6520  1A47  3003               	movlw	3
  6521  1A48  00A0               	movwf	??_Timer2Init^(0+512)
  6522  1A49  0820               	movf	??_Timer2Init^(0+512),w
  6523  1A4A  00A4               	movwf	Timer2Init@prescaler^(0+512)
  6524                           
  6525                           ;Timer.c: 45: CCP2CONbits.CCP2M = 0b1010;
  6526  1A4B  0025               	movlb	5	; select bank5
  6527  1A4C  081A               	movf	26,w	;volatile
  6528  1A4D  39F0               	andlw	-16
  6529  1A4E  380A               	iorlw	10
  6530  1A4F  009A               	movwf	26	;volatile
  6531                           
  6532                           ;Timer.c: 46: PR2 = time;
  6533  1A50  0024               	movlb	4	; select bank4
  6534  1A51  0822               	movf	Timer2Init@time^(0+512),w
  6535  1A52  0020               	movlb	0	; select bank0
  6536  1A53  009B               	movwf	27	;volatile
  6537                           
  6538                           ;Timer.c: 47: T2CON |= postscaler << 3;
  6539  1A54  0024               	movlb	4	; select bank4
  6540  1A55  0823               	movf	Timer2Init@postscaler^(0+512),w
  6541  1A56  00A0               	movwf	??_Timer2Init^(0+512)
  6542  1A57  3002               	movlw	2
  6543  1A58                     u8745:	
  6544  1A58  35A0               	lslf	??_Timer2Init^(0+512),f
  6545  1A59  3EFF               	addlw	-1
  6546  1A5A  1D03               	skipz
  6547  1A5B  2A58               	goto	u8745
  6548  1A5C  3520               	lslf	??_Timer2Init^(0+512),w
  6549  1A5D  00A1               	movwf	(??_Timer2Init+1)^(0+512)
  6550  1A5E  0821               	movf	(??_Timer2Init+1)^(0+512),w
  6551  1A5F  0020               	movlb	0	; select bank0
  6552  1A60  049C               	iorwf	28,f	;volatile
  6553                           
  6554                           ;Timer.c: 48: T2CON |= prescaler;
  6555  1A61  0024               	movlb	4	; select bank4
  6556  1A62  0824               	movf	Timer2Init@prescaler^(0+512),w
  6557  1A63  00A0               	movwf	??_Timer2Init^(0+512)
  6558  1A64  0820               	movf	??_Timer2Init^(0+512),w
  6559  1A65  0020               	movlb	0	; select bank0
  6560  1A66  049C               	iorwf	28,f	;volatile
  6561                           
  6562                           ;Timer.c: 50: Timer2ON();
  6563  1A67  3198  203A         	fcall	_Timer2ON
  6564                           
  6565                           ;Timer.c: 51: PIE1bits.TMR2IE = 0;
  6566  1A69  0021               	movlb	1	; select bank1
  6567  1A6A  1091               	bcf	17,1	;volatile
  6568  1A6B  0008               	return
  6569  1A6C                     __end_of_Timer2Init:	
  6570                           
  6571                           	psect	text11
  6572  183A                     __ptext11:	
  6573 ;; *************** function _Timer2ON *****************
  6574 ;; Defined at:
  6575 ;;		line 59 in file "Timer.c"
  6576 ;; Parameters:    Size  Location     Type
  6577 ;;		None
  6578 ;; Auto vars:     Size  Location     Type
  6579 ;;		None
  6580 ;; Return value:  Size  Location     Type
  6581 ;;		None               void
  6582 ;; Registers used:
  6583 ;;		None
  6584 ;; Tracked objects:
  6585 ;;		On entry : 0/0
  6586 ;;		On exit  : 0/0
  6587 ;;		Unchanged: 0/0
  6588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6592 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6593 ;;Total ram usage:        0 bytes
  6594 ;; Hardware stack levels used:    1
  6595 ;; Hardware stack levels required when called:    7
  6596 ;; This function calls:
  6597 ;;		Nothing
  6598 ;; This function is called by:
  6599 ;;		_Timer2Init
  6600 ;; This function uses a non-reentrant model
  6601 ;;
  6602                           
  6603                           
  6604                           ;psect for function _Timer2ON
  6605  183A                     _Timer2ON:	
  6606                           
  6607                           ;Timer.c: 61: T2CONbits.TMR2ON = 1;
  6608                           
  6609                           ;incstack = 0
  6610                           ; Regs used in _Timer2ON: []
  6611  183A  0020               	movlb	0	; select bank0
  6612  183B  151C               	bsf	28,2	;volatile
  6613  183C  0008               	return
  6614  183D                     __end_of_Timer2ON:	
  6615                           
  6616                           	psect	text12
  6617  0688                     __ptext12:	
  6618 ;; *************** function _Init_PS_2_Send *****************
  6619 ;; Defined at:
  6620 ;;		line 1021 in file "PS_2.c"
  6621 ;; Parameters:    Size  Location     Type
  6622 ;;		None
  6623 ;; Auto vars:     Size  Location     Type
  6624 ;;		None
  6625 ;; Return value:  Size  Location     Type
  6626 ;;                  1    wreg      unsigned char 
  6627 ;; Registers used:
  6628 ;;		wreg, status,2, status,0, pclath, cstack
  6629 ;; Tracked objects:
  6630 ;;		On entry : 0/0
  6631 ;;		On exit  : 0/0
  6632 ;;		Unchanged: 0/0
  6633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6637 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6638 ;;Total ram usage:        0 bytes
  6639 ;; Hardware stack levels used:    1
  6640 ;; Hardware stack levels required when called:    9
  6641 ;; This function calls:
  6642 ;;		_PS_2_DISABLE_INTERRUPT
  6643 ;;		_Send_PS2
  6644 ;;		_delayUS
  6645 ;; This function is called by:
  6646 ;;		_PS_2_INIT
  6647 ;; This function uses a non-reentrant model
  6648 ;;
  6649                           
  6650                           
  6651                           ;psect for function _Init_PS_2_Send
  6652  0688                     _Init_PS_2_Send:	
  6653                           
  6654                           ;PS_2.c: 1023: PS_2_DISABLE_INTERRUPT(0b00100000);
  6655                           
  6656                           ;incstack = 0
  6657                           ; Regs used in _Init_PS_2_Send: [wreg+status,2+status,0+pclath+cstack]
  6658  0688  3020               	movlw	32
  6659  0689  3199  2169  3186   	fcall	_PS_2_DISABLE_INTERRUPT
  6660                           
  6661                           ;PS_2.c: 1026: if(Send_PS2(0x07))
  6662  068C  3007               	movlw	7
  6663  068D  318E  266C  3186   	fcall	_Send_PS2
  6664  0690  3A00               	xorlw	0
  6665  0691  1D03               	btfss	3,2
  6666  0692  0008               	return
  6667                           
  6668                           ;PS_2.c: 1029: }
  6669                           ;PS_2.c: 1030: delayUS(5000);
  6670                           
  6671                           ;PS_2.c: 1027: {
  6672                           ;PS_2.c: 1028: return 0;
  6673                           ;	Return value of _Init_PS_2_Send is never used
  6674  0693  3000               	movlw	0
  6675  0694  0024               	movlb	4	; select bank4
  6676  0695  00A3               	movwf	(delayUS@US+3)^(0+512)
  6677  0696  3000               	movlw	0
  6678  0697  00A2               	movwf	(delayUS@US+2)^(0+512)
  6679  0698  3013               	movlw	19
  6680  0699  00A1               	movwf	(delayUS@US+1)^(0+512)
  6681  069A  3088               	movlw	136
  6682  069B  00A0               	movwf	delayUS@US^(0+512)
  6683  069C  319B  23E8  3186   	fcall	_delayUS
  6684                           
  6685                           ;PS_2.c: 1033: if(Send_PS2(0xED))
  6686  069F  30ED               	movlw	237
  6687  06A0  318E  266C  3186   	fcall	_Send_PS2
  6688  06A3  3A00               	xorlw	0
  6689  06A4  1D03               	btfss	3,2
  6690  06A5  0008               	return
  6691                           
  6692                           ;PS_2.c: 1036: }
  6693                           ;PS_2.c: 1037: delayUS(5000);
  6694                           
  6695                           ;PS_2.c: 1034: {
  6696                           ;PS_2.c: 1035: return 0;
  6697                           ;	Return value of _Init_PS_2_Send is never used
  6698  06A6  3000               	movlw	0
  6699  06A7  0024               	movlb	4	; select bank4
  6700  06A8  00A3               	movwf	(delayUS@US+3)^(0+512)
  6701  06A9  3000               	movlw	0
  6702  06AA  00A2               	movwf	(delayUS@US+2)^(0+512)
  6703  06AB  3013               	movlw	19
  6704  06AC  00A1               	movwf	(delayUS@US+1)^(0+512)
  6705  06AD  3088               	movlw	136
  6706  06AE  00A0               	movwf	delayUS@US^(0+512)
  6707  06AF  319B  23E8  3186   	fcall	_delayUS
  6708                           
  6709                           ;PS_2.c: 1038: if(Send_PS2(0x00))
  6710  06B2  3000               	movlw	0
  6711  06B3  318E  266C  3186   	fcall	_Send_PS2
  6712  06B6  3A00               	xorlw	0
  6713  06B7  1D03               	btfss	3,2
  6714  06B8  0008               	return
  6715                           
  6716                           ;PS_2.c: 1041: }
  6717                           ;PS_2.c: 1044: if(Send_PS2(0xf4))
  6718                           
  6719                           ;PS_2.c: 1039: {
  6720                           ;PS_2.c: 1040: return 0;
  6721                           ;	Return value of _Init_PS_2_Send is never used
  6722  06B9  30F4               	movlw	244
  6723  06BA  318E  266C  3186   	fcall	_Send_PS2
  6724  06BD  3A00               	xorlw	0
  6725  06BE  1D03               	btfss	3,2
  6726  06BF  0008               	return
  6727                           
  6728                           ;PS_2.c: 1047: }
  6729                           ;PS_2.c: 1050: if(Send_PS2(0xf4))
  6730                           
  6731                           ;PS_2.c: 1045: {
  6732                           ;PS_2.c: 1046: return 0;
  6733                           ;	Return value of _Init_PS_2_Send is never used
  6734  06C0  30F4               	movlw	244
  6735  06C1  318E  266C  3186   	fcall	_Send_PS2
  6736  06C4  3A00               	xorlw	0
  6737  06C5  1D03               	btfss	3,2
  6738  06C6  0008               	return
  6739                           
  6740                           ;PS_2.c: 1053: }
  6741                           ;PS_2.c: 1056: if(Send_PS2(0xf0))
  6742                           
  6743                           ;PS_2.c: 1051: {
  6744                           ;PS_2.c: 1052: return 0;
  6745                           ;	Return value of _Init_PS_2_Send is never used
  6746  06C7  30F0               	movlw	240
  6747  06C8  318E  266C  3186   	fcall	_Send_PS2
  6748  06CB  3A00               	xorlw	0
  6749  06CC  1D03               	btfss	3,2
  6750  06CD  0008               	return
  6751                           
  6752                           ;PS_2.c: 1059: }
  6753                           ;PS_2.c: 1060: delayUS(100);
  6754                           
  6755                           ;PS_2.c: 1057: {
  6756                           ;PS_2.c: 1058: return 0;
  6757                           ;	Return value of _Init_PS_2_Send is never used
  6758  06CE  3000               	movlw	0
  6759  06CF  0024               	movlb	4	; select bank4
  6760  06D0  00A3               	movwf	(delayUS@US+3)^(0+512)
  6761  06D1  3000               	movlw	0
  6762  06D2  00A2               	movwf	(delayUS@US+2)^(0+512)
  6763  06D3  3000               	movlw	0
  6764  06D4  00A1               	movwf	(delayUS@US+1)^(0+512)
  6765  06D5  3064               	movlw	100
  6766  06D6  00A0               	movwf	delayUS@US^(0+512)
  6767  06D7  319B  23E8  3186   	fcall	_delayUS
  6768                           
  6769                           ;PS_2.c: 1061: if(Send_PS2(0x02))
  6770  06DA  3002               	movlw	2
  6771  06DB  318E  266C  3186   	fcall	_Send_PS2
  6772  06DE  3A00               	xorlw	0
  6773  06DF  1D03               	btfss	3,2
  6774  06E0  0008               	return
  6775                           
  6776                           ;PS_2.c: 1064: }
  6777                           ;PS_2.c: 1067: if(Send_PS2(0xf3))
  6778                           
  6779                           ;PS_2.c: 1062: {
  6780                           ;PS_2.c: 1063: return 0;
  6781                           ;	Return value of _Init_PS_2_Send is never used
  6782  06E1  30F3               	movlw	243
  6783  06E2  318E  266C  3186   	fcall	_Send_PS2
  6784  06E5  3A00               	xorlw	0
  6785  06E6  1D03               	btfss	3,2
  6786  06E7  0008               	return
  6787                           
  6788                           ;PS_2.c: 1070: }
  6789                           ;PS_2.c: 1071: delayUS(100);
  6790                           
  6791                           ;PS_2.c: 1068: {
  6792                           ;PS_2.c: 1069: return 0;
  6793                           ;	Return value of _Init_PS_2_Send is never used
  6794  06E8  3000               	movlw	0
  6795  06E9  0024               	movlb	4	; select bank4
  6796  06EA  00A3               	movwf	(delayUS@US+3)^(0+512)
  6797  06EB  3000               	movlw	0
  6798  06EC  00A2               	movwf	(delayUS@US+2)^(0+512)
  6799  06ED  3000               	movlw	0
  6800  06EE  00A1               	movwf	(delayUS@US+1)^(0+512)
  6801  06EF  3064               	movlw	100
  6802  06F0  00A0               	movwf	delayUS@US^(0+512)
  6803  06F1  319B  23E8  3186   	fcall	_delayUS
  6804                           
  6805                           ;PS_2.c: 1072: if(Send_PS2(0x2F))
  6806  06F4  302F               	movlw	47
  6807  06F5  318E  266C         	fcall	_Send_PS2
  6808                           
  6809                           ;PS_2.c: 1073: {
  6810                           ;PS_2.c: 1074: return 0;
  6811                           ;	Return value of _Init_PS_2_Send is never used
  6812  06F7  0008               	return
  6813  06F8                     __end_of_Init_PS_2_Send:	
  6814                           ;PS_2.c: 1075: }
  6815                           ;PS_2.c: 1076: return 1;
  6816                           ;	Return value of _Init_PS_2_Send is never used
  6817                           
  6818                           
  6819                           	psect	text13
  6820  0E6C                     __ptext13:	
  6821 ;; *************** function _Send_PS2 *****************
  6822 ;; Defined at:
  6823 ;;		line 856 in file "PS_2.c"
  6824 ;; Parameters:    Size  Location     Type
  6825 ;;  command         1    wreg     unsigned char 
  6826 ;; Auto vars:     Size  Location     Type
  6827 ;;  command         1   15[BANK4 ] unsigned char 
  6828 ;;  timeout         2   17[BANK4 ] unsigned int 
  6829 ;;  i               1   16[BANK4 ] unsigned char 
  6830 ;;  oddparity       1   14[BANK4 ] unsigned char 
  6831 ;; Return value:  Size  Location     Type
  6832 ;;                  1    wreg      unsigned char 
  6833 ;; Registers used:
  6834 ;;		wreg, status,2, status,0, pclath, cstack
  6835 ;; Tracked objects:
  6836 ;;		On entry : 0/0
  6837 ;;		On exit  : 0/0
  6838 ;;		Unchanged: 0/0
  6839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6841 ;;      Locals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  6842 ;;      Temps:          0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  6843 ;;      Totals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0
  6844 ;;Total ram usage:        9 bytes
  6845 ;; Hardware stack levels used:    1
  6846 ;; Hardware stack levels required when called:    8
  6847 ;; This function calls:
  6848 ;;		_CheckSum_byte
  6849 ;;		_Clock_TRIS
  6850 ;;		_Data_TRIS
  6851 ;;		_READ_PS_2_PIN
  6852 ;;		_delayUS
  6853 ;; This function is called by:
  6854 ;;		_Init_PS_2_Send
  6855 ;;		_Keyboard_Connected
  6856 ;; This function uses a non-reentrant model
  6857 ;;
  6858                           
  6859                           
  6860                           ;psect for function _Send_PS2
  6861  0E6C                     _Send_PS2:	
  6862                           
  6863                           ;incstack = 0
  6864                           ; Regs used in _Send_PS2: [wreg+status,2+status,0+pclath+cstack]
  6865                           ;Send_PS2@command stored from wreg
  6866  0E6C  0024               	movlb	4	; select bank4
  6867  0E6D  00AF               	movwf	Send_PS2@command^(0+512)
  6868                           
  6869                           ;PS_2.c: 858: unsigned char i=0;
  6870  0E6E  01B0               	clrf	Send_PS2@i^(0+512)
  6871                           
  6872                           ;PS_2.c: 859: unsigned char oddparity = CheckSum_byte((unsigned int)command , 3);
  6873  0E6F  082F               	movf	Send_PS2@command^(0+512),w
  6874  0E70  00AA               	movwf	??_Send_PS2^(0+512)
  6875  0E71  01AB               	clrf	(??_Send_PS2^(0+512)+1)
  6876  0E72  082A               	movf	??_Send_PS2^(0+512),w
  6877  0E73  00A0               	movwf	CheckSum_byte@This^(0+512)
  6878  0E74  082B               	movf	(??_Send_PS2+1)^(0+512),w
  6879  0E75  00A1               	movwf	(CheckSum_byte@This+1)^(0+512)
  6880  0E76  3003               	movlw	3
  6881  0E77  00AC               	movwf	(??_Send_PS2+2)^(0+512)
  6882  0E78  082C               	movf	(??_Send_PS2+2)^(0+512),w
  6883  0E79  00A2               	movwf	CheckSum_byte@Odd_Even^(0+512)
  6884  0E7A  319A  22F5  318E   	fcall	_CheckSum_byte
  6885  0E7D  0024               	movlb	4	; select bank4
  6886  0E7E  00AD               	movwf	(??_Send_PS2+3)^(0+512)
  6887  0E7F  082D               	movf	(??_Send_PS2+3)^(0+512),w
  6888  0E80  00AE               	movwf	Send_PS2@oddparity^(0+512)
  6889                           
  6890                           ;PS_2.c: 860: unsigned int timeout =0;
  6891  0E81  01B1               	clrf	Send_PS2@timeout^(0+512)
  6892  0E82  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  6893                           
  6894                           ;PS_2.c: 862: Clock_TRIS(0);
  6895  0E83  3000               	movlw	0
  6896  0E84  3198  20B0  318E   	fcall	_Clock_TRIS
  6897                           
  6898                           ;PS_2.c: 863: Data_TRIS(0);
  6899  0E87  3000               	movlw	0
  6900  0E88  3190  2000  318E   	fcall	_Data_TRIS
  6901                           
  6902                           ;PS_2.c: 864: LATA &= ~0b00100000;
  6903  0E8B  30DF               	movlw	223
  6904  0E8C  0024               	movlb	4	; select bank4
  6905  0E8D  00AA               	movwf	??_Send_PS2^(0+512)
  6906  0E8E  082A               	movf	??_Send_PS2^(0+512),w
  6907  0E8F  0022               	movlb	2	; select bank2
  6908  0E90  058C               	andwf	12,f	;volatile
  6909                           
  6910                           ;PS_2.c: 865: delayUS(300);
  6911  0E91  3000               	movlw	0
  6912  0E92  0024               	movlb	4	; select bank4
  6913  0E93  00A3               	movwf	(delayUS@US+3)^(0+512)
  6914  0E94  3000               	movlw	0
  6915  0E95  00A2               	movwf	(delayUS@US+2)^(0+512)
  6916  0E96  3001               	movlw	1
  6917  0E97  00A1               	movwf	(delayUS@US+1)^(0+512)
  6918  0E98  302C               	movlw	44
  6919  0E99  00A0               	movwf	delayUS@US^(0+512)
  6920  0E9A  319B  23E8  318E   	fcall	_delayUS
  6921                           
  6922                           ;PS_2.c: 866: LATA &= ~0b00010000;
  6923  0E9D  30EF               	movlw	239
  6924  0E9E  0024               	movlb	4	; select bank4
  6925  0E9F  00AA               	movwf	??_Send_PS2^(0+512)
  6926  0EA0  082A               	movf	??_Send_PS2^(0+512),w
  6927  0EA1  0022               	movlb	2	; select bank2
  6928  0EA2  058C               	andwf	12,f	;volatile
  6929                           
  6930                           ;PS_2.c: 867: delayUS(20);
  6931  0EA3  3000               	movlw	0
  6932  0EA4  0024               	movlb	4	; select bank4
  6933  0EA5  00A3               	movwf	(delayUS@US+3)^(0+512)
  6934  0EA6  3000               	movlw	0
  6935  0EA7  00A2               	movwf	(delayUS@US+2)^(0+512)
  6936  0EA8  3000               	movlw	0
  6937  0EA9  00A1               	movwf	(delayUS@US+1)^(0+512)
  6938  0EAA  3014               	movlw	20
  6939  0EAB  00A0               	movwf	delayUS@US^(0+512)
  6940  0EAC  319B  23E8  318E   	fcall	_delayUS
  6941                           
  6942                           ;PS_2.c: 868: Clock_TRIS(1);
  6943  0EAF  3001               	movlw	1
  6944  0EB0  3198  20B0  318E   	fcall	_Clock_TRIS
  6945                           
  6946                           ;PS_2.c: 869: timeout=0;
  6947  0EB3  0024               	movlb	4	; select bank4
  6948  0EB4  01B1               	clrf	Send_PS2@timeout^(0+512)
  6949  0EB5  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  6950  0EB6                     l6434:	
  6951                           ;PS_2.c: 870: while(READ_PS_2_PIN(0b00100000))
  6952                           
  6953  0EB6  3020               	movlw	32
  6954  0EB7  3199  217C  318E   	fcall	_READ_PS_2_PIN
  6955  0EBA  3A00               	xorlw	0
  6956  0EBB  1903               	btfsc	3,2
  6957  0EBC  2ED3               	goto	l6436
  6958                           
  6959                           ;PS_2.c: 871: {
  6960                           ;PS_2.c: 872: __nop();
  6961  0EBD  0000               	nop
  6962                           
  6963                           ;PS_2.c: 873: timeout++;
  6964  0EBE  3001               	movlw	1
  6965  0EBF  0024               	movlb	4	; select bank4
  6966  0EC0  07B1               	addwf	Send_PS2@timeout^(0+512),f
  6967  0EC1  3000               	movlw	0
  6968  0EC2  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  6969                           
  6970                           ;PS_2.c: 874: if(timeout > 15000)
  6971  0EC3  303A               	movlw	58
  6972  0EC4  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  6973  0EC5  3099               	movlw	153
  6974  0EC6  1903               	skipnz
  6975  0EC7  0231               	subwf	Send_PS2@timeout^(0+512),w
  6976  0EC8  1C03               	skipc
  6977  0EC9  2EB6               	goto	l6434
  6978                           
  6979                           ;PS_2.c: 875: {
  6980                           ;PS_2.c: 876: Clock_TRIS(1);
  6981  0ECA  3001               	movlw	1
  6982  0ECB  3198  20B0  318E   	fcall	_Clock_TRIS
  6983                           
  6984                           ;PS_2.c: 877: Data_TRIS(1);
  6985  0ECE  3001               	movlw	1
  6986  0ECF  3190  2000         	fcall	_Data_TRIS
  6987                           
  6988                           ;PS_2.c: 878: return 1;
  6989  0ED1  3001               	movlw	1
  6990  0ED2  0008               	return
  6991  0ED3                     l6436:	
  6992                           
  6993                           ;PS_2.c: 879: }
  6994                           ;PS_2.c: 880: }
  6995                           ;PS_2.c: 881: for(i=0;i<8;i++)
  6996  0ED3  0024               	movlb	4	; select bank4
  6997  0ED4  01B0               	clrf	Send_PS2@i^(0+512)
  6998  0ED5  3008               	movlw	8
  6999  0ED6  0230               	subwf	Send_PS2@i^(0+512),w
  7000  0ED7  1803               	btfsc	3,0
  7001  0ED8  2F2E               	goto	l869
  7002  0ED9                     l868:	
  7003                           
  7004                           ;PS_2.c: 882: {
  7005                           ;PS_2.c: 883: if(command & 0x1)
  7006  0ED9  1C2F               	btfss	Send_PS2@command^(0+512),0
  7007  0EDA  2EDE               	goto	l6444
  7008                           
  7009                           ;PS_2.c: 884: {
  7010                           ;PS_2.c: 885: LATA |= 0b00010000;
  7011  0EDB  0022               	movlb	2	; select bank2
  7012  0EDC  160C               	bsf	12,4	;volatile
  7013                           
  7014                           ;PS_2.c: 886: }
  7015  0EDD  2EE4               	goto	l6446
  7016  0EDE                     l6444:	
  7017                           
  7018                           ;PS_2.c: 887: else
  7019                           ;PS_2.c: 888: {
  7020                           ;PS_2.c: 889: LATA &= ~0b00010000;
  7021  0EDE  30EF               	movlw	239
  7022  0EDF  0024               	movlb	4	; select bank4
  7023  0EE0  00AA               	movwf	??_Send_PS2^(0+512)
  7024  0EE1  082A               	movf	??_Send_PS2^(0+512),w
  7025  0EE2  0022               	movlb	2	; select bank2
  7026  0EE3  058C               	andwf	12,f	;volatile
  7027  0EE4                     l6446:	
  7028                           
  7029                           ;PS_2.c: 890: }
  7030                           ;PS_2.c: 891: command >> = 1;
  7031  0EE4  1003               	clrc
  7032  0EE5  0024               	movlb	4	; select bank4
  7033  0EE6  0CAF               	rrf	Send_PS2@command^(0+512),f
  7034                           
  7035                           ;PS_2.c: 892: timeout=0;
  7036  0EE7  01B1               	clrf	Send_PS2@timeout^(0+512)
  7037  0EE8  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7038  0EE9                     l6458:	
  7039                           ;PS_2.c: 893: while(!READ_PS_2_PIN(0b00100000))
  7040                           
  7041  0EE9  3020               	movlw	32
  7042  0EEA  3199  217C  318E   	fcall	_READ_PS_2_PIN
  7043  0EED  3A00               	xorlw	0
  7044  0EEE  1D03               	btfss	3,2
  7045  0EEF  2F05               	goto	l6460
  7046                           
  7047                           ;PS_2.c: 894: {
  7048                           ;PS_2.c: 895: timeout++;
  7049  0EF0  3001               	movlw	1
  7050  0EF1  0024               	movlb	4	; select bank4
  7051  0EF2  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7052  0EF3  3000               	movlw	0
  7053  0EF4  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7054                           
  7055                           ;PS_2.c: 896: if(timeout > 15000)
  7056  0EF5  303A               	movlw	58
  7057  0EF6  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7058  0EF7  3099               	movlw	153
  7059  0EF8  1903               	skipnz
  7060  0EF9  0231               	subwf	Send_PS2@timeout^(0+512),w
  7061  0EFA  1C03               	skipc
  7062  0EFB  2EE9               	goto	l6458
  7063                           
  7064                           ;PS_2.c: 897: {
  7065                           ;PS_2.c: 898: Clock_TRIS(1);
  7066  0EFC  3001               	movlw	1
  7067  0EFD  3198  20B0  318E   	fcall	_Clock_TRIS
  7068                           
  7069                           ;PS_2.c: 899: Data_TRIS(1);
  7070  0F00  3001               	movlw	1
  7071  0F01  3190  2000         	fcall	_Data_TRIS
  7072                           
  7073                           ;PS_2.c: 900: return 1;
  7074  0F03  3001               	movlw	1
  7075  0F04  0008               	return
  7076  0F05                     l6460:	
  7077                           
  7078                           ;PS_2.c: 901: }
  7079                           ;PS_2.c: 902: }
  7080                           ;PS_2.c: 903: timeout=0;
  7081  0F05  0024               	movlb	4	; select bank4
  7082  0F06  01B1               	clrf	Send_PS2@timeout^(0+512)
  7083  0F07  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7084  0F08                     l6470:	
  7085                           ;PS_2.c: 904: while(READ_PS_2_PIN(0b00100000))
  7086                           
  7087  0F08  3020               	movlw	32
  7088  0F09  3199  217C  318E   	fcall	_READ_PS_2_PIN
  7089  0F0C  3A00               	xorlw	0
  7090  0F0D  1903               	btfsc	3,2
  7091  0F0E  2F25               	goto	l6472
  7092                           
  7093                           ;PS_2.c: 905: {
  7094                           ;PS_2.c: 906: __nop();
  7095  0F0F  0000               	nop
  7096                           
  7097                           ;PS_2.c: 907: timeout++;
  7098  0F10  3001               	movlw	1
  7099  0F11  0024               	movlb	4	; select bank4
  7100  0F12  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7101  0F13  3000               	movlw	0
  7102  0F14  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7103                           
  7104                           ;PS_2.c: 908: if(timeout > 15000)
  7105  0F15  303A               	movlw	58
  7106  0F16  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7107  0F17  3099               	movlw	153
  7108  0F18  1903               	skipnz
  7109  0F19  0231               	subwf	Send_PS2@timeout^(0+512),w
  7110  0F1A  1C03               	skipc
  7111  0F1B  2F08               	goto	l6470
  7112                           
  7113                           ;PS_2.c: 909: {
  7114                           ;PS_2.c: 910: Clock_TRIS(1);
  7115  0F1C  3001               	movlw	1
  7116  0F1D  3198  20B0  318E   	fcall	_Clock_TRIS
  7117                           
  7118                           ;PS_2.c: 911: Data_TRIS(1);
  7119  0F20  3001               	movlw	1
  7120  0F21  3190  2000         	fcall	_Data_TRIS
  7121                           
  7122                           ;PS_2.c: 912: return 1;
  7123  0F23  3001               	movlw	1
  7124  0F24  0008               	return
  7125  0F25                     l6472:	
  7126  0F25  3001               	movlw	1
  7127  0F26  0024               	movlb	4	; select bank4
  7128  0F27  00AA               	movwf	??_Send_PS2^(0+512)
  7129  0F28  082A               	movf	??_Send_PS2^(0+512),w
  7130  0F29  07B0               	addwf	Send_PS2@i^(0+512),f
  7131  0F2A  3008               	movlw	8
  7132  0F2B  0230               	subwf	Send_PS2@i^(0+512),w
  7133  0F2C  1C03               	skipc
  7134  0F2D  2ED9               	goto	l868
  7135  0F2E                     l869:	
  7136                           
  7137                           ;PS_2.c: 913: }
  7138                           ;PS_2.c: 914: }
  7139                           ;PS_2.c: 915: }
  7140                           ;PS_2.c: 917: if(oddparity & 0x1)
  7141  0F2E  1C2E               	btfss	Send_PS2@oddparity^(0+512),0
  7142  0F2F  2F33               	goto	l6478
  7143                           
  7144                           ;PS_2.c: 918: {
  7145                           ;PS_2.c: 919: LATA |= 0b00010000;
  7146  0F30  0022               	movlb	2	; select bank2
  7147  0F31  160C               	bsf	12,4	;volatile
  7148                           
  7149                           ;PS_2.c: 920: }
  7150  0F32  2F39               	goto	l6480
  7151  0F33                     l6478:	
  7152                           
  7153                           ;PS_2.c: 921: else
  7154                           ;PS_2.c: 922: {
  7155                           ;PS_2.c: 923: LATA &= ~0b00010000;
  7156  0F33  30EF               	movlw	239
  7157  0F34  0024               	movlb	4	; select bank4
  7158  0F35  00AA               	movwf	??_Send_PS2^(0+512)
  7159  0F36  082A               	movf	??_Send_PS2^(0+512),w
  7160  0F37  0022               	movlb	2	; select bank2
  7161  0F38  058C               	andwf	12,f	;volatile
  7162  0F39                     l6480:	
  7163                           
  7164                           ;PS_2.c: 924: }
  7165                           ;PS_2.c: 925: timeout=0;
  7166  0F39  0024               	movlb	4	; select bank4
  7167  0F3A  01B1               	clrf	Send_PS2@timeout^(0+512)
  7168  0F3B  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7169  0F3C                     l6490:	
  7170                           ;PS_2.c: 926: while(!READ_PS_2_PIN(0b00100000))
  7171                           
  7172  0F3C  3020               	movlw	32
  7173  0F3D  3199  217C  318E   	fcall	_READ_PS_2_PIN
  7174  0F40  3A00               	xorlw	0
  7175  0F41  1D03               	btfss	3,2
  7176  0F42  2F58               	goto	l6492
  7177                           
  7178                           ;PS_2.c: 927: {
  7179                           ;PS_2.c: 928: timeout++;
  7180  0F43  3001               	movlw	1
  7181  0F44  0024               	movlb	4	; select bank4
  7182  0F45  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7183  0F46  3000               	movlw	0
  7184  0F47  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7185                           
  7186                           ;PS_2.c: 929: if(timeout > 15000)
  7187  0F48  303A               	movlw	58
  7188  0F49  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7189  0F4A  3099               	movlw	153
  7190  0F4B  1903               	skipnz
  7191  0F4C  0231               	subwf	Send_PS2@timeout^(0+512),w
  7192  0F4D  1C03               	skipc
  7193  0F4E  2F3C               	goto	l6490
  7194                           
  7195                           ;PS_2.c: 930: {
  7196                           ;PS_2.c: 931: Clock_TRIS(1);
  7197  0F4F  3001               	movlw	1
  7198  0F50  3198  20B0  318E   	fcall	_Clock_TRIS
  7199                           
  7200                           ;PS_2.c: 932: Data_TRIS(1);
  7201  0F53  3001               	movlw	1
  7202  0F54  3190  2000         	fcall	_Data_TRIS
  7203                           
  7204                           ;PS_2.c: 933: return 1;
  7205  0F56  3001               	movlw	1
  7206  0F57  0008               	return
  7207  0F58                     l6492:	
  7208                           
  7209                           ;PS_2.c: 934: }
  7210                           ;PS_2.c: 935: }
  7211                           ;PS_2.c: 936: timeout=0;
  7212  0F58  0024               	movlb	4	; select bank4
  7213  0F59  01B1               	clrf	Send_PS2@timeout^(0+512)
  7214  0F5A  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7215  0F5B                     l6502:	
  7216                           ;PS_2.c: 937: while(READ_PS_2_PIN(0b00100000))
  7217                           
  7218  0F5B  3020               	movlw	32
  7219  0F5C  3199  217C  318E   	fcall	_READ_PS_2_PIN
  7220  0F5F  3A00               	xorlw	0
  7221  0F60  1903               	btfsc	3,2
  7222  0F61  2F77               	goto	l6504
  7223                           
  7224                           ;PS_2.c: 938: {
  7225                           ;PS_2.c: 939: timeout++;
  7226  0F62  3001               	movlw	1
  7227  0F63  0024               	movlb	4	; select bank4
  7228  0F64  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7229  0F65  3000               	movlw	0
  7230  0F66  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7231                           
  7232                           ;PS_2.c: 940: if(timeout > 15000)
  7233  0F67  303A               	movlw	58
  7234  0F68  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7235  0F69  3099               	movlw	153
  7236  0F6A  1903               	skipnz
  7237  0F6B  0231               	subwf	Send_PS2@timeout^(0+512),w
  7238  0F6C  1C03               	skipc
  7239  0F6D  2F5B               	goto	l6502
  7240                           
  7241                           ;PS_2.c: 941: {
  7242                           ;PS_2.c: 942: Clock_TRIS(1);
  7243  0F6E  3001               	movlw	1
  7244  0F6F  3198  20B0  318E   	fcall	_Clock_TRIS
  7245                           
  7246                           ;PS_2.c: 943: Data_TRIS(1);
  7247  0F72  3001               	movlw	1
  7248  0F73  3190  2000         	fcall	_Data_TRIS
  7249                           
  7250                           ;PS_2.c: 944: return 1;
  7251  0F75  3001               	movlw	1
  7252  0F76  0008               	return
  7253  0F77                     l6504:	
  7254                           
  7255                           ;PS_2.c: 945: }
  7256                           ;PS_2.c: 946: }
  7257                           ;PS_2.c: 948: Data_TRIS(1);
  7258  0F77  3001               	movlw	1
  7259  0F78  3190  2000  318E   	fcall	_Data_TRIS
  7260                           
  7261                           ;PS_2.c: 950: timeout=0;
  7262  0F7B  0024               	movlb	4	; select bank4
  7263  0F7C  01B1               	clrf	Send_PS2@timeout^(0+512)
  7264  0F7D  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7265  0F7E                     l6516:	
  7266                           ;PS_2.c: 951: while(READ_PS_2_PIN(0b00010000))
  7267                           
  7268  0F7E  3010               	movlw	16
  7269  0F7F  3199  217C  318E   	fcall	_READ_PS_2_PIN
  7270  0F82  3A00               	xorlw	0
  7271  0F83  1903               	btfsc	3,2
  7272  0F84  2F9A               	goto	l6518
  7273                           
  7274                           ;PS_2.c: 952: {
  7275                           ;PS_2.c: 953: timeout++;
  7276  0F85  3001               	movlw	1
  7277  0F86  0024               	movlb	4	; select bank4
  7278  0F87  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7279  0F88  3000               	movlw	0
  7280  0F89  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7281                           
  7282                           ;PS_2.c: 954: if(timeout > 15000)
  7283  0F8A  303A               	movlw	58
  7284  0F8B  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7285  0F8C  3099               	movlw	153
  7286  0F8D  1903               	skipnz
  7287  0F8E  0231               	subwf	Send_PS2@timeout^(0+512),w
  7288  0F8F  1C03               	skipc
  7289  0F90  2F7E               	goto	l6516
  7290                           
  7291                           ;PS_2.c: 955: {
  7292                           ;PS_2.c: 956: Clock_TRIS(1);
  7293  0F91  3001               	movlw	1
  7294  0F92  3198  20B0  318E   	fcall	_Clock_TRIS
  7295                           
  7296                           ;PS_2.c: 957: Data_TRIS(1);
  7297  0F95  3001               	movlw	1
  7298  0F96  3190  2000         	fcall	_Data_TRIS
  7299                           
  7300                           ;PS_2.c: 958: return 1;
  7301  0F98  3001               	movlw	1
  7302  0F99  0008               	return
  7303  0F9A                     l6518:	
  7304                           
  7305                           ;PS_2.c: 959: }
  7306                           ;PS_2.c: 960: }
  7307                           ;PS_2.c: 961: timeout=0;
  7308  0F9A  0024               	movlb	4	; select bank4
  7309  0F9B  01B1               	clrf	Send_PS2@timeout^(0+512)
  7310  0F9C  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7311  0F9D                     l6528:	
  7312                           ;PS_2.c: 962: while(READ_PS_2_PIN(0b00100000))
  7313                           
  7314  0F9D  3020               	movlw	32
  7315  0F9E  3199  217C  318E   	fcall	_READ_PS_2_PIN
  7316  0FA1  3A00               	xorlw	0
  7317  0FA2  1903               	btfsc	3,2
  7318  0FA3  2FB9               	goto	l6530
  7319                           
  7320                           ;PS_2.c: 963: {
  7321                           ;PS_2.c: 964: timeout++;
  7322  0FA4  3001               	movlw	1
  7323  0FA5  0024               	movlb	4	; select bank4
  7324  0FA6  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7325  0FA7  3000               	movlw	0
  7326  0FA8  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7327                           
  7328                           ;PS_2.c: 965: if(timeout > 15000)
  7329  0FA9  303A               	movlw	58
  7330  0FAA  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7331  0FAB  3099               	movlw	153
  7332  0FAC  1903               	skipnz
  7333  0FAD  0231               	subwf	Send_PS2@timeout^(0+512),w
  7334  0FAE  1C03               	skipc
  7335  0FAF  2F9D               	goto	l6528
  7336                           
  7337                           ;PS_2.c: 966: {
  7338                           ;PS_2.c: 967: Clock_TRIS(1);
  7339  0FB0  3001               	movlw	1
  7340  0FB1  3198  20B0  318E   	fcall	_Clock_TRIS
  7341                           
  7342                           ;PS_2.c: 968: Data_TRIS(1);
  7343  0FB4  3001               	movlw	1
  7344  0FB5  3190  2000         	fcall	_Data_TRIS
  7345                           
  7346                           ;PS_2.c: 969: return 1;
  7347  0FB7  3001               	movlw	1
  7348  0FB8  0008               	return
  7349  0FB9                     l6530:	
  7350                           
  7351                           ;PS_2.c: 970: }
  7352                           ;PS_2.c: 971: }
  7353                           ;PS_2.c: 972: timeout=0;
  7354  0FB9  0024               	movlb	4	; select bank4
  7355  0FBA  01B1               	clrf	Send_PS2@timeout^(0+512)
  7356  0FBB  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7357  0FBC                     l6540:	
  7358                           ;PS_2.c: 973: while(!READ_PS_2_PIN(0b00010000))
  7359                           
  7360  0FBC  3010               	movlw	16
  7361  0FBD  3199  217C  318E   	fcall	_READ_PS_2_PIN
  7362  0FC0  3A00               	xorlw	0
  7363  0FC1  1D03               	btfss	3,2
  7364  0FC2  2FD8               	goto	l6542
  7365                           
  7366                           ;PS_2.c: 974: {
  7367                           ;PS_2.c: 975: timeout++;
  7368  0FC3  3001               	movlw	1
  7369  0FC4  0024               	movlb	4	; select bank4
  7370  0FC5  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7371  0FC6  3000               	movlw	0
  7372  0FC7  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7373                           
  7374                           ;PS_2.c: 976: if(timeout > 15000)
  7375  0FC8  303A               	movlw	58
  7376  0FC9  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7377  0FCA  3099               	movlw	153
  7378  0FCB  1903               	skipnz
  7379  0FCC  0231               	subwf	Send_PS2@timeout^(0+512),w
  7380  0FCD  1C03               	skipc
  7381  0FCE  2FBC               	goto	l6540
  7382                           
  7383                           ;PS_2.c: 977: {
  7384                           ;PS_2.c: 978: Clock_TRIS(1);
  7385  0FCF  3001               	movlw	1
  7386  0FD0  3198  20B0  318E   	fcall	_Clock_TRIS
  7387                           
  7388                           ;PS_2.c: 979: Data_TRIS(1);
  7389  0FD3  3001               	movlw	1
  7390  0FD4  3190  2000         	fcall	_Data_TRIS
  7391                           
  7392                           ;PS_2.c: 980: return 1;
  7393  0FD6  3001               	movlw	1
  7394  0FD7  0008               	return
  7395  0FD8                     l6542:	
  7396                           
  7397                           ;PS_2.c: 981: }
  7398                           ;PS_2.c: 982: }
  7399                           ;PS_2.c: 983: timeout=0;
  7400  0FD8  0024               	movlb	4	; select bank4
  7401  0FD9  01B1               	clrf	Send_PS2@timeout^(0+512)
  7402  0FDA  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7403  0FDB                     l6552:	
  7404                           ;PS_2.c: 984: while(!READ_PS_2_PIN(0b00100000))
  7405                           
  7406  0FDB  3020               	movlw	32
  7407  0FDC  3199  217C  318E   	fcall	_READ_PS_2_PIN
  7408  0FDF  3A00               	xorlw	0
  7409  0FE0  1D03               	btfss	3,2
  7410  0FE1  2FF7               	goto	l6554
  7411                           
  7412                           ;PS_2.c: 985: {
  7413                           ;PS_2.c: 986: timeout++;
  7414  0FE2  3001               	movlw	1
  7415  0FE3  0024               	movlb	4	; select bank4
  7416  0FE4  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7417  0FE5  3000               	movlw	0
  7418  0FE6  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7419                           
  7420                           ;PS_2.c: 987: if(timeout > 15000)
  7421  0FE7  303A               	movlw	58
  7422  0FE8  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7423  0FE9  3099               	movlw	153
  7424  0FEA  1903               	skipnz
  7425  0FEB  0231               	subwf	Send_PS2@timeout^(0+512),w
  7426  0FEC  1C03               	skipc
  7427  0FED  2FDB               	goto	l6552
  7428                           
  7429                           ;PS_2.c: 988: {
  7430                           ;PS_2.c: 989: Clock_TRIS(1);
  7431  0FEE  3001               	movlw	1
  7432  0FEF  3198  20B0  318E   	fcall	_Clock_TRIS
  7433                           
  7434                           ;PS_2.c: 990: Data_TRIS(1);
  7435  0FF2  3001               	movlw	1
  7436  0FF3  3190  2000         	fcall	_Data_TRIS
  7437                           
  7438                           ;PS_2.c: 991: return 1;
  7439  0FF5  3001               	movlw	1
  7440  0FF6  0008               	return
  7441  0FF7                     l6554:	
  7442                           
  7443                           ;PS_2.c: 992: }
  7444                           ;PS_2.c: 993: }
  7445                           ;PS_2.c: 996: Clock_TRIS(1);
  7446  0FF7  3001               	movlw	1
  7447  0FF8  3198  20B0  318E   	fcall	_Clock_TRIS
  7448                           
  7449                           ;PS_2.c: 997: Data_TRIS(1);
  7450  0FFB  3001               	movlw	1
  7451  0FFC  3190  2000         	fcall	_Data_TRIS
  7452                           
  7453                           ;PS_2.c: 998: return 0;
  7454  0FFE  3000               	movlw	0
  7455  0FFF  0008               	return
  7456  1000                     __end_of_Send_PS2:	
  7457                           
  7458                           	psect	text14
  7459  197C                     __ptext14:	
  7460 ;; *************** function _READ_PS_2_PIN *****************
  7461 ;; Defined at:
  7462 ;;		line 222 in file "PS_2.c"
  7463 ;; Parameters:    Size  Location     Type
  7464 ;;  DATA_CLK        1    wreg     unsigned char 
  7465 ;; Auto vars:     Size  Location     Type
  7466 ;;  DATA_CLK        1    0[BANK4 ] unsigned char 
  7467 ;; Return value:  Size  Location     Type
  7468 ;;                  1    wreg      unsigned char 
  7469 ;; Registers used:
  7470 ;;		wreg, status,2, status,0
  7471 ;; Tracked objects:
  7472 ;;		On entry : 0/0
  7473 ;;		On exit  : 0/0
  7474 ;;		Unchanged: 0/0
  7475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7477 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7479 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7480 ;;Total ram usage:        1 bytes
  7481 ;; Hardware stack levels used:    1
  7482 ;; Hardware stack levels required when called:    7
  7483 ;; This function calls:
  7484 ;;		Nothing
  7485 ;; This function is called by:
  7486 ;;		_Send_PS2
  7487 ;; This function uses a non-reentrant model
  7488 ;;
  7489                           
  7490                           
  7491                           ;psect for function _READ_PS_2_PIN
  7492  197C                     _READ_PS_2_PIN:	
  7493                           
  7494                           ;incstack = 0
  7495                           ; Regs used in _READ_PS_2_PIN: [wreg+status,2+status,0]
  7496                           ;READ_PS_2_PIN@DATA_CLK stored from wreg
  7497  197C  0024               	movlb	4	; select bank4
  7498  197D  00A0               	movwf	READ_PS_2_PIN@DATA_CLK^(0+512)
  7499                           
  7500                           ;PS_2.c: 224: if(DATA_CLK == 0b00100000)
  7501  197E  3020               	movlw	32
  7502  197F  0620               	xorwf	READ_PS_2_PIN@DATA_CLK^(0+512),w
  7503  1980  1D03               	btfss	3,2
  7504  1981  2989               	goto	l655
  7505                           
  7506                           ;PS_2.c: 225: {
  7507                           ;PS_2.c: 227: if((PORTA & 0b00100000) == 0b00100000)
  7508  1982  0020               	movlb	0	; select bank0
  7509  1983  1E8C               	btfss	12,5	;volatile
  7510  1984  2987               	goto	l6242
  7511                           
  7512                           ;PS_2.c: 228: {
  7513                           ;PS_2.c: 229: return (1);
  7514  1985  3001               	movlw	1
  7515                           
  7516                           ;PS_2.c: 230: }
  7517  1986  0008               	return
  7518  1987                     l6242:	
  7519                           
  7520                           ;PS_2.c: 231: else
  7521                           ;PS_2.c: 232: {
  7522                           ;PS_2.c: 233: return 0;
  7523  1987  3000               	movlw	0
  7524                           
  7525                           ;PS_2.c: 234: }
  7526                           ;PS_2.c: 235: }
  7527  1988  0008               	return
  7528  1989                     l655:	
  7529                           
  7530                           ;PS_2.c: 236: else
  7531                           ;PS_2.c: 237: {
  7532                           ;PS_2.c: 239: if((PORTA & 0b00010000) == 0b00010000)
  7533  1989  0020               	movlb	0	; select bank0
  7534  198A  1E0C               	btfss	12,4	;volatile
  7535  198B  298E               	goto	l6252
  7536                           
  7537                           ;PS_2.c: 240: {
  7538                           ;PS_2.c: 241: return (1);
  7539  198C  3001               	movlw	1
  7540                           
  7541                           ;PS_2.c: 242: }
  7542  198D  0008               	return
  7543  198E                     l6252:	
  7544                           
  7545                           ;PS_2.c: 243: else
  7546                           ;PS_2.c: 244: {
  7547                           ;PS_2.c: 245: return 0;
  7548  198E  3000               	movlw	0
  7549  198F  0008               	return
  7550  1990                     __end_of_READ_PS_2_PIN:	
  7551                           
  7552                           	psect	text15
  7553  1000                     __ptext15:	
  7554 ;; *************** function _Data_TRIS *****************
  7555 ;; Defined at:
  7556 ;;		line 137 in file "PS_2.c"
  7557 ;; Parameters:    Size  Location     Type
  7558 ;;  direction       1    wreg     unsigned char 
  7559 ;; Auto vars:     Size  Location     Type
  7560 ;;  direction       1    0[BANK4 ] unsigned char 
  7561 ;; Return value:  Size  Location     Type
  7562 ;;		None               void
  7563 ;; Registers used:
  7564 ;;		wreg, status,2, status,0
  7565 ;; Tracked objects:
  7566 ;;		On entry : 0/0
  7567 ;;		On exit  : 0/0
  7568 ;;		Unchanged: 0/0
  7569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7571 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7573 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7574 ;;Total ram usage:        1 bytes
  7575 ;; Hardware stack levels used:    1
  7576 ;; Hardware stack levels required when called:    7
  7577 ;; This function calls:
  7578 ;;		Nothing
  7579 ;; This function is called by:
  7580 ;;		_PS_2_INIT
  7581 ;;		_Send_PS2
  7582 ;; This function uses a non-reentrant model
  7583 ;;
  7584                           
  7585                           
  7586                           ;psect for function _Data_TRIS
  7587  1000                     _Data_TRIS:	
  7588                           
  7589                           ;incstack = 0
  7590                           ; Regs used in _Data_TRIS: [wreg+status,2+status,0]
  7591                           ;Data_TRIS@direction stored from wreg
  7592  1000  0024               	movlb	4	; select bank4
  7593  1001  00A0               	movwf	Data_TRIS@direction^(0+512)
  7594                           
  7595                           ;PS_2.c: 139: if(direction == 0)
  7596  1002  0820               	movf	Data_TRIS@direction^(0+512),w
  7597  1003  1D03               	btfss	3,2
  7598  1004  2808               	goto	l635
  7599                           
  7600                           ;PS_2.c: 140: {
  7601                           ;PS_2.c: 141: TRISAbits.TRISA4 = 0;
  7602  1005  0021               	movlb	1	; select bank1
  7603  1006  120C               	bcf	12,4	;volatile
  7604                           
  7605                           ;PS_2.c: 142: }
  7606  1007  0008               	return
  7607  1008                     l635:	
  7608                           
  7609                           ;PS_2.c: 143: else
  7610                           ;PS_2.c: 144: {
  7611                           ;PS_2.c: 145: TRISAbits.TRISA4 = 1;
  7612  1008  0021               	movlb	1	; select bank1
  7613  1009  160C               	bsf	12,4	;volatile
  7614  100A  0008               	return
  7615  100B                     __end_of_Data_TRIS:	
  7616                           
  7617                           	psect	text16
  7618  18B0                     __ptext16:	
  7619 ;; *************** function _Clock_TRIS *****************
  7620 ;; Defined at:
  7621 ;;		line 120 in file "PS_2.c"
  7622 ;; Parameters:    Size  Location     Type
  7623 ;;  direction       1    wreg     unsigned char 
  7624 ;; Auto vars:     Size  Location     Type
  7625 ;;  direction       1    0[BANK4 ] unsigned char 
  7626 ;; Return value:  Size  Location     Type
  7627 ;;		None               void
  7628 ;; Registers used:
  7629 ;;		wreg, status,2, status,0
  7630 ;; Tracked objects:
  7631 ;;		On entry : 0/0
  7632 ;;		On exit  : 0/0
  7633 ;;		Unchanged: 0/0
  7634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7636 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7638 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7639 ;;Total ram usage:        1 bytes
  7640 ;; Hardware stack levels used:    1
  7641 ;; Hardware stack levels required when called:    7
  7642 ;; This function calls:
  7643 ;;		Nothing
  7644 ;; This function is called by:
  7645 ;;		_PS_2_INIT
  7646 ;;		_Send_PS2
  7647 ;; This function uses a non-reentrant model
  7648 ;;
  7649                           
  7650                           
  7651                           ;psect for function _Clock_TRIS
  7652  18B0                     _Clock_TRIS:	
  7653                           
  7654                           ;incstack = 0
  7655                           ; Regs used in _Clock_TRIS: [wreg+status,2+status,0]
  7656                           ;Clock_TRIS@direction stored from wreg
  7657  18B0  0024               	movlb	4	; select bank4
  7658  18B1  00A0               	movwf	Clock_TRIS@direction^(0+512)
  7659                           
  7660                           ;PS_2.c: 122: if(direction == 0)
  7661  18B2  0820               	movf	Clock_TRIS@direction^(0+512),w
  7662  18B3  1D03               	btfss	3,2
  7663  18B4  28B8               	goto	l630
  7664                           
  7665                           ;PS_2.c: 123: {
  7666                           ;PS_2.c: 124: TRISAbits.TRISA5 = 0;
  7667  18B5  0021               	movlb	1	; select bank1
  7668  18B6  128C               	bcf	12,5	;volatile
  7669                           
  7670                           ;PS_2.c: 125: }
  7671  18B7  0008               	return
  7672  18B8                     l630:	
  7673                           
  7674                           ;PS_2.c: 126: else
  7675                           ;PS_2.c: 127: {
  7676                           ;PS_2.c: 128: TRISAbits.TRISA5 = 1;
  7677  18B8  0021               	movlb	1	; select bank1
  7678  18B9  168C               	bsf	12,5	;volatile
  7679  18BA  0008               	return
  7680  18BB                     __end_of_Clock_TRIS:	
  7681                           
  7682                           	psect	text17
  7683  1969                     __ptext17:	
  7684 ;; *************** function _PS_2_DISABLE_INTERRUPT *****************
  7685 ;; Defined at:
  7686 ;;		line 178 in file "PS_2.c"
  7687 ;; Parameters:    Size  Location     Type
  7688 ;;  DATA_CLK        1    wreg     unsigned char 
  7689 ;; Auto vars:     Size  Location     Type
  7690 ;;  DATA_CLK        1    1[BANK4 ] unsigned char 
  7691 ;; Return value:  Size  Location     Type
  7692 ;;		None               void
  7693 ;; Registers used:
  7694 ;;		wreg, status,2, status,0
  7695 ;; Tracked objects:
  7696 ;;		On entry : 0/0
  7697 ;;		On exit  : 0/0
  7698 ;;		Unchanged: 0/0
  7699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7701 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7702 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7703 ;;      Totals:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  7704 ;;Total ram usage:        2 bytes
  7705 ;; Hardware stack levels used:    1
  7706 ;; Hardware stack levels required when called:    7
  7707 ;; This function calls:
  7708 ;;		Nothing
  7709 ;; This function is called by:
  7710 ;;		_Init_PS_2_Send
  7711 ;;		_Keyboard_Connected
  7712 ;; This function uses a non-reentrant model
  7713 ;;
  7714                           
  7715                           
  7716                           ;psect for function _PS_2_DISABLE_INTERRUPT
  7717  1969                     _PS_2_DISABLE_INTERRUPT:	
  7718                           
  7719                           ;incstack = 0
  7720                           ; Regs used in _PS_2_DISABLE_INTERRUPT: [wreg+status,2+status,0]
  7721                           ;PS_2_DISABLE_INTERRUPT@DATA_CLK stored from wreg
  7722  1969  0024               	movlb	4	; select bank4
  7723  196A  00A1               	movwf	PS_2_DISABLE_INTERRUPT@DATA_CLK^(0+512)
  7724                           
  7725                           ;PS_2.c: 180: if(DATA_CLK == 0b00100000)
  7726  196B  3020               	movlw	32
  7727  196C  0621               	xorwf	PS_2_DISABLE_INTERRUPT@DATA_CLK^(0+512),w
  7728  196D  1D03               	btfss	3,2
  7729  196E  2975               	goto	l6324
  7730                           
  7731                           ;PS_2.c: 181: {
  7732                           ;PS_2.c: 184: IOCAN &= ~0b00100000;
  7733  196F  30DF               	movlw	223
  7734  1970  00A0               	movwf	??_PS_2_DISABLE_INTERRUPT^(0+512)
  7735  1971  0820               	movf	??_PS_2_DISABLE_INTERRUPT^(0+512),w
  7736  1972  0027               	movlb	7	; select bank7
  7737  1973  0592               	andwf	18,f	;volatile
  7738                           
  7739                           ;PS_2.c: 185: }
  7740  1974  0008               	return
  7741  1975                     l6324:	
  7742                           
  7743                           ;PS_2.c: 186: else
  7744                           ;PS_2.c: 187: {
  7745                           ;PS_2.c: 190: IOCAN &= ~0b00010000;
  7746  1975  30EF               	movlw	239
  7747  1976  0024               	movlb	4	; select bank4
  7748  1977  00A0               	movwf	??_PS_2_DISABLE_INTERRUPT^(0+512)
  7749  1978  0820               	movf	??_PS_2_DISABLE_INTERRUPT^(0+512),w
  7750  1979  0027               	movlb	7	; select bank7
  7751  197A  0592               	andwf	18,f	;volatile
  7752  197B  0008               	return
  7753  197C                     __end_of_PS_2_DISABLE_INTERRUPT:	
  7754                           
  7755                           	psect	text18
  7756  18C7                     __ptext18:	
  7757 ;; *************** function _PS_2_ENABLE_INTERRUPT *****************
  7758 ;; Defined at:
  7759 ;;		line 199 in file "PS_2.c"
  7760 ;; Parameters:    Size  Location     Type
  7761 ;;  DATA_CLK        1    wreg     unsigned char 
  7762 ;; Auto vars:     Size  Location     Type
  7763 ;;  DATA_CLK        1    0[BANK4 ] unsigned char 
  7764 ;; Return value:  Size  Location     Type
  7765 ;;		None               void
  7766 ;; Registers used:
  7767 ;;		wreg, status,2, status,0
  7768 ;; Tracked objects:
  7769 ;;		On entry : 0/0
  7770 ;;		On exit  : 0/0
  7771 ;;		Unchanged: 0/0
  7772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7774 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7776 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7777 ;;Total ram usage:        1 bytes
  7778 ;; Hardware stack levels used:    1
  7779 ;; Hardware stack levels required when called:    7
  7780 ;; This function calls:
  7781 ;;		Nothing
  7782 ;; This function is called by:
  7783 ;;		_main
  7784 ;;		_Keyboard_Connected
  7785 ;; This function uses a non-reentrant model
  7786 ;;
  7787                           
  7788                           
  7789                           ;psect for function _PS_2_ENABLE_INTERRUPT
  7790  18C7                     _PS_2_ENABLE_INTERRUPT:	
  7791                           
  7792                           ;incstack = 0
  7793                           ; Regs used in _PS_2_ENABLE_INTERRUPT: [wreg+status,2+status,0]
  7794                           ;PS_2_ENABLE_INTERRUPT@DATA_CLK stored from wreg
  7795  18C7  0024               	movlb	4	; select bank4
  7796  18C8  00A0               	movwf	PS_2_ENABLE_INTERRUPT@DATA_CLK^(0+512)
  7797                           
  7798                           ;PS_2.c: 201: if(DATA_CLK == 0b00100000)
  7799  18C9  3020               	movlw	32
  7800  18CA  0620               	xorwf	PS_2_ENABLE_INTERRUPT@DATA_CLK^(0+512),w
  7801  18CB  1D03               	btfss	3,2
  7802  18CC  28D0               	goto	l650
  7803                           
  7804                           ;PS_2.c: 202: {
  7805                           ;PS_2.c: 205: IOCAN |= 0b00100000;
  7806  18CD  0027               	movlb	7	; select bank7
  7807  18CE  1692               	bsf	18,5	;volatile
  7808                           
  7809                           ;PS_2.c: 207: }
  7810  18CF  0008               	return
  7811  18D0                     l650:	
  7812                           
  7813                           ;PS_2.c: 208: else
  7814                           ;PS_2.c: 209: {
  7815                           ;PS_2.c: 212: IOCAN |= 0b00010000;
  7816  18D0  0027               	movlb	7	; select bank7
  7817  18D1  1612               	bsf	18,4	;volatile
  7818  18D2  0008               	return
  7819  18D3                     __end_of_PS_2_ENABLE_INTERRUPT:	
  7820                           
  7821                           	psect	text19
  7822  0A51                     __ptext19:	
  7823 ;; *************** function _Init_System *****************
  7824 ;; Defined at:
  7825 ;;		line 103 in file "user.c"
  7826 ;; Parameters:    Size  Location     Type
  7827 ;;		None
  7828 ;; Auto vars:     Size  Location     Type
  7829 ;;  Baud            4   44[BANK4 ] unsigned long 
  7830 ;;  temp            4   40[BANK4 ] unsigned long 
  7831 ;;  Parity          1   48[BANK4 ] unsigned char 
  7832 ;; Return value:  Size  Location     Type
  7833 ;;		None               void
  7834 ;; Registers used:
  7835 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7836 ;; Tracked objects:
  7837 ;;		On entry : 0/0
  7838 ;;		On exit  : 0/0
  7839 ;;		Unchanged: 0/0
  7840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7842 ;;      Locals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0
  7843 ;;      Temps:          0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  7844 ;;      Totals:         0       0       0       0       0      14       0       0       0       0       0       0       
      +0       0
  7845 ;;Total ram usage:       14 bytes
  7846 ;; Hardware stack levels used:    1
  7847 ;; Hardware stack levels required when called:   10
  7848 ;; This function calls:
  7849 ;;		_InitUART
  7850 ;;		_ReadBaud
  7851 ;;		_UARTstringWAIT
  7852 ;;		_delayUS
  7853 ;; This function is called by:
  7854 ;;		_main
  7855 ;; This function uses a non-reentrant model
  7856 ;;
  7857                           
  7858                           
  7859                           ;psect for function _Init_System
  7860  0A51                     _Init_System:	
  7861                           
  7862                           ;user.c: 105: unsigned long temp =0;
  7863                           
  7864                           ;incstack = 0
  7865                           ; Regs used in _Init_System: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7866  0A51  3000               	movlw	0
  7867  0A52  0024               	movlb	4	; select bank4
  7868  0A53  00CB               	movwf	(Init_System@temp+3)^(0+512)
  7869  0A54  3000               	movlw	0
  7870  0A55  00CA               	movwf	(Init_System@temp+2)^(0+512)
  7871  0A56  3000               	movlw	0
  7872  0A57  00C9               	movwf	(Init_System@temp+1)^(0+512)
  7873  0A58  3000               	movlw	0
  7874  0A59  00C8               	movwf	Init_System@temp^(0+512)
  7875                           
  7876                           ;user.c: 106: unsigned long Baud =0;
  7877  0A5A  3000               	movlw	0
  7878  0A5B  00CF               	movwf	(Init_System@Baud+3)^(0+512)
  7879  0A5C  3000               	movlw	0
  7880  0A5D  00CE               	movwf	(Init_System@Baud+2)^(0+512)
  7881  0A5E  3000               	movlw	0
  7882  0A5F  00CD               	movwf	(Init_System@Baud+1)^(0+512)
  7883  0A60  3000               	movlw	0
  7884  0A61  00CC               	movwf	Init_System@Baud^(0+512)
  7885                           
  7886                           ;user.c: 107: unsigned char Parity =0;
  7887  0A62  01D0               	clrf	Init_System@Parity^(0+512)
  7888                           
  7889                           ;user.c: 109: temp = ReadBaud((0x1800 >> 5),0);
  7890  0A63  30C0               	movlw	192
  7891  0A64  00B2               	movwf	ReadBaud@row^(0+512)
  7892  0A65  3000               	movlw	0
  7893  0A66  00B3               	movwf	(ReadBaud@row^(0+512)+1)
  7894  0A67  01B4               	clrf	ReadBaud@column^(0+512)
  7895  0A68  3190  2023  318A   	fcall	_ReadBaud
  7896  0A6B  0024               	movlb	4	; select bank4
  7897  0A6C  0835               	movf	(?_ReadBaud+3)^(0+512),w
  7898  0A6D  00CB               	movwf	(Init_System@temp+3)^(0+512)
  7899  0A6E  0834               	movf	(?_ReadBaud+2)^(0+512),w
  7900  0A6F  00CA               	movwf	(Init_System@temp+2)^(0+512)
  7901  0A70  0833               	movf	(?_ReadBaud+1)^(0+512),w
  7902  0A71  00C9               	movwf	(Init_System@temp+1)^(0+512)
  7903  0A72  0832               	movf	?_ReadBaud^(0+512),w
  7904  0A73  00C8               	movwf	Init_System@temp^(0+512)
  7905                           
  7906                           ;user.c: 110: Baud = temp & 0x000FFFFF;
  7907  0A74  30FF               	movlw	255
  7908  0A75  0548               	andwf	Init_System@temp^(0+512),w
  7909  0A76  00CC               	movwf	Init_System@Baud^(0+512)
  7910  0A77  30FF               	movlw	255
  7911  0A78  0549               	andwf	(Init_System@temp+1)^(0+512),w
  7912  0A79  00CD               	movwf	(Init_System@Baud+1)^(0+512)
  7913  0A7A  300F               	movlw	15
  7914  0A7B  054A               	andwf	(Init_System@temp+2)^(0+512),w
  7915  0A7C  00CE               	movwf	(Init_System@Baud+2)^(0+512)
  7916  0A7D  3000               	movlw	0
  7917  0A7E  054B               	andwf	(Init_System@temp+3)^(0+512),w
  7918  0A7F  00CF               	movwf	(Init_System@Baud+3)^(0+512)
  7919                           
  7920                           ;user.c: 111: Parity = (unsigned char)((temp & 0x00F00000) >> 20);
  7921  0A80  0848               	movf	Init_System@temp^(0+512),w
  7922  0A81  00C3               	movwf	??_Init_System^(0+512)
  7923  0A82  0849               	movf	(Init_System@temp+1)^(0+512),w
  7924  0A83  00C4               	movwf	(??_Init_System^(0+512)+1)
  7925  0A84  084A               	movf	(Init_System@temp+2)^(0+512),w
  7926  0A85  00C5               	movwf	(??_Init_System^(0+512)+2)
  7927  0A86  084B               	movf	(Init_System@temp+3)^(0+512),w
  7928  0A87  00C6               	movwf	(??_Init_System^(0+512)+3)
  7929  0A88  3014               	movlw	20
  7930  0A89                     u9095:	
  7931  0A89  36C6               	lsrf	(??_Init_System^(0+512)+3),f
  7932  0A8A  0CC5               	rrf	(??_Init_System^(0+512)+2),f
  7933  0A8B  0CC4               	rrf	(??_Init_System^(0+512)+1),f
  7934  0A8C  0CC3               	rrf	??_Init_System^(0+512),f
  7935  0A8D  0B89               	decfsz	9,f
  7936  0A8E  2A89               	goto	u9095
  7937  0A8F  0843               	movf	??_Init_System^(0+512),w
  7938  0A90  390F               	andlw	15
  7939  0A91  00C7               	movwf	(??_Init_System+4)^(0+512)
  7940  0A92  0847               	movf	(??_Init_System+4)^(0+512),w
  7941  0A93  00D0               	movwf	Init_System@Parity^(0+512)
  7942                           
  7943                           ;user.c: 112: if(Baud <2400 || Baud > 115200)
  7944  0A94  084F               	movf	(Init_System@Baud+3)^(0+512),w
  7945  0A95  1D03               	btfss	3,2
  7946  0A96  2AA0               	goto	l6930
  7947  0A97  084E               	movf	(Init_System@Baud+2)^(0+512),w
  7948  0A98  1D03               	btfss	3,2
  7949  0A99  2AA0               	goto	l6930
  7950  0A9A  3060               	movlw	96
  7951  0A9B  024C               	subwf	Init_System@Baud^(0+512),w
  7952  0A9C  3009               	movlw	9
  7953  0A9D  3B4D               	subwfb	(Init_System@Baud+1)^(0+512),w
  7954  0A9E  1C03               	btfss	3,0
  7955  0A9F  2AAB               	goto	l6932
  7956  0AA0                     l6930:	
  7957  0AA0  084F               	movf	(Init_System@Baud+3)^(0+512),w
  7958  0AA1  1D03               	btfss	3,2
  7959  0AA2  2AAB               	goto	l6932
  7960  0AA3  3001               	movlw	1
  7961  0AA4  024C               	subwf	Init_System@Baud^(0+512),w
  7962  0AA5  30C2               	movlw	194
  7963  0AA6  3B4D               	subwfb	(Init_System@Baud+1)^(0+512),w
  7964  0AA7  3001               	movlw	1
  7965  0AA8  3B4E               	subwfb	(Init_System@Baud+2)^(0+512),w
  7966  0AA9  1C03               	btfss	3,0
  7967  0AAA  2AB4               	goto	l6936
  7968  0AAB                     l6932:	
  7969                           
  7970                           ;user.c: 113: {
  7971                           ;user.c: 115: Baud = 9600;
  7972  0AAB  3000               	movlw	0
  7973  0AAC  00CF               	movwf	(Init_System@Baud+3)^(0+512)
  7974  0AAD  3000               	movlw	0
  7975  0AAE  00CE               	movwf	(Init_System@Baud+2)^(0+512)
  7976  0AAF  3025               	movlw	37
  7977  0AB0  00CD               	movwf	(Init_System@Baud+1)^(0+512)
  7978  0AB1  3080               	movlw	128
  7979  0AB2  00CC               	movwf	Init_System@Baud^(0+512)
  7980                           
  7981                           ;user.c: 116: Parity = 0;
  7982  0AB3  01D0               	clrf	Init_System@Parity^(0+512)
  7983  0AB4                     l6936:	
  7984                           
  7985                           ;user.c: 117: }
  7986                           ;user.c: 118: InitUART(Baud, Parity);
  7987  0AB4  084F               	movf	(Init_System@Baud+3)^(0+512),w
  7988  0AB5  00B1               	movwf	(InitUART@Baud+3)^(0+512)
  7989  0AB6  084E               	movf	(Init_System@Baud+2)^(0+512),w
  7990  0AB7  00B0               	movwf	(InitUART@Baud+2)^(0+512)
  7991  0AB8  084D               	movf	(Init_System@Baud+1)^(0+512),w
  7992  0AB9  00AF               	movwf	(InitUART@Baud+1)^(0+512)
  7993  0ABA  084C               	movf	Init_System@Baud^(0+512),w
  7994  0ABB  00AE               	movwf	InitUART@Baud^(0+512)
  7995  0ABC  0850               	movf	Init_System@Parity^(0+512),w
  7996  0ABD  00C3               	movwf	??_Init_System^(0+512)
  7997  0ABE  0843               	movf	??_Init_System^(0+512),w
  7998  0ABF  00B2               	movwf	InitUART@parity^(0+512)
  7999  0AC0  3194  2441  318A   	fcall	_InitUART
  8000                           
  8001                           ;user.c: 121: delayUS(15000);
  8002  0AC3  3000               	movlw	0
  8003  0AC4  0024               	movlb	4	; select bank4
  8004  0AC5  00A3               	movwf	(delayUS@US+3)^(0+512)
  8005  0AC6  3000               	movlw	0
  8006  0AC7  00A2               	movwf	(delayUS@US+2)^(0+512)
  8007  0AC8  303A               	movlw	58
  8008  0AC9  00A1               	movwf	(delayUS@US+1)^(0+512)
  8009  0ACA  3098               	movlw	152
  8010  0ACB  00A0               	movwf	delayUS@US^(0+512)
  8011  0ACC  319B  23E8  318A   	fcall	_delayUS
  8012                           
  8013                           ;user.c: 122: UARTstringWAIT("\r\nPS/2 Keyboard to RS-232\r\n");
  8014  0ACF  3090               	movlw	low (STR_3| (0+32768))
  8015  0AD0  0024               	movlb	4	; select bank4
  8016  0AD1  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8017  0AD2  3089               	movlw	high (STR_3| (0+32768))
  8018  0AD3  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8019  0AD4  319B  2384  318A   	fcall	_UARTstringWAIT
  8020                           
  8021                           ;user.c: 123: delayUS(15000);
  8022  0AD7  3000               	movlw	0
  8023  0AD8  0024               	movlb	4	; select bank4
  8024  0AD9  00A3               	movwf	(delayUS@US+3)^(0+512)
  8025  0ADA  3000               	movlw	0
  8026  0ADB  00A2               	movwf	(delayUS@US+2)^(0+512)
  8027  0ADC  303A               	movlw	58
  8028  0ADD  00A1               	movwf	(delayUS@US+1)^(0+512)
  8029  0ADE  3098               	movlw	152
  8030  0ADF  00A0               	movwf	delayUS@US^(0+512)
  8031  0AE0  319B  23E8  318A   	fcall	_delayUS
  8032                           
  8033                           ;user.c: 124: UARTstringWAIT("Firmware Version: ");
  8034  0AE3  3013               	movlw	low (STR_4| (0+32768))
  8035  0AE4  0024               	movlb	4	; select bank4
  8036  0AE5  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8037  0AE6  308A               	movlw	high (STR_4| (0+32768))
  8038  0AE7  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8039  0AE8  319B  2384  318A   	fcall	_UARTstringWAIT
  8040                           
  8041                           ;user.c: 125: UARTstringWAIT(Version);
  8042  0AEB  3066               	movlw	low (_Version| (0+32768))
  8043  0AEC  0024               	movlb	4	; select bank4
  8044  0AED  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8045  0AEE  3089               	movlw	high (_Version| (0+32768))
  8046  0AEF  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8047  0AF0  319B  2384  318A   	fcall	_UARTstringWAIT
  8048                           
  8049                           ;user.c: 126: UARTstringWAIT("\r\n");
  8050  0AF3  30FD               	movlw	low ((STR_14+16)| (0+32768))
  8051  0AF4  0024               	movlb	4	; select bank4
  8052  0AF5  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8053  0AF6  3089               	movlw	high ((STR_14+16)| (0+32768))
  8054  0AF7  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8055  0AF8  319B  2384  318A   	fcall	_UARTstringWAIT
  8056                           
  8057                           ;user.c: 127: delayUS(15000);
  8058  0AFB  3000               	movlw	0
  8059  0AFC  0024               	movlb	4	; select bank4
  8060  0AFD  00A3               	movwf	(delayUS@US+3)^(0+512)
  8061  0AFE  3000               	movlw	0
  8062  0AFF  00A2               	movwf	(delayUS@US+2)^(0+512)
  8063  0B00  303A               	movlw	58
  8064  0B01  00A1               	movwf	(delayUS@US+1)^(0+512)
  8065  0B02  3098               	movlw	152
  8066  0B03  00A0               	movwf	delayUS@US^(0+512)
  8067  0B04  319B  23E8  318A   	fcall	_delayUS
  8068                           
  8069                           ;user.c: 128: UARTstringWAIT("Change BAUD: \"CNT + ALT + DEL\"\r\n");
  8070  0B07  306F               	movlw	low (STR_6| (0+32768))
  8071  0B08  0024               	movlb	4	; select bank4
  8072  0B09  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8073  0B0A  3089               	movlw	high (STR_6| (0+32768))
  8074  0B0B  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8075  0B0C  319B  2384  318A   	fcall	_UARTstringWAIT
  8076                           
  8077                           ;user.c: 129: delayUS(15000);
  8078  0B0F  3000               	movlw	0
  8079  0B10  0024               	movlb	4	; select bank4
  8080  0B11  00A3               	movwf	(delayUS@US+3)^(0+512)
  8081  0B12  3000               	movlw	0
  8082  0B13  00A2               	movwf	(delayUS@US+2)^(0+512)
  8083  0B14  303A               	movlw	58
  8084  0B15  00A1               	movwf	(delayUS@US+1)^(0+512)
  8085  0B16  3098               	movlw	152
  8086  0B17  00A0               	movwf	delayUS@US^(0+512)
  8087  0B18  319B  23E8  318A   	fcall	_delayUS
  8088                           
  8089                           ;user.c: 130: UARTstringWAIT("\r\n");
  8090  0B1B  30FD               	movlw	low ((STR_14+16)| (0+32768))
  8091  0B1C  0024               	movlb	4	; select bank4
  8092  0B1D  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8093  0B1E  3089               	movlw	high ((STR_14+16)| (0+32768))
  8094  0B1F  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8095  0B20  319B  2384  318A   	fcall	_UARTstringWAIT
  8096                           
  8097                           ;user.c: 132: if(Parity)
  8098  0B23  0024               	movlb	4	; select bank4
  8099  0B24  0850               	movf	Init_System@Parity^(0+512),w
  8100  0B25  1D03               	btfss	3,2
  8101  0B26  2B3B               	goto	l6972
  8102  0B27  2B48               	goto	l6974
  8103  0B28                     l6962:	
  8104                           ;user.c: 135: {
  8105                           ;user.c: 136: case 1:
  8106                           
  8107                           ;user.c: 133: {
  8108                           ;user.c: 134: switch (Parity)
  8109                           
  8110                           
  8111                           ;user.c: 137: UARTstringWAIT(OddParityMSG);
  8112  0B28  3011               	movlw	low (_OddParityMSG| (0+32768))
  8113  0B29  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8114  0B2A  3089               	movlw	high (_OddParityMSG| (0+32768))
  8115  0B2B  2B4B               	goto	L3
  8116  0B2C                     l6964:	
  8117                           ;user.c: 139: case 2:
  8118                           
  8119                           ;user.c: 138: break;
  8120                           
  8121                           
  8122                           ;user.c: 140: UARTstringWAIT(EvenParityMSG);
  8123  0B2C  30FB               	movlw	low (_EvenParityMSG| (0+32768))
  8124  0B2D  0024               	movlb	4	; select bank4
  8125  0B2E  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8126  0B2F  3088               	movlw	high (_EvenParityMSG| (0+32768))
  8127  0B30  2B4B               	goto	L3
  8128  0B31                     l6966:	
  8129                           ;user.c: 142: case 3:
  8130                           
  8131                           ;user.c: 141: break;
  8132                           
  8133                           
  8134                           ;user.c: 143: UARTstringWAIT(MarkParityMSG);
  8135  0B31  304A               	movlw	low (_MarkParityMSG| (0+32768))
  8136  0B32  0024               	movlb	4	; select bank4
  8137  0B33  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8138  0B34  3089               	movlw	high (_MarkParityMSG| (0+32768))
  8139  0B35  2B4B               	goto	L3
  8140  0B36                     l6968:	
  8141                           ;user.c: 145: default:
  8142                           
  8143                           ;user.c: 144: break;
  8144                           
  8145                           
  8146                           ;user.c: 146: UARTstringWAIT(SpaceParityMSG);
  8147  0B36  303A               	movlw	low (_SpaceParityMSG| (0+32768))
  8148  0B37  0024               	movlb	4	; select bank4
  8149  0B38  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8150  0B39  3089               	movlw	high (_SpaceParityMSG| (0+32768))
  8151  0B3A  2B4B               	goto	L3
  8152  0B3B                     l6972:	
  8153                           ;user.c: 148: }
  8154                           
  8155                           ;user.c: 147: break;
  8156                           
  8157  0B3B  0024               	movlb	4	; select bank4
  8158  0B3C  0850               	movf	Init_System@Parity^(0+512),w
  8159                           
  8160                           ; Switch size 1, requested type "space"
  8161                           ; Number of cases is 3, Range of values is 1 to 3
  8162                           ; switch strategies available:
  8163                           ; Name         Instructions Cycles
  8164                           ; simple_byte           10     6 (average)
  8165                           ; direct_byte           15     9 (fixed)
  8166                           ; jumptable            263     9 (fixed)
  8167                           ;	Chosen strategy is simple_byte
  8168  0B3D  3A01               	xorlw	1	; case 1
  8169  0B3E  1903               	skipnz
  8170  0B3F  2B28               	goto	l6962
  8171  0B40  3A03               	xorlw	3	; case 2
  8172  0B41  1903               	skipnz
  8173  0B42  2B2C               	goto	l6964
  8174  0B43  3A01               	xorlw	1	; case 3
  8175  0B44  1903               	skipnz
  8176  0B45  2B31               	goto	l6966
  8177  0B46  2B36               	goto	l6968
  8178                           
  8179                           ;user.c: 149: }
  8180  0B47  2B4F               	goto	l276
  8181  0B48                     l6974:	
  8182                           
  8183                           ;user.c: 150: else
  8184                           ;user.c: 151: {
  8185                           ;user.c: 152: UARTstringWAIT(NoParityMSG);
  8186  0B48  3026               	movlw	low (_NoParityMSG| (0+32768))
  8187  0B49  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8188  0B4A  3089               	movlw	high (_NoParityMSG| (0+32768))
  8189  0B4B                     L3:	
  8190  0B4B  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8191  0B4C  319B  2384  318A   	fcall	_UARTstringWAIT
  8192  0B4F                     l276:	
  8193                           
  8194                           ;user.c: 153: }
  8195                           ;user.c: 154: UARTstringWAIT("\r\n");
  8196  0B4F  30FD               	movlw	low ((STR_14+16)| (0+32768))
  8197  0B50  0024               	movlb	4	; select bank4
  8198  0B51  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8199  0B52  3089               	movlw	high ((STR_14+16)| (0+32768))
  8200  0B53  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8201  0B54  319B  2384  318A   	fcall	_UARTstringWAIT
  8202                           
  8203                           ;user.c: 155: delayUS(15000);
  8204  0B57  3000               	movlw	0
  8205  0B58  0024               	movlb	4	; select bank4
  8206  0B59  00A3               	movwf	(delayUS@US+3)^(0+512)
  8207  0B5A  3000               	movlw	0
  8208  0B5B  00A2               	movwf	(delayUS@US+2)^(0+512)
  8209  0B5C  303A               	movlw	58
  8210  0B5D  00A1               	movwf	(delayUS@US+1)^(0+512)
  8211  0B5E  3098               	movlw	152
  8212  0B5F  00A0               	movwf	delayUS@US^(0+512)
  8213  0B60  319B  23E8         	fcall	_delayUS
  8214                           
  8215                           ;user.c: 156: INTCON |= 0x08;
  8216  0B62  158B               	bsf	11,3	;volatile
  8217                           
  8218                           ;user.c: 157: INTCONbits.GIE = 1;
  8219  0B63  178B               	bsf	11,7	;volatile
  8220  0B64  0008               	return
  8221  0B65                     __end_of_Init_System:	
  8222                           
  8223                           	psect	text20
  8224  1B84                     __ptext20:	
  8225 ;; *************** function _UARTstringWAIT *****************
  8226 ;; Defined at:
  8227 ;;		line 366 in file "UART.c"
  8228 ;; Parameters:    Size  Location     Type
  8229 ;;  data            2   15[BANK4 ] PTR const unsigned char 
  8230 ;;		 -> STR_20(20), STR_19(3), Process_PS2_ScanCode@buf(60), STR_17(3), 
  8231 ;;		 -> STR_16(3), STR_15(19), STR_14(19), STR_13(3), 
  8232 ;;		 -> STR_12(3), SetBaud@buf(50), STR_10(21), STR_9(3), 
  8233 ;;		 -> STR_8(3), NoParityMSG(20), SpaceParityMSG(16), MarkParityMSG(15), 
  8234 ;;		 -> EvenParityMSG(22), OddParityMSG(21), STR_7(3), STR_6(33), 
  8235 ;;		 -> STR_5(3), Version(9), STR_4(19), STR_3(28), 
  8236 ;;		 -> STR_2(8), STR_1(7), VoltageMSG(13), 
  8237 ;; Auto vars:     Size  Location     Type
  8238 ;;		None
  8239 ;; Return value:  Size  Location     Type
  8240 ;;		None               void
  8241 ;; Registers used:
  8242 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8243 ;; Tracked objects:
  8244 ;;		On entry : 0/0
  8245 ;;		On exit  : 0/0
  8246 ;;		Unchanged: 0/0
  8247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8248 ;;      Params:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  8249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8250 ;;      Temps:          0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  8251 ;;      Totals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  8252 ;;Total ram usage:        5 bytes
  8253 ;; Hardware stack levels used:    1
  8254 ;; Hardware stack levels required when called:    9
  8255 ;; This function calls:
  8256 ;;		_UARTchar
  8257 ;;		_delayUS
  8258 ;; This function is called by:
  8259 ;;		_main
  8260 ;;		_Init_System
  8261 ;; This function uses a non-reentrant model
  8262 ;;
  8263                           
  8264                           
  8265                           ;psect for function _UARTstringWAIT
  8266  1B84                     _UARTstringWAIT:	
  8267  1B84                     l472:	
  8268                           ;incstack = 0
  8269                           ; Regs used in _UARTstringWAIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8270                           ;UART.c: 368: do
  8271                           
  8272                           
  8273                           ;UART.c: 369: {
  8274                           ;UART.c: 370: delayUS(5000);
  8275  1B84  3000               	movlw	0
  8276  1B85  0024               	movlb	4	; select bank4
  8277  1B86  00A3               	movwf	(delayUS@US+3)^(0+512)
  8278  1B87  3000               	movlw	0
  8279  1B88  00A2               	movwf	(delayUS@US+2)^(0+512)
  8280  1B89  3013               	movlw	19
  8281  1B8A  00A1               	movwf	(delayUS@US+1)^(0+512)
  8282  1B8B  3088               	movlw	136
  8283  1B8C  00A0               	movwf	delayUS@US^(0+512)
  8284  1B8D  319B  23E8  319B   	fcall	_delayUS
  8285                           
  8286                           ;UART.c: 371: if(*data != 0)
  8287  1B90  0024               	movlb	4	; select bank4
  8288  1B91  082F               	movf	UARTstringWAIT@data^(0+512),w
  8289  1B92  0084               	movwf	4
  8290  1B93  0830               	movf	(UARTstringWAIT@data+1)^(0+512),w
  8291  1B94  0085               	movwf	5
  8292  1B95  0012               	moviw fsr0++
  8293  1B96  1903               	btfsc	3,2
  8294  1B97  2BA5               	goto	l6630
  8295                           
  8296                           ;UART.c: 372: {
  8297                           ;UART.c: 373: UARTchar(*data, 0, 0);
  8298  1B98  01A8               	clrf	UARTchar@override^(0+512)
  8299  1B99  01A9               	clrf	UARTchar@NinethBit_override_data^(0+512)
  8300  1B9A  082F               	movf	UARTstringWAIT@data^(0+512),w
  8301  1B9B  0084               	movwf	4
  8302  1B9C  0830               	movf	(UARTstringWAIT@data+1)^(0+512),w
  8303  1B9D  0085               	movwf	5
  8304  1B9E  0800               	movf	0,w	;code access
  8305  1B9F  3190  20E8  319B   	fcall	_UARTchar
  8306  1BA2                     l474:	
  8307                           ;UART.c: 374: while((!TX1STAbits.TRMT));
  8308                           
  8309  1BA2  0023               	movlb	3	; select bank3
  8310  1BA3  1C9E               	btfss	30,1	;volatile
  8311  1BA4  2BA2               	goto	l474
  8312  1BA5                     l6630:	
  8313                           
  8314                           ;UART.c: 375: }
  8315                           ;UART.c: 376: } while( *data++);
  8316  1BA5  0024               	movlb	4	; select bank4
  8317  1BA6  0830               	movf	(UARTstringWAIT@data+1)^(0+512),w
  8318  1BA7  00B2               	movwf	(??_UARTstringWAIT^(0+512)+1)
  8319  1BA8  082F               	movf	UARTstringWAIT@data^(0+512),w
  8320  1BA9  00B1               	movwf	??_UARTstringWAIT^(0+512)
  8321  1BAA  0AAF               	incf	UARTstringWAIT@data^(0+512),f
  8322  1BAB  1903               	skipnz
  8323  1BAC  0AB0               	incf	(UARTstringWAIT@data+1)^(0+512),f
  8324  1BAD  0831               	movf	??_UARTstringWAIT^(0+512),w
  8325  1BAE  0084               	movwf	4
  8326  1BAF  0832               	movf	(??_UARTstringWAIT+1)^(0+512),w
  8327  1BB0  0085               	movwf	5
  8328  1BB1  0012               	moviw fsr0++
  8329  1BB2  1903               	btfsc	3,2
  8330  1BB3  0008               	return
  8331  1BB4  2B84               	goto	l472
  8332  1BB5                     __end_of_UARTstringWAIT:	
  8333                           
  8334                           	psect	text21
  8335  1BE8                     __ptext21:	
  8336 ;; *************** function _delayUS *****************
  8337 ;; Defined at:
  8338 ;;		line 51 in file "MISC.c"
  8339 ;; Parameters:    Size  Location     Type
  8340 ;;  US              4    0[BANK4 ] long 
  8341 ;; Auto vars:     Size  Location     Type
  8342 ;;  i               4    5[BANK4 ] long 
  8343 ;;  j               1    9[BANK4 ] unsigned char 
  8344 ;; Return value:  Size  Location     Type
  8345 ;;		None               void
  8346 ;; Registers used:
  8347 ;;		wreg, status,2, status,0
  8348 ;; Tracked objects:
  8349 ;;		On entry : 0/0
  8350 ;;		On exit  : 0/0
  8351 ;;		Unchanged: 0/0
  8352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8353 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8354 ;;      Locals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  8355 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  8356 ;;      Totals:         0       0       0       0       0      10       0       0       0       0       0       0       
      +0       0
  8357 ;;Total ram usage:       10 bytes
  8358 ;; Hardware stack levels used:    1
  8359 ;; Hardware stack levels required when called:    7
  8360 ;; This function calls:
  8361 ;;		Nothing
  8362 ;; This function is called by:
  8363 ;;		_main
  8364 ;;		_Init_System
  8365 ;;		_UARTstringWAIT
  8366 ;;		_Send_PS2
  8367 ;;		_Init_PS_2_Send
  8368 ;;		_InternalADC_Read
  8369 ;;		_Keyboard_Connected
  8370 ;; This function uses a non-reentrant model
  8371 ;;
  8372                           
  8373                           
  8374                           ;psect for function _delayUS
  8375  1BE8                     _delayUS:	
  8376                           
  8377                           ;MISC.c: 53: long i;
  8378                           ;MISC.c: 54: unsigned char j;
  8379                           ;MISC.c: 55: for(i=0;i<US;i+=6)
  8380                           
  8381                           ;incstack = 0
  8382                           ; Regs used in _delayUS: [wreg+status,2+status,0]
  8383  1BE8  3000               	movlw	0
  8384  1BE9  0024               	movlb	4	; select bank4
  8385  1BEA  00A8               	movwf	(delayUS@i+3)^(0+512)
  8386  1BEB  3000               	movlw	0
  8387  1BEC  00A7               	movwf	(delayUS@i+2)^(0+512)
  8388  1BED  3000               	movlw	0
  8389  1BEE  00A6               	movwf	(delayUS@i+1)^(0+512)
  8390  1BEF  3000               	movlw	0
  8391  1BF0  00A5               	movwf	delayUS@i^(0+512)
  8392  1BF1                     l284:	
  8393  1BF1  0828               	movf	(delayUS@i+3)^(0+512),w
  8394  1BF2  3A80               	xorlw	128
  8395  1BF3  00A4               	movwf	??_delayUS^(0+512)
  8396  1BF4  0823               	movf	(delayUS@US+3)^(0+512),w
  8397  1BF5  3A80               	xorlw	128
  8398  1BF6  0224               	subwf	??_delayUS^(0+512),w
  8399  1BF7  1D03               	skipz
  8400  1BF8  2C03               	goto	u7973
  8401  1BF9  0822               	movf	(delayUS@US+2)^(0+512),w
  8402  1BFA  0227               	subwf	(delayUS@i+2)^(0+512),w
  8403  1BFB  1D03               	skipz
  8404  1BFC  2C03               	goto	u7973
  8405  1BFD  0821               	movf	(delayUS@US+1)^(0+512),w
  8406  1BFE  0226               	subwf	(delayUS@i+1)^(0+512),w
  8407  1BFF  1D03               	skipz
  8408  1C00  2C03               	goto	u7973
  8409  1C01  0820               	movf	delayUS@US^(0+512),w
  8410  1C02  0225               	subwf	delayUS@i^(0+512),w
  8411  1C03                     u7973:	
  8412  1C03  1803               	btfsc	3,0
  8413  1C04  0008               	return
  8414                           
  8415                           ;MISC.c: 56: {
  8416                           ;MISC.c: 57: for(j=0;j<32;j++)
  8417  1C05  01A9               	clrf	delayUS@j^(0+512)
  8418  1C06  3020               	movlw	32
  8419  1C07  0229               	subwf	delayUS@j^(0+512),w
  8420  1C08  1803               	btfsc	3,0
  8421  1C09  2C14               	goto	l6268
  8422  1C0A                     l286:	
  8423                           
  8424                           ;MISC.c: 58: {
  8425                           ;MISC.c: 59: __nop();
  8426  1C0A  0000               	nop
  8427  1C0B  3001               	movlw	1
  8428  1C0C  0024               	movlb	4	; select bank4
  8429  1C0D  00A4               	movwf	??_delayUS^(0+512)
  8430  1C0E  0824               	movf	??_delayUS^(0+512),w
  8431  1C0F  07A9               	addwf	delayUS@j^(0+512),f
  8432  1C10  3020               	movlw	32
  8433  1C11  0229               	subwf	delayUS@j^(0+512),w
  8434  1C12  1C03               	skipc
  8435  1C13  2C0A               	goto	l286
  8436  1C14                     l6268:	
  8437  1C14  3006               	movlw	6
  8438  1C15  07A5               	addwf	delayUS@i^(0+512),f
  8439  1C16  3000               	movlw	0
  8440  1C17  3DA6               	addwfc	(delayUS@i+1)^(0+512),f
  8441  1C18  3000               	movlw	0
  8442  1C19  3DA7               	addwfc	(delayUS@i+2)^(0+512),f
  8443  1C1A  3000               	movlw	0
  8444  1C1B  3DA8               	addwfc	(delayUS@i+3)^(0+512),f
  8445  1C1C  2BF1               	goto	l284
  8446  1C1D                     __end_of_delayUS:	
  8447                           
  8448                           	psect	text22
  8449  10E8                     __ptext22:	
  8450 ;; *************** function _UARTchar *****************
  8451 ;; Defined at:
  8452 ;;		line 235 in file "UART.c"
  8453 ;; Parameters:    Size  Location     Type
  8454 ;;  data            1    wreg     unsigned char 
  8455 ;;  override        1    8[BANK4 ] unsigned char 
  8456 ;;  NinethBit_ov    1    9[BANK4 ] unsigned char 
  8457 ;; Auto vars:     Size  Location     Type
  8458 ;;  data            1   14[BANK4 ] unsigned char 
  8459 ;; Return value:  Size  Location     Type
  8460 ;;		None               void
  8461 ;; Registers used:
  8462 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8463 ;; Tracked objects:
  8464 ;;		On entry : 0/0
  8465 ;;		On exit  : 0/0
  8466 ;;		Unchanged: 0/0
  8467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8468 ;;      Params:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  8469 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  8470 ;;      Temps:          0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8471 ;;      Totals:         0       0       0       0       0       7       0       0       0       0       0       0       
      +0       0
  8472 ;;Total ram usage:        7 bytes
  8473 ;; Hardware stack levels used:    1
  8474 ;; Hardware stack levels required when called:    8
  8475 ;; This function calls:
  8476 ;;		_CheckSum_byte
  8477 ;; This function is called by:
  8478 ;;		_UARTstringWAIT
  8479 ;;		_UARTstring
  8480 ;; This function uses a non-reentrant model
  8481 ;;
  8482                           
  8483                           
  8484                           ;psect for function _UARTchar
  8485  10E8                     _UARTchar:	
  8486                           
  8487                           ;incstack = 0
  8488                           ; Regs used in _UARTchar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8489                           ;UARTchar@data stored from wreg
  8490  10E8  0024               	movlb	4	; select bank4
  8491  10E9  00AE               	movwf	UARTchar@data^(0+512)
  8492                           
  8493                           ;UART.c: 237: if(TXSTAbits.TX9)
  8494  10EA  0023               	movlb	3	; select bank3
  8495  10EB  1F1E               	btfss	30,6	;volatile
  8496  10EC  2931               	goto	l430
  8497                           
  8498                           ;UART.c: 238: {
  8499                           ;UART.c: 240: if(!override)
  8500  10ED  0024               	movlb	4	; select bank4
  8501  10EE  0828               	movf	UARTchar@override^(0+512),w
  8502  10EF  1903               	btfsc	3,2
  8503  10F0  2919               	goto	l6348
  8504  10F1  2926               	goto	l6350
  8505  10F2                     l6342:	
  8506                           ;UART.c: 244: {
  8507                           ;UART.c: 245: case 1:
  8508                           
  8509                           ;UART.c: 241: {
  8510                           ;UART.c: 243: switch (PARITY)
  8511                           
  8512                           
  8513                           ;UART.c: 246: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 3);
  8514  10F2  082E               	movf	UARTchar@data^(0+512),w
  8515  10F3  00AA               	movwf	??_UARTchar^(0+512)
  8516  10F4  01AB               	clrf	(??_UARTchar^(0+512)+1)
  8517  10F5  082A               	movf	??_UARTchar^(0+512),w
  8518  10F6  00A0               	movwf	CheckSum_byte@This^(0+512)
  8519  10F7  082B               	movf	(??_UARTchar+1)^(0+512),w
  8520  10F8  00A1               	movwf	(CheckSum_byte@This+1)^(0+512)
  8521  10F9  3003               	movlw	3
  8522  10FA  2904               	goto	L6
  8523  10FB                     l6344:	
  8524                           ;UART.c: 248: case 2:
  8525                           
  8526                           ;UART.c: 247: break;
  8527                           
  8528                           
  8529                           ;UART.c: 249: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 2);
  8530  10FB  0024               	movlb	4	; select bank4
  8531  10FC  082E               	movf	UARTchar@data^(0+512),w
  8532  10FD  00AA               	movwf	??_UARTchar^(0+512)
  8533  10FE  01AB               	clrf	(??_UARTchar^(0+512)+1)
  8534  10FF  082A               	movf	??_UARTchar^(0+512),w
  8535  1100  00A0               	movwf	CheckSum_byte@This^(0+512)
  8536  1101  082B               	movf	(??_UARTchar+1)^(0+512),w
  8537  1102  00A1               	movwf	(CheckSum_byte@This+1)^(0+512)
  8538  1103  3002               	movlw	2
  8539  1104                     L6:	
  8540  1104  00AC               	movwf	(??_UARTchar+2)^(0+512)
  8541  1105  082C               	movf	(??_UARTchar+2)^(0+512),w
  8542  1106  00A2               	movwf	CheckSum_byte@Odd_Even^(0+512)
  8543  1107  319A  22F5  3190   	fcall	_CheckSum_byte
  8544  110A  0024               	movlb	4	; select bank4
  8545  110B  00AD               	movwf	(??_UARTchar+3)^(0+512)
  8546  110C  0023               	movlb	3	; select bank3
  8547  110D  081E               	movf	30,w	;volatile
  8548  110E  0024               	movlb	4	; select bank4
  8549  110F  062D               	xorwf	(??_UARTchar+3)^(0+512),w
  8550  1110  39FE               	andlw	-2
  8551  1111  062D               	xorwf	(??_UARTchar+3)^(0+512),w
  8552  1112  292F               	goto	L5
  8553  1113                     l436:	
  8554                           ;UART.c: 251: case 3:
  8555                           
  8556                           ;UART.c: 250: break;
  8557                           
  8558                           
  8559                           ;UART.c: 252: TXSTAbits.TX9D = 1;
  8560  1113  0023               	movlb	3	; select bank3
  8561  1114  141E               	bsf	30,0	;volatile
  8562                           
  8563                           ;UART.c: 253: break;
  8564  1115  2931               	goto	l430
  8565  1116                     l437:	
  8566                           ;UART.c: 254: default:
  8567                           
  8568                           
  8569                           ;UART.c: 255: TXSTAbits.TX9D = 0;
  8570  1116  0023               	movlb	3	; select bank3
  8571  1117  101E               	bcf	30,0	;volatile
  8572                           
  8573                           ;UART.c: 257: }
  8574                           
  8575                           ;UART.c: 256: break;
  8576  1118  2931               	goto	l430
  8577  1119                     l6348:	
  8578  1119  0024               	movlb	4	; select bank4
  8579  111A  0861               	movf	_PARITY^(0+512),w
  8580                           
  8581                           ; Switch size 1, requested type "space"
  8582                           ; Number of cases is 3, Range of values is 1 to 3
  8583                           ; switch strategies available:
  8584                           ; Name         Instructions Cycles
  8585                           ; simple_byte           10     6 (average)
  8586                           ; direct_byte           15     9 (fixed)
  8587                           ; jumptable            263     9 (fixed)
  8588                           ;	Chosen strategy is simple_byte
  8589  111B  3A01               	xorlw	1	; case 1
  8590  111C  1903               	skipnz
  8591  111D  28F2               	goto	l6342
  8592  111E  3A03               	xorlw	3	; case 2
  8593  111F  1903               	skipnz
  8594  1120  28FB               	goto	l6344
  8595  1121  3A01               	xorlw	1	; case 3
  8596  1122  1903               	skipnz
  8597  1123  2913               	goto	l436
  8598  1124  2916               	goto	l437
  8599                           
  8600                           ;UART.c: 258: }
  8601  1125  2931               	goto	l430
  8602  1126                     l6350:	
  8603                           
  8604                           ;UART.c: 259: else
  8605                           ;UART.c: 260: {
  8606                           ;UART.c: 261: TXSTAbits.TX9D = (NinethBit_override_data & 0x01);
  8607  1126  3001               	movlw	1
  8608  1127  0529               	andwf	UARTchar@NinethBit_override_data^(0+512),w
  8609  1128  00AA               	movwf	??_UARTchar^(0+512)
  8610  1129  0023               	movlb	3	; select bank3
  8611  112A  081E               	movf	30,w	;volatile
  8612  112B  0024               	movlb	4	; select bank4
  8613  112C  062A               	xorwf	??_UARTchar^(0+512),w
  8614  112D  39FE               	andlw	-2
  8615  112E  062A               	xorwf	??_UARTchar^(0+512),w
  8616  112F                     L5:	
  8617  112F  0023               	movlb	3	; select bank3
  8618  1130  009E               	movwf	30	;volatile
  8619  1131                     l430:	
  8620                           
  8621                           ;UART.c: 262: }
  8622                           ;UART.c: 263: }
  8623                           ;UART.c: 265: if(data == '\n')
  8624  1131  300A               	movlw	10
  8625  1132  0024               	movlb	4	; select bank4
  8626  1133  062E               	xorwf	UARTchar@data^(0+512),w
  8627  1134  1D03               	btfss	3,2
  8628  1135  2945               	goto	l447
  8629                           
  8630                           ;UART.c: 266: {
  8631                           ;UART.c: 267: if(override || LineOverride)
  8632  1136  0828               	movf	UARTchar@override^(0+512),w
  8633  1137  1903               	btfsc	3,2
  8634  1138  0860               	movf	_LineOverride^(0+512),w
  8635  1139  1903               	btfsc	3,2
  8636  113A  0008               	return
  8637  113B                     l443:	
  8638                           ;UART.c: 268: {
  8639                           ;UART.c: 269: while(!TXSTAbits.TRMT);
  8640                           
  8641  113B  0023               	movlb	3	; select bank3
  8642  113C  1C9E               	btfss	30,1	;volatile
  8643  113D  293B               	goto	l443
  8644                           
  8645                           ;UART.c: 270: TXREG = data;
  8646  113E  0024               	movlb	4	; select bank4
  8647  113F  082E               	movf	UARTchar@data^(0+512),w
  8648  1140  0023               	movlb	3	; select bank3
  8649  1141  009A               	movwf	26	;volatile
  8650                           
  8651                           ;UART.c: 271: LineOverride = 0;
  8652  1142  0024               	movlb	4	; select bank4
  8653  1143  01E0               	clrf	_LineOverride^(0+512)
  8654                           
  8655                           ;UART.c: 272: }
  8656                           ;UART.c: 273: }
  8657  1144  0008               	return
  8658  1145                     l447:	
  8659                           ;UART.c: 274: else
  8660                           ;UART.c: 275: {
  8661                           ;UART.c: 276: while(!TXSTAbits.TRMT);
  8662                           
  8663  1145  0023               	movlb	3	; select bank3
  8664  1146  1C9E               	btfss	30,1	;volatile
  8665  1147  2945               	goto	l447
  8666                           
  8667                           ;UART.c: 277: TXREG = data;
  8668  1148  0024               	movlb	4	; select bank4
  8669  1149  082E               	movf	UARTchar@data^(0+512),w
  8670  114A  0023               	movlb	3	; select bank3
  8671  114B  009A               	movwf	26	;volatile
  8672  114C  0008               	return
  8673  114D                     __end_of_UARTchar:	
  8674                           
  8675                           	psect	text23
  8676  1AF5                     __ptext23:	
  8677 ;; *************** function _CheckSum_byte *****************
  8678 ;; Defined at:
  8679 ;;		line 71 in file "MISC.c"
  8680 ;; Parameters:    Size  Location     Type
  8681 ;;  This            2    0[BANK4 ] unsigned int 
  8682 ;;  Odd_Even        1    2[BANK4 ] unsigned char 
  8683 ;; Auto vars:     Size  Location     Type
  8684 ;;  ThisTemp        2    4[BANK4 ] unsigned int 
  8685 ;;  i               1    7[BANK4 ] unsigned char 
  8686 ;;  Parity          1    6[BANK4 ] unsigned char 
  8687 ;; Return value:  Size  Location     Type
  8688 ;;                  1    wreg      unsigned char 
  8689 ;; Registers used:
  8690 ;;		wreg, status,2, status,0
  8691 ;; Tracked objects:
  8692 ;;		On entry : 0/0
  8693 ;;		On exit  : 0/0
  8694 ;;		Unchanged: 0/0
  8695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8696 ;;      Params:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  8697 ;;      Locals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8698 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  8699 ;;      Totals:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  8700 ;;Total ram usage:        8 bytes
  8701 ;; Hardware stack levels used:    1
  8702 ;; Hardware stack levels required when called:    7
  8703 ;; This function calls:
  8704 ;;		Nothing
  8705 ;; This function is called by:
  8706 ;;		_UARTchar
  8707 ;;		_Send_PS2
  8708 ;; This function uses a non-reentrant model
  8709 ;;
  8710                           
  8711                           
  8712                           ;psect for function _CheckSum_byte
  8713  1AF5                     _CheckSum_byte:	
  8714                           
  8715                           ;MISC.c: 73: char i = 0;
  8716                           
  8717                           ;incstack = 0
  8718                           ; Regs used in _CheckSum_byte: [wreg+status,2+status,0]
  8719  1AF5  0024               	movlb	4	; select bank4
  8720  1AF6  01A7               	clrf	CheckSum_byte@i^(0+512)
  8721                           
  8722                           ;MISC.c: 74: unsigned char Parity = 0;
  8723  1AF7  01A6               	clrf	CheckSum_byte@Parity^(0+512)
  8724                           
  8725                           ;MISC.c: 75: unsigned int ThisTemp = This;
  8726  1AF8  0821               	movf	(CheckSum_byte@This+1)^(0+512),w
  8727  1AF9  00A5               	movwf	(CheckSum_byte@ThisTemp+1)^(0+512)
  8728  1AFA  0820               	movf	CheckSum_byte@This^(0+512),w
  8729  1AFB  00A4               	movwf	CheckSum_byte@ThisTemp^(0+512)
  8730                           
  8731                           ;MISC.c: 77: for (i =0; i<8; i++)
  8732  1AFC  01A7               	clrf	CheckSum_byte@i^(0+512)
  8733  1AFD  3008               	movlw	8
  8734  1AFE  0227               	subwf	CheckSum_byte@i^(0+512),w
  8735  1AFF  1803               	btfsc	3,0
  8736  1B00  2B14               	goto	l6282
  8737  1B01                     l292:	
  8738                           
  8739                           ;MISC.c: 78: {
  8740                           ;MISC.c: 79: if((ThisTemp & 0x01) == 1)
  8741  1B01  1C24               	btfss	CheckSum_byte@ThisTemp^(0+512),0
  8742  1B02  2B07               	goto	l294
  8743                           
  8744                           ;MISC.c: 80: {
  8745                           ;MISC.c: 81: Parity++;
  8746  1B03  3001               	movlw	1
  8747  1B04  00A3               	movwf	??_CheckSum_byte^(0+512)
  8748  1B05  0823               	movf	??_CheckSum_byte^(0+512),w
  8749  1B06  07A6               	addwf	CheckSum_byte@Parity^(0+512),f
  8750  1B07                     l294:	
  8751                           
  8752                           ;MISC.c: 82: }
  8753                           ;MISC.c: 83: ThisTemp >>= 1;
  8754  1B07  3001               	movlw	1
  8755  1B08                     u8005:	
  8756  1B08  36A5               	lsrf	(CheckSum_byte@ThisTemp+1)^(0+512),f
  8757  1B09  0CA4               	rrf	CheckSum_byte@ThisTemp^(0+512),f
  8758  1B0A  0B89               	decfsz	9,f
  8759  1B0B  2B08               	goto	u8005
  8760  1B0C  3001               	movlw	1
  8761  1B0D  00A3               	movwf	??_CheckSum_byte^(0+512)
  8762  1B0E  0823               	movf	??_CheckSum_byte^(0+512),w
  8763  1B0F  07A7               	addwf	CheckSum_byte@i^(0+512),f
  8764  1B10  3008               	movlw	8
  8765  1B11  0227               	subwf	CheckSum_byte@i^(0+512),w
  8766  1B12  1C03               	skipc
  8767  1B13  2B01               	goto	l292
  8768  1B14                     l6282:	
  8769                           
  8770                           ;MISC.c: 84: }
  8771                           ;MISC.c: 85: if(Odd_Even == 3)
  8772  1B14  3003               	movlw	3
  8773  1B15  0622               	xorwf	CheckSum_byte@Odd_Even^(0+512),w
  8774  1B16  1D03               	btfss	3,2
  8775  1B17  2B1E               	goto	l295
  8776                           
  8777                           ;MISC.c: 86: {
  8778                           ;MISC.c: 87: if(Parity % 2 == 0)
  8779  1B18  1826               	btfsc	CheckSum_byte@Parity^(0+512),0
  8780  1B19  2B1C               	goto	l6290
  8781                           
  8782                           ;MISC.c: 88: {
  8783                           ;MISC.c: 89: return 1;
  8784  1B1A  3001               	movlw	1
  8785  1B1B  0008               	return
  8786  1B1C                     l6290:	
  8787                           
  8788                           ;MISC.c: 90: }
  8789                           ;MISC.c: 91: return 0;
  8790  1B1C  3000               	movlw	0
  8791                           
  8792                           ;MISC.c: 92: }
  8793  1B1D  0008               	return
  8794  1B1E                     l295:	
  8795                           
  8796                           ;MISC.c: 93: else
  8797                           ;MISC.c: 94: {
  8798                           ;MISC.c: 95: if(Parity % 2 == 1)
  8799  1B1E  1C26               	btfss	CheckSum_byte@Parity^(0+512),0
  8800  1B1F  2B22               	goto	l6300
  8801                           
  8802                           ;MISC.c: 96: {
  8803                           ;MISC.c: 97: return 1;
  8804  1B20  3001               	movlw	1
  8805  1B21  0008               	return
  8806  1B22                     l6300:	
  8807                           
  8808                           ;MISC.c: 98: }
  8809                           ;MISC.c: 99: return 0;
  8810  1B22  3000               	movlw	0
  8811  1B23  0008               	return
  8812  1B24                     __end_of_CheckSum_byte:	
  8813                           
  8814                           	psect	text24
  8815  1023                     __ptext24:	
  8816 ;; *************** function _ReadBaud *****************
  8817 ;; Defined at:
  8818 ;;		line 187 in file "FLASH.c"
  8819 ;; Parameters:    Size  Location     Type
  8820 ;;  row             2   18[BANK4 ] unsigned int 
  8821 ;;  column          1   20[BANK4 ] unsigned char 
  8822 ;; Auto vars:     Size  Location     Type
  8823 ;;  temp            4   30[BANK4 ] unsigned long 
  8824 ;; Return value:  Size  Location     Type
  8825 ;;                  4   18[BANK4 ] unsigned long 
  8826 ;; Registers used:
  8827 ;;		wreg, status,2, status,0, pclath, cstack
  8828 ;; Tracked objects:
  8829 ;;		On entry : 0/0
  8830 ;;		On exit  : 0/0
  8831 ;;		Unchanged: 0/0
  8832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8833 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8834 ;;      Locals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8835 ;;      Temps:          0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  8836 ;;      Totals:         0       0       0       0       0      16       0       0       0       0       0       0       
      +0       0
  8837 ;;Total ram usage:       16 bytes
  8838 ;; Hardware stack levels used:    1
  8839 ;; Hardware stack levels required when called:    9
  8840 ;; This function calls:
  8841 ;;		_ReadFlash_4Byte
  8842 ;; This function is called by:
  8843 ;;		_Init_System
  8844 ;; This function uses a non-reentrant model
  8845 ;;
  8846                           
  8847                           
  8848                           ;psect for function _ReadBaud
  8849  1023                     _ReadBaud:	
  8850                           
  8851                           ;FLASH.c: 189: unsigned long temp;
  8852                           ;FLASH.c: 190: temp =(ReadFlash_4Byte(row, column));
  8853                           
  8854                           ;incstack = 0
  8855                           ; Regs used in _ReadBaud: [wreg+status,2+status,0+pclath+cstack]
  8856  1023  0024               	movlb	4	; select bank4
  8857  1024  0833               	movf	(ReadBaud@row+1)^(0+512),w
  8858  1025  00A6               	movwf	(ReadFlash_4Byte@row+1)^(0+512)
  8859  1026  0832               	movf	ReadBaud@row^(0+512),w
  8860  1027  00A5               	movwf	ReadFlash_4Byte@row^(0+512)
  8861  1028  0834               	movf	ReadBaud@column^(0+512),w
  8862  1029  00B6               	movwf	??_ReadBaud^(0+512)
  8863  102A  0836               	movf	??_ReadBaud^(0+512),w
  8864  102B  00A7               	movwf	ReadFlash_4Byte@column^(0+512)
  8865  102C  319D  25AD  3190   	fcall	_ReadFlash_4Byte
  8866  102F  0024               	movlb	4	; select bank4
  8867  1030  0828               	movf	(?_ReadFlash_4Byte+3)^(0+512),w
  8868  1031  00C1               	movwf	(ReadBaud@temp+3)^(0+512)
  8869  1032  0827               	movf	(?_ReadFlash_4Byte+2)^(0+512),w
  8870  1033  00C0               	movwf	(ReadBaud@temp+2)^(0+512)
  8871  1034  0826               	movf	(?_ReadFlash_4Byte+1)^(0+512),w
  8872  1035  00BF               	movwf	(ReadBaud@temp+1)^(0+512)
  8873  1036  0825               	movf	?_ReadFlash_4Byte^(0+512),w
  8874  1037  00BE               	movwf	ReadBaud@temp^(0+512)
  8875                           
  8876                           ;FLASH.c: 191: MEM[1] = (unsigned int)(temp & 0x0003FFF);
  8877  1038  30FF               	movlw	255
  8878  1039  053E               	andwf	ReadBaud@temp^(0+512),w
  8879  103A  0021               	movlb	1	; select bank1
  8880  103B  00E6               	movwf	(_MEM^(0+128)+2)
  8881  103C  303F               	movlw	63
  8882  103D  0024               	movlb	4	; select bank4
  8883  103E  053F               	andwf	(ReadBaud@temp+1)^(0+512),w
  8884  103F  0021               	movlb	1	; select bank1
  8885  1040  00E7               	movwf	((_MEM+1)^(0+128)+2)
  8886                           
  8887                           ;FLASH.c: 192: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
  8888  1041  0024               	movlb	4	; select bank4
  8889  1042  083E               	movf	ReadBaud@temp^(0+512),w
  8890  1043  00B6               	movwf	??_ReadBaud^(0+512)
  8891  1044  083F               	movf	(ReadBaud@temp+1)^(0+512),w
  8892  1045  00B7               	movwf	(??_ReadBaud^(0+512)+1)
  8893  1046  0840               	movf	(ReadBaud@temp+2)^(0+512),w
  8894  1047  00B8               	movwf	(??_ReadBaud^(0+512)+2)
  8895  1048  0841               	movf	(ReadBaud@temp+3)^(0+512),w
  8896  1049  00B9               	movwf	(??_ReadBaud^(0+512)+3)
  8897  104A  300E               	movlw	14
  8898  104B                     u8705:	
  8899  104B  36B9               	lsrf	(??_ReadBaud^(0+512)+3),f
  8900  104C  0CB8               	rrf	(??_ReadBaud^(0+512)+2),f
  8901  104D  0CB7               	rrf	(??_ReadBaud^(0+512)+1),f
  8902  104E  0CB6               	rrf	??_ReadBaud^(0+512),f
  8903  104F  0B89               	decfsz	9,f
  8904  1050  284B               	goto	u8705
  8905  1051  30FF               	movlw	255
  8906  1052  0536               	andwf	??_ReadBaud^(0+512),w
  8907  1053  0021               	movlb	1	; select bank1
  8908  1054  00E4               	movwf	_MEM^(0+128)
  8909  1055  303F               	movlw	63
  8910  1056  0024               	movlb	4	; select bank4
  8911  1057  0537               	andwf	(??_ReadBaud+1)^(0+512),w
  8912  1058  0021               	movlb	1	; select bank1
  8913  1059  00E5               	movwf	(_MEM+1)^(0+128)
  8914                           
  8915                           ;FLASH.c: 193: return (((unsigned long)MEM[0] << 12) + (unsigned long)MEM[1]);
  8916  105A  0866               	movf	(_MEM^(0+128)+2),w
  8917  105B  0024               	movlb	4	; select bank4
  8918  105C  00B6               	movwf	??_ReadBaud^(0+512)
  8919  105D  0021               	movlb	1	; select bank1
  8920  105E  0867               	movf	((_MEM+1)^(0+128)+2),w
  8921  105F  0024               	movlb	4	; select bank4
  8922  1060  00B7               	movwf	(??_ReadBaud^(0+512)+1)
  8923  1061  01B8               	clrf	(??_ReadBaud^(0+512)+2)
  8924  1062  01B9               	clrf	(??_ReadBaud^(0+512)+3)
  8925  1063  0021               	movlb	1	; select bank1
  8926  1064  0864               	movf	_MEM^(0+128),w
  8927  1065  0024               	movlb	4	; select bank4
  8928  1066  00BA               	movwf	(??_ReadBaud+4)^(0+512)
  8929  1067  0021               	movlb	1	; select bank1
  8930  1068  0865               	movf	(_MEM+1)^(0+128),w
  8931  1069  0024               	movlb	4	; select bank4
  8932  106A  00BB               	movwf	((??_ReadBaud+4)^(0+512)+1)
  8933  106B  01BC               	clrf	((??_ReadBaud+4)^(0+512)+2)
  8934  106C  01BD               	clrf	((??_ReadBaud+4)^(0+512)+3)
  8935  106D  300C               	movlw	12
  8936  106E                     u8715:	
  8937  106E  35BA               	lslf	(??_ReadBaud+4)^(0+512),f
  8938  106F  0DBB               	rlf	((??_ReadBaud+4)^(0+512)+1),f
  8939  1070  0DBC               	rlf	((??_ReadBaud+4)^(0+512)+2),f
  8940  1071  0DBD               	rlf	((??_ReadBaud+4)^(0+512)+3),f
  8941  1072  0B89               	decfsz	9,f
  8942  1073  286E               	goto	u8715
  8943  1074  083A               	movf	(??_ReadBaud+4)^(0+512),w
  8944  1075  07B6               	addwf	??_ReadBaud^(0+512),f
  8945  1076  083B               	movf	(??_ReadBaud+5)^(0+512),w
  8946  1077  3DB7               	addwfc	(??_ReadBaud^(0+512)+1),f
  8947  1078  083C               	movf	(??_ReadBaud+6)^(0+512),w
  8948  1079  3DB8               	addwfc	(??_ReadBaud^(0+512)+2),f
  8949  107A  083D               	movf	(??_ReadBaud+7)^(0+512),w
  8950  107B  3DB9               	addwfc	(??_ReadBaud^(0+512)+3),f
  8951  107C  0839               	movf	(??_ReadBaud+3)^(0+512),w
  8952  107D  00B5               	movwf	(?_ReadBaud+3)^(0+512)
  8953  107E  0838               	movf	(??_ReadBaud+2)^(0+512),w
  8954  107F  00B4               	movwf	(?_ReadBaud+2)^(0+512)
  8955  1080  0837               	movf	(??_ReadBaud+1)^(0+512),w
  8956  1081  00B3               	movwf	(?_ReadBaud+1)^(0+512)
  8957  1082  0836               	movf	??_ReadBaud^(0+512),w
  8958  1083  00B2               	movwf	?_ReadBaud^(0+512)
  8959  1084  0008               	return
  8960  1085                     __end_of_ReadBaud:	
  8961                           
  8962                           	psect	text25
  8963  1DAD                     __ptext25:	
  8964 ;; *************** function _ReadFlash_4Byte *****************
  8965 ;; Defined at:
  8966 ;;		line 62 in file "FLASH.c"
  8967 ;; Parameters:    Size  Location     Type
  8968 ;;  row             2    5[BANK4 ] unsigned int 
  8969 ;;  column          1    7[BANK4 ] unsigned char 
  8970 ;; Auto vars:     Size  Location     Type
  8971 ;;  temp            4   14[BANK4 ] unsigned long 
  8972 ;; Return value:  Size  Location     Type
  8973 ;;                  4    5[BANK4 ] unsigned long 
  8974 ;; Registers used:
  8975 ;;		wreg, status,2, status,0, pclath, cstack
  8976 ;; Tracked objects:
  8977 ;;		On entry : 0/0
  8978 ;;		On exit  : 0/0
  8979 ;;		Unchanged: 0/0
  8980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8981 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8982 ;;      Locals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8983 ;;      Temps:          0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  8984 ;;      Totals:         0       0       0       0       0      13       0       0       0       0       0       0       
      +0       0
  8985 ;;Total ram usage:       13 bytes
  8986 ;; Hardware stack levels used:    1
  8987 ;; Hardware stack levels required when called:    8
  8988 ;; This function calls:
  8989 ;;		_ReadFlash_2Byte
  8990 ;; This function is called by:
  8991 ;;		_ReadBaud
  8992 ;; This function uses a non-reentrant model
  8993 ;;
  8994                           
  8995                           
  8996                           ;psect for function _ReadFlash_4Byte
  8997  1DAD                     _ReadFlash_4Byte:	
  8998                           
  8999                           ;FLASH.c: 64: unsigned long temp =0;
  9000                           
  9001                           ;incstack = 0
  9002                           ; Regs used in _ReadFlash_4Byte: [wreg+status,2+status,0+pclath+cstack]
  9003  1DAD  3000               	movlw	0
  9004  1DAE  0024               	movlb	4	; select bank4
  9005  1DAF  00B1               	movwf	(ReadFlash_4Byte@temp+3)^(0+512)
  9006  1DB0  3000               	movlw	0
  9007  1DB1  00B0               	movwf	(ReadFlash_4Byte@temp+2)^(0+512)
  9008  1DB2  3000               	movlw	0
  9009  1DB3  00AF               	movwf	(ReadFlash_4Byte@temp+1)^(0+512)
  9010  1DB4  3000               	movlw	0
  9011  1DB5  00AE               	movwf	ReadFlash_4Byte@temp^(0+512)
  9012                           
  9013                           ;FLASH.c: 65: temp = ((unsigned long)ReadFlash_2Byte(row, column) << 16);
  9014  1DB6  0826               	movf	(ReadFlash_4Byte@row+1)^(0+512),w
  9015  1DB7  00A1               	movwf	(ReadFlash_2Byte@row+1)^(0+512)
  9016  1DB8  0825               	movf	ReadFlash_4Byte@row^(0+512),w
  9017  1DB9  00A0               	movwf	ReadFlash_2Byte@row^(0+512)
  9018  1DBA  0827               	movf	ReadFlash_4Byte@column^(0+512),w
  9019  1DBB  00A9               	movwf	??_ReadFlash_4Byte^(0+512)
  9020  1DBC  0829               	movf	??_ReadFlash_4Byte^(0+512),w
  9021  1DBD  00A2               	movwf	ReadFlash_2Byte@column^(0+512)
  9022  1DBE  319B  2354  319D   	fcall	_ReadFlash_2Byte
  9023  1DC1  0024               	movlb	4	; select bank4
  9024  1DC2  0820               	movf	?_ReadFlash_2Byte^(0+512),w
  9025  1DC3  00AA               	movwf	(??_ReadFlash_4Byte+1)^(0+512)
  9026  1DC4  0821               	movf	(?_ReadFlash_2Byte+1)^(0+512),w
  9027  1DC5  00AB               	movwf	((??_ReadFlash_4Byte+1)^(0+512)+1)
  9028  1DC6  01AC               	clrf	((??_ReadFlash_4Byte+1)^(0+512)+2)
  9029  1DC7  01AD               	clrf	((??_ReadFlash_4Byte+1)^(0+512)+3)
  9030  1DC8  3010               	movlw	16
  9031  1DC9                     u8475:	
  9032  1DC9  35AA               	lslf	(??_ReadFlash_4Byte+1)^(0+512),f
  9033  1DCA  0DAB               	rlf	((??_ReadFlash_4Byte+1)^(0+512)+1),f
  9034  1DCB  0DAC               	rlf	((??_ReadFlash_4Byte+1)^(0+512)+2),f
  9035  1DCC  0DAD               	rlf	((??_ReadFlash_4Byte+1)^(0+512)+3),f
  9036  1DCD  0B89               	decfsz	9,f
  9037  1DCE  2DC9               	goto	u8475
  9038  1DCF  082D               	movf	(??_ReadFlash_4Byte+4)^(0+512),w
  9039  1DD0  00B1               	movwf	(ReadFlash_4Byte@temp+3)^(0+512)
  9040  1DD1  082C               	movf	(??_ReadFlash_4Byte+3)^(0+512),w
  9041  1DD2  00B0               	movwf	(ReadFlash_4Byte@temp+2)^(0+512)
  9042  1DD3  082B               	movf	(??_ReadFlash_4Byte+2)^(0+512),w
  9043  1DD4  00AF               	movwf	(ReadFlash_4Byte@temp+1)^(0+512)
  9044  1DD5  082A               	movf	(??_ReadFlash_4Byte+1)^(0+512),w
  9045  1DD6  00AE               	movwf	ReadFlash_4Byte@temp^(0+512)
  9046                           
  9047                           ;FLASH.c: 66: temp |= ((unsigned long)ReadFlash_2Byte(row, (column + 1)));
  9048  1DD7  0826               	movf	(ReadFlash_4Byte@row+1)^(0+512),w
  9049  1DD8  00A1               	movwf	(ReadFlash_2Byte@row+1)^(0+512)
  9050  1DD9  0825               	movf	ReadFlash_4Byte@row^(0+512),w
  9051  1DDA  00A0               	movwf	ReadFlash_2Byte@row^(0+512)
  9052  1DDB  0827               	movf	ReadFlash_4Byte@column^(0+512),w
  9053  1DDC  3E01               	addlw	1
  9054  1DDD  00A9               	movwf	??_ReadFlash_4Byte^(0+512)
  9055  1DDE  0829               	movf	??_ReadFlash_4Byte^(0+512),w
  9056  1DDF  00A2               	movwf	ReadFlash_2Byte@column^(0+512)
  9057  1DE0  319B  2354         	fcall	_ReadFlash_2Byte
  9058  1DE2  0024               	movlb	4	; select bank4
  9059  1DE3  0820               	movf	?_ReadFlash_2Byte^(0+512),w
  9060  1DE4  00AA               	movwf	(??_ReadFlash_4Byte+1)^(0+512)
  9061  1DE5  0821               	movf	(?_ReadFlash_2Byte+1)^(0+512),w
  9062  1DE6  00AB               	movwf	((??_ReadFlash_4Byte+1)^(0+512)+1)
  9063  1DE7  01AC               	clrf	((??_ReadFlash_4Byte+1)^(0+512)+2)
  9064  1DE8  01AD               	clrf	((??_ReadFlash_4Byte+1)^(0+512)+3)
  9065  1DE9  082A               	movf	(??_ReadFlash_4Byte+1)^(0+512),w
  9066  1DEA  04AE               	iorwf	ReadFlash_4Byte@temp^(0+512),f
  9067  1DEB  082B               	movf	(??_ReadFlash_4Byte+2)^(0+512),w
  9068  1DEC  04AF               	iorwf	(ReadFlash_4Byte@temp+1)^(0+512),f
  9069  1DED  082C               	movf	(??_ReadFlash_4Byte+3)^(0+512),w
  9070  1DEE  04B0               	iorwf	(ReadFlash_4Byte@temp+2)^(0+512),f
  9071  1DEF  082D               	movf	(??_ReadFlash_4Byte+4)^(0+512),w
  9072  1DF0  04B1               	iorwf	(ReadFlash_4Byte@temp+3)^(0+512),f
  9073                           
  9074                           ;FLASH.c: 67: return temp;
  9075  1DF1  0831               	movf	(ReadFlash_4Byte@temp+3)^(0+512),w
  9076  1DF2  00A8               	movwf	(?_ReadFlash_4Byte+3)^(0+512)
  9077  1DF3  0830               	movf	(ReadFlash_4Byte@temp+2)^(0+512),w
  9078  1DF4  00A7               	movwf	(?_ReadFlash_4Byte+2)^(0+512)
  9079  1DF5  082F               	movf	(ReadFlash_4Byte@temp+1)^(0+512),w
  9080  1DF6  00A6               	movwf	(?_ReadFlash_4Byte+1)^(0+512)
  9081  1DF7  082E               	movf	ReadFlash_4Byte@temp^(0+512),w
  9082  1DF8  00A5               	movwf	?_ReadFlash_4Byte^(0+512)
  9083  1DF9  0008               	return
  9084  1DFA                     __end_of_ReadFlash_4Byte:	
  9085                           
  9086                           	psect	text26
  9087  1B54                     __ptext26:	
  9088 ;; *************** function _ReadFlash_2Byte *****************
  9089 ;; Defined at:
  9090 ;;		line 43 in file "FLASH.c"
  9091 ;; Parameters:    Size  Location     Type
  9092 ;;  row             2    0[BANK4 ] unsigned int 
  9093 ;;  column          1    2[BANK4 ] unsigned char 
  9094 ;; Auto vars:     Size  Location     Type
  9095 ;;		None
  9096 ;; Return value:  Size  Location     Type
  9097 ;;                  2    0[BANK4 ] unsigned int 
  9098 ;; Registers used:
  9099 ;;		wreg, status,2, status,0
  9100 ;; Tracked objects:
  9101 ;;		On entry : 0/0
  9102 ;;		On exit  : 0/0
  9103 ;;		Unchanged: 0/0
  9104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9105 ;;      Params:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  9106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9107 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  9108 ;;      Totals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  9109 ;;Total ram usage:        5 bytes
  9110 ;; Hardware stack levels used:    1
  9111 ;; Hardware stack levels required when called:    7
  9112 ;; This function calls:
  9113 ;;		Nothing
  9114 ;; This function is called by:
  9115 ;;		_ReadFlash_4Byte
  9116 ;; This function uses a non-reentrant model
  9117 ;;
  9118                           
  9119                           
  9120                           ;psect for function _ReadFlash_2Byte
  9121  1B54                     _ReadFlash_2Byte:	
  9122                           
  9123                           ;FLASH.c: 45: PMCON1 &= ~0b01000000;
  9124                           
  9125                           ;incstack = 0
  9126                           ; Regs used in _ReadFlash_2Byte: [wreg+status,2+status,0]
  9127  1B54  30BF               	movlw	191
  9128  1B55  0024               	movlb	4	; select bank4
  9129  1B56  00A3               	movwf	??_ReadFlash_2Byte^(0+512)
  9130  1B57  0823               	movf	??_ReadFlash_2Byte^(0+512),w
  9131  1B58  0023               	movlb	3	; select bank3
  9132  1B59  0595               	andwf	21,f	;volatile
  9133                           
  9134                           ;FLASH.c: 46: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
  9135  1B5A  0024               	movlb	4	; select bank4
  9136  1B5B  0821               	movf	(ReadFlash_2Byte@row+1)^(0+512),w
  9137  1B5C  00A4               	movwf	(??_ReadFlash_2Byte^(0+512)+1)
  9138  1B5D  0820               	movf	ReadFlash_2Byte@row^(0+512),w
  9139  1B5E  00A3               	movwf	??_ReadFlash_2Byte^(0+512)
  9140  1B5F  36A4               	lsrf	(??_ReadFlash_2Byte^(0+512)+1),f
  9141  1B60  0CA3               	rrf	??_ReadFlash_2Byte^(0+512),f
  9142  1B61  36A4               	lsrf	(??_ReadFlash_2Byte^(0+512)+1),f
  9143  1B62  0CA3               	rrf	??_ReadFlash_2Byte^(0+512),f
  9144  1B63  36A4               	lsrf	(??_ReadFlash_2Byte^(0+512)+1),f
  9145  1B64  0CA3               	rrf	??_ReadFlash_2Byte^(0+512),f
  9146  1B65  0823               	movf	??_ReadFlash_2Byte^(0+512),w
  9147  1B66  397F               	andlw	127
  9148  1B67  0023               	movlb	3	; select bank3
  9149  1B68  0092               	movwf	18	;volatile
  9150                           
  9151                           ;FLASH.c: 47: PMADRL = (unsigned char)(((row & 0x007) << 5) + column);
  9152  1B69  0024               	movlb	4	; select bank4
  9153  1B6A  0820               	movf	ReadFlash_2Byte@row^(0+512),w
  9154  1B6B  3907               	andlw	7
  9155  1B6C  00A3               	movwf	??_ReadFlash_2Byte^(0+512)
  9156  1B6D  3004               	movlw	4
  9157  1B6E                     u8075:	
  9158  1B6E  35A3               	lslf	??_ReadFlash_2Byte^(0+512),f
  9159  1B6F  3EFF               	addlw	-1
  9160  1B70  1D03               	skipz
  9161  1B71  2B6E               	goto	u8075
  9162  1B72  3523               	lslf	??_ReadFlash_2Byte^(0+512),w
  9163  1B73  0722               	addwf	ReadFlash_2Byte@column^(0+512),w
  9164  1B74  0023               	movlb	3	; select bank3
  9165  1B75  0091               	movwf	17	;volatile
  9166                           
  9167                           ;FLASH.c: 48: PMCON1 |= 0b00000001;
  9168  1B76  1415               	bsf	21,0	;volatile
  9169  1B77                     l956:	
  9170                           ;FLASH.c: 49: while(PMCON1 & 0b00000001);
  9171                           
  9172  1B77  1815               	btfsc	21,0	;volatile
  9173  1B78  2B77               	goto	l956
  9174                           
  9175                           ;FLASH.c: 50: __nop();
  9176  1B79  0000               	nop
  9177                           
  9178                           ;FLASH.c: 51: __nop();
  9179  1B7A  0000               	nop
  9180                           
  9181                           ;FLASH.c: 52: return (PMDATL | (PMDATH << 8));
  9182  1B7B  0023               	movlb	3	; select bank3
  9183  1B7C  0814               	movf	20,w	;volatile
  9184  1B7D  0024               	movlb	4	; select bank4
  9185  1B7E  00A1               	movwf	(?_ReadFlash_2Byte+1)^(0+512)
  9186  1B7F  0023               	movlb	3	; select bank3
  9187  1B80  0813               	movf	19,w	;volatile
  9188  1B81  0024               	movlb	4	; select bank4
  9189  1B82  00A0               	movwf	?_ReadFlash_2Byte^(0+512)
  9190  1B83  0008               	return
  9191  1B84                     __end_of_ReadFlash_2Byte:	
  9192                           
  9193                           	psect	text27
  9194  1441                     __ptext27:	
  9195 ;; *************** function _InitUART *****************
  9196 ;; Defined at:
  9197 ;;		line 78 in file "UART.c"
  9198 ;; Parameters:    Size  Location     Type
  9199 ;;  Baud            4   14[BANK4 ] unsigned long 
  9200 ;;  parity          1   18[BANK4 ] unsigned char 
  9201 ;; Auto vars:     Size  Location     Type
  9202 ;;  temp            4   31[BANK4 ] unsigned long 
  9203 ;;  spbrg           2   27[BANK4 ] unsigned int 
  9204 ;;  config          1   30[BANK4 ] unsigned char 
  9205 ;;  baudconfig      1   29[BANK4 ] unsigned char 
  9206 ;; Return value:  Size  Location     Type
  9207 ;;		None               void
  9208 ;; Registers used:
  9209 ;;		wreg, status,2, status,0, pclath, cstack
  9210 ;; Tracked objects:
  9211 ;;		On entry : 0/0
  9212 ;;		On exit  : 0/0
  9213 ;;		Unchanged: 0/0
  9214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9215 ;;      Params:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  9216 ;;      Locals:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  9217 ;;      Temps:          0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  9218 ;;      Totals:         0       0       0       0       0      21       0       0       0       0       0       0       
      +0       0
  9219 ;;Total ram usage:       21 bytes
  9220 ;; Hardware stack levels used:    1
  9221 ;; Hardware stack levels required when called:    8
  9222 ;; This function calls:
  9223 ;;		_CloseUSART
  9224 ;;		_OpenUSART
  9225 ;;		_ReadUSART
  9226 ;;		___lldiv
  9227 ;;		_baudUSART
  9228 ;; This function is called by:
  9229 ;;		_Init_System
  9230 ;; This function uses a non-reentrant model
  9231 ;;
  9232                           
  9233                           
  9234                           ;psect for function _InitUART
  9235  1441                     _InitUART:	
  9236                           
  9237                           ;UART.c: 80: unsigned long temp;
  9238                           ;UART.c: 81: unsigned char config;
  9239                           ;UART.c: 82: unsigned int spbrg;
  9240                           ;UART.c: 83: unsigned char baudconfig;
  9241                           ;UART.c: 92: PIE1bits.RCIE = 0;
  9242                           
  9243                           ;incstack = 0
  9244                           ; Regs used in _InitUART: [wreg+status,2+status,0+pclath+cstack]
  9245  1441  0021               	movlb	1	; select bank1
  9246  1442  1291               	bcf	17,5	;volatile
  9247                           
  9248                           ;UART.c: 93: LATC |= 0b00000100;
  9249  1443  0022               	movlb	2	; select bank2
  9250  1444  150E               	bsf	14,2	;volatile
  9251                           
  9252                           ;UART.c: 94: PPSLOCK =0;
  9253  1445  003C               	movlb	28	; select bank28
  9254  1446  018F               	clrf	15	;volatile
  9255                           
  9256                           ;UART.c: 95: RC2PPS = 0b00000000;
  9257  1447  003D               	movlb	29	; select bank29
  9258  1448  01A2               	clrf	34	;volatile
  9259                           
  9260                           ;UART.c: 96: PPSLOCK =1;
  9261  1449  3001               	movlw	1
  9262  144A  003C               	movlb	28	; select bank28
  9263  144B  008F               	movwf	15	;volatile
  9264                           
  9265                           ;UART.c: 98: CloseUSART();
  9266  144C  3198  20E0  3194   	fcall	_CloseUSART
  9267                           
  9268                           ;UART.c: 99: config =0;
  9269  144F  0024               	movlb	4	; select bank4
  9270  1450  01BE               	clrf	InitUART@config^(0+512)
  9271                           
  9272                           ;UART.c: 100: baudconfig =0;
  9273  1451  01BD               	clrf	InitUART@baudconfig^(0+512)
  9274                           
  9275                           ;UART.c: 105: config |= 0b00001000;
  9276  1452  15BE               	bsf	InitUART@config^(0+512),3
  9277                           
  9278                           ;UART.c: 106: config |= 0b00010000;
  9279  1453  163E               	bsf	InitUART@config^(0+512),4
  9280                           
  9281                           ;UART.c: 107: PARITY = parity;
  9282  1454  0832               	movf	InitUART@parity^(0+512),w
  9283  1455  00B3               	movwf	??_InitUART^(0+512)
  9284  1456  0833               	movf	??_InitUART^(0+512),w
  9285  1457  00E1               	movwf	_PARITY^(0+512)
  9286                           
  9287                           ;UART.c: 108: BAUD = Baud;
  9288  1458  0831               	movf	(InitUART@Baud+3)^(0+512),w
  9289  1459  00E5               	movwf	(_BAUD+3)^(0+512)
  9290  145A  0830               	movf	(InitUART@Baud+2)^(0+512),w
  9291  145B  00E4               	movwf	(_BAUD+2)^(0+512)
  9292  145C  082F               	movf	(InitUART@Baud+1)^(0+512),w
  9293  145D  00E3               	movwf	(_BAUD+1)^(0+512)
  9294  145E  082E               	movf	InitUART@Baud^(0+512),w
  9295  145F  00E2               	movwf	_BAUD^(0+512)
  9296                           
  9297                           ;UART.c: 109: if(parity)
  9298  1460  0832               	movf	InitUART@parity^(0+512),w
  9299  1461  1903               	btfsc	3,2
  9300  1462  2C65               	goto	l6666
  9301                           
  9302                           ;UART.c: 110: {
  9303                           ;UART.c: 111: config |= 0b00000010;
  9304  1463  14BE               	bsf	InitUART@config^(0+512),1
  9305                           
  9306                           ;UART.c: 112: }
  9307  1464  2C69               	goto	l6668
  9308  1465                     l6666:	
  9309                           
  9310                           ;UART.c: 113: else
  9311                           ;UART.c: 114: {
  9312                           ;UART.c: 115: config &= ~0b00000010;
  9313  1465  30FD               	movlw	253
  9314  1466  00B3               	movwf	??_InitUART^(0+512)
  9315  1467  0833               	movf	??_InitUART^(0+512),w
  9316  1468  05BE               	andwf	InitUART@config^(0+512),f
  9317  1469                     l6668:	
  9318                           
  9319                           ;UART.c: 116: }
  9320                           ;UART.c: 117: baudconfig |= 0b00001000;
  9321  1469  15BD               	bsf	InitUART@baudconfig^(0+512),3
  9322                           
  9323                           ;UART.c: 120: temp = (32000000L / Baud) - 1;
  9324  146A  0831               	movf	(InitUART@Baud+3)^(0+512),w
  9325  146B  00A3               	movwf	(___lldiv@divisor+3)^(0+512)
  9326  146C  0830               	movf	(InitUART@Baud+2)^(0+512),w
  9327  146D  00A2               	movwf	(___lldiv@divisor+2)^(0+512)
  9328  146E  082F               	movf	(InitUART@Baud+1)^(0+512),w
  9329  146F  00A1               	movwf	(___lldiv@divisor+1)^(0+512)
  9330  1470  082E               	movf	InitUART@Baud^(0+512),w
  9331  1471  00A0               	movwf	___lldiv@divisor^(0+512)
  9332  1472  3001               	movlw	1
  9333  1473  00A7               	movwf	(___lldiv@dividend+3)^(0+512)
  9334  1474  30E8               	movlw	232
  9335  1475  00A6               	movwf	(___lldiv@dividend+2)^(0+512)
  9336  1476  3048               	movlw	72
  9337  1477  00A5               	movwf	(___lldiv@dividend+1)^(0+512)
  9338  1478  3000               	movlw	0
  9339  1479  00A4               	movwf	___lldiv@dividend^(0+512)
  9340  147A  319E  269A  3194   	fcall	___lldiv
  9341  147D  30FF               	movlw	255
  9342  147E  0024               	movlb	4	; select bank4
  9343  147F  0720               	addwf	?___lldiv^(0+512),w
  9344  1480  00BF               	movwf	InitUART@temp^(0+512)
  9345  1481  30FF               	movlw	255
  9346  1482  3D21               	addwfc	(?___lldiv+1)^(0+512),w
  9347  1483  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9348  1484  30FF               	movlw	255
  9349  1485  3D22               	addwfc	(?___lldiv+2)^(0+512),w
  9350  1486  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9351  1487  30FF               	movlw	255
  9352  1488  3D23               	addwfc	(?___lldiv+3)^(0+512),w
  9353  1489  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9354                           
  9355                           ;UART.c: 121: temp = (temp >> 2) - 1;
  9356  148A  30FF               	movlw	255
  9357  148B  00B3               	movwf	??_InitUART^(0+512)
  9358  148C  30FF               	movlw	255
  9359  148D  00B4               	movwf	(??_InitUART^(0+512)+1)
  9360  148E  30FF               	movlw	255
  9361  148F  00B5               	movwf	(??_InitUART^(0+512)+2)
  9362  1490  30FF               	movlw	255
  9363  1491  00B6               	movwf	(??_InitUART^(0+512)+3)
  9364  1492  083F               	movf	InitUART@temp^(0+512),w
  9365  1493  00B7               	movwf	(??_InitUART+4)^(0+512)
  9366  1494  0840               	movf	(InitUART@temp+1)^(0+512),w
  9367  1495  00B8               	movwf	((??_InitUART+4)^(0+512)+1)
  9368  1496  0841               	movf	(InitUART@temp+2)^(0+512),w
  9369  1497  00B9               	movwf	((??_InitUART+4)^(0+512)+2)
  9370  1498  0842               	movf	(InitUART@temp+3)^(0+512),w
  9371  1499  00BA               	movwf	((??_InitUART+4)^(0+512)+3)
  9372  149A  3002               	movlw	2
  9373  149B                     u8735:	
  9374  149B  36BA               	lsrf	((??_InitUART+4)^(0+512)+3),f
  9375  149C  0CB9               	rrf	((??_InitUART+4)^(0+512)+2),f
  9376  149D  0CB8               	rrf	((??_InitUART+4)^(0+512)+1),f
  9377  149E  0CB7               	rrf	(??_InitUART+4)^(0+512),f
  9378  149F  0B89               	decfsz	9,f
  9379  14A0  2C9B               	goto	u8735
  9380  14A1  0837               	movf	(??_InitUART+4)^(0+512),w
  9381  14A2  07B3               	addwf	??_InitUART^(0+512),f
  9382  14A3  0838               	movf	(??_InitUART+5)^(0+512),w
  9383  14A4  3DB4               	addwfc	(??_InitUART^(0+512)+1),f
  9384  14A5  0839               	movf	(??_InitUART+6)^(0+512),w
  9385  14A6  3DB5               	addwfc	(??_InitUART^(0+512)+2),f
  9386  14A7  083A               	movf	(??_InitUART+7)^(0+512),w
  9387  14A8  3DB6               	addwfc	(??_InitUART^(0+512)+3),f
  9388  14A9  0836               	movf	(??_InitUART+3)^(0+512),w
  9389  14AA  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9390  14AB  0835               	movf	(??_InitUART+2)^(0+512),w
  9391  14AC  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9392  14AD  0834               	movf	(??_InitUART+1)^(0+512),w
  9393  14AE  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9394  14AF  0833               	movf	??_InitUART^(0+512),w
  9395  14B0  00BF               	movwf	InitUART@temp^(0+512)
  9396                           
  9397                           ;UART.c: 122: spbrg = (unsigned int)temp;
  9398  14B1  0840               	movf	(InitUART@temp+1)^(0+512),w
  9399  14B2  00BC               	movwf	(InitUART@spbrg+1)^(0+512)
  9400  14B3  083F               	movf	InitUART@temp^(0+512),w
  9401  14B4  00BB               	movwf	InitUART@spbrg^(0+512)
  9402                           
  9403                           ;UART.c: 124: RCSTAbits.CREN = 0;
  9404  14B5  0023               	movlb	3	; select bank3
  9405  14B6  121D               	bcf	29,4	;volatile
  9406                           
  9407                           ;UART.c: 125: OpenUSART(config, spbrg);
  9408  14B7  0024               	movlb	4	; select bank4
  9409  14B8  083C               	movf	(InitUART@spbrg+1)^(0+512),w
  9410  14B9  00A1               	movwf	(OpenUSART@spbrg+1)^(0+512)
  9411  14BA  083B               	movf	InitUART@spbrg^(0+512),w
  9412  14BB  00A0               	movwf	OpenUSART@spbrg^(0+512)
  9413  14BC  083E               	movf	InitUART@config^(0+512),w
  9414  14BD  319C  249A  3194   	fcall	_OpenUSART
  9415                           
  9416                           ;UART.c: 126: baudUSART(baudconfig);
  9417  14C0  0024               	movlb	4	; select bank4
  9418  14C1  083D               	movf	InitUART@baudconfig^(0+512),w
  9419  14C2  3198  2073  3194   	fcall	_baudUSART
  9420                           
  9421                           ;UART.c: 127: temp = ReadUSART();
  9422  14C5  3198  2090  3194   	fcall	_ReadUSART
  9423  14C8  0024               	movlb	4	; select bank4
  9424  14C9  00B3               	movwf	??_InitUART^(0+512)
  9425  14CA  01B4               	clrf	(??_InitUART^(0+512)+1)
  9426  14CB  01B5               	clrf	(??_InitUART^(0+512)+2)
  9427  14CC  01B6               	clrf	(??_InitUART^(0+512)+3)
  9428  14CD  0836               	movf	(??_InitUART+3)^(0+512),w
  9429  14CE  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9430  14CF  0835               	movf	(??_InitUART+2)^(0+512),w
  9431  14D0  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9432  14D1  0834               	movf	(??_InitUART+1)^(0+512),w
  9433  14D2  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9434  14D3  0833               	movf	??_InitUART^(0+512),w
  9435  14D4  00BF               	movwf	InitUART@temp^(0+512)
  9436                           
  9437                           ;UART.c: 128: temp = ReadUSART();
  9438  14D5  3198  2090  3194   	fcall	_ReadUSART
  9439  14D8  0024               	movlb	4	; select bank4
  9440  14D9  00B3               	movwf	??_InitUART^(0+512)
  9441  14DA  01B4               	clrf	(??_InitUART^(0+512)+1)
  9442  14DB  01B5               	clrf	(??_InitUART^(0+512)+2)
  9443  14DC  01B6               	clrf	(??_InitUART^(0+512)+3)
  9444  14DD  0836               	movf	(??_InitUART+3)^(0+512),w
  9445  14DE  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9446  14DF  0835               	movf	(??_InitUART+2)^(0+512),w
  9447  14E0  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9448  14E1  0834               	movf	(??_InitUART+1)^(0+512),w
  9449  14E2  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9450  14E3  0833               	movf	??_InitUART^(0+512),w
  9451  14E4  00BF               	movwf	InitUART@temp^(0+512)
  9452                           
  9453                           ;UART.c: 129: temp = ReadUSART();
  9454  14E5  3198  2090  3194   	fcall	_ReadUSART
  9455  14E8  0024               	movlb	4	; select bank4
  9456  14E9  00B3               	movwf	??_InitUART^(0+512)
  9457  14EA  01B4               	clrf	(??_InitUART^(0+512)+1)
  9458  14EB  01B5               	clrf	(??_InitUART^(0+512)+2)
  9459  14EC  01B6               	clrf	(??_InitUART^(0+512)+3)
  9460  14ED  0836               	movf	(??_InitUART+3)^(0+512),w
  9461  14EE  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9462  14EF  0835               	movf	(??_InitUART+2)^(0+512),w
  9463  14F0  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9464  14F1  0834               	movf	(??_InitUART+1)^(0+512),w
  9465  14F2  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9466  14F3  0833               	movf	??_InitUART^(0+512),w
  9467  14F4  00BF               	movwf	InitUART@temp^(0+512)
  9468                           
  9469                           ;UART.c: 130: temp = ReadUSART();
  9470  14F5  3198  2090  3194   	fcall	_ReadUSART
  9471  14F8  0024               	movlb	4	; select bank4
  9472  14F9  00B3               	movwf	??_InitUART^(0+512)
  9473  14FA  01B4               	clrf	(??_InitUART^(0+512)+1)
  9474  14FB  01B5               	clrf	(??_InitUART^(0+512)+2)
  9475  14FC  01B6               	clrf	(??_InitUART^(0+512)+3)
  9476  14FD  0836               	movf	(??_InitUART+3)^(0+512),w
  9477  14FE  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9478  14FF  0835               	movf	(??_InitUART+2)^(0+512),w
  9479  1500  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9480  1501  0834               	movf	(??_InitUART+1)^(0+512),w
  9481  1502  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9482  1503  0833               	movf	??_InitUART^(0+512),w
  9483  1504  00BF               	movwf	InitUART@temp^(0+512)
  9484                           
  9485                           ;UART.c: 131: temp = ReadUSART();
  9486  1505  3198  2090         	fcall	_ReadUSART
  9487  1507  0024               	movlb	4	; select bank4
  9488  1508  00B3               	movwf	??_InitUART^(0+512)
  9489  1509  01B4               	clrf	(??_InitUART^(0+512)+1)
  9490  150A  01B5               	clrf	(??_InitUART^(0+512)+2)
  9491  150B  01B6               	clrf	(??_InitUART^(0+512)+3)
  9492  150C  0836               	movf	(??_InitUART+3)^(0+512),w
  9493  150D  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9494  150E  0835               	movf	(??_InitUART+2)^(0+512),w
  9495  150F  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9496  1510  0834               	movf	(??_InitUART+1)^(0+512),w
  9497  1511  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9498  1512  0833               	movf	??_InitUART^(0+512),w
  9499  1513  00BF               	movwf	InitUART@temp^(0+512)
  9500                           
  9501                           ;UART.c: 133: PPSLOCK =0;
  9502  1514  003C               	movlb	28	; select bank28
  9503  1515  018F               	clrf	15	;volatile
  9504                           
  9505                           ;UART.c: 134: RC2PPS = 0b00010100;
  9506  1516  3014               	movlw	20
  9507  1517  003D               	movlb	29	; select bank29
  9508  1518  00A2               	movwf	34	;volatile
  9509                           
  9510                           ;UART.c: 135: CKPPS = 0b00010010;
  9511  1519  3012               	movlw	18
  9512  151A  003C               	movlb	28	; select bank28
  9513  151B  00A5               	movwf	37	;volatile
  9514                           
  9515                           ;UART.c: 137: RXPPS = 0b00010101;
  9516  151C  3015               	movlw	21
  9517  151D  00A4               	movwf	36	;volatile
  9518                           
  9519                           ;UART.c: 139: PPSLOCK =1;
  9520  151E  3001               	movlw	1
  9521  151F  008F               	movwf	15	;volatile
  9522                           
  9523                           ;UART.c: 141: PIR1bits.RCIF = 0;
  9524  1520  0020               	movlb	0	; select bank0
  9525  1521  1291               	bcf	17,5	;volatile
  9526                           
  9527                           ;UART.c: 142: PIE1bits.RCIE = 1;
  9528  1522  0021               	movlb	1	; select bank1
  9529  1523  1691               	bsf	17,5	;volatile
  9530                           
  9531                           ;UART.c: 143: INTCONbits.PEIE = 1;
  9532  1524  170B               	bsf	11,6	;volatile
  9533  1525  0008               	return
  9534  1526                     __end_of_InitUART:	
  9535                           
  9536                           	psect	text28
  9537  1873                     __ptext28:	
  9538 ;; *************** function _baudUSART *****************
  9539 ;; Defined at:
  9540 ;;		line 151 in file "UART.c"
  9541 ;; Parameters:    Size  Location     Type
  9542 ;;  baudconfig      1    wreg     unsigned char 
  9543 ;; Auto vars:     Size  Location     Type
  9544 ;;  baudconfig      1    0[BANK4 ] unsigned char 
  9545 ;; Return value:  Size  Location     Type
  9546 ;;		None               void
  9547 ;; Registers used:
  9548 ;;		wreg, status,2
  9549 ;; Tracked objects:
  9550 ;;		On entry : 0/0
  9551 ;;		On exit  : 0/0
  9552 ;;		Unchanged: 0/0
  9553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9555 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9557 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9558 ;;Total ram usage:        1 bytes
  9559 ;; Hardware stack levels used:    1
  9560 ;; Hardware stack levels required when called:    7
  9561 ;; This function calls:
  9562 ;;		Nothing
  9563 ;; This function is called by:
  9564 ;;		_InitUART
  9565 ;; This function uses a non-reentrant model
  9566 ;;
  9567                           
  9568                           
  9569                           ;psect for function _baudUSART
  9570  1873                     _baudUSART:	
  9571                           
  9572                           ;incstack = 0
  9573                           ; Regs used in _baudUSART: [wreg+status,2]
  9574                           ;baudUSART@baudconfig stored from wreg
  9575  1873  0024               	movlb	4	; select bank4
  9576  1874  00A0               	movwf	baudUSART@baudconfig^(0+512)
  9577                           
  9578                           ;UART.c: 153: BAUD1CON =0;
  9579  1875  0023               	movlb	3	; select bank3
  9580  1876  019F               	clrf	31	;volatile
  9581                           
  9582                           ;UART.c: 154: BAUD1CON = baudconfig;
  9583  1877  0024               	movlb	4	; select bank4
  9584  1878  0820               	movf	baudUSART@baudconfig^(0+512),w
  9585  1879  0023               	movlb	3	; select bank3
  9586  187A  009F               	movwf	31	;volatile
  9587  187B  0008               	return
  9588  187C                     __end_of_baudUSART:	
  9589                           
  9590                           	psect	text29
  9591  1E9A                     __ptext29:	
  9592 ;; *************** function ___lldiv *****************
  9593 ;; Defined at:
  9594 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  9595 ;; Parameters:    Size  Location     Type
  9596 ;;  divisor         4    0[BANK4 ] unsigned long 
  9597 ;;  dividend        4    4[BANK4 ] unsigned long 
  9598 ;; Auto vars:     Size  Location     Type
  9599 ;;  quotient        4    9[BANK4 ] unsigned long 
  9600 ;;  counter         1   13[BANK4 ] unsigned char 
  9601 ;; Return value:  Size  Location     Type
  9602 ;;                  4    0[BANK4 ] unsigned long 
  9603 ;; Registers used:
  9604 ;;		wreg, status,2, status,0
  9605 ;; Tracked objects:
  9606 ;;		On entry : 0/0
  9607 ;;		On exit  : 0/0
  9608 ;;		Unchanged: 0/0
  9609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9610 ;;      Params:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  9611 ;;      Locals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  9612 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9613 ;;      Totals:         0       0       0       0       0      14       0       0       0       0       0       0       
      +0       0
  9614 ;;Total ram usage:       14 bytes
  9615 ;; Hardware stack levels used:    1
  9616 ;; Hardware stack levels required when called:    7
  9617 ;; This function calls:
  9618 ;;		Nothing
  9619 ;; This function is called by:
  9620 ;;		_InitUART
  9621 ;; This function uses a non-reentrant model
  9622 ;;
  9623                           
  9624                           
  9625                           ;psect for function ___lldiv
  9626  1E9A                     ___lldiv:	
  9627                           
  9628                           ;incstack = 0
  9629                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  9630  1E9A  3000               	movlw	0
  9631  1E9B  0024               	movlb	4	; select bank4
  9632  1E9C  00AC               	movwf	(___lldiv@quotient+3)^(0+512)
  9633  1E9D  3000               	movlw	0
  9634  1E9E  00AB               	movwf	(___lldiv@quotient+2)^(0+512)
  9635  1E9F  3000               	movlw	0
  9636  1EA0  00AA               	movwf	(___lldiv@quotient+1)^(0+512)
  9637  1EA1  3000               	movlw	0
  9638  1EA2  00A9               	movwf	___lldiv@quotient^(0+512)
  9639  1EA3  0823               	movf	(___lldiv@divisor+3)^(0+512),w
  9640  1EA4  0422               	iorwf	(___lldiv@divisor+2)^(0+512),w
  9641  1EA5  0421               	iorwf	(___lldiv@divisor+1)^(0+512),w
  9642  1EA6  0420               	iorwf	___lldiv@divisor^(0+512),w
  9643  1EA7  1903               	skipnz
  9644  1EA8  2EE4               	goto	l6620
  9645  1EA9  01AD               	clrf	___lldiv@counter^(0+512)
  9646  1EAA  0AAD               	incf	___lldiv@counter^(0+512),f
  9647  1EAB                     l6606:	
  9648  1EAB  1BA3               	btfsc	(___lldiv@divisor+3)^(0+512),7
  9649  1EAC  2EB9               	goto	l6608
  9650  1EAD  3001               	movlw	1
  9651  1EAE                     u8615:	
  9652  1EAE  35A0               	lslf	___lldiv@divisor^(0+512),f
  9653  1EAF  0DA1               	rlf	(___lldiv@divisor+1)^(0+512),f
  9654  1EB0  0DA2               	rlf	(___lldiv@divisor+2)^(0+512),f
  9655  1EB1  0DA3               	rlf	(___lldiv@divisor+3)^(0+512),f
  9656  1EB2  0B89               	decfsz	9,f
  9657  1EB3  2EAE               	goto	u8615
  9658  1EB4  3001               	movlw	1
  9659  1EB5  00A8               	movwf	??___lldiv^(0+512)
  9660  1EB6  0828               	movf	??___lldiv^(0+512),w
  9661  1EB7  07AD               	addwf	___lldiv@counter^(0+512),f
  9662  1EB8  2EAB               	goto	l6606
  9663  1EB9                     l6608:	
  9664  1EB9  3001               	movlw	1
  9665  1EBA                     u8635:	
  9666  1EBA  35A9               	lslf	___lldiv@quotient^(0+512),f
  9667  1EBB  0DAA               	rlf	(___lldiv@quotient+1)^(0+512),f
  9668  1EBC  0DAB               	rlf	(___lldiv@quotient+2)^(0+512),f
  9669  1EBD  0DAC               	rlf	(___lldiv@quotient+3)^(0+512),f
  9670  1EBE  0B89               	decfsz	9,f
  9671  1EBF  2EBA               	goto	u8635
  9672  1EC0  0823               	movf	(___lldiv@divisor+3)^(0+512),w
  9673  1EC1  0227               	subwf	(___lldiv@dividend+3)^(0+512),w
  9674  1EC2  1D03               	skipz
  9675  1EC3  2ECE               	goto	u8645
  9676  1EC4  0822               	movf	(___lldiv@divisor+2)^(0+512),w
  9677  1EC5  0226               	subwf	(___lldiv@dividend+2)^(0+512),w
  9678  1EC6  1D03               	skipz
  9679  1EC7  2ECE               	goto	u8645
  9680  1EC8  0821               	movf	(___lldiv@divisor+1)^(0+512),w
  9681  1EC9  0225               	subwf	(___lldiv@dividend+1)^(0+512),w
  9682  1ECA  1D03               	skipz
  9683  1ECB  2ECE               	goto	u8645
  9684  1ECC  0820               	movf	___lldiv@divisor^(0+512),w
  9685  1ECD  0224               	subwf	___lldiv@dividend^(0+512),w
  9686  1ECE                     u8645:	
  9687  1ECE  1C03               	skipc
  9688  1ECF  2ED9               	goto	l6616
  9689  1ED0  0820               	movf	___lldiv@divisor^(0+512),w
  9690  1ED1  02A4               	subwf	___lldiv@dividend^(0+512),f
  9691  1ED2  0821               	movf	(___lldiv@divisor+1)^(0+512),w
  9692  1ED3  3BA5               	subwfb	(___lldiv@dividend+1)^(0+512),f
  9693  1ED4  0822               	movf	(___lldiv@divisor+2)^(0+512),w
  9694  1ED5  3BA6               	subwfb	(___lldiv@dividend+2)^(0+512),f
  9695  1ED6  0823               	movf	(___lldiv@divisor+3)^(0+512),w
  9696  1ED7  3BA7               	subwfb	(___lldiv@dividend+3)^(0+512),f
  9697  1ED8  1429               	bsf	___lldiv@quotient^(0+512),0
  9698  1ED9                     l6616:	
  9699  1ED9  3001               	movlw	1
  9700  1EDA                     u8655:	
  9701  1EDA  36A3               	lsrf	(___lldiv@divisor+3)^(0+512),f
  9702  1EDB  0CA2               	rrf	(___lldiv@divisor+2)^(0+512),f
  9703  1EDC  0CA1               	rrf	(___lldiv@divisor+1)^(0+512),f
  9704  1EDD  0CA0               	rrf	___lldiv@divisor^(0+512),f
  9705  1EDE  0B89               	decfsz	9,f
  9706  1EDF  2EDA               	goto	u8655
  9707  1EE0  3001               	movlw	1
  9708  1EE1  02AD               	subwf	___lldiv@counter^(0+512),f
  9709  1EE2  1D03               	btfss	3,2
  9710  1EE3  2EB9               	goto	l6608
  9711  1EE4                     l6620:	
  9712  1EE4  082C               	movf	(___lldiv@quotient+3)^(0+512),w
  9713  1EE5  00A3               	movwf	(?___lldiv+3)^(0+512)
  9714  1EE6  082B               	movf	(___lldiv@quotient+2)^(0+512),w
  9715  1EE7  00A2               	movwf	(?___lldiv+2)^(0+512)
  9716  1EE8  082A               	movf	(___lldiv@quotient+1)^(0+512),w
  9717  1EE9  00A1               	movwf	(?___lldiv+1)^(0+512)
  9718  1EEA  0829               	movf	___lldiv@quotient^(0+512),w
  9719  1EEB  00A0               	movwf	?___lldiv^(0+512)
  9720  1EEC  0008               	return
  9721  1EED                     __end_of___lldiv:	
  9722                           
  9723                           	psect	text30
  9724  1890                     __ptext30:	
  9725 ;; *************** function _ReadUSART *****************
  9726 ;; Defined at:
  9727 ;;		line 307 in file "UART.c"
  9728 ;; Parameters:    Size  Location     Type
  9729 ;;		None
  9730 ;; Auto vars:     Size  Location     Type
  9731 ;;  data            1    1[BANK4 ] unsigned char 
  9732 ;; Return value:  Size  Location     Type
  9733 ;;                  1    wreg      unsigned char 
  9734 ;; Registers used:
  9735 ;;		wreg
  9736 ;; Tracked objects:
  9737 ;;		On entry : 0/0
  9738 ;;		On exit  : 0/0
  9739 ;;		Unchanged: 0/0
  9740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9742 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9743 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9744 ;;      Totals:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  9745 ;;Total ram usage:        2 bytes
  9746 ;; Hardware stack levels used:    1
  9747 ;; Hardware stack levels required when called:    7
  9748 ;; This function calls:
  9749 ;;		Nothing
  9750 ;; This function is called by:
  9751 ;;		_InitUART
  9752 ;; This function uses a non-reentrant model
  9753 ;;
  9754                           
  9755                           
  9756                           ;psect for function _ReadUSART
  9757  1890                     _ReadUSART:	
  9758                           
  9759                           ;UART.c: 309: char data;
  9760                           ;UART.c: 311: if(RCSTAbits.OERR)
  9761                           
  9762                           ;incstack = 0
  9763                           ; Regs used in _ReadUSART: [wreg]
  9764  1890  0023               	movlb	3	; select bank3
  9765  1891  189D               	btfsc	29,1	;volatile
  9766                           
  9767                           ;UART.c: 312: {
  9768                           ;UART.c: 313: RCSTAbits.CREN = 0;
  9769  1892  121D               	bcf	29,4	;volatile
  9770                           
  9771                           ;UART.c: 314: }
  9772                           ;UART.c: 316: data = RCREG;
  9773  1893  0819               	movf	25,w	;volatile
  9774  1894  0024               	movlb	4	; select bank4
  9775  1895  00A0               	movwf	??_ReadUSART^(0+512)
  9776  1896  0820               	movf	??_ReadUSART^(0+512),w
  9777  1897  00A1               	movwf	ReadUSART@data^(0+512)
  9778                           
  9779                           ;UART.c: 318: return (data);
  9780  1898  0821               	movf	ReadUSART@data^(0+512),w
  9781  1899  0008               	return
  9782  189A                     __end_of_ReadUSART:	
  9783                           
  9784                           	psect	text31
  9785  1C9A                     __ptext31:	
  9786 ;; *************** function _OpenUSART *****************
  9787 ;; Defined at:
  9788 ;;		line 162 in file "UART.c"
  9789 ;; Parameters:    Size  Location     Type
  9790 ;;  config          1    wreg     unsigned char 
  9791 ;;  spbrg           2    0[BANK4 ] unsigned int 
  9792 ;; Auto vars:     Size  Location     Type
  9793 ;;  config          1    2[BANK4 ] unsigned char 
  9794 ;; Return value:  Size  Location     Type
  9795 ;;		None               void
  9796 ;; Registers used:
  9797 ;;		wreg, status,2
  9798 ;; Tracked objects:
  9799 ;;		On entry : 0/0
  9800 ;;		On exit  : 0/0
  9801 ;;		Unchanged: 0/0
  9802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9803 ;;      Params:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  9804 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9806 ;;      Totals:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  9807 ;;Total ram usage:        3 bytes
  9808 ;; Hardware stack levels used:    1
  9809 ;; Hardware stack levels required when called:    7
  9810 ;; This function calls:
  9811 ;;		Nothing
  9812 ;; This function is called by:
  9813 ;;		_InitUART
  9814 ;; This function uses a non-reentrant model
  9815 ;;
  9816                           
  9817                           
  9818                           ;psect for function _OpenUSART
  9819  1C9A                     _OpenUSART:	
  9820                           
  9821                           ;incstack = 0
  9822                           ; Regs used in _OpenUSART: [wreg+status,2]
  9823                           ;OpenUSART@config stored from wreg
  9824  1C9A  0024               	movlb	4	; select bank4
  9825  1C9B  00A2               	movwf	OpenUSART@config^(0+512)
  9826                           
  9827                           ;UART.c: 164: TX1STA = 0;
  9828  1C9C  0023               	movlb	3	; select bank3
  9829  1C9D  019E               	clrf	30	;volatile
  9830                           
  9831                           ;UART.c: 165: RC1STA = 0;
  9832  1C9E  019D               	clrf	29	;volatile
  9833                           
  9834                           ;UART.c: 167: if(config&0x01)
  9835  1C9F  0024               	movlb	4	; select bank4
  9836  1CA0  1C22               	btfss	OpenUSART@config^(0+512),0
  9837  1CA1  2CA4               	goto	l6372
  9838                           
  9839                           ;UART.c: 168: {
  9840                           ;UART.c: 169: TX1STAbits.SYNC = 1;
  9841  1CA2  0023               	movlb	3	; select bank3
  9842  1CA3  161E               	bsf	30,4	;volatile
  9843  1CA4                     l6372:	
  9844                           
  9845                           ;UART.c: 170: }
  9846                           ;UART.c: 172: if(config&0x02)
  9847  1CA4  0024               	movlb	4	; select bank4
  9848  1CA5  1CA2               	btfss	OpenUSART@config^(0+512),1
  9849  1CA6  2CAA               	goto	l6376
  9850                           
  9851                           ;UART.c: 173: {
  9852                           ;UART.c: 174: TX1STAbits.TX9 = 1;
  9853  1CA7  0023               	movlb	3	; select bank3
  9854  1CA8  171E               	bsf	30,6	;volatile
  9855                           
  9856                           ;UART.c: 175: RC1STAbits.RX9 = 1;
  9857  1CA9  171D               	bsf	29,6	;volatile
  9858  1CAA                     l6376:	
  9859                           
  9860                           ;UART.c: 176: }
  9861                           ;UART.c: 178: if(config&0x04)
  9862  1CAA  0024               	movlb	4	; select bank4
  9863  1CAB  1D22               	btfss	OpenUSART@config^(0+512),2
  9864  1CAC  2CAF               	goto	l6380
  9865                           
  9866                           ;UART.c: 179: {
  9867                           ;UART.c: 180: TX1STAbits.CSRC = 1;
  9868  1CAD  0023               	movlb	3	; select bank3
  9869  1CAE  179E               	bsf	30,7	;volatile
  9870  1CAF                     l6380:	
  9871                           
  9872                           ;UART.c: 181: }
  9873                           ;UART.c: 183: if(config&0x08)
  9874  1CAF  0024               	movlb	4	; select bank4
  9875  1CB0  1DA2               	btfss	OpenUSART@config^(0+512),3
  9876  1CB1  2CB5               	goto	l419
  9877                           
  9878                           ;UART.c: 184: {
  9879                           ;UART.c: 185: RC1STAbits.CREN = 1;
  9880  1CB2  0023               	movlb	3	; select bank3
  9881  1CB3  161D               	bsf	29,4	;volatile
  9882                           
  9883                           ;UART.c: 186: }
  9884  1CB4  2CB7               	goto	l6384
  9885  1CB5                     l419:	
  9886                           
  9887                           ;UART.c: 187: else
  9888                           ;UART.c: 188: {
  9889                           ;UART.c: 189: RC1STAbits.SREN = 1;
  9890  1CB5  0023               	movlb	3	; select bank3
  9891  1CB6  169D               	bsf	29,5	;volatile
  9892  1CB7                     l6384:	
  9893                           
  9894                           ;UART.c: 190: }
  9895                           ;UART.c: 192: if(config&0x10)
  9896  1CB7  0024               	movlb	4	; select bank4
  9897  1CB8  1E22               	btfss	OpenUSART@config^(0+512),4
  9898  1CB9  2CBC               	goto	l6390
  9899                           
  9900                           ;UART.c: 193: {
  9901                           ;UART.c: 194: TX1STAbits.BRGH = 1;
  9902  1CBA  0023               	movlb	3	; select bank3
  9903  1CBB  151E               	bsf	30,2	;volatile
  9904  1CBC                     l6390:	
  9905                           ;UART.c: 198: {
  9906                           
  9907                           
  9908                           ;UART.c: 200: }
  9909                           ;UART.c: 202: if(config&0x40)
  9910  1CBC  0024               	movlb	4	; select bank4
  9911  1CBD  1F22               	btfss	OpenUSART@config^(0+512),6
  9912  1CBE  2CC4               	goto	l423
  9913                           
  9914                           ;UART.c: 203: {
  9915                           ;UART.c: 204: PIR1bits.RCIF = 0;
  9916  1CBF  0020               	movlb	0	; select bank0
  9917  1CC0  1291               	bcf	17,5	;volatile
  9918                           
  9919                           ;UART.c: 205: PIE1bits.RCIE = 1;
  9920  1CC1  0021               	movlb	1	; select bank1
  9921  1CC2  1691               	bsf	17,5	;volatile
  9922                           
  9923                           ;UART.c: 207: }
  9924  1CC3  2CC6               	goto	l6394
  9925  1CC4                     l423:	
  9926                           
  9927                           ;UART.c: 208: else
  9928                           ;UART.c: 209: {
  9929                           ;UART.c: 210: PIE1bits.RCIE = 0;
  9930  1CC4  0021               	movlb	1	; select bank1
  9931  1CC5  1291               	bcf	17,5	;volatile
  9932  1CC6                     l6394:	
  9933                           
  9934                           ;UART.c: 211: }
  9935                           ;UART.c: 213: if(config&0x80)
  9936  1CC6  0024               	movlb	4	; select bank4
  9937  1CC7  1FA2               	btfss	OpenUSART@config^(0+512),7
  9938  1CC8  2CCE               	goto	l425
  9939                           
  9940                           ;UART.c: 214: {
  9941                           ;UART.c: 215: PIR1bits.TXIF = 0;
  9942  1CC9  0020               	movlb	0	; select bank0
  9943  1CCA  1211               	bcf	17,4	;volatile
  9944                           
  9945                           ;UART.c: 216: PIE1bits.TXIE = 1;
  9946  1CCB  0021               	movlb	1	; select bank1
  9947  1CCC  1611               	bsf	17,4	;volatile
  9948                           
  9949                           ;UART.c: 217: }
  9950  1CCD  2CD0               	goto	l6398
  9951  1CCE                     l425:	
  9952                           
  9953                           ;UART.c: 218: else
  9954                           ;UART.c: 219: {
  9955                           ;UART.c: 220: PIE1bits.TXIE = 0;
  9956  1CCE  0021               	movlb	1	; select bank1
  9957  1CCF  1211               	bcf	17,4	;volatile
  9958  1CD0                     l6398:	
  9959                           
  9960                           ;UART.c: 221: }
  9961                           ;UART.c: 223: SPBRG = spbrg;
  9962  1CD0  0024               	movlb	4	; select bank4
  9963  1CD1  0820               	movf	OpenUSART@spbrg^(0+512),w
  9964  1CD2  0023               	movlb	3	; select bank3
  9965  1CD3  009B               	movwf	27	;volatile
  9966                           
  9967                           ;UART.c: 224: SPBRGH = spbrg >> 8;
  9968  1CD4  0024               	movlb	4	; select bank4
  9969  1CD5  0821               	movf	(OpenUSART@spbrg+1)^(0+512),w
  9970  1CD6  0023               	movlb	3	; select bank3
  9971  1CD7  009C               	movwf	28	;volatile
  9972                           
  9973                           ;UART.c: 226: TX1STAbits.TXEN = 1;
  9974  1CD8  169E               	bsf	30,5	;volatile
  9975                           
  9976                           ;UART.c: 227: RC1STAbits.SPEN = 1;
  9977  1CD9  179D               	bsf	29,7	;volatile
  9978  1CDA  0008               	return
  9979  1CDB                     __end_of_OpenUSART:	
  9980                           
  9981                           	psect	text32
  9982  18E0                     __ptext32:	
  9983 ;; *************** function _CloseUSART *****************
  9984 ;; Defined at:
  9985 ;;		line 65 in file "UART.c"
  9986 ;; Parameters:    Size  Location     Type
  9987 ;;		None
  9988 ;; Auto vars:     Size  Location     Type
  9989 ;;		None
  9990 ;; Return value:  Size  Location     Type
  9991 ;;		None               void
  9992 ;; Registers used:
  9993 ;;		wreg, status,2, status,0
  9994 ;; Tracked objects:
  9995 ;;		On entry : 0/0
  9996 ;;		On exit  : 0/0
  9997 ;;		Unchanged: 0/0
  9998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10001 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
 10002 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
 10003 ;;Total ram usage:        1 bytes
 10004 ;; Hardware stack levels used:    1
 10005 ;; Hardware stack levels required when called:    7
 10006 ;; This function calls:
 10007 ;;		Nothing
 10008 ;; This function is called by:
 10009 ;;		_InitUART
 10010 ;; This function uses a non-reentrant model
 10011 ;;
 10012                           
 10013                           
 10014                           ;psect for function _CloseUSART
 10015  18E0                     _CloseUSART:	
 10016                           
 10017                           ;UART.c: 67: RCSTA&=0b01001111;
 10018                           
 10019                           ;incstack = 0
 10020                           ; Regs used in _CloseUSART: [wreg+status,2+status,0]
 10021  18E0  304F               	movlw	79
 10022  18E1  0024               	movlb	4	; select bank4
 10023  18E2  00A0               	movwf	??_CloseUSART^(0+512)
 10024  18E3  0820               	movf	??_CloseUSART^(0+512),w
 10025  18E4  0023               	movlb	3	; select bank3
 10026  18E5  059D               	andwf	29,f	;volatile
 10027                           
 10028                           ;UART.c: 68: TX1STAbits.TXEN=0;
 10029  18E6  129E               	bcf	30,5	;volatile
 10030                           
 10031                           ;UART.c: 69: PIE1&=0b11001111;
 10032  18E7  30CF               	movlw	207
 10033  18E8  0024               	movlb	4	; select bank4
 10034  18E9  00A0               	movwf	??_CloseUSART^(0+512)
 10035  18EA  0820               	movf	??_CloseUSART^(0+512),w
 10036  18EB  0021               	movlb	1	; select bank1
 10037  18EC  0591               	andwf	17,f	;volatile
 10038  18ED  0008               	return
 10039  18EE                     __end_of_CloseUSART:	
 10040                           
 10041                           	psect	text33
 10042  19A5                     __ptext33:	
 10043 ;; *************** function _InitApp *****************
 10044 ;; Defined at:
 10045 ;;		line 62 in file "user.c"
 10046 ;; Parameters:    Size  Location     Type
 10047 ;;		None
 10048 ;; Auto vars:     Size  Location     Type
 10049 ;;		None
 10050 ;; Return value:  Size  Location     Type
 10051 ;;		None               void
 10052 ;; Registers used:
 10053 ;;		wreg, status,2
 10054 ;; Tracked objects:
 10055 ;;		On entry : 0/0
 10056 ;;		On exit  : 0/0
 10057 ;;		Unchanged: 0/0
 10058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10062 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10063 ;;Total ram usage:        0 bytes
 10064 ;; Hardware stack levels used:    1
 10065 ;; Hardware stack levels required when called:    7
 10066 ;; This function calls:
 10067 ;;		Nothing
 10068 ;; This function is called by:
 10069 ;;		_main
 10070 ;; This function uses a non-reentrant model
 10071 ;;
 10072                           
 10073                           
 10074                           ;psect for function _InitApp
 10075  19A5                     _InitApp:	
 10076                           
 10077                           ;user.c: 64: LATC =0;
 10078                           
 10079                           ;incstack = 0
 10080                           ; Regs used in _InitApp: [wreg+status,2]
 10081  19A5  0022               	movlb	2	; select bank2
 10082  19A6  018E               	clrf	14	;volatile
 10083                           
 10084                           ;user.c: 65: LATA =0;
 10085  19A7  018C               	clrf	12	;volatile
 10086                           
 10087                           ;user.c: 66: TRISCbits.TRISC2 = 0;
 10088  19A8  0021               	movlb	1	; select bank1
 10089  19A9  110E               	bcf	14,2	;volatile
 10090                           
 10091                           ;user.c: 67: TRISCbits.TRISC1 = 0;
 10092  19AA  108E               	bcf	14,1	;volatile
 10093                           
 10094                           ;user.c: 68: TRISCbits.TRISC3 = 0;
 10095  19AB  118E               	bcf	14,3	;volatile
 10096                           
 10097                           ;user.c: 69: TRISCbits.TRISC4 = 0;
 10098  19AC  120E               	bcf	14,4	;volatile
 10099                           
 10100                           ;user.c: 70: TRISAbits.TRISA2 = 1;
 10101  19AD  150C               	bsf	12,2	;volatile
 10102                           
 10103                           ;user.c: 72: TRISCbits.TRISC0 = 1;
 10104  19AE  140E               	bsf	14,0	;volatile
 10105                           
 10106                           ;user.c: 77: TRISCbits.TRISC5 = 1;
 10107  19AF  168E               	bsf	14,5	;volatile
 10108                           
 10109                           ;user.c: 80: LATC |= 0b00000010;
 10110  19B0  0022               	movlb	2	; select bank2
 10111  19B1  148E               	bsf	14,1	;volatile
 10112                           
 10113                           ;user.c: 81: PPSLOCK =0;
 10114  19B2  003C               	movlb	28	; select bank28
 10115  19B3  018F               	clrf	15	;volatile
 10116                           
 10117                           ;user.c: 82: RC2PPS = 0b00010100;
 10118  19B4  3014               	movlw	20
 10119  19B5  003D               	movlb	29	; select bank29
 10120  19B6  00A2               	movwf	34	;volatile
 10121                           
 10122                           ;user.c: 83: CKPPS = 0b00010010;
 10123  19B7  3012               	movlw	18
 10124  19B8  003C               	movlb	28	; select bank28
 10125  19B9  00A5               	movwf	37	;volatile
 10126                           
 10127                           ;user.c: 85: RXPPS = 0b00010101;
 10128  19BA  3015               	movlw	21
 10129  19BB  00A4               	movwf	36	;volatile
 10130                           
 10131                           ;user.c: 87: PPSLOCK =1;
 10132  19BC  3001               	movlw	1
 10133  19BD  008F               	movwf	15	;volatile
 10134                           
 10135                           ;user.c: 89: ANSELA &= ~0xFF;
 10136  19BE  0023               	movlb	3	; select bank3
 10137  19BF  018C               	clrf	12	;volatile
 10138                           
 10139                           ;user.c: 90: ANSELA |= 0b00000100;
 10140  19C0  150C               	bsf	12,2	;volatile
 10141                           
 10142                           ;user.c: 91: ANSELC &= ~0xFF;
 10143  19C1  018E               	clrf	14	;volatile
 10144                           
 10145                           ;user.c: 92: OPTION_REGbits.nWPUEN = 0;
 10146  19C2  0021               	movlb	1	; select bank1
 10147  19C3  1395               	bcf	21,7	;volatile
 10148                           
 10149                           ;user.c: 93: WPUC = 0b00100000;
 10150  19C4  3020               	movlw	32
 10151  19C5  0024               	movlb	4	; select bank4
 10152  19C6  008E               	movwf	14	;volatile
 10153                           
 10154                           ;user.c: 94: WPUA = 0;
 10155  19C7  018C               	clrf	12	;volatile
 10156  19C8  0008               	return
 10157  19C9                     __end_of_InitApp:	
 10158                           
 10159                           	psect	text34
 10160  1944                     __ptext34:	
 10161 ;; *************** function _ConfigureOscillator *****************
 10162 ;; Defined at:
 10163 ;;		line 40 in file "system.c"
 10164 ;; Parameters:    Size  Location     Type
 10165 ;;		None
 10166 ;; Auto vars:     Size  Location     Type
 10167 ;;		None
 10168 ;; Return value:  Size  Location     Type
 10169 ;;		None               void
 10170 ;; Registers used:
 10171 ;;		wreg, status,2, status,0
 10172 ;; Tracked objects:
 10173 ;;		On entry : 0/0
 10174 ;;		On exit  : 0/0
 10175 ;;		Unchanged: 0/0
 10176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10179 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
 10180 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
 10181 ;;Total ram usage:        1 bytes
 10182 ;; Hardware stack levels used:    1
 10183 ;; Hardware stack levels required when called:    7
 10184 ;; This function calls:
 10185 ;;		Nothing
 10186 ;; This function is called by:
 10187 ;;		_main
 10188 ;; This function uses a non-reentrant model
 10189 ;;
 10190                           
 10191                           
 10192                           ;psect for function _ConfigureOscillator
 10193  1944                     _ConfigureOscillator:	
 10194                           
 10195                           ;system.c: 42: OSCCON= 0b11110000;
 10196                           
 10197                           ;incstack = 0
 10198                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 10199  1944  30F0               	movlw	240
 10200  1945  0021               	movlb	1	; select bank1
 10201  1946  0099               	movwf	25	;volatile
 10202  1947                     l6880:	
 10203                           ;system.c: 43: while(!(OSCSTAT & HFIOFS));
 10204                           
 10205  1947  3000               	movlw	0
 10206  1948  181A               	btfsc	26,0	;volatile
 10207  1949  3001               	movlw	1
 10208  194A  051A               	andwf	26,w	;volatile
 10209  194B  1903               	btfsc	3,2
 10210  194C  2947               	goto	l6880
 10211  194D                     l6882:	
 10212                           ;system.c: 44: while(!(OSCSTAT & = 0b01000000));
 10213                           
 10214  194D  3040               	movlw	64
 10215  194E  0024               	movlb	4	; select bank4
 10216  194F  00A0               	movwf	??_ConfigureOscillator^(0+512)
 10217  1950  0820               	movf	??_ConfigureOscillator^(0+512),w
 10218  1951  0021               	movlb	1	; select bank1
 10219  1952  059A               	andwf	26,f	;volatile
 10220  1953  1D03               	btfss	3,2
 10221  1954  0008               	return
 10222  1955  294D               	goto	l6882
 10223  1956                     __end_of_ConfigureOscillator:	
 10224                           
 10225                           	psect	intentry
 10226  0004                     __pintentry:	
 10227 ;; *************** function _isr *****************
 10228 ;; Defined at:
 10229 ;;		line 73 in file "interrupts.c"
 10230 ;; Parameters:    Size  Location     Type
 10231 ;;		None
 10232 ;; Auto vars:     Size  Location     Type
 10233 ;;  ScanTemp        1   37[BANK1 ] unsigned char 
 10234 ;;  rx              1   36[BANK1 ] unsigned char 
 10235 ;;  Rx_Overun       1   35[BANK1 ] unsigned char 
 10236 ;;  Rx_fault        1   34[BANK1 ] unsigned char 
 10237 ;; Return value:  Size  Location     Type
 10238 ;;		None               void
 10239 ;; Registers used:
 10240 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10241 ;; Tracked objects:
 10242 ;;		On entry : 0/0
 10243 ;;		On exit  : 0/0
 10244 ;;		Unchanged: 0/0
 10245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10247 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 10248 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10249 ;;      Totals:         0       2       4       0       0       0       0       0       0       0       0       0       
      +0       0
 10250 ;;Total ram usage:        6 bytes
 10251 ;; Hardware stack levels used:    1
 10252 ;; Hardware stack levels required when called:    6
 10253 ;; This function calls:
 10254 ;;		_PS2RawToScan
 10255 ;;		_Process_PS2_ScanCode
 10256 ;;		_READ_CONFIG_PIN
 10257 ;;		_ResendLast
 10258 ;;		_Timer2OFF
 10259 ;;		_Timer2Reset
 10260 ;;		_UART_send_break_timed
 10261 ;;		i1_PS_2_DISABLE_INTERRUPT
 10262 ;;		i1_PS_2_ENABLE_INTERRUPT
 10263 ;;		i1_READ_PS_2_PIN
 10264 ;;		i1_ReadUSART
 10265 ;;		i1_Timer2ON
 10266 ;;		i1_UARTchar
 10267 ;; This function is called by:
 10268 ;;		Interrupt level 1
 10269 ;; This function uses a non-reentrant model
 10270 ;;
 10271                           
 10272  0004                     _isr:	
 10273                           
 10274                           ;incstack = 0
 10275                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10276  0004  3180               	pagesel	$
 10277  0005  0020               	movlb	0	; select bank0
 10278  0006  087F               	movf	127,w
 10279  0007  00EF               	movwf	??_isr+1
 10280                           
 10281                           ;interrupts.c: 75: unsigned char rx;
 10282                           ;interrupts.c: 76: unsigned char Rx_fault =0;
 10283  0008  0021               	movlb	1	; select bank1
 10284  0009  01C2               	clrf	isr@Rx_fault^(0+128)
 10285                           
 10286                           ;interrupts.c: 77: unsigned char Rx_Overun = 0;
 10287  000A  01C3               	clrf	isr@Rx_Overun^(0+128)
 10288                           
 10289                           ;interrupts.c: 78: unsigned char ScanTemp;
 10290                           ;interrupts.c: 80: if(IOCAF & 0b00100000)
 10291  000B  0027               	movlb	7	; select bank7
 10292  000C  1E93               	btfss	19,5	;volatile
 10293  000D  2873               	goto	i1l83
 10294                           
 10295                           ;interrupts.c: 81: {
 10296                           ;interrupts.c: 83: PS_2_DISABLE_INTERRUPT(0b00100000);
 10297  000E  3020               	movlw	32
 10298  000F  3198  20FD  3180   	fcall	i1_PS_2_DISABLE_INTERRUPT
 10299                           
 10300                           ;interrupts.c: 84: PIE1bits.TMR2IE = 0;
 10301  0012  0021               	movlb	1	; select bank1
 10302  0013  1091               	bcf	17,1	;volatile
 10303                           
 10304                           ;interrupts.c: 85: PIE1bits.RCIE = 0;
 10305  0014  1291               	bcf	17,5	;volatile
 10306                           
 10307                           ;interrupts.c: 86: LATC |= 0b00010000;
 10308  0015  0022               	movlb	2	; select bank2
 10309  0016  160E               	bsf	14,4	;volatile
 10310                           
 10311                           ;interrupts.c: 87: PS_2_bits++;
 10312  0017  3001               	movlw	1
 10313  0018  0020               	movlb	0	; select bank0
 10314  0019  00EE               	movwf	??_isr
 10315  001A  086E               	movf	??_isr,w
 10316  001B  0021               	movlb	1	; select bank1
 10317  001C  07D3               	addwf	_PS_2_bits^(0+128),f
 10318                           
 10319                           ;interrupts.c: 88: PS_2_Read_Data_TEMP <<= 1;
 10320  001D  3001               	movlw	1
 10321  001E                     u762_25:	
 10322  001E  35CA               	lslf	_PS_2_Read_Data_TEMP^(0+128),f
 10323  001F  0DCB               	rlf	(_PS_2_Read_Data_TEMP+1)^(0+128),f
 10324  0020  0B89               	decfsz	9,f
 10325  0021  281E               	goto	u762_25
 10326                           
 10327                           ;interrupts.c: 89: __nop();
 10328  0022  0000               	nop
 10329                           
 10330                           ;interrupts.c: 90: if(READ_PS_2_PIN(0b00010000))
 10331  0023  3010               	movlw	16
 10332  0024  3199  2156  3180   	fcall	i1_READ_PS_2_PIN
 10333  0027  3A00               	xorlw	0
 10334  0028  1903               	skipnz
 10335  0029  282F               	goto	i1l6042
 10336                           
 10337                           ;interrupts.c: 91: {
 10338                           ;interrupts.c: 92: PS_2_Read_Data_TEMP++;
 10339  002A  3001               	movlw	1
 10340  002B  0021               	movlb	1	; select bank1
 10341  002C  07CA               	addwf	_PS_2_Read_Data_TEMP^(0+128),f
 10342  002D  3000               	movlw	0
 10343  002E  3DCB               	addwfc	(_PS_2_Read_Data_TEMP+1)^(0+128),f
 10344  002F                     i1l6042:	
 10345                           
 10346                           ;interrupts.c: 93: }
 10347                           ;interrupts.c: 94: if(PS_2_bits == 11)
 10348  002F  300B               	movlw	11
 10349  0030  0021               	movlb	1	; select bank1
 10350  0031  0653               	xorwf	_PS_2_bits^(0+128),w
 10351  0032  1D03               	btfss	3,2
 10352  0033  285E               	goto	i1l6056
 10353                           
 10354                           ;interrupts.c: 95: {
 10355                           ;interrupts.c: 96: if(PS_2_Buffer_items < 12)
 10356  0034  300C               	movlw	12
 10357  0035  0252               	subwf	_PS_2_Buffer_items^(0+128),w
 10358  0036  1803               	skipnc
 10359  0037  285B               	goto	i1l6054
 10360                           
 10361                           ;interrupts.c: 97: {
 10362                           ;interrupts.c: 98: ScanTemp = (unsigned char) PS2RawToScan(PS_2_Read_Data_TEMP);
 10363  0038  084B               	movf	(_PS_2_Read_Data_TEMP+1)^(0+128),w
 10364  0039  00F9               	movwf	PS2RawToScan@Raw+1
 10365  003A  084A               	movf	_PS_2_Read_Data_TEMP^(0+128),w
 10366  003B  00F8               	movwf	PS2RawToScan@Raw
 10367  003C  319D  25FA  3180   	fcall	_PS2RawToScan
 10368  003F  0878               	movf	?_PS2RawToScan,w
 10369  0040  0020               	movlb	0	; select bank0
 10370  0041  00EE               	movwf	??_isr
 10371  0042  086E               	movf	??_isr,w
 10372  0043  0021               	movlb	1	; select bank1
 10373  0044  00C5               	movwf	isr@ScanTemp^(0+128)
 10374                           
 10375                           ;interrupts.c: 99: if(ScanTemp)
 10376  0045  0845               	movf	isr@ScanTemp^(0+128),w
 10377  0046  1903               	btfsc	3,2
 10378  0047  2859               	goto	i1l87
 10379                           
 10380                           ;interrupts.c: 100: {
 10381                           ;interrupts.c: 102: PS_2_ScanCodes[PS_2_Buffer_items] = ScanTemp;
 10382  0048  0845               	movf	isr@ScanTemp^(0+128),w
 10383  0049  0020               	movlb	0	; select bank0
 10384  004A  00EE               	movwf	??_isr
 10385  004B  0021               	movlb	1	; select bank1
 10386  004C  0852               	movf	_PS_2_Buffer_items^(0+128),w
 10387  004D  3ED8               	addlw	(low (_PS_2_ScanCodes| 0))& (0+255)
 10388  004E  0086               	movwf	6
 10389  004F  0187               	clrf	7
 10390  0050  0020               	movlb	0	; select bank0
 10391  0051  086E               	movf	??_isr,w
 10392  0052  0081               	movwf	1
 10393                           
 10394                           ;interrupts.c: 103: PS_2_Buffer_items++;
 10395  0053  3001               	movlw	1
 10396  0054  00EE               	movwf	??_isr
 10397  0055  086E               	movf	??_isr,w
 10398  0056  0021               	movlb	1	; select bank1
 10399  0057  07D2               	addwf	_PS_2_Buffer_items^(0+128),f
 10400                           
 10401                           ;interrupts.c: 104: }
 10402  0058  285B               	goto	i1l6054
 10403  0059                     i1l87:	
 10404                           
 10405                           ;interrupts.c: 105: else
 10406                           ;interrupts.c: 106: {
 10407                           ;interrupts.c: 108: ResendLastFlag = 1;
 10408  0059  01D5               	clrf	_ResendLastFlag^(0+128)
 10409  005A  0AD5               	incf	_ResendLastFlag^(0+128),f
 10410  005B                     i1l6054:	
 10411                           
 10412                           ;interrupts.c: 109: }
 10413                           ;interrupts.c: 111: }
 10414                           ;interrupts.c: 112: PS_2_bits = 0;
 10415  005B  01D3               	clrf	_PS_2_bits^(0+128)
 10416                           
 10417                           ;interrupts.c: 113: PS_2_Read_Data_TEMP = 0;
 10418  005C  01CA               	clrf	_PS_2_Read_Data_TEMP^(0+128)
 10419  005D  01CB               	clrf	(_PS_2_Read_Data_TEMP+1)^(0+128)
 10420  005E                     i1l6056:	
 10421                           
 10422                           ;interrupts.c: 114: }
 10423                           ;interrupts.c: 115: Timer2Reset();
 10424  005E  3198  2034  3180   	fcall	_Timer2Reset
 10425                           
 10426                           ;interrupts.c: 116: PIR1bits.TMR2IF = 0;
 10427  0061  0020               	movlb	0	; select bank0
 10428  0062  1091               	bcf	17,1	;volatile
 10429                           
 10430                           ;interrupts.c: 117: PIE1bits.TMR2IE = 1;
 10431  0063  0021               	movlb	1	; select bank1
 10432  0064  1491               	bsf	17,1	;volatile
 10433                           
 10434                           ;interrupts.c: 118: Timer2ON();
 10435  0065  3198  2037  3180   	fcall	i1_Timer2ON
 10436                           
 10437                           ;interrupts.c: 119: IOCAF &= ~0b00100000;
 10438  0068  30DF               	movlw	223
 10439  0069  0020               	movlb	0	; select bank0
 10440  006A  00EE               	movwf	??_isr
 10441  006B  086E               	movf	??_isr,w
 10442  006C  0027               	movlb	7	; select bank7
 10443  006D  0593               	andwf	19,f	;volatile
 10444                           
 10445                           ;interrupts.c: 120: PS_2_ENABLE_INTERRUPT(0b00100000);
 10446  006E  3020               	movlw	32
 10447  006F  3198  20A5  3180   	fcall	i1_PS_2_ENABLE_INTERRUPT
 10448                           
 10449                           ;interrupts.c: 121: }
 10450  0072  28EF               	goto	i1l104
 10451  0073                     i1l83:	
 10452                           
 10453                           ;interrupts.c: 122: else if (IOCAF & 0b00010000)
 10454  0073  1E13               	btfss	19,4	;volatile
 10455  0074  2880               	goto	i1l90
 10456                           
 10457                           ;interrupts.c: 123: {
 10458                           ;interrupts.c: 124: PS_2_DISABLE_INTERRUPT(0b00010000);
 10459  0075  3010               	movlw	16
 10460  0076  3198  20FD  3180   	fcall	i1_PS_2_DISABLE_INTERRUPT
 10461                           
 10462                           ;interrupts.c: 125: IOCAF &= ~0b00010000;
 10463  0079  30EF               	movlw	239
 10464  007A  0020               	movlb	0	; select bank0
 10465  007B  00EE               	movwf	??_isr
 10466  007C  086E               	movf	??_isr,w
 10467  007D  0027               	movlb	7	; select bank7
 10468  007E  0593               	andwf	19,f	;volatile
 10469                           
 10470                           ;interrupts.c: 126: }
 10471  007F  28EF               	goto	i1l104
 10472  0080                     i1l90:	
 10473                           
 10474                           ;interrupts.c: 127: else if (PIR1bits.RCIF)
 10475  0080  0020               	movlb	0	; select bank0
 10476  0081  1E91               	btfss	17,5	;volatile
 10477  0082  28CD               	goto	i1l92
 10478                           
 10479                           ;interrupts.c: 128: {
 10480                           ;interrupts.c: 130: PIE1bits.RCIE = 0;
 10481  0083  0021               	movlb	1	; select bank1
 10482  0084  1291               	bcf	17,5	;volatile
 10483                           
 10484                           ;interrupts.c: 132: LATC |= 0b00001000;
 10485  0085  0022               	movlb	2	; select bank2
 10486  0086  158E               	bsf	14,3	;volatile
 10487                           
 10488                           ;interrupts.c: 133: SinLEDtimer = 0;
 10489  0087  0024               	movlb	4	; select bank4
 10490  0088  01DA               	clrf	_SinLEDtimer^(0+512)
 10491  0089  01DB               	clrf	(_SinLEDtimer+1)^(0+512)
 10492                           
 10493                           ;interrupts.c: 134: Rx_fault = 0;
 10494  008A  0021               	movlb	1	; select bank1
 10495  008B  01C2               	clrf	isr@Rx_fault^(0+128)
 10496                           
 10497                           ;interrupts.c: 135: Rx_Overun = 0;
 10498  008C  01C3               	clrf	isr@Rx_Overun^(0+128)
 10499                           
 10500                           ;interrupts.c: 137: if(RC1STAbits.OERR)
 10501  008D  0023               	movlb	3	; select bank3
 10502  008E  1C9D               	btfss	29,1	;volatile
 10503  008F  2894               	goto	i1l93
 10504                           
 10505                           ;interrupts.c: 138: {
 10506                           ;interrupts.c: 139: RC1STAbits.CREN = 0;
 10507  0090  121D               	bcf	29,4	;volatile
 10508                           
 10509                           ;interrupts.c: 140: Rx_Overun = 1;
 10510  0091  0021               	movlb	1	; select bank1
 10511  0092  01C3               	clrf	isr@Rx_Overun^(0+128)
 10512  0093  0AC3               	incf	isr@Rx_Overun^(0+128),f
 10513  0094                     i1l93:	
 10514                           
 10515                           ;interrupts.c: 141: }
 10516                           ;interrupts.c: 143: if(RC1STAbits.FERR)
 10517  0094  0023               	movlb	3	; select bank3
 10518  0095  1D1D               	btfss	29,2	;volatile
 10519  0096  289A               	goto	i1l6082
 10520                           
 10521                           ;interrupts.c: 144: {
 10522                           ;interrupts.c: 145: Rx_fault = 1;
 10523  0097  0021               	movlb	1	; select bank1
 10524  0098  01C2               	clrf	isr@Rx_fault^(0+128)
 10525  0099  0AC2               	incf	isr@Rx_fault^(0+128),f
 10526  009A                     i1l6082:	
 10527                           
 10528                           ;interrupts.c: 146: }
 10529                           ;interrupts.c: 147: rx = ReadUSART();
 10530  009A  3198  206A  3180   	fcall	i1_ReadUSART
 10531  009D  0020               	movlb	0	; select bank0
 10532  009E  00EE               	movwf	??_isr
 10533  009F  086E               	movf	??_isr,w
 10534  00A0  0021               	movlb	1	; select bank1
 10535  00A1  00C4               	movwf	isr@rx^(0+128)
 10536                           
 10537                           ;interrupts.c: 148: if(Rx_Overun)
 10538  00A2  0843               	movf	isr@Rx_Overun^(0+128),w
 10539  00A3  1903               	btfsc	3,2
 10540  00A4  28A7               	goto	i1l6088
 10541                           
 10542                           ;interrupts.c: 149: {
 10543                           ;interrupts.c: 150: RC1STAbits.CREN = 1;
 10544  00A5  0023               	movlb	3	; select bank3
 10545  00A6  161D               	bsf	29,4	;volatile
 10546  00A7                     i1l6088:	
 10547                           
 10548                           ;interrupts.c: 151: }
 10549                           ;interrupts.c: 153: if(READ_CONFIG_PIN())
 10550  00A7  3198  205C  3180   	fcall	_READ_CONFIG_PIN
 10551  00AA  3A00               	xorlw	0
 10552  00AB  1903               	skipnz
 10553  00AC  28C8               	goto	i1l6098
 10554                           
 10555                           ;interrupts.c: 154: {
 10556                           ;interrupts.c: 155: if(Rx_fault == 1)
 10557  00AD  0021               	movlb	1	; select bank1
 10558  00AE  0342               	decf	isr@Rx_fault^(0+128),w
 10559  00AF  1D03               	btfss	3,2
 10560  00B0  28BC               	goto	i1l6096
 10561                           
 10562                           ;interrupts.c: 156: {
 10563                           ;interrupts.c: 157: if(rx == 0)
 10564  00B1  0844               	movf	isr@rx^(0+128),w
 10565  00B2  1D03               	btfss	3,2
 10566  00B3  28C8               	goto	i1l6098
 10567                           
 10568                           ;interrupts.c: 158: {
 10569                           ;interrupts.c: 160: UART_send_break_timed(100000);
 10570  00B4  30A0               	movlw	160
 10571  00B5  00FA               	movwf	UART_send_break_timed@US
 10572  00B6  3086               	movlw	134
 10573  00B7  00FB               	movwf	UART_send_break_timed@US+1
 10574  00B8  3199  21C9  3180   	fcall	_UART_send_break_timed
 10575                           
 10576                           ;interrupts.c: 161: }
 10577                           ;interrupts.c: 162: }
 10578  00BB  28C8               	goto	i1l6098
 10579  00BC                     i1l6096:	
 10580                           
 10581                           ;interrupts.c: 163: else
 10582                           ;interrupts.c: 164: {
 10583                           ;interrupts.c: 165: UARTchar(rx, 1 ,RC1STAbits.RX9D);
 10584  00BC  01F8               	clrf	i1UARTchar@override
 10585  00BD  0AF8               	incf	i1UARTchar@override,f
 10586  00BE  3000               	movlw	0
 10587  00BF  0023               	movlb	3	; select bank3
 10588  00C0  181D               	btfsc	29,0	;volatile
 10589  00C1  3001               	movlw	1
 10590  00C2  00F9               	movwf	i1UARTchar@NinethBit_override_data
 10591  00C3  0021               	movlb	1	; select bank1
 10592  00C4  0844               	movf	isr@rx^(0+128),w
 10593  00C5  3190  2085  3180   	fcall	i1_UARTchar
 10594  00C8                     i1l6098:	
 10595                           
 10596                           ;interrupts.c: 166: }
 10597                           ;interrupts.c: 167: }
 10598                           ;interrupts.c: 183: PIR1bits.RCIF = 0;
 10599  00C8  0020               	movlb	0	; select bank0
 10600  00C9  1291               	bcf	17,5	;volatile
 10601                           
 10602                           ;interrupts.c: 184: PIE1bits.RCIE = 1;
 10603  00CA  0021               	movlb	1	; select bank1
 10604  00CB  1691               	bsf	17,5	;volatile
 10605                           
 10606                           ;interrupts.c: 185: }
 10607  00CC  28EF               	goto	i1l104
 10608  00CD                     i1l92:	
 10609                           
 10610                           ;interrupts.c: 186: else if(PIR1bits.TMR2IF)
 10611  00CD  1C91               	btfss	17,1	;volatile
 10612  00CE  28EF               	goto	i1l104
 10613                           
 10614                           ;interrupts.c: 187: {
 10615                           ;interrupts.c: 189: PIE1bits.TMR2IE = 0;
 10616  00CF  0021               	movlb	1	; select bank1
 10617  00D0  1091               	bcf	17,1	;volatile
 10618                           
 10619                           ;interrupts.c: 190: Timer2OFF();
 10620  00D1  3198  2031  3180   	fcall	_Timer2OFF
 10621                           
 10622                           ;interrupts.c: 191: PS_2_DISABLE_INTERRUPT(0b00100000);
 10623  00D4  3020               	movlw	32
 10624  00D5  3198  20FD  3180   	fcall	i1_PS_2_DISABLE_INTERRUPT
 10625                           
 10626                           ;interrupts.c: 192: PS_2_bits = 0;
 10627  00D8  0021               	movlb	1	; select bank1
 10628  00D9  01D3               	clrf	_PS_2_bits^(0+128)
 10629                           
 10630                           ;interrupts.c: 193: PS_2_Read_Data_TEMP = 0;
 10631  00DA  01CA               	clrf	_PS_2_Read_Data_TEMP^(0+128)
 10632  00DB  01CB               	clrf	(_PS_2_Read_Data_TEMP+1)^(0+128)
 10633                           
 10634                           ;interrupts.c: 194: if(ResendLastFlag)
 10635  00DC  0855               	movf	_ResendLastFlag^(0+128),w
 10636  00DD  1903               	btfsc	3,2
 10637  00DE  28E5               	goto	i1l6118
 10638                           
 10639                           ;interrupts.c: 195: {
 10640                           ;interrupts.c: 197: ResendLast();
 10641  00DF  3186  26F8  3180   	fcall	_ResendLast
 10642                           
 10643                           ;interrupts.c: 198: ResendLastFlag = 0;
 10644  00E2  0021               	movlb	1	; select bank1
 10645  00E3  01D5               	clrf	_ResendLastFlag^(0+128)
 10646                           
 10647                           ;interrupts.c: 199: }
 10648  00E4  28E8               	goto	i1l6120
 10649  00E5                     i1l6118:	
 10650                           
 10651                           ;interrupts.c: 200: else
 10652                           ;interrupts.c: 201: {
 10653                           ;interrupts.c: 202: Process_PS2_ScanCode();
 10654  00E5  3181  2127  3180   	fcall	_Process_PS2_ScanCode
 10655  00E8                     i1l6120:	
 10656                           
 10657                           ;interrupts.c: 203: }
 10658                           ;interrupts.c: 205: PIE1bits.RCIE = 1;
 10659  00E8  0021               	movlb	1	; select bank1
 10660  00E9  1691               	bsf	17,5	;volatile
 10661                           
 10662                           ;interrupts.c: 207: PS_2_ENABLE_INTERRUPT(0b00100000);
 10663  00EA  3020               	movlw	32
 10664  00EB  3198  20A5         	fcall	i1_PS_2_ENABLE_INTERRUPT
 10665                           
 10666                           ;interrupts.c: 208: PIR1bits.TMR2IF =0;
 10667  00ED  0020               	movlb	0	; select bank0
 10668  00EE  1091               	bcf	17,1	;volatile
 10669  00EF                     i1l104:	
 10670  00EF  0020               	movlb	0	; select bank0
 10671  00F0  086F               	movf	??_isr+1,w
 10672  00F1  00FF               	movwf	127
 10673  00F2  0009               	retfie
 10674  00F3                     __end_of_isr:	
 10675                           
 10676                           	psect	text36
 10677  1837                     __ptext36:	
 10678 ;; *************** function i1_Timer2ON *****************
 10679 ;; Defined at:
 10680 ;;		line 59 in file "Timer.c"
 10681 ;; Parameters:    Size  Location     Type
 10682 ;;		None
 10683 ;; Auto vars:     Size  Location     Type
 10684 ;;		None
 10685 ;; Return value:  Size  Location     Type
 10686 ;;		None               void
 10687 ;; Registers used:
 10688 ;;		None
 10689 ;; Tracked objects:
 10690 ;;		On entry : 0/0
 10691 ;;		On exit  : 0/0
 10692 ;;		Unchanged: 0/0
 10693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10698 ;;Total ram usage:        0 bytes
 10699 ;; Hardware stack levels used:    1
 10700 ;; This function calls:
 10701 ;;		Nothing
 10702 ;; This function is called by:
 10703 ;;		_isr
 10704 ;; This function uses a non-reentrant model
 10705 ;;
 10706                           
 10707                           
 10708                           ;psect for function i1_Timer2ON
 10709  1837                     i1_Timer2ON:	
 10710                           
 10711                           ;Timer.c: 61: T2CONbits.TMR2ON = 1;
 10712                           
 10713                           ;incstack = 0
 10714                           ; Regs used in i1_Timer2ON: []
 10715  1837  0020               	movlb	0	; select bank0
 10716  1838  151C               	bsf	28,2	;volatile
 10717  1839  0008               	return
 10718  183A                     __end_ofi1_Timer2ON:	
 10719                           
 10720                           	psect	text37
 10721  18A5                     __ptext37:	
 10722 ;; *************** function i1_PS_2_ENABLE_INTERRUPT *****************
 10723 ;; Defined at:
 10724 ;;		line 199 in file "PS_2.c"
 10725 ;; Parameters:    Size  Location     Type
 10726 ;;  DATA_CLK        1    wreg     unsigned char 
 10727 ;; Auto vars:     Size  Location     Type
 10728 ;;  DATA_CLK        1    0[COMMON] unsigned char 
 10729 ;; Return value:  Size  Location     Type
 10730 ;;		None               void
 10731 ;; Registers used:
 10732 ;;		wreg, status,2, status,0
 10733 ;; Tracked objects:
 10734 ;;		On entry : 0/0
 10735 ;;		On exit  : 0/0
 10736 ;;		Unchanged: 0/0
 10737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10739 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10741 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10742 ;;Total ram usage:        1 bytes
 10743 ;; Hardware stack levels used:    1
 10744 ;; This function calls:
 10745 ;;		Nothing
 10746 ;; This function is called by:
 10747 ;;		_isr
 10748 ;; This function uses a non-reentrant model
 10749 ;;
 10750                           
 10751                           
 10752                           ;psect for function i1_PS_2_ENABLE_INTERRUPT
 10753  18A5                     i1_PS_2_ENABLE_INTERRUPT:	
 10754                           
 10755                           ;incstack = 0
 10756                           ; Regs used in i1_PS_2_ENABLE_INTERRUPT: [wreg+status,2+status,0]
 10757                           ;i1PS_2_ENABLE_INTERRUPT@DATA_CLK stored from wreg
 10758  18A5  00F0               	movwf	i1PS_2_ENABLE_INTERRUPT@DATA_CLK
 10759                           
 10760                           ;PS_2.c: 201: if(DATA_CLK == 0b00100000)
 10761  18A6  3020               	movlw	32
 10762  18A7  0670               	xorwf	i1PS_2_ENABLE_INTERRUPT@DATA_CLK,w
 10763  18A8  1D03               	btfss	3,2
 10764  18A9  28AD               	goto	i1l650
 10765                           
 10766                           ;PS_2.c: 202: {
 10767                           ;PS_2.c: 205: IOCAN |= 0b00100000;
 10768  18AA  0027               	movlb	7	; select bank7
 10769  18AB  1692               	bsf	18,5	;volatile
 10770                           
 10771                           ;PS_2.c: 207: }
 10772  18AC  0008               	return
 10773  18AD                     i1l650:	
 10774                           
 10775                           ;PS_2.c: 208: else
 10776                           ;PS_2.c: 209: {
 10777                           ;PS_2.c: 212: IOCAN |= 0b00010000;
 10778  18AD  0027               	movlb	7	; select bank7
 10779  18AE  1612               	bsf	18,4	;volatile
 10780  18AF  0008               	return
 10781  18B0                     __end_ofi1_PS_2_ENABLE_INTERRUPT:	
 10782                           
 10783                           	psect	text38
 10784  1834                     __ptext38:	
 10785 ;; *************** function _Timer2Reset *****************
 10786 ;; Defined at:
 10787 ;;		line 81 in file "Timer.c"
 10788 ;; Parameters:    Size  Location     Type
 10789 ;;		None
 10790 ;; Auto vars:     Size  Location     Type
 10791 ;;		None
 10792 ;; Return value:  Size  Location     Type
 10793 ;;		None               void
 10794 ;; Registers used:
 10795 ;;		status,2
 10796 ;; Tracked objects:
 10797 ;;		On entry : 0/0
 10798 ;;		On exit  : 0/0
 10799 ;;		Unchanged: 0/0
 10800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10804 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10805 ;;Total ram usage:        0 bytes
 10806 ;; Hardware stack levels used:    1
 10807 ;; This function calls:
 10808 ;;		Nothing
 10809 ;; This function is called by:
 10810 ;;		_isr
 10811 ;; This function uses a non-reentrant model
 10812 ;;
 10813                           
 10814                           
 10815                           ;psect for function _Timer2Reset
 10816  1834                     _Timer2Reset:	
 10817                           
 10818                           ;Timer.c: 83: TMR2 = 0;
 10819                           
 10820                           ;incstack = 0
 10821                           ; Regs used in _Timer2Reset: [status,2]
 10822  1834  0020               	movlb	0	; select bank0
 10823  1835  019A               	clrf	26	;volatile
 10824  1836  0008               	return
 10825  1837                     __end_of_Timer2Reset:	
 10826                           
 10827                           	psect	text39
 10828  1831                     __ptext39:	
 10829 ;; *************** function _Timer2OFF *****************
 10830 ;; Defined at:
 10831 ;;		line 70 in file "Timer.c"
 10832 ;; Parameters:    Size  Location     Type
 10833 ;;		None
 10834 ;; Auto vars:     Size  Location     Type
 10835 ;;		None
 10836 ;; Return value:  Size  Location     Type
 10837 ;;		None               void
 10838 ;; Registers used:
 10839 ;;		None
 10840 ;; Tracked objects:
 10841 ;;		On entry : 0/0
 10842 ;;		On exit  : 0/0
 10843 ;;		Unchanged: 0/0
 10844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10849 ;;Total ram usage:        0 bytes
 10850 ;; Hardware stack levels used:    1
 10851 ;; This function calls:
 10852 ;;		Nothing
 10853 ;; This function is called by:
 10854 ;;		_isr
 10855 ;; This function uses a non-reentrant model
 10856 ;;
 10857                           
 10858                           
 10859                           ;psect for function _Timer2OFF
 10860  1831                     _Timer2OFF:	
 10861                           
 10862                           ;Timer.c: 72: T2CONbits.TMR2ON = 0;
 10863                           
 10864                           ;incstack = 0
 10865                           ; Regs used in _Timer2OFF: []
 10866  1831  0020               	movlb	0	; select bank0
 10867  1832  111C               	bcf	28,2	;volatile
 10868  1833  0008               	return
 10869  1834                     __end_of_Timer2OFF:	
 10870                           
 10871                           	psect	text40
 10872  06F8                     __ptext40:	
 10873 ;; *************** function _ResendLast *****************
 10874 ;; Defined at:
 10875 ;;		line 1006 in file "PS_2.c"
 10876 ;; Parameters:    Size  Location     Type
 10877 ;;		None
 10878 ;; Auto vars:     Size  Location     Type
 10879 ;;		None
 10880 ;; Return value:  Size  Location     Type
 10881 ;;		None               void
 10882 ;; Registers used:
 10883 ;;		wreg, status,2, status,0, pclath, cstack
 10884 ;; Tracked objects:
 10885 ;;		On entry : 0/0
 10886 ;;		On exit  : 0/0
 10887 ;;		Unchanged: 0/0
 10888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10893 ;;Total ram usage:        0 bytes
 10894 ;; Hardware stack levels used:    1
 10895 ;; Hardware stack levels required when called:    2
 10896 ;; This function calls:
 10897 ;;		i1_PS_2_DISABLE_INTERRUPT
 10898 ;;		i1_Send_PS2
 10899 ;; This function is called by:
 10900 ;;		_isr
 10901 ;; This function uses a non-reentrant model
 10902 ;;
 10903                           
 10904                           
 10905                           ;psect for function _ResendLast
 10906  06F8                     _ResendLast:	
 10907                           
 10908                           ;PS_2.c: 1008: PS_2_DISABLE_INTERRUPT(0b00100000);
 10909                           
 10910                           ;incstack = 0
 10911                           ; Regs used in _ResendLast: [wreg+status,2+status,0+pclath+cstack]
 10912  06F8  3020               	movlw	32
 10913  06F9  3198  20FD  3186   	fcall	i1_PS_2_DISABLE_INTERRUPT
 10914                           
 10915                           ;PS_2.c: 1010: Send_PS2(0xFE);
 10916  06FC  30FE               	movlw	254
 10917  06FD  318C  24DE         	fcall	i1_Send_PS2
 10918  06FF  0008               	return
 10919  0700                     __end_of_ResendLast:	
 10920                           
 10921                           	psect	text41
 10922  18FD                     __ptext41:	
 10923 ;; *************** function i1_PS_2_DISABLE_INTERRUPT *****************
 10924 ;; Defined at:
 10925 ;;		line 178 in file "PS_2.c"
 10926 ;; Parameters:    Size  Location     Type
 10927 ;;  DATA_CLK        1    wreg     unsigned char 
 10928 ;; Auto vars:     Size  Location     Type
 10929 ;;  DATA_CLK        1    1[COMMON] unsigned char 
 10930 ;; Return value:  Size  Location     Type
 10931 ;;		None               void
 10932 ;; Registers used:
 10933 ;;		wreg, status,2, status,0
 10934 ;; Tracked objects:
 10935 ;;		On entry : 0/0
 10936 ;;		On exit  : 0/0
 10937 ;;		Unchanged: 0/0
 10938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10940 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10941 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10942 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10943 ;;Total ram usage:        2 bytes
 10944 ;; Hardware stack levels used:    1
 10945 ;; This function calls:
 10946 ;;		Nothing
 10947 ;; This function is called by:
 10948 ;;		_isr
 10949 ;;		_ResendLast
 10950 ;; This function uses a non-reentrant model
 10951 ;;
 10952                           
 10953                           
 10954                           ;psect for function i1_PS_2_DISABLE_INTERRUPT
 10955  18FD                     i1_PS_2_DISABLE_INTERRUPT:	
 10956                           
 10957                           ;incstack = 0
 10958                           ; Regs used in i1_PS_2_DISABLE_INTERRUPT: [wreg+status,2+status,0]
 10959                           ;i1PS_2_DISABLE_INTERRUPT@DATA_CLK stored from wreg
 10960  18FD  00F1               	movwf	i1PS_2_DISABLE_INTERRUPT@DATA_CLK
 10961                           
 10962                           ;PS_2.c: 180: if(DATA_CLK == 0b00100000)
 10963  18FE  3020               	movlw	32
 10964  18FF  0671               	xorwf	i1PS_2_DISABLE_INTERRUPT@DATA_CLK,w
 10965  1900  1D03               	btfss	3,2
 10966  1901  2908               	goto	i1l5176
 10967                           
 10968                           ;PS_2.c: 181: {
 10969                           ;PS_2.c: 184: IOCAN &= ~0b00100000;
 10970  1902  30DF               	movlw	223
 10971  1903  00F0               	movwf	??i1_PS_2_DISABLE_INTERRUPT
 10972  1904  0870               	movf	??i1_PS_2_DISABLE_INTERRUPT,w
 10973  1905  0027               	movlb	7	; select bank7
 10974  1906  0592               	andwf	18,f	;volatile
 10975                           
 10976                           ;PS_2.c: 185: }
 10977  1907  0008               	return
 10978  1908                     i1l5176:	
 10979                           
 10980                           ;PS_2.c: 186: else
 10981                           ;PS_2.c: 187: {
 10982                           ;PS_2.c: 190: IOCAN &= ~0b00010000;
 10983  1908  30EF               	movlw	239
 10984  1909  00F0               	movwf	??i1_PS_2_DISABLE_INTERRUPT
 10985  190A  0870               	movf	??i1_PS_2_DISABLE_INTERRUPT,w
 10986  190B  0027               	movlb	7	; select bank7
 10987  190C  0592               	andwf	18,f	;volatile
 10988  190D  0008               	return
 10989  190E                     __end_ofi1_PS_2_DISABLE_INTERRUPT:	
 10990                           
 10991                           	psect	text42
 10992  185C                     __ptext42:	
 10993 ;; *************** function _READ_CONFIG_PIN *****************
 10994 ;; Defined at:
 10995 ;;		line 146 in file "MISC.c"
 10996 ;; Parameters:    Size  Location     Type
 10997 ;;		None
 10998 ;; Auto vars:     Size  Location     Type
 10999 ;;		None
 11000 ;; Return value:  Size  Location     Type
 11001 ;;                  1    wreg      unsigned char 
 11002 ;; Registers used:
 11003 ;;		wreg
 11004 ;; Tracked objects:
 11005 ;;		On entry : 0/0
 11006 ;;		On exit  : 0/0
 11007 ;;		Unchanged: 0/0
 11008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11012 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11013 ;;Total ram usage:        0 bytes
 11014 ;; Hardware stack levels used:    1
 11015 ;; This function calls:
 11016 ;;		Nothing
 11017 ;; This function is called by:
 11018 ;;		_isr
 11019 ;; This function uses a non-reentrant model
 11020 ;;
 11021                           
 11022                           
 11023                           ;psect for function _READ_CONFIG_PIN
 11024  185C                     _READ_CONFIG_PIN:	
 11025                           
 11026                           ;MISC.c: 150: if((PORTC & 0b00000001) == 0b00000001)
 11027                           
 11028                           ;incstack = 0
 11029                           ; Regs used in _READ_CONFIG_PIN: [wreg]
 11030  185C  0020               	movlb	0	; select bank0
 11031  185D  1C0E               	btfss	14,0	;volatile
 11032  185E  2861               	goto	i1l5352
 11033                           
 11034                           ;MISC.c: 151: {
 11035                           ;MISC.c: 152: return (1);
 11036  185F  3001               	movlw	1
 11037  1860  0008               	return
 11038  1861                     i1l5352:	
 11039                           
 11040                           ;MISC.c: 153: }
 11041                           ;MISC.c: 155: return 0;
 11042  1861  3000               	movlw	0
 11043  1862  0008               	return
 11044  1863                     __end_of_READ_CONFIG_PIN:	
 11045                           
 11046                           	psect	text43
 11047  0127                     __ptext43:	
 11048 ;; *************** function _Process_PS2_ScanCode *****************
 11049 ;; Defined at:
 11050 ;;		line 257 in file "PS_2.c"
 11051 ;; Parameters:    Size  Location     Type
 11052 ;;		None
 11053 ;; Auto vars:     Size  Location     Type
 11054 ;;  buf            60    0[BANK3 ] unsigned char [60]
 11055 ;;  temp            1   65[BANK3 ] unsigned char 
 11056 ;;  shortbreak      1   64[BANK3 ] unsigned char 
 11057 ;; Return value:  Size  Location     Type
 11058 ;;		None               void
 11059 ;; Registers used:
 11060 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11061 ;; Tracked objects:
 11062 ;;		On entry : 0/0
 11063 ;;		On exit  : 0/0
 11064 ;;		Unchanged: 0/0
 11065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11067 ;;      Locals:         0       0       0       0      66       0       0       0       0       0       0       0       
      +0       0
 11068 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 11069 ;;      Totals:         0       0       6       0      66       0       0       0       0       0       0       0       
      +0       0
 11070 ;;Total ram usage:       72 bytes
 11071 ;; Hardware stack levels used:    1
 11072 ;; Hardware stack levels required when called:    5
 11073 ;; This function calls:
 11074 ;;		_BufferShiftBack
 11075 ;;		_Decode_Scan_Code
 11076 ;;		_Decode_Scan_Code_Function
 11077 ;;		_Decode_Scan_Code_FunctionE0
 11078 ;;		_Decode_Scan_Code_Shift
 11079 ;;		_ISNUMBER
 11080 ;;		_SetBaud
 11081 ;;		_UART_send_break
 11082 ;;		_UART_send_break_timed
 11083 ;;		___lmul
 11084 ;;		_cleanBuffer
 11085 ;;		_sprintf
 11086 ;;		i1_Send_PS2
 11087 ;;		i1_UARTchar
 11088 ;;		i1_UARTstringWAIT
 11089 ;;		i1_delayUS
 11090 ;; This function is called by:
 11091 ;;		_isr
 11092 ;; This function uses a non-reentrant model
 11093 ;;
 11094                           
 11095                           
 11096                           ;psect for function _Process_PS2_ScanCode
 11097  0127                     _Process_PS2_ScanCode:	
 11098                           
 11099                           ;PS_2.c: 259: unsigned char temp = 0;
 11100                           
 11101                           ;incstack = 0
 11102                           ; Regs used in _Process_PS2_ScanCode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11103  0127  0023               	movlb	3	; select bank3
 11104  0128  01E1               	clrf	Process_PS2_ScanCode@temp^(0+384)
 11105                           
 11106                           ;PS_2.c: 260: unsigned char shortbreak = 0;
 11107  0129  01E0               	clrf	Process_PS2_ScanCode@shortbreak^(0+384)
 11108                           
 11109                           ;PS_2.c: 261: unsigned char buf[60];
 11110                           ;PS_2.c: 263: if(PS_2_Buffer_items != 0)
 11111  012A  0021               	movlb	1	; select bank1
 11112  012B  0852               	movf	_PS_2_Buffer_items^(0+128),w
 11113  012C  1903               	btfsc	3,2
 11114  012D  0008               	return
 11115  012E                     i1l5870:	
 11116  012E  0021               	movlb	1	; select bank1
 11117  012F  0852               	movf	_PS_2_Buffer_items^(0+128),w
 11118  0130  1903               	btfsc	3,2
 11119  0131  0008               	return
 11120                           
 11121                           ;PS_2.c: 267: {
 11122                           ;PS_2.c: 269: if(PS_2_ScanCodes[0])
 11123                           
 11124                           ;PS_2.c: 264: {
 11125                           ;PS_2.c: 266: while(PS_2_Buffer_items != 0)
 11126  0132  0858               	movf	_PS_2_ScanCodes^(0+128),w
 11127  0133  1903               	btfsc	3,2
 11128  0134  2E7D               	goto	i1l5866
 11129                           
 11130                           ;PS_2.c: 270: {
 11131                           ;PS_2.c: 272: PS_2_Read_Data_First = PS_2_ScanCodes[0];
 11132  0135  0858               	movf	_PS_2_ScanCodes^(0+128),w
 11133  0136  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11134  0137  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11135  0138  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11136  0139  0023               	movlb	3	; select bank3
 11137  013A  00E2               	movwf	_PS_2_Read_Data_First^(0+384)
 11138  013B  0021               	movlb	1	; select bank1
 11139  013C  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11140  013D  0023               	movlb	3	; select bank3
 11141  013E  00E3               	movwf	(_PS_2_Read_Data_First+1)^(0+384)
 11142                           
 11143                           ;PS_2.c: 273: if(PS_2_Read_Data_First == 0xF0)
 11144  013F  30F0               	movlw	240
 11145  0140  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11146  0141  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11147  0142  1D03               	btfss	3,2
 11148  0143  295B               	goto	i1l5378
 11149                           
 11150                           ;PS_2.c: 274: {
 11151                           ;PS_2.c: 275: PS_2_Read_Data_First = PS_2_ScanCodes[0];
 11152  0144  0021               	movlb	1	; select bank1
 11153  0145  0858               	movf	_PS_2_ScanCodes^(0+128),w
 11154  0146  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11155  0147  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11156  0148  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11157  0149  0023               	movlb	3	; select bank3
 11158  014A  00E2               	movwf	_PS_2_Read_Data_First^(0+384)
 11159  014B  0021               	movlb	1	; select bank1
 11160  014C  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11161  014D  0023               	movlb	3	; select bank3
 11162  014E  00E3               	movwf	(_PS_2_Read_Data_First+1)^(0+384)
 11163                           
 11164                           ;PS_2.c: 276: PS_2_Read_Data_Second = PS_2_ScanCodes[1];
 11165  014F  0021               	movlb	1	; select bank1
 11166  0150  0859               	movf	(_PS_2_ScanCodes^(0+128)+1),w
 11167  0151  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11168  0152  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11169  0153  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11170  0154  0023               	movlb	3	; select bank3
 11171  0155  00E4               	movwf	_PS_2_Read_Data_Second^(0+384)
 11172  0156  0021               	movlb	1	; select bank1
 11173  0157  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11174  0158  0023               	movlb	3	; select bank3
 11175  0159  00E5               	movwf	(_PS_2_Read_Data_Second+1)^(0+384)
 11176  015A  29AA               	goto	i1l5406
 11177  015B                     i1l5378:	
 11178                           ;PS_2.c: 279: }
 11179                           
 11180                           ;PS_2.c: 278: BufferShiftBack(PS_2_ScanCodes,2,12);
 11181                           
 11182                           ;PS_2.c: 277: PS_2_Buffer_items -= 2;
 11183                           
 11184                           
 11185                           ;PS_2.c: 280: else if(PS_2_Read_Data_First == 0xE0)
 11186  015B  30E0               	movlw	224
 11187  015C  0023               	movlb	3	; select bank3
 11188  015D  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11189  015E  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11190  015F  1D03               	btfss	3,2
 11191  0160  29AF               	goto	i1l5410
 11192                           
 11193                           ;PS_2.c: 281: {
 11194                           ;PS_2.c: 282: PS_2_Read_Data_Second = PS_2_ScanCodes[1];
 11195  0161  0021               	movlb	1	; select bank1
 11196  0162  0859               	movf	(_PS_2_ScanCodes^(0+128)+1),w
 11197  0163  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11198  0164  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11199  0165  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11200  0166  0023               	movlb	3	; select bank3
 11201  0167  00E4               	movwf	_PS_2_Read_Data_Second^(0+384)
 11202  0168  0021               	movlb	1	; select bank1
 11203  0169  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11204  016A  0023               	movlb	3	; select bank3
 11205  016B  00E5               	movwf	(_PS_2_Read_Data_Second+1)^(0+384)
 11206                           
 11207                           ;PS_2.c: 283: if(PS_2_Read_Data_Second == 0x12)
 11208  016C  3012               	movlw	18
 11209  016D  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11210  016E  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11211  016F  1D03               	btfss	3,2
 11212  0170  2984               	goto	i1l5390
 11213                           
 11214                           ;PS_2.c: 284: {
 11215                           ;PS_2.c: 286: PS_2_Read_Data_First = 0;
 11216  0171  01E2               	clrf	_PS_2_Read_Data_First^(0+384)
 11217  0172  01E3               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
 11218                           
 11219                           ;PS_2.c: 287: PS_2_Read_Data_Second = 0;
 11220  0173  01E4               	clrf	_PS_2_Read_Data_Second^(0+384)
 11221  0174  01E5               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
 11222                           
 11223                           ;PS_2.c: 288: PS_2_Buffer_items -= 4;
 11224  0175  3004               	movlw	4
 11225  0176  0021               	movlb	1	; select bank1
 11226  0177  02D2               	subwf	_PS_2_Buffer_items^(0+128),f
 11227                           
 11228                           ;PS_2.c: 289: BufferShiftBack(PS_2_ScanCodes,4,12);
 11229  0178  3004               	movlw	4
 11230  0179  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11231  017A  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11232  017B  00F0               	movwf	BufferShiftBack@shift
 11233  017C  300C               	movlw	12
 11234  017D  00BD               	movwf	(??_Process_PS2_ScanCode+1)^(0+128)
 11235  017E  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11236  017F  00F1               	movwf	BufferShiftBack@size
 11237  0180  30D8               	movlw	(low (_PS_2_ScanCodes| 0))& (0+255)
 11238  0181  319C  2459  3181   	fcall	_BufferShiftBack
 11239  0184                     i1l5390:	
 11240                           
 11241                           ;PS_2.c: 290: }
 11242                           ;PS_2.c: 291: if(PS_2_Read_Data_Second == 0xF0)
 11243  0184  30F0               	movlw	240
 11244  0185  0023               	movlb	3	; select bank3
 11245  0186  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11246  0187  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11247  0188  1D03               	btfss	3,2
 11248  0189  29AA               	goto	i1l5406
 11249                           
 11250                           ;PS_2.c: 292: {
 11251                           ;PS_2.c: 293: PS_2_Read_Data_Third = PS_2_ScanCodes[2];
 11252  018A  0021               	movlb	1	; select bank1
 11253  018B  085A               	movf	(_PS_2_ScanCodes^(0+128)+2),w
 11254  018C  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11255  018D  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11256  018E  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11257  018F  0023               	movlb	3	; select bank3
 11258  0190  00E6               	movwf	_PS_2_Read_Data_Third^(0+384)
 11259  0191  0021               	movlb	1	; select bank1
 11260  0192  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11261  0193  0023               	movlb	3	; select bank3
 11262  0194  00E7               	movwf	(_PS_2_Read_Data_Third+1)^(0+384)
 11263                           
 11264                           ;PS_2.c: 294: if(PS_2_Read_Data_Third == 0x7C)
 11265  0195  307C               	movlw	124
 11266  0196  0666               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 11267  0197  0467               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11268  0198  1D03               	btfss	3,2
 11269  0199  29A5               	goto	i1l5402
 11270                           
 11271                           ;PS_2.c: 295: {
 11272                           ;PS_2.c: 297: PS_2_Read_Data_First = 0;
 11273  019A  01E2               	clrf	_PS_2_Read_Data_First^(0+384)
 11274  019B  01E3               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
 11275                           
 11276                           ;PS_2.c: 298: PS_2_Read_Data_Second = 0;
 11277  019C  01E4               	clrf	_PS_2_Read_Data_Second^(0+384)
 11278  019D  01E5               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
 11279                           
 11280                           ;PS_2.c: 299: PS_2_Read_Data_Third = 0;
 11281  019E  01E6               	clrf	_PS_2_Read_Data_Third^(0+384)
 11282  019F  01E7               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
 11283                           
 11284                           ;PS_2.c: 300: PS_2_Buffer_items -= 6;
 11285  01A0  3006               	movlw	6
 11286  01A1  0021               	movlb	1	; select bank1
 11287  01A2  02D2               	subwf	_PS_2_Buffer_items^(0+128),f
 11288                           
 11289                           ;PS_2.c: 301: BufferShiftBack(PS_2_ScanCodes,6,12);
 11290  01A3  3006               	movlw	6
 11291  01A4  29C5               	goto	L12
 11292  01A5                     i1l5402:	
 11293                           ;PS_2.c: 302: }
 11294                           
 11295                           
 11296                           ;PS_2.c: 303: else
 11297                           ;PS_2.c: 304: {
 11298                           ;PS_2.c: 305: PS_2_Buffer_items -= 3;
 11299  01A5  3003               	movlw	3
 11300  01A6  0021               	movlb	1	; select bank1
 11301  01A7  02D2               	subwf	_PS_2_Buffer_items^(0+128),f
 11302                           
 11303                           ;PS_2.c: 306: BufferShiftBack(PS_2_ScanCodes,3,12);
 11304  01A8  3003               	movlw	3
 11305  01A9  29C5               	goto	L12
 11306  01AA                     i1l5406:	
 11307                           ;PS_2.c: 307: }
 11308                           ;PS_2.c: 308: }
 11309                           
 11310                           
 11311                           ;PS_2.c: 309: else
 11312                           ;PS_2.c: 310: {
 11313                           ;PS_2.c: 311: PS_2_Buffer_items -= 2;
 11314  01AA  3002               	movlw	2
 11315  01AB  0021               	movlb	1	; select bank1
 11316  01AC  02D2               	subwf	_PS_2_Buffer_items^(0+128),f
 11317                           
 11318                           ;PS_2.c: 312: BufferShiftBack(PS_2_ScanCodes,2,12);
 11319  01AD  3002               	movlw	2
 11320  01AE  29C5               	goto	L12
 11321  01AF                     i1l5410:	
 11322                           ;PS_2.c: 313: }
 11323                           ;PS_2.c: 314: }
 11324                           
 11325                           
 11326                           ;PS_2.c: 315: else if(PS_2_Read_Data_First == 0xE1)
 11327  01AF  30E1               	movlw	225
 11328  01B0  0023               	movlb	3	; select bank3
 11329  01B1  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11330  01B2  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11331  01B3  1D03               	btfss	3,2
 11332  01B4  29CC               	goto	i1l5420
 11333                           
 11334                           ;PS_2.c: 316: {
 11335                           ;PS_2.c: 321: PS_2_Read_Data_First = 0xE0;
 11336  01B5  30E0               	movlw	224
 11337  01B6  00E2               	movwf	_PS_2_Read_Data_First^(0+384)
 11338  01B7  3000               	movlw	0
 11339  01B8  00E3               	movwf	(_PS_2_Read_Data_First^(0+384)+1)
 11340                           
 11341                           ;PS_2.c: 322: PS_2_Read_Data_Second = 0x69;
 11342  01B9  3069               	movlw	105
 11343  01BA  00E4               	movwf	_PS_2_Read_Data_Second^(0+384)
 11344  01BB  3000               	movlw	0
 11345  01BC  00E5               	movwf	(_PS_2_Read_Data_Second^(0+384)+1)
 11346                           
 11347                           ;PS_2.c: 323: PS_2_Buffer_items -= 8;
 11348  01BD  3008               	movlw	8
 11349  01BE  0021               	movlb	1	; select bank1
 11350  01BF  02D2               	subwf	_PS_2_Buffer_items^(0+128),f
 11351                           
 11352                           ;PS_2.c: 324: shortbreak = 1;
 11353  01C0  0023               	movlb	3	; select bank3
 11354  01C1  01E0               	clrf	Process_PS2_ScanCode@shortbreak^(0+384)
 11355  01C2  0AE0               	incf	Process_PS2_ScanCode@shortbreak^(0+384),f
 11356                           
 11357                           ;PS_2.c: 325: BufferShiftBack(PS_2_ScanCodes,8,12);
 11358  01C3  3008               	movlw	8
 11359  01C4  0021               	movlb	1	; select bank1
 11360  01C5                     L12:	
 11361  01C5  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11362  01C6  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11363  01C7  00F0               	movwf	BufferShiftBack@shift
 11364  01C8  300C               	movlw	12
 11365  01C9  00BD               	movwf	(??_Process_PS2_ScanCode+1)^(0+128)
 11366  01CA  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11367  01CB  29D4               	goto	L8
 11368  01CC                     i1l5420:	
 11369                           ;PS_2.c: 326: }
 11370                           
 11371                           
 11372                           ;PS_2.c: 327: else
 11373                           ;PS_2.c: 328: {
 11374                           ;PS_2.c: 329: PS_2_Buffer_items -= 1;
 11375  01CC  3001               	movlw	1
 11376  01CD  0021               	movlb	1	; select bank1
 11377  01CE  02D2               	subwf	_PS_2_Buffer_items^(0+128),f
 11378                           
 11379                           ;PS_2.c: 330: BufferShiftBack(PS_2_ScanCodes,1,12);
 11380  01CF  01F0               	clrf	BufferShiftBack@shift
 11381  01D0  0AF0               	incf	BufferShiftBack@shift,f
 11382  01D1  300C               	movlw	12
 11383  01D2  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11384  01D3  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11385  01D4                     L8:	
 11386  01D4  00F1               	movwf	BufferShiftBack@size
 11387  01D5  30D8               	movlw	(low (_PS_2_ScanCodes| 0))& (0+255)
 11388  01D6  319C  2459  3181   	fcall	_BufferShiftBack
 11389                           
 11390                           ;PS_2.c: 331: }
 11391                           ;PS_2.c: 334: if(PS_2_Read_Data_Third)
 11392  01D9  0023               	movlb	3	; select bank3
 11393  01DA  0866               	movf	_PS_2_Read_Data_Third^(0+384),w
 11394  01DB  0467               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11395  01DC  1903               	btfsc	3,2
 11396  01DD  2A00               	goto	i1l5442
 11397                           
 11398                           ;PS_2.c: 335: {
 11399                           ;PS_2.c: 337: if(PS_2_Read_Data_First == 0xE0)
 11400  01DE  30E0               	movlw	224
 11401  01DF  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11402  01E0  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11403  01E1  1D03               	btfss	3,2
 11404  01E2  2ADC               	goto	i1l5538
 11405                           
 11406                           ;PS_2.c: 338: {
 11407                           ;PS_2.c: 339: if(PS_2_Read_Data_Second == 0xF0)
 11408  01E3  30F0               	movlw	240
 11409  01E4  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11410  01E5  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11411  01E6  1D03               	btfss	3,2
 11412  01E7  2ADC               	goto	i1l5538
 11413                           
 11414                           ;PS_2.c: 340: {
 11415                           ;PS_2.c: 341: if(PS_2_Read_Data_Third == 0x11 )
 11416  01E8  3011               	movlw	17
 11417  01E9  0666               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 11418  01EA  0467               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11419  01EB  1D03               	btfss	3,2
 11420  01EC  29EF               	goto	i1l5434
 11421                           
 11422                           ;PS_2.c: 342: {
 11423                           ;PS_2.c: 343: LALT = 0;
 11424  01ED  01EA               	clrf	_LALT^(0+384)
 11425                           
 11426                           ;PS_2.c: 344: }
 11427  01EE  2ADC               	goto	i1l5538
 11428  01EF                     i1l5434:	
 11429                           
 11430                           ;PS_2.c: 345: else if(PS_2_Read_Data_Third == 0x14 )
 11431  01EF  3014               	movlw	20
 11432  01F0  0666               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 11433  01F1  0467               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11434  01F2  1D03               	btfss	3,2
 11435  01F3  29F7               	goto	i1l5438
 11436                           
 11437                           ;PS_2.c: 346: {
 11438                           ;PS_2.c: 347: LControl = 0;
 11439  01F4  0021               	movlb	1	; select bank1
 11440  01F5  01D0               	clrf	_LControl^(0+128)
 11441                           
 11442                           ;PS_2.c: 348: }
 11443  01F6  2ADC               	goto	i1l5538
 11444  01F7                     i1l5438:	
 11445                           
 11446                           ;PS_2.c: 349: else if(PS_2_Read_Data_Third == 0x71 )
 11447  01F7  3071               	movlw	113
 11448  01F8  0023               	movlb	3	; select bank3
 11449  01F9  0666               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 11450  01FA  0467               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11451  01FB  1D03               	btfss	3,2
 11452  01FC  2ADC               	goto	i1l5538
 11453                           
 11454                           ;PS_2.c: 350: {
 11455                           ;PS_2.c: 351: Delete = 0;
 11456  01FD  0021               	movlb	1	; select bank1
 11457  01FE  01CF               	clrf	_Delete^(0+128)
 11458                           
 11459                           ;PS_2.c: 352: }
 11460                           ;PS_2.c: 353: }
 11461                           ;PS_2.c: 354: }
 11462                           ;PS_2.c: 355: }
 11463  01FF  2ADC               	goto	i1l5538
 11464  0200                     i1l5442:	
 11465                           
 11466                           ;PS_2.c: 356: else if(PS_2_Read_Data_Second)
 11467  0200  0023               	movlb	3	; select bank3
 11468  0201  0864               	movf	_PS_2_Read_Data_Second^(0+384),w
 11469  0202  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11470  0203  1903               	btfsc	3,2
 11471  0204  2ADC               	goto	i1l5538
 11472                           
 11473                           ;PS_2.c: 357: {
 11474                           ;PS_2.c: 359: if(PS_2_Read_Data_First == 0xF0)
 11475  0205  30F0               	movlw	240
 11476  0206  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11477  0207  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11478  0208  1D03               	btfss	3,2
 11479  0209  2A87               	goto	i1l5506
 11480                           
 11481                           ;PS_2.c: 360: {
 11482                           ;PS_2.c: 362: if(PS_2_Read_Data_Second == 0x12)
 11483  020A  3012               	movlw	18
 11484  020B  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11485  020C  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11486  020D  1D03               	btfss	3,2
 11487  020E  2A11               	goto	i1l5450
 11488                           
 11489                           ;PS_2.c: 363: {
 11490                           ;PS_2.c: 364: Right_Shift_Key =0;
 11491  020F  01EE               	clrf	_Right_Shift_Key^(0+384)
 11492                           
 11493                           ;PS_2.c: 365: }
 11494  0210  2A26               	goto	i1l5462
 11495  0211                     i1l5450:	
 11496                           
 11497                           ;PS_2.c: 366: else if(PS_2_Read_Data_Second == 0x59)
 11498  0211  3059               	movlw	89
 11499  0212  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11500  0213  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11501  0214  1D03               	btfss	3,2
 11502  0215  2A18               	goto	i1l5454
 11503                           
 11504                           ;PS_2.c: 367: {
 11505                           ;PS_2.c: 368: Left_Shift_Key =0;
 11506  0216  01EB               	clrf	_Left_Shift_Key^(0+384)
 11507                           
 11508                           ;PS_2.c: 369: }
 11509  0217  2A26               	goto	i1l5462
 11510  0218                     i1l5454:	
 11511                           
 11512                           ;PS_2.c: 370: else if(PS_2_Read_Data_Second == 0x14)
 11513  0218  3014               	movlw	20
 11514  0219  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11515  021A  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11516  021B  1D03               	btfss	3,2
 11517  021C  2A20               	goto	i1l5458
 11518                           
 11519                           ;PS_2.c: 371: {
 11520                           ;PS_2.c: 372: RControl =0;
 11521  021D  0021               	movlb	1	; select bank1
 11522  021E  01D4               	clrf	_RControl^(0+128)
 11523                           
 11524                           ;PS_2.c: 373: }
 11525  021F  2A26               	goto	i1l5462
 11526  0220                     i1l5458:	
 11527                           
 11528                           ;PS_2.c: 374: else if(PS_2_Read_Data_Second == 0x11 )
 11529  0220  3011               	movlw	17
 11530  0221  0023               	movlb	3	; select bank3
 11531  0222  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11532  0223  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11533  0224  1903               	btfsc	3,2
 11534                           
 11535                           ;PS_2.c: 375: {
 11536                           ;PS_2.c: 376: RALT =0;
 11537  0225  01ED               	clrf	_RALT^(0+384)
 11538  0226                     i1l5462:	
 11539                           
 11540                           ;PS_2.c: 377: }
 11541                           ;PS_2.c: 378: if(PS_2_Read_Data_Second == 0x59 || PS_2_Read_Data_Second == 0x12)
 11542  0226  3059               	movlw	89
 11543  0227  0023               	movlb	3	; select bank3
 11544  0228  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11545  0229  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11546  022A  1903               	btfsc	3,2
 11547  022B  2A31               	goto	i1l5466
 11548  022C  3012               	movlw	18
 11549  022D  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11550  022E  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11551  022F  1D03               	btfss	3,2
 11552  0230  2A7F               	goto	i1l5502
 11553  0231                     i1l5466:	
 11554                           
 11555                           ;PS_2.c: 379: {
 11556                           ;PS_2.c: 380: if(Right_Shift_Key == 0 && Left_Shift_Key == 0)
 11557  0231  086E               	movf	_Right_Shift_Key^(0+384),w
 11558  0232  1D03               	btfss	3,2
 11559  0233  2ADC               	goto	i1l5538
 11560  0234  086B               	movf	_Left_Shift_Key^(0+384),w
 11561  0235  1D03               	btfss	3,2
 11562  0236  2ADC               	goto	i1l5538
 11563                           
 11564                           ;PS_2.c: 381: {
 11565                           ;PS_2.c: 382: if(!Send_PS2(0xED))
 11566  0237  30ED               	movlw	237
 11567  0238  318C  24DE  3181   	fcall	i1_Send_PS2
 11568  023B  3A00               	xorlw	0
 11569  023C  1D03               	skipz
 11570  023D  2A47               	goto	i1l5476
 11571                           
 11572                           ;PS_2.c: 383: {
 11573                           ;PS_2.c: 384: if(!Send_PS2(0x00))
 11574  023E  3000               	movlw	0
 11575  023F  318C  24DE  3181   	fcall	i1_Send_PS2
 11576  0242  3A00               	xorlw	0
 11577  0243  1D03               	skipz
 11578  0244  2A47               	goto	i1l5476
 11579                           
 11580                           ;PS_2.c: 385: {
 11581                           ;PS_2.c: 386: Shift_Key = 0;
 11582  0245  0023               	movlb	3	; select bank3
 11583  0246  01EF               	clrf	_Shift_Key^(0+384)
 11584  0247                     i1l5476:	
 11585                           
 11586                           ;PS_2.c: 387: }
 11587                           ;PS_2.c: 388: }
 11588                           ;PS_2.c: 389: if(Caps_Lock)
 11589  0247  0023               	movlb	3	; select bank3
 11590  0248  0869               	movf	_Caps_Lock^(0+384),w
 11591  0249  1903               	btfsc	3,2
 11592  024A  2A65               	goto	i1l5490
 11593                           
 11594                           ;PS_2.c: 390: {
 11595                           ;PS_2.c: 391: CapsCount=0;
 11596  024B  01E8               	clrf	_CapsCount^(0+384)
 11597  024C                     i1l5488:	
 11598                           ;PS_2.c: 392: while(CapsCount<10)
 11599                           
 11600  024C  300A               	movlw	10
 11601  024D  0268               	subwf	_CapsCount^(0+384),w
 11602  024E  1803               	btfsc	3,0
 11603  024F  2ADC               	goto	i1l5538
 11604                           
 11605                           ;PS_2.c: 393: {
 11606                           ;PS_2.c: 394: if(!Send_PS2(0xED))
 11607  0250  30ED               	movlw	237
 11608  0251  318C  24DE  3181   	fcall	i1_Send_PS2
 11609  0254  3A00               	xorlw	0
 11610  0255  1D03               	skipz
 11611  0256  2A5E               	goto	i1l5486
 11612                           
 11613                           ;PS_2.c: 395: {
 11614                           ;PS_2.c: 396: if(!Send_PS2(0x04))
 11615  0257  3004               	movlw	4
 11616  0258  318C  24DE  3181   	fcall	i1_Send_PS2
 11617  025B  3A00               	xorlw	0
 11618  025C  1903               	btfsc	3,2
 11619  025D  2ADC               	goto	i1l5538
 11620  025E                     i1l5486:	
 11621                           ;PS_2.c: 397: {
 11622                           ;PS_2.c: 398: break;
 11623                           
 11624                           
 11625                           ;PS_2.c: 399: }
 11626                           ;PS_2.c: 400: }
 11627                           ;PS_2.c: 401: CapsCount++;
 11628  025E  3001               	movlw	1
 11629  025F  0021               	movlb	1	; select bank1
 11630  0260  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11631  0261  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11632  0262  0023               	movlb	3	; select bank3
 11633  0263  07E8               	addwf	_CapsCount^(0+384),f
 11634  0264  2A4C               	goto	i1l5488
 11635  0265                     i1l5490:	
 11636                           ;PS_2.c: 402: }
 11637                           ;PS_2.c: 403: }
 11638                           
 11639                           
 11640                           ;PS_2.c: 404: else
 11641                           ;PS_2.c: 405: {
 11642                           ;PS_2.c: 406: CapsCount=0;
 11643  0265  01E8               	clrf	_CapsCount^(0+384)
 11644  0266                     i1l5500:	
 11645                           ;PS_2.c: 407: while(CapsCount<10)
 11646                           
 11647  0266  300A               	movlw	10
 11648  0267  0268               	subwf	_CapsCount^(0+384),w
 11649  0268  1803               	btfsc	3,0
 11650  0269  2ADC               	goto	i1l5538
 11651                           
 11652                           ;PS_2.c: 408: {
 11653                           ;PS_2.c: 409: if(!Send_PS2(0xED))
 11654  026A  30ED               	movlw	237
 11655  026B  318C  24DE  3181   	fcall	i1_Send_PS2
 11656  026E  3A00               	xorlw	0
 11657  026F  1D03               	skipz
 11658  0270  2A78               	goto	i1l5498
 11659                           
 11660                           ;PS_2.c: 410: {
 11661                           ;PS_2.c: 411: if(!Send_PS2(0x00))
 11662  0271  3000               	movlw	0
 11663  0272  318C  24DE  3181   	fcall	i1_Send_PS2
 11664  0275  3A00               	xorlw	0
 11665  0276  1903               	btfsc	3,2
 11666  0277  2ADC               	goto	i1l5538
 11667  0278                     i1l5498:	
 11668                           ;PS_2.c: 412: {
 11669                           ;PS_2.c: 413: break;
 11670                           
 11671                           
 11672                           ;PS_2.c: 414: }
 11673                           ;PS_2.c: 415: }
 11674                           ;PS_2.c: 416: CapsCount++;
 11675  0278  3001               	movlw	1
 11676  0279  0021               	movlb	1	; select bank1
 11677  027A  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11678  027B  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11679  027C  0023               	movlb	3	; select bank3
 11680  027D  07E8               	addwf	_CapsCount^(0+384),f
 11681  027E  2A66               	goto	i1l5500
 11682  027F                     i1l5502:	
 11683                           ;PS_2.c: 417: }
 11684                           ;PS_2.c: 418: }
 11685                           ;PS_2.c: 419: }
 11686                           ;PS_2.c: 420: }
 11687                           
 11688                           
 11689                           ;PS_2.c: 421: else if(PS_2_Read_Data_Second == 0x58)
 11690  027F  3058               	movlw	88
 11691  0280  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11692  0281  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11693  0282  1D03               	btfss	3,2
 11694  0283  2ADC               	goto	i1l5538
 11695                           
 11696                           ;PS_2.c: 422: {
 11697                           ;PS_2.c: 423: Caps_Lock_Key = 0;
 11698  0284  0021               	movlb	1	; select bank1
 11699  0285  01CD               	clrf	_Caps_Lock_Key^(0+128)
 11700                           
 11701                           ;PS_2.c: 424: }
 11702                           ;PS_2.c: 425: }
 11703  0286  2ADC               	goto	i1l5538
 11704  0287                     i1l5506:	
 11705                           
 11706                           ;PS_2.c: 426: else if(PS_2_Read_Data_First == 0xE0)
 11707  0287  30E0               	movlw	224
 11708  0288  0023               	movlb	3	; select bank3
 11709  0289  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11710  028A  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11711  028B  1D03               	btfss	3,2
 11712  028C  2ADC               	goto	i1l5538
 11713                           
 11714                           ;PS_2.c: 427: {
 11715                           ;PS_2.c: 429: if(PS_2_Read_Data_Second == 0x11 )
 11716  028D  3011               	movlw	17
 11717  028E  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11718  028F  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11719  0290  1D03               	btfss	3,2
 11720  0291  2A95               	goto	i1l5512
 11721                           
 11722                           ;PS_2.c: 430: {
 11723                           ;PS_2.c: 431: LALT = 1;
 11724  0292  01EA               	clrf	_LALT^(0+384)
 11725  0293  0AEA               	incf	_LALT^(0+384),f
 11726                           
 11727                           ;PS_2.c: 432: }
 11728  0294  2AA7               	goto	i1l720
 11729  0295                     i1l5512:	
 11730                           
 11731                           ;PS_2.c: 433: else if(PS_2_Read_Data_Second == 0x14 )
 11732  0295  3014               	movlw	20
 11733  0296  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11734  0297  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11735  0298  1D03               	btfss	3,2
 11736  0299  2A9E               	goto	i1l5516
 11737                           
 11738                           ;PS_2.c: 434: {
 11739                           ;PS_2.c: 435: LControl = 1;
 11740  029A  0021               	movlb	1	; select bank1
 11741  029B  01D0               	clrf	_LControl^(0+128)
 11742  029C  0AD0               	incf	_LControl^(0+128),f
 11743                           
 11744                           ;PS_2.c: 436: }
 11745  029D  2AA7               	goto	i1l720
 11746  029E                     i1l5516:	
 11747                           
 11748                           ;PS_2.c: 437: else if(PS_2_Read_Data_Second == 0x71 )
 11749  029E  3071               	movlw	113
 11750  029F  0023               	movlb	3	; select bank3
 11751  02A0  0664               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11752  02A1  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11753  02A2  1D03               	btfss	3,2
 11754  02A3  2AA7               	goto	i1l720
 11755                           
 11756                           ;PS_2.c: 438: {
 11757                           ;PS_2.c: 439: Delete = 1;
 11758  02A4  0021               	movlb	1	; select bank1
 11759  02A5  01CF               	clrf	_Delete^(0+128)
 11760  02A6  0ACF               	incf	_Delete^(0+128),f
 11761  02A7                     i1l720:	
 11762                           
 11763                           ;PS_2.c: 440: }
 11764                           ;PS_2.c: 441: if(((RControl || LControl) + (LALT || RALT) + Delete) != 3)
 11765  02A7  0023               	movlb	3	; select bank3
 11766  02A8  01DC               	clrf	_Process_PS2_ScanCode$855^(0+384)
 11767  02A9  0ADC               	incf	_Process_PS2_ScanCode$855^(0+384),f
 11768  02AA  086A               	movf	_LALT^(0+384),w
 11769  02AB  1D03               	btfss	3,2
 11770  02AC  2AB1               	goto	i1l5526
 11771  02AD  086D               	movf	_RALT^(0+384),w
 11772  02AE  1D03               	btfss	3,2
 11773  02AF  2AB1               	goto	i1l5526
 11774  02B0  01DC               	clrf	_Process_PS2_ScanCode$855^(0+384)
 11775  02B1                     i1l5526:	
 11776  02B1  01DD               	clrf	_Process_PS2_ScanCode$856^(0+384)
 11777  02B2  0ADD               	incf	_Process_PS2_ScanCode$856^(0+384),f
 11778  02B3  0021               	movlb	1	; select bank1
 11779  02B4  0854               	movf	_RControl^(0+128),w
 11780  02B5  1D03               	btfss	3,2
 11781  02B6  2ABC               	goto	i1l5534
 11782  02B7  0850               	movf	_LControl^(0+128),w
 11783  02B8  1D03               	btfss	3,2
 11784  02B9  2ABC               	goto	i1l5534
 11785  02BA  0023               	movlb	3	; select bank3
 11786  02BB  01DD               	clrf	_Process_PS2_ScanCode$856^(0+384)
 11787  02BC                     i1l5534:	
 11788  02BC  0021               	movlb	1	; select bank1
 11789  02BD  084F               	movf	_Delete^(0+128),w
 11790  02BE  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11791  02BF  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11792  02C0  0023               	movlb	3	; select bank3
 11793  02C1  085D               	movf	_Process_PS2_ScanCode$856^(0+384),w
 11794  02C2  075C               	addwf	_Process_PS2_ScanCode$855^(0+384),w
 11795  02C3  0021               	movlb	1	; select bank1
 11796  02C4  00BE               	movwf	(??_Process_PS2_ScanCode+2)^(0+128)
 11797  02C5  01BF               	clrf	((??_Process_PS2_ScanCode+2)^(0+128)+1)
 11798  02C6  0DBF               	rlf	(??_Process_PS2_ScanCode+3)^(0+128),f
 11799  02C7  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11800  02C8  073E               	addwf	(??_Process_PS2_ScanCode+2)^(0+128),w
 11801  02C9  00C0               	movwf	(??_Process_PS2_ScanCode+4)^(0+128)
 11802  02CA  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11803  02CB  3D3F               	addwfc	(??_Process_PS2_ScanCode+3)^(0+128),w
 11804  02CC  00C1               	movwf	(??_Process_PS2_ScanCode+5)^(0+128)
 11805  02CD  3003               	movlw	3
 11806  02CE  0640               	xorwf	(??_Process_PS2_ScanCode+4)^(0+128),w
 11807  02CF  0441               	iorwf	((??_Process_PS2_ScanCode+4)^(0+128)+1),w
 11808  02D0  1903               	btfsc	3,2
 11809  02D1  2ADC               	goto	i1l5538
 11810                           
 11811                           ;PS_2.c: 442: {
 11812                           ;PS_2.c: 444: temp = Decode_Scan_Code_FunctionE0(PS_2_Read_Data_Second);
 11813  02D2  0023               	movlb	3	; select bank3
 11814  02D3  0864               	movf	_PS_2_Read_Data_Second^(0+384),w
 11815  02D4  3199  2120  3181   	fcall	_Decode_Scan_Code_FunctionE0
 11816  02D7  0021               	movlb	1	; select bank1
 11817  02D8  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11818  02D9  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11819  02DA  0023               	movlb	3	; select bank3
 11820  02DB  00E1               	movwf	Process_PS2_ScanCode@temp^(0+384)
 11821  02DC                     i1l5538:	
 11822                           
 11823                           ;PS_2.c: 445: }
 11824                           ;PS_2.c: 446: }
 11825                           ;PS_2.c: 447: }
 11826                           ;PS_2.c: 448: if(PS_2_Read_Data_First != 0 && PS_2_Read_Data_Second == 0 &&
 11827                           ;PS_2.c: 449: PS_2_Read_Data_Third == 0)
 11828  02DC  0023               	movlb	3	; select bank3
 11829  02DD  0862               	movf	_PS_2_Read_Data_First^(0+384),w
 11830  02DE  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11831  02DF  1903               	btfsc	3,2
 11832  02E0  2C2B               	goto	i1l5684
 11833  02E1  0864               	movf	_PS_2_Read_Data_Second^(0+384),w
 11834  02E2  0465               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11835  02E3  1D03               	btfss	3,2
 11836  02E4  2C2B               	goto	i1l5684
 11837  02E5  0866               	movf	_PS_2_Read_Data_Third^(0+384),w
 11838  02E6  0467               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11839  02E7  1D03               	btfss	3,2
 11840  02E8  2C2B               	goto	i1l5684
 11841                           
 11842                           ;PS_2.c: 450: {
 11843                           ;PS_2.c: 452: if(PS_2_Read_Data_First == 0x12)
 11844  02E9  3012               	movlw	18
 11845  02EA  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11846  02EB  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11847  02EC  1D03               	btfss	3,2
 11848  02ED  2AF1               	goto	i1l5548
 11849                           
 11850                           ;PS_2.c: 453: {
 11851                           ;PS_2.c: 454: Right_Shift_Key = 1;
 11852  02EE  01EE               	clrf	_Right_Shift_Key^(0+384)
 11853  02EF  0AEE               	incf	_Right_Shift_Key^(0+384),f
 11854                           
 11855                           ;PS_2.c: 455: }
 11856  02F0  2AF8               	goto	i1l5552
 11857  02F1                     i1l5548:	
 11858                           
 11859                           ;PS_2.c: 456: else if(PS_2_Read_Data_First == 0x59)
 11860  02F1  3059               	movlw	89
 11861  02F2  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11862  02F3  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11863  02F4  1D03               	btfss	3,2
 11864  02F5  2AF8               	goto	i1l5552
 11865                           
 11866                           ;PS_2.c: 457: {
 11867                           ;PS_2.c: 458: Left_Shift_Key = 1;
 11868  02F6  01EB               	clrf	_Left_Shift_Key^(0+384)
 11869  02F7  0AEB               	incf	_Left_Shift_Key^(0+384),f
 11870  02F8                     i1l5552:	
 11871                           
 11872                           ;PS_2.c: 459: }
 11873                           ;PS_2.c: 460: if((Right_Shift_Key == 1 && Right_Shift_Key_old == 0) || (Left_Shift_Key =
      +                          = 1 && Left_Shift_Key_old == 0))
 11874  02F8  036E               	decf	_Right_Shift_Key^(0+384),w
 11875  02F9  1D03               	btfss	3,2
 11876  02FA  2AFF               	goto	i1l5556
 11877  02FB  0021               	movlb	1	; select bank1
 11878  02FC  0856               	movf	_Right_Shift_Key_old^(0+128),w
 11879  02FD  1903               	btfsc	3,2
 11880  02FE  2B07               	goto	i1l5560
 11881  02FF                     i1l5556:	
 11882  02FF  0023               	movlb	3	; select bank3
 11883  0300  036B               	decf	_Left_Shift_Key^(0+384),w
 11884  0301  1D03               	btfss	3,2
 11885  0302  2B49               	goto	i1l5588
 11886  0303  0021               	movlb	1	; select bank1
 11887  0304  0851               	movf	_Left_Shift_Key_old^(0+128),w
 11888  0305  1D03               	btfss	3,2
 11889  0306  2B49               	goto	i1l5588
 11890  0307                     i1l5560:	
 11891                           
 11892                           ;PS_2.c: 461: {
 11893                           ;PS_2.c: 463: if(!Send_PS2(0xED))
 11894  0307  30ED               	movlw	237
 11895  0308  318C  24DE  3181   	fcall	i1_Send_PS2
 11896  030B  3A00               	xorlw	0
 11897  030C  1D03               	skipz
 11898  030D  2B49               	goto	i1l5588
 11899                           
 11900                           ;PS_2.c: 464: {
 11901                           ;PS_2.c: 465: if(Caps_Lock)
 11902  030E  0023               	movlb	3	; select bank3
 11903  030F  0869               	movf	_Caps_Lock^(0+384),w
 11904  0310  1903               	btfsc	3,2
 11905  0311  2B2C               	goto	i1l5576
 11906                           
 11907                           ;PS_2.c: 466: {
 11908                           ;PS_2.c: 467: CapsCount=0;
 11909  0312  01E8               	clrf	_CapsCount^(0+384)
 11910  0313                     i1l5574:	
 11911                           ;PS_2.c: 468: while(CapsCount<10)
 11912                           
 11913  0313  300A               	movlw	10
 11914  0314  0268               	subwf	_CapsCount^(0+384),w
 11915  0315  1803               	btfsc	3,0
 11916  0316  2B49               	goto	i1l5588
 11917                           
 11918                           ;PS_2.c: 469: {
 11919                           ;PS_2.c: 470: if(!Send_PS2(0xED))
 11920  0317  30ED               	movlw	237
 11921  0318  318C  24DE  3181   	fcall	i1_Send_PS2
 11922  031B  3A00               	xorlw	0
 11923  031C  1D03               	skipz
 11924  031D  2B25               	goto	i1l5572
 11925                           
 11926                           ;PS_2.c: 471: {
 11927                           ;PS_2.c: 472: if(!Send_PS2(0x05))
 11928  031E  3005               	movlw	5
 11929  031F  318C  24DE  3181   	fcall	i1_Send_PS2
 11930  0322  3A00               	xorlw	0
 11931  0323  1903               	btfsc	3,2
 11932  0324  2B46               	goto	i1l5582
 11933  0325                     i1l5572:	
 11934                           ;PS_2.c: 475: break;
 11935                           
 11936                           ;PS_2.c: 473: {
 11937                           ;PS_2.c: 474: Shift_Key = 1;
 11938                           
 11939                           
 11940                           ;PS_2.c: 476: }
 11941                           ;PS_2.c: 477: }
 11942                           ;PS_2.c: 478: CapsCount++;
 11943  0325  3001               	movlw	1
 11944  0326  0021               	movlb	1	; select bank1
 11945  0327  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11946  0328  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11947  0329  0023               	movlb	3	; select bank3
 11948  032A  07E8               	addwf	_CapsCount^(0+384),f
 11949  032B  2B13               	goto	i1l5574
 11950  032C                     i1l5576:	
 11951                           ;PS_2.c: 479: }
 11952                           ;PS_2.c: 480: }
 11953                           
 11954                           
 11955                           ;PS_2.c: 481: else
 11956                           ;PS_2.c: 482: {
 11957                           ;PS_2.c: 483: CapsCount=0;
 11958  032C  01E8               	clrf	_CapsCount^(0+384)
 11959                           
 11960                           ;PS_2.c: 484: while(CapsCount<10)
 11961  032D  2B34               	goto	i1l5586
 11962  032E                     i1l5584:	
 11963                           ;PS_2.c: 491: break;
 11964                           
 11965                           
 11966                           ;PS_2.c: 492: }
 11967                           ;PS_2.c: 493: }
 11968                           ;PS_2.c: 494: CapsCount++;
 11969  032E  3001               	movlw	1
 11970  032F  0021               	movlb	1	; select bank1
 11971  0330  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11972  0331  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11973  0332  0023               	movlb	3	; select bank3
 11974  0333  07E8               	addwf	_CapsCount^(0+384),f
 11975  0334                     i1l5586:	
 11976  0334  300A               	movlw	10
 11977  0335  0268               	subwf	_CapsCount^(0+384),w
 11978  0336  1803               	btfsc	3,0
 11979  0337  2B49               	goto	i1l5588
 11980                           
 11981                           ;PS_2.c: 485: {
 11982                           ;PS_2.c: 486: if(!Send_PS2(0xED))
 11983  0338  30ED               	movlw	237
 11984  0339  318C  24DE  3181   	fcall	i1_Send_PS2
 11985  033C  3A00               	xorlw	0
 11986  033D  1D03               	skipz
 11987  033E  2B2E               	goto	i1l5584
 11988                           
 11989                           ;PS_2.c: 487: {
 11990                           ;PS_2.c: 488: if(!Send_PS2(0x01))
 11991  033F  3001               	movlw	1
 11992  0340  318C  24DE  3181   	fcall	i1_Send_PS2
 11993  0343  3A00               	xorlw	0
 11994  0344  1D03               	skipz
 11995  0345  2B2E               	goto	i1l5584
 11996  0346                     i1l5582:	
 11997                           
 11998                           ;PS_2.c: 489: {
 11999                           ;PS_2.c: 490: Shift_Key = 1;
 12000  0346  0023               	movlb	3	; select bank3
 12001  0347  01EF               	clrf	_Shift_Key^(0+384)
 12002  0348  0AEF               	incf	_Shift_Key^(0+384),f
 12003  0349                     i1l5588:	
 12004                           
 12005                           ;PS_2.c: 495: }
 12006                           ;PS_2.c: 496: }
 12007                           ;PS_2.c: 497: }
 12008                           ;PS_2.c: 498: }
 12009                           ;PS_2.c: 499: if(PS_2_Read_Data_First == 0x14 )
 12010  0349  3014               	movlw	20
 12011  034A  0023               	movlb	3	; select bank3
 12012  034B  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 12013  034C  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 12014  034D  1D03               	btfss	3,2
 12015  034E  2B53               	goto	i1l5592
 12016                           
 12017                           ;PS_2.c: 500: {
 12018                           ;PS_2.c: 501: RControl = 1;
 12019  034F  0021               	movlb	1	; select bank1
 12020  0350  01D4               	clrf	_RControl^(0+128)
 12021  0351  0AD4               	incf	_RControl^(0+128),f
 12022                           
 12023                           ;PS_2.c: 502: }
 12024  0352  2C1E               	goto	i1l752
 12025  0353                     i1l5592:	
 12026                           
 12027                           ;PS_2.c: 503: else if(PS_2_Read_Data_First == 0x11 )
 12028  0353  3011               	movlw	17
 12029  0354  0023               	movlb	3	; select bank3
 12030  0355  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 12031  0356  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 12032  0357  1D03               	btfss	3,2
 12033  0358  2B5C               	goto	i1l5596
 12034                           
 12035                           ;PS_2.c: 504: {
 12036                           ;PS_2.c: 505: RALT = 1;
 12037  0359  01ED               	clrf	_RALT^(0+384)
 12038  035A  0AED               	incf	_RALT^(0+384),f
 12039                           
 12040                           ;PS_2.c: 506: }
 12041  035B  2C1E               	goto	i1l752
 12042  035C                     i1l5596:	
 12043                           
 12044                           ;PS_2.c: 507: else if(PS_2_Read_Data_First == 0xEE )
 12045  035C  30EE               	movlw	238
 12046  035D  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 12047  035E  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 12048  035F  1D03               	btfss	3,2
 12049  0360  2B65               	goto	i1l5600
 12050                           
 12051                           ;PS_2.c: 508: {
 12052                           ;PS_2.c: 509: ECHO = 1;
 12053  0361  0024               	movlb	4	; select bank4
 12054  0362  01DF               	clrf	_ECHO^(0+512)
 12055  0363  0ADF               	incf	_ECHO^(0+512),f
 12056                           
 12057                           ;PS_2.c: 510: }
 12058  0364  2C1E               	goto	i1l752
 12059  0365                     i1l5600:	
 12060                           
 12061                           ;PS_2.c: 511: else if(PS_2_Read_Data_First == 0x58)
 12062  0365  3058               	movlw	88
 12063  0366  0023               	movlb	3	; select bank3
 12064  0367  0662               	xorwf	_PS_2_Read_Data_First^(0+384),w
 12065  0368  0463               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 12066  0369  1D03               	btfss	3,2
 12067  036A  2BEA               	goto	i1l5660
 12068                           
 12069                           ;PS_2.c: 512: {
 12070                           ;PS_2.c: 513: Caps_Lock_Key = 1;
 12071  036B  0021               	movlb	1	; select bank1
 12072  036C  01CD               	clrf	_Caps_Lock_Key^(0+128)
 12073  036D  0ACD               	incf	_Caps_Lock_Key^(0+128),f
 12074                           
 12075                           ;PS_2.c: 514: if(Caps_Lock_Key_old == 0)
 12076  036E  084E               	movf	_Caps_Lock_Key_old^(0+128),w
 12077  036F  1D03               	btfss	3,2
 12078  0370  2C1E               	goto	i1l752
 12079                           
 12080                           ;PS_2.c: 515: {
 12081                           ;PS_2.c: 516: if(Caps_Lock)
 12082  0371  0023               	movlb	3	; select bank3
 12083  0372  0869               	movf	_Caps_Lock^(0+384),w
 12084  0373  1903               	btfsc	3,2
 12085  0374  2BAF               	goto	i1l5634
 12086                           
 12087                           ;PS_2.c: 517: {
 12088                           ;PS_2.c: 518: if(Shift_Key)
 12089  0375  086F               	movf	_Shift_Key^(0+384),w
 12090  0376  1903               	btfsc	3,2
 12091  0377  2B92               	goto	i1l5622
 12092                           
 12093                           ;PS_2.c: 519: {
 12094                           ;PS_2.c: 520: CapsCount=0;
 12095  0378  01E8               	clrf	_CapsCount^(0+384)
 12096  0379                     i1l5620:	
 12097                           ;PS_2.c: 521: while(CapsCount<10)
 12098                           
 12099  0379  300A               	movlw	10
 12100  037A  0268               	subwf	_CapsCount^(0+384),w
 12101  037B  1803               	btfsc	3,0
 12102  037C  2C1E               	goto	i1l752
 12103                           
 12104                           ;PS_2.c: 522: {
 12105                           ;PS_2.c: 523: if(!Send_PS2(0xED))
 12106  037D  30ED               	movlw	237
 12107  037E  318C  24DE  3181   	fcall	i1_Send_PS2
 12108  0381  3A00               	xorlw	0
 12109  0382  1D03               	skipz
 12110  0383  2B8B               	goto	i1l5618
 12111                           
 12112                           ;PS_2.c: 524: {
 12113                           ;PS_2.c: 525: if(!Send_PS2(0x01))
 12114  0384  3001               	movlw	1
 12115  0385  318C  24DE  3181   	fcall	i1_Send_PS2
 12116  0388  3A00               	xorlw	0
 12117  0389  1903               	btfsc	3,2
 12118  038A  2BA5               	goto	i1l5628
 12119  038B                     i1l5618:	
 12120                           ;PS_2.c: 528: break;
 12121                           
 12122                           ;PS_2.c: 526: {
 12123                           ;PS_2.c: 527: Caps_Lock =0;
 12124                           
 12125                           
 12126                           ;PS_2.c: 529: }
 12127                           ;PS_2.c: 530: }
 12128                           ;PS_2.c: 531: CapsCount++;
 12129  038B  3001               	movlw	1
 12130  038C  0021               	movlb	1	; select bank1
 12131  038D  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12132  038E  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12133  038F  0023               	movlb	3	; select bank3
 12134  0390  07E8               	addwf	_CapsCount^(0+384),f
 12135  0391  2B79               	goto	i1l5620
 12136  0392                     i1l5622:	
 12137                           ;PS_2.c: 532: }
 12138                           ;PS_2.c: 533: }
 12139                           
 12140                           
 12141                           ;PS_2.c: 534: else
 12142                           ;PS_2.c: 535: {
 12143                           ;PS_2.c: 536: CapsCount=0;
 12144  0392  01E8               	clrf	_CapsCount^(0+384)
 12145  0393                     i1l5632:	
 12146                           ;PS_2.c: 537: while(CapsCount<10)
 12147                           
 12148  0393  300A               	movlw	10
 12149  0394  0268               	subwf	_CapsCount^(0+384),w
 12150  0395  1803               	btfsc	3,0
 12151  0396  2C1E               	goto	i1l752
 12152                           
 12153                           ;PS_2.c: 538: {
 12154                           ;PS_2.c: 539: if(!Send_PS2(0xED))
 12155  0397  30ED               	movlw	237
 12156  0398  318C  24DE  3181   	fcall	i1_Send_PS2
 12157  039B  3A00               	xorlw	0
 12158  039C  1D03               	skipz
 12159  039D  2BA8               	goto	i1l5630
 12160                           
 12161                           ;PS_2.c: 540: {
 12162                           ;PS_2.c: 541: if(!Send_PS2(0x00))
 12163  039E  3000               	movlw	0
 12164  039F  318C  24DE  3181   	fcall	i1_Send_PS2
 12165  03A2  3A00               	xorlw	0
 12166  03A3  1D03               	skipz
 12167  03A4  2BA8               	goto	i1l5630
 12168  03A5                     i1l5628:	
 12169                           
 12170                           ;PS_2.c: 542: {
 12171                           ;PS_2.c: 543: Caps_Lock =0;
 12172  03A5  0023               	movlb	3	; select bank3
 12173  03A6  01E9               	clrf	_Caps_Lock^(0+384)
 12174                           
 12175                           ;PS_2.c: 544: break;
 12176  03A7  2C1E               	goto	i1l752
 12177  03A8                     i1l5630:	
 12178                           
 12179                           ;PS_2.c: 545: }
 12180                           ;PS_2.c: 546: }
 12181                           ;PS_2.c: 547: CapsCount++;
 12182  03A8  3001               	movlw	1
 12183  03A9  0021               	movlb	1	; select bank1
 12184  03AA  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12185  03AB  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12186  03AC  0023               	movlb	3	; select bank3
 12187  03AD  07E8               	addwf	_CapsCount^(0+384),f
 12188  03AE  2B93               	goto	i1l5632
 12189  03AF                     i1l5634:	
 12190                           ;PS_2.c: 548: }
 12191                           ;PS_2.c: 549: }
 12192                           ;PS_2.c: 550: }
 12193                           
 12194                           
 12195                           ;PS_2.c: 551: else
 12196                           ;PS_2.c: 552: {
 12197                           ;PS_2.c: 553: if(Shift_Key)
 12198  03AF  086F               	movf	_Shift_Key^(0+384),w
 12199  03B0  1903               	btfsc	3,2
 12200  03B1  2BCC               	goto	i1l5648
 12201                           
 12202                           ;PS_2.c: 554: {
 12203                           ;PS_2.c: 555: CapsCount=0;
 12204  03B2  01E8               	clrf	_CapsCount^(0+384)
 12205  03B3                     i1l5646:	
 12206                           ;PS_2.c: 556: while(CapsCount<10)
 12207                           
 12208  03B3  300A               	movlw	10
 12209  03B4  0268               	subwf	_CapsCount^(0+384),w
 12210  03B5  1803               	btfsc	3,0
 12211  03B6  2C1E               	goto	i1l752
 12212                           
 12213                           ;PS_2.c: 557: {
 12214                           ;PS_2.c: 558: if(!Send_PS2(0xED))
 12215  03B7  30ED               	movlw	237
 12216  03B8  318C  24DE  3181   	fcall	i1_Send_PS2
 12217  03BB  3A00               	xorlw	0
 12218  03BC  1D03               	skipz
 12219  03BD  2BC5               	goto	i1l5644
 12220                           
 12221                           ;PS_2.c: 559: {
 12222                           ;PS_2.c: 560: if(!Send_PS2(0x05))
 12223  03BE  3005               	movlw	5
 12224  03BF  318C  24DE  3181   	fcall	i1_Send_PS2
 12225  03C2  3A00               	xorlw	0
 12226  03C3  1903               	btfsc	3,2
 12227  03C4  2BDF               	goto	i1l5654
 12228  03C5                     i1l5644:	
 12229                           ;PS_2.c: 563: break;
 12230                           
 12231                           ;PS_2.c: 561: {
 12232                           ;PS_2.c: 562: Caps_Lock =1;
 12233                           
 12234                           
 12235                           ;PS_2.c: 564: }
 12236                           ;PS_2.c: 565: }
 12237                           ;PS_2.c: 566: CapsCount++;
 12238  03C5  3001               	movlw	1
 12239  03C6  0021               	movlb	1	; select bank1
 12240  03C7  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12241  03C8  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12242  03C9  0023               	movlb	3	; select bank3
 12243  03CA  07E8               	addwf	_CapsCount^(0+384),f
 12244  03CB  2BB3               	goto	i1l5646
 12245  03CC                     i1l5648:	
 12246                           ;PS_2.c: 567: }
 12247                           ;PS_2.c: 568: }
 12248                           
 12249                           
 12250                           ;PS_2.c: 569: else
 12251                           ;PS_2.c: 570: {
 12252                           ;PS_2.c: 571: CapsCount=0;
 12253  03CC  01E8               	clrf	_CapsCount^(0+384)
 12254  03CD                     i1l5658:	
 12255                           ;PS_2.c: 572: while(CapsCount<10)
 12256                           
 12257  03CD  300A               	movlw	10
 12258  03CE  0268               	subwf	_CapsCount^(0+384),w
 12259  03CF  1803               	btfsc	3,0
 12260  03D0  2C1E               	goto	i1l752
 12261                           
 12262                           ;PS_2.c: 573: {
 12263                           ;PS_2.c: 574: if(!Send_PS2(0xED))
 12264  03D1  30ED               	movlw	237
 12265  03D2  318C  24DE  3181   	fcall	i1_Send_PS2
 12266  03D5  3A00               	xorlw	0
 12267  03D6  1D03               	skipz
 12268  03D7  2BE3               	goto	i1l5656
 12269                           
 12270                           ;PS_2.c: 575: {
 12271                           ;PS_2.c: 576: if(!Send_PS2(0x04))
 12272  03D8  3004               	movlw	4
 12273  03D9  318C  24DE  3181   	fcall	i1_Send_PS2
 12274  03DC  3A00               	xorlw	0
 12275  03DD  1D03               	skipz
 12276  03DE  2BE3               	goto	i1l5656
 12277  03DF                     i1l5654:	
 12278                           
 12279                           ;PS_2.c: 577: {
 12280                           ;PS_2.c: 578: Caps_Lock =1;
 12281  03DF  0023               	movlb	3	; select bank3
 12282  03E0  01E9               	clrf	_Caps_Lock^(0+384)
 12283  03E1  0AE9               	incf	_Caps_Lock^(0+384),f
 12284                           
 12285                           ;PS_2.c: 579: break;
 12286  03E2  2C1E               	goto	i1l752
 12287  03E3                     i1l5656:	
 12288                           
 12289                           ;PS_2.c: 580: }
 12290                           ;PS_2.c: 581: }
 12291                           ;PS_2.c: 582: CapsCount++;
 12292  03E3  3001               	movlw	1
 12293  03E4  0021               	movlb	1	; select bank1
 12294  03E5  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12295  03E6  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12296  03E7  0023               	movlb	3	; select bank3
 12297  03E8  07E8               	addwf	_CapsCount^(0+384),f
 12298  03E9  2BCD               	goto	i1l5658
 12299  03EA                     i1l5660:	
 12300                           ;PS_2.c: 583: }
 12301                           ;PS_2.c: 584: }
 12302                           ;PS_2.c: 585: }
 12303                           ;PS_2.c: 586: }
 12304                           ;PS_2.c: 588: }
 12305                           
 12306                           
 12307                           ;PS_2.c: 589: else
 12308                           ;PS_2.c: 590: {
 12309                           ;PS_2.c: 591: if(Shift_Key ==1)
 12310  03EA  036F               	decf	_Shift_Key^(0+384),w
 12311  03EB  1D03               	btfss	3,2
 12312  03EC  2C08               	goto	i1l5672
 12313                           
 12314                           ;PS_2.c: 592: {
 12315                           ;PS_2.c: 594: temp = Decode_Scan_Code_Shift(PS_2_Read_Data_First);
 12316  03ED  0862               	movf	_PS_2_Read_Data_First^(0+384),w
 12317  03EE  3199  2132  3181   	fcall	_Decode_Scan_Code_Shift
 12318  03F1  0021               	movlb	1	; select bank1
 12319  03F2  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12320  03F3  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12321  03F4  0023               	movlb	3	; select bank3
 12322  03F5  00E1               	movwf	Process_PS2_ScanCode@temp^(0+384)
 12323                           
 12324                           ;PS_2.c: 595: if(Caps_Lock)
 12325  03F6  0869               	movf	_Caps_Lock^(0+384),w
 12326  03F7  1903               	btfsc	3,2
 12327  03F8  2C1E               	goto	i1l752
 12328                           
 12329                           ;PS_2.c: 596: {
 12330                           ;PS_2.c: 598: if(temp >= 'A' && temp <= 'Z')
 12331  03F9  3041               	movlw	65
 12332  03FA  0261               	subwf	Process_PS2_ScanCode@temp^(0+384),w
 12333  03FB  1C03               	skipc
 12334  03FC  2C1E               	goto	i1l752
 12335  03FD  305B               	movlw	91
 12336  03FE  0261               	subwf	Process_PS2_ScanCode@temp^(0+384),w
 12337  03FF  1803               	skipnc
 12338  0400  2C1E               	goto	i1l752
 12339                           
 12340                           ;PS_2.c: 599: {
 12341                           ;PS_2.c: 600: temp += 32;
 12342  0401  3020               	movlw	32
 12343  0402  0021               	movlb	1	; select bank1
 12344  0403  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12345  0404  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12346  0405  0023               	movlb	3	; select bank3
 12347  0406  07E1               	addwf	Process_PS2_ScanCode@temp^(0+384),f
 12348                           
 12349                           ;PS_2.c: 601: }
 12350                           ;PS_2.c: 602: }
 12351                           ;PS_2.c: 603: }
 12352  0407  2C1E               	goto	i1l752
 12353  0408                     i1l5672:	
 12354                           
 12355                           ;PS_2.c: 604: else
 12356                           ;PS_2.c: 605: {
 12357                           ;PS_2.c: 606: temp = Decode_Scan_Code(PS_2_Read_Data_First);
 12358  0408  0862               	movf	_PS_2_Read_Data_First^(0+384),w
 12359  0409  3199  210E  3181   	fcall	_Decode_Scan_Code
 12360  040C  0021               	movlb	1	; select bank1
 12361  040D  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12362  040E  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12363  040F  0023               	movlb	3	; select bank3
 12364  0410  00E1               	movwf	Process_PS2_ScanCode@temp^(0+384)
 12365                           
 12366                           ;PS_2.c: 607: if(Caps_Lock)
 12367  0411  0869               	movf	_Caps_Lock^(0+384),w
 12368  0412  1903               	btfsc	3,2
 12369  0413  2C1E               	goto	i1l752
 12370                           
 12371                           ;PS_2.c: 608: {
 12372                           ;PS_2.c: 610: if(temp >= 'a' && temp <= 'z')
 12373  0414  3061               	movlw	97
 12374  0415  0261               	subwf	Process_PS2_ScanCode@temp^(0+384),w
 12375  0416  1C03               	skipc
 12376  0417  2C1E               	goto	i1l752
 12377  0418  307B               	movlw	123
 12378  0419  0261               	subwf	Process_PS2_ScanCode@temp^(0+384),w
 12379  041A  1803               	skipnc
 12380  041B  2C1E               	goto	i1l752
 12381                           
 12382                           ;PS_2.c: 611: {
 12383                           ;PS_2.c: 612: temp -= 32;
 12384  041C  3020               	movlw	32
 12385  041D  02E1               	subwf	Process_PS2_ScanCode@temp^(0+384),f
 12386  041E                     i1l752:	
 12387                           
 12388                           ;PS_2.c: 613: }
 12389                           ;PS_2.c: 614: }
 12390                           ;PS_2.c: 615: }
 12391                           ;PS_2.c: 616: }
 12392                           ;PS_2.c: 617: if(!temp)
 12393  041E  0023               	movlb	3	; select bank3
 12394  041F  0861               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12395  0420  1D03               	btfss	3,2
 12396  0421  2C2B               	goto	i1l5684
 12397                           
 12398                           ;PS_2.c: 618: {
 12399                           ;PS_2.c: 620: temp = Decode_Scan_Code_Function(PS_2_Read_Data_First);
 12400  0422  0862               	movf	_PS_2_Read_Data_First^(0+384),w
 12401  0423  318A  2241  3181   	fcall	_Decode_Scan_Code_Function
 12402  0426  0021               	movlb	1	; select bank1
 12403  0427  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12404  0428  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12405  0429  0023               	movlb	3	; select bank3
 12406  042A  00E1               	movwf	Process_PS2_ScanCode@temp^(0+384)
 12407  042B                     i1l5684:	
 12408                           
 12409                           ;PS_2.c: 621: }
 12410                           ;PS_2.c: 622: }
 12411                           ;PS_2.c: 624: if(((RControl || LControl) + (LALT || RALT) + Delete) == 3)
 12412  042B  01DE               	clrf	_Process_PS2_ScanCode$857^(0+384)
 12413  042C  0ADE               	incf	_Process_PS2_ScanCode$857^(0+384),f
 12414  042D  086A               	movf	_LALT^(0+384),w
 12415  042E  1D03               	btfss	3,2
 12416  042F  2C34               	goto	i1l5692
 12417  0430  086D               	movf	_RALT^(0+384),w
 12418  0431  1D03               	btfss	3,2
 12419  0432  2C34               	goto	i1l5692
 12420  0433  01DE               	clrf	_Process_PS2_ScanCode$857^(0+384)
 12421  0434                     i1l5692:	
 12422  0434  01DF               	clrf	_Process_PS2_ScanCode$858^(0+384)
 12423  0435  0ADF               	incf	_Process_PS2_ScanCode$858^(0+384),f
 12424  0436  0021               	movlb	1	; select bank1
 12425  0437  0854               	movf	_RControl^(0+128),w
 12426  0438  1D03               	btfss	3,2
 12427  0439  2C3F               	goto	i1l5700
 12428  043A  0850               	movf	_LControl^(0+128),w
 12429  043B  1D03               	btfss	3,2
 12430  043C  2C3F               	goto	i1l5700
 12431  043D  0023               	movlb	3	; select bank3
 12432  043E  01DF               	clrf	_Process_PS2_ScanCode$858^(0+384)
 12433  043F                     i1l5700:	
 12434  043F  0021               	movlb	1	; select bank1
 12435  0440  084F               	movf	_Delete^(0+128),w
 12436  0441  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12437  0442  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 12438  0443  0023               	movlb	3	; select bank3
 12439  0444  085F               	movf	_Process_PS2_ScanCode$858^(0+384),w
 12440  0445  075E               	addwf	_Process_PS2_ScanCode$857^(0+384),w
 12441  0446  0021               	movlb	1	; select bank1
 12442  0447  00BE               	movwf	(??_Process_PS2_ScanCode+2)^(0+128)
 12443  0448  01BF               	clrf	((??_Process_PS2_ScanCode+2)^(0+128)+1)
 12444  0449  0DBF               	rlf	(??_Process_PS2_ScanCode+3)^(0+128),f
 12445  044A  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12446  044B  073E               	addwf	(??_Process_PS2_ScanCode+2)^(0+128),w
 12447  044C  00C0               	movwf	(??_Process_PS2_ScanCode+4)^(0+128)
 12448  044D  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 12449  044E  3D3F               	addwfc	(??_Process_PS2_ScanCode+3)^(0+128),w
 12450  044F  00C1               	movwf	(??_Process_PS2_ScanCode+5)^(0+128)
 12451  0450  3003               	movlw	3
 12452  0451  0640               	xorwf	(??_Process_PS2_ScanCode+4)^(0+128),w
 12453  0452  0441               	iorwf	((??_Process_PS2_ScanCode+4)^(0+128)+1),w
 12454  0453  1D03               	btfss	3,2
 12455  0454  2CD6               	goto	i1l5744
 12456                           
 12457                           ;PS_2.c: 625: {
 12458                           ;PS_2.c: 627: UARTstringWAIT("\r\n");
 12459  0455  30FD               	movlw	low ((STR_14+16)| (0+32768))
 12460  0456  0020               	movlb	0	; select bank0
 12461  0457  00A1               	movwf	i1UARTstringWAIT@data
 12462  0458  3089               	movlw	high ((STR_14+16)| (0+32768))
 12463  0459  00A2               	movwf	i1UARTstringWAIT@data+1
 12464  045A  319B  2324  3181   	fcall	i1_UARTstringWAIT
 12465                           
 12466                           ;PS_2.c: 628: delayUS(15000);
 12467  045D  3000               	movlw	0
 12468  045E  00F3               	movwf	i1delayUS@US+3
 12469  045F  3000               	movlw	0
 12470  0460  00F2               	movwf	i1delayUS@US+2
 12471  0461  303A               	movlw	58
 12472  0462  00F1               	movwf	i1delayUS@US+1
 12473  0463  3098               	movlw	152
 12474  0464  00F0               	movwf	i1delayUS@US
 12475  0465  319B  23B5  3181   	fcall	i1_delayUS
 12476                           
 12477                           ;PS_2.c: 629: if(!BAUDMODE)
 12478  0468  0021               	movlb	1	; select bank1
 12479  0469  084C               	movf	_BAUDMODE^(0+128),w
 12480  046A  1D03               	btfss	3,2
 12481  046B  2C93               	goto	i1l5720
 12482                           
 12483                           ;PS_2.c: 630: {
 12484                           ;PS_2.c: 631: BaudTyped =0;
 12485  046C  3000               	movlw	0
 12486  046D  00C9               	movwf	(_BaudTyped+3)^(0+128)
 12487  046E  3000               	movlw	0
 12488  046F  00C8               	movwf	(_BaudTyped+2)^(0+128)
 12489  0470  3000               	movlw	0
 12490  0471  00C7               	movwf	(_BaudTyped+1)^(0+128)
 12491  0472  3000               	movlw	0
 12492  0473  00C6               	movwf	_BaudTyped^(0+128)
 12493                           
 12494                           ;PS_2.c: 632: ParityTyped =0;
 12495  0474  0023               	movlb	3	; select bank3
 12496  0475  01EC               	clrf	_ParityTyped^(0+384)
 12497                           
 12498                           ;PS_2.c: 633: BAUDMODE = 1;
 12499  0476  0021               	movlb	1	; select bank1
 12500  0477  01CC               	clrf	_BAUDMODE^(0+128)
 12501  0478  0ACC               	incf	_BAUDMODE^(0+128),f
 12502                           
 12503                           ;PS_2.c: 634: UARTstringWAIT("Enter Baud rate \r\n");
 12504  0479  30ED               	movlw	low (STR_14| (0+32768))
 12505  047A  0020               	movlb	0	; select bank0
 12506  047B  00A1               	movwf	i1UARTstringWAIT@data
 12507  047C  3089               	movlw	high (STR_14| (0+32768))
 12508  047D  00A2               	movwf	i1UARTstringWAIT@data+1
 12509  047E  319B  2324  3181   	fcall	i1_UARTstringWAIT
 12510                           
 12511                           ;PS_2.c: 635: delayUS(15000);
 12512  0481  3000               	movlw	0
 12513  0482  00F3               	movwf	i1delayUS@US+3
 12514  0483  3000               	movlw	0
 12515  0484  00F2               	movwf	i1delayUS@US+2
 12516  0485  303A               	movlw	58
 12517  0486  00F1               	movwf	i1delayUS@US+1
 12518  0487  3098               	movlw	152
 12519  0488  00F0               	movwf	i1delayUS@US
 12520  0489  319B  23B5  3181   	fcall	i1_delayUS
 12521                           
 12522                           ;PS_2.c: 636: UARTchar('>' , 0, 0);
 12523  048C  01F8               	clrf	i1UARTchar@override
 12524  048D  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12525  048E  303E               	movlw	62
 12526  048F  3190  2085  3181   	fcall	i1_UARTchar
 12527                           
 12528                           ;PS_2.c: 638: }
 12529  0492  2CCE               	goto	i1l5734
 12530  0493                     i1l5720:	
 12531                           
 12532                           ;PS_2.c: 639: else
 12533                           ;PS_2.c: 640: {
 12534                           ;PS_2.c: 641: BaudTyped = 9600;
 12535  0493  3000               	movlw	0
 12536  0494  0021               	movlb	1	; select bank1
 12537  0495  00C9               	movwf	(_BaudTyped+3)^(0+128)
 12538  0496  3000               	movlw	0
 12539  0497  00C8               	movwf	(_BaudTyped+2)^(0+128)
 12540  0498  3025               	movlw	37
 12541  0499  00C7               	movwf	(_BaudTyped+1)^(0+128)
 12542  049A  3080               	movlw	128
 12543  049B  00C6               	movwf	_BaudTyped^(0+128)
 12544                           
 12545                           ;PS_2.c: 642: UARTstringWAIT("Baud Reset to 9600");
 12546  049C  3000               	movlw	low (STR_15| (0+32768))
 12547  049D  0020               	movlb	0	; select bank0
 12548  049E  00A1               	movwf	i1UARTstringWAIT@data
 12549  049F  308A               	movlw	high (STR_15| (0+32768))
 12550  04A0  00A2               	movwf	i1UARTstringWAIT@data+1
 12551  04A1  319B  2324  3181   	fcall	i1_UARTstringWAIT
 12552                           
 12553                           ;PS_2.c: 643: UARTstringWAIT(NoParityMSG);
 12554  04A4  3026               	movlw	low (_NoParityMSG| (0+32768))
 12555  04A5  0020               	movlb	0	; select bank0
 12556  04A6  00A1               	movwf	i1UARTstringWAIT@data
 12557  04A7  3089               	movlw	high (_NoParityMSG| (0+32768))
 12558  04A8  00A2               	movwf	i1UARTstringWAIT@data+1
 12559  04A9  319B  2324  3181   	fcall	i1_UARTstringWAIT
 12560                           
 12561                           ;PS_2.c: 644: UARTstringWAIT("\r\n");
 12562  04AC  30FD               	movlw	low ((STR_14+16)| (0+32768))
 12563  04AD  0020               	movlb	0	; select bank0
 12564  04AE  00A1               	movwf	i1UARTstringWAIT@data
 12565  04AF  3089               	movlw	high ((STR_14+16)| (0+32768))
 12566  04B0  00A2               	movwf	i1UARTstringWAIT@data+1
 12567  04B1  319B  2324  3181   	fcall	i1_UARTstringWAIT
 12568                           
 12569                           ;PS_2.c: 645: delayUS(15000);
 12570  04B4  3000               	movlw	0
 12571  04B5  00F3               	movwf	i1delayUS@US+3
 12572  04B6  3000               	movlw	0
 12573  04B7  00F2               	movwf	i1delayUS@US+2
 12574  04B8  303A               	movlw	58
 12575  04B9  00F1               	movwf	i1delayUS@US+1
 12576  04BA  3098               	movlw	152
 12577  04BB  00F0               	movwf	i1delayUS@US
 12578  04BC  319B  23B5  3181   	fcall	i1_delayUS
 12579                           
 12580                           ;PS_2.c: 646: SetBaud(BaudTyped, 0);
 12581  04BF  0021               	movlb	1	; select bank1
 12582  04C0  0849               	movf	(_BaudTyped+3)^(0+128),w
 12583  04C1  00B2               	movwf	(SetBaud@Baud+3)^(0+128)
 12584  04C2  0848               	movf	(_BaudTyped+2)^(0+128),w
 12585  04C3  00B1               	movwf	(SetBaud@Baud+2)^(0+128)
 12586  04C4  0847               	movf	(_BaudTyped+1)^(0+128),w
 12587  04C5  00B0               	movwf	(SetBaud@Baud+1)^(0+128)
 12588  04C6  0846               	movf	_BaudTyped^(0+128),w
 12589  04C7  00AF               	movwf	SetBaud@Baud^(0+128)
 12590  04C8  01B3               	clrf	SetBaud@Parity^(0+128)
 12591  04C9  318B  2365  3181   	fcall	_SetBaud
 12592                           
 12593                           ;PS_2.c: 647: BAUDMODE = 0;
 12594  04CC  0021               	movlb	1	; select bank1
 12595  04CD  01CC               	clrf	_BAUDMODE^(0+128)
 12596  04CE                     i1l5734:	
 12597                           
 12598                           ;PS_2.c: 648: }
 12599                           ;PS_2.c: 649: RControl =0;
 12600  04CE  0021               	movlb	1	; select bank1
 12601  04CF  01D4               	clrf	_RControl^(0+128)
 12602                           
 12603                           ;PS_2.c: 650: LControl =0;
 12604  04D0  01D0               	clrf	_LControl^(0+128)
 12605                           
 12606                           ;PS_2.c: 651: LALT =0;
 12607  04D1  0023               	movlb	3	; select bank3
 12608  04D2  01EA               	clrf	_LALT^(0+384)
 12609                           
 12610                           ;PS_2.c: 652: RALT =0;
 12611  04D3  01ED               	clrf	_RALT^(0+384)
 12612                           
 12613                           ;PS_2.c: 653: Delete =0;
 12614  04D4  0021               	movlb	1	; select bank1
 12615  04D5  01CF               	clrf	_Delete^(0+128)
 12616  04D6                     i1l5744:	
 12617                           
 12618                           ;PS_2.c: 654: }
 12619                           ;PS_2.c: 656: if(temp)
 12620  04D6  0023               	movlb	3	; select bank3
 12621  04D7  0861               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12622  04D8  1903               	btfsc	3,2
 12623  04D9  2E5E               	goto	i1l5850
 12624                           
 12625                           ;PS_2.c: 657: {
 12626                           ;PS_2.c: 659: if(temp == 0x01 && shortbreak == 0)
 12627  04DA  0361               	decf	Process_PS2_ScanCode@temp^(0+384),w
 12628  04DB  1D03               	btfss	3,2
 12629  04DC  2CE8               	goto	i1l5752
 12630  04DD  0860               	movf	Process_PS2_ScanCode@shortbreak^(0+384),w
 12631  04DE  1D03               	btfss	3,2
 12632  04DF  2CE8               	goto	i1l5752
 12633                           
 12634                           ;PS_2.c: 660: {
 12635                           ;PS_2.c: 662: UART_send_break_timed(100000);
 12636  04E0  30A0               	movlw	160
 12637  04E1  00FA               	movwf	UART_send_break_timed@US
 12638  04E2  3086               	movlw	134
 12639  04E3  00FB               	movwf	UART_send_break_timed@US+1
 12640  04E4  3199  21C9  3181   	fcall	_UART_send_break_timed
 12641                           
 12642                           ;PS_2.c: 663: }
 12643  04E7  2E5E               	goto	i1l5850
 12644  04E8                     i1l5752:	
 12645                           
 12646                           ;PS_2.c: 664: else if(temp == 0x01 && shortbreak == 1)
 12647  04E8  0023               	movlb	3	; select bank3
 12648  04E9  0361               	decf	Process_PS2_ScanCode@temp^(0+384),w
 12649  04EA  1D03               	btfss	3,2
 12650  04EB  2CF5               	goto	i1l5760
 12651  04EC  0360               	decf	Process_PS2_ScanCode@shortbreak^(0+384),w
 12652  04ED  1D03               	btfss	3,2
 12653  04EE  2CF5               	goto	i1l5760
 12654                           
 12655                           ;PS_2.c: 665: {
 12656                           ;PS_2.c: 667: UART_send_break();
 12657  04EF  3198  2045  3181   	fcall	_UART_send_break
 12658                           
 12659                           ;PS_2.c: 668: shortbreak = 0;
 12660  04F2  0023               	movlb	3	; select bank3
 12661  04F3  01E0               	clrf	Process_PS2_ScanCode@shortbreak^(0+384)
 12662                           
 12663                           ;PS_2.c: 669: }
 12664  04F4  2E5E               	goto	i1l5850
 12665  04F5                     i1l5760:	
 12666                           
 12667                           ;PS_2.c: 670: else
 12668                           ;PS_2.c: 671: {
 12669                           ;PS_2.c: 672: if(!BAUDMODE)
 12670  04F5  0021               	movlb	1	; select bank1
 12671  04F6  084C               	movf	_BAUDMODE^(0+128),w
 12672  04F7  1D03               	btfss	3,2
 12673  04F8  2D14               	goto	i1l5772
 12674                           
 12675                           ;PS_2.c: 673: {
 12676                           ;PS_2.c: 674: if(temp == '\n')
 12677  04F9  300A               	movlw	10
 12678  04FA  0023               	movlb	3	; select bank3
 12679  04FB  0661               	xorwf	Process_PS2_ScanCode@temp^(0+384),w
 12680  04FC  1D03               	btfss	3,2
 12681  04FD  2D01               	goto	i1l5766
 12682                           
 12683                           ;PS_2.c: 675: {
 12684                           ;PS_2.c: 676: LineOverride = 1;
 12685  04FE  0024               	movlb	4	; select bank4
 12686  04FF  01E0               	clrf	_LineOverride^(0+512)
 12687  0500  0AE0               	incf	_LineOverride^(0+512),f
 12688  0501                     i1l5766:	
 12689                           
 12690                           ;PS_2.c: 677: }
 12691                           ;PS_2.c: 678: UARTchar(temp, 0, 0);
 12692  0501  01F8               	clrf	i1UARTchar@override
 12693  0502  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12694  0503  0023               	movlb	3	; select bank3
 12695  0504  0861               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12696  0505  3190  2085  3181   	fcall	i1_UARTchar
 12697                           
 12698                           ;PS_2.c: 679: if(temp == '\r')
 12699  0508  300D               	movlw	13
 12700  0509  0023               	movlb	3	; select bank3
 12701  050A  0661               	xorwf	Process_PS2_ScanCode@temp^(0+384),w
 12702  050B  1D03               	btfss	3,2
 12703  050C  2E5E               	goto	i1l5850
 12704                           
 12705                           ;PS_2.c: 680: {
 12706                           ;PS_2.c: 681: UARTchar('\n', 0, 0);
 12707  050D  01F8               	clrf	i1UARTchar@override
 12708  050E  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12709  050F  300A               	movlw	10
 12710  0510  3190  2085  3181   	fcall	i1_UARTchar
 12711                           
 12712                           ;PS_2.c: 682: }
 12713                           ;PS_2.c: 684: }
 12714  0513  2E5E               	goto	i1l5850
 12715  0514                     i1l5772:	
 12716                           
 12717                           ;PS_2.c: 685: else
 12718                           ;PS_2.c: 686: {
 12719                           ;PS_2.c: 687: if(ISNUMBER(temp))
 12720  0514  0023               	movlb	3	; select bank3
 12721  0515  0861               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12722  0516  3198  20D3  3181   	fcall	_ISNUMBER
 12723  0519  3A00               	xorlw	0
 12724  051A  1903               	skipnz
 12725  051B  2D5B               	goto	i1l5780
 12726                           
 12727                           ;PS_2.c: 688: {
 12728                           ;PS_2.c: 689: BaudTyped*=10;
 12729  051C  3000               	movlw	0
 12730  051D  00F3               	movwf	___lmul@multiplier+3
 12731  051E  3000               	movlw	0
 12732  051F  00F2               	movwf	___lmul@multiplier+2
 12733  0520  3000               	movlw	0
 12734  0521  00F1               	movwf	___lmul@multiplier+1
 12735  0522  300A               	movlw	10
 12736  0523  00F0               	movwf	___lmul@multiplier
 12737  0524  0021               	movlb	1	; select bank1
 12738  0525  0849               	movf	(_BaudTyped+3)^(0+128),w
 12739  0526  00F7               	movwf	___lmul@multiplicand+3
 12740  0527  0848               	movf	(_BaudTyped+2)^(0+128),w
 12741  0528  00F6               	movwf	___lmul@multiplicand+2
 12742  0529  0847               	movf	(_BaudTyped+1)^(0+128),w
 12743  052A  00F5               	movwf	___lmul@multiplicand+1
 12744  052B  0846               	movf	_BaudTyped^(0+128),w
 12745  052C  00F4               	movwf	___lmul@multiplicand
 12746  052D  319A  22C6  3181   	fcall	___lmul
 12747  0530  0873               	movf	?___lmul+3,w
 12748  0531  0021               	movlb	1	; select bank1
 12749  0532  00C9               	movwf	(_BaudTyped+3)^(0+128)
 12750  0533  0872               	movf	?___lmul+2,w
 12751  0534  00C8               	movwf	(_BaudTyped+2)^(0+128)
 12752  0535  0871               	movf	?___lmul+1,w
 12753  0536  00C7               	movwf	(_BaudTyped+1)^(0+128)
 12754  0537  0870               	movf	?___lmul,w
 12755  0538  00C6               	movwf	_BaudTyped^(0+128)
 12756                           
 12757                           ;PS_2.c: 690: BaudTyped += temp - 48;
 12758  0539  0023               	movlb	3	; select bank3
 12759  053A  0861               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12760  053B  3ED0               	addlw	208
 12761  053C  0021               	movlb	1	; select bank1
 12762  053D  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12763  053E  30FF               	movlw	255
 12764  053F  1803               	skipnc
 12765  0540  3000               	movlw	0
 12766  0541  00BD               	movwf	(??_Process_PS2_ScanCode^(0+128)+1)
 12767  0542  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12768  0543  00BE               	movwf	(??_Process_PS2_ScanCode+2)^(0+128)
 12769  0544  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 12770  0545  00BF               	movwf	((??_Process_PS2_ScanCode+2)^(0+128)+1)
 12771  0546  3000               	movlw	0
 12772  0547  1BBF               	btfsc	((??_Process_PS2_ScanCode+2)^(0+128)+1),7
 12773  0548  30FF               	movlw	255
 12774  0549  00C0               	movwf	((??_Process_PS2_ScanCode+2)^(0+128)+2)
 12775  054A  00C1               	movwf	((??_Process_PS2_ScanCode+2)^(0+128)+3)
 12776  054B  083E               	movf	(??_Process_PS2_ScanCode+2)^(0+128),w
 12777  054C  07C6               	addwf	_BaudTyped^(0+128),f
 12778  054D  083F               	movf	(??_Process_PS2_ScanCode+3)^(0+128),w
 12779  054E  3DC7               	addwfc	(_BaudTyped+1)^(0+128),f
 12780  054F  0840               	movf	(??_Process_PS2_ScanCode+4)^(0+128),w
 12781  0550  3DC8               	addwfc	(_BaudTyped+2)^(0+128),f
 12782  0551  0841               	movf	(??_Process_PS2_ScanCode+5)^(0+128),w
 12783  0552  3DC9               	addwfc	(_BaudTyped+3)^(0+128),f
 12784                           
 12785                           ;PS_2.c: 691: UARTchar(temp, 0, 0);
 12786  0553  01F8               	clrf	i1UARTchar@override
 12787  0554  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12788  0555  0023               	movlb	3	; select bank3
 12789  0556  0861               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12790  0557  3190  2085  3181   	fcall	i1_UARTchar
 12791                           
 12792                           ;PS_2.c: 692: }
 12793  055A  2E5E               	goto	i1l5850
 12794  055B                     i1l5780:	
 12795                           
 12796                           ;PS_2.c: 693: else if(temp == 'o' || temp == 'O')
 12797  055B  306F               	movlw	111
 12798  055C  0023               	movlb	3	; select bank3
 12799  055D  0661               	xorwf	Process_PS2_ScanCode@temp^(0+384),w
 12800  055E  1903               	btfsc	3,2
 12801  055F  2D64               	goto	i1l813
 12802  0560  304F               	movlw	79
 12803  0561  0661               	xorwf	Process_PS2_ScanCode@temp^(0+384),w
 12804  0562  1D03               	btfss	3,2
 12805  0563  2D6D               	goto	i1l5786
 12806  0564                     i1l813:	
 12807                           
 12808                           ;PS_2.c: 694: {
 12809                           ;PS_2.c: 695: ParityTyped = 1;
 12810  0564  01EC               	clrf	_ParityTyped^(0+384)
 12811  0565  0AEC               	incf	_ParityTyped^(0+384),f
 12812                           
 12813                           ;PS_2.c: 696: UARTchar(temp, 0, 0);
 12814  0566  01F8               	clrf	i1UARTchar@override
 12815  0567  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12816  0568  0861               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12817  0569  3190  2085  3181   	fcall	i1_UARTchar
 12818                           
 12819                           ;PS_2.c: 697: }
 12820  056C  2E5E               	goto	i1l5850
 12821  056D                     i1l5786:	
 12822                           
 12823                           ;PS_2.c: 698: else if(temp == 'e' || temp == 'E')
 12824  056D  3065               	movlw	101
 12825  056E  0023               	movlb	3	; select bank3
 12826  056F  0661               	xorwf	Process_PS2_ScanCode@temp^(0+384),w
 12827  0570  1903               	btfsc	3,2
 12828  0571  2D76               	goto	i1l5790
 12829  0572  3045               	movlw	69
 12830  0573  0661               	xorwf	Process_PS2_ScanCode@temp^(0+384),w
 12831  0574  1D03               	btfss	3,2
 12832  0575  2D83               	goto	i1l5794
 12833  0576                     i1l5790:	
 12834                           
 12835                           ;PS_2.c: 699: {
 12836                           ;PS_2.c: 700: ParityTyped = 2;
 12837  0576  3002               	movlw	2
 12838  0577  0021               	movlb	1	; select bank1
 12839  0578  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12840  0579  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12841  057A  0023               	movlb	3	; select bank3
 12842  057B  00EC               	movwf	_ParityTyped^(0+384)
 12843                           
 12844                           ;PS_2.c: 701: UARTchar(temp, 0, 0);
 12845  057C  01F8               	clrf	i1UARTchar@override
 12846  057D  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12847  057E  0861               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12848  057F  3190  2085  3181   	fcall	i1_UARTchar
 12849                           
 12850                           ;PS_2.c: 702: }
 12851  0582  2E5E               	goto	i1l5850
 12852  0583                     i1l5794:	
 12853                           
 12854                           ;PS_2.c: 703: else if(temp == 'm' || temp == 'M')
 12855  0583  306D               	movlw	109
 12856  0584  0023               	movlb	3	; select bank3
 12857  0585  0661               	xorwf	Process_PS2_ScanCode@temp^(0+384),w
 12858  0586  1903               	btfsc	3,2
 12859  0587  2D8C               	goto	i1l5798
 12860  0588  304D               	movlw	77
 12861  0589  0661               	xorwf	Process_PS2_ScanCode@temp^(0+384),w
 12862  058A  1D03               	btfss	3,2
 12863  058B  2D99               	goto	i1l5802
 12864  058C                     i1l5798:	
 12865                           
 12866                           ;PS_2.c: 704: {
 12867                           ;PS_2.c: 705: ParityTyped = 3;
 12868  058C  3003               	movlw	3
 12869  058D  0021               	movlb	1	; select bank1
 12870  058E  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12871  058F  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12872  0590  0023               	movlb	3	; select bank3
 12873  0591  00EC               	movwf	_ParityTyped^(0+384)
 12874                           
 12875                           ;PS_2.c: 706: UARTchar(temp, 0, 0);
 12876  0592  01F8               	clrf	i1UARTchar@override
 12877  0593  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12878  0594  0861               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12879  0595  3190  2085  3181   	fcall	i1_UARTchar
 12880                           
 12881                           ;PS_2.c: 707: }
 12882  0598  2E5E               	goto	i1l5850
 12883  0599                     i1l5802:	
 12884                           
 12885                           ;PS_2.c: 708: else if(temp == 's' || temp == 'S')
 12886  0599  3073               	movlw	115
 12887  059A  0023               	movlb	3	; select bank3
 12888  059B  0661               	xorwf	Process_PS2_ScanCode@temp^(0+384),w
 12889  059C  1903               	btfsc	3,2
 12890  059D  2DA2               	goto	i1l5806
 12891  059E  3053               	movlw	83
 12892  059F  0661               	xorwf	Process_PS2_ScanCode@temp^(0+384),w
 12893  05A0  1D03               	btfss	3,2
 12894  05A1  2DAF               	goto	i1l5810
 12895  05A2                     i1l5806:	
 12896                           
 12897                           ;PS_2.c: 709: {
 12898                           ;PS_2.c: 710: ParityTyped = 4;
 12899  05A2  3004               	movlw	4
 12900  05A3  0021               	movlb	1	; select bank1
 12901  05A4  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12902  05A5  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12903  05A6  0023               	movlb	3	; select bank3
 12904  05A7  00EC               	movwf	_ParityTyped^(0+384)
 12905                           
 12906                           ;PS_2.c: 711: UARTchar(temp, 0, 0);
 12907  05A8  01F8               	clrf	i1UARTchar@override
 12908  05A9  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12909  05AA  0861               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12910  05AB  3190  2085  3181   	fcall	i1_UARTchar
 12911                           
 12912                           ;PS_2.c: 712: }
 12913  05AE  2E5E               	goto	i1l5850
 12914  05AF                     i1l5810:	
 12915                           
 12916                           ;PS_2.c: 713: else if(temp == '\r')
 12917  05AF  300D               	movlw	13
 12918  05B0  0023               	movlb	3	; select bank3
 12919  05B1  0661               	xorwf	Process_PS2_ScanCode@temp^(0+384),w
 12920  05B2  1D03               	btfss	3,2
 12921  05B3  2E5E               	goto	i1l5850
 12922                           
 12923                           ;PS_2.c: 714: {
 12924                           ;PS_2.c: 715: UARTstringWAIT("\r\n");
 12925  05B4  30FD               	movlw	low ((STR_14+16)| (0+32768))
 12926  05B5  0020               	movlb	0	; select bank0
 12927  05B6  00A1               	movwf	i1UARTstringWAIT@data
 12928  05B7  3089               	movlw	high ((STR_14+16)| (0+32768))
 12929  05B8  00A2               	movwf	i1UARTstringWAIT@data+1
 12930  05B9  319B  2324  3181   	fcall	i1_UARTstringWAIT
 12931                           
 12932                           ;PS_2.c: 716: delayUS(15000);
 12933  05BC  3000               	movlw	0
 12934  05BD  00F3               	movwf	i1delayUS@US+3
 12935  05BE  3000               	movlw	0
 12936  05BF  00F2               	movwf	i1delayUS@US+2
 12937  05C0  303A               	movlw	58
 12938  05C1  00F1               	movwf	i1delayUS@US+1
 12939  05C2  3098               	movlw	152
 12940  05C3  00F0               	movwf	i1delayUS@US
 12941  05C4  319B  23B5  3181   	fcall	i1_delayUS
 12942                           
 12943                           ;PS_2.c: 717: if(BaudTyped >=2400 && BaudTyped <= 115200)
 12944  05C7  0021               	movlb	1	; select bank1
 12945  05C8  0849               	movf	(_BaudTyped+3)^(0+128),w
 12946  05C9  1D03               	btfss	3,2
 12947  05CA  2DD4               	goto	i1l5818
 12948  05CB  0848               	movf	(_BaudTyped+2)^(0+128),w
 12949  05CC  1D03               	btfss	3,2
 12950  05CD  2DD4               	goto	i1l5818
 12951  05CE  3060               	movlw	96
 12952  05CF  0246               	subwf	_BaudTyped^(0+128),w
 12953  05D0  3009               	movlw	9
 12954  05D1  3B47               	subwfb	(_BaudTyped+1)^(0+128),w
 12955  05D2  1C03               	btfss	3,0
 12956  05D3  2E49               	goto	i1l5844
 12957  05D4                     i1l5818:	
 12958  05D4  0849               	movf	(_BaudTyped+3)^(0+128),w
 12959  05D5  1D03               	btfss	3,2
 12960  05D6  2E49               	goto	i1l5844
 12961  05D7  3001               	movlw	1
 12962  05D8  0246               	subwf	_BaudTyped^(0+128),w
 12963  05D9  30C2               	movlw	194
 12964  05DA  3B47               	subwfb	(_BaudTyped+1)^(0+128),w
 12965  05DB  3001               	movlw	1
 12966  05DC  3B48               	subwfb	(_BaudTyped+2)^(0+128),w
 12967  05DD  1803               	btfsc	3,0
 12968  05DE  2E49               	goto	i1l5844
 12969                           
 12970                           ;PS_2.c: 718: {
 12971                           ;PS_2.c: 719: sprintf(buf,"Baud will be set to %lu",BaudTyped);
 12972  05DF  30AC               	movlw	low (STR_18| (0+32768))
 12973  05E0  0020               	movlb	0	; select bank0
 12974  05E1  00AA               	movwf	sprintf@f
 12975  05E2  3089               	movlw	high (STR_18| (0+32768))
 12976  05E3  00AB               	movwf	sprintf@f+1
 12977  05E4  0021               	movlb	1	; select bank1
 12978  05E5  0849               	movf	(_BaudTyped+3)^(0+128),w
 12979  05E6  0020               	movlb	0	; select bank0
 12980  05E7  00AF               	movwf	?_sprintf+5
 12981  05E8  0021               	movlb	1	; select bank1
 12982  05E9  0848               	movf	(_BaudTyped+2)^(0+128),w
 12983  05EA  0020               	movlb	0	; select bank0
 12984  05EB  00AE               	movwf	?_sprintf+4
 12985  05EC  0021               	movlb	1	; select bank1
 12986  05ED  0847               	movf	(_BaudTyped+1)^(0+128),w
 12987  05EE  0020               	movlb	0	; select bank0
 12988  05EF  00AD               	movwf	?_sprintf+3
 12989  05F0  0021               	movlb	1	; select bank1
 12990  05F1  0846               	movf	_BaudTyped^(0+128),w
 12991  05F2  0020               	movlb	0	; select bank0
 12992  05F3  00AC               	movwf	?_sprintf+2
 12993  05F4  30A0               	movlw	(low (Process_PS2_ScanCode@buf| (0+256)))& (0+255)
 12994  05F5  3197  270A  3181   	fcall	_sprintf
 12995                           
 12996                           ;PS_2.c: 720: UARTstringWAIT(buf);
 12997  05F8  30A0               	movlw	low Process_PS2_ScanCode@buf
 12998  05F9  0020               	movlb	0	; select bank0
 12999  05FA  00A1               	movwf	i1UARTstringWAIT@data
 13000  05FB  3001               	movlw	high Process_PS2_ScanCode@buf
 13001  05FC  00A2               	movwf	i1UARTstringWAIT@data+1
 13002  05FD  319B  2324  3181   	fcall	i1_UARTstringWAIT
 13003                           
 13004                           ;PS_2.c: 721: if(ParityTyped)
 13005  0600  0023               	movlb	3	; select bank3
 13006  0601  086C               	movf	_ParityTyped^(0+384),w
 13007  0602  1D03               	btfss	3,2
 13008  0603  2E19               	goto	i1l5838
 13009  0604  2E26               	goto	i1l5840
 13010  0605                     i1l5828:	
 13011                           ;PS_2.c: 724: {
 13012                           ;PS_2.c: 725: case 1:
 13013                           
 13014                           ;PS_2.c: 722: {
 13015                           ;PS_2.c: 723: switch (ParityTyped)
 13016                           
 13017                           
 13018                           ;PS_2.c: 726: UARTstringWAIT(OddParityMSG);
 13019  0605  3011               	movlw	low (_OddParityMSG| (0+32768))
 13020  0606  0020               	movlb	0	; select bank0
 13021  0607  00A1               	movwf	i1UARTstringWAIT@data
 13022  0608  3089               	movlw	high (_OddParityMSG| (0+32768))
 13023  0609  2E2A               	goto	L7
 13024  060A                     i1l5830:	
 13025                           ;PS_2.c: 728: case 2:
 13026                           
 13027                           ;PS_2.c: 727: break;
 13028                           
 13029                           
 13030                           ;PS_2.c: 729: UARTstringWAIT(EvenParityMSG);
 13031  060A  30FB               	movlw	low (_EvenParityMSG| (0+32768))
 13032  060B  0020               	movlb	0	; select bank0
 13033  060C  00A1               	movwf	i1UARTstringWAIT@data
 13034  060D  3088               	movlw	high (_EvenParityMSG| (0+32768))
 13035  060E  2E2A               	goto	L7
 13036  060F                     i1l5832:	
 13037                           ;PS_2.c: 731: case 3:
 13038                           
 13039                           ;PS_2.c: 730: break;
 13040                           
 13041                           
 13042                           ;PS_2.c: 732: UARTstringWAIT(MarkParityMSG);
 13043  060F  304A               	movlw	low (_MarkParityMSG| (0+32768))
 13044  0610  0020               	movlb	0	; select bank0
 13045  0611  00A1               	movwf	i1UARTstringWAIT@data
 13046  0612  3089               	movlw	high (_MarkParityMSG| (0+32768))
 13047  0613  2E2A               	goto	L7
 13048  0614                     i1l5834:	
 13049                           ;PS_2.c: 734: default:
 13050                           
 13051                           ;PS_2.c: 733: break;
 13052                           
 13053                           
 13054                           ;PS_2.c: 735: UARTstringWAIT(SpaceParityMSG);
 13055  0614  303A               	movlw	low (_SpaceParityMSG| (0+32768))
 13056  0615  0020               	movlb	0	; select bank0
 13057  0616  00A1               	movwf	i1UARTstringWAIT@data
 13058  0617  3089               	movlw	high (_SpaceParityMSG| (0+32768))
 13059  0618  2E2A               	goto	L7
 13060  0619                     i1l5838:	
 13061                           ;PS_2.c: 737: }
 13062                           
 13063                           ;PS_2.c: 736: break;
 13064                           
 13065  0619  0023               	movlb	3	; select bank3
 13066  061A  086C               	movf	_ParityTyped^(0+384),w
 13067                           
 13068                           ; Switch size 1, requested type "space"
 13069                           ; Number of cases is 3, Range of values is 1 to 3
 13070                           ; switch strategies available:
 13071                           ; Name         Instructions Cycles
 13072                           ; simple_byte           10     6 (average)
 13073                           ; direct_byte           15     9 (fixed)
 13074                           ; jumptable            263     9 (fixed)
 13075                           ;	Chosen strategy is simple_byte
 13076  061B  3A01               	xorlw	1	; case 1
 13077  061C  1903               	skipnz
 13078  061D  2E05               	goto	i1l5828
 13079  061E  3A03               	xorlw	3	; case 2
 13080  061F  1903               	skipnz
 13081  0620  2E0A               	goto	i1l5830
 13082  0621  3A01               	xorlw	1	; case 3
 13083  0622  1903               	skipnz
 13084  0623  2E0F               	goto	i1l5832
 13085  0624  2E14               	goto	i1l5834
 13086                           
 13087                           ;PS_2.c: 738: }
 13088  0625  2E2E               	goto	i1l836
 13089  0626                     i1l5840:	
 13090                           
 13091                           ;PS_2.c: 739: else
 13092                           ;PS_2.c: 740: {
 13093                           ;PS_2.c: 741: UARTstringWAIT(NoParityMSG);
 13094  0626  3026               	movlw	low (_NoParityMSG| (0+32768))
 13095  0627  0020               	movlb	0	; select bank0
 13096  0628  00A1               	movwf	i1UARTstringWAIT@data
 13097  0629  3089               	movlw	high (_NoParityMSG| (0+32768))
 13098  062A                     L7:	
 13099  062A  00A2               	movwf	i1UARTstringWAIT@data+1
 13100  062B  319B  2324  3181   	fcall	i1_UARTstringWAIT
 13101  062E                     i1l836:	
 13102                           
 13103                           ;PS_2.c: 742: }
 13104                           ;PS_2.c: 743: UARTstringWAIT("\r\n");
 13105  062E  30FD               	movlw	low ((STR_14+16)| (0+32768))
 13106  062F  0020               	movlb	0	; select bank0
 13107  0630  00A1               	movwf	i1UARTstringWAIT@data
 13108  0631  3089               	movlw	high ((STR_14+16)| (0+32768))
 13109  0632  00A2               	movwf	i1UARTstringWAIT@data+1
 13110  0633  319B  2324  3181   	fcall	i1_UARTstringWAIT
 13111                           
 13112                           ;PS_2.c: 744: SetBaud(BaudTyped, ParityTyped);
 13113  0636  0021               	movlb	1	; select bank1
 13114  0637  0849               	movf	(_BaudTyped+3)^(0+128),w
 13115  0638  00B2               	movwf	(SetBaud@Baud+3)^(0+128)
 13116  0639  0848               	movf	(_BaudTyped+2)^(0+128),w
 13117  063A  00B1               	movwf	(SetBaud@Baud+2)^(0+128)
 13118  063B  0847               	movf	(_BaudTyped+1)^(0+128),w
 13119  063C  00B0               	movwf	(SetBaud@Baud+1)^(0+128)
 13120  063D  0846               	movf	_BaudTyped^(0+128),w
 13121  063E  00AF               	movwf	SetBaud@Baud^(0+128)
 13122  063F  0023               	movlb	3	; select bank3
 13123  0640  086C               	movf	_ParityTyped^(0+384),w
 13124  0641  0021               	movlb	1	; select bank1
 13125  0642  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 13126  0643  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 13127  0644  00B3               	movwf	SetBaud@Parity^(0+128)
 13128  0645  318B  2365  3181   	fcall	_SetBaud
 13129                           
 13130                           ;PS_2.c: 745: }
 13131  0648  2E5C               	goto	i1l5848
 13132  0649                     i1l5844:	
 13133                           
 13134                           ;PS_2.c: 746: else
 13135                           ;PS_2.c: 747: {
 13136                           ;PS_2.c: 748: UARTstringWAIT("Baud Out of Range\r\n");
 13137  0649  30D9               	movlw	low (STR_20| (0+32768))
 13138  064A  0020               	movlb	0	; select bank0
 13139  064B  00A1               	movwf	i1UARTstringWAIT@data
 13140  064C  3089               	movlw	high (STR_20| (0+32768))
 13141  064D  00A2               	movwf	i1UARTstringWAIT@data+1
 13142  064E  319B  2324  3181   	fcall	i1_UARTstringWAIT
 13143                           
 13144                           ;PS_2.c: 749: delayUS(15000);
 13145  0651  3000               	movlw	0
 13146  0652  00F3               	movwf	i1delayUS@US+3
 13147  0653  3000               	movlw	0
 13148  0654  00F2               	movwf	i1delayUS@US+2
 13149  0655  303A               	movlw	58
 13150  0656  00F1               	movwf	i1delayUS@US+1
 13151  0657  3098               	movlw	152
 13152  0658  00F0               	movwf	i1delayUS@US
 13153  0659  319B  23B5  3181   	fcall	i1_delayUS
 13154  065C                     i1l5848:	
 13155                           
 13156                           ;PS_2.c: 750: }
 13157                           ;PS_2.c: 751: BAUDMODE=0;
 13158  065C  0021               	movlb	1	; select bank1
 13159  065D  01CC               	clrf	_BAUDMODE^(0+128)
 13160  065E                     i1l5850:	
 13161                           
 13162                           ;PS_2.c: 752: }
 13163                           ;PS_2.c: 753: }
 13164                           ;PS_2.c: 754: }
 13165                           ;PS_2.c: 755: }
 13166                           ;PS_2.c: 758: temp =0;
 13167  065E  0023               	movlb	3	; select bank3
 13168  065F  01E1               	clrf	Process_PS2_ScanCode@temp^(0+384)
 13169                           
 13170                           ;PS_2.c: 759: PS_2_Read_Data_First =0;
 13171  0660  01E2               	clrf	_PS_2_Read_Data_First^(0+384)
 13172  0661  01E3               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
 13173                           
 13174                           ;PS_2.c: 760: PS_2_Read_Data_Second =0;
 13175  0662  01E4               	clrf	_PS_2_Read_Data_Second^(0+384)
 13176  0663  01E5               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
 13177                           
 13178                           ;PS_2.c: 761: PS_2_Read_Data_Third =0;
 13179  0664  01E6               	clrf	_PS_2_Read_Data_Third^(0+384)
 13180  0665  01E7               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
 13181                           
 13182                           ;PS_2.c: 762: Caps_Lock_Key_old = Caps_Lock_Key;
 13183  0666  0021               	movlb	1	; select bank1
 13184  0667  084D               	movf	_Caps_Lock_Key^(0+128),w
 13185  0668  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 13186  0669  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 13187  066A  00CE               	movwf	_Caps_Lock_Key_old^(0+128)
 13188                           
 13189                           ;PS_2.c: 763: Right_Shift_Key_old = Right_Shift_Key;
 13190  066B  0023               	movlb	3	; select bank3
 13191  066C  086E               	movf	_Right_Shift_Key^(0+384),w
 13192  066D  0021               	movlb	1	; select bank1
 13193  066E  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 13194  066F  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 13195  0670  00D6               	movwf	_Right_Shift_Key_old^(0+128)
 13196                           
 13197                           ;PS_2.c: 764: Left_Shift_Key_old = Left_Shift_Key;
 13198  0671  0023               	movlb	3	; select bank3
 13199  0672  086B               	movf	_Left_Shift_Key^(0+384),w
 13200  0673  0021               	movlb	1	; select bank1
 13201  0674  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 13202  0675  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 13203  0676  00D1               	movwf	_Left_Shift_Key_old^(0+128)
 13204                           
 13205                           ;PS_2.c: 765: LATC &= ~0b00010000;
 13206  0677  30EF               	movlw	239
 13207  0678  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 13208  0679  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 13209  067A  0022               	movlb	2	; select bank2
 13210  067B  058E               	andwf	14,f	;volatile
 13211                           
 13212                           ;PS_2.c: 766: }
 13213  067C  292E               	goto	i1l5870
 13214  067D                     i1l5866:	
 13215                           
 13216                           ;PS_2.c: 767: else
 13217                           ;PS_2.c: 768: {
 13218                           ;PS_2.c: 770: cleanBuffer(PS_2_ScanCodes, 12);
 13219  067D  300C               	movlw	12
 13220  067E  00F0               	movwf	cleanBuffer@count
 13221  067F  3000               	movlw	0
 13222  0680  00F1               	movwf	cleanBuffer@count+1
 13223  0681  30D8               	movlw	(low (_PS_2_ScanCodes| 0))& (0+255)
 13224  0682  3190  200B  3181   	fcall	_cleanBuffer
 13225                           
 13226                           ;PS_2.c: 771: PS_2_Buffer_items = 0;
 13227  0685  0021               	movlb	1	; select bank1
 13228  0686  01D2               	clrf	_PS_2_Buffer_items^(0+128)
 13229  0687  292E               	goto	i1l5870
 13230  0688                     __end_of_Process_PS2_ScanCode:	
 13231                           
 13232                           	psect	text44
 13233  0CDE                     __ptext44:	
 13234 ;; *************** function i1_Send_PS2 *****************
 13235 ;; Defined at:
 13236 ;;		line 856 in file "PS_2.c"
 13237 ;; Parameters:    Size  Location     Type
 13238 ;;  command         1    wreg     unsigned char 
 13239 ;; Auto vars:     Size  Location     Type
 13240 ;;  command         1    1[BANK0 ] unsigned char 
 13241 ;;  Send_PS2        2    3[BANK0 ] unsigned int 
 13242 ;;  Send_PS2        1    2[BANK0 ] unsigned char 
 13243 ;;  Send_PS2        1    0[BANK0 ] unsigned char 
 13244 ;; Return value:  Size  Location     Type
 13245 ;;                  1    wreg      unsigned char 
 13246 ;; Registers used:
 13247 ;;		wreg, status,2, status,0, pclath, cstack
 13248 ;; Tracked objects:
 13249 ;;		On entry : 0/0
 13250 ;;		On exit  : 0/0
 13251 ;;		Unchanged: 0/0
 13252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13254 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13255 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13256 ;;      Totals:         4       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13257 ;;Total ram usage:        9 bytes
 13258 ;; Hardware stack levels used:    1
 13259 ;; Hardware stack levels required when called:    1
 13260 ;; This function calls:
 13261 ;;		i1_CheckSum_byte
 13262 ;;		i1_Clock_TRIS
 13263 ;;		i1_Data_TRIS
 13264 ;;		i1_READ_PS_2_PIN
 13265 ;;		i1_delayUS
 13266 ;; This function is called by:
 13267 ;;		_Process_PS2_ScanCode
 13268 ;;		_ResendLast
 13269 ;; This function uses a non-reentrant model
 13270 ;;
 13271                           
 13272                           
 13273                           ;psect for function i1_Send_PS2
 13274  0CDE                     i1_Send_PS2:	
 13275                           
 13276                           ;incstack = 0
 13277                           ; Regs used in i1_Send_PS2: [wreg+status,2+status,0+pclath+cstack]
 13278                           ;i1Send_PS2@command stored from wreg
 13279  0CDE  0020               	movlb	0	; select bank0
 13280  0CDF  00A1               	movwf	i1Send_PS2@command
 13281                           
 13282                           ;PS_2.c: 858: unsigned char i=0;
 13283  0CE0  01A2               	clrf	i1Send_PS2@i
 13284                           
 13285                           ;PS_2.c: 859: unsigned char oddparity = CheckSum_byte((unsigned int)command , 3);
 13286  0CE1  0821               	movf	i1Send_PS2@command,w
 13287  0CE2  00FA               	movwf	??i1_Send_PS2
 13288  0CE3  01FB               	clrf	??i1_Send_PS2+1
 13289  0CE4  087A               	movf	??i1_Send_PS2,w
 13290  0CE5  00F0               	movwf	i1CheckSum_byte@This
 13291  0CE6  087B               	movf	??i1_Send_PS2+1,w
 13292  0CE7  00F1               	movwf	i1CheckSum_byte@This+1
 13293  0CE8  3003               	movlw	3
 13294  0CE9  00FC               	movwf	??i1_Send_PS2+2
 13295  0CEA  087C               	movf	??i1_Send_PS2+2,w
 13296  0CEB  00F2               	movwf	i1CheckSum_byte@Odd_Even
 13297  0CEC  319A  2298  318C   	fcall	i1_CheckSum_byte
 13298  0CEF  00FD               	movwf	??i1_Send_PS2+3
 13299  0CF0  087D               	movf	??i1_Send_PS2+3,w
 13300  0CF1  0020               	movlb	0	; select bank0
 13301  0CF2  00A0               	movwf	i1Send_PS2@oddparity
 13302                           
 13303                           ;PS_2.c: 860: unsigned int timeout =0;
 13304  0CF3  01A3               	clrf	i1Send_PS2@timeout
 13305  0CF4  01A4               	clrf	i1Send_PS2@timeout+1
 13306                           
 13307                           ;PS_2.c: 862: Clock_TRIS(0);
 13308  0CF5  3000               	movlw	0
 13309  0CF6  3198  207C  318C   	fcall	i1_Clock_TRIS
 13310                           
 13311                           ;PS_2.c: 863: Data_TRIS(0);
 13312  0CF9  3000               	movlw	0
 13313  0CFA  3198  2086  318C   	fcall	i1_Data_TRIS
 13314                           
 13315                           ;PS_2.c: 864: LATA &= ~0b00100000;
 13316  0CFD  30DF               	movlw	223
 13317  0CFE  00FA               	movwf	??i1_Send_PS2
 13318  0CFF  087A               	movf	??i1_Send_PS2,w
 13319  0D00  0022               	movlb	2	; select bank2
 13320  0D01  058C               	andwf	12,f	;volatile
 13321                           
 13322                           ;PS_2.c: 865: delayUS(300);
 13323  0D02  3000               	movlw	0
 13324  0D03  00F3               	movwf	i1delayUS@US+3
 13325  0D04  3000               	movlw	0
 13326  0D05  00F2               	movwf	i1delayUS@US+2
 13327  0D06  3001               	movlw	1
 13328  0D07  00F1               	movwf	i1delayUS@US+1
 13329  0D08  302C               	movlw	44
 13330  0D09  00F0               	movwf	i1delayUS@US
 13331  0D0A  319B  23B5  318C   	fcall	i1_delayUS
 13332                           
 13333                           ;PS_2.c: 866: LATA &= ~0b00010000;
 13334  0D0D  30EF               	movlw	239
 13335  0D0E  00FA               	movwf	??i1_Send_PS2
 13336  0D0F  087A               	movf	??i1_Send_PS2,w
 13337  0D10  0022               	movlb	2	; select bank2
 13338  0D11  058C               	andwf	12,f	;volatile
 13339                           
 13340                           ;PS_2.c: 867: delayUS(20);
 13341  0D12  3000               	movlw	0
 13342  0D13  00F3               	movwf	i1delayUS@US+3
 13343  0D14  3000               	movlw	0
 13344  0D15  00F2               	movwf	i1delayUS@US+2
 13345  0D16  3000               	movlw	0
 13346  0D17  00F1               	movwf	i1delayUS@US+1
 13347  0D18  3014               	movlw	20
 13348  0D19  00F0               	movwf	i1delayUS@US
 13349  0D1A  319B  23B5  318C   	fcall	i1_delayUS
 13350                           
 13351                           ;PS_2.c: 868: Clock_TRIS(1);
 13352  0D1D  3001               	movlw	1
 13353  0D1E  3198  207C  318C   	fcall	i1_Clock_TRIS
 13354                           
 13355                           ;PS_2.c: 869: timeout=0;
 13356  0D21  0020               	movlb	0	; select bank0
 13357  0D22  01A3               	clrf	i1Send_PS2@timeout
 13358  0D23  01A4               	clrf	i1Send_PS2@timeout+1
 13359  0D24                     i1l5202:	
 13360                           ;PS_2.c: 870: while(READ_PS_2_PIN(0b00100000))
 13361                           
 13362  0D24  3020               	movlw	32
 13363  0D25  3199  2156  318C   	fcall	i1_READ_PS_2_PIN
 13364  0D28  3A00               	xorlw	0
 13365  0D29  1903               	btfsc	3,2
 13366  0D2A  2D41               	goto	i1l5204
 13367                           
 13368                           ;PS_2.c: 871: {
 13369                           ;PS_2.c: 872: __nop();
 13370  0D2B  0000               	nop
 13371                           
 13372                           ;PS_2.c: 873: timeout++;
 13373  0D2C  3001               	movlw	1
 13374  0D2D  0020               	movlb	0	; select bank0
 13375  0D2E  07A3               	addwf	i1Send_PS2@timeout,f
 13376  0D2F  3000               	movlw	0
 13377  0D30  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13378                           
 13379                           ;PS_2.c: 874: if(timeout > 15000)
 13380  0D31  303A               	movlw	58
 13381  0D32  0224               	subwf	i1Send_PS2@timeout+1,w
 13382  0D33  3099               	movlw	153
 13383  0D34  1903               	skipnz
 13384  0D35  0223               	subwf	i1Send_PS2@timeout,w
 13385  0D36  1C03               	skipc
 13386  0D37  2D24               	goto	i1l5202
 13387                           
 13388                           ;PS_2.c: 875: {
 13389                           ;PS_2.c: 876: Clock_TRIS(1);
 13390  0D38  3001               	movlw	1
 13391  0D39  3198  207C  318C   	fcall	i1_Clock_TRIS
 13392                           
 13393                           ;PS_2.c: 877: Data_TRIS(1);
 13394  0D3C  3001               	movlw	1
 13395  0D3D  3198  2086         	fcall	i1_Data_TRIS
 13396                           
 13397                           ;PS_2.c: 878: return 1;
 13398  0D3F  3001               	movlw	1
 13399  0D40  0008               	return
 13400  0D41                     i1l5204:	
 13401                           
 13402                           ;PS_2.c: 879: }
 13403                           ;PS_2.c: 880: }
 13404                           ;PS_2.c: 881: for(i=0;i<8;i++)
 13405  0D41  0020               	movlb	0	; select bank0
 13406  0D42  01A2               	clrf	i1Send_PS2@i
 13407  0D43  3008               	movlw	8
 13408  0D44  0222               	subwf	i1Send_PS2@i,w
 13409  0D45  1803               	btfsc	3,0
 13410  0D46  2D9B               	goto	i1l869
 13411  0D47                     i1l868:	
 13412                           
 13413                           ;PS_2.c: 882: {
 13414                           ;PS_2.c: 883: if(command & 0x1)
 13415  0D47  1C21               	btfss	i1Send_PS2@command,0
 13416  0D48  2D4C               	goto	i1l5212
 13417                           
 13418                           ;PS_2.c: 884: {
 13419                           ;PS_2.c: 885: LATA |= 0b00010000;
 13420  0D49  0022               	movlb	2	; select bank2
 13421  0D4A  160C               	bsf	12,4	;volatile
 13422                           
 13423                           ;PS_2.c: 886: }
 13424  0D4B  2D51               	goto	i1l5214
 13425  0D4C                     i1l5212:	
 13426                           
 13427                           ;PS_2.c: 887: else
 13428                           ;PS_2.c: 888: {
 13429                           ;PS_2.c: 889: LATA &= ~0b00010000;
 13430  0D4C  30EF               	movlw	239
 13431  0D4D  00FA               	movwf	??i1_Send_PS2
 13432  0D4E  087A               	movf	??i1_Send_PS2,w
 13433  0D4F  0022               	movlb	2	; select bank2
 13434  0D50  058C               	andwf	12,f	;volatile
 13435  0D51                     i1l5214:	
 13436                           
 13437                           ;PS_2.c: 890: }
 13438                           ;PS_2.c: 891: command >> = 1;
 13439  0D51  1003               	clrc
 13440  0D52  0020               	movlb	0	; select bank0
 13441  0D53  0CA1               	rrf	i1Send_PS2@command,f
 13442                           
 13443                           ;PS_2.c: 892: timeout=0;
 13444  0D54  01A3               	clrf	i1Send_PS2@timeout
 13445  0D55  01A4               	clrf	i1Send_PS2@timeout+1
 13446  0D56                     i1l5226:	
 13447                           ;PS_2.c: 893: while(!READ_PS_2_PIN(0b00100000))
 13448                           
 13449  0D56  3020               	movlw	32
 13450  0D57  3199  2156  318C   	fcall	i1_READ_PS_2_PIN
 13451  0D5A  3A00               	xorlw	0
 13452  0D5B  1D03               	btfss	3,2
 13453  0D5C  2D72               	goto	i1l5228
 13454                           
 13455                           ;PS_2.c: 894: {
 13456                           ;PS_2.c: 895: timeout++;
 13457  0D5D  3001               	movlw	1
 13458  0D5E  0020               	movlb	0	; select bank0
 13459  0D5F  07A3               	addwf	i1Send_PS2@timeout,f
 13460  0D60  3000               	movlw	0
 13461  0D61  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13462                           
 13463                           ;PS_2.c: 896: if(timeout > 15000)
 13464  0D62  303A               	movlw	58
 13465  0D63  0224               	subwf	i1Send_PS2@timeout+1,w
 13466  0D64  3099               	movlw	153
 13467  0D65  1903               	skipnz
 13468  0D66  0223               	subwf	i1Send_PS2@timeout,w
 13469  0D67  1C03               	skipc
 13470  0D68  2D56               	goto	i1l5226
 13471                           
 13472                           ;PS_2.c: 897: {
 13473                           ;PS_2.c: 898: Clock_TRIS(1);
 13474  0D69  3001               	movlw	1
 13475  0D6A  3198  207C  318C   	fcall	i1_Clock_TRIS
 13476                           
 13477                           ;PS_2.c: 899: Data_TRIS(1);
 13478  0D6D  3001               	movlw	1
 13479  0D6E  3198  2086         	fcall	i1_Data_TRIS
 13480                           
 13481                           ;PS_2.c: 900: return 1;
 13482  0D70  3001               	movlw	1
 13483  0D71  0008               	return
 13484  0D72                     i1l5228:	
 13485                           
 13486                           ;PS_2.c: 901: }
 13487                           ;PS_2.c: 902: }
 13488                           ;PS_2.c: 903: timeout=0;
 13489  0D72  0020               	movlb	0	; select bank0
 13490  0D73  01A3               	clrf	i1Send_PS2@timeout
 13491  0D74  01A4               	clrf	i1Send_PS2@timeout+1
 13492  0D75                     i1l5238:	
 13493                           ;PS_2.c: 904: while(READ_PS_2_PIN(0b00100000))
 13494                           
 13495  0D75  3020               	movlw	32
 13496  0D76  3199  2156  318C   	fcall	i1_READ_PS_2_PIN
 13497  0D79  3A00               	xorlw	0
 13498  0D7A  1903               	btfsc	3,2
 13499  0D7B  2D92               	goto	i1l5240
 13500                           
 13501                           ;PS_2.c: 905: {
 13502                           ;PS_2.c: 906: __nop();
 13503  0D7C  0000               	nop
 13504                           
 13505                           ;PS_2.c: 907: timeout++;
 13506  0D7D  3001               	movlw	1
 13507  0D7E  0020               	movlb	0	; select bank0
 13508  0D7F  07A3               	addwf	i1Send_PS2@timeout,f
 13509  0D80  3000               	movlw	0
 13510  0D81  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13511                           
 13512                           ;PS_2.c: 908: if(timeout > 15000)
 13513  0D82  303A               	movlw	58
 13514  0D83  0224               	subwf	i1Send_PS2@timeout+1,w
 13515  0D84  3099               	movlw	153
 13516  0D85  1903               	skipnz
 13517  0D86  0223               	subwf	i1Send_PS2@timeout,w
 13518  0D87  1C03               	skipc
 13519  0D88  2D75               	goto	i1l5238
 13520                           
 13521                           ;PS_2.c: 909: {
 13522                           ;PS_2.c: 910: Clock_TRIS(1);
 13523  0D89  3001               	movlw	1
 13524  0D8A  3198  207C  318C   	fcall	i1_Clock_TRIS
 13525                           
 13526                           ;PS_2.c: 911: Data_TRIS(1);
 13527  0D8D  3001               	movlw	1
 13528  0D8E  3198  2086         	fcall	i1_Data_TRIS
 13529                           
 13530                           ;PS_2.c: 912: return 1;
 13531  0D90  3001               	movlw	1
 13532  0D91  0008               	return
 13533  0D92                     i1l5240:	
 13534  0D92  3001               	movlw	1
 13535  0D93  00FA               	movwf	??i1_Send_PS2
 13536  0D94  087A               	movf	??i1_Send_PS2,w
 13537  0D95  0020               	movlb	0	; select bank0
 13538  0D96  07A2               	addwf	i1Send_PS2@i,f
 13539  0D97  3008               	movlw	8
 13540  0D98  0222               	subwf	i1Send_PS2@i,w
 13541  0D99  1C03               	skipc
 13542  0D9A  2D47               	goto	i1l868
 13543  0D9B                     i1l869:	
 13544                           
 13545                           ;PS_2.c: 913: }
 13546                           ;PS_2.c: 914: }
 13547                           ;PS_2.c: 915: }
 13548                           ;PS_2.c: 917: if(oddparity & 0x1)
 13549  0D9B  1C20               	btfss	i1Send_PS2@oddparity,0
 13550  0D9C  2DA0               	goto	i1l5246
 13551                           
 13552                           ;PS_2.c: 918: {
 13553                           ;PS_2.c: 919: LATA |= 0b00010000;
 13554  0D9D  0022               	movlb	2	; select bank2
 13555  0D9E  160C               	bsf	12,4	;volatile
 13556                           
 13557                           ;PS_2.c: 920: }
 13558  0D9F  2DA5               	goto	i1l5248
 13559  0DA0                     i1l5246:	
 13560                           
 13561                           ;PS_2.c: 921: else
 13562                           ;PS_2.c: 922: {
 13563                           ;PS_2.c: 923: LATA &= ~0b00010000;
 13564  0DA0  30EF               	movlw	239
 13565  0DA1  00FA               	movwf	??i1_Send_PS2
 13566  0DA2  087A               	movf	??i1_Send_PS2,w
 13567  0DA3  0022               	movlb	2	; select bank2
 13568  0DA4  058C               	andwf	12,f	;volatile
 13569  0DA5                     i1l5248:	
 13570                           
 13571                           ;PS_2.c: 924: }
 13572                           ;PS_2.c: 925: timeout=0;
 13573  0DA5  0020               	movlb	0	; select bank0
 13574  0DA6  01A3               	clrf	i1Send_PS2@timeout
 13575  0DA7  01A4               	clrf	i1Send_PS2@timeout+1
 13576  0DA8                     i1l5258:	
 13577                           ;PS_2.c: 926: while(!READ_PS_2_PIN(0b00100000))
 13578                           
 13579  0DA8  3020               	movlw	32
 13580  0DA9  3199  2156  318C   	fcall	i1_READ_PS_2_PIN
 13581  0DAC  3A00               	xorlw	0
 13582  0DAD  1D03               	btfss	3,2
 13583  0DAE  2DC4               	goto	i1l5260
 13584                           
 13585                           ;PS_2.c: 927: {
 13586                           ;PS_2.c: 928: timeout++;
 13587  0DAF  3001               	movlw	1
 13588  0DB0  0020               	movlb	0	; select bank0
 13589  0DB1  07A3               	addwf	i1Send_PS2@timeout,f
 13590  0DB2  3000               	movlw	0
 13591  0DB3  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13592                           
 13593                           ;PS_2.c: 929: if(timeout > 15000)
 13594  0DB4  303A               	movlw	58
 13595  0DB5  0224               	subwf	i1Send_PS2@timeout+1,w
 13596  0DB6  3099               	movlw	153
 13597  0DB7  1903               	skipnz
 13598  0DB8  0223               	subwf	i1Send_PS2@timeout,w
 13599  0DB9  1C03               	skipc
 13600  0DBA  2DA8               	goto	i1l5258
 13601                           
 13602                           ;PS_2.c: 930: {
 13603                           ;PS_2.c: 931: Clock_TRIS(1);
 13604  0DBB  3001               	movlw	1
 13605  0DBC  3198  207C  318C   	fcall	i1_Clock_TRIS
 13606                           
 13607                           ;PS_2.c: 932: Data_TRIS(1);
 13608  0DBF  3001               	movlw	1
 13609  0DC0  3198  2086         	fcall	i1_Data_TRIS
 13610                           
 13611                           ;PS_2.c: 933: return 1;
 13612  0DC2  3001               	movlw	1
 13613  0DC3  0008               	return
 13614  0DC4                     i1l5260:	
 13615                           
 13616                           ;PS_2.c: 934: }
 13617                           ;PS_2.c: 935: }
 13618                           ;PS_2.c: 936: timeout=0;
 13619  0DC4  0020               	movlb	0	; select bank0
 13620  0DC5  01A3               	clrf	i1Send_PS2@timeout
 13621  0DC6  01A4               	clrf	i1Send_PS2@timeout+1
 13622  0DC7                     i1l5270:	
 13623                           ;PS_2.c: 937: while(READ_PS_2_PIN(0b00100000))
 13624                           
 13625  0DC7  3020               	movlw	32
 13626  0DC8  3199  2156  318C   	fcall	i1_READ_PS_2_PIN
 13627  0DCB  3A00               	xorlw	0
 13628  0DCC  1903               	btfsc	3,2
 13629  0DCD  2DE3               	goto	i1l5272
 13630                           
 13631                           ;PS_2.c: 938: {
 13632                           ;PS_2.c: 939: timeout++;
 13633  0DCE  3001               	movlw	1
 13634  0DCF  0020               	movlb	0	; select bank0
 13635  0DD0  07A3               	addwf	i1Send_PS2@timeout,f
 13636  0DD1  3000               	movlw	0
 13637  0DD2  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13638                           
 13639                           ;PS_2.c: 940: if(timeout > 15000)
 13640  0DD3  303A               	movlw	58
 13641  0DD4  0224               	subwf	i1Send_PS2@timeout+1,w
 13642  0DD5  3099               	movlw	153
 13643  0DD6  1903               	skipnz
 13644  0DD7  0223               	subwf	i1Send_PS2@timeout,w
 13645  0DD8  1C03               	skipc
 13646  0DD9  2DC7               	goto	i1l5270
 13647                           
 13648                           ;PS_2.c: 941: {
 13649                           ;PS_2.c: 942: Clock_TRIS(1);
 13650  0DDA  3001               	movlw	1
 13651  0DDB  3198  207C  318C   	fcall	i1_Clock_TRIS
 13652                           
 13653                           ;PS_2.c: 943: Data_TRIS(1);
 13654  0DDE  3001               	movlw	1
 13655  0DDF  3198  2086         	fcall	i1_Data_TRIS
 13656                           
 13657                           ;PS_2.c: 944: return 1;
 13658  0DE1  3001               	movlw	1
 13659  0DE2  0008               	return
 13660  0DE3                     i1l5272:	
 13661                           
 13662                           ;PS_2.c: 945: }
 13663                           ;PS_2.c: 946: }
 13664                           ;PS_2.c: 948: Data_TRIS(1);
 13665  0DE3  3001               	movlw	1
 13666  0DE4  3198  2086  318C   	fcall	i1_Data_TRIS
 13667                           
 13668                           ;PS_2.c: 950: timeout=0;
 13669  0DE7  0020               	movlb	0	; select bank0
 13670  0DE8  01A3               	clrf	i1Send_PS2@timeout
 13671  0DE9  01A4               	clrf	i1Send_PS2@timeout+1
 13672  0DEA                     i1l5284:	
 13673                           ;PS_2.c: 951: while(READ_PS_2_PIN(0b00010000))
 13674                           
 13675  0DEA  3010               	movlw	16
 13676  0DEB  3199  2156  318C   	fcall	i1_READ_PS_2_PIN
 13677  0DEE  3A00               	xorlw	0
 13678  0DEF  1903               	btfsc	3,2
 13679  0DF0  2E06               	goto	i1l5286
 13680                           
 13681                           ;PS_2.c: 952: {
 13682                           ;PS_2.c: 953: timeout++;
 13683  0DF1  3001               	movlw	1
 13684  0DF2  0020               	movlb	0	; select bank0
 13685  0DF3  07A3               	addwf	i1Send_PS2@timeout,f
 13686  0DF4  3000               	movlw	0
 13687  0DF5  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13688                           
 13689                           ;PS_2.c: 954: if(timeout > 15000)
 13690  0DF6  303A               	movlw	58
 13691  0DF7  0224               	subwf	i1Send_PS2@timeout+1,w
 13692  0DF8  3099               	movlw	153
 13693  0DF9  1903               	skipnz
 13694  0DFA  0223               	subwf	i1Send_PS2@timeout,w
 13695  0DFB  1C03               	skipc
 13696  0DFC  2DEA               	goto	i1l5284
 13697                           
 13698                           ;PS_2.c: 955: {
 13699                           ;PS_2.c: 956: Clock_TRIS(1);
 13700  0DFD  3001               	movlw	1
 13701  0DFE  3198  207C  318C   	fcall	i1_Clock_TRIS
 13702                           
 13703                           ;PS_2.c: 957: Data_TRIS(1);
 13704  0E01  3001               	movlw	1
 13705  0E02  3198  2086         	fcall	i1_Data_TRIS
 13706                           
 13707                           ;PS_2.c: 958: return 1;
 13708  0E04  3001               	movlw	1
 13709  0E05  0008               	return
 13710  0E06                     i1l5286:	
 13711                           
 13712                           ;PS_2.c: 959: }
 13713                           ;PS_2.c: 960: }
 13714                           ;PS_2.c: 961: timeout=0;
 13715  0E06  0020               	movlb	0	; select bank0
 13716  0E07  01A3               	clrf	i1Send_PS2@timeout
 13717  0E08  01A4               	clrf	i1Send_PS2@timeout+1
 13718  0E09                     i1l5296:	
 13719                           ;PS_2.c: 962: while(READ_PS_2_PIN(0b00100000))
 13720                           
 13721  0E09  3020               	movlw	32
 13722  0E0A  3199  2156  318C   	fcall	i1_READ_PS_2_PIN
 13723  0E0D  3A00               	xorlw	0
 13724  0E0E  1903               	btfsc	3,2
 13725  0E0F  2E25               	goto	i1l5298
 13726                           
 13727                           ;PS_2.c: 963: {
 13728                           ;PS_2.c: 964: timeout++;
 13729  0E10  3001               	movlw	1
 13730  0E11  0020               	movlb	0	; select bank0
 13731  0E12  07A3               	addwf	i1Send_PS2@timeout,f
 13732  0E13  3000               	movlw	0
 13733  0E14  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13734                           
 13735                           ;PS_2.c: 965: if(timeout > 15000)
 13736  0E15  303A               	movlw	58
 13737  0E16  0224               	subwf	i1Send_PS2@timeout+1,w
 13738  0E17  3099               	movlw	153
 13739  0E18  1903               	skipnz
 13740  0E19  0223               	subwf	i1Send_PS2@timeout,w
 13741  0E1A  1C03               	skipc
 13742  0E1B  2E09               	goto	i1l5296
 13743                           
 13744                           ;PS_2.c: 966: {
 13745                           ;PS_2.c: 967: Clock_TRIS(1);
 13746  0E1C  3001               	movlw	1
 13747  0E1D  3198  207C  318C   	fcall	i1_Clock_TRIS
 13748                           
 13749                           ;PS_2.c: 968: Data_TRIS(1);
 13750  0E20  3001               	movlw	1
 13751  0E21  3198  2086         	fcall	i1_Data_TRIS
 13752                           
 13753                           ;PS_2.c: 969: return 1;
 13754  0E23  3001               	movlw	1
 13755  0E24  0008               	return
 13756  0E25                     i1l5298:	
 13757                           
 13758                           ;PS_2.c: 970: }
 13759                           ;PS_2.c: 971: }
 13760                           ;PS_2.c: 972: timeout=0;
 13761  0E25  0020               	movlb	0	; select bank0
 13762  0E26  01A3               	clrf	i1Send_PS2@timeout
 13763  0E27  01A4               	clrf	i1Send_PS2@timeout+1
 13764  0E28                     i1l5308:	
 13765                           ;PS_2.c: 973: while(!READ_PS_2_PIN(0b00010000))
 13766                           
 13767  0E28  3010               	movlw	16
 13768  0E29  3199  2156  318C   	fcall	i1_READ_PS_2_PIN
 13769  0E2C  3A00               	xorlw	0
 13770  0E2D  1D03               	btfss	3,2
 13771  0E2E  2E44               	goto	i1l5310
 13772                           
 13773                           ;PS_2.c: 974: {
 13774                           ;PS_2.c: 975: timeout++;
 13775  0E2F  3001               	movlw	1
 13776  0E30  0020               	movlb	0	; select bank0
 13777  0E31  07A3               	addwf	i1Send_PS2@timeout,f
 13778  0E32  3000               	movlw	0
 13779  0E33  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13780                           
 13781                           ;PS_2.c: 976: if(timeout > 15000)
 13782  0E34  303A               	movlw	58
 13783  0E35  0224               	subwf	i1Send_PS2@timeout+1,w
 13784  0E36  3099               	movlw	153
 13785  0E37  1903               	skipnz
 13786  0E38  0223               	subwf	i1Send_PS2@timeout,w
 13787  0E39  1C03               	skipc
 13788  0E3A  2E28               	goto	i1l5308
 13789                           
 13790                           ;PS_2.c: 977: {
 13791                           ;PS_2.c: 978: Clock_TRIS(1);
 13792  0E3B  3001               	movlw	1
 13793  0E3C  3198  207C  318C   	fcall	i1_Clock_TRIS
 13794                           
 13795                           ;PS_2.c: 979: Data_TRIS(1);
 13796  0E3F  3001               	movlw	1
 13797  0E40  3198  2086         	fcall	i1_Data_TRIS
 13798                           
 13799                           ;PS_2.c: 980: return 1;
 13800  0E42  3001               	movlw	1
 13801  0E43  0008               	return
 13802  0E44                     i1l5310:	
 13803                           
 13804                           ;PS_2.c: 981: }
 13805                           ;PS_2.c: 982: }
 13806                           ;PS_2.c: 983: timeout=0;
 13807  0E44  0020               	movlb	0	; select bank0
 13808  0E45  01A3               	clrf	i1Send_PS2@timeout
 13809  0E46  01A4               	clrf	i1Send_PS2@timeout+1
 13810  0E47                     i1l5320:	
 13811                           ;PS_2.c: 984: while(!READ_PS_2_PIN(0b00100000))
 13812                           
 13813  0E47  3020               	movlw	32
 13814  0E48  3199  2156  318C   	fcall	i1_READ_PS_2_PIN
 13815  0E4B  3A00               	xorlw	0
 13816  0E4C  1D03               	btfss	3,2
 13817  0E4D  2E63               	goto	i1l5322
 13818                           
 13819                           ;PS_2.c: 985: {
 13820                           ;PS_2.c: 986: timeout++;
 13821  0E4E  3001               	movlw	1
 13822  0E4F  0020               	movlb	0	; select bank0
 13823  0E50  07A3               	addwf	i1Send_PS2@timeout,f
 13824  0E51  3000               	movlw	0
 13825  0E52  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13826                           
 13827                           ;PS_2.c: 987: if(timeout > 15000)
 13828  0E53  303A               	movlw	58
 13829  0E54  0224               	subwf	i1Send_PS2@timeout+1,w
 13830  0E55  3099               	movlw	153
 13831  0E56  1903               	skipnz
 13832  0E57  0223               	subwf	i1Send_PS2@timeout,w
 13833  0E58  1C03               	skipc
 13834  0E59  2E47               	goto	i1l5320
 13835                           
 13836                           ;PS_2.c: 988: {
 13837                           ;PS_2.c: 989: Clock_TRIS(1);
 13838  0E5A  3001               	movlw	1
 13839  0E5B  3198  207C  318C   	fcall	i1_Clock_TRIS
 13840                           
 13841                           ;PS_2.c: 990: Data_TRIS(1);
 13842  0E5E  3001               	movlw	1
 13843  0E5F  3198  2086         	fcall	i1_Data_TRIS
 13844                           
 13845                           ;PS_2.c: 991: return 1;
 13846  0E61  3001               	movlw	1
 13847  0E62  0008               	return
 13848  0E63                     i1l5322:	
 13849                           
 13850                           ;PS_2.c: 992: }
 13851                           ;PS_2.c: 993: }
 13852                           ;PS_2.c: 996: Clock_TRIS(1);
 13853  0E63  3001               	movlw	1
 13854  0E64  3198  207C  318C   	fcall	i1_Clock_TRIS
 13855                           
 13856                           ;PS_2.c: 997: Data_TRIS(1);
 13857  0E67  3001               	movlw	1
 13858  0E68  3198  2086         	fcall	i1_Data_TRIS
 13859                           
 13860                           ;PS_2.c: 998: return 0;
 13861  0E6A  3000               	movlw	0
 13862  0E6B  0008               	return
 13863  0E6C                     __end_ofi1_Send_PS2:	
 13864                           
 13865                           	psect	text45
 13866  1956                     __ptext45:	
 13867 ;; *************** function i1_READ_PS_2_PIN *****************
 13868 ;; Defined at:
 13869 ;;		line 222 in file "PS_2.c"
 13870 ;; Parameters:    Size  Location     Type
 13871 ;;  DATA_CLK        1    wreg     unsigned char 
 13872 ;; Auto vars:     Size  Location     Type
 13873 ;;  DATA_CLK        1    0[COMMON] unsigned char 
 13874 ;; Return value:  Size  Location     Type
 13875 ;;                  1    wreg      unsigned char 
 13876 ;; Registers used:
 13877 ;;		wreg, status,2, status,0
 13878 ;; Tracked objects:
 13879 ;;		On entry : 0/0
 13880 ;;		On exit  : 0/0
 13881 ;;		Unchanged: 0/0
 13882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13884 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13886 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13887 ;;Total ram usage:        1 bytes
 13888 ;; Hardware stack levels used:    1
 13889 ;; This function calls:
 13890 ;;		Nothing
 13891 ;; This function is called by:
 13892 ;;		_isr
 13893 ;;		i1_Send_PS2
 13894 ;; This function uses a non-reentrant model
 13895 ;;
 13896                           
 13897                           
 13898                           ;psect for function i1_READ_PS_2_PIN
 13899  1956                     i1_READ_PS_2_PIN:	
 13900                           
 13901                           ;incstack = 0
 13902                           ; Regs used in i1_READ_PS_2_PIN: [wreg+status,2+status,0]
 13903                           ;i1READ_PS_2_PIN@DATA_CLK stored from wreg
 13904  1956  00F0               	movwf	i1READ_PS_2_PIN@DATA_CLK
 13905                           
 13906                           ;PS_2.c: 224: if(DATA_CLK == 0b00100000)
 13907  1957  3020               	movlw	32
 13908  1958  0670               	xorwf	i1READ_PS_2_PIN@DATA_CLK,w
 13909  1959  1D03               	btfss	3,2
 13910  195A  2962               	goto	i1l655
 13911                           
 13912                           ;PS_2.c: 225: {
 13913                           ;PS_2.c: 227: if((PORTA & 0b00100000) == 0b00100000)
 13914  195B  0020               	movlb	0	; select bank0
 13915  195C  1E8C               	btfss	12,5	;volatile
 13916  195D  2960               	goto	i1l4684
 13917                           
 13918                           ;PS_2.c: 228: {
 13919                           ;PS_2.c: 229: return (1);
 13920  195E  3001               	movlw	1
 13921                           
 13922                           ;PS_2.c: 230: }
 13923  195F  0008               	return
 13924  1960                     i1l4684:	
 13925                           
 13926                           ;PS_2.c: 231: else
 13927                           ;PS_2.c: 232: {
 13928                           ;PS_2.c: 233: return 0;
 13929  1960  3000               	movlw	0
 13930                           
 13931                           ;PS_2.c: 234: }
 13932                           ;PS_2.c: 235: }
 13933  1961  0008               	return
 13934  1962                     i1l655:	
 13935                           
 13936                           ;PS_2.c: 236: else
 13937                           ;PS_2.c: 237: {
 13938                           ;PS_2.c: 239: if((PORTA & 0b00010000) == 0b00010000)
 13939  1962  0020               	movlb	0	; select bank0
 13940  1963  1E0C               	btfss	12,4	;volatile
 13941  1964  2967               	goto	i1l4694
 13942                           
 13943                           ;PS_2.c: 240: {
 13944                           ;PS_2.c: 241: return (1);
 13945  1965  3001               	movlw	1
 13946                           
 13947                           ;PS_2.c: 242: }
 13948  1966  0008               	return
 13949  1967                     i1l4694:	
 13950                           
 13951                           ;PS_2.c: 243: else
 13952                           ;PS_2.c: 244: {
 13953                           ;PS_2.c: 245: return 0;
 13954  1967  3000               	movlw	0
 13955  1968  0008               	return
 13956  1969                     __end_ofi1_READ_PS_2_PIN:	
 13957                           
 13958                           	psect	text46
 13959  1886                     __ptext46:	
 13960 ;; *************** function i1_Data_TRIS *****************
 13961 ;; Defined at:
 13962 ;;		line 137 in file "PS_2.c"
 13963 ;; Parameters:    Size  Location     Type
 13964 ;;  direction       1    wreg     unsigned char 
 13965 ;; Auto vars:     Size  Location     Type
 13966 ;;  direction       1    0[COMMON] unsigned char 
 13967 ;; Return value:  Size  Location     Type
 13968 ;;		None               void
 13969 ;; Registers used:
 13970 ;;		wreg, status,2, status,0
 13971 ;; Tracked objects:
 13972 ;;		On entry : 0/0
 13973 ;;		On exit  : 0/0
 13974 ;;		Unchanged: 0/0
 13975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13977 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13979 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13980 ;;Total ram usage:        1 bytes
 13981 ;; Hardware stack levels used:    1
 13982 ;; This function calls:
 13983 ;;		Nothing
 13984 ;; This function is called by:
 13985 ;;		i1_Send_PS2
 13986 ;; This function uses a non-reentrant model
 13987 ;;
 13988                           
 13989                           
 13990                           ;psect for function i1_Data_TRIS
 13991  1886                     i1_Data_TRIS:	
 13992                           
 13993                           ;incstack = 0
 13994                           ; Regs used in i1_Data_TRIS: [wreg+status,2+status,0]
 13995                           ;i1Data_TRIS@direction stored from wreg
 13996  1886  00F0               	movwf	i1Data_TRIS@direction
 13997                           
 13998                           ;PS_2.c: 139: if(direction == 0)
 13999  1887  0870               	movf	i1Data_TRIS@direction,w
 14000  1888  1D03               	btfss	3,2
 14001  1889  288D               	goto	i1l635
 14002                           
 14003                           ;PS_2.c: 140: {
 14004                           ;PS_2.c: 141: TRISAbits.TRISA4 = 0;
 14005  188A  0021               	movlb	1	; select bank1
 14006  188B  120C               	bcf	12,4	;volatile
 14007                           
 14008                           ;PS_2.c: 142: }
 14009  188C  0008               	return
 14010  188D                     i1l635:	
 14011                           
 14012                           ;PS_2.c: 143: else
 14013                           ;PS_2.c: 144: {
 14014                           ;PS_2.c: 145: TRISAbits.TRISA4 = 1;
 14015  188D  0021               	movlb	1	; select bank1
 14016  188E  160C               	bsf	12,4	;volatile
 14017  188F  0008               	return
 14018  1890                     __end_ofi1_Data_TRIS:	
 14019                           
 14020                           	psect	text47
 14021  187C                     __ptext47:	
 14022 ;; *************** function i1_Clock_TRIS *****************
 14023 ;; Defined at:
 14024 ;;		line 120 in file "PS_2.c"
 14025 ;; Parameters:    Size  Location     Type
 14026 ;;  direction       1    wreg     unsigned char 
 14027 ;; Auto vars:     Size  Location     Type
 14028 ;;  direction       1    0[COMMON] unsigned char 
 14029 ;; Return value:  Size  Location     Type
 14030 ;;		None               void
 14031 ;; Registers used:
 14032 ;;		wreg, status,2, status,0
 14033 ;; Tracked objects:
 14034 ;;		On entry : 0/0
 14035 ;;		On exit  : 0/0
 14036 ;;		Unchanged: 0/0
 14037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14039 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14041 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14042 ;;Total ram usage:        1 bytes
 14043 ;; Hardware stack levels used:    1
 14044 ;; This function calls:
 14045 ;;		Nothing
 14046 ;; This function is called by:
 14047 ;;		i1_Send_PS2
 14048 ;; This function uses a non-reentrant model
 14049 ;;
 14050                           
 14051                           
 14052                           ;psect for function i1_Clock_TRIS
 14053  187C                     i1_Clock_TRIS:	
 14054                           
 14055                           ;incstack = 0
 14056                           ; Regs used in i1_Clock_TRIS: [wreg+status,2+status,0]
 14057                           ;i1Clock_TRIS@direction stored from wreg
 14058  187C  00F0               	movwf	i1Clock_TRIS@direction
 14059                           
 14060                           ;PS_2.c: 122: if(direction == 0)
 14061  187D  0870               	movf	i1Clock_TRIS@direction,w
 14062  187E  1D03               	btfss	3,2
 14063  187F  2883               	goto	i1l630
 14064                           
 14065                           ;PS_2.c: 123: {
 14066                           ;PS_2.c: 124: TRISAbits.TRISA5 = 0;
 14067  1880  0021               	movlb	1	; select bank1
 14068  1881  128C               	bcf	12,5	;volatile
 14069                           
 14070                           ;PS_2.c: 125: }
 14071  1882  0008               	return
 14072  1883                     i1l630:	
 14073                           
 14074                           ;PS_2.c: 126: else
 14075                           ;PS_2.c: 127: {
 14076                           ;PS_2.c: 128: TRISAbits.TRISA5 = 1;
 14077  1883  0021               	movlb	1	; select bank1
 14078  1884  168C               	bsf	12,5	;volatile
 14079  1885  0008               	return
 14080  1886                     __end_ofi1_Clock_TRIS:	
 14081                           
 14082                           	psect	text48
 14083  100B                     __ptext48:	
 14084 ;; *************** function _cleanBuffer *****************
 14085 ;; Defined at:
 14086 ;;		line 163 in file "MISC.c"
 14087 ;; Parameters:    Size  Location     Type
 14088 ;;  data            1    wreg     PTR unsigned char 
 14089 ;;		 -> PS_2_ScanCodes(12), 
 14090 ;;  count           2    0[COMMON] int 
 14091 ;; Auto vars:     Size  Location     Type
 14092 ;;  data            1    3[COMMON] PTR unsigned char 
 14093 ;;		 -> PS_2_ScanCodes(12), 
 14094 ;;  i               1    4[COMMON] unsigned char 
 14095 ;; Return value:  Size  Location     Type
 14096 ;;		None               void
 14097 ;; Registers used:
 14098 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14099 ;; Tracked objects:
 14100 ;;		On entry : 0/0
 14101 ;;		On exit  : 0/0
 14102 ;;		Unchanged: 0/0
 14103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14104 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14105 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14106 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14107 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14108 ;;Total ram usage:        5 bytes
 14109 ;; Hardware stack levels used:    1
 14110 ;; This function calls:
 14111 ;;		Nothing
 14112 ;; This function is called by:
 14113 ;;		_Process_PS2_ScanCode
 14114 ;; This function uses a non-reentrant model
 14115 ;;
 14116                           
 14117                           
 14118                           ;psect for function _cleanBuffer
 14119  100B                     _cleanBuffer:	
 14120                           
 14121                           ;incstack = 0
 14122                           ; Regs used in _cleanBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
 14123                           ;cleanBuffer@data stored from wreg
 14124  100B  00F3               	movwf	cleanBuffer@data
 14125                           
 14126                           ;MISC.c: 165: unsigned char i=0;
 14127  100C  01F4               	clrf	cleanBuffer@i
 14128                           
 14129                           ;MISC.c: 166: for(i=0; i<count;i++)
 14130  100D  01F4               	clrf	cleanBuffer@i
 14131  100E                     i1l4856:	
 14132  100E  0871               	movf	cleanBuffer@count+1,w
 14133  100F  3A80               	xorlw	128
 14134  1010  3C80               	sublw	128
 14135  1011  1D03               	skipz
 14136  1012  2815               	goto	u555_25
 14137  1013  0870               	movf	cleanBuffer@count,w
 14138  1014  0274               	subwf	cleanBuffer@i,w
 14139  1015                     u555_25:	
 14140  1015  1803               	btfsc	3,0
 14141  1016  0008               	return
 14142                           
 14143                           ;MISC.c: 167: {
 14144                           ;MISC.c: 168: data[i]= 0;
 14145  1017  0874               	movf	cleanBuffer@i,w
 14146  1018  0773               	addwf	cleanBuffer@data,w
 14147  1019  00F2               	movwf	??_cleanBuffer
 14148  101A  0872               	movf	??_cleanBuffer,w
 14149  101B  0086               	movwf	6
 14150  101C  0187               	clrf	7
 14151  101D  0181               	clrf	1
 14152  101E  3001               	movlw	1
 14153  101F  00F2               	movwf	??_cleanBuffer
 14154  1020  0872               	movf	??_cleanBuffer,w
 14155  1021  07F4               	addwf	cleanBuffer@i,f
 14156  1022  280E               	goto	i1l4856
 14157  1023                     __end_of_cleanBuffer:	
 14158                           
 14159                           	psect	text49
 14160  1AC6                     __ptext49:	
 14161 ;; *************** function ___lmul *****************
 14162 ;; Defined at:
 14163 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul32.c"
 14164 ;; Parameters:    Size  Location     Type
 14165 ;;  multiplier      4    0[COMMON] unsigned long 
 14166 ;;  multiplicand    4    4[COMMON] unsigned long 
 14167 ;; Auto vars:     Size  Location     Type
 14168 ;;  product         4    8[COMMON] unsigned long 
 14169 ;; Return value:  Size  Location     Type
 14170 ;;                  4    0[COMMON] unsigned long 
 14171 ;; Registers used:
 14172 ;;		wreg, status,2, status,0
 14173 ;; Tracked objects:
 14174 ;;		On entry : 0/0
 14175 ;;		On exit  : 0/0
 14176 ;;		Unchanged: 0/0
 14177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14178 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14179 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14181 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14182 ;;Total ram usage:       12 bytes
 14183 ;; Hardware stack levels used:    1
 14184 ;; This function calls:
 14185 ;;		Nothing
 14186 ;; This function is called by:
 14187 ;;		_Process_PS2_ScanCode
 14188 ;; This function uses a non-reentrant model
 14189 ;;
 14190                           
 14191                           
 14192                           ;psect for function ___lmul
 14193  1AC6                     ___lmul:	
 14194                           
 14195                           ;incstack = 0
 14196                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 14197  1AC6  3000               	movlw	0
 14198  1AC7  00FB               	movwf	___lmul@product+3
 14199  1AC8  3000               	movlw	0
 14200  1AC9  00FA               	movwf	___lmul@product+2
 14201  1ACA  3000               	movlw	0
 14202  1ACB  00F9               	movwf	___lmul@product+1
 14203  1ACC  3000               	movlw	0
 14204  1ACD  00F8               	movwf	___lmul@product
 14205  1ACE                     i1l5064:	
 14206  1ACE  1C70               	btfss	___lmul@multiplier,0
 14207  1ACF  2AD8               	goto	i1l5068
 14208  1AD0  0874               	movf	___lmul@multiplicand,w
 14209  1AD1  07F8               	addwf	___lmul@product,f
 14210  1AD2  0875               	movf	___lmul@multiplicand+1,w
 14211  1AD3  3DF9               	addwfc	___lmul@product+1,f
 14212  1AD4  0876               	movf	___lmul@multiplicand+2,w
 14213  1AD5  3DFA               	addwfc	___lmul@product+2,f
 14214  1AD6  0877               	movf	___lmul@multiplicand+3,w
 14215  1AD7  3DFB               	addwfc	___lmul@product+3,f
 14216  1AD8                     i1l5068:	
 14217  1AD8  3001               	movlw	1
 14218  1AD9                     u582_25:	
 14219  1AD9  35F4               	lslf	___lmul@multiplicand,f
 14220  1ADA  0DF5               	rlf	___lmul@multiplicand+1,f
 14221  1ADB  0DF6               	rlf	___lmul@multiplicand+2,f
 14222  1ADC  0DF7               	rlf	___lmul@multiplicand+3,f
 14223  1ADD  0B89               	decfsz	9,f
 14224  1ADE  2AD9               	goto	u582_25
 14225  1ADF  3001               	movlw	1
 14226  1AE0                     u583_25:	
 14227  1AE0  36F3               	lsrf	___lmul@multiplier+3,f
 14228  1AE1  0CF2               	rrf	___lmul@multiplier+2,f
 14229  1AE2  0CF1               	rrf	___lmul@multiplier+1,f
 14230  1AE3  0CF0               	rrf	___lmul@multiplier,f
 14231  1AE4  0B89               	decfsz	9,f
 14232  1AE5  2AE0               	goto	u583_25
 14233  1AE6  0873               	movf	___lmul@multiplier+3,w
 14234  1AE7  0472               	iorwf	___lmul@multiplier+2,w
 14235  1AE8  0471               	iorwf	___lmul@multiplier+1,w
 14236  1AE9  0470               	iorwf	___lmul@multiplier,w
 14237  1AEA  1D03               	skipz
 14238  1AEB  2ACE               	goto	i1l5064
 14239  1AEC  087B               	movf	___lmul@product+3,w
 14240  1AED  00F3               	movwf	?___lmul+3
 14241  1AEE  087A               	movf	___lmul@product+2,w
 14242  1AEF  00F2               	movwf	?___lmul+2
 14243  1AF0  0879               	movf	___lmul@product+1,w
 14244  1AF1  00F1               	movwf	?___lmul+1
 14245  1AF2  0878               	movf	___lmul@product,w
 14246  1AF3  00F0               	movwf	?___lmul
 14247  1AF4  0008               	return
 14248  1AF5                     __end_of___lmul:	
 14249                           
 14250                           	psect	text50
 14251  19C9                     __ptext50:	
 14252 ;; *************** function _UART_send_break_timed *****************
 14253 ;; Defined at:
 14254 ;;		line 339 in file "UART.c"
 14255 ;; Parameters:    Size  Location     Type
 14256 ;;  US              2   10[COMMON] unsigned int 
 14257 ;; Auto vars:     Size  Location     Type
 14258 ;;		None
 14259 ;; Return value:  Size  Location     Type
 14260 ;;		None               void
 14261 ;; Registers used:
 14262 ;;		wreg, status,2, status,0, pclath, cstack
 14263 ;; Tracked objects:
 14264 ;;		On entry : 0/0
 14265 ;;		On exit  : 0/0
 14266 ;;		Unchanged: 0/0
 14267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14268 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14270 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14271 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14272 ;;Total ram usage:        3 bytes
 14273 ;; Hardware stack levels used:    1
 14274 ;; Hardware stack levels required when called:    1
 14275 ;; This function calls:
 14276 ;;		i1_delayUS
 14277 ;; This function is called by:
 14278 ;;		_isr
 14279 ;;		_Process_PS2_ScanCode
 14280 ;; This function uses a non-reentrant model
 14281 ;;
 14282                           
 14283                           
 14284                           ;psect for function _UART_send_break_timed
 14285  19C9                     _UART_send_break_timed:	
 14286                           
 14287                           ;UART.c: 342: LATC |= 0b00000100;
 14288                           
 14289                           ;incstack = 0
 14290                           ; Regs used in _UART_send_break_timed: [wreg+status,2+status,0+pclath+cstack]
 14291  19C9  0022               	movlb	2	; select bank2
 14292  19CA  150E               	bsf	14,2	;volatile
 14293                           
 14294                           ;UART.c: 343: PPSLOCK =0;
 14295  19CB  003C               	movlb	28	; select bank28
 14296  19CC  018F               	clrf	15	;volatile
 14297                           
 14298                           ;UART.c: 344: RC2PPS = 0b00000000;
 14299  19CD  003D               	movlb	29	; select bank29
 14300  19CE  01A2               	clrf	34	;volatile
 14301                           
 14302                           ;UART.c: 345: PPSLOCK =1;
 14303  19CF  3001               	movlw	1
 14304  19D0  003C               	movlb	28	; select bank28
 14305  19D1  008F               	movwf	15	;volatile
 14306                           
 14307                           ;UART.c: 347: LATC &= ~0b00000100;
 14308  19D2  30FB               	movlw	251
 14309  19D3  00FC               	movwf	??_UART_send_break_timed
 14310  19D4  087C               	movf	??_UART_send_break_timed,w
 14311  19D5  0022               	movlb	2	; select bank2
 14312  19D6  058E               	andwf	14,f	;volatile
 14313                           
 14314                           ;UART.c: 348: delayUS(US);
 14315  19D7  087A               	movf	UART_send_break_timed@US,w
 14316  19D8  00F0               	movwf	i1delayUS@US
 14317  19D9  087B               	movf	UART_send_break_timed@US+1,w
 14318  19DA  00F1               	movwf	i1delayUS@US+1
 14319  19DB  01F2               	clrf	i1delayUS@US+2
 14320  19DC  01F3               	clrf	i1delayUS@US+3
 14321  19DD  319B  23B5         	fcall	i1_delayUS
 14322                           
 14323                           ;UART.c: 349: LATC |= 0b00000100;
 14324  19DF  0022               	movlb	2	; select bank2
 14325  19E0  150E               	bsf	14,2	;volatile
 14326                           
 14327                           ;UART.c: 351: PPSLOCK =0;
 14328  19E1  003C               	movlb	28	; select bank28
 14329  19E2  018F               	clrf	15	;volatile
 14330                           
 14331                           ;UART.c: 352: RC2PPS = 0b00010100;
 14332  19E3  3014               	movlw	20
 14333  19E4  003D               	movlb	29	; select bank29
 14334  19E5  00A2               	movwf	34	;volatile
 14335                           
 14336                           ;UART.c: 353: CKPPS = 0b00010010;
 14337  19E6  3012               	movlw	18
 14338  19E7  003C               	movlb	28	; select bank28
 14339  19E8  00A5               	movwf	37	;volatile
 14340                           
 14341                           ;UART.c: 355: RXPPS = 0b00010101;
 14342  19E9  3015               	movlw	21
 14343  19EA  00A4               	movwf	36	;volatile
 14344                           
 14345                           ;UART.c: 357: PPSLOCK =1;
 14346  19EB  3001               	movlw	1
 14347  19EC  008F               	movwf	15	;volatile
 14348  19ED  0008               	return
 14349  19EE                     __end_of_UART_send_break_timed:	
 14350                           
 14351                           	psect	text51
 14352  1845                     __ptext51:	
 14353 ;; *************** function _UART_send_break *****************
 14354 ;; Defined at:
 14355 ;;		line 327 in file "UART.c"
 14356 ;; Parameters:    Size  Location     Type
 14357 ;;		None
 14358 ;; Auto vars:     Size  Location     Type
 14359 ;;		None
 14360 ;; Return value:  Size  Location     Type
 14361 ;;		None               void
 14362 ;; Registers used:
 14363 ;;		wreg
 14364 ;; Tracked objects:
 14365 ;;		On entry : 0/0
 14366 ;;		On exit  : 0/0
 14367 ;;		Unchanged: 0/0
 14368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14373 ;;Total ram usage:        0 bytes
 14374 ;; Hardware stack levels used:    1
 14375 ;; This function calls:
 14376 ;;		Nothing
 14377 ;; This function is called by:
 14378 ;;		_Process_PS2_ScanCode
 14379 ;; This function uses a non-reentrant model
 14380 ;;
 14381                           
 14382                           
 14383                           ;psect for function _UART_send_break
 14384  1845                     _UART_send_break:	
 14385                           
 14386                           ;UART.c: 329: TX1STA |= 0b00001000;
 14387                           
 14388                           ;incstack = 0
 14389                           ; Regs used in _UART_send_break: [wreg]
 14390  1845  0023               	movlb	3	; select bank3
 14391  1846  159E               	bsf	30,3	;volatile
 14392                           
 14393                           ;UART.c: 330: TXREG = 'd';
 14394  1847  3064               	movlw	100
 14395  1848  009A               	movwf	26	;volatile
 14396  1849  0008               	return
 14397  184A                     __end_of_UART_send_break:	
 14398                           
 14399                           	psect	text52
 14400  0B65                     __ptext52:	
 14401 ;; *************** function _SetBaud *****************
 14402 ;; Defined at:
 14403 ;;		line 385 in file "UART.c"
 14404 ;; Parameters:    Size  Location     Type
 14405 ;;  Baud            4   15[BANK1 ] unsigned long 
 14406 ;;  Parity          1   19[BANK1 ] unsigned char 
 14407 ;; Auto vars:     Size  Location     Type
 14408 ;;  buf            50    0[BANK2 ] unsigned char [50]
 14409 ;;  temp            4   58[BANK2 ] unsigned long 
 14410 ;;  Paritytemp      4   54[BANK2 ] unsigned long 
 14411 ;;  Baudtemp        4   50[BANK2 ] unsigned long 
 14412 ;;  i               1   62[BANK2 ] unsigned char 
 14413 ;; Return value:  Size  Location     Type
 14414 ;;		None               void
 14415 ;; Registers used:
 14416 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14417 ;; Tracked objects:
 14418 ;;		On entry : 0/0
 14419 ;;		On exit  : 0/0
 14420 ;;		Unchanged: 0/0
 14421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14422 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 14423 ;;      Locals:         0       0       0      63       0       0       0       0       0       0       0       0       
      +0       0
 14424 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
 14425 ;;      Totals:         0       0      13      63       0       0       0       0       0       0       0       0       
      +0       0
 14426 ;;Total ram usage:       76 bytes
 14427 ;; Hardware stack levels used:    1
 14428 ;; Hardware stack levels required when called:    4
 14429 ;; This function calls:
 14430 ;;		_WriteBaud
 14431 ;;		_sprintf
 14432 ;;		i1_InitUART
 14433 ;;		i1_ReadBaud
 14434 ;;		i1_UARTstringWAIT
 14435 ;;		i1_delayUS
 14436 ;; This function is called by:
 14437 ;;		_Process_PS2_ScanCode
 14438 ;; This function uses a non-reentrant model
 14439 ;;
 14440                           
 14441                           
 14442                           ;psect for function _SetBaud
 14443  0B65                     _SetBaud:	
 14444                           
 14445                           ;UART.c: 387: unsigned char buf[50];
 14446                           ;UART.c: 388: unsigned long Baudtemp=0;
 14447                           
 14448                           ;incstack = 0
 14449                           ; Regs used in _SetBaud: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14450  0B65  3000               	movlw	0
 14451  0B66  0022               	movlb	2	; select bank2
 14452  0B67  00D5               	movwf	(SetBaud@Baudtemp+3)^(0+256)
 14453  0B68  3000               	movlw	0
 14454  0B69  00D4               	movwf	(SetBaud@Baudtemp+2)^(0+256)
 14455  0B6A  3000               	movlw	0
 14456  0B6B  00D3               	movwf	(SetBaud@Baudtemp+1)^(0+256)
 14457  0B6C  3000               	movlw	0
 14458  0B6D  00D2               	movwf	SetBaud@Baudtemp^(0+256)
 14459                           
 14460                           ;UART.c: 389: unsigned long Paritytemp=0;
 14461  0B6E  3000               	movlw	0
 14462  0B6F  00D9               	movwf	(SetBaud@Paritytemp+3)^(0+256)
 14463  0B70  3000               	movlw	0
 14464  0B71  00D8               	movwf	(SetBaud@Paritytemp+2)^(0+256)
 14465  0B72  3000               	movlw	0
 14466  0B73  00D7               	movwf	(SetBaud@Paritytemp+1)^(0+256)
 14467  0B74  3000               	movlw	0
 14468  0B75  00D6               	movwf	SetBaud@Paritytemp^(0+256)
 14469                           
 14470                           ;UART.c: 390: unsigned long temp;
 14471                           ;UART.c: 391: unsigned char i =0;
 14472  0B76  01DE               	clrf	SetBaud@i^(0+256)
 14473                           
 14474                           ;UART.c: 393: WriteBaud((0x1800 >> 5), Baud, Parity);
 14475  0B77  30C0               	movlw	192
 14476  0B78  0021               	movlb	1	; select bank1
 14477  0B79  00A0               	movwf	WriteBaud@row^(0+128)
 14478  0B7A  3000               	movlw	0
 14479  0B7B  00A1               	movwf	(WriteBaud@row^(0+128)+1)
 14480  0B7C  0832               	movf	(SetBaud@Baud+3)^(0+128),w
 14481  0B7D  00A5               	movwf	(WriteBaud@Baud+3)^(0+128)
 14482  0B7E  0831               	movf	(SetBaud@Baud+2)^(0+128),w
 14483  0B7F  00A4               	movwf	(WriteBaud@Baud+2)^(0+128)
 14484  0B80  0830               	movf	(SetBaud@Baud+1)^(0+128),w
 14485  0B81  00A3               	movwf	(WriteBaud@Baud+1)^(0+128)
 14486  0B82  082F               	movf	SetBaud@Baud^(0+128),w
 14487  0B83  00A2               	movwf	WriteBaud@Baud^(0+128)
 14488  0B84  0833               	movf	SetBaud@Parity^(0+128),w
 14489  0B85  00B4               	movwf	??_SetBaud^(0+128)
 14490  0B86  0834               	movf	??_SetBaud^(0+128),w
 14491  0B87  00A6               	movwf	WriteBaud@Parity^(0+128)
 14492  0B88  3191  21B2  318B   	fcall	_WriteBaud
 14493                           
 14494                           ;UART.c: 394: temp = ReadBaud((0x1800 >> 5), 0);
 14495  0B8B  30C0               	movlw	192
 14496  0B8C  0020               	movlb	0	; select bank0
 14497  0B8D  00A4               	movwf	i1ReadBaud@row
 14498  0B8E  3000               	movlw	0
 14499  0B8F  00A5               	movwf	i1ReadBaud@row+1
 14500  0B90  01A6               	clrf	i1ReadBaud@column
 14501  0B91  319F  279E  318B   	fcall	i1_ReadBaud
 14502  0B94  0020               	movlb	0	; select bank0
 14503  0B95  0827               	movf	?i1_ReadBaud+3,w
 14504  0B96  0022               	movlb	2	; select bank2
 14505  0B97  00DD               	movwf	(SetBaud@temp+3)^(0+256)
 14506  0B98  0020               	movlb	0	; select bank0
 14507  0B99  0826               	movf	?i1_ReadBaud+2,w
 14508  0B9A  0022               	movlb	2	; select bank2
 14509  0B9B  00DC               	movwf	(SetBaud@temp+2)^(0+256)
 14510  0B9C  0020               	movlb	0	; select bank0
 14511  0B9D  0825               	movf	?i1_ReadBaud+1,w
 14512  0B9E  0022               	movlb	2	; select bank2
 14513  0B9F  00DB               	movwf	(SetBaud@temp+1)^(0+256)
 14514  0BA0  0020               	movlb	0	; select bank0
 14515  0BA1  0824               	movf	?i1_ReadBaud,w
 14516  0BA2  0022               	movlb	2	; select bank2
 14517  0BA3  00DA               	movwf	SetBaud@temp^(0+256)
 14518                           
 14519                           ;UART.c: 395: Baudtemp = temp & 0x000FFFFF;
 14520  0BA4  30FF               	movlw	255
 14521  0BA5  055A               	andwf	SetBaud@temp^(0+256),w
 14522  0BA6  00D2               	movwf	SetBaud@Baudtemp^(0+256)
 14523  0BA7  30FF               	movlw	255
 14524  0BA8  055B               	andwf	(SetBaud@temp+1)^(0+256),w
 14525  0BA9  00D3               	movwf	(SetBaud@Baudtemp+1)^(0+256)
 14526  0BAA  300F               	movlw	15
 14527  0BAB  055C               	andwf	(SetBaud@temp+2)^(0+256),w
 14528  0BAC  00D4               	movwf	(SetBaud@Baudtemp+2)^(0+256)
 14529  0BAD  3000               	movlw	0
 14530  0BAE  055D               	andwf	(SetBaud@temp+3)^(0+256),w
 14531  0BAF  00D5               	movwf	(SetBaud@Baudtemp+3)^(0+256)
 14532                           
 14533                           ;UART.c: 396: Paritytemp = (unsigned char)((temp & 0x00F00000) >> 20);
 14534  0BB0  085A               	movf	SetBaud@temp^(0+256),w
 14535  0BB1  0021               	movlb	1	; select bank1
 14536  0BB2  00B4               	movwf	??_SetBaud^(0+128)
 14537  0BB3  0022               	movlb	2	; select bank2
 14538  0BB4  085B               	movf	(SetBaud@temp+1)^(0+256),w
 14539  0BB5  0021               	movlb	1	; select bank1
 14540  0BB6  00B5               	movwf	(??_SetBaud^(0+128)+1)
 14541  0BB7  0022               	movlb	2	; select bank2
 14542  0BB8  085C               	movf	(SetBaud@temp+2)^(0+256),w
 14543  0BB9  0021               	movlb	1	; select bank1
 14544  0BBA  00B6               	movwf	(??_SetBaud^(0+128)+2)
 14545  0BBB  0022               	movlb	2	; select bank2
 14546  0BBC  085D               	movf	(SetBaud@temp+3)^(0+256),w
 14547  0BBD  0021               	movlb	1	; select bank1
 14548  0BBE  00B7               	movwf	(??_SetBaud^(0+128)+3)
 14549  0BBF  3014               	movlw	20
 14550  0BC0                     u559_25:	
 14551  0BC0  36B7               	lsrf	(??_SetBaud^(0+128)+3),f
 14552  0BC1  0CB6               	rrf	(??_SetBaud^(0+128)+2),f
 14553  0BC2  0CB5               	rrf	(??_SetBaud^(0+128)+1),f
 14554  0BC3  0CB4               	rrf	??_SetBaud^(0+128),f
 14555  0BC4  0B89               	decfsz	9,f
 14556  0BC5  2BC0               	goto	u559_25
 14557  0BC6  0834               	movf	??_SetBaud^(0+128),w
 14558  0BC7  390F               	andlw	15
 14559  0BC8  00B8               	movwf	(??_SetBaud+4)^(0+128)
 14560  0BC9  01B9               	clrf	((??_SetBaud+4)^(0+128)+1)
 14561  0BCA  01BA               	clrf	((??_SetBaud+4)^(0+128)+2)
 14562  0BCB  01BB               	clrf	((??_SetBaud+4)^(0+128)+3)
 14563  0BCC  083B               	movf	(??_SetBaud+7)^(0+128),w
 14564  0BCD  0022               	movlb	2	; select bank2
 14565  0BCE  00D9               	movwf	(SetBaud@Paritytemp+3)^(0+256)
 14566  0BCF  0021               	movlb	1	; select bank1
 14567  0BD0  083A               	movf	(??_SetBaud+6)^(0+128),w
 14568  0BD1  0022               	movlb	2	; select bank2
 14569  0BD2  00D8               	movwf	(SetBaud@Paritytemp+2)^(0+256)
 14570  0BD3  0021               	movlb	1	; select bank1
 14571  0BD4  0839               	movf	(??_SetBaud+5)^(0+128),w
 14572  0BD5  0022               	movlb	2	; select bank2
 14573  0BD6  00D7               	movwf	(SetBaud@Paritytemp+1)^(0+256)
 14574  0BD7  0021               	movlb	1	; select bank1
 14575  0BD8  0838               	movf	(??_SetBaud+4)^(0+128),w
 14576  0BD9  0022               	movlb	2	; select bank2
 14577  0BDA  00D6               	movwf	SetBaud@Paritytemp^(0+256)
 14578                           
 14579                           ;UART.c: 398: InitUART(Baud, Parity);
 14580  0BDB  0021               	movlb	1	; select bank1
 14581  0BDC  0832               	movf	(SetBaud@Baud+3)^(0+128),w
 14582  0BDD  0020               	movlb	0	; select bank0
 14583  0BDE  00A3               	movwf	i1InitUART@Baud+3
 14584  0BDF  0021               	movlb	1	; select bank1
 14585  0BE0  0831               	movf	(SetBaud@Baud+2)^(0+128),w
 14586  0BE1  0020               	movlb	0	; select bank0
 14587  0BE2  00A2               	movwf	i1InitUART@Baud+2
 14588  0BE3  0021               	movlb	1	; select bank1
 14589  0BE4  0830               	movf	(SetBaud@Baud+1)^(0+128),w
 14590  0BE5  0020               	movlb	0	; select bank0
 14591  0BE6  00A1               	movwf	i1InitUART@Baud+1
 14592  0BE7  0021               	movlb	1	; select bank1
 14593  0BE8  082F               	movf	SetBaud@Baud^(0+128),w
 14594  0BE9  0020               	movlb	0	; select bank0
 14595  0BEA  00A0               	movwf	i1InitUART@Baud
 14596  0BEB  0021               	movlb	1	; select bank1
 14597  0BEC  0833               	movf	SetBaud@Parity^(0+128),w
 14598  0BED  00B4               	movwf	??_SetBaud^(0+128)
 14599  0BEE  0834               	movf	??_SetBaud^(0+128),w
 14600  0BEF  0020               	movlb	0	; select bank0
 14601  0BF0  00A4               	movwf	i1InitUART@parity
 14602  0BF1  3195  2526  318B   	fcall	i1_InitUART
 14603                           
 14604                           ;UART.c: 399: UARTstringWAIT("\r\n");
 14605  0BF4  30FD               	movlw	low ((STR_14+16)| (0+32768))
 14606  0BF5  0020               	movlb	0	; select bank0
 14607  0BF6  00A1               	movwf	i1UARTstringWAIT@data
 14608  0BF7  3089               	movlw	high ((STR_14+16)| (0+32768))
 14609  0BF8  00A2               	movwf	i1UARTstringWAIT@data+1
 14610  0BF9  319B  2324  318B   	fcall	i1_UARTstringWAIT
 14611                           
 14612                           ;UART.c: 400: delayUS(15000);
 14613  0BFC  3000               	movlw	0
 14614  0BFD  00F3               	movwf	i1delayUS@US+3
 14615  0BFE  3000               	movlw	0
 14616  0BFF  00F2               	movwf	i1delayUS@US+2
 14617  0C00  303A               	movlw	58
 14618  0C01  00F1               	movwf	i1delayUS@US+1
 14619  0C02  3098               	movlw	152
 14620  0C03  00F0               	movwf	i1delayUS@US
 14621  0C04  319B  23B5  318B   	fcall	i1_delayUS
 14622                           
 14623                           ;UART.c: 401: if((Baud != Baudtemp) || (Parity != Paritytemp))
 14624  0C07  0022               	movlb	2	; select bank2
 14625  0C08  0855               	movf	(SetBaud@Baudtemp+3)^(0+256),w
 14626  0C09  0021               	movlb	1	; select bank1
 14627  0C0A  0632               	xorwf	(SetBaud@Baud+3)^(0+128),w
 14628  0C0B  1D03               	skipz
 14629  0C0C  2C1D               	goto	u560_25
 14630  0C0D  0022               	movlb	2	; select bank2
 14631  0C0E  0854               	movf	(SetBaud@Baudtemp+2)^(0+256),w
 14632  0C0F  0021               	movlb	1	; select bank1
 14633  0C10  0631               	xorwf	(SetBaud@Baud+2)^(0+128),w
 14634  0C11  1D03               	skipz
 14635  0C12  2C1D               	goto	u560_25
 14636  0C13  0022               	movlb	2	; select bank2
 14637  0C14  0853               	movf	(SetBaud@Baudtemp+1)^(0+256),w
 14638  0C15  0021               	movlb	1	; select bank1
 14639  0C16  0630               	xorwf	(SetBaud@Baud+1)^(0+128),w
 14640  0C17  1D03               	skipz
 14641  0C18  2C1D               	goto	u560_25
 14642  0C19  0022               	movlb	2	; select bank2
 14643  0C1A  0852               	movf	SetBaud@Baudtemp^(0+256),w
 14644  0C1B  0021               	movlb	1	; select bank1
 14645  0C1C  062F               	xorwf	SetBaud@Baud^(0+128),w
 14646  0C1D                     u560_25:	
 14647  0C1D  1D03               	skipz
 14648  0C1E  2C3C               	goto	i1l4902
 14649  0C1F  0833               	movf	SetBaud@Parity^(0+128),w
 14650  0C20  00B4               	movwf	??_SetBaud^(0+128)
 14651  0C21  01B5               	clrf	(??_SetBaud^(0+128)+1)
 14652  0C22  01B6               	clrf	(??_SetBaud^(0+128)+2)
 14653  0C23  01B7               	clrf	(??_SetBaud^(0+128)+3)
 14654  0C24  0022               	movlb	2	; select bank2
 14655  0C25  0859               	movf	(SetBaud@Paritytemp+3)^(0+256),w
 14656  0C26  0021               	movlb	1	; select bank1
 14657  0C27  0637               	xorwf	(??_SetBaud+3)^(0+128),w
 14658  0C28  1D03               	skipz
 14659  0C29  2C3A               	goto	u561_25
 14660  0C2A  0022               	movlb	2	; select bank2
 14661  0C2B  0858               	movf	(SetBaud@Paritytemp+2)^(0+256),w
 14662  0C2C  0021               	movlb	1	; select bank1
 14663  0C2D  0636               	xorwf	(??_SetBaud+2)^(0+128),w
 14664  0C2E  1D03               	skipz
 14665  0C2F  2C3A               	goto	u561_25
 14666  0C30  0022               	movlb	2	; select bank2
 14667  0C31  0857               	movf	(SetBaud@Paritytemp+1)^(0+256),w
 14668  0C32  0021               	movlb	1	; select bank1
 14669  0C33  0635               	xorwf	(??_SetBaud+1)^(0+128),w
 14670  0C34  1D03               	skipz
 14671  0C35  2C3A               	goto	u561_25
 14672  0C36  0022               	movlb	2	; select bank2
 14673  0C37  0856               	movf	SetBaud@Paritytemp^(0+256),w
 14674  0C38  0021               	movlb	1	; select bank1
 14675  0C39  0634               	xorwf	??_SetBaud^(0+128),w
 14676  0C3A                     u561_25:	
 14677  0C3A  1903               	skipnz
 14678  0C3B  2C4F               	goto	i1l4906
 14679  0C3C                     i1l4902:	
 14680                           
 14681                           ;UART.c: 402: {
 14682                           ;UART.c: 403: UARTstringWAIT("Flash Program Fail\r\n");
 14683  0C3C  30C4               	movlw	low (STR_10| (0+32768))
 14684  0C3D  0020               	movlb	0	; select bank0
 14685  0C3E  00A1               	movwf	i1UARTstringWAIT@data
 14686  0C3F  3089               	movlw	high (STR_10| (0+32768))
 14687  0C40  00A2               	movwf	i1UARTstringWAIT@data+1
 14688  0C41  319B  2324  318B   	fcall	i1_UARTstringWAIT
 14689                           
 14690                           ;UART.c: 404: delayUS(15000);
 14691  0C44  3000               	movlw	0
 14692  0C45  00F3               	movwf	i1delayUS@US+3
 14693  0C46  3000               	movlw	0
 14694  0C47  00F2               	movwf	i1delayUS@US+2
 14695  0C48  303A               	movlw	58
 14696  0C49  00F1               	movwf	i1delayUS@US+1
 14697  0C4A  3098               	movlw	152
 14698  0C4B  00F0               	movwf	i1delayUS@US
 14699  0C4C  319B  23B5  318B   	fcall	i1_delayUS
 14700  0C4F                     i1l4906:	
 14701                           
 14702                           ;UART.c: 405: }
 14703                           ;UART.c: 408: for(i =0;i<10;i++)
 14704  0C4F  0022               	movlb	2	; select bank2
 14705  0C50  01DE               	clrf	SetBaud@i^(0+256)
 14706  0C51  300A               	movlw	10
 14707  0C52  025E               	subwf	SetBaud@i^(0+256),w
 14708  0C53  1803               	btfsc	3,0
 14709  0C54  2C7C               	goto	i1l4920
 14710  0C55                     i1l484:	
 14711                           
 14712                           ;UART.c: 409: {
 14713                           ;UART.c: 410: LATC |= 0b00010000;
 14714  0C55  160E               	bsf	14,4	;volatile
 14715                           
 14716                           ;UART.c: 411: delayUS(10000);
 14717  0C56  3000               	movlw	0
 14718  0C57  00F3               	movwf	i1delayUS@US+3
 14719  0C58  3000               	movlw	0
 14720  0C59  00F2               	movwf	i1delayUS@US+2
 14721  0C5A  3027               	movlw	39
 14722  0C5B  00F1               	movwf	i1delayUS@US+1
 14723  0C5C  3010               	movlw	16
 14724  0C5D  00F0               	movwf	i1delayUS@US
 14725  0C5E  319B  23B5  318B   	fcall	i1_delayUS
 14726                           
 14727                           ;UART.c: 412: LATC &= ~0b00010000;
 14728  0C61  30EF               	movlw	239
 14729  0C62  0021               	movlb	1	; select bank1
 14730  0C63  00B4               	movwf	??_SetBaud^(0+128)
 14731  0C64  0834               	movf	??_SetBaud^(0+128),w
 14732  0C65  0022               	movlb	2	; select bank2
 14733  0C66  058E               	andwf	14,f	;volatile
 14734                           
 14735                           ;UART.c: 413: delayUS(10000);
 14736  0C67  3000               	movlw	0
 14737  0C68  00F3               	movwf	i1delayUS@US+3
 14738  0C69  3000               	movlw	0
 14739  0C6A  00F2               	movwf	i1delayUS@US+2
 14740  0C6B  3027               	movlw	39
 14741  0C6C  00F1               	movwf	i1delayUS@US+1
 14742  0C6D  3010               	movlw	16
 14743  0C6E  00F0               	movwf	i1delayUS@US
 14744  0C6F  319B  23B5  318B   	fcall	i1_delayUS
 14745  0C72  3001               	movlw	1
 14746  0C73  0021               	movlb	1	; select bank1
 14747  0C74  00B4               	movwf	??_SetBaud^(0+128)
 14748  0C75  0834               	movf	??_SetBaud^(0+128),w
 14749  0C76  0022               	movlb	2	; select bank2
 14750  0C77  07DE               	addwf	SetBaud@i^(0+256),f
 14751  0C78  300A               	movlw	10
 14752  0C79  025E               	subwf	SetBaud@i^(0+256),w
 14753  0C7A  1C03               	skipc
 14754  0C7B  2C55               	goto	i1l484
 14755  0C7C                     i1l4920:	
 14756                           
 14757                           ;UART.c: 414: }
 14758                           ;UART.c: 416: sprintf(buf,"Baud is %lu",Baud);
 14759  0C7C  3026               	movlw	low (STR_11| (0+32768))
 14760  0C7D  0020               	movlb	0	; select bank0
 14761  0C7E  00AA               	movwf	sprintf@f
 14762  0C7F  308A               	movlw	high (STR_11| (0+32768))
 14763  0C80  00AB               	movwf	sprintf@f+1
 14764  0C81  0021               	movlb	1	; select bank1
 14765  0C82  0832               	movf	(SetBaud@Baud+3)^(0+128),w
 14766  0C83  0020               	movlb	0	; select bank0
 14767  0C84  00AF               	movwf	?_sprintf+5
 14768  0C85  0021               	movlb	1	; select bank1
 14769  0C86  0831               	movf	(SetBaud@Baud+2)^(0+128),w
 14770  0C87  0020               	movlb	0	; select bank0
 14771  0C88  00AE               	movwf	?_sprintf+4
 14772  0C89  0021               	movlb	1	; select bank1
 14773  0C8A  0830               	movf	(SetBaud@Baud+1)^(0+128),w
 14774  0C8B  0020               	movlb	0	; select bank0
 14775  0C8C  00AD               	movwf	?_sprintf+3
 14776  0C8D  0021               	movlb	1	; select bank1
 14777  0C8E  082F               	movf	SetBaud@Baud^(0+128),w
 14778  0C8F  0020               	movlb	0	; select bank0
 14779  0C90  00AC               	movwf	?_sprintf+2
 14780  0C91  3020               	movlw	(low (SetBaud@buf| (0+256)))& (0+255)
 14781  0C92  3197  270A  318B   	fcall	_sprintf
 14782                           
 14783                           ;UART.c: 417: UARTstringWAIT(buf);
 14784  0C95  3020               	movlw	low SetBaud@buf
 14785  0C96  0020               	movlb	0	; select bank0
 14786  0C97  00A1               	movwf	i1UARTstringWAIT@data
 14787  0C98  3001               	movlw	high SetBaud@buf
 14788  0C99  00A2               	movwf	i1UARTstringWAIT@data+1
 14789  0C9A  319B  2324  318B   	fcall	i1_UARTstringWAIT
 14790                           
 14791                           ;UART.c: 418: if(Parity)
 14792  0C9D  0021               	movlb	1	; select bank1
 14793  0C9E  0833               	movf	SetBaud@Parity^(0+128),w
 14794  0C9F  1D03               	btfss	3,2
 14795  0CA0  2CB6               	goto	i1l4938
 14796  0CA1  2CC3               	goto	i1l4940
 14797  0CA2                     i1l4928:	
 14798                           ;UART.c: 421: {
 14799                           ;UART.c: 422: case 1:
 14800                           
 14801                           ;UART.c: 419: {
 14802                           ;UART.c: 420: switch (Parity)
 14803                           
 14804                           
 14805                           ;UART.c: 423: UARTstringWAIT(OddParityMSG);
 14806  0CA2  3011               	movlw	low (_OddParityMSG| (0+32768))
 14807  0CA3  0020               	movlb	0	; select bank0
 14808  0CA4  00A1               	movwf	i1UARTstringWAIT@data
 14809  0CA5  3089               	movlw	high (_OddParityMSG| (0+32768))
 14810  0CA6  2CC7               	goto	L13
 14811  0CA7                     i1l4930:	
 14812                           ;UART.c: 425: case 2:
 14813                           
 14814                           ;UART.c: 424: break;
 14815                           
 14816                           
 14817                           ;UART.c: 426: UARTstringWAIT(EvenParityMSG);
 14818  0CA7  30FB               	movlw	low (_EvenParityMSG| (0+32768))
 14819  0CA8  0020               	movlb	0	; select bank0
 14820  0CA9  00A1               	movwf	i1UARTstringWAIT@data
 14821  0CAA  3088               	movlw	high (_EvenParityMSG| (0+32768))
 14822  0CAB  2CC7               	goto	L13
 14823  0CAC                     i1l4932:	
 14824                           ;UART.c: 428: case 3:
 14825                           
 14826                           ;UART.c: 427: break;
 14827                           
 14828                           
 14829                           ;UART.c: 429: UARTstringWAIT(MarkParityMSG);
 14830  0CAC  304A               	movlw	low (_MarkParityMSG| (0+32768))
 14831  0CAD  0020               	movlb	0	; select bank0
 14832  0CAE  00A1               	movwf	i1UARTstringWAIT@data
 14833  0CAF  3089               	movlw	high (_MarkParityMSG| (0+32768))
 14834  0CB0  2CC7               	goto	L13
 14835  0CB1                     i1l4934:	
 14836                           ;UART.c: 431: default:
 14837                           
 14838                           ;UART.c: 430: break;
 14839                           
 14840                           
 14841                           ;UART.c: 432: UARTstringWAIT(SpaceParityMSG);
 14842  0CB1  303A               	movlw	low (_SpaceParityMSG| (0+32768))
 14843  0CB2  0020               	movlb	0	; select bank0
 14844  0CB3  00A1               	movwf	i1UARTstringWAIT@data
 14845  0CB4  3089               	movlw	high (_SpaceParityMSG| (0+32768))
 14846  0CB5  2CC7               	goto	L13
 14847  0CB6                     i1l4938:	
 14848                           ;UART.c: 434: }
 14849                           
 14850                           ;UART.c: 433: break;
 14851                           
 14852  0CB6  0021               	movlb	1	; select bank1
 14853  0CB7  0833               	movf	SetBaud@Parity^(0+128),w
 14854                           
 14855                           ; Switch size 1, requested type "space"
 14856                           ; Number of cases is 3, Range of values is 1 to 3
 14857                           ; switch strategies available:
 14858                           ; Name         Instructions Cycles
 14859                           ; simple_byte           10     6 (average)
 14860                           ; direct_byte           15     9 (fixed)
 14861                           ; jumptable            263     9 (fixed)
 14862                           ;	Chosen strategy is simple_byte
 14863  0CB8  3A01               	xorlw	1	; case 1
 14864  0CB9  1903               	skipnz
 14865  0CBA  2CA2               	goto	i1l4928
 14866  0CBB  3A03               	xorlw	3	; case 2
 14867  0CBC  1903               	skipnz
 14868  0CBD  2CA7               	goto	i1l4930
 14869  0CBE  3A01               	xorlw	1	; case 3
 14870  0CBF  1903               	skipnz
 14871  0CC0  2CAC               	goto	i1l4932
 14872  0CC1  2CB1               	goto	i1l4934
 14873                           
 14874                           ;UART.c: 435: }
 14875  0CC2  2CCB               	goto	i1l493
 14876  0CC3                     i1l4940:	
 14877                           
 14878                           ;UART.c: 436: else
 14879                           ;UART.c: 437: {
 14880                           ;UART.c: 438: UARTstringWAIT(NoParityMSG);
 14881  0CC3  3026               	movlw	low (_NoParityMSG| (0+32768))
 14882  0CC4  0020               	movlb	0	; select bank0
 14883  0CC5  00A1               	movwf	i1UARTstringWAIT@data
 14884  0CC6  3089               	movlw	high (_NoParityMSG| (0+32768))
 14885  0CC7                     L13:	
 14886  0CC7  00A2               	movwf	i1UARTstringWAIT@data+1
 14887  0CC8  319B  2324  318B   	fcall	i1_UARTstringWAIT
 14888  0CCB                     i1l493:	
 14889                           
 14890                           ;UART.c: 439: }
 14891                           ;UART.c: 440: UARTstringWAIT("\r\n");
 14892  0CCB  30FD               	movlw	low ((STR_14+16)| (0+32768))
 14893  0CCC  0020               	movlb	0	; select bank0
 14894  0CCD  00A1               	movwf	i1UARTstringWAIT@data
 14895  0CCE  3089               	movlw	high ((STR_14+16)| (0+32768))
 14896  0CCF  00A2               	movwf	i1UARTstringWAIT@data+1
 14897  0CD0  319B  2324  318B   	fcall	i1_UARTstringWAIT
 14898                           
 14899                           ;UART.c: 441: delayUS(15000);
 14900  0CD3  3000               	movlw	0
 14901  0CD4  00F3               	movwf	i1delayUS@US+3
 14902  0CD5  3000               	movlw	0
 14903  0CD6  00F2               	movwf	i1delayUS@US+2
 14904  0CD7  303A               	movlw	58
 14905  0CD8  00F1               	movwf	i1delayUS@US+1
 14906  0CD9  3098               	movlw	152
 14907  0CDA  00F0               	movwf	i1delayUS@US
 14908  0CDB  319B  23B5         	fcall	i1_delayUS
 14909  0CDD  0008               	return
 14910  0CDE                     __end_of_SetBaud:	
 14911                           
 14912                           	psect	text53
 14913  1B24                     __ptext53:	
 14914 ;; *************** function i1_UARTstringWAIT *****************
 14915 ;; Defined at:
 14916 ;;		line 366 in file "UART.c"
 14917 ;; Parameters:    Size  Location     Type
 14918 ;;  data            2    1[BANK0 ] PTR const unsigned char 
 14919 ;;		 -> STR_20(20), STR_19(3), Process_PS2_ScanCode@buf(60), STR_17(3), 
 14920 ;;		 -> STR_16(3), STR_15(19), STR_14(19), STR_13(3), 
 14921 ;;		 -> STR_12(3), SetBaud@buf(50), STR_10(21), STR_9(3), 
 14922 ;;		 -> STR_8(3), NoParityMSG(20), SpaceParityMSG(16), MarkParityMSG(15), 
 14923 ;;		 -> EvenParityMSG(22), OddParityMSG(21), STR_7(3), STR_6(33), 
 14924 ;;		 -> STR_5(3), Version(9), STR_4(19), STR_3(28), 
 14925 ;;		 -> STR_2(8), STR_1(7), VoltageMSG(13), 
 14926 ;; Auto vars:     Size  Location     Type
 14927 ;;		None
 14928 ;; Return value:  Size  Location     Type
 14929 ;;		None               void
 14930 ;; Registers used:
 14931 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14932 ;; Tracked objects:
 14933 ;;		On entry : 0/0
 14934 ;;		On exit  : 0/0
 14935 ;;		Unchanged: 0/0
 14936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14937 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14939 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14940 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14941 ;;Total ram usage:        5 bytes
 14942 ;; Hardware stack levels used:    1
 14943 ;; Hardware stack levels required when called:    2
 14944 ;; This function calls:
 14945 ;;		i1_UARTchar
 14946 ;;		i1_delayUS
 14947 ;; This function is called by:
 14948 ;;		_SetBaud
 14949 ;;		_Process_PS2_ScanCode
 14950 ;; This function uses a non-reentrant model
 14951 ;;
 14952                           
 14953                           
 14954                           ;psect for function i1_UARTstringWAIT
 14955  1B24                     i1_UARTstringWAIT:	
 14956  1B24                     i1l472:	
 14957                           ;incstack = 0
 14958                           ; Regs used in i1_UARTstringWAIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14959                           ;UART.c: 368: do
 14960                           
 14961                           
 14962                           ;UART.c: 369: {
 14963                           ;UART.c: 370: delayUS(5000);
 14964  1B24  3000               	movlw	0
 14965  1B25  00F3               	movwf	i1delayUS@US+3
 14966  1B26  3000               	movlw	0
 14967  1B27  00F2               	movwf	i1delayUS@US+2
 14968  1B28  3013               	movlw	19
 14969  1B29  00F1               	movwf	i1delayUS@US+1
 14970  1B2A  3088               	movlw	136
 14971  1B2B  00F0               	movwf	i1delayUS@US
 14972  1B2C  319B  23B5  319B   	fcall	i1_delayUS
 14973                           
 14974                           ;UART.c: 371: if(*data != 0)
 14975  1B2F  0020               	movlb	0	; select bank0
 14976  1B30  0821               	movf	i1UARTstringWAIT@data,w
 14977  1B31  0084               	movwf	4
 14978  1B32  0822               	movf	i1UARTstringWAIT@data+1,w
 14979  1B33  0085               	movwf	5
 14980  1B34  0012               	moviw fsr0++
 14981  1B35  1903               	btfsc	3,2
 14982  1B36  2B44               	goto	i1l4664
 14983                           
 14984                           ;UART.c: 372: {
 14985                           ;UART.c: 373: UARTchar(*data, 0, 0);
 14986  1B37  01F8               	clrf	i1UARTchar@override
 14987  1B38  01F9               	clrf	i1UARTchar@NinethBit_override_data
 14988  1B39  0821               	movf	i1UARTstringWAIT@data,w
 14989  1B3A  0084               	movwf	4
 14990  1B3B  0822               	movf	i1UARTstringWAIT@data+1,w
 14991  1B3C  0085               	movwf	5
 14992  1B3D  0800               	movf	0,w	;code access
 14993  1B3E  3190  2085  319B   	fcall	i1_UARTchar
 14994  1B41                     i1l474:	
 14995                           ;UART.c: 374: while((!TX1STAbits.TRMT));
 14996                           
 14997  1B41  0023               	movlb	3	; select bank3
 14998  1B42  1C9E               	btfss	30,1	;volatile
 14999  1B43  2B41               	goto	i1l474
 15000  1B44                     i1l4664:	
 15001                           
 15002                           ;UART.c: 375: }
 15003                           ;UART.c: 376: } while( *data++);
 15004  1B44  0020               	movlb	0	; select bank0
 15005  1B45  0822               	movf	i1UARTstringWAIT@data+1,w
 15006  1B46  00A4               	movwf	??i1_UARTstringWAIT+1
 15007  1B47  0821               	movf	i1UARTstringWAIT@data,w
 15008  1B48  00A3               	movwf	??i1_UARTstringWAIT
 15009  1B49  0AA1               	incf	i1UARTstringWAIT@data,f
 15010  1B4A  1903               	skipnz
 15011  1B4B  0AA2               	incf	i1UARTstringWAIT@data+1,f
 15012  1B4C  0823               	movf	??i1_UARTstringWAIT,w
 15013  1B4D  0084               	movwf	4
 15014  1B4E  0824               	movf	??i1_UARTstringWAIT+1,w
 15015  1B4F  0085               	movwf	5
 15016  1B50  0012               	moviw fsr0++
 15017  1B51  1903               	btfsc	3,2
 15018  1B52  0008               	return
 15019  1B53  2B24               	goto	i1l472
 15020  1B54                     __end_ofi1_UARTstringWAIT:	
 15021                           
 15022                           	psect	text54
 15023  1085                     __ptext54:	
 15024 ;; *************** function i1_UARTchar *****************
 15025 ;; Defined at:
 15026 ;;		line 235 in file "UART.c"
 15027 ;; Parameters:    Size  Location     Type
 15028 ;;  data            1    wreg     unsigned char 
 15029 ;;  override        1    8[COMMON] unsigned char 
 15030 ;;  NinethBit_ov    1    9[COMMON] unsigned char 
 15031 ;; Auto vars:     Size  Location     Type
 15032 ;;  data            1    0[BANK0 ] unsigned char 
 15033 ;; Return value:  Size  Location     Type
 15034 ;;		None               void
 15035 ;; Registers used:
 15036 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 15037 ;; Tracked objects:
 15038 ;;		On entry : 0/0
 15039 ;;		On exit  : 0/0
 15040 ;;		Unchanged: 0/0
 15041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15042 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15043 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15044 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15045 ;;      Totals:         6       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15046 ;;Total ram usage:        7 bytes
 15047 ;; Hardware stack levels used:    1
 15048 ;; Hardware stack levels required when called:    1
 15049 ;; This function calls:
 15050 ;;		i1_CheckSum_byte
 15051 ;; This function is called by:
 15052 ;;		_isr
 15053 ;;		_Process_PS2_ScanCode
 15054 ;;		i1_UARTstringWAIT
 15055 ;; This function uses a non-reentrant model
 15056 ;;
 15057                           
 15058                           
 15059                           ;psect for function i1_UARTchar
 15060  1085                     i1_UARTchar:	
 15061                           
 15062                           ;incstack = 0
 15063                           ; Regs used in i1_UARTchar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 15064                           ;i1UARTchar@data stored from wreg
 15065  1085  0020               	movlb	0	; select bank0
 15066  1086  00A0               	movwf	i1UARTchar@data
 15067                           
 15068                           ;UART.c: 237: if(TXSTAbits.TX9)
 15069  1087  0023               	movlb	3	; select bank3
 15070  1088  1F1E               	btfss	30,6	;volatile
 15071  1089  28CA               	goto	i1l430
 15072                           
 15073                           ;UART.c: 238: {
 15074                           ;UART.c: 240: if(!override)
 15075  108A  0878               	movf	i1UARTchar@override,w
 15076  108B  1903               	btfsc	3,2
 15077  108C  28B4               	goto	i1l4174
 15078  108D  28C1               	goto	i1l4176
 15079  108E                     i1l4168:	
 15080                           ;UART.c: 244: {
 15081                           ;UART.c: 245: case 1:
 15082                           
 15083                           ;UART.c: 241: {
 15084                           ;UART.c: 243: switch (PARITY)
 15085                           
 15086                           
 15087                           ;UART.c: 246: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 3);
 15088  108E  0020               	movlb	0	; select bank0
 15089  108F  0820               	movf	i1UARTchar@data,w
 15090  1090  00FA               	movwf	??i1_UARTchar
 15091  1091  01FB               	clrf	??i1_UARTchar+1
 15092  1092  087A               	movf	??i1_UARTchar,w
 15093  1093  00F0               	movwf	i1CheckSum_byte@This
 15094  1094  087B               	movf	??i1_UARTchar+1,w
 15095  1095  00F1               	movwf	i1CheckSum_byte@This+1
 15096  1096  3003               	movlw	3
 15097  1097  28A1               	goto	L16
 15098  1098                     i1l4170:	
 15099                           ;UART.c: 248: case 2:
 15100                           
 15101                           ;UART.c: 247: break;
 15102                           
 15103                           
 15104                           ;UART.c: 249: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 2);
 15105  1098  0020               	movlb	0	; select bank0
 15106  1099  0820               	movf	i1UARTchar@data,w
 15107  109A  00FA               	movwf	??i1_UARTchar
 15108  109B  01FB               	clrf	??i1_UARTchar+1
 15109  109C  087A               	movf	??i1_UARTchar,w
 15110  109D  00F0               	movwf	i1CheckSum_byte@This
 15111  109E  087B               	movf	??i1_UARTchar+1,w
 15112  109F  00F1               	movwf	i1CheckSum_byte@This+1
 15113  10A0  3002               	movlw	2
 15114  10A1                     L16:	
 15115  10A1  00FC               	movwf	??i1_UARTchar+2
 15116  10A2  087C               	movf	??i1_UARTchar+2,w
 15117  10A3  00F2               	movwf	i1CheckSum_byte@Odd_Even
 15118  10A4  319A  2298  3190   	fcall	i1_CheckSum_byte
 15119  10A7  00FD               	movwf	??i1_UARTchar+3
 15120  10A8  0023               	movlb	3	; select bank3
 15121  10A9  081E               	movf	30,w	;volatile
 15122  10AA  067D               	xorwf	??i1_UARTchar+3,w
 15123  10AB  39FE               	andlw	-2
 15124  10AC  067D               	xorwf	??i1_UARTchar+3,w
 15125  10AD  28C9               	goto	L15
 15126  10AE                     i1l436:	
 15127                           ;UART.c: 251: case 3:
 15128                           
 15129                           ;UART.c: 250: break;
 15130                           
 15131                           
 15132                           ;UART.c: 252: TXSTAbits.TX9D = 1;
 15133  10AE  0023               	movlb	3	; select bank3
 15134  10AF  141E               	bsf	30,0	;volatile
 15135                           
 15136                           ;UART.c: 253: break;
 15137  10B0  28CA               	goto	i1l430
 15138  10B1                     i1l437:	
 15139                           ;UART.c: 254: default:
 15140                           
 15141                           
 15142                           ;UART.c: 255: TXSTAbits.TX9D = 0;
 15143  10B1  0023               	movlb	3	; select bank3
 15144  10B2  101E               	bcf	30,0	;volatile
 15145                           
 15146                           ;UART.c: 257: }
 15147                           
 15148                           ;UART.c: 256: break;
 15149  10B3  28CA               	goto	i1l430
 15150  10B4                     i1l4174:	
 15151  10B4  0024               	movlb	4	; select bank4
 15152  10B5  0861               	movf	_PARITY^(0+512),w
 15153                           
 15154                           ; Switch size 1, requested type "space"
 15155                           ; Number of cases is 3, Range of values is 1 to 3
 15156                           ; switch strategies available:
 15157                           ; Name         Instructions Cycles
 15158                           ; simple_byte           10     6 (average)
 15159                           ; direct_byte           15     9 (fixed)
 15160                           ; jumptable            263     9 (fixed)
 15161                           ;	Chosen strategy is simple_byte
 15162  10B6  3A01               	xorlw	1	; case 1
 15163  10B7  1903               	skipnz
 15164  10B8  288E               	goto	i1l4168
 15165  10B9  3A03               	xorlw	3	; case 2
 15166  10BA  1903               	skipnz
 15167  10BB  2898               	goto	i1l4170
 15168  10BC  3A01               	xorlw	1	; case 3
 15169  10BD  1903               	skipnz
 15170  10BE  28AE               	goto	i1l436
 15171  10BF  28B1               	goto	i1l437
 15172                           
 15173                           ;UART.c: 258: }
 15174  10C0  28CA               	goto	i1l430
 15175  10C1                     i1l4176:	
 15176                           
 15177                           ;UART.c: 259: else
 15178                           ;UART.c: 260: {
 15179                           ;UART.c: 261: TXSTAbits.TX9D = (NinethBit_override_data & 0x01);
 15180  10C1  3001               	movlw	1
 15181  10C2  0579               	andwf	i1UARTchar@NinethBit_override_data,w
 15182  10C3  00FA               	movwf	??i1_UARTchar
 15183  10C4  0023               	movlb	3	; select bank3
 15184  10C5  081E               	movf	30,w	;volatile
 15185  10C6  067A               	xorwf	??i1_UARTchar,w
 15186  10C7  39FE               	andlw	-2
 15187  10C8  067A               	xorwf	??i1_UARTchar,w
 15188  10C9                     L15:	
 15189  10C9  009E               	movwf	30	;volatile
 15190  10CA                     i1l430:	
 15191                           
 15192                           ;UART.c: 262: }
 15193                           ;UART.c: 263: }
 15194                           ;UART.c: 265: if(data == '\n')
 15195  10CA  300A               	movlw	10
 15196  10CB  0020               	movlb	0	; select bank0
 15197  10CC  0620               	xorwf	i1UARTchar@data,w
 15198  10CD  1D03               	btfss	3,2
 15199  10CE  28E0               	goto	i1l447
 15200                           
 15201                           ;UART.c: 266: {
 15202                           ;UART.c: 267: if(override || LineOverride)
 15203  10CF  0878               	movf	i1UARTchar@override,w
 15204  10D0  1D03               	btfss	3,2
 15205  10D1  28D6               	goto	i1l443
 15206  10D2  0024               	movlb	4	; select bank4
 15207  10D3  0860               	movf	_LineOverride^(0+512),w
 15208  10D4  1903               	btfsc	3,2
 15209  10D5  0008               	return
 15210  10D6                     i1l443:	
 15211                           ;UART.c: 268: {
 15212                           ;UART.c: 269: while(!TXSTAbits.TRMT);
 15213                           
 15214  10D6  0023               	movlb	3	; select bank3
 15215  10D7  1C9E               	btfss	30,1	;volatile
 15216  10D8  28D6               	goto	i1l443
 15217                           
 15218                           ;UART.c: 270: TXREG = data;
 15219  10D9  0020               	movlb	0	; select bank0
 15220  10DA  0820               	movf	i1UARTchar@data,w
 15221  10DB  0023               	movlb	3	; select bank3
 15222  10DC  009A               	movwf	26	;volatile
 15223                           
 15224                           ;UART.c: 271: LineOverride = 0;
 15225  10DD  0024               	movlb	4	; select bank4
 15226  10DE  01E0               	clrf	_LineOverride^(0+512)
 15227                           
 15228                           ;UART.c: 272: }
 15229                           ;UART.c: 273: }
 15230  10DF  0008               	return
 15231  10E0                     i1l447:	
 15232                           ;UART.c: 274: else
 15233                           ;UART.c: 275: {
 15234                           ;UART.c: 276: while(!TXSTAbits.TRMT);
 15235                           
 15236  10E0  0023               	movlb	3	; select bank3
 15237  10E1  1C9E               	btfss	30,1	;volatile
 15238  10E2  28E0               	goto	i1l447
 15239                           
 15240                           ;UART.c: 277: TXREG = data;
 15241  10E3  0020               	movlb	0	; select bank0
 15242  10E4  0820               	movf	i1UARTchar@data,w
 15243  10E5  0023               	movlb	3	; select bank3
 15244  10E6  009A               	movwf	26	;volatile
 15245  10E7  0008               	return
 15246  10E8                     __end_ofi1_UARTchar:	
 15247                           
 15248                           	psect	text55
 15249  1F9E                     __ptext55:	
 15250 ;; *************** function i1_ReadBaud *****************
 15251 ;; Defined at:
 15252 ;;		line 187 in file "FLASH.c"
 15253 ;; Parameters:    Size  Location     Type
 15254 ;;  row             2    4[BANK0 ] unsigned int 
 15255 ;;  column          1    6[BANK0 ] unsigned char 
 15256 ;; Auto vars:     Size  Location     Type
 15257 ;;  ReadBaud        4   16[BANK0 ] unsigned long 
 15258 ;; Return value:  Size  Location     Type
 15259 ;;                  4    4[BANK0 ] unsigned long 
 15260 ;; Registers used:
 15261 ;;		wreg, status,2, status,0, pclath, cstack
 15262 ;; Tracked objects:
 15263 ;;		On entry : 0/0
 15264 ;;		On exit  : 0/0
 15265 ;;		Unchanged: 0/0
 15266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15267 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15268 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15269 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15270 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15271 ;;Total ram usage:       16 bytes
 15272 ;; Hardware stack levels used:    1
 15273 ;; Hardware stack levels required when called:    2
 15274 ;; This function calls:
 15275 ;;		i1_ReadFlash_4Byte
 15276 ;; This function is called by:
 15277 ;;		_SetBaud
 15278 ;; This function uses a non-reentrant model
 15279 ;;
 15280                           
 15281                           
 15282                           ;psect for function i1_ReadBaud
 15283  1F9E                     i1_ReadBaud:	
 15284                           
 15285                           ;FLASH.c: 189: unsigned long temp;
 15286                           ;FLASH.c: 190: temp =(ReadFlash_4Byte(row, column));
 15287                           
 15288                           ;incstack = 0
 15289                           ; Regs used in i1_ReadBaud: [wreg+status,2+status,0+pclath+cstack]
 15290  1F9E  0020               	movlb	0	; select bank0
 15291  1F9F  0825               	movf	i1ReadBaud@row+1,w
 15292  1FA0  00F6               	movwf	i1ReadFlash_4Byte@row+1
 15293  1FA1  0824               	movf	i1ReadBaud@row,w
 15294  1FA2  00F5               	movwf	i1ReadFlash_4Byte@row
 15295  1FA3  0826               	movf	i1ReadBaud@column,w
 15296  1FA4  00A8               	movwf	??i1_ReadBaud
 15297  1FA5  0828               	movf	??i1_ReadBaud,w
 15298  1FA6  00F7               	movwf	i1ReadFlash_4Byte@column
 15299  1FA7  319D  2560  319F   	fcall	i1_ReadFlash_4Byte
 15300  1FAA  0878               	movf	?i1_ReadFlash_4Byte+3,w
 15301  1FAB  0020               	movlb	0	; select bank0
 15302  1FAC  00B3               	movwf	i1ReadBaud@temp+3
 15303  1FAD  0877               	movf	?i1_ReadFlash_4Byte+2,w
 15304  1FAE  00B2               	movwf	i1ReadBaud@temp+2
 15305  1FAF  0876               	movf	?i1_ReadFlash_4Byte+1,w
 15306  1FB0  00B1               	movwf	i1ReadBaud@temp+1
 15307  1FB1  0875               	movf	?i1_ReadFlash_4Byte,w
 15308  1FB2  00B0               	movwf	i1ReadBaud@temp
 15309                           
 15310                           ;FLASH.c: 191: MEM[1] = (unsigned int)(temp & 0x0003FFF);
 15311  1FB3  30FF               	movlw	255
 15312  1FB4  0530               	andwf	i1ReadBaud@temp,w
 15313  1FB5  0021               	movlb	1	; select bank1
 15314  1FB6  00E6               	movwf	(_MEM^(0+128)+2)
 15315  1FB7  303F               	movlw	63
 15316  1FB8  0020               	movlb	0	; select bank0
 15317  1FB9  0531               	andwf	i1ReadBaud@temp+1,w
 15318  1FBA  0021               	movlb	1	; select bank1
 15319  1FBB  00E7               	movwf	((_MEM+1)^(0+128)+2)
 15320                           
 15321                           ;FLASH.c: 192: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
 15322  1FBC  0020               	movlb	0	; select bank0
 15323  1FBD  0830               	movf	i1ReadBaud@temp,w
 15324  1FBE  00A8               	movwf	??i1_ReadBaud
 15325  1FBF  0831               	movf	i1ReadBaud@temp+1,w
 15326  1FC0  00A9               	movwf	??i1_ReadBaud+1
 15327  1FC1  0832               	movf	i1ReadBaud@temp+2,w
 15328  1FC2  00AA               	movwf	??i1_ReadBaud+2
 15329  1FC3  0833               	movf	i1ReadBaud@temp+3,w
 15330  1FC4  00AB               	movwf	??i1_ReadBaud+3
 15331  1FC5  300E               	movlw	14
 15332  1FC6                     u538_25:	
 15333  1FC6  36AB               	lsrf	??i1_ReadBaud+3,f
 15334  1FC7  0CAA               	rrf	??i1_ReadBaud+2,f
 15335  1FC8  0CA9               	rrf	??i1_ReadBaud+1,f
 15336  1FC9  0CA8               	rrf	??i1_ReadBaud,f
 15337  1FCA  0B89               	decfsz	9,f
 15338  1FCB  2FC6               	goto	u538_25
 15339  1FCC  30FF               	movlw	255
 15340  1FCD  0528               	andwf	??i1_ReadBaud,w
 15341  1FCE  0021               	movlb	1	; select bank1
 15342  1FCF  00E4               	movwf	_MEM^(0+128)
 15343  1FD0  303F               	movlw	63
 15344  1FD1  0020               	movlb	0	; select bank0
 15345  1FD2  0529               	andwf	??i1_ReadBaud+1,w
 15346  1FD3  0021               	movlb	1	; select bank1
 15347  1FD4  00E5               	movwf	(_MEM+1)^(0+128)
 15348                           
 15349                           ;FLASH.c: 193: return (((unsigned long)MEM[0] << 12) + (unsigned long)MEM[1]);
 15350  1FD5  0866               	movf	(_MEM^(0+128)+2),w
 15351  1FD6  0020               	movlb	0	; select bank0
 15352  1FD7  00A8               	movwf	??i1_ReadBaud
 15353  1FD8  0021               	movlb	1	; select bank1
 15354  1FD9  0867               	movf	((_MEM+1)^(0+128)+2),w
 15355  1FDA  0020               	movlb	0	; select bank0
 15356  1FDB  00A9               	movwf	??i1_ReadBaud+1
 15357  1FDC  01AA               	clrf	??i1_ReadBaud+2
 15358  1FDD  01AB               	clrf	??i1_ReadBaud+3
 15359  1FDE  0021               	movlb	1	; select bank1
 15360  1FDF  0864               	movf	_MEM^(0+128),w
 15361  1FE0  0020               	movlb	0	; select bank0
 15362  1FE1  00AC               	movwf	??i1_ReadBaud+4
 15363  1FE2  0021               	movlb	1	; select bank1
 15364  1FE3  0865               	movf	(_MEM+1)^(0+128),w
 15365  1FE4  0020               	movlb	0	; select bank0
 15366  1FE5  00AD               	movwf	??i1_ReadBaud+5
 15367  1FE6  01AE               	clrf	??i1_ReadBaud+6
 15368  1FE7  01AF               	clrf	??i1_ReadBaud+7
 15369  1FE8  300C               	movlw	12
 15370  1FE9                     u539_25:	
 15371  1FE9  35AC               	lslf	??i1_ReadBaud+4,f
 15372  1FEA  0DAD               	rlf	??i1_ReadBaud+5,f
 15373  1FEB  0DAE               	rlf	??i1_ReadBaud+6,f
 15374  1FEC  0DAF               	rlf	??i1_ReadBaud+7,f
 15375  1FED  0B89               	decfsz	9,f
 15376  1FEE  2FE9               	goto	u539_25
 15377  1FEF  082C               	movf	??i1_ReadBaud+4,w
 15378  1FF0  07A8               	addwf	??i1_ReadBaud,f
 15379  1FF1  082D               	movf	??i1_ReadBaud+5,w
 15380  1FF2  3DA9               	addwfc	??i1_ReadBaud+1,f
 15381  1FF3  082E               	movf	??i1_ReadBaud+6,w
 15382  1FF4  3DAA               	addwfc	??i1_ReadBaud+2,f
 15383  1FF5  082F               	movf	??i1_ReadBaud+7,w
 15384  1FF6  3DAB               	addwfc	??i1_ReadBaud+3,f
 15385  1FF7  082B               	movf	??i1_ReadBaud+3,w
 15386  1FF8  00A7               	movwf	?i1_ReadBaud+3
 15387  1FF9  082A               	movf	??i1_ReadBaud+2,w
 15388  1FFA  00A6               	movwf	?i1_ReadBaud+2
 15389  1FFB  0829               	movf	??i1_ReadBaud+1,w
 15390  1FFC  00A5               	movwf	?i1_ReadBaud+1
 15391  1FFD  0828               	movf	??i1_ReadBaud,w
 15392  1FFE  00A4               	movwf	?i1_ReadBaud
 15393  1FFF  0008               	return
 15394  2000                     __end_ofi1_ReadBaud:	
 15395                           
 15396                           	psect	text56
 15397  1D60                     __ptext56:	
 15398 ;; *************** function i1_ReadFlash_4Byte *****************
 15399 ;; Defined at:
 15400 ;;		line 62 in file "FLASH.c"
 15401 ;; Parameters:    Size  Location     Type
 15402 ;;  row             2    5[COMMON] unsigned int 
 15403 ;;  column          1    7[COMMON] unsigned char 
 15404 ;; Auto vars:     Size  Location     Type
 15405 ;;  ReadFlash_4B    4    0[BANK0 ] unsigned long 
 15406 ;; Return value:  Size  Location     Type
 15407 ;;                  4    5[COMMON] unsigned long 
 15408 ;; Registers used:
 15409 ;;		wreg, status,2, status,0, pclath, cstack
 15410 ;; Tracked objects:
 15411 ;;		On entry : 0/0
 15412 ;;		On exit  : 0/0
 15413 ;;		Unchanged: 0/0
 15414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15415 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15416 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15417 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15418 ;;      Totals:         9       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15419 ;;Total ram usage:       13 bytes
 15420 ;; Hardware stack levels used:    1
 15421 ;; Hardware stack levels required when called:    1
 15422 ;; This function calls:
 15423 ;;		i1_ReadFlash_2Byte
 15424 ;; This function is called by:
 15425 ;;		i1_ReadBaud
 15426 ;; This function uses a non-reentrant model
 15427 ;;
 15428                           
 15429                           
 15430                           ;psect for function i1_ReadFlash_4Byte
 15431  1D60                     i1_ReadFlash_4Byte:	
 15432                           
 15433                           ;FLASH.c: 64: unsigned long temp =0;
 15434                           
 15435                           ;incstack = 0
 15436                           ; Regs used in i1_ReadFlash_4Byte: [wreg+status,2+status,0+pclath+cstack]
 15437  1D60  3000               	movlw	0
 15438  1D61  0020               	movlb	0	; select bank0
 15439  1D62  00A3               	movwf	i1ReadFlash_4Byte@temp+3
 15440  1D63  3000               	movlw	0
 15441  1D64  00A2               	movwf	i1ReadFlash_4Byte@temp+2
 15442  1D65  3000               	movlw	0
 15443  1D66  00A1               	movwf	i1ReadFlash_4Byte@temp+1
 15444  1D67  3000               	movlw	0
 15445  1D68  00A0               	movwf	i1ReadFlash_4Byte@temp
 15446                           
 15447                           ;FLASH.c: 65: temp = ((unsigned long)ReadFlash_2Byte(row, column) << 16);
 15448  1D69  0876               	movf	i1ReadFlash_4Byte@row+1,w
 15449  1D6A  00F1               	movwf	i1ReadFlash_2Byte@row+1
 15450  1D6B  0875               	movf	i1ReadFlash_4Byte@row,w
 15451  1D6C  00F0               	movwf	i1ReadFlash_2Byte@row
 15452  1D6D  0877               	movf	i1ReadFlash_4Byte@column,w
 15453  1D6E  00F9               	movwf	??i1_ReadFlash_4Byte
 15454  1D6F  0879               	movf	??i1_ReadFlash_4Byte,w
 15455  1D70  00F2               	movwf	i1ReadFlash_2Byte@column
 15456  1D71  3199  21EE  319D   	fcall	i1_ReadFlash_2Byte
 15457  1D74  0870               	movf	?i1_ReadFlash_2Byte,w
 15458  1D75  00FA               	movwf	??i1_ReadFlash_4Byte+1
 15459  1D76  0871               	movf	?i1_ReadFlash_2Byte+1,w
 15460  1D77  00FB               	movwf	??i1_ReadFlash_4Byte+2
 15461  1D78  01FC               	clrf	??i1_ReadFlash_4Byte+3
 15462  1D79  01FD               	clrf	??i1_ReadFlash_4Byte+4
 15463  1D7A  3010               	movlw	16
 15464  1D7B                     u453_25:	
 15465  1D7B  35FA               	lslf	??i1_ReadFlash_4Byte+1,f
 15466  1D7C  0DFB               	rlf	??i1_ReadFlash_4Byte+2,f
 15467  1D7D  0DFC               	rlf	??i1_ReadFlash_4Byte+3,f
 15468  1D7E  0DFD               	rlf	??i1_ReadFlash_4Byte+4,f
 15469  1D7F  0B89               	decfsz	9,f
 15470  1D80  2D7B               	goto	u453_25
 15471  1D81  087D               	movf	??i1_ReadFlash_4Byte+4,w
 15472  1D82  0020               	movlb	0	; select bank0
 15473  1D83  00A3               	movwf	i1ReadFlash_4Byte@temp+3
 15474  1D84  087C               	movf	??i1_ReadFlash_4Byte+3,w
 15475  1D85  00A2               	movwf	i1ReadFlash_4Byte@temp+2
 15476  1D86  087B               	movf	??i1_ReadFlash_4Byte+2,w
 15477  1D87  00A1               	movwf	i1ReadFlash_4Byte@temp+1
 15478  1D88  087A               	movf	??i1_ReadFlash_4Byte+1,w
 15479  1D89  00A0               	movwf	i1ReadFlash_4Byte@temp
 15480                           
 15481                           ;FLASH.c: 66: temp |= ((unsigned long)ReadFlash_2Byte(row, (column + 1)));
 15482  1D8A  0876               	movf	i1ReadFlash_4Byte@row+1,w
 15483  1D8B  00F1               	movwf	i1ReadFlash_2Byte@row+1
 15484  1D8C  0875               	movf	i1ReadFlash_4Byte@row,w
 15485  1D8D  00F0               	movwf	i1ReadFlash_2Byte@row
 15486  1D8E  0877               	movf	i1ReadFlash_4Byte@column,w
 15487  1D8F  3E01               	addlw	1
 15488  1D90  00F9               	movwf	??i1_ReadFlash_4Byte
 15489  1D91  0879               	movf	??i1_ReadFlash_4Byte,w
 15490  1D92  00F2               	movwf	i1ReadFlash_2Byte@column
 15491  1D93  3199  21EE         	fcall	i1_ReadFlash_2Byte
 15492  1D95  0870               	movf	?i1_ReadFlash_2Byte,w
 15493  1D96  00FA               	movwf	??i1_ReadFlash_4Byte+1
 15494  1D97  0871               	movf	?i1_ReadFlash_2Byte+1,w
 15495  1D98  00FB               	movwf	??i1_ReadFlash_4Byte+2
 15496  1D99  01FC               	clrf	??i1_ReadFlash_4Byte+3
 15497  1D9A  01FD               	clrf	??i1_ReadFlash_4Byte+4
 15498  1D9B  087A               	movf	??i1_ReadFlash_4Byte+1,w
 15499  1D9C  0020               	movlb	0	; select bank0
 15500  1D9D  04A0               	iorwf	i1ReadFlash_4Byte@temp,f
 15501  1D9E  087B               	movf	??i1_ReadFlash_4Byte+2,w
 15502  1D9F  04A1               	iorwf	i1ReadFlash_4Byte@temp+1,f
 15503  1DA0  087C               	movf	??i1_ReadFlash_4Byte+3,w
 15504  1DA1  04A2               	iorwf	i1ReadFlash_4Byte@temp+2,f
 15505  1DA2  087D               	movf	??i1_ReadFlash_4Byte+4,w
 15506  1DA3  04A3               	iorwf	i1ReadFlash_4Byte@temp+3,f
 15507                           
 15508                           ;FLASH.c: 67: return temp;
 15509  1DA4  0823               	movf	i1ReadFlash_4Byte@temp+3,w
 15510  1DA5  00F8               	movwf	?i1_ReadFlash_4Byte+3
 15511  1DA6  0822               	movf	i1ReadFlash_4Byte@temp+2,w
 15512  1DA7  00F7               	movwf	?i1_ReadFlash_4Byte+2
 15513  1DA8  0821               	movf	i1ReadFlash_4Byte@temp+1,w
 15514  1DA9  00F6               	movwf	?i1_ReadFlash_4Byte+1
 15515  1DAA  0820               	movf	i1ReadFlash_4Byte@temp,w
 15516  1DAB  00F5               	movwf	?i1_ReadFlash_4Byte
 15517  1DAC  0008               	return
 15518  1DAD                     __end_ofi1_ReadFlash_4Byte:	
 15519                           
 15520                           	psect	text57
 15521  1526                     __ptext57:	
 15522 ;; *************** function i1_InitUART *****************
 15523 ;; Defined at:
 15524 ;;		line 78 in file "UART.c"
 15525 ;; Parameters:    Size  Location     Type
 15526 ;;  Baud            4    0[BANK0 ] unsigned long 
 15527 ;;  parity          1    4[BANK0 ] unsigned char 
 15528 ;; Auto vars:     Size  Location     Type
 15529 ;;  InitUART        4   17[BANK0 ] unsigned long 
 15530 ;;  InitUART        2   13[BANK0 ] unsigned int 
 15531 ;;  InitUART        1   16[BANK0 ] unsigned char 
 15532 ;;  InitUART        1   15[BANK0 ] unsigned char 
 15533 ;; Return value:  Size  Location     Type
 15534 ;;		None               void
 15535 ;; Registers used:
 15536 ;;		wreg, status,2, status,0, pclath, cstack
 15537 ;; Tracked objects:
 15538 ;;		On entry : 0/0
 15539 ;;		On exit  : 0/0
 15540 ;;		Unchanged: 0/0
 15541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15542 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15543 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15544 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15545 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15546 ;;Total ram usage:       21 bytes
 15547 ;; Hardware stack levels used:    1
 15548 ;; Hardware stack levels required when called:    1
 15549 ;; This function calls:
 15550 ;;		i1_CloseUSART
 15551 ;;		i1_OpenUSART
 15552 ;;		i1_ReadUSART
 15553 ;;		i1___lldiv
 15554 ;;		i1_baudUSART
 15555 ;; This function is called by:
 15556 ;;		_SetBaud
 15557 ;; This function uses a non-reentrant model
 15558 ;;
 15559                           
 15560                           
 15561                           ;psect for function i1_InitUART
 15562  1526                     i1_InitUART:	
 15563                           
 15564                           ;UART.c: 80: unsigned long temp;
 15565                           ;UART.c: 81: unsigned char config;
 15566                           ;UART.c: 82: unsigned int spbrg;
 15567                           ;UART.c: 83: unsigned char baudconfig;
 15568                           ;UART.c: 92: PIE1bits.RCIE = 0;
 15569                           
 15570                           ;incstack = 0
 15571                           ; Regs used in i1_InitUART: [wreg+status,2+status,0+pclath+cstack]
 15572  1526  0021               	movlb	1	; select bank1
 15573  1527  1291               	bcf	17,5	;volatile
 15574                           
 15575                           ;UART.c: 93: LATC |= 0b00000100;
 15576  1528  0022               	movlb	2	; select bank2
 15577  1529  150E               	bsf	14,2	;volatile
 15578                           
 15579                           ;UART.c: 94: PPSLOCK =0;
 15580  152A  003C               	movlb	28	; select bank28
 15581  152B  018F               	clrf	15	;volatile
 15582                           
 15583                           ;UART.c: 95: RC2PPS = 0b00000000;
 15584  152C  003D               	movlb	29	; select bank29
 15585  152D  01A2               	clrf	34	;volatile
 15586                           
 15587                           ;UART.c: 96: PPSLOCK =1;
 15588  152E  3001               	movlw	1
 15589  152F  003C               	movlb	28	; select bank28
 15590  1530  008F               	movwf	15	;volatile
 15591                           
 15592                           ;UART.c: 98: CloseUSART();
 15593  1531  3198  20BB  3195   	fcall	i1_CloseUSART
 15594                           
 15595                           ;UART.c: 99: config =0;
 15596  1534  0020               	movlb	0	; select bank0
 15597  1535  01B0               	clrf	i1InitUART@config
 15598                           
 15599                           ;UART.c: 100: baudconfig =0;
 15600  1536  01AF               	clrf	i1InitUART@baudconfig
 15601                           
 15602                           ;UART.c: 105: config |= 0b00001000;
 15603  1537  15B0               	bsf	i1InitUART@config,3
 15604                           
 15605                           ;UART.c: 106: config |= 0b00010000;
 15606  1538  1630               	bsf	i1InitUART@config,4
 15607                           
 15608                           ;UART.c: 107: PARITY = parity;
 15609  1539  0824               	movf	i1InitUART@parity,w
 15610  153A  00A5               	movwf	??i1_InitUART
 15611  153B  0825               	movf	??i1_InitUART,w
 15612  153C  0024               	movlb	4	; select bank4
 15613  153D  00E1               	movwf	_PARITY^(0+512)
 15614                           
 15615                           ;UART.c: 108: BAUD = Baud;
 15616  153E  0020               	movlb	0	; select bank0
 15617  153F  0823               	movf	i1InitUART@Baud+3,w
 15618  1540  0024               	movlb	4	; select bank4
 15619  1541  00E5               	movwf	(_BAUD+3)^(0+512)
 15620  1542  0020               	movlb	0	; select bank0
 15621  1543  0822               	movf	i1InitUART@Baud+2,w
 15622  1544  0024               	movlb	4	; select bank4
 15623  1545  00E4               	movwf	(_BAUD+2)^(0+512)
 15624  1546  0020               	movlb	0	; select bank0
 15625  1547  0821               	movf	i1InitUART@Baud+1,w
 15626  1548  0024               	movlb	4	; select bank4
 15627  1549  00E3               	movwf	(_BAUD+1)^(0+512)
 15628  154A  0020               	movlb	0	; select bank0
 15629  154B  0820               	movf	i1InitUART@Baud,w
 15630  154C  0024               	movlb	4	; select bank4
 15631  154D  00E2               	movwf	_BAUD^(0+512)
 15632                           
 15633                           ;UART.c: 109: if(parity)
 15634  154E  0020               	movlb	0	; select bank0
 15635  154F  0824               	movf	i1InitUART@parity,w
 15636  1550  1903               	btfsc	3,2
 15637  1551  2D54               	goto	i1l4616
 15638                           
 15639                           ;UART.c: 110: {
 15640                           ;UART.c: 111: config |= 0b00000010;
 15641  1552  14B0               	bsf	i1InitUART@config,1
 15642                           
 15643                           ;UART.c: 112: }
 15644  1553  2D58               	goto	i1l4618
 15645  1554                     i1l4616:	
 15646                           
 15647                           ;UART.c: 113: else
 15648                           ;UART.c: 114: {
 15649                           ;UART.c: 115: config &= ~0b00000010;
 15650  1554  30FD               	movlw	253
 15651  1555  00A5               	movwf	??i1_InitUART
 15652  1556  0825               	movf	??i1_InitUART,w
 15653  1557  05B0               	andwf	i1InitUART@config,f
 15654  1558                     i1l4618:	
 15655                           
 15656                           ;UART.c: 116: }
 15657                           ;UART.c: 117: baudconfig |= 0b00001000;
 15658  1558  15AF               	bsf	i1InitUART@baudconfig,3
 15659                           
 15660                           ;UART.c: 120: temp = (32000000L / Baud) - 1;
 15661  1559  0823               	movf	i1InitUART@Baud+3,w
 15662  155A  00F3               	movwf	i1___lldiv@divisor+3
 15663  155B  0822               	movf	i1InitUART@Baud+2,w
 15664  155C  00F2               	movwf	i1___lldiv@divisor+2
 15665  155D  0821               	movf	i1InitUART@Baud+1,w
 15666  155E  00F1               	movwf	i1___lldiv@divisor+1
 15667  155F  0820               	movf	i1InitUART@Baud,w
 15668  1560  00F0               	movwf	i1___lldiv@divisor
 15669  1561  3001               	movlw	1
 15670  1562  00F7               	movwf	i1___lldiv@dividend+3
 15671  1563  30E8               	movlw	232
 15672  1564  00F6               	movwf	i1___lldiv@dividend+2
 15673  1565  3048               	movlw	72
 15674  1566  00F5               	movwf	i1___lldiv@dividend+1
 15675  1567  3000               	movlw	0
 15676  1568  00F4               	movwf	i1___lldiv@dividend
 15677  1569  319E  2648  3195   	fcall	i1___lldiv
 15678  156C  30FF               	movlw	255
 15679  156D  0770               	addwf	?i1___lldiv,w
 15680  156E  0020               	movlb	0	; select bank0
 15681  156F  00B1               	movwf	i1InitUART@temp
 15682  1570  30FF               	movlw	255
 15683  1571  3D71               	addwfc	?i1___lldiv+1,w
 15684  1572  00B2               	movwf	i1InitUART@temp+1
 15685  1573  30FF               	movlw	255
 15686  1574  3D72               	addwfc	?i1___lldiv+2,w
 15687  1575  00B3               	movwf	i1InitUART@temp+2
 15688  1576  30FF               	movlw	255
 15689  1577  3D73               	addwfc	?i1___lldiv+3,w
 15690  1578  00B4               	movwf	i1InitUART@temp+3
 15691                           
 15692                           ;UART.c: 121: temp = (temp >> 2) - 1;
 15693  1579  30FF               	movlw	255
 15694  157A  00A5               	movwf	??i1_InitUART
 15695  157B  30FF               	movlw	255
 15696  157C  00A6               	movwf	??i1_InitUART+1
 15697  157D  30FF               	movlw	255
 15698  157E  00A7               	movwf	??i1_InitUART+2
 15699  157F  30FF               	movlw	255
 15700  1580  00A8               	movwf	??i1_InitUART+3
 15701  1581  0831               	movf	i1InitUART@temp,w
 15702  1582  00A9               	movwf	??i1_InitUART+4
 15703  1583  0832               	movf	i1InitUART@temp+1,w
 15704  1584  00AA               	movwf	??i1_InitUART+5
 15705  1585  0833               	movf	i1InitUART@temp+2,w
 15706  1586  00AB               	movwf	??i1_InitUART+6
 15707  1587  0834               	movf	i1InitUART@temp+3,w
 15708  1588  00AC               	movwf	??i1_InitUART+7
 15709  1589  3002               	movlw	2
 15710  158A                     u529_25:	
 15711  158A  36AC               	lsrf	??i1_InitUART+7,f
 15712  158B  0CAB               	rrf	??i1_InitUART+6,f
 15713  158C  0CAA               	rrf	??i1_InitUART+5,f
 15714  158D  0CA9               	rrf	??i1_InitUART+4,f
 15715  158E  0B89               	decfsz	9,f
 15716  158F  2D8A               	goto	u529_25
 15717  1590  0829               	movf	??i1_InitUART+4,w
 15718  1591  07A5               	addwf	??i1_InitUART,f
 15719  1592  082A               	movf	??i1_InitUART+5,w
 15720  1593  3DA6               	addwfc	??i1_InitUART+1,f
 15721  1594  082B               	movf	??i1_InitUART+6,w
 15722  1595  3DA7               	addwfc	??i1_InitUART+2,f
 15723  1596  082C               	movf	??i1_InitUART+7,w
 15724  1597  3DA8               	addwfc	??i1_InitUART+3,f
 15725  1598  0828               	movf	??i1_InitUART+3,w
 15726  1599  00B4               	movwf	i1InitUART@temp+3
 15727  159A  0827               	movf	??i1_InitUART+2,w
 15728  159B  00B3               	movwf	i1InitUART@temp+2
 15729  159C  0826               	movf	??i1_InitUART+1,w
 15730  159D  00B2               	movwf	i1InitUART@temp+1
 15731  159E  0825               	movf	??i1_InitUART,w
 15732  159F  00B1               	movwf	i1InitUART@temp
 15733                           
 15734                           ;UART.c: 122: spbrg = (unsigned int)temp;
 15735  15A0  0832               	movf	i1InitUART@temp+1,w
 15736  15A1  00AE               	movwf	i1InitUART@spbrg+1
 15737  15A2  0831               	movf	i1InitUART@temp,w
 15738  15A3  00AD               	movwf	i1InitUART@spbrg
 15739                           
 15740                           ;UART.c: 124: RCSTAbits.CREN = 0;
 15741  15A4  0023               	movlb	3	; select bank3
 15742  15A5  121D               	bcf	29,4	;volatile
 15743                           
 15744                           ;UART.c: 125: OpenUSART(config, spbrg);
 15745  15A6  0020               	movlb	0	; select bank0
 15746  15A7  082E               	movf	i1InitUART@spbrg+1,w
 15747  15A8  00F1               	movwf	i1OpenUSART@spbrg+1
 15748  15A9  082D               	movf	i1InitUART@spbrg,w
 15749  15AA  00F0               	movwf	i1OpenUSART@spbrg
 15750  15AB  0830               	movf	i1InitUART@config,w
 15751  15AC  319A  226C  3195   	fcall	i1_OpenUSART
 15752                           
 15753                           ;UART.c: 126: baudUSART(baudconfig);
 15754  15AF  0020               	movlb	0	; select bank0
 15755  15B0  082F               	movf	i1InitUART@baudconfig,w
 15756  15B1  3198  204A  3195   	fcall	i1_baudUSART
 15757                           
 15758                           ;UART.c: 127: temp = ReadUSART();
 15759  15B4  3198  206A  3195   	fcall	i1_ReadUSART
 15760  15B7  0020               	movlb	0	; select bank0
 15761  15B8  00A5               	movwf	??i1_InitUART
 15762  15B9  01A6               	clrf	??i1_InitUART+1
 15763  15BA  01A7               	clrf	??i1_InitUART+2
 15764  15BB  01A8               	clrf	??i1_InitUART+3
 15765  15BC  0828               	movf	??i1_InitUART+3,w
 15766  15BD  00B4               	movwf	i1InitUART@temp+3
 15767  15BE  0827               	movf	??i1_InitUART+2,w
 15768  15BF  00B3               	movwf	i1InitUART@temp+2
 15769  15C0  0826               	movf	??i1_InitUART+1,w
 15770  15C1  00B2               	movwf	i1InitUART@temp+1
 15771  15C2  0825               	movf	??i1_InitUART,w
 15772  15C3  00B1               	movwf	i1InitUART@temp
 15773                           
 15774                           ;UART.c: 128: temp = ReadUSART();
 15775  15C4  3198  206A  3195   	fcall	i1_ReadUSART
 15776  15C7  0020               	movlb	0	; select bank0
 15777  15C8  00A5               	movwf	??i1_InitUART
 15778  15C9  01A6               	clrf	??i1_InitUART+1
 15779  15CA  01A7               	clrf	??i1_InitUART+2
 15780  15CB  01A8               	clrf	??i1_InitUART+3
 15781  15CC  0828               	movf	??i1_InitUART+3,w
 15782  15CD  00B4               	movwf	i1InitUART@temp+3
 15783  15CE  0827               	movf	??i1_InitUART+2,w
 15784  15CF  00B3               	movwf	i1InitUART@temp+2
 15785  15D0  0826               	movf	??i1_InitUART+1,w
 15786  15D1  00B2               	movwf	i1InitUART@temp+1
 15787  15D2  0825               	movf	??i1_InitUART,w
 15788  15D3  00B1               	movwf	i1InitUART@temp
 15789                           
 15790                           ;UART.c: 129: temp = ReadUSART();
 15791  15D4  3198  206A  3195   	fcall	i1_ReadUSART
 15792  15D7  0020               	movlb	0	; select bank0
 15793  15D8  00A5               	movwf	??i1_InitUART
 15794  15D9  01A6               	clrf	??i1_InitUART+1
 15795  15DA  01A7               	clrf	??i1_InitUART+2
 15796  15DB  01A8               	clrf	??i1_InitUART+3
 15797  15DC  0828               	movf	??i1_InitUART+3,w
 15798  15DD  00B4               	movwf	i1InitUART@temp+3
 15799  15DE  0827               	movf	??i1_InitUART+2,w
 15800  15DF  00B3               	movwf	i1InitUART@temp+2
 15801  15E0  0826               	movf	??i1_InitUART+1,w
 15802  15E1  00B2               	movwf	i1InitUART@temp+1
 15803  15E2  0825               	movf	??i1_InitUART,w
 15804  15E3  00B1               	movwf	i1InitUART@temp
 15805                           
 15806                           ;UART.c: 130: temp = ReadUSART();
 15807  15E4  3198  206A  3195   	fcall	i1_ReadUSART
 15808  15E7  0020               	movlb	0	; select bank0
 15809  15E8  00A5               	movwf	??i1_InitUART
 15810  15E9  01A6               	clrf	??i1_InitUART+1
 15811  15EA  01A7               	clrf	??i1_InitUART+2
 15812  15EB  01A8               	clrf	??i1_InitUART+3
 15813  15EC  0828               	movf	??i1_InitUART+3,w
 15814  15ED  00B4               	movwf	i1InitUART@temp+3
 15815  15EE  0827               	movf	??i1_InitUART+2,w
 15816  15EF  00B3               	movwf	i1InitUART@temp+2
 15817  15F0  0826               	movf	??i1_InitUART+1,w
 15818  15F1  00B2               	movwf	i1InitUART@temp+1
 15819  15F2  0825               	movf	??i1_InitUART,w
 15820  15F3  00B1               	movwf	i1InitUART@temp
 15821                           
 15822                           ;UART.c: 131: temp = ReadUSART();
 15823  15F4  3198  206A         	fcall	i1_ReadUSART
 15824  15F6  0020               	movlb	0	; select bank0
 15825  15F7  00A5               	movwf	??i1_InitUART
 15826  15F8  01A6               	clrf	??i1_InitUART+1
 15827  15F9  01A7               	clrf	??i1_InitUART+2
 15828  15FA  01A8               	clrf	??i1_InitUART+3
 15829  15FB  0828               	movf	??i1_InitUART+3,w
 15830  15FC  00B4               	movwf	i1InitUART@temp+3
 15831  15FD  0827               	movf	??i1_InitUART+2,w
 15832  15FE  00B3               	movwf	i1InitUART@temp+2
 15833  15FF  0826               	movf	??i1_InitUART+1,w
 15834  1600  00B2               	movwf	i1InitUART@temp+1
 15835  1601  0825               	movf	??i1_InitUART,w
 15836  1602  00B1               	movwf	i1InitUART@temp
 15837                           
 15838                           ;UART.c: 133: PPSLOCK =0;
 15839  1603  003C               	movlb	28	; select bank28
 15840  1604  018F               	clrf	15	;volatile
 15841                           
 15842                           ;UART.c: 134: RC2PPS = 0b00010100;
 15843  1605  3014               	movlw	20
 15844  1606  003D               	movlb	29	; select bank29
 15845  1607  00A2               	movwf	34	;volatile
 15846                           
 15847                           ;UART.c: 135: CKPPS = 0b00010010;
 15848  1608  3012               	movlw	18
 15849  1609  003C               	movlb	28	; select bank28
 15850  160A  00A5               	movwf	37	;volatile
 15851                           
 15852                           ;UART.c: 137: RXPPS = 0b00010101;
 15853  160B  3015               	movlw	21
 15854  160C  00A4               	movwf	36	;volatile
 15855                           
 15856                           ;UART.c: 139: PPSLOCK =1;
 15857  160D  3001               	movlw	1
 15858  160E  008F               	movwf	15	;volatile
 15859                           
 15860                           ;UART.c: 141: PIR1bits.RCIF = 0;
 15861  160F  0020               	movlb	0	; select bank0
 15862  1610  1291               	bcf	17,5	;volatile
 15863                           
 15864                           ;UART.c: 142: PIE1bits.RCIE = 1;
 15865  1611  0021               	movlb	1	; select bank1
 15866  1612  1691               	bsf	17,5	;volatile
 15867                           
 15868                           ;UART.c: 143: INTCONbits.PEIE = 1;
 15869  1613  170B               	bsf	11,6	;volatile
 15870  1614  0008               	return
 15871  1615                     __end_ofi1_InitUART:	
 15872                           
 15873                           	psect	text58
 15874  184A                     __ptext58:	
 15875 ;; *************** function i1_baudUSART *****************
 15876 ;; Defined at:
 15877 ;;		line 151 in file "UART.c"
 15878 ;; Parameters:    Size  Location     Type
 15879 ;;  baudconfig      1    wreg     unsigned char 
 15880 ;; Auto vars:     Size  Location     Type
 15881 ;;  baudconfig      1    0[COMMON] unsigned char 
 15882 ;; Return value:  Size  Location     Type
 15883 ;;		None               void
 15884 ;; Registers used:
 15885 ;;		wreg, status,2
 15886 ;; Tracked objects:
 15887 ;;		On entry : 0/0
 15888 ;;		On exit  : 0/0
 15889 ;;		Unchanged: 0/0
 15890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15892 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15894 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15895 ;;Total ram usage:        1 bytes
 15896 ;; Hardware stack levels used:    1
 15897 ;; This function calls:
 15898 ;;		Nothing
 15899 ;; This function is called by:
 15900 ;;		i1_InitUART
 15901 ;; This function uses a non-reentrant model
 15902 ;;
 15903                           
 15904                           
 15905                           ;psect for function i1_baudUSART
 15906  184A                     i1_baudUSART:	
 15907                           
 15908                           ;incstack = 0
 15909                           ; Regs used in i1_baudUSART: [wreg+status,2]
 15910                           ;i1baudUSART@baudconfig stored from wreg
 15911  184A  00F0               	movwf	i1baudUSART@baudconfig
 15912                           
 15913                           ;UART.c: 153: BAUD1CON =0;
 15914  184B  0023               	movlb	3	; select bank3
 15915  184C  019F               	clrf	31	;volatile
 15916                           
 15917                           ;UART.c: 154: BAUD1CON = baudconfig;
 15918  184D  0870               	movf	i1baudUSART@baudconfig,w
 15919  184E  009F               	movwf	31	;volatile
 15920  184F  0008               	return
 15921  1850                     __end_ofi1_baudUSART:	
 15922                           
 15923                           	psect	text59
 15924  186A                     __ptext59:	
 15925 ;; *************** function i1_ReadUSART *****************
 15926 ;; Defined at:
 15927 ;;		line 307 in file "UART.c"
 15928 ;; Parameters:    Size  Location     Type
 15929 ;;		None
 15930 ;; Auto vars:     Size  Location     Type
 15931 ;;  ReadUSART       1    1[COMMON] unsigned char 
 15932 ;; Return value:  Size  Location     Type
 15933 ;;                  1    wreg      unsigned char 
 15934 ;; Registers used:
 15935 ;;		wreg
 15936 ;; Tracked objects:
 15937 ;;		On entry : 0/0
 15938 ;;		On exit  : 0/0
 15939 ;;		Unchanged: 0/0
 15940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15942 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15943 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15944 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15945 ;;Total ram usage:        2 bytes
 15946 ;; Hardware stack levels used:    1
 15947 ;; This function calls:
 15948 ;;		Nothing
 15949 ;; This function is called by:
 15950 ;;		_isr
 15951 ;;		i1_InitUART
 15952 ;; This function uses a non-reentrant model
 15953 ;;
 15954                           
 15955                           
 15956                           ;psect for function i1_ReadUSART
 15957  186A                     i1_ReadUSART:	
 15958                           
 15959                           ;UART.c: 309: char data;
 15960                           ;UART.c: 311: if(RCSTAbits.OERR)
 15961                           
 15962                           ;incstack = 0
 15963                           ; Regs used in i1_ReadUSART: [wreg]
 15964  186A  0023               	movlb	3	; select bank3
 15965  186B  189D               	btfsc	29,1	;volatile
 15966                           
 15967                           ;UART.c: 312: {
 15968                           ;UART.c: 313: RCSTAbits.CREN = 0;
 15969  186C  121D               	bcf	29,4	;volatile
 15970                           
 15971                           ;UART.c: 314: }
 15972                           ;UART.c: 316: data = RCREG;
 15973  186D  0819               	movf	25,w	;volatile
 15974  186E  00F0               	movwf	??i1_ReadUSART
 15975  186F  0870               	movf	??i1_ReadUSART,w
 15976  1870  00F1               	movwf	i1ReadUSART@data
 15977                           
 15978                           ;UART.c: 318: return (data);
 15979  1871  0871               	movf	i1ReadUSART@data,w
 15980  1872  0008               	return
 15981  1873                     __end_ofi1_ReadUSART:	
 15982                           
 15983                           	psect	text60
 15984  1A6C                     __ptext60:	
 15985 ;; *************** function i1_OpenUSART *****************
 15986 ;; Defined at:
 15987 ;;		line 162 in file "UART.c"
 15988 ;; Parameters:    Size  Location     Type
 15989 ;;  config          1    wreg     unsigned char 
 15990 ;;  spbrg           2    0[COMMON] unsigned int 
 15991 ;; Auto vars:     Size  Location     Type
 15992 ;;  config          1    2[COMMON] unsigned char 
 15993 ;; Return value:  Size  Location     Type
 15994 ;;		None               void
 15995 ;; Registers used:
 15996 ;;		wreg, status,2
 15997 ;; Tracked objects:
 15998 ;;		On entry : 0/0
 15999 ;;		On exit  : 0/0
 16000 ;;		Unchanged: 0/0
 16001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16002 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16003 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16005 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16006 ;;Total ram usage:        3 bytes
 16007 ;; Hardware stack levels used:    1
 16008 ;; This function calls:
 16009 ;;		Nothing
 16010 ;; This function is called by:
 16011 ;;		i1_InitUART
 16012 ;; This function uses a non-reentrant model
 16013 ;;
 16014                           
 16015                           
 16016                           ;psect for function i1_OpenUSART
 16017  1A6C                     i1_OpenUSART:	
 16018                           
 16019                           ;incstack = 0
 16020                           ; Regs used in i1_OpenUSART: [wreg+status,2]
 16021                           ;i1OpenUSART@config stored from wreg
 16022  1A6C  00F2               	movwf	i1OpenUSART@config
 16023                           
 16024                           ;UART.c: 164: TX1STA = 0;
 16025  1A6D  0023               	movlb	3	; select bank3
 16026  1A6E  019E               	clrf	30	;volatile
 16027                           
 16028                           ;UART.c: 165: RC1STA = 0;
 16029  1A6F  019D               	clrf	29	;volatile
 16030                           
 16031                           ;UART.c: 167: if(config&0x01)
 16032  1A70  1872               	btfsc	i1OpenUSART@config,0
 16033                           
 16034                           ;UART.c: 168: {
 16035                           ;UART.c: 169: TX1STAbits.SYNC = 1;
 16036  1A71  161E               	bsf	30,4	;volatile
 16037                           
 16038                           ;UART.c: 170: }
 16039                           ;UART.c: 172: if(config&0x02)
 16040  1A72  1CF2               	btfss	i1OpenUSART@config,1
 16041  1A73  2A76               	goto	i1l4132
 16042                           
 16043                           ;UART.c: 173: {
 16044                           ;UART.c: 174: TX1STAbits.TX9 = 1;
 16045  1A74  171E               	bsf	30,6	;volatile
 16046                           
 16047                           ;UART.c: 175: RC1STAbits.RX9 = 1;
 16048  1A75  171D               	bsf	29,6	;volatile
 16049  1A76                     i1l4132:	
 16050                           
 16051                           ;UART.c: 176: }
 16052                           ;UART.c: 178: if(config&0x04)
 16053  1A76  1972               	btfsc	i1OpenUSART@config,2
 16054                           
 16055                           ;UART.c: 179: {
 16056                           ;UART.c: 180: TX1STAbits.CSRC = 1;
 16057  1A77  179E               	bsf	30,7	;volatile
 16058                           
 16059                           ;UART.c: 181: }
 16060                           ;UART.c: 183: if(config&0x08)
 16061  1A78  1DF2               	btfss	i1OpenUSART@config,3
 16062  1A79  2A7C               	goto	i1l419
 16063                           
 16064                           ;UART.c: 184: {
 16065                           ;UART.c: 185: RC1STAbits.CREN = 1;
 16066  1A7A  161D               	bsf	29,4	;volatile
 16067                           
 16068                           ;UART.c: 186: }
 16069  1A7B  2A7D               	goto	i1l4140
 16070  1A7C                     i1l419:	
 16071                           
 16072                           ;UART.c: 187: else
 16073                           ;UART.c: 188: {
 16074                           ;UART.c: 189: RC1STAbits.SREN = 1;
 16075  1A7C  169D               	bsf	29,5	;volatile
 16076  1A7D                     i1l4140:	
 16077                           
 16078                           ;UART.c: 190: }
 16079                           ;UART.c: 192: if(config&0x10)
 16080  1A7D  1A72               	btfsc	i1OpenUSART@config,4
 16081                           
 16082                           ;UART.c: 193: {
 16083                           ;UART.c: 194: TX1STAbits.BRGH = 1;
 16084  1A7E  151E               	bsf	30,2	;volatile
 16085                           
 16086                           ;UART.c: 200: }
 16087                           ;UART.c: 202: if(config&0x40)
 16088                           
 16089                           ;UART.c: 198: {
 16090  1A7F  1F72               	btfss	i1OpenUSART@config,6
 16091  1A80  2A86               	goto	i1l423
 16092                           
 16093                           ;UART.c: 203: {
 16094                           ;UART.c: 204: PIR1bits.RCIF = 0;
 16095  1A81  0020               	movlb	0	; select bank0
 16096  1A82  1291               	bcf	17,5	;volatile
 16097                           
 16098                           ;UART.c: 205: PIE1bits.RCIE = 1;
 16099  1A83  0021               	movlb	1	; select bank1
 16100  1A84  1691               	bsf	17,5	;volatile
 16101                           
 16102                           ;UART.c: 207: }
 16103  1A85  2A88               	goto	i1l4150
 16104  1A86                     i1l423:	
 16105                           
 16106                           ;UART.c: 208: else
 16107                           ;UART.c: 209: {
 16108                           ;UART.c: 210: PIE1bits.RCIE = 0;
 16109  1A86  0021               	movlb	1	; select bank1
 16110  1A87  1291               	bcf	17,5	;volatile
 16111  1A88                     i1l4150:	
 16112                           
 16113                           ;UART.c: 211: }
 16114                           ;UART.c: 213: if(config&0x80)
 16115  1A88  1FF2               	btfss	i1OpenUSART@config,7
 16116  1A89  2A8F               	goto	i1l425
 16117                           
 16118                           ;UART.c: 214: {
 16119                           ;UART.c: 215: PIR1bits.TXIF = 0;
 16120  1A8A  0020               	movlb	0	; select bank0
 16121  1A8B  1211               	bcf	17,4	;volatile
 16122                           
 16123                           ;UART.c: 216: PIE1bits.TXIE = 1;
 16124  1A8C  0021               	movlb	1	; select bank1
 16125  1A8D  1611               	bsf	17,4	;volatile
 16126                           
 16127                           ;UART.c: 217: }
 16128  1A8E  2A90               	goto	i1l4154
 16129  1A8F                     i1l425:	
 16130                           
 16131                           ;UART.c: 218: else
 16132                           ;UART.c: 219: {
 16133                           ;UART.c: 220: PIE1bits.TXIE = 0;
 16134  1A8F  1211               	bcf	17,4	;volatile
 16135  1A90                     i1l4154:	
 16136                           
 16137                           ;UART.c: 221: }
 16138                           ;UART.c: 223: SPBRG = spbrg;
 16139  1A90  0870               	movf	i1OpenUSART@spbrg,w
 16140  1A91  0023               	movlb	3	; select bank3
 16141  1A92  009B               	movwf	27	;volatile
 16142                           
 16143                           ;UART.c: 224: SPBRGH = spbrg >> 8;
 16144  1A93  0871               	movf	i1OpenUSART@spbrg+1,w
 16145  1A94  009C               	movwf	28	;volatile
 16146                           
 16147                           ;UART.c: 226: TX1STAbits.TXEN = 1;
 16148  1A95  169E               	bsf	30,5	;volatile
 16149                           
 16150                           ;UART.c: 227: RC1STAbits.SPEN = 1;
 16151  1A96  179D               	bsf	29,7	;volatile
 16152  1A97  0008               	return
 16153  1A98                     __end_ofi1_OpenUSART:	
 16154                           
 16155                           	psect	text61
 16156  18BB                     __ptext61:	
 16157 ;; *************** function i1_CloseUSART *****************
 16158 ;; Defined at:
 16159 ;;		line 65 in file "UART.c"
 16160 ;; Parameters:    Size  Location     Type
 16161 ;;		None
 16162 ;; Auto vars:     Size  Location     Type
 16163 ;;		None
 16164 ;; Return value:  Size  Location     Type
 16165 ;;		None               void
 16166 ;; Registers used:
 16167 ;;		wreg, status,2, status,0
 16168 ;; Tracked objects:
 16169 ;;		On entry : 0/0
 16170 ;;		On exit  : 0/0
 16171 ;;		Unchanged: 0/0
 16172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16175 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16176 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16177 ;;Total ram usage:        1 bytes
 16178 ;; Hardware stack levels used:    1
 16179 ;; This function calls:
 16180 ;;		Nothing
 16181 ;; This function is called by:
 16182 ;;		i1_InitUART
 16183 ;; This function uses a non-reentrant model
 16184 ;;
 16185                           
 16186                           
 16187                           ;psect for function i1_CloseUSART
 16188  18BB                     i1_CloseUSART:	
 16189                           
 16190                           ;UART.c: 67: RCSTA&=0b01001111;
 16191                           
 16192                           ;incstack = 0
 16193                           ; Regs used in i1_CloseUSART: [wreg+status,2+status,0]
 16194  18BB  304F               	movlw	79
 16195  18BC  00F0               	movwf	??i1_CloseUSART
 16196  18BD  0870               	movf	??i1_CloseUSART,w
 16197  18BE  0023               	movlb	3	; select bank3
 16198  18BF  059D               	andwf	29,f	;volatile
 16199                           
 16200                           ;UART.c: 68: TX1STAbits.TXEN=0;
 16201  18C0  129E               	bcf	30,5	;volatile
 16202                           
 16203                           ;UART.c: 69: PIE1&=0b11001111;
 16204  18C1  30CF               	movlw	207
 16205  18C2  00F0               	movwf	??i1_CloseUSART
 16206  18C3  0870               	movf	??i1_CloseUSART,w
 16207  18C4  0021               	movlb	1	; select bank1
 16208  18C5  0591               	andwf	17,f	;volatile
 16209  18C6  0008               	return
 16210  18C7                     __end_ofi1_CloseUSART:	
 16211                           
 16212                           	psect	text62
 16213  170A                     __ptext62:	
 16214 ;; *************** function _sprintf *****************
 16215 ;; Defined at:
 16216 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 16217 ;; Parameters:    Size  Location     Type
 16218 ;;  sp              1    wreg     PTR unsigned char 
 16219 ;;		 -> Process_PS2_ScanCode@buf(60), SetBaud@buf(50), 
 16220 ;;  f               2   10[BANK0 ] PTR const unsigned char 
 16221 ;;		 -> STR_18(24), STR_11(12), 
 16222 ;; Auto vars:     Size  Location     Type
 16223 ;;  sp              1   30[BANK0 ] PTR unsigned char 
 16224 ;;		 -> Process_PS2_ScanCode@buf(60), SetBaud@buf(50), 
 16225 ;;  val             4   25[BANK0 ] unsigned long 
 16226 ;;  tmpval          4    0        struct .
 16227 ;;  prec            2   23[BANK0 ] int 
 16228 ;;  cp              2    0        PTR const unsigned char 
 16229 ;;  len             2    0        unsigned int 
 16230 ;;  c               1   31[BANK0 ] char 
 16231 ;;  ap              1   29[BANK0 ] PTR void [1]
 16232 ;;		 -> ?_sprintf(2), 
 16233 ;;  flag            1   22[BANK0 ] unsigned char 
 16234 ;; Return value:  Size  Location     Type
 16235 ;;                  2   10[BANK0 ] int 
 16236 ;; Registers used:
 16237 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16238 ;; Tracked objects:
 16239 ;;		On entry : 0/0
 16240 ;;		On exit  : 0/0
 16241 ;;		Unchanged: 0/0
 16242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16243 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16244 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16245 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16246 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16247 ;;Total ram usage:       22 bytes
 16248 ;; Hardware stack levels used:    1
 16249 ;; Hardware stack levels required when called:    1
 16250 ;; This function calls:
 16251 ;;		___llmod
 16252 ;;		i1___lldiv
 16253 ;; This function is called by:
 16254 ;;		_SetBaud
 16255 ;;		_Process_PS2_ScanCode
 16256 ;; This function uses a non-reentrant model
 16257 ;;
 16258                           
 16259                           
 16260                           ;psect for function _sprintf
 16261  170A                     _sprintf:	
 16262                           
 16263                           ;incstack = 0
 16264                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16265                           ;sprintf@sp stored from wreg
 16266  170A  0020               	movlb	0	; select bank0
 16267  170B  00BE               	movwf	sprintf@sp
 16268                           
 16269                           ;doprnt.c: 494: va_list ap;
 16270                           ;doprnt.c: 499: signed char c;
 16271                           ;doprnt.c: 504: int prec;
 16272                           ;doprnt.c: 508: unsigned char flag;
 16273                           ;doprnt.c: 523: union {
 16274                           ;doprnt.c: 524: unsigned long vd;
 16275                           ;doprnt.c: 525: double integ;
 16276                           ;doprnt.c: 526: } tmpval;
 16277                           ;doprnt.c: 528: unsigned long val;
 16278                           ;doprnt.c: 529: unsigned len;
 16279                           ;doprnt.c: 530: const char * cp;
 16280                           ;doprnt.c: 533: *ap = __va_start();
 16281  170C  302C               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
 16282  170D  00B0               	movwf	??_sprintf
 16283  170E  0830               	movf	??_sprintf,w
 16284  170F  00BD               	movwf	sprintf@ap
 16285  1710                     i1l4372:	
 16286                           ;doprnt.c: 536: while(c = *f++) {
 16287                           
 16288  1710  082B               	movf	sprintf@f+1,w
 16289  1711  00B1               	movwf	??_sprintf+1
 16290  1712  082A               	movf	sprintf@f,w
 16291  1713  00B0               	movwf	??_sprintf
 16292  1714  0AAA               	incf	sprintf@f,f
 16293  1715  1903               	skipnz
 16294  1716  0AAB               	incf	sprintf@f+1,f
 16295  1717  0830               	movf	??_sprintf,w
 16296  1718  0084               	movwf	4
 16297  1719  0831               	movf	??_sprintf+1,w
 16298  171A  0085               	movwf	5
 16299  171B  0800               	movf	0,w	;code access
 16300  171C  00B2               	movwf	??_sprintf+2
 16301  171D  0832               	movf	??_sprintf+2,w
 16302  171E  00BF               	movwf	sprintf@c
 16303  171F  083F               	movf	sprintf@c,w
 16304  1720  1903               	btfsc	3,2
 16305  1721  2FFA               	goto	i1l4374
 16306                           
 16307                           ;doprnt.c: 538: if(c != '%')
 16308  1722  3025               	movlw	37
 16309  1723  063F               	xorwf	sprintf@c,w
 16310  1724  1903               	btfsc	3,2
 16311  1725  2F33               	goto	i1l4334
 16312                           
 16313                           ;doprnt.c: 540: {
 16314                           ;doprnt.c: 541: ((*sp++ = (c)));
 16315  1726  083F               	movf	sprintf@c,w
 16316  1727  00B0               	movwf	??_sprintf
 16317  1728  083E               	movf	sprintf@sp,w
 16318  1729  0086               	movwf	6
 16319  172A  3001               	movlw	1	; select bank2/3
 16320  172B  0087               	movwf	7
 16321  172C  0830               	movf	??_sprintf,w
 16322  172D  0081               	movwf	1
 16323  172E  3001               	movlw	1
 16324  172F  00B0               	movwf	??_sprintf
 16325  1730  0830               	movf	??_sprintf,w
 16326  1731  07BE               	addwf	sprintf@sp,f
 16327                           
 16328                           ;doprnt.c: 542: continue;
 16329  1732  2F10               	goto	i1l4372
 16330  1733                     i1l4334:	
 16331                           
 16332                           ;doprnt.c: 543: }
 16333                           ;doprnt.c: 548: flag = 0;
 16334  1733  01B6               	clrf	sprintf@flag
 16335                           
 16336                           ;doprnt.c: 635: switch(c = *f++) {
 16337                           
 16338                           ;doprnt.c: 633: loop:
 16339  1734  2F3C               	goto	i1l4340
 16340  1735                     i1l1087:	
 16341                           ;doprnt.c: 641: case 'l':
 16342                           
 16343                           ;doprnt.c: 638: goto alldone;
 16344                           
 16345                           ;doprnt.c: 637: case 0:
 16346                           
 16347                           
 16348                           ;doprnt.c: 643: flag |= 0x10;
 16349  1735  1636               	bsf	sprintf@flag,4
 16350                           
 16351                           ;doprnt.c: 644: goto loop;
 16352  1736  2F3C               	goto	i1l4340
 16353  1737                     i1l4336:	
 16354                           ;doprnt.c: 817: case 'u':
 16355                           
 16356                           ;doprnt.c: 813: continue;
 16357                           
 16358                           ;doprnt.c: 802: default:
 16359                           
 16360                           
 16361                           ;doprnt.c: 818: flag |= 0xC0;
 16362  1737  30C0               	movlw	192
 16363  1738  00B0               	movwf	??_sprintf
 16364  1739  0830               	movf	??_sprintf,w
 16365  173A  04B6               	iorwf	sprintf@flag,f
 16366                           
 16367                           ;doprnt.c: 822: }
 16368                           
 16369                           ;doprnt.c: 819: break;
 16370  173B  2F53               	goto	i1l1090
 16371  173C                     i1l4340:	
 16372  173C  082B               	movf	sprintf@f+1,w
 16373  173D  00B1               	movwf	??_sprintf+1
 16374  173E  082A               	movf	sprintf@f,w
 16375  173F  00B0               	movwf	??_sprintf
 16376  1740  0AAA               	incf	sprintf@f,f
 16377  1741  1903               	skipnz
 16378  1742  0AAB               	incf	sprintf@f+1,f
 16379  1743  0830               	movf	??_sprintf,w
 16380  1744  0084               	movwf	4
 16381  1745  0831               	movf	??_sprintf+1,w
 16382  1746  0085               	movwf	5
 16383  1747  0800               	movf	0,w	;code access
 16384  1748  00BF               	movwf	sprintf@c
 16385                           
 16386                           ; Switch size 1, requested type "space"
 16387                           ; Number of cases is 3, Range of values is 0 to 117
 16388                           ; switch strategies available:
 16389                           ; Name         Instructions Cycles
 16390                           ; simple_byte           10     6 (average)
 16391                           ; direct_byte          242     6 (fixed)
 16392                           ; jumptable            260     6 (fixed)
 16393                           ;	Chosen strategy is simple_byte
 16394  1749  3A00               	xorlw	0	; case 0
 16395  174A  1903               	skipnz
 16396  174B  2FFA               	goto	i1l4374
 16397  174C  3A6C               	xorlw	108	; case 108
 16398  174D  1903               	skipnz
 16399  174E  2F35               	goto	i1l1087
 16400  174F  3A19               	xorlw	25	; case 117
 16401  1750  1903               	skipnz
 16402  1751  2F37               	goto	i1l4336
 16403  1752  2F10               	goto	i1l4372
 16404  1753                     i1l1090:	
 16405                           
 16406                           ;doprnt.c: 1273: {
 16407                           ;doprnt.c: 1281: if(flag & 0x10)
 16408  1753  1E36               	btfss	sprintf@flag,4
 16409  1754  2F62               	goto	i1l4346
 16410                           
 16411                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
 16412  1755  083D               	movf	sprintf@ap,w
 16413  1756  0086               	movwf	6
 16414  1757  0187               	clrf	7
 16415  1758  3F40               	moviw [0]fsr1
 16416  1759  00B9               	movwf	sprintf@val
 16417  175A  3F41               	moviw [1]fsr1
 16418  175B  00BA               	movwf	sprintf@val+1
 16419  175C  3F42               	moviw [2]fsr1
 16420  175D  00BB               	movwf	sprintf@val+2
 16421  175E  3F43               	moviw [3]fsr1
 16422  175F  00BC               	movwf	sprintf@val+3
 16423  1760  3004               	movlw	4
 16424  1761  2F70               	goto	L17
 16425  1762                     i1l4346:	
 16426                           
 16427                           ;doprnt.c: 1283: else
 16428                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 16429  1762  083D               	movf	sprintf@ap,w
 16430  1763  0086               	movwf	6
 16431  1764  0187               	clrf	7
 16432  1765  3F40               	moviw [0]fsr1
 16433  1766  00B0               	movwf	??_sprintf
 16434  1767  3F41               	moviw [1]fsr1
 16435  1768  00B1               	movwf	??_sprintf+1
 16436  1769  0830               	movf	??_sprintf,w
 16437  176A  00B9               	movwf	sprintf@val
 16438  176B  0831               	movf	??_sprintf+1,w
 16439  176C  00BA               	movwf	sprintf@val+1
 16440  176D  01BB               	clrf	sprintf@val+2
 16441  176E  01BC               	clrf	sprintf@val+3
 16442  176F  3002               	movlw	2
 16443  1770                     L17:	
 16444  1770  00B0               	movwf	??_sprintf
 16445  1771  0830               	movf	??_sprintf,w
 16446  1772  07BD               	addwf	sprintf@ap,f
 16447                           
 16448                           ;doprnt.c: 1287: }
 16449                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 16450  1773  01BF               	clrf	sprintf@c
 16451  1774  0ABF               	incf	sprintf@c,f
 16452  1775  300A               	movlw	10
 16453  1776  063F               	xorwf	sprintf@c,w
 16454  1777  1903               	btfsc	3,2
 16455  1778  2FA6               	goto	i1l4362
 16456  1779                     i1l4356:	
 16457                           
 16458                           ;doprnt.c: 1306: if(val < dpowers[c])
 16459  1779  083F               	movf	sprintf@c,w
 16460  177A  00B0               	movwf	??_sprintf
 16461  177B  01B1               	clrf	??_sprintf+1
 16462  177C  35B0               	lslf	??_sprintf,f
 16463  177D  0DB1               	rlf	??_sprintf+1,f
 16464  177E  35B0               	lslf	??_sprintf,f
 16465  177F  0DB1               	rlf	??_sprintf+1,f
 16466  1780  30D3               	movlw	low (_dpowers| (0+32768))
 16467  1781  0730               	addwf	??_sprintf,w
 16468  1782  0084               	movwf	4
 16469  1783  3088               	movlw	high (_dpowers| (0+32768))
 16470  1784  3D31               	addwfc	??_sprintf+1,w
 16471  1785  0085               	movwf	5
 16472  1786  3F00               	moviw [0]fsr0
 16473  1787  00B2               	movwf	??_sprintf+2
 16474  1788  3F01               	moviw [1]fsr0
 16475  1789  00B3               	movwf	??_sprintf+3
 16476  178A  3F02               	moviw [2]fsr0
 16477  178B  00B4               	movwf	??_sprintf+4
 16478  178C  3F03               	moviw [3]fsr0
 16479  178D  00B5               	movwf	??_sprintf+5
 16480  178E  0835               	movf	??_sprintf+5,w
 16481  178F  023C               	subwf	sprintf@val+3,w
 16482  1790  1D03               	skipz
 16483  1791  2F9C               	goto	u482_25
 16484  1792  0834               	movf	??_sprintf+4,w
 16485  1793  023B               	subwf	sprintf@val+2,w
 16486  1794  1D03               	skipz
 16487  1795  2F9C               	goto	u482_25
 16488  1796  0833               	movf	??_sprintf+3,w
 16489  1797  023A               	subwf	sprintf@val+1,w
 16490  1798  1D03               	skipz
 16491  1799  2F9C               	goto	u482_25
 16492  179A  0832               	movf	??_sprintf+2,w
 16493  179B  0239               	subwf	sprintf@val,w
 16494  179C                     u482_25:	
 16495  179C  1C03               	btfss	3,0
 16496  179D  2FA6               	goto	i1l4362
 16497                           
 16498                           ;doprnt.c: 1307: break;
 16499  179E  3001               	movlw	1
 16500  179F  00B0               	movwf	??_sprintf
 16501  17A0  0830               	movf	??_sprintf,w
 16502  17A1  07BF               	addwf	sprintf@c,f
 16503  17A2  300A               	movlw	10
 16504  17A3  063F               	xorwf	sprintf@c,w
 16505  17A4  1D03               	btfss	3,2
 16506  17A5  2F79               	goto	i1l4356
 16507  17A6                     i1l4362:	
 16508                           
 16509                           ;doprnt.c: 1422: {
 16510                           ;doprnt.c: 1469: }
 16511                           ;doprnt.c: 1472: prec = c;
 16512  17A6  083F               	movf	sprintf@c,w
 16513  17A7  00B7               	movwf	sprintf@prec
 16514  17A8  01B8               	clrf	sprintf@prec+1
 16515  17A9  1BB7               	btfsc	sprintf@prec,7
 16516  17AA  03B8               	decf	sprintf@prec+1,f
 16517  17AB                     i1l4370:	
 16518                           ;doprnt.c: 1474: while(prec--) {
 16519                           
 16520  17AB  30FF               	movlw	255
 16521  17AC  07B7               	addwf	sprintf@prec,f
 16522  17AD  30FF               	movlw	255
 16523  17AE  3DB8               	addwfc	sprintf@prec+1,f
 16524  17AF  0A37               	incf	sprintf@prec,w
 16525  17B0  1903               	btfsc	3,2
 16526  17B1  0A38               	incf	sprintf@prec+1,w
 16527  17B2  1903               	btfsc	3,2
 16528  17B3  2F10               	goto	i1l4372
 16529                           
 16530                           ;doprnt.c: 1478: {
 16531                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 16532  17B4  3000               	movlw	0
 16533  17B5  00A3               	movwf	___llmod@divisor+3
 16534  17B6  3000               	movlw	0
 16535  17B7  00A2               	movwf	___llmod@divisor+2
 16536  17B8  3000               	movlw	0
 16537  17B9  00A1               	movwf	___llmod@divisor+1
 16538  17BA  300A               	movlw	10
 16539  17BB  00A0               	movwf	___llmod@divisor
 16540  17BC  0838               	movf	sprintf@prec+1,w
 16541  17BD  0085               	movwf	5
 16542  17BE  0837               	movf	sprintf@prec,w
 16543  17BF  0084               	movwf	4
 16544  17C0  3584               	lslf	4,f
 16545  17C1  0D85               	rlf	5,f
 16546  17C2  3584               	lslf	4,f
 16547  17C3  0D85               	rlf	5,f
 16548  17C4  30D3               	movlw	low (_dpowers| (0+32768))
 16549  17C5  0784               	addwf	4,f
 16550  17C6  3088               	movlw	high (_dpowers| (0+32768))
 16551  17C7  3D85               	addwfc	5,f
 16552  17C8  3F00               	moviw [0]fsr0
 16553  17C9  00F0               	movwf	i1___lldiv@divisor
 16554  17CA  3F01               	moviw [1]fsr0
 16555  17CB  00F1               	movwf	i1___lldiv@divisor+1
 16556  17CC  3F02               	moviw [2]fsr0
 16557  17CD  00F2               	movwf	i1___lldiv@divisor+2
 16558  17CE  3F03               	moviw [3]fsr0
 16559  17CF  00F3               	movwf	i1___lldiv@divisor+3
 16560  17D0  083C               	movf	sprintf@val+3,w
 16561  17D1  00F7               	movwf	i1___lldiv@dividend+3
 16562  17D2  083B               	movf	sprintf@val+2,w
 16563  17D3  00F6               	movwf	i1___lldiv@dividend+2
 16564  17D4  083A               	movf	sprintf@val+1,w
 16565  17D5  00F5               	movwf	i1___lldiv@dividend+1
 16566  17D6  0839               	movf	sprintf@val,w
 16567  17D7  00F4               	movwf	i1___lldiv@dividend
 16568  17D8  319E  2648  3197   	fcall	i1___lldiv
 16569  17DB  0873               	movf	?i1___lldiv+3,w
 16570  17DC  0020               	movlb	0	; select bank0
 16571  17DD  00A7               	movwf	___llmod@dividend+3
 16572  17DE  0872               	movf	?i1___lldiv+2,w
 16573  17DF  00A6               	movwf	___llmod@dividend+2
 16574  17E0  0871               	movf	?i1___lldiv+1,w
 16575  17E1  00A5               	movwf	___llmod@dividend+1
 16576  17E2  0870               	movf	?i1___lldiv,w
 16577  17E3  00A4               	movwf	___llmod@dividend
 16578  17E4  319D  251D  3197   	fcall	___llmod
 16579  17E7  0020               	movlb	0	; select bank0
 16580  17E8  0820               	movf	?___llmod,w
 16581  17E9  3E30               	addlw	48
 16582  17EA  00B0               	movwf	??_sprintf
 16583  17EB  0830               	movf	??_sprintf,w
 16584  17EC  00BF               	movwf	sprintf@c
 16585                           
 16586                           ;doprnt.c: 1523: }
 16587                           ;doprnt.c: 1524: ((*sp++ = (c)));
 16588  17ED  083F               	movf	sprintf@c,w
 16589  17EE  00B0               	movwf	??_sprintf
 16590  17EF  083E               	movf	sprintf@sp,w
 16591  17F0  0086               	movwf	6
 16592  17F1  3001               	movlw	1	; select bank2/3
 16593  17F2  0087               	movwf	7
 16594  17F3  0830               	movf	??_sprintf,w
 16595  17F4  0081               	movwf	1
 16596  17F5  3001               	movlw	1
 16597  17F6  00B0               	movwf	??_sprintf
 16598  17F7  0830               	movf	??_sprintf,w
 16599  17F8  07BE               	addwf	sprintf@sp,f
 16600  17F9  2FAB               	goto	i1l4370
 16601  17FA                     i1l4374:	
 16602                           ;doprnt.c: 1525: }
 16603                           ;doprnt.c: 1533: }
 16604                           ;doprnt.c: 1535: alldone:
 16605                           
 16606                           
 16607                           ;doprnt.c: 1538: *sp = 0;
 16608  17FA  083E               	movf	sprintf@sp,w
 16609  17FB  0086               	movwf	6
 16610  17FC  3001               	movlw	1	; select bank2/3
 16611  17FD  0087               	movwf	7
 16612  17FE  0181               	clrf	1
 16613  17FF  0008               	return
 16614  1800                     __end_of_sprintf:	
 16615                           ;doprnt.c: 1540: return 0;
 16616                           ;	Return value of _sprintf is never used
 16617                           
 16618                           
 16619                           	psect	text63
 16620  1E48                     __ptext63:	
 16621 ;; *************** function i1___lldiv *****************
 16622 ;; Defined at:
 16623 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
 16624 ;; Parameters:    Size  Location     Type
 16625 ;;  divisor         4    0[COMMON] unsigned long 
 16626 ;;  dividend        4    4[COMMON] unsigned long 
 16627 ;; Auto vars:     Size  Location     Type
 16628 ;;  __lldiv         4    9[COMMON] unsigned long 
 16629 ;;  __lldiv         1   13[COMMON] unsigned char 
 16630 ;; Return value:  Size  Location     Type
 16631 ;;                  4    0[COMMON] unsigned long 
 16632 ;; Registers used:
 16633 ;;		wreg, status,2, status,0
 16634 ;; Tracked objects:
 16635 ;;		On entry : 0/0
 16636 ;;		On exit  : 0/0
 16637 ;;		Unchanged: 0/0
 16638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16639 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16640 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16641 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16642 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16643 ;;Total ram usage:       14 bytes
 16644 ;; Hardware stack levels used:    1
 16645 ;; This function calls:
 16646 ;;		Nothing
 16647 ;; This function is called by:
 16648 ;;		_sprintf
 16649 ;;		i1_InitUART
 16650 ;; This function uses a non-reentrant model
 16651 ;;
 16652                           
 16653                           
 16654                           ;psect for function i1___lldiv
 16655  1E48                     i1___lldiv:	
 16656                           
 16657                           ;incstack = 0
 16658                           ; Regs used in i1___lldiv: [wreg+status,2+status,0]
 16659  1E48  3000               	movlw	0
 16660  1E49  00FC               	movwf	i1___lldiv@quotient+3
 16661  1E4A  3000               	movlw	0
 16662  1E4B  00FB               	movwf	i1___lldiv@quotient+2
 16663  1E4C  3000               	movlw	0
 16664  1E4D  00FA               	movwf	i1___lldiv@quotient+1
 16665  1E4E  3000               	movlw	0
 16666  1E4F  00F9               	movwf	i1___lldiv@quotient
 16667  1E50  0873               	movf	i1___lldiv@divisor+3,w
 16668  1E51  0472               	iorwf	i1___lldiv@divisor+2,w
 16669  1E52  0471               	iorwf	i1___lldiv@divisor+1,w
 16670  1E53  0470               	iorwf	i1___lldiv@divisor,w
 16671  1E54  1903               	skipnz
 16672  1E55  2E91               	goto	i1l4224
 16673  1E56  01FD               	clrf	i1___lldiv@counter
 16674  1E57  0AFD               	incf	i1___lldiv@counter,f
 16675  1E58                     i1l4210:	
 16676  1E58  1BF3               	btfsc	i1___lldiv@divisor+3,7
 16677  1E59  2E66               	goto	i1l4212
 16678  1E5A  3001               	movlw	1
 16679  1E5B                     u455_25:	
 16680  1E5B  35F0               	lslf	i1___lldiv@divisor,f
 16681  1E5C  0DF1               	rlf	i1___lldiv@divisor+1,f
 16682  1E5D  0DF2               	rlf	i1___lldiv@divisor+2,f
 16683  1E5E  0DF3               	rlf	i1___lldiv@divisor+3,f
 16684  1E5F  0B89               	decfsz	9,f
 16685  1E60  2E5B               	goto	u455_25
 16686  1E61  3001               	movlw	1
 16687  1E62  00F8               	movwf	??i1___lldiv
 16688  1E63  0878               	movf	??i1___lldiv,w
 16689  1E64  07FD               	addwf	i1___lldiv@counter,f
 16690  1E65  2E58               	goto	i1l4210
 16691  1E66                     i1l4212:	
 16692  1E66  3001               	movlw	1
 16693  1E67                     u457_25:	
 16694  1E67  35F9               	lslf	i1___lldiv@quotient,f
 16695  1E68  0DFA               	rlf	i1___lldiv@quotient+1,f
 16696  1E69  0DFB               	rlf	i1___lldiv@quotient+2,f
 16697  1E6A  0DFC               	rlf	i1___lldiv@quotient+3,f
 16698  1E6B  0B89               	decfsz	9,f
 16699  1E6C  2E67               	goto	u457_25
 16700  1E6D  0873               	movf	i1___lldiv@divisor+3,w
 16701  1E6E  0277               	subwf	i1___lldiv@dividend+3,w
 16702  1E6F  1D03               	skipz
 16703  1E70  2E7B               	goto	u458_25
 16704  1E71  0872               	movf	i1___lldiv@divisor+2,w
 16705  1E72  0276               	subwf	i1___lldiv@dividend+2,w
 16706  1E73  1D03               	skipz
 16707  1E74  2E7B               	goto	u458_25
 16708  1E75  0871               	movf	i1___lldiv@divisor+1,w
 16709  1E76  0275               	subwf	i1___lldiv@dividend+1,w
 16710  1E77  1D03               	skipz
 16711  1E78  2E7B               	goto	u458_25
 16712  1E79  0870               	movf	i1___lldiv@divisor,w
 16713  1E7A  0274               	subwf	i1___lldiv@dividend,w
 16714  1E7B                     u458_25:	
 16715  1E7B  1C03               	skipc
 16716  1E7C  2E86               	goto	i1l4220
 16717  1E7D  0870               	movf	i1___lldiv@divisor,w
 16718  1E7E  02F4               	subwf	i1___lldiv@dividend,f
 16719  1E7F  0871               	movf	i1___lldiv@divisor+1,w
 16720  1E80  3BF5               	subwfb	i1___lldiv@dividend+1,f
 16721  1E81  0872               	movf	i1___lldiv@divisor+2,w
 16722  1E82  3BF6               	subwfb	i1___lldiv@dividend+2,f
 16723  1E83  0873               	movf	i1___lldiv@divisor+3,w
 16724  1E84  3BF7               	subwfb	i1___lldiv@dividend+3,f
 16725  1E85  1479               	bsf	i1___lldiv@quotient,0
 16726  1E86                     i1l4220:	
 16727  1E86  3001               	movlw	1
 16728  1E87                     u459_25:	
 16729  1E87  36F3               	lsrf	i1___lldiv@divisor+3,f
 16730  1E88  0CF2               	rrf	i1___lldiv@divisor+2,f
 16731  1E89  0CF1               	rrf	i1___lldiv@divisor+1,f
 16732  1E8A  0CF0               	rrf	i1___lldiv@divisor,f
 16733  1E8B  0B89               	decfsz	9,f
 16734  1E8C  2E87               	goto	u459_25
 16735  1E8D  3001               	movlw	1
 16736  1E8E  02FD               	subwf	i1___lldiv@counter,f
 16737  1E8F  1D03               	btfss	3,2
 16738  1E90  2E66               	goto	i1l4212
 16739  1E91                     i1l4224:	
 16740  1E91  087C               	movf	i1___lldiv@quotient+3,w
 16741  1E92  00F3               	movwf	?i1___lldiv+3
 16742  1E93  087B               	movf	i1___lldiv@quotient+2,w
 16743  1E94  00F2               	movwf	?i1___lldiv+2
 16744  1E95  087A               	movf	i1___lldiv@quotient+1,w
 16745  1E96  00F1               	movwf	?i1___lldiv+1
 16746  1E97  0879               	movf	i1___lldiv@quotient,w
 16747  1E98  00F0               	movwf	?i1___lldiv
 16748  1E99  0008               	return
 16749  1E9A                     __end_ofi1___lldiv:	
 16750                           
 16751                           	psect	text64
 16752  1D1D                     __ptext64:	
 16753 ;; *************** function ___llmod *****************
 16754 ;; Defined at:
 16755 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
 16756 ;; Parameters:    Size  Location     Type
 16757 ;;  divisor         4    0[BANK0 ] unsigned long 
 16758 ;;  dividend        4    4[BANK0 ] unsigned long 
 16759 ;; Auto vars:     Size  Location     Type
 16760 ;;  counter         1    9[BANK0 ] unsigned char 
 16761 ;; Return value:  Size  Location     Type
 16762 ;;                  4    0[BANK0 ] unsigned long 
 16763 ;; Registers used:
 16764 ;;		wreg, status,2, status,0
 16765 ;; Tracked objects:
 16766 ;;		On entry : 0/0
 16767 ;;		On exit  : 0/0
 16768 ;;		Unchanged: 0/0
 16769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16770 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16771 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16772 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16773 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16774 ;;Total ram usage:       10 bytes
 16775 ;; Hardware stack levels used:    1
 16776 ;; This function calls:
 16777 ;;		Nothing
 16778 ;; This function is called by:
 16779 ;;		_sprintf
 16780 ;; This function uses a non-reentrant model
 16781 ;;
 16782                           
 16783                           
 16784                           ;psect for function ___llmod
 16785  1D1D                     ___llmod:	
 16786                           
 16787                           ;incstack = 0
 16788                           ; Regs used in ___llmod: [wreg+status,2+status,0]
 16789  1D1D  0020               	movlb	0	; select bank0
 16790  1D1E  0823               	movf	___llmod@divisor+3,w
 16791  1D1F  0422               	iorwf	___llmod@divisor+2,w
 16792  1D20  0421               	iorwf	___llmod@divisor+1,w
 16793  1D21  0420               	iorwf	___llmod@divisor,w
 16794  1D22  1903               	skipnz
 16795  1D23  2D57               	goto	i1l4110
 16796  1D24  01A9               	clrf	___llmod@counter
 16797  1D25  0AA9               	incf	___llmod@counter,f
 16798  1D26                     i1l4100:	
 16799  1D26  1BA3               	btfsc	___llmod@divisor+3,7
 16800  1D27  2D34               	goto	i1l4102
 16801  1D28  3001               	movlw	1
 16802  1D29                     u433_25:	
 16803  1D29  35A0               	lslf	___llmod@divisor,f
 16804  1D2A  0DA1               	rlf	___llmod@divisor+1,f
 16805  1D2B  0DA2               	rlf	___llmod@divisor+2,f
 16806  1D2C  0DA3               	rlf	___llmod@divisor+3,f
 16807  1D2D  0B89               	decfsz	9,f
 16808  1D2E  2D29               	goto	u433_25
 16809  1D2F  3001               	movlw	1
 16810  1D30  00A8               	movwf	??___llmod
 16811  1D31  0828               	movf	??___llmod,w
 16812  1D32  07A9               	addwf	___llmod@counter,f
 16813  1D33  2D26               	goto	i1l4100
 16814  1D34                     i1l4102:	
 16815  1D34  0823               	movf	___llmod@divisor+3,w
 16816  1D35  0227               	subwf	___llmod@dividend+3,w
 16817  1D36  1D03               	skipz
 16818  1D37  2D42               	goto	u435_25
 16819  1D38  0822               	movf	___llmod@divisor+2,w
 16820  1D39  0226               	subwf	___llmod@dividend+2,w
 16821  1D3A  1D03               	skipz
 16822  1D3B  2D42               	goto	u435_25
 16823  1D3C  0821               	movf	___llmod@divisor+1,w
 16824  1D3D  0225               	subwf	___llmod@dividend+1,w
 16825  1D3E  1D03               	skipz
 16826  1D3F  2D42               	goto	u435_25
 16827  1D40  0820               	movf	___llmod@divisor,w
 16828  1D41  0224               	subwf	___llmod@dividend,w
 16829  1D42                     u435_25:	
 16830  1D42  1C03               	skipc
 16831  1D43  2D4C               	goto	i1l4106
 16832  1D44  0820               	movf	___llmod@divisor,w
 16833  1D45  02A4               	subwf	___llmod@dividend,f
 16834  1D46  0821               	movf	___llmod@divisor+1,w
 16835  1D47  3BA5               	subwfb	___llmod@dividend+1,f
 16836  1D48  0822               	movf	___llmod@divisor+2,w
 16837  1D49  3BA6               	subwfb	___llmod@dividend+2,f
 16838  1D4A  0823               	movf	___llmod@divisor+3,w
 16839  1D4B  3BA7               	subwfb	___llmod@dividend+3,f
 16840  1D4C                     i1l4106:	
 16841  1D4C  3001               	movlw	1
 16842  1D4D                     u436_25:	
 16843  1D4D  36A3               	lsrf	___llmod@divisor+3,f
 16844  1D4E  0CA2               	rrf	___llmod@divisor+2,f
 16845  1D4F  0CA1               	rrf	___llmod@divisor+1,f
 16846  1D50  0CA0               	rrf	___llmod@divisor,f
 16847  1D51  0B89               	decfsz	9,f
 16848  1D52  2D4D               	goto	u436_25
 16849  1D53  3001               	movlw	1
 16850  1D54  02A9               	subwf	___llmod@counter,f
 16851  1D55  1D03               	btfss	3,2
 16852  1D56  2D34               	goto	i1l4102
 16853  1D57                     i1l4110:	
 16854  1D57  0827               	movf	___llmod@dividend+3,w
 16855  1D58  00A3               	movwf	?___llmod+3
 16856  1D59  0826               	movf	___llmod@dividend+2,w
 16857  1D5A  00A2               	movwf	?___llmod+2
 16858  1D5B  0825               	movf	___llmod@dividend+1,w
 16859  1D5C  00A1               	movwf	?___llmod+1
 16860  1D5D  0824               	movf	___llmod@dividend,w
 16861  1D5E  00A0               	movwf	?___llmod
 16862  1D5F  0008               	return
 16863  1D60                     __end_of___llmod:	
 16864                           
 16865                           	psect	text65
 16866  11B2                     __ptext65:	
 16867 ;; *************** function _WriteBaud *****************
 16868 ;; Defined at:
 16869 ;;		line 171 in file "FLASH.c"
 16870 ;; Parameters:    Size  Location     Type
 16871 ;;  row             2    0[BANK1 ] unsigned int 
 16872 ;;  Baud            4    2[BANK1 ] unsigned long 
 16873 ;;  Parity          1    6[BANK1 ] unsigned char 
 16874 ;; Auto vars:     Size  Location     Type
 16875 ;;  temp            4   74[BANK0 ] unsigned long 
 16876 ;; Return value:  Size  Location     Type
 16877 ;;		None               void
 16878 ;; Registers used:
 16879 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16880 ;; Tracked objects:
 16881 ;;		On entry : 0/0
 16882 ;;		On exit  : 0/0
 16883 ;;		Unchanged: 0/0
 16884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16885 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 16886 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16887 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
 16888 ;;      Totals:         0       4      15       0       0       0       0       0       0       0       0       0       
      +0       0
 16889 ;;Total ram usage:       19 bytes
 16890 ;; Hardware stack levels used:    1
 16891 ;; Hardware stack levels required when called:    3
 16892 ;; This function calls:
 16893 ;;		_WriteFlash_Sequential
 16894 ;; This function is called by:
 16895 ;;		_SetBaud
 16896 ;; This function uses a non-reentrant model
 16897 ;;
 16898                           
 16899                           
 16900                           ;psect for function _WriteBaud
 16901  11B2                     _WriteBaud:	
 16902                           
 16903                           ;FLASH.c: 173: unsigned long temp;
 16904                           ;FLASH.c: 174: temp = (Baud & 0x000FFFFF) + (((unsigned long) Parity & 0x7) << 20);
 16905                           
 16906                           ;incstack = 0
 16907                           ; Regs used in _WriteBaud: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16908  11B2  0021               	movlb	1	; select bank1
 16909  11B3  0826               	movf	WriteBaud@Parity^(0+128),w
 16910  11B4  3907               	andlw	7
 16911  11B5  00A7               	movwf	??_WriteBaud^(0+128)
 16912  11B6  01A8               	clrf	(??_WriteBaud^(0+128)+1)
 16913  11B7  01A9               	clrf	(??_WriteBaud^(0+128)+2)
 16914  11B8  01AA               	clrf	(??_WriteBaud^(0+128)+3)
 16915  11B9  3014               	movlw	20
 16916  11BA                     u477_25:	
 16917  11BA  35A7               	lslf	??_WriteBaud^(0+128),f
 16918  11BB  0DA8               	rlf	(??_WriteBaud^(0+128)+1),f
 16919  11BC  0DA9               	rlf	(??_WriteBaud^(0+128)+2),f
 16920  11BD  0DAA               	rlf	(??_WriteBaud^(0+128)+3),f
 16921  11BE  0B89               	decfsz	9,f
 16922  11BF  29BA               	goto	u477_25
 16923  11C0  30FF               	movlw	255
 16924  11C1  0522               	andwf	WriteBaud@Baud^(0+128),w
 16925  11C2  00AB               	movwf	(??_WriteBaud+4)^(0+128)
 16926  11C3  30FF               	movlw	255
 16927  11C4  0523               	andwf	(WriteBaud@Baud+1)^(0+128),w
 16928  11C5  00AC               	movwf	((??_WriteBaud+4)^(0+128)+1)
 16929  11C6  300F               	movlw	15
 16930  11C7  0524               	andwf	(WriteBaud@Baud+2)^(0+128),w
 16931  11C8  00AD               	movwf	((??_WriteBaud+4)^(0+128)+2)
 16932  11C9  3000               	movlw	0
 16933  11CA  0525               	andwf	(WriteBaud@Baud+3)^(0+128),w
 16934  11CB  00AE               	movwf	((??_WriteBaud+4)^(0+128)+3)
 16935  11CC  082B               	movf	(??_WriteBaud+4)^(0+128),w
 16936  11CD  07A7               	addwf	??_WriteBaud^(0+128),f
 16937  11CE  082C               	movf	(??_WriteBaud+5)^(0+128),w
 16938  11CF  3DA8               	addwfc	(??_WriteBaud^(0+128)+1),f
 16939  11D0  082D               	movf	(??_WriteBaud+6)^(0+128),w
 16940  11D1  3DA9               	addwfc	(??_WriteBaud^(0+128)+2),f
 16941  11D2  082E               	movf	(??_WriteBaud+7)^(0+128),w
 16942  11D3  3DAA               	addwfc	(??_WriteBaud^(0+128)+3),f
 16943  11D4  082A               	movf	(??_WriteBaud+3)^(0+128),w
 16944  11D5  0020               	movlb	0	; select bank0
 16945  11D6  00ED               	movwf	WriteBaud@temp+3
 16946  11D7  0021               	movlb	1	; select bank1
 16947  11D8  0829               	movf	(??_WriteBaud+2)^(0+128),w
 16948  11D9  0020               	movlb	0	; select bank0
 16949  11DA  00EC               	movwf	WriteBaud@temp+2
 16950  11DB  0021               	movlb	1	; select bank1
 16951  11DC  0828               	movf	(??_WriteBaud+1)^(0+128),w
 16952  11DD  0020               	movlb	0	; select bank0
 16953  11DE  00EB               	movwf	WriteBaud@temp+1
 16954  11DF  0021               	movlb	1	; select bank1
 16955  11E0  0827               	movf	??_WriteBaud^(0+128),w
 16956  11E1  0020               	movlb	0	; select bank0
 16957  11E2  00EA               	movwf	WriteBaud@temp
 16958                           
 16959                           ;FLASH.c: 175: MEM[1] = (unsigned int) (temp & 0x0003FFF);
 16960  11E3  30FF               	movlw	255
 16961  11E4  056A               	andwf	WriteBaud@temp,w
 16962  11E5  0021               	movlb	1	; select bank1
 16963  11E6  00E6               	movwf	(_MEM^(0+128)+2)
 16964  11E7  303F               	movlw	63
 16965  11E8  0020               	movlb	0	; select bank0
 16966  11E9  056B               	andwf	WriteBaud@temp+1,w
 16967  11EA  0021               	movlb	1	; select bank1
 16968  11EB  00E7               	movwf	((_MEM+1)^(0+128)+2)
 16969                           
 16970                           ;FLASH.c: 176: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
 16971  11EC  0020               	movlb	0	; select bank0
 16972  11ED  086A               	movf	WriteBaud@temp,w
 16973  11EE  0021               	movlb	1	; select bank1
 16974  11EF  00A7               	movwf	??_WriteBaud^(0+128)
 16975  11F0  0020               	movlb	0	; select bank0
 16976  11F1  086B               	movf	WriteBaud@temp+1,w
 16977  11F2  0021               	movlb	1	; select bank1
 16978  11F3  00A8               	movwf	(??_WriteBaud^(0+128)+1)
 16979  11F4  0020               	movlb	0	; select bank0
 16980  11F5  086C               	movf	WriteBaud@temp+2,w
 16981  11F6  0021               	movlb	1	; select bank1
 16982  11F7  00A9               	movwf	(??_WriteBaud^(0+128)+2)
 16983  11F8  0020               	movlb	0	; select bank0
 16984  11F9  086D               	movf	WriteBaud@temp+3,w
 16985  11FA  0021               	movlb	1	; select bank1
 16986  11FB  00AA               	movwf	(??_WriteBaud^(0+128)+3)
 16987  11FC  300E               	movlw	14
 16988  11FD                     u478_25:	
 16989  11FD  36AA               	lsrf	(??_WriteBaud^(0+128)+3),f
 16990  11FE  0CA9               	rrf	(??_WriteBaud^(0+128)+2),f
 16991  11FF  0CA8               	rrf	(??_WriteBaud^(0+128)+1),f
 16992  1200  0CA7               	rrf	??_WriteBaud^(0+128),f
 16993  1201  0B89               	decfsz	9,f
 16994  1202  29FD               	goto	u478_25
 16995  1203  30FF               	movlw	255
 16996  1204  0527               	andwf	??_WriteBaud^(0+128),w
 16997  1205  00E4               	movwf	_MEM^(0+128)
 16998  1206  303F               	movlw	63
 16999  1207  0528               	andwf	(??_WriteBaud+1)^(0+128),w
 17000  1208  00E5               	movwf	(_MEM+1)^(0+128)
 17001                           
 17002                           ;FLASH.c: 177: WriteFlash_Sequential(row, MEM, 2);
 17003  1209  0821               	movf	(WriteBaud@row+1)^(0+128),w
 17004  120A  00FB               	movwf	WriteFlash_Sequential@row+1
 17005  120B  0820               	movf	WriteBaud@row^(0+128),w
 17006  120C  00FA               	movwf	WriteFlash_Sequential@row
 17007  120D  30E4               	movlw	(low (_MEM| 0))& (0+255)
 17008  120E  00A7               	movwf	??_WriteBaud^(0+128)
 17009  120F  0827               	movf	??_WriteBaud^(0+128),w
 17010  1210  00FC               	movwf	WriteFlash_Sequential@buffer
 17011  1211  3002               	movlw	2
 17012  1212  00A8               	movwf	(??_WriteBaud+1)^(0+128)
 17013  1213  0828               	movf	(??_WriteBaud+1)^(0+128),w
 17014  1214  00FD               	movwf	WriteFlash_Sequential@amount
 17015  1215  3193  2375         	fcall	_WriteFlash_Sequential
 17016  1217  0008               	return
 17017  1218                     __end_of_WriteBaud:	
 17018                           
 17019                           	psect	text66
 17020  1375                     __ptext66:	
 17021 ;; *************** function _WriteFlash_Sequential *****************
 17022 ;; Defined at:
 17023 ;;		line 112 in file "FLASH.c"
 17024 ;; Parameters:    Size  Location     Type
 17025 ;;  row             2   10[COMMON] unsigned int 
 17026 ;;  buffer          1   12[COMMON] PTR unsigned int 
 17027 ;;		 -> MEM(4), 
 17028 ;;  amount          1   13[COMMON] unsigned char 
 17029 ;; Auto vars:     Size  Location     Type
 17030 ;;  TempBufL       32   35[BANK0 ] unsigned char [32]
 17031 ;;  TempBufH       32    3[BANK0 ] unsigned char [32]
 17032 ;;  temp            2   70[BANK0 ] unsigned int 
 17033 ;;  i               1   73[BANK0 ] unsigned char 
 17034 ;;  spaces          1   72[BANK0 ] unsigned char 
 17035 ;;  amountTemp      1   69[BANK0 ] unsigned char 
 17036 ;;  tempL           1   68[BANK0 ] unsigned char 
 17037 ;;  tempH           1   67[BANK0 ] unsigned char 
 17038 ;; Return value:  Size  Location     Type
 17039 ;;		None               void
 17040 ;; Registers used:
 17041 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17042 ;; Tracked objects:
 17043 ;;		On entry : 0/0
 17044 ;;		On exit  : 0/0
 17045 ;;		Unchanged: 0/0
 17046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17047 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17048 ;;      Locals:         0      71       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17049 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17050 ;;      Totals:         4      74       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17051 ;;Total ram usage:       78 bytes
 17052 ;; Hardware stack levels used:    1
 17053 ;; Hardware stack levels required when called:    2
 17054 ;; This function calls:
 17055 ;;		_BlockErase
 17056 ;;		_UNLOCK
 17057 ;;		i1_ReadFlash_2Byte
 17058 ;;		i1_delayUS
 17059 ;; This function is called by:
 17060 ;;		_WriteBaud
 17061 ;; This function uses a non-reentrant model
 17062 ;;
 17063                           
 17064                           
 17065                           ;psect for function _WriteFlash_Sequential
 17066  1375                     _WriteFlash_Sequential:	
 17067                           
 17068                           ;FLASH.c: 114: unsigned char spaces = 32;
 17069                           
 17070                           ;incstack = 0
 17071                           ; Regs used in _WriteFlash_Sequential: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 17072  1375  3020               	movlw	32
 17073  1376  0020               	movlb	0	; select bank0
 17074  1377  00A0               	movwf	??_WriteFlash_Sequential
 17075  1378  0820               	movf	??_WriteFlash_Sequential,w
 17076  1379  00E8               	movwf	WriteFlash_Sequential@spaces
 17077                           
 17078                           ;FLASH.c: 115: unsigned char tempH;
 17079                           ;FLASH.c: 116: unsigned char tempL;
 17080                           ;FLASH.c: 117: unsigned char i;
 17081                           ;FLASH.c: 118: unsigned int temp;
 17082                           ;FLASH.c: 119: unsigned char amountTemp =0;
 17083  137A  01E5               	clrf	WriteFlash_Sequential@amountTemp
 17084                           
 17085                           ;FLASH.c: 120: unsigned char TempBufH[32];
 17086                           ;FLASH.c: 121: unsigned char TempBufL[32];
 17087                           ;FLASH.c: 123: for(i=0;i<spaces;i++)
 17088  137B  01E9               	clrf	WriteFlash_Sequential@i
 17089  137C                     i1l4056:	
 17090  137C  0868               	movf	WriteFlash_Sequential@spaces,w
 17091  137D  0269               	subwf	WriteFlash_Sequential@i,w
 17092  137E  1803               	btfsc	3,0
 17093  137F  2BCE               	goto	i1l4058
 17094                           
 17095                           ;FLASH.c: 124: {
 17096                           ;FLASH.c: 125: amountTemp++;
 17097  1380  3001               	movlw	1
 17098  1381  00A0               	movwf	??_WriteFlash_Sequential
 17099  1382  0820               	movf	??_WriteFlash_Sequential,w
 17100  1383  07E5               	addwf	WriteFlash_Sequential@amountTemp,f
 17101                           
 17102                           ;FLASH.c: 126: if(amountTemp <= amount)
 17103  1384  0865               	movf	WriteFlash_Sequential@amountTemp,w
 17104  1385  027D               	subwf	WriteFlash_Sequential@amount,w
 17105  1386  1C03               	skipc
 17106  1387  2BA0               	goto	i1l4044
 17107                           
 17108                           ;FLASH.c: 127: {
 17109                           ;FLASH.c: 128: tempH = (unsigned char)((*buffer & 0x3F00) >> 8);
 17110  1388  087C               	movf	WriteFlash_Sequential@buffer,w
 17111  1389  0086               	movwf	6
 17112  138A  0187               	clrf	7
 17113  138B  3F40               	moviw [0]fsr1
 17114  138C  00A0               	movwf	??_WriteFlash_Sequential
 17115  138D  3F41               	moviw [1]fsr1
 17116  138E  00A1               	movwf	??_WriteFlash_Sequential+1
 17117  138F  0821               	movf	??_WriteFlash_Sequential+1,w
 17118  1390  393F               	andlw	63
 17119  1391  00A2               	movwf	??_WriteFlash_Sequential+2
 17120  1392  0822               	movf	??_WriteFlash_Sequential+2,w
 17121  1393  00E3               	movwf	WriteFlash_Sequential@tempH
 17122                           
 17123                           ;FLASH.c: 129: tempL = (unsigned char)(*buffer & 0x00FF);
 17124  1394  087C               	movf	WriteFlash_Sequential@buffer,w
 17125  1395  0086               	movwf	6
 17126  1396  0187               	clrf	7
 17127  1397  0801               	movf	1,w
 17128  1398  00A0               	movwf	??_WriteFlash_Sequential
 17129  1399  0820               	movf	??_WriteFlash_Sequential,w
 17130  139A  00E4               	movwf	WriteFlash_Sequential@tempL
 17131                           
 17132                           ;FLASH.c: 130: buffer++;
 17133  139B  3002               	movlw	2
 17134  139C  00A0               	movwf	??_WriteFlash_Sequential
 17135  139D  0820               	movf	??_WriteFlash_Sequential,w
 17136  139E  07FC               	addwf	WriteFlash_Sequential@buffer,f
 17137                           
 17138                           ;FLASH.c: 131: }
 17139  139F  2BB9               	goto	i1l4050
 17140  13A0                     i1l4044:	
 17141                           
 17142                           ;FLASH.c: 132: else
 17143                           ;FLASH.c: 133: {
 17144                           ;FLASH.c: 135: temp = ReadFlash_2Byte(row, i);
 17145  13A0  087B               	movf	WriteFlash_Sequential@row+1,w
 17146  13A1  00F1               	movwf	i1ReadFlash_2Byte@row+1
 17147  13A2  087A               	movf	WriteFlash_Sequential@row,w
 17148  13A3  00F0               	movwf	i1ReadFlash_2Byte@row
 17149  13A4  0869               	movf	WriteFlash_Sequential@i,w
 17150  13A5  00A0               	movwf	??_WriteFlash_Sequential
 17151  13A6  0820               	movf	??_WriteFlash_Sequential,w
 17152  13A7  00F2               	movwf	i1ReadFlash_2Byte@column
 17153  13A8  3199  21EE  3193   	fcall	i1_ReadFlash_2Byte
 17154  13AB  0871               	movf	?i1_ReadFlash_2Byte+1,w
 17155  13AC  0020               	movlb	0	; select bank0
 17156  13AD  00E7               	movwf	WriteFlash_Sequential@temp+1
 17157  13AE  0870               	movf	?i1_ReadFlash_2Byte,w
 17158  13AF  00E6               	movwf	WriteFlash_Sequential@temp
 17159                           
 17160                           ;FLASH.c: 136: tempH = (unsigned char)((temp & 0x3F00) >>8);
 17161  13B0  0867               	movf	WriteFlash_Sequential@temp+1,w
 17162  13B1  393F               	andlw	63
 17163  13B2  00A0               	movwf	??_WriteFlash_Sequential
 17164  13B3  0820               	movf	??_WriteFlash_Sequential,w
 17165  13B4  00E3               	movwf	WriteFlash_Sequential@tempH
 17166                           
 17167                           ;FLASH.c: 137: tempL = (unsigned char)(temp & 0x00FF);
 17168  13B5  0866               	movf	WriteFlash_Sequential@temp,w
 17169  13B6  00A0               	movwf	??_WriteFlash_Sequential
 17170  13B7  0820               	movf	??_WriteFlash_Sequential,w
 17171  13B8  00E4               	movwf	WriteFlash_Sequential@tempL
 17172  13B9                     i1l4050:	
 17173                           
 17174                           ;FLASH.c: 138: }
 17175                           ;FLASH.c: 139: TempBufH[i] = tempH;
 17176  13B9  0863               	movf	WriteFlash_Sequential@tempH,w
 17177  13BA  00A0               	movwf	??_WriteFlash_Sequential
 17178  13BB  0869               	movf	WriteFlash_Sequential@i,w
 17179  13BC  3E23               	addlw	(low (WriteFlash_Sequential@TempBufH| 0))& (0+255)
 17180  13BD  0086               	movwf	6
 17181  13BE  0187               	clrf	7
 17182  13BF  0820               	movf	??_WriteFlash_Sequential,w
 17183  13C0  0081               	movwf	1
 17184                           
 17185                           ;FLASH.c: 140: TempBufL[i] = tempL;
 17186  13C1  0864               	movf	WriteFlash_Sequential@tempL,w
 17187  13C2  00A0               	movwf	??_WriteFlash_Sequential
 17188  13C3  0869               	movf	WriteFlash_Sequential@i,w
 17189  13C4  3E43               	addlw	(low (WriteFlash_Sequential@TempBufL| 0))& (0+255)
 17190  13C5  0086               	movwf	6
 17191  13C6  0187               	clrf	7
 17192  13C7  0820               	movf	??_WriteFlash_Sequential,w
 17193  13C8  0081               	movwf	1
 17194  13C9  3001               	movlw	1
 17195  13CA  00A0               	movwf	??_WriteFlash_Sequential
 17196  13CB  0820               	movf	??_WriteFlash_Sequential,w
 17197  13CC  07E9               	addwf	WriteFlash_Sequential@i,f
 17198  13CD  2B7C               	goto	i1l4056
 17199  13CE                     i1l4058:	
 17200                           
 17201                           ;FLASH.c: 141: }
 17202                           ;FLASH.c: 142: BlockErase(row);
 17203  13CE  087B               	movf	WriteFlash_Sequential@row+1,w
 17204  13CF  00F1               	movwf	BlockErase@row+1
 17205  13D0  087A               	movf	WriteFlash_Sequential@row,w
 17206  13D1  00F0               	movwf	BlockErase@row
 17207  13D2  319A  2216  3193   	fcall	_BlockErase
 17208                           
 17209                           ;FLASH.c: 143: delayUS(1000);
 17210  13D5  3000               	movlw	0
 17211  13D6  00F3               	movwf	i1delayUS@US+3
 17212  13D7  3000               	movlw	0
 17213  13D8  00F2               	movwf	i1delayUS@US+2
 17214  13D9  3003               	movlw	3
 17215  13DA  00F1               	movwf	i1delayUS@US+1
 17216  13DB  30E8               	movlw	232
 17217  13DC  00F0               	movwf	i1delayUS@US
 17218  13DD  319B  23B5  3193   	fcall	i1_delayUS
 17219                           
 17220                           ;FLASH.c: 144: INTCON &= ~0x80;
 17221  13E0  307F               	movlw	127
 17222  13E1  0020               	movlb	0	; select bank0
 17223  13E2  00A0               	movwf	??_WriteFlash_Sequential
 17224  13E3  0820               	movf	??_WriteFlash_Sequential,w
 17225  13E4  058B               	andwf	11,f	;volatile
 17226                           
 17227                           ;FLASH.c: 145: PMCON1 |= 0b00000100;
 17228  13E5  0023               	movlb	3	; select bank3
 17229  13E6  1515               	bsf	21,2	;volatile
 17230                           
 17231                           ;FLASH.c: 146: PMCON1 &= ~0b01000000;
 17232  13E7  30BF               	movlw	191
 17233  13E8  0020               	movlb	0	; select bank0
 17234  13E9  00A0               	movwf	??_WriteFlash_Sequential
 17235  13EA  0820               	movf	??_WriteFlash_Sequential,w
 17236  13EB  0023               	movlb	3	; select bank3
 17237  13EC  0595               	andwf	21,f	;volatile
 17238                           
 17239                           ;FLASH.c: 147: PMCON1 &= ~0b00100000;
 17240  13ED  30DF               	movlw	223
 17241  13EE  0020               	movlb	0	; select bank0
 17242  13EF  00A0               	movwf	??_WriteFlash_Sequential
 17243  13F0  0820               	movf	??_WriteFlash_Sequential,w
 17244  13F1  0023               	movlb	3	; select bank3
 17245  13F2  0595               	andwf	21,f	;volatile
 17246                           
 17247                           ;FLASH.c: 148: PMCON1 &= ~0b00010000;
 17248  13F3  30EF               	movlw	239
 17249  13F4  0020               	movlb	0	; select bank0
 17250  13F5  00A0               	movwf	??_WriteFlash_Sequential
 17251  13F6  0820               	movf	??_WriteFlash_Sequential,w
 17252  13F7  0023               	movlb	3	; select bank3
 17253  13F8  0595               	andwf	21,f	;volatile
 17254                           
 17255                           ;FLASH.c: 149: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 17256  13F9  087B               	movf	WriteFlash_Sequential@row+1,w
 17257  13FA  0020               	movlb	0	; select bank0
 17258  13FB  00A1               	movwf	??_WriteFlash_Sequential+1
 17259  13FC  087A               	movf	WriteFlash_Sequential@row,w
 17260  13FD  00A0               	movwf	??_WriteFlash_Sequential
 17261  13FE  36A1               	lsrf	??_WriteFlash_Sequential+1,f
 17262  13FF  0CA0               	rrf	??_WriteFlash_Sequential,f
 17263  1400  36A1               	lsrf	??_WriteFlash_Sequential+1,f
 17264  1401  0CA0               	rrf	??_WriteFlash_Sequential,f
 17265  1402  36A1               	lsrf	??_WriteFlash_Sequential+1,f
 17266  1403  0CA0               	rrf	??_WriteFlash_Sequential,f
 17267  1404  0820               	movf	??_WriteFlash_Sequential,w
 17268  1405  397F               	andlw	127
 17269  1406  0023               	movlb	3	; select bank3
 17270  1407  0092               	movwf	18	;volatile
 17271                           
 17272                           ;FLASH.c: 150: PMADRL = (unsigned char)((row & 0x007) << 5);
 17273  1408  087A               	movf	WriteFlash_Sequential@row,w
 17274  1409  3907               	andlw	7
 17275  140A  0020               	movlb	0	; select bank0
 17276  140B  00A0               	movwf	??_WriteFlash_Sequential
 17277  140C  3004               	movlw	4
 17278  140D                     u430_25:	
 17279  140D  35A0               	lslf	??_WriteFlash_Sequential,f
 17280  140E  3EFF               	addlw	-1
 17281  140F  1D03               	skipz
 17282  1410  2C0D               	goto	u430_25
 17283  1411  3520               	lslf	??_WriteFlash_Sequential,w
 17284  1412  0023               	movlb	3	; select bank3
 17285  1413  0091               	movwf	17	;volatile
 17286                           
 17287                           ;FLASH.c: 152: for(i=0;i<spaces;i++)
 17288  1414  0020               	movlb	0	; select bank0
 17289  1415  01E9               	clrf	WriteFlash_Sequential@i
 17290  1416                     i1l4088:	
 17291  1416  0868               	movf	WriteFlash_Sequential@spaces,w
 17292  1417  0269               	subwf	WriteFlash_Sequential@i,w
 17293  1418  1803               	btfsc	3,0
 17294  1419  2C3A               	goto	i1l4090
 17295                           
 17296                           ;FLASH.c: 153: {
 17297                           ;FLASH.c: 154: PMDATH = TempBufH[i];
 17298  141A  0869               	movf	WriteFlash_Sequential@i,w
 17299  141B  3E23               	addlw	(low (WriteFlash_Sequential@TempBufH| 0))& (0+255)
 17300  141C  0086               	movwf	6
 17301  141D  0187               	clrf	7
 17302  141E  0801               	movf	1,w
 17303  141F  0023               	movlb	3	; select bank3
 17304  1420  0094               	movwf	20	;volatile
 17305                           
 17306                           ;FLASH.c: 155: PMDATL = TempBufL[i];
 17307  1421  0020               	movlb	0	; select bank0
 17308  1422  0869               	movf	WriteFlash_Sequential@i,w
 17309  1423  3E43               	addlw	(low (WriteFlash_Sequential@TempBufL| 0))& (0+255)
 17310  1424  0086               	movwf	6
 17311  1425  0187               	clrf	7
 17312  1426  0801               	movf	1,w
 17313  1427  0023               	movlb	3	; select bank3
 17314  1428  0093               	movwf	19	;volatile
 17315                           
 17316                           ;FLASH.c: 156: __nop();
 17317  1429  0000               	nop
 17318                           
 17319                           ;FLASH.c: 157: __nop();
 17320  142A  0000               	nop
 17321                           
 17322                           ;FLASH.c: 158: UNLOCK();
 17323  142B  3198  209A  3193   	fcall	_UNLOCK
 17324                           
 17325                           ;FLASH.c: 159: PMADRL++;
 17326  142E  3001               	movlw	1
 17327  142F  0020               	movlb	0	; select bank0
 17328  1430  00A0               	movwf	??_WriteFlash_Sequential
 17329  1431  0820               	movf	??_WriteFlash_Sequential,w
 17330  1432  0023               	movlb	3	; select bank3
 17331  1433  0791               	addwf	17,f	;volatile
 17332  1434  3001               	movlw	1
 17333  1435  0020               	movlb	0	; select bank0
 17334  1436  00A0               	movwf	??_WriteFlash_Sequential
 17335  1437  0820               	movf	??_WriteFlash_Sequential,w
 17336  1438  07E9               	addwf	WriteFlash_Sequential@i,f
 17337  1439  2C16               	goto	i1l4088
 17338  143A                     i1l4090:	
 17339                           
 17340                           ;FLASH.c: 161: }
 17341                           ;FLASH.c: 162: PMCON1 &= ~0b00000100;
 17342  143A  30FB               	movlw	251
 17343  143B  00A0               	movwf	??_WriteFlash_Sequential
 17344  143C  0820               	movf	??_WriteFlash_Sequential,w
 17345  143D  0023               	movlb	3	; select bank3
 17346  143E  0595               	andwf	21,f	;volatile
 17347                           
 17348                           ;FLASH.c: 163: INTCON |= 0x80;
 17349  143F  178B               	bsf	11,7	;volatile
 17350  1440  0008               	return
 17351  1441                     __end_of_WriteFlash_Sequential:	
 17352                           
 17353                           	psect	text67
 17354  1BB5                     __ptext67:	
 17355 ;; *************** function i1_delayUS *****************
 17356 ;; Defined at:
 17357 ;;		line 51 in file "MISC.c"
 17358 ;; Parameters:    Size  Location     Type
 17359 ;;  US              4    0[COMMON] long 
 17360 ;; Auto vars:     Size  Location     Type
 17361 ;;  delayUS         4    5[COMMON] long 
 17362 ;;  delayUS         1    9[COMMON] unsigned char 
 17363 ;; Return value:  Size  Location     Type
 17364 ;;		None               void
 17365 ;; Registers used:
 17366 ;;		wreg, status,2, status,0
 17367 ;; Tracked objects:
 17368 ;;		On entry : 0/0
 17369 ;;		On exit  : 0/0
 17370 ;;		Unchanged: 0/0
 17371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17372 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17373 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17374 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17375 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17376 ;;Total ram usage:       10 bytes
 17377 ;; Hardware stack levels used:    1
 17378 ;; This function calls:
 17379 ;;		Nothing
 17380 ;; This function is called by:
 17381 ;;		_UART_send_break_timed
 17382 ;;		_SetBaud
 17383 ;;		_Process_PS2_ScanCode
 17384 ;;		_WriteFlash_Sequential
 17385 ;;		i1_UARTstringWAIT
 17386 ;;		i1_Send_PS2
 17387 ;; This function uses a non-reentrant model
 17388 ;;
 17389                           
 17390                           
 17391                           ;psect for function i1_delayUS
 17392  1BB5                     i1_delayUS:	
 17393                           
 17394                           ;MISC.c: 53: long i;
 17395                           ;MISC.c: 54: unsigned char j;
 17396                           ;MISC.c: 55: for(i=0;i<US;i+=6)
 17397                           
 17398                           ;incstack = 0
 17399                           ; Regs used in i1_delayUS: [wreg+status,2+status,0]
 17400  1BB5  3000               	movlw	0
 17401  1BB6  00F8               	movwf	i1delayUS@i+3
 17402  1BB7  3000               	movlw	0
 17403  1BB8  00F7               	movwf	i1delayUS@i+2
 17404  1BB9  3000               	movlw	0
 17405  1BBA  00F6               	movwf	i1delayUS@i+1
 17406  1BBB  3000               	movlw	0
 17407  1BBC  00F5               	movwf	i1delayUS@i
 17408  1BBD                     i1l284:	
 17409  1BBD  0878               	movf	i1delayUS@i+3,w
 17410  1BBE  3A80               	xorlw	128
 17411  1BBF  00F4               	movwf	??i1_delayUS
 17412  1BC0  0873               	movf	i1delayUS@US+3,w
 17413  1BC1  3A80               	xorlw	128
 17414  1BC2  0274               	subwf	??i1_delayUS,w
 17415  1BC3  1D03               	skipz
 17416  1BC4  2BCF               	goto	u401_23
 17417  1BC5  0872               	movf	i1delayUS@US+2,w
 17418  1BC6  0277               	subwf	i1delayUS@i+2,w
 17419  1BC7  1D03               	skipz
 17420  1BC8  2BCF               	goto	u401_23
 17421  1BC9  0871               	movf	i1delayUS@US+1,w
 17422  1BCA  0276               	subwf	i1delayUS@i+1,w
 17423  1BCB  1D03               	skipz
 17424  1BCC  2BCF               	goto	u401_23
 17425  1BCD  0870               	movf	i1delayUS@US,w
 17426  1BCE  0275               	subwf	i1delayUS@i,w
 17427  1BCF                     u401_23:	
 17428  1BCF  1803               	btfsc	3,0
 17429  1BD0  0008               	return
 17430                           
 17431                           ;MISC.c: 56: {
 17432                           ;MISC.c: 57: for(j=0;j<32;j++)
 17433  1BD1  01F9               	clrf	i1delayUS@j
 17434  1BD2  3020               	movlw	32
 17435  1BD3  0279               	subwf	i1delayUS@j,w
 17436  1BD4  1803               	btfsc	3,0
 17437  1BD5  2BDF               	goto	i1l3896
 17438  1BD6                     i1l286:	
 17439                           
 17440                           ;MISC.c: 58: {
 17441                           ;MISC.c: 59: __nop();
 17442  1BD6  0000               	nop
 17443  1BD7  3001               	movlw	1
 17444  1BD8  00F4               	movwf	??i1_delayUS
 17445  1BD9  0874               	movf	??i1_delayUS,w
 17446  1BDA  07F9               	addwf	i1delayUS@j,f
 17447  1BDB  3020               	movlw	32
 17448  1BDC  0279               	subwf	i1delayUS@j,w
 17449  1BDD  1C03               	skipc
 17450  1BDE  2BD6               	goto	i1l286
 17451  1BDF                     i1l3896:	
 17452  1BDF  3006               	movlw	6
 17453  1BE0  07F5               	addwf	i1delayUS@i,f
 17454  1BE1  3000               	movlw	0
 17455  1BE2  3DF6               	addwfc	i1delayUS@i+1,f
 17456  1BE3  3000               	movlw	0
 17457  1BE4  3DF7               	addwfc	i1delayUS@i+2,f
 17458  1BE5  3000               	movlw	0
 17459  1BE6  3DF8               	addwfc	i1delayUS@i+3,f
 17460  1BE7  2BBD               	goto	i1l284
 17461  1BE8                     __end_ofi1_delayUS:	
 17462                           
 17463                           	psect	text68
 17464  19EE                     __ptext68:	
 17465 ;; *************** function i1_ReadFlash_2Byte *****************
 17466 ;; Defined at:
 17467 ;;		line 43 in file "FLASH.c"
 17468 ;; Parameters:    Size  Location     Type
 17469 ;;  row             2    0[COMMON] unsigned int 
 17470 ;;  column          1    2[COMMON] unsigned char 
 17471 ;; Auto vars:     Size  Location     Type
 17472 ;;		None
 17473 ;; Return value:  Size  Location     Type
 17474 ;;                  2    0[COMMON] unsigned int 
 17475 ;; Registers used:
 17476 ;;		wreg, status,2, status,0
 17477 ;; Tracked objects:
 17478 ;;		On entry : 0/0
 17479 ;;		On exit  : 0/0
 17480 ;;		Unchanged: 0/0
 17481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17482 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17484 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17485 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17486 ;;Total ram usage:        5 bytes
 17487 ;; Hardware stack levels used:    1
 17488 ;; This function calls:
 17489 ;;		Nothing
 17490 ;; This function is called by:
 17491 ;;		_WriteFlash_Sequential
 17492 ;;		i1_ReadFlash_4Byte
 17493 ;; This function uses a non-reentrant model
 17494 ;;
 17495                           
 17496                           
 17497                           ;psect for function i1_ReadFlash_2Byte
 17498  19EE                     i1_ReadFlash_2Byte:	
 17499                           
 17500                           ;FLASH.c: 45: PMCON1 &= ~0b01000000;
 17501                           
 17502                           ;incstack = 0
 17503                           ; Regs used in i1_ReadFlash_2Byte: [wreg+status,2+status,0]
 17504  19EE  30BF               	movlw	191
 17505  19EF  00F3               	movwf	??i1_ReadFlash_2Byte
 17506  19F0  0873               	movf	??i1_ReadFlash_2Byte,w
 17507  19F1  0023               	movlb	3	; select bank3
 17508  19F2  0595               	andwf	21,f	;volatile
 17509                           
 17510                           ;FLASH.c: 46: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 17511  19F3  0871               	movf	i1ReadFlash_2Byte@row+1,w
 17512  19F4  00F4               	movwf	??i1_ReadFlash_2Byte+1
 17513  19F5  0870               	movf	i1ReadFlash_2Byte@row,w
 17514  19F6  00F3               	movwf	??i1_ReadFlash_2Byte
 17515  19F7  36F4               	lsrf	??i1_ReadFlash_2Byte+1,f
 17516  19F8  0CF3               	rrf	??i1_ReadFlash_2Byte,f
 17517  19F9  36F4               	lsrf	??i1_ReadFlash_2Byte+1,f
 17518  19FA  0CF3               	rrf	??i1_ReadFlash_2Byte,f
 17519  19FB  36F4               	lsrf	??i1_ReadFlash_2Byte+1,f
 17520  19FC  0CF3               	rrf	??i1_ReadFlash_2Byte,f
 17521  19FD  0873               	movf	??i1_ReadFlash_2Byte,w
 17522  19FE  397F               	andlw	127
 17523  19FF  0092               	movwf	18	;volatile
 17524                           
 17525                           ;FLASH.c: 47: PMADRL = (unsigned char)(((row & 0x007) << 5) + column);
 17526  1A00  0870               	movf	i1ReadFlash_2Byte@row,w
 17527  1A01  3907               	andlw	7
 17528  1A02  00F3               	movwf	??i1_ReadFlash_2Byte
 17529  1A03  3004               	movlw	4
 17530  1A04                     u409_25:	
 17531  1A04  35F3               	lslf	??i1_ReadFlash_2Byte,f
 17532  1A05  3EFF               	addlw	-1
 17533  1A06  1D03               	skipz
 17534  1A07  2A04               	goto	u409_25
 17535  1A08  3573               	lslf	??i1_ReadFlash_2Byte,w
 17536  1A09  0772               	addwf	i1ReadFlash_2Byte@column,w
 17537  1A0A  0091               	movwf	17	;volatile
 17538                           
 17539                           ;FLASH.c: 48: PMCON1 |= 0b00000001;
 17540  1A0B  1415               	bsf	21,0	;volatile
 17541  1A0C                     i1l956:	
 17542                           ;FLASH.c: 49: while(PMCON1 & 0b00000001);
 17543                           
 17544  1A0C  1815               	btfsc	21,0	;volatile
 17545  1A0D  2A0C               	goto	i1l956
 17546                           
 17547                           ;FLASH.c: 50: __nop();
 17548  1A0E  0000               	nop
 17549                           
 17550                           ;FLASH.c: 51: __nop();
 17551  1A0F  0000               	nop
 17552                           
 17553                           ;FLASH.c: 52: return (PMDATL | (PMDATH << 8));
 17554  1A10  0023               	movlb	3	; select bank3
 17555  1A11  0814               	movf	20,w	;volatile
 17556  1A12  00F1               	movwf	?i1_ReadFlash_2Byte+1
 17557  1A13  0813               	movf	19,w	;volatile
 17558  1A14  00F0               	movwf	?i1_ReadFlash_2Byte
 17559  1A15  0008               	return
 17560  1A16                     __end_ofi1_ReadFlash_2Byte:	
 17561                           
 17562                           	psect	text69
 17563  1A16                     __ptext69:	
 17564 ;; *************** function _BlockErase *****************
 17565 ;; Defined at:
 17566 ;;		line 91 in file "FLASH.c"
 17567 ;; Parameters:    Size  Location     Type
 17568 ;;  row             2    0[COMMON] unsigned int 
 17569 ;; Auto vars:     Size  Location     Type
 17570 ;;		None
 17571 ;; Return value:  Size  Location     Type
 17572 ;;		None               void
 17573 ;; Registers used:
 17574 ;;		wreg, status,2, status,0, pclath, cstack
 17575 ;; Tracked objects:
 17576 ;;		On entry : 0/0
 17577 ;;		On exit  : 0/0
 17578 ;;		Unchanged: 0/0
 17579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17580 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17582 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17583 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17584 ;;Total ram usage:        4 bytes
 17585 ;; Hardware stack levels used:    1
 17586 ;; Hardware stack levels required when called:    1
 17587 ;; This function calls:
 17588 ;;		_UNLOCK
 17589 ;; This function is called by:
 17590 ;;		_WriteFlash_Sequential
 17591 ;; This function uses a non-reentrant model
 17592 ;;
 17593                           
 17594                           
 17595                           ;psect for function _BlockErase
 17596  1A16                     _BlockErase:	
 17597                           
 17598                           ;FLASH.c: 93: INTCON &= ~0x80;
 17599                           
 17600                           ;incstack = 0
 17601                           ; Regs used in _BlockErase: [wreg+status,2+status,0+pclath+cstack]
 17602  1A16  307F               	movlw	127
 17603  1A17  00F2               	movwf	??_BlockErase
 17604  1A18  0872               	movf	??_BlockErase,w
 17605  1A19  058B               	andwf	11,f	;volatile
 17606                           
 17607                           ;FLASH.c: 94: PMCON1 &= ~0b01000000;
 17608  1A1A  30BF               	movlw	191
 17609  1A1B  00F2               	movwf	??_BlockErase
 17610  1A1C  0872               	movf	??_BlockErase,w
 17611  1A1D  0023               	movlb	3	; select bank3
 17612  1A1E  0595               	andwf	21,f	;volatile
 17613                           
 17614                           ;FLASH.c: 95: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 17615  1A1F  0871               	movf	BlockErase@row+1,w
 17616  1A20  00F3               	movwf	??_BlockErase+1
 17617  1A21  0870               	movf	BlockErase@row,w
 17618  1A22  00F2               	movwf	??_BlockErase
 17619  1A23  36F3               	lsrf	??_BlockErase+1,f
 17620  1A24  0CF2               	rrf	??_BlockErase,f
 17621  1A25  36F3               	lsrf	??_BlockErase+1,f
 17622  1A26  0CF2               	rrf	??_BlockErase,f
 17623  1A27  36F3               	lsrf	??_BlockErase+1,f
 17624  1A28  0CF2               	rrf	??_BlockErase,f
 17625  1A29  0872               	movf	??_BlockErase,w
 17626  1A2A  397F               	andlw	127
 17627  1A2B  0092               	movwf	18	;volatile
 17628                           
 17629                           ;FLASH.c: 96: PMADRL = (unsigned char)((row & 0x007) << 5);
 17630  1A2C  0870               	movf	BlockErase@row,w
 17631  1A2D  3907               	andlw	7
 17632  1A2E  00F2               	movwf	??_BlockErase
 17633  1A2F  3004               	movlw	4
 17634  1A30                     u398_25:	
 17635  1A30  35F2               	lslf	??_BlockErase,f
 17636  1A31  3EFF               	addlw	-1
 17637  1A32  1D03               	skipz
 17638  1A33  2A30               	goto	u398_25
 17639  1A34  3572               	lslf	??_BlockErase,w
 17640  1A35  0091               	movwf	17	;volatile
 17641                           
 17642                           ;FLASH.c: 97: PMCON1 |= 0b00010000;
 17643  1A36  1615               	bsf	21,4	;volatile
 17644                           
 17645                           ;FLASH.c: 98: PMCON1 |= 0b00000100;
 17646  1A37  1515               	bsf	21,2	;volatile
 17647                           
 17648                           ;FLASH.c: 99: UNLOCK();
 17649  1A38  3198  209A         	fcall	_UNLOCK
 17650                           
 17651                           ;FLASH.c: 100: PMCON1 &= ~0b00000100;
 17652  1A3A  30FB               	movlw	251
 17653  1A3B  00F2               	movwf	??_BlockErase
 17654  1A3C  0872               	movf	??_BlockErase,w
 17655  1A3D  0023               	movlb	3	; select bank3
 17656  1A3E  0595               	andwf	21,f	;volatile
 17657                           
 17658                           ;FLASH.c: 101: INTCON |= 0x80;
 17659  1A3F  178B               	bsf	11,7	;volatile
 17660  1A40  0008               	return
 17661  1A41                     __end_of_BlockErase:	
 17662                           
 17663                           	psect	text70
 17664  189A                     __ptext70:	
 17665 ;; *************** function _UNLOCK *****************
 17666 ;; Defined at:
 17667 ;;		line 76 in file "FLASH.c"
 17668 ;; Parameters:    Size  Location     Type
 17669 ;;		None
 17670 ;; Auto vars:     Size  Location     Type
 17671 ;;		None
 17672 ;; Return value:  Size  Location     Type
 17673 ;;		None               void
 17674 ;; Registers used:
 17675 ;;		wreg
 17676 ;; Tracked objects:
 17677 ;;		On entry : 0/0
 17678 ;;		On exit  : 0/0
 17679 ;;		Unchanged: 0/0
 17680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17684 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17685 ;;Total ram usage:        0 bytes
 17686 ;; Hardware stack levels used:    1
 17687 ;; This function calls:
 17688 ;;		Nothing
 17689 ;; This function is called by:
 17690 ;;		_BlockErase
 17691 ;;		_WriteFlash_Sequential
 17692 ;; This function uses a non-reentrant model
 17693 ;;
 17694                           
 17695                           
 17696                           ;psect for function _UNLOCK
 17697  189A                     _UNLOCK:	
 17698                           
 17699                           ;FLASH.c: 78: PMCON2 = 0x55;
 17700                           
 17701                           ;incstack = 0
 17702                           ; Regs used in _UNLOCK: [wreg]
 17703  189A  3055               	movlw	85
 17704  189B  0023               	movlb	3	; select bank3
 17705  189C  0096               	movwf	22	;volsfr
 17706                           
 17707                           ;FLASH.c: 79: PMCON2 = 0xAA;
 17708  189D  30AA               	movlw	170
 17709  189E  0096               	movwf	22	;volsfr
 17710                           
 17711                           ;FLASH.c: 80: PMCON1 |= 0b00000010;
 17712  189F  1495               	bsf	21,1	;volatile
 17713  18A0                     i1l965:	
 17714                           ;FLASH.c: 81: while(PMCON1 & 0b00000010);
 17715                           
 17716  18A0  1895               	btfsc	21,1	;volatile
 17717  18A1  28A0               	goto	i1l965
 17718                           
 17719                           ;FLASH.c: 82: __nop();
 17720  18A2  0000               	nop
 17721                           
 17722                           ;FLASH.c: 83: __nop();
 17723  18A3  0000               	nop
 17724  18A4  0008               	return
 17725  18A5                     __end_of_UNLOCK:	
 17726                           
 17727                           	psect	text71
 17728  18D3                     __ptext71:	
 17729 ;; *************** function _ISNUMBER *****************
 17730 ;; Defined at:
 17731 ;;		line 129 in file "MISC.c"
 17732 ;; Parameters:    Size  Location     Type
 17733 ;;  ascii           1    wreg     unsigned char 
 17734 ;; Auto vars:     Size  Location     Type
 17735 ;;  ascii           1    0[COMMON] unsigned char 
 17736 ;; Return value:  Size  Location     Type
 17737 ;;                  1    wreg      unsigned char 
 17738 ;; Registers used:
 17739 ;;		wreg
 17740 ;; Tracked objects:
 17741 ;;		On entry : 0/0
 17742 ;;		On exit  : 0/0
 17743 ;;		Unchanged: 0/0
 17744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17746 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17748 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17749 ;;Total ram usage:        1 bytes
 17750 ;; Hardware stack levels used:    1
 17751 ;; This function calls:
 17752 ;;		Nothing
 17753 ;; This function is called by:
 17754 ;;		_Process_PS2_ScanCode
 17755 ;; This function uses a non-reentrant model
 17756 ;;
 17757                           
 17758                           
 17759                           ;psect for function _ISNUMBER
 17760  18D3                     _ISNUMBER:	
 17761                           
 17762                           ;incstack = 0
 17763                           ; Regs used in _ISNUMBER: [wreg]
 17764                           ;ISNUMBER@ascii stored from wreg
 17765  18D3  00F0               	movwf	ISNUMBER@ascii
 17766                           
 17767                           ;MISC.c: 131: if(ascii >= '0' && ascii <='9')
 17768  18D4  3030               	movlw	48
 17769  18D5  0270               	subwf	ISNUMBER@ascii,w
 17770  18D6  1C03               	skipc
 17771  18D7  28DE               	goto	i1l4846
 17772  18D8  303A               	movlw	58
 17773  18D9  0270               	subwf	ISNUMBER@ascii,w
 17774  18DA  1803               	skipnc
 17775  18DB  28DE               	goto	i1l4846
 17776                           
 17777                           ;MISC.c: 132: {
 17778                           ;MISC.c: 133: return 1;
 17779  18DC  3001               	movlw	1
 17780                           
 17781                           ;MISC.c: 134: }
 17782  18DD  0008               	return
 17783  18DE                     i1l4846:	
 17784                           
 17785                           ;MISC.c: 135: else
 17786                           ;MISC.c: 136: {
 17787                           ;MISC.c: 137: return 0;
 17788  18DE  3000               	movlw	0
 17789  18DF  0008               	return
 17790  18E0                     __end_of_ISNUMBER:	
 17791                           
 17792                           	psect	text72
 17793  1932                     __ptext72:	
 17794 ;; *************** function _Decode_Scan_Code_Shift *****************
 17795 ;; Defined at:
 17796 ;;		line 801 in file "PS_2.c"
 17797 ;; Parameters:    Size  Location     Type
 17798 ;;  Code            1    wreg     unsigned char 
 17799 ;; Auto vars:     Size  Location     Type
 17800 ;;  Code            1    0[COMMON] unsigned char 
 17801 ;; Return value:  Size  Location     Type
 17802 ;;                  1    wreg      unsigned char 
 17803 ;; Registers used:
 17804 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 17805 ;; Tracked objects:
 17806 ;;		On entry : 0/0
 17807 ;;		On exit  : 0/0
 17808 ;;		Unchanged: 0/0
 17809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17811 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17813 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17814 ;;Total ram usage:        1 bytes
 17815 ;; Hardware stack levels used:    1
 17816 ;; This function calls:
 17817 ;;		Nothing
 17818 ;; This function is called by:
 17819 ;;		_Process_PS2_ScanCode
 17820 ;; This function uses a non-reentrant model
 17821 ;;
 17822                           
 17823                           
 17824                           ;psect for function _Decode_Scan_Code_Shift
 17825  1932                     _Decode_Scan_Code_Shift:	
 17826                           
 17827                           ;incstack = 0
 17828                           ; Regs used in _Decode_Scan_Code_Shift: [wreg-fsr0h+status,2+status,0+pclath]
 17829                           ;Decode_Scan_Code_Shift@Code stored from wreg
 17830  1932  00F0               	movwf	Decode_Scan_Code_Shift@Code
 17831                           
 17832                           ;PS_2.c: 803: Code -= 13;
 17833  1933  300D               	movlw	13
 17834  1934  02F0               	subwf	Decode_Scan_Code_Shift@Code,f
 17835                           
 17836                           ;PS_2.c: 804: if(Code <=112)
 17837  1935  3071               	movlw	113
 17838  1936  0270               	subwf	Decode_Scan_Code_Shift@Code,w
 17839  1937  1803               	skipnc
 17840  1938  2942               	goto	i1l5010
 17841                           
 17842                           ;PS_2.c: 805: {
 17843                           ;PS_2.c: 806: return ScanCodeSHIFT[Code];
 17844  1939  0870               	movf	Decode_Scan_Code_Shift@Code,w
 17845  193A  3EF5               	addlw	low (_ScanCodeSHIFT| (0+32768))
 17846  193B  0084               	movwf	4
 17847  193C  3087               	movlw	high (_ScanCodeSHIFT| (0+32768))
 17848  193D  1803               	skipnc
 17849  193E  3E01               	addlw	1
 17850  193F  0085               	movwf	5
 17851  1940  0800               	movf	0,w	;code access
 17852                           
 17853                           ;PS_2.c: 807: }
 17854  1941  0008               	return
 17855  1942                     i1l5010:	
 17856                           
 17857                           ;PS_2.c: 808: else
 17858                           ;PS_2.c: 809: {
 17859                           ;PS_2.c: 810: return 0;
 17860  1942  3000               	movlw	0
 17861  1943  0008               	return
 17862  1944                     __end_of_Decode_Scan_Code_Shift:	
 17863                           
 17864                           	psect	text73
 17865  1920                     __ptext73:	
 17866 ;; *************** function _Decode_Scan_Code_FunctionE0 *****************
 17867 ;; Defined at:
 17868 ;;		line 820 in file "PS_2.c"
 17869 ;; Parameters:    Size  Location     Type
 17870 ;;  Code            1    wreg     unsigned char 
 17871 ;; Auto vars:     Size  Location     Type
 17872 ;;  Code            1    0[COMMON] unsigned char 
 17873 ;; Return value:  Size  Location     Type
 17874 ;;                  1    wreg      unsigned char 
 17875 ;; Registers used:
 17876 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 17877 ;; Tracked objects:
 17878 ;;		On entry : 0/0
 17879 ;;		On exit  : 0/0
 17880 ;;		Unchanged: 0/0
 17881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17883 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17885 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17886 ;;Total ram usage:        1 bytes
 17887 ;; Hardware stack levels used:    1
 17888 ;; This function calls:
 17889 ;;		Nothing
 17890 ;; This function is called by:
 17891 ;;		_Process_PS2_ScanCode
 17892 ;; This function uses a non-reentrant model
 17893 ;;
 17894                           
 17895                           
 17896                           ;psect for function _Decode_Scan_Code_FunctionE0
 17897  1920                     _Decode_Scan_Code_FunctionE0:	
 17898                           
 17899                           ;incstack = 0
 17900                           ; Regs used in _Decode_Scan_Code_FunctionE0: [wreg-fsr0h+status,2+status,0+pclath]
 17901                           ;Decode_Scan_Code_FunctionE0@Code stored from wreg
 17902  1920  00F0               	movwf	Decode_Scan_Code_FunctionE0@Code
 17903                           
 17904                           ;PS_2.c: 822: Code -= 17;
 17905  1921  3011               	movlw	17
 17906  1922  02F0               	subwf	Decode_Scan_Code_FunctionE0@Code,f
 17907                           
 17908                           ;PS_2.c: 823: if(Code <=108)
 17909  1923  306D               	movlw	109
 17910  1924  0270               	subwf	Decode_Scan_Code_FunctionE0@Code,w
 17911  1925  1803               	skipnc
 17912  1926  2930               	goto	i1l4998
 17913                           
 17914                           ;PS_2.c: 824: {
 17915                           ;PS_2.c: 825: return ScanCodeFunctionE0[Code];
 17916  1927  0870               	movf	Decode_Scan_Code_FunctionE0@Code,w
 17917  1928  3E66               	addlw	low (_ScanCodeFunctionE0| (0+32768))
 17918  1929  0084               	movwf	4
 17919  192A  3088               	movlw	high (_ScanCodeFunctionE0| (0+32768))
 17920  192B  1803               	skipnc
 17921  192C  3E01               	addlw	1
 17922  192D  0085               	movwf	5
 17923  192E  0800               	movf	0,w	;code access
 17924                           
 17925                           ;PS_2.c: 826: }
 17926  192F  0008               	return
 17927  1930                     i1l4998:	
 17928                           
 17929                           ;PS_2.c: 827: else
 17930                           ;PS_2.c: 828: {
 17931                           ;PS_2.c: 829: return 0;
 17932  1930  3000               	movlw	0
 17933  1931  0008               	return
 17934  1932                     __end_of_Decode_Scan_Code_FunctionE0:	
 17935                           
 17936                           	psect	text74
 17937  0A41                     __ptext74:	
 17938 ;; *************** function _Decode_Scan_Code_Function *****************
 17939 ;; Defined at:
 17940 ;;		line 839 in file "PS_2.c"
 17941 ;; Parameters:    Size  Location     Type
 17942 ;;  Code            1    wreg     unsigned char 
 17943 ;; Auto vars:     Size  Location     Type
 17944 ;;  Code            1    0[COMMON] unsigned char 
 17945 ;; Return value:  Size  Location     Type
 17946 ;;                  1    wreg      unsigned char 
 17947 ;; Registers used:
 17948 ;;		wreg, fsr0l, fsr0h, pclath
 17949 ;; Tracked objects:
 17950 ;;		On entry : 0/0
 17951 ;;		On exit  : 0/0
 17952 ;;		Unchanged: 0/0
 17953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17955 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17957 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17958 ;;Total ram usage:        1 bytes
 17959 ;; Hardware stack levels used:    1
 17960 ;; This function calls:
 17961 ;;		Nothing
 17962 ;; This function is called by:
 17963 ;;		_Process_PS2_ScanCode
 17964 ;; This function uses a non-reentrant model
 17965 ;;
 17966                           
 17967                           
 17968                           ;psect for function _Decode_Scan_Code_Function
 17969  0A41                     _Decode_Scan_Code_Function:	
 17970                           
 17971                           ;incstack = 0
 17972                           ; Regs used in _Decode_Scan_Code_Function: [wreg-fsr0h+pclath]
 17973                           ;Decode_Scan_Code_Function@Code stored from wreg
 17974  0A41  00F0               	movwf	Decode_Scan_Code_Function@Code
 17975                           
 17976                           ;PS_2.c: 841: if(Code <=131)
 17977  0A42  3084               	movlw	132
 17978  0A43  0270               	subwf	Decode_Scan_Code_Function@Code,w
 17979  0A44  1803               	skipnc
 17980  0A45  2A4F               	goto	i1l5034
 17981                           
 17982                           ;PS_2.c: 842: {
 17983                           ;PS_2.c: 843: return ScanCodeFunctionNoE0[Code];
 17984  0A46  0870               	movf	Decode_Scan_Code_Function@Code,w
 17985  0A47  3E00               	addlw	low (_ScanCodeFunctionNoE0| (0+32768))
 17986  0A48  0084               	movwf	4
 17987  0A49  3087               	movlw	high (_ScanCodeFunctionNoE0| (0+32768))
 17988  0A4A  1803               	skipnc
 17989  0A4B  3E01               	addlw	1
 17990  0A4C  0085               	movwf	5
 17991  0A4D  0800               	movf	0,w	;code access
 17992                           
 17993                           ;PS_2.c: 844: }
 17994  0A4E  0008               	return
 17995  0A4F                     i1l5034:	
 17996                           
 17997                           ;PS_2.c: 845: else
 17998                           ;PS_2.c: 846: {
 17999                           ;PS_2.c: 847: return 0;
 18000  0A4F  3000               	movlw	0
 18001  0A50  0008               	return
 18002  0A51                     __end_of_Decode_Scan_Code_Function:	
 18003                           
 18004                           	psect	text75
 18005  190E                     __ptext75:	
 18006 ;; *************** function _Decode_Scan_Code *****************
 18007 ;; Defined at:
 18008 ;;		line 782 in file "PS_2.c"
 18009 ;; Parameters:    Size  Location     Type
 18010 ;;  Code            1    wreg     unsigned char 
 18011 ;; Auto vars:     Size  Location     Type
 18012 ;;  Code            1    0[COMMON] unsigned char 
 18013 ;; Return value:  Size  Location     Type
 18014 ;;                  1    wreg      unsigned char 
 18015 ;; Registers used:
 18016 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 18017 ;; Tracked objects:
 18018 ;;		On entry : 0/0
 18019 ;;		On exit  : 0/0
 18020 ;;		Unchanged: 0/0
 18021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18023 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18025 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18026 ;;Total ram usage:        1 bytes
 18027 ;; Hardware stack levels used:    1
 18028 ;; This function calls:
 18029 ;;		Nothing
 18030 ;; This function is called by:
 18031 ;;		_Process_PS2_ScanCode
 18032 ;; This function uses a non-reentrant model
 18033 ;;
 18034                           
 18035                           
 18036                           ;psect for function _Decode_Scan_Code
 18037  190E                     _Decode_Scan_Code:	
 18038                           
 18039                           ;incstack = 0
 18040                           ; Regs used in _Decode_Scan_Code: [wreg-fsr0h+status,2+status,0+pclath]
 18041                           ;Decode_Scan_Code@Code stored from wreg
 18042  190E  00F0               	movwf	Decode_Scan_Code@Code
 18043                           
 18044                           ;PS_2.c: 784: Code -= 13;
 18045  190F  300D               	movlw	13
 18046  1910  02F0               	subwf	Decode_Scan_Code@Code,f
 18047                           
 18048                           ;PS_2.c: 785: if(Code <=112)
 18049  1911  3071               	movlw	113
 18050  1912  0270               	subwf	Decode_Scan_Code@Code,w
 18051  1913  1803               	skipnc
 18052  1914  291E               	goto	i1l5022
 18053                           
 18054                           ;PS_2.c: 786: {
 18055                           ;PS_2.c: 787: return ScanCode[Code];
 18056  1915  0870               	movf	Decode_Scan_Code@Code,w
 18057  1916  3E84               	addlw	low (_ScanCode| (0+32768))
 18058  1917  0084               	movwf	4
 18059  1918  3087               	movlw	high (_ScanCode| (0+32768))
 18060  1919  1803               	skipnc
 18061  191A  3E01               	addlw	1
 18062  191B  0085               	movwf	5
 18063  191C  0800               	movf	0,w	;code access
 18064                           
 18065                           ;PS_2.c: 788: }
 18066  191D  0008               	return
 18067  191E                     i1l5022:	
 18068                           
 18069                           ;PS_2.c: 789: else
 18070                           ;PS_2.c: 790: {
 18071                           ;PS_2.c: 791: return 0;
 18072  191E  3000               	movlw	0
 18073  191F  0008               	return
 18074  1920                     __end_of_Decode_Scan_Code:	
 18075                           
 18076                           	psect	text76
 18077  1C59                     __ptext76:	
 18078 ;; *************** function _BufferShiftBack *****************
 18079 ;; Defined at:
 18080 ;;		line 179 in file "MISC.c"
 18081 ;; Parameters:    Size  Location     Type
 18082 ;;  buffer          1    wreg     PTR unsigned char 
 18083 ;;		 -> PS_2_ScanCodes(12), 
 18084 ;;  shift           1    0[COMMON] unsigned char 
 18085 ;;  size            1    1[COMMON] unsigned char 
 18086 ;; Auto vars:     Size  Location     Type
 18087 ;;  buffer          1    7[COMMON] PTR unsigned char 
 18088 ;;		 -> PS_2_ScanCodes(12), 
 18089 ;;  i               1    6[COMMON] unsigned char 
 18090 ;; Return value:  Size  Location     Type
 18091 ;;                  1    wreg      unsigned char 
 18092 ;; Registers used:
 18093 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18094 ;; Tracked objects:
 18095 ;;		On entry : 0/0
 18096 ;;		On exit  : 0/0
 18097 ;;		Unchanged: 0/0
 18098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18099 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18100 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18101 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18102 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18103 ;;Total ram usage:        8 bytes
 18104 ;; Hardware stack levels used:    1
 18105 ;; This function calls:
 18106 ;;		Nothing
 18107 ;; This function is called by:
 18108 ;;		_Process_PS2_ScanCode
 18109 ;; This function uses a non-reentrant model
 18110 ;;
 18111                           
 18112                           
 18113                           ;psect for function _BufferShiftBack
 18114  1C59                     _BufferShiftBack:	
 18115                           
 18116                           ;incstack = 0
 18117                           ; Regs used in _BufferShiftBack: [wreg+fsr1l+fsr1h+status,2+status,0]
 18118                           ;BufferShiftBack@buffer stored from wreg
 18119  1C59  00F7               	movwf	BufferShiftBack@buffer
 18120                           
 18121                           ;MISC.c: 181: unsigned char i=0;
 18122  1C5A  01F6               	clrf	BufferShiftBack@i
 18123                           
 18124                           ;MISC.c: 182: if(shift > size)
 18125  1C5B  0870               	movf	BufferShiftBack@shift,w
 18126  1C5C  0271               	subwf	BufferShiftBack@size,w
 18127  1C5D  1C03               	btfss	3,0
 18128  1C5E  0008               	return
 18129                           
 18130                           ;MISC.c: 185: }
 18131                           ;MISC.c: 186: for(i = 0; i < size; i++)
 18132                           
 18133                           ;MISC.c: 183: {
 18134                           ;MISC.c: 184: return 0;
 18135                           ;	Return value of _BufferShiftBack is never used
 18136  1C5F  01F6               	clrf	BufferShiftBack@i
 18137  1C60                     i1l4874:	
 18138  1C60  0871               	movf	BufferShiftBack@size,w
 18139  1C61  0276               	subwf	BufferShiftBack@i,w
 18140  1C62  1803               	btfsc	3,0
 18141  1C63  0008               	return
 18142                           
 18143                           ;MISC.c: 187: {
 18144                           ;MISC.c: 188: if(i < (size - shift))
 18145  1C64  0870               	movf	BufferShiftBack@shift,w
 18146  1C65  00F2               	movwf	??_BufferShiftBack
 18147  1C66  01F3               	clrf	??_BufferShiftBack+1
 18148  1C67  09F2               	comf	??_BufferShiftBack,f
 18149  1C68  09F3               	comf	??_BufferShiftBack+1,f
 18150  1C69  0AF2               	incf	??_BufferShiftBack,f
 18151  1C6A  1903               	skipnz
 18152  1C6B  0AF3               	incf	??_BufferShiftBack+1,f
 18153  1C6C  0871               	movf	BufferShiftBack@size,w
 18154  1C6D  0772               	addwf	??_BufferShiftBack,w
 18155  1C6E  00F4               	movwf	??_BufferShiftBack+2
 18156  1C6F  0873               	movf	??_BufferShiftBack+1,w
 18157  1C70  1803               	skipnc
 18158  1C71  0A73               	incf	??_BufferShiftBack+1,w
 18159  1C72  00F5               	movwf	??_BufferShiftBack+3
 18160  1C73  0875               	movf	??_BufferShiftBack+3,w
 18161  1C74  3A80               	xorlw	128
 18162  1C75  3C80               	sublw	128
 18163  1C76  1D03               	skipz
 18164  1C77  2C7A               	goto	u557_25
 18165  1C78  0874               	movf	??_BufferShiftBack+2,w
 18166  1C79  0276               	subwf	BufferShiftBack@i,w
 18167  1C7A                     u557_25:	
 18168  1C7A  1803               	skipnc
 18169  1C7B  2C8E               	goto	i1l4870
 18170                           
 18171                           ;MISC.c: 189: {
 18172                           ;MISC.c: 190: buffer[i] = buffer[i+shift];
 18173  1C7C  0876               	movf	BufferShiftBack@i,w
 18174  1C7D  0770               	addwf	BufferShiftBack@shift,w
 18175  1C7E  0777               	addwf	BufferShiftBack@buffer,w
 18176  1C7F  00F2               	movwf	??_BufferShiftBack
 18177  1C80  0872               	movf	??_BufferShiftBack,w
 18178  1C81  0086               	movwf	6
 18179  1C82  0187               	clrf	7
 18180  1C83  0801               	movf	1,w
 18181  1C84  00F3               	movwf	??_BufferShiftBack+1
 18182  1C85  0876               	movf	BufferShiftBack@i,w
 18183  1C86  0777               	addwf	BufferShiftBack@buffer,w
 18184  1C87  00F4               	movwf	??_BufferShiftBack+2
 18185  1C88  0874               	movf	??_BufferShiftBack+2,w
 18186  1C89  0086               	movwf	6
 18187  1C8A  0187               	clrf	7
 18188  1C8B  0873               	movf	??_BufferShiftBack+1,w
 18189  1C8C  0081               	movwf	1
 18190                           
 18191                           ;MISC.c: 191: }
 18192  1C8D  2C95               	goto	i1l4872
 18193  1C8E                     i1l4870:	
 18194                           
 18195                           ;MISC.c: 192: else
 18196                           ;MISC.c: 193: {
 18197                           ;MISC.c: 194: buffer[i] = 0;
 18198  1C8E  0876               	movf	BufferShiftBack@i,w
 18199  1C8F  0777               	addwf	BufferShiftBack@buffer,w
 18200  1C90  00F2               	movwf	??_BufferShiftBack
 18201  1C91  0872               	movf	??_BufferShiftBack,w
 18202  1C92  0086               	movwf	6
 18203  1C93  0187               	clrf	7
 18204  1C94  0181               	clrf	1
 18205  1C95                     i1l4872:	
 18206  1C95  3001               	movlw	1
 18207  1C96  00F2               	movwf	??_BufferShiftBack
 18208  1C97  0872               	movf	??_BufferShiftBack,w
 18209  1C98  07F6               	addwf	BufferShiftBack@i,f
 18210  1C99  2C60               	goto	i1l4874
 18211  1C9A                     __end_of_BufferShiftBack:	
 18212                           ;MISC.c: 195: }
 18213                           ;MISC.c: 196: }
 18214                           ;MISC.c: 197: return 1;
 18215                           ;	Return value of _BufferShiftBack is never used
 18216                           
 18217                           
 18218                           	psect	text77
 18219  1DFA                     __ptext77:	
 18220 ;; *************** function _PS2RawToScan *****************
 18221 ;; Defined at:
 18222 ;;		line 1115 in file "PS_2.c"
 18223 ;; Parameters:    Size  Location     Type
 18224 ;;  Raw             2    8[COMMON] unsigned int 
 18225 ;; Auto vars:     Size  Location     Type
 18226 ;;  temp            2   10[COMMON] unsigned int 
 18227 ;; Return value:  Size  Location     Type
 18228 ;;                  2    8[COMMON] unsigned int 
 18229 ;; Registers used:
 18230 ;;		wreg, status,2, status,0, pclath, cstack
 18231 ;; Tracked objects:
 18232 ;;		On entry : 0/0
 18233 ;;		On exit  : 0/0
 18234 ;;		Unchanged: 0/0
 18235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18236 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18237 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18238 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18239 ;;      Totals:         4       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18240 ;;Total ram usage:       13 bytes
 18241 ;; Hardware stack levels used:    1
 18242 ;; Hardware stack levels required when called:    1
 18243 ;; This function calls:
 18244 ;;		_Reverse_Byte
 18245 ;;		i1_CheckSum_byte
 18246 ;; This function is called by:
 18247 ;;		_isr
 18248 ;; This function uses a non-reentrant model
 18249 ;;
 18250                           
 18251                           
 18252                           ;psect for function _PS2RawToScan
 18253  1DFA                     _PS2RawToScan:	
 18254                           
 18255                           ;PS_2.c: 1117: unsigned int temp;
 18256                           ;PS_2.c: 1119: if(CheckSum_byte((Raw >> 2) & 0xFF , 3) == ((Raw & 0x02)>> 1))
 18257                           
 18258                           ;incstack = 0
 18259                           ; Regs used in _PS2RawToScan: [wreg+status,2+status,0+pclath+cstack]
 18260  1DFA  0879               	movf	PS2RawToScan@Raw+1,w
 18261  1DFB  0020               	movlb	0	; select bank0
 18262  1DFC  00A1               	movwf	??_PS2RawToScan+1
 18263  1DFD  0878               	movf	PS2RawToScan@Raw,w
 18264  1DFE  00A0               	movwf	??_PS2RawToScan
 18265  1DFF  36A1               	lsrf	??_PS2RawToScan+1,f
 18266  1E00  0CA0               	rrf	??_PS2RawToScan,f
 18267  1E01  3001               	movlw	1
 18268  1E02  0520               	andwf	??_PS2RawToScan,w
 18269  1E03  00A2               	movwf	??_PS2RawToScan+2
 18270  1E04  3000               	movlw	0
 18271  1E05  0521               	andwf	??_PS2RawToScan+1,w
 18272  1E06  00A3               	movwf	??_PS2RawToScan+3
 18273  1E07  0879               	movf	PS2RawToScan@Raw+1,w
 18274  1E08  00A5               	movwf	??_PS2RawToScan+5
 18275  1E09  0878               	movf	PS2RawToScan@Raw,w
 18276  1E0A  00A4               	movwf	??_PS2RawToScan+4
 18277  1E0B  36A5               	lsrf	??_PS2RawToScan+5,f
 18278  1E0C  0CA4               	rrf	??_PS2RawToScan+4,f
 18279  1E0D  36A5               	lsrf	??_PS2RawToScan+5,f
 18280  1E0E  0CA4               	rrf	??_PS2RawToScan+4,f
 18281  1E0F  30FF               	movlw	255
 18282  1E10  0524               	andwf	??_PS2RawToScan+4,w
 18283  1E11  00F0               	movwf	i1CheckSum_byte@This
 18284  1E12  3000               	movlw	0
 18285  1E13  0525               	andwf	??_PS2RawToScan+5,w
 18286  1E14  00F1               	movwf	i1CheckSum_byte@This+1
 18287  1E15  3003               	movlw	3
 18288  1E16  00A6               	movwf	??_PS2RawToScan+6
 18289  1E17  0826               	movf	??_PS2RawToScan+6,w
 18290  1E18  00F2               	movwf	i1CheckSum_byte@Odd_Even
 18291  1E19  319A  2298  319D   	fcall	i1_CheckSum_byte
 18292  1E1C  0020               	movlb	0	; select bank0
 18293  1E1D  00A7               	movwf	??_PS2RawToScan+7
 18294  1E1E  01A8               	clrf	??_PS2RawToScan+8
 18295  1E1F  0823               	movf	??_PS2RawToScan+3,w
 18296  1E20  0628               	xorwf	??_PS2RawToScan+8,w
 18297  1E21  1D03               	skipz
 18298  1E22  2E25               	goto	u628_25
 18299  1E23  0822               	movf	??_PS2RawToScan+2,w
 18300  1E24  0627               	xorwf	??_PS2RawToScan+7,w
 18301  1E25                     u628_25:	
 18302  1E25  1D03               	skipz
 18303  1E26  2E41               	goto	i1l5334
 18304                           
 18305                           ;PS_2.c: 1120: {
 18306                           ;PS_2.c: 1122: temp = ((Raw >> 2) & 0xFF);
 18307  1E27  0879               	movf	PS2RawToScan@Raw+1,w
 18308  1E28  00A1               	movwf	??_PS2RawToScan+1
 18309  1E29  0878               	movf	PS2RawToScan@Raw,w
 18310  1E2A  00A0               	movwf	??_PS2RawToScan
 18311  1E2B  36A1               	lsrf	??_PS2RawToScan+1,f
 18312  1E2C  0CA0               	rrf	??_PS2RawToScan,f
 18313  1E2D  36A1               	lsrf	??_PS2RawToScan+1,f
 18314  1E2E  0CA0               	rrf	??_PS2RawToScan,f
 18315  1E2F  30FF               	movlw	255
 18316  1E30  0520               	andwf	??_PS2RawToScan,w
 18317  1E31  00FA               	movwf	PS2RawToScan@temp
 18318  1E32  3000               	movlw	0
 18319  1E33  0521               	andwf	??_PS2RawToScan+1,w
 18320  1E34  00FB               	movwf	PS2RawToScan@temp+1
 18321                           
 18322                           ;PS_2.c: 1123: temp = (unsigned int) Reverse_Byte((unsigned char) temp);
 18323  1E35  087A               	movf	PS2RawToScan@temp,w
 18324  1E36  319E  26ED  319D   	fcall	_Reverse_Byte
 18325  1E39  0020               	movlb	0	; select bank0
 18326  1E3A  00A0               	movwf	??_PS2RawToScan
 18327  1E3B  01A1               	clrf	??_PS2RawToScan+1
 18328  1E3C  0820               	movf	??_PS2RawToScan,w
 18329  1E3D  00FA               	movwf	PS2RawToScan@temp
 18330  1E3E  0821               	movf	??_PS2RawToScan+1,w
 18331  1E3F  00FB               	movwf	PS2RawToScan@temp+1
 18332                           
 18333                           ;PS_2.c: 1125: }
 18334  1E40  2E43               	goto	i1l5336
 18335  1E41                     i1l5334:	
 18336                           
 18337                           ;PS_2.c: 1126: else
 18338                           ;PS_2.c: 1127: {
 18339                           ;PS_2.c: 1129: temp = 0;
 18340  1E41  01FA               	clrf	PS2RawToScan@temp
 18341  1E42  01FB               	clrf	PS2RawToScan@temp+1
 18342  1E43                     i1l5336:	
 18343                           
 18344                           ;PS_2.c: 1130: }
 18345                           ;PS_2.c: 1131: return temp;
 18346  1E43  087B               	movf	PS2RawToScan@temp+1,w
 18347  1E44  00F9               	movwf	?_PS2RawToScan+1
 18348  1E45  087A               	movf	PS2RawToScan@temp,w
 18349  1E46  00F8               	movwf	?_PS2RawToScan
 18350  1E47  0008               	return
 18351  1E48                     __end_of_PS2RawToScan:	
 18352                           
 18353                           	psect	text78
 18354  1A98                     __ptext78:	
 18355 ;; *************** function i1_CheckSum_byte *****************
 18356 ;; Defined at:
 18357 ;;		line 71 in file "MISC.c"
 18358 ;; Parameters:    Size  Location     Type
 18359 ;;  This            2    0[COMMON] unsigned int 
 18360 ;;  Odd_Even        1    2[COMMON] unsigned char 
 18361 ;; Auto vars:     Size  Location     Type
 18362 ;;  CheckSum_byt    2    4[COMMON] unsigned int 
 18363 ;;  CheckSum_byt    1    7[COMMON] unsigned char 
 18364 ;;  CheckSum_byt    1    6[COMMON] unsigned char 
 18365 ;; Return value:  Size  Location     Type
 18366 ;;                  1    wreg      unsigned char 
 18367 ;; Registers used:
 18368 ;;		wreg, status,2, status,0
 18369 ;; Tracked objects:
 18370 ;;		On entry : 0/0
 18371 ;;		On exit  : 0/0
 18372 ;;		Unchanged: 0/0
 18373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18374 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18375 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18376 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18377 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18378 ;;Total ram usage:        8 bytes
 18379 ;; Hardware stack levels used:    1
 18380 ;; This function calls:
 18381 ;;		Nothing
 18382 ;; This function is called by:
 18383 ;;		_PS2RawToScan
 18384 ;;		i1_UARTchar
 18385 ;;		i1_Send_PS2
 18386 ;; This function uses a non-reentrant model
 18387 ;;
 18388                           
 18389                           
 18390                           ;psect for function i1_CheckSum_byte
 18391  1A98                     i1_CheckSum_byte:	
 18392                           
 18393                           ;MISC.c: 73: char i = 0;
 18394                           
 18395                           ;incstack = 0
 18396                           ; Regs used in i1_CheckSum_byte: [wreg+status,2+status,0]
 18397  1A98  01F7               	clrf	i1CheckSum_byte@i
 18398                           
 18399                           ;MISC.c: 74: unsigned char Parity = 0;
 18400  1A99  01F6               	clrf	i1CheckSum_byte@Parity
 18401                           
 18402                           ;MISC.c: 75: unsigned int ThisTemp = This;
 18403  1A9A  0871               	movf	i1CheckSum_byte@This+1,w
 18404  1A9B  00F5               	movwf	i1CheckSum_byte@ThisTemp+1
 18405  1A9C  0870               	movf	i1CheckSum_byte@This,w
 18406  1A9D  00F4               	movwf	i1CheckSum_byte@ThisTemp
 18407                           
 18408                           ;MISC.c: 77: for (i =0; i<8; i++)
 18409  1A9E  01F7               	clrf	i1CheckSum_byte@i
 18410  1A9F  3008               	movlw	8
 18411  1AA0  0277               	subwf	i1CheckSum_byte@i,w
 18412  1AA1  1803               	btfsc	3,0
 18413  1AA2  2AB6               	goto	i1l3910
 18414  1AA3                     i1l292:	
 18415                           
 18416                           ;MISC.c: 78: {
 18417                           ;MISC.c: 79: if((ThisTemp & 0x01) == 1)
 18418  1AA3  1C74               	btfss	i1CheckSum_byte@ThisTemp,0
 18419  1AA4  2AA9               	goto	i1l294
 18420                           
 18421                           ;MISC.c: 80: {
 18422                           ;MISC.c: 81: Parity++;
 18423  1AA5  3001               	movlw	1
 18424  1AA6  00F3               	movwf	??i1_CheckSum_byte
 18425  1AA7  0873               	movf	??i1_CheckSum_byte,w
 18426  1AA8  07F6               	addwf	i1CheckSum_byte@Parity,f
 18427  1AA9                     i1l294:	
 18428                           
 18429                           ;MISC.c: 82: }
 18430                           ;MISC.c: 83: ThisTemp >>= 1;
 18431  1AA9  3001               	movlw	1
 18432  1AAA                     u404_25:	
 18433  1AAA  36F5               	lsrf	i1CheckSum_byte@ThisTemp+1,f
 18434  1AAB  0CF4               	rrf	i1CheckSum_byte@ThisTemp,f
 18435  1AAC  0B89               	decfsz	9,f
 18436  1AAD  2AAA               	goto	u404_25
 18437  1AAE  3001               	movlw	1
 18438  1AAF  00F3               	movwf	??i1_CheckSum_byte
 18439  1AB0  0873               	movf	??i1_CheckSum_byte,w
 18440  1AB1  07F7               	addwf	i1CheckSum_byte@i,f
 18441  1AB2  3008               	movlw	8
 18442  1AB3  0277               	subwf	i1CheckSum_byte@i,w
 18443  1AB4  1C03               	skipc
 18444  1AB5  2AA3               	goto	i1l292
 18445  1AB6                     i1l3910:	
 18446                           
 18447                           ;MISC.c: 84: }
 18448                           ;MISC.c: 85: if(Odd_Even == 3)
 18449  1AB6  3003               	movlw	3
 18450  1AB7  0672               	xorwf	i1CheckSum_byte@Odd_Even,w
 18451  1AB8  1D03               	btfss	3,2
 18452  1AB9  2AC0               	goto	i1l295
 18453                           
 18454                           ;MISC.c: 86: {
 18455                           ;MISC.c: 87: if(Parity % 2 == 0)
 18456  1ABA  1876               	btfsc	i1CheckSum_byte@Parity,0
 18457  1ABB  2ABE               	goto	i1l3918
 18458                           
 18459                           ;MISC.c: 88: {
 18460                           ;MISC.c: 89: return 1;
 18461  1ABC  3001               	movlw	1
 18462  1ABD  0008               	return
 18463  1ABE                     i1l3918:	
 18464                           
 18465                           ;MISC.c: 90: }
 18466                           ;MISC.c: 91: return 0;
 18467  1ABE  3000               	movlw	0
 18468                           
 18469                           ;MISC.c: 92: }
 18470  1ABF  0008               	return
 18471  1AC0                     i1l295:	
 18472                           
 18473                           ;MISC.c: 93: else
 18474                           ;MISC.c: 94: {
 18475                           ;MISC.c: 95: if(Parity % 2 == 1)
 18476  1AC0  1C76               	btfss	i1CheckSum_byte@Parity,0
 18477  1AC1  2AC4               	goto	i1l3928
 18478                           
 18479                           ;MISC.c: 96: {
 18480                           ;MISC.c: 97: return 1;
 18481  1AC2  3001               	movlw	1
 18482  1AC3  0008               	return
 18483  1AC4                     i1l3928:	
 18484                           
 18485                           ;MISC.c: 98: }
 18486                           ;MISC.c: 99: return 0;
 18487  1AC4  3000               	movlw	0
 18488  1AC5  0008               	return
 18489  1AC6                     __end_ofi1_CheckSum_byte:	
 18490                           
 18491                           	psect	text79
 18492  1EED                     __ptext79:	
 18493 ;; *************** function _Reverse_Byte *****************
 18494 ;; Defined at:
 18495 ;;		line 108 in file "MISC.c"
 18496 ;; Parameters:    Size  Location     Type
 18497 ;;  This            1    wreg     unsigned char 
 18498 ;; Auto vars:     Size  Location     Type
 18499 ;;  This            1    3[COMMON] unsigned char 
 18500 ;;  temp            1    2[COMMON] unsigned char 
 18501 ;; Return value:  Size  Location     Type
 18502 ;;                  1    wreg      unsigned char 
 18503 ;; Registers used:
 18504 ;;		wreg, status,2, status,0
 18505 ;; Tracked objects:
 18506 ;;		On entry : 0/0
 18507 ;;		On exit  : 0/0
 18508 ;;		Unchanged: 0/0
 18509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18511 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18512 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18513 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18514 ;;Total ram usage:        4 bytes
 18515 ;; Hardware stack levels used:    1
 18516 ;; This function calls:
 18517 ;;		Nothing
 18518 ;; This function is called by:
 18519 ;;		_PS2RawToScan
 18520 ;; This function uses a non-reentrant model
 18521 ;;
 18522                           
 18523                           
 18524                           ;psect for function _Reverse_Byte
 18525  1EED                     _Reverse_Byte:	
 18526                           
 18527                           ;incstack = 0
 18528                           ; Regs used in _Reverse_Byte: [wreg+status,2+status,0]
 18529                           ;Reverse_Byte@This stored from wreg
 18530  1EED  00F3               	movwf	Reverse_Byte@This
 18531                           
 18532                           ;MISC.c: 110: unsigned char temp=0;
 18533  1EEE  01F2               	clrf	Reverse_Byte@temp
 18534                           
 18535                           ;MISC.c: 112: temp += (This & 0x01) << 7;
 18536  1EEF  0873               	movf	Reverse_Byte@This,w
 18537  1EF0  3901               	andlw	1
 18538  1EF1  00F0               	movwf	??_Reverse_Byte
 18539  1EF2  3006               	movlw	6
 18540  1EF3                     u547_25:	
 18541  1EF3  35F0               	lslf	??_Reverse_Byte,f
 18542  1EF4  3EFF               	addlw	-1
 18543  1EF5  1D03               	skipz
 18544  1EF6  2EF3               	goto	u547_25
 18545  1EF7  3570               	lslf	??_Reverse_Byte,w
 18546  1EF8  00F1               	movwf	??_Reverse_Byte+1
 18547  1EF9  0871               	movf	??_Reverse_Byte+1,w
 18548  1EFA  07F2               	addwf	Reverse_Byte@temp,f
 18549                           
 18550                           ;MISC.c: 113: temp += (This & 0x02) << 5;
 18551  1EFB  0873               	movf	Reverse_Byte@This,w
 18552  1EFC  3902               	andlw	2
 18553  1EFD  00F0               	movwf	??_Reverse_Byte
 18554  1EFE  3004               	movlw	4
 18555  1EFF                     u548_25:	
 18556  1EFF  35F0               	lslf	??_Reverse_Byte,f
 18557  1F00  3EFF               	addlw	-1
 18558  1F01  1D03               	skipz
 18559  1F02  2EFF               	goto	u548_25
 18560  1F03  3570               	lslf	??_Reverse_Byte,w
 18561  1F04  00F1               	movwf	??_Reverse_Byte+1
 18562  1F05  0871               	movf	??_Reverse_Byte+1,w
 18563  1F06  07F2               	addwf	Reverse_Byte@temp,f
 18564                           
 18565                           ;MISC.c: 114: temp += (This & 0x04) << 3;
 18566  1F07  0873               	movf	Reverse_Byte@This,w
 18567  1F08  3904               	andlw	4
 18568  1F09  00F0               	movwf	??_Reverse_Byte
 18569  1F0A  3002               	movlw	2
 18570  1F0B                     u549_25:	
 18571  1F0B  35F0               	lslf	??_Reverse_Byte,f
 18572  1F0C  3EFF               	addlw	-1
 18573  1F0D  1D03               	skipz
 18574  1F0E  2F0B               	goto	u549_25
 18575  1F0F  3570               	lslf	??_Reverse_Byte,w
 18576  1F10  00F1               	movwf	??_Reverse_Byte+1
 18577  1F11  0871               	movf	??_Reverse_Byte+1,w
 18578  1F12  07F2               	addwf	Reverse_Byte@temp,f
 18579                           
 18580                           ;MISC.c: 115: temp += (This & 0x08) << 1;
 18581  1F13  0873               	movf	Reverse_Byte@This,w
 18582  1F14  3908               	andlw	8
 18583  1F15  0709               	addwf	9,w
 18584  1F16  00F0               	movwf	??_Reverse_Byte
 18585  1F17  0870               	movf	??_Reverse_Byte,w
 18586  1F18  07F2               	addwf	Reverse_Byte@temp,f
 18587                           
 18588                           ;MISC.c: 116: temp += (This & 0x10) >> 1;
 18589  1F19  3673               	lsrf	Reverse_Byte@This,w
 18590  1F1A  3908               	andlw	8
 18591  1F1B  00F0               	movwf	??_Reverse_Byte
 18592  1F1C  0870               	movf	??_Reverse_Byte,w
 18593  1F1D  07F2               	addwf	Reverse_Byte@temp,f
 18594                           
 18595                           ;MISC.c: 117: temp += (This & 0x20) >> 3;
 18596  1F1E  0873               	movf	Reverse_Byte@This,w
 18597  1F1F  00F0               	movwf	??_Reverse_Byte
 18598  1F20  3003               	movlw	3
 18599  1F21                     u550_25:	
 18600  1F21  36F0               	lsrf	??_Reverse_Byte,f
 18601  1F22  0B89               	decfsz	9,f
 18602  1F23  2F21               	goto	u550_25
 18603  1F24  0870               	movf	??_Reverse_Byte,w
 18604  1F25  3904               	andlw	4
 18605  1F26  00F1               	movwf	??_Reverse_Byte+1
 18606  1F27  0871               	movf	??_Reverse_Byte+1,w
 18607  1F28  07F2               	addwf	Reverse_Byte@temp,f
 18608                           
 18609                           ;MISC.c: 118: temp += (This & 0x40) >> 5;
 18610  1F29  0873               	movf	Reverse_Byte@This,w
 18611  1F2A  00F0               	movwf	??_Reverse_Byte
 18612  1F2B  3005               	movlw	5
 18613  1F2C                     u551_25:	
 18614  1F2C  36F0               	lsrf	??_Reverse_Byte,f
 18615  1F2D  0B89               	decfsz	9,f
 18616  1F2E  2F2C               	goto	u551_25
 18617  1F2F  0870               	movf	??_Reverse_Byte,w
 18618  1F30  3902               	andlw	2
 18619  1F31  00F1               	movwf	??_Reverse_Byte+1
 18620  1F32  0871               	movf	??_Reverse_Byte+1,w
 18621  1F33  07F2               	addwf	Reverse_Byte@temp,f
 18622                           
 18623                           ;MISC.c: 119: temp += (This & 0x80) >> 7;
 18624  1F34  0873               	movf	Reverse_Byte@This,w
 18625  1F35  00F0               	movwf	??_Reverse_Byte
 18626  1F36  3007               	movlw	7
 18627  1F37                     u552_25:	
 18628  1F37  36F0               	lsrf	??_Reverse_Byte,f
 18629  1F38  0B89               	decfsz	9,f
 18630  1F39  2F37               	goto	u552_25
 18631  1F3A  0870               	movf	??_Reverse_Byte,w
 18632  1F3B  3901               	andlw	1
 18633  1F3C  00F1               	movwf	??_Reverse_Byte+1
 18634  1F3D  0871               	movf	??_Reverse_Byte+1,w
 18635  1F3E  07F2               	addwf	Reverse_Byte@temp,f
 18636                           
 18637                           ;MISC.c: 121: return temp;
 18638  1F3F  0872               	movf	Reverse_Byte@temp,w
 18639  1F40  0008               	return
 18640  1F41                     __end_of_Reverse_Byte:	
 18641  007E                     btemp	set	126	;btemp
 18642  007E                     wtemp	set	126
 18643  007E                     wtemp0	set	126
 18644  0080                     wtemp1	set	128
 18645  0082                     wtemp2	set	130
 18646  0084                     wtemp3	set	132
 18647  0086                     wtemp4	set	134
 18648  0088                     wtemp5	set	136
 18649  007F                     wtemp6	set	127
 18650  007E                     ttemp	set	126
 18651  007E                     ttemp0	set	126
 18652  0081                     ttemp1	set	129
 18653  0084                     ttemp2	set	132
 18654  0087                     ttemp3	set	135
 18655  007F                     ttemp4	set	127
 18656  007E                     ltemp	set	126
 18657  007E                     ltemp0	set	126
 18658  0082                     ltemp1	set	130
 18659  0086                     ltemp2	set	134
 18660  0080                     ltemp3	set	128


Data Sizes:
    Strings     210
    Constant    623
    Data        8
    BSS         55
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     38      72
    BANK2            80     63      63
    BANK3            80     66      80
    BANK4            80     55      70
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_18(CODE[24]), STR_11(CODE[12]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 60
		 -> Process_PS2_ScanCode@buf(BANK3[60]), SetBaud@buf(BANK2[50]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    WriteFlash_Sequential@buffer	PTR unsigned int  size(1) Largest target is 4
		 -> MEM(BANK1[4]), 

    UARTstringWAIT@data	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_20(CODE[20]), STR_19(CODE[3]), Process_PS2_ScanCode@buf(BANK3[60]), STR_17(CODE[3]), 
		 -> STR_16(CODE[3]), STR_15(CODE[19]), STR_14(CODE[19]), STR_13(CODE[3]), 
		 -> STR_12(CODE[3]), SetBaud@buf(BANK2[50]), STR_10(CODE[21]), STR_9(CODE[3]), 
		 -> STR_8(CODE[3]), NoParityMSG(CODE[20]), SpaceParityMSG(CODE[16]), MarkParityMSG(CODE[15]), 
		 -> EvenParityMSG(CODE[22]), OddParityMSG(CODE[21]), STR_7(CODE[3]), STR_6(CODE[33]), 
		 -> STR_5(CODE[3]), Version(CODE[9]), STR_4(CODE[19]), STR_3(CODE[28]), 
		 -> STR_2(CODE[8]), STR_1(CODE[7]), VoltageMSG(CODE[13]), 

    BufferShiftBack@buffer	PTR unsigned char  size(1) Largest target is 12
		 -> PS_2_ScanCodes(BANK1[12]), 

    cleanBuffer@data	PTR unsigned char  size(1) Largest target is 12
		 -> PS_2_ScanCodes(BANK1[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_UARTchar
    _ResendLast->i1_Send_PS2
    _Process_PS2_ScanCode->i1_Send_PS2
    _Process_PS2_ScanCode->i1_UARTchar
    i1_Send_PS2->i1_delayUS
    _UART_send_break_timed->i1_delayUS
    i1_UARTstringWAIT->i1_UARTchar
    i1_UARTchar->i1_CheckSum_byte
    i1_ReadBaud->i1_ReadFlash_4Byte
    i1_ReadFlash_4Byte->i1_ReadFlash_2Byte
    i1_InitUART->i1___lldiv
    _sprintf->i1___lldiv
    ___llmod->i1___lldiv
    _WriteBaud->_WriteFlash_Sequential
    _WriteFlash_Sequential->i1_delayUS
    _PS2RawToScan->i1_CheckSum_byte

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _ResendLast->i1_Send_PS2
    _SetBaud->_WriteBaud
    i1_UARTstringWAIT->i1_UARTchar
    i1_ReadBaud->i1_ReadFlash_4Byte
    _sprintf->___llmod
    _WriteBaud->_WriteFlash_Sequential

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    _isr->_Process_PS2_ScanCode
    _Process_PS2_ScanCode->_SetBaud
    _SetBaud->_WriteBaud

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    _Process_PS2_ScanCode->_SetBaud

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    _isr->_Process_PS2_ScanCode

Critical Paths under _main in BANK4

    _main->_ReadVoltage
    _ReadVoltage->___ftmul
    ___lwtoft->___ftpack
    ___ftmul->___ftdiv
    ___ftdiv->___lwtoft
    _InternalADC_Read->_delayUS
    _Init_PS_2_Send->_Send_PS2
    _Send_PS2->_delayUS
    _Init_System->_InitUART
    _UARTstringWAIT->_UARTchar
    _UARTchar->_CheckSum_byte
    _ReadBaud->_ReadFlash_4Byte
    _ReadFlash_4Byte->_ReadFlash_2Byte
    _InitUART->___lldiv

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   36482
                                             53 BANK4      2     2      0
                _ConfigureOscillator
                            _InitApp
                        _Init_System
              _PS_2_ENABLE_INTERRUPT
                          _PS_2_INIT
                        _ReadVoltage
                     _UARTstringWAIT
                             ___ftge
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     814
                                              0 BANK4      9     3      6
 ---------------------------------------------------------------------------------
 (1) _ReadVoltage                                          9     6      3   10590
                                             44 BANK4      9     6      3
                 _DisableInternalADC
                   _InternalADC_Read
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             4     1      3    2512
                                              8 BANK4      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    3046
                                             28 BANK4     16    10      6
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2978
                                             12 BANK4     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2404
                                              0 BANK4      8     3      5
 ---------------------------------------------------------------------------------
 (2) _InternalADC_Read                                     5     3      2    1980
                                             10 BANK4      5     3      2
                            _delayUS
 ---------------------------------------------------------------------------------
 (2) _DisableInternalADC                                   1     1      0       0
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PS_2_INIT                                            0     0      0    5473
                         _Clock_TRIS
                          _Data_TRIS
                     _Init_PS_2_Send
                         _Timer2Init
 ---------------------------------------------------------------------------------
 (2) _Timer2Init                                           5     5      0      99
                                              0 BANK4      5     5      0
                           _Timer2ON
 ---------------------------------------------------------------------------------
 (3) _Timer2ON                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_PS_2_Send                                       0     0      0    5312
             _PS_2_DISABLE_INTERRUPT
                           _Send_PS2
                            _delayUS
 ---------------------------------------------------------------------------------
 (3) _Send_PS2                                             9     9      0    3332
                                             10 BANK4      9     9      0
                      _CheckSum_byte
                         _Clock_TRIS
                          _Data_TRIS
                      _READ_PS_2_PIN
                            _delayUS
 ---------------------------------------------------------------------------------
 (4) _READ_PS_2_PIN                                        1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Data_TRIS                                            1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Clock_TRIS                                           1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (3) _PS_2_DISABLE_INTERRUPT                               2     2      0      31
                                              0 BANK4      2     2      0
 ---------------------------------------------------------------------------------
 (1) _PS_2_ENABLE_INTERRUPT                                1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                         14    14      0   11218
                                             35 BANK4     14    14      0
                           _InitUART
                           _ReadBaud
                     _UARTstringWAIT
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) _UARTstringWAIT                                       5     3      2    6336
                                             15 BANK4      5     3      2
                           _UARTchar
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) _delayUS                                             10     6      4    1949
                                              0 BANK4     10     6      4
 ---------------------------------------------------------------------------------
 (2) _UARTchar                                             7     5      2    2096
                                              8 BANK4      7     5      2
                      _CheckSum_byte
 ---------------------------------------------------------------------------------
 (3) _CheckSum_byte                                        8     5      3     784
                                              0 BANK4      8     5      3
 ---------------------------------------------------------------------------------
 (2) _ReadBaud                                            16    12      4    1168
                                             18 BANK4     16    12      4
                    _ReadFlash_4Byte
 ---------------------------------------------------------------------------------
 (3) _ReadFlash_4Byte                                     13     9      4     803
                                              5 BANK4     13     9      4
                    _ReadFlash_2Byte
 ---------------------------------------------------------------------------------
 (4) _ReadFlash_2Byte                                      5     2      3     485
                                              0 BANK4      5     2      3
 ---------------------------------------------------------------------------------
 (2) _InitUART                                            21    16      5    1493
                                             14 BANK4     21    16      5
                         _CloseUSART
                          _OpenUSART
                          _ReadUSART
                            ___lldiv
                          _baudUSART
 ---------------------------------------------------------------------------------
 (3) _baudUSART                                            1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     479
                                              0 BANK4     14     6      8
 ---------------------------------------------------------------------------------
 (3) _ReadUSART                                            2     2      0      34
                                              0 BANK4      2     2      0
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     387
                                              0 BANK4      3     1      2
 ---------------------------------------------------------------------------------
 (3) _CloseUSART                                           1     1      0       0
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  1     1      0       0
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  6     6      0   21430
                                             78 BANK0      2     2      0
                                             34 BANK1      4     4      0
                       _PS2RawToScan
               _Process_PS2_ScanCode
                    _READ_CONFIG_PIN
                         _ResendLast
                          _Timer2OFF
                        _Timer2Reset
              _UART_send_break_timed
           i1_PS_2_DISABLE_INTERRUPT
            i1_PS_2_ENABLE_INTERRUPT
                    i1_READ_PS_2_PIN
                        i1_ReadUSART
                         i1_Timer2ON
                         i1_UARTchar
 ---------------------------------------------------------------------------------
 (6) i1_Timer2ON                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) i1_PS_2_ENABLE_INTERRUPT                              1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Timer2Reset                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Timer2OFF                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _ResendLast                                           0     0      0    1271
           i1_PS_2_DISABLE_INTERRUPT
                         i1_Send_PS2
 ---------------------------------------------------------------------------------
 (6) i1_PS_2_DISABLE_INTERRUPT                             2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _READ_CONFIG_PIN                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Process_PS2_ScanCode                                72    72      0   17480
                                             28 BANK1      6     6      0
                                              0 BANK3     66    66      0
                    _BufferShiftBack
                   _Decode_Scan_Code
          _Decode_Scan_Code_Function
        _Decode_Scan_Code_FunctionE0
             _Decode_Scan_Code_Shift
                           _ISNUMBER
                            _SetBaud
                    _UART_send_break
              _UART_send_break_timed
                             ___lmul
                        _cleanBuffer
                            _sprintf
                         i1_Send_PS2
                         i1_UARTchar
                   i1_UARTstringWAIT
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (7) i1_Send_PS2                                           9     9      0    1249
                                             10 COMMON     4     4      0
                                              0 BANK0      5     5      0
                    i1_CheckSum_byte
                       i1_Clock_TRIS
                        i1_Data_TRIS
                    i1_READ_PS_2_PIN
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (6) i1_READ_PS_2_PIN                                      1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_Data_TRIS                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_Clock_TRIS                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _cleanBuffer                                          5     3      2     193
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (7) ___lmul                                              12     4      8     220
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (6) _UART_send_break_timed                                3     1      2     632
                                             10 COMMON     3     1      2
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (7) _UART_send_break                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _SetBaud                                             76    71      5    7750
                                             15 BANK1     13     8      5
                                              0 BANK2     63    63      0
                          _WriteBaud
                            _sprintf
                         i1_InitUART
                         i1_ReadBaud
                   i1_UARTstringWAIT
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (7) i1_UARTstringWAIT                                     5     3      2    2211
                                              1 BANK0      5     3      2
                         i1_UARTchar
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (6) i1_UARTchar                                           7     5      2    1065
                                              8 COMMON     6     4      2
                                              0 BANK0      1     1      0
                    i1_CheckSum_byte
 ---------------------------------------------------------------------------------
 (8) i1_ReadBaud                                          16    12      4     528
                                              4 BANK0     16    12      4
                  i1_ReadFlash_4Byte
 ---------------------------------------------------------------------------------
 (9) i1_ReadFlash_4Byte                                   13     9      4     387
                                              5 COMMON     9     5      4
                                              0 BANK0      4     4      0
                  i1_ReadFlash_2Byte
 ---------------------------------------------------------------------------------
 (8) i1_InitUART                                          21    16      5     822
                                              0 BANK0     21    16      5
                       i1_CloseUSART
                        i1_OpenUSART
                        i1_ReadUSART
                          i1___lldiv
                        i1_baudUSART
 ---------------------------------------------------------------------------------
 (9) i1_baudUSART                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) i1_ReadUSART                                          2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) i1_OpenUSART                                          3     1      2     246
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (9) i1_CloseUSART                                         1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _sprintf                                             30    24      6    1181
                                             10 BANK0     22    16      6
                            ___llmod
                          i1___lldiv
 ---------------------------------------------------------------------------------
 (8) i1___lldiv                                           14     6      8     266
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (8) ___llmod                                             10     2      8     287
                                              0 BANK0     10     2      8
                          i1___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (8) _WriteBaud                                           19    12      7    1876
                                             74 BANK0      4     4      0
                                              0 BANK1     15     8      7
              _WriteFlash_Sequential
 ---------------------------------------------------------------------------------
 (9) _WriteFlash_Sequential                               78    74      4    1573
                                             10 COMMON     4     0      4
                                              0 BANK0     74    74      0
                         _BlockErase
                             _UNLOCK
                  i1_ReadFlash_2Byte
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (7) i1_delayUS                                           10     6      4     482
                                              0 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (10) i1_ReadFlash_2Byte                                   5     2      3     222
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (10) _BlockErase                                          4     2      2     108
                                              0 COMMON     4     2      2
                             _UNLOCK
 ---------------------------------------------------------------------------------
 (10) _UNLOCK                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _ISNUMBER                                             1     1      0      44
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code_Shift                               1     1      0      45
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code_FunctionE0                          1     1      0      45
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code_Function                            1     1      0      44
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code                                     1     1      0      45
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _BufferShiftBack                                      8     6      2    1473
                                              0 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 (6) _PS2RawToScan                                        13    11      2     753
                                              8 COMMON     4     2      2
                                              0 BANK0      9     9      0
                       _Reverse_Byte
                    i1_CheckSum_byte
 ---------------------------------------------------------------------------------
 (7) i1_CheckSum_byte                                      8     5      3     369
                                              0 COMMON     8     5      3
 ---------------------------------------------------------------------------------
 (7) _Reverse_Byte                                         4     4      0     207
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _Init_System
     _InitUART
       _CloseUSART
       _OpenUSART
       _ReadUSART
       ___lldiv
       _baudUSART
     _ReadBaud
       _ReadFlash_4Byte
         _ReadFlash_2Byte
     _UARTstringWAIT
       _UARTchar
         _CheckSum_byte
       _delayUS
     _delayUS
   _PS_2_ENABLE_INTERRUPT
   _PS_2_INIT
     _Clock_TRIS
     _Data_TRIS
     _Init_PS_2_Send
       _PS_2_DISABLE_INTERRUPT
       _Send_PS2
         _CheckSum_byte
         _Clock_TRIS
         _Data_TRIS
         _READ_PS_2_PIN
         _delayUS
       _delayUS
     _Timer2Init
       _Timer2ON
   _ReadVoltage
     _DisableInternalADC
     _InternalADC_Read
       _delayUS
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _UARTstringWAIT
     _UARTchar
       _CheckSum_byte
     _delayUS
   ___ftge
   _delayUS

 _isr (ROOT)
   _PS2RawToScan
     _Reverse_Byte
     i1_CheckSum_byte
   _Process_PS2_ScanCode
     _BufferShiftBack
     _Decode_Scan_Code
     _Decode_Scan_Code_Function
     _Decode_Scan_Code_FunctionE0
     _Decode_Scan_Code_Shift
     _ISNUMBER
     _SetBaud
       _WriteBaud
         _WriteFlash_Sequential
           _BlockErase
             _UNLOCK
           _UNLOCK
           i1_ReadFlash_2Byte
           i1_delayUS
       _sprintf
         ___llmod
           i1___lldiv (ARG)
         i1___lldiv
       i1_InitUART
         i1_CloseUSART
         i1_OpenUSART
         i1_ReadUSART
         i1___lldiv
         i1_baudUSART
       i1_ReadBaud
         i1_ReadFlash_4Byte
           i1_ReadFlash_2Byte
       i1_UARTstringWAIT
         i1_UARTchar
           i1_CheckSum_byte
         i1_delayUS
       i1_delayUS
     _UART_send_break
     _UART_send_break_timed
       i1_delayUS
     ___lmul
     _cleanBuffer
     _sprintf
       ___llmod
         i1___lldiv (ARG)
       i1___lldiv
     i1_Send_PS2
       i1_CheckSum_byte
       i1_Clock_TRIS
       i1_Data_TRIS
       i1_READ_PS_2_PIN
       i1_delayUS
     i1_UARTchar
       i1_CheckSum_byte
     i1_UARTstringWAIT
       i1_UARTchar
         i1_CheckSum_byte
       i1_delayUS
     i1_delayUS
   _READ_CONFIG_PIN
   _ResendLast
     i1_PS_2_DISABLE_INTERRUPT
     i1_Send_PS2
       i1_CheckSum_byte
       i1_Clock_TRIS
       i1_Data_TRIS
       i1_READ_PS_2_PIN
       i1_delayUS
   _Timer2OFF
   _Timer2Reset
   _UART_send_break_timed
     i1_delayUS
   i1_PS_2_DISABLE_INTERRUPT
   i1_PS_2_ENABLE_INTERRUPT
   i1_READ_PS_2_PIN
   i1_ReadUSART
   i1_Timer2ON
   i1_UARTchar
     i1_CheckSum_byte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     26      48       7       90.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     3F      3F       9       78.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50     42      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50     37      46      13       87.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     17B      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     17B      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri Mar 06 10:11:09 2015

                     _BufferShiftBack 1C59                _PS_2_DISABLE_INTERRUPT 1969  
             Process_PS2_ScanCode@buf 01A0                            __CFG_CP$ON 0000  
                   ??_ReadFlash_2Byte 0223                     ??_ReadFlash_4Byte 0229  
                                   _i 00D7                        _ResendLastFlag 00D5  
            Process_PS2_ScanCode@temp 01E1                  i1InitUART@baudconfig 002F  
                  Data_TRIS@direction 0220                           __CFG_LVP$ON 0000  
                                 l181 16DB                                   l173 1629  
                                 l430 1131                                   l423 1CC4  
                                 l425 1CCE                                   l419 1CB5  
                                 l443 113B                                   l292 1B01  
                                 l436 1113                                   l284 1BF1  
                                 l276 0B4F                                   l437 1116  
                                 l294 1B07                                   l286 1C0A  
                                 l630 18B8                                   l295 1B1E  
                                 l447 1145                                   l472 1B84  
                                 l474 1BA2                                   l650 18D0  
                                 l635 1008                                   l655 1989  
                                 l956 1B77                                   l868 0ED9  
                                 l869 0F2E                                   _MEM 00E4  
                                 _PR2 001B                                   _isr 0004  
                _Process_PS2_ScanCode 0127                           i1_baudUSART 184A  
             i1ReadFlash_4Byte@column 0077                          __CFG_BORV$LO 0000  
                                 wreg 0009            __size_ofi1_ReadFlash_2Byte 0028  
          __size_ofi1_ReadFlash_4Byte 004D            __end_of_ScanCodeFunctionE0 08D3  
             UART_send_break_timed@US 007A                          ___ftdiv@cntr 0236  
                        ___ftdiv@sign 023B                                  l1033 1CEE  
                                l1036 1D13                                  l1272 1193  
                                l1273 119B                                  l1265 1180  
                                l6300 1B22                                  l7004 1C34  
                                l7008 1C4A                                  l6242 1987  
                                l6324 1975                                  l6252 198E  
                                l7052 169C                                  l7044 1652  
                                l6342 10F2                                  l6350 1126  
                                l6502 0F5B                                  l6344 10FB  
                                l6504 0F77                                  l7064 16DF  
                                l7056 16A2                                  l7048 167A  
                                l6290 1B1C                                  l6282 1B14  
                                l6530 0FB9                                  l6434 0EB6  
                                l7082 1704                                  l6380 1CAF  
                                l6372 1CA4                                  l6620 1EE4  
                                l6348 1119                                  l6268 1C14  
                                l6540 0FBC                                  l6516 0F7E  
                                l6460 0F05                                  l6444 0EDE  
                                l6436 0ED3                                  l7068 16E3  
                                l6390 1CBC                                  l6606 1EAB  
                                l6630 1BA5                                  l6542 0FD8  
                                l6518 0F9A                                  l6470 0F08  
                                l6446 0EE4                                  l7078 16F7  
                                l6384 1CB7                                  l6376 1CAA  
                                l6616 1ED9                                  l6608 1EB9  
                                l6552 0FDB                                  l6528 0F9D  
                                l6480 0F39                                  l6472 0F25  
                                l6394 1CC6                                  l6554 0FF7  
                                l6490 0F3C                                  l6458 0EE9  
                                l6492 0F58                                  l6580 116C  
                                l6572 1156                                  l6812 129F  
                                l6804 1286                                  ?_isr 0070  
      __size_of_PS_2_ENABLE_INTERRUPT 000C                                  l6398 1CD0  
                                l6478 0F33                                  l6590 1185  
                                l6576 115D                                  l6832 12EE  
                                l6666 1465                                  l6930 0AA0  
                                l6578 1167                                  l6826 12D8  
                                l6668 1469                                  l6932 0AAB  
                                l6588 1191                                  l6860 134D  
                                l6844 1329                                  l6790 1245  
                                l6880 1947                                  l6936 0AB4  
                                l6784 122F                                  l6856 1345  
                                l6848 1331                                  l6882 194D  
                                l6962 0B28                                  _BAUD 0262  
                                l6964 0B2C                                  l6972 0B3B  
                                l6966 0B31                                  l6974 0B48  
                                l6990 1F5C                                  l6968 0B36  
                                l6994 1F6A                   _PS_2_Read_Data_TEMP 00CA  
                                _ECHO 025F                                  STR_1 0A3A  
                                STR_2 0A32                                  STR_3 0990  
                                STR_4 0A13                                  STR_5 09FD  
                                STR_6 096F                                  STR_7 09FD  
                                STR_8 09FD                                  STR_9 09FD  
                                _LATA 010C                                  _LATC 010E  
                                _LALT 01EA         __end_of_PS_2_ENABLE_INTERRUPT 18D3  
                                _PIE1 0091                                  u8005 1B08  
                                i1l90 0080                                  i1l83 0073  
                                i1l92 00CD                                  i1l93 0094  
                                u9005 1338                                  i1l87 0059  
                                _RALT 01ED                                  u8075 1B6E  
                                u9035 134E                                  u9045 1354  
                                u8505 1162                                  u9145 1F57  
                                u8525 117B                                  u9165 1F66  
                                u8615 1EAE                                  u9095 0A89  
                                u8705 104B                                  u8545 118C  
                                u8635 1EBA                                  u8475 1DC9  
                                u8715 106E                                  u8645 1ECE  
                                u8655 1EDA                                  u8735 149B  
                                u8745 1A58                                  u8585 11A2  
                                u8905 1287                                  u8915 1296  
                                u7973 1C03                                  u8845 1CF4  
                                u8925 12A0                                  u8885 1257  
                                u8965 12FA                                  u8895 1267  
                                u8975 130A                                  _TMR2 001A  
                                u8995 1332                                  _WPUA 020C  
                                _WPUC 020E                            i1delayUS@i 0075  
                          i1delayUS@j 0079                          __CFG_WRT$OFF 0000  
    __size_ofi1_PS_2_ENABLE_INTERRUPT 000B                     i1___lldiv@divisor 0070  
                                _main 1615                    UARTstringWAIT@data 022F  
                        ___ftpack@arg 0220                          ___ftpack@exp 0223  
                                fsr0h 0005                                  fsr1h 0007  
                                fsr0l 0004                                  indf0 0000  
                                indf1 0001                                  fsr1l 0006  
                                btemp 007E                     i1___lldiv@counter 007D  
                 baudUSART@baudconfig 0220                         __CFG_BOREN$ON 0000  
                                ltemp 007E                     SetBaud@Paritytemp 0156  
                    i1_UARTstringWAIT 1B24                                  start 00F3  
                                ttemp 007E                                  wtemp 007E  
                       __CFG_IESO$OFF 0000                      Reverse_Byte@This 0073  
           WriteFlash_Sequential@temp 0066                      Reverse_Byte@temp 0072  
                       __CFG_MCLRE$ON 0000                            _BlockErase 1A16  
                        ___ftmul@cntr 024A                           ?i1_UARTchar 0078  
             ?_Decode_Scan_Code_Shift 0070                          ___ftmul@sign 024B  
                     __end_of_InitApp 19C9                       __end_of_SetBaud 0CDE  
                          _Clock_TRIS 18B0                         ??_Init_System 0243  
              __size_of_READ_PS_2_PIN 0014                                 ??_isr 006E  
                 _Right_Shift_Key_old 00D6                        _Init_PS_2_Send 0688  
                   ??i1_READ_PS_2_PIN 0070     i1UARTchar@NinethBit_override_data 0079  
     UARTchar@NinethBit_override_data 0229             _Decode_Scan_Code_Function 0A41  
                         ReadBaud@row 0232       WriteFlash_Sequential@amountTemp 0065  
                     __end_of_Version 096F                         ??_ReadVoltage 024F  
                          _CloseUSART 18E0                                 ?_main 0070  
            __size_ofi1_CheckSum_byte 002E                                 STR_10 09C4  
                               STR_11 0A26                                 STR_12 09FD  
                               STR_20 09D9                                 STR_13 09FD  
                               STR_14 09ED                                 STR_15 0A00  
                               STR_16 09FD                                 STR_17 09FD  
                       __CFG_WDTE$OFF 0000                                 STR_18 09AC  
                               STR_19 09FD                       __end_of___ftdiv 12C1  
                    __end_of_ISNUMBER 18E0                       __end_of___lldiv 1EED  
                     __end_of___ftmul 1375                                 _CKPPS 0E25  
                     __end_of___llmod 1D60                                 _T2CON 001C  
                               _IOCAF 0393                                 _IOCAN 0392  
                               _IOCAP 0391                                 i1l104 00EF  
                               i1l430 10CA                                 i1l423 1A86  
                               i1l425 1A8F                                 i1l419 1A7C  
                               i1l443 10D6                                 i1l292 1AA3  
                               i1l284 1BBD                                 i1l436 10AE  
                               i1l437 10B1                                 i1l294 1AA9  
                               i1l286 1BD6                                 i1l630 1883  
                               i1l295 1AC0                                 i1l447 10E0  
                               i1l472 1B24                                 i1l720 02A7  
                               i1l474 1B41                                 i1l650 18AD  
                               i1l635 188D                                 i1l484 0C55  
                               i1l493 0CCB                                 i1l813 0564  
                               i1l655 1962                                 i1l752 041E  
                               i1l836 062E                                 i1l956 1A0C  
                               i1l868 0D47                                 i1l965 18A0  
                               i1l869 0D9B        __size_of_UART_send_break_timed 0025  
                               _RCREG 0199                 ?_Process_PS2_ScanCode 0070  
                               _RCSTA 019D                                 _SPBRG 019B  
       __end_of_UART_send_break_timed 19EE                  _PS_2_Read_Data_First 01E2  
                               _PORTA 000C                                 _PORTC 000E  
                        InitUART@Baud 022E                                 _RXPPS 0E24  
                               _TXREG 019A                   _ConfigureOscillator 1944  
                               _Alarm 025E                  _PS_2_Read_Data_Third 01E6  
                     __end_of_delayUS 1C1D                      _InternalADC_Read 1CDB  
                         i1delayUS@US 0070                   ___lmul@multiplicand 0074  
                      __CFG_FCMEN$OFF 0000                          InitUART@temp 023F  
               _WriteFlash_Sequential 1375                    i1___lldiv@dividend 0074  
               ReadFlash_2Byte@column 0222                      __end_of_UARTchar 114D  
                          SetBaud@buf 0120                       __end_of_dpowers 08FB  
                         ?i1_InitUART 0020                           ?i1_ReadBaud 0024  
                       ___ftpack@sign 0224                    __size_of_PS_2_INIT 000F  
                               main@i 0256                                 isr@rx 00C4  
                               ltemp0 007E                                 ltemp1 0082  
                               ltemp2 0086                                 ltemp3 0080  
                         ?i1_Send_PS2 0070               InternalADC_Read@channel 022E  
                               ttemp0 007E                                 ttemp1 0081  
                               ttemp2 0084                                 ttemp3 0087  
                               ttemp4 007F                                 status 0003  
             __end_of_BufferShiftBack 1C9A                                 wtemp0 007E  
                               wtemp1 0080                                 wtemp2 0082  
                               wtemp3 0084                                 wtemp4 0086  
                               wtemp5 0088                                 wtemp6 007F  
                     __end_of_sprintf 1800                           isr@ScanTemp 00C5  
                  __size_ofi1___lldiv 0052                  __size_of_cleanBuffer 0018  
                         ?i1_Timer2ON 0070                  ?_ConfigureOscillator 0070  
      __end_of_Decode_Scan_Code_Shift 1944                         _ScanCodeSHIFT 07F5  
                  __size_ofi1_delayUS 0033                       _UART_send_break 1845  
                     __initialization 00F5                __end_of_Init_PS_2_Send 06F8  
                 __end_of_NoParityMSG 093A                    __size_of_Data_TRIS 000B  
                        __end_of_main 170A                      __end_of_InitUART 1526  
                    ??_UARTstringWAIT 0231                           isr@Rx_fault 00C2  
                    __end_of_ReadBaud 1085                    i1___lldiv@quotient 0079  
          __end_of_DisableInternalADC 186A                        _SpaceParityMSG 093A  
                    __end_of_ScanCode 07F5                        __CFG_LPBOR$OFF 0000  
            __size_of_READ_CONFIG_PIN 0007                      __end_of_Send_PS2 1000  
                              ??_main 0255          __end_of_ScanCodeFunctionNoE0 0784  
                      __CFG_PLLEN$OFF 0000                      __end_of_Timer2ON 183D  
                 __end_of_Init_System 0B65                          ReadBaud@temp 023E  
                    i1CheckSum_byte@i 0077                        i1InitUART@Baud 0020  
                        ?i1_Data_TRIS 0070                      BufferShiftBack@i 0076  
       Decode_Scan_Code_Function@Code 0070                   __end_of_ReadVoltage 1F9E  
               ReadFlash_4Byte@column 0227                                _ADCON0 009D  
                              _ADCON1 009E                                _ADCON2 009F  
                 __size_ofi1_UARTchar 0063                      ___llmod@dividend 0024  
                              _ADRESH 009C                                _ADRESL 009B  
                      i1InitUART@temp 0031                         _READ_PS_2_PIN 197C  
                      __CFG_ZCDDIS$ON 0000                                _ANSELA 018C  
                              _ANSELC 018E                      __end_of___ftpack 11B2  
                              _HFIOFS 04D0                                _RC1STA 019D  
                              _RC2PPS 0EA2                                i1l1090 1753  
                              i1l1087 1735                                i1l4100 1D26  
                              i1l4102 1D34                                i1l4110 1D57  
                              i1l5010 1942                                i1l4050 13B9  
                              i1l4106 1D4C                                i1l4210 1E58  
                              i1l4044 13A0                                i1l4220 1E86  
                              i1l4212 1E66                                i1l4140 1A7D  
                              i1l4132 1A76                                i1l5022 191E  
                              i1l4150 1A88                                i1l4056 137C  
                              i1l4224 1E91                                i1l5034 0A4F  
                              i1l4090 143A                                i1l4058 13CE  
                              i1l4154 1A90                                i1l4170 1098  
                              i1l5202 0D24                                i1l4340 173C  
                              i1l5212 0D4C                                i1l5204 0D41  
                              i1l4334 1733                                i1l4174 10B4  
                              i1l5310 0E44                                i1l5214 0D51  
                              i1l4088 1416                                i1l4336 1737  
                              i1l4168 108E                                i1l4176 10C1  
                              i1l5064 1ACE                                i1l5320 0E47  
                              i1l5240 0D92                                i1l6120 00E8  
                              i1l4370 17AB                                i1l4362 17A6  
                              i1l4346 1762                                i1l5322 0E63  
                              i1l5226 0D56                                i1l5402 01A5  
                              i1l5410 01AF                                i1l6042 002F  
                              i1l4356 1779                                i1l4372 1710  
                              i1l5068 1AD8                                i1l5308 0E28  
                              i1l5260 0DC4                                i1l5228 0D72  
                              i1l5500 0266                                i1l5420 01CC  
                              i1l3910 1AB6                                i1l5334 1E41  
                              i1l4374 17FA                                i1l5270 0DC7  
                              i1l5246 0DA0                                i1l5238 0D75  
                              i1l5502 027F                                i1l5406 01AA  
                              i1l6118 00E5                                i1l6054 005B  
                              i1l5336 1E43                                i1l4616 1554  
                              i1l5272 0DE3                                i1l5248 0DA5  
                              i1l5600 0365                                i1l5512 0295  
                              i1l5352 1861                                i1l5176 1908  
                              i1l6056 005E                                i1l4618 1558  
                              i1l5258 0DA8                                i1l5450 0211  
                              i1l5506 0287                                i1l5434 01EF  
                              i1l5442 0200                                i1l6082 009A  
                              i1l5284 0DEA                                i1l5700 043F  
                              i1l5620 0379                                i1l5516 029E  
                              i1l3918 1ABE                                i1l4902 0C3C  
                              i1l5286 0E06                                i1l5630 03A8  
                              i1l5622 0392                                i1l5534 02BC  
                              i1l5526 02B1                                i1l5454 0218  
                              i1l5462 0226                                i1l5438 01F7  
                              i1l5390 0184                                i1l3928 1AC4  
                              i1l4664 1B44                                i1l4920 0C7C  
                              i1l5296 0E09                                i1l5720 0493  
                              i1l5632 0393                                i1l5560 0307  
                              i1l5552 02F8                                i1l6096 00BC  
                              i1l6088 00A7                                i1l4930 0CA7  
                              i1l4906 0C4F                                i1l5298 0E25  
                              i1l5810 05AF                                i1l5802 0599  
                              i1l5618 038B                                i1l5634 03AF  
                              i1l5490 0265                                i1l5466 0231  
                              i1l5458 0220                                i1l5538 02DC  
                              i1l5378 015B                                i1l6098 00C8  
                              i1l4932 0CAC                                i1l4940 0CC3  
                              i1l4684 1960                                i1l5644 03C5  
                              i1l5628 03A5                                i1l5660 03EA  
                              i1l5572 0325                                i1l5556 02FF  
                              i1l5548 02F1                                i1l5476 0247  
                              i1l4870 1C8E                                i1l4846 18DE  
                              i1l4934 0CB1                                i1l4694 1967  
                              i1l5830 060A                                i1l5806 05A2  
                              i1l5734 04CE                                i1l5654 03DF  
                              i1l5646 03B3                                i1l5582 0346  
                              i1l5574 0313                                i1l5486 025E  
                              i1l4872 1C95                                i1l3896 1BDF  
                              i1l4928 0CA2                                i1l4856 100E  
                              i1l5832 060F                                i1l5840 0626  
                              i1l5760 04F5                                i1l5752 04E8  
                              i1l5744 04D6                                i1l5672 0408  
                              i1l5656 03E3                                i1l5648 03CC  
                              i1l5592 0353                                i1l5584 032E  
                              i1l5576 032C                                i1l5488 024C  
                              i1l4874 1C60                                i1l4938 0CB6  
                              i1l5834 0614                                i1l5818 05D4  
                              i1l5850 065E                                i1l5658 03CD  
                              i1l5586 0334                                i1l5498 0278  
                              i1l5828 0605                                i1l5844 0649  
                              i1l5780 055B                                i1l5772 0514  
                              i1l5692 0434                                i1l5596 035C  
                              i1l5588 0349                                i1l5684 042B  
                              i1l5838 0619                                i1l5790 0576  
                              i1l5766 0501                                i1l5870 012E  
                              i1l5848 065C                                i1l5794 0583  
                              i1l5786 056D                                i1l5866 067D  
                              i1l4998 1930                                i1l5798 058C  
                              _INTCON 000B                                u401_23 1BCF  
                              _FVRCON 0117                                u404_25 1AAA  
                              u430_25 140D                                _PARITY 0261  
                              _PMADRH 0192                                _PMADRL 0191  
                              u409_25 1A04                                u433_25 1D29  
                    __end_of___lwtoft 19A5                                _PMDATH 0194  
                              _PMDATL 0193                                u435_25 1D42  
                              _PMCON1 0195                                _PMCON2 0196  
                              u436_25 1D4D                                u453_25 1D7B  
                              u550_25 1F21                    __size_of_ReadUSART 000A  
                              u551_25 1F2C                                u455_25 1E5B  
                              u552_25 1F37                                u560_25 0C1D  
                              u457_25 1E67                                u529_25 158A  
                              u561_25 0C3A                                _OSCCON 0099  
                              u458_25 1E7B                                u482_25 179C  
                              u538_25 1FC6                                u547_25 1EF3  
                              u459_25 1E87                                u539_25 1FE9  
                              u555_25 1015                                u548_25 1EFF  
                              u628_25 1E25                                u549_25 1F0B  
                              u557_25 1C7A                                u477_25 11BA  
                              u398_25 1A30                                u478_25 11FD  
                              u582_25 1AD9                                u559_25 0BC0  
                              u583_25 1AE0                                u762_25 001E  
                              _SPBRGH 019C                                _TX1STA 019E  
                              _UNLOCK 189A                  __end_of_OddParityMSG 0926  
                          _ResendLast 06F8                 _PS_2_Read_Data_Second 01E4  
                           ??_InitApp 0220                 ??_ConfigureOscillator 0220  
                              _Delete 00CF                      i1OpenUSART@spbrg 0070  
                      __CFG_PWRTE$OFF 0000                             ??_SetBaud 00B4  
                       ??_Timer2Reset 0070                            _Timer2Init 1A41  
                         ?_BlockErase 0070                         InitUART@spbrg 023B  
                         SetBaud@Baud 00AF                    __size_of_OpenUSART 0041  
                     ?_Init_PS_2_Send 0070                                ___ftge 1C1D  
              __end_of_SpaceParityMSG 094A                     ?_Decode_Scan_Code 0070  
                              ___lmul 1AC6                        __CFG_STVREN$ON 0000  
                           ??___ftdiv 0232                             ??___lldiv 0228  
                         ?_Clock_TRIS 0070                             ??___ftmul 0242  
                           ??___llmod 0028                           SetBaud@temp 015A  
                 __size_ofi1_InitUART 00EF                     __end_of_PS_2_INIT 18FD  
                 __size_ofi1_ReadBaud 0062                    ??_Decode_Scan_Code 0070  
                        ?i1_ReadUSART 0070                             ??_delayUS 0224  
__size_of_Decode_Scan_Code_FunctionE0 0012                    __size_of_Timer2OFF 0003  
                         ?_CloseUSART 0070                ??_Process_PS2_ScanCode 00BC  
                 __size_ofi1_Send_PS2 018E                 ___ftmul@f3_as_product 0247  
                   __end_ofi1___lldiv 1E9A                ?_WriteFlash_Sequential 007A  
                 __size_ofi1_Timer2ON 0003                     __end_ofi1_delayUS 1BE8  
                     SetBaud@Baudtemp 0152                          ?i1_OpenUSART 0070  
              __size_of_CheckSum_byte 002F                     ??i1_CheckSum_byte 0073  
                      ?_READ_PS_2_PIN 0070                     __end_of_Data_TRIS 100B  
                           ??_sprintf 0030                        i1ReadBaud@temp 0030  
             i1READ_PS_2_PIN@DATA_CLK 0070               i1_PS_2_ENABLE_INTERRUPT 18A5  
             __end_of_UART_send_break 184A                       _ReadFlash_2Byte 1B54  
                     _ReadFlash_4Byte 1DAD               __end_of__initialization 0124  
                 Timer2Init@prescaler 0224                           _NoParityMSG 0926  
                  __size_of_WriteBaud 0066                      ?_BufferShiftBack 0070  
                          ___ftge@ff1 0220                            ___ftge@ff2 0223  
             ?_PS_2_DISABLE_INTERRUPT 0070                            ___ftdiv@f1 022F  
                          ___ftdiv@f2 022C                            ___ftdiv@f3 0237  
                          _VoltageMSG 0959                             ?_ISNUMBER 0070  
                  __size_of_baudUSART 0009                            ___ftmul@f1 023C  
                          ___ftmul@f2 023F                        __pcstackCOMMON 0070  
                        __pidataBANK1 1841                          __pidataBANK4 183D  
                           ?_UARTchar 0228                         ?_PS2RawToScan 0078  
                        isr@Rx_Overun 00C3                    InitUART@baudconfig 023D  
                         _Init_System 0A51                   __end_of_Timer2Reset 1837  
                   __end_of_ReadUSART 189A                            ___lwtoft@c 0228  
                         _ReadVoltage 1F41                       ReadVoltage@temp 0253  
                        WriteBaud@row 00A0              __end_ofi1_UARTstringWAIT 1B54  
                      _OPTION_REGbits 0095                   ReadFlash_4Byte@temp 022E  
                        ?i1_baudUSART 0070                     ??_READ_CONFIG_PIN 0070  
      Process_PS2_ScanCode@shortbreak 01E0                         ReadUSART@data 0221  
                         _SinLEDtimer 025A    __size_of_Decode_Scan_Code_Function 0010  
                   __end_of_OpenUSART 1CDB                   __size_of_BlockErase 002B  
                     WriteBaud@Parity 00A6                     Send_PS2@oddparity 022E  
                          __pbssBANK1 00C6                            __pbssBANK3 01E2  
                          __pbssBANK4 0257                   __size_of_Clock_TRIS 000B  
                           ?_InitUART 022E                             ?_ReadBaud 0232  
                   __end_of_Timer2OFF 1834        __end_of_PS_2_DISABLE_INTERRUPT 197C  
                  ReadVoltage@voltage 0250                               ?_UNLOCK 0070  
                         ?_ResendLast 0070                       i1_READ_PS_2_PIN 1956  
                 __size_of_CloseUSART 000E                             ?_Send_PS2 0070  
                          ??_ISNUMBER 0070                  _ScanCodeFunctionNoE0 0700  
            __end_of_InternalADC_Read 1D1D     __size_ofi1_PS_2_DISABLE_INTERRUPT 0011  
                         ?_Timer2Init 0070                    _ScanCodeFunctionE0 0866  
                           ?_Timer2ON 0070             ?i1_PS_2_DISABLE_INTERRUPT 0070  
                       _CheckSum_byte 1AF5                            __pmaintext 1615  
                        ??i1_UARTchar 007A                           _ParityTyped 01EC  
                       BlockErase@row 0070                               ?___ftge 0220  
                             ?___lmul 0070                   i1CheckSum_byte@This 0070  
                      ??_PS2RawToScan 0020                         _Caps_Lock_Key 00CD  
                       ?_Reverse_Byte 0070                            __pintentry 0004  
                          ??_UARTchar 022A                        ___lmul@product 0078  
                           ?___ftpack 0220                       i1InitUART@spbrg 002D  
                   _PS_2_Buffer_items 00D2                 i1CheckSum_byte@Parity 0076  
                           ?___lwtoft 0228                     __end_of_WriteBaud 1218  
                     ??_READ_PS_2_PIN 0220                   BufferShiftBack@size 0071  
                   __end_of_baudUSART 187C               __end_of_ReadFlash_2Byte 1B84  
             __end_of_ReadFlash_4Byte 1DFA                               _OSCSTAT 009A  
                 Clock_TRIS@direction 0220             ??i1_PS_2_ENABLE_INTERRUPT 0070  
                             _PPSLOCK 0E0F                          ??i1_InitUART 0025  
                i1ReadFlash_2Byte@row 0070                          ??i1_ReadBaud 0028  
                       ?i1_Clock_TRIS 0070                    __end_ofi1_UARTchar 10E8  
                __size_ofi1_Data_TRIS 000A                     i1OpenUSART@config 0072  
                i1ReadFlash_4Byte@row 0075                            ??_InitUART 0233  
                          ??_ReadBaud 0236                          ??i1_Send_PS2 007A  
               READ_PS_2_PIN@DATA_CLK 0220                      ?_UART_send_break 0070  
                       ?i1_CloseUSART 0070                 _PS_2_ENABLE_INTERRUPT 18C7  
                     __size_of_UNLOCK 000B                          ??i1_Timer2ON 0070  
                             _InitApp 19A5                            ??_Send_PS2 022A  
                             _SetBaud 0B65                        InitUART@config 023E  
                      ?_CheckSum_byte 0220                           _Timer2Reset 1834  
     i1PS_2_ENABLE_INTERRUPT@DATA_CLK 0070                            ??_Timer2ON 0220  
                      InitUART@parity 0232               i1CheckSum_byte@Odd_Even 0072  
                      ??_Reverse_Byte 0070                               _Version 0966  
                     __size_of___ftge 003C                       __size_of___lmul 002F  
                             ___ftdiv 1218                               ___lldiv 1E9A  
                             ___ftmul 12C1                               ___llmod 1D1D  
                   i1Send_PS2@command 0021                    __end_ofi1_InitUART 1615  
                             _delayUS 1BE8                    __end_ofi1_ReadBaud 2000  
                          ??___ftpack 0225                               __ptext1 1C1D  
                             __ptext2 1F41                               __ptext3 1990  
                             __ptext4 12C1                               __ptext5 1218  
                             __ptext6 114D                               __ptext7 1CDB  
                             __ptext8 1863                               __ptext9 18EE  
                          ??___lwtoft 022B                  __size_ofi1_ReadUSART 0009  
                        _OddParityMSG 0911                               _dpowers 08D3  
                  __end_ofi1_Send_PS2 0E6C                   __size_of_ResendLast 0008  
                           _T2CONbits 001C               i1CheckSum_byte@ThisTemp 0074  
                        __size_of_isr 00EF                     i1Send_PS2@timeout 0023  
            _Process_PS2_ScanCode$855 01DC              _Process_PS2_ScanCode$856 01DD  
            _Process_PS2_ScanCode$857 01DE              _Process_PS2_ScanCode$858 01DF  
         WriteFlash_Sequential@amount 007D           WriteFlash_Sequential@buffer 007C  
                  __end_ofi1_Timer2ON 183A                 _UART_send_break_timed 19C9  
                 __size_of_Timer2Init 002B                    _DisableInternalADC 1863  
         WriteFlash_Sequential@spaces 0068                        ??i1_Clock_TRIS 0070  
             __end_ofi1_READ_PS_2_PIN 1969                               _sprintf 170A  
                             clrloop0 1857                     _Caps_Lock_Key_old 00CE  
                __size_ofi1_OpenUSART 002C                  end_of_initialization 0124  
                       ??_cleanBuffer 0072                        ??i1_CloseUSART 0070  
               BufferShiftBack@buffer 0077                       i1ReadUSART@data 0071  
                             init_ram 1850                   ?_DisableInternalADC 0070  
                             initloop 1851                      UARTchar@override 0228  
                    ??_Init_PS_2_Send 0233          ?_Decode_Scan_Code_FunctionE0 0070  
                     ___lldiv@divisor 0220                       ___lldiv@counter 022D  
                        ??_BlockErase 0072                             _RCSTAbits 019D  
                        ??_Clock_TRIS 0220                          __pstringtext 0700  
               __end_of_EvenParityMSG 0911                       i1_CheckSum_byte 1A98  
             ??_WriteFlash_Sequential 0020                          ??_CloseUSART 0220  
                ??_DisableInternalADC 0220                             _PS_2_INIT 18EE  
                    __CFG_FOSC$INTOSC 0000                             _PS_2_bits 00D3  
                           _TRISAbits 008C                             _TRISCbits 008E  
           __size_of_Decode_Scan_Code 0012                      ?_ReadFlash_2Byte 0220  
                    ?_ReadFlash_4Byte 0225                  __size_ofi1_baudUSART 0006  
                           i1___lldiv 1E48                 __end_of_MarkParityMSG 0959  
                  __end_of_BlockErase 1A41           __end_of_ConfigureOscillator 1956  
                __end_of_PS2RawToScan 1E48                             i1_delayUS 1BB5  
              ?_PS_2_ENABLE_INTERRUPT 0070                    __end_of_Clock_TRIS 18BB  
                           _BaudTyped 00C6                             _Data_TRIS 1000  
                           _CapsCount 01E8                 i1baudUSART@baudconfig 0070  
                         ___ftdiv@exp 023A                             _Caps_Lock 01E9  
                     ??_CheckSum_byte 0223                           _CCP2CONbits 029A  
                           _TXSTAbits 019E                        __end_of_UNLOCK 18A5  
                  __end_of_CloseUSART 18EE                  Timer2Init@postscaler 0223  
                 __end_of_cleanBuffer 1023         ??_Decode_Scan_Code_FunctionE0 0070  
                         ___ftmul@exp 0246                     __size_of_ISNUMBER 000D  
                      __end_of___ftge 1C59                 CheckSum_byte@Odd_Even 0222  
                        ?_Init_System 0070                        __end_of___lmul 1AF5  
                     _READ_CONFIG_PIN 185C                          _LineOverride 0260  
                   __size_of_UARTchar 0065                          ?_ReadVoltage 024C  
                          ?_PS_2_INIT 0070                             Send_PS2@i 0230  
       __size_of_Process_PS2_ScanCode 0561                ?_UART_send_break_timed 007A  
                 start_initialization 00F5                     ?i1_UARTstringWAIT 0021  
                           _ReadUSART 1890               __size_of_UARTstringWAIT 0031  
               CheckSum_byte@ThisTemp 0224                           __end_of_isr 00F3  
                          ?i1___lldiv 0070                    ??i1_UARTstringWAIT 0023  
    __end_ofi1_PS_2_DISABLE_INTERRUPT 190E                         WriteBaud@Baud 00A2  
                __end_of_Reverse_Byte 1F41                      ?i1_READ_PS_2_PIN 0070  
                          ?i1_delayUS 0070              ??_Decode_Scan_Code_Shift 0070  
                       WriteBaud@temp 006A                             _OpenUSART 1C9A  
                          ?_Data_TRIS 0070                              ??_UNLOCK 0070  
                        ??_ResendLast 007E                       ___llmod@divisor 0020  
                   __size_of_InitUART 00E5                       ___llmod@counter 0029  
                   __size_of_ReadBaud 0062                             _Shift_Key 01EF  
                        ??_Timer2Init 0220                             _Timer2OFF 1831  
             __end_ofi1_CheckSum_byte 1AC6                     ?_InternalADC_Read 022A  
                   __size_of_Send_PS2 0194                              ??___ftge 0226  
                            ??___lmul 0078              __size_of_BufferShiftBack 0041  
                  ??_InternalADC_Read 022C                     __size_of_Timer2ON 0003  
                __end_ofi1_Clock_TRIS 1886                           __pdataBANK1 00E4  
                         __pdataBANK4 0262                  __end_ofi1_CloseUSART 18C7  
                       i1ReadBaud@row 0024                     __size_of___ftpack 0065  
                    cleanBuffer@count 0070                    __end_of_ResendLast 0700  
                          ?_ReadUSART 0070                             ___latbits 0002  
                   __size_of___lwtoft 0015                         __pcstackBANK0 0020  
                       __pcstackBANK1 00A0                         __pcstackBANK2 0120  
                       __pcstackBANK3 01A0                         __pcstackBANK4 0220  
                           _WriteBaud 11B2                    i1UARTchar@override 0078  
                  ReadFlash_2Byte@row 0220                    __end_of_Timer2Init 1A6C  
                           _baudUSART 1873                    ReadFlash_4Byte@row 0225  
                         _cleanBuffer 100B                            ?_OpenUSART 0220  
                         sprintf@flag 0036                           sprintf@prec 0037  
                            ?_InitApp 0070                 __end_of_ScanCodeSHIFT 0866  
     Decode_Scan_Code_FunctionE0@Code 0070                              ?_SetBaud 00AF  
             __end_of_READ_CONFIG_PIN 1863                        ReadBaud@column 0234  
                          ?_Timer2OFF 0070                          ?_Timer2Reset 0070  
                            ?___ftdiv 022C                              ?___lldiv 0220  
                 i1Send_PS2@oddparity 0020                              ?___ftmul 023C  
                            ?___llmod 0020                      __CFG_PPS1WAY$OFF 0000  
       WriteFlash_Sequential@TempBufH 0023         WriteFlash_Sequential@TempBufL 0043  
                            ?_delayUS 0220                WriteFlash_Sequential@i 0069  
          Decode_Scan_Code_Shift@Code 0070                              _BAUD1CON 019F  
                         ??_PS_2_INIT 0233                      i1InitUART@config 0030  
                            _BAUDMODE 00CC                 __size_of_PS2RawToScan 004E  
                    i1InitUART@parity 0024                         ??i1_Data_TRIS 0070  
                    _Decode_Scan_Code 190E                    __end_of_VoltageMSG 0966  
                          ?_WriteBaud 00A0      i1PS_2_DISABLE_INTERRUPT@DATA_CLK 0071  
                         ??i1___lldiv 0078                 __end_of_READ_PS_2_PIN 1990  
                            ?_sprintf 002A                            ?_baudUSART 0070  
                         ??i1_delayUS 0074                             delayUS@US 0220  
     __size_of_Decode_Scan_Code_Shift 0012            ?_Decode_Scan_Code_Function 0070  
                         ??_Data_TRIS 0220            WriteFlash_Sequential@tempH 0063  
          WriteFlash_Sequential@tempL 0064              i1_PS_2_DISABLE_INTERRUPT 18FD  
                           clear_ram0 1856                              _PIE1bits 0091  
                        cleanBuffer@i 0074                  BufferShiftBack@shift 0070  
                            _ISNUMBER 18D3                              _PIR1bits 0011  
                    ?i1_CheckSum_byte 0070              __size_of_UART_send_break 0005  
            WriteFlash_Sequential@row 007A                              _UARTchar 10E8  
                i1Data_TRIS@direction 0070                          _PS2RawToScan 1DFA  
                       ??i1_ReadUSART 0070                              _LControl 00D0  
                __size_of_Init_System 0114              ?i1_PS_2_ENABLE_INTERRUPT 0070  
      __size_of_WriteFlash_Sequential 00CC                     ??_BufferShiftBack 0072  
               i1ReadFlash_4Byte@temp 0020         __end_of_WriteFlash_Sequential 1441  
               __size_of_Reverse_Byte 0054                        _UARTstringWAIT 1B84  
                         ??_ReadUSART 0220                  __size_of_ReadVoltage 005D  
                            _RControl 00D4                         ??i1_OpenUSART 0072  
            ??_PS_2_DISABLE_INTERRUPT 0220               ??_PS_2_ENABLE_INTERRUPT 0220  
                   ___lmul@multiplier 0070                              SetBaud@i 015E  
                            _InitUART 1441                              _ReadBaud 1023  
                         ??_OpenUSART 0222                   __end_ofi1_Data_TRIS 1890  
                i1UARTstringWAIT@data 0021                              _ScanCode 0784  
                     OpenUSART@config 0222     __end_of_Decode_Scan_Code_Function 0A51  
                            _Send_PS2 0E6C                 __size_ofi1_Clock_TRIS 000A  
                    __size_of_InitApp 0024                           ??_Timer2OFF 0070  
                    ?_READ_CONFIG_PIN 0070                              _Timer2ON 183A  
                    __size_of_SetBaud 0179                 __size_ofi1_CloseUSART 000C  
                        _Reverse_Byte 1EED                      __size_of___ftdiv 00A9  
                     cleanBuffer@data 0073                _Decode_Scan_Code_Shift 1932  
                    __size_of___lldiv 0053                      __size_of___ftmul 00B4  
                    __size_of___llmod 0043                         SetBaud@Parity 00B3  
                            ___ftpack 114D                        _PS_2_ScanCodes 00D8  
             ??_UART_send_break_timed 007C                      __size_of_delayUS 0035  
         __size_of_DisableInternalADC 0007                __end_of_UARTstringWAIT 1BB5  
                            ___lwtoft 1990                       Send_PS2@command 022F  
                       ??i1_baudUSART 0070                            sprintf@val 0039  
                 __end_ofi1_ReadUSART 1873                 i1Clock_TRIS@direction 0070  
                         ??_WriteBaud 00A7                         ISNUMBER@ascii 0070  
                     Send_PS2@timeout 0231                              __ptext10 1A41  
                            __ptext11 183A                              __ptext20 1B84  
                            __ptext12 0688                              __ptext21 1BE8  
                            __ptext13 0E6C                              __ptext30 1890  
                            __ptext22 10E8                              __ptext14 197C  
                            __ptext31 1C9A                              __ptext23 1AF5  
                            __ptext15 1000                              __ptext40 06F8  
                            __ptext32 18E0                              __ptext24 1023  
                            __ptext16 18B0                              __ptext41 18FD  
                            __ptext33 19A5                              __ptext25 1DAD  
                            __ptext17 1969                              __ptext50 19C9  
                            __ptext42 185C                              __ptext34 1944  
                            __ptext26 1B54                              __ptext18 18C7  
                            __ptext51 1845                              __ptext43 0127  
                            __ptext27 1441                              __ptext19 0A51  
                            __ptext60 1A6C                              __ptext52 0B65  
                            __ptext44 0CDE                              __ptext36 1837  
                            __ptext28 1873                              __ptext61 18BB  
                            __ptext53 1B24                              __ptext45 1956  
                            __ptext37 18A5                              __ptext29 1E9A  
                            __ptext70 189A                              __ptext62 170A  
                            __ptext54 1085                              __ptext46 1886  
                            __ptext38 1834                              __ptext71 18D3  
                            __ptext63 1E48                              __ptext55 1F9E  
                            __ptext47 187C                              __ptext39 1831  
                            __ptext72 1932                              __ptext64 1D1D  
                            __ptext56 1D60                              __ptext48 100B  
                            __ptext73 1920                              __ptext65 11B2  
                            __ptext57 1526                              __ptext49 1AC6  
                            __ptext74 0A41                              __ptext66 1375  
                            __ptext58 184A                              __ptext75 190E  
                            __ptext67 1BB5                              __ptext59 186A  
                            __ptext76 1C59                              __ptext68 19EE  
                            __ptext77 1DFA                              __ptext69 1A16  
                            __ptext78 1A98                              __ptext79 1EED  
       PS_2_ENABLE_INTERRUPT@DATA_CLK 0220                     i1_ReadFlash_2Byte 19EE  
                   i1_ReadFlash_4Byte 1D60                           ??_baudUSART 0220  
                        i1_Clock_TRIS 187C                      __size_of_sprintf 00F6  
                  ?i1_ReadFlash_2Byte 0070                    ?i1_ReadFlash_4Byte 0075  
                 __end_ofi1_OpenUSART 1A98                         __size_of_main 00F5  
                        i1_CloseUSART 18BB              __size_of_ReadFlash_2Byte 0030  
            __size_of_ReadFlash_4Byte 004D          __end_of_Process_PS2_ScanCode 0688  
                            delayUS@i 0225                              delayUS@j 0229  
           __size_ofi1_UARTstringWAIT 0030                          _pwrLEDtoggle 025C  
        __size_of_ConfigureOscillator 0012                 __end_of_CheckSum_byte 1B24  
                 ??i1_ReadFlash_2Byte 0073                   ??i1_ReadFlash_4Byte 0079  
                          _RC1STAbits 019D                        CheckSum_byte@i 0227  
                      _Left_Shift_Key 01EB                  __size_of_Timer2Reset 0003  
     __end_ofi1_PS_2_ENABLE_INTERRUPT 18B0               __size_of_Init_PS_2_Send 0070  
                      Timer2Init@time 0222                     ??_UART_send_break 0070  
                     ?_UARTstringWAIT 022F                   CheckSum_byte@Parity 0226  
                          _INTCONbits 000B             __size_of_InternalADC_Read 0042  
                      OpenUSART@spbrg 0220             __end_ofi1_ReadFlash_2Byte 1A16  
           __end_ofi1_ReadFlash_4Byte 1DAD                          UARTchar@data 022E  
                         i1_Data_TRIS 1886       __size_of_PS_2_DISABLE_INTERRUPT 0013  
                 __end_ofi1_baudUSART 1850                              intlevel1 0000  
                           sprintf@ap 003D                             sprintf@sp 003E  
                        ?_cleanBuffer 0070                      ___lldiv@dividend 0224  
 __end_of_Decode_Scan_Code_FunctionE0 1932           _Decode_Scan_Code_FunctionE0 1920  
                   __CFG_CLKOUTEN$OFF 0000                        _BatteryVoltage 0257  
            __size_ofi1_READ_PS_2_PIN 0013              __end_of_Decode_Scan_Code 1920  
                          i1_UARTchar 1085                       _Right_Shift_Key 01EE  
                         i1Send_PS2@i 0022                           i1_ReadUSART 186A  
                       _EvenParityMSG 08FB                              sprintf@c 003F  
                            sprintf@f 002A                      i1ReadBaud@column 0026  
                    ___lldiv@quotient 0229               i1ReadFlash_2Byte@column 0072  
                Decode_Scan_Code@Code 0070            ??i1_PS_2_DISABLE_INTERRUPT 0070  
                         i1_OpenUSART 1A6C                     Init_System@Parity 0250  
                  _Left_Shift_Key_old 00D1                            _TX1STAbits 019E  
                          i1_InitUART 1526                     CheckSum_byte@This 0220  
                      i1UARTchar@data 0020                            i1_ReadBaud 1F9E  
                       _MarkParityMSG 094A                            i1_Send_PS2 0CDE  
         ??_Decode_Scan_Code_Function 0070                       Init_System@Baud 024C  
                          i1_Timer2ON 1837                       Init_System@temp 0248  
                     PS2RawToScan@Raw 0078        PS_2_DISABLE_INTERRUPT@DATA_CLK 0221  
                    PS2RawToScan@temp 007A  
