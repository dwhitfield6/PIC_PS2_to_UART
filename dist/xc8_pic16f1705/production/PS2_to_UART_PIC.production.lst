

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Tue Mar 03 17:21:48 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F1705
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK4,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    12                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	intentry,global,class=CODE,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	dabs	1,0x7E,2
   101  0000                     	;# 
   102  0001                     	;# 
   103  0002                     	;# 
   104  0003                     	;# 
   105  0004                     	;# 
   106  0005                     	;# 
   107  0006                     	;# 
   108  0007                     	;# 
   109  0008                     	;# 
   110  0009                     	;# 
   111  000A                     	;# 
   112  000B                     	;# 
   113  000C                     	;# 
   114  000E                     	;# 
   115  0011                     	;# 
   116  0012                     	;# 
   117  0013                     	;# 
   118  0015                     	;# 
   119  0016                     	;# 
   120  0016                     	;# 
   121  0017                     	;# 
   122  0018                     	;# 
   123  0019                     	;# 
   124  001A                     	;# 
   125  001B                     	;# 
   126  001C                     	;# 
   127  008C                     	;# 
   128  008E                     	;# 
   129  0091                     	;# 
   130  0092                     	;# 
   131  0093                     	;# 
   132  0095                     	;# 
   133  0096                     	;# 
   134  0097                     	;# 
   135  0098                     	;# 
   136  0099                     	;# 
   137  009A                     	;# 
   138  009B                     	;# 
   139  009B                     	;# 
   140  009C                     	;# 
   141  009D                     	;# 
   142  009E                     	;# 
   143  009F                     	;# 
   144  010C                     	;# 
   145  010E                     	;# 
   146  0111                     	;# 
   147  0112                     	;# 
   148  0113                     	;# 
   149  0114                     	;# 
   150  0115                     	;# 
   151  0116                     	;# 
   152  0117                     	;# 
   153  0118                     	;# 
   154  0119                     	;# 
   155  011C                     	;# 
   156  018C                     	;# 
   157  018E                     	;# 
   158  0191                     	;# 
   159  0191                     	;# 
   160  0192                     	;# 
   161  0193                     	;# 
   162  0193                     	;# 
   163  0194                     	;# 
   164  0195                     	;# 
   165  0196                     	;# 
   166  0197                     	;# 
   167  0199                     	;# 
   168  0199                     	;# 
   169  0199                     	;# 
   170  019A                     	;# 
   171  019A                     	;# 
   172  019A                     	;# 
   173  019B                     	;# 
   174  019B                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019C                     	;# 
   179  019C                     	;# 
   180  019C                     	;# 
   181  019D                     	;# 
   182  019D                     	;# 
   183  019D                     	;# 
   184  019E                     	;# 
   185  019E                     	;# 
   186  019E                     	;# 
   187  019F                     	;# 
   188  019F                     	;# 
   189  019F                     	;# 
   190  019F                     	;# 
   191  019F                     	;# 
   192  020C                     	;# 
   193  020E                     	;# 
   194  0211                     	;# 
   195  0211                     	;# 
   196  0212                     	;# 
   197  0212                     	;# 
   198  0213                     	;# 
   199  0213                     	;# 
   200  0214                     	;# 
   201  0214                     	;# 
   202  0215                     	;# 
   203  0215                     	;# 
   204  0215                     	;# 
   205  0215                     	;# 
   206  0216                     	;# 
   207  0216                     	;# 
   208  0217                     	;# 
   209  0217                     	;# 
   210  028C                     	;# 
   211  028E                     	;# 
   212  0291                     	;# 
   213  0291                     	;# 
   214  0292                     	;# 
   215  0293                     	;# 
   216  0293                     	;# 
   217  0298                     	;# 
   218  0298                     	;# 
   219  0299                     	;# 
   220  029A                     	;# 
   221  029A                     	;# 
   222  029E                     	;# 
   223  030C                     	;# 
   224  030E                     	;# 
   225  038C                     	;# 
   226  038E                     	;# 
   227  0391                     	;# 
   228  0392                     	;# 
   229  0393                     	;# 
   230  0397                     	;# 
   231  0398                     	;# 
   232  0399                     	;# 
   233  0415                     	;# 
   234  0416                     	;# 
   235  0417                     	;# 
   236  041C                     	;# 
   237  041D                     	;# 
   238  041E                     	;# 
   239  0511                     	;# 
   240  0515                     	;# 
   241  0617                     	;# 
   242  0618                     	;# 
   243  0619                     	;# 
   244  0619                     	;# 
   245  061A                     	;# 
   246  061B                     	;# 
   247  061C                     	;# 
   248  061C                     	;# 
   249  0691                     	;# 
   250  0692                     	;# 
   251  0693                     	;# 
   252  0694                     	;# 
   253  0695                     	;# 
   254  0696                     	;# 
   255  0697                     	;# 
   256  0698                     	;# 
   257  0699                     	;# 
   258  069A                     	;# 
   259  069B                     	;# 
   260  069C                     	;# 
   261  069D                     	;# 
   262  069E                     	;# 
   263  069F                     	;# 
   264  0E0F                     	;# 
   265  0E10                     	;# 
   266  0E11                     	;# 
   267  0E12                     	;# 
   268  0E13                     	;# 
   269  0E14                     	;# 
   270  0E15                     	;# 
   271  0E17                     	;# 
   272  0E20                     	;# 
   273  0E21                     	;# 
   274  0E22                     	;# 
   275  0E24                     	;# 
   276  0E25                     	;# 
   277  0E28                     	;# 
   278  0E29                     	;# 
   279  0E2A                     	;# 
   280  0E2B                     	;# 
   281  0E90                     	;# 
   282  0E91                     	;# 
   283  0E92                     	;# 
   284  0E94                     	;# 
   285  0E95                     	;# 
   286  0EA0                     	;# 
   287  0EA1                     	;# 
   288  0EA2                     	;# 
   289  0EA3                     	;# 
   290  0EA4                     	;# 
   291  0EA5                     	;# 
   292  0F0F                     	;# 
   293  0F10                     	;# 
   294  0F11                     	;# 
   295  0F12                     	;# 
   296  0F13                     	;# 
   297  0F14                     	;# 
   298  0F15                     	;# 
   299  0F16                     	;# 
   300  0F17                     	;# 
   301  0F18                     	;# 
   302  0F19                     	;# 
   303  0F1A                     	;# 
   304  0F1B                     	;# 
   305  0F1C                     	;# 
   306  0F1D                     	;# 
   307  0F1E                     	;# 
   308  0F1F                     	;# 
   309  0F20                     	;# 
   310  0F21                     	;# 
   311  0F22                     	;# 
   312  0F23                     	;# 
   313  0F24                     	;# 
   314  0F25                     	;# 
   315  0F26                     	;# 
   316  0F27                     	;# 
   317  0F28                     	;# 
   318  0F29                     	;# 
   319  0F2A                     	;# 
   320  0F2B                     	;# 
   321  0F2C                     	;# 
   322  0F2D                     	;# 
   323  0F9E                     	;# 
   324  0FE4                     	;# 
   325  0FE5                     	;# 
   326  0FE6                     	;# 
   327  0FE7                     	;# 
   328  0FE8                     	;# 
   329  0FE9                     	;# 
   330  0FEA                     	;# 
   331  0FEB                     	;# 
   332  0FED                     	;# 
   333  0FEE                     	;# 
   334  0FEF                     	;# 
   335  0000                     	;# 
   336  0001                     	;# 
   337  0002                     	;# 
   338  0003                     	;# 
   339  0004                     	;# 
   340  0005                     	;# 
   341  0006                     	;# 
   342  0007                     	;# 
   343  0008                     	;# 
   344  0009                     	;# 
   345  000A                     	;# 
   346  000B                     	;# 
   347  000C                     	;# 
   348  000E                     	;# 
   349  0011                     	;# 
   350  0012                     	;# 
   351  0013                     	;# 
   352  0015                     	;# 
   353  0016                     	;# 
   354  0016                     	;# 
   355  0017                     	;# 
   356  0018                     	;# 
   357  0019                     	;# 
   358  001A                     	;# 
   359  001B                     	;# 
   360  001C                     	;# 
   361  008C                     	;# 
   362  008E                     	;# 
   363  0091                     	;# 
   364  0092                     	;# 
   365  0093                     	;# 
   366  0095                     	;# 
   367  0096                     	;# 
   368  0097                     	;# 
   369  0098                     	;# 
   370  0099                     	;# 
   371  009A                     	;# 
   372  009B                     	;# 
   373  009B                     	;# 
   374  009C                     	;# 
   375  009D                     	;# 
   376  009E                     	;# 
   377  009F                     	;# 
   378  010C                     	;# 
   379  010E                     	;# 
   380  0111                     	;# 
   381  0112                     	;# 
   382  0113                     	;# 
   383  0114                     	;# 
   384  0115                     	;# 
   385  0116                     	;# 
   386  0117                     	;# 
   387  0118                     	;# 
   388  0119                     	;# 
   389  011C                     	;# 
   390  018C                     	;# 
   391  018E                     	;# 
   392  0191                     	;# 
   393  0191                     	;# 
   394  0192                     	;# 
   395  0193                     	;# 
   396  0193                     	;# 
   397  0194                     	;# 
   398  0195                     	;# 
   399  0196                     	;# 
   400  0197                     	;# 
   401  0199                     	;# 
   402  0199                     	;# 
   403  0199                     	;# 
   404  019A                     	;# 
   405  019A                     	;# 
   406  019A                     	;# 
   407  019B                     	;# 
   408  019B                     	;# 
   409  019B                     	;# 
   410  019B                     	;# 
   411  019B                     	;# 
   412  019C                     	;# 
   413  019C                     	;# 
   414  019C                     	;# 
   415  019D                     	;# 
   416  019D                     	;# 
   417  019D                     	;# 
   418  019E                     	;# 
   419  019E                     	;# 
   420  019E                     	;# 
   421  019F                     	;# 
   422  019F                     	;# 
   423  019F                     	;# 
   424  019F                     	;# 
   425  019F                     	;# 
   426  020C                     	;# 
   427  020E                     	;# 
   428  0211                     	;# 
   429  0211                     	;# 
   430  0212                     	;# 
   431  0212                     	;# 
   432  0213                     	;# 
   433  0213                     	;# 
   434  0214                     	;# 
   435  0214                     	;# 
   436  0215                     	;# 
   437  0215                     	;# 
   438  0215                     	;# 
   439  0215                     	;# 
   440  0216                     	;# 
   441  0216                     	;# 
   442  0217                     	;# 
   443  0217                     	;# 
   444  028C                     	;# 
   445  028E                     	;# 
   446  0291                     	;# 
   447  0291                     	;# 
   448  0292                     	;# 
   449  0293                     	;# 
   450  0293                     	;# 
   451  0298                     	;# 
   452  0298                     	;# 
   453  0299                     	;# 
   454  029A                     	;# 
   455  029A                     	;# 
   456  029E                     	;# 
   457  030C                     	;# 
   458  030E                     	;# 
   459  038C                     	;# 
   460  038E                     	;# 
   461  0391                     	;# 
   462  0392                     	;# 
   463  0393                     	;# 
   464  0397                     	;# 
   465  0398                     	;# 
   466  0399                     	;# 
   467  0415                     	;# 
   468  0416                     	;# 
   469  0417                     	;# 
   470  041C                     	;# 
   471  041D                     	;# 
   472  041E                     	;# 
   473  0511                     	;# 
   474  0515                     	;# 
   475  0617                     	;# 
   476  0618                     	;# 
   477  0619                     	;# 
   478  0619                     	;# 
   479  061A                     	;# 
   480  061B                     	;# 
   481  061C                     	;# 
   482  061C                     	;# 
   483  0691                     	;# 
   484  0692                     	;# 
   485  0693                     	;# 
   486  0694                     	;# 
   487  0695                     	;# 
   488  0696                     	;# 
   489  0697                     	;# 
   490  0698                     	;# 
   491  0699                     	;# 
   492  069A                     	;# 
   493  069B                     	;# 
   494  069C                     	;# 
   495  069D                     	;# 
   496  069E                     	;# 
   497  069F                     	;# 
   498  0E0F                     	;# 
   499  0E10                     	;# 
   500  0E11                     	;# 
   501  0E12                     	;# 
   502  0E13                     	;# 
   503  0E14                     	;# 
   504  0E15                     	;# 
   505  0E17                     	;# 
   506  0E20                     	;# 
   507  0E21                     	;# 
   508  0E22                     	;# 
   509  0E24                     	;# 
   510  0E25                     	;# 
   511  0E28                     	;# 
   512  0E29                     	;# 
   513  0E2A                     	;# 
   514  0E2B                     	;# 
   515  0E90                     	;# 
   516  0E91                     	;# 
   517  0E92                     	;# 
   518  0E94                     	;# 
   519  0E95                     	;# 
   520  0EA0                     	;# 
   521  0EA1                     	;# 
   522  0EA2                     	;# 
   523  0EA3                     	;# 
   524  0EA4                     	;# 
   525  0EA5                     	;# 
   526  0F0F                     	;# 
   527  0F10                     	;# 
   528  0F11                     	;# 
   529  0F12                     	;# 
   530  0F13                     	;# 
   531  0F14                     	;# 
   532  0F15                     	;# 
   533  0F16                     	;# 
   534  0F17                     	;# 
   535  0F18                     	;# 
   536  0F19                     	;# 
   537  0F1A                     	;# 
   538  0F1B                     	;# 
   539  0F1C                     	;# 
   540  0F1D                     	;# 
   541  0F1E                     	;# 
   542  0F1F                     	;# 
   543  0F20                     	;# 
   544  0F21                     	;# 
   545  0F22                     	;# 
   546  0F23                     	;# 
   547  0F24                     	;# 
   548  0F25                     	;# 
   549  0F26                     	;# 
   550  0F27                     	;# 
   551  0F28                     	;# 
   552  0F29                     	;# 
   553  0F2A                     	;# 
   554  0F2B                     	;# 
   555  0F2C                     	;# 
   556  0F2D                     	;# 
   557  0F9E                     	;# 
   558  0FE4                     	;# 
   559  0FE5                     	;# 
   560  0FE6                     	;# 
   561  0FE7                     	;# 
   562  0FE8                     	;# 
   563  0FE9                     	;# 
   564  0FEA                     	;# 
   565  0FEB                     	;# 
   566  0FED                     	;# 
   567  0FEE                     	;# 
   568  0FEF                     	;# 
   569  0000                     	;# 
   570  0001                     	;# 
   571  0002                     	;# 
   572  0003                     	;# 
   573  0004                     	;# 
   574  0005                     	;# 
   575  0006                     	;# 
   576  0007                     	;# 
   577  0008                     	;# 
   578  0009                     	;# 
   579  000A                     	;# 
   580  000B                     	;# 
   581  000C                     	;# 
   582  000E                     	;# 
   583  0011                     	;# 
   584  0012                     	;# 
   585  0013                     	;# 
   586  0015                     	;# 
   587  0016                     	;# 
   588  0016                     	;# 
   589  0017                     	;# 
   590  0018                     	;# 
   591  0019                     	;# 
   592  001A                     	;# 
   593  001B                     	;# 
   594  001C                     	;# 
   595  008C                     	;# 
   596  008E                     	;# 
   597  0091                     	;# 
   598  0092                     	;# 
   599  0093                     	;# 
   600  0095                     	;# 
   601  0096                     	;# 
   602  0097                     	;# 
   603  0098                     	;# 
   604  0099                     	;# 
   605  009A                     	;# 
   606  009B                     	;# 
   607  009B                     	;# 
   608  009C                     	;# 
   609  009D                     	;# 
   610  009E                     	;# 
   611  009F                     	;# 
   612  010C                     	;# 
   613  010E                     	;# 
   614  0111                     	;# 
   615  0112                     	;# 
   616  0113                     	;# 
   617  0114                     	;# 
   618  0115                     	;# 
   619  0116                     	;# 
   620  0117                     	;# 
   621  0118                     	;# 
   622  0119                     	;# 
   623  011C                     	;# 
   624  018C                     	;# 
   625  018E                     	;# 
   626  0191                     	;# 
   627  0191                     	;# 
   628  0192                     	;# 
   629  0193                     	;# 
   630  0193                     	;# 
   631  0194                     	;# 
   632  0195                     	;# 
   633  0196                     	;# 
   634  0197                     	;# 
   635  0199                     	;# 
   636  0199                     	;# 
   637  0199                     	;# 
   638  019A                     	;# 
   639  019A                     	;# 
   640  019A                     	;# 
   641  019B                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019C                     	;# 
   647  019C                     	;# 
   648  019C                     	;# 
   649  019D                     	;# 
   650  019D                     	;# 
   651  019D                     	;# 
   652  019E                     	;# 
   653  019E                     	;# 
   654  019E                     	;# 
   655  019F                     	;# 
   656  019F                     	;# 
   657  019F                     	;# 
   658  019F                     	;# 
   659  019F                     	;# 
   660  020C                     	;# 
   661  020E                     	;# 
   662  0211                     	;# 
   663  0211                     	;# 
   664  0212                     	;# 
   665  0212                     	;# 
   666  0213                     	;# 
   667  0213                     	;# 
   668  0214                     	;# 
   669  0214                     	;# 
   670  0215                     	;# 
   671  0215                     	;# 
   672  0215                     	;# 
   673  0215                     	;# 
   674  0216                     	;# 
   675  0216                     	;# 
   676  0217                     	;# 
   677  0217                     	;# 
   678  028C                     	;# 
   679  028E                     	;# 
   680  0291                     	;# 
   681  0291                     	;# 
   682  0292                     	;# 
   683  0293                     	;# 
   684  0293                     	;# 
   685  0298                     	;# 
   686  0298                     	;# 
   687  0299                     	;# 
   688  029A                     	;# 
   689  029A                     	;# 
   690  029E                     	;# 
   691  030C                     	;# 
   692  030E                     	;# 
   693  038C                     	;# 
   694  038E                     	;# 
   695  0391                     	;# 
   696  0392                     	;# 
   697  0393                     	;# 
   698  0397                     	;# 
   699  0398                     	;# 
   700  0399                     	;# 
   701  0415                     	;# 
   702  0416                     	;# 
   703  0417                     	;# 
   704  041C                     	;# 
   705  041D                     	;# 
   706  041E                     	;# 
   707  0511                     	;# 
   708  0515                     	;# 
   709  0617                     	;# 
   710  0618                     	;# 
   711  0619                     	;# 
   712  0619                     	;# 
   713  061A                     	;# 
   714  061B                     	;# 
   715  061C                     	;# 
   716  061C                     	;# 
   717  0691                     	;# 
   718  0692                     	;# 
   719  0693                     	;# 
   720  0694                     	;# 
   721  0695                     	;# 
   722  0696                     	;# 
   723  0697                     	;# 
   724  0698                     	;# 
   725  0699                     	;# 
   726  069A                     	;# 
   727  069B                     	;# 
   728  069C                     	;# 
   729  069D                     	;# 
   730  069E                     	;# 
   731  069F                     	;# 
   732  0E0F                     	;# 
   733  0E10                     	;# 
   734  0E11                     	;# 
   735  0E12                     	;# 
   736  0E13                     	;# 
   737  0E14                     	;# 
   738  0E15                     	;# 
   739  0E17                     	;# 
   740  0E20                     	;# 
   741  0E21                     	;# 
   742  0E22                     	;# 
   743  0E24                     	;# 
   744  0E25                     	;# 
   745  0E28                     	;# 
   746  0E29                     	;# 
   747  0E2A                     	;# 
   748  0E2B                     	;# 
   749  0E90                     	;# 
   750  0E91                     	;# 
   751  0E92                     	;# 
   752  0E94                     	;# 
   753  0E95                     	;# 
   754  0EA0                     	;# 
   755  0EA1                     	;# 
   756  0EA2                     	;# 
   757  0EA3                     	;# 
   758  0EA4                     	;# 
   759  0EA5                     	;# 
   760  0F0F                     	;# 
   761  0F10                     	;# 
   762  0F11                     	;# 
   763  0F12                     	;# 
   764  0F13                     	;# 
   765  0F14                     	;# 
   766  0F15                     	;# 
   767  0F16                     	;# 
   768  0F17                     	;# 
   769  0F18                     	;# 
   770  0F19                     	;# 
   771  0F1A                     	;# 
   772  0F1B                     	;# 
   773  0F1C                     	;# 
   774  0F1D                     	;# 
   775  0F1E                     	;# 
   776  0F1F                     	;# 
   777  0F20                     	;# 
   778  0F21                     	;# 
   779  0F22                     	;# 
   780  0F23                     	;# 
   781  0F24                     	;# 
   782  0F25                     	;# 
   783  0F26                     	;# 
   784  0F27                     	;# 
   785  0F28                     	;# 
   786  0F29                     	;# 
   787  0F2A                     	;# 
   788  0F2B                     	;# 
   789  0F2C                     	;# 
   790  0F2D                     	;# 
   791  0F9E                     	;# 
   792  0FE4                     	;# 
   793  0FE5                     	;# 
   794  0FE6                     	;# 
   795  0FE7                     	;# 
   796  0FE8                     	;# 
   797  0FE9                     	;# 
   798  0FEA                     	;# 
   799  0FEB                     	;# 
   800  0FED                     	;# 
   801  0FEE                     	;# 
   802  0FEF                     	;# 
   803  0000                     	;# 
   804  0001                     	;# 
   805  0002                     	;# 
   806  0003                     	;# 
   807  0004                     	;# 
   808  0005                     	;# 
   809  0006                     	;# 
   810  0007                     	;# 
   811  0008                     	;# 
   812  0009                     	;# 
   813  000A                     	;# 
   814  000B                     	;# 
   815  000C                     	;# 
   816  000E                     	;# 
   817  0011                     	;# 
   818  0012                     	;# 
   819  0013                     	;# 
   820  0015                     	;# 
   821  0016                     	;# 
   822  0016                     	;# 
   823  0017                     	;# 
   824  0018                     	;# 
   825  0019                     	;# 
   826  001A                     	;# 
   827  001B                     	;# 
   828  001C                     	;# 
   829  008C                     	;# 
   830  008E                     	;# 
   831  0091                     	;# 
   832  0092                     	;# 
   833  0093                     	;# 
   834  0095                     	;# 
   835  0096                     	;# 
   836  0097                     	;# 
   837  0098                     	;# 
   838  0099                     	;# 
   839  009A                     	;# 
   840  009B                     	;# 
   841  009B                     	;# 
   842  009C                     	;# 
   843  009D                     	;# 
   844  009E                     	;# 
   845  009F                     	;# 
   846  010C                     	;# 
   847  010E                     	;# 
   848  0111                     	;# 
   849  0112                     	;# 
   850  0113                     	;# 
   851  0114                     	;# 
   852  0115                     	;# 
   853  0116                     	;# 
   854  0117                     	;# 
   855  0118                     	;# 
   856  0119                     	;# 
   857  011C                     	;# 
   858  018C                     	;# 
   859  018E                     	;# 
   860  0191                     	;# 
   861  0191                     	;# 
   862  0192                     	;# 
   863  0193                     	;# 
   864  0193                     	;# 
   865  0194                     	;# 
   866  0195                     	;# 
   867  0196                     	;# 
   868  0197                     	;# 
   869  0199                     	;# 
   870  0199                     	;# 
   871  0199                     	;# 
   872  019A                     	;# 
   873  019A                     	;# 
   874  019A                     	;# 
   875  019B                     	;# 
   876  019B                     	;# 
   877  019B                     	;# 
   878  019B                     	;# 
   879  019B                     	;# 
   880  019C                     	;# 
   881  019C                     	;# 
   882  019C                     	;# 
   883  019D                     	;# 
   884  019D                     	;# 
   885  019D                     	;# 
   886  019E                     	;# 
   887  019E                     	;# 
   888  019E                     	;# 
   889  019F                     	;# 
   890  019F                     	;# 
   891  019F                     	;# 
   892  019F                     	;# 
   893  019F                     	;# 
   894  020C                     	;# 
   895  020E                     	;# 
   896  0211                     	;# 
   897  0211                     	;# 
   898  0212                     	;# 
   899  0212                     	;# 
   900  0213                     	;# 
   901  0213                     	;# 
   902  0214                     	;# 
   903  0214                     	;# 
   904  0215                     	;# 
   905  0215                     	;# 
   906  0215                     	;# 
   907  0215                     	;# 
   908  0216                     	;# 
   909  0216                     	;# 
   910  0217                     	;# 
   911  0217                     	;# 
   912  028C                     	;# 
   913  028E                     	;# 
   914  0291                     	;# 
   915  0291                     	;# 
   916  0292                     	;# 
   917  0293                     	;# 
   918  0293                     	;# 
   919  0298                     	;# 
   920  0298                     	;# 
   921  0299                     	;# 
   922  029A                     	;# 
   923  029A                     	;# 
   924  029E                     	;# 
   925  030C                     	;# 
   926  030E                     	;# 
   927  038C                     	;# 
   928  038E                     	;# 
   929  0391                     	;# 
   930  0392                     	;# 
   931  0393                     	;# 
   932  0397                     	;# 
   933  0398                     	;# 
   934  0399                     	;# 
   935  0415                     	;# 
   936  0416                     	;# 
   937  0417                     	;# 
   938  041C                     	;# 
   939  041D                     	;# 
   940  041E                     	;# 
   941  0511                     	;# 
   942  0515                     	;# 
   943  0617                     	;# 
   944  0618                     	;# 
   945  0619                     	;# 
   946  0619                     	;# 
   947  061A                     	;# 
   948  061B                     	;# 
   949  061C                     	;# 
   950  061C                     	;# 
   951  0691                     	;# 
   952  0692                     	;# 
   953  0693                     	;# 
   954  0694                     	;# 
   955  0695                     	;# 
   956  0696                     	;# 
   957  0697                     	;# 
   958  0698                     	;# 
   959  0699                     	;# 
   960  069A                     	;# 
   961  069B                     	;# 
   962  069C                     	;# 
   963  069D                     	;# 
   964  069E                     	;# 
   965  069F                     	;# 
   966  0E0F                     	;# 
   967  0E10                     	;# 
   968  0E11                     	;# 
   969  0E12                     	;# 
   970  0E13                     	;# 
   971  0E14                     	;# 
   972  0E15                     	;# 
   973  0E17                     	;# 
   974  0E20                     	;# 
   975  0E21                     	;# 
   976  0E22                     	;# 
   977  0E24                     	;# 
   978  0E25                     	;# 
   979  0E28                     	;# 
   980  0E29                     	;# 
   981  0E2A                     	;# 
   982  0E2B                     	;# 
   983  0E90                     	;# 
   984  0E91                     	;# 
   985  0E92                     	;# 
   986  0E94                     	;# 
   987  0E95                     	;# 
   988  0EA0                     	;# 
   989  0EA1                     	;# 
   990  0EA2                     	;# 
   991  0EA3                     	;# 
   992  0EA4                     	;# 
   993  0EA5                     	;# 
   994  0F0F                     	;# 
   995  0F10                     	;# 
   996  0F11                     	;# 
   997  0F12                     	;# 
   998  0F13                     	;# 
   999  0F14                     	;# 
  1000  0F15                     	;# 
  1001  0F16                     	;# 
  1002  0F17                     	;# 
  1003  0F18                     	;# 
  1004  0F19                     	;# 
  1005  0F1A                     	;# 
  1006  0F1B                     	;# 
  1007  0F1C                     	;# 
  1008  0F1D                     	;# 
  1009  0F1E                     	;# 
  1010  0F1F                     	;# 
  1011  0F20                     	;# 
  1012  0F21                     	;# 
  1013  0F22                     	;# 
  1014  0F23                     	;# 
  1015  0F24                     	;# 
  1016  0F25                     	;# 
  1017  0F26                     	;# 
  1018  0F27                     	;# 
  1019  0F28                     	;# 
  1020  0F29                     	;# 
  1021  0F2A                     	;# 
  1022  0F2B                     	;# 
  1023  0F2C                     	;# 
  1024  0F2D                     	;# 
  1025  0F9E                     	;# 
  1026  0FE4                     	;# 
  1027  0FE5                     	;# 
  1028  0FE6                     	;# 
  1029  0FE7                     	;# 
  1030  0FE8                     	;# 
  1031  0FE9                     	;# 
  1032  0FEA                     	;# 
  1033  0FEB                     	;# 
  1034  0FED                     	;# 
  1035  0FEE                     	;# 
  1036  0FEF                     	;# 
  1037  0000                     	;# 
  1038  0001                     	;# 
  1039  0002                     	;# 
  1040  0003                     	;# 
  1041  0004                     	;# 
  1042  0005                     	;# 
  1043  0006                     	;# 
  1044  0007                     	;# 
  1045  0008                     	;# 
  1046  0009                     	;# 
  1047  000A                     	;# 
  1048  000B                     	;# 
  1049  000C                     	;# 
  1050  000E                     	;# 
  1051  0011                     	;# 
  1052  0012                     	;# 
  1053  0013                     	;# 
  1054  0015                     	;# 
  1055  0016                     	;# 
  1056  0016                     	;# 
  1057  0017                     	;# 
  1058  0018                     	;# 
  1059  0019                     	;# 
  1060  001A                     	;# 
  1061  001B                     	;# 
  1062  001C                     	;# 
  1063  008C                     	;# 
  1064  008E                     	;# 
  1065  0091                     	;# 
  1066  0092                     	;# 
  1067  0093                     	;# 
  1068  0095                     	;# 
  1069  0096                     	;# 
  1070  0097                     	;# 
  1071  0098                     	;# 
  1072  0099                     	;# 
  1073  009A                     	;# 
  1074  009B                     	;# 
  1075  009B                     	;# 
  1076  009C                     	;# 
  1077  009D                     	;# 
  1078  009E                     	;# 
  1079  009F                     	;# 
  1080  010C                     	;# 
  1081  010E                     	;# 
  1082  0111                     	;# 
  1083  0112                     	;# 
  1084  0113                     	;# 
  1085  0114                     	;# 
  1086  0115                     	;# 
  1087  0116                     	;# 
  1088  0117                     	;# 
  1089  0118                     	;# 
  1090  0119                     	;# 
  1091  011C                     	;# 
  1092  018C                     	;# 
  1093  018E                     	;# 
  1094  0191                     	;# 
  1095  0191                     	;# 
  1096  0192                     	;# 
  1097  0193                     	;# 
  1098  0193                     	;# 
  1099  0194                     	;# 
  1100  0195                     	;# 
  1101  0196                     	;# 
  1102  0197                     	;# 
  1103  0199                     	;# 
  1104  0199                     	;# 
  1105  0199                     	;# 
  1106  019A                     	;# 
  1107  019A                     	;# 
  1108  019A                     	;# 
  1109  019B                     	;# 
  1110  019B                     	;# 
  1111  019B                     	;# 
  1112  019B                     	;# 
  1113  019B                     	;# 
  1114  019C                     	;# 
  1115  019C                     	;# 
  1116  019C                     	;# 
  1117  019D                     	;# 
  1118  019D                     	;# 
  1119  019D                     	;# 
  1120  019E                     	;# 
  1121  019E                     	;# 
  1122  019E                     	;# 
  1123  019F                     	;# 
  1124  019F                     	;# 
  1125  019F                     	;# 
  1126  019F                     	;# 
  1127  019F                     	;# 
  1128  020C                     	;# 
  1129  020E                     	;# 
  1130  0211                     	;# 
  1131  0211                     	;# 
  1132  0212                     	;# 
  1133  0212                     	;# 
  1134  0213                     	;# 
  1135  0213                     	;# 
  1136  0214                     	;# 
  1137  0214                     	;# 
  1138  0215                     	;# 
  1139  0215                     	;# 
  1140  0215                     	;# 
  1141  0215                     	;# 
  1142  0216                     	;# 
  1143  0216                     	;# 
  1144  0217                     	;# 
  1145  0217                     	;# 
  1146  028C                     	;# 
  1147  028E                     	;# 
  1148  0291                     	;# 
  1149  0291                     	;# 
  1150  0292                     	;# 
  1151  0293                     	;# 
  1152  0293                     	;# 
  1153  0298                     	;# 
  1154  0298                     	;# 
  1155  0299                     	;# 
  1156  029A                     	;# 
  1157  029A                     	;# 
  1158  029E                     	;# 
  1159  030C                     	;# 
  1160  030E                     	;# 
  1161  038C                     	;# 
  1162  038E                     	;# 
  1163  0391                     	;# 
  1164  0392                     	;# 
  1165  0393                     	;# 
  1166  0397                     	;# 
  1167  0398                     	;# 
  1168  0399                     	;# 
  1169  0415                     	;# 
  1170  0416                     	;# 
  1171  0417                     	;# 
  1172  041C                     	;# 
  1173  041D                     	;# 
  1174  041E                     	;# 
  1175  0511                     	;# 
  1176  0515                     	;# 
  1177  0617                     	;# 
  1178  0618                     	;# 
  1179  0619                     	;# 
  1180  0619                     	;# 
  1181  061A                     	;# 
  1182  061B                     	;# 
  1183  061C                     	;# 
  1184  061C                     	;# 
  1185  0691                     	;# 
  1186  0692                     	;# 
  1187  0693                     	;# 
  1188  0694                     	;# 
  1189  0695                     	;# 
  1190  0696                     	;# 
  1191  0697                     	;# 
  1192  0698                     	;# 
  1193  0699                     	;# 
  1194  069A                     	;# 
  1195  069B                     	;# 
  1196  069C                     	;# 
  1197  069D                     	;# 
  1198  069E                     	;# 
  1199  069F                     	;# 
  1200  0E0F                     	;# 
  1201  0E10                     	;# 
  1202  0E11                     	;# 
  1203  0E12                     	;# 
  1204  0E13                     	;# 
  1205  0E14                     	;# 
  1206  0E15                     	;# 
  1207  0E17                     	;# 
  1208  0E20                     	;# 
  1209  0E21                     	;# 
  1210  0E22                     	;# 
  1211  0E24                     	;# 
  1212  0E25                     	;# 
  1213  0E28                     	;# 
  1214  0E29                     	;# 
  1215  0E2A                     	;# 
  1216  0E2B                     	;# 
  1217  0E90                     	;# 
  1218  0E91                     	;# 
  1219  0E92                     	;# 
  1220  0E94                     	;# 
  1221  0E95                     	;# 
  1222  0EA0                     	;# 
  1223  0EA1                     	;# 
  1224  0EA2                     	;# 
  1225  0EA3                     	;# 
  1226  0EA4                     	;# 
  1227  0EA5                     	;# 
  1228  0F0F                     	;# 
  1229  0F10                     	;# 
  1230  0F11                     	;# 
  1231  0F12                     	;# 
  1232  0F13                     	;# 
  1233  0F14                     	;# 
  1234  0F15                     	;# 
  1235  0F16                     	;# 
  1236  0F17                     	;# 
  1237  0F18                     	;# 
  1238  0F19                     	;# 
  1239  0F1A                     	;# 
  1240  0F1B                     	;# 
  1241  0F1C                     	;# 
  1242  0F1D                     	;# 
  1243  0F1E                     	;# 
  1244  0F1F                     	;# 
  1245  0F20                     	;# 
  1246  0F21                     	;# 
  1247  0F22                     	;# 
  1248  0F23                     	;# 
  1249  0F24                     	;# 
  1250  0F25                     	;# 
  1251  0F26                     	;# 
  1252  0F27                     	;# 
  1253  0F28                     	;# 
  1254  0F29                     	;# 
  1255  0F2A                     	;# 
  1256  0F2B                     	;# 
  1257  0F2C                     	;# 
  1258  0F2D                     	;# 
  1259  0F9E                     	;# 
  1260  0FE4                     	;# 
  1261  0FE5                     	;# 
  1262  0FE6                     	;# 
  1263  0FE7                     	;# 
  1264  0FE8                     	;# 
  1265  0FE9                     	;# 
  1266  0FEA                     	;# 
  1267  0FEB                     	;# 
  1268  0FED                     	;# 
  1269  0FEE                     	;# 
  1270  0FEF                     	;# 
  1271  0000                     	;# 
  1272  0001                     	;# 
  1273  0002                     	;# 
  1274  0003                     	;# 
  1275  0004                     	;# 
  1276  0005                     	;# 
  1277  0006                     	;# 
  1278  0007                     	;# 
  1279  0008                     	;# 
  1280  0009                     	;# 
  1281  000A                     	;# 
  1282  000B                     	;# 
  1283  000C                     	;# 
  1284  000E                     	;# 
  1285  0011                     	;# 
  1286  0012                     	;# 
  1287  0013                     	;# 
  1288  0015                     	;# 
  1289  0016                     	;# 
  1290  0016                     	;# 
  1291  0017                     	;# 
  1292  0018                     	;# 
  1293  0019                     	;# 
  1294  001A                     	;# 
  1295  001B                     	;# 
  1296  001C                     	;# 
  1297  008C                     	;# 
  1298  008E                     	;# 
  1299  0091                     	;# 
  1300  0092                     	;# 
  1301  0093                     	;# 
  1302  0095                     	;# 
  1303  0096                     	;# 
  1304  0097                     	;# 
  1305  0098                     	;# 
  1306  0099                     	;# 
  1307  009A                     	;# 
  1308  009B                     	;# 
  1309  009B                     	;# 
  1310  009C                     	;# 
  1311  009D                     	;# 
  1312  009E                     	;# 
  1313  009F                     	;# 
  1314  010C                     	;# 
  1315  010E                     	;# 
  1316  0111                     	;# 
  1317  0112                     	;# 
  1318  0113                     	;# 
  1319  0114                     	;# 
  1320  0115                     	;# 
  1321  0116                     	;# 
  1322  0117                     	;# 
  1323  0118                     	;# 
  1324  0119                     	;# 
  1325  011C                     	;# 
  1326  018C                     	;# 
  1327  018E                     	;# 
  1328  0191                     	;# 
  1329  0191                     	;# 
  1330  0192                     	;# 
  1331  0193                     	;# 
  1332  0193                     	;# 
  1333  0194                     	;# 
  1334  0195                     	;# 
  1335  0196                     	;# 
  1336  0197                     	;# 
  1337  0199                     	;# 
  1338  0199                     	;# 
  1339  0199                     	;# 
  1340  019A                     	;# 
  1341  019A                     	;# 
  1342  019A                     	;# 
  1343  019B                     	;# 
  1344  019B                     	;# 
  1345  019B                     	;# 
  1346  019B                     	;# 
  1347  019B                     	;# 
  1348  019C                     	;# 
  1349  019C                     	;# 
  1350  019C                     	;# 
  1351  019D                     	;# 
  1352  019D                     	;# 
  1353  019D                     	;# 
  1354  019E                     	;# 
  1355  019E                     	;# 
  1356  019E                     	;# 
  1357  019F                     	;# 
  1358  019F                     	;# 
  1359  019F                     	;# 
  1360  019F                     	;# 
  1361  019F                     	;# 
  1362  020C                     	;# 
  1363  020E                     	;# 
  1364  0211                     	;# 
  1365  0211                     	;# 
  1366  0212                     	;# 
  1367  0212                     	;# 
  1368  0213                     	;# 
  1369  0213                     	;# 
  1370  0214                     	;# 
  1371  0214                     	;# 
  1372  0215                     	;# 
  1373  0215                     	;# 
  1374  0215                     	;# 
  1375  0215                     	;# 
  1376  0216                     	;# 
  1377  0216                     	;# 
  1378  0217                     	;# 
  1379  0217                     	;# 
  1380  028C                     	;# 
  1381  028E                     	;# 
  1382  0291                     	;# 
  1383  0291                     	;# 
  1384  0292                     	;# 
  1385  0293                     	;# 
  1386  0293                     	;# 
  1387  0298                     	;# 
  1388  0298                     	;# 
  1389  0299                     	;# 
  1390  029A                     	;# 
  1391  029A                     	;# 
  1392  029E                     	;# 
  1393  030C                     	;# 
  1394  030E                     	;# 
  1395  038C                     	;# 
  1396  038E                     	;# 
  1397  0391                     	;# 
  1398  0392                     	;# 
  1399  0393                     	;# 
  1400  0397                     	;# 
  1401  0398                     	;# 
  1402  0399                     	;# 
  1403  0415                     	;# 
  1404  0416                     	;# 
  1405  0417                     	;# 
  1406  041C                     	;# 
  1407  041D                     	;# 
  1408  041E                     	;# 
  1409  0511                     	;# 
  1410  0515                     	;# 
  1411  0617                     	;# 
  1412  0618                     	;# 
  1413  0619                     	;# 
  1414  0619                     	;# 
  1415  061A                     	;# 
  1416  061B                     	;# 
  1417  061C                     	;# 
  1418  061C                     	;# 
  1419  0691                     	;# 
  1420  0692                     	;# 
  1421  0693                     	;# 
  1422  0694                     	;# 
  1423  0695                     	;# 
  1424  0696                     	;# 
  1425  0697                     	;# 
  1426  0698                     	;# 
  1427  0699                     	;# 
  1428  069A                     	;# 
  1429  069B                     	;# 
  1430  069C                     	;# 
  1431  069D                     	;# 
  1432  069E                     	;# 
  1433  069F                     	;# 
  1434  0E0F                     	;# 
  1435  0E10                     	;# 
  1436  0E11                     	;# 
  1437  0E12                     	;# 
  1438  0E13                     	;# 
  1439  0E14                     	;# 
  1440  0E15                     	;# 
  1441  0E17                     	;# 
  1442  0E20                     	;# 
  1443  0E21                     	;# 
  1444  0E22                     	;# 
  1445  0E24                     	;# 
  1446  0E25                     	;# 
  1447  0E28                     	;# 
  1448  0E29                     	;# 
  1449  0E2A                     	;# 
  1450  0E2B                     	;# 
  1451  0E90                     	;# 
  1452  0E91                     	;# 
  1453  0E92                     	;# 
  1454  0E94                     	;# 
  1455  0E95                     	;# 
  1456  0EA0                     	;# 
  1457  0EA1                     	;# 
  1458  0EA2                     	;# 
  1459  0EA3                     	;# 
  1460  0EA4                     	;# 
  1461  0EA5                     	;# 
  1462  0F0F                     	;# 
  1463  0F10                     	;# 
  1464  0F11                     	;# 
  1465  0F12                     	;# 
  1466  0F13                     	;# 
  1467  0F14                     	;# 
  1468  0F15                     	;# 
  1469  0F16                     	;# 
  1470  0F17                     	;# 
  1471  0F18                     	;# 
  1472  0F19                     	;# 
  1473  0F1A                     	;# 
  1474  0F1B                     	;# 
  1475  0F1C                     	;# 
  1476  0F1D                     	;# 
  1477  0F1E                     	;# 
  1478  0F1F                     	;# 
  1479  0F20                     	;# 
  1480  0F21                     	;# 
  1481  0F22                     	;# 
  1482  0F23                     	;# 
  1483  0F24                     	;# 
  1484  0F25                     	;# 
  1485  0F26                     	;# 
  1486  0F27                     	;# 
  1487  0F28                     	;# 
  1488  0F29                     	;# 
  1489  0F2A                     	;# 
  1490  0F2B                     	;# 
  1491  0F2C                     	;# 
  1492  0F2D                     	;# 
  1493  0F9E                     	;# 
  1494  0FE4                     	;# 
  1495  0FE5                     	;# 
  1496  0FE6                     	;# 
  1497  0FE7                     	;# 
  1498  0FE8                     	;# 
  1499  0FE9                     	;# 
  1500  0FEA                     	;# 
  1501  0FEB                     	;# 
  1502  0FED                     	;# 
  1503  0FEE                     	;# 
  1504  0FEF                     	;# 
  1505  0000                     	;# 
  1506  0001                     	;# 
  1507  0002                     	;# 
  1508  0003                     	;# 
  1509  0004                     	;# 
  1510  0005                     	;# 
  1511  0006                     	;# 
  1512  0007                     	;# 
  1513  0008                     	;# 
  1514  0009                     	;# 
  1515  000A                     	;# 
  1516  000B                     	;# 
  1517  000C                     	;# 
  1518  000E                     	;# 
  1519  0011                     	;# 
  1520  0012                     	;# 
  1521  0013                     	;# 
  1522  0015                     	;# 
  1523  0016                     	;# 
  1524  0016                     	;# 
  1525  0017                     	;# 
  1526  0018                     	;# 
  1527  0019                     	;# 
  1528  001A                     	;# 
  1529  001B                     	;# 
  1530  001C                     	;# 
  1531  008C                     	;# 
  1532  008E                     	;# 
  1533  0091                     	;# 
  1534  0092                     	;# 
  1535  0093                     	;# 
  1536  0095                     	;# 
  1537  0096                     	;# 
  1538  0097                     	;# 
  1539  0098                     	;# 
  1540  0099                     	;# 
  1541  009A                     	;# 
  1542  009B                     	;# 
  1543  009B                     	;# 
  1544  009C                     	;# 
  1545  009D                     	;# 
  1546  009E                     	;# 
  1547  009F                     	;# 
  1548  010C                     	;# 
  1549  010E                     	;# 
  1550  0111                     	;# 
  1551  0112                     	;# 
  1552  0113                     	;# 
  1553  0114                     	;# 
  1554  0115                     	;# 
  1555  0116                     	;# 
  1556  0117                     	;# 
  1557  0118                     	;# 
  1558  0119                     	;# 
  1559  011C                     	;# 
  1560  018C                     	;# 
  1561  018E                     	;# 
  1562  0191                     	;# 
  1563  0191                     	;# 
  1564  0192                     	;# 
  1565  0193                     	;# 
  1566  0193                     	;# 
  1567  0194                     	;# 
  1568  0195                     	;# 
  1569  0196                     	;# 
  1570  0197                     	;# 
  1571  0199                     	;# 
  1572  0199                     	;# 
  1573  0199                     	;# 
  1574  019A                     	;# 
  1575  019A                     	;# 
  1576  019A                     	;# 
  1577  019B                     	;# 
  1578  019B                     	;# 
  1579  019B                     	;# 
  1580  019B                     	;# 
  1581  019B                     	;# 
  1582  019C                     	;# 
  1583  019C                     	;# 
  1584  019C                     	;# 
  1585  019D                     	;# 
  1586  019D                     	;# 
  1587  019D                     	;# 
  1588  019E                     	;# 
  1589  019E                     	;# 
  1590  019E                     	;# 
  1591  019F                     	;# 
  1592  019F                     	;# 
  1593  019F                     	;# 
  1594  019F                     	;# 
  1595  019F                     	;# 
  1596  020C                     	;# 
  1597  020E                     	;# 
  1598  0211                     	;# 
  1599  0211                     	;# 
  1600  0212                     	;# 
  1601  0212                     	;# 
  1602  0213                     	;# 
  1603  0213                     	;# 
  1604  0214                     	;# 
  1605  0214                     	;# 
  1606  0215                     	;# 
  1607  0215                     	;# 
  1608  0215                     	;# 
  1609  0215                     	;# 
  1610  0216                     	;# 
  1611  0216                     	;# 
  1612  0217                     	;# 
  1613  0217                     	;# 
  1614  028C                     	;# 
  1615  028E                     	;# 
  1616  0291                     	;# 
  1617  0291                     	;# 
  1618  0292                     	;# 
  1619  0293                     	;# 
  1620  0293                     	;# 
  1621  0298                     	;# 
  1622  0298                     	;# 
  1623  0299                     	;# 
  1624  029A                     	;# 
  1625  029A                     	;# 
  1626  029E                     	;# 
  1627  030C                     	;# 
  1628  030E                     	;# 
  1629  038C                     	;# 
  1630  038E                     	;# 
  1631  0391                     	;# 
  1632  0392                     	;# 
  1633  0393                     	;# 
  1634  0397                     	;# 
  1635  0398                     	;# 
  1636  0399                     	;# 
  1637  0415                     	;# 
  1638  0416                     	;# 
  1639  0417                     	;# 
  1640  041C                     	;# 
  1641  041D                     	;# 
  1642  041E                     	;# 
  1643  0511                     	;# 
  1644  0515                     	;# 
  1645  0617                     	;# 
  1646  0618                     	;# 
  1647  0619                     	;# 
  1648  0619                     	;# 
  1649  061A                     	;# 
  1650  061B                     	;# 
  1651  061C                     	;# 
  1652  061C                     	;# 
  1653  0691                     	;# 
  1654  0692                     	;# 
  1655  0693                     	;# 
  1656  0694                     	;# 
  1657  0695                     	;# 
  1658  0696                     	;# 
  1659  0697                     	;# 
  1660  0698                     	;# 
  1661  0699                     	;# 
  1662  069A                     	;# 
  1663  069B                     	;# 
  1664  069C                     	;# 
  1665  069D                     	;# 
  1666  069E                     	;# 
  1667  069F                     	;# 
  1668  0E0F                     	;# 
  1669  0E10                     	;# 
  1670  0E11                     	;# 
  1671  0E12                     	;# 
  1672  0E13                     	;# 
  1673  0E14                     	;# 
  1674  0E15                     	;# 
  1675  0E17                     	;# 
  1676  0E20                     	;# 
  1677  0E21                     	;# 
  1678  0E22                     	;# 
  1679  0E24                     	;# 
  1680  0E25                     	;# 
  1681  0E28                     	;# 
  1682  0E29                     	;# 
  1683  0E2A                     	;# 
  1684  0E2B                     	;# 
  1685  0E90                     	;# 
  1686  0E91                     	;# 
  1687  0E92                     	;# 
  1688  0E94                     	;# 
  1689  0E95                     	;# 
  1690  0EA0                     	;# 
  1691  0EA1                     	;# 
  1692  0EA2                     	;# 
  1693  0EA3                     	;# 
  1694  0EA4                     	;# 
  1695  0EA5                     	;# 
  1696  0F0F                     	;# 
  1697  0F10                     	;# 
  1698  0F11                     	;# 
  1699  0F12                     	;# 
  1700  0F13                     	;# 
  1701  0F14                     	;# 
  1702  0F15                     	;# 
  1703  0F16                     	;# 
  1704  0F17                     	;# 
  1705  0F18                     	;# 
  1706  0F19                     	;# 
  1707  0F1A                     	;# 
  1708  0F1B                     	;# 
  1709  0F1C                     	;# 
  1710  0F1D                     	;# 
  1711  0F1E                     	;# 
  1712  0F1F                     	;# 
  1713  0F20                     	;# 
  1714  0F21                     	;# 
  1715  0F22                     	;# 
  1716  0F23                     	;# 
  1717  0F24                     	;# 
  1718  0F25                     	;# 
  1719  0F26                     	;# 
  1720  0F27                     	;# 
  1721  0F28                     	;# 
  1722  0F29                     	;# 
  1723  0F2A                     	;# 
  1724  0F2B                     	;# 
  1725  0F2C                     	;# 
  1726  0F2D                     	;# 
  1727  0F9E                     	;# 
  1728  0FE4                     	;# 
  1729  0FE5                     	;# 
  1730  0FE6                     	;# 
  1731  0FE7                     	;# 
  1732  0FE8                     	;# 
  1733  0FE9                     	;# 
  1734  0FEA                     	;# 
  1735  0FEB                     	;# 
  1736  0FED                     	;# 
  1737  0FEE                     	;# 
  1738  0FEF                     	;# 
  1739  0000                     	;# 
  1740  0001                     	;# 
  1741  0002                     	;# 
  1742  0003                     	;# 
  1743  0004                     	;# 
  1744  0005                     	;# 
  1745  0006                     	;# 
  1746  0007                     	;# 
  1747  0008                     	;# 
  1748  0009                     	;# 
  1749  000A                     	;# 
  1750  000B                     	;# 
  1751  000C                     	;# 
  1752  000E                     	;# 
  1753  0011                     	;# 
  1754  0012                     	;# 
  1755  0013                     	;# 
  1756  0015                     	;# 
  1757  0016                     	;# 
  1758  0016                     	;# 
  1759  0017                     	;# 
  1760  0018                     	;# 
  1761  0019                     	;# 
  1762  001A                     	;# 
  1763  001B                     	;# 
  1764  001C                     	;# 
  1765  008C                     	;# 
  1766  008E                     	;# 
  1767  0091                     	;# 
  1768  0092                     	;# 
  1769  0093                     	;# 
  1770  0095                     	;# 
  1771  0096                     	;# 
  1772  0097                     	;# 
  1773  0098                     	;# 
  1774  0099                     	;# 
  1775  009A                     	;# 
  1776  009B                     	;# 
  1777  009B                     	;# 
  1778  009C                     	;# 
  1779  009D                     	;# 
  1780  009E                     	;# 
  1781  009F                     	;# 
  1782  010C                     	;# 
  1783  010E                     	;# 
  1784  0111                     	;# 
  1785  0112                     	;# 
  1786  0113                     	;# 
  1787  0114                     	;# 
  1788  0115                     	;# 
  1789  0116                     	;# 
  1790  0117                     	;# 
  1791  0118                     	;# 
  1792  0119                     	;# 
  1793  011C                     	;# 
  1794  018C                     	;# 
  1795  018E                     	;# 
  1796  0191                     	;# 
  1797  0191                     	;# 
  1798  0192                     	;# 
  1799  0193                     	;# 
  1800  0193                     	;# 
  1801  0194                     	;# 
  1802  0195                     	;# 
  1803  0196                     	;# 
  1804  0197                     	;# 
  1805  0199                     	;# 
  1806  0199                     	;# 
  1807  0199                     	;# 
  1808  019A                     	;# 
  1809  019A                     	;# 
  1810  019A                     	;# 
  1811  019B                     	;# 
  1812  019B                     	;# 
  1813  019B                     	;# 
  1814  019B                     	;# 
  1815  019B                     	;# 
  1816  019C                     	;# 
  1817  019C                     	;# 
  1818  019C                     	;# 
  1819  019D                     	;# 
  1820  019D                     	;# 
  1821  019D                     	;# 
  1822  019E                     	;# 
  1823  019E                     	;# 
  1824  019E                     	;# 
  1825  019F                     	;# 
  1826  019F                     	;# 
  1827  019F                     	;# 
  1828  019F                     	;# 
  1829  019F                     	;# 
  1830  020C                     	;# 
  1831  020E                     	;# 
  1832  0211                     	;# 
  1833  0211                     	;# 
  1834  0212                     	;# 
  1835  0212                     	;# 
  1836  0213                     	;# 
  1837  0213                     	;# 
  1838  0214                     	;# 
  1839  0214                     	;# 
  1840  0215                     	;# 
  1841  0215                     	;# 
  1842  0215                     	;# 
  1843  0215                     	;# 
  1844  0216                     	;# 
  1845  0216                     	;# 
  1846  0217                     	;# 
  1847  0217                     	;# 
  1848  028C                     	;# 
  1849  028E                     	;# 
  1850  0291                     	;# 
  1851  0291                     	;# 
  1852  0292                     	;# 
  1853  0293                     	;# 
  1854  0293                     	;# 
  1855  0298                     	;# 
  1856  0298                     	;# 
  1857  0299                     	;# 
  1858  029A                     	;# 
  1859  029A                     	;# 
  1860  029E                     	;# 
  1861  030C                     	;# 
  1862  030E                     	;# 
  1863  038C                     	;# 
  1864  038E                     	;# 
  1865  0391                     	;# 
  1866  0392                     	;# 
  1867  0393                     	;# 
  1868  0397                     	;# 
  1869  0398                     	;# 
  1870  0399                     	;# 
  1871  0415                     	;# 
  1872  0416                     	;# 
  1873  0417                     	;# 
  1874  041C                     	;# 
  1875  041D                     	;# 
  1876  041E                     	;# 
  1877  0511                     	;# 
  1878  0515                     	;# 
  1879  0617                     	;# 
  1880  0618                     	;# 
  1881  0619                     	;# 
  1882  0619                     	;# 
  1883  061A                     	;# 
  1884  061B                     	;# 
  1885  061C                     	;# 
  1886  061C                     	;# 
  1887  0691                     	;# 
  1888  0692                     	;# 
  1889  0693                     	;# 
  1890  0694                     	;# 
  1891  0695                     	;# 
  1892  0696                     	;# 
  1893  0697                     	;# 
  1894  0698                     	;# 
  1895  0699                     	;# 
  1896  069A                     	;# 
  1897  069B                     	;# 
  1898  069C                     	;# 
  1899  069D                     	;# 
  1900  069E                     	;# 
  1901  069F                     	;# 
  1902  0E0F                     	;# 
  1903  0E10                     	;# 
  1904  0E11                     	;# 
  1905  0E12                     	;# 
  1906  0E13                     	;# 
  1907  0E14                     	;# 
  1908  0E15                     	;# 
  1909  0E17                     	;# 
  1910  0E20                     	;# 
  1911  0E21                     	;# 
  1912  0E22                     	;# 
  1913  0E24                     	;# 
  1914  0E25                     	;# 
  1915  0E28                     	;# 
  1916  0E29                     	;# 
  1917  0E2A                     	;# 
  1918  0E2B                     	;# 
  1919  0E90                     	;# 
  1920  0E91                     	;# 
  1921  0E92                     	;# 
  1922  0E94                     	;# 
  1923  0E95                     	;# 
  1924  0EA0                     	;# 
  1925  0EA1                     	;# 
  1926  0EA2                     	;# 
  1927  0EA3                     	;# 
  1928  0EA4                     	;# 
  1929  0EA5                     	;# 
  1930  0F0F                     	;# 
  1931  0F10                     	;# 
  1932  0F11                     	;# 
  1933  0F12                     	;# 
  1934  0F13                     	;# 
  1935  0F14                     	;# 
  1936  0F15                     	;# 
  1937  0F16                     	;# 
  1938  0F17                     	;# 
  1939  0F18                     	;# 
  1940  0F19                     	;# 
  1941  0F1A                     	;# 
  1942  0F1B                     	;# 
  1943  0F1C                     	;# 
  1944  0F1D                     	;# 
  1945  0F1E                     	;# 
  1946  0F1F                     	;# 
  1947  0F20                     	;# 
  1948  0F21                     	;# 
  1949  0F22                     	;# 
  1950  0F23                     	;# 
  1951  0F24                     	;# 
  1952  0F25                     	;# 
  1953  0F26                     	;# 
  1954  0F27                     	;# 
  1955  0F28                     	;# 
  1956  0F29                     	;# 
  1957  0F2A                     	;# 
  1958  0F2B                     	;# 
  1959  0F2C                     	;# 
  1960  0F2D                     	;# 
  1961  0F9E                     	;# 
  1962  0FE4                     	;# 
  1963  0FE5                     	;# 
  1964  0FE6                     	;# 
  1965  0FE7                     	;# 
  1966  0FE8                     	;# 
  1967  0FE9                     	;# 
  1968  0FEA                     	;# 
  1969  0FEB                     	;# 
  1970  0FED                     	;# 
  1971  0FEE                     	;# 
  1972  0FEF                     	;# 
  1973  0000                     	;# 
  1974  0001                     	;# 
  1975  0002                     	;# 
  1976  0003                     	;# 
  1977  0004                     	;# 
  1978  0005                     	;# 
  1979  0006                     	;# 
  1980  0007                     	;# 
  1981  0008                     	;# 
  1982  0009                     	;# 
  1983  000A                     	;# 
  1984  000B                     	;# 
  1985  000C                     	;# 
  1986  000E                     	;# 
  1987  0011                     	;# 
  1988  0012                     	;# 
  1989  0013                     	;# 
  1990  0015                     	;# 
  1991  0016                     	;# 
  1992  0016                     	;# 
  1993  0017                     	;# 
  1994  0018                     	;# 
  1995  0019                     	;# 
  1996  001A                     	;# 
  1997  001B                     	;# 
  1998  001C                     	;# 
  1999  008C                     	;# 
  2000  008E                     	;# 
  2001  0091                     	;# 
  2002  0092                     	;# 
  2003  0093                     	;# 
  2004  0095                     	;# 
  2005  0096                     	;# 
  2006  0097                     	;# 
  2007  0098                     	;# 
  2008  0099                     	;# 
  2009  009A                     	;# 
  2010  009B                     	;# 
  2011  009B                     	;# 
  2012  009C                     	;# 
  2013  009D                     	;# 
  2014  009E                     	;# 
  2015  009F                     	;# 
  2016  010C                     	;# 
  2017  010E                     	;# 
  2018  0111                     	;# 
  2019  0112                     	;# 
  2020  0113                     	;# 
  2021  0114                     	;# 
  2022  0115                     	;# 
  2023  0116                     	;# 
  2024  0117                     	;# 
  2025  0118                     	;# 
  2026  0119                     	;# 
  2027  011C                     	;# 
  2028  018C                     	;# 
  2029  018E                     	;# 
  2030  0191                     	;# 
  2031  0191                     	;# 
  2032  0192                     	;# 
  2033  0193                     	;# 
  2034  0193                     	;# 
  2035  0194                     	;# 
  2036  0195                     	;# 
  2037  0196                     	;# 
  2038  0197                     	;# 
  2039  0199                     	;# 
  2040  0199                     	;# 
  2041  0199                     	;# 
  2042  019A                     	;# 
  2043  019A                     	;# 
  2044  019A                     	;# 
  2045  019B                     	;# 
  2046  019B                     	;# 
  2047  019B                     	;# 
  2048  019B                     	;# 
  2049  019B                     	;# 
  2050  019C                     	;# 
  2051  019C                     	;# 
  2052  019C                     	;# 
  2053  019D                     	;# 
  2054  019D                     	;# 
  2055  019D                     	;# 
  2056  019E                     	;# 
  2057  019E                     	;# 
  2058  019E                     	;# 
  2059  019F                     	;# 
  2060  019F                     	;# 
  2061  019F                     	;# 
  2062  019F                     	;# 
  2063  019F                     	;# 
  2064  020C                     	;# 
  2065  020E                     	;# 
  2066  0211                     	;# 
  2067  0211                     	;# 
  2068  0212                     	;# 
  2069  0212                     	;# 
  2070  0213                     	;# 
  2071  0213                     	;# 
  2072  0214                     	;# 
  2073  0214                     	;# 
  2074  0215                     	;# 
  2075  0215                     	;# 
  2076  0215                     	;# 
  2077  0215                     	;# 
  2078  0216                     	;# 
  2079  0216                     	;# 
  2080  0217                     	;# 
  2081  0217                     	;# 
  2082  028C                     	;# 
  2083  028E                     	;# 
  2084  0291                     	;# 
  2085  0291                     	;# 
  2086  0292                     	;# 
  2087  0293                     	;# 
  2088  0293                     	;# 
  2089  0298                     	;# 
  2090  0298                     	;# 
  2091  0299                     	;# 
  2092  029A                     	;# 
  2093  029A                     	;# 
  2094  029E                     	;# 
  2095  030C                     	;# 
  2096  030E                     	;# 
  2097  038C                     	;# 
  2098  038E                     	;# 
  2099  0391                     	;# 
  2100  0392                     	;# 
  2101  0393                     	;# 
  2102  0397                     	;# 
  2103  0398                     	;# 
  2104  0399                     	;# 
  2105  0415                     	;# 
  2106  0416                     	;# 
  2107  0417                     	;# 
  2108  041C                     	;# 
  2109  041D                     	;# 
  2110  041E                     	;# 
  2111  0511                     	;# 
  2112  0515                     	;# 
  2113  0617                     	;# 
  2114  0618                     	;# 
  2115  0619                     	;# 
  2116  0619                     	;# 
  2117  061A                     	;# 
  2118  061B                     	;# 
  2119  061C                     	;# 
  2120  061C                     	;# 
  2121  0691                     	;# 
  2122  0692                     	;# 
  2123  0693                     	;# 
  2124  0694                     	;# 
  2125  0695                     	;# 
  2126  0696                     	;# 
  2127  0697                     	;# 
  2128  0698                     	;# 
  2129  0699                     	;# 
  2130  069A                     	;# 
  2131  069B                     	;# 
  2132  069C                     	;# 
  2133  069D                     	;# 
  2134  069E                     	;# 
  2135  069F                     	;# 
  2136  0E0F                     	;# 
  2137  0E10                     	;# 
  2138  0E11                     	;# 
  2139  0E12                     	;# 
  2140  0E13                     	;# 
  2141  0E14                     	;# 
  2142  0E15                     	;# 
  2143  0E17                     	;# 
  2144  0E20                     	;# 
  2145  0E21                     	;# 
  2146  0E22                     	;# 
  2147  0E24                     	;# 
  2148  0E25                     	;# 
  2149  0E28                     	;# 
  2150  0E29                     	;# 
  2151  0E2A                     	;# 
  2152  0E2B                     	;# 
  2153  0E90                     	;# 
  2154  0E91                     	;# 
  2155  0E92                     	;# 
  2156  0E94                     	;# 
  2157  0E95                     	;# 
  2158  0EA0                     	;# 
  2159  0EA1                     	;# 
  2160  0EA2                     	;# 
  2161  0EA3                     	;# 
  2162  0EA4                     	;# 
  2163  0EA5                     	;# 
  2164  0F0F                     	;# 
  2165  0F10                     	;# 
  2166  0F11                     	;# 
  2167  0F12                     	;# 
  2168  0F13                     	;# 
  2169  0F14                     	;# 
  2170  0F15                     	;# 
  2171  0F16                     	;# 
  2172  0F17                     	;# 
  2173  0F18                     	;# 
  2174  0F19                     	;# 
  2175  0F1A                     	;# 
  2176  0F1B                     	;# 
  2177  0F1C                     	;# 
  2178  0F1D                     	;# 
  2179  0F1E                     	;# 
  2180  0F1F                     	;# 
  2181  0F20                     	;# 
  2182  0F21                     	;# 
  2183  0F22                     	;# 
  2184  0F23                     	;# 
  2185  0F24                     	;# 
  2186  0F25                     	;# 
  2187  0F26                     	;# 
  2188  0F27                     	;# 
  2189  0F28                     	;# 
  2190  0F29                     	;# 
  2191  0F2A                     	;# 
  2192  0F2B                     	;# 
  2193  0F2C                     	;# 
  2194  0F2D                     	;# 
  2195  0F9E                     	;# 
  2196  0FE4                     	;# 
  2197  0FE5                     	;# 
  2198  0FE6                     	;# 
  2199  0FE7                     	;# 
  2200  0FE8                     	;# 
  2201  0FE9                     	;# 
  2202  0FEA                     	;# 
  2203  0FEB                     	;# 
  2204  0FED                     	;# 
  2205  0FEE                     	;# 
  2206  0FEF                     	;# 
  2207  0000                     	;# 
  2208  0001                     	;# 
  2209  0002                     	;# 
  2210  0003                     	;# 
  2211  0004                     	;# 
  2212  0005                     	;# 
  2213  0006                     	;# 
  2214  0007                     	;# 
  2215  0008                     	;# 
  2216  0009                     	;# 
  2217  000A                     	;# 
  2218  000B                     	;# 
  2219  000C                     	;# 
  2220  000E                     	;# 
  2221  0011                     	;# 
  2222  0012                     	;# 
  2223  0013                     	;# 
  2224  0015                     	;# 
  2225  0016                     	;# 
  2226  0016                     	;# 
  2227  0017                     	;# 
  2228  0018                     	;# 
  2229  0019                     	;# 
  2230  001A                     	;# 
  2231  001B                     	;# 
  2232  001C                     	;# 
  2233  008C                     	;# 
  2234  008E                     	;# 
  2235  0091                     	;# 
  2236  0092                     	;# 
  2237  0093                     	;# 
  2238  0095                     	;# 
  2239  0096                     	;# 
  2240  0097                     	;# 
  2241  0098                     	;# 
  2242  0099                     	;# 
  2243  009A                     	;# 
  2244  009B                     	;# 
  2245  009B                     	;# 
  2246  009C                     	;# 
  2247  009D                     	;# 
  2248  009E                     	;# 
  2249  009F                     	;# 
  2250  010C                     	;# 
  2251  010E                     	;# 
  2252  0111                     	;# 
  2253  0112                     	;# 
  2254  0113                     	;# 
  2255  0114                     	;# 
  2256  0115                     	;# 
  2257  0116                     	;# 
  2258  0117                     	;# 
  2259  0118                     	;# 
  2260  0119                     	;# 
  2261  011C                     	;# 
  2262  018C                     	;# 
  2263  018E                     	;# 
  2264  0191                     	;# 
  2265  0191                     	;# 
  2266  0192                     	;# 
  2267  0193                     	;# 
  2268  0193                     	;# 
  2269  0194                     	;# 
  2270  0195                     	;# 
  2271  0196                     	;# 
  2272  0197                     	;# 
  2273  0199                     	;# 
  2274  0199                     	;# 
  2275  0199                     	;# 
  2276  019A                     	;# 
  2277  019A                     	;# 
  2278  019A                     	;# 
  2279  019B                     	;# 
  2280  019B                     	;# 
  2281  019B                     	;# 
  2282  019B                     	;# 
  2283  019B                     	;# 
  2284  019C                     	;# 
  2285  019C                     	;# 
  2286  019C                     	;# 
  2287  019D                     	;# 
  2288  019D                     	;# 
  2289  019D                     	;# 
  2290  019E                     	;# 
  2291  019E                     	;# 
  2292  019E                     	;# 
  2293  019F                     	;# 
  2294  019F                     	;# 
  2295  019F                     	;# 
  2296  019F                     	;# 
  2297  019F                     	;# 
  2298  020C                     	;# 
  2299  020E                     	;# 
  2300  0211                     	;# 
  2301  0211                     	;# 
  2302  0212                     	;# 
  2303  0212                     	;# 
  2304  0213                     	;# 
  2305  0213                     	;# 
  2306  0214                     	;# 
  2307  0214                     	;# 
  2308  0215                     	;# 
  2309  0215                     	;# 
  2310  0215                     	;# 
  2311  0215                     	;# 
  2312  0216                     	;# 
  2313  0216                     	;# 
  2314  0217                     	;# 
  2315  0217                     	;# 
  2316  028C                     	;# 
  2317  028E                     	;# 
  2318  0291                     	;# 
  2319  0291                     	;# 
  2320  0292                     	;# 
  2321  0293                     	;# 
  2322  0293                     	;# 
  2323  0298                     	;# 
  2324  0298                     	;# 
  2325  0299                     	;# 
  2326  029A                     	;# 
  2327  029A                     	;# 
  2328  029E                     	;# 
  2329  030C                     	;# 
  2330  030E                     	;# 
  2331  038C                     	;# 
  2332  038E                     	;# 
  2333  0391                     	;# 
  2334  0392                     	;# 
  2335  0393                     	;# 
  2336  0397                     	;# 
  2337  0398                     	;# 
  2338  0399                     	;# 
  2339  0415                     	;# 
  2340  0416                     	;# 
  2341  0417                     	;# 
  2342  041C                     	;# 
  2343  041D                     	;# 
  2344  041E                     	;# 
  2345  0511                     	;# 
  2346  0515                     	;# 
  2347  0617                     	;# 
  2348  0618                     	;# 
  2349  0619                     	;# 
  2350  0619                     	;# 
  2351  061A                     	;# 
  2352  061B                     	;# 
  2353  061C                     	;# 
  2354  061C                     	;# 
  2355  0691                     	;# 
  2356  0692                     	;# 
  2357  0693                     	;# 
  2358  0694                     	;# 
  2359  0695                     	;# 
  2360  0696                     	;# 
  2361  0697                     	;# 
  2362  0698                     	;# 
  2363  0699                     	;# 
  2364  069A                     	;# 
  2365  069B                     	;# 
  2366  069C                     	;# 
  2367  069D                     	;# 
  2368  069E                     	;# 
  2369  069F                     	;# 
  2370  0E0F                     	;# 
  2371  0E10                     	;# 
  2372  0E11                     	;# 
  2373  0E12                     	;# 
  2374  0E13                     	;# 
  2375  0E14                     	;# 
  2376  0E15                     	;# 
  2377  0E17                     	;# 
  2378  0E20                     	;# 
  2379  0E21                     	;# 
  2380  0E22                     	;# 
  2381  0E24                     	;# 
  2382  0E25                     	;# 
  2383  0E28                     	;# 
  2384  0E29                     	;# 
  2385  0E2A                     	;# 
  2386  0E2B                     	;# 
  2387  0E90                     	;# 
  2388  0E91                     	;# 
  2389  0E92                     	;# 
  2390  0E94                     	;# 
  2391  0E95                     	;# 
  2392  0EA0                     	;# 
  2393  0EA1                     	;# 
  2394  0EA2                     	;# 
  2395  0EA3                     	;# 
  2396  0EA4                     	;# 
  2397  0EA5                     	;# 
  2398  0F0F                     	;# 
  2399  0F10                     	;# 
  2400  0F11                     	;# 
  2401  0F12                     	;# 
  2402  0F13                     	;# 
  2403  0F14                     	;# 
  2404  0F15                     	;# 
  2405  0F16                     	;# 
  2406  0F17                     	;# 
  2407  0F18                     	;# 
  2408  0F19                     	;# 
  2409  0F1A                     	;# 
  2410  0F1B                     	;# 
  2411  0F1C                     	;# 
  2412  0F1D                     	;# 
  2413  0F1E                     	;# 
  2414  0F1F                     	;# 
  2415  0F20                     	;# 
  2416  0F21                     	;# 
  2417  0F22                     	;# 
  2418  0F23                     	;# 
  2419  0F24                     	;# 
  2420  0F25                     	;# 
  2421  0F26                     	;# 
  2422  0F27                     	;# 
  2423  0F28                     	;# 
  2424  0F29                     	;# 
  2425  0F2A                     	;# 
  2426  0F2B                     	;# 
  2427  0F2C                     	;# 
  2428  0F2D                     	;# 
  2429  0F9E                     	;# 
  2430  0FE4                     	;# 
  2431  0FE5                     	;# 
  2432  0FE6                     	;# 
  2433  0FE7                     	;# 
  2434  0FE8                     	;# 
  2435  0FE9                     	;# 
  2436  0FEA                     	;# 
  2437  0FEB                     	;# 
  2438  0FED                     	;# 
  2439  0FEE                     	;# 
  2440  0FEF                     	;# 
  2441  0000                     	;# 
  2442  0001                     	;# 
  2443  0002                     	;# 
  2444  0003                     	;# 
  2445  0004                     	;# 
  2446  0005                     	;# 
  2447  0006                     	;# 
  2448  0007                     	;# 
  2449  0008                     	;# 
  2450  0009                     	;# 
  2451  000A                     	;# 
  2452  000B                     	;# 
  2453  000C                     	;# 
  2454  000E                     	;# 
  2455  0011                     	;# 
  2456  0012                     	;# 
  2457  0013                     	;# 
  2458  0015                     	;# 
  2459  0016                     	;# 
  2460  0016                     	;# 
  2461  0017                     	;# 
  2462  0018                     	;# 
  2463  0019                     	;# 
  2464  001A                     	;# 
  2465  001B                     	;# 
  2466  001C                     	;# 
  2467  008C                     	;# 
  2468  008E                     	;# 
  2469  0091                     	;# 
  2470  0092                     	;# 
  2471  0093                     	;# 
  2472  0095                     	;# 
  2473  0096                     	;# 
  2474  0097                     	;# 
  2475  0098                     	;# 
  2476  0099                     	;# 
  2477  009A                     	;# 
  2478  009B                     	;# 
  2479  009B                     	;# 
  2480  009C                     	;# 
  2481  009D                     	;# 
  2482  009E                     	;# 
  2483  009F                     	;# 
  2484  010C                     	;# 
  2485  010E                     	;# 
  2486  0111                     	;# 
  2487  0112                     	;# 
  2488  0113                     	;# 
  2489  0114                     	;# 
  2490  0115                     	;# 
  2491  0116                     	;# 
  2492  0117                     	;# 
  2493  0118                     	;# 
  2494  0119                     	;# 
  2495  011C                     	;# 
  2496  018C                     	;# 
  2497  018E                     	;# 
  2498  0191                     	;# 
  2499  0191                     	;# 
  2500  0192                     	;# 
  2501  0193                     	;# 
  2502  0193                     	;# 
  2503  0194                     	;# 
  2504  0195                     	;# 
  2505  0196                     	;# 
  2506  0197                     	;# 
  2507  0199                     	;# 
  2508  0199                     	;# 
  2509  0199                     	;# 
  2510  019A                     	;# 
  2511  019A                     	;# 
  2512  019A                     	;# 
  2513  019B                     	;# 
  2514  019B                     	;# 
  2515  019B                     	;# 
  2516  019B                     	;# 
  2517  019B                     	;# 
  2518  019C                     	;# 
  2519  019C                     	;# 
  2520  019C                     	;# 
  2521  019D                     	;# 
  2522  019D                     	;# 
  2523  019D                     	;# 
  2524  019E                     	;# 
  2525  019E                     	;# 
  2526  019E                     	;# 
  2527  019F                     	;# 
  2528  019F                     	;# 
  2529  019F                     	;# 
  2530  019F                     	;# 
  2531  019F                     	;# 
  2532  020C                     	;# 
  2533  020E                     	;# 
  2534  0211                     	;# 
  2535  0211                     	;# 
  2536  0212                     	;# 
  2537  0212                     	;# 
  2538  0213                     	;# 
  2539  0213                     	;# 
  2540  0214                     	;# 
  2541  0214                     	;# 
  2542  0215                     	;# 
  2543  0215                     	;# 
  2544  0215                     	;# 
  2545  0215                     	;# 
  2546  0216                     	;# 
  2547  0216                     	;# 
  2548  0217                     	;# 
  2549  0217                     	;# 
  2550  028C                     	;# 
  2551  028E                     	;# 
  2552  0291                     	;# 
  2553  0291                     	;# 
  2554  0292                     	;# 
  2555  0293                     	;# 
  2556  0293                     	;# 
  2557  0298                     	;# 
  2558  0298                     	;# 
  2559  0299                     	;# 
  2560  029A                     	;# 
  2561  029A                     	;# 
  2562  029E                     	;# 
  2563  030C                     	;# 
  2564  030E                     	;# 
  2565  038C                     	;# 
  2566  038E                     	;# 
  2567  0391                     	;# 
  2568  0392                     	;# 
  2569  0393                     	;# 
  2570  0397                     	;# 
  2571  0398                     	;# 
  2572  0399                     	;# 
  2573  0415                     	;# 
  2574  0416                     	;# 
  2575  0417                     	;# 
  2576  041C                     	;# 
  2577  041D                     	;# 
  2578  041E                     	;# 
  2579  0511                     	;# 
  2580  0515                     	;# 
  2581  0617                     	;# 
  2582  0618                     	;# 
  2583  0619                     	;# 
  2584  0619                     	;# 
  2585  061A                     	;# 
  2586  061B                     	;# 
  2587  061C                     	;# 
  2588  061C                     	;# 
  2589  0691                     	;# 
  2590  0692                     	;# 
  2591  0693                     	;# 
  2592  0694                     	;# 
  2593  0695                     	;# 
  2594  0696                     	;# 
  2595  0697                     	;# 
  2596  0698                     	;# 
  2597  0699                     	;# 
  2598  069A                     	;# 
  2599  069B                     	;# 
  2600  069C                     	;# 
  2601  069D                     	;# 
  2602  069E                     	;# 
  2603  069F                     	;# 
  2604  0E0F                     	;# 
  2605  0E10                     	;# 
  2606  0E11                     	;# 
  2607  0E12                     	;# 
  2608  0E13                     	;# 
  2609  0E14                     	;# 
  2610  0E15                     	;# 
  2611  0E17                     	;# 
  2612  0E20                     	;# 
  2613  0E21                     	;# 
  2614  0E22                     	;# 
  2615  0E24                     	;# 
  2616  0E25                     	;# 
  2617  0E28                     	;# 
  2618  0E29                     	;# 
  2619  0E2A                     	;# 
  2620  0E2B                     	;# 
  2621  0E90                     	;# 
  2622  0E91                     	;# 
  2623  0E92                     	;# 
  2624  0E94                     	;# 
  2625  0E95                     	;# 
  2626  0EA0                     	;# 
  2627  0EA1                     	;# 
  2628  0EA2                     	;# 
  2629  0EA3                     	;# 
  2630  0EA4                     	;# 
  2631  0EA5                     	;# 
  2632  0F0F                     	;# 
  2633  0F10                     	;# 
  2634  0F11                     	;# 
  2635  0F12                     	;# 
  2636  0F13                     	;# 
  2637  0F14                     	;# 
  2638  0F15                     	;# 
  2639  0F16                     	;# 
  2640  0F17                     	;# 
  2641  0F18                     	;# 
  2642  0F19                     	;# 
  2643  0F1A                     	;# 
  2644  0F1B                     	;# 
  2645  0F1C                     	;# 
  2646  0F1D                     	;# 
  2647  0F1E                     	;# 
  2648  0F1F                     	;# 
  2649  0F20                     	;# 
  2650  0F21                     	;# 
  2651  0F22                     	;# 
  2652  0F23                     	;# 
  2653  0F24                     	;# 
  2654  0F25                     	;# 
  2655  0F26                     	;# 
  2656  0F27                     	;# 
  2657  0F28                     	;# 
  2658  0F29                     	;# 
  2659  0F2A                     	;# 
  2660  0F2B                     	;# 
  2661  0F2C                     	;# 
  2662  0F2D                     	;# 
  2663  0F9E                     	;# 
  2664  0FE4                     	;# 
  2665  0FE5                     	;# 
  2666  0FE6                     	;# 
  2667  0FE7                     	;# 
  2668  0FE8                     	;# 
  2669  0FE9                     	;# 
  2670  0FEA                     	;# 
  2671  0FEB                     	;# 
  2672  0FED                     	;# 
  2673  0FEE                     	;# 
  2674  0FEF                     	;# 
  2675                           
  2676                           	psect	idataBANK1
  2677  06FC                     __pidataBANK1:	
  2678                           
  2679                           ;initializer for _MEM
  2680  06FC  3400               	retlw	0
  2681  06FD  3400               	retlw	0
  2682  06FE  3480               	retlw	128
  2683  06FF  3425               	retlw	37
  2684                           
  2685                           	psect	idataBANK4
  2686  1885                     __pidataBANK4:	
  2687                           
  2688                           ;initializer for _BAUD
  2689  1885  3480               	retlw	128
  2690  1886  3425               	retlw	37
  2691  1887  3400               	retlw	0
  2692  1888  3400               	retlw	0
  2693                           
  2694                           	psect	stringtext
  2695  0700                     __pstringtext:	
  2696  0700                     _ScanCodeFunctionNoE0:	
  2697  0700  3400               	retlw	0
  2698  0701  3411               	retlw	17
  2699  0702  3400               	retlw	0
  2700  0703  340C               	retlw	12
  2701  0704  340A               	retlw	10
  2702  0705  3406               	retlw	6
  2703  0706  3407               	retlw	7
  2704  0707  3414               	retlw	20
  2705  0708  3400               	retlw	0
  2706  0709  3412               	retlw	18
  2707  070A  3410               	retlw	16
  2708  070B  340E               	retlw	14
  2709  070C  340B               	retlw	11
  2710  070D  3400               	retlw	0
  2711  070E  3400               	retlw	0
  2712  070F  3400               	retlw	0
  2713  0710  3400               	retlw	0
  2714  0711  341C               	retlw	28
  2715  0712  3400               	retlw	0
  2716  0713  3400               	retlw	0
  2717  0714  341A               	retlw	26
  2718  0715  3400               	retlw	0
  2719  0716  3400               	retlw	0
  2720  0717  3400               	retlw	0
  2721  0718  3400               	retlw	0
  2722  0719  3400               	retlw	0
  2723  071A  3400               	retlw	0
  2724  071B  3400               	retlw	0
  2725  071C  3400               	retlw	0
  2726  071D  3400               	retlw	0
  2727  071E  3400               	retlw	0
  2728  071F  3400               	retlw	0
  2729  0720  3400               	retlw	0
  2730  0721  3400               	retlw	0
  2731  0722  3400               	retlw	0
  2732  0723  3400               	retlw	0
  2733  0724  3400               	retlw	0
  2734  0725  3400               	retlw	0
  2735  0726  3400               	retlw	0
  2736  0727  3400               	retlw	0
  2737  0728  3400               	retlw	0
  2738  0729  3400               	retlw	0
  2739  072A  3400               	retlw	0
  2740  072B  3400               	retlw	0
  2741  072C  3400               	retlw	0
  2742  072D  3400               	retlw	0
  2743  072E  3400               	retlw	0
  2744  072F  3400               	retlw	0
  2745  0730  3400               	retlw	0
  2746  0731  3400               	retlw	0
  2747  0732  3400               	retlw	0
  2748  0733  3400               	retlw	0
  2749  0734  3400               	retlw	0
  2750  0735  3400               	retlw	0
  2751  0736  3400               	retlw	0
  2752  0737  3400               	retlw	0
  2753  0738  3400               	retlw	0
  2754  0739  3400               	retlw	0
  2755  073A  3400               	retlw	0
  2756  073B  3400               	retlw	0
  2757  073C  3400               	retlw	0
  2758  073D  3400               	retlw	0
  2759  073E  3400               	retlw	0
  2760  073F  3400               	retlw	0
  2761  0740  3400               	retlw	0
  2762  0741  3400               	retlw	0
  2763  0742  3400               	retlw	0
  2764  0743  3400               	retlw	0
  2765  0744  3400               	retlw	0
  2766  0745  3400               	retlw	0
  2767  0746  3400               	retlw	0
  2768  0747  3400               	retlw	0
  2769  0748  3400               	retlw	0
  2770  0749  3400               	retlw	0
  2771  074A  3400               	retlw	0
  2772  074B  3400               	retlw	0
  2773  074C  3400               	retlw	0
  2774  074D  3400               	retlw	0
  2775  074E  3400               	retlw	0
  2776  074F  3400               	retlw	0
  2777  0750  3400               	retlw	0
  2778  0751  3400               	retlw	0
  2779  0752  3400               	retlw	0
  2780  0753  3400               	retlw	0
  2781  0754  3400               	retlw	0
  2782  0755  3400               	retlw	0
  2783  0756  3400               	retlw	0
  2784  0757  3400               	retlw	0
  2785  0758  3400               	retlw	0
  2786  0759  3400               	retlw	0
  2787  075A  3400               	retlw	0
  2788  075B  3400               	retlw	0
  2789  075C  3400               	retlw	0
  2790  075D  3400               	retlw	0
  2791  075E  3400               	retlw	0
  2792  075F  3400               	retlw	0
  2793  0760  3400               	retlw	0
  2794  0761  3400               	retlw	0
  2795  0762  3400               	retlw	0
  2796  0763  3400               	retlw	0
  2797  0764  3400               	retlw	0
  2798  0765  3400               	retlw	0
  2799  0766  3400               	retlw	0
  2800  0767  3400               	retlw	0
  2801  0768  3400               	retlw	0
  2802  0769  3400               	retlw	0
  2803  076A  3400               	retlw	0
  2804  076B  3400               	retlw	0
  2805  076C  3400               	retlw	0
  2806  076D  3400               	retlw	0
  2807  076E  3400               	retlw	0
  2808  076F  3400               	retlw	0
  2809  0770  3400               	retlw	0
  2810  0771  3400               	retlw	0
  2811  0772  3400               	retlw	0
  2812  0773  3400               	retlw	0
  2813  0774  3400               	retlw	0
  2814  0775  3400               	retlw	0
  2815  0776  3400               	retlw	0
  2816  0777  3400               	retlw	0
  2817  0778  3413               	retlw	19
  2818  0779  3400               	retlw	0
  2819  077A  3400               	retlw	0
  2820  077B  3400               	retlw	0
  2821  077C  3400               	retlw	0
  2822  077D  3400               	retlw	0
  2823  077E  3400               	retlw	0
  2824  077F  3400               	retlw	0
  2825  0780  3400               	retlw	0
  2826  0781  3400               	retlw	0
  2827  0782  3400               	retlw	0
  2828  0783  340F               	retlw	15
  2829  0784                     __end_of_ScanCodeFunctionNoE0:	
  2830  0784                     _ScanCode:	
  2831  0784  3409               	retlw	9
  2832  0785  3460               	retlw	96
  2833  0786  3400               	retlw	0
  2834  0787  3400               	retlw	0
  2835  0788  3400               	retlw	0
  2836  0789  3400               	retlw	0
  2837  078A  3400               	retlw	0
  2838  078B  3400               	retlw	0
  2839  078C  3471               	retlw	113
  2840  078D  3431               	retlw	49
  2841  078E  3400               	retlw	0
  2842  078F  3400               	retlw	0
  2843  0790  3400               	retlw	0
  2844  0791  347A               	retlw	122
  2845  0792  3473               	retlw	115
  2846  0793  3461               	retlw	97
  2847  0794  3477               	retlw	119
  2848  0795  3432               	retlw	50
  2849  0796  3400               	retlw	0
  2850  0797  3400               	retlw	0
  2851  0798  3463               	retlw	99
  2852  0799  3478               	retlw	120
  2853  079A  3464               	retlw	100
  2854  079B  3465               	retlw	101
  2855  079C  3434               	retlw	52
  2856  079D  3433               	retlw	51
  2857  079E  3400               	retlw	0
  2858  079F  3400               	retlw	0
  2859  07A0  3420               	retlw	32
  2860  07A1  3476               	retlw	118
  2861  07A2  3466               	retlw	102
  2862  07A3  3474               	retlw	116
  2863  07A4  3472               	retlw	114
  2864  07A5  3435               	retlw	53
  2865  07A6  3400               	retlw	0
  2866  07A7  3400               	retlw	0
  2867  07A8  346E               	retlw	110
  2868  07A9  3462               	retlw	98
  2869  07AA  3468               	retlw	104
  2870  07AB  3467               	retlw	103
  2871  07AC  3479               	retlw	121
  2872  07AD  3436               	retlw	54
  2873  07AE  3400               	retlw	0
  2874  07AF  3400               	retlw	0
  2875  07B0  3400               	retlw	0
  2876  07B1  346D               	retlw	109
  2877  07B2  346A               	retlw	106
  2878  07B3  3475               	retlw	117
  2879  07B4  3437               	retlw	55
  2880  07B5  3438               	retlw	56
  2881  07B6  3400               	retlw	0
  2882  07B7  3400               	retlw	0
  2883  07B8  342C               	retlw	44
  2884  07B9  346B               	retlw	107
  2885  07BA  3469               	retlw	105
  2886  07BB  346F               	retlw	111
  2887  07BC  3430               	retlw	48
  2888  07BD  3439               	retlw	57
  2889  07BE  3400               	retlw	0
  2890  07BF  3400               	retlw	0
  2891  07C0  342E               	retlw	46
  2892  07C1  342F               	retlw	47
  2893  07C2  346C               	retlw	108
  2894  07C3  343B               	retlw	59
  2895  07C4  3470               	retlw	112
  2896  07C5  342D               	retlw	45
  2897  07C6  3400               	retlw	0
  2898  07C7  3400               	retlw	0
  2899  07C8  3400               	retlw	0
  2900  07C9  3427               	retlw	39
  2901  07CA  3400               	retlw	0
  2902  07CB  345B               	retlw	91
  2903  07CC  343D               	retlw	61
  2904  07CD  3400               	retlw	0
  2905  07CE  3400               	retlw	0
  2906  07CF  3400               	retlw	0
  2907  07D0  3400               	retlw	0
  2908  07D1  340D               	retlw	13
  2909  07D2  345D               	retlw	93
  2910  07D3  3400               	retlw	0
  2911  07D4  345C               	retlw	92
  2912  07D5  3400               	retlw	0
  2913  07D6  3400               	retlw	0
  2914  07D7  3400               	retlw	0
  2915  07D8  3400               	retlw	0
  2916  07D9  3400               	retlw	0
  2917  07DA  3400               	retlw	0
  2918  07DB  3400               	retlw	0
  2919  07DC  3400               	retlw	0
  2920  07DD  3408               	retlw	8
  2921  07DE  3400               	retlw	0
  2922  07DF  3400               	retlw	0
  2923  07E0  3431               	retlw	49
  2924  07E1  3400               	retlw	0
  2925  07E2  3434               	retlw	52
  2926  07E3  3437               	retlw	55
  2927  07E4  3400               	retlw	0
  2928  07E5  3400               	retlw	0
  2929  07E6  3400               	retlw	0
  2930  07E7  3430               	retlw	48
  2931  07E8  342E               	retlw	46
  2932  07E9  3432               	retlw	50
  2933  07EA  3435               	retlw	53
  2934  07EB  3436               	retlw	54
  2935  07EC  3438               	retlw	56
  2936  07ED  341B               	retlw	27
  2937  07EE  3400               	retlw	0
  2938  07EF  3400               	retlw	0
  2939  07F0  342B               	retlw	43
  2940  07F1  3433               	retlw	51
  2941  07F2  342D               	retlw	45
  2942  07F3  342A               	retlw	42
  2943  07F4  3439               	retlw	57
  2944  07F5                     __end_of_ScanCode:	
  2945  07F5                     _ScanCodeSHIFT:	
  2946  07F5  3409               	retlw	9
  2947  07F6  347E               	retlw	126
  2948  07F7  3400               	retlw	0
  2949  07F8  3400               	retlw	0
  2950  07F9  3400               	retlw	0
  2951  07FA  3400               	retlw	0
  2952  07FB  3400               	retlw	0
  2953  07FC  3400               	retlw	0
  2954  07FD  3451               	retlw	81
  2955  07FE  3421               	retlw	33
  2956  07FF  3400               	retlw	0
  2957  0800  3400               	retlw	0
  2958  0801  3400               	retlw	0
  2959  0802  345A               	retlw	90
  2960  0803  3453               	retlw	83
  2961  0804  3441               	retlw	65
  2962  0805  3457               	retlw	87
  2963  0806  3440               	retlw	64
  2964  0807  3400               	retlw	0
  2965  0808  3400               	retlw	0
  2966  0809  3443               	retlw	67
  2967  080A  3458               	retlw	88
  2968  080B  3444               	retlw	68
  2969  080C  3445               	retlw	69
  2970  080D  3424               	retlw	36
  2971  080E  3423               	retlw	35
  2972  080F  3400               	retlw	0
  2973  0810  3400               	retlw	0
  2974  0811  3420               	retlw	32
  2975  0812  3456               	retlw	86
  2976  0813  3446               	retlw	70
  2977  0814  3454               	retlw	84
  2978  0815  3452               	retlw	82
  2979  0816  3425               	retlw	37
  2980  0817  3400               	retlw	0
  2981  0818  3400               	retlw	0
  2982  0819  344E               	retlw	78
  2983  081A  3442               	retlw	66
  2984  081B  3448               	retlw	72
  2985  081C  3447               	retlw	71
  2986  081D  3459               	retlw	89
  2987  081E  345E               	retlw	94
  2988  081F  3400               	retlw	0
  2989  0820  3400               	retlw	0
  2990  0821  3400               	retlw	0
  2991  0822  344D               	retlw	77
  2992  0823  344A               	retlw	74
  2993  0824  3455               	retlw	85
  2994  0825  3426               	retlw	38
  2995  0826  342A               	retlw	42
  2996  0827  3400               	retlw	0
  2997  0828  3400               	retlw	0
  2998  0829  343C               	retlw	60
  2999  082A  344B               	retlw	75
  3000  082B  3449               	retlw	73
  3001  082C  344F               	retlw	79
  3002  082D  3429               	retlw	41
  3003  082E  3428               	retlw	40
  3004  082F  3400               	retlw	0
  3005  0830  3400               	retlw	0
  3006  0831  343E               	retlw	62
  3007  0832  343F               	retlw	63
  3008  0833  344C               	retlw	76
  3009  0834  343A               	retlw	58
  3010  0835  3450               	retlw	80
  3011  0836  345F               	retlw	95
  3012  0837  3400               	retlw	0
  3013  0838  3400               	retlw	0
  3014  0839  3400               	retlw	0
  3015  083A  3422               	retlw	34
  3016  083B  3400               	retlw	0
  3017  083C  347B               	retlw	123
  3018  083D  342B               	retlw	43
  3019  083E  3400               	retlw	0
  3020  083F  3400               	retlw	0
  3021  0840  3400               	retlw	0
  3022  0841  3400               	retlw	0
  3023  0842  340D               	retlw	13
  3024  0843  347D               	retlw	125
  3025  0844  3400               	retlw	0
  3026  0845  347C               	retlw	124
  3027  0846  3400               	retlw	0
  3028  0847  3400               	retlw	0
  3029  0848  3400               	retlw	0
  3030  0849  3400               	retlw	0
  3031  084A  3400               	retlw	0
  3032  084B  3400               	retlw	0
  3033  084C  3400               	retlw	0
  3034  084D  3400               	retlw	0
  3035  084E  3408               	retlw	8
  3036  084F  3400               	retlw	0
  3037  0850  3400               	retlw	0
  3038  0851  3431               	retlw	49
  3039  0852  3400               	retlw	0
  3040  0853  3434               	retlw	52
  3041  0854  3437               	retlw	55
  3042  0855  3400               	retlw	0
  3043  0856  3400               	retlw	0
  3044  0857  3400               	retlw	0
  3045  0858  3430               	retlw	48
  3046  0859  342E               	retlw	46
  3047  085A  3432               	retlw	50
  3048  085B  3435               	retlw	53
  3049  085C  3436               	retlw	54
  3050  085D  3438               	retlw	56
  3051  085E  341B               	retlw	27
  3052  085F  3400               	retlw	0
  3053  0860  3400               	retlw	0
  3054  0861  342B               	retlw	43
  3055  0862  3433               	retlw	51
  3056  0863  342D               	retlw	45
  3057  0864  342A               	retlw	42
  3058  0865  3439               	retlw	57
  3059  0866                     __end_of_ScanCodeSHIFT:	
  3060  0866                     _ScanCodeFunctionE0:	
  3061  0866  341E               	retlw	30
  3062  0867  3400               	retlw	0
  3063  0868  3400               	retlw	0
  3064  0869  341F               	retlw	31
  3065  086A  3400               	retlw	0
  3066  086B  3400               	retlw	0
  3067  086C  3400               	retlw	0
  3068  086D  3400               	retlw	0
  3069  086E  3400               	retlw	0
  3070  086F  3400               	retlw	0
  3071  0870  3400               	retlw	0
  3072  0871  3400               	retlw	0
  3073  0872  3400               	retlw	0
  3074  0873  3400               	retlw	0
  3075  0874  3419               	retlw	25
  3076  0875  3400               	retlw	0
  3077  0876  3400               	retlw	0
  3078  0877  3400               	retlw	0
  3079  0878  3400               	retlw	0
  3080  0879  3400               	retlw	0
  3081  087A  3400               	retlw	0
  3082  087B  3400               	retlw	0
  3083  087C  341D               	retlw	29
  3084  087D  3400               	retlw	0
  3085  087E  3400               	retlw	0
  3086  087F  3400               	retlw	0
  3087  0880  3400               	retlw	0
  3088  0881  3400               	retlw	0
  3089  0882  3400               	retlw	0
  3090  0883  3400               	retlw	0
  3091  0884  3400               	retlw	0
  3092  0885  3400               	retlw	0
  3093  0886  3400               	retlw	0
  3094  0887  3400               	retlw	0
  3095  0888  3400               	retlw	0
  3096  0889  3400               	retlw	0
  3097  088A  3400               	retlw	0
  3098  088B  3400               	retlw	0
  3099  088C  3400               	retlw	0
  3100  088D  3400               	retlw	0
  3101  088E  3400               	retlw	0
  3102  088F  3400               	retlw	0
  3103  0890  3400               	retlw	0
  3104  0891  3400               	retlw	0
  3105  0892  3400               	retlw	0
  3106  0893  3400               	retlw	0
  3107  0894  3400               	retlw	0
  3108  0895  3400               	retlw	0
  3109  0896  3400               	retlw	0
  3110  0897  3400               	retlw	0
  3111  0898  3400               	retlw	0
  3112  0899  3400               	retlw	0
  3113  089A  3400               	retlw	0
  3114  089B  3400               	retlw	0
  3115  089C  3400               	retlw	0
  3116  089D  3400               	retlw	0
  3117  089E  3400               	retlw	0
  3118  089F  342F               	retlw	47
  3119  08A0  3400               	retlw	0
  3120  08A1  3400               	retlw	0
  3121  08A2  3400               	retlw	0
  3122  08A3  3400               	retlw	0
  3123  08A4  3400               	retlw	0
  3124  08A5  3400               	retlw	0
  3125  08A6  3400               	retlw	0
  3126  08A7  3400               	retlw	0
  3127  08A8  3400               	retlw	0
  3128  08A9  3400               	retlw	0
  3129  08AA  3400               	retlw	0
  3130  08AB  3400               	retlw	0
  3131  08AC  3400               	retlw	0
  3132  08AD  3400               	retlw	0
  3133  08AE  3400               	retlw	0
  3134  08AF  340D               	retlw	13
  3135  08B0  3400               	retlw	0
  3136  08B1  3400               	retlw	0
  3137  08B2  3400               	retlw	0
  3138  08B3  3400               	retlw	0
  3139  08B4  3400               	retlw	0
  3140  08B5  3400               	retlw	0
  3141  08B6  3400               	retlw	0
  3142  08B7  3400               	retlw	0
  3143  08B8  3400               	retlw	0
  3144  08B9  3400               	retlw	0
  3145  08BA  3400               	retlw	0
  3146  08BB  3400               	retlw	0
  3147  08BC  3400               	retlw	0
  3148  08BD  3400               	retlw	0
  3149  08BE  3401               	retlw	1
  3150  08BF  3400               	retlw	0
  3151  08C0  3403               	retlw	3
  3152  08C1  3416               	retlw	22
  3153  08C2  3400               	retlw	0
  3154  08C3  3400               	retlw	0
  3155  08C4  3400               	retlw	0
  3156  08C5  3415               	retlw	21
  3157  08C6  347F               	retlw	127
  3158  08C7  3404               	retlw	4
  3159  08C8  3400               	retlw	0
  3160  08C9  3405               	retlw	5
  3161  08CA  3402               	retlw	2
  3162  08CB  3400               	retlw	0
  3163  08CC  3400               	retlw	0
  3164  08CD  3400               	retlw	0
  3165  08CE  3400               	retlw	0
  3166  08CF  3418               	retlw	24
  3167  08D0  3400               	retlw	0
  3168  08D1  3400               	retlw	0
  3169  08D2  3417               	retlw	23
  3170  08D3                     __end_of_ScanCodeFunctionE0:	
  3171  08D3                     _dpowers:	
  3172  08D3  3401               	retlw	1
  3173  08D4  3400               	retlw	0
  3174  08D5  3400               	retlw	0
  3175  08D6  3400               	retlw	0
  3176  08D7  340A               	retlw	10
  3177  08D8  3400               	retlw	0
  3178  08D9  3400               	retlw	0
  3179  08DA  3400               	retlw	0
  3180  08DB  3464               	retlw	100
  3181  08DC  3400               	retlw	0
  3182  08DD  3400               	retlw	0
  3183  08DE  3400               	retlw	0
  3184  08DF  34E8               	retlw	232
  3185  08E0  3403               	retlw	3
  3186  08E1  3400               	retlw	0
  3187  08E2  3400               	retlw	0
  3188  08E3  3410               	retlw	16
  3189  08E4  3427               	retlw	39
  3190  08E5  3400               	retlw	0
  3191  08E6  3400               	retlw	0
  3192  08E7  34A0               	retlw	160
  3193  08E8  3486               	retlw	134
  3194  08E9  3401               	retlw	1
  3195  08EA  3400               	retlw	0
  3196  08EB  3440               	retlw	64
  3197  08EC  3442               	retlw	66
  3198  08ED  340F               	retlw	15
  3199  08EE  3400               	retlw	0
  3200  08EF  3480               	retlw	128
  3201  08F0  3496               	retlw	150
  3202  08F1  3498               	retlw	152
  3203  08F2  3400               	retlw	0
  3204  08F3  3400               	retlw	0
  3205  08F4  34E1               	retlw	225
  3206  08F5  34F5               	retlw	245
  3207  08F6  3405               	retlw	5
  3208  08F7  3400               	retlw	0
  3209  08F8  34CA               	retlw	202
  3210  08F9  349A               	retlw	154
  3211  08FA  343B               	retlw	59
  3212  08FB                     __end_of_dpowers:	
  3213  08FB                     _EvenParityMSG:	
  3214  08FB  3420               	retlw	32
  3215  08FC  3477               	retlw	119
  3216  08FD  3469               	retlw	105
  3217  08FE  3474               	retlw	116
  3218  08FF  3468               	retlw	104
  3219  0900  3420               	retlw	32
  3220  0901  3445               	retlw	69
  3221  0902  3476               	retlw	118
  3222  0903  3465               	retlw	101
  3223  0904  346E               	retlw	110
  3224  0905  3420               	retlw	32
  3225  0906  3470               	retlw	112
  3226  0907  3461               	retlw	97
  3227  0908  3472               	retlw	114
  3228  0909  3469               	retlw	105
  3229  090A  3474               	retlw	116
  3230  090B  3479               	retlw	121
  3231  090C  3420               	retlw	32
  3232  090D  3462               	retlw	98
  3233  090E  3469               	retlw	105
  3234  090F  3474               	retlw	116
  3235  0910  3400               	retlw	0
  3236  0911                     __end_of_EvenParityMSG:	
  3237  0911                     _OddParityMSG:	
  3238  0911  3420               	retlw	32
  3239  0912  3477               	retlw	119
  3240  0913  3469               	retlw	105
  3241  0914  3474               	retlw	116
  3242  0915  3468               	retlw	104
  3243  0916  3420               	retlw	32
  3244  0917  344F               	retlw	79
  3245  0918  3464               	retlw	100
  3246  0919  3464               	retlw	100
  3247  091A  3420               	retlw	32
  3248  091B  3470               	retlw	112
  3249  091C  3461               	retlw	97
  3250  091D  3472               	retlw	114
  3251  091E  3469               	retlw	105
  3252  091F  3474               	retlw	116
  3253  0920  3479               	retlw	121
  3254  0921  3420               	retlw	32
  3255  0922  3462               	retlw	98
  3256  0923  3469               	retlw	105
  3257  0924  3474               	retlw	116
  3258  0925  3400               	retlw	0
  3259  0926                     __end_of_OddParityMSG:	
  3260  0926                     _NoParityMSG:	
  3261  0926  3420               	retlw	32
  3262  0927  3477               	retlw	119
  3263  0928  3469               	retlw	105
  3264  0929  3474               	retlw	116
  3265  092A  3468               	retlw	104
  3266  092B  3420               	retlw	32
  3267  092C  344E               	retlw	78
  3268  092D  346F               	retlw	111
  3269  092E  3420               	retlw	32
  3270  092F  3470               	retlw	112
  3271  0930  3461               	retlw	97
  3272  0931  3472               	retlw	114
  3273  0932  3469               	retlw	105
  3274  0933  3474               	retlw	116
  3275  0934  3479               	retlw	121
  3276  0935  3420               	retlw	32
  3277  0936  3462               	retlw	98
  3278  0937  3469               	retlw	105
  3279  0938  3474               	retlw	116
  3280  0939  3400               	retlw	0
  3281  093A                     __end_of_NoParityMSG:	
  3282  093A                     _SpaceParityMSG:	
  3283  093A  3420               	retlw	32
  3284  093B  3477               	retlw	119
  3285  093C  3469               	retlw	105
  3286  093D  3474               	retlw	116
  3287  093E  3468               	retlw	104
  3288  093F  3420               	retlw	32
  3289  0940  3453               	retlw	83
  3290  0941  3470               	retlw	112
  3291  0942  3461               	retlw	97
  3292  0943  3463               	retlw	99
  3293  0944  3465               	retlw	101
  3294  0945  3420               	retlw	32
  3295  0946  3462               	retlw	98
  3296  0947  3469               	retlw	105
  3297  0948  3474               	retlw	116
  3298  0949  3400               	retlw	0
  3299  094A                     __end_of_SpaceParityMSG:	
  3300  094A                     _MarkParityMSG:	
  3301  094A  3420               	retlw	32
  3302  094B  3477               	retlw	119
  3303  094C  3469               	retlw	105
  3304  094D  3474               	retlw	116
  3305  094E  3468               	retlw	104
  3306  094F  3420               	retlw	32
  3307  0950  344D               	retlw	77
  3308  0951  3461               	retlw	97
  3309  0952  3472               	retlw	114
  3310  0953  346B               	retlw	107
  3311  0954  3420               	retlw	32
  3312  0955  3462               	retlw	98
  3313  0956  3469               	retlw	105
  3314  0957  3474               	retlw	116
  3315  0958  3400               	retlw	0
  3316  0959                     __end_of_MarkParityMSG:	
  3317  0959                     _VoltageMSG:	
  3318  0959  3456               	retlw	86
  3319  095A  346F               	retlw	111
  3320  095B  346C               	retlw	108
  3321  095C  3474               	retlw	116
  3322  095D  3461               	retlw	97
  3323  095E  3467               	retlw	103
  3324  095F  3465               	retlw	101
  3325  0960  3420               	retlw	32
  3326  0961  3474               	retlw	116
  3327  0962  346F               	retlw	111
  3328  0963  346F               	retlw	111
  3329  0964  3420               	retlw	32
  3330  0965  3400               	retlw	0
  3331  0966                     __end_of_VoltageMSG:	
  3332  0966                     _Version:	
  3333  0966  3431               	retlw	49
  3334  0967  342E               	retlw	46
  3335  0968  3433               	retlw	51
  3336  0969  345F               	retlw	95
  3337  096A  3444               	retlw	68
  3338  096B  3457               	retlw	87
  3339  096C  3430               	retlw	48
  3340  096D  3461               	retlw	97
  3341  096E  3400               	retlw	0
  3342  096F                     __end_of_Version:	
  3343  000B                     _INTCON	set	11
  3344  000B                     _INTCONbits	set	11
  3345  0011                     _PIR1bits	set	17
  3346  000C                     _PORTA	set	12
  3347  001B                     _PR2	set	27
  3348  001C                     _T2CON	set	28
  3349  001C                     _T2CONbits	set	28
  3350  001A                     _TMR2	set	26
  3351  009D                     _ADCON0	set	157
  3352  009E                     _ADCON1	set	158
  3353  009F                     _ADCON2	set	159
  3354  009C                     _ADRESH	set	156
  3355  009B                     _ADRESL	set	155
  3356  0095                     _OPTION_REGbits	set	149
  3357  0099                     _OSCCON	set	153
  3358  009A                     _OSCSTAT	set	154
  3359  0091                     _PIE1	set	145
  3360  0091                     _PIE1bits	set	145
  3361  008C                     _TRISAbits	set	140
  3362  008E                     _TRISCbits	set	142
  3363  04D0                     _HFIOFS	set	1232
  3364  0117                     _FVRCON	set	279
  3365  010C                     _LATA	set	268
  3366  010E                     _LATC	set	270
  3367  018C                     _ANSELA	set	396
  3368  018E                     _ANSELC	set	398
  3369  019F                     _BAUD1CON	set	415
  3370  0192                     _PMADRH	set	402
  3371  0191                     _PMADRL	set	401
  3372  0195                     _PMCON1	set	405
  3373  0196                     _PMCON2	set	406
  3374  0194                     _PMDATH	set	404
  3375  0193                     _PMDATL	set	403
  3376  019D                     _RC1STA	set	413
  3377  019D                     _RC1STAbits	set	413
  3378  0199                     _RCREG	set	409
  3379  019D                     _RCSTA	set	413
  3380  019D                     _RCSTAbits	set	413
  3381  019B                     _SPBRG	set	411
  3382  019C                     _SPBRGH	set	412
  3383  019E                     _TX1STA	set	414
  3384  019E                     _TX1STAbits	set	414
  3385  019A                     _TXREG	set	410
  3386  019E                     _TXSTAbits	set	414
  3387  020C                     _WPUA	set	524
  3388  020E                     _WPUC	set	526
  3389  029A                     _CCP2CONbits	set	666
  3390  0393                     _IOCAF	set	915
  3391  0392                     _IOCAN	set	914
  3392  0391                     _IOCAP	set	913
  3393  0E25                     _CKPPS	set	3621
  3394  0E0F                     _PPSLOCK	set	3599
  3395  0EA2                     _RC2PPS	set	3746
  3396  096F                     __stringdata:	
  3397  096F                     STR_6:	
  3398  096F  3443               	retlw	67	;'C'
  3399  0970  3468               	retlw	104	;'h'
  3400  0971  3461               	retlw	97	;'a'
  3401  0972  346E               	retlw	110	;'n'
  3402  0973  3467               	retlw	103	;'g'
  3403  0974  3465               	retlw	101	;'e'
  3404  0975  3420               	retlw	32	;' '
  3405  0976  3442               	retlw	66	;'B'
  3406  0977  3441               	retlw	65	;'A'
  3407  0978  3455               	retlw	85	;'U'
  3408  0979  3444               	retlw	68	;'D'
  3409  097A  343A               	retlw	58	;':'
  3410  097B  3420               	retlw	32	;' '
  3411  097C  3422               	retlw	34	;'"'
  3412  097D  3443               	retlw	67	;'C'
  3413  097E  344E               	retlw	78	;'N'
  3414  097F  3454               	retlw	84	;'T'
  3415  0980  3420               	retlw	32	;' '
  3416  0981  342B               	retlw	43	;'+'
  3417  0982  3420               	retlw	32	;' '
  3418  0983  3441               	retlw	65	;'A'
  3419  0984  344C               	retlw	76	;'L'
  3420  0985  3454               	retlw	84	;'T'
  3421  0986  3420               	retlw	32	;' '
  3422  0987  342B               	retlw	43	;'+'
  3423  0988  3420               	retlw	32	;' '
  3424  0989  3444               	retlw	68	;'D'
  3425  098A  3445               	retlw	69	;'E'
  3426  098B  344C               	retlw	76	;'L'
  3427  098C  3422               	retlw	34	;'"'
  3428  098D  340D               	retlw	13
  3429  098E  340A               	retlw	10
  3430  098F  3400               	retlw	0
  3431  0990                     STR_3:	
  3432  0990  340D               	retlw	13
  3433  0991  340A               	retlw	10
  3434  0992  3450               	retlw	80	;'P'
  3435  0993  3453               	retlw	83	;'S'
  3436  0994  342F               	retlw	47	;'/'
  3437  0995  3432               	retlw	50	;'2'
  3438  0996  3420               	retlw	32	;' '
  3439  0997  344B               	retlw	75	;'K'
  3440  0998  3465               	retlw	101	;'e'
  3441  0999  3479               	retlw	121	;'y'
  3442  099A  3462               	retlw	98	;'b'
  3443  099B  346F               	retlw	111	;'o'
  3444  099C  3461               	retlw	97	;'a'
  3445  099D  3472               	retlw	114	;'r'
  3446  099E  3464               	retlw	100	;'d'
  3447  099F  3420               	retlw	32	;' '
  3448  09A0  3474               	retlw	116	;'t'
  3449  09A1  346F               	retlw	111	;'o'
  3450  09A2  3420               	retlw	32	;' '
  3451  09A3  3452               	retlw	82	;'R'
  3452  09A4  3453               	retlw	83	;'S'
  3453  09A5  342D               	retlw	45	;'-'
  3454  09A6  3432               	retlw	50	;'2'
  3455  09A7  3433               	retlw	51	;'3'
  3456  09A8  3432               	retlw	50	;'2'
  3457  09A9  340D               	retlw	13
  3458  09AA  340A               	retlw	10
  3459  09AB  3400               	retlw	0
  3460  09AC                     STR_18:	
  3461  09AC  3442               	retlw	66	;'B'
  3462  09AD  3461               	retlw	97	;'a'
  3463  09AE  3475               	retlw	117	;'u'
  3464  09AF  3464               	retlw	100	;'d'
  3465  09B0  3420               	retlw	32	;' '
  3466  09B1  3477               	retlw	119	;'w'
  3467  09B2  3469               	retlw	105	;'i'
  3468  09B3  346C               	retlw	108	;'l'
  3469  09B4  346C               	retlw	108	;'l'
  3470  09B5  3420               	retlw	32	;' '
  3471  09B6  3462               	retlw	98	;'b'
  3472  09B7  3465               	retlw	101	;'e'
  3473  09B8  3420               	retlw	32	;' '
  3474  09B9  3473               	retlw	115	;'s'
  3475  09BA  3465               	retlw	101	;'e'
  3476  09BB  3474               	retlw	116	;'t'
  3477  09BC  3420               	retlw	32	;' '
  3478  09BD  3474               	retlw	116	;'t'
  3479  09BE  346F               	retlw	111	;'o'
  3480  09BF  3420               	retlw	32	;' '
  3481  09C0  3425               	retlw	37	;'%'
  3482  09C1  346C               	retlw	108	;'l'
  3483  09C2  3475               	retlw	117	;'u'
  3484  09C3  3400               	retlw	0
  3485  09C4                     STR_10:	
  3486  09C4  3446               	retlw	70	;'F'
  3487  09C5  346C               	retlw	108	;'l'
  3488  09C6  3461               	retlw	97	;'a'
  3489  09C7  3473               	retlw	115	;'s'
  3490  09C8  3468               	retlw	104	;'h'
  3491  09C9  3420               	retlw	32	;' '
  3492  09CA  3450               	retlw	80	;'P'
  3493  09CB  3472               	retlw	114	;'r'
  3494  09CC  346F               	retlw	111	;'o'
  3495  09CD  3467               	retlw	103	;'g'
  3496  09CE  3472               	retlw	114	;'r'
  3497  09CF  3461               	retlw	97	;'a'
  3498  09D0  346D               	retlw	109	;'m'
  3499  09D1  3420               	retlw	32	;' '
  3500  09D2  3446               	retlw	70	;'F'
  3501  09D3  3461               	retlw	97	;'a'
  3502  09D4  3469               	retlw	105	;'i'
  3503  09D5  346C               	retlw	108	;'l'
  3504  09D6  340D               	retlw	13
  3505  09D7  340A               	retlw	10
  3506  09D8  3400               	retlw	0
  3507  09D9                     STR_20:	
  3508  09D9  3442               	retlw	66	;'B'
  3509  09DA  3461               	retlw	97	;'a'
  3510  09DB  3475               	retlw	117	;'u'
  3511  09DC  3464               	retlw	100	;'d'
  3512  09DD  3420               	retlw	32	;' '
  3513  09DE  344F               	retlw	79	;'O'
  3514  09DF  3475               	retlw	117	;'u'
  3515  09E0  3474               	retlw	116	;'t'
  3516  09E1  3420               	retlw	32	;' '
  3517  09E2  346F               	retlw	111	;'o'
  3518  09E3  3466               	retlw	102	;'f'
  3519  09E4  3420               	retlw	32	;' '
  3520  09E5  3452               	retlw	82	;'R'
  3521  09E6  3461               	retlw	97	;'a'
  3522  09E7  346E               	retlw	110	;'n'
  3523  09E8  3467               	retlw	103	;'g'
  3524  09E9  3465               	retlw	101	;'e'
  3525  09EA  340D               	retlw	13
  3526  09EB  340A               	retlw	10
  3527  09EC  3400               	retlw	0
  3528  09ED                     STR_14:	
  3529  09ED  3445               	retlw	69	;'E'
  3530  09EE  346E               	retlw	110	;'n'
  3531  09EF  3474               	retlw	116	;'t'
  3532  09F0  3465               	retlw	101	;'e'
  3533  09F1  3472               	retlw	114	;'r'
  3534  09F2  3420               	retlw	32	;' '
  3535  09F3  3442               	retlw	66	;'B'
  3536  09F4  3461               	retlw	97	;'a'
  3537  09F5  3475               	retlw	117	;'u'
  3538  09F6  3464               	retlw	100	;'d'
  3539  09F7  3420               	retlw	32	;' '
  3540  09F8  3472               	retlw	114	;'r'
  3541  09F9  3461               	retlw	97	;'a'
  3542  09FA  3474               	retlw	116	;'t'
  3543  09FB  3465               	retlw	101	;'e'
  3544  09FC  3420               	retlw	32	;' '
  3545  09FD  340D               	retlw	13
  3546  09FE  340A               	retlw	10
  3547  09FF  3400               	retlw	0
  3548  0A00                     STR_15:	
  3549  0A00  3442               	retlw	66	;'B'
  3550  0A01  3461               	retlw	97	;'a'
  3551  0A02  3475               	retlw	117	;'u'
  3552  0A03  3464               	retlw	100	;'d'
  3553  0A04  3420               	retlw	32	;' '
  3554  0A05  3452               	retlw	82	;'R'
  3555  0A06  3465               	retlw	101	;'e'
  3556  0A07  3473               	retlw	115	;'s'
  3557  0A08  3465               	retlw	101	;'e'
  3558  0A09  3474               	retlw	116	;'t'
  3559  0A0A  3420               	retlw	32	;' '
  3560  0A0B  3474               	retlw	116	;'t'
  3561  0A0C  346F               	retlw	111	;'o'
  3562  0A0D  3420               	retlw	32	;' '
  3563  0A0E  3439               	retlw	57	;'9'
  3564  0A0F  3436               	retlw	54	;'6'
  3565  0A10  3430               	retlw	48	;'0'
  3566  0A11  3430               	retlw	48	;'0'
  3567  0A12  3400               	retlw	0
  3568  0A13                     STR_4:	
  3569  0A13  3446               	retlw	70	;'F'
  3570  0A14  3469               	retlw	105	;'i'
  3571  0A15  3472               	retlw	114	;'r'
  3572  0A16  346D               	retlw	109	;'m'
  3573  0A17  3477               	retlw	119	;'w'
  3574  0A18  3461               	retlw	97	;'a'
  3575  0A19  3472               	retlw	114	;'r'
  3576  0A1A  3465               	retlw	101	;'e'
  3577  0A1B  3420               	retlw	32	;' '
  3578  0A1C  3456               	retlw	86	;'V'
  3579  0A1D  3465               	retlw	101	;'e'
  3580  0A1E  3472               	retlw	114	;'r'
  3581  0A1F  3473               	retlw	115	;'s'
  3582  0A20  3469               	retlw	105	;'i'
  3583  0A21  346F               	retlw	111	;'o'
  3584  0A22  346E               	retlw	110	;'n'
  3585  0A23  343A               	retlw	58	;':'
  3586  0A24  3420               	retlw	32	;' '
  3587  0A25  3400               	retlw	0
  3588  0A26                     STR_11:	
  3589  0A26  3442               	retlw	66	;'B'
  3590  0A27  3461               	retlw	97	;'a'
  3591  0A28  3475               	retlw	117	;'u'
  3592  0A29  3464               	retlw	100	;'d'
  3593  0A2A  3420               	retlw	32	;' '
  3594  0A2B  3469               	retlw	105	;'i'
  3595  0A2C  3473               	retlw	115	;'s'
  3596  0A2D  3420               	retlw	32	;' '
  3597  0A2E  3425               	retlw	37	;'%'
  3598  0A2F  346C               	retlw	108	;'l'
  3599  0A30  3475               	retlw	117	;'u'
  3600  0A31  3400               	retlw	0
  3601  0A32                     STR_2:	
  3602  0A32  3448               	retlw	72	;'H'
  3603  0A33  3469               	retlw	105	;'i'
  3604  0A34  3467               	retlw	103	;'g'
  3605  0A35  3468               	retlw	104	;'h'
  3606  0A36  3421               	retlw	33	;'!'
  3607  0A37  340D               	retlw	13
  3608  0A38  340A               	retlw	10
  3609  0A39  3400               	retlw	0
  3610  0A3A                     STR_1:	
  3611  0A3A  344C               	retlw	76	;'L'
  3612  0A3B  346F               	retlw	111	;'o'
  3613  0A3C  3477               	retlw	119	;'w'
  3614  0A3D  3421               	retlw	33	;'!'
  3615  0A3E  340D               	retlw	13
  3616  0A3F  340A               	retlw	10
  3617  0A40  3400               	retlw	0
  3618  0A41                     __end_of__stringdata:	
  3619                           
  3620                           ; #config settings
  3621  0000                     
  3622                           	psect	cinit
  3623  00AE                     start_initialization:	
  3624  00AE                     __initialization:	
  3625                           
  3626                           ; Clear objects allocated to BANK1
  3627  00AE  30C4               	movlw	low __pbssBANK1
  3628  00AF  0084               	movwf	4
  3629  00B0  3000               	movlw	high __pbssBANK1
  3630  00B1  0085               	movwf	5
  3631  00B2  301D               	movlw	29
  3632  00B3  3198  209A  3180   	fcall	clear_ram0
  3633                           
  3634                           ; Clear objects allocated to BANK3
  3635  00B6  30E1               	movlw	low __pbssBANK3
  3636  00B7  0084               	movwf	4
  3637  00B8  3001               	movlw	high __pbssBANK3
  3638  00B9  0085               	movwf	5
  3639  00BA  300F               	movlw	15
  3640  00BB  3198  209A  3180   	fcall	clear_ram0
  3641                           
  3642                           ; Clear objects allocated to BANK4
  3643  00BE  3057               	movlw	low __pbssBANK4
  3644  00BF  0084               	movwf	4
  3645  00C0  3002               	movlw	high __pbssBANK4
  3646  00C1  0085               	movwf	5
  3647  00C2  300A               	movlw	10
  3648  00C3  3198  209A  3180   	fcall	clear_ram0
  3649                           
  3650                           ; Initialize objects allocated to BANK1
  3651  00C6  30FC               	movlw	low __pidataBANK1
  3652  00C7  0084               	movwf	4
  3653  00C8  3086               	movlw	(high __pidataBANK1)| (0+128)
  3654  00C9  0085               	movwf	5
  3655  00CA  30E1               	movlw	low __pdataBANK1
  3656  00CB  0086               	movwf	6
  3657  00CC  3000               	movlw	high __pdataBANK1
  3658  00CD  0087               	movwf	7
  3659  00CE  3004               	movlw	4
  3660  00CF  3198  2094  3180   	fcall	init_ram
  3661                           
  3662                           ; Initialize objects allocated to BANK4
  3663  00D2  3085               	movlw	low __pidataBANK4
  3664  00D3  0084               	movwf	4
  3665  00D4  3098               	movlw	(high __pidataBANK4)| (0+128)
  3666  00D5  0085               	movwf	5
  3667  00D6  3061               	movlw	low __pdataBANK4
  3668  00D7  0086               	movwf	6
  3669  00D8  3002               	movlw	high __pdataBANK4
  3670  00D9  0087               	movwf	7
  3671  00DA  3004               	movlw	4
  3672  00DB  3198  2094         	fcall	init_ram
  3673  00DD                     end_of_initialization:	
  3674                           ;End of C runtime variable initialization code
  3675                           
  3676  00DD                     __end_of__initialization:	
  3677  00DD  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  3678  00DE  0020               	movlb	0
  3679  00DF  3196  2E13         	ljmp	_main	;jump to C main() function
  3680                           
  3681                           	psect	bssBANK1
  3682  00C4                     __pbssBANK1:	
  3683  00C4                     _BaudTyped:	
  3684  00C4                     	ds	4
  3685  00C8                     _PS_2_Read_Data_TEMP:	
  3686  00C8                     	ds	2
  3687  00CA                     _BAUDMODE:	
  3688  00CA                     	ds	1
  3689  00CB                     _Caps_Lock_Key:	
  3690  00CB                     	ds	1
  3691  00CC                     _Caps_Lock_Key_old:	
  3692  00CC                     	ds	1
  3693  00CD                     _Delete:	
  3694  00CD                     	ds	1
  3695  00CE                     _LControl:	
  3696  00CE                     	ds	1
  3697  00CF                     _Left_Shift_Key_old:	
  3698  00CF                     	ds	1
  3699  00D0                     _PS_2_Buffer_items:	
  3700  00D0                     	ds	1
  3701  00D1                     _PS_2_bits:	
  3702  00D1                     	ds	1
  3703  00D2                     _ResendLastFlag:	
  3704  00D2                     	ds	1
  3705  00D3                     _Right_Shift_Key_old:	
  3706  00D3                     	ds	1
  3707  00D4                     _i:	
  3708  00D4                     	ds	1
  3709  00D5                     _PS_2_ScanCodes:	
  3710  00D5                     	ds	12
  3711                           
  3712                           	psect	dataBANK1
  3713  00E1                     __pdataBANK1:	
  3714  00E1                     _MEM:	
  3715  00E1                     	ds	4
  3716                           
  3717                           	psect	bssBANK3
  3718  01E1                     __pbssBANK3:	
  3719  01E1                     _PS_2_Read_Data_First:	
  3720  01E1                     	ds	2
  3721  01E3                     _PS_2_Read_Data_Second:	
  3722  01E3                     	ds	2
  3723  01E5                     _PS_2_Read_Data_Third:	
  3724  01E5                     	ds	2
  3725  01E7                     _CapsCount:	
  3726  01E7                     	ds	1
  3727  01E8                     _Caps_Lock:	
  3728  01E8                     	ds	1
  3729  01E9                     _LALT:	
  3730  01E9                     	ds	1
  3731  01EA                     _Left_Shift_Key:	
  3732  01EA                     	ds	1
  3733  01EB                     _ParityTyped:	
  3734  01EB                     	ds	1
  3735  01EC                     _RALT:	
  3736  01EC                     	ds	1
  3737  01ED                     _RControl:	
  3738  01ED                     	ds	1
  3739  01EE                     _Right_Shift_Key:	
  3740  01EE                     	ds	1
  3741  01EF                     _Shift_Key:	
  3742  01EF                     	ds	1
  3743                           
  3744                           	psect	bssBANK4
  3745  0257                     __pbssBANK4:	
  3746  0257                     _BatteryVoltage:	
  3747  0257                     	ds	3
  3748  025A                     _SinLEDtimer:	
  3749  025A                     	ds	2
  3750  025C                     _pwrLEDtoggle:	
  3751  025C                     	ds	2
  3752  025E                     _Alarm:	
  3753  025E                     	ds	1
  3754  025F                     _ECHO:	
  3755  025F                     	ds	1
  3756  0260                     _PARITY:	
  3757  0260                     	ds	1
  3758                           
  3759                           	psect	dataBANK4
  3760  0261                     __pdataBANK4:	
  3761  0261                     _BAUD:	
  3762  0261                     	ds	4
  3763                           
  3764                           	psect	clrtext
  3765  189A                     clear_ram0:	
  3766                           ;	Called with FSR0 containing the base address, and
  3767                           ;	WREG with the size to clear
  3768                           
  3769  189A  0064               	clrwdt	;clear the watchdog before getting into this loop
  3770  189B                     clrloop0:	
  3771  189B  0180               	clrf	0	;clear RAM location pointed to by FSR
  3772  189C  3101               	addfsr 0,1
  3773  189D  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3774  189E  289B               	goto	clrloop0	;have we reached the end yet?
  3775  189F  3400               	retlw	0	;all done for this memory range, return
  3776                           
  3777                           	psect	inittext
  3778  1894                     init_ram:	
  3779  1894  00FE               	movwf	126
  3780  1895                     initloop:	
  3781  1895  0012               	moviw fsr0++
  3782  1896  001E               	movwi fsr1++
  3783  1897  0BFE               	decfsz	126,f
  3784  1898  2895               	goto	initloop
  3785  1899  3400               	retlw	0
  3786                           
  3787                           	psect	cstackBANK4
  3788  0220                     __pcstackBANK4:	
  3789  0220                     ??_PS_2_DISABLE_INTERRUPT:	
  3790  0220                     ??_READ_PS_2_PIN:	
  3791                           ; 0 bytes @ 0x0
  3792                           
  3793  0220                     ??_Timer2ON:	
  3794                           ; 0 bytes @ 0x0
  3795                           
  3796  0220                     ??_PS_2_ENABLE_INTERRUPT:	
  3797                           ; 0 bytes @ 0x0
  3798                           
  3799  0220                     ??_ConfigureOscillator:	
  3800                           ; 0 bytes @ 0x0
  3801                           
  3802  0220                     ??_InitApp:	
  3803                           ; 0 bytes @ 0x0
  3804                           
  3805  0220                     ?_delayUS:	
  3806                           ; 0 bytes @ 0x0
  3807                           
  3808  0220                     ?_OpenUSART:	
  3809                           ; 0 bytes @ 0x0
  3810                           
  3811  0220                     ??_baudUSART:	
  3812                           ; 0 bytes @ 0x0
  3813                           
  3814  0220                     ??_ReadUSART:	
  3815                           ; 0 bytes @ 0x0
  3816                           
  3817  0220                     ??_Clock_TRIS:	
  3818                           ; 0 bytes @ 0x0
  3819                           
  3820  0220                     ??_Data_TRIS:	
  3821                           ; 0 bytes @ 0x0
  3822                           
  3823  0220                     ??_Timer2Init:	
  3824                           ; 0 bytes @ 0x0
  3825                           
  3826  0220                     ??_DisableInternalADC:	
  3827                           ; 0 bytes @ 0x0
  3828                           
  3829  0220                     ??_CloseUSART:	
  3830                           ; 0 bytes @ 0x0
  3831                           
  3832  0220                     ?___ftge:	
  3833                           ; 0 bytes @ 0x0
  3834                           
  3835  0220                     ?_CheckSum_byte:	
  3836                           ; 1 bit 
  3837                           
  3838  0220                     ?_ReadFlash_2Byte:	
  3839                           ; 1 bytes @ 0x0
  3840                           
  3841  0220                     ?___ftpack:	
  3842                           ; 2 bytes @ 0x0
  3843                           
  3844  0220                     ?___lldiv:	
  3845                           ; 3 bytes @ 0x0
  3846                           
  3847  0220                     baudUSART@baudconfig:	
  3848                           ; 4 bytes @ 0x0
  3849                           
  3850  0220                     Clock_TRIS@direction:	
  3851                           ; 1 bytes @ 0x0
  3852                           
  3853  0220                     Data_TRIS@direction:	
  3854                           ; 1 bytes @ 0x0
  3855                           
  3856  0220                     PS_2_ENABLE_INTERRUPT@DATA_CLK:	
  3857                           ; 1 bytes @ 0x0
  3858                           
  3859  0220                     READ_PS_2_PIN@DATA_CLK:	
  3860                           ; 1 bytes @ 0x0
  3861                           
  3862  0220                     CheckSum_byte@This:	
  3863                           ; 1 bytes @ 0x0
  3864                           
  3865  0220                     OpenUSART@spbrg:	
  3866                           ; 2 bytes @ 0x0
  3867                           
  3868  0220                     ReadFlash_2Byte@row:	
  3869                           ; 2 bytes @ 0x0
  3870                           
  3871  0220                     ___ftpack@arg:	
  3872                           ; 2 bytes @ 0x0
  3873                           
  3874  0220                     ___ftge@ff1:	
  3875                           ; 3 bytes @ 0x0
  3876                           
  3877  0220                     delayUS@US:	
  3878                           ; 3 bytes @ 0x0
  3879                           
  3880  0220                     ___lldiv@divisor:	
  3881                           ; 4 bytes @ 0x0
  3882                           
  3883                           
  3884                           ; 4 bytes @ 0x0
  3885  0220                     	ds	1
  3886  0221                     ReadUSART@data:	
  3887  0221                     PS_2_DISABLE_INTERRUPT@DATA_CLK:	
  3888                           ; 1 bytes @ 0x1
  3889                           
  3890                           
  3891                           ; 1 bytes @ 0x1
  3892  0221                     	ds	1
  3893  0222                     ??_OpenUSART:	
  3894  0222                     CheckSum_byte@Odd_Even:	
  3895                           ; 0 bytes @ 0x2
  3896                           
  3897  0222                     OpenUSART@config:	
  3898                           ; 1 bytes @ 0x2
  3899                           
  3900  0222                     ReadFlash_2Byte@column:	
  3901                           ; 1 bytes @ 0x2
  3902                           
  3903  0222                     Timer2Init@time:	
  3904                           ; 1 bytes @ 0x2
  3905                           
  3906                           
  3907                           ; 1 bytes @ 0x2
  3908  0222                     	ds	1
  3909  0223                     ??_CheckSum_byte:	
  3910  0223                     ??_ReadFlash_2Byte:	
  3911                           ; 0 bytes @ 0x3
  3912                           
  3913  0223                     Timer2Init@postscaler:	
  3914                           ; 0 bytes @ 0x3
  3915                           
  3916  0223                     ___ftpack@exp:	
  3917                           ; 1 bytes @ 0x3
  3918                           
  3919  0223                     ___ftge@ff2:	
  3920                           ; 1 bytes @ 0x3
  3921                           
  3922                           
  3923                           ; 3 bytes @ 0x3
  3924  0223                     	ds	1
  3925  0224                     ??_delayUS:	
  3926  0224                     Timer2Init@prescaler:	
  3927                           ; 0 bytes @ 0x4
  3928                           
  3929  0224                     ___ftpack@sign:	
  3930                           ; 1 bytes @ 0x4
  3931                           
  3932  0224                     CheckSum_byte@ThisTemp:	
  3933                           ; 1 bytes @ 0x4
  3934                           
  3935  0224                     ___lldiv@dividend:	
  3936                           ; 2 bytes @ 0x4
  3937                           
  3938                           
  3939                           ; 4 bytes @ 0x4
  3940  0224                     	ds	1
  3941  0225                     ??___ftpack:	
  3942  0225                     ?_ReadFlash_4Byte:	
  3943                           ; 0 bytes @ 0x5
  3944                           
  3945  0225                     ReadFlash_4Byte@row:	
  3946                           ; 4 bytes @ 0x5
  3947                           
  3948  0225                     delayUS@i:	
  3949                           ; 2 bytes @ 0x5
  3950                           
  3951                           
  3952                           ; 4 bytes @ 0x5
  3953  0225                     	ds	1
  3954  0226                     ??___ftge:	
  3955  0226                     CheckSum_byte@Parity:	
  3956                           ; 0 bytes @ 0x6
  3957                           
  3958                           
  3959                           ; 1 bytes @ 0x6
  3960  0226                     	ds	1
  3961  0227                     CheckSum_byte@i:	
  3962  0227                     ReadFlash_4Byte@column:	
  3963                           ; 1 bytes @ 0x7
  3964                           
  3965                           
  3966                           ; 1 bytes @ 0x7
  3967  0227                     	ds	1
  3968  0228                     ?_UARTchar:	
  3969  0228                     ??___lldiv:	
  3970                           ; 0 bytes @ 0x8
  3971                           
  3972  0228                     ?___lwtoft:	
  3973                           ; 0 bytes @ 0x8
  3974                           
  3975  0228                     UARTchar@override:	
  3976                           ; 3 bytes @ 0x8
  3977                           
  3978  0228                     ___lwtoft@c:	
  3979                           ; 1 bytes @ 0x8
  3980                           
  3981                           
  3982                           ; 2 bytes @ 0x8
  3983  0228                     	ds	1
  3984  0229                     ??_ReadFlash_4Byte:	
  3985  0229                     delayUS@j:	
  3986                           ; 0 bytes @ 0x9
  3987                           
  3988  0229                     UARTchar@NinethBit_override_data:	
  3989                           ; 1 bytes @ 0x9
  3990                           
  3991  0229                     ___lldiv@quotient:	
  3992                           ; 1 bytes @ 0x9
  3993                           
  3994                           
  3995                           ; 4 bytes @ 0x9
  3996  0229                     	ds	1
  3997  022A                     ??_Send_PS2:	
  3998  022A                     ??_UARTchar:	
  3999                           ; 0 bytes @ 0xA
  4000                           
  4001  022A                     ?_InternalADC_Read:	
  4002                           ; 0 bytes @ 0xA
  4003                           
  4004                           
  4005                           ; 2 bytes @ 0xA
  4006  022A                     	ds	1
  4007  022B                     ??___lwtoft:	
  4008                           
  4009                           ; 0 bytes @ 0xB
  4010  022B                     	ds	1
  4011  022C                     ??_InternalADC_Read:	
  4012  022C                     ?___ftdiv:	
  4013                           ; 0 bytes @ 0xC
  4014                           
  4015  022C                     ___ftdiv@f2:	
  4016                           ; 3 bytes @ 0xC
  4017                           
  4018                           
  4019                           ; 3 bytes @ 0xC
  4020  022C                     	ds	1
  4021  022D                     ___lldiv@counter:	
  4022                           
  4023                           ; 1 bytes @ 0xD
  4024  022D                     	ds	1
  4025  022E                     ?_InitUART:	
  4026  022E                     UARTchar@data:	
  4027                           ; 0 bytes @ 0xE
  4028                           
  4029  022E                     Send_PS2@oddparity:	
  4030                           ; 1 bytes @ 0xE
  4031                           
  4032  022E                     InternalADC_Read@channel:	
  4033                           ; 1 bytes @ 0xE
  4034                           
  4035  022E                     InitUART@Baud:	
  4036                           ; 1 bytes @ 0xE
  4037                           
  4038  022E                     ReadFlash_4Byte@temp:	
  4039                           ; 4 bytes @ 0xE
  4040                           
  4041                           
  4042                           ; 4 bytes @ 0xE
  4043  022E                     	ds	1
  4044  022F                     ?_UARTstringWAIT:	
  4045  022F                     Send_PS2@command:	
  4046                           ; 0 bytes @ 0xF
  4047                           
  4048  022F                     UARTstringWAIT@data:	
  4049                           ; 1 bytes @ 0xF
  4050                           
  4051  022F                     ___ftdiv@f1:	
  4052                           ; 2 bytes @ 0xF
  4053                           
  4054                           
  4055                           ; 3 bytes @ 0xF
  4056  022F                     	ds	1
  4057  0230                     Send_PS2@i:	
  4058                           
  4059                           ; 1 bytes @ 0x10
  4060  0230                     	ds	1
  4061  0231                     ??_UARTstringWAIT:	
  4062  0231                     Send_PS2@timeout:	
  4063                           ; 0 bytes @ 0x11
  4064                           
  4065                           
  4066                           ; 2 bytes @ 0x11
  4067  0231                     	ds	1
  4068  0232                     ??___ftdiv:	
  4069  0232                     ?_ReadBaud:	
  4070                           ; 0 bytes @ 0x12
  4071                           
  4072  0232                     InitUART@parity:	
  4073                           ; 4 bytes @ 0x12
  4074                           
  4075  0232                     ReadBaud@row:	
  4076                           ; 1 bytes @ 0x12
  4077                           
  4078                           
  4079                           ; 2 bytes @ 0x12
  4080  0232                     	ds	1
  4081  0233                     ??_PS_2_INIT:	
  4082  0233                     ??_InitUART:	
  4083                           ; 0 bytes @ 0x13
  4084                           
  4085  0233                     ??_Init_PS_2_Send:	
  4086                           ; 0 bytes @ 0x13
  4087                           
  4088                           
  4089                           ; 0 bytes @ 0x13
  4090  0233                     	ds	1
  4091  0234                     ReadBaud@column:	
  4092                           
  4093                           ; 1 bytes @ 0x14
  4094  0234                     	ds	2
  4095  0236                     ??_ReadBaud:	
  4096  0236                     ___ftdiv@cntr:	
  4097                           ; 0 bytes @ 0x16
  4098                           
  4099                           
  4100                           ; 1 bytes @ 0x16
  4101  0236                     	ds	1
  4102  0237                     ___ftdiv@f3:	
  4103                           
  4104                           ; 3 bytes @ 0x17
  4105  0237                     	ds	3
  4106  023A                     ___ftdiv@exp:	
  4107                           
  4108                           ; 1 bytes @ 0x1A
  4109  023A                     	ds	1
  4110  023B                     ___ftdiv@sign:	
  4111  023B                     InitUART@spbrg:	
  4112                           ; 1 bytes @ 0x1B
  4113                           
  4114                           
  4115                           ; 2 bytes @ 0x1B
  4116  023B                     	ds	1
  4117  023C                     ?___ftmul:	
  4118  023C                     ___ftmul@f1:	
  4119                           ; 3 bytes @ 0x1C
  4120                           
  4121                           
  4122                           ; 3 bytes @ 0x1C
  4123  023C                     	ds	1
  4124  023D                     InitUART@baudconfig:	
  4125                           
  4126                           ; 1 bytes @ 0x1D
  4127  023D                     	ds	1
  4128  023E                     InitUART@config:	
  4129  023E                     ReadBaud@temp:	
  4130                           ; 1 bytes @ 0x1E
  4131                           
  4132                           
  4133                           ; 4 bytes @ 0x1E
  4134  023E                     	ds	1
  4135  023F                     ___ftmul@f2:	
  4136  023F                     InitUART@temp:	
  4137                           ; 3 bytes @ 0x1F
  4138                           
  4139                           
  4140                           ; 4 bytes @ 0x1F
  4141  023F                     	ds	3
  4142  0242                     ??___ftmul:	
  4143                           
  4144                           ; 0 bytes @ 0x22
  4145  0242                     	ds	1
  4146  0243                     ??_Init_System:	
  4147                           
  4148                           ; 0 bytes @ 0x23
  4149  0243                     	ds	3
  4150  0246                     ___ftmul@exp:	
  4151                           
  4152                           ; 1 bytes @ 0x26
  4153  0246                     	ds	1
  4154  0247                     ___ftmul@f3_as_product:	
  4155                           
  4156                           ; 3 bytes @ 0x27
  4157  0247                     	ds	1
  4158  0248                     Init_System@temp:	
  4159                           
  4160                           ; 4 bytes @ 0x28
  4161  0248                     	ds	2
  4162  024A                     ___ftmul@cntr:	
  4163                           
  4164                           ; 1 bytes @ 0x2A
  4165  024A                     	ds	1
  4166  024B                     ___ftmul@sign:	
  4167                           
  4168                           ; 1 bytes @ 0x2B
  4169  024B                     	ds	1
  4170  024C                     ?_ReadVoltage:	
  4171  024C                     Init_System@Baud:	
  4172                           ; 3 bytes @ 0x2C
  4173                           
  4174                           
  4175                           ; 4 bytes @ 0x2C
  4176  024C                     	ds	3
  4177  024F                     ??_ReadVoltage:	
  4178                           
  4179                           ; 0 bytes @ 0x2F
  4180  024F                     	ds	1
  4181  0250                     Init_System@Parity:	
  4182  0250                     ReadVoltage@voltage:	
  4183                           ; 1 bytes @ 0x30
  4184                           
  4185                           
  4186                           ; 3 bytes @ 0x30
  4187  0250                     	ds	3
  4188  0253                     ReadVoltage@temp:	
  4189                           
  4190                           ; 2 bytes @ 0x33
  4191  0253                     	ds	2
  4192  0255                     ??_main:	
  4193                           
  4194                           ; 0 bytes @ 0x35
  4195  0255                     	ds	1
  4196  0256                     main@i:	
  4197                           
  4198                           ; 1 bytes @ 0x36
  4199  0256                     	ds	1
  4200                           
  4201                           	psect	cstackBANK3
  4202  01A0                     __pcstackBANK3:	
  4203  01A0                     Process_PS2_ScanCode@buf:	
  4204                           
  4205                           ; 60 bytes @ 0x0
  4206  01A0                     	ds	60
  4207  01DC                     _Process_PS2_ScanCode$803:	
  4208                           
  4209                           ; 1 bytes @ 0x3C
  4210  01DC                     	ds	1
  4211  01DD                     _Process_PS2_ScanCode$804:	
  4212                           
  4213                           ; 1 bytes @ 0x3D
  4214  01DD                     	ds	1
  4215  01DE                     _Process_PS2_ScanCode$805:	
  4216                           
  4217                           ; 1 bytes @ 0x3E
  4218  01DE                     	ds	1
  4219  01DF                     _Process_PS2_ScanCode$806:	
  4220                           
  4221                           ; 1 bytes @ 0x3F
  4222  01DF                     	ds	1
  4223  01E0                     Process_PS2_ScanCode@temp:	
  4224                           
  4225                           ; 1 bytes @ 0x40
  4226  01E0                     	ds	1
  4227                           
  4228                           	psect	cstackBANK2
  4229  0120                     __pcstackBANK2:	
  4230  0120                     SetBaud@buf:	
  4231                           
  4232                           ; 50 bytes @ 0x0
  4233  0120                     	ds	50
  4234  0152                     SetBaud@Baudtemp:	
  4235                           
  4236                           ; 4 bytes @ 0x32
  4237  0152                     	ds	4
  4238  0156                     SetBaud@Paritytemp:	
  4239                           
  4240                           ; 4 bytes @ 0x36
  4241  0156                     	ds	4
  4242  015A                     SetBaud@temp:	
  4243                           
  4244                           ; 4 bytes @ 0x3A
  4245  015A                     	ds	4
  4246  015E                     SetBaud@i:	
  4247                           
  4248                           ; 1 bytes @ 0x3E
  4249  015E                     	ds	1
  4250                           
  4251                           	psect	cstackBANK1
  4252  00A0                     __pcstackBANK1:	
  4253  00A0                     ?_WriteBaud:	
  4254  00A0                     WriteBaud@row:	
  4255                           ; 0 bytes @ 0x0
  4256                           
  4257                           
  4258                           ; 2 bytes @ 0x0
  4259  00A0                     	ds	2
  4260  00A2                     WriteBaud@Baud:	
  4261                           
  4262                           ; 4 bytes @ 0x2
  4263  00A2                     	ds	4
  4264  00A6                     WriteBaud@Parity:	
  4265                           
  4266                           ; 1 bytes @ 0x6
  4267  00A6                     	ds	1
  4268  00A7                     ??_WriteBaud:	
  4269                           
  4270                           ; 0 bytes @ 0x7
  4271  00A7                     	ds	8
  4272  00AF                     ?_SetBaud:	
  4273  00AF                     SetBaud@Baud:	
  4274                           ; 0 bytes @ 0xF
  4275                           
  4276                           
  4277                           ; 4 bytes @ 0xF
  4278  00AF                     	ds	4
  4279  00B3                     SetBaud@Parity:	
  4280                           
  4281                           ; 1 bytes @ 0x13
  4282  00B3                     	ds	1
  4283  00B4                     ??_SetBaud:	
  4284                           
  4285                           ; 0 bytes @ 0x14
  4286  00B4                     	ds	8
  4287  00BC                     ??_Process_PS2_ScanCode:	
  4288                           
  4289                           ; 0 bytes @ 0x1C
  4290  00BC                     	ds	6
  4291  00C2                     isr@Rx_fault:	
  4292                           
  4293                           ; 1 bytes @ 0x22
  4294  00C2                     	ds	1
  4295  00C3                     isr@ScanTemp:	
  4296                           
  4297                           ; 1 bytes @ 0x23
  4298  00C3                     	ds	1
  4299                           
  4300                           	psect	cstackCOMMON
  4301  0070                     __pcstackCOMMON:	
  4302  0070                     ?_PS_2_DISABLE_INTERRUPT:	
  4303  0070                     ?_Timer2Reset:	
  4304                           ; 0 bytes @ 0x0
  4305                           
  4306  0070                     ??_Timer2Reset:	
  4307                           ; 0 bytes @ 0x0
  4308                           
  4309  0070                     ?_Timer2ON:	
  4310                           ; 0 bytes @ 0x0
  4311                           
  4312  0070                     ?_PS_2_ENABLE_INTERRUPT:	
  4313                           ; 0 bytes @ 0x0
  4314                           
  4315  0070                     ?_Timer2OFF:	
  4316                           ; 0 bytes @ 0x0
  4317                           
  4318  0070                     ??_Timer2OFF:	
  4319                           ; 0 bytes @ 0x0
  4320                           
  4321  0070                     ?_ResendLast:	
  4322                           ; 0 bytes @ 0x0
  4323                           
  4324  0070                     ?_Process_PS2_ScanCode:	
  4325                           ; 0 bytes @ 0x0
  4326                           
  4327  0070                     ?_ConfigureOscillator:	
  4328                           ; 0 bytes @ 0x0
  4329                           
  4330  0070                     ?_InitApp:	
  4331                           ; 0 bytes @ 0x0
  4332                           
  4333  0070                     ?_Init_System:	
  4334                           ; 0 bytes @ 0x0
  4335                           
  4336  0070                     ?_PS_2_INIT:	
  4337                           ; 0 bytes @ 0x0
  4338                           
  4339  0070                     ?_baudUSART:	
  4340                           ; 0 bytes @ 0x0
  4341                           
  4342  0070                     ?_Clock_TRIS:	
  4343                           ; 0 bytes @ 0x0
  4344                           
  4345  0070                     ?_Data_TRIS:	
  4346                           ; 0 bytes @ 0x0
  4347                           
  4348  0070                     ?_Timer2Init:	
  4349                           ; 0 bytes @ 0x0
  4350                           
  4351  0070                     ??_Decode_Scan_Code_FunctionE0:	
  4352                           ; 0 bytes @ 0x0
  4353                           
  4354  0070                     ??_Decode_Scan_Code_Shift:	
  4355                           ; 0 bytes @ 0x0
  4356                           
  4357  0070                     ??_Decode_Scan_Code:	
  4358                           ; 0 bytes @ 0x0
  4359                           
  4360  0070                     ??_Decode_Scan_Code_Function:	
  4361                           ; 0 bytes @ 0x0
  4362                           
  4363  0070                     ?_DisableInternalADC:	
  4364                           ; 0 bytes @ 0x0
  4365                           
  4366  0070                     ?_isr:	
  4367                           ; 0 bytes @ 0x0
  4368                           
  4369  0070                     ?_main:	
  4370                           ; 0 bytes @ 0x0
  4371                           
  4372  0070                     ??_Reverse_Byte:	
  4373                           ; 0 bytes @ 0x0
  4374                           
  4375  0070                     ??_ISNUMBER:	
  4376                           ; 0 bytes @ 0x0
  4377                           
  4378  0070                     ?_cleanBuffer:	
  4379                           ; 0 bytes @ 0x0
  4380                           
  4381  0070                     ?_CloseUSART:	
  4382                           ; 0 bytes @ 0x0
  4383                           
  4384  0070                     ?_UART_send_break:	
  4385                           ; 0 bytes @ 0x0
  4386                           
  4387  0070                     ??_UART_send_break:	
  4388                           ; 0 bytes @ 0x0
  4389                           
  4390  0070                     ?_UNLOCK:	
  4391                           ; 0 bytes @ 0x0
  4392                           
  4393  0070                     ??_UNLOCK:	
  4394                           ; 0 bytes @ 0x0
  4395                           
  4396  0070                     ?_BlockErase:	
  4397                           ; 0 bytes @ 0x0
  4398                           
  4399  0070                     ?i1_delayUS:	
  4400                           ; 0 bytes @ 0x0
  4401                           
  4402  0070                     ?i1_CloseUSART:	
  4403                           ; 0 bytes @ 0x0
  4404                           
  4405  0070                     ??i1_CloseUSART:	
  4406                           ; 0 bytes @ 0x0
  4407                           
  4408  0070                     ?i1_baudUSART:	
  4409                           ; 0 bytes @ 0x0
  4410                           
  4411  0070                     ??i1_baudUSART:	
  4412                           ; 0 bytes @ 0x0
  4413                           
  4414  0070                     ?i1_OpenUSART:	
  4415                           ; 0 bytes @ 0x0
  4416                           
  4417  0070                     ??i1_ReadUSART:	
  4418                           ; 0 bytes @ 0x0
  4419                           
  4420  0070                     ?i1_Clock_TRIS:	
  4421                           ; 0 bytes @ 0x0
  4422                           
  4423  0070                     ??i1_Clock_TRIS:	
  4424                           ; 0 bytes @ 0x0
  4425                           
  4426  0070                     ?i1_Data_TRIS:	
  4427                           ; 0 bytes @ 0x0
  4428                           
  4429  0070                     ??i1_Data_TRIS:	
  4430                           ; 0 bytes @ 0x0
  4431                           
  4432  0070                     ?i1_PS_2_DISABLE_INTERRUPT:	
  4433                           ; 0 bytes @ 0x0
  4434                           
  4435  0070                     ??i1_PS_2_DISABLE_INTERRUPT:	
  4436                           ; 0 bytes @ 0x0
  4437                           
  4438  0070                     ?i1_PS_2_ENABLE_INTERRUPT:	
  4439                           ; 0 bytes @ 0x0
  4440                           
  4441  0070                     ??i1_PS_2_ENABLE_INTERRUPT:	
  4442                           ; 0 bytes @ 0x0
  4443                           
  4444  0070                     ??i1_READ_PS_2_PIN:	
  4445                           ; 0 bytes @ 0x0
  4446                           
  4447  0070                     ?i1_Timer2ON:	
  4448                           ; 0 bytes @ 0x0
  4449                           
  4450  0070                     ??i1_Timer2ON:	
  4451                           ; 0 bytes @ 0x0
  4452                           
  4453  0070                     ?_READ_PS_2_PIN:	
  4454                           ; 0 bytes @ 0x0
  4455                           
  4456  0070                     ?_ReadUSART:	
  4457                           ; 1 bytes @ 0x0
  4458                           
  4459  0070                     ?_Init_PS_2_Send:	
  4460                           ; 1 bytes @ 0x0
  4461                           
  4462  0070                     ?_Send_PS2:	
  4463                           ; 1 bytes @ 0x0
  4464                           
  4465  0070                     ?_Decode_Scan_Code_FunctionE0:	
  4466                           ; 1 bytes @ 0x0
  4467                           
  4468  0070                     ?_Decode_Scan_Code_Shift:	
  4469                           ; 1 bytes @ 0x0
  4470                           
  4471  0070                     ?_Decode_Scan_Code:	
  4472                           ; 1 bytes @ 0x0
  4473                           
  4474  0070                     ?_Decode_Scan_Code_Function:	
  4475                           ; 1 bytes @ 0x0
  4476                           
  4477  0070                     ?_Reverse_Byte:	
  4478                           ; 1 bytes @ 0x0
  4479                           
  4480  0070                     ?_ISNUMBER:	
  4481                           ; 1 bytes @ 0x0
  4482                           
  4483  0070                     ?_BufferShiftBack:	
  4484                           ; 1 bytes @ 0x0
  4485                           
  4486  0070                     ?i1_CheckSum_byte:	
  4487                           ; 1 bytes @ 0x0
  4488                           
  4489  0070                     ?i1_ReadUSART:	
  4490                           ; 1 bytes @ 0x0
  4491                           
  4492  0070                     ?i1_READ_PS_2_PIN:	
  4493                           ; 1 bytes @ 0x0
  4494                           
  4495  0070                     ?i1_Send_PS2:	
  4496                           ; 1 bytes @ 0x0
  4497                           
  4498  0070                     ?i1_ReadFlash_2Byte:	
  4499                           ; 1 bytes @ 0x0
  4500                           
  4501  0070                     ?___lmul:	
  4502                           ; 2 bytes @ 0x0
  4503                           
  4504  0070                     ?i1___lldiv:	
  4505                           ; 4 bytes @ 0x0
  4506                           
  4507  0070                     ISNUMBER@ascii:	
  4508                           ; 4 bytes @ 0x0
  4509                           
  4510  0070                     BufferShiftBack@shift:	
  4511                           ; 1 bytes @ 0x0
  4512                           
  4513  0070                     Decode_Scan_Code@Code:	
  4514                           ; 1 bytes @ 0x0
  4515                           
  4516  0070                     Decode_Scan_Code_Shift@Code:	
  4517                           ; 1 bytes @ 0x0
  4518                           
  4519  0070                     Decode_Scan_Code_FunctionE0@Code:	
  4520                           ; 1 bytes @ 0x0
  4521                           
  4522  0070                     Decode_Scan_Code_Function@Code:	
  4523                           ; 1 bytes @ 0x0
  4524                           
  4525  0070                     i1baudUSART@baudconfig:	
  4526                           ; 1 bytes @ 0x0
  4527                           
  4528  0070                     i1Clock_TRIS@direction:	
  4529                           ; 1 bytes @ 0x0
  4530                           
  4531  0070                     i1Data_TRIS@direction:	
  4532                           ; 1 bytes @ 0x0
  4533                           
  4534  0070                     i1PS_2_ENABLE_INTERRUPT@DATA_CLK:	
  4535                           ; 1 bytes @ 0x0
  4536                           
  4537  0070                     i1READ_PS_2_PIN@DATA_CLK:	
  4538                           ; 1 bytes @ 0x0
  4539                           
  4540  0070                     cleanBuffer@count:	
  4541                           ; 1 bytes @ 0x0
  4542                           
  4543  0070                     BlockErase@row:	
  4544                           ; 2 bytes @ 0x0
  4545                           
  4546  0070                     i1CheckSum_byte@This:	
  4547                           ; 2 bytes @ 0x0
  4548                           
  4549  0070                     i1OpenUSART@spbrg:	
  4550                           ; 2 bytes @ 0x0
  4551                           
  4552  0070                     i1ReadFlash_2Byte@row:	
  4553                           ; 2 bytes @ 0x0
  4554                           
  4555  0070                     ___lmul@multiplier:	
  4556                           ; 2 bytes @ 0x0
  4557                           
  4558  0070                     i1delayUS@US:	
  4559                           ; 4 bytes @ 0x0
  4560                           
  4561  0070                     i1___lldiv@divisor:	
  4562                           ; 4 bytes @ 0x0
  4563                           
  4564                           
  4565                           ; 4 bytes @ 0x0
  4566  0070                     	ds	1
  4567  0071                     BufferShiftBack@size:	
  4568  0071                     i1ReadUSART@data:	
  4569                           ; 1 bytes @ 0x1
  4570                           
  4571  0071                     i1PS_2_DISABLE_INTERRUPT@DATA_CLK:	
  4572                           ; 1 bytes @ 0x1
  4573                           
  4574                           
  4575                           ; 1 bytes @ 0x1
  4576  0071                     	ds	1
  4577  0072                     ??_cleanBuffer:	
  4578  0072                     ??_BufferShiftBack:	
  4579                           ; 0 bytes @ 0x2
  4580                           
  4581  0072                     ??_BlockErase:	
  4582                           ; 0 bytes @ 0x2
  4583                           
  4584  0072                     ??i1_OpenUSART:	
  4585                           ; 0 bytes @ 0x2
  4586                           
  4587  0072                     Reverse_Byte@temp:	
  4588                           ; 0 bytes @ 0x2
  4589                           
  4590  0072                     i1CheckSum_byte@Odd_Even:	
  4591                           ; 1 bytes @ 0x2
  4592                           
  4593  0072                     i1OpenUSART@config:	
  4594                           ; 1 bytes @ 0x2
  4595                           
  4596  0072                     i1ReadFlash_2Byte@column:	
  4597                           ; 1 bytes @ 0x2
  4598                           
  4599                           
  4600                           ; 1 bytes @ 0x2
  4601  0072                     	ds	1
  4602  0073                     ??i1_CheckSum_byte:	
  4603  0073                     ??i1_ReadFlash_2Byte:	
  4604                           ; 0 bytes @ 0x3
  4605                           
  4606  0073                     Reverse_Byte@This:	
  4607                           ; 0 bytes @ 0x3
  4608                           
  4609  0073                     cleanBuffer@data:	
  4610                           ; 1 bytes @ 0x3
  4611                           
  4612                           
  4613                           ; 1 bytes @ 0x3
  4614  0073                     	ds	1
  4615  0074                     ??i1_delayUS:	
  4616  0074                     cleanBuffer@i:	
  4617                           ; 0 bytes @ 0x4
  4618                           
  4619  0074                     i1CheckSum_byte@ThisTemp:	
  4620                           ; 1 bytes @ 0x4
  4621                           
  4622  0074                     ___lmul@multiplicand:	
  4623                           ; 2 bytes @ 0x4
  4624                           
  4625  0074                     i1___lldiv@dividend:	
  4626                           ; 4 bytes @ 0x4
  4627                           
  4628                           
  4629                           ; 4 bytes @ 0x4
  4630  0074                     	ds	1
  4631  0075                     ?i1_ReadFlash_4Byte:	
  4632  0075                     i1ReadFlash_4Byte@row:	
  4633                           ; 4 bytes @ 0x5
  4634                           
  4635  0075                     i1delayUS@i:	
  4636                           ; 2 bytes @ 0x5
  4637                           
  4638                           
  4639                           ; 4 bytes @ 0x5
  4640  0075                     	ds	1
  4641  0076                     BufferShiftBack@i:	
  4642  0076                     i1CheckSum_byte@Parity:	
  4643                           ; 1 bytes @ 0x6
  4644                           
  4645                           
  4646                           ; 1 bytes @ 0x6
  4647  0076                     	ds	1
  4648  0077                     BufferShiftBack@buffer:	
  4649  0077                     i1CheckSum_byte@i:	
  4650                           ; 1 bytes @ 0x7
  4651                           
  4652  0077                     i1ReadFlash_4Byte@column:	
  4653                           ; 1 bytes @ 0x7
  4654                           
  4655                           
  4656                           ; 1 bytes @ 0x7
  4657  0077                     	ds	1
  4658  0078                     ??___lmul:	
  4659  0078                     ?i1_UARTchar:	
  4660                           ; 0 bytes @ 0x8
  4661                           
  4662  0078                     ??i1___lldiv:	
  4663                           ; 0 bytes @ 0x8
  4664                           
  4665  0078                     ?_PS2RawToScan:	
  4666                           ; 0 bytes @ 0x8
  4667                           
  4668  0078                     i1UARTchar@override:	
  4669                           ; 2 bytes @ 0x8
  4670                           
  4671  0078                     PS2RawToScan@Raw:	
  4672                           ; 1 bytes @ 0x8
  4673                           
  4674  0078                     ___lmul@product:	
  4675                           ; 2 bytes @ 0x8
  4676                           
  4677                           
  4678                           ; 4 bytes @ 0x8
  4679  0078                     	ds	1
  4680  0079                     ??i1_ReadFlash_4Byte:	
  4681  0079                     i1delayUS@j:	
  4682                           ; 0 bytes @ 0x9
  4683                           
  4684  0079                     i1UARTchar@NinethBit_override_data:	
  4685                           ; 1 bytes @ 0x9
  4686                           
  4687  0079                     i1___lldiv@quotient:	
  4688                           ; 1 bytes @ 0x9
  4689                           
  4690                           
  4691                           ; 4 bytes @ 0x9
  4692  0079                     	ds	1
  4693  007A                     ?_UART_send_break_timed:	
  4694  007A                     ?_WriteFlash_Sequential:	
  4695                           ; 0 bytes @ 0xA
  4696                           
  4697  007A                     ??i1_UARTchar:	
  4698                           ; 0 bytes @ 0xA
  4699                           
  4700  007A                     ??i1_Send_PS2:	
  4701                           ; 0 bytes @ 0xA
  4702                           
  4703  007A                     UART_send_break_timed@US:	
  4704                           ; 0 bytes @ 0xA
  4705                           
  4706  007A                     PS2RawToScan@temp:	
  4707                           ; 2 bytes @ 0xA
  4708                           
  4709  007A                     WriteFlash_Sequential@row:	
  4710                           ; 2 bytes @ 0xA
  4711                           
  4712                           
  4713                           ; 2 bytes @ 0xA
  4714  007A                     	ds	2
  4715  007C                     ??_UART_send_break_timed:	
  4716  007C                     WriteFlash_Sequential@buffer:	
  4717                           ; 0 bytes @ 0xC
  4718                           
  4719                           
  4720                           ; 1 bytes @ 0xC
  4721  007C                     	ds	1
  4722  007D                     WriteFlash_Sequential@amount:	
  4723  007D                     i1___lldiv@counter:	
  4724                           ; 1 bytes @ 0xD
  4725                           
  4726                           
  4727                           ; 1 bytes @ 0xD
  4728  007D                     	ds	1
  4729  007E                     ??_ResendLast:	
  4730                           
  4731                           	psect	cstackBANK0
  4732  0020                     __pcstackBANK0:	
  4733                           ; 0 bytes @ 0xE
  4734                           
  4735  0020                     ??_PS2RawToScan:	
  4736  0020                     ??_WriteFlash_Sequential:	
  4737                           ; 0 bytes @ 0x0
  4738                           
  4739  0020                     ?i1_InitUART:	
  4740                           ; 0 bytes @ 0x0
  4741                           
  4742  0020                     ?___llmod:	
  4743                           ; 0 bytes @ 0x0
  4744                           
  4745  0020                     i1UARTchar@data:	
  4746                           ; 4 bytes @ 0x0
  4747                           
  4748  0020                     i1Send_PS2@oddparity:	
  4749                           ; 1 bytes @ 0x0
  4750                           
  4751  0020                     ___llmod@divisor:	
  4752                           ; 1 bytes @ 0x0
  4753                           
  4754  0020                     i1InitUART@Baud:	
  4755                           ; 4 bytes @ 0x0
  4756                           
  4757  0020                     i1ReadFlash_4Byte@temp:	
  4758                           ; 4 bytes @ 0x0
  4759                           
  4760                           
  4761                           ; 4 bytes @ 0x0
  4762  0020                     	ds	1
  4763  0021                     ?i1_UARTstringWAIT:	
  4764  0021                     i1Send_PS2@command:	
  4765                           ; 0 bytes @ 0x1
  4766                           
  4767  0021                     i1UARTstringWAIT@data:	
  4768                           ; 1 bytes @ 0x1
  4769                           
  4770                           
  4771                           ; 2 bytes @ 0x1
  4772  0021                     	ds	1
  4773  0022                     i1Send_PS2@i:	
  4774                           
  4775                           ; 1 bytes @ 0x2
  4776  0022                     	ds	1
  4777  0023                     ??i1_UARTstringWAIT:	
  4778  0023                     i1Send_PS2@timeout:	
  4779                           ; 0 bytes @ 0x3
  4780                           
  4781  0023                     WriteFlash_Sequential@TempBufH:	
  4782                           ; 2 bytes @ 0x3
  4783                           
  4784                           
  4785                           ; 32 bytes @ 0x3
  4786  0023                     	ds	1
  4787  0024                     ?i1_ReadBaud:	
  4788  0024                     i1InitUART@parity:	
  4789                           ; 4 bytes @ 0x4
  4790                           
  4791  0024                     i1ReadBaud@row:	
  4792                           ; 1 bytes @ 0x4
  4793                           
  4794  0024                     ___llmod@dividend:	
  4795                           ; 2 bytes @ 0x4
  4796                           
  4797                           
  4798                           ; 4 bytes @ 0x4
  4799  0024                     	ds	1
  4800  0025                     ??i1_InitUART:	
  4801                           
  4802                           ; 0 bytes @ 0x5
  4803  0025                     	ds	1
  4804  0026                     i1ReadBaud@column:	
  4805                           
  4806                           ; 1 bytes @ 0x6
  4807  0026                     	ds	2
  4808  0028                     ??___llmod:	
  4809  0028                     ??i1_ReadBaud:	
  4810                           ; 0 bytes @ 0x8
  4811                           
  4812                           
  4813                           ; 0 bytes @ 0x8
  4814  0028                     	ds	1
  4815  0029                     ___llmod@counter:	
  4816                           
  4817                           ; 1 bytes @ 0x9
  4818  0029                     	ds	1
  4819  002A                     ?_sprintf:	
  4820  002A                     sprintf@f:	
  4821                           ; 2 bytes @ 0xA
  4822                           
  4823                           
  4824                           ; 2 bytes @ 0xA
  4825  002A                     	ds	3
  4826  002D                     i1InitUART@spbrg:	
  4827                           
  4828                           ; 2 bytes @ 0xD
  4829  002D                     	ds	2
  4830  002F                     i1InitUART@baudconfig:	
  4831                           
  4832                           ; 1 bytes @ 0xF
  4833  002F                     	ds	1
  4834  0030                     ??_sprintf:	
  4835  0030                     i1InitUART@config:	
  4836                           ; 0 bytes @ 0x10
  4837                           
  4838  0030                     i1ReadBaud@temp:	
  4839                           ; 1 bytes @ 0x10
  4840                           
  4841                           
  4842                           ; 4 bytes @ 0x10
  4843  0030                     	ds	1
  4844  0031                     i1InitUART@temp:	
  4845                           
  4846                           ; 4 bytes @ 0x11
  4847  0031                     	ds	5
  4848  0036                     sprintf@flag:	
  4849                           
  4850                           ; 1 bytes @ 0x16
  4851  0036                     	ds	1
  4852  0037                     sprintf@prec:	
  4853                           
  4854                           ; 2 bytes @ 0x17
  4855  0037                     	ds	2
  4856  0039                     sprintf@_val:	
  4857                           
  4858                           ; 4 bytes @ 0x19
  4859  0039                     	ds	4
  4860  003D                     sprintf@ap:	
  4861                           
  4862                           ; 1 bytes @ 0x1D
  4863  003D                     	ds	1
  4864  003E                     sprintf@sp:	
  4865                           
  4866                           ; 1 bytes @ 0x1E
  4867  003E                     	ds	1
  4868  003F                     sprintf@c:	
  4869                           
  4870                           ; 1 bytes @ 0x1F
  4871  003F                     	ds	4
  4872  0043                     WriteFlash_Sequential@TempBufL:	
  4873                           
  4874                           ; 32 bytes @ 0x23
  4875  0043                     	ds	32
  4876  0063                     WriteFlash_Sequential@tempH:	
  4877                           
  4878                           ; 1 bytes @ 0x43
  4879  0063                     	ds	1
  4880  0064                     WriteFlash_Sequential@tempL:	
  4881                           
  4882                           ; 1 bytes @ 0x44
  4883  0064                     	ds	1
  4884  0065                     WriteFlash_Sequential@amountTemp:	
  4885                           
  4886                           ; 1 bytes @ 0x45
  4887  0065                     	ds	1
  4888  0066                     WriteFlash_Sequential@temp:	
  4889                           
  4890                           ; 2 bytes @ 0x46
  4891  0066                     	ds	2
  4892  0068                     WriteFlash_Sequential@spaces:	
  4893                           
  4894                           ; 1 bytes @ 0x48
  4895  0068                     	ds	1
  4896  0069                     WriteFlash_Sequential@i:	
  4897                           
  4898                           ; 1 bytes @ 0x49
  4899  0069                     	ds	1
  4900  006A                     WriteBaud@temp:	
  4901                           
  4902                           ; 4 bytes @ 0x4A
  4903  006A                     	ds	4
  4904  006E                     ??_isr:	
  4905                           
  4906                           ; 0 bytes @ 0x4E
  4907  006E                     	ds	2
  4908                           
  4909                           	psect	maintext
  4910  1613                     __pmaintext:	
  4911 ;;
  4912 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  4913 ;;
  4914 ;; *************** function _main *****************
  4915 ;; Defined at:
  4916 ;;		line 114 in file "main.c"
  4917 ;; Parameters:    Size  Location     Type
  4918 ;;		None
  4919 ;; Auto vars:     Size  Location     Type
  4920 ;;  i               1   54[BANK4 ] unsigned char 
  4921 ;; Return value:  Size  Location     Type
  4922 ;;		None               void
  4923 ;; Registers used:
  4924 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4925 ;; Tracked objects:
  4926 ;;		On entry : 17F/0
  4927 ;;		On exit  : 0/0
  4928 ;;		Unchanged: 0/0
  4929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4931 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  4932 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  4933 ;;      Totals:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  4934 ;;Total ram usage:        2 bytes
  4935 ;; Hardware stack levels required when called:   11
  4936 ;; This function calls:
  4937 ;;		_ConfigureOscillator
  4938 ;;		_InitApp
  4939 ;;		_Init_System
  4940 ;;		_PS_2_ENABLE_INTERRUPT
  4941 ;;		_PS_2_INIT
  4942 ;;		_ReadVoltage
  4943 ;;		_UARTstringWAIT
  4944 ;;		___ftge
  4945 ;;		_delayUS
  4946 ;; This function is called by:
  4947 ;;		Startup code after reset
  4948 ;; This function uses a non-reentrant model
  4949 ;;
  4950                           
  4951                           
  4952                           ;psect for function _main
  4953  1613                     _main:	
  4954                           
  4955                           ;main.c: 116: unsigned char i=0;
  4956                           
  4957                           ;incstack = 0
  4958                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4959  1613  0024               	movlb	4	; select bank4
  4960  1614  01D6               	clrf	main@i^(0+512)
  4961                           
  4962                           ;main.c: 118: ConfigureOscillator();
  4963  1615  3199  2192  3196   	fcall	_ConfigureOscillator
  4964                           
  4965                           ;main.c: 119: InitApp();
  4966  1618  319A  220B  3196   	fcall	_InitApp
  4967                           
  4968                           ;main.c: 120: Init_System();
  4969  161B  318A  2248  3196   	fcall	_Init_System
  4970                           
  4971                           ;main.c: 121: PS_2_INIT();
  4972  161E  3199  212C  3196   	fcall	_PS_2_INIT
  4973                           
  4974                           ;main.c: 124: for(i =0;i<10;i++)
  4975  1621  0024               	movlb	4	; select bank4
  4976  1622  01D6               	clrf	main@i^(0+512)
  4977  1623  300A               	movlw	10
  4978  1624  0256               	subwf	main@i^(0+512),w
  4979  1625  1803               	btfsc	3,0
  4980  1626  2E50               	goto	l6822
  4981  1627                     l152:	
  4982                           
  4983                           ;main.c: 125: {
  4984                           ;main.c: 126: LATC |= 0b00010000;
  4985  1627  0022               	movlb	2	; select bank2
  4986  1628  160E               	bsf	14,4	;volatile
  4987                           
  4988                           ;main.c: 127: delayUS(10000);
  4989  1629  3000               	movlw	0
  4990  162A  0024               	movlb	4	; select bank4
  4991  162B  00A3               	movwf	(delayUS@US+3)^(0+512)
  4992  162C  3000               	movlw	0
  4993  162D  00A2               	movwf	(delayUS@US+2)^(0+512)
  4994  162E  3027               	movlw	39
  4995  162F  00A1               	movwf	(delayUS@US+1)^(0+512)
  4996  1630  3010               	movlw	16
  4997  1631  00A0               	movwf	delayUS@US^(0+512)
  4998  1632  319C  2456  3196   	fcall	_delayUS
  4999                           
  5000                           ;main.c: 128: LATC &= ~0b00010000;
  5001  1635  30EF               	movlw	239
  5002  1636  0024               	movlb	4	; select bank4
  5003  1637  00D5               	movwf	??_main^(0+512)
  5004  1638  0855               	movf	??_main^(0+512),w
  5005  1639  0022               	movlb	2	; select bank2
  5006  163A  058E               	andwf	14,f	;volatile
  5007                           
  5008                           ;main.c: 129: delayUS(10000);
  5009  163B  3000               	movlw	0
  5010  163C  0024               	movlb	4	; select bank4
  5011  163D  00A3               	movwf	(delayUS@US+3)^(0+512)
  5012  163E  3000               	movlw	0
  5013  163F  00A2               	movwf	(delayUS@US+2)^(0+512)
  5014  1640  3027               	movlw	39
  5015  1641  00A1               	movwf	(delayUS@US+1)^(0+512)
  5016  1642  3010               	movlw	16
  5017  1643  00A0               	movwf	delayUS@US^(0+512)
  5018  1644  319C  2456  3196   	fcall	_delayUS
  5019  1647  3001               	movlw	1
  5020  1648  0024               	movlb	4	; select bank4
  5021  1649  00D5               	movwf	??_main^(0+512)
  5022  164A  0855               	movf	??_main^(0+512),w
  5023  164B  07D6               	addwf	main@i^(0+512),f
  5024  164C  300A               	movlw	10
  5025  164D  0256               	subwf	main@i^(0+512),w
  5026  164E  1C03               	skipc
  5027  164F  2E27               	goto	l152
  5028  1650                     l6822:	
  5029                           
  5030                           ;main.c: 130: }
  5031                           ;main.c: 132: BatteryVoltage = ReadVoltage();
  5032  1650  3191  21F0  3196   	fcall	_ReadVoltage
  5033  1653  0024               	movlb	4	; select bank4
  5034  1654  084C               	movf	?_ReadVoltage^(0+512),w
  5035  1655  00D7               	movwf	_BatteryVoltage^(0+512)
  5036  1656  084D               	movf	(?_ReadVoltage+1)^(0+512),w
  5037  1657  00D8               	movwf	(_BatteryVoltage+1)^(0+512)
  5038  1658  084E               	movf	(?_ReadVoltage+2)^(0+512),w
  5039  1659  00D9               	movwf	(_BatteryVoltage+2)^(0+512)
  5040                           
  5041                           ;main.c: 133: if(BatteryVoltage < 4.65 )
  5042  165A  0857               	movf	_BatteryVoltage^(0+512),w
  5043  165B  00A0               	movwf	___ftge@ff1^(0+512)
  5044  165C  0858               	movf	(_BatteryVoltage+1)^(0+512),w
  5045  165D  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5046  165E  0859               	movf	(_BatteryVoltage+2)^(0+512),w
  5047  165F  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5048  1660  30CD               	movlw	205
  5049  1661  00A3               	movwf	___ftge@ff2^(0+512)
  5050  1662  3094               	movlw	148
  5051  1663  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5052  1664  3040               	movlw	64
  5053  1665  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5054  1666  319C  248B  3196   	fcall	___ftge
  5055  1669  1803               	btfsc	3,0
  5056  166A  2E78               	goto	l6826
  5057                           
  5058                           ;main.c: 134: {
  5059                           ;main.c: 135: UARTstringWAIT(VoltageMSG);
  5060  166B  3059               	movlw	low (_VoltageMSG| (0+32768))
  5061  166C  0024               	movlb	4	; select bank4
  5062  166D  00AF               	movwf	UARTstringWAIT@data^(0+512)
  5063  166E  3089               	movlw	high (_VoltageMSG| (0+32768))
  5064  166F  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  5065  1670  319C  2423  3196   	fcall	_UARTstringWAIT
  5066                           
  5067                           ;main.c: 136: UARTstringWAIT("Low!\r\n");
  5068  1673  303A               	movlw	low (STR_1| (0+32768))
  5069  1674  0024               	movlb	4	; select bank4
  5070  1675  00AF               	movwf	UARTstringWAIT@data^(0+512)
  5071  1676  308A               	movlw	high (STR_1| (0+32768))
  5072  1677  2E96               	goto	L1
  5073  1678                     l6826:	
  5074                           ;main.c: 137: }
  5075                           
  5076                           
  5077                           ;main.c: 138: else if (BatteryVoltage > 5.35)
  5078  1678  3033               	movlw	51
  5079  1679  0024               	movlb	4	; select bank4
  5080  167A  00A0               	movwf	___ftge@ff1^(0+512)
  5081  167B  30AB               	movlw	171
  5082  167C  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5083  167D  3040               	movlw	64
  5084  167E  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5085  167F  0857               	movf	_BatteryVoltage^(0+512),w
  5086  1680  00A3               	movwf	___ftge@ff2^(0+512)
  5087  1681  0858               	movf	(_BatteryVoltage+1)^(0+512),w
  5088  1682  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5089  1683  0859               	movf	(_BatteryVoltage+2)^(0+512),w
  5090  1684  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5091  1685  319C  248B  3196   	fcall	___ftge
  5092  1688  1803               	btfsc	3,0
  5093  1689  2E9A               	goto	l6830
  5094                           
  5095                           ;main.c: 139: {
  5096                           ;main.c: 140: UARTstringWAIT(VoltageMSG);
  5097  168A  3059               	movlw	low (_VoltageMSG| (0+32768))
  5098  168B  0024               	movlb	4	; select bank4
  5099  168C  00AF               	movwf	UARTstringWAIT@data^(0+512)
  5100  168D  3089               	movlw	high (_VoltageMSG| (0+32768))
  5101  168E  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  5102  168F  319C  2423  3196   	fcall	_UARTstringWAIT
  5103                           
  5104                           ;main.c: 141: UARTstringWAIT("High!\r\n");
  5105  1692  3032               	movlw	low (STR_2| (0+32768))
  5106  1693  0024               	movlb	4	; select bank4
  5107  1694  00AF               	movwf	UARTstringWAIT@data^(0+512)
  5108  1695  308A               	movlw	high (STR_2| (0+32768))
  5109  1696                     L1:	
  5110  1696  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  5111  1697  319C  2423  3196   	fcall	_UARTstringWAIT
  5112  169A                     l6830:	
  5113                           
  5114                           ;main.c: 142: }
  5115                           ;main.c: 144: PS_2_ENABLE_INTERRUPT(0b00100000);
  5116  169A  3020               	movlw	32
  5117  169B  3199  2105  3196   	fcall	_PS_2_ENABLE_INTERRUPT
  5118  169E                     l6832:	
  5119                           ;main.c: 149: while(1)
  5120                           
  5121                           
  5122                           ;main.c: 150: {
  5123                           ;main.c: 151: BatteryVoltage = ReadVoltage();
  5124  169E  3191  21F0  3196   	fcall	_ReadVoltage
  5125  16A1  0024               	movlb	4	; select bank4
  5126  16A2  084C               	movf	?_ReadVoltage^(0+512),w
  5127  16A3  00D7               	movwf	_BatteryVoltage^(0+512)
  5128  16A4  084D               	movf	(?_ReadVoltage+1)^(0+512),w
  5129  16A5  00D8               	movwf	(_BatteryVoltage+1)^(0+512)
  5130  16A6  084E               	movf	(?_ReadVoltage+2)^(0+512),w
  5131  16A7  00D9               	movwf	(_BatteryVoltage+2)^(0+512)
  5132                           
  5133                           ;main.c: 152: delayUS(20);
  5134  16A8  3000               	movlw	0
  5135  16A9  00A3               	movwf	(delayUS@US+3)^(0+512)
  5136  16AA  3000               	movlw	0
  5137  16AB  00A2               	movwf	(delayUS@US+2)^(0+512)
  5138  16AC  3000               	movlw	0
  5139  16AD  00A1               	movwf	(delayUS@US+1)^(0+512)
  5140  16AE  3014               	movlw	20
  5141  16AF  00A0               	movwf	delayUS@US^(0+512)
  5142  16B0  319C  2456  3196   	fcall	_delayUS
  5143                           
  5144                           ;main.c: 153: if(BatteryVoltage < 4.65 || BatteryVoltage > 5.35)
  5145  16B3  0024               	movlb	4	; select bank4
  5146  16B4  0857               	movf	_BatteryVoltage^(0+512),w
  5147  16B5  00A0               	movwf	___ftge@ff1^(0+512)
  5148  16B6  0858               	movf	(_BatteryVoltage+1)^(0+512),w
  5149  16B7  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5150  16B8  0859               	movf	(_BatteryVoltage+2)^(0+512),w
  5151  16B9  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5152  16BA  30CD               	movlw	205
  5153  16BB  00A3               	movwf	___ftge@ff2^(0+512)
  5154  16BC  3094               	movlw	148
  5155  16BD  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5156  16BE  3040               	movlw	64
  5157  16BF  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5158  16C0  319C  248B  3196   	fcall	___ftge
  5159  16C3  1C03               	btfss	3,0
  5160  16C4  2ED7               	goto	l160
  5161  16C5  3033               	movlw	51
  5162  16C6  0024               	movlb	4	; select bank4
  5163  16C7  00A0               	movwf	___ftge@ff1^(0+512)
  5164  16C8  30AB               	movlw	171
  5165  16C9  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5166  16CA  3040               	movlw	64
  5167  16CB  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5168  16CC  0857               	movf	_BatteryVoltage^(0+512),w
  5169  16CD  00A3               	movwf	___ftge@ff2^(0+512)
  5170  16CE  0858               	movf	(_BatteryVoltage+1)^(0+512),w
  5171  16CF  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5172  16D0  0859               	movf	(_BatteryVoltage+2)^(0+512),w
  5173  16D1  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5174  16D2  319C  248B  3196   	fcall	___ftge
  5175  16D5  1803               	btfsc	3,0
  5176  16D6  2EDB               	goto	l6840
  5177  16D7                     l160:	
  5178                           
  5179                           ;main.c: 154: {
  5180                           ;main.c: 155: Alarm = 1;
  5181  16D7  0024               	movlb	4	; select bank4
  5182  16D8  01DE               	clrf	_Alarm^(0+512)
  5183  16D9  0ADE               	incf	_Alarm^(0+512),f
  5184                           
  5185                           ;main.c: 156: }
  5186  16DA  2EDF               	goto	l6844
  5187  16DB                     l6840:	
  5188                           
  5189                           ;main.c: 157: else
  5190                           ;main.c: 158: {
  5191                           ;main.c: 159: Alarm = 0;
  5192  16DB  0024               	movlb	4	; select bank4
  5193  16DC  01DE               	clrf	_Alarm^(0+512)
  5194                           
  5195                           ;main.c: 160: LATC |= 0b00000010;
  5196  16DD  0022               	movlb	2	; select bank2
  5197  16DE  148E               	bsf	14,1	;volatile
  5198  16DF                     l6844:	
  5199                           
  5200                           ;main.c: 161: }
  5201                           ;main.c: 162: if(Alarm)
  5202  16DF  0024               	movlb	4	; select bank4
  5203  16E0  085E               	movf	_Alarm^(0+512),w
  5204  16E1  1903               	btfsc	3,2
  5205  16E2  2EF4               	goto	l6852
  5206                           
  5207                           ;main.c: 163: {
  5208                           ;main.c: 164: pwrLEDtoggle++;
  5209  16E3  3001               	movlw	1
  5210  16E4  07DC               	addwf	_pwrLEDtoggle^(0+512),f
  5211  16E5  3000               	movlw	0
  5212  16E6  3DDD               	addwfc	(_pwrLEDtoggle+1)^(0+512),f
  5213                           
  5214                           ;main.c: 165: if(pwrLEDtoggle == 100)
  5215  16E7  3064               	movlw	100
  5216  16E8  065C               	xorwf	_pwrLEDtoggle^(0+512),w
  5217  16E9  045D               	iorwf	(_pwrLEDtoggle+1)^(0+512),w
  5218  16EA  1D03               	skipz
  5219  16EB  2EF4               	goto	l6852
  5220                           
  5221                           ;main.c: 166: {
  5222                           ;main.c: 167: pwrLEDtoggle = 0;
  5223  16EC  01DC               	clrf	_pwrLEDtoggle^(0+512)
  5224  16ED  01DD               	clrf	(_pwrLEDtoggle+1)^(0+512)
  5225                           
  5226                           ;main.c: 168: LATC ^= 0b00000010;
  5227  16EE  3002               	movlw	2
  5228  16EF  00D5               	movwf	??_main^(0+512)
  5229  16F0  0855               	movf	??_main^(0+512),w
  5230  16F1  0022               	movlb	2	; select bank2
  5231  16F2  068E               	xorwf	14,f	;volatile
  5232  16F3  0024               	movlb	4	; select bank4
  5233  16F4                     l6852:	
  5234                           
  5235                           ;main.c: 169: }
  5236                           ;main.c: 170: }
  5237                           ;main.c: 172: if(SinLEDtimer < 100)
  5238  16F4  3000               	movlw	0
  5239  16F5  0024               	movlb	4	; select bank4
  5240  16F6  025B               	subwf	(_SinLEDtimer+1)^(0+512),w
  5241  16F7  3064               	movlw	100
  5242  16F8  1903               	skipnz
  5243  16F9  025A               	subwf	_SinLEDtimer^(0+512),w
  5244  16FA  1803               	skipnc
  5245  16FB  2F01               	goto	l6856
  5246                           
  5247                           ;main.c: 173: {
  5248                           ;main.c: 174: SinLEDtimer++;
  5249  16FC  3001               	movlw	1
  5250  16FD  07DA               	addwf	_SinLEDtimer^(0+512),f
  5251  16FE  3000               	movlw	0
  5252  16FF  3DDB               	addwfc	(_SinLEDtimer+1)^(0+512),f
  5253                           
  5254                           ;main.c: 175: }
  5255  1700  2E9E               	goto	l6832
  5256  1701                     l6856:	
  5257                           
  5258                           ;main.c: 176: else
  5259                           ;main.c: 177: {
  5260                           ;main.c: 178: LATC &= ~0b00001000;
  5261  1701  30F7               	movlw	247
  5262  1702  00D5               	movwf	??_main^(0+512)
  5263  1703  0855               	movf	??_main^(0+512),w
  5264  1704  0022               	movlb	2	; select bank2
  5265  1705  058E               	andwf	14,f	;volatile
  5266  1706  2E9E               	goto	l6832
  5267  1707                     __end_of_main:	
  5268                           
  5269                           	psect	text1
  5270  1C8B                     __ptext1:	
  5271 ;; *************** function ___ftge *****************
  5272 ;; Defined at:
  5273 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  5274 ;; Parameters:    Size  Location     Type
  5275 ;;  ff1             3    0[BANK4 ] float 
  5276 ;;  ff2             3    3[BANK4 ] float 
  5277 ;; Auto vars:     Size  Location     Type
  5278 ;;		None
  5279 ;; Return value:  Size  Location     Type
  5280 ;;		None               void
  5281 ;; Registers used:
  5282 ;;		wreg, status,2, status,0
  5283 ;; Tracked objects:
  5284 ;;		On entry : 0/0
  5285 ;;		On exit  : 0/0
  5286 ;;		Unchanged: 0/0
  5287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5288 ;;      Params:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5290 ;;      Temps:          0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  5291 ;;      Totals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0
  5292 ;;Total ram usage:        9 bytes
  5293 ;; Hardware stack levels used:    1
  5294 ;; Hardware stack levels required when called:    7
  5295 ;; This function calls:
  5296 ;;		Nothing
  5297 ;; This function is called by:
  5298 ;;		_main
  5299 ;; This function uses a non-reentrant model
  5300 ;;
  5301                           
  5302                           
  5303                           ;psect for function ___ftge
  5304  1C8B                     ___ftge:	
  5305                           
  5306                           ;incstack = 0
  5307                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  5308  1C8B  0024               	movlb	4	; select bank4
  5309  1C8C  1FA2               	btfss	(___ftge@ff1+2)^(0+512),7
  5310  1C8D  2CA2               	goto	l6782
  5311  1C8E  0920               	comf	___ftge@ff1^(0+512),w
  5312  1C8F  00A6               	movwf	??___ftge^(0+512)
  5313  1C90  0921               	comf	(___ftge@ff1+1)^(0+512),w
  5314  1C91  00A7               	movwf	(??___ftge^(0+512)+1)
  5315  1C92  0922               	comf	(___ftge@ff1+2)^(0+512),w
  5316  1C93  00A8               	movwf	(??___ftge^(0+512)+2)
  5317  1C94  0AA6               	incf	??___ftge^(0+512),f
  5318  1C95  1903               	skipnz
  5319  1C96  0AA7               	incf	(??___ftge^(0+512)+1),f
  5320  1C97  1903               	skipnz
  5321  1C98  0AA8               	incf	(??___ftge^(0+512)+2),f
  5322  1C99  3000               	movlw	0
  5323  1C9A  0726               	addwf	??___ftge^(0+512),w
  5324  1C9B  00A0               	movwf	___ftge@ff1^(0+512)
  5325  1C9C  3000               	movlw	0
  5326  1C9D  3D27               	addwfc	(??___ftge+1)^(0+512),w
  5327  1C9E  00A1               	movwf	(___ftge@ff1+1)^(0+512)
  5328  1C9F  3080               	movlw	128
  5329  1CA0  3D28               	addwfc	(??___ftge+2)^(0+512),w
  5330  1CA1  00A2               	movwf	(___ftge@ff1+2)^(0+512)
  5331  1CA2                     l6782:	
  5332  1CA2  1FA5               	btfss	(___ftge@ff2+2)^(0+512),7
  5333  1CA3  2CB8               	goto	l6786
  5334  1CA4  0923               	comf	___ftge@ff2^(0+512),w
  5335  1CA5  00A6               	movwf	??___ftge^(0+512)
  5336  1CA6  0924               	comf	(___ftge@ff2+1)^(0+512),w
  5337  1CA7  00A7               	movwf	(??___ftge^(0+512)+1)
  5338  1CA8  0925               	comf	(___ftge@ff2+2)^(0+512),w
  5339  1CA9  00A8               	movwf	(??___ftge^(0+512)+2)
  5340  1CAA  0AA6               	incf	??___ftge^(0+512),f
  5341  1CAB  1903               	skipnz
  5342  1CAC  0AA7               	incf	(??___ftge^(0+512)+1),f
  5343  1CAD  1903               	skipnz
  5344  1CAE  0AA8               	incf	(??___ftge^(0+512)+2),f
  5345  1CAF  3000               	movlw	0
  5346  1CB0  0726               	addwf	??___ftge^(0+512),w
  5347  1CB1  00A3               	movwf	___ftge@ff2^(0+512)
  5348  1CB2  3000               	movlw	0
  5349  1CB3  3D27               	addwfc	(??___ftge+1)^(0+512),w
  5350  1CB4  00A4               	movwf	(___ftge@ff2+1)^(0+512)
  5351  1CB5  3080               	movlw	128
  5352  1CB6  3D28               	addwfc	(??___ftge+2)^(0+512),w
  5353  1CB7  00A5               	movwf	(___ftge@ff2+2)^(0+512)
  5354  1CB8                     l6786:	
  5355  1CB8  3080               	movlw	128
  5356  1CB9  06A2               	xorwf	(___ftge@ff1+2)^(0+512),f
  5357  1CBA  3080               	movlw	128
  5358  1CBB  06A5               	xorwf	(___ftge@ff2+2)^(0+512),f
  5359  1CBC  0825               	movf	(___ftge@ff2+2)^(0+512),w
  5360  1CBD  0222               	subwf	(___ftge@ff1+2)^(0+512),w
  5361  1CBE  1D03               	skipz
  5362  1CBF  0008               	return
  5363  1CC0  0824               	movf	(___ftge@ff2+1)^(0+512),w
  5364  1CC1  0221               	subwf	(___ftge@ff1+1)^(0+512),w
  5365  1CC2  1D03               	skipz
  5366  1CC3  0008               	return
  5367  1CC4  0823               	movf	___ftge@ff2^(0+512),w
  5368  1CC5  0220               	subwf	___ftge@ff1^(0+512),w
  5369  1CC6  0008               	return
  5370  1CC7                     __end_of___ftge:	
  5371                           
  5372                           	psect	text2
  5373  11F0                     __ptext2:	
  5374 ;; *************** function _ReadVoltage *****************
  5375 ;; Defined at:
  5376 ;;		line 62 in file "ADC.c"
  5377 ;; Parameters:    Size  Location     Type
  5378 ;;		None
  5379 ;; Auto vars:     Size  Location     Type
  5380 ;;  voltage         3   48[BANK4 ] float 
  5381 ;;  temp            2   51[BANK4 ] unsigned int 
  5382 ;; Return value:  Size  Location     Type
  5383 ;;                  3   44[BANK4 ] unsigned int 
  5384 ;; Registers used:
  5385 ;;		wreg, status,2, status,0, pclath, cstack
  5386 ;; Tracked objects:
  5387 ;;		On entry : 0/0
  5388 ;;		On exit  : 0/0
  5389 ;;		Unchanged: 0/0
  5390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5391 ;;      Params:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  5392 ;;      Locals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  5393 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  5394 ;;      Totals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0
  5395 ;;Total ram usage:        9 bytes
  5396 ;; Hardware stack levels used:    1
  5397 ;; Hardware stack levels required when called:    9
  5398 ;; This function calls:
  5399 ;;		_DisableInternalADC
  5400 ;;		_InternalADC_Read
  5401 ;;		___ftdiv
  5402 ;;		___ftmul
  5403 ;;		___lwtoft
  5404 ;; This function is called by:
  5405 ;;		_main
  5406 ;; This function uses a non-reentrant model
  5407 ;;
  5408                           
  5409                           
  5410                           ;psect for function _ReadVoltage
  5411  11F0                     _ReadVoltage:	
  5412                           
  5413                           ;ADC.c: 64: unsigned int temp;
  5414                           ;ADC.c: 65: double voltage;
  5415                           ;ADC.c: 67: LATC &= ~0b00000001;
  5416                           
  5417                           ;incstack = 0
  5418                           ; Regs used in _ReadVoltage: [wreg+status,2+status,0+pclath+cstack]
  5419  11F0  30FE               	movlw	254
  5420  11F1  0024               	movlb	4	; select bank4
  5421  11F2  00CF               	movwf	??_ReadVoltage^(0+512)
  5422  11F3  084F               	movf	??_ReadVoltage^(0+512),w
  5423  11F4  0022               	movlb	2	; select bank2
  5424  11F5  058E               	andwf	14,f	;volatile
  5425                           
  5426                           ;ADC.c: 70: temp = InternalADC_Read(2);
  5427  11F6  3002               	movlw	2
  5428  11F7  319C  24C7  3191   	fcall	_InternalADC_Read
  5429  11FA  0024               	movlb	4	; select bank4
  5430  11FB  082B               	movf	(?_InternalADC_Read+1)^(0+512),w
  5431  11FC  01D4               	clrf	(ReadVoltage@temp+1)^(0+512)
  5432  11FD  07D4               	addwf	(ReadVoltage@temp+1)^(0+512),f
  5433  11FE  082A               	movf	?_InternalADC_Read^(0+512),w
  5434  11FF  01D3               	clrf	ReadVoltage@temp^(0+512)
  5435  1200  07D3               	addwf	ReadVoltage@temp^(0+512),f
  5436                           
  5437                           ;ADC.c: 71: DisableInternalADC();
  5438  1201  318A  2241  3191   	fcall	_DisableInternalADC
  5439                           
  5440                           ;ADC.c: 73: LATC |= 0b00000001;
  5441  1204  0022               	movlb	2	; select bank2
  5442  1205  140E               	bsf	14,0	;volatile
  5443                           
  5444                           ;ADC.c: 78: if((FVRCON & 0x03) == 0x03)
  5445  1206  3003               	movlw	3
  5446  1207  0517               	andwf	23,w	;volatile
  5447  1208  0024               	movlb	4	; select bank4
  5448  1209  00CF               	movwf	??_ReadVoltage^(0+512)
  5449  120A  084F               	movf	??_ReadVoltage^(0+512),w
  5450  120B  3A03               	xorlw	3
  5451  120C  1D03               	skipz
  5452  120D  2A14               	goto	l6768
  5453                           
  5454                           ;ADC.c: 79: {
  5455                           ;ADC.c: 81: temp <<= 2;
  5456  120E  3002               	movlw	2
  5457  120F                     u8695:	
  5458  120F  35D3               	lslf	ReadVoltage@temp^(0+512),f
  5459  1210  0DD4               	rlf	(ReadVoltage@temp+1)^(0+512),f
  5460  1211  0B89               	decfsz	9,f
  5461  1212  2A0F               	goto	u8695
  5462                           
  5463                           ;ADC.c: 82: }
  5464  1213  2A22               	goto	l6772
  5465  1214                     l6768:	
  5466                           
  5467                           ;ADC.c: 83: else if((FVRCON & 0x03) == 0x02)
  5468  1214  3003               	movlw	3
  5469  1215  0022               	movlb	2	; select bank2
  5470  1216  0517               	andwf	23,w	;volatile
  5471  1217  0024               	movlb	4	; select bank4
  5472  1218  00CF               	movwf	??_ReadVoltage^(0+512)
  5473  1219  084F               	movf	??_ReadVoltage^(0+512),w
  5474  121A  3A02               	xorlw	2
  5475  121B  1D03               	skipz
  5476  121C  2A22               	goto	l6772
  5477                           
  5478                           ;ADC.c: 84: {
  5479                           ;ADC.c: 86: temp <<= 1;
  5480  121D  3001               	movlw	1
  5481  121E                     u8715:	
  5482  121E  35D3               	lslf	ReadVoltage@temp^(0+512),f
  5483  121F  0DD4               	rlf	(ReadVoltage@temp+1)^(0+512),f
  5484  1220  0B89               	decfsz	9,f
  5485  1221  2A1E               	goto	u8715
  5486  1222                     l6772:	
  5487                           
  5488                           ;ADC.c: 87: }
  5489                           ;ADC.c: 88: voltage = ((double)temp / 1000) * 5.7;
  5490  1222  3066               	movlw	102
  5491  1223  00BC               	movwf	___ftmul@f1^(0+512)
  5492  1224  30B6               	movlw	182
  5493  1225  00BD               	movwf	(___ftmul@f1+1)^(0+512)
  5494  1226  3040               	movlw	64
  5495  1227  00BE               	movwf	(___ftmul@f1+2)^(0+512)
  5496  1228  3000               	movlw	0
  5497  1229  00AC               	movwf	___ftdiv@f2^(0+512)
  5498  122A  307A               	movlw	122
  5499  122B  00AD               	movwf	(___ftdiv@f2+1)^(0+512)
  5500  122C  3044               	movlw	68
  5501  122D  00AE               	movwf	(___ftdiv@f2+2)^(0+512)
  5502  122E  0854               	movf	(ReadVoltage@temp+1)^(0+512),w
  5503  122F  01A9               	clrf	(___lwtoft@c+1)^(0+512)
  5504  1230  07A9               	addwf	(___lwtoft@c+1)^(0+512),f
  5505  1231  0853               	movf	ReadVoltage@temp^(0+512),w
  5506  1232  01A8               	clrf	___lwtoft@c^(0+512)
  5507  1233  07A8               	addwf	___lwtoft@c^(0+512),f
  5508  1234  3199  21DE  3191   	fcall	___lwtoft
  5509  1237  0024               	movlb	4	; select bank4
  5510  1238  0828               	movf	?___lwtoft^(0+512),w
  5511  1239  00AF               	movwf	___ftdiv@f1^(0+512)
  5512  123A  0829               	movf	(?___lwtoft+1)^(0+512),w
  5513  123B  00B0               	movwf	(___ftdiv@f1+1)^(0+512)
  5514  123C  082A               	movf	(?___lwtoft+2)^(0+512),w
  5515  123D  00B1               	movwf	(___ftdiv@f1+2)^(0+512)
  5516  123E  3192  22C8  3191   	fcall	___ftdiv
  5517  1241  0024               	movlb	4	; select bank4
  5518  1242  082C               	movf	?___ftdiv^(0+512),w
  5519  1243  00BF               	movwf	___ftmul@f2^(0+512)
  5520  1244  082D               	movf	(?___ftdiv+1)^(0+512),w
  5521  1245  00C0               	movwf	(___ftmul@f2+1)^(0+512)
  5522  1246  082E               	movf	(?___ftdiv+2)^(0+512),w
  5523  1247  00C1               	movwf	(___ftmul@f2+2)^(0+512)
  5524  1248  3186  2648         	fcall	___ftmul
  5525  124A  0024               	movlb	4	; select bank4
  5526  124B  083C               	movf	?___ftmul^(0+512),w
  5527  124C  00D0               	movwf	ReadVoltage@voltage^(0+512)
  5528  124D  083D               	movf	(?___ftmul+1)^(0+512),w
  5529  124E  00D1               	movwf	(ReadVoltage@voltage+1)^(0+512)
  5530  124F  083E               	movf	(?___ftmul+2)^(0+512),w
  5531  1250  00D2               	movwf	(ReadVoltage@voltage+2)^(0+512)
  5532                           
  5533                           ;ADC.c: 89: return voltage;
  5534  1251  0850               	movf	ReadVoltage@voltage^(0+512),w
  5535  1252  00CC               	movwf	?_ReadVoltage^(0+512)
  5536  1253  0851               	movf	(ReadVoltage@voltage+1)^(0+512),w
  5537  1254  00CD               	movwf	(?_ReadVoltage+1)^(0+512)
  5538  1255  0852               	movf	(ReadVoltage@voltage+2)^(0+512),w
  5539  1256  00CE               	movwf	(?_ReadVoltage+2)^(0+512)
  5540  1257  0008               	return
  5541  1258                     __end_of_ReadVoltage:	
  5542                           
  5543                           	psect	text3
  5544  19DE                     __ptext3:	
  5545 ;; *************** function ___lwtoft *****************
  5546 ;; Defined at:
  5547 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwtoft.c"
  5548 ;; Parameters:    Size  Location     Type
  5549 ;;  c               2    8[BANK4 ] unsigned int 
  5550 ;; Auto vars:     Size  Location     Type
  5551 ;;		None
  5552 ;; Return value:  Size  Location     Type
  5553 ;;                  3    8[BANK4 ] float 
  5554 ;; Registers used:
  5555 ;;		wreg, status,2, status,0, pclath, cstack
  5556 ;; Tracked objects:
  5557 ;;		On entry : 0/0
  5558 ;;		On exit  : 0/0
  5559 ;;		Unchanged: 0/0
  5560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5561 ;;      Params:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  5562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5563 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  5564 ;;      Totals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  5565 ;;Total ram usage:        4 bytes
  5566 ;; Hardware stack levels used:    1
  5567 ;; Hardware stack levels required when called:    8
  5568 ;; This function calls:
  5569 ;;		___ftpack
  5570 ;; This function is called by:
  5571 ;;		_ReadVoltage
  5572 ;; This function uses a non-reentrant model
  5573 ;;
  5574                           
  5575                           
  5576                           ;psect for function ___lwtoft
  5577  19DE                     ___lwtoft:	
  5578                           
  5579                           ;incstack = 0
  5580                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  5581  19DE  0024               	movlb	4	; select bank4
  5582  19DF  0828               	movf	___lwtoft@c^(0+512),w
  5583  19E0  00A0               	movwf	___ftpack@arg^(0+512)
  5584  19E1  0829               	movf	(___lwtoft@c+1)^(0+512),w
  5585  19E2  00A1               	movwf	(___ftpack@arg+1)^(0+512)
  5586  19E3  01A2               	clrf	(___ftpack@arg+2)^(0+512)
  5587  19E4  308E               	movlw	142
  5588  19E5  00AB               	movwf	??___lwtoft^(0+512)
  5589  19E6  082B               	movf	??___lwtoft^(0+512),w
  5590  19E7  00A3               	movwf	___ftpack@exp^(0+512)
  5591  19E8  01A4               	clrf	___ftpack@sign^(0+512)
  5592  19E9  3190  205F         	fcall	___ftpack
  5593  19EB  0024               	movlb	4	; select bank4
  5594  19EC  0820               	movf	?___ftpack^(0+512),w
  5595  19ED  00A8               	movwf	?___lwtoft^(0+512)
  5596  19EE  0821               	movf	(?___ftpack+1)^(0+512),w
  5597  19EF  00A9               	movwf	(?___lwtoft+1)^(0+512)
  5598  19F0  0822               	movf	(?___ftpack+2)^(0+512),w
  5599  19F1  00AA               	movwf	(?___lwtoft+2)^(0+512)
  5600  19F2  0008               	return
  5601  19F3                     __end_of___lwtoft:	
  5602                           
  5603                           	psect	text4
  5604  0648                     __ptext4:	
  5605 ;; *************** function ___ftmul *****************
  5606 ;; Defined at:
  5607 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  5608 ;; Parameters:    Size  Location     Type
  5609 ;;  f1              3   28[BANK4 ] float 
  5610 ;;  f2              3   31[BANK4 ] float 
  5611 ;; Auto vars:     Size  Location     Type
  5612 ;;  f3_as_produc    3   39[BANK4 ] unsigned um
  5613 ;;  sign            1   43[BANK4 ] unsigned char 
  5614 ;;  cntr            1   42[BANK4 ] unsigned char 
  5615 ;;  exp             1   38[BANK4 ] unsigned char 
  5616 ;; Return value:  Size  Location     Type
  5617 ;;                  3   28[BANK4 ] float 
  5618 ;; Registers used:
  5619 ;;		wreg, status,2, status,0, pclath, cstack
  5620 ;; Tracked objects:
  5621 ;;		On entry : 0/0
  5622 ;;		On exit  : 0/0
  5623 ;;		Unchanged: 0/0
  5624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5625 ;;      Params:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5626 ;;      Locals:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5627 ;;      Temps:          0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  5628 ;;      Totals:         0       0       0       0       0      16       0       0       0       0       0       0       
      +0       0
  5629 ;;Total ram usage:       16 bytes
  5630 ;; Hardware stack levels used:    1
  5631 ;; Hardware stack levels required when called:    8
  5632 ;; This function calls:
  5633 ;;		___ftpack
  5634 ;; This function is called by:
  5635 ;;		_ReadVoltage
  5636 ;; This function uses a non-reentrant model
  5637 ;;
  5638                           
  5639                           
  5640                           ;psect for function ___ftmul
  5641  0648                     ___ftmul:	
  5642                           
  5643                           ;incstack = 0
  5644                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  5645  0648  0024               	movlb	4	; select bank4
  5646  0649  083C               	movf	___ftmul@f1^(0+512),w
  5647  064A  00C2               	movwf	??___ftmul^(0+512)
  5648  064B  083D               	movf	(___ftmul@f1+1)^(0+512),w
  5649  064C  00C3               	movwf	(??___ftmul^(0+512)+1)
  5650  064D  083E               	movf	(___ftmul@f1+2)^(0+512),w
  5651  064E  00C4               	movwf	(??___ftmul^(0+512)+2)
  5652  064F  1003               	clrc
  5653  0650  0D43               	rlf	(??___ftmul^(0+512)+1),w
  5654  0651  0D44               	rlf	(??___ftmul^(0+512)+2),w
  5655  0652  00C5               	movwf	(??___ftmul+3)^(0+512)
  5656  0653  0845               	movf	(??___ftmul+3)^(0+512),w
  5657  0654  00C6               	movwf	___ftmul@exp^(0+512)
  5658  0655  08C6               	movf	___ftmul@exp^(0+512),f
  5659  0656  1D03               	skipz
  5660  0657  2E5F               	goto	l6600
  5661  0658  3000               	movlw	0
  5662  0659  00BC               	movwf	?___ftmul^(0+512)
  5663  065A  3000               	movlw	0
  5664  065B  00BD               	movwf	(?___ftmul+1)^(0+512)
  5665  065C  3000               	movlw	0
  5666  065D  00BE               	movwf	(?___ftmul+2)^(0+512)
  5667  065E  0008               	return
  5668  065F                     l6600:	
  5669  065F  083F               	movf	___ftmul@f2^(0+512),w
  5670  0660  00C2               	movwf	??___ftmul^(0+512)
  5671  0661  0840               	movf	(___ftmul@f2+1)^(0+512),w
  5672  0662  00C3               	movwf	(??___ftmul^(0+512)+1)
  5673  0663  0841               	movf	(___ftmul@f2+2)^(0+512),w
  5674  0664  00C4               	movwf	(??___ftmul^(0+512)+2)
  5675  0665  1003               	clrc
  5676  0666  0D43               	rlf	(??___ftmul^(0+512)+1),w
  5677  0667  0D44               	rlf	(??___ftmul^(0+512)+2),w
  5678  0668  00C5               	movwf	(??___ftmul+3)^(0+512)
  5679  0669  0845               	movf	(??___ftmul+3)^(0+512),w
  5680  066A  00CB               	movwf	___ftmul@sign^(0+512)
  5681  066B  08CB               	movf	___ftmul@sign^(0+512),f
  5682  066C  1D03               	skipz
  5683  066D  2E75               	goto	l6606
  5684  066E  3000               	movlw	0
  5685  066F  00BC               	movwf	?___ftmul^(0+512)
  5686  0670  3000               	movlw	0
  5687  0671  00BD               	movwf	(?___ftmul+1)^(0+512)
  5688  0672  3000               	movlw	0
  5689  0673  00BE               	movwf	(?___ftmul+2)^(0+512)
  5690  0674  0008               	return
  5691  0675                     l6606:	
  5692  0675  084B               	movf	___ftmul@sign^(0+512),w
  5693  0676  3E7B               	addlw	123
  5694  0677  00C2               	movwf	??___ftmul^(0+512)
  5695  0678  0842               	movf	??___ftmul^(0+512),w
  5696  0679  07C6               	addwf	___ftmul@exp^(0+512),f
  5697  067A  083C               	movf	___ftmul@f1^(0+512),w
  5698  067B  00C2               	movwf	??___ftmul^(0+512)
  5699  067C  083D               	movf	(___ftmul@f1+1)^(0+512),w
  5700  067D  00C3               	movwf	(??___ftmul^(0+512)+1)
  5701  067E  083E               	movf	(___ftmul@f1+2)^(0+512),w
  5702  067F  00C4               	movwf	(??___ftmul^(0+512)+2)
  5703  0680  3010               	movlw	16
  5704  0681                     u8515:	
  5705  0681  36C4               	lsrf	(??___ftmul^(0+512)+2),f
  5706  0682  0CC3               	rrf	(??___ftmul^(0+512)+1),f
  5707  0683  0CC2               	rrf	??___ftmul^(0+512),f
  5708  0684  0B89               	decfsz	9,f
  5709  0685  2E81               	goto	u8515
  5710  0686  0842               	movf	??___ftmul^(0+512),w
  5711  0687  00C5               	movwf	(??___ftmul+3)^(0+512)
  5712  0688  0845               	movf	(??___ftmul+3)^(0+512),w
  5713  0689  00CB               	movwf	___ftmul@sign^(0+512)
  5714  068A  083F               	movf	___ftmul@f2^(0+512),w
  5715  068B  00C2               	movwf	??___ftmul^(0+512)
  5716  068C  0840               	movf	(___ftmul@f2+1)^(0+512),w
  5717  068D  00C3               	movwf	(??___ftmul^(0+512)+1)
  5718  068E  0841               	movf	(___ftmul@f2+2)^(0+512),w
  5719  068F  00C4               	movwf	(??___ftmul^(0+512)+2)
  5720  0690  3010               	movlw	16
  5721  0691                     u8525:	
  5722  0691  36C4               	lsrf	(??___ftmul^(0+512)+2),f
  5723  0692  0CC3               	rrf	(??___ftmul^(0+512)+1),f
  5724  0693  0CC2               	rrf	??___ftmul^(0+512),f
  5725  0694  0B89               	decfsz	9,f
  5726  0695  2E91               	goto	u8525
  5727  0696  0842               	movf	??___ftmul^(0+512),w
  5728  0697  00C5               	movwf	(??___ftmul+3)^(0+512)
  5729  0698  0845               	movf	(??___ftmul+3)^(0+512),w
  5730  0699  06CB               	xorwf	___ftmul@sign^(0+512),f
  5731  069A  3080               	movlw	128
  5732  069B  00C2               	movwf	??___ftmul^(0+512)
  5733  069C  0842               	movf	??___ftmul^(0+512),w
  5734  069D  05CB               	andwf	___ftmul@sign^(0+512),f
  5735  069E  17BD               	bsf	(___ftmul@f1^(0+512)+1),7
  5736  069F  17C0               	bsf	(___ftmul@f2^(0+512)+1),7
  5737  06A0  30FF               	movlw	255
  5738  06A1  05BF               	andwf	___ftmul@f2^(0+512),f
  5739  06A2  30FF               	movlw	255
  5740  06A3  05C0               	andwf	(___ftmul@f2+1)^(0+512),f
  5741  06A4  3000               	movlw	0
  5742  06A5  05C1               	andwf	(___ftmul@f2+2)^(0+512),f
  5743  06A6  3000               	movlw	0
  5744  06A7  00C7               	movwf	___ftmul@f3_as_product^(0+512)
  5745  06A8  3000               	movlw	0
  5746  06A9  00C8               	movwf	(___ftmul@f3_as_product+1)^(0+512)
  5747  06AA  3000               	movlw	0
  5748  06AB  00C9               	movwf	(___ftmul@f3_as_product+2)^(0+512)
  5749  06AC  3007               	movlw	7
  5750  06AD  00C2               	movwf	??___ftmul^(0+512)
  5751  06AE  0842               	movf	??___ftmul^(0+512),w
  5752  06AF  00CA               	movwf	___ftmul@cntr^(0+512)
  5753  06B0                     l6618:	
  5754  06B0  1C3C               	btfss	___ftmul@f1^(0+512),0
  5755  06B1  2EB8               	goto	l6622
  5756  06B2  083F               	movf	___ftmul@f2^(0+512),w
  5757  06B3  07C7               	addwf	___ftmul@f3_as_product^(0+512),f
  5758  06B4  0840               	movf	(___ftmul@f2+1)^(0+512),w
  5759  06B5  3DC8               	addwfc	(___ftmul@f3_as_product+1)^(0+512),f
  5760  06B6  0841               	movf	(___ftmul@f2+2)^(0+512),w
  5761  06B7  3DC9               	addwfc	(___ftmul@f3_as_product+2)^(0+512),f
  5762  06B8                     l6622:	
  5763  06B8  3001               	movlw	1
  5764  06B9                     u8545:	
  5765  06B9  36BE               	lsrf	(___ftmul@f1+2)^(0+512),f
  5766  06BA  0CBD               	rrf	(___ftmul@f1+1)^(0+512),f
  5767  06BB  0CBC               	rrf	___ftmul@f1^(0+512),f
  5768  06BC  0B89               	decfsz	9,f
  5769  06BD  2EB9               	goto	u8545
  5770  06BE  3001               	movlw	1
  5771  06BF                     u8555:	
  5772  06BF  35BF               	lslf	___ftmul@f2^(0+512),f
  5773  06C0  0DC0               	rlf	(___ftmul@f2+1)^(0+512),f
  5774  06C1  0DC1               	rlf	(___ftmul@f2+2)^(0+512),f
  5775  06C2  0B89               	decfsz	9,f
  5776  06C3  2EBF               	goto	u8555
  5777  06C4  3001               	movlw	1
  5778  06C5  02CA               	subwf	___ftmul@cntr^(0+512),f
  5779  06C6  1D03               	btfss	3,2
  5780  06C7  2EB0               	goto	l6618
  5781  06C8  3009               	movlw	9
  5782  06C9  00C2               	movwf	??___ftmul^(0+512)
  5783  06CA  0842               	movf	??___ftmul^(0+512),w
  5784  06CB  00CA               	movwf	___ftmul@cntr^(0+512)
  5785  06CC                     l6630:	
  5786  06CC  1C3C               	btfss	___ftmul@f1^(0+512),0
  5787  06CD  2ED4               	goto	l6634
  5788  06CE  083F               	movf	___ftmul@f2^(0+512),w
  5789  06CF  07C7               	addwf	___ftmul@f3_as_product^(0+512),f
  5790  06D0  0840               	movf	(___ftmul@f2+1)^(0+512),w
  5791  06D1  3DC8               	addwfc	(___ftmul@f3_as_product+1)^(0+512),f
  5792  06D2  0841               	movf	(___ftmul@f2+2)^(0+512),w
  5793  06D3  3DC9               	addwfc	(___ftmul@f3_as_product+2)^(0+512),f
  5794  06D4                     l6634:	
  5795  06D4  3001               	movlw	1
  5796  06D5                     u8585:	
  5797  06D5  36BE               	lsrf	(___ftmul@f1+2)^(0+512),f
  5798  06D6  0CBD               	rrf	(___ftmul@f1+1)^(0+512),f
  5799  06D7  0CBC               	rrf	___ftmul@f1^(0+512),f
  5800  06D8  0B89               	decfsz	9,f
  5801  06D9  2ED5               	goto	u8585
  5802  06DA  3001               	movlw	1
  5803  06DB                     u8595:	
  5804  06DB  36C9               	lsrf	(___ftmul@f3_as_product+2)^(0+512),f
  5805  06DC  0CC8               	rrf	(___ftmul@f3_as_product+1)^(0+512),f
  5806  06DD  0CC7               	rrf	___ftmul@f3_as_product^(0+512),f
  5807  06DE  0B89               	decfsz	9,f
  5808  06DF  2EDB               	goto	u8595
  5809  06E0  3001               	movlw	1
  5810  06E1  02CA               	subwf	___ftmul@cntr^(0+512),f
  5811  06E2  1D03               	btfss	3,2
  5812  06E3  2ECC               	goto	l6630
  5813  06E4  0847               	movf	___ftmul@f3_as_product^(0+512),w
  5814  06E5  00A0               	movwf	___ftpack@arg^(0+512)
  5815  06E6  0848               	movf	(___ftmul@f3_as_product+1)^(0+512),w
  5816  06E7  00A1               	movwf	(___ftpack@arg+1)^(0+512)
  5817  06E8  0849               	movf	(___ftmul@f3_as_product+2)^(0+512),w
  5818  06E9  00A2               	movwf	(___ftpack@arg+2)^(0+512)
  5819  06EA  0846               	movf	___ftmul@exp^(0+512),w
  5820  06EB  00C2               	movwf	??___ftmul^(0+512)
  5821  06EC  0842               	movf	??___ftmul^(0+512),w
  5822  06ED  00A3               	movwf	___ftpack@exp^(0+512)
  5823  06EE  084B               	movf	___ftmul@sign^(0+512),w
  5824  06EF  00C3               	movwf	(??___ftmul+1)^(0+512)
  5825  06F0  0843               	movf	(??___ftmul+1)^(0+512),w
  5826  06F1  00A4               	movwf	___ftpack@sign^(0+512)
  5827  06F2  3190  205F         	fcall	___ftpack
  5828  06F4  0024               	movlb	4	; select bank4
  5829  06F5  0820               	movf	?___ftpack^(0+512),w
  5830  06F6  00BC               	movwf	?___ftmul^(0+512)
  5831  06F7  0821               	movf	(?___ftpack+1)^(0+512),w
  5832  06F8  00BD               	movwf	(?___ftmul+1)^(0+512)
  5833  06F9  0822               	movf	(?___ftpack+2)^(0+512),w
  5834  06FA  00BE               	movwf	(?___ftmul+2)^(0+512)
  5835  06FB  0008               	return
  5836  06FC                     __end_of___ftmul:	
  5837                           
  5838                           	psect	text5
  5839  12C8                     __ptext5:	
  5840 ;; *************** function ___ftdiv *****************
  5841 ;; Defined at:
  5842 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic\ftdiv.c"
  5843 ;; Parameters:    Size  Location     Type
  5844 ;;  f2              3   12[BANK4 ] float 
  5845 ;;  f1              3   15[BANK4 ] float 
  5846 ;; Auto vars:     Size  Location     Type
  5847 ;;  f3              3   23[BANK4 ] float 
  5848 ;;  sign            1   27[BANK4 ] unsigned char 
  5849 ;;  exp             1   26[BANK4 ] unsigned char 
  5850 ;;  cntr            1   22[BANK4 ] unsigned char 
  5851 ;; Return value:  Size  Location     Type
  5852 ;;                  3   12[BANK4 ] float 
  5853 ;; Registers used:
  5854 ;;		wreg, status,2, status,0, pclath, cstack
  5855 ;; Tracked objects:
  5856 ;;		On entry : 0/0
  5857 ;;		On exit  : 0/0
  5858 ;;		Unchanged: 0/0
  5859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5860 ;;      Params:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5861 ;;      Locals:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0
  5862 ;;      Temps:          0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  5863 ;;      Totals:         0       0       0       0       0      16       0       0       0       0       0       0       
      +0       0
  5864 ;;Total ram usage:       16 bytes
  5865 ;; Hardware stack levels used:    1
  5866 ;; Hardware stack levels required when called:    8
  5867 ;; This function calls:
  5868 ;;		___ftpack
  5869 ;; This function is called by:
  5870 ;;		_ReadVoltage
  5871 ;; This function uses a non-reentrant model
  5872 ;;
  5873                           
  5874                           
  5875                           ;psect for function ___ftdiv
  5876  12C8                     ___ftdiv:	
  5877                           
  5878                           ;incstack = 0
  5879                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  5880  12C8  0024               	movlb	4	; select bank4
  5881  12C9  082F               	movf	___ftdiv@f1^(0+512),w
  5882  12CA  00B2               	movwf	??___ftdiv^(0+512)
  5883  12CB  0830               	movf	(___ftdiv@f1+1)^(0+512),w
  5884  12CC  00B3               	movwf	(??___ftdiv^(0+512)+1)
  5885  12CD  0831               	movf	(___ftdiv@f1+2)^(0+512),w
  5886  12CE  00B4               	movwf	(??___ftdiv^(0+512)+2)
  5887  12CF  1003               	clrc
  5888  12D0  0D33               	rlf	(??___ftdiv^(0+512)+1),w
  5889  12D1  0D34               	rlf	(??___ftdiv^(0+512)+2),w
  5890  12D2  00B5               	movwf	(??___ftdiv+3)^(0+512)
  5891  12D3  0835               	movf	(??___ftdiv+3)^(0+512),w
  5892  12D4  00BA               	movwf	___ftdiv@exp^(0+512)
  5893  12D5  08BA               	movf	___ftdiv@exp^(0+512),f
  5894  12D6  1D03               	skipz
  5895  12D7  2ADF               	goto	l6558
  5896  12D8  3000               	movlw	0
  5897  12D9  00AC               	movwf	?___ftdiv^(0+512)
  5898  12DA  3000               	movlw	0
  5899  12DB  00AD               	movwf	(?___ftdiv+1)^(0+512)
  5900  12DC  3000               	movlw	0
  5901  12DD  00AE               	movwf	(?___ftdiv+2)^(0+512)
  5902  12DE  0008               	return
  5903  12DF                     l6558:	
  5904  12DF  082C               	movf	___ftdiv@f2^(0+512),w
  5905  12E0  00B2               	movwf	??___ftdiv^(0+512)
  5906  12E1  082D               	movf	(___ftdiv@f2+1)^(0+512),w
  5907  12E2  00B3               	movwf	(??___ftdiv^(0+512)+1)
  5908  12E3  082E               	movf	(___ftdiv@f2+2)^(0+512),w
  5909  12E4  00B4               	movwf	(??___ftdiv^(0+512)+2)
  5910  12E5  1003               	clrc
  5911  12E6  0D33               	rlf	(??___ftdiv^(0+512)+1),w
  5912  12E7  0D34               	rlf	(??___ftdiv^(0+512)+2),w
  5913  12E8  00B5               	movwf	(??___ftdiv+3)^(0+512)
  5914  12E9  0835               	movf	(??___ftdiv+3)^(0+512),w
  5915  12EA  00BB               	movwf	___ftdiv@sign^(0+512)
  5916  12EB  08BB               	movf	___ftdiv@sign^(0+512),f
  5917  12EC  1D03               	skipz
  5918  12ED  2AF5               	goto	l6564
  5919  12EE  3000               	movlw	0
  5920  12EF  00AC               	movwf	?___ftdiv^(0+512)
  5921  12F0  3000               	movlw	0
  5922  12F1  00AD               	movwf	(?___ftdiv+1)^(0+512)
  5923  12F2  3000               	movlw	0
  5924  12F3  00AE               	movwf	(?___ftdiv+2)^(0+512)
  5925  12F4  0008               	return
  5926  12F5                     l6564:	
  5927  12F5  3000               	movlw	0
  5928  12F6  00B7               	movwf	___ftdiv@f3^(0+512)
  5929  12F7  3000               	movlw	0
  5930  12F8  00B8               	movwf	(___ftdiv@f3+1)^(0+512)
  5931  12F9  3000               	movlw	0
  5932  12FA  00B9               	movwf	(___ftdiv@f3+2)^(0+512)
  5933  12FB  3089               	movlw	137
  5934  12FC  073B               	addwf	___ftdiv@sign^(0+512),w
  5935  12FD  00B2               	movwf	??___ftdiv^(0+512)
  5936  12FE  0832               	movf	??___ftdiv^(0+512),w
  5937  12FF  02BA               	subwf	___ftdiv@exp^(0+512),f
  5938  1300  082F               	movf	___ftdiv@f1^(0+512),w
  5939  1301  00B2               	movwf	??___ftdiv^(0+512)
  5940  1302  0830               	movf	(___ftdiv@f1+1)^(0+512),w
  5941  1303  00B3               	movwf	(??___ftdiv^(0+512)+1)
  5942  1304  0831               	movf	(___ftdiv@f1+2)^(0+512),w
  5943  1305  00B4               	movwf	(??___ftdiv^(0+512)+2)
  5944  1306  3010               	movlw	16
  5945  1307                     u8435:	
  5946  1307  36B4               	lsrf	(??___ftdiv^(0+512)+2),f
  5947  1308  0CB3               	rrf	(??___ftdiv^(0+512)+1),f
  5948  1309  0CB2               	rrf	??___ftdiv^(0+512),f
  5949  130A  0B89               	decfsz	9,f
  5950  130B  2B07               	goto	u8435
  5951  130C  0832               	movf	??___ftdiv^(0+512),w
  5952  130D  00B5               	movwf	(??___ftdiv+3)^(0+512)
  5953  130E  0835               	movf	(??___ftdiv+3)^(0+512),w
  5954  130F  00BB               	movwf	___ftdiv@sign^(0+512)
  5955  1310  082C               	movf	___ftdiv@f2^(0+512),w
  5956  1311  00B2               	movwf	??___ftdiv^(0+512)
  5957  1312  082D               	movf	(___ftdiv@f2+1)^(0+512),w
  5958  1313  00B3               	movwf	(??___ftdiv^(0+512)+1)
  5959  1314  082E               	movf	(___ftdiv@f2+2)^(0+512),w
  5960  1315  00B4               	movwf	(??___ftdiv^(0+512)+2)
  5961  1316  3010               	movlw	16
  5962  1317                     u8445:	
  5963  1317  36B4               	lsrf	(??___ftdiv^(0+512)+2),f
  5964  1318  0CB3               	rrf	(??___ftdiv^(0+512)+1),f
  5965  1319  0CB2               	rrf	??___ftdiv^(0+512),f
  5966  131A  0B89               	decfsz	9,f
  5967  131B  2B17               	goto	u8445
  5968  131C  0832               	movf	??___ftdiv^(0+512),w
  5969  131D  00B5               	movwf	(??___ftdiv+3)^(0+512)
  5970  131E  0835               	movf	(??___ftdiv+3)^(0+512),w
  5971  131F  06BB               	xorwf	___ftdiv@sign^(0+512),f
  5972  1320  3080               	movlw	128
  5973  1321  00B2               	movwf	??___ftdiv^(0+512)
  5974  1322  0832               	movf	??___ftdiv^(0+512),w
  5975  1323  05BB               	andwf	___ftdiv@sign^(0+512),f
  5976  1324  17B0               	bsf	(___ftdiv@f1^(0+512)+1),7
  5977  1325  30FF               	movlw	255
  5978  1326  05AF               	andwf	___ftdiv@f1^(0+512),f
  5979  1327  30FF               	movlw	255
  5980  1328  05B0               	andwf	(___ftdiv@f1+1)^(0+512),f
  5981  1329  3000               	movlw	0
  5982  132A  05B1               	andwf	(___ftdiv@f1+2)^(0+512),f
  5983  132B  17AD               	bsf	(___ftdiv@f2^(0+512)+1),7
  5984  132C  30FF               	movlw	255
  5985  132D  05AC               	andwf	___ftdiv@f2^(0+512),f
  5986  132E  30FF               	movlw	255
  5987  132F  05AD               	andwf	(___ftdiv@f2+1)^(0+512),f
  5988  1330  3000               	movlw	0
  5989  1331  05AE               	andwf	(___ftdiv@f2+2)^(0+512),f
  5990  1332  3018               	movlw	24
  5991  1333  00B2               	movwf	??___ftdiv^(0+512)
  5992  1334  0832               	movf	??___ftdiv^(0+512),w
  5993  1335  00B6               	movwf	___ftdiv@cntr^(0+512)
  5994  1336                     l6578:	
  5995  1336  3001               	movlw	1
  5996  1337                     u8455:	
  5997  1337  35B7               	lslf	___ftdiv@f3^(0+512),f
  5998  1338  0DB8               	rlf	(___ftdiv@f3+1)^(0+512),f
  5999  1339  0DB9               	rlf	(___ftdiv@f3+2)^(0+512),f
  6000  133A  0B89               	decfsz	9,f
  6001  133B  2B37               	goto	u8455
  6002  133C  082E               	movf	(___ftdiv@f2+2)^(0+512),w
  6003  133D  0231               	subwf	(___ftdiv@f1+2)^(0+512),w
  6004  133E  1D03               	skipz
  6005  133F  2B46               	goto	u8465
  6006  1340  082D               	movf	(___ftdiv@f2+1)^(0+512),w
  6007  1341  0230               	subwf	(___ftdiv@f1+1)^(0+512),w
  6008  1342  1D03               	skipz
  6009  1343  2B46               	goto	u8465
  6010  1344  082C               	movf	___ftdiv@f2^(0+512),w
  6011  1345  022F               	subwf	___ftdiv@f1^(0+512),w
  6012  1346                     u8465:	
  6013  1346  1C03               	skipc
  6014  1347  2B4F               	goto	l6586
  6015  1348  082C               	movf	___ftdiv@f2^(0+512),w
  6016  1349  02AF               	subwf	___ftdiv@f1^(0+512),f
  6017  134A  082D               	movf	(___ftdiv@f2+1)^(0+512),w
  6018  134B  3BB0               	subwfb	(___ftdiv@f1+1)^(0+512),f
  6019  134C  082E               	movf	(___ftdiv@f2+2)^(0+512),w
  6020  134D  3BB1               	subwfb	(___ftdiv@f1+2)^(0+512),f
  6021  134E  1437               	bsf	___ftdiv@f3^(0+512),0
  6022  134F                     l6586:	
  6023  134F  3001               	movlw	1
  6024  1350                     u8475:	
  6025  1350  35AF               	lslf	___ftdiv@f1^(0+512),f
  6026  1351  0DB0               	rlf	(___ftdiv@f1+1)^(0+512),f
  6027  1352  0DB1               	rlf	(___ftdiv@f1+2)^(0+512),f
  6028  1353  0B89               	decfsz	9,f
  6029  1354  2B50               	goto	u8475
  6030  1355  3001               	movlw	1
  6031  1356  02B6               	subwf	___ftdiv@cntr^(0+512),f
  6032  1357  1D03               	btfss	3,2
  6033  1358  2B36               	goto	l6578
  6034  1359  0837               	movf	___ftdiv@f3^(0+512),w
  6035  135A  00A0               	movwf	___ftpack@arg^(0+512)
  6036  135B  0838               	movf	(___ftdiv@f3+1)^(0+512),w
  6037  135C  00A1               	movwf	(___ftpack@arg+1)^(0+512)
  6038  135D  0839               	movf	(___ftdiv@f3+2)^(0+512),w
  6039  135E  00A2               	movwf	(___ftpack@arg+2)^(0+512)
  6040  135F  083A               	movf	___ftdiv@exp^(0+512),w
  6041  1360  00B2               	movwf	??___ftdiv^(0+512)
  6042  1361  0832               	movf	??___ftdiv^(0+512),w
  6043  1362  00A3               	movwf	___ftpack@exp^(0+512)
  6044  1363  083B               	movf	___ftdiv@sign^(0+512),w
  6045  1364  00B3               	movwf	(??___ftdiv+1)^(0+512)
  6046  1365  0833               	movf	(??___ftdiv+1)^(0+512),w
  6047  1366  00A4               	movwf	___ftpack@sign^(0+512)
  6048  1367  3190  205F         	fcall	___ftpack
  6049  1369  0024               	movlb	4	; select bank4
  6050  136A  0820               	movf	?___ftpack^(0+512),w
  6051  136B  00AC               	movwf	?___ftdiv^(0+512)
  6052  136C  0821               	movf	(?___ftpack+1)^(0+512),w
  6053  136D  00AD               	movwf	(?___ftdiv+1)^(0+512)
  6054  136E  0822               	movf	(?___ftpack+2)^(0+512),w
  6055  136F  00AE               	movwf	(?___ftdiv+2)^(0+512)
  6056  1370  0008               	return
  6057  1371                     __end_of___ftdiv:	
  6058                           
  6059                           	psect	text6
  6060  105F                     __ptext6:	
  6061 ;; *************** function ___ftpack *****************
  6062 ;; Defined at:
  6063 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  6064 ;; Parameters:    Size  Location     Type
  6065 ;;  arg             3    0[BANK4 ] unsigned um
  6066 ;;  exp             1    3[BANK4 ] unsigned char 
  6067 ;;  sign            1    4[BANK4 ] unsigned char 
  6068 ;; Auto vars:     Size  Location     Type
  6069 ;;		None
  6070 ;; Return value:  Size  Location     Type
  6071 ;;                  3    0[BANK4 ] float 
  6072 ;; Registers used:
  6073 ;;		wreg, status,2, status,0
  6074 ;; Tracked objects:
  6075 ;;		On entry : 0/0
  6076 ;;		On exit  : 0/0
  6077 ;;		Unchanged: 0/0
  6078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6079 ;;      Params:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  6080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6081 ;;      Temps:          0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  6082 ;;      Totals:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  6083 ;;Total ram usage:        8 bytes
  6084 ;; Hardware stack levels used:    1
  6085 ;; Hardware stack levels required when called:    7
  6086 ;; This function calls:
  6087 ;;		Nothing
  6088 ;; This function is called by:
  6089 ;;		___ftdiv
  6090 ;;		___ftmul
  6091 ;;		___lwtoft
  6092 ;; This function uses a non-reentrant model
  6093 ;;
  6094                           
  6095                           
  6096                           ;psect for function ___ftpack
  6097  105F                     ___ftpack:	
  6098                           
  6099                           ;incstack = 0
  6100                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6101  105F  0024               	movlb	4	; select bank4
  6102  1060  0823               	movf	___ftpack@exp^(0+512),w
  6103  1061  1903               	btfsc	3,2
  6104  1062  2868               	goto	l6352
  6105  1063  0822               	movf	(___ftpack@arg+2)^(0+512),w
  6106  1064  0421               	iorwf	(___ftpack@arg+1)^(0+512),w
  6107  1065  0420               	iorwf	___ftpack@arg^(0+512),w
  6108  1066  1D03               	skipz
  6109  1067  2879               	goto	l6358
  6110  1068                     l6352:	
  6111  1068  3000               	movlw	0
  6112  1069  00A0               	movwf	?___ftpack^(0+512)
  6113  106A  3000               	movlw	0
  6114  106B  00A1               	movwf	(?___ftpack+1)^(0+512)
  6115  106C  3000               	movlw	0
  6116  106D  00A2               	movwf	(?___ftpack+2)^(0+512)
  6117  106E  0008               	return
  6118  106F                     l6356:	
  6119  106F  3001               	movlw	1
  6120  1070  00A5               	movwf	??___ftpack^(0+512)
  6121  1071  0825               	movf	??___ftpack^(0+512),w
  6122  1072  07A3               	addwf	___ftpack@exp^(0+512),f
  6123  1073  3001               	movlw	1
  6124  1074                     u8065:	
  6125  1074  36A2               	lsrf	(___ftpack@arg+2)^(0+512),f
  6126  1075  0CA1               	rrf	(___ftpack@arg+1)^(0+512),f
  6127  1076  0CA0               	rrf	___ftpack@arg^(0+512),f
  6128  1077  0B89               	decfsz	9,f
  6129  1078  2874               	goto	u8065
  6130  1079                     l6358:	
  6131  1079  30FE               	movlw	254
  6132  107A  0522               	andwf	(___ftpack@arg+2)^(0+512),w
  6133  107B  1903               	btfsc	3,2
  6134  107C  2892               	goto	l1224
  6135  107D  286F               	goto	l6356
  6136  107E                     l6360:	
  6137  107E  3001               	movlw	1
  6138  107F  00A5               	movwf	??___ftpack^(0+512)
  6139  1080  0825               	movf	??___ftpack^(0+512),w
  6140  1081  07A3               	addwf	___ftpack@exp^(0+512),f
  6141  1082  3001               	movlw	1
  6142  1083  07A0               	addwf	___ftpack@arg^(0+512),f
  6143  1084  3000               	movlw	0
  6144  1085  1803               	skipnc
  6145  1086  3001               	movlw	1
  6146  1087  07A1               	addwf	(___ftpack@arg+1)^(0+512),f
  6147  1088  3000               	movlw	0
  6148  1089  1803               	skipnc
  6149  108A  3001               	movlw	1
  6150  108B  07A2               	addwf	(___ftpack@arg+2)^(0+512),f
  6151  108C  3001               	movlw	1
  6152  108D                     u8085:	
  6153  108D  36A2               	lsrf	(___ftpack@arg+2)^(0+512),f
  6154  108E  0CA1               	rrf	(___ftpack@arg+1)^(0+512),f
  6155  108F  0CA0               	rrf	___ftpack@arg^(0+512),f
  6156  1090  0B89               	decfsz	9,f
  6157  1091  288D               	goto	u8085
  6158  1092                     l1224:	
  6159  1092  30FF               	movlw	255
  6160  1093  0522               	andwf	(___ftpack@arg+2)^(0+512),w
  6161  1094  1903               	btfsc	3,2
  6162  1095  289F               	goto	l6368
  6163  1096  287E               	goto	l6360
  6164  1097                     l6366:	
  6165  1097  3001               	movlw	1
  6166  1098  02A3               	subwf	___ftpack@exp^(0+512),f
  6167  1099  3001               	movlw	1
  6168  109A                     u8105:	
  6169  109A  35A0               	lslf	___ftpack@arg^(0+512),f
  6170  109B  0DA1               	rlf	(___ftpack@arg+1)^(0+512),f
  6171  109C  0DA2               	rlf	(___ftpack@arg+2)^(0+512),f
  6172  109D  0B89               	decfsz	9,f
  6173  109E  289A               	goto	u8105
  6174  109F                     l6368:	
  6175  109F  1FA1               	btfss	(___ftpack@arg+1)^(0+512),7
  6176  10A0  2897               	goto	l6366
  6177  10A1  1823               	btfsc	___ftpack@exp^(0+512),0
  6178  10A2  28A9               	goto	l1230
  6179  10A3  30FF               	movlw	255
  6180  10A4  05A0               	andwf	___ftpack@arg^(0+512),f
  6181  10A5  307F               	movlw	127
  6182  10A6  05A1               	andwf	(___ftpack@arg+1)^(0+512),f
  6183  10A7  30FF               	movlw	255
  6184  10A8  05A2               	andwf	(___ftpack@arg+2)^(0+512),f
  6185  10A9                     l1230:	
  6186  10A9  1003               	clrc
  6187  10AA  0CA3               	rrf	___ftpack@exp^(0+512),f
  6188  10AB  0823               	movf	___ftpack@exp^(0+512),w
  6189  10AC  00A5               	movwf	??___ftpack^(0+512)
  6190  10AD  01A6               	clrf	(??___ftpack^(0+512)+1)
  6191  10AE  01A7               	clrf	(??___ftpack^(0+512)+2)
  6192  10AF  3010               	movlw	16
  6193  10B0                     u8135:	
  6194  10B0  35A5               	lslf	??___ftpack^(0+512),f
  6195  10B1  0DA6               	rlf	(??___ftpack^(0+512)+1),f
  6196  10B2  0DA7               	rlf	(??___ftpack^(0+512)+2),f
  6197  10B3  0B89               	decfsz	9,f
  6198  10B4  28B0               	goto	u8135
  6199  10B5  0825               	movf	??___ftpack^(0+512),w
  6200  10B6  04A0               	iorwf	___ftpack@arg^(0+512),f
  6201  10B7  0826               	movf	(??___ftpack+1)^(0+512),w
  6202  10B8  04A1               	iorwf	(___ftpack@arg+1)^(0+512),f
  6203  10B9  0827               	movf	(??___ftpack+2)^(0+512),w
  6204  10BA  04A2               	iorwf	(___ftpack@arg+2)^(0+512),f
  6205  10BB  0824               	movf	___ftpack@sign^(0+512),w
  6206  10BC  1903               	btfsc	3,2
  6207  10BD  0008               	return
  6208  10BE  17A2               	bsf	(___ftpack@arg^(0+512)+2),7
  6209  10BF  0008               	return
  6210  10C0                     __end_of___ftpack:	
  6211                           
  6212                           	psect	text7
  6213  1CC7                     __ptext7:	
  6214 ;; *************** function _InternalADC_Read *****************
  6215 ;; Defined at:
  6216 ;;		line 97 in file "ADC.c"
  6217 ;; Parameters:    Size  Location     Type
  6218 ;;  channel         1    wreg     unsigned char 
  6219 ;; Auto vars:     Size  Location     Type
  6220 ;;  channel         1   14[BANK4 ] unsigned char 
  6221 ;; Return value:  Size  Location     Type
  6222 ;;                  2   10[BANK4 ] unsigned int 
  6223 ;; Registers used:
  6224 ;;		wreg, status,2, status,0, pclath, cstack
  6225 ;; Tracked objects:
  6226 ;;		On entry : 0/0
  6227 ;;		On exit  : 0/0
  6228 ;;		Unchanged: 0/0
  6229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6230 ;;      Params:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  6231 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6232 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  6233 ;;      Totals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  6234 ;;Total ram usage:        5 bytes
  6235 ;; Hardware stack levels used:    1
  6236 ;; Hardware stack levels required when called:    8
  6237 ;; This function calls:
  6238 ;;		_delayUS
  6239 ;; This function is called by:
  6240 ;;		_ReadVoltage
  6241 ;; This function uses a non-reentrant model
  6242 ;;
  6243                           
  6244                           
  6245                           ;psect for function _InternalADC_Read
  6246  1CC7                     _InternalADC_Read:	
  6247                           
  6248                           ;incstack = 0
  6249                           ; Regs used in _InternalADC_Read: [wreg+status,2+status,0+pclath+cstack]
  6250                           ;InternalADC_Read@channel stored from wreg
  6251  1CC7  0024               	movlb	4	; select bank4
  6252  1CC8  00AE               	movwf	InternalADC_Read@channel^(0+512)
  6253                           
  6254                           ;ADC.c: 99: ADCON0 =0;
  6255  1CC9  0021               	movlb	1	; select bank1
  6256  1CCA  019D               	clrf	29	;volatile
  6257                           
  6258                           ;ADC.c: 100: ADCON1 =0;
  6259  1CCB  019E               	clrf	30	;volatile
  6260                           
  6261                           ;ADC.c: 101: ADCON1 |= 0b01010000;
  6262  1CCC  3050               	movlw	80
  6263  1CCD  0024               	movlb	4	; select bank4
  6264  1CCE  00AC               	movwf	??_InternalADC_Read^(0+512)
  6265  1CCF  082C               	movf	??_InternalADC_Read^(0+512),w
  6266  1CD0  0021               	movlb	1	; select bank1
  6267  1CD1  049E               	iorwf	30,f	;volatile
  6268                           
  6269                           ;ADC.c: 102: FVRCON |= 0b10000000;
  6270  1CD2  0022               	movlb	2	; select bank2
  6271  1CD3  1797               	bsf	23,7	;volatile
  6272                           
  6273                           ;ADC.c: 103: FVRCON |= 0b00000001;
  6274  1CD4  1417               	bsf	23,0	;volatile
  6275  1CD5                     l992:	
  6276                           ;ADC.c: 104: while(!(FVRCON & 0b01000000));
  6277                           
  6278  1CD5  1F17               	btfss	23,6	;volatile
  6279  1CD6  2CD5               	goto	l992
  6280                           
  6281                           ;ADC.c: 105: ADCON0 |= (channel << 2);
  6282  1CD7  0024               	movlb	4	; select bank4
  6283  1CD8  082E               	movf	InternalADC_Read@channel^(0+512),w
  6284  1CD9  00AC               	movwf	??_InternalADC_Read^(0+512)
  6285  1CDA  3001               	movlw	1
  6286  1CDB                     u8395:	
  6287  1CDB  35AC               	lslf	??_InternalADC_Read^(0+512),f
  6288  1CDC  3EFF               	addlw	-1
  6289  1CDD  1D03               	skipz
  6290  1CDE  2CDB               	goto	u8395
  6291  1CDF  352C               	lslf	??_InternalADC_Read^(0+512),w
  6292  1CE0  00AD               	movwf	(??_InternalADC_Read+1)^(0+512)
  6293  1CE1  082D               	movf	(??_InternalADC_Read+1)^(0+512),w
  6294  1CE2  0021               	movlb	1	; select bank1
  6295  1CE3  049D               	iorwf	29,f	;volatile
  6296                           
  6297                           ;ADC.c: 106: ADCON1 |= 0b10000011;
  6298  1CE4  3083               	movlw	131
  6299  1CE5  0024               	movlb	4	; select bank4
  6300  1CE6  00AC               	movwf	??_InternalADC_Read^(0+512)
  6301  1CE7  082C               	movf	??_InternalADC_Read^(0+512),w
  6302  1CE8  0021               	movlb	1	; select bank1
  6303  1CE9  049E               	iorwf	30,f	;volatile
  6304                           
  6305                           ;ADC.c: 107: ADCON0 |= 0b00000001;
  6306  1CEA  141D               	bsf	29,0	;volatile
  6307                           
  6308                           ;ADC.c: 108: (PIE1bits.ADIE=0);
  6309  1CEB  1311               	bcf	17,6	;volatile
  6310                           
  6311                           ;ADC.c: 109: delayUS(5);
  6312  1CEC  3000               	movlw	0
  6313  1CED  0024               	movlb	4	; select bank4
  6314  1CEE  00A3               	movwf	(delayUS@US+3)^(0+512)
  6315  1CEF  3000               	movlw	0
  6316  1CF0  00A2               	movwf	(delayUS@US+2)^(0+512)
  6317  1CF1  3000               	movlw	0
  6318  1CF2  00A1               	movwf	(delayUS@US+1)^(0+512)
  6319  1CF3  3005               	movlw	5
  6320  1CF4  00A0               	movwf	delayUS@US^(0+512)
  6321  1CF5  319C  2456  319C   	fcall	_delayUS
  6322                           
  6323                           ;ADC.c: 110: ADCON0 |= 0b00000010;
  6324  1CF8  0021               	movlb	1	; select bank1
  6325  1CF9  149D               	bsf	29,1	;volatile
  6326  1CFA                     l995:	
  6327                           ;ADC.c: 111: while(ADCON0 & 0b00000010);
  6328                           
  6329  1CFA  189D               	btfsc	29,1	;volatile
  6330  1CFB  2CFA               	goto	l995
  6331                           
  6332                           ;ADC.c: 112: return ((ADRESH << 8) + ADRESL);
  6333  1CFC  081C               	movf	28,w	;volatile
  6334  1CFD  0024               	movlb	4	; select bank4
  6335  1CFE  01AB               	clrf	(?_InternalADC_Read+1)^(0+512)
  6336  1CFF  07AB               	addwf	(?_InternalADC_Read+1)^(0+512),f
  6337  1D00  0021               	movlb	1	; select bank1
  6338  1D01  081B               	movf	27,w	;volatile
  6339  1D02  0024               	movlb	4	; select bank4
  6340  1D03  01AA               	clrf	?_InternalADC_Read^(0+512)
  6341  1D04  07AA               	addwf	?_InternalADC_Read^(0+512),f
  6342  1D05  0008               	return
  6343  1D06                     __end_of_InternalADC_Read:	
  6344                           
  6345                           	psect	text8
  6346  0A41                     __ptext8:	
  6347 ;; *************** function _DisableInternalADC *****************
  6348 ;; Defined at:
  6349 ;;		line 120 in file "ADC.c"
  6350 ;; Parameters:    Size  Location     Type
  6351 ;;		None
  6352 ;; Auto vars:     Size  Location     Type
  6353 ;;		None
  6354 ;; Return value:  Size  Location     Type
  6355 ;;		None               void
  6356 ;; Registers used:
  6357 ;;		wreg, status,2, status,0
  6358 ;; Tracked objects:
  6359 ;;		On entry : 0/0
  6360 ;;		On exit  : 0/0
  6361 ;;		Unchanged: 0/0
  6362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6365 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6366 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  6367 ;;Total ram usage:        1 bytes
  6368 ;; Hardware stack levels used:    1
  6369 ;; Hardware stack levels required when called:    7
  6370 ;; This function calls:
  6371 ;;		Nothing
  6372 ;; This function is called by:
  6373 ;;		_ReadVoltage
  6374 ;; This function uses a non-reentrant model
  6375 ;;
  6376                           
  6377                           
  6378                           ;psect for function _DisableInternalADC
  6379  0A41                     _DisableInternalADC:	
  6380                           
  6381                           ;ADC.c: 122: ADCON0 &= ~0b00000001;
  6382                           
  6383                           ;incstack = 0
  6384                           ; Regs used in _DisableInternalADC: [wreg+status,2+status,0]
  6385  0A41  30FE               	movlw	254
  6386  0A42  0024               	movlb	4	; select bank4
  6387  0A43  00A0               	movwf	??_DisableInternalADC^(0+512)
  6388  0A44  0820               	movf	??_DisableInternalADC^(0+512),w
  6389  0A45  0021               	movlb	1	; select bank1
  6390  0A46  059D               	andwf	29,f	;volatile
  6391  0A47  0008               	return
  6392  0A48                     __end_of_DisableInternalADC:	
  6393                           
  6394                           	psect	text9
  6395  192C                     __ptext9:	
  6396 ;; *************** function _PS_2_INIT *****************
  6397 ;; Defined at:
  6398 ;;		line 104 in file "PS_2.c"
  6399 ;; Parameters:    Size  Location     Type
  6400 ;;		None
  6401 ;; Auto vars:     Size  Location     Type
  6402 ;;		None
  6403 ;; Return value:  Size  Location     Type
  6404 ;;		None               void
  6405 ;; Registers used:
  6406 ;;		wreg, status,2, status,0, pclath, cstack
  6407 ;; Tracked objects:
  6408 ;;		On entry : 0/0
  6409 ;;		On exit  : 0/0
  6410 ;;		Unchanged: 0/0
  6411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6416 ;;Total ram usage:        0 bytes
  6417 ;; Hardware stack levels used:    1
  6418 ;; Hardware stack levels required when called:   10
  6419 ;; This function calls:
  6420 ;;		_Clock_TRIS
  6421 ;;		_Data_TRIS
  6422 ;;		_Init_PS_2_Send
  6423 ;;		_Timer2Init
  6424 ;; This function is called by:
  6425 ;;		_main
  6426 ;; This function uses a non-reentrant model
  6427 ;;
  6428                           
  6429                           
  6430                           ;psect for function _PS_2_INIT
  6431  192C                     _PS_2_INIT:	
  6432                           
  6433                           ;PS_2.c: 107: Clock_TRIS(1);
  6434                           
  6435                           ;incstack = 0
  6436                           ; Regs used in _PS_2_INIT: [wreg+status,2+status,0+pclath+cstack]
  6437  192C  3001               	movlw	1
  6438  192D  3198  20EE  3199   	fcall	_Clock_TRIS
  6439                           
  6440                           ;PS_2.c: 108: Data_TRIS(1);
  6441  1930  3001               	movlw	1
  6442  1931  3190  2000  3199   	fcall	_Data_TRIS
  6443                           
  6444                           ;PS_2.c: 109: Timer2Init(255);
  6445  1934  30FF               	movlw	255
  6446  1935  319A  22A5  3199   	fcall	_Timer2Init
  6447                           
  6448                           ;PS_2.c: 110: Init_PS_2_Send();
  6449  1938  3192  2258         	fcall	_Init_PS_2_Send
  6450  193A  0008               	return
  6451  193B                     __end_of_PS_2_INIT:	
  6452                           
  6453                           	psect	text10
  6454  1AA5                     __ptext10:	
  6455 ;; *************** function _Timer2Init *****************
  6456 ;; Defined at:
  6457 ;;		line 41 in file "Timer.c"
  6458 ;; Parameters:    Size  Location     Type
  6459 ;;  time            1    wreg     unsigned char 
  6460 ;; Auto vars:     Size  Location     Type
  6461 ;;  time            1    2[BANK4 ] unsigned char 
  6462 ;;  prescaler       1    4[BANK4 ] unsigned char 
  6463 ;;  postscaler      1    3[BANK4 ] unsigned char 
  6464 ;; Return value:  Size  Location     Type
  6465 ;;		None               void
  6466 ;; Registers used:
  6467 ;;		wreg, status,2, status,0, pclath, cstack
  6468 ;; Tracked objects:
  6469 ;;		On entry : 0/0
  6470 ;;		On exit  : 0/0
  6471 ;;		Unchanged: 0/0
  6472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6474 ;;      Locals:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  6475 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  6476 ;;      Totals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  6477 ;;Total ram usage:        5 bytes
  6478 ;; Hardware stack levels used:    1
  6479 ;; Hardware stack levels required when called:    8
  6480 ;; This function calls:
  6481 ;;		_Timer2ON
  6482 ;; This function is called by:
  6483 ;;		_PS_2_INIT
  6484 ;; This function uses a non-reentrant model
  6485 ;;
  6486                           
  6487                           
  6488                           ;psect for function _Timer2Init
  6489  1AA5                     _Timer2Init:	
  6490                           
  6491                           ;incstack = 0
  6492                           ; Regs used in _Timer2Init: [wreg+status,2+status,0+pclath+cstack]
  6493                           ;Timer2Init@time stored from wreg
  6494  1AA5  0024               	movlb	4	; select bank4
  6495  1AA6  00A2               	movwf	Timer2Init@time^(0+512)
  6496                           
  6497                           ;Timer.c: 43: unsigned char postscaler =0xF;
  6498  1AA7  300F               	movlw	15
  6499  1AA8  00A0               	movwf	??_Timer2Init^(0+512)
  6500  1AA9  0820               	movf	??_Timer2Init^(0+512),w
  6501  1AAA  00A3               	movwf	Timer2Init@postscaler^(0+512)
  6502                           
  6503                           ;Timer.c: 44: unsigned char prescaler =3;
  6504  1AAB  3003               	movlw	3
  6505  1AAC  00A0               	movwf	??_Timer2Init^(0+512)
  6506  1AAD  0820               	movf	??_Timer2Init^(0+512),w
  6507  1AAE  00A4               	movwf	Timer2Init@prescaler^(0+512)
  6508                           
  6509                           ;Timer.c: 45: CCP2CONbits.CCP2M = 0b1010;
  6510  1AAF  0025               	movlb	5	; select bank5
  6511  1AB0  081A               	movf	26,w	;volatile
  6512  1AB1  39F0               	andlw	-16
  6513  1AB2  380A               	iorlw	10
  6514  1AB3  009A               	movwf	26	;volatile
  6515                           
  6516                           ;Timer.c: 46: PR2 = time;
  6517  1AB4  0024               	movlb	4	; select bank4
  6518  1AB5  0822               	movf	Timer2Init@time^(0+512),w
  6519  1AB6  0020               	movlb	0	; select bank0
  6520  1AB7  009B               	movwf	27	;volatile
  6521                           
  6522                           ;Timer.c: 47: T2CON |= postscaler << 3;
  6523  1AB8  0024               	movlb	4	; select bank4
  6524  1AB9  0823               	movf	Timer2Init@postscaler^(0+512),w
  6525  1ABA  00A0               	movwf	??_Timer2Init^(0+512)
  6526  1ABB  3002               	movlw	2
  6527  1ABC                     u8295:	
  6528  1ABC  35A0               	lslf	??_Timer2Init^(0+512),f
  6529  1ABD  3EFF               	addlw	-1
  6530  1ABE  1D03               	skipz
  6531  1ABF  2ABC               	goto	u8295
  6532  1AC0  3520               	lslf	??_Timer2Init^(0+512),w
  6533  1AC1  00A1               	movwf	(??_Timer2Init+1)^(0+512)
  6534  1AC2  0821               	movf	(??_Timer2Init+1)^(0+512),w
  6535  1AC3  0020               	movlb	0	; select bank0
  6536  1AC4  049C               	iorwf	28,f	;volatile
  6537                           
  6538                           ;Timer.c: 48: T2CON |= prescaler;
  6539  1AC5  0024               	movlb	4	; select bank4
  6540  1AC6  0824               	movf	Timer2Init@prescaler^(0+512),w
  6541  1AC7  00A0               	movwf	??_Timer2Init^(0+512)
  6542  1AC8  0820               	movf	??_Timer2Init^(0+512),w
  6543  1AC9  0020               	movlb	0	; select bank0
  6544  1ACA  049C               	iorwf	28,f	;volatile
  6545                           
  6546                           ;Timer.c: 50: Timer2ON();
  6547  1ACB  3198  2082         	fcall	_Timer2ON
  6548                           
  6549                           ;Timer.c: 51: PIE1bits.TMR2IE = 0;
  6550  1ACD  0021               	movlb	1	; select bank1
  6551  1ACE  1091               	bcf	17,1	;volatile
  6552  1ACF  0008               	return
  6553  1AD0                     __end_of_Timer2Init:	
  6554                           
  6555                           	psect	text11
  6556  1882                     __ptext11:	
  6557 ;; *************** function _Timer2ON *****************
  6558 ;; Defined at:
  6559 ;;		line 59 in file "Timer.c"
  6560 ;; Parameters:    Size  Location     Type
  6561 ;;		None
  6562 ;; Auto vars:     Size  Location     Type
  6563 ;;		None
  6564 ;; Return value:  Size  Location     Type
  6565 ;;		None               void
  6566 ;; Registers used:
  6567 ;;		None
  6568 ;; Tracked objects:
  6569 ;;		On entry : 0/0
  6570 ;;		On exit  : 0/0
  6571 ;;		Unchanged: 0/0
  6572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6576 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6577 ;;Total ram usage:        0 bytes
  6578 ;; Hardware stack levels used:    1
  6579 ;; Hardware stack levels required when called:    7
  6580 ;; This function calls:
  6581 ;;		Nothing
  6582 ;; This function is called by:
  6583 ;;		_Timer2Init
  6584 ;; This function uses a non-reentrant model
  6585 ;;
  6586                           
  6587                           
  6588                           ;psect for function _Timer2ON
  6589  1882                     _Timer2ON:	
  6590                           
  6591                           ;Timer.c: 61: T2CONbits.TMR2ON = 1;
  6592                           
  6593                           ;incstack = 0
  6594                           ; Regs used in _Timer2ON: []
  6595  1882  0020               	movlb	0	; select bank0
  6596  1883  151C               	bsf	28,2	;volatile
  6597  1884  0008               	return
  6598  1885                     __end_of_Timer2ON:	
  6599                           
  6600                           	psect	text12
  6601  1258                     __ptext12:	
  6602 ;; *************** function _Init_PS_2_Send *****************
  6603 ;; Defined at:
  6604 ;;		line 1009 in file "PS_2.c"
  6605 ;; Parameters:    Size  Location     Type
  6606 ;;		None
  6607 ;; Auto vars:     Size  Location     Type
  6608 ;;		None
  6609 ;; Return value:  Size  Location     Type
  6610 ;;                  1    wreg      unsigned char 
  6611 ;; Registers used:
  6612 ;;		wreg, status,2, status,0, pclath, cstack
  6613 ;; Tracked objects:
  6614 ;;		On entry : 0/0
  6615 ;;		On exit  : 0/0
  6616 ;;		Unchanged: 0/0
  6617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6621 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6622 ;;Total ram usage:        0 bytes
  6623 ;; Hardware stack levels used:    1
  6624 ;; Hardware stack levels required when called:    9
  6625 ;; This function calls:
  6626 ;;		_PS_2_DISABLE_INTERRUPT
  6627 ;;		_Send_PS2
  6628 ;;		_delayUS
  6629 ;; This function is called by:
  6630 ;;		_PS_2_INIT
  6631 ;; This function uses a non-reentrant model
  6632 ;;
  6633                           
  6634                           
  6635                           ;psect for function _Init_PS_2_Send
  6636  1258                     _Init_PS_2_Send:	
  6637                           
  6638                           ;PS_2.c: 1011: PS_2_DISABLE_INTERRUPT(0b00100000);
  6639                           
  6640                           ;incstack = 0
  6641                           ; Regs used in _Init_PS_2_Send: [wreg+status,2+status,0+pclath+cstack]
  6642  1258  3020               	movlw	32
  6643  1259  3199  21B7  3192   	fcall	_PS_2_DISABLE_INTERRUPT
  6644                           
  6645                           ;PS_2.c: 1014: if(Send_PS2(0x07))
  6646  125C  3007               	movlw	7
  6647  125D  318E  266C  3192   	fcall	_Send_PS2
  6648  1260  3A00               	xorlw	0
  6649  1261  1D03               	btfss	3,2
  6650  1262  0008               	return
  6651                           
  6652                           ;PS_2.c: 1017: }
  6653                           ;PS_2.c: 1018: delayUS(5000);
  6654                           
  6655                           ;PS_2.c: 1015: {
  6656                           ;PS_2.c: 1016: return 0;
  6657                           ;	Return value of _Init_PS_2_Send is never used
  6658  1263  3000               	movlw	0
  6659  1264  0024               	movlb	4	; select bank4
  6660  1265  00A3               	movwf	(delayUS@US+3)^(0+512)
  6661  1266  3000               	movlw	0
  6662  1267  00A2               	movwf	(delayUS@US+2)^(0+512)
  6663  1268  3013               	movlw	19
  6664  1269  00A1               	movwf	(delayUS@US+1)^(0+512)
  6665  126A  3088               	movlw	136
  6666  126B  00A0               	movwf	delayUS@US^(0+512)
  6667  126C  319C  2456  3192   	fcall	_delayUS
  6668                           
  6669                           ;PS_2.c: 1021: if(Send_PS2(0xED))
  6670  126F  30ED               	movlw	237
  6671  1270  318E  266C  3192   	fcall	_Send_PS2
  6672  1273  3A00               	xorlw	0
  6673  1274  1D03               	btfss	3,2
  6674  1275  0008               	return
  6675                           
  6676                           ;PS_2.c: 1024: }
  6677                           ;PS_2.c: 1025: delayUS(5000);
  6678                           
  6679                           ;PS_2.c: 1022: {
  6680                           ;PS_2.c: 1023: return 0;
  6681                           ;	Return value of _Init_PS_2_Send is never used
  6682  1276  3000               	movlw	0
  6683  1277  0024               	movlb	4	; select bank4
  6684  1278  00A3               	movwf	(delayUS@US+3)^(0+512)
  6685  1279  3000               	movlw	0
  6686  127A  00A2               	movwf	(delayUS@US+2)^(0+512)
  6687  127B  3013               	movlw	19
  6688  127C  00A1               	movwf	(delayUS@US+1)^(0+512)
  6689  127D  3088               	movlw	136
  6690  127E  00A0               	movwf	delayUS@US^(0+512)
  6691  127F  319C  2456  3192   	fcall	_delayUS
  6692                           
  6693                           ;PS_2.c: 1026: if(Send_PS2(0x00))
  6694  1282  3000               	movlw	0
  6695  1283  318E  266C  3192   	fcall	_Send_PS2
  6696  1286  3A00               	xorlw	0
  6697  1287  1D03               	btfss	3,2
  6698  1288  0008               	return
  6699                           
  6700                           ;PS_2.c: 1029: }
  6701                           ;PS_2.c: 1032: if(Send_PS2(0xf4))
  6702                           
  6703                           ;PS_2.c: 1027: {
  6704                           ;PS_2.c: 1028: return 0;
  6705                           ;	Return value of _Init_PS_2_Send is never used
  6706  1289  30F4               	movlw	244
  6707  128A  318E  266C  3192   	fcall	_Send_PS2
  6708  128D  3A00               	xorlw	0
  6709  128E  1D03               	btfss	3,2
  6710  128F  0008               	return
  6711                           
  6712                           ;PS_2.c: 1035: }
  6713                           ;PS_2.c: 1038: if(Send_PS2(0xf4))
  6714                           
  6715                           ;PS_2.c: 1033: {
  6716                           ;PS_2.c: 1034: return 0;
  6717                           ;	Return value of _Init_PS_2_Send is never used
  6718  1290  30F4               	movlw	244
  6719  1291  318E  266C  3192   	fcall	_Send_PS2
  6720  1294  3A00               	xorlw	0
  6721  1295  1D03               	btfss	3,2
  6722  1296  0008               	return
  6723                           
  6724                           ;PS_2.c: 1041: }
  6725                           ;PS_2.c: 1044: if(Send_PS2(0xf0))
  6726                           
  6727                           ;PS_2.c: 1039: {
  6728                           ;PS_2.c: 1040: return 0;
  6729                           ;	Return value of _Init_PS_2_Send is never used
  6730  1297  30F0               	movlw	240
  6731  1298  318E  266C  3192   	fcall	_Send_PS2
  6732  129B  3A00               	xorlw	0
  6733  129C  1D03               	btfss	3,2
  6734  129D  0008               	return
  6735                           
  6736                           ;PS_2.c: 1047: }
  6737                           ;PS_2.c: 1048: delayUS(100);
  6738                           
  6739                           ;PS_2.c: 1045: {
  6740                           ;PS_2.c: 1046: return 0;
  6741                           ;	Return value of _Init_PS_2_Send is never used
  6742  129E  3000               	movlw	0
  6743  129F  0024               	movlb	4	; select bank4
  6744  12A0  00A3               	movwf	(delayUS@US+3)^(0+512)
  6745  12A1  3000               	movlw	0
  6746  12A2  00A2               	movwf	(delayUS@US+2)^(0+512)
  6747  12A3  3000               	movlw	0
  6748  12A4  00A1               	movwf	(delayUS@US+1)^(0+512)
  6749  12A5  3064               	movlw	100
  6750  12A6  00A0               	movwf	delayUS@US^(0+512)
  6751  12A7  319C  2456  3192   	fcall	_delayUS
  6752                           
  6753                           ;PS_2.c: 1049: if(Send_PS2(0x02))
  6754  12AA  3002               	movlw	2
  6755  12AB  318E  266C  3192   	fcall	_Send_PS2
  6756  12AE  3A00               	xorlw	0
  6757  12AF  1D03               	btfss	3,2
  6758  12B0  0008               	return
  6759                           
  6760                           ;PS_2.c: 1052: }
  6761                           ;PS_2.c: 1055: if(Send_PS2(0xf3))
  6762                           
  6763                           ;PS_2.c: 1050: {
  6764                           ;PS_2.c: 1051: return 0;
  6765                           ;	Return value of _Init_PS_2_Send is never used
  6766  12B1  30F3               	movlw	243
  6767  12B2  318E  266C  3192   	fcall	_Send_PS2
  6768  12B5  3A00               	xorlw	0
  6769  12B6  1D03               	btfss	3,2
  6770  12B7  0008               	return
  6771                           
  6772                           ;PS_2.c: 1058: }
  6773                           ;PS_2.c: 1059: delayUS(100);
  6774                           
  6775                           ;PS_2.c: 1056: {
  6776                           ;PS_2.c: 1057: return 0;
  6777                           ;	Return value of _Init_PS_2_Send is never used
  6778  12B8  3000               	movlw	0
  6779  12B9  0024               	movlb	4	; select bank4
  6780  12BA  00A3               	movwf	(delayUS@US+3)^(0+512)
  6781  12BB  3000               	movlw	0
  6782  12BC  00A2               	movwf	(delayUS@US+2)^(0+512)
  6783  12BD  3000               	movlw	0
  6784  12BE  00A1               	movwf	(delayUS@US+1)^(0+512)
  6785  12BF  3064               	movlw	100
  6786  12C0  00A0               	movwf	delayUS@US^(0+512)
  6787  12C1  319C  2456  3192   	fcall	_delayUS
  6788                           
  6789                           ;PS_2.c: 1060: if(Send_PS2(0x2F))
  6790  12C4  302F               	movlw	47
  6791  12C5  318E  266C         	fcall	_Send_PS2
  6792                           
  6793                           ;PS_2.c: 1061: {
  6794                           ;PS_2.c: 1062: return 0;
  6795                           ;	Return value of _Init_PS_2_Send is never used
  6796  12C7  0008               	return
  6797  12C8                     __end_of_Init_PS_2_Send:	
  6798                           ;PS_2.c: 1063: }
  6799                           ;PS_2.c: 1064: return 1;
  6800                           ;	Return value of _Init_PS_2_Send is never used
  6801                           
  6802                           
  6803                           	psect	text13
  6804  0E6C                     __ptext13:	
  6805 ;; *************** function _Send_PS2 *****************
  6806 ;; Defined at:
  6807 ;;		line 844 in file "PS_2.c"
  6808 ;; Parameters:    Size  Location     Type
  6809 ;;  command         1    wreg     unsigned char 
  6810 ;; Auto vars:     Size  Location     Type
  6811 ;;  command         1   15[BANK4 ] unsigned char 
  6812 ;;  timeout         2   17[BANK4 ] unsigned int 
  6813 ;;  i               1   16[BANK4 ] unsigned char 
  6814 ;;  oddparity       1   14[BANK4 ] unsigned char 
  6815 ;; Return value:  Size  Location     Type
  6816 ;;                  1    wreg      unsigned char 
  6817 ;; Registers used:
  6818 ;;		wreg, status,2, status,0, pclath, cstack
  6819 ;; Tracked objects:
  6820 ;;		On entry : 0/0
  6821 ;;		On exit  : 0/0
  6822 ;;		Unchanged: 0/0
  6823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6825 ;;      Locals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  6826 ;;      Temps:          0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  6827 ;;      Totals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0
  6828 ;;Total ram usage:        9 bytes
  6829 ;; Hardware stack levels used:    1
  6830 ;; Hardware stack levels required when called:    8
  6831 ;; This function calls:
  6832 ;;		_CheckSum_byte
  6833 ;;		_Clock_TRIS
  6834 ;;		_Data_TRIS
  6835 ;;		_READ_PS_2_PIN
  6836 ;;		_delayUS
  6837 ;; This function is called by:
  6838 ;;		_Init_PS_2_Send
  6839 ;;		_Keyboard_Connected
  6840 ;; This function uses a non-reentrant model
  6841 ;;
  6842                           
  6843                           
  6844                           ;psect for function _Send_PS2
  6845  0E6C                     _Send_PS2:	
  6846                           
  6847                           ;incstack = 0
  6848                           ; Regs used in _Send_PS2: [wreg+status,2+status,0+pclath+cstack]
  6849                           ;Send_PS2@command stored from wreg
  6850  0E6C  0024               	movlb	4	; select bank4
  6851  0E6D  00AF               	movwf	Send_PS2@command^(0+512)
  6852                           
  6853                           ;PS_2.c: 846: unsigned char i=0;
  6854  0E6E  01B0               	clrf	Send_PS2@i^(0+512)
  6855                           
  6856                           ;PS_2.c: 847: unsigned char oddparity = CheckSum_byte((unsigned int)command , 3);
  6857  0E6F  082F               	movf	Send_PS2@command^(0+512),w
  6858  0E70  00AA               	movwf	??_Send_PS2^(0+512)
  6859  0E71  01AB               	clrf	(??_Send_PS2^(0+512)+1)
  6860  0E72  082A               	movf	??_Send_PS2^(0+512),w
  6861  0E73  00A0               	movwf	CheckSum_byte@This^(0+512)
  6862  0E74  082B               	movf	(??_Send_PS2+1)^(0+512),w
  6863  0E75  00A1               	movwf	(CheckSum_byte@This+1)^(0+512)
  6864  0E76  3003               	movlw	3
  6865  0E77  00AC               	movwf	(??_Send_PS2+2)^(0+512)
  6866  0E78  082C               	movf	(??_Send_PS2+2)^(0+512),w
  6867  0E79  00A2               	movwf	CheckSum_byte@Odd_Even^(0+512)
  6868  0E7A  319B  235B  318E   	fcall	_CheckSum_byte
  6869  0E7D  0024               	movlb	4	; select bank4
  6870  0E7E  00AD               	movwf	(??_Send_PS2+3)^(0+512)
  6871  0E7F  082D               	movf	(??_Send_PS2+3)^(0+512),w
  6872  0E80  00AE               	movwf	Send_PS2@oddparity^(0+512)
  6873                           
  6874                           ;PS_2.c: 848: unsigned int timeout =0;
  6875  0E81  01B1               	clrf	Send_PS2@timeout^(0+512)
  6876  0E82  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  6877                           
  6878                           ;PS_2.c: 850: Clock_TRIS(0);
  6879  0E83  3000               	movlw	0
  6880  0E84  3198  20EE  318E   	fcall	_Clock_TRIS
  6881                           
  6882                           ;PS_2.c: 851: Data_TRIS(0);
  6883  0E87  3000               	movlw	0
  6884  0E88  3190  2000  318E   	fcall	_Data_TRIS
  6885                           
  6886                           ;PS_2.c: 852: LATA &= ~0b00100000;
  6887  0E8B  30DF               	movlw	223
  6888  0E8C  0024               	movlb	4	; select bank4
  6889  0E8D  00AA               	movwf	??_Send_PS2^(0+512)
  6890  0E8E  082A               	movf	??_Send_PS2^(0+512),w
  6891  0E8F  0022               	movlb	2	; select bank2
  6892  0E90  058C               	andwf	12,f	;volatile
  6893                           
  6894                           ;PS_2.c: 853: delayUS(300);
  6895  0E91  3000               	movlw	0
  6896  0E92  0024               	movlb	4	; select bank4
  6897  0E93  00A3               	movwf	(delayUS@US+3)^(0+512)
  6898  0E94  3000               	movlw	0
  6899  0E95  00A2               	movwf	(delayUS@US+2)^(0+512)
  6900  0E96  3001               	movlw	1
  6901  0E97  00A1               	movwf	(delayUS@US+1)^(0+512)
  6902  0E98  302C               	movlw	44
  6903  0E99  00A0               	movwf	delayUS@US^(0+512)
  6904  0E9A  319C  2456  318E   	fcall	_delayUS
  6905                           
  6906                           ;PS_2.c: 854: LATA &= ~0b00010000;
  6907  0E9D  30EF               	movlw	239
  6908  0E9E  0024               	movlb	4	; select bank4
  6909  0E9F  00AA               	movwf	??_Send_PS2^(0+512)
  6910  0EA0  082A               	movf	??_Send_PS2^(0+512),w
  6911  0EA1  0022               	movlb	2	; select bank2
  6912  0EA2  058C               	andwf	12,f	;volatile
  6913                           
  6914                           ;PS_2.c: 855: delayUS(20);
  6915  0EA3  3000               	movlw	0
  6916  0EA4  0024               	movlb	4	; select bank4
  6917  0EA5  00A3               	movwf	(delayUS@US+3)^(0+512)
  6918  0EA6  3000               	movlw	0
  6919  0EA7  00A2               	movwf	(delayUS@US+2)^(0+512)
  6920  0EA8  3000               	movlw	0
  6921  0EA9  00A1               	movwf	(delayUS@US+1)^(0+512)
  6922  0EAA  3014               	movlw	20
  6923  0EAB  00A0               	movwf	delayUS@US^(0+512)
  6924  0EAC  319C  2456  318E   	fcall	_delayUS
  6925                           
  6926                           ;PS_2.c: 856: Clock_TRIS(1);
  6927  0EAF  3001               	movlw	1
  6928  0EB0  3198  20EE  318E   	fcall	_Clock_TRIS
  6929                           
  6930                           ;PS_2.c: 857: timeout=0;
  6931  0EB3  0024               	movlb	4	; select bank4
  6932  0EB4  01B1               	clrf	Send_PS2@timeout^(0+512)
  6933  0EB5  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  6934  0EB6                     l6214:	
  6935                           ;PS_2.c: 858: while(READ_PS_2_PIN(0b00100000))
  6936                           
  6937  0EB6  3020               	movlw	32
  6938  0EB7  3199  21CA  318E   	fcall	_READ_PS_2_PIN
  6939  0EBA  3800               	iorlw	0
  6940  0EBB  1903               	btfsc	3,2
  6941  0EBC  2ED3               	goto	l6216
  6942                           
  6943                           ;PS_2.c: 859: {
  6944                           ;PS_2.c: 860: __nop();
  6945  0EBD  0000               	nop
  6946                           
  6947                           ;PS_2.c: 861: timeout++;
  6948  0EBE  3001               	movlw	1
  6949  0EBF  0024               	movlb	4	; select bank4
  6950  0EC0  07B1               	addwf	Send_PS2@timeout^(0+512),f
  6951  0EC1  3000               	movlw	0
  6952  0EC2  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  6953                           
  6954                           ;PS_2.c: 862: if(timeout > 15000)
  6955  0EC3  303A               	movlw	58
  6956  0EC4  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  6957  0EC5  3099               	movlw	153
  6958  0EC6  1903               	skipnz
  6959  0EC7  0231               	subwf	Send_PS2@timeout^(0+512),w
  6960  0EC8  1C03               	skipc
  6961  0EC9  2EB6               	goto	l6214
  6962                           
  6963                           ;PS_2.c: 863: {
  6964                           ;PS_2.c: 864: Clock_TRIS(1);
  6965  0ECA  3001               	movlw	1
  6966  0ECB  3198  20EE  318E   	fcall	_Clock_TRIS
  6967                           
  6968                           ;PS_2.c: 865: Data_TRIS(1);
  6969  0ECE  3001               	movlw	1
  6970  0ECF  3190  2000         	fcall	_Data_TRIS
  6971                           
  6972                           ;PS_2.c: 866: return 1;
  6973  0ED1  3001               	movlw	1
  6974  0ED2  0008               	return
  6975  0ED3                     l6216:	
  6976                           
  6977                           ;PS_2.c: 867: }
  6978                           ;PS_2.c: 868: }
  6979                           ;PS_2.c: 869: for(i=0;i<8;i++)
  6980  0ED3  0024               	movlb	4	; select bank4
  6981  0ED4  01B0               	clrf	Send_PS2@i^(0+512)
  6982  0ED5  3008               	movlw	8
  6983  0ED6  0230               	subwf	Send_PS2@i^(0+512),w
  6984  0ED7  1803               	btfsc	3,0
  6985  0ED8  2F2E               	goto	l826
  6986  0ED9                     l825:	
  6987                           
  6988                           ;PS_2.c: 870: {
  6989                           ;PS_2.c: 871: if(command & 0x1)
  6990  0ED9  1C2F               	btfss	Send_PS2@command^(0+512),0
  6991  0EDA  2EDE               	goto	l6224
  6992                           
  6993                           ;PS_2.c: 872: {
  6994                           ;PS_2.c: 873: LATA |= 0b00010000;
  6995  0EDB  0022               	movlb	2	; select bank2
  6996  0EDC  160C               	bsf	12,4	;volatile
  6997                           
  6998                           ;PS_2.c: 874: }
  6999  0EDD  2EE4               	goto	l6226
  7000  0EDE                     l6224:	
  7001                           
  7002                           ;PS_2.c: 875: else
  7003                           ;PS_2.c: 876: {
  7004                           ;PS_2.c: 877: LATA &= ~0b00010000;
  7005  0EDE  30EF               	movlw	239
  7006  0EDF  0024               	movlb	4	; select bank4
  7007  0EE0  00AA               	movwf	??_Send_PS2^(0+512)
  7008  0EE1  082A               	movf	??_Send_PS2^(0+512),w
  7009  0EE2  0022               	movlb	2	; select bank2
  7010  0EE3  058C               	andwf	12,f	;volatile
  7011  0EE4                     l6226:	
  7012                           
  7013                           ;PS_2.c: 878: }
  7014                           ;PS_2.c: 879: command >> = 1;
  7015  0EE4  1003               	clrc
  7016  0EE5  0024               	movlb	4	; select bank4
  7017  0EE6  0CAF               	rrf	Send_PS2@command^(0+512),f
  7018                           
  7019                           ;PS_2.c: 880: timeout=0;
  7020  0EE7  01B1               	clrf	Send_PS2@timeout^(0+512)
  7021  0EE8  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7022  0EE9                     l6238:	
  7023                           ;PS_2.c: 881: while(!READ_PS_2_PIN(0b00100000))
  7024                           
  7025  0EE9  3020               	movlw	32
  7026  0EEA  3199  21CA  318E   	fcall	_READ_PS_2_PIN
  7027  0EED  3A00               	xorlw	0
  7028  0EEE  1D03               	btfss	3,2
  7029  0EEF  2F05               	goto	l6240
  7030                           
  7031                           ;PS_2.c: 882: {
  7032                           ;PS_2.c: 883: timeout++;
  7033  0EF0  3001               	movlw	1
  7034  0EF1  0024               	movlb	4	; select bank4
  7035  0EF2  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7036  0EF3  3000               	movlw	0
  7037  0EF4  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7038                           
  7039                           ;PS_2.c: 884: if(timeout > 15000)
  7040  0EF5  303A               	movlw	58
  7041  0EF6  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7042  0EF7  3099               	movlw	153
  7043  0EF8  1903               	skipnz
  7044  0EF9  0231               	subwf	Send_PS2@timeout^(0+512),w
  7045  0EFA  1C03               	skipc
  7046  0EFB  2EE9               	goto	l6238
  7047                           
  7048                           ;PS_2.c: 885: {
  7049                           ;PS_2.c: 886: Clock_TRIS(1);
  7050  0EFC  3001               	movlw	1
  7051  0EFD  3198  20EE  318E   	fcall	_Clock_TRIS
  7052                           
  7053                           ;PS_2.c: 887: Data_TRIS(1);
  7054  0F00  3001               	movlw	1
  7055  0F01  3190  2000         	fcall	_Data_TRIS
  7056                           
  7057                           ;PS_2.c: 888: return 1;
  7058  0F03  3001               	movlw	1
  7059  0F04  0008               	return
  7060  0F05                     l6240:	
  7061                           
  7062                           ;PS_2.c: 889: }
  7063                           ;PS_2.c: 890: }
  7064                           ;PS_2.c: 891: timeout=0;
  7065  0F05  0024               	movlb	4	; select bank4
  7066  0F06  01B1               	clrf	Send_PS2@timeout^(0+512)
  7067  0F07  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7068  0F08                     l6250:	
  7069                           ;PS_2.c: 892: while(READ_PS_2_PIN(0b00100000))
  7070                           
  7071  0F08  3020               	movlw	32
  7072  0F09  3199  21CA  318E   	fcall	_READ_PS_2_PIN
  7073  0F0C  3800               	iorlw	0
  7074  0F0D  1903               	btfsc	3,2
  7075  0F0E  2F25               	goto	l6252
  7076                           
  7077                           ;PS_2.c: 893: {
  7078                           ;PS_2.c: 894: __nop();
  7079  0F0F  0000               	nop
  7080                           
  7081                           ;PS_2.c: 895: timeout++;
  7082  0F10  3001               	movlw	1
  7083  0F11  0024               	movlb	4	; select bank4
  7084  0F12  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7085  0F13  3000               	movlw	0
  7086  0F14  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7087                           
  7088                           ;PS_2.c: 896: if(timeout > 15000)
  7089  0F15  303A               	movlw	58
  7090  0F16  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7091  0F17  3099               	movlw	153
  7092  0F18  1903               	skipnz
  7093  0F19  0231               	subwf	Send_PS2@timeout^(0+512),w
  7094  0F1A  1C03               	skipc
  7095  0F1B  2F08               	goto	l6250
  7096                           
  7097                           ;PS_2.c: 897: {
  7098                           ;PS_2.c: 898: Clock_TRIS(1);
  7099  0F1C  3001               	movlw	1
  7100  0F1D  3198  20EE  318E   	fcall	_Clock_TRIS
  7101                           
  7102                           ;PS_2.c: 899: Data_TRIS(1);
  7103  0F20  3001               	movlw	1
  7104  0F21  3190  2000         	fcall	_Data_TRIS
  7105                           
  7106                           ;PS_2.c: 900: return 1;
  7107  0F23  3001               	movlw	1
  7108  0F24  0008               	return
  7109  0F25                     l6252:	
  7110  0F25  3001               	movlw	1
  7111  0F26  0024               	movlb	4	; select bank4
  7112  0F27  00AA               	movwf	??_Send_PS2^(0+512)
  7113  0F28  082A               	movf	??_Send_PS2^(0+512),w
  7114  0F29  07B0               	addwf	Send_PS2@i^(0+512),f
  7115  0F2A  3008               	movlw	8
  7116  0F2B  0230               	subwf	Send_PS2@i^(0+512),w
  7117  0F2C  1C03               	skipc
  7118  0F2D  2ED9               	goto	l825
  7119  0F2E                     l826:	
  7120                           
  7121                           ;PS_2.c: 901: }
  7122                           ;PS_2.c: 902: }
  7123                           ;PS_2.c: 903: }
  7124                           ;PS_2.c: 905: if(oddparity & 0x1)
  7125  0F2E  1C2E               	btfss	Send_PS2@oddparity^(0+512),0
  7126  0F2F  2F33               	goto	l6258
  7127                           
  7128                           ;PS_2.c: 906: {
  7129                           ;PS_2.c: 907: LATA |= 0b00010000;
  7130  0F30  0022               	movlb	2	; select bank2
  7131  0F31  160C               	bsf	12,4	;volatile
  7132                           
  7133                           ;PS_2.c: 908: }
  7134  0F32  2F39               	goto	l6260
  7135  0F33                     l6258:	
  7136                           
  7137                           ;PS_2.c: 909: else
  7138                           ;PS_2.c: 910: {
  7139                           ;PS_2.c: 911: LATA &= ~0b00010000;
  7140  0F33  30EF               	movlw	239
  7141  0F34  0024               	movlb	4	; select bank4
  7142  0F35  00AA               	movwf	??_Send_PS2^(0+512)
  7143  0F36  082A               	movf	??_Send_PS2^(0+512),w
  7144  0F37  0022               	movlb	2	; select bank2
  7145  0F38  058C               	andwf	12,f	;volatile
  7146  0F39                     l6260:	
  7147                           
  7148                           ;PS_2.c: 912: }
  7149                           ;PS_2.c: 913: timeout=0;
  7150  0F39  0024               	movlb	4	; select bank4
  7151  0F3A  01B1               	clrf	Send_PS2@timeout^(0+512)
  7152  0F3B  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7153  0F3C                     l6270:	
  7154                           ;PS_2.c: 914: while(!READ_PS_2_PIN(0b00100000))
  7155                           
  7156  0F3C  3020               	movlw	32
  7157  0F3D  3199  21CA  318E   	fcall	_READ_PS_2_PIN
  7158  0F40  3A00               	xorlw	0
  7159  0F41  1D03               	btfss	3,2
  7160  0F42  2F58               	goto	l6272
  7161                           
  7162                           ;PS_2.c: 915: {
  7163                           ;PS_2.c: 916: timeout++;
  7164  0F43  3001               	movlw	1
  7165  0F44  0024               	movlb	4	; select bank4
  7166  0F45  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7167  0F46  3000               	movlw	0
  7168  0F47  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7169                           
  7170                           ;PS_2.c: 917: if(timeout > 15000)
  7171  0F48  303A               	movlw	58
  7172  0F49  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7173  0F4A  3099               	movlw	153
  7174  0F4B  1903               	skipnz
  7175  0F4C  0231               	subwf	Send_PS2@timeout^(0+512),w
  7176  0F4D  1C03               	skipc
  7177  0F4E  2F3C               	goto	l6270
  7178                           
  7179                           ;PS_2.c: 918: {
  7180                           ;PS_2.c: 919: Clock_TRIS(1);
  7181  0F4F  3001               	movlw	1
  7182  0F50  3198  20EE  318E   	fcall	_Clock_TRIS
  7183                           
  7184                           ;PS_2.c: 920: Data_TRIS(1);
  7185  0F53  3001               	movlw	1
  7186  0F54  3190  2000         	fcall	_Data_TRIS
  7187                           
  7188                           ;PS_2.c: 921: return 1;
  7189  0F56  3001               	movlw	1
  7190  0F57  0008               	return
  7191  0F58                     l6272:	
  7192                           
  7193                           ;PS_2.c: 922: }
  7194                           ;PS_2.c: 923: }
  7195                           ;PS_2.c: 924: timeout=0;
  7196  0F58  0024               	movlb	4	; select bank4
  7197  0F59  01B1               	clrf	Send_PS2@timeout^(0+512)
  7198  0F5A  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7199  0F5B                     l6282:	
  7200                           ;PS_2.c: 925: while(READ_PS_2_PIN(0b00100000))
  7201                           
  7202  0F5B  3020               	movlw	32
  7203  0F5C  3199  21CA  318E   	fcall	_READ_PS_2_PIN
  7204  0F5F  3800               	iorlw	0
  7205  0F60  1903               	btfsc	3,2
  7206  0F61  2F77               	goto	l6284
  7207                           
  7208                           ;PS_2.c: 926: {
  7209                           ;PS_2.c: 927: timeout++;
  7210  0F62  3001               	movlw	1
  7211  0F63  0024               	movlb	4	; select bank4
  7212  0F64  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7213  0F65  3000               	movlw	0
  7214  0F66  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7215                           
  7216                           ;PS_2.c: 928: if(timeout > 15000)
  7217  0F67  303A               	movlw	58
  7218  0F68  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7219  0F69  3099               	movlw	153
  7220  0F6A  1903               	skipnz
  7221  0F6B  0231               	subwf	Send_PS2@timeout^(0+512),w
  7222  0F6C  1C03               	skipc
  7223  0F6D  2F5B               	goto	l6282
  7224                           
  7225                           ;PS_2.c: 929: {
  7226                           ;PS_2.c: 930: Clock_TRIS(1);
  7227  0F6E  3001               	movlw	1
  7228  0F6F  3198  20EE  318E   	fcall	_Clock_TRIS
  7229                           
  7230                           ;PS_2.c: 931: Data_TRIS(1);
  7231  0F72  3001               	movlw	1
  7232  0F73  3190  2000         	fcall	_Data_TRIS
  7233                           
  7234                           ;PS_2.c: 932: return 1;
  7235  0F75  3001               	movlw	1
  7236  0F76  0008               	return
  7237  0F77                     l6284:	
  7238                           
  7239                           ;PS_2.c: 933: }
  7240                           ;PS_2.c: 934: }
  7241                           ;PS_2.c: 936: Data_TRIS(1);
  7242  0F77  3001               	movlw	1
  7243  0F78  3190  2000  318E   	fcall	_Data_TRIS
  7244                           
  7245                           ;PS_2.c: 938: timeout=0;
  7246  0F7B  0024               	movlb	4	; select bank4
  7247  0F7C  01B1               	clrf	Send_PS2@timeout^(0+512)
  7248  0F7D  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7249  0F7E                     l6296:	
  7250                           ;PS_2.c: 939: while(READ_PS_2_PIN(0b00010000))
  7251                           
  7252  0F7E  3010               	movlw	16
  7253  0F7F  3199  21CA  318E   	fcall	_READ_PS_2_PIN
  7254  0F82  3800               	iorlw	0
  7255  0F83  1903               	btfsc	3,2
  7256  0F84  2F9A               	goto	l6298
  7257                           
  7258                           ;PS_2.c: 940: {
  7259                           ;PS_2.c: 941: timeout++;
  7260  0F85  3001               	movlw	1
  7261  0F86  0024               	movlb	4	; select bank4
  7262  0F87  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7263  0F88  3000               	movlw	0
  7264  0F89  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7265                           
  7266                           ;PS_2.c: 942: if(timeout > 15000)
  7267  0F8A  303A               	movlw	58
  7268  0F8B  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7269  0F8C  3099               	movlw	153
  7270  0F8D  1903               	skipnz
  7271  0F8E  0231               	subwf	Send_PS2@timeout^(0+512),w
  7272  0F8F  1C03               	skipc
  7273  0F90  2F7E               	goto	l6296
  7274                           
  7275                           ;PS_2.c: 943: {
  7276                           ;PS_2.c: 944: Clock_TRIS(1);
  7277  0F91  3001               	movlw	1
  7278  0F92  3198  20EE  318E   	fcall	_Clock_TRIS
  7279                           
  7280                           ;PS_2.c: 945: Data_TRIS(1);
  7281  0F95  3001               	movlw	1
  7282  0F96  3190  2000         	fcall	_Data_TRIS
  7283                           
  7284                           ;PS_2.c: 946: return 1;
  7285  0F98  3001               	movlw	1
  7286  0F99  0008               	return
  7287  0F9A                     l6298:	
  7288                           
  7289                           ;PS_2.c: 947: }
  7290                           ;PS_2.c: 948: }
  7291                           ;PS_2.c: 949: timeout=0;
  7292  0F9A  0024               	movlb	4	; select bank4
  7293  0F9B  01B1               	clrf	Send_PS2@timeout^(0+512)
  7294  0F9C  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7295  0F9D                     l6308:	
  7296                           ;PS_2.c: 950: while(READ_PS_2_PIN(0b00100000))
  7297                           
  7298  0F9D  3020               	movlw	32
  7299  0F9E  3199  21CA  318E   	fcall	_READ_PS_2_PIN
  7300  0FA1  3800               	iorlw	0
  7301  0FA2  1903               	btfsc	3,2
  7302  0FA3  2FB9               	goto	l6310
  7303                           
  7304                           ;PS_2.c: 951: {
  7305                           ;PS_2.c: 952: timeout++;
  7306  0FA4  3001               	movlw	1
  7307  0FA5  0024               	movlb	4	; select bank4
  7308  0FA6  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7309  0FA7  3000               	movlw	0
  7310  0FA8  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7311                           
  7312                           ;PS_2.c: 953: if(timeout > 15000)
  7313  0FA9  303A               	movlw	58
  7314  0FAA  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7315  0FAB  3099               	movlw	153
  7316  0FAC  1903               	skipnz
  7317  0FAD  0231               	subwf	Send_PS2@timeout^(0+512),w
  7318  0FAE  1C03               	skipc
  7319  0FAF  2F9D               	goto	l6308
  7320                           
  7321                           ;PS_2.c: 954: {
  7322                           ;PS_2.c: 955: Clock_TRIS(1);
  7323  0FB0  3001               	movlw	1
  7324  0FB1  3198  20EE  318E   	fcall	_Clock_TRIS
  7325                           
  7326                           ;PS_2.c: 956: Data_TRIS(1);
  7327  0FB4  3001               	movlw	1
  7328  0FB5  3190  2000         	fcall	_Data_TRIS
  7329                           
  7330                           ;PS_2.c: 957: return 1;
  7331  0FB7  3001               	movlw	1
  7332  0FB8  0008               	return
  7333  0FB9                     l6310:	
  7334                           
  7335                           ;PS_2.c: 958: }
  7336                           ;PS_2.c: 959: }
  7337                           ;PS_2.c: 960: timeout=0;
  7338  0FB9  0024               	movlb	4	; select bank4
  7339  0FBA  01B1               	clrf	Send_PS2@timeout^(0+512)
  7340  0FBB  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7341  0FBC                     l6320:	
  7342                           ;PS_2.c: 961: while(!READ_PS_2_PIN(0b00010000))
  7343                           
  7344  0FBC  3010               	movlw	16
  7345  0FBD  3199  21CA  318E   	fcall	_READ_PS_2_PIN
  7346  0FC0  3A00               	xorlw	0
  7347  0FC1  1D03               	btfss	3,2
  7348  0FC2  2FD8               	goto	l6322
  7349                           
  7350                           ;PS_2.c: 962: {
  7351                           ;PS_2.c: 963: timeout++;
  7352  0FC3  3001               	movlw	1
  7353  0FC4  0024               	movlb	4	; select bank4
  7354  0FC5  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7355  0FC6  3000               	movlw	0
  7356  0FC7  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7357                           
  7358                           ;PS_2.c: 964: if(timeout > 15000)
  7359  0FC8  303A               	movlw	58
  7360  0FC9  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7361  0FCA  3099               	movlw	153
  7362  0FCB  1903               	skipnz
  7363  0FCC  0231               	subwf	Send_PS2@timeout^(0+512),w
  7364  0FCD  1C03               	skipc
  7365  0FCE  2FBC               	goto	l6320
  7366                           
  7367                           ;PS_2.c: 965: {
  7368                           ;PS_2.c: 966: Clock_TRIS(1);
  7369  0FCF  3001               	movlw	1
  7370  0FD0  3198  20EE  318E   	fcall	_Clock_TRIS
  7371                           
  7372                           ;PS_2.c: 967: Data_TRIS(1);
  7373  0FD3  3001               	movlw	1
  7374  0FD4  3190  2000         	fcall	_Data_TRIS
  7375                           
  7376                           ;PS_2.c: 968: return 1;
  7377  0FD6  3001               	movlw	1
  7378  0FD7  0008               	return
  7379  0FD8                     l6322:	
  7380                           
  7381                           ;PS_2.c: 969: }
  7382                           ;PS_2.c: 970: }
  7383                           ;PS_2.c: 971: timeout=0;
  7384  0FD8  0024               	movlb	4	; select bank4
  7385  0FD9  01B1               	clrf	Send_PS2@timeout^(0+512)
  7386  0FDA  01B2               	clrf	(Send_PS2@timeout+1)^(0+512)
  7387  0FDB                     l6332:	
  7388                           ;PS_2.c: 972: while(!READ_PS_2_PIN(0b00100000))
  7389                           
  7390  0FDB  3020               	movlw	32
  7391  0FDC  3199  21CA  318E   	fcall	_READ_PS_2_PIN
  7392  0FDF  3A00               	xorlw	0
  7393  0FE0  1D03               	btfss	3,2
  7394  0FE1  2FF7               	goto	l6334
  7395                           
  7396                           ;PS_2.c: 973: {
  7397                           ;PS_2.c: 974: timeout++;
  7398  0FE2  3001               	movlw	1
  7399  0FE3  0024               	movlb	4	; select bank4
  7400  0FE4  07B1               	addwf	Send_PS2@timeout^(0+512),f
  7401  0FE5  3000               	movlw	0
  7402  0FE6  3DB2               	addwfc	(Send_PS2@timeout+1)^(0+512),f
  7403                           
  7404                           ;PS_2.c: 975: if(timeout > 15000)
  7405  0FE7  303A               	movlw	58
  7406  0FE8  0232               	subwf	(Send_PS2@timeout+1)^(0+512),w
  7407  0FE9  3099               	movlw	153
  7408  0FEA  1903               	skipnz
  7409  0FEB  0231               	subwf	Send_PS2@timeout^(0+512),w
  7410  0FEC  1C03               	skipc
  7411  0FED  2FDB               	goto	l6332
  7412                           
  7413                           ;PS_2.c: 976: {
  7414                           ;PS_2.c: 977: Clock_TRIS(1);
  7415  0FEE  3001               	movlw	1
  7416  0FEF  3198  20EE  318E   	fcall	_Clock_TRIS
  7417                           
  7418                           ;PS_2.c: 978: Data_TRIS(1);
  7419  0FF2  3001               	movlw	1
  7420  0FF3  3190  2000         	fcall	_Data_TRIS
  7421                           
  7422                           ;PS_2.c: 979: return 1;
  7423  0FF5  3001               	movlw	1
  7424  0FF6  0008               	return
  7425  0FF7                     l6334:	
  7426                           
  7427                           ;PS_2.c: 980: }
  7428                           ;PS_2.c: 981: }
  7429                           ;PS_2.c: 984: Clock_TRIS(1);
  7430  0FF7  3001               	movlw	1
  7431  0FF8  3198  20EE  318E   	fcall	_Clock_TRIS
  7432                           
  7433                           ;PS_2.c: 985: Data_TRIS(1);
  7434  0FFB  3001               	movlw	1
  7435  0FFC  3190  2000         	fcall	_Data_TRIS
  7436                           
  7437                           ;PS_2.c: 986: return 0;
  7438  0FFE  3000               	movlw	0
  7439  0FFF  0008               	return
  7440  1000                     __end_of_Send_PS2:	
  7441                           
  7442                           	psect	text14
  7443  19CA                     __ptext14:	
  7444 ;; *************** function _READ_PS_2_PIN *****************
  7445 ;; Defined at:
  7446 ;;		line 220 in file "PS_2.c"
  7447 ;; Parameters:    Size  Location     Type
  7448 ;;  DATA_CLK        1    wreg     unsigned char 
  7449 ;; Auto vars:     Size  Location     Type
  7450 ;;  DATA_CLK        1    0[BANK4 ] unsigned char 
  7451 ;; Return value:  Size  Location     Type
  7452 ;;                  1    wreg      unsigned char 
  7453 ;; Registers used:
  7454 ;;		wreg
  7455 ;; Tracked objects:
  7456 ;;		On entry : 0/0
  7457 ;;		On exit  : 0/0
  7458 ;;		Unchanged: 0/0
  7459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7461 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7463 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7464 ;;Total ram usage:        1 bytes
  7465 ;; Hardware stack levels used:    1
  7466 ;; Hardware stack levels required when called:    7
  7467 ;; This function calls:
  7468 ;;		Nothing
  7469 ;; This function is called by:
  7470 ;;		_Send_PS2
  7471 ;; This function uses a non-reentrant model
  7472 ;;
  7473                           
  7474                           
  7475                           ;psect for function _READ_PS_2_PIN
  7476  19CA                     _READ_PS_2_PIN:	
  7477                           
  7478                           ;incstack = 0
  7479                           ; Regs used in _READ_PS_2_PIN: [wreg]
  7480                           ;READ_PS_2_PIN@DATA_CLK stored from wreg
  7481  19CA  0024               	movlb	4	; select bank4
  7482  19CB  00A0               	movwf	READ_PS_2_PIN@DATA_CLK^(0+512)
  7483                           
  7484                           ;PS_2.c: 222: if(DATA_CLK == 0b00100000)
  7485  19CC  0820               	movf	READ_PS_2_PIN@DATA_CLK^(0+512),w
  7486  19CD  3A20               	xorlw	32
  7487  19CE  1D03               	skipz
  7488  19CF  29D7               	goto	l615
  7489                           
  7490                           ;PS_2.c: 223: {
  7491                           ;PS_2.c: 225: if((PORTA & 0b00100000) == 0b00100000)
  7492  19D0  0020               	movlb	0	; select bank0
  7493  19D1  1E8C               	btfss	12,5	;volatile
  7494  19D2  29D5               	goto	l6028
  7495                           
  7496                           ;PS_2.c: 226: {
  7497                           ;PS_2.c: 227: return (1);
  7498  19D3  3001               	movlw	1
  7499                           
  7500                           ;PS_2.c: 228: }
  7501  19D4  0008               	return
  7502  19D5                     l6028:	
  7503                           
  7504                           ;PS_2.c: 229: else
  7505                           ;PS_2.c: 230: {
  7506                           ;PS_2.c: 231: return 0;
  7507  19D5  3000               	movlw	0
  7508                           
  7509                           ;PS_2.c: 232: }
  7510                           ;PS_2.c: 233: }
  7511  19D6  0008               	return
  7512  19D7                     l615:	
  7513                           
  7514                           ;PS_2.c: 234: else
  7515                           ;PS_2.c: 235: {
  7516                           ;PS_2.c: 237: if((PORTA & 0b00010000) == 0b00010000)
  7517  19D7  0020               	movlb	0	; select bank0
  7518  19D8  1E0C               	btfss	12,4	;volatile
  7519  19D9  29DC               	goto	l6038
  7520                           
  7521                           ;PS_2.c: 238: {
  7522                           ;PS_2.c: 239: return (1);
  7523  19DA  3001               	movlw	1
  7524                           
  7525                           ;PS_2.c: 240: }
  7526  19DB  0008               	return
  7527  19DC                     l6038:	
  7528                           
  7529                           ;PS_2.c: 241: else
  7530                           ;PS_2.c: 242: {
  7531                           ;PS_2.c: 243: return 0;
  7532  19DC  3000               	movlw	0
  7533  19DD  0008               	return
  7534  19DE                     __end_of_READ_PS_2_PIN:	
  7535                           
  7536                           	psect	text15
  7537  1000                     __ptext15:	
  7538 ;; *************** function _Data_TRIS *****************
  7539 ;; Defined at:
  7540 ;;		line 135 in file "PS_2.c"
  7541 ;; Parameters:    Size  Location     Type
  7542 ;;  direction       1    wreg     unsigned char 
  7543 ;; Auto vars:     Size  Location     Type
  7544 ;;  direction       1    0[BANK4 ] unsigned char 
  7545 ;; Return value:  Size  Location     Type
  7546 ;;		None               void
  7547 ;; Registers used:
  7548 ;;		wreg, status,2, status,0
  7549 ;; Tracked objects:
  7550 ;;		On entry : 0/0
  7551 ;;		On exit  : 0/0
  7552 ;;		Unchanged: 0/0
  7553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7555 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7557 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7558 ;;Total ram usage:        1 bytes
  7559 ;; Hardware stack levels used:    1
  7560 ;; Hardware stack levels required when called:    7
  7561 ;; This function calls:
  7562 ;;		Nothing
  7563 ;; This function is called by:
  7564 ;;		_PS_2_INIT
  7565 ;;		_Send_PS2
  7566 ;; This function uses a non-reentrant model
  7567 ;;
  7568                           
  7569                           
  7570                           ;psect for function _Data_TRIS
  7571  1000                     _Data_TRIS:	
  7572                           
  7573                           ;incstack = 0
  7574                           ; Regs used in _Data_TRIS: [wreg+status,2+status,0]
  7575                           ;Data_TRIS@direction stored from wreg
  7576  1000  0024               	movlb	4	; select bank4
  7577  1001  00A0               	movwf	Data_TRIS@direction^(0+512)
  7578                           
  7579                           ;PS_2.c: 137: if(direction == 0)
  7580  1002  08A0               	movf	Data_TRIS@direction^(0+512),f
  7581  1003  1D03               	skipz
  7582  1004  2808               	goto	l595
  7583                           
  7584                           ;PS_2.c: 138: {
  7585                           ;PS_2.c: 139: TRISAbits.TRISA4 = 0;
  7586  1005  0021               	movlb	1	; select bank1
  7587  1006  120C               	bcf	12,4	;volatile
  7588                           
  7589                           ;PS_2.c: 140: }
  7590  1007  0008               	return
  7591  1008                     l595:	
  7592                           
  7593                           ;PS_2.c: 141: else
  7594                           ;PS_2.c: 142: {
  7595                           ;PS_2.c: 143: TRISAbits.TRISA4 = 1;
  7596  1008  0021               	movlb	1	; select bank1
  7597  1009  160C               	bsf	12,4	;volatile
  7598  100A  0008               	return
  7599  100B                     __end_of_Data_TRIS:	
  7600                           
  7601                           	psect	text16
  7602  18EE                     __ptext16:	
  7603 ;; *************** function _Clock_TRIS *****************
  7604 ;; Defined at:
  7605 ;;		line 118 in file "PS_2.c"
  7606 ;; Parameters:    Size  Location     Type
  7607 ;;  direction       1    wreg     unsigned char 
  7608 ;; Auto vars:     Size  Location     Type
  7609 ;;  direction       1    0[BANK4 ] unsigned char 
  7610 ;; Return value:  Size  Location     Type
  7611 ;;		None               void
  7612 ;; Registers used:
  7613 ;;		wreg, status,2, status,0
  7614 ;; Tracked objects:
  7615 ;;		On entry : 0/0
  7616 ;;		On exit  : 0/0
  7617 ;;		Unchanged: 0/0
  7618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7620 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7622 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7623 ;;Total ram usage:        1 bytes
  7624 ;; Hardware stack levels used:    1
  7625 ;; Hardware stack levels required when called:    7
  7626 ;; This function calls:
  7627 ;;		Nothing
  7628 ;; This function is called by:
  7629 ;;		_PS_2_INIT
  7630 ;;		_Send_PS2
  7631 ;; This function uses a non-reentrant model
  7632 ;;
  7633                           
  7634                           
  7635                           ;psect for function _Clock_TRIS
  7636  18EE                     _Clock_TRIS:	
  7637                           
  7638                           ;incstack = 0
  7639                           ; Regs used in _Clock_TRIS: [wreg+status,2+status,0]
  7640                           ;Clock_TRIS@direction stored from wreg
  7641  18EE  0024               	movlb	4	; select bank4
  7642  18EF  00A0               	movwf	Clock_TRIS@direction^(0+512)
  7643                           
  7644                           ;PS_2.c: 120: if(direction == 0)
  7645  18F0  08A0               	movf	Clock_TRIS@direction^(0+512),f
  7646  18F1  1D03               	skipz
  7647  18F2  28F6               	goto	l590
  7648                           
  7649                           ;PS_2.c: 121: {
  7650                           ;PS_2.c: 122: TRISAbits.TRISA5 = 0;
  7651  18F3  0021               	movlb	1	; select bank1
  7652  18F4  128C               	bcf	12,5	;volatile
  7653                           
  7654                           ;PS_2.c: 123: }
  7655  18F5  0008               	return
  7656  18F6                     l590:	
  7657                           
  7658                           ;PS_2.c: 124: else
  7659                           ;PS_2.c: 125: {
  7660                           ;PS_2.c: 126: TRISAbits.TRISA5 = 1;
  7661  18F6  0021               	movlb	1	; select bank1
  7662  18F7  168C               	bsf	12,5	;volatile
  7663  18F8  0008               	return
  7664  18F9                     __end_of_Clock_TRIS:	
  7665                           
  7666                           	psect	text17
  7667  19B7                     __ptext17:	
  7668 ;; *************** function _PS_2_DISABLE_INTERRUPT *****************
  7669 ;; Defined at:
  7670 ;;		line 176 in file "PS_2.c"
  7671 ;; Parameters:    Size  Location     Type
  7672 ;;  DATA_CLK        1    wreg     unsigned char 
  7673 ;; Auto vars:     Size  Location     Type
  7674 ;;  DATA_CLK        1    1[BANK4 ] unsigned char 
  7675 ;; Return value:  Size  Location     Type
  7676 ;;		None               void
  7677 ;; Registers used:
  7678 ;;		wreg, status,2, status,0
  7679 ;; Tracked objects:
  7680 ;;		On entry : 0/0
  7681 ;;		On exit  : 0/0
  7682 ;;		Unchanged: 0/0
  7683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7685 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7686 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7687 ;;      Totals:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  7688 ;;Total ram usage:        2 bytes
  7689 ;; Hardware stack levels used:    1
  7690 ;; Hardware stack levels required when called:    7
  7691 ;; This function calls:
  7692 ;;		Nothing
  7693 ;; This function is called by:
  7694 ;;		_Init_PS_2_Send
  7695 ;;		_Keyboard_Connected
  7696 ;; This function uses a non-reentrant model
  7697 ;;
  7698                           
  7699                           
  7700                           ;psect for function _PS_2_DISABLE_INTERRUPT
  7701  19B7                     _PS_2_DISABLE_INTERRUPT:	
  7702                           
  7703                           ;incstack = 0
  7704                           ; Regs used in _PS_2_DISABLE_INTERRUPT: [wreg+status,2+status,0]
  7705                           ;PS_2_DISABLE_INTERRUPT@DATA_CLK stored from wreg
  7706  19B7  0024               	movlb	4	; select bank4
  7707  19B8  00A1               	movwf	PS_2_DISABLE_INTERRUPT@DATA_CLK^(0+512)
  7708                           
  7709                           ;PS_2.c: 178: if(DATA_CLK == 0b00100000)
  7710  19B9  0821               	movf	PS_2_DISABLE_INTERRUPT@DATA_CLK^(0+512),w
  7711  19BA  3A20               	xorlw	32
  7712  19BB  1D03               	skipz
  7713  19BC  29C3               	goto	l6112
  7714                           
  7715                           ;PS_2.c: 179: {
  7716                           ;PS_2.c: 182: IOCAN &= ~0b00100000;
  7717  19BD  30DF               	movlw	223
  7718  19BE  00A0               	movwf	??_PS_2_DISABLE_INTERRUPT^(0+512)
  7719  19BF  0820               	movf	??_PS_2_DISABLE_INTERRUPT^(0+512),w
  7720  19C0  0027               	movlb	7	; select bank7
  7721  19C1  0592               	andwf	18,f	;volatile
  7722                           
  7723                           ;PS_2.c: 183: }
  7724  19C2  0008               	return
  7725  19C3                     l6112:	
  7726                           
  7727                           ;PS_2.c: 184: else
  7728                           ;PS_2.c: 185: {
  7729                           ;PS_2.c: 188: IOCAN &= ~0b00010000;
  7730  19C3  30EF               	movlw	239
  7731  19C4  0024               	movlb	4	; select bank4
  7732  19C5  00A0               	movwf	??_PS_2_DISABLE_INTERRUPT^(0+512)
  7733  19C6  0820               	movf	??_PS_2_DISABLE_INTERRUPT^(0+512),w
  7734  19C7  0027               	movlb	7	; select bank7
  7735  19C8  0592               	andwf	18,f	;volatile
  7736  19C9  0008               	return
  7737  19CA                     __end_of_PS_2_DISABLE_INTERRUPT:	
  7738                           
  7739                           	psect	text18
  7740  1905                     __ptext18:	
  7741 ;; *************** function _PS_2_ENABLE_INTERRUPT *****************
  7742 ;; Defined at:
  7743 ;;		line 197 in file "PS_2.c"
  7744 ;; Parameters:    Size  Location     Type
  7745 ;;  DATA_CLK        1    wreg     unsigned char 
  7746 ;; Auto vars:     Size  Location     Type
  7747 ;;  DATA_CLK        1    0[BANK4 ] unsigned char 
  7748 ;; Return value:  Size  Location     Type
  7749 ;;		None               void
  7750 ;; Registers used:
  7751 ;;		wreg
  7752 ;; Tracked objects:
  7753 ;;		On entry : 0/0
  7754 ;;		On exit  : 0/0
  7755 ;;		Unchanged: 0/0
  7756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7758 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7760 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  7761 ;;Total ram usage:        1 bytes
  7762 ;; Hardware stack levels used:    1
  7763 ;; Hardware stack levels required when called:    7
  7764 ;; This function calls:
  7765 ;;		Nothing
  7766 ;; This function is called by:
  7767 ;;		_main
  7768 ;;		_Keyboard_Connected
  7769 ;; This function uses a non-reentrant model
  7770 ;;
  7771                           
  7772                           
  7773                           ;psect for function _PS_2_ENABLE_INTERRUPT
  7774  1905                     _PS_2_ENABLE_INTERRUPT:	
  7775                           
  7776                           ;incstack = 0
  7777                           ; Regs used in _PS_2_ENABLE_INTERRUPT: [wreg]
  7778                           ;PS_2_ENABLE_INTERRUPT@DATA_CLK stored from wreg
  7779  1905  0024               	movlb	4	; select bank4
  7780  1906  00A0               	movwf	PS_2_ENABLE_INTERRUPT@DATA_CLK^(0+512)
  7781                           
  7782                           ;PS_2.c: 199: if(DATA_CLK == 0b00100000)
  7783  1907  0820               	movf	PS_2_ENABLE_INTERRUPT@DATA_CLK^(0+512),w
  7784  1908  3A20               	xorlw	32
  7785  1909  1D03               	skipz
  7786  190A  290E               	goto	l610
  7787                           
  7788                           ;PS_2.c: 200: {
  7789                           ;PS_2.c: 203: IOCAN |= 0b00100000;
  7790  190B  0027               	movlb	7	; select bank7
  7791  190C  1692               	bsf	18,5	;volatile
  7792                           
  7793                           ;PS_2.c: 205: }
  7794  190D  0008               	return
  7795  190E                     l610:	
  7796                           
  7797                           ;PS_2.c: 206: else
  7798                           ;PS_2.c: 207: {
  7799                           ;PS_2.c: 210: IOCAN |= 0b00010000;
  7800  190E  0027               	movlb	7	; select bank7
  7801  190F  1612               	bsf	18,4	;volatile
  7802  1910  0008               	return
  7803  1911                     __end_of_PS_2_ENABLE_INTERRUPT:	
  7804                           
  7805                           	psect	text19
  7806  0A48                     __ptext19:	
  7807 ;; *************** function _Init_System *****************
  7808 ;; Defined at:
  7809 ;;		line 103 in file "user.c"
  7810 ;; Parameters:    Size  Location     Type
  7811 ;;		None
  7812 ;; Auto vars:     Size  Location     Type
  7813 ;;  Baud            4   44[BANK4 ] unsigned long 
  7814 ;;  temp            4   40[BANK4 ] unsigned long 
  7815 ;;  Parity          1   48[BANK4 ] unsigned char 
  7816 ;; Return value:  Size  Location     Type
  7817 ;;		None               void
  7818 ;; Registers used:
  7819 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7820 ;; Tracked objects:
  7821 ;;		On entry : 0/0
  7822 ;;		On exit  : 0/0
  7823 ;;		Unchanged: 0/0
  7824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7826 ;;      Locals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0
  7827 ;;      Temps:          0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  7828 ;;      Totals:         0       0       0       0       0      14       0       0       0       0       0       0       
      +0       0
  7829 ;;Total ram usage:       14 bytes
  7830 ;; Hardware stack levels used:    1
  7831 ;; Hardware stack levels required when called:   10
  7832 ;; This function calls:
  7833 ;;		_InitUART
  7834 ;;		_ReadBaud
  7835 ;;		_UARTstringWAIT
  7836 ;;		_delayUS
  7837 ;; This function is called by:
  7838 ;;		_main
  7839 ;; This function uses a non-reentrant model
  7840 ;;
  7841                           
  7842                           
  7843                           ;psect for function _Init_System
  7844  0A48                     _Init_System:	
  7845                           
  7846                           ;user.c: 105: unsigned long temp =0;
  7847                           
  7848                           ;incstack = 0
  7849                           ; Regs used in _Init_System: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7850  0A48  3000               	movlw	0
  7851  0A49  0024               	movlb	4	; select bank4
  7852  0A4A  00CB               	movwf	(Init_System@temp+3)^(0+512)
  7853  0A4B  3000               	movlw	0
  7854  0A4C  00CA               	movwf	(Init_System@temp+2)^(0+512)
  7855  0A4D  3000               	movlw	0
  7856  0A4E  00C9               	movwf	(Init_System@temp+1)^(0+512)
  7857  0A4F  3000               	movlw	0
  7858  0A50  00C8               	movwf	Init_System@temp^(0+512)
  7859                           
  7860                           ;user.c: 106: unsigned long Baud =0;
  7861  0A51  3000               	movlw	0
  7862  0A52  00CF               	movwf	(Init_System@Baud+3)^(0+512)
  7863  0A53  3000               	movlw	0
  7864  0A54  00CE               	movwf	(Init_System@Baud+2)^(0+512)
  7865  0A55  3000               	movlw	0
  7866  0A56  00CD               	movwf	(Init_System@Baud+1)^(0+512)
  7867  0A57  3000               	movlw	0
  7868  0A58  00CC               	movwf	Init_System@Baud^(0+512)
  7869                           
  7870                           ;user.c: 107: unsigned char Parity =0;
  7871  0A59  01D0               	clrf	Init_System@Parity^(0+512)
  7872                           
  7873                           ;user.c: 109: temp = ReadBaud((0x1800 >> 5),0);
  7874  0A5A  30C0               	movlw	192
  7875  0A5B  00B2               	movwf	ReadBaud@row^(0+512)
  7876  0A5C  3000               	movlw	0
  7877  0A5D  00B3               	movwf	(ReadBaud@row^(0+512)+1)
  7878  0A5E  01B4               	clrf	ReadBaud@column^(0+512)
  7879  0A5F  3191  2124  318A   	fcall	_ReadBaud
  7880  0A62  0024               	movlb	4	; select bank4
  7881  0A63  0835               	movf	(?_ReadBaud+3)^(0+512),w
  7882  0A64  00CB               	movwf	(Init_System@temp+3)^(0+512)
  7883  0A65  0834               	movf	(?_ReadBaud+2)^(0+512),w
  7884  0A66  00CA               	movwf	(Init_System@temp+2)^(0+512)
  7885  0A67  0833               	movf	(?_ReadBaud+1)^(0+512),w
  7886  0A68  00C9               	movwf	(Init_System@temp+1)^(0+512)
  7887  0A69  0832               	movf	?_ReadBaud^(0+512),w
  7888  0A6A  00C8               	movwf	Init_System@temp^(0+512)
  7889                           
  7890                           ;user.c: 110: Baud = temp & 0x000FFFFF;
  7891  0A6B  30FF               	movlw	255
  7892  0A6C  0548               	andwf	Init_System@temp^(0+512),w
  7893  0A6D  00CC               	movwf	Init_System@Baud^(0+512)
  7894  0A6E  30FF               	movlw	255
  7895  0A6F  0549               	andwf	(Init_System@temp+1)^(0+512),w
  7896  0A70  00CD               	movwf	(Init_System@Baud+1)^(0+512)
  7897  0A71  300F               	movlw	15
  7898  0A72  054A               	andwf	(Init_System@temp+2)^(0+512),w
  7899  0A73  00CE               	movwf	(Init_System@Baud+2)^(0+512)
  7900  0A74  3000               	movlw	0
  7901  0A75  054B               	andwf	(Init_System@temp+3)^(0+512),w
  7902  0A76  00CF               	movwf	(Init_System@Baud+3)^(0+512)
  7903                           
  7904                           ;user.c: 111: Parity = (unsigned char)((temp & 0x00F00000) >> 20);
  7905  0A77  0848               	movf	Init_System@temp^(0+512),w
  7906  0A78  00C3               	movwf	??_Init_System^(0+512)
  7907  0A79  0849               	movf	(Init_System@temp+1)^(0+512),w
  7908  0A7A  00C4               	movwf	(??_Init_System^(0+512)+1)
  7909  0A7B  084A               	movf	(Init_System@temp+2)^(0+512),w
  7910  0A7C  00C5               	movwf	(??_Init_System^(0+512)+2)
  7911  0A7D  084B               	movf	(Init_System@temp+3)^(0+512),w
  7912  0A7E  00C6               	movwf	(??_Init_System^(0+512)+3)
  7913  0A7F  3014               	movlw	20
  7914  0A80                     u8645:	
  7915  0A80  36C6               	lsrf	(??_Init_System^(0+512)+3),f
  7916  0A81  0CC5               	rrf	(??_Init_System^(0+512)+2),f
  7917  0A82  0CC4               	rrf	(??_Init_System^(0+512)+1),f
  7918  0A83  0CC3               	rrf	??_Init_System^(0+512),f
  7919  0A84  0B89               	decfsz	9,f
  7920  0A85  2A80               	goto	u8645
  7921  0A86  0843               	movf	??_Init_System^(0+512),w
  7922  0A87  390F               	andlw	15
  7923  0A88  00C7               	movwf	(??_Init_System+4)^(0+512)
  7924  0A89  0847               	movf	(??_Init_System+4)^(0+512),w
  7925  0A8A  00D0               	movwf	Init_System@Parity^(0+512)
  7926                           
  7927                           ;user.c: 112: if(Baud <2400 || Baud > 115200)
  7928  0A8B  3000               	movlw	0
  7929  0A8C  024F               	subwf	(Init_System@Baud+3)^(0+512),w
  7930  0A8D  1D03               	skipz
  7931  0A8E  2A99               	goto	u8655
  7932  0A8F  3000               	movlw	0
  7933  0A90  024E               	subwf	(Init_System@Baud+2)^(0+512),w
  7934  0A91  1D03               	skipz
  7935  0A92  2A99               	goto	u8655
  7936  0A93  3009               	movlw	9
  7937  0A94  024D               	subwf	(Init_System@Baud+1)^(0+512),w
  7938  0A95  1D03               	skipz
  7939  0A96  2A99               	goto	u8655
  7940  0A97  3060               	movlw	96
  7941  0A98  024C               	subwf	Init_System@Baud^(0+512),w
  7942  0A99                     u8655:	
  7943  0A99  1C03               	skipc
  7944  0A9A  2AAB               	goto	l6706
  7945  0A9B  3000               	movlw	0
  7946  0A9C  024F               	subwf	(Init_System@Baud+3)^(0+512),w
  7947  0A9D  1D03               	skipz
  7948  0A9E  2AA9               	goto	u8665
  7949  0A9F  3001               	movlw	1
  7950  0AA0  024E               	subwf	(Init_System@Baud+2)^(0+512),w
  7951  0AA1  1D03               	skipz
  7952  0AA2  2AA9               	goto	u8665
  7953  0AA3  30C2               	movlw	194
  7954  0AA4  024D               	subwf	(Init_System@Baud+1)^(0+512),w
  7955  0AA5  1D03               	skipz
  7956  0AA6  2AA9               	goto	u8665
  7957  0AA7  3001               	movlw	1
  7958  0AA8  024C               	subwf	Init_System@Baud^(0+512),w
  7959  0AA9                     u8665:	
  7960  0AA9  1C03               	skipc
  7961  0AAA  2AB4               	goto	l6710
  7962  0AAB                     l6706:	
  7963                           
  7964                           ;user.c: 113: {
  7965                           ;user.c: 115: Baud = 9600;
  7966  0AAB  3000               	movlw	0
  7967  0AAC  00CF               	movwf	(Init_System@Baud+3)^(0+512)
  7968  0AAD  3000               	movlw	0
  7969  0AAE  00CE               	movwf	(Init_System@Baud+2)^(0+512)
  7970  0AAF  3025               	movlw	37
  7971  0AB0  00CD               	movwf	(Init_System@Baud+1)^(0+512)
  7972  0AB1  3080               	movlw	128
  7973  0AB2  00CC               	movwf	Init_System@Baud^(0+512)
  7974                           
  7975                           ;user.c: 116: Parity = 0;
  7976  0AB3  01D0               	clrf	Init_System@Parity^(0+512)
  7977  0AB4                     l6710:	
  7978                           
  7979                           ;user.c: 117: }
  7980                           ;user.c: 118: InitUART(Baud, Parity);
  7981  0AB4  084F               	movf	(Init_System@Baud+3)^(0+512),w
  7982  0AB5  00B1               	movwf	(InitUART@Baud+3)^(0+512)
  7983  0AB6  084E               	movf	(Init_System@Baud+2)^(0+512),w
  7984  0AB7  00B0               	movwf	(InitUART@Baud+2)^(0+512)
  7985  0AB8  084D               	movf	(Init_System@Baud+1)^(0+512),w
  7986  0AB9  00AF               	movwf	(InitUART@Baud+1)^(0+512)
  7987  0ABA  084C               	movf	Init_System@Baud^(0+512),w
  7988  0ABB  00AE               	movwf	InitUART@Baud^(0+512)
  7989  0ABC  0850               	movf	Init_System@Parity^(0+512),w
  7990  0ABD  00C3               	movwf	??_Init_System^(0+512)
  7991  0ABE  0843               	movf	??_Init_System^(0+512),w
  7992  0ABF  00B2               	movwf	InitUART@parity^(0+512)
  7993  0AC0  3194  2443  318A   	fcall	_InitUART
  7994                           
  7995                           ;user.c: 121: delayUS(15000);
  7996  0AC3  3000               	movlw	0
  7997  0AC4  0024               	movlb	4	; select bank4
  7998  0AC5  00A3               	movwf	(delayUS@US+3)^(0+512)
  7999  0AC6  3000               	movlw	0
  8000  0AC7  00A2               	movwf	(delayUS@US+2)^(0+512)
  8001  0AC8  303A               	movlw	58
  8002  0AC9  00A1               	movwf	(delayUS@US+1)^(0+512)
  8003  0ACA  3098               	movlw	152
  8004  0ACB  00A0               	movwf	delayUS@US^(0+512)
  8005  0ACC  319C  2456  318A   	fcall	_delayUS
  8006                           
  8007                           ;user.c: 122: UARTstringWAIT("\r\nPS/2 Keyboard to RS-232\r\n");
  8008  0ACF  3090               	movlw	low (STR_3| (0+32768))
  8009  0AD0  0024               	movlb	4	; select bank4
  8010  0AD1  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8011  0AD2  3089               	movlw	high (STR_3| (0+32768))
  8012  0AD3  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8013  0AD4  319C  2423  318A   	fcall	_UARTstringWAIT
  8014                           
  8015                           ;user.c: 123: delayUS(15000);
  8016  0AD7  3000               	movlw	0
  8017  0AD8  0024               	movlb	4	; select bank4
  8018  0AD9  00A3               	movwf	(delayUS@US+3)^(0+512)
  8019  0ADA  3000               	movlw	0
  8020  0ADB  00A2               	movwf	(delayUS@US+2)^(0+512)
  8021  0ADC  303A               	movlw	58
  8022  0ADD  00A1               	movwf	(delayUS@US+1)^(0+512)
  8023  0ADE  3098               	movlw	152
  8024  0ADF  00A0               	movwf	delayUS@US^(0+512)
  8025  0AE0  319C  2456  318A   	fcall	_delayUS
  8026                           
  8027                           ;user.c: 124: UARTstringWAIT("Firmware Version: ");
  8028  0AE3  3013               	movlw	low (STR_4| (0+32768))
  8029  0AE4  0024               	movlb	4	; select bank4
  8030  0AE5  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8031  0AE6  308A               	movlw	high (STR_4| (0+32768))
  8032  0AE7  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8033  0AE8  319C  2423  318A   	fcall	_UARTstringWAIT
  8034                           
  8035                           ;user.c: 125: UARTstringWAIT(Version);
  8036  0AEB  3066               	movlw	low (_Version| (0+32768))
  8037  0AEC  0024               	movlb	4	; select bank4
  8038  0AED  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8039  0AEE  3089               	movlw	high (_Version| (0+32768))
  8040  0AEF  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8041  0AF0  319C  2423  318A   	fcall	_UARTstringWAIT
  8042                           
  8043                           ;user.c: 126: UARTstringWAIT("\r\n");
  8044  0AF3  30FD               	movlw	low ((STR_14+16)| (0+32768))
  8045  0AF4  0024               	movlb	4	; select bank4
  8046  0AF5  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8047  0AF6  3089               	movlw	high ((STR_14+16)| (0+32768))
  8048  0AF7  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8049  0AF8  319C  2423  318A   	fcall	_UARTstringWAIT
  8050                           
  8051                           ;user.c: 127: delayUS(15000);
  8052  0AFB  3000               	movlw	0
  8053  0AFC  0024               	movlb	4	; select bank4
  8054  0AFD  00A3               	movwf	(delayUS@US+3)^(0+512)
  8055  0AFE  3000               	movlw	0
  8056  0AFF  00A2               	movwf	(delayUS@US+2)^(0+512)
  8057  0B00  303A               	movlw	58
  8058  0B01  00A1               	movwf	(delayUS@US+1)^(0+512)
  8059  0B02  3098               	movlw	152
  8060  0B03  00A0               	movwf	delayUS@US^(0+512)
  8061  0B04  319C  2456  318A   	fcall	_delayUS
  8062                           
  8063                           ;user.c: 128: UARTstringWAIT("Change BAUD: \"CNT + ALT + DEL\"\r\n");
  8064  0B07  306F               	movlw	low (STR_6| (0+32768))
  8065  0B08  0024               	movlb	4	; select bank4
  8066  0B09  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8067  0B0A  3089               	movlw	high (STR_6| (0+32768))
  8068  0B0B  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8069  0B0C  319C  2423  318A   	fcall	_UARTstringWAIT
  8070                           
  8071                           ;user.c: 129: delayUS(15000);
  8072  0B0F  3000               	movlw	0
  8073  0B10  0024               	movlb	4	; select bank4
  8074  0B11  00A3               	movwf	(delayUS@US+3)^(0+512)
  8075  0B12  3000               	movlw	0
  8076  0B13  00A2               	movwf	(delayUS@US+2)^(0+512)
  8077  0B14  303A               	movlw	58
  8078  0B15  00A1               	movwf	(delayUS@US+1)^(0+512)
  8079  0B16  3098               	movlw	152
  8080  0B17  00A0               	movwf	delayUS@US^(0+512)
  8081  0B18  319C  2456  318A   	fcall	_delayUS
  8082                           
  8083                           ;user.c: 130: UARTstringWAIT("\r\n");
  8084  0B1B  30FD               	movlw	low ((STR_14+16)| (0+32768))
  8085  0B1C  0024               	movlb	4	; select bank4
  8086  0B1D  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8087  0B1E  3089               	movlw	high ((STR_14+16)| (0+32768))
  8088  0B1F  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8089  0B20  319C  2423  318A   	fcall	_UARTstringWAIT
  8090                           
  8091                           ;user.c: 132: if(Parity)
  8092  0B23  0024               	movlb	4	; select bank4
  8093  0B24  0850               	movf	Init_System@Parity^(0+512),w
  8094  0B25  1903               	btfsc	3,2
  8095  0B26  2B48               	goto	l6748
  8096                           
  8097                           ;user.c: 133: {
  8098                           ;user.c: 134: switch (Parity)
  8099  0B27  2B3B               	goto	l6746
  8100  0B28                     l6736:	
  8101                           ;user.c: 135: {
  8102                           ;user.c: 136: case 1:
  8103                           
  8104                           
  8105                           ;user.c: 137: UARTstringWAIT(OddParityMSG);
  8106  0B28  3011               	movlw	low (_OddParityMSG| (0+32768))
  8107  0B29  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8108  0B2A  3089               	movlw	high (_OddParityMSG| (0+32768))
  8109  0B2B  2B4B               	goto	L3
  8110  0B2C                     l6738:	
  8111                           ;user.c: 139: case 2:
  8112                           
  8113                           ;user.c: 138: break;
  8114                           
  8115                           
  8116                           ;user.c: 140: UARTstringWAIT(EvenParityMSG);
  8117  0B2C  30FB               	movlw	low (_EvenParityMSG| (0+32768))
  8118  0B2D  0024               	movlb	4	; select bank4
  8119  0B2E  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8120  0B2F  3088               	movlw	high (_EvenParityMSG| (0+32768))
  8121  0B30  2B4B               	goto	L3
  8122  0B31                     l6740:	
  8123                           ;user.c: 142: case 3:
  8124                           
  8125                           ;user.c: 141: break;
  8126                           
  8127                           
  8128                           ;user.c: 143: UARTstringWAIT(MarkParityMSG);
  8129  0B31  304A               	movlw	low (_MarkParityMSG| (0+32768))
  8130  0B32  0024               	movlb	4	; select bank4
  8131  0B33  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8132  0B34  3089               	movlw	high (_MarkParityMSG| (0+32768))
  8133  0B35  2B4B               	goto	L3
  8134  0B36                     l6742:	
  8135                           ;user.c: 145: default:
  8136                           
  8137                           ;user.c: 144: break;
  8138                           
  8139                           
  8140                           ;user.c: 146: UARTstringWAIT(SpaceParityMSG);
  8141  0B36  303A               	movlw	low (_SpaceParityMSG| (0+32768))
  8142  0B37  0024               	movlb	4	; select bank4
  8143  0B38  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8144  0B39  3089               	movlw	high (_SpaceParityMSG| (0+32768))
  8145  0B3A  2B4B               	goto	L3
  8146  0B3B                     l6746:	
  8147                           ;user.c: 148: }
  8148                           
  8149                           ;user.c: 147: break;
  8150                           
  8151  0B3B  0024               	movlb	4	; select bank4
  8152  0B3C  0850               	movf	Init_System@Parity^(0+512),w
  8153                           
  8154                           ; Switch size 1, requested type "space"
  8155                           ; Number of cases is 3, Range of values is 1 to 3
  8156                           ; switch strategies available:
  8157                           ; Name         Instructions Cycles
  8158                           ; simple_byte           10     6 (average)
  8159                           ; direct_byte           15     9 (fixed)
  8160                           ; jumptable            263     9 (fixed)
  8161                           ;	Chosen strategy is simple_byte
  8162  0B3D  3A01               	xorlw	1	; case 1
  8163  0B3E  1903               	skipnz
  8164  0B3F  2B28               	goto	l6736
  8165  0B40  3A03               	xorlw	3	; case 2
  8166  0B41  1903               	skipnz
  8167  0B42  2B2C               	goto	l6738
  8168  0B43  3A01               	xorlw	1	; case 3
  8169  0B44  1903               	skipnz
  8170  0B45  2B31               	goto	l6740
  8171  0B46  2B36               	goto	l6742
  8172                           
  8173                           ;user.c: 149: }
  8174  0B47  2B4F               	goto	l253
  8175  0B48                     l6748:	
  8176                           
  8177                           ;user.c: 150: else
  8178                           ;user.c: 151: {
  8179                           ;user.c: 152: UARTstringWAIT(NoParityMSG);
  8180  0B48  3026               	movlw	low (_NoParityMSG| (0+32768))
  8181  0B49  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8182  0B4A  3089               	movlw	high (_NoParityMSG| (0+32768))
  8183  0B4B                     L3:	
  8184  0B4B  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8185  0B4C  319C  2423  318A   	fcall	_UARTstringWAIT
  8186  0B4F                     l253:	
  8187                           
  8188                           ;user.c: 153: }
  8189                           ;user.c: 154: UARTstringWAIT("\r\n");
  8190  0B4F  30FD               	movlw	low ((STR_14+16)| (0+32768))
  8191  0B50  0024               	movlb	4	; select bank4
  8192  0B51  00AF               	movwf	UARTstringWAIT@data^(0+512)
  8193  0B52  3089               	movlw	high ((STR_14+16)| (0+32768))
  8194  0B53  00B0               	movwf	(UARTstringWAIT@data^(0+512)+1)
  8195  0B54  319C  2423  318A   	fcall	_UARTstringWAIT
  8196                           
  8197                           ;user.c: 155: delayUS(15000);
  8198  0B57  3000               	movlw	0
  8199  0B58  0024               	movlb	4	; select bank4
  8200  0B59  00A3               	movwf	(delayUS@US+3)^(0+512)
  8201  0B5A  3000               	movlw	0
  8202  0B5B  00A2               	movwf	(delayUS@US+2)^(0+512)
  8203  0B5C  303A               	movlw	58
  8204  0B5D  00A1               	movwf	(delayUS@US+1)^(0+512)
  8205  0B5E  3098               	movlw	152
  8206  0B5F  00A0               	movwf	delayUS@US^(0+512)
  8207  0B60  319C  2456         	fcall	_delayUS
  8208                           
  8209                           ;user.c: 156: INTCON |= 0x08;
  8210  0B62  158B               	bsf	11,3	;volatile
  8211                           
  8212                           ;user.c: 157: INTCONbits.GIE = 1;
  8213  0B63  178B               	bsf	11,7	;volatile
  8214  0B64  0008               	return
  8215  0B65                     __end_of_Init_System:	
  8216                           
  8217                           	psect	text20
  8218  1C23                     __ptext20:	
  8219 ;; *************** function _UARTstringWAIT *****************
  8220 ;; Defined at:
  8221 ;;		line 361 in file "UART.c"
  8222 ;; Parameters:    Size  Location     Type
  8223 ;;  data            2   15[BANK4 ] PTR const unsigned char 
  8224 ;;		 -> STR_20(20), STR_19(3), Process_PS2_ScanCode@buf(60), STR_17(3), 
  8225 ;;		 -> STR_16(3), STR_15(19), STR_14(19), STR_13(3), 
  8226 ;;		 -> STR_12(3), SetBaud@buf(50), STR_10(21), STR_9(3), 
  8227 ;;		 -> STR_8(3), NoParityMSG(20), SpaceParityMSG(16), MarkParityMSG(15), 
  8228 ;;		 -> EvenParityMSG(22), OddParityMSG(21), STR_7(3), STR_6(33), 
  8229 ;;		 -> STR_5(3), Version(9), STR_4(19), STR_3(28), 
  8230 ;;		 -> STR_2(8), STR_1(7), VoltageMSG(13), 
  8231 ;; Auto vars:     Size  Location     Type
  8232 ;;		None
  8233 ;; Return value:  Size  Location     Type
  8234 ;;		None               void
  8235 ;; Registers used:
  8236 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8237 ;; Tracked objects:
  8238 ;;		On entry : 0/0
  8239 ;;		On exit  : 0/0
  8240 ;;		Unchanged: 0/0
  8241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8242 ;;      Params:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  8243 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8244 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  8245 ;;      Totals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8246 ;;Total ram usage:        4 bytes
  8247 ;; Hardware stack levels used:    1
  8248 ;; Hardware stack levels required when called:    9
  8249 ;; This function calls:
  8250 ;;		_UARTchar
  8251 ;;		_delayUS
  8252 ;; This function is called by:
  8253 ;;		_main
  8254 ;;		_Init_System
  8255 ;; This function uses a non-reentrant model
  8256 ;;
  8257                           
  8258                           
  8259                           ;psect for function _UARTstringWAIT
  8260  1C23                     _UARTstringWAIT:	
  8261  1C23                     l434:	
  8262                           ;incstack = 0
  8263                           ; Regs used in _UARTstringWAIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8264                           ;UART.c: 363: do
  8265                           
  8266                           
  8267                           ;UART.c: 364: {
  8268                           ;UART.c: 365: delayUS(5000);
  8269  1C23  3000               	movlw	0
  8270  1C24  0024               	movlb	4	; select bank4
  8271  1C25  00A3               	movwf	(delayUS@US+3)^(0+512)
  8272  1C26  3000               	movlw	0
  8273  1C27  00A2               	movwf	(delayUS@US+2)^(0+512)
  8274  1C28  3013               	movlw	19
  8275  1C29  00A1               	movwf	(delayUS@US+1)^(0+512)
  8276  1C2A  3088               	movlw	136
  8277  1C2B  00A0               	movwf	delayUS@US^(0+512)
  8278  1C2C  319C  2456  319C   	fcall	_delayUS
  8279                           
  8280                           ;UART.c: 366: if(*data != 0)
  8281  1C2F  0024               	movlb	4	; select bank4
  8282  1C30  082F               	movf	UARTstringWAIT@data^(0+512),w
  8283  1C31  0084               	movwf	4
  8284  1C32  0830               	movf	(UARTstringWAIT@data+1)^(0+512),w
  8285  1C33  0085               	movwf	5
  8286  1C34  0800               	movf	0,w	;code access
  8287  1C35  3A00               	xorlw	0
  8288  1C36  1903               	skipnz
  8289  1C37  2C45               	goto	l6408
  8290                           
  8291                           ;UART.c: 367: {
  8292                           ;UART.c: 368: UARTchar(*data, 0, 0);
  8293  1C38  01A8               	clrf	UARTchar@override^(0+512)
  8294  1C39  01A9               	clrf	UARTchar@NinethBit_override_data^(0+512)
  8295  1C3A  082F               	movf	UARTstringWAIT@data^(0+512),w
  8296  1C3B  0084               	movwf	4
  8297  1C3C  0830               	movf	(UARTstringWAIT@data+1)^(0+512),w
  8298  1C3D  0085               	movwf	5
  8299  1C3E  0800               	movf	0,w	;code access
  8300  1C3F  319F  270A  319C   	fcall	_UARTchar
  8301  1C42                     l436:	
  8302                           ;UART.c: 369: while((!TX1STAbits.TRMT));
  8303                           
  8304  1C42  0023               	movlb	3	; select bank3
  8305  1C43  1C9E               	btfss	30,1	;volatile
  8306  1C44  2C42               	goto	l436
  8307  1C45                     l6408:	
  8308                           
  8309                           ;UART.c: 370: }
  8310                           ;UART.c: 371: } while( *data++);
  8311  1C45  0024               	movlb	4	; select bank4
  8312  1C46  0830               	movf	(UARTstringWAIT@data+1)^(0+512),w
  8313  1C47  00B2               	movwf	(??_UARTstringWAIT^(0+512)+1)
  8314  1C48  082F               	movf	UARTstringWAIT@data^(0+512),w
  8315  1C49  00B1               	movwf	??_UARTstringWAIT^(0+512)
  8316  1C4A  0AAF               	incf	UARTstringWAIT@data^(0+512),f
  8317  1C4B  1903               	skipnz
  8318  1C4C  0AB0               	incf	(UARTstringWAIT@data+1)^(0+512),f
  8319  1C4D  0831               	movf	??_UARTstringWAIT^(0+512),w
  8320  1C4E  0084               	movwf	4
  8321  1C4F  0832               	movf	(??_UARTstringWAIT+1)^(0+512),w
  8322  1C50  0085               	movwf	5
  8323  1C51  0800               	movf	0,w	;code access
  8324  1C52  3800               	iorlw	0
  8325  1C53  1903               	btfsc	3,2
  8326  1C54  0008               	return
  8327  1C55  2C23               	goto	l434
  8328  1C56                     __end_of_UARTstringWAIT:	
  8329                           
  8330                           	psect	text21
  8331  1C56                     __ptext21:	
  8332 ;; *************** function _delayUS *****************
  8333 ;; Defined at:
  8334 ;;		line 51 in file "MISC.c"
  8335 ;; Parameters:    Size  Location     Type
  8336 ;;  US              4    0[BANK4 ] long 
  8337 ;; Auto vars:     Size  Location     Type
  8338 ;;  i               4    5[BANK4 ] long 
  8339 ;;  j               1    9[BANK4 ] unsigned char 
  8340 ;; Return value:  Size  Location     Type
  8341 ;;		None               void
  8342 ;; Registers used:
  8343 ;;		wreg, status,2, status,0
  8344 ;; Tracked objects:
  8345 ;;		On entry : 0/0
  8346 ;;		On exit  : 0/0
  8347 ;;		Unchanged: 0/0
  8348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8349 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8350 ;;      Locals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  8351 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  8352 ;;      Totals:         0       0       0       0       0      10       0       0       0       0       0       0       
      +0       0
  8353 ;;Total ram usage:       10 bytes
  8354 ;; Hardware stack levels used:    1
  8355 ;; Hardware stack levels required when called:    7
  8356 ;; This function calls:
  8357 ;;		Nothing
  8358 ;; This function is called by:
  8359 ;;		_main
  8360 ;;		_Init_System
  8361 ;;		_UARTstringWAIT
  8362 ;;		_Send_PS2
  8363 ;;		_Init_PS_2_Send
  8364 ;;		_InternalADC_Read
  8365 ;;		_Keyboard_Connected
  8366 ;; This function uses a non-reentrant model
  8367 ;;
  8368                           
  8369                           
  8370                           ;psect for function _delayUS
  8371  1C56                     _delayUS:	
  8372                           
  8373                           ;MISC.c: 53: long i;
  8374                           ;MISC.c: 54: unsigned char j;
  8375                           ;MISC.c: 55: for(i=0;i<US;i+=6)
  8376                           
  8377                           ;incstack = 0
  8378                           ; Regs used in _delayUS: [wreg+status,2+status,0]
  8379  1C56  3000               	movlw	0
  8380  1C57  0024               	movlb	4	; select bank4
  8381  1C58  00A8               	movwf	(delayUS@i+3)^(0+512)
  8382  1C59  3000               	movlw	0
  8383  1C5A  00A7               	movwf	(delayUS@i+2)^(0+512)
  8384  1C5B  3000               	movlw	0
  8385  1C5C  00A6               	movwf	(delayUS@i+1)^(0+512)
  8386  1C5D  3000               	movlw	0
  8387  1C5E  00A5               	movwf	delayUS@i^(0+512)
  8388  1C5F                     l259:	
  8389  1C5F  0828               	movf	(delayUS@i+3)^(0+512),w
  8390  1C60  3A80               	xorlw	128
  8391  1C61  00A4               	movwf	??_delayUS^(0+512)
  8392  1C62  0823               	movf	(delayUS@US+3)^(0+512),w
  8393  1C63  3A80               	xorlw	128
  8394  1C64  0224               	subwf	??_delayUS^(0+512),w
  8395  1C65  1D03               	skipz
  8396  1C66  2C71               	goto	u7573
  8397  1C67  0822               	movf	(delayUS@US+2)^(0+512),w
  8398  1C68  0227               	subwf	(delayUS@i+2)^(0+512),w
  8399  1C69  1D03               	skipz
  8400  1C6A  2C71               	goto	u7573
  8401  1C6B  0821               	movf	(delayUS@US+1)^(0+512),w
  8402  1C6C  0226               	subwf	(delayUS@i+1)^(0+512),w
  8403  1C6D  1D03               	skipz
  8404  1C6E  2C71               	goto	u7573
  8405  1C6F  0820               	movf	delayUS@US^(0+512),w
  8406  1C70  0225               	subwf	delayUS@i^(0+512),w
  8407  1C71                     u7573:	
  8408  1C71  1803               	btfsc	3,0
  8409  1C72  0008               	return
  8410                           
  8411                           ;MISC.c: 56: {
  8412                           ;MISC.c: 57: for(j=0;j<32;j++)
  8413  1C73  01A9               	clrf	delayUS@j^(0+512)
  8414  1C74  3020               	movlw	32
  8415  1C75  0229               	subwf	delayUS@j^(0+512),w
  8416  1C76  1803               	btfsc	3,0
  8417  1C77  2C82               	goto	l6054
  8418  1C78                     l261:	
  8419                           
  8420                           ;MISC.c: 58: {
  8421                           ;MISC.c: 59: __nop();
  8422  1C78  0000               	nop
  8423  1C79  3001               	movlw	1
  8424  1C7A  0024               	movlb	4	; select bank4
  8425  1C7B  00A4               	movwf	??_delayUS^(0+512)
  8426  1C7C  0824               	movf	??_delayUS^(0+512),w
  8427  1C7D  07A9               	addwf	delayUS@j^(0+512),f
  8428  1C7E  3020               	movlw	32
  8429  1C7F  0229               	subwf	delayUS@j^(0+512),w
  8430  1C80  1C03               	skipc
  8431  1C81  2C78               	goto	l261
  8432  1C82                     l6054:	
  8433  1C82  3006               	movlw	6
  8434  1C83  07A5               	addwf	delayUS@i^(0+512),f
  8435  1C84  3000               	movlw	0
  8436  1C85  3DA6               	addwfc	(delayUS@i+1)^(0+512),f
  8437  1C86  3000               	movlw	0
  8438  1C87  3DA7               	addwfc	(delayUS@i+2)^(0+512),f
  8439  1C88  3000               	movlw	0
  8440  1C89  3DA8               	addwfc	(delayUS@i+3)^(0+512),f
  8441  1C8A  2C5F               	goto	l259
  8442  1C8B                     __end_of_delayUS:	
  8443                           
  8444                           	psect	text22
  8445  1F0A                     __ptext22:	
  8446 ;; *************** function _UARTchar *****************
  8447 ;; Defined at:
  8448 ;;		line 231 in file "UART.c"
  8449 ;; Parameters:    Size  Location     Type
  8450 ;;  data            1    wreg     unsigned char 
  8451 ;;  override        1    8[BANK4 ] unsigned char 
  8452 ;;  NinethBit_ov    1    9[BANK4 ] unsigned char 
  8453 ;; Auto vars:     Size  Location     Type
  8454 ;;  data            1   14[BANK4 ] unsigned char 
  8455 ;; Return value:  Size  Location     Type
  8456 ;;		None               void
  8457 ;; Registers used:
  8458 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8459 ;; Tracked objects:
  8460 ;;		On entry : 0/0
  8461 ;;		On exit  : 0/0
  8462 ;;		Unchanged: 0/0
  8463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8464 ;;      Params:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  8465 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  8466 ;;      Temps:          0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8467 ;;      Totals:         0       0       0       0       0       7       0       0       0       0       0       0       
      +0       0
  8468 ;;Total ram usage:        7 bytes
  8469 ;; Hardware stack levels used:    1
  8470 ;; Hardware stack levels required when called:    8
  8471 ;; This function calls:
  8472 ;;		_CheckSum_byte
  8473 ;; This function is called by:
  8474 ;;		_UARTstringWAIT
  8475 ;;		_UARTstring
  8476 ;; This function uses a non-reentrant model
  8477 ;;
  8478                           
  8479                           
  8480                           ;psect for function _UARTchar
  8481  1F0A                     _UARTchar:	
  8482                           
  8483                           ;incstack = 0
  8484                           ; Regs used in _UARTchar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8485                           ;UARTchar@data stored from wreg
  8486  1F0A  0024               	movlb	4	; select bank4
  8487  1F0B  00AE               	movwf	UARTchar@data^(0+512)
  8488                           
  8489                           ;UART.c: 233: if(TXSTAbits.TX9)
  8490  1F0C  0023               	movlb	3	; select bank3
  8491  1F0D  1F1E               	btfss	30,6	;volatile
  8492  1F0E  2F53               	goto	l409
  8493                           
  8494                           ;UART.c: 234: {
  8495                           ;UART.c: 236: if(!override)
  8496  1F0F  0024               	movlb	4	; select bank4
  8497  1F10  08A8               	movf	UARTchar@override^(0+512),f
  8498  1F11  1903               	btfsc	3,2
  8499  1F12  2F3B               	goto	l6184
  8500  1F13  2F48               	goto	l6186
  8501  1F14                     l6178:	
  8502                           ;UART.c: 240: {
  8503                           ;UART.c: 241: case 1:
  8504                           
  8505                           ;UART.c: 237: {
  8506                           ;UART.c: 239: switch (PARITY)
  8507                           
  8508                           
  8509                           ;UART.c: 242: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 3);
  8510  1F14  082E               	movf	UARTchar@data^(0+512),w
  8511  1F15  00AA               	movwf	??_UARTchar^(0+512)
  8512  1F16  01AB               	clrf	(??_UARTchar^(0+512)+1)
  8513  1F17  082A               	movf	??_UARTchar^(0+512),w
  8514  1F18  00A0               	movwf	CheckSum_byte@This^(0+512)
  8515  1F19  082B               	movf	(??_UARTchar+1)^(0+512),w
  8516  1F1A  00A1               	movwf	(CheckSum_byte@This+1)^(0+512)
  8517  1F1B  3003               	movlw	3
  8518  1F1C  2F26               	goto	L6
  8519  1F1D                     l6180:	
  8520                           ;UART.c: 244: case 2:
  8521                           
  8522                           ;UART.c: 243: break;
  8523                           
  8524                           
  8525                           ;UART.c: 245: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 2);
  8526  1F1D  0024               	movlb	4	; select bank4
  8527  1F1E  082E               	movf	UARTchar@data^(0+512),w
  8528  1F1F  00AA               	movwf	??_UARTchar^(0+512)
  8529  1F20  01AB               	clrf	(??_UARTchar^(0+512)+1)
  8530  1F21  082A               	movf	??_UARTchar^(0+512),w
  8531  1F22  00A0               	movwf	CheckSum_byte@This^(0+512)
  8532  1F23  082B               	movf	(??_UARTchar+1)^(0+512),w
  8533  1F24  00A1               	movwf	(CheckSum_byte@This+1)^(0+512)
  8534  1F25  3002               	movlw	2
  8535  1F26                     L6:	
  8536  1F26  00AC               	movwf	(??_UARTchar+2)^(0+512)
  8537  1F27  082C               	movf	(??_UARTchar+2)^(0+512),w
  8538  1F28  00A2               	movwf	CheckSum_byte@Odd_Even^(0+512)
  8539  1F29  319B  235B  319F   	fcall	_CheckSum_byte
  8540  1F2C  0024               	movlb	4	; select bank4
  8541  1F2D  00AD               	movwf	(??_UARTchar+3)^(0+512)
  8542  1F2E  0023               	movlb	3	; select bank3
  8543  1F2F  081E               	movf	30,w	;volatile
  8544  1F30  0024               	movlb	4	; select bank4
  8545  1F31  062D               	xorwf	(??_UARTchar+3)^(0+512),w
  8546  1F32  39FE               	andlw	-2
  8547  1F33  062D               	xorwf	(??_UARTchar+3)^(0+512),w
  8548  1F34  2F51               	goto	L5
  8549  1F35                     l406:	
  8550                           ;UART.c: 247: case 3:
  8551                           
  8552                           ;UART.c: 246: break;
  8553                           
  8554                           
  8555                           ;UART.c: 248: TXSTAbits.TX9D = 1;
  8556  1F35  0023               	movlb	3	; select bank3
  8557  1F36  141E               	bsf	30,0	;volatile
  8558                           
  8559                           ;UART.c: 249: break;
  8560  1F37  2F53               	goto	l409
  8561  1F38                     l407:	
  8562                           ;UART.c: 250: default:
  8563                           
  8564                           
  8565                           ;UART.c: 251: TXSTAbits.TX9D = 0;
  8566  1F38  0023               	movlb	3	; select bank3
  8567  1F39  101E               	bcf	30,0	;volatile
  8568                           
  8569                           ;UART.c: 253: }
  8570                           
  8571                           ;UART.c: 252: break;
  8572  1F3A  2F53               	goto	l409
  8573  1F3B                     l6184:	
  8574  1F3B  0024               	movlb	4	; select bank4
  8575  1F3C  0860               	movf	_PARITY^(0+512),w
  8576                           
  8577                           ; Switch size 1, requested type "space"
  8578                           ; Number of cases is 3, Range of values is 1 to 3
  8579                           ; switch strategies available:
  8580                           ; Name         Instructions Cycles
  8581                           ; simple_byte           10     6 (average)
  8582                           ; direct_byte           15     9 (fixed)
  8583                           ; jumptable            263     9 (fixed)
  8584                           ;	Chosen strategy is simple_byte
  8585  1F3D  3A01               	xorlw	1	; case 1
  8586  1F3E  1903               	skipnz
  8587  1F3F  2F14               	goto	l6178
  8588  1F40  3A03               	xorlw	3	; case 2
  8589  1F41  1903               	skipnz
  8590  1F42  2F1D               	goto	l6180
  8591  1F43  3A01               	xorlw	1	; case 3
  8592  1F44  1903               	skipnz
  8593  1F45  2F35               	goto	l406
  8594  1F46  2F38               	goto	l407
  8595                           
  8596                           ;UART.c: 254: }
  8597  1F47  2F53               	goto	l409
  8598  1F48                     l6186:	
  8599                           
  8600                           ;UART.c: 255: else
  8601                           ;UART.c: 256: {
  8602                           ;UART.c: 257: TXSTAbits.TX9D = (NinethBit_override_data & 0x01);
  8603  1F48  3001               	movlw	1
  8604  1F49  0529               	andwf	UARTchar@NinethBit_override_data^(0+512),w
  8605  1F4A  00AA               	movwf	??_UARTchar^(0+512)
  8606  1F4B  0023               	movlb	3	; select bank3
  8607  1F4C  081E               	movf	30,w	;volatile
  8608  1F4D  0024               	movlb	4	; select bank4
  8609  1F4E  062A               	xorwf	??_UARTchar^(0+512),w
  8610  1F4F  39FE               	andlw	-2
  8611  1F50  062A               	xorwf	??_UARTchar^(0+512),w
  8612  1F51                     L5:	
  8613  1F51  0023               	movlb	3	; select bank3
  8614  1F52  009E               	movwf	30	;volatile
  8615  1F53                     l409:	
  8616                           ;UART.c: 258: }
  8617                           ;UART.c: 259: }
  8618                           ;UART.c: 275: while(!TXSTAbits.TRMT);
  8619                           
  8620  1F53  0023               	movlb	3	; select bank3
  8621  1F54  1C9E               	btfss	30,1	;volatile
  8622  1F55  2F53               	goto	l409
  8623                           
  8624                           ;UART.c: 276: TXREG = data;
  8625  1F56  0024               	movlb	4	; select bank4
  8626  1F57  082E               	movf	UARTchar@data^(0+512),w
  8627  1F58  0023               	movlb	3	; select bank3
  8628  1F59  009A               	movwf	26	;volatile
  8629  1F5A  0008               	return
  8630  1F5B                     __end_of_UARTchar:	
  8631                           
  8632                           	psect	text23
  8633  1B5B                     __ptext23:	
  8634 ;; *************** function _CheckSum_byte *****************
  8635 ;; Defined at:
  8636 ;;		line 71 in file "MISC.c"
  8637 ;; Parameters:    Size  Location     Type
  8638 ;;  This            2    0[BANK4 ] unsigned int 
  8639 ;;  Odd_Even        1    2[BANK4 ] unsigned char 
  8640 ;; Auto vars:     Size  Location     Type
  8641 ;;  ThisTemp        2    4[BANK4 ] unsigned int 
  8642 ;;  i               1    7[BANK4 ] unsigned char 
  8643 ;;  Parity          1    6[BANK4 ] unsigned char 
  8644 ;; Return value:  Size  Location     Type
  8645 ;;                  1    wreg      unsigned char 
  8646 ;; Registers used:
  8647 ;;		wreg, status,2, status,0
  8648 ;; Tracked objects:
  8649 ;;		On entry : 0/0
  8650 ;;		On exit  : 0/0
  8651 ;;		Unchanged: 0/0
  8652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8653 ;;      Params:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  8654 ;;      Locals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8655 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  8656 ;;      Totals:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  8657 ;;Total ram usage:        8 bytes
  8658 ;; Hardware stack levels used:    1
  8659 ;; Hardware stack levels required when called:    7
  8660 ;; This function calls:
  8661 ;;		Nothing
  8662 ;; This function is called by:
  8663 ;;		_UARTchar
  8664 ;;		_Send_PS2
  8665 ;; This function uses a non-reentrant model
  8666 ;;
  8667                           
  8668                           
  8669                           ;psect for function _CheckSum_byte
  8670  1B5B                     _CheckSum_byte:	
  8671                           
  8672                           ;MISC.c: 73: char i = 0;
  8673                           
  8674                           ;incstack = 0
  8675                           ; Regs used in _CheckSum_byte: [wreg+status,2+status,0]
  8676  1B5B  0024               	movlb	4	; select bank4
  8677  1B5C  01A7               	clrf	CheckSum_byte@i^(0+512)
  8678                           
  8679                           ;MISC.c: 74: unsigned char Parity = 0;
  8680  1B5D  01A6               	clrf	CheckSum_byte@Parity^(0+512)
  8681                           
  8682                           ;MISC.c: 75: unsigned int ThisTemp = This;
  8683  1B5E  0821               	movf	(CheckSum_byte@This+1)^(0+512),w
  8684  1B5F  01A5               	clrf	(CheckSum_byte@ThisTemp+1)^(0+512)
  8685  1B60  07A5               	addwf	(CheckSum_byte@ThisTemp+1)^(0+512),f
  8686  1B61  0820               	movf	CheckSum_byte@This^(0+512),w
  8687  1B62  01A4               	clrf	CheckSum_byte@ThisTemp^(0+512)
  8688  1B63  07A4               	addwf	CheckSum_byte@ThisTemp^(0+512),f
  8689                           
  8690                           ;MISC.c: 77: for (i =0; i<8; i++)
  8691  1B64  01A7               	clrf	CheckSum_byte@i^(0+512)
  8692  1B65  3008               	movlw	8
  8693  1B66  0227               	subwf	CheckSum_byte@i^(0+512),w
  8694  1B67  1803               	btfsc	3,0
  8695  1B68  2B7C               	goto	l6070
  8696  1B69                     l267:	
  8697                           
  8698                           ;MISC.c: 78: {
  8699                           ;MISC.c: 79: if((ThisTemp & 0x01) == 1)
  8700  1B69  1C24               	btfss	CheckSum_byte@ThisTemp^(0+512),0
  8701  1B6A  2B6F               	goto	l269
  8702                           
  8703                           ;MISC.c: 80: {
  8704                           ;MISC.c: 81: Parity++;
  8705  1B6B  3001               	movlw	1
  8706  1B6C  00A3               	movwf	??_CheckSum_byte^(0+512)
  8707  1B6D  0823               	movf	??_CheckSum_byte^(0+512),w
  8708  1B6E  07A6               	addwf	CheckSum_byte@Parity^(0+512),f
  8709  1B6F                     l269:	
  8710                           
  8711                           ;MISC.c: 82: }
  8712                           ;MISC.c: 83: ThisTemp >>= 1;
  8713  1B6F  3001               	movlw	1
  8714  1B70                     u7605:	
  8715  1B70  36A5               	lsrf	(CheckSum_byte@ThisTemp+1)^(0+512),f
  8716  1B71  0CA4               	rrf	CheckSum_byte@ThisTemp^(0+512),f
  8717  1B72  0B89               	decfsz	9,f
  8718  1B73  2B70               	goto	u7605
  8719  1B74  3001               	movlw	1
  8720  1B75  00A3               	movwf	??_CheckSum_byte^(0+512)
  8721  1B76  0823               	movf	??_CheckSum_byte^(0+512),w
  8722  1B77  07A7               	addwf	CheckSum_byte@i^(0+512),f
  8723  1B78  3008               	movlw	8
  8724  1B79  0227               	subwf	CheckSum_byte@i^(0+512),w
  8725  1B7A  1C03               	skipc
  8726  1B7B  2B69               	goto	l267
  8727  1B7C                     l6070:	
  8728                           
  8729                           ;MISC.c: 84: }
  8730                           ;MISC.c: 85: if(Odd_Even == 3)
  8731  1B7C  0822               	movf	CheckSum_byte@Odd_Even^(0+512),w
  8732  1B7D  3A03               	xorlw	3
  8733  1B7E  1D03               	skipz
  8734  1B7F  2B86               	goto	l270
  8735                           
  8736                           ;MISC.c: 86: {
  8737                           ;MISC.c: 87: if(Parity % 2 == 0)
  8738  1B80  1826               	btfsc	CheckSum_byte@Parity^(0+512),0
  8739  1B81  2B84               	goto	l6078
  8740                           
  8741                           ;MISC.c: 88: {
  8742                           ;MISC.c: 89: return 1;
  8743  1B82  3001               	movlw	1
  8744  1B83  0008               	return
  8745  1B84                     l6078:	
  8746                           
  8747                           ;MISC.c: 90: }
  8748                           ;MISC.c: 91: return 0;
  8749  1B84  3000               	movlw	0
  8750                           
  8751                           ;MISC.c: 92: }
  8752  1B85  0008               	return
  8753  1B86                     l270:	
  8754                           
  8755                           ;MISC.c: 93: else
  8756                           ;MISC.c: 94: {
  8757                           ;MISC.c: 95: if(Parity % 2 == 1)
  8758  1B86  1C26               	btfss	CheckSum_byte@Parity^(0+512),0
  8759  1B87  2B8A               	goto	l6088
  8760                           
  8761                           ;MISC.c: 96: {
  8762                           ;MISC.c: 97: return 1;
  8763  1B88  3001               	movlw	1
  8764  1B89  0008               	return
  8765  1B8A                     l6088:	
  8766                           
  8767                           ;MISC.c: 98: }
  8768                           ;MISC.c: 99: return 0;
  8769  1B8A  3000               	movlw	0
  8770  1B8B  0008               	return
  8771  1B8C                     __end_of_CheckSum_byte:	
  8772                           
  8773                           	psect	text24
  8774  1124                     __ptext24:	
  8775 ;; *************** function _ReadBaud *****************
  8776 ;; Defined at:
  8777 ;;		line 187 in file "FLASH.c"
  8778 ;; Parameters:    Size  Location     Type
  8779 ;;  row             2   18[BANK4 ] unsigned int 
  8780 ;;  column          1   20[BANK4 ] unsigned char 
  8781 ;; Auto vars:     Size  Location     Type
  8782 ;;  temp            4   30[BANK4 ] unsigned long 
  8783 ;; Return value:  Size  Location     Type
  8784 ;;                  4   18[BANK4 ] unsigned long 
  8785 ;; Registers used:
  8786 ;;		wreg, status,2, status,0, pclath, cstack
  8787 ;; Tracked objects:
  8788 ;;		On entry : 0/0
  8789 ;;		On exit  : 0/0
  8790 ;;		Unchanged: 0/0
  8791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8792 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8793 ;;      Locals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8794 ;;      Temps:          0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  8795 ;;      Totals:         0       0       0       0       0      16       0       0       0       0       0       0       
      +0       0
  8796 ;;Total ram usage:       16 bytes
  8797 ;; Hardware stack levels used:    1
  8798 ;; Hardware stack levels required when called:    9
  8799 ;; This function calls:
  8800 ;;		_ReadFlash_4Byte
  8801 ;; This function is called by:
  8802 ;;		_Init_System
  8803 ;; This function uses a non-reentrant model
  8804 ;;
  8805                           
  8806                           
  8807                           ;psect for function _ReadBaud
  8808  1124                     _ReadBaud:	
  8809                           
  8810                           ;FLASH.c: 189: unsigned long temp;
  8811                           ;FLASH.c: 190: temp =(ReadFlash_4Byte(row, column));
  8812                           
  8813                           ;incstack = 0
  8814                           ; Regs used in _ReadBaud: [wreg+status,2+status,0+pclath+cstack]
  8815  1124  0024               	movlb	4	; select bank4
  8816  1125  0833               	movf	(ReadBaud@row+1)^(0+512),w
  8817  1126  01A6               	clrf	(ReadFlash_4Byte@row+1)^(0+512)
  8818  1127  07A6               	addwf	(ReadFlash_4Byte@row+1)^(0+512),f
  8819  1128  0832               	movf	ReadBaud@row^(0+512),w
  8820  1129  01A5               	clrf	ReadFlash_4Byte@row^(0+512)
  8821  112A  07A5               	addwf	ReadFlash_4Byte@row^(0+512),f
  8822  112B  0834               	movf	ReadBaud@column^(0+512),w
  8823  112C  00B6               	movwf	??_ReadBaud^(0+512)
  8824  112D  0836               	movf	??_ReadBaud^(0+512),w
  8825  112E  00A7               	movwf	ReadFlash_4Byte@column^(0+512)
  8826  112F  319E  26B9  3191   	fcall	_ReadFlash_4Byte
  8827  1132  0024               	movlb	4	; select bank4
  8828  1133  0828               	movf	(?_ReadFlash_4Byte+3)^(0+512),w
  8829  1134  00C1               	movwf	(ReadBaud@temp+3)^(0+512)
  8830  1135  0827               	movf	(?_ReadFlash_4Byte+2)^(0+512),w
  8831  1136  00C0               	movwf	(ReadBaud@temp+2)^(0+512)
  8832  1137  0826               	movf	(?_ReadFlash_4Byte+1)^(0+512),w
  8833  1138  00BF               	movwf	(ReadBaud@temp+1)^(0+512)
  8834  1139  0825               	movf	?_ReadFlash_4Byte^(0+512),w
  8835  113A  00BE               	movwf	ReadBaud@temp^(0+512)
  8836                           
  8837                           ;FLASH.c: 191: MEM[1] = (unsigned int)(temp & 0x0003FFF);
  8838  113B  30FF               	movlw	255
  8839  113C  053E               	andwf	ReadBaud@temp^(0+512),w
  8840  113D  0021               	movlb	1	; select bank1
  8841  113E  00E3               	movwf	(_MEM^(0+128)+2)
  8842  113F  303F               	movlw	63
  8843  1140  0024               	movlb	4	; select bank4
  8844  1141  053F               	andwf	(ReadBaud@temp+1)^(0+512),w
  8845  1142  0021               	movlb	1	; select bank1
  8846  1143  00E4               	movwf	((_MEM+1)^(0+128)+2)
  8847                           
  8848                           ;FLASH.c: 192: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
  8849  1144  0024               	movlb	4	; select bank4
  8850  1145  083E               	movf	ReadBaud@temp^(0+512),w
  8851  1146  00B6               	movwf	??_ReadBaud^(0+512)
  8852  1147  083F               	movf	(ReadBaud@temp+1)^(0+512),w
  8853  1148  00B7               	movwf	(??_ReadBaud^(0+512)+1)
  8854  1149  0840               	movf	(ReadBaud@temp+2)^(0+512),w
  8855  114A  00B8               	movwf	(??_ReadBaud^(0+512)+2)
  8856  114B  0841               	movf	(ReadBaud@temp+3)^(0+512),w
  8857  114C  00B9               	movwf	(??_ReadBaud^(0+512)+3)
  8858  114D  300E               	movlw	14
  8859  114E                     u8255:	
  8860  114E  36B9               	lsrf	(??_ReadBaud^(0+512)+3),f
  8861  114F  0CB8               	rrf	(??_ReadBaud^(0+512)+2),f
  8862  1150  0CB7               	rrf	(??_ReadBaud^(0+512)+1),f
  8863  1151  0CB6               	rrf	??_ReadBaud^(0+512),f
  8864  1152  0B89               	decfsz	9,f
  8865  1153  294E               	goto	u8255
  8866  1154  30FF               	movlw	255
  8867  1155  0536               	andwf	??_ReadBaud^(0+512),w
  8868  1156  0021               	movlb	1	; select bank1
  8869  1157  00E1               	movwf	_MEM^(0+128)
  8870  1158  303F               	movlw	63
  8871  1159  0024               	movlb	4	; select bank4
  8872  115A  0537               	andwf	(??_ReadBaud+1)^(0+512),w
  8873  115B  0021               	movlb	1	; select bank1
  8874  115C  00E2               	movwf	(_MEM+1)^(0+128)
  8875                           
  8876                           ;FLASH.c: 193: return (((unsigned long)MEM[0] << 12) + (unsigned long)MEM[1]);
  8877  115D  0863               	movf	(_MEM^(0+128)+2),w
  8878  115E  0024               	movlb	4	; select bank4
  8879  115F  00B6               	movwf	??_ReadBaud^(0+512)
  8880  1160  0021               	movlb	1	; select bank1
  8881  1161  0864               	movf	((_MEM+1)^(0+128)+2),w
  8882  1162  0024               	movlb	4	; select bank4
  8883  1163  00B7               	movwf	(??_ReadBaud^(0+512)+1)
  8884  1164  01B8               	clrf	(??_ReadBaud^(0+512)+2)
  8885  1165  01B9               	clrf	(??_ReadBaud^(0+512)+3)
  8886  1166  0021               	movlb	1	; select bank1
  8887  1167  0861               	movf	_MEM^(0+128),w
  8888  1168  0024               	movlb	4	; select bank4
  8889  1169  00BA               	movwf	(??_ReadBaud+4)^(0+512)
  8890  116A  0021               	movlb	1	; select bank1
  8891  116B  0862               	movf	(_MEM+1)^(0+128),w
  8892  116C  0024               	movlb	4	; select bank4
  8893  116D  00BB               	movwf	((??_ReadBaud+4)^(0+512)+1)
  8894  116E  01BC               	clrf	((??_ReadBaud+4)^(0+512)+2)
  8895  116F  01BD               	clrf	((??_ReadBaud+4)^(0+512)+3)
  8896  1170  300C               	movlw	12
  8897  1171                     u8265:	
  8898  1171  35BA               	lslf	(??_ReadBaud+4)^(0+512),f
  8899  1172  0DBB               	rlf	((??_ReadBaud+4)^(0+512)+1),f
  8900  1173  0DBC               	rlf	((??_ReadBaud+4)^(0+512)+2),f
  8901  1174  0DBD               	rlf	((??_ReadBaud+4)^(0+512)+3),f
  8902  1175  0B89               	decfsz	9,f
  8903  1176  2971               	goto	u8265
  8904  1177  083A               	movf	(??_ReadBaud+4)^(0+512),w
  8905  1178  07B6               	addwf	??_ReadBaud^(0+512),f
  8906  1179  083B               	movf	(??_ReadBaud+5)^(0+512),w
  8907  117A  3DB7               	addwfc	(??_ReadBaud^(0+512)+1),f
  8908  117B  083C               	movf	(??_ReadBaud+6)^(0+512),w
  8909  117C  3DB8               	addwfc	(??_ReadBaud^(0+512)+2),f
  8910  117D  083D               	movf	(??_ReadBaud+7)^(0+512),w
  8911  117E  3DB9               	addwfc	(??_ReadBaud^(0+512)+3),f
  8912  117F  0839               	movf	(??_ReadBaud+3)^(0+512),w
  8913  1180  00B5               	movwf	(?_ReadBaud+3)^(0+512)
  8914  1181  0838               	movf	(??_ReadBaud+2)^(0+512),w
  8915  1182  00B4               	movwf	(?_ReadBaud+2)^(0+512)
  8916  1183  0837               	movf	(??_ReadBaud+1)^(0+512),w
  8917  1184  00B3               	movwf	(?_ReadBaud+1)^(0+512)
  8918  1185  0836               	movf	??_ReadBaud^(0+512),w
  8919  1186  00B2               	movwf	?_ReadBaud^(0+512)
  8920  1187  0008               	return
  8921  1188                     __end_of_ReadBaud:	
  8922                           
  8923                           	psect	text25
  8924  1EB9                     __ptext25:	
  8925 ;; *************** function _ReadFlash_4Byte *****************
  8926 ;; Defined at:
  8927 ;;		line 62 in file "FLASH.c"
  8928 ;; Parameters:    Size  Location     Type
  8929 ;;  row             2    5[BANK4 ] unsigned int 
  8930 ;;  column          1    7[BANK4 ] unsigned char 
  8931 ;; Auto vars:     Size  Location     Type
  8932 ;;  temp            4   14[BANK4 ] unsigned long 
  8933 ;; Return value:  Size  Location     Type
  8934 ;;                  4    5[BANK4 ] unsigned long 
  8935 ;; Registers used:
  8936 ;;		wreg, status,2, status,0, pclath, cstack
  8937 ;; Tracked objects:
  8938 ;;		On entry : 0/0
  8939 ;;		On exit  : 0/0
  8940 ;;		Unchanged: 0/0
  8941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8942 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8943 ;;      Locals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  8944 ;;      Temps:          0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  8945 ;;      Totals:         0       0       0       0       0      13       0       0       0       0       0       0       
      +0       0
  8946 ;;Total ram usage:       13 bytes
  8947 ;; Hardware stack levels used:    1
  8948 ;; Hardware stack levels required when called:    8
  8949 ;; This function calls:
  8950 ;;		_ReadFlash_2Byte
  8951 ;; This function is called by:
  8952 ;;		_ReadBaud
  8953 ;; This function uses a non-reentrant model
  8954 ;;
  8955                           
  8956                           
  8957                           ;psect for function _ReadFlash_4Byte
  8958  1EB9                     _ReadFlash_4Byte:	
  8959                           
  8960                           ;FLASH.c: 64: unsigned long temp =0;
  8961                           
  8962                           ;incstack = 0
  8963                           ; Regs used in _ReadFlash_4Byte: [wreg+status,2+status,0+pclath+cstack]
  8964  1EB9  3000               	movlw	0
  8965  1EBA  0024               	movlb	4	; select bank4
  8966  1EBB  00B1               	movwf	(ReadFlash_4Byte@temp+3)^(0+512)
  8967  1EBC  3000               	movlw	0
  8968  1EBD  00B0               	movwf	(ReadFlash_4Byte@temp+2)^(0+512)
  8969  1EBE  3000               	movlw	0
  8970  1EBF  00AF               	movwf	(ReadFlash_4Byte@temp+1)^(0+512)
  8971  1EC0  3000               	movlw	0
  8972  1EC1  00AE               	movwf	ReadFlash_4Byte@temp^(0+512)
  8973                           
  8974                           ;FLASH.c: 65: temp = ((unsigned long)ReadFlash_2Byte(row, column) << 16);
  8975  1EC2  0826               	movf	(ReadFlash_4Byte@row+1)^(0+512),w
  8976  1EC3  01A1               	clrf	(ReadFlash_2Byte@row+1)^(0+512)
  8977  1EC4  07A1               	addwf	(ReadFlash_2Byte@row+1)^(0+512),f
  8978  1EC5  0825               	movf	ReadFlash_4Byte@row^(0+512),w
  8979  1EC6  01A0               	clrf	ReadFlash_2Byte@row^(0+512)
  8980  1EC7  07A0               	addwf	ReadFlash_2Byte@row^(0+512),f
  8981  1EC8  0827               	movf	ReadFlash_4Byte@column^(0+512),w
  8982  1EC9  00A9               	movwf	??_ReadFlash_4Byte^(0+512)
  8983  1ECA  0829               	movf	??_ReadFlash_4Byte^(0+512),w
  8984  1ECB  00A2               	movwf	ReadFlash_2Byte@column^(0+512)
  8985  1ECC  319B  23BE  319E   	fcall	_ReadFlash_2Byte
  8986  1ECF  0024               	movlb	4	; select bank4
  8987  1ED0  0820               	movf	?_ReadFlash_2Byte^(0+512),w
  8988  1ED1  00AA               	movwf	(??_ReadFlash_4Byte+1)^(0+512)
  8989  1ED2  0821               	movf	(?_ReadFlash_2Byte+1)^(0+512),w
  8990  1ED3  00AB               	movwf	((??_ReadFlash_4Byte+1)^(0+512)+1)
  8991  1ED4  01AC               	clrf	((??_ReadFlash_4Byte+1)^(0+512)+2)
  8992  1ED5  01AD               	clrf	((??_ReadFlash_4Byte+1)^(0+512)+3)
  8993  1ED6  3010               	movlw	16
  8994  1ED7                     u8035:	
  8995  1ED7  35AA               	lslf	(??_ReadFlash_4Byte+1)^(0+512),f
  8996  1ED8  0DAB               	rlf	((??_ReadFlash_4Byte+1)^(0+512)+1),f
  8997  1ED9  0DAC               	rlf	((??_ReadFlash_4Byte+1)^(0+512)+2),f
  8998  1EDA  0DAD               	rlf	((??_ReadFlash_4Byte+1)^(0+512)+3),f
  8999  1EDB  0B89               	decfsz	9,f
  9000  1EDC  2ED7               	goto	u8035
  9001  1EDD  082D               	movf	(??_ReadFlash_4Byte+4)^(0+512),w
  9002  1EDE  00B1               	movwf	(ReadFlash_4Byte@temp+3)^(0+512)
  9003  1EDF  082C               	movf	(??_ReadFlash_4Byte+3)^(0+512),w
  9004  1EE0  00B0               	movwf	(ReadFlash_4Byte@temp+2)^(0+512)
  9005  1EE1  082B               	movf	(??_ReadFlash_4Byte+2)^(0+512),w
  9006  1EE2  00AF               	movwf	(ReadFlash_4Byte@temp+1)^(0+512)
  9007  1EE3  082A               	movf	(??_ReadFlash_4Byte+1)^(0+512),w
  9008  1EE4  00AE               	movwf	ReadFlash_4Byte@temp^(0+512)
  9009                           
  9010                           ;FLASH.c: 66: temp |= ((unsigned long)ReadFlash_2Byte(row, (column + 1)));
  9011  1EE5  0826               	movf	(ReadFlash_4Byte@row+1)^(0+512),w
  9012  1EE6  01A1               	clrf	(ReadFlash_2Byte@row+1)^(0+512)
  9013  1EE7  07A1               	addwf	(ReadFlash_2Byte@row+1)^(0+512),f
  9014  1EE8  0825               	movf	ReadFlash_4Byte@row^(0+512),w
  9015  1EE9  01A0               	clrf	ReadFlash_2Byte@row^(0+512)
  9016  1EEA  07A0               	addwf	ReadFlash_2Byte@row^(0+512),f
  9017  1EEB  0827               	movf	ReadFlash_4Byte@column^(0+512),w
  9018  1EEC  3E01               	addlw	1
  9019  1EED  00A9               	movwf	??_ReadFlash_4Byte^(0+512)
  9020  1EEE  0829               	movf	??_ReadFlash_4Byte^(0+512),w
  9021  1EEF  00A2               	movwf	ReadFlash_2Byte@column^(0+512)
  9022  1EF0  319B  23BE         	fcall	_ReadFlash_2Byte
  9023  1EF2  0024               	movlb	4	; select bank4
  9024  1EF3  0820               	movf	?_ReadFlash_2Byte^(0+512),w
  9025  1EF4  00AA               	movwf	(??_ReadFlash_4Byte+1)^(0+512)
  9026  1EF5  0821               	movf	(?_ReadFlash_2Byte+1)^(0+512),w
  9027  1EF6  00AB               	movwf	((??_ReadFlash_4Byte+1)^(0+512)+1)
  9028  1EF7  01AC               	clrf	((??_ReadFlash_4Byte+1)^(0+512)+2)
  9029  1EF8  01AD               	clrf	((??_ReadFlash_4Byte+1)^(0+512)+3)
  9030  1EF9  082A               	movf	(??_ReadFlash_4Byte+1)^(0+512),w
  9031  1EFA  04AE               	iorwf	ReadFlash_4Byte@temp^(0+512),f
  9032  1EFB  082B               	movf	(??_ReadFlash_4Byte+2)^(0+512),w
  9033  1EFC  04AF               	iorwf	(ReadFlash_4Byte@temp+1)^(0+512),f
  9034  1EFD  082C               	movf	(??_ReadFlash_4Byte+3)^(0+512),w
  9035  1EFE  04B0               	iorwf	(ReadFlash_4Byte@temp+2)^(0+512),f
  9036  1EFF  082D               	movf	(??_ReadFlash_4Byte+4)^(0+512),w
  9037  1F00  04B1               	iorwf	(ReadFlash_4Byte@temp+3)^(0+512),f
  9038                           
  9039                           ;FLASH.c: 67: return temp;
  9040  1F01  0831               	movf	(ReadFlash_4Byte@temp+3)^(0+512),w
  9041  1F02  00A8               	movwf	(?_ReadFlash_4Byte+3)^(0+512)
  9042  1F03  0830               	movf	(ReadFlash_4Byte@temp+2)^(0+512),w
  9043  1F04  00A7               	movwf	(?_ReadFlash_4Byte+2)^(0+512)
  9044  1F05  082F               	movf	(ReadFlash_4Byte@temp+1)^(0+512),w
  9045  1F06  00A6               	movwf	(?_ReadFlash_4Byte+1)^(0+512)
  9046  1F07  082E               	movf	ReadFlash_4Byte@temp^(0+512),w
  9047  1F08  00A5               	movwf	?_ReadFlash_4Byte^(0+512)
  9048  1F09  0008               	return
  9049  1F0A                     __end_of_ReadFlash_4Byte:	
  9050                           
  9051                           	psect	text26
  9052  1BBE                     __ptext26:	
  9053 ;; *************** function _ReadFlash_2Byte *****************
  9054 ;; Defined at:
  9055 ;;		line 43 in file "FLASH.c"
  9056 ;; Parameters:    Size  Location     Type
  9057 ;;  row             2    0[BANK4 ] unsigned int 
  9058 ;;  column          1    2[BANK4 ] unsigned char 
  9059 ;; Auto vars:     Size  Location     Type
  9060 ;;		None
  9061 ;; Return value:  Size  Location     Type
  9062 ;;                  2    0[BANK4 ] unsigned int 
  9063 ;; Registers used:
  9064 ;;		wreg, status,2, status,0
  9065 ;; Tracked objects:
  9066 ;;		On entry : 0/0
  9067 ;;		On exit  : 0/0
  9068 ;;		Unchanged: 0/0
  9069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9070 ;;      Params:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  9071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9072 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  9073 ;;      Totals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  9074 ;;Total ram usage:        5 bytes
  9075 ;; Hardware stack levels used:    1
  9076 ;; Hardware stack levels required when called:    7
  9077 ;; This function calls:
  9078 ;;		Nothing
  9079 ;; This function is called by:
  9080 ;;		_ReadFlash_4Byte
  9081 ;; This function uses a non-reentrant model
  9082 ;;
  9083                           
  9084                           
  9085                           ;psect for function _ReadFlash_2Byte
  9086  1BBE                     _ReadFlash_2Byte:	
  9087                           
  9088                           ;FLASH.c: 45: PMCON1 &= ~0b01000000;
  9089                           
  9090                           ;incstack = 0
  9091                           ; Regs used in _ReadFlash_2Byte: [wreg+status,2+status,0]
  9092  1BBE  30BF               	movlw	191
  9093  1BBF  0024               	movlb	4	; select bank4
  9094  1BC0  00A3               	movwf	??_ReadFlash_2Byte^(0+512)
  9095  1BC1  0823               	movf	??_ReadFlash_2Byte^(0+512),w
  9096  1BC2  0023               	movlb	3	; select bank3
  9097  1BC3  0595               	andwf	21,f	;volatile
  9098                           
  9099                           ;FLASH.c: 46: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
  9100  1BC4  0024               	movlb	4	; select bank4
  9101  1BC5  0821               	movf	(ReadFlash_2Byte@row+1)^(0+512),w
  9102  1BC6  00A4               	movwf	(??_ReadFlash_2Byte^(0+512)+1)
  9103  1BC7  0820               	movf	ReadFlash_2Byte@row^(0+512),w
  9104  1BC8  00A3               	movwf	??_ReadFlash_2Byte^(0+512)
  9105  1BC9  36A4               	lsrf	(??_ReadFlash_2Byte^(0+512)+1),f
  9106  1BCA  0CA3               	rrf	??_ReadFlash_2Byte^(0+512),f
  9107  1BCB  36A4               	lsrf	(??_ReadFlash_2Byte^(0+512)+1),f
  9108  1BCC  0CA3               	rrf	??_ReadFlash_2Byte^(0+512),f
  9109  1BCD  36A4               	lsrf	(??_ReadFlash_2Byte^(0+512)+1),f
  9110  1BCE  0CA3               	rrf	??_ReadFlash_2Byte^(0+512),f
  9111  1BCF  0823               	movf	??_ReadFlash_2Byte^(0+512),w
  9112  1BD0  397F               	andlw	127
  9113  1BD1  0023               	movlb	3	; select bank3
  9114  1BD2  0092               	movwf	18	;volatile
  9115                           
  9116                           ;FLASH.c: 47: PMADRL = (unsigned char)(((row & 0x007) << 5) + column);
  9117  1BD3  0024               	movlb	4	; select bank4
  9118  1BD4  0820               	movf	ReadFlash_2Byte@row^(0+512),w
  9119  1BD5  3907               	andlw	7
  9120  1BD6  00A3               	movwf	??_ReadFlash_2Byte^(0+512)
  9121  1BD7  3004               	movlw	4
  9122  1BD8                     u7675:	
  9123  1BD8  35A3               	lslf	??_ReadFlash_2Byte^(0+512),f
  9124  1BD9  3EFF               	addlw	-1
  9125  1BDA  1D03               	skipz
  9126  1BDB  2BD8               	goto	u7675
  9127  1BDC  3523               	lslf	??_ReadFlash_2Byte^(0+512),w
  9128  1BDD  0722               	addwf	ReadFlash_2Byte@column^(0+512),w
  9129  1BDE  0023               	movlb	3	; select bank3
  9130  1BDF  0091               	movwf	17	;volatile
  9131                           
  9132                           ;FLASH.c: 48: PMCON1 |= 0b00000001;
  9133  1BE0  1415               	bsf	21,0	;volatile
  9134  1BE1                     l913:	
  9135                           ;FLASH.c: 49: while(PMCON1 & 0b00000001);
  9136                           
  9137  1BE1  1815               	btfsc	21,0	;volatile
  9138  1BE2  2BE1               	goto	l913
  9139                           
  9140                           ;FLASH.c: 50: __nop();
  9141  1BE3  0000               	nop
  9142                           
  9143                           ;FLASH.c: 51: __nop();
  9144  1BE4  0000               	nop
  9145                           
  9146                           ;FLASH.c: 52: return (PMDATL | (PMDATH << 8));
  9147  1BE5  0023               	movlb	3	; select bank3
  9148  1BE6  0814               	movf	20,w	;volatile
  9149  1BE7  0024               	movlb	4	; select bank4
  9150  1BE8  01A1               	clrf	(?_ReadFlash_2Byte+1)^(0+512)
  9151  1BE9  07A1               	addwf	(?_ReadFlash_2Byte+1)^(0+512),f
  9152  1BEA  0023               	movlb	3	; select bank3
  9153  1BEB  0813               	movf	19,w	;volatile
  9154  1BEC  0024               	movlb	4	; select bank4
  9155  1BED  01A0               	clrf	?_ReadFlash_2Byte^(0+512)
  9156  1BEE  07A0               	addwf	?_ReadFlash_2Byte^(0+512),f
  9157  1BEF  0008               	return
  9158  1BF0                     __end_of_ReadFlash_2Byte:	
  9159                           
  9160                           	psect	text27
  9161  1443                     __ptext27:	
  9162 ;; *************** function _InitUART *****************
  9163 ;; Defined at:
  9164 ;;		line 75 in file "UART.c"
  9165 ;; Parameters:    Size  Location     Type
  9166 ;;  Baud            4   14[BANK4 ] unsigned long 
  9167 ;;  parity          1   18[BANK4 ] unsigned char 
  9168 ;; Auto vars:     Size  Location     Type
  9169 ;;  temp            4   31[BANK4 ] unsigned long 
  9170 ;;  spbrg           2   27[BANK4 ] unsigned int 
  9171 ;;  config          1   30[BANK4 ] unsigned char 
  9172 ;;  baudconfig      1   29[BANK4 ] unsigned char 
  9173 ;; Return value:  Size  Location     Type
  9174 ;;		None               void
  9175 ;; Registers used:
  9176 ;;		wreg, status,2, status,0, pclath, cstack
  9177 ;; Tracked objects:
  9178 ;;		On entry : 0/0
  9179 ;;		On exit  : 0/0
  9180 ;;		Unchanged: 0/0
  9181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9182 ;;      Params:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  9183 ;;      Locals:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  9184 ;;      Temps:          0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  9185 ;;      Totals:         0       0       0       0       0      21       0       0       0       0       0       0       
      +0       0
  9186 ;;Total ram usage:       21 bytes
  9187 ;; Hardware stack levels used:    1
  9188 ;; Hardware stack levels required when called:    8
  9189 ;; This function calls:
  9190 ;;		_CloseUSART
  9191 ;;		_OpenUSART
  9192 ;;		_ReadUSART
  9193 ;;		___lldiv
  9194 ;;		_baudUSART
  9195 ;; This function is called by:
  9196 ;;		_Init_System
  9197 ;; This function uses a non-reentrant model
  9198 ;;
  9199                           
  9200                           
  9201                           ;psect for function _InitUART
  9202  1443                     _InitUART:	
  9203                           
  9204                           ;UART.c: 77: unsigned long temp;
  9205                           ;UART.c: 78: unsigned char config;
  9206                           ;UART.c: 79: unsigned int spbrg;
  9207                           ;UART.c: 80: unsigned char baudconfig;
  9208                           ;UART.c: 90: LATC |= 0b00000100;
  9209                           
  9210                           ;incstack = 0
  9211                           ; Regs used in _InitUART: [wreg+status,2+status,0+pclath+cstack]
  9212  1443  0022               	movlb	2	; select bank2
  9213  1444  150E               	bsf	14,2	;volatile
  9214                           
  9215                           ;UART.c: 91: PPSLOCK =0;
  9216  1445  003C               	movlb	28	; select bank28
  9217  1446  018F               	clrf	15	;volatile
  9218                           
  9219                           ;UART.c: 92: RC2PPS = 0b00000000;
  9220  1447  003D               	movlb	29	; select bank29
  9221  1448  01A2               	clrf	34	;volatile
  9222                           
  9223                           ;UART.c: 93: PPSLOCK =1;
  9224  1449  3001               	movlw	1
  9225  144A  003C               	movlb	28	; select bank28
  9226  144B  008F               	movwf	15	;volatile
  9227                           
  9228                           ;UART.c: 95: CloseUSART();
  9229  144C  3199  211E  3194   	fcall	_CloseUSART
  9230                           
  9231                           ;UART.c: 96: config =0;
  9232  144F  0024               	movlb	4	; select bank4
  9233  1450  01BE               	clrf	InitUART@config^(0+512)
  9234                           
  9235                           ;UART.c: 97: baudconfig =0;
  9236  1451  01BD               	clrf	InitUART@baudconfig^(0+512)
  9237                           
  9238                           ;UART.c: 102: config |= 0b00001000;
  9239  1452  15BE               	bsf	InitUART@config^(0+512),3
  9240                           
  9241                           ;UART.c: 103: config |= 0b00010000;
  9242  1453  163E               	bsf	InitUART@config^(0+512),4
  9243                           
  9244                           ;UART.c: 104: PARITY = parity;
  9245  1454  0832               	movf	InitUART@parity^(0+512),w
  9246  1455  00B3               	movwf	??_InitUART^(0+512)
  9247  1456  0833               	movf	??_InitUART^(0+512),w
  9248  1457  00E0               	movwf	_PARITY^(0+512)
  9249                           
  9250                           ;UART.c: 105: BAUD = Baud;
  9251  1458  0831               	movf	(InitUART@Baud+3)^(0+512),w
  9252  1459  00E4               	movwf	(_BAUD+3)^(0+512)
  9253  145A  0830               	movf	(InitUART@Baud+2)^(0+512),w
  9254  145B  00E3               	movwf	(_BAUD+2)^(0+512)
  9255  145C  082F               	movf	(InitUART@Baud+1)^(0+512),w
  9256  145D  00E2               	movwf	(_BAUD+1)^(0+512)
  9257  145E  082E               	movf	InitUART@Baud^(0+512),w
  9258  145F  00E1               	movwf	_BAUD^(0+512)
  9259                           
  9260                           ;UART.c: 106: if(parity)
  9261  1460  0832               	movf	InitUART@parity^(0+512),w
  9262  1461  1903               	btfsc	3,2
  9263  1462  2C65               	goto	l6444
  9264                           
  9265                           ;UART.c: 107: {
  9266                           ;UART.c: 108: config |= 0b00000010;
  9267  1463  14BE               	bsf	InitUART@config^(0+512),1
  9268                           
  9269                           ;UART.c: 109: }
  9270  1464  2C69               	goto	l6446
  9271  1465                     l6444:	
  9272                           
  9273                           ;UART.c: 110: else
  9274                           ;UART.c: 111: {
  9275                           ;UART.c: 112: config &= ~0b00000010;
  9276  1465  30FD               	movlw	253
  9277  1466  00B3               	movwf	??_InitUART^(0+512)
  9278  1467  0833               	movf	??_InitUART^(0+512),w
  9279  1468  05BE               	andwf	InitUART@config^(0+512),f
  9280  1469                     l6446:	
  9281                           
  9282                           ;UART.c: 113: }
  9283                           ;UART.c: 114: baudconfig |= 0b00001000;
  9284  1469  15BD               	bsf	InitUART@baudconfig^(0+512),3
  9285                           
  9286                           ;UART.c: 117: temp = (32000000L / Baud) - 1;
  9287  146A  0831               	movf	(InitUART@Baud+3)^(0+512),w
  9288  146B  00A3               	movwf	(___lldiv@divisor+3)^(0+512)
  9289  146C  0830               	movf	(InitUART@Baud+2)^(0+512),w
  9290  146D  00A2               	movwf	(___lldiv@divisor+2)^(0+512)
  9291  146E  082F               	movf	(InitUART@Baud+1)^(0+512),w
  9292  146F  00A1               	movwf	(___lldiv@divisor+1)^(0+512)
  9293  1470  082E               	movf	InitUART@Baud^(0+512),w
  9294  1471  00A0               	movwf	___lldiv@divisor^(0+512)
  9295  1472  3001               	movlw	1
  9296  1473  00A7               	movwf	(___lldiv@dividend+3)^(0+512)
  9297  1474  30E8               	movlw	232
  9298  1475  00A6               	movwf	(___lldiv@dividend+2)^(0+512)
  9299  1476  3048               	movlw	72
  9300  1477  00A5               	movwf	(___lldiv@dividend+1)^(0+512)
  9301  1478  3000               	movlw	0
  9302  1479  00A4               	movwf	___lldiv@dividend^(0+512)
  9303  147A  319F  27AD  3194   	fcall	___lldiv
  9304  147D  30FF               	movlw	255
  9305  147E  0024               	movlb	4	; select bank4
  9306  147F  0720               	addwf	?___lldiv^(0+512),w
  9307  1480  00BF               	movwf	InitUART@temp^(0+512)
  9308  1481  30FF               	movlw	255
  9309  1482  3D21               	addwfc	(?___lldiv+1)^(0+512),w
  9310  1483  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9311  1484  30FF               	movlw	255
  9312  1485  3D22               	addwfc	(?___lldiv+2)^(0+512),w
  9313  1486  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9314  1487  30FF               	movlw	255
  9315  1488  3D23               	addwfc	(?___lldiv+3)^(0+512),w
  9316  1489  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9317                           
  9318                           ;UART.c: 118: temp = (temp >> 2) - 1;
  9319  148A  30FF               	movlw	255
  9320  148B  00B3               	movwf	??_InitUART^(0+512)
  9321  148C  30FF               	movlw	255
  9322  148D  00B4               	movwf	(??_InitUART^(0+512)+1)
  9323  148E  30FF               	movlw	255
  9324  148F  00B5               	movwf	(??_InitUART^(0+512)+2)
  9325  1490  30FF               	movlw	255
  9326  1491  00B6               	movwf	(??_InitUART^(0+512)+3)
  9327  1492  083F               	movf	InitUART@temp^(0+512),w
  9328  1493  00B7               	movwf	(??_InitUART+4)^(0+512)
  9329  1494  0840               	movf	(InitUART@temp+1)^(0+512),w
  9330  1495  00B8               	movwf	((??_InitUART+4)^(0+512)+1)
  9331  1496  0841               	movf	(InitUART@temp+2)^(0+512),w
  9332  1497  00B9               	movwf	((??_InitUART+4)^(0+512)+2)
  9333  1498  0842               	movf	(InitUART@temp+3)^(0+512),w
  9334  1499  00BA               	movwf	((??_InitUART+4)^(0+512)+3)
  9335  149A  3002               	movlw	2
  9336  149B                     u8285:	
  9337  149B  36BA               	lsrf	((??_InitUART+4)^(0+512)+3),f
  9338  149C  0CB9               	rrf	((??_InitUART+4)^(0+512)+2),f
  9339  149D  0CB8               	rrf	((??_InitUART+4)^(0+512)+1),f
  9340  149E  0CB7               	rrf	(??_InitUART+4)^(0+512),f
  9341  149F  0B89               	decfsz	9,f
  9342  14A0  2C9B               	goto	u8285
  9343  14A1  0837               	movf	(??_InitUART+4)^(0+512),w
  9344  14A2  07B3               	addwf	??_InitUART^(0+512),f
  9345  14A3  0838               	movf	(??_InitUART+5)^(0+512),w
  9346  14A4  3DB4               	addwfc	(??_InitUART^(0+512)+1),f
  9347  14A5  0839               	movf	(??_InitUART+6)^(0+512),w
  9348  14A6  3DB5               	addwfc	(??_InitUART^(0+512)+2),f
  9349  14A7  083A               	movf	(??_InitUART+7)^(0+512),w
  9350  14A8  3DB6               	addwfc	(??_InitUART^(0+512)+3),f
  9351  14A9  0836               	movf	(??_InitUART+3)^(0+512),w
  9352  14AA  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9353  14AB  0835               	movf	(??_InitUART+2)^(0+512),w
  9354  14AC  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9355  14AD  0834               	movf	(??_InitUART+1)^(0+512),w
  9356  14AE  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9357  14AF  0833               	movf	??_InitUART^(0+512),w
  9358  14B0  00BF               	movwf	InitUART@temp^(0+512)
  9359                           
  9360                           ;UART.c: 119: spbrg = (unsigned int)temp;
  9361  14B1  0840               	movf	(InitUART@temp+1)^(0+512),w
  9362  14B2  01BC               	clrf	(InitUART@spbrg+1)^(0+512)
  9363  14B3  07BC               	addwf	(InitUART@spbrg+1)^(0+512),f
  9364  14B4  083F               	movf	InitUART@temp^(0+512),w
  9365  14B5  01BB               	clrf	InitUART@spbrg^(0+512)
  9366  14B6  07BB               	addwf	InitUART@spbrg^(0+512),f
  9367                           
  9368                           ;UART.c: 121: RCSTAbits.CREN = 0;
  9369  14B7  0023               	movlb	3	; select bank3
  9370  14B8  121D               	bcf	29,4	;volatile
  9371                           
  9372                           ;UART.c: 122: OpenUSART(config, spbrg);
  9373  14B9  0024               	movlb	4	; select bank4
  9374  14BA  083C               	movf	(InitUART@spbrg+1)^(0+512),w
  9375  14BB  01A1               	clrf	(OpenUSART@spbrg+1)^(0+512)
  9376  14BC  07A1               	addwf	(OpenUSART@spbrg+1)^(0+512),f
  9377  14BD  083B               	movf	InitUART@spbrg^(0+512),w
  9378  14BE  01A0               	clrf	OpenUSART@spbrg^(0+512)
  9379  14BF  07A0               	addwf	OpenUSART@spbrg^(0+512),f
  9380  14C0  083E               	movf	InitUART@config^(0+512),w
  9381  14C1  319D  2547  3194   	fcall	_OpenUSART
  9382                           
  9383                           ;UART.c: 123: baudUSART(baudconfig);
  9384  14C4  0024               	movlb	4	; select bank4
  9385  14C5  083D               	movf	InitUART@baudconfig^(0+512),w
  9386  14C6  3198  20B1  3194   	fcall	_baudUSART
  9387                           
  9388                           ;UART.c: 124: temp = ReadUSART();
  9389  14C9  3198  20CE  3194   	fcall	_ReadUSART
  9390  14CC  0024               	movlb	4	; select bank4
  9391  14CD  00B3               	movwf	??_InitUART^(0+512)
  9392  14CE  01B4               	clrf	(??_InitUART^(0+512)+1)
  9393  14CF  01B5               	clrf	(??_InitUART^(0+512)+2)
  9394  14D0  01B6               	clrf	(??_InitUART^(0+512)+3)
  9395  14D1  0836               	movf	(??_InitUART+3)^(0+512),w
  9396  14D2  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9397  14D3  0835               	movf	(??_InitUART+2)^(0+512),w
  9398  14D4  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9399  14D5  0834               	movf	(??_InitUART+1)^(0+512),w
  9400  14D6  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9401  14D7  0833               	movf	??_InitUART^(0+512),w
  9402  14D8  00BF               	movwf	InitUART@temp^(0+512)
  9403                           
  9404                           ;UART.c: 125: temp = ReadUSART();
  9405  14D9  3198  20CE  3194   	fcall	_ReadUSART
  9406  14DC  0024               	movlb	4	; select bank4
  9407  14DD  00B3               	movwf	??_InitUART^(0+512)
  9408  14DE  01B4               	clrf	(??_InitUART^(0+512)+1)
  9409  14DF  01B5               	clrf	(??_InitUART^(0+512)+2)
  9410  14E0  01B6               	clrf	(??_InitUART^(0+512)+3)
  9411  14E1  0836               	movf	(??_InitUART+3)^(0+512),w
  9412  14E2  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9413  14E3  0835               	movf	(??_InitUART+2)^(0+512),w
  9414  14E4  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9415  14E5  0834               	movf	(??_InitUART+1)^(0+512),w
  9416  14E6  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9417  14E7  0833               	movf	??_InitUART^(0+512),w
  9418  14E8  00BF               	movwf	InitUART@temp^(0+512)
  9419                           
  9420                           ;UART.c: 126: temp = ReadUSART();
  9421  14E9  3198  20CE  3194   	fcall	_ReadUSART
  9422  14EC  0024               	movlb	4	; select bank4
  9423  14ED  00B3               	movwf	??_InitUART^(0+512)
  9424  14EE  01B4               	clrf	(??_InitUART^(0+512)+1)
  9425  14EF  01B5               	clrf	(??_InitUART^(0+512)+2)
  9426  14F0  01B6               	clrf	(??_InitUART^(0+512)+3)
  9427  14F1  0836               	movf	(??_InitUART+3)^(0+512),w
  9428  14F2  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9429  14F3  0835               	movf	(??_InitUART+2)^(0+512),w
  9430  14F4  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9431  14F5  0834               	movf	(??_InitUART+1)^(0+512),w
  9432  14F6  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9433  14F7  0833               	movf	??_InitUART^(0+512),w
  9434  14F8  00BF               	movwf	InitUART@temp^(0+512)
  9435                           
  9436                           ;UART.c: 127: temp = ReadUSART();
  9437  14F9  3198  20CE  3194   	fcall	_ReadUSART
  9438  14FC  0024               	movlb	4	; select bank4
  9439  14FD  00B3               	movwf	??_InitUART^(0+512)
  9440  14FE  01B4               	clrf	(??_InitUART^(0+512)+1)
  9441  14FF  01B5               	clrf	(??_InitUART^(0+512)+2)
  9442  1500  01B6               	clrf	(??_InitUART^(0+512)+3)
  9443  1501  0836               	movf	(??_InitUART+3)^(0+512),w
  9444  1502  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9445  1503  0835               	movf	(??_InitUART+2)^(0+512),w
  9446  1504  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9447  1505  0834               	movf	(??_InitUART+1)^(0+512),w
  9448  1506  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9449  1507  0833               	movf	??_InitUART^(0+512),w
  9450  1508  00BF               	movwf	InitUART@temp^(0+512)
  9451                           
  9452                           ;UART.c: 128: temp = ReadUSART();
  9453  1509  3198  20CE         	fcall	_ReadUSART
  9454  150B  0024               	movlb	4	; select bank4
  9455  150C  00B3               	movwf	??_InitUART^(0+512)
  9456  150D  01B4               	clrf	(??_InitUART^(0+512)+1)
  9457  150E  01B5               	clrf	(??_InitUART^(0+512)+2)
  9458  150F  01B6               	clrf	(??_InitUART^(0+512)+3)
  9459  1510  0836               	movf	(??_InitUART+3)^(0+512),w
  9460  1511  00C2               	movwf	(InitUART@temp+3)^(0+512)
  9461  1512  0835               	movf	(??_InitUART+2)^(0+512),w
  9462  1513  00C1               	movwf	(InitUART@temp+2)^(0+512)
  9463  1514  0834               	movf	(??_InitUART+1)^(0+512),w
  9464  1515  00C0               	movwf	(InitUART@temp+1)^(0+512)
  9465  1516  0833               	movf	??_InitUART^(0+512),w
  9466  1517  00BF               	movwf	InitUART@temp^(0+512)
  9467                           
  9468                           ;UART.c: 130: PPSLOCK =0;
  9469  1518  003C               	movlb	28	; select bank28
  9470  1519  018F               	clrf	15	;volatile
  9471                           
  9472                           ;UART.c: 131: RC2PPS = 0b00010100;
  9473  151A  3014               	movlw	20
  9474  151B  003D               	movlb	29	; select bank29
  9475  151C  00A2               	movwf	34	;volatile
  9476                           
  9477                           ;UART.c: 132: CKPPS = 0b00010010;
  9478  151D  3012               	movlw	18
  9479  151E  003C               	movlb	28	; select bank28
  9480  151F  00A5               	movwf	37	;volatile
  9481                           
  9482                           ;UART.c: 136: PPSLOCK =1;
  9483  1520  3001               	movlw	1
  9484  1521  008F               	movwf	15	;volatile
  9485                           
  9486                           ;UART.c: 138: PIR1bits.RCIF = 0;
  9487  1522  0020               	movlb	0	; select bank0
  9488  1523  1291               	bcf	17,5	;volatile
  9489                           
  9490                           ;UART.c: 139: INTCONbits.PEIE = 1;
  9491  1524  170B               	bsf	11,6	;volatile
  9492  1525  0008               	return
  9493  1526                     __end_of_InitUART:	
  9494                           
  9495                           	psect	text28
  9496  18B1                     __ptext28:	
  9497 ;; *************** function _baudUSART *****************
  9498 ;; Defined at:
  9499 ;;		line 147 in file "UART.c"
  9500 ;; Parameters:    Size  Location     Type
  9501 ;;  baudconfig      1    wreg     unsigned char 
  9502 ;; Auto vars:     Size  Location     Type
  9503 ;;  baudconfig      1    0[BANK4 ] unsigned char 
  9504 ;; Return value:  Size  Location     Type
  9505 ;;		None               void
  9506 ;; Registers used:
  9507 ;;		wreg, status,2
  9508 ;; Tracked objects:
  9509 ;;		On entry : 0/0
  9510 ;;		On exit  : 0/0
  9511 ;;		Unchanged: 0/0
  9512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9514 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9516 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9517 ;;Total ram usage:        1 bytes
  9518 ;; Hardware stack levels used:    1
  9519 ;; Hardware stack levels required when called:    7
  9520 ;; This function calls:
  9521 ;;		Nothing
  9522 ;; This function is called by:
  9523 ;;		_InitUART
  9524 ;; This function uses a non-reentrant model
  9525 ;;
  9526                           
  9527                           
  9528                           ;psect for function _baudUSART
  9529  18B1                     _baudUSART:	
  9530                           
  9531                           ;incstack = 0
  9532                           ; Regs used in _baudUSART: [wreg+status,2]
  9533                           ;baudUSART@baudconfig stored from wreg
  9534  18B1  0024               	movlb	4	; select bank4
  9535  18B2  00A0               	movwf	baudUSART@baudconfig^(0+512)
  9536                           
  9537                           ;UART.c: 149: BAUD1CON =0;
  9538  18B3  0023               	movlb	3	; select bank3
  9539  18B4  019F               	clrf	31	;volatile
  9540                           
  9541                           ;UART.c: 150: BAUD1CON = baudconfig;
  9542  18B5  0024               	movlb	4	; select bank4
  9543  18B6  0820               	movf	baudUSART@baudconfig^(0+512),w
  9544  18B7  0023               	movlb	3	; select bank3
  9545  18B8  009F               	movwf	31	;volatile
  9546  18B9  0008               	return
  9547  18BA                     __end_of_baudUSART:	
  9548                           
  9549                           	psect	text29
  9550  1FAD                     __ptext29:	
  9551 ;; *************** function ___lldiv *****************
  9552 ;; Defined at:
  9553 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
  9554 ;; Parameters:    Size  Location     Type
  9555 ;;  divisor         4    0[BANK4 ] unsigned long 
  9556 ;;  dividend        4    4[BANK4 ] unsigned long 
  9557 ;; Auto vars:     Size  Location     Type
  9558 ;;  quotient        4    9[BANK4 ] unsigned long 
  9559 ;;  counter         1   13[BANK4 ] unsigned char 
  9560 ;; Return value:  Size  Location     Type
  9561 ;;                  4    0[BANK4 ] unsigned long 
  9562 ;; Registers used:
  9563 ;;		wreg, status,2, status,0
  9564 ;; Tracked objects:
  9565 ;;		On entry : 0/0
  9566 ;;		On exit  : 0/0
  9567 ;;		Unchanged: 0/0
  9568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9569 ;;      Params:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0
  9570 ;;      Locals:         0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0
  9571 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9572 ;;      Totals:         0       0       0       0       0      14       0       0       0       0       0       0       
      +0       0
  9573 ;;Total ram usage:       14 bytes
  9574 ;; Hardware stack levels used:    1
  9575 ;; Hardware stack levels required when called:    7
  9576 ;; This function calls:
  9577 ;;		Nothing
  9578 ;; This function is called by:
  9579 ;;		_InitUART
  9580 ;; This function uses a non-reentrant model
  9581 ;;
  9582                           
  9583                           
  9584                           ;psect for function ___lldiv
  9585  1FAD                     ___lldiv:	
  9586                           
  9587                           ;incstack = 0
  9588                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  9589  1FAD  3000               	movlw	0
  9590  1FAE  0024               	movlb	4	; select bank4
  9591  1FAF  00AC               	movwf	(___lldiv@quotient+3)^(0+512)
  9592  1FB0  3000               	movlw	0
  9593  1FB1  00AB               	movwf	(___lldiv@quotient+2)^(0+512)
  9594  1FB2  3000               	movlw	0
  9595  1FB3  00AA               	movwf	(___lldiv@quotient+1)^(0+512)
  9596  1FB4  3000               	movlw	0
  9597  1FB5  00A9               	movwf	___lldiv@quotient^(0+512)
  9598  1FB6  0823               	movf	(___lldiv@divisor+3)^(0+512),w
  9599  1FB7  0422               	iorwf	(___lldiv@divisor+2)^(0+512),w
  9600  1FB8  0421               	iorwf	(___lldiv@divisor+1)^(0+512),w
  9601  1FB9  0420               	iorwf	___lldiv@divisor^(0+512),w
  9602  1FBA  1903               	skipnz
  9603  1FBB  2FF7               	goto	l6398
  9604  1FBC  01AD               	clrf	___lldiv@counter^(0+512)
  9605  1FBD  0AAD               	incf	___lldiv@counter^(0+512),f
  9606  1FBE                     l6384:	
  9607  1FBE  1BA3               	btfsc	(___lldiv@divisor+3)^(0+512),7
  9608  1FBF  2FCC               	goto	l6386
  9609  1FC0  3001               	movlw	1
  9610  1FC1                     u8165:	
  9611  1FC1  35A0               	lslf	___lldiv@divisor^(0+512),f
  9612  1FC2  0DA1               	rlf	(___lldiv@divisor+1)^(0+512),f
  9613  1FC3  0DA2               	rlf	(___lldiv@divisor+2)^(0+512),f
  9614  1FC4  0DA3               	rlf	(___lldiv@divisor+3)^(0+512),f
  9615  1FC5  0B89               	decfsz	9,f
  9616  1FC6  2FC1               	goto	u8165
  9617  1FC7  3001               	movlw	1
  9618  1FC8  00A8               	movwf	??___lldiv^(0+512)
  9619  1FC9  0828               	movf	??___lldiv^(0+512),w
  9620  1FCA  07AD               	addwf	___lldiv@counter^(0+512),f
  9621  1FCB  2FBE               	goto	l6384
  9622  1FCC                     l6386:	
  9623  1FCC  3001               	movlw	1
  9624  1FCD                     u8185:	
  9625  1FCD  35A9               	lslf	___lldiv@quotient^(0+512),f
  9626  1FCE  0DAA               	rlf	(___lldiv@quotient+1)^(0+512),f
  9627  1FCF  0DAB               	rlf	(___lldiv@quotient+2)^(0+512),f
  9628  1FD0  0DAC               	rlf	(___lldiv@quotient+3)^(0+512),f
  9629  1FD1  0B89               	decfsz	9,f
  9630  1FD2  2FCD               	goto	u8185
  9631  1FD3  0823               	movf	(___lldiv@divisor+3)^(0+512),w
  9632  1FD4  0227               	subwf	(___lldiv@dividend+3)^(0+512),w
  9633  1FD5  1D03               	skipz
  9634  1FD6  2FE1               	goto	u8195
  9635  1FD7  0822               	movf	(___lldiv@divisor+2)^(0+512),w
  9636  1FD8  0226               	subwf	(___lldiv@dividend+2)^(0+512),w
  9637  1FD9  1D03               	skipz
  9638  1FDA  2FE1               	goto	u8195
  9639  1FDB  0821               	movf	(___lldiv@divisor+1)^(0+512),w
  9640  1FDC  0225               	subwf	(___lldiv@dividend+1)^(0+512),w
  9641  1FDD  1D03               	skipz
  9642  1FDE  2FE1               	goto	u8195
  9643  1FDF  0820               	movf	___lldiv@divisor^(0+512),w
  9644  1FE0  0224               	subwf	___lldiv@dividend^(0+512),w
  9645  1FE1                     u8195:	
  9646  1FE1  1C03               	skipc
  9647  1FE2  2FEC               	goto	l6394
  9648  1FE3  0820               	movf	___lldiv@divisor^(0+512),w
  9649  1FE4  02A4               	subwf	___lldiv@dividend^(0+512),f
  9650  1FE5  0821               	movf	(___lldiv@divisor+1)^(0+512),w
  9651  1FE6  3BA5               	subwfb	(___lldiv@dividend+1)^(0+512),f
  9652  1FE7  0822               	movf	(___lldiv@divisor+2)^(0+512),w
  9653  1FE8  3BA6               	subwfb	(___lldiv@dividend+2)^(0+512),f
  9654  1FE9  0823               	movf	(___lldiv@divisor+3)^(0+512),w
  9655  1FEA  3BA7               	subwfb	(___lldiv@dividend+3)^(0+512),f
  9656  1FEB  1429               	bsf	___lldiv@quotient^(0+512),0
  9657  1FEC                     l6394:	
  9658  1FEC  3001               	movlw	1
  9659  1FED                     u8205:	
  9660  1FED  36A3               	lsrf	(___lldiv@divisor+3)^(0+512),f
  9661  1FEE  0CA2               	rrf	(___lldiv@divisor+2)^(0+512),f
  9662  1FEF  0CA1               	rrf	(___lldiv@divisor+1)^(0+512),f
  9663  1FF0  0CA0               	rrf	___lldiv@divisor^(0+512),f
  9664  1FF1  0B89               	decfsz	9,f
  9665  1FF2  2FED               	goto	u8205
  9666  1FF3  3001               	movlw	1
  9667  1FF4  02AD               	subwf	___lldiv@counter^(0+512),f
  9668  1FF5  1D03               	btfss	3,2
  9669  1FF6  2FCC               	goto	l6386
  9670  1FF7                     l6398:	
  9671  1FF7  082C               	movf	(___lldiv@quotient+3)^(0+512),w
  9672  1FF8  00A3               	movwf	(?___lldiv+3)^(0+512)
  9673  1FF9  082B               	movf	(___lldiv@quotient+2)^(0+512),w
  9674  1FFA  00A2               	movwf	(?___lldiv+2)^(0+512)
  9675  1FFB  082A               	movf	(___lldiv@quotient+1)^(0+512),w
  9676  1FFC  00A1               	movwf	(?___lldiv+1)^(0+512)
  9677  1FFD  0829               	movf	___lldiv@quotient^(0+512),w
  9678  1FFE  00A0               	movwf	?___lldiv^(0+512)
  9679  1FFF  0008               	return
  9680  2000                     __end_of___lldiv:	
  9681                           
  9682                           	psect	text30
  9683  18CE                     __ptext30:	
  9684 ;; *************** function _ReadUSART *****************
  9685 ;; Defined at:
  9686 ;;		line 302 in file "UART.c"
  9687 ;; Parameters:    Size  Location     Type
  9688 ;;		None
  9689 ;; Auto vars:     Size  Location     Type
  9690 ;;  data            1    1[BANK4 ] unsigned char 
  9691 ;; Return value:  Size  Location     Type
  9692 ;;                  1    wreg      unsigned char 
  9693 ;; Registers used:
  9694 ;;		wreg
  9695 ;; Tracked objects:
  9696 ;;		On entry : 0/0
  9697 ;;		On exit  : 0/0
  9698 ;;		Unchanged: 0/0
  9699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9701 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9702 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9703 ;;      Totals:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  9704 ;;Total ram usage:        2 bytes
  9705 ;; Hardware stack levels used:    1
  9706 ;; Hardware stack levels required when called:    7
  9707 ;; This function calls:
  9708 ;;		Nothing
  9709 ;; This function is called by:
  9710 ;;		_InitUART
  9711 ;; This function uses a non-reentrant model
  9712 ;;
  9713                           
  9714                           
  9715                           ;psect for function _ReadUSART
  9716  18CE                     _ReadUSART:	
  9717                           
  9718                           ;UART.c: 304: char data;
  9719                           ;UART.c: 306: if(RCSTAbits.OERR)
  9720                           
  9721                           ;incstack = 0
  9722                           ; Regs used in _ReadUSART: [wreg]
  9723  18CE  0023               	movlb	3	; select bank3
  9724  18CF  189D               	btfsc	29,1	;volatile
  9725                           
  9726                           ;UART.c: 307: {
  9727                           ;UART.c: 308: RCSTAbits.CREN = 0;
  9728  18D0  121D               	bcf	29,4	;volatile
  9729                           
  9730                           ;UART.c: 309: }
  9731                           ;UART.c: 311: data = RCREG;
  9732  18D1  0819               	movf	25,w	;volatile
  9733  18D2  0024               	movlb	4	; select bank4
  9734  18D3  00A0               	movwf	??_ReadUSART^(0+512)
  9735  18D4  0820               	movf	??_ReadUSART^(0+512),w
  9736  18D5  00A1               	movwf	ReadUSART@data^(0+512)
  9737                           
  9738                           ;UART.c: 313: return (data);
  9739  18D6  0821               	movf	ReadUSART@data^(0+512),w
  9740  18D7  0008               	return
  9741  18D8                     __end_of_ReadUSART:	
  9742                           
  9743                           	psect	text31
  9744  1D47                     __ptext31:	
  9745 ;; *************** function _OpenUSART *****************
  9746 ;; Defined at:
  9747 ;;		line 158 in file "UART.c"
  9748 ;; Parameters:    Size  Location     Type
  9749 ;;  config          1    wreg     unsigned char 
  9750 ;;  spbrg           2    0[BANK4 ] unsigned int 
  9751 ;; Auto vars:     Size  Location     Type
  9752 ;;  config          1    2[BANK4 ] unsigned char 
  9753 ;; Return value:  Size  Location     Type
  9754 ;;		None               void
  9755 ;; Registers used:
  9756 ;;		wreg, status,2
  9757 ;; Tracked objects:
  9758 ;;		On entry : 0/0
  9759 ;;		On exit  : 0/0
  9760 ;;		Unchanged: 0/0
  9761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9762 ;;      Params:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0
  9763 ;;      Locals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9765 ;;      Totals:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  9766 ;;Total ram usage:        3 bytes
  9767 ;; Hardware stack levels used:    1
  9768 ;; Hardware stack levels required when called:    7
  9769 ;; This function calls:
  9770 ;;		Nothing
  9771 ;; This function is called by:
  9772 ;;		_InitUART
  9773 ;; This function uses a non-reentrant model
  9774 ;;
  9775                           
  9776                           
  9777                           ;psect for function _OpenUSART
  9778  1D47                     _OpenUSART:	
  9779                           
  9780                           ;incstack = 0
  9781                           ; Regs used in _OpenUSART: [wreg+status,2]
  9782                           ;OpenUSART@config stored from wreg
  9783  1D47  0024               	movlb	4	; select bank4
  9784  1D48  00A2               	movwf	OpenUSART@config^(0+512)
  9785                           
  9786                           ;UART.c: 160: TX1STA = 0;
  9787  1D49  0023               	movlb	3	; select bank3
  9788  1D4A  019E               	clrf	30	;volatile
  9789                           
  9790                           ;UART.c: 161: RC1STA = 0;
  9791  1D4B  019D               	clrf	29	;volatile
  9792                           
  9793                           ;UART.c: 163: if(config&0x01)
  9794  1D4C  0024               	movlb	4	; select bank4
  9795  1D4D  1C22               	btfss	OpenUSART@config^(0+512),0
  9796  1D4E  2D51               	goto	l6126
  9797                           
  9798                           ;UART.c: 164: {
  9799                           ;UART.c: 165: TX1STAbits.SYNC = 1;
  9800  1D4F  0023               	movlb	3	; select bank3
  9801  1D50  161E               	bsf	30,4	;volatile
  9802  1D51                     l6126:	
  9803                           
  9804                           ;UART.c: 166: }
  9805                           ;UART.c: 168: if(config&0x02)
  9806  1D51  0024               	movlb	4	; select bank4
  9807  1D52  1CA2               	btfss	OpenUSART@config^(0+512),1
  9808  1D53  2D57               	goto	l6130
  9809                           
  9810                           ;UART.c: 169: {
  9811                           ;UART.c: 170: TX1STAbits.TX9 = 1;
  9812  1D54  0023               	movlb	3	; select bank3
  9813  1D55  171E               	bsf	30,6	;volatile
  9814                           
  9815                           ;UART.c: 171: RC1STAbits.RX9 = 1;
  9816  1D56  171D               	bsf	29,6	;volatile
  9817  1D57                     l6130:	
  9818                           
  9819                           ;UART.c: 172: }
  9820                           ;UART.c: 174: if(config&0x04)
  9821  1D57  0024               	movlb	4	; select bank4
  9822  1D58  1D22               	btfss	OpenUSART@config^(0+512),2
  9823  1D59  2D5C               	goto	l6134
  9824                           
  9825                           ;UART.c: 175: {
  9826                           ;UART.c: 176: TX1STAbits.CSRC = 1;
  9827  1D5A  0023               	movlb	3	; select bank3
  9828  1D5B  179E               	bsf	30,7	;volatile
  9829  1D5C                     l6134:	
  9830                           
  9831                           ;UART.c: 177: }
  9832                           ;UART.c: 179: if(config&0x08)
  9833  1D5C  0024               	movlb	4	; select bank4
  9834  1D5D  1DA2               	btfss	OpenUSART@config^(0+512),3
  9835  1D5E  2D62               	goto	l389
  9836                           
  9837                           ;UART.c: 180: {
  9838                           ;UART.c: 181: RC1STAbits.CREN = 1;
  9839  1D5F  0023               	movlb	3	; select bank3
  9840  1D60  161D               	bsf	29,4	;volatile
  9841                           
  9842                           ;UART.c: 182: }
  9843  1D61  2D64               	goto	l6138
  9844  1D62                     l389:	
  9845                           
  9846                           ;UART.c: 183: else
  9847                           ;UART.c: 184: {
  9848                           ;UART.c: 185: RC1STAbits.SREN = 1;
  9849  1D62  0023               	movlb	3	; select bank3
  9850  1D63  169D               	bsf	29,5	;volatile
  9851  1D64                     l6138:	
  9852                           
  9853                           ;UART.c: 186: }
  9854                           ;UART.c: 188: if(config&0x10)
  9855  1D64  0024               	movlb	4	; select bank4
  9856  1D65  1E22               	btfss	OpenUSART@config^(0+512),4
  9857  1D66  2D69               	goto	l6144
  9858                           
  9859                           ;UART.c: 189: {
  9860                           ;UART.c: 190: TX1STAbits.BRGH = 1;
  9861  1D67  0023               	movlb	3	; select bank3
  9862  1D68  151E               	bsf	30,2	;volatile
  9863  1D69                     l6144:	
  9864                           ;UART.c: 194: {
  9865                           
  9866                           
  9867                           ;UART.c: 196: }
  9868                           ;UART.c: 198: if(config&0x40)
  9869  1D69  0024               	movlb	4	; select bank4
  9870  1D6A  1F22               	btfss	OpenUSART@config^(0+512),6
  9871  1D6B  2D71               	goto	l393
  9872                           
  9873                           ;UART.c: 199: {
  9874                           ;UART.c: 200: PIR1bits.RCIF = 0;
  9875  1D6C  0020               	movlb	0	; select bank0
  9876  1D6D  1291               	bcf	17,5	;volatile
  9877                           
  9878                           ;UART.c: 201: PIE1bits.RCIE = 1;
  9879  1D6E  0021               	movlb	1	; select bank1
  9880  1D6F  1691               	bsf	17,5	;volatile
  9881                           
  9882                           ;UART.c: 203: }
  9883  1D70  2D73               	goto	l6148
  9884  1D71                     l393:	
  9885                           
  9886                           ;UART.c: 204: else
  9887                           ;UART.c: 205: {
  9888                           ;UART.c: 206: PIE1bits.RCIE = 0;
  9889  1D71  0021               	movlb	1	; select bank1
  9890  1D72  1291               	bcf	17,5	;volatile
  9891  1D73                     l6148:	
  9892                           
  9893                           ;UART.c: 207: }
  9894                           ;UART.c: 209: if(config&0x80)
  9895  1D73  0024               	movlb	4	; select bank4
  9896  1D74  1FA2               	btfss	OpenUSART@config^(0+512),7
  9897  1D75  2D7B               	goto	l395
  9898                           
  9899                           ;UART.c: 210: {
  9900                           ;UART.c: 211: PIR1bits.TXIF = 0;
  9901  1D76  0020               	movlb	0	; select bank0
  9902  1D77  1211               	bcf	17,4	;volatile
  9903                           
  9904                           ;UART.c: 212: PIE1bits.TXIE = 1;
  9905  1D78  0021               	movlb	1	; select bank1
  9906  1D79  1611               	bsf	17,4	;volatile
  9907                           
  9908                           ;UART.c: 213: }
  9909  1D7A  2D7D               	goto	l6152
  9910  1D7B                     l395:	
  9911                           
  9912                           ;UART.c: 214: else
  9913                           ;UART.c: 215: {
  9914                           ;UART.c: 216: PIE1bits.TXIE = 0;
  9915  1D7B  0021               	movlb	1	; select bank1
  9916  1D7C  1211               	bcf	17,4	;volatile
  9917  1D7D                     l6152:	
  9918                           
  9919                           ;UART.c: 217: }
  9920                           ;UART.c: 219: SPBRG = spbrg;
  9921  1D7D  0024               	movlb	4	; select bank4
  9922  1D7E  0820               	movf	OpenUSART@spbrg^(0+512),w
  9923  1D7F  0023               	movlb	3	; select bank3
  9924  1D80  009B               	movwf	27	;volatile
  9925                           
  9926                           ;UART.c: 220: SPBRGH = spbrg >> 8;
  9927  1D81  0024               	movlb	4	; select bank4
  9928  1D82  0821               	movf	(OpenUSART@spbrg+1)^(0+512),w
  9929  1D83  0023               	movlb	3	; select bank3
  9930  1D84  009C               	movwf	28	;volatile
  9931                           
  9932                           ;UART.c: 222: TX1STAbits.TXEN = 1;
  9933  1D85  169E               	bsf	30,5	;volatile
  9934                           
  9935                           ;UART.c: 223: RC1STAbits.SPEN = 1;
  9936  1D86  179D               	bsf	29,7	;volatile
  9937  1D87  0008               	return
  9938  1D88                     __end_of_OpenUSART:	
  9939                           
  9940                           	psect	text32
  9941  191E                     __ptext32:	
  9942 ;; *************** function _CloseUSART *****************
  9943 ;; Defined at:
  9944 ;;		line 62 in file "UART.c"
  9945 ;; Parameters:    Size  Location     Type
  9946 ;;		None
  9947 ;; Auto vars:     Size  Location     Type
  9948 ;;		None
  9949 ;; Return value:  Size  Location     Type
  9950 ;;		None               void
  9951 ;; Registers used:
  9952 ;;		wreg, status,2, status,0
  9953 ;; Tracked objects:
  9954 ;;		On entry : 0/0
  9955 ;;		On exit  : 0/0
  9956 ;;		Unchanged: 0/0
  9957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9960 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9961 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
  9962 ;;Total ram usage:        1 bytes
  9963 ;; Hardware stack levels used:    1
  9964 ;; Hardware stack levels required when called:    7
  9965 ;; This function calls:
  9966 ;;		Nothing
  9967 ;; This function is called by:
  9968 ;;		_InitUART
  9969 ;; This function uses a non-reentrant model
  9970 ;;
  9971                           
  9972                           
  9973                           ;psect for function _CloseUSART
  9974  191E                     _CloseUSART:	
  9975                           
  9976                           ;UART.c: 64: RCSTA&=0b01001111;
  9977                           
  9978                           ;incstack = 0
  9979                           ; Regs used in _CloseUSART: [wreg+status,2+status,0]
  9980  191E  304F               	movlw	79
  9981  191F  0024               	movlb	4	; select bank4
  9982  1920  00A0               	movwf	??_CloseUSART^(0+512)
  9983  1921  0820               	movf	??_CloseUSART^(0+512),w
  9984  1922  0023               	movlb	3	; select bank3
  9985  1923  059D               	andwf	29,f	;volatile
  9986                           
  9987                           ;UART.c: 65: TX1STAbits.TXEN=0;
  9988  1924  129E               	bcf	30,5	;volatile
  9989                           
  9990                           ;UART.c: 66: PIE1&=0b11001111;
  9991  1925  30CF               	movlw	207
  9992  1926  0024               	movlb	4	; select bank4
  9993  1927  00A0               	movwf	??_CloseUSART^(0+512)
  9994  1928  0820               	movf	??_CloseUSART^(0+512),w
  9995  1929  0021               	movlb	1	; select bank1
  9996  192A  0591               	andwf	17,f	;volatile
  9997  192B  0008               	return
  9998  192C                     __end_of_CloseUSART:	
  9999                           
 10000                           	psect	text33
 10001  1A0B                     __ptext33:	
 10002 ;; *************** function _InitApp *****************
 10003 ;; Defined at:
 10004 ;;		line 62 in file "user.c"
 10005 ;; Parameters:    Size  Location     Type
 10006 ;;		None
 10007 ;; Auto vars:     Size  Location     Type
 10008 ;;		None
 10009 ;; Return value:  Size  Location     Type
 10010 ;;		None               void
 10011 ;; Registers used:
 10012 ;;		wreg, status,2
 10013 ;; Tracked objects:
 10014 ;;		On entry : 0/0
 10015 ;;		On exit  : 0/0
 10016 ;;		Unchanged: 0/0
 10017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10021 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10022 ;;Total ram usage:        0 bytes
 10023 ;; Hardware stack levels used:    1
 10024 ;; Hardware stack levels required when called:    7
 10025 ;; This function calls:
 10026 ;;		Nothing
 10027 ;; This function is called by:
 10028 ;;		_main
 10029 ;; This function uses a non-reentrant model
 10030 ;;
 10031                           
 10032                           
 10033                           ;psect for function _InitApp
 10034  1A0B                     _InitApp:	
 10035                           
 10036                           ;user.c: 64: LATC =0;
 10037                           
 10038                           ;incstack = 0
 10039                           ; Regs used in _InitApp: [wreg+status,2]
 10040  1A0B  0022               	movlb	2	; select bank2
 10041  1A0C  018E               	clrf	14	;volatile
 10042                           
 10043                           ;user.c: 65: LATA =0;
 10044  1A0D  018C               	clrf	12	;volatile
 10045                           
 10046                           ;user.c: 66: TRISCbits.TRISC2 = 0;
 10047  1A0E  0021               	movlb	1	; select bank1
 10048  1A0F  110E               	bcf	14,2	;volatile
 10049                           
 10050                           ;user.c: 67: TRISCbits.TRISC1 = 0;
 10051  1A10  108E               	bcf	14,1	;volatile
 10052                           
 10053                           ;user.c: 68: TRISCbits.TRISC3 = 0;
 10054  1A11  118E               	bcf	14,3	;volatile
 10055                           
 10056                           ;user.c: 69: TRISCbits.TRISC4 = 0;
 10057  1A12  120E               	bcf	14,4	;volatile
 10058                           
 10059                           ;user.c: 70: TRISAbits.TRISA2 = 1;
 10060  1A13  150C               	bsf	12,2	;volatile
 10061                           
 10062                           ;user.c: 74: TRISCbits.TRISC0 = 0;
 10063  1A14  100E               	bcf	14,0	;volatile
 10064                           
 10065                           ;user.c: 77: TRISCbits.TRISC5 = 1;
 10066  1A15  168E               	bsf	14,5	;volatile
 10067                           
 10068                           ;user.c: 80: LATC |= 0b00000010;
 10069  1A16  0022               	movlb	2	; select bank2
 10070  1A17  148E               	bsf	14,1	;volatile
 10071                           
 10072                           ;user.c: 81: PPSLOCK =0;
 10073  1A18  003C               	movlb	28	; select bank28
 10074  1A19  018F               	clrf	15	;volatile
 10075                           
 10076                           ;user.c: 82: RC2PPS = 0b00010100;
 10077  1A1A  3014               	movlw	20
 10078  1A1B  003D               	movlb	29	; select bank29
 10079  1A1C  00A2               	movwf	34	;volatile
 10080                           
 10081                           ;user.c: 83: CKPPS = 0b00010010;
 10082  1A1D  3012               	movlw	18
 10083  1A1E  003C               	movlb	28	; select bank28
 10084  1A1F  00A5               	movwf	37	;volatile
 10085                           
 10086                           ;user.c: 87: PPSLOCK =1;
 10087  1A20  3001               	movlw	1
 10088  1A21  008F               	movwf	15	;volatile
 10089                           
 10090                           ;user.c: 89: ANSELA &= ~0xFF;
 10091  1A22  0023               	movlb	3	; select bank3
 10092  1A23  018C               	clrf	12	;volatile
 10093                           
 10094                           ;user.c: 90: ANSELA |= 0b00000100;
 10095  1A24  150C               	bsf	12,2	;volatile
 10096                           
 10097                           ;user.c: 91: ANSELC &= ~0xFF;
 10098  1A25  018E               	clrf	14	;volatile
 10099                           
 10100                           ;user.c: 92: OPTION_REGbits.nWPUEN = 0;
 10101  1A26  0021               	movlb	1	; select bank1
 10102  1A27  1395               	bcf	21,7	;volatile
 10103                           
 10104                           ;user.c: 93: WPUC = 0b00100000;
 10105  1A28  3020               	movlw	32
 10106  1A29  0024               	movlb	4	; select bank4
 10107  1A2A  008E               	movwf	14	;volatile
 10108                           
 10109                           ;user.c: 94: WPUA = 0;
 10110  1A2B  018C               	clrf	12	;volatile
 10111  1A2C  0008               	return
 10112  1A2D                     __end_of_InitApp:	
 10113                           
 10114                           	psect	text34
 10115  1992                     __ptext34:	
 10116 ;; *************** function _ConfigureOscillator *****************
 10117 ;; Defined at:
 10118 ;;		line 40 in file "system.c"
 10119 ;; Parameters:    Size  Location     Type
 10120 ;;		None
 10121 ;; Auto vars:     Size  Location     Type
 10122 ;;		None
 10123 ;; Return value:  Size  Location     Type
 10124 ;;		None               void
 10125 ;; Registers used:
 10126 ;;		wreg, status,2, status,0
 10127 ;; Tracked objects:
 10128 ;;		On entry : 0/0
 10129 ;;		On exit  : 0/0
 10130 ;;		Unchanged: 0/0
 10131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10134 ;;      Temps:          0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
 10135 ;;      Totals:         0       0       0       0       0       1       0       0       0       0       0       0       
      +0       0
 10136 ;;Total ram usage:        1 bytes
 10137 ;; Hardware stack levels used:    1
 10138 ;; Hardware stack levels required when called:    7
 10139 ;; This function calls:
 10140 ;;		Nothing
 10141 ;; This function is called by:
 10142 ;;		_main
 10143 ;; This function uses a non-reentrant model
 10144 ;;
 10145                           
 10146                           
 10147                           ;psect for function _ConfigureOscillator
 10148  1992                     _ConfigureOscillator:	
 10149                           
 10150                           ;system.c: 42: OSCCON= 0b11110000;
 10151                           
 10152                           ;incstack = 0
 10153                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 10154  1992  30F0               	movlw	240
 10155  1993  0021               	movlb	1	; select bank1
 10156  1994  0099               	movwf	25	;volatile
 10157  1995                     l6654:	
 10158                           ;system.c: 43: while(!(OSCSTAT & HFIOFS));
 10159                           
 10160  1995  3000               	movlw	0
 10161  1996  181A               	btfsc	26,0	;volatile
 10162  1997  3001               	movlw	1
 10163  1998  051A               	andwf	26,w	;volatile
 10164  1999  1903               	btfsc	3,2
 10165  199A  2995               	goto	l6654
 10166  199B                     l6656:	
 10167                           ;system.c: 44: while(!(OSCSTAT & = 0b01000000));
 10168                           
 10169  199B  3040               	movlw	64
 10170  199C  0024               	movlb	4	; select bank4
 10171  199D  00A0               	movwf	??_ConfigureOscillator^(0+512)
 10172  199E  0820               	movf	??_ConfigureOscillator^(0+512),w
 10173  199F  0021               	movlb	1	; select bank1
 10174  19A0  059A               	andwf	26,f	;volatile
 10175  19A1  1D03               	btfss	3,2
 10176  19A2  0008               	return
 10177  19A3  299B               	goto	l6656
 10178  19A4                     __end_of_ConfigureOscillator:	
 10179                           
 10180                           	psect	intentry
 10181  0004                     __pintentry:	
 10182 ;; *************** function _isr *****************
 10183 ;; Defined at:
 10184 ;;		line 72 in file "interrupts.c"
 10185 ;; Parameters:    Size  Location     Type
 10186 ;;		None
 10187 ;; Auto vars:     Size  Location     Type
 10188 ;;  ScanTemp        1   35[BANK1 ] unsigned char 
 10189 ;;  Rx_fault        1   34[BANK1 ] unsigned char 
 10190 ;;  rx              1    0        unsigned char 
 10191 ;; Return value:  Size  Location     Type
 10192 ;;		None               void
 10193 ;; Registers used:
 10194 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10195 ;; Tracked objects:
 10196 ;;		On entry : 0/0
 10197 ;;		On exit  : 0/0
 10198 ;;		Unchanged: 0/0
 10199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10201 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 10202 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10203 ;;      Totals:         0       2       2       0       0       0       0       0       0       0       0       0       
      +0       0
 10204 ;;Total ram usage:        4 bytes
 10205 ;; Hardware stack levels used:    1
 10206 ;; Hardware stack levels required when called:    6
 10207 ;; This function calls:
 10208 ;;		_PS2RawToScan
 10209 ;;		_Process_PS2_ScanCode
 10210 ;;		_ResendLast
 10211 ;;		_Timer2OFF
 10212 ;;		_Timer2Reset
 10213 ;;		i1_PS_2_DISABLE_INTERRUPT
 10214 ;;		i1_PS_2_ENABLE_INTERRUPT
 10215 ;;		i1_READ_PS_2_PIN
 10216 ;;		i1_Timer2ON
 10217 ;; This function is called by:
 10218 ;;		Interrupt level 1
 10219 ;; This function uses a non-reentrant model
 10220 ;;
 10221                           
 10222  0004                     _isr:	
 10223                           
 10224                           ;incstack = 0
 10225                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10226  0004  147E               	bsf	126,0	;set compiler interrupt flag
 10227  0005  3180               	pagesel	$
 10228  0006  0020               	movlb	0	; select bank0
 10229  0007  087F               	movf	127,w
 10230  0008  00EF               	movwf	??_isr+1
 10231                           
 10232                           ;interrupts.c: 74: unsigned char rx;
 10233                           ;interrupts.c: 75: unsigned char Rx_fault =0;
 10234  0009  0021               	movlb	1	; select bank1
 10235  000A  01C2               	clrf	isr@Rx_fault^(0+128)
 10236                           
 10237                           ;interrupts.c: 76: unsigned char ScanTemp;
 10238                           ;interrupts.c: 78: if(IOCAF & 0b00100000)
 10239  000B  0027               	movlb	7	; select bank7
 10240  000C  1E93               	btfss	19,5	;volatile
 10241  000D  2875               	goto	i1l71
 10242                           
 10243                           ;interrupts.c: 79: {
 10244                           ;interrupts.c: 81: PS_2_DISABLE_INTERRUPT(0b00100000);
 10245  000E  3020               	movlw	32
 10246  000F  3199  214B  3180   	fcall	i1_PS_2_DISABLE_INTERRUPT
 10247                           
 10248                           ;interrupts.c: 82: PIE1bits.TMR2IE = 0;
 10249  0012  0021               	movlb	1	; select bank1
 10250  0013  1091               	bcf	17,1	;volatile
 10251                           
 10252                           ;interrupts.c: 83: PIE1bits.RCIE = 0;
 10253  0014  1291               	bcf	17,5	;volatile
 10254                           
 10255                           ;interrupts.c: 84: LATC |= 0b00010000;
 10256  0015  0022               	movlb	2	; select bank2
 10257  0016  160E               	bsf	14,4	;volatile
 10258                           
 10259                           ;interrupts.c: 85: PS_2_bits++;
 10260  0017  3001               	movlw	1
 10261  0018  0020               	movlb	0	; select bank0
 10262  0019  00EE               	movwf	??_isr
 10263  001A  086E               	movf	??_isr,w
 10264  001B  0021               	movlb	1	; select bank1
 10265  001C  07D1               	addwf	_PS_2_bits^(0+128),f
 10266                           
 10267                           ;interrupts.c: 86: PS_2_Read_Data_TEMP <<= 1;
 10268  001D  3001               	movlw	1
 10269  001E                     u728_25:	
 10270  001E  35C8               	lslf	_PS_2_Read_Data_TEMP^(0+128),f
 10271  001F  0DC9               	rlf	(_PS_2_Read_Data_TEMP+1)^(0+128),f
 10272  0020  0B89               	decfsz	9,f
 10273  0021  281E               	goto	u728_25
 10274                           
 10275                           ;interrupts.c: 87: __nop();
 10276  0022  0000               	nop
 10277                           
 10278                           ;interrupts.c: 88: if(READ_PS_2_PIN(0b00010000))
 10279  0023  3010               	movlw	16
 10280  0024  3199  21A4  3180   	fcall	i1_READ_PS_2_PIN
 10281  0027  3A00               	xorlw	0
 10282  0028  1903               	skipnz
 10283  0029  282F               	goto	i1l72
 10284                           
 10285                           ;interrupts.c: 89: {
 10286                           ;interrupts.c: 90: PS_2_Read_Data_TEMP++;
 10287  002A  3001               	movlw	1
 10288  002B  0021               	movlb	1	; select bank1
 10289  002C  07C8               	addwf	_PS_2_Read_Data_TEMP^(0+128),f
 10290  002D  3000               	movlw	0
 10291  002E  3DC9               	addwfc	(_PS_2_Read_Data_TEMP+1)^(0+128),f
 10292  002F                     i1l72:	
 10293                           
 10294                           ;interrupts.c: 91: }
 10295                           ;interrupts.c: 92: if(PS_2_bits == 11)
 10296  002F  0021               	movlb	1	; select bank1
 10297  0030  0851               	movf	_PS_2_bits^(0+128),w
 10298  0031  3A0B               	xorlw	11
 10299  0032  1D03               	skipz
 10300  0033  2860               	goto	i1l5880
 10301                           
 10302                           ;interrupts.c: 93: {
 10303                           ;interrupts.c: 94: if(PS_2_Buffer_items < 12)
 10304  0034  300C               	movlw	12
 10305  0035  0250               	subwf	_PS_2_Buffer_items^(0+128),w
 10306  0036  1803               	skipnc
 10307  0037  285D               	goto	i1l5878
 10308                           
 10309                           ;interrupts.c: 95: {
 10310                           ;interrupts.c: 96: ScanTemp = (unsigned char) PS2RawToScan(PS_2_Read_Data_TEMP);
 10311  0038  0849               	movf	(_PS_2_Read_Data_TEMP+1)^(0+128),w
 10312  0039  01F9               	clrf	PS2RawToScan@Raw+1
 10313  003A  07F9               	addwf	PS2RawToScan@Raw+1,f
 10314  003B  0848               	movf	_PS_2_Read_Data_TEMP^(0+128),w
 10315  003C  01F8               	clrf	PS2RawToScan@Raw
 10316  003D  07F8               	addwf	PS2RawToScan@Raw,f
 10317  003E  319E  2618  3180   	fcall	_PS2RawToScan
 10318  0041  0878               	movf	?_PS2RawToScan,w
 10319  0042  0020               	movlb	0	; select bank0
 10320  0043  00EE               	movwf	??_isr
 10321  0044  086E               	movf	??_isr,w
 10322  0045  0021               	movlb	1	; select bank1
 10323  0046  00C3               	movwf	isr@ScanTemp^(0+128)
 10324                           
 10325                           ;interrupts.c: 97: if(ScanTemp)
 10326  0047  0843               	movf	isr@ScanTemp^(0+128),w
 10327  0048  1903               	btfsc	3,2
 10328  0049  285B               	goto	i1l75
 10329                           
 10330                           ;interrupts.c: 98: {
 10331                           ;interrupts.c: 100: PS_2_ScanCodes[PS_2_Buffer_items] = ScanTemp;
 10332  004A  0843               	movf	isr@ScanTemp^(0+128),w
 10333  004B  0020               	movlb	0	; select bank0
 10334  004C  00EE               	movwf	??_isr
 10335  004D  0021               	movlb	1	; select bank1
 10336  004E  0850               	movf	_PS_2_Buffer_items^(0+128),w
 10337  004F  3ED5               	addlw	_PS_2_ScanCodes& (0+255)
 10338  0050  0086               	movwf	6
 10339  0051  0187               	clrf	7
 10340  0052  0020               	movlb	0	; select bank0
 10341  0053  086E               	movf	??_isr,w
 10342  0054  0081               	movwf	1
 10343                           
 10344                           ;interrupts.c: 101: PS_2_Buffer_items++;
 10345  0055  3001               	movlw	1
 10346  0056  00EE               	movwf	??_isr
 10347  0057  086E               	movf	??_isr,w
 10348  0058  0021               	movlb	1	; select bank1
 10349  0059  07D0               	addwf	_PS_2_Buffer_items^(0+128),f
 10350                           
 10351                           ;interrupts.c: 102: }
 10352  005A  285D               	goto	i1l5878
 10353  005B                     i1l75:	
 10354                           
 10355                           ;interrupts.c: 103: else
 10356                           ;interrupts.c: 104: {
 10357                           ;interrupts.c: 106: ResendLastFlag = 1;
 10358  005B  01D2               	clrf	_ResendLastFlag^(0+128)
 10359  005C  0AD2               	incf	_ResendLastFlag^(0+128),f
 10360  005D                     i1l5878:	
 10361                           
 10362                           ;interrupts.c: 107: }
 10363                           ;interrupts.c: 109: }
 10364                           ;interrupts.c: 110: PS_2_bits = 0;
 10365  005D  01D1               	clrf	_PS_2_bits^(0+128)
 10366                           
 10367                           ;interrupts.c: 111: PS_2_Read_Data_TEMP = 0;
 10368  005E  01C8               	clrf	_PS_2_Read_Data_TEMP^(0+128)
 10369  005F  01C9               	clrf	(_PS_2_Read_Data_TEMP+1)^(0+128)
 10370  0060                     i1l5880:	
 10371                           
 10372                           ;interrupts.c: 112: }
 10373                           ;interrupts.c: 113: Timer2Reset();
 10374  0060  3198  207C  3180   	fcall	_Timer2Reset
 10375                           
 10376                           ;interrupts.c: 114: PIR1bits.TMR2IF = 0;
 10377  0063  0020               	movlb	0	; select bank0
 10378  0064  1091               	bcf	17,1	;volatile
 10379                           
 10380                           ;interrupts.c: 115: PIE1bits.TMR2IE = 1;
 10381  0065  0021               	movlb	1	; select bank1
 10382  0066  1491               	bsf	17,1	;volatile
 10383                           
 10384                           ;interrupts.c: 116: Timer2ON();
 10385  0067  3198  207F  3180   	fcall	i1_Timer2ON
 10386                           
 10387                           ;interrupts.c: 117: IOCAF &= ~0b00100000;
 10388  006A  30DF               	movlw	223
 10389  006B  0020               	movlb	0	; select bank0
 10390  006C  00EE               	movwf	??_isr
 10391  006D  086E               	movf	??_isr,w
 10392  006E  0027               	movlb	7	; select bank7
 10393  006F  0593               	andwf	19,f	;volatile
 10394                           
 10395                           ;interrupts.c: 118: PS_2_ENABLE_INTERRUPT(0b00100000);
 10396  0070  3020               	movlw	32
 10397  0071  3198  20E3  3180   	fcall	i1_PS_2_ENABLE_INTERRUPT
 10398                           
 10399                           ;interrupts.c: 119: }
 10400  0074  28A7               	goto	i1l85
 10401  0075                     i1l71:	
 10402                           
 10403                           ;interrupts.c: 120: else if (IOCAF & 0b00010000)
 10404  0075  1E13               	btfss	19,4	;volatile
 10405  0076  2882               	goto	i1l78
 10406                           
 10407                           ;interrupts.c: 121: {
 10408                           ;interrupts.c: 122: PS_2_DISABLE_INTERRUPT(0b00010000);
 10409  0077  3010               	movlw	16
 10410  0078  3199  214B  3180   	fcall	i1_PS_2_DISABLE_INTERRUPT
 10411                           
 10412                           ;interrupts.c: 123: IOCAF &= ~0b00010000;
 10413  007B  30EF               	movlw	239
 10414  007C  0020               	movlb	0	; select bank0
 10415  007D  00EE               	movwf	??_isr
 10416  007E  086E               	movf	??_isr,w
 10417  007F  0027               	movlb	7	; select bank7
 10418  0080  0593               	andwf	19,f	;volatile
 10419                           
 10420                           ;interrupts.c: 124: }
 10421  0081  28A7               	goto	i1l85
 10422  0082                     i1l78:	
 10423                           
 10424                           ;interrupts.c: 125: else if (PIR1bits.RCIF)
 10425  0082  0020               	movlb	0	; select bank0
 10426  0083  1E91               	btfss	17,5	;volatile
 10427  0084  2887               	goto	i1l80
 10428                           
 10429                           ;interrupts.c: 126: {
 10430                           ;interrupts.c: 168: PIR1bits.RCIF = 0;
 10431  0085  1291               	bcf	17,5	;volatile
 10432                           
 10433                           ;interrupts.c: 169: }
 10434  0086  28A7               	goto	i1l85
 10435  0087                     i1l80:	
 10436                           
 10437                           ;interrupts.c: 170: else if(PIR1bits.TMR2IF)
 10438  0087  1C91               	btfss	17,1	;volatile
 10439  0088  28A7               	goto	i1l85
 10440                           
 10441                           ;interrupts.c: 171: {
 10442                           ;interrupts.c: 173: PIE1bits.TMR2IE = 0;
 10443  0089  0021               	movlb	1	; select bank1
 10444  008A  1091               	bcf	17,1	;volatile
 10445                           
 10446                           ;interrupts.c: 174: Timer2OFF();
 10447  008B  3198  2079  3180   	fcall	_Timer2OFF
 10448                           
 10449                           ;interrupts.c: 175: PS_2_DISABLE_INTERRUPT(0b00100000);
 10450  008E  3020               	movlw	32
 10451  008F  3199  214B  3180   	fcall	i1_PS_2_DISABLE_INTERRUPT
 10452                           
 10453                           ;interrupts.c: 176: PS_2_bits = 0;
 10454  0092  0021               	movlb	1	; select bank1
 10455  0093  01D1               	clrf	_PS_2_bits^(0+128)
 10456                           
 10457                           ;interrupts.c: 177: PS_2_Read_Data_TEMP = 0;
 10458  0094  01C8               	clrf	_PS_2_Read_Data_TEMP^(0+128)
 10459  0095  01C9               	clrf	(_PS_2_Read_Data_TEMP+1)^(0+128)
 10460                           
 10461                           ;interrupts.c: 178: if(ResendLastFlag)
 10462  0096  0852               	movf	_ResendLastFlag^(0+128),w
 10463  0097  1903               	btfsc	3,2
 10464  0098  289F               	goto	i1l5912
 10465                           
 10466                           ;interrupts.c: 179: {
 10467                           ;interrupts.c: 181: ResendLast();
 10468  0099  3198  20A0  3180   	fcall	_ResendLast
 10469                           
 10470                           ;interrupts.c: 182: ResendLastFlag = 0;
 10471  009C  0021               	movlb	1	; select bank1
 10472  009D  01D2               	clrf	_ResendLastFlag^(0+128)
 10473                           
 10474                           ;interrupts.c: 183: }
 10475  009E  28A2               	goto	i1l5914
 10476  009F                     i1l5912:	
 10477                           
 10478                           ;interrupts.c: 184: else
 10479                           ;interrupts.c: 185: {
 10480                           ;interrupts.c: 186: Process_PS2_ScanCode();
 10481  009F  3180  20E1  3180   	fcall	_Process_PS2_ScanCode
 10482  00A2                     i1l5914:	
 10483                           
 10484                           ;interrupts.c: 187: }
 10485                           ;interrupts.c: 191: PS_2_ENABLE_INTERRUPT(0b00100000);
 10486  00A2  3020               	movlw	32
 10487  00A3  3198  20E3         	fcall	i1_PS_2_ENABLE_INTERRUPT
 10488                           
 10489                           ;interrupts.c: 192: PIR1bits.TMR2IF =0;
 10490  00A5  0020               	movlb	0	; select bank0
 10491  00A6  1091               	bcf	17,1	;volatile
 10492  00A7                     i1l85:	
 10493  00A7  0020               	movlb	0	; select bank0
 10494  00A8  086F               	movf	??_isr+1,w
 10495  00A9  00FF               	movwf	127
 10496  00AA  107E               	bcf	126,0	;clear compiler interrupt flag
 10497  00AB  0009               	retfie
 10498  00AC                     __end_of_isr:	
 10499                           
 10500                           	psect	text36
 10501  187F                     __ptext36:	
 10502 ;; *************** function i1_Timer2ON *****************
 10503 ;; Defined at:
 10504 ;;		line 59 in file "Timer.c"
 10505 ;; Parameters:    Size  Location     Type
 10506 ;;		None
 10507 ;; Auto vars:     Size  Location     Type
 10508 ;;		None
 10509 ;; Return value:  Size  Location     Type
 10510 ;;		None               void
 10511 ;; Registers used:
 10512 ;;		None
 10513 ;; Tracked objects:
 10514 ;;		On entry : 0/0
 10515 ;;		On exit  : 0/0
 10516 ;;		Unchanged: 0/0
 10517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10522 ;;Total ram usage:        0 bytes
 10523 ;; Hardware stack levels used:    1
 10524 ;; This function calls:
 10525 ;;		Nothing
 10526 ;; This function is called by:
 10527 ;;		_isr
 10528 ;; This function uses a non-reentrant model
 10529 ;;
 10530                           
 10531                           
 10532                           ;psect for function i1_Timer2ON
 10533  187F                     i1_Timer2ON:	
 10534                           
 10535                           ;Timer.c: 61: T2CONbits.TMR2ON = 1;
 10536                           
 10537                           ;incstack = 0
 10538                           ; Regs used in i1_Timer2ON: []
 10539  187F  0020               	movlb	0	; select bank0
 10540  1880  151C               	bsf	28,2	;volatile
 10541  1881  0008               	return
 10542  1882                     __end_ofi1_Timer2ON:	
 10543                           
 10544                           	psect	text37
 10545  18E3                     __ptext37:	
 10546 ;; *************** function i1_PS_2_ENABLE_INTERRUPT *****************
 10547 ;; Defined at:
 10548 ;;		line 197 in file "PS_2.c"
 10549 ;; Parameters:    Size  Location     Type
 10550 ;;  DATA_CLK        1    wreg     unsigned char 
 10551 ;; Auto vars:     Size  Location     Type
 10552 ;;  DATA_CLK        1    0[COMMON] unsigned char 
 10553 ;; Return value:  Size  Location     Type
 10554 ;;		None               void
 10555 ;; Registers used:
 10556 ;;		wreg
 10557 ;; Tracked objects:
 10558 ;;		On entry : 0/0
 10559 ;;		On exit  : 0/0
 10560 ;;		Unchanged: 0/0
 10561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10563 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10565 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10566 ;;Total ram usage:        1 bytes
 10567 ;; Hardware stack levels used:    1
 10568 ;; This function calls:
 10569 ;;		Nothing
 10570 ;; This function is called by:
 10571 ;;		_isr
 10572 ;; This function uses a non-reentrant model
 10573 ;;
 10574                           
 10575                           
 10576                           ;psect for function i1_PS_2_ENABLE_INTERRUPT
 10577  18E3                     i1_PS_2_ENABLE_INTERRUPT:	
 10578                           
 10579                           ;incstack = 0
 10580                           ; Regs used in i1_PS_2_ENABLE_INTERRUPT: [wreg]
 10581                           ;i1PS_2_ENABLE_INTERRUPT@DATA_CLK stored from wreg
 10582  18E3  00F0               	movwf	i1PS_2_ENABLE_INTERRUPT@DATA_CLK
 10583                           
 10584                           ;PS_2.c: 199: if(DATA_CLK == 0b00100000)
 10585  18E4  0870               	movf	i1PS_2_ENABLE_INTERRUPT@DATA_CLK,w
 10586  18E5  3A20               	xorlw	32
 10587  18E6  1D03               	skipz
 10588  18E7  28EB               	goto	i1l610
 10589                           
 10590                           ;PS_2.c: 200: {
 10591                           ;PS_2.c: 203: IOCAN |= 0b00100000;
 10592  18E8  0027               	movlb	7	; select bank7
 10593  18E9  1692               	bsf	18,5	;volatile
 10594                           
 10595                           ;PS_2.c: 205: }
 10596  18EA  0008               	return
 10597  18EB                     i1l610:	
 10598                           
 10599                           ;PS_2.c: 206: else
 10600                           ;PS_2.c: 207: {
 10601                           ;PS_2.c: 210: IOCAN |= 0b00010000;
 10602  18EB  0027               	movlb	7	; select bank7
 10603  18EC  1612               	bsf	18,4	;volatile
 10604  18ED  0008               	return
 10605  18EE                     __end_ofi1_PS_2_ENABLE_INTERRUPT:	
 10606                           
 10607                           	psect	text38
 10608  187C                     __ptext38:	
 10609 ;; *************** function _Timer2Reset *****************
 10610 ;; Defined at:
 10611 ;;		line 81 in file "Timer.c"
 10612 ;; Parameters:    Size  Location     Type
 10613 ;;		None
 10614 ;; Auto vars:     Size  Location     Type
 10615 ;;		None
 10616 ;; Return value:  Size  Location     Type
 10617 ;;		None               void
 10618 ;; Registers used:
 10619 ;;		status,2
 10620 ;; Tracked objects:
 10621 ;;		On entry : 0/0
 10622 ;;		On exit  : 0/0
 10623 ;;		Unchanged: 0/0
 10624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10629 ;;Total ram usage:        0 bytes
 10630 ;; Hardware stack levels used:    1
 10631 ;; This function calls:
 10632 ;;		Nothing
 10633 ;; This function is called by:
 10634 ;;		_isr
 10635 ;; This function uses a non-reentrant model
 10636 ;;
 10637                           
 10638                           
 10639                           ;psect for function _Timer2Reset
 10640  187C                     _Timer2Reset:	
 10641                           
 10642                           ;Timer.c: 83: TMR2 = 0;
 10643                           
 10644                           ;incstack = 0
 10645                           ; Regs used in _Timer2Reset: [status,2]
 10646  187C  0020               	movlb	0	; select bank0
 10647  187D  019A               	clrf	26	;volatile
 10648  187E  0008               	return
 10649  187F                     __end_of_Timer2Reset:	
 10650                           
 10651                           	psect	text39
 10652  1879                     __ptext39:	
 10653 ;; *************** function _Timer2OFF *****************
 10654 ;; Defined at:
 10655 ;;		line 70 in file "Timer.c"
 10656 ;; Parameters:    Size  Location     Type
 10657 ;;		None
 10658 ;; Auto vars:     Size  Location     Type
 10659 ;;		None
 10660 ;; Return value:  Size  Location     Type
 10661 ;;		None               void
 10662 ;; Registers used:
 10663 ;;		None
 10664 ;; Tracked objects:
 10665 ;;		On entry : 0/0
 10666 ;;		On exit  : 0/0
 10667 ;;		Unchanged: 0/0
 10668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10672 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10673 ;;Total ram usage:        0 bytes
 10674 ;; Hardware stack levels used:    1
 10675 ;; This function calls:
 10676 ;;		Nothing
 10677 ;; This function is called by:
 10678 ;;		_isr
 10679 ;; This function uses a non-reentrant model
 10680 ;;
 10681                           
 10682                           
 10683                           ;psect for function _Timer2OFF
 10684  1879                     _Timer2OFF:	
 10685                           
 10686                           ;Timer.c: 72: T2CONbits.TMR2ON = 0;
 10687                           
 10688                           ;incstack = 0
 10689                           ; Regs used in _Timer2OFF: []
 10690  1879  0020               	movlb	0	; select bank0
 10691  187A  111C               	bcf	28,2	;volatile
 10692  187B  0008               	return
 10693  187C                     __end_of_Timer2OFF:	
 10694                           
 10695                           	psect	text40
 10696  18A0                     __ptext40:	
 10697 ;; *************** function _ResendLast *****************
 10698 ;; Defined at:
 10699 ;;		line 994 in file "PS_2.c"
 10700 ;; Parameters:    Size  Location     Type
 10701 ;;		None
 10702 ;; Auto vars:     Size  Location     Type
 10703 ;;		None
 10704 ;; Return value:  Size  Location     Type
 10705 ;;		None               void
 10706 ;; Registers used:
 10707 ;;		wreg, status,2, status,0, pclath, cstack
 10708 ;; Tracked objects:
 10709 ;;		On entry : 0/0
 10710 ;;		On exit  : 0/0
 10711 ;;		Unchanged: 0/0
 10712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10716 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10717 ;;Total ram usage:        0 bytes
 10718 ;; Hardware stack levels used:    1
 10719 ;; Hardware stack levels required when called:    2
 10720 ;; This function calls:
 10721 ;;		i1_PS_2_DISABLE_INTERRUPT
 10722 ;;		i1_Send_PS2
 10723 ;; This function is called by:
 10724 ;;		_isr
 10725 ;; This function uses a non-reentrant model
 10726 ;;
 10727                           
 10728                           
 10729                           ;psect for function _ResendLast
 10730  18A0                     _ResendLast:	
 10731                           
 10732                           ;PS_2.c: 996: PS_2_DISABLE_INTERRUPT(0b00100000);
 10733                           
 10734                           ;incstack = 0
 10735                           ; Regs used in _ResendLast: [wreg+status,2+status,0+pclath+cstack]
 10736  18A0  3020               	movlw	32
 10737  18A1  3199  214B  3198   	fcall	i1_PS_2_DISABLE_INTERRUPT
 10738                           
 10739                           ;PS_2.c: 998: Send_PS2(0xFE);
 10740  18A4  30FE               	movlw	254
 10741  18A5  318C  24DE         	fcall	i1_Send_PS2
 10742  18A7  0008               	return
 10743  18A8                     __end_of_ResendLast:	
 10744                           
 10745                           	psect	text41
 10746  194B                     __ptext41:	
 10747 ;; *************** function i1_PS_2_DISABLE_INTERRUPT *****************
 10748 ;; Defined at:
 10749 ;;		line 176 in file "PS_2.c"
 10750 ;; Parameters:    Size  Location     Type
 10751 ;;  DATA_CLK        1    wreg     unsigned char 
 10752 ;; Auto vars:     Size  Location     Type
 10753 ;;  DATA_CLK        1    1[COMMON] unsigned char 
 10754 ;; Return value:  Size  Location     Type
 10755 ;;		None               void
 10756 ;; Registers used:
 10757 ;;		wreg, status,2, status,0
 10758 ;; Tracked objects:
 10759 ;;		On entry : 0/0
 10760 ;;		On exit  : 0/0
 10761 ;;		Unchanged: 0/0
 10762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10764 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10765 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10766 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10767 ;;Total ram usage:        2 bytes
 10768 ;; Hardware stack levels used:    1
 10769 ;; This function calls:
 10770 ;;		Nothing
 10771 ;; This function is called by:
 10772 ;;		_isr
 10773 ;;		_ResendLast
 10774 ;; This function uses a non-reentrant model
 10775 ;;
 10776                           
 10777                           
 10778                           ;psect for function i1_PS_2_DISABLE_INTERRUPT
 10779  194B                     i1_PS_2_DISABLE_INTERRUPT:	
 10780                           
 10781                           ;incstack = 0
 10782                           ; Regs used in i1_PS_2_DISABLE_INTERRUPT: [wreg+status,2+status,0]
 10783                           ;i1PS_2_DISABLE_INTERRUPT@DATA_CLK stored from wreg
 10784  194B  00F1               	movwf	i1PS_2_DISABLE_INTERRUPT@DATA_CLK
 10785                           
 10786                           ;PS_2.c: 178: if(DATA_CLK == 0b00100000)
 10787  194C  0871               	movf	i1PS_2_DISABLE_INTERRUPT@DATA_CLK,w
 10788  194D  3A20               	xorlw	32
 10789  194E  1D03               	skipz
 10790  194F  2956               	goto	i1l5026
 10791                           
 10792                           ;PS_2.c: 179: {
 10793                           ;PS_2.c: 182: IOCAN &= ~0b00100000;
 10794  1950  30DF               	movlw	223
 10795  1951  00F0               	movwf	??i1_PS_2_DISABLE_INTERRUPT
 10796  1952  0870               	movf	??i1_PS_2_DISABLE_INTERRUPT,w
 10797  1953  0027               	movlb	7	; select bank7
 10798  1954  0592               	andwf	18,f	;volatile
 10799                           
 10800                           ;PS_2.c: 183: }
 10801  1955  0008               	return
 10802  1956                     i1l5026:	
 10803                           
 10804                           ;PS_2.c: 184: else
 10805                           ;PS_2.c: 185: {
 10806                           ;PS_2.c: 188: IOCAN &= ~0b00010000;
 10807  1956  30EF               	movlw	239
 10808  1957  00F0               	movwf	??i1_PS_2_DISABLE_INTERRUPT
 10809  1958  0870               	movf	??i1_PS_2_DISABLE_INTERRUPT,w
 10810  1959  0027               	movlb	7	; select bank7
 10811  195A  0592               	andwf	18,f	;volatile
 10812  195B  0008               	return
 10813  195C                     __end_ofi1_PS_2_DISABLE_INTERRUPT:	
 10814                           
 10815                           	psect	text42
 10816  00E1                     __ptext42:	
 10817 ;; *************** function _Process_PS2_ScanCode *****************
 10818 ;; Defined at:
 10819 ;;		line 255 in file "PS_2.c"
 10820 ;; Parameters:    Size  Location     Type
 10821 ;;		None
 10822 ;; Auto vars:     Size  Location     Type
 10823 ;;  buf            60    0[BANK3 ] unsigned char [60]
 10824 ;;  temp            1   64[BANK3 ] unsigned char 
 10825 ;; Return value:  Size  Location     Type
 10826 ;;		None               void
 10827 ;; Registers used:
 10828 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10829 ;; Tracked objects:
 10830 ;;		On entry : 0/0
 10831 ;;		On exit  : 0/0
 10832 ;;		Unchanged: 0/0
 10833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10835 ;;      Locals:         0       0       0       0      65       0       0       0       0       0       0       0       
      +0       0
 10836 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 10837 ;;      Totals:         0       0       6       0      65       0       0       0       0       0       0       0       
      +0       0
 10838 ;;Total ram usage:       71 bytes
 10839 ;; Hardware stack levels used:    1
 10840 ;; Hardware stack levels required when called:    5
 10841 ;; This function calls:
 10842 ;;		_BufferShiftBack
 10843 ;;		_Decode_Scan_Code
 10844 ;;		_Decode_Scan_Code_Function
 10845 ;;		_Decode_Scan_Code_FunctionE0
 10846 ;;		_Decode_Scan_Code_Shift
 10847 ;;		_ISNUMBER
 10848 ;;		_SetBaud
 10849 ;;		_UART_send_break
 10850 ;;		_UART_send_break_timed
 10851 ;;		___lmul
 10852 ;;		_cleanBuffer
 10853 ;;		_sprintf
 10854 ;;		i1_Send_PS2
 10855 ;;		i1_UARTchar
 10856 ;;		i1_UARTstringWAIT
 10857 ;;		i1_delayUS
 10858 ;; This function is called by:
 10859 ;;		_isr
 10860 ;; This function uses a non-reentrant model
 10861 ;;
 10862                           
 10863                           
 10864                           ;psect for function _Process_PS2_ScanCode
 10865  00E1                     _Process_PS2_ScanCode:	
 10866                           
 10867                           ;PS_2.c: 257: unsigned char temp =0;
 10868                           
 10869                           ;incstack = 0
 10870                           ; Regs used in _Process_PS2_ScanCode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10871  00E1  0023               	movlb	3	; select bank3
 10872  00E2  01E0               	clrf	Process_PS2_ScanCode@temp^(0+384)
 10873                           
 10874                           ;PS_2.c: 258: unsigned char buf[60];
 10875                           ;PS_2.c: 260: if(PS_2_Buffer_items != 0)
 10876  00E3  0021               	movlb	1	; select bank1
 10877  00E4  0850               	movf	_PS_2_Buffer_items^(0+128),w
 10878  00E5  1903               	btfsc	3,2
 10879  00E6  0008               	return
 10880  00E7                     i1l5694:	
 10881                           ;PS_2.c: 261: {
 10882                           ;PS_2.c: 263: while(PS_2_Buffer_items != 0)
 10883                           
 10884  00E7  0021               	movlb	1	; select bank1
 10885  00E8  08D0               	movf	_PS_2_Buffer_items^(0+128),f
 10886  00E9  1903               	btfsc	3,2
 10887  00EA  0008               	return
 10888                           
 10889                           ;PS_2.c: 264: {
 10890                           ;PS_2.c: 266: if(PS_2_ScanCodes[0])
 10891  00EB  0855               	movf	_PS_2_ScanCodes^(0+128),w
 10892  00EC  1903               	btfsc	3,2
 10893  00ED  2E3D               	goto	i1l5690
 10894                           
 10895                           ;PS_2.c: 267: {
 10896                           ;PS_2.c: 269: PS_2_Read_Data_First = PS_2_ScanCodes[0];
 10897  00EE  0855               	movf	_PS_2_ScanCodes^(0+128),w
 10898  00EF  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 10899  00F0  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 10900  00F1  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 10901  00F2  0023               	movlb	3	; select bank3
 10902  00F3  00E1               	movwf	_PS_2_Read_Data_First^(0+384)
 10903  00F4  0021               	movlb	1	; select bank1
 10904  00F5  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 10905  00F6  0023               	movlb	3	; select bank3
 10906  00F7  00E2               	movwf	(_PS_2_Read_Data_First+1)^(0+384)
 10907                           
 10908                           ;PS_2.c: 270: if(PS_2_Read_Data_First == 0xF0)
 10909  00F8  30F0               	movlw	240
 10910  00F9  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 10911  00FA  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 10912  00FB  1D03               	skipz
 10913  00FC  2914               	goto	i1l5216
 10914                           
 10915                           ;PS_2.c: 271: {
 10916                           ;PS_2.c: 272: PS_2_Read_Data_First = PS_2_ScanCodes[0];
 10917  00FD  0021               	movlb	1	; select bank1
 10918  00FE  0855               	movf	_PS_2_ScanCodes^(0+128),w
 10919  00FF  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 10920  0100  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 10921  0101  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 10922  0102  0023               	movlb	3	; select bank3
 10923  0103  00E1               	movwf	_PS_2_Read_Data_First^(0+384)
 10924  0104  0021               	movlb	1	; select bank1
 10925  0105  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 10926  0106  0023               	movlb	3	; select bank3
 10927  0107  00E2               	movwf	(_PS_2_Read_Data_First+1)^(0+384)
 10928                           
 10929                           ;PS_2.c: 273: PS_2_Read_Data_Second = PS_2_ScanCodes[1];
 10930  0108  0021               	movlb	1	; select bank1
 10931  0109  0856               	movf	(_PS_2_ScanCodes^(0+128)+1),w
 10932  010A  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 10933  010B  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 10934  010C  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 10935  010D  0023               	movlb	3	; select bank3
 10936  010E  00E3               	movwf	_PS_2_Read_Data_Second^(0+384)
 10937  010F  0021               	movlb	1	; select bank1
 10938  0110  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 10939  0111  0023               	movlb	3	; select bank3
 10940  0112  00E4               	movwf	(_PS_2_Read_Data_Second+1)^(0+384)
 10941  0113  2963               	goto	i1l5240
 10942  0114                     i1l5216:	
 10943                           ;PS_2.c: 276: }
 10944                           
 10945                           ;PS_2.c: 275: BufferShiftBack(PS_2_ScanCodes,2,12);
 10946                           
 10947                           ;PS_2.c: 274: PS_2_Buffer_items -= 2;
 10948                           
 10949                           
 10950                           ;PS_2.c: 277: else if(PS_2_Read_Data_First == 0xE0)
 10951  0114  30E0               	movlw	224
 10952  0115  0023               	movlb	3	; select bank3
 10953  0116  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 10954  0117  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 10955  0118  1D03               	skipz
 10956  0119  2968               	goto	i1l5244
 10957                           
 10958                           ;PS_2.c: 278: {
 10959                           ;PS_2.c: 279: PS_2_Read_Data_Second = PS_2_ScanCodes[1];
 10960  011A  0021               	movlb	1	; select bank1
 10961  011B  0856               	movf	(_PS_2_ScanCodes^(0+128)+1),w
 10962  011C  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 10963  011D  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 10964  011E  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 10965  011F  0023               	movlb	3	; select bank3
 10966  0120  00E3               	movwf	_PS_2_Read_Data_Second^(0+384)
 10967  0121  0021               	movlb	1	; select bank1
 10968  0122  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 10969  0123  0023               	movlb	3	; select bank3
 10970  0124  00E4               	movwf	(_PS_2_Read_Data_Second+1)^(0+384)
 10971                           
 10972                           ;PS_2.c: 280: if(PS_2_Read_Data_Second == 0x12)
 10973  0125  3012               	movlw	18
 10974  0126  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 10975  0127  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 10976  0128  1D03               	skipz
 10977  0129  293D               	goto	i1l5226
 10978                           
 10979                           ;PS_2.c: 281: {
 10980                           ;PS_2.c: 283: PS_2_Read_Data_First = 0;
 10981  012A  01E1               	clrf	_PS_2_Read_Data_First^(0+384)
 10982  012B  01E2               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
 10983                           
 10984                           ;PS_2.c: 284: PS_2_Read_Data_Second = 0;
 10985  012C  01E3               	clrf	_PS_2_Read_Data_Second^(0+384)
 10986  012D  01E4               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
 10987                           
 10988                           ;PS_2.c: 285: PS_2_Buffer_items -= 4;
 10989  012E  3004               	movlw	4
 10990  012F  0021               	movlb	1	; select bank1
 10991  0130  02D0               	subwf	_PS_2_Buffer_items^(0+128),f
 10992                           
 10993                           ;PS_2.c: 286: BufferShiftBack(PS_2_ScanCodes,4,12);
 10994  0131  3004               	movlw	4
 10995  0132  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 10996  0133  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 10997  0134  00F0               	movwf	BufferShiftBack@shift
 10998  0135  300C               	movlw	12
 10999  0136  00BD               	movwf	(??_Process_PS2_ScanCode+1)^(0+128)
 11000  0137  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11001  0138  00F1               	movwf	BufferShiftBack@size
 11002  0139  30D5               	movlw	_PS_2_ScanCodes& (0+255)
 11003  013A  319D  2506  3180   	fcall	_BufferShiftBack
 11004  013D                     i1l5226:	
 11005                           
 11006                           ;PS_2.c: 287: }
 11007                           ;PS_2.c: 288: if(PS_2_Read_Data_Second == 0xF0)
 11008  013D  30F0               	movlw	240
 11009  013E  0023               	movlb	3	; select bank3
 11010  013F  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11011  0140  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11012  0141  1D03               	skipz
 11013  0142  2963               	goto	i1l5240
 11014                           
 11015                           ;PS_2.c: 289: {
 11016                           ;PS_2.c: 290: PS_2_Read_Data_Third = PS_2_ScanCodes[2];
 11017  0143  0021               	movlb	1	; select bank1
 11018  0144  0857               	movf	(_PS_2_ScanCodes^(0+128)+2),w
 11019  0145  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11020  0146  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11021  0147  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11022  0148  0023               	movlb	3	; select bank3
 11023  0149  00E5               	movwf	_PS_2_Read_Data_Third^(0+384)
 11024  014A  0021               	movlb	1	; select bank1
 11025  014B  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11026  014C  0023               	movlb	3	; select bank3
 11027  014D  00E6               	movwf	(_PS_2_Read_Data_Third+1)^(0+384)
 11028                           
 11029                           ;PS_2.c: 291: if(PS_2_Read_Data_Third == 0x7C)
 11030  014E  307C               	movlw	124
 11031  014F  0665               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 11032  0150  0466               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11033  0151  1D03               	skipz
 11034  0152  295E               	goto	i1l5236
 11035                           
 11036                           ;PS_2.c: 292: {
 11037                           ;PS_2.c: 294: PS_2_Read_Data_First = 0;
 11038  0153  01E1               	clrf	_PS_2_Read_Data_First^(0+384)
 11039  0154  01E2               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
 11040                           
 11041                           ;PS_2.c: 295: PS_2_Read_Data_Second = 0;
 11042  0155  01E3               	clrf	_PS_2_Read_Data_Second^(0+384)
 11043  0156  01E4               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
 11044                           
 11045                           ;PS_2.c: 296: PS_2_Read_Data_Third = 0;
 11046  0157  01E5               	clrf	_PS_2_Read_Data_Third^(0+384)
 11047  0158  01E6               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
 11048                           
 11049                           ;PS_2.c: 297: PS_2_Buffer_items -= 6;
 11050  0159  3006               	movlw	6
 11051  015A  0021               	movlb	1	; select bank1
 11052  015B  02D0               	subwf	_PS_2_Buffer_items^(0+128),f
 11053                           
 11054                           ;PS_2.c: 298: BufferShiftBack(PS_2_ScanCodes,6,12);
 11055  015C  3006               	movlw	6
 11056  015D  297A               	goto	L19
 11057  015E                     i1l5236:	
 11058                           ;PS_2.c: 299: }
 11059                           
 11060                           
 11061                           ;PS_2.c: 300: else
 11062                           ;PS_2.c: 301: {
 11063                           ;PS_2.c: 302: PS_2_Buffer_items -= 3;
 11064  015E  3003               	movlw	3
 11065  015F  0021               	movlb	1	; select bank1
 11066  0160  02D0               	subwf	_PS_2_Buffer_items^(0+128),f
 11067                           
 11068                           ;PS_2.c: 303: BufferShiftBack(PS_2_ScanCodes,3,12);
 11069  0161  3003               	movlw	3
 11070  0162  297A               	goto	L19
 11071  0163                     i1l5240:	
 11072                           ;PS_2.c: 304: }
 11073                           ;PS_2.c: 305: }
 11074                           
 11075                           
 11076                           ;PS_2.c: 306: else
 11077                           ;PS_2.c: 307: {
 11078                           ;PS_2.c: 308: PS_2_Buffer_items -= 2;
 11079  0163  3002               	movlw	2
 11080  0164  0021               	movlb	1	; select bank1
 11081  0165  02D0               	subwf	_PS_2_Buffer_items^(0+128),f
 11082                           
 11083                           ;PS_2.c: 309: BufferShiftBack(PS_2_ScanCodes,2,12);
 11084  0166  3002               	movlw	2
 11085  0167  297A               	goto	L19
 11086  0168                     i1l5244:	
 11087                           ;PS_2.c: 310: }
 11088                           ;PS_2.c: 311: }
 11089                           
 11090                           
 11091                           ;PS_2.c: 312: else if(PS_2_Read_Data_First == 0xE1)
 11092  0168  30E1               	movlw	225
 11093  0169  0023               	movlb	3	; select bank3
 11094  016A  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11095  016B  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11096  016C  1D03               	skipz
 11097  016D  2981               	goto	i1l5252
 11098                           
 11099                           ;PS_2.c: 313: {
 11100                           ;PS_2.c: 318: PS_2_Read_Data_First = 0xE0;
 11101  016E  30E0               	movlw	224
 11102  016F  00E1               	movwf	_PS_2_Read_Data_First^(0+384)
 11103  0170  3000               	movlw	0
 11104  0171  00E2               	movwf	(_PS_2_Read_Data_First^(0+384)+1)
 11105                           
 11106                           ;PS_2.c: 319: PS_2_Read_Data_Second = 0x69;
 11107  0172  3069               	movlw	105
 11108  0173  00E3               	movwf	_PS_2_Read_Data_Second^(0+384)
 11109  0174  3000               	movlw	0
 11110  0175  00E4               	movwf	(_PS_2_Read_Data_Second^(0+384)+1)
 11111                           
 11112                           ;PS_2.c: 320: PS_2_Buffer_items -= 8;
 11113  0176  3008               	movlw	8
 11114  0177  0021               	movlb	1	; select bank1
 11115  0178  02D0               	subwf	_PS_2_Buffer_items^(0+128),f
 11116                           
 11117                           ;PS_2.c: 321: BufferShiftBack(PS_2_ScanCodes,8,12);
 11118  0179  3008               	movlw	8
 11119  017A                     L19:	
 11120  017A  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11121  017B  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11122  017C  00F0               	movwf	BufferShiftBack@shift
 11123  017D  300C               	movlw	12
 11124  017E  00BD               	movwf	(??_Process_PS2_ScanCode+1)^(0+128)
 11125  017F  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11126  0180  2989               	goto	L15
 11127  0181                     i1l5252:	
 11128                           ;PS_2.c: 322: }
 11129                           
 11130                           
 11131                           ;PS_2.c: 323: else
 11132                           ;PS_2.c: 324: {
 11133                           ;PS_2.c: 325: PS_2_Buffer_items -= 1;
 11134  0181  3001               	movlw	1
 11135  0182  0021               	movlb	1	; select bank1
 11136  0183  02D0               	subwf	_PS_2_Buffer_items^(0+128),f
 11137                           
 11138                           ;PS_2.c: 326: BufferShiftBack(PS_2_ScanCodes,1,12);
 11139  0184  01F0               	clrf	BufferShiftBack@shift
 11140  0185  0AF0               	incf	BufferShiftBack@shift,f
 11141  0186  300C               	movlw	12
 11142  0187  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11143  0188  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11144  0189                     L15:	
 11145  0189  00F1               	movwf	BufferShiftBack@size
 11146  018A  30D5               	movlw	_PS_2_ScanCodes& (0+255)
 11147  018B  319D  2506  3180   	fcall	_BufferShiftBack
 11148                           
 11149                           ;PS_2.c: 327: }
 11150                           ;PS_2.c: 330: if(PS_2_Read_Data_Third)
 11151  018E  0023               	movlb	3	; select bank3
 11152  018F  0866               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11153  0190  0465               	iorwf	_PS_2_Read_Data_Third^(0+384),w
 11154  0191  1903               	skipnz
 11155  0192  29B5               	goto	i1l5274
 11156                           
 11157                           ;PS_2.c: 331: {
 11158                           ;PS_2.c: 333: if(PS_2_Read_Data_First == 0xE0)
 11159  0193  30E0               	movlw	224
 11160  0194  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11161  0195  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11162  0196  1D03               	skipz
 11163  0197  2A8E               	goto	i1l5370
 11164                           
 11165                           ;PS_2.c: 334: {
 11166                           ;PS_2.c: 335: if(PS_2_Read_Data_Second == 0xF0)
 11167  0198  30F0               	movlw	240
 11168  0199  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11169  019A  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11170  019B  1D03               	skipz
 11171  019C  2A8E               	goto	i1l5370
 11172                           
 11173                           ;PS_2.c: 336: {
 11174                           ;PS_2.c: 337: if(PS_2_Read_Data_Third == 0x11 )
 11175  019D  3011               	movlw	17
 11176  019E  0665               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 11177  019F  0466               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11178  01A0  1D03               	skipz
 11179  01A1  29A4               	goto	i1l5266
 11180                           
 11181                           ;PS_2.c: 338: {
 11182                           ;PS_2.c: 339: LALT = 0;
 11183  01A2  01E9               	clrf	_LALT^(0+384)
 11184                           
 11185                           ;PS_2.c: 340: }
 11186  01A3  2A8E               	goto	i1l5370
 11187  01A4                     i1l5266:	
 11188                           
 11189                           ;PS_2.c: 341: else if(PS_2_Read_Data_Third == 0x14 )
 11190  01A4  3014               	movlw	20
 11191  01A5  0665               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 11192  01A6  0466               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11193  01A7  1D03               	skipz
 11194  01A8  29AC               	goto	i1l5270
 11195                           
 11196                           ;PS_2.c: 342: {
 11197                           ;PS_2.c: 343: LControl = 0;
 11198  01A9  0021               	movlb	1	; select bank1
 11199  01AA  01CE               	clrf	_LControl^(0+128)
 11200                           
 11201                           ;PS_2.c: 344: }
 11202  01AB  2A8E               	goto	i1l5370
 11203  01AC                     i1l5270:	
 11204                           
 11205                           ;PS_2.c: 345: else if(PS_2_Read_Data_Third == 0x71 )
 11206  01AC  3071               	movlw	113
 11207  01AD  0023               	movlb	3	; select bank3
 11208  01AE  0665               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 11209  01AF  0466               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11210  01B0  1D03               	skipz
 11211  01B1  2A8E               	goto	i1l5370
 11212                           
 11213                           ;PS_2.c: 346: {
 11214                           ;PS_2.c: 347: Delete = 0;
 11215  01B2  0021               	movlb	1	; select bank1
 11216  01B3  01CD               	clrf	_Delete^(0+128)
 11217                           
 11218                           ;PS_2.c: 348: }
 11219                           ;PS_2.c: 349: }
 11220                           ;PS_2.c: 350: }
 11221                           ;PS_2.c: 351: }
 11222  01B4  2A8E               	goto	i1l5370
 11223  01B5                     i1l5274:	
 11224                           
 11225                           ;PS_2.c: 352: else if(PS_2_Read_Data_Second)
 11226  01B5  0023               	movlb	3	; select bank3
 11227  01B6  0864               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11228  01B7  0463               	iorwf	_PS_2_Read_Data_Second^(0+384),w
 11229  01B8  1903               	skipnz
 11230  01B9  2A8E               	goto	i1l5370
 11231                           
 11232                           ;PS_2.c: 353: {
 11233                           ;PS_2.c: 355: if(PS_2_Read_Data_First == 0xF0)
 11234  01BA  30F0               	movlw	240
 11235  01BB  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11236  01BC  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11237  01BD  1D03               	skipz
 11238  01BE  2A39               	goto	i1l5338
 11239                           
 11240                           ;PS_2.c: 356: {
 11241                           ;PS_2.c: 358: if(PS_2_Read_Data_Second == 0x12)
 11242  01BF  3012               	movlw	18
 11243  01C0  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11244  01C1  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11245  01C2  1D03               	skipz
 11246  01C3  29C6               	goto	i1l5282
 11247                           
 11248                           ;PS_2.c: 359: {
 11249                           ;PS_2.c: 360: Right_Shift_Key =0;
 11250  01C4  01EE               	clrf	_Right_Shift_Key^(0+384)
 11251                           
 11252                           ;PS_2.c: 361: }
 11253  01C5  29D9               	goto	i1l5294
 11254  01C6                     i1l5282:	
 11255                           
 11256                           ;PS_2.c: 362: else if(PS_2_Read_Data_Second == 0x59)
 11257  01C6  3059               	movlw	89
 11258  01C7  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11259  01C8  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11260  01C9  1D03               	skipz
 11261  01CA  29CD               	goto	i1l5286
 11262                           
 11263                           ;PS_2.c: 363: {
 11264                           ;PS_2.c: 364: Left_Shift_Key =0;
 11265  01CB  01EA               	clrf	_Left_Shift_Key^(0+384)
 11266                           
 11267                           ;PS_2.c: 365: }
 11268  01CC  29D9               	goto	i1l5294
 11269  01CD                     i1l5286:	
 11270                           
 11271                           ;PS_2.c: 366: else if(PS_2_Read_Data_Second == 0x14)
 11272  01CD  3014               	movlw	20
 11273  01CE  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11274  01CF  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11275  01D0  1D03               	skipz
 11276  01D1  29D4               	goto	i1l5290
 11277                           
 11278                           ;PS_2.c: 367: {
 11279                           ;PS_2.c: 368: RControl =0;
 11280  01D2  01ED               	clrf	_RControl^(0+384)
 11281                           
 11282                           ;PS_2.c: 369: }
 11283  01D3  29D9               	goto	i1l5294
 11284  01D4                     i1l5290:	
 11285                           
 11286                           ;PS_2.c: 370: else if(PS_2_Read_Data_Second == 0x11 )
 11287  01D4  3011               	movlw	17
 11288  01D5  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11289  01D6  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11290  01D7  1903               	btfsc	3,2
 11291                           
 11292                           ;PS_2.c: 371: {
 11293                           ;PS_2.c: 372: RALT =0;
 11294  01D8  01EC               	clrf	_RALT^(0+384)
 11295  01D9                     i1l5294:	
 11296                           
 11297                           ;PS_2.c: 373: }
 11298                           ;PS_2.c: 374: if(PS_2_Read_Data_Second == 0x59 || PS_2_Read_Data_Second == 0x12)
 11299  01D9  3059               	movlw	89
 11300  01DA  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11301  01DB  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11302  01DC  1903               	skipnz
 11303  01DD  29E3               	goto	i1l5298
 11304  01DE  3012               	movlw	18
 11305  01DF  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11306  01E0  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11307  01E1  1D03               	skipz
 11308  01E2  2A31               	goto	i1l5334
 11309  01E3                     i1l5298:	
 11310                           
 11311                           ;PS_2.c: 375: {
 11312                           ;PS_2.c: 376: if(Right_Shift_Key == 0 && Left_Shift_Key == 0)
 11313  01E3  08EE               	movf	_Right_Shift_Key^(0+384),f
 11314  01E4  1D03               	skipz
 11315  01E5  2A8E               	goto	i1l5370
 11316  01E6  08EA               	movf	_Left_Shift_Key^(0+384),f
 11317  01E7  1D03               	skipz
 11318  01E8  2A8E               	goto	i1l5370
 11319                           
 11320                           ;PS_2.c: 377: {
 11321                           ;PS_2.c: 378: if(!Send_PS2(0xED))
 11322  01E9  30ED               	movlw	237
 11323  01EA  318C  24DE  3180   	fcall	i1_Send_PS2
 11324  01ED  3800               	iorlw	0
 11325  01EE  1D03               	skipz
 11326  01EF  29F9               	goto	i1l5308
 11327                           
 11328                           ;PS_2.c: 379: {
 11329                           ;PS_2.c: 380: if(!Send_PS2(0x00))
 11330  01F0  3000               	movlw	0
 11331  01F1  318C  24DE  3180   	fcall	i1_Send_PS2
 11332  01F4  3800               	iorlw	0
 11333  01F5  1D03               	skipz
 11334  01F6  29F9               	goto	i1l5308
 11335                           
 11336                           ;PS_2.c: 381: {
 11337                           ;PS_2.c: 382: Shift_Key = 0;
 11338  01F7  0023               	movlb	3	; select bank3
 11339  01F8  01EF               	clrf	_Shift_Key^(0+384)
 11340  01F9                     i1l5308:	
 11341                           
 11342                           ;PS_2.c: 383: }
 11343                           ;PS_2.c: 384: }
 11344                           ;PS_2.c: 385: if(Caps_Lock)
 11345  01F9  0023               	movlb	3	; select bank3
 11346  01FA  0868               	movf	_Caps_Lock^(0+384),w
 11347  01FB  1903               	btfsc	3,2
 11348  01FC  2A17               	goto	i1l5322
 11349                           
 11350                           ;PS_2.c: 386: {
 11351                           ;PS_2.c: 387: CapsCount=0;
 11352  01FD  01E7               	clrf	_CapsCount^(0+384)
 11353  01FE                     i1l5320:	
 11354                           ;PS_2.c: 388: while(CapsCount<10)
 11355                           
 11356  01FE  300A               	movlw	10
 11357  01FF  0267               	subwf	_CapsCount^(0+384),w
 11358  0200  1803               	btfsc	3,0
 11359  0201  2A8E               	goto	i1l5370
 11360                           
 11361                           ;PS_2.c: 389: {
 11362                           ;PS_2.c: 390: if(!Send_PS2(0xED))
 11363  0202  30ED               	movlw	237
 11364  0203  318C  24DE  3180   	fcall	i1_Send_PS2
 11365  0206  3800               	iorlw	0
 11366  0207  1D03               	skipz
 11367  0208  2A10               	goto	i1l5318
 11368                           
 11369                           ;PS_2.c: 391: {
 11370                           ;PS_2.c: 392: if(!Send_PS2(0x04))
 11371  0209  3004               	movlw	4
 11372  020A  318C  24DE  3180   	fcall	i1_Send_PS2
 11373  020D  3800               	iorlw	0
 11374  020E  1903               	btfsc	3,2
 11375  020F  2A8E               	goto	i1l5370
 11376  0210                     i1l5318:	
 11377                           ;PS_2.c: 393: {
 11378                           ;PS_2.c: 394: break;
 11379                           
 11380                           
 11381                           ;PS_2.c: 395: }
 11382                           ;PS_2.c: 396: }
 11383                           ;PS_2.c: 397: CapsCount++;
 11384  0210  3001               	movlw	1
 11385  0211  0021               	movlb	1	; select bank1
 11386  0212  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11387  0213  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11388  0214  0023               	movlb	3	; select bank3
 11389  0215  07E7               	addwf	_CapsCount^(0+384),f
 11390  0216  29FE               	goto	i1l5320
 11391  0217                     i1l5322:	
 11392                           ;PS_2.c: 398: }
 11393                           ;PS_2.c: 399: }
 11394                           
 11395                           
 11396                           ;PS_2.c: 400: else
 11397                           ;PS_2.c: 401: {
 11398                           ;PS_2.c: 402: CapsCount=0;
 11399  0217  01E7               	clrf	_CapsCount^(0+384)
 11400  0218                     i1l5332:	
 11401                           ;PS_2.c: 403: while(CapsCount<10)
 11402                           
 11403  0218  300A               	movlw	10
 11404  0219  0267               	subwf	_CapsCount^(0+384),w
 11405  021A  1803               	btfsc	3,0
 11406  021B  2A8E               	goto	i1l5370
 11407                           
 11408                           ;PS_2.c: 404: {
 11409                           ;PS_2.c: 405: if(!Send_PS2(0xED))
 11410  021C  30ED               	movlw	237
 11411  021D  318C  24DE  3180   	fcall	i1_Send_PS2
 11412  0220  3800               	iorlw	0
 11413  0221  1D03               	skipz
 11414  0222  2A2A               	goto	i1l5330
 11415                           
 11416                           ;PS_2.c: 406: {
 11417                           ;PS_2.c: 407: if(!Send_PS2(0x00))
 11418  0223  3000               	movlw	0
 11419  0224  318C  24DE  3180   	fcall	i1_Send_PS2
 11420  0227  3800               	iorlw	0
 11421  0228  1903               	btfsc	3,2
 11422  0229  2A8E               	goto	i1l5370
 11423  022A                     i1l5330:	
 11424                           ;PS_2.c: 408: {
 11425                           ;PS_2.c: 409: break;
 11426                           
 11427                           
 11428                           ;PS_2.c: 410: }
 11429                           ;PS_2.c: 411: }
 11430                           ;PS_2.c: 412: CapsCount++;
 11431  022A  3001               	movlw	1
 11432  022B  0021               	movlb	1	; select bank1
 11433  022C  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11434  022D  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11435  022E  0023               	movlb	3	; select bank3
 11436  022F  07E7               	addwf	_CapsCount^(0+384),f
 11437  0230  2A18               	goto	i1l5332
 11438  0231                     i1l5334:	
 11439                           ;PS_2.c: 413: }
 11440                           ;PS_2.c: 414: }
 11441                           ;PS_2.c: 415: }
 11442                           ;PS_2.c: 416: }
 11443                           
 11444                           
 11445                           ;PS_2.c: 417: else if(PS_2_Read_Data_Second == 0x58)
 11446  0231  3058               	movlw	88
 11447  0232  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11448  0233  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11449  0234  1D03               	skipz
 11450  0235  2A8E               	goto	i1l5370
 11451                           
 11452                           ;PS_2.c: 418: {
 11453                           ;PS_2.c: 419: Caps_Lock_Key = 0;
 11454  0236  0021               	movlb	1	; select bank1
 11455  0237  01CB               	clrf	_Caps_Lock_Key^(0+128)
 11456                           
 11457                           ;PS_2.c: 420: }
 11458                           ;PS_2.c: 421: }
 11459  0238  2A8E               	goto	i1l5370
 11460  0239                     i1l5338:	
 11461                           
 11462                           ;PS_2.c: 422: else if(PS_2_Read_Data_First == 0xE0)
 11463  0239  30E0               	movlw	224
 11464  023A  0023               	movlb	3	; select bank3
 11465  023B  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11466  023C  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11467  023D  1D03               	skipz
 11468  023E  2A8E               	goto	i1l5370
 11469                           
 11470                           ;PS_2.c: 423: {
 11471                           ;PS_2.c: 425: if(PS_2_Read_Data_Second == 0x11 )
 11472  023F  3011               	movlw	17
 11473  0240  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11474  0241  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11475  0242  1D03               	skipz
 11476  0243  2A47               	goto	i1l5344
 11477                           
 11478                           ;PS_2.c: 426: {
 11479                           ;PS_2.c: 427: LALT = 1;
 11480  0244  01E9               	clrf	_LALT^(0+384)
 11481  0245  0AE9               	incf	_LALT^(0+384),f
 11482                           
 11483                           ;PS_2.c: 428: }
 11484  0246  2A59               	goto	i1l680
 11485  0247                     i1l5344:	
 11486                           
 11487                           ;PS_2.c: 429: else if(PS_2_Read_Data_Second == 0x14 )
 11488  0247  3014               	movlw	20
 11489  0248  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11490  0249  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11491  024A  1D03               	skipz
 11492  024B  2A50               	goto	i1l5348
 11493                           
 11494                           ;PS_2.c: 430: {
 11495                           ;PS_2.c: 431: LControl = 1;
 11496  024C  0021               	movlb	1	; select bank1
 11497  024D  01CE               	clrf	_LControl^(0+128)
 11498  024E  0ACE               	incf	_LControl^(0+128),f
 11499                           
 11500                           ;PS_2.c: 432: }
 11501  024F  2A59               	goto	i1l680
 11502  0250                     i1l5348:	
 11503                           
 11504                           ;PS_2.c: 433: else if(PS_2_Read_Data_Second == 0x71 )
 11505  0250  3071               	movlw	113
 11506  0251  0023               	movlb	3	; select bank3
 11507  0252  0663               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11508  0253  0464               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11509  0254  1D03               	skipz
 11510  0255  2A59               	goto	i1l680
 11511                           
 11512                           ;PS_2.c: 434: {
 11513                           ;PS_2.c: 435: Delete = 1;
 11514  0256  0021               	movlb	1	; select bank1
 11515  0257  01CD               	clrf	_Delete^(0+128)
 11516  0258  0ACD               	incf	_Delete^(0+128),f
 11517  0259                     i1l680:	
 11518                           
 11519                           ;PS_2.c: 436: }
 11520                           ;PS_2.c: 437: if(((RControl || LControl) + (LALT || RALT) + Delete) != 3)
 11521  0259  0023               	movlb	3	; select bank3
 11522  025A  01DC               	clrf	_Process_PS2_ScanCode$803^(0+384)
 11523  025B  0ADC               	incf	_Process_PS2_ScanCode$803^(0+384),f
 11524  025C  08E9               	movf	_LALT^(0+384),f
 11525  025D  1D03               	skipz
 11526  025E  2A63               	goto	i1l5358
 11527  025F  08EC               	movf	_RALT^(0+384),f
 11528  0260  1D03               	skipz
 11529  0261  2A63               	goto	i1l5358
 11530  0262  01DC               	clrf	_Process_PS2_ScanCode$803^(0+384)
 11531  0263                     i1l5358:	
 11532  0263  01DD               	clrf	_Process_PS2_ScanCode$804^(0+384)
 11533  0264  0ADD               	incf	_Process_PS2_ScanCode$804^(0+384),f
 11534  0265  08ED               	movf	_RControl^(0+384),f
 11535  0266  1D03               	skipz
 11536  0267  2A6E               	goto	i1l5366
 11537  0268  0021               	movlb	1	; select bank1
 11538  0269  08CE               	movf	_LControl^(0+128),f
 11539  026A  1D03               	skipz
 11540  026B  2A6E               	goto	i1l5366
 11541  026C  0023               	movlb	3	; select bank3
 11542  026D  01DD               	clrf	_Process_PS2_ScanCode$804^(0+384)
 11543  026E                     i1l5366:	
 11544  026E  0021               	movlb	1	; select bank1
 11545  026F  084D               	movf	_Delete^(0+128),w
 11546  0270  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11547  0271  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 11548  0272  0023               	movlb	3	; select bank3
 11549  0273  085D               	movf	_Process_PS2_ScanCode$804^(0+384),w
 11550  0274  075C               	addwf	_Process_PS2_ScanCode$803^(0+384),w
 11551  0275  0021               	movlb	1	; select bank1
 11552  0276  00BE               	movwf	(??_Process_PS2_ScanCode+2)^(0+128)
 11553  0277  01BF               	clrf	((??_Process_PS2_ScanCode+2)^(0+128)+1)
 11554  0278  0DBF               	rlf	(??_Process_PS2_ScanCode+3)^(0+128),f
 11555  0279  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11556  027A  073E               	addwf	(??_Process_PS2_ScanCode+2)^(0+128),w
 11557  027B  00C0               	movwf	(??_Process_PS2_ScanCode+4)^(0+128)
 11558  027C  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 11559  027D  3D3F               	addwfc	(??_Process_PS2_ScanCode+3)^(0+128),w
 11560  027E  00C1               	movwf	(??_Process_PS2_ScanCode+5)^(0+128)
 11561  027F  3003               	movlw	3
 11562  0280  0640               	xorwf	(??_Process_PS2_ScanCode+4)^(0+128),w
 11563  0281  0441               	iorwf	(??_Process_PS2_ScanCode+5)^(0+128),w
 11564  0282  1903               	skipnz
 11565  0283  2A8E               	goto	i1l5370
 11566                           
 11567                           ;PS_2.c: 438: {
 11568                           ;PS_2.c: 440: temp = Decode_Scan_Code_FunctionE0(PS_2_Read_Data_Second);
 11569  0284  0023               	movlb	3	; select bank3
 11570  0285  0863               	movf	_PS_2_Read_Data_Second^(0+384),w
 11571  0286  3199  216E  3180   	fcall	_Decode_Scan_Code_FunctionE0
 11572  0289  0021               	movlb	1	; select bank1
 11573  028A  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11574  028B  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11575  028C  0023               	movlb	3	; select bank3
 11576  028D  00E0               	movwf	Process_PS2_ScanCode@temp^(0+384)
 11577  028E                     i1l5370:	
 11578                           
 11579                           ;PS_2.c: 441: }
 11580                           ;PS_2.c: 442: }
 11581                           ;PS_2.c: 443: }
 11582                           ;PS_2.c: 444: if(PS_2_Read_Data_First != 0 && PS_2_Read_Data_Second == 0 &&
 11583                           ;PS_2.c: 445: PS_2_Read_Data_Third == 0)
 11584  028E  0023               	movlb	3	; select bank3
 11585  028F  0862               	movf	(_PS_2_Read_Data_First+1)^(0+384),w
 11586  0290  0461               	iorwf	_PS_2_Read_Data_First^(0+384),w
 11587  0291  1903               	skipnz
 11588  0292  2BDE               	goto	i1l5518
 11589  0293  0864               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11590  0294  0463               	iorwf	_PS_2_Read_Data_Second^(0+384),w
 11591  0295  1D03               	skipz
 11592  0296  2BDE               	goto	i1l5518
 11593  0297  0866               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11594  0298  0465               	iorwf	_PS_2_Read_Data_Third^(0+384),w
 11595  0299  1D03               	skipz
 11596  029A  2BDE               	goto	i1l5518
 11597                           
 11598                           ;PS_2.c: 446: {
 11599                           ;PS_2.c: 448: if(PS_2_Read_Data_First == 0x12)
 11600  029B  3012               	movlw	18
 11601  029C  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11602  029D  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11603  029E  1D03               	skipz
 11604  029F  2AA3               	goto	i1l5380
 11605                           
 11606                           ;PS_2.c: 449: {
 11607                           ;PS_2.c: 450: Right_Shift_Key = 1;
 11608  02A0  01EE               	clrf	_Right_Shift_Key^(0+384)
 11609  02A1  0AEE               	incf	_Right_Shift_Key^(0+384),f
 11610                           
 11611                           ;PS_2.c: 451: }
 11612  02A2  2AAA               	goto	i1l5384
 11613  02A3                     i1l5380:	
 11614                           
 11615                           ;PS_2.c: 452: else if(PS_2_Read_Data_First == 0x59)
 11616  02A3  3059               	movlw	89
 11617  02A4  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11618  02A5  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11619  02A6  1D03               	skipz
 11620  02A7  2AAA               	goto	i1l5384
 11621                           
 11622                           ;PS_2.c: 453: {
 11623                           ;PS_2.c: 454: Left_Shift_Key = 1;
 11624  02A8  01EA               	clrf	_Left_Shift_Key^(0+384)
 11625  02A9  0AEA               	incf	_Left_Shift_Key^(0+384),f
 11626  02AA                     i1l5384:	
 11627                           
 11628                           ;PS_2.c: 455: }
 11629                           ;PS_2.c: 456: if((Right_Shift_Key == 1 && Right_Shift_Key_old == 0) || (Left_Shift_Key =
      +                          = 1 && Left_Shift_Key_old == 0))
 11630  02AA  086E               	movf	_Right_Shift_Key^(0+384),w
 11631  02AB  3A01               	xorlw	1
 11632  02AC  1D03               	skipz
 11633  02AD  2AB2               	goto	i1l5388
 11634  02AE  0021               	movlb	1	; select bank1
 11635  02AF  0853               	movf	_Right_Shift_Key_old^(0+128),w
 11636  02B0  1903               	btfsc	3,2
 11637  02B1  2ABB               	goto	i1l5392
 11638  02B2                     i1l5388:	
 11639  02B2  0023               	movlb	3	; select bank3
 11640  02B3  086A               	movf	_Left_Shift_Key^(0+384),w
 11641  02B4  3A01               	xorlw	1
 11642  02B5  1D03               	skipz
 11643  02B6  2AFD               	goto	i1l5420
 11644  02B7  0021               	movlb	1	; select bank1
 11645  02B8  08CF               	movf	_Left_Shift_Key_old^(0+128),f
 11646  02B9  1D03               	skipz
 11647  02BA  2AFD               	goto	i1l5420
 11648  02BB                     i1l5392:	
 11649                           
 11650                           ;PS_2.c: 457: {
 11651                           ;PS_2.c: 459: if(!Send_PS2(0xED))
 11652  02BB  30ED               	movlw	237
 11653  02BC  318C  24DE  3180   	fcall	i1_Send_PS2
 11654  02BF  3800               	iorlw	0
 11655  02C0  1D03               	skipz
 11656  02C1  2AFD               	goto	i1l5420
 11657                           
 11658                           ;PS_2.c: 460: {
 11659                           ;PS_2.c: 461: if(Caps_Lock)
 11660  02C2  0023               	movlb	3	; select bank3
 11661  02C3  0868               	movf	_Caps_Lock^(0+384),w
 11662  02C4  1903               	btfsc	3,2
 11663  02C5  2AE0               	goto	i1l5408
 11664                           
 11665                           ;PS_2.c: 462: {
 11666                           ;PS_2.c: 463: CapsCount=0;
 11667  02C6  01E7               	clrf	_CapsCount^(0+384)
 11668  02C7                     i1l5406:	
 11669                           ;PS_2.c: 464: while(CapsCount<10)
 11670                           
 11671  02C7  300A               	movlw	10
 11672  02C8  0267               	subwf	_CapsCount^(0+384),w
 11673  02C9  1803               	btfsc	3,0
 11674  02CA  2AFD               	goto	i1l5420
 11675                           
 11676                           ;PS_2.c: 465: {
 11677                           ;PS_2.c: 466: if(!Send_PS2(0xED))
 11678  02CB  30ED               	movlw	237
 11679  02CC  318C  24DE  3180   	fcall	i1_Send_PS2
 11680  02CF  3800               	iorlw	0
 11681  02D0  1D03               	skipz
 11682  02D1  2AD9               	goto	i1l5404
 11683                           
 11684                           ;PS_2.c: 467: {
 11685                           ;PS_2.c: 468: if(!Send_PS2(0x05))
 11686  02D2  3005               	movlw	5
 11687  02D3  318C  24DE  3180   	fcall	i1_Send_PS2
 11688  02D6  3800               	iorlw	0
 11689  02D7  1903               	btfsc	3,2
 11690  02D8  2AFA               	goto	i1l5414
 11691  02D9                     i1l5404:	
 11692                           ;PS_2.c: 471: break;
 11693                           
 11694                           ;PS_2.c: 469: {
 11695                           ;PS_2.c: 470: Shift_Key = 1;
 11696                           
 11697                           
 11698                           ;PS_2.c: 472: }
 11699                           ;PS_2.c: 473: }
 11700                           ;PS_2.c: 474: CapsCount++;
 11701  02D9  3001               	movlw	1
 11702  02DA  0021               	movlb	1	; select bank1
 11703  02DB  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11704  02DC  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11705  02DD  0023               	movlb	3	; select bank3
 11706  02DE  07E7               	addwf	_CapsCount^(0+384),f
 11707  02DF  2AC7               	goto	i1l5406
 11708  02E0                     i1l5408:	
 11709                           ;PS_2.c: 475: }
 11710                           ;PS_2.c: 476: }
 11711                           
 11712                           
 11713                           ;PS_2.c: 477: else
 11714                           ;PS_2.c: 478: {
 11715                           ;PS_2.c: 479: CapsCount=0;
 11716  02E0  01E7               	clrf	_CapsCount^(0+384)
 11717                           
 11718                           ;PS_2.c: 480: while(CapsCount<10)
 11719  02E1  2AE8               	goto	i1l5418
 11720  02E2                     i1l5416:	
 11721                           ;PS_2.c: 487: break;
 11722                           
 11723                           
 11724                           ;PS_2.c: 488: }
 11725                           ;PS_2.c: 489: }
 11726                           ;PS_2.c: 490: CapsCount++;
 11727  02E2  3001               	movlw	1
 11728  02E3  0021               	movlb	1	; select bank1
 11729  02E4  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11730  02E5  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11731  02E6  0023               	movlb	3	; select bank3
 11732  02E7  07E7               	addwf	_CapsCount^(0+384),f
 11733  02E8                     i1l5418:	
 11734  02E8  300A               	movlw	10
 11735  02E9  0267               	subwf	_CapsCount^(0+384),w
 11736  02EA  1803               	btfsc	3,0
 11737  02EB  2AFD               	goto	i1l5420
 11738                           
 11739                           ;PS_2.c: 481: {
 11740                           ;PS_2.c: 482: if(!Send_PS2(0xED))
 11741  02EC  30ED               	movlw	237
 11742  02ED  318C  24DE  3180   	fcall	i1_Send_PS2
 11743  02F0  3800               	iorlw	0
 11744  02F1  1D03               	skipz
 11745  02F2  2AE2               	goto	i1l5416
 11746                           
 11747                           ;PS_2.c: 483: {
 11748                           ;PS_2.c: 484: if(!Send_PS2(0x01))
 11749  02F3  3001               	movlw	1
 11750  02F4  318C  24DE  3180   	fcall	i1_Send_PS2
 11751  02F7  3800               	iorlw	0
 11752  02F8  1D03               	skipz
 11753  02F9  2AE2               	goto	i1l5416
 11754  02FA                     i1l5414:	
 11755                           
 11756                           ;PS_2.c: 485: {
 11757                           ;PS_2.c: 486: Shift_Key = 1;
 11758  02FA  0023               	movlb	3	; select bank3
 11759  02FB  01EF               	clrf	_Shift_Key^(0+384)
 11760  02FC  0AEF               	incf	_Shift_Key^(0+384),f
 11761  02FD                     i1l5420:	
 11762                           
 11763                           ;PS_2.c: 491: }
 11764                           ;PS_2.c: 492: }
 11765                           ;PS_2.c: 493: }
 11766                           ;PS_2.c: 494: }
 11767                           ;PS_2.c: 495: if(PS_2_Read_Data_First == 0x14 )
 11768  02FD  3014               	movlw	20
 11769  02FE  0023               	movlb	3	; select bank3
 11770  02FF  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11771  0300  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11772  0301  1D03               	skipz
 11773  0302  2B06               	goto	i1l5424
 11774                           
 11775                           ;PS_2.c: 496: {
 11776                           ;PS_2.c: 497: RControl = 1;
 11777  0303  01ED               	clrf	_RControl^(0+384)
 11778  0304  0AED               	incf	_RControl^(0+384),f
 11779                           
 11780                           ;PS_2.c: 498: }
 11781  0305  2BD1               	goto	i1l5514
 11782  0306                     i1l5424:	
 11783                           
 11784                           ;PS_2.c: 499: else if(PS_2_Read_Data_First == 0x11 )
 11785  0306  3011               	movlw	17
 11786  0307  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11787  0308  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11788  0309  1D03               	skipz
 11789  030A  2B0E               	goto	i1l5428
 11790                           
 11791                           ;PS_2.c: 500: {
 11792                           ;PS_2.c: 501: RALT = 1;
 11793  030B  01EC               	clrf	_RALT^(0+384)
 11794  030C  0AEC               	incf	_RALT^(0+384),f
 11795                           
 11796                           ;PS_2.c: 502: }
 11797  030D  2BD1               	goto	i1l5514
 11798  030E                     i1l5428:	
 11799                           
 11800                           ;PS_2.c: 503: else if(PS_2_Read_Data_First == 0xEE )
 11801  030E  30EE               	movlw	238
 11802  030F  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11803  0310  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11804  0311  1D03               	skipz
 11805  0312  2B17               	goto	i1l5432
 11806                           
 11807                           ;PS_2.c: 504: {
 11808                           ;PS_2.c: 505: ECHO = 1;
 11809  0313  0024               	movlb	4	; select bank4
 11810  0314  01DF               	clrf	_ECHO^(0+512)
 11811  0315  0ADF               	incf	_ECHO^(0+512),f
 11812                           
 11813                           ;PS_2.c: 506: }
 11814  0316  2BD1               	goto	i1l5514
 11815  0317                     i1l5432:	
 11816                           
 11817                           ;PS_2.c: 507: else if(PS_2_Read_Data_First == 0x58)
 11818  0317  3058               	movlw	88
 11819  0318  0023               	movlb	3	; select bank3
 11820  0319  0661               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11821  031A  0462               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11822  031B  1D03               	skipz
 11823  031C  2B9C               	goto	i1l5492
 11824                           
 11825                           ;PS_2.c: 508: {
 11826                           ;PS_2.c: 509: Caps_Lock_Key = 1;
 11827  031D  0021               	movlb	1	; select bank1
 11828  031E  01CB               	clrf	_Caps_Lock_Key^(0+128)
 11829  031F  0ACB               	incf	_Caps_Lock_Key^(0+128),f
 11830                           
 11831                           ;PS_2.c: 510: if(Caps_Lock_Key_old == 0)
 11832  0320  08CC               	movf	_Caps_Lock_Key_old^(0+128),f
 11833  0321  1D03               	skipz
 11834  0322  2BD1               	goto	i1l5514
 11835                           
 11836                           ;PS_2.c: 511: {
 11837                           ;PS_2.c: 512: if(Caps_Lock)
 11838  0323  0023               	movlb	3	; select bank3
 11839  0324  0868               	movf	_Caps_Lock^(0+384),w
 11840  0325  1903               	btfsc	3,2
 11841  0326  2B61               	goto	i1l5466
 11842                           
 11843                           ;PS_2.c: 513: {
 11844                           ;PS_2.c: 514: if(Shift_Key)
 11845  0327  086F               	movf	_Shift_Key^(0+384),w
 11846  0328  1903               	btfsc	3,2
 11847  0329  2B44               	goto	i1l5454
 11848                           
 11849                           ;PS_2.c: 515: {
 11850                           ;PS_2.c: 516: CapsCount=0;
 11851  032A  01E7               	clrf	_CapsCount^(0+384)
 11852  032B                     i1l5452:	
 11853                           ;PS_2.c: 517: while(CapsCount<10)
 11854                           
 11855  032B  300A               	movlw	10
 11856  032C  0267               	subwf	_CapsCount^(0+384),w
 11857  032D  1803               	btfsc	3,0
 11858  032E  2BD1               	goto	i1l5514
 11859                           
 11860                           ;PS_2.c: 518: {
 11861                           ;PS_2.c: 519: if(!Send_PS2(0xED))
 11862  032F  30ED               	movlw	237
 11863  0330  318C  24DE  3180   	fcall	i1_Send_PS2
 11864  0333  3800               	iorlw	0
 11865  0334  1D03               	skipz
 11866  0335  2B3D               	goto	i1l5450
 11867                           
 11868                           ;PS_2.c: 520: {
 11869                           ;PS_2.c: 521: if(!Send_PS2(0x01))
 11870  0336  3001               	movlw	1
 11871  0337  318C  24DE  3180   	fcall	i1_Send_PS2
 11872  033A  3800               	iorlw	0
 11873  033B  1903               	btfsc	3,2
 11874  033C  2B57               	goto	i1l5460
 11875  033D                     i1l5450:	
 11876                           ;PS_2.c: 524: break;
 11877                           
 11878                           ;PS_2.c: 522: {
 11879                           ;PS_2.c: 523: Caps_Lock =0;
 11880                           
 11881                           
 11882                           ;PS_2.c: 525: }
 11883                           ;PS_2.c: 526: }
 11884                           ;PS_2.c: 527: CapsCount++;
 11885  033D  3001               	movlw	1
 11886  033E  0021               	movlb	1	; select bank1
 11887  033F  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11888  0340  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11889  0341  0023               	movlb	3	; select bank3
 11890  0342  07E7               	addwf	_CapsCount^(0+384),f
 11891  0343  2B2B               	goto	i1l5452
 11892  0344                     i1l5454:	
 11893                           ;PS_2.c: 528: }
 11894                           ;PS_2.c: 529: }
 11895                           
 11896                           
 11897                           ;PS_2.c: 530: else
 11898                           ;PS_2.c: 531: {
 11899                           ;PS_2.c: 532: CapsCount=0;
 11900  0344  01E7               	clrf	_CapsCount^(0+384)
 11901  0345                     i1l5464:	
 11902                           ;PS_2.c: 533: while(CapsCount<10)
 11903                           
 11904  0345  300A               	movlw	10
 11905  0346  0267               	subwf	_CapsCount^(0+384),w
 11906  0347  1803               	btfsc	3,0
 11907  0348  2BD1               	goto	i1l5514
 11908                           
 11909                           ;PS_2.c: 534: {
 11910                           ;PS_2.c: 535: if(!Send_PS2(0xED))
 11911  0349  30ED               	movlw	237
 11912  034A  318C  24DE  3180   	fcall	i1_Send_PS2
 11913  034D  3800               	iorlw	0
 11914  034E  1D03               	skipz
 11915  034F  2B5A               	goto	i1l5462
 11916                           
 11917                           ;PS_2.c: 536: {
 11918                           ;PS_2.c: 537: if(!Send_PS2(0x00))
 11919  0350  3000               	movlw	0
 11920  0351  318C  24DE  3180   	fcall	i1_Send_PS2
 11921  0354  3800               	iorlw	0
 11922  0355  1D03               	skipz
 11923  0356  2B5A               	goto	i1l5462
 11924  0357                     i1l5460:	
 11925                           
 11926                           ;PS_2.c: 538: {
 11927                           ;PS_2.c: 539: Caps_Lock =0;
 11928  0357  0023               	movlb	3	; select bank3
 11929  0358  01E8               	clrf	_Caps_Lock^(0+384)
 11930                           
 11931                           ;PS_2.c: 540: break;
 11932  0359  2BD1               	goto	i1l5514
 11933  035A                     i1l5462:	
 11934                           
 11935                           ;PS_2.c: 541: }
 11936                           ;PS_2.c: 542: }
 11937                           ;PS_2.c: 543: CapsCount++;
 11938  035A  3001               	movlw	1
 11939  035B  0021               	movlb	1	; select bank1
 11940  035C  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11941  035D  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11942  035E  0023               	movlb	3	; select bank3
 11943  035F  07E7               	addwf	_CapsCount^(0+384),f
 11944  0360  2B45               	goto	i1l5464
 11945  0361                     i1l5466:	
 11946                           ;PS_2.c: 544: }
 11947                           ;PS_2.c: 545: }
 11948                           ;PS_2.c: 546: }
 11949                           
 11950                           
 11951                           ;PS_2.c: 547: else
 11952                           ;PS_2.c: 548: {
 11953                           ;PS_2.c: 549: if(Shift_Key)
 11954  0361  086F               	movf	_Shift_Key^(0+384),w
 11955  0362  1903               	btfsc	3,2
 11956  0363  2B7E               	goto	i1l5480
 11957                           
 11958                           ;PS_2.c: 550: {
 11959                           ;PS_2.c: 551: CapsCount=0;
 11960  0364  01E7               	clrf	_CapsCount^(0+384)
 11961  0365                     i1l5478:	
 11962                           ;PS_2.c: 552: while(CapsCount<10)
 11963                           
 11964  0365  300A               	movlw	10
 11965  0366  0267               	subwf	_CapsCount^(0+384),w
 11966  0367  1803               	btfsc	3,0
 11967  0368  2BD1               	goto	i1l5514
 11968                           
 11969                           ;PS_2.c: 553: {
 11970                           ;PS_2.c: 554: if(!Send_PS2(0xED))
 11971  0369  30ED               	movlw	237
 11972  036A  318C  24DE  3180   	fcall	i1_Send_PS2
 11973  036D  3800               	iorlw	0
 11974  036E  1D03               	skipz
 11975  036F  2B77               	goto	i1l5476
 11976                           
 11977                           ;PS_2.c: 555: {
 11978                           ;PS_2.c: 556: if(!Send_PS2(0x05))
 11979  0370  3005               	movlw	5
 11980  0371  318C  24DE  3180   	fcall	i1_Send_PS2
 11981  0374  3800               	iorlw	0
 11982  0375  1903               	btfsc	3,2
 11983  0376  2B91               	goto	i1l5486
 11984  0377                     i1l5476:	
 11985                           ;PS_2.c: 559: break;
 11986                           
 11987                           ;PS_2.c: 557: {
 11988                           ;PS_2.c: 558: Caps_Lock =1;
 11989                           
 11990                           
 11991                           ;PS_2.c: 560: }
 11992                           ;PS_2.c: 561: }
 11993                           ;PS_2.c: 562: CapsCount++;
 11994  0377  3001               	movlw	1
 11995  0378  0021               	movlb	1	; select bank1
 11996  0379  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 11997  037A  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 11998  037B  0023               	movlb	3	; select bank3
 11999  037C  07E7               	addwf	_CapsCount^(0+384),f
 12000  037D  2B65               	goto	i1l5478
 12001  037E                     i1l5480:	
 12002                           ;PS_2.c: 563: }
 12003                           ;PS_2.c: 564: }
 12004                           
 12005                           
 12006                           ;PS_2.c: 565: else
 12007                           ;PS_2.c: 566: {
 12008                           ;PS_2.c: 567: CapsCount=0;
 12009  037E  01E7               	clrf	_CapsCount^(0+384)
 12010  037F                     i1l5490:	
 12011                           ;PS_2.c: 568: while(CapsCount<10)
 12012                           
 12013  037F  300A               	movlw	10
 12014  0380  0267               	subwf	_CapsCount^(0+384),w
 12015  0381  1803               	btfsc	3,0
 12016  0382  2BD1               	goto	i1l5514
 12017                           
 12018                           ;PS_2.c: 569: {
 12019                           ;PS_2.c: 570: if(!Send_PS2(0xED))
 12020  0383  30ED               	movlw	237
 12021  0384  318C  24DE  3180   	fcall	i1_Send_PS2
 12022  0387  3800               	iorlw	0
 12023  0388  1D03               	skipz
 12024  0389  2B95               	goto	i1l5488
 12025                           
 12026                           ;PS_2.c: 571: {
 12027                           ;PS_2.c: 572: if(!Send_PS2(0x04))
 12028  038A  3004               	movlw	4
 12029  038B  318C  24DE  3180   	fcall	i1_Send_PS2
 12030  038E  3800               	iorlw	0
 12031  038F  1D03               	skipz
 12032  0390  2B95               	goto	i1l5488
 12033  0391                     i1l5486:	
 12034                           
 12035                           ;PS_2.c: 573: {
 12036                           ;PS_2.c: 574: Caps_Lock =1;
 12037  0391  0023               	movlb	3	; select bank3
 12038  0392  01E8               	clrf	_Caps_Lock^(0+384)
 12039  0393  0AE8               	incf	_Caps_Lock^(0+384),f
 12040                           
 12041                           ;PS_2.c: 575: break;
 12042  0394  2BD1               	goto	i1l5514
 12043  0395                     i1l5488:	
 12044                           
 12045                           ;PS_2.c: 576: }
 12046                           ;PS_2.c: 577: }
 12047                           ;PS_2.c: 578: CapsCount++;
 12048  0395  3001               	movlw	1
 12049  0396  0021               	movlb	1	; select bank1
 12050  0397  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12051  0398  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12052  0399  0023               	movlb	3	; select bank3
 12053  039A  07E7               	addwf	_CapsCount^(0+384),f
 12054  039B  2B7F               	goto	i1l5490
 12055  039C                     i1l5492:	
 12056                           ;PS_2.c: 579: }
 12057                           ;PS_2.c: 580: }
 12058                           ;PS_2.c: 581: }
 12059                           ;PS_2.c: 582: }
 12060                           ;PS_2.c: 584: }
 12061                           
 12062                           
 12063                           ;PS_2.c: 585: else
 12064                           ;PS_2.c: 586: {
 12065                           ;PS_2.c: 587: if(Shift_Key ==1)
 12066  039C  086F               	movf	_Shift_Key^(0+384),w
 12067  039D  3A01               	xorlw	1
 12068  039E  1D03               	skipz
 12069  039F  2BBB               	goto	i1l5504
 12070                           
 12071                           ;PS_2.c: 588: {
 12072                           ;PS_2.c: 590: temp = Decode_Scan_Code_Shift(PS_2_Read_Data_First);
 12073  03A0  0861               	movf	_PS_2_Read_Data_First^(0+384),w
 12074  03A1  3199  2180  3180   	fcall	_Decode_Scan_Code_Shift
 12075  03A4  0021               	movlb	1	; select bank1
 12076  03A5  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12077  03A6  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12078  03A7  0023               	movlb	3	; select bank3
 12079  03A8  00E0               	movwf	Process_PS2_ScanCode@temp^(0+384)
 12080                           
 12081                           ;PS_2.c: 591: if(Caps_Lock)
 12082  03A9  0868               	movf	_Caps_Lock^(0+384),w
 12083  03AA  1903               	btfsc	3,2
 12084  03AB  2BD1               	goto	i1l5514
 12085                           
 12086                           ;PS_2.c: 592: {
 12087                           ;PS_2.c: 594: if(temp >= 'A' && temp <= 'Z')
 12088  03AC  3041               	movlw	65
 12089  03AD  0260               	subwf	Process_PS2_ScanCode@temp^(0+384),w
 12090  03AE  1C03               	skipc
 12091  03AF  2BD1               	goto	i1l5514
 12092  03B0  305B               	movlw	91
 12093  03B1  0260               	subwf	Process_PS2_ScanCode@temp^(0+384),w
 12094  03B2  1803               	skipnc
 12095  03B3  2BD1               	goto	i1l5514
 12096                           
 12097                           ;PS_2.c: 595: {
 12098                           ;PS_2.c: 596: temp += 32;
 12099  03B4  3020               	movlw	32
 12100  03B5  0021               	movlb	1	; select bank1
 12101  03B6  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12102  03B7  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12103  03B8  0023               	movlb	3	; select bank3
 12104  03B9  07E0               	addwf	Process_PS2_ScanCode@temp^(0+384),f
 12105                           
 12106                           ;PS_2.c: 597: }
 12107                           ;PS_2.c: 598: }
 12108                           ;PS_2.c: 599: }
 12109  03BA  2BD1               	goto	i1l5514
 12110  03BB                     i1l5504:	
 12111                           
 12112                           ;PS_2.c: 600: else
 12113                           ;PS_2.c: 601: {
 12114                           ;PS_2.c: 602: temp = Decode_Scan_Code(PS_2_Read_Data_First);
 12115  03BB  0861               	movf	_PS_2_Read_Data_First^(0+384),w
 12116  03BC  3199  215C  3180   	fcall	_Decode_Scan_Code
 12117  03BF  0021               	movlb	1	; select bank1
 12118  03C0  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12119  03C1  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12120  03C2  0023               	movlb	3	; select bank3
 12121  03C3  00E0               	movwf	Process_PS2_ScanCode@temp^(0+384)
 12122                           
 12123                           ;PS_2.c: 603: if(Caps_Lock)
 12124  03C4  0868               	movf	_Caps_Lock^(0+384),w
 12125  03C5  1903               	btfsc	3,2
 12126  03C6  2BD1               	goto	i1l5514
 12127                           
 12128                           ;PS_2.c: 604: {
 12129                           ;PS_2.c: 606: if(temp >= 'a' && temp <= 'z')
 12130  03C7  3061               	movlw	97
 12131  03C8  0260               	subwf	Process_PS2_ScanCode@temp^(0+384),w
 12132  03C9  1C03               	skipc
 12133  03CA  2BD1               	goto	i1l5514
 12134  03CB  307B               	movlw	123
 12135  03CC  0260               	subwf	Process_PS2_ScanCode@temp^(0+384),w
 12136  03CD  1803               	skipnc
 12137  03CE  2BD1               	goto	i1l5514
 12138                           
 12139                           ;PS_2.c: 607: {
 12140                           ;PS_2.c: 608: temp -= 32;
 12141  03CF  3020               	movlw	32
 12142  03D0  02E0               	subwf	Process_PS2_ScanCode@temp^(0+384),f
 12143  03D1                     i1l5514:	
 12144                           
 12145                           ;PS_2.c: 609: }
 12146                           ;PS_2.c: 610: }
 12147                           ;PS_2.c: 611: }
 12148                           ;PS_2.c: 612: }
 12149                           ;PS_2.c: 613: if(!temp)
 12150  03D1  0023               	movlb	3	; select bank3
 12151  03D2  08E0               	movf	Process_PS2_ScanCode@temp^(0+384),f
 12152  03D3  1D03               	skipz
 12153  03D4  2BDE               	goto	i1l5518
 12154                           
 12155                           ;PS_2.c: 614: {
 12156                           ;PS_2.c: 616: temp = Decode_Scan_Code_Function(PS_2_Read_Data_First);
 12157  03D5  0861               	movf	_PS_2_Read_Data_First^(0+384),w
 12158  03D6  3199  213B  3180   	fcall	_Decode_Scan_Code_Function
 12159  03D9  0021               	movlb	1	; select bank1
 12160  03DA  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12161  03DB  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12162  03DC  0023               	movlb	3	; select bank3
 12163  03DD  00E0               	movwf	Process_PS2_ScanCode@temp^(0+384)
 12164  03DE                     i1l5518:	
 12165                           
 12166                           ;PS_2.c: 617: }
 12167                           ;PS_2.c: 618: }
 12168                           ;PS_2.c: 620: if(((RControl || LControl) + (LALT || RALT) + Delete) == 3)
 12169  03DE  01DE               	clrf	_Process_PS2_ScanCode$805^(0+384)
 12170  03DF  0ADE               	incf	_Process_PS2_ScanCode$805^(0+384),f
 12171  03E0  08E9               	movf	_LALT^(0+384),f
 12172  03E1  1D03               	skipz
 12173  03E2  2BE7               	goto	i1l5526
 12174  03E3  08EC               	movf	_RALT^(0+384),f
 12175  03E4  1D03               	skipz
 12176  03E5  2BE7               	goto	i1l5526
 12177  03E6  01DE               	clrf	_Process_PS2_ScanCode$805^(0+384)
 12178  03E7                     i1l5526:	
 12179  03E7  01DF               	clrf	_Process_PS2_ScanCode$806^(0+384)
 12180  03E8  0ADF               	incf	_Process_PS2_ScanCode$806^(0+384),f
 12181  03E9  08ED               	movf	_RControl^(0+384),f
 12182  03EA  1D03               	skipz
 12183  03EB  2BF2               	goto	i1l5534
 12184  03EC  0021               	movlb	1	; select bank1
 12185  03ED  08CE               	movf	_LControl^(0+128),f
 12186  03EE  1D03               	skipz
 12187  03EF  2BF2               	goto	i1l5534
 12188  03F0  0023               	movlb	3	; select bank3
 12189  03F1  01DF               	clrf	_Process_PS2_ScanCode$806^(0+384)
 12190  03F2                     i1l5534:	
 12191  03F2  0021               	movlb	1	; select bank1
 12192  03F3  084D               	movf	_Delete^(0+128),w
 12193  03F4  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12194  03F5  01BD               	clrf	(??_Process_PS2_ScanCode^(0+128)+1)
 12195  03F6  0023               	movlb	3	; select bank3
 12196  03F7  085F               	movf	_Process_PS2_ScanCode$806^(0+384),w
 12197  03F8  075E               	addwf	_Process_PS2_ScanCode$805^(0+384),w
 12198  03F9  0021               	movlb	1	; select bank1
 12199  03FA  00BE               	movwf	(??_Process_PS2_ScanCode+2)^(0+128)
 12200  03FB  01BF               	clrf	((??_Process_PS2_ScanCode+2)^(0+128)+1)
 12201  03FC  0DBF               	rlf	(??_Process_PS2_ScanCode+3)^(0+128),f
 12202  03FD  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12203  03FE  073E               	addwf	(??_Process_PS2_ScanCode+2)^(0+128),w
 12204  03FF  00C0               	movwf	(??_Process_PS2_ScanCode+4)^(0+128)
 12205  0400  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 12206  0401  3D3F               	addwfc	(??_Process_PS2_ScanCode+3)^(0+128),w
 12207  0402  00C1               	movwf	(??_Process_PS2_ScanCode+5)^(0+128)
 12208  0403  3003               	movlw	3
 12209  0404  0640               	xorwf	(??_Process_PS2_ScanCode+4)^(0+128),w
 12210  0405  0441               	iorwf	(??_Process_PS2_ScanCode+5)^(0+128),w
 12211  0406  1D03               	skipz
 12212  0407  2C8A               	goto	i1l5578
 12213                           
 12214                           ;PS_2.c: 621: {
 12215                           ;PS_2.c: 623: UARTstringWAIT("\r\n");
 12216  0408  30FD               	movlw	low ((STR_14+16)| (0+32768))
 12217  0409  0020               	movlb	0	; select bank0
 12218  040A  00A1               	movwf	i1UARTstringWAIT@data
 12219  040B  3089               	movlw	high ((STR_14+16)| (0+32768))
 12220  040C  00A2               	movwf	i1UARTstringWAIT@data+1
 12221  040D  319B  238C  3180   	fcall	i1_UARTstringWAIT
 12222                           
 12223                           ;PS_2.c: 624: delayUS(15000);
 12224  0410  3000               	movlw	0
 12225  0411  00F3               	movwf	i1delayUS@US+3
 12226  0412  3000               	movlw	0
 12227  0413  00F2               	movwf	i1delayUS@US+2
 12228  0414  303A               	movlw	58
 12229  0415  00F1               	movwf	i1delayUS@US+1
 12230  0416  3098               	movlw	152
 12231  0417  00F0               	movwf	i1delayUS@US
 12232  0418  319B  23F0  3180   	fcall	i1_delayUS
 12233                           
 12234                           ;PS_2.c: 625: if(!BAUDMODE)
 12235  041B  0021               	movlb	1	; select bank1
 12236  041C  08CA               	movf	_BAUDMODE^(0+128),f
 12237  041D  1D03               	skipz
 12238  041E  2C46               	goto	i1l5554
 12239                           
 12240                           ;PS_2.c: 626: {
 12241                           ;PS_2.c: 627: BaudTyped =0;
 12242  041F  3000               	movlw	0
 12243  0420  00C7               	movwf	(_BaudTyped+3)^(0+128)
 12244  0421  3000               	movlw	0
 12245  0422  00C6               	movwf	(_BaudTyped+2)^(0+128)
 12246  0423  3000               	movlw	0
 12247  0424  00C5               	movwf	(_BaudTyped+1)^(0+128)
 12248  0425  3000               	movlw	0
 12249  0426  00C4               	movwf	_BaudTyped^(0+128)
 12250                           
 12251                           ;PS_2.c: 628: ParityTyped =0;
 12252  0427  0023               	movlb	3	; select bank3
 12253  0428  01EB               	clrf	_ParityTyped^(0+384)
 12254                           
 12255                           ;PS_2.c: 629: BAUDMODE = 1;
 12256  0429  0021               	movlb	1	; select bank1
 12257  042A  01CA               	clrf	_BAUDMODE^(0+128)
 12258  042B  0ACA               	incf	_BAUDMODE^(0+128),f
 12259                           
 12260                           ;PS_2.c: 630: UARTstringWAIT("Enter Baud rate \r\n");
 12261  042C  30ED               	movlw	low (STR_14| (0+32768))
 12262  042D  0020               	movlb	0	; select bank0
 12263  042E  00A1               	movwf	i1UARTstringWAIT@data
 12264  042F  3089               	movlw	high (STR_14| (0+32768))
 12265  0430  00A2               	movwf	i1UARTstringWAIT@data+1
 12266  0431  319B  238C  3180   	fcall	i1_UARTstringWAIT
 12267                           
 12268                           ;PS_2.c: 631: delayUS(15000);
 12269  0434  3000               	movlw	0
 12270  0435  00F3               	movwf	i1delayUS@US+3
 12271  0436  3000               	movlw	0
 12272  0437  00F2               	movwf	i1delayUS@US+2
 12273  0438  303A               	movlw	58
 12274  0439  00F1               	movwf	i1delayUS@US+1
 12275  043A  3098               	movlw	152
 12276  043B  00F0               	movwf	i1delayUS@US
 12277  043C  319B  23F0  3180   	fcall	i1_delayUS
 12278                           
 12279                           ;PS_2.c: 632: UARTchar('>' , 0, 0);
 12280  043F  01F8               	clrf	i1UARTchar@override
 12281  0440  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12282  0441  303E               	movlw	62
 12283  0442  319D  25CB  3180   	fcall	i1_UARTchar
 12284                           
 12285                           ;PS_2.c: 634: }
 12286  0445  2C81               	goto	i1l5568
 12287  0446                     i1l5554:	
 12288                           
 12289                           ;PS_2.c: 635: else
 12290                           ;PS_2.c: 636: {
 12291                           ;PS_2.c: 637: BaudTyped = 9600;
 12292  0446  3000               	movlw	0
 12293  0447  0021               	movlb	1	; select bank1
 12294  0448  00C7               	movwf	(_BaudTyped+3)^(0+128)
 12295  0449  3000               	movlw	0
 12296  044A  00C6               	movwf	(_BaudTyped+2)^(0+128)
 12297  044B  3025               	movlw	37
 12298  044C  00C5               	movwf	(_BaudTyped+1)^(0+128)
 12299  044D  3080               	movlw	128
 12300  044E  00C4               	movwf	_BaudTyped^(0+128)
 12301                           
 12302                           ;PS_2.c: 638: UARTstringWAIT("Baud Reset to 9600");
 12303  044F  3000               	movlw	low (STR_15| (0+32768))
 12304  0450  0020               	movlb	0	; select bank0
 12305  0451  00A1               	movwf	i1UARTstringWAIT@data
 12306  0452  308A               	movlw	high (STR_15| (0+32768))
 12307  0453  00A2               	movwf	i1UARTstringWAIT@data+1
 12308  0454  319B  238C  3180   	fcall	i1_UARTstringWAIT
 12309                           
 12310                           ;PS_2.c: 639: UARTstringWAIT(NoParityMSG);
 12311  0457  3026               	movlw	low (_NoParityMSG| (0+32768))
 12312  0458  0020               	movlb	0	; select bank0
 12313  0459  00A1               	movwf	i1UARTstringWAIT@data
 12314  045A  3089               	movlw	high (_NoParityMSG| (0+32768))
 12315  045B  00A2               	movwf	i1UARTstringWAIT@data+1
 12316  045C  319B  238C  3180   	fcall	i1_UARTstringWAIT
 12317                           
 12318                           ;PS_2.c: 640: UARTstringWAIT("\r\n");
 12319  045F  30FD               	movlw	low ((STR_14+16)| (0+32768))
 12320  0460  0020               	movlb	0	; select bank0
 12321  0461  00A1               	movwf	i1UARTstringWAIT@data
 12322  0462  3089               	movlw	high ((STR_14+16)| (0+32768))
 12323  0463  00A2               	movwf	i1UARTstringWAIT@data+1
 12324  0464  319B  238C  3180   	fcall	i1_UARTstringWAIT
 12325                           
 12326                           ;PS_2.c: 641: delayUS(15000);
 12327  0467  3000               	movlw	0
 12328  0468  00F3               	movwf	i1delayUS@US+3
 12329  0469  3000               	movlw	0
 12330  046A  00F2               	movwf	i1delayUS@US+2
 12331  046B  303A               	movlw	58
 12332  046C  00F1               	movwf	i1delayUS@US+1
 12333  046D  3098               	movlw	152
 12334  046E  00F0               	movwf	i1delayUS@US
 12335  046F  319B  23F0  3180   	fcall	i1_delayUS
 12336                           
 12337                           ;PS_2.c: 642: SetBaud(BaudTyped, 0);
 12338  0472  0021               	movlb	1	; select bank1
 12339  0473  0847               	movf	(_BaudTyped+3)^(0+128),w
 12340  0474  00B2               	movwf	(SetBaud@Baud+3)^(0+128)
 12341  0475  0846               	movf	(_BaudTyped+2)^(0+128),w
 12342  0476  00B1               	movwf	(SetBaud@Baud+2)^(0+128)
 12343  0477  0845               	movf	(_BaudTyped+1)^(0+128),w
 12344  0478  00B0               	movwf	(SetBaud@Baud+1)^(0+128)
 12345  0479  0844               	movf	_BaudTyped^(0+128),w
 12346  047A  00AF               	movwf	SetBaud@Baud^(0+128)
 12347  047B  01B3               	clrf	SetBaud@Parity^(0+128)
 12348  047C  318B  2365  3180   	fcall	_SetBaud
 12349                           
 12350                           ;PS_2.c: 643: BAUDMODE = 0;
 12351  047F  0021               	movlb	1	; select bank1
 12352  0480  01CA               	clrf	_BAUDMODE^(0+128)
 12353  0481                     i1l5568:	
 12354                           
 12355                           ;PS_2.c: 644: }
 12356                           ;PS_2.c: 645: RControl =0;
 12357  0481  0023               	movlb	3	; select bank3
 12358  0482  01ED               	clrf	_RControl^(0+384)
 12359                           
 12360                           ;PS_2.c: 646: LControl =0;
 12361  0483  0021               	movlb	1	; select bank1
 12362  0484  01CE               	clrf	_LControl^(0+128)
 12363                           
 12364                           ;PS_2.c: 647: LALT =0;
 12365  0485  0023               	movlb	3	; select bank3
 12366  0486  01E9               	clrf	_LALT^(0+384)
 12367                           
 12368                           ;PS_2.c: 648: RALT =0;
 12369  0487  01EC               	clrf	_RALT^(0+384)
 12370                           
 12371                           ;PS_2.c: 649: Delete =0;
 12372  0488  0021               	movlb	1	; select bank1
 12373  0489  01CD               	clrf	_Delete^(0+128)
 12374  048A                     i1l5578:	
 12375                           
 12376                           ;PS_2.c: 650: }
 12377                           ;PS_2.c: 652: if(temp)
 12378  048A  0023               	movlb	3	; select bank3
 12379  048B  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12380  048C  1903               	btfsc	3,2
 12381  048D  2E1E               	goto	i1l5674
 12382                           
 12383                           ;PS_2.c: 653: {
 12384                           ;PS_2.c: 655: if(temp == 0x01)
 12385  048E  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12386  048F  3A01               	xorlw	1
 12387  0490  1D03               	skipz
 12388  0491  2C9D               	goto	i1l5584
 12389                           
 12390                           ;PS_2.c: 656: {
 12391                           ;PS_2.c: 658: UART_send_break();
 12392  0492  3198  2089  3180   	fcall	_UART_send_break
 12393                           
 12394                           ;PS_2.c: 659: UART_send_break_timed(100000);
 12395  0495  30A0               	movlw	160
 12396  0496  00FA               	movwf	UART_send_break_timed@US
 12397  0497  3086               	movlw	134
 12398  0498  00FB               	movwf	UART_send_break_timed@US+1
 12399  0499  319A  222D  3180   	fcall	_UART_send_break_timed
 12400  049C  2E1D               	goto	i1l762
 12401  049D                     i1l5584:	
 12402                           ;PS_2.c: 660: }
 12403                           
 12404                           
 12405                           ;PS_2.c: 661: else
 12406                           ;PS_2.c: 662: {
 12407                           ;PS_2.c: 663: if(!BAUDMODE)
 12408  049D  0021               	movlb	1	; select bank1
 12409  049E  08CA               	movf	_BAUDMODE^(0+128),f
 12410  049F  1D03               	skipz
 12411  04A0  2CCA               	goto	i1l5596
 12412                           
 12413                           ;PS_2.c: 664: {
 12414                           ;PS_2.c: 665: UARTchar(temp, 0, 0);
 12415  04A1  01F8               	clrf	i1UARTchar@override
 12416  04A2  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12417  04A3  0023               	movlb	3	; select bank3
 12418  04A4  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12419  04A5  319D  25CB  3180   	fcall	i1_UARTchar
 12420                           
 12421                           ;PS_2.c: 666: if(temp == '\r')
 12422  04A8  0023               	movlb	3	; select bank3
 12423  04A9  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12424  04AA  3A0D               	xorlw	13
 12425  04AB  1D03               	skipz
 12426  04AC  2E1E               	goto	i1l5674
 12427                           
 12428                           ;PS_2.c: 667: {
 12429                           ;PS_2.c: 668: delayUS(5000);
 12430  04AD  3000               	movlw	0
 12431  04AE  00F3               	movwf	i1delayUS@US+3
 12432  04AF  3000               	movlw	0
 12433  04B0  00F2               	movwf	i1delayUS@US+2
 12434  04B1  3013               	movlw	19
 12435  04B2  00F1               	movwf	i1delayUS@US+1
 12436  04B3  3088               	movlw	136
 12437  04B4  00F0               	movwf	i1delayUS@US
 12438  04B5  319B  23F0  3180   	fcall	i1_delayUS
 12439                           
 12440                           ;PS_2.c: 669: UARTchar('\n', 0, 0);
 12441  04B8  01F8               	clrf	i1UARTchar@override
 12442  04B9  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12443  04BA  300A               	movlw	10
 12444  04BB  319D  25CB  3180   	fcall	i1_UARTchar
 12445                           
 12446                           ;PS_2.c: 670: delayUS(15000);
 12447  04BE  3000               	movlw	0
 12448  04BF  00F3               	movwf	i1delayUS@US+3
 12449  04C0  3000               	movlw	0
 12450  04C1  00F2               	movwf	i1delayUS@US+2
 12451  04C2  303A               	movlw	58
 12452  04C3  00F1               	movwf	i1delayUS@US+1
 12453  04C4  3098               	movlw	152
 12454  04C5  00F0               	movwf	i1delayUS@US
 12455  04C6  319B  23F0  3180   	fcall	i1_delayUS
 12456  04C9  2E1D               	goto	i1l762
 12457  04CA                     i1l5596:	
 12458                           ;PS_2.c: 671: }
 12459                           ;PS_2.c: 672: }
 12460                           
 12461                           
 12462                           ;PS_2.c: 673: else
 12463                           ;PS_2.c: 674: {
 12464                           ;PS_2.c: 675: if(ISNUMBER(temp))
 12465  04CA  0023               	movlb	3	; select bank3
 12466  04CB  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12467  04CC  3199  2111  3180   	fcall	_ISNUMBER
 12468  04CF  3A00               	xorlw	0
 12469  04D0  1903               	skipnz
 12470  04D1  2D11               	goto	i1l5604
 12471                           
 12472                           ;PS_2.c: 676: {
 12473                           ;PS_2.c: 677: BaudTyped*=10;
 12474  04D2  3000               	movlw	0
 12475  04D3  00F3               	movwf	___lmul@multiplier+3
 12476  04D4  3000               	movlw	0
 12477  04D5  00F2               	movwf	___lmul@multiplier+2
 12478  04D6  3000               	movlw	0
 12479  04D7  00F1               	movwf	___lmul@multiplier+1
 12480  04D8  300A               	movlw	10
 12481  04D9  00F0               	movwf	___lmul@multiplier
 12482  04DA  0021               	movlb	1	; select bank1
 12483  04DB  0847               	movf	(_BaudTyped+3)^(0+128),w
 12484  04DC  00F7               	movwf	___lmul@multiplicand+3
 12485  04DD  0846               	movf	(_BaudTyped+2)^(0+128),w
 12486  04DE  00F6               	movwf	___lmul@multiplicand+2
 12487  04DF  0845               	movf	(_BaudTyped+1)^(0+128),w
 12488  04E0  00F5               	movwf	___lmul@multiplicand+1
 12489  04E1  0844               	movf	_BaudTyped^(0+128),w
 12490  04E2  00F4               	movwf	___lmul@multiplicand
 12491  04E3  319A  22FC  3180   	fcall	___lmul
 12492  04E6  0873               	movf	?___lmul+3,w
 12493  04E7  0021               	movlb	1	; select bank1
 12494  04E8  00C7               	movwf	(_BaudTyped+3)^(0+128)
 12495  04E9  0872               	movf	?___lmul+2,w
 12496  04EA  00C6               	movwf	(_BaudTyped+2)^(0+128)
 12497  04EB  0871               	movf	?___lmul+1,w
 12498  04EC  00C5               	movwf	(_BaudTyped+1)^(0+128)
 12499  04ED  0870               	movf	?___lmul,w
 12500  04EE  00C4               	movwf	_BaudTyped^(0+128)
 12501                           
 12502                           ;PS_2.c: 678: BaudTyped += temp - 48;
 12503  04EF  0023               	movlb	3	; select bank3
 12504  04F0  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12505  04F1  3ED0               	addlw	208
 12506  04F2  0021               	movlb	1	; select bank1
 12507  04F3  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12508  04F4  30FF               	movlw	255
 12509  04F5  1803               	skipnc
 12510  04F6  3000               	movlw	0
 12511  04F7  00BD               	movwf	(??_Process_PS2_ScanCode^(0+128)+1)
 12512  04F8  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12513  04F9  00BE               	movwf	(??_Process_PS2_ScanCode+2)^(0+128)
 12514  04FA  083D               	movf	(??_Process_PS2_ScanCode+1)^(0+128),w
 12515  04FB  00BF               	movwf	((??_Process_PS2_ScanCode+2)^(0+128)+1)
 12516  04FC  3000               	movlw	0
 12517  04FD  1BBF               	btfsc	((??_Process_PS2_ScanCode+2)^(0+128)+1),7
 12518  04FE  30FF               	movlw	255
 12519  04FF  00C0               	movwf	((??_Process_PS2_ScanCode+2)^(0+128)+2)
 12520  0500  00C1               	movwf	((??_Process_PS2_ScanCode+2)^(0+128)+3)
 12521  0501  083E               	movf	(??_Process_PS2_ScanCode+2)^(0+128),w
 12522  0502  07C4               	addwf	_BaudTyped^(0+128),f
 12523  0503  083F               	movf	(??_Process_PS2_ScanCode+3)^(0+128),w
 12524  0504  3DC5               	addwfc	(_BaudTyped+1)^(0+128),f
 12525  0505  0840               	movf	(??_Process_PS2_ScanCode+4)^(0+128),w
 12526  0506  3DC6               	addwfc	(_BaudTyped+2)^(0+128),f
 12527  0507  0841               	movf	(??_Process_PS2_ScanCode+5)^(0+128),w
 12528  0508  3DC7               	addwfc	(_BaudTyped+3)^(0+128),f
 12529                           
 12530                           ;PS_2.c: 679: UARTchar(temp, 0, 0);
 12531  0509  01F8               	clrf	i1UARTchar@override
 12532  050A  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12533  050B  0023               	movlb	3	; select bank3
 12534  050C  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12535  050D  319D  25CB  3180   	fcall	i1_UARTchar
 12536  0510  2E1D               	goto	i1l762
 12537  0511                     i1l5604:	
 12538                           ;PS_2.c: 680: }
 12539                           
 12540                           
 12541                           ;PS_2.c: 681: else if(temp == 'o' || temp == 'O')
 12542  0511  0023               	movlb	3	; select bank3
 12543  0512  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12544  0513  3A6F               	xorlw	111
 12545  0514  1903               	skipnz
 12546  0515  2D1A               	goto	i1l770
 12547  0516  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12548  0517  3A4F               	xorlw	79
 12549  0518  1D03               	skipz
 12550  0519  2D23               	goto	i1l5610
 12551  051A                     i1l770:	
 12552                           
 12553                           ;PS_2.c: 682: {
 12554                           ;PS_2.c: 683: ParityTyped = 1;
 12555  051A  01EB               	clrf	_ParityTyped^(0+384)
 12556  051B  0AEB               	incf	_ParityTyped^(0+384),f
 12557                           
 12558                           ;PS_2.c: 684: UARTchar(temp, 0, 0);
 12559  051C  01F8               	clrf	i1UARTchar@override
 12560  051D  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12561  051E  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12562  051F  319D  25CB  3180   	fcall	i1_UARTchar
 12563  0522  2E1D               	goto	i1l762
 12564  0523                     i1l5610:	
 12565                           ;PS_2.c: 685: }
 12566                           
 12567                           
 12568                           ;PS_2.c: 686: else if(temp == 'e' || temp == 'E')
 12569  0523  0023               	movlb	3	; select bank3
 12570  0524  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12571  0525  3A65               	xorlw	101
 12572  0526  1903               	skipnz
 12573  0527  2D2C               	goto	i1l5614
 12574  0528  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12575  0529  3A45               	xorlw	69
 12576  052A  1D03               	skipz
 12577  052B  2D39               	goto	i1l5618
 12578  052C                     i1l5614:	
 12579                           
 12580                           ;PS_2.c: 687: {
 12581                           ;PS_2.c: 688: ParityTyped = 2;
 12582  052C  3002               	movlw	2
 12583  052D  0021               	movlb	1	; select bank1
 12584  052E  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12585  052F  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12586  0530  0023               	movlb	3	; select bank3
 12587  0531  00EB               	movwf	_ParityTyped^(0+384)
 12588                           
 12589                           ;PS_2.c: 689: UARTchar(temp, 0, 0);
 12590  0532  01F8               	clrf	i1UARTchar@override
 12591  0533  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12592  0534  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12593  0535  319D  25CB  3180   	fcall	i1_UARTchar
 12594  0538  2E1D               	goto	i1l762
 12595  0539                     i1l5618:	
 12596                           ;PS_2.c: 690: }
 12597                           
 12598                           
 12599                           ;PS_2.c: 691: else if(temp == 'm' || temp == 'M')
 12600  0539  0023               	movlb	3	; select bank3
 12601  053A  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12602  053B  3A6D               	xorlw	109
 12603  053C  1903               	skipnz
 12604  053D  2D42               	goto	i1l5622
 12605  053E  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12606  053F  3A4D               	xorlw	77
 12607  0540  1D03               	skipz
 12608  0541  2D4F               	goto	i1l5626
 12609  0542                     i1l5622:	
 12610                           
 12611                           ;PS_2.c: 692: {
 12612                           ;PS_2.c: 693: ParityTyped = 3;
 12613  0542  3003               	movlw	3
 12614  0543  0021               	movlb	1	; select bank1
 12615  0544  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12616  0545  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12617  0546  0023               	movlb	3	; select bank3
 12618  0547  00EB               	movwf	_ParityTyped^(0+384)
 12619                           
 12620                           ;PS_2.c: 694: UARTchar(temp, 0, 0);
 12621  0548  01F8               	clrf	i1UARTchar@override
 12622  0549  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12623  054A  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12624  054B  319D  25CB  3180   	fcall	i1_UARTchar
 12625  054E  2E1D               	goto	i1l762
 12626  054F                     i1l5626:	
 12627                           ;PS_2.c: 695: }
 12628                           
 12629                           
 12630                           ;PS_2.c: 696: else if(temp == 's' || temp == 'S')
 12631  054F  0023               	movlb	3	; select bank3
 12632  0550  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12633  0551  3A73               	xorlw	115
 12634  0552  1903               	skipnz
 12635  0553  2D58               	goto	i1l5630
 12636  0554  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12637  0555  3A53               	xorlw	83
 12638  0556  1D03               	skipz
 12639  0557  2D65               	goto	i1l5634
 12640  0558                     i1l5630:	
 12641                           
 12642                           ;PS_2.c: 697: {
 12643                           ;PS_2.c: 698: ParityTyped = 4;
 12644  0558  3004               	movlw	4
 12645  0559  0021               	movlb	1	; select bank1
 12646  055A  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12647  055B  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12648  055C  0023               	movlb	3	; select bank3
 12649  055D  00EB               	movwf	_ParityTyped^(0+384)
 12650                           
 12651                           ;PS_2.c: 699: UARTchar(temp, 0, 0);
 12652  055E  01F8               	clrf	i1UARTchar@override
 12653  055F  01F9               	clrf	i1UARTchar@NinethBit_override_data
 12654  0560  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12655  0561  319D  25CB  3180   	fcall	i1_UARTchar
 12656  0564  2E1D               	goto	i1l762
 12657  0565                     i1l5634:	
 12658                           ;PS_2.c: 700: }
 12659                           
 12660                           
 12661                           ;PS_2.c: 701: else if(temp == '\r')
 12662  0565  0023               	movlb	3	; select bank3
 12663  0566  0860               	movf	Process_PS2_ScanCode@temp^(0+384),w
 12664  0567  3A0D               	xorlw	13
 12665  0568  1D03               	skipz
 12666  0569  2E1E               	goto	i1l5674
 12667                           
 12668                           ;PS_2.c: 702: {
 12669                           ;PS_2.c: 703: UARTstringWAIT("\r\n");
 12670  056A  30FD               	movlw	low ((STR_14+16)| (0+32768))
 12671  056B  0020               	movlb	0	; select bank0
 12672  056C  00A1               	movwf	i1UARTstringWAIT@data
 12673  056D  3089               	movlw	high ((STR_14+16)| (0+32768))
 12674  056E  00A2               	movwf	i1UARTstringWAIT@data+1
 12675  056F  319B  238C  3180   	fcall	i1_UARTstringWAIT
 12676                           
 12677                           ;PS_2.c: 704: delayUS(15000);
 12678  0572  3000               	movlw	0
 12679  0573  00F3               	movwf	i1delayUS@US+3
 12680  0574  3000               	movlw	0
 12681  0575  00F2               	movwf	i1delayUS@US+2
 12682  0576  303A               	movlw	58
 12683  0577  00F1               	movwf	i1delayUS@US+1
 12684  0578  3098               	movlw	152
 12685  0579  00F0               	movwf	i1delayUS@US
 12686  057A  319B  23F0  3180   	fcall	i1_delayUS
 12687                           
 12688                           ;PS_2.c: 705: if(BaudTyped >=2400 && BaudTyped <= 115200)
 12689  057D  3000               	movlw	0
 12690  057E  0021               	movlb	1	; select bank1
 12691  057F  0247               	subwf	(_BaudTyped+3)^(0+128),w
 12692  0580  1D03               	skipz
 12693  0581  2D8C               	goto	u709_25
 12694  0582  3000               	movlw	0
 12695  0583  0246               	subwf	(_BaudTyped+2)^(0+128),w
 12696  0584  1D03               	skipz
 12697  0585  2D8C               	goto	u709_25
 12698  0586  3009               	movlw	9
 12699  0587  0245               	subwf	(_BaudTyped+1)^(0+128),w
 12700  0588  1D03               	skipz
 12701  0589  2D8C               	goto	u709_25
 12702  058A  3060               	movlw	96
 12703  058B  0244               	subwf	_BaudTyped^(0+128),w
 12704  058C                     u709_25:	
 12705  058C  1C03               	skipc
 12706  058D  2E08               	goto	i1l5668
 12707  058E  3000               	movlw	0
 12708  058F  0247               	subwf	(_BaudTyped+3)^(0+128),w
 12709  0590  1D03               	skipz
 12710  0591  2D9C               	goto	u710_25
 12711  0592  3001               	movlw	1
 12712  0593  0246               	subwf	(_BaudTyped+2)^(0+128),w
 12713  0594  1D03               	skipz
 12714  0595  2D9C               	goto	u710_25
 12715  0596  30C2               	movlw	194
 12716  0597  0245               	subwf	(_BaudTyped+1)^(0+128),w
 12717  0598  1D03               	skipz
 12718  0599  2D9C               	goto	u710_25
 12719  059A  3001               	movlw	1
 12720  059B  0244               	subwf	_BaudTyped^(0+128),w
 12721  059C                     u710_25:	
 12722  059C  1803               	skipnc
 12723  059D  2E08               	goto	i1l5668
 12724                           
 12725                           ;PS_2.c: 706: {
 12726                           ;PS_2.c: 707: sprintf(buf,"Baud will be set to %lu",BaudTyped);
 12727  059E  30AC               	movlw	low (STR_18| (0+32768))
 12728  059F  0020               	movlb	0	; select bank0
 12729  05A0  00AA               	movwf	sprintf@f
 12730  05A1  3089               	movlw	high (STR_18| (0+32768))
 12731  05A2  00AB               	movwf	sprintf@f+1
 12732  05A3  0021               	movlb	1	; select bank1
 12733  05A4  0847               	movf	(_BaudTyped+3)^(0+128),w
 12734  05A5  0020               	movlb	0	; select bank0
 12735  05A6  00AF               	movwf	?_sprintf+5
 12736  05A7  0021               	movlb	1	; select bank1
 12737  05A8  0846               	movf	(_BaudTyped+2)^(0+128),w
 12738  05A9  0020               	movlb	0	; select bank0
 12739  05AA  00AE               	movwf	?_sprintf+4
 12740  05AB  0021               	movlb	1	; select bank1
 12741  05AC  0845               	movf	(_BaudTyped+1)^(0+128),w
 12742  05AD  0020               	movlb	0	; select bank0
 12743  05AE  00AD               	movwf	?_sprintf+3
 12744  05AF  0021               	movlb	1	; select bank1
 12745  05B0  0844               	movf	_BaudTyped^(0+128),w
 12746  05B1  0020               	movlb	0	; select bank0
 12747  05B2  00AC               	movwf	?_sprintf+2
 12748  05B3  30A0               	movlw	Process_PS2_ScanCode@buf& (0+255)
 12749  05B4  3197  2707  3180   	fcall	_sprintf
 12750                           
 12751                           ;PS_2.c: 708: UARTstringWAIT(buf);
 12752  05B7  30A0               	movlw	low Process_PS2_ScanCode@buf
 12753  05B8  0020               	movlb	0	; select bank0
 12754  05B9  00A1               	movwf	i1UARTstringWAIT@data
 12755  05BA  3001               	movlw	high Process_PS2_ScanCode@buf
 12756  05BB  00A2               	movwf	i1UARTstringWAIT@data+1
 12757  05BC  319B  238C  3180   	fcall	i1_UARTstringWAIT
 12758                           
 12759                           ;PS_2.c: 709: if(ParityTyped)
 12760  05BF  0023               	movlb	3	; select bank3
 12761  05C0  086B               	movf	_ParityTyped^(0+384),w
 12762  05C1  1903               	btfsc	3,2
 12763  05C2  2DE5               	goto	i1l5664
 12764                           
 12765                           ;PS_2.c: 710: {
 12766                           ;PS_2.c: 711: switch (ParityTyped)
 12767  05C3  2DD8               	goto	i1l5662
 12768  05C4                     i1l5652:	
 12769                           ;PS_2.c: 712: {
 12770                           ;PS_2.c: 713: case 1:
 12771                           
 12772                           
 12773                           ;PS_2.c: 714: UARTstringWAIT(OddParityMSG);
 12774  05C4  3011               	movlw	low (_OddParityMSG| (0+32768))
 12775  05C5  0020               	movlb	0	; select bank0
 12776  05C6  00A1               	movwf	i1UARTstringWAIT@data
 12777  05C7  3089               	movlw	high (_OddParityMSG| (0+32768))
 12778  05C8  2DE9               	goto	L14
 12779  05C9                     i1l5654:	
 12780                           ;PS_2.c: 716: case 2:
 12781                           
 12782                           ;PS_2.c: 715: break;
 12783                           
 12784                           
 12785                           ;PS_2.c: 717: UARTstringWAIT(EvenParityMSG);
 12786  05C9  30FB               	movlw	low (_EvenParityMSG| (0+32768))
 12787  05CA  0020               	movlb	0	; select bank0
 12788  05CB  00A1               	movwf	i1UARTstringWAIT@data
 12789  05CC  3088               	movlw	high (_EvenParityMSG| (0+32768))
 12790  05CD  2DE9               	goto	L14
 12791  05CE                     i1l5656:	
 12792                           ;PS_2.c: 719: case 3:
 12793                           
 12794                           ;PS_2.c: 718: break;
 12795                           
 12796                           
 12797                           ;PS_2.c: 720: UARTstringWAIT(MarkParityMSG);
 12798  05CE  304A               	movlw	low (_MarkParityMSG| (0+32768))
 12799  05CF  0020               	movlb	0	; select bank0
 12800  05D0  00A1               	movwf	i1UARTstringWAIT@data
 12801  05D1  3089               	movlw	high (_MarkParityMSG| (0+32768))
 12802  05D2  2DE9               	goto	L14
 12803  05D3                     i1l5658:	
 12804                           ;PS_2.c: 722: default:
 12805                           
 12806                           ;PS_2.c: 721: break;
 12807                           
 12808                           
 12809                           ;PS_2.c: 723: UARTstringWAIT(SpaceParityMSG);
 12810  05D3  303A               	movlw	low (_SpaceParityMSG| (0+32768))
 12811  05D4  0020               	movlb	0	; select bank0
 12812  05D5  00A1               	movwf	i1UARTstringWAIT@data
 12813  05D6  3089               	movlw	high (_SpaceParityMSG| (0+32768))
 12814  05D7  2DE9               	goto	L14
 12815  05D8                     i1l5662:	
 12816                           ;PS_2.c: 725: }
 12817                           
 12818                           ;PS_2.c: 724: break;
 12819                           
 12820  05D8  0023               	movlb	3	; select bank3
 12821  05D9  086B               	movf	_ParityTyped^(0+384),w
 12822                           
 12823                           ; Switch size 1, requested type "space"
 12824                           ; Number of cases is 3, Range of values is 1 to 3
 12825                           ; switch strategies available:
 12826                           ; Name         Instructions Cycles
 12827                           ; simple_byte           10     6 (average)
 12828                           ; direct_byte           15     9 (fixed)
 12829                           ; jumptable            263     9 (fixed)
 12830                           ;	Chosen strategy is simple_byte
 12831  05DA  3A01               	xorlw	1	; case 1
 12832  05DB  1903               	skipnz
 12833  05DC  2DC4               	goto	i1l5652
 12834  05DD  3A03               	xorlw	3	; case 2
 12835  05DE  1903               	skipnz
 12836  05DF  2DC9               	goto	i1l5654
 12837  05E0  3A01               	xorlw	1	; case 3
 12838  05E1  1903               	skipnz
 12839  05E2  2DCE               	goto	i1l5656
 12840  05E3  2DD3               	goto	i1l5658
 12841                           
 12842                           ;PS_2.c: 726: }
 12843  05E4  2DED               	goto	i1l793
 12844  05E5                     i1l5664:	
 12845                           
 12846                           ;PS_2.c: 727: else
 12847                           ;PS_2.c: 728: {
 12848                           ;PS_2.c: 729: UARTstringWAIT(NoParityMSG);
 12849  05E5  3026               	movlw	low (_NoParityMSG| (0+32768))
 12850  05E6  0020               	movlb	0	; select bank0
 12851  05E7  00A1               	movwf	i1UARTstringWAIT@data
 12852  05E8  3089               	movlw	high (_NoParityMSG| (0+32768))
 12853  05E9                     L14:	
 12854  05E9  00A2               	movwf	i1UARTstringWAIT@data+1
 12855  05EA  319B  238C  3180   	fcall	i1_UARTstringWAIT
 12856  05ED                     i1l793:	
 12857                           
 12858                           ;PS_2.c: 730: }
 12859                           ;PS_2.c: 731: UARTstringWAIT("\r\n");
 12860  05ED  30FD               	movlw	low ((STR_14+16)| (0+32768))
 12861  05EE  0020               	movlb	0	; select bank0
 12862  05EF  00A1               	movwf	i1UARTstringWAIT@data
 12863  05F0  3089               	movlw	high ((STR_14+16)| (0+32768))
 12864  05F1  00A2               	movwf	i1UARTstringWAIT@data+1
 12865  05F2  319B  238C  3180   	fcall	i1_UARTstringWAIT
 12866                           
 12867                           ;PS_2.c: 732: SetBaud(BaudTyped, ParityTyped);
 12868  05F5  0021               	movlb	1	; select bank1
 12869  05F6  0847               	movf	(_BaudTyped+3)^(0+128),w
 12870  05F7  00B2               	movwf	(SetBaud@Baud+3)^(0+128)
 12871  05F8  0846               	movf	(_BaudTyped+2)^(0+128),w
 12872  05F9  00B1               	movwf	(SetBaud@Baud+2)^(0+128)
 12873  05FA  0845               	movf	(_BaudTyped+1)^(0+128),w
 12874  05FB  00B0               	movwf	(SetBaud@Baud+1)^(0+128)
 12875  05FC  0844               	movf	_BaudTyped^(0+128),w
 12876  05FD  00AF               	movwf	SetBaud@Baud^(0+128)
 12877  05FE  0023               	movlb	3	; select bank3
 12878  05FF  086B               	movf	_ParityTyped^(0+384),w
 12879  0600  0021               	movlb	1	; select bank1
 12880  0601  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12881  0602  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12882  0603  00B3               	movwf	SetBaud@Parity^(0+128)
 12883  0604  318B  2365  3180   	fcall	_SetBaud
 12884                           
 12885                           ;PS_2.c: 733: }
 12886  0607  2E1B               	goto	i1l5672
 12887  0608                     i1l5668:	
 12888                           
 12889                           ;PS_2.c: 734: else
 12890                           ;PS_2.c: 735: {
 12891                           ;PS_2.c: 736: UARTstringWAIT("Baud Out of Range\r\n");
 12892  0608  30D9               	movlw	low (STR_20| (0+32768))
 12893  0609  0020               	movlb	0	; select bank0
 12894  060A  00A1               	movwf	i1UARTstringWAIT@data
 12895  060B  3089               	movlw	high (STR_20| (0+32768))
 12896  060C  00A2               	movwf	i1UARTstringWAIT@data+1
 12897  060D  319B  238C  3180   	fcall	i1_UARTstringWAIT
 12898                           
 12899                           ;PS_2.c: 737: delayUS(15000);
 12900  0610  3000               	movlw	0
 12901  0611  00F3               	movwf	i1delayUS@US+3
 12902  0612  3000               	movlw	0
 12903  0613  00F2               	movwf	i1delayUS@US+2
 12904  0614  303A               	movlw	58
 12905  0615  00F1               	movwf	i1delayUS@US+1
 12906  0616  3098               	movlw	152
 12907  0617  00F0               	movwf	i1delayUS@US
 12908  0618  319B  23F0  3180   	fcall	i1_delayUS
 12909  061B                     i1l5672:	
 12910                           
 12911                           ;PS_2.c: 738: }
 12912                           ;PS_2.c: 739: BAUDMODE=0;
 12913  061B  0021               	movlb	1	; select bank1
 12914  061C  01CA               	clrf	_BAUDMODE^(0+128)
 12915  061D                     i1l762:	
 12916  061D  0023               	movlb	3	; select bank3
 12917  061E                     i1l5674:	
 12918                           
 12919                           ;PS_2.c: 740: }
 12920                           ;PS_2.c: 741: }
 12921                           ;PS_2.c: 742: }
 12922                           ;PS_2.c: 743: }
 12923                           ;PS_2.c: 746: temp =0;
 12924  061E  0023               	movlb	3	; select bank3
 12925  061F  01E0               	clrf	Process_PS2_ScanCode@temp^(0+384)
 12926                           
 12927                           ;PS_2.c: 747: PS_2_Read_Data_First =0;
 12928  0620  01E1               	clrf	_PS_2_Read_Data_First^(0+384)
 12929  0621  01E2               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
 12930                           
 12931                           ;PS_2.c: 748: PS_2_Read_Data_Second =0;
 12932  0622  01E3               	clrf	_PS_2_Read_Data_Second^(0+384)
 12933  0623  01E4               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
 12934                           
 12935                           ;PS_2.c: 749: PS_2_Read_Data_Third =0;
 12936  0624  01E5               	clrf	_PS_2_Read_Data_Third^(0+384)
 12937  0625  01E6               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
 12938                           
 12939                           ;PS_2.c: 750: Caps_Lock_Key_old = Caps_Lock_Key;
 12940  0626  0021               	movlb	1	; select bank1
 12941  0627  084B               	movf	_Caps_Lock_Key^(0+128),w
 12942  0628  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12943  0629  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12944  062A  00CC               	movwf	_Caps_Lock_Key_old^(0+128)
 12945                           
 12946                           ;PS_2.c: 751: Right_Shift_Key_old = Right_Shift_Key;
 12947  062B  0023               	movlb	3	; select bank3
 12948  062C  086E               	movf	_Right_Shift_Key^(0+384),w
 12949  062D  0021               	movlb	1	; select bank1
 12950  062E  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12951  062F  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12952  0630  00D3               	movwf	_Right_Shift_Key_old^(0+128)
 12953                           
 12954                           ;PS_2.c: 752: Left_Shift_Key_old = Left_Shift_Key;
 12955  0631  0023               	movlb	3	; select bank3
 12956  0632  086A               	movf	_Left_Shift_Key^(0+384),w
 12957  0633  0021               	movlb	1	; select bank1
 12958  0634  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12959  0635  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12960  0636  00CF               	movwf	_Left_Shift_Key_old^(0+128)
 12961                           
 12962                           ;PS_2.c: 753: LATC &= ~0b00010000;
 12963  0637  30EF               	movlw	239
 12964  0638  00BC               	movwf	??_Process_PS2_ScanCode^(0+128)
 12965  0639  083C               	movf	??_Process_PS2_ScanCode^(0+128),w
 12966  063A  0022               	movlb	2	; select bank2
 12967  063B  058E               	andwf	14,f	;volatile
 12968                           
 12969                           ;PS_2.c: 754: }
 12970  063C  28E7               	goto	i1l5694
 12971  063D                     i1l5690:	
 12972                           
 12973                           ;PS_2.c: 755: else
 12974                           ;PS_2.c: 756: {
 12975                           ;PS_2.c: 758: cleanBuffer(PS_2_ScanCodes, 12);
 12976  063D  300C               	movlw	12
 12977  063E  00F0               	movwf	cleanBuffer@count
 12978  063F  3000               	movlw	0
 12979  0640  00F1               	movwf	cleanBuffer@count+1
 12980  0641  30D5               	movlw	_PS_2_ScanCodes& (0+255)
 12981  0642  3199  21F3  3180   	fcall	_cleanBuffer
 12982                           
 12983                           ;PS_2.c: 759: PS_2_Buffer_items = 0;
 12984  0645  0021               	movlb	1	; select bank1
 12985  0646  01D0               	clrf	_PS_2_Buffer_items^(0+128)
 12986  0647  28E7               	goto	i1l5694
 12987  0648                     __end_of_Process_PS2_ScanCode:	
 12988                           
 12989                           	psect	text43
 12990  0CDE                     __ptext43:	
 12991 ;; *************** function i1_Send_PS2 *****************
 12992 ;; Defined at:
 12993 ;;		line 844 in file "PS_2.c"
 12994 ;; Parameters:    Size  Location     Type
 12995 ;;  command         1    wreg     unsigned char 
 12996 ;; Auto vars:     Size  Location     Type
 12997 ;;  command         1    1[BANK0 ] unsigned char 
 12998 ;;  Send_PS2        2    3[BANK0 ] unsigned int 
 12999 ;;  Send_PS2        1    2[BANK0 ] unsigned char 
 13000 ;;  Send_PS2        1    0[BANK0 ] unsigned char 
 13001 ;; Return value:  Size  Location     Type
 13002 ;;                  1    wreg      unsigned char 
 13003 ;; Registers used:
 13004 ;;		wreg, status,2, status,0, pclath, cstack
 13005 ;; Tracked objects:
 13006 ;;		On entry : 0/0
 13007 ;;		On exit  : 0/0
 13008 ;;		Unchanged: 0/0
 13009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13011 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13012 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13013 ;;      Totals:         4       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13014 ;;Total ram usage:        9 bytes
 13015 ;; Hardware stack levels used:    1
 13016 ;; Hardware stack levels required when called:    1
 13017 ;; This function calls:
 13018 ;;		i1_CheckSum_byte
 13019 ;;		i1_Clock_TRIS
 13020 ;;		i1_Data_TRIS
 13021 ;;		i1_READ_PS_2_PIN
 13022 ;;		i1_delayUS
 13023 ;; This function is called by:
 13024 ;;		_Process_PS2_ScanCode
 13025 ;;		_ResendLast
 13026 ;; This function uses a non-reentrant model
 13027 ;;
 13028                           
 13029                           
 13030                           ;psect for function i1_Send_PS2
 13031  0CDE                     i1_Send_PS2:	
 13032                           
 13033                           ;incstack = 0
 13034                           ; Regs used in i1_Send_PS2: [wreg+status,2+status,0+pclath+cstack]
 13035                           ;i1Send_PS2@command stored from wreg
 13036  0CDE  0020               	movlb	0	; select bank0
 13037  0CDF  00A1               	movwf	i1Send_PS2@command
 13038                           
 13039                           ;PS_2.c: 846: unsigned char i=0;
 13040  0CE0  01A2               	clrf	i1Send_PS2@i
 13041                           
 13042                           ;PS_2.c: 847: unsigned char oddparity = CheckSum_byte((unsigned int)command , 3);
 13043  0CE1  0821               	movf	i1Send_PS2@command,w
 13044  0CE2  00FA               	movwf	??i1_Send_PS2
 13045  0CE3  01FB               	clrf	??i1_Send_PS2+1
 13046  0CE4  087A               	movf	??i1_Send_PS2,w
 13047  0CE5  00F0               	movwf	i1CheckSum_byte@This
 13048  0CE6  087B               	movf	??i1_Send_PS2+1,w
 13049  0CE7  00F1               	movwf	i1CheckSum_byte@This+1
 13050  0CE8  3003               	movlw	3
 13051  0CE9  00FC               	movwf	??i1_Send_PS2+2
 13052  0CEA  087C               	movf	??i1_Send_PS2+2,w
 13053  0CEB  00F2               	movwf	i1CheckSum_byte@Odd_Even
 13054  0CEC  319B  232B  318C   	fcall	i1_CheckSum_byte
 13055  0CEF  00FD               	movwf	??i1_Send_PS2+3
 13056  0CF0  087D               	movf	??i1_Send_PS2+3,w
 13057  0CF1  0020               	movlb	0	; select bank0
 13058  0CF2  00A0               	movwf	i1Send_PS2@oddparity
 13059                           
 13060                           ;PS_2.c: 848: unsigned int timeout =0;
 13061  0CF3  01A3               	clrf	i1Send_PS2@timeout
 13062  0CF4  01A4               	clrf	i1Send_PS2@timeout+1
 13063                           
 13064                           ;PS_2.c: 850: Clock_TRIS(0);
 13065  0CF5  3000               	movlw	0
 13066  0CF6  3198  20BA  318C   	fcall	i1_Clock_TRIS
 13067                           
 13068                           ;PS_2.c: 851: Data_TRIS(0);
 13069  0CF9  3000               	movlw	0
 13070  0CFA  3198  20C4  318C   	fcall	i1_Data_TRIS
 13071                           
 13072                           ;PS_2.c: 852: LATA &= ~0b00100000;
 13073  0CFD  30DF               	movlw	223
 13074  0CFE  00FA               	movwf	??i1_Send_PS2
 13075  0CFF  087A               	movf	??i1_Send_PS2,w
 13076  0D00  0022               	movlb	2	; select bank2
 13077  0D01  058C               	andwf	12,f	;volatile
 13078                           
 13079                           ;PS_2.c: 853: delayUS(300);
 13080  0D02  3000               	movlw	0
 13081  0D03  00F3               	movwf	i1delayUS@US+3
 13082  0D04  3000               	movlw	0
 13083  0D05  00F2               	movwf	i1delayUS@US+2
 13084  0D06  3001               	movlw	1
 13085  0D07  00F1               	movwf	i1delayUS@US+1
 13086  0D08  302C               	movlw	44
 13087  0D09  00F0               	movwf	i1delayUS@US
 13088  0D0A  319B  23F0  318C   	fcall	i1_delayUS
 13089                           
 13090                           ;PS_2.c: 854: LATA &= ~0b00010000;
 13091  0D0D  30EF               	movlw	239
 13092  0D0E  00FA               	movwf	??i1_Send_PS2
 13093  0D0F  087A               	movf	??i1_Send_PS2,w
 13094  0D10  0022               	movlb	2	; select bank2
 13095  0D11  058C               	andwf	12,f	;volatile
 13096                           
 13097                           ;PS_2.c: 855: delayUS(20);
 13098  0D12  3000               	movlw	0
 13099  0D13  00F3               	movwf	i1delayUS@US+3
 13100  0D14  3000               	movlw	0
 13101  0D15  00F2               	movwf	i1delayUS@US+2
 13102  0D16  3000               	movlw	0
 13103  0D17  00F1               	movwf	i1delayUS@US+1
 13104  0D18  3014               	movlw	20
 13105  0D19  00F0               	movwf	i1delayUS@US
 13106  0D1A  319B  23F0  318C   	fcall	i1_delayUS
 13107                           
 13108                           ;PS_2.c: 856: Clock_TRIS(1);
 13109  0D1D  3001               	movlw	1
 13110  0D1E  3198  20BA  318C   	fcall	i1_Clock_TRIS
 13111                           
 13112                           ;PS_2.c: 857: timeout=0;
 13113  0D21  0020               	movlb	0	; select bank0
 13114  0D22  01A3               	clrf	i1Send_PS2@timeout
 13115  0D23  01A4               	clrf	i1Send_PS2@timeout+1
 13116  0D24                     i1l5052:	
 13117                           ;PS_2.c: 858: while(READ_PS_2_PIN(0b00100000))
 13118                           
 13119  0D24  3020               	movlw	32
 13120  0D25  3199  21A4  318C   	fcall	i1_READ_PS_2_PIN
 13121  0D28  3800               	iorlw	0
 13122  0D29  1903               	btfsc	3,2
 13123  0D2A  2D41               	goto	i1l5054
 13124                           
 13125                           ;PS_2.c: 859: {
 13126                           ;PS_2.c: 860: __nop();
 13127  0D2B  0000               	nop
 13128                           
 13129                           ;PS_2.c: 861: timeout++;
 13130  0D2C  3001               	movlw	1
 13131  0D2D  0020               	movlb	0	; select bank0
 13132  0D2E  07A3               	addwf	i1Send_PS2@timeout,f
 13133  0D2F  3000               	movlw	0
 13134  0D30  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13135                           
 13136                           ;PS_2.c: 862: if(timeout > 15000)
 13137  0D31  303A               	movlw	58
 13138  0D32  0224               	subwf	i1Send_PS2@timeout+1,w
 13139  0D33  3099               	movlw	153
 13140  0D34  1903               	skipnz
 13141  0D35  0223               	subwf	i1Send_PS2@timeout,w
 13142  0D36  1C03               	skipc
 13143  0D37  2D24               	goto	i1l5052
 13144                           
 13145                           ;PS_2.c: 863: {
 13146                           ;PS_2.c: 864: Clock_TRIS(1);
 13147  0D38  3001               	movlw	1
 13148  0D39  3198  20BA  318C   	fcall	i1_Clock_TRIS
 13149                           
 13150                           ;PS_2.c: 865: Data_TRIS(1);
 13151  0D3C  3001               	movlw	1
 13152  0D3D  3198  20C4         	fcall	i1_Data_TRIS
 13153                           
 13154                           ;PS_2.c: 866: return 1;
 13155  0D3F  3001               	movlw	1
 13156  0D40  0008               	return
 13157  0D41                     i1l5054:	
 13158                           
 13159                           ;PS_2.c: 867: }
 13160                           ;PS_2.c: 868: }
 13161                           ;PS_2.c: 869: for(i=0;i<8;i++)
 13162  0D41  0020               	movlb	0	; select bank0
 13163  0D42  01A2               	clrf	i1Send_PS2@i
 13164  0D43  3008               	movlw	8
 13165  0D44  0222               	subwf	i1Send_PS2@i,w
 13166  0D45  1803               	btfsc	3,0
 13167  0D46  2D9B               	goto	i1l826
 13168  0D47                     i1l825:	
 13169                           
 13170                           ;PS_2.c: 870: {
 13171                           ;PS_2.c: 871: if(command & 0x1)
 13172  0D47  1C21               	btfss	i1Send_PS2@command,0
 13173  0D48  2D4C               	goto	i1l5062
 13174                           
 13175                           ;PS_2.c: 872: {
 13176                           ;PS_2.c: 873: LATA |= 0b00010000;
 13177  0D49  0022               	movlb	2	; select bank2
 13178  0D4A  160C               	bsf	12,4	;volatile
 13179                           
 13180                           ;PS_2.c: 874: }
 13181  0D4B  2D51               	goto	i1l5064
 13182  0D4C                     i1l5062:	
 13183                           
 13184                           ;PS_2.c: 875: else
 13185                           ;PS_2.c: 876: {
 13186                           ;PS_2.c: 877: LATA &= ~0b00010000;
 13187  0D4C  30EF               	movlw	239
 13188  0D4D  00FA               	movwf	??i1_Send_PS2
 13189  0D4E  087A               	movf	??i1_Send_PS2,w
 13190  0D4F  0022               	movlb	2	; select bank2
 13191  0D50  058C               	andwf	12,f	;volatile
 13192  0D51                     i1l5064:	
 13193                           
 13194                           ;PS_2.c: 878: }
 13195                           ;PS_2.c: 879: command >> = 1;
 13196  0D51  1003               	clrc
 13197  0D52  0020               	movlb	0	; select bank0
 13198  0D53  0CA1               	rrf	i1Send_PS2@command,f
 13199                           
 13200                           ;PS_2.c: 880: timeout=0;
 13201  0D54  01A3               	clrf	i1Send_PS2@timeout
 13202  0D55  01A4               	clrf	i1Send_PS2@timeout+1
 13203  0D56                     i1l5076:	
 13204                           ;PS_2.c: 881: while(!READ_PS_2_PIN(0b00100000))
 13205                           
 13206  0D56  3020               	movlw	32
 13207  0D57  3199  21A4  318C   	fcall	i1_READ_PS_2_PIN
 13208  0D5A  3A00               	xorlw	0
 13209  0D5B  1D03               	btfss	3,2
 13210  0D5C  2D72               	goto	i1l5078
 13211                           
 13212                           ;PS_2.c: 882: {
 13213                           ;PS_2.c: 883: timeout++;
 13214  0D5D  3001               	movlw	1
 13215  0D5E  0020               	movlb	0	; select bank0
 13216  0D5F  07A3               	addwf	i1Send_PS2@timeout,f
 13217  0D60  3000               	movlw	0
 13218  0D61  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13219                           
 13220                           ;PS_2.c: 884: if(timeout > 15000)
 13221  0D62  303A               	movlw	58
 13222  0D63  0224               	subwf	i1Send_PS2@timeout+1,w
 13223  0D64  3099               	movlw	153
 13224  0D65  1903               	skipnz
 13225  0D66  0223               	subwf	i1Send_PS2@timeout,w
 13226  0D67  1C03               	skipc
 13227  0D68  2D56               	goto	i1l5076
 13228                           
 13229                           ;PS_2.c: 885: {
 13230                           ;PS_2.c: 886: Clock_TRIS(1);
 13231  0D69  3001               	movlw	1
 13232  0D6A  3198  20BA  318C   	fcall	i1_Clock_TRIS
 13233                           
 13234                           ;PS_2.c: 887: Data_TRIS(1);
 13235  0D6D  3001               	movlw	1
 13236  0D6E  3198  20C4         	fcall	i1_Data_TRIS
 13237                           
 13238                           ;PS_2.c: 888: return 1;
 13239  0D70  3001               	movlw	1
 13240  0D71  0008               	return
 13241  0D72                     i1l5078:	
 13242                           
 13243                           ;PS_2.c: 889: }
 13244                           ;PS_2.c: 890: }
 13245                           ;PS_2.c: 891: timeout=0;
 13246  0D72  0020               	movlb	0	; select bank0
 13247  0D73  01A3               	clrf	i1Send_PS2@timeout
 13248  0D74  01A4               	clrf	i1Send_PS2@timeout+1
 13249  0D75                     i1l5088:	
 13250                           ;PS_2.c: 892: while(READ_PS_2_PIN(0b00100000))
 13251                           
 13252  0D75  3020               	movlw	32
 13253  0D76  3199  21A4  318C   	fcall	i1_READ_PS_2_PIN
 13254  0D79  3800               	iorlw	0
 13255  0D7A  1903               	btfsc	3,2
 13256  0D7B  2D92               	goto	i1l5090
 13257                           
 13258                           ;PS_2.c: 893: {
 13259                           ;PS_2.c: 894: __nop();
 13260  0D7C  0000               	nop
 13261                           
 13262                           ;PS_2.c: 895: timeout++;
 13263  0D7D  3001               	movlw	1
 13264  0D7E  0020               	movlb	0	; select bank0
 13265  0D7F  07A3               	addwf	i1Send_PS2@timeout,f
 13266  0D80  3000               	movlw	0
 13267  0D81  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13268                           
 13269                           ;PS_2.c: 896: if(timeout > 15000)
 13270  0D82  303A               	movlw	58
 13271  0D83  0224               	subwf	i1Send_PS2@timeout+1,w
 13272  0D84  3099               	movlw	153
 13273  0D85  1903               	skipnz
 13274  0D86  0223               	subwf	i1Send_PS2@timeout,w
 13275  0D87  1C03               	skipc
 13276  0D88  2D75               	goto	i1l5088
 13277                           
 13278                           ;PS_2.c: 897: {
 13279                           ;PS_2.c: 898: Clock_TRIS(1);
 13280  0D89  3001               	movlw	1
 13281  0D8A  3198  20BA  318C   	fcall	i1_Clock_TRIS
 13282                           
 13283                           ;PS_2.c: 899: Data_TRIS(1);
 13284  0D8D  3001               	movlw	1
 13285  0D8E  3198  20C4         	fcall	i1_Data_TRIS
 13286                           
 13287                           ;PS_2.c: 900: return 1;
 13288  0D90  3001               	movlw	1
 13289  0D91  0008               	return
 13290  0D92                     i1l5090:	
 13291  0D92  3001               	movlw	1
 13292  0D93  00FA               	movwf	??i1_Send_PS2
 13293  0D94  087A               	movf	??i1_Send_PS2,w
 13294  0D95  0020               	movlb	0	; select bank0
 13295  0D96  07A2               	addwf	i1Send_PS2@i,f
 13296  0D97  3008               	movlw	8
 13297  0D98  0222               	subwf	i1Send_PS2@i,w
 13298  0D99  1C03               	skipc
 13299  0D9A  2D47               	goto	i1l825
 13300  0D9B                     i1l826:	
 13301                           
 13302                           ;PS_2.c: 901: }
 13303                           ;PS_2.c: 902: }
 13304                           ;PS_2.c: 903: }
 13305                           ;PS_2.c: 905: if(oddparity & 0x1)
 13306  0D9B  1C20               	btfss	i1Send_PS2@oddparity,0
 13307  0D9C  2DA0               	goto	i1l5096
 13308                           
 13309                           ;PS_2.c: 906: {
 13310                           ;PS_2.c: 907: LATA |= 0b00010000;
 13311  0D9D  0022               	movlb	2	; select bank2
 13312  0D9E  160C               	bsf	12,4	;volatile
 13313                           
 13314                           ;PS_2.c: 908: }
 13315  0D9F  2DA5               	goto	i1l5098
 13316  0DA0                     i1l5096:	
 13317                           
 13318                           ;PS_2.c: 909: else
 13319                           ;PS_2.c: 910: {
 13320                           ;PS_2.c: 911: LATA &= ~0b00010000;
 13321  0DA0  30EF               	movlw	239
 13322  0DA1  00FA               	movwf	??i1_Send_PS2
 13323  0DA2  087A               	movf	??i1_Send_PS2,w
 13324  0DA3  0022               	movlb	2	; select bank2
 13325  0DA4  058C               	andwf	12,f	;volatile
 13326  0DA5                     i1l5098:	
 13327                           
 13328                           ;PS_2.c: 912: }
 13329                           ;PS_2.c: 913: timeout=0;
 13330  0DA5  0020               	movlb	0	; select bank0
 13331  0DA6  01A3               	clrf	i1Send_PS2@timeout
 13332  0DA7  01A4               	clrf	i1Send_PS2@timeout+1
 13333  0DA8                     i1l5108:	
 13334                           ;PS_2.c: 914: while(!READ_PS_2_PIN(0b00100000))
 13335                           
 13336  0DA8  3020               	movlw	32
 13337  0DA9  3199  21A4  318C   	fcall	i1_READ_PS_2_PIN
 13338  0DAC  3A00               	xorlw	0
 13339  0DAD  1D03               	btfss	3,2
 13340  0DAE  2DC4               	goto	i1l5110
 13341                           
 13342                           ;PS_2.c: 915: {
 13343                           ;PS_2.c: 916: timeout++;
 13344  0DAF  3001               	movlw	1
 13345  0DB0  0020               	movlb	0	; select bank0
 13346  0DB1  07A3               	addwf	i1Send_PS2@timeout,f
 13347  0DB2  3000               	movlw	0
 13348  0DB3  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13349                           
 13350                           ;PS_2.c: 917: if(timeout > 15000)
 13351  0DB4  303A               	movlw	58
 13352  0DB5  0224               	subwf	i1Send_PS2@timeout+1,w
 13353  0DB6  3099               	movlw	153
 13354  0DB7  1903               	skipnz
 13355  0DB8  0223               	subwf	i1Send_PS2@timeout,w
 13356  0DB9  1C03               	skipc
 13357  0DBA  2DA8               	goto	i1l5108
 13358                           
 13359                           ;PS_2.c: 918: {
 13360                           ;PS_2.c: 919: Clock_TRIS(1);
 13361  0DBB  3001               	movlw	1
 13362  0DBC  3198  20BA  318C   	fcall	i1_Clock_TRIS
 13363                           
 13364                           ;PS_2.c: 920: Data_TRIS(1);
 13365  0DBF  3001               	movlw	1
 13366  0DC0  3198  20C4         	fcall	i1_Data_TRIS
 13367                           
 13368                           ;PS_2.c: 921: return 1;
 13369  0DC2  3001               	movlw	1
 13370  0DC3  0008               	return
 13371  0DC4                     i1l5110:	
 13372                           
 13373                           ;PS_2.c: 922: }
 13374                           ;PS_2.c: 923: }
 13375                           ;PS_2.c: 924: timeout=0;
 13376  0DC4  0020               	movlb	0	; select bank0
 13377  0DC5  01A3               	clrf	i1Send_PS2@timeout
 13378  0DC6  01A4               	clrf	i1Send_PS2@timeout+1
 13379  0DC7                     i1l5120:	
 13380                           ;PS_2.c: 925: while(READ_PS_2_PIN(0b00100000))
 13381                           
 13382  0DC7  3020               	movlw	32
 13383  0DC8  3199  21A4  318C   	fcall	i1_READ_PS_2_PIN
 13384  0DCB  3800               	iorlw	0
 13385  0DCC  1903               	btfsc	3,2
 13386  0DCD  2DE3               	goto	i1l5122
 13387                           
 13388                           ;PS_2.c: 926: {
 13389                           ;PS_2.c: 927: timeout++;
 13390  0DCE  3001               	movlw	1
 13391  0DCF  0020               	movlb	0	; select bank0
 13392  0DD0  07A3               	addwf	i1Send_PS2@timeout,f
 13393  0DD1  3000               	movlw	0
 13394  0DD2  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13395                           
 13396                           ;PS_2.c: 928: if(timeout > 15000)
 13397  0DD3  303A               	movlw	58
 13398  0DD4  0224               	subwf	i1Send_PS2@timeout+1,w
 13399  0DD5  3099               	movlw	153
 13400  0DD6  1903               	skipnz
 13401  0DD7  0223               	subwf	i1Send_PS2@timeout,w
 13402  0DD8  1C03               	skipc
 13403  0DD9  2DC7               	goto	i1l5120
 13404                           
 13405                           ;PS_2.c: 929: {
 13406                           ;PS_2.c: 930: Clock_TRIS(1);
 13407  0DDA  3001               	movlw	1
 13408  0DDB  3198  20BA  318C   	fcall	i1_Clock_TRIS
 13409                           
 13410                           ;PS_2.c: 931: Data_TRIS(1);
 13411  0DDE  3001               	movlw	1
 13412  0DDF  3198  20C4         	fcall	i1_Data_TRIS
 13413                           
 13414                           ;PS_2.c: 932: return 1;
 13415  0DE1  3001               	movlw	1
 13416  0DE2  0008               	return
 13417  0DE3                     i1l5122:	
 13418                           
 13419                           ;PS_2.c: 933: }
 13420                           ;PS_2.c: 934: }
 13421                           ;PS_2.c: 936: Data_TRIS(1);
 13422  0DE3  3001               	movlw	1
 13423  0DE4  3198  20C4  318C   	fcall	i1_Data_TRIS
 13424                           
 13425                           ;PS_2.c: 938: timeout=0;
 13426  0DE7  0020               	movlb	0	; select bank0
 13427  0DE8  01A3               	clrf	i1Send_PS2@timeout
 13428  0DE9  01A4               	clrf	i1Send_PS2@timeout+1
 13429  0DEA                     i1l5134:	
 13430                           ;PS_2.c: 939: while(READ_PS_2_PIN(0b00010000))
 13431                           
 13432  0DEA  3010               	movlw	16
 13433  0DEB  3199  21A4  318C   	fcall	i1_READ_PS_2_PIN
 13434  0DEE  3800               	iorlw	0
 13435  0DEF  1903               	btfsc	3,2
 13436  0DF0  2E06               	goto	i1l5136
 13437                           
 13438                           ;PS_2.c: 940: {
 13439                           ;PS_2.c: 941: timeout++;
 13440  0DF1  3001               	movlw	1
 13441  0DF2  0020               	movlb	0	; select bank0
 13442  0DF3  07A3               	addwf	i1Send_PS2@timeout,f
 13443  0DF4  3000               	movlw	0
 13444  0DF5  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13445                           
 13446                           ;PS_2.c: 942: if(timeout > 15000)
 13447  0DF6  303A               	movlw	58
 13448  0DF7  0224               	subwf	i1Send_PS2@timeout+1,w
 13449  0DF8  3099               	movlw	153
 13450  0DF9  1903               	skipnz
 13451  0DFA  0223               	subwf	i1Send_PS2@timeout,w
 13452  0DFB  1C03               	skipc
 13453  0DFC  2DEA               	goto	i1l5134
 13454                           
 13455                           ;PS_2.c: 943: {
 13456                           ;PS_2.c: 944: Clock_TRIS(1);
 13457  0DFD  3001               	movlw	1
 13458  0DFE  3198  20BA  318C   	fcall	i1_Clock_TRIS
 13459                           
 13460                           ;PS_2.c: 945: Data_TRIS(1);
 13461  0E01  3001               	movlw	1
 13462  0E02  3198  20C4         	fcall	i1_Data_TRIS
 13463                           
 13464                           ;PS_2.c: 946: return 1;
 13465  0E04  3001               	movlw	1
 13466  0E05  0008               	return
 13467  0E06                     i1l5136:	
 13468                           
 13469                           ;PS_2.c: 947: }
 13470                           ;PS_2.c: 948: }
 13471                           ;PS_2.c: 949: timeout=0;
 13472  0E06  0020               	movlb	0	; select bank0
 13473  0E07  01A3               	clrf	i1Send_PS2@timeout
 13474  0E08  01A4               	clrf	i1Send_PS2@timeout+1
 13475  0E09                     i1l5146:	
 13476                           ;PS_2.c: 950: while(READ_PS_2_PIN(0b00100000))
 13477                           
 13478  0E09  3020               	movlw	32
 13479  0E0A  3199  21A4  318C   	fcall	i1_READ_PS_2_PIN
 13480  0E0D  3800               	iorlw	0
 13481  0E0E  1903               	btfsc	3,2
 13482  0E0F  2E25               	goto	i1l5148
 13483                           
 13484                           ;PS_2.c: 951: {
 13485                           ;PS_2.c: 952: timeout++;
 13486  0E10  3001               	movlw	1
 13487  0E11  0020               	movlb	0	; select bank0
 13488  0E12  07A3               	addwf	i1Send_PS2@timeout,f
 13489  0E13  3000               	movlw	0
 13490  0E14  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13491                           
 13492                           ;PS_2.c: 953: if(timeout > 15000)
 13493  0E15  303A               	movlw	58
 13494  0E16  0224               	subwf	i1Send_PS2@timeout+1,w
 13495  0E17  3099               	movlw	153
 13496  0E18  1903               	skipnz
 13497  0E19  0223               	subwf	i1Send_PS2@timeout,w
 13498  0E1A  1C03               	skipc
 13499  0E1B  2E09               	goto	i1l5146
 13500                           
 13501                           ;PS_2.c: 954: {
 13502                           ;PS_2.c: 955: Clock_TRIS(1);
 13503  0E1C  3001               	movlw	1
 13504  0E1D  3198  20BA  318C   	fcall	i1_Clock_TRIS
 13505                           
 13506                           ;PS_2.c: 956: Data_TRIS(1);
 13507  0E20  3001               	movlw	1
 13508  0E21  3198  20C4         	fcall	i1_Data_TRIS
 13509                           
 13510                           ;PS_2.c: 957: return 1;
 13511  0E23  3001               	movlw	1
 13512  0E24  0008               	return
 13513  0E25                     i1l5148:	
 13514                           
 13515                           ;PS_2.c: 958: }
 13516                           ;PS_2.c: 959: }
 13517                           ;PS_2.c: 960: timeout=0;
 13518  0E25  0020               	movlb	0	; select bank0
 13519  0E26  01A3               	clrf	i1Send_PS2@timeout
 13520  0E27  01A4               	clrf	i1Send_PS2@timeout+1
 13521  0E28                     i1l5158:	
 13522                           ;PS_2.c: 961: while(!READ_PS_2_PIN(0b00010000))
 13523                           
 13524  0E28  3010               	movlw	16
 13525  0E29  3199  21A4  318C   	fcall	i1_READ_PS_2_PIN
 13526  0E2C  3A00               	xorlw	0
 13527  0E2D  1D03               	btfss	3,2
 13528  0E2E  2E44               	goto	i1l5160
 13529                           
 13530                           ;PS_2.c: 962: {
 13531                           ;PS_2.c: 963: timeout++;
 13532  0E2F  3001               	movlw	1
 13533  0E30  0020               	movlb	0	; select bank0
 13534  0E31  07A3               	addwf	i1Send_PS2@timeout,f
 13535  0E32  3000               	movlw	0
 13536  0E33  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13537                           
 13538                           ;PS_2.c: 964: if(timeout > 15000)
 13539  0E34  303A               	movlw	58
 13540  0E35  0224               	subwf	i1Send_PS2@timeout+1,w
 13541  0E36  3099               	movlw	153
 13542  0E37  1903               	skipnz
 13543  0E38  0223               	subwf	i1Send_PS2@timeout,w
 13544  0E39  1C03               	skipc
 13545  0E3A  2E28               	goto	i1l5158
 13546                           
 13547                           ;PS_2.c: 965: {
 13548                           ;PS_2.c: 966: Clock_TRIS(1);
 13549  0E3B  3001               	movlw	1
 13550  0E3C  3198  20BA  318C   	fcall	i1_Clock_TRIS
 13551                           
 13552                           ;PS_2.c: 967: Data_TRIS(1);
 13553  0E3F  3001               	movlw	1
 13554  0E40  3198  20C4         	fcall	i1_Data_TRIS
 13555                           
 13556                           ;PS_2.c: 968: return 1;
 13557  0E42  3001               	movlw	1
 13558  0E43  0008               	return
 13559  0E44                     i1l5160:	
 13560                           
 13561                           ;PS_2.c: 969: }
 13562                           ;PS_2.c: 970: }
 13563                           ;PS_2.c: 971: timeout=0;
 13564  0E44  0020               	movlb	0	; select bank0
 13565  0E45  01A3               	clrf	i1Send_PS2@timeout
 13566  0E46  01A4               	clrf	i1Send_PS2@timeout+1
 13567  0E47                     i1l5170:	
 13568                           ;PS_2.c: 972: while(!READ_PS_2_PIN(0b00100000))
 13569                           
 13570  0E47  3020               	movlw	32
 13571  0E48  3199  21A4  318C   	fcall	i1_READ_PS_2_PIN
 13572  0E4B  3A00               	xorlw	0
 13573  0E4C  1D03               	btfss	3,2
 13574  0E4D  2E63               	goto	i1l5172
 13575                           
 13576                           ;PS_2.c: 973: {
 13577                           ;PS_2.c: 974: timeout++;
 13578  0E4E  3001               	movlw	1
 13579  0E4F  0020               	movlb	0	; select bank0
 13580  0E50  07A3               	addwf	i1Send_PS2@timeout,f
 13581  0E51  3000               	movlw	0
 13582  0E52  3DA4               	addwfc	i1Send_PS2@timeout+1,f
 13583                           
 13584                           ;PS_2.c: 975: if(timeout > 15000)
 13585  0E53  303A               	movlw	58
 13586  0E54  0224               	subwf	i1Send_PS2@timeout+1,w
 13587  0E55  3099               	movlw	153
 13588  0E56  1903               	skipnz
 13589  0E57  0223               	subwf	i1Send_PS2@timeout,w
 13590  0E58  1C03               	skipc
 13591  0E59  2E47               	goto	i1l5170
 13592                           
 13593                           ;PS_2.c: 976: {
 13594                           ;PS_2.c: 977: Clock_TRIS(1);
 13595  0E5A  3001               	movlw	1
 13596  0E5B  3198  20BA  318C   	fcall	i1_Clock_TRIS
 13597                           
 13598                           ;PS_2.c: 978: Data_TRIS(1);
 13599  0E5E  3001               	movlw	1
 13600  0E5F  3198  20C4         	fcall	i1_Data_TRIS
 13601                           
 13602                           ;PS_2.c: 979: return 1;
 13603  0E61  3001               	movlw	1
 13604  0E62  0008               	return
 13605  0E63                     i1l5172:	
 13606                           
 13607                           ;PS_2.c: 980: }
 13608                           ;PS_2.c: 981: }
 13609                           ;PS_2.c: 984: Clock_TRIS(1);
 13610  0E63  3001               	movlw	1
 13611  0E64  3198  20BA  318C   	fcall	i1_Clock_TRIS
 13612                           
 13613                           ;PS_2.c: 985: Data_TRIS(1);
 13614  0E67  3001               	movlw	1
 13615  0E68  3198  20C4         	fcall	i1_Data_TRIS
 13616                           
 13617                           ;PS_2.c: 986: return 0;
 13618  0E6A  3000               	movlw	0
 13619  0E6B  0008               	return
 13620  0E6C                     __end_ofi1_Send_PS2:	
 13621                           
 13622                           	psect	text44
 13623  19A4                     __ptext44:	
 13624 ;; *************** function i1_READ_PS_2_PIN *****************
 13625 ;; Defined at:
 13626 ;;		line 220 in file "PS_2.c"
 13627 ;; Parameters:    Size  Location     Type
 13628 ;;  DATA_CLK        1    wreg     unsigned char 
 13629 ;; Auto vars:     Size  Location     Type
 13630 ;;  DATA_CLK        1    0[COMMON] unsigned char 
 13631 ;; Return value:  Size  Location     Type
 13632 ;;                  1    wreg      unsigned char 
 13633 ;; Registers used:
 13634 ;;		wreg
 13635 ;; Tracked objects:
 13636 ;;		On entry : 0/0
 13637 ;;		On exit  : 0/0
 13638 ;;		Unchanged: 0/0
 13639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13641 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13643 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13644 ;;Total ram usage:        1 bytes
 13645 ;; Hardware stack levels used:    1
 13646 ;; This function calls:
 13647 ;;		Nothing
 13648 ;; This function is called by:
 13649 ;;		_isr
 13650 ;;		i1_Send_PS2
 13651 ;; This function uses a non-reentrant model
 13652 ;;
 13653                           
 13654                           
 13655                           ;psect for function i1_READ_PS_2_PIN
 13656  19A4                     i1_READ_PS_2_PIN:	
 13657                           
 13658                           ;incstack = 0
 13659                           ; Regs used in i1_READ_PS_2_PIN: [wreg]
 13660                           ;i1READ_PS_2_PIN@DATA_CLK stored from wreg
 13661  19A4  00F0               	movwf	i1READ_PS_2_PIN@DATA_CLK
 13662                           
 13663                           ;PS_2.c: 222: if(DATA_CLK == 0b00100000)
 13664  19A5  0870               	movf	i1READ_PS_2_PIN@DATA_CLK,w
 13665  19A6  3A20               	xorlw	32
 13666  19A7  1D03               	skipz
 13667  19A8  29B0               	goto	i1l615
 13668                           
 13669                           ;PS_2.c: 223: {
 13670                           ;PS_2.c: 225: if((PORTA & 0b00100000) == 0b00100000)
 13671  19A9  0020               	movlb	0	; select bank0
 13672  19AA  1E8C               	btfss	12,5	;volatile
 13673  19AB  29AE               	goto	i1l4540
 13674                           
 13675                           ;PS_2.c: 226: {
 13676                           ;PS_2.c: 227: return (1);
 13677  19AC  3001               	movlw	1
 13678                           
 13679                           ;PS_2.c: 228: }
 13680  19AD  0008               	return
 13681  19AE                     i1l4540:	
 13682                           
 13683                           ;PS_2.c: 229: else
 13684                           ;PS_2.c: 230: {
 13685                           ;PS_2.c: 231: return 0;
 13686  19AE  3000               	movlw	0
 13687                           
 13688                           ;PS_2.c: 232: }
 13689                           ;PS_2.c: 233: }
 13690  19AF  0008               	return
 13691  19B0                     i1l615:	
 13692                           
 13693                           ;PS_2.c: 234: else
 13694                           ;PS_2.c: 235: {
 13695                           ;PS_2.c: 237: if((PORTA & 0b00010000) == 0b00010000)
 13696  19B0  0020               	movlb	0	; select bank0
 13697  19B1  1E0C               	btfss	12,4	;volatile
 13698  19B2  29B5               	goto	i1l4550
 13699                           
 13700                           ;PS_2.c: 238: {
 13701                           ;PS_2.c: 239: return (1);
 13702  19B3  3001               	movlw	1
 13703                           
 13704                           ;PS_2.c: 240: }
 13705  19B4  0008               	return
 13706  19B5                     i1l4550:	
 13707                           
 13708                           ;PS_2.c: 241: else
 13709                           ;PS_2.c: 242: {
 13710                           ;PS_2.c: 243: return 0;
 13711  19B5  3000               	movlw	0
 13712  19B6  0008               	return
 13713  19B7                     __end_ofi1_READ_PS_2_PIN:	
 13714                           
 13715                           	psect	text45
 13716  18C4                     __ptext45:	
 13717 ;; *************** function i1_Data_TRIS *****************
 13718 ;; Defined at:
 13719 ;;		line 135 in file "PS_2.c"
 13720 ;; Parameters:    Size  Location     Type
 13721 ;;  direction       1    wreg     unsigned char 
 13722 ;; Auto vars:     Size  Location     Type
 13723 ;;  direction       1    0[COMMON] unsigned char 
 13724 ;; Return value:  Size  Location     Type
 13725 ;;		None               void
 13726 ;; Registers used:
 13727 ;;		wreg, status,2, status,0
 13728 ;; Tracked objects:
 13729 ;;		On entry : 0/0
 13730 ;;		On exit  : 0/0
 13731 ;;		Unchanged: 0/0
 13732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13734 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13736 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13737 ;;Total ram usage:        1 bytes
 13738 ;; Hardware stack levels used:    1
 13739 ;; This function calls:
 13740 ;;		Nothing
 13741 ;; This function is called by:
 13742 ;;		i1_Send_PS2
 13743 ;; This function uses a non-reentrant model
 13744 ;;
 13745                           
 13746                           
 13747                           ;psect for function i1_Data_TRIS
 13748  18C4                     i1_Data_TRIS:	
 13749                           
 13750                           ;incstack = 0
 13751                           ; Regs used in i1_Data_TRIS: [wreg+status,2+status,0]
 13752                           ;i1Data_TRIS@direction stored from wreg
 13753  18C4  00F0               	movwf	i1Data_TRIS@direction
 13754                           
 13755                           ;PS_2.c: 137: if(direction == 0)
 13756  18C5  08F0               	movf	i1Data_TRIS@direction,f
 13757  18C6  1D03               	skipz
 13758  18C7  28CB               	goto	i1l595
 13759                           
 13760                           ;PS_2.c: 138: {
 13761                           ;PS_2.c: 139: TRISAbits.TRISA4 = 0;
 13762  18C8  0021               	movlb	1	; select bank1
 13763  18C9  120C               	bcf	12,4	;volatile
 13764                           
 13765                           ;PS_2.c: 140: }
 13766  18CA  0008               	return
 13767  18CB                     i1l595:	
 13768                           
 13769                           ;PS_2.c: 141: else
 13770                           ;PS_2.c: 142: {
 13771                           ;PS_2.c: 143: TRISAbits.TRISA4 = 1;
 13772  18CB  0021               	movlb	1	; select bank1
 13773  18CC  160C               	bsf	12,4	;volatile
 13774  18CD  0008               	return
 13775  18CE                     __end_ofi1_Data_TRIS:	
 13776                           
 13777                           	psect	text46
 13778  18BA                     __ptext46:	
 13779 ;; *************** function i1_Clock_TRIS *****************
 13780 ;; Defined at:
 13781 ;;		line 118 in file "PS_2.c"
 13782 ;; Parameters:    Size  Location     Type
 13783 ;;  direction       1    wreg     unsigned char 
 13784 ;; Auto vars:     Size  Location     Type
 13785 ;;  direction       1    0[COMMON] unsigned char 
 13786 ;; Return value:  Size  Location     Type
 13787 ;;		None               void
 13788 ;; Registers used:
 13789 ;;		wreg, status,2, status,0
 13790 ;; Tracked objects:
 13791 ;;		On entry : 0/0
 13792 ;;		On exit  : 0/0
 13793 ;;		Unchanged: 0/0
 13794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13796 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13798 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13799 ;;Total ram usage:        1 bytes
 13800 ;; Hardware stack levels used:    1
 13801 ;; This function calls:
 13802 ;;		Nothing
 13803 ;; This function is called by:
 13804 ;;		i1_Send_PS2
 13805 ;; This function uses a non-reentrant model
 13806 ;;
 13807                           
 13808                           
 13809                           ;psect for function i1_Clock_TRIS
 13810  18BA                     i1_Clock_TRIS:	
 13811                           
 13812                           ;incstack = 0
 13813                           ; Regs used in i1_Clock_TRIS: [wreg+status,2+status,0]
 13814                           ;i1Clock_TRIS@direction stored from wreg
 13815  18BA  00F0               	movwf	i1Clock_TRIS@direction
 13816                           
 13817                           ;PS_2.c: 120: if(direction == 0)
 13818  18BB  08F0               	movf	i1Clock_TRIS@direction,f
 13819  18BC  1D03               	skipz
 13820  18BD  28C1               	goto	i1l590
 13821                           
 13822                           ;PS_2.c: 121: {
 13823                           ;PS_2.c: 122: TRISAbits.TRISA5 = 0;
 13824  18BE  0021               	movlb	1	; select bank1
 13825  18BF  128C               	bcf	12,5	;volatile
 13826                           
 13827                           ;PS_2.c: 123: }
 13828  18C0  0008               	return
 13829  18C1                     i1l590:	
 13830                           
 13831                           ;PS_2.c: 124: else
 13832                           ;PS_2.c: 125: {
 13833                           ;PS_2.c: 126: TRISAbits.TRISA5 = 1;
 13834  18C1  0021               	movlb	1	; select bank1
 13835  18C2  168C               	bsf	12,5	;volatile
 13836  18C3  0008               	return
 13837  18C4                     __end_ofi1_Clock_TRIS:	
 13838                           
 13839                           	psect	text47
 13840  19F3                     __ptext47:	
 13841 ;; *************** function _cleanBuffer *****************
 13842 ;; Defined at:
 13843 ;;		line 163 in file "MISC.c"
 13844 ;; Parameters:    Size  Location     Type
 13845 ;;  data            1    wreg     PTR unsigned char 
 13846 ;;		 -> PS_2_ScanCodes(12), 
 13847 ;;  count           2    0[COMMON] int 
 13848 ;; Auto vars:     Size  Location     Type
 13849 ;;  data            1    3[COMMON] PTR unsigned char 
 13850 ;;		 -> PS_2_ScanCodes(12), 
 13851 ;;  i               1    4[COMMON] unsigned char 
 13852 ;; Return value:  Size  Location     Type
 13853 ;;		None               void
 13854 ;; Registers used:
 13855 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13856 ;; Tracked objects:
 13857 ;;		On entry : 0/0
 13858 ;;		On exit  : 0/0
 13859 ;;		Unchanged: 0/0
 13860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13861 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13862 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13863 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13864 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13865 ;;Total ram usage:        5 bytes
 13866 ;; Hardware stack levels used:    1
 13867 ;; This function calls:
 13868 ;;		Nothing
 13869 ;; This function is called by:
 13870 ;;		_Process_PS2_ScanCode
 13871 ;; This function uses a non-reentrant model
 13872 ;;
 13873                           
 13874                           
 13875                           ;psect for function _cleanBuffer
 13876  19F3                     _cleanBuffer:	
 13877                           
 13878                           ;incstack = 0
 13879                           ; Regs used in _cleanBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
 13880                           ;cleanBuffer@data stored from wreg
 13881  19F3  00F3               	movwf	cleanBuffer@data
 13882                           
 13883                           ;MISC.c: 165: unsigned char i=0;
 13884  19F4  01F4               	clrf	cleanBuffer@i
 13885                           
 13886                           ;MISC.c: 166: for(i=0; i<count;i++)
 13887  19F5  01F4               	clrf	cleanBuffer@i
 13888  19F6                     i1l4686:	
 13889  19F6  0871               	movf	cleanBuffer@count+1,w
 13890  19F7  3A80               	xorlw	128
 13891  19F8  3C80               	sublw	128
 13892  19F9  1D03               	skipz
 13893  19FA  29FD               	goto	u526_25
 13894  19FB  0870               	movf	cleanBuffer@count,w
 13895  19FC  0274               	subwf	cleanBuffer@i,w
 13896  19FD                     u526_25:	
 13897  19FD  1803               	btfsc	3,0
 13898  19FE  0008               	return
 13899                           
 13900                           ;MISC.c: 167: {
 13901                           ;MISC.c: 168: data[i]= 0;
 13902  19FF  0874               	movf	cleanBuffer@i,w
 13903  1A00  0773               	addwf	cleanBuffer@data,w
 13904  1A01  00F2               	movwf	??_cleanBuffer
 13905  1A02  0872               	movf	??_cleanBuffer,w
 13906  1A03  0086               	movwf	6
 13907  1A04  0187               	clrf	7
 13908  1A05  0181               	clrf	1
 13909  1A06  3001               	movlw	1
 13910  1A07  00F2               	movwf	??_cleanBuffer
 13911  1A08  0872               	movf	??_cleanBuffer,w
 13912  1A09  07F4               	addwf	cleanBuffer@i,f
 13913  1A0A  29F6               	goto	i1l4686
 13914  1A0B                     __end_of_cleanBuffer:	
 13915                           
 13916                           	psect	text48
 13917  1AFC                     __ptext48:	
 13918 ;; *************** function ___lmul *****************
 13919 ;; Defined at:
 13920 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul32.c"
 13921 ;; Parameters:    Size  Location     Type
 13922 ;;  multiplier      4    0[COMMON] unsigned long 
 13923 ;;  multiplicand    4    4[COMMON] unsigned long 
 13924 ;; Auto vars:     Size  Location     Type
 13925 ;;  product         4    8[COMMON] unsigned long 
 13926 ;; Return value:  Size  Location     Type
 13927 ;;                  4    0[COMMON] unsigned long 
 13928 ;; Registers used:
 13929 ;;		wreg, status,2, status,0
 13930 ;; Tracked objects:
 13931 ;;		On entry : 0/0
 13932 ;;		On exit  : 0/0
 13933 ;;		Unchanged: 0/0
 13934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13935 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13936 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13938 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13939 ;;Total ram usage:       12 bytes
 13940 ;; Hardware stack levels used:    1
 13941 ;; This function calls:
 13942 ;;		Nothing
 13943 ;; This function is called by:
 13944 ;;		_Process_PS2_ScanCode
 13945 ;; This function uses a non-reentrant model
 13946 ;;
 13947                           
 13948                           
 13949                           ;psect for function ___lmul
 13950  1AFC                     ___lmul:	
 13951                           
 13952                           ;incstack = 0
 13953                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 13954  1AFC  3000               	movlw	0
 13955  1AFD  00FB               	movwf	___lmul@product+3
 13956  1AFE  3000               	movlw	0
 13957  1AFF  00FA               	movwf	___lmul@product+2
 13958  1B00  3000               	movlw	0
 13959  1B01  00F9               	movwf	___lmul@product+1
 13960  1B02  3000               	movlw	0
 13961  1B03  00F8               	movwf	___lmul@product
 13962  1B04                     i1l4914:	
 13963  1B04  1C70               	btfss	___lmul@multiplier,0
 13964  1B05  2B0E               	goto	i1l4918
 13965  1B06  0874               	movf	___lmul@multiplicand,w
 13966  1B07  07F8               	addwf	___lmul@product,f
 13967  1B08  0875               	movf	___lmul@multiplicand+1,w
 13968  1B09  3DF9               	addwfc	___lmul@product+1,f
 13969  1B0A  0876               	movf	___lmul@multiplicand+2,w
 13970  1B0B  3DFA               	addwfc	___lmul@product+2,f
 13971  1B0C  0877               	movf	___lmul@multiplicand+3,w
 13972  1B0D  3DFB               	addwfc	___lmul@product+3,f
 13973  1B0E                     i1l4918:	
 13974  1B0E  3001               	movlw	1
 13975  1B0F                     u553_25:	
 13976  1B0F  35F4               	lslf	___lmul@multiplicand,f
 13977  1B10  0DF5               	rlf	___lmul@multiplicand+1,f
 13978  1B11  0DF6               	rlf	___lmul@multiplicand+2,f
 13979  1B12  0DF7               	rlf	___lmul@multiplicand+3,f
 13980  1B13  0B89               	decfsz	9,f
 13981  1B14  2B0F               	goto	u553_25
 13982  1B15  3001               	movlw	1
 13983  1B16                     u554_25:	
 13984  1B16  36F3               	lsrf	___lmul@multiplier+3,f
 13985  1B17  0CF2               	rrf	___lmul@multiplier+2,f
 13986  1B18  0CF1               	rrf	___lmul@multiplier+1,f
 13987  1B19  0CF0               	rrf	___lmul@multiplier,f
 13988  1B1A  0B89               	decfsz	9,f
 13989  1B1B  2B16               	goto	u554_25
 13990  1B1C  0873               	movf	___lmul@multiplier+3,w
 13991  1B1D  0472               	iorwf	___lmul@multiplier+2,w
 13992  1B1E  0471               	iorwf	___lmul@multiplier+1,w
 13993  1B1F  0470               	iorwf	___lmul@multiplier,w
 13994  1B20  1D03               	skipz
 13995  1B21  2B04               	goto	i1l4914
 13996  1B22  087B               	movf	___lmul@product+3,w
 13997  1B23  00F3               	movwf	?___lmul+3
 13998  1B24  087A               	movf	___lmul@product+2,w
 13999  1B25  00F2               	movwf	?___lmul+2
 14000  1B26  0879               	movf	___lmul@product+1,w
 14001  1B27  00F1               	movwf	?___lmul+1
 14002  1B28  0878               	movf	___lmul@product,w
 14003  1B29  00F0               	movwf	?___lmul
 14004  1B2A  0008               	return
 14005  1B2B                     __end_of___lmul:	
 14006                           
 14007                           	psect	text49
 14008  1A2D                     __ptext49:	
 14009 ;; *************** function _UART_send_break_timed *****************
 14010 ;; Defined at:
 14011 ;;		line 334 in file "UART.c"
 14012 ;; Parameters:    Size  Location     Type
 14013 ;;  US              2   10[COMMON] unsigned int 
 14014 ;; Auto vars:     Size  Location     Type
 14015 ;;		None
 14016 ;; Return value:  Size  Location     Type
 14017 ;;		None               void
 14018 ;; Registers used:
 14019 ;;		wreg, status,2, status,0, pclath, cstack
 14020 ;; Tracked objects:
 14021 ;;		On entry : 0/0
 14022 ;;		On exit  : 0/0
 14023 ;;		Unchanged: 0/0
 14024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14025 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14027 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14028 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14029 ;;Total ram usage:        3 bytes
 14030 ;; Hardware stack levels used:    1
 14031 ;; Hardware stack levels required when called:    1
 14032 ;; This function calls:
 14033 ;;		i1_delayUS
 14034 ;; This function is called by:
 14035 ;;		_Process_PS2_ScanCode
 14036 ;; This function uses a non-reentrant model
 14037 ;;
 14038                           
 14039                           
 14040                           ;psect for function _UART_send_break_timed
 14041  1A2D                     _UART_send_break_timed:	
 14042                           
 14043                           ;UART.c: 337: LATC |= 0b00000100;
 14044                           
 14045                           ;incstack = 0
 14046                           ; Regs used in _UART_send_break_timed: [wreg+status,2+status,0+pclath+cstack]
 14047  1A2D  0022               	movlb	2	; select bank2
 14048  1A2E  150E               	bsf	14,2	;volatile
 14049                           
 14050                           ;UART.c: 338: PPSLOCK =0;
 14051  1A2F  003C               	movlb	28	; select bank28
 14052  1A30  018F               	clrf	15	;volatile
 14053                           
 14054                           ;UART.c: 339: RC2PPS = 0b00000000;
 14055  1A31  003D               	movlb	29	; select bank29
 14056  1A32  01A2               	clrf	34	;volatile
 14057                           
 14058                           ;UART.c: 340: PPSLOCK =1;
 14059  1A33  3001               	movlw	1
 14060  1A34  003C               	movlb	28	; select bank28
 14061  1A35  008F               	movwf	15	;volatile
 14062                           
 14063                           ;UART.c: 342: LATC &= ~0b00000100;
 14064  1A36  30FB               	movlw	251
 14065  1A37  00FC               	movwf	??_UART_send_break_timed
 14066  1A38  087C               	movf	??_UART_send_break_timed,w
 14067  1A39  0022               	movlb	2	; select bank2
 14068  1A3A  058E               	andwf	14,f	;volatile
 14069                           
 14070                           ;UART.c: 343: delayUS(US);
 14071  1A3B  087A               	movf	UART_send_break_timed@US,w
 14072  1A3C  00F0               	movwf	i1delayUS@US
 14073  1A3D  087B               	movf	UART_send_break_timed@US+1,w
 14074  1A3E  00F1               	movwf	i1delayUS@US+1
 14075  1A3F  01F2               	clrf	i1delayUS@US+2
 14076  1A40  01F3               	clrf	i1delayUS@US+3
 14077  1A41  319B  23F0         	fcall	i1_delayUS
 14078                           
 14079                           ;UART.c: 344: LATC |= 0b00000100;
 14080  1A43  0022               	movlb	2	; select bank2
 14081  1A44  150E               	bsf	14,2	;volatile
 14082                           
 14083                           ;UART.c: 346: PPSLOCK =0;
 14084  1A45  003C               	movlb	28	; select bank28
 14085  1A46  018F               	clrf	15	;volatile
 14086                           
 14087                           ;UART.c: 347: RC2PPS = 0b00010100;
 14088  1A47  3014               	movlw	20
 14089  1A48  003D               	movlb	29	; select bank29
 14090  1A49  00A2               	movwf	34	;volatile
 14091                           
 14092                           ;UART.c: 348: CKPPS = 0b00010010;
 14093  1A4A  3012               	movlw	18
 14094  1A4B  003C               	movlb	28	; select bank28
 14095  1A4C  00A5               	movwf	37	;volatile
 14096                           
 14097                           ;UART.c: 352: PPSLOCK =1;
 14098  1A4D  3001               	movlw	1
 14099  1A4E  008F               	movwf	15	;volatile
 14100  1A4F  0008               	return
 14101  1A50                     __end_of_UART_send_break_timed:	
 14102                           
 14103                           	psect	text50
 14104  1889                     __ptext50:	
 14105 ;; *************** function _UART_send_break *****************
 14106 ;; Defined at:
 14107 ;;		line 322 in file "UART.c"
 14108 ;; Parameters:    Size  Location     Type
 14109 ;;		None
 14110 ;; Auto vars:     Size  Location     Type
 14111 ;;		None
 14112 ;; Return value:  Size  Location     Type
 14113 ;;		None               void
 14114 ;; Registers used:
 14115 ;;		wreg
 14116 ;; Tracked objects:
 14117 ;;		On entry : 0/0
 14118 ;;		On exit  : 0/0
 14119 ;;		Unchanged: 0/0
 14120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14124 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14125 ;;Total ram usage:        0 bytes
 14126 ;; Hardware stack levels used:    1
 14127 ;; This function calls:
 14128 ;;		Nothing
 14129 ;; This function is called by:
 14130 ;;		_Process_PS2_ScanCode
 14131 ;; This function uses a non-reentrant model
 14132 ;;
 14133                           
 14134                           
 14135                           ;psect for function _UART_send_break
 14136  1889                     _UART_send_break:	
 14137                           
 14138                           ;UART.c: 324: TX1STA |= 0b00001000;
 14139                           
 14140                           ;incstack = 0
 14141                           ; Regs used in _UART_send_break: [wreg]
 14142  1889  0023               	movlb	3	; select bank3
 14143  188A  159E               	bsf	30,3	;volatile
 14144                           
 14145                           ;UART.c: 325: TXREG = 'd';
 14146  188B  3064               	movlw	100
 14147  188C  009A               	movwf	26	;volatile
 14148  188D  0008               	return
 14149  188E                     __end_of_UART_send_break:	
 14150                           
 14151                           	psect	text51
 14152  0B65                     __ptext51:	
 14153 ;; *************** function _SetBaud *****************
 14154 ;; Defined at:
 14155 ;;		line 380 in file "UART.c"
 14156 ;; Parameters:    Size  Location     Type
 14157 ;;  Baud            4   15[BANK1 ] unsigned long 
 14158 ;;  Parity          1   19[BANK1 ] unsigned char 
 14159 ;; Auto vars:     Size  Location     Type
 14160 ;;  buf            50    0[BANK2 ] unsigned char [50]
 14161 ;;  temp            4   58[BANK2 ] unsigned long 
 14162 ;;  Paritytemp      4   54[BANK2 ] unsigned long 
 14163 ;;  Baudtemp        4   50[BANK2 ] unsigned long 
 14164 ;;  i               1   62[BANK2 ] unsigned char 
 14165 ;; Return value:  Size  Location     Type
 14166 ;;		None               void
 14167 ;; Registers used:
 14168 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14169 ;; Tracked objects:
 14170 ;;		On entry : 0/0
 14171 ;;		On exit  : 0/0
 14172 ;;		Unchanged: 0/0
 14173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14174 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 14175 ;;      Locals:         0       0       0      63       0       0       0       0       0       0       0       0       
      +0       0
 14176 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
 14177 ;;      Totals:         0       0      13      63       0       0       0       0       0       0       0       0       
      +0       0
 14178 ;;Total ram usage:       76 bytes
 14179 ;; Hardware stack levels used:    1
 14180 ;; Hardware stack levels required when called:    4
 14181 ;; This function calls:
 14182 ;;		_WriteBaud
 14183 ;;		_sprintf
 14184 ;;		i1_InitUART
 14185 ;;		i1_ReadBaud
 14186 ;;		i1_UARTstringWAIT
 14187 ;;		i1_delayUS
 14188 ;; This function is called by:
 14189 ;;		_Process_PS2_ScanCode
 14190 ;; This function uses a non-reentrant model
 14191 ;;
 14192                           
 14193                           
 14194                           ;psect for function _SetBaud
 14195  0B65                     _SetBaud:	
 14196                           
 14197                           ;UART.c: 382: unsigned char buf[50];
 14198                           ;UART.c: 383: unsigned long Baudtemp=0;
 14199                           
 14200                           ;incstack = 0
 14201                           ; Regs used in _SetBaud: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14202  0B65  3000               	movlw	0
 14203  0B66  0022               	movlb	2	; select bank2
 14204  0B67  00D5               	movwf	(SetBaud@Baudtemp+3)^(0+256)
 14205  0B68  3000               	movlw	0
 14206  0B69  00D4               	movwf	(SetBaud@Baudtemp+2)^(0+256)
 14207  0B6A  3000               	movlw	0
 14208  0B6B  00D3               	movwf	(SetBaud@Baudtemp+1)^(0+256)
 14209  0B6C  3000               	movlw	0
 14210  0B6D  00D2               	movwf	SetBaud@Baudtemp^(0+256)
 14211                           
 14212                           ;UART.c: 384: unsigned long Paritytemp=0;
 14213  0B6E  3000               	movlw	0
 14214  0B6F  00D9               	movwf	(SetBaud@Paritytemp+3)^(0+256)
 14215  0B70  3000               	movlw	0
 14216  0B71  00D8               	movwf	(SetBaud@Paritytemp+2)^(0+256)
 14217  0B72  3000               	movlw	0
 14218  0B73  00D7               	movwf	(SetBaud@Paritytemp+1)^(0+256)
 14219  0B74  3000               	movlw	0
 14220  0B75  00D6               	movwf	SetBaud@Paritytemp^(0+256)
 14221                           
 14222                           ;UART.c: 385: unsigned long temp;
 14223                           ;UART.c: 386: unsigned char i =0;
 14224  0B76  01DE               	clrf	SetBaud@i^(0+256)
 14225                           
 14226                           ;UART.c: 388: WriteBaud((0x1800 >> 5), Baud, Parity);
 14227  0B77  30C0               	movlw	192
 14228  0B78  0021               	movlb	1	; select bank1
 14229  0B79  00A0               	movwf	WriteBaud@row^(0+128)
 14230  0B7A  3000               	movlw	0
 14231  0B7B  00A1               	movwf	(WriteBaud@row^(0+128)+1)
 14232  0B7C  0832               	movf	(SetBaud@Baud+3)^(0+128),w
 14233  0B7D  00A5               	movwf	(WriteBaud@Baud+3)^(0+128)
 14234  0B7E  0831               	movf	(SetBaud@Baud+2)^(0+128),w
 14235  0B7F  00A4               	movwf	(WriteBaud@Baud+2)^(0+128)
 14236  0B80  0830               	movf	(SetBaud@Baud+1)^(0+128),w
 14237  0B81  00A3               	movwf	(WriteBaud@Baud+1)^(0+128)
 14238  0B82  082F               	movf	SetBaud@Baud^(0+128),w
 14239  0B83  00A2               	movwf	WriteBaud@Baud^(0+128)
 14240  0B84  0833               	movf	SetBaud@Parity^(0+128),w
 14241  0B85  00B4               	movwf	??_SetBaud^(0+128)
 14242  0B86  0834               	movf	??_SetBaud^(0+128),w
 14243  0B87  00A6               	movwf	WriteBaud@Parity^(0+128)
 14244  0B88  3191  2188  318B   	fcall	_WriteBaud
 14245                           
 14246                           ;UART.c: 389: temp = ReadBaud((0x1800 >> 5), 0);
 14247  0B8B  30C0               	movlw	192
 14248  0B8C  0020               	movlb	0	; select bank0
 14249  0B8D  00A4               	movwf	i1ReadBaud@row
 14250  0B8E  3000               	movlw	0
 14251  0B8F  00A5               	movwf	i1ReadBaud@row+1
 14252  0B90  01A6               	clrf	i1ReadBaud@column
 14253  0B91  3190  20C0  318B   	fcall	i1_ReadBaud
 14254  0B94  0020               	movlb	0	; select bank0
 14255  0B95  0827               	movf	?i1_ReadBaud+3,w
 14256  0B96  0022               	movlb	2	; select bank2
 14257  0B97  00DD               	movwf	(SetBaud@temp+3)^(0+256)
 14258  0B98  0020               	movlb	0	; select bank0
 14259  0B99  0826               	movf	?i1_ReadBaud+2,w
 14260  0B9A  0022               	movlb	2	; select bank2
 14261  0B9B  00DC               	movwf	(SetBaud@temp+2)^(0+256)
 14262  0B9C  0020               	movlb	0	; select bank0
 14263  0B9D  0825               	movf	?i1_ReadBaud+1,w
 14264  0B9E  0022               	movlb	2	; select bank2
 14265  0B9F  00DB               	movwf	(SetBaud@temp+1)^(0+256)
 14266  0BA0  0020               	movlb	0	; select bank0
 14267  0BA1  0824               	movf	?i1_ReadBaud,w
 14268  0BA2  0022               	movlb	2	; select bank2
 14269  0BA3  00DA               	movwf	SetBaud@temp^(0+256)
 14270                           
 14271                           ;UART.c: 390: Baudtemp = temp & 0x000FFFFF;
 14272  0BA4  30FF               	movlw	255
 14273  0BA5  055A               	andwf	SetBaud@temp^(0+256),w
 14274  0BA6  00D2               	movwf	SetBaud@Baudtemp^(0+256)
 14275  0BA7  30FF               	movlw	255
 14276  0BA8  055B               	andwf	(SetBaud@temp+1)^(0+256),w
 14277  0BA9  00D3               	movwf	(SetBaud@Baudtemp+1)^(0+256)
 14278  0BAA  300F               	movlw	15
 14279  0BAB  055C               	andwf	(SetBaud@temp+2)^(0+256),w
 14280  0BAC  00D4               	movwf	(SetBaud@Baudtemp+2)^(0+256)
 14281  0BAD  3000               	movlw	0
 14282  0BAE  055D               	andwf	(SetBaud@temp+3)^(0+256),w
 14283  0BAF  00D5               	movwf	(SetBaud@Baudtemp+3)^(0+256)
 14284                           
 14285                           ;UART.c: 391: Paritytemp = (unsigned char)((temp & 0x00F00000) >> 20);
 14286  0BB0  085A               	movf	SetBaud@temp^(0+256),w
 14287  0BB1  0021               	movlb	1	; select bank1
 14288  0BB2  00B4               	movwf	??_SetBaud^(0+128)
 14289  0BB3  0022               	movlb	2	; select bank2
 14290  0BB4  085B               	movf	(SetBaud@temp+1)^(0+256),w
 14291  0BB5  0021               	movlb	1	; select bank1
 14292  0BB6  00B5               	movwf	(??_SetBaud^(0+128)+1)
 14293  0BB7  0022               	movlb	2	; select bank2
 14294  0BB8  085C               	movf	(SetBaud@temp+2)^(0+256),w
 14295  0BB9  0021               	movlb	1	; select bank1
 14296  0BBA  00B6               	movwf	(??_SetBaud^(0+128)+2)
 14297  0BBB  0022               	movlb	2	; select bank2
 14298  0BBC  085D               	movf	(SetBaud@temp+3)^(0+256),w
 14299  0BBD  0021               	movlb	1	; select bank1
 14300  0BBE  00B7               	movwf	(??_SetBaud^(0+128)+3)
 14301  0BBF  3014               	movlw	20
 14302  0BC0                     u530_25:	
 14303  0BC0  36B7               	lsrf	(??_SetBaud^(0+128)+3),f
 14304  0BC1  0CB6               	rrf	(??_SetBaud^(0+128)+2),f
 14305  0BC2  0CB5               	rrf	(??_SetBaud^(0+128)+1),f
 14306  0BC3  0CB4               	rrf	??_SetBaud^(0+128),f
 14307  0BC4  0B89               	decfsz	9,f
 14308  0BC5  2BC0               	goto	u530_25
 14309  0BC6  0834               	movf	??_SetBaud^(0+128),w
 14310  0BC7  390F               	andlw	15
 14311  0BC8  00B8               	movwf	(??_SetBaud+4)^(0+128)
 14312  0BC9  01B9               	clrf	((??_SetBaud+4)^(0+128)+1)
 14313  0BCA  01BA               	clrf	((??_SetBaud+4)^(0+128)+2)
 14314  0BCB  01BB               	clrf	((??_SetBaud+4)^(0+128)+3)
 14315  0BCC  083B               	movf	(??_SetBaud+7)^(0+128),w
 14316  0BCD  0022               	movlb	2	; select bank2
 14317  0BCE  00D9               	movwf	(SetBaud@Paritytemp+3)^(0+256)
 14318  0BCF  0021               	movlb	1	; select bank1
 14319  0BD0  083A               	movf	(??_SetBaud+6)^(0+128),w
 14320  0BD1  0022               	movlb	2	; select bank2
 14321  0BD2  00D8               	movwf	(SetBaud@Paritytemp+2)^(0+256)
 14322  0BD3  0021               	movlb	1	; select bank1
 14323  0BD4  0839               	movf	(??_SetBaud+5)^(0+128),w
 14324  0BD5  0022               	movlb	2	; select bank2
 14325  0BD6  00D7               	movwf	(SetBaud@Paritytemp+1)^(0+256)
 14326  0BD7  0021               	movlb	1	; select bank1
 14327  0BD8  0838               	movf	(??_SetBaud+4)^(0+128),w
 14328  0BD9  0022               	movlb	2	; select bank2
 14329  0BDA  00D6               	movwf	SetBaud@Paritytemp^(0+256)
 14330                           
 14331                           ;UART.c: 393: InitUART(Baud, Parity);
 14332  0BDB  0021               	movlb	1	; select bank1
 14333  0BDC  0832               	movf	(SetBaud@Baud+3)^(0+128),w
 14334  0BDD  0020               	movlb	0	; select bank0
 14335  0BDE  00A3               	movwf	i1InitUART@Baud+3
 14336  0BDF  0021               	movlb	1	; select bank1
 14337  0BE0  0831               	movf	(SetBaud@Baud+2)^(0+128),w
 14338  0BE1  0020               	movlb	0	; select bank0
 14339  0BE2  00A2               	movwf	i1InitUART@Baud+2
 14340  0BE3  0021               	movlb	1	; select bank1
 14341  0BE4  0830               	movf	(SetBaud@Baud+1)^(0+128),w
 14342  0BE5  0020               	movlb	0	; select bank0
 14343  0BE6  00A1               	movwf	i1InitUART@Baud+1
 14344  0BE7  0021               	movlb	1	; select bank1
 14345  0BE8  082F               	movf	SetBaud@Baud^(0+128),w
 14346  0BE9  0020               	movlb	0	; select bank0
 14347  0BEA  00A0               	movwf	i1InitUART@Baud
 14348  0BEB  0021               	movlb	1	; select bank1
 14349  0BEC  0833               	movf	SetBaud@Parity^(0+128),w
 14350  0BED  00B4               	movwf	??_SetBaud^(0+128)
 14351  0BEE  0834               	movf	??_SetBaud^(0+128),w
 14352  0BEF  0020               	movlb	0	; select bank0
 14353  0BF0  00A4               	movwf	i1InitUART@parity
 14354  0BF1  3195  2526  318B   	fcall	i1_InitUART
 14355                           
 14356                           ;UART.c: 394: UARTstringWAIT("\r\n");
 14357  0BF4  30FD               	movlw	low ((STR_14+16)| (0+32768))
 14358  0BF5  0020               	movlb	0	; select bank0
 14359  0BF6  00A1               	movwf	i1UARTstringWAIT@data
 14360  0BF7  3089               	movlw	high ((STR_14+16)| (0+32768))
 14361  0BF8  00A2               	movwf	i1UARTstringWAIT@data+1
 14362  0BF9  319B  238C  318B   	fcall	i1_UARTstringWAIT
 14363                           
 14364                           ;UART.c: 395: delayUS(15000);
 14365  0BFC  3000               	movlw	0
 14366  0BFD  00F3               	movwf	i1delayUS@US+3
 14367  0BFE  3000               	movlw	0
 14368  0BFF  00F2               	movwf	i1delayUS@US+2
 14369  0C00  303A               	movlw	58
 14370  0C01  00F1               	movwf	i1delayUS@US+1
 14371  0C02  3098               	movlw	152
 14372  0C03  00F0               	movwf	i1delayUS@US
 14373  0C04  319B  23F0  318B   	fcall	i1_delayUS
 14374                           
 14375                           ;UART.c: 396: if((Baud != Baudtemp) || (Parity != Paritytemp))
 14376  0C07  0022               	movlb	2	; select bank2
 14377  0C08  0855               	movf	(SetBaud@Baudtemp+3)^(0+256),w
 14378  0C09  0021               	movlb	1	; select bank1
 14379  0C0A  0632               	xorwf	(SetBaud@Baud+3)^(0+128),w
 14380  0C0B  1D03               	skipz
 14381  0C0C  2C1D               	goto	u531_25
 14382  0C0D  0022               	movlb	2	; select bank2
 14383  0C0E  0854               	movf	(SetBaud@Baudtemp+2)^(0+256),w
 14384  0C0F  0021               	movlb	1	; select bank1
 14385  0C10  0631               	xorwf	(SetBaud@Baud+2)^(0+128),w
 14386  0C11  1D03               	skipz
 14387  0C12  2C1D               	goto	u531_25
 14388  0C13  0022               	movlb	2	; select bank2
 14389  0C14  0853               	movf	(SetBaud@Baudtemp+1)^(0+256),w
 14390  0C15  0021               	movlb	1	; select bank1
 14391  0C16  0630               	xorwf	(SetBaud@Baud+1)^(0+128),w
 14392  0C17  1D03               	skipz
 14393  0C18  2C1D               	goto	u531_25
 14394  0C19  0022               	movlb	2	; select bank2
 14395  0C1A  0852               	movf	SetBaud@Baudtemp^(0+256),w
 14396  0C1B  0021               	movlb	1	; select bank1
 14397  0C1C  062F               	xorwf	SetBaud@Baud^(0+128),w
 14398  0C1D                     u531_25:	
 14399  0C1D  1D03               	skipz
 14400  0C1E  2C3C               	goto	i1l4752
 14401  0C1F  0833               	movf	SetBaud@Parity^(0+128),w
 14402  0C20  00B4               	movwf	??_SetBaud^(0+128)
 14403  0C21  01B5               	clrf	(??_SetBaud^(0+128)+1)
 14404  0C22  01B6               	clrf	(??_SetBaud^(0+128)+2)
 14405  0C23  01B7               	clrf	(??_SetBaud^(0+128)+3)
 14406  0C24  0022               	movlb	2	; select bank2
 14407  0C25  0859               	movf	(SetBaud@Paritytemp+3)^(0+256),w
 14408  0C26  0021               	movlb	1	; select bank1
 14409  0C27  0637               	xorwf	(??_SetBaud+3)^(0+128),w
 14410  0C28  1D03               	skipz
 14411  0C29  2C3A               	goto	u532_25
 14412  0C2A  0022               	movlb	2	; select bank2
 14413  0C2B  0858               	movf	(SetBaud@Paritytemp+2)^(0+256),w
 14414  0C2C  0021               	movlb	1	; select bank1
 14415  0C2D  0636               	xorwf	(??_SetBaud+2)^(0+128),w
 14416  0C2E  1D03               	skipz
 14417  0C2F  2C3A               	goto	u532_25
 14418  0C30  0022               	movlb	2	; select bank2
 14419  0C31  0857               	movf	(SetBaud@Paritytemp+1)^(0+256),w
 14420  0C32  0021               	movlb	1	; select bank1
 14421  0C33  0635               	xorwf	(??_SetBaud+1)^(0+128),w
 14422  0C34  1D03               	skipz
 14423  0C35  2C3A               	goto	u532_25
 14424  0C36  0022               	movlb	2	; select bank2
 14425  0C37  0856               	movf	SetBaud@Paritytemp^(0+256),w
 14426  0C38  0021               	movlb	1	; select bank1
 14427  0C39  0634               	xorwf	??_SetBaud^(0+128),w
 14428  0C3A                     u532_25:	
 14429  0C3A  1903               	skipnz
 14430  0C3B  2C4F               	goto	i1l4756
 14431  0C3C                     i1l4752:	
 14432                           
 14433                           ;UART.c: 397: {
 14434                           ;UART.c: 398: UARTstringWAIT("Flash Program Fail\r\n");
 14435  0C3C  30C4               	movlw	low (STR_10| (0+32768))
 14436  0C3D  0020               	movlb	0	; select bank0
 14437  0C3E  00A1               	movwf	i1UARTstringWAIT@data
 14438  0C3F  3089               	movlw	high (STR_10| (0+32768))
 14439  0C40  00A2               	movwf	i1UARTstringWAIT@data+1
 14440  0C41  319B  238C  318B   	fcall	i1_UARTstringWAIT
 14441                           
 14442                           ;UART.c: 399: delayUS(15000);
 14443  0C44  3000               	movlw	0
 14444  0C45  00F3               	movwf	i1delayUS@US+3
 14445  0C46  3000               	movlw	0
 14446  0C47  00F2               	movwf	i1delayUS@US+2
 14447  0C48  303A               	movlw	58
 14448  0C49  00F1               	movwf	i1delayUS@US+1
 14449  0C4A  3098               	movlw	152
 14450  0C4B  00F0               	movwf	i1delayUS@US
 14451  0C4C  319B  23F0  318B   	fcall	i1_delayUS
 14452  0C4F                     i1l4756:	
 14453                           
 14454                           ;UART.c: 400: }
 14455                           ;UART.c: 403: for(i =0;i<10;i++)
 14456  0C4F  0022               	movlb	2	; select bank2
 14457  0C50  01DE               	clrf	SetBaud@i^(0+256)
 14458  0C51  300A               	movlw	10
 14459  0C52  025E               	subwf	SetBaud@i^(0+256),w
 14460  0C53  1803               	btfsc	3,0
 14461  0C54  2C7C               	goto	i1l4770
 14462  0C55                     i1l446:	
 14463                           
 14464                           ;UART.c: 404: {
 14465                           ;UART.c: 405: LATC |= 0b00010000;
 14466  0C55  160E               	bsf	14,4	;volatile
 14467                           
 14468                           ;UART.c: 406: delayUS(10000);
 14469  0C56  3000               	movlw	0
 14470  0C57  00F3               	movwf	i1delayUS@US+3
 14471  0C58  3000               	movlw	0
 14472  0C59  00F2               	movwf	i1delayUS@US+2
 14473  0C5A  3027               	movlw	39
 14474  0C5B  00F1               	movwf	i1delayUS@US+1
 14475  0C5C  3010               	movlw	16
 14476  0C5D  00F0               	movwf	i1delayUS@US
 14477  0C5E  319B  23F0  318B   	fcall	i1_delayUS
 14478                           
 14479                           ;UART.c: 407: LATC &= ~0b00010000;
 14480  0C61  30EF               	movlw	239
 14481  0C62  0021               	movlb	1	; select bank1
 14482  0C63  00B4               	movwf	??_SetBaud^(0+128)
 14483  0C64  0834               	movf	??_SetBaud^(0+128),w
 14484  0C65  0022               	movlb	2	; select bank2
 14485  0C66  058E               	andwf	14,f	;volatile
 14486                           
 14487                           ;UART.c: 408: delayUS(10000);
 14488  0C67  3000               	movlw	0
 14489  0C68  00F3               	movwf	i1delayUS@US+3
 14490  0C69  3000               	movlw	0
 14491  0C6A  00F2               	movwf	i1delayUS@US+2
 14492  0C6B  3027               	movlw	39
 14493  0C6C  00F1               	movwf	i1delayUS@US+1
 14494  0C6D  3010               	movlw	16
 14495  0C6E  00F0               	movwf	i1delayUS@US
 14496  0C6F  319B  23F0  318B   	fcall	i1_delayUS
 14497  0C72  3001               	movlw	1
 14498  0C73  0021               	movlb	1	; select bank1
 14499  0C74  00B4               	movwf	??_SetBaud^(0+128)
 14500  0C75  0834               	movf	??_SetBaud^(0+128),w
 14501  0C76  0022               	movlb	2	; select bank2
 14502  0C77  07DE               	addwf	SetBaud@i^(0+256),f
 14503  0C78  300A               	movlw	10
 14504  0C79  025E               	subwf	SetBaud@i^(0+256),w
 14505  0C7A  1C03               	skipc
 14506  0C7B  2C55               	goto	i1l446
 14507  0C7C                     i1l4770:	
 14508                           
 14509                           ;UART.c: 409: }
 14510                           ;UART.c: 411: sprintf(buf,"Baud is %lu",Baud);
 14511  0C7C  3026               	movlw	low (STR_11| (0+32768))
 14512  0C7D  0020               	movlb	0	; select bank0
 14513  0C7E  00AA               	movwf	sprintf@f
 14514  0C7F  308A               	movlw	high (STR_11| (0+32768))
 14515  0C80  00AB               	movwf	sprintf@f+1
 14516  0C81  0021               	movlb	1	; select bank1
 14517  0C82  0832               	movf	(SetBaud@Baud+3)^(0+128),w
 14518  0C83  0020               	movlb	0	; select bank0
 14519  0C84  00AF               	movwf	?_sprintf+5
 14520  0C85  0021               	movlb	1	; select bank1
 14521  0C86  0831               	movf	(SetBaud@Baud+2)^(0+128),w
 14522  0C87  0020               	movlb	0	; select bank0
 14523  0C88  00AE               	movwf	?_sprintf+4
 14524  0C89  0021               	movlb	1	; select bank1
 14525  0C8A  0830               	movf	(SetBaud@Baud+1)^(0+128),w
 14526  0C8B  0020               	movlb	0	; select bank0
 14527  0C8C  00AD               	movwf	?_sprintf+3
 14528  0C8D  0021               	movlb	1	; select bank1
 14529  0C8E  082F               	movf	SetBaud@Baud^(0+128),w
 14530  0C8F  0020               	movlb	0	; select bank0
 14531  0C90  00AC               	movwf	?_sprintf+2
 14532  0C91  3020               	movlw	SetBaud@buf& (0+255)
 14533  0C92  3197  2707  318B   	fcall	_sprintf
 14534                           
 14535                           ;UART.c: 412: UARTstringWAIT(buf);
 14536  0C95  3020               	movlw	low SetBaud@buf
 14537  0C96  0020               	movlb	0	; select bank0
 14538  0C97  00A1               	movwf	i1UARTstringWAIT@data
 14539  0C98  3001               	movlw	high SetBaud@buf
 14540  0C99  00A2               	movwf	i1UARTstringWAIT@data+1
 14541  0C9A  319B  238C  318B   	fcall	i1_UARTstringWAIT
 14542                           
 14543                           ;UART.c: 413: if(Parity)
 14544  0C9D  0021               	movlb	1	; select bank1
 14545  0C9E  0833               	movf	SetBaud@Parity^(0+128),w
 14546  0C9F  1903               	btfsc	3,2
 14547  0CA0  2CC3               	goto	i1l4790
 14548                           
 14549                           ;UART.c: 414: {
 14550                           ;UART.c: 415: switch (Parity)
 14551  0CA1  2CB6               	goto	i1l4788
 14552  0CA2                     i1l4778:	
 14553                           ;UART.c: 416: {
 14554                           ;UART.c: 417: case 1:
 14555                           
 14556                           
 14557                           ;UART.c: 418: UARTstringWAIT(OddParityMSG);
 14558  0CA2  3011               	movlw	low (_OddParityMSG| (0+32768))
 14559  0CA3  0020               	movlb	0	; select bank0
 14560  0CA4  00A1               	movwf	i1UARTstringWAIT@data
 14561  0CA5  3089               	movlw	high (_OddParityMSG| (0+32768))
 14562  0CA6  2CC7               	goto	L20
 14563  0CA7                     i1l4780:	
 14564                           ;UART.c: 420: case 2:
 14565                           
 14566                           ;UART.c: 419: break;
 14567                           
 14568                           
 14569                           ;UART.c: 421: UARTstringWAIT(EvenParityMSG);
 14570  0CA7  30FB               	movlw	low (_EvenParityMSG| (0+32768))
 14571  0CA8  0020               	movlb	0	; select bank0
 14572  0CA9  00A1               	movwf	i1UARTstringWAIT@data
 14573  0CAA  3088               	movlw	high (_EvenParityMSG| (0+32768))
 14574  0CAB  2CC7               	goto	L20
 14575  0CAC                     i1l4782:	
 14576                           ;UART.c: 423: case 3:
 14577                           
 14578                           ;UART.c: 422: break;
 14579                           
 14580                           
 14581                           ;UART.c: 424: UARTstringWAIT(MarkParityMSG);
 14582  0CAC  304A               	movlw	low (_MarkParityMSG| (0+32768))
 14583  0CAD  0020               	movlb	0	; select bank0
 14584  0CAE  00A1               	movwf	i1UARTstringWAIT@data
 14585  0CAF  3089               	movlw	high (_MarkParityMSG| (0+32768))
 14586  0CB0  2CC7               	goto	L20
 14587  0CB1                     i1l4784:	
 14588                           ;UART.c: 426: default:
 14589                           
 14590                           ;UART.c: 425: break;
 14591                           
 14592                           
 14593                           ;UART.c: 427: UARTstringWAIT(SpaceParityMSG);
 14594  0CB1  303A               	movlw	low (_SpaceParityMSG| (0+32768))
 14595  0CB2  0020               	movlb	0	; select bank0
 14596  0CB3  00A1               	movwf	i1UARTstringWAIT@data
 14597  0CB4  3089               	movlw	high (_SpaceParityMSG| (0+32768))
 14598  0CB5  2CC7               	goto	L20
 14599  0CB6                     i1l4788:	
 14600                           ;UART.c: 429: }
 14601                           
 14602                           ;UART.c: 428: break;
 14603                           
 14604  0CB6  0021               	movlb	1	; select bank1
 14605  0CB7  0833               	movf	SetBaud@Parity^(0+128),w
 14606                           
 14607                           ; Switch size 1, requested type "space"
 14608                           ; Number of cases is 3, Range of values is 1 to 3
 14609                           ; switch strategies available:
 14610                           ; Name         Instructions Cycles
 14611                           ; simple_byte           10     6 (average)
 14612                           ; direct_byte           15     9 (fixed)
 14613                           ; jumptable            263     9 (fixed)
 14614                           ;	Chosen strategy is simple_byte
 14615  0CB8  3A01               	xorlw	1	; case 1
 14616  0CB9  1903               	skipnz
 14617  0CBA  2CA2               	goto	i1l4778
 14618  0CBB  3A03               	xorlw	3	; case 2
 14619  0CBC  1903               	skipnz
 14620  0CBD  2CA7               	goto	i1l4780
 14621  0CBE  3A01               	xorlw	1	; case 3
 14622  0CBF  1903               	skipnz
 14623  0CC0  2CAC               	goto	i1l4782
 14624  0CC1  2CB1               	goto	i1l4784
 14625                           
 14626                           ;UART.c: 430: }
 14627  0CC2  2CCB               	goto	i1l455
 14628  0CC3                     i1l4790:	
 14629                           
 14630                           ;UART.c: 431: else
 14631                           ;UART.c: 432: {
 14632                           ;UART.c: 433: UARTstringWAIT(NoParityMSG);
 14633  0CC3  3026               	movlw	low (_NoParityMSG| (0+32768))
 14634  0CC4  0020               	movlb	0	; select bank0
 14635  0CC5  00A1               	movwf	i1UARTstringWAIT@data
 14636  0CC6  3089               	movlw	high (_NoParityMSG| (0+32768))
 14637  0CC7                     L20:	
 14638  0CC7  00A2               	movwf	i1UARTstringWAIT@data+1
 14639  0CC8  319B  238C  318B   	fcall	i1_UARTstringWAIT
 14640  0CCB                     i1l455:	
 14641                           
 14642                           ;UART.c: 434: }
 14643                           ;UART.c: 435: UARTstringWAIT("\r\n");
 14644  0CCB  30FD               	movlw	low ((STR_14+16)| (0+32768))
 14645  0CCC  0020               	movlb	0	; select bank0
 14646  0CCD  00A1               	movwf	i1UARTstringWAIT@data
 14647  0CCE  3089               	movlw	high ((STR_14+16)| (0+32768))
 14648  0CCF  00A2               	movwf	i1UARTstringWAIT@data+1
 14649  0CD0  319B  238C  318B   	fcall	i1_UARTstringWAIT
 14650                           
 14651                           ;UART.c: 436: delayUS(15000);
 14652  0CD3  3000               	movlw	0
 14653  0CD4  00F3               	movwf	i1delayUS@US+3
 14654  0CD5  3000               	movlw	0
 14655  0CD6  00F2               	movwf	i1delayUS@US+2
 14656  0CD7  303A               	movlw	58
 14657  0CD8  00F1               	movwf	i1delayUS@US+1
 14658  0CD9  3098               	movlw	152
 14659  0CDA  00F0               	movwf	i1delayUS@US
 14660  0CDB  319B  23F0         	fcall	i1_delayUS
 14661  0CDD  0008               	return
 14662  0CDE                     __end_of_SetBaud:	
 14663                           
 14664                           	psect	text52
 14665  1B8C                     __ptext52:	
 14666 ;; *************** function i1_UARTstringWAIT *****************
 14667 ;; Defined at:
 14668 ;;		line 361 in file "UART.c"
 14669 ;; Parameters:    Size  Location     Type
 14670 ;;  data            2    1[BANK0 ] PTR const unsigned char 
 14671 ;;		 -> STR_20(20), STR_19(3), Process_PS2_ScanCode@buf(60), STR_17(3), 
 14672 ;;		 -> STR_16(3), STR_15(19), STR_14(19), STR_13(3), 
 14673 ;;		 -> STR_12(3), SetBaud@buf(50), STR_10(21), STR_9(3), 
 14674 ;;		 -> STR_8(3), NoParityMSG(20), SpaceParityMSG(16), MarkParityMSG(15), 
 14675 ;;		 -> EvenParityMSG(22), OddParityMSG(21), STR_7(3), STR_6(33), 
 14676 ;;		 -> STR_5(3), Version(9), STR_4(19), STR_3(28), 
 14677 ;;		 -> STR_2(8), STR_1(7), VoltageMSG(13), 
 14678 ;; Auto vars:     Size  Location     Type
 14679 ;;		None
 14680 ;; Return value:  Size  Location     Type
 14681 ;;		None               void
 14682 ;; Registers used:
 14683 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14684 ;; Tracked objects:
 14685 ;;		On entry : 0/0
 14686 ;;		On exit  : 0/0
 14687 ;;		Unchanged: 0/0
 14688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14689 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14691 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14692 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14693 ;;Total ram usage:        4 bytes
 14694 ;; Hardware stack levels used:    1
 14695 ;; Hardware stack levels required when called:    2
 14696 ;; This function calls:
 14697 ;;		i1_UARTchar
 14698 ;;		i1_delayUS
 14699 ;; This function is called by:
 14700 ;;		_SetBaud
 14701 ;;		_Process_PS2_ScanCode
 14702 ;; This function uses a non-reentrant model
 14703 ;;
 14704                           
 14705                           
 14706                           ;psect for function i1_UARTstringWAIT
 14707  1B8C                     i1_UARTstringWAIT:	
 14708  1B8C                     i1l434:	
 14709                           ;incstack = 0
 14710                           ; Regs used in i1_UARTstringWAIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14711                           ;UART.c: 363: do
 14712                           
 14713                           
 14714                           ;UART.c: 364: {
 14715                           ;UART.c: 365: delayUS(5000);
 14716  1B8C  3000               	movlw	0
 14717  1B8D  00F3               	movwf	i1delayUS@US+3
 14718  1B8E  3000               	movlw	0
 14719  1B8F  00F2               	movwf	i1delayUS@US+2
 14720  1B90  3013               	movlw	19
 14721  1B91  00F1               	movwf	i1delayUS@US+1
 14722  1B92  3088               	movlw	136
 14723  1B93  00F0               	movwf	i1delayUS@US
 14724  1B94  319B  23F0  319B   	fcall	i1_delayUS
 14725                           
 14726                           ;UART.c: 366: if(*data != 0)
 14727  1B97  0020               	movlb	0	; select bank0
 14728  1B98  0821               	movf	i1UARTstringWAIT@data,w
 14729  1B99  0084               	movwf	4
 14730  1B9A  0822               	movf	i1UARTstringWAIT@data+1,w
 14731  1B9B  0085               	movwf	5
 14732  1B9C  0800               	movf	0,w	;code access
 14733  1B9D  3A00               	xorlw	0
 14734  1B9E  1903               	skipnz
 14735  1B9F  2BAD               	goto	i1l4520
 14736                           
 14737                           ;UART.c: 367: {
 14738                           ;UART.c: 368: UARTchar(*data, 0, 0);
 14739  1BA0  01F8               	clrf	i1UARTchar@override
 14740  1BA1  01F9               	clrf	i1UARTchar@NinethBit_override_data
 14741  1BA2  0821               	movf	i1UARTstringWAIT@data,w
 14742  1BA3  0084               	movwf	4
 14743  1BA4  0822               	movf	i1UARTstringWAIT@data+1,w
 14744  1BA5  0085               	movwf	5
 14745  1BA6  0800               	movf	0,w	;code access
 14746  1BA7  319D  25CB  319B   	fcall	i1_UARTchar
 14747  1BAA                     i1l436:	
 14748                           ;UART.c: 369: while((!TX1STAbits.TRMT));
 14749                           
 14750  1BAA  0023               	movlb	3	; select bank3
 14751  1BAB  1C9E               	btfss	30,1	;volatile
 14752  1BAC  2BAA               	goto	i1l436
 14753  1BAD                     i1l4520:	
 14754                           
 14755                           ;UART.c: 370: }
 14756                           ;UART.c: 371: } while( *data++);
 14757  1BAD  0020               	movlb	0	; select bank0
 14758  1BAE  0822               	movf	i1UARTstringWAIT@data+1,w
 14759  1BAF  00A4               	movwf	??i1_UARTstringWAIT+1
 14760  1BB0  0821               	movf	i1UARTstringWAIT@data,w
 14761  1BB1  00A3               	movwf	??i1_UARTstringWAIT
 14762  1BB2  0AA1               	incf	i1UARTstringWAIT@data,f
 14763  1BB3  1903               	skipnz
 14764  1BB4  0AA2               	incf	i1UARTstringWAIT@data+1,f
 14765  1BB5  0823               	movf	??i1_UARTstringWAIT,w
 14766  1BB6  0084               	movwf	4
 14767  1BB7  0824               	movf	??i1_UARTstringWAIT+1,w
 14768  1BB8  0085               	movwf	5
 14769  1BB9  0800               	movf	0,w	;code access
 14770  1BBA  3800               	iorlw	0
 14771  1BBB  1903               	btfsc	3,2
 14772  1BBC  0008               	return
 14773  1BBD  2B8C               	goto	i1l434
 14774  1BBE                     __end_ofi1_UARTstringWAIT:	
 14775                           
 14776                           	psect	text53
 14777  1DCB                     __ptext53:	
 14778 ;; *************** function i1_UARTchar *****************
 14779 ;; Defined at:
 14780 ;;		line 231 in file "UART.c"
 14781 ;; Parameters:    Size  Location     Type
 14782 ;;  data            1    wreg     unsigned char 
 14783 ;;  override        1    8[COMMON] unsigned char 
 14784 ;;  NinethBit_ov    1    9[COMMON] unsigned char 
 14785 ;; Auto vars:     Size  Location     Type
 14786 ;;  data            1    0[BANK0 ] unsigned char 
 14787 ;; Return value:  Size  Location     Type
 14788 ;;		None               void
 14789 ;; Registers used:
 14790 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14791 ;; Tracked objects:
 14792 ;;		On entry : 0/0
 14793 ;;		On exit  : 0/0
 14794 ;;		Unchanged: 0/0
 14795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14796 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14797 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14798 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14799 ;;      Totals:         6       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14800 ;;Total ram usage:        7 bytes
 14801 ;; Hardware stack levels used:    1
 14802 ;; Hardware stack levels required when called:    1
 14803 ;; This function calls:
 14804 ;;		i1_CheckSum_byte
 14805 ;; This function is called by:
 14806 ;;		_Process_PS2_ScanCode
 14807 ;;		i1_UARTstringWAIT
 14808 ;; This function uses a non-reentrant model
 14809 ;;
 14810                           
 14811                           
 14812                           ;psect for function i1_UARTchar
 14813  1DCB                     i1_UARTchar:	
 14814                           
 14815                           ;incstack = 0
 14816                           ; Regs used in i1_UARTchar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14817                           ;i1UARTchar@data stored from wreg
 14818  1DCB  0020               	movlb	0	; select bank0
 14819  1DCC  00A0               	movwf	i1UARTchar@data
 14820                           
 14821                           ;UART.c: 233: if(TXSTAbits.TX9)
 14822  1DCD  0023               	movlb	3	; select bank3
 14823  1DCE  1F1E               	btfss	30,6	;volatile
 14824  1DCF  2E10               	goto	i1l409
 14825                           
 14826                           ;UART.c: 234: {
 14827                           ;UART.c: 236: if(!override)
 14828  1DD0  08F8               	movf	i1UARTchar@override,f
 14829  1DD1  1903               	btfsc	3,2
 14830  1DD2  2DFA               	goto	i1l4050
 14831  1DD3  2E07               	goto	i1l4052
 14832  1DD4                     i1l4044:	
 14833                           ;UART.c: 240: {
 14834                           ;UART.c: 241: case 1:
 14835                           
 14836                           ;UART.c: 237: {
 14837                           ;UART.c: 239: switch (PARITY)
 14838                           
 14839                           
 14840                           ;UART.c: 242: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 3);
 14841  1DD4  0020               	movlb	0	; select bank0
 14842  1DD5  0820               	movf	i1UARTchar@data,w
 14843  1DD6  00FA               	movwf	??i1_UARTchar
 14844  1DD7  01FB               	clrf	??i1_UARTchar+1
 14845  1DD8  087A               	movf	??i1_UARTchar,w
 14846  1DD9  00F0               	movwf	i1CheckSum_byte@This
 14847  1DDA  087B               	movf	??i1_UARTchar+1,w
 14848  1DDB  00F1               	movwf	i1CheckSum_byte@This+1
 14849  1DDC  3003               	movlw	3
 14850  1DDD  2DE7               	goto	L23
 14851  1DDE                     i1l4046:	
 14852                           ;UART.c: 244: case 2:
 14853                           
 14854                           ;UART.c: 243: break;
 14855                           
 14856                           
 14857                           ;UART.c: 245: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 2);
 14858  1DDE  0020               	movlb	0	; select bank0
 14859  1DDF  0820               	movf	i1UARTchar@data,w
 14860  1DE0  00FA               	movwf	??i1_UARTchar
 14861  1DE1  01FB               	clrf	??i1_UARTchar+1
 14862  1DE2  087A               	movf	??i1_UARTchar,w
 14863  1DE3  00F0               	movwf	i1CheckSum_byte@This
 14864  1DE4  087B               	movf	??i1_UARTchar+1,w
 14865  1DE5  00F1               	movwf	i1CheckSum_byte@This+1
 14866  1DE6  3002               	movlw	2
 14867  1DE7                     L23:	
 14868  1DE7  00FC               	movwf	??i1_UARTchar+2
 14869  1DE8  087C               	movf	??i1_UARTchar+2,w
 14870  1DE9  00F2               	movwf	i1CheckSum_byte@Odd_Even
 14871  1DEA  319B  232B  319D   	fcall	i1_CheckSum_byte
 14872  1DED  00FD               	movwf	??i1_UARTchar+3
 14873  1DEE  0023               	movlb	3	; select bank3
 14874  1DEF  081E               	movf	30,w	;volatile
 14875  1DF0  067D               	xorwf	??i1_UARTchar+3,w
 14876  1DF1  39FE               	andlw	-2
 14877  1DF2  067D               	xorwf	??i1_UARTchar+3,w
 14878  1DF3  2E0F               	goto	L22
 14879  1DF4                     i1l406:	
 14880                           ;UART.c: 247: case 3:
 14881                           
 14882                           ;UART.c: 246: break;
 14883                           
 14884                           
 14885                           ;UART.c: 248: TXSTAbits.TX9D = 1;
 14886  1DF4  0023               	movlb	3	; select bank3
 14887  1DF5  141E               	bsf	30,0	;volatile
 14888                           
 14889                           ;UART.c: 249: break;
 14890  1DF6  2E10               	goto	i1l409
 14891  1DF7                     i1l407:	
 14892                           ;UART.c: 250: default:
 14893                           
 14894                           
 14895                           ;UART.c: 251: TXSTAbits.TX9D = 0;
 14896  1DF7  0023               	movlb	3	; select bank3
 14897  1DF8  101E               	bcf	30,0	;volatile
 14898                           
 14899                           ;UART.c: 253: }
 14900                           
 14901                           ;UART.c: 252: break;
 14902  1DF9  2E10               	goto	i1l409
 14903  1DFA                     i1l4050:	
 14904  1DFA  0024               	movlb	4	; select bank4
 14905  1DFB  0860               	movf	_PARITY^(0+512),w
 14906                           
 14907                           ; Switch size 1, requested type "space"
 14908                           ; Number of cases is 3, Range of values is 1 to 3
 14909                           ; switch strategies available:
 14910                           ; Name         Instructions Cycles
 14911                           ; simple_byte           10     6 (average)
 14912                           ; direct_byte           15     9 (fixed)
 14913                           ; jumptable            263     9 (fixed)
 14914                           ;	Chosen strategy is simple_byte
 14915  1DFC  3A01               	xorlw	1	; case 1
 14916  1DFD  1903               	skipnz
 14917  1DFE  2DD4               	goto	i1l4044
 14918  1DFF  3A03               	xorlw	3	; case 2
 14919  1E00  1903               	skipnz
 14920  1E01  2DDE               	goto	i1l4046
 14921  1E02  3A01               	xorlw	1	; case 3
 14922  1E03  1903               	skipnz
 14923  1E04  2DF4               	goto	i1l406
 14924  1E05  2DF7               	goto	i1l407
 14925                           
 14926                           ;UART.c: 254: }
 14927  1E06  2E10               	goto	i1l409
 14928  1E07                     i1l4052:	
 14929                           
 14930                           ;UART.c: 255: else
 14931                           ;UART.c: 256: {
 14932                           ;UART.c: 257: TXSTAbits.TX9D = (NinethBit_override_data & 0x01);
 14933  1E07  3001               	movlw	1
 14934  1E08  0579               	andwf	i1UARTchar@NinethBit_override_data,w
 14935  1E09  00FA               	movwf	??i1_UARTchar
 14936  1E0A  0023               	movlb	3	; select bank3
 14937  1E0B  081E               	movf	30,w	;volatile
 14938  1E0C  067A               	xorwf	??i1_UARTchar,w
 14939  1E0D  39FE               	andlw	-2
 14940  1E0E  067A               	xorwf	??i1_UARTchar,w
 14941  1E0F                     L22:	
 14942  1E0F  009E               	movwf	30	;volatile
 14943  1E10                     i1l409:	
 14944                           ;UART.c: 258: }
 14945                           ;UART.c: 259: }
 14946                           ;UART.c: 275: while(!TXSTAbits.TRMT);
 14947                           
 14948  1E10  0023               	movlb	3	; select bank3
 14949  1E11  1C9E               	btfss	30,1	;volatile
 14950  1E12  2E10               	goto	i1l409
 14951                           
 14952                           ;UART.c: 276: TXREG = data;
 14953  1E13  0020               	movlb	0	; select bank0
 14954  1E14  0820               	movf	i1UARTchar@data,w
 14955  1E15  0023               	movlb	3	; select bank3
 14956  1E16  009A               	movwf	26	;volatile
 14957  1E17  0008               	return
 14958  1E18                     __end_ofi1_UARTchar:	
 14959                           
 14960                           	psect	text54
 14961  10C0                     __ptext54:	
 14962 ;; *************** function i1_ReadBaud *****************
 14963 ;; Defined at:
 14964 ;;		line 187 in file "FLASH.c"
 14965 ;; Parameters:    Size  Location     Type
 14966 ;;  row             2    4[BANK0 ] unsigned int 
 14967 ;;  column          1    6[BANK0 ] unsigned char 
 14968 ;; Auto vars:     Size  Location     Type
 14969 ;;  ReadBaud        4   16[BANK0 ] unsigned long 
 14970 ;; Return value:  Size  Location     Type
 14971 ;;                  4    4[BANK0 ] unsigned long 
 14972 ;; Registers used:
 14973 ;;		wreg, status,2, status,0, pclath, cstack
 14974 ;; Tracked objects:
 14975 ;;		On entry : 0/0
 14976 ;;		On exit  : 0/0
 14977 ;;		Unchanged: 0/0
 14978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14979 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14980 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14981 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14982 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14983 ;;Total ram usage:       16 bytes
 14984 ;; Hardware stack levels used:    1
 14985 ;; Hardware stack levels required when called:    2
 14986 ;; This function calls:
 14987 ;;		i1_ReadFlash_4Byte
 14988 ;; This function is called by:
 14989 ;;		_SetBaud
 14990 ;; This function uses a non-reentrant model
 14991 ;;
 14992                           
 14993                           
 14994                           ;psect for function i1_ReadBaud
 14995  10C0                     i1_ReadBaud:	
 14996                           
 14997                           ;FLASH.c: 189: unsigned long temp;
 14998                           ;FLASH.c: 190: temp =(ReadFlash_4Byte(row, column));
 14999                           
 15000                           ;incstack = 0
 15001                           ; Regs used in i1_ReadBaud: [wreg+status,2+status,0+pclath+cstack]
 15002  10C0  0020               	movlb	0	; select bank0
 15003  10C1  0825               	movf	i1ReadBaud@row+1,w
 15004  10C2  01F6               	clrf	i1ReadFlash_4Byte@row+1
 15005  10C3  07F6               	addwf	i1ReadFlash_4Byte@row+1,f
 15006  10C4  0824               	movf	i1ReadBaud@row,w
 15007  10C5  01F5               	clrf	i1ReadFlash_4Byte@row
 15008  10C6  07F5               	addwf	i1ReadFlash_4Byte@row,f
 15009  10C7  0826               	movf	i1ReadBaud@column,w
 15010  10C8  00A8               	movwf	??i1_ReadBaud
 15011  10C9  0828               	movf	??i1_ReadBaud,w
 15012  10CA  00F7               	movwf	i1ReadFlash_4Byte@column
 15013  10CB  319E  2668  3190   	fcall	i1_ReadFlash_4Byte
 15014  10CE  0878               	movf	?i1_ReadFlash_4Byte+3,w
 15015  10CF  0020               	movlb	0	; select bank0
 15016  10D0  00B3               	movwf	i1ReadBaud@temp+3
 15017  10D1  0877               	movf	?i1_ReadFlash_4Byte+2,w
 15018  10D2  00B2               	movwf	i1ReadBaud@temp+2
 15019  10D3  0876               	movf	?i1_ReadFlash_4Byte+1,w
 15020  10D4  00B1               	movwf	i1ReadBaud@temp+1
 15021  10D5  0875               	movf	?i1_ReadFlash_4Byte,w
 15022  10D6  00B0               	movwf	i1ReadBaud@temp
 15023                           
 15024                           ;FLASH.c: 191: MEM[1] = (unsigned int)(temp & 0x0003FFF);
 15025  10D7  30FF               	movlw	255
 15026  10D8  0530               	andwf	i1ReadBaud@temp,w
 15027  10D9  0021               	movlb	1	; select bank1
 15028  10DA  00E3               	movwf	(_MEM^(0+128)+2)
 15029  10DB  303F               	movlw	63
 15030  10DC  0020               	movlb	0	; select bank0
 15031  10DD  0531               	andwf	i1ReadBaud@temp+1,w
 15032  10DE  0021               	movlb	1	; select bank1
 15033  10DF  00E4               	movwf	((_MEM+1)^(0+128)+2)
 15034                           
 15035                           ;FLASH.c: 192: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
 15036  10E0  0020               	movlb	0	; select bank0
 15037  10E1  0830               	movf	i1ReadBaud@temp,w
 15038  10E2  00A8               	movwf	??i1_ReadBaud
 15039  10E3  0831               	movf	i1ReadBaud@temp+1,w
 15040  10E4  00A9               	movwf	??i1_ReadBaud+1
 15041  10E5  0832               	movf	i1ReadBaud@temp+2,w
 15042  10E6  00AA               	movwf	??i1_ReadBaud+2
 15043  10E7  0833               	movf	i1ReadBaud@temp+3,w
 15044  10E8  00AB               	movwf	??i1_ReadBaud+3
 15045  10E9  300E               	movlw	14
 15046  10EA                     u509_25:	
 15047  10EA  36AB               	lsrf	??i1_ReadBaud+3,f
 15048  10EB  0CAA               	rrf	??i1_ReadBaud+2,f
 15049  10EC  0CA9               	rrf	??i1_ReadBaud+1,f
 15050  10ED  0CA8               	rrf	??i1_ReadBaud,f
 15051  10EE  0B89               	decfsz	9,f
 15052  10EF  28EA               	goto	u509_25
 15053  10F0  30FF               	movlw	255
 15054  10F1  0528               	andwf	??i1_ReadBaud,w
 15055  10F2  0021               	movlb	1	; select bank1
 15056  10F3  00E1               	movwf	_MEM^(0+128)
 15057  10F4  303F               	movlw	63
 15058  10F5  0020               	movlb	0	; select bank0
 15059  10F6  0529               	andwf	??i1_ReadBaud+1,w
 15060  10F7  0021               	movlb	1	; select bank1
 15061  10F8  00E2               	movwf	(_MEM+1)^(0+128)
 15062                           
 15063                           ;FLASH.c: 193: return (((unsigned long)MEM[0] << 12) + (unsigned long)MEM[1]);
 15064  10F9  0863               	movf	(_MEM^(0+128)+2),w
 15065  10FA  0020               	movlb	0	; select bank0
 15066  10FB  00A8               	movwf	??i1_ReadBaud
 15067  10FC  0021               	movlb	1	; select bank1
 15068  10FD  0864               	movf	((_MEM+1)^(0+128)+2),w
 15069  10FE  0020               	movlb	0	; select bank0
 15070  10FF  00A9               	movwf	??i1_ReadBaud+1
 15071  1100  01AA               	clrf	??i1_ReadBaud+2
 15072  1101  01AB               	clrf	??i1_ReadBaud+3
 15073  1102  0021               	movlb	1	; select bank1
 15074  1103  0861               	movf	_MEM^(0+128),w
 15075  1104  0020               	movlb	0	; select bank0
 15076  1105  00AC               	movwf	??i1_ReadBaud+4
 15077  1106  0021               	movlb	1	; select bank1
 15078  1107  0862               	movf	(_MEM+1)^(0+128),w
 15079  1108  0020               	movlb	0	; select bank0
 15080  1109  00AD               	movwf	??i1_ReadBaud+5
 15081  110A  01AE               	clrf	??i1_ReadBaud+6
 15082  110B  01AF               	clrf	??i1_ReadBaud+7
 15083  110C  300C               	movlw	12
 15084  110D                     u510_25:	
 15085  110D  35AC               	lslf	??i1_ReadBaud+4,f
 15086  110E  0DAD               	rlf	??i1_ReadBaud+5,f
 15087  110F  0DAE               	rlf	??i1_ReadBaud+6,f
 15088  1110  0DAF               	rlf	??i1_ReadBaud+7,f
 15089  1111  0B89               	decfsz	9,f
 15090  1112  290D               	goto	u510_25
 15091  1113  082C               	movf	??i1_ReadBaud+4,w
 15092  1114  07A8               	addwf	??i1_ReadBaud,f
 15093  1115  082D               	movf	??i1_ReadBaud+5,w
 15094  1116  3DA9               	addwfc	??i1_ReadBaud+1,f
 15095  1117  082E               	movf	??i1_ReadBaud+6,w
 15096  1118  3DAA               	addwfc	??i1_ReadBaud+2,f
 15097  1119  082F               	movf	??i1_ReadBaud+7,w
 15098  111A  3DAB               	addwfc	??i1_ReadBaud+3,f
 15099  111B  082B               	movf	??i1_ReadBaud+3,w
 15100  111C  00A7               	movwf	?i1_ReadBaud+3
 15101  111D  082A               	movf	??i1_ReadBaud+2,w
 15102  111E  00A6               	movwf	?i1_ReadBaud+2
 15103  111F  0829               	movf	??i1_ReadBaud+1,w
 15104  1120  00A5               	movwf	?i1_ReadBaud+1
 15105  1121  0828               	movf	??i1_ReadBaud,w
 15106  1122  00A4               	movwf	?i1_ReadBaud
 15107  1123  0008               	return
 15108  1124                     __end_ofi1_ReadBaud:	
 15109                           
 15110                           	psect	text55
 15111  1E68                     __ptext55:	
 15112 ;; *************** function i1_ReadFlash_4Byte *****************
 15113 ;; Defined at:
 15114 ;;		line 62 in file "FLASH.c"
 15115 ;; Parameters:    Size  Location     Type
 15116 ;;  row             2    5[COMMON] unsigned int 
 15117 ;;  column          1    7[COMMON] unsigned char 
 15118 ;; Auto vars:     Size  Location     Type
 15119 ;;  ReadFlash_4B    4    0[BANK0 ] unsigned long 
 15120 ;; Return value:  Size  Location     Type
 15121 ;;                  4    5[COMMON] unsigned long 
 15122 ;; Registers used:
 15123 ;;		wreg, status,2, status,0, pclath, cstack
 15124 ;; Tracked objects:
 15125 ;;		On entry : 0/0
 15126 ;;		On exit  : 0/0
 15127 ;;		Unchanged: 0/0
 15128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15129 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15130 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15131 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15132 ;;      Totals:         9       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15133 ;;Total ram usage:       13 bytes
 15134 ;; Hardware stack levels used:    1
 15135 ;; Hardware stack levels required when called:    1
 15136 ;; This function calls:
 15137 ;;		i1_ReadFlash_2Byte
 15138 ;; This function is called by:
 15139 ;;		i1_ReadBaud
 15140 ;; This function uses a non-reentrant model
 15141 ;;
 15142                           
 15143                           
 15144                           ;psect for function i1_ReadFlash_4Byte
 15145  1E68                     i1_ReadFlash_4Byte:	
 15146                           
 15147                           ;FLASH.c: 64: unsigned long temp =0;
 15148                           
 15149                           ;incstack = 0
 15150                           ; Regs used in i1_ReadFlash_4Byte: [wreg+status,2+status,0+pclath+cstack]
 15151  1E68  3000               	movlw	0
 15152  1E69  0020               	movlb	0	; select bank0
 15153  1E6A  00A3               	movwf	i1ReadFlash_4Byte@temp+3
 15154  1E6B  3000               	movlw	0
 15155  1E6C  00A2               	movwf	i1ReadFlash_4Byte@temp+2
 15156  1E6D  3000               	movlw	0
 15157  1E6E  00A1               	movwf	i1ReadFlash_4Byte@temp+1
 15158  1E6F  3000               	movlw	0
 15159  1E70  00A0               	movwf	i1ReadFlash_4Byte@temp
 15160                           
 15161                           ;FLASH.c: 65: temp = ((unsigned long)ReadFlash_2Byte(row, column) << 16);
 15162  1E71  0876               	movf	i1ReadFlash_4Byte@row+1,w
 15163  1E72  01F1               	clrf	i1ReadFlash_2Byte@row+1
 15164  1E73  07F1               	addwf	i1ReadFlash_2Byte@row+1,f
 15165  1E74  0875               	movf	i1ReadFlash_4Byte@row,w
 15166  1E75  01F0               	clrf	i1ReadFlash_2Byte@row
 15167  1E76  07F0               	addwf	i1ReadFlash_2Byte@row,f
 15168  1E77  0877               	movf	i1ReadFlash_4Byte@column,w
 15169  1E78  00F9               	movwf	??i1_ReadFlash_4Byte
 15170  1E79  0879               	movf	??i1_ReadFlash_4Byte,w
 15171  1E7A  00F2               	movwf	i1ReadFlash_2Byte@column
 15172  1E7B  319A  2250  319E   	fcall	i1_ReadFlash_2Byte
 15173  1E7E  0870               	movf	?i1_ReadFlash_2Byte,w
 15174  1E7F  00FA               	movwf	??i1_ReadFlash_4Byte+1
 15175  1E80  0871               	movf	?i1_ReadFlash_2Byte+1,w
 15176  1E81  00FB               	movwf	??i1_ReadFlash_4Byte+2
 15177  1E82  01FC               	clrf	??i1_ReadFlash_4Byte+3
 15178  1E83  01FD               	clrf	??i1_ReadFlash_4Byte+4
 15179  1E84  3010               	movlw	16
 15180  1E85                     u429_25:	
 15181  1E85  35FA               	lslf	??i1_ReadFlash_4Byte+1,f
 15182  1E86  0DFB               	rlf	??i1_ReadFlash_4Byte+2,f
 15183  1E87  0DFC               	rlf	??i1_ReadFlash_4Byte+3,f
 15184  1E88  0DFD               	rlf	??i1_ReadFlash_4Byte+4,f
 15185  1E89  0B89               	decfsz	9,f
 15186  1E8A  2E85               	goto	u429_25
 15187  1E8B  087D               	movf	??i1_ReadFlash_4Byte+4,w
 15188  1E8C  0020               	movlb	0	; select bank0
 15189  1E8D  00A3               	movwf	i1ReadFlash_4Byte@temp+3
 15190  1E8E  087C               	movf	??i1_ReadFlash_4Byte+3,w
 15191  1E8F  00A2               	movwf	i1ReadFlash_4Byte@temp+2
 15192  1E90  087B               	movf	??i1_ReadFlash_4Byte+2,w
 15193  1E91  00A1               	movwf	i1ReadFlash_4Byte@temp+1
 15194  1E92  087A               	movf	??i1_ReadFlash_4Byte+1,w
 15195  1E93  00A0               	movwf	i1ReadFlash_4Byte@temp
 15196                           
 15197                           ;FLASH.c: 66: temp |= ((unsigned long)ReadFlash_2Byte(row, (column + 1)));
 15198  1E94  0876               	movf	i1ReadFlash_4Byte@row+1,w
 15199  1E95  01F1               	clrf	i1ReadFlash_2Byte@row+1
 15200  1E96  07F1               	addwf	i1ReadFlash_2Byte@row+1,f
 15201  1E97  0875               	movf	i1ReadFlash_4Byte@row,w
 15202  1E98  01F0               	clrf	i1ReadFlash_2Byte@row
 15203  1E99  07F0               	addwf	i1ReadFlash_2Byte@row,f
 15204  1E9A  0877               	movf	i1ReadFlash_4Byte@column,w
 15205  1E9B  3E01               	addlw	1
 15206  1E9C  00F9               	movwf	??i1_ReadFlash_4Byte
 15207  1E9D  0879               	movf	??i1_ReadFlash_4Byte,w
 15208  1E9E  00F2               	movwf	i1ReadFlash_2Byte@column
 15209  1E9F  319A  2250         	fcall	i1_ReadFlash_2Byte
 15210  1EA1  0870               	movf	?i1_ReadFlash_2Byte,w
 15211  1EA2  00FA               	movwf	??i1_ReadFlash_4Byte+1
 15212  1EA3  0871               	movf	?i1_ReadFlash_2Byte+1,w
 15213  1EA4  00FB               	movwf	??i1_ReadFlash_4Byte+2
 15214  1EA5  01FC               	clrf	??i1_ReadFlash_4Byte+3
 15215  1EA6  01FD               	clrf	??i1_ReadFlash_4Byte+4
 15216  1EA7  087A               	movf	??i1_ReadFlash_4Byte+1,w
 15217  1EA8  0020               	movlb	0	; select bank0
 15218  1EA9  04A0               	iorwf	i1ReadFlash_4Byte@temp,f
 15219  1EAA  087B               	movf	??i1_ReadFlash_4Byte+2,w
 15220  1EAB  04A1               	iorwf	i1ReadFlash_4Byte@temp+1,f
 15221  1EAC  087C               	movf	??i1_ReadFlash_4Byte+3,w
 15222  1EAD  04A2               	iorwf	i1ReadFlash_4Byte@temp+2,f
 15223  1EAE  087D               	movf	??i1_ReadFlash_4Byte+4,w
 15224  1EAF  04A3               	iorwf	i1ReadFlash_4Byte@temp+3,f
 15225                           
 15226                           ;FLASH.c: 67: return temp;
 15227  1EB0  0823               	movf	i1ReadFlash_4Byte@temp+3,w
 15228  1EB1  00F8               	movwf	?i1_ReadFlash_4Byte+3
 15229  1EB2  0822               	movf	i1ReadFlash_4Byte@temp+2,w
 15230  1EB3  00F7               	movwf	?i1_ReadFlash_4Byte+2
 15231  1EB4  0821               	movf	i1ReadFlash_4Byte@temp+1,w
 15232  1EB5  00F6               	movwf	?i1_ReadFlash_4Byte+1
 15233  1EB6  0820               	movf	i1ReadFlash_4Byte@temp,w
 15234  1EB7  00F5               	movwf	?i1_ReadFlash_4Byte
 15235  1EB8  0008               	return
 15236  1EB9                     __end_ofi1_ReadFlash_4Byte:	
 15237                           
 15238                           	psect	text56
 15239  1526                     __ptext56:	
 15240 ;; *************** function i1_InitUART *****************
 15241 ;; Defined at:
 15242 ;;		line 75 in file "UART.c"
 15243 ;; Parameters:    Size  Location     Type
 15244 ;;  Baud            4    0[BANK0 ] unsigned long 
 15245 ;;  parity          1    4[BANK0 ] unsigned char 
 15246 ;; Auto vars:     Size  Location     Type
 15247 ;;  InitUART        4   17[BANK0 ] unsigned long 
 15248 ;;  InitUART        2   13[BANK0 ] unsigned int 
 15249 ;;  InitUART        1   16[BANK0 ] unsigned char 
 15250 ;;  InitUART        1   15[BANK0 ] unsigned char 
 15251 ;; Return value:  Size  Location     Type
 15252 ;;		None               void
 15253 ;; Registers used:
 15254 ;;		wreg, status,2, status,0, pclath, cstack
 15255 ;; Tracked objects:
 15256 ;;		On entry : 0/0
 15257 ;;		On exit  : 0/0
 15258 ;;		Unchanged: 0/0
 15259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15260 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15261 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15262 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15263 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15264 ;;Total ram usage:       21 bytes
 15265 ;; Hardware stack levels used:    1
 15266 ;; Hardware stack levels required when called:    1
 15267 ;; This function calls:
 15268 ;;		i1_CloseUSART
 15269 ;;		i1_OpenUSART
 15270 ;;		i1_ReadUSART
 15271 ;;		i1___lldiv
 15272 ;;		i1_baudUSART
 15273 ;; This function is called by:
 15274 ;;		_SetBaud
 15275 ;; This function uses a non-reentrant model
 15276 ;;
 15277                           
 15278                           
 15279                           ;psect for function i1_InitUART
 15280  1526                     i1_InitUART:	
 15281                           
 15282                           ;UART.c: 77: unsigned long temp;
 15283                           ;UART.c: 78: unsigned char config;
 15284                           ;UART.c: 79: unsigned int spbrg;
 15285                           ;UART.c: 80: unsigned char baudconfig;
 15286                           ;UART.c: 90: LATC |= 0b00000100;
 15287                           
 15288                           ;incstack = 0
 15289                           ; Regs used in i1_InitUART: [wreg+status,2+status,0+pclath+cstack]
 15290  1526  0022               	movlb	2	; select bank2
 15291  1527  150E               	bsf	14,2	;volatile
 15292                           
 15293                           ;UART.c: 91: PPSLOCK =0;
 15294  1528  003C               	movlb	28	; select bank28
 15295  1529  018F               	clrf	15	;volatile
 15296                           
 15297                           ;UART.c: 92: RC2PPS = 0b00000000;
 15298  152A  003D               	movlb	29	; select bank29
 15299  152B  01A2               	clrf	34	;volatile
 15300                           
 15301                           ;UART.c: 93: PPSLOCK =1;
 15302  152C  3001               	movlw	1
 15303  152D  003C               	movlb	28	; select bank28
 15304  152E  008F               	movwf	15	;volatile
 15305                           
 15306                           ;UART.c: 95: CloseUSART();
 15307  152F  3198  20F9  3195   	fcall	i1_CloseUSART
 15308                           
 15309                           ;UART.c: 96: config =0;
 15310  1532  0020               	movlb	0	; select bank0
 15311  1533  01B0               	clrf	i1InitUART@config
 15312                           
 15313                           ;UART.c: 97: baudconfig =0;
 15314  1534  01AF               	clrf	i1InitUART@baudconfig
 15315                           
 15316                           ;UART.c: 102: config |= 0b00001000;
 15317  1535  15B0               	bsf	i1InitUART@config,3
 15318                           
 15319                           ;UART.c: 103: config |= 0b00010000;
 15320  1536  1630               	bsf	i1InitUART@config,4
 15321                           
 15322                           ;UART.c: 104: PARITY = parity;
 15323  1537  0824               	movf	i1InitUART@parity,w
 15324  1538  00A5               	movwf	??i1_InitUART
 15325  1539  0825               	movf	??i1_InitUART,w
 15326  153A  0024               	movlb	4	; select bank4
 15327  153B  00E0               	movwf	_PARITY^(0+512)
 15328                           
 15329                           ;UART.c: 105: BAUD = Baud;
 15330  153C  0020               	movlb	0	; select bank0
 15331  153D  0823               	movf	i1InitUART@Baud+3,w
 15332  153E  0024               	movlb	4	; select bank4
 15333  153F  00E4               	movwf	(_BAUD+3)^(0+512)
 15334  1540  0020               	movlb	0	; select bank0
 15335  1541  0822               	movf	i1InitUART@Baud+2,w
 15336  1542  0024               	movlb	4	; select bank4
 15337  1543  00E3               	movwf	(_BAUD+2)^(0+512)
 15338  1544  0020               	movlb	0	; select bank0
 15339  1545  0821               	movf	i1InitUART@Baud+1,w
 15340  1546  0024               	movlb	4	; select bank4
 15341  1547  00E2               	movwf	(_BAUD+1)^(0+512)
 15342  1548  0020               	movlb	0	; select bank0
 15343  1549  0820               	movf	i1InitUART@Baud,w
 15344  154A  0024               	movlb	4	; select bank4
 15345  154B  00E1               	movwf	_BAUD^(0+512)
 15346                           
 15347                           ;UART.c: 106: if(parity)
 15348  154C  0020               	movlb	0	; select bank0
 15349  154D  0824               	movf	i1InitUART@parity,w
 15350  154E  1903               	btfsc	3,2
 15351  154F  2D52               	goto	i1l4476
 15352                           
 15353                           ;UART.c: 107: {
 15354                           ;UART.c: 108: config |= 0b00000010;
 15355  1550  14B0               	bsf	i1InitUART@config,1
 15356                           
 15357                           ;UART.c: 109: }
 15358  1551  2D56               	goto	i1l4478
 15359  1552                     i1l4476:	
 15360                           
 15361                           ;UART.c: 110: else
 15362                           ;UART.c: 111: {
 15363                           ;UART.c: 112: config &= ~0b00000010;
 15364  1552  30FD               	movlw	253
 15365  1553  00A5               	movwf	??i1_InitUART
 15366  1554  0825               	movf	??i1_InitUART,w
 15367  1555  05B0               	andwf	i1InitUART@config,f
 15368  1556                     i1l4478:	
 15369                           
 15370                           ;UART.c: 113: }
 15371                           ;UART.c: 114: baudconfig |= 0b00001000;
 15372  1556  15AF               	bsf	i1InitUART@baudconfig,3
 15373                           
 15374                           ;UART.c: 117: temp = (32000000L / Baud) - 1;
 15375  1557  0823               	movf	i1InitUART@Baud+3,w
 15376  1558  00F3               	movwf	i1___lldiv@divisor+3
 15377  1559  0822               	movf	i1InitUART@Baud+2,w
 15378  155A  00F2               	movwf	i1___lldiv@divisor+2
 15379  155B  0821               	movf	i1InitUART@Baud+1,w
 15380  155C  00F1               	movwf	i1___lldiv@divisor+1
 15381  155D  0820               	movf	i1InitUART@Baud,w
 15382  155E  00F0               	movwf	i1___lldiv@divisor
 15383  155F  3001               	movlw	1
 15384  1560  00F7               	movwf	i1___lldiv@dividend+3
 15385  1561  30E8               	movlw	232
 15386  1562  00F6               	movwf	i1___lldiv@dividend+2
 15387  1563  3048               	movlw	72
 15388  1564  00F5               	movwf	i1___lldiv@dividend+1
 15389  1565  3000               	movlw	0
 15390  1566  00F4               	movwf	i1___lldiv@dividend
 15391  1567  319F  275B  3195   	fcall	i1___lldiv
 15392  156A  30FF               	movlw	255
 15393  156B  0770               	addwf	?i1___lldiv,w
 15394  156C  0020               	movlb	0	; select bank0
 15395  156D  00B1               	movwf	i1InitUART@temp
 15396  156E  30FF               	movlw	255
 15397  156F  3D71               	addwfc	?i1___lldiv+1,w
 15398  1570  00B2               	movwf	i1InitUART@temp+1
 15399  1571  30FF               	movlw	255
 15400  1572  3D72               	addwfc	?i1___lldiv+2,w
 15401  1573  00B3               	movwf	i1InitUART@temp+2
 15402  1574  30FF               	movlw	255
 15403  1575  3D73               	addwfc	?i1___lldiv+3,w
 15404  1576  00B4               	movwf	i1InitUART@temp+3
 15405                           
 15406                           ;UART.c: 118: temp = (temp >> 2) - 1;
 15407  1577  30FF               	movlw	255
 15408  1578  00A5               	movwf	??i1_InitUART
 15409  1579  30FF               	movlw	255
 15410  157A  00A6               	movwf	??i1_InitUART+1
 15411  157B  30FF               	movlw	255
 15412  157C  00A7               	movwf	??i1_InitUART+2
 15413  157D  30FF               	movlw	255
 15414  157E  00A8               	movwf	??i1_InitUART+3
 15415  157F  0831               	movf	i1InitUART@temp,w
 15416  1580  00A9               	movwf	??i1_InitUART+4
 15417  1581  0832               	movf	i1InitUART@temp+1,w
 15418  1582  00AA               	movwf	??i1_InitUART+5
 15419  1583  0833               	movf	i1InitUART@temp+2,w
 15420  1584  00AB               	movwf	??i1_InitUART+6
 15421  1585  0834               	movf	i1InitUART@temp+3,w
 15422  1586  00AC               	movwf	??i1_InitUART+7
 15423  1587  3002               	movlw	2
 15424  1588                     u500_25:	
 15425  1588  36AC               	lsrf	??i1_InitUART+7,f
 15426  1589  0CAB               	rrf	??i1_InitUART+6,f
 15427  158A  0CAA               	rrf	??i1_InitUART+5,f
 15428  158B  0CA9               	rrf	??i1_InitUART+4,f
 15429  158C  0B89               	decfsz	9,f
 15430  158D  2D88               	goto	u500_25
 15431  158E  0829               	movf	??i1_InitUART+4,w
 15432  158F  07A5               	addwf	??i1_InitUART,f
 15433  1590  082A               	movf	??i1_InitUART+5,w
 15434  1591  3DA6               	addwfc	??i1_InitUART+1,f
 15435  1592  082B               	movf	??i1_InitUART+6,w
 15436  1593  3DA7               	addwfc	??i1_InitUART+2,f
 15437  1594  082C               	movf	??i1_InitUART+7,w
 15438  1595  3DA8               	addwfc	??i1_InitUART+3,f
 15439  1596  0828               	movf	??i1_InitUART+3,w
 15440  1597  00B4               	movwf	i1InitUART@temp+3
 15441  1598  0827               	movf	??i1_InitUART+2,w
 15442  1599  00B3               	movwf	i1InitUART@temp+2
 15443  159A  0826               	movf	??i1_InitUART+1,w
 15444  159B  00B2               	movwf	i1InitUART@temp+1
 15445  159C  0825               	movf	??i1_InitUART,w
 15446  159D  00B1               	movwf	i1InitUART@temp
 15447                           
 15448                           ;UART.c: 119: spbrg = (unsigned int)temp;
 15449  159E  0832               	movf	i1InitUART@temp+1,w
 15450  159F  01AE               	clrf	i1InitUART@spbrg+1
 15451  15A0  07AE               	addwf	i1InitUART@spbrg+1,f
 15452  15A1  0831               	movf	i1InitUART@temp,w
 15453  15A2  01AD               	clrf	i1InitUART@spbrg
 15454  15A3  07AD               	addwf	i1InitUART@spbrg,f
 15455                           
 15456                           ;UART.c: 121: RCSTAbits.CREN = 0;
 15457  15A4  0023               	movlb	3	; select bank3
 15458  15A5  121D               	bcf	29,4	;volatile
 15459                           
 15460                           ;UART.c: 122: OpenUSART(config, spbrg);
 15461  15A6  0020               	movlb	0	; select bank0
 15462  15A7  082E               	movf	i1InitUART@spbrg+1,w
 15463  15A8  01F1               	clrf	i1OpenUSART@spbrg+1
 15464  15A9  07F1               	addwf	i1OpenUSART@spbrg+1,f
 15465  15AA  082D               	movf	i1InitUART@spbrg,w
 15466  15AB  01F0               	clrf	i1OpenUSART@spbrg
 15467  15AC  07F0               	addwf	i1OpenUSART@spbrg,f
 15468  15AD  0830               	movf	i1InitUART@config,w
 15469  15AE  319A  22D0  3195   	fcall	i1_OpenUSART
 15470                           
 15471                           ;UART.c: 123: baudUSART(baudconfig);
 15472  15B1  0020               	movlb	0	; select bank0
 15473  15B2  082F               	movf	i1InitUART@baudconfig,w
 15474  15B3  3198  208E  3195   	fcall	i1_baudUSART
 15475                           
 15476                           ;UART.c: 124: temp = ReadUSART();
 15477  15B6  3198  20A8  3195   	fcall	i1_ReadUSART
 15478  15B9  0020               	movlb	0	; select bank0
 15479  15BA  00A5               	movwf	??i1_InitUART
 15480  15BB  01A6               	clrf	??i1_InitUART+1
 15481  15BC  01A7               	clrf	??i1_InitUART+2
 15482  15BD  01A8               	clrf	??i1_InitUART+3
 15483  15BE  0828               	movf	??i1_InitUART+3,w
 15484  15BF  00B4               	movwf	i1InitUART@temp+3
 15485  15C0  0827               	movf	??i1_InitUART+2,w
 15486  15C1  00B3               	movwf	i1InitUART@temp+2
 15487  15C2  0826               	movf	??i1_InitUART+1,w
 15488  15C3  00B2               	movwf	i1InitUART@temp+1
 15489  15C4  0825               	movf	??i1_InitUART,w
 15490  15C5  00B1               	movwf	i1InitUART@temp
 15491                           
 15492                           ;UART.c: 125: temp = ReadUSART();
 15493  15C6  3198  20A8  3195   	fcall	i1_ReadUSART
 15494  15C9  0020               	movlb	0	; select bank0
 15495  15CA  00A5               	movwf	??i1_InitUART
 15496  15CB  01A6               	clrf	??i1_InitUART+1
 15497  15CC  01A7               	clrf	??i1_InitUART+2
 15498  15CD  01A8               	clrf	??i1_InitUART+3
 15499  15CE  0828               	movf	??i1_InitUART+3,w
 15500  15CF  00B4               	movwf	i1InitUART@temp+3
 15501  15D0  0827               	movf	??i1_InitUART+2,w
 15502  15D1  00B3               	movwf	i1InitUART@temp+2
 15503  15D2  0826               	movf	??i1_InitUART+1,w
 15504  15D3  00B2               	movwf	i1InitUART@temp+1
 15505  15D4  0825               	movf	??i1_InitUART,w
 15506  15D5  00B1               	movwf	i1InitUART@temp
 15507                           
 15508                           ;UART.c: 126: temp = ReadUSART();
 15509  15D6  3198  20A8  3195   	fcall	i1_ReadUSART
 15510  15D9  0020               	movlb	0	; select bank0
 15511  15DA  00A5               	movwf	??i1_InitUART
 15512  15DB  01A6               	clrf	??i1_InitUART+1
 15513  15DC  01A7               	clrf	??i1_InitUART+2
 15514  15DD  01A8               	clrf	??i1_InitUART+3
 15515  15DE  0828               	movf	??i1_InitUART+3,w
 15516  15DF  00B4               	movwf	i1InitUART@temp+3
 15517  15E0  0827               	movf	??i1_InitUART+2,w
 15518  15E1  00B3               	movwf	i1InitUART@temp+2
 15519  15E2  0826               	movf	??i1_InitUART+1,w
 15520  15E3  00B2               	movwf	i1InitUART@temp+1
 15521  15E4  0825               	movf	??i1_InitUART,w
 15522  15E5  00B1               	movwf	i1InitUART@temp
 15523                           
 15524                           ;UART.c: 127: temp = ReadUSART();
 15525  15E6  3198  20A8  3195   	fcall	i1_ReadUSART
 15526  15E9  0020               	movlb	0	; select bank0
 15527  15EA  00A5               	movwf	??i1_InitUART
 15528  15EB  01A6               	clrf	??i1_InitUART+1
 15529  15EC  01A7               	clrf	??i1_InitUART+2
 15530  15ED  01A8               	clrf	??i1_InitUART+3
 15531  15EE  0828               	movf	??i1_InitUART+3,w
 15532  15EF  00B4               	movwf	i1InitUART@temp+3
 15533  15F0  0827               	movf	??i1_InitUART+2,w
 15534  15F1  00B3               	movwf	i1InitUART@temp+2
 15535  15F2  0826               	movf	??i1_InitUART+1,w
 15536  15F3  00B2               	movwf	i1InitUART@temp+1
 15537  15F4  0825               	movf	??i1_InitUART,w
 15538  15F5  00B1               	movwf	i1InitUART@temp
 15539                           
 15540                           ;UART.c: 128: temp = ReadUSART();
 15541  15F6  3198  20A8         	fcall	i1_ReadUSART
 15542  15F8  0020               	movlb	0	; select bank0
 15543  15F9  00A5               	movwf	??i1_InitUART
 15544  15FA  01A6               	clrf	??i1_InitUART+1
 15545  15FB  01A7               	clrf	??i1_InitUART+2
 15546  15FC  01A8               	clrf	??i1_InitUART+3
 15547  15FD  0828               	movf	??i1_InitUART+3,w
 15548  15FE  00B4               	movwf	i1InitUART@temp+3
 15549  15FF  0827               	movf	??i1_InitUART+2,w
 15550  1600  00B3               	movwf	i1InitUART@temp+2
 15551  1601  0826               	movf	??i1_InitUART+1,w
 15552  1602  00B2               	movwf	i1InitUART@temp+1
 15553  1603  0825               	movf	??i1_InitUART,w
 15554  1604  00B1               	movwf	i1InitUART@temp
 15555                           
 15556                           ;UART.c: 130: PPSLOCK =0;
 15557  1605  003C               	movlb	28	; select bank28
 15558  1606  018F               	clrf	15	;volatile
 15559                           
 15560                           ;UART.c: 131: RC2PPS = 0b00010100;
 15561  1607  3014               	movlw	20
 15562  1608  003D               	movlb	29	; select bank29
 15563  1609  00A2               	movwf	34	;volatile
 15564                           
 15565                           ;UART.c: 132: CKPPS = 0b00010010;
 15566  160A  3012               	movlw	18
 15567  160B  003C               	movlb	28	; select bank28
 15568  160C  00A5               	movwf	37	;volatile
 15569                           
 15570                           ;UART.c: 136: PPSLOCK =1;
 15571  160D  3001               	movlw	1
 15572  160E  008F               	movwf	15	;volatile
 15573                           
 15574                           ;UART.c: 138: PIR1bits.RCIF = 0;
 15575  160F  0020               	movlb	0	; select bank0
 15576  1610  1291               	bcf	17,5	;volatile
 15577                           
 15578                           ;UART.c: 139: INTCONbits.PEIE = 1;
 15579  1611  170B               	bsf	11,6	;volatile
 15580  1612  0008               	return
 15581  1613                     __end_ofi1_InitUART:	
 15582                           
 15583                           	psect	text57
 15584  188E                     __ptext57:	
 15585 ;; *************** function i1_baudUSART *****************
 15586 ;; Defined at:
 15587 ;;		line 147 in file "UART.c"
 15588 ;; Parameters:    Size  Location     Type
 15589 ;;  baudconfig      1    wreg     unsigned char 
 15590 ;; Auto vars:     Size  Location     Type
 15591 ;;  baudconfig      1    0[COMMON] unsigned char 
 15592 ;; Return value:  Size  Location     Type
 15593 ;;		None               void
 15594 ;; Registers used:
 15595 ;;		wreg, status,2
 15596 ;; Tracked objects:
 15597 ;;		On entry : 0/0
 15598 ;;		On exit  : 0/0
 15599 ;;		Unchanged: 0/0
 15600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15602 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15604 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15605 ;;Total ram usage:        1 bytes
 15606 ;; Hardware stack levels used:    1
 15607 ;; This function calls:
 15608 ;;		Nothing
 15609 ;; This function is called by:
 15610 ;;		i1_InitUART
 15611 ;; This function uses a non-reentrant model
 15612 ;;
 15613                           
 15614                           
 15615                           ;psect for function i1_baudUSART
 15616  188E                     i1_baudUSART:	
 15617                           
 15618                           ;incstack = 0
 15619                           ; Regs used in i1_baudUSART: [wreg+status,2]
 15620                           ;i1baudUSART@baudconfig stored from wreg
 15621  188E  00F0               	movwf	i1baudUSART@baudconfig
 15622                           
 15623                           ;UART.c: 149: BAUD1CON =0;
 15624  188F  0023               	movlb	3	; select bank3
 15625  1890  019F               	clrf	31	;volatile
 15626                           
 15627                           ;UART.c: 150: BAUD1CON = baudconfig;
 15628  1891  0870               	movf	i1baudUSART@baudconfig,w
 15629  1892  009F               	movwf	31	;volatile
 15630  1893  0008               	return
 15631  1894                     __end_ofi1_baudUSART:	
 15632                           
 15633                           	psect	text58
 15634  18A8                     __ptext58:	
 15635 ;; *************** function i1_ReadUSART *****************
 15636 ;; Defined at:
 15637 ;;		line 302 in file "UART.c"
 15638 ;; Parameters:    Size  Location     Type
 15639 ;;		None
 15640 ;; Auto vars:     Size  Location     Type
 15641 ;;  ReadUSART       1    1[COMMON] unsigned char 
 15642 ;; Return value:  Size  Location     Type
 15643 ;;                  1    wreg      unsigned char 
 15644 ;; Registers used:
 15645 ;;		wreg
 15646 ;; Tracked objects:
 15647 ;;		On entry : 0/0
 15648 ;;		On exit  : 0/0
 15649 ;;		Unchanged: 0/0
 15650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15652 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15653 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15654 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15655 ;;Total ram usage:        2 bytes
 15656 ;; Hardware stack levels used:    1
 15657 ;; This function calls:
 15658 ;;		Nothing
 15659 ;; This function is called by:
 15660 ;;		i1_InitUART
 15661 ;; This function uses a non-reentrant model
 15662 ;;
 15663                           
 15664                           
 15665                           ;psect for function i1_ReadUSART
 15666  18A8                     i1_ReadUSART:	
 15667                           
 15668                           ;UART.c: 304: char data;
 15669                           ;UART.c: 306: if(RCSTAbits.OERR)
 15670                           
 15671                           ;incstack = 0
 15672                           ; Regs used in i1_ReadUSART: [wreg]
 15673  18A8  0023               	movlb	3	; select bank3
 15674  18A9  189D               	btfsc	29,1	;volatile
 15675                           
 15676                           ;UART.c: 307: {
 15677                           ;UART.c: 308: RCSTAbits.CREN = 0;
 15678  18AA  121D               	bcf	29,4	;volatile
 15679                           
 15680                           ;UART.c: 309: }
 15681                           ;UART.c: 311: data = RCREG;
 15682  18AB  0819               	movf	25,w	;volatile
 15683  18AC  00F0               	movwf	??i1_ReadUSART
 15684  18AD  0870               	movf	??i1_ReadUSART,w
 15685  18AE  00F1               	movwf	i1ReadUSART@data
 15686                           
 15687                           ;UART.c: 313: return (data);
 15688  18AF  0871               	movf	i1ReadUSART@data,w
 15689  18B0  0008               	return
 15690  18B1                     __end_ofi1_ReadUSART:	
 15691                           
 15692                           	psect	text59
 15693  1AD0                     __ptext59:	
 15694 ;; *************** function i1_OpenUSART *****************
 15695 ;; Defined at:
 15696 ;;		line 158 in file "UART.c"
 15697 ;; Parameters:    Size  Location     Type
 15698 ;;  config          1    wreg     unsigned char 
 15699 ;;  spbrg           2    0[COMMON] unsigned int 
 15700 ;; Auto vars:     Size  Location     Type
 15701 ;;  config          1    2[COMMON] unsigned char 
 15702 ;; Return value:  Size  Location     Type
 15703 ;;		None               void
 15704 ;; Registers used:
 15705 ;;		wreg, status,2
 15706 ;; Tracked objects:
 15707 ;;		On entry : 0/0
 15708 ;;		On exit  : 0/0
 15709 ;;		Unchanged: 0/0
 15710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15711 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15712 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15714 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15715 ;;Total ram usage:        3 bytes
 15716 ;; Hardware stack levels used:    1
 15717 ;; This function calls:
 15718 ;;		Nothing
 15719 ;; This function is called by:
 15720 ;;		i1_InitUART
 15721 ;; This function uses a non-reentrant model
 15722 ;;
 15723                           
 15724                           
 15725                           ;psect for function i1_OpenUSART
 15726  1AD0                     i1_OpenUSART:	
 15727                           
 15728                           ;incstack = 0
 15729                           ; Regs used in i1_OpenUSART: [wreg+status,2]
 15730                           ;i1OpenUSART@config stored from wreg
 15731  1AD0  00F2               	movwf	i1OpenUSART@config
 15732                           
 15733                           ;UART.c: 160: TX1STA = 0;
 15734  1AD1  0023               	movlb	3	; select bank3
 15735  1AD2  019E               	clrf	30	;volatile
 15736                           
 15737                           ;UART.c: 161: RC1STA = 0;
 15738  1AD3  019D               	clrf	29	;volatile
 15739                           
 15740                           ;UART.c: 163: if(config&0x01)
 15741  1AD4  1872               	btfsc	i1OpenUSART@config,0
 15742                           
 15743                           ;UART.c: 164: {
 15744                           ;UART.c: 165: TX1STAbits.SYNC = 1;
 15745  1AD5  161E               	bsf	30,4	;volatile
 15746                           
 15747                           ;UART.c: 166: }
 15748                           ;UART.c: 168: if(config&0x02)
 15749  1AD6  1CF2               	btfss	i1OpenUSART@config,1
 15750  1AD7  2ADA               	goto	i1l4008
 15751                           
 15752                           ;UART.c: 169: {
 15753                           ;UART.c: 170: TX1STAbits.TX9 = 1;
 15754  1AD8  171E               	bsf	30,6	;volatile
 15755                           
 15756                           ;UART.c: 171: RC1STAbits.RX9 = 1;
 15757  1AD9  171D               	bsf	29,6	;volatile
 15758  1ADA                     i1l4008:	
 15759                           
 15760                           ;UART.c: 172: }
 15761                           ;UART.c: 174: if(config&0x04)
 15762  1ADA  1972               	btfsc	i1OpenUSART@config,2
 15763                           
 15764                           ;UART.c: 175: {
 15765                           ;UART.c: 176: TX1STAbits.CSRC = 1;
 15766  1ADB  179E               	bsf	30,7	;volatile
 15767                           
 15768                           ;UART.c: 177: }
 15769                           ;UART.c: 179: if(config&0x08)
 15770  1ADC  1DF2               	btfss	i1OpenUSART@config,3
 15771  1ADD  2AE0               	goto	i1l389
 15772                           
 15773                           ;UART.c: 180: {
 15774                           ;UART.c: 181: RC1STAbits.CREN = 1;
 15775  1ADE  161D               	bsf	29,4	;volatile
 15776                           
 15777                           ;UART.c: 182: }
 15778  1ADF  2AE1               	goto	i1l4016
 15779  1AE0                     i1l389:	
 15780                           
 15781                           ;UART.c: 183: else
 15782                           ;UART.c: 184: {
 15783                           ;UART.c: 185: RC1STAbits.SREN = 1;
 15784  1AE0  169D               	bsf	29,5	;volatile
 15785  1AE1                     i1l4016:	
 15786                           
 15787                           ;UART.c: 186: }
 15788                           ;UART.c: 188: if(config&0x10)
 15789  1AE1  1A72               	btfsc	i1OpenUSART@config,4
 15790                           
 15791                           ;UART.c: 189: {
 15792                           ;UART.c: 190: TX1STAbits.BRGH = 1;
 15793  1AE2  151E               	bsf	30,2	;volatile
 15794                           
 15795                           ;UART.c: 196: }
 15796                           ;UART.c: 198: if(config&0x40)
 15797                           
 15798                           ;UART.c: 194: {
 15799  1AE3  1F72               	btfss	i1OpenUSART@config,6
 15800  1AE4  2AEA               	goto	i1l393
 15801                           
 15802                           ;UART.c: 199: {
 15803                           ;UART.c: 200: PIR1bits.RCIF = 0;
 15804  1AE5  0020               	movlb	0	; select bank0
 15805  1AE6  1291               	bcf	17,5	;volatile
 15806                           
 15807                           ;UART.c: 201: PIE1bits.RCIE = 1;
 15808  1AE7  0021               	movlb	1	; select bank1
 15809  1AE8  1691               	bsf	17,5	;volatile
 15810                           
 15811                           ;UART.c: 203: }
 15812  1AE9  2AEC               	goto	i1l4026
 15813  1AEA                     i1l393:	
 15814                           
 15815                           ;UART.c: 204: else
 15816                           ;UART.c: 205: {
 15817                           ;UART.c: 206: PIE1bits.RCIE = 0;
 15818  1AEA  0021               	movlb	1	; select bank1
 15819  1AEB  1291               	bcf	17,5	;volatile
 15820  1AEC                     i1l4026:	
 15821                           
 15822                           ;UART.c: 207: }
 15823                           ;UART.c: 209: if(config&0x80)
 15824  1AEC  1FF2               	btfss	i1OpenUSART@config,7
 15825  1AED  2AF3               	goto	i1l395
 15826                           
 15827                           ;UART.c: 210: {
 15828                           ;UART.c: 211: PIR1bits.TXIF = 0;
 15829  1AEE  0020               	movlb	0	; select bank0
 15830  1AEF  1211               	bcf	17,4	;volatile
 15831                           
 15832                           ;UART.c: 212: PIE1bits.TXIE = 1;
 15833  1AF0  0021               	movlb	1	; select bank1
 15834  1AF1  1611               	bsf	17,4	;volatile
 15835                           
 15836                           ;UART.c: 213: }
 15837  1AF2  2AF4               	goto	i1l4030
 15838  1AF3                     i1l395:	
 15839                           
 15840                           ;UART.c: 214: else
 15841                           ;UART.c: 215: {
 15842                           ;UART.c: 216: PIE1bits.TXIE = 0;
 15843  1AF3  1211               	bcf	17,4	;volatile
 15844  1AF4                     i1l4030:	
 15845                           
 15846                           ;UART.c: 217: }
 15847                           ;UART.c: 219: SPBRG = spbrg;
 15848  1AF4  0870               	movf	i1OpenUSART@spbrg,w
 15849  1AF5  0023               	movlb	3	; select bank3
 15850  1AF6  009B               	movwf	27	;volatile
 15851                           
 15852                           ;UART.c: 220: SPBRGH = spbrg >> 8;
 15853  1AF7  0871               	movf	i1OpenUSART@spbrg+1,w
 15854  1AF8  009C               	movwf	28	;volatile
 15855                           
 15856                           ;UART.c: 222: TX1STAbits.TXEN = 1;
 15857  1AF9  169E               	bsf	30,5	;volatile
 15858                           
 15859                           ;UART.c: 223: RC1STAbits.SPEN = 1;
 15860  1AFA  179D               	bsf	29,7	;volatile
 15861  1AFB  0008               	return
 15862  1AFC                     __end_ofi1_OpenUSART:	
 15863                           
 15864                           	psect	text60
 15865  18F9                     __ptext60:	
 15866 ;; *************** function i1_CloseUSART *****************
 15867 ;; Defined at:
 15868 ;;		line 62 in file "UART.c"
 15869 ;; Parameters:    Size  Location     Type
 15870 ;;		None
 15871 ;; Auto vars:     Size  Location     Type
 15872 ;;		None
 15873 ;; Return value:  Size  Location     Type
 15874 ;;		None               void
 15875 ;; Registers used:
 15876 ;;		wreg, status,2, status,0
 15877 ;; Tracked objects:
 15878 ;;		On entry : 0/0
 15879 ;;		On exit  : 0/0
 15880 ;;		Unchanged: 0/0
 15881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15884 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15885 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15886 ;;Total ram usage:        1 bytes
 15887 ;; Hardware stack levels used:    1
 15888 ;; This function calls:
 15889 ;;		Nothing
 15890 ;; This function is called by:
 15891 ;;		i1_InitUART
 15892 ;; This function uses a non-reentrant model
 15893 ;;
 15894                           
 15895                           
 15896                           ;psect for function i1_CloseUSART
 15897  18F9                     i1_CloseUSART:	
 15898                           
 15899                           ;UART.c: 64: RCSTA&=0b01001111;
 15900                           
 15901                           ;incstack = 0
 15902                           ; Regs used in i1_CloseUSART: [wreg+status,2+status,0]
 15903  18F9  304F               	movlw	79
 15904  18FA  00F0               	movwf	??i1_CloseUSART
 15905  18FB  0870               	movf	??i1_CloseUSART,w
 15906  18FC  0023               	movlb	3	; select bank3
 15907  18FD  059D               	andwf	29,f	;volatile
 15908                           
 15909                           ;UART.c: 65: TX1STAbits.TXEN=0;
 15910  18FE  129E               	bcf	30,5	;volatile
 15911                           
 15912                           ;UART.c: 66: PIE1&=0b11001111;
 15913  18FF  30CF               	movlw	207
 15914  1900  00F0               	movwf	??i1_CloseUSART
 15915  1901  0870               	movf	??i1_CloseUSART,w
 15916  1902  0021               	movlb	1	; select bank1
 15917  1903  0591               	andwf	17,f	;volatile
 15918  1904  0008               	return
 15919  1905                     __end_ofi1_CloseUSART:	
 15920                           
 15921                           	psect	text61
 15922  1707                     __ptext61:	
 15923 ;; *************** function _sprintf *****************
 15924 ;; Defined at:
 15925 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
 15926 ;; Parameters:    Size  Location     Type
 15927 ;;  sp              1    wreg     PTR unsigned char 
 15928 ;;		 -> Process_PS2_ScanCode@buf(60), SetBaud@buf(50), 
 15929 ;;  f               2   10[BANK0 ] PTR const unsigned char 
 15930 ;;		 -> STR_18(24), STR_11(12), 
 15931 ;; Auto vars:     Size  Location     Type
 15932 ;;  sp              1   30[BANK0 ] PTR unsigned char 
 15933 ;;		 -> Process_PS2_ScanCode@buf(60), SetBaud@buf(50), 
 15934 ;;  _val            4   25[BANK0 ] struct .
 15935 ;;  prec            2   23[BANK0 ] int 
 15936 ;;  c               1   31[BANK0 ] char 
 15937 ;;  ap              1   29[BANK0 ] PTR void [1]
 15938 ;;		 -> ?_sprintf(2), 
 15939 ;;  flag            1   22[BANK0 ] unsigned char 
 15940 ;; Return value:  Size  Location     Type
 15941 ;;                  2   10[BANK0 ] int 
 15942 ;; Registers used:
 15943 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15944 ;; Tracked objects:
 15945 ;;		On entry : 0/0
 15946 ;;		On exit  : 0/0
 15947 ;;		Unchanged: 0/0
 15948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15949 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15950 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15951 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15952 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15953 ;;Total ram usage:       22 bytes
 15954 ;; Hardware stack levels used:    1
 15955 ;; Hardware stack levels required when called:    1
 15956 ;; This function calls:
 15957 ;;		___llmod
 15958 ;;		i1___lldiv
 15959 ;; This function is called by:
 15960 ;;		_SetBaud
 15961 ;;		_Process_PS2_ScanCode
 15962 ;; This function uses a non-reentrant model
 15963 ;;
 15964                           
 15965                           
 15966                           ;psect for function _sprintf
 15967  1707                     _sprintf:	
 15968                           
 15969                           ;incstack = 0
 15970                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15971                           ;sprintf@sp stored from wreg
 15972  1707  0020               	movlb	0	; select bank0
 15973  1708  00BE               	movwf	sprintf@sp
 15974                           
 15975                           ;doprnt.c: 494: va_list ap;
 15976                           ;doprnt.c: 499: signed char c;
 15977                           ;doprnt.c: 504: int prec;
 15978                           ;doprnt.c: 508: unsigned char flag;
 15979                           ;doprnt.c: 527: union {
 15980                           ;doprnt.c: 528: unsigned long _val;
 15981                           ;doprnt.c: 529: struct {
 15982                           ;doprnt.c: 530: const char * _cp;
 15983                           ;doprnt.c: 531: unsigned _len;
 15984                           ;doprnt.c: 532: } _str;
 15985                           ;doprnt.c: 533: } _val;
 15986                           ;doprnt.c: 542: *ap = __va_start();
 15987  1709  302C               	movlw	(?_sprintf+2)& (0+255)
 15988  170A  00B0               	movwf	??_sprintf
 15989  170B  0830               	movf	??_sprintf,w
 15990  170C  00BD               	movwf	sprintf@ap
 15991  170D                     i1l4234:	
 15992                           ;doprnt.c: 545: while(c = *f++) {
 15993                           
 15994  170D  082B               	movf	sprintf@f+1,w
 15995  170E  00B1               	movwf	??_sprintf+1
 15996  170F  082A               	movf	sprintf@f,w
 15997  1710  00B0               	movwf	??_sprintf
 15998  1711  0AAA               	incf	sprintf@f,f
 15999  1712  1903               	skipnz
 16000  1713  0AAB               	incf	sprintf@f+1,f
 16001  1714  0830               	movf	??_sprintf,w
 16002  1715  0084               	movwf	4
 16003  1716  0831               	movf	??_sprintf+1,w
 16004  1717  0085               	movwf	5
 16005  1718  0800               	movf	0,w	;code access
 16006  1719  00B2               	movwf	??_sprintf+2
 16007  171A  0832               	movf	??_sprintf+2,w
 16008  171B  00BF               	movwf	sprintf@c
 16009  171C  08BF               	movf	sprintf@c,f
 16010  171D  1903               	btfsc	3,2
 16011  171E  2FFA               	goto	i1l4236
 16012                           
 16013                           ;doprnt.c: 547: if(c != '%')
 16014  171F  083F               	movf	sprintf@c,w
 16015  1720  3A25               	xorlw	37
 16016  1721  1903               	skipnz
 16017  1722  2F30               	goto	i1l4194
 16018                           
 16019                           ;doprnt.c: 549: {
 16020                           ;doprnt.c: 550: ((*sp++ = (c)));
 16021  1723  083F               	movf	sprintf@c,w
 16022  1724  00B0               	movwf	??_sprintf
 16023  1725  083E               	movf	sprintf@sp,w
 16024  1726  0086               	movwf	6
 16025  1727  3001               	movlw	1	; select bank2/3
 16026  1728  0087               	movwf	7
 16027  1729  0830               	movf	??_sprintf,w
 16028  172A  0081               	movwf	1
 16029  172B  3001               	movlw	1
 16030  172C  00B0               	movwf	??_sprintf
 16031  172D  0830               	movf	??_sprintf,w
 16032  172E  07BE               	addwf	sprintf@sp,f
 16033                           
 16034                           ;doprnt.c: 551: continue;
 16035  172F  2F0D               	goto	i1l4234
 16036  1730                     i1l4194:	
 16037                           
 16038                           ;doprnt.c: 552: }
 16039                           ;doprnt.c: 557: flag = 0;
 16040  1730  01B6               	clrf	sprintf@flag
 16041                           
 16042                           ;doprnt.c: 644: switch(c = *f++) {
 16043                           
 16044                           ;doprnt.c: 642: loop:
 16045  1731  2F39               	goto	i1l4200
 16046  1732                     i1l1046:	
 16047                           ;doprnt.c: 650: case 'l':
 16048                           
 16049                           ;doprnt.c: 647: goto alldone;
 16050                           
 16051                           ;doprnt.c: 646: case 0:
 16052                           
 16053                           
 16054                           ;doprnt.c: 652: flag |= 0x10;
 16055  1732  1636               	bsf	sprintf@flag,4
 16056                           
 16057                           ;doprnt.c: 653: goto loop;
 16058  1733  2F39               	goto	i1l4200
 16059  1734                     i1l4196:	
 16060                           ;doprnt.c: 826: case 'u':
 16061                           
 16062                           ;doprnt.c: 822: continue;
 16063                           
 16064                           ;doprnt.c: 811: default:
 16065                           
 16066                           
 16067                           ;doprnt.c: 827: flag |= 0xC0;
 16068  1734  30C0               	movlw	192
 16069  1735  00B0               	movwf	??_sprintf
 16070  1736  0830               	movf	??_sprintf,w
 16071  1737  04B6               	iorwf	sprintf@flag,f
 16072                           
 16073                           ;doprnt.c: 831: }
 16074                           
 16075                           ;doprnt.c: 828: break;
 16076  1738  2F50               	goto	i1l1049
 16077  1739                     i1l4200:	
 16078  1739  082B               	movf	sprintf@f+1,w
 16079  173A  00B1               	movwf	??_sprintf+1
 16080  173B  082A               	movf	sprintf@f,w
 16081  173C  00B0               	movwf	??_sprintf
 16082  173D  0AAA               	incf	sprintf@f,f
 16083  173E  1903               	skipnz
 16084  173F  0AAB               	incf	sprintf@f+1,f
 16085  1740  0830               	movf	??_sprintf,w
 16086  1741  0084               	movwf	4
 16087  1742  0831               	movf	??_sprintf+1,w
 16088  1743  0085               	movwf	5
 16089  1744  0800               	movf	0,w	;code access
 16090  1745  00BF               	movwf	sprintf@c
 16091                           
 16092                           ; Switch size 1, requested type "space"
 16093                           ; Number of cases is 3, Range of values is 0 to 117
 16094                           ; switch strategies available:
 16095                           ; Name         Instructions Cycles
 16096                           ; simple_byte           10     6 (average)
 16097                           ; direct_byte          242     6 (fixed)
 16098                           ; jumptable            260     6 (fixed)
 16099                           ;	Chosen strategy is simple_byte
 16100  1746  3A00               	xorlw	0	; case 0
 16101  1747  1903               	skipnz
 16102  1748  2FFA               	goto	i1l4236
 16103  1749  3A6C               	xorlw	108	; case 108
 16104  174A  1903               	skipnz
 16105  174B  2F32               	goto	i1l1046
 16106  174C  3A19               	xorlw	25	; case 117
 16107  174D  1903               	skipnz
 16108  174E  2F34               	goto	i1l4196
 16109  174F  2F0D               	goto	i1l4234
 16110  1750                     i1l1049:	
 16111                           
 16112                           ;doprnt.c: 1282: {
 16113                           ;doprnt.c: 1290: if(flag & 0x10)
 16114  1750  1E36               	btfss	sprintf@flag,4
 16115  1751  2F5F               	goto	i1l4206
 16116                           
 16117                           ;doprnt.c: 1291: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 16118  1752  083D               	movf	sprintf@ap,w
 16119  1753  0086               	movwf	6
 16120  1754  0187               	clrf	7
 16121  1755  3F40               	moviw [0]fsr1
 16122  1756  00B9               	movwf	sprintf@_val
 16123  1757  3F41               	moviw [1]fsr1
 16124  1758  00BA               	movwf	sprintf@_val+1
 16125  1759  3F42               	moviw [2]fsr1
 16126  175A  00BB               	movwf	sprintf@_val+2
 16127  175B  3F43               	moviw [3]fsr1
 16128  175C  00BC               	movwf	sprintf@_val+3
 16129  175D  3004               	movlw	4
 16130  175E  2F6D               	goto	L24
 16131  175F                     i1l4206:	
 16132                           
 16133                           ;doprnt.c: 1292: else
 16134                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 16135  175F  083D               	movf	sprintf@ap,w
 16136  1760  0086               	movwf	6
 16137  1761  0187               	clrf	7
 16138  1762  3F40               	moviw [0]fsr1
 16139  1763  00B0               	movwf	??_sprintf
 16140  1764  3F41               	moviw [1]fsr1
 16141  1765  00B1               	movwf	??_sprintf+1
 16142  1766  0830               	movf	??_sprintf,w
 16143  1767  00B9               	movwf	sprintf@_val
 16144  1768  0831               	movf	??_sprintf+1,w
 16145  1769  00BA               	movwf	sprintf@_val+1
 16146  176A  01BB               	clrf	sprintf@_val+2
 16147  176B  01BC               	clrf	sprintf@_val+3
 16148  176C  3002               	movlw	2
 16149  176D                     L24:	
 16150  176D  00B0               	movwf	??_sprintf
 16151  176E  0830               	movf	??_sprintf,w
 16152  176F  07BD               	addwf	sprintf@ap,f
 16153                           
 16154                           ;doprnt.c: 1296: }
 16155                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 16156  1770  01BF               	clrf	sprintf@c
 16157  1771  0ABF               	incf	sprintf@c,f
 16158  1772  083F               	movf	sprintf@c,w
 16159  1773  3A0A               	xorlw	10
 16160  1774  1903               	btfsc	3,2
 16161  1775  2FA3               	goto	i1l4224
 16162  1776                     i1l4216:	
 16163                           
 16164                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
 16165  1776  083F               	movf	sprintf@c,w
 16166  1777  00B0               	movwf	??_sprintf
 16167  1778  01B1               	clrf	??_sprintf+1
 16168  1779  35B0               	lslf	??_sprintf,f
 16169  177A  0DB1               	rlf	??_sprintf+1,f
 16170  177B  35B0               	lslf	??_sprintf,f
 16171  177C  0DB1               	rlf	??_sprintf+1,f
 16172  177D  30D3               	movlw	low (_dpowers| (0+32768))
 16173  177E  0730               	addwf	??_sprintf,w
 16174  177F  0084               	movwf	4
 16175  1780  3088               	movlw	high (_dpowers| (0+32768))
 16176  1781  3D31               	addwfc	??_sprintf+1,w
 16177  1782  0085               	movwf	5
 16178  1783  3F00               	moviw [0]fsr0
 16179  1784  00B2               	movwf	??_sprintf+2
 16180  1785  3F01               	moviw [1]fsr0
 16181  1786  00B3               	movwf	??_sprintf+3
 16182  1787  3F02               	moviw [2]fsr0
 16183  1788  00B4               	movwf	??_sprintf+4
 16184  1789  3F03               	moviw [3]fsr0
 16185  178A  00B5               	movwf	??_sprintf+5
 16186  178B  0835               	movf	??_sprintf+5,w
 16187  178C  023C               	subwf	sprintf@_val+3,w
 16188  178D  1D03               	skipz
 16189  178E  2F99               	goto	u454_25
 16190  178F  0834               	movf	??_sprintf+4,w
 16191  1790  023B               	subwf	sprintf@_val+2,w
 16192  1791  1D03               	skipz
 16193  1792  2F99               	goto	u454_25
 16194  1793  0833               	movf	??_sprintf+3,w
 16195  1794  023A               	subwf	sprintf@_val+1,w
 16196  1795  1D03               	skipz
 16197  1796  2F99               	goto	u454_25
 16198  1797  0832               	movf	??_sprintf+2,w
 16199  1798  0239               	subwf	sprintf@_val,w
 16200  1799                     u454_25:	
 16201  1799  1C03               	btfss	3,0
 16202  179A  2FA3               	goto	i1l4224
 16203                           
 16204                           ;doprnt.c: 1316: break;
 16205  179B  3001               	movlw	1
 16206  179C  00B0               	movwf	??_sprintf
 16207  179D  0830               	movf	??_sprintf,w
 16208  179E  07BF               	addwf	sprintf@c,f
 16209  179F  083F               	movf	sprintf@c,w
 16210  17A0  3A0A               	xorlw	10
 16211  17A1  1D03               	skipz
 16212  17A2  2F76               	goto	i1l4216
 16213  17A3                     i1l4224:	
 16214                           
 16215                           ;doprnt.c: 1431: {
 16216                           ;doprnt.c: 1478: }
 16217                           ;doprnt.c: 1481: prec = c;
 16218  17A3  083F               	movf	sprintf@c,w
 16219  17A4  00B7               	movwf	sprintf@prec
 16220  17A5  01B8               	clrf	sprintf@prec+1
 16221  17A6  1BB7               	btfsc	sprintf@prec,7
 16222  17A7  03B8               	decf	sprintf@prec+1,f
 16223  17A8                     i1l4232:	
 16224                           ;doprnt.c: 1483: while(prec--) {
 16225                           
 16226  17A8  30FF               	movlw	255
 16227  17A9  07B7               	addwf	sprintf@prec,f
 16228  17AA  30FF               	movlw	255
 16229  17AB  3DB8               	addwfc	sprintf@prec+1,f
 16230  17AC  30FF               	movlw	255
 16231  17AD  0638               	xorwf	sprintf@prec+1,w
 16232  17AE  1D03               	skipz
 16233  17AF  2FB2               	goto	u456_25
 16234  17B0  30FF               	movlw	255
 16235  17B1  0637               	xorwf	sprintf@prec,w
 16236  17B2                     u456_25:	
 16237  17B2  1903               	btfsc	3,2
 16238  17B3  2F0D               	goto	i1l4234
 16239                           
 16240                           ;doprnt.c: 1487: {
 16241                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
 16242  17B4  3000               	movlw	0
 16243  17B5  00A3               	movwf	___llmod@divisor+3
 16244  17B6  3000               	movlw	0
 16245  17B7  00A2               	movwf	___llmod@divisor+2
 16246  17B8  3000               	movlw	0
 16247  17B9  00A1               	movwf	___llmod@divisor+1
 16248  17BA  300A               	movlw	10
 16249  17BB  00A0               	movwf	___llmod@divisor
 16250  17BC  0838               	movf	sprintf@prec+1,w
 16251  17BD  0085               	movwf	5
 16252  17BE  0837               	movf	sprintf@prec,w
 16253  17BF  0084               	movwf	4
 16254  17C0  3584               	lslf	4,f
 16255  17C1  0D85               	rlf	5,f
 16256  17C2  3584               	lslf	4,f
 16257  17C3  0D85               	rlf	5,f
 16258  17C4  30D3               	movlw	low (_dpowers| (0+32768))
 16259  17C5  0784               	addwf	4,f
 16260  17C6  3088               	movlw	high (_dpowers| (0+32768))
 16261  17C7  3D85               	addwfc	5,f
 16262  17C8  3F00               	moviw [0]fsr0
 16263  17C9  00F0               	movwf	i1___lldiv@divisor
 16264  17CA  3F01               	moviw [1]fsr0
 16265  17CB  00F1               	movwf	i1___lldiv@divisor+1
 16266  17CC  3F02               	moviw [2]fsr0
 16267  17CD  00F2               	movwf	i1___lldiv@divisor+2
 16268  17CE  3F03               	moviw [3]fsr0
 16269  17CF  00F3               	movwf	i1___lldiv@divisor+3
 16270  17D0  083C               	movf	sprintf@_val+3,w
 16271  17D1  00F7               	movwf	i1___lldiv@dividend+3
 16272  17D2  083B               	movf	sprintf@_val+2,w
 16273  17D3  00F6               	movwf	i1___lldiv@dividend+2
 16274  17D4  083A               	movf	sprintf@_val+1,w
 16275  17D5  00F5               	movwf	i1___lldiv@dividend+1
 16276  17D6  0839               	movf	sprintf@_val,w
 16277  17D7  00F4               	movwf	i1___lldiv@dividend
 16278  17D8  319F  275B  3197   	fcall	i1___lldiv
 16279  17DB  0873               	movf	?i1___lldiv+3,w
 16280  17DC  0020               	movlb	0	; select bank0
 16281  17DD  00A7               	movwf	___llmod@dividend+3
 16282  17DE  0872               	movf	?i1___lldiv+2,w
 16283  17DF  00A6               	movwf	___llmod@dividend+2
 16284  17E0  0871               	movf	?i1___lldiv+1,w
 16285  17E1  00A5               	movwf	___llmod@dividend+1
 16286  17E2  0870               	movf	?i1___lldiv,w
 16287  17E3  00A4               	movwf	___llmod@dividend
 16288  17E4  319D  2588  3197   	fcall	___llmod
 16289  17E7  0020               	movlb	0	; select bank0
 16290  17E8  0820               	movf	?___llmod,w
 16291  17E9  3E30               	addlw	48
 16292  17EA  00B0               	movwf	??_sprintf
 16293  17EB  0830               	movf	??_sprintf,w
 16294  17EC  00BF               	movwf	sprintf@c
 16295                           
 16296                           ;doprnt.c: 1532: }
 16297                           ;doprnt.c: 1533: ((*sp++ = (c)));
 16298  17ED  083F               	movf	sprintf@c,w
 16299  17EE  00B0               	movwf	??_sprintf
 16300  17EF  083E               	movf	sprintf@sp,w
 16301  17F0  0086               	movwf	6
 16302  17F1  3001               	movlw	1	; select bank2/3
 16303  17F2  0087               	movwf	7
 16304  17F3  0830               	movf	??_sprintf,w
 16305  17F4  0081               	movwf	1
 16306  17F5  3001               	movlw	1
 16307  17F6  00B0               	movwf	??_sprintf
 16308  17F7  0830               	movf	??_sprintf,w
 16309  17F8  07BE               	addwf	sprintf@sp,f
 16310  17F9  2FA8               	goto	i1l4232
 16311  17FA                     i1l4236:	
 16312                           ;doprnt.c: 1534: }
 16313                           ;doprnt.c: 1542: }
 16314                           ;doprnt.c: 1544: alldone:
 16315                           
 16316                           
 16317                           ;doprnt.c: 1547: *sp = 0;
 16318  17FA  083E               	movf	sprintf@sp,w
 16319  17FB  0086               	movwf	6
 16320  17FC  3001               	movlw	1	; select bank2/3
 16321  17FD  0087               	movwf	7
 16322  17FE  0181               	clrf	1
 16323  17FF  0008               	return
 16324  1800                     __end_of_sprintf:	
 16325                           ;doprnt.c: 1549: return 0;
 16326                           ;	Return value of _sprintf is never used
 16327                           
 16328                           
 16329                           	psect	text62
 16330  1F5B                     __ptext62:	
 16331 ;; *************** function i1___lldiv *****************
 16332 ;; Defined at:
 16333 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
 16334 ;; Parameters:    Size  Location     Type
 16335 ;;  divisor         4    0[COMMON] unsigned long 
 16336 ;;  dividend        4    4[COMMON] unsigned long 
 16337 ;; Auto vars:     Size  Location     Type
 16338 ;;  __lldiv         4    9[COMMON] unsigned long 
 16339 ;;  __lldiv         1   13[COMMON] unsigned char 
 16340 ;; Return value:  Size  Location     Type
 16341 ;;                  4    0[COMMON] unsigned long 
 16342 ;; Registers used:
 16343 ;;		wreg, status,2, status,0
 16344 ;; Tracked objects:
 16345 ;;		On entry : 0/0
 16346 ;;		On exit  : 0/0
 16347 ;;		Unchanged: 0/0
 16348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16349 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16350 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16351 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16352 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16353 ;;Total ram usage:       14 bytes
 16354 ;; Hardware stack levels used:    1
 16355 ;; This function calls:
 16356 ;;		Nothing
 16357 ;; This function is called by:
 16358 ;;		_sprintf
 16359 ;;		i1_InitUART
 16360 ;; This function uses a non-reentrant model
 16361 ;;
 16362                           
 16363                           
 16364                           ;psect for function i1___lldiv
 16365  1F5B                     i1___lldiv:	
 16366                           
 16367                           ;incstack = 0
 16368                           ; Regs used in i1___lldiv: [wreg+status,2+status,0]
 16369  1F5B  3000               	movlw	0
 16370  1F5C  00FC               	movwf	i1___lldiv@quotient+3
 16371  1F5D  3000               	movlw	0
 16372  1F5E  00FB               	movwf	i1___lldiv@quotient+2
 16373  1F5F  3000               	movlw	0
 16374  1F60  00FA               	movwf	i1___lldiv@quotient+1
 16375  1F61  3000               	movlw	0
 16376  1F62  00F9               	movwf	i1___lldiv@quotient
 16377  1F63  0873               	movf	i1___lldiv@divisor+3,w
 16378  1F64  0472               	iorwf	i1___lldiv@divisor+2,w
 16379  1F65  0471               	iorwf	i1___lldiv@divisor+1,w
 16380  1F66  0470               	iorwf	i1___lldiv@divisor,w
 16381  1F67  1903               	skipnz
 16382  1F68  2FA4               	goto	i1l4092
 16383  1F69  01FD               	clrf	i1___lldiv@counter
 16384  1F6A  0AFD               	incf	i1___lldiv@counter,f
 16385  1F6B                     i1l4078:	
 16386  1F6B  1BF3               	btfsc	i1___lldiv@divisor+3,7
 16387  1F6C  2F79               	goto	i1l4080
 16388  1F6D  3001               	movlw	1
 16389  1F6E                     u431_25:	
 16390  1F6E  35F0               	lslf	i1___lldiv@divisor,f
 16391  1F6F  0DF1               	rlf	i1___lldiv@divisor+1,f
 16392  1F70  0DF2               	rlf	i1___lldiv@divisor+2,f
 16393  1F71  0DF3               	rlf	i1___lldiv@divisor+3,f
 16394  1F72  0B89               	decfsz	9,f
 16395  1F73  2F6E               	goto	u431_25
 16396  1F74  3001               	movlw	1
 16397  1F75  00F8               	movwf	??i1___lldiv
 16398  1F76  0878               	movf	??i1___lldiv,w
 16399  1F77  07FD               	addwf	i1___lldiv@counter,f
 16400  1F78  2F6B               	goto	i1l4078
 16401  1F79                     i1l4080:	
 16402  1F79  3001               	movlw	1
 16403  1F7A                     u433_25:	
 16404  1F7A  35F9               	lslf	i1___lldiv@quotient,f
 16405  1F7B  0DFA               	rlf	i1___lldiv@quotient+1,f
 16406  1F7C  0DFB               	rlf	i1___lldiv@quotient+2,f
 16407  1F7D  0DFC               	rlf	i1___lldiv@quotient+3,f
 16408  1F7E  0B89               	decfsz	9,f
 16409  1F7F  2F7A               	goto	u433_25
 16410  1F80  0873               	movf	i1___lldiv@divisor+3,w
 16411  1F81  0277               	subwf	i1___lldiv@dividend+3,w
 16412  1F82  1D03               	skipz
 16413  1F83  2F8E               	goto	u434_25
 16414  1F84  0872               	movf	i1___lldiv@divisor+2,w
 16415  1F85  0276               	subwf	i1___lldiv@dividend+2,w
 16416  1F86  1D03               	skipz
 16417  1F87  2F8E               	goto	u434_25
 16418  1F88  0871               	movf	i1___lldiv@divisor+1,w
 16419  1F89  0275               	subwf	i1___lldiv@dividend+1,w
 16420  1F8A  1D03               	skipz
 16421  1F8B  2F8E               	goto	u434_25
 16422  1F8C  0870               	movf	i1___lldiv@divisor,w
 16423  1F8D  0274               	subwf	i1___lldiv@dividend,w
 16424  1F8E                     u434_25:	
 16425  1F8E  1C03               	skipc
 16426  1F8F  2F99               	goto	i1l4088
 16427  1F90  0870               	movf	i1___lldiv@divisor,w
 16428  1F91  02F4               	subwf	i1___lldiv@dividend,f
 16429  1F92  0871               	movf	i1___lldiv@divisor+1,w
 16430  1F93  3BF5               	subwfb	i1___lldiv@dividend+1,f
 16431  1F94  0872               	movf	i1___lldiv@divisor+2,w
 16432  1F95  3BF6               	subwfb	i1___lldiv@dividend+2,f
 16433  1F96  0873               	movf	i1___lldiv@divisor+3,w
 16434  1F97  3BF7               	subwfb	i1___lldiv@dividend+3,f
 16435  1F98  1479               	bsf	i1___lldiv@quotient,0
 16436  1F99                     i1l4088:	
 16437  1F99  3001               	movlw	1
 16438  1F9A                     u435_25:	
 16439  1F9A  36F3               	lsrf	i1___lldiv@divisor+3,f
 16440  1F9B  0CF2               	rrf	i1___lldiv@divisor+2,f
 16441  1F9C  0CF1               	rrf	i1___lldiv@divisor+1,f
 16442  1F9D  0CF0               	rrf	i1___lldiv@divisor,f
 16443  1F9E  0B89               	decfsz	9,f
 16444  1F9F  2F9A               	goto	u435_25
 16445  1FA0  3001               	movlw	1
 16446  1FA1  02FD               	subwf	i1___lldiv@counter,f
 16447  1FA2  1D03               	btfss	3,2
 16448  1FA3  2F79               	goto	i1l4080
 16449  1FA4                     i1l4092:	
 16450  1FA4  087C               	movf	i1___lldiv@quotient+3,w
 16451  1FA5  00F3               	movwf	?i1___lldiv+3
 16452  1FA6  087B               	movf	i1___lldiv@quotient+2,w
 16453  1FA7  00F2               	movwf	?i1___lldiv+2
 16454  1FA8  087A               	movf	i1___lldiv@quotient+1,w
 16455  1FA9  00F1               	movwf	?i1___lldiv+1
 16456  1FAA  0879               	movf	i1___lldiv@quotient,w
 16457  1FAB  00F0               	movwf	?i1___lldiv
 16458  1FAC  0008               	return
 16459  1FAD                     __end_ofi1___lldiv:	
 16460                           
 16461                           	psect	text63
 16462  1D88                     __ptext63:	
 16463 ;; *************** function ___llmod *****************
 16464 ;; Defined at:
 16465 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\llmod.c"
 16466 ;; Parameters:    Size  Location     Type
 16467 ;;  divisor         4    0[BANK0 ] unsigned long 
 16468 ;;  dividend        4    4[BANK0 ] unsigned long 
 16469 ;; Auto vars:     Size  Location     Type
 16470 ;;  counter         1    9[BANK0 ] unsigned char 
 16471 ;; Return value:  Size  Location     Type
 16472 ;;                  4    0[BANK0 ] unsigned long 
 16473 ;; Registers used:
 16474 ;;		wreg, status,2, status,0
 16475 ;; Tracked objects:
 16476 ;;		On entry : 0/0
 16477 ;;		On exit  : 0/0
 16478 ;;		Unchanged: 0/0
 16479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16480 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16481 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16482 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16483 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16484 ;;Total ram usage:       10 bytes
 16485 ;; Hardware stack levels used:    1
 16486 ;; This function calls:
 16487 ;;		Nothing
 16488 ;; This function is called by:
 16489 ;;		_sprintf
 16490 ;; This function uses a non-reentrant model
 16491 ;;
 16492                           
 16493                           
 16494                           ;psect for function ___llmod
 16495  1D88                     ___llmod:	
 16496                           
 16497                           ;incstack = 0
 16498                           ; Regs used in ___llmod: [wreg+status,2+status,0]
 16499  1D88  0020               	movlb	0	; select bank0
 16500  1D89  0823               	movf	___llmod@divisor+3,w
 16501  1D8A  0422               	iorwf	___llmod@divisor+2,w
 16502  1D8B  0421               	iorwf	___llmod@divisor+1,w
 16503  1D8C  0420               	iorwf	___llmod@divisor,w
 16504  1D8D  1903               	skipnz
 16505  1D8E  2DC2               	goto	i1l3986
 16506  1D8F  01A9               	clrf	___llmod@counter
 16507  1D90  0AA9               	incf	___llmod@counter,f
 16508  1D91                     i1l3976:	
 16509  1D91  1BA3               	btfsc	___llmod@divisor+3,7
 16510  1D92  2D9F               	goto	i1l3978
 16511  1D93  3001               	movlw	1
 16512  1D94                     u413_25:	
 16513  1D94  35A0               	lslf	___llmod@divisor,f
 16514  1D95  0DA1               	rlf	___llmod@divisor+1,f
 16515  1D96  0DA2               	rlf	___llmod@divisor+2,f
 16516  1D97  0DA3               	rlf	___llmod@divisor+3,f
 16517  1D98  0B89               	decfsz	9,f
 16518  1D99  2D94               	goto	u413_25
 16519  1D9A  3001               	movlw	1
 16520  1D9B  00A8               	movwf	??___llmod
 16521  1D9C  0828               	movf	??___llmod,w
 16522  1D9D  07A9               	addwf	___llmod@counter,f
 16523  1D9E  2D91               	goto	i1l3976
 16524  1D9F                     i1l3978:	
 16525  1D9F  0823               	movf	___llmod@divisor+3,w
 16526  1DA0  0227               	subwf	___llmod@dividend+3,w
 16527  1DA1  1D03               	skipz
 16528  1DA2  2DAD               	goto	u415_25
 16529  1DA3  0822               	movf	___llmod@divisor+2,w
 16530  1DA4  0226               	subwf	___llmod@dividend+2,w
 16531  1DA5  1D03               	skipz
 16532  1DA6  2DAD               	goto	u415_25
 16533  1DA7  0821               	movf	___llmod@divisor+1,w
 16534  1DA8  0225               	subwf	___llmod@dividend+1,w
 16535  1DA9  1D03               	skipz
 16536  1DAA  2DAD               	goto	u415_25
 16537  1DAB  0820               	movf	___llmod@divisor,w
 16538  1DAC  0224               	subwf	___llmod@dividend,w
 16539  1DAD                     u415_25:	
 16540  1DAD  1C03               	skipc
 16541  1DAE  2DB7               	goto	i1l3982
 16542  1DAF  0820               	movf	___llmod@divisor,w
 16543  1DB0  02A4               	subwf	___llmod@dividend,f
 16544  1DB1  0821               	movf	___llmod@divisor+1,w
 16545  1DB2  3BA5               	subwfb	___llmod@dividend+1,f
 16546  1DB3  0822               	movf	___llmod@divisor+2,w
 16547  1DB4  3BA6               	subwfb	___llmod@dividend+2,f
 16548  1DB5  0823               	movf	___llmod@divisor+3,w
 16549  1DB6  3BA7               	subwfb	___llmod@dividend+3,f
 16550  1DB7                     i1l3982:	
 16551  1DB7  3001               	movlw	1
 16552  1DB8                     u416_25:	
 16553  1DB8  36A3               	lsrf	___llmod@divisor+3,f
 16554  1DB9  0CA2               	rrf	___llmod@divisor+2,f
 16555  1DBA  0CA1               	rrf	___llmod@divisor+1,f
 16556  1DBB  0CA0               	rrf	___llmod@divisor,f
 16557  1DBC  0B89               	decfsz	9,f
 16558  1DBD  2DB8               	goto	u416_25
 16559  1DBE  3001               	movlw	1
 16560  1DBF  02A9               	subwf	___llmod@counter,f
 16561  1DC0  1D03               	btfss	3,2
 16562  1DC1  2D9F               	goto	i1l3978
 16563  1DC2                     i1l3986:	
 16564  1DC2  0827               	movf	___llmod@dividend+3,w
 16565  1DC3  00A3               	movwf	?___llmod+3
 16566  1DC4  0826               	movf	___llmod@dividend+2,w
 16567  1DC5  00A2               	movwf	?___llmod+2
 16568  1DC6  0825               	movf	___llmod@dividend+1,w
 16569  1DC7  00A1               	movwf	?___llmod+1
 16570  1DC8  0824               	movf	___llmod@dividend,w
 16571  1DC9  00A0               	movwf	?___llmod
 16572  1DCA  0008               	return
 16573  1DCB                     __end_of___llmod:	
 16574                           
 16575                           	psect	text64
 16576  1188                     __ptext64:	
 16577 ;; *************** function _WriteBaud *****************
 16578 ;; Defined at:
 16579 ;;		line 171 in file "FLASH.c"
 16580 ;; Parameters:    Size  Location     Type
 16581 ;;  row             2    0[BANK1 ] unsigned int 
 16582 ;;  Baud            4    2[BANK1 ] unsigned long 
 16583 ;;  Parity          1    6[BANK1 ] unsigned char 
 16584 ;; Auto vars:     Size  Location     Type
 16585 ;;  temp            4   74[BANK0 ] unsigned long 
 16586 ;; Return value:  Size  Location     Type
 16587 ;;		None               void
 16588 ;; Registers used:
 16589 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16590 ;; Tracked objects:
 16591 ;;		On entry : 0/0
 16592 ;;		On exit  : 0/0
 16593 ;;		Unchanged: 0/0
 16594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16595 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 16596 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16597 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
 16598 ;;      Totals:         0       4      15       0       0       0       0       0       0       0       0       0       
      +0       0
 16599 ;;Total ram usage:       19 bytes
 16600 ;; Hardware stack levels used:    1
 16601 ;; Hardware stack levels required when called:    3
 16602 ;; This function calls:
 16603 ;;		_WriteFlash_Sequential
 16604 ;; This function is called by:
 16605 ;;		_SetBaud
 16606 ;; This function uses a non-reentrant model
 16607 ;;
 16608                           
 16609                           
 16610                           ;psect for function _WriteBaud
 16611  1188                     _WriteBaud:	
 16612                           
 16613                           ;FLASH.c: 173: unsigned long temp;
 16614                           ;FLASH.c: 174: temp = (Baud & 0x000FFFFF) + (((unsigned long) Parity & 0x7) << 20);
 16615                           
 16616                           ;incstack = 0
 16617                           ; Regs used in _WriteBaud: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16618  1188  0021               	movlb	1	; select bank1
 16619  1189  0826               	movf	WriteBaud@Parity^(0+128),w
 16620  118A  3907               	andlw	7
 16621  118B  00A7               	movwf	??_WriteBaud^(0+128)
 16622  118C  01A8               	clrf	(??_WriteBaud^(0+128)+1)
 16623  118D  01A9               	clrf	(??_WriteBaud^(0+128)+2)
 16624  118E  01AA               	clrf	(??_WriteBaud^(0+128)+3)
 16625  118F  3014               	movlw	20
 16626  1190                     u449_25:	
 16627  1190  35A7               	lslf	??_WriteBaud^(0+128),f
 16628  1191  0DA8               	rlf	(??_WriteBaud^(0+128)+1),f
 16629  1192  0DA9               	rlf	(??_WriteBaud^(0+128)+2),f
 16630  1193  0DAA               	rlf	(??_WriteBaud^(0+128)+3),f
 16631  1194  0B89               	decfsz	9,f
 16632  1195  2990               	goto	u449_25
 16633  1196  30FF               	movlw	255
 16634  1197  0522               	andwf	WriteBaud@Baud^(0+128),w
 16635  1198  00AB               	movwf	(??_WriteBaud+4)^(0+128)
 16636  1199  30FF               	movlw	255
 16637  119A  0523               	andwf	(WriteBaud@Baud+1)^(0+128),w
 16638  119B  00AC               	movwf	((??_WriteBaud+4)^(0+128)+1)
 16639  119C  300F               	movlw	15
 16640  119D  0524               	andwf	(WriteBaud@Baud+2)^(0+128),w
 16641  119E  00AD               	movwf	((??_WriteBaud+4)^(0+128)+2)
 16642  119F  3000               	movlw	0
 16643  11A0  0525               	andwf	(WriteBaud@Baud+3)^(0+128),w
 16644  11A1  00AE               	movwf	((??_WriteBaud+4)^(0+128)+3)
 16645  11A2  082B               	movf	(??_WriteBaud+4)^(0+128),w
 16646  11A3  07A7               	addwf	??_WriteBaud^(0+128),f
 16647  11A4  082C               	movf	(??_WriteBaud+5)^(0+128),w
 16648  11A5  3DA8               	addwfc	(??_WriteBaud^(0+128)+1),f
 16649  11A6  082D               	movf	(??_WriteBaud+6)^(0+128),w
 16650  11A7  3DA9               	addwfc	(??_WriteBaud^(0+128)+2),f
 16651  11A8  082E               	movf	(??_WriteBaud+7)^(0+128),w
 16652  11A9  3DAA               	addwfc	(??_WriteBaud^(0+128)+3),f
 16653  11AA  082A               	movf	(??_WriteBaud+3)^(0+128),w
 16654  11AB  0020               	movlb	0	; select bank0
 16655  11AC  00ED               	movwf	WriteBaud@temp+3
 16656  11AD  0021               	movlb	1	; select bank1
 16657  11AE  0829               	movf	(??_WriteBaud+2)^(0+128),w
 16658  11AF  0020               	movlb	0	; select bank0
 16659  11B0  00EC               	movwf	WriteBaud@temp+2
 16660  11B1  0021               	movlb	1	; select bank1
 16661  11B2  0828               	movf	(??_WriteBaud+1)^(0+128),w
 16662  11B3  0020               	movlb	0	; select bank0
 16663  11B4  00EB               	movwf	WriteBaud@temp+1
 16664  11B5  0021               	movlb	1	; select bank1
 16665  11B6  0827               	movf	??_WriteBaud^(0+128),w
 16666  11B7  0020               	movlb	0	; select bank0
 16667  11B8  00EA               	movwf	WriteBaud@temp
 16668                           
 16669                           ;FLASH.c: 175: MEM[1] = (unsigned int) (temp & 0x0003FFF);
 16670  11B9  30FF               	movlw	255
 16671  11BA  056A               	andwf	WriteBaud@temp,w
 16672  11BB  0021               	movlb	1	; select bank1
 16673  11BC  00E3               	movwf	(_MEM^(0+128)+2)
 16674  11BD  303F               	movlw	63
 16675  11BE  0020               	movlb	0	; select bank0
 16676  11BF  056B               	andwf	WriteBaud@temp+1,w
 16677  11C0  0021               	movlb	1	; select bank1
 16678  11C1  00E4               	movwf	((_MEM+1)^(0+128)+2)
 16679                           
 16680                           ;FLASH.c: 176: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
 16681  11C2  0020               	movlb	0	; select bank0
 16682  11C3  086A               	movf	WriteBaud@temp,w
 16683  11C4  0021               	movlb	1	; select bank1
 16684  11C5  00A7               	movwf	??_WriteBaud^(0+128)
 16685  11C6  0020               	movlb	0	; select bank0
 16686  11C7  086B               	movf	WriteBaud@temp+1,w
 16687  11C8  0021               	movlb	1	; select bank1
 16688  11C9  00A8               	movwf	(??_WriteBaud^(0+128)+1)
 16689  11CA  0020               	movlb	0	; select bank0
 16690  11CB  086C               	movf	WriteBaud@temp+2,w
 16691  11CC  0021               	movlb	1	; select bank1
 16692  11CD  00A9               	movwf	(??_WriteBaud^(0+128)+2)
 16693  11CE  0020               	movlb	0	; select bank0
 16694  11CF  086D               	movf	WriteBaud@temp+3,w
 16695  11D0  0021               	movlb	1	; select bank1
 16696  11D1  00AA               	movwf	(??_WriteBaud^(0+128)+3)
 16697  11D2  300E               	movlw	14
 16698  11D3                     u450_25:	
 16699  11D3  36AA               	lsrf	(??_WriteBaud^(0+128)+3),f
 16700  11D4  0CA9               	rrf	(??_WriteBaud^(0+128)+2),f
 16701  11D5  0CA8               	rrf	(??_WriteBaud^(0+128)+1),f
 16702  11D6  0CA7               	rrf	??_WriteBaud^(0+128),f
 16703  11D7  0B89               	decfsz	9,f
 16704  11D8  29D3               	goto	u450_25
 16705  11D9  30FF               	movlw	255
 16706  11DA  0527               	andwf	??_WriteBaud^(0+128),w
 16707  11DB  00E1               	movwf	_MEM^(0+128)
 16708  11DC  303F               	movlw	63
 16709  11DD  0528               	andwf	(??_WriteBaud+1)^(0+128),w
 16710  11DE  00E2               	movwf	(_MEM+1)^(0+128)
 16711                           
 16712                           ;FLASH.c: 177: WriteFlash_Sequential(row, MEM, 2);
 16713  11DF  0821               	movf	(WriteBaud@row+1)^(0+128),w
 16714  11E0  01FB               	clrf	WriteFlash_Sequential@row+1
 16715  11E1  07FB               	addwf	WriteFlash_Sequential@row+1,f
 16716  11E2  0820               	movf	WriteBaud@row^(0+128),w
 16717  11E3  01FA               	clrf	WriteFlash_Sequential@row
 16718  11E4  07FA               	addwf	WriteFlash_Sequential@row,f
 16719  11E5  30E1               	movlw	_MEM& (0+255)
 16720  11E6  00A7               	movwf	??_WriteBaud^(0+128)
 16721  11E7  0827               	movf	??_WriteBaud^(0+128),w
 16722  11E8  00FC               	movwf	WriteFlash_Sequential@buffer
 16723  11E9  3002               	movlw	2
 16724  11EA  00A8               	movwf	(??_WriteBaud+1)^(0+128)
 16725  11EB  0828               	movf	(??_WriteBaud+1)^(0+128),w
 16726  11EC  00FD               	movwf	WriteFlash_Sequential@amount
 16727  11ED  3193  2371         	fcall	_WriteFlash_Sequential
 16728  11EF  0008               	return
 16729  11F0                     __end_of_WriteBaud:	
 16730                           
 16731                           	psect	text65
 16732  1371                     __ptext65:	
 16733 ;; *************** function _WriteFlash_Sequential *****************
 16734 ;; Defined at:
 16735 ;;		line 112 in file "FLASH.c"
 16736 ;; Parameters:    Size  Location     Type
 16737 ;;  row             2   10[COMMON] unsigned int 
 16738 ;;  buffer          1   12[COMMON] PTR unsigned int 
 16739 ;;		 -> MEM(4), 
 16740 ;;  amount          1   13[COMMON] unsigned char 
 16741 ;; Auto vars:     Size  Location     Type
 16742 ;;  TempBufL       32   35[BANK0 ] unsigned char [32]
 16743 ;;  TempBufH       32    3[BANK0 ] unsigned char [32]
 16744 ;;  temp            2   70[BANK0 ] unsigned int 
 16745 ;;  i               1   73[BANK0 ] unsigned char 
 16746 ;;  spaces          1   72[BANK0 ] unsigned char 
 16747 ;;  amountTemp      1   69[BANK0 ] unsigned char 
 16748 ;;  tempL           1   68[BANK0 ] unsigned char 
 16749 ;;  tempH           1   67[BANK0 ] unsigned char 
 16750 ;; Return value:  Size  Location     Type
 16751 ;;		None               void
 16752 ;; Registers used:
 16753 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16754 ;; Tracked objects:
 16755 ;;		On entry : 0/0
 16756 ;;		On exit  : 0/0
 16757 ;;		Unchanged: 0/0
 16758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16759 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16760 ;;      Locals:         0      71       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16761 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16762 ;;      Totals:         4      74       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16763 ;;Total ram usage:       78 bytes
 16764 ;; Hardware stack levels used:    1
 16765 ;; Hardware stack levels required when called:    2
 16766 ;; This function calls:
 16767 ;;		_BlockErase
 16768 ;;		_UNLOCK
 16769 ;;		i1_ReadFlash_2Byte
 16770 ;;		i1_delayUS
 16771 ;; This function is called by:
 16772 ;;		_WriteBaud
 16773 ;; This function uses a non-reentrant model
 16774 ;;
 16775                           
 16776                           
 16777                           ;psect for function _WriteFlash_Sequential
 16778  1371                     _WriteFlash_Sequential:	
 16779                           
 16780                           ;FLASH.c: 114: unsigned char spaces = 32;
 16781                           
 16782                           ;incstack = 0
 16783                           ; Regs used in _WriteFlash_Sequential: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16784  1371  3020               	movlw	32
 16785  1372  0020               	movlb	0	; select bank0
 16786  1373  00A0               	movwf	??_WriteFlash_Sequential
 16787  1374  0820               	movf	??_WriteFlash_Sequential,w
 16788  1375  00E8               	movwf	WriteFlash_Sequential@spaces
 16789                           
 16790                           ;FLASH.c: 115: unsigned char tempH;
 16791                           ;FLASH.c: 116: unsigned char tempL;
 16792                           ;FLASH.c: 117: unsigned char i;
 16793                           ;FLASH.c: 118: unsigned int temp;
 16794                           ;FLASH.c: 119: unsigned char amountTemp =0;
 16795  1376  01E5               	clrf	WriteFlash_Sequential@amountTemp
 16796                           
 16797                           ;FLASH.c: 120: unsigned char TempBufH[32];
 16798                           ;FLASH.c: 121: unsigned char TempBufL[32];
 16799                           ;FLASH.c: 123: for(i=0;i<spaces;i++)
 16800  1377  01E9               	clrf	WriteFlash_Sequential@i
 16801  1378                     i1l3932:	
 16802  1378  0868               	movf	WriteFlash_Sequential@spaces,w
 16803  1379  0269               	subwf	WriteFlash_Sequential@i,w
 16804  137A  1803               	btfsc	3,0
 16805  137B  2BCE               	goto	i1l3934
 16806                           
 16807                           ;FLASH.c: 124: {
 16808                           ;FLASH.c: 125: amountTemp++;
 16809  137C  3001               	movlw	1
 16810  137D  00A0               	movwf	??_WriteFlash_Sequential
 16811  137E  0820               	movf	??_WriteFlash_Sequential,w
 16812  137F  07E5               	addwf	WriteFlash_Sequential@amountTemp,f
 16813                           
 16814                           ;FLASH.c: 126: if(amountTemp <= amount)
 16815  1380  0865               	movf	WriteFlash_Sequential@amountTemp,w
 16816  1381  027D               	subwf	WriteFlash_Sequential@amount,w
 16817  1382  1C03               	skipc
 16818  1383  2B9C               	goto	i1l3920
 16819                           
 16820                           ;FLASH.c: 127: {
 16821                           ;FLASH.c: 128: tempH = (unsigned char)((*buffer & 0x3F00) >> 8);
 16822  1384  087C               	movf	WriteFlash_Sequential@buffer,w
 16823  1385  0086               	movwf	6
 16824  1386  0187               	clrf	7
 16825  1387  3F40               	moviw [0]fsr1
 16826  1388  00A0               	movwf	??_WriteFlash_Sequential
 16827  1389  3F41               	moviw [1]fsr1
 16828  138A  00A1               	movwf	??_WriteFlash_Sequential+1
 16829  138B  0821               	movf	??_WriteFlash_Sequential+1,w
 16830  138C  393F               	andlw	63
 16831  138D  00A2               	movwf	??_WriteFlash_Sequential+2
 16832  138E  0822               	movf	??_WriteFlash_Sequential+2,w
 16833  138F  00E3               	movwf	WriteFlash_Sequential@tempH
 16834                           
 16835                           ;FLASH.c: 129: tempL = (unsigned char)(*buffer & 0x00FF);
 16836  1390  087C               	movf	WriteFlash_Sequential@buffer,w
 16837  1391  0086               	movwf	6
 16838  1392  0187               	clrf	7
 16839  1393  0801               	movf	1,w
 16840  1394  00A0               	movwf	??_WriteFlash_Sequential
 16841  1395  0820               	movf	??_WriteFlash_Sequential,w
 16842  1396  00E4               	movwf	WriteFlash_Sequential@tempL
 16843                           
 16844                           ;FLASH.c: 130: buffer++;
 16845  1397  3002               	movlw	2
 16846  1398  00A0               	movwf	??_WriteFlash_Sequential
 16847  1399  0820               	movf	??_WriteFlash_Sequential,w
 16848  139A  07FC               	addwf	WriteFlash_Sequential@buffer,f
 16849                           
 16850                           ;FLASH.c: 131: }
 16851  139B  2BB9               	goto	i1l3926
 16852  139C                     i1l3920:	
 16853                           
 16854                           ;FLASH.c: 132: else
 16855                           ;FLASH.c: 133: {
 16856                           ;FLASH.c: 135: temp = ReadFlash_2Byte(row, i);
 16857  139C  087B               	movf	WriteFlash_Sequential@row+1,w
 16858  139D  01F1               	clrf	i1ReadFlash_2Byte@row+1
 16859  139E  07F1               	addwf	i1ReadFlash_2Byte@row+1,f
 16860  139F  087A               	movf	WriteFlash_Sequential@row,w
 16861  13A0  01F0               	clrf	i1ReadFlash_2Byte@row
 16862  13A1  07F0               	addwf	i1ReadFlash_2Byte@row,f
 16863  13A2  0869               	movf	WriteFlash_Sequential@i,w
 16864  13A3  00A0               	movwf	??_WriteFlash_Sequential
 16865  13A4  0820               	movf	??_WriteFlash_Sequential,w
 16866  13A5  00F2               	movwf	i1ReadFlash_2Byte@column
 16867  13A6  319A  2250  3193   	fcall	i1_ReadFlash_2Byte
 16868  13A9  0871               	movf	?i1_ReadFlash_2Byte+1,w
 16869  13AA  0020               	movlb	0	; select bank0
 16870  13AB  01E7               	clrf	WriteFlash_Sequential@temp+1
 16871  13AC  07E7               	addwf	WriteFlash_Sequential@temp+1,f
 16872  13AD  0870               	movf	?i1_ReadFlash_2Byte,w
 16873  13AE  01E6               	clrf	WriteFlash_Sequential@temp
 16874  13AF  07E6               	addwf	WriteFlash_Sequential@temp,f
 16875                           
 16876                           ;FLASH.c: 136: tempH = (unsigned char)((temp & 0x3F00) >>8);
 16877  13B0  0867               	movf	WriteFlash_Sequential@temp+1,w
 16878  13B1  393F               	andlw	63
 16879  13B2  00A0               	movwf	??_WriteFlash_Sequential
 16880  13B3  0820               	movf	??_WriteFlash_Sequential,w
 16881  13B4  00E3               	movwf	WriteFlash_Sequential@tempH
 16882                           
 16883                           ;FLASH.c: 137: tempL = (unsigned char)(temp & 0x00FF);
 16884  13B5  0866               	movf	WriteFlash_Sequential@temp,w
 16885  13B6  00A0               	movwf	??_WriteFlash_Sequential
 16886  13B7  0820               	movf	??_WriteFlash_Sequential,w
 16887  13B8  00E4               	movwf	WriteFlash_Sequential@tempL
 16888  13B9                     i1l3926:	
 16889                           
 16890                           ;FLASH.c: 138: }
 16891                           ;FLASH.c: 139: TempBufH[i] = tempH;
 16892  13B9  0863               	movf	WriteFlash_Sequential@tempH,w
 16893  13BA  00A0               	movwf	??_WriteFlash_Sequential
 16894  13BB  0869               	movf	WriteFlash_Sequential@i,w
 16895  13BC  3E23               	addlw	WriteFlash_Sequential@TempBufH& (0+255)
 16896  13BD  0086               	movwf	6
 16897  13BE  0187               	clrf	7
 16898  13BF  0820               	movf	??_WriteFlash_Sequential,w
 16899  13C0  0081               	movwf	1
 16900                           
 16901                           ;FLASH.c: 140: TempBufL[i] = tempL;
 16902  13C1  0864               	movf	WriteFlash_Sequential@tempL,w
 16903  13C2  00A0               	movwf	??_WriteFlash_Sequential
 16904  13C3  0869               	movf	WriteFlash_Sequential@i,w
 16905  13C4  3E43               	addlw	WriteFlash_Sequential@TempBufL& (0+255)
 16906  13C5  0086               	movwf	6
 16907  13C6  0187               	clrf	7
 16908  13C7  0820               	movf	??_WriteFlash_Sequential,w
 16909  13C8  0081               	movwf	1
 16910  13C9  3001               	movlw	1
 16911  13CA  00A0               	movwf	??_WriteFlash_Sequential
 16912  13CB  0820               	movf	??_WriteFlash_Sequential,w
 16913  13CC  07E9               	addwf	WriteFlash_Sequential@i,f
 16914  13CD  2B78               	goto	i1l3932
 16915  13CE                     i1l3934:	
 16916                           
 16917                           ;FLASH.c: 141: }
 16918                           ;FLASH.c: 142: BlockErase(row);
 16919  13CE  087B               	movf	WriteFlash_Sequential@row+1,w
 16920  13CF  01F1               	clrf	BlockErase@row+1
 16921  13D0  07F1               	addwf	BlockErase@row+1,f
 16922  13D1  087A               	movf	WriteFlash_Sequential@row,w
 16923  13D2  01F0               	clrf	BlockErase@row
 16924  13D3  07F0               	addwf	BlockErase@row,f
 16925  13D4  319A  227A  3193   	fcall	_BlockErase
 16926                           
 16927                           ;FLASH.c: 143: delayUS(1000);
 16928  13D7  3000               	movlw	0
 16929  13D8  00F3               	movwf	i1delayUS@US+3
 16930  13D9  3000               	movlw	0
 16931  13DA  00F2               	movwf	i1delayUS@US+2
 16932  13DB  3003               	movlw	3
 16933  13DC  00F1               	movwf	i1delayUS@US+1
 16934  13DD  30E8               	movlw	232
 16935  13DE  00F0               	movwf	i1delayUS@US
 16936  13DF  319B  23F0  3193   	fcall	i1_delayUS
 16937                           
 16938                           ;FLASH.c: 144: INTCON &= ~0x80;
 16939  13E2  307F               	movlw	127
 16940  13E3  0020               	movlb	0	; select bank0
 16941  13E4  00A0               	movwf	??_WriteFlash_Sequential
 16942  13E5  0820               	movf	??_WriteFlash_Sequential,w
 16943  13E6  058B               	andwf	11,f	;volatile
 16944                           
 16945                           ;FLASH.c: 145: PMCON1 |= 0b00000100;
 16946  13E7  0023               	movlb	3	; select bank3
 16947  13E8  1515               	bsf	21,2	;volatile
 16948                           
 16949                           ;FLASH.c: 146: PMCON1 &= ~0b01000000;
 16950  13E9  30BF               	movlw	191
 16951  13EA  0020               	movlb	0	; select bank0
 16952  13EB  00A0               	movwf	??_WriteFlash_Sequential
 16953  13EC  0820               	movf	??_WriteFlash_Sequential,w
 16954  13ED  0023               	movlb	3	; select bank3
 16955  13EE  0595               	andwf	21,f	;volatile
 16956                           
 16957                           ;FLASH.c: 147: PMCON1 &= ~0b00100000;
 16958  13EF  30DF               	movlw	223
 16959  13F0  0020               	movlb	0	; select bank0
 16960  13F1  00A0               	movwf	??_WriteFlash_Sequential
 16961  13F2  0820               	movf	??_WriteFlash_Sequential,w
 16962  13F3  0023               	movlb	3	; select bank3
 16963  13F4  0595               	andwf	21,f	;volatile
 16964                           
 16965                           ;FLASH.c: 148: PMCON1 &= ~0b00010000;
 16966  13F5  30EF               	movlw	239
 16967  13F6  0020               	movlb	0	; select bank0
 16968  13F7  00A0               	movwf	??_WriteFlash_Sequential
 16969  13F8  0820               	movf	??_WriteFlash_Sequential,w
 16970  13F9  0023               	movlb	3	; select bank3
 16971  13FA  0595               	andwf	21,f	;volatile
 16972                           
 16973                           ;FLASH.c: 149: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 16974  13FB  087B               	movf	WriteFlash_Sequential@row+1,w
 16975  13FC  0020               	movlb	0	; select bank0
 16976  13FD  00A1               	movwf	??_WriteFlash_Sequential+1
 16977  13FE  087A               	movf	WriteFlash_Sequential@row,w
 16978  13FF  00A0               	movwf	??_WriteFlash_Sequential
 16979  1400  36A1               	lsrf	??_WriteFlash_Sequential+1,f
 16980  1401  0CA0               	rrf	??_WriteFlash_Sequential,f
 16981  1402  36A1               	lsrf	??_WriteFlash_Sequential+1,f
 16982  1403  0CA0               	rrf	??_WriteFlash_Sequential,f
 16983  1404  36A1               	lsrf	??_WriteFlash_Sequential+1,f
 16984  1405  0CA0               	rrf	??_WriteFlash_Sequential,f
 16985  1406  0820               	movf	??_WriteFlash_Sequential,w
 16986  1407  397F               	andlw	127
 16987  1408  0023               	movlb	3	; select bank3
 16988  1409  0092               	movwf	18	;volatile
 16989                           
 16990                           ;FLASH.c: 150: PMADRL = (unsigned char)((row & 0x007) << 5);
 16991  140A  087A               	movf	WriteFlash_Sequential@row,w
 16992  140B  3907               	andlw	7
 16993  140C  0020               	movlb	0	; select bank0
 16994  140D  00A0               	movwf	??_WriteFlash_Sequential
 16995  140E  3004               	movlw	4
 16996  140F                     u410_25:	
 16997  140F  35A0               	lslf	??_WriteFlash_Sequential,f
 16998  1410  3EFF               	addlw	-1
 16999  1411  1D03               	skipz
 17000  1412  2C0F               	goto	u410_25
 17001  1413  3520               	lslf	??_WriteFlash_Sequential,w
 17002  1414  0023               	movlb	3	; select bank3
 17003  1415  0091               	movwf	17	;volatile
 17004                           
 17005                           ;FLASH.c: 152: for(i=0;i<spaces;i++)
 17006  1416  0020               	movlb	0	; select bank0
 17007  1417  01E9               	clrf	WriteFlash_Sequential@i
 17008  1418                     i1l3964:	
 17009  1418  0868               	movf	WriteFlash_Sequential@spaces,w
 17010  1419  0269               	subwf	WriteFlash_Sequential@i,w
 17011  141A  1803               	btfsc	3,0
 17012  141B  2C3C               	goto	i1l3966
 17013                           
 17014                           ;FLASH.c: 153: {
 17015                           ;FLASH.c: 154: PMDATH = TempBufH[i];
 17016  141C  0869               	movf	WriteFlash_Sequential@i,w
 17017  141D  3E23               	addlw	WriteFlash_Sequential@TempBufH& (0+255)
 17018  141E  0086               	movwf	6
 17019  141F  0187               	clrf	7
 17020  1420  0801               	movf	1,w
 17021  1421  0023               	movlb	3	; select bank3
 17022  1422  0094               	movwf	20	;volatile
 17023                           
 17024                           ;FLASH.c: 155: PMDATL = TempBufL[i];
 17025  1423  0020               	movlb	0	; select bank0
 17026  1424  0869               	movf	WriteFlash_Sequential@i,w
 17027  1425  3E43               	addlw	WriteFlash_Sequential@TempBufL& (0+255)
 17028  1426  0086               	movwf	6
 17029  1427  0187               	clrf	7
 17030  1428  0801               	movf	1,w
 17031  1429  0023               	movlb	3	; select bank3
 17032  142A  0093               	movwf	19	;volatile
 17033                           
 17034                           ;FLASH.c: 156: __nop();
 17035  142B  0000               	nop
 17036                           
 17037                           ;FLASH.c: 157: __nop();
 17038  142C  0000               	nop
 17039                           
 17040                           ;FLASH.c: 158: UNLOCK();
 17041  142D  3198  20D8  3193   	fcall	_UNLOCK
 17042                           
 17043                           ;FLASH.c: 159: PMADRL++;
 17044  1430  3001               	movlw	1
 17045  1431  0020               	movlb	0	; select bank0
 17046  1432  00A0               	movwf	??_WriteFlash_Sequential
 17047  1433  0820               	movf	??_WriteFlash_Sequential,w
 17048  1434  0023               	movlb	3	; select bank3
 17049  1435  0791               	addwf	17,f	;volatile
 17050  1436  3001               	movlw	1
 17051  1437  0020               	movlb	0	; select bank0
 17052  1438  00A0               	movwf	??_WriteFlash_Sequential
 17053  1439  0820               	movf	??_WriteFlash_Sequential,w
 17054  143A  07E9               	addwf	WriteFlash_Sequential@i,f
 17055  143B  2C18               	goto	i1l3964
 17056  143C                     i1l3966:	
 17057                           
 17058                           ;FLASH.c: 161: }
 17059                           ;FLASH.c: 162: PMCON1 &= ~0b00000100;
 17060  143C  30FB               	movlw	251
 17061  143D  00A0               	movwf	??_WriteFlash_Sequential
 17062  143E  0820               	movf	??_WriteFlash_Sequential,w
 17063  143F  0023               	movlb	3	; select bank3
 17064  1440  0595               	andwf	21,f	;volatile
 17065                           
 17066                           ;FLASH.c: 163: INTCON |= 0x80;
 17067  1441  178B               	bsf	11,7	;volatile
 17068  1442  0008               	return
 17069  1443                     __end_of_WriteFlash_Sequential:	
 17070                           
 17071                           	psect	text66
 17072  1BF0                     __ptext66:	
 17073 ;; *************** function i1_delayUS *****************
 17074 ;; Defined at:
 17075 ;;		line 51 in file "MISC.c"
 17076 ;; Parameters:    Size  Location     Type
 17077 ;;  US              4    0[COMMON] long 
 17078 ;; Auto vars:     Size  Location     Type
 17079 ;;  delayUS         4    5[COMMON] long 
 17080 ;;  delayUS         1    9[COMMON] unsigned char 
 17081 ;; Return value:  Size  Location     Type
 17082 ;;		None               void
 17083 ;; Registers used:
 17084 ;;		wreg, status,2, status,0
 17085 ;; Tracked objects:
 17086 ;;		On entry : 0/0
 17087 ;;		On exit  : 0/0
 17088 ;;		Unchanged: 0/0
 17089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17090 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17091 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17092 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17093 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17094 ;;Total ram usage:       10 bytes
 17095 ;; Hardware stack levels used:    1
 17096 ;; This function calls:
 17097 ;;		Nothing
 17098 ;; This function is called by:
 17099 ;;		_UART_send_break_timed
 17100 ;;		_SetBaud
 17101 ;;		_Process_PS2_ScanCode
 17102 ;;		_WriteFlash_Sequential
 17103 ;;		i1_UARTstringWAIT
 17104 ;;		i1_Send_PS2
 17105 ;; This function uses a non-reentrant model
 17106 ;;
 17107                           
 17108                           
 17109                           ;psect for function i1_delayUS
 17110  1BF0                     i1_delayUS:	
 17111                           
 17112                           ;MISC.c: 53: long i;
 17113                           ;MISC.c: 54: unsigned char j;
 17114                           ;MISC.c: 55: for(i=0;i<US;i+=6)
 17115                           
 17116                           ;incstack = 0
 17117                           ; Regs used in i1_delayUS: [wreg+status,2+status,0]
 17118  1BF0  3000               	movlw	0
 17119  1BF1  00F8               	movwf	i1delayUS@i+3
 17120  1BF2  3000               	movlw	0
 17121  1BF3  00F7               	movwf	i1delayUS@i+2
 17122  1BF4  3000               	movlw	0
 17123  1BF5  00F6               	movwf	i1delayUS@i+1
 17124  1BF6  3000               	movlw	0
 17125  1BF7  00F5               	movwf	i1delayUS@i
 17126  1BF8                     i1l259:	
 17127  1BF8  0878               	movf	i1delayUS@i+3,w
 17128  1BF9  3A80               	xorlw	128
 17129  1BFA  00F4               	movwf	??i1_delayUS
 17130  1BFB  0873               	movf	i1delayUS@US+3,w
 17131  1BFC  3A80               	xorlw	128
 17132  1BFD  0274               	subwf	??i1_delayUS,w
 17133  1BFE  1D03               	skipz
 17134  1BFF  2C0A               	goto	u381_23
 17135  1C00  0872               	movf	i1delayUS@US+2,w
 17136  1C01  0277               	subwf	i1delayUS@i+2,w
 17137  1C02  1D03               	skipz
 17138  1C03  2C0A               	goto	u381_23
 17139  1C04  0871               	movf	i1delayUS@US+1,w
 17140  1C05  0276               	subwf	i1delayUS@i+1,w
 17141  1C06  1D03               	skipz
 17142  1C07  2C0A               	goto	u381_23
 17143  1C08  0870               	movf	i1delayUS@US,w
 17144  1C09  0275               	subwf	i1delayUS@i,w
 17145  1C0A                     u381_23:	
 17146  1C0A  1803               	btfsc	3,0
 17147  1C0B  0008               	return
 17148                           
 17149                           ;MISC.c: 56: {
 17150                           ;MISC.c: 57: for(j=0;j<32;j++)
 17151  1C0C  01F9               	clrf	i1delayUS@j
 17152  1C0D  3020               	movlw	32
 17153  1C0E  0279               	subwf	i1delayUS@j,w
 17154  1C0F  1803               	btfsc	3,0
 17155  1C10  2C1A               	goto	i1l3768
 17156  1C11                     i1l261:	
 17157                           
 17158                           ;MISC.c: 58: {
 17159                           ;MISC.c: 59: __nop();
 17160  1C11  0000               	nop
 17161  1C12  3001               	movlw	1
 17162  1C13  00F4               	movwf	??i1_delayUS
 17163  1C14  0874               	movf	??i1_delayUS,w
 17164  1C15  07F9               	addwf	i1delayUS@j,f
 17165  1C16  3020               	movlw	32
 17166  1C17  0279               	subwf	i1delayUS@j,w
 17167  1C18  1C03               	skipc
 17168  1C19  2C11               	goto	i1l261
 17169  1C1A                     i1l3768:	
 17170  1C1A  3006               	movlw	6
 17171  1C1B  07F5               	addwf	i1delayUS@i,f
 17172  1C1C  3000               	movlw	0
 17173  1C1D  3DF6               	addwfc	i1delayUS@i+1,f
 17174  1C1E  3000               	movlw	0
 17175  1C1F  3DF7               	addwfc	i1delayUS@i+2,f
 17176  1C20  3000               	movlw	0
 17177  1C21  3DF8               	addwfc	i1delayUS@i+3,f
 17178  1C22  2BF8               	goto	i1l259
 17179  1C23                     __end_ofi1_delayUS:	
 17180                           
 17181                           	psect	text67
 17182  1A50                     __ptext67:	
 17183 ;; *************** function i1_ReadFlash_2Byte *****************
 17184 ;; Defined at:
 17185 ;;		line 43 in file "FLASH.c"
 17186 ;; Parameters:    Size  Location     Type
 17187 ;;  row             2    0[COMMON] unsigned int 
 17188 ;;  column          1    2[COMMON] unsigned char 
 17189 ;; Auto vars:     Size  Location     Type
 17190 ;;		None
 17191 ;; Return value:  Size  Location     Type
 17192 ;;                  2    0[COMMON] unsigned int 
 17193 ;; Registers used:
 17194 ;;		wreg, status,2, status,0
 17195 ;; Tracked objects:
 17196 ;;		On entry : 0/0
 17197 ;;		On exit  : 0/0
 17198 ;;		Unchanged: 0/0
 17199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17200 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17202 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17203 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17204 ;;Total ram usage:        5 bytes
 17205 ;; Hardware stack levels used:    1
 17206 ;; This function calls:
 17207 ;;		Nothing
 17208 ;; This function is called by:
 17209 ;;		_WriteFlash_Sequential
 17210 ;;		i1_ReadFlash_4Byte
 17211 ;; This function uses a non-reentrant model
 17212 ;;
 17213                           
 17214                           
 17215                           ;psect for function i1_ReadFlash_2Byte
 17216  1A50                     i1_ReadFlash_2Byte:	
 17217                           
 17218                           ;FLASH.c: 45: PMCON1 &= ~0b01000000;
 17219                           
 17220                           ;incstack = 0
 17221                           ; Regs used in i1_ReadFlash_2Byte: [wreg+status,2+status,0]
 17222  1A50  30BF               	movlw	191
 17223  1A51  00F3               	movwf	??i1_ReadFlash_2Byte
 17224  1A52  0873               	movf	??i1_ReadFlash_2Byte,w
 17225  1A53  0023               	movlb	3	; select bank3
 17226  1A54  0595               	andwf	21,f	;volatile
 17227                           
 17228                           ;FLASH.c: 46: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 17229  1A55  0871               	movf	i1ReadFlash_2Byte@row+1,w
 17230  1A56  00F4               	movwf	??i1_ReadFlash_2Byte+1
 17231  1A57  0870               	movf	i1ReadFlash_2Byte@row,w
 17232  1A58  00F3               	movwf	??i1_ReadFlash_2Byte
 17233  1A59  36F4               	lsrf	??i1_ReadFlash_2Byte+1,f
 17234  1A5A  0CF3               	rrf	??i1_ReadFlash_2Byte,f
 17235  1A5B  36F4               	lsrf	??i1_ReadFlash_2Byte+1,f
 17236  1A5C  0CF3               	rrf	??i1_ReadFlash_2Byte,f
 17237  1A5D  36F4               	lsrf	??i1_ReadFlash_2Byte+1,f
 17238  1A5E  0CF3               	rrf	??i1_ReadFlash_2Byte,f
 17239  1A5F  0873               	movf	??i1_ReadFlash_2Byte,w
 17240  1A60  397F               	andlw	127
 17241  1A61  0092               	movwf	18	;volatile
 17242                           
 17243                           ;FLASH.c: 47: PMADRL = (unsigned char)(((row & 0x007) << 5) + column);
 17244  1A62  0870               	movf	i1ReadFlash_2Byte@row,w
 17245  1A63  3907               	andlw	7
 17246  1A64  00F3               	movwf	??i1_ReadFlash_2Byte
 17247  1A65  3004               	movlw	4
 17248  1A66                     u389_25:	
 17249  1A66  35F3               	lslf	??i1_ReadFlash_2Byte,f
 17250  1A67  3EFF               	addlw	-1
 17251  1A68  1D03               	skipz
 17252  1A69  2A66               	goto	u389_25
 17253  1A6A  3573               	lslf	??i1_ReadFlash_2Byte,w
 17254  1A6B  0772               	addwf	i1ReadFlash_2Byte@column,w
 17255  1A6C  0091               	movwf	17	;volatile
 17256                           
 17257                           ;FLASH.c: 48: PMCON1 |= 0b00000001;
 17258  1A6D  1415               	bsf	21,0	;volatile
 17259  1A6E                     i1l913:	
 17260                           ;FLASH.c: 49: while(PMCON1 & 0b00000001);
 17261                           
 17262  1A6E  1815               	btfsc	21,0	;volatile
 17263  1A6F  2A6E               	goto	i1l913
 17264                           
 17265                           ;FLASH.c: 50: __nop();
 17266  1A70  0000               	nop
 17267                           
 17268                           ;FLASH.c: 51: __nop();
 17269  1A71  0000               	nop
 17270                           
 17271                           ;FLASH.c: 52: return (PMDATL | (PMDATH << 8));
 17272  1A72  0023               	movlb	3	; select bank3
 17273  1A73  0814               	movf	20,w	;volatile
 17274  1A74  01F1               	clrf	?i1_ReadFlash_2Byte+1
 17275  1A75  07F1               	addwf	?i1_ReadFlash_2Byte+1,f
 17276  1A76  0813               	movf	19,w	;volatile
 17277  1A77  01F0               	clrf	?i1_ReadFlash_2Byte
 17278  1A78  07F0               	addwf	?i1_ReadFlash_2Byte,f
 17279  1A79  0008               	return
 17280  1A7A                     __end_ofi1_ReadFlash_2Byte:	
 17281                           
 17282                           	psect	text68
 17283  1A7A                     __ptext68:	
 17284 ;; *************** function _BlockErase *****************
 17285 ;; Defined at:
 17286 ;;		line 91 in file "FLASH.c"
 17287 ;; Parameters:    Size  Location     Type
 17288 ;;  row             2    0[COMMON] unsigned int 
 17289 ;; Auto vars:     Size  Location     Type
 17290 ;;		None
 17291 ;; Return value:  Size  Location     Type
 17292 ;;		None               void
 17293 ;; Registers used:
 17294 ;;		wreg, status,2, status,0, pclath, cstack
 17295 ;; Tracked objects:
 17296 ;;		On entry : 0/0
 17297 ;;		On exit  : 0/0
 17298 ;;		Unchanged: 0/0
 17299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17300 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17302 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17303 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17304 ;;Total ram usage:        4 bytes
 17305 ;; Hardware stack levels used:    1
 17306 ;; Hardware stack levels required when called:    1
 17307 ;; This function calls:
 17308 ;;		_UNLOCK
 17309 ;; This function is called by:
 17310 ;;		_WriteFlash_Sequential
 17311 ;; This function uses a non-reentrant model
 17312 ;;
 17313                           
 17314                           
 17315                           ;psect for function _BlockErase
 17316  1A7A                     _BlockErase:	
 17317                           
 17318                           ;FLASH.c: 93: INTCON &= ~0x80;
 17319                           
 17320                           ;incstack = 0
 17321                           ; Regs used in _BlockErase: [wreg+status,2+status,0+pclath+cstack]
 17322  1A7A  307F               	movlw	127
 17323  1A7B  00F2               	movwf	??_BlockErase
 17324  1A7C  0872               	movf	??_BlockErase,w
 17325  1A7D  058B               	andwf	11,f	;volatile
 17326                           
 17327                           ;FLASH.c: 94: PMCON1 &= ~0b01000000;
 17328  1A7E  30BF               	movlw	191
 17329  1A7F  00F2               	movwf	??_BlockErase
 17330  1A80  0872               	movf	??_BlockErase,w
 17331  1A81  0023               	movlb	3	; select bank3
 17332  1A82  0595               	andwf	21,f	;volatile
 17333                           
 17334                           ;FLASH.c: 95: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 17335  1A83  0871               	movf	BlockErase@row+1,w
 17336  1A84  00F3               	movwf	??_BlockErase+1
 17337  1A85  0870               	movf	BlockErase@row,w
 17338  1A86  00F2               	movwf	??_BlockErase
 17339  1A87  36F3               	lsrf	??_BlockErase+1,f
 17340  1A88  0CF2               	rrf	??_BlockErase,f
 17341  1A89  36F3               	lsrf	??_BlockErase+1,f
 17342  1A8A  0CF2               	rrf	??_BlockErase,f
 17343  1A8B  36F3               	lsrf	??_BlockErase+1,f
 17344  1A8C  0CF2               	rrf	??_BlockErase,f
 17345  1A8D  0872               	movf	??_BlockErase,w
 17346  1A8E  397F               	andlw	127
 17347  1A8F  0092               	movwf	18	;volatile
 17348                           
 17349                           ;FLASH.c: 96: PMADRL = (unsigned char)((row & 0x007) << 5);
 17350  1A90  0870               	movf	BlockErase@row,w
 17351  1A91  3907               	andlw	7
 17352  1A92  00F2               	movwf	??_BlockErase
 17353  1A93  3004               	movlw	4
 17354  1A94                     u378_25:	
 17355  1A94  35F2               	lslf	??_BlockErase,f
 17356  1A95  3EFF               	addlw	-1
 17357  1A96  1D03               	skipz
 17358  1A97  2A94               	goto	u378_25
 17359  1A98  3572               	lslf	??_BlockErase,w
 17360  1A99  0091               	movwf	17	;volatile
 17361                           
 17362                           ;FLASH.c: 97: PMCON1 |= 0b00010000;
 17363  1A9A  1615               	bsf	21,4	;volatile
 17364                           
 17365                           ;FLASH.c: 98: PMCON1 |= 0b00000100;
 17366  1A9B  1515               	bsf	21,2	;volatile
 17367                           
 17368                           ;FLASH.c: 99: UNLOCK();
 17369  1A9C  3198  20D8         	fcall	_UNLOCK
 17370                           
 17371                           ;FLASH.c: 100: PMCON1 &= ~0b00000100;
 17372  1A9E  30FB               	movlw	251
 17373  1A9F  00F2               	movwf	??_BlockErase
 17374  1AA0  0872               	movf	??_BlockErase,w
 17375  1AA1  0023               	movlb	3	; select bank3
 17376  1AA2  0595               	andwf	21,f	;volatile
 17377                           
 17378                           ;FLASH.c: 101: INTCON |= 0x80;
 17379  1AA3  178B               	bsf	11,7	;volatile
 17380  1AA4  0008               	return
 17381  1AA5                     __end_of_BlockErase:	
 17382                           
 17383                           	psect	text69
 17384  18D8                     __ptext69:	
 17385 ;; *************** function _UNLOCK *****************
 17386 ;; Defined at:
 17387 ;;		line 76 in file "FLASH.c"
 17388 ;; Parameters:    Size  Location     Type
 17389 ;;		None
 17390 ;; Auto vars:     Size  Location     Type
 17391 ;;		None
 17392 ;; Return value:  Size  Location     Type
 17393 ;;		None               void
 17394 ;; Registers used:
 17395 ;;		wreg
 17396 ;; Tracked objects:
 17397 ;;		On entry : 0/0
 17398 ;;		On exit  : 0/0
 17399 ;;		Unchanged: 0/0
 17400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17404 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17405 ;;Total ram usage:        0 bytes
 17406 ;; Hardware stack levels used:    1
 17407 ;; This function calls:
 17408 ;;		Nothing
 17409 ;; This function is called by:
 17410 ;;		_BlockErase
 17411 ;;		_WriteFlash_Sequential
 17412 ;; This function uses a non-reentrant model
 17413 ;;
 17414                           
 17415                           
 17416                           ;psect for function _UNLOCK
 17417  18D8                     _UNLOCK:	
 17418                           
 17419                           ;FLASH.c: 78: PMCON2 = 0x55;
 17420                           
 17421                           ;incstack = 0
 17422                           ; Regs used in _UNLOCK: [wreg]
 17423  18D8  3055               	movlw	85
 17424  18D9  0023               	movlb	3	; select bank3
 17425  18DA  0096               	movwf	22	;volatile
 17426                           
 17427                           ;FLASH.c: 79: PMCON2 = 0xAA;
 17428  18DB  30AA               	movlw	170
 17429  18DC  0096               	movwf	22	;volatile
 17430                           
 17431                           ;FLASH.c: 80: PMCON1 |= 0b00000010;
 17432  18DD  1495               	bsf	21,1	;volatile
 17433  18DE                     i1l922:	
 17434                           ;FLASH.c: 81: while(PMCON1 & 0b00000010);
 17435                           
 17436  18DE  1895               	btfsc	21,1	;volatile
 17437  18DF  28DE               	goto	i1l922
 17438                           
 17439                           ;FLASH.c: 82: __nop();
 17440  18E0  0000               	nop
 17441                           
 17442                           ;FLASH.c: 83: __nop();
 17443  18E1  0000               	nop
 17444  18E2  0008               	return
 17445  18E3                     __end_of_UNLOCK:	
 17446                           
 17447                           	psect	text70
 17448  1911                     __ptext70:	
 17449 ;; *************** function _ISNUMBER *****************
 17450 ;; Defined at:
 17451 ;;		line 129 in file "MISC.c"
 17452 ;; Parameters:    Size  Location     Type
 17453 ;;  ascii           1    wreg     unsigned char 
 17454 ;; Auto vars:     Size  Location     Type
 17455 ;;  ascii           1    0[COMMON] unsigned char 
 17456 ;; Return value:  Size  Location     Type
 17457 ;;                  1    wreg      unsigned char 
 17458 ;; Registers used:
 17459 ;;		wreg
 17460 ;; Tracked objects:
 17461 ;;		On entry : 0/0
 17462 ;;		On exit  : 0/0
 17463 ;;		Unchanged: 0/0
 17464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17466 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17468 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17469 ;;Total ram usage:        1 bytes
 17470 ;; Hardware stack levels used:    1
 17471 ;; This function calls:
 17472 ;;		Nothing
 17473 ;; This function is called by:
 17474 ;;		_Process_PS2_ScanCode
 17475 ;; This function uses a non-reentrant model
 17476 ;;
 17477                           
 17478                           
 17479                           ;psect for function _ISNUMBER
 17480  1911                     _ISNUMBER:	
 17481                           
 17482                           ;incstack = 0
 17483                           ; Regs used in _ISNUMBER: [wreg]
 17484                           ;ISNUMBER@ascii stored from wreg
 17485  1911  00F0               	movwf	ISNUMBER@ascii
 17486                           
 17487                           ;MISC.c: 131: if(ascii >= '0' && ascii <='9')
 17488  1912  3030               	movlw	48
 17489  1913  0270               	subwf	ISNUMBER@ascii,w
 17490  1914  1C03               	skipc
 17491  1915  291C               	goto	i1l4676
 17492  1916  303A               	movlw	58
 17493  1917  0270               	subwf	ISNUMBER@ascii,w
 17494  1918  1803               	skipnc
 17495  1919  291C               	goto	i1l4676
 17496                           
 17497                           ;MISC.c: 132: {
 17498                           ;MISC.c: 133: return 1;
 17499  191A  3001               	movlw	1
 17500                           
 17501                           ;MISC.c: 134: }
 17502  191B  0008               	return
 17503  191C                     i1l4676:	
 17504                           
 17505                           ;MISC.c: 135: else
 17506                           ;MISC.c: 136: {
 17507                           ;MISC.c: 137: return 0;
 17508  191C  3000               	movlw	0
 17509  191D  0008               	return
 17510  191E                     __end_of_ISNUMBER:	
 17511                           
 17512                           	psect	text71
 17513  1980                     __ptext71:	
 17514 ;; *************** function _Decode_Scan_Code_Shift *****************
 17515 ;; Defined at:
 17516 ;;		line 789 in file "PS_2.c"
 17517 ;; Parameters:    Size  Location     Type
 17518 ;;  Code            1    wreg     unsigned char 
 17519 ;; Auto vars:     Size  Location     Type
 17520 ;;  Code            1    0[COMMON] unsigned char 
 17521 ;; Return value:  Size  Location     Type
 17522 ;;                  1    wreg      unsigned char 
 17523 ;; Registers used:
 17524 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 17525 ;; Tracked objects:
 17526 ;;		On entry : 0/0
 17527 ;;		On exit  : 0/0
 17528 ;;		Unchanged: 0/0
 17529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17531 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17533 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17534 ;;Total ram usage:        1 bytes
 17535 ;; Hardware stack levels used:    1
 17536 ;; This function calls:
 17537 ;;		Nothing
 17538 ;; This function is called by:
 17539 ;;		_Process_PS2_ScanCode
 17540 ;; This function uses a non-reentrant model
 17541 ;;
 17542                           
 17543                           
 17544                           ;psect for function _Decode_Scan_Code_Shift
 17545  1980                     _Decode_Scan_Code_Shift:	
 17546                           
 17547                           ;incstack = 0
 17548                           ; Regs used in _Decode_Scan_Code_Shift: [wreg-fsr0h+status,2+status,0+pclath]
 17549                           ;Decode_Scan_Code_Shift@Code stored from wreg
 17550  1980  00F0               	movwf	Decode_Scan_Code_Shift@Code
 17551                           
 17552                           ;PS_2.c: 791: Code -= 13;
 17553  1981  300D               	movlw	13
 17554  1982  02F0               	subwf	Decode_Scan_Code_Shift@Code,f
 17555                           
 17556                           ;PS_2.c: 792: if(Code <=112)
 17557  1983  3071               	movlw	113
 17558  1984  0270               	subwf	Decode_Scan_Code_Shift@Code,w
 17559  1985  1803               	skipnc
 17560  1986  2990               	goto	i1l4860
 17561                           
 17562                           ;PS_2.c: 793: {
 17563                           ;PS_2.c: 794: return ScanCodeSHIFT[Code];
 17564  1987  0870               	movf	Decode_Scan_Code_Shift@Code,w
 17565  1988  3EF5               	addlw	low (_ScanCodeSHIFT| (0+32768))
 17566  1989  0084               	movwf	4
 17567  198A  3087               	movlw	high (_ScanCodeSHIFT| (0+32768))
 17568  198B  1803               	skipnc
 17569  198C  3E01               	addlw	1
 17570  198D  0085               	movwf	5
 17571  198E  0800               	movf	0,w	;code access
 17572                           
 17573                           ;PS_2.c: 795: }
 17574  198F  0008               	return
 17575  1990                     i1l4860:	
 17576                           
 17577                           ;PS_2.c: 796: else
 17578                           ;PS_2.c: 797: {
 17579                           ;PS_2.c: 798: return 0;
 17580  1990  3000               	movlw	0
 17581  1991  0008               	return
 17582  1992                     __end_of_Decode_Scan_Code_Shift:	
 17583                           
 17584                           	psect	text72
 17585  196E                     __ptext72:	
 17586 ;; *************** function _Decode_Scan_Code_FunctionE0 *****************
 17587 ;; Defined at:
 17588 ;;		line 808 in file "PS_2.c"
 17589 ;; Parameters:    Size  Location     Type
 17590 ;;  Code            1    wreg     unsigned char 
 17591 ;; Auto vars:     Size  Location     Type
 17592 ;;  Code            1    0[COMMON] unsigned char 
 17593 ;; Return value:  Size  Location     Type
 17594 ;;                  1    wreg      unsigned char 
 17595 ;; Registers used:
 17596 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 17597 ;; Tracked objects:
 17598 ;;		On entry : 0/0
 17599 ;;		On exit  : 0/0
 17600 ;;		Unchanged: 0/0
 17601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17603 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17605 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17606 ;;Total ram usage:        1 bytes
 17607 ;; Hardware stack levels used:    1
 17608 ;; This function calls:
 17609 ;;		Nothing
 17610 ;; This function is called by:
 17611 ;;		_Process_PS2_ScanCode
 17612 ;; This function uses a non-reentrant model
 17613 ;;
 17614                           
 17615                           
 17616                           ;psect for function _Decode_Scan_Code_FunctionE0
 17617  196E                     _Decode_Scan_Code_FunctionE0:	
 17618                           
 17619                           ;incstack = 0
 17620                           ; Regs used in _Decode_Scan_Code_FunctionE0: [wreg-fsr0h+status,2+status,0+pclath]
 17621                           ;Decode_Scan_Code_FunctionE0@Code stored from wreg
 17622  196E  00F0               	movwf	Decode_Scan_Code_FunctionE0@Code
 17623                           
 17624                           ;PS_2.c: 810: Code -= 17;
 17625  196F  3011               	movlw	17
 17626  1970  02F0               	subwf	Decode_Scan_Code_FunctionE0@Code,f
 17627                           
 17628                           ;PS_2.c: 811: if(Code <=108)
 17629  1971  306D               	movlw	109
 17630  1972  0270               	subwf	Decode_Scan_Code_FunctionE0@Code,w
 17631  1973  1803               	skipnc
 17632  1974  297E               	goto	i1l4848
 17633                           
 17634                           ;PS_2.c: 812: {
 17635                           ;PS_2.c: 813: return ScanCodeFunctionE0[Code];
 17636  1975  0870               	movf	Decode_Scan_Code_FunctionE0@Code,w
 17637  1976  3E66               	addlw	low (_ScanCodeFunctionE0| (0+32768))
 17638  1977  0084               	movwf	4
 17639  1978  3088               	movlw	high (_ScanCodeFunctionE0| (0+32768))
 17640  1979  1803               	skipnc
 17641  197A  3E01               	addlw	1
 17642  197B  0085               	movwf	5
 17643  197C  0800               	movf	0,w	;code access
 17644                           
 17645                           ;PS_2.c: 814: }
 17646  197D  0008               	return
 17647  197E                     i1l4848:	
 17648                           
 17649                           ;PS_2.c: 815: else
 17650                           ;PS_2.c: 816: {
 17651                           ;PS_2.c: 817: return 0;
 17652  197E  3000               	movlw	0
 17653  197F  0008               	return
 17654  1980                     __end_of_Decode_Scan_Code_FunctionE0:	
 17655                           
 17656                           	psect	text73
 17657  193B                     __ptext73:	
 17658 ;; *************** function _Decode_Scan_Code_Function *****************
 17659 ;; Defined at:
 17660 ;;		line 827 in file "PS_2.c"
 17661 ;; Parameters:    Size  Location     Type
 17662 ;;  Code            1    wreg     unsigned char 
 17663 ;; Auto vars:     Size  Location     Type
 17664 ;;  Code            1    0[COMMON] unsigned char 
 17665 ;; Return value:  Size  Location     Type
 17666 ;;                  1    wreg      unsigned char 
 17667 ;; Registers used:
 17668 ;;		wreg, fsr0l, fsr0h, pclath
 17669 ;; Tracked objects:
 17670 ;;		On entry : 0/0
 17671 ;;		On exit  : 0/0
 17672 ;;		Unchanged: 0/0
 17673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17675 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17677 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17678 ;;Total ram usage:        1 bytes
 17679 ;; Hardware stack levels used:    1
 17680 ;; This function calls:
 17681 ;;		Nothing
 17682 ;; This function is called by:
 17683 ;;		_Process_PS2_ScanCode
 17684 ;; This function uses a non-reentrant model
 17685 ;;
 17686                           
 17687                           
 17688                           ;psect for function _Decode_Scan_Code_Function
 17689  193B                     _Decode_Scan_Code_Function:	
 17690                           
 17691                           ;incstack = 0
 17692                           ; Regs used in _Decode_Scan_Code_Function: [wreg-fsr0h+pclath]
 17693                           ;Decode_Scan_Code_Function@Code stored from wreg
 17694  193B  00F0               	movwf	Decode_Scan_Code_Function@Code
 17695                           
 17696                           ;PS_2.c: 829: if(Code <=131)
 17697  193C  3084               	movlw	132
 17698  193D  0270               	subwf	Decode_Scan_Code_Function@Code,w
 17699  193E  1803               	skipnc
 17700  193F  2949               	goto	i1l4884
 17701                           
 17702                           ;PS_2.c: 830: {
 17703                           ;PS_2.c: 831: return ScanCodeFunctionNoE0[Code];
 17704  1940  0870               	movf	Decode_Scan_Code_Function@Code,w
 17705  1941  3E00               	addlw	low (_ScanCodeFunctionNoE0| (0+32768))
 17706  1942  0084               	movwf	4
 17707  1943  3087               	movlw	high (_ScanCodeFunctionNoE0| (0+32768))
 17708  1944  1803               	skipnc
 17709  1945  3E01               	addlw	1
 17710  1946  0085               	movwf	5
 17711  1947  0800               	movf	0,w	;code access
 17712                           
 17713                           ;PS_2.c: 832: }
 17714  1948  0008               	return
 17715  1949                     i1l4884:	
 17716                           
 17717                           ;PS_2.c: 833: else
 17718                           ;PS_2.c: 834: {
 17719                           ;PS_2.c: 835: return 0;
 17720  1949  3000               	movlw	0
 17721  194A  0008               	return
 17722  194B                     __end_of_Decode_Scan_Code_Function:	
 17723                           
 17724                           	psect	text74
 17725  195C                     __ptext74:	
 17726 ;; *************** function _Decode_Scan_Code *****************
 17727 ;; Defined at:
 17728 ;;		line 770 in file "PS_2.c"
 17729 ;; Parameters:    Size  Location     Type
 17730 ;;  Code            1    wreg     unsigned char 
 17731 ;; Auto vars:     Size  Location     Type
 17732 ;;  Code            1    0[COMMON] unsigned char 
 17733 ;; Return value:  Size  Location     Type
 17734 ;;                  1    wreg      unsigned char 
 17735 ;; Registers used:
 17736 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 17737 ;; Tracked objects:
 17738 ;;		On entry : 0/0
 17739 ;;		On exit  : 0/0
 17740 ;;		Unchanged: 0/0
 17741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17743 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17745 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17746 ;;Total ram usage:        1 bytes
 17747 ;; Hardware stack levels used:    1
 17748 ;; This function calls:
 17749 ;;		Nothing
 17750 ;; This function is called by:
 17751 ;;		_Process_PS2_ScanCode
 17752 ;; This function uses a non-reentrant model
 17753 ;;
 17754                           
 17755                           
 17756                           ;psect for function _Decode_Scan_Code
 17757  195C                     _Decode_Scan_Code:	
 17758                           
 17759                           ;incstack = 0
 17760                           ; Regs used in _Decode_Scan_Code: [wreg-fsr0h+status,2+status,0+pclath]
 17761                           ;Decode_Scan_Code@Code stored from wreg
 17762  195C  00F0               	movwf	Decode_Scan_Code@Code
 17763                           
 17764                           ;PS_2.c: 772: Code -= 13;
 17765  195D  300D               	movlw	13
 17766  195E  02F0               	subwf	Decode_Scan_Code@Code,f
 17767                           
 17768                           ;PS_2.c: 773: if(Code <=112)
 17769  195F  3071               	movlw	113
 17770  1960  0270               	subwf	Decode_Scan_Code@Code,w
 17771  1961  1803               	skipnc
 17772  1962  296C               	goto	i1l4872
 17773                           
 17774                           ;PS_2.c: 774: {
 17775                           ;PS_2.c: 775: return ScanCode[Code];
 17776  1963  0870               	movf	Decode_Scan_Code@Code,w
 17777  1964  3E84               	addlw	low (_ScanCode| (0+32768))
 17778  1965  0084               	movwf	4
 17779  1966  3087               	movlw	high (_ScanCode| (0+32768))
 17780  1967  1803               	skipnc
 17781  1968  3E01               	addlw	1
 17782  1969  0085               	movwf	5
 17783  196A  0800               	movf	0,w	;code access
 17784                           
 17785                           ;PS_2.c: 776: }
 17786  196B  0008               	return
 17787  196C                     i1l4872:	
 17788                           
 17789                           ;PS_2.c: 777: else
 17790                           ;PS_2.c: 778: {
 17791                           ;PS_2.c: 779: return 0;
 17792  196C  3000               	movlw	0
 17793  196D  0008               	return
 17794  196E                     __end_of_Decode_Scan_Code:	
 17795                           
 17796                           	psect	text75
 17797  1D06                     __ptext75:	
 17798 ;; *************** function _BufferShiftBack *****************
 17799 ;; Defined at:
 17800 ;;		line 179 in file "MISC.c"
 17801 ;; Parameters:    Size  Location     Type
 17802 ;;  buffer          1    wreg     PTR unsigned char 
 17803 ;;		 -> PS_2_ScanCodes(12), 
 17804 ;;  shift           1    0[COMMON] unsigned char 
 17805 ;;  size            1    1[COMMON] unsigned char 
 17806 ;; Auto vars:     Size  Location     Type
 17807 ;;  buffer          1    7[COMMON] PTR unsigned char 
 17808 ;;		 -> PS_2_ScanCodes(12), 
 17809 ;;  i               1    6[COMMON] unsigned char 
 17810 ;; Return value:  Size  Location     Type
 17811 ;;                  1    wreg      unsigned char 
 17812 ;; Registers used:
 17813 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17814 ;; Tracked objects:
 17815 ;;		On entry : 0/0
 17816 ;;		On exit  : 0/0
 17817 ;;		Unchanged: 0/0
 17818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17819 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17820 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17821 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17822 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17823 ;;Total ram usage:        8 bytes
 17824 ;; Hardware stack levels used:    1
 17825 ;; This function calls:
 17826 ;;		Nothing
 17827 ;; This function is called by:
 17828 ;;		_Process_PS2_ScanCode
 17829 ;; This function uses a non-reentrant model
 17830 ;;
 17831                           
 17832                           
 17833                           ;psect for function _BufferShiftBack
 17834  1D06                     _BufferShiftBack:	
 17835                           
 17836                           ;incstack = 0
 17837                           ; Regs used in _BufferShiftBack: [wreg+fsr1l+fsr1h+status,2+status,0]
 17838                           ;BufferShiftBack@buffer stored from wreg
 17839  1D06  00F7               	movwf	BufferShiftBack@buffer
 17840                           
 17841                           ;MISC.c: 181: unsigned char i=0;
 17842  1D07  01F6               	clrf	BufferShiftBack@i
 17843                           
 17844                           ;MISC.c: 182: if(shift > size)
 17845  1D08  0870               	movf	BufferShiftBack@shift,w
 17846  1D09  0271               	subwf	BufferShiftBack@size,w
 17847  1D0A  1C03               	btfss	3,0
 17848  1D0B  0008               	return
 17849                           
 17850                           ;MISC.c: 185: }
 17851                           ;MISC.c: 186: for(i = 0; i < size; i++)
 17852                           
 17853                           ;MISC.c: 183: {
 17854                           ;MISC.c: 184: return 0;
 17855                           ;	Return value of _BufferShiftBack is never used
 17856  1D0C  01F6               	clrf	BufferShiftBack@i
 17857  1D0D                     i1l4704:	
 17858  1D0D  0871               	movf	BufferShiftBack@size,w
 17859  1D0E  0276               	subwf	BufferShiftBack@i,w
 17860  1D0F  1803               	btfsc	3,0
 17861  1D10  0008               	return
 17862                           
 17863                           ;MISC.c: 187: {
 17864                           ;MISC.c: 188: if(i < (size - shift))
 17865  1D11  0870               	movf	BufferShiftBack@shift,w
 17866  1D12  00F2               	movwf	??_BufferShiftBack
 17867  1D13  01F3               	clrf	??_BufferShiftBack+1
 17868  1D14  09F2               	comf	??_BufferShiftBack,f
 17869  1D15  09F3               	comf	??_BufferShiftBack+1,f
 17870  1D16  0AF2               	incf	??_BufferShiftBack,f
 17871  1D17  1903               	skipnz
 17872  1D18  0AF3               	incf	??_BufferShiftBack+1,f
 17873  1D19  0871               	movf	BufferShiftBack@size,w
 17874  1D1A  0772               	addwf	??_BufferShiftBack,w
 17875  1D1B  00F4               	movwf	??_BufferShiftBack+2
 17876  1D1C  0873               	movf	??_BufferShiftBack+1,w
 17877  1D1D  1803               	skipnc
 17878  1D1E  0A73               	incf	??_BufferShiftBack+1,w
 17879  1D1F  00F5               	movwf	??_BufferShiftBack+3
 17880  1D20  0875               	movf	??_BufferShiftBack+3,w
 17881  1D21  3A80               	xorlw	128
 17882  1D22  3C80               	sublw	128
 17883  1D23  1D03               	skipz
 17884  1D24  2D27               	goto	u528_25
 17885  1D25  0874               	movf	??_BufferShiftBack+2,w
 17886  1D26  0276               	subwf	BufferShiftBack@i,w
 17887  1D27                     u528_25:	
 17888  1D27  1803               	skipnc
 17889  1D28  2D3B               	goto	i1l4700
 17890                           
 17891                           ;MISC.c: 189: {
 17892                           ;MISC.c: 190: buffer[i] = buffer[i+shift];
 17893  1D29  0876               	movf	BufferShiftBack@i,w
 17894  1D2A  0770               	addwf	BufferShiftBack@shift,w
 17895  1D2B  0777               	addwf	BufferShiftBack@buffer,w
 17896  1D2C  00F2               	movwf	??_BufferShiftBack
 17897  1D2D  0872               	movf	??_BufferShiftBack,w
 17898  1D2E  0086               	movwf	6
 17899  1D2F  0187               	clrf	7
 17900  1D30  0801               	movf	1,w
 17901  1D31  00F3               	movwf	??_BufferShiftBack+1
 17902  1D32  0876               	movf	BufferShiftBack@i,w
 17903  1D33  0777               	addwf	BufferShiftBack@buffer,w
 17904  1D34  00F4               	movwf	??_BufferShiftBack+2
 17905  1D35  0874               	movf	??_BufferShiftBack+2,w
 17906  1D36  0086               	movwf	6
 17907  1D37  0187               	clrf	7
 17908  1D38  0873               	movf	??_BufferShiftBack+1,w
 17909  1D39  0081               	movwf	1
 17910                           
 17911                           ;MISC.c: 191: }
 17912  1D3A  2D42               	goto	i1l4702
 17913  1D3B                     i1l4700:	
 17914                           
 17915                           ;MISC.c: 192: else
 17916                           ;MISC.c: 193: {
 17917                           ;MISC.c: 194: buffer[i] = 0;
 17918  1D3B  0876               	movf	BufferShiftBack@i,w
 17919  1D3C  0777               	addwf	BufferShiftBack@buffer,w
 17920  1D3D  00F2               	movwf	??_BufferShiftBack
 17921  1D3E  0872               	movf	??_BufferShiftBack,w
 17922  1D3F  0086               	movwf	6
 17923  1D40  0187               	clrf	7
 17924  1D41  0181               	clrf	1
 17925  1D42                     i1l4702:	
 17926  1D42  3001               	movlw	1
 17927  1D43  00F2               	movwf	??_BufferShiftBack
 17928  1D44  0872               	movf	??_BufferShiftBack,w
 17929  1D45  07F6               	addwf	BufferShiftBack@i,f
 17930  1D46  2D0D               	goto	i1l4704
 17931  1D47                     __end_of_BufferShiftBack:	
 17932                           ;MISC.c: 195: }
 17933                           ;MISC.c: 196: }
 17934                           ;MISC.c: 197: return 1;
 17935                           ;	Return value of _BufferShiftBack is never used
 17936                           
 17937                           
 17938                           	psect	text76
 17939  1E18                     __ptext76:	
 17940 ;; *************** function _PS2RawToScan *****************
 17941 ;; Defined at:
 17942 ;;		line 1103 in file "PS_2.c"
 17943 ;; Parameters:    Size  Location     Type
 17944 ;;  Raw             2    8[COMMON] unsigned int 
 17945 ;; Auto vars:     Size  Location     Type
 17946 ;;  temp            2   10[COMMON] unsigned int 
 17947 ;; Return value:  Size  Location     Type
 17948 ;;                  2    8[COMMON] unsigned int 
 17949 ;; Registers used:
 17950 ;;		wreg, status,2, status,0, pclath, cstack
 17951 ;; Tracked objects:
 17952 ;;		On entry : 0/0
 17953 ;;		On exit  : 0/0
 17954 ;;		Unchanged: 0/0
 17955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17956 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17957 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17958 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17959 ;;      Totals:         4       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17960 ;;Total ram usage:       13 bytes
 17961 ;; Hardware stack levels used:    1
 17962 ;; Hardware stack levels required when called:    1
 17963 ;; This function calls:
 17964 ;;		_Reverse_Byte
 17965 ;;		i1_CheckSum_byte
 17966 ;; This function is called by:
 17967 ;;		_isr
 17968 ;; This function uses a non-reentrant model
 17969 ;;
 17970                           
 17971                           
 17972                           ;psect for function _PS2RawToScan
 17973  1E18                     _PS2RawToScan:	
 17974                           
 17975                           ;PS_2.c: 1105: unsigned int temp;
 17976                           ;PS_2.c: 1107: if(CheckSum_byte((Raw >> 2) & 0xFF , 3) == ((Raw & 0x02)>> 1))
 17977                           
 17978                           ;incstack = 0
 17979                           ; Regs used in _PS2RawToScan: [wreg+status,2+status,0+pclath+cstack]
 17980  1E18  0879               	movf	PS2RawToScan@Raw+1,w
 17981  1E19  0020               	movlb	0	; select bank0
 17982  1E1A  00A1               	movwf	??_PS2RawToScan+1
 17983  1E1B  0878               	movf	PS2RawToScan@Raw,w
 17984  1E1C  00A0               	movwf	??_PS2RawToScan
 17985  1E1D  36A1               	lsrf	??_PS2RawToScan+1,f
 17986  1E1E  0CA0               	rrf	??_PS2RawToScan,f
 17987  1E1F  3001               	movlw	1
 17988  1E20  0520               	andwf	??_PS2RawToScan,w
 17989  1E21  00A2               	movwf	??_PS2RawToScan+2
 17990  1E22  3000               	movlw	0
 17991  1E23  0521               	andwf	??_PS2RawToScan+1,w
 17992  1E24  00A3               	movwf	??_PS2RawToScan+3
 17993  1E25  0879               	movf	PS2RawToScan@Raw+1,w
 17994  1E26  00A5               	movwf	??_PS2RawToScan+5
 17995  1E27  0878               	movf	PS2RawToScan@Raw,w
 17996  1E28  00A4               	movwf	??_PS2RawToScan+4
 17997  1E29  36A5               	lsrf	??_PS2RawToScan+5,f
 17998  1E2A  0CA4               	rrf	??_PS2RawToScan+4,f
 17999  1E2B  36A5               	lsrf	??_PS2RawToScan+5,f
 18000  1E2C  0CA4               	rrf	??_PS2RawToScan+4,f
 18001  1E2D  30FF               	movlw	255
 18002  1E2E  0524               	andwf	??_PS2RawToScan+4,w
 18003  1E2F  00F0               	movwf	i1CheckSum_byte@This
 18004  1E30  3000               	movlw	0
 18005  1E31  0525               	andwf	??_PS2RawToScan+5,w
 18006  1E32  00F1               	movwf	i1CheckSum_byte@This+1
 18007  1E33  3003               	movlw	3
 18008  1E34  00A6               	movwf	??_PS2RawToScan+6
 18009  1E35  0826               	movf	??_PS2RawToScan+6,w
 18010  1E36  00F2               	movwf	i1CheckSum_byte@Odd_Even
 18011  1E37  319B  232B  319E   	fcall	i1_CheckSum_byte
 18012  1E3A  0020               	movlb	0	; select bank0
 18013  1E3B  00A7               	movwf	??_PS2RawToScan+7
 18014  1E3C  01A8               	clrf	??_PS2RawToScan+8
 18015  1E3D  0823               	movf	??_PS2RawToScan+3,w
 18016  1E3E  0628               	xorwf	??_PS2RawToScan+8,w
 18017  1E3F  1D03               	skipz
 18018  1E40  2E43               	goto	u599_25
 18019  1E41  0822               	movf	??_PS2RawToScan+2,w
 18020  1E42  0627               	xorwf	??_PS2RawToScan+7,w
 18021  1E43                     u599_25:	
 18022  1E43  1D03               	skipz
 18023  1E44  2E5F               	goto	i1l5184
 18024                           
 18025                           ;PS_2.c: 1108: {
 18026                           ;PS_2.c: 1110: temp = ((Raw >> 2) & 0xFF);
 18027  1E45  0879               	movf	PS2RawToScan@Raw+1,w
 18028  1E46  00A1               	movwf	??_PS2RawToScan+1
 18029  1E47  0878               	movf	PS2RawToScan@Raw,w
 18030  1E48  00A0               	movwf	??_PS2RawToScan
 18031  1E49  36A1               	lsrf	??_PS2RawToScan+1,f
 18032  1E4A  0CA0               	rrf	??_PS2RawToScan,f
 18033  1E4B  36A1               	lsrf	??_PS2RawToScan+1,f
 18034  1E4C  0CA0               	rrf	??_PS2RawToScan,f
 18035  1E4D  30FF               	movlw	255
 18036  1E4E  0520               	andwf	??_PS2RawToScan,w
 18037  1E4F  00FA               	movwf	PS2RawToScan@temp
 18038  1E50  3000               	movlw	0
 18039  1E51  0521               	andwf	??_PS2RawToScan+1,w
 18040  1E52  00FB               	movwf	PS2RawToScan@temp+1
 18041                           
 18042                           ;PS_2.c: 1111: temp = (unsigned int) Reverse_Byte((unsigned char) temp);
 18043  1E53  087A               	movf	PS2RawToScan@temp,w
 18044  1E54  3190  200B  319E   	fcall	_Reverse_Byte
 18045  1E57  0020               	movlb	0	; select bank0
 18046  1E58  00A0               	movwf	??_PS2RawToScan
 18047  1E59  01A1               	clrf	??_PS2RawToScan+1
 18048  1E5A  0820               	movf	??_PS2RawToScan,w
 18049  1E5B  00FA               	movwf	PS2RawToScan@temp
 18050  1E5C  0821               	movf	??_PS2RawToScan+1,w
 18051  1E5D  00FB               	movwf	PS2RawToScan@temp+1
 18052                           
 18053                           ;PS_2.c: 1113: }
 18054  1E5E  2E61               	goto	i1l5186
 18055  1E5F                     i1l5184:	
 18056                           
 18057                           ;PS_2.c: 1114: else
 18058                           ;PS_2.c: 1115: {
 18059                           ;PS_2.c: 1117: temp = 0;
 18060  1E5F  01FA               	clrf	PS2RawToScan@temp
 18061  1E60  01FB               	clrf	PS2RawToScan@temp+1
 18062  1E61                     i1l5186:	
 18063                           
 18064                           ;PS_2.c: 1118: }
 18065                           ;PS_2.c: 1119: return temp;
 18066  1E61  087B               	movf	PS2RawToScan@temp+1,w
 18067  1E62  01F9               	clrf	?_PS2RawToScan+1
 18068  1E63  07F9               	addwf	?_PS2RawToScan+1,f
 18069  1E64  087A               	movf	PS2RawToScan@temp,w
 18070  1E65  01F8               	clrf	?_PS2RawToScan
 18071  1E66  07F8               	addwf	?_PS2RawToScan,f
 18072  1E67  0008               	return
 18073  1E68                     __end_of_PS2RawToScan:	
 18074                           
 18075                           	psect	text77
 18076  1B2B                     __ptext77:	
 18077 ;; *************** function i1_CheckSum_byte *****************
 18078 ;; Defined at:
 18079 ;;		line 71 in file "MISC.c"
 18080 ;; Parameters:    Size  Location     Type
 18081 ;;  This            2    0[COMMON] unsigned int 
 18082 ;;  Odd_Even        1    2[COMMON] unsigned char 
 18083 ;; Auto vars:     Size  Location     Type
 18084 ;;  CheckSum_byt    2    4[COMMON] unsigned int 
 18085 ;;  CheckSum_byt    1    7[COMMON] unsigned char 
 18086 ;;  CheckSum_byt    1    6[COMMON] unsigned char 
 18087 ;; Return value:  Size  Location     Type
 18088 ;;                  1    wreg      unsigned char 
 18089 ;; Registers used:
 18090 ;;		wreg, status,2, status,0
 18091 ;; Tracked objects:
 18092 ;;		On entry : 0/0
 18093 ;;		On exit  : 0/0
 18094 ;;		Unchanged: 0/0
 18095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18096 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18097 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18098 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18099 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18100 ;;Total ram usage:        8 bytes
 18101 ;; Hardware stack levels used:    1
 18102 ;; This function calls:
 18103 ;;		Nothing
 18104 ;; This function is called by:
 18105 ;;		_PS2RawToScan
 18106 ;;		i1_UARTchar
 18107 ;;		i1_Send_PS2
 18108 ;; This function uses a non-reentrant model
 18109 ;;
 18110                           
 18111                           
 18112                           ;psect for function i1_CheckSum_byte
 18113  1B2B                     i1_CheckSum_byte:	
 18114                           
 18115                           ;MISC.c: 73: char i = 0;
 18116                           
 18117                           ;incstack = 0
 18118                           ; Regs used in i1_CheckSum_byte: [wreg+status,2+status,0]
 18119  1B2B  01F7               	clrf	i1CheckSum_byte@i
 18120                           
 18121                           ;MISC.c: 74: unsigned char Parity = 0;
 18122  1B2C  01F6               	clrf	i1CheckSum_byte@Parity
 18123                           
 18124                           ;MISC.c: 75: unsigned int ThisTemp = This;
 18125  1B2D  0871               	movf	i1CheckSum_byte@This+1,w
 18126  1B2E  01F5               	clrf	i1CheckSum_byte@ThisTemp+1
 18127  1B2F  07F5               	addwf	i1CheckSum_byte@ThisTemp+1,f
 18128  1B30  0870               	movf	i1CheckSum_byte@This,w
 18129  1B31  01F4               	clrf	i1CheckSum_byte@ThisTemp
 18130  1B32  07F4               	addwf	i1CheckSum_byte@ThisTemp,f
 18131                           
 18132                           ;MISC.c: 77: for (i =0; i<8; i++)
 18133  1B33  01F7               	clrf	i1CheckSum_byte@i
 18134  1B34  3008               	movlw	8
 18135  1B35  0277               	subwf	i1CheckSum_byte@i,w
 18136  1B36  1803               	btfsc	3,0
 18137  1B37  2B4B               	goto	i1l3784
 18138  1B38                     i1l267:	
 18139                           
 18140                           ;MISC.c: 78: {
 18141                           ;MISC.c: 79: if((ThisTemp & 0x01) == 1)
 18142  1B38  1C74               	btfss	i1CheckSum_byte@ThisTemp,0
 18143  1B39  2B3E               	goto	i1l269
 18144                           
 18145                           ;MISC.c: 80: {
 18146                           ;MISC.c: 81: Parity++;
 18147  1B3A  3001               	movlw	1
 18148  1B3B  00F3               	movwf	??i1_CheckSum_byte
 18149  1B3C  0873               	movf	??i1_CheckSum_byte,w
 18150  1B3D  07F6               	addwf	i1CheckSum_byte@Parity,f
 18151  1B3E                     i1l269:	
 18152                           
 18153                           ;MISC.c: 82: }
 18154                           ;MISC.c: 83: ThisTemp >>= 1;
 18155  1B3E  3001               	movlw	1
 18156  1B3F                     u384_25:	
 18157  1B3F  36F5               	lsrf	i1CheckSum_byte@ThisTemp+1,f
 18158  1B40  0CF4               	rrf	i1CheckSum_byte@ThisTemp,f
 18159  1B41  0B89               	decfsz	9,f
 18160  1B42  2B3F               	goto	u384_25
 18161  1B43  3001               	movlw	1
 18162  1B44  00F3               	movwf	??i1_CheckSum_byte
 18163  1B45  0873               	movf	??i1_CheckSum_byte,w
 18164  1B46  07F7               	addwf	i1CheckSum_byte@i,f
 18165  1B47  3008               	movlw	8
 18166  1B48  0277               	subwf	i1CheckSum_byte@i,w
 18167  1B49  1C03               	skipc
 18168  1B4A  2B38               	goto	i1l267
 18169  1B4B                     i1l3784:	
 18170                           
 18171                           ;MISC.c: 84: }
 18172                           ;MISC.c: 85: if(Odd_Even == 3)
 18173  1B4B  0872               	movf	i1CheckSum_byte@Odd_Even,w
 18174  1B4C  3A03               	xorlw	3
 18175  1B4D  1D03               	skipz
 18176  1B4E  2B55               	goto	i1l270
 18177                           
 18178                           ;MISC.c: 86: {
 18179                           ;MISC.c: 87: if(Parity % 2 == 0)
 18180  1B4F  1876               	btfsc	i1CheckSum_byte@Parity,0
 18181  1B50  2B53               	goto	i1l3792
 18182                           
 18183                           ;MISC.c: 88: {
 18184                           ;MISC.c: 89: return 1;
 18185  1B51  3001               	movlw	1
 18186  1B52  0008               	return
 18187  1B53                     i1l3792:	
 18188                           
 18189                           ;MISC.c: 90: }
 18190                           ;MISC.c: 91: return 0;
 18191  1B53  3000               	movlw	0
 18192                           
 18193                           ;MISC.c: 92: }
 18194  1B54  0008               	return
 18195  1B55                     i1l270:	
 18196                           
 18197                           ;MISC.c: 93: else
 18198                           ;MISC.c: 94: {
 18199                           ;MISC.c: 95: if(Parity % 2 == 1)
 18200  1B55  1C76               	btfss	i1CheckSum_byte@Parity,0
 18201  1B56  2B59               	goto	i1l3802
 18202                           
 18203                           ;MISC.c: 96: {
 18204                           ;MISC.c: 97: return 1;
 18205  1B57  3001               	movlw	1
 18206  1B58  0008               	return
 18207  1B59                     i1l3802:	
 18208                           
 18209                           ;MISC.c: 98: }
 18210                           ;MISC.c: 99: return 0;
 18211  1B59  3000               	movlw	0
 18212  1B5A  0008               	return
 18213  1B5B                     __end_ofi1_CheckSum_byte:	
 18214                           
 18215                           	psect	text78
 18216  100B                     __ptext78:	
 18217 ;; *************** function _Reverse_Byte *****************
 18218 ;; Defined at:
 18219 ;;		line 108 in file "MISC.c"
 18220 ;; Parameters:    Size  Location     Type
 18221 ;;  This            1    wreg     unsigned char 
 18222 ;; Auto vars:     Size  Location     Type
 18223 ;;  This            1    3[COMMON] unsigned char 
 18224 ;;  temp            1    2[COMMON] unsigned char 
 18225 ;; Return value:  Size  Location     Type
 18226 ;;                  1    wreg      unsigned char 
 18227 ;; Registers used:
 18228 ;;		wreg, status,2, status,0
 18229 ;; Tracked objects:
 18230 ;;		On entry : 0/0
 18231 ;;		On exit  : 0/0
 18232 ;;		Unchanged: 0/0
 18233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18235 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18236 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18237 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18238 ;;Total ram usage:        4 bytes
 18239 ;; Hardware stack levels used:    1
 18240 ;; This function calls:
 18241 ;;		Nothing
 18242 ;; This function is called by:
 18243 ;;		_PS2RawToScan
 18244 ;; This function uses a non-reentrant model
 18245 ;;
 18246                           
 18247                           
 18248                           ;psect for function _Reverse_Byte
 18249  100B                     _Reverse_Byte:	
 18250                           
 18251                           ;incstack = 0
 18252                           ; Regs used in _Reverse_Byte: [wreg+status,2+status,0]
 18253                           ;Reverse_Byte@This stored from wreg
 18254  100B  00F3               	movwf	Reverse_Byte@This
 18255                           
 18256                           ;MISC.c: 110: unsigned char temp=0;
 18257  100C  01F2               	clrf	Reverse_Byte@temp
 18258                           
 18259                           ;MISC.c: 112: temp += (This & 0x01) << 7;
 18260  100D  0873               	movf	Reverse_Byte@This,w
 18261  100E  3901               	andlw	1
 18262  100F  00F0               	movwf	??_Reverse_Byte
 18263  1010  3006               	movlw	6
 18264  1011                     u518_25:	
 18265  1011  35F0               	lslf	??_Reverse_Byte,f
 18266  1012  3EFF               	addlw	-1
 18267  1013  1D03               	skipz
 18268  1014  2811               	goto	u518_25
 18269  1015  3570               	lslf	??_Reverse_Byte,w
 18270  1016  00F1               	movwf	??_Reverse_Byte+1
 18271  1017  0871               	movf	??_Reverse_Byte+1,w
 18272  1018  07F2               	addwf	Reverse_Byte@temp,f
 18273                           
 18274                           ;MISC.c: 113: temp += (This & 0x02) << 5;
 18275  1019  0873               	movf	Reverse_Byte@This,w
 18276  101A  3902               	andlw	2
 18277  101B  00F0               	movwf	??_Reverse_Byte
 18278  101C  3004               	movlw	4
 18279  101D                     u519_25:	
 18280  101D  35F0               	lslf	??_Reverse_Byte,f
 18281  101E  3EFF               	addlw	-1
 18282  101F  1D03               	skipz
 18283  1020  281D               	goto	u519_25
 18284  1021  3570               	lslf	??_Reverse_Byte,w
 18285  1022  00F1               	movwf	??_Reverse_Byte+1
 18286  1023  0871               	movf	??_Reverse_Byte+1,w
 18287  1024  07F2               	addwf	Reverse_Byte@temp,f
 18288                           
 18289                           ;MISC.c: 114: temp += (This & 0x04) << 3;
 18290  1025  0873               	movf	Reverse_Byte@This,w
 18291  1026  3904               	andlw	4
 18292  1027  00F0               	movwf	??_Reverse_Byte
 18293  1028  3002               	movlw	2
 18294  1029                     u520_25:	
 18295  1029  35F0               	lslf	??_Reverse_Byte,f
 18296  102A  3EFF               	addlw	-1
 18297  102B  1D03               	skipz
 18298  102C  2829               	goto	u520_25
 18299  102D  3570               	lslf	??_Reverse_Byte,w
 18300  102E  00F1               	movwf	??_Reverse_Byte+1
 18301  102F  0871               	movf	??_Reverse_Byte+1,w
 18302  1030  07F2               	addwf	Reverse_Byte@temp,f
 18303                           
 18304                           ;MISC.c: 115: temp += (This & 0x08) << 1;
 18305  1031  0873               	movf	Reverse_Byte@This,w
 18306  1032  3908               	andlw	8
 18307  1033  0709               	addwf	9,w
 18308  1034  00F0               	movwf	??_Reverse_Byte
 18309  1035  0870               	movf	??_Reverse_Byte,w
 18310  1036  07F2               	addwf	Reverse_Byte@temp,f
 18311                           
 18312                           ;MISC.c: 116: temp += (This & 0x10) >> 1;
 18313  1037  3673               	lsrf	Reverse_Byte@This,w
 18314  1038  3908               	andlw	8
 18315  1039  00F0               	movwf	??_Reverse_Byte
 18316  103A  0870               	movf	??_Reverse_Byte,w
 18317  103B  07F2               	addwf	Reverse_Byte@temp,f
 18318                           
 18319                           ;MISC.c: 117: temp += (This & 0x20) >> 3;
 18320  103C  0873               	movf	Reverse_Byte@This,w
 18321  103D  00F0               	movwf	??_Reverse_Byte
 18322  103E  3003               	movlw	3
 18323  103F                     u521_25:	
 18324  103F  36F0               	lsrf	??_Reverse_Byte,f
 18325  1040  0B89               	decfsz	9,f
 18326  1041  283F               	goto	u521_25
 18327  1042  0870               	movf	??_Reverse_Byte,w
 18328  1043  3904               	andlw	4
 18329  1044  00F1               	movwf	??_Reverse_Byte+1
 18330  1045  0871               	movf	??_Reverse_Byte+1,w
 18331  1046  07F2               	addwf	Reverse_Byte@temp,f
 18332                           
 18333                           ;MISC.c: 118: temp += (This & 0x40) >> 5;
 18334  1047  0873               	movf	Reverse_Byte@This,w
 18335  1048  00F0               	movwf	??_Reverse_Byte
 18336  1049  3005               	movlw	5
 18337  104A                     u522_25:	
 18338  104A  36F0               	lsrf	??_Reverse_Byte,f
 18339  104B  0B89               	decfsz	9,f
 18340  104C  284A               	goto	u522_25
 18341  104D  0870               	movf	??_Reverse_Byte,w
 18342  104E  3902               	andlw	2
 18343  104F  00F1               	movwf	??_Reverse_Byte+1
 18344  1050  0871               	movf	??_Reverse_Byte+1,w
 18345  1051  07F2               	addwf	Reverse_Byte@temp,f
 18346                           
 18347                           ;MISC.c: 119: temp += (This & 0x80) >> 7;
 18348  1052  0873               	movf	Reverse_Byte@This,w
 18349  1053  00F0               	movwf	??_Reverse_Byte
 18350  1054  3007               	movlw	7
 18351  1055                     u523_25:	
 18352  1055  36F0               	lsrf	??_Reverse_Byte,f
 18353  1056  0B89               	decfsz	9,f
 18354  1057  2855               	goto	u523_25
 18355  1058  0870               	movf	??_Reverse_Byte,w
 18356  1059  3901               	andlw	1
 18357  105A  00F1               	movwf	??_Reverse_Byte+1
 18358  105B  0871               	movf	??_Reverse_Byte+1,w
 18359  105C  07F2               	addwf	Reverse_Byte@temp,f
 18360                           
 18361                           ;MISC.c: 121: return temp;
 18362  105D  0872               	movf	Reverse_Byte@temp,w
 18363  105E  0008               	return
 18364  105F                     __end_of_Reverse_Byte:	
 18365  007E                     btemp	set	126	;btemp
 18366  007E                     pic14e$flags	set	126
 18367  007E                     wtemp	set	126
 18368  007E                     wtemp0	set	126
 18369  0080                     wtemp1	set	128
 18370  0082                     wtemp2	set	130
 18371  0084                     wtemp3	set	132
 18372  0086                     wtemp4	set	134
 18373  0088                     wtemp5	set	136
 18374  007F                     wtemp6	set	127
 18375  007E                     ttemp	set	126
 18376  007E                     ttemp0	set	126
 18377  0081                     ttemp1	set	129
 18378  0084                     ttemp2	set	132
 18379  0087                     ttemp3	set	135
 18380  007F                     ttemp4	set	127
 18381  007E                     ltemp	set	126
 18382  007E                     ltemp0	set	126
 18383  0082                     ltemp1	set	130
 18384  0086                     ltemp2	set	134
 18385  0080                     ltemp3	set	128


Data Sizes:
    Strings     210
    Constant    623
    Data        8
    BSS         54
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     36      69
    BANK2            80     63      63
    BANK3            80     65      80
    BANK4            80     55      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_18(CODE[24]), STR_11(CODE[12]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 60
		 -> Process_PS2_ScanCode@buf(BANK3[60]), SetBaud@buf(BANK2[50]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1045$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    WriteFlash_Sequential@buffer	PTR unsigned int  size(1) Largest target is 4
		 -> MEM(BANK1[4]), 

    UARTstringWAIT@data	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_20(CODE[20]), STR_19(CODE[3]), Process_PS2_ScanCode@buf(BANK3[60]), STR_17(CODE[3]), 
		 -> STR_16(CODE[3]), STR_15(CODE[19]), STR_14(CODE[19]), STR_13(CODE[3]), 
		 -> STR_12(CODE[3]), SetBaud@buf(BANK2[50]), STR_10(CODE[21]), STR_9(CODE[3]), 
		 -> STR_8(CODE[3]), NoParityMSG(CODE[20]), SpaceParityMSG(CODE[16]), MarkParityMSG(CODE[15]), 
		 -> EvenParityMSG(CODE[22]), OddParityMSG(CODE[21]), STR_7(CODE[3]), STR_6(CODE[33]), 
		 -> STR_5(CODE[3]), Version(CODE[9]), STR_4(CODE[19]), STR_3(CODE[28]), 
		 -> STR_2(CODE[8]), STR_1(CODE[7]), VoltageMSG(CODE[13]), 

    BufferShiftBack@buffer	PTR unsigned char  size(1) Largest target is 12
		 -> PS_2_ScanCodes(BANK1[12]), 

    cleanBuffer@data	PTR unsigned char  size(1) Largest target is 12
		 -> PS_2_ScanCodes(BANK1[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _ResendLast->i1_Send_PS2
    _Process_PS2_ScanCode->i1_Send_PS2
    _Process_PS2_ScanCode->i1_UARTchar
    i1_Send_PS2->i1_delayUS
    _UART_send_break_timed->i1_delayUS
    i1_UARTstringWAIT->i1_UARTchar
    i1_UARTchar->i1_CheckSum_byte
    i1_ReadBaud->i1_ReadFlash_4Byte
    i1_ReadFlash_4Byte->i1_ReadFlash_2Byte
    i1_InitUART->i1___lldiv
    _sprintf->i1___lldiv
    ___llmod->i1___lldiv
    _WriteBaud->_WriteFlash_Sequential
    _WriteFlash_Sequential->i1_delayUS
    _PS2RawToScan->i1_CheckSum_byte

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _ResendLast->i1_Send_PS2
    _SetBaud->_WriteBaud
    i1_UARTstringWAIT->i1_UARTchar
    i1_ReadBaud->i1_ReadFlash_4Byte
    _sprintf->___llmod
    _WriteBaud->_WriteFlash_Sequential

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    _isr->_Process_PS2_ScanCode
    _Process_PS2_ScanCode->_SetBaud
    _SetBaud->_WriteBaud

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    _Process_PS2_ScanCode->_SetBaud

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    _isr->_Process_PS2_ScanCode

Critical Paths under _main in BANK4

    _main->_ReadVoltage
    _ReadVoltage->___ftmul
    ___lwtoft->___ftpack
    ___ftmul->___ftdiv
    ___ftdiv->___lwtoft
    _InternalADC_Read->_delayUS
    _Init_PS_2_Send->_Send_PS2
    _Send_PS2->_delayUS
    _Init_System->_InitUART
    _UARTstringWAIT->_UARTchar
    _UARTchar->_CheckSum_byte
    _ReadBaud->_ReadFlash_4Byte
    _ReadFlash_4Byte->_ReadFlash_2Byte
    _InitUART->___lldiv

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   36623
                                             53 BANK4      2     2      0
                _ConfigureOscillator
                            _InitApp
                        _Init_System
              _PS_2_ENABLE_INTERRUPT
                          _PS_2_INIT
                        _ReadVoltage
                     _UARTstringWAIT
                             ___ftge
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     814
                                              0 BANK4      9     3      6
 ---------------------------------------------------------------------------------
 (1) _ReadVoltage                                          9     6      3   10581
                                             44 BANK4      9     6      3
                 _DisableInternalADC
                   _InternalADC_Read
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             4     1      3    2481
                                              8 BANK4      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    3015
                                             28 BANK4     16    10      6
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2947
                                             12 BANK4     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2373
                                              0 BANK4      8     3      5
 ---------------------------------------------------------------------------------
 (2) _InternalADC_Read                                     5     3      2    2064
                                             10 BANK4      5     3      2
                            _delayUS
 ---------------------------------------------------------------------------------
 (2) _DisableInternalADC                                   1     1      0       0
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PS_2_INIT                                            0     0      0    5641
                         _Clock_TRIS
                          _Data_TRIS
                     _Init_PS_2_Send
                         _Timer2Init
 ---------------------------------------------------------------------------------
 (2) _Timer2Init                                           5     5      0      99
                                              0 BANK4      5     5      0
                           _Timer2ON
 ---------------------------------------------------------------------------------
 (3) _Timer2ON                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_PS_2_Send                                       0     0      0    5480
             _PS_2_DISABLE_INTERRUPT
                           _Send_PS2
                            _delayUS
 ---------------------------------------------------------------------------------
 (3) _Send_PS2                                             9     9      0    3416
                                             10 BANK4      9     9      0
                      _CheckSum_byte
                         _Clock_TRIS
                          _Data_TRIS
                      _READ_PS_2_PIN
                            _delayUS
 ---------------------------------------------------------------------------------
 (4) _READ_PS_2_PIN                                        1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Data_TRIS                                            1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Clock_TRIS                                           1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (3) _PS_2_DISABLE_INTERRUPT                               2     2      0      31
                                              0 BANK4      2     2      0
 ---------------------------------------------------------------------------------
 (1) _PS_2_ENABLE_INTERRUPT                                1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                         14    14      0   11209
                                             35 BANK4     14    14      0
                           _InitUART
                           _ReadBaud
                     _UARTstringWAIT
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) _UARTstringWAIT                                       4     2      2    6243
                                             15 BANK4      4     2      2
                           _UARTchar
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) _delayUS                                             10     6      4    2033
                                              0 BANK4     10     6      4
 ---------------------------------------------------------------------------------
 (2) _UARTchar                                             7     5      2    1919
                                              8 BANK4      7     5      2
                      _CheckSum_byte
 ---------------------------------------------------------------------------------
 (3) _CheckSum_byte                                        8     5      3     784
                                              0 BANK4      8     5      3
 ---------------------------------------------------------------------------------
 (2) _ReadBaud                                            16    12      4    1168
                                             18 BANK4     16    12      4
                    _ReadFlash_4Byte
 ---------------------------------------------------------------------------------
 (3) _ReadFlash_4Byte                                     13     9      4     803
                                              5 BANK4     13     9      4
                    _ReadFlash_2Byte
 ---------------------------------------------------------------------------------
 (4) _ReadFlash_2Byte                                      5     2      3     485
                                              0 BANK4      5     2      3
 ---------------------------------------------------------------------------------
 (2) _InitUART                                            21    16      5    1493
                                             14 BANK4     21    16      5
                         _CloseUSART
                          _OpenUSART
                          _ReadUSART
                            ___lldiv
                          _baudUSART
 ---------------------------------------------------------------------------------
 (3) _baudUSART                                            1     1      0      31
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     479
                                              0 BANK4     14     6      8
 ---------------------------------------------------------------------------------
 (3) _ReadUSART                                            2     2      0      34
                                              0 BANK4      2     2      0
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     387
                                              0 BANK4      3     1      2
 ---------------------------------------------------------------------------------
 (3) _CloseUSART                                           1     1      0       0
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  1     1      0       0
                                              0 BANK4      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  5     5      0   19523
                                             78 BANK0      2     2      0
                                             34 BANK1      2     2      0
                       _PS2RawToScan
               _Process_PS2_ScanCode
                         _ResendLast
                          _Timer2OFF
                        _Timer2Reset
           i1_PS_2_DISABLE_INTERRUPT
            i1_PS_2_ENABLE_INTERRUPT
                    i1_READ_PS_2_PIN
                         i1_Timer2ON
 ---------------------------------------------------------------------------------
 (6) i1_Timer2ON                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) i1_PS_2_ENABLE_INTERRUPT                              1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Timer2Reset                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Timer2OFF                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _ResendLast                                           0     0      0    1323
           i1_PS_2_DISABLE_INTERRUPT
                         i1_Send_PS2
 ---------------------------------------------------------------------------------
 (6) i1_PS_2_DISABLE_INTERRUPT                             2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _Process_PS2_ScanCode                                71    71      0   17335
                                             28 BANK1      6     6      0
                                              0 BANK3     65    65      0
                    _BufferShiftBack
                   _Decode_Scan_Code
          _Decode_Scan_Code_Function
        _Decode_Scan_Code_FunctionE0
             _Decode_Scan_Code_Shift
                           _ISNUMBER
                            _SetBaud
                    _UART_send_break
              _UART_send_break_timed
                             ___lmul
                        _cleanBuffer
                            _sprintf
                         i1_Send_PS2
                         i1_UARTchar
                   i1_UARTstringWAIT
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (7) i1_Send_PS2                                           9     9      0    1301
                                             10 COMMON     4     4      0
                                              0 BANK0      5     5      0
                    i1_CheckSum_byte
                       i1_Clock_TRIS
                        i1_Data_TRIS
                    i1_READ_PS_2_PIN
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (6) i1_READ_PS_2_PIN                                      1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_Data_TRIS                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_Clock_TRIS                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _cleanBuffer                                          5     3      2     193
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (7) ___lmul                                              12     4      8     220
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (7) _UART_send_break_timed                                3     1      2     620
                                             10 COMMON     3     1      2
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (7) _UART_send_break                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _SetBaud                                             76    71      5    7788
                                             15 BANK1     13     8      5
                                              0 BANK2     63    63      0
                          _WriteBaud
                            _sprintf
                         i1_InitUART
                         i1_ReadBaud
                   i1_UARTstringWAIT
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (7) i1_UARTstringWAIT                                     4     2      2    2145
                                              1 BANK0      4     2      2
                         i1_UARTchar
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (8) i1_UARTchar                                           7     5      2     947
                                              8 COMMON     6     4      2
                                              0 BANK0      1     1      0
                    i1_CheckSum_byte
 ---------------------------------------------------------------------------------
 (8) i1_ReadBaud                                          16    12      4     528
                                              4 BANK0     16    12      4
                  i1_ReadFlash_4Byte
 ---------------------------------------------------------------------------------
 (9) i1_ReadFlash_4Byte                                   13     9      4     387
                                              5 COMMON     9     5      4
                                              0 BANK0      4     4      0
                  i1_ReadFlash_2Byte
 ---------------------------------------------------------------------------------
 (8) i1_InitUART                                          21    16      5     822
                                              0 BANK0     21    16      5
                       i1_CloseUSART
                        i1_OpenUSART
                        i1_ReadUSART
                          i1___lldiv
                        i1_baudUSART
 ---------------------------------------------------------------------------------
 (9) i1_baudUSART                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) i1_ReadUSART                                          2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) i1_OpenUSART                                          3     1      2     246
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (9) i1_CloseUSART                                         1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _sprintf                                             22    16      6    1181
                                             10 BANK0     22    16      6
                            ___llmod
                          i1___lldiv
 ---------------------------------------------------------------------------------
 (8) i1___lldiv                                           14     6      8     266
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (8) ___llmod                                             10     2      8     287
                                              0 BANK0     10     2      8
                          i1___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (8) _WriteBaud                                           19    12      7    1928
                                             74 BANK0      4     4      0
                                              0 BANK1     15     8      7
              _WriteFlash_Sequential
 ---------------------------------------------------------------------------------
 (9) _WriteFlash_Sequential                               78    74      4    1625
                                             10 COMMON     4     0      4
                                              0 BANK0     74    74      0
                         _BlockErase
                             _UNLOCK
                  i1_ReadFlash_2Byte
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (8) i1_delayUS                                           10     6      4     534
                                              0 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (10) i1_ReadFlash_2Byte                                   5     2      3     222
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (10) _BlockErase                                          4     2      2     108
                                              0 COMMON     4     2      2
                             _UNLOCK
 ---------------------------------------------------------------------------------
 (10) _UNLOCK                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _ISNUMBER                                             1     1      0      44
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code_Shift                               1     1      0      45
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code_FunctionE0                          1     1      0      45
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code_Function                            1     1      0      44
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code                                     1     1      0      45
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _BufferShiftBack                                      8     6      2    1473
                                              0 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 (6) _PS2RawToScan                                        13    11      2     753
                                              8 COMMON     4     2      2
                                              0 BANK0      9     9      0
                       _Reverse_Byte
                    i1_CheckSum_byte
 ---------------------------------------------------------------------------------
 (8) i1_CheckSum_byte                                      8     5      3     369
                                              0 COMMON     8     5      3
 ---------------------------------------------------------------------------------
 (7) _Reverse_Byte                                         4     4      0     207
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _Init_System
     _InitUART
       _CloseUSART
       _OpenUSART
       _ReadUSART
       ___lldiv
       _baudUSART
     _ReadBaud
       _ReadFlash_4Byte
         _ReadFlash_2Byte
     _UARTstringWAIT
       _UARTchar
         _CheckSum_byte
       _delayUS
     _delayUS
   _PS_2_ENABLE_INTERRUPT
   _PS_2_INIT
     _Clock_TRIS
     _Data_TRIS
     _Init_PS_2_Send
       _PS_2_DISABLE_INTERRUPT
       _Send_PS2
         _CheckSum_byte
         _Clock_TRIS
         _Data_TRIS
         _READ_PS_2_PIN
         _delayUS
       _delayUS
     _Timer2Init
       _Timer2ON
   _ReadVoltage
     _DisableInternalADC
     _InternalADC_Read
       _delayUS
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _UARTstringWAIT
     _UARTchar
       _CheckSum_byte
     _delayUS
   ___ftge
   _delayUS

 _isr (ROOT)
   _PS2RawToScan
     _Reverse_Byte
     i1_CheckSum_byte
   _Process_PS2_ScanCode
     _BufferShiftBack
     _Decode_Scan_Code
     _Decode_Scan_Code_Function
     _Decode_Scan_Code_FunctionE0
     _Decode_Scan_Code_Shift
     _ISNUMBER
     _SetBaud
       _WriteBaud
         _WriteFlash_Sequential
           _BlockErase
             _UNLOCK
           _UNLOCK
           i1_ReadFlash_2Byte
           i1_delayUS
       _sprintf
         ___llmod
           i1___lldiv (ARG)
         i1___lldiv
       i1_InitUART
         i1_CloseUSART
         i1_OpenUSART
         i1_ReadUSART
         i1___lldiv
         i1_baudUSART
       i1_ReadBaud
         i1_ReadFlash_4Byte
           i1_ReadFlash_2Byte
       i1_UARTstringWAIT
         i1_UARTchar
           i1_CheckSum_byte
         i1_delayUS
       i1_delayUS
     _UART_send_break
     _UART_send_break_timed
       i1_delayUS
     ___lmul
     _cleanBuffer
     _sprintf
       ___llmod
         i1___lldiv (ARG)
       i1___lldiv
     i1_Send_PS2
       i1_CheckSum_byte
       i1_Clock_TRIS
       i1_Data_TRIS
       i1_READ_PS_2_PIN
       i1_delayUS
     i1_UARTchar
       i1_CheckSum_byte
     i1_UARTstringWAIT
       i1_UARTchar
         i1_CheckSum_byte
       i1_delayUS
     i1_delayUS
   _ResendLast
     i1_PS_2_DISABLE_INTERRUPT
     i1_Send_PS2
       i1_CheckSum_byte
       i1_Clock_TRIS
       i1_Data_TRIS
       i1_READ_PS_2_PIN
       i1_delayUS
   _Timer2OFF
   _Timer2Reset
   i1_PS_2_DISABLE_INTERRUPT
   i1_PS_2_ENABLE_INTERRUPT
   i1_READ_PS_2_PIN
   i1_Timer2ON

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     24      45       7       86.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     3F      3F       9       78.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50     41      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50     37      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     177      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     177      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Tue Mar 03 17:21:48 2015

                     _BufferShiftBack 1D06                _PS_2_DISABLE_INTERRUPT 19B7  
             Process_PS2_ScanCode@buf 01A0                            __CFG_CP$ON 0000  
                   ??_ReadFlash_2Byte 0223                     ??_ReadFlash_4Byte 0229  
                                   _i 00D4                        _ResendLastFlag 00D2  
            Process_PS2_ScanCode@temp 01E0                  i1InitUART@baudconfig 002F  
                  Data_TRIS@direction 0220                           __CFG_LVP$ON 0000  
                                 l160 16D7                                   l152 1627  
                                 l261 1C78                                   l253 0B4F  
                                 l270 1B86                                   l406 1F35  
                                 l407 1F38                                   l409 1F53  
                                 l434 1C23                                   l610 190E  
                                 l267 1B69                                   l259 1C5F  
                                 l436 1C42                                   l269 1B6F  
                                 l615 19D7                                   l393 1D71  
                                 l395 1D7B                                   l389 1D62  
                                 l590 18F6                                   l913 1BE1  
                                 l825 0ED9                                   l826 0F2E  
                                 l595 1008                                   l992 1CD5  
                                 l995 1CFA                                   _MEM 00E1  
                                 _PR2 001B                                   _isr 0004  
                _Process_PS2_ScanCode 00E1                           i1_baudUSART 188E  
             i1ReadFlash_4Byte@column 0077                          __CFG_BORV$LO 0000  
                                 wreg 0009            __size_ofi1_ReadFlash_2Byte 002A  
          __size_ofi1_ReadFlash_4Byte 0051            __end_of_ScanCodeFunctionE0 08D3  
             UART_send_break_timed@US 007A                          ___ftdiv@cntr 0236  
                        ___ftdiv@sign 023B                                  l1230 10A9  
                                l1224 1092                                  l6112 19C3  
                                l6130 1D57                                  l6028 19D5  
                                l6134 1D5C                                  l6126 1D51  
                                l6070 1B7C                                  l6054 1C82  
                                l6038 19DC                                  l6310 0FB9  
                                l6214 0EB6                                  l6152 1D7D  
                                l6144 1D69                                  l6320 0FBC  
                                l6240 0F05                                  l6224 0EDE  
                                l6216 0ED3                                  l6138 1D64  
                                l6322 0FD8                                  l6250 0F08  
                                l6226 0EE4                                  l6148 1D73  
                                l6180 1F1D                                  l6332 0FDB  
                                l6308 0F9D                                  l6260 0F39  
                                l6252 0F25                                  l6078 1B84  
                                l6334 0FF7                                  l6270 0F3C  
                                l6238 0EE9                                  l6088 1B8A  
                                l6184 1F3B                                  l6408 1C45  
                                l6272 0F58                                  l6360 107E  
                                l6352 1068                                  l6600 065F  
                                l6178 1F14                                  l6186 1F48  
                                l6282 0F5B                                  l6258 0F33  
                                l6444 1465                                  l6284 0F77  
                                l6356 106F                                  l6446 1469  
                                l6710 0AB4                                  l6366 1097  
                                l6358 1079                                  l6630 06CC  
                                l6622 06B8                                  l6606 0675  
                                l6384 1FBE                                  l6296 0F7E  
                                l6368 109F                                  l6394 1FEC  
                                l6386 1FCC                                  l6706 0AAB  
                                l6298 0F9A                                  l6634 06D4  
                                l6618 06B0                                  l6740 0B31  
                                l6564 12F5                                  ?_isr 0070  
      __size_of_PS_2_ENABLE_INTERRUPT 000C                                  l6654 1995  
                                l6398 1FF7                                  l6742 0B36  
                                l6558 12DF                                  l6830 169A  
                                l6822 1650                                  l6656 199B  
                                l6736 0B28                                  l6840 16DB  
                                l6832 169E                                  l6738 0B2C  
                                l6746 0B3B                                  l6586 134F  
                                l6578 1336                                  l6826 1678  
                                l6748 0B48                                  l6772 1222  
                                l6852 16F4                                  l6844 16DF  
                                l6782 1CA2                                  l6768 1214  
                                l6856 1701                                  l6786 1CB8  
                                _BAUD 0261                   _PS_2_Read_Data_TEMP 00C8  
                                _ECHO 025F                                  STR_1 0A3A  
                                STR_2 0A32                                  STR_3 0990  
                                STR_4 0A13                                  STR_5 09FD  
                                STR_6 096F                                  STR_7 09FD  
                                STR_8 09FD                                  STR_9 09FD  
                                _LATA 010C                                  _LATC 010E  
                                _LALT 01E9         __end_of_PS_2_ENABLE_INTERRUPT 1911  
                                _PIE1 0091                                  i1l71 0075  
                                i1l80 0087                                  i1l72 002F  
                                u8105 109A                                  i1l75 005B  
                                u8035 1ED7                                  i1l85 00A7  
                                u8205 1FED                                  i1l78 0082  
                                u8135 10B0                                  _RALT 01EC  
                                u8065 1074                                  u8165 1FC1  
                                u7605 1B70                                  u8085 108D  
                                u8255 114E                                  u8185 1FCD  
                                u8265 1171                                  u8195 1FE1  
                                u8435 1307                                  u8515 0681  
                                u8285 149B                                  u7573 1C71  
                                u8445 1317                                  u8525 0691  
                                u8295 1ABC                                  u8455 1337  
                                u8465 1346                                  u8545 06B9  
                                u7675 1BD8                                  u8395 1CDB  
                                u8475 1350                                  u8555 06BF  
                                u8715 121E                                  u8645 0A80  
                                u8655 0A99                                  u8665 0AA9  
                                u8585 06D5                                  u8595 06DB  
                                u8695 120F                                  _TMR2 001A  
                                _WPUA 020C                                  _WPUC 020E  
                          i1delayUS@i 0075                            i1delayUS@j 0079  
                        __CFG_WRT$OFF 0000      __size_ofi1_PS_2_ENABLE_INTERRUPT 000B  
                   i1___lldiv@divisor 0070                                  _main 1613  
                  UARTstringWAIT@data 022F                          ___ftpack@arg 0220  
                        ___ftpack@exp 0223                                  fsr0h 0005  
                                fsr1h 0007                                  fsr0l 0004  
                                indf0 0000                                  indf1 0001  
                                fsr1l 0006                                  btemp 007E  
                   i1___lldiv@counter 007D                   baudUSART@baudconfig 0220  
                       __CFG_BOREN$ON 0000                                  ltemp 007E  
                   SetBaud@Paritytemp 0156                      i1_UARTstringWAIT 1B8C  
                                start 00AC                                  ttemp 007E  
                                wtemp 007E                         __CFG_IESO$OFF 0000  
                    Reverse_Byte@This 0073             WriteFlash_Sequential@temp 0066  
                    Reverse_Byte@temp 0072                         __CFG_MCLRE$ON 0000  
                          _BlockErase 1A7A                          ___ftmul@cntr 024A  
                         ?i1_UARTchar 0078               ?_Decode_Scan_Code_Shift 0070  
                        ___ftmul@sign 024B                       __end_of_InitApp 1A2D  
                     __end_of_SetBaud 0CDE                            _Clock_TRIS 18EE  
                       ??_Init_System 0243                __size_of_READ_PS_2_PIN 0014  
                               ??_isr 006E                   _Right_Shift_Key_old 00D3  
                      _Init_PS_2_Send 1258                     ??i1_READ_PS_2_PIN 0070  
   i1UARTchar@NinethBit_override_data 0079       UARTchar@NinethBit_override_data 0229  
           _Decode_Scan_Code_Function 193B                           ReadBaud@row 0232  
     WriteFlash_Sequential@amountTemp 0065                       __end_of_Version 096F  
                       ??_ReadVoltage 024F                            _CloseUSART 191E  
                               ?_main 0070              __size_ofi1_CheckSum_byte 0030  
                               STR_10 09C4                                 STR_11 0A26  
                               STR_12 09FD                                 STR_20 09D9  
                               STR_13 09FD                                 STR_14 09ED  
                               STR_15 0A00                                 STR_16 09FD  
                               STR_17 09FD                         __CFG_WDTE$OFF 0000  
                               STR_18 09AC                                 STR_19 09FD  
                     __end_of___ftdiv 1371                      __end_of_ISNUMBER 191E  
                     __end_of___lldiv 2000                       __end_of___ftmul 06FC  
                               _CKPPS 0E25                       __end_of___llmod 1DCB  
                               _T2CON 001C                                 _IOCAF 0393  
                               _IOCAN 0392                                 _IOCAP 0391  
                               i1l261 1C11                                 i1l270 1B55  
                               i1l406 1DF4                                 i1l407 1DF7  
                               i1l409 1E10                                 i1l434 1B8C  
                               i1l610 18EB                                 i1l267 1B38  
                               i1l259 1BF8                                 i1l436 1BAA  
                               i1l269 1B3E                                 i1l446 0C55  
                               i1l455 0CCB                                 i1l615 19B0  
                               i1l393 1AEA                                 i1l395 1AF3  
                               i1l389 1AE0                                 i1l590 18C1  
                               i1l680 0259                                 i1l913 1A6E  
                               i1l825 0D47                                 i1l922 18DE  
                               i1l826 0D9B                                 i1l762 061D  
                               i1l770 051A                                 i1l595 18CB  
                               i1l793 05ED        __size_of_UART_send_break_timed 0023  
                               _RCREG 0199                 ?_Process_PS2_ScanCode 0070  
                               _RCSTA 019D                                 _SPBRG 019B  
       __end_of_UART_send_break_timed 1A50                  _PS_2_Read_Data_First 01E1  
                               _PORTA 000C                          InitUART@Baud 022E  
                               _TXREG 019A                   _ConfigureOscillator 1992  
                               _Alarm 025E                  _PS_2_Read_Data_Third 01E5  
                     __end_of_delayUS 1C8B                      _InternalADC_Read 1CC7  
                         i1delayUS@US 0070                   ___lmul@multiplicand 0074  
                      __CFG_FCMEN$OFF 0000                          InitUART@temp 023F  
               _WriteFlash_Sequential 1371                    i1___lldiv@dividend 0074  
               ReadFlash_2Byte@column 0222                      __end_of_UARTchar 1F5B  
                          SetBaud@buf 0120                       __end_of_dpowers 08FB  
                         ?i1_InitUART 0020                           ?i1_ReadBaud 0024  
                       ___ftpack@sign 0224                    __size_of_PS_2_INIT 000F  
                               main@i 0256                                 ltemp0 007E  
                               ltemp1 0082                                 ltemp2 0086  
                               ltemp3 0080                           ?i1_Send_PS2 0070  
             InternalADC_Read@channel 022E                                 ttemp0 007E  
                               ttemp1 0081                                 ttemp2 0084  
                               ttemp3 0087                                 ttemp4 007F  
                               status 0003               __end_of_BufferShiftBack 1D47  
                               wtemp0 007E                                 wtemp1 0080  
                               wtemp2 0082                                 wtemp3 0084  
                               wtemp4 0086                                 wtemp5 0088  
                               wtemp6 007F                       __end_of_sprintf 1800  
                         isr@ScanTemp 00C3                    __size_ofi1___lldiv 0052  
                __size_of_cleanBuffer 0018                           ?i1_Timer2ON 0070  
                ?_ConfigureOscillator 0070        __end_of_Decode_Scan_Code_Shift 1992  
                       _ScanCodeSHIFT 07F5                    __size_ofi1_delayUS 0033  
                     _UART_send_break 1889                       __initialization 00AE  
              __end_of_Init_PS_2_Send 12C8                   __end_of_NoParityMSG 093A  
                  __size_of_Data_TRIS 000B                          __end_of_main 1707  
                    __end_of_InitUART 1526                      ??_UARTstringWAIT 0231  
                         isr@Rx_fault 00C2                      __end_of_ReadBaud 1188  
                  i1___lldiv@quotient 0079            __end_of_DisableInternalADC 0A48  
                      _SpaceParityMSG 093A                      __end_of_ScanCode 07F5  
                      __CFG_LPBOR$OFF 0000                      __end_of_Send_PS2 1000  
                              ??_main 0255          __end_of_ScanCodeFunctionNoE0 0784  
                      __CFG_PLLEN$OFF 0000                      __end_of_Timer2ON 1885  
                 __end_of_Init_System 0B65                          ReadBaud@temp 023E  
                    i1CheckSum_byte@i 0077                        i1InitUART@Baud 0020  
                        ?i1_Data_TRIS 0070                      BufferShiftBack@i 0076  
       Decode_Scan_Code_Function@Code 0070                   __end_of_ReadVoltage 1258  
               ReadFlash_4Byte@column 0227                                _ADCON0 009D  
                              _ADCON1 009E                                _ADCON2 009F  
                 __size_ofi1_UARTchar 004D                      ___llmod@dividend 0024  
                              _ADRESH 009C                                _ADRESL 009B  
                      i1InitUART@temp 0031                         _READ_PS_2_PIN 19CA  
                      __CFG_ZCDDIS$ON 0000                                _ANSELA 018C  
                              _ANSELC 018E                      __end_of___ftpack 10C0  
                              _HFIOFS 04D0                                _RC1STA 019D  
                              _RC2PPS 0EA2                                i1l1046 1732  
                              i1l1049 1750                                i1l4030 1AF4  
                              i1l4200 1739                                i1l4016 1AE1  
                              i1l4008 1ADA                                i1l4026 1AEC  
                              i1l4050 1DFA                                i1l4044 1DD4  
                              i1l4052 1E07                                i1l4206 175F  
                              i1l4046 1DDE                                i1l5110 0DC4  
                              i1l4080 1F79                                i1l4232 17A8  
                              i1l4224 17A3                                i1l4216 1776  
                              i1l5120 0DC7                                i1l4234 170D  
                              i1l5122 0DE3                                i1l5026 1956  
                              i1l4092 1FA4                                i1l4236 17FA  
                              i1l5108 0DA8                                i1l5052 0D24  
                              i1l4078 1F6B                                i1l5134 0DEA  
                              i1l5062 0D4C                                i1l5054 0D41  
                              i1l4088 1F99                                i1l4520 1BAD  
                              i1l5160 0E44                                i1l5136 0E06  
                              i1l5064 0D51                                i1l5320 01FE  
                              i1l5240 0163                                i1l5216 0114  
                              i1l3802 1B59                                i1l4194 1730  
                              i1l5170 0E47                                i1l5146 0E09  
                              i1l5090 0D92                                i1l5330 022A  
                              i1l5322 0217                                i1l5226 013D  
                              i1l4700 1D3B                                i1l4196 1734  
                              i1l4540 19AE                                i1l5172 0E63  
                              i1l5148 0E25                                i1l5076 0D56  
                              i1l5404 02D9                                i1l5420 02FD  
                              i1l5332 0218                                i1l5308 01F9  
                              i1l5252 0181                                i1l5236 015E  
                              i1l5244 0168                                i1l4702 1D42  
                              i1l4550 19B5                                i1l5158 0E28  
                              i1l5078 0D72                                i1l5414 02FA  
                              i1l5406 02C7                                i1l5318 0210  
                              i1l5334 0231                                i1l5270 01AC  
                              i1l5184 1E5F                                i1l4704 1D0D  
                              i1l3920 139C                                i1l5096 0DA0  
                              i1l5088 0D75                                i1l5504 03BB  
                              i1l5432 0317                                i1l5424 0306  
                              i1l5416 02E2                                i1l5408 02E0  
                              i1l5344 0247                                i1l5186 1E61  
                              i1l5098 0DA5                                i1l5610 0523  
                              i1l5450 033D                                i1l5514 03D1  
                              i1l5418 02E8                                i1l5290 01D4  
                              i1l5282 01C6                                i1l5338 0239  
                              i1l5266 01A4                                i1l5370 028E  
                              i1l5274 01B5                                i1l3932 1378  
                              i1l4476 1552                                i1l5604 0511  
                              i1l5460 0357                                i1l5452 032B  
                              i1l5428 030E                                i1l5380 02A3  
                              i1l5348 0250                                i1l3934 13CE  
                              i1l3926 13B9                                i1l4478 1556  
                              i1l5630 0558                                i1l5622 0542  
                              i1l5614 052C                                i1l5534 03F2  
                              i1l5526 03E7                                i1l5462 035A  
                              i1l5454 0344                                i1l5518 03DE  
                              i1l5366 026E                                i1l5358 0263  
                              i1l5286 01CD                                i1l5294 01D9  
                              i1l3792 1B53                                i1l3784 1B4B  
                              i1l3768 1C1A                                i1l4752 0C3C  
                              i1l5480 037E                                i1l5464 0345  
                              i1l5392 02BB                                i1l5384 02AA  
                              i1l4770 0C7C                                i1l4914 1B04  
                              i1l5634 0565                                i1l5626 054F  
                              i1l5618 0539                                i1l5554 0446  
                              i1l5490 037F                                i1l5466 0361  
                              i1l5298 01E3                                i1l4860 1990  
                              i1l4676 191C                                i1l3964 1418  
                              i1l4780 0CA7                                i1l4756 0C4F  
                              i1l5652 05C4                                i1l5476 0377  
                              i1l5492 039C                                i1l5388 02B2  
                              i1l3966 143C                                i1l3982 1DB7  
                              i1l4782 0CAC                                i1l4790 0CC3  
                              i1l4918 1B0E                                i1l4686 19F6  
                              i1l5654 05C9                                i1l5662 05D8  
                              i1l5486 0391                                i1l5478 0365  
                              i1l4872 196C                                i1l4848 197E  
                              i1l3976 1D91                                i1l4784 0CB1  
                              i1l5672 061B                                i1l5656 05CE  
                              i1l5664 05E5                                i1l5584 049D  
                              i1l5568 0481                                i1l5488 0395  
                              i1l5912 009F                                i1l3978 1D9F  
                              i1l3986 1DC2                                i1l4778 0CA2  
                              i1l5658 05D3                                i1l5674 061E  
                              i1l5578 048A                                i1l5690 063D  
                              i1l5914 00A2                                i1l4884 1949  
                              i1l4788 0CB6                                i1l5668 0608  
                              i1l5596 04CA                                i1l5694 00E7  
                              i1l5880 0060                                i1l5878 005D  
                              _INTCON 000B                                u410_25 140F  
                              _FVRCON 0117                                u500_25 1588  
                              u413_25 1D94                                u510_25 110D  
                              _PARITY 0260                                u415_25 1DAD  
                              u431_25 1F6E                                _PMADRH 0192  
                              u520_25 1029                                u416_25 1DB8  
                              _PMADRL 0191                                u521_25 103F  
                              u433_25 1F7A                      __end_of___lwtoft 19F3  
                              _PMDATH 0194                                u522_25 104A  
                              u450_25 11D3                                u434_25 1F8E  
                              u530_25 0BC0                                _PMDATL 0193  
                              u523_25 1055                                u435_25 1F9A  
                              u531_25 0C1D                                _PMCON1 0195  
                              _PMCON2 0196                                u532_25 0C3A  
                              u381_23 1C0A                                u429_25 1E85  
                              u509_25 10EA                                u518_25 1011  
                              u454_25 1799                                u526_25 19FD  
                              u710_25 059C                    __size_of_ReadUSART 000A  
                              u519_25 101D                                u384_25 1B3F  
                              u528_25 1D27                                u456_25 17B2  
                              u449_25 1190                                u553_25 1B0F  
                              _OSCCON 0099                                u378_25 1A94  
                              u554_25 1B16                                u389_25 1A66  
                              u709_25 058C                                u728_25 001E  
                              u599_25 1E43                                _SPBRGH 019C  
                              _TX1STA 019E                                _UNLOCK 18D8  
                __end_of_OddParityMSG 0926                            _ResendLast 18A0  
               _PS_2_Read_Data_Second 01E3                             ??_InitApp 0220  
               ??_ConfigureOscillator 0220                                _Delete 00CD  
                    i1OpenUSART@spbrg 0070                        __CFG_PWRTE$OFF 0000  
                           ??_SetBaud 00B4                         ??_Timer2Reset 0070  
                          _Timer2Init 1AA5                           ?_BlockErase 0070  
                       InitUART@spbrg 023B                           SetBaud@Baud 00AF  
                  __size_of_OpenUSART 0041                       ?_Init_PS_2_Send 0070  
                              ___ftge 1C8B                __end_of_SpaceParityMSG 094A  
                   ?_Decode_Scan_Code 0070                                ___lmul 1AFC  
                      __CFG_STVREN$ON 0000                             ??___ftdiv 0232  
                           ??___lldiv 0228                           ?_Clock_TRIS 0070  
                           ??___ftmul 0242                             ??___llmod 0028  
                         SetBaud@temp 015A                   __size_ofi1_InitUART 00ED  
                   __end_of_PS_2_INIT 193B                   __size_ofi1_ReadBaud 0064  
                  ??_Decode_Scan_Code 0070                          ?i1_ReadUSART 0070  
                           ??_delayUS 0224  __size_of_Decode_Scan_Code_FunctionE0 0012  
                  __size_of_Timer2OFF 0003                           ?_CloseUSART 0070  
              ??_Process_PS2_ScanCode 00BC                   __size_ofi1_Send_PS2 018E  
               ___ftmul@f3_as_product 0247                     __end_ofi1___lldiv 1FAD  
              ?_WriteFlash_Sequential 007A                   __size_ofi1_Timer2ON 0003  
                   __end_ofi1_delayUS 1C23                       SetBaud@Baudtemp 0152  
                        ?i1_OpenUSART 0070                __size_of_CheckSum_byte 0031  
                   ??i1_CheckSum_byte 0073                        ?_READ_PS_2_PIN 0070  
                   __end_of_Data_TRIS 100B                             ??_sprintf 0030  
                      i1ReadBaud@temp 0030               i1READ_PS_2_PIN@DATA_CLK 0070  
             i1_PS_2_ENABLE_INTERRUPT 18E3               __end_of_UART_send_break 188E  
                     _ReadFlash_2Byte 1BBE                       _ReadFlash_4Byte 1EB9  
             __end_of__initialization 00DD                   Timer2Init@prescaler 0224  
                         _NoParityMSG 0926                    __size_of_WriteBaud 0068  
                    ?_BufferShiftBack 0070                            ___ftge@ff1 0220  
                          ___ftge@ff2 0223               ?_PS_2_DISABLE_INTERRUPT 0070  
                          ___ftdiv@f1 022F                            ___ftdiv@f2 022C  
                          ___ftdiv@f3 0237                            _VoltageMSG 0959  
                           ?_ISNUMBER 0070                    __size_of_baudUSART 0009  
                          ___ftmul@f1 023C                            ___ftmul@f2 023F  
                      __pcstackCOMMON 0070                          __pidataBANK1 06FC  
                        __pidataBANK4 1885                             ?_UARTchar 0228  
                       ?_PS2RawToScan 0078                    InitUART@baudconfig 023D  
                         _Init_System 0A48                   __end_of_Timer2Reset 187F  
                   __end_of_ReadUSART 18D8                            ___lwtoft@c 0228  
                         _ReadVoltage 11F0                       ReadVoltage@temp 0253  
                        WriteBaud@row 00A0              __end_ofi1_UARTstringWAIT 1BBE  
                      _OPTION_REGbits 0095                   ReadFlash_4Byte@temp 022E  
                        ?i1_baudUSART 0070                         ReadUSART@data 0221  
                         _SinLEDtimer 025A    __size_of_Decode_Scan_Code_Function 0010  
                   __end_of_OpenUSART 1D88                   __size_of_BlockErase 002B  
                     WriteBaud@Parity 00A6                     Send_PS2@oddparity 022E  
                          __pbssBANK1 00C4                            __pbssBANK3 01E1  
                          __pbssBANK4 0257                   __size_of_Clock_TRIS 000B  
                           ?_InitUART 022E                             ?_ReadBaud 0232  
                   __end_of_Timer2OFF 187C        __end_of_PS_2_DISABLE_INTERRUPT 19CA  
                  ReadVoltage@voltage 0250                               ?_UNLOCK 0070  
                         ?_ResendLast 0070                       i1_READ_PS_2_PIN 19A4  
                 __size_of_CloseUSART 000E                             ?_Send_PS2 0070  
                          ??_ISNUMBER 0070                  _ScanCodeFunctionNoE0 0700  
            __end_of_InternalADC_Read 1D06     __size_ofi1_PS_2_DISABLE_INTERRUPT 0011  
                         ?_Timer2Init 0070                    _ScanCodeFunctionE0 0866  
                           ?_Timer2ON 0070             ?i1_PS_2_DISABLE_INTERRUPT 0070  
                       _CheckSum_byte 1B5B                            __pmaintext 1613  
                        ??i1_UARTchar 007A                           _ParityTyped 01EB  
                       BlockErase@row 0070                               ?___ftge 0220  
                             ?___lmul 0070                   i1CheckSum_byte@This 0070  
                      ??_PS2RawToScan 0020                         _Caps_Lock_Key 00CB  
                       ?_Reverse_Byte 0070                            __pintentry 0004  
                          ??_UARTchar 022A                        ___lmul@product 0078  
                           ?___ftpack 0220                       i1InitUART@spbrg 002D  
                   _PS_2_Buffer_items 00D0                 i1CheckSum_byte@Parity 0076  
                           ?___lwtoft 0228                     __end_of_WriteBaud 11F0  
                     ??_READ_PS_2_PIN 0220                   BufferShiftBack@size 0071  
                   __end_of_baudUSART 18BA               __end_of_ReadFlash_2Byte 1BF0  
             __end_of_ReadFlash_4Byte 1F0A                               _OSCSTAT 009A  
                 Clock_TRIS@direction 0220             ??i1_PS_2_ENABLE_INTERRUPT 0070  
                             _PPSLOCK 0E0F                          ??i1_InitUART 0025  
                i1ReadFlash_2Byte@row 0070                          ??i1_ReadBaud 0028  
                       ?i1_Clock_TRIS 0070                    __end_ofi1_UARTchar 1E18  
                __size_ofi1_Data_TRIS 000A                     i1OpenUSART@config 0072  
                i1ReadFlash_4Byte@row 0075                            ??_InitUART 0233  
                          ??_ReadBaud 0236                          ??i1_Send_PS2 007A  
               READ_PS_2_PIN@DATA_CLK 0220                      ?_UART_send_break 0070  
                       ?i1_CloseUSART 0070                 _PS_2_ENABLE_INTERRUPT 1905  
                     __size_of_UNLOCK 000B                          ??i1_Timer2ON 0070  
                             _InitApp 1A0B                            ??_Send_PS2 022A  
                             _SetBaud 0B65                        InitUART@config 023E  
                      ?_CheckSum_byte 0220                           _Timer2Reset 187C  
     i1PS_2_ENABLE_INTERRUPT@DATA_CLK 0070                            ??_Timer2ON 0220  
                      InitUART@parity 0232               i1CheckSum_byte@Odd_Even 0072  
                      ??_Reverse_Byte 0070                               _Version 0966  
                     __size_of___ftge 003C                       __size_of___lmul 002F  
                             ___ftdiv 12C8                               ___lldiv 1FAD  
                             ___ftmul 0648                               ___llmod 1D88  
                   i1Send_PS2@command 0021                    __end_ofi1_InitUART 1613  
                             _delayUS 1C56                    __end_ofi1_ReadBaud 1124  
                          ??___ftpack 0225                               __ptext1 1C8B  
                             __ptext2 11F0                               __ptext3 19DE  
                             __ptext4 0648                               __ptext5 12C8  
                             __ptext6 105F                               __ptext7 1CC7  
                             __ptext8 0A41                               __ptext9 192C  
                          ??___lwtoft 022B                  __size_ofi1_ReadUSART 0009  
                        _OddParityMSG 0911                               _dpowers 08D3  
                  __end_ofi1_Send_PS2 0E6C                   __size_of_ResendLast 0008  
                           _T2CONbits 001C               i1CheckSum_byte@ThisTemp 0074  
                        __size_of_isr 00A8                     i1Send_PS2@timeout 0023  
            _Process_PS2_ScanCode$803 01DC              _Process_PS2_ScanCode$804 01DD  
            _Process_PS2_ScanCode$805 01DE              _Process_PS2_ScanCode$806 01DF  
         WriteFlash_Sequential@amount 007D           WriteFlash_Sequential@buffer 007C  
                  __end_ofi1_Timer2ON 1882                 _UART_send_break_timed 1A2D  
                 __size_of_Timer2Init 002B                    _DisableInternalADC 0A41  
         WriteFlash_Sequential@spaces 0068                        ??i1_Clock_TRIS 0070  
             __end_ofi1_READ_PS_2_PIN 19B7                               _sprintf 1707  
                             clrloop0 189B                     _Caps_Lock_Key_old 00CC  
                __size_ofi1_OpenUSART 002C                  end_of_initialization 00DD  
                       ??_cleanBuffer 0072                        ??i1_CloseUSART 0070  
               BufferShiftBack@buffer 0077                       i1ReadUSART@data 0071  
                             init_ram 1894                   ?_DisableInternalADC 0070  
                             initloop 1895                      UARTchar@override 0228  
                    ??_Init_PS_2_Send 0233          ?_Decode_Scan_Code_FunctionE0 0070  
                     ___lldiv@divisor 0220                       ___lldiv@counter 022D  
                        ??_BlockErase 0072                             _RCSTAbits 019D  
                        ??_Clock_TRIS 0220                          __pstringtext 0700  
               __end_of_EvenParityMSG 0911                       i1_CheckSum_byte 1B2B  
             ??_WriteFlash_Sequential 0020                          ??_CloseUSART 0220  
                ??_DisableInternalADC 0220                             _PS_2_INIT 192C  
                    __CFG_FOSC$INTOSC 0000                             _PS_2_bits 00D1  
                           _TRISAbits 008C                             _TRISCbits 008E  
           __size_of_Decode_Scan_Code 0012                      ?_ReadFlash_2Byte 0220  
                    ?_ReadFlash_4Byte 0225                  __size_ofi1_baudUSART 0006  
                           i1___lldiv 1F5B                 __end_of_MarkParityMSG 0959  
                  __end_of_BlockErase 1AA5           __end_of_ConfigureOscillator 19A4  
                __end_of_PS2RawToScan 1E68                             i1_delayUS 1BF0  
              ?_PS_2_ENABLE_INTERRUPT 0070                    __end_of_Clock_TRIS 18F9  
                           _BaudTyped 00C4                             _Data_TRIS 1000  
                           _CapsCount 01E7                 i1baudUSART@baudconfig 0070  
                         ___ftdiv@exp 023A                             _Caps_Lock 01E8  
                     ??_CheckSum_byte 0223                           _CCP2CONbits 029A  
                           _TXSTAbits 019E                        __end_of_UNLOCK 18E3  
                  __end_of_CloseUSART 192C                  Timer2Init@postscaler 0223  
                 __end_of_cleanBuffer 1A0B         ??_Decode_Scan_Code_FunctionE0 0070  
                         ___ftmul@exp 0246                     __size_of_ISNUMBER 000D  
                      __end_of___ftge 1CC7                 CheckSum_byte@Odd_Even 0222  
                        ?_Init_System 0070                        __end_of___lmul 1B2B  
                   __size_of_UARTchar 0051                          ?_ReadVoltage 024C  
                          ?_PS_2_INIT 0070                             Send_PS2@i 0230  
       __size_of_Process_PS2_ScanCode 0567                ?_UART_send_break_timed 007A  
                 start_initialization 00AE                     ?i1_UARTstringWAIT 0021  
                           _ReadUSART 18CE               __size_of_UARTstringWAIT 0033  
               CheckSum_byte@ThisTemp 0224                           __end_of_isr 00AC  
                          ?i1___lldiv 0070                    ??i1_UARTstringWAIT 0023  
    __end_ofi1_PS_2_DISABLE_INTERRUPT 195C                         WriteBaud@Baud 00A2  
                __end_of_Reverse_Byte 105F                      ?i1_READ_PS_2_PIN 0070  
                          ?i1_delayUS 0070              ??_Decode_Scan_Code_Shift 0070  
                       WriteBaud@temp 006A                             _OpenUSART 1D47  
                          ?_Data_TRIS 0070                              ??_UNLOCK 0070  
                        ??_ResendLast 007E                       ___llmod@divisor 0020  
                   __size_of_InitUART 00E3                       ___llmod@counter 0029  
                   __size_of_ReadBaud 0064                             _Shift_Key 01EF  
                        ??_Timer2Init 0220                             _Timer2OFF 1879  
             __end_ofi1_CheckSum_byte 1B5B                     ?_InternalADC_Read 022A  
                   __size_of_Send_PS2 0194                              ??___ftge 0226  
                            ??___lmul 0078              __size_of_BufferShiftBack 0041  
                  ??_InternalADC_Read 022C                     __size_of_Timer2ON 0003  
                __end_ofi1_Clock_TRIS 18C4                           __pdataBANK1 00E1  
                         __pdataBANK4 0261                  __end_ofi1_CloseUSART 1905  
                       i1ReadBaud@row 0024                     __size_of___ftpack 0061  
                    cleanBuffer@count 0070                    __end_of_ResendLast 18A8  
                          ?_ReadUSART 0070                             ___latbits 0002  
                   __size_of___lwtoft 0015                         __pcstackBANK0 0020  
                       __pcstackBANK1 00A0                         __pcstackBANK2 0120  
                       __pcstackBANK3 01A0                         __pcstackBANK4 0220  
                           _WriteBaud 1188                   __end_of__stringdata 0A41  
                  i1UARTchar@override 0078                    ReadFlash_2Byte@row 0220  
                  __end_of_Timer2Init 1AD0                             _baudUSART 18B1  
                  ReadFlash_4Byte@row 0225                           _cleanBuffer 19F3  
                          ?_OpenUSART 0220                           sprintf@_val 0039  
                         sprintf@flag 0036                           sprintf@prec 0037  
                            ?_InitApp 0070                 __end_of_ScanCodeSHIFT 0866  
     Decode_Scan_Code_FunctionE0@Code 0070                              ?_SetBaud 00AF  
                      ReadBaud@column 0234                            ?_Timer2OFF 0070  
                        ?_Timer2Reset 0070                              ?___ftdiv 022C  
                            ?___lldiv 0220                   i1Send_PS2@oddparity 0020  
                            ?___ftmul 023C                              ?___llmod 0020  
                    __CFG_PPS1WAY$OFF 0000         WriteFlash_Sequential@TempBufH 0023  
       WriteFlash_Sequential@TempBufL 0043                              ?_delayUS 0220  
              WriteFlash_Sequential@i 0069            Decode_Scan_Code_Shift@Code 0070  
                            _BAUD1CON 019F                           ??_PS_2_INIT 0233  
                    i1InitUART@config 0030                              _BAUDMODE 00CA  
               __size_of_PS2RawToScan 0050                      i1InitUART@parity 0024  
                       ??i1_Data_TRIS 0070                      _Decode_Scan_Code 195C  
                  __end_of_VoltageMSG 0966                            ?_WriteBaud 00A0  
    i1PS_2_DISABLE_INTERRUPT@DATA_CLK 0071                           ??i1___lldiv 0078  
               __end_of_READ_PS_2_PIN 19DE                              ?_sprintf 002A  
                          ?_baudUSART 0070                           ??i1_delayUS 0074  
                           delayUS@US 0220       __size_of_Decode_Scan_Code_Shift 0012  
          ?_Decode_Scan_Code_Function 0070                           ??_Data_TRIS 0220  
          WriteFlash_Sequential@tempH 0063            WriteFlash_Sequential@tempL 0064  
            i1_PS_2_DISABLE_INTERRUPT 194B                             clear_ram0 189A  
                            _PIE1bits 0091                          cleanBuffer@i 0074  
                BufferShiftBack@shift 0070                              _ISNUMBER 1911  
                            _PIR1bits 0011                      ?i1_CheckSum_byte 0070  
            __size_of_UART_send_break 0005              WriteFlash_Sequential@row 007A  
                            _UARTchar 1F0A                  i1Data_TRIS@direction 0070  
                        _PS2RawToScan 1E18                         ??i1_ReadUSART 0070  
                            _LControl 00CE                           __stringdata 096F  
                __size_of_Init_System 011D              ?i1_PS_2_ENABLE_INTERRUPT 0070  
      __size_of_WriteFlash_Sequential 00D2                     ??_BufferShiftBack 0072  
               i1ReadFlash_4Byte@temp 0020         __end_of_WriteFlash_Sequential 1443  
               __size_of_Reverse_Byte 0054                        _UARTstringWAIT 1C23  
                         ??_ReadUSART 0220                  __size_of_ReadVoltage 0068  
                            _RControl 01ED                         ??i1_OpenUSART 0072  
            ??_PS_2_DISABLE_INTERRUPT 0220               ??_PS_2_ENABLE_INTERRUPT 0220  
                   ___lmul@multiplier 0070                              SetBaud@i 015E  
                            _InitUART 1443                              _ReadBaud 1124  
                         ??_OpenUSART 0222                   __end_ofi1_Data_TRIS 18CE  
                i1UARTstringWAIT@data 0021                              _ScanCode 0784  
                     OpenUSART@config 0222     __end_of_Decode_Scan_Code_Function 194B  
                            _Send_PS2 0E6C                 __size_ofi1_Clock_TRIS 000A  
                    __size_of_InitApp 0022                           ??_Timer2OFF 0070  
                            _Timer2ON 1882                      __size_of_SetBaud 0179  
               __size_ofi1_CloseUSART 000C                          _Reverse_Byte 100B  
                    __size_of___ftdiv 00A9                       cleanBuffer@data 0073  
              _Decode_Scan_Code_Shift 1980                      __size_of___lldiv 0053  
                    __size_of___ftmul 00B4                      __size_of___llmod 0043  
                       SetBaud@Parity 00B3                              ___ftpack 105F  
                      _PS_2_ScanCodes 00D5               ??_UART_send_break_timed 007C  
                    __size_of_delayUS 0035           __size_of_DisableInternalADC 0007  
              __end_of_UARTstringWAIT 1C56                              ___lwtoft 19DE  
                     Send_PS2@command 022F                         ??i1_baudUSART 0070  
                 __end_ofi1_ReadUSART 18B1                 i1Clock_TRIS@direction 0070  
                         ??_WriteBaud 00A7                         ISNUMBER@ascii 0070  
                     Send_PS2@timeout 0231                              __ptext10 1AA5  
                            __ptext11 1882                              __ptext20 1C23  
                            __ptext12 1258                              __ptext21 1C56  
                            __ptext13 0E6C                              __ptext30 18CE  
                            __ptext22 1F0A                              __ptext14 19CA  
                            __ptext31 1D47                              __ptext23 1B5B  
                            __ptext15 1000                              __ptext40 18A0  
                            __ptext32 191E                              __ptext24 1124  
                            __ptext16 18EE                              __ptext41 194B  
                            __ptext33 1A0B                              __ptext25 1EB9  
                            __ptext17 19B7                              __ptext50 1889  
                            __ptext42 00E1                              __ptext34 1992  
                            __ptext26 1BBE                              __ptext18 1905  
                            __ptext51 0B65                              __ptext43 0CDE  
                            __ptext27 1443                              __ptext19 0A48  
                            __ptext60 18F9                              __ptext52 1B8C  
                            __ptext44 19A4                              __ptext36 187F  
                            __ptext28 18B1                              __ptext61 1707  
                            __ptext53 1DCB                              __ptext45 18C4  
                            __ptext37 18E3                              __ptext29 1FAD  
                            __ptext70 1911                              __ptext62 1F5B  
                            __ptext54 10C0                              __ptext46 18BA  
                            __ptext38 187C                              __ptext71 1980  
                            __ptext63 1D88                              __ptext55 1E68  
                            __ptext47 19F3                              __ptext39 1879  
                            __ptext72 196E                              __ptext64 1188  
                            __ptext56 1526                              __ptext48 1AFC  
                            __ptext73 193B                              __ptext65 1371  
                            __ptext57 188E                              __ptext49 1A2D  
                            __ptext74 195C                              __ptext66 1BF0  
                            __ptext58 18A8                              __ptext75 1D06  
                            __ptext67 1A50                              __ptext59 1AD0  
                            __ptext76 1E18                              __ptext68 1A7A  
                            __ptext77 1B2B                              __ptext69 18D8  
                            __ptext78 100B         PS_2_ENABLE_INTERRUPT@DATA_CLK 0220  
                   i1_ReadFlash_2Byte 1A50                     i1_ReadFlash_4Byte 1E68  
                         ??_baudUSART 0220                          i1_Clock_TRIS 18BA  
                    __size_of_sprintf 00F9                    ?i1_ReadFlash_2Byte 0070  
                  ?i1_ReadFlash_4Byte 0075                   __end_ofi1_OpenUSART 1AFC  
                       __size_of_main 00F4                          i1_CloseUSART 18F9  
            __size_of_ReadFlash_2Byte 0032              __size_of_ReadFlash_4Byte 0051  
        __end_of_Process_PS2_ScanCode 0648                              delayUS@i 0225  
                            delayUS@j 0229             __size_ofi1_UARTstringWAIT 0032  
                        _pwrLEDtoggle 025C          __size_of_ConfigureOscillator 0012  
               __end_of_CheckSum_byte 1B8C                   ??i1_ReadFlash_2Byte 0073  
                 ??i1_ReadFlash_4Byte 0079                            _RC1STAbits 019D  
                      CheckSum_byte@i 0227                        _Left_Shift_Key 01EA  
                __size_of_Timer2Reset 0003       __end_ofi1_PS_2_ENABLE_INTERRUPT 18EE  
             __size_of_Init_PS_2_Send 0070                        Timer2Init@time 0222  
                   ??_UART_send_break 0070                       ?_UARTstringWAIT 022F  
                 CheckSum_byte@Parity 0226                            _INTCONbits 000B  
           __size_of_InternalADC_Read 003F                        OpenUSART@spbrg 0220  
           __end_ofi1_ReadFlash_2Byte 1A7A             __end_ofi1_ReadFlash_4Byte 1EB9  
                        UARTchar@data 022E                           i1_Data_TRIS 18C4  
                         pic14e$flags 007E       __size_of_PS_2_DISABLE_INTERRUPT 0013  
                 __end_ofi1_baudUSART 1894                              intlevel1 0000  
                           sprintf@ap 003D                             sprintf@sp 003E  
                        ?_cleanBuffer 0070                      ___lldiv@dividend 0224  
 __end_of_Decode_Scan_Code_FunctionE0 1980           _Decode_Scan_Code_FunctionE0 196E  
                   __CFG_CLKOUTEN$OFF 0000                        _BatteryVoltage 0257  
            __size_ofi1_READ_PS_2_PIN 0013              __end_of_Decode_Scan_Code 196E  
                          i1_UARTchar 1DCB                       _Right_Shift_Key 01EE  
                         i1Send_PS2@i 0022                           i1_ReadUSART 18A8  
                       _EvenParityMSG 08FB                              sprintf@c 003F  
                            sprintf@f 002A                      i1ReadBaud@column 0026  
                    ___lldiv@quotient 0229               i1ReadFlash_2Byte@column 0072  
                Decode_Scan_Code@Code 0070            ??i1_PS_2_DISABLE_INTERRUPT 0070  
                         i1_OpenUSART 1AD0                     Init_System@Parity 0250  
                  _Left_Shift_Key_old 00CF                            _TX1STAbits 019E  
                          i1_InitUART 1526                     CheckSum_byte@This 0220  
                      i1UARTchar@data 0020                            i1_ReadBaud 10C0  
                       _MarkParityMSG 094A                            i1_Send_PS2 0CDE  
         ??_Decode_Scan_Code_Function 0070                       Init_System@Baud 024C  
                          i1_Timer2ON 187F                       Init_System@temp 0248  
                     PS2RawToScan@Raw 0078        PS_2_DISABLE_INTERRUPT@DATA_CLK 0221  
                    PS2RawToScan@temp 007A  
